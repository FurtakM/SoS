// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses , traitor ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 35
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10636 0 0
// PrepareRussianCommander ;
  44: CALL 12170 0 0
// PrepareSouthBase ;
  48: CALL 12266 0 0
// PrepareNorthBase ;
  52: CALL 12604 0 0
// PrepareOtherRussians ;
  56: CALL 12999 0 0
// PrepareHeroes ;
  60: CALL 10957 0 0
// PrepareLisSquad ;
  64: CALL 11327 0 0
// PrepareOtherAmericans ;
  68: CALL 11640 0 0
// Action ;
  72: CALL 250 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 35
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 34
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// traitor := false ;
 237: LD_ADDR_EXP 33
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function Action ; var tmp ; begin
 250: LD_INT 0
 252: PPUSH
 253: PPUSH
// InGameOn ;
 254: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 258: LD_EXP 1
 262: PPUSH
 263: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 267: LD_ADDR_VAR 0 2
 271: PUSH
 272: LD_INT 22
 274: PUSH
 275: LD_INT 4
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: LD_INT 21
 284: PUSH
 285: LD_INT 1
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: LD_EXP 4
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: ST_TO_ADDR
// if Cyrus and Bobby then
 310: LD_EXP 3
 314: PUSH
 315: LD_EXP 2
 319: AND
 320: IFFALSE 650
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 322: LD_EXP 3
 326: PPUSH
 327: LD_INT 43
 329: PPUSH
 330: LD_INT 72
 332: PPUSH
 333: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 337: LD_EXP 2
 341: PPUSH
 342: LD_INT 44
 344: PPUSH
 345: LD_INT 70
 347: PPUSH
 348: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 352: LD_EXP 1
 356: PPUSH
 357: LD_INT 46
 359: PPUSH
 360: LD_INT 73
 362: PPUSH
 363: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 367: LD_EXP 3
 371: PPUSH
 372: LD_STRING D1a-Cyrus-1
 374: PPUSH
 375: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 379: LD_EXP 1
 383: PPUSH
 384: LD_STRING D1a-JMM-1
 386: PPUSH
 387: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 391: LD_EXP 3
 395: PPUSH
 396: LD_INT 37
 398: PPUSH
 399: LD_INT 66
 401: PPUSH
 402: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 406: LD_EXP 2
 410: PPUSH
 411: LD_INT 41
 413: PPUSH
 414: LD_INT 67
 416: PPUSH
 417: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 421: LD_EXP 1
 425: PPUSH
 426: LD_INT 38
 428: PPUSH
 429: LD_INT 64
 431: PPUSH
 432: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 436: LD_EXP 2
 440: PPUSH
 441: LD_STRING D1a-Bobby-2
 443: PPUSH
 444: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 448: LD_EXP 3
 452: PPUSH
 453: LD_INT 35
 455: PPUSH
 456: LD_INT 62
 458: PPUSH
 459: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 463: LD_EXP 2
 467: PPUSH
 468: LD_INT 32
 470: PPUSH
 471: LD_INT 60
 473: PPUSH
 474: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 478: LD_EXP 1
 482: PPUSH
 483: LD_INT 35
 485: PPUSH
 486: LD_INT 60
 488: PPUSH
 489: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 493: LD_EXP 1
 497: PPUSH
 498: LD_STRING D1a-JMM-2
 500: PPUSH
 501: CALL_OW 88
// ComWalk ( Lisa ) ;
 505: LD_EXP 4
 509: PPUSH
 510: CALL_OW 138
// wait ( 0 0$1 ) ;
 514: LD_INT 35
 516: PPUSH
 517: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 521: LD_EXP 4
 525: PPUSH
 526: LD_EXP 1
 530: PPUSH
 531: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 535: LD_EXP 1
 539: PUSH
 540: LD_EXP 3
 544: PUSH
 545: LD_EXP 2
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PPUSH
 555: LD_EXP 4
 559: PPUSH
 560: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 564: LD_VAR 0 2
 568: PUSH
 569: LD_INT 1
 571: ARRAY
 572: PPUSH
 573: LD_INT 33
 575: PPUSH
 576: LD_INT 55
 578: PPUSH
 579: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 583: LD_VAR 0 2
 587: PUSH
 588: LD_INT 2
 590: ARRAY
 591: PPUSH
 592: LD_INT 30
 594: PPUSH
 595: LD_INT 54
 597: PPUSH
 598: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 602: LD_VAR 0 2
 606: PUSH
 607: LD_INT 1
 609: ARRAY
 610: PPUSH
 611: LD_EXP 1
 615: PPUSH
 616: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 620: LD_VAR 0 2
 624: PUSH
 625: LD_INT 2
 627: ARRAY
 628: PPUSH
 629: LD_EXP 1
 633: PPUSH
 634: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 638: LD_EXP 4
 642: PPUSH
 643: LD_STRING D1a-Lisa-2
 645: PPUSH
 646: CALL_OW 88
// end ; if Cyrus and not Bobby then
 650: LD_EXP 3
 654: PUSH
 655: LD_EXP 2
 659: NOT
 660: AND
 661: IFFALSE 866
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 663: LD_EXP 3
 667: PPUSH
 668: LD_INT 43
 670: PPUSH
 671: LD_INT 72
 673: PPUSH
 674: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 678: LD_EXP 1
 682: PPUSH
 683: LD_INT 46
 685: PPUSH
 686: LD_INT 73
 688: PPUSH
 689: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 693: LD_EXP 3
 697: PPUSH
 698: LD_STRING D1a-Cyrus-1
 700: PPUSH
 701: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 705: LD_EXP 1
 709: PPUSH
 710: LD_STRING D1a-JMM-1
 712: PPUSH
 713: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 717: LD_EXP 3
 721: PPUSH
 722: LD_INT 37
 724: PPUSH
 725: LD_INT 66
 727: PPUSH
 728: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 732: LD_EXP 1
 736: PPUSH
 737: LD_INT 38
 739: PPUSH
 740: LD_INT 64
 742: PPUSH
 743: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 747: LD_EXP 3
 751: PPUSH
 752: LD_STRING D1a-Cyrus-2
 754: PPUSH
 755: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 35
 766: PPUSH
 767: LD_INT 62
 769: PPUSH
 770: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 774: LD_EXP 1
 778: PPUSH
 779: LD_INT 35
 781: PPUSH
 782: LD_INT 60
 784: PPUSH
 785: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 789: LD_EXP 1
 793: PPUSH
 794: LD_STRING D1a-JMM-2
 796: PPUSH
 797: CALL_OW 88
// ComWalk ( Lisa ) ;
 801: LD_EXP 4
 805: PPUSH
 806: CALL_OW 138
// wait ( 0 0$1 ) ;
 810: LD_INT 35
 812: PPUSH
 813: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 817: LD_EXP 4
 821: PPUSH
 822: LD_EXP 1
 826: PPUSH
 827: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 831: LD_EXP 4
 835: PPUSH
 836: LD_STRING D1a-Lisa-2
 838: PPUSH
 839: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 843: LD_EXP 1
 847: PUSH
 848: LD_EXP 3
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PPUSH
 857: LD_EXP 4
 861: PPUSH
 862: CALL_OW 119
// end ; if not Cyrus and Bobby then
 866: LD_EXP 3
 870: NOT
 871: PUSH
 872: LD_EXP 2
 876: AND
 877: IFFALSE 1156
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 879: LD_EXP 2
 883: PPUSH
 884: LD_INT 44
 886: PPUSH
 887: LD_INT 70
 889: PPUSH
 890: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 894: LD_EXP 1
 898: PPUSH
 899: LD_INT 46
 901: PPUSH
 902: LD_INT 73
 904: PPUSH
 905: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 909: LD_EXP 2
 913: PPUSH
 914: LD_STRING D1a-Bobby-1
 916: PPUSH
 917: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 921: LD_EXP 1
 925: PPUSH
 926: LD_STRING D1a-JMM-1
 928: PPUSH
 929: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 933: LD_EXP 2
 937: PPUSH
 938: LD_INT 37
 940: PPUSH
 941: LD_INT 66
 943: PPUSH
 944: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 38
 955: PPUSH
 956: LD_INT 64
 958: PPUSH
 959: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 963: LD_EXP 2
 967: PPUSH
 968: LD_STRING D1a-Bobby-2
 970: PPUSH
 971: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 975: LD_EXP 2
 979: PPUSH
 980: LD_INT 35
 982: PPUSH
 983: LD_INT 62
 985: PPUSH
 986: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 990: LD_EXP 1
 994: PPUSH
 995: LD_INT 35
 997: PPUSH
 998: LD_INT 60
1000: PPUSH
1001: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1005: LD_EXP 1
1009: PPUSH
1010: LD_STRING D1a-JMM-2
1012: PPUSH
1013: CALL_OW 88
// ComWalk ( Lisa ) ;
1017: LD_EXP 4
1021: PPUSH
1022: CALL_OW 138
// wait ( 0 0$1 ) ;
1026: LD_INT 35
1028: PPUSH
1029: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1033: LD_EXP 4
1037: PPUSH
1038: LD_EXP 1
1042: PPUSH
1043: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1047: LD_EXP 1
1051: PUSH
1052: LD_EXP 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: LD_EXP 4
1065: PPUSH
1066: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1070: LD_VAR 0 2
1074: PUSH
1075: LD_INT 1
1077: ARRAY
1078: PPUSH
1079: LD_INT 33
1081: PPUSH
1082: LD_INT 55
1084: PPUSH
1085: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1089: LD_VAR 0 2
1093: PUSH
1094: LD_INT 2
1096: ARRAY
1097: PPUSH
1098: LD_INT 30
1100: PPUSH
1101: LD_INT 54
1103: PPUSH
1104: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1108: LD_VAR 0 2
1112: PUSH
1113: LD_INT 1
1115: ARRAY
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1126: LD_VAR 0 2
1130: PUSH
1131: LD_INT 2
1133: ARRAY
1134: PPUSH
1135: LD_EXP 1
1139: PPUSH
1140: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1144: LD_EXP 4
1148: PPUSH
1149: LD_STRING D1a-Lisa-2
1151: PPUSH
1152: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1156: LD_EXP 3
1160: NOT
1161: PUSH
1162: LD_EXP 2
1166: NOT
1167: AND
1168: IFFALSE 1382
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_INT 37
1177: PPUSH
1178: LD_INT 66
1180: PPUSH
1181: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1185: LD_EXP 1
1189: PPUSH
1190: LD_STRING D1b-JMM-1
1192: PPUSH
1193: CALL_OW 88
// ComCrawl ( JMM ) ;
1197: LD_EXP 1
1201: PPUSH
1202: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1206: LD_EXP 1
1210: PPUSH
1211: LD_INT 35
1213: PPUSH
1214: LD_INT 60
1216: PPUSH
1217: CALL_OW 171
// wait ( 0 0$8 ) ;
1221: LD_INT 280
1223: PPUSH
1224: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1228: LD_EXP 1
1232: PPUSH
1233: LD_STRING D1b-JMM-1a
1235: PPUSH
1236: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1240: LD_EXP 1
1244: PUSH
1245: LD_EXP 4
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 138
// wait ( 0 0$1 ) ;
1258: LD_INT 35
1260: PPUSH
1261: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1265: LD_EXP 4
1269: PPUSH
1270: LD_EXP 1
1274: PPUSH
1275: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1279: LD_EXP 1
1283: PUSH
1284: EMPTY
1285: LIST
1286: PPUSH
1287: LD_EXP 4
1291: PPUSH
1292: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1296: LD_VAR 0 2
1300: PUSH
1301: LD_INT 1
1303: ARRAY
1304: PPUSH
1305: LD_INT 33
1307: PPUSH
1308: LD_INT 55
1310: PPUSH
1311: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1315: LD_VAR 0 2
1319: PUSH
1320: LD_INT 2
1322: ARRAY
1323: PPUSH
1324: LD_INT 30
1326: PPUSH
1327: LD_INT 54
1329: PPUSH
1330: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1334: LD_VAR 0 2
1338: PUSH
1339: LD_INT 1
1341: ARRAY
1342: PPUSH
1343: LD_EXP 1
1347: PPUSH
1348: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1352: LD_VAR 0 2
1356: PUSH
1357: LD_INT 2
1359: ARRAY
1360: PPUSH
1361: LD_EXP 1
1365: PPUSH
1366: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1370: LD_EXP 4
1374: PPUSH
1375: LD_STRING D1b-Lisa-1
1377: PPUSH
1378: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1382: LD_EXP 1
1386: PPUSH
1387: LD_STRING D1-JMM-1
1389: PPUSH
1390: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1394: LD_EXP 4
1398: PPUSH
1399: LD_STRING D1-Lisa-1
1401: PPUSH
1402: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1406: LD_EXP 1
1410: PPUSH
1411: LD_STRING D1-JMM-2
1413: PPUSH
1414: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1418: LD_EXP 9
1422: PPUSH
1423: LD_STRING D1-Pow-2
1425: PPUSH
1426: CALL_OW 586
// if Cyrus then
1430: LD_EXP 3
1434: IFFALSE 1460
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1436: LD_EXP 3
1440: PPUSH
1441: LD_STRING D1-Cyrus-2
1443: PPUSH
1444: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1448: LD_EXP 1
1452: PPUSH
1453: LD_STRING D1-JMM-3
1455: PPUSH
1456: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1460: LD_EXP 9
1464: PPUSH
1465: LD_STRING D1-Pow-3
1467: PPUSH
1468: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1472: LD_EXP 1
1476: PPUSH
1477: LD_STRING D1-JMM-4
1479: PPUSH
1480: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1484: LD_EXP 9
1488: PPUSH
1489: LD_STRING D1-Pow-4
1491: PPUSH
1492: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1496: LD_EXP 9
1500: PPUSH
1501: LD_STRING D1-Pow-4a
1503: PPUSH
1504: CALL_OW 586
// if Cyrus then
1508: LD_EXP 3
1512: IFFALSE 1526
// Say ( Cyrus , D1-Cyrus-4 ) ;
1514: LD_EXP 3
1518: PPUSH
1519: LD_STRING D1-Cyrus-4
1521: PPUSH
1522: CALL_OW 88
// if Bobby then
1526: LD_EXP 2
1530: IFFALSE 1568
// begin Say ( Bobby , D1-Bobby-4 ) ;
1532: LD_EXP 2
1536: PPUSH
1537: LD_STRING D1-Bobby-4
1539: PPUSH
1540: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1544: LD_EXP 4
1548: PPUSH
1549: LD_STRING D1-Lisa-4
1551: PPUSH
1552: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1556: LD_EXP 1
1560: PPUSH
1561: LD_STRING D1-JMM-5
1563: PPUSH
1564: CALL_OW 88
// end ; InGameOff ;
1568: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1572: LD_INT 22
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: LD_EXP 6
1591: PUSH
1592: LD_EXP 7
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: DIFF
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1609: LD_STRING M1
1611: PPUSH
1612: CALL_OW 337
// SaveForQuickRestart ;
1616: CALL_OW 22
// end ;
1620: LD_VAR 0 1
1624: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1625: LD_INT 7
1627: PPUSH
1628: LD_INT 22
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL_OW 70
1642: PUSH
1643: LD_INT 0
1645: GREATER
1646: IFFALSE 2059
1648: GO 1650
1650: DISABLE
// begin InGameOn ;
1651: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1655: LD_INT 22
1657: PUSH
1658: LD_INT 1
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 21
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: PUSH
1675: EMPTY
1676: LIST
1677: LIST
1678: PPUSH
1679: CALL_OW 69
1683: PPUSH
1684: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1688: LD_INT 24
1690: PPUSH
1691: LD_INT 32
1693: PPUSH
1694: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1698: LD_EXP 5
1702: PPUSH
1703: LD_INT 4
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1713: LD_EXP 5
1717: PPUSH
1718: LD_INT 4
1720: PPUSH
1721: CALL_OW 336
// wait ( 0 0$1 ) ;
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1732: LD_EXP 5
1736: PPUSH
1737: LD_INT 27
1739: PPUSH
1740: LD_INT 38
1742: PPUSH
1743: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1747: LD_EXP 5
1751: PPUSH
1752: LD_EXP 1
1756: PPUSH
1757: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1761: LD_INT 22
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 21
1773: PUSH
1774: LD_INT 1
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: PPUSH
1785: CALL_OW 69
1789: PUSH
1790: LD_EXP 5
1794: PUSH
1795: EMPTY
1796: LIST
1797: DIFF
1798: PPUSH
1799: LD_EXP 5
1803: PPUSH
1804: CALL_OW 119
// wait ( 0 0$1 ) ;
1808: LD_INT 35
1810: PPUSH
1811: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1815: LD_EXP 5
1819: PPUSH
1820: LD_STRING D2a-Khat-1
1822: PPUSH
1823: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1827: LD_EXP 1
1831: PPUSH
1832: LD_STRING D2a-JMM-1
1834: PPUSH
1835: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1839: LD_EXP 5
1843: PPUSH
1844: LD_STRING D2a-Khat-2
1846: PPUSH
1847: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1851: LD_EXP 1
1855: PPUSH
1856: LD_STRING D2a-JMM-2
1858: PPUSH
1859: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1863: LD_EXP 5
1867: PPUSH
1868: LD_STRING D2a-Khat-3
1870: PPUSH
1871: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1875: LD_EXP 1
1879: PPUSH
1880: LD_STRING D2a-JMM-3
1882: PPUSH
1883: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1887: LD_EXP 5
1891: PPUSH
1892: LD_STRING D2a-Khat-4
1894: PPUSH
1895: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1899: LD_EXP 1
1903: PPUSH
1904: LD_STRING D2a-JMM-4
1906: PPUSH
1907: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1911: LD_EXP 5
1915: PPUSH
1916: LD_STRING D2a-Khat-5
1918: PPUSH
1919: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1923: LD_EXP 1
1927: PPUSH
1928: LD_STRING D2a-JMM-5
1930: PPUSH
1931: CALL_OW 88
// InGameOff ;
1935: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
1939: LD_INT 22
1941: PUSH
1942: LD_INT 1
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 21
1951: PUSH
1952: LD_INT 1
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 24
1964: PUSH
1965: LD_INT 800
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: IFFALSE 2059
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1987: LD_EXP 5
1991: PPUSH
1992: LD_INT 22
1994: PUSH
1995: LD_INT 1
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 21
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: LD_INT 3
2014: PUSH
2015: LD_INT 24
2017: PUSH
2018: LD_INT 1000
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2047: LD_EXP 5
2051: PPUSH
2052: LD_STRING D2b-Khat-1
2054: PPUSH
2055: CALL_OW 88
// end ; end ;
2059: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2060: LD_INT 15
2062: PPUSH
2063: LD_INT 22
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL_OW 70
2077: IFFALSE 3274
2079: GO 2081
2081: DISABLE
2082: LD_INT 0
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
2088: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_INT 999
2096: PUSH
2097: LD_INT 999
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2107: LD_ADDR_VAR 0 4
2111: PUSH
2112: LD_INT 22
2114: PUSH
2115: LD_INT 1
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 21
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PPUSH
2136: CALL_OW 69
2140: PUSH
2141: LD_EXP 1
2145: PUSH
2146: LD_EXP 2
2150: PUSH
2151: LD_EXP 3
2155: PUSH
2156: LD_EXP 4
2160: PUSH
2161: LD_EXP 5
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: DIFF
2173: ST_TO_ADDR
// PrepareDeadSoldiers ;
2174: CALL 11782 0 0
// spotCorpses = 1 ;
2178: LD_ADDR_EXP 32
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2186: LD_INT 70
2188: PPUSH
2189: CALL_OW 67
// InGameOn ;
2193: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2197: LD_INT 23
2199: PPUSH
2200: LD_INT 12
2202: PPUSH
2203: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 2
2216: PUSH
2217: LD_INT 1
2219: ARRAY
2220: PUSH
2221: LD_INT 2
2223: ARRAY
2224: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2225: LD_ADDR_VAR 0 1
2229: PUSH
2230: LD_INT 22
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PUSH
2240: LD_INT 21
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PPUSH
2254: CALL_OW 69
2258: PUSH
2259: LD_EXP 1
2263: PUSH
2264: LD_EXP 5
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: DIFF
2273: PUSH
2274: FOR_IN
2275: IFFALSE 2326
// if IsOK ( i ) then
2277: LD_VAR 0 1
2281: PPUSH
2282: CALL_OW 302
2286: IFFALSE 2324
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2288: LD_ADDR_VAR 0 2
2292: PUSH
2293: LD_VAR 0 2
2297: PUSH
2298: LD_VAR 0 1
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: LD_INT 16
2310: PPUSH
2311: CALL_OW 299
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: EMPTY
2321: LIST
2322: ADD
2323: ST_TO_ADDR
2324: GO 2274
2326: POP
2327: POP
// for i = 2 to distanceTab do
2328: LD_ADDR_VAR 0 1
2332: PUSH
2333: DOUBLE
2334: LD_INT 2
2336: DEC
2337: ST_TO_ADDR
2338: LD_VAR 0 2
2342: PUSH
2343: FOR_TO
2344: IFFALSE 2390
// if distanceTab [ i ] [ 2 ] < min then
2346: LD_VAR 0 2
2350: PUSH
2351: LD_VAR 0 1
2355: ARRAY
2356: PUSH
2357: LD_INT 2
2359: ARRAY
2360: PUSH
2361: LD_VAR 0 3
2365: LESS
2366: IFFALSE 2388
// min = distanceTab [ i ] [ 2 ] ;
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: LD_VAR 0 2
2377: PUSH
2378: LD_VAR 0 1
2382: ARRAY
2383: PUSH
2384: LD_INT 2
2386: ARRAY
2387: ST_TO_ADDR
2388: GO 2343
2390: POP
2391: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2392: LD_ADDR_VAR 0 1
2396: PUSH
2397: LD_INT 22
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 21
2409: PUSH
2410: LD_INT 1
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PPUSH
2421: CALL_OW 69
2425: PUSH
2426: LD_EXP 1
2430: PUSH
2431: EMPTY
2432: LIST
2433: DIFF
2434: PUSH
2435: FOR_IN
2436: IFFALSE 2506
// begin ComMoveToArea ( i , DeadCutscene ) ;
2438: LD_VAR 0 1
2442: PPUSH
2443: LD_INT 28
2445: PPUSH
2446: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2450: LD_EXP 1
2454: PPUSH
2455: LD_INT 30
2457: PPUSH
2458: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2462: LD_VAR 0 1
2466: PPUSH
2467: LD_INT 23
2469: PPUSH
2470: LD_INT 11
2472: PPUSH
2473: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2477: LD_EXP 1
2481: PPUSH
2482: LD_INT 23
2484: PPUSH
2485: LD_INT 11
2487: PPUSH
2488: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2492: LD_EXP 36
2496: PPUSH
2497: LD_INT 250
2499: PPUSH
2500: CALL_OW 234
// end ;
2504: GO 2435
2506: POP
2507: POP
// for i = 2 to distanceTab do
2508: LD_ADDR_VAR 0 1
2512: PUSH
2513: DOUBLE
2514: LD_INT 2
2516: DEC
2517: ST_TO_ADDR
2518: LD_VAR 0 2
2522: PUSH
2523: FOR_TO
2524: IFFALSE 2910
// begin if distanceTab [ i ] [ 2 ] = min then
2526: LD_VAR 0 2
2530: PUSH
2531: LD_VAR 0 1
2535: ARRAY
2536: PUSH
2537: LD_INT 2
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 3
2545: EQUAL
2546: IFFALSE 2908
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2548: LD_VAR 0 2
2552: PUSH
2553: LD_VAR 0 1
2557: ARRAY
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PUSH
2563: LD_EXP 2
2567: EQUAL
2568: IFFALSE 2582
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2570: LD_EXP 2
2574: PPUSH
2575: LD_STRING DCorpses-Bobby-1
2577: PPUSH
2578: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2582: LD_VAR 0 2
2586: PUSH
2587: LD_VAR 0 1
2591: ARRAY
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PUSH
2597: LD_EXP 3
2601: EQUAL
2602: IFFALSE 2616
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2604: LD_EXP 3
2608: PPUSH
2609: LD_STRING DCorpses-Cyrus-1
2611: PPUSH
2612: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2616: LD_VAR 0 2
2620: PUSH
2621: LD_VAR 0 1
2625: ARRAY
2626: PUSH
2627: LD_INT 1
2629: ARRAY
2630: PUSH
2631: LD_EXP 4
2635: EQUAL
2636: IFFALSE 2650
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2638: LD_EXP 4
2642: PPUSH
2643: LD_STRING DCorpses-Lisa-1
2645: PPUSH
2646: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2650: LD_VAR 0 2
2654: PUSH
2655: LD_VAR 0 1
2659: ARRAY
2660: PUSH
2661: LD_INT 1
2663: ARRAY
2664: PUSH
2665: LD_VAR 0 4
2669: PUSH
2670: LD_INT 1
2672: ARRAY
2673: EQUAL
2674: PUSH
2675: LD_VAR 0 4
2679: PUSH
2680: LD_INT 1
2682: ARRAY
2683: PPUSH
2684: CALL_OW 258
2688: PUSH
2689: LD_INT 1
2691: EQUAL
2692: AND
2693: IFFALSE 2711
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2695: LD_VAR 0 4
2699: PUSH
2700: LD_INT 1
2702: ARRAY
2703: PPUSH
2704: LD_STRING DCorpses-Sol1-1
2706: PPUSH
2707: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2711: LD_VAR 0 2
2715: PUSH
2716: LD_VAR 0 1
2720: ARRAY
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PUSH
2726: LD_VAR 0 4
2730: PUSH
2731: LD_INT 1
2733: ARRAY
2734: EQUAL
2735: PUSH
2736: LD_VAR 0 4
2740: PUSH
2741: LD_INT 1
2743: ARRAY
2744: PPUSH
2745: CALL_OW 258
2749: PUSH
2750: LD_INT 2
2752: EQUAL
2753: AND
2754: IFFALSE 2772
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2756: LD_VAR 0 4
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: PPUSH
2765: LD_STRING DCorpses-FSol1-1
2767: PPUSH
2768: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2772: LD_VAR 0 2
2776: PUSH
2777: LD_VAR 0 1
2781: ARRAY
2782: PUSH
2783: LD_INT 1
2785: ARRAY
2786: PUSH
2787: LD_VAR 0 4
2791: PUSH
2792: LD_INT 2
2794: ARRAY
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 4
2801: PUSH
2802: LD_INT 2
2804: ARRAY
2805: PPUSH
2806: CALL_OW 258
2810: PUSH
2811: LD_INT 1
2813: EQUAL
2814: AND
2815: IFFALSE 2833
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2817: LD_VAR 0 4
2821: PUSH
2822: LD_INT 2
2824: ARRAY
2825: PPUSH
2826: LD_STRING DCorpses-Sol1-1
2828: PPUSH
2829: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2833: LD_VAR 0 2
2837: PUSH
2838: LD_VAR 0 1
2842: ARRAY
2843: PUSH
2844: LD_INT 1
2846: ARRAY
2847: PUSH
2848: LD_VAR 0 4
2852: PUSH
2853: LD_INT 2
2855: ARRAY
2856: EQUAL
2857: PUSH
2858: LD_VAR 0 4
2862: PUSH
2863: LD_INT 2
2865: ARRAY
2866: PPUSH
2867: CALL_OW 258
2871: PUSH
2872: LD_INT 2
2874: EQUAL
2875: AND
2876: IFFALSE 2894
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2878: LD_VAR 0 4
2882: PUSH
2883: LD_INT 2
2885: ARRAY
2886: PPUSH
2887: LD_STRING DCorpses-FSol1-1
2889: PPUSH
2890: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2894: LD_EXP 36
2898: PPUSH
2899: LD_INT 150
2901: PPUSH
2902: CALL_OW 234
// break ;
2906: GO 2910
// end ; end ;
2908: GO 2523
2910: POP
2911: POP
// p := 0 ;
2912: LD_ADDR_VAR 0 5
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2920: LD_INT 35
2922: PPUSH
2923: CALL_OW 67
// p := p + 1 ;
2927: LD_ADDR_VAR 0 5
2931: PUSH
2932: LD_VAR 0 5
2936: PUSH
2937: LD_INT 1
2939: PLUS
2940: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2941: LD_ADDR_VAR 0 1
2945: PUSH
2946: LD_INT 22
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 21
2958: PUSH
2959: LD_INT 1
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PPUSH
2970: CALL_OW 69
2974: PUSH
2975: LD_EXP 1
2979: PUSH
2980: EMPTY
2981: LIST
2982: DIFF
2983: PUSH
2984: FOR_IN
2985: IFFALSE 3055
// begin ComMoveToArea ( i , DeadCutscene ) ;
2987: LD_VAR 0 1
2991: PPUSH
2992: LD_INT 28
2994: PPUSH
2995: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2999: LD_EXP 1
3003: PPUSH
3004: LD_INT 30
3006: PPUSH
3007: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3011: LD_VAR 0 1
3015: PPUSH
3016: LD_INT 23
3018: PPUSH
3019: LD_INT 11
3021: PPUSH
3022: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3026: LD_EXP 1
3030: PPUSH
3031: LD_INT 23
3033: PPUSH
3034: LD_INT 11
3036: PPUSH
3037: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3041: LD_EXP 36
3045: PPUSH
3046: LD_INT 250
3048: PPUSH
3049: CALL_OW 234
// end ;
3053: GO 2984
3055: POP
3056: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3057: LD_EXP 1
3061: PPUSH
3062: LD_INT 30
3064: PPUSH
3065: CALL_OW 308
3069: PUSH
3070: LD_VAR 0 5
3074: PUSH
3075: LD_INT 16
3077: GREATEREQUAL
3078: OR
3079: IFFALSE 2920
// wait ( 0 0$1 ) ;
3081: LD_INT 35
3083: PPUSH
3084: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING DCorpses-JMM-1
3095: PPUSH
3096: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3100: LD_EXP 36
3104: PPUSH
3105: LD_INT 100
3107: PPUSH
3108: CALL_OW 234
// if IsOK ( Khatam ) then
3112: LD_EXP 5
3116: PPUSH
3117: CALL_OW 302
3121: IFFALSE 3258
// begin repeat wait ( 0 0$1 ) ;
3123: LD_INT 35
3125: PPUSH
3126: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3130: LD_EXP 5
3134: PPUSH
3135: LD_EXP 36
3139: PPUSH
3140: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3144: LD_EXP 5
3148: PPUSH
3149: LD_EXP 36
3153: PPUSH
3154: CALL_OW 296
3158: PUSH
3159: LD_INT 2
3161: LESS
3162: IFFALSE 3123
// spotCorpses = 0 ;
3164: LD_ADDR_EXP 32
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3172: LD_EXP 36
3176: PPUSH
3177: LD_INT 10
3179: PPUSH
3180: CALL_OW 234
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// KillUnit ( DyingSold ) ;
3191: LD_EXP 36
3195: PPUSH
3196: CALL_OW 66
// wait ( 0 0$1 ) ;
3200: LD_INT 35
3202: PPUSH
3203: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3207: LD_EXP 1
3211: PUSH
3212: LD_EXP 5
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3225: LD_EXP 5
3229: PPUSH
3230: LD_EXP 1
3234: PPUSH
3235: CALL_OW 119
// wait ( 0 0$1 ) ;
3239: LD_INT 35
3241: PPUSH
3242: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3246: LD_EXP 5
3250: PPUSH
3251: LD_STRING DCorpses-Khat-1
3253: PPUSH
3254: CALL_OW 88
// end ; InGameOff ;
3258: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3262: LD_EXP 1
3266: PPUSH
3267: LD_STRING DCorpses-JMM-2
3269: PPUSH
3270: CALL_OW 88
// end ;
3274: PPOPN 5
3276: END
// every 0 0$1 trigger spotCorpses = 1 do
3277: LD_EXP 32
3281: PUSH
3282: LD_INT 1
3284: EQUAL
3285: IFFALSE 3303
3287: GO 3289
3289: DISABLE
// begin enable ;
3290: ENABLE
// SetLives ( DyingSold , 10 ) ;
3291: LD_EXP 36
3295: PPUSH
3296: LD_INT 10
3298: PPUSH
3299: CALL_OW 234
// end ;
3303: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3304: LD_INT 8
3306: PPUSH
3307: LD_INT 22
3309: PUSH
3310: LD_INT 1
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 70
3321: PUSH
3322: LD_INT 22
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PPUSH
3332: CALL_OW 69
3336: PPUSH
3337: LD_EXP 7
3341: PPUSH
3342: CALL_OW 74
3346: PPUSH
3347: LD_EXP 7
3351: PPUSH
3352: CALL_OW 296
3356: PUSH
3357: LD_INT 13
3359: LESS
3360: OR
3361: IFFALSE 3542
3363: GO 3365
3365: DISABLE
3366: LD_INT 0
3368: PPUSH
// begin InGameOn ;
3369: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3373: LD_EXP 7
3377: PPUSH
3378: LD_INT 250
3380: PPUSH
3381: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3385: LD_EXP 6
3389: PPUSH
3390: LD_INT 1000
3392: PUSH
3393: LD_INT 800
3395: PUSH
3396: LD_INT 750
3398: PUSH
3399: LD_INT 700
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: PUSH
3408: LD_OWVAR 67
3412: ARRAY
3413: PPUSH
3414: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3418: LD_INT 3
3420: PPUSH
3421: LD_INT 4
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 1
3429: PPUSH
3430: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3434: LD_EXP 6
3438: PUSH
3439: LD_EXP 7
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PPUSH
3448: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_INT 9
3459: PPUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 3
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 70
3474: PUSH
3475: LD_INT 22
3477: PUSH
3478: LD_INT 4
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: UNION
3490: PUSH
3491: FOR_IN
3492: IFFALSE 3505
// ComFree ( i ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 139
3503: GO 3491
3505: POP
3506: POP
// wait ( 0 0$1 ) ;
3507: LD_INT 35
3509: PPUSH
3510: CALL_OW 67
// InGameOff ;
3514: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3518: LD_EXP 6
3522: PPUSH
3523: LD_STRING DF-Sol1-1
3525: PPUSH
3526: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3530: LD_EXP 1
3534: PPUSH
3535: LD_STRING DF-JMM-1
3537: PPUSH
3538: CALL_OW 88
// end ;
3542: PPOPN 1
3544: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3545: LD_INT 19
3547: PPUSH
3548: LD_INT 22
3550: PUSH
3551: LD_INT 3
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PPUSH
3558: CALL_OW 70
3562: PUSH
3563: LD_INT 0
3565: EQUAL
3566: IFFALSE 3675
3568: GO 3570
3570: DISABLE
// begin if not IsDead ( Brian ) then
3571: LD_EXP 6
3575: PPUSH
3576: CALL_OW 301
3580: NOT
3581: IFFALSE 3595
// SetSide ( Brian , 1 ) ;
3583: LD_EXP 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 235
// if not IsDead ( Jerry ) then
3595: LD_EXP 7
3599: PPUSH
3600: CALL_OW 301
3604: NOT
3605: IFFALSE 3619
// SetSide ( Jerry , 1 ) ;
3607: LD_EXP 7
3611: PPUSH
3612: LD_INT 1
3614: PPUSH
3615: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3619: LD_INT 22
3621: PUSH
3622: LD_INT 1
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 25
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PPUSH
3643: CALL_OW 69
3647: IFFALSE 3663
// Say ( JMM , DFa-JMM-1 ) else
3649: LD_EXP 1
3653: PPUSH
3654: LD_STRING DFa-JMM-1
3656: PPUSH
3657: CALL_OW 88
3661: GO 3675
// Say ( JMM , DFa-JMM-1a ) ;
3663: LD_EXP 1
3667: PPUSH
3668: LD_STRING DFa-JMM-1a
3670: PPUSH
3671: CALL_OW 88
// end ;
3675: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3676: LD_INT 19
3678: PPUSH
3679: LD_INT 22
3681: PUSH
3682: LD_INT 3
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PPUSH
3689: CALL_OW 70
3693: PUSH
3694: LD_INT 0
3696: EQUAL
3697: PUSH
3698: LD_EXP 6
3702: PPUSH
3703: CALL_OW 302
3707: NOT
3708: AND
3709: IFFALSE 3795
3711: GO 3713
3713: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3714: LD_INT 35
3716: PPUSH
3717: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3721: LD_EXP 6
3725: PPUSH
3726: CALL_OW 256
3730: PUSH
3731: LD_INT 250
3733: GREATER
3734: IFFALSE 3714
// Say ( Brian , DFb-Sol1-1 ) ;
3736: LD_EXP 6
3740: PPUSH
3741: LD_STRING DFb-Sol1-1
3743: PPUSH
3744: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3748: LD_EXP 6
3752: PPUSH
3753: LD_INT 78
3755: PPUSH
3756: LD_INT 74
3758: PPUSH
3759: CALL_OW 111
// if IsDead ( Jerry ) then
3763: LD_EXP 7
3767: PPUSH
3768: CALL_OW 301
3772: IFFALSE 3788
// Say ( Brian , DFb-Sol1-1a ) else
3774: LD_EXP 6
3778: PPUSH
3779: LD_STRING DFb-Sol1-1a
3781: PPUSH
3782: CALL_OW 88
3786: GO 3795
// SetAchievement ( ACH_JERRY ) ;
3788: LD_STRING ACH_JERRY
3790: PPUSH
3791: CALL_OW 543
// end ;
3795: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3796: LD_INT 22
3798: PUSH
3799: LD_INT 1
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: PUSH
3806: LD_INT 21
3808: PUSH
3809: LD_INT 2
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: PUSH
3825: LD_INT 0
3827: EQUAL
3828: IFFALSE 3920
3830: GO 3832
3832: DISABLE
3833: LD_INT 0
3835: PPUSH
// begin enable ;
3836: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3837: LD_ADDR_VAR 0 1
3841: PUSH
3842: LD_INT 22
3844: PUSH
3845: LD_INT 3
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 21
3854: PUSH
3855: LD_INT 3
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 30
3864: PUSH
3865: LD_INT 31
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 69
3881: PUSH
3882: FOR_IN
3883: IFFALSE 3918
// begin if See ( 1 , i ) then
3885: LD_INT 1
3887: PPUSH
3888: LD_VAR 0 1
3892: PPUSH
3893: CALL_OW 292
3897: IFFALSE 3916
// begin disable ;
3899: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3900: LD_EXP 1
3904: PPUSH
3905: LD_STRING DX1-JMM-1
3907: PPUSH
3908: CALL_OW 88
// exit ;
3912: POP
3913: POP
3914: GO 3920
// end ; end ;
3916: GO 3882
3918: POP
3919: POP
// end ;
3920: PPOPN 1
3922: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3923: LD_INT 1
3925: PPUSH
3926: LD_INT 11
3928: PPUSH
3929: CALL_OW 294
3933: IFFALSE 4196
3935: GO 3937
3937: DISABLE
3938: LD_INT 0
3940: PPUSH
3941: PPUSH
3942: PPUSH
// begin DialogueOn ;
3943: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3947: LD_INT 11
3949: PPUSH
3950: LD_INT 22
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 21
3962: PUSH
3963: LD_INT 1
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: PPUSH
3974: CALL_OW 70
3978: PUSH
3979: LD_INT 1
3981: ARRAY
3982: PPUSH
3983: LD_STRING DX3-Rus1-1
3985: PPUSH
3986: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3990: LD_EXP 1
3994: PPUSH
3995: LD_STRING DX3-JMM-1
3997: PPUSH
3998: CALL_OW 88
// DialogueOff ;
4002: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4006: LD_ADDR_VAR 0 1
4010: PUSH
4011: LD_INT 11
4013: PPUSH
4014: LD_INT 22
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: PUSH
4024: LD_INT 25
4026: PUSH
4027: LD_INT 1
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 70
4042: PUSH
4043: FOR_IN
4044: IFFALSE 4064
// southBaseDefenders = southBaseDefenders ^ i ;
4046: LD_ADDR_EXP 25
4050: PUSH
4051: LD_EXP 25
4055: PUSH
4056: LD_VAR 0 1
4060: ADD
4061: ST_TO_ADDR
4062: GO 4043
4064: POP
4065: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4066: LD_INT 175
4068: PUSH
4069: LD_INT 140
4071: PUSH
4072: LD_INT 105
4074: PUSH
4075: LD_INT 70
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_OWVAR 67
4088: ARRAY
4089: PPUSH
4090: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4094: LD_ADDR_VAR 0 3
4098: PUSH
4099: LD_INT 22
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 21
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PUSH
4119: LD_INT 25
4121: PUSH
4122: LD_INT 3
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: LIST
4133: PPUSH
4134: CALL_OW 69
4138: ST_TO_ADDR
// if not mech then
4139: LD_VAR 0 3
4143: NOT
4144: IFFALSE 4148
// exit ;
4146: GO 4196
// ComExitBuilding ( mech ) ;
4148: LD_VAR 0 3
4152: PPUSH
4153: CALL_OW 122
// wait ( 0 0$1 ) ;
4157: LD_INT 35
4159: PPUSH
4160: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4164: LD_VAR 0 3
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PPUSH
4173: LD_INT 5
4175: PPUSH
4176: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4180: LD_VAR 0 3
4184: PUSH
4185: LD_INT 2
4187: ARRAY
4188: PPUSH
4189: LD_INT 4
4191: PPUSH
4192: CALL_OW 180
// end ;
4196: PPOPN 3
4198: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4199: LD_INT 1
4201: PPUSH
4202: LD_INT 5
4204: PPUSH
4205: CALL_OW 292
4209: PUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 4
4215: PPUSH
4216: CALL_OW 292
4220: OR
4221: IFFALSE 4305
4223: GO 4225
4225: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4226: LD_INT 5
4228: PUSH
4229: LD_INT 4
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 85
// if IsOK ( Bobby ) then
4240: LD_EXP 2
4244: PPUSH
4245: CALL_OW 302
4249: IFFALSE 4285
// begin DialogueOn ;
4251: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4255: LD_EXP 2
4259: PPUSH
4260: LD_STRING DX2-Bobby-1
4262: PPUSH
4263: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4267: LD_EXP 1
4271: PPUSH
4272: LD_STRING DX2-JMM-1a
4274: PPUSH
4275: CALL_OW 88
// DialogueOff ;
4279: CALL_OW 7
// end else
4283: GO 4305
// begin DialogueOn ;
4285: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4289: LD_EXP 1
4293: PPUSH
4294: LD_STRING DX2-JMM-1
4296: PPUSH
4297: CALL_OW 88
// DialogueOff ;
4301: CALL_OW 7
// end ; end ;
4305: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4306: LD_INT 22
4308: PUSH
4309: LD_INT 1
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 23
4318: PUSH
4319: LD_INT 3
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 21
4328: PUSH
4329: LD_INT 2
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 34
4338: PUSH
4339: LD_INT 42
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: PPUSH
4352: CALL_OW 69
4356: IFFALSE 4777
4358: GO 4360
4360: DISABLE
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
4365: PPUSH
4366: PPUSH
4367: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4368: LD_ADDR_VAR 0 1
4372: PUSH
4373: LD_INT 22
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: LD_INT 23
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 21
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 34
4405: PUSH
4406: LD_INT 42
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: PPUSH
4419: CALL_OW 69
4423: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_INT 22
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 21
4441: PUSH
4442: LD_INT 1
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: LD_INT 26
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: PPUSH
4464: CALL_OW 69
4468: PUSH
4469: LD_EXP 1
4473: PUSH
4474: LD_EXP 3
4478: PUSH
4479: LD_EXP 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: DIFF
4489: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4490: LD_ADDR_VAR 0 4
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 26
4517: PUSH
4518: LD_INT 2
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: PPUSH
4530: CALL_OW 69
4534: PUSH
4535: LD_EXP 4
4539: PUSH
4540: EMPTY
4541: LIST
4542: DIFF
4543: ST_TO_ADDR
// if not tmp then
4544: LD_VAR 0 1
4548: NOT
4549: IFFALSE 4553
// exit ;
4551: GO 4777
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_VAR 0 1
4562: PUSH
4563: LD_INT 1
4565: ARRAY
4566: PPUSH
4567: CALL_OW 311
4571: ST_TO_ADDR
// if not speaker then
4572: LD_VAR 0 2
4576: NOT
4577: IFFALSE 4581
// exit ;
4579: GO 4777
// DialogueOn ;
4581: CALL_OW 6
// if speaker = JMM then
4585: LD_VAR 0 2
4589: PUSH
4590: LD_EXP 1
4594: EQUAL
4595: IFFALSE 4629
// begin if Lisa then
4597: LD_EXP 4
4601: IFFALSE 4615
// Say ( Lisa , DX2b-Lisa-1 ) ;
4603: LD_EXP 4
4607: PPUSH
4608: LD_STRING DX2b-Lisa-1
4610: PPUSH
4611: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4615: LD_EXP 1
4619: PPUSH
4620: LD_STRING DX2b-JMM-1
4622: PPUSH
4623: CALL_OW 88
// end else
4627: GO 4773
// begin Say ( JMM , DX2a-JMM-1 ) ;
4629: LD_EXP 1
4633: PPUSH
4634: LD_STRING DX2a-JMM-1
4636: PPUSH
4637: CALL_OW 88
// if speaker = Bobby then
4641: LD_VAR 0 2
4645: PUSH
4646: LD_EXP 2
4650: EQUAL
4651: IFFALSE 4665
// Say ( Bobby , DX2a-Bobby-1 ) ;
4653: LD_EXP 2
4657: PPUSH
4658: LD_STRING DX2a-Bobby-1
4660: PPUSH
4661: CALL_OW 88
// if speaker = Cyrus then
4665: LD_VAR 0 2
4669: PUSH
4670: LD_EXP 3
4674: EQUAL
4675: IFFALSE 4689
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4677: LD_EXP 3
4681: PPUSH
4682: LD_STRING DX2a-Cyrus-1
4684: PPUSH
4685: CALL_OW 88
// if speaker = Lisa then
4689: LD_VAR 0 2
4693: PUSH
4694: LD_EXP 4
4698: EQUAL
4699: IFFALSE 4713
// Say ( Lisa , DX2a-Lisa-1 ) ;
4701: LD_EXP 4
4705: PPUSH
4706: LD_STRING DX2a-Lisa-1
4708: PPUSH
4709: CALL_OW 88
// if speaker in temp1 then
4713: LD_VAR 0 2
4717: PUSH
4718: LD_VAR 0 3
4722: IN
4723: IFFALSE 4737
// Say ( speaker , DX2a-Sol1-1 ) ;
4725: LD_VAR 0 2
4729: PPUSH
4730: LD_STRING DX2a-Sol1-1
4732: PPUSH
4733: CALL_OW 88
// if speaker in temp2 then
4737: LD_VAR 0 2
4741: PUSH
4742: LD_VAR 0 4
4746: IN
4747: IFFALSE 4761
// Say ( speaker , DX2a-FSol1-1 ) ;
4749: LD_VAR 0 2
4753: PPUSH
4754: LD_STRING DX2a-FSol1-1
4756: PPUSH
4757: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4761: LD_EXP 1
4765: PPUSH
4766: LD_STRING DX2a-JMM-2
4768: PPUSH
4769: CALL_OW 88
// end ; DialogueOff ;
4773: CALL_OW 7
// end ;
4777: PPOPN 5
4779: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4780: LD_INT 1
4782: PPUSH
4783: CALL_OW 255
4787: PUSH
4788: LD_INT 1
4790: EQUAL
4791: PUSH
4792: LD_INT 10
4794: PPUSH
4795: CALL_OW 255
4799: PUSH
4800: LD_INT 1
4802: EQUAL
4803: OR
4804: IFFALSE 4864
4806: GO 4808
4808: DISABLE
// begin DialogueOn ;
4809: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4813: LD_EXP 1
4817: PPUSH
4818: LD_STRING D3-JMM-1
4820: PPUSH
4821: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4825: LD_EXP 9
4829: PPUSH
4830: LD_STRING D3-Pow-1
4832: PPUSH
4833: CALL_OW 586
// if IsOK ( Cyrus ) then
4837: LD_EXP 3
4841: PPUSH
4842: CALL_OW 302
4846: IFFALSE 4860
// Say ( Cyrus , D3-Cyrus-1 ) ;
4848: LD_EXP 3
4852: PPUSH
4853: LD_STRING D3-Cyrus-1
4855: PPUSH
4856: CALL_OW 88
// DialogueOff ;
4860: CALL_OW 7
// end ;
4864: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and IsOk ( dep1 ) and IsOk ( dep2 ) do var temp , tmp , i ;
4865: LD_INT 1
4867: PPUSH
4868: CALL_OW 255
4872: PUSH
4873: LD_INT 1
4875: EQUAL
4876: PUSH
4877: LD_INT 10
4879: PPUSH
4880: CALL_OW 255
4884: PUSH
4885: LD_INT 1
4887: EQUAL
4888: AND
4889: PUSH
4890: LD_INT 1
4892: PPUSH
4893: CALL_OW 302
4897: AND
4898: PUSH
4899: LD_INT 10
4901: PPUSH
4902: CALL_OW 302
4906: AND
4907: IFFALSE 6297
4909: GO 4911
4911: DISABLE
4912: LD_INT 0
4914: PPUSH
4915: PPUSH
4916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4917: LD_ADDR_VAR 0 2
4921: PUSH
4922: LD_INT 22
4924: PUSH
4925: LD_INT 3
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 21
4934: PUSH
4935: LD_INT 1
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PPUSH
4946: CALL_OW 69
4950: ST_TO_ADDR
// if tmp then
4951: LD_VAR 0 2
4955: IFFALSE 5016
// begin for i in tmp do
4957: LD_ADDR_VAR 0 3
4961: PUSH
4962: LD_VAR 0 2
4966: PUSH
4967: FOR_IN
4968: IFFALSE 5014
// begin if IsInUnit ( i ) then
4970: LD_VAR 0 3
4974: PPUSH
4975: CALL_OW 310
4979: IFFALSE 4990
// ComExitBuilding ( i ) ;
4981: LD_VAR 0 3
4985: PPUSH
4986: CALL_OW 122
// wait ( 0 0$1 ) ;
4990: LD_INT 35
4992: PPUSH
4993: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4997: LD_VAR 0 3
5001: PPUSH
5002: LD_INT 54
5004: PPUSH
5005: LD_INT 17
5007: PPUSH
5008: CALL_OW 174
// end ;
5012: GO 4967
5014: POP
5015: POP
// end ; wait ( 0 0$03 ) ;
5016: LD_INT 105
5018: PPUSH
5019: CALL_OW 67
// DialogueOn ;
5023: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5027: LD_EXP 1
5031: PPUSH
5032: LD_STRING D3a-JMM-1
5034: PPUSH
5035: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5039: LD_EXP 9
5043: PPUSH
5044: LD_STRING D3a-Pow-1
5046: PPUSH
5047: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5051: LD_EXP 1
5055: PPUSH
5056: LD_STRING D3a-JMM-2
5058: PPUSH
5059: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5063: LD_EXP 9
5067: PPUSH
5068: LD_STRING D3a-Pow-2
5070: PPUSH
5071: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5075: LD_EXP 1
5079: PPUSH
5080: LD_STRING D3a-JMM-3
5082: PPUSH
5083: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5087: LD_EXP 9
5091: PPUSH
5092: LD_STRING D3a-Pow-3
5094: PPUSH
5095: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5099: LD_EXP 1
5103: PPUSH
5104: LD_STRING D3a-JMM-4
5106: PPUSH
5107: CALL_OW 88
// DialogueOff ;
5111: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5115: LD_STRING M2
5117: PPUSH
5118: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5122: LD_EXP 1
5126: PPUSH
5127: LD_STRING D3b-JMM-1
5129: PPUSH
5130: CALL_OW 88
// Hint ( Depot2 ) ;
5134: LD_STRING Depot2
5136: PPUSH
5137: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5141: LD_INT 35
5143: PPUSH
5144: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5148: LD_INT 22
5150: PPUSH
5151: LD_INT 22
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: LD_INT 25
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PPUSH
5175: CALL_OW 70
5179: PUSH
5180: LD_INT 22
5182: PUSH
5183: LD_INT 3
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PUSH
5190: LD_INT 21
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: NOT
5209: AND
5210: IFFALSE 5141
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5212: LD_ADDR_VAR 0 1
5216: PUSH
5217: LD_INT 22
5219: PUSH
5220: LD_INT 1
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: PUSH
5227: LD_INT 23
5229: PUSH
5230: LD_INT 1
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: PUSH
5237: LD_INT 25
5239: PUSH
5240: LD_INT 2
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 50
5249: PUSH
5250: EMPTY
5251: LIST
5252: PUSH
5253: LD_INT 56
5255: PUSH
5256: EMPTY
5257: LIST
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PUSH
5271: LD_EXP 1
5275: PUSH
5276: LD_EXP 5
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: DIFF
5285: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5286: LD_INT 35
5288: PPUSH
5289: CALL_OW 67
// until temp > 0 ;
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 0
5300: GREATER
5301: IFFALSE 5212
// wait ( 0 0$5 ) ;
5303: LD_INT 175
5305: PPUSH
5306: CALL_OW 67
// PrepareRussianHeroes ;
5310: CALL 12008 0 0
// InGameOn ;
5314: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5318: LD_EXP 8
5322: PPUSH
5323: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5327: LD_EXP 1
5331: PUSH
5332: LD_VAR 0 1
5336: PUSH
5337: LD_INT 1
5339: ARRAY
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PPUSH
5345: LD_EXP 8
5349: PPUSH
5350: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5354: LD_EXP 8
5358: PPUSH
5359: LD_VAR 0 1
5363: PUSH
5364: LD_INT 1
5366: ARRAY
5367: PPUSH
5368: CALL_OW 119
// wait ( 0 0$02 ) ;
5372: LD_INT 70
5374: PPUSH
5375: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5379: LD_EXP 8
5383: PPUSH
5384: LD_STRING D4-Mikh-1
5386: PPUSH
5387: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5391: LD_VAR 0 1
5395: PUSH
5396: LD_INT 1
5398: ARRAY
5399: PPUSH
5400: CALL_OW 258
5404: PUSH
5405: LD_INT 1
5407: EQUAL
5408: IFFALSE 5426
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5410: LD_VAR 0 1
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PPUSH
5419: LD_STRING D4-Sol1-1
5421: PPUSH
5422: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5426: LD_VAR 0 1
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PPUSH
5435: CALL_OW 258
5439: PUSH
5440: LD_INT 2
5442: EQUAL
5443: IFFALSE 5461
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5445: LD_VAR 0 1
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PPUSH
5454: LD_STRING D4-FSol1-1
5456: PPUSH
5457: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5461: LD_EXP 8
5465: PPUSH
5466: LD_STRING D4-Mikh-2
5468: PPUSH
5469: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5473: LD_VAR 0 1
5477: PUSH
5478: LD_INT 1
5480: ARRAY
5481: PPUSH
5482: CALL_OW 258
5486: PUSH
5487: LD_INT 1
5489: EQUAL
5490: IFFALSE 5508
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5492: LD_VAR 0 1
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: PPUSH
5501: LD_STRING D4-Sol1-2
5503: PPUSH
5504: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5508: LD_VAR 0 1
5512: PUSH
5513: LD_INT 1
5515: ARRAY
5516: PPUSH
5517: CALL_OW 258
5521: PUSH
5522: LD_INT 2
5524: EQUAL
5525: IFFALSE 5543
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5527: LD_VAR 0 1
5531: PUSH
5532: LD_INT 1
5534: ARRAY
5535: PPUSH
5536: LD_STRING D4-FSol1-2
5538: PPUSH
5539: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5543: LD_EXP 8
5547: PPUSH
5548: LD_STRING D4-Mikh-3
5550: PPUSH
5551: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5555: LD_VAR 0 1
5559: PUSH
5560: LD_INT 1
5562: ARRAY
5563: PPUSH
5564: CALL_OW 258
5568: PUSH
5569: LD_INT 1
5571: EQUAL
5572: IFFALSE 5590
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5574: LD_VAR 0 1
5578: PUSH
5579: LD_INT 1
5581: ARRAY
5582: PPUSH
5583: LD_STRING D4-Sol1-3
5585: PPUSH
5586: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5590: LD_VAR 0 1
5594: PUSH
5595: LD_INT 1
5597: ARRAY
5598: PPUSH
5599: CALL_OW 258
5603: PUSH
5604: LD_INT 2
5606: EQUAL
5607: IFFALSE 5625
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5609: LD_VAR 0 1
5613: PUSH
5614: LD_INT 1
5616: ARRAY
5617: PPUSH
5618: LD_STRING D4-FSol1-3
5620: PPUSH
5621: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5625: LD_EXP 8
5629: PPUSH
5630: LD_STRING D4-Mikh-4
5632: PPUSH
5633: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5637: LD_STRING Qs1
5639: PPUSH
5640: CALL_OW 97
5644: PUSH
5645: LD_INT 1
5647: DOUBLE
5648: EQUAL
5649: IFTRUE 5653
5651: GO 5688
5653: POP
// begin InGameOff ;
5654: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5658: LD_INT 1
5660: PPUSH
5661: LD_INT 6
5663: PPUSH
5664: LD_INT 2
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5674: LD_EXP 8
5678: PPUSH
5679: LD_INT 17
5681: PPUSH
5682: CALL_OW 113
// end ; 2 :
5686: GO 6281
5688: LD_INT 2
5690: DOUBLE
5691: EQUAL
5692: IFTRUE 5696
5694: GO 6246
5696: POP
// begin repeat wait ( 0 0$1 ) ;
5697: LD_INT 35
5699: PPUSH
5700: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5704: LD_VAR 0 1
5708: PUSH
5709: LD_INT 1
5711: ARRAY
5712: PPUSH
5713: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5717: LD_VAR 0 1
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: LD_EXP 1
5730: PPUSH
5731: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_EXP 1
5744: PPUSH
5745: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5749: LD_EXP 1
5753: PPUSH
5754: LD_EXP 8
5758: PPUSH
5759: CALL_OW 296
5763: PUSH
5764: LD_INT 5
5766: LESS
5767: IFFALSE 5697
// ComTurnUnit ( Mikhail , JMM ) ;
5769: LD_EXP 8
5773: PPUSH
5774: LD_EXP 1
5778: PPUSH
5779: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5783: LD_EXP 1
5787: PPUSH
5788: LD_STRING D4b-JMM-1
5790: PPUSH
5791: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5795: LD_EXP 8
5799: PPUSH
5800: LD_STRING D4b-Mikh-1
5802: PPUSH
5803: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5807: LD_EXP 1
5811: PPUSH
5812: LD_STRING D4b-JMM-2
5814: PPUSH
5815: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5819: LD_EXP 8
5823: PPUSH
5824: LD_STRING D4b-Mikh-2
5826: PPUSH
5827: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5831: LD_EXP 1
5835: PPUSH
5836: LD_STRING D4b-JMM-3
5838: PPUSH
5839: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5843: LD_EXP 8
5847: PPUSH
5848: LD_STRING D4b-Mikh-3
5850: PPUSH
5851: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5855: LD_EXP 1
5859: PPUSH
5860: LD_STRING D4b-JMM-4
5862: PPUSH
5863: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5867: LD_EXP 8
5871: PPUSH
5872: LD_STRING D4b-Mikh-4
5874: PPUSH
5875: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4b-JMM-5
5886: PPUSH
5887: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5891: LD_EXP 8
5895: PPUSH
5896: LD_STRING D4b-Mikh-5
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4b-JMM-6
5910: PPUSH
5911: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5915: LD_EXP 8
5919: PPUSH
5920: LD_STRING D4b-Mikh-6
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4b-JMM-7
5934: PPUSH
5935: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5939: LD_EXP 8
5943: PPUSH
5944: LD_STRING D4b-Mikh-7
5946: PPUSH
5947: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5951: LD_VAR 0 1
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 258
5964: PUSH
5965: LD_INT 1
5967: EQUAL
5968: IFFALSE 5986
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5970: LD_VAR 0 1
5974: PUSH
5975: LD_INT 1
5977: ARRAY
5978: PPUSH
5979: LD_STRING D4b-Sol1-7
5981: PPUSH
5982: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5986: LD_VAR 0 1
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PPUSH
5995: CALL_OW 258
5999: PUSH
6000: LD_INT 2
6002: EQUAL
6003: IFFALSE 6021
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6005: LD_VAR 0 1
6009: PUSH
6010: LD_INT 1
6012: ARRAY
6013: PPUSH
6014: LD_STRING D4b-FSol1-7
6016: PPUSH
6017: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6021: LD_EXP 1
6025: PPUSH
6026: LD_STRING D4b-JMM-8
6028: PPUSH
6029: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6033: LD_VAR 0 1
6037: PUSH
6038: LD_INT 1
6040: ARRAY
6041: PPUSH
6042: CALL_OW 258
6046: PUSH
6047: LD_INT 1
6049: EQUAL
6050: IFFALSE 6068
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6052: LD_VAR 0 1
6056: PUSH
6057: LD_INT 1
6059: ARRAY
6060: PPUSH
6061: LD_STRING D4b-Sol1-8
6063: PPUSH
6064: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6068: LD_VAR 0 1
6072: PUSH
6073: LD_INT 1
6075: ARRAY
6076: PPUSH
6077: CALL_OW 258
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6103
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6087: LD_VAR 0 1
6091: PUSH
6092: LD_INT 1
6094: ARRAY
6095: PPUSH
6096: LD_STRING D4b-FSol1-8
6098: PPUSH
6099: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6103: LD_EXP 1
6107: PPUSH
6108: LD_STRING D4b-JMM-9
6110: PPUSH
6111: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6115: LD_EXP 8
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: LD_INT 22
6134: PUSH
6135: LD_INT 1
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PUSH
6142: EMPTY
6143: LIST
6144: PPUSH
6145: CALL_OW 69
6149: PUSH
6150: FOR_IN
6151: IFFALSE 6164
// ComFree ( i ) ;
6153: LD_VAR 0 3
6157: PPUSH
6158: CALL_OW 139
6162: GO 6150
6164: POP
6165: POP
// repeat wait ( 0 0$1 ) ;
6166: LD_INT 35
6168: PPUSH
6169: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6173: LD_EXP 8
6177: PPUSH
6178: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6182: LD_EXP 8
6186: PUSH
6187: LD_VAR 0 1
6191: PUSH
6192: LD_INT 1
6194: ARRAY
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: LD_INT 1
6202: PPUSH
6203: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6207: LD_EXP 8
6211: PPUSH
6212: CALL_OW 310
6216: IFFALSE 6166
// mikhailDepot = IsInUnit ( Mikhail ) ;
6218: LD_ADDR_EXP 23
6222: PUSH
6223: LD_EXP 8
6227: PPUSH
6228: CALL_OW 310
6232: ST_TO_ADDR
// InGameOff ;
6233: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6237: LD_STRING M3
6239: PPUSH
6240: CALL_OW 337
// end ; 3 :
6244: GO 6281
6246: LD_INT 3
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6254
6252: GO 6280
6254: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6255: LD_EXP 8
6259: PPUSH
6260: LD_INT 17
6262: PPUSH
6263: CALL_OW 113
// wait ( 0 0$3 ) ;
6267: LD_INT 105
6269: PPUSH
6270: CALL_OW 67
// InGameOff ;
6274: CALL_OW 9
// end ; end ;
6278: GO 6281
6280: POP
// PrepareTigers ;
6281: CALL 15489 0 0
// RussianTrap ;
6285: CALL 10335 0 0
// tigersRespawn = 1 ;
6289: LD_ADDR_EXP 30
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
// end ;
6297: PPOPN 3
6299: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 255
6307: PUSH
6308: LD_INT 1
6310: EQUAL
6311: PUSH
6312: LD_INT 10
6314: PPUSH
6315: CALL_OW 255
6319: PUSH
6320: LD_INT 1
6322: EQUAL
6323: AND
6324: PUSH
6325: LD_INT 1
6327: PPUSH
6328: CALL_OW 274
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 275
6340: PUSH
6341: LD_INT 100
6343: GREATEREQUAL
6344: AND
6345: IFFALSE 6494
6347: GO 6349
6349: DISABLE
6350: LD_INT 0
6352: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6353: LD_INT 2100
6355: PPUSH
6356: LD_INT 4200
6358: PPUSH
6359: CALL_OW 12
6363: PUSH
6364: LD_INT 1050
6366: PLUS
6367: PPUSH
6368: CALL_OW 67
// PrepareCargoBays ;
6372: CALL 13191 0 0
// cargoRespawn = 1 ;
6376: LD_ADDR_EXP 28
6380: PUSH
6381: LD_INT 1
6383: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6384: LD_ADDR_VAR 0 1
6388: PUSH
6389: LD_EXP 15
6393: PUSH
6394: LD_EXP 16
6398: PUSH
6399: LD_EXP 17
6403: PUSH
6404: LD_EXP 18
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6415: LD_VAR 0 1
6419: PPUSH
6420: LD_INT 17
6422: PPUSH
6423: LD_INT 10
6425: PPUSH
6426: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6430: LD_VAR 0 1
6434: PPUSH
6435: LD_INT 36
6437: PPUSH
6438: LD_INT 13
6440: PPUSH
6441: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 40
6452: PPUSH
6453: LD_INT 20
6455: PPUSH
6456: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6460: LD_VAR 0 1
6464: PPUSH
6465: LD_INT 53
6467: PPUSH
6468: LD_INT 16
6470: PPUSH
6471: CALL_OW 171
// wait ( 0 0$5 ) ;
6475: LD_INT 175
6477: PPUSH
6478: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6482: LD_EXP 17
6486: PPUSH
6487: LD_STRING D5-Rus2-1
6489: PPUSH
6490: CALL_OW 88
// end ;
6494: PPOPN 1
6496: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6497: LD_EXP 28
6501: PUSH
6502: LD_INT 1
6504: EQUAL
6505: IFFALSE 6660
6507: GO 6509
6509: DISABLE
6510: LD_INT 0
6512: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6513: LD_ADDR_VAR 0 1
6517: PUSH
6518: LD_INT 22
6520: PUSH
6521: LD_INT 3
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 21
6530: PUSH
6531: LD_INT 2
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 34
6540: PUSH
6541: LD_INT 51
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6558: LD_INT 105
6560: PPUSH
6561: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6565: LD_VAR 0 1
6569: PPUSH
6570: LD_INT 3
6572: PUSH
6573: LD_INT 60
6575: PUSH
6576: EMPTY
6577: LIST
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PPUSH
6583: CALL_OW 72
6587: PUSH
6588: LD_VAR 0 1
6592: PPUSH
6593: LD_INT 3
6595: PUSH
6596: LD_INT 24
6598: PUSH
6599: LD_INT 980
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PPUSH
6610: CALL_OW 72
6614: OR
6615: IFFALSE 6558
// ComMoveXY ( cargos , 7 , 9 ) ;
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_INT 7
6624: PPUSH
6625: LD_INT 9
6627: PPUSH
6628: CALL_OW 111
// cargoSee = 1 ;
6632: LD_ADDR_EXP 29
6636: PUSH
6637: LD_INT 1
6639: ST_TO_ADDR
// cargoEscape = 1 ;
6640: LD_ADDR_EXP 20
6644: PUSH
6645: LD_INT 1
6647: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6648: LD_EXP 17
6652: PPUSH
6653: LD_STRING D5-Rus2-1a
6655: PPUSH
6656: CALL_OW 88
// end ;
6660: PPOPN 1
6662: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6663: LD_EXP 20
6667: PUSH
6668: LD_EXP 15
6672: PUSH
6673: LD_EXP 16
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PPUSH
6682: LD_INT 50
6684: PUSH
6685: EMPTY
6686: LIST
6687: PUSH
6688: LD_INT 22
6690: PUSH
6691: LD_INT 3
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: LD_INT 52
6700: PUSH
6701: EMPTY
6702: LIST
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 72
6713: AND
6714: IFFALSE 7047
6716: GO 6718
6718: DISABLE
6719: LD_INT 0
6721: PPUSH
6722: PPUSH
6723: PPUSH
6724: PPUSH
// begin enable ;
6725: ENABLE
// for i in [ cargo1 , cargo2 ] do
6726: LD_ADDR_VAR 0 2
6730: PUSH
6731: LD_EXP 15
6735: PUSH
6736: LD_EXP 16
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: FOR_IN
6746: IFFALSE 7045
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6748: LD_ADDR_VAR 0 1
6752: PUSH
6753: LD_VAR 0 2
6757: PPUSH
6758: CALL_OW 250
6762: PPUSH
6763: LD_VAR 0 2
6767: PPUSH
6768: CALL_OW 251
6772: PPUSH
6773: LD_INT 6
6775: PPUSH
6776: CALL 77685 0 3
6780: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6781: LD_VAR 0 1
6785: PUSH
6786: LD_VAR 0 2
6790: PPUSH
6791: CALL 78904 0 1
6795: PUSH
6796: LD_INT 4
6798: ARRAY
6799: PUSH
6800: LD_INT 60
6802: LESS
6803: AND
6804: IFFALSE 6843
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6806: LD_VAR 0 2
6810: PPUSH
6811: LD_VAR 0 1
6815: PUSH
6816: LD_INT 1
6818: ARRAY
6819: PUSH
6820: LD_INT 1
6822: ARRAY
6823: PPUSH
6824: LD_VAR 0 1
6828: PUSH
6829: LD_INT 1
6831: ARRAY
6832: PUSH
6833: LD_INT 2
6835: ARRAY
6836: PPUSH
6837: CALL_OW 117
6841: GO 7043
// if not IsInArea ( i , RemoveArea ) then
6843: LD_VAR 0 2
6847: PPUSH
6848: LD_INT 32
6850: PPUSH
6851: CALL_OW 308
6855: NOT
6856: IFFALSE 7004
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6858: LD_ADDR_VAR 0 3
6862: PUSH
6863: LD_VAR 0 2
6867: PPUSH
6868: CALL_OW 250
6872: PPUSH
6873: LD_INT 4
6875: PPUSH
6876: LD_INT 3
6878: PPUSH
6879: CALL_OW 272
6883: ST_TO_ADDR
// y := GetY ( i ) ;
6884: LD_ADDR_VAR 0 4
6888: PUSH
6889: LD_VAR 0 2
6893: PPUSH
6894: CALL_OW 251
6898: ST_TO_ADDR
// if HexInfo ( x , y ) then
6899: LD_VAR 0 3
6903: PPUSH
6904: LD_VAR 0 4
6908: PPUSH
6909: CALL_OW 428
6913: IFFALSE 6936
// x := ShiftX ( x , 4 , 3 ) ;
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: LD_VAR 0 3
6924: PPUSH
6925: LD_INT 4
6927: PPUSH
6928: LD_INT 3
6930: PPUSH
6931: CALL_OW 272
6935: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6936: LD_VAR 0 3
6940: PPUSH
6941: LD_VAR 0 4
6945: PPUSH
6946: CALL_OW 428
6950: PUSH
6951: LD_VAR 0 3
6955: PPUSH
6956: LD_VAR 0 4
6960: PPUSH
6961: CALL_OW 488
6965: NOT
6966: OR
6967: IFFALSE 6983
// ComMoveToArea ( i , RemoveArea ) else
6969: LD_VAR 0 2
6973: PPUSH
6974: LD_INT 32
6976: PPUSH
6977: CALL_OW 113
6981: GO 7002
// ComMoveXY ( i , x , y ) ;
6983: LD_VAR 0 2
6987: PPUSH
6988: LD_VAR 0 3
6992: PPUSH
6993: LD_VAR 0 4
6997: PPUSH
6998: CALL_OW 111
// end else
7002: GO 7043
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7004: LD_VAR 0 2
7008: PPUSH
7009: CALL_OW 311
7013: PPUSH
7014: CALL_OW 64
// RemoveUnit ( i ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7027: LD_ADDR_EXP 20
7031: PUSH
7032: LD_EXP 20
7036: PUSH
7037: LD_INT 1
7039: PLUS
7040: ST_TO_ADDR
// continue ;
7041: GO 6745
// end ; end ;
7043: GO 6745
7045: POP
7046: POP
// end ;
7047: PPOPN 4
7049: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7050: LD_EXP 20
7054: PUSH
7055: LD_INT 1
7057: GREATER
7058: IFFALSE 7307
7060: GO 7062
7062: DISABLE
7063: LD_INT 0
7065: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7066: LD_INT 4
7068: PPUSH
7069: LD_INT 1
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7079: LD_INT 31
7081: PPUSH
7082: LD_INT 1
7084: PPUSH
7085: LD_INT 1
7087: PPUSH
7088: CALL_OW 324
// Hint ( Bunker ) ;
7092: LD_STRING Bunker
7094: PPUSH
7095: CALL_OW 339
// if IsOK ( Jerry ) then
7099: LD_EXP 7
7103: PPUSH
7104: CALL_OW 302
7108: IFFALSE 7124
// Say ( Jerry , D5a-Sol1-1 ) else
7110: LD_EXP 7
7114: PPUSH
7115: LD_STRING D5a-Sol1-1
7117: PPUSH
7118: CALL_OW 88
7122: GO 7210
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7124: LD_ADDR_VAR 0 1
7128: PUSH
7129: LD_INT 22
7131: PUSH
7132: LD_INT 1
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 26
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 69
7157: PUSH
7158: LD_EXP 1
7162: PUSH
7163: LD_EXP 2
7167: PUSH
7168: LD_EXP 3
7172: PUSH
7173: LD_EXP 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: DIFF
7184: ST_TO_ADDR
// if not speaker then
7185: LD_VAR 0 1
7189: NOT
7190: IFFALSE 7194
// exit ;
7192: GO 7307
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7194: LD_VAR 0 1
7198: PUSH
7199: LD_INT 1
7201: ARRAY
7202: PPUSH
7203: LD_STRING D5a-Sol1-1
7205: PPUSH
7206: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7210: LD_EXP 1
7214: PPUSH
7215: LD_STRING D5a-JMM-1
7217: PPUSH
7218: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7222: LD_INT 22
7224: PPUSH
7225: LD_INT 22
7227: PUSH
7228: LD_INT 1
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 2
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 70
7253: IFFALSE 7307
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7255: LD_INT 22
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 25
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: PUSH
7287: LD_INT 1
7289: ARRAY
7290: PPUSH
7291: LD_INT 31
7293: PPUSH
7294: LD_INT 44
7296: PPUSH
7297: LD_INT 13
7299: PPUSH
7300: LD_INT 1
7302: PPUSH
7303: CALL_OW 145
// end ;
7307: PPOPN 1
7309: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7310: LD_INT 1
7312: PPUSH
7313: CALL_OW 255
7317: PUSH
7318: LD_INT 3
7320: EQUAL
7321: PUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 256
7329: PUSH
7330: LD_INT 1000
7332: LESS
7333: AND
7334: PUSH
7335: LD_INT 10
7337: PPUSH
7338: CALL_OW 255
7342: PUSH
7343: LD_INT 3
7345: EQUAL
7346: PUSH
7347: LD_INT 10
7349: PPUSH
7350: CALL_OW 256
7354: PUSH
7355: LD_INT 1000
7357: LESS
7358: AND
7359: OR
7360: IFFALSE 7377
7362: GO 7364
7364: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7365: LD_EXP 1
7369: PPUSH
7370: LD_STRING D8-JMM-1
7372: PPUSH
7373: CALL_OW 88
7377: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7378: LD_EXP 8
7382: PPUSH
7383: CALL_OW 310
7387: PUSH
7388: LD_INT 1
7390: EQUAL
7391: PUSH
7392: LD_EXP 22
7396: PUSH
7397: LD_INT 3
7399: EQUAL
7400: NOT
7401: AND
7402: IFFALSE 7424
7404: GO 7406
7406: DISABLE
// begin enable ;
7407: ENABLE
// mikhailInBase = 1 ;
7408: LD_ADDR_EXP 22
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// mikhailStatus = 1 ;
7416: LD_ADDR_EXP 21
7420: PUSH
7421: LD_INT 1
7423: ST_TO_ADDR
// end ;
7424: END
// export function AskMikhail ; begin
7425: LD_INT 0
7427: PPUSH
// case Query ( QMikh2 ) of 1 :
7428: LD_STRING QMikh2
7430: PPUSH
7431: CALL_OW 97
7435: PUSH
7436: LD_INT 1
7438: DOUBLE
7439: EQUAL
7440: IFTRUE 7444
7442: GO 7511
7444: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7445: LD_INT 1
7447: PPUSH
7448: LD_INT 6
7450: PPUSH
7451: LD_INT 2
7453: PPUSH
7454: LD_INT 1
7456: PPUSH
7457: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7461: LD_EXP 8
7465: PPUSH
7466: LD_INT 6
7468: PPUSH
7469: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7473: LD_EXP 8
7477: PPUSH
7478: CALL_OW 122
// wait ( 0 0$1 ) ;
7482: LD_INT 35
7484: PPUSH
7485: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7489: LD_EXP 8
7493: PPUSH
7494: LD_INT 17
7496: PPUSH
7497: CALL_OW 113
// mikhailInbase = 0 ;
7501: LD_ADDR_EXP 22
7505: PUSH
7506: LD_INT 0
7508: ST_TO_ADDR
// end ; 2 :
7509: GO 7752
7511: LD_INT 2
7513: DOUBLE
7514: EQUAL
7515: IFTRUE 7519
7517: GO 7692
7519: POP
// begin mikhailInBase = 2 ;
7520: LD_ADDR_EXP 22
7524: PUSH
7525: LD_INT 2
7527: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7528: LD_EXP 8
7532: PPUSH
7533: LD_INT 6
7535: PPUSH
7536: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7540: LD_EXP 8
7544: PPUSH
7545: CALL_OW 122
// wait ( 0 0$1 ) ;
7549: LD_INT 35
7551: PPUSH
7552: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7556: LD_EXP 8
7560: PPUSH
7561: LD_EXP 8
7565: PPUSH
7566: CALL_OW 250
7570: PUSH
7571: LD_INT 2
7573: PLUS
7574: PPUSH
7575: LD_EXP 8
7579: PPUSH
7580: CALL_OW 251
7584: PUSH
7585: LD_INT 2
7587: PLUS
7588: PPUSH
7589: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7593: LD_EXP 8
7597: PPUSH
7598: LD_EXP 8
7602: PPUSH
7603: CALL_OW 250
7607: PUSH
7608: LD_INT 1
7610: PLUS
7611: PPUSH
7612: LD_EXP 8
7616: PPUSH
7617: CALL_OW 251
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: PPUSH
7626: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7630: LD_EXP 8
7634: PPUSH
7635: LD_EXP 8
7639: PPUSH
7640: CALL_OW 250
7644: PUSH
7645: LD_INT 2
7647: PLUS
7648: PPUSH
7649: LD_EXP 8
7653: PPUSH
7654: CALL_OW 251
7658: PPUSH
7659: CALL_OW 171
// wait ( 0 0$5 ) ;
7663: LD_INT 175
7665: PPUSH
7666: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7670: LD_EXP 8
7674: PPUSH
7675: LD_INT 25
7677: PPUSH
7678: CALL_OW 113
// mikhailInBase = 4 ;
7682: LD_ADDR_EXP 22
7686: PUSH
7687: LD_INT 4
7689: ST_TO_ADDR
// end ; 3 :
7690: GO 7752
7692: LD_INT 3
7694: DOUBLE
7695: EQUAL
7696: IFTRUE 7700
7698: GO 7751
7700: POP
// begin SetSide ( Mikhail , 6 ) ;
7701: LD_EXP 8
7705: PPUSH
7706: LD_INT 6
7708: PPUSH
7709: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7713: LD_EXP 8
7717: PPUSH
7718: CALL_OW 122
// wait ( 0 0$1 ) ;
7722: LD_INT 35
7724: PPUSH
7725: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7729: LD_EXP 8
7733: PPUSH
7734: LD_INT 17
7736: PPUSH
7737: CALL_OW 113
// mikhailInbase = 3 ;
7741: LD_ADDR_EXP 22
7745: PUSH
7746: LD_INT 3
7748: ST_TO_ADDR
// end ; end ;
7749: GO 7752
7751: POP
// end ;
7752: LD_VAR 0 1
7756: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7757: LD_EXP 8
7761: PPUSH
7762: LD_INT 25
7764: PPUSH
7765: CALL_OW 308
7769: PUSH
7770: LD_EXP 22
7774: PUSH
7775: LD_INT 4
7777: EQUAL
7778: AND
7779: IFFALSE 7883
7781: GO 7783
7783: DISABLE
// begin enable ;
7784: ENABLE
// mikhailInBase = 1 ;
7785: LD_ADDR_EXP 22
7789: PUSH
7790: LD_INT 1
7792: ST_TO_ADDR
// InGameOn ;
7793: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 6
7802: PPUSH
7803: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7807: LD_INT 35
7809: PPUSH
7810: CALL_OW 67
// if Carry ( Mikhail ) then
7814: LD_EXP 8
7818: PPUSH
7819: CALL_OW 281
7823: IFFALSE 7834
// ComUnload ( Mikhail ) ;
7825: LD_EXP 8
7829: PPUSH
7830: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7834: LD_EXP 8
7838: PPUSH
7839: LD_INT 1
7841: PPUSH
7842: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7846: LD_EXP 8
7850: PPUSH
7851: CALL_OW 310
7855: IFFALSE 7807
// SetSide ( dep1 , 1 ) ;
7857: LD_INT 1
7859: PPUSH
7860: LD_INT 1
7862: PPUSH
7863: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7867: LD_EXP 8
7871: PPUSH
7872: LD_INT 1
7874: PPUSH
7875: CALL_OW 235
// InGameOff ;
7879: CALL_OW 9
// end ;
7883: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7884: LD_EXP 8
7888: PPUSH
7889: CALL_OW 310
7893: PUSH
7894: LD_EXP 22
7898: PUSH
7899: LD_INT 3
7901: EQUAL
7902: NOT
7903: AND
7904: IFFALSE 8039
7906: GO 7908
7908: DISABLE
// begin enable ;
7909: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7910: LD_INT 22
7912: PUSH
7913: LD_INT 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 21
7922: PUSH
7923: LD_INT 1
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: LD_INT 91
7932: PUSH
7933: LD_EXP 8
7937: PPUSH
7938: CALL_OW 310
7942: PUSH
7943: LD_INT 10
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: LIST
7955: PPUSH
7956: CALL_OW 69
7960: PUSH
7961: LD_INT 1
7963: EQUAL
7964: IFFALSE 8039
// begin mikhailStatus = 4 ;
7966: LD_ADDR_EXP 21
7970: PUSH
7971: LD_INT 4
7973: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7974: LD_INT 1
7976: PPUSH
7977: LD_INT 6
7979: PPUSH
7980: LD_INT 2
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7990: LD_EXP 8
7994: PPUSH
7995: LD_INT 6
7997: PPUSH
7998: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8002: LD_EXP 8
8006: PPUSH
8007: CALL_OW 122
// wait ( 0 0$1 ) ;
8011: LD_INT 35
8013: PPUSH
8014: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8018: LD_EXP 8
8022: PPUSH
8023: LD_INT 17
8025: PPUSH
8026: CALL_OW 113
// mikhailStatus = 3 ;
8030: LD_ADDR_EXP 21
8034: PUSH
8035: LD_INT 3
8037: ST_TO_ADDR
// disable ;
8038: DISABLE
// end ; end ;
8039: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8040: LD_EXP 1
8044: PPUSH
8045: LD_EXP 23
8049: PPUSH
8050: CALL_OW 296
8054: PUSH
8055: LD_INT 5
8057: LESS
8058: PUSH
8059: LD_EXP 21
8063: PUSH
8064: LD_INT 3
8066: EQUAL
8067: AND
8068: PUSH
8069: LD_EXP 22
8073: PUSH
8074: LD_INT 3
8076: EQUAL
8077: NOT
8078: AND
8079: IFFALSE 8310
8081: GO 8083
8083: DISABLE
8084: LD_INT 0
8086: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8087: LD_ADDR_VAR 0 1
8091: PUSH
8092: LD_INT 22
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 21
8104: PUSH
8105: LD_INT 1
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 26
8114: PUSH
8115: LD_INT 1
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: PPUSH
8127: CALL_OW 69
8131: PUSH
8132: LD_EXP 1
8136: PUSH
8137: LD_EXP 5
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: DIFF
8146: ST_TO_ADDR
// if not tmp then
8147: LD_VAR 0 1
8151: NOT
8152: IFFALSE 8156
// exit ;
8154: GO 8310
// DialogueOn ;
8156: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8160: LD_EXP 1
8164: PPUSH
8165: LD_STRING D7-JMM-1
8167: PPUSH
8168: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8172: LD_VAR 0 1
8176: PUSH
8177: LD_INT 1
8179: ARRAY
8180: PPUSH
8181: LD_STRING D7-Sol1-1
8183: PPUSH
8184: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8188: LD_EXP 1
8192: PPUSH
8193: LD_STRING D7-JMM-2
8195: PPUSH
8196: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8200: LD_VAR 0 1
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: PPUSH
8209: LD_STRING D7-Sol1-2
8211: PPUSH
8212: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8216: LD_EXP 1
8220: PPUSH
8221: LD_STRING D7-JMM-3
8223: PPUSH
8224: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8228: LD_VAR 0 1
8232: PUSH
8233: LD_INT 1
8235: ARRAY
8236: PPUSH
8237: LD_STRING D7-Sol1-3
8239: PPUSH
8240: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8244: LD_EXP 3
8248: PPUSH
8249: CALL_OW 302
8253: PUSH
8254: LD_EXP 4
8258: PPUSH
8259: CALL_OW 302
8263: AND
8264: IFFALSE 8306
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8266: LD_EXP 3
8270: PPUSH
8271: LD_STRING D7-Cyrus-3
8273: PPUSH
8274: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: ARRAY
8286: PPUSH
8287: LD_STRING D7-Sol1-4
8289: PPUSH
8290: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8294: LD_EXP 4
8298: PPUSH
8299: LD_STRING D7-Lisa-4
8301: PPUSH
8302: CALL_OW 88
// end ; DialogueOff ;
8306: CALL_OW 7
// end ;
8310: PPOPN 1
8312: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8313: LD_EXP 8
8317: PPUSH
8318: CALL_OW 303
8322: PUSH
8323: LD_EXP 21
8327: PUSH
8328: LD_INT 3
8330: EQUAL
8331: AND
8332: IFFALSE 8346
8334: GO 8336
8336: DISABLE
// begin enable ;
8337: ENABLE
// mikhailStatus = 2 ;
8338: LD_ADDR_EXP 21
8342: PUSH
8343: LD_INT 2
8345: ST_TO_ADDR
// end ;
8346: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8347: LD_EXP 8
8351: PPUSH
8352: LD_INT 17
8354: PPUSH
8355: CALL_OW 308
8359: PUSH
8360: LD_EXP 8
8364: PPUSH
8365: CALL_OW 255
8369: PUSH
8370: LD_INT 6
8372: EQUAL
8373: AND
8374: IFFALSE 8407
8376: GO 8378
8378: DISABLE
// begin if not mikhailInBase = 3 then
8379: LD_EXP 22
8383: PUSH
8384: LD_INT 3
8386: EQUAL
8387: NOT
8388: IFFALSE 8398
// mikhailStatus = 3 ;
8390: LD_ADDR_EXP 21
8394: PUSH
8395: LD_INT 3
8397: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8398: LD_EXP 8
8402: PPUSH
8403: CALL_OW 64
// end ;
8407: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8408: LD_EXP 21
8412: PUSH
8413: LD_INT 3
8415: EQUAL
8416: PUSH
8417: LD_EXP 8
8421: PPUSH
8422: CALL_OW 255
8426: PUSH
8427: LD_INT 6
8429: EQUAL
8430: AND
8431: IFFALSE 8624
8433: GO 8435
8435: DISABLE
8436: LD_INT 0
8438: PPUSH
8439: PPUSH
// begin enable ;
8440: ENABLE
// if IsOk ( Mikhail ) then
8441: LD_EXP 8
8445: PPUSH
8446: CALL_OW 302
8450: IFFALSE 8624
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) diff [ JMM , Bobby , Cyrus , Lisa ] ;
8452: LD_ADDR_VAR 0 2
8456: PUSH
8457: LD_EXP 8
8461: PPUSH
8462: LD_INT 22
8464: PUSH
8465: LD_INT 1
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 21
8474: PUSH
8475: LD_INT 1
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 69
8490: PPUSH
8491: CALL 10527 0 2
8495: PUSH
8496: LD_EXP 1
8500: PUSH
8501: LD_EXP 2
8505: PUSH
8506: LD_EXP 3
8510: PUSH
8511: LD_EXP 4
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: DIFF
8522: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 10 then
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_EXP 8
8532: PPUSH
8533: CALL_OW 296
8537: PUSH
8538: LD_INT 10
8540: LESS
8541: IFFALSE 8624
// begin if GetSex ( attacker ) = sex_male then
8543: LD_VAR 0 2
8547: PPUSH
8548: CALL_OW 258
8552: PUSH
8553: LD_INT 1
8555: EQUAL
8556: IFFALSE 8592
// begin disable ;
8558: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8559: LD_VAR 0 2
8563: PPUSH
8564: LD_STRING D7a-Sol1-1
8566: PPUSH
8567: CALL_OW 88
// wait ( 0 0$2 ) ;
8571: LD_INT 70
8573: PPUSH
8574: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8578: LD_VAR 0 2
8582: PPUSH
8583: LD_STRING D7a-Sol1-1a
8585: PPUSH
8586: CALL_OW 88
// end else
8590: GO 8624
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-FSol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-FSol1-1a
8619: PPUSH
8620: CALL_OW 88
// end ; end ; end ; end ;
8624: PPOPN 2
8626: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8627: LD_EXP 27
8631: PUSH
8632: LD_INT 1
8634: EQUAL
8635: PUSH
8636: LD_INT 22
8638: PPUSH
8639: LD_INT 22
8641: PUSH
8642: LD_INT 3
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 21
8651: PUSH
8652: LD_INT 1
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PPUSH
8663: CALL_OW 70
8667: PUSH
8668: LD_INT 2
8670: GREATER
8671: AND
8672: PUSH
8673: LD_INT 22
8675: PPUSH
8676: LD_INT 22
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 2
8688: PUSH
8689: LD_INT 21
8691: PUSH
8692: LD_INT 1
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 59
8701: PUSH
8702: EMPTY
8703: LIST
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 70
8718: PUSH
8719: LD_INT 0
8721: EQUAL
8722: AND
8723: IFFALSE 8738
8725: GO 8727
8727: DISABLE
// SetSide ( dep1 , 3 ) ;
8728: LD_INT 1
8730: PPUSH
8731: LD_INT 3
8733: PPUSH
8734: CALL_OW 235
8738: END
// export function JMMTraitor ; var i ; begin
8739: LD_INT 0
8741: PPUSH
8742: PPUSH
// if traitor then
8743: LD_EXP 33
8747: IFFALSE 8751
// exit ;
8749: GO 8888
// traitor := true ;
8751: LD_ADDR_EXP 33
8755: PUSH
8756: LD_INT 1
8758: ST_TO_ADDR
// if IsOk ( Lisa ) then
8759: LD_EXP 4
8763: PPUSH
8764: CALL_OW 302
8768: IFFALSE 8790
// begin DialogueOn ;
8770: CALL_OW 6
// Say ( Lisa , D10-Lisa-Traitor ) ;
8774: LD_EXP 4
8778: PPUSH
8779: LD_STRING D10-Lisa-Traitor
8781: PPUSH
8782: CALL_OW 88
// DialogueOff ;
8786: CALL_OW 7
// end ; ComExit ( JMM ) ;
8790: LD_EXP 1
8794: PPUSH
8795: CALL 75737 0 1
// SetAttitude ( 1 , 4 , att_enemy , true ) ;
8799: LD_INT 1
8801: PPUSH
8802: LD_INT 4
8804: PPUSH
8805: LD_INT 2
8807: PPUSH
8808: LD_INT 1
8810: PPUSH
8811: CALL_OW 80
// for i in FilterAllUnits ( [ f_side , 1 ] ) diff JMM do
8815: LD_ADDR_VAR 0 2
8819: PUSH
8820: LD_INT 22
8822: PUSH
8823: LD_INT 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: PUSH
8835: LD_EXP 1
8839: DIFF
8840: PUSH
8841: FOR_IN
8842: IFFALSE 8872
// begin SetSide ( i , 4 ) ;
8844: LD_VAR 0 2
8848: PPUSH
8849: LD_INT 4
8851: PPUSH
8852: CALL_OW 235
// ComAttackUnit ( i , JMM ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_EXP 1
8865: PPUSH
8866: CALL_OW 115
// end ;
8870: GO 8841
8872: POP
8873: POP
// wait ( 0 0$30 ) ;
8874: LD_INT 1050
8876: PPUSH
8877: CALL_OW 67
// YouLost ( Traitor ) ;
8881: LD_STRING Traitor
8883: PPUSH
8884: CALL_OW 104
// end ;
8888: LD_VAR 0 1
8892: RET
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8893: LD_EXP 30
8897: PUSH
8898: LD_INT 1
8900: EQUAL
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_INT 0
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 25
8914: PUSH
8915: LD_INT 14
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PPUSH
8926: CALL_OW 69
8930: PUSH
8931: LD_INT 0
8933: EQUAL
8934: AND
8935: IFFALSE 9036
8937: GO 8939
8939: DISABLE
8940: LD_INT 0
8942: PPUSH
8943: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_INT 22
8951: PUSH
8952: LD_INT 1
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 21
8961: PUSH
8962: LD_INT 1
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 23
8971: PUSH
8972: LD_INT 1
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PPUSH
8984: CALL_OW 69
8988: ST_TO_ADDR
// for i in tmp do
8989: LD_ADDR_VAR 0 1
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: FOR_IN
9000: IFFALSE 9027
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: LD_INT 4
9012: PPUSH
9013: CALL_OW 12
9017: PPUSH
9018: LD_INT 300
9020: PPUSH
9021: CALL_OW 492
9025: GO 8999
9027: POP
9028: POP
// SetAchievement ( ACH_TIGER ) ;
9029: LD_STRING ACH_TIGER
9031: PPUSH
9032: CALL_OW 543
// end ;
9036: PPOPN 2
9038: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
9039: LD_INT 22
9041: PUSH
9042: LD_INT 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 34
9051: PUSH
9052: LD_INT 51
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: PUSH
9068: LD_INT 2
9070: GREATEREQUAL
9071: IFFALSE 9083
9073: GO 9075
9075: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
9076: LD_STRING ACH_CARGO
9078: PPUSH
9079: CALL_OW 543
9083: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
9084: LD_INT 0
9086: PPUSH
9087: PPUSH
9088: PPUSH
// for i = 1 to count do
9089: LD_ADDR_VAR 0 8
9093: PUSH
9094: DOUBLE
9095: LD_INT 1
9097: DEC
9098: ST_TO_ADDR
9099: LD_VAR 0 6
9103: PUSH
9104: FOR_TO
9105: IFFALSE 9186
// begin uc_side = side ;
9107: LD_ADDR_OWVAR 20
9111: PUSH
9112: LD_VAR 0 1
9116: ST_TO_ADDR
// uc_nation = nation ;
9117: LD_ADDR_OWVAR 21
9121: PUSH
9122: LD_VAR 0 2
9126: ST_TO_ADDR
// hc_gallery =  ;
9127: LD_ADDR_OWVAR 33
9131: PUSH
9132: LD_STRING 
9134: ST_TO_ADDR
// hc_name =  ;
9135: LD_ADDR_OWVAR 26
9139: PUSH
9140: LD_STRING 
9142: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9143: LD_INT 0
9145: PPUSH
9146: LD_VAR 0 5
9150: PPUSH
9151: LD_VAR 0 4
9155: PPUSH
9156: CALL_OW 380
// un = CreateHuman ;
9160: LD_ADDR_VAR 0 9
9164: PUSH
9165: CALL_OW 44
9169: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9170: LD_VAR 0 9
9174: PPUSH
9175: LD_VAR 0 3
9179: PPUSH
9180: CALL_OW 52
// end ;
9184: GO 9104
9186: POP
9187: POP
// end ;
9188: LD_VAR 0 7
9192: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9193: LD_INT 0
9195: PPUSH
9196: PPUSH
9197: PPUSH
// uc_side := GetSide ( b ) ;
9198: LD_ADDR_OWVAR 20
9202: PUSH
9203: LD_VAR 0 2
9207: PPUSH
9208: CALL_OW 255
9212: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9213: LD_ADDR_OWVAR 21
9217: PUSH
9218: LD_VAR 0 2
9222: PPUSH
9223: CALL_OW 248
9227: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9228: LD_INT 0
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: LD_VAR 0 1
9238: PPUSH
9239: CALL_OW 380
// un = CreateHuman ;
9243: LD_ADDR_VAR 0 4
9247: PUSH
9248: CALL_OW 44
9252: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9253: LD_ADDR_VAR 0 5
9257: PUSH
9258: LD_VAR 0 2
9262: PPUSH
9263: CALL_OW 254
9267: PUSH
9268: LD_INT 3
9270: MINUS
9271: ST_TO_ADDR
// if dir < 0 then
9272: LD_VAR 0 5
9276: PUSH
9277: LD_INT 0
9279: LESS
9280: IFFALSE 9296
// dir := 6 + dir ;
9282: LD_ADDR_VAR 0 5
9286: PUSH
9287: LD_INT 6
9289: PUSH
9290: LD_VAR 0 5
9294: PLUS
9295: ST_TO_ADDR
// SetDir ( un , dir ) ;
9296: LD_VAR 0 4
9300: PPUSH
9301: LD_VAR 0 5
9305: PPUSH
9306: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9310: LD_VAR 0 4
9314: PPUSH
9315: LD_VAR 0 2
9319: PPUSH
9320: CALL_OW 52
// end ;
9324: LD_VAR 0 3
9328: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9329: LD_INT 0
9331: PPUSH
9332: PPUSH
9333: PPUSH
9334: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9335: LD_ADDR_VAR 0 7
9339: PUSH
9340: LD_INT 22
9342: PUSH
9343: LD_VAR 0 1
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 25
9354: PUSH
9355: LD_INT 2
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: LD_INT 24
9364: PUSH
9365: LD_INT 1000
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PPUSH
9377: CALL_OW 69
9381: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9382: LD_ADDR_VAR 0 5
9386: PUSH
9387: LD_VAR 0 3
9391: PPUSH
9392: LD_INT 22
9394: PUSH
9395: LD_VAR 0 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 21
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: LD_INT 24
9419: PUSH
9420: LD_INT 1000
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: PPUSH
9439: CALL_OW 70
9443: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9444: LD_VAR 0 5
9448: NOT
9449: PUSH
9450: LD_VAR 0 7
9454: NOT
9455: AND
9456: IFFALSE 9460
// exit ;
9458: GO 9656
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9460: LD_VAR 0 5
9464: NOT
9465: PUSH
9466: LD_VAR 0 7
9470: PPUSH
9471: LD_INT 3
9473: PUSH
9474: LD_INT 54
9476: PUSH
9477: EMPTY
9478: LIST
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 72
9488: AND
9489: PUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: CALL_OW 302
9499: AND
9500: IFFALSE 9534
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9502: LD_VAR 0 7
9506: PPUSH
9507: LD_INT 3
9509: PUSH
9510: LD_INT 54
9512: PUSH
9513: EMPTY
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PPUSH
9520: CALL_OW 72
9524: PPUSH
9525: LD_VAR 0 2
9529: PPUSH
9530: CALL_OW 120
// if buildingsList then
9534: LD_VAR 0 5
9538: IFFALSE 9656
// begin for i in engineerOkList do
9540: LD_ADDR_VAR 0 6
9544: PUSH
9545: LD_VAR 0 7
9549: PUSH
9550: FOR_IN
9551: IFFALSE 9654
// if IsInUnit ( i ) then
9553: LD_VAR 0 6
9557: PPUSH
9558: CALL_OW 310
9562: IFFALSE 9575
// ComExitBuilding ( i ) else
9564: LD_VAR 0 6
9568: PPUSH
9569: CALL_OW 122
9573: GO 9652
// if GetLives ( i ) > 650 then
9575: LD_VAR 0 6
9579: PPUSH
9580: CALL_OW 256
9584: PUSH
9585: LD_INT 650
9587: GREATER
9588: IFFALSE 9616
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9590: LD_VAR 0 6
9594: PPUSH
9595: LD_VAR 0 5
9599: PPUSH
9600: LD_VAR 0 6
9604: PPUSH
9605: CALL_OW 74
9609: PPUSH
9610: CALL_OW 130
9614: GO 9652
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9616: LD_VAR 0 6
9620: PPUSH
9621: LD_INT 56
9623: PPUSH
9624: LD_INT 10
9626: PPUSH
9627: CALL_OW 297
9631: PUSH
9632: LD_INT 8
9634: GREATER
9635: IFFALSE 9652
// ComMoveXY ( i , 56 , 10 ) ;
9637: LD_VAR 0 6
9641: PPUSH
9642: LD_INT 56
9644: PPUSH
9645: LD_INT 10
9647: PPUSH
9648: CALL_OW 111
9652: GO 9550
9654: POP
9655: POP
// end ; end ;
9656: LD_VAR 0 4
9660: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9661: LD_INT 0
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9667: LD_ADDR_VAR 0 6
9671: PUSH
9672: LD_INT 22
9674: PUSH
9675: LD_VAR 0 1
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 25
9686: PUSH
9687: LD_INT 4
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 24
9696: PUSH
9697: LD_INT 250
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: PPUSH
9709: CALL_OW 69
9713: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9714: LD_ADDR_VAR 0 8
9718: PUSH
9719: LD_VAR 0 3
9723: PPUSH
9724: LD_INT 22
9726: PUSH
9727: LD_VAR 0 1
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 21
9738: PUSH
9739: LD_INT 1
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 3
9748: PUSH
9749: LD_INT 24
9751: PUSH
9752: LD_INT 650
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PPUSH
9768: CALL_OW 70
9772: ST_TO_ADDR
// if not damageUnits and not sciList then
9773: LD_VAR 0 8
9777: NOT
9778: PUSH
9779: LD_VAR 0 6
9783: NOT
9784: AND
9785: IFFALSE 9789
// exit ;
9787: GO 9928
// if damageUnits then
9789: LD_VAR 0 8
9793: IFFALSE 9872
// begin for i in sciList do
9795: LD_ADDR_VAR 0 7
9799: PUSH
9800: LD_VAR 0 6
9804: PUSH
9805: FOR_IN
9806: IFFALSE 9868
// if IsInUnit ( i ) then
9808: LD_VAR 0 7
9812: PPUSH
9813: CALL_OW 310
9817: IFFALSE 9830
// ComExitBuilding ( i ) else
9819: LD_VAR 0 7
9823: PPUSH
9824: CALL_OW 122
9828: GO 9866
// if not HasTask ( i ) then
9830: LD_VAR 0 7
9834: PPUSH
9835: CALL_OW 314
9839: NOT
9840: IFFALSE 9866
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9842: LD_VAR 0 7
9846: PPUSH
9847: LD_VAR 0 8
9851: PPUSH
9852: LD_VAR 0 7
9856: PPUSH
9857: CALL_OW 74
9861: PPUSH
9862: CALL_OW 128
9866: GO 9805
9868: POP
9869: POP
// end else
9870: GO 9928
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9872: LD_VAR 0 6
9876: PPUSH
9877: LD_INT 3
9879: PUSH
9880: LD_INT 54
9882: PUSH
9883: EMPTY
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PPUSH
9890: CALL_OW 72
9894: IFFALSE 9928
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9896: LD_VAR 0 6
9900: PPUSH
9901: LD_INT 3
9903: PUSH
9904: LD_INT 54
9906: PUSH
9907: EMPTY
9908: LIST
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PPUSH
9914: CALL_OW 72
9918: PPUSH
9919: LD_VAR 0 4
9923: PPUSH
9924: CALL_OW 120
// end ;
9928: LD_VAR 0 5
9932: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9933: LD_INT 0
9935: PPUSH
9936: PPUSH
9937: PPUSH
9938: PPUSH
// if not defendersList then
9939: LD_VAR 0 3
9943: NOT
9944: IFFALSE 9948
// exit ;
9946: GO 10330
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9948: LD_ADDR_VAR 0 7
9952: PUSH
9953: LD_VAR 0 1
9957: PPUSH
9958: LD_INT 22
9960: PUSH
9961: LD_VAR 0 2
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 2
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 1
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 70
10006: ST_TO_ADDR
// if enemy then
10007: LD_VAR 0 7
10011: IFFALSE 10232
// begin for i in defendersList do
10013: LD_ADDR_VAR 0 6
10017: PUSH
10018: LD_VAR 0 3
10022: PUSH
10023: FOR_IN
10024: IFFALSE 10228
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
10026: LD_VAR 0 6
10030: PPUSH
10031: CALL_OW 310
10035: PUSH
10036: LD_VAR 0 6
10040: PPUSH
10041: CALL_OW 256
10045: PUSH
10046: LD_INT 500
10048: GREATER
10049: AND
10050: IFFALSE 10063
// ComExitBuilding ( i ) else
10052: LD_VAR 0 6
10056: PPUSH
10057: CALL_OW 122
10061: GO 10226
// if GetLives ( i ) > 650 then
10063: LD_VAR 0 6
10067: PPUSH
10068: CALL_OW 256
10072: PUSH
10073: LD_INT 650
10075: GREATER
10076: IFFALSE 10129
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
10078: LD_ADDR_VAR 0 8
10082: PUSH
10083: LD_VAR 0 7
10087: PPUSH
10088: LD_VAR 0 6
10092: PPUSH
10093: CALL_OW 74
10097: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
10098: LD_VAR 0 6
10102: PPUSH
10103: LD_VAR 0 8
10107: PPUSH
10108: CALL_OW 250
10112: PPUSH
10113: LD_VAR 0 8
10117: PPUSH
10118: CALL_OW 251
10122: PPUSH
10123: CALL_OW 114
// end else
10127: GO 10226
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10129: LD_INT 22
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 25
10141: PUSH
10142: LD_INT 4
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PPUSH
10153: CALL_OW 69
10157: IFFALSE 10197
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10159: LD_VAR 0 6
10163: PPUSH
10164: LD_INT 56
10166: PPUSH
10167: LD_INT 10
10169: PPUSH
10170: CALL_OW 297
10174: PUSH
10175: LD_INT 8
10177: GREATER
10178: IFFALSE 10195
// ComMoveXY ( i , 56 , 10 ) ;
10180: LD_VAR 0 6
10184: PPUSH
10185: LD_INT 56
10187: PPUSH
10188: LD_INT 10
10190: PPUSH
10191: CALL_OW 111
// end else
10195: GO 10226
// if GetLives ( i ) <= 500 then
10197: LD_VAR 0 6
10201: PPUSH
10202: CALL_OW 256
10206: PUSH
10207: LD_INT 500
10209: LESSEQUAL
10210: IFFALSE 10226
// ComEnterUnit ( i , building ) ;
10212: LD_VAR 0 6
10216: PPUSH
10217: LD_VAR 0 4
10221: PPUSH
10222: CALL_OW 120
// end ;
10226: GO 10023
10228: POP
10229: POP
// end else
10230: GO 10330
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 56
10239: PUSH
10240: EMPTY
10241: LIST
10242: PUSH
10243: LD_INT 3
10245: PUSH
10246: LD_INT 60
10248: PUSH
10249: EMPTY
10250: LIST
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 24
10258: PUSH
10259: LD_INT 1000
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: PPUSH
10271: CALL_OW 72
10275: IFFALSE 10330
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10277: LD_VAR 0 3
10281: PPUSH
10282: LD_INT 56
10284: PUSH
10285: EMPTY
10286: LIST
10287: PUSH
10288: LD_INT 3
10290: PUSH
10291: LD_INT 60
10293: PUSH
10294: EMPTY
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 24
10303: PUSH
10304: LD_INT 1000
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 72
10320: PPUSH
10321: LD_VAR 0 4
10325: PPUSH
10326: CALL_OW 120
// end ;
10330: LD_VAR 0 5
10334: RET
// export function RussianTrap ; var i ; begin
10335: LD_INT 0
10337: PPUSH
10338: PPUSH
// if GetSide ( Brian ) = 4 then
10339: LD_EXP 6
10343: PPUSH
10344: CALL_OW 255
10348: PUSH
10349: LD_INT 4
10351: EQUAL
10352: IFFALSE 10375
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10354: LD_EXP 6
10358: PUSH
10359: LD_EXP 7
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: LD_INT 0
10370: PPUSH
10371: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10375: LD_ADDR_VAR 0 2
10379: PUSH
10380: LD_INT 22
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 1
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PPUSH
10404: CALL_OW 69
10408: PUSH
10409: FOR_IN
10410: IFFALSE 10520
// begin ComExitBuilding ( i ) ;
10412: LD_VAR 0 2
10416: PPUSH
10417: CALL_OW 122
// wait ( 0 0$1 ) ;
10421: LD_INT 35
10423: PPUSH
10424: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10428: LD_VAR 0 2
10432: PPUSH
10433: LD_INT 120
10435: PPUSH
10436: LD_INT 56
10438: PPUSH
10439: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10443: LD_VAR 0 2
10447: PPUSH
10448: LD_INT 111
10450: PPUSH
10451: LD_INT 37
10453: PPUSH
10454: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10458: LD_INT 33
10460: PPUSH
10461: CALL_OW 255
10465: PUSH
10466: LD_INT 3
10468: EQUAL
10469: PUSH
10470: LD_INT 33
10472: PPUSH
10473: CALL_OW 302
10477: AND
10478: IFFALSE 10494
// AddComEnterUnit ( i , arm2 ) else
10480: LD_VAR 0 2
10484: PPUSH
10485: LD_INT 33
10487: PPUSH
10488: CALL_OW 180
10492: GO 10518
// begin AddComCrawl ( i ) ;
10494: LD_VAR 0 2
10498: PPUSH
10499: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10503: LD_VAR 0 2
10507: PPUSH
10508: LD_INT 109
10510: PPUSH
10511: LD_INT 30
10513: PPUSH
10514: CALL_OW 174
// end ; end ;
10518: GO 10409
10520: POP
10521: POP
// end ;
10522: LD_VAR 0 1
10526: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10527: LD_INT 0
10529: PPUSH
10530: PPUSH
10531: PPUSH
10532: PPUSH
10533: PPUSH
// nearestDist := 1000 ;
10534: LD_ADDR_VAR 0 4
10538: PUSH
10539: LD_INT 1000
10541: ST_TO_ADDR
// nearestUn := un ;
10542: LD_ADDR_VAR 0 5
10546: PUSH
10547: LD_VAR 0 1
10551: ST_TO_ADDR
// for sold in units do
10552: LD_ADDR_VAR 0 6
10556: PUSH
10557: LD_VAR 0 2
10561: PUSH
10562: FOR_IN
10563: IFFALSE 10619
// begin dist := GetDistUnits ( un , sold ) ;
10565: LD_ADDR_VAR 0 7
10569: PUSH
10570: LD_VAR 0 1
10574: PPUSH
10575: LD_VAR 0 6
10579: PPUSH
10580: CALL_OW 296
10584: ST_TO_ADDR
// if dist < nearestDist then
10585: LD_VAR 0 7
10589: PUSH
10590: LD_VAR 0 4
10594: LESS
10595: IFFALSE 10617
// begin nearestUn := sold ;
10597: LD_ADDR_VAR 0 5
10601: PUSH
10602: LD_VAR 0 6
10606: ST_TO_ADDR
// nearestDist := dist ;
10607: LD_ADDR_VAR 0 4
10611: PUSH
10612: LD_VAR 0 7
10616: ST_TO_ADDR
// end ; end ;
10617: GO 10562
10619: POP
10620: POP
// result := NearestUn ;
10621: LD_ADDR_VAR 0 3
10625: PUSH
10626: LD_VAR 0 5
10630: ST_TO_ADDR
// end ;
10631: LD_VAR 0 3
10635: RET
// export function PrepareDifficulty ; begin
10636: LD_INT 0
10638: PPUSH
// if Difficulty = 1 then
10639: LD_OWVAR 67
10643: PUSH
10644: LD_INT 1
10646: EQUAL
10647: IFFALSE 10710
// begin RemoveUnit ( brw2 ) ;
10649: LD_INT 9
10651: PPUSH
10652: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10656: LD_INT 30
10658: PPUSH
10659: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10663: LD_INT 52
10665: PPUSH
10666: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10670: LD_INT 63
10672: PPUSH
10673: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10677: LD_INT 5
10679: PUSH
10680: LD_INT 4
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PPUSH
10687: LD_INT 60
10689: PPUSH
10690: CALL_OW 240
// RuSoldMinLevel = 0 ;
10694: LD_ADDR_EXP 13
10698: PUSH
10699: LD_INT 0
10701: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10702: LD_ADDR_EXP 14
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// end ; if Difficulty = 2 then
10710: LD_OWVAR 67
10714: PUSH
10715: LD_INT 2
10717: EQUAL
10718: IFFALSE 10760
// begin RemoveUnit ( brw4 ) ;
10720: LD_INT 52
10722: PPUSH
10723: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10727: LD_INT 5
10729: PUSH
10730: LD_INT 4
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PPUSH
10737: LD_INT 50
10739: PPUSH
10740: CALL_OW 240
// RuSoldMinLevel = 1 ;
10744: LD_ADDR_EXP 13
10748: PUSH
10749: LD_INT 1
10751: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10752: LD_ADDR_EXP 14
10756: PUSH
10757: LD_INT 2
10759: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10760: LD_OWVAR 67
10764: PUSH
10765: LD_INT 3
10767: GREATEREQUAL
10768: IFFALSE 10803
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10770: LD_INT 5
10772: PUSH
10773: LD_INT 4
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PPUSH
10780: LD_INT 40
10782: PPUSH
10783: CALL_OW 240
// RuSoldMinLevel = 2 ;
10787: LD_ADDR_EXP 13
10791: PUSH
10792: LD_INT 2
10794: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10795: LD_ADDR_EXP 14
10799: PUSH
10800: LD_INT 3
10802: ST_TO_ADDR
// end ; end ;
10803: LD_VAR 0 1
10807: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10808: LD_INT 0
10810: PPUSH
10811: PPUSH
10812: PPUSH
// if not vehicles then
10813: LD_VAR 0 1
10817: NOT
10818: IFFALSE 10822
// exit ;
10820: GO 10952
// tmp := [ ] ;
10822: LD_ADDR_VAR 0 5
10826: PUSH
10827: EMPTY
10828: ST_TO_ADDR
// for i in vehicles do
10829: LD_ADDR_VAR 0 4
10833: PUSH
10834: LD_VAR 0 1
10838: PUSH
10839: FOR_IN
10840: IFFALSE 10936
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10842: LD_ADDR_VAR 0 5
10846: PUSH
10847: LD_VAR 0 5
10851: PPUSH
10852: LD_VAR 0 5
10856: PUSH
10857: LD_INT 1
10859: PLUS
10860: PPUSH
10861: LD_VAR 0 4
10865: PPUSH
10866: CALL_OW 265
10870: PUSH
10871: LD_VAR 0 4
10875: PPUSH
10876: CALL_OW 262
10880: PUSH
10881: LD_VAR 0 4
10885: PPUSH
10886: CALL_OW 263
10890: PUSH
10891: LD_VAR 0 4
10895: PPUSH
10896: CALL_OW 264
10900: PUSH
10901: LD_VAR 0 4
10905: PPUSH
10906: CALL_OW 261
10910: PUSH
10911: LD_VAR 0 4
10915: PPUSH
10916: CALL_OW 256
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 1
10933: ST_TO_ADDR
10934: GO 10839
10936: POP
10937: POP
// SaveVariable ( tmp , ident ) ;
10938: LD_VAR 0 5
10942: PPUSH
10943: LD_VAR 0 2
10947: PPUSH
10948: CALL_OW 39
// end ; end_of_file
10952: LD_VAR 0 3
10956: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10957: LD_INT 0
10959: PPUSH
10960: PPUSH
10961: PPUSH
// prefix := 01_ ;
10962: LD_ADDR_VAR 0 3
10966: PUSH
10967: LD_STRING 01_
10969: ST_TO_ADDR
// uc_side := 1 ;
10970: LD_ADDR_OWVAR 20
10974: PUSH
10975: LD_INT 1
10977: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10978: LD_ADDR_EXP 1
10982: PUSH
10983: LD_STRING JMM
10985: PPUSH
10986: LD_EXP 35
10990: NOT
10991: PPUSH
10992: LD_VAR 0 3
10996: PPUSH
10997: CALL 37648 0 3
11001: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
11002: LD_ADDR_VAR 0 2
11006: PUSH
11007: LD_STRING 01_JMMLifePoints_1
11009: PPUSH
11010: LD_INT 1000
11012: PPUSH
11013: CALL_OW 30
11017: ST_TO_ADDR
// if plive < 250 then
11018: LD_VAR 0 2
11022: PUSH
11023: LD_INT 250
11025: LESS
11026: IFFALSE 11036
// plive := 300 ;
11028: LD_ADDR_VAR 0 2
11032: PUSH
11033: LD_INT 300
11035: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
11036: LD_EXP 1
11040: PPUSH
11041: LD_VAR 0 2
11045: PPUSH
11046: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
11050: LD_ADDR_EXP 9
11054: PUSH
11055: LD_STRING Powell
11057: PPUSH
11058: CALL_OW 25
11062: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
11063: LD_ADDR_EXP 2
11067: PUSH
11068: LD_STRING Bobby
11070: PPUSH
11071: LD_EXP 35
11075: NOT
11076: PPUSH
11077: LD_VAR 0 3
11081: PPUSH
11082: CALL 37648 0 3
11086: ST_TO_ADDR
// if Bobby then
11087: LD_EXP 2
11091: IFFALSE 11141
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
11093: LD_ADDR_VAR 0 2
11097: PUSH
11098: LD_STRING 01_BobbyLifePoints_1
11100: PPUSH
11101: LD_INT 1000
11103: PPUSH
11104: CALL_OW 30
11108: ST_TO_ADDR
// if plive < 250 then
11109: LD_VAR 0 2
11113: PUSH
11114: LD_INT 250
11116: LESS
11117: IFFALSE 11127
// plive := 300 ;
11119: LD_ADDR_VAR 0 2
11123: PUSH
11124: LD_INT 300
11126: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11127: LD_EXP 2
11131: PPUSH
11132: LD_VAR 0 2
11136: PPUSH
11137: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11141: LD_ADDR_EXP 3
11145: PUSH
11146: LD_STRING Cyrus
11148: PPUSH
11149: LD_EXP 35
11153: NOT
11154: PPUSH
11155: LD_VAR 0 3
11159: PPUSH
11160: CALL 37648 0 3
11164: ST_TO_ADDR
// if Cyrus then
11165: LD_EXP 3
11169: IFFALSE 11219
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11171: LD_ADDR_VAR 0 2
11175: PUSH
11176: LD_STRING 01_CyrusLifePoints_1
11178: PPUSH
11179: LD_INT 1000
11181: PPUSH
11182: CALL_OW 30
11186: ST_TO_ADDR
// if plive < 250 then
11187: LD_VAR 0 2
11191: PUSH
11192: LD_INT 250
11194: LESS
11195: IFFALSE 11205
// plive := 300 ;
11197: LD_ADDR_VAR 0 2
11201: PUSH
11202: LD_INT 300
11204: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11205: LD_EXP 3
11209: PPUSH
11210: LD_VAR 0 2
11214: PPUSH
11215: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11219: LD_ADDR_EXP 5
11223: PUSH
11224: LD_STRING Khatam
11226: PPUSH
11227: CALL_OW 25
11231: ST_TO_ADDR
// uc_side := 4 ;
11232: LD_ADDR_OWVAR 20
11236: PUSH
11237: LD_INT 4
11239: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11240: LD_ADDR_EXP 4
11244: PUSH
11245: LD_STRING Lisa
11247: PPUSH
11248: CALL_OW 25
11252: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11253: LD_EXP 1
11257: PPUSH
11258: LD_INT 3
11260: PPUSH
11261: LD_INT 0
11263: PPUSH
11264: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11268: LD_EXP 2
11272: PPUSH
11273: LD_INT 3
11275: PPUSH
11276: LD_INT 0
11278: PPUSH
11279: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11283: LD_EXP 3
11287: PPUSH
11288: LD_INT 3
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11298: LD_EXP 4
11302: PPUSH
11303: LD_INT 5
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: CALL_OW 49
// ComCrawl ( Lisa ) ;
11313: LD_EXP 4
11317: PPUSH
11318: CALL_OW 137
// end ;
11322: LD_VAR 0 1
11326: RET
// export function PrepareLisSquad ; var i , un ; begin
11327: LD_INT 0
11329: PPUSH
11330: PPUSH
11331: PPUSH
// uc_side := 4 ;
11332: LD_ADDR_OWVAR 20
11336: PUSH
11337: LD_INT 4
11339: ST_TO_ADDR
// uc_nation := 1 ;
11340: LD_ADDR_OWVAR 21
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// hc_class := 2 ;
11348: LD_ADDR_OWVAR 28
11352: PUSH
11353: LD_INT 2
11355: ST_TO_ADDR
// hc_sex := sex_male ;
11356: LD_ADDR_OWVAR 27
11360: PUSH
11361: LD_INT 1
11363: ST_TO_ADDR
// hc_gallery :=  ;
11364: LD_ADDR_OWVAR 33
11368: PUSH
11369: LD_STRING 
11371: ST_TO_ADDR
// hc_name :=  ;
11372: LD_ADDR_OWVAR 26
11376: PUSH
11377: LD_STRING 
11379: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11380: LD_ADDR_OWVAR 30
11384: PUSH
11385: LD_INT 0
11387: PUSH
11388: LD_INT 1
11390: PUSH
11391: LD_INT 0
11393: PUSH
11394: LD_INT 0
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11403: LD_ADDR_OWVAR 31
11407: PUSH
11408: LD_INT 1
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: LD_INT 0
11416: PUSH
11417: LD_INT 0
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: ST_TO_ADDR
// un := CreateHuman ;
11426: LD_ADDR_VAR 0 3
11430: PUSH
11431: CALL_OW 44
11435: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11436: LD_VAR 0 3
11440: PPUSH
11441: LD_INT 6
11443: PPUSH
11444: LD_INT 0
11446: PPUSH
11447: CALL_OW 49
// hc_sex := sex_female ;
11451: LD_ADDR_OWVAR 27
11455: PUSH
11456: LD_INT 2
11458: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11459: LD_ADDR_OWVAR 30
11463: PUSH
11464: LD_INT 0
11466: PUSH
11467: LD_INT 0
11469: PUSH
11470: LD_INT 0
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11482: LD_ADDR_OWVAR 31
11486: PUSH
11487: LD_INT 0
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: LD_INT 0
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: ST_TO_ADDR
// un := CreateHuman ;
11505: LD_ADDR_VAR 0 3
11509: PUSH
11510: CALL_OW 44
11514: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 6
11522: PPUSH
11523: LD_INT 0
11525: PPUSH
11526: CALL_OW 49
// if not Bobby and not Cyrus then
11530: LD_EXP 2
11534: NOT
11535: PUSH
11536: LD_EXP 3
11540: NOT
11541: AND
11542: IFFALSE 11631
// begin hc_class := 1 ;
11544: LD_ADDR_OWVAR 28
11548: PUSH
11549: LD_INT 1
11551: ST_TO_ADDR
// hc_sex := sex_male ;
11552: LD_ADDR_OWVAR 27
11556: PUSH
11557: LD_INT 1
11559: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11560: LD_ADDR_OWVAR 30
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: LD_INT 3
11570: PUSH
11571: LD_INT 1
11573: PUSH
11574: LD_INT 0
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11583: LD_ADDR_OWVAR 31
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: LD_INT 1
11596: PUSH
11597: LD_INT 0
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: ST_TO_ADDR
// un := CreateHuman ;
11606: LD_ADDR_VAR 0 3
11610: PUSH
11611: CALL_OW 44
11615: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 31
11623: PPUSH
11624: LD_INT 0
11626: PPUSH
11627: CALL_OW 49
// end ; InitHc ;
11631: CALL_OW 19
// end ;
11635: LD_VAR 0 1
11639: RET
// export function PrepareOtherAmericans ; begin
11640: LD_INT 0
11642: PPUSH
// uc_side := 4 ;
11643: LD_ADDR_OWVAR 20
11647: PUSH
11648: LD_INT 4
11650: ST_TO_ADDR
// uc_nation := 1 ;
11651: LD_ADDR_OWVAR 21
11655: PUSH
11656: LD_INT 1
11658: ST_TO_ADDR
// hc_gallery :=  ;
11659: LD_ADDR_OWVAR 33
11663: PUSH
11664: LD_STRING 
11666: ST_TO_ADDR
// hc_name := Tom Garvin ;
11667: LD_ADDR_OWVAR 26
11671: PUSH
11672: LD_STRING Tom Garvin
11674: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11675: LD_INT 1
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: LD_INT 2
11683: PPUSH
11684: CALL_OW 380
// Brian := CreateHuman ;
11688: LD_ADDR_EXP 6
11692: PUSH
11693: CALL_OW 44
11697: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11698: LD_EXP 6
11702: PPUSH
11703: LD_INT 10
11705: PPUSH
11706: LD_INT 0
11708: PPUSH
11709: CALL_OW 49
// hc_name := Jerry White ;
11713: LD_ADDR_OWVAR 26
11717: PUSH
11718: LD_STRING Jerry White
11720: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11721: LD_INT 1
11723: PPUSH
11724: LD_INT 3
11726: PPUSH
11727: LD_INT 2
11729: PPUSH
11730: CALL_OW 380
// Jerry := CreateHuman ;
11734: LD_ADDR_EXP 7
11738: PUSH
11739: CALL_OW 44
11743: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11744: LD_EXP 7
11748: PPUSH
11749: LD_INT 10
11751: PPUSH
11752: LD_INT 0
11754: PPUSH
11755: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11759: LD_EXP 6
11763: PUSH
11764: LD_EXP 7
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 140
// end ;
11777: LD_VAR 0 1
11781: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11782: LD_INT 0
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11788: LD_ADDR_VAR 0 4
11792: PUSH
11793: LD_INT 16
11795: PPUSH
11796: LD_INT 0
11798: PPUSH
11799: CALL_OW 517
11803: ST_TO_ADDR
// for i = 1 to 6 do
11804: LD_ADDR_VAR 0 2
11808: PUSH
11809: DOUBLE
11810: LD_INT 1
11812: DEC
11813: ST_TO_ADDR
11814: LD_INT 6
11816: PUSH
11817: FOR_TO
11818: IFFALSE 11964
// begin uc_side := 4 ;
11820: LD_ADDR_OWVAR 20
11824: PUSH
11825: LD_INT 4
11827: ST_TO_ADDR
// uc_nation := 1 ;
11828: LD_ADDR_OWVAR 21
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// hc_gallery :=  ;
11836: LD_ADDR_OWVAR 33
11840: PUSH
11841: LD_STRING 
11843: ST_TO_ADDR
// hc_name :=  ;
11844: LD_ADDR_OWVAR 26
11848: PUSH
11849: LD_STRING 
11851: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11852: LD_INT 0
11854: PPUSH
11855: LD_INT 1
11857: PUSH
11858: LD_INT 1
11860: PUSH
11861: LD_INT 4
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: PUSH
11869: LD_VAR 0 2
11873: PUSH
11874: LD_INT 3
11876: MOD
11877: PUSH
11878: LD_INT 1
11880: PLUS
11881: ARRAY
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: CALL_OW 380
// un := CreateHuman ;
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: CALL_OW 44
11899: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11900: LD_VAR 0 3
11904: PPUSH
11905: LD_INT 0
11907: PPUSH
11908: LD_INT 5
11910: PPUSH
11911: CALL_OW 12
11915: PPUSH
11916: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_VAR 0 4
11929: PUSH
11930: LD_INT 1
11932: ARRAY
11933: PUSH
11934: LD_VAR 0 2
11938: ARRAY
11939: PPUSH
11940: LD_VAR 0 4
11944: PUSH
11945: LD_INT 2
11947: ARRAY
11948: PUSH
11949: LD_VAR 0 2
11953: ARRAY
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 601
// end ;
11962: GO 11817
11964: POP
11965: POP
// DyingSold := CreateHuman ;
11966: LD_ADDR_EXP 36
11970: PUSH
11971: CALL_OW 44
11975: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11976: LD_EXP 36
11980: PPUSH
11981: LD_INT 16
11983: PPUSH
11984: LD_INT 0
11986: PPUSH
11987: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11991: LD_EXP 36
11995: PPUSH
11996: LD_INT 250
11998: PPUSH
11999: CALL_OW 234
// end ; end_of_file
12003: LD_VAR 0 1
12007: RET
// export function PrepareRussianHeroes ; var tmp ; begin
12008: LD_INT 0
12010: PPUSH
12011: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
12012: LD_ADDR_VAR 0 2
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_INT 1
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 23
12029: PUSH
12030: LD_INT 1
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 25
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 50
12049: PUSH
12050: EMPTY
12051: LIST
12052: PUSH
12053: LD_INT 56
12055: PUSH
12056: EMPTY
12057: LIST
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: PPUSH
12066: CALL_OW 69
12070: PUSH
12071: LD_EXP 1
12075: PUSH
12076: EMPTY
12077: LIST
12078: DIFF
12079: ST_TO_ADDR
// if not tmp then
12080: LD_VAR 0 2
12084: NOT
12085: IFFALSE 12089
// exit ;
12087: GO 12165
// uc_side = 6 ;
12089: LD_ADDR_OWVAR 20
12093: PUSH
12094: LD_INT 6
12096: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
12097: LD_ADDR_EXP 8
12101: PUSH
12102: LD_STRING Mikhail
12104: PPUSH
12105: CALL_OW 25
12109: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
12110: LD_EXP 8
12114: PPUSH
12115: LD_INT 3
12117: PPUSH
12118: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12122: LD_EXP 8
12126: PPUSH
12127: LD_VAR 0 2
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PPUSH
12136: CALL_OW 250
12140: PPUSH
12141: LD_VAR 0 2
12145: PUSH
12146: LD_INT 1
12148: ARRAY
12149: PPUSH
12150: CALL_OW 251
12154: PPUSH
12155: LD_INT 5
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: CALL_OW 50
// end ;
12165: LD_VAR 0 1
12169: RET
// export function PrepareRussianCommander ; begin
12170: LD_INT 0
12172: PPUSH
// uc_side = 3 ;
12173: LD_ADDR_OWVAR 20
12177: PUSH
12178: LD_INT 3
12180: ST_TO_ADDR
// uc_nation = 3 ;
12181: LD_ADDR_OWVAR 21
12185: PUSH
12186: LD_INT 3
12188: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12189: LD_ADDR_EXP 19
12193: PUSH
12194: LD_STRING Natasza
12196: PPUSH
12197: CALL_OW 25
12201: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12202: LD_EXP 19
12206: PPUSH
12207: LD_INT 24
12209: PPUSH
12210: LD_INT 0
12212: PPUSH
12213: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12217: LD_EXP 19
12221: PPUSH
12222: LD_INT 56
12224: PPUSH
12225: LD_INT 16
12227: PPUSH
12228: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12232: LD_ADDR_EXP 24
12236: PUSH
12237: LD_EXP 24
12241: PPUSH
12242: LD_EXP 24
12246: PUSH
12247: LD_INT 1
12249: PLUS
12250: PPUSH
12251: LD_EXP 19
12255: PPUSH
12256: CALL_OW 1
12260: ST_TO_ADDR
// end ;
12261: LD_VAR 0 1
12265: RET
// export function PrepareSouthBase ; var i , un ; begin
12266: LD_INT 0
12268: PPUSH
12269: PPUSH
12270: PPUSH
// for i = 1 to 2 do
12271: LD_ADDR_VAR 0 2
12275: PUSH
12276: DOUBLE
12277: LD_INT 1
12279: DEC
12280: ST_TO_ADDR
12281: LD_INT 2
12283: PUSH
12284: FOR_TO
12285: IFFALSE 12394
// begin uc_side = 3 ;
12287: LD_ADDR_OWVAR 20
12291: PUSH
12292: LD_INT 3
12294: ST_TO_ADDR
// uc_nation = 3 ;
12295: LD_ADDR_OWVAR 21
12299: PUSH
12300: LD_INT 3
12302: ST_TO_ADDR
// hc_gallery =  ;
12303: LD_ADDR_OWVAR 33
12307: PUSH
12308: LD_STRING 
12310: ST_TO_ADDR
// hc_name =  ;
12311: LD_ADDR_OWVAR 26
12315: PUSH
12316: LD_STRING 
12318: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12319: LD_INT 1
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: LD_EXP 13
12329: PPUSH
12330: LD_EXP 14
12334: PPUSH
12335: CALL_OW 12
12339: PPUSH
12340: CALL_OW 380
// hc_importance = 0 ;
12344: LD_ADDR_OWVAR 32
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// un = CreateHuman ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: CALL_OW 44
12361: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 11
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12377: LD_VAR 0 3
12381: PPUSH
12382: LD_INT 111
12384: PPUSH
12385: LD_INT 38
12387: PPUSH
12388: CALL_OW 118
// end ;
12392: GO 12284
12394: POP
12395: POP
// for i = 1 to 2 do
12396: LD_ADDR_VAR 0 2
12400: PUSH
12401: DOUBLE
12402: LD_INT 1
12404: DEC
12405: ST_TO_ADDR
12406: LD_INT 2
12408: PUSH
12409: FOR_TO
12410: IFFALSE 12493
// begin uc_side = 3 ;
12412: LD_ADDR_OWVAR 20
12416: PUSH
12417: LD_INT 3
12419: ST_TO_ADDR
// uc_nation = 3 ;
12420: LD_ADDR_OWVAR 21
12424: PUSH
12425: LD_INT 3
12427: ST_TO_ADDR
// hc_gallery =  ;
12428: LD_ADDR_OWVAR 33
12432: PUSH
12433: LD_STRING 
12435: ST_TO_ADDR
// hc_name =  ;
12436: LD_ADDR_OWVAR 26
12440: PUSH
12441: LD_STRING 
12443: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12444: LD_INT 0
12446: PPUSH
12447: LD_INT 3
12449: PPUSH
12450: LD_EXP 13
12454: PPUSH
12455: LD_EXP 14
12459: PPUSH
12460: CALL_OW 12
12464: PPUSH
12465: CALL_OW 380
// un = CreateHuman ;
12469: LD_ADDR_VAR 0 3
12473: PUSH
12474: CALL_OW 44
12478: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 10
12486: PPUSH
12487: CALL_OW 52
// end ;
12491: GO 12409
12493: POP
12494: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12495: LD_INT 3
12497: PPUSH
12498: LD_INT 3
12500: PPUSH
12501: LD_INT 33
12503: PPUSH
12504: LD_EXP 13
12508: PPUSH
12509: LD_EXP 14
12513: PPUSH
12514: CALL_OW 12
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: LD_INT 1
12524: PUSH
12525: LD_INT 2
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: LD_INT 3
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: PUSH
12540: LD_OWVAR 67
12544: ARRAY
12545: PPUSH
12546: CALL 9084 0 6
// for i in UnitsInside ( arm2 ) do
12550: LD_ADDR_VAR 0 2
12554: PUSH
12555: LD_INT 33
12557: PPUSH
12558: CALL_OW 313
12562: PUSH
12563: FOR_IN
12564: IFFALSE 12597
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12566: LD_ADDR_EXP 25
12570: PUSH
12571: LD_EXP 25
12575: PPUSH
12576: LD_EXP 25
12580: PUSH
12581: LD_INT 1
12583: PLUS
12584: PPUSH
12585: LD_VAR 0 2
12589: PPUSH
12590: CALL_OW 1
12594: ST_TO_ADDR
12595: GO 12563
12597: POP
12598: POP
// end ;
12599: LD_VAR 0 1
12603: RET
// export function PrepareNorthBase ; var i , un ; begin
12604: LD_INT 0
12606: PPUSH
12607: PPUSH
12608: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12609: LD_ADDR_VAR 0 2
12613: PUSH
12614: DOUBLE
12615: LD_INT 1
12617: DEC
12618: ST_TO_ADDR
12619: LD_INT 1
12621: PPUSH
12622: LD_INT 2
12624: PPUSH
12625: CALL_OW 12
12629: PUSH
12630: LD_INT 2
12632: PPUSH
12633: LD_INT 3
12635: PPUSH
12636: CALL_OW 12
12640: PUSH
12641: LD_INT 3
12643: PPUSH
12644: LD_INT 4
12646: PPUSH
12647: CALL_OW 12
12651: PUSH
12652: LD_INT 4
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: PUSH
12661: LD_OWVAR 67
12665: ARRAY
12666: PUSH
12667: FOR_TO
12668: IFFALSE 12754
// begin uc_side = 3 ;
12670: LD_ADDR_OWVAR 20
12674: PUSH
12675: LD_INT 3
12677: ST_TO_ADDR
// uc_nation = 3 ;
12678: LD_ADDR_OWVAR 21
12682: PUSH
12683: LD_INT 3
12685: ST_TO_ADDR
// hc_gallery =  ;
12686: LD_ADDR_OWVAR 33
12690: PUSH
12691: LD_STRING 
12693: ST_TO_ADDR
// hc_name =  ;
12694: LD_ADDR_OWVAR 26
12698: PUSH
12699: LD_STRING 
12701: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12702: LD_INT 0
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: LD_EXP 13
12712: PPUSH
12713: LD_EXP 14
12717: PPUSH
12718: CALL_OW 12
12722: PPUSH
12723: CALL_OW 380
// un = CreateHuman ;
12727: LD_ADDR_VAR 0 3
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 14
12744: PPUSH
12745: LD_INT 0
12747: PPUSH
12748: CALL_OW 49
// end ;
12752: GO 12667
12754: POP
12755: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12756: LD_INT 3
12758: PPUSH
12759: LD_INT 3
12761: PPUSH
12762: LD_INT 2
12764: PPUSH
12765: LD_EXP 13
12769: PPUSH
12770: LD_EXP 14
12774: PPUSH
12775: CALL_OW 12
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: LD_INT 2
12788: PPUSH
12789: CALL_OW 12
12793: PUSH
12794: LD_INT 1
12796: PPUSH
12797: LD_INT 3
12799: PPUSH
12800: CALL_OW 12
12804: PUSH
12805: LD_INT 1
12807: PPUSH
12808: LD_INT 3
12810: PPUSH
12811: CALL_OW 12
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: PUSH
12825: LD_OWVAR 67
12829: ARRAY
12830: PPUSH
12831: CALL 9084 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12835: LD_INT 3
12837: PPUSH
12838: LD_INT 3
12840: PPUSH
12841: LD_INT 23
12843: PPUSH
12844: LD_EXP 13
12848: PPUSH
12849: LD_EXP 14
12853: PPUSH
12854: CALL_OW 12
12858: PPUSH
12859: LD_INT 4
12861: PPUSH
12862: LD_INT 0
12864: PUSH
12865: LD_INT 1
12867: PUSH
12868: LD_INT 2
12870: PUSH
12871: LD_INT 2
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: LD_OWVAR 67
12884: ARRAY
12885: PPUSH
12886: CALL 9084 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12890: LD_INT 3
12892: PPUSH
12893: LD_INT 3
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: LD_EXP 13
12903: PPUSH
12904: LD_EXP 14
12908: PPUSH
12909: CALL_OW 12
12913: PPUSH
12914: LD_INT 2
12916: PPUSH
12917: LD_INT 1
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: LD_INT 3
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: PUSH
12935: LD_OWVAR 67
12939: ARRAY
12940: PPUSH
12941: CALL 9084 0 6
// for i in UnitsInside ( arm1 ) do
12945: LD_ADDR_VAR 0 2
12949: PUSH
12950: LD_INT 2
12952: PPUSH
12953: CALL_OW 313
12957: PUSH
12958: FOR_IN
12959: IFFALSE 12992
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12961: LD_ADDR_EXP 24
12965: PUSH
12966: LD_EXP 24
12970: PPUSH
12971: LD_EXP 24
12975: PUSH
12976: LD_INT 1
12978: PLUS
12979: PPUSH
12980: LD_VAR 0 2
12984: PPUSH
12985: CALL_OW 1
12989: ST_TO_ADDR
12990: GO 12958
12992: POP
12993: POP
// end ;
12994: LD_VAR 0 1
12998: RET
// export function PrepareOtherRussians ; var i , un ; begin
12999: LD_INT 0
13001: PPUSH
13002: PPUSH
13003: PPUSH
// for i = 1 to 2 do
13004: LD_ADDR_VAR 0 2
13008: PUSH
13009: DOUBLE
13010: LD_INT 1
13012: DEC
13013: ST_TO_ADDR
13014: LD_INT 2
13016: PUSH
13017: FOR_TO
13018: IFFALSE 13119
// begin uc_side = 3 ;
13020: LD_ADDR_OWVAR 20
13024: PUSH
13025: LD_INT 3
13027: ST_TO_ADDR
// uc_nation = 3 ;
13028: LD_ADDR_OWVAR 21
13032: PUSH
13033: LD_INT 3
13035: ST_TO_ADDR
// hc_gallery =  ;
13036: LD_ADDR_OWVAR 33
13040: PUSH
13041: LD_STRING 
13043: ST_TO_ADDR
// hc_name =  ;
13044: LD_ADDR_OWVAR 26
13048: PUSH
13049: LD_STRING 
13051: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13052: LD_INT 0
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: LD_EXP 13
13062: PPUSH
13063: LD_EXP 14
13067: PPUSH
13068: CALL_OW 12
13072: PPUSH
13073: CALL_OW 380
// un = CreateHuman ;
13077: LD_ADDR_VAR 0 3
13081: PUSH
13082: CALL_OW 44
13086: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
13087: LD_VAR 0 3
13091: PPUSH
13092: LD_INT 9
13094: PPUSH
13095: LD_INT 0
13097: PPUSH
13098: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
13102: LD_VAR 0 3
13106: PPUSH
13107: LD_INT 80
13109: PPUSH
13110: LD_INT 73
13112: PPUSH
13113: CALL_OW 118
// end ;
13117: GO 13017
13119: POP
13120: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13121: LD_ADDR_VAR 0 2
13125: PUSH
13126: LD_INT 22
13128: PUSH
13129: LD_INT 3
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PUSH
13136: LD_INT 30
13138: PUSH
13139: LD_INT 31
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PPUSH
13150: CALL_OW 69
13154: PUSH
13155: FOR_IN
13156: IFFALSE 13184
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13158: LD_EXP 13
13162: PPUSH
13163: LD_EXP 14
13167: PPUSH
13168: CALL_OW 12
13172: PPUSH
13173: LD_VAR 0 2
13177: PPUSH
13178: CALL 9193 0 2
13182: GO 13155
13184: POP
13185: POP
// end ;
13186: LD_VAR 0 1
13190: RET
// export function PrepareCargoBays ; begin
13191: LD_INT 0
13193: PPUSH
// uc_side = 3 ;
13194: LD_ADDR_OWVAR 20
13198: PUSH
13199: LD_INT 3
13201: ST_TO_ADDR
// uc_nation = 3 ;
13202: LD_ADDR_OWVAR 21
13206: PUSH
13207: LD_INT 3
13209: ST_TO_ADDR
// vc_engine = 1 ;
13210: LD_ADDR_OWVAR 39
13214: PUSH
13215: LD_INT 1
13217: ST_TO_ADDR
// vc_control = 1 ;
13218: LD_ADDR_OWVAR 38
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// vc_weapon = 51 ;
13226: LD_ADDR_OWVAR 40
13230: PUSH
13231: LD_INT 51
13233: ST_TO_ADDR
// vc_chassis = 22 ;
13234: LD_ADDR_OWVAR 37
13238: PUSH
13239: LD_INT 22
13241: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13242: LD_ADDR_EXP 15
13246: PUSH
13247: CALL_OW 45
13251: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13252: LD_ADDR_EXP 16
13256: PUSH
13257: CALL_OW 45
13261: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13262: LD_EXP 15
13266: PPUSH
13267: LD_INT 13
13269: PPUSH
13270: LD_INT 0
13272: PPUSH
13273: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13277: LD_EXP 16
13281: PPUSH
13282: LD_INT 13
13284: PPUSH
13285: LD_INT 0
13287: PPUSH
13288: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13292: LD_EXP 15
13296: PPUSH
13297: LD_INT 2
13299: PPUSH
13300: LD_INT 70
13302: PUSH
13303: LD_INT 50
13305: PUSH
13306: LD_INT 30
13308: PUSH
13309: LD_INT 20
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: PUSH
13318: LD_OWVAR 67
13322: ARRAY
13323: PPUSH
13324: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13328: LD_EXP 16
13332: PPUSH
13333: LD_INT 2
13335: PPUSH
13336: LD_INT 70
13338: PUSH
13339: LD_INT 50
13341: PUSH
13342: LD_INT 30
13344: PUSH
13345: LD_INT 20
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: PUSH
13354: LD_OWVAR 67
13358: ARRAY
13359: PPUSH
13360: CALL_OW 291
// hc_gallery =  ;
13364: LD_ADDR_OWVAR 33
13368: PUSH
13369: LD_STRING 
13371: ST_TO_ADDR
// hc_name =  ;
13372: LD_ADDR_OWVAR 26
13376: PUSH
13377: LD_STRING 
13379: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13380: LD_INT 1
13382: PPUSH
13383: LD_INT 3
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: LD_INT 2
13391: PPUSH
13392: CALL_OW 12
13396: PPUSH
13397: CALL_OW 380
// driver1 = CreateHuman ;
13401: LD_ADDR_EXP 17
13405: PUSH
13406: CALL_OW 44
13410: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13411: LD_EXP 17
13415: PPUSH
13416: LD_EXP 15
13420: PPUSH
13421: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13425: LD_ADDR_OWVAR 26
13429: PUSH
13430: LD_STRING Nikolai Andreyev
13432: ST_TO_ADDR
// driver2 = CreateHuman ;
13433: LD_ADDR_EXP 18
13437: PUSH
13438: CALL_OW 44
13442: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13443: LD_EXP 18
13447: PPUSH
13448: LD_EXP 16
13452: PPUSH
13453: CALL_OW 52
// end ;
13457: LD_VAR 0 1
13461: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13462: LD_INT 0
13464: PPUSH
13465: PPUSH
13466: PPUSH
13467: PPUSH
13468: PPUSH
13469: PPUSH
// uc_side = 3 ;
13470: LD_ADDR_OWVAR 20
13474: PUSH
13475: LD_INT 3
13477: ST_TO_ADDR
// uc_nation = 3 ;
13478: LD_ADDR_OWVAR 21
13482: PUSH
13483: LD_INT 3
13485: ST_TO_ADDR
// for i := 1 to count do
13486: LD_ADDR_VAR 0 4
13490: PUSH
13491: DOUBLE
13492: LD_INT 1
13494: DEC
13495: ST_TO_ADDR
13496: LD_VAR 0 1
13500: PUSH
13501: FOR_TO
13502: IFFALSE 13764
// begin vc_engine = 1 ;
13504: LD_ADDR_OWVAR 39
13508: PUSH
13509: LD_INT 1
13511: ST_TO_ADDR
// vc_control = 1 ;
13512: LD_ADDR_OWVAR 38
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13520: LD_ADDR_OWVAR 40
13524: PUSH
13525: LD_INT 42
13527: ST_TO_ADDR
// if Difficulty = 3 then
13528: LD_OWVAR 67
13532: PUSH
13533: LD_INT 3
13535: EQUAL
13536: IFFALSE 13565
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13538: LD_ADDR_OWVAR 40
13542: PUSH
13543: LD_INT 42
13545: PUSH
13546: LD_INT 43
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 1
13555: PPUSH
13556: LD_INT 2
13558: PPUSH
13559: CALL_OW 12
13563: ARRAY
13564: ST_TO_ADDR
// if Difficulty = 4 then
13565: LD_OWVAR 67
13569: PUSH
13570: LD_INT 4
13572: EQUAL
13573: IFFALSE 13610
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13575: LD_ADDR_OWVAR 40
13579: PUSH
13580: LD_INT 42
13582: PUSH
13583: LD_INT 43
13585: PUSH
13586: LD_INT 43
13588: PUSH
13589: LD_INT 44
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 1
13600: PPUSH
13601: LD_INT 4
13603: PPUSH
13604: CALL_OW 12
13608: ARRAY
13609: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13610: LD_ADDR_OWVAR 37
13614: PUSH
13615: LD_INT 21
13617: PUSH
13618: LD_INT 22
13620: PUSH
13621: LD_INT 22
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: PUSH
13633: LD_OWVAR 67
13637: ARRAY
13638: ST_TO_ADDR
// veh = CreateVehicle ;
13639: LD_ADDR_VAR 0 5
13643: PUSH
13644: CALL_OW 45
13648: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13649: LD_VAR 0 5
13653: PPUSH
13654: LD_VAR 0 2
13658: PPUSH
13659: LD_INT 0
13661: PPUSH
13662: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13666: LD_ADDR_EXP 26
13670: PUSH
13671: LD_EXP 26
13675: PUSH
13676: LD_VAR 0 5
13680: ADD
13681: ST_TO_ADDR
// hc_gallery =  ;
13682: LD_ADDR_OWVAR 33
13686: PUSH
13687: LD_STRING 
13689: ST_TO_ADDR
// hc_name =  ;
13690: LD_ADDR_OWVAR 26
13694: PUSH
13695: LD_STRING 
13697: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13698: LD_INT 0
13700: PPUSH
13701: LD_INT 3
13703: PPUSH
13704: LD_EXP 13
13708: PPUSH
13709: LD_EXP 14
13713: PPUSH
13714: CALL_OW 12
13718: PPUSH
13719: CALL_OW 380
// un = CreateHuman ;
13723: LD_ADDR_VAR 0 6
13727: PUSH
13728: CALL_OW 44
13732: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13733: LD_VAR 0 6
13737: PPUSH
13738: LD_VAR 0 5
13742: PPUSH
13743: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13747: LD_VAR 0 6
13751: PPUSH
13752: LD_INT 14
13754: PPUSH
13755: LD_INT 9
13757: PPUSH
13758: CALL_OW 111
// end ;
13762: GO 13501
13764: POP
13765: POP
// wait ( 0 0$1 ) ;
13766: LD_INT 35
13768: PPUSH
13769: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13773: LD_INT 0
13775: PPUSH
13776: LD_INT 2
13778: PPUSH
13779: LD_EXP 13
13783: PPUSH
13784: LD_EXP 14
13788: PPUSH
13789: CALL_OW 12
13793: PPUSH
13794: CALL_OW 380
// un = CreateHuman ;
13798: LD_ADDR_VAR 0 6
13802: PUSH
13803: CALL_OW 44
13807: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13808: LD_ADDR_VAR 0 4
13812: PUSH
13813: DOUBLE
13814: LD_INT 1
13816: DEC
13817: ST_TO_ADDR
13818: LD_VAR 0 1
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 2
13828: MUL
13829: PLUS
13830: PUSH
13831: FOR_TO
13832: IFFALSE 13924
// begin hc_gallery =  ;
13834: LD_ADDR_OWVAR 33
13838: PUSH
13839: LD_STRING 
13841: ST_TO_ADDR
// hc_name =  ;
13842: LD_ADDR_OWVAR 26
13846: PUSH
13847: LD_STRING 
13849: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13850: LD_INT 1
13852: PPUSH
13853: LD_INT 1
13855: PPUSH
13856: LD_EXP 13
13860: PPUSH
13861: LD_EXP 14
13865: PPUSH
13866: CALL_OW 12
13870: PPUSH
13871: CALL_OW 380
// un = CreateHuman ;
13875: LD_ADDR_VAR 0 6
13879: PUSH
13880: CALL_OW 44
13884: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13885: LD_VAR 0 6
13889: PPUSH
13890: LD_INT 9
13892: PPUSH
13893: LD_INT 13
13895: PPUSH
13896: LD_INT 4
13898: PPUSH
13899: LD_INT 0
13901: PPUSH
13902: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13906: LD_ADDR_EXP 26
13910: PUSH
13911: LD_EXP 26
13915: PUSH
13916: LD_VAR 0 6
13920: ADD
13921: ST_TO_ADDR
// end ;
13922: GO 13831
13924: POP
13925: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13926: LD_ADDR_VAR 0 7
13930: PUSH
13931: LD_INT 26
13933: PPUSH
13934: LD_INT 22
13936: PUSH
13937: LD_INT 3
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 21
13946: PUSH
13947: LD_INT 1
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 26
13956: PUSH
13957: LD_INT 1
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: PPUSH
13969: CALL_OW 70
13973: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13974: LD_VAR 0 7
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: LD_STRING D9-Rus3-1
13985: PPUSH
13986: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13990: LD_VAR 0 7
13994: PUSH
13995: LD_INT 2
13997: ARRAY
13998: PPUSH
13999: LD_STRING D9-Russ-1
14001: PPUSH
14002: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
14006: LD_EXP 26
14010: PPUSH
14011: LD_INT 31
14013: PPUSH
14014: LD_INT 13
14016: PPUSH
14017: CALL_OW 114
// wait ( 0 0$3 ) ;
14021: LD_INT 105
14023: PPUSH
14024: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14028: LD_INT 35
14030: PPUSH
14031: CALL_OW 67
// for i in attackGroup do
14035: LD_ADDR_VAR 0 4
14039: PUSH
14040: LD_EXP 26
14044: PUSH
14045: FOR_IN
14046: IFFALSE 14413
// begin if IsDead ( i ) then
14048: LD_VAR 0 4
14052: PPUSH
14053: CALL_OW 301
14057: IFFALSE 14077
// begin attackGroup := attackGroup diff i ;
14059: LD_ADDR_EXP 26
14063: PUSH
14064: LD_EXP 26
14068: PUSH
14069: LD_VAR 0 4
14073: DIFF
14074: ST_TO_ADDR
// continue ;
14075: GO 14045
// end ; if not HasTask ( i ) and not GetTag ( i ) then
14077: LD_VAR 0 4
14081: PPUSH
14082: CALL_OW 314
14086: NOT
14087: PUSH
14088: LD_VAR 0 4
14092: PPUSH
14093: CALL_OW 110
14097: NOT
14098: AND
14099: IFFALSE 14135
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
14101: LD_VAR 0 4
14105: PPUSH
14106: LD_INT 22
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PPUSH
14116: CALL_OW 69
14120: PPUSH
14121: LD_VAR 0 4
14125: PPUSH
14126: CALL_OW 74
14130: PPUSH
14131: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14135: LD_VAR 0 4
14139: PPUSH
14140: CALL_OW 110
14144: NOT
14145: PUSH
14146: LD_VAR 0 4
14150: PPUSH
14151: CALL_OW 256
14155: PUSH
14156: LD_INT 650
14158: LESS
14159: AND
14160: PUSH
14161: LD_VAR 0 4
14165: PPUSH
14166: CALL_OW 247
14170: PUSH
14171: LD_INT 2
14173: EQUAL
14174: AND
14175: IFFALSE 14204
// begin SetTag ( i , 1 ) ;
14177: LD_VAR 0 4
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14189: LD_VAR 0 4
14193: PPUSH
14194: LD_INT 20
14196: PPUSH
14197: LD_INT 8
14199: PPUSH
14200: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14204: LD_VAR 0 4
14208: PPUSH
14209: CALL_OW 110
14213: PUSH
14214: LD_INT 1
14216: EQUAL
14217: PUSH
14218: LD_VAR 0 4
14222: PPUSH
14223: LD_INT 20
14225: PPUSH
14226: LD_INT 8
14228: PPUSH
14229: CALL_OW 297
14233: PUSH
14234: LD_INT 6
14236: LESS
14237: AND
14238: IFFALSE 14252
// SetTag ( i , 2 ) ;
14240: LD_VAR 0 4
14244: PPUSH
14245: LD_INT 2
14247: PPUSH
14248: CALL_OW 109
// if GetTag ( i ) = 2 then
14252: LD_VAR 0 4
14256: PPUSH
14257: CALL_OW 110
14261: PUSH
14262: LD_INT 2
14264: EQUAL
14265: IFFALSE 14373
// begin if GetLives ( i ) = 1000 then
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 256
14276: PUSH
14277: LD_INT 1000
14279: EQUAL
14280: IFFALSE 14296
// SetTag ( i , 3 ) else
14282: LD_VAR 0 4
14286: PPUSH
14287: LD_INT 3
14289: PPUSH
14290: CALL_OW 109
14294: GO 14373
// if IsDrivenBy ( i ) then
14296: LD_VAR 0 4
14300: PPUSH
14301: CALL_OW 311
14305: IFFALSE 14373
// begin mech := IsDrivenBy ( i ) ;
14307: LD_ADDR_VAR 0 8
14311: PUSH
14312: LD_VAR 0 4
14316: PPUSH
14317: CALL_OW 311
14321: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14322: LD_INT 1
14324: PPUSH
14325: LD_VAR 0 8
14329: PPUSH
14330: CALL_OW 292
14334: NOT
14335: PUSH
14336: LD_VAR 0 8
14340: PPUSH
14341: CALL_OW 256
14345: PUSH
14346: LD_INT 1000
14348: LESS
14349: AND
14350: IFFALSE 14364
// SetLives ( mech , 1000 ) ;
14352: LD_VAR 0 8
14356: PPUSH
14357: LD_INT 1000
14359: PPUSH
14360: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14364: LD_VAR 0 8
14368: PPUSH
14369: CALL 77039 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14373: LD_VAR 0 4
14377: PPUSH
14378: CALL_OW 110
14382: PUSH
14383: LD_INT 3
14385: EQUAL
14386: PUSH
14387: LD_VAR 0 4
14391: PPUSH
14392: CALL_OW 311
14396: AND
14397: IFFALSE 14411
// SetTag ( i , 0 ) ;
14399: LD_VAR 0 4
14403: PPUSH
14404: LD_INT 0
14406: PPUSH
14407: CALL_OW 109
// end ;
14411: GO 14045
14413: POP
14414: POP
// until not attackGroup ;
14415: LD_EXP 26
14419: NOT
14420: IFFALSE 14028
// end ;
14422: LD_VAR 0 3
14426: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14427: LD_EXP 26
14431: PPUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 2
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 72
14446: IFFALSE 14514
14448: GO 14450
14450: DISABLE
14451: LD_INT 0
14453: PPUSH
// begin enable ;
14454: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14455: LD_ADDR_VAR 0 1
14459: PUSH
14460: LD_EXP 26
14464: PPUSH
14465: LD_INT 21
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 72
14479: PUSH
14480: FOR_IN
14481: IFFALSE 14512
// if GetFuel ( i ) < 3 then
14483: LD_VAR 0 1
14487: PPUSH
14488: CALL_OW 261
14492: PUSH
14493: LD_INT 3
14495: LESS
14496: IFFALSE 14510
// SetFuel ( i , 3 ) ;
14498: LD_VAR 0 1
14502: PPUSH
14503: LD_INT 3
14505: PPUSH
14506: CALL_OW 240
14510: GO 14480
14512: POP
14513: POP
// end ; end_of_file
14514: PPOPN 1
14516: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14517: LD_INT 22
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 25
14529: PUSH
14530: LD_INT 2
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 69
14545: IFFALSE 14564
14547: GO 14549
14549: DISABLE
// begin enable ;
14550: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14551: LD_INT 3
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: LD_INT 22
14559: PPUSH
14560: CALL 9329 0 3
// end ;
14564: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14565: LD_INT 22
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 25
14577: PUSH
14578: LD_INT 4
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PPUSH
14589: CALL_OW 69
14593: IFFALSE 14615
14595: GO 14597
14597: DISABLE
// begin enable ;
14598: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14599: LD_INT 3
14601: PPUSH
14602: LD_INT 20
14604: PPUSH
14605: LD_INT 22
14607: PPUSH
14608: LD_INT 23
14610: PPUSH
14611: CALL 9661 0 4
// end ;
14615: END
// every 0 0$1 trigger northBaseDefenders do
14616: LD_EXP 24
14620: IFFALSE 14644
14622: GO 14624
14624: DISABLE
// begin enable ;
14625: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14626: LD_INT 22
14628: PPUSH
14629: LD_INT 1
14631: PPUSH
14632: LD_EXP 24
14636: PPUSH
14637: LD_INT 2
14639: PPUSH
14640: CALL 9933 0 4
// end ;
14644: END
// every 0 0$1 trigger southBaseDefenders do
14645: LD_EXP 25
14649: IFFALSE 14673
14651: GO 14653
14653: DISABLE
// begin enable ;
14654: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14655: LD_INT 23
14657: PPUSH
14658: LD_INT 1
14660: PPUSH
14661: LD_EXP 25
14665: PPUSH
14666: LD_INT 33
14668: PPUSH
14669: CALL 9933 0 4
// end ; end_of_file
14673: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL 32754 0 1
// if unit = JMM then
14683: LD_VAR 0 1
14687: PUSH
14688: LD_EXP 1
14692: EQUAL
14693: IFFALSE 14702
// YouLost ( JMM ) ;
14695: LD_STRING JMM
14697: PPUSH
14698: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 266
14711: PUSH
14712: LD_INT 0
14714: EQUAL
14715: IFFALSE 14724
// YouLost ( DepotDestroyed ) ;
14717: LD_STRING DepotDestroyed
14719: PPUSH
14720: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 255
14733: PUSH
14734: LD_INT 1
14736: EQUAL
14737: PUSH
14738: LD_VAR 0 1
14742: PPUSH
14743: CALL_OW 247
14747: PUSH
14748: LD_INT 1
14750: EQUAL
14751: AND
14752: IFFALSE 14768
// deadsCounter = deadsCounter + 1 ;
14754: LD_ADDR_EXP 31
14758: PUSH
14759: LD_EXP 31
14763: PUSH
14764: LD_INT 1
14766: PLUS
14767: ST_TO_ADDR
// end ;
14768: PPOPN 1
14770: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
14771: LD_VAR 0 1
14775: PUSH
14776: LD_INT 22
14778: PUSH
14779: LD_INT 1
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 1
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 21
14798: PUSH
14799: LD_INT 1
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: PPUSH
14811: CALL_OW 69
14815: IN
14816: PUSH
14817: LD_VAR 0 2
14821: PUSH
14822: LD_INT 1
14824: EQUAL
14825: AND
14826: IFFALSE 14832
// JMMTraitor ;
14828: CALL 8739 0 0
// end ;
14832: PPOPN 3
14834: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 255
14844: PUSH
14845: LD_INT 3
14847: EQUAL
14848: IFFALSE 14926
// begin ComMoveXY ( driver , 6 , 10 ) ;
14850: LD_VAR 0 1
14854: PPUSH
14855: LD_INT 6
14857: PPUSH
14858: LD_INT 10
14860: PPUSH
14861: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14865: LD_INT 35
14867: PPUSH
14868: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14872: LD_VAR 0 1
14876: PPUSH
14877: LD_INT 6
14879: PPUSH
14880: LD_INT 10
14882: PPUSH
14883: CALL_OW 111
// if IsDead ( driver ) then
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 301
14896: IFFALSE 14900
// exit ;
14898: GO 14926
// until IsAt ( driver , 6 , 10 ) ;
14900: LD_VAR 0 1
14904: PPUSH
14905: LD_INT 6
14907: PPUSH
14908: LD_INT 10
14910: PPUSH
14911: CALL_OW 307
14915: IFFALSE 14865
// RemoveUnit ( driver ) ;
14917: LD_VAR 0 1
14921: PPUSH
14922: CALL_OW 64
// end ; end ;
14926: PPOPN 4
14928: END
// on Command ( cmd ) do var i , j , tmp ;
14929: LD_INT 0
14931: PPUSH
14932: PPUSH
14933: PPUSH
// begin SOS_Command ( cmd ) ;
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL 32858 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_INT 22
14950: PUSH
14951: LD_INT 1
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 21
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: PUSH
14977: FOR_IN
14978: IFFALSE 15099
// begin if GetTaskList ( i ) then
14980: LD_VAR 0 2
14984: PPUSH
14985: CALL_OW 437
14989: IFFALSE 15097
// begin for j = 1 to GetTaskList ( i ) do
14991: LD_ADDR_VAR 0 3
14995: PUSH
14996: DOUBLE
14997: LD_INT 1
14999: DEC
15000: ST_TO_ADDR
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL_OW 437
15010: PUSH
15011: FOR_TO
15012: IFFALSE 15095
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
15014: LD_ADDR_VAR 0 4
15018: PUSH
15019: LD_VAR 0 2
15023: PPUSH
15024: CALL_OW 437
15028: PUSH
15029: LD_VAR 0 3
15033: ARRAY
15034: PUSH
15035: LD_INT 4
15037: ARRAY
15038: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
15039: LD_VAR 0 4
15043: PPUSH
15044: CALL_OW 255
15048: PUSH
15049: LD_INT 3
15051: EQUAL
15052: PUSH
15053: LD_VAR 0 4
15057: PPUSH
15058: CALL_OW 247
15062: PUSH
15063: LD_INT 2
15065: EQUAL
15066: AND
15067: PUSH
15068: LD_VAR 0 4
15072: PPUSH
15073: CALL_OW 264
15077: PUSH
15078: LD_INT 51
15080: EQUAL
15081: AND
15082: IFFALSE 15093
// ComStop ( i ) ;
15084: LD_VAR 0 2
15088: PPUSH
15089: CALL_OW 141
// end ;
15093: GO 15011
15095: POP
15096: POP
// end ; end ;
15097: GO 14977
15099: POP
15100: POP
// end ;
15101: PPOPN 4
15103: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
15104: LD_VAR 0 2
15108: PUSH
15109: LD_EXP 8
15113: EQUAL
15114: PUSH
15115: LD_EXP 21
15119: PUSH
15120: LD_INT 4
15122: NONEQUAL
15123: AND
15124: IFFALSE 15276
// begin if IsOk ( Mikhail ) then
15126: LD_EXP 8
15130: PPUSH
15131: CALL_OW 302
15135: IFFALSE 15143
// AskMikhail else
15137: CALL 7425 0 0
15141: GO 15276
// if IsOk ( llab1 ) then
15143: LD_INT 23
15145: PPUSH
15146: CALL_OW 302
15150: IFFALSE 15239
// begin InGameOn ;
15152: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
15156: LD_EXP 8
15160: PPUSH
15161: LD_INT 6
15163: PPUSH
15164: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
15168: LD_INT 23
15170: PPUSH
15171: LD_INT 6
15173: PPUSH
15174: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
15178: LD_EXP 8
15182: PPUSH
15183: LD_INT 23
15185: PPUSH
15186: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15190: LD_INT 35
15192: PPUSH
15193: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15197: LD_EXP 8
15201: PPUSH
15202: CALL_OW 310
15206: PUSH
15207: LD_INT 23
15209: EQUAL
15210: PUSH
15211: LD_EXP 8
15215: PPUSH
15216: CALL_OW 301
15220: OR
15221: IFFALSE 15190
// SetSide ( llab1 , 1 ) ;
15223: LD_INT 23
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 235
// InGameOff ;
15233: CALL_OW 9
// end else
15237: GO 15276
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15239: LD_INT 3
15241: PPUSH
15242: LD_INT 6
15244: PPUSH
15245: LD_INT 2
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15255: LD_EXP 8
15259: PPUSH
15260: LD_INT 6
15262: PPUSH
15263: CALL_OW 235
// ComHold ( Mikhail ) ;
15267: LD_EXP 8
15271: PPUSH
15272: CALL_OW 140
// end ; end ; end ;
15276: PPOPN 2
15278: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15279: LD_VAR 0 1
15283: PPUSH
15284: LD_VAR 0 2
15288: PPUSH
15289: CALL 32874 0 2
// end ;
15293: PPOPN 2
15295: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15296: LD_EXP 8
15300: PPUSH
15301: CALL_OW 257
15305: PUSH
15306: LD_INT 3
15308: NONEQUAL
15309: IFFALSE 15327
15311: GO 15313
15313: DISABLE
// begin enable ;
15314: ENABLE
// SetClass ( Mikhail , 3 ) ;
15315: LD_EXP 8
15319: PPUSH
15320: LD_INT 3
15322: PPUSH
15323: CALL_OW 336
// end ; end_of_file
15327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15328: LD_INT 22
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 21
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 25
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: PUSH
15368: LD_INT 0
15370: EQUAL
15371: PUSH
15372: LD_INT 22
15374: PUSH
15375: LD_INT 4
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 21
15384: PUSH
15385: LD_INT 1
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 25
15394: PUSH
15395: LD_INT 2
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: PPUSH
15407: CALL_OW 69
15411: PUSH
15412: LD_INT 0
15414: EQUAL
15415: AND
15416: PUSH
15417: LD_INT 1
15419: PPUSH
15420: CALL_OW 255
15424: PUSH
15425: LD_INT 3
15427: EQUAL
15428: AND
15429: PUSH
15430: LD_INT 10
15432: PPUSH
15433: CALL_OW 255
15437: PUSH
15438: LD_INT 3
15440: EQUAL
15441: AND
15442: IFFALSE 15454
15444: GO 15446
15446: DISABLE
// YouLost ( Engineer ) ;
15447: LD_STRING Engineer
15449: PPUSH
15450: CALL_OW 104
15454: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15455: LD_INT 1
15457: PPUSH
15458: CALL_OW 255
15462: PUSH
15463: LD_INT 3
15465: EQUAL
15466: PUSH
15467: LD_EXP 27
15471: PUSH
15472: LD_INT 1
15474: EQUAL
15475: AND
15476: IFFALSE 15488
15478: GO 15480
15480: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15481: LD_STRING DepotCaptured
15483: PPUSH
15484: CALL_OW 104
15488: END
// export function PrepareTigers ; var i , un ; begin
15489: LD_INT 0
15491: PPUSH
15492: PPUSH
15493: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15494: LD_ADDR_VAR 0 2
15498: PUSH
15499: DOUBLE
15500: LD_INT 1
15502: DEC
15503: ST_TO_ADDR
15504: LD_INT 2
15506: PUSH
15507: LD_INT 3
15509: PUSH
15510: LD_INT 4
15512: PUSH
15513: LD_INT 5
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: PUSH
15522: LD_OWVAR 67
15526: ARRAY
15527: PUSH
15528: FOR_TO
15529: IFFALSE 15644
// begin uc_side := 0 ;
15531: LD_ADDR_OWVAR 20
15535: PUSH
15536: LD_INT 0
15538: ST_TO_ADDR
// uc_nation := nation_nature ;
15539: LD_ADDR_OWVAR 21
15543: PUSH
15544: LD_INT 0
15546: ST_TO_ADDR
// hc_sex := sex_male ;
15547: LD_ADDR_OWVAR 27
15551: PUSH
15552: LD_INT 1
15554: ST_TO_ADDR
// hc_class := class_tiger ;
15555: LD_ADDR_OWVAR 28
15559: PUSH
15560: LD_INT 14
15562: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15563: LD_ADDR_OWVAR 31
15567: PUSH
15568: LD_EXP 14
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15588: LD_ADDR_OWVAR 35
15592: PUSH
15593: LD_INT 30
15595: PUSH
15596: LD_INT 40
15598: PUSH
15599: LD_INT 45
15601: PUSH
15602: LD_INT 50
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: PUSH
15611: LD_OWVAR 67
15615: ARRAY
15616: ST_TO_ADDR
// un = CreateHuman ;
15617: LD_ADDR_VAR 0 3
15621: PUSH
15622: CALL_OW 44
15626: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15627: LD_VAR 0 3
15631: PPUSH
15632: LD_INT 27
15634: PPUSH
15635: LD_INT 0
15637: PPUSH
15638: CALL_OW 49
// end ;
15642: GO 15528
15644: POP
15645: POP
// end ; end_of_file
15646: LD_VAR 0 1
15650: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15651: LD_INT 1
15653: PPUSH
15654: CALL_OW 255
15658: PUSH
15659: LD_INT 1
15661: EQUAL
15662: PUSH
15663: LD_INT 10
15665: PPUSH
15666: CALL_OW 255
15670: PUSH
15671: LD_INT 1
15673: EQUAL
15674: AND
15675: PUSH
15676: LD_EXP 20
15680: PUSH
15681: LD_INT 1
15683: EQUAL
15684: AND
15685: PUSH
15686: LD_INT 22
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 34
15708: PUSH
15709: LD_INT 51
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 3
15718: PUSH
15719: LD_INT 58
15721: PUSH
15722: EMPTY
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL_OW 69
15739: PUSH
15740: LD_INT 0
15742: EQUAL
15743: AND
15744: IFFALSE 15835
15746: GO 15748
15748: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15749: LD_INT 9450
15751: PUSH
15752: LD_INT 8400
15754: PUSH
15755: LD_INT 6300
15757: PUSH
15758: LD_INT 6300
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: PUSH
15767: LD_OWVAR 67
15771: ARRAY
15772: PPUSH
15773: CALL_OW 67
// if cargoEscape then
15777: LD_EXP 20
15781: IFFALSE 15835
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15783: LD_EXP 9
15787: PPUSH
15788: LD_STRING D6-Pow-1
15790: PPUSH
15791: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15795: LD_EXP 1
15799: PPUSH
15800: LD_STRING D6-JMM-1
15802: PPUSH
15803: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15807: LD_EXP 9
15811: PPUSH
15812: LD_STRING D6-Pow-2
15814: PPUSH
15815: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15819: LD_EXP 1
15823: PPUSH
15824: LD_STRING D6-JMM-2
15826: PPUSH
15827: CALL_OW 88
// FinishMission ;
15831: CALL 16051 0 0
// end ; end ;
15835: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 255
15843: PUSH
15844: LD_INT 1
15846: EQUAL
15847: PUSH
15848: LD_INT 10
15850: PPUSH
15851: CALL_OW 255
15855: PUSH
15856: LD_INT 1
15858: EQUAL
15859: AND
15860: PUSH
15861: LD_EXP 20
15865: PUSH
15866: LD_INT 1
15868: GREATER
15869: AND
15870: IFFALSE 15945
15872: GO 15874
15874: DISABLE
15875: LD_INT 0
15877: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15878: LD_INT 11550
15880: PUSH
15881: LD_INT 10500
15883: PUSH
15884: LD_INT 9450
15886: PUSH
15887: LD_INT 8400
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: PUSH
15896: LD_OWVAR 67
15900: ARRAY
15901: PPUSH
15902: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15906: LD_INT 1
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: LD_INT 3
15914: PUSH
15915: LD_INT 4
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: PUSH
15924: LD_OWVAR 67
15928: ARRAY
15929: PPUSH
15930: LD_INT 13
15932: PPUSH
15933: CALL 13462 0 2
// lastBattle = 1 ;
15937: LD_ADDR_EXP 27
15941: PUSH
15942: LD_INT 1
15944: ST_TO_ADDR
// end ;
15945: PPOPN 1
15947: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15948: LD_EXP 27
15952: PUSH
15953: LD_INT 1
15955: EQUAL
15956: PUSH
15957: LD_INT 26
15959: PPUSH
15960: LD_INT 22
15962: PUSH
15963: LD_INT 3
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 1
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PPUSH
15984: CALL_OW 70
15988: PUSH
15989: LD_INT 0
15991: EQUAL
15992: AND
15993: IFFALSE 16050
15995: GO 15997
15997: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15998: LD_EXP 9
16002: PPUSH
16003: LD_STRING D6-Pow-1
16005: PPUSH
16006: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
16010: LD_EXP 1
16014: PPUSH
16015: LD_STRING D6-JMM-1
16017: PPUSH
16018: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
16022: LD_EXP 9
16026: PPUSH
16027: LD_STRING D6-Pow-2
16029: PPUSH
16030: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
16034: LD_EXP 1
16038: PPUSH
16039: LD_STRING D6-JMM-2
16041: PPUSH
16042: CALL_OW 88
// FinishMission ;
16046: CALL 16051 0 0
// end ;
16050: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
16051: LD_INT 0
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
// if traitor then
16058: LD_EXP 33
16062: IFFALSE 16066
// exit ;
16064: GO 16930
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 2 then
16066: LD_INT 22
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 21
16078: PUSH
16079: LD_INT 1
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 23
16088: PUSH
16089: LD_INT 1
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 50
16098: PUSH
16099: EMPTY
16100: LIST
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: PPUSH
16108: CALL_OW 69
16112: PUSH
16113: LD_INT 2
16115: LESS
16116: IFFALSE 16125
// YouLost ( Troops ) ;
16118: LD_STRING Troops
16120: PPUSH
16121: CALL_OW 104
// if tick <= 18 18$00 then
16125: LD_OWVAR 1
16129: PUSH
16130: LD_INT 37800
16132: LESSEQUAL
16133: IFFALSE 16142
// SetAchievement ( ACH_ASPEED_2 ) ;
16135: LD_STRING ACH_ASPEED_2
16137: PPUSH
16138: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
16142: LD_ADDR_VAR 0 2
16146: PUSH
16147: LD_INT 22
16149: PUSH
16150: LD_INT 1
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 21
16159: PUSH
16160: LD_INT 2
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 24
16169: PUSH
16170: LD_INT 251
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: ST_TO_ADDR
// if tmp then
16187: LD_VAR 0 2
16191: IFFALSE 16205
// SaveVehicles ( tmp , 02_tanks_1 ) ;
16193: LD_VAR 0 2
16197: PPUSH
16198: LD_STRING 02_tanks_1
16200: PPUSH
16201: CALL 10808 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
16205: LD_EXP 21
16209: PUSH
16210: LD_INT 1
16212: EQUAL
16213: PUSH
16214: LD_EXP 8
16218: PPUSH
16219: CALL_OW 300
16223: AND
16224: IFFALSE 16238
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
16226: LD_EXP 21
16230: PPUSH
16231: LD_STRING 02_mikhailStatus_1
16233: PPUSH
16234: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
16238: LD_INT 1
16240: PPUSH
16241: CALL_OW 274
16245: PPUSH
16246: LD_INT 1
16248: PPUSH
16249: CALL_OW 275
16253: PPUSH
16254: LD_STRING 02_resources_4
16256: PPUSH
16257: CALL_OW 39
// m1 := false ;
16261: LD_ADDR_VAR 0 3
16265: PUSH
16266: LD_INT 0
16268: ST_TO_ADDR
// m2 := false ;
16269: LD_ADDR_VAR 0 4
16273: PUSH
16274: LD_INT 0
16276: ST_TO_ADDR
// m3 := false ;
16277: LD_ADDR_VAR 0 5
16281: PUSH
16282: LD_INT 0
16284: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16285: LD_INT 1
16287: PPUSH
16288: CALL_OW 274
16292: PPUSH
16293: LD_INT 1
16295: PPUSH
16296: CALL_OW 275
16300: PUSH
16301: LD_INT 200
16303: GREATEREQUAL
16304: IFFALSE 16326
// begin AddMedal ( Cans , 1 ) ;
16306: LD_STRING Cans
16308: PPUSH
16309: LD_INT 1
16311: PPUSH
16312: CALL_OW 101
// m1 := true ;
16316: LD_ADDR_VAR 0 3
16320: PUSH
16321: LD_INT 1
16323: ST_TO_ADDR
// end else
16324: GO 16337
// begin AddMedal ( Cans , - 1 ) ;
16326: LD_STRING Cans
16328: PPUSH
16329: LD_INT 1
16331: NEG
16332: PPUSH
16333: CALL_OW 101
// end ; if deadsCounter < 2 then
16337: LD_EXP 31
16341: PUSH
16342: LD_INT 2
16344: LESS
16345: IFFALSE 16367
// begin AddMedal ( Deaths , 1 ) ;
16347: LD_STRING Deaths
16349: PPUSH
16350: LD_INT 1
16352: PPUSH
16353: CALL_OW 101
// m2 := true ;
16357: LD_ADDR_VAR 0 4
16361: PUSH
16362: LD_INT 1
16364: ST_TO_ADDR
// end else
16365: GO 16378
// begin AddMedal ( Deaths , - 1 ) ;
16367: LD_STRING Deaths
16369: PPUSH
16370: LD_INT 1
16372: NEG
16373: PPUSH
16374: CALL_OW 101
// end ; if mikhailStatus = 0 then
16378: LD_EXP 21
16382: PUSH
16383: LD_INT 0
16385: EQUAL
16386: IFFALSE 16399
// AddMedal ( Prisoner , - 1 ) ;
16388: LD_STRING Prisoner
16390: PPUSH
16391: LD_INT 1
16393: NEG
16394: PPUSH
16395: CALL_OW 101
// if mikhailStatus = 1 then
16399: LD_EXP 21
16403: PUSH
16404: LD_INT 1
16406: EQUAL
16407: IFFALSE 16427
// begin AddMedal ( Prisoner , 1 ) ;
16409: LD_STRING Prisoner
16411: PPUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 101
// m3 := true ;
16419: LD_ADDR_VAR 0 5
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16427: LD_EXP 21
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: IFFALSE 16455
// begin AddMedal ( Prisoner , 2 ) ;
16437: LD_STRING Prisoner
16439: PPUSH
16440: LD_INT 2
16442: PPUSH
16443: CALL_OW 101
// m3 := true ;
16447: LD_ADDR_VAR 0 5
16451: PUSH
16452: LD_INT 1
16454: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16455: LD_EXP 21
16459: PUSH
16460: LD_INT 3
16462: EQUAL
16463: IFFALSE 16476
// AddMedal ( Prisoner , - 2 ) ;
16465: LD_STRING Prisoner
16467: PPUSH
16468: LD_INT 2
16470: NEG
16471: PPUSH
16472: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16476: LD_OWVAR 67
16480: PUSH
16481: LD_INT 3
16483: GREATEREQUAL
16484: PUSH
16485: LD_VAR 0 3
16489: AND
16490: PUSH
16491: LD_VAR 0 4
16495: AND
16496: PUSH
16497: LD_VAR 0 5
16501: AND
16502: IFFALSE 16514
// SetAchievementEX ( ACH_AMER , 2 ) ;
16504: LD_STRING ACH_AMER
16506: PPUSH
16507: LD_INT 2
16509: PPUSH
16510: CALL_OW 564
// GiveMedals ( MAIN ) ;
16514: LD_STRING MAIN
16516: PPUSH
16517: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16521: LD_INT 22
16523: PUSH
16524: LD_INT 1
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 23
16533: PUSH
16534: LD_INT 1
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: PPUSH
16561: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16565: LD_EXP 1
16569: PPUSH
16570: LD_EXP 34
16574: PUSH
16575: LD_STRING JMM
16577: STR
16578: PPUSH
16579: CALL_OW 38
// if IsOK ( Bobby ) then
16583: LD_EXP 2
16587: PPUSH
16588: CALL_OW 302
16592: IFFALSE 16612
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16594: LD_EXP 2
16598: PPUSH
16599: LD_EXP 34
16603: PUSH
16604: LD_STRING Bobby
16606: STR
16607: PPUSH
16608: CALL_OW 38
// if IsOK ( Cyrus ) then
16612: LD_EXP 3
16616: PPUSH
16617: CALL_OW 302
16621: IFFALSE 16641
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16623: LD_EXP 3
16627: PPUSH
16628: LD_EXP 34
16632: PUSH
16633: LD_STRING Cyrus
16635: STR
16636: PPUSH
16637: CALL_OW 38
// if IsOK ( Lisa ) then
16641: LD_EXP 4
16645: PPUSH
16646: CALL_OW 302
16650: IFFALSE 16677
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
16652: LD_STRING enableBioCharacter(BIO_LISA)
16654: PPUSH
16655: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16659: LD_EXP 4
16663: PPUSH
16664: LD_EXP 34
16668: PUSH
16669: LD_STRING Lisa
16671: STR
16672: PPUSH
16673: CALL_OW 38
// end ; if IsOK ( Khatam ) then
16677: LD_EXP 5
16681: PPUSH
16682: CALL_OW 302
16686: IFFALSE 16713
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
16688: LD_STRING enableBioCharacter(BIO_KHAT)
16690: PPUSH
16691: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16695: LD_EXP 5
16699: PPUSH
16700: LD_EXP 34
16704: PUSH
16705: LD_STRING Khatam
16707: STR
16708: PPUSH
16709: CALL_OW 38
// end ; if IsOK ( Brian ) then
16713: LD_EXP 6
16717: PPUSH
16718: CALL_OW 302
16722: IFFALSE 16742
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16724: LD_EXP 6
16728: PPUSH
16729: LD_EXP 34
16733: PUSH
16734: LD_STRING Brian
16736: STR
16737: PPUSH
16738: CALL_OW 38
// if IsOk ( Jerry ) then
16742: LD_EXP 7
16746: PPUSH
16747: CALL_OW 302
16751: IFFALSE 16771
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16753: LD_EXP 7
16757: PPUSH
16758: LD_EXP 34
16762: PUSH
16763: LD_STRING Jerry
16765: STR
16766: PPUSH
16767: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16771: LD_EXP 21
16775: PUSH
16776: LD_INT 1
16778: EQUAL
16779: PUSH
16780: LD_EXP 8
16784: PPUSH
16785: CALL_OW 255
16789: PUSH
16790: LD_INT 1
16792: EQUAL
16793: AND
16794: PUSH
16795: LD_EXP 8
16799: PPUSH
16800: CALL_OW 302
16804: AND
16805: IFFALSE 16832
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
16807: LD_STRING enableBioCharacter(BIO_MICH)
16809: PPUSH
16810: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16814: LD_EXP 8
16818: PPUSH
16819: LD_EXP 34
16823: PUSH
16824: LD_STRING Mikhail
16826: STR
16827: PPUSH
16828: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16832: LD_INT 50
16834: PUSH
16835: EMPTY
16836: LIST
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_INT 1
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 21
16850: PUSH
16851: LD_INT 1
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 69
16867: PUSH
16868: LD_EXP 1
16872: PUSH
16873: LD_EXP 2
16877: PUSH
16878: LD_EXP 3
16882: PUSH
16883: LD_EXP 4
16887: PUSH
16888: LD_EXP 5
16892: PUSH
16893: LD_EXP 6
16897: PUSH
16898: LD_EXP 7
16902: PUSH
16903: LD_EXP 8
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: DIFF
16918: PPUSH
16919: LD_STRING 02_other_survivors
16921: PPUSH
16922: CALL_OW 38
// YouWin ;
16926: CALL_OW 103
// end ; end_of_file end_of_file
16930: LD_VAR 0 1
16934: RET
// export globalGameSaveCounter ; every 0 0$1 do
16935: GO 16937
16937: DISABLE
// begin enable ;
16938: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16939: LD_STRING updateTimer(
16941: PUSH
16942: LD_OWVAR 1
16946: STR
16947: PUSH
16948: LD_STRING );
16950: STR
16951: PPUSH
16952: CALL_OW 559
// end ;
16956: END
// every 0 0$1 do
16957: GO 16959
16959: DISABLE
// begin globalGameSaveCounter := 0 ;
16960: LD_ADDR_EXP 37
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16968: LD_STRING setGameSaveCounter(0)
16970: PPUSH
16971: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16975: LD_STRING initStreamRollete();
16977: PPUSH
16978: CALL_OW 559
// InitStreamMode ;
16982: CALL 18325 0 0
// DefineStreamItems ( false ) ;
16986: LD_INT 0
16988: PPUSH
16989: CALL 18789 0 1
// end ;
16993: END
// export function SOS_MapStart ( ) ; begin
16994: LD_INT 0
16996: PPUSH
// if streamModeActive then
16997: LD_EXP 38
17001: IFFALSE 17010
// DefineStreamItems ( true ) ;
17003: LD_INT 1
17005: PPUSH
17006: CALL 18789 0 1
// UpdateLuaVariables ( ) ;
17010: CALL 17027 0 0
// UpdateFactoryWaypoints ( ) ;
17014: CALL 31658 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17018: CALL 31915 0 0
// end ;
17022: LD_VAR 0 1
17026: RET
// function UpdateLuaVariables ( ) ; begin
17027: LD_INT 0
17029: PPUSH
// if globalGameSaveCounter then
17030: LD_EXP 37
17034: IFFALSE 17068
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17036: LD_ADDR_EXP 37
17040: PUSH
17041: LD_EXP 37
17045: PPUSH
17046: CALL 76700 0 1
17050: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17051: LD_STRING setGameSaveCounter(
17053: PUSH
17054: LD_EXP 37
17058: STR
17059: PUSH
17060: LD_STRING )
17062: STR
17063: PPUSH
17064: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17068: LD_STRING setGameDifficulty(
17070: PUSH
17071: LD_OWVAR 67
17075: STR
17076: PUSH
17077: LD_STRING )
17079: STR
17080: PPUSH
17081: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
17085: LD_STRING displayDifficulty(
17087: PUSH
17088: LD_OWVAR 67
17092: STR
17093: PUSH
17094: LD_STRING )
17096: STR
17097: PPUSH
17098: CALL_OW 559
// end ;
17102: LD_VAR 0 1
17106: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17107: LD_INT 0
17109: PPUSH
// if p2 = stream_mode then
17110: LD_VAR 0 2
17114: PUSH
17115: LD_INT 100
17117: EQUAL
17118: IFFALSE 18121
// begin if not StreamModeActive then
17120: LD_EXP 38
17124: NOT
17125: IFFALSE 17135
// StreamModeActive := true ;
17127: LD_ADDR_EXP 38
17131: PUSH
17132: LD_INT 1
17134: ST_TO_ADDR
// if p3 = 0 then
17135: LD_VAR 0 3
17139: PUSH
17140: LD_INT 0
17142: EQUAL
17143: IFFALSE 17149
// InitStreamMode ;
17145: CALL 18325 0 0
// if p3 = 1 then
17149: LD_VAR 0 3
17153: PUSH
17154: LD_INT 1
17156: EQUAL
17157: IFFALSE 17167
// sRocket := true ;
17159: LD_ADDR_EXP 43
17163: PUSH
17164: LD_INT 1
17166: ST_TO_ADDR
// if p3 = 2 then
17167: LD_VAR 0 3
17171: PUSH
17172: LD_INT 2
17174: EQUAL
17175: IFFALSE 17185
// sSpeed := true ;
17177: LD_ADDR_EXP 42
17181: PUSH
17182: LD_INT 1
17184: ST_TO_ADDR
// if p3 = 3 then
17185: LD_VAR 0 3
17189: PUSH
17190: LD_INT 3
17192: EQUAL
17193: IFFALSE 17203
// sEngine := true ;
17195: LD_ADDR_EXP 44
17199: PUSH
17200: LD_INT 1
17202: ST_TO_ADDR
// if p3 = 4 then
17203: LD_VAR 0 3
17207: PUSH
17208: LD_INT 4
17210: EQUAL
17211: IFFALSE 17221
// sSpec := true ;
17213: LD_ADDR_EXP 41
17217: PUSH
17218: LD_INT 1
17220: ST_TO_ADDR
// if p3 = 5 then
17221: LD_VAR 0 3
17225: PUSH
17226: LD_INT 5
17228: EQUAL
17229: IFFALSE 17239
// sLevel := true ;
17231: LD_ADDR_EXP 45
17235: PUSH
17236: LD_INT 1
17238: ST_TO_ADDR
// if p3 = 6 then
17239: LD_VAR 0 3
17243: PUSH
17244: LD_INT 6
17246: EQUAL
17247: IFFALSE 17257
// sArmoury := true ;
17249: LD_ADDR_EXP 46
17253: PUSH
17254: LD_INT 1
17256: ST_TO_ADDR
// if p3 = 7 then
17257: LD_VAR 0 3
17261: PUSH
17262: LD_INT 7
17264: EQUAL
17265: IFFALSE 17275
// sRadar := true ;
17267: LD_ADDR_EXP 47
17271: PUSH
17272: LD_INT 1
17274: ST_TO_ADDR
// if p3 = 8 then
17275: LD_VAR 0 3
17279: PUSH
17280: LD_INT 8
17282: EQUAL
17283: IFFALSE 17293
// sBunker := true ;
17285: LD_ADDR_EXP 48
17289: PUSH
17290: LD_INT 1
17292: ST_TO_ADDR
// if p3 = 9 then
17293: LD_VAR 0 3
17297: PUSH
17298: LD_INT 9
17300: EQUAL
17301: IFFALSE 17311
// sHack := true ;
17303: LD_ADDR_EXP 49
17307: PUSH
17308: LD_INT 1
17310: ST_TO_ADDR
// if p3 = 10 then
17311: LD_VAR 0 3
17315: PUSH
17316: LD_INT 10
17318: EQUAL
17319: IFFALSE 17329
// sFire := true ;
17321: LD_ADDR_EXP 50
17325: PUSH
17326: LD_INT 1
17328: ST_TO_ADDR
// if p3 = 11 then
17329: LD_VAR 0 3
17333: PUSH
17334: LD_INT 11
17336: EQUAL
17337: IFFALSE 17347
// sRefresh := true ;
17339: LD_ADDR_EXP 51
17343: PUSH
17344: LD_INT 1
17346: ST_TO_ADDR
// if p3 = 12 then
17347: LD_VAR 0 3
17351: PUSH
17352: LD_INT 12
17354: EQUAL
17355: IFFALSE 17365
// sExp := true ;
17357: LD_ADDR_EXP 52
17361: PUSH
17362: LD_INT 1
17364: ST_TO_ADDR
// if p3 = 13 then
17365: LD_VAR 0 3
17369: PUSH
17370: LD_INT 13
17372: EQUAL
17373: IFFALSE 17383
// sDepot := true ;
17375: LD_ADDR_EXP 53
17379: PUSH
17380: LD_INT 1
17382: ST_TO_ADDR
// if p3 = 14 then
17383: LD_VAR 0 3
17387: PUSH
17388: LD_INT 14
17390: EQUAL
17391: IFFALSE 17401
// sFlag := true ;
17393: LD_ADDR_EXP 54
17397: PUSH
17398: LD_INT 1
17400: ST_TO_ADDR
// if p3 = 15 then
17401: LD_VAR 0 3
17405: PUSH
17406: LD_INT 15
17408: EQUAL
17409: IFFALSE 17419
// sKamikadze := true ;
17411: LD_ADDR_EXP 62
17415: PUSH
17416: LD_INT 1
17418: ST_TO_ADDR
// if p3 = 16 then
17419: LD_VAR 0 3
17423: PUSH
17424: LD_INT 16
17426: EQUAL
17427: IFFALSE 17437
// sTroll := true ;
17429: LD_ADDR_EXP 63
17433: PUSH
17434: LD_INT 1
17436: ST_TO_ADDR
// if p3 = 17 then
17437: LD_VAR 0 3
17441: PUSH
17442: LD_INT 17
17444: EQUAL
17445: IFFALSE 17455
// sSlow := true ;
17447: LD_ADDR_EXP 64
17451: PUSH
17452: LD_INT 1
17454: ST_TO_ADDR
// if p3 = 18 then
17455: LD_VAR 0 3
17459: PUSH
17460: LD_INT 18
17462: EQUAL
17463: IFFALSE 17473
// sLack := true ;
17465: LD_ADDR_EXP 65
17469: PUSH
17470: LD_INT 1
17472: ST_TO_ADDR
// if p3 = 19 then
17473: LD_VAR 0 3
17477: PUSH
17478: LD_INT 19
17480: EQUAL
17481: IFFALSE 17491
// sTank := true ;
17483: LD_ADDR_EXP 67
17487: PUSH
17488: LD_INT 1
17490: ST_TO_ADDR
// if p3 = 20 then
17491: LD_VAR 0 3
17495: PUSH
17496: LD_INT 20
17498: EQUAL
17499: IFFALSE 17509
// sRemote := true ;
17501: LD_ADDR_EXP 68
17505: PUSH
17506: LD_INT 1
17508: ST_TO_ADDR
// if p3 = 21 then
17509: LD_VAR 0 3
17513: PUSH
17514: LD_INT 21
17516: EQUAL
17517: IFFALSE 17527
// sPowell := true ;
17519: LD_ADDR_EXP 69
17523: PUSH
17524: LD_INT 1
17526: ST_TO_ADDR
// if p3 = 22 then
17527: LD_VAR 0 3
17531: PUSH
17532: LD_INT 22
17534: EQUAL
17535: IFFALSE 17545
// sTeleport := true ;
17537: LD_ADDR_EXP 72
17541: PUSH
17542: LD_INT 1
17544: ST_TO_ADDR
// if p3 = 23 then
17545: LD_VAR 0 3
17549: PUSH
17550: LD_INT 23
17552: EQUAL
17553: IFFALSE 17563
// sOilTower := true ;
17555: LD_ADDR_EXP 74
17559: PUSH
17560: LD_INT 1
17562: ST_TO_ADDR
// if p3 = 24 then
17563: LD_VAR 0 3
17567: PUSH
17568: LD_INT 24
17570: EQUAL
17571: IFFALSE 17581
// sShovel := true ;
17573: LD_ADDR_EXP 75
17577: PUSH
17578: LD_INT 1
17580: ST_TO_ADDR
// if p3 = 25 then
17581: LD_VAR 0 3
17585: PUSH
17586: LD_INT 25
17588: EQUAL
17589: IFFALSE 17599
// sSheik := true ;
17591: LD_ADDR_EXP 76
17595: PUSH
17596: LD_INT 1
17598: ST_TO_ADDR
// if p3 = 26 then
17599: LD_VAR 0 3
17603: PUSH
17604: LD_INT 26
17606: EQUAL
17607: IFFALSE 17617
// sEarthquake := true ;
17609: LD_ADDR_EXP 78
17613: PUSH
17614: LD_INT 1
17616: ST_TO_ADDR
// if p3 = 27 then
17617: LD_VAR 0 3
17621: PUSH
17622: LD_INT 27
17624: EQUAL
17625: IFFALSE 17635
// sAI := true ;
17627: LD_ADDR_EXP 79
17631: PUSH
17632: LD_INT 1
17634: ST_TO_ADDR
// if p3 = 28 then
17635: LD_VAR 0 3
17639: PUSH
17640: LD_INT 28
17642: EQUAL
17643: IFFALSE 17653
// sCargo := true ;
17645: LD_ADDR_EXP 82
17649: PUSH
17650: LD_INT 1
17652: ST_TO_ADDR
// if p3 = 29 then
17653: LD_VAR 0 3
17657: PUSH
17658: LD_INT 29
17660: EQUAL
17661: IFFALSE 17671
// sDLaser := true ;
17663: LD_ADDR_EXP 83
17667: PUSH
17668: LD_INT 1
17670: ST_TO_ADDR
// if p3 = 30 then
17671: LD_VAR 0 3
17675: PUSH
17676: LD_INT 30
17678: EQUAL
17679: IFFALSE 17689
// sExchange := true ;
17681: LD_ADDR_EXP 84
17685: PUSH
17686: LD_INT 1
17688: ST_TO_ADDR
// if p3 = 31 then
17689: LD_VAR 0 3
17693: PUSH
17694: LD_INT 31
17696: EQUAL
17697: IFFALSE 17707
// sFac := true ;
17699: LD_ADDR_EXP 85
17703: PUSH
17704: LD_INT 1
17706: ST_TO_ADDR
// if p3 = 32 then
17707: LD_VAR 0 3
17711: PUSH
17712: LD_INT 32
17714: EQUAL
17715: IFFALSE 17725
// sPower := true ;
17717: LD_ADDR_EXP 86
17721: PUSH
17722: LD_INT 1
17724: ST_TO_ADDR
// if p3 = 33 then
17725: LD_VAR 0 3
17729: PUSH
17730: LD_INT 33
17732: EQUAL
17733: IFFALSE 17743
// sRandom := true ;
17735: LD_ADDR_EXP 87
17739: PUSH
17740: LD_INT 1
17742: ST_TO_ADDR
// if p3 = 34 then
17743: LD_VAR 0 3
17747: PUSH
17748: LD_INT 34
17750: EQUAL
17751: IFFALSE 17761
// sShield := true ;
17753: LD_ADDR_EXP 88
17757: PUSH
17758: LD_INT 1
17760: ST_TO_ADDR
// if p3 = 35 then
17761: LD_VAR 0 3
17765: PUSH
17766: LD_INT 35
17768: EQUAL
17769: IFFALSE 17779
// sTime := true ;
17771: LD_ADDR_EXP 89
17775: PUSH
17776: LD_INT 1
17778: ST_TO_ADDR
// if p3 = 36 then
17779: LD_VAR 0 3
17783: PUSH
17784: LD_INT 36
17786: EQUAL
17787: IFFALSE 17797
// sTools := true ;
17789: LD_ADDR_EXP 90
17793: PUSH
17794: LD_INT 1
17796: ST_TO_ADDR
// if p3 = 101 then
17797: LD_VAR 0 3
17801: PUSH
17802: LD_INT 101
17804: EQUAL
17805: IFFALSE 17815
// sSold := true ;
17807: LD_ADDR_EXP 55
17811: PUSH
17812: LD_INT 1
17814: ST_TO_ADDR
// if p3 = 102 then
17815: LD_VAR 0 3
17819: PUSH
17820: LD_INT 102
17822: EQUAL
17823: IFFALSE 17833
// sDiff := true ;
17825: LD_ADDR_EXP 56
17829: PUSH
17830: LD_INT 1
17832: ST_TO_ADDR
// if p3 = 103 then
17833: LD_VAR 0 3
17837: PUSH
17838: LD_INT 103
17840: EQUAL
17841: IFFALSE 17851
// sFog := true ;
17843: LD_ADDR_EXP 59
17847: PUSH
17848: LD_INT 1
17850: ST_TO_ADDR
// if p3 = 104 then
17851: LD_VAR 0 3
17855: PUSH
17856: LD_INT 104
17858: EQUAL
17859: IFFALSE 17869
// sReset := true ;
17861: LD_ADDR_EXP 60
17865: PUSH
17866: LD_INT 1
17868: ST_TO_ADDR
// if p3 = 105 then
17869: LD_VAR 0 3
17873: PUSH
17874: LD_INT 105
17876: EQUAL
17877: IFFALSE 17887
// sSun := true ;
17879: LD_ADDR_EXP 61
17883: PUSH
17884: LD_INT 1
17886: ST_TO_ADDR
// if p3 = 106 then
17887: LD_VAR 0 3
17891: PUSH
17892: LD_INT 106
17894: EQUAL
17895: IFFALSE 17905
// sTiger := true ;
17897: LD_ADDR_EXP 57
17901: PUSH
17902: LD_INT 1
17904: ST_TO_ADDR
// if p3 = 107 then
17905: LD_VAR 0 3
17909: PUSH
17910: LD_INT 107
17912: EQUAL
17913: IFFALSE 17923
// sBomb := true ;
17915: LD_ADDR_EXP 58
17919: PUSH
17920: LD_INT 1
17922: ST_TO_ADDR
// if p3 = 108 then
17923: LD_VAR 0 3
17927: PUSH
17928: LD_INT 108
17930: EQUAL
17931: IFFALSE 17941
// sWound := true ;
17933: LD_ADDR_EXP 66
17937: PUSH
17938: LD_INT 1
17940: ST_TO_ADDR
// if p3 = 109 then
17941: LD_VAR 0 3
17945: PUSH
17946: LD_INT 109
17948: EQUAL
17949: IFFALSE 17959
// sBetray := true ;
17951: LD_ADDR_EXP 70
17955: PUSH
17956: LD_INT 1
17958: ST_TO_ADDR
// if p3 = 110 then
17959: LD_VAR 0 3
17963: PUSH
17964: LD_INT 110
17966: EQUAL
17967: IFFALSE 17977
// sContamin := true ;
17969: LD_ADDR_EXP 71
17973: PUSH
17974: LD_INT 1
17976: ST_TO_ADDR
// if p3 = 111 then
17977: LD_VAR 0 3
17981: PUSH
17982: LD_INT 111
17984: EQUAL
17985: IFFALSE 17995
// sOil := true ;
17987: LD_ADDR_EXP 73
17991: PUSH
17992: LD_INT 1
17994: ST_TO_ADDR
// if p3 = 112 then
17995: LD_VAR 0 3
17999: PUSH
18000: LD_INT 112
18002: EQUAL
18003: IFFALSE 18013
// sStu := true ;
18005: LD_ADDR_EXP 77
18009: PUSH
18010: LD_INT 1
18012: ST_TO_ADDR
// if p3 = 113 then
18013: LD_VAR 0 3
18017: PUSH
18018: LD_INT 113
18020: EQUAL
18021: IFFALSE 18031
// sBazooka := true ;
18023: LD_ADDR_EXP 80
18027: PUSH
18028: LD_INT 1
18030: ST_TO_ADDR
// if p3 = 114 then
18031: LD_VAR 0 3
18035: PUSH
18036: LD_INT 114
18038: EQUAL
18039: IFFALSE 18049
// sMortar := true ;
18041: LD_ADDR_EXP 81
18045: PUSH
18046: LD_INT 1
18048: ST_TO_ADDR
// if p3 = 115 then
18049: LD_VAR 0 3
18053: PUSH
18054: LD_INT 115
18056: EQUAL
18057: IFFALSE 18067
// sRanger := true ;
18059: LD_ADDR_EXP 91
18063: PUSH
18064: LD_INT 1
18066: ST_TO_ADDR
// if p3 = 116 then
18067: LD_VAR 0 3
18071: PUSH
18072: LD_INT 116
18074: EQUAL
18075: IFFALSE 18085
// sComputer := true ;
18077: LD_ADDR_EXP 92
18081: PUSH
18082: LD_INT 1
18084: ST_TO_ADDR
// if p3 = 117 then
18085: LD_VAR 0 3
18089: PUSH
18090: LD_INT 117
18092: EQUAL
18093: IFFALSE 18103
// s30 := true ;
18095: LD_ADDR_EXP 93
18099: PUSH
18100: LD_INT 1
18102: ST_TO_ADDR
// if p3 = 118 then
18103: LD_VAR 0 3
18107: PUSH
18108: LD_INT 118
18110: EQUAL
18111: IFFALSE 18121
// s60 := true ;
18113: LD_ADDR_EXP 94
18117: PUSH
18118: LD_INT 1
18120: ST_TO_ADDR
// end ; if p2 = hack_mode then
18121: LD_VAR 0 2
18125: PUSH
18126: LD_INT 101
18128: EQUAL
18129: IFFALSE 18257
// begin case p3 of 1 :
18131: LD_VAR 0 3
18135: PUSH
18136: LD_INT 1
18138: DOUBLE
18139: EQUAL
18140: IFTRUE 18144
18142: GO 18151
18144: POP
// hHackUnlimitedResources ; 2 :
18145: CALL 30404 0 0
18149: GO 18257
18151: LD_INT 2
18153: DOUBLE
18154: EQUAL
18155: IFTRUE 18159
18157: GO 18166
18159: POP
// hHackSetLevel10 ; 3 :
18160: CALL 30537 0 0
18164: GO 18257
18166: LD_INT 3
18168: DOUBLE
18169: EQUAL
18170: IFTRUE 18174
18172: GO 18181
18174: POP
// hHackSetLevel10YourUnits ; 4 :
18175: CALL 30622 0 0
18179: GO 18257
18181: LD_INT 4
18183: DOUBLE
18184: EQUAL
18185: IFTRUE 18189
18187: GO 18196
18189: POP
// hHackInvincible ; 5 :
18190: CALL 31070 0 0
18194: GO 18257
18196: LD_INT 5
18198: DOUBLE
18199: EQUAL
18200: IFTRUE 18204
18202: GO 18211
18204: POP
// hHackInvisible ; 6 :
18205: CALL 31181 0 0
18209: GO 18257
18211: LD_INT 6
18213: DOUBLE
18214: EQUAL
18215: IFTRUE 18219
18217: GO 18226
18219: POP
// hHackChangeYourSide ; 7 :
18220: CALL 31238 0 0
18224: GO 18257
18226: LD_INT 7
18228: DOUBLE
18229: EQUAL
18230: IFTRUE 18234
18232: GO 18241
18234: POP
// hHackChangeUnitSide ; 8 :
18235: CALL 31280 0 0
18239: GO 18257
18241: LD_INT 8
18243: DOUBLE
18244: EQUAL
18245: IFTRUE 18249
18247: GO 18256
18249: POP
// hHackFog ; end ;
18250: CALL 31381 0 0
18254: GO 18257
18256: POP
// end ; if p2 = game_save_mode then
18257: LD_VAR 0 2
18261: PUSH
18262: LD_INT 102
18264: EQUAL
18265: IFFALSE 18320
// begin if p3 = 1 then
18267: LD_VAR 0 3
18271: PUSH
18272: LD_INT 1
18274: EQUAL
18275: IFFALSE 18287
// globalGameSaveCounter := p4 ;
18277: LD_ADDR_EXP 37
18281: PUSH
18282: LD_VAR 0 4
18286: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18287: LD_VAR 0 3
18291: PUSH
18292: LD_INT 2
18294: EQUAL
18295: PUSH
18296: LD_EXP 37
18300: AND
18301: IFFALSE 18320
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18303: LD_STRING setGameSaveCounter(
18305: PUSH
18306: LD_EXP 37
18310: STR
18311: PUSH
18312: LD_STRING )
18314: STR
18315: PPUSH
18316: CALL_OW 559
// end ; end ;
18320: LD_VAR 0 7
18324: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18325: LD_INT 0
18327: PPUSH
// streamModeActive := false ;
18328: LD_ADDR_EXP 38
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// normalCounter := 36 ;
18336: LD_ADDR_EXP 39
18340: PUSH
18341: LD_INT 36
18343: ST_TO_ADDR
// hardcoreCounter := 18 ;
18344: LD_ADDR_EXP 40
18348: PUSH
18349: LD_INT 18
18351: ST_TO_ADDR
// sRocket := false ;
18352: LD_ADDR_EXP 43
18356: PUSH
18357: LD_INT 0
18359: ST_TO_ADDR
// sSpeed := false ;
18360: LD_ADDR_EXP 42
18364: PUSH
18365: LD_INT 0
18367: ST_TO_ADDR
// sEngine := false ;
18368: LD_ADDR_EXP 44
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// sSpec := false ;
18376: LD_ADDR_EXP 41
18380: PUSH
18381: LD_INT 0
18383: ST_TO_ADDR
// sLevel := false ;
18384: LD_ADDR_EXP 45
18388: PUSH
18389: LD_INT 0
18391: ST_TO_ADDR
// sArmoury := false ;
18392: LD_ADDR_EXP 46
18396: PUSH
18397: LD_INT 0
18399: ST_TO_ADDR
// sRadar := false ;
18400: LD_ADDR_EXP 47
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// sBunker := false ;
18408: LD_ADDR_EXP 48
18412: PUSH
18413: LD_INT 0
18415: ST_TO_ADDR
// sHack := false ;
18416: LD_ADDR_EXP 49
18420: PUSH
18421: LD_INT 0
18423: ST_TO_ADDR
// sFire := false ;
18424: LD_ADDR_EXP 50
18428: PUSH
18429: LD_INT 0
18431: ST_TO_ADDR
// sRefresh := false ;
18432: LD_ADDR_EXP 51
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
// sExp := false ;
18440: LD_ADDR_EXP 52
18444: PUSH
18445: LD_INT 0
18447: ST_TO_ADDR
// sDepot := false ;
18448: LD_ADDR_EXP 53
18452: PUSH
18453: LD_INT 0
18455: ST_TO_ADDR
// sFlag := false ;
18456: LD_ADDR_EXP 54
18460: PUSH
18461: LD_INT 0
18463: ST_TO_ADDR
// sKamikadze := false ;
18464: LD_ADDR_EXP 62
18468: PUSH
18469: LD_INT 0
18471: ST_TO_ADDR
// sTroll := false ;
18472: LD_ADDR_EXP 63
18476: PUSH
18477: LD_INT 0
18479: ST_TO_ADDR
// sSlow := false ;
18480: LD_ADDR_EXP 64
18484: PUSH
18485: LD_INT 0
18487: ST_TO_ADDR
// sLack := false ;
18488: LD_ADDR_EXP 65
18492: PUSH
18493: LD_INT 0
18495: ST_TO_ADDR
// sTank := false ;
18496: LD_ADDR_EXP 67
18500: PUSH
18501: LD_INT 0
18503: ST_TO_ADDR
// sRemote := false ;
18504: LD_ADDR_EXP 68
18508: PUSH
18509: LD_INT 0
18511: ST_TO_ADDR
// sPowell := false ;
18512: LD_ADDR_EXP 69
18516: PUSH
18517: LD_INT 0
18519: ST_TO_ADDR
// sTeleport := false ;
18520: LD_ADDR_EXP 72
18524: PUSH
18525: LD_INT 0
18527: ST_TO_ADDR
// sOilTower := false ;
18528: LD_ADDR_EXP 74
18532: PUSH
18533: LD_INT 0
18535: ST_TO_ADDR
// sShovel := false ;
18536: LD_ADDR_EXP 75
18540: PUSH
18541: LD_INT 0
18543: ST_TO_ADDR
// sSheik := false ;
18544: LD_ADDR_EXP 76
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// sEarthquake := false ;
18552: LD_ADDR_EXP 78
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// sAI := false ;
18560: LD_ADDR_EXP 79
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
// sCargo := false ;
18568: LD_ADDR_EXP 82
18572: PUSH
18573: LD_INT 0
18575: ST_TO_ADDR
// sDLaser := false ;
18576: LD_ADDR_EXP 83
18580: PUSH
18581: LD_INT 0
18583: ST_TO_ADDR
// sExchange := false ;
18584: LD_ADDR_EXP 84
18588: PUSH
18589: LD_INT 0
18591: ST_TO_ADDR
// sFac := false ;
18592: LD_ADDR_EXP 85
18596: PUSH
18597: LD_INT 0
18599: ST_TO_ADDR
// sPower := false ;
18600: LD_ADDR_EXP 86
18604: PUSH
18605: LD_INT 0
18607: ST_TO_ADDR
// sRandom := false ;
18608: LD_ADDR_EXP 87
18612: PUSH
18613: LD_INT 0
18615: ST_TO_ADDR
// sShield := false ;
18616: LD_ADDR_EXP 88
18620: PUSH
18621: LD_INT 0
18623: ST_TO_ADDR
// sTime := false ;
18624: LD_ADDR_EXP 89
18628: PUSH
18629: LD_INT 0
18631: ST_TO_ADDR
// sTools := false ;
18632: LD_ADDR_EXP 90
18636: PUSH
18637: LD_INT 0
18639: ST_TO_ADDR
// sSold := false ;
18640: LD_ADDR_EXP 55
18644: PUSH
18645: LD_INT 0
18647: ST_TO_ADDR
// sDiff := false ;
18648: LD_ADDR_EXP 56
18652: PUSH
18653: LD_INT 0
18655: ST_TO_ADDR
// sFog := false ;
18656: LD_ADDR_EXP 59
18660: PUSH
18661: LD_INT 0
18663: ST_TO_ADDR
// sReset := false ;
18664: LD_ADDR_EXP 60
18668: PUSH
18669: LD_INT 0
18671: ST_TO_ADDR
// sSun := false ;
18672: LD_ADDR_EXP 61
18676: PUSH
18677: LD_INT 0
18679: ST_TO_ADDR
// sTiger := false ;
18680: LD_ADDR_EXP 57
18684: PUSH
18685: LD_INT 0
18687: ST_TO_ADDR
// sBomb := false ;
18688: LD_ADDR_EXP 58
18692: PUSH
18693: LD_INT 0
18695: ST_TO_ADDR
// sWound := false ;
18696: LD_ADDR_EXP 66
18700: PUSH
18701: LD_INT 0
18703: ST_TO_ADDR
// sBetray := false ;
18704: LD_ADDR_EXP 70
18708: PUSH
18709: LD_INT 0
18711: ST_TO_ADDR
// sContamin := false ;
18712: LD_ADDR_EXP 71
18716: PUSH
18717: LD_INT 0
18719: ST_TO_ADDR
// sOil := false ;
18720: LD_ADDR_EXP 73
18724: PUSH
18725: LD_INT 0
18727: ST_TO_ADDR
// sStu := false ;
18728: LD_ADDR_EXP 77
18732: PUSH
18733: LD_INT 0
18735: ST_TO_ADDR
// sBazooka := false ;
18736: LD_ADDR_EXP 80
18740: PUSH
18741: LD_INT 0
18743: ST_TO_ADDR
// sMortar := false ;
18744: LD_ADDR_EXP 81
18748: PUSH
18749: LD_INT 0
18751: ST_TO_ADDR
// sRanger := false ;
18752: LD_ADDR_EXP 91
18756: PUSH
18757: LD_INT 0
18759: ST_TO_ADDR
// sComputer := false ;
18760: LD_ADDR_EXP 92
18764: PUSH
18765: LD_INT 0
18767: ST_TO_ADDR
// s30 := false ;
18768: LD_ADDR_EXP 93
18772: PUSH
18773: LD_INT 0
18775: ST_TO_ADDR
// s60 := false ;
18776: LD_ADDR_EXP 94
18780: PUSH
18781: LD_INT 0
18783: ST_TO_ADDR
// end ;
18784: LD_VAR 0 1
18788: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18789: LD_INT 0
18791: PPUSH
18792: PPUSH
18793: PPUSH
18794: PPUSH
18795: PPUSH
18796: PPUSH
18797: PPUSH
// result := [ ] ;
18798: LD_ADDR_VAR 0 2
18802: PUSH
18803: EMPTY
18804: ST_TO_ADDR
// if campaign_id = 1 then
18805: LD_OWVAR 69
18809: PUSH
18810: LD_INT 1
18812: EQUAL
18813: IFFALSE 21979
// begin case mission_number of 1 :
18815: LD_OWVAR 70
18819: PUSH
18820: LD_INT 1
18822: DOUBLE
18823: EQUAL
18824: IFTRUE 18828
18826: GO 18904
18828: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18829: LD_ADDR_VAR 0 2
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: LD_INT 4
18839: PUSH
18840: LD_INT 11
18842: PUSH
18843: LD_INT 12
18845: PUSH
18846: LD_INT 15
18848: PUSH
18849: LD_INT 16
18851: PUSH
18852: LD_INT 22
18854: PUSH
18855: LD_INT 23
18857: PUSH
18858: LD_INT 26
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 101
18874: PUSH
18875: LD_INT 102
18877: PUSH
18878: LD_INT 106
18880: PUSH
18881: LD_INT 116
18883: PUSH
18884: LD_INT 117
18886: PUSH
18887: LD_INT 118
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: ST_TO_ADDR
18902: GO 21977
18904: LD_INT 2
18906: DOUBLE
18907: EQUAL
18908: IFTRUE 18912
18910: GO 18996
18912: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18913: LD_ADDR_VAR 0 2
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: LD_INT 4
18923: PUSH
18924: LD_INT 11
18926: PUSH
18927: LD_INT 12
18929: PUSH
18930: LD_INT 15
18932: PUSH
18933: LD_INT 16
18935: PUSH
18936: LD_INT 22
18938: PUSH
18939: LD_INT 23
18941: PUSH
18942: LD_INT 26
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 101
18958: PUSH
18959: LD_INT 102
18961: PUSH
18962: LD_INT 105
18964: PUSH
18965: LD_INT 106
18967: PUSH
18968: LD_INT 108
18970: PUSH
18971: LD_INT 116
18973: PUSH
18974: LD_INT 117
18976: PUSH
18977: LD_INT 118
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: ST_TO_ADDR
18994: GO 21977
18996: LD_INT 3
18998: DOUBLE
18999: EQUAL
19000: IFTRUE 19004
19002: GO 19092
19004: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19005: LD_ADDR_VAR 0 2
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: LD_INT 4
19015: PUSH
19016: LD_INT 5
19018: PUSH
19019: LD_INT 11
19021: PUSH
19022: LD_INT 12
19024: PUSH
19025: LD_INT 15
19027: PUSH
19028: LD_INT 16
19030: PUSH
19031: LD_INT 22
19033: PUSH
19034: LD_INT 26
19036: PUSH
19037: LD_INT 36
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 101
19054: PUSH
19055: LD_INT 102
19057: PUSH
19058: LD_INT 105
19060: PUSH
19061: LD_INT 106
19063: PUSH
19064: LD_INT 108
19066: PUSH
19067: LD_INT 116
19069: PUSH
19070: LD_INT 117
19072: PUSH
19073: LD_INT 118
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: ST_TO_ADDR
19090: GO 21977
19092: LD_INT 4
19094: DOUBLE
19095: EQUAL
19096: IFTRUE 19100
19098: GO 19196
19100: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19101: LD_ADDR_VAR 0 2
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 4
19111: PUSH
19112: LD_INT 5
19114: PUSH
19115: LD_INT 8
19117: PUSH
19118: LD_INT 11
19120: PUSH
19121: LD_INT 12
19123: PUSH
19124: LD_INT 15
19126: PUSH
19127: LD_INT 16
19129: PUSH
19130: LD_INT 22
19132: PUSH
19133: LD_INT 23
19135: PUSH
19136: LD_INT 26
19138: PUSH
19139: LD_INT 36
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 101
19158: PUSH
19159: LD_INT 102
19161: PUSH
19162: LD_INT 105
19164: PUSH
19165: LD_INT 106
19167: PUSH
19168: LD_INT 108
19170: PUSH
19171: LD_INT 116
19173: PUSH
19174: LD_INT 117
19176: PUSH
19177: LD_INT 118
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: ST_TO_ADDR
19194: GO 21977
19196: LD_INT 5
19198: DOUBLE
19199: EQUAL
19200: IFTRUE 19204
19202: GO 19316
19204: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19205: LD_ADDR_VAR 0 2
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: LD_INT 4
19215: PUSH
19216: LD_INT 5
19218: PUSH
19219: LD_INT 6
19221: PUSH
19222: LD_INT 8
19224: PUSH
19225: LD_INT 11
19227: PUSH
19228: LD_INT 12
19230: PUSH
19231: LD_INT 15
19233: PUSH
19234: LD_INT 16
19236: PUSH
19237: LD_INT 22
19239: PUSH
19240: LD_INT 23
19242: PUSH
19243: LD_INT 25
19245: PUSH
19246: LD_INT 26
19248: PUSH
19249: LD_INT 36
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 101
19270: PUSH
19271: LD_INT 102
19273: PUSH
19274: LD_INT 105
19276: PUSH
19277: LD_INT 106
19279: PUSH
19280: LD_INT 108
19282: PUSH
19283: LD_INT 109
19285: PUSH
19286: LD_INT 112
19288: PUSH
19289: LD_INT 116
19291: PUSH
19292: LD_INT 117
19294: PUSH
19295: LD_INT 118
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: ST_TO_ADDR
19314: GO 21977
19316: LD_INT 6
19318: DOUBLE
19319: EQUAL
19320: IFTRUE 19324
19322: GO 19456
19324: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19325: LD_ADDR_VAR 0 2
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: LD_INT 4
19335: PUSH
19336: LD_INT 5
19338: PUSH
19339: LD_INT 6
19341: PUSH
19342: LD_INT 8
19344: PUSH
19345: LD_INT 11
19347: PUSH
19348: LD_INT 12
19350: PUSH
19351: LD_INT 15
19353: PUSH
19354: LD_INT 16
19356: PUSH
19357: LD_INT 20
19359: PUSH
19360: LD_INT 21
19362: PUSH
19363: LD_INT 22
19365: PUSH
19366: LD_INT 23
19368: PUSH
19369: LD_INT 25
19371: PUSH
19372: LD_INT 26
19374: PUSH
19375: LD_INT 30
19377: PUSH
19378: LD_INT 31
19380: PUSH
19381: LD_INT 32
19383: PUSH
19384: LD_INT 36
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 101
19410: PUSH
19411: LD_INT 102
19413: PUSH
19414: LD_INT 105
19416: PUSH
19417: LD_INT 106
19419: PUSH
19420: LD_INT 108
19422: PUSH
19423: LD_INT 109
19425: PUSH
19426: LD_INT 112
19428: PUSH
19429: LD_INT 116
19431: PUSH
19432: LD_INT 117
19434: PUSH
19435: LD_INT 118
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
19454: GO 21977
19456: LD_INT 7
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19576
19464: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19465: LD_ADDR_VAR 0 2
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 4
19475: PUSH
19476: LD_INT 5
19478: PUSH
19479: LD_INT 7
19481: PUSH
19482: LD_INT 11
19484: PUSH
19485: LD_INT 12
19487: PUSH
19488: LD_INT 15
19490: PUSH
19491: LD_INT 16
19493: PUSH
19494: LD_INT 20
19496: PUSH
19497: LD_INT 21
19499: PUSH
19500: LD_INT 22
19502: PUSH
19503: LD_INT 23
19505: PUSH
19506: LD_INT 25
19508: PUSH
19509: LD_INT 26
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 101
19530: PUSH
19531: LD_INT 102
19533: PUSH
19534: LD_INT 103
19536: PUSH
19537: LD_INT 105
19539: PUSH
19540: LD_INT 106
19542: PUSH
19543: LD_INT 108
19545: PUSH
19546: LD_INT 112
19548: PUSH
19549: LD_INT 116
19551: PUSH
19552: LD_INT 117
19554: PUSH
19555: LD_INT 118
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: ST_TO_ADDR
19574: GO 21977
19576: LD_INT 8
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19724
19584: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19585: LD_ADDR_VAR 0 2
19589: PUSH
19590: LD_INT 2
19592: PUSH
19593: LD_INT 4
19595: PUSH
19596: LD_INT 5
19598: PUSH
19599: LD_INT 6
19601: PUSH
19602: LD_INT 7
19604: PUSH
19605: LD_INT 8
19607: PUSH
19608: LD_INT 11
19610: PUSH
19611: LD_INT 12
19613: PUSH
19614: LD_INT 15
19616: PUSH
19617: LD_INT 16
19619: PUSH
19620: LD_INT 20
19622: PUSH
19623: LD_INT 21
19625: PUSH
19626: LD_INT 22
19628: PUSH
19629: LD_INT 23
19631: PUSH
19632: LD_INT 25
19634: PUSH
19635: LD_INT 26
19637: PUSH
19638: LD_INT 30
19640: PUSH
19641: LD_INT 31
19643: PUSH
19644: LD_INT 32
19646: PUSH
19647: LD_INT 36
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 101
19674: PUSH
19675: LD_INT 102
19677: PUSH
19678: LD_INT 103
19680: PUSH
19681: LD_INT 105
19683: PUSH
19684: LD_INT 106
19686: PUSH
19687: LD_INT 108
19689: PUSH
19690: LD_INT 109
19692: PUSH
19693: LD_INT 112
19695: PUSH
19696: LD_INT 116
19698: PUSH
19699: LD_INT 117
19701: PUSH
19702: LD_INT 118
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: ST_TO_ADDR
19722: GO 21977
19724: LD_INT 9
19726: DOUBLE
19727: EQUAL
19728: IFTRUE 19732
19730: GO 19880
19732: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19733: LD_ADDR_VAR 0 2
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: LD_INT 4
19743: PUSH
19744: LD_INT 5
19746: PUSH
19747: LD_INT 6
19749: PUSH
19750: LD_INT 7
19752: PUSH
19753: LD_INT 8
19755: PUSH
19756: LD_INT 11
19758: PUSH
19759: LD_INT 12
19761: PUSH
19762: LD_INT 15
19764: PUSH
19765: LD_INT 16
19767: PUSH
19768: LD_INT 20
19770: PUSH
19771: LD_INT 21
19773: PUSH
19774: LD_INT 22
19776: PUSH
19777: LD_INT 23
19779: PUSH
19780: LD_INT 25
19782: PUSH
19783: LD_INT 26
19785: PUSH
19786: LD_INT 28
19788: PUSH
19789: LD_INT 30
19791: PUSH
19792: LD_INT 31
19794: PUSH
19795: LD_INT 32
19797: PUSH
19798: LD_INT 36
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 101
19826: PUSH
19827: LD_INT 102
19829: PUSH
19830: LD_INT 103
19832: PUSH
19833: LD_INT 105
19835: PUSH
19836: LD_INT 106
19838: PUSH
19839: LD_INT 108
19841: PUSH
19842: LD_INT 109
19844: PUSH
19845: LD_INT 112
19847: PUSH
19848: LD_INT 114
19850: PUSH
19851: LD_INT 116
19853: PUSH
19854: LD_INT 117
19856: PUSH
19857: LD_INT 118
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: ST_TO_ADDR
19878: GO 21977
19880: LD_INT 10
19882: DOUBLE
19883: EQUAL
19884: IFTRUE 19888
19886: GO 20084
19888: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19889: LD_ADDR_VAR 0 2
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: LD_INT 4
19899: PUSH
19900: LD_INT 5
19902: PUSH
19903: LD_INT 6
19905: PUSH
19906: LD_INT 7
19908: PUSH
19909: LD_INT 8
19911: PUSH
19912: LD_INT 9
19914: PUSH
19915: LD_INT 10
19917: PUSH
19918: LD_INT 11
19920: PUSH
19921: LD_INT 12
19923: PUSH
19924: LD_INT 13
19926: PUSH
19927: LD_INT 14
19929: PUSH
19930: LD_INT 15
19932: PUSH
19933: LD_INT 16
19935: PUSH
19936: LD_INT 17
19938: PUSH
19939: LD_INT 18
19941: PUSH
19942: LD_INT 19
19944: PUSH
19945: LD_INT 20
19947: PUSH
19948: LD_INT 21
19950: PUSH
19951: LD_INT 22
19953: PUSH
19954: LD_INT 23
19956: PUSH
19957: LD_INT 24
19959: PUSH
19960: LD_INT 25
19962: PUSH
19963: LD_INT 26
19965: PUSH
19966: LD_INT 28
19968: PUSH
19969: LD_INT 30
19971: PUSH
19972: LD_INT 31
19974: PUSH
19975: LD_INT 32
19977: PUSH
19978: LD_INT 36
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 101
20014: PUSH
20015: LD_INT 102
20017: PUSH
20018: LD_INT 103
20020: PUSH
20021: LD_INT 104
20023: PUSH
20024: LD_INT 105
20026: PUSH
20027: LD_INT 106
20029: PUSH
20030: LD_INT 107
20032: PUSH
20033: LD_INT 108
20035: PUSH
20036: LD_INT 109
20038: PUSH
20039: LD_INT 110
20041: PUSH
20042: LD_INT 111
20044: PUSH
20045: LD_INT 112
20047: PUSH
20048: LD_INT 114
20050: PUSH
20051: LD_INT 116
20053: PUSH
20054: LD_INT 117
20056: PUSH
20057: LD_INT 118
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: ST_TO_ADDR
20082: GO 21977
20084: LD_INT 11
20086: DOUBLE
20087: EQUAL
20088: IFTRUE 20092
20090: GO 20296
20092: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20093: LD_ADDR_VAR 0 2
20097: PUSH
20098: LD_INT 2
20100: PUSH
20101: LD_INT 3
20103: PUSH
20104: LD_INT 4
20106: PUSH
20107: LD_INT 5
20109: PUSH
20110: LD_INT 6
20112: PUSH
20113: LD_INT 7
20115: PUSH
20116: LD_INT 8
20118: PUSH
20119: LD_INT 9
20121: PUSH
20122: LD_INT 10
20124: PUSH
20125: LD_INT 11
20127: PUSH
20128: LD_INT 12
20130: PUSH
20131: LD_INT 13
20133: PUSH
20134: LD_INT 14
20136: PUSH
20137: LD_INT 15
20139: PUSH
20140: LD_INT 16
20142: PUSH
20143: LD_INT 17
20145: PUSH
20146: LD_INT 18
20148: PUSH
20149: LD_INT 19
20151: PUSH
20152: LD_INT 20
20154: PUSH
20155: LD_INT 21
20157: PUSH
20158: LD_INT 22
20160: PUSH
20161: LD_INT 23
20163: PUSH
20164: LD_INT 24
20166: PUSH
20167: LD_INT 25
20169: PUSH
20170: LD_INT 26
20172: PUSH
20173: LD_INT 28
20175: PUSH
20176: LD_INT 30
20178: PUSH
20179: LD_INT 31
20181: PUSH
20182: LD_INT 32
20184: PUSH
20185: LD_INT 34
20187: PUSH
20188: LD_INT 36
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 101
20226: PUSH
20227: LD_INT 102
20229: PUSH
20230: LD_INT 103
20232: PUSH
20233: LD_INT 104
20235: PUSH
20236: LD_INT 105
20238: PUSH
20239: LD_INT 106
20241: PUSH
20242: LD_INT 107
20244: PUSH
20245: LD_INT 108
20247: PUSH
20248: LD_INT 109
20250: PUSH
20251: LD_INT 110
20253: PUSH
20254: LD_INT 111
20256: PUSH
20257: LD_INT 112
20259: PUSH
20260: LD_INT 114
20262: PUSH
20263: LD_INT 116
20265: PUSH
20266: LD_INT 117
20268: PUSH
20269: LD_INT 118
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: ST_TO_ADDR
20294: GO 21977
20296: LD_INT 12
20298: DOUBLE
20299: EQUAL
20300: IFTRUE 20304
20302: GO 20524
20304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20305: LD_ADDR_VAR 0 2
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: LD_INT 3
20318: PUSH
20319: LD_INT 4
20321: PUSH
20322: LD_INT 5
20324: PUSH
20325: LD_INT 6
20327: PUSH
20328: LD_INT 7
20330: PUSH
20331: LD_INT 8
20333: PUSH
20334: LD_INT 9
20336: PUSH
20337: LD_INT 10
20339: PUSH
20340: LD_INT 11
20342: PUSH
20343: LD_INT 12
20345: PUSH
20346: LD_INT 13
20348: PUSH
20349: LD_INT 14
20351: PUSH
20352: LD_INT 15
20354: PUSH
20355: LD_INT 16
20357: PUSH
20358: LD_INT 17
20360: PUSH
20361: LD_INT 18
20363: PUSH
20364: LD_INT 19
20366: PUSH
20367: LD_INT 20
20369: PUSH
20370: LD_INT 21
20372: PUSH
20373: LD_INT 22
20375: PUSH
20376: LD_INT 23
20378: PUSH
20379: LD_INT 24
20381: PUSH
20382: LD_INT 25
20384: PUSH
20385: LD_INT 26
20387: PUSH
20388: LD_INT 27
20390: PUSH
20391: LD_INT 28
20393: PUSH
20394: LD_INT 30
20396: PUSH
20397: LD_INT 31
20399: PUSH
20400: LD_INT 32
20402: PUSH
20403: LD_INT 33
20405: PUSH
20406: LD_INT 34
20408: PUSH
20409: LD_INT 36
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 101
20450: PUSH
20451: LD_INT 102
20453: PUSH
20454: LD_INT 103
20456: PUSH
20457: LD_INT 104
20459: PUSH
20460: LD_INT 105
20462: PUSH
20463: LD_INT 106
20465: PUSH
20466: LD_INT 107
20468: PUSH
20469: LD_INT 108
20471: PUSH
20472: LD_INT 109
20474: PUSH
20475: LD_INT 110
20477: PUSH
20478: LD_INT 111
20480: PUSH
20481: LD_INT 112
20483: PUSH
20484: LD_INT 113
20486: PUSH
20487: LD_INT 114
20489: PUSH
20490: LD_INT 116
20492: PUSH
20493: LD_INT 117
20495: PUSH
20496: LD_INT 118
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: ST_TO_ADDR
20522: GO 21977
20524: LD_INT 13
20526: DOUBLE
20527: EQUAL
20528: IFTRUE 20532
20530: GO 20740
20532: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20533: LD_ADDR_VAR 0 2
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: LD_INT 2
20543: PUSH
20544: LD_INT 3
20546: PUSH
20547: LD_INT 4
20549: PUSH
20550: LD_INT 5
20552: PUSH
20553: LD_INT 8
20555: PUSH
20556: LD_INT 9
20558: PUSH
20559: LD_INT 10
20561: PUSH
20562: LD_INT 11
20564: PUSH
20565: LD_INT 12
20567: PUSH
20568: LD_INT 14
20570: PUSH
20571: LD_INT 15
20573: PUSH
20574: LD_INT 16
20576: PUSH
20577: LD_INT 17
20579: PUSH
20580: LD_INT 18
20582: PUSH
20583: LD_INT 19
20585: PUSH
20586: LD_INT 20
20588: PUSH
20589: LD_INT 21
20591: PUSH
20592: LD_INT 22
20594: PUSH
20595: LD_INT 23
20597: PUSH
20598: LD_INT 24
20600: PUSH
20601: LD_INT 25
20603: PUSH
20604: LD_INT 26
20606: PUSH
20607: LD_INT 27
20609: PUSH
20610: LD_INT 28
20612: PUSH
20613: LD_INT 30
20615: PUSH
20616: LD_INT 31
20618: PUSH
20619: LD_INT 32
20621: PUSH
20622: LD_INT 33
20624: PUSH
20625: LD_INT 34
20627: PUSH
20628: LD_INT 36
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 101
20666: PUSH
20667: LD_INT 102
20669: PUSH
20670: LD_INT 103
20672: PUSH
20673: LD_INT 104
20675: PUSH
20676: LD_INT 105
20678: PUSH
20679: LD_INT 106
20681: PUSH
20682: LD_INT 107
20684: PUSH
20685: LD_INT 108
20687: PUSH
20688: LD_INT 109
20690: PUSH
20691: LD_INT 110
20693: PUSH
20694: LD_INT 111
20696: PUSH
20697: LD_INT 112
20699: PUSH
20700: LD_INT 113
20702: PUSH
20703: LD_INT 114
20705: PUSH
20706: LD_INT 116
20708: PUSH
20709: LD_INT 117
20711: PUSH
20712: LD_INT 118
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: ST_TO_ADDR
20738: GO 21977
20740: LD_INT 14
20742: DOUBLE
20743: EQUAL
20744: IFTRUE 20748
20746: GO 20972
20748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20749: LD_ADDR_VAR 0 2
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: LD_INT 3
20762: PUSH
20763: LD_INT 4
20765: PUSH
20766: LD_INT 5
20768: PUSH
20769: LD_INT 6
20771: PUSH
20772: LD_INT 7
20774: PUSH
20775: LD_INT 8
20777: PUSH
20778: LD_INT 9
20780: PUSH
20781: LD_INT 10
20783: PUSH
20784: LD_INT 11
20786: PUSH
20787: LD_INT 12
20789: PUSH
20790: LD_INT 13
20792: PUSH
20793: LD_INT 14
20795: PUSH
20796: LD_INT 15
20798: PUSH
20799: LD_INT 16
20801: PUSH
20802: LD_INT 17
20804: PUSH
20805: LD_INT 18
20807: PUSH
20808: LD_INT 19
20810: PUSH
20811: LD_INT 20
20813: PUSH
20814: LD_INT 21
20816: PUSH
20817: LD_INT 22
20819: PUSH
20820: LD_INT 23
20822: PUSH
20823: LD_INT 24
20825: PUSH
20826: LD_INT 25
20828: PUSH
20829: LD_INT 26
20831: PUSH
20832: LD_INT 27
20834: PUSH
20835: LD_INT 28
20837: PUSH
20838: LD_INT 29
20840: PUSH
20841: LD_INT 30
20843: PUSH
20844: LD_INT 31
20846: PUSH
20847: LD_INT 32
20849: PUSH
20850: LD_INT 33
20852: PUSH
20853: LD_INT 34
20855: PUSH
20856: LD_INT 36
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 101
20898: PUSH
20899: LD_INT 102
20901: PUSH
20902: LD_INT 103
20904: PUSH
20905: LD_INT 104
20907: PUSH
20908: LD_INT 105
20910: PUSH
20911: LD_INT 106
20913: PUSH
20914: LD_INT 107
20916: PUSH
20917: LD_INT 108
20919: PUSH
20920: LD_INT 109
20922: PUSH
20923: LD_INT 110
20925: PUSH
20926: LD_INT 111
20928: PUSH
20929: LD_INT 112
20931: PUSH
20932: LD_INT 113
20934: PUSH
20935: LD_INT 114
20937: PUSH
20938: LD_INT 116
20940: PUSH
20941: LD_INT 117
20943: PUSH
20944: LD_INT 118
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: ST_TO_ADDR
20970: GO 21977
20972: LD_INT 15
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 21204
20980: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20981: LD_ADDR_VAR 0 2
20985: PUSH
20986: LD_INT 1
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: LD_INT 3
20994: PUSH
20995: LD_INT 4
20997: PUSH
20998: LD_INT 5
21000: PUSH
21001: LD_INT 6
21003: PUSH
21004: LD_INT 7
21006: PUSH
21007: LD_INT 8
21009: PUSH
21010: LD_INT 9
21012: PUSH
21013: LD_INT 10
21015: PUSH
21016: LD_INT 11
21018: PUSH
21019: LD_INT 12
21021: PUSH
21022: LD_INT 13
21024: PUSH
21025: LD_INT 14
21027: PUSH
21028: LD_INT 15
21030: PUSH
21031: LD_INT 16
21033: PUSH
21034: LD_INT 17
21036: PUSH
21037: LD_INT 18
21039: PUSH
21040: LD_INT 19
21042: PUSH
21043: LD_INT 20
21045: PUSH
21046: LD_INT 21
21048: PUSH
21049: LD_INT 22
21051: PUSH
21052: LD_INT 23
21054: PUSH
21055: LD_INT 24
21057: PUSH
21058: LD_INT 25
21060: PUSH
21061: LD_INT 26
21063: PUSH
21064: LD_INT 27
21066: PUSH
21067: LD_INT 28
21069: PUSH
21070: LD_INT 29
21072: PUSH
21073: LD_INT 30
21075: PUSH
21076: LD_INT 31
21078: PUSH
21079: LD_INT 32
21081: PUSH
21082: LD_INT 33
21084: PUSH
21085: LD_INT 34
21087: PUSH
21088: LD_INT 36
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 101
21130: PUSH
21131: LD_INT 102
21133: PUSH
21134: LD_INT 103
21136: PUSH
21137: LD_INT 104
21139: PUSH
21140: LD_INT 105
21142: PUSH
21143: LD_INT 106
21145: PUSH
21146: LD_INT 107
21148: PUSH
21149: LD_INT 108
21151: PUSH
21152: LD_INT 109
21154: PUSH
21155: LD_INT 110
21157: PUSH
21158: LD_INT 111
21160: PUSH
21161: LD_INT 112
21163: PUSH
21164: LD_INT 113
21166: PUSH
21167: LD_INT 114
21169: PUSH
21170: LD_INT 116
21172: PUSH
21173: LD_INT 117
21175: PUSH
21176: LD_INT 118
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: ST_TO_ADDR
21202: GO 21977
21204: LD_INT 16
21206: DOUBLE
21207: EQUAL
21208: IFTRUE 21212
21210: GO 21348
21212: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21213: LD_ADDR_VAR 0 2
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: LD_INT 4
21223: PUSH
21224: LD_INT 5
21226: PUSH
21227: LD_INT 7
21229: PUSH
21230: LD_INT 11
21232: PUSH
21233: LD_INT 12
21235: PUSH
21236: LD_INT 15
21238: PUSH
21239: LD_INT 16
21241: PUSH
21242: LD_INT 20
21244: PUSH
21245: LD_INT 21
21247: PUSH
21248: LD_INT 22
21250: PUSH
21251: LD_INT 23
21253: PUSH
21254: LD_INT 25
21256: PUSH
21257: LD_INT 26
21259: PUSH
21260: LD_INT 30
21262: PUSH
21263: LD_INT 31
21265: PUSH
21266: LD_INT 32
21268: PUSH
21269: LD_INT 33
21271: PUSH
21272: LD_INT 34
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 101
21298: PUSH
21299: LD_INT 102
21301: PUSH
21302: LD_INT 103
21304: PUSH
21305: LD_INT 106
21307: PUSH
21308: LD_INT 108
21310: PUSH
21311: LD_INT 112
21313: PUSH
21314: LD_INT 113
21316: PUSH
21317: LD_INT 114
21319: PUSH
21320: LD_INT 116
21322: PUSH
21323: LD_INT 117
21325: PUSH
21326: LD_INT 118
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: ST_TO_ADDR
21346: GO 21977
21348: LD_INT 17
21350: DOUBLE
21351: EQUAL
21352: IFTRUE 21356
21354: GO 21580
21356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21357: LD_ADDR_VAR 0 2
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: LD_INT 3
21370: PUSH
21371: LD_INT 4
21373: PUSH
21374: LD_INT 5
21376: PUSH
21377: LD_INT 6
21379: PUSH
21380: LD_INT 7
21382: PUSH
21383: LD_INT 8
21385: PUSH
21386: LD_INT 9
21388: PUSH
21389: LD_INT 10
21391: PUSH
21392: LD_INT 11
21394: PUSH
21395: LD_INT 12
21397: PUSH
21398: LD_INT 13
21400: PUSH
21401: LD_INT 14
21403: PUSH
21404: LD_INT 15
21406: PUSH
21407: LD_INT 16
21409: PUSH
21410: LD_INT 17
21412: PUSH
21413: LD_INT 18
21415: PUSH
21416: LD_INT 19
21418: PUSH
21419: LD_INT 20
21421: PUSH
21422: LD_INT 21
21424: PUSH
21425: LD_INT 22
21427: PUSH
21428: LD_INT 23
21430: PUSH
21431: LD_INT 24
21433: PUSH
21434: LD_INT 25
21436: PUSH
21437: LD_INT 26
21439: PUSH
21440: LD_INT 27
21442: PUSH
21443: LD_INT 28
21445: PUSH
21446: LD_INT 29
21448: PUSH
21449: LD_INT 30
21451: PUSH
21452: LD_INT 31
21454: PUSH
21455: LD_INT 32
21457: PUSH
21458: LD_INT 33
21460: PUSH
21461: LD_INT 34
21463: PUSH
21464: LD_INT 36
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 101
21506: PUSH
21507: LD_INT 102
21509: PUSH
21510: LD_INT 103
21512: PUSH
21513: LD_INT 104
21515: PUSH
21516: LD_INT 105
21518: PUSH
21519: LD_INT 106
21521: PUSH
21522: LD_INT 107
21524: PUSH
21525: LD_INT 108
21527: PUSH
21528: LD_INT 109
21530: PUSH
21531: LD_INT 110
21533: PUSH
21534: LD_INT 111
21536: PUSH
21537: LD_INT 112
21539: PUSH
21540: LD_INT 113
21542: PUSH
21543: LD_INT 114
21545: PUSH
21546: LD_INT 116
21548: PUSH
21549: LD_INT 117
21551: PUSH
21552: LD_INT 118
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: ST_TO_ADDR
21578: GO 21977
21580: LD_INT 18
21582: DOUBLE
21583: EQUAL
21584: IFTRUE 21588
21586: GO 21736
21588: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21589: LD_ADDR_VAR 0 2
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: LD_INT 4
21599: PUSH
21600: LD_INT 5
21602: PUSH
21603: LD_INT 7
21605: PUSH
21606: LD_INT 11
21608: PUSH
21609: LD_INT 12
21611: PUSH
21612: LD_INT 15
21614: PUSH
21615: LD_INT 16
21617: PUSH
21618: LD_INT 20
21620: PUSH
21621: LD_INT 21
21623: PUSH
21624: LD_INT 22
21626: PUSH
21627: LD_INT 23
21629: PUSH
21630: LD_INT 25
21632: PUSH
21633: LD_INT 26
21635: PUSH
21636: LD_INT 30
21638: PUSH
21639: LD_INT 31
21641: PUSH
21642: LD_INT 32
21644: PUSH
21645: LD_INT 33
21647: PUSH
21648: LD_INT 34
21650: PUSH
21651: LD_INT 35
21653: PUSH
21654: LD_INT 36
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 101
21682: PUSH
21683: LD_INT 102
21685: PUSH
21686: LD_INT 103
21688: PUSH
21689: LD_INT 106
21691: PUSH
21692: LD_INT 108
21694: PUSH
21695: LD_INT 112
21697: PUSH
21698: LD_INT 113
21700: PUSH
21701: LD_INT 114
21703: PUSH
21704: LD_INT 115
21706: PUSH
21707: LD_INT 116
21709: PUSH
21710: LD_INT 117
21712: PUSH
21713: LD_INT 118
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: ST_TO_ADDR
21734: GO 21977
21736: LD_INT 19
21738: DOUBLE
21739: EQUAL
21740: IFTRUE 21744
21742: GO 21976
21744: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21745: LD_ADDR_VAR 0 2
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: LD_INT 2
21755: PUSH
21756: LD_INT 3
21758: PUSH
21759: LD_INT 4
21761: PUSH
21762: LD_INT 5
21764: PUSH
21765: LD_INT 6
21767: PUSH
21768: LD_INT 7
21770: PUSH
21771: LD_INT 8
21773: PUSH
21774: LD_INT 9
21776: PUSH
21777: LD_INT 10
21779: PUSH
21780: LD_INT 11
21782: PUSH
21783: LD_INT 12
21785: PUSH
21786: LD_INT 13
21788: PUSH
21789: LD_INT 14
21791: PUSH
21792: LD_INT 15
21794: PUSH
21795: LD_INT 16
21797: PUSH
21798: LD_INT 17
21800: PUSH
21801: LD_INT 18
21803: PUSH
21804: LD_INT 19
21806: PUSH
21807: LD_INT 20
21809: PUSH
21810: LD_INT 21
21812: PUSH
21813: LD_INT 22
21815: PUSH
21816: LD_INT 23
21818: PUSH
21819: LD_INT 24
21821: PUSH
21822: LD_INT 25
21824: PUSH
21825: LD_INT 26
21827: PUSH
21828: LD_INT 27
21830: PUSH
21831: LD_INT 28
21833: PUSH
21834: LD_INT 29
21836: PUSH
21837: LD_INT 30
21839: PUSH
21840: LD_INT 31
21842: PUSH
21843: LD_INT 32
21845: PUSH
21846: LD_INT 33
21848: PUSH
21849: LD_INT 34
21851: PUSH
21852: LD_INT 35
21854: PUSH
21855: LD_INT 36
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 101
21898: PUSH
21899: LD_INT 102
21901: PUSH
21902: LD_INT 103
21904: PUSH
21905: LD_INT 104
21907: PUSH
21908: LD_INT 105
21910: PUSH
21911: LD_INT 106
21913: PUSH
21914: LD_INT 107
21916: PUSH
21917: LD_INT 108
21919: PUSH
21920: LD_INT 109
21922: PUSH
21923: LD_INT 110
21925: PUSH
21926: LD_INT 111
21928: PUSH
21929: LD_INT 112
21931: PUSH
21932: LD_INT 113
21934: PUSH
21935: LD_INT 114
21937: PUSH
21938: LD_INT 115
21940: PUSH
21941: LD_INT 116
21943: PUSH
21944: LD_INT 117
21946: PUSH
21947: LD_INT 118
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: ST_TO_ADDR
21974: GO 21977
21976: POP
// end else
21977: GO 22208
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21979: LD_ADDR_VAR 0 2
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: LD_INT 3
21992: PUSH
21993: LD_INT 4
21995: PUSH
21996: LD_INT 5
21998: PUSH
21999: LD_INT 6
22001: PUSH
22002: LD_INT 7
22004: PUSH
22005: LD_INT 8
22007: PUSH
22008: LD_INT 9
22010: PUSH
22011: LD_INT 10
22013: PUSH
22014: LD_INT 11
22016: PUSH
22017: LD_INT 12
22019: PUSH
22020: LD_INT 13
22022: PUSH
22023: LD_INT 14
22025: PUSH
22026: LD_INT 15
22028: PUSH
22029: LD_INT 16
22031: PUSH
22032: LD_INT 17
22034: PUSH
22035: LD_INT 18
22037: PUSH
22038: LD_INT 19
22040: PUSH
22041: LD_INT 20
22043: PUSH
22044: LD_INT 21
22046: PUSH
22047: LD_INT 22
22049: PUSH
22050: LD_INT 23
22052: PUSH
22053: LD_INT 24
22055: PUSH
22056: LD_INT 25
22058: PUSH
22059: LD_INT 26
22061: PUSH
22062: LD_INT 27
22064: PUSH
22065: LD_INT 28
22067: PUSH
22068: LD_INT 29
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: LD_INT 31
22076: PUSH
22077: LD_INT 32
22079: PUSH
22080: LD_INT 33
22082: PUSH
22083: LD_INT 34
22085: PUSH
22086: LD_INT 35
22088: PUSH
22089: LD_INT 36
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 101
22132: PUSH
22133: LD_INT 102
22135: PUSH
22136: LD_INT 103
22138: PUSH
22139: LD_INT 104
22141: PUSH
22142: LD_INT 105
22144: PUSH
22145: LD_INT 106
22147: PUSH
22148: LD_INT 107
22150: PUSH
22151: LD_INT 108
22153: PUSH
22154: LD_INT 109
22156: PUSH
22157: LD_INT 110
22159: PUSH
22160: LD_INT 111
22162: PUSH
22163: LD_INT 112
22165: PUSH
22166: LD_INT 113
22168: PUSH
22169: LD_INT 114
22171: PUSH
22172: LD_INT 115
22174: PUSH
22175: LD_INT 116
22177: PUSH
22178: LD_INT 117
22180: PUSH
22181: LD_INT 118
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: ST_TO_ADDR
// if result then
22208: LD_VAR 0 2
22212: IFFALSE 22998
// begin normal :=  ;
22214: LD_ADDR_VAR 0 5
22218: PUSH
22219: LD_STRING 
22221: ST_TO_ADDR
// hardcore :=  ;
22222: LD_ADDR_VAR 0 6
22226: PUSH
22227: LD_STRING 
22229: ST_TO_ADDR
// active :=  ;
22230: LD_ADDR_VAR 0 7
22234: PUSH
22235: LD_STRING 
22237: ST_TO_ADDR
// for i = 1 to normalCounter do
22238: LD_ADDR_VAR 0 8
22242: PUSH
22243: DOUBLE
22244: LD_INT 1
22246: DEC
22247: ST_TO_ADDR
22248: LD_EXP 39
22252: PUSH
22253: FOR_TO
22254: IFFALSE 22355
// begin tmp := 0 ;
22256: LD_ADDR_VAR 0 3
22260: PUSH
22261: LD_STRING 0
22263: ST_TO_ADDR
// if result [ 1 ] then
22264: LD_VAR 0 2
22268: PUSH
22269: LD_INT 1
22271: ARRAY
22272: IFFALSE 22337
// if result [ 1 ] [ 1 ] = i then
22274: LD_VAR 0 2
22278: PUSH
22279: LD_INT 1
22281: ARRAY
22282: PUSH
22283: LD_INT 1
22285: ARRAY
22286: PUSH
22287: LD_VAR 0 8
22291: EQUAL
22292: IFFALSE 22337
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22294: LD_ADDR_VAR 0 2
22298: PUSH
22299: LD_VAR 0 2
22303: PPUSH
22304: LD_INT 1
22306: PPUSH
22307: LD_VAR 0 2
22311: PUSH
22312: LD_INT 1
22314: ARRAY
22315: PPUSH
22316: LD_INT 1
22318: PPUSH
22319: CALL_OW 3
22323: PPUSH
22324: CALL_OW 1
22328: ST_TO_ADDR
// tmp := 1 ;
22329: LD_ADDR_VAR 0 3
22333: PUSH
22334: LD_STRING 1
22336: ST_TO_ADDR
// end ; normal := normal & tmp ;
22337: LD_ADDR_VAR 0 5
22341: PUSH
22342: LD_VAR 0 5
22346: PUSH
22347: LD_VAR 0 3
22351: STR
22352: ST_TO_ADDR
// end ;
22353: GO 22253
22355: POP
22356: POP
// for i = 1 to hardcoreCounter do
22357: LD_ADDR_VAR 0 8
22361: PUSH
22362: DOUBLE
22363: LD_INT 1
22365: DEC
22366: ST_TO_ADDR
22367: LD_EXP 40
22371: PUSH
22372: FOR_TO
22373: IFFALSE 22478
// begin tmp := 0 ;
22375: LD_ADDR_VAR 0 3
22379: PUSH
22380: LD_STRING 0
22382: ST_TO_ADDR
// if result [ 2 ] then
22383: LD_VAR 0 2
22387: PUSH
22388: LD_INT 2
22390: ARRAY
22391: IFFALSE 22460
// if result [ 2 ] [ 1 ] = 100 + i then
22393: LD_VAR 0 2
22397: PUSH
22398: LD_INT 2
22400: ARRAY
22401: PUSH
22402: LD_INT 1
22404: ARRAY
22405: PUSH
22406: LD_INT 100
22408: PUSH
22409: LD_VAR 0 8
22413: PLUS
22414: EQUAL
22415: IFFALSE 22460
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22417: LD_ADDR_VAR 0 2
22421: PUSH
22422: LD_VAR 0 2
22426: PPUSH
22427: LD_INT 2
22429: PPUSH
22430: LD_VAR 0 2
22434: PUSH
22435: LD_INT 2
22437: ARRAY
22438: PPUSH
22439: LD_INT 1
22441: PPUSH
22442: CALL_OW 3
22446: PPUSH
22447: CALL_OW 1
22451: ST_TO_ADDR
// tmp := 1 ;
22452: LD_ADDR_VAR 0 3
22456: PUSH
22457: LD_STRING 1
22459: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22460: LD_ADDR_VAR 0 6
22464: PUSH
22465: LD_VAR 0 6
22469: PUSH
22470: LD_VAR 0 3
22474: STR
22475: ST_TO_ADDR
// end ;
22476: GO 22372
22478: POP
22479: POP
// if isGameLoad then
22480: LD_VAR 0 1
22484: IFFALSE 22959
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22486: LD_ADDR_VAR 0 4
22490: PUSH
22491: LD_EXP 43
22495: PUSH
22496: LD_EXP 42
22500: PUSH
22501: LD_EXP 44
22505: PUSH
22506: LD_EXP 41
22510: PUSH
22511: LD_EXP 45
22515: PUSH
22516: LD_EXP 46
22520: PUSH
22521: LD_EXP 47
22525: PUSH
22526: LD_EXP 48
22530: PUSH
22531: LD_EXP 49
22535: PUSH
22536: LD_EXP 50
22540: PUSH
22541: LD_EXP 51
22545: PUSH
22546: LD_EXP 52
22550: PUSH
22551: LD_EXP 53
22555: PUSH
22556: LD_EXP 54
22560: PUSH
22561: LD_EXP 62
22565: PUSH
22566: LD_EXP 63
22570: PUSH
22571: LD_EXP 64
22575: PUSH
22576: LD_EXP 65
22580: PUSH
22581: LD_EXP 67
22585: PUSH
22586: LD_EXP 68
22590: PUSH
22591: LD_EXP 69
22595: PUSH
22596: LD_EXP 72
22600: PUSH
22601: LD_EXP 74
22605: PUSH
22606: LD_EXP 75
22610: PUSH
22611: LD_EXP 76
22615: PUSH
22616: LD_EXP 78
22620: PUSH
22621: LD_EXP 79
22625: PUSH
22626: LD_EXP 82
22630: PUSH
22631: LD_EXP 83
22635: PUSH
22636: LD_EXP 84
22640: PUSH
22641: LD_EXP 85
22645: PUSH
22646: LD_EXP 86
22650: PUSH
22651: LD_EXP 87
22655: PUSH
22656: LD_EXP 88
22660: PUSH
22661: LD_EXP 89
22665: PUSH
22666: LD_EXP 90
22670: PUSH
22671: LD_EXP 55
22675: PUSH
22676: LD_EXP 56
22680: PUSH
22681: LD_EXP 59
22685: PUSH
22686: LD_EXP 60
22690: PUSH
22691: LD_EXP 61
22695: PUSH
22696: LD_EXP 57
22700: PUSH
22701: LD_EXP 58
22705: PUSH
22706: LD_EXP 66
22710: PUSH
22711: LD_EXP 70
22715: PUSH
22716: LD_EXP 71
22720: PUSH
22721: LD_EXP 73
22725: PUSH
22726: LD_EXP 77
22730: PUSH
22731: LD_EXP 80
22735: PUSH
22736: LD_EXP 81
22740: PUSH
22741: LD_EXP 91
22745: PUSH
22746: LD_EXP 92
22750: PUSH
22751: LD_EXP 93
22755: PUSH
22756: LD_EXP 94
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: ST_TO_ADDR
// tmp :=  ;
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_STRING 
22824: ST_TO_ADDR
// for i = 1 to normalCounter do
22825: LD_ADDR_VAR 0 8
22829: PUSH
22830: DOUBLE
22831: LD_INT 1
22833: DEC
22834: ST_TO_ADDR
22835: LD_EXP 39
22839: PUSH
22840: FOR_TO
22841: IFFALSE 22877
// begin if flags [ i ] then
22843: LD_VAR 0 4
22847: PUSH
22848: LD_VAR 0 8
22852: ARRAY
22853: IFFALSE 22875
// tmp := tmp & i & ; ;
22855: LD_ADDR_VAR 0 3
22859: PUSH
22860: LD_VAR 0 3
22864: PUSH
22865: LD_VAR 0 8
22869: STR
22870: PUSH
22871: LD_STRING ;
22873: STR
22874: ST_TO_ADDR
// end ;
22875: GO 22840
22877: POP
22878: POP
// for i = 1 to hardcoreCounter do
22879: LD_ADDR_VAR 0 8
22883: PUSH
22884: DOUBLE
22885: LD_INT 1
22887: DEC
22888: ST_TO_ADDR
22889: LD_EXP 40
22893: PUSH
22894: FOR_TO
22895: IFFALSE 22941
// begin if flags [ normalCounter + i ] then
22897: LD_VAR 0 4
22901: PUSH
22902: LD_EXP 39
22906: PUSH
22907: LD_VAR 0 8
22911: PLUS
22912: ARRAY
22913: IFFALSE 22939
// tmp := tmp & ( 100 + i ) & ; ;
22915: LD_ADDR_VAR 0 3
22919: PUSH
22920: LD_VAR 0 3
22924: PUSH
22925: LD_INT 100
22927: PUSH
22928: LD_VAR 0 8
22932: PLUS
22933: STR
22934: PUSH
22935: LD_STRING ;
22937: STR
22938: ST_TO_ADDR
// end ;
22939: GO 22894
22941: POP
22942: POP
// if tmp then
22943: LD_VAR 0 3
22947: IFFALSE 22959
// active := tmp ;
22949: LD_ADDR_VAR 0 7
22953: PUSH
22954: LD_VAR 0 3
22958: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22959: LD_STRING getStreamItemsFromMission("
22961: PUSH
22962: LD_VAR 0 5
22966: STR
22967: PUSH
22968: LD_STRING ","
22970: STR
22971: PUSH
22972: LD_VAR 0 6
22976: STR
22977: PUSH
22978: LD_STRING ","
22980: STR
22981: PUSH
22982: LD_VAR 0 7
22986: STR
22987: PUSH
22988: LD_STRING ")
22990: STR
22991: PPUSH
22992: CALL_OW 559
// end else
22996: GO 23005
// ToLua ( getStreamItemsFromMission("","","") ) ;
22998: LD_STRING getStreamItemsFromMission("","","")
23000: PPUSH
23001: CALL_OW 559
// end ;
23005: LD_VAR 0 2
23009: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23010: LD_EXP 38
23014: PUSH
23015: LD_EXP 43
23019: AND
23020: IFFALSE 23144
23022: GO 23024
23024: DISABLE
23025: LD_INT 0
23027: PPUSH
23028: PPUSH
// begin enable ;
23029: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23030: LD_ADDR_VAR 0 2
23034: PUSH
23035: LD_INT 22
23037: PUSH
23038: LD_OWVAR 2
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: LD_INT 34
23052: PUSH
23053: LD_INT 7
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 34
23062: PUSH
23063: LD_INT 45
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 34
23072: PUSH
23073: LD_INT 28
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 34
23082: PUSH
23083: LD_INT 47
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: ST_TO_ADDR
// if not tmp then
23106: LD_VAR 0 2
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23144
// for i in tmp do
23115: LD_ADDR_VAR 0 1
23119: PUSH
23120: LD_VAR 0 2
23124: PUSH
23125: FOR_IN
23126: IFFALSE 23142
// begin SetLives ( i , 0 ) ;
23128: LD_VAR 0 1
23132: PPUSH
23133: LD_INT 0
23135: PPUSH
23136: CALL_OW 234
// end ;
23140: GO 23125
23142: POP
23143: POP
// end ;
23144: PPOPN 2
23146: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23147: LD_EXP 38
23151: PUSH
23152: LD_EXP 44
23156: AND
23157: IFFALSE 23241
23159: GO 23161
23161: DISABLE
23162: LD_INT 0
23164: PPUSH
23165: PPUSH
// begin enable ;
23166: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23167: LD_ADDR_VAR 0 2
23171: PUSH
23172: LD_INT 22
23174: PUSH
23175: LD_OWVAR 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 32
23186: PUSH
23187: LD_INT 3
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PPUSH
23198: CALL_OW 69
23202: ST_TO_ADDR
// if not tmp then
23203: LD_VAR 0 2
23207: NOT
23208: IFFALSE 23212
// exit ;
23210: GO 23241
// for i in tmp do
23212: LD_ADDR_VAR 0 1
23216: PUSH
23217: LD_VAR 0 2
23221: PUSH
23222: FOR_IN
23223: IFFALSE 23239
// begin SetLives ( i , 0 ) ;
23225: LD_VAR 0 1
23229: PPUSH
23230: LD_INT 0
23232: PPUSH
23233: CALL_OW 234
// end ;
23237: GO 23222
23239: POP
23240: POP
// end ;
23241: PPOPN 2
23243: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23244: LD_EXP 38
23248: PUSH
23249: LD_EXP 41
23253: AND
23254: IFFALSE 23347
23256: GO 23258
23258: DISABLE
23259: LD_INT 0
23261: PPUSH
// begin enable ;
23262: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23263: LD_ADDR_VAR 0 1
23267: PUSH
23268: LD_INT 22
23270: PUSH
23271: LD_OWVAR 2
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 2
23282: PUSH
23283: LD_INT 25
23285: PUSH
23286: LD_INT 5
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 25
23295: PUSH
23296: LD_INT 9
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 25
23305: PUSH
23306: LD_INT 8
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PPUSH
23323: CALL_OW 69
23327: PUSH
23328: FOR_IN
23329: IFFALSE 23345
// begin SetClass ( i , 1 ) ;
23331: LD_VAR 0 1
23335: PPUSH
23336: LD_INT 1
23338: PPUSH
23339: CALL_OW 336
// end ;
23343: GO 23328
23345: POP
23346: POP
// end ;
23347: PPOPN 1
23349: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23350: LD_EXP 38
23354: PUSH
23355: LD_EXP 42
23359: AND
23360: PUSH
23361: LD_OWVAR 65
23365: PUSH
23366: LD_INT 7
23368: LESS
23369: AND
23370: IFFALSE 23384
23372: GO 23374
23374: DISABLE
// begin enable ;
23375: ENABLE
// game_speed := 7 ;
23376: LD_ADDR_OWVAR 65
23380: PUSH
23381: LD_INT 7
23383: ST_TO_ADDR
// end ;
23384: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23385: LD_EXP 38
23389: PUSH
23390: LD_EXP 45
23394: AND
23395: IFFALSE 23597
23397: GO 23399
23399: DISABLE
23400: LD_INT 0
23402: PPUSH
23403: PPUSH
23404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23405: LD_ADDR_VAR 0 3
23409: PUSH
23410: LD_INT 81
23412: PUSH
23413: LD_OWVAR 2
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 21
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PPUSH
23436: CALL_OW 69
23440: ST_TO_ADDR
// if not tmp then
23441: LD_VAR 0 3
23445: NOT
23446: IFFALSE 23450
// exit ;
23448: GO 23597
// if tmp > 5 then
23450: LD_VAR 0 3
23454: PUSH
23455: LD_INT 5
23457: GREATER
23458: IFFALSE 23470
// k := 5 else
23460: LD_ADDR_VAR 0 2
23464: PUSH
23465: LD_INT 5
23467: ST_TO_ADDR
23468: GO 23480
// k := tmp ;
23470: LD_ADDR_VAR 0 2
23474: PUSH
23475: LD_VAR 0 3
23479: ST_TO_ADDR
// for i := 1 to k do
23480: LD_ADDR_VAR 0 1
23484: PUSH
23485: DOUBLE
23486: LD_INT 1
23488: DEC
23489: ST_TO_ADDR
23490: LD_VAR 0 2
23494: PUSH
23495: FOR_TO
23496: IFFALSE 23595
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23498: LD_VAR 0 3
23502: PUSH
23503: LD_VAR 0 1
23507: ARRAY
23508: PPUSH
23509: LD_VAR 0 1
23513: PUSH
23514: LD_INT 4
23516: MOD
23517: PUSH
23518: LD_INT 1
23520: PLUS
23521: PPUSH
23522: CALL_OW 259
23526: PUSH
23527: LD_INT 10
23529: LESS
23530: IFFALSE 23593
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23532: LD_VAR 0 3
23536: PUSH
23537: LD_VAR 0 1
23541: ARRAY
23542: PPUSH
23543: LD_VAR 0 1
23547: PUSH
23548: LD_INT 4
23550: MOD
23551: PUSH
23552: LD_INT 1
23554: PLUS
23555: PPUSH
23556: LD_VAR 0 3
23560: PUSH
23561: LD_VAR 0 1
23565: ARRAY
23566: PPUSH
23567: LD_VAR 0 1
23571: PUSH
23572: LD_INT 4
23574: MOD
23575: PUSH
23576: LD_INT 1
23578: PLUS
23579: PPUSH
23580: CALL_OW 259
23584: PUSH
23585: LD_INT 1
23587: PLUS
23588: PPUSH
23589: CALL_OW 237
23593: GO 23495
23595: POP
23596: POP
// end ;
23597: PPOPN 3
23599: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23600: LD_EXP 38
23604: PUSH
23605: LD_EXP 46
23609: AND
23610: IFFALSE 23630
23612: GO 23614
23614: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23615: LD_INT 4
23617: PPUSH
23618: LD_OWVAR 2
23622: PPUSH
23623: LD_INT 0
23625: PPUSH
23626: CALL_OW 324
23630: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23631: LD_EXP 38
23635: PUSH
23636: LD_EXP 75
23640: AND
23641: IFFALSE 23661
23643: GO 23645
23645: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23646: LD_INT 19
23648: PPUSH
23649: LD_OWVAR 2
23653: PPUSH
23654: LD_INT 0
23656: PPUSH
23657: CALL_OW 324
23661: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23662: LD_EXP 38
23666: PUSH
23667: LD_EXP 47
23671: AND
23672: IFFALSE 23774
23674: GO 23676
23676: DISABLE
23677: LD_INT 0
23679: PPUSH
23680: PPUSH
// begin enable ;
23681: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23682: LD_ADDR_VAR 0 2
23686: PUSH
23687: LD_INT 22
23689: PUSH
23690: LD_OWVAR 2
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: LD_INT 34
23704: PUSH
23705: LD_INT 11
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 34
23714: PUSH
23715: LD_INT 30
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PPUSH
23731: CALL_OW 69
23735: ST_TO_ADDR
// if not tmp then
23736: LD_VAR 0 2
23740: NOT
23741: IFFALSE 23745
// exit ;
23743: GO 23774
// for i in tmp do
23745: LD_ADDR_VAR 0 1
23749: PUSH
23750: LD_VAR 0 2
23754: PUSH
23755: FOR_IN
23756: IFFALSE 23772
// begin SetLives ( i , 0 ) ;
23758: LD_VAR 0 1
23762: PPUSH
23763: LD_INT 0
23765: PPUSH
23766: CALL_OW 234
// end ;
23770: GO 23755
23772: POP
23773: POP
// end ;
23774: PPOPN 2
23776: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23777: LD_EXP 38
23781: PUSH
23782: LD_EXP 48
23786: AND
23787: IFFALSE 23807
23789: GO 23791
23791: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23792: LD_INT 32
23794: PPUSH
23795: LD_OWVAR 2
23799: PPUSH
23800: LD_INT 0
23802: PPUSH
23803: CALL_OW 324
23807: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23808: LD_EXP 38
23812: PUSH
23813: LD_EXP 49
23817: AND
23818: IFFALSE 23999
23820: GO 23822
23822: DISABLE
23823: LD_INT 0
23825: PPUSH
23826: PPUSH
23827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23828: LD_ADDR_VAR 0 2
23832: PUSH
23833: LD_INT 22
23835: PUSH
23836: LD_OWVAR 2
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 33
23847: PUSH
23848: LD_INT 3
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PPUSH
23859: CALL_OW 69
23863: ST_TO_ADDR
// if not tmp then
23864: LD_VAR 0 2
23868: NOT
23869: IFFALSE 23873
// exit ;
23871: GO 23999
// side := 0 ;
23873: LD_ADDR_VAR 0 3
23877: PUSH
23878: LD_INT 0
23880: ST_TO_ADDR
// for i := 1 to 8 do
23881: LD_ADDR_VAR 0 1
23885: PUSH
23886: DOUBLE
23887: LD_INT 1
23889: DEC
23890: ST_TO_ADDR
23891: LD_INT 8
23893: PUSH
23894: FOR_TO
23895: IFFALSE 23943
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23897: LD_OWVAR 2
23901: PUSH
23902: LD_VAR 0 1
23906: NONEQUAL
23907: PUSH
23908: LD_OWVAR 2
23912: PPUSH
23913: LD_VAR 0 1
23917: PPUSH
23918: CALL_OW 81
23922: PUSH
23923: LD_INT 2
23925: EQUAL
23926: AND
23927: IFFALSE 23941
// begin side := i ;
23929: LD_ADDR_VAR 0 3
23933: PUSH
23934: LD_VAR 0 1
23938: ST_TO_ADDR
// break ;
23939: GO 23943
// end ;
23941: GO 23894
23943: POP
23944: POP
// if not side then
23945: LD_VAR 0 3
23949: NOT
23950: IFFALSE 23954
// exit ;
23952: GO 23999
// for i := 1 to tmp do
23954: LD_ADDR_VAR 0 1
23958: PUSH
23959: DOUBLE
23960: LD_INT 1
23962: DEC
23963: ST_TO_ADDR
23964: LD_VAR 0 2
23968: PUSH
23969: FOR_TO
23970: IFFALSE 23997
// if Prob ( 60 ) then
23972: LD_INT 60
23974: PPUSH
23975: CALL_OW 13
23979: IFFALSE 23995
// SetSide ( i , side ) ;
23981: LD_VAR 0 1
23985: PPUSH
23986: LD_VAR 0 3
23990: PPUSH
23991: CALL_OW 235
23995: GO 23969
23997: POP
23998: POP
// end ;
23999: PPOPN 3
24001: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24002: LD_EXP 38
24006: PUSH
24007: LD_EXP 51
24011: AND
24012: IFFALSE 24131
24014: GO 24016
24016: DISABLE
24017: LD_INT 0
24019: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24020: LD_ADDR_VAR 0 1
24024: PUSH
24025: LD_INT 22
24027: PUSH
24028: LD_OWVAR 2
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 21
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 3
24049: PUSH
24050: LD_INT 23
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: LIST
24068: PPUSH
24069: CALL_OW 69
24073: PUSH
24074: FOR_IN
24075: IFFALSE 24129
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24077: LD_VAR 0 1
24081: PPUSH
24082: CALL_OW 257
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: LD_INT 2
24092: PUSH
24093: LD_INT 3
24095: PUSH
24096: LD_INT 4
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: IN
24105: IFFALSE 24127
// SetClass ( un , rand ( 1 , 4 ) ) ;
24107: LD_VAR 0 1
24111: PPUSH
24112: LD_INT 1
24114: PPUSH
24115: LD_INT 4
24117: PPUSH
24118: CALL_OW 12
24122: PPUSH
24123: CALL_OW 336
24127: GO 24074
24129: POP
24130: POP
// end ;
24131: PPOPN 1
24133: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24134: LD_EXP 38
24138: PUSH
24139: LD_EXP 50
24143: AND
24144: IFFALSE 24223
24146: GO 24148
24148: DISABLE
24149: LD_INT 0
24151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24152: LD_ADDR_VAR 0 1
24156: PUSH
24157: LD_INT 22
24159: PUSH
24160: LD_OWVAR 2
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 21
24171: PUSH
24172: LD_INT 3
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 69
24187: ST_TO_ADDR
// if not tmp then
24188: LD_VAR 0 1
24192: NOT
24193: IFFALSE 24197
// exit ;
24195: GO 24223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24197: LD_VAR 0 1
24201: PUSH
24202: LD_INT 1
24204: PPUSH
24205: LD_VAR 0 1
24209: PPUSH
24210: CALL_OW 12
24214: ARRAY
24215: PPUSH
24216: LD_INT 100
24218: PPUSH
24219: CALL_OW 234
// end ;
24223: PPOPN 1
24225: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24226: LD_EXP 38
24230: PUSH
24231: LD_EXP 52
24235: AND
24236: IFFALSE 24334
24238: GO 24240
24240: DISABLE
24241: LD_INT 0
24243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24244: LD_ADDR_VAR 0 1
24248: PUSH
24249: LD_INT 22
24251: PUSH
24252: LD_OWVAR 2
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 21
24263: PUSH
24264: LD_INT 1
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PPUSH
24275: CALL_OW 69
24279: ST_TO_ADDR
// if not tmp then
24280: LD_VAR 0 1
24284: NOT
24285: IFFALSE 24289
// exit ;
24287: GO 24334
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24289: LD_VAR 0 1
24293: PUSH
24294: LD_INT 1
24296: PPUSH
24297: LD_VAR 0 1
24301: PPUSH
24302: CALL_OW 12
24306: ARRAY
24307: PPUSH
24308: LD_INT 1
24310: PPUSH
24311: LD_INT 4
24313: PPUSH
24314: CALL_OW 12
24318: PPUSH
24319: LD_INT 3000
24321: PPUSH
24322: LD_INT 9000
24324: PPUSH
24325: CALL_OW 12
24329: PPUSH
24330: CALL_OW 492
// end ;
24334: PPOPN 1
24336: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24337: LD_EXP 38
24341: PUSH
24342: LD_EXP 53
24346: AND
24347: IFFALSE 24367
24349: GO 24351
24351: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24352: LD_INT 1
24354: PPUSH
24355: LD_OWVAR 2
24359: PPUSH
24360: LD_INT 0
24362: PPUSH
24363: CALL_OW 324
24367: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24368: LD_EXP 38
24372: PUSH
24373: LD_EXP 54
24377: AND
24378: IFFALSE 24461
24380: GO 24382
24382: DISABLE
24383: LD_INT 0
24385: PPUSH
24386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24387: LD_ADDR_VAR 0 2
24391: PUSH
24392: LD_INT 22
24394: PUSH
24395: LD_OWVAR 2
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 21
24406: PUSH
24407: LD_INT 3
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PPUSH
24418: CALL_OW 69
24422: ST_TO_ADDR
// if not tmp then
24423: LD_VAR 0 2
24427: NOT
24428: IFFALSE 24432
// exit ;
24430: GO 24461
// for i in tmp do
24432: LD_ADDR_VAR 0 1
24436: PUSH
24437: LD_VAR 0 2
24441: PUSH
24442: FOR_IN
24443: IFFALSE 24459
// SetBLevel ( i , 10 ) ;
24445: LD_VAR 0 1
24449: PPUSH
24450: LD_INT 10
24452: PPUSH
24453: CALL_OW 241
24457: GO 24442
24459: POP
24460: POP
// end ;
24461: PPOPN 2
24463: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24464: LD_EXP 38
24468: PUSH
24469: LD_EXP 55
24473: AND
24474: IFFALSE 24585
24476: GO 24478
24478: DISABLE
24479: LD_INT 0
24481: PPUSH
24482: PPUSH
24483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24484: LD_ADDR_VAR 0 3
24488: PUSH
24489: LD_INT 22
24491: PUSH
24492: LD_OWVAR 2
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 25
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PPUSH
24515: CALL_OW 69
24519: ST_TO_ADDR
// if not tmp then
24520: LD_VAR 0 3
24524: NOT
24525: IFFALSE 24529
// exit ;
24527: GO 24585
// un := tmp [ rand ( 1 , tmp ) ] ;
24529: LD_ADDR_VAR 0 2
24533: PUSH
24534: LD_VAR 0 3
24538: PUSH
24539: LD_INT 1
24541: PPUSH
24542: LD_VAR 0 3
24546: PPUSH
24547: CALL_OW 12
24551: ARRAY
24552: ST_TO_ADDR
// if Crawls ( un ) then
24553: LD_VAR 0 2
24557: PPUSH
24558: CALL_OW 318
24562: IFFALSE 24573
// ComWalk ( un ) ;
24564: LD_VAR 0 2
24568: PPUSH
24569: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24573: LD_VAR 0 2
24577: PPUSH
24578: LD_INT 5
24580: PPUSH
24581: CALL_OW 336
// end ;
24585: PPOPN 3
24587: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24588: LD_EXP 38
24592: PUSH
24593: LD_EXP 56
24597: AND
24598: PUSH
24599: LD_OWVAR 67
24603: PUSH
24604: LD_INT 4
24606: LESS
24607: AND
24608: IFFALSE 24627
24610: GO 24612
24612: DISABLE
// begin Difficulty := Difficulty + 1 ;
24613: LD_ADDR_OWVAR 67
24617: PUSH
24618: LD_OWVAR 67
24622: PUSH
24623: LD_INT 1
24625: PLUS
24626: ST_TO_ADDR
// end ;
24627: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24628: LD_EXP 38
24632: PUSH
24633: LD_EXP 57
24637: AND
24638: IFFALSE 24741
24640: GO 24642
24642: DISABLE
24643: LD_INT 0
24645: PPUSH
// begin for i := 1 to 5 do
24646: LD_ADDR_VAR 0 1
24650: PUSH
24651: DOUBLE
24652: LD_INT 1
24654: DEC
24655: ST_TO_ADDR
24656: LD_INT 5
24658: PUSH
24659: FOR_TO
24660: IFFALSE 24739
// begin uc_nation := nation_nature ;
24662: LD_ADDR_OWVAR 21
24666: PUSH
24667: LD_INT 0
24669: ST_TO_ADDR
// uc_side := 0 ;
24670: LD_ADDR_OWVAR 20
24674: PUSH
24675: LD_INT 0
24677: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24678: LD_ADDR_OWVAR 29
24682: PUSH
24683: LD_INT 12
24685: PUSH
24686: LD_INT 12
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: ST_TO_ADDR
// hc_agressivity := 20 ;
24693: LD_ADDR_OWVAR 35
24697: PUSH
24698: LD_INT 20
24700: ST_TO_ADDR
// hc_class := class_tiger ;
24701: LD_ADDR_OWVAR 28
24705: PUSH
24706: LD_INT 14
24708: ST_TO_ADDR
// hc_gallery :=  ;
24709: LD_ADDR_OWVAR 33
24713: PUSH
24714: LD_STRING 
24716: ST_TO_ADDR
// hc_name :=  ;
24717: LD_ADDR_OWVAR 26
24721: PUSH
24722: LD_STRING 
24724: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24725: CALL_OW 44
24729: PPUSH
24730: LD_INT 0
24732: PPUSH
24733: CALL_OW 51
// end ;
24737: GO 24659
24739: POP
24740: POP
// end ;
24741: PPOPN 1
24743: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24744: LD_EXP 38
24748: PUSH
24749: LD_EXP 58
24753: AND
24754: IFFALSE 24763
24756: GO 24758
24758: DISABLE
// StreamSibBomb ;
24759: CALL 24764 0 0
24763: END
// export function StreamSibBomb ; var i , x , y ; begin
24764: LD_INT 0
24766: PPUSH
24767: PPUSH
24768: PPUSH
24769: PPUSH
// result := false ;
24770: LD_ADDR_VAR 0 1
24774: PUSH
24775: LD_INT 0
24777: ST_TO_ADDR
// for i := 1 to 16 do
24778: LD_ADDR_VAR 0 2
24782: PUSH
24783: DOUBLE
24784: LD_INT 1
24786: DEC
24787: ST_TO_ADDR
24788: LD_INT 16
24790: PUSH
24791: FOR_TO
24792: IFFALSE 24991
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24794: LD_ADDR_VAR 0 3
24798: PUSH
24799: LD_INT 10
24801: PUSH
24802: LD_INT 20
24804: PUSH
24805: LD_INT 30
24807: PUSH
24808: LD_INT 40
24810: PUSH
24811: LD_INT 50
24813: PUSH
24814: LD_INT 60
24816: PUSH
24817: LD_INT 70
24819: PUSH
24820: LD_INT 80
24822: PUSH
24823: LD_INT 90
24825: PUSH
24826: LD_INT 100
24828: PUSH
24829: LD_INT 110
24831: PUSH
24832: LD_INT 120
24834: PUSH
24835: LD_INT 130
24837: PUSH
24838: LD_INT 140
24840: PUSH
24841: LD_INT 150
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 1
24863: PPUSH
24864: LD_INT 15
24866: PPUSH
24867: CALL_OW 12
24871: ARRAY
24872: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24873: LD_ADDR_VAR 0 4
24877: PUSH
24878: LD_INT 10
24880: PUSH
24881: LD_INT 20
24883: PUSH
24884: LD_INT 30
24886: PUSH
24887: LD_INT 40
24889: PUSH
24890: LD_INT 50
24892: PUSH
24893: LD_INT 60
24895: PUSH
24896: LD_INT 70
24898: PUSH
24899: LD_INT 80
24901: PUSH
24902: LD_INT 90
24904: PUSH
24905: LD_INT 100
24907: PUSH
24908: LD_INT 110
24910: PUSH
24911: LD_INT 120
24913: PUSH
24914: LD_INT 130
24916: PUSH
24917: LD_INT 140
24919: PUSH
24920: LD_INT 150
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 1
24942: PPUSH
24943: LD_INT 15
24945: PPUSH
24946: CALL_OW 12
24950: ARRAY
24951: ST_TO_ADDR
// if ValidHex ( x , y ) then
24952: LD_VAR 0 3
24956: PPUSH
24957: LD_VAR 0 4
24961: PPUSH
24962: CALL_OW 488
24966: IFFALSE 24989
// begin result := [ x , y ] ;
24968: LD_ADDR_VAR 0 1
24972: PUSH
24973: LD_VAR 0 3
24977: PUSH
24978: LD_VAR 0 4
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: ST_TO_ADDR
// break ;
24987: GO 24991
// end ; end ;
24989: GO 24791
24991: POP
24992: POP
// if result then
24993: LD_VAR 0 1
24997: IFFALSE 25057
// begin ToLua ( playSibBomb() ) ;
24999: LD_STRING playSibBomb()
25001: PPUSH
25002: CALL_OW 559
// wait ( 0 0$14 ) ;
25006: LD_INT 490
25008: PPUSH
25009: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25013: LD_VAR 0 1
25017: PUSH
25018: LD_INT 1
25020: ARRAY
25021: PPUSH
25022: LD_VAR 0 1
25026: PUSH
25027: LD_INT 2
25029: ARRAY
25030: PPUSH
25031: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25035: LD_VAR 0 1
25039: PUSH
25040: LD_INT 1
25042: ARRAY
25043: PPUSH
25044: LD_VAR 0 1
25048: PUSH
25049: LD_INT 2
25051: ARRAY
25052: PPUSH
25053: CALL_OW 429
// end ; end ;
25057: LD_VAR 0 1
25061: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25062: LD_EXP 38
25066: PUSH
25067: LD_EXP 60
25071: AND
25072: IFFALSE 25084
25074: GO 25076
25076: DISABLE
// YouLost (  ) ;
25077: LD_STRING 
25079: PPUSH
25080: CALL_OW 104
25084: END
// every 0 0$1 trigger StreamModeActive and sFog do
25085: LD_EXP 38
25089: PUSH
25090: LD_EXP 59
25094: AND
25095: IFFALSE 25109
25097: GO 25099
25099: DISABLE
// FogOff ( your_side ) ;
25100: LD_OWVAR 2
25104: PPUSH
25105: CALL_OW 344
25109: END
// every 0 0$1 trigger StreamModeActive and sSun do
25110: LD_EXP 38
25114: PUSH
25115: LD_EXP 61
25119: AND
25120: IFFALSE 25148
25122: GO 25124
25124: DISABLE
// begin solar_recharge_percent := 0 ;
25125: LD_ADDR_OWVAR 79
25129: PUSH
25130: LD_INT 0
25132: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25133: LD_INT 10500
25135: PPUSH
25136: CALL_OW 67
// solar_recharge_percent := 100 ;
25140: LD_ADDR_OWVAR 79
25144: PUSH
25145: LD_INT 100
25147: ST_TO_ADDR
// end ;
25148: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25149: LD_EXP 38
25153: PUSH
25154: LD_EXP 62
25158: AND
25159: IFFALSE 25398
25161: GO 25163
25163: DISABLE
25164: LD_INT 0
25166: PPUSH
25167: PPUSH
25168: PPUSH
// begin tmp := [ ] ;
25169: LD_ADDR_VAR 0 3
25173: PUSH
25174: EMPTY
25175: ST_TO_ADDR
// for i := 1 to 6 do
25176: LD_ADDR_VAR 0 1
25180: PUSH
25181: DOUBLE
25182: LD_INT 1
25184: DEC
25185: ST_TO_ADDR
25186: LD_INT 6
25188: PUSH
25189: FOR_TO
25190: IFFALSE 25295
// begin uc_nation := nation_nature ;
25192: LD_ADDR_OWVAR 21
25196: PUSH
25197: LD_INT 0
25199: ST_TO_ADDR
// uc_side := 0 ;
25200: LD_ADDR_OWVAR 20
25204: PUSH
25205: LD_INT 0
25207: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25208: LD_ADDR_OWVAR 29
25212: PUSH
25213: LD_INT 12
25215: PUSH
25216: LD_INT 12
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: ST_TO_ADDR
// hc_agressivity := 20 ;
25223: LD_ADDR_OWVAR 35
25227: PUSH
25228: LD_INT 20
25230: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25231: LD_ADDR_OWVAR 28
25235: PUSH
25236: LD_INT 17
25238: ST_TO_ADDR
// hc_gallery :=  ;
25239: LD_ADDR_OWVAR 33
25243: PUSH
25244: LD_STRING 
25246: ST_TO_ADDR
// hc_name :=  ;
25247: LD_ADDR_OWVAR 26
25251: PUSH
25252: LD_STRING 
25254: ST_TO_ADDR
// un := CreateHuman ;
25255: LD_ADDR_VAR 0 2
25259: PUSH
25260: CALL_OW 44
25264: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25265: LD_VAR 0 2
25269: PPUSH
25270: LD_INT 1
25272: PPUSH
25273: CALL_OW 51
// tmp := tmp ^ un ;
25277: LD_ADDR_VAR 0 3
25281: PUSH
25282: LD_VAR 0 3
25286: PUSH
25287: LD_VAR 0 2
25291: ADD
25292: ST_TO_ADDR
// end ;
25293: GO 25189
25295: POP
25296: POP
// repeat wait ( 0 0$1 ) ;
25297: LD_INT 35
25299: PPUSH
25300: CALL_OW 67
// for un in tmp do
25304: LD_ADDR_VAR 0 2
25308: PUSH
25309: LD_VAR 0 3
25313: PUSH
25314: FOR_IN
25315: IFFALSE 25389
// begin if IsDead ( un ) then
25317: LD_VAR 0 2
25321: PPUSH
25322: CALL_OW 301
25326: IFFALSE 25346
// begin tmp := tmp diff un ;
25328: LD_ADDR_VAR 0 3
25332: PUSH
25333: LD_VAR 0 3
25337: PUSH
25338: LD_VAR 0 2
25342: DIFF
25343: ST_TO_ADDR
// continue ;
25344: GO 25314
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25346: LD_VAR 0 2
25350: PPUSH
25351: LD_INT 3
25353: PUSH
25354: LD_INT 22
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PPUSH
25368: CALL_OW 69
25372: PPUSH
25373: LD_VAR 0 2
25377: PPUSH
25378: CALL_OW 74
25382: PPUSH
25383: CALL_OW 115
// end ;
25387: GO 25314
25389: POP
25390: POP
// until not tmp ;
25391: LD_VAR 0 3
25395: NOT
25396: IFFALSE 25297
// end ;
25398: PPOPN 3
25400: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25401: LD_EXP 38
25405: PUSH
25406: LD_EXP 63
25410: AND
25411: IFFALSE 25465
25413: GO 25415
25415: DISABLE
// begin ToLua ( displayTroll(); ) ;
25416: LD_STRING displayTroll();
25418: PPUSH
25419: CALL_OW 559
// wait ( 3 3$00 ) ;
25423: LD_INT 6300
25425: PPUSH
25426: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25430: LD_STRING hideTroll();
25432: PPUSH
25433: CALL_OW 559
// wait ( 1 1$00 ) ;
25437: LD_INT 2100
25439: PPUSH
25440: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25444: LD_STRING displayTroll();
25446: PPUSH
25447: CALL_OW 559
// wait ( 1 1$00 ) ;
25451: LD_INT 2100
25453: PPUSH
25454: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25458: LD_STRING hideTroll();
25460: PPUSH
25461: CALL_OW 559
// end ;
25465: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25466: LD_EXP 38
25470: PUSH
25471: LD_EXP 64
25475: AND
25476: IFFALSE 25539
25478: GO 25480
25480: DISABLE
25481: LD_INT 0
25483: PPUSH
// begin p := 0 ;
25484: LD_ADDR_VAR 0 1
25488: PUSH
25489: LD_INT 0
25491: ST_TO_ADDR
// repeat game_speed := 1 ;
25492: LD_ADDR_OWVAR 65
25496: PUSH
25497: LD_INT 1
25499: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25500: LD_INT 35
25502: PPUSH
25503: CALL_OW 67
// p := p + 1 ;
25507: LD_ADDR_VAR 0 1
25511: PUSH
25512: LD_VAR 0 1
25516: PUSH
25517: LD_INT 1
25519: PLUS
25520: ST_TO_ADDR
// until p >= 60 ;
25521: LD_VAR 0 1
25525: PUSH
25526: LD_INT 60
25528: GREATEREQUAL
25529: IFFALSE 25492
// game_speed := 4 ;
25531: LD_ADDR_OWVAR 65
25535: PUSH
25536: LD_INT 4
25538: ST_TO_ADDR
// end ;
25539: PPOPN 1
25541: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25542: LD_EXP 38
25546: PUSH
25547: LD_EXP 65
25551: AND
25552: IFFALSE 25698
25554: GO 25556
25556: DISABLE
25557: LD_INT 0
25559: PPUSH
25560: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25561: LD_ADDR_VAR 0 1
25565: PUSH
25566: LD_INT 22
25568: PUSH
25569: LD_OWVAR 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: LD_INT 30
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 30
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: LIST
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PPUSH
25610: CALL_OW 69
25614: ST_TO_ADDR
// if not depot then
25615: LD_VAR 0 1
25619: NOT
25620: IFFALSE 25624
// exit ;
25622: GO 25698
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25624: LD_ADDR_VAR 0 2
25628: PUSH
25629: LD_VAR 0 1
25633: PUSH
25634: LD_INT 1
25636: PPUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL_OW 12
25646: ARRAY
25647: PPUSH
25648: CALL_OW 274
25652: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25653: LD_VAR 0 2
25657: PPUSH
25658: LD_INT 1
25660: PPUSH
25661: LD_INT 0
25663: PPUSH
25664: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25668: LD_VAR 0 2
25672: PPUSH
25673: LD_INT 2
25675: PPUSH
25676: LD_INT 0
25678: PPUSH
25679: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25683: LD_VAR 0 2
25687: PPUSH
25688: LD_INT 3
25690: PPUSH
25691: LD_INT 0
25693: PPUSH
25694: CALL_OW 277
// end ;
25698: PPOPN 2
25700: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25701: LD_EXP 38
25705: PUSH
25706: LD_EXP 66
25710: AND
25711: IFFALSE 25808
25713: GO 25715
25715: DISABLE
25716: LD_INT 0
25718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25719: LD_ADDR_VAR 0 1
25723: PUSH
25724: LD_INT 22
25726: PUSH
25727: LD_OWVAR 2
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 21
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 3
25748: PUSH
25749: LD_INT 23
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: LIST
25767: PPUSH
25768: CALL_OW 69
25772: ST_TO_ADDR
// if not tmp then
25773: LD_VAR 0 1
25777: NOT
25778: IFFALSE 25782
// exit ;
25780: GO 25808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25782: LD_VAR 0 1
25786: PUSH
25787: LD_INT 1
25789: PPUSH
25790: LD_VAR 0 1
25794: PPUSH
25795: CALL_OW 12
25799: ARRAY
25800: PPUSH
25801: LD_INT 200
25803: PPUSH
25804: CALL_OW 234
// end ;
25808: PPOPN 1
25810: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25811: LD_EXP 38
25815: PUSH
25816: LD_EXP 67
25820: AND
25821: IFFALSE 25900
25823: GO 25825
25825: DISABLE
25826: LD_INT 0
25828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25829: LD_ADDR_VAR 0 1
25833: PUSH
25834: LD_INT 22
25836: PUSH
25837: LD_OWVAR 2
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 21
25848: PUSH
25849: LD_INT 2
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PPUSH
25860: CALL_OW 69
25864: ST_TO_ADDR
// if not tmp then
25865: LD_VAR 0 1
25869: NOT
25870: IFFALSE 25874
// exit ;
25872: GO 25900
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25874: LD_VAR 0 1
25878: PUSH
25879: LD_INT 1
25881: PPUSH
25882: LD_VAR 0 1
25886: PPUSH
25887: CALL_OW 12
25891: ARRAY
25892: PPUSH
25893: LD_INT 60
25895: PPUSH
25896: CALL_OW 234
// end ;
25900: PPOPN 1
25902: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25903: LD_EXP 38
25907: PUSH
25908: LD_EXP 68
25912: AND
25913: IFFALSE 26012
25915: GO 25917
25917: DISABLE
25918: LD_INT 0
25920: PPUSH
25921: PPUSH
// begin enable ;
25922: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25923: LD_ADDR_VAR 0 1
25927: PUSH
25928: LD_INT 22
25930: PUSH
25931: LD_OWVAR 2
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 61
25942: PUSH
25943: EMPTY
25944: LIST
25945: PUSH
25946: LD_INT 33
25948: PUSH
25949: LD_INT 2
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: PPUSH
25961: CALL_OW 69
25965: ST_TO_ADDR
// if not tmp then
25966: LD_VAR 0 1
25970: NOT
25971: IFFALSE 25975
// exit ;
25973: GO 26012
// for i in tmp do
25975: LD_ADDR_VAR 0 2
25979: PUSH
25980: LD_VAR 0 1
25984: PUSH
25985: FOR_IN
25986: IFFALSE 26010
// if IsControledBy ( i ) then
25988: LD_VAR 0 2
25992: PPUSH
25993: CALL_OW 312
25997: IFFALSE 26008
// ComUnlink ( i ) ;
25999: LD_VAR 0 2
26003: PPUSH
26004: CALL_OW 136
26008: GO 25985
26010: POP
26011: POP
// end ;
26012: PPOPN 2
26014: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26015: LD_EXP 38
26019: PUSH
26020: LD_EXP 69
26024: AND
26025: IFFALSE 26165
26027: GO 26029
26029: DISABLE
26030: LD_INT 0
26032: PPUSH
26033: PPUSH
// begin ToLua ( displayPowell(); ) ;
26034: LD_STRING displayPowell();
26036: PPUSH
26037: CALL_OW 559
// uc_side := 0 ;
26041: LD_ADDR_OWVAR 20
26045: PUSH
26046: LD_INT 0
26048: ST_TO_ADDR
// uc_nation := 2 ;
26049: LD_ADDR_OWVAR 21
26053: PUSH
26054: LD_INT 2
26056: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26057: LD_ADDR_OWVAR 37
26061: PUSH
26062: LD_INT 14
26064: ST_TO_ADDR
// vc_engine := engine_siberite ;
26065: LD_ADDR_OWVAR 39
26069: PUSH
26070: LD_INT 3
26072: ST_TO_ADDR
// vc_control := control_apeman ;
26073: LD_ADDR_OWVAR 38
26077: PUSH
26078: LD_INT 5
26080: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26081: LD_ADDR_OWVAR 40
26085: PUSH
26086: LD_INT 29
26088: ST_TO_ADDR
// un := CreateVehicle ;
26089: LD_ADDR_VAR 0 2
26093: PUSH
26094: CALL_OW 45
26098: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26099: LD_VAR 0 2
26103: PPUSH
26104: LD_INT 1
26106: PPUSH
26107: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26111: LD_INT 35
26113: PPUSH
26114: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26118: LD_VAR 0 2
26122: PPUSH
26123: LD_INT 22
26125: PUSH
26126: LD_OWVAR 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PPUSH
26135: CALL_OW 69
26139: PPUSH
26140: LD_VAR 0 2
26144: PPUSH
26145: CALL_OW 74
26149: PPUSH
26150: CALL_OW 115
// until IsDead ( un ) ;
26154: LD_VAR 0 2
26158: PPUSH
26159: CALL_OW 301
26163: IFFALSE 26111
// end ;
26165: PPOPN 2
26167: END
// every 0 0$1 trigger StreamModeActive and sStu do
26168: LD_EXP 38
26172: PUSH
26173: LD_EXP 77
26177: AND
26178: IFFALSE 26194
26180: GO 26182
26182: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26183: LD_STRING displayStucuk();
26185: PPUSH
26186: CALL_OW 559
// ResetFog ;
26190: CALL_OW 335
// end ;
26194: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26195: LD_EXP 38
26199: PUSH
26200: LD_EXP 70
26204: AND
26205: IFFALSE 26346
26207: GO 26209
26209: DISABLE
26210: LD_INT 0
26212: PPUSH
26213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26214: LD_ADDR_VAR 0 2
26218: PUSH
26219: LD_INT 22
26221: PUSH
26222: LD_OWVAR 2
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 21
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PPUSH
26245: CALL_OW 69
26249: ST_TO_ADDR
// if not tmp then
26250: LD_VAR 0 2
26254: NOT
26255: IFFALSE 26259
// exit ;
26257: GO 26346
// un := tmp [ rand ( 1 , tmp ) ] ;
26259: LD_ADDR_VAR 0 1
26263: PUSH
26264: LD_VAR 0 2
26268: PUSH
26269: LD_INT 1
26271: PPUSH
26272: LD_VAR 0 2
26276: PPUSH
26277: CALL_OW 12
26281: ARRAY
26282: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26283: LD_VAR 0 1
26287: PPUSH
26288: LD_INT 0
26290: PPUSH
26291: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26295: LD_VAR 0 1
26299: PPUSH
26300: LD_OWVAR 3
26304: PUSH
26305: LD_VAR 0 1
26309: DIFF
26310: PPUSH
26311: LD_VAR 0 1
26315: PPUSH
26316: CALL_OW 74
26320: PPUSH
26321: CALL_OW 115
// wait ( 0 0$20 ) ;
26325: LD_INT 700
26327: PPUSH
26328: CALL_OW 67
// SetSide ( un , your_side ) ;
26332: LD_VAR 0 1
26336: PPUSH
26337: LD_OWVAR 2
26341: PPUSH
26342: CALL_OW 235
// end ;
26346: PPOPN 2
26348: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26349: LD_EXP 38
26353: PUSH
26354: LD_EXP 71
26358: AND
26359: IFFALSE 26465
26361: GO 26363
26363: DISABLE
26364: LD_INT 0
26366: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26367: LD_ADDR_VAR 0 1
26371: PUSH
26372: LD_INT 22
26374: PUSH
26375: LD_OWVAR 2
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: LD_INT 30
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 30
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: LIST
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PPUSH
26416: CALL_OW 69
26420: ST_TO_ADDR
// if not depot then
26421: LD_VAR 0 1
26425: NOT
26426: IFFALSE 26430
// exit ;
26428: GO 26465
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26430: LD_VAR 0 1
26434: PUSH
26435: LD_INT 1
26437: ARRAY
26438: PPUSH
26439: CALL_OW 250
26443: PPUSH
26444: LD_VAR 0 1
26448: PUSH
26449: LD_INT 1
26451: ARRAY
26452: PPUSH
26453: CALL_OW 251
26457: PPUSH
26458: LD_INT 70
26460: PPUSH
26461: CALL_OW 495
// end ;
26465: PPOPN 1
26467: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26468: LD_EXP 38
26472: PUSH
26473: LD_EXP 72
26477: AND
26478: IFFALSE 26689
26480: GO 26482
26482: DISABLE
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
26487: PPUSH
26488: PPUSH
26489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26490: LD_ADDR_VAR 0 5
26494: PUSH
26495: LD_INT 22
26497: PUSH
26498: LD_OWVAR 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 21
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PPUSH
26521: CALL_OW 69
26525: ST_TO_ADDR
// if not tmp then
26526: LD_VAR 0 5
26530: NOT
26531: IFFALSE 26535
// exit ;
26533: GO 26689
// for i in tmp do
26535: LD_ADDR_VAR 0 1
26539: PUSH
26540: LD_VAR 0 5
26544: PUSH
26545: FOR_IN
26546: IFFALSE 26687
// begin d := rand ( 0 , 5 ) ;
26548: LD_ADDR_VAR 0 4
26552: PUSH
26553: LD_INT 0
26555: PPUSH
26556: LD_INT 5
26558: PPUSH
26559: CALL_OW 12
26563: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26564: LD_ADDR_VAR 0 2
26568: PUSH
26569: LD_VAR 0 1
26573: PPUSH
26574: CALL_OW 250
26578: PPUSH
26579: LD_VAR 0 4
26583: PPUSH
26584: LD_INT 3
26586: PPUSH
26587: LD_INT 12
26589: PPUSH
26590: CALL_OW 12
26594: PPUSH
26595: CALL_OW 272
26599: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26600: LD_ADDR_VAR 0 3
26604: PUSH
26605: LD_VAR 0 1
26609: PPUSH
26610: CALL_OW 251
26614: PPUSH
26615: LD_VAR 0 4
26619: PPUSH
26620: LD_INT 3
26622: PPUSH
26623: LD_INT 12
26625: PPUSH
26626: CALL_OW 12
26630: PPUSH
26631: CALL_OW 273
26635: ST_TO_ADDR
// if ValidHex ( x , y ) then
26636: LD_VAR 0 2
26640: PPUSH
26641: LD_VAR 0 3
26645: PPUSH
26646: CALL_OW 488
26650: IFFALSE 26685
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26652: LD_VAR 0 1
26656: PPUSH
26657: LD_VAR 0 2
26661: PPUSH
26662: LD_VAR 0 3
26666: PPUSH
26667: LD_INT 3
26669: PPUSH
26670: LD_INT 6
26672: PPUSH
26673: CALL_OW 12
26677: PPUSH
26678: LD_INT 1
26680: PPUSH
26681: CALL_OW 483
// end ;
26685: GO 26545
26687: POP
26688: POP
// end ;
26689: PPOPN 5
26691: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26692: LD_EXP 38
26696: PUSH
26697: LD_EXP 73
26701: AND
26702: IFFALSE 26796
26704: GO 26706
26706: DISABLE
26707: LD_INT 0
26709: PPUSH
26710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26711: LD_ADDR_VAR 0 2
26715: PUSH
26716: LD_INT 22
26718: PUSH
26719: LD_OWVAR 2
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 32
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 21
26740: PUSH
26741: LD_INT 2
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: LIST
26752: PPUSH
26753: CALL_OW 69
26757: ST_TO_ADDR
// if not tmp then
26758: LD_VAR 0 2
26762: NOT
26763: IFFALSE 26767
// exit ;
26765: GO 26796
// for i in tmp do
26767: LD_ADDR_VAR 0 1
26771: PUSH
26772: LD_VAR 0 2
26776: PUSH
26777: FOR_IN
26778: IFFALSE 26794
// SetFuel ( i , 0 ) ;
26780: LD_VAR 0 1
26784: PPUSH
26785: LD_INT 0
26787: PPUSH
26788: CALL_OW 240
26792: GO 26777
26794: POP
26795: POP
// end ;
26796: PPOPN 2
26798: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26799: LD_EXP 38
26803: PUSH
26804: LD_EXP 74
26808: AND
26809: IFFALSE 26875
26811: GO 26813
26813: DISABLE
26814: LD_INT 0
26816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26817: LD_ADDR_VAR 0 1
26821: PUSH
26822: LD_INT 22
26824: PUSH
26825: LD_OWVAR 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 30
26836: PUSH
26837: LD_INT 29
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PPUSH
26848: CALL_OW 69
26852: ST_TO_ADDR
// if not tmp then
26853: LD_VAR 0 1
26857: NOT
26858: IFFALSE 26862
// exit ;
26860: GO 26875
// DestroyUnit ( tmp [ 1 ] ) ;
26862: LD_VAR 0 1
26866: PUSH
26867: LD_INT 1
26869: ARRAY
26870: PPUSH
26871: CALL_OW 65
// end ;
26875: PPOPN 1
26877: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26878: LD_EXP 38
26882: PUSH
26883: LD_EXP 76
26887: AND
26888: IFFALSE 27017
26890: GO 26892
26892: DISABLE
26893: LD_INT 0
26895: PPUSH
// begin uc_side := 0 ;
26896: LD_ADDR_OWVAR 20
26900: PUSH
26901: LD_INT 0
26903: ST_TO_ADDR
// uc_nation := nation_arabian ;
26904: LD_ADDR_OWVAR 21
26908: PUSH
26909: LD_INT 2
26911: ST_TO_ADDR
// hc_gallery :=  ;
26912: LD_ADDR_OWVAR 33
26916: PUSH
26917: LD_STRING 
26919: ST_TO_ADDR
// hc_name :=  ;
26920: LD_ADDR_OWVAR 26
26924: PUSH
26925: LD_STRING 
26927: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26928: LD_INT 1
26930: PPUSH
26931: LD_INT 11
26933: PPUSH
26934: LD_INT 10
26936: PPUSH
26937: CALL_OW 380
// un := CreateHuman ;
26941: LD_ADDR_VAR 0 1
26945: PUSH
26946: CALL_OW 44
26950: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26951: LD_VAR 0 1
26955: PPUSH
26956: LD_INT 1
26958: PPUSH
26959: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26963: LD_INT 35
26965: PPUSH
26966: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26970: LD_VAR 0 1
26974: PPUSH
26975: LD_INT 22
26977: PUSH
26978: LD_OWVAR 2
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PPUSH
26987: CALL_OW 69
26991: PPUSH
26992: LD_VAR 0 1
26996: PPUSH
26997: CALL_OW 74
27001: PPUSH
27002: CALL_OW 115
// until IsDead ( un ) ;
27006: LD_VAR 0 1
27010: PPUSH
27011: CALL_OW 301
27015: IFFALSE 26963
// end ;
27017: PPOPN 1
27019: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27020: LD_EXP 38
27024: PUSH
27025: LD_EXP 78
27029: AND
27030: IFFALSE 27042
27032: GO 27034
27034: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27035: LD_STRING earthquake(getX(game), 0, 32)
27037: PPUSH
27038: CALL_OW 559
27042: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27043: LD_EXP 38
27047: PUSH
27048: LD_EXP 79
27052: AND
27053: IFFALSE 27144
27055: GO 27057
27057: DISABLE
27058: LD_INT 0
27060: PPUSH
// begin enable ;
27061: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27062: LD_ADDR_VAR 0 1
27066: PUSH
27067: LD_INT 22
27069: PUSH
27070: LD_OWVAR 2
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 21
27081: PUSH
27082: LD_INT 2
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 33
27091: PUSH
27092: LD_INT 3
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: PPUSH
27104: CALL_OW 69
27108: ST_TO_ADDR
// if not tmp then
27109: LD_VAR 0 1
27113: NOT
27114: IFFALSE 27118
// exit ;
27116: GO 27144
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27118: LD_VAR 0 1
27122: PUSH
27123: LD_INT 1
27125: PPUSH
27126: LD_VAR 0 1
27130: PPUSH
27131: CALL_OW 12
27135: ARRAY
27136: PPUSH
27137: LD_INT 1
27139: PPUSH
27140: CALL_OW 234
// end ;
27144: PPOPN 1
27146: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27147: LD_EXP 38
27151: PUSH
27152: LD_EXP 80
27156: AND
27157: IFFALSE 27298
27159: GO 27161
27161: DISABLE
27162: LD_INT 0
27164: PPUSH
27165: PPUSH
27166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27167: LD_ADDR_VAR 0 3
27171: PUSH
27172: LD_INT 22
27174: PUSH
27175: LD_OWVAR 2
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 25
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PPUSH
27198: CALL_OW 69
27202: ST_TO_ADDR
// if not tmp then
27203: LD_VAR 0 3
27207: NOT
27208: IFFALSE 27212
// exit ;
27210: GO 27298
// un := tmp [ rand ( 1 , tmp ) ] ;
27212: LD_ADDR_VAR 0 2
27216: PUSH
27217: LD_VAR 0 3
27221: PUSH
27222: LD_INT 1
27224: PPUSH
27225: LD_VAR 0 3
27229: PPUSH
27230: CALL_OW 12
27234: ARRAY
27235: ST_TO_ADDR
// if Crawls ( un ) then
27236: LD_VAR 0 2
27240: PPUSH
27241: CALL_OW 318
27245: IFFALSE 27256
// ComWalk ( un ) ;
27247: LD_VAR 0 2
27251: PPUSH
27252: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27256: LD_VAR 0 2
27260: PPUSH
27261: LD_INT 9
27263: PPUSH
27264: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27268: LD_INT 28
27270: PPUSH
27271: LD_OWVAR 2
27275: PPUSH
27276: LD_INT 2
27278: PPUSH
27279: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27283: LD_INT 29
27285: PPUSH
27286: LD_OWVAR 2
27290: PPUSH
27291: LD_INT 2
27293: PPUSH
27294: CALL_OW 322
// end ;
27298: PPOPN 3
27300: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27301: LD_EXP 38
27305: PUSH
27306: LD_EXP 81
27310: AND
27311: IFFALSE 27422
27313: GO 27315
27315: DISABLE
27316: LD_INT 0
27318: PPUSH
27319: PPUSH
27320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27321: LD_ADDR_VAR 0 3
27325: PUSH
27326: LD_INT 22
27328: PUSH
27329: LD_OWVAR 2
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 25
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PPUSH
27352: CALL_OW 69
27356: ST_TO_ADDR
// if not tmp then
27357: LD_VAR 0 3
27361: NOT
27362: IFFALSE 27366
// exit ;
27364: GO 27422
// un := tmp [ rand ( 1 , tmp ) ] ;
27366: LD_ADDR_VAR 0 2
27370: PUSH
27371: LD_VAR 0 3
27375: PUSH
27376: LD_INT 1
27378: PPUSH
27379: LD_VAR 0 3
27383: PPUSH
27384: CALL_OW 12
27388: ARRAY
27389: ST_TO_ADDR
// if Crawls ( un ) then
27390: LD_VAR 0 2
27394: PPUSH
27395: CALL_OW 318
27399: IFFALSE 27410
// ComWalk ( un ) ;
27401: LD_VAR 0 2
27405: PPUSH
27406: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27410: LD_VAR 0 2
27414: PPUSH
27415: LD_INT 8
27417: PPUSH
27418: CALL_OW 336
// end ;
27422: PPOPN 3
27424: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27425: LD_EXP 38
27429: PUSH
27430: LD_EXP 82
27434: AND
27435: IFFALSE 27579
27437: GO 27439
27439: DISABLE
27440: LD_INT 0
27442: PPUSH
27443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27444: LD_ADDR_VAR 0 2
27448: PUSH
27449: LD_INT 22
27451: PUSH
27452: LD_OWVAR 2
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 21
27463: PUSH
27464: LD_INT 2
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 2
27473: PUSH
27474: LD_INT 34
27476: PUSH
27477: LD_INT 12
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 34
27486: PUSH
27487: LD_INT 51
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 34
27496: PUSH
27497: LD_INT 32
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: LIST
27514: PPUSH
27515: CALL_OW 69
27519: ST_TO_ADDR
// if not tmp then
27520: LD_VAR 0 2
27524: NOT
27525: IFFALSE 27529
// exit ;
27527: GO 27579
// for i in tmp do
27529: LD_ADDR_VAR 0 1
27533: PUSH
27534: LD_VAR 0 2
27538: PUSH
27539: FOR_IN
27540: IFFALSE 27577
// if GetCargo ( i , mat_artifact ) = 0 then
27542: LD_VAR 0 1
27546: PPUSH
27547: LD_INT 4
27549: PPUSH
27550: CALL_OW 289
27554: PUSH
27555: LD_INT 0
27557: EQUAL
27558: IFFALSE 27575
// SetCargo ( i , mat_siberit , 100 ) ;
27560: LD_VAR 0 1
27564: PPUSH
27565: LD_INT 3
27567: PPUSH
27568: LD_INT 100
27570: PPUSH
27571: CALL_OW 290
27575: GO 27539
27577: POP
27578: POP
// end ;
27579: PPOPN 2
27581: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27582: LD_EXP 38
27586: PUSH
27587: LD_EXP 83
27591: AND
27592: IFFALSE 27775
27594: GO 27596
27596: DISABLE
27597: LD_INT 0
27599: PPUSH
27600: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27601: LD_ADDR_VAR 0 2
27605: PUSH
27606: LD_INT 22
27608: PUSH
27609: LD_OWVAR 2
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PPUSH
27618: CALL_OW 69
27622: ST_TO_ADDR
// if not tmp then
27623: LD_VAR 0 2
27627: NOT
27628: IFFALSE 27632
// exit ;
27630: GO 27775
// for i := 1 to 2 do
27632: LD_ADDR_VAR 0 1
27636: PUSH
27637: DOUBLE
27638: LD_INT 1
27640: DEC
27641: ST_TO_ADDR
27642: LD_INT 2
27644: PUSH
27645: FOR_TO
27646: IFFALSE 27773
// begin uc_side := your_side ;
27648: LD_ADDR_OWVAR 20
27652: PUSH
27653: LD_OWVAR 2
27657: ST_TO_ADDR
// uc_nation := nation_american ;
27658: LD_ADDR_OWVAR 21
27662: PUSH
27663: LD_INT 1
27665: ST_TO_ADDR
// vc_chassis := us_morphling ;
27666: LD_ADDR_OWVAR 37
27670: PUSH
27671: LD_INT 5
27673: ST_TO_ADDR
// vc_engine := engine_siberite ;
27674: LD_ADDR_OWVAR 39
27678: PUSH
27679: LD_INT 3
27681: ST_TO_ADDR
// vc_control := control_computer ;
27682: LD_ADDR_OWVAR 38
27686: PUSH
27687: LD_INT 3
27689: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27690: LD_ADDR_OWVAR 40
27694: PUSH
27695: LD_INT 10
27697: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27698: LD_VAR 0 2
27702: PUSH
27703: LD_INT 1
27705: ARRAY
27706: PPUSH
27707: CALL_OW 310
27711: NOT
27712: IFFALSE 27759
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27714: CALL_OW 45
27718: PPUSH
27719: LD_VAR 0 2
27723: PUSH
27724: LD_INT 1
27726: ARRAY
27727: PPUSH
27728: CALL_OW 250
27732: PPUSH
27733: LD_VAR 0 2
27737: PUSH
27738: LD_INT 1
27740: ARRAY
27741: PPUSH
27742: CALL_OW 251
27746: PPUSH
27747: LD_INT 12
27749: PPUSH
27750: LD_INT 1
27752: PPUSH
27753: CALL_OW 50
27757: GO 27771
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27759: CALL_OW 45
27763: PPUSH
27764: LD_INT 1
27766: PPUSH
27767: CALL_OW 51
// end ;
27771: GO 27645
27773: POP
27774: POP
// end ;
27775: PPOPN 2
27777: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27778: LD_EXP 38
27782: PUSH
27783: LD_EXP 84
27787: AND
27788: IFFALSE 28010
27790: GO 27792
27792: DISABLE
27793: LD_INT 0
27795: PPUSH
27796: PPUSH
27797: PPUSH
27798: PPUSH
27799: PPUSH
27800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27801: LD_ADDR_VAR 0 6
27805: PUSH
27806: LD_INT 22
27808: PUSH
27809: LD_OWVAR 2
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 21
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: LD_INT 23
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: PPUSH
27850: CALL_OW 69
27854: ST_TO_ADDR
// if not tmp then
27855: LD_VAR 0 6
27859: NOT
27860: IFFALSE 27864
// exit ;
27862: GO 28010
// s1 := rand ( 1 , 4 ) ;
27864: LD_ADDR_VAR 0 2
27868: PUSH
27869: LD_INT 1
27871: PPUSH
27872: LD_INT 4
27874: PPUSH
27875: CALL_OW 12
27879: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27880: LD_ADDR_VAR 0 4
27884: PUSH
27885: LD_VAR 0 6
27889: PUSH
27890: LD_INT 1
27892: ARRAY
27893: PPUSH
27894: LD_VAR 0 2
27898: PPUSH
27899: CALL_OW 259
27903: ST_TO_ADDR
// if s1 = 1 then
27904: LD_VAR 0 2
27908: PUSH
27909: LD_INT 1
27911: EQUAL
27912: IFFALSE 27932
// s2 := rand ( 2 , 4 ) else
27914: LD_ADDR_VAR 0 3
27918: PUSH
27919: LD_INT 2
27921: PPUSH
27922: LD_INT 4
27924: PPUSH
27925: CALL_OW 12
27929: ST_TO_ADDR
27930: GO 27940
// s2 := 1 ;
27932: LD_ADDR_VAR 0 3
27936: PUSH
27937: LD_INT 1
27939: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27940: LD_ADDR_VAR 0 5
27944: PUSH
27945: LD_VAR 0 6
27949: PUSH
27950: LD_INT 1
27952: ARRAY
27953: PPUSH
27954: LD_VAR 0 3
27958: PPUSH
27959: CALL_OW 259
27963: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27964: LD_VAR 0 6
27968: PUSH
27969: LD_INT 1
27971: ARRAY
27972: PPUSH
27973: LD_VAR 0 2
27977: PPUSH
27978: LD_VAR 0 5
27982: PPUSH
27983: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27987: LD_VAR 0 6
27991: PUSH
27992: LD_INT 1
27994: ARRAY
27995: PPUSH
27996: LD_VAR 0 3
28000: PPUSH
28001: LD_VAR 0 4
28005: PPUSH
28006: CALL_OW 237
// end ;
28010: PPOPN 6
28012: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28013: LD_EXP 38
28017: PUSH
28018: LD_EXP 85
28022: AND
28023: IFFALSE 28102
28025: GO 28027
28027: DISABLE
28028: LD_INT 0
28030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28031: LD_ADDR_VAR 0 1
28035: PUSH
28036: LD_INT 22
28038: PUSH
28039: LD_OWVAR 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 30
28050: PUSH
28051: LD_INT 3
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PPUSH
28062: CALL_OW 69
28066: ST_TO_ADDR
// if not tmp then
28067: LD_VAR 0 1
28071: NOT
28072: IFFALSE 28076
// exit ;
28074: GO 28102
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28076: LD_VAR 0 1
28080: PUSH
28081: LD_INT 1
28083: PPUSH
28084: LD_VAR 0 1
28088: PPUSH
28089: CALL_OW 12
28093: ARRAY
28094: PPUSH
28095: LD_INT 1
28097: PPUSH
28098: CALL_OW 234
// end ;
28102: PPOPN 1
28104: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28105: LD_EXP 38
28109: PUSH
28110: LD_EXP 86
28114: AND
28115: IFFALSE 28227
28117: GO 28119
28119: DISABLE
28120: LD_INT 0
28122: PPUSH
28123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28124: LD_ADDR_VAR 0 2
28128: PUSH
28129: LD_INT 22
28131: PUSH
28132: LD_OWVAR 2
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 2
28143: PUSH
28144: LD_INT 30
28146: PUSH
28147: LD_INT 27
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 30
28156: PUSH
28157: LD_INT 26
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 30
28166: PUSH
28167: LD_INT 28
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PPUSH
28184: CALL_OW 69
28188: ST_TO_ADDR
// if not tmp then
28189: LD_VAR 0 2
28193: NOT
28194: IFFALSE 28198
// exit ;
28196: GO 28227
// for i in tmp do
28198: LD_ADDR_VAR 0 1
28202: PUSH
28203: LD_VAR 0 2
28207: PUSH
28208: FOR_IN
28209: IFFALSE 28225
// SetLives ( i , 1 ) ;
28211: LD_VAR 0 1
28215: PPUSH
28216: LD_INT 1
28218: PPUSH
28219: CALL_OW 234
28223: GO 28208
28225: POP
28226: POP
// end ;
28227: PPOPN 2
28229: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28230: LD_EXP 38
28234: PUSH
28235: LD_EXP 87
28239: AND
28240: IFFALSE 28527
28242: GO 28244
28244: DISABLE
28245: LD_INT 0
28247: PPUSH
28248: PPUSH
28249: PPUSH
// begin i := rand ( 1 , 7 ) ;
28250: LD_ADDR_VAR 0 1
28254: PUSH
28255: LD_INT 1
28257: PPUSH
28258: LD_INT 7
28260: PPUSH
28261: CALL_OW 12
28265: ST_TO_ADDR
// case i of 1 :
28266: LD_VAR 0 1
28270: PUSH
28271: LD_INT 1
28273: DOUBLE
28274: EQUAL
28275: IFTRUE 28279
28277: GO 28289
28279: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28280: LD_STRING earthquake(getX(game), 0, 32)
28282: PPUSH
28283: CALL_OW 559
28287: GO 28527
28289: LD_INT 2
28291: DOUBLE
28292: EQUAL
28293: IFTRUE 28297
28295: GO 28311
28297: POP
// begin ToLua ( displayStucuk(); ) ;
28298: LD_STRING displayStucuk();
28300: PPUSH
28301: CALL_OW 559
// ResetFog ;
28305: CALL_OW 335
// end ; 3 :
28309: GO 28527
28311: LD_INT 3
28313: DOUBLE
28314: EQUAL
28315: IFTRUE 28319
28317: GO 28423
28319: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28320: LD_ADDR_VAR 0 2
28324: PUSH
28325: LD_INT 22
28327: PUSH
28328: LD_OWVAR 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 25
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PPUSH
28351: CALL_OW 69
28355: ST_TO_ADDR
// if not tmp then
28356: LD_VAR 0 2
28360: NOT
28361: IFFALSE 28365
// exit ;
28363: GO 28527
// un := tmp [ rand ( 1 , tmp ) ] ;
28365: LD_ADDR_VAR 0 3
28369: PUSH
28370: LD_VAR 0 2
28374: PUSH
28375: LD_INT 1
28377: PPUSH
28378: LD_VAR 0 2
28382: PPUSH
28383: CALL_OW 12
28387: ARRAY
28388: ST_TO_ADDR
// if Crawls ( un ) then
28389: LD_VAR 0 3
28393: PPUSH
28394: CALL_OW 318
28398: IFFALSE 28409
// ComWalk ( un ) ;
28400: LD_VAR 0 3
28404: PPUSH
28405: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28409: LD_VAR 0 3
28413: PPUSH
28414: LD_INT 8
28416: PPUSH
28417: CALL_OW 336
// end ; 4 :
28421: GO 28527
28423: LD_INT 4
28425: DOUBLE
28426: EQUAL
28427: IFTRUE 28431
28429: GO 28505
28431: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28432: LD_ADDR_VAR 0 2
28436: PUSH
28437: LD_INT 22
28439: PUSH
28440: LD_OWVAR 2
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 30
28451: PUSH
28452: LD_INT 29
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PPUSH
28463: CALL_OW 69
28467: ST_TO_ADDR
// if not tmp then
28468: LD_VAR 0 2
28472: NOT
28473: IFFALSE 28477
// exit ;
28475: GO 28527
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28477: LD_VAR 0 2
28481: PUSH
28482: LD_INT 1
28484: ARRAY
28485: PPUSH
28486: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28490: LD_VAR 0 2
28494: PUSH
28495: LD_INT 1
28497: ARRAY
28498: PPUSH
28499: CALL_OW 65
// end ; 5 .. 7 :
28503: GO 28527
28505: LD_INT 5
28507: DOUBLE
28508: GREATEREQUAL
28509: IFFALSE 28517
28511: LD_INT 7
28513: DOUBLE
28514: LESSEQUAL
28515: IFTRUE 28519
28517: GO 28526
28519: POP
// StreamSibBomb ; end ;
28520: CALL 24764 0 0
28524: GO 28527
28526: POP
// end ;
28527: PPOPN 3
28529: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28530: LD_EXP 38
28534: PUSH
28535: LD_EXP 88
28539: AND
28540: IFFALSE 28696
28542: GO 28544
28544: DISABLE
28545: LD_INT 0
28547: PPUSH
28548: PPUSH
28549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28550: LD_ADDR_VAR 0 2
28554: PUSH
28555: LD_INT 81
28557: PUSH
28558: LD_OWVAR 2
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 2
28569: PUSH
28570: LD_INT 21
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 21
28582: PUSH
28583: LD_INT 2
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PPUSH
28599: CALL_OW 69
28603: ST_TO_ADDR
// if not tmp then
28604: LD_VAR 0 2
28608: NOT
28609: IFFALSE 28613
// exit ;
28611: GO 28696
// p := 0 ;
28613: LD_ADDR_VAR 0 3
28617: PUSH
28618: LD_INT 0
28620: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28621: LD_INT 35
28623: PPUSH
28624: CALL_OW 67
// p := p + 1 ;
28628: LD_ADDR_VAR 0 3
28632: PUSH
28633: LD_VAR 0 3
28637: PUSH
28638: LD_INT 1
28640: PLUS
28641: ST_TO_ADDR
// for i in tmp do
28642: LD_ADDR_VAR 0 1
28646: PUSH
28647: LD_VAR 0 2
28651: PUSH
28652: FOR_IN
28653: IFFALSE 28684
// if GetLives ( i ) < 1000 then
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 256
28664: PUSH
28665: LD_INT 1000
28667: LESS
28668: IFFALSE 28682
// SetLives ( i , 1000 ) ;
28670: LD_VAR 0 1
28674: PPUSH
28675: LD_INT 1000
28677: PPUSH
28678: CALL_OW 234
28682: GO 28652
28684: POP
28685: POP
// until p > 20 ;
28686: LD_VAR 0 3
28690: PUSH
28691: LD_INT 20
28693: GREATER
28694: IFFALSE 28621
// end ;
28696: PPOPN 3
28698: END
// every 0 0$1 trigger StreamModeActive and sTime do
28699: LD_EXP 38
28703: PUSH
28704: LD_EXP 89
28708: AND
28709: IFFALSE 28744
28711: GO 28713
28713: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28714: LD_INT 28
28716: PPUSH
28717: LD_OWVAR 2
28721: PPUSH
28722: LD_INT 2
28724: PPUSH
28725: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28729: LD_INT 30
28731: PPUSH
28732: LD_OWVAR 2
28736: PPUSH
28737: LD_INT 2
28739: PPUSH
28740: CALL_OW 322
// end ;
28744: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28745: LD_EXP 38
28749: PUSH
28750: LD_EXP 90
28754: AND
28755: IFFALSE 28876
28757: GO 28759
28759: DISABLE
28760: LD_INT 0
28762: PPUSH
28763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28764: LD_ADDR_VAR 0 2
28768: PUSH
28769: LD_INT 22
28771: PUSH
28772: LD_OWVAR 2
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 21
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: PUSH
28794: LD_INT 23
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: LIST
28812: PPUSH
28813: CALL_OW 69
28817: ST_TO_ADDR
// if not tmp then
28818: LD_VAR 0 2
28822: NOT
28823: IFFALSE 28827
// exit ;
28825: GO 28876
// for i in tmp do
28827: LD_ADDR_VAR 0 1
28831: PUSH
28832: LD_VAR 0 2
28836: PUSH
28837: FOR_IN
28838: IFFALSE 28874
// begin if Crawls ( i ) then
28840: LD_VAR 0 1
28844: PPUSH
28845: CALL_OW 318
28849: IFFALSE 28860
// ComWalk ( i ) ;
28851: LD_VAR 0 1
28855: PPUSH
28856: CALL_OW 138
// SetClass ( i , 2 ) ;
28860: LD_VAR 0 1
28864: PPUSH
28865: LD_INT 2
28867: PPUSH
28868: CALL_OW 336
// end ;
28872: GO 28837
28874: POP
28875: POP
// end ;
28876: PPOPN 2
28878: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28879: LD_EXP 38
28883: PUSH
28884: LD_EXP 91
28888: AND
28889: IFFALSE 29177
28891: GO 28893
28893: DISABLE
28894: LD_INT 0
28896: PPUSH
28897: PPUSH
28898: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28899: LD_OWVAR 2
28903: PPUSH
28904: LD_INT 9
28906: PPUSH
28907: LD_INT 1
28909: PPUSH
28910: LD_INT 1
28912: PPUSH
28913: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28917: LD_INT 9
28919: PPUSH
28920: LD_OWVAR 2
28924: PPUSH
28925: CALL_OW 343
// uc_side := 9 ;
28929: LD_ADDR_OWVAR 20
28933: PUSH
28934: LD_INT 9
28936: ST_TO_ADDR
// uc_nation := 2 ;
28937: LD_ADDR_OWVAR 21
28941: PUSH
28942: LD_INT 2
28944: ST_TO_ADDR
// hc_name := Dark Warrior ;
28945: LD_ADDR_OWVAR 26
28949: PUSH
28950: LD_STRING Dark Warrior
28952: ST_TO_ADDR
// hc_gallery :=  ;
28953: LD_ADDR_OWVAR 33
28957: PUSH
28958: LD_STRING 
28960: ST_TO_ADDR
// hc_noskilllimit := true ;
28961: LD_ADDR_OWVAR 76
28965: PUSH
28966: LD_INT 1
28968: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28969: LD_ADDR_OWVAR 31
28973: PUSH
28974: LD_INT 30
28976: PUSH
28977: LD_INT 30
28979: PUSH
28980: LD_INT 30
28982: PUSH
28983: LD_INT 30
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: ST_TO_ADDR
// un := CreateHuman ;
28992: LD_ADDR_VAR 0 3
28996: PUSH
28997: CALL_OW 44
29001: ST_TO_ADDR
// hc_noskilllimit := false ;
29002: LD_ADDR_OWVAR 76
29006: PUSH
29007: LD_INT 0
29009: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29010: LD_VAR 0 3
29014: PPUSH
29015: LD_INT 1
29017: PPUSH
29018: CALL_OW 51
// ToLua ( playRanger() ) ;
29022: LD_STRING playRanger()
29024: PPUSH
29025: CALL_OW 559
// p := 0 ;
29029: LD_ADDR_VAR 0 2
29033: PUSH
29034: LD_INT 0
29036: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29037: LD_INT 35
29039: PPUSH
29040: CALL_OW 67
// p := p + 1 ;
29044: LD_ADDR_VAR 0 2
29048: PUSH
29049: LD_VAR 0 2
29053: PUSH
29054: LD_INT 1
29056: PLUS
29057: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29058: LD_VAR 0 3
29062: PPUSH
29063: CALL_OW 256
29067: PUSH
29068: LD_INT 1000
29070: LESS
29071: IFFALSE 29085
// SetLives ( un , 1000 ) ;
29073: LD_VAR 0 3
29077: PPUSH
29078: LD_INT 1000
29080: PPUSH
29081: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29085: LD_VAR 0 3
29089: PPUSH
29090: LD_INT 81
29092: PUSH
29093: LD_OWVAR 2
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 91
29104: PUSH
29105: LD_VAR 0 3
29109: PUSH
29110: LD_INT 30
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PPUSH
29122: CALL_OW 69
29126: PPUSH
29127: LD_VAR 0 3
29131: PPUSH
29132: CALL_OW 74
29136: PPUSH
29137: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29141: LD_VAR 0 2
29145: PUSH
29146: LD_INT 80
29148: GREATER
29149: PUSH
29150: LD_VAR 0 3
29154: PPUSH
29155: CALL_OW 301
29159: OR
29160: IFFALSE 29037
// if un then
29162: LD_VAR 0 3
29166: IFFALSE 29177
// RemoveUnit ( un ) ;
29168: LD_VAR 0 3
29172: PPUSH
29173: CALL_OW 64
// end ;
29177: PPOPN 3
29179: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29180: LD_EXP 92
29184: IFFALSE 29300
29186: GO 29188
29188: DISABLE
29189: LD_INT 0
29191: PPUSH
29192: PPUSH
29193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29194: LD_ADDR_VAR 0 2
29198: PUSH
29199: LD_INT 81
29201: PUSH
29202: LD_OWVAR 2
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 21
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PPUSH
29225: CALL_OW 69
29229: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29230: LD_STRING playComputer()
29232: PPUSH
29233: CALL_OW 559
// if not tmp then
29237: LD_VAR 0 2
29241: NOT
29242: IFFALSE 29246
// exit ;
29244: GO 29300
// for i in tmp do
29246: LD_ADDR_VAR 0 1
29250: PUSH
29251: LD_VAR 0 2
29255: PUSH
29256: FOR_IN
29257: IFFALSE 29298
// for j := 1 to 4 do
29259: LD_ADDR_VAR 0 3
29263: PUSH
29264: DOUBLE
29265: LD_INT 1
29267: DEC
29268: ST_TO_ADDR
29269: LD_INT 4
29271: PUSH
29272: FOR_TO
29273: IFFALSE 29294
// SetSkill ( i , j , 10 ) ;
29275: LD_VAR 0 1
29279: PPUSH
29280: LD_VAR 0 3
29284: PPUSH
29285: LD_INT 10
29287: PPUSH
29288: CALL_OW 237
29292: GO 29272
29294: POP
29295: POP
29296: GO 29256
29298: POP
29299: POP
// end ;
29300: PPOPN 3
29302: END
// every 0 0$1 trigger s30 do var i , tmp ;
29303: LD_EXP 93
29307: IFFALSE 29376
29309: GO 29311
29311: DISABLE
29312: LD_INT 0
29314: PPUSH
29315: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29316: LD_ADDR_VAR 0 2
29320: PUSH
29321: LD_INT 22
29323: PUSH
29324: LD_OWVAR 2
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PPUSH
29333: CALL_OW 69
29337: ST_TO_ADDR
// if not tmp then
29338: LD_VAR 0 2
29342: NOT
29343: IFFALSE 29347
// exit ;
29345: GO 29376
// for i in tmp do
29347: LD_ADDR_VAR 0 1
29351: PUSH
29352: LD_VAR 0 2
29356: PUSH
29357: FOR_IN
29358: IFFALSE 29374
// SetLives ( i , 300 ) ;
29360: LD_VAR 0 1
29364: PPUSH
29365: LD_INT 300
29367: PPUSH
29368: CALL_OW 234
29372: GO 29357
29374: POP
29375: POP
// end ;
29376: PPOPN 2
29378: END
// every 0 0$1 trigger s60 do var i , tmp ;
29379: LD_EXP 94
29383: IFFALSE 29452
29385: GO 29387
29387: DISABLE
29388: LD_INT 0
29390: PPUSH
29391: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29392: LD_ADDR_VAR 0 2
29396: PUSH
29397: LD_INT 22
29399: PUSH
29400: LD_OWVAR 2
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 69
29413: ST_TO_ADDR
// if not tmp then
29414: LD_VAR 0 2
29418: NOT
29419: IFFALSE 29423
// exit ;
29421: GO 29452
// for i in tmp do
29423: LD_ADDR_VAR 0 1
29427: PUSH
29428: LD_VAR 0 2
29432: PUSH
29433: FOR_IN
29434: IFFALSE 29450
// SetLives ( i , 600 ) ;
29436: LD_VAR 0 1
29440: PPUSH
29441: LD_INT 600
29443: PPUSH
29444: CALL_OW 234
29448: GO 29433
29450: POP
29451: POP
// end ;
29452: PPOPN 2
29454: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29455: LD_INT 0
29457: PPUSH
// case cmd of 301 :
29458: LD_VAR 0 1
29462: PUSH
29463: LD_INT 301
29465: DOUBLE
29466: EQUAL
29467: IFTRUE 29471
29469: GO 29503
29471: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29472: LD_VAR 0 6
29476: PPUSH
29477: LD_VAR 0 7
29481: PPUSH
29482: LD_VAR 0 8
29486: PPUSH
29487: LD_VAR 0 4
29491: PPUSH
29492: LD_VAR 0 5
29496: PPUSH
29497: CALL 30712 0 5
29501: GO 29624
29503: LD_INT 302
29505: DOUBLE
29506: EQUAL
29507: IFTRUE 29511
29509: GO 29548
29511: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29512: LD_VAR 0 6
29516: PPUSH
29517: LD_VAR 0 7
29521: PPUSH
29522: LD_VAR 0 8
29526: PPUSH
29527: LD_VAR 0 9
29531: PPUSH
29532: LD_VAR 0 4
29536: PPUSH
29537: LD_VAR 0 5
29541: PPUSH
29542: CALL 30803 0 6
29546: GO 29624
29548: LD_INT 303
29550: DOUBLE
29551: EQUAL
29552: IFTRUE 29556
29554: GO 29593
29556: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29557: LD_VAR 0 6
29561: PPUSH
29562: LD_VAR 0 7
29566: PPUSH
29567: LD_VAR 0 8
29571: PPUSH
29572: LD_VAR 0 9
29576: PPUSH
29577: LD_VAR 0 4
29581: PPUSH
29582: LD_VAR 0 5
29586: PPUSH
29587: CALL 29629 0 6
29591: GO 29624
29593: LD_INT 304
29595: DOUBLE
29596: EQUAL
29597: IFTRUE 29601
29599: GO 29623
29601: POP
// hHackTeleport ( unit , x , y ) ; end ;
29602: LD_VAR 0 2
29606: PPUSH
29607: LD_VAR 0 4
29611: PPUSH
29612: LD_VAR 0 5
29616: PPUSH
29617: CALL 31396 0 3
29621: GO 29624
29623: POP
// end ;
29624: LD_VAR 0 12
29628: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29629: LD_INT 0
29631: PPUSH
29632: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29633: LD_VAR 0 1
29637: PUSH
29638: LD_INT 1
29640: LESS
29641: PUSH
29642: LD_VAR 0 1
29646: PUSH
29647: LD_INT 3
29649: GREATER
29650: OR
29651: PUSH
29652: LD_VAR 0 5
29656: PPUSH
29657: LD_VAR 0 6
29661: PPUSH
29662: CALL_OW 428
29666: OR
29667: IFFALSE 29671
// exit ;
29669: GO 30399
// uc_side := your_side ;
29671: LD_ADDR_OWVAR 20
29675: PUSH
29676: LD_OWVAR 2
29680: ST_TO_ADDR
// uc_nation := nation ;
29681: LD_ADDR_OWVAR 21
29685: PUSH
29686: LD_VAR 0 1
29690: ST_TO_ADDR
// bc_level = 1 ;
29691: LD_ADDR_OWVAR 43
29695: PUSH
29696: LD_INT 1
29698: ST_TO_ADDR
// case btype of 1 :
29699: LD_VAR 0 2
29703: PUSH
29704: LD_INT 1
29706: DOUBLE
29707: EQUAL
29708: IFTRUE 29712
29710: GO 29723
29712: POP
// bc_type := b_depot ; 2 :
29713: LD_ADDR_OWVAR 42
29717: PUSH
29718: LD_INT 0
29720: ST_TO_ADDR
29721: GO 30343
29723: LD_INT 2
29725: DOUBLE
29726: EQUAL
29727: IFTRUE 29731
29729: GO 29742
29731: POP
// bc_type := b_warehouse ; 3 :
29732: LD_ADDR_OWVAR 42
29736: PUSH
29737: LD_INT 1
29739: ST_TO_ADDR
29740: GO 30343
29742: LD_INT 3
29744: DOUBLE
29745: EQUAL
29746: IFTRUE 29750
29748: GO 29761
29750: POP
// bc_type := b_lab ; 4 .. 9 :
29751: LD_ADDR_OWVAR 42
29755: PUSH
29756: LD_INT 6
29758: ST_TO_ADDR
29759: GO 30343
29761: LD_INT 4
29763: DOUBLE
29764: GREATEREQUAL
29765: IFFALSE 29773
29767: LD_INT 9
29769: DOUBLE
29770: LESSEQUAL
29771: IFTRUE 29775
29773: GO 29835
29775: POP
// begin bc_type := b_lab_half ;
29776: LD_ADDR_OWVAR 42
29780: PUSH
29781: LD_INT 7
29783: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29784: LD_ADDR_OWVAR 44
29788: PUSH
29789: LD_INT 10
29791: PUSH
29792: LD_INT 11
29794: PUSH
29795: LD_INT 12
29797: PUSH
29798: LD_INT 15
29800: PUSH
29801: LD_INT 14
29803: PUSH
29804: LD_INT 13
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: PUSH
29815: LD_VAR 0 2
29819: PUSH
29820: LD_INT 3
29822: MINUS
29823: ARRAY
29824: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
29825: LD_ADDR_OWVAR 45
29829: PUSH
29830: LD_INT 9
29832: ST_TO_ADDR
// end ; 10 .. 13 :
29833: GO 30343
29835: LD_INT 10
29837: DOUBLE
29838: GREATEREQUAL
29839: IFFALSE 29847
29841: LD_INT 13
29843: DOUBLE
29844: LESSEQUAL
29845: IFTRUE 29849
29847: GO 29926
29849: POP
// begin bc_type := b_lab_full ;
29850: LD_ADDR_OWVAR 42
29854: PUSH
29855: LD_INT 8
29857: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29858: LD_ADDR_OWVAR 44
29862: PUSH
29863: LD_INT 10
29865: PUSH
29866: LD_INT 12
29868: PUSH
29869: LD_INT 14
29871: PUSH
29872: LD_INT 13
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: PUSH
29881: LD_VAR 0 2
29885: PUSH
29886: LD_INT 9
29888: MINUS
29889: ARRAY
29890: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29891: LD_ADDR_OWVAR 45
29895: PUSH
29896: LD_INT 11
29898: PUSH
29899: LD_INT 15
29901: PUSH
29902: LD_INT 12
29904: PUSH
29905: LD_INT 15
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: PUSH
29914: LD_VAR 0 2
29918: PUSH
29919: LD_INT 9
29921: MINUS
29922: ARRAY
29923: ST_TO_ADDR
// end ; 14 :
29924: GO 30343
29926: LD_INT 14
29928: DOUBLE
29929: EQUAL
29930: IFTRUE 29934
29932: GO 29945
29934: POP
// bc_type := b_workshop ; 15 :
29935: LD_ADDR_OWVAR 42
29939: PUSH
29940: LD_INT 2
29942: ST_TO_ADDR
29943: GO 30343
29945: LD_INT 15
29947: DOUBLE
29948: EQUAL
29949: IFTRUE 29953
29951: GO 29964
29953: POP
// bc_type := b_factory ; 16 :
29954: LD_ADDR_OWVAR 42
29958: PUSH
29959: LD_INT 3
29961: ST_TO_ADDR
29962: GO 30343
29964: LD_INT 16
29966: DOUBLE
29967: EQUAL
29968: IFTRUE 29972
29970: GO 29983
29972: POP
// bc_type := b_ext_gun ; 17 :
29973: LD_ADDR_OWVAR 42
29977: PUSH
29978: LD_INT 17
29980: ST_TO_ADDR
29981: GO 30343
29983: LD_INT 17
29985: DOUBLE
29986: EQUAL
29987: IFTRUE 29991
29989: GO 30019
29991: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29992: LD_ADDR_OWVAR 42
29996: PUSH
29997: LD_INT 19
29999: PUSH
30000: LD_INT 23
30002: PUSH
30003: LD_INT 19
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: PUSH
30011: LD_VAR 0 1
30015: ARRAY
30016: ST_TO_ADDR
30017: GO 30343
30019: LD_INT 18
30021: DOUBLE
30022: EQUAL
30023: IFTRUE 30027
30025: GO 30038
30027: POP
// bc_type := b_ext_radar ; 19 :
30028: LD_ADDR_OWVAR 42
30032: PUSH
30033: LD_INT 20
30035: ST_TO_ADDR
30036: GO 30343
30038: LD_INT 19
30040: DOUBLE
30041: EQUAL
30042: IFTRUE 30046
30044: GO 30057
30046: POP
// bc_type := b_ext_radio ; 20 :
30047: LD_ADDR_OWVAR 42
30051: PUSH
30052: LD_INT 22
30054: ST_TO_ADDR
30055: GO 30343
30057: LD_INT 20
30059: DOUBLE
30060: EQUAL
30061: IFTRUE 30065
30063: GO 30076
30065: POP
// bc_type := b_ext_siberium ; 21 :
30066: LD_ADDR_OWVAR 42
30070: PUSH
30071: LD_INT 21
30073: ST_TO_ADDR
30074: GO 30343
30076: LD_INT 21
30078: DOUBLE
30079: EQUAL
30080: IFTRUE 30084
30082: GO 30095
30084: POP
// bc_type := b_ext_computer ; 22 :
30085: LD_ADDR_OWVAR 42
30089: PUSH
30090: LD_INT 24
30092: ST_TO_ADDR
30093: GO 30343
30095: LD_INT 22
30097: DOUBLE
30098: EQUAL
30099: IFTRUE 30103
30101: GO 30114
30103: POP
// bc_type := b_ext_track ; 23 :
30104: LD_ADDR_OWVAR 42
30108: PUSH
30109: LD_INT 16
30111: ST_TO_ADDR
30112: GO 30343
30114: LD_INT 23
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 30133
30122: POP
// bc_type := b_ext_laser ; 24 :
30123: LD_ADDR_OWVAR 42
30127: PUSH
30128: LD_INT 25
30130: ST_TO_ADDR
30131: GO 30343
30133: LD_INT 24
30135: DOUBLE
30136: EQUAL
30137: IFTRUE 30141
30139: GO 30152
30141: POP
// bc_type := b_control_tower ; 25 :
30142: LD_ADDR_OWVAR 42
30146: PUSH
30147: LD_INT 36
30149: ST_TO_ADDR
30150: GO 30343
30152: LD_INT 25
30154: DOUBLE
30155: EQUAL
30156: IFTRUE 30160
30158: GO 30171
30160: POP
// bc_type := b_breastwork ; 26 :
30161: LD_ADDR_OWVAR 42
30165: PUSH
30166: LD_INT 31
30168: ST_TO_ADDR
30169: GO 30343
30171: LD_INT 26
30173: DOUBLE
30174: EQUAL
30175: IFTRUE 30179
30177: GO 30190
30179: POP
// bc_type := b_bunker ; 27 :
30180: LD_ADDR_OWVAR 42
30184: PUSH
30185: LD_INT 32
30187: ST_TO_ADDR
30188: GO 30343
30190: LD_INT 27
30192: DOUBLE
30193: EQUAL
30194: IFTRUE 30198
30196: GO 30209
30198: POP
// bc_type := b_turret ; 28 :
30199: LD_ADDR_OWVAR 42
30203: PUSH
30204: LD_INT 33
30206: ST_TO_ADDR
30207: GO 30343
30209: LD_INT 28
30211: DOUBLE
30212: EQUAL
30213: IFTRUE 30217
30215: GO 30228
30217: POP
// bc_type := b_armoury ; 29 :
30218: LD_ADDR_OWVAR 42
30222: PUSH
30223: LD_INT 4
30225: ST_TO_ADDR
30226: GO 30343
30228: LD_INT 29
30230: DOUBLE
30231: EQUAL
30232: IFTRUE 30236
30234: GO 30247
30236: POP
// bc_type := b_barracks ; 30 :
30237: LD_ADDR_OWVAR 42
30241: PUSH
30242: LD_INT 5
30244: ST_TO_ADDR
30245: GO 30343
30247: LD_INT 30
30249: DOUBLE
30250: EQUAL
30251: IFTRUE 30255
30253: GO 30266
30255: POP
// bc_type := b_solar_power ; 31 :
30256: LD_ADDR_OWVAR 42
30260: PUSH
30261: LD_INT 27
30263: ST_TO_ADDR
30264: GO 30343
30266: LD_INT 31
30268: DOUBLE
30269: EQUAL
30270: IFTRUE 30274
30272: GO 30285
30274: POP
// bc_type := b_oil_power ; 32 :
30275: LD_ADDR_OWVAR 42
30279: PUSH
30280: LD_INT 26
30282: ST_TO_ADDR
30283: GO 30343
30285: LD_INT 32
30287: DOUBLE
30288: EQUAL
30289: IFTRUE 30293
30291: GO 30304
30293: POP
// bc_type := b_siberite_power ; 33 :
30294: LD_ADDR_OWVAR 42
30298: PUSH
30299: LD_INT 28
30301: ST_TO_ADDR
30302: GO 30343
30304: LD_INT 33
30306: DOUBLE
30307: EQUAL
30308: IFTRUE 30312
30310: GO 30323
30312: POP
// bc_type := b_oil_mine ; 34 :
30313: LD_ADDR_OWVAR 42
30317: PUSH
30318: LD_INT 29
30320: ST_TO_ADDR
30321: GO 30343
30323: LD_INT 34
30325: DOUBLE
30326: EQUAL
30327: IFTRUE 30331
30329: GO 30342
30331: POP
// bc_type := b_siberite_mine ; end ;
30332: LD_ADDR_OWVAR 42
30336: PUSH
30337: LD_INT 30
30339: ST_TO_ADDR
30340: GO 30343
30342: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30343: LD_ADDR_VAR 0 8
30347: PUSH
30348: LD_VAR 0 5
30352: PPUSH
30353: LD_VAR 0 6
30357: PPUSH
30358: LD_VAR 0 3
30362: PPUSH
30363: CALL_OW 47
30367: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30368: LD_OWVAR 42
30372: PUSH
30373: LD_INT 32
30375: PUSH
30376: LD_INT 33
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: IN
30383: IFFALSE 30399
// PlaceWeaponTurret ( b , weapon ) ;
30385: LD_VAR 0 8
30389: PPUSH
30390: LD_VAR 0 4
30394: PPUSH
30395: CALL_OW 431
// end ;
30399: LD_VAR 0 7
30403: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30404: LD_INT 0
30406: PPUSH
30407: PPUSH
30408: PPUSH
30409: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30410: LD_ADDR_VAR 0 4
30414: PUSH
30415: LD_INT 22
30417: PUSH
30418: LD_OWVAR 2
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: PUSH
30430: LD_INT 30
30432: PUSH
30433: LD_INT 0
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 30
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PPUSH
30459: CALL_OW 69
30463: ST_TO_ADDR
// if not tmp then
30464: LD_VAR 0 4
30468: NOT
30469: IFFALSE 30473
// exit ;
30471: GO 30532
// for i in tmp do
30473: LD_ADDR_VAR 0 2
30477: PUSH
30478: LD_VAR 0 4
30482: PUSH
30483: FOR_IN
30484: IFFALSE 30530
// for j = 1 to 3 do
30486: LD_ADDR_VAR 0 3
30490: PUSH
30491: DOUBLE
30492: LD_INT 1
30494: DEC
30495: ST_TO_ADDR
30496: LD_INT 3
30498: PUSH
30499: FOR_TO
30500: IFFALSE 30526
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30502: LD_VAR 0 2
30506: PPUSH
30507: CALL_OW 274
30511: PPUSH
30512: LD_VAR 0 3
30516: PPUSH
30517: LD_INT 99999
30519: PPUSH
30520: CALL_OW 277
30524: GO 30499
30526: POP
30527: POP
30528: GO 30483
30530: POP
30531: POP
// end ;
30532: LD_VAR 0 1
30536: RET
// export function hHackSetLevel10 ; var i , j ; begin
30537: LD_INT 0
30539: PPUSH
30540: PPUSH
30541: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30542: LD_ADDR_VAR 0 2
30546: PUSH
30547: LD_INT 21
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PPUSH
30557: CALL_OW 69
30561: PUSH
30562: FOR_IN
30563: IFFALSE 30615
// if IsSelected ( i ) then
30565: LD_VAR 0 2
30569: PPUSH
30570: CALL_OW 306
30574: IFFALSE 30613
// begin for j := 1 to 4 do
30576: LD_ADDR_VAR 0 3
30580: PUSH
30581: DOUBLE
30582: LD_INT 1
30584: DEC
30585: ST_TO_ADDR
30586: LD_INT 4
30588: PUSH
30589: FOR_TO
30590: IFFALSE 30611
// SetSkill ( i , j , 10 ) ;
30592: LD_VAR 0 2
30596: PPUSH
30597: LD_VAR 0 3
30601: PPUSH
30602: LD_INT 10
30604: PPUSH
30605: CALL_OW 237
30609: GO 30589
30611: POP
30612: POP
// end ;
30613: GO 30562
30615: POP
30616: POP
// end ;
30617: LD_VAR 0 1
30621: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30622: LD_INT 0
30624: PPUSH
30625: PPUSH
30626: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30627: LD_ADDR_VAR 0 2
30631: PUSH
30632: LD_INT 22
30634: PUSH
30635: LD_OWVAR 2
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 21
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PPUSH
30658: CALL_OW 69
30662: PUSH
30663: FOR_IN
30664: IFFALSE 30705
// begin for j := 1 to 4 do
30666: LD_ADDR_VAR 0 3
30670: PUSH
30671: DOUBLE
30672: LD_INT 1
30674: DEC
30675: ST_TO_ADDR
30676: LD_INT 4
30678: PUSH
30679: FOR_TO
30680: IFFALSE 30701
// SetSkill ( i , j , 10 ) ;
30682: LD_VAR 0 2
30686: PPUSH
30687: LD_VAR 0 3
30691: PPUSH
30692: LD_INT 10
30694: PPUSH
30695: CALL_OW 237
30699: GO 30679
30701: POP
30702: POP
// end ;
30703: GO 30663
30705: POP
30706: POP
// end ;
30707: LD_VAR 0 1
30711: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30712: LD_INT 0
30714: PPUSH
// uc_side := your_side ;
30715: LD_ADDR_OWVAR 20
30719: PUSH
30720: LD_OWVAR 2
30724: ST_TO_ADDR
// uc_nation := nation ;
30725: LD_ADDR_OWVAR 21
30729: PUSH
30730: LD_VAR 0 1
30734: ST_TO_ADDR
// InitHc ;
30735: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30739: LD_INT 0
30741: PPUSH
30742: LD_VAR 0 2
30746: PPUSH
30747: LD_VAR 0 3
30751: PPUSH
30752: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30756: LD_VAR 0 4
30760: PPUSH
30761: LD_VAR 0 5
30765: PPUSH
30766: CALL_OW 428
30770: PUSH
30771: LD_INT 0
30773: EQUAL
30774: IFFALSE 30798
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30776: CALL_OW 44
30780: PPUSH
30781: LD_VAR 0 4
30785: PPUSH
30786: LD_VAR 0 5
30790: PPUSH
30791: LD_INT 1
30793: PPUSH
30794: CALL_OW 48
// end ;
30798: LD_VAR 0 6
30802: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30803: LD_INT 0
30805: PPUSH
30806: PPUSH
// uc_side := your_side ;
30807: LD_ADDR_OWVAR 20
30811: PUSH
30812: LD_OWVAR 2
30816: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30817: LD_VAR 0 1
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: LD_INT 3
30830: PUSH
30831: LD_INT 4
30833: PUSH
30834: LD_INT 5
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: IN
30844: IFFALSE 30856
// uc_nation := nation_american else
30846: LD_ADDR_OWVAR 21
30850: PUSH
30851: LD_INT 1
30853: ST_TO_ADDR
30854: GO 30899
// if chassis in [ 11 , 12 , 13 , 14 ] then
30856: LD_VAR 0 1
30860: PUSH
30861: LD_INT 11
30863: PUSH
30864: LD_INT 12
30866: PUSH
30867: LD_INT 13
30869: PUSH
30870: LD_INT 14
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: IN
30879: IFFALSE 30891
// uc_nation := nation_arabian else
30881: LD_ADDR_OWVAR 21
30885: PUSH
30886: LD_INT 2
30888: ST_TO_ADDR
30889: GO 30899
// uc_nation := nation_russian ;
30891: LD_ADDR_OWVAR 21
30895: PUSH
30896: LD_INT 3
30898: ST_TO_ADDR
// vc_chassis := chassis ;
30899: LD_ADDR_OWVAR 37
30903: PUSH
30904: LD_VAR 0 1
30908: ST_TO_ADDR
// vc_engine := engine ;
30909: LD_ADDR_OWVAR 39
30913: PUSH
30914: LD_VAR 0 2
30918: ST_TO_ADDR
// vc_control := control ;
30919: LD_ADDR_OWVAR 38
30923: PUSH
30924: LD_VAR 0 3
30928: ST_TO_ADDR
// vc_weapon := weapon ;
30929: LD_ADDR_OWVAR 40
30933: PUSH
30934: LD_VAR 0 4
30938: ST_TO_ADDR
// un := CreateVehicle ;
30939: LD_ADDR_VAR 0 8
30943: PUSH
30944: CALL_OW 45
30948: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30949: LD_VAR 0 8
30953: PPUSH
30954: LD_INT 0
30956: PPUSH
30957: LD_INT 5
30959: PPUSH
30960: CALL_OW 12
30964: PPUSH
30965: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30969: LD_VAR 0 8
30973: PPUSH
30974: LD_VAR 0 5
30978: PPUSH
30979: LD_VAR 0 6
30983: PPUSH
30984: LD_INT 1
30986: PPUSH
30987: CALL_OW 48
// end ;
30991: LD_VAR 0 7
30995: RET
// export hInvincible ; every 1 do
30996: GO 30998
30998: DISABLE
// hInvincible := [ ] ;
30999: LD_ADDR_EXP 95
31003: PUSH
31004: EMPTY
31005: ST_TO_ADDR
31006: END
// every 10 do var i ;
31007: GO 31009
31009: DISABLE
31010: LD_INT 0
31012: PPUSH
// begin enable ;
31013: ENABLE
// if not hInvincible then
31014: LD_EXP 95
31018: NOT
31019: IFFALSE 31023
// exit ;
31021: GO 31067
// for i in hInvincible do
31023: LD_ADDR_VAR 0 1
31027: PUSH
31028: LD_EXP 95
31032: PUSH
31033: FOR_IN
31034: IFFALSE 31065
// if GetLives ( i ) < 1000 then
31036: LD_VAR 0 1
31040: PPUSH
31041: CALL_OW 256
31045: PUSH
31046: LD_INT 1000
31048: LESS
31049: IFFALSE 31063
// SetLives ( i , 1000 ) ;
31051: LD_VAR 0 1
31055: PPUSH
31056: LD_INT 1000
31058: PPUSH
31059: CALL_OW 234
31063: GO 31033
31065: POP
31066: POP
// end ;
31067: PPOPN 1
31069: END
// export function hHackInvincible ; var i ; begin
31070: LD_INT 0
31072: PPUSH
31073: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31074: LD_ADDR_VAR 0 2
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: LD_INT 21
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 21
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: PPUSH
31107: CALL_OW 69
31111: PUSH
31112: FOR_IN
31113: IFFALSE 31174
// if IsSelected ( i ) then
31115: LD_VAR 0 2
31119: PPUSH
31120: CALL_OW 306
31124: IFFALSE 31172
// begin if i in hInvincible then
31126: LD_VAR 0 2
31130: PUSH
31131: LD_EXP 95
31135: IN
31136: IFFALSE 31156
// hInvincible := hInvincible diff i else
31138: LD_ADDR_EXP 95
31142: PUSH
31143: LD_EXP 95
31147: PUSH
31148: LD_VAR 0 2
31152: DIFF
31153: ST_TO_ADDR
31154: GO 31172
// hInvincible := hInvincible union i ;
31156: LD_ADDR_EXP 95
31160: PUSH
31161: LD_EXP 95
31165: PUSH
31166: LD_VAR 0 2
31170: UNION
31171: ST_TO_ADDR
// end ;
31172: GO 31112
31174: POP
31175: POP
// end ;
31176: LD_VAR 0 1
31180: RET
// export function hHackInvisible ; var i , j ; begin
31181: LD_INT 0
31183: PPUSH
31184: PPUSH
31185: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31186: LD_ADDR_VAR 0 2
31190: PUSH
31191: LD_INT 21
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PPUSH
31201: CALL_OW 69
31205: PUSH
31206: FOR_IN
31207: IFFALSE 31231
// if IsSelected ( i ) then
31209: LD_VAR 0 2
31213: PPUSH
31214: CALL_OW 306
31218: IFFALSE 31229
// ComForceInvisible ( i ) ;
31220: LD_VAR 0 2
31224: PPUSH
31225: CALL_OW 496
31229: GO 31206
31231: POP
31232: POP
// end ;
31233: LD_VAR 0 1
31237: RET
// export function hHackChangeYourSide ; begin
31238: LD_INT 0
31240: PPUSH
// if your_side = 8 then
31241: LD_OWVAR 2
31245: PUSH
31246: LD_INT 8
31248: EQUAL
31249: IFFALSE 31261
// your_side := 0 else
31251: LD_ADDR_OWVAR 2
31255: PUSH
31256: LD_INT 0
31258: ST_TO_ADDR
31259: GO 31275
// your_side := your_side + 1 ;
31261: LD_ADDR_OWVAR 2
31265: PUSH
31266: LD_OWVAR 2
31270: PUSH
31271: LD_INT 1
31273: PLUS
31274: ST_TO_ADDR
// end ;
31275: LD_VAR 0 1
31279: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31280: LD_INT 0
31282: PPUSH
31283: PPUSH
31284: PPUSH
// for i in all_units do
31285: LD_ADDR_VAR 0 2
31289: PUSH
31290: LD_OWVAR 3
31294: PUSH
31295: FOR_IN
31296: IFFALSE 31374
// if IsSelected ( i ) then
31298: LD_VAR 0 2
31302: PPUSH
31303: CALL_OW 306
31307: IFFALSE 31372
// begin j := GetSide ( i ) ;
31309: LD_ADDR_VAR 0 3
31313: PUSH
31314: LD_VAR 0 2
31318: PPUSH
31319: CALL_OW 255
31323: ST_TO_ADDR
// if j = 8 then
31324: LD_VAR 0 3
31328: PUSH
31329: LD_INT 8
31331: EQUAL
31332: IFFALSE 31344
// j := 0 else
31334: LD_ADDR_VAR 0 3
31338: PUSH
31339: LD_INT 0
31341: ST_TO_ADDR
31342: GO 31358
// j := j + 1 ;
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_VAR 0 3
31353: PUSH
31354: LD_INT 1
31356: PLUS
31357: ST_TO_ADDR
// SetSide ( i , j ) ;
31358: LD_VAR 0 2
31362: PPUSH
31363: LD_VAR 0 3
31367: PPUSH
31368: CALL_OW 235
// end ;
31372: GO 31295
31374: POP
31375: POP
// end ;
31376: LD_VAR 0 1
31380: RET
// export function hHackFog ; begin
31381: LD_INT 0
31383: PPUSH
// FogOff ( true ) ;
31384: LD_INT 1
31386: PPUSH
31387: CALL_OW 344
// end ;
31391: LD_VAR 0 1
31395: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31396: LD_INT 0
31398: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31399: LD_VAR 0 1
31403: PPUSH
31404: LD_VAR 0 2
31408: PPUSH
31409: LD_VAR 0 3
31413: PPUSH
31414: LD_INT 1
31416: PPUSH
31417: LD_INT 1
31419: PPUSH
31420: CALL_OW 483
// CenterOnXY ( x , y ) ;
31424: LD_VAR 0 2
31428: PPUSH
31429: LD_VAR 0 3
31433: PPUSH
31434: CALL_OW 84
// end ;
31438: LD_VAR 0 4
31442: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31443: LD_INT 0
31445: PPUSH
31446: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31447: LD_VAR 0 1
31451: NOT
31452: PUSH
31453: LD_VAR 0 2
31457: PPUSH
31458: LD_VAR 0 3
31462: PPUSH
31463: CALL_OW 488
31467: NOT
31468: OR
31469: PUSH
31470: LD_VAR 0 1
31474: PPUSH
31475: CALL_OW 266
31479: PUSH
31480: LD_INT 3
31482: NONEQUAL
31483: PUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 247
31493: PUSH
31494: LD_INT 1
31496: EQUAL
31497: NOT
31498: AND
31499: OR
31500: IFFALSE 31504
// exit ;
31502: GO 31653
// if GetType ( factory ) = unit_human then
31504: LD_VAR 0 1
31508: PPUSH
31509: CALL_OW 247
31513: PUSH
31514: LD_INT 1
31516: EQUAL
31517: IFFALSE 31534
// factory := IsInUnit ( factory ) ;
31519: LD_ADDR_VAR 0 1
31523: PUSH
31524: LD_VAR 0 1
31528: PPUSH
31529: CALL_OW 310
31533: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31534: LD_VAR 0 1
31538: PPUSH
31539: CALL_OW 266
31543: PUSH
31544: LD_INT 3
31546: NONEQUAL
31547: IFFALSE 31551
// exit ;
31549: GO 31653
// if HexInfo ( x , y ) = factory then
31551: LD_VAR 0 2
31555: PPUSH
31556: LD_VAR 0 3
31560: PPUSH
31561: CALL_OW 428
31565: PUSH
31566: LD_VAR 0 1
31570: EQUAL
31571: IFFALSE 31598
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31573: LD_ADDR_EXP 96
31577: PUSH
31578: LD_EXP 96
31582: PPUSH
31583: LD_VAR 0 1
31587: PPUSH
31588: LD_INT 0
31590: PPUSH
31591: CALL_OW 1
31595: ST_TO_ADDR
31596: GO 31649
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31598: LD_ADDR_EXP 96
31602: PUSH
31603: LD_EXP 96
31607: PPUSH
31608: LD_VAR 0 1
31612: PPUSH
31613: LD_VAR 0 1
31617: PPUSH
31618: CALL_OW 255
31622: PUSH
31623: LD_VAR 0 1
31627: PUSH
31628: LD_VAR 0 2
31632: PUSH
31633: LD_VAR 0 3
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: PPUSH
31644: CALL_OW 1
31648: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31649: CALL 31658 0 0
// end ;
31653: LD_VAR 0 4
31657: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31658: LD_INT 0
31660: PPUSH
31661: PPUSH
31662: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31663: LD_STRING resetFactoryWaypoint();
31665: PPUSH
31666: CALL_OW 559
// if factoryWaypoints then
31670: LD_EXP 96
31674: IFFALSE 31800
// begin list := PrepareArray ( factoryWaypoints ) ;
31676: LD_ADDR_VAR 0 3
31680: PUSH
31681: LD_EXP 96
31685: PPUSH
31686: CALL 79097 0 1
31690: ST_TO_ADDR
// for i := 1 to list do
31691: LD_ADDR_VAR 0 2
31695: PUSH
31696: DOUBLE
31697: LD_INT 1
31699: DEC
31700: ST_TO_ADDR
31701: LD_VAR 0 3
31705: PUSH
31706: FOR_TO
31707: IFFALSE 31798
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31709: LD_STRING setFactoryWaypointXY(
31711: PUSH
31712: LD_VAR 0 3
31716: PUSH
31717: LD_VAR 0 2
31721: ARRAY
31722: PUSH
31723: LD_INT 1
31725: ARRAY
31726: STR
31727: PUSH
31728: LD_STRING ,
31730: STR
31731: PUSH
31732: LD_VAR 0 3
31736: PUSH
31737: LD_VAR 0 2
31741: ARRAY
31742: PUSH
31743: LD_INT 2
31745: ARRAY
31746: STR
31747: PUSH
31748: LD_STRING ,
31750: STR
31751: PUSH
31752: LD_VAR 0 3
31756: PUSH
31757: LD_VAR 0 2
31761: ARRAY
31762: PUSH
31763: LD_INT 3
31765: ARRAY
31766: STR
31767: PUSH
31768: LD_STRING ,
31770: STR
31771: PUSH
31772: LD_VAR 0 3
31776: PUSH
31777: LD_VAR 0 2
31781: ARRAY
31782: PUSH
31783: LD_INT 4
31785: ARRAY
31786: STR
31787: PUSH
31788: LD_STRING )
31790: STR
31791: PPUSH
31792: CALL_OW 559
31796: GO 31706
31798: POP
31799: POP
// end ; end ;
31800: LD_VAR 0 1
31804: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31805: LD_INT 0
31807: PPUSH
// if HexInfo ( x , y ) = warehouse then
31808: LD_VAR 0 2
31812: PPUSH
31813: LD_VAR 0 3
31817: PPUSH
31818: CALL_OW 428
31822: PUSH
31823: LD_VAR 0 1
31827: EQUAL
31828: IFFALSE 31855
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31830: LD_ADDR_EXP 97
31834: PUSH
31835: LD_EXP 97
31839: PPUSH
31840: LD_VAR 0 1
31844: PPUSH
31845: LD_INT 0
31847: PPUSH
31848: CALL_OW 1
31852: ST_TO_ADDR
31853: GO 31906
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31855: LD_ADDR_EXP 97
31859: PUSH
31860: LD_EXP 97
31864: PPUSH
31865: LD_VAR 0 1
31869: PPUSH
31870: LD_VAR 0 1
31874: PPUSH
31875: CALL_OW 255
31879: PUSH
31880: LD_VAR 0 1
31884: PUSH
31885: LD_VAR 0 2
31889: PUSH
31890: LD_VAR 0 3
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: PPUSH
31901: CALL_OW 1
31905: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31906: CALL 31915 0 0
// end ;
31910: LD_VAR 0 4
31914: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31915: LD_INT 0
31917: PPUSH
31918: PPUSH
31919: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31920: LD_STRING resetWarehouseGatheringPoints();
31922: PPUSH
31923: CALL_OW 559
// if warehouseGatheringPoints then
31927: LD_EXP 97
31931: IFFALSE 32057
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31933: LD_ADDR_VAR 0 3
31937: PUSH
31938: LD_EXP 97
31942: PPUSH
31943: CALL 79097 0 1
31947: ST_TO_ADDR
// for i := 1 to list do
31948: LD_ADDR_VAR 0 2
31952: PUSH
31953: DOUBLE
31954: LD_INT 1
31956: DEC
31957: ST_TO_ADDR
31958: LD_VAR 0 3
31962: PUSH
31963: FOR_TO
31964: IFFALSE 32055
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31966: LD_STRING setWarehouseGatheringPointXY(
31968: PUSH
31969: LD_VAR 0 3
31973: PUSH
31974: LD_VAR 0 2
31978: ARRAY
31979: PUSH
31980: LD_INT 1
31982: ARRAY
31983: STR
31984: PUSH
31985: LD_STRING ,
31987: STR
31988: PUSH
31989: LD_VAR 0 3
31993: PUSH
31994: LD_VAR 0 2
31998: ARRAY
31999: PUSH
32000: LD_INT 2
32002: ARRAY
32003: STR
32004: PUSH
32005: LD_STRING ,
32007: STR
32008: PUSH
32009: LD_VAR 0 3
32013: PUSH
32014: LD_VAR 0 2
32018: ARRAY
32019: PUSH
32020: LD_INT 3
32022: ARRAY
32023: STR
32024: PUSH
32025: LD_STRING ,
32027: STR
32028: PUSH
32029: LD_VAR 0 3
32033: PUSH
32034: LD_VAR 0 2
32038: ARRAY
32039: PUSH
32040: LD_INT 4
32042: ARRAY
32043: STR
32044: PUSH
32045: LD_STRING )
32047: STR
32048: PPUSH
32049: CALL_OW 559
32053: GO 31963
32055: POP
32056: POP
// end ; end ;
32057: LD_VAR 0 1
32061: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32062: LD_EXP 97
32066: IFFALSE 32751
32068: GO 32070
32070: DISABLE
32071: LD_INT 0
32073: PPUSH
32074: PPUSH
32075: PPUSH
32076: PPUSH
32077: PPUSH
32078: PPUSH
32079: PPUSH
32080: PPUSH
32081: PPUSH
// begin enable ;
32082: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32083: LD_ADDR_VAR 0 3
32087: PUSH
32088: LD_EXP 97
32092: PPUSH
32093: CALL 79097 0 1
32097: ST_TO_ADDR
// if not list then
32098: LD_VAR 0 3
32102: NOT
32103: IFFALSE 32107
// exit ;
32105: GO 32751
// for i := 1 to list do
32107: LD_ADDR_VAR 0 1
32111: PUSH
32112: DOUBLE
32113: LD_INT 1
32115: DEC
32116: ST_TO_ADDR
32117: LD_VAR 0 3
32121: PUSH
32122: FOR_TO
32123: IFFALSE 32749
// begin depot := list [ i ] [ 2 ] ;
32125: LD_ADDR_VAR 0 8
32129: PUSH
32130: LD_VAR 0 3
32134: PUSH
32135: LD_VAR 0 1
32139: ARRAY
32140: PUSH
32141: LD_INT 2
32143: ARRAY
32144: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32145: LD_ADDR_VAR 0 5
32149: PUSH
32150: LD_VAR 0 3
32154: PUSH
32155: LD_VAR 0 1
32159: ARRAY
32160: PUSH
32161: LD_INT 1
32163: ARRAY
32164: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32165: LD_VAR 0 8
32169: PPUSH
32170: CALL_OW 301
32174: PUSH
32175: LD_VAR 0 5
32179: PUSH
32180: LD_VAR 0 8
32184: PPUSH
32185: CALL_OW 255
32189: NONEQUAL
32190: OR
32191: IFFALSE 32220
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32193: LD_ADDR_EXP 97
32197: PUSH
32198: LD_EXP 97
32202: PPUSH
32203: LD_VAR 0 8
32207: PPUSH
32208: LD_INT 0
32210: PPUSH
32211: CALL_OW 1
32215: ST_TO_ADDR
// exit ;
32216: POP
32217: POP
32218: GO 32751
// end ; x := list [ i ] [ 3 ] ;
32220: LD_ADDR_VAR 0 6
32224: PUSH
32225: LD_VAR 0 3
32229: PUSH
32230: LD_VAR 0 1
32234: ARRAY
32235: PUSH
32236: LD_INT 3
32238: ARRAY
32239: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32240: LD_ADDR_VAR 0 7
32244: PUSH
32245: LD_VAR 0 3
32249: PUSH
32250: LD_VAR 0 1
32254: ARRAY
32255: PUSH
32256: LD_INT 4
32258: ARRAY
32259: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32260: LD_ADDR_VAR 0 9
32264: PUSH
32265: LD_VAR 0 6
32269: PPUSH
32270: LD_VAR 0 7
32274: PPUSH
32275: LD_INT 16
32277: PPUSH
32278: CALL 77685 0 3
32282: ST_TO_ADDR
// if not cratesNearbyPoint then
32283: LD_VAR 0 9
32287: NOT
32288: IFFALSE 32294
// exit ;
32290: POP
32291: POP
32292: GO 32751
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32294: LD_ADDR_VAR 0 4
32298: PUSH
32299: LD_INT 22
32301: PUSH
32302: LD_VAR 0 5
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 3
32313: PUSH
32314: LD_INT 60
32316: PUSH
32317: EMPTY
32318: LIST
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 91
32326: PUSH
32327: LD_VAR 0 8
32331: PUSH
32332: LD_INT 6
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 2
32342: PUSH
32343: LD_INT 25
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 25
32355: PUSH
32356: LD_INT 16
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: LIST
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: PPUSH
32374: CALL_OW 69
32378: PUSH
32379: LD_VAR 0 8
32383: PPUSH
32384: CALL_OW 313
32388: PPUSH
32389: LD_INT 3
32391: PUSH
32392: LD_INT 60
32394: PUSH
32395: EMPTY
32396: LIST
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 2
32404: PUSH
32405: LD_INT 25
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 25
32417: PUSH
32418: LD_INT 16
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: LIST
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PPUSH
32434: CALL_OW 72
32438: UNION
32439: ST_TO_ADDR
// if tmp then
32440: LD_VAR 0 4
32444: IFFALSE 32524
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32446: LD_ADDR_VAR 0 4
32450: PUSH
32451: LD_VAR 0 4
32455: PPUSH
32456: LD_INT 3
32458: PPUSH
32459: CALL 75654 0 2
32463: ST_TO_ADDR
// for j in tmp do
32464: LD_ADDR_VAR 0 2
32468: PUSH
32469: LD_VAR 0 4
32473: PUSH
32474: FOR_IN
32475: IFFALSE 32518
// begin if IsInUnit ( j ) then
32477: LD_VAR 0 2
32481: PPUSH
32482: CALL_OW 310
32486: IFFALSE 32497
// ComExit ( j ) ;
32488: LD_VAR 0 2
32492: PPUSH
32493: CALL 75737 0 1
// AddComCollect ( j , x , y ) ;
32497: LD_VAR 0 2
32501: PPUSH
32502: LD_VAR 0 6
32506: PPUSH
32507: LD_VAR 0 7
32511: PPUSH
32512: CALL_OW 177
// end ;
32516: GO 32474
32518: POP
32519: POP
// exit ;
32520: POP
32521: POP
32522: GO 32751
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32524: LD_ADDR_VAR 0 4
32528: PUSH
32529: LD_INT 22
32531: PUSH
32532: LD_VAR 0 5
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 91
32543: PUSH
32544: LD_VAR 0 8
32548: PUSH
32549: LD_INT 8
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: LD_INT 34
32562: PUSH
32563: LD_INT 12
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 34
32572: PUSH
32573: LD_INT 51
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 34
32582: PUSH
32583: LD_INT 32
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 34
32592: PUSH
32593: LD_INT 89
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: LIST
32611: PPUSH
32612: CALL_OW 69
32616: ST_TO_ADDR
// if tmp then
32617: LD_VAR 0 4
32621: IFFALSE 32747
// begin for j in tmp do
32623: LD_ADDR_VAR 0 2
32627: PUSH
32628: LD_VAR 0 4
32632: PUSH
32633: FOR_IN
32634: IFFALSE 32745
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32636: LD_VAR 0 2
32640: PPUSH
32641: CALL_OW 262
32645: PUSH
32646: LD_INT 3
32648: EQUAL
32649: PUSH
32650: LD_VAR 0 2
32654: PPUSH
32655: CALL_OW 261
32659: PUSH
32660: LD_INT 20
32662: GREATER
32663: OR
32664: PUSH
32665: LD_VAR 0 2
32669: PPUSH
32670: CALL_OW 314
32674: NOT
32675: AND
32676: PUSH
32677: LD_VAR 0 2
32681: PPUSH
32682: CALL_OW 263
32686: PUSH
32687: LD_INT 1
32689: NONEQUAL
32690: PUSH
32691: LD_VAR 0 2
32695: PPUSH
32696: CALL_OW 311
32700: OR
32701: AND
32702: IFFALSE 32743
// begin ComCollect ( j , x , y ) ;
32704: LD_VAR 0 2
32708: PPUSH
32709: LD_VAR 0 6
32713: PPUSH
32714: LD_VAR 0 7
32718: PPUSH
32719: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32723: LD_VAR 0 2
32727: PPUSH
32728: LD_VAR 0 8
32732: PPUSH
32733: CALL_OW 172
// exit ;
32737: POP
32738: POP
32739: POP
32740: POP
32741: GO 32751
// end ;
32743: GO 32633
32745: POP
32746: POP
// end ; end ;
32747: GO 32122
32749: POP
32750: POP
// end ; end_of_file
32751: PPOPN 9
32753: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32754: LD_INT 0
32756: PPUSH
32757: PPUSH
32758: PPUSH
32759: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32760: LD_VAR 0 1
32764: PPUSH
32765: CALL_OW 264
32769: PUSH
32770: LD_INT 91
32772: EQUAL
32773: IFFALSE 32845
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32775: LD_INT 68
32777: PPUSH
32778: LD_VAR 0 1
32782: PPUSH
32783: CALL_OW 255
32787: PPUSH
32788: CALL_OW 321
32792: PUSH
32793: LD_INT 2
32795: EQUAL
32796: IFFALSE 32808
// eff := 70 else
32798: LD_ADDR_VAR 0 4
32802: PUSH
32803: LD_INT 70
32805: ST_TO_ADDR
32806: GO 32816
// eff := 30 ;
32808: LD_ADDR_VAR 0 4
32812: PUSH
32813: LD_INT 30
32815: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32816: LD_VAR 0 1
32820: PPUSH
32821: CALL_OW 250
32825: PPUSH
32826: LD_VAR 0 1
32830: PPUSH
32831: CALL_OW 251
32835: PPUSH
32836: LD_VAR 0 4
32840: PPUSH
32841: CALL_OW 495
// end ; end ;
32845: LD_VAR 0 2
32849: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32850: LD_INT 0
32852: PPUSH
// end ;
32853: LD_VAR 0 4
32857: RET
// export function SOS_Command ( cmd ) ; begin
32858: LD_INT 0
32860: PPUSH
// end ;
32861: LD_VAR 0 2
32865: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32866: LD_INT 0
32868: PPUSH
// end ;
32869: LD_VAR 0 6
32873: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32874: LD_INT 0
32876: PPUSH
32877: PPUSH
// if not vehicle or not factory then
32878: LD_VAR 0 1
32882: NOT
32883: PUSH
32884: LD_VAR 0 2
32888: NOT
32889: OR
32890: IFFALSE 32894
// exit ;
32892: GO 33125
// if factoryWaypoints >= factory then
32894: LD_EXP 96
32898: PUSH
32899: LD_VAR 0 2
32903: GREATEREQUAL
32904: IFFALSE 33125
// if factoryWaypoints [ factory ] then
32906: LD_EXP 96
32910: PUSH
32911: LD_VAR 0 2
32915: ARRAY
32916: IFFALSE 33125
// begin if GetControl ( vehicle ) = control_manual then
32918: LD_VAR 0 1
32922: PPUSH
32923: CALL_OW 263
32927: PUSH
32928: LD_INT 1
32930: EQUAL
32931: IFFALSE 33012
// begin driver := IsDrivenBy ( vehicle ) ;
32933: LD_ADDR_VAR 0 4
32937: PUSH
32938: LD_VAR 0 1
32942: PPUSH
32943: CALL_OW 311
32947: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32948: LD_VAR 0 4
32952: PPUSH
32953: LD_EXP 96
32957: PUSH
32958: LD_VAR 0 2
32962: ARRAY
32963: PUSH
32964: LD_INT 3
32966: ARRAY
32967: PPUSH
32968: LD_EXP 96
32972: PUSH
32973: LD_VAR 0 2
32977: ARRAY
32978: PUSH
32979: LD_INT 4
32981: ARRAY
32982: PPUSH
32983: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32987: LD_VAR 0 4
32991: PPUSH
32992: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32996: LD_VAR 0 4
33000: PPUSH
33001: LD_VAR 0 2
33005: PPUSH
33006: CALL_OW 180
// end else
33010: GO 33125
// if GetControl ( vehicle ) = control_remote then
33012: LD_VAR 0 1
33016: PPUSH
33017: CALL_OW 263
33021: PUSH
33022: LD_INT 2
33024: EQUAL
33025: IFFALSE 33086
// begin wait ( 0 0$2 ) ;
33027: LD_INT 70
33029: PPUSH
33030: CALL_OW 67
// if Connect ( vehicle ) then
33034: LD_VAR 0 1
33038: PPUSH
33039: CALL 45956 0 1
33043: IFFALSE 33084
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33045: LD_VAR 0 1
33049: PPUSH
33050: LD_EXP 96
33054: PUSH
33055: LD_VAR 0 2
33059: ARRAY
33060: PUSH
33061: LD_INT 3
33063: ARRAY
33064: PPUSH
33065: LD_EXP 96
33069: PUSH
33070: LD_VAR 0 2
33074: ARRAY
33075: PUSH
33076: LD_INT 4
33078: ARRAY
33079: PPUSH
33080: CALL_OW 171
// end else
33084: GO 33125
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33086: LD_VAR 0 1
33090: PPUSH
33091: LD_EXP 96
33095: PUSH
33096: LD_VAR 0 2
33100: ARRAY
33101: PUSH
33102: LD_INT 3
33104: ARRAY
33105: PPUSH
33106: LD_EXP 96
33110: PUSH
33111: LD_VAR 0 2
33115: ARRAY
33116: PUSH
33117: LD_INT 4
33119: ARRAY
33120: PPUSH
33121: CALL_OW 171
// end ; end ;
33125: LD_VAR 0 3
33129: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33130: LD_INT 0
33132: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33133: LD_VAR 0 1
33137: PUSH
33138: LD_INT 250
33140: EQUAL
33141: PUSH
33142: LD_VAR 0 2
33146: PPUSH
33147: CALL_OW 264
33151: PUSH
33152: LD_INT 81
33154: EQUAL
33155: AND
33156: IFFALSE 33177
// MinerPlaceMine ( unit , x , y ) ;
33158: LD_VAR 0 2
33162: PPUSH
33163: LD_VAR 0 4
33167: PPUSH
33168: LD_VAR 0 5
33172: PPUSH
33173: CALL 36167 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33177: LD_VAR 0 1
33181: PUSH
33182: LD_INT 251
33184: EQUAL
33185: PUSH
33186: LD_VAR 0 2
33190: PPUSH
33191: CALL_OW 264
33195: PUSH
33196: LD_INT 81
33198: EQUAL
33199: AND
33200: IFFALSE 33221
// MinerDetonateMine ( unit , x , y ) ;
33202: LD_VAR 0 2
33206: PPUSH
33207: LD_VAR 0 4
33211: PPUSH
33212: LD_VAR 0 5
33216: PPUSH
33217: CALL 36442 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33221: LD_VAR 0 1
33225: PUSH
33226: LD_INT 252
33228: EQUAL
33229: PUSH
33230: LD_VAR 0 2
33234: PPUSH
33235: CALL_OW 264
33239: PUSH
33240: LD_INT 81
33242: EQUAL
33243: AND
33244: IFFALSE 33265
// MinerCreateMinefield ( unit , x , y ) ;
33246: LD_VAR 0 2
33250: PPUSH
33251: LD_VAR 0 4
33255: PPUSH
33256: LD_VAR 0 5
33260: PPUSH
33261: CALL 36859 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33265: LD_VAR 0 1
33269: PUSH
33270: LD_INT 253
33272: EQUAL
33273: PUSH
33274: LD_VAR 0 2
33278: PPUSH
33279: CALL_OW 257
33283: PUSH
33284: LD_INT 5
33286: EQUAL
33287: AND
33288: IFFALSE 33309
// ComBinocular ( unit , x , y ) ;
33290: LD_VAR 0 2
33294: PPUSH
33295: LD_VAR 0 4
33299: PPUSH
33300: LD_VAR 0 5
33304: PPUSH
33305: CALL 37228 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33309: LD_VAR 0 1
33313: PUSH
33314: LD_INT 254
33316: EQUAL
33317: PUSH
33318: LD_VAR 0 2
33322: PPUSH
33323: CALL_OW 264
33327: PUSH
33328: LD_INT 99
33330: EQUAL
33331: AND
33332: PUSH
33333: LD_VAR 0 3
33337: PPUSH
33338: CALL_OW 263
33342: PUSH
33343: LD_INT 3
33345: EQUAL
33346: AND
33347: IFFALSE 33363
// HackDestroyVehicle ( unit , selectedUnit ) ;
33349: LD_VAR 0 2
33353: PPUSH
33354: LD_VAR 0 3
33358: PPUSH
33359: CALL 35531 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33363: LD_VAR 0 1
33367: PUSH
33368: LD_INT 255
33370: EQUAL
33371: PUSH
33372: LD_VAR 0 2
33376: PPUSH
33377: CALL_OW 264
33381: PUSH
33382: LD_INT 14
33384: PUSH
33385: LD_INT 53
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: IN
33392: AND
33393: PUSH
33394: LD_VAR 0 4
33398: PPUSH
33399: LD_VAR 0 5
33403: PPUSH
33404: CALL_OW 488
33408: AND
33409: IFFALSE 33433
// CutTreeXYR ( unit , x , y , 12 ) ;
33411: LD_VAR 0 2
33415: PPUSH
33416: LD_VAR 0 4
33420: PPUSH
33421: LD_VAR 0 5
33425: PPUSH
33426: LD_INT 12
33428: PPUSH
33429: CALL 33528 0 4
// if cmd = 256 then
33433: LD_VAR 0 1
33437: PUSH
33438: LD_INT 256
33440: EQUAL
33441: IFFALSE 33462
// SetFactoryWaypoint ( unit , x , y ) ;
33443: LD_VAR 0 2
33447: PPUSH
33448: LD_VAR 0 4
33452: PPUSH
33453: LD_VAR 0 5
33457: PPUSH
33458: CALL 31443 0 3
// if cmd = 257 then
33462: LD_VAR 0 1
33466: PUSH
33467: LD_INT 257
33469: EQUAL
33470: IFFALSE 33491
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33472: LD_VAR 0 2
33476: PPUSH
33477: LD_VAR 0 4
33481: PPUSH
33482: LD_VAR 0 5
33486: PPUSH
33487: CALL 31805 0 3
// if cmd = 258 then
33491: LD_VAR 0 1
33495: PUSH
33496: LD_INT 258
33498: EQUAL
33499: IFFALSE 33523
// BurnTreeXYR ( unit , x , y , 8 ) ;
33501: LD_VAR 0 2
33505: PPUSH
33506: LD_VAR 0 4
33510: PPUSH
33511: LD_VAR 0 5
33515: PPUSH
33516: LD_INT 8
33518: PPUSH
33519: CALL 33922 0 4
// end ;
33523: LD_VAR 0 6
33527: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33528: LD_INT 0
33530: PPUSH
33531: PPUSH
33532: PPUSH
33533: PPUSH
33534: PPUSH
33535: PPUSH
33536: PPUSH
33537: PPUSH
33538: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
33539: LD_VAR 0 1
33543: PPUSH
33544: CALL_OW 302
33548: NOT
33549: PUSH
33550: LD_VAR 0 2
33554: PPUSH
33555: LD_VAR 0 3
33559: PPUSH
33560: CALL_OW 488
33564: NOT
33565: OR
33566: PUSH
33567: LD_VAR 0 4
33571: NOT
33572: OR
33573: IFFALSE 33577
// exit ;
33575: GO 33917
// list := [ ] ;
33577: LD_ADDR_VAR 0 13
33581: PUSH
33582: EMPTY
33583: ST_TO_ADDR
// if x - r < 0 then
33584: LD_VAR 0 2
33588: PUSH
33589: LD_VAR 0 4
33593: MINUS
33594: PUSH
33595: LD_INT 0
33597: LESS
33598: IFFALSE 33610
// min_x := 0 else
33600: LD_ADDR_VAR 0 7
33604: PUSH
33605: LD_INT 0
33607: ST_TO_ADDR
33608: GO 33626
// min_x := x - r ;
33610: LD_ADDR_VAR 0 7
33614: PUSH
33615: LD_VAR 0 2
33619: PUSH
33620: LD_VAR 0 4
33624: MINUS
33625: ST_TO_ADDR
// if y - r < 0 then
33626: LD_VAR 0 3
33630: PUSH
33631: LD_VAR 0 4
33635: MINUS
33636: PUSH
33637: LD_INT 0
33639: LESS
33640: IFFALSE 33652
// min_y := 0 else
33642: LD_ADDR_VAR 0 8
33646: PUSH
33647: LD_INT 0
33649: ST_TO_ADDR
33650: GO 33668
// min_y := y - r ;
33652: LD_ADDR_VAR 0 8
33656: PUSH
33657: LD_VAR 0 3
33661: PUSH
33662: LD_VAR 0 4
33666: MINUS
33667: ST_TO_ADDR
// max_x := x + r ;
33668: LD_ADDR_VAR 0 9
33672: PUSH
33673: LD_VAR 0 2
33677: PUSH
33678: LD_VAR 0 4
33682: PLUS
33683: ST_TO_ADDR
// max_y := y + r ;
33684: LD_ADDR_VAR 0 10
33688: PUSH
33689: LD_VAR 0 3
33693: PUSH
33694: LD_VAR 0 4
33698: PLUS
33699: ST_TO_ADDR
// for _x = min_x to max_x do
33700: LD_ADDR_VAR 0 11
33704: PUSH
33705: DOUBLE
33706: LD_VAR 0 7
33710: DEC
33711: ST_TO_ADDR
33712: LD_VAR 0 9
33716: PUSH
33717: FOR_TO
33718: IFFALSE 33835
// for _y = min_y to max_y do
33720: LD_ADDR_VAR 0 12
33724: PUSH
33725: DOUBLE
33726: LD_VAR 0 8
33730: DEC
33731: ST_TO_ADDR
33732: LD_VAR 0 10
33736: PUSH
33737: FOR_TO
33738: IFFALSE 33831
// begin if not ValidHex ( _x , _y ) then
33740: LD_VAR 0 11
33744: PPUSH
33745: LD_VAR 0 12
33749: PPUSH
33750: CALL_OW 488
33754: NOT
33755: IFFALSE 33759
// continue ;
33757: GO 33737
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33759: LD_VAR 0 11
33763: PPUSH
33764: LD_VAR 0 12
33768: PPUSH
33769: CALL_OW 351
33773: PUSH
33774: LD_VAR 0 11
33778: PPUSH
33779: LD_VAR 0 12
33783: PPUSH
33784: CALL_OW 554
33788: AND
33789: IFFALSE 33829
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33791: LD_ADDR_VAR 0 13
33795: PUSH
33796: LD_VAR 0 13
33800: PPUSH
33801: LD_VAR 0 13
33805: PUSH
33806: LD_INT 1
33808: PLUS
33809: PPUSH
33810: LD_VAR 0 11
33814: PUSH
33815: LD_VAR 0 12
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PPUSH
33824: CALL_OW 2
33828: ST_TO_ADDR
// end ;
33829: GO 33737
33831: POP
33832: POP
33833: GO 33717
33835: POP
33836: POP
// if not list then
33837: LD_VAR 0 13
33841: NOT
33842: IFFALSE 33846
// exit ;
33844: GO 33917
// for i in list do
33846: LD_ADDR_VAR 0 6
33850: PUSH
33851: LD_VAR 0 13
33855: PUSH
33856: FOR_IN
33857: IFFALSE 33915
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33859: LD_VAR 0 1
33863: PPUSH
33864: LD_STRING M
33866: PUSH
33867: LD_VAR 0 6
33871: PUSH
33872: LD_INT 1
33874: ARRAY
33875: PUSH
33876: LD_VAR 0 6
33880: PUSH
33881: LD_INT 2
33883: ARRAY
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: LD_INT 0
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: PUSH
33906: EMPTY
33907: LIST
33908: PPUSH
33909: CALL_OW 447
33913: GO 33856
33915: POP
33916: POP
// end ;
33917: LD_VAR 0 5
33921: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
33922: LD_INT 0
33924: PPUSH
33925: PPUSH
33926: PPUSH
33927: PPUSH
33928: PPUSH
33929: PPUSH
33930: PPUSH
33931: PPUSH
33932: PPUSH
33933: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
33934: LD_VAR 0 1
33938: PPUSH
33939: CALL_OW 302
33943: NOT
33944: PUSH
33945: LD_VAR 0 2
33949: PPUSH
33950: LD_VAR 0 3
33954: PPUSH
33955: CALL_OW 488
33959: NOT
33960: OR
33961: PUSH
33962: LD_VAR 0 4
33966: NOT
33967: OR
33968: IFFALSE 33972
// exit ;
33970: GO 34485
// list := [ ] ;
33972: LD_ADDR_VAR 0 13
33976: PUSH
33977: EMPTY
33978: ST_TO_ADDR
// if x - r < 0 then
33979: LD_VAR 0 2
33983: PUSH
33984: LD_VAR 0 4
33988: MINUS
33989: PUSH
33990: LD_INT 0
33992: LESS
33993: IFFALSE 34005
// min_x := 0 else
33995: LD_ADDR_VAR 0 7
33999: PUSH
34000: LD_INT 0
34002: ST_TO_ADDR
34003: GO 34021
// min_x := x - r ;
34005: LD_ADDR_VAR 0 7
34009: PUSH
34010: LD_VAR 0 2
34014: PUSH
34015: LD_VAR 0 4
34019: MINUS
34020: ST_TO_ADDR
// if y - r < 0 then
34021: LD_VAR 0 3
34025: PUSH
34026: LD_VAR 0 4
34030: MINUS
34031: PUSH
34032: LD_INT 0
34034: LESS
34035: IFFALSE 34047
// min_y := 0 else
34037: LD_ADDR_VAR 0 8
34041: PUSH
34042: LD_INT 0
34044: ST_TO_ADDR
34045: GO 34063
// min_y := y - r ;
34047: LD_ADDR_VAR 0 8
34051: PUSH
34052: LD_VAR 0 3
34056: PUSH
34057: LD_VAR 0 4
34061: MINUS
34062: ST_TO_ADDR
// max_x := x + r ;
34063: LD_ADDR_VAR 0 9
34067: PUSH
34068: LD_VAR 0 2
34072: PUSH
34073: LD_VAR 0 4
34077: PLUS
34078: ST_TO_ADDR
// max_y := y + r ;
34079: LD_ADDR_VAR 0 10
34083: PUSH
34084: LD_VAR 0 3
34088: PUSH
34089: LD_VAR 0 4
34093: PLUS
34094: ST_TO_ADDR
// for _x = min_x to max_x do
34095: LD_ADDR_VAR 0 11
34099: PUSH
34100: DOUBLE
34101: LD_VAR 0 7
34105: DEC
34106: ST_TO_ADDR
34107: LD_VAR 0 9
34111: PUSH
34112: FOR_TO
34113: IFFALSE 34230
// for _y = min_y to max_y do
34115: LD_ADDR_VAR 0 12
34119: PUSH
34120: DOUBLE
34121: LD_VAR 0 8
34125: DEC
34126: ST_TO_ADDR
34127: LD_VAR 0 10
34131: PUSH
34132: FOR_TO
34133: IFFALSE 34226
// begin if not ValidHex ( _x , _y ) then
34135: LD_VAR 0 11
34139: PPUSH
34140: LD_VAR 0 12
34144: PPUSH
34145: CALL_OW 488
34149: NOT
34150: IFFALSE 34154
// continue ;
34152: GO 34132
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34154: LD_VAR 0 11
34158: PPUSH
34159: LD_VAR 0 12
34163: PPUSH
34164: CALL_OW 351
34168: PUSH
34169: LD_VAR 0 11
34173: PPUSH
34174: LD_VAR 0 12
34178: PPUSH
34179: CALL_OW 554
34183: AND
34184: IFFALSE 34224
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34186: LD_ADDR_VAR 0 13
34190: PUSH
34191: LD_VAR 0 13
34195: PPUSH
34196: LD_VAR 0 13
34200: PUSH
34201: LD_INT 1
34203: PLUS
34204: PPUSH
34205: LD_VAR 0 11
34209: PUSH
34210: LD_VAR 0 12
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PPUSH
34219: CALL_OW 2
34223: ST_TO_ADDR
// end ;
34224: GO 34132
34226: POP
34227: POP
34228: GO 34112
34230: POP
34231: POP
// if not list then
34232: LD_VAR 0 13
34236: NOT
34237: IFFALSE 34241
// exit ;
34239: GO 34485
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
34241: LD_ADDR_VAR 0 13
34245: PUSH
34246: LD_VAR 0 1
34250: PPUSH
34251: LD_VAR 0 13
34255: PPUSH
34256: LD_INT 1
34258: PPUSH
34259: LD_INT 1
34261: PPUSH
34262: CALL 43098 0 4
34266: ST_TO_ADDR
// ComStop ( flame ) ;
34267: LD_VAR 0 1
34271: PPUSH
34272: CALL_OW 141
// for i in list do
34276: LD_ADDR_VAR 0 6
34280: PUSH
34281: LD_VAR 0 13
34285: PUSH
34286: FOR_IN
34287: IFFALSE 34318
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
34289: LD_VAR 0 1
34293: PPUSH
34294: LD_VAR 0 6
34298: PUSH
34299: LD_INT 1
34301: ARRAY
34302: PPUSH
34303: LD_VAR 0 6
34307: PUSH
34308: LD_INT 2
34310: ARRAY
34311: PPUSH
34312: CALL_OW 176
34316: GO 34286
34318: POP
34319: POP
// repeat wait ( 0 0$1 ) ;
34320: LD_INT 35
34322: PPUSH
34323: CALL_OW 67
// task := GetTaskList ( flame ) ;
34327: LD_ADDR_VAR 0 14
34331: PUSH
34332: LD_VAR 0 1
34336: PPUSH
34337: CALL_OW 437
34341: ST_TO_ADDR
// if not task then
34342: LD_VAR 0 14
34346: NOT
34347: IFFALSE 34351
// exit ;
34349: GO 34485
// if task [ 1 ] [ 1 ] <> | then
34351: LD_VAR 0 14
34355: PUSH
34356: LD_INT 1
34358: ARRAY
34359: PUSH
34360: LD_INT 1
34362: ARRAY
34363: PUSH
34364: LD_STRING |
34366: NONEQUAL
34367: IFFALSE 34371
// exit ;
34369: GO 34485
// _x := task [ 1 ] [ 2 ] ;
34371: LD_ADDR_VAR 0 11
34375: PUSH
34376: LD_VAR 0 14
34380: PUSH
34381: LD_INT 1
34383: ARRAY
34384: PUSH
34385: LD_INT 2
34387: ARRAY
34388: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
34389: LD_ADDR_VAR 0 12
34393: PUSH
34394: LD_VAR 0 14
34398: PUSH
34399: LD_INT 1
34401: ARRAY
34402: PUSH
34403: LD_INT 3
34405: ARRAY
34406: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
34407: LD_VAR 0 11
34411: PPUSH
34412: LD_VAR 0 12
34416: PPUSH
34417: CALL_OW 351
34421: NOT
34422: PUSH
34423: LD_VAR 0 11
34427: PPUSH
34428: LD_VAR 0 12
34432: PPUSH
34433: CALL_OW 554
34437: NOT
34438: OR
34439: IFFALSE 34473
// begin task := Delete ( task , 1 ) ;
34441: LD_ADDR_VAR 0 14
34445: PUSH
34446: LD_VAR 0 14
34450: PPUSH
34451: LD_INT 1
34453: PPUSH
34454: CALL_OW 3
34458: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
34459: LD_VAR 0 1
34463: PPUSH
34464: LD_VAR 0 14
34468: PPUSH
34469: CALL_OW 446
// end ; until not HasTask ( flame ) ;
34473: LD_VAR 0 1
34477: PPUSH
34478: CALL_OW 314
34482: NOT
34483: IFFALSE 34320
// end ;
34485: LD_VAR 0 5
34489: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34490: LD_EXP 99
34494: NOT
34495: IFFALSE 34545
34497: GO 34499
34499: DISABLE
// begin initHack := true ;
34500: LD_ADDR_EXP 99
34504: PUSH
34505: LD_INT 1
34507: ST_TO_ADDR
// hackTanks := [ ] ;
34508: LD_ADDR_EXP 100
34512: PUSH
34513: EMPTY
34514: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34515: LD_ADDR_EXP 101
34519: PUSH
34520: EMPTY
34521: ST_TO_ADDR
// hackLimit := 3 ;
34522: LD_ADDR_EXP 102
34526: PUSH
34527: LD_INT 3
34529: ST_TO_ADDR
// hackDist := 12 ;
34530: LD_ADDR_EXP 103
34534: PUSH
34535: LD_INT 12
34537: ST_TO_ADDR
// hackCounter := [ ] ;
34538: LD_ADDR_EXP 104
34542: PUSH
34543: EMPTY
34544: ST_TO_ADDR
// end ;
34545: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34546: LD_EXP 99
34550: PUSH
34551: LD_INT 34
34553: PUSH
34554: LD_INT 99
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PPUSH
34561: CALL_OW 69
34565: AND
34566: IFFALSE 34819
34568: GO 34570
34570: DISABLE
34571: LD_INT 0
34573: PPUSH
34574: PPUSH
// begin enable ;
34575: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34576: LD_ADDR_VAR 0 1
34580: PUSH
34581: LD_INT 34
34583: PUSH
34584: LD_INT 99
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PPUSH
34591: CALL_OW 69
34595: PUSH
34596: FOR_IN
34597: IFFALSE 34817
// begin if not i in hackTanks then
34599: LD_VAR 0 1
34603: PUSH
34604: LD_EXP 100
34608: IN
34609: NOT
34610: IFFALSE 34693
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34612: LD_ADDR_EXP 100
34616: PUSH
34617: LD_EXP 100
34621: PPUSH
34622: LD_EXP 100
34626: PUSH
34627: LD_INT 1
34629: PLUS
34630: PPUSH
34631: LD_VAR 0 1
34635: PPUSH
34636: CALL_OW 1
34640: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34641: LD_ADDR_EXP 101
34645: PUSH
34646: LD_EXP 101
34650: PPUSH
34651: LD_EXP 101
34655: PUSH
34656: LD_INT 1
34658: PLUS
34659: PPUSH
34660: EMPTY
34661: PPUSH
34662: CALL_OW 1
34666: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34667: LD_ADDR_EXP 104
34671: PUSH
34672: LD_EXP 104
34676: PPUSH
34677: LD_EXP 104
34681: PUSH
34682: LD_INT 1
34684: PLUS
34685: PPUSH
34686: EMPTY
34687: PPUSH
34688: CALL_OW 1
34692: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34693: LD_VAR 0 1
34697: PPUSH
34698: CALL_OW 302
34702: NOT
34703: IFFALSE 34716
// begin HackUnlinkAll ( i ) ;
34705: LD_VAR 0 1
34709: PPUSH
34710: CALL 34822 0 1
// continue ;
34714: GO 34596
// end ; HackCheckCapturedStatus ( i ) ;
34716: LD_VAR 0 1
34720: PPUSH
34721: CALL 35265 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34725: LD_ADDR_VAR 0 2
34729: PUSH
34730: LD_INT 81
34732: PUSH
34733: LD_VAR 0 1
34737: PPUSH
34738: CALL_OW 255
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 33
34749: PUSH
34750: LD_INT 3
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 91
34759: PUSH
34760: LD_VAR 0 1
34764: PUSH
34765: LD_EXP 103
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 50
34777: PUSH
34778: EMPTY
34779: LIST
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: PPUSH
34787: CALL_OW 69
34791: ST_TO_ADDR
// if not tmp then
34792: LD_VAR 0 2
34796: NOT
34797: IFFALSE 34801
// continue ;
34799: GO 34596
// HackLink ( i , tmp ) ;
34801: LD_VAR 0 1
34805: PPUSH
34806: LD_VAR 0 2
34810: PPUSH
34811: CALL 34958 0 2
// end ;
34815: GO 34596
34817: POP
34818: POP
// end ;
34819: PPOPN 2
34821: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34822: LD_INT 0
34824: PPUSH
34825: PPUSH
34826: PPUSH
// if not hack in hackTanks then
34827: LD_VAR 0 1
34831: PUSH
34832: LD_EXP 100
34836: IN
34837: NOT
34838: IFFALSE 34842
// exit ;
34840: GO 34953
// index := GetElementIndex ( hackTanks , hack ) ;
34842: LD_ADDR_VAR 0 4
34846: PUSH
34847: LD_EXP 100
34851: PPUSH
34852: LD_VAR 0 1
34856: PPUSH
34857: CALL 42395 0 2
34861: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34862: LD_EXP 101
34866: PUSH
34867: LD_VAR 0 4
34871: ARRAY
34872: IFFALSE 34953
// begin for i in hackTanksCaptured [ index ] do
34874: LD_ADDR_VAR 0 3
34878: PUSH
34879: LD_EXP 101
34883: PUSH
34884: LD_VAR 0 4
34888: ARRAY
34889: PUSH
34890: FOR_IN
34891: IFFALSE 34917
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34893: LD_VAR 0 3
34897: PUSH
34898: LD_INT 1
34900: ARRAY
34901: PPUSH
34902: LD_VAR 0 3
34906: PUSH
34907: LD_INT 2
34909: ARRAY
34910: PPUSH
34911: CALL_OW 235
34915: GO 34890
34917: POP
34918: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34919: LD_ADDR_EXP 101
34923: PUSH
34924: LD_EXP 101
34928: PPUSH
34929: LD_VAR 0 4
34933: PPUSH
34934: EMPTY
34935: PPUSH
34936: CALL_OW 1
34940: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34941: LD_VAR 0 1
34945: PPUSH
34946: LD_INT 0
34948: PPUSH
34949: CALL_OW 505
// end ; end ;
34953: LD_VAR 0 2
34957: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34958: LD_INT 0
34960: PPUSH
34961: PPUSH
34962: PPUSH
// if not hack in hackTanks or not vehicles then
34963: LD_VAR 0 1
34967: PUSH
34968: LD_EXP 100
34972: IN
34973: NOT
34974: PUSH
34975: LD_VAR 0 2
34979: NOT
34980: OR
34981: IFFALSE 34985
// exit ;
34983: GO 35260
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34985: LD_ADDR_VAR 0 2
34989: PUSH
34990: LD_VAR 0 1
34994: PPUSH
34995: LD_VAR 0 2
34999: PPUSH
35000: LD_INT 1
35002: PPUSH
35003: LD_INT 1
35005: PPUSH
35006: CALL 43045 0 4
35010: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35011: LD_ADDR_VAR 0 5
35015: PUSH
35016: LD_EXP 100
35020: PPUSH
35021: LD_VAR 0 1
35025: PPUSH
35026: CALL 42395 0 2
35030: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35031: LD_EXP 101
35035: PUSH
35036: LD_VAR 0 5
35040: ARRAY
35041: PUSH
35042: LD_EXP 102
35046: LESS
35047: IFFALSE 35236
// begin for i := 1 to vehicles do
35049: LD_ADDR_VAR 0 4
35053: PUSH
35054: DOUBLE
35055: LD_INT 1
35057: DEC
35058: ST_TO_ADDR
35059: LD_VAR 0 2
35063: PUSH
35064: FOR_TO
35065: IFFALSE 35234
// begin if hackTanksCaptured [ index ] = hackLimit then
35067: LD_EXP 101
35071: PUSH
35072: LD_VAR 0 5
35076: ARRAY
35077: PUSH
35078: LD_EXP 102
35082: EQUAL
35083: IFFALSE 35087
// break ;
35085: GO 35234
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35087: LD_ADDR_EXP 104
35091: PUSH
35092: LD_EXP 104
35096: PPUSH
35097: LD_VAR 0 5
35101: PPUSH
35102: LD_EXP 104
35106: PUSH
35107: LD_VAR 0 5
35111: ARRAY
35112: PUSH
35113: LD_INT 1
35115: PLUS
35116: PPUSH
35117: CALL_OW 1
35121: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35122: LD_ADDR_EXP 101
35126: PUSH
35127: LD_EXP 101
35131: PPUSH
35132: LD_VAR 0 5
35136: PUSH
35137: LD_EXP 101
35141: PUSH
35142: LD_VAR 0 5
35146: ARRAY
35147: PUSH
35148: LD_INT 1
35150: PLUS
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PPUSH
35156: LD_VAR 0 2
35160: PUSH
35161: LD_VAR 0 4
35165: ARRAY
35166: PUSH
35167: LD_VAR 0 2
35171: PUSH
35172: LD_VAR 0 4
35176: ARRAY
35177: PPUSH
35178: CALL_OW 255
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PPUSH
35187: CALL 42610 0 3
35191: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35192: LD_VAR 0 2
35196: PUSH
35197: LD_VAR 0 4
35201: ARRAY
35202: PPUSH
35203: LD_VAR 0 1
35207: PPUSH
35208: CALL_OW 255
35212: PPUSH
35213: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35217: LD_VAR 0 2
35221: PUSH
35222: LD_VAR 0 4
35226: ARRAY
35227: PPUSH
35228: CALL_OW 141
// end ;
35232: GO 35064
35234: POP
35235: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35236: LD_VAR 0 1
35240: PPUSH
35241: LD_EXP 101
35245: PUSH
35246: LD_VAR 0 5
35250: ARRAY
35251: PUSH
35252: LD_INT 0
35254: PLUS
35255: PPUSH
35256: CALL_OW 505
// end ;
35260: LD_VAR 0 3
35264: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35265: LD_INT 0
35267: PPUSH
35268: PPUSH
35269: PPUSH
35270: PPUSH
// if not hack in hackTanks then
35271: LD_VAR 0 1
35275: PUSH
35276: LD_EXP 100
35280: IN
35281: NOT
35282: IFFALSE 35286
// exit ;
35284: GO 35526
// index := GetElementIndex ( hackTanks , hack ) ;
35286: LD_ADDR_VAR 0 4
35290: PUSH
35291: LD_EXP 100
35295: PPUSH
35296: LD_VAR 0 1
35300: PPUSH
35301: CALL 42395 0 2
35305: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35306: LD_ADDR_VAR 0 3
35310: PUSH
35311: DOUBLE
35312: LD_EXP 101
35316: PUSH
35317: LD_VAR 0 4
35321: ARRAY
35322: INC
35323: ST_TO_ADDR
35324: LD_INT 1
35326: PUSH
35327: FOR_DOWNTO
35328: IFFALSE 35500
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35330: LD_ADDR_VAR 0 5
35334: PUSH
35335: LD_EXP 101
35339: PUSH
35340: LD_VAR 0 4
35344: ARRAY
35345: PUSH
35346: LD_VAR 0 3
35350: ARRAY
35351: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35352: LD_VAR 0 5
35356: PUSH
35357: LD_INT 1
35359: ARRAY
35360: PPUSH
35361: CALL_OW 302
35365: NOT
35366: PUSH
35367: LD_VAR 0 5
35371: PUSH
35372: LD_INT 1
35374: ARRAY
35375: PPUSH
35376: CALL_OW 255
35380: PUSH
35381: LD_VAR 0 1
35385: PPUSH
35386: CALL_OW 255
35390: NONEQUAL
35391: OR
35392: IFFALSE 35498
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35394: LD_VAR 0 5
35398: PUSH
35399: LD_INT 1
35401: ARRAY
35402: PPUSH
35403: CALL_OW 305
35407: PUSH
35408: LD_VAR 0 5
35412: PUSH
35413: LD_INT 1
35415: ARRAY
35416: PPUSH
35417: CALL_OW 255
35421: PUSH
35422: LD_VAR 0 1
35426: PPUSH
35427: CALL_OW 255
35431: EQUAL
35432: AND
35433: IFFALSE 35457
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35435: LD_VAR 0 5
35439: PUSH
35440: LD_INT 1
35442: ARRAY
35443: PPUSH
35444: LD_VAR 0 5
35448: PUSH
35449: LD_INT 2
35451: ARRAY
35452: PPUSH
35453: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35457: LD_ADDR_EXP 101
35461: PUSH
35462: LD_EXP 101
35466: PPUSH
35467: LD_VAR 0 4
35471: PPUSH
35472: LD_EXP 101
35476: PUSH
35477: LD_VAR 0 4
35481: ARRAY
35482: PPUSH
35483: LD_VAR 0 3
35487: PPUSH
35488: CALL_OW 3
35492: PPUSH
35493: CALL_OW 1
35497: ST_TO_ADDR
// end ; end ;
35498: GO 35327
35500: POP
35501: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35502: LD_VAR 0 1
35506: PPUSH
35507: LD_EXP 101
35511: PUSH
35512: LD_VAR 0 4
35516: ARRAY
35517: PUSH
35518: LD_INT 0
35520: PLUS
35521: PPUSH
35522: CALL_OW 505
// end ;
35526: LD_VAR 0 2
35530: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35531: LD_INT 0
35533: PPUSH
35534: PPUSH
35535: PPUSH
35536: PPUSH
// if not hack in hackTanks then
35537: LD_VAR 0 1
35541: PUSH
35542: LD_EXP 100
35546: IN
35547: NOT
35548: IFFALSE 35552
// exit ;
35550: GO 35637
// index := GetElementIndex ( hackTanks , hack ) ;
35552: LD_ADDR_VAR 0 5
35556: PUSH
35557: LD_EXP 100
35561: PPUSH
35562: LD_VAR 0 1
35566: PPUSH
35567: CALL 42395 0 2
35571: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35572: LD_ADDR_VAR 0 4
35576: PUSH
35577: DOUBLE
35578: LD_INT 1
35580: DEC
35581: ST_TO_ADDR
35582: LD_EXP 101
35586: PUSH
35587: LD_VAR 0 5
35591: ARRAY
35592: PUSH
35593: FOR_TO
35594: IFFALSE 35635
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35596: LD_EXP 101
35600: PUSH
35601: LD_VAR 0 5
35605: ARRAY
35606: PUSH
35607: LD_VAR 0 4
35611: ARRAY
35612: PUSH
35613: LD_INT 1
35615: ARRAY
35616: PUSH
35617: LD_VAR 0 2
35621: EQUAL
35622: IFFALSE 35633
// KillUnit ( vehicle ) ;
35624: LD_VAR 0 2
35628: PPUSH
35629: CALL_OW 66
35633: GO 35593
35635: POP
35636: POP
// end ;
35637: LD_VAR 0 3
35641: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35642: LD_EXP 105
35646: NOT
35647: IFFALSE 35682
35649: GO 35651
35651: DISABLE
// begin initMiner := true ;
35652: LD_ADDR_EXP 105
35656: PUSH
35657: LD_INT 1
35659: ST_TO_ADDR
// minersList := [ ] ;
35660: LD_ADDR_EXP 106
35664: PUSH
35665: EMPTY
35666: ST_TO_ADDR
// minerMinesList := [ ] ;
35667: LD_ADDR_EXP 107
35671: PUSH
35672: EMPTY
35673: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35674: LD_ADDR_EXP 108
35678: PUSH
35679: LD_INT 5
35681: ST_TO_ADDR
// end ;
35682: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35683: LD_EXP 105
35687: PUSH
35688: LD_INT 34
35690: PUSH
35691: LD_INT 81
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PPUSH
35698: CALL_OW 69
35702: AND
35703: IFFALSE 36164
35705: GO 35707
35707: DISABLE
35708: LD_INT 0
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
// begin enable ;
35714: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35715: LD_ADDR_VAR 0 1
35719: PUSH
35720: LD_INT 34
35722: PUSH
35723: LD_INT 81
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PPUSH
35730: CALL_OW 69
35734: PUSH
35735: FOR_IN
35736: IFFALSE 35808
// begin if not i in minersList then
35738: LD_VAR 0 1
35742: PUSH
35743: LD_EXP 106
35747: IN
35748: NOT
35749: IFFALSE 35806
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35751: LD_ADDR_EXP 106
35755: PUSH
35756: LD_EXP 106
35760: PPUSH
35761: LD_EXP 106
35765: PUSH
35766: LD_INT 1
35768: PLUS
35769: PPUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL_OW 1
35779: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35780: LD_ADDR_EXP 107
35784: PUSH
35785: LD_EXP 107
35789: PPUSH
35790: LD_EXP 107
35794: PUSH
35795: LD_INT 1
35797: PLUS
35798: PPUSH
35799: EMPTY
35800: PPUSH
35801: CALL_OW 1
35805: ST_TO_ADDR
// end end ;
35806: GO 35735
35808: POP
35809: POP
// for i := minerMinesList downto 1 do
35810: LD_ADDR_VAR 0 1
35814: PUSH
35815: DOUBLE
35816: LD_EXP 107
35820: INC
35821: ST_TO_ADDR
35822: LD_INT 1
35824: PUSH
35825: FOR_DOWNTO
35826: IFFALSE 36162
// begin if IsLive ( minersList [ i ] ) then
35828: LD_EXP 106
35832: PUSH
35833: LD_VAR 0 1
35837: ARRAY
35838: PPUSH
35839: CALL_OW 300
35843: IFFALSE 35871
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35845: LD_EXP 106
35849: PUSH
35850: LD_VAR 0 1
35854: ARRAY
35855: PPUSH
35856: LD_EXP 107
35860: PUSH
35861: LD_VAR 0 1
35865: ARRAY
35866: PPUSH
35867: CALL_OW 505
// if not minerMinesList [ i ] then
35871: LD_EXP 107
35875: PUSH
35876: LD_VAR 0 1
35880: ARRAY
35881: NOT
35882: IFFALSE 35886
// continue ;
35884: GO 35825
// for j := minerMinesList [ i ] downto 1 do
35886: LD_ADDR_VAR 0 2
35890: PUSH
35891: DOUBLE
35892: LD_EXP 107
35896: PUSH
35897: LD_VAR 0 1
35901: ARRAY
35902: INC
35903: ST_TO_ADDR
35904: LD_INT 1
35906: PUSH
35907: FOR_DOWNTO
35908: IFFALSE 36158
// begin side := GetSide ( minersList [ i ] ) ;
35910: LD_ADDR_VAR 0 3
35914: PUSH
35915: LD_EXP 106
35919: PUSH
35920: LD_VAR 0 1
35924: ARRAY
35925: PPUSH
35926: CALL_OW 255
35930: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35931: LD_ADDR_VAR 0 4
35935: PUSH
35936: LD_EXP 107
35940: PUSH
35941: LD_VAR 0 1
35945: ARRAY
35946: PUSH
35947: LD_VAR 0 2
35951: ARRAY
35952: PUSH
35953: LD_INT 1
35955: ARRAY
35956: PPUSH
35957: LD_EXP 107
35961: PUSH
35962: LD_VAR 0 1
35966: ARRAY
35967: PUSH
35968: LD_VAR 0 2
35972: ARRAY
35973: PUSH
35974: LD_INT 2
35976: ARRAY
35977: PPUSH
35978: CALL_OW 428
35982: ST_TO_ADDR
// if not tmp then
35983: LD_VAR 0 4
35987: NOT
35988: IFFALSE 35992
// continue ;
35990: GO 35907
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35992: LD_VAR 0 4
35996: PUSH
35997: LD_INT 81
35999: PUSH
36000: LD_VAR 0 3
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PPUSH
36009: CALL_OW 69
36013: IN
36014: PUSH
36015: LD_EXP 107
36019: PUSH
36020: LD_VAR 0 1
36024: ARRAY
36025: PUSH
36026: LD_VAR 0 2
36030: ARRAY
36031: PUSH
36032: LD_INT 1
36034: ARRAY
36035: PPUSH
36036: LD_EXP 107
36040: PUSH
36041: LD_VAR 0 1
36045: ARRAY
36046: PUSH
36047: LD_VAR 0 2
36051: ARRAY
36052: PUSH
36053: LD_INT 2
36055: ARRAY
36056: PPUSH
36057: CALL_OW 458
36061: AND
36062: IFFALSE 36156
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36064: LD_EXP 107
36068: PUSH
36069: LD_VAR 0 1
36073: ARRAY
36074: PUSH
36075: LD_VAR 0 2
36079: ARRAY
36080: PUSH
36081: LD_INT 1
36083: ARRAY
36084: PPUSH
36085: LD_EXP 107
36089: PUSH
36090: LD_VAR 0 1
36094: ARRAY
36095: PUSH
36096: LD_VAR 0 2
36100: ARRAY
36101: PUSH
36102: LD_INT 2
36104: ARRAY
36105: PPUSH
36106: LD_VAR 0 3
36110: PPUSH
36111: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36115: LD_ADDR_EXP 107
36119: PUSH
36120: LD_EXP 107
36124: PPUSH
36125: LD_VAR 0 1
36129: PPUSH
36130: LD_EXP 107
36134: PUSH
36135: LD_VAR 0 1
36139: ARRAY
36140: PPUSH
36141: LD_VAR 0 2
36145: PPUSH
36146: CALL_OW 3
36150: PPUSH
36151: CALL_OW 1
36155: ST_TO_ADDR
// end ; end ;
36156: GO 35907
36158: POP
36159: POP
// end ;
36160: GO 35825
36162: POP
36163: POP
// end ;
36164: PPOPN 4
36166: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36167: LD_INT 0
36169: PPUSH
36170: PPUSH
// result := false ;
36171: LD_ADDR_VAR 0 4
36175: PUSH
36176: LD_INT 0
36178: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36179: LD_VAR 0 1
36183: PPUSH
36184: CALL_OW 264
36188: PUSH
36189: LD_INT 81
36191: EQUAL
36192: NOT
36193: IFFALSE 36197
// exit ;
36195: GO 36437
// index := GetElementIndex ( minersList , unit ) ;
36197: LD_ADDR_VAR 0 5
36201: PUSH
36202: LD_EXP 106
36206: PPUSH
36207: LD_VAR 0 1
36211: PPUSH
36212: CALL 42395 0 2
36216: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36217: LD_EXP 107
36221: PUSH
36222: LD_VAR 0 5
36226: ARRAY
36227: PUSH
36228: LD_EXP 108
36232: GREATEREQUAL
36233: IFFALSE 36237
// exit ;
36235: GO 36437
// ComMoveXY ( unit , x , y ) ;
36237: LD_VAR 0 1
36241: PPUSH
36242: LD_VAR 0 2
36246: PPUSH
36247: LD_VAR 0 3
36251: PPUSH
36252: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36256: LD_INT 35
36258: PPUSH
36259: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36263: LD_VAR 0 1
36267: PPUSH
36268: LD_VAR 0 2
36272: PPUSH
36273: LD_VAR 0 3
36277: PPUSH
36278: CALL 74136 0 3
36282: NOT
36283: PUSH
36284: LD_VAR 0 1
36288: PPUSH
36289: CALL_OW 314
36293: AND
36294: IFFALSE 36298
// exit ;
36296: GO 36437
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36298: LD_VAR 0 2
36302: PPUSH
36303: LD_VAR 0 3
36307: PPUSH
36308: CALL_OW 428
36312: PUSH
36313: LD_VAR 0 1
36317: EQUAL
36318: PUSH
36319: LD_VAR 0 1
36323: PPUSH
36324: CALL_OW 314
36328: NOT
36329: AND
36330: IFFALSE 36256
// PlaySoundXY ( x , y , PlantMine ) ;
36332: LD_VAR 0 2
36336: PPUSH
36337: LD_VAR 0 3
36341: PPUSH
36342: LD_STRING PlantMine
36344: PPUSH
36345: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36349: LD_VAR 0 2
36353: PPUSH
36354: LD_VAR 0 3
36358: PPUSH
36359: LD_VAR 0 1
36363: PPUSH
36364: CALL_OW 255
36368: PPUSH
36369: LD_INT 0
36371: PPUSH
36372: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36376: LD_ADDR_EXP 107
36380: PUSH
36381: LD_EXP 107
36385: PPUSH
36386: LD_VAR 0 5
36390: PUSH
36391: LD_EXP 107
36395: PUSH
36396: LD_VAR 0 5
36400: ARRAY
36401: PUSH
36402: LD_INT 1
36404: PLUS
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PPUSH
36410: LD_VAR 0 2
36414: PUSH
36415: LD_VAR 0 3
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PPUSH
36424: CALL 42610 0 3
36428: ST_TO_ADDR
// result := true ;
36429: LD_ADDR_VAR 0 4
36433: PUSH
36434: LD_INT 1
36436: ST_TO_ADDR
// end ;
36437: LD_VAR 0 4
36441: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36442: LD_INT 0
36444: PPUSH
36445: PPUSH
36446: PPUSH
// if not unit in minersList then
36447: LD_VAR 0 1
36451: PUSH
36452: LD_EXP 106
36456: IN
36457: NOT
36458: IFFALSE 36462
// exit ;
36460: GO 36854
// index := GetElementIndex ( minersList , unit ) ;
36462: LD_ADDR_VAR 0 6
36466: PUSH
36467: LD_EXP 106
36471: PPUSH
36472: LD_VAR 0 1
36476: PPUSH
36477: CALL 42395 0 2
36481: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36482: LD_ADDR_VAR 0 5
36486: PUSH
36487: DOUBLE
36488: LD_EXP 107
36492: PUSH
36493: LD_VAR 0 6
36497: ARRAY
36498: INC
36499: ST_TO_ADDR
36500: LD_INT 1
36502: PUSH
36503: FOR_DOWNTO
36504: IFFALSE 36665
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36506: LD_EXP 107
36510: PUSH
36511: LD_VAR 0 6
36515: ARRAY
36516: PUSH
36517: LD_VAR 0 5
36521: ARRAY
36522: PUSH
36523: LD_INT 1
36525: ARRAY
36526: PUSH
36527: LD_VAR 0 2
36531: EQUAL
36532: PUSH
36533: LD_EXP 107
36537: PUSH
36538: LD_VAR 0 6
36542: ARRAY
36543: PUSH
36544: LD_VAR 0 5
36548: ARRAY
36549: PUSH
36550: LD_INT 2
36552: ARRAY
36553: PUSH
36554: LD_VAR 0 3
36558: EQUAL
36559: AND
36560: IFFALSE 36663
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36562: LD_EXP 107
36566: PUSH
36567: LD_VAR 0 6
36571: ARRAY
36572: PUSH
36573: LD_VAR 0 5
36577: ARRAY
36578: PUSH
36579: LD_INT 1
36581: ARRAY
36582: PPUSH
36583: LD_EXP 107
36587: PUSH
36588: LD_VAR 0 6
36592: ARRAY
36593: PUSH
36594: LD_VAR 0 5
36598: ARRAY
36599: PUSH
36600: LD_INT 2
36602: ARRAY
36603: PPUSH
36604: LD_VAR 0 1
36608: PPUSH
36609: CALL_OW 255
36613: PPUSH
36614: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36618: LD_ADDR_EXP 107
36622: PUSH
36623: LD_EXP 107
36627: PPUSH
36628: LD_VAR 0 6
36632: PPUSH
36633: LD_EXP 107
36637: PUSH
36638: LD_VAR 0 6
36642: ARRAY
36643: PPUSH
36644: LD_VAR 0 5
36648: PPUSH
36649: CALL_OW 3
36653: PPUSH
36654: CALL_OW 1
36658: ST_TO_ADDR
// exit ;
36659: POP
36660: POP
36661: GO 36854
// end ; end ;
36663: GO 36503
36665: POP
36666: POP
// for i := minerMinesList [ index ] downto 1 do
36667: LD_ADDR_VAR 0 5
36671: PUSH
36672: DOUBLE
36673: LD_EXP 107
36677: PUSH
36678: LD_VAR 0 6
36682: ARRAY
36683: INC
36684: ST_TO_ADDR
36685: LD_INT 1
36687: PUSH
36688: FOR_DOWNTO
36689: IFFALSE 36852
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36691: LD_EXP 107
36695: PUSH
36696: LD_VAR 0 6
36700: ARRAY
36701: PUSH
36702: LD_VAR 0 5
36706: ARRAY
36707: PUSH
36708: LD_INT 1
36710: ARRAY
36711: PPUSH
36712: LD_EXP 107
36716: PUSH
36717: LD_VAR 0 6
36721: ARRAY
36722: PUSH
36723: LD_VAR 0 5
36727: ARRAY
36728: PUSH
36729: LD_INT 2
36731: ARRAY
36732: PPUSH
36733: LD_VAR 0 2
36737: PPUSH
36738: LD_VAR 0 3
36742: PPUSH
36743: CALL_OW 298
36747: PUSH
36748: LD_INT 6
36750: LESS
36751: IFFALSE 36850
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36753: LD_EXP 107
36757: PUSH
36758: LD_VAR 0 6
36762: ARRAY
36763: PUSH
36764: LD_VAR 0 5
36768: ARRAY
36769: PUSH
36770: LD_INT 1
36772: ARRAY
36773: PPUSH
36774: LD_EXP 107
36778: PUSH
36779: LD_VAR 0 6
36783: ARRAY
36784: PUSH
36785: LD_VAR 0 5
36789: ARRAY
36790: PUSH
36791: LD_INT 2
36793: ARRAY
36794: PPUSH
36795: LD_VAR 0 1
36799: PPUSH
36800: CALL_OW 255
36804: PPUSH
36805: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36809: LD_ADDR_EXP 107
36813: PUSH
36814: LD_EXP 107
36818: PPUSH
36819: LD_VAR 0 6
36823: PPUSH
36824: LD_EXP 107
36828: PUSH
36829: LD_VAR 0 6
36833: ARRAY
36834: PPUSH
36835: LD_VAR 0 5
36839: PPUSH
36840: CALL_OW 3
36844: PPUSH
36845: CALL_OW 1
36849: ST_TO_ADDR
// end ; end ;
36850: GO 36688
36852: POP
36853: POP
// end ;
36854: LD_VAR 0 4
36858: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36859: LD_INT 0
36861: PPUSH
36862: PPUSH
36863: PPUSH
36864: PPUSH
36865: PPUSH
36866: PPUSH
36867: PPUSH
36868: PPUSH
36869: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36870: LD_VAR 0 1
36874: PPUSH
36875: CALL_OW 264
36879: PUSH
36880: LD_INT 81
36882: EQUAL
36883: NOT
36884: PUSH
36885: LD_VAR 0 1
36889: PUSH
36890: LD_EXP 106
36894: IN
36895: NOT
36896: OR
36897: IFFALSE 36901
// exit ;
36899: GO 37223
// index := GetElementIndex ( minersList , unit ) ;
36901: LD_ADDR_VAR 0 6
36905: PUSH
36906: LD_EXP 106
36910: PPUSH
36911: LD_VAR 0 1
36915: PPUSH
36916: CALL 42395 0 2
36920: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36921: LD_ADDR_VAR 0 8
36925: PUSH
36926: LD_EXP 108
36930: PUSH
36931: LD_EXP 107
36935: PUSH
36936: LD_VAR 0 6
36940: ARRAY
36941: MINUS
36942: ST_TO_ADDR
// if not minesFreeAmount then
36943: LD_VAR 0 8
36947: NOT
36948: IFFALSE 36952
// exit ;
36950: GO 37223
// tmp := [ ] ;
36952: LD_ADDR_VAR 0 7
36956: PUSH
36957: EMPTY
36958: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36959: LD_ADDR_VAR 0 5
36963: PUSH
36964: DOUBLE
36965: LD_INT 1
36967: DEC
36968: ST_TO_ADDR
36969: LD_VAR 0 8
36973: PUSH
36974: FOR_TO
36975: IFFALSE 37170
// begin _d := rand ( 0 , 5 ) ;
36977: LD_ADDR_VAR 0 11
36981: PUSH
36982: LD_INT 0
36984: PPUSH
36985: LD_INT 5
36987: PPUSH
36988: CALL_OW 12
36992: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36993: LD_ADDR_VAR 0 12
36997: PUSH
36998: LD_INT 2
37000: PPUSH
37001: LD_INT 6
37003: PPUSH
37004: CALL_OW 12
37008: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37009: LD_ADDR_VAR 0 9
37013: PUSH
37014: LD_VAR 0 2
37018: PPUSH
37019: LD_VAR 0 11
37023: PPUSH
37024: LD_VAR 0 12
37028: PPUSH
37029: CALL_OW 272
37033: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37034: LD_ADDR_VAR 0 10
37038: PUSH
37039: LD_VAR 0 3
37043: PPUSH
37044: LD_VAR 0 11
37048: PPUSH
37049: LD_VAR 0 12
37053: PPUSH
37054: CALL_OW 273
37058: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37059: LD_VAR 0 9
37063: PPUSH
37064: LD_VAR 0 10
37068: PPUSH
37069: CALL_OW 488
37073: PUSH
37074: LD_VAR 0 9
37078: PUSH
37079: LD_VAR 0 10
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_VAR 0 7
37092: IN
37093: NOT
37094: AND
37095: PUSH
37096: LD_VAR 0 9
37100: PPUSH
37101: LD_VAR 0 10
37105: PPUSH
37106: CALL_OW 458
37110: NOT
37111: AND
37112: IFFALSE 37154
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37114: LD_ADDR_VAR 0 7
37118: PUSH
37119: LD_VAR 0 7
37123: PPUSH
37124: LD_VAR 0 7
37128: PUSH
37129: LD_INT 1
37131: PLUS
37132: PPUSH
37133: LD_VAR 0 9
37137: PUSH
37138: LD_VAR 0 10
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PPUSH
37147: CALL_OW 1
37151: ST_TO_ADDR
37152: GO 37168
// i := i - 1 ;
37154: LD_ADDR_VAR 0 5
37158: PUSH
37159: LD_VAR 0 5
37163: PUSH
37164: LD_INT 1
37166: MINUS
37167: ST_TO_ADDR
// end ;
37168: GO 36974
37170: POP
37171: POP
// for i in tmp do
37172: LD_ADDR_VAR 0 5
37176: PUSH
37177: LD_VAR 0 7
37181: PUSH
37182: FOR_IN
37183: IFFALSE 37221
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37185: LD_VAR 0 1
37189: PPUSH
37190: LD_VAR 0 5
37194: PUSH
37195: LD_INT 1
37197: ARRAY
37198: PPUSH
37199: LD_VAR 0 5
37203: PUSH
37204: LD_INT 2
37206: ARRAY
37207: PPUSH
37208: CALL 36167 0 3
37212: NOT
37213: IFFALSE 37219
// exit ;
37215: POP
37216: POP
37217: GO 37223
37219: GO 37182
37221: POP
37222: POP
// end ;
37223: LD_VAR 0 4
37227: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37228: LD_INT 0
37230: PPUSH
37231: PPUSH
37232: PPUSH
37233: PPUSH
37234: PPUSH
37235: PPUSH
37236: PPUSH
// if not GetClass ( unit ) = class_sniper then
37237: LD_VAR 0 1
37241: PPUSH
37242: CALL_OW 257
37246: PUSH
37247: LD_INT 5
37249: EQUAL
37250: NOT
37251: IFFALSE 37255
// exit ;
37253: GO 37643
// dist := 8 ;
37255: LD_ADDR_VAR 0 5
37259: PUSH
37260: LD_INT 8
37262: ST_TO_ADDR
// viewRange := 12 ;
37263: LD_ADDR_VAR 0 7
37267: PUSH
37268: LD_INT 12
37270: ST_TO_ADDR
// side := GetSide ( unit ) ;
37271: LD_ADDR_VAR 0 6
37275: PUSH
37276: LD_VAR 0 1
37280: PPUSH
37281: CALL_OW 255
37285: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37286: LD_INT 61
37288: PPUSH
37289: LD_VAR 0 6
37293: PPUSH
37294: CALL_OW 321
37298: PUSH
37299: LD_INT 2
37301: EQUAL
37302: IFFALSE 37312
// viewRange := 16 ;
37304: LD_ADDR_VAR 0 7
37308: PUSH
37309: LD_INT 16
37311: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37312: LD_VAR 0 1
37316: PPUSH
37317: LD_VAR 0 2
37321: PPUSH
37322: LD_VAR 0 3
37326: PPUSH
37327: CALL_OW 297
37331: PUSH
37332: LD_VAR 0 5
37336: GREATER
37337: IFFALSE 37416
// begin ComMoveXY ( unit , x , y ) ;
37339: LD_VAR 0 1
37343: PPUSH
37344: LD_VAR 0 2
37348: PPUSH
37349: LD_VAR 0 3
37353: PPUSH
37354: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37358: LD_INT 35
37360: PPUSH
37361: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37365: LD_VAR 0 1
37369: PPUSH
37370: LD_VAR 0 2
37374: PPUSH
37375: LD_VAR 0 3
37379: PPUSH
37380: CALL 74136 0 3
37384: NOT
37385: IFFALSE 37389
// exit ;
37387: GO 37643
// until GetDistUnitXY ( unit , x , y ) < dist ;
37389: LD_VAR 0 1
37393: PPUSH
37394: LD_VAR 0 2
37398: PPUSH
37399: LD_VAR 0 3
37403: PPUSH
37404: CALL_OW 297
37408: PUSH
37409: LD_VAR 0 5
37413: LESS
37414: IFFALSE 37358
// end ; ComTurnXY ( unit , x , y ) ;
37416: LD_VAR 0 1
37420: PPUSH
37421: LD_VAR 0 2
37425: PPUSH
37426: LD_VAR 0 3
37430: PPUSH
37431: CALL_OW 118
// wait ( 5 ) ;
37435: LD_INT 5
37437: PPUSH
37438: CALL_OW 67
// _d := GetDir ( unit ) ;
37442: LD_ADDR_VAR 0 10
37446: PUSH
37447: LD_VAR 0 1
37451: PPUSH
37452: CALL_OW 254
37456: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37457: LD_ADDR_VAR 0 8
37461: PUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 250
37471: PPUSH
37472: LD_VAR 0 10
37476: PPUSH
37477: LD_VAR 0 5
37481: PPUSH
37482: CALL_OW 272
37486: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37487: LD_ADDR_VAR 0 9
37491: PUSH
37492: LD_VAR 0 1
37496: PPUSH
37497: CALL_OW 251
37501: PPUSH
37502: LD_VAR 0 10
37506: PPUSH
37507: LD_VAR 0 5
37511: PPUSH
37512: CALL_OW 273
37516: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37517: LD_VAR 0 8
37521: PPUSH
37522: LD_VAR 0 9
37526: PPUSH
37527: CALL_OW 488
37531: NOT
37532: IFFALSE 37536
// exit ;
37534: GO 37643
// ComAnimCustom ( unit , 1 ) ;
37536: LD_VAR 0 1
37540: PPUSH
37541: LD_INT 1
37543: PPUSH
37544: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37548: LD_VAR 0 8
37552: PPUSH
37553: LD_VAR 0 9
37557: PPUSH
37558: LD_VAR 0 6
37562: PPUSH
37563: LD_VAR 0 7
37567: PPUSH
37568: CALL_OW 330
// repeat wait ( 1 ) ;
37572: LD_INT 1
37574: PPUSH
37575: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37579: LD_VAR 0 1
37583: PPUSH
37584: CALL_OW 316
37588: PUSH
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 314
37598: OR
37599: PUSH
37600: LD_VAR 0 1
37604: PPUSH
37605: CALL_OW 302
37609: NOT
37610: OR
37611: PUSH
37612: LD_VAR 0 1
37616: PPUSH
37617: CALL_OW 301
37621: OR
37622: IFFALSE 37572
// RemoveSeeing ( _x , _y , side ) ;
37624: LD_VAR 0 8
37628: PPUSH
37629: LD_VAR 0 9
37633: PPUSH
37634: LD_VAR 0 6
37638: PPUSH
37639: CALL_OW 331
// end ; end_of_file
37643: LD_VAR 0 4
37647: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37648: LD_INT 0
37650: PPUSH
37651: PPUSH
// if exist_mode then
37652: LD_VAR 0 2
37656: IFFALSE 37681
// unit := CreateCharacter ( prefix & ident ) else
37658: LD_ADDR_VAR 0 5
37662: PUSH
37663: LD_VAR 0 3
37667: PUSH
37668: LD_VAR 0 1
37672: STR
37673: PPUSH
37674: CALL_OW 34
37678: ST_TO_ADDR
37679: GO 37696
// unit := NewCharacter ( ident ) ;
37681: LD_ADDR_VAR 0 5
37685: PUSH
37686: LD_VAR 0 1
37690: PPUSH
37691: CALL_OW 25
37695: ST_TO_ADDR
// result := unit ;
37696: LD_ADDR_VAR 0 4
37700: PUSH
37701: LD_VAR 0 5
37705: ST_TO_ADDR
// end ;
37706: LD_VAR 0 4
37710: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37711: LD_INT 0
37713: PPUSH
37714: PPUSH
// if not side or not nation then
37715: LD_VAR 0 1
37719: NOT
37720: PUSH
37721: LD_VAR 0 2
37725: NOT
37726: OR
37727: IFFALSE 37731
// exit ;
37729: GO 38499
// case nation of nation_american :
37731: LD_VAR 0 2
37735: PUSH
37736: LD_INT 1
37738: DOUBLE
37739: EQUAL
37740: IFTRUE 37744
37742: GO 37958
37744: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37745: LD_ADDR_VAR 0 4
37749: PUSH
37750: LD_INT 35
37752: PUSH
37753: LD_INT 45
37755: PUSH
37756: LD_INT 46
37758: PUSH
37759: LD_INT 47
37761: PUSH
37762: LD_INT 82
37764: PUSH
37765: LD_INT 83
37767: PUSH
37768: LD_INT 84
37770: PUSH
37771: LD_INT 85
37773: PUSH
37774: LD_INT 86
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: LD_INT 2
37782: PUSH
37783: LD_INT 6
37785: PUSH
37786: LD_INT 15
37788: PUSH
37789: LD_INT 16
37791: PUSH
37792: LD_INT 7
37794: PUSH
37795: LD_INT 12
37797: PUSH
37798: LD_INT 13
37800: PUSH
37801: LD_INT 10
37803: PUSH
37804: LD_INT 14
37806: PUSH
37807: LD_INT 20
37809: PUSH
37810: LD_INT 21
37812: PUSH
37813: LD_INT 22
37815: PUSH
37816: LD_INT 25
37818: PUSH
37819: LD_INT 32
37821: PUSH
37822: LD_INT 27
37824: PUSH
37825: LD_INT 36
37827: PUSH
37828: LD_INT 69
37830: PUSH
37831: LD_INT 39
37833: PUSH
37834: LD_INT 34
37836: PUSH
37837: LD_INT 40
37839: PUSH
37840: LD_INT 48
37842: PUSH
37843: LD_INT 49
37845: PUSH
37846: LD_INT 50
37848: PUSH
37849: LD_INT 51
37851: PUSH
37852: LD_INT 52
37854: PUSH
37855: LD_INT 53
37857: PUSH
37858: LD_INT 54
37860: PUSH
37861: LD_INT 55
37863: PUSH
37864: LD_INT 56
37866: PUSH
37867: LD_INT 57
37869: PUSH
37870: LD_INT 58
37872: PUSH
37873: LD_INT 59
37875: PUSH
37876: LD_INT 60
37878: PUSH
37879: LD_INT 61
37881: PUSH
37882: LD_INT 62
37884: PUSH
37885: LD_INT 80
37887: PUSH
37888: LD_INT 82
37890: PUSH
37891: LD_INT 83
37893: PUSH
37894: LD_INT 84
37896: PUSH
37897: LD_INT 85
37899: PUSH
37900: LD_INT 86
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: ST_TO_ADDR
37956: GO 38423
37958: LD_INT 2
37960: DOUBLE
37961: EQUAL
37962: IFTRUE 37966
37964: GO 38192
37966: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37967: LD_ADDR_VAR 0 4
37971: PUSH
37972: LD_INT 35
37974: PUSH
37975: LD_INT 45
37977: PUSH
37978: LD_INT 46
37980: PUSH
37981: LD_INT 47
37983: PUSH
37984: LD_INT 82
37986: PUSH
37987: LD_INT 83
37989: PUSH
37990: LD_INT 84
37992: PUSH
37993: LD_INT 85
37995: PUSH
37996: LD_INT 87
37998: PUSH
37999: LD_INT 70
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: LD_INT 11
38007: PUSH
38008: LD_INT 3
38010: PUSH
38011: LD_INT 4
38013: PUSH
38014: LD_INT 5
38016: PUSH
38017: LD_INT 6
38019: PUSH
38020: LD_INT 15
38022: PUSH
38023: LD_INT 18
38025: PUSH
38026: LD_INT 7
38028: PUSH
38029: LD_INT 17
38031: PUSH
38032: LD_INT 8
38034: PUSH
38035: LD_INT 20
38037: PUSH
38038: LD_INT 21
38040: PUSH
38041: LD_INT 22
38043: PUSH
38044: LD_INT 72
38046: PUSH
38047: LD_INT 26
38049: PUSH
38050: LD_INT 69
38052: PUSH
38053: LD_INT 39
38055: PUSH
38056: LD_INT 40
38058: PUSH
38059: LD_INT 41
38061: PUSH
38062: LD_INT 42
38064: PUSH
38065: LD_INT 43
38067: PUSH
38068: LD_INT 48
38070: PUSH
38071: LD_INT 49
38073: PUSH
38074: LD_INT 50
38076: PUSH
38077: LD_INT 51
38079: PUSH
38080: LD_INT 52
38082: PUSH
38083: LD_INT 53
38085: PUSH
38086: LD_INT 54
38088: PUSH
38089: LD_INT 55
38091: PUSH
38092: LD_INT 56
38094: PUSH
38095: LD_INT 60
38097: PUSH
38098: LD_INT 61
38100: PUSH
38101: LD_INT 62
38103: PUSH
38104: LD_INT 66
38106: PUSH
38107: LD_INT 67
38109: PUSH
38110: LD_INT 68
38112: PUSH
38113: LD_INT 81
38115: PUSH
38116: LD_INT 82
38118: PUSH
38119: LD_INT 83
38121: PUSH
38122: LD_INT 84
38124: PUSH
38125: LD_INT 85
38127: PUSH
38128: LD_INT 87
38130: PUSH
38131: LD_INT 88
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: ST_TO_ADDR
38190: GO 38423
38192: LD_INT 3
38194: DOUBLE
38195: EQUAL
38196: IFTRUE 38200
38198: GO 38422
38200: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38201: LD_ADDR_VAR 0 4
38205: PUSH
38206: LD_INT 46
38208: PUSH
38209: LD_INT 47
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 2
38217: PUSH
38218: LD_INT 82
38220: PUSH
38221: LD_INT 83
38223: PUSH
38224: LD_INT 84
38226: PUSH
38227: LD_INT 85
38229: PUSH
38230: LD_INT 86
38232: PUSH
38233: LD_INT 11
38235: PUSH
38236: LD_INT 9
38238: PUSH
38239: LD_INT 20
38241: PUSH
38242: LD_INT 19
38244: PUSH
38245: LD_INT 21
38247: PUSH
38248: LD_INT 24
38250: PUSH
38251: LD_INT 22
38253: PUSH
38254: LD_INT 25
38256: PUSH
38257: LD_INT 28
38259: PUSH
38260: LD_INT 29
38262: PUSH
38263: LD_INT 30
38265: PUSH
38266: LD_INT 31
38268: PUSH
38269: LD_INT 37
38271: PUSH
38272: LD_INT 38
38274: PUSH
38275: LD_INT 32
38277: PUSH
38278: LD_INT 27
38280: PUSH
38281: LD_INT 33
38283: PUSH
38284: LD_INT 69
38286: PUSH
38287: LD_INT 39
38289: PUSH
38290: LD_INT 34
38292: PUSH
38293: LD_INT 40
38295: PUSH
38296: LD_INT 71
38298: PUSH
38299: LD_INT 23
38301: PUSH
38302: LD_INT 44
38304: PUSH
38305: LD_INT 48
38307: PUSH
38308: LD_INT 49
38310: PUSH
38311: LD_INT 50
38313: PUSH
38314: LD_INT 51
38316: PUSH
38317: LD_INT 52
38319: PUSH
38320: LD_INT 53
38322: PUSH
38323: LD_INT 54
38325: PUSH
38326: LD_INT 55
38328: PUSH
38329: LD_INT 56
38331: PUSH
38332: LD_INT 57
38334: PUSH
38335: LD_INT 58
38337: PUSH
38338: LD_INT 59
38340: PUSH
38341: LD_INT 63
38343: PUSH
38344: LD_INT 64
38346: PUSH
38347: LD_INT 65
38349: PUSH
38350: LD_INT 82
38352: PUSH
38353: LD_INT 83
38355: PUSH
38356: LD_INT 84
38358: PUSH
38359: LD_INT 85
38361: PUSH
38362: LD_INT 86
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: ST_TO_ADDR
38420: GO 38423
38422: POP
// if state > - 1 and state < 3 then
38423: LD_VAR 0 3
38427: PUSH
38428: LD_INT 1
38430: NEG
38431: GREATER
38432: PUSH
38433: LD_VAR 0 3
38437: PUSH
38438: LD_INT 3
38440: LESS
38441: AND
38442: IFFALSE 38499
// for i in result do
38444: LD_ADDR_VAR 0 5
38448: PUSH
38449: LD_VAR 0 4
38453: PUSH
38454: FOR_IN
38455: IFFALSE 38497
// if GetTech ( i , side ) <> state then
38457: LD_VAR 0 5
38461: PPUSH
38462: LD_VAR 0 1
38466: PPUSH
38467: CALL_OW 321
38471: PUSH
38472: LD_VAR 0 3
38476: NONEQUAL
38477: IFFALSE 38495
// result := result diff i ;
38479: LD_ADDR_VAR 0 4
38483: PUSH
38484: LD_VAR 0 4
38488: PUSH
38489: LD_VAR 0 5
38493: DIFF
38494: ST_TO_ADDR
38495: GO 38454
38497: POP
38498: POP
// end ;
38499: LD_VAR 0 4
38503: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38504: LD_INT 0
38506: PPUSH
38507: PPUSH
38508: PPUSH
// result := true ;
38509: LD_ADDR_VAR 0 3
38513: PUSH
38514: LD_INT 1
38516: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38517: LD_ADDR_VAR 0 5
38521: PUSH
38522: LD_VAR 0 2
38526: PPUSH
38527: CALL_OW 480
38531: ST_TO_ADDR
// if not tmp then
38532: LD_VAR 0 5
38536: NOT
38537: IFFALSE 38541
// exit ;
38539: GO 38590
// for i in tmp do
38541: LD_ADDR_VAR 0 4
38545: PUSH
38546: LD_VAR 0 5
38550: PUSH
38551: FOR_IN
38552: IFFALSE 38588
// if GetTech ( i , side ) <> state_researched then
38554: LD_VAR 0 4
38558: PPUSH
38559: LD_VAR 0 1
38563: PPUSH
38564: CALL_OW 321
38568: PUSH
38569: LD_INT 2
38571: NONEQUAL
38572: IFFALSE 38586
// begin result := false ;
38574: LD_ADDR_VAR 0 3
38578: PUSH
38579: LD_INT 0
38581: ST_TO_ADDR
// exit ;
38582: POP
38583: POP
38584: GO 38590
// end ;
38586: GO 38551
38588: POP
38589: POP
// end ;
38590: LD_VAR 0 3
38594: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38595: LD_INT 0
38597: PPUSH
38598: PPUSH
38599: PPUSH
38600: PPUSH
38601: PPUSH
38602: PPUSH
38603: PPUSH
38604: PPUSH
38605: PPUSH
38606: PPUSH
38607: PPUSH
38608: PPUSH
38609: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38610: LD_VAR 0 1
38614: NOT
38615: PUSH
38616: LD_VAR 0 1
38620: PPUSH
38621: CALL_OW 257
38625: PUSH
38626: LD_INT 9
38628: NONEQUAL
38629: OR
38630: IFFALSE 38634
// exit ;
38632: GO 39207
// side := GetSide ( unit ) ;
38634: LD_ADDR_VAR 0 9
38638: PUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL_OW 255
38648: ST_TO_ADDR
// tech_space := tech_spacanom ;
38649: LD_ADDR_VAR 0 12
38653: PUSH
38654: LD_INT 29
38656: ST_TO_ADDR
// tech_time := tech_taurad ;
38657: LD_ADDR_VAR 0 13
38661: PUSH
38662: LD_INT 28
38664: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38665: LD_ADDR_VAR 0 11
38669: PUSH
38670: LD_VAR 0 1
38674: PPUSH
38675: CALL_OW 310
38679: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38680: LD_VAR 0 11
38684: PPUSH
38685: CALL_OW 247
38689: PUSH
38690: LD_INT 2
38692: EQUAL
38693: IFFALSE 38697
// exit ;
38695: GO 39207
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38697: LD_ADDR_VAR 0 8
38701: PUSH
38702: LD_INT 81
38704: PUSH
38705: LD_VAR 0 9
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: LD_INT 21
38719: PUSH
38720: LD_INT 3
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PPUSH
38735: CALL_OW 69
38739: ST_TO_ADDR
// if not tmp then
38740: LD_VAR 0 8
38744: NOT
38745: IFFALSE 38749
// exit ;
38747: GO 39207
// if in_unit then
38749: LD_VAR 0 11
38753: IFFALSE 38777
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38755: LD_ADDR_VAR 0 10
38759: PUSH
38760: LD_VAR 0 8
38764: PPUSH
38765: LD_VAR 0 11
38769: PPUSH
38770: CALL_OW 74
38774: ST_TO_ADDR
38775: GO 38797
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38777: LD_ADDR_VAR 0 10
38781: PUSH
38782: LD_VAR 0 8
38786: PPUSH
38787: LD_VAR 0 1
38791: PPUSH
38792: CALL_OW 74
38796: ST_TO_ADDR
// if not enemy then
38797: LD_VAR 0 10
38801: NOT
38802: IFFALSE 38806
// exit ;
38804: GO 39207
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38806: LD_VAR 0 11
38810: PUSH
38811: LD_VAR 0 11
38815: PPUSH
38816: LD_VAR 0 10
38820: PPUSH
38821: CALL_OW 296
38825: PUSH
38826: LD_INT 13
38828: GREATER
38829: AND
38830: PUSH
38831: LD_VAR 0 1
38835: PPUSH
38836: LD_VAR 0 10
38840: PPUSH
38841: CALL_OW 296
38845: PUSH
38846: LD_INT 12
38848: GREATER
38849: OR
38850: IFFALSE 38854
// exit ;
38852: GO 39207
// missile := [ 1 ] ;
38854: LD_ADDR_VAR 0 14
38858: PUSH
38859: LD_INT 1
38861: PUSH
38862: EMPTY
38863: LIST
38864: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38865: LD_VAR 0 9
38869: PPUSH
38870: LD_VAR 0 12
38874: PPUSH
38875: CALL_OW 325
38879: IFFALSE 38908
// missile := Replace ( missile , missile + 1 , 2 ) ;
38881: LD_ADDR_VAR 0 14
38885: PUSH
38886: LD_VAR 0 14
38890: PPUSH
38891: LD_VAR 0 14
38895: PUSH
38896: LD_INT 1
38898: PLUS
38899: PPUSH
38900: LD_INT 2
38902: PPUSH
38903: CALL_OW 1
38907: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38908: LD_VAR 0 9
38912: PPUSH
38913: LD_VAR 0 13
38917: PPUSH
38918: CALL_OW 325
38922: PUSH
38923: LD_VAR 0 10
38927: PPUSH
38928: CALL_OW 255
38932: PPUSH
38933: LD_VAR 0 13
38937: PPUSH
38938: CALL_OW 325
38942: NOT
38943: AND
38944: IFFALSE 38973
// missile := Replace ( missile , missile + 1 , 3 ) ;
38946: LD_ADDR_VAR 0 14
38950: PUSH
38951: LD_VAR 0 14
38955: PPUSH
38956: LD_VAR 0 14
38960: PUSH
38961: LD_INT 1
38963: PLUS
38964: PPUSH
38965: LD_INT 3
38967: PPUSH
38968: CALL_OW 1
38972: ST_TO_ADDR
// if missile < 2 then
38973: LD_VAR 0 14
38977: PUSH
38978: LD_INT 2
38980: LESS
38981: IFFALSE 38985
// exit ;
38983: GO 39207
// x := GetX ( enemy ) ;
38985: LD_ADDR_VAR 0 4
38989: PUSH
38990: LD_VAR 0 10
38994: PPUSH
38995: CALL_OW 250
38999: ST_TO_ADDR
// y := GetY ( enemy ) ;
39000: LD_ADDR_VAR 0 5
39004: PUSH
39005: LD_VAR 0 10
39009: PPUSH
39010: CALL_OW 251
39014: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39015: LD_ADDR_VAR 0 6
39019: PUSH
39020: LD_VAR 0 4
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PPUSH
39029: LD_INT 1
39031: PPUSH
39032: CALL_OW 12
39036: PLUS
39037: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39038: LD_ADDR_VAR 0 7
39042: PUSH
39043: LD_VAR 0 5
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PPUSH
39052: LD_INT 1
39054: PPUSH
39055: CALL_OW 12
39059: PLUS
39060: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39061: LD_VAR 0 6
39065: PPUSH
39066: LD_VAR 0 7
39070: PPUSH
39071: CALL_OW 488
39075: NOT
39076: IFFALSE 39098
// begin _x := x ;
39078: LD_ADDR_VAR 0 6
39082: PUSH
39083: LD_VAR 0 4
39087: ST_TO_ADDR
// _y := y ;
39088: LD_ADDR_VAR 0 7
39092: PUSH
39093: LD_VAR 0 5
39097: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39098: LD_ADDR_VAR 0 3
39102: PUSH
39103: LD_INT 1
39105: PPUSH
39106: LD_VAR 0 14
39110: PPUSH
39111: CALL_OW 12
39115: ST_TO_ADDR
// case i of 1 :
39116: LD_VAR 0 3
39120: PUSH
39121: LD_INT 1
39123: DOUBLE
39124: EQUAL
39125: IFTRUE 39129
39127: GO 39146
39129: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39130: LD_VAR 0 1
39134: PPUSH
39135: LD_VAR 0 10
39139: PPUSH
39140: CALL_OW 115
39144: GO 39207
39146: LD_INT 2
39148: DOUBLE
39149: EQUAL
39150: IFTRUE 39154
39152: GO 39176
39154: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39155: LD_VAR 0 1
39159: PPUSH
39160: LD_VAR 0 6
39164: PPUSH
39165: LD_VAR 0 7
39169: PPUSH
39170: CALL_OW 153
39174: GO 39207
39176: LD_INT 3
39178: DOUBLE
39179: EQUAL
39180: IFTRUE 39184
39182: GO 39206
39184: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39185: LD_VAR 0 1
39189: PPUSH
39190: LD_VAR 0 6
39194: PPUSH
39195: LD_VAR 0 7
39199: PPUSH
39200: CALL_OW 154
39204: GO 39207
39206: POP
// end ;
39207: LD_VAR 0 2
39211: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39212: LD_INT 0
39214: PPUSH
39215: PPUSH
39216: PPUSH
39217: PPUSH
39218: PPUSH
39219: PPUSH
// if not unit or not building then
39220: LD_VAR 0 1
39224: NOT
39225: PUSH
39226: LD_VAR 0 2
39230: NOT
39231: OR
39232: IFFALSE 39236
// exit ;
39234: GO 39394
// x := GetX ( building ) ;
39236: LD_ADDR_VAR 0 5
39240: PUSH
39241: LD_VAR 0 2
39245: PPUSH
39246: CALL_OW 250
39250: ST_TO_ADDR
// y := GetY ( building ) ;
39251: LD_ADDR_VAR 0 6
39255: PUSH
39256: LD_VAR 0 2
39260: PPUSH
39261: CALL_OW 251
39265: ST_TO_ADDR
// for i = 0 to 5 do
39266: LD_ADDR_VAR 0 4
39270: PUSH
39271: DOUBLE
39272: LD_INT 0
39274: DEC
39275: ST_TO_ADDR
39276: LD_INT 5
39278: PUSH
39279: FOR_TO
39280: IFFALSE 39392
// begin _x := ShiftX ( x , i , 3 ) ;
39282: LD_ADDR_VAR 0 7
39286: PUSH
39287: LD_VAR 0 5
39291: PPUSH
39292: LD_VAR 0 4
39296: PPUSH
39297: LD_INT 3
39299: PPUSH
39300: CALL_OW 272
39304: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39305: LD_ADDR_VAR 0 8
39309: PUSH
39310: LD_VAR 0 6
39314: PPUSH
39315: LD_VAR 0 4
39319: PPUSH
39320: LD_INT 3
39322: PPUSH
39323: CALL_OW 273
39327: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39328: LD_VAR 0 7
39332: PPUSH
39333: LD_VAR 0 8
39337: PPUSH
39338: CALL_OW 488
39342: NOT
39343: IFFALSE 39347
// continue ;
39345: GO 39279
// if HexInfo ( _x , _y ) = 0 then
39347: LD_VAR 0 7
39351: PPUSH
39352: LD_VAR 0 8
39356: PPUSH
39357: CALL_OW 428
39361: PUSH
39362: LD_INT 0
39364: EQUAL
39365: IFFALSE 39390
// begin ComMoveXY ( unit , _x , _y ) ;
39367: LD_VAR 0 1
39371: PPUSH
39372: LD_VAR 0 7
39376: PPUSH
39377: LD_VAR 0 8
39381: PPUSH
39382: CALL_OW 111
// exit ;
39386: POP
39387: POP
39388: GO 39394
// end ; end ;
39390: GO 39279
39392: POP
39393: POP
// end ;
39394: LD_VAR 0 3
39398: RET
// export function ScanBase ( side , base_area ) ; begin
39399: LD_INT 0
39401: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39402: LD_ADDR_VAR 0 3
39406: PUSH
39407: LD_VAR 0 2
39411: PPUSH
39412: LD_INT 81
39414: PUSH
39415: LD_VAR 0 1
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PPUSH
39424: CALL_OW 70
39428: ST_TO_ADDR
// end ;
39429: LD_VAR 0 3
39433: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39434: LD_INT 0
39436: PPUSH
39437: PPUSH
39438: PPUSH
39439: PPUSH
// result := false ;
39440: LD_ADDR_VAR 0 2
39444: PUSH
39445: LD_INT 0
39447: ST_TO_ADDR
// side := GetSide ( unit ) ;
39448: LD_ADDR_VAR 0 3
39452: PUSH
39453: LD_VAR 0 1
39457: PPUSH
39458: CALL_OW 255
39462: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39463: LD_ADDR_VAR 0 4
39467: PUSH
39468: LD_VAR 0 1
39472: PPUSH
39473: CALL_OW 248
39477: ST_TO_ADDR
// case nat of 1 :
39478: LD_VAR 0 4
39482: PUSH
39483: LD_INT 1
39485: DOUBLE
39486: EQUAL
39487: IFTRUE 39491
39489: GO 39502
39491: POP
// tech := tech_lassight ; 2 :
39492: LD_ADDR_VAR 0 5
39496: PUSH
39497: LD_INT 12
39499: ST_TO_ADDR
39500: GO 39541
39502: LD_INT 2
39504: DOUBLE
39505: EQUAL
39506: IFTRUE 39510
39508: GO 39521
39510: POP
// tech := tech_mortar ; 3 :
39511: LD_ADDR_VAR 0 5
39515: PUSH
39516: LD_INT 41
39518: ST_TO_ADDR
39519: GO 39541
39521: LD_INT 3
39523: DOUBLE
39524: EQUAL
39525: IFTRUE 39529
39527: GO 39540
39529: POP
// tech := tech_bazooka ; end ;
39530: LD_ADDR_VAR 0 5
39534: PUSH
39535: LD_INT 44
39537: ST_TO_ADDR
39538: GO 39541
39540: POP
// if Researched ( side , tech ) then
39541: LD_VAR 0 3
39545: PPUSH
39546: LD_VAR 0 5
39550: PPUSH
39551: CALL_OW 325
39555: IFFALSE 39582
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39557: LD_ADDR_VAR 0 2
39561: PUSH
39562: LD_INT 5
39564: PUSH
39565: LD_INT 8
39567: PUSH
39568: LD_INT 9
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: PUSH
39576: LD_VAR 0 4
39580: ARRAY
39581: ST_TO_ADDR
// end ;
39582: LD_VAR 0 2
39586: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39587: LD_INT 0
39589: PPUSH
39590: PPUSH
39591: PPUSH
// if not mines then
39592: LD_VAR 0 2
39596: NOT
39597: IFFALSE 39601
// exit ;
39599: GO 39745
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39601: LD_ADDR_VAR 0 5
39605: PUSH
39606: LD_INT 81
39608: PUSH
39609: LD_VAR 0 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 3
39620: PUSH
39621: LD_INT 21
39623: PUSH
39624: LD_INT 3
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PPUSH
39639: CALL_OW 69
39643: ST_TO_ADDR
// for i in mines do
39644: LD_ADDR_VAR 0 4
39648: PUSH
39649: LD_VAR 0 2
39653: PUSH
39654: FOR_IN
39655: IFFALSE 39743
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39657: LD_VAR 0 4
39661: PUSH
39662: LD_INT 1
39664: ARRAY
39665: PPUSH
39666: LD_VAR 0 4
39670: PUSH
39671: LD_INT 2
39673: ARRAY
39674: PPUSH
39675: CALL_OW 458
39679: NOT
39680: IFFALSE 39684
// continue ;
39682: GO 39654
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39684: LD_VAR 0 4
39688: PUSH
39689: LD_INT 1
39691: ARRAY
39692: PPUSH
39693: LD_VAR 0 4
39697: PUSH
39698: LD_INT 2
39700: ARRAY
39701: PPUSH
39702: CALL_OW 428
39706: PUSH
39707: LD_VAR 0 5
39711: IN
39712: IFFALSE 39741
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39714: LD_VAR 0 4
39718: PUSH
39719: LD_INT 1
39721: ARRAY
39722: PPUSH
39723: LD_VAR 0 4
39727: PUSH
39728: LD_INT 2
39730: ARRAY
39731: PPUSH
39732: LD_VAR 0 1
39736: PPUSH
39737: CALL_OW 456
// end ;
39741: GO 39654
39743: POP
39744: POP
// end ;
39745: LD_VAR 0 3
39749: RET
// export function Count ( array ) ; begin
39750: LD_INT 0
39752: PPUSH
// result := array + 0 ;
39753: LD_ADDR_VAR 0 2
39757: PUSH
39758: LD_VAR 0 1
39762: PUSH
39763: LD_INT 0
39765: PLUS
39766: ST_TO_ADDR
// end ;
39767: LD_VAR 0 2
39771: RET
// export function IsEmpty ( building ) ; begin
39772: LD_INT 0
39774: PPUSH
// if not building then
39775: LD_VAR 0 1
39779: NOT
39780: IFFALSE 39784
// exit ;
39782: GO 39827
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39784: LD_ADDR_VAR 0 2
39788: PUSH
39789: LD_VAR 0 1
39793: PUSH
39794: LD_INT 22
39796: PUSH
39797: LD_VAR 0 1
39801: PPUSH
39802: CALL_OW 255
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 58
39813: PUSH
39814: EMPTY
39815: LIST
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PPUSH
39821: CALL_OW 69
39825: IN
39826: ST_TO_ADDR
// end ;
39827: LD_VAR 0 2
39831: RET
// export function IsNotFull ( building ) ; var places ; begin
39832: LD_INT 0
39834: PPUSH
39835: PPUSH
// if not building then
39836: LD_VAR 0 1
39840: NOT
39841: IFFALSE 39845
// exit ;
39843: GO 39873
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
39845: LD_ADDR_VAR 0 2
39849: PUSH
39850: LD_VAR 0 1
39854: PPUSH
39855: LD_INT 3
39857: PUSH
39858: LD_INT 62
39860: PUSH
39861: EMPTY
39862: LIST
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PPUSH
39868: CALL_OW 72
39872: ST_TO_ADDR
// end ;
39873: LD_VAR 0 2
39877: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39878: LD_INT 0
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
// tmp := [ ] ;
39884: LD_ADDR_VAR 0 3
39888: PUSH
39889: EMPTY
39890: ST_TO_ADDR
// list := [ ] ;
39891: LD_ADDR_VAR 0 5
39895: PUSH
39896: EMPTY
39897: ST_TO_ADDR
// for i = 16 to 25 do
39898: LD_ADDR_VAR 0 4
39902: PUSH
39903: DOUBLE
39904: LD_INT 16
39906: DEC
39907: ST_TO_ADDR
39908: LD_INT 25
39910: PUSH
39911: FOR_TO
39912: IFFALSE 39985
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39914: LD_ADDR_VAR 0 3
39918: PUSH
39919: LD_VAR 0 3
39923: PUSH
39924: LD_INT 22
39926: PUSH
39927: LD_VAR 0 1
39931: PPUSH
39932: CALL_OW 255
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 91
39943: PUSH
39944: LD_VAR 0 1
39948: PUSH
39949: LD_INT 6
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 30
39959: PUSH
39960: LD_VAR 0 4
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: PUSH
39974: EMPTY
39975: LIST
39976: PPUSH
39977: CALL_OW 69
39981: ADD
39982: ST_TO_ADDR
39983: GO 39911
39985: POP
39986: POP
// for i = 1 to tmp do
39987: LD_ADDR_VAR 0 4
39991: PUSH
39992: DOUBLE
39993: LD_INT 1
39995: DEC
39996: ST_TO_ADDR
39997: LD_VAR 0 3
40001: PUSH
40002: FOR_TO
40003: IFFALSE 40091
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40005: LD_ADDR_VAR 0 5
40009: PUSH
40010: LD_VAR 0 5
40014: PUSH
40015: LD_VAR 0 3
40019: PUSH
40020: LD_VAR 0 4
40024: ARRAY
40025: PPUSH
40026: CALL_OW 266
40030: PUSH
40031: LD_VAR 0 3
40035: PUSH
40036: LD_VAR 0 4
40040: ARRAY
40041: PPUSH
40042: CALL_OW 250
40046: PUSH
40047: LD_VAR 0 3
40051: PUSH
40052: LD_VAR 0 4
40056: ARRAY
40057: PPUSH
40058: CALL_OW 251
40062: PUSH
40063: LD_VAR 0 3
40067: PUSH
40068: LD_VAR 0 4
40072: ARRAY
40073: PPUSH
40074: CALL_OW 254
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: PUSH
40085: EMPTY
40086: LIST
40087: ADD
40088: ST_TO_ADDR
40089: GO 40002
40091: POP
40092: POP
// result := list ;
40093: LD_ADDR_VAR 0 2
40097: PUSH
40098: LD_VAR 0 5
40102: ST_TO_ADDR
// end ;
40103: LD_VAR 0 2
40107: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40108: LD_INT 0
40110: PPUSH
40111: PPUSH
40112: PPUSH
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
// if not factory then
40117: LD_VAR 0 1
40121: NOT
40122: IFFALSE 40126
// exit ;
40124: GO 40719
// if control = control_apeman then
40126: LD_VAR 0 4
40130: PUSH
40131: LD_INT 5
40133: EQUAL
40134: IFFALSE 40243
// begin tmp := UnitsInside ( factory ) ;
40136: LD_ADDR_VAR 0 8
40140: PUSH
40141: LD_VAR 0 1
40145: PPUSH
40146: CALL_OW 313
40150: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40151: LD_VAR 0 8
40155: PPUSH
40156: LD_INT 25
40158: PUSH
40159: LD_INT 12
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PPUSH
40166: CALL_OW 72
40170: NOT
40171: IFFALSE 40181
// control := control_manual ;
40173: LD_ADDR_VAR 0 4
40177: PUSH
40178: LD_INT 1
40180: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40181: LD_ADDR_VAR 0 8
40185: PUSH
40186: LD_VAR 0 1
40190: PPUSH
40191: CALL 39878 0 1
40195: ST_TO_ADDR
// if tmp then
40196: LD_VAR 0 8
40200: IFFALSE 40243
// begin for i in tmp do
40202: LD_ADDR_VAR 0 7
40206: PUSH
40207: LD_VAR 0 8
40211: PUSH
40212: FOR_IN
40213: IFFALSE 40241
// if i [ 1 ] = b_ext_radio then
40215: LD_VAR 0 7
40219: PUSH
40220: LD_INT 1
40222: ARRAY
40223: PUSH
40224: LD_INT 22
40226: EQUAL
40227: IFFALSE 40239
// begin control := control_remote ;
40229: LD_ADDR_VAR 0 4
40233: PUSH
40234: LD_INT 2
40236: ST_TO_ADDR
// break ;
40237: GO 40241
// end ;
40239: GO 40212
40241: POP
40242: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40243: LD_VAR 0 1
40247: PPUSH
40248: LD_VAR 0 2
40252: PPUSH
40253: LD_VAR 0 3
40257: PPUSH
40258: LD_VAR 0 4
40262: PPUSH
40263: LD_VAR 0 5
40267: PPUSH
40268: CALL_OW 448
40272: IFFALSE 40307
// begin result := [ chassis , engine , control , weapon ] ;
40274: LD_ADDR_VAR 0 6
40278: PUSH
40279: LD_VAR 0 2
40283: PUSH
40284: LD_VAR 0 3
40288: PUSH
40289: LD_VAR 0 4
40293: PUSH
40294: LD_VAR 0 5
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: ST_TO_ADDR
// exit ;
40305: GO 40719
// end ; _chassis := AvailableChassisList ( factory ) ;
40307: LD_ADDR_VAR 0 9
40311: PUSH
40312: LD_VAR 0 1
40316: PPUSH
40317: CALL_OW 475
40321: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40322: LD_ADDR_VAR 0 11
40326: PUSH
40327: LD_VAR 0 1
40331: PPUSH
40332: CALL_OW 476
40336: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40337: LD_ADDR_VAR 0 12
40341: PUSH
40342: LD_VAR 0 1
40346: PPUSH
40347: CALL_OW 477
40351: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40352: LD_ADDR_VAR 0 10
40356: PUSH
40357: LD_VAR 0 1
40361: PPUSH
40362: CALL_OW 478
40366: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40367: LD_VAR 0 9
40371: NOT
40372: PUSH
40373: LD_VAR 0 11
40377: NOT
40378: OR
40379: PUSH
40380: LD_VAR 0 12
40384: NOT
40385: OR
40386: PUSH
40387: LD_VAR 0 10
40391: NOT
40392: OR
40393: IFFALSE 40428
// begin result := [ chassis , engine , control , weapon ] ;
40395: LD_ADDR_VAR 0 6
40399: PUSH
40400: LD_VAR 0 2
40404: PUSH
40405: LD_VAR 0 3
40409: PUSH
40410: LD_VAR 0 4
40414: PUSH
40415: LD_VAR 0 5
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: ST_TO_ADDR
// exit ;
40426: GO 40719
// end ; if not chassis in _chassis then
40428: LD_VAR 0 2
40432: PUSH
40433: LD_VAR 0 9
40437: IN
40438: NOT
40439: IFFALSE 40465
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40441: LD_ADDR_VAR 0 2
40445: PUSH
40446: LD_VAR 0 9
40450: PUSH
40451: LD_INT 1
40453: PPUSH
40454: LD_VAR 0 9
40458: PPUSH
40459: CALL_OW 12
40463: ARRAY
40464: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40465: LD_VAR 0 2
40469: PPUSH
40470: LD_VAR 0 3
40474: PPUSH
40475: CALL 40724 0 2
40479: NOT
40480: IFFALSE 40539
// repeat engine := _engine [ 1 ] ;
40482: LD_ADDR_VAR 0 3
40486: PUSH
40487: LD_VAR 0 11
40491: PUSH
40492: LD_INT 1
40494: ARRAY
40495: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40496: LD_ADDR_VAR 0 11
40500: PUSH
40501: LD_VAR 0 11
40505: PPUSH
40506: LD_INT 1
40508: PPUSH
40509: CALL_OW 3
40513: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40514: LD_VAR 0 2
40518: PPUSH
40519: LD_VAR 0 3
40523: PPUSH
40524: CALL 40724 0 2
40528: PUSH
40529: LD_VAR 0 11
40533: PUSH
40534: EMPTY
40535: EQUAL
40536: OR
40537: IFFALSE 40482
// if not control in _control then
40539: LD_VAR 0 4
40543: PUSH
40544: LD_VAR 0 12
40548: IN
40549: NOT
40550: IFFALSE 40576
// control := _control [ rand ( 1 , _control ) ] ;
40552: LD_ADDR_VAR 0 4
40556: PUSH
40557: LD_VAR 0 12
40561: PUSH
40562: LD_INT 1
40564: PPUSH
40565: LD_VAR 0 12
40569: PPUSH
40570: CALL_OW 12
40574: ARRAY
40575: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40576: LD_VAR 0 2
40580: PPUSH
40581: LD_VAR 0 5
40585: PPUSH
40586: CALL 40944 0 2
40590: NOT
40591: IFFALSE 40650
// repeat weapon := _weapon [ 1 ] ;
40593: LD_ADDR_VAR 0 5
40597: PUSH
40598: LD_VAR 0 10
40602: PUSH
40603: LD_INT 1
40605: ARRAY
40606: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40607: LD_ADDR_VAR 0 10
40611: PUSH
40612: LD_VAR 0 10
40616: PPUSH
40617: LD_INT 1
40619: PPUSH
40620: CALL_OW 3
40624: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40625: LD_VAR 0 2
40629: PPUSH
40630: LD_VAR 0 5
40634: PPUSH
40635: CALL 40944 0 2
40639: PUSH
40640: LD_VAR 0 10
40644: PUSH
40645: EMPTY
40646: EQUAL
40647: OR
40648: IFFALSE 40593
// result := [ ] ;
40650: LD_ADDR_VAR 0 6
40654: PUSH
40655: EMPTY
40656: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40657: LD_VAR 0 1
40661: PPUSH
40662: LD_VAR 0 2
40666: PPUSH
40667: LD_VAR 0 3
40671: PPUSH
40672: LD_VAR 0 4
40676: PPUSH
40677: LD_VAR 0 5
40681: PPUSH
40682: CALL_OW 448
40686: IFFALSE 40719
// result := [ chassis , engine , control , weapon ] ;
40688: LD_ADDR_VAR 0 6
40692: PUSH
40693: LD_VAR 0 2
40697: PUSH
40698: LD_VAR 0 3
40702: PUSH
40703: LD_VAR 0 4
40707: PUSH
40708: LD_VAR 0 5
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: ST_TO_ADDR
// end ;
40719: LD_VAR 0 6
40723: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40724: LD_INT 0
40726: PPUSH
// if not chassis or not engine then
40727: LD_VAR 0 1
40731: NOT
40732: PUSH
40733: LD_VAR 0 2
40737: NOT
40738: OR
40739: IFFALSE 40743
// exit ;
40741: GO 40939
// case engine of engine_solar :
40743: LD_VAR 0 2
40747: PUSH
40748: LD_INT 2
40750: DOUBLE
40751: EQUAL
40752: IFTRUE 40756
40754: GO 40794
40756: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40757: LD_ADDR_VAR 0 3
40761: PUSH
40762: LD_INT 11
40764: PUSH
40765: LD_INT 12
40767: PUSH
40768: LD_INT 13
40770: PUSH
40771: LD_INT 14
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 3
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: ST_TO_ADDR
40792: GO 40923
40794: LD_INT 1
40796: DOUBLE
40797: EQUAL
40798: IFTRUE 40802
40800: GO 40864
40802: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40803: LD_ADDR_VAR 0 3
40807: PUSH
40808: LD_INT 11
40810: PUSH
40811: LD_INT 12
40813: PUSH
40814: LD_INT 13
40816: PUSH
40817: LD_INT 14
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 2
40825: PUSH
40826: LD_INT 3
40828: PUSH
40829: LD_INT 4
40831: PUSH
40832: LD_INT 5
40834: PUSH
40835: LD_INT 21
40837: PUSH
40838: LD_INT 23
40840: PUSH
40841: LD_INT 22
40843: PUSH
40844: LD_INT 24
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: ST_TO_ADDR
40862: GO 40923
40864: LD_INT 3
40866: DOUBLE
40867: EQUAL
40868: IFTRUE 40872
40870: GO 40922
40872: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40873: LD_ADDR_VAR 0 3
40877: PUSH
40878: LD_INT 13
40880: PUSH
40881: LD_INT 14
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 3
40889: PUSH
40890: LD_INT 4
40892: PUSH
40893: LD_INT 5
40895: PUSH
40896: LD_INT 21
40898: PUSH
40899: LD_INT 22
40901: PUSH
40902: LD_INT 23
40904: PUSH
40905: LD_INT 24
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: ST_TO_ADDR
40920: GO 40923
40922: POP
// result := ( chassis in result ) ;
40923: LD_ADDR_VAR 0 3
40927: PUSH
40928: LD_VAR 0 1
40932: PUSH
40933: LD_VAR 0 3
40937: IN
40938: ST_TO_ADDR
// end ;
40939: LD_VAR 0 3
40943: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40944: LD_INT 0
40946: PPUSH
// if not chassis or not weapon then
40947: LD_VAR 0 1
40951: NOT
40952: PUSH
40953: LD_VAR 0 2
40957: NOT
40958: OR
40959: IFFALSE 40963
// exit ;
40961: GO 42023
// case weapon of us_machine_gun :
40963: LD_VAR 0 2
40967: PUSH
40968: LD_INT 2
40970: DOUBLE
40971: EQUAL
40972: IFTRUE 40976
40974: GO 41006
40976: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40977: LD_ADDR_VAR 0 3
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: LD_INT 3
40990: PUSH
40991: LD_INT 4
40993: PUSH
40994: LD_INT 5
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: ST_TO_ADDR
41004: GO 42007
41006: LD_INT 3
41008: DOUBLE
41009: EQUAL
41010: IFTRUE 41014
41012: GO 41044
41014: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41015: LD_ADDR_VAR 0 3
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: LD_INT 3
41028: PUSH
41029: LD_INT 4
41031: PUSH
41032: LD_INT 5
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: ST_TO_ADDR
41042: GO 42007
41044: LD_INT 11
41046: DOUBLE
41047: EQUAL
41048: IFTRUE 41052
41050: GO 41082
41052: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41053: LD_ADDR_VAR 0 3
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: LD_INT 3
41066: PUSH
41067: LD_INT 4
41069: PUSH
41070: LD_INT 5
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: ST_TO_ADDR
41080: GO 42007
41082: LD_INT 4
41084: DOUBLE
41085: EQUAL
41086: IFTRUE 41090
41088: GO 41116
41090: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41091: LD_ADDR_VAR 0 3
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 3
41101: PUSH
41102: LD_INT 4
41104: PUSH
41105: LD_INT 5
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: ST_TO_ADDR
41114: GO 42007
41116: LD_INT 5
41118: DOUBLE
41119: EQUAL
41120: IFTRUE 41124
41122: GO 41150
41124: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41125: LD_ADDR_VAR 0 3
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: LD_INT 3
41135: PUSH
41136: LD_INT 4
41138: PUSH
41139: LD_INT 5
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: ST_TO_ADDR
41148: GO 42007
41150: LD_INT 9
41152: DOUBLE
41153: EQUAL
41154: IFTRUE 41158
41156: GO 41184
41158: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41159: LD_ADDR_VAR 0 3
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: LD_INT 3
41169: PUSH
41170: LD_INT 4
41172: PUSH
41173: LD_INT 5
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: ST_TO_ADDR
41182: GO 42007
41184: LD_INT 7
41186: DOUBLE
41187: EQUAL
41188: IFTRUE 41192
41190: GO 41218
41192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41193: LD_ADDR_VAR 0 3
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: LD_INT 3
41203: PUSH
41204: LD_INT 4
41206: PUSH
41207: LD_INT 5
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: ST_TO_ADDR
41216: GO 42007
41218: LD_INT 12
41220: DOUBLE
41221: EQUAL
41222: IFTRUE 41226
41224: GO 41252
41226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41227: LD_ADDR_VAR 0 3
41231: PUSH
41232: LD_INT 2
41234: PUSH
41235: LD_INT 3
41237: PUSH
41238: LD_INT 4
41240: PUSH
41241: LD_INT 5
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: ST_TO_ADDR
41250: GO 42007
41252: LD_INT 13
41254: DOUBLE
41255: EQUAL
41256: IFTRUE 41260
41258: GO 41286
41260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: LD_INT 3
41271: PUSH
41272: LD_INT 4
41274: PUSH
41275: LD_INT 5
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: ST_TO_ADDR
41284: GO 42007
41286: LD_INT 14
41288: DOUBLE
41289: EQUAL
41290: IFTRUE 41294
41292: GO 41312
41294: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41295: LD_ADDR_VAR 0 3
41299: PUSH
41300: LD_INT 4
41302: PUSH
41303: LD_INT 5
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: ST_TO_ADDR
41310: GO 42007
41312: LD_INT 6
41314: DOUBLE
41315: EQUAL
41316: IFTRUE 41320
41318: GO 41338
41320: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41321: LD_ADDR_VAR 0 3
41325: PUSH
41326: LD_INT 4
41328: PUSH
41329: LD_INT 5
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: ST_TO_ADDR
41336: GO 42007
41338: LD_INT 10
41340: DOUBLE
41341: EQUAL
41342: IFTRUE 41346
41344: GO 41364
41346: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41347: LD_ADDR_VAR 0 3
41351: PUSH
41352: LD_INT 4
41354: PUSH
41355: LD_INT 5
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: ST_TO_ADDR
41362: GO 42007
41364: LD_INT 22
41366: DOUBLE
41367: EQUAL
41368: IFTRUE 41372
41370: GO 41398
41372: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41373: LD_ADDR_VAR 0 3
41377: PUSH
41378: LD_INT 11
41380: PUSH
41381: LD_INT 12
41383: PUSH
41384: LD_INT 13
41386: PUSH
41387: LD_INT 14
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: ST_TO_ADDR
41396: GO 42007
41398: LD_INT 23
41400: DOUBLE
41401: EQUAL
41402: IFTRUE 41406
41404: GO 41432
41406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41407: LD_ADDR_VAR 0 3
41411: PUSH
41412: LD_INT 11
41414: PUSH
41415: LD_INT 12
41417: PUSH
41418: LD_INT 13
41420: PUSH
41421: LD_INT 14
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: ST_TO_ADDR
41430: GO 42007
41432: LD_INT 24
41434: DOUBLE
41435: EQUAL
41436: IFTRUE 41440
41438: GO 41466
41440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41441: LD_ADDR_VAR 0 3
41445: PUSH
41446: LD_INT 11
41448: PUSH
41449: LD_INT 12
41451: PUSH
41452: LD_INT 13
41454: PUSH
41455: LD_INT 14
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: ST_TO_ADDR
41464: GO 42007
41466: LD_INT 30
41468: DOUBLE
41469: EQUAL
41470: IFTRUE 41474
41472: GO 41500
41474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41475: LD_ADDR_VAR 0 3
41479: PUSH
41480: LD_INT 11
41482: PUSH
41483: LD_INT 12
41485: PUSH
41486: LD_INT 13
41488: PUSH
41489: LD_INT 14
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: ST_TO_ADDR
41498: GO 42007
41500: LD_INT 25
41502: DOUBLE
41503: EQUAL
41504: IFTRUE 41508
41506: GO 41526
41508: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41509: LD_ADDR_VAR 0 3
41513: PUSH
41514: LD_INT 13
41516: PUSH
41517: LD_INT 14
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: ST_TO_ADDR
41524: GO 42007
41526: LD_INT 27
41528: DOUBLE
41529: EQUAL
41530: IFTRUE 41534
41532: GO 41552
41534: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41535: LD_ADDR_VAR 0 3
41539: PUSH
41540: LD_INT 13
41542: PUSH
41543: LD_INT 14
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: ST_TO_ADDR
41550: GO 42007
41552: LD_INT 92
41554: DOUBLE
41555: EQUAL
41556: IFTRUE 41560
41558: GO 41586
41560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41561: LD_ADDR_VAR 0 3
41565: PUSH
41566: LD_INT 11
41568: PUSH
41569: LD_INT 12
41571: PUSH
41572: LD_INT 13
41574: PUSH
41575: LD_INT 14
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: ST_TO_ADDR
41584: GO 42007
41586: LD_INT 28
41588: DOUBLE
41589: EQUAL
41590: IFTRUE 41594
41592: GO 41612
41594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41595: LD_ADDR_VAR 0 3
41599: PUSH
41600: LD_INT 13
41602: PUSH
41603: LD_INT 14
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: ST_TO_ADDR
41610: GO 42007
41612: LD_INT 29
41614: DOUBLE
41615: EQUAL
41616: IFTRUE 41620
41618: GO 41638
41620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41621: LD_ADDR_VAR 0 3
41625: PUSH
41626: LD_INT 13
41628: PUSH
41629: LD_INT 14
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: ST_TO_ADDR
41636: GO 42007
41638: LD_INT 31
41640: DOUBLE
41641: EQUAL
41642: IFTRUE 41646
41644: GO 41664
41646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41647: LD_ADDR_VAR 0 3
41651: PUSH
41652: LD_INT 13
41654: PUSH
41655: LD_INT 14
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: ST_TO_ADDR
41662: GO 42007
41664: LD_INT 26
41666: DOUBLE
41667: EQUAL
41668: IFTRUE 41672
41670: GO 41690
41672: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41673: LD_ADDR_VAR 0 3
41677: PUSH
41678: LD_INT 13
41680: PUSH
41681: LD_INT 14
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: ST_TO_ADDR
41688: GO 42007
41690: LD_INT 42
41692: DOUBLE
41693: EQUAL
41694: IFTRUE 41698
41696: GO 41724
41698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41699: LD_ADDR_VAR 0 3
41703: PUSH
41704: LD_INT 21
41706: PUSH
41707: LD_INT 22
41709: PUSH
41710: LD_INT 23
41712: PUSH
41713: LD_INT 24
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: ST_TO_ADDR
41722: GO 42007
41724: LD_INT 43
41726: DOUBLE
41727: EQUAL
41728: IFTRUE 41732
41730: GO 41758
41732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41733: LD_ADDR_VAR 0 3
41737: PUSH
41738: LD_INT 21
41740: PUSH
41741: LD_INT 22
41743: PUSH
41744: LD_INT 23
41746: PUSH
41747: LD_INT 24
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: ST_TO_ADDR
41756: GO 42007
41758: LD_INT 44
41760: DOUBLE
41761: EQUAL
41762: IFTRUE 41766
41764: GO 41792
41766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41767: LD_ADDR_VAR 0 3
41771: PUSH
41772: LD_INT 21
41774: PUSH
41775: LD_INT 22
41777: PUSH
41778: LD_INT 23
41780: PUSH
41781: LD_INT 24
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: ST_TO_ADDR
41790: GO 42007
41792: LD_INT 45
41794: DOUBLE
41795: EQUAL
41796: IFTRUE 41800
41798: GO 41826
41800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41801: LD_ADDR_VAR 0 3
41805: PUSH
41806: LD_INT 21
41808: PUSH
41809: LD_INT 22
41811: PUSH
41812: LD_INT 23
41814: PUSH
41815: LD_INT 24
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: ST_TO_ADDR
41824: GO 42007
41826: LD_INT 49
41828: DOUBLE
41829: EQUAL
41830: IFTRUE 41834
41832: GO 41860
41834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41835: LD_ADDR_VAR 0 3
41839: PUSH
41840: LD_INT 21
41842: PUSH
41843: LD_INT 22
41845: PUSH
41846: LD_INT 23
41848: PUSH
41849: LD_INT 24
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: ST_TO_ADDR
41858: GO 42007
41860: LD_INT 51
41862: DOUBLE
41863: EQUAL
41864: IFTRUE 41868
41866: GO 41894
41868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41869: LD_ADDR_VAR 0 3
41873: PUSH
41874: LD_INT 21
41876: PUSH
41877: LD_INT 22
41879: PUSH
41880: LD_INT 23
41882: PUSH
41883: LD_INT 24
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: ST_TO_ADDR
41892: GO 42007
41894: LD_INT 52
41896: DOUBLE
41897: EQUAL
41898: IFTRUE 41902
41900: GO 41928
41902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41903: LD_ADDR_VAR 0 3
41907: PUSH
41908: LD_INT 21
41910: PUSH
41911: LD_INT 22
41913: PUSH
41914: LD_INT 23
41916: PUSH
41917: LD_INT 24
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: ST_TO_ADDR
41926: GO 42007
41928: LD_INT 53
41930: DOUBLE
41931: EQUAL
41932: IFTRUE 41936
41934: GO 41954
41936: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41937: LD_ADDR_VAR 0 3
41941: PUSH
41942: LD_INT 23
41944: PUSH
41945: LD_INT 24
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: ST_TO_ADDR
41952: GO 42007
41954: LD_INT 46
41956: DOUBLE
41957: EQUAL
41958: IFTRUE 41962
41960: GO 41980
41962: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41963: LD_ADDR_VAR 0 3
41967: PUSH
41968: LD_INT 23
41970: PUSH
41971: LD_INT 24
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: ST_TO_ADDR
41978: GO 42007
41980: LD_INT 47
41982: DOUBLE
41983: EQUAL
41984: IFTRUE 41988
41986: GO 42006
41988: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41989: LD_ADDR_VAR 0 3
41993: PUSH
41994: LD_INT 23
41996: PUSH
41997: LD_INT 24
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: ST_TO_ADDR
42004: GO 42007
42006: POP
// result := ( chassis in result ) ;
42007: LD_ADDR_VAR 0 3
42011: PUSH
42012: LD_VAR 0 1
42016: PUSH
42017: LD_VAR 0 3
42021: IN
42022: ST_TO_ADDR
// end ;
42023: LD_VAR 0 3
42027: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42028: LD_INT 0
42030: PPUSH
42031: PPUSH
42032: PPUSH
42033: PPUSH
42034: PPUSH
42035: PPUSH
42036: PPUSH
// result := array ;
42037: LD_ADDR_VAR 0 5
42041: PUSH
42042: LD_VAR 0 1
42046: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42047: LD_VAR 0 1
42051: NOT
42052: PUSH
42053: LD_VAR 0 2
42057: NOT
42058: OR
42059: PUSH
42060: LD_VAR 0 3
42064: NOT
42065: OR
42066: PUSH
42067: LD_VAR 0 2
42071: PUSH
42072: LD_VAR 0 1
42076: GREATER
42077: OR
42078: PUSH
42079: LD_VAR 0 3
42083: PUSH
42084: LD_VAR 0 1
42088: GREATER
42089: OR
42090: IFFALSE 42094
// exit ;
42092: GO 42390
// if direction then
42094: LD_VAR 0 4
42098: IFFALSE 42162
// begin d := 1 ;
42100: LD_ADDR_VAR 0 9
42104: PUSH
42105: LD_INT 1
42107: ST_TO_ADDR
// if i_from > i_to then
42108: LD_VAR 0 2
42112: PUSH
42113: LD_VAR 0 3
42117: GREATER
42118: IFFALSE 42144
// length := ( array - i_from ) + i_to else
42120: LD_ADDR_VAR 0 11
42124: PUSH
42125: LD_VAR 0 1
42129: PUSH
42130: LD_VAR 0 2
42134: MINUS
42135: PUSH
42136: LD_VAR 0 3
42140: PLUS
42141: ST_TO_ADDR
42142: GO 42160
// length := i_to - i_from ;
42144: LD_ADDR_VAR 0 11
42148: PUSH
42149: LD_VAR 0 3
42153: PUSH
42154: LD_VAR 0 2
42158: MINUS
42159: ST_TO_ADDR
// end else
42160: GO 42223
// begin d := - 1 ;
42162: LD_ADDR_VAR 0 9
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: ST_TO_ADDR
// if i_from > i_to then
42171: LD_VAR 0 2
42175: PUSH
42176: LD_VAR 0 3
42180: GREATER
42181: IFFALSE 42201
// length := i_from - i_to else
42183: LD_ADDR_VAR 0 11
42187: PUSH
42188: LD_VAR 0 2
42192: PUSH
42193: LD_VAR 0 3
42197: MINUS
42198: ST_TO_ADDR
42199: GO 42223
// length := ( array - i_to ) + i_from ;
42201: LD_ADDR_VAR 0 11
42205: PUSH
42206: LD_VAR 0 1
42210: PUSH
42211: LD_VAR 0 3
42215: MINUS
42216: PUSH
42217: LD_VAR 0 2
42221: PLUS
42222: ST_TO_ADDR
// end ; if not length then
42223: LD_VAR 0 11
42227: NOT
42228: IFFALSE 42232
// exit ;
42230: GO 42390
// tmp := array ;
42232: LD_ADDR_VAR 0 10
42236: PUSH
42237: LD_VAR 0 1
42241: ST_TO_ADDR
// for i = 1 to length do
42242: LD_ADDR_VAR 0 6
42246: PUSH
42247: DOUBLE
42248: LD_INT 1
42250: DEC
42251: ST_TO_ADDR
42252: LD_VAR 0 11
42256: PUSH
42257: FOR_TO
42258: IFFALSE 42378
// begin for j = 1 to array do
42260: LD_ADDR_VAR 0 7
42264: PUSH
42265: DOUBLE
42266: LD_INT 1
42268: DEC
42269: ST_TO_ADDR
42270: LD_VAR 0 1
42274: PUSH
42275: FOR_TO
42276: IFFALSE 42364
// begin k := j + d ;
42278: LD_ADDR_VAR 0 8
42282: PUSH
42283: LD_VAR 0 7
42287: PUSH
42288: LD_VAR 0 9
42292: PLUS
42293: ST_TO_ADDR
// if k > array then
42294: LD_VAR 0 8
42298: PUSH
42299: LD_VAR 0 1
42303: GREATER
42304: IFFALSE 42314
// k := 1 ;
42306: LD_ADDR_VAR 0 8
42310: PUSH
42311: LD_INT 1
42313: ST_TO_ADDR
// if not k then
42314: LD_VAR 0 8
42318: NOT
42319: IFFALSE 42331
// k := array ;
42321: LD_ADDR_VAR 0 8
42325: PUSH
42326: LD_VAR 0 1
42330: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42331: LD_ADDR_VAR 0 10
42335: PUSH
42336: LD_VAR 0 10
42340: PPUSH
42341: LD_VAR 0 8
42345: PPUSH
42346: LD_VAR 0 1
42350: PUSH
42351: LD_VAR 0 7
42355: ARRAY
42356: PPUSH
42357: CALL_OW 1
42361: ST_TO_ADDR
// end ;
42362: GO 42275
42364: POP
42365: POP
// array := tmp ;
42366: LD_ADDR_VAR 0 1
42370: PUSH
42371: LD_VAR 0 10
42375: ST_TO_ADDR
// end ;
42376: GO 42257
42378: POP
42379: POP
// result := array ;
42380: LD_ADDR_VAR 0 5
42384: PUSH
42385: LD_VAR 0 1
42389: ST_TO_ADDR
// end ;
42390: LD_VAR 0 5
42394: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42395: LD_INT 0
42397: PPUSH
42398: PPUSH
// result := 0 ;
42399: LD_ADDR_VAR 0 3
42403: PUSH
42404: LD_INT 0
42406: ST_TO_ADDR
// if not array or not value in array then
42407: LD_VAR 0 1
42411: NOT
42412: PUSH
42413: LD_VAR 0 2
42417: PUSH
42418: LD_VAR 0 1
42422: IN
42423: NOT
42424: OR
42425: IFFALSE 42429
// exit ;
42427: GO 42483
// for i = 1 to array do
42429: LD_ADDR_VAR 0 4
42433: PUSH
42434: DOUBLE
42435: LD_INT 1
42437: DEC
42438: ST_TO_ADDR
42439: LD_VAR 0 1
42443: PUSH
42444: FOR_TO
42445: IFFALSE 42481
// if value = array [ i ] then
42447: LD_VAR 0 2
42451: PUSH
42452: LD_VAR 0 1
42456: PUSH
42457: LD_VAR 0 4
42461: ARRAY
42462: EQUAL
42463: IFFALSE 42479
// begin result := i ;
42465: LD_ADDR_VAR 0 3
42469: PUSH
42470: LD_VAR 0 4
42474: ST_TO_ADDR
// exit ;
42475: POP
42476: POP
42477: GO 42483
// end ;
42479: GO 42444
42481: POP
42482: POP
// end ;
42483: LD_VAR 0 3
42487: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42488: LD_INT 0
42490: PPUSH
// vc_chassis := chassis ;
42491: LD_ADDR_OWVAR 37
42495: PUSH
42496: LD_VAR 0 1
42500: ST_TO_ADDR
// vc_engine := engine ;
42501: LD_ADDR_OWVAR 39
42505: PUSH
42506: LD_VAR 0 2
42510: ST_TO_ADDR
// vc_control := control ;
42511: LD_ADDR_OWVAR 38
42515: PUSH
42516: LD_VAR 0 3
42520: ST_TO_ADDR
// vc_weapon := weapon ;
42521: LD_ADDR_OWVAR 40
42525: PUSH
42526: LD_VAR 0 4
42530: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42531: LD_ADDR_OWVAR 41
42535: PUSH
42536: LD_VAR 0 5
42540: ST_TO_ADDR
// end ;
42541: LD_VAR 0 6
42545: RET
// export function WantPlant ( unit ) ; var task ; begin
42546: LD_INT 0
42548: PPUSH
42549: PPUSH
// result := false ;
42550: LD_ADDR_VAR 0 2
42554: PUSH
42555: LD_INT 0
42557: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42558: LD_ADDR_VAR 0 3
42562: PUSH
42563: LD_VAR 0 1
42567: PPUSH
42568: CALL_OW 437
42572: ST_TO_ADDR
// if task then
42573: LD_VAR 0 3
42577: IFFALSE 42605
// if task [ 1 ] [ 1 ] = p then
42579: LD_VAR 0 3
42583: PUSH
42584: LD_INT 1
42586: ARRAY
42587: PUSH
42588: LD_INT 1
42590: ARRAY
42591: PUSH
42592: LD_STRING p
42594: EQUAL
42595: IFFALSE 42605
// result := true ;
42597: LD_ADDR_VAR 0 2
42601: PUSH
42602: LD_INT 1
42604: ST_TO_ADDR
// end ;
42605: LD_VAR 0 2
42609: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42610: LD_INT 0
42612: PPUSH
42613: PPUSH
42614: PPUSH
42615: PPUSH
// if pos < 1 then
42616: LD_VAR 0 2
42620: PUSH
42621: LD_INT 1
42623: LESS
42624: IFFALSE 42628
// exit ;
42626: GO 42931
// if pos = 1 then
42628: LD_VAR 0 2
42632: PUSH
42633: LD_INT 1
42635: EQUAL
42636: IFFALSE 42669
// result := Replace ( arr , pos [ 1 ] , value ) else
42638: LD_ADDR_VAR 0 4
42642: PUSH
42643: LD_VAR 0 1
42647: PPUSH
42648: LD_VAR 0 2
42652: PUSH
42653: LD_INT 1
42655: ARRAY
42656: PPUSH
42657: LD_VAR 0 3
42661: PPUSH
42662: CALL_OW 1
42666: ST_TO_ADDR
42667: GO 42931
// begin tmp := arr ;
42669: LD_ADDR_VAR 0 6
42673: PUSH
42674: LD_VAR 0 1
42678: ST_TO_ADDR
// s_arr := [ tmp ] ;
42679: LD_ADDR_VAR 0 7
42683: PUSH
42684: LD_VAR 0 6
42688: PUSH
42689: EMPTY
42690: LIST
42691: ST_TO_ADDR
// for i = 1 to pos - 1 do
42692: LD_ADDR_VAR 0 5
42696: PUSH
42697: DOUBLE
42698: LD_INT 1
42700: DEC
42701: ST_TO_ADDR
42702: LD_VAR 0 2
42706: PUSH
42707: LD_INT 1
42709: MINUS
42710: PUSH
42711: FOR_TO
42712: IFFALSE 42757
// begin tmp := tmp [ pos [ i ] ] ;
42714: LD_ADDR_VAR 0 6
42718: PUSH
42719: LD_VAR 0 6
42723: PUSH
42724: LD_VAR 0 2
42728: PUSH
42729: LD_VAR 0 5
42733: ARRAY
42734: ARRAY
42735: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42736: LD_ADDR_VAR 0 7
42740: PUSH
42741: LD_VAR 0 7
42745: PUSH
42746: LD_VAR 0 6
42750: PUSH
42751: EMPTY
42752: LIST
42753: ADD
42754: ST_TO_ADDR
// end ;
42755: GO 42711
42757: POP
42758: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42759: LD_ADDR_VAR 0 6
42763: PUSH
42764: LD_VAR 0 6
42768: PPUSH
42769: LD_VAR 0 2
42773: PUSH
42774: LD_VAR 0 2
42778: ARRAY
42779: PPUSH
42780: LD_VAR 0 3
42784: PPUSH
42785: CALL_OW 1
42789: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42790: LD_ADDR_VAR 0 7
42794: PUSH
42795: LD_VAR 0 7
42799: PPUSH
42800: LD_VAR 0 7
42804: PPUSH
42805: LD_VAR 0 6
42809: PPUSH
42810: CALL_OW 1
42814: ST_TO_ADDR
// for i = s_arr downto 2 do
42815: LD_ADDR_VAR 0 5
42819: PUSH
42820: DOUBLE
42821: LD_VAR 0 7
42825: INC
42826: ST_TO_ADDR
42827: LD_INT 2
42829: PUSH
42830: FOR_DOWNTO
42831: IFFALSE 42915
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42833: LD_ADDR_VAR 0 6
42837: PUSH
42838: LD_VAR 0 7
42842: PUSH
42843: LD_VAR 0 5
42847: PUSH
42848: LD_INT 1
42850: MINUS
42851: ARRAY
42852: PPUSH
42853: LD_VAR 0 2
42857: PUSH
42858: LD_VAR 0 5
42862: PUSH
42863: LD_INT 1
42865: MINUS
42866: ARRAY
42867: PPUSH
42868: LD_VAR 0 7
42872: PUSH
42873: LD_VAR 0 5
42877: ARRAY
42878: PPUSH
42879: CALL_OW 1
42883: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42884: LD_ADDR_VAR 0 7
42888: PUSH
42889: LD_VAR 0 7
42893: PPUSH
42894: LD_VAR 0 5
42898: PUSH
42899: LD_INT 1
42901: MINUS
42902: PPUSH
42903: LD_VAR 0 6
42907: PPUSH
42908: CALL_OW 1
42912: ST_TO_ADDR
// end ;
42913: GO 42830
42915: POP
42916: POP
// result := s_arr [ 1 ] ;
42917: LD_ADDR_VAR 0 4
42921: PUSH
42922: LD_VAR 0 7
42926: PUSH
42927: LD_INT 1
42929: ARRAY
42930: ST_TO_ADDR
// end ; end ;
42931: LD_VAR 0 4
42935: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42936: LD_INT 0
42938: PPUSH
42939: PPUSH
// if not list then
42940: LD_VAR 0 1
42944: NOT
42945: IFFALSE 42949
// exit ;
42947: GO 43040
// i := list [ pos1 ] ;
42949: LD_ADDR_VAR 0 5
42953: PUSH
42954: LD_VAR 0 1
42958: PUSH
42959: LD_VAR 0 2
42963: ARRAY
42964: ST_TO_ADDR
// if not i then
42965: LD_VAR 0 5
42969: NOT
42970: IFFALSE 42974
// exit ;
42972: GO 43040
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42974: LD_ADDR_VAR 0 1
42978: PUSH
42979: LD_VAR 0 1
42983: PPUSH
42984: LD_VAR 0 2
42988: PPUSH
42989: LD_VAR 0 1
42993: PUSH
42994: LD_VAR 0 3
42998: ARRAY
42999: PPUSH
43000: CALL_OW 1
43004: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43005: LD_ADDR_VAR 0 1
43009: PUSH
43010: LD_VAR 0 1
43014: PPUSH
43015: LD_VAR 0 3
43019: PPUSH
43020: LD_VAR 0 5
43024: PPUSH
43025: CALL_OW 1
43029: ST_TO_ADDR
// result := list ;
43030: LD_ADDR_VAR 0 4
43034: PUSH
43035: LD_VAR 0 1
43039: ST_TO_ADDR
// end ;
43040: LD_VAR 0 4
43044: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43045: LD_INT 0
43047: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43048: LD_ADDR_VAR 0 5
43052: PUSH
43053: LD_VAR 0 1
43057: PPUSH
43058: CALL_OW 250
43062: PPUSH
43063: LD_VAR 0 1
43067: PPUSH
43068: CALL_OW 251
43072: PPUSH
43073: LD_VAR 0 2
43077: PPUSH
43078: LD_VAR 0 3
43082: PPUSH
43083: LD_VAR 0 4
43087: PPUSH
43088: CALL 43466 0 5
43092: ST_TO_ADDR
// end ;
43093: LD_VAR 0 5
43097: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
43098: LD_INT 0
43100: PPUSH
43101: PPUSH
43102: PPUSH
43103: PPUSH
// if not list or not unit then
43104: LD_VAR 0 2
43108: NOT
43109: PUSH
43110: LD_VAR 0 1
43114: NOT
43115: OR
43116: IFFALSE 43120
// exit ;
43118: GO 43461
// result := [ ] ;
43120: LD_ADDR_VAR 0 5
43124: PUSH
43125: EMPTY
43126: ST_TO_ADDR
// for i in list do
43127: LD_ADDR_VAR 0 6
43131: PUSH
43132: LD_VAR 0 2
43136: PUSH
43137: FOR_IN
43138: IFFALSE 43356
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43140: LD_ADDR_VAR 0 8
43144: PUSH
43145: LD_VAR 0 1
43149: PPUSH
43150: LD_VAR 0 6
43154: PUSH
43155: LD_INT 1
43157: ARRAY
43158: PPUSH
43159: LD_VAR 0 6
43163: PUSH
43164: LD_INT 2
43166: ARRAY
43167: PPUSH
43168: CALL_OW 297
43172: ST_TO_ADDR
// if not Count ( result ) then
43173: LD_VAR 0 5
43177: PPUSH
43178: CALL 39750 0 1
43182: NOT
43183: IFFALSE 43216
// begin result := Join ( result , [ i , tmp ] ) ;
43185: LD_ADDR_VAR 0 5
43189: PUSH
43190: LD_VAR 0 5
43194: PPUSH
43195: LD_VAR 0 6
43199: PUSH
43200: LD_VAR 0 8
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PPUSH
43209: CALL 75339 0 2
43213: ST_TO_ADDR
// continue ;
43214: GO 43137
// end ; if result [ result ] [ 2 ] <= tmp then
43216: LD_VAR 0 5
43220: PUSH
43221: LD_VAR 0 5
43225: ARRAY
43226: PUSH
43227: LD_INT 2
43229: ARRAY
43230: PUSH
43231: LD_VAR 0 8
43235: LESSEQUAL
43236: IFFALSE 43269
// result := Join ( result , [ i , tmp ] ) else
43238: LD_ADDR_VAR 0 5
43242: PUSH
43243: LD_VAR 0 5
43247: PPUSH
43248: LD_VAR 0 6
43252: PUSH
43253: LD_VAR 0 8
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PPUSH
43262: CALL 75339 0 2
43266: ST_TO_ADDR
43267: GO 43354
// begin for j := 1 to Count ( result ) do
43269: LD_ADDR_VAR 0 7
43273: PUSH
43274: DOUBLE
43275: LD_INT 1
43277: DEC
43278: ST_TO_ADDR
43279: LD_VAR 0 5
43283: PPUSH
43284: CALL 39750 0 1
43288: PUSH
43289: FOR_TO
43290: IFFALSE 43352
// begin if tmp < result [ j ] [ 2 ] then
43292: LD_VAR 0 8
43296: PUSH
43297: LD_VAR 0 5
43301: PUSH
43302: LD_VAR 0 7
43306: ARRAY
43307: PUSH
43308: LD_INT 2
43310: ARRAY
43311: LESS
43312: IFFALSE 43350
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43314: LD_ADDR_VAR 0 5
43318: PUSH
43319: LD_VAR 0 5
43323: PPUSH
43324: LD_VAR 0 7
43328: PPUSH
43329: LD_VAR 0 6
43333: PUSH
43334: LD_VAR 0 8
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PPUSH
43343: CALL_OW 2
43347: ST_TO_ADDR
// break ;
43348: GO 43352
// end ; end ;
43350: GO 43289
43352: POP
43353: POP
// end ; end ;
43354: GO 43137
43356: POP
43357: POP
// if result and not asc then
43358: LD_VAR 0 5
43362: PUSH
43363: LD_VAR 0 3
43367: NOT
43368: AND
43369: IFFALSE 43386
// result := ReverseArray ( result ) ;
43371: LD_ADDR_VAR 0 5
43375: PUSH
43376: LD_VAR 0 5
43380: PPUSH
43381: CALL 70626 0 1
43385: ST_TO_ADDR
// tmp := [ ] ;
43386: LD_ADDR_VAR 0 8
43390: PUSH
43391: EMPTY
43392: ST_TO_ADDR
// if mode then
43393: LD_VAR 0 4
43397: IFFALSE 43461
// begin for i := 1 to result do
43399: LD_ADDR_VAR 0 6
43403: PUSH
43404: DOUBLE
43405: LD_INT 1
43407: DEC
43408: ST_TO_ADDR
43409: LD_VAR 0 5
43413: PUSH
43414: FOR_TO
43415: IFFALSE 43449
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
43417: LD_ADDR_VAR 0 8
43421: PUSH
43422: LD_VAR 0 8
43426: PPUSH
43427: LD_VAR 0 5
43431: PUSH
43432: LD_VAR 0 6
43436: ARRAY
43437: PUSH
43438: LD_INT 1
43440: ARRAY
43441: PPUSH
43442: CALL 75339 0 2
43446: ST_TO_ADDR
43447: GO 43414
43449: POP
43450: POP
// result := tmp ;
43451: LD_ADDR_VAR 0 5
43455: PUSH
43456: LD_VAR 0 8
43460: ST_TO_ADDR
// end ; end ;
43461: LD_VAR 0 5
43465: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43466: LD_INT 0
43468: PPUSH
43469: PPUSH
43470: PPUSH
43471: PPUSH
// if not list then
43472: LD_VAR 0 3
43476: NOT
43477: IFFALSE 43481
// exit ;
43479: GO 43869
// result := [ ] ;
43481: LD_ADDR_VAR 0 6
43485: PUSH
43486: EMPTY
43487: ST_TO_ADDR
// for i in list do
43488: LD_ADDR_VAR 0 7
43492: PUSH
43493: LD_VAR 0 3
43497: PUSH
43498: FOR_IN
43499: IFFALSE 43701
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43501: LD_ADDR_VAR 0 9
43505: PUSH
43506: LD_VAR 0 7
43510: PPUSH
43511: LD_VAR 0 1
43515: PPUSH
43516: LD_VAR 0 2
43520: PPUSH
43521: CALL_OW 297
43525: ST_TO_ADDR
// if not result then
43526: LD_VAR 0 6
43530: NOT
43531: IFFALSE 43557
// result := [ [ i , tmp ] ] else
43533: LD_ADDR_VAR 0 6
43537: PUSH
43538: LD_VAR 0 7
43542: PUSH
43543: LD_VAR 0 9
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: EMPTY
43553: LIST
43554: ST_TO_ADDR
43555: GO 43699
// begin if result [ result ] [ 2 ] < tmp then
43557: LD_VAR 0 6
43561: PUSH
43562: LD_VAR 0 6
43566: ARRAY
43567: PUSH
43568: LD_INT 2
43570: ARRAY
43571: PUSH
43572: LD_VAR 0 9
43576: LESS
43577: IFFALSE 43619
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43579: LD_ADDR_VAR 0 6
43583: PUSH
43584: LD_VAR 0 6
43588: PPUSH
43589: LD_VAR 0 6
43593: PUSH
43594: LD_INT 1
43596: PLUS
43597: PPUSH
43598: LD_VAR 0 7
43602: PUSH
43603: LD_VAR 0 9
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PPUSH
43612: CALL_OW 2
43616: ST_TO_ADDR
43617: GO 43699
// for j = 1 to result do
43619: LD_ADDR_VAR 0 8
43623: PUSH
43624: DOUBLE
43625: LD_INT 1
43627: DEC
43628: ST_TO_ADDR
43629: LD_VAR 0 6
43633: PUSH
43634: FOR_TO
43635: IFFALSE 43697
// begin if tmp < result [ j ] [ 2 ] then
43637: LD_VAR 0 9
43641: PUSH
43642: LD_VAR 0 6
43646: PUSH
43647: LD_VAR 0 8
43651: ARRAY
43652: PUSH
43653: LD_INT 2
43655: ARRAY
43656: LESS
43657: IFFALSE 43695
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43659: LD_ADDR_VAR 0 6
43663: PUSH
43664: LD_VAR 0 6
43668: PPUSH
43669: LD_VAR 0 8
43673: PPUSH
43674: LD_VAR 0 7
43678: PUSH
43679: LD_VAR 0 9
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PPUSH
43688: CALL_OW 2
43692: ST_TO_ADDR
// break ;
43693: GO 43697
// end ; end ;
43695: GO 43634
43697: POP
43698: POP
// end ; end ;
43699: GO 43498
43701: POP
43702: POP
// if result and not asc then
43703: LD_VAR 0 6
43707: PUSH
43708: LD_VAR 0 4
43712: NOT
43713: AND
43714: IFFALSE 43789
// begin tmp := result ;
43716: LD_ADDR_VAR 0 9
43720: PUSH
43721: LD_VAR 0 6
43725: ST_TO_ADDR
// for i = tmp downto 1 do
43726: LD_ADDR_VAR 0 7
43730: PUSH
43731: DOUBLE
43732: LD_VAR 0 9
43736: INC
43737: ST_TO_ADDR
43738: LD_INT 1
43740: PUSH
43741: FOR_DOWNTO
43742: IFFALSE 43787
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43744: LD_ADDR_VAR 0 6
43748: PUSH
43749: LD_VAR 0 6
43753: PPUSH
43754: LD_VAR 0 9
43758: PUSH
43759: LD_VAR 0 7
43763: MINUS
43764: PUSH
43765: LD_INT 1
43767: PLUS
43768: PPUSH
43769: LD_VAR 0 9
43773: PUSH
43774: LD_VAR 0 7
43778: ARRAY
43779: PPUSH
43780: CALL_OW 1
43784: ST_TO_ADDR
43785: GO 43741
43787: POP
43788: POP
// end ; tmp := [ ] ;
43789: LD_ADDR_VAR 0 9
43793: PUSH
43794: EMPTY
43795: ST_TO_ADDR
// if mode then
43796: LD_VAR 0 5
43800: IFFALSE 43869
// begin for i = 1 to result do
43802: LD_ADDR_VAR 0 7
43806: PUSH
43807: DOUBLE
43808: LD_INT 1
43810: DEC
43811: ST_TO_ADDR
43812: LD_VAR 0 6
43816: PUSH
43817: FOR_TO
43818: IFFALSE 43857
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43820: LD_ADDR_VAR 0 9
43824: PUSH
43825: LD_VAR 0 9
43829: PPUSH
43830: LD_VAR 0 7
43834: PPUSH
43835: LD_VAR 0 6
43839: PUSH
43840: LD_VAR 0 7
43844: ARRAY
43845: PUSH
43846: LD_INT 1
43848: ARRAY
43849: PPUSH
43850: CALL_OW 1
43854: ST_TO_ADDR
43855: GO 43817
43857: POP
43858: POP
// result := tmp ;
43859: LD_ADDR_VAR 0 6
43863: PUSH
43864: LD_VAR 0 9
43868: ST_TO_ADDR
// end ; end ;
43869: LD_VAR 0 6
43873: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43874: LD_INT 0
43876: PPUSH
43877: PPUSH
43878: PPUSH
43879: PPUSH
43880: PPUSH
43881: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43882: LD_ADDR_VAR 0 5
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: ST_TO_ADDR
// if not x or not y then
43904: LD_VAR 0 2
43908: NOT
43909: PUSH
43910: LD_VAR 0 3
43914: NOT
43915: OR
43916: IFFALSE 43920
// exit ;
43918: GO 45570
// if not range then
43920: LD_VAR 0 4
43924: NOT
43925: IFFALSE 43935
// range := 10 ;
43927: LD_ADDR_VAR 0 4
43931: PUSH
43932: LD_INT 10
43934: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43935: LD_ADDR_VAR 0 8
43939: PUSH
43940: LD_INT 81
43942: PUSH
43943: LD_VAR 0 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 92
43954: PUSH
43955: LD_VAR 0 2
43959: PUSH
43960: LD_VAR 0 3
43964: PUSH
43965: LD_VAR 0 4
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 3
43978: PUSH
43979: LD_INT 21
43981: PUSH
43982: LD_INT 3
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: LIST
43997: PPUSH
43998: CALL_OW 69
44002: ST_TO_ADDR
// if not tmp then
44003: LD_VAR 0 8
44007: NOT
44008: IFFALSE 44012
// exit ;
44010: GO 45570
// for i in tmp do
44012: LD_ADDR_VAR 0 6
44016: PUSH
44017: LD_VAR 0 8
44021: PUSH
44022: FOR_IN
44023: IFFALSE 45545
// begin points := [ 0 , 0 , 0 ] ;
44025: LD_ADDR_VAR 0 9
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
// bpoints := 1 ;
44044: LD_ADDR_VAR 0 10
44048: PUSH
44049: LD_INT 1
44051: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44052: LD_VAR 0 6
44056: PPUSH
44057: CALL_OW 247
44061: PUSH
44062: LD_INT 1
44064: DOUBLE
44065: EQUAL
44066: IFTRUE 44070
44068: GO 44648
44070: POP
// begin if GetClass ( i ) = 1 then
44071: LD_VAR 0 6
44075: PPUSH
44076: CALL_OW 257
44080: PUSH
44081: LD_INT 1
44083: EQUAL
44084: IFFALSE 44105
// points := [ 10 , 5 , 3 ] ;
44086: LD_ADDR_VAR 0 9
44090: PUSH
44091: LD_INT 10
44093: PUSH
44094: LD_INT 5
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44105: LD_VAR 0 6
44109: PPUSH
44110: CALL_OW 257
44114: PUSH
44115: LD_INT 2
44117: PUSH
44118: LD_INT 3
44120: PUSH
44121: LD_INT 4
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: IN
44129: IFFALSE 44150
// points := [ 3 , 2 , 1 ] ;
44131: LD_ADDR_VAR 0 9
44135: PUSH
44136: LD_INT 3
44138: PUSH
44139: LD_INT 2
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: LIST
44149: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44150: LD_VAR 0 6
44154: PPUSH
44155: CALL_OW 257
44159: PUSH
44160: LD_INT 5
44162: EQUAL
44163: IFFALSE 44184
// points := [ 130 , 5 , 2 ] ;
44165: LD_ADDR_VAR 0 9
44169: PUSH
44170: LD_INT 130
44172: PUSH
44173: LD_INT 5
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44184: LD_VAR 0 6
44188: PPUSH
44189: CALL_OW 257
44193: PUSH
44194: LD_INT 8
44196: EQUAL
44197: IFFALSE 44218
// points := [ 35 , 35 , 30 ] ;
44199: LD_ADDR_VAR 0 9
44203: PUSH
44204: LD_INT 35
44206: PUSH
44207: LD_INT 35
44209: PUSH
44210: LD_INT 30
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44218: LD_VAR 0 6
44222: PPUSH
44223: CALL_OW 257
44227: PUSH
44228: LD_INT 9
44230: EQUAL
44231: IFFALSE 44252
// points := [ 20 , 55 , 40 ] ;
44233: LD_ADDR_VAR 0 9
44237: PUSH
44238: LD_INT 20
44240: PUSH
44241: LD_INT 55
44243: PUSH
44244: LD_INT 40
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: LIST
44251: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44252: LD_VAR 0 6
44256: PPUSH
44257: CALL_OW 257
44261: PUSH
44262: LD_INT 12
44264: PUSH
44265: LD_INT 16
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: IN
44272: IFFALSE 44293
// points := [ 5 , 3 , 2 ] ;
44274: LD_ADDR_VAR 0 9
44278: PUSH
44279: LD_INT 5
44281: PUSH
44282: LD_INT 3
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: LIST
44292: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44293: LD_VAR 0 6
44297: PPUSH
44298: CALL_OW 257
44302: PUSH
44303: LD_INT 17
44305: EQUAL
44306: IFFALSE 44327
// points := [ 100 , 50 , 75 ] ;
44308: LD_ADDR_VAR 0 9
44312: PUSH
44313: LD_INT 100
44315: PUSH
44316: LD_INT 50
44318: PUSH
44319: LD_INT 75
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44327: LD_VAR 0 6
44331: PPUSH
44332: CALL_OW 257
44336: PUSH
44337: LD_INT 15
44339: EQUAL
44340: IFFALSE 44361
// points := [ 10 , 5 , 3 ] ;
44342: LD_ADDR_VAR 0 9
44346: PUSH
44347: LD_INT 10
44349: PUSH
44350: LD_INT 5
44352: PUSH
44353: LD_INT 3
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: LIST
44360: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44361: LD_VAR 0 6
44365: PPUSH
44366: CALL_OW 257
44370: PUSH
44371: LD_INT 14
44373: EQUAL
44374: IFFALSE 44395
// points := [ 10 , 0 , 0 ] ;
44376: LD_ADDR_VAR 0 9
44380: PUSH
44381: LD_INT 10
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: LIST
44394: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44395: LD_VAR 0 6
44399: PPUSH
44400: CALL_OW 257
44404: PUSH
44405: LD_INT 11
44407: EQUAL
44408: IFFALSE 44429
// points := [ 30 , 10 , 5 ] ;
44410: LD_ADDR_VAR 0 9
44414: PUSH
44415: LD_INT 30
44417: PUSH
44418: LD_INT 10
44420: PUSH
44421: LD_INT 5
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: LIST
44428: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44429: LD_VAR 0 1
44433: PPUSH
44434: LD_INT 5
44436: PPUSH
44437: CALL_OW 321
44441: PUSH
44442: LD_INT 2
44444: EQUAL
44445: IFFALSE 44462
// bpoints := bpoints * 1.8 ;
44447: LD_ADDR_VAR 0 10
44451: PUSH
44452: LD_VAR 0 10
44456: PUSH
44457: LD_REAL  1.80000000000000E+0000
44460: MUL
44461: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44462: LD_VAR 0 6
44466: PPUSH
44467: CALL_OW 257
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: LD_INT 3
44480: PUSH
44481: LD_INT 4
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: IN
44490: PUSH
44491: LD_VAR 0 1
44495: PPUSH
44496: LD_INT 51
44498: PPUSH
44499: CALL_OW 321
44503: PUSH
44504: LD_INT 2
44506: EQUAL
44507: AND
44508: IFFALSE 44525
// bpoints := bpoints * 1.2 ;
44510: LD_ADDR_VAR 0 10
44514: PUSH
44515: LD_VAR 0 10
44519: PUSH
44520: LD_REAL  1.20000000000000E+0000
44523: MUL
44524: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44525: LD_VAR 0 6
44529: PPUSH
44530: CALL_OW 257
44534: PUSH
44535: LD_INT 5
44537: PUSH
44538: LD_INT 7
44540: PUSH
44541: LD_INT 9
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: LIST
44548: IN
44549: PUSH
44550: LD_VAR 0 1
44554: PPUSH
44555: LD_INT 52
44557: PPUSH
44558: CALL_OW 321
44562: PUSH
44563: LD_INT 2
44565: EQUAL
44566: AND
44567: IFFALSE 44584
// bpoints := bpoints * 1.5 ;
44569: LD_ADDR_VAR 0 10
44573: PUSH
44574: LD_VAR 0 10
44578: PUSH
44579: LD_REAL  1.50000000000000E+0000
44582: MUL
44583: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44584: LD_VAR 0 1
44588: PPUSH
44589: LD_INT 66
44591: PPUSH
44592: CALL_OW 321
44596: PUSH
44597: LD_INT 2
44599: EQUAL
44600: IFFALSE 44617
// bpoints := bpoints * 1.1 ;
44602: LD_ADDR_VAR 0 10
44606: PUSH
44607: LD_VAR 0 10
44611: PUSH
44612: LD_REAL  1.10000000000000E+0000
44615: MUL
44616: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44617: LD_ADDR_VAR 0 10
44621: PUSH
44622: LD_VAR 0 10
44626: PUSH
44627: LD_VAR 0 6
44631: PPUSH
44632: LD_INT 1
44634: PPUSH
44635: CALL_OW 259
44639: PUSH
44640: LD_REAL  1.15000000000000E+0000
44643: MUL
44644: MUL
44645: ST_TO_ADDR
// end ; unit_vehicle :
44646: GO 45474
44648: LD_INT 2
44650: DOUBLE
44651: EQUAL
44652: IFTRUE 44656
44654: GO 45462
44656: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44657: LD_VAR 0 6
44661: PPUSH
44662: CALL_OW 264
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: LD_INT 42
44672: PUSH
44673: LD_INT 24
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: IN
44681: IFFALSE 44702
// points := [ 25 , 5 , 3 ] ;
44683: LD_ADDR_VAR 0 9
44687: PUSH
44688: LD_INT 25
44690: PUSH
44691: LD_INT 5
44693: PUSH
44694: LD_INT 3
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: LIST
44701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44702: LD_VAR 0 6
44706: PPUSH
44707: CALL_OW 264
44711: PUSH
44712: LD_INT 4
44714: PUSH
44715: LD_INT 43
44717: PUSH
44718: LD_INT 25
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: LIST
44725: IN
44726: IFFALSE 44747
// points := [ 40 , 15 , 5 ] ;
44728: LD_ADDR_VAR 0 9
44732: PUSH
44733: LD_INT 40
44735: PUSH
44736: LD_INT 15
44738: PUSH
44739: LD_INT 5
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44747: LD_VAR 0 6
44751: PPUSH
44752: CALL_OW 264
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: LD_INT 23
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: IN
44767: IFFALSE 44788
// points := [ 7 , 25 , 8 ] ;
44769: LD_ADDR_VAR 0 9
44773: PUSH
44774: LD_INT 7
44776: PUSH
44777: LD_INT 25
44779: PUSH
44780: LD_INT 8
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44788: LD_VAR 0 6
44792: PPUSH
44793: CALL_OW 264
44797: PUSH
44798: LD_INT 5
44800: PUSH
44801: LD_INT 27
44803: PUSH
44804: LD_INT 44
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: LIST
44811: IN
44812: IFFALSE 44833
// points := [ 14 , 50 , 16 ] ;
44814: LD_ADDR_VAR 0 9
44818: PUSH
44819: LD_INT 14
44821: PUSH
44822: LD_INT 50
44824: PUSH
44825: LD_INT 16
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: LIST
44832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44833: LD_VAR 0 6
44837: PPUSH
44838: CALL_OW 264
44842: PUSH
44843: LD_INT 6
44845: PUSH
44846: LD_INT 46
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: IN
44853: IFFALSE 44874
// points := [ 32 , 120 , 70 ] ;
44855: LD_ADDR_VAR 0 9
44859: PUSH
44860: LD_INT 32
44862: PUSH
44863: LD_INT 120
44865: PUSH
44866: LD_INT 70
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: LIST
44873: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44874: LD_VAR 0 6
44878: PPUSH
44879: CALL_OW 264
44883: PUSH
44884: LD_INT 7
44886: PUSH
44887: LD_INT 28
44889: PUSH
44890: LD_INT 45
44892: PUSH
44893: LD_INT 92
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: IN
44902: IFFALSE 44923
// points := [ 35 , 20 , 45 ] ;
44904: LD_ADDR_VAR 0 9
44908: PUSH
44909: LD_INT 35
44911: PUSH
44912: LD_INT 20
44914: PUSH
44915: LD_INT 45
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: LIST
44922: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44923: LD_VAR 0 6
44927: PPUSH
44928: CALL_OW 264
44932: PUSH
44933: LD_INT 47
44935: PUSH
44936: EMPTY
44937: LIST
44938: IN
44939: IFFALSE 44960
// points := [ 67 , 45 , 75 ] ;
44941: LD_ADDR_VAR 0 9
44945: PUSH
44946: LD_INT 67
44948: PUSH
44949: LD_INT 45
44951: PUSH
44952: LD_INT 75
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44960: LD_VAR 0 6
44964: PPUSH
44965: CALL_OW 264
44969: PUSH
44970: LD_INT 26
44972: PUSH
44973: EMPTY
44974: LIST
44975: IN
44976: IFFALSE 44997
// points := [ 120 , 30 , 80 ] ;
44978: LD_ADDR_VAR 0 9
44982: PUSH
44983: LD_INT 120
44985: PUSH
44986: LD_INT 30
44988: PUSH
44989: LD_INT 80
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: LIST
44996: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44997: LD_VAR 0 6
45001: PPUSH
45002: CALL_OW 264
45006: PUSH
45007: LD_INT 22
45009: PUSH
45010: EMPTY
45011: LIST
45012: IN
45013: IFFALSE 45034
// points := [ 40 , 1 , 1 ] ;
45015: LD_ADDR_VAR 0 9
45019: PUSH
45020: LD_INT 40
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: LIST
45033: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45034: LD_VAR 0 6
45038: PPUSH
45039: CALL_OW 264
45043: PUSH
45044: LD_INT 29
45046: PUSH
45047: EMPTY
45048: LIST
45049: IN
45050: IFFALSE 45071
// points := [ 70 , 200 , 400 ] ;
45052: LD_ADDR_VAR 0 9
45056: PUSH
45057: LD_INT 70
45059: PUSH
45060: LD_INT 200
45062: PUSH
45063: LD_INT 400
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45071: LD_VAR 0 6
45075: PPUSH
45076: CALL_OW 264
45080: PUSH
45081: LD_INT 14
45083: PUSH
45084: LD_INT 53
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: IN
45091: IFFALSE 45112
// points := [ 40 , 10 , 20 ] ;
45093: LD_ADDR_VAR 0 9
45097: PUSH
45098: LD_INT 40
45100: PUSH
45101: LD_INT 10
45103: PUSH
45104: LD_INT 20
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45112: LD_VAR 0 6
45116: PPUSH
45117: CALL_OW 264
45121: PUSH
45122: LD_INT 9
45124: PUSH
45125: EMPTY
45126: LIST
45127: IN
45128: IFFALSE 45149
// points := [ 5 , 70 , 20 ] ;
45130: LD_ADDR_VAR 0 9
45134: PUSH
45135: LD_INT 5
45137: PUSH
45138: LD_INT 70
45140: PUSH
45141: LD_INT 20
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45149: LD_VAR 0 6
45153: PPUSH
45154: CALL_OW 264
45158: PUSH
45159: LD_INT 10
45161: PUSH
45162: EMPTY
45163: LIST
45164: IN
45165: IFFALSE 45186
// points := [ 35 , 110 , 70 ] ;
45167: LD_ADDR_VAR 0 9
45171: PUSH
45172: LD_INT 35
45174: PUSH
45175: LD_INT 110
45177: PUSH
45178: LD_INT 70
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: LIST
45185: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45186: LD_VAR 0 6
45190: PPUSH
45191: CALL_OW 265
45195: PUSH
45196: LD_INT 25
45198: EQUAL
45199: IFFALSE 45220
// points := [ 80 , 65 , 100 ] ;
45201: LD_ADDR_VAR 0 9
45205: PUSH
45206: LD_INT 80
45208: PUSH
45209: LD_INT 65
45211: PUSH
45212: LD_INT 100
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45220: LD_VAR 0 6
45224: PPUSH
45225: CALL_OW 263
45229: PUSH
45230: LD_INT 1
45232: EQUAL
45233: IFFALSE 45268
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45235: LD_ADDR_VAR 0 10
45239: PUSH
45240: LD_VAR 0 10
45244: PUSH
45245: LD_VAR 0 6
45249: PPUSH
45250: CALL_OW 311
45254: PPUSH
45255: LD_INT 3
45257: PPUSH
45258: CALL_OW 259
45262: PUSH
45263: LD_INT 4
45265: MUL
45266: MUL
45267: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45268: LD_VAR 0 6
45272: PPUSH
45273: CALL_OW 263
45277: PUSH
45278: LD_INT 2
45280: EQUAL
45281: IFFALSE 45332
// begin j := IsControledBy ( i ) ;
45283: LD_ADDR_VAR 0 7
45287: PUSH
45288: LD_VAR 0 6
45292: PPUSH
45293: CALL_OW 312
45297: ST_TO_ADDR
// if j then
45298: LD_VAR 0 7
45302: IFFALSE 45332
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45304: LD_ADDR_VAR 0 10
45308: PUSH
45309: LD_VAR 0 10
45313: PUSH
45314: LD_VAR 0 7
45318: PPUSH
45319: LD_INT 3
45321: PPUSH
45322: CALL_OW 259
45326: PUSH
45327: LD_INT 3
45329: MUL
45330: MUL
45331: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45332: LD_VAR 0 6
45336: PPUSH
45337: CALL_OW 264
45341: PUSH
45342: LD_INT 5
45344: PUSH
45345: LD_INT 6
45347: PUSH
45348: LD_INT 46
45350: PUSH
45351: LD_INT 44
45353: PUSH
45354: LD_INT 47
45356: PUSH
45357: LD_INT 45
45359: PUSH
45360: LD_INT 28
45362: PUSH
45363: LD_INT 7
45365: PUSH
45366: LD_INT 27
45368: PUSH
45369: LD_INT 29
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: IN
45384: PUSH
45385: LD_VAR 0 1
45389: PPUSH
45390: LD_INT 52
45392: PPUSH
45393: CALL_OW 321
45397: PUSH
45398: LD_INT 2
45400: EQUAL
45401: AND
45402: IFFALSE 45419
// bpoints := bpoints * 1.2 ;
45404: LD_ADDR_VAR 0 10
45408: PUSH
45409: LD_VAR 0 10
45413: PUSH
45414: LD_REAL  1.20000000000000E+0000
45417: MUL
45418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45419: LD_VAR 0 6
45423: PPUSH
45424: CALL_OW 264
45428: PUSH
45429: LD_INT 6
45431: PUSH
45432: LD_INT 46
45434: PUSH
45435: LD_INT 47
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: IN
45443: IFFALSE 45460
// bpoints := bpoints * 1.2 ;
45445: LD_ADDR_VAR 0 10
45449: PUSH
45450: LD_VAR 0 10
45454: PUSH
45455: LD_REAL  1.20000000000000E+0000
45458: MUL
45459: ST_TO_ADDR
// end ; unit_building :
45460: GO 45474
45462: LD_INT 3
45464: DOUBLE
45465: EQUAL
45466: IFTRUE 45470
45468: GO 45473
45470: POP
// ; end ;
45471: GO 45474
45473: POP
// for j = 1 to 3 do
45474: LD_ADDR_VAR 0 7
45478: PUSH
45479: DOUBLE
45480: LD_INT 1
45482: DEC
45483: ST_TO_ADDR
45484: LD_INT 3
45486: PUSH
45487: FOR_TO
45488: IFFALSE 45541
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45490: LD_ADDR_VAR 0 5
45494: PUSH
45495: LD_VAR 0 5
45499: PPUSH
45500: LD_VAR 0 7
45504: PPUSH
45505: LD_VAR 0 5
45509: PUSH
45510: LD_VAR 0 7
45514: ARRAY
45515: PUSH
45516: LD_VAR 0 9
45520: PUSH
45521: LD_VAR 0 7
45525: ARRAY
45526: PUSH
45527: LD_VAR 0 10
45531: MUL
45532: PLUS
45533: PPUSH
45534: CALL_OW 1
45538: ST_TO_ADDR
45539: GO 45487
45541: POP
45542: POP
// end ;
45543: GO 44022
45545: POP
45546: POP
// result := Replace ( result , 4 , tmp ) ;
45547: LD_ADDR_VAR 0 5
45551: PUSH
45552: LD_VAR 0 5
45556: PPUSH
45557: LD_INT 4
45559: PPUSH
45560: LD_VAR 0 8
45564: PPUSH
45565: CALL_OW 1
45569: ST_TO_ADDR
// end ;
45570: LD_VAR 0 5
45574: RET
// export function DangerAtRange ( unit , range ) ; begin
45575: LD_INT 0
45577: PPUSH
// if not unit then
45578: LD_VAR 0 1
45582: NOT
45583: IFFALSE 45587
// exit ;
45585: GO 45632
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45587: LD_ADDR_VAR 0 3
45591: PUSH
45592: LD_VAR 0 1
45596: PPUSH
45597: CALL_OW 255
45601: PPUSH
45602: LD_VAR 0 1
45606: PPUSH
45607: CALL_OW 250
45611: PPUSH
45612: LD_VAR 0 1
45616: PPUSH
45617: CALL_OW 251
45621: PPUSH
45622: LD_VAR 0 2
45626: PPUSH
45627: CALL 43874 0 4
45631: ST_TO_ADDR
// end ;
45632: LD_VAR 0 3
45636: RET
// export function DangerInArea ( side , area ) ; begin
45637: LD_INT 0
45639: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45640: LD_ADDR_VAR 0 3
45644: PUSH
45645: LD_VAR 0 2
45649: PPUSH
45650: LD_INT 81
45652: PUSH
45653: LD_VAR 0 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PPUSH
45662: CALL_OW 70
45666: ST_TO_ADDR
// end ;
45667: LD_VAR 0 3
45671: RET
// export function IsExtension ( b ) ; begin
45672: LD_INT 0
45674: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45675: LD_ADDR_VAR 0 2
45679: PUSH
45680: LD_VAR 0 1
45684: PUSH
45685: LD_INT 23
45687: PUSH
45688: LD_INT 20
45690: PUSH
45691: LD_INT 22
45693: PUSH
45694: LD_INT 17
45696: PUSH
45697: LD_INT 24
45699: PUSH
45700: LD_INT 21
45702: PUSH
45703: LD_INT 19
45705: PUSH
45706: LD_INT 16
45708: PUSH
45709: LD_INT 25
45711: PUSH
45712: LD_INT 18
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: IN
45727: ST_TO_ADDR
// end ;
45728: LD_VAR 0 2
45732: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45733: LD_INT 0
45735: PPUSH
45736: PPUSH
45737: PPUSH
// result := [ ] ;
45738: LD_ADDR_VAR 0 4
45742: PUSH
45743: EMPTY
45744: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45745: LD_ADDR_VAR 0 5
45749: PUSH
45750: LD_VAR 0 2
45754: PPUSH
45755: LD_INT 21
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PPUSH
45765: CALL_OW 70
45769: ST_TO_ADDR
// if not tmp then
45770: LD_VAR 0 5
45774: NOT
45775: IFFALSE 45779
// exit ;
45777: GO 45843
// if checkLink then
45779: LD_VAR 0 3
45783: IFFALSE 45833
// begin for i in tmp do
45785: LD_ADDR_VAR 0 6
45789: PUSH
45790: LD_VAR 0 5
45794: PUSH
45795: FOR_IN
45796: IFFALSE 45831
// if GetBase ( i ) <> base then
45798: LD_VAR 0 6
45802: PPUSH
45803: CALL_OW 274
45807: PUSH
45808: LD_VAR 0 1
45812: NONEQUAL
45813: IFFALSE 45829
// ComLinkToBase ( base , i ) ;
45815: LD_VAR 0 1
45819: PPUSH
45820: LD_VAR 0 6
45824: PPUSH
45825: CALL_OW 169
45829: GO 45795
45831: POP
45832: POP
// end ; result := tmp ;
45833: LD_ADDR_VAR 0 4
45837: PUSH
45838: LD_VAR 0 5
45842: ST_TO_ADDR
// end ;
45843: LD_VAR 0 4
45847: RET
// export function ComComplete ( units , b ) ; var i ; begin
45848: LD_INT 0
45850: PPUSH
45851: PPUSH
// if not units then
45852: LD_VAR 0 1
45856: NOT
45857: IFFALSE 45861
// exit ;
45859: GO 45951
// for i in units do
45861: LD_ADDR_VAR 0 4
45865: PUSH
45866: LD_VAR 0 1
45870: PUSH
45871: FOR_IN
45872: IFFALSE 45949
// if BuildingStatus ( b ) = bs_build then
45874: LD_VAR 0 2
45878: PPUSH
45879: CALL_OW 461
45883: PUSH
45884: LD_INT 1
45886: EQUAL
45887: IFFALSE 45947
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45889: LD_VAR 0 4
45893: PPUSH
45894: LD_STRING h
45896: PUSH
45897: LD_VAR 0 2
45901: PPUSH
45902: CALL_OW 250
45906: PUSH
45907: LD_VAR 0 2
45911: PPUSH
45912: CALL_OW 251
45916: PUSH
45917: LD_VAR 0 2
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: PUSH
45940: EMPTY
45941: LIST
45942: PPUSH
45943: CALL_OW 446
45947: GO 45871
45949: POP
45950: POP
// end ;
45951: LD_VAR 0 3
45955: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45956: LD_INT 0
45958: PPUSH
45959: PPUSH
45960: PPUSH
45961: PPUSH
45962: PPUSH
45963: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45964: LD_VAR 0 1
45968: NOT
45969: PUSH
45970: LD_VAR 0 1
45974: PPUSH
45975: CALL_OW 263
45979: PUSH
45980: LD_INT 2
45982: NONEQUAL
45983: OR
45984: IFFALSE 45988
// exit ;
45986: GO 46304
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45988: LD_ADDR_VAR 0 6
45992: PUSH
45993: LD_INT 22
45995: PUSH
45996: LD_VAR 0 1
46000: PPUSH
46001: CALL_OW 255
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 30
46015: PUSH
46016: LD_INT 36
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 34
46025: PUSH
46026: LD_INT 31
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PPUSH
46042: CALL_OW 69
46046: ST_TO_ADDR
// if not tmp then
46047: LD_VAR 0 6
46051: NOT
46052: IFFALSE 46056
// exit ;
46054: GO 46304
// result := [ ] ;
46056: LD_ADDR_VAR 0 2
46060: PUSH
46061: EMPTY
46062: ST_TO_ADDR
// for i in tmp do
46063: LD_ADDR_VAR 0 3
46067: PUSH
46068: LD_VAR 0 6
46072: PUSH
46073: FOR_IN
46074: IFFALSE 46145
// begin t := UnitsInside ( i ) ;
46076: LD_ADDR_VAR 0 4
46080: PUSH
46081: LD_VAR 0 3
46085: PPUSH
46086: CALL_OW 313
46090: ST_TO_ADDR
// if t then
46091: LD_VAR 0 4
46095: IFFALSE 46143
// for j in t do
46097: LD_ADDR_VAR 0 7
46101: PUSH
46102: LD_VAR 0 4
46106: PUSH
46107: FOR_IN
46108: IFFALSE 46141
// result := Replace ( result , result + 1 , j ) ;
46110: LD_ADDR_VAR 0 2
46114: PUSH
46115: LD_VAR 0 2
46119: PPUSH
46120: LD_VAR 0 2
46124: PUSH
46125: LD_INT 1
46127: PLUS
46128: PPUSH
46129: LD_VAR 0 7
46133: PPUSH
46134: CALL_OW 1
46138: ST_TO_ADDR
46139: GO 46107
46141: POP
46142: POP
// end ;
46143: GO 46073
46145: POP
46146: POP
// if not result then
46147: LD_VAR 0 2
46151: NOT
46152: IFFALSE 46156
// exit ;
46154: GO 46304
// mech := result [ 1 ] ;
46156: LD_ADDR_VAR 0 5
46160: PUSH
46161: LD_VAR 0 2
46165: PUSH
46166: LD_INT 1
46168: ARRAY
46169: ST_TO_ADDR
// if result > 1 then
46170: LD_VAR 0 2
46174: PUSH
46175: LD_INT 1
46177: GREATER
46178: IFFALSE 46290
// begin for i = 2 to result do
46180: LD_ADDR_VAR 0 3
46184: PUSH
46185: DOUBLE
46186: LD_INT 2
46188: DEC
46189: ST_TO_ADDR
46190: LD_VAR 0 2
46194: PUSH
46195: FOR_TO
46196: IFFALSE 46288
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46198: LD_ADDR_VAR 0 4
46202: PUSH
46203: LD_VAR 0 2
46207: PUSH
46208: LD_VAR 0 3
46212: ARRAY
46213: PPUSH
46214: LD_INT 3
46216: PPUSH
46217: CALL_OW 259
46221: PUSH
46222: LD_VAR 0 2
46226: PUSH
46227: LD_VAR 0 3
46231: ARRAY
46232: PPUSH
46233: CALL_OW 432
46237: MINUS
46238: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46239: LD_VAR 0 4
46243: PUSH
46244: LD_VAR 0 5
46248: PPUSH
46249: LD_INT 3
46251: PPUSH
46252: CALL_OW 259
46256: PUSH
46257: LD_VAR 0 5
46261: PPUSH
46262: CALL_OW 432
46266: MINUS
46267: GREATEREQUAL
46268: IFFALSE 46286
// mech := result [ i ] ;
46270: LD_ADDR_VAR 0 5
46274: PUSH
46275: LD_VAR 0 2
46279: PUSH
46280: LD_VAR 0 3
46284: ARRAY
46285: ST_TO_ADDR
// end ;
46286: GO 46195
46288: POP
46289: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46290: LD_VAR 0 1
46294: PPUSH
46295: LD_VAR 0 5
46299: PPUSH
46300: CALL_OW 135
// end ;
46304: LD_VAR 0 2
46308: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46309: LD_INT 0
46311: PPUSH
46312: PPUSH
46313: PPUSH
46314: PPUSH
46315: PPUSH
46316: PPUSH
46317: PPUSH
46318: PPUSH
46319: PPUSH
46320: PPUSH
46321: PPUSH
46322: PPUSH
46323: PPUSH
// result := [ ] ;
46324: LD_ADDR_VAR 0 7
46328: PUSH
46329: EMPTY
46330: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46331: LD_VAR 0 1
46335: PPUSH
46336: CALL_OW 266
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: IN
46351: NOT
46352: IFFALSE 46356
// exit ;
46354: GO 47990
// if name then
46356: LD_VAR 0 3
46360: IFFALSE 46376
// SetBName ( base_dep , name ) ;
46362: LD_VAR 0 1
46366: PPUSH
46367: LD_VAR 0 3
46371: PPUSH
46372: CALL_OW 500
// base := GetBase ( base_dep ) ;
46376: LD_ADDR_VAR 0 15
46380: PUSH
46381: LD_VAR 0 1
46385: PPUSH
46386: CALL_OW 274
46390: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46391: LD_ADDR_VAR 0 16
46395: PUSH
46396: LD_VAR 0 1
46400: PPUSH
46401: CALL_OW 255
46405: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46406: LD_ADDR_VAR 0 17
46410: PUSH
46411: LD_VAR 0 1
46415: PPUSH
46416: CALL_OW 248
46420: ST_TO_ADDR
// if sources then
46421: LD_VAR 0 5
46425: IFFALSE 46472
// for i = 1 to 3 do
46427: LD_ADDR_VAR 0 8
46431: PUSH
46432: DOUBLE
46433: LD_INT 1
46435: DEC
46436: ST_TO_ADDR
46437: LD_INT 3
46439: PUSH
46440: FOR_TO
46441: IFFALSE 46470
// AddResourceType ( base , i , sources [ i ] ) ;
46443: LD_VAR 0 15
46447: PPUSH
46448: LD_VAR 0 8
46452: PPUSH
46453: LD_VAR 0 5
46457: PUSH
46458: LD_VAR 0 8
46462: ARRAY
46463: PPUSH
46464: CALL_OW 276
46468: GO 46440
46470: POP
46471: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46472: LD_ADDR_VAR 0 18
46476: PUSH
46477: LD_VAR 0 15
46481: PPUSH
46482: LD_VAR 0 2
46486: PPUSH
46487: LD_INT 1
46489: PPUSH
46490: CALL 45733 0 3
46494: ST_TO_ADDR
// InitHc ;
46495: CALL_OW 19
// InitUc ;
46499: CALL_OW 18
// uc_side := side ;
46503: LD_ADDR_OWVAR 20
46507: PUSH
46508: LD_VAR 0 16
46512: ST_TO_ADDR
// uc_nation := nation ;
46513: LD_ADDR_OWVAR 21
46517: PUSH
46518: LD_VAR 0 17
46522: ST_TO_ADDR
// if buildings then
46523: LD_VAR 0 18
46527: IFFALSE 47849
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46529: LD_ADDR_VAR 0 19
46533: PUSH
46534: LD_VAR 0 18
46538: PPUSH
46539: LD_INT 2
46541: PUSH
46542: LD_INT 30
46544: PUSH
46545: LD_INT 29
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 30
46554: PUSH
46555: LD_INT 30
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: PPUSH
46567: CALL_OW 72
46571: ST_TO_ADDR
// if tmp then
46572: LD_VAR 0 19
46576: IFFALSE 46624
// for i in tmp do
46578: LD_ADDR_VAR 0 8
46582: PUSH
46583: LD_VAR 0 19
46587: PUSH
46588: FOR_IN
46589: IFFALSE 46622
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46591: LD_VAR 0 8
46595: PPUSH
46596: CALL_OW 250
46600: PPUSH
46601: LD_VAR 0 8
46605: PPUSH
46606: CALL_OW 251
46610: PPUSH
46611: LD_VAR 0 16
46615: PPUSH
46616: CALL_OW 441
46620: GO 46588
46622: POP
46623: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46624: LD_VAR 0 18
46628: PPUSH
46629: LD_INT 2
46631: PUSH
46632: LD_INT 30
46634: PUSH
46635: LD_INT 32
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 30
46644: PUSH
46645: LD_INT 33
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: LIST
46656: PPUSH
46657: CALL_OW 72
46661: IFFALSE 46749
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46663: LD_ADDR_VAR 0 8
46667: PUSH
46668: LD_VAR 0 18
46672: PPUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 30
46678: PUSH
46679: LD_INT 32
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 30
46688: PUSH
46689: LD_INT 33
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: LIST
46700: PPUSH
46701: CALL_OW 72
46705: PUSH
46706: FOR_IN
46707: IFFALSE 46747
// begin if not GetBWeapon ( i ) then
46709: LD_VAR 0 8
46713: PPUSH
46714: CALL_OW 269
46718: NOT
46719: IFFALSE 46745
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46721: LD_VAR 0 8
46725: PPUSH
46726: LD_VAR 0 8
46730: PPUSH
46731: LD_VAR 0 2
46735: PPUSH
46736: CALL 47995 0 2
46740: PPUSH
46741: CALL_OW 431
// end ;
46745: GO 46706
46747: POP
46748: POP
// end ; for i = 1 to personel do
46749: LD_ADDR_VAR 0 8
46753: PUSH
46754: DOUBLE
46755: LD_INT 1
46757: DEC
46758: ST_TO_ADDR
46759: LD_VAR 0 6
46763: PUSH
46764: FOR_TO
46765: IFFALSE 47829
// begin if i > 4 then
46767: LD_VAR 0 8
46771: PUSH
46772: LD_INT 4
46774: GREATER
46775: IFFALSE 46779
// break ;
46777: GO 47829
// case i of 1 :
46779: LD_VAR 0 8
46783: PUSH
46784: LD_INT 1
46786: DOUBLE
46787: EQUAL
46788: IFTRUE 46792
46790: GO 46872
46792: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46793: LD_ADDR_VAR 0 12
46797: PUSH
46798: LD_VAR 0 18
46802: PPUSH
46803: LD_INT 22
46805: PUSH
46806: LD_VAR 0 16
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 58
46817: PUSH
46818: EMPTY
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 30
46826: PUSH
46827: LD_INT 32
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 30
46836: PUSH
46837: LD_INT 4
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 30
46846: PUSH
46847: LD_INT 5
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: PPUSH
46865: CALL_OW 72
46869: ST_TO_ADDR
46870: GO 47094
46872: LD_INT 2
46874: DOUBLE
46875: EQUAL
46876: IFTRUE 46880
46878: GO 46942
46880: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46881: LD_ADDR_VAR 0 12
46885: PUSH
46886: LD_VAR 0 18
46890: PPUSH
46891: LD_INT 22
46893: PUSH
46894: LD_VAR 0 16
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 30
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 30
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: LIST
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PPUSH
46935: CALL_OW 72
46939: ST_TO_ADDR
46940: GO 47094
46942: LD_INT 3
46944: DOUBLE
46945: EQUAL
46946: IFTRUE 46950
46948: GO 47012
46950: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46951: LD_ADDR_VAR 0 12
46955: PUSH
46956: LD_VAR 0 18
46960: PPUSH
46961: LD_INT 22
46963: PUSH
46964: LD_VAR 0 16
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: LD_INT 30
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 30
46988: PUSH
46989: LD_INT 3
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: LIST
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PPUSH
47005: CALL_OW 72
47009: ST_TO_ADDR
47010: GO 47094
47012: LD_INT 4
47014: DOUBLE
47015: EQUAL
47016: IFTRUE 47020
47018: GO 47093
47020: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47021: LD_ADDR_VAR 0 12
47025: PUSH
47026: LD_VAR 0 18
47030: PPUSH
47031: LD_INT 22
47033: PUSH
47034: LD_VAR 0 16
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: LD_INT 30
47048: PUSH
47049: LD_INT 6
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 30
47058: PUSH
47059: LD_INT 7
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 30
47068: PUSH
47069: LD_INT 8
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PPUSH
47086: CALL_OW 72
47090: ST_TO_ADDR
47091: GO 47094
47093: POP
// if i = 1 then
47094: LD_VAR 0 8
47098: PUSH
47099: LD_INT 1
47101: EQUAL
47102: IFFALSE 47213
// begin tmp := [ ] ;
47104: LD_ADDR_VAR 0 19
47108: PUSH
47109: EMPTY
47110: ST_TO_ADDR
// for j in f do
47111: LD_ADDR_VAR 0 9
47115: PUSH
47116: LD_VAR 0 12
47120: PUSH
47121: FOR_IN
47122: IFFALSE 47195
// if GetBType ( j ) = b_bunker then
47124: LD_VAR 0 9
47128: PPUSH
47129: CALL_OW 266
47133: PUSH
47134: LD_INT 32
47136: EQUAL
47137: IFFALSE 47164
// tmp := Insert ( tmp , 1 , j ) else
47139: LD_ADDR_VAR 0 19
47143: PUSH
47144: LD_VAR 0 19
47148: PPUSH
47149: LD_INT 1
47151: PPUSH
47152: LD_VAR 0 9
47156: PPUSH
47157: CALL_OW 2
47161: ST_TO_ADDR
47162: GO 47193
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47164: LD_ADDR_VAR 0 19
47168: PUSH
47169: LD_VAR 0 19
47173: PPUSH
47174: LD_VAR 0 19
47178: PUSH
47179: LD_INT 1
47181: PLUS
47182: PPUSH
47183: LD_VAR 0 9
47187: PPUSH
47188: CALL_OW 2
47192: ST_TO_ADDR
47193: GO 47121
47195: POP
47196: POP
// if tmp then
47197: LD_VAR 0 19
47201: IFFALSE 47213
// f := tmp ;
47203: LD_ADDR_VAR 0 12
47207: PUSH
47208: LD_VAR 0 19
47212: ST_TO_ADDR
// end ; x := personel [ i ] ;
47213: LD_ADDR_VAR 0 13
47217: PUSH
47218: LD_VAR 0 6
47222: PUSH
47223: LD_VAR 0 8
47227: ARRAY
47228: ST_TO_ADDR
// if x = - 1 then
47229: LD_VAR 0 13
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: EQUAL
47238: IFFALSE 47447
// begin for j in f do
47240: LD_ADDR_VAR 0 9
47244: PUSH
47245: LD_VAR 0 12
47249: PUSH
47250: FOR_IN
47251: IFFALSE 47443
// repeat InitHc ;
47253: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47257: LD_VAR 0 9
47261: PPUSH
47262: CALL_OW 266
47266: PUSH
47267: LD_INT 5
47269: EQUAL
47270: IFFALSE 47340
// begin if UnitsInside ( j ) < 3 then
47272: LD_VAR 0 9
47276: PPUSH
47277: CALL_OW 313
47281: PUSH
47282: LD_INT 3
47284: LESS
47285: IFFALSE 47321
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47287: LD_INT 0
47289: PPUSH
47290: LD_INT 5
47292: PUSH
47293: LD_INT 8
47295: PUSH
47296: LD_INT 9
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: PUSH
47304: LD_VAR 0 17
47308: ARRAY
47309: PPUSH
47310: LD_VAR 0 4
47314: PPUSH
47315: CALL_OW 380
47319: GO 47338
// PrepareHuman ( false , i , skill ) ;
47321: LD_INT 0
47323: PPUSH
47324: LD_VAR 0 8
47328: PPUSH
47329: LD_VAR 0 4
47333: PPUSH
47334: CALL_OW 380
// end else
47338: GO 47357
// PrepareHuman ( false , i , skill ) ;
47340: LD_INT 0
47342: PPUSH
47343: LD_VAR 0 8
47347: PPUSH
47348: LD_VAR 0 4
47352: PPUSH
47353: CALL_OW 380
// un := CreateHuman ;
47357: LD_ADDR_VAR 0 14
47361: PUSH
47362: CALL_OW 44
47366: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47367: LD_ADDR_VAR 0 7
47371: PUSH
47372: LD_VAR 0 7
47376: PPUSH
47377: LD_INT 1
47379: PPUSH
47380: LD_VAR 0 14
47384: PPUSH
47385: CALL_OW 2
47389: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47390: LD_VAR 0 14
47394: PPUSH
47395: LD_VAR 0 9
47399: PPUSH
47400: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47404: LD_VAR 0 9
47408: PPUSH
47409: CALL_OW 313
47413: PUSH
47414: LD_INT 6
47416: EQUAL
47417: PUSH
47418: LD_VAR 0 9
47422: PPUSH
47423: CALL_OW 266
47427: PUSH
47428: LD_INT 32
47430: PUSH
47431: LD_INT 31
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: IN
47438: OR
47439: IFFALSE 47253
47441: GO 47250
47443: POP
47444: POP
// end else
47445: GO 47827
// for j = 1 to x do
47447: LD_ADDR_VAR 0 9
47451: PUSH
47452: DOUBLE
47453: LD_INT 1
47455: DEC
47456: ST_TO_ADDR
47457: LD_VAR 0 13
47461: PUSH
47462: FOR_TO
47463: IFFALSE 47825
// begin InitHc ;
47465: CALL_OW 19
// if not f then
47469: LD_VAR 0 12
47473: NOT
47474: IFFALSE 47563
// begin PrepareHuman ( false , i , skill ) ;
47476: LD_INT 0
47478: PPUSH
47479: LD_VAR 0 8
47483: PPUSH
47484: LD_VAR 0 4
47488: PPUSH
47489: CALL_OW 380
// un := CreateHuman ;
47493: LD_ADDR_VAR 0 14
47497: PUSH
47498: CALL_OW 44
47502: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47503: LD_ADDR_VAR 0 7
47507: PUSH
47508: LD_VAR 0 7
47512: PPUSH
47513: LD_INT 1
47515: PPUSH
47516: LD_VAR 0 14
47520: PPUSH
47521: CALL_OW 2
47525: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47526: LD_VAR 0 14
47530: PPUSH
47531: LD_VAR 0 1
47535: PPUSH
47536: CALL_OW 250
47540: PPUSH
47541: LD_VAR 0 1
47545: PPUSH
47546: CALL_OW 251
47550: PPUSH
47551: LD_INT 10
47553: PPUSH
47554: LD_INT 0
47556: PPUSH
47557: CALL_OW 50
// continue ;
47561: GO 47462
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47563: LD_VAR 0 12
47567: PUSH
47568: LD_INT 1
47570: ARRAY
47571: PPUSH
47572: CALL_OW 313
47576: PUSH
47577: LD_VAR 0 12
47581: PUSH
47582: LD_INT 1
47584: ARRAY
47585: PPUSH
47586: CALL_OW 266
47590: PUSH
47591: LD_INT 32
47593: PUSH
47594: LD_INT 31
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: IN
47601: AND
47602: PUSH
47603: LD_VAR 0 12
47607: PUSH
47608: LD_INT 1
47610: ARRAY
47611: PPUSH
47612: CALL_OW 313
47616: PUSH
47617: LD_INT 6
47619: EQUAL
47620: OR
47621: IFFALSE 47641
// f := Delete ( f , 1 ) ;
47623: LD_ADDR_VAR 0 12
47627: PUSH
47628: LD_VAR 0 12
47632: PPUSH
47633: LD_INT 1
47635: PPUSH
47636: CALL_OW 3
47640: ST_TO_ADDR
// if not f then
47641: LD_VAR 0 12
47645: NOT
47646: IFFALSE 47664
// begin x := x + 2 ;
47648: LD_ADDR_VAR 0 13
47652: PUSH
47653: LD_VAR 0 13
47657: PUSH
47658: LD_INT 2
47660: PLUS
47661: ST_TO_ADDR
// continue ;
47662: GO 47462
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47664: LD_VAR 0 12
47668: PUSH
47669: LD_INT 1
47671: ARRAY
47672: PPUSH
47673: CALL_OW 266
47677: PUSH
47678: LD_INT 5
47680: EQUAL
47681: IFFALSE 47755
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47683: LD_VAR 0 12
47687: PUSH
47688: LD_INT 1
47690: ARRAY
47691: PPUSH
47692: CALL_OW 313
47696: PUSH
47697: LD_INT 3
47699: LESS
47700: IFFALSE 47736
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47702: LD_INT 0
47704: PPUSH
47705: LD_INT 5
47707: PUSH
47708: LD_INT 8
47710: PUSH
47711: LD_INT 9
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: PUSH
47719: LD_VAR 0 17
47723: ARRAY
47724: PPUSH
47725: LD_VAR 0 4
47729: PPUSH
47730: CALL_OW 380
47734: GO 47753
// PrepareHuman ( false , i , skill ) ;
47736: LD_INT 0
47738: PPUSH
47739: LD_VAR 0 8
47743: PPUSH
47744: LD_VAR 0 4
47748: PPUSH
47749: CALL_OW 380
// end else
47753: GO 47772
// PrepareHuman ( false , i , skill ) ;
47755: LD_INT 0
47757: PPUSH
47758: LD_VAR 0 8
47762: PPUSH
47763: LD_VAR 0 4
47767: PPUSH
47768: CALL_OW 380
// un := CreateHuman ;
47772: LD_ADDR_VAR 0 14
47776: PUSH
47777: CALL_OW 44
47781: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47782: LD_ADDR_VAR 0 7
47786: PUSH
47787: LD_VAR 0 7
47791: PPUSH
47792: LD_INT 1
47794: PPUSH
47795: LD_VAR 0 14
47799: PPUSH
47800: CALL_OW 2
47804: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47805: LD_VAR 0 14
47809: PPUSH
47810: LD_VAR 0 12
47814: PUSH
47815: LD_INT 1
47817: ARRAY
47818: PPUSH
47819: CALL_OW 52
// end ;
47823: GO 47462
47825: POP
47826: POP
// end ;
47827: GO 46764
47829: POP
47830: POP
// result := result ^ buildings ;
47831: LD_ADDR_VAR 0 7
47835: PUSH
47836: LD_VAR 0 7
47840: PUSH
47841: LD_VAR 0 18
47845: ADD
47846: ST_TO_ADDR
// end else
47847: GO 47990
// begin for i = 1 to personel do
47849: LD_ADDR_VAR 0 8
47853: PUSH
47854: DOUBLE
47855: LD_INT 1
47857: DEC
47858: ST_TO_ADDR
47859: LD_VAR 0 6
47863: PUSH
47864: FOR_TO
47865: IFFALSE 47988
// begin if i > 4 then
47867: LD_VAR 0 8
47871: PUSH
47872: LD_INT 4
47874: GREATER
47875: IFFALSE 47879
// break ;
47877: GO 47988
// x := personel [ i ] ;
47879: LD_ADDR_VAR 0 13
47883: PUSH
47884: LD_VAR 0 6
47888: PUSH
47889: LD_VAR 0 8
47893: ARRAY
47894: ST_TO_ADDR
// if x = - 1 then
47895: LD_VAR 0 13
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: EQUAL
47904: IFFALSE 47908
// continue ;
47906: GO 47864
// PrepareHuman ( false , i , skill ) ;
47908: LD_INT 0
47910: PPUSH
47911: LD_VAR 0 8
47915: PPUSH
47916: LD_VAR 0 4
47920: PPUSH
47921: CALL_OW 380
// un := CreateHuman ;
47925: LD_ADDR_VAR 0 14
47929: PUSH
47930: CALL_OW 44
47934: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47935: LD_VAR 0 14
47939: PPUSH
47940: LD_VAR 0 1
47944: PPUSH
47945: CALL_OW 250
47949: PPUSH
47950: LD_VAR 0 1
47954: PPUSH
47955: CALL_OW 251
47959: PPUSH
47960: LD_INT 10
47962: PPUSH
47963: LD_INT 0
47965: PPUSH
47966: CALL_OW 50
// result := result ^ un ;
47970: LD_ADDR_VAR 0 7
47974: PUSH
47975: LD_VAR 0 7
47979: PUSH
47980: LD_VAR 0 14
47984: ADD
47985: ST_TO_ADDR
// end ;
47986: GO 47864
47988: POP
47989: POP
// end ; end ;
47990: LD_VAR 0 7
47994: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47995: LD_INT 0
47997: PPUSH
47998: PPUSH
47999: PPUSH
48000: PPUSH
48001: PPUSH
48002: PPUSH
48003: PPUSH
48004: PPUSH
48005: PPUSH
48006: PPUSH
48007: PPUSH
48008: PPUSH
48009: PPUSH
48010: PPUSH
48011: PPUSH
48012: PPUSH
// result := false ;
48013: LD_ADDR_VAR 0 3
48017: PUSH
48018: LD_INT 0
48020: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48021: LD_VAR 0 1
48025: NOT
48026: PUSH
48027: LD_VAR 0 1
48031: PPUSH
48032: CALL_OW 266
48036: PUSH
48037: LD_INT 32
48039: PUSH
48040: LD_INT 33
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: IN
48047: NOT
48048: OR
48049: IFFALSE 48053
// exit ;
48051: GO 49162
// nat := GetNation ( tower ) ;
48053: LD_ADDR_VAR 0 12
48057: PUSH
48058: LD_VAR 0 1
48062: PPUSH
48063: CALL_OW 248
48067: ST_TO_ADDR
// side := GetSide ( tower ) ;
48068: LD_ADDR_VAR 0 16
48072: PUSH
48073: LD_VAR 0 1
48077: PPUSH
48078: CALL_OW 255
48082: ST_TO_ADDR
// x := GetX ( tower ) ;
48083: LD_ADDR_VAR 0 10
48087: PUSH
48088: LD_VAR 0 1
48092: PPUSH
48093: CALL_OW 250
48097: ST_TO_ADDR
// y := GetY ( tower ) ;
48098: LD_ADDR_VAR 0 11
48102: PUSH
48103: LD_VAR 0 1
48107: PPUSH
48108: CALL_OW 251
48112: ST_TO_ADDR
// if not x or not y then
48113: LD_VAR 0 10
48117: NOT
48118: PUSH
48119: LD_VAR 0 11
48123: NOT
48124: OR
48125: IFFALSE 48129
// exit ;
48127: GO 49162
// weapon := 0 ;
48129: LD_ADDR_VAR 0 18
48133: PUSH
48134: LD_INT 0
48136: ST_TO_ADDR
// fac_list := [ ] ;
48137: LD_ADDR_VAR 0 17
48141: PUSH
48142: EMPTY
48143: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48144: LD_ADDR_VAR 0 6
48148: PUSH
48149: LD_VAR 0 1
48153: PPUSH
48154: CALL_OW 274
48158: PPUSH
48159: LD_VAR 0 2
48163: PPUSH
48164: LD_INT 0
48166: PPUSH
48167: CALL 45733 0 3
48171: PPUSH
48172: LD_INT 30
48174: PUSH
48175: LD_INT 3
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PPUSH
48182: CALL_OW 72
48186: ST_TO_ADDR
// if not factories then
48187: LD_VAR 0 6
48191: NOT
48192: IFFALSE 48196
// exit ;
48194: GO 49162
// for i in factories do
48196: LD_ADDR_VAR 0 8
48200: PUSH
48201: LD_VAR 0 6
48205: PUSH
48206: FOR_IN
48207: IFFALSE 48232
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48209: LD_ADDR_VAR 0 17
48213: PUSH
48214: LD_VAR 0 17
48218: PUSH
48219: LD_VAR 0 8
48223: PPUSH
48224: CALL_OW 478
48228: UNION
48229: ST_TO_ADDR
48230: GO 48206
48232: POP
48233: POP
// if not fac_list then
48234: LD_VAR 0 17
48238: NOT
48239: IFFALSE 48243
// exit ;
48241: GO 49162
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48243: LD_ADDR_VAR 0 5
48247: PUSH
48248: LD_INT 4
48250: PUSH
48251: LD_INT 5
48253: PUSH
48254: LD_INT 9
48256: PUSH
48257: LD_INT 10
48259: PUSH
48260: LD_INT 6
48262: PUSH
48263: LD_INT 7
48265: PUSH
48266: LD_INT 11
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 27
48280: PUSH
48281: LD_INT 28
48283: PUSH
48284: LD_INT 26
48286: PUSH
48287: LD_INT 30
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 43
48298: PUSH
48299: LD_INT 44
48301: PUSH
48302: LD_INT 46
48304: PUSH
48305: LD_INT 45
48307: PUSH
48308: LD_INT 47
48310: PUSH
48311: LD_INT 49
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: PUSH
48327: LD_VAR 0 12
48331: ARRAY
48332: ST_TO_ADDR
// list := list isect fac_list ;
48333: LD_ADDR_VAR 0 5
48337: PUSH
48338: LD_VAR 0 5
48342: PUSH
48343: LD_VAR 0 17
48347: ISECT
48348: ST_TO_ADDR
// if not list then
48349: LD_VAR 0 5
48353: NOT
48354: IFFALSE 48358
// exit ;
48356: GO 49162
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48358: LD_VAR 0 12
48362: PUSH
48363: LD_INT 3
48365: EQUAL
48366: PUSH
48367: LD_INT 49
48369: PUSH
48370: LD_VAR 0 5
48374: IN
48375: AND
48376: PUSH
48377: LD_INT 31
48379: PPUSH
48380: LD_VAR 0 16
48384: PPUSH
48385: CALL_OW 321
48389: PUSH
48390: LD_INT 2
48392: EQUAL
48393: AND
48394: IFFALSE 48454
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48396: LD_INT 22
48398: PUSH
48399: LD_VAR 0 16
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 35
48410: PUSH
48411: LD_INT 49
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 91
48420: PUSH
48421: LD_VAR 0 1
48425: PUSH
48426: LD_INT 10
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: PPUSH
48439: CALL_OW 69
48443: NOT
48444: IFFALSE 48454
// weapon := ru_time_lapser ;
48446: LD_ADDR_VAR 0 18
48450: PUSH
48451: LD_INT 49
48453: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48454: LD_VAR 0 12
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: IN
48469: PUSH
48470: LD_INT 11
48472: PUSH
48473: LD_VAR 0 5
48477: IN
48478: PUSH
48479: LD_INT 30
48481: PUSH
48482: LD_VAR 0 5
48486: IN
48487: OR
48488: AND
48489: PUSH
48490: LD_INT 6
48492: PPUSH
48493: LD_VAR 0 16
48497: PPUSH
48498: CALL_OW 321
48502: PUSH
48503: LD_INT 2
48505: EQUAL
48506: AND
48507: IFFALSE 48672
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48509: LD_INT 22
48511: PUSH
48512: LD_VAR 0 16
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 35
48526: PUSH
48527: LD_INT 11
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 35
48536: PUSH
48537: LD_INT 30
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 91
48551: PUSH
48552: LD_VAR 0 1
48556: PUSH
48557: LD_INT 18
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: LIST
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: LIST
48569: PPUSH
48570: CALL_OW 69
48574: NOT
48575: PUSH
48576: LD_INT 22
48578: PUSH
48579: LD_VAR 0 16
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: LD_INT 30
48593: PUSH
48594: LD_INT 32
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 30
48603: PUSH
48604: LD_INT 33
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 91
48618: PUSH
48619: LD_VAR 0 1
48623: PUSH
48624: LD_INT 12
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: LIST
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: PPUSH
48640: CALL_OW 69
48644: PUSH
48645: LD_INT 2
48647: GREATER
48648: AND
48649: IFFALSE 48672
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48651: LD_ADDR_VAR 0 18
48655: PUSH
48656: LD_INT 11
48658: PUSH
48659: LD_INT 30
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_VAR 0 12
48670: ARRAY
48671: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48672: LD_VAR 0 18
48676: NOT
48677: PUSH
48678: LD_INT 40
48680: PPUSH
48681: LD_VAR 0 16
48685: PPUSH
48686: CALL_OW 321
48690: PUSH
48691: LD_INT 2
48693: EQUAL
48694: AND
48695: PUSH
48696: LD_INT 7
48698: PUSH
48699: LD_VAR 0 5
48703: IN
48704: PUSH
48705: LD_INT 28
48707: PUSH
48708: LD_VAR 0 5
48712: IN
48713: OR
48714: PUSH
48715: LD_INT 45
48717: PUSH
48718: LD_VAR 0 5
48722: IN
48723: OR
48724: AND
48725: IFFALSE 48979
// begin hex := GetHexInfo ( x , y ) ;
48727: LD_ADDR_VAR 0 4
48731: PUSH
48732: LD_VAR 0 10
48736: PPUSH
48737: LD_VAR 0 11
48741: PPUSH
48742: CALL_OW 546
48746: ST_TO_ADDR
// if hex [ 1 ] then
48747: LD_VAR 0 4
48751: PUSH
48752: LD_INT 1
48754: ARRAY
48755: IFFALSE 48759
// exit ;
48757: GO 49162
// height := hex [ 2 ] ;
48759: LD_ADDR_VAR 0 15
48763: PUSH
48764: LD_VAR 0 4
48768: PUSH
48769: LD_INT 2
48771: ARRAY
48772: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48773: LD_ADDR_VAR 0 14
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: LD_INT 5
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: ST_TO_ADDR
// for i in tmp do
48796: LD_ADDR_VAR 0 8
48800: PUSH
48801: LD_VAR 0 14
48805: PUSH
48806: FOR_IN
48807: IFFALSE 48977
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48809: LD_ADDR_VAR 0 9
48813: PUSH
48814: LD_VAR 0 10
48818: PPUSH
48819: LD_VAR 0 8
48823: PPUSH
48824: LD_INT 5
48826: PPUSH
48827: CALL_OW 272
48831: PUSH
48832: LD_VAR 0 11
48836: PPUSH
48837: LD_VAR 0 8
48841: PPUSH
48842: LD_INT 5
48844: PPUSH
48845: CALL_OW 273
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48854: LD_VAR 0 9
48858: PUSH
48859: LD_INT 1
48861: ARRAY
48862: PPUSH
48863: LD_VAR 0 9
48867: PUSH
48868: LD_INT 2
48870: ARRAY
48871: PPUSH
48872: CALL_OW 488
48876: IFFALSE 48975
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48878: LD_ADDR_VAR 0 4
48882: PUSH
48883: LD_VAR 0 9
48887: PUSH
48888: LD_INT 1
48890: ARRAY
48891: PPUSH
48892: LD_VAR 0 9
48896: PUSH
48897: LD_INT 2
48899: ARRAY
48900: PPUSH
48901: CALL_OW 546
48905: ST_TO_ADDR
// if hex [ 1 ] then
48906: LD_VAR 0 4
48910: PUSH
48911: LD_INT 1
48913: ARRAY
48914: IFFALSE 48918
// continue ;
48916: GO 48806
// h := hex [ 2 ] ;
48918: LD_ADDR_VAR 0 13
48922: PUSH
48923: LD_VAR 0 4
48927: PUSH
48928: LD_INT 2
48930: ARRAY
48931: ST_TO_ADDR
// if h + 7 < height then
48932: LD_VAR 0 13
48936: PUSH
48937: LD_INT 7
48939: PLUS
48940: PUSH
48941: LD_VAR 0 15
48945: LESS
48946: IFFALSE 48975
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48948: LD_ADDR_VAR 0 18
48952: PUSH
48953: LD_INT 7
48955: PUSH
48956: LD_INT 28
48958: PUSH
48959: LD_INT 45
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: PUSH
48967: LD_VAR 0 12
48971: ARRAY
48972: ST_TO_ADDR
// break ;
48973: GO 48977
// end ; end ; end ;
48975: GO 48806
48977: POP
48978: POP
// end ; if not weapon then
48979: LD_VAR 0 18
48983: NOT
48984: IFFALSE 49044
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48986: LD_ADDR_VAR 0 5
48990: PUSH
48991: LD_VAR 0 5
48995: PUSH
48996: LD_INT 11
48998: PUSH
48999: LD_INT 30
49001: PUSH
49002: LD_INT 49
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: LIST
49009: DIFF
49010: ST_TO_ADDR
// if not list then
49011: LD_VAR 0 5
49015: NOT
49016: IFFALSE 49020
// exit ;
49018: GO 49162
// weapon := list [ rand ( 1 , list ) ] ;
49020: LD_ADDR_VAR 0 18
49024: PUSH
49025: LD_VAR 0 5
49029: PUSH
49030: LD_INT 1
49032: PPUSH
49033: LD_VAR 0 5
49037: PPUSH
49038: CALL_OW 12
49042: ARRAY
49043: ST_TO_ADDR
// end ; if weapon then
49044: LD_VAR 0 18
49048: IFFALSE 49162
// begin tmp := CostOfWeapon ( weapon ) ;
49050: LD_ADDR_VAR 0 14
49054: PUSH
49055: LD_VAR 0 18
49059: PPUSH
49060: CALL_OW 451
49064: ST_TO_ADDR
// j := GetBase ( tower ) ;
49065: LD_ADDR_VAR 0 9
49069: PUSH
49070: LD_VAR 0 1
49074: PPUSH
49075: CALL_OW 274
49079: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49080: LD_VAR 0 9
49084: PPUSH
49085: LD_INT 1
49087: PPUSH
49088: CALL_OW 275
49092: PUSH
49093: LD_VAR 0 14
49097: PUSH
49098: LD_INT 1
49100: ARRAY
49101: GREATEREQUAL
49102: PUSH
49103: LD_VAR 0 9
49107: PPUSH
49108: LD_INT 2
49110: PPUSH
49111: CALL_OW 275
49115: PUSH
49116: LD_VAR 0 14
49120: PUSH
49121: LD_INT 2
49123: ARRAY
49124: GREATEREQUAL
49125: AND
49126: PUSH
49127: LD_VAR 0 9
49131: PPUSH
49132: LD_INT 3
49134: PPUSH
49135: CALL_OW 275
49139: PUSH
49140: LD_VAR 0 14
49144: PUSH
49145: LD_INT 3
49147: ARRAY
49148: GREATEREQUAL
49149: AND
49150: IFFALSE 49162
// result := weapon ;
49152: LD_ADDR_VAR 0 3
49156: PUSH
49157: LD_VAR 0 18
49161: ST_TO_ADDR
// end ; end ;
49162: LD_VAR 0 3
49166: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49167: LD_INT 0
49169: PPUSH
49170: PPUSH
// result := true ;
49171: LD_ADDR_VAR 0 3
49175: PUSH
49176: LD_INT 1
49178: ST_TO_ADDR
// if array1 = array2 then
49179: LD_VAR 0 1
49183: PUSH
49184: LD_VAR 0 2
49188: EQUAL
49189: IFFALSE 49249
// begin for i = 1 to array1 do
49191: LD_ADDR_VAR 0 4
49195: PUSH
49196: DOUBLE
49197: LD_INT 1
49199: DEC
49200: ST_TO_ADDR
49201: LD_VAR 0 1
49205: PUSH
49206: FOR_TO
49207: IFFALSE 49245
// if array1 [ i ] <> array2 [ i ] then
49209: LD_VAR 0 1
49213: PUSH
49214: LD_VAR 0 4
49218: ARRAY
49219: PUSH
49220: LD_VAR 0 2
49224: PUSH
49225: LD_VAR 0 4
49229: ARRAY
49230: NONEQUAL
49231: IFFALSE 49243
// begin result := false ;
49233: LD_ADDR_VAR 0 3
49237: PUSH
49238: LD_INT 0
49240: ST_TO_ADDR
// break ;
49241: GO 49245
// end ;
49243: GO 49206
49245: POP
49246: POP
// end else
49247: GO 49257
// result := false ;
49249: LD_ADDR_VAR 0 3
49253: PUSH
49254: LD_INT 0
49256: ST_TO_ADDR
// end ;
49257: LD_VAR 0 3
49261: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49262: LD_INT 0
49264: PPUSH
49265: PPUSH
// if not array1 or not array2 then
49266: LD_VAR 0 1
49270: NOT
49271: PUSH
49272: LD_VAR 0 2
49276: NOT
49277: OR
49278: IFFALSE 49282
// exit ;
49280: GO 49346
// result := true ;
49282: LD_ADDR_VAR 0 3
49286: PUSH
49287: LD_INT 1
49289: ST_TO_ADDR
// for i = 1 to array1 do
49290: LD_ADDR_VAR 0 4
49294: PUSH
49295: DOUBLE
49296: LD_INT 1
49298: DEC
49299: ST_TO_ADDR
49300: LD_VAR 0 1
49304: PUSH
49305: FOR_TO
49306: IFFALSE 49344
// if array1 [ i ] <> array2 [ i ] then
49308: LD_VAR 0 1
49312: PUSH
49313: LD_VAR 0 4
49317: ARRAY
49318: PUSH
49319: LD_VAR 0 2
49323: PUSH
49324: LD_VAR 0 4
49328: ARRAY
49329: NONEQUAL
49330: IFFALSE 49342
// begin result := false ;
49332: LD_ADDR_VAR 0 3
49336: PUSH
49337: LD_INT 0
49339: ST_TO_ADDR
// break ;
49340: GO 49344
// end ;
49342: GO 49305
49344: POP
49345: POP
// end ;
49346: LD_VAR 0 3
49350: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49351: LD_INT 0
49353: PPUSH
49354: PPUSH
49355: PPUSH
// pom := GetBase ( fac ) ;
49356: LD_ADDR_VAR 0 5
49360: PUSH
49361: LD_VAR 0 1
49365: PPUSH
49366: CALL_OW 274
49370: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49371: LD_ADDR_VAR 0 4
49375: PUSH
49376: LD_VAR 0 2
49380: PUSH
49381: LD_INT 1
49383: ARRAY
49384: PPUSH
49385: LD_VAR 0 2
49389: PUSH
49390: LD_INT 2
49392: ARRAY
49393: PPUSH
49394: LD_VAR 0 2
49398: PUSH
49399: LD_INT 3
49401: ARRAY
49402: PPUSH
49403: LD_VAR 0 2
49407: PUSH
49408: LD_INT 4
49410: ARRAY
49411: PPUSH
49412: CALL_OW 449
49416: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49417: LD_ADDR_VAR 0 3
49421: PUSH
49422: LD_VAR 0 5
49426: PPUSH
49427: LD_INT 1
49429: PPUSH
49430: CALL_OW 275
49434: PUSH
49435: LD_VAR 0 4
49439: PUSH
49440: LD_INT 1
49442: ARRAY
49443: GREATEREQUAL
49444: PUSH
49445: LD_VAR 0 5
49449: PPUSH
49450: LD_INT 2
49452: PPUSH
49453: CALL_OW 275
49457: PUSH
49458: LD_VAR 0 4
49462: PUSH
49463: LD_INT 2
49465: ARRAY
49466: GREATEREQUAL
49467: AND
49468: PUSH
49469: LD_VAR 0 5
49473: PPUSH
49474: LD_INT 3
49476: PPUSH
49477: CALL_OW 275
49481: PUSH
49482: LD_VAR 0 4
49486: PUSH
49487: LD_INT 3
49489: ARRAY
49490: GREATEREQUAL
49491: AND
49492: ST_TO_ADDR
// end ;
49493: LD_VAR 0 3
49497: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49498: LD_INT 0
49500: PPUSH
49501: PPUSH
49502: PPUSH
49503: PPUSH
// pom := GetBase ( building ) ;
49504: LD_ADDR_VAR 0 3
49508: PUSH
49509: LD_VAR 0 1
49513: PPUSH
49514: CALL_OW 274
49518: ST_TO_ADDR
// if not pom then
49519: LD_VAR 0 3
49523: NOT
49524: IFFALSE 49528
// exit ;
49526: GO 49698
// btype := GetBType ( building ) ;
49528: LD_ADDR_VAR 0 5
49532: PUSH
49533: LD_VAR 0 1
49537: PPUSH
49538: CALL_OW 266
49542: ST_TO_ADDR
// if btype = b_armoury then
49543: LD_VAR 0 5
49547: PUSH
49548: LD_INT 4
49550: EQUAL
49551: IFFALSE 49561
// btype := b_barracks ;
49553: LD_ADDR_VAR 0 5
49557: PUSH
49558: LD_INT 5
49560: ST_TO_ADDR
// if btype = b_depot then
49561: LD_VAR 0 5
49565: PUSH
49566: LD_INT 0
49568: EQUAL
49569: IFFALSE 49579
// btype := b_warehouse ;
49571: LD_ADDR_VAR 0 5
49575: PUSH
49576: LD_INT 1
49578: ST_TO_ADDR
// if btype = b_workshop then
49579: LD_VAR 0 5
49583: PUSH
49584: LD_INT 2
49586: EQUAL
49587: IFFALSE 49597
// btype := b_factory ;
49589: LD_ADDR_VAR 0 5
49593: PUSH
49594: LD_INT 3
49596: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49597: LD_ADDR_VAR 0 4
49601: PUSH
49602: LD_VAR 0 5
49606: PPUSH
49607: LD_VAR 0 1
49611: PPUSH
49612: CALL_OW 248
49616: PPUSH
49617: CALL_OW 450
49621: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49622: LD_ADDR_VAR 0 2
49626: PUSH
49627: LD_VAR 0 3
49631: PPUSH
49632: LD_INT 1
49634: PPUSH
49635: CALL_OW 275
49639: PUSH
49640: LD_VAR 0 4
49644: PUSH
49645: LD_INT 1
49647: ARRAY
49648: GREATEREQUAL
49649: PUSH
49650: LD_VAR 0 3
49654: PPUSH
49655: LD_INT 2
49657: PPUSH
49658: CALL_OW 275
49662: PUSH
49663: LD_VAR 0 4
49667: PUSH
49668: LD_INT 2
49670: ARRAY
49671: GREATEREQUAL
49672: AND
49673: PUSH
49674: LD_VAR 0 3
49678: PPUSH
49679: LD_INT 3
49681: PPUSH
49682: CALL_OW 275
49686: PUSH
49687: LD_VAR 0 4
49691: PUSH
49692: LD_INT 3
49694: ARRAY
49695: GREATEREQUAL
49696: AND
49697: ST_TO_ADDR
// end ;
49698: LD_VAR 0 2
49702: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49703: LD_INT 0
49705: PPUSH
49706: PPUSH
49707: PPUSH
// pom := GetBase ( building ) ;
49708: LD_ADDR_VAR 0 4
49712: PUSH
49713: LD_VAR 0 1
49717: PPUSH
49718: CALL_OW 274
49722: ST_TO_ADDR
// if not pom then
49723: LD_VAR 0 4
49727: NOT
49728: IFFALSE 49732
// exit ;
49730: GO 49833
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49732: LD_ADDR_VAR 0 5
49736: PUSH
49737: LD_VAR 0 2
49741: PPUSH
49742: LD_VAR 0 1
49746: PPUSH
49747: CALL_OW 248
49751: PPUSH
49752: CALL_OW 450
49756: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49757: LD_ADDR_VAR 0 3
49761: PUSH
49762: LD_VAR 0 4
49766: PPUSH
49767: LD_INT 1
49769: PPUSH
49770: CALL_OW 275
49774: PUSH
49775: LD_VAR 0 5
49779: PUSH
49780: LD_INT 1
49782: ARRAY
49783: GREATEREQUAL
49784: PUSH
49785: LD_VAR 0 4
49789: PPUSH
49790: LD_INT 2
49792: PPUSH
49793: CALL_OW 275
49797: PUSH
49798: LD_VAR 0 5
49802: PUSH
49803: LD_INT 2
49805: ARRAY
49806: GREATEREQUAL
49807: AND
49808: PUSH
49809: LD_VAR 0 4
49813: PPUSH
49814: LD_INT 3
49816: PPUSH
49817: CALL_OW 275
49821: PUSH
49822: LD_VAR 0 5
49826: PUSH
49827: LD_INT 3
49829: ARRAY
49830: GREATEREQUAL
49831: AND
49832: ST_TO_ADDR
// end ;
49833: LD_VAR 0 3
49837: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49838: LD_INT 0
49840: PPUSH
49841: PPUSH
49842: PPUSH
49843: PPUSH
49844: PPUSH
49845: PPUSH
49846: PPUSH
49847: PPUSH
49848: PPUSH
49849: PPUSH
49850: PPUSH
// result := false ;
49851: LD_ADDR_VAR 0 8
49855: PUSH
49856: LD_INT 0
49858: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49859: LD_VAR 0 5
49863: NOT
49864: PUSH
49865: LD_VAR 0 1
49869: NOT
49870: OR
49871: PUSH
49872: LD_VAR 0 2
49876: NOT
49877: OR
49878: PUSH
49879: LD_VAR 0 3
49883: NOT
49884: OR
49885: IFFALSE 49889
// exit ;
49887: GO 50703
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49889: LD_ADDR_VAR 0 14
49893: PUSH
49894: LD_VAR 0 1
49898: PPUSH
49899: LD_VAR 0 2
49903: PPUSH
49904: LD_VAR 0 3
49908: PPUSH
49909: LD_VAR 0 4
49913: PPUSH
49914: LD_VAR 0 5
49918: PUSH
49919: LD_INT 1
49921: ARRAY
49922: PPUSH
49923: CALL_OW 248
49927: PPUSH
49928: LD_INT 0
49930: PPUSH
49931: CALL 51956 0 6
49935: ST_TO_ADDR
// if not hexes then
49936: LD_VAR 0 14
49940: NOT
49941: IFFALSE 49945
// exit ;
49943: GO 50703
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49945: LD_ADDR_VAR 0 17
49949: PUSH
49950: LD_VAR 0 5
49954: PPUSH
49955: LD_INT 22
49957: PUSH
49958: LD_VAR 0 13
49962: PPUSH
49963: CALL_OW 255
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: LD_INT 30
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 30
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: LIST
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PPUSH
50004: CALL_OW 72
50008: ST_TO_ADDR
// for i = 1 to hexes do
50009: LD_ADDR_VAR 0 9
50013: PUSH
50014: DOUBLE
50015: LD_INT 1
50017: DEC
50018: ST_TO_ADDR
50019: LD_VAR 0 14
50023: PUSH
50024: FOR_TO
50025: IFFALSE 50701
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50027: LD_ADDR_VAR 0 13
50031: PUSH
50032: LD_VAR 0 14
50036: PUSH
50037: LD_VAR 0 9
50041: ARRAY
50042: PUSH
50043: LD_INT 1
50045: ARRAY
50046: PPUSH
50047: LD_VAR 0 14
50051: PUSH
50052: LD_VAR 0 9
50056: ARRAY
50057: PUSH
50058: LD_INT 2
50060: ARRAY
50061: PPUSH
50062: CALL_OW 428
50066: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50067: LD_VAR 0 14
50071: PUSH
50072: LD_VAR 0 9
50076: ARRAY
50077: PUSH
50078: LD_INT 1
50080: ARRAY
50081: PPUSH
50082: LD_VAR 0 14
50086: PUSH
50087: LD_VAR 0 9
50091: ARRAY
50092: PUSH
50093: LD_INT 2
50095: ARRAY
50096: PPUSH
50097: CALL_OW 351
50101: PUSH
50102: LD_VAR 0 14
50106: PUSH
50107: LD_VAR 0 9
50111: ARRAY
50112: PUSH
50113: LD_INT 1
50115: ARRAY
50116: PPUSH
50117: LD_VAR 0 14
50121: PUSH
50122: LD_VAR 0 9
50126: ARRAY
50127: PUSH
50128: LD_INT 2
50130: ARRAY
50131: PPUSH
50132: CALL_OW 488
50136: NOT
50137: OR
50138: PUSH
50139: LD_VAR 0 13
50143: PPUSH
50144: CALL_OW 247
50148: PUSH
50149: LD_INT 3
50151: EQUAL
50152: OR
50153: IFFALSE 50159
// exit ;
50155: POP
50156: POP
50157: GO 50703
// if not tmp then
50159: LD_VAR 0 13
50163: NOT
50164: IFFALSE 50168
// continue ;
50166: GO 50024
// result := true ;
50168: LD_ADDR_VAR 0 8
50172: PUSH
50173: LD_INT 1
50175: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50176: LD_VAR 0 6
50180: PUSH
50181: LD_VAR 0 13
50185: PPUSH
50186: CALL_OW 247
50190: PUSH
50191: LD_INT 2
50193: EQUAL
50194: AND
50195: PUSH
50196: LD_VAR 0 13
50200: PPUSH
50201: CALL_OW 263
50205: PUSH
50206: LD_INT 1
50208: EQUAL
50209: AND
50210: IFFALSE 50374
// begin if IsDrivenBy ( tmp ) then
50212: LD_VAR 0 13
50216: PPUSH
50217: CALL_OW 311
50221: IFFALSE 50225
// continue ;
50223: GO 50024
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50225: LD_VAR 0 6
50229: PPUSH
50230: LD_INT 3
50232: PUSH
50233: LD_INT 60
50235: PUSH
50236: EMPTY
50237: LIST
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 3
50245: PUSH
50246: LD_INT 55
50248: PUSH
50249: EMPTY
50250: LIST
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PPUSH
50260: CALL_OW 72
50264: IFFALSE 50372
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50266: LD_ADDR_VAR 0 18
50270: PUSH
50271: LD_VAR 0 6
50275: PPUSH
50276: LD_INT 3
50278: PUSH
50279: LD_INT 60
50281: PUSH
50282: EMPTY
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 3
50291: PUSH
50292: LD_INT 55
50294: PUSH
50295: EMPTY
50296: LIST
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PPUSH
50306: CALL_OW 72
50310: PUSH
50311: LD_INT 1
50313: ARRAY
50314: ST_TO_ADDR
// if IsInUnit ( driver ) then
50315: LD_VAR 0 18
50319: PPUSH
50320: CALL_OW 310
50324: IFFALSE 50335
// ComExit ( driver ) ;
50326: LD_VAR 0 18
50330: PPUSH
50331: CALL 75737 0 1
// AddComEnterUnit ( driver , tmp ) ;
50335: LD_VAR 0 18
50339: PPUSH
50340: LD_VAR 0 13
50344: PPUSH
50345: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50349: LD_VAR 0 18
50353: PPUSH
50354: LD_VAR 0 7
50358: PPUSH
50359: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50363: LD_VAR 0 18
50367: PPUSH
50368: CALL_OW 181
// end ; continue ;
50372: GO 50024
// end ; if not cleaners or not tmp in cleaners then
50374: LD_VAR 0 6
50378: NOT
50379: PUSH
50380: LD_VAR 0 13
50384: PUSH
50385: LD_VAR 0 6
50389: IN
50390: NOT
50391: OR
50392: IFFALSE 50699
// begin if dep then
50394: LD_VAR 0 17
50398: IFFALSE 50534
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50400: LD_ADDR_VAR 0 16
50404: PUSH
50405: LD_VAR 0 17
50409: PUSH
50410: LD_INT 1
50412: ARRAY
50413: PPUSH
50414: CALL_OW 250
50418: PPUSH
50419: LD_VAR 0 17
50423: PUSH
50424: LD_INT 1
50426: ARRAY
50427: PPUSH
50428: CALL_OW 254
50432: PPUSH
50433: LD_INT 5
50435: PPUSH
50436: CALL_OW 272
50440: PUSH
50441: LD_VAR 0 17
50445: PUSH
50446: LD_INT 1
50448: ARRAY
50449: PPUSH
50450: CALL_OW 251
50454: PPUSH
50455: LD_VAR 0 17
50459: PUSH
50460: LD_INT 1
50462: ARRAY
50463: PPUSH
50464: CALL_OW 254
50468: PPUSH
50469: LD_INT 5
50471: PPUSH
50472: CALL_OW 273
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50481: LD_VAR 0 16
50485: PUSH
50486: LD_INT 1
50488: ARRAY
50489: PPUSH
50490: LD_VAR 0 16
50494: PUSH
50495: LD_INT 2
50497: ARRAY
50498: PPUSH
50499: CALL_OW 488
50503: IFFALSE 50534
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50505: LD_VAR 0 13
50509: PPUSH
50510: LD_VAR 0 16
50514: PUSH
50515: LD_INT 1
50517: ARRAY
50518: PPUSH
50519: LD_VAR 0 16
50523: PUSH
50524: LD_INT 2
50526: ARRAY
50527: PPUSH
50528: CALL_OW 111
// continue ;
50532: GO 50024
// end ; end ; r := GetDir ( tmp ) ;
50534: LD_ADDR_VAR 0 15
50538: PUSH
50539: LD_VAR 0 13
50543: PPUSH
50544: CALL_OW 254
50548: ST_TO_ADDR
// if r = 5 then
50549: LD_VAR 0 15
50553: PUSH
50554: LD_INT 5
50556: EQUAL
50557: IFFALSE 50567
// r := 0 ;
50559: LD_ADDR_VAR 0 15
50563: PUSH
50564: LD_INT 0
50566: ST_TO_ADDR
// for j = r to 5 do
50567: LD_ADDR_VAR 0 10
50571: PUSH
50572: DOUBLE
50573: LD_VAR 0 15
50577: DEC
50578: ST_TO_ADDR
50579: LD_INT 5
50581: PUSH
50582: FOR_TO
50583: IFFALSE 50697
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50585: LD_ADDR_VAR 0 11
50589: PUSH
50590: LD_VAR 0 13
50594: PPUSH
50595: CALL_OW 250
50599: PPUSH
50600: LD_VAR 0 10
50604: PPUSH
50605: LD_INT 2
50607: PPUSH
50608: CALL_OW 272
50612: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50613: LD_ADDR_VAR 0 12
50617: PUSH
50618: LD_VAR 0 13
50622: PPUSH
50623: CALL_OW 251
50627: PPUSH
50628: LD_VAR 0 10
50632: PPUSH
50633: LD_INT 2
50635: PPUSH
50636: CALL_OW 273
50640: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50641: LD_VAR 0 11
50645: PPUSH
50646: LD_VAR 0 12
50650: PPUSH
50651: CALL_OW 488
50655: PUSH
50656: LD_VAR 0 11
50660: PPUSH
50661: LD_VAR 0 12
50665: PPUSH
50666: CALL_OW 428
50670: NOT
50671: AND
50672: IFFALSE 50695
// begin ComMoveXY ( tmp , _x , _y ) ;
50674: LD_VAR 0 13
50678: PPUSH
50679: LD_VAR 0 11
50683: PPUSH
50684: LD_VAR 0 12
50688: PPUSH
50689: CALL_OW 111
// break ;
50693: GO 50697
// end ; end ;
50695: GO 50582
50697: POP
50698: POP
// end ; end ;
50699: GO 50024
50701: POP
50702: POP
// end ;
50703: LD_VAR 0 8
50707: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50708: LD_INT 0
50710: PPUSH
// result := true ;
50711: LD_ADDR_VAR 0 3
50715: PUSH
50716: LD_INT 1
50718: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50719: LD_VAR 0 2
50723: PUSH
50724: LD_INT 24
50726: DOUBLE
50727: EQUAL
50728: IFTRUE 50738
50730: LD_INT 33
50732: DOUBLE
50733: EQUAL
50734: IFTRUE 50738
50736: GO 50763
50738: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50739: LD_ADDR_VAR 0 3
50743: PUSH
50744: LD_INT 32
50746: PPUSH
50747: LD_VAR 0 1
50751: PPUSH
50752: CALL_OW 321
50756: PUSH
50757: LD_INT 2
50759: EQUAL
50760: ST_TO_ADDR
50761: GO 51079
50763: LD_INT 20
50765: DOUBLE
50766: EQUAL
50767: IFTRUE 50771
50769: GO 50796
50771: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50772: LD_ADDR_VAR 0 3
50776: PUSH
50777: LD_INT 6
50779: PPUSH
50780: LD_VAR 0 1
50784: PPUSH
50785: CALL_OW 321
50789: PUSH
50790: LD_INT 2
50792: EQUAL
50793: ST_TO_ADDR
50794: GO 51079
50796: LD_INT 22
50798: DOUBLE
50799: EQUAL
50800: IFTRUE 50810
50802: LD_INT 36
50804: DOUBLE
50805: EQUAL
50806: IFTRUE 50810
50808: GO 50835
50810: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50811: LD_ADDR_VAR 0 3
50815: PUSH
50816: LD_INT 15
50818: PPUSH
50819: LD_VAR 0 1
50823: PPUSH
50824: CALL_OW 321
50828: PUSH
50829: LD_INT 2
50831: EQUAL
50832: ST_TO_ADDR
50833: GO 51079
50835: LD_INT 30
50837: DOUBLE
50838: EQUAL
50839: IFTRUE 50843
50841: GO 50868
50843: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50844: LD_ADDR_VAR 0 3
50848: PUSH
50849: LD_INT 20
50851: PPUSH
50852: LD_VAR 0 1
50856: PPUSH
50857: CALL_OW 321
50861: PUSH
50862: LD_INT 2
50864: EQUAL
50865: ST_TO_ADDR
50866: GO 51079
50868: LD_INT 28
50870: DOUBLE
50871: EQUAL
50872: IFTRUE 50882
50874: LD_INT 21
50876: DOUBLE
50877: EQUAL
50878: IFTRUE 50882
50880: GO 50907
50882: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50883: LD_ADDR_VAR 0 3
50887: PUSH
50888: LD_INT 21
50890: PPUSH
50891: LD_VAR 0 1
50895: PPUSH
50896: CALL_OW 321
50900: PUSH
50901: LD_INT 2
50903: EQUAL
50904: ST_TO_ADDR
50905: GO 51079
50907: LD_INT 16
50909: DOUBLE
50910: EQUAL
50911: IFTRUE 50915
50913: GO 50940
50915: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50916: LD_ADDR_VAR 0 3
50920: PUSH
50921: LD_INT 84
50923: PPUSH
50924: LD_VAR 0 1
50928: PPUSH
50929: CALL_OW 321
50933: PUSH
50934: LD_INT 2
50936: EQUAL
50937: ST_TO_ADDR
50938: GO 51079
50940: LD_INT 19
50942: DOUBLE
50943: EQUAL
50944: IFTRUE 50954
50946: LD_INT 23
50948: DOUBLE
50949: EQUAL
50950: IFTRUE 50954
50952: GO 50979
50954: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50955: LD_ADDR_VAR 0 3
50959: PUSH
50960: LD_INT 83
50962: PPUSH
50963: LD_VAR 0 1
50967: PPUSH
50968: CALL_OW 321
50972: PUSH
50973: LD_INT 2
50975: EQUAL
50976: ST_TO_ADDR
50977: GO 51079
50979: LD_INT 17
50981: DOUBLE
50982: EQUAL
50983: IFTRUE 50987
50985: GO 51012
50987: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50988: LD_ADDR_VAR 0 3
50992: PUSH
50993: LD_INT 39
50995: PPUSH
50996: LD_VAR 0 1
51000: PPUSH
51001: CALL_OW 321
51005: PUSH
51006: LD_INT 2
51008: EQUAL
51009: ST_TO_ADDR
51010: GO 51079
51012: LD_INT 18
51014: DOUBLE
51015: EQUAL
51016: IFTRUE 51020
51018: GO 51045
51020: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51021: LD_ADDR_VAR 0 3
51025: PUSH
51026: LD_INT 40
51028: PPUSH
51029: LD_VAR 0 1
51033: PPUSH
51034: CALL_OW 321
51038: PUSH
51039: LD_INT 2
51041: EQUAL
51042: ST_TO_ADDR
51043: GO 51079
51045: LD_INT 27
51047: DOUBLE
51048: EQUAL
51049: IFTRUE 51053
51051: GO 51078
51053: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51054: LD_ADDR_VAR 0 3
51058: PUSH
51059: LD_INT 35
51061: PPUSH
51062: LD_VAR 0 1
51066: PPUSH
51067: CALL_OW 321
51071: PUSH
51072: LD_INT 2
51074: EQUAL
51075: ST_TO_ADDR
51076: GO 51079
51078: POP
// end ;
51079: LD_VAR 0 3
51083: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51084: LD_INT 0
51086: PPUSH
51087: PPUSH
51088: PPUSH
51089: PPUSH
51090: PPUSH
51091: PPUSH
51092: PPUSH
51093: PPUSH
51094: PPUSH
51095: PPUSH
51096: PPUSH
// result := false ;
51097: LD_ADDR_VAR 0 6
51101: PUSH
51102: LD_INT 0
51104: ST_TO_ADDR
// if btype = b_depot then
51105: LD_VAR 0 2
51109: PUSH
51110: LD_INT 0
51112: EQUAL
51113: IFFALSE 51125
// begin result := true ;
51115: LD_ADDR_VAR 0 6
51119: PUSH
51120: LD_INT 1
51122: ST_TO_ADDR
// exit ;
51123: GO 51951
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51125: LD_VAR 0 1
51129: NOT
51130: PUSH
51131: LD_VAR 0 1
51135: PPUSH
51136: CALL_OW 266
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: IN
51151: NOT
51152: OR
51153: PUSH
51154: LD_VAR 0 2
51158: NOT
51159: OR
51160: PUSH
51161: LD_VAR 0 5
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: LD_INT 3
51177: PUSH
51178: LD_INT 4
51180: PUSH
51181: LD_INT 5
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: IN
51192: NOT
51193: OR
51194: PUSH
51195: LD_VAR 0 3
51199: PPUSH
51200: LD_VAR 0 4
51204: PPUSH
51205: CALL_OW 488
51209: NOT
51210: OR
51211: IFFALSE 51215
// exit ;
51213: GO 51951
// side := GetSide ( depot ) ;
51215: LD_ADDR_VAR 0 9
51219: PUSH
51220: LD_VAR 0 1
51224: PPUSH
51225: CALL_OW 255
51229: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51230: LD_VAR 0 9
51234: PPUSH
51235: LD_VAR 0 2
51239: PPUSH
51240: CALL 50708 0 2
51244: NOT
51245: IFFALSE 51249
// exit ;
51247: GO 51951
// pom := GetBase ( depot ) ;
51249: LD_ADDR_VAR 0 10
51253: PUSH
51254: LD_VAR 0 1
51258: PPUSH
51259: CALL_OW 274
51263: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51264: LD_ADDR_VAR 0 11
51268: PUSH
51269: LD_VAR 0 2
51273: PPUSH
51274: LD_VAR 0 1
51278: PPUSH
51279: CALL_OW 248
51283: PPUSH
51284: CALL_OW 450
51288: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51289: LD_VAR 0 10
51293: PPUSH
51294: LD_INT 1
51296: PPUSH
51297: CALL_OW 275
51301: PUSH
51302: LD_VAR 0 11
51306: PUSH
51307: LD_INT 1
51309: ARRAY
51310: GREATEREQUAL
51311: PUSH
51312: LD_VAR 0 10
51316: PPUSH
51317: LD_INT 2
51319: PPUSH
51320: CALL_OW 275
51324: PUSH
51325: LD_VAR 0 11
51329: PUSH
51330: LD_INT 2
51332: ARRAY
51333: GREATEREQUAL
51334: AND
51335: PUSH
51336: LD_VAR 0 10
51340: PPUSH
51341: LD_INT 3
51343: PPUSH
51344: CALL_OW 275
51348: PUSH
51349: LD_VAR 0 11
51353: PUSH
51354: LD_INT 3
51356: ARRAY
51357: GREATEREQUAL
51358: AND
51359: NOT
51360: IFFALSE 51364
// exit ;
51362: GO 51951
// if GetBType ( depot ) = b_depot then
51364: LD_VAR 0 1
51368: PPUSH
51369: CALL_OW 266
51373: PUSH
51374: LD_INT 0
51376: EQUAL
51377: IFFALSE 51389
// dist := 28 else
51379: LD_ADDR_VAR 0 14
51383: PUSH
51384: LD_INT 28
51386: ST_TO_ADDR
51387: GO 51397
// dist := 36 ;
51389: LD_ADDR_VAR 0 14
51393: PUSH
51394: LD_INT 36
51396: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51397: LD_VAR 0 1
51401: PPUSH
51402: LD_VAR 0 3
51406: PPUSH
51407: LD_VAR 0 4
51411: PPUSH
51412: CALL_OW 297
51416: PUSH
51417: LD_VAR 0 14
51421: GREATER
51422: IFFALSE 51426
// exit ;
51424: GO 51951
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51426: LD_ADDR_VAR 0 12
51430: PUSH
51431: LD_VAR 0 2
51435: PPUSH
51436: LD_VAR 0 3
51440: PPUSH
51441: LD_VAR 0 4
51445: PPUSH
51446: LD_VAR 0 5
51450: PPUSH
51451: LD_VAR 0 1
51455: PPUSH
51456: CALL_OW 248
51460: PPUSH
51461: LD_INT 0
51463: PPUSH
51464: CALL 51956 0 6
51468: ST_TO_ADDR
// if not hexes then
51469: LD_VAR 0 12
51473: NOT
51474: IFFALSE 51478
// exit ;
51476: GO 51951
// hex := GetHexInfo ( x , y ) ;
51478: LD_ADDR_VAR 0 15
51482: PUSH
51483: LD_VAR 0 3
51487: PPUSH
51488: LD_VAR 0 4
51492: PPUSH
51493: CALL_OW 546
51497: ST_TO_ADDR
// if hex [ 1 ] then
51498: LD_VAR 0 15
51502: PUSH
51503: LD_INT 1
51505: ARRAY
51506: IFFALSE 51510
// exit ;
51508: GO 51951
// height := hex [ 2 ] ;
51510: LD_ADDR_VAR 0 13
51514: PUSH
51515: LD_VAR 0 15
51519: PUSH
51520: LD_INT 2
51522: ARRAY
51523: ST_TO_ADDR
// for i = 1 to hexes do
51524: LD_ADDR_VAR 0 7
51528: PUSH
51529: DOUBLE
51530: LD_INT 1
51532: DEC
51533: ST_TO_ADDR
51534: LD_VAR 0 12
51538: PUSH
51539: FOR_TO
51540: IFFALSE 51870
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51542: LD_VAR 0 12
51546: PUSH
51547: LD_VAR 0 7
51551: ARRAY
51552: PUSH
51553: LD_INT 1
51555: ARRAY
51556: PPUSH
51557: LD_VAR 0 12
51561: PUSH
51562: LD_VAR 0 7
51566: ARRAY
51567: PUSH
51568: LD_INT 2
51570: ARRAY
51571: PPUSH
51572: CALL_OW 488
51576: NOT
51577: PUSH
51578: LD_VAR 0 12
51582: PUSH
51583: LD_VAR 0 7
51587: ARRAY
51588: PUSH
51589: LD_INT 1
51591: ARRAY
51592: PPUSH
51593: LD_VAR 0 12
51597: PUSH
51598: LD_VAR 0 7
51602: ARRAY
51603: PUSH
51604: LD_INT 2
51606: ARRAY
51607: PPUSH
51608: CALL_OW 428
51612: PUSH
51613: LD_INT 0
51615: GREATER
51616: OR
51617: PUSH
51618: LD_VAR 0 12
51622: PUSH
51623: LD_VAR 0 7
51627: ARRAY
51628: PUSH
51629: LD_INT 1
51631: ARRAY
51632: PPUSH
51633: LD_VAR 0 12
51637: PUSH
51638: LD_VAR 0 7
51642: ARRAY
51643: PUSH
51644: LD_INT 2
51646: ARRAY
51647: PPUSH
51648: CALL_OW 351
51652: OR
51653: IFFALSE 51659
// exit ;
51655: POP
51656: POP
51657: GO 51951
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51659: LD_ADDR_VAR 0 8
51663: PUSH
51664: LD_VAR 0 12
51668: PUSH
51669: LD_VAR 0 7
51673: ARRAY
51674: PUSH
51675: LD_INT 1
51677: ARRAY
51678: PPUSH
51679: LD_VAR 0 12
51683: PUSH
51684: LD_VAR 0 7
51688: ARRAY
51689: PUSH
51690: LD_INT 2
51692: ARRAY
51693: PPUSH
51694: CALL_OW 546
51698: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51699: LD_VAR 0 8
51703: PUSH
51704: LD_INT 1
51706: ARRAY
51707: PUSH
51708: LD_VAR 0 8
51712: PUSH
51713: LD_INT 2
51715: ARRAY
51716: PUSH
51717: LD_VAR 0 13
51721: PUSH
51722: LD_INT 2
51724: PLUS
51725: GREATER
51726: OR
51727: PUSH
51728: LD_VAR 0 8
51732: PUSH
51733: LD_INT 2
51735: ARRAY
51736: PUSH
51737: LD_VAR 0 13
51741: PUSH
51742: LD_INT 2
51744: MINUS
51745: LESS
51746: OR
51747: PUSH
51748: LD_VAR 0 8
51752: PUSH
51753: LD_INT 3
51755: ARRAY
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 8
51762: PUSH
51763: LD_INT 9
51765: PUSH
51766: LD_INT 10
51768: PUSH
51769: LD_INT 11
51771: PUSH
51772: LD_INT 12
51774: PUSH
51775: LD_INT 13
51777: PUSH
51778: LD_INT 16
51780: PUSH
51781: LD_INT 17
51783: PUSH
51784: LD_INT 18
51786: PUSH
51787: LD_INT 19
51789: PUSH
51790: LD_INT 20
51792: PUSH
51793: LD_INT 21
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: IN
51811: NOT
51812: OR
51813: PUSH
51814: LD_VAR 0 8
51818: PUSH
51819: LD_INT 5
51821: ARRAY
51822: NOT
51823: OR
51824: PUSH
51825: LD_VAR 0 8
51829: PUSH
51830: LD_INT 6
51832: ARRAY
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: LD_INT 7
51842: PUSH
51843: LD_INT 9
51845: PUSH
51846: LD_INT 10
51848: PUSH
51849: LD_INT 11
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: IN
51860: NOT
51861: OR
51862: IFFALSE 51868
// exit ;
51864: POP
51865: POP
51866: GO 51951
// end ;
51868: GO 51539
51870: POP
51871: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51872: LD_VAR 0 9
51876: PPUSH
51877: LD_VAR 0 3
51881: PPUSH
51882: LD_VAR 0 4
51886: PPUSH
51887: LD_INT 20
51889: PPUSH
51890: CALL 43874 0 4
51894: PUSH
51895: LD_INT 4
51897: ARRAY
51898: IFFALSE 51902
// exit ;
51900: GO 51951
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51902: LD_VAR 0 2
51906: PUSH
51907: LD_INT 29
51909: PUSH
51910: LD_INT 30
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: IN
51917: PUSH
51918: LD_VAR 0 3
51922: PPUSH
51923: LD_VAR 0 4
51927: PPUSH
51928: LD_VAR 0 9
51932: PPUSH
51933: CALL_OW 440
51937: NOT
51938: AND
51939: IFFALSE 51943
// exit ;
51941: GO 51951
// result := true ;
51943: LD_ADDR_VAR 0 6
51947: PUSH
51948: LD_INT 1
51950: ST_TO_ADDR
// end ;
51951: LD_VAR 0 6
51955: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51956: LD_INT 0
51958: PPUSH
51959: PPUSH
51960: PPUSH
51961: PPUSH
51962: PPUSH
51963: PPUSH
51964: PPUSH
51965: PPUSH
51966: PPUSH
51967: PPUSH
51968: PPUSH
51969: PPUSH
51970: PPUSH
51971: PPUSH
51972: PPUSH
51973: PPUSH
51974: PPUSH
51975: PPUSH
51976: PPUSH
51977: PPUSH
51978: PPUSH
51979: PPUSH
51980: PPUSH
51981: PPUSH
51982: PPUSH
51983: PPUSH
51984: PPUSH
51985: PPUSH
51986: PPUSH
51987: PPUSH
51988: PPUSH
51989: PPUSH
51990: PPUSH
51991: PPUSH
51992: PPUSH
51993: PPUSH
51994: PPUSH
51995: PPUSH
51996: PPUSH
51997: PPUSH
51998: PPUSH
51999: PPUSH
52000: PPUSH
52001: PPUSH
52002: PPUSH
52003: PPUSH
52004: PPUSH
52005: PPUSH
52006: PPUSH
52007: PPUSH
52008: PPUSH
52009: PPUSH
52010: PPUSH
52011: PPUSH
52012: PPUSH
52013: PPUSH
52014: PPUSH
52015: PPUSH
// result = [ ] ;
52016: LD_ADDR_VAR 0 7
52020: PUSH
52021: EMPTY
52022: ST_TO_ADDR
// temp_list = [ ] ;
52023: LD_ADDR_VAR 0 9
52027: PUSH
52028: EMPTY
52029: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52030: LD_VAR 0 4
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: LD_INT 3
52046: PUSH
52047: LD_INT 4
52049: PUSH
52050: LD_INT 5
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: IN
52061: NOT
52062: PUSH
52063: LD_VAR 0 1
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: IN
52078: PUSH
52079: LD_VAR 0 5
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: LIST
52097: IN
52098: NOT
52099: AND
52100: OR
52101: IFFALSE 52105
// exit ;
52103: GO 70496
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52105: LD_VAR 0 1
52109: PUSH
52110: LD_INT 6
52112: PUSH
52113: LD_INT 7
52115: PUSH
52116: LD_INT 8
52118: PUSH
52119: LD_INT 13
52121: PUSH
52122: LD_INT 12
52124: PUSH
52125: LD_INT 15
52127: PUSH
52128: LD_INT 11
52130: PUSH
52131: LD_INT 14
52133: PUSH
52134: LD_INT 10
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: IN
52148: IFFALSE 52158
// btype = b_lab ;
52150: LD_ADDR_VAR 0 1
52154: PUSH
52155: LD_INT 6
52157: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52158: LD_VAR 0 6
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: LIST
52176: IN
52177: NOT
52178: PUSH
52179: LD_VAR 0 1
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: LD_INT 6
52198: PUSH
52199: LD_INT 36
52201: PUSH
52202: LD_INT 4
52204: PUSH
52205: LD_INT 5
52207: PUSH
52208: LD_INT 31
52210: PUSH
52211: LD_INT 32
52213: PUSH
52214: LD_INT 33
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: IN
52230: NOT
52231: PUSH
52232: LD_VAR 0 6
52236: PUSH
52237: LD_INT 1
52239: EQUAL
52240: AND
52241: OR
52242: PUSH
52243: LD_VAR 0 1
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 3
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: IN
52258: NOT
52259: PUSH
52260: LD_VAR 0 6
52264: PUSH
52265: LD_INT 2
52267: EQUAL
52268: AND
52269: OR
52270: IFFALSE 52280
// mode = 0 ;
52272: LD_ADDR_VAR 0 6
52276: PUSH
52277: LD_INT 0
52279: ST_TO_ADDR
// case mode of 0 :
52280: LD_VAR 0 6
52284: PUSH
52285: LD_INT 0
52287: DOUBLE
52288: EQUAL
52289: IFTRUE 52293
52291: GO 63746
52293: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52294: LD_ADDR_VAR 0 11
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: LD_INT 3
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52487: LD_ADDR_VAR 0 12
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 2
52621: NEG
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 3
52644: NEG
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 3
52655: NEG
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52683: LD_ADDR_VAR 0 13
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 3
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 3
52854: NEG
52855: PUSH
52856: LD_INT 3
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52882: LD_ADDR_VAR 0 14
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 2
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 3
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53078: LD_ADDR_VAR 0 15
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 3
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53271: LD_ADDR_VAR 0 16
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 3
53428: PUSH
53429: LD_INT 3
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53464: LD_ADDR_VAR 0 17
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53694: LD_ADDR_VAR 0 18
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53924: LD_ADDR_VAR 0 19
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54154: LD_ADDR_VAR 0 20
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54384: LD_ADDR_VAR 0 21
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54614: LD_ADDR_VAR 0 22
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54844: LD_ADDR_VAR 0 23
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: LD_INT 3
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55124: LD_ADDR_VAR 0 24
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: LD_INT 2
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 3
55367: PUSH
55368: LD_INT 2
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55400: LD_ADDR_VAR 0 25
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 3
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55674: LD_ADDR_VAR 0 26
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: LD_INT 3
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: LD_INT 3
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55950: LD_ADDR_VAR 0 27
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 2
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 3
56183: NEG
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 3
56195: NEG
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56230: LD_ADDR_VAR 0 28
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 2
56406: NEG
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: LD_INT 3
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 3
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 3
56465: NEG
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 3
56477: NEG
56478: PUSH
56479: LD_INT 2
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56512: LD_ADDR_VAR 0 29
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: LD_INT 2
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 3
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: NEG
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56791: LD_ADDR_VAR 0 30
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: LD_INT 3
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 3
57034: NEG
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57069: LD_ADDR_VAR 0 31
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: LD_INT 2
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: NEG
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: NEG
57313: PUSH
57314: LD_INT 2
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57347: LD_ADDR_VAR 0 32
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: LD_INT 2
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 2
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 2
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: NEG
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 2
57524: NEG
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 3
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 3
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57625: LD_ADDR_VAR 0 33
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 2
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: NEG
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 2
57791: NEG
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: LD_INT 3
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: LD_INT 3
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 3
57869: NEG
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57904: LD_ADDR_VAR 0 34
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: LD_INT 3
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: LD_INT 2
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 3
58149: NEG
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58184: LD_ADDR_VAR 0 35
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58296: LD_ADDR_VAR 0 36
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: LD_INT 2
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58408: LD_ADDR_VAR 0 37
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58520: LD_ADDR_VAR 0 38
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58632: LD_ADDR_VAR 0 39
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58744: LD_ADDR_VAR 0 40
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58856: LD_ADDR_VAR 0 41
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 3
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 3
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 3
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 3
59099: PUSH
59100: LD_INT 3
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: LD_INT 3
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 3
59130: NEG
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 3
59141: NEG
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 3
59165: NEG
59166: PUSH
59167: LD_INT 3
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59206: LD_ADDR_VAR 0 42
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: NEG
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: LD_INT 2
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 2
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 2
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: LD_INT 2
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: LD_INT 3
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: LD_INT 3
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 3
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: LD_INT 2
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 3
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 3
59452: PUSH
59453: LD_INT 3
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: LD_INT 3
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: LD_INT 3
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 3
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: LD_INT 2
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 3
59503: NEG
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 3
59515: NEG
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59556: LD_ADDR_VAR 0 43
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: LD_INT 2
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 2
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: LD_INT 3
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 3
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 3
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: LD_INT 3
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: NEG
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 3
59863: NEG
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59904: LD_ADDR_VAR 0 44
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: NEG
59986: PUSH
59987: LD_INT 2
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 2
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: NEG
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: LD_INT 3
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 3
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 3
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 3
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: LD_INT 3
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: NEG
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: LD_INT 3
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60254: LD_ADDR_VAR 0 45
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: LD_INT 2
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 2
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: LD_INT 2
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: LD_INT 2
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: LD_INT 3
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: LD_INT 3
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 3
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 3
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: LD_INT 3
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: LD_INT 3
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 3
60563: NEG
60564: PUSH
60565: LD_INT 3
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60604: LD_ADDR_VAR 0 46
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 1
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 2
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 2
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 2
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 2
60770: NEG
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 2
60781: NEG
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: LD_INT 3
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 3
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 3
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: LD_INT 3
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: NEG
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 3
60900: NEG
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 3
60911: NEG
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60952: LD_ADDR_VAR 0 47
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 2
61067: NEG
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: LD_INT 2
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61103: LD_ADDR_VAR 0 48
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 2
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61250: LD_ADDR_VAR 0 49
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: LD_INT 1
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 2
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 2
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 2
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61394: LD_ADDR_VAR 0 50
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 1
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: NEG
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: NEG
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: LD_INT 2
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61538: LD_ADDR_VAR 0 51
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 2
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 2
61650: NEG
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61685: LD_ADDR_VAR 0 52
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: LD_INT 2
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: LD_INT 1
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 2
61789: NEG
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 2
61800: NEG
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 2
61812: NEG
61813: PUSH
61814: LD_INT 2
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61836: LD_ADDR_VAR 0 53
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: LD_INT 2
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 2
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 2
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 2
61971: PUSH
61972: LD_INT 2
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 2
62012: NEG
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 2
62023: NEG
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 2
62035: NEG
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62066: LD_ADDR_VAR 0 54
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: LD_INT 2
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 2
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: PUSH
62202: LD_INT 2
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 2
62253: NEG
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: LD_INT 2
62269: NEG
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62296: LD_ADDR_VAR 0 55
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 1
62365: NEG
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: LD_INT 2
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: LD_INT 2
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 2
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 2
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 2
62431: PUSH
62432: LD_INT 2
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 2
62472: NEG
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 2
62495: NEG
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62526: LD_ADDR_VAR 0 56
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: LD_INT 1
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: LD_INT 2
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: NEG
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: LD_INT 1
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: NEG
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62756: LD_ADDR_VAR 0 57
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 1
62825: NEG
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: LD_INT 2
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 2
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 2
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 2
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 2
62891: PUSH
62892: LD_INT 2
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: LD_INT 2
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: LD_INT 2
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: NEG
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: NEG
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62986: LD_ADDR_VAR 0 58
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: LD_INT 2
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: LD_INT 2
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 2
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 2
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 2
63121: PUSH
63122: LD_INT 2
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 2
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: LD_INT 2
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 2
63185: NEG
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63216: LD_ADDR_VAR 0 59
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: LD_INT 1
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 1
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63304: LD_ADDR_VAR 0 60
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: LD_INT 1
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 1
63362: NEG
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: LD_INT 1
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63392: LD_ADDR_VAR 0 61
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63480: LD_ADDR_VAR 0 62
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 0
63497: PUSH
63498: LD_INT 1
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 1
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: LD_INT 1
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: NEG
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63568: LD_ADDR_VAR 0 63
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 0
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: LD_INT 1
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: LD_INT 1
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: NEG
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63656: LD_ADDR_VAR 0 64
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: LD_INT 1
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: ST_TO_ADDR
// end ; 1 :
63744: GO 69641
63746: LD_INT 1
63748: DOUBLE
63749: EQUAL
63750: IFTRUE 63754
63752: GO 66377
63754: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63755: LD_ADDR_VAR 0 11
63759: PUSH
63760: LD_INT 1
63762: NEG
63763: PUSH
63764: LD_INT 3
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: LD_INT 3
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: LD_INT 2
63788: NEG
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: LIST
63798: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63799: LD_ADDR_VAR 0 12
63803: PUSH
63804: LD_INT 2
63806: PUSH
63807: LD_INT 1
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 3
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 3
63827: PUSH
63828: LD_INT 1
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: LIST
63839: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63840: LD_ADDR_VAR 0 13
63844: PUSH
63845: LD_INT 3
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 3
63857: PUSH
63858: LD_INT 3
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: LD_INT 3
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: LIST
63879: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63880: LD_ADDR_VAR 0 14
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: LD_INT 3
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: LD_INT 3
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: NEG
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: LIST
63920: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63921: LD_ADDR_VAR 0 15
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 3
63939: NEG
63940: PUSH
63941: LD_INT 0
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 3
63950: NEG
63951: PUSH
63952: LD_INT 1
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: LIST
63964: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63965: LD_ADDR_VAR 0 16
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: LD_INT 3
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 3
63984: NEG
63985: PUSH
63986: LD_INT 2
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 3
63996: NEG
63997: PUSH
63998: LD_INT 3
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: LIST
64010: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64011: LD_ADDR_VAR 0 17
64015: PUSH
64016: LD_INT 1
64018: NEG
64019: PUSH
64020: LD_INT 3
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: LD_INT 3
64033: NEG
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: LD_INT 2
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: LIST
64054: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64055: LD_ADDR_VAR 0 18
64059: PUSH
64060: LD_INT 2
64062: PUSH
64063: LD_INT 1
64065: NEG
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 3
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 3
64083: PUSH
64084: LD_INT 1
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: LIST
64095: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64096: LD_ADDR_VAR 0 19
64100: PUSH
64101: LD_INT 3
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 3
64113: PUSH
64114: LD_INT 3
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: LD_INT 3
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: LIST
64135: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64136: LD_ADDR_VAR 0 20
64140: PUSH
64141: LD_INT 1
64143: PUSH
64144: LD_INT 3
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: LD_INT 3
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: LIST
64176: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64177: LD_ADDR_VAR 0 21
64181: PUSH
64182: LD_INT 2
64184: NEG
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 3
64195: NEG
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 3
64206: NEG
64207: PUSH
64208: LD_INT 1
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: LIST
64220: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64221: LD_ADDR_VAR 0 22
64225: PUSH
64226: LD_INT 2
64228: NEG
64229: PUSH
64230: LD_INT 3
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 3
64240: NEG
64241: PUSH
64242: LD_INT 2
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 3
64252: NEG
64253: PUSH
64254: LD_INT 3
64256: NEG
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: LIST
64266: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64267: LD_ADDR_VAR 0 23
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: LD_INT 3
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: LD_INT 4
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 1
64297: PUSH
64298: LD_INT 3
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: LIST
64310: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64311: LD_ADDR_VAR 0 24
64315: PUSH
64316: LD_INT 3
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 3
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 4
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: LIST
64351: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64352: LD_ADDR_VAR 0 25
64356: PUSH
64357: LD_INT 3
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 4
64369: PUSH
64370: LD_INT 3
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 3
64379: PUSH
64380: LD_INT 4
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: LIST
64391: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64392: LD_ADDR_VAR 0 26
64396: PUSH
64397: LD_INT 0
64399: PUSH
64400: LD_INT 3
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 1
64409: PUSH
64410: LD_INT 4
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: LD_INT 3
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: LIST
64432: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64433: LD_ADDR_VAR 0 27
64437: PUSH
64438: LD_INT 3
64440: NEG
64441: PUSH
64442: LD_INT 0
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 3
64451: NEG
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 4
64462: NEG
64463: PUSH
64464: LD_INT 1
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64477: LD_ADDR_VAR 0 28
64481: PUSH
64482: LD_INT 3
64484: NEG
64485: PUSH
64486: LD_INT 3
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 3
64496: NEG
64497: PUSH
64498: LD_INT 4
64500: NEG
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 4
64508: NEG
64509: PUSH
64510: LD_INT 3
64512: NEG
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64523: LD_ADDR_VAR 0 29
64527: PUSH
64528: LD_INT 1
64530: NEG
64531: PUSH
64532: LD_INT 3
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 0
64542: PUSH
64543: LD_INT 3
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: PUSH
64554: LD_INT 2
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: LD_INT 4
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: LD_INT 4
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 3
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 1
64598: NEG
64599: PUSH
64600: LD_INT 5
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 5
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: LD_INT 4
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 6
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: LD_INT 6
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: LD_INT 5
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64678: LD_ADDR_VAR 0 30
64682: PUSH
64683: LD_INT 2
64685: PUSH
64686: LD_INT 1
64688: NEG
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 3
64696: PUSH
64697: LD_INT 0
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 3
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 3
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 4
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 4
64737: PUSH
64738: LD_INT 1
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 4
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 5
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 5
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 5
64778: PUSH
64779: LD_INT 1
64781: NEG
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 6
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 6
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64821: LD_ADDR_VAR 0 31
64825: PUSH
64826: LD_INT 3
64828: PUSH
64829: LD_INT 2
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 3
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 2
64848: PUSH
64849: LD_INT 3
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 4
64858: PUSH
64859: LD_INT 3
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 4
64868: PUSH
64869: LD_INT 4
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 3
64878: PUSH
64879: LD_INT 4
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 5
64888: PUSH
64889: LD_INT 4
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 5
64898: PUSH
64899: LD_INT 5
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 4
64908: PUSH
64909: LD_INT 5
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 6
64918: PUSH
64919: LD_INT 5
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 6
64928: PUSH
64929: LD_INT 6
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 5
64938: PUSH
64939: LD_INT 6
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64960: LD_ADDR_VAR 0 32
64964: PUSH
64965: LD_INT 1
64967: PUSH
64968: LD_INT 3
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: LD_INT 3
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 1
64987: NEG
64988: PUSH
64989: LD_INT 2
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 1
64998: PUSH
64999: LD_INT 4
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: LD_INT 4
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: LD_INT 3
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 1
65029: PUSH
65030: LD_INT 5
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: LD_INT 5
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 1
65049: NEG
65050: PUSH
65051: LD_INT 4
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 1
65060: PUSH
65061: LD_INT 6
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: LD_INT 6
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 1
65080: NEG
65081: PUSH
65082: LD_INT 5
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65103: LD_ADDR_VAR 0 33
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: LD_INT 1
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 3
65121: NEG
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 3
65132: NEG
65133: PUSH
65134: LD_INT 1
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 3
65144: NEG
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 4
65155: NEG
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 4
65166: NEG
65167: PUSH
65168: LD_INT 1
65170: NEG
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 4
65178: NEG
65179: PUSH
65180: LD_INT 1
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 5
65189: NEG
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 5
65200: NEG
65201: PUSH
65202: LD_INT 1
65204: NEG
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 5
65212: NEG
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 6
65223: NEG
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 6
65234: NEG
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65258: LD_ADDR_VAR 0 34
65262: PUSH
65263: LD_INT 2
65265: NEG
65266: PUSH
65267: LD_INT 3
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 3
65277: NEG
65278: PUSH
65279: LD_INT 2
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 3
65289: NEG
65290: PUSH
65291: LD_INT 3
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 3
65301: NEG
65302: PUSH
65303: LD_INT 4
65305: NEG
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 4
65313: NEG
65314: PUSH
65315: LD_INT 3
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 4
65325: NEG
65326: PUSH
65327: LD_INT 4
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 4
65337: NEG
65338: PUSH
65339: LD_INT 5
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 5
65349: NEG
65350: PUSH
65351: LD_INT 4
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 5
65361: NEG
65362: PUSH
65363: LD_INT 5
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 5
65373: NEG
65374: PUSH
65375: LD_INT 6
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 6
65385: NEG
65386: PUSH
65387: LD_INT 5
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 6
65397: NEG
65398: PUSH
65399: LD_INT 6
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65421: LD_ADDR_VAR 0 41
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: LD_INT 2
65431: NEG
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 1
65439: NEG
65440: PUSH
65441: LD_INT 3
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: LD_INT 2
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: LIST
65464: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65465: LD_ADDR_VAR 0 42
65469: PUSH
65470: LD_INT 2
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 2
65482: PUSH
65483: LD_INT 1
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 3
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: LIST
65505: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65506: LD_ADDR_VAR 0 43
65510: PUSH
65511: LD_INT 2
65513: PUSH
65514: LD_INT 2
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 3
65523: PUSH
65524: LD_INT 2
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 2
65533: PUSH
65534: LD_INT 3
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65546: LD_ADDR_VAR 0 44
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: LD_INT 2
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: LD_INT 3
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 1
65573: NEG
65574: PUSH
65575: LD_INT 2
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: LIST
65586: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65587: LD_ADDR_VAR 0 45
65591: PUSH
65592: LD_INT 2
65594: NEG
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 2
65605: NEG
65606: PUSH
65607: LD_INT 1
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 3
65616: NEG
65617: PUSH
65618: LD_INT 1
65620: NEG
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: LIST
65630: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65631: LD_ADDR_VAR 0 46
65635: PUSH
65636: LD_INT 2
65638: NEG
65639: PUSH
65640: LD_INT 2
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 2
65650: NEG
65651: PUSH
65652: LD_INT 3
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 3
65662: NEG
65663: PUSH
65664: LD_INT 2
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: LIST
65676: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65677: LD_ADDR_VAR 0 47
65681: PUSH
65682: LD_INT 2
65684: NEG
65685: PUSH
65686: LD_INT 3
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: LD_INT 3
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65710: LD_ADDR_VAR 0 48
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: LD_INT 2
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 2
65728: PUSH
65729: LD_INT 1
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65741: LD_ADDR_VAR 0 49
65745: PUSH
65746: LD_INT 3
65748: PUSH
65749: LD_INT 1
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 3
65758: PUSH
65759: LD_INT 2
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65770: LD_ADDR_VAR 0 50
65774: PUSH
65775: LD_INT 2
65777: PUSH
65778: LD_INT 3
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65799: LD_ADDR_VAR 0 51
65803: PUSH
65804: LD_INT 1
65806: NEG
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 2
65817: NEG
65818: PUSH
65819: LD_INT 1
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65830: LD_ADDR_VAR 0 52
65834: PUSH
65835: LD_INT 3
65837: NEG
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 3
65849: NEG
65850: PUSH
65851: LD_INT 2
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65863: LD_ADDR_VAR 0 53
65867: PUSH
65868: LD_INT 1
65870: NEG
65871: PUSH
65872: LD_INT 3
65874: NEG
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: LD_INT 3
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 1
65893: PUSH
65894: LD_INT 2
65896: NEG
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: LIST
65906: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65907: LD_ADDR_VAR 0 54
65911: PUSH
65912: LD_INT 2
65914: PUSH
65915: LD_INT 1
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 3
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 3
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: LIST
65947: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65948: LD_ADDR_VAR 0 55
65952: PUSH
65953: LD_INT 3
65955: PUSH
65956: LD_INT 2
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 3
65965: PUSH
65966: LD_INT 3
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 2
65975: PUSH
65976: LD_INT 3
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: LIST
65987: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65988: LD_ADDR_VAR 0 56
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: LD_INT 3
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: LD_INT 3
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: NEG
66016: PUSH
66017: LD_INT 2
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: LIST
66028: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66029: LD_ADDR_VAR 0 57
66033: PUSH
66034: LD_INT 2
66036: NEG
66037: PUSH
66038: LD_INT 1
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 3
66047: NEG
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 3
66058: NEG
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: LIST
66072: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66073: LD_ADDR_VAR 0 58
66077: PUSH
66078: LD_INT 2
66080: NEG
66081: PUSH
66082: LD_INT 3
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 3
66092: NEG
66093: PUSH
66094: LD_INT 2
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 3
66104: NEG
66105: PUSH
66106: LD_INT 3
66108: NEG
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: LIST
66118: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66119: LD_ADDR_VAR 0 59
66123: PUSH
66124: LD_INT 1
66126: NEG
66127: PUSH
66128: LD_INT 2
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 0
66138: PUSH
66139: LD_INT 2
66141: NEG
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: LD_INT 1
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: LIST
66162: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66163: LD_ADDR_VAR 0 60
66167: PUSH
66168: LD_INT 1
66170: PUSH
66171: LD_INT 1
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 2
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 2
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: LIST
66203: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66204: LD_ADDR_VAR 0 61
66208: PUSH
66209: LD_INT 2
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 2
66221: PUSH
66222: LD_INT 2
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: PUSH
66232: LD_INT 2
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: LIST
66243: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66244: LD_ADDR_VAR 0 62
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: LD_INT 2
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: LD_INT 2
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 1
66271: NEG
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: LIST
66284: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66285: LD_ADDR_VAR 0 63
66289: PUSH
66290: LD_INT 1
66292: NEG
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 2
66303: NEG
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 2
66314: NEG
66315: PUSH
66316: LD_INT 1
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66329: LD_ADDR_VAR 0 64
66333: PUSH
66334: LD_INT 1
66336: NEG
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 2
66348: NEG
66349: PUSH
66350: LD_INT 1
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 2
66360: NEG
66361: PUSH
66362: LD_INT 2
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: LIST
66374: ST_TO_ADDR
// end ; 2 :
66375: GO 69641
66377: LD_INT 2
66379: DOUBLE
66380: EQUAL
66381: IFTRUE 66385
66383: GO 69640
66385: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66386: LD_ADDR_VAR 0 29
66390: PUSH
66391: LD_INT 4
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 4
66403: PUSH
66404: LD_INT 1
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 5
66414: PUSH
66415: LD_INT 0
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 5
66424: PUSH
66425: LD_INT 1
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 4
66434: PUSH
66435: LD_INT 1
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 3
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 3
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 3
66465: PUSH
66466: LD_INT 2
66468: NEG
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 5
66476: PUSH
66477: LD_INT 2
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 3
66486: PUSH
66487: LD_INT 3
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 3
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 4
66506: PUSH
66507: LD_INT 3
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 4
66516: PUSH
66517: LD_INT 4
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 3
66526: PUSH
66527: LD_INT 4
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 2
66536: PUSH
66537: LD_INT 3
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 2
66546: PUSH
66547: LD_INT 2
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 4
66556: PUSH
66557: LD_INT 2
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 2
66566: PUSH
66567: LD_INT 4
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: LD_INT 4
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: LD_INT 3
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: LD_INT 4
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: LD_INT 5
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 0
66616: PUSH
66617: LD_INT 5
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: LD_INT 4
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 1
66637: NEG
66638: PUSH
66639: LD_INT 3
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 2
66648: PUSH
66649: LD_INT 5
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 2
66658: NEG
66659: PUSH
66660: LD_INT 3
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 3
66669: NEG
66670: PUSH
66671: LD_INT 0
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 3
66680: NEG
66681: PUSH
66682: LD_INT 1
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 2
66692: NEG
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 2
66703: NEG
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 3
66714: NEG
66715: PUSH
66716: LD_INT 1
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 4
66725: NEG
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 4
66736: NEG
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 4
66748: NEG
66749: PUSH
66750: LD_INT 2
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 2
66760: NEG
66761: PUSH
66762: LD_INT 2
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 4
66771: NEG
66772: PUSH
66773: LD_INT 4
66775: NEG
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 4
66783: NEG
66784: PUSH
66785: LD_INT 5
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 3
66795: NEG
66796: PUSH
66797: LD_INT 4
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 3
66807: NEG
66808: PUSH
66809: LD_INT 3
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 4
66819: NEG
66820: PUSH
66821: LD_INT 3
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 5
66831: NEG
66832: PUSH
66833: LD_INT 4
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 5
66843: NEG
66844: PUSH
66845: LD_INT 5
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 3
66855: NEG
66856: PUSH
66857: LD_INT 5
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 5
66867: NEG
66868: PUSH
66869: LD_INT 3
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66924: LD_ADDR_VAR 0 30
66928: PUSH
66929: LD_INT 4
66931: PUSH
66932: LD_INT 4
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 4
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 5
66951: PUSH
66952: LD_INT 4
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 5
66961: PUSH
66962: LD_INT 5
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 4
66971: PUSH
66972: LD_INT 5
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 3
66981: PUSH
66982: LD_INT 4
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 5
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 3
67011: PUSH
67012: LD_INT 5
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: LD_INT 3
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: LD_INT 2
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 1
67041: PUSH
67042: LD_INT 3
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 1
67051: PUSH
67052: LD_INT 4
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 0
67061: PUSH
67062: LD_INT 4
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 1
67071: NEG
67072: PUSH
67073: LD_INT 3
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 1
67082: NEG
67083: PUSH
67084: LD_INT 2
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 2
67093: PUSH
67094: LD_INT 4
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 2
67103: NEG
67104: PUSH
67105: LD_INT 2
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 4
67114: NEG
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 4
67125: NEG
67126: PUSH
67127: LD_INT 1
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 3
67137: NEG
67138: PUSH
67139: LD_INT 0
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 3
67148: NEG
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 4
67159: NEG
67160: PUSH
67161: LD_INT 1
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 5
67170: NEG
67171: PUSH
67172: LD_INT 0
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 5
67181: NEG
67182: PUSH
67183: LD_INT 1
67185: NEG
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 5
67193: NEG
67194: PUSH
67195: LD_INT 2
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 3
67205: NEG
67206: PUSH
67207: LD_INT 2
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 3
67216: NEG
67217: PUSH
67218: LD_INT 3
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 3
67228: NEG
67229: PUSH
67230: LD_INT 4
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 2
67240: NEG
67241: PUSH
67242: LD_INT 3
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 2
67252: NEG
67253: PUSH
67254: LD_INT 2
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: LD_INT 2
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 4
67276: NEG
67277: PUSH
67278: LD_INT 3
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 4
67288: NEG
67289: PUSH
67290: LD_INT 4
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 2
67300: NEG
67301: PUSH
67302: LD_INT 4
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 4
67312: NEG
67313: PUSH
67314: LD_INT 2
67316: NEG
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: LD_INT 4
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: LD_INT 5
67338: NEG
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 1
67346: PUSH
67347: LD_INT 4
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: LD_INT 3
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: LD_INT 3
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: LD_INT 4
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 1
67391: NEG
67392: PUSH
67393: LD_INT 5
67395: NEG
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 2
67403: PUSH
67404: LD_INT 3
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 2
67414: NEG
67415: PUSH
67416: LD_INT 5
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67471: LD_ADDR_VAR 0 31
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: LD_INT 4
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 0
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 1
67498: PUSH
67499: LD_INT 4
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 1
67508: PUSH
67509: LD_INT 5
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: LD_INT 5
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 1
67528: NEG
67529: PUSH
67530: LD_INT 4
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 1
67539: NEG
67540: PUSH
67541: LD_INT 3
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 2
67550: PUSH
67551: LD_INT 5
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 2
67560: NEG
67561: PUSH
67562: LD_INT 3
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 3
67571: NEG
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 3
67582: NEG
67583: PUSH
67584: LD_INT 1
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 2
67594: NEG
67595: PUSH
67596: LD_INT 0
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 2
67605: NEG
67606: PUSH
67607: LD_INT 1
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: LD_INT 1
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 4
67627: NEG
67628: PUSH
67629: LD_INT 0
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 4
67638: NEG
67639: PUSH
67640: LD_INT 1
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 4
67650: NEG
67651: PUSH
67652: LD_INT 2
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 2
67662: NEG
67663: PUSH
67664: LD_INT 2
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 4
67673: NEG
67674: PUSH
67675: LD_INT 4
67677: NEG
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 4
67685: NEG
67686: PUSH
67687: LD_INT 5
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 3
67697: NEG
67698: PUSH
67699: LD_INT 4
67701: NEG
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 3
67709: NEG
67710: PUSH
67711: LD_INT 3
67713: NEG
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 4
67721: NEG
67722: PUSH
67723: LD_INT 3
67725: NEG
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 5
67733: NEG
67734: PUSH
67735: LD_INT 4
67737: NEG
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 5
67745: NEG
67746: PUSH
67747: LD_INT 5
67749: NEG
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 3
67757: NEG
67758: PUSH
67759: LD_INT 5
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 5
67769: NEG
67770: PUSH
67771: LD_INT 3
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 0
67781: PUSH
67782: LD_INT 3
67784: NEG
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 0
67792: PUSH
67793: LD_INT 4
67795: NEG
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 1
67803: PUSH
67804: LD_INT 3
67806: NEG
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 1
67814: PUSH
67815: LD_INT 2
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 0
67825: PUSH
67826: LD_INT 2
67828: NEG
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 1
67836: NEG
67837: PUSH
67838: LD_INT 3
67840: NEG
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 1
67848: NEG
67849: PUSH
67850: LD_INT 4
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: LD_INT 2
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 2
67871: NEG
67872: PUSH
67873: LD_INT 4
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 4
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 4
67893: PUSH
67894: LD_INT 1
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 5
67904: PUSH
67905: LD_INT 0
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 5
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 4
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 3
67934: PUSH
67935: LD_INT 0
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 3
67944: PUSH
67945: LD_INT 1
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 3
67955: PUSH
67956: LD_INT 2
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 5
67966: PUSH
67967: LD_INT 2
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68021: LD_ADDR_VAR 0 32
68025: PUSH
68026: LD_INT 4
68028: NEG
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 4
68039: NEG
68040: PUSH
68041: LD_INT 1
68043: NEG
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 3
68051: NEG
68052: PUSH
68053: LD_INT 0
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 3
68062: NEG
68063: PUSH
68064: LD_INT 1
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 4
68073: NEG
68074: PUSH
68075: LD_INT 1
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 5
68084: NEG
68085: PUSH
68086: LD_INT 0
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 5
68095: NEG
68096: PUSH
68097: LD_INT 1
68099: NEG
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 5
68107: NEG
68108: PUSH
68109: LD_INT 2
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 3
68119: NEG
68120: PUSH
68121: LD_INT 2
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 3
68130: NEG
68131: PUSH
68132: LD_INT 3
68134: NEG
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 3
68142: NEG
68143: PUSH
68144: LD_INT 4
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 2
68154: NEG
68155: PUSH
68156: LD_INT 3
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 2
68166: NEG
68167: PUSH
68168: LD_INT 2
68170: NEG
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 3
68178: NEG
68179: PUSH
68180: LD_INT 2
68182: NEG
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 4
68190: NEG
68191: PUSH
68192: LD_INT 3
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 4
68202: NEG
68203: PUSH
68204: LD_INT 4
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: LD_INT 4
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 4
68226: NEG
68227: PUSH
68228: LD_INT 2
68230: NEG
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: LD_INT 4
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: LD_INT 5
68252: NEG
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 1
68260: PUSH
68261: LD_INT 4
68263: NEG
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 1
68271: PUSH
68272: LD_INT 3
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: LD_INT 3
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 1
68293: NEG
68294: PUSH
68295: LD_INT 4
68297: NEG
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 1
68305: NEG
68306: PUSH
68307: LD_INT 5
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 2
68317: PUSH
68318: LD_INT 3
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 2
68328: NEG
68329: PUSH
68330: LD_INT 5
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 3
68340: PUSH
68341: LD_INT 0
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 3
68350: PUSH
68351: LD_INT 1
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 4
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 4
68371: PUSH
68372: LD_INT 1
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 3
68381: PUSH
68382: LD_INT 1
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 2
68391: PUSH
68392: LD_INT 0
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 2
68401: PUSH
68402: LD_INT 1
68404: NEG
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 2
68412: PUSH
68413: LD_INT 2
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 4
68423: PUSH
68424: LD_INT 2
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 4
68433: PUSH
68434: LD_INT 4
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 4
68443: PUSH
68444: LD_INT 3
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 5
68453: PUSH
68454: LD_INT 4
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 5
68463: PUSH
68464: LD_INT 5
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 4
68473: PUSH
68474: LD_INT 5
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 3
68483: PUSH
68484: LD_INT 4
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 3
68493: PUSH
68494: LD_INT 3
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 5
68503: PUSH
68504: LD_INT 3
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 3
68513: PUSH
68514: LD_INT 5
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68568: LD_ADDR_VAR 0 33
68572: PUSH
68573: LD_INT 4
68575: NEG
68576: PUSH
68577: LD_INT 4
68579: NEG
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 4
68587: NEG
68588: PUSH
68589: LD_INT 5
68591: NEG
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 3
68599: NEG
68600: PUSH
68601: LD_INT 4
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 3
68611: NEG
68612: PUSH
68613: LD_INT 3
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 4
68623: NEG
68624: PUSH
68625: LD_INT 3
68627: NEG
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 5
68635: NEG
68636: PUSH
68637: LD_INT 4
68639: NEG
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 5
68647: NEG
68648: PUSH
68649: LD_INT 5
68651: NEG
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 3
68659: NEG
68660: PUSH
68661: LD_INT 5
68663: NEG
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 5
68671: NEG
68672: PUSH
68673: LD_INT 3
68675: NEG
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: LD_INT 3
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: LD_INT 4
68697: NEG
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 1
68705: PUSH
68706: LD_INT 3
68708: NEG
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 1
68716: PUSH
68717: LD_INT 2
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 0
68727: PUSH
68728: LD_INT 2
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 1
68738: NEG
68739: PUSH
68740: LD_INT 3
68742: NEG
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 1
68750: NEG
68751: PUSH
68752: LD_INT 4
68754: NEG
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 2
68762: PUSH
68763: LD_INT 2
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 2
68773: NEG
68774: PUSH
68775: LD_INT 4
68777: NEG
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 4
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 4
68795: PUSH
68796: LD_INT 1
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 5
68806: PUSH
68807: LD_INT 0
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 5
68816: PUSH
68817: LD_INT 1
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 4
68826: PUSH
68827: LD_INT 1
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 3
68836: PUSH
68837: LD_INT 0
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 3
68846: PUSH
68847: LD_INT 1
68849: NEG
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 3
68857: PUSH
68858: LD_INT 2
68860: NEG
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 5
68868: PUSH
68869: LD_INT 2
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 3
68878: PUSH
68879: LD_INT 3
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 3
68888: PUSH
68889: LD_INT 2
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 4
68898: PUSH
68899: LD_INT 3
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 4
68908: PUSH
68909: LD_INT 4
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 3
68918: PUSH
68919: LD_INT 4
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 2
68928: PUSH
68929: LD_INT 3
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 2
68938: PUSH
68939: LD_INT 2
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 4
68948: PUSH
68949: LD_INT 2
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 2
68958: PUSH
68959: LD_INT 4
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 0
68968: PUSH
68969: LD_INT 4
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 0
68978: PUSH
68979: LD_INT 3
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 1
68988: PUSH
68989: LD_INT 4
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 1
68998: PUSH
68999: LD_INT 5
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 0
69008: PUSH
69009: LD_INT 5
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 1
69018: NEG
69019: PUSH
69020: LD_INT 4
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 1
69029: NEG
69030: PUSH
69031: LD_INT 3
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 2
69040: PUSH
69041: LD_INT 5
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 2
69050: NEG
69051: PUSH
69052: LD_INT 3
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69106: LD_ADDR_VAR 0 34
69110: PUSH
69111: LD_INT 0
69113: PUSH
69114: LD_INT 4
69116: NEG
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: LD_INT 5
69127: NEG
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: LD_INT 4
69138: NEG
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 1
69146: PUSH
69147: LD_INT 3
69149: NEG
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 0
69157: PUSH
69158: LD_INT 3
69160: NEG
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 1
69168: NEG
69169: PUSH
69170: LD_INT 4
69172: NEG
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 1
69180: NEG
69181: PUSH
69182: LD_INT 5
69184: NEG
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 2
69192: PUSH
69193: LD_INT 3
69195: NEG
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 2
69203: NEG
69204: PUSH
69205: LD_INT 5
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 3
69215: PUSH
69216: LD_INT 0
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 3
69225: PUSH
69226: LD_INT 1
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 4
69236: PUSH
69237: LD_INT 0
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 4
69246: PUSH
69247: LD_INT 1
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 3
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 2
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 2
69276: PUSH
69277: LD_INT 1
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 2
69287: PUSH
69288: LD_INT 2
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 4
69298: PUSH
69299: LD_INT 2
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 4
69308: PUSH
69309: LD_INT 4
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 4
69318: PUSH
69319: LD_INT 3
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 5
69328: PUSH
69329: LD_INT 4
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 5
69338: PUSH
69339: LD_INT 5
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 4
69348: PUSH
69349: LD_INT 5
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 3
69358: PUSH
69359: LD_INT 4
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 3
69368: PUSH
69369: LD_INT 3
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 5
69378: PUSH
69379: LD_INT 3
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 3
69388: PUSH
69389: LD_INT 5
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 0
69398: PUSH
69399: LD_INT 3
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 2
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 1
69418: PUSH
69419: LD_INT 3
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 1
69428: PUSH
69429: LD_INT 4
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 0
69438: PUSH
69439: LD_INT 4
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 1
69448: NEG
69449: PUSH
69450: LD_INT 3
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 1
69459: NEG
69460: PUSH
69461: LD_INT 2
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 2
69470: PUSH
69471: LD_INT 4
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 2
69480: NEG
69481: PUSH
69482: LD_INT 2
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 4
69491: NEG
69492: PUSH
69493: LD_INT 0
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 4
69502: NEG
69503: PUSH
69504: LD_INT 1
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 3
69514: NEG
69515: PUSH
69516: LD_INT 0
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 3
69525: NEG
69526: PUSH
69527: LD_INT 1
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 4
69536: NEG
69537: PUSH
69538: LD_INT 1
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 5
69547: NEG
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 5
69558: NEG
69559: PUSH
69560: LD_INT 1
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 5
69570: NEG
69571: PUSH
69572: LD_INT 2
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 3
69582: NEG
69583: PUSH
69584: LD_INT 2
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: ST_TO_ADDR
// end ; end ;
69638: GO 69641
69640: POP
// case btype of b_depot , b_warehouse :
69641: LD_VAR 0 1
69645: PUSH
69646: LD_INT 0
69648: DOUBLE
69649: EQUAL
69650: IFTRUE 69660
69652: LD_INT 1
69654: DOUBLE
69655: EQUAL
69656: IFTRUE 69660
69658: GO 69861
69660: POP
// case nation of nation_american :
69661: LD_VAR 0 5
69665: PUSH
69666: LD_INT 1
69668: DOUBLE
69669: EQUAL
69670: IFTRUE 69674
69672: GO 69730
69674: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69675: LD_ADDR_VAR 0 9
69679: PUSH
69680: LD_VAR 0 11
69684: PUSH
69685: LD_VAR 0 12
69689: PUSH
69690: LD_VAR 0 13
69694: PUSH
69695: LD_VAR 0 14
69699: PUSH
69700: LD_VAR 0 15
69704: PUSH
69705: LD_VAR 0 16
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: PUSH
69718: LD_VAR 0 4
69722: PUSH
69723: LD_INT 1
69725: PLUS
69726: ARRAY
69727: ST_TO_ADDR
69728: GO 69859
69730: LD_INT 2
69732: DOUBLE
69733: EQUAL
69734: IFTRUE 69738
69736: GO 69794
69738: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69739: LD_ADDR_VAR 0 9
69743: PUSH
69744: LD_VAR 0 17
69748: PUSH
69749: LD_VAR 0 18
69753: PUSH
69754: LD_VAR 0 19
69758: PUSH
69759: LD_VAR 0 20
69763: PUSH
69764: LD_VAR 0 21
69768: PUSH
69769: LD_VAR 0 22
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: PUSH
69782: LD_VAR 0 4
69786: PUSH
69787: LD_INT 1
69789: PLUS
69790: ARRAY
69791: ST_TO_ADDR
69792: GO 69859
69794: LD_INT 3
69796: DOUBLE
69797: EQUAL
69798: IFTRUE 69802
69800: GO 69858
69802: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69803: LD_ADDR_VAR 0 9
69807: PUSH
69808: LD_VAR 0 23
69812: PUSH
69813: LD_VAR 0 24
69817: PUSH
69818: LD_VAR 0 25
69822: PUSH
69823: LD_VAR 0 26
69827: PUSH
69828: LD_VAR 0 27
69832: PUSH
69833: LD_VAR 0 28
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: PUSH
69846: LD_VAR 0 4
69850: PUSH
69851: LD_INT 1
69853: PLUS
69854: ARRAY
69855: ST_TO_ADDR
69856: GO 69859
69858: POP
69859: GO 70414
69861: LD_INT 2
69863: DOUBLE
69864: EQUAL
69865: IFTRUE 69875
69867: LD_INT 3
69869: DOUBLE
69870: EQUAL
69871: IFTRUE 69875
69873: GO 69931
69875: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69876: LD_ADDR_VAR 0 9
69880: PUSH
69881: LD_VAR 0 29
69885: PUSH
69886: LD_VAR 0 30
69890: PUSH
69891: LD_VAR 0 31
69895: PUSH
69896: LD_VAR 0 32
69900: PUSH
69901: LD_VAR 0 33
69905: PUSH
69906: LD_VAR 0 34
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: PUSH
69919: LD_VAR 0 4
69923: PUSH
69924: LD_INT 1
69926: PLUS
69927: ARRAY
69928: ST_TO_ADDR
69929: GO 70414
69931: LD_INT 16
69933: DOUBLE
69934: EQUAL
69935: IFTRUE 69993
69937: LD_INT 17
69939: DOUBLE
69940: EQUAL
69941: IFTRUE 69993
69943: LD_INT 18
69945: DOUBLE
69946: EQUAL
69947: IFTRUE 69993
69949: LD_INT 19
69951: DOUBLE
69952: EQUAL
69953: IFTRUE 69993
69955: LD_INT 22
69957: DOUBLE
69958: EQUAL
69959: IFTRUE 69993
69961: LD_INT 20
69963: DOUBLE
69964: EQUAL
69965: IFTRUE 69993
69967: LD_INT 21
69969: DOUBLE
69970: EQUAL
69971: IFTRUE 69993
69973: LD_INT 23
69975: DOUBLE
69976: EQUAL
69977: IFTRUE 69993
69979: LD_INT 24
69981: DOUBLE
69982: EQUAL
69983: IFTRUE 69993
69985: LD_INT 25
69987: DOUBLE
69988: EQUAL
69989: IFTRUE 69993
69991: GO 70049
69993: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69994: LD_ADDR_VAR 0 9
69998: PUSH
69999: LD_VAR 0 35
70003: PUSH
70004: LD_VAR 0 36
70008: PUSH
70009: LD_VAR 0 37
70013: PUSH
70014: LD_VAR 0 38
70018: PUSH
70019: LD_VAR 0 39
70023: PUSH
70024: LD_VAR 0 40
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: PUSH
70037: LD_VAR 0 4
70041: PUSH
70042: LD_INT 1
70044: PLUS
70045: ARRAY
70046: ST_TO_ADDR
70047: GO 70414
70049: LD_INT 6
70051: DOUBLE
70052: EQUAL
70053: IFTRUE 70105
70055: LD_INT 7
70057: DOUBLE
70058: EQUAL
70059: IFTRUE 70105
70061: LD_INT 8
70063: DOUBLE
70064: EQUAL
70065: IFTRUE 70105
70067: LD_INT 13
70069: DOUBLE
70070: EQUAL
70071: IFTRUE 70105
70073: LD_INT 12
70075: DOUBLE
70076: EQUAL
70077: IFTRUE 70105
70079: LD_INT 15
70081: DOUBLE
70082: EQUAL
70083: IFTRUE 70105
70085: LD_INT 11
70087: DOUBLE
70088: EQUAL
70089: IFTRUE 70105
70091: LD_INT 14
70093: DOUBLE
70094: EQUAL
70095: IFTRUE 70105
70097: LD_INT 10
70099: DOUBLE
70100: EQUAL
70101: IFTRUE 70105
70103: GO 70161
70105: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70106: LD_ADDR_VAR 0 9
70110: PUSH
70111: LD_VAR 0 41
70115: PUSH
70116: LD_VAR 0 42
70120: PUSH
70121: LD_VAR 0 43
70125: PUSH
70126: LD_VAR 0 44
70130: PUSH
70131: LD_VAR 0 45
70135: PUSH
70136: LD_VAR 0 46
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: PUSH
70149: LD_VAR 0 4
70153: PUSH
70154: LD_INT 1
70156: PLUS
70157: ARRAY
70158: ST_TO_ADDR
70159: GO 70414
70161: LD_INT 36
70163: DOUBLE
70164: EQUAL
70165: IFTRUE 70169
70167: GO 70225
70169: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70170: LD_ADDR_VAR 0 9
70174: PUSH
70175: LD_VAR 0 47
70179: PUSH
70180: LD_VAR 0 48
70184: PUSH
70185: LD_VAR 0 49
70189: PUSH
70190: LD_VAR 0 50
70194: PUSH
70195: LD_VAR 0 51
70199: PUSH
70200: LD_VAR 0 52
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: PUSH
70213: LD_VAR 0 4
70217: PUSH
70218: LD_INT 1
70220: PLUS
70221: ARRAY
70222: ST_TO_ADDR
70223: GO 70414
70225: LD_INT 4
70227: DOUBLE
70228: EQUAL
70229: IFTRUE 70251
70231: LD_INT 5
70233: DOUBLE
70234: EQUAL
70235: IFTRUE 70251
70237: LD_INT 34
70239: DOUBLE
70240: EQUAL
70241: IFTRUE 70251
70243: LD_INT 37
70245: DOUBLE
70246: EQUAL
70247: IFTRUE 70251
70249: GO 70307
70251: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70252: LD_ADDR_VAR 0 9
70256: PUSH
70257: LD_VAR 0 53
70261: PUSH
70262: LD_VAR 0 54
70266: PUSH
70267: LD_VAR 0 55
70271: PUSH
70272: LD_VAR 0 56
70276: PUSH
70277: LD_VAR 0 57
70281: PUSH
70282: LD_VAR 0 58
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: PUSH
70295: LD_VAR 0 4
70299: PUSH
70300: LD_INT 1
70302: PLUS
70303: ARRAY
70304: ST_TO_ADDR
70305: GO 70414
70307: LD_INT 31
70309: DOUBLE
70310: EQUAL
70311: IFTRUE 70357
70313: LD_INT 32
70315: DOUBLE
70316: EQUAL
70317: IFTRUE 70357
70319: LD_INT 33
70321: DOUBLE
70322: EQUAL
70323: IFTRUE 70357
70325: LD_INT 27
70327: DOUBLE
70328: EQUAL
70329: IFTRUE 70357
70331: LD_INT 26
70333: DOUBLE
70334: EQUAL
70335: IFTRUE 70357
70337: LD_INT 28
70339: DOUBLE
70340: EQUAL
70341: IFTRUE 70357
70343: LD_INT 29
70345: DOUBLE
70346: EQUAL
70347: IFTRUE 70357
70349: LD_INT 30
70351: DOUBLE
70352: EQUAL
70353: IFTRUE 70357
70355: GO 70413
70357: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70358: LD_ADDR_VAR 0 9
70362: PUSH
70363: LD_VAR 0 59
70367: PUSH
70368: LD_VAR 0 60
70372: PUSH
70373: LD_VAR 0 61
70377: PUSH
70378: LD_VAR 0 62
70382: PUSH
70383: LD_VAR 0 63
70387: PUSH
70388: LD_VAR 0 64
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: PUSH
70401: LD_VAR 0 4
70405: PUSH
70406: LD_INT 1
70408: PLUS
70409: ARRAY
70410: ST_TO_ADDR
70411: GO 70414
70413: POP
// temp_list2 = [ ] ;
70414: LD_ADDR_VAR 0 10
70418: PUSH
70419: EMPTY
70420: ST_TO_ADDR
// for i in temp_list do
70421: LD_ADDR_VAR 0 8
70425: PUSH
70426: LD_VAR 0 9
70430: PUSH
70431: FOR_IN
70432: IFFALSE 70484
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70434: LD_ADDR_VAR 0 10
70438: PUSH
70439: LD_VAR 0 10
70443: PUSH
70444: LD_VAR 0 8
70448: PUSH
70449: LD_INT 1
70451: ARRAY
70452: PUSH
70453: LD_VAR 0 2
70457: PLUS
70458: PUSH
70459: LD_VAR 0 8
70463: PUSH
70464: LD_INT 2
70466: ARRAY
70467: PUSH
70468: LD_VAR 0 3
70472: PLUS
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: EMPTY
70479: LIST
70480: ADD
70481: ST_TO_ADDR
70482: GO 70431
70484: POP
70485: POP
// result = temp_list2 ;
70486: LD_ADDR_VAR 0 7
70490: PUSH
70491: LD_VAR 0 10
70495: ST_TO_ADDR
// end ;
70496: LD_VAR 0 7
70500: RET
// export function EnemyInRange ( unit , dist ) ; begin
70501: LD_INT 0
70503: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70504: LD_ADDR_VAR 0 3
70508: PUSH
70509: LD_VAR 0 1
70513: PPUSH
70514: CALL_OW 255
70518: PPUSH
70519: LD_VAR 0 1
70523: PPUSH
70524: CALL_OW 250
70528: PPUSH
70529: LD_VAR 0 1
70533: PPUSH
70534: CALL_OW 251
70538: PPUSH
70539: LD_VAR 0 2
70543: PPUSH
70544: CALL 43874 0 4
70548: PUSH
70549: LD_INT 4
70551: ARRAY
70552: ST_TO_ADDR
// end ;
70553: LD_VAR 0 3
70557: RET
// export function PlayerSeeMe ( unit ) ; begin
70558: LD_INT 0
70560: PPUSH
// result := See ( your_side , unit ) ;
70561: LD_ADDR_VAR 0 2
70565: PUSH
70566: LD_OWVAR 2
70570: PPUSH
70571: LD_VAR 0 1
70575: PPUSH
70576: CALL_OW 292
70580: ST_TO_ADDR
// end ;
70581: LD_VAR 0 2
70585: RET
// export function ReverseDir ( unit ) ; begin
70586: LD_INT 0
70588: PPUSH
// if not unit then
70589: LD_VAR 0 1
70593: NOT
70594: IFFALSE 70598
// exit ;
70596: GO 70621
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70598: LD_ADDR_VAR 0 2
70602: PUSH
70603: LD_VAR 0 1
70607: PPUSH
70608: CALL_OW 254
70612: PUSH
70613: LD_INT 3
70615: PLUS
70616: PUSH
70617: LD_INT 6
70619: MOD
70620: ST_TO_ADDR
// end ;
70621: LD_VAR 0 2
70625: RET
// export function ReverseArray ( array ) ; var i ; begin
70626: LD_INT 0
70628: PPUSH
70629: PPUSH
// if not array then
70630: LD_VAR 0 1
70634: NOT
70635: IFFALSE 70639
// exit ;
70637: GO 70694
// result := [ ] ;
70639: LD_ADDR_VAR 0 2
70643: PUSH
70644: EMPTY
70645: ST_TO_ADDR
// for i := array downto 1 do
70646: LD_ADDR_VAR 0 3
70650: PUSH
70651: DOUBLE
70652: LD_VAR 0 1
70656: INC
70657: ST_TO_ADDR
70658: LD_INT 1
70660: PUSH
70661: FOR_DOWNTO
70662: IFFALSE 70692
// result := Join ( result , array [ i ] ) ;
70664: LD_ADDR_VAR 0 2
70668: PUSH
70669: LD_VAR 0 2
70673: PPUSH
70674: LD_VAR 0 1
70678: PUSH
70679: LD_VAR 0 3
70683: ARRAY
70684: PPUSH
70685: CALL 75339 0 2
70689: ST_TO_ADDR
70690: GO 70661
70692: POP
70693: POP
// end ;
70694: LD_VAR 0 2
70698: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70699: LD_INT 0
70701: PPUSH
70702: PPUSH
70703: PPUSH
70704: PPUSH
70705: PPUSH
70706: PPUSH
// if not unit or not hexes then
70707: LD_VAR 0 1
70711: NOT
70712: PUSH
70713: LD_VAR 0 2
70717: NOT
70718: OR
70719: IFFALSE 70723
// exit ;
70721: GO 70846
// dist := 9999 ;
70723: LD_ADDR_VAR 0 5
70727: PUSH
70728: LD_INT 9999
70730: ST_TO_ADDR
// for i = 1 to hexes do
70731: LD_ADDR_VAR 0 4
70735: PUSH
70736: DOUBLE
70737: LD_INT 1
70739: DEC
70740: ST_TO_ADDR
70741: LD_VAR 0 2
70745: PUSH
70746: FOR_TO
70747: IFFALSE 70834
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70749: LD_ADDR_VAR 0 6
70753: PUSH
70754: LD_VAR 0 1
70758: PPUSH
70759: LD_VAR 0 2
70763: PUSH
70764: LD_VAR 0 4
70768: ARRAY
70769: PUSH
70770: LD_INT 1
70772: ARRAY
70773: PPUSH
70774: LD_VAR 0 2
70778: PUSH
70779: LD_VAR 0 4
70783: ARRAY
70784: PUSH
70785: LD_INT 2
70787: ARRAY
70788: PPUSH
70789: CALL_OW 297
70793: ST_TO_ADDR
// if tdist < dist then
70794: LD_VAR 0 6
70798: PUSH
70799: LD_VAR 0 5
70803: LESS
70804: IFFALSE 70832
// begin hex := hexes [ i ] ;
70806: LD_ADDR_VAR 0 8
70810: PUSH
70811: LD_VAR 0 2
70815: PUSH
70816: LD_VAR 0 4
70820: ARRAY
70821: ST_TO_ADDR
// dist := tdist ;
70822: LD_ADDR_VAR 0 5
70826: PUSH
70827: LD_VAR 0 6
70831: ST_TO_ADDR
// end ; end ;
70832: GO 70746
70834: POP
70835: POP
// result := hex ;
70836: LD_ADDR_VAR 0 3
70840: PUSH
70841: LD_VAR 0 8
70845: ST_TO_ADDR
// end ;
70846: LD_VAR 0 3
70850: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70851: LD_INT 0
70853: PPUSH
70854: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70855: LD_VAR 0 1
70859: NOT
70860: PUSH
70861: LD_VAR 0 1
70865: PUSH
70866: LD_INT 21
70868: PUSH
70869: LD_INT 2
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 23
70878: PUSH
70879: LD_INT 2
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PPUSH
70890: CALL_OW 69
70894: IN
70895: NOT
70896: OR
70897: IFFALSE 70901
// exit ;
70899: GO 70948
// for i = 1 to 3 do
70901: LD_ADDR_VAR 0 3
70905: PUSH
70906: DOUBLE
70907: LD_INT 1
70909: DEC
70910: ST_TO_ADDR
70911: LD_INT 3
70913: PUSH
70914: FOR_TO
70915: IFFALSE 70946
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70917: LD_VAR 0 1
70921: PPUSH
70922: CALL_OW 250
70926: PPUSH
70927: LD_VAR 0 1
70931: PPUSH
70932: CALL_OW 251
70936: PPUSH
70937: LD_INT 1
70939: PPUSH
70940: CALL_OW 453
70944: GO 70914
70946: POP
70947: POP
// end ;
70948: LD_VAR 0 2
70952: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70953: LD_INT 0
70955: PPUSH
70956: PPUSH
70957: PPUSH
70958: PPUSH
70959: PPUSH
70960: PPUSH
// if not unit or not enemy_unit then
70961: LD_VAR 0 1
70965: NOT
70966: PUSH
70967: LD_VAR 0 2
70971: NOT
70972: OR
70973: IFFALSE 70977
// exit ;
70975: GO 71444
// if GetLives ( i ) < 250 then
70977: LD_VAR 0 4
70981: PPUSH
70982: CALL_OW 256
70986: PUSH
70987: LD_INT 250
70989: LESS
70990: IFFALSE 71003
// begin ComAutodestruct ( i ) ;
70992: LD_VAR 0 4
70996: PPUSH
70997: CALL 70851 0 1
// exit ;
71001: GO 71444
// end ; x := GetX ( enemy_unit ) ;
71003: LD_ADDR_VAR 0 7
71007: PUSH
71008: LD_VAR 0 2
71012: PPUSH
71013: CALL_OW 250
71017: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71018: LD_ADDR_VAR 0 8
71022: PUSH
71023: LD_VAR 0 2
71027: PPUSH
71028: CALL_OW 251
71032: ST_TO_ADDR
// if not x or not y then
71033: LD_VAR 0 7
71037: NOT
71038: PUSH
71039: LD_VAR 0 8
71043: NOT
71044: OR
71045: IFFALSE 71049
// exit ;
71047: GO 71444
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71049: LD_ADDR_VAR 0 6
71053: PUSH
71054: LD_VAR 0 7
71058: PPUSH
71059: LD_INT 0
71061: PPUSH
71062: LD_INT 4
71064: PPUSH
71065: CALL_OW 272
71069: PUSH
71070: LD_VAR 0 8
71074: PPUSH
71075: LD_INT 0
71077: PPUSH
71078: LD_INT 4
71080: PPUSH
71081: CALL_OW 273
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_VAR 0 7
71094: PPUSH
71095: LD_INT 1
71097: PPUSH
71098: LD_INT 4
71100: PPUSH
71101: CALL_OW 272
71105: PUSH
71106: LD_VAR 0 8
71110: PPUSH
71111: LD_INT 1
71113: PPUSH
71114: LD_INT 4
71116: PPUSH
71117: CALL_OW 273
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_VAR 0 7
71130: PPUSH
71131: LD_INT 2
71133: PPUSH
71134: LD_INT 4
71136: PPUSH
71137: CALL_OW 272
71141: PUSH
71142: LD_VAR 0 8
71146: PPUSH
71147: LD_INT 2
71149: PPUSH
71150: LD_INT 4
71152: PPUSH
71153: CALL_OW 273
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_VAR 0 7
71166: PPUSH
71167: LD_INT 3
71169: PPUSH
71170: LD_INT 4
71172: PPUSH
71173: CALL_OW 272
71177: PUSH
71178: LD_VAR 0 8
71182: PPUSH
71183: LD_INT 3
71185: PPUSH
71186: LD_INT 4
71188: PPUSH
71189: CALL_OW 273
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_VAR 0 7
71202: PPUSH
71203: LD_INT 4
71205: PPUSH
71206: LD_INT 4
71208: PPUSH
71209: CALL_OW 272
71213: PUSH
71214: LD_VAR 0 8
71218: PPUSH
71219: LD_INT 4
71221: PPUSH
71222: LD_INT 4
71224: PPUSH
71225: CALL_OW 273
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_VAR 0 7
71238: PPUSH
71239: LD_INT 5
71241: PPUSH
71242: LD_INT 4
71244: PPUSH
71245: CALL_OW 272
71249: PUSH
71250: LD_VAR 0 8
71254: PPUSH
71255: LD_INT 5
71257: PPUSH
71258: LD_INT 4
71260: PPUSH
71261: CALL_OW 273
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: ST_TO_ADDR
// for i = tmp downto 1 do
71278: LD_ADDR_VAR 0 4
71282: PUSH
71283: DOUBLE
71284: LD_VAR 0 6
71288: INC
71289: ST_TO_ADDR
71290: LD_INT 1
71292: PUSH
71293: FOR_DOWNTO
71294: IFFALSE 71395
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71296: LD_VAR 0 6
71300: PUSH
71301: LD_VAR 0 4
71305: ARRAY
71306: PUSH
71307: LD_INT 1
71309: ARRAY
71310: PPUSH
71311: LD_VAR 0 6
71315: PUSH
71316: LD_VAR 0 4
71320: ARRAY
71321: PUSH
71322: LD_INT 2
71324: ARRAY
71325: PPUSH
71326: CALL_OW 488
71330: NOT
71331: PUSH
71332: LD_VAR 0 6
71336: PUSH
71337: LD_VAR 0 4
71341: ARRAY
71342: PUSH
71343: LD_INT 1
71345: ARRAY
71346: PPUSH
71347: LD_VAR 0 6
71351: PUSH
71352: LD_VAR 0 4
71356: ARRAY
71357: PUSH
71358: LD_INT 2
71360: ARRAY
71361: PPUSH
71362: CALL_OW 428
71366: PUSH
71367: LD_INT 0
71369: NONEQUAL
71370: OR
71371: IFFALSE 71393
// tmp := Delete ( tmp , i ) ;
71373: LD_ADDR_VAR 0 6
71377: PUSH
71378: LD_VAR 0 6
71382: PPUSH
71383: LD_VAR 0 4
71387: PPUSH
71388: CALL_OW 3
71392: ST_TO_ADDR
71393: GO 71293
71395: POP
71396: POP
// j := GetClosestHex ( unit , tmp ) ;
71397: LD_ADDR_VAR 0 5
71401: PUSH
71402: LD_VAR 0 1
71406: PPUSH
71407: LD_VAR 0 6
71411: PPUSH
71412: CALL 70699 0 2
71416: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71417: LD_VAR 0 1
71421: PPUSH
71422: LD_VAR 0 5
71426: PUSH
71427: LD_INT 1
71429: ARRAY
71430: PPUSH
71431: LD_VAR 0 5
71435: PUSH
71436: LD_INT 2
71438: ARRAY
71439: PPUSH
71440: CALL_OW 111
// end ;
71444: LD_VAR 0 3
71448: RET
// export function PrepareApemanSoldier ( ) ; begin
71449: LD_INT 0
71451: PPUSH
// uc_nation := 0 ;
71452: LD_ADDR_OWVAR 21
71456: PUSH
71457: LD_INT 0
71459: ST_TO_ADDR
// hc_sex := sex_male ;
71460: LD_ADDR_OWVAR 27
71464: PUSH
71465: LD_INT 1
71467: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71468: LD_ADDR_OWVAR 28
71472: PUSH
71473: LD_INT 15
71475: ST_TO_ADDR
// hc_gallery :=  ;
71476: LD_ADDR_OWVAR 33
71480: PUSH
71481: LD_STRING 
71483: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71484: LD_ADDR_OWVAR 31
71488: PUSH
71489: LD_INT 0
71491: PPUSH
71492: LD_INT 3
71494: PPUSH
71495: CALL_OW 12
71499: PUSH
71500: LD_INT 0
71502: PPUSH
71503: LD_INT 3
71505: PPUSH
71506: CALL_OW 12
71510: PUSH
71511: LD_INT 0
71513: PUSH
71514: LD_INT 0
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: ST_TO_ADDR
// end ;
71523: LD_VAR 0 1
71527: RET
// export function PrepareApemanEngineer ( ) ; begin
71528: LD_INT 0
71530: PPUSH
// uc_nation := 0 ;
71531: LD_ADDR_OWVAR 21
71535: PUSH
71536: LD_INT 0
71538: ST_TO_ADDR
// hc_sex := sex_male ;
71539: LD_ADDR_OWVAR 27
71543: PUSH
71544: LD_INT 1
71546: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71547: LD_ADDR_OWVAR 28
71551: PUSH
71552: LD_INT 16
71554: ST_TO_ADDR
// hc_gallery :=  ;
71555: LD_ADDR_OWVAR 33
71559: PUSH
71560: LD_STRING 
71562: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71563: LD_ADDR_OWVAR 31
71567: PUSH
71568: LD_INT 0
71570: PPUSH
71571: LD_INT 3
71573: PPUSH
71574: CALL_OW 12
71578: PUSH
71579: LD_INT 0
71581: PPUSH
71582: LD_INT 3
71584: PPUSH
71585: CALL_OW 12
71589: PUSH
71590: LD_INT 0
71592: PUSH
71593: LD_INT 0
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: ST_TO_ADDR
// end ;
71602: LD_VAR 0 1
71606: RET
// export function PrepareApeman ( agressivity ) ; begin
71607: LD_INT 0
71609: PPUSH
// uc_side := 0 ;
71610: LD_ADDR_OWVAR 20
71614: PUSH
71615: LD_INT 0
71617: ST_TO_ADDR
// uc_nation := 0 ;
71618: LD_ADDR_OWVAR 21
71622: PUSH
71623: LD_INT 0
71625: ST_TO_ADDR
// hc_sex := sex_male ;
71626: LD_ADDR_OWVAR 27
71630: PUSH
71631: LD_INT 1
71633: ST_TO_ADDR
// hc_class := class_apeman ;
71634: LD_ADDR_OWVAR 28
71638: PUSH
71639: LD_INT 12
71641: ST_TO_ADDR
// hc_gallery :=  ;
71642: LD_ADDR_OWVAR 33
71646: PUSH
71647: LD_STRING 
71649: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71650: LD_ADDR_OWVAR 35
71654: PUSH
71655: LD_VAR 0 1
71659: NEG
71660: PPUSH
71661: LD_VAR 0 1
71665: PPUSH
71666: CALL_OW 12
71670: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71671: LD_ADDR_OWVAR 31
71675: PUSH
71676: LD_INT 0
71678: PPUSH
71679: LD_INT 3
71681: PPUSH
71682: CALL_OW 12
71686: PUSH
71687: LD_INT 0
71689: PPUSH
71690: LD_INT 3
71692: PPUSH
71693: CALL_OW 12
71697: PUSH
71698: LD_INT 0
71700: PUSH
71701: LD_INT 0
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: ST_TO_ADDR
// end ;
71710: LD_VAR 0 2
71714: RET
// export function PrepareTiger ( agressivity ) ; begin
71715: LD_INT 0
71717: PPUSH
// uc_side := 0 ;
71718: LD_ADDR_OWVAR 20
71722: PUSH
71723: LD_INT 0
71725: ST_TO_ADDR
// uc_nation := 0 ;
71726: LD_ADDR_OWVAR 21
71730: PUSH
71731: LD_INT 0
71733: ST_TO_ADDR
// hc_class := class_tiger ;
71734: LD_ADDR_OWVAR 28
71738: PUSH
71739: LD_INT 14
71741: ST_TO_ADDR
// hc_gallery :=  ;
71742: LD_ADDR_OWVAR 33
71746: PUSH
71747: LD_STRING 
71749: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71750: LD_ADDR_OWVAR 35
71754: PUSH
71755: LD_VAR 0 1
71759: NEG
71760: PPUSH
71761: LD_VAR 0 1
71765: PPUSH
71766: CALL_OW 12
71770: ST_TO_ADDR
// end ;
71771: LD_VAR 0 2
71775: RET
// export function PrepareEnchidna ( ) ; begin
71776: LD_INT 0
71778: PPUSH
// uc_side := 0 ;
71779: LD_ADDR_OWVAR 20
71783: PUSH
71784: LD_INT 0
71786: ST_TO_ADDR
// uc_nation := 0 ;
71787: LD_ADDR_OWVAR 21
71791: PUSH
71792: LD_INT 0
71794: ST_TO_ADDR
// hc_class := class_baggie ;
71795: LD_ADDR_OWVAR 28
71799: PUSH
71800: LD_INT 13
71802: ST_TO_ADDR
// hc_gallery :=  ;
71803: LD_ADDR_OWVAR 33
71807: PUSH
71808: LD_STRING 
71810: ST_TO_ADDR
// end ;
71811: LD_VAR 0 1
71815: RET
// export function PrepareFrog ( ) ; begin
71816: LD_INT 0
71818: PPUSH
// uc_side := 0 ;
71819: LD_ADDR_OWVAR 20
71823: PUSH
71824: LD_INT 0
71826: ST_TO_ADDR
// uc_nation := 0 ;
71827: LD_ADDR_OWVAR 21
71831: PUSH
71832: LD_INT 0
71834: ST_TO_ADDR
// hc_class := class_frog ;
71835: LD_ADDR_OWVAR 28
71839: PUSH
71840: LD_INT 19
71842: ST_TO_ADDR
// hc_gallery :=  ;
71843: LD_ADDR_OWVAR 33
71847: PUSH
71848: LD_STRING 
71850: ST_TO_ADDR
// end ;
71851: LD_VAR 0 1
71855: RET
// export function PrepareFish ( ) ; begin
71856: LD_INT 0
71858: PPUSH
// uc_side := 0 ;
71859: LD_ADDR_OWVAR 20
71863: PUSH
71864: LD_INT 0
71866: ST_TO_ADDR
// uc_nation := 0 ;
71867: LD_ADDR_OWVAR 21
71871: PUSH
71872: LD_INT 0
71874: ST_TO_ADDR
// hc_class := class_fish ;
71875: LD_ADDR_OWVAR 28
71879: PUSH
71880: LD_INT 20
71882: ST_TO_ADDR
// hc_gallery :=  ;
71883: LD_ADDR_OWVAR 33
71887: PUSH
71888: LD_STRING 
71890: ST_TO_ADDR
// end ;
71891: LD_VAR 0 1
71895: RET
// export function PrepareBird ( ) ; begin
71896: LD_INT 0
71898: PPUSH
// uc_side := 0 ;
71899: LD_ADDR_OWVAR 20
71903: PUSH
71904: LD_INT 0
71906: ST_TO_ADDR
// uc_nation := 0 ;
71907: LD_ADDR_OWVAR 21
71911: PUSH
71912: LD_INT 0
71914: ST_TO_ADDR
// hc_class := class_phororhacos ;
71915: LD_ADDR_OWVAR 28
71919: PUSH
71920: LD_INT 18
71922: ST_TO_ADDR
// hc_gallery :=  ;
71923: LD_ADDR_OWVAR 33
71927: PUSH
71928: LD_STRING 
71930: ST_TO_ADDR
// end ;
71931: LD_VAR 0 1
71935: RET
// export function PrepareHorse ( ) ; begin
71936: LD_INT 0
71938: PPUSH
// uc_side := 0 ;
71939: LD_ADDR_OWVAR 20
71943: PUSH
71944: LD_INT 0
71946: ST_TO_ADDR
// uc_nation := 0 ;
71947: LD_ADDR_OWVAR 21
71951: PUSH
71952: LD_INT 0
71954: ST_TO_ADDR
// hc_class := class_horse ;
71955: LD_ADDR_OWVAR 28
71959: PUSH
71960: LD_INT 21
71962: ST_TO_ADDR
// hc_gallery :=  ;
71963: LD_ADDR_OWVAR 33
71967: PUSH
71968: LD_STRING 
71970: ST_TO_ADDR
// end ;
71971: LD_VAR 0 1
71975: RET
// export function PrepareMastodont ( ) ; begin
71976: LD_INT 0
71978: PPUSH
// uc_side := 0 ;
71979: LD_ADDR_OWVAR 20
71983: PUSH
71984: LD_INT 0
71986: ST_TO_ADDR
// uc_nation := 0 ;
71987: LD_ADDR_OWVAR 21
71991: PUSH
71992: LD_INT 0
71994: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71995: LD_ADDR_OWVAR 37
71999: PUSH
72000: LD_INT 31
72002: ST_TO_ADDR
// vc_control := control_rider ;
72003: LD_ADDR_OWVAR 38
72007: PUSH
72008: LD_INT 4
72010: ST_TO_ADDR
// end ;
72011: LD_VAR 0 1
72015: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72016: LD_INT 0
72018: PPUSH
72019: PPUSH
72020: PPUSH
// uc_side = 0 ;
72021: LD_ADDR_OWVAR 20
72025: PUSH
72026: LD_INT 0
72028: ST_TO_ADDR
// uc_nation = 0 ;
72029: LD_ADDR_OWVAR 21
72033: PUSH
72034: LD_INT 0
72036: ST_TO_ADDR
// InitHc_All ( ) ;
72037: CALL_OW 584
// InitVc ;
72041: CALL_OW 20
// if mastodonts then
72045: LD_VAR 0 6
72049: IFFALSE 72116
// for i = 1 to mastodonts do
72051: LD_ADDR_VAR 0 11
72055: PUSH
72056: DOUBLE
72057: LD_INT 1
72059: DEC
72060: ST_TO_ADDR
72061: LD_VAR 0 6
72065: PUSH
72066: FOR_TO
72067: IFFALSE 72114
// begin vc_chassis := 31 ;
72069: LD_ADDR_OWVAR 37
72073: PUSH
72074: LD_INT 31
72076: ST_TO_ADDR
// vc_control := control_rider ;
72077: LD_ADDR_OWVAR 38
72081: PUSH
72082: LD_INT 4
72084: ST_TO_ADDR
// animal := CreateVehicle ;
72085: LD_ADDR_VAR 0 12
72089: PUSH
72090: CALL_OW 45
72094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72095: LD_VAR 0 12
72099: PPUSH
72100: LD_VAR 0 8
72104: PPUSH
72105: LD_INT 0
72107: PPUSH
72108: CALL 74244 0 3
// end ;
72112: GO 72066
72114: POP
72115: POP
// if horses then
72116: LD_VAR 0 5
72120: IFFALSE 72187
// for i = 1 to horses do
72122: LD_ADDR_VAR 0 11
72126: PUSH
72127: DOUBLE
72128: LD_INT 1
72130: DEC
72131: ST_TO_ADDR
72132: LD_VAR 0 5
72136: PUSH
72137: FOR_TO
72138: IFFALSE 72185
// begin hc_class := 21 ;
72140: LD_ADDR_OWVAR 28
72144: PUSH
72145: LD_INT 21
72147: ST_TO_ADDR
// hc_gallery :=  ;
72148: LD_ADDR_OWVAR 33
72152: PUSH
72153: LD_STRING 
72155: ST_TO_ADDR
// animal := CreateHuman ;
72156: LD_ADDR_VAR 0 12
72160: PUSH
72161: CALL_OW 44
72165: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72166: LD_VAR 0 12
72170: PPUSH
72171: LD_VAR 0 8
72175: PPUSH
72176: LD_INT 0
72178: PPUSH
72179: CALL 74244 0 3
// end ;
72183: GO 72137
72185: POP
72186: POP
// if birds then
72187: LD_VAR 0 1
72191: IFFALSE 72258
// for i = 1 to birds do
72193: LD_ADDR_VAR 0 11
72197: PUSH
72198: DOUBLE
72199: LD_INT 1
72201: DEC
72202: ST_TO_ADDR
72203: LD_VAR 0 1
72207: PUSH
72208: FOR_TO
72209: IFFALSE 72256
// begin hc_class := 18 ;
72211: LD_ADDR_OWVAR 28
72215: PUSH
72216: LD_INT 18
72218: ST_TO_ADDR
// hc_gallery =  ;
72219: LD_ADDR_OWVAR 33
72223: PUSH
72224: LD_STRING 
72226: ST_TO_ADDR
// animal := CreateHuman ;
72227: LD_ADDR_VAR 0 12
72231: PUSH
72232: CALL_OW 44
72236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72237: LD_VAR 0 12
72241: PPUSH
72242: LD_VAR 0 8
72246: PPUSH
72247: LD_INT 0
72249: PPUSH
72250: CALL 74244 0 3
// end ;
72254: GO 72208
72256: POP
72257: POP
// if tigers then
72258: LD_VAR 0 2
72262: IFFALSE 72346
// for i = 1 to tigers do
72264: LD_ADDR_VAR 0 11
72268: PUSH
72269: DOUBLE
72270: LD_INT 1
72272: DEC
72273: ST_TO_ADDR
72274: LD_VAR 0 2
72278: PUSH
72279: FOR_TO
72280: IFFALSE 72344
// begin hc_class = class_tiger ;
72282: LD_ADDR_OWVAR 28
72286: PUSH
72287: LD_INT 14
72289: ST_TO_ADDR
// hc_gallery =  ;
72290: LD_ADDR_OWVAR 33
72294: PUSH
72295: LD_STRING 
72297: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72298: LD_ADDR_OWVAR 35
72302: PUSH
72303: LD_INT 7
72305: NEG
72306: PPUSH
72307: LD_INT 7
72309: PPUSH
72310: CALL_OW 12
72314: ST_TO_ADDR
// animal := CreateHuman ;
72315: LD_ADDR_VAR 0 12
72319: PUSH
72320: CALL_OW 44
72324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72325: LD_VAR 0 12
72329: PPUSH
72330: LD_VAR 0 8
72334: PPUSH
72335: LD_INT 0
72337: PPUSH
72338: CALL 74244 0 3
// end ;
72342: GO 72279
72344: POP
72345: POP
// if apemans then
72346: LD_VAR 0 3
72350: IFFALSE 72473
// for i = 1 to apemans do
72352: LD_ADDR_VAR 0 11
72356: PUSH
72357: DOUBLE
72358: LD_INT 1
72360: DEC
72361: ST_TO_ADDR
72362: LD_VAR 0 3
72366: PUSH
72367: FOR_TO
72368: IFFALSE 72471
// begin hc_class = class_apeman ;
72370: LD_ADDR_OWVAR 28
72374: PUSH
72375: LD_INT 12
72377: ST_TO_ADDR
// hc_gallery =  ;
72378: LD_ADDR_OWVAR 33
72382: PUSH
72383: LD_STRING 
72385: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72386: LD_ADDR_OWVAR 35
72390: PUSH
72391: LD_INT 2
72393: NEG
72394: PPUSH
72395: LD_INT 2
72397: PPUSH
72398: CALL_OW 12
72402: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72403: LD_ADDR_OWVAR 31
72407: PUSH
72408: LD_INT 1
72410: PPUSH
72411: LD_INT 3
72413: PPUSH
72414: CALL_OW 12
72418: PUSH
72419: LD_INT 1
72421: PPUSH
72422: LD_INT 3
72424: PPUSH
72425: CALL_OW 12
72429: PUSH
72430: LD_INT 0
72432: PUSH
72433: LD_INT 0
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: ST_TO_ADDR
// animal := CreateHuman ;
72442: LD_ADDR_VAR 0 12
72446: PUSH
72447: CALL_OW 44
72451: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72452: LD_VAR 0 12
72456: PPUSH
72457: LD_VAR 0 8
72461: PPUSH
72462: LD_INT 0
72464: PPUSH
72465: CALL 74244 0 3
// end ;
72469: GO 72367
72471: POP
72472: POP
// if enchidnas then
72473: LD_VAR 0 4
72477: IFFALSE 72544
// for i = 1 to enchidnas do
72479: LD_ADDR_VAR 0 11
72483: PUSH
72484: DOUBLE
72485: LD_INT 1
72487: DEC
72488: ST_TO_ADDR
72489: LD_VAR 0 4
72493: PUSH
72494: FOR_TO
72495: IFFALSE 72542
// begin hc_class = 13 ;
72497: LD_ADDR_OWVAR 28
72501: PUSH
72502: LD_INT 13
72504: ST_TO_ADDR
// hc_gallery =  ;
72505: LD_ADDR_OWVAR 33
72509: PUSH
72510: LD_STRING 
72512: ST_TO_ADDR
// animal := CreateHuman ;
72513: LD_ADDR_VAR 0 12
72517: PUSH
72518: CALL_OW 44
72522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72523: LD_VAR 0 12
72527: PPUSH
72528: LD_VAR 0 8
72532: PPUSH
72533: LD_INT 0
72535: PPUSH
72536: CALL 74244 0 3
// end ;
72540: GO 72494
72542: POP
72543: POP
// if fishes then
72544: LD_VAR 0 7
72548: IFFALSE 72615
// for i = 1 to fishes do
72550: LD_ADDR_VAR 0 11
72554: PUSH
72555: DOUBLE
72556: LD_INT 1
72558: DEC
72559: ST_TO_ADDR
72560: LD_VAR 0 7
72564: PUSH
72565: FOR_TO
72566: IFFALSE 72613
// begin hc_class = 20 ;
72568: LD_ADDR_OWVAR 28
72572: PUSH
72573: LD_INT 20
72575: ST_TO_ADDR
// hc_gallery =  ;
72576: LD_ADDR_OWVAR 33
72580: PUSH
72581: LD_STRING 
72583: ST_TO_ADDR
// animal := CreateHuman ;
72584: LD_ADDR_VAR 0 12
72588: PUSH
72589: CALL_OW 44
72593: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72594: LD_VAR 0 12
72598: PPUSH
72599: LD_VAR 0 9
72603: PPUSH
72604: LD_INT 0
72606: PPUSH
72607: CALL 74244 0 3
// end ;
72611: GO 72565
72613: POP
72614: POP
// end ;
72615: LD_VAR 0 10
72619: RET
// export function WantHeal ( sci , unit ) ; begin
72620: LD_INT 0
72622: PPUSH
// if GetTaskList ( sci ) > 0 then
72623: LD_VAR 0 1
72627: PPUSH
72628: CALL_OW 437
72632: PUSH
72633: LD_INT 0
72635: GREATER
72636: IFFALSE 72706
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72638: LD_VAR 0 1
72642: PPUSH
72643: CALL_OW 437
72647: PUSH
72648: LD_INT 1
72650: ARRAY
72651: PUSH
72652: LD_INT 1
72654: ARRAY
72655: PUSH
72656: LD_STRING l
72658: EQUAL
72659: PUSH
72660: LD_VAR 0 1
72664: PPUSH
72665: CALL_OW 437
72669: PUSH
72670: LD_INT 1
72672: ARRAY
72673: PUSH
72674: LD_INT 4
72676: ARRAY
72677: PUSH
72678: LD_VAR 0 2
72682: EQUAL
72683: AND
72684: IFFALSE 72696
// result := true else
72686: LD_ADDR_VAR 0 3
72690: PUSH
72691: LD_INT 1
72693: ST_TO_ADDR
72694: GO 72704
// result := false ;
72696: LD_ADDR_VAR 0 3
72700: PUSH
72701: LD_INT 0
72703: ST_TO_ADDR
// end else
72704: GO 72714
// result := false ;
72706: LD_ADDR_VAR 0 3
72710: PUSH
72711: LD_INT 0
72713: ST_TO_ADDR
// end ;
72714: LD_VAR 0 3
72718: RET
// export function HealTarget ( sci ) ; begin
72719: LD_INT 0
72721: PPUSH
// if not sci then
72722: LD_VAR 0 1
72726: NOT
72727: IFFALSE 72731
// exit ;
72729: GO 72796
// result := 0 ;
72731: LD_ADDR_VAR 0 2
72735: PUSH
72736: LD_INT 0
72738: ST_TO_ADDR
// if GetTaskList ( sci ) then
72739: LD_VAR 0 1
72743: PPUSH
72744: CALL_OW 437
72748: IFFALSE 72796
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72750: LD_VAR 0 1
72754: PPUSH
72755: CALL_OW 437
72759: PUSH
72760: LD_INT 1
72762: ARRAY
72763: PUSH
72764: LD_INT 1
72766: ARRAY
72767: PUSH
72768: LD_STRING l
72770: EQUAL
72771: IFFALSE 72796
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72773: LD_ADDR_VAR 0 2
72777: PUSH
72778: LD_VAR 0 1
72782: PPUSH
72783: CALL_OW 437
72787: PUSH
72788: LD_INT 1
72790: ARRAY
72791: PUSH
72792: LD_INT 4
72794: ARRAY
72795: ST_TO_ADDR
// end ;
72796: LD_VAR 0 2
72800: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72801: LD_INT 0
72803: PPUSH
72804: PPUSH
72805: PPUSH
72806: PPUSH
// if not base_units then
72807: LD_VAR 0 1
72811: NOT
72812: IFFALSE 72816
// exit ;
72814: GO 72903
// result := false ;
72816: LD_ADDR_VAR 0 2
72820: PUSH
72821: LD_INT 0
72823: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72824: LD_ADDR_VAR 0 5
72828: PUSH
72829: LD_VAR 0 1
72833: PPUSH
72834: LD_INT 21
72836: PUSH
72837: LD_INT 3
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: PPUSH
72844: CALL_OW 72
72848: ST_TO_ADDR
// if not tmp then
72849: LD_VAR 0 5
72853: NOT
72854: IFFALSE 72858
// exit ;
72856: GO 72903
// for i in tmp do
72858: LD_ADDR_VAR 0 3
72862: PUSH
72863: LD_VAR 0 5
72867: PUSH
72868: FOR_IN
72869: IFFALSE 72901
// begin result := EnemyInRange ( i , 22 ) ;
72871: LD_ADDR_VAR 0 2
72875: PUSH
72876: LD_VAR 0 3
72880: PPUSH
72881: LD_INT 22
72883: PPUSH
72884: CALL 70501 0 2
72888: ST_TO_ADDR
// if result then
72889: LD_VAR 0 2
72893: IFFALSE 72899
// exit ;
72895: POP
72896: POP
72897: GO 72903
// end ;
72899: GO 72868
72901: POP
72902: POP
// end ;
72903: LD_VAR 0 2
72907: RET
// export function FilterByTag ( units , tag ) ; begin
72908: LD_INT 0
72910: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72911: LD_ADDR_VAR 0 3
72915: PUSH
72916: LD_VAR 0 1
72920: PPUSH
72921: LD_INT 120
72923: PUSH
72924: LD_VAR 0 2
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PPUSH
72933: CALL_OW 72
72937: ST_TO_ADDR
// end ;
72938: LD_VAR 0 3
72942: RET
// export function IsDriver ( un ) ; begin
72943: LD_INT 0
72945: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72946: LD_ADDR_VAR 0 2
72950: PUSH
72951: LD_VAR 0 1
72955: PUSH
72956: LD_INT 55
72958: PUSH
72959: EMPTY
72960: LIST
72961: PPUSH
72962: CALL_OW 69
72966: IN
72967: ST_TO_ADDR
// end ;
72968: LD_VAR 0 2
72972: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72973: LD_INT 0
72975: PPUSH
72976: PPUSH
// list := [ ] ;
72977: LD_ADDR_VAR 0 5
72981: PUSH
72982: EMPTY
72983: ST_TO_ADDR
// case d of 0 :
72984: LD_VAR 0 3
72988: PUSH
72989: LD_INT 0
72991: DOUBLE
72992: EQUAL
72993: IFTRUE 72997
72995: GO 73130
72997: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72998: LD_ADDR_VAR 0 5
73002: PUSH
73003: LD_VAR 0 1
73007: PUSH
73008: LD_INT 4
73010: MINUS
73011: PUSH
73012: LD_VAR 0 2
73016: PUSH
73017: LD_INT 4
73019: MINUS
73020: PUSH
73021: LD_INT 2
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: LIST
73028: PUSH
73029: LD_VAR 0 1
73033: PUSH
73034: LD_INT 3
73036: MINUS
73037: PUSH
73038: LD_VAR 0 2
73042: PUSH
73043: LD_INT 1
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: LIST
73050: PUSH
73051: LD_VAR 0 1
73055: PUSH
73056: LD_INT 4
73058: PLUS
73059: PUSH
73060: LD_VAR 0 2
73064: PUSH
73065: LD_INT 4
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: LIST
73072: PUSH
73073: LD_VAR 0 1
73077: PUSH
73078: LD_INT 3
73080: PLUS
73081: PUSH
73082: LD_VAR 0 2
73086: PUSH
73087: LD_INT 3
73089: PLUS
73090: PUSH
73091: LD_INT 5
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: LIST
73098: PUSH
73099: LD_VAR 0 1
73103: PUSH
73104: LD_VAR 0 2
73108: PUSH
73109: LD_INT 4
73111: PLUS
73112: PUSH
73113: LD_INT 0
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: LIST
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: ST_TO_ADDR
// end ; 1 :
73128: GO 73828
73130: LD_INT 1
73132: DOUBLE
73133: EQUAL
73134: IFTRUE 73138
73136: GO 73271
73138: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73139: LD_ADDR_VAR 0 5
73143: PUSH
73144: LD_VAR 0 1
73148: PUSH
73149: LD_VAR 0 2
73153: PUSH
73154: LD_INT 4
73156: MINUS
73157: PUSH
73158: LD_INT 3
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: LIST
73165: PUSH
73166: LD_VAR 0 1
73170: PUSH
73171: LD_INT 3
73173: MINUS
73174: PUSH
73175: LD_VAR 0 2
73179: PUSH
73180: LD_INT 3
73182: MINUS
73183: PUSH
73184: LD_INT 2
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: LIST
73191: PUSH
73192: LD_VAR 0 1
73196: PUSH
73197: LD_INT 4
73199: MINUS
73200: PUSH
73201: LD_VAR 0 2
73205: PUSH
73206: LD_INT 1
73208: PUSH
73209: EMPTY
73210: LIST
73211: LIST
73212: LIST
73213: PUSH
73214: LD_VAR 0 1
73218: PUSH
73219: LD_VAR 0 2
73223: PUSH
73224: LD_INT 3
73226: PLUS
73227: PUSH
73228: LD_INT 0
73230: PUSH
73231: EMPTY
73232: LIST
73233: LIST
73234: LIST
73235: PUSH
73236: LD_VAR 0 1
73240: PUSH
73241: LD_INT 4
73243: PLUS
73244: PUSH
73245: LD_VAR 0 2
73249: PUSH
73250: LD_INT 4
73252: PLUS
73253: PUSH
73254: LD_INT 5
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: LIST
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: ST_TO_ADDR
// end ; 2 :
73269: GO 73828
73271: LD_INT 2
73273: DOUBLE
73274: EQUAL
73275: IFTRUE 73279
73277: GO 73408
73279: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73280: LD_ADDR_VAR 0 5
73284: PUSH
73285: LD_VAR 0 1
73289: PUSH
73290: LD_VAR 0 2
73294: PUSH
73295: LD_INT 3
73297: MINUS
73298: PUSH
73299: LD_INT 3
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: LIST
73306: PUSH
73307: LD_VAR 0 1
73311: PUSH
73312: LD_INT 4
73314: PLUS
73315: PUSH
73316: LD_VAR 0 2
73320: PUSH
73321: LD_INT 4
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: LIST
73328: PUSH
73329: LD_VAR 0 1
73333: PUSH
73334: LD_VAR 0 2
73338: PUSH
73339: LD_INT 4
73341: PLUS
73342: PUSH
73343: LD_INT 0
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: LIST
73350: PUSH
73351: LD_VAR 0 1
73355: PUSH
73356: LD_INT 3
73358: MINUS
73359: PUSH
73360: LD_VAR 0 2
73364: PUSH
73365: LD_INT 1
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: LIST
73372: PUSH
73373: LD_VAR 0 1
73377: PUSH
73378: LD_INT 4
73380: MINUS
73381: PUSH
73382: LD_VAR 0 2
73386: PUSH
73387: LD_INT 4
73389: MINUS
73390: PUSH
73391: LD_INT 2
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: LIST
73398: PUSH
73399: EMPTY
73400: LIST
73401: LIST
73402: LIST
73403: LIST
73404: LIST
73405: ST_TO_ADDR
// end ; 3 :
73406: GO 73828
73408: LD_INT 3
73410: DOUBLE
73411: EQUAL
73412: IFTRUE 73416
73414: GO 73549
73416: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73417: LD_ADDR_VAR 0 5
73421: PUSH
73422: LD_VAR 0 1
73426: PUSH
73427: LD_INT 3
73429: PLUS
73430: PUSH
73431: LD_VAR 0 2
73435: PUSH
73436: LD_INT 4
73438: PUSH
73439: EMPTY
73440: LIST
73441: LIST
73442: LIST
73443: PUSH
73444: LD_VAR 0 1
73448: PUSH
73449: LD_INT 4
73451: PLUS
73452: PUSH
73453: LD_VAR 0 2
73457: PUSH
73458: LD_INT 4
73460: PLUS
73461: PUSH
73462: LD_INT 5
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: LIST
73469: PUSH
73470: LD_VAR 0 1
73474: PUSH
73475: LD_INT 4
73477: MINUS
73478: PUSH
73479: LD_VAR 0 2
73483: PUSH
73484: LD_INT 1
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: LIST
73491: PUSH
73492: LD_VAR 0 1
73496: PUSH
73497: LD_VAR 0 2
73501: PUSH
73502: LD_INT 4
73504: MINUS
73505: PUSH
73506: LD_INT 3
73508: PUSH
73509: EMPTY
73510: LIST
73511: LIST
73512: LIST
73513: PUSH
73514: LD_VAR 0 1
73518: PUSH
73519: LD_INT 3
73521: MINUS
73522: PUSH
73523: LD_VAR 0 2
73527: PUSH
73528: LD_INT 3
73530: MINUS
73531: PUSH
73532: LD_INT 2
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: LIST
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: ST_TO_ADDR
// end ; 4 :
73547: GO 73828
73549: LD_INT 4
73551: DOUBLE
73552: EQUAL
73553: IFTRUE 73557
73555: GO 73690
73557: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73558: LD_ADDR_VAR 0 5
73562: PUSH
73563: LD_VAR 0 1
73567: PUSH
73568: LD_VAR 0 2
73572: PUSH
73573: LD_INT 4
73575: PLUS
73576: PUSH
73577: LD_INT 0
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: LIST
73584: PUSH
73585: LD_VAR 0 1
73589: PUSH
73590: LD_INT 3
73592: PLUS
73593: PUSH
73594: LD_VAR 0 2
73598: PUSH
73599: LD_INT 3
73601: PLUS
73602: PUSH
73603: LD_INT 5
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: LIST
73610: PUSH
73611: LD_VAR 0 1
73615: PUSH
73616: LD_INT 4
73618: PLUS
73619: PUSH
73620: LD_VAR 0 2
73624: PUSH
73625: LD_INT 4
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: LIST
73632: PUSH
73633: LD_VAR 0 1
73637: PUSH
73638: LD_VAR 0 2
73642: PUSH
73643: LD_INT 3
73645: MINUS
73646: PUSH
73647: LD_INT 3
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: LIST
73654: PUSH
73655: LD_VAR 0 1
73659: PUSH
73660: LD_INT 4
73662: MINUS
73663: PUSH
73664: LD_VAR 0 2
73668: PUSH
73669: LD_INT 4
73671: MINUS
73672: PUSH
73673: LD_INT 2
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: LIST
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: ST_TO_ADDR
// end ; 5 :
73688: GO 73828
73690: LD_INT 5
73692: DOUBLE
73693: EQUAL
73694: IFTRUE 73698
73696: GO 73827
73698: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73699: LD_ADDR_VAR 0 5
73703: PUSH
73704: LD_VAR 0 1
73708: PUSH
73709: LD_INT 4
73711: MINUS
73712: PUSH
73713: LD_VAR 0 2
73717: PUSH
73718: LD_INT 1
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: LIST
73725: PUSH
73726: LD_VAR 0 1
73730: PUSH
73731: LD_VAR 0 2
73735: PUSH
73736: LD_INT 4
73738: MINUS
73739: PUSH
73740: LD_INT 3
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: LIST
73747: PUSH
73748: LD_VAR 0 1
73752: PUSH
73753: LD_INT 4
73755: PLUS
73756: PUSH
73757: LD_VAR 0 2
73761: PUSH
73762: LD_INT 4
73764: PLUS
73765: PUSH
73766: LD_INT 5
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: LIST
73773: PUSH
73774: LD_VAR 0 1
73778: PUSH
73779: LD_INT 3
73781: PLUS
73782: PUSH
73783: LD_VAR 0 2
73787: PUSH
73788: LD_INT 4
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: LIST
73795: PUSH
73796: LD_VAR 0 1
73800: PUSH
73801: LD_VAR 0 2
73805: PUSH
73806: LD_INT 3
73808: PLUS
73809: PUSH
73810: LD_INT 0
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: LIST
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: ST_TO_ADDR
// end ; end ;
73825: GO 73828
73827: POP
// result := list ;
73828: LD_ADDR_VAR 0 4
73832: PUSH
73833: LD_VAR 0 5
73837: ST_TO_ADDR
// end ;
73838: LD_VAR 0 4
73842: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73843: LD_INT 0
73845: PPUSH
73846: PPUSH
73847: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73848: LD_VAR 0 1
73852: NOT
73853: PUSH
73854: LD_VAR 0 2
73858: PUSH
73859: LD_INT 1
73861: PUSH
73862: LD_INT 2
73864: PUSH
73865: LD_INT 3
73867: PUSH
73868: LD_INT 4
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: IN
73877: NOT
73878: OR
73879: IFFALSE 73883
// exit ;
73881: GO 73966
// tmp := [ ] ;
73883: LD_ADDR_VAR 0 5
73887: PUSH
73888: EMPTY
73889: ST_TO_ADDR
// for i in units do
73890: LD_ADDR_VAR 0 4
73894: PUSH
73895: LD_VAR 0 1
73899: PUSH
73900: FOR_IN
73901: IFFALSE 73935
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
73903: LD_ADDR_VAR 0 5
73907: PUSH
73908: LD_VAR 0 5
73912: PPUSH
73913: LD_VAR 0 4
73917: PPUSH
73918: LD_VAR 0 2
73922: PPUSH
73923: CALL_OW 259
73927: PPUSH
73928: CALL 75339 0 2
73932: ST_TO_ADDR
73933: GO 73900
73935: POP
73936: POP
// if not tmp then
73937: LD_VAR 0 5
73941: NOT
73942: IFFALSE 73946
// exit ;
73944: GO 73966
// result := SortListByListDesc ( units , tmp ) ;
73946: LD_ADDR_VAR 0 3
73950: PUSH
73951: LD_VAR 0 1
73955: PPUSH
73956: LD_VAR 0 5
73960: PPUSH
73961: CALL_OW 77
73965: ST_TO_ADDR
// end ;
73966: LD_VAR 0 3
73970: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73971: LD_INT 0
73973: PPUSH
73974: PPUSH
73975: PPUSH
// result := false ;
73976: LD_ADDR_VAR 0 3
73980: PUSH
73981: LD_INT 0
73983: ST_TO_ADDR
// if not building then
73984: LD_VAR 0 2
73988: NOT
73989: IFFALSE 73993
// exit ;
73991: GO 74131
// x := GetX ( building ) ;
73993: LD_ADDR_VAR 0 4
73997: PUSH
73998: LD_VAR 0 2
74002: PPUSH
74003: CALL_OW 250
74007: ST_TO_ADDR
// y := GetY ( building ) ;
74008: LD_ADDR_VAR 0 5
74012: PUSH
74013: LD_VAR 0 2
74017: PPUSH
74018: CALL_OW 251
74022: ST_TO_ADDR
// if not x or not y then
74023: LD_VAR 0 4
74027: NOT
74028: PUSH
74029: LD_VAR 0 5
74033: NOT
74034: OR
74035: IFFALSE 74039
// exit ;
74037: GO 74131
// if GetTaskList ( unit ) then
74039: LD_VAR 0 1
74043: PPUSH
74044: CALL_OW 437
74048: IFFALSE 74131
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74050: LD_STRING e
74052: PUSH
74053: LD_VAR 0 1
74057: PPUSH
74058: CALL_OW 437
74062: PUSH
74063: LD_INT 1
74065: ARRAY
74066: PUSH
74067: LD_INT 1
74069: ARRAY
74070: EQUAL
74071: PUSH
74072: LD_VAR 0 4
74076: PUSH
74077: LD_VAR 0 1
74081: PPUSH
74082: CALL_OW 437
74086: PUSH
74087: LD_INT 1
74089: ARRAY
74090: PUSH
74091: LD_INT 2
74093: ARRAY
74094: EQUAL
74095: AND
74096: PUSH
74097: LD_VAR 0 5
74101: PUSH
74102: LD_VAR 0 1
74106: PPUSH
74107: CALL_OW 437
74111: PUSH
74112: LD_INT 1
74114: ARRAY
74115: PUSH
74116: LD_INT 3
74118: ARRAY
74119: EQUAL
74120: AND
74121: IFFALSE 74131
// result := true end ;
74123: LD_ADDR_VAR 0 3
74127: PUSH
74128: LD_INT 1
74130: ST_TO_ADDR
// end ;
74131: LD_VAR 0 3
74135: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74136: LD_INT 0
74138: PPUSH
// result := false ;
74139: LD_ADDR_VAR 0 4
74143: PUSH
74144: LD_INT 0
74146: ST_TO_ADDR
// if GetTaskList ( unit ) then
74147: LD_VAR 0 1
74151: PPUSH
74152: CALL_OW 437
74156: IFFALSE 74239
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74158: LD_STRING M
74160: PUSH
74161: LD_VAR 0 1
74165: PPUSH
74166: CALL_OW 437
74170: PUSH
74171: LD_INT 1
74173: ARRAY
74174: PUSH
74175: LD_INT 1
74177: ARRAY
74178: EQUAL
74179: PUSH
74180: LD_VAR 0 2
74184: PUSH
74185: LD_VAR 0 1
74189: PPUSH
74190: CALL_OW 437
74194: PUSH
74195: LD_INT 1
74197: ARRAY
74198: PUSH
74199: LD_INT 2
74201: ARRAY
74202: EQUAL
74203: AND
74204: PUSH
74205: LD_VAR 0 3
74209: PUSH
74210: LD_VAR 0 1
74214: PPUSH
74215: CALL_OW 437
74219: PUSH
74220: LD_INT 1
74222: ARRAY
74223: PUSH
74224: LD_INT 3
74226: ARRAY
74227: EQUAL
74228: AND
74229: IFFALSE 74239
// result := true ;
74231: LD_ADDR_VAR 0 4
74235: PUSH
74236: LD_INT 1
74238: ST_TO_ADDR
// end ; end ;
74239: LD_VAR 0 4
74243: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74244: LD_INT 0
74246: PPUSH
74247: PPUSH
74248: PPUSH
74249: PPUSH
// if not unit or not area then
74250: LD_VAR 0 1
74254: NOT
74255: PUSH
74256: LD_VAR 0 2
74260: NOT
74261: OR
74262: IFFALSE 74266
// exit ;
74264: GO 74442
// tmp := AreaToList ( area , i ) ;
74266: LD_ADDR_VAR 0 6
74270: PUSH
74271: LD_VAR 0 2
74275: PPUSH
74276: LD_VAR 0 5
74280: PPUSH
74281: CALL_OW 517
74285: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74286: LD_ADDR_VAR 0 5
74290: PUSH
74291: DOUBLE
74292: LD_INT 1
74294: DEC
74295: ST_TO_ADDR
74296: LD_VAR 0 6
74300: PUSH
74301: LD_INT 1
74303: ARRAY
74304: PUSH
74305: FOR_TO
74306: IFFALSE 74440
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74308: LD_ADDR_VAR 0 7
74312: PUSH
74313: LD_VAR 0 6
74317: PUSH
74318: LD_INT 1
74320: ARRAY
74321: PUSH
74322: LD_VAR 0 5
74326: ARRAY
74327: PUSH
74328: LD_VAR 0 6
74332: PUSH
74333: LD_INT 2
74335: ARRAY
74336: PUSH
74337: LD_VAR 0 5
74341: ARRAY
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
74347: LD_INT 92
74349: PUSH
74350: LD_VAR 0 7
74354: PUSH
74355: LD_INT 1
74357: ARRAY
74358: PUSH
74359: LD_VAR 0 7
74363: PUSH
74364: LD_INT 2
74366: ARRAY
74367: PUSH
74368: LD_INT 2
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: PPUSH
74377: CALL_OW 69
74381: PUSH
74382: LD_INT 0
74384: EQUAL
74385: IFFALSE 74438
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74387: LD_VAR 0 1
74391: PPUSH
74392: LD_VAR 0 7
74396: PUSH
74397: LD_INT 1
74399: ARRAY
74400: PPUSH
74401: LD_VAR 0 7
74405: PUSH
74406: LD_INT 2
74408: ARRAY
74409: PPUSH
74410: LD_VAR 0 3
74414: PPUSH
74415: CALL_OW 48
// result := IsPlaced ( unit ) ;
74419: LD_ADDR_VAR 0 4
74423: PUSH
74424: LD_VAR 0 1
74428: PPUSH
74429: CALL_OW 305
74433: ST_TO_ADDR
// exit ;
74434: POP
74435: POP
74436: GO 74442
// end ; end ;
74438: GO 74305
74440: POP
74441: POP
// end ;
74442: LD_VAR 0 4
74446: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74447: LD_INT 0
74449: PPUSH
74450: PPUSH
74451: PPUSH
// if not side or side > 8 then
74452: LD_VAR 0 1
74456: NOT
74457: PUSH
74458: LD_VAR 0 1
74462: PUSH
74463: LD_INT 8
74465: GREATER
74466: OR
74467: IFFALSE 74471
// exit ;
74469: GO 74658
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74471: LD_ADDR_VAR 0 4
74475: PUSH
74476: LD_INT 22
74478: PUSH
74479: LD_VAR 0 1
74483: PUSH
74484: EMPTY
74485: LIST
74486: LIST
74487: PUSH
74488: LD_INT 21
74490: PUSH
74491: LD_INT 3
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: PPUSH
74502: CALL_OW 69
74506: ST_TO_ADDR
// if not tmp then
74507: LD_VAR 0 4
74511: NOT
74512: IFFALSE 74516
// exit ;
74514: GO 74658
// enable_addtolog := true ;
74516: LD_ADDR_OWVAR 81
74520: PUSH
74521: LD_INT 1
74523: ST_TO_ADDR
// AddToLog ( [ ) ;
74524: LD_STRING [
74526: PPUSH
74527: CALL_OW 561
// for i in tmp do
74531: LD_ADDR_VAR 0 3
74535: PUSH
74536: LD_VAR 0 4
74540: PUSH
74541: FOR_IN
74542: IFFALSE 74649
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74544: LD_STRING [
74546: PUSH
74547: LD_VAR 0 3
74551: PPUSH
74552: CALL_OW 266
74556: STR
74557: PUSH
74558: LD_STRING , 
74560: STR
74561: PUSH
74562: LD_VAR 0 3
74566: PPUSH
74567: CALL_OW 250
74571: STR
74572: PUSH
74573: LD_STRING , 
74575: STR
74576: PUSH
74577: LD_VAR 0 3
74581: PPUSH
74582: CALL_OW 251
74586: STR
74587: PUSH
74588: LD_STRING , 
74590: STR
74591: PUSH
74592: LD_VAR 0 3
74596: PPUSH
74597: CALL_OW 254
74601: STR
74602: PUSH
74603: LD_STRING , 
74605: STR
74606: PUSH
74607: LD_VAR 0 3
74611: PPUSH
74612: LD_INT 1
74614: PPUSH
74615: CALL_OW 268
74619: STR
74620: PUSH
74621: LD_STRING , 
74623: STR
74624: PUSH
74625: LD_VAR 0 3
74629: PPUSH
74630: LD_INT 2
74632: PPUSH
74633: CALL_OW 268
74637: STR
74638: PUSH
74639: LD_STRING ],
74641: STR
74642: PPUSH
74643: CALL_OW 561
// end ;
74647: GO 74541
74649: POP
74650: POP
// AddToLog ( ]; ) ;
74651: LD_STRING ];
74653: PPUSH
74654: CALL_OW 561
// end ;
74658: LD_VAR 0 2
74662: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74663: LD_INT 0
74665: PPUSH
74666: PPUSH
74667: PPUSH
74668: PPUSH
74669: PPUSH
// if not area or not rate or not max then
74670: LD_VAR 0 1
74674: NOT
74675: PUSH
74676: LD_VAR 0 2
74680: NOT
74681: OR
74682: PUSH
74683: LD_VAR 0 4
74687: NOT
74688: OR
74689: IFFALSE 74693
// exit ;
74691: GO 74882
// while 1 do
74693: LD_INT 1
74695: IFFALSE 74882
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74697: LD_ADDR_VAR 0 9
74701: PUSH
74702: LD_VAR 0 1
74706: PPUSH
74707: LD_INT 1
74709: PPUSH
74710: CALL_OW 287
74714: PUSH
74715: LD_INT 10
74717: MUL
74718: ST_TO_ADDR
// r := rate / 10 ;
74719: LD_ADDR_VAR 0 7
74723: PUSH
74724: LD_VAR 0 2
74728: PUSH
74729: LD_INT 10
74731: DIVREAL
74732: ST_TO_ADDR
// time := 1 1$00 ;
74733: LD_ADDR_VAR 0 8
74737: PUSH
74738: LD_INT 2100
74740: ST_TO_ADDR
// if amount < min then
74741: LD_VAR 0 9
74745: PUSH
74746: LD_VAR 0 3
74750: LESS
74751: IFFALSE 74769
// r := r * 2 else
74753: LD_ADDR_VAR 0 7
74757: PUSH
74758: LD_VAR 0 7
74762: PUSH
74763: LD_INT 2
74765: MUL
74766: ST_TO_ADDR
74767: GO 74795
// if amount > max then
74769: LD_VAR 0 9
74773: PUSH
74774: LD_VAR 0 4
74778: GREATER
74779: IFFALSE 74795
// r := r / 2 ;
74781: LD_ADDR_VAR 0 7
74785: PUSH
74786: LD_VAR 0 7
74790: PUSH
74791: LD_INT 2
74793: DIVREAL
74794: ST_TO_ADDR
// time := time / r ;
74795: LD_ADDR_VAR 0 8
74799: PUSH
74800: LD_VAR 0 8
74804: PUSH
74805: LD_VAR 0 7
74809: DIVREAL
74810: ST_TO_ADDR
// if time < 0 then
74811: LD_VAR 0 8
74815: PUSH
74816: LD_INT 0
74818: LESS
74819: IFFALSE 74836
// time := time * - 1 ;
74821: LD_ADDR_VAR 0 8
74825: PUSH
74826: LD_VAR 0 8
74830: PUSH
74831: LD_INT 1
74833: NEG
74834: MUL
74835: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74836: LD_VAR 0 8
74840: PUSH
74841: LD_INT 35
74843: PPUSH
74844: LD_INT 875
74846: PPUSH
74847: CALL_OW 12
74851: PLUS
74852: PPUSH
74853: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74857: LD_INT 1
74859: PPUSH
74860: LD_INT 5
74862: PPUSH
74863: CALL_OW 12
74867: PPUSH
74868: LD_VAR 0 1
74872: PPUSH
74873: LD_INT 1
74875: PPUSH
74876: CALL_OW 55
// end ;
74880: GO 74693
// end ;
74882: LD_VAR 0 5
74886: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74887: LD_INT 0
74889: PPUSH
74890: PPUSH
74891: PPUSH
74892: PPUSH
74893: PPUSH
74894: PPUSH
74895: PPUSH
74896: PPUSH
// if not turrets or not factories then
74897: LD_VAR 0 1
74901: NOT
74902: PUSH
74903: LD_VAR 0 2
74907: NOT
74908: OR
74909: IFFALSE 74913
// exit ;
74911: GO 75220
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74913: LD_ADDR_VAR 0 10
74917: PUSH
74918: LD_INT 5
74920: PUSH
74921: LD_INT 6
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: PUSH
74928: LD_INT 2
74930: PUSH
74931: LD_INT 4
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: PUSH
74938: LD_INT 3
74940: PUSH
74941: LD_INT 5
74943: PUSH
74944: EMPTY
74945: LIST
74946: LIST
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: LIST
74952: PUSH
74953: LD_INT 24
74955: PUSH
74956: LD_INT 25
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: PUSH
74963: LD_INT 23
74965: PUSH
74966: LD_INT 27
74968: PUSH
74969: EMPTY
74970: LIST
74971: LIST
74972: PUSH
74973: EMPTY
74974: LIST
74975: LIST
74976: PUSH
74977: LD_INT 42
74979: PUSH
74980: LD_INT 43
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: LD_INT 44
74989: PUSH
74990: LD_INT 46
74992: PUSH
74993: EMPTY
74994: LIST
74995: LIST
74996: PUSH
74997: LD_INT 45
74999: PUSH
75000: LD_INT 47
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: LIST
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: LIST
75016: ST_TO_ADDR
// result := [ ] ;
75017: LD_ADDR_VAR 0 3
75021: PUSH
75022: EMPTY
75023: ST_TO_ADDR
// for i in turrets do
75024: LD_ADDR_VAR 0 4
75028: PUSH
75029: LD_VAR 0 1
75033: PUSH
75034: FOR_IN
75035: IFFALSE 75218
// begin nat := GetNation ( i ) ;
75037: LD_ADDR_VAR 0 7
75041: PUSH
75042: LD_VAR 0 4
75046: PPUSH
75047: CALL_OW 248
75051: ST_TO_ADDR
// weapon := 0 ;
75052: LD_ADDR_VAR 0 8
75056: PUSH
75057: LD_INT 0
75059: ST_TO_ADDR
// if not nat then
75060: LD_VAR 0 7
75064: NOT
75065: IFFALSE 75069
// continue ;
75067: GO 75034
// for j in list [ nat ] do
75069: LD_ADDR_VAR 0 5
75073: PUSH
75074: LD_VAR 0 10
75078: PUSH
75079: LD_VAR 0 7
75083: ARRAY
75084: PUSH
75085: FOR_IN
75086: IFFALSE 75127
// if GetBWeapon ( i ) = j [ 1 ] then
75088: LD_VAR 0 4
75092: PPUSH
75093: CALL_OW 269
75097: PUSH
75098: LD_VAR 0 5
75102: PUSH
75103: LD_INT 1
75105: ARRAY
75106: EQUAL
75107: IFFALSE 75125
// begin weapon := j [ 2 ] ;
75109: LD_ADDR_VAR 0 8
75113: PUSH
75114: LD_VAR 0 5
75118: PUSH
75119: LD_INT 2
75121: ARRAY
75122: ST_TO_ADDR
// break ;
75123: GO 75127
// end ;
75125: GO 75085
75127: POP
75128: POP
// if not weapon then
75129: LD_VAR 0 8
75133: NOT
75134: IFFALSE 75138
// continue ;
75136: GO 75034
// for k in factories do
75138: LD_ADDR_VAR 0 6
75142: PUSH
75143: LD_VAR 0 2
75147: PUSH
75148: FOR_IN
75149: IFFALSE 75214
// begin weapons := AvailableWeaponList ( k ) ;
75151: LD_ADDR_VAR 0 9
75155: PUSH
75156: LD_VAR 0 6
75160: PPUSH
75161: CALL_OW 478
75165: ST_TO_ADDR
// if not weapons then
75166: LD_VAR 0 9
75170: NOT
75171: IFFALSE 75175
// continue ;
75173: GO 75148
// if weapon in weapons then
75175: LD_VAR 0 8
75179: PUSH
75180: LD_VAR 0 9
75184: IN
75185: IFFALSE 75212
// begin result := [ i , weapon ] ;
75187: LD_ADDR_VAR 0 3
75191: PUSH
75192: LD_VAR 0 4
75196: PUSH
75197: LD_VAR 0 8
75201: PUSH
75202: EMPTY
75203: LIST
75204: LIST
75205: ST_TO_ADDR
// exit ;
75206: POP
75207: POP
75208: POP
75209: POP
75210: GO 75220
// end ; end ;
75212: GO 75148
75214: POP
75215: POP
// end ;
75216: GO 75034
75218: POP
75219: POP
// end ;
75220: LD_VAR 0 3
75224: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75225: LD_INT 0
75227: PPUSH
// if not side or side > 8 then
75228: LD_VAR 0 3
75232: NOT
75233: PUSH
75234: LD_VAR 0 3
75238: PUSH
75239: LD_INT 8
75241: GREATER
75242: OR
75243: IFFALSE 75247
// exit ;
75245: GO 75306
// if not range then
75247: LD_VAR 0 4
75251: NOT
75252: IFFALSE 75263
// range := - 12 ;
75254: LD_ADDR_VAR 0 4
75258: PUSH
75259: LD_INT 12
75261: NEG
75262: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75263: LD_VAR 0 1
75267: PPUSH
75268: LD_VAR 0 2
75272: PPUSH
75273: LD_VAR 0 3
75277: PPUSH
75278: LD_VAR 0 4
75282: PPUSH
75283: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75287: LD_VAR 0 1
75291: PPUSH
75292: LD_VAR 0 2
75296: PPUSH
75297: LD_VAR 0 3
75301: PPUSH
75302: CALL_OW 331
// end ;
75306: LD_VAR 0 5
75310: RET
// export function Video ( mode ) ; begin
75311: LD_INT 0
75313: PPUSH
// ingame_video = mode ;
75314: LD_ADDR_OWVAR 52
75318: PUSH
75319: LD_VAR 0 1
75323: ST_TO_ADDR
// interface_hidden = mode ;
75324: LD_ADDR_OWVAR 54
75328: PUSH
75329: LD_VAR 0 1
75333: ST_TO_ADDR
// end ;
75334: LD_VAR 0 2
75338: RET
// export function Join ( array , element ) ; begin
75339: LD_INT 0
75341: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75342: LD_ADDR_VAR 0 3
75346: PUSH
75347: LD_VAR 0 1
75351: PPUSH
75352: LD_VAR 0 1
75356: PUSH
75357: LD_INT 1
75359: PLUS
75360: PPUSH
75361: LD_VAR 0 2
75365: PPUSH
75366: CALL_OW 1
75370: ST_TO_ADDR
// end ;
75371: LD_VAR 0 3
75375: RET
// export function JoinUnion ( array , element ) ; begin
75376: LD_INT 0
75378: PPUSH
// result := array union element ;
75379: LD_ADDR_VAR 0 3
75383: PUSH
75384: LD_VAR 0 1
75388: PUSH
75389: LD_VAR 0 2
75393: UNION
75394: ST_TO_ADDR
// end ;
75395: LD_VAR 0 3
75399: RET
// export function GetBehemoths ( side ) ; begin
75400: LD_INT 0
75402: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75403: LD_ADDR_VAR 0 2
75407: PUSH
75408: LD_INT 22
75410: PUSH
75411: LD_VAR 0 1
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: PUSH
75420: LD_INT 31
75422: PUSH
75423: LD_INT 25
75425: PUSH
75426: EMPTY
75427: LIST
75428: LIST
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PPUSH
75434: CALL_OW 69
75438: ST_TO_ADDR
// end ;
75439: LD_VAR 0 2
75443: RET
// export function Shuffle ( array ) ; var i , index ; begin
75444: LD_INT 0
75446: PPUSH
75447: PPUSH
75448: PPUSH
// result := [ ] ;
75449: LD_ADDR_VAR 0 2
75453: PUSH
75454: EMPTY
75455: ST_TO_ADDR
// if not array then
75456: LD_VAR 0 1
75460: NOT
75461: IFFALSE 75465
// exit ;
75463: GO 75564
// Randomize ;
75465: CALL_OW 10
// for i = array downto 1 do
75469: LD_ADDR_VAR 0 3
75473: PUSH
75474: DOUBLE
75475: LD_VAR 0 1
75479: INC
75480: ST_TO_ADDR
75481: LD_INT 1
75483: PUSH
75484: FOR_DOWNTO
75485: IFFALSE 75562
// begin index := rand ( 1 , array ) ;
75487: LD_ADDR_VAR 0 4
75491: PUSH
75492: LD_INT 1
75494: PPUSH
75495: LD_VAR 0 1
75499: PPUSH
75500: CALL_OW 12
75504: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75505: LD_ADDR_VAR 0 2
75509: PUSH
75510: LD_VAR 0 2
75514: PPUSH
75515: LD_VAR 0 2
75519: PUSH
75520: LD_INT 1
75522: PLUS
75523: PPUSH
75524: LD_VAR 0 1
75528: PUSH
75529: LD_VAR 0 4
75533: ARRAY
75534: PPUSH
75535: CALL_OW 2
75539: ST_TO_ADDR
// array := Delete ( array , index ) ;
75540: LD_ADDR_VAR 0 1
75544: PUSH
75545: LD_VAR 0 1
75549: PPUSH
75550: LD_VAR 0 4
75554: PPUSH
75555: CALL_OW 3
75559: ST_TO_ADDR
// end ;
75560: GO 75484
75562: POP
75563: POP
// end ;
75564: LD_VAR 0 2
75568: RET
// export function GetBaseMaterials ( base ) ; begin
75569: LD_INT 0
75571: PPUSH
// result := [ 0 , 0 , 0 ] ;
75572: LD_ADDR_VAR 0 2
75576: PUSH
75577: LD_INT 0
75579: PUSH
75580: LD_INT 0
75582: PUSH
75583: LD_INT 0
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: LIST
75590: ST_TO_ADDR
// if not base then
75591: LD_VAR 0 1
75595: NOT
75596: IFFALSE 75600
// exit ;
75598: GO 75649
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75600: LD_ADDR_VAR 0 2
75604: PUSH
75605: LD_VAR 0 1
75609: PPUSH
75610: LD_INT 1
75612: PPUSH
75613: CALL_OW 275
75617: PUSH
75618: LD_VAR 0 1
75622: PPUSH
75623: LD_INT 2
75625: PPUSH
75626: CALL_OW 275
75630: PUSH
75631: LD_VAR 0 1
75635: PPUSH
75636: LD_INT 3
75638: PPUSH
75639: CALL_OW 275
75643: PUSH
75644: EMPTY
75645: LIST
75646: LIST
75647: LIST
75648: ST_TO_ADDR
// end ;
75649: LD_VAR 0 2
75653: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75654: LD_INT 0
75656: PPUSH
75657: PPUSH
// result := array ;
75658: LD_ADDR_VAR 0 3
75662: PUSH
75663: LD_VAR 0 1
75667: ST_TO_ADDR
// if size >= result then
75668: LD_VAR 0 2
75672: PUSH
75673: LD_VAR 0 3
75677: GREATEREQUAL
75678: IFFALSE 75682
// exit ;
75680: GO 75732
// if size then
75682: LD_VAR 0 2
75686: IFFALSE 75732
// for i := array downto size do
75688: LD_ADDR_VAR 0 4
75692: PUSH
75693: DOUBLE
75694: LD_VAR 0 1
75698: INC
75699: ST_TO_ADDR
75700: LD_VAR 0 2
75704: PUSH
75705: FOR_DOWNTO
75706: IFFALSE 75730
// result := Delete ( result , result ) ;
75708: LD_ADDR_VAR 0 3
75712: PUSH
75713: LD_VAR 0 3
75717: PPUSH
75718: LD_VAR 0 3
75722: PPUSH
75723: CALL_OW 3
75727: ST_TO_ADDR
75728: GO 75705
75730: POP
75731: POP
// end ;
75732: LD_VAR 0 3
75736: RET
// export function ComExit ( unit ) ; var tmp ; begin
75737: LD_INT 0
75739: PPUSH
75740: PPUSH
// if not IsInUnit ( unit ) then
75741: LD_VAR 0 1
75745: PPUSH
75746: CALL_OW 310
75750: NOT
75751: IFFALSE 75755
// exit ;
75753: GO 75815
// tmp := IsInUnit ( unit ) ;
75755: LD_ADDR_VAR 0 3
75759: PUSH
75760: LD_VAR 0 1
75764: PPUSH
75765: CALL_OW 310
75769: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75770: LD_VAR 0 3
75774: PPUSH
75775: CALL_OW 247
75779: PUSH
75780: LD_INT 2
75782: EQUAL
75783: IFFALSE 75796
// ComExitVehicle ( unit ) else
75785: LD_VAR 0 1
75789: PPUSH
75790: CALL_OW 121
75794: GO 75805
// ComExitBuilding ( unit ) ;
75796: LD_VAR 0 1
75800: PPUSH
75801: CALL_OW 122
// result := tmp ;
75805: LD_ADDR_VAR 0 2
75809: PUSH
75810: LD_VAR 0 3
75814: ST_TO_ADDR
// end ;
75815: LD_VAR 0 2
75819: RET
// export function ComExitAll ( units ) ; var i ; begin
75820: LD_INT 0
75822: PPUSH
75823: PPUSH
// if not units then
75824: LD_VAR 0 1
75828: NOT
75829: IFFALSE 75833
// exit ;
75831: GO 75859
// for i in units do
75833: LD_ADDR_VAR 0 3
75837: PUSH
75838: LD_VAR 0 1
75842: PUSH
75843: FOR_IN
75844: IFFALSE 75857
// ComExit ( i ) ;
75846: LD_VAR 0 3
75850: PPUSH
75851: CALL 75737 0 1
75855: GO 75843
75857: POP
75858: POP
// end ;
75859: LD_VAR 0 2
75863: RET
// export function ResetHc ; begin
75864: LD_INT 0
75866: PPUSH
// InitHc ;
75867: CALL_OW 19
// hc_importance := 0 ;
75871: LD_ADDR_OWVAR 32
75875: PUSH
75876: LD_INT 0
75878: ST_TO_ADDR
// end ;
75879: LD_VAR 0 1
75883: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75884: LD_INT 0
75886: PPUSH
75887: PPUSH
75888: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75889: LD_ADDR_VAR 0 6
75893: PUSH
75894: LD_VAR 0 1
75898: PUSH
75899: LD_VAR 0 3
75903: PLUS
75904: PUSH
75905: LD_INT 2
75907: DIV
75908: ST_TO_ADDR
// if _x < 0 then
75909: LD_VAR 0 6
75913: PUSH
75914: LD_INT 0
75916: LESS
75917: IFFALSE 75934
// _x := _x * - 1 ;
75919: LD_ADDR_VAR 0 6
75923: PUSH
75924: LD_VAR 0 6
75928: PUSH
75929: LD_INT 1
75931: NEG
75932: MUL
75933: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75934: LD_ADDR_VAR 0 7
75938: PUSH
75939: LD_VAR 0 2
75943: PUSH
75944: LD_VAR 0 4
75948: PLUS
75949: PUSH
75950: LD_INT 2
75952: DIV
75953: ST_TO_ADDR
// if _y < 0 then
75954: LD_VAR 0 7
75958: PUSH
75959: LD_INT 0
75961: LESS
75962: IFFALSE 75979
// _y := _y * - 1 ;
75964: LD_ADDR_VAR 0 7
75968: PUSH
75969: LD_VAR 0 7
75973: PUSH
75974: LD_INT 1
75976: NEG
75977: MUL
75978: ST_TO_ADDR
// result := [ _x , _y ] ;
75979: LD_ADDR_VAR 0 5
75983: PUSH
75984: LD_VAR 0 6
75988: PUSH
75989: LD_VAR 0 7
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: ST_TO_ADDR
// end ;
75998: LD_VAR 0 5
76002: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76003: LD_INT 0
76005: PPUSH
76006: PPUSH
76007: PPUSH
76008: PPUSH
// task := GetTaskList ( unit ) ;
76009: LD_ADDR_VAR 0 7
76013: PUSH
76014: LD_VAR 0 1
76018: PPUSH
76019: CALL_OW 437
76023: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76024: LD_VAR 0 7
76028: NOT
76029: PUSH
76030: LD_VAR 0 1
76034: PPUSH
76035: LD_VAR 0 2
76039: PPUSH
76040: CALL_OW 308
76044: NOT
76045: AND
76046: IFFALSE 76050
// exit ;
76048: GO 76168
// if IsInArea ( unit , area ) then
76050: LD_VAR 0 1
76054: PPUSH
76055: LD_VAR 0 2
76059: PPUSH
76060: CALL_OW 308
76064: IFFALSE 76082
// begin ComMoveToArea ( unit , goAway ) ;
76066: LD_VAR 0 1
76070: PPUSH
76071: LD_VAR 0 3
76075: PPUSH
76076: CALL_OW 113
// exit ;
76080: GO 76168
// end ; if task [ 1 ] [ 1 ] <> M then
76082: LD_VAR 0 7
76086: PUSH
76087: LD_INT 1
76089: ARRAY
76090: PUSH
76091: LD_INT 1
76093: ARRAY
76094: PUSH
76095: LD_STRING M
76097: NONEQUAL
76098: IFFALSE 76102
// exit ;
76100: GO 76168
// x := task [ 1 ] [ 2 ] ;
76102: LD_ADDR_VAR 0 5
76106: PUSH
76107: LD_VAR 0 7
76111: PUSH
76112: LD_INT 1
76114: ARRAY
76115: PUSH
76116: LD_INT 2
76118: ARRAY
76119: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76120: LD_ADDR_VAR 0 6
76124: PUSH
76125: LD_VAR 0 7
76129: PUSH
76130: LD_INT 1
76132: ARRAY
76133: PUSH
76134: LD_INT 3
76136: ARRAY
76137: ST_TO_ADDR
// if InArea ( x , y , area ) then
76138: LD_VAR 0 5
76142: PPUSH
76143: LD_VAR 0 6
76147: PPUSH
76148: LD_VAR 0 2
76152: PPUSH
76153: CALL_OW 309
76157: IFFALSE 76168
// ComStop ( unit ) ;
76159: LD_VAR 0 1
76163: PPUSH
76164: CALL_OW 141
// end ;
76168: LD_VAR 0 4
76172: RET
// export function Abs ( value ) ; begin
76173: LD_INT 0
76175: PPUSH
// result := value ;
76176: LD_ADDR_VAR 0 2
76180: PUSH
76181: LD_VAR 0 1
76185: ST_TO_ADDR
// if value < 0 then
76186: LD_VAR 0 1
76190: PUSH
76191: LD_INT 0
76193: LESS
76194: IFFALSE 76211
// result := value * - 1 ;
76196: LD_ADDR_VAR 0 2
76200: PUSH
76201: LD_VAR 0 1
76205: PUSH
76206: LD_INT 1
76208: NEG
76209: MUL
76210: ST_TO_ADDR
// end ;
76211: LD_VAR 0 2
76215: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76216: LD_INT 0
76218: PPUSH
76219: PPUSH
76220: PPUSH
76221: PPUSH
76222: PPUSH
76223: PPUSH
76224: PPUSH
76225: PPUSH
// if not unit or not building then
76226: LD_VAR 0 1
76230: NOT
76231: PUSH
76232: LD_VAR 0 2
76236: NOT
76237: OR
76238: IFFALSE 76242
// exit ;
76240: GO 76468
// x := GetX ( building ) ;
76242: LD_ADDR_VAR 0 4
76246: PUSH
76247: LD_VAR 0 2
76251: PPUSH
76252: CALL_OW 250
76256: ST_TO_ADDR
// y := GetY ( building ) ;
76257: LD_ADDR_VAR 0 6
76261: PUSH
76262: LD_VAR 0 2
76266: PPUSH
76267: CALL_OW 251
76271: ST_TO_ADDR
// d := GetDir ( building ) ;
76272: LD_ADDR_VAR 0 8
76276: PUSH
76277: LD_VAR 0 2
76281: PPUSH
76282: CALL_OW 254
76286: ST_TO_ADDR
// r := 4 ;
76287: LD_ADDR_VAR 0 9
76291: PUSH
76292: LD_INT 4
76294: ST_TO_ADDR
// for i := 1 to 5 do
76295: LD_ADDR_VAR 0 10
76299: PUSH
76300: DOUBLE
76301: LD_INT 1
76303: DEC
76304: ST_TO_ADDR
76305: LD_INT 5
76307: PUSH
76308: FOR_TO
76309: IFFALSE 76466
// begin _x := ShiftX ( x , d , r + i ) ;
76311: LD_ADDR_VAR 0 5
76315: PUSH
76316: LD_VAR 0 4
76320: PPUSH
76321: LD_VAR 0 8
76325: PPUSH
76326: LD_VAR 0 9
76330: PUSH
76331: LD_VAR 0 10
76335: PLUS
76336: PPUSH
76337: CALL_OW 272
76341: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76342: LD_ADDR_VAR 0 7
76346: PUSH
76347: LD_VAR 0 6
76351: PPUSH
76352: LD_VAR 0 8
76356: PPUSH
76357: LD_VAR 0 9
76361: PUSH
76362: LD_VAR 0 10
76366: PLUS
76367: PPUSH
76368: CALL_OW 273
76372: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76373: LD_VAR 0 5
76377: PPUSH
76378: LD_VAR 0 7
76382: PPUSH
76383: CALL_OW 488
76387: PUSH
76388: LD_VAR 0 5
76392: PPUSH
76393: LD_VAR 0 7
76397: PPUSH
76398: CALL_OW 428
76402: PPUSH
76403: CALL_OW 247
76407: PUSH
76408: LD_INT 3
76410: PUSH
76411: LD_INT 2
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: IN
76418: NOT
76419: AND
76420: IFFALSE 76464
// begin ComMoveXY ( unit , _x , _y ) ;
76422: LD_VAR 0 1
76426: PPUSH
76427: LD_VAR 0 5
76431: PPUSH
76432: LD_VAR 0 7
76436: PPUSH
76437: CALL_OW 111
// result := [ _x , _y ] ;
76441: LD_ADDR_VAR 0 3
76445: PUSH
76446: LD_VAR 0 5
76450: PUSH
76451: LD_VAR 0 7
76455: PUSH
76456: EMPTY
76457: LIST
76458: LIST
76459: ST_TO_ADDR
// exit ;
76460: POP
76461: POP
76462: GO 76468
// end ; end ;
76464: GO 76308
76466: POP
76467: POP
// end ;
76468: LD_VAR 0 3
76472: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76473: LD_INT 0
76475: PPUSH
76476: PPUSH
76477: PPUSH
// result := 0 ;
76478: LD_ADDR_VAR 0 3
76482: PUSH
76483: LD_INT 0
76485: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76486: LD_VAR 0 1
76490: PUSH
76491: LD_INT 0
76493: LESS
76494: PUSH
76495: LD_VAR 0 1
76499: PUSH
76500: LD_INT 8
76502: GREATER
76503: OR
76504: PUSH
76505: LD_VAR 0 2
76509: PUSH
76510: LD_INT 0
76512: LESS
76513: OR
76514: PUSH
76515: LD_VAR 0 2
76519: PUSH
76520: LD_INT 8
76522: GREATER
76523: OR
76524: IFFALSE 76528
// exit ;
76526: GO 76603
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76528: LD_ADDR_VAR 0 4
76532: PUSH
76533: LD_INT 22
76535: PUSH
76536: LD_VAR 0 2
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: PPUSH
76545: CALL_OW 69
76549: PUSH
76550: FOR_IN
76551: IFFALSE 76601
// begin un := UnitShoot ( i ) ;
76553: LD_ADDR_VAR 0 5
76557: PUSH
76558: LD_VAR 0 4
76562: PPUSH
76563: CALL_OW 504
76567: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76568: LD_VAR 0 5
76572: PPUSH
76573: CALL_OW 255
76577: PUSH
76578: LD_VAR 0 1
76582: EQUAL
76583: IFFALSE 76599
// begin result := un ;
76585: LD_ADDR_VAR 0 3
76589: PUSH
76590: LD_VAR 0 5
76594: ST_TO_ADDR
// exit ;
76595: POP
76596: POP
76597: GO 76603
// end ; end ;
76599: GO 76550
76601: POP
76602: POP
// end ;
76603: LD_VAR 0 3
76607: RET
// export function GetCargoBay ( units ) ; begin
76608: LD_INT 0
76610: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76611: LD_ADDR_VAR 0 2
76615: PUSH
76616: LD_VAR 0 1
76620: PPUSH
76621: LD_INT 2
76623: PUSH
76624: LD_INT 34
76626: PUSH
76627: LD_INT 12
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: PUSH
76634: LD_INT 34
76636: PUSH
76637: LD_INT 51
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: PUSH
76644: LD_INT 34
76646: PUSH
76647: LD_INT 32
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: PUSH
76654: LD_INT 34
76656: PUSH
76657: LD_INT 89
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: LIST
76670: PPUSH
76671: CALL_OW 72
76675: ST_TO_ADDR
// end ;
76676: LD_VAR 0 2
76680: RET
// export function Negate ( value ) ; begin
76681: LD_INT 0
76683: PPUSH
// result := not value ;
76684: LD_ADDR_VAR 0 2
76688: PUSH
76689: LD_VAR 0 1
76693: NOT
76694: ST_TO_ADDR
// end ;
76695: LD_VAR 0 2
76699: RET
// export function Inc ( value ) ; begin
76700: LD_INT 0
76702: PPUSH
// result := value + 1 ;
76703: LD_ADDR_VAR 0 2
76707: PUSH
76708: LD_VAR 0 1
76712: PUSH
76713: LD_INT 1
76715: PLUS
76716: ST_TO_ADDR
// end ;
76717: LD_VAR 0 2
76721: RET
// export function Dec ( value ) ; begin
76722: LD_INT 0
76724: PPUSH
// result := value - 1 ;
76725: LD_ADDR_VAR 0 2
76729: PUSH
76730: LD_VAR 0 1
76734: PUSH
76735: LD_INT 1
76737: MINUS
76738: ST_TO_ADDR
// end ;
76739: LD_VAR 0 2
76743: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76744: LD_INT 0
76746: PPUSH
76747: PPUSH
76748: PPUSH
76749: PPUSH
76750: PPUSH
76751: PPUSH
76752: PPUSH
76753: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76754: LD_VAR 0 1
76758: PPUSH
76759: LD_VAR 0 2
76763: PPUSH
76764: CALL_OW 488
76768: NOT
76769: PUSH
76770: LD_VAR 0 3
76774: PPUSH
76775: LD_VAR 0 4
76779: PPUSH
76780: CALL_OW 488
76784: NOT
76785: OR
76786: IFFALSE 76799
// begin result := - 1 ;
76788: LD_ADDR_VAR 0 5
76792: PUSH
76793: LD_INT 1
76795: NEG
76796: ST_TO_ADDR
// exit ;
76797: GO 77034
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76799: LD_ADDR_VAR 0 12
76803: PUSH
76804: LD_VAR 0 1
76808: PPUSH
76809: LD_VAR 0 2
76813: PPUSH
76814: LD_VAR 0 3
76818: PPUSH
76819: LD_VAR 0 4
76823: PPUSH
76824: CALL 75884 0 4
76828: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76829: LD_ADDR_VAR 0 11
76833: PUSH
76834: LD_VAR 0 1
76838: PPUSH
76839: LD_VAR 0 2
76843: PPUSH
76844: LD_VAR 0 12
76848: PUSH
76849: LD_INT 1
76851: ARRAY
76852: PPUSH
76853: LD_VAR 0 12
76857: PUSH
76858: LD_INT 2
76860: ARRAY
76861: PPUSH
76862: CALL_OW 298
76866: ST_TO_ADDR
// distance := 9999 ;
76867: LD_ADDR_VAR 0 10
76871: PUSH
76872: LD_INT 9999
76874: ST_TO_ADDR
// for i := 0 to 5 do
76875: LD_ADDR_VAR 0 6
76879: PUSH
76880: DOUBLE
76881: LD_INT 0
76883: DEC
76884: ST_TO_ADDR
76885: LD_INT 5
76887: PUSH
76888: FOR_TO
76889: IFFALSE 77032
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76891: LD_ADDR_VAR 0 7
76895: PUSH
76896: LD_VAR 0 1
76900: PPUSH
76901: LD_VAR 0 6
76905: PPUSH
76906: LD_VAR 0 11
76910: PPUSH
76911: CALL_OW 272
76915: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76916: LD_ADDR_VAR 0 8
76920: PUSH
76921: LD_VAR 0 2
76925: PPUSH
76926: LD_VAR 0 6
76930: PPUSH
76931: LD_VAR 0 11
76935: PPUSH
76936: CALL_OW 273
76940: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76941: LD_VAR 0 7
76945: PPUSH
76946: LD_VAR 0 8
76950: PPUSH
76951: CALL_OW 488
76955: NOT
76956: IFFALSE 76960
// continue ;
76958: GO 76888
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76960: LD_ADDR_VAR 0 9
76964: PUSH
76965: LD_VAR 0 12
76969: PUSH
76970: LD_INT 1
76972: ARRAY
76973: PPUSH
76974: LD_VAR 0 12
76978: PUSH
76979: LD_INT 2
76981: ARRAY
76982: PPUSH
76983: LD_VAR 0 7
76987: PPUSH
76988: LD_VAR 0 8
76992: PPUSH
76993: CALL_OW 298
76997: ST_TO_ADDR
// if tmp < distance then
76998: LD_VAR 0 9
77002: PUSH
77003: LD_VAR 0 10
77007: LESS
77008: IFFALSE 77030
// begin result := i ;
77010: LD_ADDR_VAR 0 5
77014: PUSH
77015: LD_VAR 0 6
77019: ST_TO_ADDR
// distance := tmp ;
77020: LD_ADDR_VAR 0 10
77024: PUSH
77025: LD_VAR 0 9
77029: ST_TO_ADDR
// end ; end ;
77030: GO 76888
77032: POP
77033: POP
// end ;
77034: LD_VAR 0 5
77038: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77039: LD_INT 0
77041: PPUSH
77042: PPUSH
// if not driver or not IsInUnit ( driver ) then
77043: LD_VAR 0 1
77047: NOT
77048: PUSH
77049: LD_VAR 0 1
77053: PPUSH
77054: CALL_OW 310
77058: NOT
77059: OR
77060: IFFALSE 77064
// exit ;
77062: GO 77154
// vehicle := IsInUnit ( driver ) ;
77064: LD_ADDR_VAR 0 3
77068: PUSH
77069: LD_VAR 0 1
77073: PPUSH
77074: CALL_OW 310
77078: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77079: LD_VAR 0 1
77083: PPUSH
77084: LD_STRING \
77086: PUSH
77087: LD_INT 0
77089: PUSH
77090: LD_INT 0
77092: PUSH
77093: LD_INT 0
77095: PUSH
77096: LD_INT 0
77098: PUSH
77099: LD_INT 0
77101: PUSH
77102: LD_INT 0
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: LIST
77109: LIST
77110: LIST
77111: LIST
77112: LIST
77113: PUSH
77114: LD_STRING E
77116: PUSH
77117: LD_INT 0
77119: PUSH
77120: LD_INT 0
77122: PUSH
77123: LD_VAR 0 3
77127: PUSH
77128: LD_INT 0
77130: PUSH
77131: LD_INT 0
77133: PUSH
77134: LD_INT 0
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: LIST
77141: LIST
77142: LIST
77143: LIST
77144: LIST
77145: PUSH
77146: EMPTY
77147: LIST
77148: LIST
77149: PPUSH
77150: CALL_OW 446
// end ;
77154: LD_VAR 0 2
77158: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77159: LD_INT 0
77161: PPUSH
77162: PPUSH
// if not driver or not IsInUnit ( driver ) then
77163: LD_VAR 0 1
77167: NOT
77168: PUSH
77169: LD_VAR 0 1
77173: PPUSH
77174: CALL_OW 310
77178: NOT
77179: OR
77180: IFFALSE 77184
// exit ;
77182: GO 77274
// vehicle := IsInUnit ( driver ) ;
77184: LD_ADDR_VAR 0 3
77188: PUSH
77189: LD_VAR 0 1
77193: PPUSH
77194: CALL_OW 310
77198: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77199: LD_VAR 0 1
77203: PPUSH
77204: LD_STRING \
77206: PUSH
77207: LD_INT 0
77209: PUSH
77210: LD_INT 0
77212: PUSH
77213: LD_INT 0
77215: PUSH
77216: LD_INT 0
77218: PUSH
77219: LD_INT 0
77221: PUSH
77222: LD_INT 0
77224: PUSH
77225: EMPTY
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: LIST
77231: LIST
77232: LIST
77233: PUSH
77234: LD_STRING E
77236: PUSH
77237: LD_INT 0
77239: PUSH
77240: LD_INT 0
77242: PUSH
77243: LD_VAR 0 3
77247: PUSH
77248: LD_INT 0
77250: PUSH
77251: LD_INT 0
77253: PUSH
77254: LD_INT 0
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: LIST
77261: LIST
77262: LIST
77263: LIST
77264: LIST
77265: PUSH
77266: EMPTY
77267: LIST
77268: LIST
77269: PPUSH
77270: CALL_OW 447
// end ;
77274: LD_VAR 0 2
77278: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77279: LD_INT 0
77281: PPUSH
77282: PPUSH
77283: PPUSH
// tmp := [ ] ;
77284: LD_ADDR_VAR 0 5
77288: PUSH
77289: EMPTY
77290: ST_TO_ADDR
// for i in units do
77291: LD_ADDR_VAR 0 4
77295: PUSH
77296: LD_VAR 0 1
77300: PUSH
77301: FOR_IN
77302: IFFALSE 77340
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77304: LD_ADDR_VAR 0 5
77308: PUSH
77309: LD_VAR 0 5
77313: PPUSH
77314: LD_VAR 0 5
77318: PUSH
77319: LD_INT 1
77321: PLUS
77322: PPUSH
77323: LD_VAR 0 4
77327: PPUSH
77328: CALL_OW 256
77332: PPUSH
77333: CALL_OW 2
77337: ST_TO_ADDR
77338: GO 77301
77340: POP
77341: POP
// if not tmp then
77342: LD_VAR 0 5
77346: NOT
77347: IFFALSE 77351
// exit ;
77349: GO 77399
// if asc then
77351: LD_VAR 0 2
77355: IFFALSE 77379
// result := SortListByListAsc ( units , tmp ) else
77357: LD_ADDR_VAR 0 3
77361: PUSH
77362: LD_VAR 0 1
77366: PPUSH
77367: LD_VAR 0 5
77371: PPUSH
77372: CALL_OW 76
77376: ST_TO_ADDR
77377: GO 77399
// result := SortListByListDesc ( units , tmp ) ;
77379: LD_ADDR_VAR 0 3
77383: PUSH
77384: LD_VAR 0 1
77388: PPUSH
77389: LD_VAR 0 5
77393: PPUSH
77394: CALL_OW 77
77398: ST_TO_ADDR
// end ;
77399: LD_VAR 0 3
77403: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77404: LD_INT 0
77406: PPUSH
77407: PPUSH
// task := GetTaskList ( mech ) ;
77408: LD_ADDR_VAR 0 4
77412: PUSH
77413: LD_VAR 0 1
77417: PPUSH
77418: CALL_OW 437
77422: ST_TO_ADDR
// if not task then
77423: LD_VAR 0 4
77427: NOT
77428: IFFALSE 77432
// exit ;
77430: GO 77474
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77432: LD_ADDR_VAR 0 3
77436: PUSH
77437: LD_VAR 0 4
77441: PUSH
77442: LD_INT 1
77444: ARRAY
77445: PUSH
77446: LD_INT 1
77448: ARRAY
77449: PUSH
77450: LD_STRING r
77452: EQUAL
77453: PUSH
77454: LD_VAR 0 4
77458: PUSH
77459: LD_INT 1
77461: ARRAY
77462: PUSH
77463: LD_INT 4
77465: ARRAY
77466: PUSH
77467: LD_VAR 0 2
77471: EQUAL
77472: AND
77473: ST_TO_ADDR
// end ;
77474: LD_VAR 0 3
77478: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77479: LD_INT 0
77481: PPUSH
// SetDir ( unit , d ) ;
77482: LD_VAR 0 1
77486: PPUSH
77487: LD_VAR 0 4
77491: PPUSH
77492: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77496: LD_VAR 0 1
77500: PPUSH
77501: LD_VAR 0 2
77505: PPUSH
77506: LD_VAR 0 3
77510: PPUSH
77511: LD_VAR 0 5
77515: PPUSH
77516: CALL_OW 48
// end ;
77520: LD_VAR 0 6
77524: RET
// export function ToNaturalNumber ( number ) ; begin
77525: LD_INT 0
77527: PPUSH
// result := number div 1 ;
77528: LD_ADDR_VAR 0 2
77532: PUSH
77533: LD_VAR 0 1
77537: PUSH
77538: LD_INT 1
77540: DIV
77541: ST_TO_ADDR
// if number < 0 then
77542: LD_VAR 0 1
77546: PUSH
77547: LD_INT 0
77549: LESS
77550: IFFALSE 77560
// result := 0 ;
77552: LD_ADDR_VAR 0 2
77556: PUSH
77557: LD_INT 0
77559: ST_TO_ADDR
// end ;
77560: LD_VAR 0 2
77564: RET
// export function SortByClass ( units , class ) ; var un ; begin
77565: LD_INT 0
77567: PPUSH
77568: PPUSH
// if not units or not class then
77569: LD_VAR 0 1
77573: NOT
77574: PUSH
77575: LD_VAR 0 2
77579: NOT
77580: OR
77581: IFFALSE 77585
// exit ;
77583: GO 77680
// result := [ ] ;
77585: LD_ADDR_VAR 0 3
77589: PUSH
77590: EMPTY
77591: ST_TO_ADDR
// for un in units do
77592: LD_ADDR_VAR 0 4
77596: PUSH
77597: LD_VAR 0 1
77601: PUSH
77602: FOR_IN
77603: IFFALSE 77678
// if GetClass ( un ) = class then
77605: LD_VAR 0 4
77609: PPUSH
77610: CALL_OW 257
77614: PUSH
77615: LD_VAR 0 2
77619: EQUAL
77620: IFFALSE 77647
// result := Insert ( result , 1 , un ) else
77622: LD_ADDR_VAR 0 3
77626: PUSH
77627: LD_VAR 0 3
77631: PPUSH
77632: LD_INT 1
77634: PPUSH
77635: LD_VAR 0 4
77639: PPUSH
77640: CALL_OW 2
77644: ST_TO_ADDR
77645: GO 77676
// result := Replace ( result , result + 1 , un ) ;
77647: LD_ADDR_VAR 0 3
77651: PUSH
77652: LD_VAR 0 3
77656: PPUSH
77657: LD_VAR 0 3
77661: PUSH
77662: LD_INT 1
77664: PLUS
77665: PPUSH
77666: LD_VAR 0 4
77670: PPUSH
77671: CALL_OW 1
77675: ST_TO_ADDR
77676: GO 77602
77678: POP
77679: POP
// end ;
77680: LD_VAR 0 3
77684: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77685: LD_INT 0
77687: PPUSH
77688: PPUSH
77689: PPUSH
77690: PPUSH
77691: PPUSH
77692: PPUSH
77693: PPUSH
// result := [ ] ;
77694: LD_ADDR_VAR 0 4
77698: PUSH
77699: EMPTY
77700: ST_TO_ADDR
// if x - r < 0 then
77701: LD_VAR 0 1
77705: PUSH
77706: LD_VAR 0 3
77710: MINUS
77711: PUSH
77712: LD_INT 0
77714: LESS
77715: IFFALSE 77727
// min_x := 0 else
77717: LD_ADDR_VAR 0 8
77721: PUSH
77722: LD_INT 0
77724: ST_TO_ADDR
77725: GO 77743
// min_x := x - r ;
77727: LD_ADDR_VAR 0 8
77731: PUSH
77732: LD_VAR 0 1
77736: PUSH
77737: LD_VAR 0 3
77741: MINUS
77742: ST_TO_ADDR
// if y - r < 0 then
77743: LD_VAR 0 2
77747: PUSH
77748: LD_VAR 0 3
77752: MINUS
77753: PUSH
77754: LD_INT 0
77756: LESS
77757: IFFALSE 77769
// min_y := 0 else
77759: LD_ADDR_VAR 0 7
77763: PUSH
77764: LD_INT 0
77766: ST_TO_ADDR
77767: GO 77785
// min_y := y - r ;
77769: LD_ADDR_VAR 0 7
77773: PUSH
77774: LD_VAR 0 2
77778: PUSH
77779: LD_VAR 0 3
77783: MINUS
77784: ST_TO_ADDR
// max_x := x + r ;
77785: LD_ADDR_VAR 0 9
77789: PUSH
77790: LD_VAR 0 1
77794: PUSH
77795: LD_VAR 0 3
77799: PLUS
77800: ST_TO_ADDR
// max_y := y + r ;
77801: LD_ADDR_VAR 0 10
77805: PUSH
77806: LD_VAR 0 2
77810: PUSH
77811: LD_VAR 0 3
77815: PLUS
77816: ST_TO_ADDR
// for _x = min_x to max_x do
77817: LD_ADDR_VAR 0 5
77821: PUSH
77822: DOUBLE
77823: LD_VAR 0 8
77827: DEC
77828: ST_TO_ADDR
77829: LD_VAR 0 9
77833: PUSH
77834: FOR_TO
77835: IFFALSE 77936
// for _y = min_y to max_y do
77837: LD_ADDR_VAR 0 6
77841: PUSH
77842: DOUBLE
77843: LD_VAR 0 7
77847: DEC
77848: ST_TO_ADDR
77849: LD_VAR 0 10
77853: PUSH
77854: FOR_TO
77855: IFFALSE 77932
// begin if not ValidHex ( _x , _y ) then
77857: LD_VAR 0 5
77861: PPUSH
77862: LD_VAR 0 6
77866: PPUSH
77867: CALL_OW 488
77871: NOT
77872: IFFALSE 77876
// continue ;
77874: GO 77854
// if GetResourceTypeXY ( _x , _y ) then
77876: LD_VAR 0 5
77880: PPUSH
77881: LD_VAR 0 6
77885: PPUSH
77886: CALL_OW 283
77890: IFFALSE 77930
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77892: LD_ADDR_VAR 0 4
77896: PUSH
77897: LD_VAR 0 4
77901: PPUSH
77902: LD_VAR 0 4
77906: PUSH
77907: LD_INT 1
77909: PLUS
77910: PPUSH
77911: LD_VAR 0 5
77915: PUSH
77916: LD_VAR 0 6
77920: PUSH
77921: EMPTY
77922: LIST
77923: LIST
77924: PPUSH
77925: CALL_OW 1
77929: ST_TO_ADDR
// end ;
77930: GO 77854
77932: POP
77933: POP
77934: GO 77834
77936: POP
77937: POP
// end ;
77938: LD_VAR 0 4
77942: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77943: LD_INT 0
77945: PPUSH
77946: PPUSH
77947: PPUSH
77948: PPUSH
77949: PPUSH
77950: PPUSH
77951: PPUSH
77952: PPUSH
// if not units then
77953: LD_VAR 0 1
77957: NOT
77958: IFFALSE 77962
// exit ;
77960: GO 78486
// result := UnitFilter ( units , [ f_ok ] ) ;
77962: LD_ADDR_VAR 0 3
77966: PUSH
77967: LD_VAR 0 1
77971: PPUSH
77972: LD_INT 50
77974: PUSH
77975: EMPTY
77976: LIST
77977: PPUSH
77978: CALL_OW 72
77982: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77983: LD_ADDR_VAR 0 8
77987: PUSH
77988: LD_VAR 0 1
77992: PUSH
77993: LD_INT 1
77995: ARRAY
77996: PPUSH
77997: CALL_OW 255
78001: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78002: LD_ADDR_VAR 0 10
78006: PUSH
78007: LD_INT 29
78009: PUSH
78010: LD_INT 91
78012: PUSH
78013: LD_INT 49
78015: PUSH
78016: EMPTY
78017: LIST
78018: LIST
78019: LIST
78020: ST_TO_ADDR
// if not result then
78021: LD_VAR 0 3
78025: NOT
78026: IFFALSE 78030
// exit ;
78028: GO 78486
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78030: LD_ADDR_VAR 0 5
78034: PUSH
78035: LD_INT 81
78037: PUSH
78038: LD_VAR 0 8
78042: PUSH
78043: EMPTY
78044: LIST
78045: LIST
78046: PPUSH
78047: CALL_OW 69
78051: ST_TO_ADDR
// for i in result do
78052: LD_ADDR_VAR 0 4
78056: PUSH
78057: LD_VAR 0 3
78061: PUSH
78062: FOR_IN
78063: IFFALSE 78484
// begin tag := GetTag ( i ) + 1 ;
78065: LD_ADDR_VAR 0 9
78069: PUSH
78070: LD_VAR 0 4
78074: PPUSH
78075: CALL_OW 110
78079: PUSH
78080: LD_INT 1
78082: PLUS
78083: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78084: LD_ADDR_VAR 0 7
78088: PUSH
78089: LD_VAR 0 4
78093: PPUSH
78094: CALL_OW 250
78098: PPUSH
78099: LD_VAR 0 4
78103: PPUSH
78104: CALL_OW 251
78108: PPUSH
78109: LD_INT 6
78111: PPUSH
78112: CALL 77685 0 3
78116: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78117: LD_VAR 0 4
78121: PPUSH
78122: CALL_OW 247
78126: PUSH
78127: LD_INT 2
78129: EQUAL
78130: PUSH
78131: LD_VAR 0 7
78135: AND
78136: PUSH
78137: LD_VAR 0 4
78141: PPUSH
78142: CALL_OW 264
78146: PUSH
78147: LD_VAR 0 10
78151: IN
78152: NOT
78153: AND
78154: IFFALSE 78193
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78156: LD_VAR 0 4
78160: PPUSH
78161: LD_VAR 0 7
78165: PUSH
78166: LD_INT 1
78168: ARRAY
78169: PUSH
78170: LD_INT 1
78172: ARRAY
78173: PPUSH
78174: LD_VAR 0 7
78178: PUSH
78179: LD_INT 1
78181: ARRAY
78182: PUSH
78183: LD_INT 2
78185: ARRAY
78186: PPUSH
78187: CALL_OW 116
78191: GO 78482
// if path > tag then
78193: LD_VAR 0 2
78197: PUSH
78198: LD_VAR 0 9
78202: GREATER
78203: IFFALSE 78411
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78205: LD_ADDR_VAR 0 6
78209: PUSH
78210: LD_VAR 0 5
78214: PPUSH
78215: LD_INT 91
78217: PUSH
78218: LD_VAR 0 4
78222: PUSH
78223: LD_INT 8
78225: PUSH
78226: EMPTY
78227: LIST
78228: LIST
78229: LIST
78230: PPUSH
78231: CALL_OW 72
78235: ST_TO_ADDR
// if nearEnemy then
78236: LD_VAR 0 6
78240: IFFALSE 78309
// begin if GetWeapon ( i ) = ru_time_lapser then
78242: LD_VAR 0 4
78246: PPUSH
78247: CALL_OW 264
78251: PUSH
78252: LD_INT 49
78254: EQUAL
78255: IFFALSE 78283
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78257: LD_VAR 0 4
78261: PPUSH
78262: LD_VAR 0 6
78266: PPUSH
78267: LD_VAR 0 4
78271: PPUSH
78272: CALL_OW 74
78276: PPUSH
78277: CALL_OW 112
78281: GO 78307
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78283: LD_VAR 0 4
78287: PPUSH
78288: LD_VAR 0 6
78292: PPUSH
78293: LD_VAR 0 4
78297: PPUSH
78298: CALL_OW 74
78302: PPUSH
78303: CALL 79411 0 2
// end else
78307: GO 78409
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78309: LD_VAR 0 4
78313: PPUSH
78314: LD_VAR 0 2
78318: PUSH
78319: LD_VAR 0 9
78323: ARRAY
78324: PUSH
78325: LD_INT 1
78327: ARRAY
78328: PPUSH
78329: LD_VAR 0 2
78333: PUSH
78334: LD_VAR 0 9
78338: ARRAY
78339: PUSH
78340: LD_INT 2
78342: ARRAY
78343: PPUSH
78344: CALL_OW 297
78348: PUSH
78349: LD_INT 6
78351: GREATER
78352: IFFALSE 78395
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78354: LD_VAR 0 4
78358: PPUSH
78359: LD_VAR 0 2
78363: PUSH
78364: LD_VAR 0 9
78368: ARRAY
78369: PUSH
78370: LD_INT 1
78372: ARRAY
78373: PPUSH
78374: LD_VAR 0 2
78378: PUSH
78379: LD_VAR 0 9
78383: ARRAY
78384: PUSH
78385: LD_INT 2
78387: ARRAY
78388: PPUSH
78389: CALL_OW 114
78393: GO 78409
// SetTag ( i , tag ) ;
78395: LD_VAR 0 4
78399: PPUSH
78400: LD_VAR 0 9
78404: PPUSH
78405: CALL_OW 109
// end else
78409: GO 78482
// if enemy then
78411: LD_VAR 0 5
78415: IFFALSE 78482
// begin if GetWeapon ( i ) = ru_time_lapser then
78417: LD_VAR 0 4
78421: PPUSH
78422: CALL_OW 264
78426: PUSH
78427: LD_INT 49
78429: EQUAL
78430: IFFALSE 78458
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78432: LD_VAR 0 4
78436: PPUSH
78437: LD_VAR 0 5
78441: PPUSH
78442: LD_VAR 0 4
78446: PPUSH
78447: CALL_OW 74
78451: PPUSH
78452: CALL_OW 112
78456: GO 78482
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78458: LD_VAR 0 4
78462: PPUSH
78463: LD_VAR 0 5
78467: PPUSH
78468: LD_VAR 0 4
78472: PPUSH
78473: CALL_OW 74
78477: PPUSH
78478: CALL 79411 0 2
// end ; end ;
78482: GO 78062
78484: POP
78485: POP
// end ;
78486: LD_VAR 0 3
78490: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78491: LD_INT 0
78493: PPUSH
78494: PPUSH
78495: PPUSH
// if not unit or IsInUnit ( unit ) then
78496: LD_VAR 0 1
78500: NOT
78501: PUSH
78502: LD_VAR 0 1
78506: PPUSH
78507: CALL_OW 310
78511: OR
78512: IFFALSE 78516
// exit ;
78514: GO 78607
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78516: LD_ADDR_VAR 0 4
78520: PUSH
78521: LD_VAR 0 1
78525: PPUSH
78526: CALL_OW 250
78530: PPUSH
78531: LD_VAR 0 2
78535: PPUSH
78536: LD_INT 1
78538: PPUSH
78539: CALL_OW 272
78543: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78544: LD_ADDR_VAR 0 5
78548: PUSH
78549: LD_VAR 0 1
78553: PPUSH
78554: CALL_OW 251
78558: PPUSH
78559: LD_VAR 0 2
78563: PPUSH
78564: LD_INT 1
78566: PPUSH
78567: CALL_OW 273
78571: ST_TO_ADDR
// if ValidHex ( x , y ) then
78572: LD_VAR 0 4
78576: PPUSH
78577: LD_VAR 0 5
78581: PPUSH
78582: CALL_OW 488
78586: IFFALSE 78607
// ComTurnXY ( unit , x , y ) ;
78588: LD_VAR 0 1
78592: PPUSH
78593: LD_VAR 0 4
78597: PPUSH
78598: LD_VAR 0 5
78602: PPUSH
78603: CALL_OW 118
// end ;
78607: LD_VAR 0 3
78611: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78612: LD_INT 0
78614: PPUSH
78615: PPUSH
// result := false ;
78616: LD_ADDR_VAR 0 3
78620: PUSH
78621: LD_INT 0
78623: ST_TO_ADDR
// if not units then
78624: LD_VAR 0 2
78628: NOT
78629: IFFALSE 78633
// exit ;
78631: GO 78678
// for i in units do
78633: LD_ADDR_VAR 0 4
78637: PUSH
78638: LD_VAR 0 2
78642: PUSH
78643: FOR_IN
78644: IFFALSE 78676
// if See ( side , i ) then
78646: LD_VAR 0 1
78650: PPUSH
78651: LD_VAR 0 4
78655: PPUSH
78656: CALL_OW 292
78660: IFFALSE 78674
// begin result := true ;
78662: LD_ADDR_VAR 0 3
78666: PUSH
78667: LD_INT 1
78669: ST_TO_ADDR
// exit ;
78670: POP
78671: POP
78672: GO 78678
// end ;
78674: GO 78643
78676: POP
78677: POP
// end ;
78678: LD_VAR 0 3
78682: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78683: LD_INT 0
78685: PPUSH
78686: PPUSH
78687: PPUSH
78688: PPUSH
// if not unit or not points then
78689: LD_VAR 0 1
78693: NOT
78694: PUSH
78695: LD_VAR 0 2
78699: NOT
78700: OR
78701: IFFALSE 78705
// exit ;
78703: GO 78795
// dist := 99999 ;
78705: LD_ADDR_VAR 0 5
78709: PUSH
78710: LD_INT 99999
78712: ST_TO_ADDR
// for i in points do
78713: LD_ADDR_VAR 0 4
78717: PUSH
78718: LD_VAR 0 2
78722: PUSH
78723: FOR_IN
78724: IFFALSE 78793
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78726: LD_ADDR_VAR 0 6
78730: PUSH
78731: LD_VAR 0 1
78735: PPUSH
78736: LD_VAR 0 4
78740: PUSH
78741: LD_INT 1
78743: ARRAY
78744: PPUSH
78745: LD_VAR 0 4
78749: PUSH
78750: LD_INT 2
78752: ARRAY
78753: PPUSH
78754: CALL_OW 297
78758: ST_TO_ADDR
// if tmpDist < dist then
78759: LD_VAR 0 6
78763: PUSH
78764: LD_VAR 0 5
78768: LESS
78769: IFFALSE 78791
// begin result := i ;
78771: LD_ADDR_VAR 0 3
78775: PUSH
78776: LD_VAR 0 4
78780: ST_TO_ADDR
// dist := tmpDist ;
78781: LD_ADDR_VAR 0 5
78785: PUSH
78786: LD_VAR 0 6
78790: ST_TO_ADDR
// end ; end ;
78791: GO 78723
78793: POP
78794: POP
// end ;
78795: LD_VAR 0 3
78799: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78800: LD_INT 0
78802: PPUSH
// uc_side := side ;
78803: LD_ADDR_OWVAR 20
78807: PUSH
78808: LD_VAR 0 1
78812: ST_TO_ADDR
// uc_nation := 3 ;
78813: LD_ADDR_OWVAR 21
78817: PUSH
78818: LD_INT 3
78820: ST_TO_ADDR
// vc_chassis := 25 ;
78821: LD_ADDR_OWVAR 37
78825: PUSH
78826: LD_INT 25
78828: ST_TO_ADDR
// vc_engine := engine_siberite ;
78829: LD_ADDR_OWVAR 39
78833: PUSH
78834: LD_INT 3
78836: ST_TO_ADDR
// vc_control := control_computer ;
78837: LD_ADDR_OWVAR 38
78841: PUSH
78842: LD_INT 3
78844: ST_TO_ADDR
// vc_weapon := 59 ;
78845: LD_ADDR_OWVAR 40
78849: PUSH
78850: LD_INT 59
78852: ST_TO_ADDR
// result := CreateVehicle ;
78853: LD_ADDR_VAR 0 5
78857: PUSH
78858: CALL_OW 45
78862: ST_TO_ADDR
// SetDir ( result , d ) ;
78863: LD_VAR 0 5
78867: PPUSH
78868: LD_VAR 0 4
78872: PPUSH
78873: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78877: LD_VAR 0 5
78881: PPUSH
78882: LD_VAR 0 2
78886: PPUSH
78887: LD_VAR 0 3
78891: PPUSH
78892: LD_INT 0
78894: PPUSH
78895: CALL_OW 48
// end ;
78899: LD_VAR 0 5
78903: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78904: LD_INT 0
78906: PPUSH
78907: PPUSH
78908: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78909: LD_ADDR_VAR 0 2
78913: PUSH
78914: LD_INT 0
78916: PUSH
78917: LD_INT 0
78919: PUSH
78920: LD_INT 0
78922: PUSH
78923: LD_INT 0
78925: PUSH
78926: EMPTY
78927: LIST
78928: LIST
78929: LIST
78930: LIST
78931: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78932: LD_VAR 0 1
78936: NOT
78937: PUSH
78938: LD_VAR 0 1
78942: PPUSH
78943: CALL_OW 264
78947: PUSH
78948: LD_INT 12
78950: PUSH
78951: LD_INT 51
78953: PUSH
78954: LD_INT 32
78956: PUSH
78957: LD_INT 89
78959: PUSH
78960: EMPTY
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: IN
78966: NOT
78967: OR
78968: IFFALSE 78972
// exit ;
78970: GO 79070
// for i := 1 to 3 do
78972: LD_ADDR_VAR 0 3
78976: PUSH
78977: DOUBLE
78978: LD_INT 1
78980: DEC
78981: ST_TO_ADDR
78982: LD_INT 3
78984: PUSH
78985: FOR_TO
78986: IFFALSE 79068
// begin tmp := GetCargo ( cargo , i ) ;
78988: LD_ADDR_VAR 0 4
78992: PUSH
78993: LD_VAR 0 1
78997: PPUSH
78998: LD_VAR 0 3
79002: PPUSH
79003: CALL_OW 289
79007: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79008: LD_ADDR_VAR 0 2
79012: PUSH
79013: LD_VAR 0 2
79017: PPUSH
79018: LD_VAR 0 3
79022: PPUSH
79023: LD_VAR 0 4
79027: PPUSH
79028: CALL_OW 1
79032: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79033: LD_ADDR_VAR 0 2
79037: PUSH
79038: LD_VAR 0 2
79042: PPUSH
79043: LD_INT 4
79045: PPUSH
79046: LD_VAR 0 2
79050: PUSH
79051: LD_INT 4
79053: ARRAY
79054: PUSH
79055: LD_VAR 0 4
79059: PLUS
79060: PPUSH
79061: CALL_OW 1
79065: ST_TO_ADDR
// end ;
79066: GO 78985
79068: POP
79069: POP
// end ;
79070: LD_VAR 0 2
79074: RET
// export function Length ( array ) ; begin
79075: LD_INT 0
79077: PPUSH
// result := array + 0 ;
79078: LD_ADDR_VAR 0 2
79082: PUSH
79083: LD_VAR 0 1
79087: PUSH
79088: LD_INT 0
79090: PLUS
79091: ST_TO_ADDR
// end ;
79092: LD_VAR 0 2
79096: RET
// export function PrepareArray ( array ) ; begin
79097: LD_INT 0
79099: PPUSH
// result := array diff 0 ;
79100: LD_ADDR_VAR 0 2
79104: PUSH
79105: LD_VAR 0 1
79109: PUSH
79110: LD_INT 0
79112: DIFF
79113: ST_TO_ADDR
// if not result [ 1 ] then
79114: LD_VAR 0 2
79118: PUSH
79119: LD_INT 1
79121: ARRAY
79122: NOT
79123: IFFALSE 79143
// result := Delete ( result , 1 ) ;
79125: LD_ADDR_VAR 0 2
79129: PUSH
79130: LD_VAR 0 2
79134: PPUSH
79135: LD_INT 1
79137: PPUSH
79138: CALL_OW 3
79142: ST_TO_ADDR
// end ;
79143: LD_VAR 0 2
79147: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79148: LD_INT 0
79150: PPUSH
79151: PPUSH
79152: PPUSH
79153: PPUSH
// sibRocketRange := 25 ;
79154: LD_ADDR_VAR 0 6
79158: PUSH
79159: LD_INT 25
79161: ST_TO_ADDR
// result := false ;
79162: LD_ADDR_VAR 0 4
79166: PUSH
79167: LD_INT 0
79169: ST_TO_ADDR
// for i := 0 to 5 do
79170: LD_ADDR_VAR 0 5
79174: PUSH
79175: DOUBLE
79176: LD_INT 0
79178: DEC
79179: ST_TO_ADDR
79180: LD_INT 5
79182: PUSH
79183: FOR_TO
79184: IFFALSE 79251
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79186: LD_VAR 0 1
79190: PPUSH
79191: LD_VAR 0 5
79195: PPUSH
79196: LD_VAR 0 6
79200: PPUSH
79201: CALL_OW 272
79205: PPUSH
79206: LD_VAR 0 2
79210: PPUSH
79211: LD_VAR 0 5
79215: PPUSH
79216: LD_VAR 0 6
79220: PPUSH
79221: CALL_OW 273
79225: PPUSH
79226: LD_VAR 0 3
79230: PPUSH
79231: CALL_OW 309
79235: IFFALSE 79249
// begin result := true ;
79237: LD_ADDR_VAR 0 4
79241: PUSH
79242: LD_INT 1
79244: ST_TO_ADDR
// exit ;
79245: POP
79246: POP
79247: GO 79253
// end ;
79249: GO 79183
79251: POP
79252: POP
// end ;
79253: LD_VAR 0 4
79257: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79258: LD_INT 0
79260: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79261: LD_VAR 0 1
79265: PPUSH
79266: LD_VAR 0 2
79270: PPUSH
79271: LD_INT 0
79273: PPUSH
79274: LD_INT 0
79276: PPUSH
79277: LD_INT 1
79279: PPUSH
79280: LD_INT 0
79282: PPUSH
79283: CALL_OW 587
// end ;
79287: LD_VAR 0 3
79291: RET
// export function CenterOnNow ( unit ) ; begin
79292: LD_INT 0
79294: PPUSH
// result := IsInUnit ( unit ) ;
79295: LD_ADDR_VAR 0 2
79299: PUSH
79300: LD_VAR 0 1
79304: PPUSH
79305: CALL_OW 310
79309: ST_TO_ADDR
// if not result then
79310: LD_VAR 0 2
79314: NOT
79315: IFFALSE 79327
// result := unit ;
79317: LD_ADDR_VAR 0 2
79321: PUSH
79322: LD_VAR 0 1
79326: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
79327: LD_VAR 0 1
79331: PPUSH
79332: CALL_OW 87
// end ;
79336: LD_VAR 0 2
79340: RET
// export function ComMoveHex ( unit , hex ) ; begin
79341: LD_INT 0
79343: PPUSH
// if not hex then
79344: LD_VAR 0 2
79348: NOT
79349: IFFALSE 79353
// exit ;
79351: GO 79406
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
79353: LD_VAR 0 2
79357: PUSH
79358: LD_INT 1
79360: ARRAY
79361: PPUSH
79362: LD_VAR 0 2
79366: PUSH
79367: LD_INT 2
79369: ARRAY
79370: PPUSH
79371: CALL_OW 428
79375: IFFALSE 79379
// exit ;
79377: GO 79406
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
79379: LD_VAR 0 1
79383: PPUSH
79384: LD_VAR 0 2
79388: PUSH
79389: LD_INT 1
79391: ARRAY
79392: PPUSH
79393: LD_VAR 0 2
79397: PUSH
79398: LD_INT 2
79400: ARRAY
79401: PPUSH
79402: CALL_OW 111
// end ;
79406: LD_VAR 0 3
79410: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
79411: LD_INT 0
79413: PPUSH
79414: PPUSH
79415: PPUSH
// if not unit or not enemy then
79416: LD_VAR 0 1
79420: NOT
79421: PUSH
79422: LD_VAR 0 2
79426: NOT
79427: OR
79428: IFFALSE 79432
// exit ;
79430: GO 79556
// x := GetX ( enemy ) ;
79432: LD_ADDR_VAR 0 4
79436: PUSH
79437: LD_VAR 0 2
79441: PPUSH
79442: CALL_OW 250
79446: ST_TO_ADDR
// y := GetY ( enemy ) ;
79447: LD_ADDR_VAR 0 5
79451: PUSH
79452: LD_VAR 0 2
79456: PPUSH
79457: CALL_OW 251
79461: ST_TO_ADDR
// if ValidHex ( x , y ) then
79462: LD_VAR 0 4
79466: PPUSH
79467: LD_VAR 0 5
79471: PPUSH
79472: CALL_OW 488
79476: IFFALSE 79556
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
79478: LD_VAR 0 2
79482: PPUSH
79483: CALL_OW 247
79487: PUSH
79488: LD_INT 3
79490: PUSH
79491: LD_INT 2
79493: PUSH
79494: EMPTY
79495: LIST
79496: LIST
79497: IN
79498: PUSH
79499: LD_VAR 0 1
79503: PPUSH
79504: CALL_OW 255
79508: PPUSH
79509: LD_VAR 0 2
79513: PPUSH
79514: CALL_OW 292
79518: OR
79519: IFFALSE 79537
// ComAttackUnit ( unit , enemy ) else
79521: LD_VAR 0 1
79525: PPUSH
79526: LD_VAR 0 2
79530: PPUSH
79531: CALL_OW 115
79535: GO 79556
// ComAgressiveMove ( unit , x , y ) ;
79537: LD_VAR 0 1
79541: PPUSH
79542: LD_VAR 0 4
79546: PPUSH
79547: LD_VAR 0 5
79551: PPUSH
79552: CALL_OW 114
// end ;
79556: LD_VAR 0 3
79560: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
79561: LD_INT 0
79563: PPUSH
79564: PPUSH
79565: PPUSH
// list := AreaToList ( area , 0 ) ;
79566: LD_ADDR_VAR 0 5
79570: PUSH
79571: LD_VAR 0 1
79575: PPUSH
79576: LD_INT 0
79578: PPUSH
79579: CALL_OW 517
79583: ST_TO_ADDR
// if not list then
79584: LD_VAR 0 5
79588: NOT
79589: IFFALSE 79593
// exit ;
79591: GO 79723
// if all then
79593: LD_VAR 0 2
79597: IFFALSE 79685
// begin for i := 1 to list [ 1 ] do
79599: LD_ADDR_VAR 0 4
79603: PUSH
79604: DOUBLE
79605: LD_INT 1
79607: DEC
79608: ST_TO_ADDR
79609: LD_VAR 0 5
79613: PUSH
79614: LD_INT 1
79616: ARRAY
79617: PUSH
79618: FOR_TO
79619: IFFALSE 79681
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
79621: LD_ADDR_VAR 0 3
79625: PUSH
79626: LD_VAR 0 3
79630: PPUSH
79631: LD_VAR 0 3
79635: PUSH
79636: LD_INT 1
79638: PLUS
79639: PPUSH
79640: LD_VAR 0 5
79644: PUSH
79645: LD_INT 1
79647: ARRAY
79648: PUSH
79649: LD_VAR 0 4
79653: ARRAY
79654: PUSH
79655: LD_VAR 0 5
79659: PUSH
79660: LD_INT 2
79662: ARRAY
79663: PUSH
79664: LD_VAR 0 4
79668: ARRAY
79669: PUSH
79670: EMPTY
79671: LIST
79672: LIST
79673: PPUSH
79674: CALL_OW 1
79678: ST_TO_ADDR
79679: GO 79618
79681: POP
79682: POP
// exit ;
79683: GO 79723
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
79685: LD_ADDR_VAR 0 3
79689: PUSH
79690: LD_VAR 0 5
79694: PUSH
79695: LD_INT 1
79697: ARRAY
79698: PUSH
79699: LD_INT 1
79701: ARRAY
79702: PUSH
79703: LD_VAR 0 5
79707: PUSH
79708: LD_INT 2
79710: ARRAY
79711: PUSH
79712: LD_INT 1
79714: ARRAY
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: PUSH
79720: EMPTY
79721: LIST
79722: ST_TO_ADDR
// end ;
79723: LD_VAR 0 3
79727: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
79728: LD_INT 0
79730: PPUSH
79731: PPUSH
// list := AreaToList ( area , 0 ) ;
79732: LD_ADDR_VAR 0 4
79736: PUSH
79737: LD_VAR 0 1
79741: PPUSH
79742: LD_INT 0
79744: PPUSH
79745: CALL_OW 517
79749: ST_TO_ADDR
// if not list then
79750: LD_VAR 0 4
79754: NOT
79755: IFFALSE 79759
// exit ;
79757: GO 79800
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
79759: LD_ADDR_VAR 0 3
79763: PUSH
79764: LD_VAR 0 4
79768: PUSH
79769: LD_INT 1
79771: ARRAY
79772: PUSH
79773: LD_INT 1
79775: ARRAY
79776: PUSH
79777: LD_VAR 0 4
79781: PUSH
79782: LD_INT 2
79784: ARRAY
79785: PUSH
79786: LD_INT 1
79788: ARRAY
79789: PUSH
79790: LD_VAR 0 2
79794: PUSH
79795: EMPTY
79796: LIST
79797: LIST
79798: LIST
79799: ST_TO_ADDR
// end ;
79800: LD_VAR 0 3
79804: RET
// export function First ( array ) ; begin
79805: LD_INT 0
79807: PPUSH
// if not array then
79808: LD_VAR 0 1
79812: NOT
79813: IFFALSE 79817
// exit ;
79815: GO 79831
// result := array [ 1 ] ;
79817: LD_ADDR_VAR 0 2
79821: PUSH
79822: LD_VAR 0 1
79826: PUSH
79827: LD_INT 1
79829: ARRAY
79830: ST_TO_ADDR
// end ;
79831: LD_VAR 0 2
79835: RET
// export function Last ( array ) ; begin
79836: LD_INT 0
79838: PPUSH
// if not array then
79839: LD_VAR 0 1
79843: NOT
79844: IFFALSE 79848
// exit ;
79846: GO 79864
// result := array [ array ] ;
79848: LD_ADDR_VAR 0 2
79852: PUSH
79853: LD_VAR 0 1
79857: PUSH
79858: LD_VAR 0 1
79862: ARRAY
79863: ST_TO_ADDR
// end ;
79864: LD_VAR 0 2
79868: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
79869: LD_INT 0
79871: PPUSH
79872: PPUSH
// result := [ ] ;
79873: LD_ADDR_VAR 0 5
79877: PUSH
79878: EMPTY
79879: ST_TO_ADDR
// if not array then
79880: LD_VAR 0 1
79884: NOT
79885: IFFALSE 79889
// exit ;
79887: GO 80001
// for i := 1 to array do
79889: LD_ADDR_VAR 0 6
79893: PUSH
79894: DOUBLE
79895: LD_INT 1
79897: DEC
79898: ST_TO_ADDR
79899: LD_VAR 0 1
79903: PUSH
79904: FOR_TO
79905: IFFALSE 79999
// if array [ i ] [ index ] = value then
79907: LD_VAR 0 1
79911: PUSH
79912: LD_VAR 0 6
79916: ARRAY
79917: PUSH
79918: LD_VAR 0 2
79922: ARRAY
79923: PUSH
79924: LD_VAR 0 3
79928: EQUAL
79929: IFFALSE 79997
// begin if indexColumn then
79931: LD_VAR 0 4
79935: IFFALSE 79971
// result := Join ( result , array [ i ] [ indexColumn ] ) else
79937: LD_ADDR_VAR 0 5
79941: PUSH
79942: LD_VAR 0 5
79946: PPUSH
79947: LD_VAR 0 1
79951: PUSH
79952: LD_VAR 0 6
79956: ARRAY
79957: PUSH
79958: LD_VAR 0 4
79962: ARRAY
79963: PPUSH
79964: CALL 75339 0 2
79968: ST_TO_ADDR
79969: GO 79997
// result := Join ( result , array [ i ] ) ;
79971: LD_ADDR_VAR 0 5
79975: PUSH
79976: LD_VAR 0 5
79980: PPUSH
79981: LD_VAR 0 1
79985: PUSH
79986: LD_VAR 0 6
79990: ARRAY
79991: PPUSH
79992: CALL 75339 0 2
79996: ST_TO_ADDR
// end ;
79997: GO 79904
79999: POP
80000: POP
// end ;
80001: LD_VAR 0 5
80005: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
80006: LD_INT 0
80008: PPUSH
80009: PPUSH
80010: PPUSH
// if btype = b_depot then
80011: LD_VAR 0 2
80015: PUSH
80016: LD_INT 0
80018: EQUAL
80019: IFFALSE 80031
// begin result := true ;
80021: LD_ADDR_VAR 0 3
80025: PUSH
80026: LD_INT 1
80028: ST_TO_ADDR
// exit ;
80029: GO 80147
// end ; pom := GetBase ( depot ) ;
80031: LD_ADDR_VAR 0 4
80035: PUSH
80036: LD_VAR 0 1
80040: PPUSH
80041: CALL_OW 274
80045: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
80046: LD_ADDR_VAR 0 5
80050: PUSH
80051: LD_VAR 0 2
80055: PPUSH
80056: LD_VAR 0 1
80060: PPUSH
80061: CALL_OW 248
80065: PPUSH
80066: CALL_OW 450
80070: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
80071: LD_ADDR_VAR 0 3
80075: PUSH
80076: LD_VAR 0 4
80080: PPUSH
80081: LD_INT 1
80083: PPUSH
80084: CALL_OW 275
80088: PUSH
80089: LD_VAR 0 5
80093: PUSH
80094: LD_INT 1
80096: ARRAY
80097: GREATEREQUAL
80098: PUSH
80099: LD_VAR 0 4
80103: PPUSH
80104: LD_INT 2
80106: PPUSH
80107: CALL_OW 275
80111: PUSH
80112: LD_VAR 0 5
80116: PUSH
80117: LD_INT 2
80119: ARRAY
80120: GREATEREQUAL
80121: AND
80122: PUSH
80123: LD_VAR 0 4
80127: PPUSH
80128: LD_INT 3
80130: PPUSH
80131: CALL_OW 275
80135: PUSH
80136: LD_VAR 0 5
80140: PUSH
80141: LD_INT 3
80143: ARRAY
80144: GREATEREQUAL
80145: AND
80146: ST_TO_ADDR
// end ;
80147: LD_VAR 0 3
80151: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
80152: LD_INT 0
80154: PPUSH
// if not vehicles or not parkingPoint then
80155: LD_VAR 0 1
80159: NOT
80160: PUSH
80161: LD_VAR 0 2
80165: NOT
80166: OR
80167: IFFALSE 80171
// exit ;
80169: GO 80269
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
80171: LD_ADDR_VAR 0 1
80175: PUSH
80176: LD_VAR 0 1
80180: PPUSH
80181: LD_INT 50
80183: PUSH
80184: EMPTY
80185: LIST
80186: PUSH
80187: LD_INT 3
80189: PUSH
80190: LD_INT 92
80192: PUSH
80193: LD_VAR 0 2
80197: PUSH
80198: LD_INT 1
80200: ARRAY
80201: PUSH
80202: LD_VAR 0 2
80206: PUSH
80207: LD_INT 2
80209: ARRAY
80210: PUSH
80211: LD_INT 8
80213: PUSH
80214: EMPTY
80215: LIST
80216: LIST
80217: LIST
80218: LIST
80219: PUSH
80220: EMPTY
80221: LIST
80222: LIST
80223: PUSH
80224: EMPTY
80225: LIST
80226: LIST
80227: PPUSH
80228: CALL_OW 72
80232: ST_TO_ADDR
// if not vehicles then
80233: LD_VAR 0 1
80237: NOT
80238: IFFALSE 80242
// exit ;
80240: GO 80269
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
80242: LD_VAR 0 1
80246: PPUSH
80247: LD_VAR 0 2
80251: PUSH
80252: LD_INT 1
80254: ARRAY
80255: PPUSH
80256: LD_VAR 0 2
80260: PUSH
80261: LD_INT 2
80263: ARRAY
80264: PPUSH
80265: CALL_OW 111
// end ;
80269: LD_VAR 0 3
80273: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
80274: LD_INT 0
80276: PPUSH
80277: PPUSH
80278: PPUSH
// if not side or not area then
80279: LD_VAR 0 1
80283: NOT
80284: PUSH
80285: LD_VAR 0 2
80289: NOT
80290: OR
80291: IFFALSE 80295
// exit ;
80293: GO 80414
// tmp := AreaToList ( area , 0 ) ;
80295: LD_ADDR_VAR 0 5
80299: PUSH
80300: LD_VAR 0 2
80304: PPUSH
80305: LD_INT 0
80307: PPUSH
80308: CALL_OW 517
80312: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
80313: LD_ADDR_VAR 0 4
80317: PUSH
80318: DOUBLE
80319: LD_INT 1
80321: DEC
80322: ST_TO_ADDR
80323: LD_VAR 0 5
80327: PUSH
80328: LD_INT 1
80330: ARRAY
80331: PUSH
80332: FOR_TO
80333: IFFALSE 80412
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
80335: LD_VAR 0 5
80339: PUSH
80340: LD_INT 1
80342: ARRAY
80343: PUSH
80344: LD_VAR 0 4
80348: ARRAY
80349: PPUSH
80350: LD_VAR 0 5
80354: PUSH
80355: LD_INT 2
80357: ARRAY
80358: PUSH
80359: LD_VAR 0 4
80363: ARRAY
80364: PPUSH
80365: CALL_OW 351
80369: IFFALSE 80410
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
80371: LD_VAR 0 5
80375: PUSH
80376: LD_INT 1
80378: ARRAY
80379: PUSH
80380: LD_VAR 0 4
80384: ARRAY
80385: PPUSH
80386: LD_VAR 0 5
80390: PUSH
80391: LD_INT 2
80393: ARRAY
80394: PUSH
80395: LD_VAR 0 4
80399: ARRAY
80400: PPUSH
80401: LD_VAR 0 1
80405: PPUSH
80406: CALL_OW 244
// end ;
80410: GO 80332
80412: POP
80413: POP
// end ; end_of_file
80414: LD_VAR 0 3
80418: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80419: LD_VAR 0 1
80423: PUSH
80424: LD_INT 200
80426: DOUBLE
80427: GREATEREQUAL
80428: IFFALSE 80436
80430: LD_INT 299
80432: DOUBLE
80433: LESSEQUAL
80434: IFTRUE 80438
80436: GO 80470
80438: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80439: LD_VAR 0 1
80443: PPUSH
80444: LD_VAR 0 2
80448: PPUSH
80449: LD_VAR 0 3
80453: PPUSH
80454: LD_VAR 0 4
80458: PPUSH
80459: LD_VAR 0 5
80463: PPUSH
80464: CALL 33130 0 5
80468: GO 80547
80470: LD_INT 300
80472: DOUBLE
80473: GREATEREQUAL
80474: IFFALSE 80482
80476: LD_INT 399
80478: DOUBLE
80479: LESSEQUAL
80480: IFTRUE 80484
80482: GO 80546
80484: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80485: LD_VAR 0 1
80489: PPUSH
80490: LD_VAR 0 2
80494: PPUSH
80495: LD_VAR 0 3
80499: PPUSH
80500: LD_VAR 0 4
80504: PPUSH
80505: LD_VAR 0 5
80509: PPUSH
80510: LD_VAR 0 6
80514: PPUSH
80515: LD_VAR 0 7
80519: PPUSH
80520: LD_VAR 0 8
80524: PPUSH
80525: LD_VAR 0 9
80529: PPUSH
80530: LD_VAR 0 10
80534: PPUSH
80535: LD_VAR 0 11
80539: PPUSH
80540: CALL 29455 0 11
80544: GO 80547
80546: POP
// end ;
80547: PPOPN 11
80549: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80550: LD_VAR 0 1
80554: PPUSH
80555: LD_VAR 0 2
80559: PPUSH
80560: LD_VAR 0 3
80564: PPUSH
80565: LD_VAR 0 4
80569: PPUSH
80570: LD_VAR 0 5
80574: PPUSH
80575: CALL 32866 0 5
// end ; end_of_file
80579: PPOPN 5
80581: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80582: LD_VAR 0 1
80586: PPUSH
80587: LD_VAR 0 2
80591: PPUSH
80592: LD_VAR 0 3
80596: PPUSH
80597: LD_VAR 0 4
80601: PPUSH
80602: LD_VAR 0 5
80606: PPUSH
80607: LD_VAR 0 6
80611: PPUSH
80612: CALL 17107 0 6
// end ;
80616: PPOPN 6
80618: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80619: LD_INT 0
80621: PPUSH
// begin if not units then
80622: LD_VAR 0 1
80626: NOT
80627: IFFALSE 80631
// exit ;
80629: GO 80631
// end ;
80631: PPOPN 7
80633: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80634: CALL 16994 0 0
// end ;
80638: PPOPN 1
80640: END
