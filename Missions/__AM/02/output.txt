// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// AnimateTrees ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 573
// PrepareDifficulty ;
 168: CALL 10287 0 0
// PrepareRussianCommander ;
 172: CALL 11743 0 0
// PrepareSouthBase ;
 176: CALL 11826 0 0
// PrepareNorthBase ;
 180: CALL 12165 0 0
// PrepareOtherRussians ;
 184: CALL 12531 0 0
// PrepareHeroes ;
 188: CALL 10602 0 0
// PrepareLisSquad ;
 192: CALL 10930 0 0
// PrepareOtherAmericans ;
 196: CALL 11275 0 0
// end ; end_of_file
 200: END
// every 1 do var tmp ;
 201: GO 203
 203: DISABLE
 204: LD_INT 0
 206: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 207: LD_EXP 1
 211: PPUSH
 212: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: LD_EXP 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: DIFF
 258: ST_TO_ADDR
// if Cyrus and Bobby then
 259: LD_EXP 3
 263: PUSH
 264: LD_EXP 2
 268: AND
 269: IFFALSE 599
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 271: LD_EXP 3
 275: PPUSH
 276: LD_INT 43
 278: PPUSH
 279: LD_INT 72
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_INT 44
 293: PPUSH
 294: LD_INT 70
 296: PPUSH
 297: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 301: LD_EXP 1
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: LD_INT 73
 311: PPUSH
 312: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 316: LD_EXP 3
 320: PPUSH
 321: LD_STRING D1a-Cyrus-1
 323: PPUSH
 324: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_STRING D1a-JMM-1
 335: PPUSH
 336: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 340: LD_EXP 3
 344: PPUSH
 345: LD_INT 37
 347: PPUSH
 348: LD_INT 66
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 355: LD_EXP 2
 359: PPUSH
 360: LD_INT 41
 362: PPUSH
 363: LD_INT 67
 365: PPUSH
 366: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 370: LD_EXP 1
 374: PPUSH
 375: LD_INT 38
 377: PPUSH
 378: LD_INT 64
 380: PPUSH
 381: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_STRING D1a-Bobby-2
 392: PPUSH
 393: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 397: LD_EXP 3
 401: PPUSH
 402: LD_INT 35
 404: PPUSH
 405: LD_INT 62
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 412: LD_EXP 2
 416: PPUSH
 417: LD_INT 32
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 35
 434: PPUSH
 435: LD_INT 60
 437: PPUSH
 438: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 442: LD_EXP 1
 446: PPUSH
 447: LD_STRING D1a-JMM-2
 449: PPUSH
 450: CALL_OW 88
// ComWalk ( Lisa ) ;
 454: LD_EXP 4
 458: PPUSH
 459: CALL_OW 138
// wait ( 0 0$1 ) ;
 463: LD_INT 35
 465: PPUSH
 466: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 470: LD_EXP 4
 474: PPUSH
 475: LD_EXP 1
 479: PPUSH
 480: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 484: LD_EXP 1
 488: PUSH
 489: LD_EXP 3
 493: PUSH
 494: LD_EXP 2
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: PPUSH
 504: LD_EXP 4
 508: PPUSH
 509: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 513: LD_VAR 0 1
 517: PUSH
 518: LD_INT 1
 520: ARRAY
 521: PPUSH
 522: LD_INT 33
 524: PPUSH
 525: LD_INT 55
 527: PPUSH
 528: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 532: LD_VAR 0 1
 536: PUSH
 537: LD_INT 2
 539: ARRAY
 540: PPUSH
 541: LD_INT 30
 543: PPUSH
 544: LD_INT 54
 546: PPUSH
 547: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 551: LD_VAR 0 1
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_EXP 1
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 569: LD_VAR 0 1
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PPUSH
 578: LD_EXP 1
 582: PPUSH
 583: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_STRING D1a-Lisa-2
 594: PPUSH
 595: CALL_OW 88
// end ; if Cyrus and not Bobby then
 599: LD_EXP 3
 603: PUSH
 604: LD_EXP 2
 608: NOT
 609: AND
 610: IFFALSE 815
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 612: LD_EXP 3
 616: PPUSH
 617: LD_INT 43
 619: PPUSH
 620: LD_INT 72
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 46
 634: PPUSH
 635: LD_INT 73
 637: PPUSH
 638: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 642: LD_EXP 3
 646: PPUSH
 647: LD_STRING D1a-Cyrus-1
 649: PPUSH
 650: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 654: LD_EXP 1
 658: PPUSH
 659: LD_STRING D1a-JMM-1
 661: PPUSH
 662: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 666: LD_EXP 3
 670: PPUSH
 671: LD_INT 37
 673: PPUSH
 674: LD_INT 66
 676: PPUSH
 677: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 681: LD_EXP 1
 685: PPUSH
 686: LD_INT 38
 688: PPUSH
 689: LD_INT 64
 691: PPUSH
 692: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 696: LD_EXP 3
 700: PPUSH
 701: LD_STRING D1a-Cyrus-2
 703: PPUSH
 704: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 708: LD_EXP 3
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 62
 718: PPUSH
 719: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_INT 35
 730: PPUSH
 731: LD_INT 60
 733: PPUSH
 734: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_STRING D1a-JMM-2
 745: PPUSH
 746: CALL_OW 88
// ComWalk ( Lisa ) ;
 750: LD_EXP 4
 754: PPUSH
 755: CALL_OW 138
// wait ( 0 0$1 ) ;
 759: LD_INT 35
 761: PPUSH
 762: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 766: LD_EXP 4
 770: PPUSH
 771: LD_EXP 1
 775: PPUSH
 776: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_STRING D1a-Lisa-2
 787: PPUSH
 788: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 792: LD_EXP 1
 796: PUSH
 797: LD_EXP 3
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: LD_EXP 4
 810: PPUSH
 811: CALL_OW 119
// end ; if not Cyrus and Bobby then
 815: LD_EXP 3
 819: NOT
 820: PUSH
 821: LD_EXP 2
 825: AND
 826: IFFALSE 1105
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_INT 44
 835: PPUSH
 836: LD_INT 70
 838: PPUSH
 839: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 46
 850: PPUSH
 851: LD_INT 73
 853: PPUSH
 854: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 858: LD_EXP 2
 862: PPUSH
 863: LD_STRING D1a-Bobby-1
 865: PPUSH
 866: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 870: LD_EXP 1
 874: PPUSH
 875: LD_STRING D1a-JMM-1
 877: PPUSH
 878: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 37
 889: PPUSH
 890: LD_INT 66
 892: PPUSH
 893: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_INT 38
 904: PPUSH
 905: LD_INT 64
 907: PPUSH
 908: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 912: LD_EXP 2
 916: PPUSH
 917: LD_STRING D1a-Bobby-2
 919: PPUSH
 920: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 62
 934: PPUSH
 935: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_INT 35
 946: PPUSH
 947: LD_INT 60
 949: PPUSH
 950: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_STRING D1a-JMM-2
 961: PPUSH
 962: CALL_OW 88
// ComWalk ( Lisa ) ;
 966: LD_EXP 4
 970: PPUSH
 971: CALL_OW 138
// wait ( 0 0$1 ) ;
 975: LD_INT 35
 977: PPUSH
 978: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 982: LD_EXP 4
 986: PPUSH
 987: LD_EXP 1
 991: PPUSH
 992: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 996: LD_EXP 1
1000: PUSH
1001: LD_EXP 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: LD_EXP 4
1014: PPUSH
1015: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_INT 33
1030: PPUSH
1031: LD_INT 55
1033: PPUSH
1034: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1038: LD_VAR 0 1
1042: PUSH
1043: LD_INT 2
1045: ARRAY
1046: PPUSH
1047: LD_INT 30
1049: PPUSH
1050: LD_INT 54
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1057: LD_VAR 0 1
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_EXP 1
1070: PPUSH
1071: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: LD_EXP 1
1088: PPUSH
1089: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1093: LD_EXP 4
1097: PPUSH
1098: LD_STRING D1a-Lisa-2
1100: PPUSH
1101: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1105: LD_EXP 3
1109: NOT
1110: PUSH
1111: LD_EXP 2
1115: NOT
1116: AND
1117: IFFALSE 1331
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_INT 37
1126: PPUSH
1127: LD_INT 66
1129: PPUSH
1130: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1
1141: PPUSH
1142: CALL_OW 88
// ComCrawl ( JMM ) ;
1146: LD_EXP 1
1150: PPUSH
1151: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1155: LD_EXP 1
1159: PPUSH
1160: LD_INT 35
1162: PPUSH
1163: LD_INT 60
1165: PPUSH
1166: CALL_OW 171
// wait ( 0 0$8 ) ;
1170: LD_INT 280
1172: PPUSH
1173: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_STRING D1b-JMM-1a
1184: PPUSH
1185: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1189: LD_EXP 1
1193: PUSH
1194: LD_EXP 4
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 138
// wait ( 0 0$1 ) ;
1207: LD_INT 35
1209: PPUSH
1210: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_EXP 1
1223: PPUSH
1224: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1228: LD_EXP 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: PPUSH
1236: LD_EXP 4
1240: PPUSH
1241: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1245: LD_VAR 0 1
1249: PUSH
1250: LD_INT 1
1252: ARRAY
1253: PPUSH
1254: LD_INT 33
1256: PPUSH
1257: LD_INT 55
1259: PPUSH
1260: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: ARRAY
1272: PPUSH
1273: LD_INT 30
1275: PPUSH
1276: LD_INT 54
1278: PPUSH
1279: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1283: LD_VAR 0 1
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1301: LD_VAR 0 1
1305: PUSH
1306: LD_INT 2
1308: ARRAY
1309: PPUSH
1310: LD_EXP 1
1314: PPUSH
1315: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1319: LD_EXP 4
1323: PPUSH
1324: LD_STRING D1b-Lisa-1
1326: PPUSH
1327: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1331: LD_EXP 1
1335: PPUSH
1336: LD_STRING D1-JMM-1
1338: PPUSH
1339: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1343: LD_EXP 4
1347: PPUSH
1348: LD_STRING D1-Lisa-1
1350: PPUSH
1351: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1355: LD_EXP 1
1359: PPUSH
1360: LD_STRING D1-JMM-2
1362: PPUSH
1363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1367: LD_EXP 9
1371: PPUSH
1372: LD_STRING D1-Pow-2
1374: PPUSH
1375: CALL_OW 94
// if Cyrus then
1379: LD_EXP 3
1383: IFFALSE 1409
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1385: LD_EXP 3
1389: PPUSH
1390: LD_STRING D1-Cyrus-2
1392: PPUSH
1393: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1397: LD_EXP 1
1401: PPUSH
1402: LD_STRING D1-JMM-3
1404: PPUSH
1405: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1409: LD_EXP 9
1413: PPUSH
1414: LD_STRING D1-Pow-3
1416: PPUSH
1417: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1421: LD_EXP 1
1425: PPUSH
1426: LD_STRING D1-JMM-4
1428: PPUSH
1429: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_STRING D1-Pow-4
1440: PPUSH
1441: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_STRING D1-Pow-4a
1452: PPUSH
1453: CALL_OW 94
// if Cyrus then
1457: LD_EXP 3
1461: IFFALSE 1475
// Say ( Cyrus , D1-Cyrus-4 ) ;
1463: LD_EXP 3
1467: PPUSH
1468: LD_STRING D1-Cyrus-4
1470: PPUSH
1471: CALL_OW 88
// if Bobby then
1475: LD_EXP 2
1479: IFFALSE 1517
// begin Say ( Bobby , D1-Bobby-4 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1-Bobby-4
1488: PPUSH
1489: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1493: LD_EXP 4
1497: PPUSH
1498: LD_STRING D1-Lisa-4
1500: PPUSH
1501: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1505: LD_EXP 1
1509: PPUSH
1510: LD_STRING D1-JMM-5
1512: PPUSH
1513: CALL_OW 88
// end ; InGameOff ;
1517: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1521: LD_INT 22
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PPUSH
1531: CALL_OW 69
1535: PUSH
1536: LD_EXP 6
1540: PUSH
1541: LD_EXP 7
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: DIFF
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1558: LD_STRING M1
1560: PPUSH
1561: CALL_OW 337
// SaveForQuickRestart ;
1565: CALL_OW 22
// end ;
1569: PPOPN 1
1571: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1572: LD_INT 7
1574: PPUSH
1575: LD_INT 22
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PPUSH
1585: CALL_OW 70
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: IFFALSE 2010
1595: GO 1597
1597: DISABLE
// begin InGameOn ;
1598: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1602: LD_INT 22
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 21
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PPUSH
1631: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1635: LD_INT 24
1637: PPUSH
1638: LD_INT 32
1640: PPUSH
1641: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1660: LD_EXP 5
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: CALL_OW 336
// wait ( 0 0$1 ) ;
1672: LD_INT 35
1674: PPUSH
1675: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 27
1686: PPUSH
1687: LD_INT 38
1689: PPUSH
1690: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1694: LD_EXP 5
1698: PPUSH
1699: LD_EXP 1
1703: PPUSH
1704: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1708: LD_INT 22
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 21
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: LD_EXP 5
1741: PUSH
1742: EMPTY
1743: LIST
1744: DIFF
1745: PPUSH
1746: LD_EXP 5
1750: PPUSH
1751: CALL_OW 119
// wait ( 0 0$1 ) ;
1755: LD_INT 35
1757: PPUSH
1758: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1762: LD_EXP 5
1766: PPUSH
1767: LD_STRING D2a-Khat-1
1769: PPUSH
1770: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING D2a-JMM-1
1781: PPUSH
1782: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1786: LD_EXP 5
1790: PPUSH
1791: LD_STRING D2a-Khat-2
1793: PPUSH
1794: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_STRING D2a-JMM-2
1805: PPUSH
1806: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING D2a-Khat-3
1817: PPUSH
1818: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1822: LD_EXP 1
1826: PPUSH
1827: LD_STRING D2a-JMM-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1834: LD_EXP 5
1838: PPUSH
1839: LD_STRING D2a-Khat-4
1841: PPUSH
1842: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1846: LD_EXP 1
1850: PPUSH
1851: LD_STRING D2a-JMM-4
1853: PPUSH
1854: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1858: LD_EXP 5
1862: PPUSH
1863: LD_STRING D2a-Khat-5
1865: PPUSH
1866: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D2a-JMM-5
1877: PPUSH
1878: CALL_OW 88
// InGameOff ;
1882: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1886: LD_INT 22
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 800
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 0
1935: GREATER
1936: IFFALSE 2010
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1938: LD_EXP 5
1942: PPUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 21
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: LD_INT 24
1968: PUSH
1969: LD_INT 1000
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PPUSH
1994: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1998: LD_EXP 5
2002: PPUSH
2003: LD_STRING D2b-Khat-1
2005: PPUSH
2006: CALL_OW 88
// end ; end ;
2010: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp , p ;
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 70
2028: PUSH
2029: LD_INT 0
2031: GREATER
2032: IFFALSE 3229
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
2043: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: LD_INT 999
2051: PUSH
2052: LD_INT 999
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: LD_INT 22
2069: PUSH
2070: LD_INT 1
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 21
2079: PUSH
2080: LD_INT 1
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PPUSH
2091: CALL_OW 69
2095: PUSH
2096: LD_EXP 1
2100: PUSH
2101: LD_EXP 2
2105: PUSH
2106: LD_EXP 3
2110: PUSH
2111: LD_EXP 4
2115: PUSH
2116: LD_EXP 5
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: DIFF
2128: ST_TO_ADDR
// PrepareDeadSoldiers ;
2129: CALL 11433 0 0
// spotCorpses = 1 ;
2133: LD_ADDR_EXP 32
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2141: LD_INT 70
2143: PPUSH
2144: CALL_OW 67
// InGameOn ;
2148: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2152: LD_INT 23
2154: PPUSH
2155: LD_INT 12
2157: PPUSH
2158: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2162: LD_ADDR_VAR 0 3
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PUSH
2176: LD_INT 2
2178: ARRAY
2179: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 1
2218: PUSH
2219: LD_EXP 5
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: DIFF
2228: PUSH
2229: FOR_IN
2230: IFFALSE 2281
// if IsOK ( i ) then
2232: LD_VAR 0 1
2236: PPUSH
2237: CALL_OW 302
2241: IFFALSE 2279
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_VAR 0 2
2252: PUSH
2253: LD_VAR 0 1
2257: PUSH
2258: LD_VAR 0 1
2262: PPUSH
2263: LD_INT 16
2265: PPUSH
2266: CALL_OW 299
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: ADD
2278: ST_TO_ADDR
2279: GO 2229
2281: POP
2282: POP
// for i = 2 to distanceTab do
2283: LD_ADDR_VAR 0 1
2287: PUSH
2288: DOUBLE
2289: LD_INT 2
2291: DEC
2292: ST_TO_ADDR
2293: LD_VAR 0 2
2297: PUSH
2298: FOR_TO
2299: IFFALSE 2345
// if distanceTab [ i ] [ 2 ] < min then
2301: LD_VAR 0 2
2305: PUSH
2306: LD_VAR 0 1
2310: ARRAY
2311: PUSH
2312: LD_INT 2
2314: ARRAY
2315: PUSH
2316: LD_VAR 0 3
2320: LESS
2321: IFFALSE 2343
// min = distanceTab [ i ] [ 2 ] ;
2323: LD_ADDR_VAR 0 3
2327: PUSH
2328: LD_VAR 0 2
2332: PUSH
2333: LD_VAR 0 1
2337: ARRAY
2338: PUSH
2339: LD_INT 2
2341: ARRAY
2342: ST_TO_ADDR
2343: GO 2298
2345: POP
2346: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2347: LD_ADDR_VAR 0 1
2351: PUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 21
2364: PUSH
2365: LD_INT 1
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_EXP 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: DIFF
2389: PUSH
2390: FOR_IN
2391: IFFALSE 2461
// begin ComMoveToArea ( i , DeadCutscene ) ;
2393: LD_VAR 0 1
2397: PPUSH
2398: LD_INT 28
2400: PPUSH
2401: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2405: LD_EXP 1
2409: PPUSH
2410: LD_INT 30
2412: PPUSH
2413: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2417: LD_VAR 0 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2432: LD_EXP 1
2436: PPUSH
2437: LD_INT 23
2439: PPUSH
2440: LD_INT 11
2442: PPUSH
2443: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2447: LD_EXP 34
2451: PPUSH
2452: LD_INT 250
2454: PPUSH
2455: CALL_OW 234
// end ;
2459: GO 2390
2461: POP
2462: POP
// for i = 2 to distanceTab do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: DOUBLE
2469: LD_INT 2
2471: DEC
2472: ST_TO_ADDR
2473: LD_VAR 0 2
2477: PUSH
2478: FOR_TO
2479: IFFALSE 2865
// begin if distanceTab [ i ] [ 2 ] = min then
2481: LD_VAR 0 2
2485: PUSH
2486: LD_VAR 0 1
2490: ARRAY
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PUSH
2496: LD_VAR 0 3
2500: EQUAL
2501: IFFALSE 2863
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2503: LD_VAR 0 2
2507: PUSH
2508: LD_VAR 0 1
2512: ARRAY
2513: PUSH
2514: LD_INT 1
2516: ARRAY
2517: PUSH
2518: LD_EXP 2
2522: EQUAL
2523: IFFALSE 2537
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2525: LD_EXP 2
2529: PPUSH
2530: LD_STRING DCorpses-Bobby-1
2532: PPUSH
2533: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2537: LD_VAR 0 2
2541: PUSH
2542: LD_VAR 0 1
2546: ARRAY
2547: PUSH
2548: LD_INT 1
2550: ARRAY
2551: PUSH
2552: LD_EXP 3
2556: EQUAL
2557: IFFALSE 2571
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2559: LD_EXP 3
2563: PPUSH
2564: LD_STRING DCorpses-Cyrus-1
2566: PPUSH
2567: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2571: LD_VAR 0 2
2575: PUSH
2576: LD_VAR 0 1
2580: ARRAY
2581: PUSH
2582: LD_INT 1
2584: ARRAY
2585: PUSH
2586: LD_EXP 4
2590: EQUAL
2591: IFFALSE 2605
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2593: LD_EXP 4
2597: PPUSH
2598: LD_STRING DCorpses-Lisa-1
2600: PPUSH
2601: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 4
2624: PUSH
2625: LD_INT 1
2627: ARRAY
2628: EQUAL
2629: PUSH
2630: LD_VAR 0 4
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: CALL_OW 258
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: AND
2648: IFFALSE 2666
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2650: LD_VAR 0 4
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: PPUSH
2659: LD_STRING DCorpses-Sol1-1
2661: PPUSH
2662: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2666: LD_VAR 0 2
2670: PUSH
2671: LD_VAR 0 1
2675: ARRAY
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: PUSH
2681: LD_VAR 0 4
2685: PUSH
2686: LD_INT 1
2688: ARRAY
2689: EQUAL
2690: PUSH
2691: LD_VAR 0 4
2695: PUSH
2696: LD_INT 1
2698: ARRAY
2699: PPUSH
2700: CALL_OW 258
2704: PUSH
2705: LD_INT 2
2707: EQUAL
2708: AND
2709: IFFALSE 2727
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2711: LD_VAR 0 4
2715: PUSH
2716: LD_INT 1
2718: ARRAY
2719: PPUSH
2720: LD_STRING DCorpses-FSol1-1
2722: PPUSH
2723: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_VAR 0 1
2736: ARRAY
2737: PUSH
2738: LD_INT 1
2740: ARRAY
2741: PUSH
2742: LD_VAR 0 4
2746: PUSH
2747: LD_INT 2
2749: ARRAY
2750: EQUAL
2751: PUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 2
2759: ARRAY
2760: PPUSH
2761: CALL_OW 258
2765: PUSH
2766: LD_INT 1
2768: EQUAL
2769: AND
2770: IFFALSE 2788
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2772: LD_VAR 0 4
2776: PUSH
2777: LD_INT 2
2779: ARRAY
2780: PPUSH
2781: LD_STRING DCorpses-Sol1-1
2783: PPUSH
2784: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2788: LD_VAR 0 2
2792: PUSH
2793: LD_VAR 0 1
2797: ARRAY
2798: PUSH
2799: LD_INT 1
2801: ARRAY
2802: PUSH
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 2
2810: ARRAY
2811: EQUAL
2812: PUSH
2813: LD_VAR 0 4
2817: PUSH
2818: LD_INT 2
2820: ARRAY
2821: PPUSH
2822: CALL_OW 258
2826: PUSH
2827: LD_INT 2
2829: EQUAL
2830: AND
2831: IFFALSE 2849
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2833: LD_VAR 0 4
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_STRING DCorpses-FSol1-1
2844: PPUSH
2845: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2849: LD_EXP 34
2853: PPUSH
2854: LD_INT 150
2856: PPUSH
2857: CALL_OW 234
// break ;
2861: GO 2865
// end ; end ;
2863: GO 2478
2865: POP
2866: POP
// p := 0 ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_INT 0
2874: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2875: LD_INT 35
2877: PPUSH
2878: CALL_OW 67
// p := p + 1 ;
2882: LD_ADDR_VAR 0 5
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2896: LD_ADDR_VAR 0 1
2900: PUSH
2901: LD_INT 22
2903: PUSH
2904: LD_INT 1
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 21
2913: PUSH
2914: LD_INT 1
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PPUSH
2925: CALL_OW 69
2929: PUSH
2930: LD_EXP 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: DIFF
2938: PUSH
2939: FOR_IN
2940: IFFALSE 3010
// begin ComMoveToArea ( i , DeadCutscene ) ;
2942: LD_VAR 0 1
2946: PPUSH
2947: LD_INT 28
2949: PPUSH
2950: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2954: LD_EXP 1
2958: PPUSH
2959: LD_INT 30
2961: PPUSH
2962: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2966: LD_VAR 0 1
2970: PPUSH
2971: LD_INT 23
2973: PPUSH
2974: LD_INT 11
2976: PPUSH
2977: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2981: LD_EXP 1
2985: PPUSH
2986: LD_INT 23
2988: PPUSH
2989: LD_INT 11
2991: PPUSH
2992: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2996: LD_EXP 34
3000: PPUSH
3001: LD_INT 250
3003: PPUSH
3004: CALL_OW 234
// end ;
3008: GO 2939
3010: POP
3011: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3012: LD_EXP 1
3016: PPUSH
3017: LD_INT 30
3019: PPUSH
3020: CALL_OW 308
3024: PUSH
3025: LD_VAR 0 5
3029: PUSH
3030: LD_INT 16
3032: GREATEREQUAL
3033: OR
3034: IFFALSE 2875
// wait ( 0 0$1 ) ;
3036: LD_INT 35
3038: PPUSH
3039: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3043: LD_EXP 1
3047: PPUSH
3048: LD_STRING DCorpses-JMM-1
3050: PPUSH
3051: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3055: LD_EXP 34
3059: PPUSH
3060: LD_INT 100
3062: PPUSH
3063: CALL_OW 234
// if IsOK ( Khatam ) then
3067: LD_EXP 5
3071: PPUSH
3072: CALL_OW 302
3076: IFFALSE 3213
// begin repeat wait ( 0 0$1 ) ;
3078: LD_INT 35
3080: PPUSH
3081: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3085: LD_EXP 5
3089: PPUSH
3090: LD_EXP 34
3094: PPUSH
3095: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3099: LD_EXP 5
3103: PPUSH
3104: LD_EXP 34
3108: PPUSH
3109: CALL_OW 296
3113: PUSH
3114: LD_INT 2
3116: LESS
3117: IFFALSE 3078
// spotCorpses = 0 ;
3119: LD_ADDR_EXP 32
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3127: LD_EXP 34
3131: PPUSH
3132: LD_INT 10
3134: PPUSH
3135: CALL_OW 234
// wait ( 0 0$3 ) ;
3139: LD_INT 105
3141: PPUSH
3142: CALL_OW 67
// KillUnit ( DyingSold ) ;
3146: LD_EXP 34
3150: PPUSH
3151: CALL_OW 66
// wait ( 0 0$1 ) ;
3155: LD_INT 35
3157: PPUSH
3158: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3162: LD_EXP 1
3166: PUSH
3167: LD_EXP 5
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3180: LD_EXP 5
3184: PPUSH
3185: LD_EXP 1
3189: PPUSH
3190: CALL_OW 119
// wait ( 0 0$1 ) ;
3194: LD_INT 35
3196: PPUSH
3197: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3201: LD_EXP 5
3205: PPUSH
3206: LD_STRING DCorpses-Khat-1
3208: PPUSH
3209: CALL_OW 88
// end ; InGameOff ;
3213: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3217: LD_EXP 1
3221: PPUSH
3222: LD_STRING DCorpses-JMM-2
3224: PPUSH
3225: CALL_OW 88
// end ;
3229: PPOPN 5
3231: END
// every 0 0$1 trigger spotCorpses = 1 do
3232: LD_EXP 32
3236: PUSH
3237: LD_INT 1
3239: EQUAL
3240: IFFALSE 3258
3242: GO 3244
3244: DISABLE
// begin enable ;
3245: ENABLE
// SetLives ( DyingSold , 10 ) ;
3246: LD_EXP 34
3250: PPUSH
3251: LD_INT 10
3253: PPUSH
3254: CALL_OW 234
// end ;
3258: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3259: LD_INT 8
3261: PPUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 1
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 70
3276: PUSH
3277: LD_INT 0
3279: GREATER
3280: PUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 1
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_EXP 7
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: LD_EXP 7
3310: PPUSH
3311: CALL_OW 296
3315: PUSH
3316: LD_INT 13
3318: LESS
3319: OR
3320: IFFALSE 3517
3322: GO 3324
3324: DISABLE
3325: LD_INT 0
3327: PPUSH
// begin InGameOn ;
3328: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3332: LD_EXP 7
3336: PPUSH
3337: LD_INT 250
3339: PPUSH
3340: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 ] [ Difficulty ] ) ;
3344: LD_EXP 6
3348: PPUSH
3349: LD_INT 1000
3351: PUSH
3352: LD_INT 800
3354: PUSH
3355: LD_INT 750
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_OWVAR 67
3367: ARRAY
3368: PPUSH
3369: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3373: LD_INT 3
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: LD_INT 2
3381: PPUSH
3382: LD_INT 1
3384: PPUSH
3385: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3389: LD_EXP 6
3393: PUSH
3394: LD_EXP 7
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3407: LD_ADDR_VAR 0 1
3411: PUSH
3412: LD_INT 9
3414: PPUSH
3415: LD_INT 22
3417: PUSH
3418: LD_INT 3
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: PPUSH
3425: CALL_OW 70
3429: PUSH
3430: FOR_IN
3431: IFFALSE 3444
// ComFree ( i ) ;
3433: LD_VAR 0 1
3437: PPUSH
3438: CALL_OW 139
3442: GO 3430
3444: POP
3445: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3446: LD_ADDR_VAR 0 1
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: FOR_IN
3467: IFFALSE 3480
// ComFree ( i ) ;
3469: LD_VAR 0 1
3473: PPUSH
3474: CALL_OW 139
3478: GO 3466
3480: POP
3481: POP
// wait ( 0 0$1 ) ;
3482: LD_INT 35
3484: PPUSH
3485: CALL_OW 67
// InGameOff ;
3489: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3493: LD_EXP 6
3497: PPUSH
3498: LD_STRING DF-Sol1-1
3500: PPUSH
3501: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3505: LD_EXP 1
3509: PPUSH
3510: LD_STRING DF-JMM-1
3512: PPUSH
3513: CALL_OW 88
// end ;
3517: PPOPN 1
3519: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3520: LD_INT 19
3522: PPUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PPUSH
3533: CALL_OW 70
3537: PUSH
3538: LD_INT 0
3540: EQUAL
3541: IFFALSE 3650
3543: GO 3545
3545: DISABLE
// begin if not IsDead ( Brian ) then
3546: LD_EXP 6
3550: PPUSH
3551: CALL_OW 301
3555: NOT
3556: IFFALSE 3570
// SetSide ( Brian , 1 ) ;
3558: LD_EXP 6
3562: PPUSH
3563: LD_INT 1
3565: PPUSH
3566: CALL_OW 235
// if not IsDead ( Jerry ) then
3570: LD_EXP 7
3574: PPUSH
3575: CALL_OW 301
3579: NOT
3580: IFFALSE 3594
// SetSide ( Jerry , 1 ) ;
3582: LD_EXP 7
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3594: LD_INT 22
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 25
3606: PUSH
3607: LD_INT 4
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: IFFALSE 3638
// Say ( JMM , DFa-JMM-1 ) else
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING DFa-JMM-1
3631: PPUSH
3632: CALL_OW 88
3636: GO 3650
// Say ( JMM , DFa-JMM-1a ) ;
3638: LD_EXP 1
3642: PPUSH
3643: LD_STRING DFa-JMM-1a
3645: PPUSH
3646: CALL_OW 88
// end ;
3650: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3651: LD_INT 19
3653: PPUSH
3654: LD_INT 22
3656: PUSH
3657: LD_INT 3
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PPUSH
3664: CALL_OW 70
3668: PUSH
3669: LD_INT 0
3671: EQUAL
3672: PUSH
3673: LD_EXP 6
3677: PPUSH
3678: CALL_OW 302
3682: NOT
3683: AND
3684: IFFALSE 3770
3686: GO 3688
3688: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3689: LD_INT 35
3691: PPUSH
3692: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3696: LD_EXP 6
3700: PPUSH
3701: CALL_OW 256
3705: PUSH
3706: LD_INT 250
3708: GREATER
3709: IFFALSE 3689
// Say ( Brian , DFb-Sol1-1 ) ;
3711: LD_EXP 6
3715: PPUSH
3716: LD_STRING DFb-Sol1-1
3718: PPUSH
3719: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3723: LD_EXP 6
3727: PPUSH
3728: LD_INT 78
3730: PPUSH
3731: LD_INT 74
3733: PPUSH
3734: CALL_OW 111
// if IsDead ( Jerry ) then
3738: LD_EXP 7
3742: PPUSH
3743: CALL_OW 301
3747: IFFALSE 3763
// Say ( Brian , DFb-Sol1-1a ) else
3749: LD_EXP 6
3753: PPUSH
3754: LD_STRING DFb-Sol1-1a
3756: PPUSH
3757: CALL_OW 88
3761: GO 3770
// SetAchievement ( ACH_JERRY ) ;
3763: LD_STRING ACH_JERRY
3765: PPUSH
3766: CALL_OW 543
// end ;
3770: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3771: LD_INT 22
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 21
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PPUSH
3795: CALL_OW 69
3799: PUSH
3800: LD_INT 0
3802: EQUAL
3803: IFFALSE 3891
3805: GO 3807
3807: DISABLE
3808: LD_INT 0
3810: PPUSH
// begin enable ;
3811: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: LD_INT 22
3819: PUSH
3820: LD_INT 3
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 21
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 30
3839: PUSH
3840: LD_INT 31
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PPUSH
3852: CALL_OW 69
3856: PUSH
3857: FOR_IN
3858: IFFALSE 3889
// begin if See ( 1 , i ) then
3860: LD_INT 1
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: CALL_OW 292
3872: IFFALSE 3887
// begin disable ;
3874: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3875: LD_EXP 1
3879: PPUSH
3880: LD_STRING DX1-JMM-1
3882: PPUSH
3883: CALL_OW 88
// end ; end ;
3887: GO 3857
3889: POP
3890: POP
// end ;
3891: PPOPN 1
3893: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 11
3899: PPUSH
3900: CALL_OW 294
3904: IFFALSE 4163
3906: GO 3908
3908: DISABLE
3909: LD_INT 0
3911: PPUSH
3912: PPUSH
3913: PPUSH
// begin DialogueOn ;
3914: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3918: LD_INT 11
3920: PPUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: PPUSH
3945: CALL_OW 70
3949: PUSH
3950: LD_INT 1
3952: ARRAY
3953: PPUSH
3954: LD_STRING DX3-Rus1-1
3956: PPUSH
3957: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING DX3-JMM-1
3968: PPUSH
3969: CALL_OW 88
// DialogueOff ;
3973: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3977: LD_ADDR_VAR 0 1
3981: PUSH
3982: LD_INT 11
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 25
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 70
4013: PUSH
4014: FOR_IN
4015: IFFALSE 4035
// southBaseDefenders = southBaseDefenders ^ i ;
4017: LD_ADDR_EXP 25
4021: PUSH
4022: LD_EXP 25
4026: PUSH
4027: LD_VAR 0 1
4031: ADD
4032: ST_TO_ADDR
4033: GO 4014
4035: POP
4036: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 ] [ Difficulty ] ) ;
4037: LD_INT 175
4039: PUSH
4040: LD_INT 140
4042: PUSH
4043: LD_INT 105
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_OWVAR 67
4055: ARRAY
4056: PPUSH
4057: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 21
4078: PUSH
4079: LD_INT 1
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 25
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: PPUSH
4101: CALL_OW 69
4105: ST_TO_ADDR
// if not mech then
4106: LD_VAR 0 3
4110: NOT
4111: IFFALSE 4115
// exit ;
4113: GO 4163
// ComExitBuilding ( mech ) ;
4115: LD_VAR 0 3
4119: PPUSH
4120: CALL_OW 122
// wait ( 0 0$1 ) ;
4124: LD_INT 35
4126: PPUSH
4127: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4131: LD_VAR 0 3
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: LD_INT 5
4142: PPUSH
4143: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4147: LD_VAR 0 3
4151: PUSH
4152: LD_INT 2
4154: ARRAY
4155: PPUSH
4156: LD_INT 4
4158: PPUSH
4159: CALL_OW 180
// end ;
4163: PPOPN 3
4165: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 5
4171: PPUSH
4172: CALL_OW 292
4176: PUSH
4177: LD_INT 1
4179: PPUSH
4180: LD_INT 4
4182: PPUSH
4183: CALL_OW 292
4187: OR
4188: IFFALSE 4272
4190: GO 4192
4192: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4193: LD_INT 5
4195: PUSH
4196: LD_INT 4
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PPUSH
4203: CALL_OW 85
// if IsOK ( Bobby ) then
4207: LD_EXP 2
4211: PPUSH
4212: CALL_OW 302
4216: IFFALSE 4252
// begin DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4222: LD_EXP 2
4226: PPUSH
4227: LD_STRING DX2-Bobby-1
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4234: LD_EXP 1
4238: PPUSH
4239: LD_STRING DX2-JMM-1a
4241: PPUSH
4242: CALL_OW 88
// DialogueOff ;
4246: CALL_OW 7
// end else
4250: GO 4272
// begin DialogueOn ;
4252: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4256: LD_EXP 1
4260: PPUSH
4261: LD_STRING DX2-JMM-1
4263: PPUSH
4264: CALL_OW 88
// DialogueOff ;
4268: CALL_OW 7
// end ; end ;
4272: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4273: LD_INT 22
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: LD_INT 23
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 21
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 34
4305: PUSH
4306: LD_INT 42
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: IFFALSE 4744
4325: GO 4327
4327: DISABLE
4328: LD_INT 0
4330: PPUSH
4331: PPUSH
4332: PPUSH
4333: PPUSH
4334: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4335: LD_ADDR_VAR 0 1
4339: PUSH
4340: LD_INT 22
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 23
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 21
4362: PUSH
4363: LD_INT 2
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 34
4372: PUSH
4373: LD_INT 42
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PPUSH
4386: CALL_OW 69
4390: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: LD_INT 22
4398: PUSH
4399: LD_INT 1
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 21
4408: PUSH
4409: LD_INT 1
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 26
4418: PUSH
4419: LD_INT 1
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_EXP 1
4440: PUSH
4441: LD_EXP 3
4445: PUSH
4446: LD_EXP 2
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: DIFF
4456: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_INT 22
4464: PUSH
4465: LD_INT 1
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 26
4484: PUSH
4485: LD_INT 2
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PUSH
4502: LD_EXP 4
4506: PUSH
4507: EMPTY
4508: LIST
4509: DIFF
4510: ST_TO_ADDR
// if not tmp then
4511: LD_VAR 0 1
4515: NOT
4516: IFFALSE 4520
// exit ;
4518: GO 4744
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4520: LD_ADDR_VAR 0 2
4524: PUSH
4525: LD_VAR 0 1
4529: PUSH
4530: LD_INT 1
4532: ARRAY
4533: PPUSH
4534: CALL_OW 311
4538: ST_TO_ADDR
// if not speaker then
4539: LD_VAR 0 2
4543: NOT
4544: IFFALSE 4548
// exit ;
4546: GO 4744
// DialogueOn ;
4548: CALL_OW 6
// if speaker = JMM then
4552: LD_VAR 0 2
4556: PUSH
4557: LD_EXP 1
4561: EQUAL
4562: IFFALSE 4596
// begin if Lisa then
4564: LD_EXP 4
4568: IFFALSE 4582
// Say ( Lisa , DX2b-Lisa-1 ) ;
4570: LD_EXP 4
4574: PPUSH
4575: LD_STRING DX2b-Lisa-1
4577: PPUSH
4578: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4582: LD_EXP 1
4586: PPUSH
4587: LD_STRING DX2b-JMM-1
4589: PPUSH
4590: CALL_OW 88
// end else
4594: GO 4740
// begin Say ( JMM , DX2a-JMM-1 ) ;
4596: LD_EXP 1
4600: PPUSH
4601: LD_STRING DX2a-JMM-1
4603: PPUSH
4604: CALL_OW 88
// if speaker = Bobby then
4608: LD_VAR 0 2
4612: PUSH
4613: LD_EXP 2
4617: EQUAL
4618: IFFALSE 4632
// Say ( Bobby , DX2a-Bobby-1 ) ;
4620: LD_EXP 2
4624: PPUSH
4625: LD_STRING DX2a-Bobby-1
4627: PPUSH
4628: CALL_OW 88
// if speaker = Cyrus then
4632: LD_VAR 0 2
4636: PUSH
4637: LD_EXP 3
4641: EQUAL
4642: IFFALSE 4656
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4644: LD_EXP 3
4648: PPUSH
4649: LD_STRING DX2a-Cyrus-1
4651: PPUSH
4652: CALL_OW 88
// if speaker = Lisa then
4656: LD_VAR 0 2
4660: PUSH
4661: LD_EXP 4
4665: EQUAL
4666: IFFALSE 4680
// Say ( Lisa , DX2a-Lisa-1 ) ;
4668: LD_EXP 4
4672: PPUSH
4673: LD_STRING DX2a-Lisa-1
4675: PPUSH
4676: CALL_OW 88
// if speaker in temp1 then
4680: LD_VAR 0 2
4684: PUSH
4685: LD_VAR 0 3
4689: IN
4690: IFFALSE 4704
// Say ( speaker , DX2a-Sol1-1 ) ;
4692: LD_VAR 0 2
4696: PPUSH
4697: LD_STRING DX2a-Sol1-1
4699: PPUSH
4700: CALL_OW 88
// if speaker in temp2 then
4704: LD_VAR 0 2
4708: PUSH
4709: LD_VAR 0 4
4713: IN
4714: IFFALSE 4728
// Say ( speaker , DX2a-FSol1-1 ) ;
4716: LD_VAR 0 2
4720: PPUSH
4721: LD_STRING DX2a-FSol1-1
4723: PPUSH
4724: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4728: LD_EXP 1
4732: PPUSH
4733: LD_STRING DX2a-JMM-2
4735: PPUSH
4736: CALL_OW 88
// end ; DialogueOff ;
4740: CALL_OW 7
// end ;
4744: PPOPN 5
4746: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4747: LD_INT 1
4749: PPUSH
4750: CALL_OW 255
4754: PUSH
4755: LD_INT 1
4757: EQUAL
4758: PUSH
4759: LD_INT 10
4761: PPUSH
4762: CALL_OW 255
4766: PUSH
4767: LD_INT 1
4769: EQUAL
4770: OR
4771: IFFALSE 4831
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4780: LD_EXP 1
4784: PPUSH
4785: LD_STRING D3-JMM-1
4787: PPUSH
4788: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4792: LD_EXP 9
4796: PPUSH
4797: LD_STRING D3-Pow-1
4799: PPUSH
4800: CALL_OW 94
// if IsOK ( Cyrus ) then
4804: LD_EXP 3
4808: PPUSH
4809: CALL_OW 302
4813: IFFALSE 4827
// Say ( Cyrus , D3-Cyrus-1 ) ;
4815: LD_EXP 3
4819: PPUSH
4820: LD_STRING D3-Cyrus-1
4822: PPUSH
4823: CALL_OW 88
// DialogueOff ;
4827: CALL_OW 7
// end ;
4831: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4832: LD_INT 1
4834: PPUSH
4835: CALL_OW 255
4839: PUSH
4840: LD_INT 1
4842: EQUAL
4843: PUSH
4844: LD_INT 10
4846: PPUSH
4847: CALL_OW 255
4851: PUSH
4852: LD_INT 1
4854: EQUAL
4855: AND
4856: IFFALSE 6239
4858: GO 4860
4860: DISABLE
4861: LD_INT 0
4863: PPUSH
4864: PPUSH
4865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4866: LD_ADDR_VAR 0 2
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 21
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PPUSH
4895: CALL_OW 69
4899: ST_TO_ADDR
// if tmp then
4900: LD_VAR 0 2
4904: IFFALSE 4965
// begin for i in tmp do
4906: LD_ADDR_VAR 0 3
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: FOR_IN
4917: IFFALSE 4963
// begin if IsInUnit ( i ) then
4919: LD_VAR 0 3
4923: PPUSH
4924: CALL_OW 310
4928: IFFALSE 4939
// ComExitBuilding ( i ) ;
4930: LD_VAR 0 3
4934: PPUSH
4935: CALL_OW 122
// wait ( 0 0$1 ) ;
4939: LD_INT 35
4941: PPUSH
4942: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4946: LD_VAR 0 3
4950: PPUSH
4951: LD_INT 54
4953: PPUSH
4954: LD_INT 17
4956: PPUSH
4957: CALL_OW 174
// end ;
4961: GO 4916
4963: POP
4964: POP
// end ; wait ( 0 0$03 ) ;
4965: LD_INT 105
4967: PPUSH
4968: CALL_OW 67
// DialogueOn ;
4972: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4976: LD_EXP 1
4980: PPUSH
4981: LD_STRING D3a-JMM-1
4983: PPUSH
4984: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4988: LD_EXP 9
4992: PPUSH
4993: LD_STRING D3a-Pow-1
4995: PPUSH
4996: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5000: LD_EXP 1
5004: PPUSH
5005: LD_STRING D3a-JMM-2
5007: PPUSH
5008: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5012: LD_EXP 9
5016: PPUSH
5017: LD_STRING D3a-Pow-2
5019: PPUSH
5020: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5024: LD_EXP 1
5028: PPUSH
5029: LD_STRING D3a-JMM-3
5031: PPUSH
5032: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5036: LD_EXP 9
5040: PPUSH
5041: LD_STRING D3a-Pow-3
5043: PPUSH
5044: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5048: LD_EXP 1
5052: PPUSH
5053: LD_STRING D3a-JMM-4
5055: PPUSH
5056: CALL_OW 88
// DialogueOff ;
5060: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5064: LD_STRING M2
5066: PPUSH
5067: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5071: LD_EXP 1
5075: PPUSH
5076: LD_STRING D3b-JMM-1
5078: PPUSH
5079: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5083: LD_INT 35
5085: PPUSH
5086: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5090: LD_INT 22
5092: PPUSH
5093: LD_INT 22
5095: PUSH
5096: LD_INT 1
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: LD_INT 25
5105: PUSH
5106: LD_INT 2
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 70
5121: PUSH
5122: LD_INT 22
5124: PUSH
5125: LD_INT 3
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 21
5134: PUSH
5135: LD_INT 1
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 69
5150: NOT
5151: AND
5152: IFFALSE 5083
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5154: LD_ADDR_VAR 0 1
5158: PUSH
5159: LD_INT 22
5161: PUSH
5162: LD_INT 1
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 23
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 25
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 50
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: LD_INT 56
5197: PUSH
5198: EMPTY
5199: LIST
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 69
5212: PUSH
5213: LD_EXP 1
5217: PUSH
5218: LD_EXP 5
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: DIFF
5227: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5228: LD_INT 35
5230: PPUSH
5231: CALL_OW 67
// until temp > 0 ;
5235: LD_VAR 0 1
5239: PUSH
5240: LD_INT 0
5242: GREATER
5243: IFFALSE 5154
// wait ( 0 0$5 ) ;
5245: LD_INT 175
5247: PPUSH
5248: CALL_OW 67
// PrepareRussianHeroes ;
5252: CALL 11590 0 0
// InGameOn ;
5256: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5260: LD_EXP 8
5264: PPUSH
5265: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5269: LD_EXP 1
5273: PUSH
5274: LD_VAR 0 1
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 8
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5296: LD_EXP 8
5300: PPUSH
5301: LD_VAR 0 1
5305: PUSH
5306: LD_INT 1
5308: ARRAY
5309: PPUSH
5310: CALL_OW 119
// Wait ( 0 0$02 ) ;
5314: LD_INT 70
5316: PPUSH
5317: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5321: LD_EXP 8
5325: PPUSH
5326: LD_STRING D4-Mikh-1
5328: PPUSH
5329: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5333: LD_VAR 0 1
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: CALL_OW 258
5346: PUSH
5347: LD_INT 1
5349: EQUAL
5350: IFFALSE 5368
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5352: LD_VAR 0 1
5356: PUSH
5357: LD_INT 1
5359: ARRAY
5360: PPUSH
5361: LD_STRING D4-Sol1-1
5363: PPUSH
5364: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5368: LD_VAR 0 1
5372: PUSH
5373: LD_INT 1
5375: ARRAY
5376: PPUSH
5377: CALL_OW 258
5381: PUSH
5382: LD_INT 2
5384: EQUAL
5385: IFFALSE 5403
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5387: LD_VAR 0 1
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PPUSH
5396: LD_STRING D4-FSol1-1
5398: PPUSH
5399: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5403: LD_EXP 8
5407: PPUSH
5408: LD_STRING D4-Mikh-2
5410: PPUSH
5411: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5415: LD_VAR 0 1
5419: PUSH
5420: LD_INT 1
5422: ARRAY
5423: PPUSH
5424: CALL_OW 258
5428: PUSH
5429: LD_INT 1
5431: EQUAL
5432: IFFALSE 5450
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5434: LD_VAR 0 1
5438: PUSH
5439: LD_INT 1
5441: ARRAY
5442: PPUSH
5443: LD_STRING D4-Sol1-2
5445: PPUSH
5446: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5450: LD_VAR 0 1
5454: PUSH
5455: LD_INT 1
5457: ARRAY
5458: PPUSH
5459: CALL_OW 258
5463: PUSH
5464: LD_INT 2
5466: EQUAL
5467: IFFALSE 5485
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: LD_STRING D4-FSol1-2
5480: PPUSH
5481: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5485: LD_EXP 8
5489: PPUSH
5490: LD_STRING D4-Mikh-3
5492: PPUSH
5493: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5497: LD_VAR 0 1
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: CALL_OW 258
5510: PUSH
5511: LD_INT 1
5513: EQUAL
5514: IFFALSE 5532
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5516: LD_VAR 0 1
5520: PUSH
5521: LD_INT 1
5523: ARRAY
5524: PPUSH
5525: LD_STRING D4-Sol1-3
5527: PPUSH
5528: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5532: LD_VAR 0 1
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: PPUSH
5541: CALL_OW 258
5545: PUSH
5546: LD_INT 2
5548: EQUAL
5549: IFFALSE 5567
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5551: LD_VAR 0 1
5555: PUSH
5556: LD_INT 1
5558: ARRAY
5559: PPUSH
5560: LD_STRING D4-FSol1-3
5562: PPUSH
5563: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5567: LD_EXP 8
5571: PPUSH
5572: LD_STRING D4-Mikh-4
5574: PPUSH
5575: CALL_OW 88
// case query ( Qs1 ) of 1 :
5579: LD_STRING Qs1
5581: PPUSH
5582: CALL_OW 97
5586: PUSH
5587: LD_INT 1
5589: DOUBLE
5590: EQUAL
5591: IFTRUE 5595
5593: GO 5630
5595: POP
// begin InGameOff ;
5596: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5600: LD_INT 1
5602: PPUSH
5603: LD_INT 6
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5616: LD_EXP 8
5620: PPUSH
5621: LD_INT 17
5623: PPUSH
5624: CALL_OW 113
// end ; 2 :
5628: GO 6223
5630: LD_INT 2
5632: DOUBLE
5633: EQUAL
5634: IFTRUE 5638
5636: GO 6188
5638: POP
// begin repeat wait ( 0 0$1 ) ;
5639: LD_INT 35
5641: PPUSH
5642: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5646: LD_VAR 0 1
5650: PUSH
5651: LD_INT 1
5653: ARRAY
5654: PPUSH
5655: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5659: LD_VAR 0 1
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: LD_EXP 1
5672: PPUSH
5673: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5677: LD_EXP 8
5681: PPUSH
5682: LD_EXP 1
5686: PPUSH
5687: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5691: LD_EXP 1
5695: PPUSH
5696: LD_EXP 8
5700: PPUSH
5701: CALL_OW 296
5705: PUSH
5706: LD_INT 5
5708: LESS
5709: IFFALSE 5639
// ComTurnUnit ( Mikhail , JMM ) ;
5711: LD_EXP 8
5715: PPUSH
5716: LD_EXP 1
5720: PPUSH
5721: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5725: LD_EXP 1
5729: PPUSH
5730: LD_STRING D4b-JMM-1
5732: PPUSH
5733: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5737: LD_EXP 8
5741: PPUSH
5742: LD_STRING D4b-Mikh-1
5744: PPUSH
5745: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5749: LD_EXP 1
5753: PPUSH
5754: LD_STRING D4b-JMM-2
5756: PPUSH
5757: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5761: LD_EXP 8
5765: PPUSH
5766: LD_STRING D4b-Mikh-2
5768: PPUSH
5769: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5773: LD_EXP 1
5777: PPUSH
5778: LD_STRING D4b-JMM-3
5780: PPUSH
5781: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5785: LD_EXP 8
5789: PPUSH
5790: LD_STRING D4b-Mikh-3
5792: PPUSH
5793: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5797: LD_EXP 1
5801: PPUSH
5802: LD_STRING D4b-JMM-4
5804: PPUSH
5805: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5809: LD_EXP 8
5813: PPUSH
5814: LD_STRING D4b-Mikh-4
5816: PPUSH
5817: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5821: LD_EXP 1
5825: PPUSH
5826: LD_STRING D4b-JMM-5
5828: PPUSH
5829: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5833: LD_EXP 8
5837: PPUSH
5838: LD_STRING D4b-Mikh-5
5840: PPUSH
5841: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5845: LD_EXP 1
5849: PPUSH
5850: LD_STRING D4b-JMM-6
5852: PPUSH
5853: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5857: LD_EXP 8
5861: PPUSH
5862: LD_STRING D4b-Mikh-6
5864: PPUSH
5865: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5869: LD_EXP 1
5873: PPUSH
5874: LD_STRING D4b-JMM-7
5876: PPUSH
5877: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5881: LD_EXP 8
5885: PPUSH
5886: LD_STRING D4b-Mikh-7
5888: PPUSH
5889: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5893: LD_VAR 0 1
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: PPUSH
5902: CALL_OW 258
5906: PUSH
5907: LD_INT 1
5909: EQUAL
5910: IFFALSE 5928
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5912: LD_VAR 0 1
5916: PUSH
5917: LD_INT 1
5919: ARRAY
5920: PPUSH
5921: LD_STRING D4b-Sol1-7
5923: PPUSH
5924: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5928: LD_VAR 0 1
5932: PUSH
5933: LD_INT 1
5935: ARRAY
5936: PPUSH
5937: CALL_OW 258
5941: PUSH
5942: LD_INT 2
5944: EQUAL
5945: IFFALSE 5963
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5947: LD_VAR 0 1
5951: PUSH
5952: LD_INT 1
5954: ARRAY
5955: PPUSH
5956: LD_STRING D4b-FSol1-7
5958: PPUSH
5959: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5963: LD_EXP 1
5967: PPUSH
5968: LD_STRING D4b-JMM-8
5970: PPUSH
5971: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5975: LD_VAR 0 1
5979: PUSH
5980: LD_INT 1
5982: ARRAY
5983: PPUSH
5984: CALL_OW 258
5988: PUSH
5989: LD_INT 1
5991: EQUAL
5992: IFFALSE 6010
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5994: LD_VAR 0 1
5998: PUSH
5999: LD_INT 1
6001: ARRAY
6002: PPUSH
6003: LD_STRING D4b-Sol1-8
6005: PPUSH
6006: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6010: LD_VAR 0 1
6014: PUSH
6015: LD_INT 1
6017: ARRAY
6018: PPUSH
6019: CALL_OW 258
6023: PUSH
6024: LD_INT 2
6026: EQUAL
6027: IFFALSE 6045
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6029: LD_VAR 0 1
6033: PUSH
6034: LD_INT 1
6036: ARRAY
6037: PPUSH
6038: LD_STRING D4b-FSol1-8
6040: PPUSH
6041: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6045: LD_EXP 1
6049: PPUSH
6050: LD_STRING D4b-JMM-9
6052: PPUSH
6053: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6057: LD_EXP 8
6061: PPUSH
6062: LD_INT 1
6064: PPUSH
6065: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: LD_INT 22
6076: PUSH
6077: LD_INT 1
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: PUSH
6092: FOR_IN
6093: IFFALSE 6106
// ComFree ( i ) ;
6095: LD_VAR 0 3
6099: PPUSH
6100: CALL_OW 139
6104: GO 6092
6106: POP
6107: POP
// repeat wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6115: LD_EXP 8
6119: PPUSH
6120: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6124: LD_EXP 8
6128: PUSH
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PPUSH
6142: LD_INT 1
6144: PPUSH
6145: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6149: LD_EXP 8
6153: PPUSH
6154: CALL_OW 310
6158: IFFALSE 6108
// mikhailDepot = IsInUnit ( Mikhail ) ;
6160: LD_ADDR_EXP 23
6164: PUSH
6165: LD_EXP 8
6169: PPUSH
6170: CALL_OW 310
6174: ST_TO_ADDR
// InGameOff ;
6175: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6179: LD_STRING M3
6181: PPUSH
6182: CALL_OW 337
// end ; 3 :
6186: GO 6223
6188: LD_INT 3
6190: DOUBLE
6191: EQUAL
6192: IFTRUE 6196
6194: GO 6222
6196: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6197: LD_EXP 8
6201: PPUSH
6202: LD_INT 17
6204: PPUSH
6205: CALL_OW 113
// wait ( 0 0$3 ) ;
6209: LD_INT 105
6211: PPUSH
6212: CALL_OW 67
// InGameOff ;
6216: CALL_OW 9
// end ; end ;
6220: GO 6223
6222: POP
// PrepareTigers ;
6223: CALL 14440 0 0
// RussianTrap ;
6227: CALL 9986 0 0
// tigersRespawn = 1 ;
6231: LD_ADDR_EXP 30
6235: PUSH
6236: LD_INT 1
6238: ST_TO_ADDR
// end ;
6239: PPOPN 3
6241: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6242: LD_INT 1
6244: PPUSH
6245: CALL_OW 255
6249: PUSH
6250: LD_INT 1
6252: EQUAL
6253: PUSH
6254: LD_INT 10
6256: PPUSH
6257: CALL_OW 255
6261: PUSH
6262: LD_INT 1
6264: EQUAL
6265: AND
6266: PUSH
6267: LD_INT 1
6269: PPUSH
6270: CALL_OW 274
6274: PPUSH
6275: LD_INT 1
6277: PPUSH
6278: CALL_OW 275
6282: PUSH
6283: LD_INT 100
6285: GREATEREQUAL
6286: AND
6287: IFFALSE 6436
6289: GO 6291
6291: DISABLE
6292: LD_INT 0
6294: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6295: LD_INT 2100
6297: PPUSH
6298: LD_INT 4200
6300: PPUSH
6301: CALL_OW 12
6305: PUSH
6306: LD_INT 1050
6308: PLUS
6309: PPUSH
6310: CALL_OW 67
// PrepareCargoBays ;
6314: CALL 12723 0 0
// cargoRespawn = 1 ;
6318: LD_ADDR_EXP 28
6322: PUSH
6323: LD_INT 1
6325: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6326: LD_ADDR_VAR 0 1
6330: PUSH
6331: LD_EXP 15
6335: PUSH
6336: LD_EXP 16
6340: PUSH
6341: LD_EXP 17
6345: PUSH
6346: LD_EXP 18
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6357: LD_VAR 0 1
6361: PPUSH
6362: LD_INT 17
6364: PPUSH
6365: LD_INT 10
6367: PPUSH
6368: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6372: LD_VAR 0 1
6376: PPUSH
6377: LD_INT 36
6379: PPUSH
6380: LD_INT 13
6382: PPUSH
6383: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6387: LD_VAR 0 1
6391: PPUSH
6392: LD_INT 40
6394: PPUSH
6395: LD_INT 20
6397: PPUSH
6398: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6402: LD_VAR 0 1
6406: PPUSH
6407: LD_INT 53
6409: PPUSH
6410: LD_INT 16
6412: PPUSH
6413: CALL_OW 171
// wait ( 0 0$5 ) ;
6417: LD_INT 175
6419: PPUSH
6420: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6424: LD_EXP 17
6428: PPUSH
6429: LD_STRING D5-Rus2-1
6431: PPUSH
6432: CALL_OW 88
// end ;
6436: PPOPN 1
6438: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6439: LD_EXP 28
6443: PUSH
6444: LD_INT 1
6446: EQUAL
6447: IFFALSE 6602
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6455: LD_ADDR_VAR 0 1
6459: PUSH
6460: LD_INT 22
6462: PUSH
6463: LD_INT 3
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PUSH
6470: LD_INT 21
6472: PUSH
6473: LD_INT 2
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 34
6482: PUSH
6483: LD_INT 51
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6500: LD_INT 105
6502: PPUSH
6503: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6507: LD_VAR 0 1
6511: PPUSH
6512: LD_INT 3
6514: PUSH
6515: LD_INT 60
6517: PUSH
6518: EMPTY
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 72
6529: PUSH
6530: LD_VAR 0 1
6534: PPUSH
6535: LD_INT 3
6537: PUSH
6538: LD_INT 24
6540: PUSH
6541: LD_INT 980
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PPUSH
6552: CALL_OW 72
6556: OR
6557: IFFALSE 6500
// ComMoveXY ( cargos , 7 , 9 ) ;
6559: LD_VAR 0 1
6563: PPUSH
6564: LD_INT 7
6566: PPUSH
6567: LD_INT 9
6569: PPUSH
6570: CALL_OW 111
// cargoSee = 1 ;
6574: LD_ADDR_EXP 29
6578: PUSH
6579: LD_INT 1
6581: ST_TO_ADDR
// cargoEscape = 1 ;
6582: LD_ADDR_EXP 20
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6590: LD_EXP 17
6594: PPUSH
6595: LD_STRING D5-Rus2-1a
6597: PPUSH
6598: CALL_OW 88
// end ;
6602: PPOPN 1
6604: END
// every 0 0$1 trigger cargoEscape > 0 do
6605: LD_EXP 20
6609: PUSH
6610: LD_INT 0
6612: GREATER
6613: IFFALSE 6760
6615: GO 6617
6617: DISABLE
// begin enable ;
6618: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6619: LD_EXP 15
6623: PUSH
6624: LD_EXP 16
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PPUSH
6633: LD_INT 13
6635: PPUSH
6636: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6640: LD_EXP 15
6644: PPUSH
6645: LD_INT 13
6647: PPUSH
6648: CALL_OW 308
6652: PUSH
6653: LD_EXP 17
6657: PPUSH
6658: LD_INT 13
6660: PPUSH
6661: CALL_OW 308
6665: OR
6666: IFFALSE 6700
// begin RemoveUnit ( cargo1 ) ;
6668: LD_EXP 15
6672: PPUSH
6673: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6677: LD_EXP 17
6681: PPUSH
6682: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6686: LD_ADDR_EXP 20
6690: PUSH
6691: LD_EXP 20
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6700: LD_EXP 16
6704: PPUSH
6705: LD_INT 13
6707: PPUSH
6708: CALL_OW 308
6712: PUSH
6713: LD_EXP 18
6717: PPUSH
6718: LD_INT 13
6720: PPUSH
6721: CALL_OW 308
6725: OR
6726: IFFALSE 6760
// begin RemoveUnit ( cargo2 ) ;
6728: LD_EXP 16
6732: PPUSH
6733: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6737: LD_EXP 18
6741: PPUSH
6742: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6746: LD_ADDR_EXP 20
6750: PUSH
6751: LD_EXP 20
6755: PUSH
6756: LD_INT 1
6758: PLUS
6759: ST_TO_ADDR
// end ; end ;
6760: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6761: LD_EXP 20
6765: PUSH
6766: LD_INT 1
6768: GREATER
6769: IFFALSE 6926
6771: GO 6773
6773: DISABLE
6774: LD_INT 0
6776: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6777: LD_INT 4
6779: PPUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 1
6785: PPUSH
6786: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6790: LD_INT 31
6792: PPUSH
6793: LD_INT 1
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 324
// if IsOK ( Jerry ) then
6803: LD_EXP 7
6807: PPUSH
6808: CALL_OW 302
6812: IFFALSE 6828
// Say ( Jerry , D5a-Sol1-1 ) else
6814: LD_EXP 7
6818: PPUSH
6819: LD_STRING D5a-Sol1-1
6821: PPUSH
6822: CALL_OW 88
6826: GO 6914
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6828: LD_ADDR_VAR 0 1
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 26
6845: PUSH
6846: LD_INT 1
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PPUSH
6857: CALL_OW 69
6861: PUSH
6862: LD_EXP 1
6866: PUSH
6867: LD_EXP 2
6871: PUSH
6872: LD_EXP 3
6876: PUSH
6877: LD_EXP 5
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: DIFF
6888: ST_TO_ADDR
// if not speaker then
6889: LD_VAR 0 1
6893: NOT
6894: IFFALSE 6898
// exit ;
6896: GO 6926
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
6898: LD_VAR 0 1
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_STRING D5a-Sol1-1
6909: PPUSH
6910: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6914: LD_EXP 1
6918: PPUSH
6919: LD_STRING D5a-JMM-1
6921: PPUSH
6922: CALL_OW 88
// end ;
6926: PPOPN 1
6928: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 255
6936: PUSH
6937: LD_INT 3
6939: EQUAL
6940: PUSH
6941: LD_INT 1
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: LESS
6952: AND
6953: PUSH
6954: LD_INT 10
6956: PPUSH
6957: CALL_OW 255
6961: PUSH
6962: LD_INT 3
6964: EQUAL
6965: PUSH
6966: LD_INT 10
6968: PPUSH
6969: CALL_OW 256
6973: PUSH
6974: LD_INT 1000
6976: LESS
6977: AND
6978: OR
6979: IFFALSE 6996
6981: GO 6983
6983: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6984: LD_EXP 1
6988: PPUSH
6989: LD_STRING D8-JMM-1
6991: PPUSH
6992: CALL_OW 88
// end ;
6996: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6997: LD_EXP 8
7001: PPUSH
7002: CALL_OW 310
7006: PUSH
7007: LD_INT 1
7009: EQUAL
7010: PUSH
7011: LD_EXP 22
7015: PUSH
7016: LD_INT 3
7018: EQUAL
7019: NOT
7020: AND
7021: IFFALSE 7043
7023: GO 7025
7025: DISABLE
// begin mikhailInBase = 1 ;
7026: LD_ADDR_EXP 22
7030: PUSH
7031: LD_INT 1
7033: ST_TO_ADDR
// mikhailStatus = 1 ;
7034: LD_ADDR_EXP 21
7038: PUSH
7039: LD_INT 1
7041: ST_TO_ADDR
// enable ;
7042: ENABLE
// end ;
7043: END
// export function AskMikhail ; begin
7044: LD_INT 0
7046: PPUSH
// case query ( QMikh2 ) of 1 :
7047: LD_STRING QMikh2
7049: PPUSH
7050: CALL_OW 97
7054: PUSH
7055: LD_INT 1
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7130
7063: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 6
7069: PPUSH
7070: LD_INT 2
7072: PPUSH
7073: LD_INT 1
7075: PPUSH
7076: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7080: LD_EXP 8
7084: PPUSH
7085: LD_INT 6
7087: PPUSH
7088: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7092: LD_EXP 8
7096: PPUSH
7097: CALL_OW 122
// wait ( 0 0$1 ) ;
7101: LD_INT 35
7103: PPUSH
7104: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7108: LD_EXP 8
7112: PPUSH
7113: LD_INT 17
7115: PPUSH
7116: CALL_OW 113
// mikhailInbase = 0 ;
7120: LD_ADDR_EXP 22
7124: PUSH
7125: LD_INT 0
7127: ST_TO_ADDR
// end ; 2 :
7128: GO 7371
7130: LD_INT 2
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7311
7138: POP
// begin mikhailInBase = 2 ;
7139: LD_ADDR_EXP 22
7143: PUSH
7144: LD_INT 2
7146: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7147: LD_EXP 8
7151: PPUSH
7152: LD_INT 6
7154: PPUSH
7155: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7159: LD_EXP 8
7163: PPUSH
7164: CALL_OW 122
// wait ( 0 0$1 ) ;
7168: LD_INT 35
7170: PPUSH
7171: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7175: LD_EXP 8
7179: PPUSH
7180: LD_EXP 8
7184: PPUSH
7185: CALL_OW 250
7189: PUSH
7190: LD_INT 2
7192: PLUS
7193: PPUSH
7194: LD_EXP 8
7198: PPUSH
7199: CALL_OW 251
7203: PUSH
7204: LD_INT 2
7206: PLUS
7207: PPUSH
7208: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7212: LD_EXP 8
7216: PPUSH
7217: LD_EXP 8
7221: PPUSH
7222: CALL_OW 250
7226: PUSH
7227: LD_INT 1
7229: PLUS
7230: PPUSH
7231: LD_EXP 8
7235: PPUSH
7236: CALL_OW 251
7240: PUSH
7241: LD_INT 2
7243: PLUS
7244: PPUSH
7245: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7249: LD_EXP 8
7253: PPUSH
7254: LD_EXP 8
7258: PPUSH
7259: CALL_OW 250
7263: PUSH
7264: LD_INT 2
7266: PLUS
7267: PPUSH
7268: LD_EXP 8
7272: PPUSH
7273: CALL_OW 251
7277: PPUSH
7278: CALL_OW 171
// wait ( 0 0$5 ) ;
7282: LD_INT 175
7284: PPUSH
7285: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7289: LD_EXP 8
7293: PPUSH
7294: LD_INT 25
7296: PPUSH
7297: CALL_OW 113
// mikhailInBase = 4 ;
7301: LD_ADDR_EXP 22
7305: PUSH
7306: LD_INT 4
7308: ST_TO_ADDR
// end ; 3 :
7309: GO 7371
7311: LD_INT 3
7313: DOUBLE
7314: EQUAL
7315: IFTRUE 7319
7317: GO 7370
7319: POP
// begin SetSide ( Mikhail , 6 ) ;
7320: LD_EXP 8
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7332: LD_EXP 8
7336: PPUSH
7337: CALL_OW 122
// wait ( 0 0$1 ) ;
7341: LD_INT 35
7343: PPUSH
7344: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7348: LD_EXP 8
7352: PPUSH
7353: LD_INT 17
7355: PPUSH
7356: CALL_OW 113
// mikhailInbase = 3 ;
7360: LD_ADDR_EXP 22
7364: PUSH
7365: LD_INT 3
7367: ST_TO_ADDR
// end ; end ;
7368: GO 7371
7370: POP
// end ;
7371: LD_VAR 0 1
7375: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7376: LD_EXP 8
7380: PPUSH
7381: LD_INT 25
7383: PPUSH
7384: CALL_OW 308
7388: PUSH
7389: LD_EXP 22
7393: PUSH
7394: LD_INT 4
7396: EQUAL
7397: AND
7398: IFFALSE 7502
7400: GO 7402
7402: DISABLE
// begin enable ;
7403: ENABLE
// mikhailInBase = 1 ;
7404: LD_ADDR_EXP 22
7408: PUSH
7409: LD_INT 1
7411: ST_TO_ADDR
// InGameOn ;
7412: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7416: LD_INT 1
7418: PPUSH
7419: LD_INT 6
7421: PPUSH
7422: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7426: LD_INT 35
7428: PPUSH
7429: CALL_OW 67
// if Carry ( Mikhail ) then
7433: LD_EXP 8
7437: PPUSH
7438: CALL_OW 281
7442: IFFALSE 7453
// ComUnload ( Mikhail ) ;
7444: LD_EXP 8
7448: PPUSH
7449: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7453: LD_EXP 8
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7465: LD_EXP 8
7469: PPUSH
7470: CALL_OW 310
7474: IFFALSE 7426
// SetSide ( dep1 , 1 ) ;
7476: LD_INT 1
7478: PPUSH
7479: LD_INT 1
7481: PPUSH
7482: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7486: LD_EXP 8
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: CALL_OW 235
// InGameOff ;
7498: CALL_OW 9
// end ;
7502: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7503: LD_EXP 8
7507: PPUSH
7508: CALL_OW 310
7512: PUSH
7513: LD_EXP 22
7517: PUSH
7518: LD_INT 3
7520: EQUAL
7521: NOT
7522: AND
7523: IFFALSE 7658
7525: GO 7527
7527: DISABLE
// begin enable ;
7528: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7529: LD_INT 22
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 21
7541: PUSH
7542: LD_INT 1
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 91
7551: PUSH
7552: LD_EXP 8
7556: PPUSH
7557: CALL_OW 310
7561: PUSH
7562: LD_INT 10
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: PUSH
7580: LD_INT 1
7582: EQUAL
7583: IFFALSE 7658
// begin mikhailStatus = 4 ;
7585: LD_ADDR_EXP 21
7589: PUSH
7590: LD_INT 4
7592: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7593: LD_INT 1
7595: PPUSH
7596: LD_INT 6
7598: PPUSH
7599: LD_INT 2
7601: PPUSH
7602: LD_INT 1
7604: PPUSH
7605: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7609: LD_EXP 8
7613: PPUSH
7614: LD_INT 6
7616: PPUSH
7617: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7621: LD_EXP 8
7625: PPUSH
7626: CALL_OW 122
// wait ( 0 0$1 ) ;
7630: LD_INT 35
7632: PPUSH
7633: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7637: LD_EXP 8
7641: PPUSH
7642: LD_INT 17
7644: PPUSH
7645: CALL_OW 113
// mikhailStatus = 3 ;
7649: LD_ADDR_EXP 21
7653: PUSH
7654: LD_INT 3
7656: ST_TO_ADDR
// disable ;
7657: DISABLE
// end ; end ;
7658: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7659: LD_EXP 1
7663: PPUSH
7664: LD_EXP 23
7668: PPUSH
7669: CALL_OW 296
7673: PUSH
7674: LD_INT 5
7676: LESS
7677: PUSH
7678: LD_EXP 21
7682: PUSH
7683: LD_INT 3
7685: EQUAL
7686: AND
7687: PUSH
7688: LD_EXP 22
7692: PUSH
7693: LD_INT 3
7695: EQUAL
7696: NOT
7697: AND
7698: IFFALSE 7920
7700: GO 7702
7702: DISABLE
7703: LD_INT 0
7705: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7706: LD_ADDR_VAR 0 1
7710: PUSH
7711: LD_INT 22
7713: PUSH
7714: LD_INT 1
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 21
7723: PUSH
7724: LD_INT 1
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: LD_INT 26
7733: PUSH
7734: LD_INT 1
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 69
7750: PUSH
7751: LD_EXP 1
7755: PUSH
7756: LD_EXP 5
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: DIFF
7765: ST_TO_ADDR
// DialogueOn ;
7766: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7770: LD_EXP 1
7774: PPUSH
7775: LD_STRING D7-JMM-1
7777: PPUSH
7778: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7782: LD_VAR 0 1
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: PPUSH
7791: LD_STRING D7-Sol1-1
7793: PPUSH
7794: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7798: LD_EXP 1
7802: PPUSH
7803: LD_STRING D7-JMM-2
7805: PPUSH
7806: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7810: LD_VAR 0 1
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PPUSH
7819: LD_STRING D7-Sol1-2
7821: PPUSH
7822: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7826: LD_EXP 1
7830: PPUSH
7831: LD_STRING D7-JMM-3
7833: PPUSH
7834: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7838: LD_VAR 0 1
7842: PUSH
7843: LD_INT 1
7845: ARRAY
7846: PPUSH
7847: LD_STRING D7-Sol1-3
7849: PPUSH
7850: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7854: LD_EXP 3
7858: PPUSH
7859: CALL_OW 302
7863: PUSH
7864: LD_EXP 4
7868: PPUSH
7869: CALL_OW 302
7873: AND
7874: IFFALSE 7916
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7876: LD_EXP 3
7880: PPUSH
7881: LD_STRING D7-Cyrus-3
7883: PPUSH
7884: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7888: LD_VAR 0 1
7892: PUSH
7893: LD_INT 1
7895: ARRAY
7896: PPUSH
7897: LD_STRING D7-Sol1-4
7899: PPUSH
7900: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7904: LD_EXP 4
7908: PPUSH
7909: LD_STRING D7-Lisa-4
7911: PPUSH
7912: CALL_OW 88
// end ; DialogueOff ;
7916: CALL_OW 7
// end ;
7920: PPOPN 1
7922: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7923: LD_EXP 8
7927: PPUSH
7928: CALL_OW 303
7932: PUSH
7933: LD_EXP 21
7937: PUSH
7938: LD_INT 3
7940: EQUAL
7941: AND
7942: IFFALSE 7956
7944: GO 7946
7946: DISABLE
// begin enable ;
7947: ENABLE
// mikhailStatus = 2 ;
7948: LD_ADDR_EXP 21
7952: PUSH
7953: LD_INT 2
7955: ST_TO_ADDR
// end ;
7956: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7957: LD_EXP 8
7961: PPUSH
7962: LD_INT 17
7964: PPUSH
7965: CALL_OW 308
7969: PUSH
7970: LD_EXP 8
7974: PPUSH
7975: CALL_OW 255
7979: PUSH
7980: LD_INT 6
7982: EQUAL
7983: AND
7984: IFFALSE 8017
7986: GO 7988
7988: DISABLE
// begin if not mikhailInBase = 3 then
7989: LD_EXP 22
7993: PUSH
7994: LD_INT 3
7996: EQUAL
7997: NOT
7998: IFFALSE 8008
// mikhailStatus = 3 ;
8000: LD_ADDR_EXP 21
8004: PUSH
8005: LD_INT 3
8007: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8008: LD_EXP 8
8012: PPUSH
8013: CALL_OW 64
// end ;
8017: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8018: LD_EXP 21
8022: PUSH
8023: LD_INT 3
8025: EQUAL
8026: PUSH
8027: LD_EXP 8
8031: PPUSH
8032: CALL_OW 255
8036: PUSH
8037: LD_INT 6
8039: EQUAL
8040: AND
8041: IFFALSE 8207
8043: GO 8045
8045: DISABLE
8046: LD_INT 0
8048: PPUSH
8049: PPUSH
// begin enable ;
8050: ENABLE
// if IsOk ( Mikhail ) then
8051: LD_EXP 8
8055: PPUSH
8056: CALL_OW 302
8060: IFFALSE 8207
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8062: LD_ADDR_VAR 0 2
8066: PUSH
8067: LD_EXP 8
8071: PPUSH
8072: LD_INT 22
8074: PUSH
8075: LD_INT 1
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 21
8084: PUSH
8085: LD_INT 1
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 69
8100: PPUSH
8101: CALL 10178 0 2
8105: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_EXP 8
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 8
8123: LESS
8124: IFFALSE 8207
// begin if GetSex ( attacker ) = sex_male then
8126: LD_VAR 0 2
8130: PPUSH
8131: CALL_OW 258
8135: PUSH
8136: LD_INT 1
8138: EQUAL
8139: IFFALSE 8175
// begin disable ;
8141: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8142: LD_VAR 0 2
8146: PPUSH
8147: LD_STRING D7a-Sol1-1
8149: PPUSH
8150: CALL_OW 88
// wait ( 0 0$2 ) ;
8154: LD_INT 70
8156: PPUSH
8157: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8161: LD_VAR 0 2
8165: PPUSH
8166: LD_STRING D7a-Sol1-1a
8168: PPUSH
8169: CALL_OW 88
// end else
8173: GO 8207
// begin disable ;
8175: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_STRING D7a-FSol1-1
8183: PPUSH
8184: CALL_OW 88
// wait ( 0 0$2 ) ;
8188: LD_INT 70
8190: PPUSH
8191: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_STRING D7a-FSol1-1a
8202: PPUSH
8203: CALL_OW 88
// end ; end ; end ; end ;
8207: PPOPN 2
8209: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8210: LD_EXP 27
8214: PUSH
8215: LD_INT 1
8217: EQUAL
8218: PUSH
8219: LD_INT 22
8221: PPUSH
8222: LD_INT 22
8224: PUSH
8225: LD_INT 3
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 21
8234: PUSH
8235: LD_INT 1
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: CALL_OW 70
8250: PUSH
8251: LD_INT 2
8253: GREATER
8254: AND
8255: PUSH
8256: LD_INT 22
8258: PPUSH
8259: LD_INT 22
8261: PUSH
8262: LD_INT 1
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 2
8271: PUSH
8272: LD_INT 21
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 59
8284: PUSH
8285: EMPTY
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PPUSH
8297: CALL_OW 70
8301: PUSH
8302: LD_INT 0
8304: EQUAL
8305: AND
8306: IFFALSE 8321
8308: GO 8310
8310: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 3
8316: PPUSH
8317: CALL_OW 235
// end ;
8321: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8322: LD_EXP 30
8326: PUSH
8327: LD_INT 1
8329: EQUAL
8330: PUSH
8331: LD_INT 22
8333: PUSH
8334: LD_INT 0
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: LD_INT 25
8343: PUSH
8344: LD_INT 14
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PPUSH
8355: CALL_OW 69
8359: PUSH
8360: LD_INT 0
8362: EQUAL
8363: AND
8364: IFFALSE 8465
8366: GO 8368
8368: DISABLE
8369: LD_INT 0
8371: PPUSH
8372: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8373: LD_ADDR_VAR 0 2
8377: PUSH
8378: LD_INT 22
8380: PUSH
8381: LD_INT 1
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 1
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 23
8400: PUSH
8401: LD_INT 1
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: LIST
8412: PPUSH
8413: CALL_OW 69
8417: ST_TO_ADDR
// for i in tmp do
8418: LD_ADDR_VAR 0 1
8422: PUSH
8423: LD_VAR 0 2
8427: PUSH
8428: FOR_IN
8429: IFFALSE 8456
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8431: LD_VAR 0 1
8435: PPUSH
8436: LD_INT 1
8438: PPUSH
8439: LD_INT 4
8441: PPUSH
8442: CALL_OW 12
8446: PPUSH
8447: LD_INT 300
8449: PPUSH
8450: CALL_OW 492
8454: GO 8428
8456: POP
8457: POP
// SetAchievement ( ACH_TIGER ) ;
8458: LD_STRING ACH_TIGER
8460: PPUSH
8461: CALL_OW 543
// end ;
8465: PPOPN 2
8467: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8468: LD_INT 22
8470: PUSH
8471: LD_INT 1
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 34
8480: PUSH
8481: LD_INT 51
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PPUSH
8492: CALL_OW 69
8496: PUSH
8497: LD_INT 2
8499: GREATEREQUAL
8500: IFFALSE 8512
8502: GO 8504
8504: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8505: LD_STRING ACH_CARGO
8507: PPUSH
8508: CALL_OW 543
8512: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8513: LD_INT 0
8515: PPUSH
8516: PPUSH
8517: PPUSH
8518: PPUSH
// for i = 1 to count do
8519: LD_ADDR_VAR 0 8
8523: PUSH
8524: DOUBLE
8525: LD_INT 1
8527: DEC
8528: ST_TO_ADDR
8529: LD_VAR 0 6
8533: PUSH
8534: FOR_TO
8535: IFFALSE 8616
// begin uc_side = side ;
8537: LD_ADDR_OWVAR 20
8541: PUSH
8542: LD_VAR 0 1
8546: ST_TO_ADDR
// uc_nation = nation ;
8547: LD_ADDR_OWVAR 21
8551: PUSH
8552: LD_VAR 0 2
8556: ST_TO_ADDR
// hc_gallery =  ;
8557: LD_ADDR_OWVAR 33
8561: PUSH
8562: LD_STRING 
8564: ST_TO_ADDR
// hc_name =  ;
8565: LD_ADDR_OWVAR 26
8569: PUSH
8570: LD_STRING 
8572: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8573: LD_INT 0
8575: PPUSH
8576: LD_VAR 0 5
8580: PPUSH
8581: LD_VAR 0 4
8585: PPUSH
8586: CALL_OW 380
// un = CreateHuman ;
8590: LD_ADDR_VAR 0 10
8594: PUSH
8595: CALL_OW 44
8599: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8600: LD_VAR 0 10
8604: PPUSH
8605: LD_VAR 0 3
8609: PPUSH
8610: CALL_OW 52
// end ;
8614: GO 8534
8616: POP
8617: POP
// end ;
8618: LD_VAR 0 7
8622: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8623: LD_INT 0
8625: PPUSH
8626: PPUSH
8627: PPUSH
// uc_side := GetSide ( b ) ;
8628: LD_ADDR_OWVAR 20
8632: PUSH
8633: LD_VAR 0 2
8637: PPUSH
8638: CALL_OW 255
8642: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8643: LD_ADDR_OWVAR 21
8647: PUSH
8648: LD_VAR 0 2
8652: PPUSH
8653: CALL_OW 248
8657: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8658: LD_INT 0
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: LD_VAR 0 1
8668: PPUSH
8669: CALL_OW 380
// un = CreateHuman ;
8673: LD_ADDR_VAR 0 4
8677: PUSH
8678: CALL_OW 44
8682: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8683: LD_ADDR_VAR 0 5
8687: PUSH
8688: LD_VAR 0 2
8692: PPUSH
8693: CALL_OW 254
8697: PUSH
8698: LD_INT 3
8700: MINUS
8701: ST_TO_ADDR
// if dir < 0 then
8702: LD_VAR 0 5
8706: PUSH
8707: LD_INT 0
8709: LESS
8710: IFFALSE 8726
// dir := 6 + dir ;
8712: LD_ADDR_VAR 0 5
8716: PUSH
8717: LD_INT 6
8719: PUSH
8720: LD_VAR 0 5
8724: PLUS
8725: ST_TO_ADDR
// SetDir ( un , dir ) ;
8726: LD_VAR 0 4
8730: PPUSH
8731: LD_VAR 0 5
8735: PPUSH
8736: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8740: LD_VAR 0 4
8744: PPUSH
8745: LD_VAR 0 2
8749: PPUSH
8750: CALL_OW 52
// end ;
8754: LD_VAR 0 3
8758: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8759: LD_INT 0
8761: PPUSH
8762: PPUSH
8763: PPUSH
8764: PPUSH
8765: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8766: LD_ADDR_VAR 0 7
8770: PUSH
8771: LD_INT 22
8773: PUSH
8774: LD_VAR 0 1
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 25
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 24
8795: PUSH
8796: LD_INT 1000
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 69
8812: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8813: LD_ADDR_VAR 0 5
8817: PUSH
8818: LD_VAR 0 3
8822: PPUSH
8823: LD_INT 22
8825: PUSH
8826: LD_VAR 0 1
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 21
8837: PUSH
8838: LD_INT 3
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: LD_INT 3
8847: PUSH
8848: LD_INT 24
8850: PUSH
8851: LD_INT 1000
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: LIST
8866: PUSH
8867: EMPTY
8868: LIST
8869: PPUSH
8870: CALL_OW 70
8874: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8875: LD_VAR 0 5
8879: PUSH
8880: LD_INT 0
8882: GREATER
8883: PUSH
8884: LD_VAR 0 7
8888: PUSH
8889: LD_INT 0
8891: GREATER
8892: AND
8893: IFFALSE 8959
// begin for i in engineerOk_list do
8895: LD_ADDR_VAR 0 6
8899: PUSH
8900: LD_VAR 0 7
8904: PUSH
8905: FOR_IN
8906: IFFALSE 8957
// begin for j in buildings_list do
8908: LD_ADDR_VAR 0 8
8912: PUSH
8913: LD_VAR 0 5
8917: PUSH
8918: FOR_IN
8919: IFFALSE 8953
// begin AddComExitBuilding ( i ) ;
8921: LD_VAR 0 6
8925: PPUSH
8926: CALL_OW 182
// wait ( 0 0$1 ) ;
8930: LD_INT 35
8932: PPUSH
8933: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8937: LD_VAR 0 6
8941: PPUSH
8942: LD_VAR 0 8
8946: PPUSH
8947: CALL_OW 190
// end ;
8951: GO 8918
8953: POP
8954: POP
// end ;
8955: GO 8905
8957: POP
8958: POP
// end ; if buildings_list = 0 then
8959: LD_VAR 0 5
8963: PUSH
8964: LD_INT 0
8966: EQUAL
8967: IFFALSE 9000
// begin for i in engineerOK_list do
8969: LD_ADDR_VAR 0 6
8973: PUSH
8974: LD_VAR 0 7
8978: PUSH
8979: FOR_IN
8980: IFFALSE 8998
// begin ComEnterUnit ( i , building ) ;
8982: LD_VAR 0 6
8986: PPUSH
8987: LD_VAR 0 2
8991: PPUSH
8992: CALL_OW 120
// end ;
8996: GO 8979
8998: POP
8999: POP
// end ; end ;
9000: LD_VAR 0 4
9004: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9005: LD_INT 0
9007: PPUSH
9008: PPUSH
9009: PPUSH
9010: PPUSH
9011: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_INT 22
9019: PUSH
9020: LD_VAR 0 1
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 25
9031: PUSH
9032: LD_INT 4
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 24
9041: PUSH
9042: LD_INT 250
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 69
9058: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9059: LD_ADDR_VAR 0 9
9063: PUSH
9064: LD_VAR 0 3
9068: PPUSH
9069: LD_INT 22
9071: PUSH
9072: LD_VAR 0 1
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 1
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 3
9093: PUSH
9094: LD_INT 24
9096: PUSH
9097: LD_INT 650
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: PPUSH
9113: CALL_OW 70
9117: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9118: LD_VAR 0 9
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: PUSH
9127: LD_VAR 0 6
9131: PUSH
9132: LD_INT 0
9134: GREATER
9135: AND
9136: IFFALSE 9263
// begin for i = 1 to damageUnits do
9138: LD_ADDR_VAR 0 7
9142: PUSH
9143: DOUBLE
9144: LD_INT 1
9146: DEC
9147: ST_TO_ADDR
9148: LD_VAR 0 9
9152: PUSH
9153: FOR_TO
9154: IFFALSE 9178
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9156: LD_VAR 0 9
9160: PUSH
9161: LD_VAR 0 7
9165: ARRAY
9166: PPUSH
9167: LD_VAR 0 2
9171: PPUSH
9172: CALL_OW 113
9176: GO 9153
9178: POP
9179: POP
// for i in sci_list do
9180: LD_ADDR_VAR 0 7
9184: PUSH
9185: LD_VAR 0 6
9189: PUSH
9190: FOR_IN
9191: IFFALSE 9259
// begin ComExitBuilding ( i ) ;
9193: LD_VAR 0 7
9197: PPUSH
9198: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9202: LD_ADDR_VAR 0 8
9206: PUSH
9207: LD_VAR 0 2
9211: PPUSH
9212: LD_INT 22
9214: PUSH
9215: LD_VAR 0 1
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PPUSH
9224: CALL_OW 70
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9255
// begin AddComHeal ( i , j ) ;
9232: LD_VAR 0 7
9236: PPUSH
9237: LD_VAR 0 8
9241: PPUSH
9242: CALL_OW 188
// wait ( 1 1$0 ) ;
9246: LD_INT 2100
9248: PPUSH
9249: CALL_OW 67
// end ;
9253: GO 9229
9255: POP
9256: POP
// end ;
9257: GO 9190
9259: POP
9260: POP
// end else
9261: GO 9277
// begin AddComEnterUnit ( sci_list , build ) ;
9263: LD_VAR 0 6
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: CALL_OW 180
// end ; end ;
9277: LD_VAR 0 5
9281: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9282: LD_INT 0
9284: PPUSH
9285: PPUSH
9286: PPUSH
9287: PPUSH
9288: PPUSH
9289: PPUSH
9290: PPUSH
9291: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9292: LD_ADDR_VAR 0 7
9296: PUSH
9297: LD_VAR 0 3
9301: PPUSH
9302: LD_INT 22
9304: PUSH
9305: LD_VAR 0 1
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 21
9316: PUSH
9317: LD_INT 2
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 24
9326: PUSH
9327: LD_INT 550
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 34
9336: PUSH
9337: LD_INT 46
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PPUSH
9350: CALL_OW 70
9354: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9355: LD_ADDR_VAR 0 8
9359: PUSH
9360: LD_VAR 0 3
9364: PPUSH
9365: LD_INT 22
9367: PUSH
9368: LD_VAR 0 1
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 21
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 34
9389: PUSH
9390: LD_INT 46
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: LD_INT 24
9402: PUSH
9403: LD_INT 550
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 70
9424: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9425: LD_ADDR_VAR 0 9
9429: PUSH
9430: LD_VAR 0 2
9434: PPUSH
9435: LD_INT 22
9437: PUSH
9438: LD_VAR 0 1
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 21
9449: PUSH
9450: LD_INT 2
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PUSH
9457: LD_INT 34
9459: PUSH
9460: LD_INT 46
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 24
9469: PUSH
9470: LD_INT 1000
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 58
9479: PUSH
9480: EMPTY
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: PPUSH
9490: CALL_OW 70
9494: ST_TO_ADDR
// for i in damageVehicle_list do
9495: LD_ADDR_VAR 0 5
9499: PUSH
9500: LD_VAR 0 8
9504: PUSH
9505: FOR_IN
9506: IFFALSE 9525
// mechanicInside_list = UnitsInside ( i ) ;
9508: LD_ADDR_VAR 0 10
9512: PUSH
9513: LD_VAR 0 5
9517: PPUSH
9518: CALL_OW 313
9522: ST_TO_ADDR
9523: GO 9505
9525: POP
9526: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9527: LD_ADDR_VAR 0 11
9531: PUSH
9532: LD_VAR 0 2
9536: PPUSH
9537: LD_INT 22
9539: PUSH
9540: LD_VAR 0 1
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 25
9551: PUSH
9552: LD_INT 3
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 70
9567: ST_TO_ADDR
// if damageVehicle_list > 0 then
9568: LD_VAR 0 8
9572: PUSH
9573: LD_INT 0
9575: GREATER
9576: IFFALSE 9649
// begin for i in damageVehicle_list do
9578: LD_ADDR_VAR 0 5
9582: PUSH
9583: LD_VAR 0 8
9587: PUSH
9588: FOR_IN
9589: IFFALSE 9647
// begin for j in mechanicInside_list do
9591: LD_ADDR_VAR 0 6
9595: PUSH
9596: LD_VAR 0 10
9600: PUSH
9601: FOR_IN
9602: IFFALSE 9643
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9604: LD_VAR 0 8
9608: PPUSH
9609: LD_VAR 0 2
9613: PPUSH
9614: CALL_OW 113
// AddComExitVehicle ( j ) ;
9618: LD_VAR 0 6
9622: PPUSH
9623: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9627: LD_VAR 0 6
9631: PPUSH
9632: LD_VAR 0 5
9636: PPUSH
9637: CALL_OW 189
// end ;
9641: GO 9601
9643: POP
9644: POP
// end ;
9645: GO 9588
9647: POP
9648: POP
// end ; if emptyVehicle_list > 0 then
9649: LD_VAR 0 9
9653: PUSH
9654: LD_INT 0
9656: GREATER
9657: IFFALSE 9707
// begin for i in emptyVehicle_list do
9659: LD_ADDR_VAR 0 5
9663: PUSH
9664: LD_VAR 0 9
9668: PUSH
9669: FOR_IN
9670: IFFALSE 9705
// begin for j in mechanicOutside_list do
9672: LD_ADDR_VAR 0 6
9676: PUSH
9677: LD_VAR 0 11
9681: PUSH
9682: FOR_IN
9683: IFFALSE 9701
// begin AddComEnterUnit ( j , i ) ;
9685: LD_VAR 0 6
9689: PPUSH
9690: LD_VAR 0 5
9694: PPUSH
9695: CALL_OW 180
// end ;
9699: GO 9682
9701: POP
9702: POP
// end ;
9703: GO 9669
9705: POP
9706: POP
// end ; if VehicleOK_list > 0 then
9707: LD_VAR 0 7
9711: PUSH
9712: LD_INT 0
9714: GREATER
9715: IFFALSE 9749
// begin for i in VehicleOK_list do
9717: LD_ADDR_VAR 0 5
9721: PUSH
9722: LD_VAR 0 7
9726: PUSH
9727: FOR_IN
9728: IFFALSE 9747
// ComAgressiveMove ( i , 110 , 29 ) ;
9730: LD_VAR 0 5
9734: PPUSH
9735: LD_INT 110
9737: PPUSH
9738: LD_INT 29
9740: PPUSH
9741: CALL_OW 114
9745: GO 9727
9747: POP
9748: POP
// end ; end ;
9749: LD_VAR 0 4
9753: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9754: LD_INT 0
9756: PPUSH
9757: PPUSH
9758: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9759: LD_VAR 0 1
9763: PPUSH
9764: LD_INT 22
9766: PUSH
9767: LD_VAR 0 2
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: LD_INT 21
9781: PUSH
9782: LD_INT 2
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 21
9791: PUSH
9792: LD_INT 1
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 70
9812: PUSH
9813: LD_VAR 0 5
9817: GREATER
9818: IFFALSE 9950
// begin for i in defendersList do
9820: LD_ADDR_VAR 0 7
9824: PUSH
9825: LD_VAR 0 3
9829: PUSH
9830: FOR_IN
9831: IFFALSE 9946
// begin AddComExitBuilding ( i ) ;
9833: LD_VAR 0 7
9837: PPUSH
9838: CALL_OW 182
// wait ( 0 0$1 ) ;
9842: LD_INT 35
9844: PPUSH
9845: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9849: LD_ADDR_VAR 0 8
9853: PUSH
9854: LD_VAR 0 1
9858: PPUSH
9859: LD_INT 22
9861: PUSH
9862: LD_VAR 0 2
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 2
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 2
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 1
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 70
9907: PUSH
9908: FOR_IN
9909: IFFALSE 9942
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9911: LD_VAR 0 7
9915: PPUSH
9916: LD_VAR 0 8
9920: PPUSH
9921: CALL_OW 250
9925: PPUSH
9926: LD_VAR 0 8
9930: PPUSH
9931: CALL_OW 251
9935: PPUSH
9936: CALL_OW 174
9940: GO 9908
9942: POP
9943: POP
// end ;
9944: GO 9830
9946: POP
9947: POP
// end else
9948: GO 9981
// begin for i in defendersList do
9950: LD_ADDR_VAR 0 7
9954: PUSH
9955: LD_VAR 0 3
9959: PUSH
9960: FOR_IN
9961: IFFALSE 9979
// ComEnterUnit ( i , build ) ;
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 4
9972: PPUSH
9973: CALL_OW 120
9977: GO 9960
9979: POP
9980: POP
// end ; end ;
9981: LD_VAR 0 6
9985: RET
// export function RussianTrap ; var i ; begin
9986: LD_INT 0
9988: PPUSH
9989: PPUSH
// if GetSide ( Brian ) = 4 then
9990: LD_EXP 6
9994: PPUSH
9995: CALL_OW 255
9999: PUSH
10000: LD_INT 4
10002: EQUAL
10003: IFFALSE 10026
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10005: LD_EXP 6
10009: PUSH
10010: LD_EXP 7
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PPUSH
10019: LD_INT 0
10021: PPUSH
10022: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10026: LD_ADDR_VAR 0 2
10030: PUSH
10031: LD_INT 22
10033: PUSH
10034: LD_INT 3
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 21
10043: PUSH
10044: LD_INT 1
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: PUSH
10060: FOR_IN
10061: IFFALSE 10171
// begin ComExitBuilding ( i ) ;
10063: LD_VAR 0 2
10067: PPUSH
10068: CALL_OW 122
// wait ( 0 0$1 ) ;
10072: LD_INT 35
10074: PPUSH
10075: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10079: LD_VAR 0 2
10083: PPUSH
10084: LD_INT 120
10086: PPUSH
10087: LD_INT 56
10089: PPUSH
10090: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10094: LD_VAR 0 2
10098: PPUSH
10099: LD_INT 111
10101: PPUSH
10102: LD_INT 37
10104: PPUSH
10105: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10109: LD_INT 33
10111: PPUSH
10112: CALL_OW 255
10116: PUSH
10117: LD_INT 3
10119: EQUAL
10120: PUSH
10121: LD_INT 33
10123: PPUSH
10124: CALL_OW 302
10128: AND
10129: IFFALSE 10145
// begin AddComEnterUnit ( i , arm2 ) ;
10131: LD_VAR 0 2
10135: PPUSH
10136: LD_INT 33
10138: PPUSH
10139: CALL_OW 180
// end else
10143: GO 10169
// begin AddComCrawl ( i ) ;
10145: LD_VAR 0 2
10149: PPUSH
10150: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10154: LD_VAR 0 2
10158: PPUSH
10159: LD_INT 109
10161: PPUSH
10162: LD_INT 30
10164: PPUSH
10165: CALL_OW 174
// end ; end ;
10169: GO 10060
10171: POP
10172: POP
// end ;
10173: LD_VAR 0 1
10177: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10178: LD_INT 0
10180: PPUSH
10181: PPUSH
10182: PPUSH
10183: PPUSH
10184: PPUSH
// nearest_dist = 1000 ;
10185: LD_ADDR_VAR 0 4
10189: PUSH
10190: LD_INT 1000
10192: ST_TO_ADDR
// nearest_un = un ;
10193: LD_ADDR_VAR 0 5
10197: PUSH
10198: LD_VAR 0 1
10202: ST_TO_ADDR
// for sold in units do
10203: LD_ADDR_VAR 0 6
10207: PUSH
10208: LD_VAR 0 2
10212: PUSH
10213: FOR_IN
10214: IFFALSE 10270
// begin dist = GetDistUnits ( un , sold ) ;
10216: LD_ADDR_VAR 0 7
10220: PUSH
10221: LD_VAR 0 1
10225: PPUSH
10226: LD_VAR 0 6
10230: PPUSH
10231: CALL_OW 296
10235: ST_TO_ADDR
// if dist < nearest_dist then
10236: LD_VAR 0 7
10240: PUSH
10241: LD_VAR 0 4
10245: LESS
10246: IFFALSE 10268
// begin nearest_un = sold ;
10248: LD_ADDR_VAR 0 5
10252: PUSH
10253: LD_VAR 0 6
10257: ST_TO_ADDR
// nearest_dist = dist ;
10258: LD_ADDR_VAR 0 4
10262: PUSH
10263: LD_VAR 0 7
10267: ST_TO_ADDR
// end ; end ;
10268: GO 10213
10270: POP
10271: POP
// result := nearest_un ;
10272: LD_ADDR_VAR 0 3
10276: PUSH
10277: LD_VAR 0 5
10281: ST_TO_ADDR
// end ;
10282: LD_VAR 0 3
10286: RET
// export function PrepareDifficulty ; begin
10287: LD_INT 0
10289: PPUSH
// if Difficulty = 1 then
10290: LD_OWVAR 67
10294: PUSH
10295: LD_INT 1
10297: EQUAL
10298: IFFALSE 10361
// begin RemoveUnit ( brw2 ) ;
10300: LD_INT 9
10302: PPUSH
10303: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10307: LD_INT 30
10309: PPUSH
10310: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10314: LD_INT 52
10316: PPUSH
10317: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10321: LD_INT 63
10323: PPUSH
10324: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10328: LD_INT 5
10330: PUSH
10331: LD_INT 4
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PPUSH
10338: LD_INT 60
10340: PPUSH
10341: CALL_OW 240
// RuSoldMinLevel = 0 ;
10345: LD_ADDR_EXP 13
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10353: LD_ADDR_EXP 14
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// end ; if Difficulty = 2 then
10361: LD_OWVAR 67
10365: PUSH
10366: LD_INT 2
10368: EQUAL
10369: IFFALSE 10411
// begin RemoveUnit ( brw4 ) ;
10371: LD_INT 52
10373: PPUSH
10374: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10378: LD_INT 5
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PPUSH
10388: LD_INT 50
10390: PPUSH
10391: CALL_OW 240
// RuSoldMinLevel = 1 ;
10395: LD_ADDR_EXP 13
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10403: LD_ADDR_EXP 14
10407: PUSH
10408: LD_INT 2
10410: ST_TO_ADDR
// end ; if Difficulty = 3 then
10411: LD_OWVAR 67
10415: PUSH
10416: LD_INT 3
10418: EQUAL
10419: IFFALSE 10454
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10421: LD_INT 5
10423: PUSH
10424: LD_INT 4
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: LD_INT 40
10433: PPUSH
10434: CALL_OW 240
// RuSoldMinLevel = 2 ;
10438: LD_ADDR_EXP 13
10442: PUSH
10443: LD_INT 2
10445: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10446: LD_ADDR_EXP 14
10450: PUSH
10451: LD_INT 3
10453: ST_TO_ADDR
// end ; end ;
10454: LD_VAR 0 1
10458: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10459: LD_INT 0
10461: PPUSH
10462: PPUSH
10463: PPUSH
// tmp = [ ] ;
10464: LD_ADDR_VAR 0 5
10468: PUSH
10469: EMPTY
10470: ST_TO_ADDR
// if not vehicles then
10471: LD_VAR 0 1
10475: NOT
10476: IFFALSE 10480
// exit ;
10478: GO 10597
// for i in vehicles do
10480: LD_ADDR_VAR 0 4
10484: PUSH
10485: LD_VAR 0 1
10489: PUSH
10490: FOR_IN
10491: IFFALSE 10581
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10493: LD_ADDR_VAR 0 5
10497: PUSH
10498: LD_VAR 0 5
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_VAR 0 4
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: CALL_OW 263
10535: PUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: CALL_OW 261
10555: PUSH
10556: LD_VAR 0 4
10560: PPUSH
10561: CALL_OW 256
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 2
10578: ST_TO_ADDR
// end ;
10579: GO 10490
10581: POP
10582: POP
// SaveVariable ( tmp , ident ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 39
// end ; end_of_file
10597: LD_VAR 0 3
10601: RET
// export function PrepareHeroes ; var plive ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
// uc_side = 1 ;
10606: LD_ADDR_OWVAR 20
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10614: LD_ADDR_EXP 1
10618: PUSH
10619: LD_STRING 01_JMM
10621: PPUSH
10622: CALL_OW 34
10626: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10627: LD_ADDR_VAR 0 2
10631: PUSH
10632: LD_STRING 01_JMMLifePoints_1
10634: PPUSH
10635: LD_INT 1000
10637: PPUSH
10638: CALL_OW 30
10642: ST_TO_ADDR
// if plive < 250 then
10643: LD_VAR 0 2
10647: PUSH
10648: LD_INT 250
10650: LESS
10651: IFFALSE 10661
// plive := 300 ;
10653: LD_ADDR_VAR 0 2
10657: PUSH
10658: LD_INT 300
10660: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10661: LD_EXP 1
10665: PPUSH
10666: LD_VAR 0 2
10670: PPUSH
10671: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10675: LD_ADDR_EXP 9
10679: PUSH
10680: LD_STRING Powell
10682: PPUSH
10683: CALL_OW 25
10687: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10688: LD_ADDR_EXP 2
10692: PUSH
10693: LD_STRING 01_Bobby
10695: PPUSH
10696: CALL_OW 34
10700: ST_TO_ADDR
// if Bobby then
10701: LD_EXP 2
10705: IFFALSE 10755
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10707: LD_ADDR_VAR 0 2
10711: PUSH
10712: LD_STRING 01_BobbyLifePoints_1
10714: PPUSH
10715: LD_INT 1000
10717: PPUSH
10718: CALL_OW 30
10722: ST_TO_ADDR
// if plive < 250 then
10723: LD_VAR 0 2
10727: PUSH
10728: LD_INT 250
10730: LESS
10731: IFFALSE 10741
// plive := 300 ;
10733: LD_ADDR_VAR 0 2
10737: PUSH
10738: LD_INT 300
10740: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10741: LD_EXP 2
10745: PPUSH
10746: LD_VAR 0 2
10750: PPUSH
10751: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10755: LD_ADDR_EXP 3
10759: PUSH
10760: LD_STRING 01_Cyrus
10762: PPUSH
10763: CALL_OW 34
10767: ST_TO_ADDR
// if Cyrus then
10768: LD_EXP 3
10772: IFFALSE 10822
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10774: LD_ADDR_VAR 0 2
10778: PUSH
10779: LD_STRING 01_CyrusLifePoints_1
10781: PPUSH
10782: LD_INT 1000
10784: PPUSH
10785: CALL_OW 30
10789: ST_TO_ADDR
// if plive < 250 then
10790: LD_VAR 0 2
10794: PUSH
10795: LD_INT 250
10797: LESS
10798: IFFALSE 10808
// plive := 300 ;
10800: LD_ADDR_VAR 0 2
10804: PUSH
10805: LD_INT 300
10807: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10808: LD_EXP 3
10812: PPUSH
10813: LD_VAR 0 2
10817: PPUSH
10818: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10822: LD_ADDR_EXP 5
10826: PUSH
10827: LD_STRING Khatam
10829: PPUSH
10830: CALL_OW 25
10834: ST_TO_ADDR
// uc_side = 4 ;
10835: LD_ADDR_OWVAR 20
10839: PUSH
10840: LD_INT 4
10842: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10843: LD_ADDR_EXP 4
10847: PUSH
10848: LD_STRING Lisa
10850: PPUSH
10851: CALL_OW 25
10855: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10856: LD_EXP 1
10860: PPUSH
10861: LD_INT 3
10863: PPUSH
10864: LD_INT 0
10866: PPUSH
10867: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10871: LD_EXP 2
10875: PPUSH
10876: LD_INT 3
10878: PPUSH
10879: LD_INT 0
10881: PPUSH
10882: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10886: LD_EXP 3
10890: PPUSH
10891: LD_INT 3
10893: PPUSH
10894: LD_INT 0
10896: PPUSH
10897: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10901: LD_EXP 4
10905: PPUSH
10906: LD_INT 5
10908: PPUSH
10909: LD_INT 0
10911: PPUSH
10912: CALL_OW 49
// ComCrawl ( Lisa ) ;
10916: LD_EXP 4
10920: PPUSH
10921: CALL_OW 137
// end ;
10925: LD_VAR 0 1
10929: RET
// export function PrepareLisSquad ; var i , un ; begin
10930: LD_INT 0
10932: PPUSH
10933: PPUSH
10934: PPUSH
// uc_side = 4 ;
10935: LD_ADDR_OWVAR 20
10939: PUSH
10940: LD_INT 4
10942: ST_TO_ADDR
// uc_nation = 1 ;
10943: LD_ADDR_OWVAR 21
10947: PUSH
10948: LD_INT 1
10950: ST_TO_ADDR
// hc_class := 2 ;
10951: LD_ADDR_OWVAR 28
10955: PUSH
10956: LD_INT 2
10958: ST_TO_ADDR
// hc_sex := sex_male ;
10959: LD_ADDR_OWVAR 27
10963: PUSH
10964: LD_INT 1
10966: ST_TO_ADDR
// hc_gallery :=  ;
10967: LD_ADDR_OWVAR 33
10971: PUSH
10972: LD_STRING 
10974: ST_TO_ADDR
// hc_name :=  ;
10975: LD_ADDR_OWVAR 26
10979: PUSH
10980: LD_STRING 
10982: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10983: LD_ADDR_OWVAR 30
10987: PUSH
10988: LD_INT 0
10990: PUSH
10991: LD_INT 1
10993: PUSH
10994: LD_INT 0
10996: PUSH
10997: LD_INT 0
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11006: LD_ADDR_OWVAR 31
11010: PUSH
11011: LD_INT 1
11013: PUSH
11014: LD_INT 2
11016: PUSH
11017: LD_INT 0
11019: PUSH
11020: LD_INT 0
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: ST_TO_ADDR
// un := CreateHuman ;
11029: LD_ADDR_VAR 0 3
11033: PUSH
11034: CALL_OW 44
11038: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_INT 6
11046: PPUSH
11047: LD_INT 0
11049: PPUSH
11050: CALL_OW 49
// hc_sex := sex_female ;
11054: LD_ADDR_OWVAR 27
11058: PUSH
11059: LD_INT 2
11061: ST_TO_ADDR
// hc_gallery :=  ;
11062: LD_ADDR_OWVAR 33
11066: PUSH
11067: LD_STRING 
11069: ST_TO_ADDR
// hc_name :=  ;
11070: LD_ADDR_OWVAR 26
11074: PUSH
11075: LD_STRING 
11077: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11078: LD_ADDR_OWVAR 30
11082: PUSH
11083: LD_INT 0
11085: PUSH
11086: LD_INT 0
11088: PUSH
11089: LD_INT 0
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11101: LD_ADDR_OWVAR 31
11105: PUSH
11106: LD_INT 0
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: LD_INT 0
11114: PUSH
11115: LD_INT 1
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: ST_TO_ADDR
// un := CreateHuman ;
11124: LD_ADDR_VAR 0 3
11128: PUSH
11129: CALL_OW 44
11133: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11134: LD_VAR 0 3
11138: PPUSH
11139: LD_INT 6
11141: PPUSH
11142: LD_INT 0
11144: PPUSH
11145: CALL_OW 49
// if not Bobby and not Cyrus then
11149: LD_EXP 2
11153: NOT
11154: PUSH
11155: LD_EXP 3
11159: NOT
11160: AND
11161: IFFALSE 11266
// begin hc_class := 1 ;
11163: LD_ADDR_OWVAR 28
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
// hc_sex := sex_male ;
11171: LD_ADDR_OWVAR 27
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// hc_gallery :=  ;
11179: LD_ADDR_OWVAR 33
11183: PUSH
11184: LD_STRING 
11186: ST_TO_ADDR
// hc_name :=  ;
11187: LD_ADDR_OWVAR 26
11191: PUSH
11192: LD_STRING 
11194: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11195: LD_ADDR_OWVAR 30
11199: PUSH
11200: LD_INT 2
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: LD_INT 0
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11218: LD_ADDR_OWVAR 31
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: LD_INT 3
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: LD_INT 0
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: ST_TO_ADDR
// un := CreateHuman ;
11241: LD_ADDR_VAR 0 3
11245: PUSH
11246: CALL_OW 44
11250: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11251: LD_VAR 0 3
11255: PPUSH
11256: LD_INT 31
11258: PPUSH
11259: LD_INT 0
11261: PPUSH
11262: CALL_OW 49
// end ; InitHc ;
11266: CALL_OW 19
// end ;
11270: LD_VAR 0 1
11274: RET
// export function PrepareOtherAmericans ; begin
11275: LD_INT 0
11277: PPUSH
// uc_side = 4 ;
11278: LD_ADDR_OWVAR 20
11282: PUSH
11283: LD_INT 4
11285: ST_TO_ADDR
// uc_nation = 1 ;
11286: LD_ADDR_OWVAR 21
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// hc_gallery =  ;
11294: LD_ADDR_OWVAR 33
11298: PUSH
11299: LD_STRING 
11301: ST_TO_ADDR
// hc_name = Tom Garvin ;
11302: LD_ADDR_OWVAR 26
11306: PUSH
11307: LD_STRING Tom Garvin
11309: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11310: LD_INT 1
11312: PPUSH
11313: LD_INT 1
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: LD_INT 2
11321: PPUSH
11322: CALL_OW 12
11326: PPUSH
11327: CALL_OW 380
// Brian = CreateHuman ;
11331: LD_ADDR_EXP 6
11335: PUSH
11336: CALL_OW 44
11340: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11341: LD_EXP 6
11345: PPUSH
11346: LD_INT 10
11348: PPUSH
11349: LD_INT 0
11351: PPUSH
11352: CALL_OW 49
// hc_name = Jerry White ;
11356: LD_ADDR_OWVAR 26
11360: PUSH
11361: LD_STRING Jerry White
11363: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11364: LD_INT 1
11366: PPUSH
11367: LD_INT 3
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: LD_INT 2
11375: PPUSH
11376: CALL_OW 12
11380: PPUSH
11381: CALL_OW 380
// Jerry = CreateHuman ;
11385: LD_ADDR_EXP 7
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11395: LD_EXP 7
11399: PPUSH
11400: LD_INT 10
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11410: LD_EXP 6
11414: PUSH
11415: LD_EXP 7
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 140
// end ;
11428: LD_VAR 0 1
11432: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11433: LD_INT 0
11435: PPUSH
11436: PPUSH
11437: PPUSH
// for i = 1 to 6 do
11438: LD_ADDR_VAR 0 2
11442: PUSH
11443: DOUBLE
11444: LD_INT 1
11446: DEC
11447: ST_TO_ADDR
11448: LD_INT 6
11450: PUSH
11451: FOR_TO
11452: IFFALSE 11546
// begin uc_side = 4 ;
11454: LD_ADDR_OWVAR 20
11458: PUSH
11459: LD_INT 4
11461: ST_TO_ADDR
// uc_nation = 1 ;
11462: LD_ADDR_OWVAR 21
11466: PUSH
11467: LD_INT 1
11469: ST_TO_ADDR
// hc_gallery =  ;
11470: LD_ADDR_OWVAR 33
11474: PUSH
11475: LD_STRING 
11477: ST_TO_ADDR
// hc_name =  ;
11478: LD_ADDR_OWVAR 26
11482: PUSH
11483: LD_STRING 
11485: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11486: LD_INT 0
11488: PPUSH
11489: LD_INT 1
11491: PPUSH
11492: LD_INT 4
11494: PPUSH
11495: CALL_OW 12
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 380
// un = CreateHuman ;
11507: LD_ADDR_VAR 0 3
11511: PUSH
11512: CALL_OW 44
11516: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11517: LD_VAR 0 3
11521: PPUSH
11522: LD_INT 16
11524: PPUSH
11525: LD_INT 0
11527: PPUSH
11528: CALL_OW 49
// SetLives ( un , 1 ) ;
11532: LD_VAR 0 3
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 234
// end ;
11544: GO 11451
11546: POP
11547: POP
// DyingSold = CreateHuman ;
11548: LD_ADDR_EXP 34
11552: PUSH
11553: CALL_OW 44
11557: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11558: LD_EXP 34
11562: PPUSH
11563: LD_INT 16
11565: PPUSH
11566: LD_INT 0
11568: PPUSH
11569: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11573: LD_EXP 34
11577: PPUSH
11578: LD_INT 250
11580: PPUSH
11581: CALL_OW 234
// end ; end_of_file
11585: LD_VAR 0 1
11589: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: LD_INT 22
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 23
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 25
11621: PUSH
11622: LD_INT 2
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 50
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: LD_INT 56
11637: PUSH
11638: EMPTY
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: PUSH
11653: LD_EXP 1
11657: PUSH
11658: EMPTY
11659: LIST
11660: DIFF
11661: ST_TO_ADDR
// uc_side = 6 ;
11662: LD_ADDR_OWVAR 20
11666: PUSH
11667: LD_INT 6
11669: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11670: LD_ADDR_EXP 8
11674: PUSH
11675: LD_STRING Mikhail
11677: PPUSH
11678: CALL_OW 25
11682: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11683: LD_EXP 8
11687: PPUSH
11688: LD_INT 3
11690: PPUSH
11691: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11695: LD_EXP 8
11699: PPUSH
11700: LD_VAR 0 2
11704: PUSH
11705: LD_INT 1
11707: ARRAY
11708: PPUSH
11709: CALL_OW 250
11713: PPUSH
11714: LD_VAR 0 2
11718: PUSH
11719: LD_INT 1
11721: ARRAY
11722: PPUSH
11723: CALL_OW 251
11727: PPUSH
11728: LD_INT 5
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL_OW 50
// end ;
11738: LD_VAR 0 1
11742: RET
// export function PrepareRussianCommander ; begin
11743: LD_INT 0
11745: PPUSH
// uc_side = 3 ;
11746: LD_ADDR_OWVAR 20
11750: PUSH
11751: LD_INT 3
11753: ST_TO_ADDR
// uc_nation = 3 ;
11754: LD_ADDR_OWVAR 21
11758: PUSH
11759: LD_INT 3
11761: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11762: LD_ADDR_EXP 19
11766: PUSH
11767: LD_STRING Natasza
11769: PPUSH
11770: CALL_OW 25
11774: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11775: LD_EXP 19
11779: PPUSH
11780: LD_INT 24
11782: PPUSH
11783: LD_INT 0
11785: PPUSH
11786: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11790: LD_EXP 19
11794: PPUSH
11795: LD_INT 56
11797: PPUSH
11798: LD_INT 16
11800: PPUSH
11801: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11805: LD_ADDR_EXP 24
11809: PUSH
11810: LD_EXP 24
11814: PUSH
11815: LD_EXP 19
11819: ADD
11820: ST_TO_ADDR
// end ;
11821: LD_VAR 0 1
11825: RET
// export function PrepareSouthBase ; var i , un ; begin
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
// for i = 1 to 2 do
11831: LD_ADDR_VAR 0 2
11835: PUSH
11836: DOUBLE
11837: LD_INT 1
11839: DEC
11840: ST_TO_ADDR
11841: LD_INT 2
11843: PUSH
11844: FOR_TO
11845: IFFALSE 11954
// begin uc_side = 3 ;
11847: LD_ADDR_OWVAR 20
11851: PUSH
11852: LD_INT 3
11854: ST_TO_ADDR
// uc_nation = 3 ;
11855: LD_ADDR_OWVAR 21
11859: PUSH
11860: LD_INT 3
11862: ST_TO_ADDR
// hc_gallery =  ;
11863: LD_ADDR_OWVAR 33
11867: PUSH
11868: LD_STRING 
11870: ST_TO_ADDR
// hc_name =  ;
11871: LD_ADDR_OWVAR 26
11875: PUSH
11876: LD_STRING 
11878: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11879: LD_INT 1
11881: PPUSH
11882: LD_INT 1
11884: PPUSH
11885: LD_EXP 13
11889: PPUSH
11890: LD_EXP 14
11894: PPUSH
11895: CALL_OW 12
11899: PPUSH
11900: CALL_OW 380
// hc_importance = 0 ;
11904: LD_ADDR_OWVAR 32
11908: PUSH
11909: LD_INT 0
11911: ST_TO_ADDR
// un = CreateHuman ;
11912: LD_ADDR_VAR 0 3
11916: PUSH
11917: CALL_OW 44
11921: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_INT 11
11929: PPUSH
11930: LD_INT 0
11932: PPUSH
11933: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11937: LD_VAR 0 3
11941: PPUSH
11942: LD_INT 111
11944: PPUSH
11945: LD_INT 38
11947: PPUSH
11948: CALL_OW 118
// end ;
11952: GO 11844
11954: POP
11955: POP
// for i = 1 to Difficulty do
11956: LD_ADDR_VAR 0 2
11960: PUSH
11961: DOUBLE
11962: LD_INT 1
11964: DEC
11965: ST_TO_ADDR
11966: LD_OWVAR 67
11970: PUSH
11971: FOR_TO
11972: IFFALSE 12055
// begin uc_side = 3 ;
11974: LD_ADDR_OWVAR 20
11978: PUSH
11979: LD_INT 3
11981: ST_TO_ADDR
// uc_nation = 3 ;
11982: LD_ADDR_OWVAR 21
11986: PUSH
11987: LD_INT 3
11989: ST_TO_ADDR
// hc_gallery =  ;
11990: LD_ADDR_OWVAR 33
11994: PUSH
11995: LD_STRING 
11997: ST_TO_ADDR
// hc_name =  ;
11998: LD_ADDR_OWVAR 26
12002: PUSH
12003: LD_STRING 
12005: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12006: LD_INT 0
12008: PPUSH
12009: LD_INT 3
12011: PPUSH
12012: LD_EXP 13
12016: PPUSH
12017: LD_EXP 14
12021: PPUSH
12022: CALL_OW 12
12026: PPUSH
12027: CALL_OW 380
// un = CreateHuman ;
12031: LD_ADDR_VAR 0 3
12035: PUSH
12036: CALL_OW 44
12040: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12041: LD_VAR 0 3
12045: PPUSH
12046: LD_INT 10
12048: PPUSH
12049: CALL_OW 52
// end ;
12053: GO 11971
12055: POP
12056: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12057: LD_INT 3
12059: PPUSH
12060: LD_INT 3
12062: PPUSH
12063: LD_INT 33
12065: PPUSH
12066: LD_EXP 13
12070: PPUSH
12071: LD_EXP 14
12075: PPUSH
12076: CALL_OW 12
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: LD_INT 1
12086: PUSH
12087: LD_INT 1
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: CALL_OW 12
12097: PUSH
12098: LD_INT 1
12100: PPUSH
12101: LD_INT 2
12103: PPUSH
12104: CALL_OW 12
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: PUSH
12114: LD_OWVAR 67
12118: ARRAY
12119: PPUSH
12120: CALL 8513 0 6
// for i in UnitsInside ( arm2 ) do
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: LD_INT 33
12131: PPUSH
12132: CALL_OW 313
12136: PUSH
12137: FOR_IN
12138: IFFALSE 12158
// southBaseDefenders = southBaseDefenders ^ i ;
12140: LD_ADDR_EXP 25
12144: PUSH
12145: LD_EXP 25
12149: PUSH
12150: LD_VAR 0 2
12154: ADD
12155: ST_TO_ADDR
12156: GO 12137
12158: POP
12159: POP
// end ;
12160: LD_VAR 0 1
12164: RET
// export function PrepareNorthBase ; var i , un ; begin
12165: LD_INT 0
12167: PPUSH
12168: PPUSH
12169: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12170: LD_ADDR_VAR 0 2
12174: PUSH
12175: DOUBLE
12176: LD_INT 1
12178: DEC
12179: ST_TO_ADDR
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 2
12185: PPUSH
12186: CALL_OW 12
12190: PUSH
12191: LD_INT 2
12193: PPUSH
12194: LD_INT 3
12196: PPUSH
12197: CALL_OW 12
12201: PUSH
12202: LD_INT 3
12204: PPUSH
12205: LD_INT 4
12207: PPUSH
12208: CALL_OW 12
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: LIST
12217: PUSH
12218: LD_OWVAR 67
12222: ARRAY
12223: PUSH
12224: FOR_TO
12225: IFFALSE 12311
// begin uc_side = 3 ;
12227: LD_ADDR_OWVAR 20
12231: PUSH
12232: LD_INT 3
12234: ST_TO_ADDR
// uc_nation = 3 ;
12235: LD_ADDR_OWVAR 21
12239: PUSH
12240: LD_INT 3
12242: ST_TO_ADDR
// hc_gallery =  ;
12243: LD_ADDR_OWVAR 33
12247: PUSH
12248: LD_STRING 
12250: ST_TO_ADDR
// hc_name =  ;
12251: LD_ADDR_OWVAR 26
12255: PUSH
12256: LD_STRING 
12258: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12259: LD_INT 0
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: LD_EXP 13
12269: PPUSH
12270: LD_EXP 14
12274: PPUSH
12275: CALL_OW 12
12279: PPUSH
12280: CALL_OW 380
// un = CreateHuman ;
12284: LD_ADDR_VAR 0 3
12288: PUSH
12289: CALL_OW 44
12293: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 14
12301: PPUSH
12302: LD_INT 0
12304: PPUSH
12305: CALL_OW 49
// end ;
12309: GO 12224
12311: POP
12312: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12313: LD_INT 3
12315: PPUSH
12316: LD_INT 3
12318: PPUSH
12319: LD_INT 2
12321: PPUSH
12322: LD_EXP 13
12326: PPUSH
12327: LD_EXP 14
12331: PPUSH
12332: CALL_OW 12
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: LD_INT 2
12345: PPUSH
12346: CALL_OW 12
12350: PUSH
12351: LD_INT 1
12353: PPUSH
12354: LD_INT 3
12356: PPUSH
12357: CALL_OW 12
12361: PUSH
12362: LD_INT 1
12364: PPUSH
12365: LD_INT 3
12367: PPUSH
12368: CALL_OW 12
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: PUSH
12378: LD_OWVAR 67
12382: ARRAY
12383: PPUSH
12384: CALL 8513 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12388: LD_INT 3
12390: PPUSH
12391: LD_INT 3
12393: PPUSH
12394: LD_INT 23
12396: PPUSH
12397: LD_EXP 13
12401: PPUSH
12402: LD_EXP 14
12406: PPUSH
12407: CALL_OW 12
12411: PPUSH
12412: LD_INT 4
12414: PPUSH
12415: LD_INT 0
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: PUSH
12429: LD_OWVAR 67
12433: ARRAY
12434: PPUSH
12435: CALL 8513 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12439: LD_INT 3
12441: PPUSH
12442: LD_INT 3
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: LD_EXP 13
12452: PPUSH
12453: LD_EXP 14
12457: PPUSH
12458: CALL_OW 12
12462: PPUSH
12463: LD_INT 2
12465: PPUSH
12466: LD_INT 1
12468: PUSH
12469: LD_INT 2
12471: PUSH
12472: LD_INT 2
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_OWVAR 67
12484: ARRAY
12485: PPUSH
12486: CALL 8513 0 6
// for i in UnitsInside ( arm1 ) do
12490: LD_ADDR_VAR 0 2
12494: PUSH
12495: LD_INT 2
12497: PPUSH
12498: CALL_OW 313
12502: PUSH
12503: FOR_IN
12504: IFFALSE 12524
// northBaseDefenders = northBaseDefenders ^ i ;
12506: LD_ADDR_EXP 24
12510: PUSH
12511: LD_EXP 24
12515: PUSH
12516: LD_VAR 0 2
12520: ADD
12521: ST_TO_ADDR
12522: GO 12503
12524: POP
12525: POP
// end ;
12526: LD_VAR 0 1
12530: RET
// export function PrepareOtherRussians ; var i , un ; begin
12531: LD_INT 0
12533: PPUSH
12534: PPUSH
12535: PPUSH
// for i = 1 to 2 do
12536: LD_ADDR_VAR 0 2
12540: PUSH
12541: DOUBLE
12542: LD_INT 1
12544: DEC
12545: ST_TO_ADDR
12546: LD_INT 2
12548: PUSH
12549: FOR_TO
12550: IFFALSE 12651
// begin uc_side = 3 ;
12552: LD_ADDR_OWVAR 20
12556: PUSH
12557: LD_INT 3
12559: ST_TO_ADDR
// uc_nation = 3 ;
12560: LD_ADDR_OWVAR 21
12564: PUSH
12565: LD_INT 3
12567: ST_TO_ADDR
// hc_gallery =  ;
12568: LD_ADDR_OWVAR 33
12572: PUSH
12573: LD_STRING 
12575: ST_TO_ADDR
// hc_name =  ;
12576: LD_ADDR_OWVAR 26
12580: PUSH
12581: LD_STRING 
12583: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12584: LD_INT 0
12586: PPUSH
12587: LD_INT 1
12589: PPUSH
12590: LD_EXP 13
12594: PPUSH
12595: LD_EXP 14
12599: PPUSH
12600: CALL_OW 12
12604: PPUSH
12605: CALL_OW 380
// un = CreateHuman ;
12609: LD_ADDR_VAR 0 3
12613: PUSH
12614: CALL_OW 44
12618: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_INT 9
12626: PPUSH
12627: LD_INT 0
12629: PPUSH
12630: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12634: LD_VAR 0 3
12638: PPUSH
12639: LD_INT 80
12641: PPUSH
12642: LD_INT 73
12644: PPUSH
12645: CALL_OW 118
// end ;
12649: GO 12549
12651: POP
12652: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_INT 3
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 31
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: CALL_OW 69
12686: PUSH
12687: FOR_IN
12688: IFFALSE 12716
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12690: LD_EXP 13
12694: PPUSH
12695: LD_EXP 14
12699: PPUSH
12700: CALL_OW 12
12704: PPUSH
12705: LD_VAR 0 2
12709: PPUSH
12710: CALL 8623 0 2
12714: GO 12687
12716: POP
12717: POP
// end ;
12718: LD_VAR 0 1
12722: RET
// export function PrepareCargoBays ; begin
12723: LD_INT 0
12725: PPUSH
// uc_side = 3 ;
12726: LD_ADDR_OWVAR 20
12730: PUSH
12731: LD_INT 3
12733: ST_TO_ADDR
// uc_nation = 3 ;
12734: LD_ADDR_OWVAR 21
12738: PUSH
12739: LD_INT 3
12741: ST_TO_ADDR
// vc_engine = 1 ;
12742: LD_ADDR_OWVAR 39
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// vc_control = 1 ;
12750: LD_ADDR_OWVAR 38
12754: PUSH
12755: LD_INT 1
12757: ST_TO_ADDR
// vc_weapon = 51 ;
12758: LD_ADDR_OWVAR 40
12762: PUSH
12763: LD_INT 51
12765: ST_TO_ADDR
// vc_chassis = 22 ;
12766: LD_ADDR_OWVAR 37
12770: PUSH
12771: LD_INT 22
12773: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12774: LD_ADDR_EXP 15
12778: PUSH
12779: CALL_OW 45
12783: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12784: LD_ADDR_EXP 16
12788: PUSH
12789: CALL_OW 45
12793: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12794: LD_EXP 15
12798: PPUSH
12799: LD_INT 13
12801: PPUSH
12802: LD_INT 0
12804: PPUSH
12805: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12809: LD_EXP 16
12813: PPUSH
12814: LD_INT 13
12816: PPUSH
12817: LD_INT 0
12819: PPUSH
12820: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12824: LD_EXP 15
12828: PPUSH
12829: LD_INT 2
12831: PPUSH
12832: LD_INT 70
12834: PUSH
12835: LD_INT 50
12837: PUSH
12838: LD_INT 30
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: PUSH
12846: LD_OWVAR 67
12850: ARRAY
12851: PPUSH
12852: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12856: LD_EXP 16
12860: PPUSH
12861: LD_INT 2
12863: PPUSH
12864: LD_INT 70
12866: PUSH
12867: LD_INT 50
12869: PUSH
12870: LD_INT 30
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: PUSH
12878: LD_OWVAR 67
12882: ARRAY
12883: PPUSH
12884: CALL_OW 291
// hc_gallery =  ;
12888: LD_ADDR_OWVAR 33
12892: PUSH
12893: LD_STRING 
12895: ST_TO_ADDR
// hc_name =  ;
12896: LD_ADDR_OWVAR 26
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12904: LD_INT 1
12906: PPUSH
12907: LD_INT 3
12909: PPUSH
12910: LD_INT 1
12912: PPUSH
12913: LD_INT 2
12915: PPUSH
12916: CALL_OW 12
12920: PPUSH
12921: CALL_OW 380
// driver1 = CreateHuman ;
12925: LD_ADDR_EXP 17
12929: PUSH
12930: CALL_OW 44
12934: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12935: LD_EXP 17
12939: PPUSH
12940: LD_EXP 15
12944: PPUSH
12945: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12949: LD_ADDR_OWVAR 26
12953: PUSH
12954: LD_STRING Nikolai Andreyev
12956: ST_TO_ADDR
// driver2 = CreateHuman ;
12957: LD_ADDR_EXP 18
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12967: LD_EXP 18
12971: PPUSH
12972: LD_EXP 16
12976: PPUSH
12977: CALL_OW 52
// end ;
12981: LD_VAR 0 1
12985: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12986: LD_INT 0
12988: PPUSH
12989: PPUSH
12990: PPUSH
12991: PPUSH
12992: PPUSH
12993: PPUSH
12994: PPUSH
// uc_side = 3 ;
12995: LD_ADDR_OWVAR 20
12999: PUSH
13000: LD_INT 3
13002: ST_TO_ADDR
// uc_nation = 3 ;
13003: LD_ADDR_OWVAR 21
13007: PUSH
13008: LD_INT 3
13010: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13011: LD_ADDR_VAR 0 4
13015: PUSH
13016: DOUBLE
13017: LD_INT 1
13019: DEC
13020: ST_TO_ADDR
13021: LD_VAR 0 1
13025: PUSH
13026: LD_INT 1
13028: PPUSH
13029: LD_INT 3
13031: PPUSH
13032: CALL_OW 12
13036: PLUS
13037: PUSH
13038: FOR_TO
13039: IFFALSE 13216
// begin vc_engine = 1 ;
13041: LD_ADDR_OWVAR 39
13045: PUSH
13046: LD_INT 1
13048: ST_TO_ADDR
// vc_control = 1 ;
13049: LD_ADDR_OWVAR 38
13053: PUSH
13054: LD_INT 1
13056: ST_TO_ADDR
// vc_weapon = 42 ;
13057: LD_ADDR_OWVAR 40
13061: PUSH
13062: LD_INT 42
13064: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13065: LD_ADDR_OWVAR 37
13069: PUSH
13070: LD_INT 21
13072: PUSH
13073: LD_INT 22
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: LD_OWVAR 67
13088: ARRAY
13089: ST_TO_ADDR
// veh = CreateVehicle ;
13090: LD_ADDR_VAR 0 5
13094: PUSH
13095: CALL_OW 45
13099: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13100: LD_VAR 0 5
13104: PPUSH
13105: LD_VAR 0 2
13109: PPUSH
13110: LD_INT 0
13112: PPUSH
13113: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13117: LD_ADDR_EXP 26
13121: PUSH
13122: LD_EXP 26
13126: PUSH
13127: LD_VAR 0 5
13131: ADD
13132: ST_TO_ADDR
// hc_gallery =  ;
13133: LD_ADDR_OWVAR 33
13137: PUSH
13138: LD_STRING 
13140: ST_TO_ADDR
// hc_name =  ;
13141: LD_ADDR_OWVAR 26
13145: PUSH
13146: LD_STRING 
13148: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13149: LD_INT 0
13151: PPUSH
13152: LD_INT 3
13154: PPUSH
13155: LD_EXP 13
13159: PPUSH
13160: LD_EXP 14
13164: PPUSH
13165: CALL_OW 12
13169: PPUSH
13170: CALL_OW 380
// un = CreateHuman ;
13174: LD_ADDR_VAR 0 6
13178: PUSH
13179: CALL_OW 44
13183: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13184: LD_VAR 0 6
13188: PPUSH
13189: LD_VAR 0 5
13193: PPUSH
13194: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13198: LD_ADDR_EXP 26
13202: PUSH
13203: LD_EXP 26
13207: PUSH
13208: LD_VAR 0 6
13212: ADD
13213: ST_TO_ADDR
// end ;
13214: GO 13038
13216: POP
13217: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13218: LD_INT 0
13220: PPUSH
13221: LD_INT 2
13223: PPUSH
13224: LD_EXP 13
13228: PPUSH
13229: LD_EXP 14
13233: PPUSH
13234: CALL_OW 12
13238: PPUSH
13239: CALL_OW 380
// un = CreateHuman ;
13243: LD_ADDR_VAR 0 6
13247: PUSH
13248: CALL_OW 44
13252: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13253: LD_ADDR_VAR 0 4
13257: PUSH
13258: DOUBLE
13259: LD_INT 1
13261: DEC
13262: ST_TO_ADDR
13263: LD_VAR 0 1
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: LD_INT 2
13273: MUL
13274: PLUS
13275: PUSH
13276: FOR_TO
13277: IFFALSE 13365
// begin hc_gallery =  ;
13279: LD_ADDR_OWVAR 33
13283: PUSH
13284: LD_STRING 
13286: ST_TO_ADDR
// hc_name =  ;
13287: LD_ADDR_OWVAR 26
13291: PUSH
13292: LD_STRING 
13294: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13295: LD_INT 1
13297: PPUSH
13298: LD_INT 1
13300: PPUSH
13301: LD_EXP 13
13305: PPUSH
13306: LD_EXP 14
13310: PPUSH
13311: CALL_OW 12
13315: PPUSH
13316: CALL_OW 380
// un = CreateHuman ;
13320: LD_ADDR_VAR 0 6
13324: PUSH
13325: CALL_OW 44
13329: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13330: LD_VAR 0 6
13334: PPUSH
13335: LD_VAR 0 2
13339: PPUSH
13340: LD_INT 0
13342: PPUSH
13343: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13347: LD_ADDR_EXP 26
13351: PUSH
13352: LD_EXP 26
13356: PUSH
13357: LD_VAR 0 6
13361: ADD
13362: ST_TO_ADDR
// end ;
13363: GO 13276
13365: POP
13366: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13367: LD_ADDR_VAR 0 7
13371: PUSH
13372: LD_INT 26
13374: PPUSH
13375: LD_INT 22
13377: PUSH
13378: LD_INT 3
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 26
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13415: LD_VAR 0 7
13419: PUSH
13420: LD_INT 1
13422: ARRAY
13423: PPUSH
13424: LD_STRING D9-Rus3-1
13426: PPUSH
13427: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13431: LD_VAR 0 7
13435: PUSH
13436: LD_INT 2
13438: ARRAY
13439: PPUSH
13440: LD_STRING D9-Russ-1
13442: PPUSH
13443: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13447: LD_INT 35
13449: PPUSH
13450: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13454: LD_ADDR_VAR 0 4
13458: PUSH
13459: LD_INT 26
13461: PPUSH
13462: LD_INT 22
13464: PUSH
13465: LD_INT 3
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: PPUSH
13475: CALL_OW 70
13479: PUSH
13480: FOR_IN
13481: IFFALSE 13653
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13483: LD_ADDR_VAR 0 8
13487: PUSH
13488: LD_INT 22
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: PPUSH
13503: LD_VAR 0 4
13507: PPUSH
13508: CALL_OW 74
13512: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13513: LD_ADDR_VAR 0 9
13517: PUSH
13518: LD_INT 22
13520: PUSH
13521: LD_INT 1
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: LD_INT 59
13533: PUSH
13534: EMPTY
13535: LIST
13536: PUSH
13537: LD_INT 21
13539: PUSH
13540: LD_INT 1
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 2
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: EMPTY
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: PPUSH
13575: LD_VAR 0 4
13579: PPUSH
13580: CALL_OW 74
13584: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13585: LD_VAR 0 4
13589: PPUSH
13590: LD_VAR 0 8
13594: PPUSH
13595: CALL_OW 296
13599: PUSH
13600: LD_INT 8
13602: PLUS
13603: PUSH
13604: LD_VAR 0 4
13608: PPUSH
13609: LD_VAR 0 9
13613: PPUSH
13614: CALL_OW 296
13618: LESS
13619: IFFALSE 13637
// begin ComAttackUnit ( i , target1 ) ;
13621: LD_VAR 0 4
13625: PPUSH
13626: LD_VAR 0 8
13630: PPUSH
13631: CALL_OW 115
// end else
13635: GO 13651
// begin ComAttackUnit ( i , target2 ) ;
13637: LD_VAR 0 4
13641: PPUSH
13642: LD_VAR 0 9
13646: PPUSH
13647: CALL_OW 115
// end ; end ;
13651: GO 13480
13653: POP
13654: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13655: LD_INT 26
13657: PPUSH
13658: LD_INT 22
13660: PUSH
13661: LD_INT 3
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 2
13670: PUSH
13671: LD_INT 21
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 21
13683: PUSH
13684: LD_INT 2
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 59
13693: PUSH
13694: EMPTY
13695: LIST
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PPUSH
13707: CALL_OW 70
13711: PUSH
13712: LD_INT 0
13714: EQUAL
13715: IFFALSE 13447
// end ; end_of_file
13717: LD_VAR 0 3
13721: RET
// every 0 0$1 do
13722: GO 13724
13724: DISABLE
// begin enable ;
13725: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13726: LD_INT 3
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: LD_INT 22
13734: PPUSH
13735: CALL 8759 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
13739: LD_INT 3
13741: PPUSH
13742: LD_INT 20
13744: PPUSH
13745: LD_INT 22
13747: PPUSH
13748: LD_INT 23
13750: PPUSH
13751: CALL 9005 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13755: LD_INT 3
13757: PPUSH
13758: LD_INT 21
13760: PPUSH
13761: LD_INT 23
13763: PPUSH
13764: CALL 9282 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13768: LD_INT 22
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: LD_EXP 24
13778: PPUSH
13779: LD_INT 2
13781: PPUSH
13782: LD_INT 3
13784: PPUSH
13785: CALL 9754 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13789: LD_INT 23
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: LD_EXP 25
13799: PPUSH
13800: LD_INT 33
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL 9754 0 5
// end ; end_of_file
13810: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13811: LD_VAR 0 1
13815: PPUSH
13816: CALL_OW 266
13820: PUSH
13821: LD_INT 0
13823: EQUAL
13824: IFFALSE 13833
// YouLost ( DepotDestroyed ) ;
13826: LD_STRING DepotDestroyed
13828: PPUSH
13829: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 255
13842: PUSH
13843: LD_INT 1
13845: EQUAL
13846: PUSH
13847: LD_VAR 0 1
13851: PPUSH
13852: CALL_OW 247
13856: PUSH
13857: LD_INT 1
13859: EQUAL
13860: AND
13861: IFFALSE 13877
// deadsCounter = deadsCounter + 1 ;
13863: LD_ADDR_EXP 31
13867: PUSH
13868: LD_EXP 31
13872: PUSH
13873: LD_INT 1
13875: PLUS
13876: ST_TO_ADDR
// end ;
13877: PPOPN 1
13879: END
// on Command ( comandid ) do var i , j , tmp ;
13880: LD_INT 0
13882: PPUSH
13883: PPUSH
13884: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13885: LD_ADDR_VAR 0 2
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_INT 1
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 21
13902: PUSH
13903: LD_INT 2
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PPUSH
13914: CALL_OW 69
13918: PUSH
13919: FOR_IN
13920: IFFALSE 14045
// begin if GetTaskList ( i ) > 0 then
13922: LD_VAR 0 2
13926: PPUSH
13927: CALL_OW 437
13931: PUSH
13932: LD_INT 0
13934: GREATER
13935: IFFALSE 14043
// begin for j = 1 to GetTaskList ( i ) do
13937: LD_ADDR_VAR 0 3
13941: PUSH
13942: DOUBLE
13943: LD_INT 1
13945: DEC
13946: ST_TO_ADDR
13947: LD_VAR 0 2
13951: PPUSH
13952: CALL_OW 437
13956: PUSH
13957: FOR_TO
13958: IFFALSE 14041
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13960: LD_ADDR_VAR 0 4
13964: PUSH
13965: LD_VAR 0 2
13969: PPUSH
13970: CALL_OW 437
13974: PUSH
13975: LD_VAR 0 3
13979: ARRAY
13980: PUSH
13981: LD_INT 4
13983: ARRAY
13984: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13985: LD_VAR 0 4
13989: PPUSH
13990: CALL_OW 255
13994: PUSH
13995: LD_INT 3
13997: EQUAL
13998: PUSH
13999: LD_VAR 0 4
14003: PPUSH
14004: CALL_OW 247
14008: PUSH
14009: LD_INT 2
14011: EQUAL
14012: AND
14013: PUSH
14014: LD_VAR 0 4
14018: PPUSH
14019: CALL_OW 264
14023: PUSH
14024: LD_INT 51
14026: EQUAL
14027: AND
14028: IFFALSE 14039
// ComStop ( i ) ;
14030: LD_VAR 0 2
14034: PPUSH
14035: CALL_OW 141
// end ;
14039: GO 13957
14041: POP
14042: POP
// end ; end ;
14043: GO 13919
14045: POP
14046: POP
// end ;
14047: PPOPN 4
14049: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14050: LD_VAR 0 2
14054: PUSH
14055: LD_EXP 8
14059: EQUAL
14060: PUSH
14061: LD_EXP 21
14065: PUSH
14066: LD_INT 4
14068: NONEQUAL
14069: AND
14070: IFFALSE 14222
// begin if IsOk ( Mikhail ) then
14072: LD_EXP 8
14076: PPUSH
14077: CALL_OW 302
14081: IFFALSE 14089
// AskMikhail else
14083: CALL 7044 0 0
14087: GO 14222
// if IsOk ( llab1 ) then
14089: LD_INT 23
14091: PPUSH
14092: CALL_OW 302
14096: IFFALSE 14185
// begin InGameOn ;
14098: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14102: LD_EXP 8
14106: PPUSH
14107: LD_INT 6
14109: PPUSH
14110: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14114: LD_INT 23
14116: PPUSH
14117: LD_INT 6
14119: PPUSH
14120: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14124: LD_EXP 8
14128: PPUSH
14129: LD_INT 23
14131: PPUSH
14132: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14136: LD_INT 35
14138: PPUSH
14139: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14143: LD_EXP 8
14147: PPUSH
14148: CALL_OW 310
14152: PUSH
14153: LD_INT 23
14155: EQUAL
14156: PUSH
14157: LD_EXP 8
14161: PPUSH
14162: CALL_OW 301
14166: OR
14167: IFFALSE 14136
// SetSide ( llab1 , 1 ) ;
14169: LD_INT 23
14171: PPUSH
14172: LD_INT 1
14174: PPUSH
14175: CALL_OW 235
// InGameOff ;
14179: CALL_OW 9
// end else
14183: GO 14222
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14185: LD_INT 3
14187: PPUSH
14188: LD_INT 6
14190: PPUSH
14191: LD_INT 2
14193: PPUSH
14194: LD_INT 1
14196: PPUSH
14197: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14201: LD_EXP 8
14205: PPUSH
14206: LD_INT 6
14208: PPUSH
14209: CALL_OW 235
// ComHold ( Mikhail ) ;
14213: LD_EXP 8
14217: PPUSH
14218: CALL_OW 140
// end ; end ; end ;
14222: PPOPN 2
14224: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14225: LD_EXP 8
14229: PPUSH
14230: CALL_OW 257
14234: PUSH
14235: LD_INT 3
14237: NONEQUAL
14238: IFFALSE 14256
14240: GO 14242
14242: DISABLE
// begin enable ;
14243: ENABLE
// SetClass ( Mikhail , 3 ) ;
14244: LD_EXP 8
14248: PPUSH
14249: LD_INT 3
14251: PPUSH
14252: CALL_OW 336
// end ; end_of_file
14256: END
// every 0 0$1 trigger IsDead ( JMM ) do
14257: LD_EXP 1
14261: PPUSH
14262: CALL_OW 301
14266: IFFALSE 14278
14268: GO 14270
14270: DISABLE
// YouLost ( JMM ) ;
14271: LD_STRING JMM
14273: PPUSH
14274: CALL_OW 104
14278: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14279: LD_INT 22
14281: PUSH
14282: LD_INT 1
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 21
14291: PUSH
14292: LD_INT 1
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 25
14301: PUSH
14302: LD_INT 2
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 69
14318: PUSH
14319: LD_INT 0
14321: EQUAL
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 4
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 25
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: PPUSH
14358: CALL_OW 69
14362: PUSH
14363: LD_INT 0
14365: EQUAL
14366: AND
14367: PUSH
14368: LD_INT 1
14370: PPUSH
14371: CALL_OW 255
14375: PUSH
14376: LD_INT 3
14378: EQUAL
14379: AND
14380: PUSH
14381: LD_INT 10
14383: PPUSH
14384: CALL_OW 255
14388: PUSH
14389: LD_INT 3
14391: EQUAL
14392: AND
14393: IFFALSE 14405
14395: GO 14397
14397: DISABLE
// YouLost ( Engineer ) ;
14398: LD_STRING Engineer
14400: PPUSH
14401: CALL_OW 104
14405: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 255
14413: PUSH
14414: LD_INT 3
14416: EQUAL
14417: PUSH
14418: LD_EXP 27
14422: PUSH
14423: LD_INT 1
14425: EQUAL
14426: AND
14427: IFFALSE 14439
14429: GO 14431
14431: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14432: LD_STRING DepotCaptured
14434: PPUSH
14435: CALL_OW 104
14439: END
// export function PrepareTigers ; var i , un ; begin
14440: LD_INT 0
14442: PPUSH
14443: PPUSH
14444: PPUSH
// for i = 1 to Difficulty do
14445: LD_ADDR_VAR 0 2
14449: PUSH
14450: DOUBLE
14451: LD_INT 1
14453: DEC
14454: ST_TO_ADDR
14455: LD_OWVAR 67
14459: PUSH
14460: FOR_TO
14461: IFFALSE 14596
// begin hc_sex = sex_male ;
14463: LD_ADDR_OWVAR 27
14467: PUSH
14468: LD_INT 1
14470: ST_TO_ADDR
// uc_side = 0 ;
14471: LD_ADDR_OWVAR 20
14475: PUSH
14476: LD_INT 0
14478: ST_TO_ADDR
// uc_nation = nation_nature ;
14479: LD_ADDR_OWVAR 21
14483: PUSH
14484: LD_INT 0
14486: ST_TO_ADDR
// hc_class = class_tiger ;
14487: LD_ADDR_OWVAR 28
14491: PUSH
14492: LD_INT 14
14494: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14495: LD_ADDR_OWVAR 31
14499: PUSH
14500: LD_EXP 14
14504: PUSH
14505: LD_INT 0
14507: PUSH
14508: LD_INT 0
14510: PUSH
14511: LD_INT 0
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14520: LD_ADDR_OWVAR 35
14524: PUSH
14525: LD_INT 30
14527: PPUSH
14528: LD_INT 40
14530: PPUSH
14531: CALL_OW 12
14535: PUSH
14536: LD_INT 40
14538: PPUSH
14539: LD_INT 50
14541: PPUSH
14542: CALL_OW 12
14546: PUSH
14547: LD_INT 50
14549: PPUSH
14550: LD_INT 60
14552: PPUSH
14553: CALL_OW 12
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_OWVAR 67
14567: ARRAY
14568: ST_TO_ADDR
// un = CreateHuman ;
14569: LD_ADDR_VAR 0 3
14573: PUSH
14574: CALL_OW 44
14578: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14579: LD_VAR 0 3
14583: PPUSH
14584: LD_INT 27
14586: PPUSH
14587: LD_INT 0
14589: PPUSH
14590: CALL_OW 49
// end ;
14594: GO 14460
14596: POP
14597: POP
// end ; end_of_file
14598: LD_VAR 0 1
14602: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14603: LD_INT 1
14605: PPUSH
14606: CALL_OW 255
14610: PUSH
14611: LD_INT 1
14613: EQUAL
14614: PUSH
14615: LD_INT 10
14617: PPUSH
14618: CALL_OW 255
14622: PUSH
14623: LD_INT 1
14625: EQUAL
14626: AND
14627: PUSH
14628: LD_EXP 20
14632: PUSH
14633: LD_INT 1
14635: EQUAL
14636: AND
14637: PUSH
14638: LD_INT 22
14640: PUSH
14641: LD_INT 3
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 21
14650: PUSH
14651: LD_INT 2
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 34
14660: PUSH
14661: LD_INT 51
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 3
14670: PUSH
14671: LD_INT 58
14673: PUSH
14674: EMPTY
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: PUSH
14692: LD_INT 0
14694: EQUAL
14695: AND
14696: IFFALSE 14787
14698: GO 14700
14700: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14701: LD_INT 9450
14703: PUSH
14704: LD_INT 8400
14706: PUSH
14707: LD_INT 6300
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: PUSH
14715: LD_OWVAR 67
14719: ARRAY
14720: PPUSH
14721: CALL_OW 67
// if cargoEscape = 1 then
14725: LD_EXP 20
14729: PUSH
14730: LD_INT 1
14732: EQUAL
14733: IFFALSE 14787
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14735: LD_EXP 9
14739: PPUSH
14740: LD_STRING D6-Pow-1
14742: PPUSH
14743: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14747: LD_EXP 1
14751: PPUSH
14752: LD_STRING D6-JMM-1
14754: PPUSH
14755: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14759: LD_EXP 9
14763: PPUSH
14764: LD_STRING D6-Pow-2
14766: PPUSH
14767: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14771: LD_EXP 1
14775: PPUSH
14776: LD_STRING D6-JMM-2
14778: PPUSH
14779: CALL_OW 88
// FinishMission ;
14783: CALL 14995 0 0
// end ; end ;
14787: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14788: LD_INT 1
14790: PPUSH
14791: CALL_OW 255
14795: PUSH
14796: LD_INT 1
14798: EQUAL
14799: PUSH
14800: LD_INT 10
14802: PPUSH
14803: CALL_OW 255
14807: PUSH
14808: LD_INT 1
14810: EQUAL
14811: AND
14812: PUSH
14813: LD_EXP 20
14817: PUSH
14818: LD_INT 1
14820: GREATER
14821: AND
14822: IFFALSE 14889
14824: GO 14826
14826: DISABLE
14827: LD_INT 0
14829: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14830: LD_INT 11550
14832: PUSH
14833: LD_INT 10500
14835: PUSH
14836: LD_INT 9450
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: PUSH
14844: LD_OWVAR 67
14848: ARRAY
14849: PPUSH
14850: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14854: LD_INT 1
14856: PUSH
14857: LD_INT 2
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: LIST
14867: PUSH
14868: LD_OWVAR 67
14872: ARRAY
14873: PPUSH
14874: LD_INT 13
14876: PPUSH
14877: CALL 12986 0 2
// lastBattle = 1 ;
14881: LD_ADDR_EXP 27
14885: PUSH
14886: LD_INT 1
14888: ST_TO_ADDR
// end ;
14889: PPOPN 1
14891: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14892: LD_EXP 27
14896: PUSH
14897: LD_INT 1
14899: EQUAL
14900: PUSH
14901: LD_INT 26
14903: PPUSH
14904: LD_INT 22
14906: PUSH
14907: LD_INT 3
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 21
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PPUSH
14928: CALL_OW 70
14932: PUSH
14933: LD_INT 0
14935: EQUAL
14936: AND
14937: IFFALSE 14994
14939: GO 14941
14941: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14942: LD_EXP 9
14946: PPUSH
14947: LD_STRING D6-Pow-1
14949: PPUSH
14950: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14954: LD_EXP 1
14958: PPUSH
14959: LD_STRING D6-JMM-1
14961: PPUSH
14962: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14966: LD_EXP 9
14970: PPUSH
14971: LD_STRING D6-Pow-2
14973: PPUSH
14974: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14978: LD_EXP 1
14982: PPUSH
14983: LD_STRING D6-JMM-2
14985: PPUSH
14986: CALL_OW 88
// FinishMission ;
14990: CALL 14995 0 0
// end ;
14994: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
14995: LD_INT 0
14997: PPUSH
14998: PPUSH
14999: PPUSH
15000: PPUSH
15001: PPUSH
// if tick <= 18 18$00 then
15002: LD_OWVAR 1
15006: PUSH
15007: LD_INT 37800
15009: LESSEQUAL
15010: IFFALSE 15019
// SetAchievement ( ACH_ASPEED_2 ) ;
15012: LD_STRING ACH_ASPEED_2
15014: PPUSH
15015: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15019: LD_ADDR_VAR 0 2
15023: PUSH
15024: LD_INT 22
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 21
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 24
15046: PUSH
15047: LD_INT 251
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL_OW 69
15063: ST_TO_ADDR
// if tmp then
15064: LD_VAR 0 2
15068: IFFALSE 15082
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15070: LD_VAR 0 2
15074: PPUSH
15075: LD_STRING 02_tanks_1
15077: PPUSH
15078: CALL 10459 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15082: LD_EXP 21
15086: PUSH
15087: LD_INT 1
15089: EQUAL
15090: PUSH
15091: LD_EXP 8
15095: PPUSH
15096: CALL_OW 300
15100: AND
15101: IFFALSE 15115
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15103: LD_EXP 21
15107: PPUSH
15108: LD_STRING 02_mikhailStatus_1
15110: PPUSH
15111: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 274
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 275
15130: PPUSH
15131: LD_STRING 02_resources_4
15133: PPUSH
15134: CALL_OW 39
// m1 := false ;
15138: LD_ADDR_VAR 0 3
15142: PUSH
15143: LD_INT 0
15145: ST_TO_ADDR
// m2 := false ;
15146: LD_ADDR_VAR 0 4
15150: PUSH
15151: LD_INT 0
15153: ST_TO_ADDR
// m3 := false ;
15154: LD_ADDR_VAR 0 5
15158: PUSH
15159: LD_INT 0
15161: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15162: LD_INT 1
15164: PPUSH
15165: CALL_OW 274
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 275
15177: PUSH
15178: LD_INT 200
15180: GREATEREQUAL
15181: IFFALSE 15203
// begin AddMedal ( Cans , 1 ) ;
15183: LD_STRING Cans
15185: PPUSH
15186: LD_INT 1
15188: PPUSH
15189: CALL_OW 101
// m1 := true ;
15193: LD_ADDR_VAR 0 3
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// end else
15201: GO 15214
// begin AddMedal ( Cans , - 1 ) ;
15203: LD_STRING Cans
15205: PPUSH
15206: LD_INT 1
15208: NEG
15209: PPUSH
15210: CALL_OW 101
// end ; if deadsCounter < 2 then
15214: LD_EXP 31
15218: PUSH
15219: LD_INT 2
15221: LESS
15222: IFFALSE 15244
// begin AddMedal ( Deaths , 1 ) ;
15224: LD_STRING Deaths
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 101
// m2 := true ;
15234: LD_ADDR_VAR 0 4
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// end else
15242: GO 15255
// begin AddMedal ( Deaths , - 1 ) ;
15244: LD_STRING Deaths
15246: PPUSH
15247: LD_INT 1
15249: NEG
15250: PPUSH
15251: CALL_OW 101
// end ; if mikhailStatus = 0 then
15255: LD_EXP 21
15259: PUSH
15260: LD_INT 0
15262: EQUAL
15263: IFFALSE 15276
// AddMedal ( Prisoner , - 1 ) ;
15265: LD_STRING Prisoner
15267: PPUSH
15268: LD_INT 1
15270: NEG
15271: PPUSH
15272: CALL_OW 101
// if mikhailStatus = 1 then
15276: LD_EXP 21
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: IFFALSE 15304
// begin AddMedal ( Prisoner , 1 ) ;
15286: LD_STRING Prisoner
15288: PPUSH
15289: LD_INT 1
15291: PPUSH
15292: CALL_OW 101
// m3 := true ;
15296: LD_ADDR_VAR 0 5
15300: PUSH
15301: LD_INT 1
15303: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15304: LD_EXP 21
15308: PUSH
15309: LD_INT 2
15311: EQUAL
15312: IFFALSE 15332
// begin AddMedal ( Prisoner , 2 ) ;
15314: LD_STRING Prisoner
15316: PPUSH
15317: LD_INT 2
15319: PPUSH
15320: CALL_OW 101
// m3 := true ;
15324: LD_ADDR_VAR 0 5
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15332: LD_EXP 21
15336: PUSH
15337: LD_INT 3
15339: EQUAL
15340: IFFALSE 15353
// AddMedal ( Prisoner , - 2 ) ;
15342: LD_STRING Prisoner
15344: PPUSH
15345: LD_INT 2
15347: NEG
15348: PPUSH
15349: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
15353: LD_OWVAR 67
15357: PUSH
15358: LD_INT 3
15360: EQUAL
15361: PUSH
15362: LD_VAR 0 3
15366: AND
15367: PUSH
15368: LD_VAR 0 4
15372: AND
15373: PUSH
15374: LD_VAR 0 5
15378: AND
15379: IFFALSE 15391
// SetAchievementEX ( ACH_AMER , 2 ) ;
15381: LD_STRING ACH_AMER
15383: PPUSH
15384: LD_INT 2
15386: PPUSH
15387: CALL_OW 564
// GiveMedals ( MAIN ) ;
15391: LD_STRING MAIN
15393: PPUSH
15394: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15398: LD_INT 22
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 23
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: PPUSH
15433: CALL_OW 69
15437: PPUSH
15438: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15442: LD_EXP 1
15446: PPUSH
15447: LD_EXP 33
15451: PUSH
15452: LD_STRING JMM
15454: STR
15455: PPUSH
15456: CALL_OW 38
// if IsOK ( Bobby ) then
15460: LD_EXP 2
15464: PPUSH
15465: CALL_OW 302
15469: IFFALSE 15489
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15471: LD_EXP 2
15475: PPUSH
15476: LD_EXP 33
15480: PUSH
15481: LD_STRING Bobby
15483: STR
15484: PPUSH
15485: CALL_OW 38
// if IsOK ( Cyrus ) then
15489: LD_EXP 3
15493: PPUSH
15494: CALL_OW 302
15498: IFFALSE 15518
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15500: LD_EXP 3
15504: PPUSH
15505: LD_EXP 33
15509: PUSH
15510: LD_STRING Cyrus
15512: STR
15513: PPUSH
15514: CALL_OW 38
// if IsOK ( Lisa ) then
15518: LD_EXP 4
15522: PPUSH
15523: CALL_OW 302
15527: IFFALSE 15547
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15529: LD_EXP 4
15533: PPUSH
15534: LD_EXP 33
15538: PUSH
15539: LD_STRING Lisa
15541: STR
15542: PPUSH
15543: CALL_OW 38
// if IsOK ( Khatam ) then
15547: LD_EXP 5
15551: PPUSH
15552: CALL_OW 302
15556: IFFALSE 15576
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15558: LD_EXP 5
15562: PPUSH
15563: LD_EXP 33
15567: PUSH
15568: LD_STRING Khatam
15570: STR
15571: PPUSH
15572: CALL_OW 38
// if IsOK ( Brian ) then
15576: LD_EXP 6
15580: PPUSH
15581: CALL_OW 302
15585: IFFALSE 15605
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15587: LD_EXP 6
15591: PPUSH
15592: LD_EXP 33
15596: PUSH
15597: LD_STRING Brian
15599: STR
15600: PPUSH
15601: CALL_OW 38
// if IsOk ( Jerry ) then
15605: LD_EXP 7
15609: PPUSH
15610: CALL_OW 302
15614: IFFALSE 15634
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15616: LD_EXP 7
15620: PPUSH
15621: LD_EXP 33
15625: PUSH
15626: LD_STRING Jerry
15628: STR
15629: PPUSH
15630: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15634: LD_EXP 21
15638: PUSH
15639: LD_INT 1
15641: EQUAL
15642: PUSH
15643: LD_EXP 8
15647: PPUSH
15648: CALL_OW 255
15652: PUSH
15653: LD_INT 1
15655: EQUAL
15656: AND
15657: PUSH
15658: LD_EXP 8
15662: PPUSH
15663: CALL_OW 302
15667: AND
15668: IFFALSE 15688
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15670: LD_EXP 8
15674: PPUSH
15675: LD_EXP 33
15679: PUSH
15680: LD_STRING Mikhail
15682: STR
15683: PPUSH
15684: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15688: LD_INT 50
15690: PUSH
15691: EMPTY
15692: LIST
15693: PUSH
15694: LD_INT 22
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: PPUSH
15719: CALL_OW 69
15723: PUSH
15724: LD_EXP 1
15728: PUSH
15729: LD_EXP 2
15733: PUSH
15734: LD_EXP 3
15738: PUSH
15739: LD_EXP 4
15743: PUSH
15744: LD_EXP 5
15748: PUSH
15749: LD_EXP 6
15753: PUSH
15754: LD_EXP 7
15758: PUSH
15759: LD_EXP 8
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: DIFF
15774: PPUSH
15775: LD_STRING 02_other_survivors
15777: PPUSH
15778: CALL_OW 38
// YouWin ;
15782: CALL_OW 103
// end ; end_of_file
15786: LD_VAR 0 1
15790: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
15791: LD_INT 0
15793: PPUSH
// ar_miner := 81 ;
15794: LD_ADDR_EXP 42
15798: PUSH
15799: LD_INT 81
15801: ST_TO_ADDR
// ar_crane := 88 ;
15802: LD_ADDR_EXP 41
15806: PUSH
15807: LD_INT 88
15809: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15810: LD_ADDR_EXP 36
15814: PUSH
15815: LD_INT 89
15817: ST_TO_ADDR
// us_hack := 99 ;
15818: LD_ADDR_EXP 37
15822: PUSH
15823: LD_INT 99
15825: ST_TO_ADDR
// us_artillery := 97 ;
15826: LD_ADDR_EXP 38
15830: PUSH
15831: LD_INT 97
15833: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15834: LD_ADDR_EXP 39
15838: PUSH
15839: LD_INT 91
15841: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15842: LD_ADDR_EXP 40
15846: PUSH
15847: LD_INT 92
15849: ST_TO_ADDR
// ru_radar := 98 ;
15850: LD_ADDR_EXP 35
15854: PUSH
15855: LD_INT 98
15857: ST_TO_ADDR
// tech_Artillery := 80 ;
15858: LD_ADDR_EXP 43
15862: PUSH
15863: LD_INT 80
15865: ST_TO_ADDR
// tech_RadMat := 81 ;
15866: LD_ADDR_EXP 44
15870: PUSH
15871: LD_INT 81
15873: ST_TO_ADDR
// tech_BasicTools := 82 ;
15874: LD_ADDR_EXP 45
15878: PUSH
15879: LD_INT 82
15881: ST_TO_ADDR
// tech_Cargo := 83 ;
15882: LD_ADDR_EXP 46
15886: PUSH
15887: LD_INT 83
15889: ST_TO_ADDR
// tech_Track := 84 ;
15890: LD_ADDR_EXP 47
15894: PUSH
15895: LD_INT 84
15897: ST_TO_ADDR
// tech_Crane := 85 ;
15898: LD_ADDR_EXP 48
15902: PUSH
15903: LD_INT 85
15905: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15906: LD_ADDR_EXP 49
15910: PUSH
15911: LD_INT 86
15913: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15914: LD_ADDR_EXP 50
15918: PUSH
15919: LD_INT 87
15921: ST_TO_ADDR
// end ;
15922: LD_VAR 0 1
15926: RET
// every 1 do
15927: GO 15929
15929: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15930: CALL 15791 0 0
15934: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15935: LD_VAR 0 2
15939: PUSH
15940: LD_INT 100
15942: EQUAL
15943: IFFALSE 16892
// begin if not StreamModeActive then
15945: LD_EXP 51
15949: NOT
15950: IFFALSE 15960
// StreamModeActive := true ;
15952: LD_ADDR_EXP 51
15956: PUSH
15957: LD_INT 1
15959: ST_TO_ADDR
// if p3 = 0 then
15960: LD_VAR 0 3
15964: PUSH
15965: LD_INT 0
15967: EQUAL
15968: IFFALSE 15974
// InitStreamMode ;
15970: CALL 17050 0 0
// if p3 = 1 then
15974: LD_VAR 0 3
15978: PUSH
15979: LD_INT 1
15981: EQUAL
15982: IFFALSE 15992
// sRocket := true ;
15984: LD_ADDR_EXP 56
15988: PUSH
15989: LD_INT 1
15991: ST_TO_ADDR
// if p3 = 2 then
15992: LD_VAR 0 3
15996: PUSH
15997: LD_INT 2
15999: EQUAL
16000: IFFALSE 16010
// sSpeed := true ;
16002: LD_ADDR_EXP 55
16006: PUSH
16007: LD_INT 1
16009: ST_TO_ADDR
// if p3 = 3 then
16010: LD_VAR 0 3
16014: PUSH
16015: LD_INT 3
16017: EQUAL
16018: IFFALSE 16028
// sEngine := true ;
16020: LD_ADDR_EXP 57
16024: PUSH
16025: LD_INT 1
16027: ST_TO_ADDR
// if p3 = 4 then
16028: LD_VAR 0 3
16032: PUSH
16033: LD_INT 4
16035: EQUAL
16036: IFFALSE 16046
// sSpec := true ;
16038: LD_ADDR_EXP 54
16042: PUSH
16043: LD_INT 1
16045: ST_TO_ADDR
// if p3 = 5 then
16046: LD_VAR 0 3
16050: PUSH
16051: LD_INT 5
16053: EQUAL
16054: IFFALSE 16064
// sLevel := true ;
16056: LD_ADDR_EXP 58
16060: PUSH
16061: LD_INT 1
16063: ST_TO_ADDR
// if p3 = 6 then
16064: LD_VAR 0 3
16068: PUSH
16069: LD_INT 6
16071: EQUAL
16072: IFFALSE 16082
// sArmoury := true ;
16074: LD_ADDR_EXP 59
16078: PUSH
16079: LD_INT 1
16081: ST_TO_ADDR
// if p3 = 7 then
16082: LD_VAR 0 3
16086: PUSH
16087: LD_INT 7
16089: EQUAL
16090: IFFALSE 16100
// sRadar := true ;
16092: LD_ADDR_EXP 60
16096: PUSH
16097: LD_INT 1
16099: ST_TO_ADDR
// if p3 = 8 then
16100: LD_VAR 0 3
16104: PUSH
16105: LD_INT 8
16107: EQUAL
16108: IFFALSE 16118
// sBunker := true ;
16110: LD_ADDR_EXP 61
16114: PUSH
16115: LD_INT 1
16117: ST_TO_ADDR
// if p3 = 9 then
16118: LD_VAR 0 3
16122: PUSH
16123: LD_INT 9
16125: EQUAL
16126: IFFALSE 16136
// sHack := true ;
16128: LD_ADDR_EXP 62
16132: PUSH
16133: LD_INT 1
16135: ST_TO_ADDR
// if p3 = 10 then
16136: LD_VAR 0 3
16140: PUSH
16141: LD_INT 10
16143: EQUAL
16144: IFFALSE 16154
// sFire := true ;
16146: LD_ADDR_EXP 63
16150: PUSH
16151: LD_INT 1
16153: ST_TO_ADDR
// if p3 = 11 then
16154: LD_VAR 0 3
16158: PUSH
16159: LD_INT 11
16161: EQUAL
16162: IFFALSE 16172
// sRefresh := true ;
16164: LD_ADDR_EXP 64
16168: PUSH
16169: LD_INT 1
16171: ST_TO_ADDR
// if p3 = 12 then
16172: LD_VAR 0 3
16176: PUSH
16177: LD_INT 12
16179: EQUAL
16180: IFFALSE 16190
// sExp := true ;
16182: LD_ADDR_EXP 65
16186: PUSH
16187: LD_INT 1
16189: ST_TO_ADDR
// if p3 = 13 then
16190: LD_VAR 0 3
16194: PUSH
16195: LD_INT 13
16197: EQUAL
16198: IFFALSE 16208
// sDepot := true ;
16200: LD_ADDR_EXP 66
16204: PUSH
16205: LD_INT 1
16207: ST_TO_ADDR
// if p3 = 14 then
16208: LD_VAR 0 3
16212: PUSH
16213: LD_INT 14
16215: EQUAL
16216: IFFALSE 16226
// sFlag := true ;
16218: LD_ADDR_EXP 67
16222: PUSH
16223: LD_INT 1
16225: ST_TO_ADDR
// if p3 = 15 then
16226: LD_VAR 0 3
16230: PUSH
16231: LD_INT 15
16233: EQUAL
16234: IFFALSE 16244
// sKamikadze := true ;
16236: LD_ADDR_EXP 75
16240: PUSH
16241: LD_INT 1
16243: ST_TO_ADDR
// if p3 = 16 then
16244: LD_VAR 0 3
16248: PUSH
16249: LD_INT 16
16251: EQUAL
16252: IFFALSE 16262
// sTroll := true ;
16254: LD_ADDR_EXP 76
16258: PUSH
16259: LD_INT 1
16261: ST_TO_ADDR
// if p3 = 17 then
16262: LD_VAR 0 3
16266: PUSH
16267: LD_INT 17
16269: EQUAL
16270: IFFALSE 16280
// sSlow := true ;
16272: LD_ADDR_EXP 77
16276: PUSH
16277: LD_INT 1
16279: ST_TO_ADDR
// if p3 = 18 then
16280: LD_VAR 0 3
16284: PUSH
16285: LD_INT 18
16287: EQUAL
16288: IFFALSE 16298
// sLack := true ;
16290: LD_ADDR_EXP 78
16294: PUSH
16295: LD_INT 1
16297: ST_TO_ADDR
// if p3 = 19 then
16298: LD_VAR 0 3
16302: PUSH
16303: LD_INT 19
16305: EQUAL
16306: IFFALSE 16316
// sTank := true ;
16308: LD_ADDR_EXP 80
16312: PUSH
16313: LD_INT 1
16315: ST_TO_ADDR
// if p3 = 20 then
16316: LD_VAR 0 3
16320: PUSH
16321: LD_INT 20
16323: EQUAL
16324: IFFALSE 16334
// sRemote := true ;
16326: LD_ADDR_EXP 81
16330: PUSH
16331: LD_INT 1
16333: ST_TO_ADDR
// if p3 = 21 then
16334: LD_VAR 0 3
16338: PUSH
16339: LD_INT 21
16341: EQUAL
16342: IFFALSE 16352
// sPowell := true ;
16344: LD_ADDR_EXP 82
16348: PUSH
16349: LD_INT 1
16351: ST_TO_ADDR
// if p3 = 22 then
16352: LD_VAR 0 3
16356: PUSH
16357: LD_INT 22
16359: EQUAL
16360: IFFALSE 16370
// sTeleport := true ;
16362: LD_ADDR_EXP 85
16366: PUSH
16367: LD_INT 1
16369: ST_TO_ADDR
// if p3 = 23 then
16370: LD_VAR 0 3
16374: PUSH
16375: LD_INT 23
16377: EQUAL
16378: IFFALSE 16388
// sOilTower := true ;
16380: LD_ADDR_EXP 87
16384: PUSH
16385: LD_INT 1
16387: ST_TO_ADDR
// if p3 = 24 then
16388: LD_VAR 0 3
16392: PUSH
16393: LD_INT 24
16395: EQUAL
16396: IFFALSE 16406
// sShovel := true ;
16398: LD_ADDR_EXP 88
16402: PUSH
16403: LD_INT 1
16405: ST_TO_ADDR
// if p3 = 25 then
16406: LD_VAR 0 3
16410: PUSH
16411: LD_INT 25
16413: EQUAL
16414: IFFALSE 16424
// sSheik := true ;
16416: LD_ADDR_EXP 89
16420: PUSH
16421: LD_INT 1
16423: ST_TO_ADDR
// if p3 = 26 then
16424: LD_VAR 0 3
16428: PUSH
16429: LD_INT 26
16431: EQUAL
16432: IFFALSE 16442
// sEarthquake := true ;
16434: LD_ADDR_EXP 91
16438: PUSH
16439: LD_INT 1
16441: ST_TO_ADDR
// if p3 = 27 then
16442: LD_VAR 0 3
16446: PUSH
16447: LD_INT 27
16449: EQUAL
16450: IFFALSE 16460
// sAI := true ;
16452: LD_ADDR_EXP 92
16456: PUSH
16457: LD_INT 1
16459: ST_TO_ADDR
// if p3 = 28 then
16460: LD_VAR 0 3
16464: PUSH
16465: LD_INT 28
16467: EQUAL
16468: IFFALSE 16478
// sCargo := true ;
16470: LD_ADDR_EXP 95
16474: PUSH
16475: LD_INT 1
16477: ST_TO_ADDR
// if p3 = 29 then
16478: LD_VAR 0 3
16482: PUSH
16483: LD_INT 29
16485: EQUAL
16486: IFFALSE 16496
// sDLaser := true ;
16488: LD_ADDR_EXP 96
16492: PUSH
16493: LD_INT 1
16495: ST_TO_ADDR
// if p3 = 30 then
16496: LD_VAR 0 3
16500: PUSH
16501: LD_INT 30
16503: EQUAL
16504: IFFALSE 16514
// sExchange := true ;
16506: LD_ADDR_EXP 97
16510: PUSH
16511: LD_INT 1
16513: ST_TO_ADDR
// if p3 = 31 then
16514: LD_VAR 0 3
16518: PUSH
16519: LD_INT 31
16521: EQUAL
16522: IFFALSE 16532
// sFac := true ;
16524: LD_ADDR_EXP 98
16528: PUSH
16529: LD_INT 1
16531: ST_TO_ADDR
// if p3 = 32 then
16532: LD_VAR 0 3
16536: PUSH
16537: LD_INT 32
16539: EQUAL
16540: IFFALSE 16550
// sPower := true ;
16542: LD_ADDR_EXP 99
16546: PUSH
16547: LD_INT 1
16549: ST_TO_ADDR
// if p3 = 33 then
16550: LD_VAR 0 3
16554: PUSH
16555: LD_INT 33
16557: EQUAL
16558: IFFALSE 16568
// sRandom := true ;
16560: LD_ADDR_EXP 100
16564: PUSH
16565: LD_INT 1
16567: ST_TO_ADDR
// if p3 = 34 then
16568: LD_VAR 0 3
16572: PUSH
16573: LD_INT 34
16575: EQUAL
16576: IFFALSE 16586
// sShield := true ;
16578: LD_ADDR_EXP 101
16582: PUSH
16583: LD_INT 1
16585: ST_TO_ADDR
// if p3 = 35 then
16586: LD_VAR 0 3
16590: PUSH
16591: LD_INT 35
16593: EQUAL
16594: IFFALSE 16604
// sTime := true ;
16596: LD_ADDR_EXP 102
16600: PUSH
16601: LD_INT 1
16603: ST_TO_ADDR
// if p3 = 36 then
16604: LD_VAR 0 3
16608: PUSH
16609: LD_INT 36
16611: EQUAL
16612: IFFALSE 16622
// sTools := true ;
16614: LD_ADDR_EXP 103
16618: PUSH
16619: LD_INT 1
16621: ST_TO_ADDR
// if p3 = 101 then
16622: LD_VAR 0 3
16626: PUSH
16627: LD_INT 101
16629: EQUAL
16630: IFFALSE 16640
// sSold := true ;
16632: LD_ADDR_EXP 68
16636: PUSH
16637: LD_INT 1
16639: ST_TO_ADDR
// if p3 = 102 then
16640: LD_VAR 0 3
16644: PUSH
16645: LD_INT 102
16647: EQUAL
16648: IFFALSE 16658
// sDiff := true ;
16650: LD_ADDR_EXP 69
16654: PUSH
16655: LD_INT 1
16657: ST_TO_ADDR
// if p3 = 103 then
16658: LD_VAR 0 3
16662: PUSH
16663: LD_INT 103
16665: EQUAL
16666: IFFALSE 16676
// sFog := true ;
16668: LD_ADDR_EXP 72
16672: PUSH
16673: LD_INT 1
16675: ST_TO_ADDR
// if p3 = 104 then
16676: LD_VAR 0 3
16680: PUSH
16681: LD_INT 104
16683: EQUAL
16684: IFFALSE 16694
// sReset := true ;
16686: LD_ADDR_EXP 73
16690: PUSH
16691: LD_INT 1
16693: ST_TO_ADDR
// if p3 = 105 then
16694: LD_VAR 0 3
16698: PUSH
16699: LD_INT 105
16701: EQUAL
16702: IFFALSE 16712
// sSun := true ;
16704: LD_ADDR_EXP 74
16708: PUSH
16709: LD_INT 1
16711: ST_TO_ADDR
// if p3 = 106 then
16712: LD_VAR 0 3
16716: PUSH
16717: LD_INT 106
16719: EQUAL
16720: IFFALSE 16730
// sTiger := true ;
16722: LD_ADDR_EXP 70
16726: PUSH
16727: LD_INT 1
16729: ST_TO_ADDR
// if p3 = 107 then
16730: LD_VAR 0 3
16734: PUSH
16735: LD_INT 107
16737: EQUAL
16738: IFFALSE 16748
// sBomb := true ;
16740: LD_ADDR_EXP 71
16744: PUSH
16745: LD_INT 1
16747: ST_TO_ADDR
// if p3 = 108 then
16748: LD_VAR 0 3
16752: PUSH
16753: LD_INT 108
16755: EQUAL
16756: IFFALSE 16766
// sWound := true ;
16758: LD_ADDR_EXP 79
16762: PUSH
16763: LD_INT 1
16765: ST_TO_ADDR
// if p3 = 109 then
16766: LD_VAR 0 3
16770: PUSH
16771: LD_INT 109
16773: EQUAL
16774: IFFALSE 16784
// sBetray := true ;
16776: LD_ADDR_EXP 83
16780: PUSH
16781: LD_INT 1
16783: ST_TO_ADDR
// if p3 = 110 then
16784: LD_VAR 0 3
16788: PUSH
16789: LD_INT 110
16791: EQUAL
16792: IFFALSE 16802
// sContamin := true ;
16794: LD_ADDR_EXP 84
16798: PUSH
16799: LD_INT 1
16801: ST_TO_ADDR
// if p3 = 111 then
16802: LD_VAR 0 3
16806: PUSH
16807: LD_INT 111
16809: EQUAL
16810: IFFALSE 16820
// sOil := true ;
16812: LD_ADDR_EXP 86
16816: PUSH
16817: LD_INT 1
16819: ST_TO_ADDR
// if p3 = 112 then
16820: LD_VAR 0 3
16824: PUSH
16825: LD_INT 112
16827: EQUAL
16828: IFFALSE 16838
// sStu := true ;
16830: LD_ADDR_EXP 90
16834: PUSH
16835: LD_INT 1
16837: ST_TO_ADDR
// if p3 = 113 then
16838: LD_VAR 0 3
16842: PUSH
16843: LD_INT 113
16845: EQUAL
16846: IFFALSE 16856
// sBazooka := true ;
16848: LD_ADDR_EXP 93
16852: PUSH
16853: LD_INT 1
16855: ST_TO_ADDR
// if p3 = 114 then
16856: LD_VAR 0 3
16860: PUSH
16861: LD_INT 114
16863: EQUAL
16864: IFFALSE 16874
// sMortar := true ;
16866: LD_ADDR_EXP 94
16870: PUSH
16871: LD_INT 1
16873: ST_TO_ADDR
// if p3 = 115 then
16874: LD_VAR 0 3
16878: PUSH
16879: LD_INT 115
16881: EQUAL
16882: IFFALSE 16892
// sRanger := true ;
16884: LD_ADDR_EXP 104
16888: PUSH
16889: LD_INT 1
16891: ST_TO_ADDR
// end ; if p2 = 101 then
16892: LD_VAR 0 2
16896: PUSH
16897: LD_INT 101
16899: EQUAL
16900: IFFALSE 17028
// begin case p3 of 1 :
16902: LD_VAR 0 3
16906: PUSH
16907: LD_INT 1
16909: DOUBLE
16910: EQUAL
16911: IFTRUE 16915
16913: GO 16922
16915: POP
// hHackUnlimitedResources ; 2 :
16916: CALL 28063 0 0
16920: GO 17028
16922: LD_INT 2
16924: DOUBLE
16925: EQUAL
16926: IFTRUE 16930
16928: GO 16937
16930: POP
// hHackSetLevel10 ; 3 :
16931: CALL 28196 0 0
16935: GO 17028
16937: LD_INT 3
16939: DOUBLE
16940: EQUAL
16941: IFTRUE 16945
16943: GO 16952
16945: POP
// hHackSetLevel10YourUnits ; 4 :
16946: CALL 28281 0 0
16950: GO 17028
16952: LD_INT 4
16954: DOUBLE
16955: EQUAL
16956: IFTRUE 16960
16958: GO 16967
16960: POP
// hHackInvincible ; 5 :
16961: CALL 28729 0 0
16965: GO 17028
16967: LD_INT 5
16969: DOUBLE
16970: EQUAL
16971: IFTRUE 16975
16973: GO 16982
16975: POP
// hHackInvisible ; 6 :
16976: CALL 28840 0 0
16980: GO 17028
16982: LD_INT 6
16984: DOUBLE
16985: EQUAL
16986: IFTRUE 16990
16988: GO 16997
16990: POP
// hHackChangeYourSide ; 7 :
16991: CALL 28897 0 0
16995: GO 17028
16997: LD_INT 7
16999: DOUBLE
17000: EQUAL
17001: IFTRUE 17005
17003: GO 17012
17005: POP
// hHackChangeUnitSide ; 8 :
17006: CALL 28939 0 0
17010: GO 17028
17012: LD_INT 8
17014: DOUBLE
17015: EQUAL
17016: IFTRUE 17020
17018: GO 17027
17020: POP
// hHackFog ; end ;
17021: CALL 29040 0 0
17025: GO 17028
17027: POP
// end ; end ;
17028: PPOPN 6
17030: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
17031: GO 17033
17033: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17034: LD_STRING initStreamRollete();
17036: PPUSH
17037: CALL_OW 559
// InitStreamMode ;
17041: CALL 17050 0 0
// DefineStreamItems ( ) ;
17045: CALL 17490 0 0
// end ;
17049: END
// function InitStreamMode ; begin
17050: LD_INT 0
17052: PPUSH
// streamModeActive := false ;
17053: LD_ADDR_EXP 51
17057: PUSH
17058: LD_INT 0
17060: ST_TO_ADDR
// normalCounter := 36 ;
17061: LD_ADDR_EXP 52
17065: PUSH
17066: LD_INT 36
17068: ST_TO_ADDR
// hardcoreCounter := 16 ;
17069: LD_ADDR_EXP 53
17073: PUSH
17074: LD_INT 16
17076: ST_TO_ADDR
// sRocket := false ;
17077: LD_ADDR_EXP 56
17081: PUSH
17082: LD_INT 0
17084: ST_TO_ADDR
// sSpeed := false ;
17085: LD_ADDR_EXP 55
17089: PUSH
17090: LD_INT 0
17092: ST_TO_ADDR
// sEngine := false ;
17093: LD_ADDR_EXP 57
17097: PUSH
17098: LD_INT 0
17100: ST_TO_ADDR
// sSpec := false ;
17101: LD_ADDR_EXP 54
17105: PUSH
17106: LD_INT 0
17108: ST_TO_ADDR
// sLevel := false ;
17109: LD_ADDR_EXP 58
17113: PUSH
17114: LD_INT 0
17116: ST_TO_ADDR
// sArmoury := false ;
17117: LD_ADDR_EXP 59
17121: PUSH
17122: LD_INT 0
17124: ST_TO_ADDR
// sRadar := false ;
17125: LD_ADDR_EXP 60
17129: PUSH
17130: LD_INT 0
17132: ST_TO_ADDR
// sBunker := false ;
17133: LD_ADDR_EXP 61
17137: PUSH
17138: LD_INT 0
17140: ST_TO_ADDR
// sHack := false ;
17141: LD_ADDR_EXP 62
17145: PUSH
17146: LD_INT 0
17148: ST_TO_ADDR
// sFire := false ;
17149: LD_ADDR_EXP 63
17153: PUSH
17154: LD_INT 0
17156: ST_TO_ADDR
// sRefresh := false ;
17157: LD_ADDR_EXP 64
17161: PUSH
17162: LD_INT 0
17164: ST_TO_ADDR
// sExp := false ;
17165: LD_ADDR_EXP 65
17169: PUSH
17170: LD_INT 0
17172: ST_TO_ADDR
// sDepot := false ;
17173: LD_ADDR_EXP 66
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// sFlag := false ;
17181: LD_ADDR_EXP 67
17185: PUSH
17186: LD_INT 0
17188: ST_TO_ADDR
// sKamikadze := false ;
17189: LD_ADDR_EXP 75
17193: PUSH
17194: LD_INT 0
17196: ST_TO_ADDR
// sTroll := false ;
17197: LD_ADDR_EXP 76
17201: PUSH
17202: LD_INT 0
17204: ST_TO_ADDR
// sSlow := false ;
17205: LD_ADDR_EXP 77
17209: PUSH
17210: LD_INT 0
17212: ST_TO_ADDR
// sLack := false ;
17213: LD_ADDR_EXP 78
17217: PUSH
17218: LD_INT 0
17220: ST_TO_ADDR
// sTank := false ;
17221: LD_ADDR_EXP 80
17225: PUSH
17226: LD_INT 0
17228: ST_TO_ADDR
// sRemote := false ;
17229: LD_ADDR_EXP 81
17233: PUSH
17234: LD_INT 0
17236: ST_TO_ADDR
// sPowell := false ;
17237: LD_ADDR_EXP 82
17241: PUSH
17242: LD_INT 0
17244: ST_TO_ADDR
// sTeleport := false ;
17245: LD_ADDR_EXP 85
17249: PUSH
17250: LD_INT 0
17252: ST_TO_ADDR
// sOilTower := false ;
17253: LD_ADDR_EXP 87
17257: PUSH
17258: LD_INT 0
17260: ST_TO_ADDR
// sShovel := false ;
17261: LD_ADDR_EXP 88
17265: PUSH
17266: LD_INT 0
17268: ST_TO_ADDR
// sSheik := false ;
17269: LD_ADDR_EXP 89
17273: PUSH
17274: LD_INT 0
17276: ST_TO_ADDR
// sEarthquake := false ;
17277: LD_ADDR_EXP 91
17281: PUSH
17282: LD_INT 0
17284: ST_TO_ADDR
// sAI := false ;
17285: LD_ADDR_EXP 92
17289: PUSH
17290: LD_INT 0
17292: ST_TO_ADDR
// sCargo := false ;
17293: LD_ADDR_EXP 95
17297: PUSH
17298: LD_INT 0
17300: ST_TO_ADDR
// sDLaser := false ;
17301: LD_ADDR_EXP 96
17305: PUSH
17306: LD_INT 0
17308: ST_TO_ADDR
// sExchange := false ;
17309: LD_ADDR_EXP 97
17313: PUSH
17314: LD_INT 0
17316: ST_TO_ADDR
// sFac := false ;
17317: LD_ADDR_EXP 98
17321: PUSH
17322: LD_INT 0
17324: ST_TO_ADDR
// sPower := false ;
17325: LD_ADDR_EXP 99
17329: PUSH
17330: LD_INT 0
17332: ST_TO_ADDR
// sRandom := false ;
17333: LD_ADDR_EXP 100
17337: PUSH
17338: LD_INT 0
17340: ST_TO_ADDR
// sShield := false ;
17341: LD_ADDR_EXP 101
17345: PUSH
17346: LD_INT 0
17348: ST_TO_ADDR
// sTime := false ;
17349: LD_ADDR_EXP 102
17353: PUSH
17354: LD_INT 0
17356: ST_TO_ADDR
// sTools := false ;
17357: LD_ADDR_EXP 103
17361: PUSH
17362: LD_INT 0
17364: ST_TO_ADDR
// sSold := false ;
17365: LD_ADDR_EXP 68
17369: PUSH
17370: LD_INT 0
17372: ST_TO_ADDR
// sDiff := false ;
17373: LD_ADDR_EXP 69
17377: PUSH
17378: LD_INT 0
17380: ST_TO_ADDR
// sFog := false ;
17381: LD_ADDR_EXP 72
17385: PUSH
17386: LD_INT 0
17388: ST_TO_ADDR
// sReset := false ;
17389: LD_ADDR_EXP 73
17393: PUSH
17394: LD_INT 0
17396: ST_TO_ADDR
// sSun := false ;
17397: LD_ADDR_EXP 74
17401: PUSH
17402: LD_INT 0
17404: ST_TO_ADDR
// sTiger := false ;
17405: LD_ADDR_EXP 70
17409: PUSH
17410: LD_INT 0
17412: ST_TO_ADDR
// sBomb := false ;
17413: LD_ADDR_EXP 71
17417: PUSH
17418: LD_INT 0
17420: ST_TO_ADDR
// sWound := false ;
17421: LD_ADDR_EXP 79
17425: PUSH
17426: LD_INT 0
17428: ST_TO_ADDR
// sBetray := false ;
17429: LD_ADDR_EXP 83
17433: PUSH
17434: LD_INT 0
17436: ST_TO_ADDR
// sContamin := false ;
17437: LD_ADDR_EXP 84
17441: PUSH
17442: LD_INT 0
17444: ST_TO_ADDR
// sOil := false ;
17445: LD_ADDR_EXP 86
17449: PUSH
17450: LD_INT 0
17452: ST_TO_ADDR
// sStu := false ;
17453: LD_ADDR_EXP 90
17457: PUSH
17458: LD_INT 0
17460: ST_TO_ADDR
// sBazooka := false ;
17461: LD_ADDR_EXP 93
17465: PUSH
17466: LD_INT 0
17468: ST_TO_ADDR
// sMortar := false ;
17469: LD_ADDR_EXP 94
17473: PUSH
17474: LD_INT 0
17476: ST_TO_ADDR
// sRanger := false ;
17477: LD_ADDR_EXP 104
17481: PUSH
17482: LD_INT 0
17484: ST_TO_ADDR
// end ;
17485: LD_VAR 0 1
17489: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
17490: LD_INT 0
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
// result := [ ] ;
17497: LD_ADDR_VAR 0 1
17501: PUSH
17502: EMPTY
17503: ST_TO_ADDR
// if campaign_id = 1 then
17504: LD_OWVAR 69
17508: PUSH
17509: LD_INT 1
17511: EQUAL
17512: IFFALSE 20450
// begin case mission_number of 1 :
17514: LD_OWVAR 70
17518: PUSH
17519: LD_INT 1
17521: DOUBLE
17522: EQUAL
17523: IFTRUE 17527
17525: GO 17591
17527: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
17528: LD_ADDR_VAR 0 1
17532: PUSH
17533: LD_INT 2
17535: PUSH
17536: LD_INT 4
17538: PUSH
17539: LD_INT 11
17541: PUSH
17542: LD_INT 12
17544: PUSH
17545: LD_INT 15
17547: PUSH
17548: LD_INT 16
17550: PUSH
17551: LD_INT 22
17553: PUSH
17554: LD_INT 23
17556: PUSH
17557: LD_INT 26
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 101
17573: PUSH
17574: LD_INT 102
17576: PUSH
17577: LD_INT 106
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: ST_TO_ADDR
17589: GO 20448
17591: LD_INT 2
17593: DOUBLE
17594: EQUAL
17595: IFTRUE 17599
17597: GO 17671
17599: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
17600: LD_ADDR_VAR 0 1
17604: PUSH
17605: LD_INT 2
17607: PUSH
17608: LD_INT 4
17610: PUSH
17611: LD_INT 11
17613: PUSH
17614: LD_INT 12
17616: PUSH
17617: LD_INT 15
17619: PUSH
17620: LD_INT 16
17622: PUSH
17623: LD_INT 22
17625: PUSH
17626: LD_INT 23
17628: PUSH
17629: LD_INT 26
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 101
17645: PUSH
17646: LD_INT 102
17648: PUSH
17649: LD_INT 105
17651: PUSH
17652: LD_INT 106
17654: PUSH
17655: LD_INT 108
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: ST_TO_ADDR
17669: GO 20448
17671: LD_INT 3
17673: DOUBLE
17674: EQUAL
17675: IFTRUE 17679
17677: GO 17755
17679: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
17680: LD_ADDR_VAR 0 1
17684: PUSH
17685: LD_INT 2
17687: PUSH
17688: LD_INT 4
17690: PUSH
17691: LD_INT 5
17693: PUSH
17694: LD_INT 11
17696: PUSH
17697: LD_INT 12
17699: PUSH
17700: LD_INT 15
17702: PUSH
17703: LD_INT 16
17705: PUSH
17706: LD_INT 22
17708: PUSH
17709: LD_INT 26
17711: PUSH
17712: LD_INT 36
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 101
17729: PUSH
17730: LD_INT 102
17732: PUSH
17733: LD_INT 105
17735: PUSH
17736: LD_INT 106
17738: PUSH
17739: LD_INT 108
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: ST_TO_ADDR
17753: GO 20448
17755: LD_INT 4
17757: DOUBLE
17758: EQUAL
17759: IFTRUE 17763
17761: GO 17847
17763: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
17764: LD_ADDR_VAR 0 1
17768: PUSH
17769: LD_INT 2
17771: PUSH
17772: LD_INT 4
17774: PUSH
17775: LD_INT 5
17777: PUSH
17778: LD_INT 8
17780: PUSH
17781: LD_INT 11
17783: PUSH
17784: LD_INT 12
17786: PUSH
17787: LD_INT 15
17789: PUSH
17790: LD_INT 16
17792: PUSH
17793: LD_INT 22
17795: PUSH
17796: LD_INT 23
17798: PUSH
17799: LD_INT 26
17801: PUSH
17802: LD_INT 36
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 101
17821: PUSH
17822: LD_INT 102
17824: PUSH
17825: LD_INT 105
17827: PUSH
17828: LD_INT 106
17830: PUSH
17831: LD_INT 108
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: ST_TO_ADDR
17845: GO 20448
17847: LD_INT 5
17849: DOUBLE
17850: EQUAL
17851: IFTRUE 17855
17853: GO 17955
17855: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17856: LD_ADDR_VAR 0 1
17860: PUSH
17861: LD_INT 2
17863: PUSH
17864: LD_INT 4
17866: PUSH
17867: LD_INT 5
17869: PUSH
17870: LD_INT 6
17872: PUSH
17873: LD_INT 8
17875: PUSH
17876: LD_INT 11
17878: PUSH
17879: LD_INT 12
17881: PUSH
17882: LD_INT 15
17884: PUSH
17885: LD_INT 16
17887: PUSH
17888: LD_INT 22
17890: PUSH
17891: LD_INT 23
17893: PUSH
17894: LD_INT 25
17896: PUSH
17897: LD_INT 26
17899: PUSH
17900: LD_INT 36
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 101
17921: PUSH
17922: LD_INT 102
17924: PUSH
17925: LD_INT 105
17927: PUSH
17928: LD_INT 106
17930: PUSH
17931: LD_INT 108
17933: PUSH
17934: LD_INT 109
17936: PUSH
17937: LD_INT 112
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: ST_TO_ADDR
17953: GO 20448
17955: LD_INT 6
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 18083
17963: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
17964: LD_ADDR_VAR 0 1
17968: PUSH
17969: LD_INT 2
17971: PUSH
17972: LD_INT 4
17974: PUSH
17975: LD_INT 5
17977: PUSH
17978: LD_INT 6
17980: PUSH
17981: LD_INT 8
17983: PUSH
17984: LD_INT 11
17986: PUSH
17987: LD_INT 12
17989: PUSH
17990: LD_INT 15
17992: PUSH
17993: LD_INT 16
17995: PUSH
17996: LD_INT 20
17998: PUSH
17999: LD_INT 21
18001: PUSH
18002: LD_INT 22
18004: PUSH
18005: LD_INT 23
18007: PUSH
18008: LD_INT 25
18010: PUSH
18011: LD_INT 26
18013: PUSH
18014: LD_INT 30
18016: PUSH
18017: LD_INT 31
18019: PUSH
18020: LD_INT 32
18022: PUSH
18023: LD_INT 36
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 101
18049: PUSH
18050: LD_INT 102
18052: PUSH
18053: LD_INT 105
18055: PUSH
18056: LD_INT 106
18058: PUSH
18059: LD_INT 108
18061: PUSH
18062: LD_INT 109
18064: PUSH
18065: LD_INT 112
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: ST_TO_ADDR
18081: GO 20448
18083: LD_INT 7
18085: DOUBLE
18086: EQUAL
18087: IFTRUE 18091
18089: GO 18191
18091: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
18092: LD_ADDR_VAR 0 1
18096: PUSH
18097: LD_INT 2
18099: PUSH
18100: LD_INT 4
18102: PUSH
18103: LD_INT 5
18105: PUSH
18106: LD_INT 7
18108: PUSH
18109: LD_INT 11
18111: PUSH
18112: LD_INT 12
18114: PUSH
18115: LD_INT 15
18117: PUSH
18118: LD_INT 16
18120: PUSH
18121: LD_INT 20
18123: PUSH
18124: LD_INT 21
18126: PUSH
18127: LD_INT 22
18129: PUSH
18130: LD_INT 23
18132: PUSH
18133: LD_INT 25
18135: PUSH
18136: LD_INT 26
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 101
18157: PUSH
18158: LD_INT 102
18160: PUSH
18161: LD_INT 103
18163: PUSH
18164: LD_INT 105
18166: PUSH
18167: LD_INT 106
18169: PUSH
18170: LD_INT 108
18172: PUSH
18173: LD_INT 112
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: ST_TO_ADDR
18189: GO 20448
18191: LD_INT 8
18193: DOUBLE
18194: EQUAL
18195: IFTRUE 18199
18197: GO 18327
18199: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
18200: LD_ADDR_VAR 0 1
18204: PUSH
18205: LD_INT 2
18207: PUSH
18208: LD_INT 4
18210: PUSH
18211: LD_INT 5
18213: PUSH
18214: LD_INT 6
18216: PUSH
18217: LD_INT 7
18219: PUSH
18220: LD_INT 8
18222: PUSH
18223: LD_INT 11
18225: PUSH
18226: LD_INT 12
18228: PUSH
18229: LD_INT 15
18231: PUSH
18232: LD_INT 16
18234: PUSH
18235: LD_INT 20
18237: PUSH
18238: LD_INT 21
18240: PUSH
18241: LD_INT 22
18243: PUSH
18244: LD_INT 23
18246: PUSH
18247: LD_INT 25
18249: PUSH
18250: LD_INT 26
18252: PUSH
18253: LD_INT 30
18255: PUSH
18256: LD_INT 31
18258: PUSH
18259: LD_INT 32
18261: PUSH
18262: LD_INT 36
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 101
18289: PUSH
18290: LD_INT 102
18292: PUSH
18293: LD_INT 103
18295: PUSH
18296: LD_INT 105
18298: PUSH
18299: LD_INT 106
18301: PUSH
18302: LD_INT 108
18304: PUSH
18305: LD_INT 109
18307: PUSH
18308: LD_INT 112
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: ST_TO_ADDR
18325: GO 20448
18327: LD_INT 9
18329: DOUBLE
18330: EQUAL
18331: IFTRUE 18335
18333: GO 18471
18335: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
18336: LD_ADDR_VAR 0 1
18340: PUSH
18341: LD_INT 2
18343: PUSH
18344: LD_INT 4
18346: PUSH
18347: LD_INT 5
18349: PUSH
18350: LD_INT 6
18352: PUSH
18353: LD_INT 7
18355: PUSH
18356: LD_INT 8
18358: PUSH
18359: LD_INT 11
18361: PUSH
18362: LD_INT 12
18364: PUSH
18365: LD_INT 15
18367: PUSH
18368: LD_INT 16
18370: PUSH
18371: LD_INT 20
18373: PUSH
18374: LD_INT 21
18376: PUSH
18377: LD_INT 22
18379: PUSH
18380: LD_INT 23
18382: PUSH
18383: LD_INT 25
18385: PUSH
18386: LD_INT 26
18388: PUSH
18389: LD_INT 28
18391: PUSH
18392: LD_INT 30
18394: PUSH
18395: LD_INT 31
18397: PUSH
18398: LD_INT 32
18400: PUSH
18401: LD_INT 36
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 101
18429: PUSH
18430: LD_INT 102
18432: PUSH
18433: LD_INT 103
18435: PUSH
18436: LD_INT 105
18438: PUSH
18439: LD_INT 106
18441: PUSH
18442: LD_INT 108
18444: PUSH
18445: LD_INT 109
18447: PUSH
18448: LD_INT 112
18450: PUSH
18451: LD_INT 114
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: ST_TO_ADDR
18469: GO 20448
18471: LD_INT 10
18473: DOUBLE
18474: EQUAL
18475: IFTRUE 18479
18477: GO 18663
18479: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
18480: LD_ADDR_VAR 0 1
18484: PUSH
18485: LD_INT 2
18487: PUSH
18488: LD_INT 4
18490: PUSH
18491: LD_INT 5
18493: PUSH
18494: LD_INT 6
18496: PUSH
18497: LD_INT 7
18499: PUSH
18500: LD_INT 8
18502: PUSH
18503: LD_INT 9
18505: PUSH
18506: LD_INT 10
18508: PUSH
18509: LD_INT 11
18511: PUSH
18512: LD_INT 12
18514: PUSH
18515: LD_INT 13
18517: PUSH
18518: LD_INT 14
18520: PUSH
18521: LD_INT 15
18523: PUSH
18524: LD_INT 16
18526: PUSH
18527: LD_INT 17
18529: PUSH
18530: LD_INT 18
18532: PUSH
18533: LD_INT 19
18535: PUSH
18536: LD_INT 20
18538: PUSH
18539: LD_INT 21
18541: PUSH
18542: LD_INT 22
18544: PUSH
18545: LD_INT 23
18547: PUSH
18548: LD_INT 24
18550: PUSH
18551: LD_INT 25
18553: PUSH
18554: LD_INT 26
18556: PUSH
18557: LD_INT 28
18559: PUSH
18560: LD_INT 30
18562: PUSH
18563: LD_INT 31
18565: PUSH
18566: LD_INT 32
18568: PUSH
18569: LD_INT 36
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 101
18605: PUSH
18606: LD_INT 102
18608: PUSH
18609: LD_INT 103
18611: PUSH
18612: LD_INT 104
18614: PUSH
18615: LD_INT 105
18617: PUSH
18618: LD_INT 106
18620: PUSH
18621: LD_INT 107
18623: PUSH
18624: LD_INT 108
18626: PUSH
18627: LD_INT 109
18629: PUSH
18630: LD_INT 110
18632: PUSH
18633: LD_INT 111
18635: PUSH
18636: LD_INT 112
18638: PUSH
18639: LD_INT 114
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: ST_TO_ADDR
18661: GO 20448
18663: LD_INT 11
18665: DOUBLE
18666: EQUAL
18667: IFTRUE 18671
18669: GO 18863
18671: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
18672: LD_ADDR_VAR 0 1
18676: PUSH
18677: LD_INT 2
18679: PUSH
18680: LD_INT 3
18682: PUSH
18683: LD_INT 4
18685: PUSH
18686: LD_INT 5
18688: PUSH
18689: LD_INT 6
18691: PUSH
18692: LD_INT 7
18694: PUSH
18695: LD_INT 8
18697: PUSH
18698: LD_INT 9
18700: PUSH
18701: LD_INT 10
18703: PUSH
18704: LD_INT 11
18706: PUSH
18707: LD_INT 12
18709: PUSH
18710: LD_INT 13
18712: PUSH
18713: LD_INT 14
18715: PUSH
18716: LD_INT 15
18718: PUSH
18719: LD_INT 16
18721: PUSH
18722: LD_INT 17
18724: PUSH
18725: LD_INT 18
18727: PUSH
18728: LD_INT 19
18730: PUSH
18731: LD_INT 20
18733: PUSH
18734: LD_INT 21
18736: PUSH
18737: LD_INT 22
18739: PUSH
18740: LD_INT 23
18742: PUSH
18743: LD_INT 24
18745: PUSH
18746: LD_INT 25
18748: PUSH
18749: LD_INT 26
18751: PUSH
18752: LD_INT 28
18754: PUSH
18755: LD_INT 30
18757: PUSH
18758: LD_INT 31
18760: PUSH
18761: LD_INT 32
18763: PUSH
18764: LD_INT 34
18766: PUSH
18767: LD_INT 36
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 101
18805: PUSH
18806: LD_INT 102
18808: PUSH
18809: LD_INT 103
18811: PUSH
18812: LD_INT 104
18814: PUSH
18815: LD_INT 105
18817: PUSH
18818: LD_INT 106
18820: PUSH
18821: LD_INT 107
18823: PUSH
18824: LD_INT 108
18826: PUSH
18827: LD_INT 109
18829: PUSH
18830: LD_INT 110
18832: PUSH
18833: LD_INT 111
18835: PUSH
18836: LD_INT 112
18838: PUSH
18839: LD_INT 114
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: ST_TO_ADDR
18861: GO 20448
18863: LD_INT 12
18865: DOUBLE
18866: EQUAL
18867: IFTRUE 18871
18869: GO 19079
18871: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18872: LD_ADDR_VAR 0 1
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: LD_INT 3
18885: PUSH
18886: LD_INT 4
18888: PUSH
18889: LD_INT 5
18891: PUSH
18892: LD_INT 6
18894: PUSH
18895: LD_INT 7
18897: PUSH
18898: LD_INT 8
18900: PUSH
18901: LD_INT 9
18903: PUSH
18904: LD_INT 10
18906: PUSH
18907: LD_INT 11
18909: PUSH
18910: LD_INT 12
18912: PUSH
18913: LD_INT 13
18915: PUSH
18916: LD_INT 14
18918: PUSH
18919: LD_INT 15
18921: PUSH
18922: LD_INT 16
18924: PUSH
18925: LD_INT 17
18927: PUSH
18928: LD_INT 18
18930: PUSH
18931: LD_INT 19
18933: PUSH
18934: LD_INT 20
18936: PUSH
18937: LD_INT 21
18939: PUSH
18940: LD_INT 22
18942: PUSH
18943: LD_INT 23
18945: PUSH
18946: LD_INT 24
18948: PUSH
18949: LD_INT 25
18951: PUSH
18952: LD_INT 26
18954: PUSH
18955: LD_INT 27
18957: PUSH
18958: LD_INT 28
18960: PUSH
18961: LD_INT 30
18963: PUSH
18964: LD_INT 31
18966: PUSH
18967: LD_INT 32
18969: PUSH
18970: LD_INT 33
18972: PUSH
18973: LD_INT 34
18975: PUSH
18976: LD_INT 36
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 101
19017: PUSH
19018: LD_INT 102
19020: PUSH
19021: LD_INT 103
19023: PUSH
19024: LD_INT 104
19026: PUSH
19027: LD_INT 105
19029: PUSH
19030: LD_INT 106
19032: PUSH
19033: LD_INT 107
19035: PUSH
19036: LD_INT 108
19038: PUSH
19039: LD_INT 109
19041: PUSH
19042: LD_INT 110
19044: PUSH
19045: LD_INT 111
19047: PUSH
19048: LD_INT 112
19050: PUSH
19051: LD_INT 113
19053: PUSH
19054: LD_INT 114
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: ST_TO_ADDR
19077: GO 20448
19079: LD_INT 13
19081: DOUBLE
19082: EQUAL
19083: IFTRUE 19087
19085: GO 19283
19087: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
19088: LD_ADDR_VAR 0 1
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: LD_INT 2
19098: PUSH
19099: LD_INT 3
19101: PUSH
19102: LD_INT 4
19104: PUSH
19105: LD_INT 5
19107: PUSH
19108: LD_INT 8
19110: PUSH
19111: LD_INT 9
19113: PUSH
19114: LD_INT 10
19116: PUSH
19117: LD_INT 11
19119: PUSH
19120: LD_INT 12
19122: PUSH
19123: LD_INT 14
19125: PUSH
19126: LD_INT 15
19128: PUSH
19129: LD_INT 16
19131: PUSH
19132: LD_INT 17
19134: PUSH
19135: LD_INT 18
19137: PUSH
19138: LD_INT 19
19140: PUSH
19141: LD_INT 20
19143: PUSH
19144: LD_INT 21
19146: PUSH
19147: LD_INT 22
19149: PUSH
19150: LD_INT 23
19152: PUSH
19153: LD_INT 24
19155: PUSH
19156: LD_INT 25
19158: PUSH
19159: LD_INT 26
19161: PUSH
19162: LD_INT 27
19164: PUSH
19165: LD_INT 28
19167: PUSH
19168: LD_INT 30
19170: PUSH
19171: LD_INT 31
19173: PUSH
19174: LD_INT 32
19176: PUSH
19177: LD_INT 33
19179: PUSH
19180: LD_INT 34
19182: PUSH
19183: LD_INT 36
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 101
19221: PUSH
19222: LD_INT 102
19224: PUSH
19225: LD_INT 103
19227: PUSH
19228: LD_INT 104
19230: PUSH
19231: LD_INT 105
19233: PUSH
19234: LD_INT 106
19236: PUSH
19237: LD_INT 107
19239: PUSH
19240: LD_INT 108
19242: PUSH
19243: LD_INT 109
19245: PUSH
19246: LD_INT 110
19248: PUSH
19249: LD_INT 111
19251: PUSH
19252: LD_INT 112
19254: PUSH
19255: LD_INT 113
19257: PUSH
19258: LD_INT 114
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: ST_TO_ADDR
19281: GO 20448
19283: LD_INT 14
19285: DOUBLE
19286: EQUAL
19287: IFTRUE 19291
19289: GO 19503
19291: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
19292: LD_ADDR_VAR 0 1
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: LD_INT 3
19305: PUSH
19306: LD_INT 4
19308: PUSH
19309: LD_INT 5
19311: PUSH
19312: LD_INT 6
19314: PUSH
19315: LD_INT 7
19317: PUSH
19318: LD_INT 8
19320: PUSH
19321: LD_INT 9
19323: PUSH
19324: LD_INT 10
19326: PUSH
19327: LD_INT 11
19329: PUSH
19330: LD_INT 12
19332: PUSH
19333: LD_INT 13
19335: PUSH
19336: LD_INT 14
19338: PUSH
19339: LD_INT 15
19341: PUSH
19342: LD_INT 16
19344: PUSH
19345: LD_INT 17
19347: PUSH
19348: LD_INT 18
19350: PUSH
19351: LD_INT 19
19353: PUSH
19354: LD_INT 20
19356: PUSH
19357: LD_INT 21
19359: PUSH
19360: LD_INT 22
19362: PUSH
19363: LD_INT 23
19365: PUSH
19366: LD_INT 24
19368: PUSH
19369: LD_INT 25
19371: PUSH
19372: LD_INT 26
19374: PUSH
19375: LD_INT 27
19377: PUSH
19378: LD_INT 28
19380: PUSH
19381: LD_INT 29
19383: PUSH
19384: LD_INT 30
19386: PUSH
19387: LD_INT 31
19389: PUSH
19390: LD_INT 32
19392: PUSH
19393: LD_INT 33
19395: PUSH
19396: LD_INT 34
19398: PUSH
19399: LD_INT 36
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 101
19441: PUSH
19442: LD_INT 102
19444: PUSH
19445: LD_INT 103
19447: PUSH
19448: LD_INT 104
19450: PUSH
19451: LD_INT 105
19453: PUSH
19454: LD_INT 106
19456: PUSH
19457: LD_INT 107
19459: PUSH
19460: LD_INT 108
19462: PUSH
19463: LD_INT 109
19465: PUSH
19466: LD_INT 110
19468: PUSH
19469: LD_INT 111
19471: PUSH
19472: LD_INT 112
19474: PUSH
19475: LD_INT 113
19477: PUSH
19478: LD_INT 114
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: ST_TO_ADDR
19501: GO 20448
19503: LD_INT 15
19505: DOUBLE
19506: EQUAL
19507: IFTRUE 19511
19509: GO 19723
19511: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
19512: LD_ADDR_VAR 0 1
19516: PUSH
19517: LD_INT 1
19519: PUSH
19520: LD_INT 2
19522: PUSH
19523: LD_INT 3
19525: PUSH
19526: LD_INT 4
19528: PUSH
19529: LD_INT 5
19531: PUSH
19532: LD_INT 6
19534: PUSH
19535: LD_INT 7
19537: PUSH
19538: LD_INT 8
19540: PUSH
19541: LD_INT 9
19543: PUSH
19544: LD_INT 10
19546: PUSH
19547: LD_INT 11
19549: PUSH
19550: LD_INT 12
19552: PUSH
19553: LD_INT 13
19555: PUSH
19556: LD_INT 14
19558: PUSH
19559: LD_INT 15
19561: PUSH
19562: LD_INT 16
19564: PUSH
19565: LD_INT 17
19567: PUSH
19568: LD_INT 18
19570: PUSH
19571: LD_INT 19
19573: PUSH
19574: LD_INT 20
19576: PUSH
19577: LD_INT 21
19579: PUSH
19580: LD_INT 22
19582: PUSH
19583: LD_INT 23
19585: PUSH
19586: LD_INT 24
19588: PUSH
19589: LD_INT 25
19591: PUSH
19592: LD_INT 26
19594: PUSH
19595: LD_INT 27
19597: PUSH
19598: LD_INT 28
19600: PUSH
19601: LD_INT 29
19603: PUSH
19604: LD_INT 30
19606: PUSH
19607: LD_INT 31
19609: PUSH
19610: LD_INT 32
19612: PUSH
19613: LD_INT 33
19615: PUSH
19616: LD_INT 34
19618: PUSH
19619: LD_INT 36
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 101
19661: PUSH
19662: LD_INT 102
19664: PUSH
19665: LD_INT 103
19667: PUSH
19668: LD_INT 104
19670: PUSH
19671: LD_INT 105
19673: PUSH
19674: LD_INT 106
19676: PUSH
19677: LD_INT 107
19679: PUSH
19680: LD_INT 108
19682: PUSH
19683: LD_INT 109
19685: PUSH
19686: LD_INT 110
19688: PUSH
19689: LD_INT 111
19691: PUSH
19692: LD_INT 112
19694: PUSH
19695: LD_INT 113
19697: PUSH
19698: LD_INT 114
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: ST_TO_ADDR
19721: GO 20448
19723: LD_INT 16
19725: DOUBLE
19726: EQUAL
19727: IFTRUE 19731
19729: GO 19855
19731: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
19732: LD_ADDR_VAR 0 1
19736: PUSH
19737: LD_INT 2
19739: PUSH
19740: LD_INT 4
19742: PUSH
19743: LD_INT 5
19745: PUSH
19746: LD_INT 7
19748: PUSH
19749: LD_INT 11
19751: PUSH
19752: LD_INT 12
19754: PUSH
19755: LD_INT 15
19757: PUSH
19758: LD_INT 16
19760: PUSH
19761: LD_INT 20
19763: PUSH
19764: LD_INT 21
19766: PUSH
19767: LD_INT 22
19769: PUSH
19770: LD_INT 23
19772: PUSH
19773: LD_INT 25
19775: PUSH
19776: LD_INT 26
19778: PUSH
19779: LD_INT 30
19781: PUSH
19782: LD_INT 31
19784: PUSH
19785: LD_INT 32
19787: PUSH
19788: LD_INT 33
19790: PUSH
19791: LD_INT 34
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 101
19817: PUSH
19818: LD_INT 102
19820: PUSH
19821: LD_INT 103
19823: PUSH
19824: LD_INT 106
19826: PUSH
19827: LD_INT 108
19829: PUSH
19830: LD_INT 112
19832: PUSH
19833: LD_INT 113
19835: PUSH
19836: LD_INT 114
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: ST_TO_ADDR
19853: GO 20448
19855: LD_INT 17
19857: DOUBLE
19858: EQUAL
19859: IFTRUE 19863
19861: GO 20075
19863: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19864: LD_ADDR_VAR 0 1
19868: PUSH
19869: LD_INT 1
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: LD_INT 3
19877: PUSH
19878: LD_INT 4
19880: PUSH
19881: LD_INT 5
19883: PUSH
19884: LD_INT 6
19886: PUSH
19887: LD_INT 7
19889: PUSH
19890: LD_INT 8
19892: PUSH
19893: LD_INT 9
19895: PUSH
19896: LD_INT 10
19898: PUSH
19899: LD_INT 11
19901: PUSH
19902: LD_INT 12
19904: PUSH
19905: LD_INT 13
19907: PUSH
19908: LD_INT 14
19910: PUSH
19911: LD_INT 15
19913: PUSH
19914: LD_INT 16
19916: PUSH
19917: LD_INT 17
19919: PUSH
19920: LD_INT 18
19922: PUSH
19923: LD_INT 19
19925: PUSH
19926: LD_INT 20
19928: PUSH
19929: LD_INT 21
19931: PUSH
19932: LD_INT 22
19934: PUSH
19935: LD_INT 23
19937: PUSH
19938: LD_INT 24
19940: PUSH
19941: LD_INT 25
19943: PUSH
19944: LD_INT 26
19946: PUSH
19947: LD_INT 27
19949: PUSH
19950: LD_INT 28
19952: PUSH
19953: LD_INT 29
19955: PUSH
19956: LD_INT 30
19958: PUSH
19959: LD_INT 31
19961: PUSH
19962: LD_INT 32
19964: PUSH
19965: LD_INT 33
19967: PUSH
19968: LD_INT 34
19970: PUSH
19971: LD_INT 36
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 101
20013: PUSH
20014: LD_INT 102
20016: PUSH
20017: LD_INT 103
20019: PUSH
20020: LD_INT 104
20022: PUSH
20023: LD_INT 105
20025: PUSH
20026: LD_INT 106
20028: PUSH
20029: LD_INT 107
20031: PUSH
20032: LD_INT 108
20034: PUSH
20035: LD_INT 109
20037: PUSH
20038: LD_INT 110
20040: PUSH
20041: LD_INT 111
20043: PUSH
20044: LD_INT 112
20046: PUSH
20047: LD_INT 113
20049: PUSH
20050: LD_INT 114
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: ST_TO_ADDR
20073: GO 20448
20075: LD_INT 18
20077: DOUBLE
20078: EQUAL
20079: IFTRUE 20083
20081: GO 20219
20083: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
20084: LD_ADDR_VAR 0 1
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: LD_INT 4
20094: PUSH
20095: LD_INT 5
20097: PUSH
20098: LD_INT 7
20100: PUSH
20101: LD_INT 11
20103: PUSH
20104: LD_INT 12
20106: PUSH
20107: LD_INT 15
20109: PUSH
20110: LD_INT 16
20112: PUSH
20113: LD_INT 20
20115: PUSH
20116: LD_INT 21
20118: PUSH
20119: LD_INT 22
20121: PUSH
20122: LD_INT 23
20124: PUSH
20125: LD_INT 25
20127: PUSH
20128: LD_INT 26
20130: PUSH
20131: LD_INT 30
20133: PUSH
20134: LD_INT 31
20136: PUSH
20137: LD_INT 32
20139: PUSH
20140: LD_INT 33
20142: PUSH
20143: LD_INT 34
20145: PUSH
20146: LD_INT 35
20148: PUSH
20149: LD_INT 36
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 101
20177: PUSH
20178: LD_INT 102
20180: PUSH
20181: LD_INT 103
20183: PUSH
20184: LD_INT 106
20186: PUSH
20187: LD_INT 108
20189: PUSH
20190: LD_INT 112
20192: PUSH
20193: LD_INT 113
20195: PUSH
20196: LD_INT 114
20198: PUSH
20199: LD_INT 115
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: ST_TO_ADDR
20217: GO 20448
20219: LD_INT 19
20221: DOUBLE
20222: EQUAL
20223: IFTRUE 20227
20225: GO 20447
20227: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
20228: LD_ADDR_VAR 0 1
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: LD_INT 3
20241: PUSH
20242: LD_INT 4
20244: PUSH
20245: LD_INT 5
20247: PUSH
20248: LD_INT 6
20250: PUSH
20251: LD_INT 7
20253: PUSH
20254: LD_INT 8
20256: PUSH
20257: LD_INT 9
20259: PUSH
20260: LD_INT 10
20262: PUSH
20263: LD_INT 11
20265: PUSH
20266: LD_INT 12
20268: PUSH
20269: LD_INT 13
20271: PUSH
20272: LD_INT 14
20274: PUSH
20275: LD_INT 15
20277: PUSH
20278: LD_INT 16
20280: PUSH
20281: LD_INT 17
20283: PUSH
20284: LD_INT 18
20286: PUSH
20287: LD_INT 19
20289: PUSH
20290: LD_INT 20
20292: PUSH
20293: LD_INT 21
20295: PUSH
20296: LD_INT 22
20298: PUSH
20299: LD_INT 23
20301: PUSH
20302: LD_INT 24
20304: PUSH
20305: LD_INT 25
20307: PUSH
20308: LD_INT 26
20310: PUSH
20311: LD_INT 27
20313: PUSH
20314: LD_INT 28
20316: PUSH
20317: LD_INT 29
20319: PUSH
20320: LD_INT 30
20322: PUSH
20323: LD_INT 31
20325: PUSH
20326: LD_INT 32
20328: PUSH
20329: LD_INT 33
20331: PUSH
20332: LD_INT 34
20334: PUSH
20335: LD_INT 35
20337: PUSH
20338: LD_INT 36
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 101
20381: PUSH
20382: LD_INT 102
20384: PUSH
20385: LD_INT 103
20387: PUSH
20388: LD_INT 104
20390: PUSH
20391: LD_INT 105
20393: PUSH
20394: LD_INT 106
20396: PUSH
20397: LD_INT 107
20399: PUSH
20400: LD_INT 108
20402: PUSH
20403: LD_INT 109
20405: PUSH
20406: LD_INT 110
20408: PUSH
20409: LD_INT 111
20411: PUSH
20412: LD_INT 112
20414: PUSH
20415: LD_INT 113
20417: PUSH
20418: LD_INT 114
20420: PUSH
20421: LD_INT 115
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: ST_TO_ADDR
20445: GO 20448
20447: POP
// end else
20448: GO 20667
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
20450: LD_ADDR_VAR 0 1
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: LD_INT 2
20460: PUSH
20461: LD_INT 3
20463: PUSH
20464: LD_INT 4
20466: PUSH
20467: LD_INT 5
20469: PUSH
20470: LD_INT 6
20472: PUSH
20473: LD_INT 7
20475: PUSH
20476: LD_INT 8
20478: PUSH
20479: LD_INT 9
20481: PUSH
20482: LD_INT 10
20484: PUSH
20485: LD_INT 11
20487: PUSH
20488: LD_INT 12
20490: PUSH
20491: LD_INT 13
20493: PUSH
20494: LD_INT 14
20496: PUSH
20497: LD_INT 15
20499: PUSH
20500: LD_INT 16
20502: PUSH
20503: LD_INT 17
20505: PUSH
20506: LD_INT 18
20508: PUSH
20509: LD_INT 19
20511: PUSH
20512: LD_INT 20
20514: PUSH
20515: LD_INT 21
20517: PUSH
20518: LD_INT 22
20520: PUSH
20521: LD_INT 23
20523: PUSH
20524: LD_INT 24
20526: PUSH
20527: LD_INT 25
20529: PUSH
20530: LD_INT 26
20532: PUSH
20533: LD_INT 27
20535: PUSH
20536: LD_INT 28
20538: PUSH
20539: LD_INT 29
20541: PUSH
20542: LD_INT 30
20544: PUSH
20545: LD_INT 31
20547: PUSH
20548: LD_INT 32
20550: PUSH
20551: LD_INT 33
20553: PUSH
20554: LD_INT 34
20556: PUSH
20557: LD_INT 35
20559: PUSH
20560: LD_INT 36
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 101
20603: PUSH
20604: LD_INT 102
20606: PUSH
20607: LD_INT 103
20609: PUSH
20610: LD_INT 104
20612: PUSH
20613: LD_INT 105
20615: PUSH
20616: LD_INT 106
20618: PUSH
20619: LD_INT 107
20621: PUSH
20622: LD_INT 108
20624: PUSH
20625: LD_INT 109
20627: PUSH
20628: LD_INT 110
20630: PUSH
20631: LD_INT 111
20633: PUSH
20634: LD_INT 112
20636: PUSH
20637: LD_INT 113
20639: PUSH
20640: LD_INT 114
20642: PUSH
20643: LD_INT 115
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: ST_TO_ADDR
// if result then
20667: LD_VAR 0 1
20671: IFFALSE 20960
// begin normal :=  ;
20673: LD_ADDR_VAR 0 3
20677: PUSH
20678: LD_STRING 
20680: ST_TO_ADDR
// hardcore :=  ;
20681: LD_ADDR_VAR 0 4
20685: PUSH
20686: LD_STRING 
20688: ST_TO_ADDR
// for i = 1 to normalCounter do
20689: LD_ADDR_VAR 0 5
20693: PUSH
20694: DOUBLE
20695: LD_INT 1
20697: DEC
20698: ST_TO_ADDR
20699: LD_EXP 52
20703: PUSH
20704: FOR_TO
20705: IFFALSE 20806
// begin tmp := 0 ;
20707: LD_ADDR_VAR 0 2
20711: PUSH
20712: LD_STRING 0
20714: ST_TO_ADDR
// if result [ 1 ] then
20715: LD_VAR 0 1
20719: PUSH
20720: LD_INT 1
20722: ARRAY
20723: IFFALSE 20788
// if result [ 1 ] [ 1 ] = i then
20725: LD_VAR 0 1
20729: PUSH
20730: LD_INT 1
20732: ARRAY
20733: PUSH
20734: LD_INT 1
20736: ARRAY
20737: PUSH
20738: LD_VAR 0 5
20742: EQUAL
20743: IFFALSE 20788
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20745: LD_ADDR_VAR 0 1
20749: PUSH
20750: LD_VAR 0 1
20754: PPUSH
20755: LD_INT 1
20757: PPUSH
20758: LD_VAR 0 1
20762: PUSH
20763: LD_INT 1
20765: ARRAY
20766: PPUSH
20767: LD_INT 1
20769: PPUSH
20770: CALL_OW 3
20774: PPUSH
20775: CALL_OW 1
20779: ST_TO_ADDR
// tmp := 1 ;
20780: LD_ADDR_VAR 0 2
20784: PUSH
20785: LD_STRING 1
20787: ST_TO_ADDR
// end ; normal := normal & tmp ;
20788: LD_ADDR_VAR 0 3
20792: PUSH
20793: LD_VAR 0 3
20797: PUSH
20798: LD_VAR 0 2
20802: STR
20803: ST_TO_ADDR
// end ;
20804: GO 20704
20806: POP
20807: POP
// for i = 1 to hardcoreCounter do
20808: LD_ADDR_VAR 0 5
20812: PUSH
20813: DOUBLE
20814: LD_INT 1
20816: DEC
20817: ST_TO_ADDR
20818: LD_EXP 53
20822: PUSH
20823: FOR_TO
20824: IFFALSE 20929
// begin tmp := 0 ;
20826: LD_ADDR_VAR 0 2
20830: PUSH
20831: LD_STRING 0
20833: ST_TO_ADDR
// if result [ 2 ] then
20834: LD_VAR 0 1
20838: PUSH
20839: LD_INT 2
20841: ARRAY
20842: IFFALSE 20911
// if result [ 2 ] [ 1 ] = 100 + i then
20844: LD_VAR 0 1
20848: PUSH
20849: LD_INT 2
20851: ARRAY
20852: PUSH
20853: LD_INT 1
20855: ARRAY
20856: PUSH
20857: LD_INT 100
20859: PUSH
20860: LD_VAR 0 5
20864: PLUS
20865: EQUAL
20866: IFFALSE 20911
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20868: LD_ADDR_VAR 0 1
20872: PUSH
20873: LD_VAR 0 1
20877: PPUSH
20878: LD_INT 2
20880: PPUSH
20881: LD_VAR 0 1
20885: PUSH
20886: LD_INT 2
20888: ARRAY
20889: PPUSH
20890: LD_INT 1
20892: PPUSH
20893: CALL_OW 3
20897: PPUSH
20898: CALL_OW 1
20902: ST_TO_ADDR
// tmp := 1 ;
20903: LD_ADDR_VAR 0 2
20907: PUSH
20908: LD_STRING 1
20910: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20911: LD_ADDR_VAR 0 4
20915: PUSH
20916: LD_VAR 0 4
20920: PUSH
20921: LD_VAR 0 2
20925: STR
20926: ST_TO_ADDR
// end ;
20927: GO 20823
20929: POP
20930: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20931: LD_STRING getStreamItemsFromMission("
20933: PUSH
20934: LD_VAR 0 3
20938: STR
20939: PUSH
20940: LD_STRING ","
20942: STR
20943: PUSH
20944: LD_VAR 0 4
20948: STR
20949: PUSH
20950: LD_STRING ")
20952: STR
20953: PPUSH
20954: CALL_OW 559
// end else
20958: GO 20967
// ToLua ( getStreamItemsFromMission("","") ) ;
20960: LD_STRING getStreamItemsFromMission("","")
20962: PPUSH
20963: CALL_OW 559
// end ;
20967: LD_VAR 0 1
20971: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20972: LD_EXP 51
20976: PUSH
20977: LD_EXP 56
20981: AND
20982: IFFALSE 21106
20984: GO 20986
20986: DISABLE
20987: LD_INT 0
20989: PPUSH
20990: PPUSH
// begin enable ;
20991: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20992: LD_ADDR_VAR 0 2
20996: PUSH
20997: LD_INT 22
20999: PUSH
21000: LD_OWVAR 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 2
21011: PUSH
21012: LD_INT 34
21014: PUSH
21015: LD_INT 7
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 34
21024: PUSH
21025: LD_INT 45
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 34
21034: PUSH
21035: LD_INT 28
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 34
21044: PUSH
21045: LD_INT 47
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PPUSH
21063: CALL_OW 69
21067: ST_TO_ADDR
// if not tmp then
21068: LD_VAR 0 2
21072: NOT
21073: IFFALSE 21077
// exit ;
21075: GO 21106
// for i in tmp do
21077: LD_ADDR_VAR 0 1
21081: PUSH
21082: LD_VAR 0 2
21086: PUSH
21087: FOR_IN
21088: IFFALSE 21104
// begin SetLives ( i , 0 ) ;
21090: LD_VAR 0 1
21094: PPUSH
21095: LD_INT 0
21097: PPUSH
21098: CALL_OW 234
// end ;
21102: GO 21087
21104: POP
21105: POP
// end ;
21106: PPOPN 2
21108: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21109: LD_EXP 51
21113: PUSH
21114: LD_EXP 57
21118: AND
21119: IFFALSE 21203
21121: GO 21123
21123: DISABLE
21124: LD_INT 0
21126: PPUSH
21127: PPUSH
// begin enable ;
21128: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21129: LD_ADDR_VAR 0 2
21133: PUSH
21134: LD_INT 22
21136: PUSH
21137: LD_OWVAR 2
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 32
21148: PUSH
21149: LD_INT 3
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PPUSH
21160: CALL_OW 69
21164: ST_TO_ADDR
// if not tmp then
21165: LD_VAR 0 2
21169: NOT
21170: IFFALSE 21174
// exit ;
21172: GO 21203
// for i in tmp do
21174: LD_ADDR_VAR 0 1
21178: PUSH
21179: LD_VAR 0 2
21183: PUSH
21184: FOR_IN
21185: IFFALSE 21201
// begin SetLives ( i , 0 ) ;
21187: LD_VAR 0 1
21191: PPUSH
21192: LD_INT 0
21194: PPUSH
21195: CALL_OW 234
// end ;
21199: GO 21184
21201: POP
21202: POP
// end ;
21203: PPOPN 2
21205: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21206: LD_EXP 51
21210: PUSH
21211: LD_EXP 54
21215: AND
21216: IFFALSE 21309
21218: GO 21220
21220: DISABLE
21221: LD_INT 0
21223: PPUSH
// begin enable ;
21224: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21225: LD_ADDR_VAR 0 1
21229: PUSH
21230: LD_INT 22
21232: PUSH
21233: LD_OWVAR 2
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 2
21244: PUSH
21245: LD_INT 25
21247: PUSH
21248: LD_INT 5
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 25
21257: PUSH
21258: LD_INT 9
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 25
21267: PUSH
21268: LD_INT 8
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PPUSH
21285: CALL_OW 69
21289: PUSH
21290: FOR_IN
21291: IFFALSE 21307
// begin SetClass ( i , 1 ) ;
21293: LD_VAR 0 1
21297: PPUSH
21298: LD_INT 1
21300: PPUSH
21301: CALL_OW 336
// end ;
21305: GO 21290
21307: POP
21308: POP
// end ;
21309: PPOPN 1
21311: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21312: LD_EXP 51
21316: PUSH
21317: LD_EXP 55
21321: AND
21322: PUSH
21323: LD_OWVAR 65
21327: PUSH
21328: LD_INT 7
21330: LESS
21331: AND
21332: IFFALSE 21346
21334: GO 21336
21336: DISABLE
// begin enable ;
21337: ENABLE
// game_speed := 7 ;
21338: LD_ADDR_OWVAR 65
21342: PUSH
21343: LD_INT 7
21345: ST_TO_ADDR
// end ;
21346: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21347: LD_EXP 51
21351: PUSH
21352: LD_EXP 58
21356: AND
21357: IFFALSE 21559
21359: GO 21361
21361: DISABLE
21362: LD_INT 0
21364: PPUSH
21365: PPUSH
21366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21367: LD_ADDR_VAR 0 3
21371: PUSH
21372: LD_INT 81
21374: PUSH
21375: LD_OWVAR 2
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 21
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PPUSH
21398: CALL_OW 69
21402: ST_TO_ADDR
// if not tmp then
21403: LD_VAR 0 3
21407: NOT
21408: IFFALSE 21412
// exit ;
21410: GO 21559
// if tmp > 5 then
21412: LD_VAR 0 3
21416: PUSH
21417: LD_INT 5
21419: GREATER
21420: IFFALSE 21432
// k := 5 else
21422: LD_ADDR_VAR 0 2
21426: PUSH
21427: LD_INT 5
21429: ST_TO_ADDR
21430: GO 21442
// k := tmp ;
21432: LD_ADDR_VAR 0 2
21436: PUSH
21437: LD_VAR 0 3
21441: ST_TO_ADDR
// for i := 1 to k do
21442: LD_ADDR_VAR 0 1
21446: PUSH
21447: DOUBLE
21448: LD_INT 1
21450: DEC
21451: ST_TO_ADDR
21452: LD_VAR 0 2
21456: PUSH
21457: FOR_TO
21458: IFFALSE 21557
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21460: LD_VAR 0 3
21464: PUSH
21465: LD_VAR 0 1
21469: ARRAY
21470: PPUSH
21471: LD_VAR 0 1
21475: PUSH
21476: LD_INT 4
21478: MOD
21479: PUSH
21480: LD_INT 1
21482: PLUS
21483: PPUSH
21484: CALL_OW 259
21488: PUSH
21489: LD_INT 10
21491: LESS
21492: IFFALSE 21555
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21494: LD_VAR 0 3
21498: PUSH
21499: LD_VAR 0 1
21503: ARRAY
21504: PPUSH
21505: LD_VAR 0 1
21509: PUSH
21510: LD_INT 4
21512: MOD
21513: PUSH
21514: LD_INT 1
21516: PLUS
21517: PPUSH
21518: LD_VAR 0 3
21522: PUSH
21523: LD_VAR 0 1
21527: ARRAY
21528: PPUSH
21529: LD_VAR 0 1
21533: PUSH
21534: LD_INT 4
21536: MOD
21537: PUSH
21538: LD_INT 1
21540: PLUS
21541: PPUSH
21542: CALL_OW 259
21546: PUSH
21547: LD_INT 1
21549: PLUS
21550: PPUSH
21551: CALL_OW 237
21555: GO 21457
21557: POP
21558: POP
// end ;
21559: PPOPN 3
21561: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21562: LD_EXP 51
21566: PUSH
21567: LD_EXP 59
21571: AND
21572: IFFALSE 21592
21574: GO 21576
21576: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21577: LD_INT 4
21579: PPUSH
21580: LD_OWVAR 2
21584: PPUSH
21585: LD_INT 0
21587: PPUSH
21588: CALL_OW 324
21592: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21593: LD_EXP 51
21597: PUSH
21598: LD_EXP 88
21602: AND
21603: IFFALSE 21623
21605: GO 21607
21607: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21608: LD_INT 19
21610: PPUSH
21611: LD_OWVAR 2
21615: PPUSH
21616: LD_INT 0
21618: PPUSH
21619: CALL_OW 324
21623: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21624: LD_EXP 51
21628: PUSH
21629: LD_EXP 60
21633: AND
21634: IFFALSE 21736
21636: GO 21638
21638: DISABLE
21639: LD_INT 0
21641: PPUSH
21642: PPUSH
// begin enable ;
21643: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21644: LD_ADDR_VAR 0 2
21648: PUSH
21649: LD_INT 22
21651: PUSH
21652: LD_OWVAR 2
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 2
21663: PUSH
21664: LD_INT 34
21666: PUSH
21667: LD_INT 11
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 34
21676: PUSH
21677: LD_INT 30
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: LIST
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PPUSH
21693: CALL_OW 69
21697: ST_TO_ADDR
// if not tmp then
21698: LD_VAR 0 2
21702: NOT
21703: IFFALSE 21707
// exit ;
21705: GO 21736
// for i in tmp do
21707: LD_ADDR_VAR 0 1
21711: PUSH
21712: LD_VAR 0 2
21716: PUSH
21717: FOR_IN
21718: IFFALSE 21734
// begin SetLives ( i , 0 ) ;
21720: LD_VAR 0 1
21724: PPUSH
21725: LD_INT 0
21727: PPUSH
21728: CALL_OW 234
// end ;
21732: GO 21717
21734: POP
21735: POP
// end ;
21736: PPOPN 2
21738: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21739: LD_EXP 51
21743: PUSH
21744: LD_EXP 61
21748: AND
21749: IFFALSE 21769
21751: GO 21753
21753: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21754: LD_INT 32
21756: PPUSH
21757: LD_OWVAR 2
21761: PPUSH
21762: LD_INT 0
21764: PPUSH
21765: CALL_OW 324
21769: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21770: LD_EXP 51
21774: PUSH
21775: LD_EXP 62
21779: AND
21780: IFFALSE 21961
21782: GO 21784
21784: DISABLE
21785: LD_INT 0
21787: PPUSH
21788: PPUSH
21789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21790: LD_ADDR_VAR 0 2
21794: PUSH
21795: LD_INT 22
21797: PUSH
21798: LD_OWVAR 2
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 33
21809: PUSH
21810: LD_INT 3
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PPUSH
21821: CALL_OW 69
21825: ST_TO_ADDR
// if not tmp then
21826: LD_VAR 0 2
21830: NOT
21831: IFFALSE 21835
// exit ;
21833: GO 21961
// side := 0 ;
21835: LD_ADDR_VAR 0 3
21839: PUSH
21840: LD_INT 0
21842: ST_TO_ADDR
// for i := 1 to 8 do
21843: LD_ADDR_VAR 0 1
21847: PUSH
21848: DOUBLE
21849: LD_INT 1
21851: DEC
21852: ST_TO_ADDR
21853: LD_INT 8
21855: PUSH
21856: FOR_TO
21857: IFFALSE 21905
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21859: LD_OWVAR 2
21863: PUSH
21864: LD_VAR 0 1
21868: NONEQUAL
21869: PUSH
21870: LD_OWVAR 2
21874: PPUSH
21875: LD_VAR 0 1
21879: PPUSH
21880: CALL_OW 81
21884: PUSH
21885: LD_INT 2
21887: EQUAL
21888: AND
21889: IFFALSE 21903
// begin side := i ;
21891: LD_ADDR_VAR 0 3
21895: PUSH
21896: LD_VAR 0 1
21900: ST_TO_ADDR
// break ;
21901: GO 21905
// end ;
21903: GO 21856
21905: POP
21906: POP
// if not side then
21907: LD_VAR 0 3
21911: NOT
21912: IFFALSE 21916
// exit ;
21914: GO 21961
// for i := 1 to tmp do
21916: LD_ADDR_VAR 0 1
21920: PUSH
21921: DOUBLE
21922: LD_INT 1
21924: DEC
21925: ST_TO_ADDR
21926: LD_VAR 0 2
21930: PUSH
21931: FOR_TO
21932: IFFALSE 21959
// if Prob ( 60 ) then
21934: LD_INT 60
21936: PPUSH
21937: CALL_OW 13
21941: IFFALSE 21957
// SetSide ( i , side ) ;
21943: LD_VAR 0 1
21947: PPUSH
21948: LD_VAR 0 3
21952: PPUSH
21953: CALL_OW 235
21957: GO 21931
21959: POP
21960: POP
// end ;
21961: PPOPN 3
21963: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21964: LD_EXP 51
21968: PUSH
21969: LD_EXP 64
21973: AND
21974: IFFALSE 22093
21976: GO 21978
21978: DISABLE
21979: LD_INT 0
21981: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21982: LD_ADDR_VAR 0 1
21986: PUSH
21987: LD_INT 22
21989: PUSH
21990: LD_OWVAR 2
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 21
22001: PUSH
22002: LD_INT 1
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 3
22011: PUSH
22012: LD_INT 23
22014: PUSH
22015: LD_INT 0
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: LIST
22030: PPUSH
22031: CALL_OW 69
22035: PUSH
22036: FOR_IN
22037: IFFALSE 22091
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22039: LD_VAR 0 1
22043: PPUSH
22044: CALL_OW 257
22048: PUSH
22049: LD_INT 1
22051: PUSH
22052: LD_INT 2
22054: PUSH
22055: LD_INT 3
22057: PUSH
22058: LD_INT 4
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: IN
22067: IFFALSE 22089
// SetClass ( un , rand ( 1 , 4 ) ) ;
22069: LD_VAR 0 1
22073: PPUSH
22074: LD_INT 1
22076: PPUSH
22077: LD_INT 4
22079: PPUSH
22080: CALL_OW 12
22084: PPUSH
22085: CALL_OW 336
22089: GO 22036
22091: POP
22092: POP
// end ;
22093: PPOPN 1
22095: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22096: LD_EXP 51
22100: PUSH
22101: LD_EXP 63
22105: AND
22106: IFFALSE 22185
22108: GO 22110
22110: DISABLE
22111: LD_INT 0
22113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22114: LD_ADDR_VAR 0 1
22118: PUSH
22119: LD_INT 22
22121: PUSH
22122: LD_OWVAR 2
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 21
22133: PUSH
22134: LD_INT 3
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PPUSH
22145: CALL_OW 69
22149: ST_TO_ADDR
// if not tmp then
22150: LD_VAR 0 1
22154: NOT
22155: IFFALSE 22159
// exit ;
22157: GO 22185
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22159: LD_VAR 0 1
22163: PUSH
22164: LD_INT 1
22166: PPUSH
22167: LD_VAR 0 1
22171: PPUSH
22172: CALL_OW 12
22176: ARRAY
22177: PPUSH
22178: LD_INT 100
22180: PPUSH
22181: CALL_OW 234
// end ;
22185: PPOPN 1
22187: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22188: LD_EXP 51
22192: PUSH
22193: LD_EXP 65
22197: AND
22198: IFFALSE 22296
22200: GO 22202
22202: DISABLE
22203: LD_INT 0
22205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22206: LD_ADDR_VAR 0 1
22210: PUSH
22211: LD_INT 22
22213: PUSH
22214: LD_OWVAR 2
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 21
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PPUSH
22237: CALL_OW 69
22241: ST_TO_ADDR
// if not tmp then
22242: LD_VAR 0 1
22246: NOT
22247: IFFALSE 22251
// exit ;
22249: GO 22296
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22251: LD_VAR 0 1
22255: PUSH
22256: LD_INT 1
22258: PPUSH
22259: LD_VAR 0 1
22263: PPUSH
22264: CALL_OW 12
22268: ARRAY
22269: PPUSH
22270: LD_INT 1
22272: PPUSH
22273: LD_INT 4
22275: PPUSH
22276: CALL_OW 12
22280: PPUSH
22281: LD_INT 3000
22283: PPUSH
22284: LD_INT 9000
22286: PPUSH
22287: CALL_OW 12
22291: PPUSH
22292: CALL_OW 492
// end ;
22296: PPOPN 1
22298: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22299: LD_EXP 51
22303: PUSH
22304: LD_EXP 66
22308: AND
22309: IFFALSE 22329
22311: GO 22313
22313: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22314: LD_INT 1
22316: PPUSH
22317: LD_OWVAR 2
22321: PPUSH
22322: LD_INT 0
22324: PPUSH
22325: CALL_OW 324
22329: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22330: LD_EXP 51
22334: PUSH
22335: LD_EXP 67
22339: AND
22340: IFFALSE 22423
22342: GO 22344
22344: DISABLE
22345: LD_INT 0
22347: PPUSH
22348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22349: LD_ADDR_VAR 0 2
22353: PUSH
22354: LD_INT 22
22356: PUSH
22357: LD_OWVAR 2
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 21
22368: PUSH
22369: LD_INT 3
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PPUSH
22380: CALL_OW 69
22384: ST_TO_ADDR
// if not tmp then
22385: LD_VAR 0 2
22389: NOT
22390: IFFALSE 22394
// exit ;
22392: GO 22423
// for i in tmp do
22394: LD_ADDR_VAR 0 1
22398: PUSH
22399: LD_VAR 0 2
22403: PUSH
22404: FOR_IN
22405: IFFALSE 22421
// SetBLevel ( i , 10 ) ;
22407: LD_VAR 0 1
22411: PPUSH
22412: LD_INT 10
22414: PPUSH
22415: CALL_OW 241
22419: GO 22404
22421: POP
22422: POP
// end ;
22423: PPOPN 2
22425: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22426: LD_EXP 51
22430: PUSH
22431: LD_EXP 68
22435: AND
22436: IFFALSE 22547
22438: GO 22440
22440: DISABLE
22441: LD_INT 0
22443: PPUSH
22444: PPUSH
22445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22446: LD_ADDR_VAR 0 3
22450: PUSH
22451: LD_INT 22
22453: PUSH
22454: LD_OWVAR 2
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 25
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PPUSH
22477: CALL_OW 69
22481: ST_TO_ADDR
// if not tmp then
22482: LD_VAR 0 3
22486: NOT
22487: IFFALSE 22491
// exit ;
22489: GO 22547
// un := tmp [ rand ( 1 , tmp ) ] ;
22491: LD_ADDR_VAR 0 2
22495: PUSH
22496: LD_VAR 0 3
22500: PUSH
22501: LD_INT 1
22503: PPUSH
22504: LD_VAR 0 3
22508: PPUSH
22509: CALL_OW 12
22513: ARRAY
22514: ST_TO_ADDR
// if Crawls ( un ) then
22515: LD_VAR 0 2
22519: PPUSH
22520: CALL_OW 318
22524: IFFALSE 22535
// ComWalk ( un ) ;
22526: LD_VAR 0 2
22530: PPUSH
22531: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22535: LD_VAR 0 2
22539: PPUSH
22540: LD_INT 5
22542: PPUSH
22543: CALL_OW 336
// end ;
22547: PPOPN 3
22549: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
22550: LD_EXP 51
22554: PUSH
22555: LD_EXP 69
22559: AND
22560: PUSH
22561: LD_OWVAR 67
22565: PUSH
22566: LD_INT 3
22568: LESS
22569: AND
22570: IFFALSE 22589
22572: GO 22574
22574: DISABLE
// Difficulty := Difficulty + 1 ;
22575: LD_ADDR_OWVAR 67
22579: PUSH
22580: LD_OWVAR 67
22584: PUSH
22585: LD_INT 1
22587: PLUS
22588: ST_TO_ADDR
22589: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22590: LD_EXP 51
22594: PUSH
22595: LD_EXP 70
22599: AND
22600: IFFALSE 22703
22602: GO 22604
22604: DISABLE
22605: LD_INT 0
22607: PPUSH
// begin for i := 1 to 5 do
22608: LD_ADDR_VAR 0 1
22612: PUSH
22613: DOUBLE
22614: LD_INT 1
22616: DEC
22617: ST_TO_ADDR
22618: LD_INT 5
22620: PUSH
22621: FOR_TO
22622: IFFALSE 22701
// begin uc_nation := nation_nature ;
22624: LD_ADDR_OWVAR 21
22628: PUSH
22629: LD_INT 0
22631: ST_TO_ADDR
// uc_side := 0 ;
22632: LD_ADDR_OWVAR 20
22636: PUSH
22637: LD_INT 0
22639: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22640: LD_ADDR_OWVAR 29
22644: PUSH
22645: LD_INT 12
22647: PUSH
22648: LD_INT 12
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: ST_TO_ADDR
// hc_agressivity := 20 ;
22655: LD_ADDR_OWVAR 35
22659: PUSH
22660: LD_INT 20
22662: ST_TO_ADDR
// hc_class := class_tiger ;
22663: LD_ADDR_OWVAR 28
22667: PUSH
22668: LD_INT 14
22670: ST_TO_ADDR
// hc_gallery :=  ;
22671: LD_ADDR_OWVAR 33
22675: PUSH
22676: LD_STRING 
22678: ST_TO_ADDR
// hc_name :=  ;
22679: LD_ADDR_OWVAR 26
22683: PUSH
22684: LD_STRING 
22686: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22687: CALL_OW 44
22691: PPUSH
22692: LD_INT 0
22694: PPUSH
22695: CALL_OW 51
// end ;
22699: GO 22621
22701: POP
22702: POP
// end ;
22703: PPOPN 1
22705: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22706: LD_EXP 51
22710: PUSH
22711: LD_EXP 71
22715: AND
22716: IFFALSE 22725
22718: GO 22720
22720: DISABLE
// StreamSibBomb ;
22721: CALL 22726 0 0
22725: END
// export function StreamSibBomb ; var i , x , y ; begin
22726: LD_INT 0
22728: PPUSH
22729: PPUSH
22730: PPUSH
22731: PPUSH
// result := false ;
22732: LD_ADDR_VAR 0 1
22736: PUSH
22737: LD_INT 0
22739: ST_TO_ADDR
// for i := 1 to 16 do
22740: LD_ADDR_VAR 0 2
22744: PUSH
22745: DOUBLE
22746: LD_INT 1
22748: DEC
22749: ST_TO_ADDR
22750: LD_INT 16
22752: PUSH
22753: FOR_TO
22754: IFFALSE 22953
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22756: LD_ADDR_VAR 0 3
22760: PUSH
22761: LD_INT 10
22763: PUSH
22764: LD_INT 20
22766: PUSH
22767: LD_INT 30
22769: PUSH
22770: LD_INT 40
22772: PUSH
22773: LD_INT 50
22775: PUSH
22776: LD_INT 60
22778: PUSH
22779: LD_INT 70
22781: PUSH
22782: LD_INT 80
22784: PUSH
22785: LD_INT 90
22787: PUSH
22788: LD_INT 100
22790: PUSH
22791: LD_INT 110
22793: PUSH
22794: LD_INT 120
22796: PUSH
22797: LD_INT 130
22799: PUSH
22800: LD_INT 140
22802: PUSH
22803: LD_INT 150
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 1
22825: PPUSH
22826: LD_INT 15
22828: PPUSH
22829: CALL_OW 12
22833: ARRAY
22834: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22835: LD_ADDR_VAR 0 4
22839: PUSH
22840: LD_INT 10
22842: PUSH
22843: LD_INT 20
22845: PUSH
22846: LD_INT 30
22848: PUSH
22849: LD_INT 40
22851: PUSH
22852: LD_INT 50
22854: PUSH
22855: LD_INT 60
22857: PUSH
22858: LD_INT 70
22860: PUSH
22861: LD_INT 80
22863: PUSH
22864: LD_INT 90
22866: PUSH
22867: LD_INT 100
22869: PUSH
22870: LD_INT 110
22872: PUSH
22873: LD_INT 120
22875: PUSH
22876: LD_INT 130
22878: PUSH
22879: LD_INT 140
22881: PUSH
22882: LD_INT 150
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 1
22904: PPUSH
22905: LD_INT 15
22907: PPUSH
22908: CALL_OW 12
22912: ARRAY
22913: ST_TO_ADDR
// if ValidHex ( x , y ) then
22914: LD_VAR 0 3
22918: PPUSH
22919: LD_VAR 0 4
22923: PPUSH
22924: CALL_OW 488
22928: IFFALSE 22951
// begin result := [ x , y ] ;
22930: LD_ADDR_VAR 0 1
22934: PUSH
22935: LD_VAR 0 3
22939: PUSH
22940: LD_VAR 0 4
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: ST_TO_ADDR
// break ;
22949: GO 22953
// end ; end ;
22951: GO 22753
22953: POP
22954: POP
// if result then
22955: LD_VAR 0 1
22959: IFFALSE 23019
// begin ToLua ( playSibBomb() ) ;
22961: LD_STRING playSibBomb()
22963: PPUSH
22964: CALL_OW 559
// wait ( 0 0$14 ) ;
22968: LD_INT 490
22970: PPUSH
22971: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22975: LD_VAR 0 1
22979: PUSH
22980: LD_INT 1
22982: ARRAY
22983: PPUSH
22984: LD_VAR 0 1
22988: PUSH
22989: LD_INT 2
22991: ARRAY
22992: PPUSH
22993: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22997: LD_VAR 0 1
23001: PUSH
23002: LD_INT 1
23004: ARRAY
23005: PPUSH
23006: LD_VAR 0 1
23010: PUSH
23011: LD_INT 2
23013: ARRAY
23014: PPUSH
23015: CALL_OW 429
// end ; end ;
23019: LD_VAR 0 1
23023: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23024: LD_EXP 51
23028: PUSH
23029: LD_EXP 73
23033: AND
23034: IFFALSE 23046
23036: GO 23038
23038: DISABLE
// YouLost (  ) ;
23039: LD_STRING 
23041: PPUSH
23042: CALL_OW 104
23046: END
// every 0 0$1 trigger StreamModeActive and sFog do
23047: LD_EXP 51
23051: PUSH
23052: LD_EXP 72
23056: AND
23057: IFFALSE 23071
23059: GO 23061
23061: DISABLE
// FogOff ( your_side ) ;
23062: LD_OWVAR 2
23066: PPUSH
23067: CALL_OW 344
23071: END
// every 0 0$1 trigger StreamModeActive and sSun do
23072: LD_EXP 51
23076: PUSH
23077: LD_EXP 74
23081: AND
23082: IFFALSE 23110
23084: GO 23086
23086: DISABLE
// begin solar_recharge_percent := 0 ;
23087: LD_ADDR_OWVAR 79
23091: PUSH
23092: LD_INT 0
23094: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23095: LD_INT 10500
23097: PPUSH
23098: CALL_OW 67
// solar_recharge_percent := 100 ;
23102: LD_ADDR_OWVAR 79
23106: PUSH
23107: LD_INT 100
23109: ST_TO_ADDR
// end ;
23110: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23111: LD_EXP 51
23115: PUSH
23116: LD_EXP 75
23120: AND
23121: IFFALSE 23360
23123: GO 23125
23125: DISABLE
23126: LD_INT 0
23128: PPUSH
23129: PPUSH
23130: PPUSH
// begin tmp := [ ] ;
23131: LD_ADDR_VAR 0 3
23135: PUSH
23136: EMPTY
23137: ST_TO_ADDR
// for i := 1 to 6 do
23138: LD_ADDR_VAR 0 1
23142: PUSH
23143: DOUBLE
23144: LD_INT 1
23146: DEC
23147: ST_TO_ADDR
23148: LD_INT 6
23150: PUSH
23151: FOR_TO
23152: IFFALSE 23257
// begin uc_nation := nation_nature ;
23154: LD_ADDR_OWVAR 21
23158: PUSH
23159: LD_INT 0
23161: ST_TO_ADDR
// uc_side := 0 ;
23162: LD_ADDR_OWVAR 20
23166: PUSH
23167: LD_INT 0
23169: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23170: LD_ADDR_OWVAR 29
23174: PUSH
23175: LD_INT 12
23177: PUSH
23178: LD_INT 12
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: ST_TO_ADDR
// hc_agressivity := 20 ;
23185: LD_ADDR_OWVAR 35
23189: PUSH
23190: LD_INT 20
23192: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23193: LD_ADDR_OWVAR 28
23197: PUSH
23198: LD_INT 17
23200: ST_TO_ADDR
// hc_gallery :=  ;
23201: LD_ADDR_OWVAR 33
23205: PUSH
23206: LD_STRING 
23208: ST_TO_ADDR
// hc_name :=  ;
23209: LD_ADDR_OWVAR 26
23213: PUSH
23214: LD_STRING 
23216: ST_TO_ADDR
// un := CreateHuman ;
23217: LD_ADDR_VAR 0 2
23221: PUSH
23222: CALL_OW 44
23226: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23227: LD_VAR 0 2
23231: PPUSH
23232: LD_INT 1
23234: PPUSH
23235: CALL_OW 51
// tmp := tmp ^ un ;
23239: LD_ADDR_VAR 0 3
23243: PUSH
23244: LD_VAR 0 3
23248: PUSH
23249: LD_VAR 0 2
23253: ADD
23254: ST_TO_ADDR
// end ;
23255: GO 23151
23257: POP
23258: POP
// repeat wait ( 0 0$1 ) ;
23259: LD_INT 35
23261: PPUSH
23262: CALL_OW 67
// for un in tmp do
23266: LD_ADDR_VAR 0 2
23270: PUSH
23271: LD_VAR 0 3
23275: PUSH
23276: FOR_IN
23277: IFFALSE 23351
// begin if IsDead ( un ) then
23279: LD_VAR 0 2
23283: PPUSH
23284: CALL_OW 301
23288: IFFALSE 23308
// begin tmp := tmp diff un ;
23290: LD_ADDR_VAR 0 3
23294: PUSH
23295: LD_VAR 0 3
23299: PUSH
23300: LD_VAR 0 2
23304: DIFF
23305: ST_TO_ADDR
// continue ;
23306: GO 23276
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23308: LD_VAR 0 2
23312: PPUSH
23313: LD_INT 3
23315: PUSH
23316: LD_INT 22
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PPUSH
23330: CALL_OW 69
23334: PPUSH
23335: LD_VAR 0 2
23339: PPUSH
23340: CALL_OW 74
23344: PPUSH
23345: CALL_OW 115
// end ;
23349: GO 23276
23351: POP
23352: POP
// until not tmp ;
23353: LD_VAR 0 3
23357: NOT
23358: IFFALSE 23259
// end ;
23360: PPOPN 3
23362: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23363: LD_EXP 51
23367: PUSH
23368: LD_EXP 76
23372: AND
23373: IFFALSE 23427
23375: GO 23377
23377: DISABLE
// begin ToLua ( displayTroll(); ) ;
23378: LD_STRING displayTroll();
23380: PPUSH
23381: CALL_OW 559
// wait ( 3 3$00 ) ;
23385: LD_INT 6300
23387: PPUSH
23388: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23392: LD_STRING hideTroll();
23394: PPUSH
23395: CALL_OW 559
// wait ( 1 1$00 ) ;
23399: LD_INT 2100
23401: PPUSH
23402: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23406: LD_STRING displayTroll();
23408: PPUSH
23409: CALL_OW 559
// wait ( 1 1$00 ) ;
23413: LD_INT 2100
23415: PPUSH
23416: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23420: LD_STRING hideTroll();
23422: PPUSH
23423: CALL_OW 559
// end ;
23427: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23428: LD_EXP 51
23432: PUSH
23433: LD_EXP 77
23437: AND
23438: IFFALSE 23501
23440: GO 23442
23442: DISABLE
23443: LD_INT 0
23445: PPUSH
// begin p := 0 ;
23446: LD_ADDR_VAR 0 1
23450: PUSH
23451: LD_INT 0
23453: ST_TO_ADDR
// repeat game_speed := 1 ;
23454: LD_ADDR_OWVAR 65
23458: PUSH
23459: LD_INT 1
23461: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23462: LD_INT 35
23464: PPUSH
23465: CALL_OW 67
// p := p + 1 ;
23469: LD_ADDR_VAR 0 1
23473: PUSH
23474: LD_VAR 0 1
23478: PUSH
23479: LD_INT 1
23481: PLUS
23482: ST_TO_ADDR
// until p >= 60 ;
23483: LD_VAR 0 1
23487: PUSH
23488: LD_INT 60
23490: GREATEREQUAL
23491: IFFALSE 23454
// game_speed := 4 ;
23493: LD_ADDR_OWVAR 65
23497: PUSH
23498: LD_INT 4
23500: ST_TO_ADDR
// end ;
23501: PPOPN 1
23503: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23504: LD_EXP 51
23508: PUSH
23509: LD_EXP 78
23513: AND
23514: IFFALSE 23660
23516: GO 23518
23518: DISABLE
23519: LD_INT 0
23521: PPUSH
23522: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23523: LD_ADDR_VAR 0 1
23527: PUSH
23528: LD_INT 22
23530: PUSH
23531: LD_OWVAR 2
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 2
23542: PUSH
23543: LD_INT 30
23545: PUSH
23546: LD_INT 0
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 30
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: LIST
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PPUSH
23572: CALL_OW 69
23576: ST_TO_ADDR
// if not depot then
23577: LD_VAR 0 1
23581: NOT
23582: IFFALSE 23586
// exit ;
23584: GO 23660
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23586: LD_ADDR_VAR 0 2
23590: PUSH
23591: LD_VAR 0 1
23595: PUSH
23596: LD_INT 1
23598: PPUSH
23599: LD_VAR 0 1
23603: PPUSH
23604: CALL_OW 12
23608: ARRAY
23609: PPUSH
23610: CALL_OW 274
23614: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23615: LD_VAR 0 2
23619: PPUSH
23620: LD_INT 1
23622: PPUSH
23623: LD_INT 0
23625: PPUSH
23626: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23630: LD_VAR 0 2
23634: PPUSH
23635: LD_INT 2
23637: PPUSH
23638: LD_INT 0
23640: PPUSH
23641: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23645: LD_VAR 0 2
23649: PPUSH
23650: LD_INT 3
23652: PPUSH
23653: LD_INT 0
23655: PPUSH
23656: CALL_OW 277
// end ;
23660: PPOPN 2
23662: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23663: LD_EXP 51
23667: PUSH
23668: LD_EXP 79
23672: AND
23673: IFFALSE 23770
23675: GO 23677
23677: DISABLE
23678: LD_INT 0
23680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23681: LD_ADDR_VAR 0 1
23685: PUSH
23686: LD_INT 22
23688: PUSH
23689: LD_OWVAR 2
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 21
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 3
23710: PUSH
23711: LD_INT 23
23713: PUSH
23714: LD_INT 0
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: LIST
23729: PPUSH
23730: CALL_OW 69
23734: ST_TO_ADDR
// if not tmp then
23735: LD_VAR 0 1
23739: NOT
23740: IFFALSE 23744
// exit ;
23742: GO 23770
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23744: LD_VAR 0 1
23748: PUSH
23749: LD_INT 1
23751: PPUSH
23752: LD_VAR 0 1
23756: PPUSH
23757: CALL_OW 12
23761: ARRAY
23762: PPUSH
23763: LD_INT 200
23765: PPUSH
23766: CALL_OW 234
// end ;
23770: PPOPN 1
23772: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23773: LD_EXP 51
23777: PUSH
23778: LD_EXP 80
23782: AND
23783: IFFALSE 23862
23785: GO 23787
23787: DISABLE
23788: LD_INT 0
23790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23791: LD_ADDR_VAR 0 1
23795: PUSH
23796: LD_INT 22
23798: PUSH
23799: LD_OWVAR 2
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 21
23810: PUSH
23811: LD_INT 2
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PPUSH
23822: CALL_OW 69
23826: ST_TO_ADDR
// if not tmp then
23827: LD_VAR 0 1
23831: NOT
23832: IFFALSE 23836
// exit ;
23834: GO 23862
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23836: LD_VAR 0 1
23840: PUSH
23841: LD_INT 1
23843: PPUSH
23844: LD_VAR 0 1
23848: PPUSH
23849: CALL_OW 12
23853: ARRAY
23854: PPUSH
23855: LD_INT 60
23857: PPUSH
23858: CALL_OW 234
// end ;
23862: PPOPN 1
23864: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23865: LD_EXP 51
23869: PUSH
23870: LD_EXP 81
23874: AND
23875: IFFALSE 23974
23877: GO 23879
23879: DISABLE
23880: LD_INT 0
23882: PPUSH
23883: PPUSH
// begin enable ;
23884: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23885: LD_ADDR_VAR 0 1
23889: PUSH
23890: LD_INT 22
23892: PUSH
23893: LD_OWVAR 2
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 61
23904: PUSH
23905: EMPTY
23906: LIST
23907: PUSH
23908: LD_INT 33
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: LIST
23922: PPUSH
23923: CALL_OW 69
23927: ST_TO_ADDR
// if not tmp then
23928: LD_VAR 0 1
23932: NOT
23933: IFFALSE 23937
// exit ;
23935: GO 23974
// for i in tmp do
23937: LD_ADDR_VAR 0 2
23941: PUSH
23942: LD_VAR 0 1
23946: PUSH
23947: FOR_IN
23948: IFFALSE 23972
// if IsControledBy ( i ) then
23950: LD_VAR 0 2
23954: PPUSH
23955: CALL_OW 312
23959: IFFALSE 23970
// ComUnlink ( i ) ;
23961: LD_VAR 0 2
23965: PPUSH
23966: CALL_OW 136
23970: GO 23947
23972: POP
23973: POP
// end ;
23974: PPOPN 2
23976: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23977: LD_EXP 51
23981: PUSH
23982: LD_EXP 82
23986: AND
23987: IFFALSE 24127
23989: GO 23991
23991: DISABLE
23992: LD_INT 0
23994: PPUSH
23995: PPUSH
// begin ToLua ( displayPowell(); ) ;
23996: LD_STRING displayPowell();
23998: PPUSH
23999: CALL_OW 559
// uc_side := 0 ;
24003: LD_ADDR_OWVAR 20
24007: PUSH
24008: LD_INT 0
24010: ST_TO_ADDR
// uc_nation := 2 ;
24011: LD_ADDR_OWVAR 21
24015: PUSH
24016: LD_INT 2
24018: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24019: LD_ADDR_OWVAR 37
24023: PUSH
24024: LD_INT 14
24026: ST_TO_ADDR
// vc_engine := engine_siberite ;
24027: LD_ADDR_OWVAR 39
24031: PUSH
24032: LD_INT 3
24034: ST_TO_ADDR
// vc_control := control_apeman ;
24035: LD_ADDR_OWVAR 38
24039: PUSH
24040: LD_INT 5
24042: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24043: LD_ADDR_OWVAR 40
24047: PUSH
24048: LD_INT 29
24050: ST_TO_ADDR
// un := CreateVehicle ;
24051: LD_ADDR_VAR 0 2
24055: PUSH
24056: CALL_OW 45
24060: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24061: LD_VAR 0 2
24065: PPUSH
24066: LD_INT 1
24068: PPUSH
24069: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24073: LD_INT 35
24075: PPUSH
24076: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24080: LD_VAR 0 2
24084: PPUSH
24085: LD_INT 22
24087: PUSH
24088: LD_OWVAR 2
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PPUSH
24097: CALL_OW 69
24101: PPUSH
24102: LD_VAR 0 2
24106: PPUSH
24107: CALL_OW 74
24111: PPUSH
24112: CALL_OW 115
// until IsDead ( un ) ;
24116: LD_VAR 0 2
24120: PPUSH
24121: CALL_OW 301
24125: IFFALSE 24073
// end ;
24127: PPOPN 2
24129: END
// every 0 0$1 trigger StreamModeActive and sStu do
24130: LD_EXP 51
24134: PUSH
24135: LD_EXP 90
24139: AND
24140: IFFALSE 24156
24142: GO 24144
24144: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24145: LD_STRING displayStucuk();
24147: PPUSH
24148: CALL_OW 559
// ResetFog ;
24152: CALL_OW 335
// end ;
24156: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24157: LD_EXP 51
24161: PUSH
24162: LD_EXP 83
24166: AND
24167: IFFALSE 24308
24169: GO 24171
24171: DISABLE
24172: LD_INT 0
24174: PPUSH
24175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24176: LD_ADDR_VAR 0 2
24180: PUSH
24181: LD_INT 22
24183: PUSH
24184: LD_OWVAR 2
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 21
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PPUSH
24207: CALL_OW 69
24211: ST_TO_ADDR
// if not tmp then
24212: LD_VAR 0 2
24216: NOT
24217: IFFALSE 24221
// exit ;
24219: GO 24308
// un := tmp [ rand ( 1 , tmp ) ] ;
24221: LD_ADDR_VAR 0 1
24225: PUSH
24226: LD_VAR 0 2
24230: PUSH
24231: LD_INT 1
24233: PPUSH
24234: LD_VAR 0 2
24238: PPUSH
24239: CALL_OW 12
24243: ARRAY
24244: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24245: LD_VAR 0 1
24249: PPUSH
24250: LD_INT 0
24252: PPUSH
24253: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24257: LD_VAR 0 1
24261: PPUSH
24262: LD_OWVAR 3
24266: PUSH
24267: LD_VAR 0 1
24271: DIFF
24272: PPUSH
24273: LD_VAR 0 1
24277: PPUSH
24278: CALL_OW 74
24282: PPUSH
24283: CALL_OW 115
// wait ( 0 0$20 ) ;
24287: LD_INT 700
24289: PPUSH
24290: CALL_OW 67
// SetSide ( un , your_side ) ;
24294: LD_VAR 0 1
24298: PPUSH
24299: LD_OWVAR 2
24303: PPUSH
24304: CALL_OW 235
// end ;
24308: PPOPN 2
24310: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24311: LD_EXP 51
24315: PUSH
24316: LD_EXP 84
24320: AND
24321: IFFALSE 24427
24323: GO 24325
24325: DISABLE
24326: LD_INT 0
24328: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24329: LD_ADDR_VAR 0 1
24333: PUSH
24334: LD_INT 22
24336: PUSH
24337: LD_OWVAR 2
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 2
24348: PUSH
24349: LD_INT 30
24351: PUSH
24352: LD_INT 0
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 30
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: LIST
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PPUSH
24378: CALL_OW 69
24382: ST_TO_ADDR
// if not depot then
24383: LD_VAR 0 1
24387: NOT
24388: IFFALSE 24392
// exit ;
24390: GO 24427
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24392: LD_VAR 0 1
24396: PUSH
24397: LD_INT 1
24399: ARRAY
24400: PPUSH
24401: CALL_OW 250
24405: PPUSH
24406: LD_VAR 0 1
24410: PUSH
24411: LD_INT 1
24413: ARRAY
24414: PPUSH
24415: CALL_OW 251
24419: PPUSH
24420: LD_INT 70
24422: PPUSH
24423: CALL_OW 495
// end ;
24427: PPOPN 1
24429: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24430: LD_EXP 51
24434: PUSH
24435: LD_EXP 85
24439: AND
24440: IFFALSE 24651
24442: GO 24444
24444: DISABLE
24445: LD_INT 0
24447: PPUSH
24448: PPUSH
24449: PPUSH
24450: PPUSH
24451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24452: LD_ADDR_VAR 0 5
24456: PUSH
24457: LD_INT 22
24459: PUSH
24460: LD_OWVAR 2
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 21
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PPUSH
24483: CALL_OW 69
24487: ST_TO_ADDR
// if not tmp then
24488: LD_VAR 0 5
24492: NOT
24493: IFFALSE 24497
// exit ;
24495: GO 24651
// for i in tmp do
24497: LD_ADDR_VAR 0 1
24501: PUSH
24502: LD_VAR 0 5
24506: PUSH
24507: FOR_IN
24508: IFFALSE 24649
// begin d := rand ( 0 , 5 ) ;
24510: LD_ADDR_VAR 0 4
24514: PUSH
24515: LD_INT 0
24517: PPUSH
24518: LD_INT 5
24520: PPUSH
24521: CALL_OW 12
24525: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24526: LD_ADDR_VAR 0 2
24530: PUSH
24531: LD_VAR 0 1
24535: PPUSH
24536: CALL_OW 250
24540: PPUSH
24541: LD_VAR 0 4
24545: PPUSH
24546: LD_INT 3
24548: PPUSH
24549: LD_INT 12
24551: PPUSH
24552: CALL_OW 12
24556: PPUSH
24557: CALL_OW 272
24561: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24562: LD_ADDR_VAR 0 3
24566: PUSH
24567: LD_VAR 0 1
24571: PPUSH
24572: CALL_OW 251
24576: PPUSH
24577: LD_VAR 0 4
24581: PPUSH
24582: LD_INT 3
24584: PPUSH
24585: LD_INT 12
24587: PPUSH
24588: CALL_OW 12
24592: PPUSH
24593: CALL_OW 273
24597: ST_TO_ADDR
// if ValidHex ( x , y ) then
24598: LD_VAR 0 2
24602: PPUSH
24603: LD_VAR 0 3
24607: PPUSH
24608: CALL_OW 488
24612: IFFALSE 24647
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24614: LD_VAR 0 1
24618: PPUSH
24619: LD_VAR 0 2
24623: PPUSH
24624: LD_VAR 0 3
24628: PPUSH
24629: LD_INT 3
24631: PPUSH
24632: LD_INT 6
24634: PPUSH
24635: CALL_OW 12
24639: PPUSH
24640: LD_INT 1
24642: PPUSH
24643: CALL_OW 483
// end ;
24647: GO 24507
24649: POP
24650: POP
// end ;
24651: PPOPN 5
24653: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24654: LD_EXP 51
24658: PUSH
24659: LD_EXP 86
24663: AND
24664: IFFALSE 24758
24666: GO 24668
24668: DISABLE
24669: LD_INT 0
24671: PPUSH
24672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24673: LD_ADDR_VAR 0 2
24677: PUSH
24678: LD_INT 22
24680: PUSH
24681: LD_OWVAR 2
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 32
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 21
24702: PUSH
24703: LD_INT 2
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: PPUSH
24715: CALL_OW 69
24719: ST_TO_ADDR
// if not tmp then
24720: LD_VAR 0 2
24724: NOT
24725: IFFALSE 24729
// exit ;
24727: GO 24758
// for i in tmp do
24729: LD_ADDR_VAR 0 1
24733: PUSH
24734: LD_VAR 0 2
24738: PUSH
24739: FOR_IN
24740: IFFALSE 24756
// SetFuel ( i , 0 ) ;
24742: LD_VAR 0 1
24746: PPUSH
24747: LD_INT 0
24749: PPUSH
24750: CALL_OW 240
24754: GO 24739
24756: POP
24757: POP
// end ;
24758: PPOPN 2
24760: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24761: LD_EXP 51
24765: PUSH
24766: LD_EXP 87
24770: AND
24771: IFFALSE 24837
24773: GO 24775
24775: DISABLE
24776: LD_INT 0
24778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24779: LD_ADDR_VAR 0 1
24783: PUSH
24784: LD_INT 22
24786: PUSH
24787: LD_OWVAR 2
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 30
24798: PUSH
24799: LD_INT 29
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PPUSH
24810: CALL_OW 69
24814: ST_TO_ADDR
// if not tmp then
24815: LD_VAR 0 1
24819: NOT
24820: IFFALSE 24824
// exit ;
24822: GO 24837
// DestroyUnit ( tmp [ 1 ] ) ;
24824: LD_VAR 0 1
24828: PUSH
24829: LD_INT 1
24831: ARRAY
24832: PPUSH
24833: CALL_OW 65
// end ;
24837: PPOPN 1
24839: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24840: LD_EXP 51
24844: PUSH
24845: LD_EXP 89
24849: AND
24850: IFFALSE 24979
24852: GO 24854
24854: DISABLE
24855: LD_INT 0
24857: PPUSH
// begin uc_side := 0 ;
24858: LD_ADDR_OWVAR 20
24862: PUSH
24863: LD_INT 0
24865: ST_TO_ADDR
// uc_nation := nation_arabian ;
24866: LD_ADDR_OWVAR 21
24870: PUSH
24871: LD_INT 2
24873: ST_TO_ADDR
// hc_gallery :=  ;
24874: LD_ADDR_OWVAR 33
24878: PUSH
24879: LD_STRING 
24881: ST_TO_ADDR
// hc_name :=  ;
24882: LD_ADDR_OWVAR 26
24886: PUSH
24887: LD_STRING 
24889: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24890: LD_INT 1
24892: PPUSH
24893: LD_INT 11
24895: PPUSH
24896: LD_INT 10
24898: PPUSH
24899: CALL_OW 380
// un := CreateHuman ;
24903: LD_ADDR_VAR 0 1
24907: PUSH
24908: CALL_OW 44
24912: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24913: LD_VAR 0 1
24917: PPUSH
24918: LD_INT 1
24920: PPUSH
24921: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24925: LD_INT 35
24927: PPUSH
24928: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24932: LD_VAR 0 1
24936: PPUSH
24937: LD_INT 22
24939: PUSH
24940: LD_OWVAR 2
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PPUSH
24949: CALL_OW 69
24953: PPUSH
24954: LD_VAR 0 1
24958: PPUSH
24959: CALL_OW 74
24963: PPUSH
24964: CALL_OW 115
// until IsDead ( un ) ;
24968: LD_VAR 0 1
24972: PPUSH
24973: CALL_OW 301
24977: IFFALSE 24925
// end ;
24979: PPOPN 1
24981: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24982: LD_EXP 51
24986: PUSH
24987: LD_EXP 91
24991: AND
24992: IFFALSE 25004
24994: GO 24996
24996: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24997: LD_STRING earthquake(getX(game), 0, 32)
24999: PPUSH
25000: CALL_OW 559
25004: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25005: LD_EXP 51
25009: PUSH
25010: LD_EXP 92
25014: AND
25015: IFFALSE 25106
25017: GO 25019
25019: DISABLE
25020: LD_INT 0
25022: PPUSH
// begin enable ;
25023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25024: LD_ADDR_VAR 0 1
25028: PUSH
25029: LD_INT 22
25031: PUSH
25032: LD_OWVAR 2
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 21
25043: PUSH
25044: LD_INT 2
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 33
25053: PUSH
25054: LD_INT 3
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: LIST
25065: PPUSH
25066: CALL_OW 69
25070: ST_TO_ADDR
// if not tmp then
25071: LD_VAR 0 1
25075: NOT
25076: IFFALSE 25080
// exit ;
25078: GO 25106
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25080: LD_VAR 0 1
25084: PUSH
25085: LD_INT 1
25087: PPUSH
25088: LD_VAR 0 1
25092: PPUSH
25093: CALL_OW 12
25097: ARRAY
25098: PPUSH
25099: LD_INT 1
25101: PPUSH
25102: CALL_OW 234
// end ;
25106: PPOPN 1
25108: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25109: LD_EXP 51
25113: PUSH
25114: LD_EXP 93
25118: AND
25119: IFFALSE 25260
25121: GO 25123
25123: DISABLE
25124: LD_INT 0
25126: PPUSH
25127: PPUSH
25128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25129: LD_ADDR_VAR 0 3
25133: PUSH
25134: LD_INT 22
25136: PUSH
25137: LD_OWVAR 2
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 25
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PPUSH
25160: CALL_OW 69
25164: ST_TO_ADDR
// if not tmp then
25165: LD_VAR 0 3
25169: NOT
25170: IFFALSE 25174
// exit ;
25172: GO 25260
// un := tmp [ rand ( 1 , tmp ) ] ;
25174: LD_ADDR_VAR 0 2
25178: PUSH
25179: LD_VAR 0 3
25183: PUSH
25184: LD_INT 1
25186: PPUSH
25187: LD_VAR 0 3
25191: PPUSH
25192: CALL_OW 12
25196: ARRAY
25197: ST_TO_ADDR
// if Crawls ( un ) then
25198: LD_VAR 0 2
25202: PPUSH
25203: CALL_OW 318
25207: IFFALSE 25218
// ComWalk ( un ) ;
25209: LD_VAR 0 2
25213: PPUSH
25214: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25218: LD_VAR 0 2
25222: PPUSH
25223: LD_INT 9
25225: PPUSH
25226: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25230: LD_INT 28
25232: PPUSH
25233: LD_OWVAR 2
25237: PPUSH
25238: LD_INT 2
25240: PPUSH
25241: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25245: LD_INT 29
25247: PPUSH
25248: LD_OWVAR 2
25252: PPUSH
25253: LD_INT 2
25255: PPUSH
25256: CALL_OW 322
// end ;
25260: PPOPN 3
25262: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25263: LD_EXP 51
25267: PUSH
25268: LD_EXP 94
25272: AND
25273: IFFALSE 25384
25275: GO 25277
25277: DISABLE
25278: LD_INT 0
25280: PPUSH
25281: PPUSH
25282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25283: LD_ADDR_VAR 0 3
25287: PUSH
25288: LD_INT 22
25290: PUSH
25291: LD_OWVAR 2
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 25
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: ST_TO_ADDR
// if not tmp then
25319: LD_VAR 0 3
25323: NOT
25324: IFFALSE 25328
// exit ;
25326: GO 25384
// un := tmp [ rand ( 1 , tmp ) ] ;
25328: LD_ADDR_VAR 0 2
25332: PUSH
25333: LD_VAR 0 3
25337: PUSH
25338: LD_INT 1
25340: PPUSH
25341: LD_VAR 0 3
25345: PPUSH
25346: CALL_OW 12
25350: ARRAY
25351: ST_TO_ADDR
// if Crawls ( un ) then
25352: LD_VAR 0 2
25356: PPUSH
25357: CALL_OW 318
25361: IFFALSE 25372
// ComWalk ( un ) ;
25363: LD_VAR 0 2
25367: PPUSH
25368: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25372: LD_VAR 0 2
25376: PPUSH
25377: LD_INT 8
25379: PPUSH
25380: CALL_OW 336
// end ;
25384: PPOPN 3
25386: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25387: LD_EXP 51
25391: PUSH
25392: LD_EXP 95
25396: AND
25397: IFFALSE 25541
25399: GO 25401
25401: DISABLE
25402: LD_INT 0
25404: PPUSH
25405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25406: LD_ADDR_VAR 0 2
25410: PUSH
25411: LD_INT 22
25413: PUSH
25414: LD_OWVAR 2
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 21
25425: PUSH
25426: LD_INT 2
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: LD_INT 34
25438: PUSH
25439: LD_INT 12
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 34
25448: PUSH
25449: LD_INT 51
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 34
25458: PUSH
25459: LD_INT 32
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: LIST
25476: PPUSH
25477: CALL_OW 69
25481: ST_TO_ADDR
// if not tmp then
25482: LD_VAR 0 2
25486: NOT
25487: IFFALSE 25491
// exit ;
25489: GO 25541
// for i in tmp do
25491: LD_ADDR_VAR 0 1
25495: PUSH
25496: LD_VAR 0 2
25500: PUSH
25501: FOR_IN
25502: IFFALSE 25539
// if GetCargo ( i , mat_artifact ) = 0 then
25504: LD_VAR 0 1
25508: PPUSH
25509: LD_INT 4
25511: PPUSH
25512: CALL_OW 289
25516: PUSH
25517: LD_INT 0
25519: EQUAL
25520: IFFALSE 25537
// SetCargo ( i , mat_siberit , 100 ) ;
25522: LD_VAR 0 1
25526: PPUSH
25527: LD_INT 3
25529: PPUSH
25530: LD_INT 100
25532: PPUSH
25533: CALL_OW 290
25537: GO 25501
25539: POP
25540: POP
// end ;
25541: PPOPN 2
25543: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25544: LD_EXP 51
25548: PUSH
25549: LD_EXP 96
25553: AND
25554: IFFALSE 25737
25556: GO 25558
25558: DISABLE
25559: LD_INT 0
25561: PPUSH
25562: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25563: LD_ADDR_VAR 0 2
25567: PUSH
25568: LD_INT 22
25570: PUSH
25571: LD_OWVAR 2
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PPUSH
25580: CALL_OW 69
25584: ST_TO_ADDR
// if not tmp then
25585: LD_VAR 0 2
25589: NOT
25590: IFFALSE 25594
// exit ;
25592: GO 25737
// for i := 1 to 2 do
25594: LD_ADDR_VAR 0 1
25598: PUSH
25599: DOUBLE
25600: LD_INT 1
25602: DEC
25603: ST_TO_ADDR
25604: LD_INT 2
25606: PUSH
25607: FOR_TO
25608: IFFALSE 25735
// begin uc_side := your_side ;
25610: LD_ADDR_OWVAR 20
25614: PUSH
25615: LD_OWVAR 2
25619: ST_TO_ADDR
// uc_nation := nation_american ;
25620: LD_ADDR_OWVAR 21
25624: PUSH
25625: LD_INT 1
25627: ST_TO_ADDR
// vc_chassis := us_morphling ;
25628: LD_ADDR_OWVAR 37
25632: PUSH
25633: LD_INT 5
25635: ST_TO_ADDR
// vc_engine := engine_siberite ;
25636: LD_ADDR_OWVAR 39
25640: PUSH
25641: LD_INT 3
25643: ST_TO_ADDR
// vc_control := control_computer ;
25644: LD_ADDR_OWVAR 38
25648: PUSH
25649: LD_INT 3
25651: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25652: LD_ADDR_OWVAR 40
25656: PUSH
25657: LD_INT 10
25659: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25660: LD_VAR 0 2
25664: PUSH
25665: LD_INT 1
25667: ARRAY
25668: PPUSH
25669: CALL_OW 310
25673: NOT
25674: IFFALSE 25721
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25676: CALL_OW 45
25680: PPUSH
25681: LD_VAR 0 2
25685: PUSH
25686: LD_INT 1
25688: ARRAY
25689: PPUSH
25690: CALL_OW 250
25694: PPUSH
25695: LD_VAR 0 2
25699: PUSH
25700: LD_INT 1
25702: ARRAY
25703: PPUSH
25704: CALL_OW 251
25708: PPUSH
25709: LD_INT 12
25711: PPUSH
25712: LD_INT 1
25714: PPUSH
25715: CALL_OW 50
25719: GO 25733
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25721: CALL_OW 45
25725: PPUSH
25726: LD_INT 1
25728: PPUSH
25729: CALL_OW 51
// end ;
25733: GO 25607
25735: POP
25736: POP
// end ;
25737: PPOPN 2
25739: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25740: LD_EXP 51
25744: PUSH
25745: LD_EXP 97
25749: AND
25750: IFFALSE 25972
25752: GO 25754
25754: DISABLE
25755: LD_INT 0
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
25761: PPUSH
25762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25763: LD_ADDR_VAR 0 6
25767: PUSH
25768: LD_INT 22
25770: PUSH
25771: LD_OWVAR 2
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 21
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 3
25792: PUSH
25793: LD_INT 23
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: PPUSH
25812: CALL_OW 69
25816: ST_TO_ADDR
// if not tmp then
25817: LD_VAR 0 6
25821: NOT
25822: IFFALSE 25826
// exit ;
25824: GO 25972
// s1 := rand ( 1 , 4 ) ;
25826: LD_ADDR_VAR 0 2
25830: PUSH
25831: LD_INT 1
25833: PPUSH
25834: LD_INT 4
25836: PPUSH
25837: CALL_OW 12
25841: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25842: LD_ADDR_VAR 0 4
25846: PUSH
25847: LD_VAR 0 6
25851: PUSH
25852: LD_INT 1
25854: ARRAY
25855: PPUSH
25856: LD_VAR 0 2
25860: PPUSH
25861: CALL_OW 259
25865: ST_TO_ADDR
// if s1 = 1 then
25866: LD_VAR 0 2
25870: PUSH
25871: LD_INT 1
25873: EQUAL
25874: IFFALSE 25894
// s2 := rand ( 2 , 4 ) else
25876: LD_ADDR_VAR 0 3
25880: PUSH
25881: LD_INT 2
25883: PPUSH
25884: LD_INT 4
25886: PPUSH
25887: CALL_OW 12
25891: ST_TO_ADDR
25892: GO 25902
// s2 := 1 ;
25894: LD_ADDR_VAR 0 3
25898: PUSH
25899: LD_INT 1
25901: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25902: LD_ADDR_VAR 0 5
25906: PUSH
25907: LD_VAR 0 6
25911: PUSH
25912: LD_INT 1
25914: ARRAY
25915: PPUSH
25916: LD_VAR 0 3
25920: PPUSH
25921: CALL_OW 259
25925: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25926: LD_VAR 0 6
25930: PUSH
25931: LD_INT 1
25933: ARRAY
25934: PPUSH
25935: LD_VAR 0 2
25939: PPUSH
25940: LD_VAR 0 5
25944: PPUSH
25945: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25949: LD_VAR 0 6
25953: PUSH
25954: LD_INT 1
25956: ARRAY
25957: PPUSH
25958: LD_VAR 0 3
25962: PPUSH
25963: LD_VAR 0 4
25967: PPUSH
25968: CALL_OW 237
// end ;
25972: PPOPN 6
25974: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25975: LD_EXP 51
25979: PUSH
25980: LD_EXP 98
25984: AND
25985: IFFALSE 26064
25987: GO 25989
25989: DISABLE
25990: LD_INT 0
25992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25993: LD_ADDR_VAR 0 1
25997: PUSH
25998: LD_INT 22
26000: PUSH
26001: LD_OWVAR 2
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 30
26012: PUSH
26013: LD_INT 3
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PPUSH
26024: CALL_OW 69
26028: ST_TO_ADDR
// if not tmp then
26029: LD_VAR 0 1
26033: NOT
26034: IFFALSE 26038
// exit ;
26036: GO 26064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26038: LD_VAR 0 1
26042: PUSH
26043: LD_INT 1
26045: PPUSH
26046: LD_VAR 0 1
26050: PPUSH
26051: CALL_OW 12
26055: ARRAY
26056: PPUSH
26057: LD_INT 1
26059: PPUSH
26060: CALL_OW 234
// end ;
26064: PPOPN 1
26066: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26067: LD_EXP 51
26071: PUSH
26072: LD_EXP 99
26076: AND
26077: IFFALSE 26189
26079: GO 26081
26081: DISABLE
26082: LD_INT 0
26084: PPUSH
26085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26086: LD_ADDR_VAR 0 2
26090: PUSH
26091: LD_INT 22
26093: PUSH
26094: LD_OWVAR 2
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: LD_INT 30
26108: PUSH
26109: LD_INT 27
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 30
26118: PUSH
26119: LD_INT 26
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 30
26128: PUSH
26129: LD_INT 28
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PPUSH
26146: CALL_OW 69
26150: ST_TO_ADDR
// if not tmp then
26151: LD_VAR 0 2
26155: NOT
26156: IFFALSE 26160
// exit ;
26158: GO 26189
// for i in tmp do
26160: LD_ADDR_VAR 0 1
26164: PUSH
26165: LD_VAR 0 2
26169: PUSH
26170: FOR_IN
26171: IFFALSE 26187
// SetLives ( i , 1 ) ;
26173: LD_VAR 0 1
26177: PPUSH
26178: LD_INT 1
26180: PPUSH
26181: CALL_OW 234
26185: GO 26170
26187: POP
26188: POP
// end ;
26189: PPOPN 2
26191: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26192: LD_EXP 51
26196: PUSH
26197: LD_EXP 100
26201: AND
26202: IFFALSE 26476
26204: GO 26206
26206: DISABLE
26207: LD_INT 0
26209: PPUSH
26210: PPUSH
26211: PPUSH
// begin i := rand ( 1 , 7 ) ;
26212: LD_ADDR_VAR 0 1
26216: PUSH
26217: LD_INT 1
26219: PPUSH
26220: LD_INT 7
26222: PPUSH
26223: CALL_OW 12
26227: ST_TO_ADDR
// case i of 1 :
26228: LD_VAR 0 1
26232: PUSH
26233: LD_INT 1
26235: DOUBLE
26236: EQUAL
26237: IFTRUE 26241
26239: GO 26251
26241: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26242: LD_STRING earthquake(getX(game), 0, 32)
26244: PPUSH
26245: CALL_OW 559
26249: GO 26476
26251: LD_INT 2
26253: DOUBLE
26254: EQUAL
26255: IFTRUE 26259
26257: GO 26273
26259: POP
// begin ToLua ( displayStucuk(); ) ;
26260: LD_STRING displayStucuk();
26262: PPUSH
26263: CALL_OW 559
// ResetFog ;
26267: CALL_OW 335
// end ; 3 :
26271: GO 26476
26273: LD_INT 3
26275: DOUBLE
26276: EQUAL
26277: IFTRUE 26281
26279: GO 26385
26281: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26282: LD_ADDR_VAR 0 2
26286: PUSH
26287: LD_INT 22
26289: PUSH
26290: LD_OWVAR 2
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 25
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PPUSH
26313: CALL_OW 69
26317: ST_TO_ADDR
// if not tmp then
26318: LD_VAR 0 2
26322: NOT
26323: IFFALSE 26327
// exit ;
26325: GO 26476
// un := tmp [ rand ( 1 , tmp ) ] ;
26327: LD_ADDR_VAR 0 3
26331: PUSH
26332: LD_VAR 0 2
26336: PUSH
26337: LD_INT 1
26339: PPUSH
26340: LD_VAR 0 2
26344: PPUSH
26345: CALL_OW 12
26349: ARRAY
26350: ST_TO_ADDR
// if Crawls ( un ) then
26351: LD_VAR 0 3
26355: PPUSH
26356: CALL_OW 318
26360: IFFALSE 26371
// ComWalk ( un ) ;
26362: LD_VAR 0 3
26366: PPUSH
26367: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26371: LD_VAR 0 3
26375: PPUSH
26376: LD_INT 8
26378: PPUSH
26379: CALL_OW 336
// end ; 4 :
26383: GO 26476
26385: LD_INT 4
26387: DOUBLE
26388: EQUAL
26389: IFTRUE 26393
26391: GO 26454
26393: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26394: LD_ADDR_VAR 0 2
26398: PUSH
26399: LD_INT 22
26401: PUSH
26402: LD_OWVAR 2
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 30
26413: PUSH
26414: LD_INT 29
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PPUSH
26425: CALL_OW 69
26429: ST_TO_ADDR
// if not tmp then
26430: LD_VAR 0 2
26434: NOT
26435: IFFALSE 26439
// exit ;
26437: GO 26476
// DestroyUnit ( tmp [ 1 ] ) ;
26439: LD_VAR 0 2
26443: PUSH
26444: LD_INT 1
26446: ARRAY
26447: PPUSH
26448: CALL_OW 65
// end ; 5 .. 7 :
26452: GO 26476
26454: LD_INT 5
26456: DOUBLE
26457: GREATEREQUAL
26458: IFFALSE 26466
26460: LD_INT 7
26462: DOUBLE
26463: LESSEQUAL
26464: IFTRUE 26468
26466: GO 26475
26468: POP
// StreamSibBomb ; end ;
26469: CALL 22726 0 0
26473: GO 26476
26475: POP
// end ;
26476: PPOPN 3
26478: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26479: LD_EXP 51
26483: PUSH
26484: LD_EXP 101
26488: AND
26489: IFFALSE 26645
26491: GO 26493
26493: DISABLE
26494: LD_INT 0
26496: PPUSH
26497: PPUSH
26498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26499: LD_ADDR_VAR 0 2
26503: PUSH
26504: LD_INT 81
26506: PUSH
26507: LD_OWVAR 2
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 2
26518: PUSH
26519: LD_INT 21
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 21
26531: PUSH
26532: LD_INT 2
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PPUSH
26548: CALL_OW 69
26552: ST_TO_ADDR
// if not tmp then
26553: LD_VAR 0 2
26557: NOT
26558: IFFALSE 26562
// exit ;
26560: GO 26645
// p := 0 ;
26562: LD_ADDR_VAR 0 3
26566: PUSH
26567: LD_INT 0
26569: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26570: LD_INT 35
26572: PPUSH
26573: CALL_OW 67
// p := p + 1 ;
26577: LD_ADDR_VAR 0 3
26581: PUSH
26582: LD_VAR 0 3
26586: PUSH
26587: LD_INT 1
26589: PLUS
26590: ST_TO_ADDR
// for i in tmp do
26591: LD_ADDR_VAR 0 1
26595: PUSH
26596: LD_VAR 0 2
26600: PUSH
26601: FOR_IN
26602: IFFALSE 26633
// if GetLives ( i ) < 1000 then
26604: LD_VAR 0 1
26608: PPUSH
26609: CALL_OW 256
26613: PUSH
26614: LD_INT 1000
26616: LESS
26617: IFFALSE 26631
// SetLives ( i , 1000 ) ;
26619: LD_VAR 0 1
26623: PPUSH
26624: LD_INT 1000
26626: PPUSH
26627: CALL_OW 234
26631: GO 26601
26633: POP
26634: POP
// until p > 20 ;
26635: LD_VAR 0 3
26639: PUSH
26640: LD_INT 20
26642: GREATER
26643: IFFALSE 26570
// end ;
26645: PPOPN 3
26647: END
// every 0 0$1 trigger StreamModeActive and sTime do
26648: LD_EXP 51
26652: PUSH
26653: LD_EXP 102
26657: AND
26658: IFFALSE 26693
26660: GO 26662
26662: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26663: LD_INT 28
26665: PPUSH
26666: LD_OWVAR 2
26670: PPUSH
26671: LD_INT 2
26673: PPUSH
26674: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26678: LD_INT 30
26680: PPUSH
26681: LD_OWVAR 2
26685: PPUSH
26686: LD_INT 2
26688: PPUSH
26689: CALL_OW 322
// end ;
26693: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26694: LD_EXP 51
26698: PUSH
26699: LD_EXP 103
26703: AND
26704: IFFALSE 26825
26706: GO 26708
26708: DISABLE
26709: LD_INT 0
26711: PPUSH
26712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26713: LD_ADDR_VAR 0 2
26717: PUSH
26718: LD_INT 22
26720: PUSH
26721: LD_OWVAR 2
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 21
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 3
26742: PUSH
26743: LD_INT 23
26745: PUSH
26746: LD_INT 0
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: LIST
26761: PPUSH
26762: CALL_OW 69
26766: ST_TO_ADDR
// if not tmp then
26767: LD_VAR 0 2
26771: NOT
26772: IFFALSE 26776
// exit ;
26774: GO 26825
// for i in tmp do
26776: LD_ADDR_VAR 0 1
26780: PUSH
26781: LD_VAR 0 2
26785: PUSH
26786: FOR_IN
26787: IFFALSE 26823
// begin if Crawls ( i ) then
26789: LD_VAR 0 1
26793: PPUSH
26794: CALL_OW 318
26798: IFFALSE 26809
// ComWalk ( i ) ;
26800: LD_VAR 0 1
26804: PPUSH
26805: CALL_OW 138
// SetClass ( i , 2 ) ;
26809: LD_VAR 0 1
26813: PPUSH
26814: LD_INT 2
26816: PPUSH
26817: CALL_OW 336
// end ;
26821: GO 26786
26823: POP
26824: POP
// end ;
26825: PPOPN 2
26827: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26828: LD_EXP 51
26832: PUSH
26833: LD_EXP 104
26837: AND
26838: IFFALSE 27119
26840: GO 26842
26842: DISABLE
26843: LD_INT 0
26845: PPUSH
26846: PPUSH
26847: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26848: LD_OWVAR 2
26852: PPUSH
26853: LD_INT 9
26855: PPUSH
26856: LD_INT 1
26858: PPUSH
26859: LD_INT 1
26861: PPUSH
26862: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26866: LD_INT 9
26868: PPUSH
26869: LD_OWVAR 2
26873: PPUSH
26874: CALL_OW 343
// uc_side := 9 ;
26878: LD_ADDR_OWVAR 20
26882: PUSH
26883: LD_INT 9
26885: ST_TO_ADDR
// uc_nation := 2 ;
26886: LD_ADDR_OWVAR 21
26890: PUSH
26891: LD_INT 2
26893: ST_TO_ADDR
// hc_name := Dark Warrior ;
26894: LD_ADDR_OWVAR 26
26898: PUSH
26899: LD_STRING Dark Warrior
26901: ST_TO_ADDR
// hc_gallery :=  ;
26902: LD_ADDR_OWVAR 33
26906: PUSH
26907: LD_STRING 
26909: ST_TO_ADDR
// hc_noskilllimit := true ;
26910: LD_ADDR_OWVAR 76
26914: PUSH
26915: LD_INT 1
26917: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26918: LD_ADDR_OWVAR 31
26922: PUSH
26923: LD_INT 30
26925: PUSH
26926: LD_INT 30
26928: PUSH
26929: LD_INT 30
26931: PUSH
26932: LD_INT 30
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: ST_TO_ADDR
// un := CreateHuman ;
26941: LD_ADDR_VAR 0 3
26945: PUSH
26946: CALL_OW 44
26950: ST_TO_ADDR
// hc_noskilllimit := false ;
26951: LD_ADDR_OWVAR 76
26955: PUSH
26956: LD_INT 0
26958: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26959: LD_VAR 0 3
26963: PPUSH
26964: LD_INT 1
26966: PPUSH
26967: CALL_OW 51
// p := 0 ;
26971: LD_ADDR_VAR 0 2
26975: PUSH
26976: LD_INT 0
26978: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26979: LD_INT 35
26981: PPUSH
26982: CALL_OW 67
// p := p + 1 ;
26986: LD_ADDR_VAR 0 2
26990: PUSH
26991: LD_VAR 0 2
26995: PUSH
26996: LD_INT 1
26998: PLUS
26999: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27000: LD_VAR 0 3
27004: PPUSH
27005: CALL_OW 256
27009: PUSH
27010: LD_INT 1000
27012: LESS
27013: IFFALSE 27027
// SetLives ( un , 1000 ) ;
27015: LD_VAR 0 3
27019: PPUSH
27020: LD_INT 1000
27022: PPUSH
27023: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27027: LD_VAR 0 3
27031: PPUSH
27032: LD_INT 81
27034: PUSH
27035: LD_OWVAR 2
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 91
27046: PUSH
27047: LD_VAR 0 3
27051: PUSH
27052: LD_INT 30
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PPUSH
27064: CALL_OW 69
27068: PPUSH
27069: LD_VAR 0 3
27073: PPUSH
27074: CALL_OW 74
27078: PPUSH
27079: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
27083: LD_VAR 0 2
27087: PUSH
27088: LD_INT 60
27090: GREATER
27091: PUSH
27092: LD_VAR 0 3
27096: PPUSH
27097: CALL_OW 301
27101: OR
27102: IFFALSE 26979
// if un then
27104: LD_VAR 0 3
27108: IFFALSE 27119
// RemoveUnit ( un ) ;
27110: LD_VAR 0 3
27114: PPUSH
27115: CALL_OW 64
// end ;
27119: PPOPN 3
27121: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27122: LD_INT 0
27124: PPUSH
// case cmd of 301 :
27125: LD_VAR 0 1
27129: PUSH
27130: LD_INT 301
27132: DOUBLE
27133: EQUAL
27134: IFTRUE 27138
27136: GO 27170
27138: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27139: LD_VAR 0 6
27143: PPUSH
27144: LD_VAR 0 7
27148: PPUSH
27149: LD_VAR 0 8
27153: PPUSH
27154: LD_VAR 0 4
27158: PPUSH
27159: LD_VAR 0 5
27163: PPUSH
27164: CALL 28371 0 5
27168: GO 27291
27170: LD_INT 302
27172: DOUBLE
27173: EQUAL
27174: IFTRUE 27178
27176: GO 27215
27178: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27179: LD_VAR 0 6
27183: PPUSH
27184: LD_VAR 0 7
27188: PPUSH
27189: LD_VAR 0 8
27193: PPUSH
27194: LD_VAR 0 9
27198: PPUSH
27199: LD_VAR 0 4
27203: PPUSH
27204: LD_VAR 0 5
27208: PPUSH
27209: CALL 28462 0 6
27213: GO 27291
27215: LD_INT 303
27217: DOUBLE
27218: EQUAL
27219: IFTRUE 27223
27221: GO 27260
27223: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27224: LD_VAR 0 6
27228: PPUSH
27229: LD_VAR 0 7
27233: PPUSH
27234: LD_VAR 0 8
27238: PPUSH
27239: LD_VAR 0 9
27243: PPUSH
27244: LD_VAR 0 4
27248: PPUSH
27249: LD_VAR 0 5
27253: PPUSH
27254: CALL 27296 0 6
27258: GO 27291
27260: LD_INT 304
27262: DOUBLE
27263: EQUAL
27264: IFTRUE 27268
27266: GO 27290
27268: POP
// hHackTeleport ( unit , x , y ) ; end ;
27269: LD_VAR 0 2
27273: PPUSH
27274: LD_VAR 0 4
27278: PPUSH
27279: LD_VAR 0 5
27283: PPUSH
27284: CALL 29055 0 3
27288: GO 27291
27290: POP
// end ;
27291: LD_VAR 0 12
27295: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27296: LD_INT 0
27298: PPUSH
27299: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27300: LD_VAR 0 1
27304: PUSH
27305: LD_INT 1
27307: LESS
27308: PUSH
27309: LD_VAR 0 1
27313: PUSH
27314: LD_INT 3
27316: GREATER
27317: OR
27318: PUSH
27319: LD_VAR 0 5
27323: PPUSH
27324: LD_VAR 0 6
27328: PPUSH
27329: CALL_OW 428
27333: OR
27334: IFFALSE 27338
// exit ;
27336: GO 28058
// uc_side := your_side ;
27338: LD_ADDR_OWVAR 20
27342: PUSH
27343: LD_OWVAR 2
27347: ST_TO_ADDR
// uc_nation := nation ;
27348: LD_ADDR_OWVAR 21
27352: PUSH
27353: LD_VAR 0 1
27357: ST_TO_ADDR
// bc_level = 1 ;
27358: LD_ADDR_OWVAR 43
27362: PUSH
27363: LD_INT 1
27365: ST_TO_ADDR
// case btype of 1 :
27366: LD_VAR 0 2
27370: PUSH
27371: LD_INT 1
27373: DOUBLE
27374: EQUAL
27375: IFTRUE 27379
27377: GO 27390
27379: POP
// bc_type := b_depot ; 2 :
27380: LD_ADDR_OWVAR 42
27384: PUSH
27385: LD_INT 0
27387: ST_TO_ADDR
27388: GO 28002
27390: LD_INT 2
27392: DOUBLE
27393: EQUAL
27394: IFTRUE 27398
27396: GO 27409
27398: POP
// bc_type := b_warehouse ; 3 :
27399: LD_ADDR_OWVAR 42
27403: PUSH
27404: LD_INT 1
27406: ST_TO_ADDR
27407: GO 28002
27409: LD_INT 3
27411: DOUBLE
27412: EQUAL
27413: IFTRUE 27417
27415: GO 27428
27417: POP
// bc_type := b_lab ; 4 .. 9 :
27418: LD_ADDR_OWVAR 42
27422: PUSH
27423: LD_INT 6
27425: ST_TO_ADDR
27426: GO 28002
27428: LD_INT 4
27430: DOUBLE
27431: GREATEREQUAL
27432: IFFALSE 27440
27434: LD_INT 9
27436: DOUBLE
27437: LESSEQUAL
27438: IFTRUE 27442
27440: GO 27494
27442: POP
// begin bc_type := b_lab_half ;
27443: LD_ADDR_OWVAR 42
27447: PUSH
27448: LD_INT 7
27450: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27451: LD_ADDR_OWVAR 44
27455: PUSH
27456: LD_INT 10
27458: PUSH
27459: LD_INT 11
27461: PUSH
27462: LD_INT 12
27464: PUSH
27465: LD_INT 15
27467: PUSH
27468: LD_INT 14
27470: PUSH
27471: LD_INT 13
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: PUSH
27482: LD_VAR 0 2
27486: PUSH
27487: LD_INT 3
27489: MINUS
27490: ARRAY
27491: ST_TO_ADDR
// end ; 10 .. 13 :
27492: GO 28002
27494: LD_INT 10
27496: DOUBLE
27497: GREATEREQUAL
27498: IFFALSE 27506
27500: LD_INT 13
27502: DOUBLE
27503: LESSEQUAL
27504: IFTRUE 27508
27506: GO 27585
27508: POP
// begin bc_type := b_lab_full ;
27509: LD_ADDR_OWVAR 42
27513: PUSH
27514: LD_INT 8
27516: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27517: LD_ADDR_OWVAR 44
27521: PUSH
27522: LD_INT 10
27524: PUSH
27525: LD_INT 12
27527: PUSH
27528: LD_INT 14
27530: PUSH
27531: LD_INT 13
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: PUSH
27540: LD_VAR 0 2
27544: PUSH
27545: LD_INT 9
27547: MINUS
27548: ARRAY
27549: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27550: LD_ADDR_OWVAR 45
27554: PUSH
27555: LD_INT 11
27557: PUSH
27558: LD_INT 15
27560: PUSH
27561: LD_INT 12
27563: PUSH
27564: LD_INT 15
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: PUSH
27573: LD_VAR 0 2
27577: PUSH
27578: LD_INT 9
27580: MINUS
27581: ARRAY
27582: ST_TO_ADDR
// end ; 14 :
27583: GO 28002
27585: LD_INT 14
27587: DOUBLE
27588: EQUAL
27589: IFTRUE 27593
27591: GO 27604
27593: POP
// bc_type := b_workshop ; 15 :
27594: LD_ADDR_OWVAR 42
27598: PUSH
27599: LD_INT 2
27601: ST_TO_ADDR
27602: GO 28002
27604: LD_INT 15
27606: DOUBLE
27607: EQUAL
27608: IFTRUE 27612
27610: GO 27623
27612: POP
// bc_type := b_factory ; 16 :
27613: LD_ADDR_OWVAR 42
27617: PUSH
27618: LD_INT 3
27620: ST_TO_ADDR
27621: GO 28002
27623: LD_INT 16
27625: DOUBLE
27626: EQUAL
27627: IFTRUE 27631
27629: GO 27642
27631: POP
// bc_type := b_ext_gun ; 17 :
27632: LD_ADDR_OWVAR 42
27636: PUSH
27637: LD_INT 17
27639: ST_TO_ADDR
27640: GO 28002
27642: LD_INT 17
27644: DOUBLE
27645: EQUAL
27646: IFTRUE 27650
27648: GO 27678
27650: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27651: LD_ADDR_OWVAR 42
27655: PUSH
27656: LD_INT 19
27658: PUSH
27659: LD_INT 23
27661: PUSH
27662: LD_INT 19
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: PUSH
27670: LD_VAR 0 1
27674: ARRAY
27675: ST_TO_ADDR
27676: GO 28002
27678: LD_INT 18
27680: DOUBLE
27681: EQUAL
27682: IFTRUE 27686
27684: GO 27697
27686: POP
// bc_type := b_ext_radar ; 19 :
27687: LD_ADDR_OWVAR 42
27691: PUSH
27692: LD_INT 20
27694: ST_TO_ADDR
27695: GO 28002
27697: LD_INT 19
27699: DOUBLE
27700: EQUAL
27701: IFTRUE 27705
27703: GO 27716
27705: POP
// bc_type := b_ext_radio ; 20 :
27706: LD_ADDR_OWVAR 42
27710: PUSH
27711: LD_INT 22
27713: ST_TO_ADDR
27714: GO 28002
27716: LD_INT 20
27718: DOUBLE
27719: EQUAL
27720: IFTRUE 27724
27722: GO 27735
27724: POP
// bc_type := b_ext_siberium ; 21 :
27725: LD_ADDR_OWVAR 42
27729: PUSH
27730: LD_INT 21
27732: ST_TO_ADDR
27733: GO 28002
27735: LD_INT 21
27737: DOUBLE
27738: EQUAL
27739: IFTRUE 27743
27741: GO 27754
27743: POP
// bc_type := b_ext_computer ; 22 :
27744: LD_ADDR_OWVAR 42
27748: PUSH
27749: LD_INT 24
27751: ST_TO_ADDR
27752: GO 28002
27754: LD_INT 22
27756: DOUBLE
27757: EQUAL
27758: IFTRUE 27762
27760: GO 27773
27762: POP
// bc_type := b_ext_track ; 23 :
27763: LD_ADDR_OWVAR 42
27767: PUSH
27768: LD_INT 16
27770: ST_TO_ADDR
27771: GO 28002
27773: LD_INT 23
27775: DOUBLE
27776: EQUAL
27777: IFTRUE 27781
27779: GO 27792
27781: POP
// bc_type := b_ext_laser ; 24 :
27782: LD_ADDR_OWVAR 42
27786: PUSH
27787: LD_INT 25
27789: ST_TO_ADDR
27790: GO 28002
27792: LD_INT 24
27794: DOUBLE
27795: EQUAL
27796: IFTRUE 27800
27798: GO 27811
27800: POP
// bc_type := b_control_tower ; 25 :
27801: LD_ADDR_OWVAR 42
27805: PUSH
27806: LD_INT 36
27808: ST_TO_ADDR
27809: GO 28002
27811: LD_INT 25
27813: DOUBLE
27814: EQUAL
27815: IFTRUE 27819
27817: GO 27830
27819: POP
// bc_type := b_breastwork ; 26 :
27820: LD_ADDR_OWVAR 42
27824: PUSH
27825: LD_INT 31
27827: ST_TO_ADDR
27828: GO 28002
27830: LD_INT 26
27832: DOUBLE
27833: EQUAL
27834: IFTRUE 27838
27836: GO 27849
27838: POP
// bc_type := b_bunker ; 27 :
27839: LD_ADDR_OWVAR 42
27843: PUSH
27844: LD_INT 32
27846: ST_TO_ADDR
27847: GO 28002
27849: LD_INT 27
27851: DOUBLE
27852: EQUAL
27853: IFTRUE 27857
27855: GO 27868
27857: POP
// bc_type := b_turret ; 28 :
27858: LD_ADDR_OWVAR 42
27862: PUSH
27863: LD_INT 33
27865: ST_TO_ADDR
27866: GO 28002
27868: LD_INT 28
27870: DOUBLE
27871: EQUAL
27872: IFTRUE 27876
27874: GO 27887
27876: POP
// bc_type := b_armoury ; 29 :
27877: LD_ADDR_OWVAR 42
27881: PUSH
27882: LD_INT 4
27884: ST_TO_ADDR
27885: GO 28002
27887: LD_INT 29
27889: DOUBLE
27890: EQUAL
27891: IFTRUE 27895
27893: GO 27906
27895: POP
// bc_type := b_barracks ; 30 :
27896: LD_ADDR_OWVAR 42
27900: PUSH
27901: LD_INT 5
27903: ST_TO_ADDR
27904: GO 28002
27906: LD_INT 30
27908: DOUBLE
27909: EQUAL
27910: IFTRUE 27914
27912: GO 27925
27914: POP
// bc_type := b_solar_power ; 31 :
27915: LD_ADDR_OWVAR 42
27919: PUSH
27920: LD_INT 27
27922: ST_TO_ADDR
27923: GO 28002
27925: LD_INT 31
27927: DOUBLE
27928: EQUAL
27929: IFTRUE 27933
27931: GO 27944
27933: POP
// bc_type := b_oil_power ; 32 :
27934: LD_ADDR_OWVAR 42
27938: PUSH
27939: LD_INT 26
27941: ST_TO_ADDR
27942: GO 28002
27944: LD_INT 32
27946: DOUBLE
27947: EQUAL
27948: IFTRUE 27952
27950: GO 27963
27952: POP
// bc_type := b_siberite_power ; 33 :
27953: LD_ADDR_OWVAR 42
27957: PUSH
27958: LD_INT 28
27960: ST_TO_ADDR
27961: GO 28002
27963: LD_INT 33
27965: DOUBLE
27966: EQUAL
27967: IFTRUE 27971
27969: GO 27982
27971: POP
// bc_type := b_oil_mine ; 34 :
27972: LD_ADDR_OWVAR 42
27976: PUSH
27977: LD_INT 29
27979: ST_TO_ADDR
27980: GO 28002
27982: LD_INT 34
27984: DOUBLE
27985: EQUAL
27986: IFTRUE 27990
27988: GO 28001
27990: POP
// bc_type := b_siberite_mine ; end ;
27991: LD_ADDR_OWVAR 42
27995: PUSH
27996: LD_INT 30
27998: ST_TO_ADDR
27999: GO 28002
28001: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28002: LD_ADDR_VAR 0 8
28006: PUSH
28007: LD_VAR 0 5
28011: PPUSH
28012: LD_VAR 0 6
28016: PPUSH
28017: LD_VAR 0 3
28021: PPUSH
28022: CALL_OW 47
28026: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28027: LD_OWVAR 42
28031: PUSH
28032: LD_INT 32
28034: PUSH
28035: LD_INT 33
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: IN
28042: IFFALSE 28058
// PlaceWeaponTurret ( b , weapon ) ;
28044: LD_VAR 0 8
28048: PPUSH
28049: LD_VAR 0 4
28053: PPUSH
28054: CALL_OW 431
// end ;
28058: LD_VAR 0 7
28062: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28063: LD_INT 0
28065: PPUSH
28066: PPUSH
28067: PPUSH
28068: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28069: LD_ADDR_VAR 0 4
28073: PUSH
28074: LD_INT 22
28076: PUSH
28077: LD_OWVAR 2
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: LD_INT 30
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 30
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: LIST
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PPUSH
28118: CALL_OW 69
28122: ST_TO_ADDR
// if not tmp then
28123: LD_VAR 0 4
28127: NOT
28128: IFFALSE 28132
// exit ;
28130: GO 28191
// for i in tmp do
28132: LD_ADDR_VAR 0 2
28136: PUSH
28137: LD_VAR 0 4
28141: PUSH
28142: FOR_IN
28143: IFFALSE 28189
// for j = 1 to 3 do
28145: LD_ADDR_VAR 0 3
28149: PUSH
28150: DOUBLE
28151: LD_INT 1
28153: DEC
28154: ST_TO_ADDR
28155: LD_INT 3
28157: PUSH
28158: FOR_TO
28159: IFFALSE 28185
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28161: LD_VAR 0 2
28165: PPUSH
28166: CALL_OW 274
28170: PPUSH
28171: LD_VAR 0 3
28175: PPUSH
28176: LD_INT 99999
28178: PPUSH
28179: CALL_OW 277
28183: GO 28158
28185: POP
28186: POP
28187: GO 28142
28189: POP
28190: POP
// end ;
28191: LD_VAR 0 1
28195: RET
// export function hHackSetLevel10 ; var i , j ; begin
28196: LD_INT 0
28198: PPUSH
28199: PPUSH
28200: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28201: LD_ADDR_VAR 0 2
28205: PUSH
28206: LD_INT 21
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PPUSH
28216: CALL_OW 69
28220: PUSH
28221: FOR_IN
28222: IFFALSE 28274
// if IsSelected ( i ) then
28224: LD_VAR 0 2
28228: PPUSH
28229: CALL_OW 306
28233: IFFALSE 28272
// begin for j := 1 to 4 do
28235: LD_ADDR_VAR 0 3
28239: PUSH
28240: DOUBLE
28241: LD_INT 1
28243: DEC
28244: ST_TO_ADDR
28245: LD_INT 4
28247: PUSH
28248: FOR_TO
28249: IFFALSE 28270
// SetSkill ( i , j , 10 ) ;
28251: LD_VAR 0 2
28255: PPUSH
28256: LD_VAR 0 3
28260: PPUSH
28261: LD_INT 10
28263: PPUSH
28264: CALL_OW 237
28268: GO 28248
28270: POP
28271: POP
// end ;
28272: GO 28221
28274: POP
28275: POP
// end ;
28276: LD_VAR 0 1
28280: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28281: LD_INT 0
28283: PPUSH
28284: PPUSH
28285: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28286: LD_ADDR_VAR 0 2
28290: PUSH
28291: LD_INT 22
28293: PUSH
28294: LD_OWVAR 2
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 21
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PPUSH
28317: CALL_OW 69
28321: PUSH
28322: FOR_IN
28323: IFFALSE 28364
// begin for j := 1 to 4 do
28325: LD_ADDR_VAR 0 3
28329: PUSH
28330: DOUBLE
28331: LD_INT 1
28333: DEC
28334: ST_TO_ADDR
28335: LD_INT 4
28337: PUSH
28338: FOR_TO
28339: IFFALSE 28360
// SetSkill ( i , j , 10 ) ;
28341: LD_VAR 0 2
28345: PPUSH
28346: LD_VAR 0 3
28350: PPUSH
28351: LD_INT 10
28353: PPUSH
28354: CALL_OW 237
28358: GO 28338
28360: POP
28361: POP
// end ;
28362: GO 28322
28364: POP
28365: POP
// end ;
28366: LD_VAR 0 1
28370: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28371: LD_INT 0
28373: PPUSH
// uc_side := your_side ;
28374: LD_ADDR_OWVAR 20
28378: PUSH
28379: LD_OWVAR 2
28383: ST_TO_ADDR
// uc_nation := nation ;
28384: LD_ADDR_OWVAR 21
28388: PUSH
28389: LD_VAR 0 1
28393: ST_TO_ADDR
// InitHc ;
28394: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28398: LD_INT 0
28400: PPUSH
28401: LD_VAR 0 2
28405: PPUSH
28406: LD_VAR 0 3
28410: PPUSH
28411: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28415: LD_VAR 0 4
28419: PPUSH
28420: LD_VAR 0 5
28424: PPUSH
28425: CALL_OW 428
28429: PUSH
28430: LD_INT 0
28432: EQUAL
28433: IFFALSE 28457
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28435: CALL_OW 44
28439: PPUSH
28440: LD_VAR 0 4
28444: PPUSH
28445: LD_VAR 0 5
28449: PPUSH
28450: LD_INT 1
28452: PPUSH
28453: CALL_OW 48
// end ;
28457: LD_VAR 0 6
28461: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28462: LD_INT 0
28464: PPUSH
28465: PPUSH
// uc_side := your_side ;
28466: LD_ADDR_OWVAR 20
28470: PUSH
28471: LD_OWVAR 2
28475: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28476: LD_VAR 0 1
28480: PUSH
28481: LD_INT 1
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: LD_INT 3
28489: PUSH
28490: LD_INT 4
28492: PUSH
28493: LD_INT 5
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: IN
28503: IFFALSE 28515
// uc_nation := nation_american else
28505: LD_ADDR_OWVAR 21
28509: PUSH
28510: LD_INT 1
28512: ST_TO_ADDR
28513: GO 28558
// if chassis in [ 11 , 12 , 13 , 14 ] then
28515: LD_VAR 0 1
28519: PUSH
28520: LD_INT 11
28522: PUSH
28523: LD_INT 12
28525: PUSH
28526: LD_INT 13
28528: PUSH
28529: LD_INT 14
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: IN
28538: IFFALSE 28550
// uc_nation := nation_arabian else
28540: LD_ADDR_OWVAR 21
28544: PUSH
28545: LD_INT 2
28547: ST_TO_ADDR
28548: GO 28558
// uc_nation := nation_russian ;
28550: LD_ADDR_OWVAR 21
28554: PUSH
28555: LD_INT 3
28557: ST_TO_ADDR
// vc_chassis := chassis ;
28558: LD_ADDR_OWVAR 37
28562: PUSH
28563: LD_VAR 0 1
28567: ST_TO_ADDR
// vc_engine := engine ;
28568: LD_ADDR_OWVAR 39
28572: PUSH
28573: LD_VAR 0 2
28577: ST_TO_ADDR
// vc_control := control ;
28578: LD_ADDR_OWVAR 38
28582: PUSH
28583: LD_VAR 0 3
28587: ST_TO_ADDR
// vc_weapon := weapon ;
28588: LD_ADDR_OWVAR 40
28592: PUSH
28593: LD_VAR 0 4
28597: ST_TO_ADDR
// un := CreateVehicle ;
28598: LD_ADDR_VAR 0 8
28602: PUSH
28603: CALL_OW 45
28607: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28608: LD_VAR 0 8
28612: PPUSH
28613: LD_INT 0
28615: PPUSH
28616: LD_INT 5
28618: PPUSH
28619: CALL_OW 12
28623: PPUSH
28624: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28628: LD_VAR 0 8
28632: PPUSH
28633: LD_VAR 0 5
28637: PPUSH
28638: LD_VAR 0 6
28642: PPUSH
28643: LD_INT 1
28645: PPUSH
28646: CALL_OW 48
// end ;
28650: LD_VAR 0 7
28654: RET
// export hInvincible ; every 1 do
28655: GO 28657
28657: DISABLE
// hInvincible := [ ] ;
28658: LD_ADDR_EXP 105
28662: PUSH
28663: EMPTY
28664: ST_TO_ADDR
28665: END
// every 10 do var i ;
28666: GO 28668
28668: DISABLE
28669: LD_INT 0
28671: PPUSH
// begin enable ;
28672: ENABLE
// if not hInvincible then
28673: LD_EXP 105
28677: NOT
28678: IFFALSE 28682
// exit ;
28680: GO 28726
// for i in hInvincible do
28682: LD_ADDR_VAR 0 1
28686: PUSH
28687: LD_EXP 105
28691: PUSH
28692: FOR_IN
28693: IFFALSE 28724
// if GetLives ( i ) < 1000 then
28695: LD_VAR 0 1
28699: PPUSH
28700: CALL_OW 256
28704: PUSH
28705: LD_INT 1000
28707: LESS
28708: IFFALSE 28722
// SetLives ( i , 1000 ) ;
28710: LD_VAR 0 1
28714: PPUSH
28715: LD_INT 1000
28717: PPUSH
28718: CALL_OW 234
28722: GO 28692
28724: POP
28725: POP
// end ;
28726: PPOPN 1
28728: END
// export function hHackInvincible ; var i ; begin
28729: LD_INT 0
28731: PPUSH
28732: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28733: LD_ADDR_VAR 0 2
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: LD_INT 21
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 21
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: PPUSH
28766: CALL_OW 69
28770: PUSH
28771: FOR_IN
28772: IFFALSE 28833
// if IsSelected ( i ) then
28774: LD_VAR 0 2
28778: PPUSH
28779: CALL_OW 306
28783: IFFALSE 28831
// begin if i in hInvincible then
28785: LD_VAR 0 2
28789: PUSH
28790: LD_EXP 105
28794: IN
28795: IFFALSE 28815
// hInvincible := hInvincible diff i else
28797: LD_ADDR_EXP 105
28801: PUSH
28802: LD_EXP 105
28806: PUSH
28807: LD_VAR 0 2
28811: DIFF
28812: ST_TO_ADDR
28813: GO 28831
// hInvincible := hInvincible union i ;
28815: LD_ADDR_EXP 105
28819: PUSH
28820: LD_EXP 105
28824: PUSH
28825: LD_VAR 0 2
28829: UNION
28830: ST_TO_ADDR
// end ;
28831: GO 28771
28833: POP
28834: POP
// end ;
28835: LD_VAR 0 1
28839: RET
// export function hHackInvisible ; var i , j ; begin
28840: LD_INT 0
28842: PPUSH
28843: PPUSH
28844: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28845: LD_ADDR_VAR 0 2
28849: PUSH
28850: LD_INT 21
28852: PUSH
28853: LD_INT 1
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PPUSH
28860: CALL_OW 69
28864: PUSH
28865: FOR_IN
28866: IFFALSE 28890
// if IsSelected ( i ) then
28868: LD_VAR 0 2
28872: PPUSH
28873: CALL_OW 306
28877: IFFALSE 28888
// ComForceInvisible ( i ) ;
28879: LD_VAR 0 2
28883: PPUSH
28884: CALL_OW 496
28888: GO 28865
28890: POP
28891: POP
// end ;
28892: LD_VAR 0 1
28896: RET
// export function hHackChangeYourSide ; begin
28897: LD_INT 0
28899: PPUSH
// if your_side = 8 then
28900: LD_OWVAR 2
28904: PUSH
28905: LD_INT 8
28907: EQUAL
28908: IFFALSE 28920
// your_side := 0 else
28910: LD_ADDR_OWVAR 2
28914: PUSH
28915: LD_INT 0
28917: ST_TO_ADDR
28918: GO 28934
// your_side := your_side + 1 ;
28920: LD_ADDR_OWVAR 2
28924: PUSH
28925: LD_OWVAR 2
28929: PUSH
28930: LD_INT 1
28932: PLUS
28933: ST_TO_ADDR
// end ;
28934: LD_VAR 0 1
28938: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28939: LD_INT 0
28941: PPUSH
28942: PPUSH
28943: PPUSH
// for i in all_units do
28944: LD_ADDR_VAR 0 2
28948: PUSH
28949: LD_OWVAR 3
28953: PUSH
28954: FOR_IN
28955: IFFALSE 29033
// if IsSelected ( i ) then
28957: LD_VAR 0 2
28961: PPUSH
28962: CALL_OW 306
28966: IFFALSE 29031
// begin j := GetSide ( i ) ;
28968: LD_ADDR_VAR 0 3
28972: PUSH
28973: LD_VAR 0 2
28977: PPUSH
28978: CALL_OW 255
28982: ST_TO_ADDR
// if j = 8 then
28983: LD_VAR 0 3
28987: PUSH
28988: LD_INT 8
28990: EQUAL
28991: IFFALSE 29003
// j := 0 else
28993: LD_ADDR_VAR 0 3
28997: PUSH
28998: LD_INT 0
29000: ST_TO_ADDR
29001: GO 29017
// j := j + 1 ;
29003: LD_ADDR_VAR 0 3
29007: PUSH
29008: LD_VAR 0 3
29012: PUSH
29013: LD_INT 1
29015: PLUS
29016: ST_TO_ADDR
// SetSide ( i , j ) ;
29017: LD_VAR 0 2
29021: PPUSH
29022: LD_VAR 0 3
29026: PPUSH
29027: CALL_OW 235
// end ;
29031: GO 28954
29033: POP
29034: POP
// end ;
29035: LD_VAR 0 1
29039: RET
// export function hHackFog ; begin
29040: LD_INT 0
29042: PPUSH
// FogOff ( true ) ;
29043: LD_INT 1
29045: PPUSH
29046: CALL_OW 344
// end ;
29050: LD_VAR 0 1
29054: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29055: LD_INT 0
29057: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29058: LD_VAR 0 1
29062: PPUSH
29063: LD_VAR 0 2
29067: PPUSH
29068: LD_VAR 0 3
29072: PPUSH
29073: LD_INT 1
29075: PPUSH
29076: LD_INT 1
29078: PPUSH
29079: CALL_OW 483
// CenterOnXY ( x , y ) ;
29083: LD_VAR 0 2
29087: PPUSH
29088: LD_VAR 0 3
29092: PPUSH
29093: CALL_OW 84
// end ; end_of_file
29097: LD_VAR 0 4
29101: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
29102: LD_INT 0
29104: PPUSH
29105: PPUSH
29106: PPUSH
29107: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
29108: LD_VAR 0 1
29112: PPUSH
29113: CALL_OW 264
29117: PUSH
29118: LD_EXP 39
29122: EQUAL
29123: IFFALSE 29195
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29125: LD_INT 68
29127: PPUSH
29128: LD_VAR 0 1
29132: PPUSH
29133: CALL_OW 255
29137: PPUSH
29138: CALL_OW 321
29142: PUSH
29143: LD_INT 2
29145: EQUAL
29146: IFFALSE 29158
// eff := 70 else
29148: LD_ADDR_VAR 0 4
29152: PUSH
29153: LD_INT 70
29155: ST_TO_ADDR
29156: GO 29166
// eff := 30 ;
29158: LD_ADDR_VAR 0 4
29162: PUSH
29163: LD_INT 30
29165: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29166: LD_VAR 0 1
29170: PPUSH
29171: CALL_OW 250
29175: PPUSH
29176: LD_VAR 0 1
29180: PPUSH
29181: CALL_OW 251
29185: PPUSH
29186: LD_VAR 0 4
29190: PPUSH
29191: CALL_OW 495
// end ; end ;
29195: LD_VAR 0 2
29199: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29200: LD_INT 0
29202: PPUSH
// end ;
29203: LD_VAR 0 4
29207: RET
// export function SOS_Command ( cmd ) ; begin
29208: LD_INT 0
29210: PPUSH
// end ;
29211: LD_VAR 0 2
29215: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29216: LD_INT 0
29218: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29219: LD_VAR 0 1
29223: PUSH
29224: LD_INT 250
29226: EQUAL
29227: PUSH
29228: LD_VAR 0 2
29232: PPUSH
29233: CALL_OW 264
29237: PUSH
29238: LD_EXP 42
29242: EQUAL
29243: AND
29244: IFFALSE 29265
// MinerPlaceMine ( unit , x , y ) ;
29246: LD_VAR 0 2
29250: PPUSH
29251: LD_VAR 0 4
29255: PPUSH
29256: LD_VAR 0 5
29260: PPUSH
29261: CALL 31606 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29265: LD_VAR 0 1
29269: PUSH
29270: LD_INT 251
29272: EQUAL
29273: PUSH
29274: LD_VAR 0 2
29278: PPUSH
29279: CALL_OW 264
29283: PUSH
29284: LD_EXP 42
29288: EQUAL
29289: AND
29290: IFFALSE 29311
// MinerDetonateMine ( unit , x , y ) ;
29292: LD_VAR 0 2
29296: PPUSH
29297: LD_VAR 0 4
29301: PPUSH
29302: LD_VAR 0 5
29306: PPUSH
29307: CALL 31883 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29311: LD_VAR 0 1
29315: PUSH
29316: LD_INT 252
29318: EQUAL
29319: PUSH
29320: LD_VAR 0 2
29324: PPUSH
29325: CALL_OW 264
29329: PUSH
29330: LD_EXP 42
29334: EQUAL
29335: AND
29336: IFFALSE 29357
// MinerCreateMinefield ( unit , x , y ) ;
29338: LD_VAR 0 2
29342: PPUSH
29343: LD_VAR 0 4
29347: PPUSH
29348: LD_VAR 0 5
29352: PPUSH
29353: CALL 32300 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29357: LD_VAR 0 1
29361: PUSH
29362: LD_INT 253
29364: EQUAL
29365: PUSH
29366: LD_VAR 0 2
29370: PPUSH
29371: CALL_OW 257
29375: PUSH
29376: LD_INT 5
29378: EQUAL
29379: AND
29380: IFFALSE 29401
// ComBinocular ( unit , x , y ) ;
29382: LD_VAR 0 2
29386: PPUSH
29387: LD_VAR 0 4
29391: PPUSH
29392: LD_VAR 0 5
29396: PPUSH
29397: CALL 32671 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29401: LD_VAR 0 1
29405: PUSH
29406: LD_INT 254
29408: EQUAL
29409: PUSH
29410: LD_VAR 0 2
29414: PPUSH
29415: CALL_OW 264
29419: PUSH
29420: LD_EXP 37
29424: EQUAL
29425: AND
29426: PUSH
29427: LD_VAR 0 3
29431: PPUSH
29432: CALL_OW 263
29436: PUSH
29437: LD_INT 3
29439: EQUAL
29440: AND
29441: IFFALSE 29457
// HackDestroyVehicle ( unit , selectedUnit ) ;
29443: LD_VAR 0 2
29447: PPUSH
29448: LD_VAR 0 3
29452: PPUSH
29453: CALL 30966 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29457: LD_VAR 0 1
29461: PUSH
29462: LD_INT 255
29464: EQUAL
29465: PUSH
29466: LD_VAR 0 2
29470: PPUSH
29471: CALL_OW 264
29475: PUSH
29476: LD_INT 14
29478: PUSH
29479: LD_INT 53
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: IN
29486: AND
29487: PUSH
29488: LD_VAR 0 4
29492: PPUSH
29493: LD_VAR 0 5
29497: PPUSH
29498: CALL_OW 488
29502: AND
29503: IFFALSE 29527
// CutTreeXYR ( unit , x , y , 12 ) ;
29505: LD_VAR 0 2
29509: PPUSH
29510: LD_VAR 0 4
29514: PPUSH
29515: LD_VAR 0 5
29519: PPUSH
29520: LD_INT 12
29522: PPUSH
29523: CALL 29532 0 4
// end ;
29527: LD_VAR 0 6
29531: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29532: LD_INT 0
29534: PPUSH
29535: PPUSH
29536: PPUSH
29537: PPUSH
29538: PPUSH
29539: PPUSH
29540: PPUSH
29541: PPUSH
29542: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29543: LD_VAR 0 1
29547: NOT
29548: PUSH
29549: LD_VAR 0 2
29553: PPUSH
29554: LD_VAR 0 3
29558: PPUSH
29559: CALL_OW 488
29563: NOT
29564: OR
29565: PUSH
29566: LD_VAR 0 4
29570: NOT
29571: OR
29572: IFFALSE 29576
// exit ;
29574: GO 29916
// list := [ ] ;
29576: LD_ADDR_VAR 0 13
29580: PUSH
29581: EMPTY
29582: ST_TO_ADDR
// if x - r < 0 then
29583: LD_VAR 0 2
29587: PUSH
29588: LD_VAR 0 4
29592: MINUS
29593: PUSH
29594: LD_INT 0
29596: LESS
29597: IFFALSE 29609
// min_x := 0 else
29599: LD_ADDR_VAR 0 7
29603: PUSH
29604: LD_INT 0
29606: ST_TO_ADDR
29607: GO 29625
// min_x := x - r ;
29609: LD_ADDR_VAR 0 7
29613: PUSH
29614: LD_VAR 0 2
29618: PUSH
29619: LD_VAR 0 4
29623: MINUS
29624: ST_TO_ADDR
// if y - r < 0 then
29625: LD_VAR 0 3
29629: PUSH
29630: LD_VAR 0 4
29634: MINUS
29635: PUSH
29636: LD_INT 0
29638: LESS
29639: IFFALSE 29651
// min_y := 0 else
29641: LD_ADDR_VAR 0 8
29645: PUSH
29646: LD_INT 0
29648: ST_TO_ADDR
29649: GO 29667
// min_y := y - r ;
29651: LD_ADDR_VAR 0 8
29655: PUSH
29656: LD_VAR 0 3
29660: PUSH
29661: LD_VAR 0 4
29665: MINUS
29666: ST_TO_ADDR
// max_x := x + r ;
29667: LD_ADDR_VAR 0 9
29671: PUSH
29672: LD_VAR 0 2
29676: PUSH
29677: LD_VAR 0 4
29681: PLUS
29682: ST_TO_ADDR
// max_y := y + r ;
29683: LD_ADDR_VAR 0 10
29687: PUSH
29688: LD_VAR 0 3
29692: PUSH
29693: LD_VAR 0 4
29697: PLUS
29698: ST_TO_ADDR
// for _x = min_x to max_x do
29699: LD_ADDR_VAR 0 11
29703: PUSH
29704: DOUBLE
29705: LD_VAR 0 7
29709: DEC
29710: ST_TO_ADDR
29711: LD_VAR 0 9
29715: PUSH
29716: FOR_TO
29717: IFFALSE 29834
// for _y = min_y to max_y do
29719: LD_ADDR_VAR 0 12
29723: PUSH
29724: DOUBLE
29725: LD_VAR 0 8
29729: DEC
29730: ST_TO_ADDR
29731: LD_VAR 0 10
29735: PUSH
29736: FOR_TO
29737: IFFALSE 29830
// begin if not ValidHex ( _x , _y ) then
29739: LD_VAR 0 11
29743: PPUSH
29744: LD_VAR 0 12
29748: PPUSH
29749: CALL_OW 488
29753: NOT
29754: IFFALSE 29758
// continue ;
29756: GO 29736
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29758: LD_VAR 0 11
29762: PPUSH
29763: LD_VAR 0 12
29767: PPUSH
29768: CALL_OW 351
29772: PUSH
29773: LD_VAR 0 11
29777: PPUSH
29778: LD_VAR 0 12
29782: PPUSH
29783: CALL_OW 554
29787: AND
29788: IFFALSE 29828
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29790: LD_ADDR_VAR 0 13
29794: PUSH
29795: LD_VAR 0 13
29799: PPUSH
29800: LD_VAR 0 13
29804: PUSH
29805: LD_INT 1
29807: PLUS
29808: PPUSH
29809: LD_VAR 0 11
29813: PUSH
29814: LD_VAR 0 12
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PPUSH
29823: CALL_OW 2
29827: ST_TO_ADDR
// end ;
29828: GO 29736
29830: POP
29831: POP
29832: GO 29716
29834: POP
29835: POP
// if not list then
29836: LD_VAR 0 13
29840: NOT
29841: IFFALSE 29845
// exit ;
29843: GO 29916
// for i in list do
29845: LD_ADDR_VAR 0 6
29849: PUSH
29850: LD_VAR 0 13
29854: PUSH
29855: FOR_IN
29856: IFFALSE 29914
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29858: LD_VAR 0 1
29862: PPUSH
29863: LD_STRING M
29865: PUSH
29866: LD_VAR 0 6
29870: PUSH
29871: LD_INT 1
29873: ARRAY
29874: PUSH
29875: LD_VAR 0 6
29879: PUSH
29880: LD_INT 2
29882: ARRAY
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: LD_INT 0
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: PPUSH
29908: CALL_OW 447
29912: GO 29855
29914: POP
29915: POP
// end ;
29916: LD_VAR 0 5
29920: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29921: LD_EXP 106
29925: NOT
29926: IFFALSE 29976
29928: GO 29930
29930: DISABLE
// begin initHack := true ;
29931: LD_ADDR_EXP 106
29935: PUSH
29936: LD_INT 1
29938: ST_TO_ADDR
// hackTanks := [ ] ;
29939: LD_ADDR_EXP 107
29943: PUSH
29944: EMPTY
29945: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29946: LD_ADDR_EXP 108
29950: PUSH
29951: EMPTY
29952: ST_TO_ADDR
// hackLimit := 3 ;
29953: LD_ADDR_EXP 109
29957: PUSH
29958: LD_INT 3
29960: ST_TO_ADDR
// hackDist := 12 ;
29961: LD_ADDR_EXP 110
29965: PUSH
29966: LD_INT 12
29968: ST_TO_ADDR
// hackCounter := [ ] ;
29969: LD_ADDR_EXP 111
29973: PUSH
29974: EMPTY
29975: ST_TO_ADDR
// end ;
29976: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29977: LD_EXP 106
29981: PUSH
29982: LD_INT 34
29984: PUSH
29985: LD_EXP 37
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PPUSH
29994: CALL_OW 69
29998: AND
29999: IFFALSE 30254
30001: GO 30003
30003: DISABLE
30004: LD_INT 0
30006: PPUSH
30007: PPUSH
// begin enable ;
30008: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30009: LD_ADDR_VAR 0 1
30013: PUSH
30014: LD_INT 34
30016: PUSH
30017: LD_EXP 37
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PPUSH
30026: CALL_OW 69
30030: PUSH
30031: FOR_IN
30032: IFFALSE 30252
// begin if not i in hackTanks then
30034: LD_VAR 0 1
30038: PUSH
30039: LD_EXP 107
30043: IN
30044: NOT
30045: IFFALSE 30128
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30047: LD_ADDR_EXP 107
30051: PUSH
30052: LD_EXP 107
30056: PPUSH
30057: LD_EXP 107
30061: PUSH
30062: LD_INT 1
30064: PLUS
30065: PPUSH
30066: LD_VAR 0 1
30070: PPUSH
30071: CALL_OW 1
30075: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30076: LD_ADDR_EXP 108
30080: PUSH
30081: LD_EXP 108
30085: PPUSH
30086: LD_EXP 108
30090: PUSH
30091: LD_INT 1
30093: PLUS
30094: PPUSH
30095: EMPTY
30096: PPUSH
30097: CALL_OW 1
30101: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30102: LD_ADDR_EXP 111
30106: PUSH
30107: LD_EXP 111
30111: PPUSH
30112: LD_EXP 111
30116: PUSH
30117: LD_INT 1
30119: PLUS
30120: PPUSH
30121: EMPTY
30122: PPUSH
30123: CALL_OW 1
30127: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30128: LD_VAR 0 1
30132: PPUSH
30133: CALL_OW 302
30137: NOT
30138: IFFALSE 30151
// begin HackUnlinkAll ( i ) ;
30140: LD_VAR 0 1
30144: PPUSH
30145: CALL 30257 0 1
// continue ;
30149: GO 30031
// end ; HackCheckCapturedStatus ( i ) ;
30151: LD_VAR 0 1
30155: PPUSH
30156: CALL 30700 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30160: LD_ADDR_VAR 0 2
30164: PUSH
30165: LD_INT 81
30167: PUSH
30168: LD_VAR 0 1
30172: PPUSH
30173: CALL_OW 255
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 33
30184: PUSH
30185: LD_INT 3
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 91
30194: PUSH
30195: LD_VAR 0 1
30199: PUSH
30200: LD_EXP 110
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 50
30212: PUSH
30213: EMPTY
30214: LIST
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: PPUSH
30222: CALL_OW 69
30226: ST_TO_ADDR
// if not tmp then
30227: LD_VAR 0 2
30231: NOT
30232: IFFALSE 30236
// continue ;
30234: GO 30031
// HackLink ( i , tmp ) ;
30236: LD_VAR 0 1
30240: PPUSH
30241: LD_VAR 0 2
30245: PPUSH
30246: CALL 30393 0 2
// end ;
30250: GO 30031
30252: POP
30253: POP
// end ;
30254: PPOPN 2
30256: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30257: LD_INT 0
30259: PPUSH
30260: PPUSH
30261: PPUSH
// if not hack in hackTanks then
30262: LD_VAR 0 1
30266: PUSH
30267: LD_EXP 107
30271: IN
30272: NOT
30273: IFFALSE 30277
// exit ;
30275: GO 30388
// index := GetElementIndex ( hackTanks , hack ) ;
30277: LD_ADDR_VAR 0 4
30281: PUSH
30282: LD_EXP 107
30286: PPUSH
30287: LD_VAR 0 1
30291: PPUSH
30292: CALL 37822 0 2
30296: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30297: LD_EXP 108
30301: PUSH
30302: LD_VAR 0 4
30306: ARRAY
30307: IFFALSE 30388
// begin for i in hackTanksCaptured [ index ] do
30309: LD_ADDR_VAR 0 3
30313: PUSH
30314: LD_EXP 108
30318: PUSH
30319: LD_VAR 0 4
30323: ARRAY
30324: PUSH
30325: FOR_IN
30326: IFFALSE 30352
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30328: LD_VAR 0 3
30332: PUSH
30333: LD_INT 1
30335: ARRAY
30336: PPUSH
30337: LD_VAR 0 3
30341: PUSH
30342: LD_INT 2
30344: ARRAY
30345: PPUSH
30346: CALL_OW 235
30350: GO 30325
30352: POP
30353: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30354: LD_ADDR_EXP 108
30358: PUSH
30359: LD_EXP 108
30363: PPUSH
30364: LD_VAR 0 4
30368: PPUSH
30369: EMPTY
30370: PPUSH
30371: CALL_OW 1
30375: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30376: LD_VAR 0 1
30380: PPUSH
30381: LD_INT 0
30383: PPUSH
30384: CALL_OW 505
// end ; end ;
30388: LD_VAR 0 2
30392: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30393: LD_INT 0
30395: PPUSH
30396: PPUSH
30397: PPUSH
// if not hack in hackTanks or not vehicles then
30398: LD_VAR 0 1
30402: PUSH
30403: LD_EXP 107
30407: IN
30408: NOT
30409: PUSH
30410: LD_VAR 0 2
30414: NOT
30415: OR
30416: IFFALSE 30420
// exit ;
30418: GO 30695
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30420: LD_ADDR_VAR 0 2
30424: PUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: LD_VAR 0 2
30434: PPUSH
30435: LD_INT 1
30437: PPUSH
30438: LD_INT 1
30440: PPUSH
30441: CALL 38472 0 4
30445: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30446: LD_ADDR_VAR 0 5
30450: PUSH
30451: LD_EXP 107
30455: PPUSH
30456: LD_VAR 0 1
30460: PPUSH
30461: CALL 37822 0 2
30465: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30466: LD_EXP 108
30470: PUSH
30471: LD_VAR 0 5
30475: ARRAY
30476: PUSH
30477: LD_EXP 109
30481: LESS
30482: IFFALSE 30671
// begin for i := 1 to vehicles do
30484: LD_ADDR_VAR 0 4
30488: PUSH
30489: DOUBLE
30490: LD_INT 1
30492: DEC
30493: ST_TO_ADDR
30494: LD_VAR 0 2
30498: PUSH
30499: FOR_TO
30500: IFFALSE 30669
// begin if hackTanksCaptured [ index ] = hackLimit then
30502: LD_EXP 108
30506: PUSH
30507: LD_VAR 0 5
30511: ARRAY
30512: PUSH
30513: LD_EXP 109
30517: EQUAL
30518: IFFALSE 30522
// break ;
30520: GO 30669
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30522: LD_ADDR_EXP 111
30526: PUSH
30527: LD_EXP 111
30531: PPUSH
30532: LD_VAR 0 5
30536: PPUSH
30537: LD_EXP 111
30541: PUSH
30542: LD_VAR 0 5
30546: ARRAY
30547: PUSH
30548: LD_INT 1
30550: PLUS
30551: PPUSH
30552: CALL_OW 1
30556: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30557: LD_ADDR_EXP 108
30561: PUSH
30562: LD_EXP 108
30566: PPUSH
30567: LD_VAR 0 5
30571: PUSH
30572: LD_EXP 108
30576: PUSH
30577: LD_VAR 0 5
30581: ARRAY
30582: PUSH
30583: LD_INT 1
30585: PLUS
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PPUSH
30591: LD_VAR 0 2
30595: PUSH
30596: LD_VAR 0 4
30600: ARRAY
30601: PUSH
30602: LD_VAR 0 2
30606: PUSH
30607: LD_VAR 0 4
30611: ARRAY
30612: PPUSH
30613: CALL_OW 255
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PPUSH
30622: CALL 38037 0 3
30626: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30627: LD_VAR 0 2
30631: PUSH
30632: LD_VAR 0 4
30636: ARRAY
30637: PPUSH
30638: LD_VAR 0 1
30642: PPUSH
30643: CALL_OW 255
30647: PPUSH
30648: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30652: LD_VAR 0 2
30656: PUSH
30657: LD_VAR 0 4
30661: ARRAY
30662: PPUSH
30663: CALL_OW 141
// end ;
30667: GO 30499
30669: POP
30670: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30671: LD_VAR 0 1
30675: PPUSH
30676: LD_EXP 108
30680: PUSH
30681: LD_VAR 0 5
30685: ARRAY
30686: PUSH
30687: LD_INT 0
30689: PLUS
30690: PPUSH
30691: CALL_OW 505
// end ;
30695: LD_VAR 0 3
30699: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30700: LD_INT 0
30702: PPUSH
30703: PPUSH
30704: PPUSH
30705: PPUSH
// if not hack in hackTanks then
30706: LD_VAR 0 1
30710: PUSH
30711: LD_EXP 107
30715: IN
30716: NOT
30717: IFFALSE 30721
// exit ;
30719: GO 30961
// index := GetElementIndex ( hackTanks , hack ) ;
30721: LD_ADDR_VAR 0 4
30725: PUSH
30726: LD_EXP 107
30730: PPUSH
30731: LD_VAR 0 1
30735: PPUSH
30736: CALL 37822 0 2
30740: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30741: LD_ADDR_VAR 0 3
30745: PUSH
30746: DOUBLE
30747: LD_EXP 108
30751: PUSH
30752: LD_VAR 0 4
30756: ARRAY
30757: INC
30758: ST_TO_ADDR
30759: LD_INT 1
30761: PUSH
30762: FOR_DOWNTO
30763: IFFALSE 30935
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30765: LD_ADDR_VAR 0 5
30769: PUSH
30770: LD_EXP 108
30774: PUSH
30775: LD_VAR 0 4
30779: ARRAY
30780: PUSH
30781: LD_VAR 0 3
30785: ARRAY
30786: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30787: LD_VAR 0 5
30791: PUSH
30792: LD_INT 1
30794: ARRAY
30795: PPUSH
30796: CALL_OW 302
30800: NOT
30801: PUSH
30802: LD_VAR 0 5
30806: PUSH
30807: LD_INT 1
30809: ARRAY
30810: PPUSH
30811: CALL_OW 255
30815: PUSH
30816: LD_VAR 0 1
30820: PPUSH
30821: CALL_OW 255
30825: NONEQUAL
30826: OR
30827: IFFALSE 30933
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30829: LD_VAR 0 5
30833: PUSH
30834: LD_INT 1
30836: ARRAY
30837: PPUSH
30838: CALL_OW 305
30842: PUSH
30843: LD_VAR 0 5
30847: PUSH
30848: LD_INT 1
30850: ARRAY
30851: PPUSH
30852: CALL_OW 255
30856: PUSH
30857: LD_VAR 0 1
30861: PPUSH
30862: CALL_OW 255
30866: EQUAL
30867: AND
30868: IFFALSE 30892
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30870: LD_VAR 0 5
30874: PUSH
30875: LD_INT 1
30877: ARRAY
30878: PPUSH
30879: LD_VAR 0 5
30883: PUSH
30884: LD_INT 2
30886: ARRAY
30887: PPUSH
30888: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30892: LD_ADDR_EXP 108
30896: PUSH
30897: LD_EXP 108
30901: PPUSH
30902: LD_VAR 0 4
30906: PPUSH
30907: LD_EXP 108
30911: PUSH
30912: LD_VAR 0 4
30916: ARRAY
30917: PPUSH
30918: LD_VAR 0 3
30922: PPUSH
30923: CALL_OW 3
30927: PPUSH
30928: CALL_OW 1
30932: ST_TO_ADDR
// end ; end ;
30933: GO 30762
30935: POP
30936: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30937: LD_VAR 0 1
30941: PPUSH
30942: LD_EXP 108
30946: PUSH
30947: LD_VAR 0 4
30951: ARRAY
30952: PUSH
30953: LD_INT 0
30955: PLUS
30956: PPUSH
30957: CALL_OW 505
// end ;
30961: LD_VAR 0 2
30965: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30966: LD_INT 0
30968: PPUSH
30969: PPUSH
30970: PPUSH
30971: PPUSH
// if not hack in hackTanks then
30972: LD_VAR 0 1
30976: PUSH
30977: LD_EXP 107
30981: IN
30982: NOT
30983: IFFALSE 30987
// exit ;
30985: GO 31072
// index := GetElementIndex ( hackTanks , hack ) ;
30987: LD_ADDR_VAR 0 5
30991: PUSH
30992: LD_EXP 107
30996: PPUSH
30997: LD_VAR 0 1
31001: PPUSH
31002: CALL 37822 0 2
31006: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31007: LD_ADDR_VAR 0 4
31011: PUSH
31012: DOUBLE
31013: LD_INT 1
31015: DEC
31016: ST_TO_ADDR
31017: LD_EXP 108
31021: PUSH
31022: LD_VAR 0 5
31026: ARRAY
31027: PUSH
31028: FOR_TO
31029: IFFALSE 31070
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31031: LD_EXP 108
31035: PUSH
31036: LD_VAR 0 5
31040: ARRAY
31041: PUSH
31042: LD_VAR 0 4
31046: ARRAY
31047: PUSH
31048: LD_INT 1
31050: ARRAY
31051: PUSH
31052: LD_VAR 0 2
31056: EQUAL
31057: IFFALSE 31068
// KillUnit ( vehicle ) ;
31059: LD_VAR 0 2
31063: PPUSH
31064: CALL_OW 66
31068: GO 31028
31070: POP
31071: POP
// end ;
31072: LD_VAR 0 3
31076: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31077: LD_EXP 112
31081: NOT
31082: IFFALSE 31117
31084: GO 31086
31086: DISABLE
// begin initMiner := true ;
31087: LD_ADDR_EXP 112
31091: PUSH
31092: LD_INT 1
31094: ST_TO_ADDR
// minersList := [ ] ;
31095: LD_ADDR_EXP 113
31099: PUSH
31100: EMPTY
31101: ST_TO_ADDR
// minerMinesList := [ ] ;
31102: LD_ADDR_EXP 114
31106: PUSH
31107: EMPTY
31108: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31109: LD_ADDR_EXP 115
31113: PUSH
31114: LD_INT 5
31116: ST_TO_ADDR
// end ;
31117: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31118: LD_EXP 112
31122: PUSH
31123: LD_INT 34
31125: PUSH
31126: LD_EXP 42
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PPUSH
31135: CALL_OW 69
31139: AND
31140: IFFALSE 31603
31142: GO 31144
31144: DISABLE
31145: LD_INT 0
31147: PPUSH
31148: PPUSH
31149: PPUSH
31150: PPUSH
// begin enable ;
31151: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31152: LD_ADDR_VAR 0 1
31156: PUSH
31157: LD_INT 34
31159: PUSH
31160: LD_EXP 42
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PPUSH
31169: CALL_OW 69
31173: PUSH
31174: FOR_IN
31175: IFFALSE 31247
// begin if not i in minersList then
31177: LD_VAR 0 1
31181: PUSH
31182: LD_EXP 113
31186: IN
31187: NOT
31188: IFFALSE 31245
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31190: LD_ADDR_EXP 113
31194: PUSH
31195: LD_EXP 113
31199: PPUSH
31200: LD_EXP 113
31204: PUSH
31205: LD_INT 1
31207: PLUS
31208: PPUSH
31209: LD_VAR 0 1
31213: PPUSH
31214: CALL_OW 1
31218: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31219: LD_ADDR_EXP 114
31223: PUSH
31224: LD_EXP 114
31228: PPUSH
31229: LD_EXP 114
31233: PUSH
31234: LD_INT 1
31236: PLUS
31237: PPUSH
31238: EMPTY
31239: PPUSH
31240: CALL_OW 1
31244: ST_TO_ADDR
// end end ;
31245: GO 31174
31247: POP
31248: POP
// for i := minerMinesList downto 1 do
31249: LD_ADDR_VAR 0 1
31253: PUSH
31254: DOUBLE
31255: LD_EXP 114
31259: INC
31260: ST_TO_ADDR
31261: LD_INT 1
31263: PUSH
31264: FOR_DOWNTO
31265: IFFALSE 31601
// begin if IsLive ( minersList [ i ] ) then
31267: LD_EXP 113
31271: PUSH
31272: LD_VAR 0 1
31276: ARRAY
31277: PPUSH
31278: CALL_OW 300
31282: IFFALSE 31310
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31284: LD_EXP 113
31288: PUSH
31289: LD_VAR 0 1
31293: ARRAY
31294: PPUSH
31295: LD_EXP 114
31299: PUSH
31300: LD_VAR 0 1
31304: ARRAY
31305: PPUSH
31306: CALL_OW 505
// if not minerMinesList [ i ] then
31310: LD_EXP 114
31314: PUSH
31315: LD_VAR 0 1
31319: ARRAY
31320: NOT
31321: IFFALSE 31325
// continue ;
31323: GO 31264
// for j := minerMinesList [ i ] downto 1 do
31325: LD_ADDR_VAR 0 2
31329: PUSH
31330: DOUBLE
31331: LD_EXP 114
31335: PUSH
31336: LD_VAR 0 1
31340: ARRAY
31341: INC
31342: ST_TO_ADDR
31343: LD_INT 1
31345: PUSH
31346: FOR_DOWNTO
31347: IFFALSE 31597
// begin side := GetSide ( minersList [ i ] ) ;
31349: LD_ADDR_VAR 0 3
31353: PUSH
31354: LD_EXP 113
31358: PUSH
31359: LD_VAR 0 1
31363: ARRAY
31364: PPUSH
31365: CALL_OW 255
31369: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31370: LD_ADDR_VAR 0 4
31374: PUSH
31375: LD_EXP 114
31379: PUSH
31380: LD_VAR 0 1
31384: ARRAY
31385: PUSH
31386: LD_VAR 0 2
31390: ARRAY
31391: PUSH
31392: LD_INT 1
31394: ARRAY
31395: PPUSH
31396: LD_EXP 114
31400: PUSH
31401: LD_VAR 0 1
31405: ARRAY
31406: PUSH
31407: LD_VAR 0 2
31411: ARRAY
31412: PUSH
31413: LD_INT 2
31415: ARRAY
31416: PPUSH
31417: CALL_OW 428
31421: ST_TO_ADDR
// if not tmp then
31422: LD_VAR 0 4
31426: NOT
31427: IFFALSE 31431
// continue ;
31429: GO 31346
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31431: LD_VAR 0 4
31435: PUSH
31436: LD_INT 81
31438: PUSH
31439: LD_VAR 0 3
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PPUSH
31448: CALL_OW 69
31452: IN
31453: PUSH
31454: LD_EXP 114
31458: PUSH
31459: LD_VAR 0 1
31463: ARRAY
31464: PUSH
31465: LD_VAR 0 2
31469: ARRAY
31470: PUSH
31471: LD_INT 1
31473: ARRAY
31474: PPUSH
31475: LD_EXP 114
31479: PUSH
31480: LD_VAR 0 1
31484: ARRAY
31485: PUSH
31486: LD_VAR 0 2
31490: ARRAY
31491: PUSH
31492: LD_INT 2
31494: ARRAY
31495: PPUSH
31496: CALL_OW 458
31500: AND
31501: IFFALSE 31595
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31503: LD_EXP 114
31507: PUSH
31508: LD_VAR 0 1
31512: ARRAY
31513: PUSH
31514: LD_VAR 0 2
31518: ARRAY
31519: PUSH
31520: LD_INT 1
31522: ARRAY
31523: PPUSH
31524: LD_EXP 114
31528: PUSH
31529: LD_VAR 0 1
31533: ARRAY
31534: PUSH
31535: LD_VAR 0 2
31539: ARRAY
31540: PUSH
31541: LD_INT 2
31543: ARRAY
31544: PPUSH
31545: LD_VAR 0 3
31549: PPUSH
31550: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31554: LD_ADDR_EXP 114
31558: PUSH
31559: LD_EXP 114
31563: PPUSH
31564: LD_VAR 0 1
31568: PPUSH
31569: LD_EXP 114
31573: PUSH
31574: LD_VAR 0 1
31578: ARRAY
31579: PPUSH
31580: LD_VAR 0 2
31584: PPUSH
31585: CALL_OW 3
31589: PPUSH
31590: CALL_OW 1
31594: ST_TO_ADDR
// end ; end ;
31595: GO 31346
31597: POP
31598: POP
// end ;
31599: GO 31264
31601: POP
31602: POP
// end ;
31603: PPOPN 4
31605: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31606: LD_INT 0
31608: PPUSH
31609: PPUSH
// result := false ;
31610: LD_ADDR_VAR 0 4
31614: PUSH
31615: LD_INT 0
31617: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31618: LD_VAR 0 1
31622: PPUSH
31623: CALL_OW 264
31627: PUSH
31628: LD_EXP 42
31632: EQUAL
31633: NOT
31634: IFFALSE 31638
// exit ;
31636: GO 31878
// index := GetElementIndex ( minersList , unit ) ;
31638: LD_ADDR_VAR 0 5
31642: PUSH
31643: LD_EXP 113
31647: PPUSH
31648: LD_VAR 0 1
31652: PPUSH
31653: CALL 37822 0 2
31657: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31658: LD_EXP 114
31662: PUSH
31663: LD_VAR 0 5
31667: ARRAY
31668: PUSH
31669: LD_EXP 115
31673: GREATEREQUAL
31674: IFFALSE 31678
// exit ;
31676: GO 31878
// ComMoveXY ( unit , x , y ) ;
31678: LD_VAR 0 1
31682: PPUSH
31683: LD_VAR 0 2
31687: PPUSH
31688: LD_VAR 0 3
31692: PPUSH
31693: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31697: LD_INT 35
31699: PPUSH
31700: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31704: LD_VAR 0 1
31708: PPUSH
31709: LD_VAR 0 2
31713: PPUSH
31714: LD_VAR 0 3
31718: PPUSH
31719: CALL 67886 0 3
31723: NOT
31724: PUSH
31725: LD_VAR 0 1
31729: PPUSH
31730: CALL_OW 314
31734: AND
31735: IFFALSE 31739
// exit ;
31737: GO 31878
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31739: LD_VAR 0 2
31743: PPUSH
31744: LD_VAR 0 3
31748: PPUSH
31749: CALL_OW 428
31753: PUSH
31754: LD_VAR 0 1
31758: EQUAL
31759: PUSH
31760: LD_VAR 0 1
31764: PPUSH
31765: CALL_OW 314
31769: NOT
31770: AND
31771: IFFALSE 31697
// PlaySoundXY ( x , y , PlantMine ) ;
31773: LD_VAR 0 2
31777: PPUSH
31778: LD_VAR 0 3
31782: PPUSH
31783: LD_STRING PlantMine
31785: PPUSH
31786: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31790: LD_VAR 0 2
31794: PPUSH
31795: LD_VAR 0 3
31799: PPUSH
31800: LD_VAR 0 1
31804: PPUSH
31805: CALL_OW 255
31809: PPUSH
31810: LD_INT 0
31812: PPUSH
31813: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31817: LD_ADDR_EXP 114
31821: PUSH
31822: LD_EXP 114
31826: PPUSH
31827: LD_VAR 0 5
31831: PUSH
31832: LD_EXP 114
31836: PUSH
31837: LD_VAR 0 5
31841: ARRAY
31842: PUSH
31843: LD_INT 1
31845: PLUS
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PPUSH
31851: LD_VAR 0 2
31855: PUSH
31856: LD_VAR 0 3
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PPUSH
31865: CALL 38037 0 3
31869: ST_TO_ADDR
// result := true ;
31870: LD_ADDR_VAR 0 4
31874: PUSH
31875: LD_INT 1
31877: ST_TO_ADDR
// end ;
31878: LD_VAR 0 4
31882: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31883: LD_INT 0
31885: PPUSH
31886: PPUSH
31887: PPUSH
// if not unit in minersList then
31888: LD_VAR 0 1
31892: PUSH
31893: LD_EXP 113
31897: IN
31898: NOT
31899: IFFALSE 31903
// exit ;
31901: GO 32295
// index := GetElementIndex ( minersList , unit ) ;
31903: LD_ADDR_VAR 0 6
31907: PUSH
31908: LD_EXP 113
31912: PPUSH
31913: LD_VAR 0 1
31917: PPUSH
31918: CALL 37822 0 2
31922: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31923: LD_ADDR_VAR 0 5
31927: PUSH
31928: DOUBLE
31929: LD_EXP 114
31933: PUSH
31934: LD_VAR 0 6
31938: ARRAY
31939: INC
31940: ST_TO_ADDR
31941: LD_INT 1
31943: PUSH
31944: FOR_DOWNTO
31945: IFFALSE 32106
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31947: LD_EXP 114
31951: PUSH
31952: LD_VAR 0 6
31956: ARRAY
31957: PUSH
31958: LD_VAR 0 5
31962: ARRAY
31963: PUSH
31964: LD_INT 1
31966: ARRAY
31967: PUSH
31968: LD_VAR 0 2
31972: EQUAL
31973: PUSH
31974: LD_EXP 114
31978: PUSH
31979: LD_VAR 0 6
31983: ARRAY
31984: PUSH
31985: LD_VAR 0 5
31989: ARRAY
31990: PUSH
31991: LD_INT 2
31993: ARRAY
31994: PUSH
31995: LD_VAR 0 3
31999: EQUAL
32000: AND
32001: IFFALSE 32104
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32003: LD_EXP 114
32007: PUSH
32008: LD_VAR 0 6
32012: ARRAY
32013: PUSH
32014: LD_VAR 0 5
32018: ARRAY
32019: PUSH
32020: LD_INT 1
32022: ARRAY
32023: PPUSH
32024: LD_EXP 114
32028: PUSH
32029: LD_VAR 0 6
32033: ARRAY
32034: PUSH
32035: LD_VAR 0 5
32039: ARRAY
32040: PUSH
32041: LD_INT 2
32043: ARRAY
32044: PPUSH
32045: LD_VAR 0 1
32049: PPUSH
32050: CALL_OW 255
32054: PPUSH
32055: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32059: LD_ADDR_EXP 114
32063: PUSH
32064: LD_EXP 114
32068: PPUSH
32069: LD_VAR 0 6
32073: PPUSH
32074: LD_EXP 114
32078: PUSH
32079: LD_VAR 0 6
32083: ARRAY
32084: PPUSH
32085: LD_VAR 0 5
32089: PPUSH
32090: CALL_OW 3
32094: PPUSH
32095: CALL_OW 1
32099: ST_TO_ADDR
// exit ;
32100: POP
32101: POP
32102: GO 32295
// end ; end ;
32104: GO 31944
32106: POP
32107: POP
// for i := minerMinesList [ index ] downto 1 do
32108: LD_ADDR_VAR 0 5
32112: PUSH
32113: DOUBLE
32114: LD_EXP 114
32118: PUSH
32119: LD_VAR 0 6
32123: ARRAY
32124: INC
32125: ST_TO_ADDR
32126: LD_INT 1
32128: PUSH
32129: FOR_DOWNTO
32130: IFFALSE 32293
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32132: LD_EXP 114
32136: PUSH
32137: LD_VAR 0 6
32141: ARRAY
32142: PUSH
32143: LD_VAR 0 5
32147: ARRAY
32148: PUSH
32149: LD_INT 1
32151: ARRAY
32152: PPUSH
32153: LD_EXP 114
32157: PUSH
32158: LD_VAR 0 6
32162: ARRAY
32163: PUSH
32164: LD_VAR 0 5
32168: ARRAY
32169: PUSH
32170: LD_INT 2
32172: ARRAY
32173: PPUSH
32174: LD_VAR 0 2
32178: PPUSH
32179: LD_VAR 0 3
32183: PPUSH
32184: CALL_OW 298
32188: PUSH
32189: LD_INT 6
32191: LESS
32192: IFFALSE 32291
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32194: LD_EXP 114
32198: PUSH
32199: LD_VAR 0 6
32203: ARRAY
32204: PUSH
32205: LD_VAR 0 5
32209: ARRAY
32210: PUSH
32211: LD_INT 1
32213: ARRAY
32214: PPUSH
32215: LD_EXP 114
32219: PUSH
32220: LD_VAR 0 6
32224: ARRAY
32225: PUSH
32226: LD_VAR 0 5
32230: ARRAY
32231: PUSH
32232: LD_INT 2
32234: ARRAY
32235: PPUSH
32236: LD_VAR 0 1
32240: PPUSH
32241: CALL_OW 255
32245: PPUSH
32246: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32250: LD_ADDR_EXP 114
32254: PUSH
32255: LD_EXP 114
32259: PPUSH
32260: LD_VAR 0 6
32264: PPUSH
32265: LD_EXP 114
32269: PUSH
32270: LD_VAR 0 6
32274: ARRAY
32275: PPUSH
32276: LD_VAR 0 5
32280: PPUSH
32281: CALL_OW 3
32285: PPUSH
32286: CALL_OW 1
32290: ST_TO_ADDR
// end ; end ;
32291: GO 32129
32293: POP
32294: POP
// end ;
32295: LD_VAR 0 4
32299: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32300: LD_INT 0
32302: PPUSH
32303: PPUSH
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
32308: PPUSH
32309: PPUSH
32310: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32311: LD_VAR 0 1
32315: PPUSH
32316: CALL_OW 264
32320: PUSH
32321: LD_EXP 42
32325: EQUAL
32326: NOT
32327: PUSH
32328: LD_VAR 0 1
32332: PUSH
32333: LD_EXP 113
32337: IN
32338: NOT
32339: OR
32340: IFFALSE 32344
// exit ;
32342: GO 32666
// index := GetElementIndex ( minersList , unit ) ;
32344: LD_ADDR_VAR 0 6
32348: PUSH
32349: LD_EXP 113
32353: PPUSH
32354: LD_VAR 0 1
32358: PPUSH
32359: CALL 37822 0 2
32363: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32364: LD_ADDR_VAR 0 8
32368: PUSH
32369: LD_EXP 115
32373: PUSH
32374: LD_EXP 114
32378: PUSH
32379: LD_VAR 0 6
32383: ARRAY
32384: MINUS
32385: ST_TO_ADDR
// if not minesFreeAmount then
32386: LD_VAR 0 8
32390: NOT
32391: IFFALSE 32395
// exit ;
32393: GO 32666
// tmp := [ ] ;
32395: LD_ADDR_VAR 0 7
32399: PUSH
32400: EMPTY
32401: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32402: LD_ADDR_VAR 0 5
32406: PUSH
32407: DOUBLE
32408: LD_INT 1
32410: DEC
32411: ST_TO_ADDR
32412: LD_VAR 0 8
32416: PUSH
32417: FOR_TO
32418: IFFALSE 32613
// begin _d := rand ( 0 , 5 ) ;
32420: LD_ADDR_VAR 0 11
32424: PUSH
32425: LD_INT 0
32427: PPUSH
32428: LD_INT 5
32430: PPUSH
32431: CALL_OW 12
32435: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32436: LD_ADDR_VAR 0 12
32440: PUSH
32441: LD_INT 2
32443: PPUSH
32444: LD_INT 6
32446: PPUSH
32447: CALL_OW 12
32451: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32452: LD_ADDR_VAR 0 9
32456: PUSH
32457: LD_VAR 0 2
32461: PPUSH
32462: LD_VAR 0 11
32466: PPUSH
32467: LD_VAR 0 12
32471: PPUSH
32472: CALL_OW 272
32476: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32477: LD_ADDR_VAR 0 10
32481: PUSH
32482: LD_VAR 0 3
32486: PPUSH
32487: LD_VAR 0 11
32491: PPUSH
32492: LD_VAR 0 12
32496: PPUSH
32497: CALL_OW 273
32501: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32502: LD_VAR 0 9
32506: PPUSH
32507: LD_VAR 0 10
32511: PPUSH
32512: CALL_OW 488
32516: PUSH
32517: LD_VAR 0 9
32521: PUSH
32522: LD_VAR 0 10
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_VAR 0 7
32535: IN
32536: NOT
32537: AND
32538: PUSH
32539: LD_VAR 0 9
32543: PPUSH
32544: LD_VAR 0 10
32548: PPUSH
32549: CALL_OW 458
32553: NOT
32554: AND
32555: IFFALSE 32597
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32557: LD_ADDR_VAR 0 7
32561: PUSH
32562: LD_VAR 0 7
32566: PPUSH
32567: LD_VAR 0 7
32571: PUSH
32572: LD_INT 1
32574: PLUS
32575: PPUSH
32576: LD_VAR 0 9
32580: PUSH
32581: LD_VAR 0 10
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PPUSH
32590: CALL_OW 1
32594: ST_TO_ADDR
32595: GO 32611
// i := i - 1 ;
32597: LD_ADDR_VAR 0 5
32601: PUSH
32602: LD_VAR 0 5
32606: PUSH
32607: LD_INT 1
32609: MINUS
32610: ST_TO_ADDR
// end ;
32611: GO 32417
32613: POP
32614: POP
// for i in tmp do
32615: LD_ADDR_VAR 0 5
32619: PUSH
32620: LD_VAR 0 7
32624: PUSH
32625: FOR_IN
32626: IFFALSE 32664
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32628: LD_VAR 0 1
32632: PPUSH
32633: LD_VAR 0 5
32637: PUSH
32638: LD_INT 1
32640: ARRAY
32641: PPUSH
32642: LD_VAR 0 5
32646: PUSH
32647: LD_INT 2
32649: ARRAY
32650: PPUSH
32651: CALL 31606 0 3
32655: NOT
32656: IFFALSE 32662
// exit ;
32658: POP
32659: POP
32660: GO 32666
32662: GO 32625
32664: POP
32665: POP
// end ;
32666: LD_VAR 0 4
32670: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32671: LD_INT 0
32673: PPUSH
32674: PPUSH
32675: PPUSH
32676: PPUSH
32677: PPUSH
32678: PPUSH
32679: PPUSH
// if not GetClass ( unit ) = class_sniper then
32680: LD_VAR 0 1
32684: PPUSH
32685: CALL_OW 257
32689: PUSH
32690: LD_INT 5
32692: EQUAL
32693: NOT
32694: IFFALSE 32698
// exit ;
32696: GO 33086
// dist := 8 ;
32698: LD_ADDR_VAR 0 5
32702: PUSH
32703: LD_INT 8
32705: ST_TO_ADDR
// viewRange := 12 ;
32706: LD_ADDR_VAR 0 7
32710: PUSH
32711: LD_INT 12
32713: ST_TO_ADDR
// side := GetSide ( unit ) ;
32714: LD_ADDR_VAR 0 6
32718: PUSH
32719: LD_VAR 0 1
32723: PPUSH
32724: CALL_OW 255
32728: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32729: LD_INT 61
32731: PPUSH
32732: LD_VAR 0 6
32736: PPUSH
32737: CALL_OW 321
32741: PUSH
32742: LD_INT 2
32744: EQUAL
32745: IFFALSE 32755
// viewRange := 16 ;
32747: LD_ADDR_VAR 0 7
32751: PUSH
32752: LD_INT 16
32754: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32755: LD_VAR 0 1
32759: PPUSH
32760: LD_VAR 0 2
32764: PPUSH
32765: LD_VAR 0 3
32769: PPUSH
32770: CALL_OW 297
32774: PUSH
32775: LD_VAR 0 5
32779: GREATER
32780: IFFALSE 32859
// begin ComMoveXY ( unit , x , y ) ;
32782: LD_VAR 0 1
32786: PPUSH
32787: LD_VAR 0 2
32791: PPUSH
32792: LD_VAR 0 3
32796: PPUSH
32797: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32801: LD_INT 35
32803: PPUSH
32804: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32808: LD_VAR 0 1
32812: PPUSH
32813: LD_VAR 0 2
32817: PPUSH
32818: LD_VAR 0 3
32822: PPUSH
32823: CALL 67886 0 3
32827: NOT
32828: IFFALSE 32832
// exit ;
32830: GO 33086
// until GetDistUnitXY ( unit , x , y ) < dist ;
32832: LD_VAR 0 1
32836: PPUSH
32837: LD_VAR 0 2
32841: PPUSH
32842: LD_VAR 0 3
32846: PPUSH
32847: CALL_OW 297
32851: PUSH
32852: LD_VAR 0 5
32856: LESS
32857: IFFALSE 32801
// end ; ComTurnXY ( unit , x , y ) ;
32859: LD_VAR 0 1
32863: PPUSH
32864: LD_VAR 0 2
32868: PPUSH
32869: LD_VAR 0 3
32873: PPUSH
32874: CALL_OW 118
// wait ( 5 ) ;
32878: LD_INT 5
32880: PPUSH
32881: CALL_OW 67
// _d := GetDir ( unit ) ;
32885: LD_ADDR_VAR 0 10
32889: PUSH
32890: LD_VAR 0 1
32894: PPUSH
32895: CALL_OW 254
32899: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32900: LD_ADDR_VAR 0 8
32904: PUSH
32905: LD_VAR 0 1
32909: PPUSH
32910: CALL_OW 250
32914: PPUSH
32915: LD_VAR 0 10
32919: PPUSH
32920: LD_VAR 0 5
32924: PPUSH
32925: CALL_OW 272
32929: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32930: LD_ADDR_VAR 0 9
32934: PUSH
32935: LD_VAR 0 1
32939: PPUSH
32940: CALL_OW 251
32944: PPUSH
32945: LD_VAR 0 10
32949: PPUSH
32950: LD_VAR 0 5
32954: PPUSH
32955: CALL_OW 273
32959: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32960: LD_VAR 0 8
32964: PPUSH
32965: LD_VAR 0 9
32969: PPUSH
32970: CALL_OW 488
32974: NOT
32975: IFFALSE 32979
// exit ;
32977: GO 33086
// ComAnimCustom ( unit , 1 ) ;
32979: LD_VAR 0 1
32983: PPUSH
32984: LD_INT 1
32986: PPUSH
32987: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32991: LD_VAR 0 8
32995: PPUSH
32996: LD_VAR 0 9
33000: PPUSH
33001: LD_VAR 0 6
33005: PPUSH
33006: LD_VAR 0 7
33010: PPUSH
33011: CALL_OW 330
// repeat wait ( 1 ) ;
33015: LD_INT 1
33017: PPUSH
33018: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
33022: LD_VAR 0 1
33026: PPUSH
33027: CALL_OW 316
33031: PUSH
33032: LD_VAR 0 1
33036: PPUSH
33037: CALL_OW 314
33041: OR
33042: PUSH
33043: LD_VAR 0 1
33047: PPUSH
33048: CALL_OW 302
33052: NOT
33053: OR
33054: PUSH
33055: LD_VAR 0 1
33059: PPUSH
33060: CALL_OW 301
33064: OR
33065: IFFALSE 33015
// RemoveSeeing ( _x , _y , side ) ;
33067: LD_VAR 0 8
33071: PPUSH
33072: LD_VAR 0 9
33076: PPUSH
33077: LD_VAR 0 6
33081: PPUSH
33082: CALL_OW 331
// end ; end_of_file
33086: LD_VAR 0 4
33090: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33091: LD_INT 0
33093: PPUSH
33094: PPUSH
// if exist_mode then
33095: LD_VAR 0 2
33099: IFFALSE 33124
// unit := CreateCharacter ( prefix & ident ) else
33101: LD_ADDR_VAR 0 5
33105: PUSH
33106: LD_VAR 0 3
33110: PUSH
33111: LD_VAR 0 1
33115: STR
33116: PPUSH
33117: CALL_OW 34
33121: ST_TO_ADDR
33122: GO 33139
// unit := NewCharacter ( ident ) ;
33124: LD_ADDR_VAR 0 5
33128: PUSH
33129: LD_VAR 0 1
33133: PPUSH
33134: CALL_OW 25
33138: ST_TO_ADDR
// result := unit ;
33139: LD_ADDR_VAR 0 4
33143: PUSH
33144: LD_VAR 0 5
33148: ST_TO_ADDR
// end ;
33149: LD_VAR 0 4
33153: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33154: LD_INT 0
33156: PPUSH
33157: PPUSH
// if not side or not nation then
33158: LD_VAR 0 1
33162: NOT
33163: PUSH
33164: LD_VAR 0 2
33168: NOT
33169: OR
33170: IFFALSE 33174
// exit ;
33172: GO 33938
// case nation of nation_american :
33174: LD_VAR 0 2
33178: PUSH
33179: LD_INT 1
33181: DOUBLE
33182: EQUAL
33183: IFTRUE 33187
33185: GO 33401
33187: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33188: LD_ADDR_VAR 0 4
33192: PUSH
33193: LD_INT 35
33195: PUSH
33196: LD_INT 45
33198: PUSH
33199: LD_INT 46
33201: PUSH
33202: LD_INT 47
33204: PUSH
33205: LD_INT 82
33207: PUSH
33208: LD_INT 83
33210: PUSH
33211: LD_INT 84
33213: PUSH
33214: LD_INT 85
33216: PUSH
33217: LD_INT 86
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: LD_INT 2
33225: PUSH
33226: LD_INT 6
33228: PUSH
33229: LD_INT 15
33231: PUSH
33232: LD_INT 16
33234: PUSH
33235: LD_INT 7
33237: PUSH
33238: LD_INT 12
33240: PUSH
33241: LD_INT 13
33243: PUSH
33244: LD_INT 10
33246: PUSH
33247: LD_INT 14
33249: PUSH
33250: LD_INT 20
33252: PUSH
33253: LD_INT 21
33255: PUSH
33256: LD_INT 22
33258: PUSH
33259: LD_INT 25
33261: PUSH
33262: LD_INT 32
33264: PUSH
33265: LD_INT 27
33267: PUSH
33268: LD_INT 36
33270: PUSH
33271: LD_INT 69
33273: PUSH
33274: LD_INT 39
33276: PUSH
33277: LD_INT 34
33279: PUSH
33280: LD_INT 40
33282: PUSH
33283: LD_INT 48
33285: PUSH
33286: LD_INT 49
33288: PUSH
33289: LD_INT 50
33291: PUSH
33292: LD_INT 51
33294: PUSH
33295: LD_INT 52
33297: PUSH
33298: LD_INT 53
33300: PUSH
33301: LD_INT 54
33303: PUSH
33304: LD_INT 55
33306: PUSH
33307: LD_INT 56
33309: PUSH
33310: LD_INT 57
33312: PUSH
33313: LD_INT 58
33315: PUSH
33316: LD_INT 59
33318: PUSH
33319: LD_INT 60
33321: PUSH
33322: LD_INT 61
33324: PUSH
33325: LD_INT 62
33327: PUSH
33328: LD_INT 80
33330: PUSH
33331: LD_INT 82
33333: PUSH
33334: LD_INT 83
33336: PUSH
33337: LD_INT 84
33339: PUSH
33340: LD_INT 85
33342: PUSH
33343: LD_INT 86
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: ST_TO_ADDR
33399: GO 33862
33401: LD_INT 2
33403: DOUBLE
33404: EQUAL
33405: IFTRUE 33409
33407: GO 33631
33409: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
33410: LD_ADDR_VAR 0 4
33414: PUSH
33415: LD_INT 35
33417: PUSH
33418: LD_INT 45
33420: PUSH
33421: LD_INT 46
33423: PUSH
33424: LD_INT 47
33426: PUSH
33427: LD_INT 82
33429: PUSH
33430: LD_INT 83
33432: PUSH
33433: LD_INT 84
33435: PUSH
33436: LD_INT 85
33438: PUSH
33439: LD_INT 87
33441: PUSH
33442: LD_INT 70
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: LD_INT 11
33450: PUSH
33451: LD_INT 3
33453: PUSH
33454: LD_INT 4
33456: PUSH
33457: LD_INT 5
33459: PUSH
33460: LD_INT 6
33462: PUSH
33463: LD_INT 15
33465: PUSH
33466: LD_INT 18
33468: PUSH
33469: LD_INT 7
33471: PUSH
33472: LD_INT 17
33474: PUSH
33475: LD_INT 8
33477: PUSH
33478: LD_INT 20
33480: PUSH
33481: LD_INT 21
33483: PUSH
33484: LD_INT 22
33486: PUSH
33487: LD_INT 72
33489: PUSH
33490: LD_INT 26
33492: PUSH
33493: LD_INT 69
33495: PUSH
33496: LD_INT 39
33498: PUSH
33499: LD_INT 40
33501: PUSH
33502: LD_INT 41
33504: PUSH
33505: LD_INT 42
33507: PUSH
33508: LD_INT 43
33510: PUSH
33511: LD_INT 48
33513: PUSH
33514: LD_INT 49
33516: PUSH
33517: LD_INT 50
33519: PUSH
33520: LD_INT 51
33522: PUSH
33523: LD_INT 52
33525: PUSH
33526: LD_INT 53
33528: PUSH
33529: LD_INT 54
33531: PUSH
33532: LD_INT 55
33534: PUSH
33535: LD_INT 56
33537: PUSH
33538: LD_INT 60
33540: PUSH
33541: LD_INT 61
33543: PUSH
33544: LD_INT 62
33546: PUSH
33547: LD_INT 66
33549: PUSH
33550: LD_INT 67
33552: PUSH
33553: LD_INT 68
33555: PUSH
33556: LD_INT 81
33558: PUSH
33559: LD_INT 82
33561: PUSH
33562: LD_INT 83
33564: PUSH
33565: LD_INT 84
33567: PUSH
33568: LD_INT 85
33570: PUSH
33571: LD_INT 87
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: ST_TO_ADDR
33629: GO 33862
33631: LD_INT 3
33633: DOUBLE
33634: EQUAL
33635: IFTRUE 33639
33637: GO 33861
33639: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33640: LD_ADDR_VAR 0 4
33644: PUSH
33645: LD_INT 46
33647: PUSH
33648: LD_INT 47
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: LD_INT 82
33659: PUSH
33660: LD_INT 83
33662: PUSH
33663: LD_INT 84
33665: PUSH
33666: LD_INT 85
33668: PUSH
33669: LD_INT 86
33671: PUSH
33672: LD_INT 11
33674: PUSH
33675: LD_INT 9
33677: PUSH
33678: LD_INT 20
33680: PUSH
33681: LD_INT 19
33683: PUSH
33684: LD_INT 21
33686: PUSH
33687: LD_INT 24
33689: PUSH
33690: LD_INT 22
33692: PUSH
33693: LD_INT 25
33695: PUSH
33696: LD_INT 28
33698: PUSH
33699: LD_INT 29
33701: PUSH
33702: LD_INT 30
33704: PUSH
33705: LD_INT 31
33707: PUSH
33708: LD_INT 37
33710: PUSH
33711: LD_INT 38
33713: PUSH
33714: LD_INT 32
33716: PUSH
33717: LD_INT 27
33719: PUSH
33720: LD_INT 33
33722: PUSH
33723: LD_INT 69
33725: PUSH
33726: LD_INT 39
33728: PUSH
33729: LD_INT 34
33731: PUSH
33732: LD_INT 40
33734: PUSH
33735: LD_INT 71
33737: PUSH
33738: LD_INT 23
33740: PUSH
33741: LD_INT 44
33743: PUSH
33744: LD_INT 48
33746: PUSH
33747: LD_INT 49
33749: PUSH
33750: LD_INT 50
33752: PUSH
33753: LD_INT 51
33755: PUSH
33756: LD_INT 52
33758: PUSH
33759: LD_INT 53
33761: PUSH
33762: LD_INT 54
33764: PUSH
33765: LD_INT 55
33767: PUSH
33768: LD_INT 56
33770: PUSH
33771: LD_INT 57
33773: PUSH
33774: LD_INT 58
33776: PUSH
33777: LD_INT 59
33779: PUSH
33780: LD_INT 63
33782: PUSH
33783: LD_INT 64
33785: PUSH
33786: LD_INT 65
33788: PUSH
33789: LD_INT 82
33791: PUSH
33792: LD_INT 83
33794: PUSH
33795: LD_INT 84
33797: PUSH
33798: LD_INT 85
33800: PUSH
33801: LD_INT 86
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: ST_TO_ADDR
33859: GO 33862
33861: POP
// if state > - 1 and state < 3 then
33862: LD_VAR 0 3
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: GREATER
33871: PUSH
33872: LD_VAR 0 3
33876: PUSH
33877: LD_INT 3
33879: LESS
33880: AND
33881: IFFALSE 33938
// for i in result do
33883: LD_ADDR_VAR 0 5
33887: PUSH
33888: LD_VAR 0 4
33892: PUSH
33893: FOR_IN
33894: IFFALSE 33936
// if GetTech ( i , side ) <> state then
33896: LD_VAR 0 5
33900: PPUSH
33901: LD_VAR 0 1
33905: PPUSH
33906: CALL_OW 321
33910: PUSH
33911: LD_VAR 0 3
33915: NONEQUAL
33916: IFFALSE 33934
// result := result diff i ;
33918: LD_ADDR_VAR 0 4
33922: PUSH
33923: LD_VAR 0 4
33927: PUSH
33928: LD_VAR 0 5
33932: DIFF
33933: ST_TO_ADDR
33934: GO 33893
33936: POP
33937: POP
// end ;
33938: LD_VAR 0 4
33942: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33943: LD_INT 0
33945: PPUSH
33946: PPUSH
33947: PPUSH
// result := true ;
33948: LD_ADDR_VAR 0 3
33952: PUSH
33953: LD_INT 1
33955: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33956: LD_ADDR_VAR 0 5
33960: PUSH
33961: LD_VAR 0 2
33965: PPUSH
33966: CALL_OW 480
33970: ST_TO_ADDR
// if not tmp then
33971: LD_VAR 0 5
33975: NOT
33976: IFFALSE 33980
// exit ;
33978: GO 34029
// for i in tmp do
33980: LD_ADDR_VAR 0 4
33984: PUSH
33985: LD_VAR 0 5
33989: PUSH
33990: FOR_IN
33991: IFFALSE 34027
// if GetTech ( i , side ) <> state_researched then
33993: LD_VAR 0 4
33997: PPUSH
33998: LD_VAR 0 1
34002: PPUSH
34003: CALL_OW 321
34007: PUSH
34008: LD_INT 2
34010: NONEQUAL
34011: IFFALSE 34025
// begin result := false ;
34013: LD_ADDR_VAR 0 3
34017: PUSH
34018: LD_INT 0
34020: ST_TO_ADDR
// exit ;
34021: POP
34022: POP
34023: GO 34029
// end ;
34025: GO 33990
34027: POP
34028: POP
// end ;
34029: LD_VAR 0 3
34033: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34034: LD_INT 0
34036: PPUSH
34037: PPUSH
34038: PPUSH
34039: PPUSH
34040: PPUSH
34041: PPUSH
34042: PPUSH
34043: PPUSH
34044: PPUSH
34045: PPUSH
34046: PPUSH
34047: PPUSH
34048: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34049: LD_VAR 0 1
34053: NOT
34054: PUSH
34055: LD_VAR 0 1
34059: PPUSH
34060: CALL_OW 257
34064: PUSH
34065: LD_INT 9
34067: NONEQUAL
34068: OR
34069: IFFALSE 34073
// exit ;
34071: GO 34646
// side := GetSide ( unit ) ;
34073: LD_ADDR_VAR 0 9
34077: PUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: CALL_OW 255
34087: ST_TO_ADDR
// tech_space := tech_spacanom ;
34088: LD_ADDR_VAR 0 12
34092: PUSH
34093: LD_INT 29
34095: ST_TO_ADDR
// tech_time := tech_taurad ;
34096: LD_ADDR_VAR 0 13
34100: PUSH
34101: LD_INT 28
34103: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34104: LD_ADDR_VAR 0 11
34108: PUSH
34109: LD_VAR 0 1
34113: PPUSH
34114: CALL_OW 310
34118: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34119: LD_VAR 0 11
34123: PPUSH
34124: CALL_OW 247
34128: PUSH
34129: LD_INT 2
34131: EQUAL
34132: IFFALSE 34136
// exit ;
34134: GO 34646
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34136: LD_ADDR_VAR 0 8
34140: PUSH
34141: LD_INT 81
34143: PUSH
34144: LD_VAR 0 9
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 3
34155: PUSH
34156: LD_INT 21
34158: PUSH
34159: LD_INT 3
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PPUSH
34174: CALL_OW 69
34178: ST_TO_ADDR
// if not tmp then
34179: LD_VAR 0 8
34183: NOT
34184: IFFALSE 34188
// exit ;
34186: GO 34646
// if in_unit then
34188: LD_VAR 0 11
34192: IFFALSE 34216
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34194: LD_ADDR_VAR 0 10
34198: PUSH
34199: LD_VAR 0 8
34203: PPUSH
34204: LD_VAR 0 11
34208: PPUSH
34209: CALL_OW 74
34213: ST_TO_ADDR
34214: GO 34236
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34216: LD_ADDR_VAR 0 10
34220: PUSH
34221: LD_VAR 0 8
34225: PPUSH
34226: LD_VAR 0 1
34230: PPUSH
34231: CALL_OW 74
34235: ST_TO_ADDR
// if not enemy then
34236: LD_VAR 0 10
34240: NOT
34241: IFFALSE 34245
// exit ;
34243: GO 34646
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34245: LD_VAR 0 11
34249: PUSH
34250: LD_VAR 0 11
34254: PPUSH
34255: LD_VAR 0 10
34259: PPUSH
34260: CALL_OW 296
34264: PUSH
34265: LD_INT 13
34267: GREATER
34268: AND
34269: PUSH
34270: LD_VAR 0 1
34274: PPUSH
34275: LD_VAR 0 10
34279: PPUSH
34280: CALL_OW 296
34284: PUSH
34285: LD_INT 12
34287: GREATER
34288: OR
34289: IFFALSE 34293
// exit ;
34291: GO 34646
// missile := [ 1 ] ;
34293: LD_ADDR_VAR 0 14
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: EMPTY
34302: LIST
34303: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34304: LD_VAR 0 9
34308: PPUSH
34309: LD_VAR 0 12
34313: PPUSH
34314: CALL_OW 325
34318: IFFALSE 34347
// missile := Insert ( missile , missile + 1 , 2 ) ;
34320: LD_ADDR_VAR 0 14
34324: PUSH
34325: LD_VAR 0 14
34329: PPUSH
34330: LD_VAR 0 14
34334: PUSH
34335: LD_INT 1
34337: PLUS
34338: PPUSH
34339: LD_INT 2
34341: PPUSH
34342: CALL_OW 2
34346: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34347: LD_VAR 0 9
34351: PPUSH
34352: LD_VAR 0 13
34356: PPUSH
34357: CALL_OW 325
34361: PUSH
34362: LD_VAR 0 10
34366: PPUSH
34367: CALL_OW 255
34371: PPUSH
34372: LD_VAR 0 13
34376: PPUSH
34377: CALL_OW 325
34381: NOT
34382: AND
34383: IFFALSE 34412
// missile := Insert ( missile , missile + 1 , 3 ) ;
34385: LD_ADDR_VAR 0 14
34389: PUSH
34390: LD_VAR 0 14
34394: PPUSH
34395: LD_VAR 0 14
34399: PUSH
34400: LD_INT 1
34402: PLUS
34403: PPUSH
34404: LD_INT 3
34406: PPUSH
34407: CALL_OW 2
34411: ST_TO_ADDR
// if missile < 2 then
34412: LD_VAR 0 14
34416: PUSH
34417: LD_INT 2
34419: LESS
34420: IFFALSE 34424
// exit ;
34422: GO 34646
// x := GetX ( enemy ) ;
34424: LD_ADDR_VAR 0 4
34428: PUSH
34429: LD_VAR 0 10
34433: PPUSH
34434: CALL_OW 250
34438: ST_TO_ADDR
// y := GetY ( enemy ) ;
34439: LD_ADDR_VAR 0 5
34443: PUSH
34444: LD_VAR 0 10
34448: PPUSH
34449: CALL_OW 251
34453: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34454: LD_ADDR_VAR 0 6
34458: PUSH
34459: LD_VAR 0 4
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PPUSH
34468: LD_INT 1
34470: PPUSH
34471: CALL_OW 12
34475: PLUS
34476: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34477: LD_ADDR_VAR 0 7
34481: PUSH
34482: LD_VAR 0 5
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PPUSH
34491: LD_INT 1
34493: PPUSH
34494: CALL_OW 12
34498: PLUS
34499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34500: LD_VAR 0 6
34504: PPUSH
34505: LD_VAR 0 7
34509: PPUSH
34510: CALL_OW 488
34514: NOT
34515: IFFALSE 34537
// begin _x := x ;
34517: LD_ADDR_VAR 0 6
34521: PUSH
34522: LD_VAR 0 4
34526: ST_TO_ADDR
// _y := y ;
34527: LD_ADDR_VAR 0 7
34531: PUSH
34532: LD_VAR 0 5
34536: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34537: LD_ADDR_VAR 0 3
34541: PUSH
34542: LD_INT 1
34544: PPUSH
34545: LD_VAR 0 14
34549: PPUSH
34550: CALL_OW 12
34554: ST_TO_ADDR
// case i of 1 :
34555: LD_VAR 0 3
34559: PUSH
34560: LD_INT 1
34562: DOUBLE
34563: EQUAL
34564: IFTRUE 34568
34566: GO 34585
34568: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34569: LD_VAR 0 1
34573: PPUSH
34574: LD_VAR 0 10
34578: PPUSH
34579: CALL_OW 115
34583: GO 34646
34585: LD_INT 2
34587: DOUBLE
34588: EQUAL
34589: IFTRUE 34593
34591: GO 34615
34593: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34594: LD_VAR 0 1
34598: PPUSH
34599: LD_VAR 0 6
34603: PPUSH
34604: LD_VAR 0 7
34608: PPUSH
34609: CALL_OW 153
34613: GO 34646
34615: LD_INT 3
34617: DOUBLE
34618: EQUAL
34619: IFTRUE 34623
34621: GO 34645
34623: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34624: LD_VAR 0 1
34628: PPUSH
34629: LD_VAR 0 6
34633: PPUSH
34634: LD_VAR 0 7
34638: PPUSH
34639: CALL_OW 154
34643: GO 34646
34645: POP
// end ;
34646: LD_VAR 0 2
34650: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34651: LD_INT 0
34653: PPUSH
34654: PPUSH
34655: PPUSH
34656: PPUSH
34657: PPUSH
34658: PPUSH
// if not unit or not building then
34659: LD_VAR 0 1
34663: NOT
34664: PUSH
34665: LD_VAR 0 2
34669: NOT
34670: OR
34671: IFFALSE 34675
// exit ;
34673: GO 34833
// x := GetX ( building ) ;
34675: LD_ADDR_VAR 0 5
34679: PUSH
34680: LD_VAR 0 2
34684: PPUSH
34685: CALL_OW 250
34689: ST_TO_ADDR
// y := GetY ( building ) ;
34690: LD_ADDR_VAR 0 6
34694: PUSH
34695: LD_VAR 0 2
34699: PPUSH
34700: CALL_OW 251
34704: ST_TO_ADDR
// for i = 0 to 5 do
34705: LD_ADDR_VAR 0 4
34709: PUSH
34710: DOUBLE
34711: LD_INT 0
34713: DEC
34714: ST_TO_ADDR
34715: LD_INT 5
34717: PUSH
34718: FOR_TO
34719: IFFALSE 34831
// begin _x := ShiftX ( x , i , 3 ) ;
34721: LD_ADDR_VAR 0 7
34725: PUSH
34726: LD_VAR 0 5
34730: PPUSH
34731: LD_VAR 0 4
34735: PPUSH
34736: LD_INT 3
34738: PPUSH
34739: CALL_OW 272
34743: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34744: LD_ADDR_VAR 0 8
34748: PUSH
34749: LD_VAR 0 6
34753: PPUSH
34754: LD_VAR 0 4
34758: PPUSH
34759: LD_INT 3
34761: PPUSH
34762: CALL_OW 273
34766: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34767: LD_VAR 0 7
34771: PPUSH
34772: LD_VAR 0 8
34776: PPUSH
34777: CALL_OW 488
34781: NOT
34782: IFFALSE 34786
// continue ;
34784: GO 34718
// if HexInfo ( _x , _y ) = 0 then
34786: LD_VAR 0 7
34790: PPUSH
34791: LD_VAR 0 8
34795: PPUSH
34796: CALL_OW 428
34800: PUSH
34801: LD_INT 0
34803: EQUAL
34804: IFFALSE 34829
// begin ComMoveXY ( unit , _x , _y ) ;
34806: LD_VAR 0 1
34810: PPUSH
34811: LD_VAR 0 7
34815: PPUSH
34816: LD_VAR 0 8
34820: PPUSH
34821: CALL_OW 111
// exit ;
34825: POP
34826: POP
34827: GO 34833
// end ; end ;
34829: GO 34718
34831: POP
34832: POP
// end ;
34833: LD_VAR 0 3
34837: RET
// export function ScanBase ( side , base_area ) ; begin
34838: LD_INT 0
34840: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34841: LD_ADDR_VAR 0 3
34845: PUSH
34846: LD_VAR 0 2
34850: PPUSH
34851: LD_INT 81
34853: PUSH
34854: LD_VAR 0 1
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PPUSH
34863: CALL_OW 70
34867: ST_TO_ADDR
// end ;
34868: LD_VAR 0 3
34872: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34873: LD_INT 0
34875: PPUSH
34876: PPUSH
34877: PPUSH
34878: PPUSH
// result := false ;
34879: LD_ADDR_VAR 0 2
34883: PUSH
34884: LD_INT 0
34886: ST_TO_ADDR
// side := GetSide ( unit ) ;
34887: LD_ADDR_VAR 0 3
34891: PUSH
34892: LD_VAR 0 1
34896: PPUSH
34897: CALL_OW 255
34901: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34902: LD_ADDR_VAR 0 4
34906: PUSH
34907: LD_VAR 0 1
34911: PPUSH
34912: CALL_OW 248
34916: ST_TO_ADDR
// case nat of 1 :
34917: LD_VAR 0 4
34921: PUSH
34922: LD_INT 1
34924: DOUBLE
34925: EQUAL
34926: IFTRUE 34930
34928: GO 34941
34930: POP
// tech := tech_lassight ; 2 :
34931: LD_ADDR_VAR 0 5
34935: PUSH
34936: LD_INT 12
34938: ST_TO_ADDR
34939: GO 34980
34941: LD_INT 2
34943: DOUBLE
34944: EQUAL
34945: IFTRUE 34949
34947: GO 34960
34949: POP
// tech := tech_mortar ; 3 :
34950: LD_ADDR_VAR 0 5
34954: PUSH
34955: LD_INT 41
34957: ST_TO_ADDR
34958: GO 34980
34960: LD_INT 3
34962: DOUBLE
34963: EQUAL
34964: IFTRUE 34968
34966: GO 34979
34968: POP
// tech := tech_bazooka ; end ;
34969: LD_ADDR_VAR 0 5
34973: PUSH
34974: LD_INT 44
34976: ST_TO_ADDR
34977: GO 34980
34979: POP
// if Researched ( side , tech ) then
34980: LD_VAR 0 3
34984: PPUSH
34985: LD_VAR 0 5
34989: PPUSH
34990: CALL_OW 325
34994: IFFALSE 35021
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34996: LD_ADDR_VAR 0 2
35000: PUSH
35001: LD_INT 5
35003: PUSH
35004: LD_INT 8
35006: PUSH
35007: LD_INT 9
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: LIST
35014: PUSH
35015: LD_VAR 0 4
35019: ARRAY
35020: ST_TO_ADDR
// end ;
35021: LD_VAR 0 2
35025: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35026: LD_INT 0
35028: PPUSH
35029: PPUSH
35030: PPUSH
// if not mines then
35031: LD_VAR 0 2
35035: NOT
35036: IFFALSE 35040
// exit ;
35038: GO 35184
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35040: LD_ADDR_VAR 0 5
35044: PUSH
35045: LD_INT 81
35047: PUSH
35048: LD_VAR 0 1
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 3
35059: PUSH
35060: LD_INT 21
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PPUSH
35078: CALL_OW 69
35082: ST_TO_ADDR
// for i in mines do
35083: LD_ADDR_VAR 0 4
35087: PUSH
35088: LD_VAR 0 2
35092: PUSH
35093: FOR_IN
35094: IFFALSE 35182
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35096: LD_VAR 0 4
35100: PUSH
35101: LD_INT 1
35103: ARRAY
35104: PPUSH
35105: LD_VAR 0 4
35109: PUSH
35110: LD_INT 2
35112: ARRAY
35113: PPUSH
35114: CALL_OW 458
35118: NOT
35119: IFFALSE 35123
// continue ;
35121: GO 35093
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35123: LD_VAR 0 4
35127: PUSH
35128: LD_INT 1
35130: ARRAY
35131: PPUSH
35132: LD_VAR 0 4
35136: PUSH
35137: LD_INT 2
35139: ARRAY
35140: PPUSH
35141: CALL_OW 428
35145: PUSH
35146: LD_VAR 0 5
35150: IN
35151: IFFALSE 35180
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35153: LD_VAR 0 4
35157: PUSH
35158: LD_INT 1
35160: ARRAY
35161: PPUSH
35162: LD_VAR 0 4
35166: PUSH
35167: LD_INT 2
35169: ARRAY
35170: PPUSH
35171: LD_VAR 0 1
35175: PPUSH
35176: CALL_OW 456
// end ;
35180: GO 35093
35182: POP
35183: POP
// end ;
35184: LD_VAR 0 3
35188: RET
// export function Count ( array ) ; var i ; begin
35189: LD_INT 0
35191: PPUSH
35192: PPUSH
// result := 0 ;
35193: LD_ADDR_VAR 0 2
35197: PUSH
35198: LD_INT 0
35200: ST_TO_ADDR
// for i in array do
35201: LD_ADDR_VAR 0 3
35205: PUSH
35206: LD_VAR 0 1
35210: PUSH
35211: FOR_IN
35212: IFFALSE 35236
// if i then
35214: LD_VAR 0 3
35218: IFFALSE 35234
// result := result + 1 ;
35220: LD_ADDR_VAR 0 2
35224: PUSH
35225: LD_VAR 0 2
35229: PUSH
35230: LD_INT 1
35232: PLUS
35233: ST_TO_ADDR
35234: GO 35211
35236: POP
35237: POP
// end ;
35238: LD_VAR 0 2
35242: RET
// export function IsEmpty ( building ) ; begin
35243: LD_INT 0
35245: PPUSH
// if not building then
35246: LD_VAR 0 1
35250: NOT
35251: IFFALSE 35255
// exit ;
35253: GO 35298
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35255: LD_ADDR_VAR 0 2
35259: PUSH
35260: LD_VAR 0 1
35264: PUSH
35265: LD_INT 22
35267: PUSH
35268: LD_VAR 0 1
35272: PPUSH
35273: CALL_OW 255
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 58
35284: PUSH
35285: EMPTY
35286: LIST
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PPUSH
35292: CALL_OW 69
35296: IN
35297: ST_TO_ADDR
// end ;
35298: LD_VAR 0 2
35302: RET
// export function IsNotFull ( building ) ; begin
35303: LD_INT 0
35305: PPUSH
// if not building then
35306: LD_VAR 0 1
35310: NOT
35311: IFFALSE 35315
// exit ;
35313: GO 35334
// result := UnitsInside ( building ) < 6 ;
35315: LD_ADDR_VAR 0 2
35319: PUSH
35320: LD_VAR 0 1
35324: PPUSH
35325: CALL_OW 313
35329: PUSH
35330: LD_INT 6
35332: LESS
35333: ST_TO_ADDR
// end ;
35334: LD_VAR 0 2
35338: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35339: LD_INT 0
35341: PPUSH
35342: PPUSH
35343: PPUSH
35344: PPUSH
// tmp := [ ] ;
35345: LD_ADDR_VAR 0 3
35349: PUSH
35350: EMPTY
35351: ST_TO_ADDR
// list := [ ] ;
35352: LD_ADDR_VAR 0 5
35356: PUSH
35357: EMPTY
35358: ST_TO_ADDR
// for i = 16 to 25 do
35359: LD_ADDR_VAR 0 4
35363: PUSH
35364: DOUBLE
35365: LD_INT 16
35367: DEC
35368: ST_TO_ADDR
35369: LD_INT 25
35371: PUSH
35372: FOR_TO
35373: IFFALSE 35446
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35375: LD_ADDR_VAR 0 3
35379: PUSH
35380: LD_VAR 0 3
35384: PUSH
35385: LD_INT 22
35387: PUSH
35388: LD_VAR 0 1
35392: PPUSH
35393: CALL_OW 255
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 91
35404: PUSH
35405: LD_VAR 0 1
35409: PUSH
35410: LD_INT 6
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 30
35420: PUSH
35421: LD_VAR 0 4
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: LIST
35434: PUSH
35435: EMPTY
35436: LIST
35437: PPUSH
35438: CALL_OW 69
35442: ADD
35443: ST_TO_ADDR
35444: GO 35372
35446: POP
35447: POP
// for i = 1 to tmp do
35448: LD_ADDR_VAR 0 4
35452: PUSH
35453: DOUBLE
35454: LD_INT 1
35456: DEC
35457: ST_TO_ADDR
35458: LD_VAR 0 3
35462: PUSH
35463: FOR_TO
35464: IFFALSE 35552
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35466: LD_ADDR_VAR 0 5
35470: PUSH
35471: LD_VAR 0 5
35475: PUSH
35476: LD_VAR 0 3
35480: PUSH
35481: LD_VAR 0 4
35485: ARRAY
35486: PPUSH
35487: CALL_OW 266
35491: PUSH
35492: LD_VAR 0 3
35496: PUSH
35497: LD_VAR 0 4
35501: ARRAY
35502: PPUSH
35503: CALL_OW 250
35507: PUSH
35508: LD_VAR 0 3
35512: PUSH
35513: LD_VAR 0 4
35517: ARRAY
35518: PPUSH
35519: CALL_OW 251
35523: PUSH
35524: LD_VAR 0 3
35528: PUSH
35529: LD_VAR 0 4
35533: ARRAY
35534: PPUSH
35535: CALL_OW 254
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: PUSH
35546: EMPTY
35547: LIST
35548: ADD
35549: ST_TO_ADDR
35550: GO 35463
35552: POP
35553: POP
// result := list ;
35554: LD_ADDR_VAR 0 2
35558: PUSH
35559: LD_VAR 0 5
35563: ST_TO_ADDR
// end ;
35564: LD_VAR 0 2
35568: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35569: LD_INT 0
35571: PPUSH
35572: PPUSH
35573: PPUSH
35574: PPUSH
35575: PPUSH
35576: PPUSH
35577: PPUSH
// if not factory then
35578: LD_VAR 0 1
35582: NOT
35583: IFFALSE 35587
// exit ;
35585: GO 36180
// if control = control_apeman then
35587: LD_VAR 0 4
35591: PUSH
35592: LD_INT 5
35594: EQUAL
35595: IFFALSE 35704
// begin tmp := UnitsInside ( factory ) ;
35597: LD_ADDR_VAR 0 8
35601: PUSH
35602: LD_VAR 0 1
35606: PPUSH
35607: CALL_OW 313
35611: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35612: LD_VAR 0 8
35616: PPUSH
35617: LD_INT 25
35619: PUSH
35620: LD_INT 12
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PPUSH
35627: CALL_OW 72
35631: NOT
35632: IFFALSE 35642
// control := control_manual ;
35634: LD_ADDR_VAR 0 4
35638: PUSH
35639: LD_INT 1
35641: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35642: LD_ADDR_VAR 0 8
35646: PUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL 35339 0 1
35656: ST_TO_ADDR
// if tmp then
35657: LD_VAR 0 8
35661: IFFALSE 35704
// begin for i in tmp do
35663: LD_ADDR_VAR 0 7
35667: PUSH
35668: LD_VAR 0 8
35672: PUSH
35673: FOR_IN
35674: IFFALSE 35702
// if i [ 1 ] = b_ext_radio then
35676: LD_VAR 0 7
35680: PUSH
35681: LD_INT 1
35683: ARRAY
35684: PUSH
35685: LD_INT 22
35687: EQUAL
35688: IFFALSE 35700
// begin control := control_remote ;
35690: LD_ADDR_VAR 0 4
35694: PUSH
35695: LD_INT 2
35697: ST_TO_ADDR
// break ;
35698: GO 35702
// end ;
35700: GO 35673
35702: POP
35703: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35704: LD_VAR 0 1
35708: PPUSH
35709: LD_VAR 0 2
35713: PPUSH
35714: LD_VAR 0 3
35718: PPUSH
35719: LD_VAR 0 4
35723: PPUSH
35724: LD_VAR 0 5
35728: PPUSH
35729: CALL_OW 448
35733: IFFALSE 35768
// begin result := [ chassis , engine , control , weapon ] ;
35735: LD_ADDR_VAR 0 6
35739: PUSH
35740: LD_VAR 0 2
35744: PUSH
35745: LD_VAR 0 3
35749: PUSH
35750: LD_VAR 0 4
35754: PUSH
35755: LD_VAR 0 5
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: ST_TO_ADDR
// exit ;
35766: GO 36180
// end ; _chassis := AvailableChassisList ( factory ) ;
35768: LD_ADDR_VAR 0 9
35772: PUSH
35773: LD_VAR 0 1
35777: PPUSH
35778: CALL_OW 475
35782: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35783: LD_ADDR_VAR 0 11
35787: PUSH
35788: LD_VAR 0 1
35792: PPUSH
35793: CALL_OW 476
35797: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35798: LD_ADDR_VAR 0 12
35802: PUSH
35803: LD_VAR 0 1
35807: PPUSH
35808: CALL_OW 477
35812: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35813: LD_ADDR_VAR 0 10
35817: PUSH
35818: LD_VAR 0 1
35822: PPUSH
35823: CALL_OW 478
35827: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35828: LD_VAR 0 9
35832: NOT
35833: PUSH
35834: LD_VAR 0 11
35838: NOT
35839: OR
35840: PUSH
35841: LD_VAR 0 12
35845: NOT
35846: OR
35847: PUSH
35848: LD_VAR 0 10
35852: NOT
35853: OR
35854: IFFALSE 35889
// begin result := [ chassis , engine , control , weapon ] ;
35856: LD_ADDR_VAR 0 6
35860: PUSH
35861: LD_VAR 0 2
35865: PUSH
35866: LD_VAR 0 3
35870: PUSH
35871: LD_VAR 0 4
35875: PUSH
35876: LD_VAR 0 5
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: ST_TO_ADDR
// exit ;
35887: GO 36180
// end ; if not chassis in _chassis then
35889: LD_VAR 0 2
35893: PUSH
35894: LD_VAR 0 9
35898: IN
35899: NOT
35900: IFFALSE 35926
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35902: LD_ADDR_VAR 0 2
35906: PUSH
35907: LD_VAR 0 9
35911: PUSH
35912: LD_INT 1
35914: PPUSH
35915: LD_VAR 0 9
35919: PPUSH
35920: CALL_OW 12
35924: ARRAY
35925: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35926: LD_VAR 0 2
35930: PPUSH
35931: LD_VAR 0 3
35935: PPUSH
35936: CALL 36185 0 2
35940: NOT
35941: IFFALSE 36000
// repeat engine := _engine [ 1 ] ;
35943: LD_ADDR_VAR 0 3
35947: PUSH
35948: LD_VAR 0 11
35952: PUSH
35953: LD_INT 1
35955: ARRAY
35956: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35957: LD_ADDR_VAR 0 11
35961: PUSH
35962: LD_VAR 0 11
35966: PPUSH
35967: LD_INT 1
35969: PPUSH
35970: CALL_OW 3
35974: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35975: LD_VAR 0 2
35979: PPUSH
35980: LD_VAR 0 3
35984: PPUSH
35985: CALL 36185 0 2
35989: PUSH
35990: LD_VAR 0 11
35994: PUSH
35995: EMPTY
35996: EQUAL
35997: OR
35998: IFFALSE 35943
// if not control in _control then
36000: LD_VAR 0 4
36004: PUSH
36005: LD_VAR 0 12
36009: IN
36010: NOT
36011: IFFALSE 36037
// control := _control [ rand ( 1 , _control ) ] ;
36013: LD_ADDR_VAR 0 4
36017: PUSH
36018: LD_VAR 0 12
36022: PUSH
36023: LD_INT 1
36025: PPUSH
36026: LD_VAR 0 12
36030: PPUSH
36031: CALL_OW 12
36035: ARRAY
36036: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36037: LD_VAR 0 2
36041: PPUSH
36042: LD_VAR 0 5
36046: PPUSH
36047: CALL 36405 0 2
36051: NOT
36052: IFFALSE 36111
// repeat weapon := _weapon [ 1 ] ;
36054: LD_ADDR_VAR 0 5
36058: PUSH
36059: LD_VAR 0 10
36063: PUSH
36064: LD_INT 1
36066: ARRAY
36067: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36068: LD_ADDR_VAR 0 10
36072: PUSH
36073: LD_VAR 0 10
36077: PPUSH
36078: LD_INT 1
36080: PPUSH
36081: CALL_OW 3
36085: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36086: LD_VAR 0 2
36090: PPUSH
36091: LD_VAR 0 5
36095: PPUSH
36096: CALL 36405 0 2
36100: PUSH
36101: LD_VAR 0 10
36105: PUSH
36106: EMPTY
36107: EQUAL
36108: OR
36109: IFFALSE 36054
// result := [ ] ;
36111: LD_ADDR_VAR 0 6
36115: PUSH
36116: EMPTY
36117: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36118: LD_VAR 0 1
36122: PPUSH
36123: LD_VAR 0 2
36127: PPUSH
36128: LD_VAR 0 3
36132: PPUSH
36133: LD_VAR 0 4
36137: PPUSH
36138: LD_VAR 0 5
36142: PPUSH
36143: CALL_OW 448
36147: IFFALSE 36180
// result := [ chassis , engine , control , weapon ] ;
36149: LD_ADDR_VAR 0 6
36153: PUSH
36154: LD_VAR 0 2
36158: PUSH
36159: LD_VAR 0 3
36163: PUSH
36164: LD_VAR 0 4
36168: PUSH
36169: LD_VAR 0 5
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: ST_TO_ADDR
// end ;
36180: LD_VAR 0 6
36184: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36185: LD_INT 0
36187: PPUSH
// if not chassis or not engine then
36188: LD_VAR 0 1
36192: NOT
36193: PUSH
36194: LD_VAR 0 2
36198: NOT
36199: OR
36200: IFFALSE 36204
// exit ;
36202: GO 36400
// case engine of engine_solar :
36204: LD_VAR 0 2
36208: PUSH
36209: LD_INT 2
36211: DOUBLE
36212: EQUAL
36213: IFTRUE 36217
36215: GO 36255
36217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36218: LD_ADDR_VAR 0 3
36222: PUSH
36223: LD_INT 11
36225: PUSH
36226: LD_INT 12
36228: PUSH
36229: LD_INT 13
36231: PUSH
36232: LD_INT 14
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: LD_INT 3
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: ST_TO_ADDR
36253: GO 36384
36255: LD_INT 1
36257: DOUBLE
36258: EQUAL
36259: IFTRUE 36263
36261: GO 36325
36263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36264: LD_ADDR_VAR 0 3
36268: PUSH
36269: LD_INT 11
36271: PUSH
36272: LD_INT 12
36274: PUSH
36275: LD_INT 13
36277: PUSH
36278: LD_INT 14
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: LD_INT 2
36286: PUSH
36287: LD_INT 3
36289: PUSH
36290: LD_INT 4
36292: PUSH
36293: LD_INT 5
36295: PUSH
36296: LD_INT 21
36298: PUSH
36299: LD_INT 23
36301: PUSH
36302: LD_INT 22
36304: PUSH
36305: LD_INT 24
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: ST_TO_ADDR
36323: GO 36384
36325: LD_INT 3
36327: DOUBLE
36328: EQUAL
36329: IFTRUE 36333
36331: GO 36383
36333: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36334: LD_ADDR_VAR 0 3
36338: PUSH
36339: LD_INT 13
36341: PUSH
36342: LD_INT 14
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: LD_INT 3
36350: PUSH
36351: LD_INT 4
36353: PUSH
36354: LD_INT 5
36356: PUSH
36357: LD_INT 21
36359: PUSH
36360: LD_INT 22
36362: PUSH
36363: LD_INT 23
36365: PUSH
36366: LD_INT 24
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: ST_TO_ADDR
36381: GO 36384
36383: POP
// result := ( chassis in result ) ;
36384: LD_ADDR_VAR 0 3
36388: PUSH
36389: LD_VAR 0 1
36393: PUSH
36394: LD_VAR 0 3
36398: IN
36399: ST_TO_ADDR
// end ;
36400: LD_VAR 0 3
36404: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36405: LD_INT 0
36407: PPUSH
// if not chassis or not weapon then
36408: LD_VAR 0 1
36412: NOT
36413: PUSH
36414: LD_VAR 0 2
36418: NOT
36419: OR
36420: IFFALSE 36424
// exit ;
36422: GO 37450
// case weapon of us_machine_gun :
36424: LD_VAR 0 2
36428: PUSH
36429: LD_INT 2
36431: DOUBLE
36432: EQUAL
36433: IFTRUE 36437
36435: GO 36467
36437: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36438: LD_ADDR_VAR 0 3
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: LD_INT 3
36451: PUSH
36452: LD_INT 4
36454: PUSH
36455: LD_INT 5
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: ST_TO_ADDR
36465: GO 37434
36467: LD_INT 3
36469: DOUBLE
36470: EQUAL
36471: IFTRUE 36475
36473: GO 36505
36475: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36476: LD_ADDR_VAR 0 3
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: LD_INT 3
36489: PUSH
36490: LD_INT 4
36492: PUSH
36493: LD_INT 5
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: ST_TO_ADDR
36503: GO 37434
36505: LD_INT 11
36507: DOUBLE
36508: EQUAL
36509: IFTRUE 36513
36511: GO 36543
36513: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36514: LD_ADDR_VAR 0 3
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: LD_INT 3
36527: PUSH
36528: LD_INT 4
36530: PUSH
36531: LD_INT 5
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: ST_TO_ADDR
36541: GO 37434
36543: LD_INT 4
36545: DOUBLE
36546: EQUAL
36547: IFTRUE 36551
36549: GO 36577
36551: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36552: LD_ADDR_VAR 0 3
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 3
36562: PUSH
36563: LD_INT 4
36565: PUSH
36566: LD_INT 5
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: ST_TO_ADDR
36575: GO 37434
36577: LD_INT 5
36579: DOUBLE
36580: EQUAL
36581: IFTRUE 36585
36583: GO 36611
36585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36586: LD_ADDR_VAR 0 3
36590: PUSH
36591: LD_INT 2
36593: PUSH
36594: LD_INT 3
36596: PUSH
36597: LD_INT 4
36599: PUSH
36600: LD_INT 5
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: ST_TO_ADDR
36609: GO 37434
36611: LD_INT 9
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36645
36619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36620: LD_ADDR_VAR 0 3
36624: PUSH
36625: LD_INT 2
36627: PUSH
36628: LD_INT 3
36630: PUSH
36631: LD_INT 4
36633: PUSH
36634: LD_INT 5
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: ST_TO_ADDR
36643: GO 37434
36645: LD_INT 7
36647: DOUBLE
36648: EQUAL
36649: IFTRUE 36653
36651: GO 36679
36653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36654: LD_ADDR_VAR 0 3
36658: PUSH
36659: LD_INT 2
36661: PUSH
36662: LD_INT 3
36664: PUSH
36665: LD_INT 4
36667: PUSH
36668: LD_INT 5
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: ST_TO_ADDR
36677: GO 37434
36679: LD_INT 12
36681: DOUBLE
36682: EQUAL
36683: IFTRUE 36687
36685: GO 36713
36687: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36688: LD_ADDR_VAR 0 3
36692: PUSH
36693: LD_INT 2
36695: PUSH
36696: LD_INT 3
36698: PUSH
36699: LD_INT 4
36701: PUSH
36702: LD_INT 5
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: ST_TO_ADDR
36711: GO 37434
36713: LD_INT 13
36715: DOUBLE
36716: EQUAL
36717: IFTRUE 36721
36719: GO 36747
36721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36722: LD_ADDR_VAR 0 3
36726: PUSH
36727: LD_INT 2
36729: PUSH
36730: LD_INT 3
36732: PUSH
36733: LD_INT 4
36735: PUSH
36736: LD_INT 5
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: ST_TO_ADDR
36745: GO 37434
36747: LD_INT 14
36749: DOUBLE
36750: EQUAL
36751: IFTRUE 36755
36753: GO 36773
36755: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36756: LD_ADDR_VAR 0 3
36760: PUSH
36761: LD_INT 4
36763: PUSH
36764: LD_INT 5
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: ST_TO_ADDR
36771: GO 37434
36773: LD_INT 6
36775: DOUBLE
36776: EQUAL
36777: IFTRUE 36781
36779: GO 36799
36781: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36782: LD_ADDR_VAR 0 3
36786: PUSH
36787: LD_INT 4
36789: PUSH
36790: LD_INT 5
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: ST_TO_ADDR
36797: GO 37434
36799: LD_INT 10
36801: DOUBLE
36802: EQUAL
36803: IFTRUE 36807
36805: GO 36825
36807: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36808: LD_ADDR_VAR 0 3
36812: PUSH
36813: LD_INT 4
36815: PUSH
36816: LD_INT 5
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: ST_TO_ADDR
36823: GO 37434
36825: LD_INT 22
36827: DOUBLE
36828: EQUAL
36829: IFTRUE 36833
36831: GO 36859
36833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36834: LD_ADDR_VAR 0 3
36838: PUSH
36839: LD_INT 11
36841: PUSH
36842: LD_INT 12
36844: PUSH
36845: LD_INT 13
36847: PUSH
36848: LD_INT 14
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: ST_TO_ADDR
36857: GO 37434
36859: LD_INT 23
36861: DOUBLE
36862: EQUAL
36863: IFTRUE 36867
36865: GO 36893
36867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36868: LD_ADDR_VAR 0 3
36872: PUSH
36873: LD_INT 11
36875: PUSH
36876: LD_INT 12
36878: PUSH
36879: LD_INT 13
36881: PUSH
36882: LD_INT 14
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
36891: GO 37434
36893: LD_INT 24
36895: DOUBLE
36896: EQUAL
36897: IFTRUE 36901
36899: GO 36927
36901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36902: LD_ADDR_VAR 0 3
36906: PUSH
36907: LD_INT 11
36909: PUSH
36910: LD_INT 12
36912: PUSH
36913: LD_INT 13
36915: PUSH
36916: LD_INT 14
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: ST_TO_ADDR
36925: GO 37434
36927: LD_INT 30
36929: DOUBLE
36930: EQUAL
36931: IFTRUE 36935
36933: GO 36961
36935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36936: LD_ADDR_VAR 0 3
36940: PUSH
36941: LD_INT 11
36943: PUSH
36944: LD_INT 12
36946: PUSH
36947: LD_INT 13
36949: PUSH
36950: LD_INT 14
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: ST_TO_ADDR
36959: GO 37434
36961: LD_INT 25
36963: DOUBLE
36964: EQUAL
36965: IFTRUE 36969
36967: GO 36987
36969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36970: LD_ADDR_VAR 0 3
36974: PUSH
36975: LD_INT 13
36977: PUSH
36978: LD_INT 14
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: ST_TO_ADDR
36985: GO 37434
36987: LD_INT 27
36989: DOUBLE
36990: EQUAL
36991: IFTRUE 36995
36993: GO 37013
36995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36996: LD_ADDR_VAR 0 3
37000: PUSH
37001: LD_INT 13
37003: PUSH
37004: LD_INT 14
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: ST_TO_ADDR
37011: GO 37434
37013: LD_INT 28
37015: DOUBLE
37016: EQUAL
37017: IFTRUE 37021
37019: GO 37039
37021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37022: LD_ADDR_VAR 0 3
37026: PUSH
37027: LD_INT 13
37029: PUSH
37030: LD_INT 14
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: ST_TO_ADDR
37037: GO 37434
37039: LD_INT 29
37041: DOUBLE
37042: EQUAL
37043: IFTRUE 37047
37045: GO 37065
37047: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37048: LD_ADDR_VAR 0 3
37052: PUSH
37053: LD_INT 13
37055: PUSH
37056: LD_INT 14
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: ST_TO_ADDR
37063: GO 37434
37065: LD_INT 31
37067: DOUBLE
37068: EQUAL
37069: IFTRUE 37073
37071: GO 37091
37073: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37074: LD_ADDR_VAR 0 3
37078: PUSH
37079: LD_INT 13
37081: PUSH
37082: LD_INT 14
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: ST_TO_ADDR
37089: GO 37434
37091: LD_INT 26
37093: DOUBLE
37094: EQUAL
37095: IFTRUE 37099
37097: GO 37117
37099: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37100: LD_ADDR_VAR 0 3
37104: PUSH
37105: LD_INT 13
37107: PUSH
37108: LD_INT 14
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: ST_TO_ADDR
37115: GO 37434
37117: LD_INT 42
37119: DOUBLE
37120: EQUAL
37121: IFTRUE 37125
37123: GO 37151
37125: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37126: LD_ADDR_VAR 0 3
37130: PUSH
37131: LD_INT 21
37133: PUSH
37134: LD_INT 22
37136: PUSH
37137: LD_INT 23
37139: PUSH
37140: LD_INT 24
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: ST_TO_ADDR
37149: GO 37434
37151: LD_INT 43
37153: DOUBLE
37154: EQUAL
37155: IFTRUE 37159
37157: GO 37185
37159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37160: LD_ADDR_VAR 0 3
37164: PUSH
37165: LD_INT 21
37167: PUSH
37168: LD_INT 22
37170: PUSH
37171: LD_INT 23
37173: PUSH
37174: LD_INT 24
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: ST_TO_ADDR
37183: GO 37434
37185: LD_INT 44
37187: DOUBLE
37188: EQUAL
37189: IFTRUE 37193
37191: GO 37219
37193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37194: LD_ADDR_VAR 0 3
37198: PUSH
37199: LD_INT 21
37201: PUSH
37202: LD_INT 22
37204: PUSH
37205: LD_INT 23
37207: PUSH
37208: LD_INT 24
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: ST_TO_ADDR
37217: GO 37434
37219: LD_INT 45
37221: DOUBLE
37222: EQUAL
37223: IFTRUE 37227
37225: GO 37253
37227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37228: LD_ADDR_VAR 0 3
37232: PUSH
37233: LD_INT 21
37235: PUSH
37236: LD_INT 22
37238: PUSH
37239: LD_INT 23
37241: PUSH
37242: LD_INT 24
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: ST_TO_ADDR
37251: GO 37434
37253: LD_INT 49
37255: DOUBLE
37256: EQUAL
37257: IFTRUE 37261
37259: GO 37287
37261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37262: LD_ADDR_VAR 0 3
37266: PUSH
37267: LD_INT 21
37269: PUSH
37270: LD_INT 22
37272: PUSH
37273: LD_INT 23
37275: PUSH
37276: LD_INT 24
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: ST_TO_ADDR
37285: GO 37434
37287: LD_INT 51
37289: DOUBLE
37290: EQUAL
37291: IFTRUE 37295
37293: GO 37321
37295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37296: LD_ADDR_VAR 0 3
37300: PUSH
37301: LD_INT 21
37303: PUSH
37304: LD_INT 22
37306: PUSH
37307: LD_INT 23
37309: PUSH
37310: LD_INT 24
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: ST_TO_ADDR
37319: GO 37434
37321: LD_INT 52
37323: DOUBLE
37324: EQUAL
37325: IFTRUE 37329
37327: GO 37355
37329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37330: LD_ADDR_VAR 0 3
37334: PUSH
37335: LD_INT 21
37337: PUSH
37338: LD_INT 22
37340: PUSH
37341: LD_INT 23
37343: PUSH
37344: LD_INT 24
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: ST_TO_ADDR
37353: GO 37434
37355: LD_INT 53
37357: DOUBLE
37358: EQUAL
37359: IFTRUE 37363
37361: GO 37381
37363: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37364: LD_ADDR_VAR 0 3
37368: PUSH
37369: LD_INT 23
37371: PUSH
37372: LD_INT 24
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: ST_TO_ADDR
37379: GO 37434
37381: LD_INT 46
37383: DOUBLE
37384: EQUAL
37385: IFTRUE 37389
37387: GO 37407
37389: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37390: LD_ADDR_VAR 0 3
37394: PUSH
37395: LD_INT 23
37397: PUSH
37398: LD_INT 24
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: ST_TO_ADDR
37405: GO 37434
37407: LD_INT 47
37409: DOUBLE
37410: EQUAL
37411: IFTRUE 37415
37413: GO 37433
37415: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37416: LD_ADDR_VAR 0 3
37420: PUSH
37421: LD_INT 23
37423: PUSH
37424: LD_INT 24
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: ST_TO_ADDR
37431: GO 37434
37433: POP
// result := ( chassis in result ) ;
37434: LD_ADDR_VAR 0 3
37438: PUSH
37439: LD_VAR 0 1
37443: PUSH
37444: LD_VAR 0 3
37448: IN
37449: ST_TO_ADDR
// end ;
37450: LD_VAR 0 3
37454: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37455: LD_INT 0
37457: PPUSH
37458: PPUSH
37459: PPUSH
37460: PPUSH
37461: PPUSH
37462: PPUSH
37463: PPUSH
// result := array ;
37464: LD_ADDR_VAR 0 5
37468: PUSH
37469: LD_VAR 0 1
37473: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37474: LD_VAR 0 1
37478: NOT
37479: PUSH
37480: LD_VAR 0 2
37484: NOT
37485: OR
37486: PUSH
37487: LD_VAR 0 3
37491: NOT
37492: OR
37493: PUSH
37494: LD_VAR 0 2
37498: PUSH
37499: LD_VAR 0 1
37503: GREATER
37504: OR
37505: PUSH
37506: LD_VAR 0 3
37510: PUSH
37511: LD_VAR 0 1
37515: GREATER
37516: OR
37517: IFFALSE 37521
// exit ;
37519: GO 37817
// if direction then
37521: LD_VAR 0 4
37525: IFFALSE 37589
// begin d := 1 ;
37527: LD_ADDR_VAR 0 9
37531: PUSH
37532: LD_INT 1
37534: ST_TO_ADDR
// if i_from > i_to then
37535: LD_VAR 0 2
37539: PUSH
37540: LD_VAR 0 3
37544: GREATER
37545: IFFALSE 37571
// length := ( array - i_from ) + i_to else
37547: LD_ADDR_VAR 0 11
37551: PUSH
37552: LD_VAR 0 1
37556: PUSH
37557: LD_VAR 0 2
37561: MINUS
37562: PUSH
37563: LD_VAR 0 3
37567: PLUS
37568: ST_TO_ADDR
37569: GO 37587
// length := i_to - i_from ;
37571: LD_ADDR_VAR 0 11
37575: PUSH
37576: LD_VAR 0 3
37580: PUSH
37581: LD_VAR 0 2
37585: MINUS
37586: ST_TO_ADDR
// end else
37587: GO 37650
// begin d := - 1 ;
37589: LD_ADDR_VAR 0 9
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: ST_TO_ADDR
// if i_from > i_to then
37598: LD_VAR 0 2
37602: PUSH
37603: LD_VAR 0 3
37607: GREATER
37608: IFFALSE 37628
// length := i_from - i_to else
37610: LD_ADDR_VAR 0 11
37614: PUSH
37615: LD_VAR 0 2
37619: PUSH
37620: LD_VAR 0 3
37624: MINUS
37625: ST_TO_ADDR
37626: GO 37650
// length := ( array - i_to ) + i_from ;
37628: LD_ADDR_VAR 0 11
37632: PUSH
37633: LD_VAR 0 1
37637: PUSH
37638: LD_VAR 0 3
37642: MINUS
37643: PUSH
37644: LD_VAR 0 2
37648: PLUS
37649: ST_TO_ADDR
// end ; if not length then
37650: LD_VAR 0 11
37654: NOT
37655: IFFALSE 37659
// exit ;
37657: GO 37817
// tmp := array ;
37659: LD_ADDR_VAR 0 10
37663: PUSH
37664: LD_VAR 0 1
37668: ST_TO_ADDR
// for i = 1 to length do
37669: LD_ADDR_VAR 0 6
37673: PUSH
37674: DOUBLE
37675: LD_INT 1
37677: DEC
37678: ST_TO_ADDR
37679: LD_VAR 0 11
37683: PUSH
37684: FOR_TO
37685: IFFALSE 37805
// begin for j = 1 to array do
37687: LD_ADDR_VAR 0 7
37691: PUSH
37692: DOUBLE
37693: LD_INT 1
37695: DEC
37696: ST_TO_ADDR
37697: LD_VAR 0 1
37701: PUSH
37702: FOR_TO
37703: IFFALSE 37791
// begin k := j + d ;
37705: LD_ADDR_VAR 0 8
37709: PUSH
37710: LD_VAR 0 7
37714: PUSH
37715: LD_VAR 0 9
37719: PLUS
37720: ST_TO_ADDR
// if k > array then
37721: LD_VAR 0 8
37725: PUSH
37726: LD_VAR 0 1
37730: GREATER
37731: IFFALSE 37741
// k := 1 ;
37733: LD_ADDR_VAR 0 8
37737: PUSH
37738: LD_INT 1
37740: ST_TO_ADDR
// if not k then
37741: LD_VAR 0 8
37745: NOT
37746: IFFALSE 37758
// k := array ;
37748: LD_ADDR_VAR 0 8
37752: PUSH
37753: LD_VAR 0 1
37757: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37758: LD_ADDR_VAR 0 10
37762: PUSH
37763: LD_VAR 0 10
37767: PPUSH
37768: LD_VAR 0 8
37772: PPUSH
37773: LD_VAR 0 1
37777: PUSH
37778: LD_VAR 0 7
37782: ARRAY
37783: PPUSH
37784: CALL_OW 1
37788: ST_TO_ADDR
// end ;
37789: GO 37702
37791: POP
37792: POP
// array := tmp ;
37793: LD_ADDR_VAR 0 1
37797: PUSH
37798: LD_VAR 0 10
37802: ST_TO_ADDR
// end ;
37803: GO 37684
37805: POP
37806: POP
// result := array ;
37807: LD_ADDR_VAR 0 5
37811: PUSH
37812: LD_VAR 0 1
37816: ST_TO_ADDR
// end ;
37817: LD_VAR 0 5
37821: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37822: LD_INT 0
37824: PPUSH
37825: PPUSH
// result := 0 ;
37826: LD_ADDR_VAR 0 3
37830: PUSH
37831: LD_INT 0
37833: ST_TO_ADDR
// if not array or not value in array then
37834: LD_VAR 0 1
37838: NOT
37839: PUSH
37840: LD_VAR 0 2
37844: PUSH
37845: LD_VAR 0 1
37849: IN
37850: NOT
37851: OR
37852: IFFALSE 37856
// exit ;
37854: GO 37910
// for i = 1 to array do
37856: LD_ADDR_VAR 0 4
37860: PUSH
37861: DOUBLE
37862: LD_INT 1
37864: DEC
37865: ST_TO_ADDR
37866: LD_VAR 0 1
37870: PUSH
37871: FOR_TO
37872: IFFALSE 37908
// if value = array [ i ] then
37874: LD_VAR 0 2
37878: PUSH
37879: LD_VAR 0 1
37883: PUSH
37884: LD_VAR 0 4
37888: ARRAY
37889: EQUAL
37890: IFFALSE 37906
// begin result := i ;
37892: LD_ADDR_VAR 0 3
37896: PUSH
37897: LD_VAR 0 4
37901: ST_TO_ADDR
// exit ;
37902: POP
37903: POP
37904: GO 37910
// end ;
37906: GO 37871
37908: POP
37909: POP
// end ;
37910: LD_VAR 0 3
37914: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37915: LD_INT 0
37917: PPUSH
// vc_chassis := chassis ;
37918: LD_ADDR_OWVAR 37
37922: PUSH
37923: LD_VAR 0 1
37927: ST_TO_ADDR
// vc_engine := engine ;
37928: LD_ADDR_OWVAR 39
37932: PUSH
37933: LD_VAR 0 2
37937: ST_TO_ADDR
// vc_control := control ;
37938: LD_ADDR_OWVAR 38
37942: PUSH
37943: LD_VAR 0 3
37947: ST_TO_ADDR
// vc_weapon := weapon ;
37948: LD_ADDR_OWVAR 40
37952: PUSH
37953: LD_VAR 0 4
37957: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37958: LD_ADDR_OWVAR 41
37962: PUSH
37963: LD_VAR 0 5
37967: ST_TO_ADDR
// end ;
37968: LD_VAR 0 6
37972: RET
// export function WantPlant ( unit ) ; var task ; begin
37973: LD_INT 0
37975: PPUSH
37976: PPUSH
// result := false ;
37977: LD_ADDR_VAR 0 2
37981: PUSH
37982: LD_INT 0
37984: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37985: LD_ADDR_VAR 0 3
37989: PUSH
37990: LD_VAR 0 1
37994: PPUSH
37995: CALL_OW 437
37999: ST_TO_ADDR
// if task then
38000: LD_VAR 0 3
38004: IFFALSE 38032
// if task [ 1 ] [ 1 ] = p then
38006: LD_VAR 0 3
38010: PUSH
38011: LD_INT 1
38013: ARRAY
38014: PUSH
38015: LD_INT 1
38017: ARRAY
38018: PUSH
38019: LD_STRING p
38021: EQUAL
38022: IFFALSE 38032
// result := true ;
38024: LD_ADDR_VAR 0 2
38028: PUSH
38029: LD_INT 1
38031: ST_TO_ADDR
// end ;
38032: LD_VAR 0 2
38036: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38037: LD_INT 0
38039: PPUSH
38040: PPUSH
38041: PPUSH
38042: PPUSH
// if pos < 1 then
38043: LD_VAR 0 2
38047: PUSH
38048: LD_INT 1
38050: LESS
38051: IFFALSE 38055
// exit ;
38053: GO 38358
// if pos = 1 then
38055: LD_VAR 0 2
38059: PUSH
38060: LD_INT 1
38062: EQUAL
38063: IFFALSE 38096
// result := Replace ( arr , pos [ 1 ] , value ) else
38065: LD_ADDR_VAR 0 4
38069: PUSH
38070: LD_VAR 0 1
38074: PPUSH
38075: LD_VAR 0 2
38079: PUSH
38080: LD_INT 1
38082: ARRAY
38083: PPUSH
38084: LD_VAR 0 3
38088: PPUSH
38089: CALL_OW 1
38093: ST_TO_ADDR
38094: GO 38358
// begin tmp := arr ;
38096: LD_ADDR_VAR 0 6
38100: PUSH
38101: LD_VAR 0 1
38105: ST_TO_ADDR
// s_arr := [ tmp ] ;
38106: LD_ADDR_VAR 0 7
38110: PUSH
38111: LD_VAR 0 6
38115: PUSH
38116: EMPTY
38117: LIST
38118: ST_TO_ADDR
// for i = 1 to pos - 1 do
38119: LD_ADDR_VAR 0 5
38123: PUSH
38124: DOUBLE
38125: LD_INT 1
38127: DEC
38128: ST_TO_ADDR
38129: LD_VAR 0 2
38133: PUSH
38134: LD_INT 1
38136: MINUS
38137: PUSH
38138: FOR_TO
38139: IFFALSE 38184
// begin tmp := tmp [ pos [ i ] ] ;
38141: LD_ADDR_VAR 0 6
38145: PUSH
38146: LD_VAR 0 6
38150: PUSH
38151: LD_VAR 0 2
38155: PUSH
38156: LD_VAR 0 5
38160: ARRAY
38161: ARRAY
38162: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38163: LD_ADDR_VAR 0 7
38167: PUSH
38168: LD_VAR 0 7
38172: PUSH
38173: LD_VAR 0 6
38177: PUSH
38178: EMPTY
38179: LIST
38180: ADD
38181: ST_TO_ADDR
// end ;
38182: GO 38138
38184: POP
38185: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38186: LD_ADDR_VAR 0 6
38190: PUSH
38191: LD_VAR 0 6
38195: PPUSH
38196: LD_VAR 0 2
38200: PUSH
38201: LD_VAR 0 2
38205: ARRAY
38206: PPUSH
38207: LD_VAR 0 3
38211: PPUSH
38212: CALL_OW 1
38216: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38217: LD_ADDR_VAR 0 7
38221: PUSH
38222: LD_VAR 0 7
38226: PPUSH
38227: LD_VAR 0 7
38231: PPUSH
38232: LD_VAR 0 6
38236: PPUSH
38237: CALL_OW 1
38241: ST_TO_ADDR
// for i = s_arr downto 2 do
38242: LD_ADDR_VAR 0 5
38246: PUSH
38247: DOUBLE
38248: LD_VAR 0 7
38252: INC
38253: ST_TO_ADDR
38254: LD_INT 2
38256: PUSH
38257: FOR_DOWNTO
38258: IFFALSE 38342
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38260: LD_ADDR_VAR 0 6
38264: PUSH
38265: LD_VAR 0 7
38269: PUSH
38270: LD_VAR 0 5
38274: PUSH
38275: LD_INT 1
38277: MINUS
38278: ARRAY
38279: PPUSH
38280: LD_VAR 0 2
38284: PUSH
38285: LD_VAR 0 5
38289: PUSH
38290: LD_INT 1
38292: MINUS
38293: ARRAY
38294: PPUSH
38295: LD_VAR 0 7
38299: PUSH
38300: LD_VAR 0 5
38304: ARRAY
38305: PPUSH
38306: CALL_OW 1
38310: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38311: LD_ADDR_VAR 0 7
38315: PUSH
38316: LD_VAR 0 7
38320: PPUSH
38321: LD_VAR 0 5
38325: PUSH
38326: LD_INT 1
38328: MINUS
38329: PPUSH
38330: LD_VAR 0 6
38334: PPUSH
38335: CALL_OW 1
38339: ST_TO_ADDR
// end ;
38340: GO 38257
38342: POP
38343: POP
// result := s_arr [ 1 ] ;
38344: LD_ADDR_VAR 0 4
38348: PUSH
38349: LD_VAR 0 7
38353: PUSH
38354: LD_INT 1
38356: ARRAY
38357: ST_TO_ADDR
// end ; end ;
38358: LD_VAR 0 4
38362: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38363: LD_INT 0
38365: PPUSH
38366: PPUSH
// if not list then
38367: LD_VAR 0 1
38371: NOT
38372: IFFALSE 38376
// exit ;
38374: GO 38467
// i := list [ pos1 ] ;
38376: LD_ADDR_VAR 0 5
38380: PUSH
38381: LD_VAR 0 1
38385: PUSH
38386: LD_VAR 0 2
38390: ARRAY
38391: ST_TO_ADDR
// if not i then
38392: LD_VAR 0 5
38396: NOT
38397: IFFALSE 38401
// exit ;
38399: GO 38467
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38401: LD_ADDR_VAR 0 1
38405: PUSH
38406: LD_VAR 0 1
38410: PPUSH
38411: LD_VAR 0 2
38415: PPUSH
38416: LD_VAR 0 1
38420: PUSH
38421: LD_VAR 0 3
38425: ARRAY
38426: PPUSH
38427: CALL_OW 1
38431: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38432: LD_ADDR_VAR 0 1
38436: PUSH
38437: LD_VAR 0 1
38441: PPUSH
38442: LD_VAR 0 3
38446: PPUSH
38447: LD_VAR 0 5
38451: PPUSH
38452: CALL_OW 1
38456: ST_TO_ADDR
// result := list ;
38457: LD_ADDR_VAR 0 4
38461: PUSH
38462: LD_VAR 0 1
38466: ST_TO_ADDR
// end ;
38467: LD_VAR 0 4
38471: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38472: LD_INT 0
38474: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38475: LD_ADDR_VAR 0 5
38479: PUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: CALL_OW 250
38489: PPUSH
38490: LD_VAR 0 1
38494: PPUSH
38495: CALL_OW 251
38499: PPUSH
38500: LD_VAR 0 2
38504: PPUSH
38505: LD_VAR 0 3
38509: PPUSH
38510: LD_VAR 0 4
38514: PPUSH
38515: CALL 38525 0 5
38519: ST_TO_ADDR
// end ;
38520: LD_VAR 0 5
38524: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38525: LD_INT 0
38527: PPUSH
38528: PPUSH
38529: PPUSH
38530: PPUSH
// if not list then
38531: LD_VAR 0 3
38535: NOT
38536: IFFALSE 38540
// exit ;
38538: GO 38928
// result := [ ] ;
38540: LD_ADDR_VAR 0 6
38544: PUSH
38545: EMPTY
38546: ST_TO_ADDR
// for i in list do
38547: LD_ADDR_VAR 0 7
38551: PUSH
38552: LD_VAR 0 3
38556: PUSH
38557: FOR_IN
38558: IFFALSE 38760
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38560: LD_ADDR_VAR 0 9
38564: PUSH
38565: LD_VAR 0 7
38569: PPUSH
38570: LD_VAR 0 1
38574: PPUSH
38575: LD_VAR 0 2
38579: PPUSH
38580: CALL_OW 297
38584: ST_TO_ADDR
// if not result then
38585: LD_VAR 0 6
38589: NOT
38590: IFFALSE 38616
// result := [ [ i , tmp ] ] else
38592: LD_ADDR_VAR 0 6
38596: PUSH
38597: LD_VAR 0 7
38601: PUSH
38602: LD_VAR 0 9
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: EMPTY
38612: LIST
38613: ST_TO_ADDR
38614: GO 38758
// begin if result [ result ] [ 2 ] < tmp then
38616: LD_VAR 0 6
38620: PUSH
38621: LD_VAR 0 6
38625: ARRAY
38626: PUSH
38627: LD_INT 2
38629: ARRAY
38630: PUSH
38631: LD_VAR 0 9
38635: LESS
38636: IFFALSE 38678
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38638: LD_ADDR_VAR 0 6
38642: PUSH
38643: LD_VAR 0 6
38647: PPUSH
38648: LD_VAR 0 6
38652: PUSH
38653: LD_INT 1
38655: PLUS
38656: PPUSH
38657: LD_VAR 0 7
38661: PUSH
38662: LD_VAR 0 9
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PPUSH
38671: CALL_OW 2
38675: ST_TO_ADDR
38676: GO 38758
// for j = 1 to result do
38678: LD_ADDR_VAR 0 8
38682: PUSH
38683: DOUBLE
38684: LD_INT 1
38686: DEC
38687: ST_TO_ADDR
38688: LD_VAR 0 6
38692: PUSH
38693: FOR_TO
38694: IFFALSE 38756
// begin if tmp < result [ j ] [ 2 ] then
38696: LD_VAR 0 9
38700: PUSH
38701: LD_VAR 0 6
38705: PUSH
38706: LD_VAR 0 8
38710: ARRAY
38711: PUSH
38712: LD_INT 2
38714: ARRAY
38715: LESS
38716: IFFALSE 38754
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38718: LD_ADDR_VAR 0 6
38722: PUSH
38723: LD_VAR 0 6
38727: PPUSH
38728: LD_VAR 0 8
38732: PPUSH
38733: LD_VAR 0 7
38737: PUSH
38738: LD_VAR 0 9
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PPUSH
38747: CALL_OW 2
38751: ST_TO_ADDR
// break ;
38752: GO 38756
// end ; end ;
38754: GO 38693
38756: POP
38757: POP
// end ; end ;
38758: GO 38557
38760: POP
38761: POP
// if result and not asc then
38762: LD_VAR 0 6
38766: PUSH
38767: LD_VAR 0 4
38771: NOT
38772: AND
38773: IFFALSE 38848
// begin tmp := result ;
38775: LD_ADDR_VAR 0 9
38779: PUSH
38780: LD_VAR 0 6
38784: ST_TO_ADDR
// for i = tmp downto 1 do
38785: LD_ADDR_VAR 0 7
38789: PUSH
38790: DOUBLE
38791: LD_VAR 0 9
38795: INC
38796: ST_TO_ADDR
38797: LD_INT 1
38799: PUSH
38800: FOR_DOWNTO
38801: IFFALSE 38846
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38803: LD_ADDR_VAR 0 6
38807: PUSH
38808: LD_VAR 0 6
38812: PPUSH
38813: LD_VAR 0 9
38817: PUSH
38818: LD_VAR 0 7
38822: MINUS
38823: PUSH
38824: LD_INT 1
38826: PLUS
38827: PPUSH
38828: LD_VAR 0 9
38832: PUSH
38833: LD_VAR 0 7
38837: ARRAY
38838: PPUSH
38839: CALL_OW 1
38843: ST_TO_ADDR
38844: GO 38800
38846: POP
38847: POP
// end ; tmp := [ ] ;
38848: LD_ADDR_VAR 0 9
38852: PUSH
38853: EMPTY
38854: ST_TO_ADDR
// if mode then
38855: LD_VAR 0 5
38859: IFFALSE 38928
// begin for i = 1 to result do
38861: LD_ADDR_VAR 0 7
38865: PUSH
38866: DOUBLE
38867: LD_INT 1
38869: DEC
38870: ST_TO_ADDR
38871: LD_VAR 0 6
38875: PUSH
38876: FOR_TO
38877: IFFALSE 38916
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38879: LD_ADDR_VAR 0 9
38883: PUSH
38884: LD_VAR 0 9
38888: PPUSH
38889: LD_VAR 0 7
38893: PPUSH
38894: LD_VAR 0 6
38898: PUSH
38899: LD_VAR 0 7
38903: ARRAY
38904: PUSH
38905: LD_INT 1
38907: ARRAY
38908: PPUSH
38909: CALL_OW 1
38913: ST_TO_ADDR
38914: GO 38876
38916: POP
38917: POP
// result := tmp ;
38918: LD_ADDR_VAR 0 6
38922: PUSH
38923: LD_VAR 0 9
38927: ST_TO_ADDR
// end ; end ;
38928: LD_VAR 0 6
38932: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38933: LD_INT 0
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38941: LD_ADDR_VAR 0 5
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: ST_TO_ADDR
// if not x or not y then
38963: LD_VAR 0 2
38967: NOT
38968: PUSH
38969: LD_VAR 0 3
38973: NOT
38974: OR
38975: IFFALSE 38979
// exit ;
38977: GO 40625
// if not range then
38979: LD_VAR 0 4
38983: NOT
38984: IFFALSE 38994
// range := 10 ;
38986: LD_ADDR_VAR 0 4
38990: PUSH
38991: LD_INT 10
38993: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38994: LD_ADDR_VAR 0 8
38998: PUSH
38999: LD_INT 81
39001: PUSH
39002: LD_VAR 0 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 92
39013: PUSH
39014: LD_VAR 0 2
39018: PUSH
39019: LD_VAR 0 3
39023: PUSH
39024: LD_VAR 0 4
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 3
39037: PUSH
39038: LD_INT 21
39040: PUSH
39041: LD_INT 3
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: PPUSH
39057: CALL_OW 69
39061: ST_TO_ADDR
// if not tmp then
39062: LD_VAR 0 8
39066: NOT
39067: IFFALSE 39071
// exit ;
39069: GO 40625
// for i in tmp do
39071: LD_ADDR_VAR 0 6
39075: PUSH
39076: LD_VAR 0 8
39080: PUSH
39081: FOR_IN
39082: IFFALSE 40600
// begin points := [ 0 , 0 , 0 ] ;
39084: LD_ADDR_VAR 0 9
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: ST_TO_ADDR
// bpoints := 1 ;
39103: LD_ADDR_VAR 0 10
39107: PUSH
39108: LD_INT 1
39110: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39111: LD_VAR 0 6
39115: PPUSH
39116: CALL_OW 247
39120: PUSH
39121: LD_INT 1
39123: DOUBLE
39124: EQUAL
39125: IFTRUE 39129
39127: GO 39707
39129: POP
// begin if GetClass ( i ) = 1 then
39130: LD_VAR 0 6
39134: PPUSH
39135: CALL_OW 257
39139: PUSH
39140: LD_INT 1
39142: EQUAL
39143: IFFALSE 39164
// points := [ 10 , 5 , 3 ] ;
39145: LD_ADDR_VAR 0 9
39149: PUSH
39150: LD_INT 10
39152: PUSH
39153: LD_INT 5
39155: PUSH
39156: LD_INT 3
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39164: LD_VAR 0 6
39168: PPUSH
39169: CALL_OW 257
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 3
39179: PUSH
39180: LD_INT 4
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: LIST
39187: IN
39188: IFFALSE 39209
// points := [ 3 , 2 , 1 ] ;
39190: LD_ADDR_VAR 0 9
39194: PUSH
39195: LD_INT 3
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39209: LD_VAR 0 6
39213: PPUSH
39214: CALL_OW 257
39218: PUSH
39219: LD_INT 5
39221: EQUAL
39222: IFFALSE 39243
// points := [ 130 , 5 , 2 ] ;
39224: LD_ADDR_VAR 0 9
39228: PUSH
39229: LD_INT 130
39231: PUSH
39232: LD_INT 5
39234: PUSH
39235: LD_INT 2
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39243: LD_VAR 0 6
39247: PPUSH
39248: CALL_OW 257
39252: PUSH
39253: LD_INT 8
39255: EQUAL
39256: IFFALSE 39277
// points := [ 35 , 35 , 30 ] ;
39258: LD_ADDR_VAR 0 9
39262: PUSH
39263: LD_INT 35
39265: PUSH
39266: LD_INT 35
39268: PUSH
39269: LD_INT 30
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39277: LD_VAR 0 6
39281: PPUSH
39282: CALL_OW 257
39286: PUSH
39287: LD_INT 9
39289: EQUAL
39290: IFFALSE 39311
// points := [ 20 , 55 , 40 ] ;
39292: LD_ADDR_VAR 0 9
39296: PUSH
39297: LD_INT 20
39299: PUSH
39300: LD_INT 55
39302: PUSH
39303: LD_INT 40
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39311: LD_VAR 0 6
39315: PPUSH
39316: CALL_OW 257
39320: PUSH
39321: LD_INT 12
39323: PUSH
39324: LD_INT 16
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: IN
39331: IFFALSE 39352
// points := [ 5 , 3 , 2 ] ;
39333: LD_ADDR_VAR 0 9
39337: PUSH
39338: LD_INT 5
39340: PUSH
39341: LD_INT 3
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: LIST
39351: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39352: LD_VAR 0 6
39356: PPUSH
39357: CALL_OW 257
39361: PUSH
39362: LD_INT 17
39364: EQUAL
39365: IFFALSE 39386
// points := [ 100 , 50 , 75 ] ;
39367: LD_ADDR_VAR 0 9
39371: PUSH
39372: LD_INT 100
39374: PUSH
39375: LD_INT 50
39377: PUSH
39378: LD_INT 75
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: LIST
39385: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39386: LD_VAR 0 6
39390: PPUSH
39391: CALL_OW 257
39395: PUSH
39396: LD_INT 15
39398: EQUAL
39399: IFFALSE 39420
// points := [ 10 , 5 , 3 ] ;
39401: LD_ADDR_VAR 0 9
39405: PUSH
39406: LD_INT 10
39408: PUSH
39409: LD_INT 5
39411: PUSH
39412: LD_INT 3
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: LIST
39419: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39420: LD_VAR 0 6
39424: PPUSH
39425: CALL_OW 257
39429: PUSH
39430: LD_INT 14
39432: EQUAL
39433: IFFALSE 39454
// points := [ 10 , 0 , 0 ] ;
39435: LD_ADDR_VAR 0 9
39439: PUSH
39440: LD_INT 10
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39454: LD_VAR 0 6
39458: PPUSH
39459: CALL_OW 257
39463: PUSH
39464: LD_INT 11
39466: EQUAL
39467: IFFALSE 39488
// points := [ 30 , 10 , 5 ] ;
39469: LD_ADDR_VAR 0 9
39473: PUSH
39474: LD_INT 30
39476: PUSH
39477: LD_INT 10
39479: PUSH
39480: LD_INT 5
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: LIST
39487: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39488: LD_VAR 0 1
39492: PPUSH
39493: LD_INT 5
39495: PPUSH
39496: CALL_OW 321
39500: PUSH
39501: LD_INT 2
39503: EQUAL
39504: IFFALSE 39521
// bpoints := bpoints * 1.8 ;
39506: LD_ADDR_VAR 0 10
39510: PUSH
39511: LD_VAR 0 10
39515: PUSH
39516: LD_REAL  1.80000000000000E+0000
39519: MUL
39520: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39521: LD_VAR 0 6
39525: PPUSH
39526: CALL_OW 257
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: LD_INT 3
39539: PUSH
39540: LD_INT 4
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: IN
39549: PUSH
39550: LD_VAR 0 1
39554: PPUSH
39555: LD_INT 51
39557: PPUSH
39558: CALL_OW 321
39562: PUSH
39563: LD_INT 2
39565: EQUAL
39566: AND
39567: IFFALSE 39584
// bpoints := bpoints * 1.2 ;
39569: LD_ADDR_VAR 0 10
39573: PUSH
39574: LD_VAR 0 10
39578: PUSH
39579: LD_REAL  1.20000000000000E+0000
39582: MUL
39583: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39584: LD_VAR 0 6
39588: PPUSH
39589: CALL_OW 257
39593: PUSH
39594: LD_INT 5
39596: PUSH
39597: LD_INT 7
39599: PUSH
39600: LD_INT 9
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: IN
39608: PUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: LD_INT 52
39616: PPUSH
39617: CALL_OW 321
39621: PUSH
39622: LD_INT 2
39624: EQUAL
39625: AND
39626: IFFALSE 39643
// bpoints := bpoints * 1.5 ;
39628: LD_ADDR_VAR 0 10
39632: PUSH
39633: LD_VAR 0 10
39637: PUSH
39638: LD_REAL  1.50000000000000E+0000
39641: MUL
39642: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39643: LD_VAR 0 1
39647: PPUSH
39648: LD_INT 66
39650: PPUSH
39651: CALL_OW 321
39655: PUSH
39656: LD_INT 2
39658: EQUAL
39659: IFFALSE 39676
// bpoints := bpoints * 1.1 ;
39661: LD_ADDR_VAR 0 10
39665: PUSH
39666: LD_VAR 0 10
39670: PUSH
39671: LD_REAL  1.10000000000000E+0000
39674: MUL
39675: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39676: LD_ADDR_VAR 0 10
39680: PUSH
39681: LD_VAR 0 10
39685: PUSH
39686: LD_VAR 0 6
39690: PPUSH
39691: LD_INT 1
39693: PPUSH
39694: CALL_OW 259
39698: PUSH
39699: LD_REAL  1.15000000000000E+0000
39702: MUL
39703: MUL
39704: ST_TO_ADDR
// end ; unit_vehicle :
39705: GO 40529
39707: LD_INT 2
39709: DOUBLE
39710: EQUAL
39711: IFTRUE 39715
39713: GO 40517
39715: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39716: LD_VAR 0 6
39720: PPUSH
39721: CALL_OW 264
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: LD_INT 42
39731: PUSH
39732: LD_INT 24
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: LIST
39739: IN
39740: IFFALSE 39761
// points := [ 25 , 5 , 3 ] ;
39742: LD_ADDR_VAR 0 9
39746: PUSH
39747: LD_INT 25
39749: PUSH
39750: LD_INT 5
39752: PUSH
39753: LD_INT 3
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39761: LD_VAR 0 6
39765: PPUSH
39766: CALL_OW 264
39770: PUSH
39771: LD_INT 4
39773: PUSH
39774: LD_INT 43
39776: PUSH
39777: LD_INT 25
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: IN
39785: IFFALSE 39806
// points := [ 40 , 15 , 5 ] ;
39787: LD_ADDR_VAR 0 9
39791: PUSH
39792: LD_INT 40
39794: PUSH
39795: LD_INT 15
39797: PUSH
39798: LD_INT 5
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39806: LD_VAR 0 6
39810: PPUSH
39811: CALL_OW 264
39815: PUSH
39816: LD_INT 3
39818: PUSH
39819: LD_INT 23
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: IN
39826: IFFALSE 39847
// points := [ 7 , 25 , 8 ] ;
39828: LD_ADDR_VAR 0 9
39832: PUSH
39833: LD_INT 7
39835: PUSH
39836: LD_INT 25
39838: PUSH
39839: LD_INT 8
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: LIST
39846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39847: LD_VAR 0 6
39851: PPUSH
39852: CALL_OW 264
39856: PUSH
39857: LD_INT 5
39859: PUSH
39860: LD_INT 27
39862: PUSH
39863: LD_INT 44
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: LIST
39870: IN
39871: IFFALSE 39892
// points := [ 14 , 50 , 16 ] ;
39873: LD_ADDR_VAR 0 9
39877: PUSH
39878: LD_INT 14
39880: PUSH
39881: LD_INT 50
39883: PUSH
39884: LD_INT 16
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: LIST
39891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39892: LD_VAR 0 6
39896: PPUSH
39897: CALL_OW 264
39901: PUSH
39902: LD_INT 6
39904: PUSH
39905: LD_INT 46
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: IN
39912: IFFALSE 39933
// points := [ 32 , 120 , 70 ] ;
39914: LD_ADDR_VAR 0 9
39918: PUSH
39919: LD_INT 32
39921: PUSH
39922: LD_INT 120
39924: PUSH
39925: LD_INT 70
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
39933: LD_VAR 0 6
39937: PPUSH
39938: CALL_OW 264
39942: PUSH
39943: LD_INT 7
39945: PUSH
39946: LD_INT 28
39948: PUSH
39949: LD_INT 45
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: LIST
39956: IN
39957: IFFALSE 39978
// points := [ 35 , 20 , 45 ] ;
39959: LD_ADDR_VAR 0 9
39963: PUSH
39964: LD_INT 35
39966: PUSH
39967: LD_INT 20
39969: PUSH
39970: LD_INT 45
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: LIST
39977: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39978: LD_VAR 0 6
39982: PPUSH
39983: CALL_OW 264
39987: PUSH
39988: LD_INT 47
39990: PUSH
39991: EMPTY
39992: LIST
39993: IN
39994: IFFALSE 40015
// points := [ 67 , 45 , 75 ] ;
39996: LD_ADDR_VAR 0 9
40000: PUSH
40001: LD_INT 67
40003: PUSH
40004: LD_INT 45
40006: PUSH
40007: LD_INT 75
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40015: LD_VAR 0 6
40019: PPUSH
40020: CALL_OW 264
40024: PUSH
40025: LD_INT 26
40027: PUSH
40028: EMPTY
40029: LIST
40030: IN
40031: IFFALSE 40052
// points := [ 120 , 30 , 80 ] ;
40033: LD_ADDR_VAR 0 9
40037: PUSH
40038: LD_INT 120
40040: PUSH
40041: LD_INT 30
40043: PUSH
40044: LD_INT 80
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: LIST
40051: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40052: LD_VAR 0 6
40056: PPUSH
40057: CALL_OW 264
40061: PUSH
40062: LD_INT 22
40064: PUSH
40065: EMPTY
40066: LIST
40067: IN
40068: IFFALSE 40089
// points := [ 40 , 1 , 1 ] ;
40070: LD_ADDR_VAR 0 9
40074: PUSH
40075: LD_INT 40
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: LIST
40088: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40089: LD_VAR 0 6
40093: PPUSH
40094: CALL_OW 264
40098: PUSH
40099: LD_INT 29
40101: PUSH
40102: EMPTY
40103: LIST
40104: IN
40105: IFFALSE 40126
// points := [ 70 , 200 , 400 ] ;
40107: LD_ADDR_VAR 0 9
40111: PUSH
40112: LD_INT 70
40114: PUSH
40115: LD_INT 200
40117: PUSH
40118: LD_INT 400
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: LIST
40125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40126: LD_VAR 0 6
40130: PPUSH
40131: CALL_OW 264
40135: PUSH
40136: LD_INT 14
40138: PUSH
40139: LD_INT 53
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: IN
40146: IFFALSE 40167
// points := [ 40 , 10 , 20 ] ;
40148: LD_ADDR_VAR 0 9
40152: PUSH
40153: LD_INT 40
40155: PUSH
40156: LD_INT 10
40158: PUSH
40159: LD_INT 20
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: LIST
40166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40167: LD_VAR 0 6
40171: PPUSH
40172: CALL_OW 264
40176: PUSH
40177: LD_INT 9
40179: PUSH
40180: EMPTY
40181: LIST
40182: IN
40183: IFFALSE 40204
// points := [ 5 , 70 , 20 ] ;
40185: LD_ADDR_VAR 0 9
40189: PUSH
40190: LD_INT 5
40192: PUSH
40193: LD_INT 70
40195: PUSH
40196: LD_INT 20
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: LIST
40203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40204: LD_VAR 0 6
40208: PPUSH
40209: CALL_OW 264
40213: PUSH
40214: LD_INT 10
40216: PUSH
40217: EMPTY
40218: LIST
40219: IN
40220: IFFALSE 40241
// points := [ 35 , 110 , 70 ] ;
40222: LD_ADDR_VAR 0 9
40226: PUSH
40227: LD_INT 35
40229: PUSH
40230: LD_INT 110
40232: PUSH
40233: LD_INT 70
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40241: LD_VAR 0 6
40245: PPUSH
40246: CALL_OW 265
40250: PUSH
40251: LD_INT 25
40253: EQUAL
40254: IFFALSE 40275
// points := [ 80 , 65 , 100 ] ;
40256: LD_ADDR_VAR 0 9
40260: PUSH
40261: LD_INT 80
40263: PUSH
40264: LD_INT 65
40266: PUSH
40267: LD_INT 100
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: LIST
40274: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40275: LD_VAR 0 6
40279: PPUSH
40280: CALL_OW 263
40284: PUSH
40285: LD_INT 1
40287: EQUAL
40288: IFFALSE 40323
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40290: LD_ADDR_VAR 0 10
40294: PUSH
40295: LD_VAR 0 10
40299: PUSH
40300: LD_VAR 0 6
40304: PPUSH
40305: CALL_OW 311
40309: PPUSH
40310: LD_INT 3
40312: PPUSH
40313: CALL_OW 259
40317: PUSH
40318: LD_INT 4
40320: MUL
40321: MUL
40322: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40323: LD_VAR 0 6
40327: PPUSH
40328: CALL_OW 263
40332: PUSH
40333: LD_INT 2
40335: EQUAL
40336: IFFALSE 40387
// begin j := IsControledBy ( i ) ;
40338: LD_ADDR_VAR 0 7
40342: PUSH
40343: LD_VAR 0 6
40347: PPUSH
40348: CALL_OW 312
40352: ST_TO_ADDR
// if j then
40353: LD_VAR 0 7
40357: IFFALSE 40387
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40359: LD_ADDR_VAR 0 10
40363: PUSH
40364: LD_VAR 0 10
40368: PUSH
40369: LD_VAR 0 7
40373: PPUSH
40374: LD_INT 3
40376: PPUSH
40377: CALL_OW 259
40381: PUSH
40382: LD_INT 3
40384: MUL
40385: MUL
40386: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40387: LD_VAR 0 6
40391: PPUSH
40392: CALL_OW 264
40396: PUSH
40397: LD_INT 5
40399: PUSH
40400: LD_INT 6
40402: PUSH
40403: LD_INT 46
40405: PUSH
40406: LD_INT 44
40408: PUSH
40409: LD_INT 47
40411: PUSH
40412: LD_INT 45
40414: PUSH
40415: LD_INT 28
40417: PUSH
40418: LD_INT 7
40420: PUSH
40421: LD_INT 27
40423: PUSH
40424: LD_INT 29
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: IN
40439: PUSH
40440: LD_VAR 0 1
40444: PPUSH
40445: LD_INT 52
40447: PPUSH
40448: CALL_OW 321
40452: PUSH
40453: LD_INT 2
40455: EQUAL
40456: AND
40457: IFFALSE 40474
// bpoints := bpoints * 1.2 ;
40459: LD_ADDR_VAR 0 10
40463: PUSH
40464: LD_VAR 0 10
40468: PUSH
40469: LD_REAL  1.20000000000000E+0000
40472: MUL
40473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40474: LD_VAR 0 6
40478: PPUSH
40479: CALL_OW 264
40483: PUSH
40484: LD_INT 6
40486: PUSH
40487: LD_INT 46
40489: PUSH
40490: LD_INT 47
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: LIST
40497: IN
40498: IFFALSE 40515
// bpoints := bpoints * 1.2 ;
40500: LD_ADDR_VAR 0 10
40504: PUSH
40505: LD_VAR 0 10
40509: PUSH
40510: LD_REAL  1.20000000000000E+0000
40513: MUL
40514: ST_TO_ADDR
// end ; unit_building :
40515: GO 40529
40517: LD_INT 3
40519: DOUBLE
40520: EQUAL
40521: IFTRUE 40525
40523: GO 40528
40525: POP
// ; end ;
40526: GO 40529
40528: POP
// for j = 1 to 3 do
40529: LD_ADDR_VAR 0 7
40533: PUSH
40534: DOUBLE
40535: LD_INT 1
40537: DEC
40538: ST_TO_ADDR
40539: LD_INT 3
40541: PUSH
40542: FOR_TO
40543: IFFALSE 40596
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40545: LD_ADDR_VAR 0 5
40549: PUSH
40550: LD_VAR 0 5
40554: PPUSH
40555: LD_VAR 0 7
40559: PPUSH
40560: LD_VAR 0 5
40564: PUSH
40565: LD_VAR 0 7
40569: ARRAY
40570: PUSH
40571: LD_VAR 0 9
40575: PUSH
40576: LD_VAR 0 7
40580: ARRAY
40581: PUSH
40582: LD_VAR 0 10
40586: MUL
40587: PLUS
40588: PPUSH
40589: CALL_OW 1
40593: ST_TO_ADDR
40594: GO 40542
40596: POP
40597: POP
// end ;
40598: GO 39081
40600: POP
40601: POP
// result := Replace ( result , 4 , tmp ) ;
40602: LD_ADDR_VAR 0 5
40606: PUSH
40607: LD_VAR 0 5
40611: PPUSH
40612: LD_INT 4
40614: PPUSH
40615: LD_VAR 0 8
40619: PPUSH
40620: CALL_OW 1
40624: ST_TO_ADDR
// end ;
40625: LD_VAR 0 5
40629: RET
// export function DangerAtRange ( unit , range ) ; begin
40630: LD_INT 0
40632: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40633: LD_ADDR_VAR 0 3
40637: PUSH
40638: LD_VAR 0 1
40642: PPUSH
40643: CALL_OW 255
40647: PPUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 250
40657: PPUSH
40658: LD_VAR 0 1
40662: PPUSH
40663: CALL_OW 251
40667: PPUSH
40668: LD_VAR 0 2
40672: PPUSH
40673: CALL 38933 0 4
40677: ST_TO_ADDR
// end ;
40678: LD_VAR 0 3
40682: RET
// export function DangerInArea ( side , area ) ; begin
40683: LD_INT 0
40685: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40686: LD_ADDR_VAR 0 3
40690: PUSH
40691: LD_VAR 0 2
40695: PPUSH
40696: LD_INT 81
40698: PUSH
40699: LD_VAR 0 1
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PPUSH
40708: CALL_OW 70
40712: ST_TO_ADDR
// end ;
40713: LD_VAR 0 3
40717: RET
// export function IsExtension ( b ) ; begin
40718: LD_INT 0
40720: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40721: LD_ADDR_VAR 0 2
40725: PUSH
40726: LD_VAR 0 1
40730: PUSH
40731: LD_INT 23
40733: PUSH
40734: LD_INT 20
40736: PUSH
40737: LD_INT 22
40739: PUSH
40740: LD_INT 17
40742: PUSH
40743: LD_INT 24
40745: PUSH
40746: LD_INT 21
40748: PUSH
40749: LD_INT 19
40751: PUSH
40752: LD_INT 16
40754: PUSH
40755: LD_INT 25
40757: PUSH
40758: LD_INT 18
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: IN
40773: ST_TO_ADDR
// end ;
40774: LD_VAR 0 2
40778: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
40779: LD_INT 0
40781: PPUSH
40782: PPUSH
40783: PPUSH
// result := [ ] ;
40784: LD_ADDR_VAR 0 3
40788: PUSH
40789: EMPTY
40790: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40791: LD_ADDR_VAR 0 4
40795: PUSH
40796: LD_VAR 0 2
40800: PPUSH
40801: LD_INT 21
40803: PUSH
40804: LD_INT 3
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PPUSH
40811: CALL_OW 70
40815: ST_TO_ADDR
// if not tmp then
40816: LD_VAR 0 4
40820: NOT
40821: IFFALSE 40825
// exit ;
40823: GO 40883
// for i in tmp do
40825: LD_ADDR_VAR 0 5
40829: PUSH
40830: LD_VAR 0 4
40834: PUSH
40835: FOR_IN
40836: IFFALSE 40871
// if GetBase ( i ) <> base then
40838: LD_VAR 0 5
40842: PPUSH
40843: CALL_OW 274
40847: PUSH
40848: LD_VAR 0 1
40852: NONEQUAL
40853: IFFALSE 40869
// ComLinkToBase ( base , i ) ;
40855: LD_VAR 0 1
40859: PPUSH
40860: LD_VAR 0 5
40864: PPUSH
40865: CALL_OW 169
40869: GO 40835
40871: POP
40872: POP
// result := tmp ;
40873: LD_ADDR_VAR 0 3
40877: PUSH
40878: LD_VAR 0 4
40882: ST_TO_ADDR
// end ;
40883: LD_VAR 0 3
40887: RET
// export function ComComplete ( unit , b ) ; var i ; begin
40888: LD_INT 0
40890: PPUSH
40891: PPUSH
// if BuildingStatus ( b ) = bs_build then
40892: LD_VAR 0 2
40896: PPUSH
40897: CALL_OW 461
40901: PUSH
40902: LD_INT 1
40904: EQUAL
40905: IFFALSE 40965
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40907: LD_VAR 0 1
40911: PPUSH
40912: LD_STRING h
40914: PUSH
40915: LD_VAR 0 2
40919: PPUSH
40920: CALL_OW 250
40924: PUSH
40925: LD_VAR 0 2
40929: PPUSH
40930: CALL_OW 251
40934: PUSH
40935: LD_VAR 0 2
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: PUSH
40958: EMPTY
40959: LIST
40960: PPUSH
40961: CALL_OW 446
// end ;
40965: LD_VAR 0 3
40969: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40970: LD_INT 0
40972: PPUSH
40973: PPUSH
40974: PPUSH
40975: PPUSH
40976: PPUSH
40977: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
40978: LD_VAR 0 1
40982: NOT
40983: PUSH
40984: LD_VAR 0 1
40988: PPUSH
40989: CALL_OW 263
40993: PUSH
40994: LD_INT 2
40996: EQUAL
40997: NOT
40998: OR
40999: IFFALSE 41003
// exit ;
41001: GO 41319
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41003: LD_ADDR_VAR 0 6
41007: PUSH
41008: LD_INT 22
41010: PUSH
41011: LD_VAR 0 1
41015: PPUSH
41016: CALL_OW 255
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: LD_INT 30
41030: PUSH
41031: LD_INT 36
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 34
41040: PUSH
41041: LD_INT 31
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: LIST
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PPUSH
41057: CALL_OW 69
41061: ST_TO_ADDR
// if not tmp then
41062: LD_VAR 0 6
41066: NOT
41067: IFFALSE 41071
// exit ;
41069: GO 41319
// result := [ ] ;
41071: LD_ADDR_VAR 0 2
41075: PUSH
41076: EMPTY
41077: ST_TO_ADDR
// for i in tmp do
41078: LD_ADDR_VAR 0 3
41082: PUSH
41083: LD_VAR 0 6
41087: PUSH
41088: FOR_IN
41089: IFFALSE 41160
// begin t := UnitsInside ( i ) ;
41091: LD_ADDR_VAR 0 4
41095: PUSH
41096: LD_VAR 0 3
41100: PPUSH
41101: CALL_OW 313
41105: ST_TO_ADDR
// if t then
41106: LD_VAR 0 4
41110: IFFALSE 41158
// for j in t do
41112: LD_ADDR_VAR 0 7
41116: PUSH
41117: LD_VAR 0 4
41121: PUSH
41122: FOR_IN
41123: IFFALSE 41156
// result := Insert ( result , result + 1 , j ) ;
41125: LD_ADDR_VAR 0 2
41129: PUSH
41130: LD_VAR 0 2
41134: PPUSH
41135: LD_VAR 0 2
41139: PUSH
41140: LD_INT 1
41142: PLUS
41143: PPUSH
41144: LD_VAR 0 7
41148: PPUSH
41149: CALL_OW 2
41153: ST_TO_ADDR
41154: GO 41122
41156: POP
41157: POP
// end ;
41158: GO 41088
41160: POP
41161: POP
// if not result then
41162: LD_VAR 0 2
41166: NOT
41167: IFFALSE 41171
// exit ;
41169: GO 41319
// mech := result [ 1 ] ;
41171: LD_ADDR_VAR 0 5
41175: PUSH
41176: LD_VAR 0 2
41180: PUSH
41181: LD_INT 1
41183: ARRAY
41184: ST_TO_ADDR
// if result > 1 then
41185: LD_VAR 0 2
41189: PUSH
41190: LD_INT 1
41192: GREATER
41193: IFFALSE 41305
// for i = 2 to result do
41195: LD_ADDR_VAR 0 3
41199: PUSH
41200: DOUBLE
41201: LD_INT 2
41203: DEC
41204: ST_TO_ADDR
41205: LD_VAR 0 2
41209: PUSH
41210: FOR_TO
41211: IFFALSE 41303
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41213: LD_ADDR_VAR 0 4
41217: PUSH
41218: LD_VAR 0 2
41222: PUSH
41223: LD_VAR 0 3
41227: ARRAY
41228: PPUSH
41229: LD_INT 3
41231: PPUSH
41232: CALL_OW 259
41236: PUSH
41237: LD_VAR 0 2
41241: PUSH
41242: LD_VAR 0 3
41246: ARRAY
41247: PPUSH
41248: CALL_OW 432
41252: MINUS
41253: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41254: LD_VAR 0 4
41258: PUSH
41259: LD_VAR 0 5
41263: PPUSH
41264: LD_INT 3
41266: PPUSH
41267: CALL_OW 259
41271: PUSH
41272: LD_VAR 0 5
41276: PPUSH
41277: CALL_OW 432
41281: MINUS
41282: GREATEREQUAL
41283: IFFALSE 41301
// mech := result [ i ] ;
41285: LD_ADDR_VAR 0 5
41289: PUSH
41290: LD_VAR 0 2
41294: PUSH
41295: LD_VAR 0 3
41299: ARRAY
41300: ST_TO_ADDR
// end ;
41301: GO 41210
41303: POP
41304: POP
// ComLinkTo ( vehicle , mech ) ;
41305: LD_VAR 0 1
41309: PPUSH
41310: LD_VAR 0 5
41314: PPUSH
41315: CALL_OW 135
// end ;
41319: LD_VAR 0 2
41323: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41324: LD_INT 0
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
41333: PPUSH
41334: PPUSH
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
// result := [ ] ;
41339: LD_ADDR_VAR 0 7
41343: PUSH
41344: EMPTY
41345: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41346: LD_VAR 0 1
41350: PPUSH
41351: CALL_OW 266
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: IN
41366: NOT
41367: IFFALSE 41371
// exit ;
41369: GO 43002
// if name then
41371: LD_VAR 0 3
41375: IFFALSE 41391
// SetBName ( base_dep , name ) ;
41377: LD_VAR 0 1
41381: PPUSH
41382: LD_VAR 0 3
41386: PPUSH
41387: CALL_OW 500
// base := GetBase ( base_dep ) ;
41391: LD_ADDR_VAR 0 15
41395: PUSH
41396: LD_VAR 0 1
41400: PPUSH
41401: CALL_OW 274
41405: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41406: LD_ADDR_VAR 0 16
41410: PUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 255
41420: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41421: LD_ADDR_VAR 0 17
41425: PUSH
41426: LD_VAR 0 1
41430: PPUSH
41431: CALL_OW 248
41435: ST_TO_ADDR
// if sources then
41436: LD_VAR 0 5
41440: IFFALSE 41487
// for i = 1 to 3 do
41442: LD_ADDR_VAR 0 8
41446: PUSH
41447: DOUBLE
41448: LD_INT 1
41450: DEC
41451: ST_TO_ADDR
41452: LD_INT 3
41454: PUSH
41455: FOR_TO
41456: IFFALSE 41485
// AddResourceType ( base , i , sources [ i ] ) ;
41458: LD_VAR 0 15
41462: PPUSH
41463: LD_VAR 0 8
41467: PPUSH
41468: LD_VAR 0 5
41472: PUSH
41473: LD_VAR 0 8
41477: ARRAY
41478: PPUSH
41479: CALL_OW 276
41483: GO 41455
41485: POP
41486: POP
// buildings := GetBaseBuildings ( base , area ) ;
41487: LD_ADDR_VAR 0 18
41491: PUSH
41492: LD_VAR 0 15
41496: PPUSH
41497: LD_VAR 0 2
41501: PPUSH
41502: CALL 40779 0 2
41506: ST_TO_ADDR
// InitHc ;
41507: CALL_OW 19
// InitUc ;
41511: CALL_OW 18
// uc_side := side ;
41515: LD_ADDR_OWVAR 20
41519: PUSH
41520: LD_VAR 0 16
41524: ST_TO_ADDR
// uc_nation := nation ;
41525: LD_ADDR_OWVAR 21
41529: PUSH
41530: LD_VAR 0 17
41534: ST_TO_ADDR
// if buildings then
41535: LD_VAR 0 18
41539: IFFALSE 42861
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41541: LD_ADDR_VAR 0 19
41545: PUSH
41546: LD_VAR 0 18
41550: PPUSH
41551: LD_INT 2
41553: PUSH
41554: LD_INT 30
41556: PUSH
41557: LD_INT 29
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 30
41566: PUSH
41567: LD_INT 30
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: LIST
41578: PPUSH
41579: CALL_OW 72
41583: ST_TO_ADDR
// if tmp then
41584: LD_VAR 0 19
41588: IFFALSE 41636
// for i in tmp do
41590: LD_ADDR_VAR 0 8
41594: PUSH
41595: LD_VAR 0 19
41599: PUSH
41600: FOR_IN
41601: IFFALSE 41634
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41603: LD_VAR 0 8
41607: PPUSH
41608: CALL_OW 250
41612: PPUSH
41613: LD_VAR 0 8
41617: PPUSH
41618: CALL_OW 251
41622: PPUSH
41623: LD_VAR 0 16
41627: PPUSH
41628: CALL_OW 441
41632: GO 41600
41634: POP
41635: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41636: LD_VAR 0 18
41640: PPUSH
41641: LD_INT 2
41643: PUSH
41644: LD_INT 30
41646: PUSH
41647: LD_INT 32
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 30
41656: PUSH
41657: LD_INT 33
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: LIST
41668: PPUSH
41669: CALL_OW 72
41673: IFFALSE 41761
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41675: LD_ADDR_VAR 0 8
41679: PUSH
41680: LD_VAR 0 18
41684: PPUSH
41685: LD_INT 2
41687: PUSH
41688: LD_INT 30
41690: PUSH
41691: LD_INT 32
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 30
41700: PUSH
41701: LD_INT 33
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: LIST
41712: PPUSH
41713: CALL_OW 72
41717: PUSH
41718: FOR_IN
41719: IFFALSE 41759
// begin if not GetBWeapon ( i ) then
41721: LD_VAR 0 8
41725: PPUSH
41726: CALL_OW 269
41730: NOT
41731: IFFALSE 41757
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41733: LD_VAR 0 8
41737: PPUSH
41738: LD_VAR 0 8
41742: PPUSH
41743: LD_VAR 0 2
41747: PPUSH
41748: CALL 43007 0 2
41752: PPUSH
41753: CALL_OW 431
// end ;
41757: GO 41718
41759: POP
41760: POP
// end ; for i = 1 to personel do
41761: LD_ADDR_VAR 0 8
41765: PUSH
41766: DOUBLE
41767: LD_INT 1
41769: DEC
41770: ST_TO_ADDR
41771: LD_VAR 0 6
41775: PUSH
41776: FOR_TO
41777: IFFALSE 42841
// begin if i > 4 then
41779: LD_VAR 0 8
41783: PUSH
41784: LD_INT 4
41786: GREATER
41787: IFFALSE 41791
// break ;
41789: GO 42841
// case i of 1 :
41791: LD_VAR 0 8
41795: PUSH
41796: LD_INT 1
41798: DOUBLE
41799: EQUAL
41800: IFTRUE 41804
41802: GO 41884
41804: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41805: LD_ADDR_VAR 0 12
41809: PUSH
41810: LD_VAR 0 18
41814: PPUSH
41815: LD_INT 22
41817: PUSH
41818: LD_VAR 0 16
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 58
41829: PUSH
41830: EMPTY
41831: LIST
41832: PUSH
41833: LD_INT 2
41835: PUSH
41836: LD_INT 30
41838: PUSH
41839: LD_INT 32
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 30
41848: PUSH
41849: LD_INT 4
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 30
41858: PUSH
41859: LD_INT 5
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: PPUSH
41877: CALL_OW 72
41881: ST_TO_ADDR
41882: GO 42106
41884: LD_INT 2
41886: DOUBLE
41887: EQUAL
41888: IFTRUE 41892
41890: GO 41954
41892: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41893: LD_ADDR_VAR 0 12
41897: PUSH
41898: LD_VAR 0 18
41902: PPUSH
41903: LD_INT 22
41905: PUSH
41906: LD_VAR 0 16
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: LD_INT 30
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 30
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: LIST
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PPUSH
41947: CALL_OW 72
41951: ST_TO_ADDR
41952: GO 42106
41954: LD_INT 3
41956: DOUBLE
41957: EQUAL
41958: IFTRUE 41962
41960: GO 42024
41962: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41963: LD_ADDR_VAR 0 12
41967: PUSH
41968: LD_VAR 0 18
41972: PPUSH
41973: LD_INT 22
41975: PUSH
41976: LD_VAR 0 16
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: LD_INT 30
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 30
42000: PUSH
42001: LD_INT 3
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: LIST
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PPUSH
42017: CALL_OW 72
42021: ST_TO_ADDR
42022: GO 42106
42024: LD_INT 4
42026: DOUBLE
42027: EQUAL
42028: IFTRUE 42032
42030: GO 42105
42032: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42033: LD_ADDR_VAR 0 12
42037: PUSH
42038: LD_VAR 0 18
42042: PPUSH
42043: LD_INT 22
42045: PUSH
42046: LD_VAR 0 16
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: LD_INT 30
42060: PUSH
42061: LD_INT 6
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 30
42070: PUSH
42071: LD_INT 7
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 30
42080: PUSH
42081: LD_INT 8
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PPUSH
42098: CALL_OW 72
42102: ST_TO_ADDR
42103: GO 42106
42105: POP
// if i = 1 then
42106: LD_VAR 0 8
42110: PUSH
42111: LD_INT 1
42113: EQUAL
42114: IFFALSE 42225
// begin tmp := [ ] ;
42116: LD_ADDR_VAR 0 19
42120: PUSH
42121: EMPTY
42122: ST_TO_ADDR
// for j in f do
42123: LD_ADDR_VAR 0 9
42127: PUSH
42128: LD_VAR 0 12
42132: PUSH
42133: FOR_IN
42134: IFFALSE 42207
// if GetBType ( j ) = b_bunker then
42136: LD_VAR 0 9
42140: PPUSH
42141: CALL_OW 266
42145: PUSH
42146: LD_INT 32
42148: EQUAL
42149: IFFALSE 42176
// tmp := Insert ( tmp , 1 , j ) else
42151: LD_ADDR_VAR 0 19
42155: PUSH
42156: LD_VAR 0 19
42160: PPUSH
42161: LD_INT 1
42163: PPUSH
42164: LD_VAR 0 9
42168: PPUSH
42169: CALL_OW 2
42173: ST_TO_ADDR
42174: GO 42205
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42176: LD_ADDR_VAR 0 19
42180: PUSH
42181: LD_VAR 0 19
42185: PPUSH
42186: LD_VAR 0 19
42190: PUSH
42191: LD_INT 1
42193: PLUS
42194: PPUSH
42195: LD_VAR 0 9
42199: PPUSH
42200: CALL_OW 2
42204: ST_TO_ADDR
42205: GO 42133
42207: POP
42208: POP
// if tmp then
42209: LD_VAR 0 19
42213: IFFALSE 42225
// f := tmp ;
42215: LD_ADDR_VAR 0 12
42219: PUSH
42220: LD_VAR 0 19
42224: ST_TO_ADDR
// end ; x := personel [ i ] ;
42225: LD_ADDR_VAR 0 13
42229: PUSH
42230: LD_VAR 0 6
42234: PUSH
42235: LD_VAR 0 8
42239: ARRAY
42240: ST_TO_ADDR
// if x = - 1 then
42241: LD_VAR 0 13
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: EQUAL
42250: IFFALSE 42459
// begin for j in f do
42252: LD_ADDR_VAR 0 9
42256: PUSH
42257: LD_VAR 0 12
42261: PUSH
42262: FOR_IN
42263: IFFALSE 42455
// repeat InitHc ;
42265: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42269: LD_VAR 0 9
42273: PPUSH
42274: CALL_OW 266
42278: PUSH
42279: LD_INT 5
42281: EQUAL
42282: IFFALSE 42352
// begin if UnitsInside ( j ) < 3 then
42284: LD_VAR 0 9
42288: PPUSH
42289: CALL_OW 313
42293: PUSH
42294: LD_INT 3
42296: LESS
42297: IFFALSE 42333
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42299: LD_INT 0
42301: PPUSH
42302: LD_INT 5
42304: PUSH
42305: LD_INT 8
42307: PUSH
42308: LD_INT 9
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: LIST
42315: PUSH
42316: LD_VAR 0 17
42320: ARRAY
42321: PPUSH
42322: LD_VAR 0 4
42326: PPUSH
42327: CALL_OW 380
42331: GO 42350
// PrepareHuman ( false , i , skill ) ;
42333: LD_INT 0
42335: PPUSH
42336: LD_VAR 0 8
42340: PPUSH
42341: LD_VAR 0 4
42345: PPUSH
42346: CALL_OW 380
// end else
42350: GO 42369
// PrepareHuman ( false , i , skill ) ;
42352: LD_INT 0
42354: PPUSH
42355: LD_VAR 0 8
42359: PPUSH
42360: LD_VAR 0 4
42364: PPUSH
42365: CALL_OW 380
// un := CreateHuman ;
42369: LD_ADDR_VAR 0 14
42373: PUSH
42374: CALL_OW 44
42378: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42379: LD_ADDR_VAR 0 7
42383: PUSH
42384: LD_VAR 0 7
42388: PPUSH
42389: LD_INT 1
42391: PPUSH
42392: LD_VAR 0 14
42396: PPUSH
42397: CALL_OW 2
42401: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42402: LD_VAR 0 14
42406: PPUSH
42407: LD_VAR 0 9
42411: PPUSH
42412: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42416: LD_VAR 0 9
42420: PPUSH
42421: CALL_OW 313
42425: PUSH
42426: LD_INT 6
42428: EQUAL
42429: PUSH
42430: LD_VAR 0 9
42434: PPUSH
42435: CALL_OW 266
42439: PUSH
42440: LD_INT 32
42442: PUSH
42443: LD_INT 31
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: IN
42450: OR
42451: IFFALSE 42265
42453: GO 42262
42455: POP
42456: POP
// end else
42457: GO 42839
// for j = 1 to x do
42459: LD_ADDR_VAR 0 9
42463: PUSH
42464: DOUBLE
42465: LD_INT 1
42467: DEC
42468: ST_TO_ADDR
42469: LD_VAR 0 13
42473: PUSH
42474: FOR_TO
42475: IFFALSE 42837
// begin InitHc ;
42477: CALL_OW 19
// if not f then
42481: LD_VAR 0 12
42485: NOT
42486: IFFALSE 42575
// begin PrepareHuman ( false , i , skill ) ;
42488: LD_INT 0
42490: PPUSH
42491: LD_VAR 0 8
42495: PPUSH
42496: LD_VAR 0 4
42500: PPUSH
42501: CALL_OW 380
// un := CreateHuman ;
42505: LD_ADDR_VAR 0 14
42509: PUSH
42510: CALL_OW 44
42514: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42515: LD_ADDR_VAR 0 7
42519: PUSH
42520: LD_VAR 0 7
42524: PPUSH
42525: LD_INT 1
42527: PPUSH
42528: LD_VAR 0 14
42532: PPUSH
42533: CALL_OW 2
42537: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42538: LD_VAR 0 14
42542: PPUSH
42543: LD_VAR 0 1
42547: PPUSH
42548: CALL_OW 250
42552: PPUSH
42553: LD_VAR 0 1
42557: PPUSH
42558: CALL_OW 251
42562: PPUSH
42563: LD_INT 10
42565: PPUSH
42566: LD_INT 0
42568: PPUSH
42569: CALL_OW 50
// continue ;
42573: GO 42474
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42575: LD_VAR 0 12
42579: PUSH
42580: LD_INT 1
42582: ARRAY
42583: PPUSH
42584: CALL_OW 313
42588: PUSH
42589: LD_VAR 0 12
42593: PUSH
42594: LD_INT 1
42596: ARRAY
42597: PPUSH
42598: CALL_OW 266
42602: PUSH
42603: LD_INT 32
42605: PUSH
42606: LD_INT 31
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: IN
42613: AND
42614: PUSH
42615: LD_VAR 0 12
42619: PUSH
42620: LD_INT 1
42622: ARRAY
42623: PPUSH
42624: CALL_OW 313
42628: PUSH
42629: LD_INT 6
42631: EQUAL
42632: OR
42633: IFFALSE 42653
// f := Delete ( f , 1 ) ;
42635: LD_ADDR_VAR 0 12
42639: PUSH
42640: LD_VAR 0 12
42644: PPUSH
42645: LD_INT 1
42647: PPUSH
42648: CALL_OW 3
42652: ST_TO_ADDR
// if not f then
42653: LD_VAR 0 12
42657: NOT
42658: IFFALSE 42676
// begin x := x + 2 ;
42660: LD_ADDR_VAR 0 13
42664: PUSH
42665: LD_VAR 0 13
42669: PUSH
42670: LD_INT 2
42672: PLUS
42673: ST_TO_ADDR
// continue ;
42674: GO 42474
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42676: LD_VAR 0 12
42680: PUSH
42681: LD_INT 1
42683: ARRAY
42684: PPUSH
42685: CALL_OW 266
42689: PUSH
42690: LD_INT 5
42692: EQUAL
42693: IFFALSE 42767
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42695: LD_VAR 0 12
42699: PUSH
42700: LD_INT 1
42702: ARRAY
42703: PPUSH
42704: CALL_OW 313
42708: PUSH
42709: LD_INT 3
42711: LESS
42712: IFFALSE 42748
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42714: LD_INT 0
42716: PPUSH
42717: LD_INT 5
42719: PUSH
42720: LD_INT 8
42722: PUSH
42723: LD_INT 9
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: LIST
42730: PUSH
42731: LD_VAR 0 17
42735: ARRAY
42736: PPUSH
42737: LD_VAR 0 4
42741: PPUSH
42742: CALL_OW 380
42746: GO 42765
// PrepareHuman ( false , i , skill ) ;
42748: LD_INT 0
42750: PPUSH
42751: LD_VAR 0 8
42755: PPUSH
42756: LD_VAR 0 4
42760: PPUSH
42761: CALL_OW 380
// end else
42765: GO 42784
// PrepareHuman ( false , i , skill ) ;
42767: LD_INT 0
42769: PPUSH
42770: LD_VAR 0 8
42774: PPUSH
42775: LD_VAR 0 4
42779: PPUSH
42780: CALL_OW 380
// un := CreateHuman ;
42784: LD_ADDR_VAR 0 14
42788: PUSH
42789: CALL_OW 44
42793: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42794: LD_ADDR_VAR 0 7
42798: PUSH
42799: LD_VAR 0 7
42803: PPUSH
42804: LD_INT 1
42806: PPUSH
42807: LD_VAR 0 14
42811: PPUSH
42812: CALL_OW 2
42816: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42817: LD_VAR 0 14
42821: PPUSH
42822: LD_VAR 0 12
42826: PUSH
42827: LD_INT 1
42829: ARRAY
42830: PPUSH
42831: CALL_OW 52
// end ;
42835: GO 42474
42837: POP
42838: POP
// end ;
42839: GO 41776
42841: POP
42842: POP
// result := result ^ buildings ;
42843: LD_ADDR_VAR 0 7
42847: PUSH
42848: LD_VAR 0 7
42852: PUSH
42853: LD_VAR 0 18
42857: ADD
42858: ST_TO_ADDR
// end else
42859: GO 43002
// begin for i = 1 to personel do
42861: LD_ADDR_VAR 0 8
42865: PUSH
42866: DOUBLE
42867: LD_INT 1
42869: DEC
42870: ST_TO_ADDR
42871: LD_VAR 0 6
42875: PUSH
42876: FOR_TO
42877: IFFALSE 43000
// begin if i > 4 then
42879: LD_VAR 0 8
42883: PUSH
42884: LD_INT 4
42886: GREATER
42887: IFFALSE 42891
// break ;
42889: GO 43000
// x := personel [ i ] ;
42891: LD_ADDR_VAR 0 13
42895: PUSH
42896: LD_VAR 0 6
42900: PUSH
42901: LD_VAR 0 8
42905: ARRAY
42906: ST_TO_ADDR
// if x = - 1 then
42907: LD_VAR 0 13
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: EQUAL
42916: IFFALSE 42920
// continue ;
42918: GO 42876
// PrepareHuman ( false , i , skill ) ;
42920: LD_INT 0
42922: PPUSH
42923: LD_VAR 0 8
42927: PPUSH
42928: LD_VAR 0 4
42932: PPUSH
42933: CALL_OW 380
// un := CreateHuman ;
42937: LD_ADDR_VAR 0 14
42941: PUSH
42942: CALL_OW 44
42946: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42947: LD_VAR 0 14
42951: PPUSH
42952: LD_VAR 0 1
42956: PPUSH
42957: CALL_OW 250
42961: PPUSH
42962: LD_VAR 0 1
42966: PPUSH
42967: CALL_OW 251
42971: PPUSH
42972: LD_INT 10
42974: PPUSH
42975: LD_INT 0
42977: PPUSH
42978: CALL_OW 50
// result := result ^ un ;
42982: LD_ADDR_VAR 0 7
42986: PUSH
42987: LD_VAR 0 7
42991: PUSH
42992: LD_VAR 0 14
42996: ADD
42997: ST_TO_ADDR
// end ;
42998: GO 42876
43000: POP
43001: POP
// end ; end ;
43002: LD_VAR 0 7
43006: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43007: LD_INT 0
43009: PPUSH
43010: PPUSH
43011: PPUSH
43012: PPUSH
43013: PPUSH
43014: PPUSH
43015: PPUSH
43016: PPUSH
43017: PPUSH
43018: PPUSH
43019: PPUSH
43020: PPUSH
43021: PPUSH
43022: PPUSH
43023: PPUSH
43024: PPUSH
// result := false ;
43025: LD_ADDR_VAR 0 3
43029: PUSH
43030: LD_INT 0
43032: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43033: LD_VAR 0 1
43037: NOT
43038: PUSH
43039: LD_VAR 0 1
43043: PPUSH
43044: CALL_OW 266
43048: PUSH
43049: LD_INT 32
43051: PUSH
43052: LD_INT 33
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: IN
43059: NOT
43060: OR
43061: IFFALSE 43065
// exit ;
43063: GO 44201
// nat := GetNation ( tower ) ;
43065: LD_ADDR_VAR 0 12
43069: PUSH
43070: LD_VAR 0 1
43074: PPUSH
43075: CALL_OW 248
43079: ST_TO_ADDR
// side := GetSide ( tower ) ;
43080: LD_ADDR_VAR 0 16
43084: PUSH
43085: LD_VAR 0 1
43089: PPUSH
43090: CALL_OW 255
43094: ST_TO_ADDR
// x := GetX ( tower ) ;
43095: LD_ADDR_VAR 0 10
43099: PUSH
43100: LD_VAR 0 1
43104: PPUSH
43105: CALL_OW 250
43109: ST_TO_ADDR
// y := GetY ( tower ) ;
43110: LD_ADDR_VAR 0 11
43114: PUSH
43115: LD_VAR 0 1
43119: PPUSH
43120: CALL_OW 251
43124: ST_TO_ADDR
// if not x or not y then
43125: LD_VAR 0 10
43129: NOT
43130: PUSH
43131: LD_VAR 0 11
43135: NOT
43136: OR
43137: IFFALSE 43141
// exit ;
43139: GO 44201
// weapon := 0 ;
43141: LD_ADDR_VAR 0 18
43145: PUSH
43146: LD_INT 0
43148: ST_TO_ADDR
// fac_list := [ ] ;
43149: LD_ADDR_VAR 0 17
43153: PUSH
43154: EMPTY
43155: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
43156: LD_ADDR_VAR 0 6
43160: PUSH
43161: LD_VAR 0 1
43165: PPUSH
43166: CALL_OW 274
43170: PPUSH
43171: LD_VAR 0 2
43175: PPUSH
43176: CALL 40779 0 2
43180: PPUSH
43181: LD_INT 30
43183: PUSH
43184: LD_INT 3
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PPUSH
43191: CALL_OW 72
43195: ST_TO_ADDR
// if not factories then
43196: LD_VAR 0 6
43200: NOT
43201: IFFALSE 43205
// exit ;
43203: GO 44201
// for i in factories do
43205: LD_ADDR_VAR 0 8
43209: PUSH
43210: LD_VAR 0 6
43214: PUSH
43215: FOR_IN
43216: IFFALSE 43241
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43218: LD_ADDR_VAR 0 17
43222: PUSH
43223: LD_VAR 0 17
43227: PUSH
43228: LD_VAR 0 8
43232: PPUSH
43233: CALL_OW 478
43237: UNION
43238: ST_TO_ADDR
43239: GO 43215
43241: POP
43242: POP
// if not fac_list then
43243: LD_VAR 0 17
43247: NOT
43248: IFFALSE 43252
// exit ;
43250: GO 44201
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43252: LD_ADDR_VAR 0 5
43256: PUSH
43257: LD_INT 4
43259: PUSH
43260: LD_INT 5
43262: PUSH
43263: LD_INT 9
43265: PUSH
43266: LD_INT 10
43268: PUSH
43269: LD_INT 6
43271: PUSH
43272: LD_INT 7
43274: PUSH
43275: LD_INT 11
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 27
43289: PUSH
43290: LD_INT 28
43292: PUSH
43293: LD_INT 26
43295: PUSH
43296: LD_INT 30
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 43
43307: PUSH
43308: LD_INT 44
43310: PUSH
43311: LD_INT 46
43313: PUSH
43314: LD_INT 45
43316: PUSH
43317: LD_INT 47
43319: PUSH
43320: LD_INT 49
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: PUSH
43336: LD_VAR 0 12
43340: ARRAY
43341: ST_TO_ADDR
// for i in list do
43342: LD_ADDR_VAR 0 8
43346: PUSH
43347: LD_VAR 0 5
43351: PUSH
43352: FOR_IN
43353: IFFALSE 43386
// if not i in fac_list then
43355: LD_VAR 0 8
43359: PUSH
43360: LD_VAR 0 17
43364: IN
43365: NOT
43366: IFFALSE 43384
// list := list diff i ;
43368: LD_ADDR_VAR 0 5
43372: PUSH
43373: LD_VAR 0 5
43377: PUSH
43378: LD_VAR 0 8
43382: DIFF
43383: ST_TO_ADDR
43384: GO 43352
43386: POP
43387: POP
// if not list then
43388: LD_VAR 0 5
43392: NOT
43393: IFFALSE 43397
// exit ;
43395: GO 44201
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43397: LD_VAR 0 12
43401: PUSH
43402: LD_INT 3
43404: EQUAL
43405: PUSH
43406: LD_INT 49
43408: PUSH
43409: LD_VAR 0 5
43413: IN
43414: AND
43415: PUSH
43416: LD_INT 31
43418: PPUSH
43419: LD_VAR 0 16
43423: PPUSH
43424: CALL_OW 321
43428: PUSH
43429: LD_INT 2
43431: EQUAL
43432: AND
43433: IFFALSE 43493
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43435: LD_INT 22
43437: PUSH
43438: LD_VAR 0 16
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 35
43449: PUSH
43450: LD_INT 49
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 91
43459: PUSH
43460: LD_VAR 0 1
43464: PUSH
43465: LD_INT 10
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: PPUSH
43478: CALL_OW 69
43482: NOT
43483: IFFALSE 43493
// weapon := ru_time_lapser ;
43485: LD_ADDR_VAR 0 18
43489: PUSH
43490: LD_INT 49
43492: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43493: LD_VAR 0 12
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: IN
43508: PUSH
43509: LD_INT 11
43511: PUSH
43512: LD_VAR 0 5
43516: IN
43517: PUSH
43518: LD_INT 30
43520: PUSH
43521: LD_VAR 0 5
43525: IN
43526: OR
43527: AND
43528: PUSH
43529: LD_INT 6
43531: PPUSH
43532: LD_VAR 0 16
43536: PPUSH
43537: CALL_OW 321
43541: PUSH
43542: LD_INT 2
43544: EQUAL
43545: AND
43546: IFFALSE 43711
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43548: LD_INT 22
43550: PUSH
43551: LD_VAR 0 16
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: LD_INT 35
43565: PUSH
43566: LD_INT 11
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 35
43575: PUSH
43576: LD_INT 30
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 91
43590: PUSH
43591: LD_VAR 0 1
43595: PUSH
43596: LD_INT 18
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: PPUSH
43609: CALL_OW 69
43613: NOT
43614: PUSH
43615: LD_INT 22
43617: PUSH
43618: LD_VAR 0 16
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: LD_INT 30
43632: PUSH
43633: LD_INT 32
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 30
43642: PUSH
43643: LD_INT 33
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 91
43657: PUSH
43658: LD_VAR 0 1
43662: PUSH
43663: LD_INT 12
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: LIST
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: PUSH
43676: EMPTY
43677: LIST
43678: PPUSH
43679: CALL_OW 69
43683: PUSH
43684: LD_INT 2
43686: GREATER
43687: AND
43688: IFFALSE 43711
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43690: LD_ADDR_VAR 0 18
43694: PUSH
43695: LD_INT 11
43697: PUSH
43698: LD_INT 30
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_VAR 0 12
43709: ARRAY
43710: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43711: LD_VAR 0 18
43715: NOT
43716: PUSH
43717: LD_INT 40
43719: PPUSH
43720: LD_VAR 0 16
43724: PPUSH
43725: CALL_OW 321
43729: PUSH
43730: LD_INT 2
43732: EQUAL
43733: AND
43734: PUSH
43735: LD_INT 7
43737: PUSH
43738: LD_VAR 0 5
43742: IN
43743: PUSH
43744: LD_INT 28
43746: PUSH
43747: LD_VAR 0 5
43751: IN
43752: OR
43753: PUSH
43754: LD_INT 45
43756: PUSH
43757: LD_VAR 0 5
43761: IN
43762: OR
43763: AND
43764: IFFALSE 44018
// begin hex := GetHexInfo ( x , y ) ;
43766: LD_ADDR_VAR 0 4
43770: PUSH
43771: LD_VAR 0 10
43775: PPUSH
43776: LD_VAR 0 11
43780: PPUSH
43781: CALL_OW 546
43785: ST_TO_ADDR
// if hex [ 1 ] then
43786: LD_VAR 0 4
43790: PUSH
43791: LD_INT 1
43793: ARRAY
43794: IFFALSE 43798
// exit ;
43796: GO 44201
// height := hex [ 2 ] ;
43798: LD_ADDR_VAR 0 15
43802: PUSH
43803: LD_VAR 0 4
43807: PUSH
43808: LD_INT 2
43810: ARRAY
43811: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43812: LD_ADDR_VAR 0 14
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: LD_INT 3
43825: PUSH
43826: LD_INT 5
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: ST_TO_ADDR
// for i in tmp do
43835: LD_ADDR_VAR 0 8
43839: PUSH
43840: LD_VAR 0 14
43844: PUSH
43845: FOR_IN
43846: IFFALSE 44016
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43848: LD_ADDR_VAR 0 9
43852: PUSH
43853: LD_VAR 0 10
43857: PPUSH
43858: LD_VAR 0 8
43862: PPUSH
43863: LD_INT 5
43865: PPUSH
43866: CALL_OW 272
43870: PUSH
43871: LD_VAR 0 11
43875: PPUSH
43876: LD_VAR 0 8
43880: PPUSH
43881: LD_INT 5
43883: PPUSH
43884: CALL_OW 273
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43893: LD_VAR 0 9
43897: PUSH
43898: LD_INT 1
43900: ARRAY
43901: PPUSH
43902: LD_VAR 0 9
43906: PUSH
43907: LD_INT 2
43909: ARRAY
43910: PPUSH
43911: CALL_OW 488
43915: IFFALSE 44014
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43917: LD_ADDR_VAR 0 4
43921: PUSH
43922: LD_VAR 0 9
43926: PUSH
43927: LD_INT 1
43929: ARRAY
43930: PPUSH
43931: LD_VAR 0 9
43935: PUSH
43936: LD_INT 2
43938: ARRAY
43939: PPUSH
43940: CALL_OW 546
43944: ST_TO_ADDR
// if hex [ 1 ] then
43945: LD_VAR 0 4
43949: PUSH
43950: LD_INT 1
43952: ARRAY
43953: IFFALSE 43957
// continue ;
43955: GO 43845
// h := hex [ 2 ] ;
43957: LD_ADDR_VAR 0 13
43961: PUSH
43962: LD_VAR 0 4
43966: PUSH
43967: LD_INT 2
43969: ARRAY
43970: ST_TO_ADDR
// if h + 7 < height then
43971: LD_VAR 0 13
43975: PUSH
43976: LD_INT 7
43978: PLUS
43979: PUSH
43980: LD_VAR 0 15
43984: LESS
43985: IFFALSE 44014
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43987: LD_ADDR_VAR 0 18
43991: PUSH
43992: LD_INT 7
43994: PUSH
43995: LD_INT 28
43997: PUSH
43998: LD_INT 45
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: PUSH
44006: LD_VAR 0 12
44010: ARRAY
44011: ST_TO_ADDR
// break ;
44012: GO 44016
// end ; end ; end ;
44014: GO 43845
44016: POP
44017: POP
// end ; if not weapon then
44018: LD_VAR 0 18
44022: NOT
44023: IFFALSE 44083
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44025: LD_ADDR_VAR 0 5
44029: PUSH
44030: LD_VAR 0 5
44034: PUSH
44035: LD_INT 11
44037: PUSH
44038: LD_INT 30
44040: PUSH
44041: LD_INT 49
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: LIST
44048: DIFF
44049: ST_TO_ADDR
// if not list then
44050: LD_VAR 0 5
44054: NOT
44055: IFFALSE 44059
// exit ;
44057: GO 44201
// weapon := list [ rand ( 1 , list ) ] ;
44059: LD_ADDR_VAR 0 18
44063: PUSH
44064: LD_VAR 0 5
44068: PUSH
44069: LD_INT 1
44071: PPUSH
44072: LD_VAR 0 5
44076: PPUSH
44077: CALL_OW 12
44081: ARRAY
44082: ST_TO_ADDR
// end ; if weapon then
44083: LD_VAR 0 18
44087: IFFALSE 44201
// begin tmp := CostOfWeapon ( weapon ) ;
44089: LD_ADDR_VAR 0 14
44093: PUSH
44094: LD_VAR 0 18
44098: PPUSH
44099: CALL_OW 451
44103: ST_TO_ADDR
// j := GetBase ( tower ) ;
44104: LD_ADDR_VAR 0 9
44108: PUSH
44109: LD_VAR 0 1
44113: PPUSH
44114: CALL_OW 274
44118: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44119: LD_VAR 0 9
44123: PPUSH
44124: LD_INT 1
44126: PPUSH
44127: CALL_OW 275
44131: PUSH
44132: LD_VAR 0 14
44136: PUSH
44137: LD_INT 1
44139: ARRAY
44140: GREATEREQUAL
44141: PUSH
44142: LD_VAR 0 9
44146: PPUSH
44147: LD_INT 2
44149: PPUSH
44150: CALL_OW 275
44154: PUSH
44155: LD_VAR 0 14
44159: PUSH
44160: LD_INT 2
44162: ARRAY
44163: GREATEREQUAL
44164: AND
44165: PUSH
44166: LD_VAR 0 9
44170: PPUSH
44171: LD_INT 3
44173: PPUSH
44174: CALL_OW 275
44178: PUSH
44179: LD_VAR 0 14
44183: PUSH
44184: LD_INT 3
44186: ARRAY
44187: GREATEREQUAL
44188: AND
44189: IFFALSE 44201
// result := weapon ;
44191: LD_ADDR_VAR 0 3
44195: PUSH
44196: LD_VAR 0 18
44200: ST_TO_ADDR
// end ; end ;
44201: LD_VAR 0 3
44205: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44206: LD_INT 0
44208: PPUSH
44209: PPUSH
// result := true ;
44210: LD_ADDR_VAR 0 3
44214: PUSH
44215: LD_INT 1
44217: ST_TO_ADDR
// if array1 = array2 then
44218: LD_VAR 0 1
44222: PUSH
44223: LD_VAR 0 2
44227: EQUAL
44228: IFFALSE 44288
// begin for i = 1 to array1 do
44230: LD_ADDR_VAR 0 4
44234: PUSH
44235: DOUBLE
44236: LD_INT 1
44238: DEC
44239: ST_TO_ADDR
44240: LD_VAR 0 1
44244: PUSH
44245: FOR_TO
44246: IFFALSE 44284
// if array1 [ i ] <> array2 [ i ] then
44248: LD_VAR 0 1
44252: PUSH
44253: LD_VAR 0 4
44257: ARRAY
44258: PUSH
44259: LD_VAR 0 2
44263: PUSH
44264: LD_VAR 0 4
44268: ARRAY
44269: NONEQUAL
44270: IFFALSE 44282
// begin result := false ;
44272: LD_ADDR_VAR 0 3
44276: PUSH
44277: LD_INT 0
44279: ST_TO_ADDR
// break ;
44280: GO 44284
// end ;
44282: GO 44245
44284: POP
44285: POP
// end else
44286: GO 44296
// result := false ;
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_INT 0
44295: ST_TO_ADDR
// end ;
44296: LD_VAR 0 3
44300: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44301: LD_INT 0
44303: PPUSH
44304: PPUSH
44305: PPUSH
// pom := GetBase ( fac ) ;
44306: LD_ADDR_VAR 0 5
44310: PUSH
44311: LD_VAR 0 1
44315: PPUSH
44316: CALL_OW 274
44320: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44321: LD_ADDR_VAR 0 4
44325: PUSH
44326: LD_VAR 0 2
44330: PUSH
44331: LD_INT 1
44333: ARRAY
44334: PPUSH
44335: LD_VAR 0 2
44339: PUSH
44340: LD_INT 2
44342: ARRAY
44343: PPUSH
44344: LD_VAR 0 2
44348: PUSH
44349: LD_INT 3
44351: ARRAY
44352: PPUSH
44353: LD_VAR 0 2
44357: PUSH
44358: LD_INT 4
44360: ARRAY
44361: PPUSH
44362: CALL_OW 449
44366: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44367: LD_ADDR_VAR 0 3
44371: PUSH
44372: LD_VAR 0 5
44376: PPUSH
44377: LD_INT 1
44379: PPUSH
44380: CALL_OW 275
44384: PUSH
44385: LD_VAR 0 4
44389: PUSH
44390: LD_INT 1
44392: ARRAY
44393: GREATEREQUAL
44394: PUSH
44395: LD_VAR 0 5
44399: PPUSH
44400: LD_INT 2
44402: PPUSH
44403: CALL_OW 275
44407: PUSH
44408: LD_VAR 0 4
44412: PUSH
44413: LD_INT 2
44415: ARRAY
44416: GREATEREQUAL
44417: AND
44418: PUSH
44419: LD_VAR 0 5
44423: PPUSH
44424: LD_INT 3
44426: PPUSH
44427: CALL_OW 275
44431: PUSH
44432: LD_VAR 0 4
44436: PUSH
44437: LD_INT 3
44439: ARRAY
44440: GREATEREQUAL
44441: AND
44442: ST_TO_ADDR
// end ;
44443: LD_VAR 0 3
44447: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44448: LD_INT 0
44450: PPUSH
44451: PPUSH
44452: PPUSH
44453: PPUSH
// pom := GetBase ( building ) ;
44454: LD_ADDR_VAR 0 3
44458: PUSH
44459: LD_VAR 0 1
44463: PPUSH
44464: CALL_OW 274
44468: ST_TO_ADDR
// if not pom then
44469: LD_VAR 0 3
44473: NOT
44474: IFFALSE 44478
// exit ;
44476: GO 44648
// btype := GetBType ( building ) ;
44478: LD_ADDR_VAR 0 5
44482: PUSH
44483: LD_VAR 0 1
44487: PPUSH
44488: CALL_OW 266
44492: ST_TO_ADDR
// if btype = b_armoury then
44493: LD_VAR 0 5
44497: PUSH
44498: LD_INT 4
44500: EQUAL
44501: IFFALSE 44511
// btype := b_barracks ;
44503: LD_ADDR_VAR 0 5
44507: PUSH
44508: LD_INT 5
44510: ST_TO_ADDR
// if btype = b_depot then
44511: LD_VAR 0 5
44515: PUSH
44516: LD_INT 0
44518: EQUAL
44519: IFFALSE 44529
// btype := b_warehouse ;
44521: LD_ADDR_VAR 0 5
44525: PUSH
44526: LD_INT 1
44528: ST_TO_ADDR
// if btype = b_workshop then
44529: LD_VAR 0 5
44533: PUSH
44534: LD_INT 2
44536: EQUAL
44537: IFFALSE 44547
// btype := b_factory ;
44539: LD_ADDR_VAR 0 5
44543: PUSH
44544: LD_INT 3
44546: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44547: LD_ADDR_VAR 0 4
44551: PUSH
44552: LD_VAR 0 5
44556: PPUSH
44557: LD_VAR 0 1
44561: PPUSH
44562: CALL_OW 248
44566: PPUSH
44567: CALL_OW 450
44571: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44572: LD_ADDR_VAR 0 2
44576: PUSH
44577: LD_VAR 0 3
44581: PPUSH
44582: LD_INT 1
44584: PPUSH
44585: CALL_OW 275
44589: PUSH
44590: LD_VAR 0 4
44594: PUSH
44595: LD_INT 1
44597: ARRAY
44598: GREATEREQUAL
44599: PUSH
44600: LD_VAR 0 3
44604: PPUSH
44605: LD_INT 2
44607: PPUSH
44608: CALL_OW 275
44612: PUSH
44613: LD_VAR 0 4
44617: PUSH
44618: LD_INT 2
44620: ARRAY
44621: GREATEREQUAL
44622: AND
44623: PUSH
44624: LD_VAR 0 3
44628: PPUSH
44629: LD_INT 3
44631: PPUSH
44632: CALL_OW 275
44636: PUSH
44637: LD_VAR 0 4
44641: PUSH
44642: LD_INT 3
44644: ARRAY
44645: GREATEREQUAL
44646: AND
44647: ST_TO_ADDR
// end ;
44648: LD_VAR 0 2
44652: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44653: LD_INT 0
44655: PPUSH
44656: PPUSH
44657: PPUSH
// pom := GetBase ( building ) ;
44658: LD_ADDR_VAR 0 4
44662: PUSH
44663: LD_VAR 0 1
44667: PPUSH
44668: CALL_OW 274
44672: ST_TO_ADDR
// if not pom then
44673: LD_VAR 0 4
44677: NOT
44678: IFFALSE 44682
// exit ;
44680: GO 44783
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44682: LD_ADDR_VAR 0 5
44686: PUSH
44687: LD_VAR 0 2
44691: PPUSH
44692: LD_VAR 0 1
44696: PPUSH
44697: CALL_OW 248
44701: PPUSH
44702: CALL_OW 450
44706: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44707: LD_ADDR_VAR 0 3
44711: PUSH
44712: LD_VAR 0 4
44716: PPUSH
44717: LD_INT 1
44719: PPUSH
44720: CALL_OW 275
44724: PUSH
44725: LD_VAR 0 5
44729: PUSH
44730: LD_INT 1
44732: ARRAY
44733: GREATEREQUAL
44734: PUSH
44735: LD_VAR 0 4
44739: PPUSH
44740: LD_INT 2
44742: PPUSH
44743: CALL_OW 275
44747: PUSH
44748: LD_VAR 0 5
44752: PUSH
44753: LD_INT 2
44755: ARRAY
44756: GREATEREQUAL
44757: AND
44758: PUSH
44759: LD_VAR 0 4
44763: PPUSH
44764: LD_INT 3
44766: PPUSH
44767: CALL_OW 275
44771: PUSH
44772: LD_VAR 0 5
44776: PUSH
44777: LD_INT 3
44779: ARRAY
44780: GREATEREQUAL
44781: AND
44782: ST_TO_ADDR
// end ;
44783: LD_VAR 0 3
44787: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
44788: LD_INT 0
44790: PPUSH
44791: PPUSH
44792: PPUSH
44793: PPUSH
44794: PPUSH
44795: PPUSH
44796: PPUSH
44797: PPUSH
44798: PPUSH
44799: PPUSH
// result := false ;
44800: LD_ADDR_VAR 0 6
44804: PUSH
44805: LD_INT 0
44807: ST_TO_ADDR
// if not base or not btype or not x or not y then
44808: LD_VAR 0 1
44812: NOT
44813: PUSH
44814: LD_VAR 0 2
44818: NOT
44819: OR
44820: PUSH
44821: LD_VAR 0 3
44825: NOT
44826: OR
44827: PUSH
44828: LD_VAR 0 4
44832: NOT
44833: OR
44834: IFFALSE 44838
// exit ;
44836: GO 45447
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
44838: LD_ADDR_VAR 0 12
44842: PUSH
44843: LD_VAR 0 2
44847: PPUSH
44848: LD_VAR 0 3
44852: PPUSH
44853: LD_VAR 0 4
44857: PPUSH
44858: LD_VAR 0 5
44862: PPUSH
44863: LD_VAR 0 1
44867: PUSH
44868: LD_INT 1
44870: ARRAY
44871: PPUSH
44872: CALL_OW 248
44876: PPUSH
44877: LD_INT 0
44879: PPUSH
44880: CALL 46284 0 6
44884: ST_TO_ADDR
// if not hexes then
44885: LD_VAR 0 12
44889: NOT
44890: IFFALSE 44894
// exit ;
44892: GO 45447
// for i = 1 to hexes do
44894: LD_ADDR_VAR 0 7
44898: PUSH
44899: DOUBLE
44900: LD_INT 1
44902: DEC
44903: ST_TO_ADDR
44904: LD_VAR 0 12
44908: PUSH
44909: FOR_TO
44910: IFFALSE 45445
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44912: LD_ADDR_VAR 0 11
44916: PUSH
44917: LD_VAR 0 12
44921: PUSH
44922: LD_VAR 0 7
44926: ARRAY
44927: PUSH
44928: LD_INT 1
44930: ARRAY
44931: PPUSH
44932: LD_VAR 0 12
44936: PUSH
44937: LD_VAR 0 7
44941: ARRAY
44942: PUSH
44943: LD_INT 2
44945: ARRAY
44946: PPUSH
44947: CALL_OW 428
44951: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44952: LD_VAR 0 12
44956: PUSH
44957: LD_VAR 0 7
44961: ARRAY
44962: PUSH
44963: LD_INT 1
44965: ARRAY
44966: PPUSH
44967: LD_VAR 0 12
44971: PUSH
44972: LD_VAR 0 7
44976: ARRAY
44977: PUSH
44978: LD_INT 2
44980: ARRAY
44981: PPUSH
44982: CALL_OW 351
44986: PUSH
44987: LD_VAR 0 12
44991: PUSH
44992: LD_VAR 0 7
44996: ARRAY
44997: PUSH
44998: LD_INT 1
45000: ARRAY
45001: PPUSH
45002: LD_VAR 0 12
45006: PUSH
45007: LD_VAR 0 7
45011: ARRAY
45012: PUSH
45013: LD_INT 2
45015: ARRAY
45016: PPUSH
45017: CALL_OW 488
45021: NOT
45022: OR
45023: PUSH
45024: LD_VAR 0 11
45028: PPUSH
45029: CALL_OW 247
45033: PUSH
45034: LD_INT 3
45036: EQUAL
45037: OR
45038: IFFALSE 45044
// exit ;
45040: POP
45041: POP
45042: GO 45447
// if not tmp or not tmp in base then
45044: LD_VAR 0 11
45048: NOT
45049: PUSH
45050: LD_VAR 0 11
45054: PUSH
45055: LD_VAR 0 1
45059: IN
45060: NOT
45061: OR
45062: IFFALSE 45066
// continue ;
45064: GO 44909
// result := true ;
45066: LD_ADDR_VAR 0 6
45070: PUSH
45071: LD_INT 1
45073: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45074: LD_ADDR_VAR 0 15
45078: PUSH
45079: LD_VAR 0 1
45083: PPUSH
45084: LD_INT 22
45086: PUSH
45087: LD_VAR 0 11
45091: PPUSH
45092: CALL_OW 255
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: LD_INT 30
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 30
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: LIST
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PPUSH
45133: CALL_OW 72
45137: ST_TO_ADDR
// if dep then
45138: LD_VAR 0 15
45142: IFFALSE 45278
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45144: LD_ADDR_VAR 0 14
45148: PUSH
45149: LD_VAR 0 15
45153: PUSH
45154: LD_INT 1
45156: ARRAY
45157: PPUSH
45158: CALL_OW 250
45162: PPUSH
45163: LD_VAR 0 15
45167: PUSH
45168: LD_INT 1
45170: ARRAY
45171: PPUSH
45172: CALL_OW 254
45176: PPUSH
45177: LD_INT 5
45179: PPUSH
45180: CALL_OW 272
45184: PUSH
45185: LD_VAR 0 15
45189: PUSH
45190: LD_INT 1
45192: ARRAY
45193: PPUSH
45194: CALL_OW 251
45198: PPUSH
45199: LD_VAR 0 15
45203: PUSH
45204: LD_INT 1
45206: ARRAY
45207: PPUSH
45208: CALL_OW 254
45212: PPUSH
45213: LD_INT 5
45215: PPUSH
45216: CALL_OW 273
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45225: LD_VAR 0 14
45229: PUSH
45230: LD_INT 1
45232: ARRAY
45233: PPUSH
45234: LD_VAR 0 14
45238: PUSH
45239: LD_INT 2
45241: ARRAY
45242: PPUSH
45243: CALL_OW 488
45247: IFFALSE 45278
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45249: LD_VAR 0 11
45253: PPUSH
45254: LD_VAR 0 14
45258: PUSH
45259: LD_INT 1
45261: ARRAY
45262: PPUSH
45263: LD_VAR 0 14
45267: PUSH
45268: LD_INT 2
45270: ARRAY
45271: PPUSH
45272: CALL_OW 111
// continue ;
45276: GO 44909
// end ; end ; r := GetDir ( tmp ) ;
45278: LD_ADDR_VAR 0 13
45282: PUSH
45283: LD_VAR 0 11
45287: PPUSH
45288: CALL_OW 254
45292: ST_TO_ADDR
// if r = 5 then
45293: LD_VAR 0 13
45297: PUSH
45298: LD_INT 5
45300: EQUAL
45301: IFFALSE 45311
// r := 0 ;
45303: LD_ADDR_VAR 0 13
45307: PUSH
45308: LD_INT 0
45310: ST_TO_ADDR
// for j = r to 5 do
45311: LD_ADDR_VAR 0 8
45315: PUSH
45316: DOUBLE
45317: LD_VAR 0 13
45321: DEC
45322: ST_TO_ADDR
45323: LD_INT 5
45325: PUSH
45326: FOR_TO
45327: IFFALSE 45441
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45329: LD_ADDR_VAR 0 9
45333: PUSH
45334: LD_VAR 0 11
45338: PPUSH
45339: CALL_OW 250
45343: PPUSH
45344: LD_VAR 0 8
45348: PPUSH
45349: LD_INT 2
45351: PPUSH
45352: CALL_OW 272
45356: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45357: LD_ADDR_VAR 0 10
45361: PUSH
45362: LD_VAR 0 11
45366: PPUSH
45367: CALL_OW 251
45371: PPUSH
45372: LD_VAR 0 8
45376: PPUSH
45377: LD_INT 2
45379: PPUSH
45380: CALL_OW 273
45384: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45385: LD_VAR 0 9
45389: PPUSH
45390: LD_VAR 0 10
45394: PPUSH
45395: CALL_OW 488
45399: PUSH
45400: LD_VAR 0 9
45404: PPUSH
45405: LD_VAR 0 10
45409: PPUSH
45410: CALL_OW 428
45414: NOT
45415: AND
45416: IFFALSE 45439
// begin ComMoveXY ( tmp , _x , _y ) ;
45418: LD_VAR 0 11
45422: PPUSH
45423: LD_VAR 0 9
45427: PPUSH
45428: LD_VAR 0 10
45432: PPUSH
45433: CALL_OW 111
// break ;
45437: GO 45441
// end ; end ;
45439: GO 45326
45441: POP
45442: POP
// end ;
45443: GO 44909
45445: POP
45446: POP
// end ;
45447: LD_VAR 0 6
45451: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
45452: LD_INT 0
45454: PPUSH
45455: PPUSH
45456: PPUSH
45457: PPUSH
45458: PPUSH
45459: PPUSH
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
// result := false ;
45464: LD_ADDR_VAR 0 6
45468: PUSH
45469: LD_INT 0
45471: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45472: LD_VAR 0 1
45476: NOT
45477: PUSH
45478: LD_VAR 0 1
45482: PPUSH
45483: CALL_OW 266
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: IN
45498: NOT
45499: OR
45500: PUSH
45501: LD_VAR 0 2
45505: NOT
45506: OR
45507: PUSH
45508: LD_VAR 0 5
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: LD_INT 3
45524: PUSH
45525: LD_INT 4
45527: PUSH
45528: LD_INT 5
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: IN
45539: NOT
45540: OR
45541: PUSH
45542: LD_VAR 0 3
45546: PPUSH
45547: LD_VAR 0 4
45551: PPUSH
45552: CALL_OW 488
45556: NOT
45557: OR
45558: IFFALSE 45562
// exit ;
45560: GO 46279
// pom := GetBase ( depot ) ;
45562: LD_ADDR_VAR 0 10
45566: PUSH
45567: LD_VAR 0 1
45571: PPUSH
45572: CALL_OW 274
45576: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45577: LD_ADDR_VAR 0 11
45581: PUSH
45582: LD_VAR 0 2
45586: PPUSH
45587: LD_VAR 0 1
45591: PPUSH
45592: CALL_OW 248
45596: PPUSH
45597: CALL_OW 450
45601: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45602: LD_VAR 0 10
45606: PPUSH
45607: LD_INT 1
45609: PPUSH
45610: CALL_OW 275
45614: PUSH
45615: LD_VAR 0 11
45619: PUSH
45620: LD_INT 1
45622: ARRAY
45623: GREATEREQUAL
45624: PUSH
45625: LD_VAR 0 10
45629: PPUSH
45630: LD_INT 2
45632: PPUSH
45633: CALL_OW 275
45637: PUSH
45638: LD_VAR 0 11
45642: PUSH
45643: LD_INT 2
45645: ARRAY
45646: GREATEREQUAL
45647: AND
45648: PUSH
45649: LD_VAR 0 10
45653: PPUSH
45654: LD_INT 3
45656: PPUSH
45657: CALL_OW 275
45661: PUSH
45662: LD_VAR 0 11
45666: PUSH
45667: LD_INT 3
45669: ARRAY
45670: GREATEREQUAL
45671: AND
45672: NOT
45673: IFFALSE 45677
// exit ;
45675: GO 46279
// if GetBType ( depot ) = b_depot then
45677: LD_VAR 0 1
45681: PPUSH
45682: CALL_OW 266
45686: PUSH
45687: LD_INT 0
45689: EQUAL
45690: IFFALSE 45702
// dist := 28 else
45692: LD_ADDR_VAR 0 14
45696: PUSH
45697: LD_INT 28
45699: ST_TO_ADDR
45700: GO 45710
// dist := 36 ;
45702: LD_ADDR_VAR 0 14
45706: PUSH
45707: LD_INT 36
45709: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45710: LD_VAR 0 1
45714: PPUSH
45715: LD_VAR 0 3
45719: PPUSH
45720: LD_VAR 0 4
45724: PPUSH
45725: CALL_OW 297
45729: PUSH
45730: LD_VAR 0 14
45734: GREATER
45735: IFFALSE 45739
// exit ;
45737: GO 46279
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45739: LD_ADDR_VAR 0 12
45743: PUSH
45744: LD_VAR 0 2
45748: PPUSH
45749: LD_VAR 0 3
45753: PPUSH
45754: LD_VAR 0 4
45758: PPUSH
45759: LD_VAR 0 5
45763: PPUSH
45764: LD_VAR 0 1
45768: PPUSH
45769: CALL_OW 248
45773: PPUSH
45774: LD_INT 0
45776: PPUSH
45777: CALL 46284 0 6
45781: ST_TO_ADDR
// if not hexes then
45782: LD_VAR 0 12
45786: NOT
45787: IFFALSE 45791
// exit ;
45789: GO 46279
// hex := GetHexInfo ( x , y ) ;
45791: LD_ADDR_VAR 0 15
45795: PUSH
45796: LD_VAR 0 3
45800: PPUSH
45801: LD_VAR 0 4
45805: PPUSH
45806: CALL_OW 546
45810: ST_TO_ADDR
// if hex [ 1 ] then
45811: LD_VAR 0 15
45815: PUSH
45816: LD_INT 1
45818: ARRAY
45819: IFFALSE 45823
// exit ;
45821: GO 46279
// height := hex [ 2 ] ;
45823: LD_ADDR_VAR 0 13
45827: PUSH
45828: LD_VAR 0 15
45832: PUSH
45833: LD_INT 2
45835: ARRAY
45836: ST_TO_ADDR
// for i = 1 to hexes do
45837: LD_ADDR_VAR 0 7
45841: PUSH
45842: DOUBLE
45843: LD_INT 1
45845: DEC
45846: ST_TO_ADDR
45847: LD_VAR 0 12
45851: PUSH
45852: FOR_TO
45853: IFFALSE 46183
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45855: LD_VAR 0 12
45859: PUSH
45860: LD_VAR 0 7
45864: ARRAY
45865: PUSH
45866: LD_INT 1
45868: ARRAY
45869: PPUSH
45870: LD_VAR 0 12
45874: PUSH
45875: LD_VAR 0 7
45879: ARRAY
45880: PUSH
45881: LD_INT 2
45883: ARRAY
45884: PPUSH
45885: CALL_OW 488
45889: NOT
45890: PUSH
45891: LD_VAR 0 12
45895: PUSH
45896: LD_VAR 0 7
45900: ARRAY
45901: PUSH
45902: LD_INT 1
45904: ARRAY
45905: PPUSH
45906: LD_VAR 0 12
45910: PUSH
45911: LD_VAR 0 7
45915: ARRAY
45916: PUSH
45917: LD_INT 2
45919: ARRAY
45920: PPUSH
45921: CALL_OW 428
45925: PUSH
45926: LD_INT 0
45928: GREATER
45929: OR
45930: PUSH
45931: LD_VAR 0 12
45935: PUSH
45936: LD_VAR 0 7
45940: ARRAY
45941: PUSH
45942: LD_INT 1
45944: ARRAY
45945: PPUSH
45946: LD_VAR 0 12
45950: PUSH
45951: LD_VAR 0 7
45955: ARRAY
45956: PUSH
45957: LD_INT 2
45959: ARRAY
45960: PPUSH
45961: CALL_OW 351
45965: OR
45966: IFFALSE 45972
// exit ;
45968: POP
45969: POP
45970: GO 46279
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45972: LD_ADDR_VAR 0 8
45976: PUSH
45977: LD_VAR 0 12
45981: PUSH
45982: LD_VAR 0 7
45986: ARRAY
45987: PUSH
45988: LD_INT 1
45990: ARRAY
45991: PPUSH
45992: LD_VAR 0 12
45996: PUSH
45997: LD_VAR 0 7
46001: ARRAY
46002: PUSH
46003: LD_INT 2
46005: ARRAY
46006: PPUSH
46007: CALL_OW 546
46011: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46012: LD_VAR 0 8
46016: PUSH
46017: LD_INT 1
46019: ARRAY
46020: PUSH
46021: LD_VAR 0 8
46025: PUSH
46026: LD_INT 2
46028: ARRAY
46029: PUSH
46030: LD_VAR 0 13
46034: PUSH
46035: LD_INT 2
46037: PLUS
46038: GREATER
46039: OR
46040: PUSH
46041: LD_VAR 0 8
46045: PUSH
46046: LD_INT 2
46048: ARRAY
46049: PUSH
46050: LD_VAR 0 13
46054: PUSH
46055: LD_INT 2
46057: MINUS
46058: LESS
46059: OR
46060: PUSH
46061: LD_VAR 0 8
46065: PUSH
46066: LD_INT 3
46068: ARRAY
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 8
46075: PUSH
46076: LD_INT 9
46078: PUSH
46079: LD_INT 10
46081: PUSH
46082: LD_INT 11
46084: PUSH
46085: LD_INT 12
46087: PUSH
46088: LD_INT 13
46090: PUSH
46091: LD_INT 16
46093: PUSH
46094: LD_INT 17
46096: PUSH
46097: LD_INT 18
46099: PUSH
46100: LD_INT 19
46102: PUSH
46103: LD_INT 20
46105: PUSH
46106: LD_INT 21
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: IN
46124: NOT
46125: OR
46126: PUSH
46127: LD_VAR 0 8
46131: PUSH
46132: LD_INT 5
46134: ARRAY
46135: NOT
46136: OR
46137: PUSH
46138: LD_VAR 0 8
46142: PUSH
46143: LD_INT 6
46145: ARRAY
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: LD_INT 2
46152: PUSH
46153: LD_INT 7
46155: PUSH
46156: LD_INT 9
46158: PUSH
46159: LD_INT 10
46161: PUSH
46162: LD_INT 11
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: IN
46173: NOT
46174: OR
46175: IFFALSE 46181
// exit ;
46177: POP
46178: POP
46179: GO 46279
// end ;
46181: GO 45852
46183: POP
46184: POP
// side := GetSide ( depot ) ;
46185: LD_ADDR_VAR 0 9
46189: PUSH
46190: LD_VAR 0 1
46194: PPUSH
46195: CALL_OW 255
46199: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46200: LD_VAR 0 9
46204: PPUSH
46205: LD_VAR 0 3
46209: PPUSH
46210: LD_VAR 0 4
46214: PPUSH
46215: LD_INT 20
46217: PPUSH
46218: CALL 38933 0 4
46222: PUSH
46223: LD_INT 4
46225: ARRAY
46226: IFFALSE 46230
// exit ;
46228: GO 46279
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46230: LD_VAR 0 2
46234: PUSH
46235: LD_INT 29
46237: PUSH
46238: LD_INT 30
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: IN
46245: PUSH
46246: LD_VAR 0 3
46250: PPUSH
46251: LD_VAR 0 4
46255: PPUSH
46256: LD_VAR 0 9
46260: PPUSH
46261: CALL_OW 440
46265: NOT
46266: AND
46267: IFFALSE 46271
// exit ;
46269: GO 46279
// result := true ;
46271: LD_ADDR_VAR 0 6
46275: PUSH
46276: LD_INT 1
46278: ST_TO_ADDR
// end ;
46279: LD_VAR 0 6
46283: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46284: LD_INT 0
46286: PPUSH
46287: PPUSH
46288: PPUSH
46289: PPUSH
46290: PPUSH
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
46306: PPUSH
46307: PPUSH
46308: PPUSH
46309: PPUSH
46310: PPUSH
46311: PPUSH
46312: PPUSH
46313: PPUSH
46314: PPUSH
46315: PPUSH
46316: PPUSH
46317: PPUSH
46318: PPUSH
46319: PPUSH
46320: PPUSH
46321: PPUSH
46322: PPUSH
46323: PPUSH
46324: PPUSH
46325: PPUSH
46326: PPUSH
46327: PPUSH
46328: PPUSH
46329: PPUSH
46330: PPUSH
46331: PPUSH
46332: PPUSH
46333: PPUSH
46334: PPUSH
46335: PPUSH
46336: PPUSH
46337: PPUSH
46338: PPUSH
46339: PPUSH
46340: PPUSH
46341: PPUSH
46342: PPUSH
46343: PPUSH
// result = [ ] ;
46344: LD_ADDR_VAR 0 7
46348: PUSH
46349: EMPTY
46350: ST_TO_ADDR
// temp_list = [ ] ;
46351: LD_ADDR_VAR 0 9
46355: PUSH
46356: EMPTY
46357: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46358: LD_VAR 0 4
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: LD_INT 3
46374: PUSH
46375: LD_INT 4
46377: PUSH
46378: LD_INT 5
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: IN
46389: NOT
46390: PUSH
46391: LD_VAR 0 1
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: IN
46406: PUSH
46407: LD_VAR 0 5
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: LD_INT 3
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: LIST
46425: IN
46426: NOT
46427: AND
46428: OR
46429: IFFALSE 46433
// exit ;
46431: GO 64824
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46433: LD_VAR 0 1
46437: PUSH
46438: LD_INT 6
46440: PUSH
46441: LD_INT 7
46443: PUSH
46444: LD_INT 8
46446: PUSH
46447: LD_INT 13
46449: PUSH
46450: LD_INT 12
46452: PUSH
46453: LD_INT 15
46455: PUSH
46456: LD_INT 11
46458: PUSH
46459: LD_INT 14
46461: PUSH
46462: LD_INT 10
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: IN
46476: IFFALSE 46486
// btype = b_lab ;
46478: LD_ADDR_VAR 0 1
46482: PUSH
46483: LD_INT 6
46485: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46486: LD_VAR 0 6
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: LIST
46504: IN
46505: NOT
46506: PUSH
46507: LD_VAR 0 1
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: LD_INT 3
46523: PUSH
46524: LD_INT 6
46526: PUSH
46527: LD_INT 36
46529: PUSH
46530: LD_INT 4
46532: PUSH
46533: LD_INT 5
46535: PUSH
46536: LD_INT 31
46538: PUSH
46539: LD_INT 32
46541: PUSH
46542: LD_INT 33
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: IN
46558: NOT
46559: PUSH
46560: LD_VAR 0 6
46564: PUSH
46565: LD_INT 1
46567: EQUAL
46568: AND
46569: OR
46570: PUSH
46571: LD_VAR 0 1
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 3
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: IN
46586: NOT
46587: PUSH
46588: LD_VAR 0 6
46592: PUSH
46593: LD_INT 2
46595: EQUAL
46596: AND
46597: OR
46598: IFFALSE 46608
// mode = 0 ;
46600: LD_ADDR_VAR 0 6
46604: PUSH
46605: LD_INT 0
46607: ST_TO_ADDR
// case mode of 0 :
46608: LD_VAR 0 6
46612: PUSH
46613: LD_INT 0
46615: DOUBLE
46616: EQUAL
46617: IFTRUE 46621
46619: GO 58074
46621: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46622: LD_ADDR_VAR 0 11
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 3
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46815: LD_ADDR_VAR 0 12
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 3
46972: NEG
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 3
46983: NEG
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47011: LD_ADDR_VAR 0 13
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: NEG
47159: PUSH
47160: LD_INT 3
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 3
47170: NEG
47171: PUSH
47172: LD_INT 2
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: LD_INT 3
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47210: LD_ADDR_VAR 0 14
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 3
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 3
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47406: LD_ADDR_VAR 0 15
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: NEG
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: NEG
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 3
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47599: LD_ADDR_VAR 0 16
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 3
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 3
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: LD_INT 3
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47792: LD_ADDR_VAR 0 17
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 2
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48022: LD_ADDR_VAR 0 18
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48252: LD_ADDR_VAR 0 19
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: NEG
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48482: LD_ADDR_VAR 0 20
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48712: LD_ADDR_VAR 0 21
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 2
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48942: LD_ADDR_VAR 0 22
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: LD_INT 2
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49172: LD_ADDR_VAR 0 23
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: LD_INT 3
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 3
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49452: LD_ADDR_VAR 0 24
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: NEG
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 3
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 3
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49728: LD_ADDR_VAR 0 25
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 3
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 3
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: LD_INT 3
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: LD_INT 3
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50002: LD_ADDR_VAR 0 26
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: LD_INT 2
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: LD_INT 2
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: LD_INT 3
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 3
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50278: LD_ADDR_VAR 0 27
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 3
50511: NEG
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 3
50523: NEG
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50558: LD_ADDR_VAR 0 28
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: NEG
50770: PUSH
50771: LD_INT 3
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 3
50805: NEG
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50840: LD_ADDR_VAR 0 29
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: LD_INT 3
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 3
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 3
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 3
51084: NEG
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51119: LD_ADDR_VAR 0 30
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: LD_INT 3
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 3
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 3
51362: NEG
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51397: LD_ADDR_VAR 0 31
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: NEG
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: LD_INT 2
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 3
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 3
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 3
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 3
51640: NEG
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51675: LD_ADDR_VAR 0 32
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 3
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 3
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: LD_INT 3
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51953: LD_ADDR_VAR 0 33
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 3
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 3
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 3
52197: NEG
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52232: LD_ADDR_VAR 0 34
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: NEG
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 3
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 2
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 3
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: PUSH
52457: LD_INT 3
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 3
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52512: LD_ADDR_VAR 0 35
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52624: LD_ADDR_VAR 0 36
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52736: LD_ADDR_VAR 0 37
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52848: LD_ADDR_VAR 0 38
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52960: LD_ADDR_VAR 0 39
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53072: LD_ADDR_VAR 0 40
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53184: LD_ADDR_VAR 0 41
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: NEG
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: LD_INT 3
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: LD_INT 3
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: LD_INT 3
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 3
53458: NEG
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 3
53469: NEG
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 3
53481: NEG
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53534: LD_ADDR_VAR 0 42
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PUSH
53726: LD_INT 3
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 3
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 3
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: LD_INT 3
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: LD_INT 3
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 3
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 3
53831: NEG
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 3
53843: NEG
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53884: LD_ADDR_VAR 0 43
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: LD_INT 3
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 3
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 2
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 2
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 3
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 3
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: LD_INT 3
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: LD_INT 3
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 2
54169: NEG
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: NEG
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54232: LD_ADDR_VAR 0 44
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: LD_INT 2
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 2
54422: NEG
54423: PUSH
54424: LD_INT 3
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 3
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 3
54475: PUSH
54476: LD_INT 3
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 3
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 3
54529: NEG
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: NEG
54542: PUSH
54543: LD_INT 3
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54582: LD_ADDR_VAR 0 45
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: LD_INT 3
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 3
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 3
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 3
54828: PUSH
54829: LD_INT 3
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 3
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 3
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: NEG
54892: PUSH
54893: LD_INT 3
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54932: LD_ADDR_VAR 0 46
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 2
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: LD_INT 3
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 3
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 3
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55280: LD_ADDR_VAR 0 47
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55431: LD_ADDR_VAR 0 48
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55578: LD_ADDR_VAR 0 49
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55722: LD_ADDR_VAR 0 50
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: LD_INT 2
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55866: LD_ADDR_VAR 0 51
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56013: LD_ADDR_VAR 0 52
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56164: LD_ADDR_VAR 0 53
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56394: LD_ADDR_VAR 0 54
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56624: LD_ADDR_VAR 0 55
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 2
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56854: LD_ADDR_VAR 0 56
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 2
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 2
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: NEG
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57084: LD_ADDR_VAR 0 57
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57314: LD_ADDR_VAR 0 58
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: LD_INT 2
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: NEG
57514: PUSH
57515: LD_INT 2
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57544: LD_ADDR_VAR 0 59
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57632: LD_ADDR_VAR 0 60
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57720: LD_ADDR_VAR 0 61
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57808: LD_ADDR_VAR 0 62
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57896: LD_ADDR_VAR 0 63
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 1
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57984: LD_ADDR_VAR 0 64
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: ST_TO_ADDR
// end ; 1 :
58072: GO 63969
58074: LD_INT 1
58076: DOUBLE
58077: EQUAL
58078: IFTRUE 58082
58080: GO 60705
58082: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58083: LD_ADDR_VAR 0 11
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 3
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 3
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: LIST
58126: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58127: LD_ADDR_VAR 0 12
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58168: LD_ADDR_VAR 0 13
58172: PUSH
58173: LD_INT 3
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: LIST
58207: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58208: LD_ADDR_VAR 0 14
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58249: LD_ADDR_VAR 0 15
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58293: LD_ADDR_VAR 0 16
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: LD_INT 3
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 3
58312: NEG
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 3
58324: NEG
58325: PUSH
58326: LD_INT 3
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: LIST
58338: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58339: LD_ADDR_VAR 0 17
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 3
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58383: LD_ADDR_VAR 0 18
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 3
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 3
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: LIST
58423: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58424: LD_ADDR_VAR 0 19
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: LIST
58463: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58464: LD_ADDR_VAR 0 20
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58505: LD_ADDR_VAR 0 21
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 3
58534: NEG
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: LIST
58548: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58549: LD_ADDR_VAR 0 22
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: LD_INT 3
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 3
58568: NEG
58569: PUSH
58570: LD_INT 2
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 3
58580: NEG
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: LIST
58594: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58595: LD_ADDR_VAR 0 23
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 3
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: LD_INT 4
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: LD_INT 3
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: LIST
58638: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58639: LD_ADDR_VAR 0 24
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 3
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 4
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: LIST
58679: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58680: LD_ADDR_VAR 0 25
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 4
58697: PUSH
58698: LD_INT 3
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 3
58707: PUSH
58708: LD_INT 4
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: LIST
58719: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58720: LD_ADDR_VAR 0 26
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: LD_INT 3
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: LD_INT 4
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 3
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58761: LD_ADDR_VAR 0 27
58765: PUSH
58766: LD_INT 3
58768: NEG
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 4
58790: NEG
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: LIST
58804: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58805: LD_ADDR_VAR 0 28
58809: PUSH
58810: LD_INT 3
58812: NEG
58813: PUSH
58814: LD_INT 3
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: LD_INT 4
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 4
58836: NEG
58837: PUSH
58838: LD_INT 3
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: LIST
58850: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58851: LD_ADDR_VAR 0 29
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 3
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 4
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 4
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 3
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: LD_INT 5
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: LD_INT 5
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 4
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 6
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: LD_INT 6
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: LD_INT 5
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59006: LD_ADDR_VAR 0 30
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 3
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 3
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 3
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 4
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 4
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 4
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 5
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 5
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 5
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 6
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 6
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59149: LD_ADDR_VAR 0 31
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 4
59186: PUSH
59187: LD_INT 3
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 4
59196: PUSH
59197: LD_INT 4
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 3
59206: PUSH
59207: LD_INT 4
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 5
59216: PUSH
59217: LD_INT 4
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 5
59226: PUSH
59227: LD_INT 5
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 4
59236: PUSH
59237: LD_INT 5
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 6
59246: PUSH
59247: LD_INT 5
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 6
59256: PUSH
59257: LD_INT 6
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 5
59266: PUSH
59267: LD_INT 6
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59288: LD_ADDR_VAR 0 32
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 3
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 3
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 2
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: LD_INT 4
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 4
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 3
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 5
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 5
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 4
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: LD_INT 6
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: LD_INT 6
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: LD_INT 5
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59431: LD_ADDR_VAR 0 33
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 3
59449: NEG
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 3
59460: NEG
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 4
59483: NEG
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 4
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 4
59506: NEG
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 5
59517: NEG
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 5
59528: NEG
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 5
59540: NEG
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 6
59551: NEG
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 6
59562: NEG
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59586: LD_ADDR_VAR 0 34
59590: PUSH
59591: LD_INT 2
59593: NEG
59594: PUSH
59595: LD_INT 3
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: NEG
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 3
59617: NEG
59618: PUSH
59619: LD_INT 3
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 3
59629: NEG
59630: PUSH
59631: LD_INT 4
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 4
59641: NEG
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 4
59653: NEG
59654: PUSH
59655: LD_INT 4
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 4
59665: NEG
59666: PUSH
59667: LD_INT 5
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 5
59677: NEG
59678: PUSH
59679: LD_INT 4
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 5
59689: NEG
59690: PUSH
59691: LD_INT 5
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 5
59701: NEG
59702: PUSH
59703: LD_INT 6
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 6
59713: NEG
59714: PUSH
59715: LD_INT 5
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 6
59725: NEG
59726: PUSH
59727: LD_INT 6
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59749: LD_ADDR_VAR 0 41
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: LD_INT 3
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59793: LD_ADDR_VAR 0 42
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 3
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: LIST
59833: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59834: LD_ADDR_VAR 0 43
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: LIST
59873: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59874: LD_ADDR_VAR 0 44
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 2
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: LIST
59914: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59915: LD_ADDR_VAR 0 45
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 3
59944: NEG
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: LIST
59958: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59959: LD_ADDR_VAR 0 46
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 3
59990: NEG
59991: PUSH
59992: LD_INT 2
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: LIST
60004: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60005: LD_ADDR_VAR 0 47
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: LD_INT 3
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: LD_INT 3
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60038: LD_ADDR_VAR 0 48
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60069: LD_ADDR_VAR 0 49
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: PUSH
60087: LD_INT 2
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60098: LD_ADDR_VAR 0 50
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 3
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60127: LD_ADDR_VAR 0 51
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60158: LD_ADDR_VAR 0 52
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: LD_INT 2
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60191: LD_ADDR_VAR 0 53
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: LD_INT 3
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: LIST
60234: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60235: LD_ADDR_VAR 0 54
60239: PUSH
60240: LD_INT 2
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 3
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 3
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: LIST
60275: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60276: LD_ADDR_VAR 0 55
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 3
60293: PUSH
60294: LD_INT 3
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: LD_INT 3
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: LIST
60315: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60316: LD_ADDR_VAR 0 56
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: LIST
60356: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60357: LD_ADDR_VAR 0 57
60361: PUSH
60362: LD_INT 2
60364: NEG
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 3
60375: NEG
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 3
60386: NEG
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: LIST
60400: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60401: LD_ADDR_VAR 0 58
60405: PUSH
60406: LD_INT 2
60408: NEG
60409: PUSH
60410: LD_INT 3
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 3
60420: NEG
60421: PUSH
60422: LD_INT 2
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 3
60432: NEG
60433: PUSH
60434: LD_INT 3
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: LIST
60446: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60447: LD_ADDR_VAR 0 59
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: LIST
60490: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60491: LD_ADDR_VAR 0 60
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 2
60519: PUSH
60520: LD_INT 1
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60532: LD_ADDR_VAR 0 61
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 2
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 1
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60572: LD_ADDR_VAR 0 62
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: LD_INT 2
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: LIST
60612: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60613: LD_ADDR_VAR 0 63
60617: PUSH
60618: LD_INT 1
60620: NEG
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 2
60631: NEG
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 2
60642: NEG
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: LIST
60656: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60657: LD_ADDR_VAR 0 64
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: LD_INT 2
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: LD_INT 2
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: LIST
60702: ST_TO_ADDR
// end ; 2 :
60703: GO 63969
60705: LD_INT 2
60707: DOUBLE
60708: EQUAL
60709: IFTRUE 60713
60711: GO 63968
60713: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60714: LD_ADDR_VAR 0 29
60718: PUSH
60719: LD_INT 4
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 4
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 5
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 5
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 4
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 3
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 3
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 3
60793: PUSH
60794: LD_INT 2
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 5
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 3
60814: PUSH
60815: LD_INT 3
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 3
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 4
60834: PUSH
60835: LD_INT 3
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 4
60844: PUSH
60845: LD_INT 4
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 3
60854: PUSH
60855: LD_INT 4
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 2
60874: PUSH
60875: LD_INT 2
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 4
60884: PUSH
60885: LD_INT 2
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: LD_INT 4
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: LD_INT 4
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 3
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: LD_INT 4
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 5
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 5
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: LD_INT 4
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: LD_INT 5
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 3
60997: NEG
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 3
61008: NEG
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: NEG
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 3
61042: NEG
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 4
61053: NEG
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 4
61064: NEG
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 4
61076: NEG
61077: PUSH
61078: LD_INT 2
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 4
61099: NEG
61100: PUSH
61101: LD_INT 4
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 4
61111: NEG
61112: PUSH
61113: LD_INT 5
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 3
61123: NEG
61124: PUSH
61125: LD_INT 4
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 3
61135: NEG
61136: PUSH
61137: LD_INT 3
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 4
61147: NEG
61148: PUSH
61149: LD_INT 3
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 5
61159: NEG
61160: PUSH
61161: LD_INT 4
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 5
61171: NEG
61172: PUSH
61173: LD_INT 5
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 3
61183: NEG
61184: PUSH
61185: LD_INT 5
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 5
61195: NEG
61196: PUSH
61197: LD_INT 3
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61252: LD_ADDR_VAR 0 30
61256: PUSH
61257: LD_INT 4
61259: PUSH
61260: LD_INT 4
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 4
61269: PUSH
61270: LD_INT 3
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 5
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 5
61289: PUSH
61290: LD_INT 5
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 4
61299: PUSH
61300: LD_INT 5
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: LD_INT 4
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: LD_INT 3
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 5
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: LD_INT 5
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 2
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: LD_INT 4
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: LD_INT 4
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 3
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: LD_INT 4
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 2
61431: NEG
61432: PUSH
61433: LD_INT 2
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 4
61442: NEG
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 4
61453: NEG
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 3
61476: NEG
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 4
61487: NEG
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 5
61498: NEG
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 5
61509: NEG
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 5
61521: NEG
61522: PUSH
61523: LD_INT 2
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 3
61533: NEG
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 3
61544: NEG
61545: PUSH
61546: LD_INT 3
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: LD_INT 4
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: NEG
61569: PUSH
61570: LD_INT 3
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 2
61580: NEG
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 3
61592: NEG
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 4
61604: NEG
61605: PUSH
61606: LD_INT 3
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 4
61616: NEG
61617: PUSH
61618: LD_INT 4
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 2
61628: NEG
61629: PUSH
61630: LD_INT 4
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 4
61640: NEG
61641: PUSH
61642: LD_INT 2
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: LD_INT 4
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: LD_INT 5
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: LD_INT 4
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: LD_INT 3
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: LD_INT 3
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: LD_INT 4
61711: NEG
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: NEG
61720: PUSH
61721: LD_INT 5
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: LD_INT 3
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 2
61742: NEG
61743: PUSH
61744: LD_INT 5
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61799: LD_ADDR_VAR 0 31
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: LD_INT 4
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: LD_INT 3
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: LD_INT 4
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: LD_INT 5
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: LD_INT 5
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: LD_INT 4
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: LD_INT 3
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: LD_INT 5
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: LD_INT 3
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 3
61899: NEG
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 3
61910: NEG
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 2
61922: NEG
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 2
61933: NEG
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 3
61944: NEG
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 4
61955: NEG
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 4
61966: NEG
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 4
61978: NEG
61979: PUSH
61980: LD_INT 2
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 2
61990: NEG
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 4
62001: NEG
62002: PUSH
62003: LD_INT 4
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 4
62013: NEG
62014: PUSH
62015: LD_INT 5
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 3
62025: NEG
62026: PUSH
62027: LD_INT 4
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 3
62037: NEG
62038: PUSH
62039: LD_INT 3
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 4
62049: NEG
62050: PUSH
62051: LD_INT 3
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 5
62061: NEG
62062: PUSH
62063: LD_INT 4
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 5
62073: NEG
62074: PUSH
62075: LD_INT 5
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 3
62085: NEG
62086: PUSH
62087: LD_INT 5
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 5
62097: NEG
62098: PUSH
62099: LD_INT 3
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: LD_INT 3
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 4
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: LD_INT 3
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 2
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: LD_INT 3
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: LD_INT 4
62180: NEG
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 2
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 2
62199: NEG
62200: PUSH
62201: LD_INT 4
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 4
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 4
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 5
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 5
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 4
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 3
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 3
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 3
62283: PUSH
62284: LD_INT 2
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 5
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62349: LD_ADDR_VAR 0 32
62353: PUSH
62354: LD_INT 4
62356: NEG
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 4
62367: NEG
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 3
62379: NEG
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 3
62390: NEG
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 4
62401: NEG
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 5
62412: NEG
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 5
62423: NEG
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 5
62435: NEG
62436: PUSH
62437: LD_INT 2
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 3
62447: NEG
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 3
62458: NEG
62459: PUSH
62460: LD_INT 3
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: LD_INT 4
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: LD_INT 3
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: NEG
62495: PUSH
62496: LD_INT 2
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 3
62506: NEG
62507: PUSH
62508: LD_INT 2
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 4
62518: NEG
62519: PUSH
62520: LD_INT 3
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 4
62530: NEG
62531: PUSH
62532: LD_INT 4
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 2
62542: NEG
62543: PUSH
62544: LD_INT 4
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 4
62554: NEG
62555: PUSH
62556: LD_INT 2
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: LD_INT 4
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 5
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: LD_INT 4
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 3
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 3
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: LD_INT 4
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: LD_INT 5
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 2
62645: PUSH
62646: LD_INT 3
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: LD_INT 5
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 3
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 3
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 4
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 4
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 3
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 2
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: LD_INT 2
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 4
62751: PUSH
62752: LD_INT 2
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 4
62761: PUSH
62762: LD_INT 4
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 4
62771: PUSH
62772: LD_INT 3
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 5
62781: PUSH
62782: LD_INT 4
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 5
62791: PUSH
62792: LD_INT 5
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 4
62801: PUSH
62802: LD_INT 5
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 3
62811: PUSH
62812: LD_INT 4
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 3
62821: PUSH
62822: LD_INT 3
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 5
62831: PUSH
62832: LD_INT 3
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 3
62841: PUSH
62842: LD_INT 5
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62896: LD_ADDR_VAR 0 33
62900: PUSH
62901: LD_INT 4
62903: NEG
62904: PUSH
62905: LD_INT 4
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 4
62915: NEG
62916: PUSH
62917: LD_INT 5
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 3
62927: NEG
62928: PUSH
62929: LD_INT 4
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 3
62939: NEG
62940: PUSH
62941: LD_INT 3
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 4
62951: NEG
62952: PUSH
62953: LD_INT 3
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 5
62963: NEG
62964: PUSH
62965: LD_INT 4
62967: NEG
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 5
62975: NEG
62976: PUSH
62977: LD_INT 5
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 3
62987: NEG
62988: PUSH
62989: LD_INT 5
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 5
62999: NEG
63000: PUSH
63001: LD_INT 3
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: LD_INT 3
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: LD_INT 4
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: LD_INT 3
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: LD_INT 2
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: LD_INT 2
63058: NEG
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: LD_INT 3
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: NEG
63079: PUSH
63080: LD_INT 4
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 2
63090: PUSH
63091: LD_INT 2
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 2
63101: NEG
63102: PUSH
63103: LD_INT 4
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 4
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 4
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 5
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 5
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 4
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 3
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 3
63185: PUSH
63186: LD_INT 2
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 5
63196: PUSH
63197: LD_INT 2
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: LD_INT 3
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 3
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 4
63226: PUSH
63227: LD_INT 3
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 4
63236: PUSH
63237: LD_INT 4
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 3
63246: PUSH
63247: LD_INT 4
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 2
63256: PUSH
63257: LD_INT 3
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 2
63266: PUSH
63267: LD_INT 2
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 4
63276: PUSH
63277: LD_INT 2
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 2
63286: PUSH
63287: LD_INT 4
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 4
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: LD_INT 3
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: LD_INT 4
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: LD_INT 5
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: LD_INT 5
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: LD_INT 4
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: LD_INT 3
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 2
63368: PUSH
63369: LD_INT 5
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 2
63378: NEG
63379: PUSH
63380: LD_INT 3
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63434: LD_ADDR_VAR 0 34
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: LD_INT 4
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 5
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: LD_INT 4
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: LD_INT 3
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 3
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: NEG
63497: PUSH
63498: LD_INT 4
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: LD_INT 5
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 2
63520: PUSH
63521: LD_INT 3
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 2
63531: NEG
63532: PUSH
63533: LD_INT 5
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 3
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 4
63564: PUSH
63565: LD_INT 0
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 4
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 3
63584: PUSH
63585: LD_INT 1
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 2
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 2
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 2
63615: PUSH
63616: LD_INT 2
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 4
63626: PUSH
63627: LD_INT 2
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 4
63636: PUSH
63637: LD_INT 4
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 4
63646: PUSH
63647: LD_INT 3
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 5
63656: PUSH
63657: LD_INT 4
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 5
63666: PUSH
63667: LD_INT 5
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 4
63676: PUSH
63677: LD_INT 5
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 3
63686: PUSH
63687: LD_INT 4
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 3
63696: PUSH
63697: LD_INT 3
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 5
63706: PUSH
63707: LD_INT 3
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 3
63716: PUSH
63717: LD_INT 5
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 3
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: LD_INT 3
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: PUSH
63757: LD_INT 4
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 4
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: LD_INT 3
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: LD_INT 2
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: LD_INT 4
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 2
63808: NEG
63809: PUSH
63810: LD_INT 2
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 4
63819: NEG
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 4
63830: NEG
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 3
63842: NEG
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 3
63853: NEG
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 4
63864: NEG
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 5
63875: NEG
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 5
63886: NEG
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 5
63898: NEG
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 3
63910: NEG
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: ST_TO_ADDR
// end ; end ;
63966: GO 63969
63968: POP
// case btype of b_depot , b_warehouse :
63969: LD_VAR 0 1
63973: PUSH
63974: LD_INT 0
63976: DOUBLE
63977: EQUAL
63978: IFTRUE 63988
63980: LD_INT 1
63982: DOUBLE
63983: EQUAL
63984: IFTRUE 63988
63986: GO 64189
63988: POP
// case nation of nation_american :
63989: LD_VAR 0 5
63993: PUSH
63994: LD_INT 1
63996: DOUBLE
63997: EQUAL
63998: IFTRUE 64002
64000: GO 64058
64002: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64003: LD_ADDR_VAR 0 9
64007: PUSH
64008: LD_VAR 0 11
64012: PUSH
64013: LD_VAR 0 12
64017: PUSH
64018: LD_VAR 0 13
64022: PUSH
64023: LD_VAR 0 14
64027: PUSH
64028: LD_VAR 0 15
64032: PUSH
64033: LD_VAR 0 16
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: PUSH
64046: LD_VAR 0 4
64050: PUSH
64051: LD_INT 1
64053: PLUS
64054: ARRAY
64055: ST_TO_ADDR
64056: GO 64187
64058: LD_INT 2
64060: DOUBLE
64061: EQUAL
64062: IFTRUE 64066
64064: GO 64122
64066: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64067: LD_ADDR_VAR 0 9
64071: PUSH
64072: LD_VAR 0 17
64076: PUSH
64077: LD_VAR 0 18
64081: PUSH
64082: LD_VAR 0 19
64086: PUSH
64087: LD_VAR 0 20
64091: PUSH
64092: LD_VAR 0 21
64096: PUSH
64097: LD_VAR 0 22
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: PUSH
64110: LD_VAR 0 4
64114: PUSH
64115: LD_INT 1
64117: PLUS
64118: ARRAY
64119: ST_TO_ADDR
64120: GO 64187
64122: LD_INT 3
64124: DOUBLE
64125: EQUAL
64126: IFTRUE 64130
64128: GO 64186
64130: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64131: LD_ADDR_VAR 0 9
64135: PUSH
64136: LD_VAR 0 23
64140: PUSH
64141: LD_VAR 0 24
64145: PUSH
64146: LD_VAR 0 25
64150: PUSH
64151: LD_VAR 0 26
64155: PUSH
64156: LD_VAR 0 27
64160: PUSH
64161: LD_VAR 0 28
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: PUSH
64174: LD_VAR 0 4
64178: PUSH
64179: LD_INT 1
64181: PLUS
64182: ARRAY
64183: ST_TO_ADDR
64184: GO 64187
64186: POP
64187: GO 64742
64189: LD_INT 2
64191: DOUBLE
64192: EQUAL
64193: IFTRUE 64203
64195: LD_INT 3
64197: DOUBLE
64198: EQUAL
64199: IFTRUE 64203
64201: GO 64259
64203: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64204: LD_ADDR_VAR 0 9
64208: PUSH
64209: LD_VAR 0 29
64213: PUSH
64214: LD_VAR 0 30
64218: PUSH
64219: LD_VAR 0 31
64223: PUSH
64224: LD_VAR 0 32
64228: PUSH
64229: LD_VAR 0 33
64233: PUSH
64234: LD_VAR 0 34
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: PUSH
64247: LD_VAR 0 4
64251: PUSH
64252: LD_INT 1
64254: PLUS
64255: ARRAY
64256: ST_TO_ADDR
64257: GO 64742
64259: LD_INT 16
64261: DOUBLE
64262: EQUAL
64263: IFTRUE 64321
64265: LD_INT 17
64267: DOUBLE
64268: EQUAL
64269: IFTRUE 64321
64271: LD_INT 18
64273: DOUBLE
64274: EQUAL
64275: IFTRUE 64321
64277: LD_INT 19
64279: DOUBLE
64280: EQUAL
64281: IFTRUE 64321
64283: LD_INT 22
64285: DOUBLE
64286: EQUAL
64287: IFTRUE 64321
64289: LD_INT 20
64291: DOUBLE
64292: EQUAL
64293: IFTRUE 64321
64295: LD_INT 21
64297: DOUBLE
64298: EQUAL
64299: IFTRUE 64321
64301: LD_INT 23
64303: DOUBLE
64304: EQUAL
64305: IFTRUE 64321
64307: LD_INT 24
64309: DOUBLE
64310: EQUAL
64311: IFTRUE 64321
64313: LD_INT 25
64315: DOUBLE
64316: EQUAL
64317: IFTRUE 64321
64319: GO 64377
64321: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64322: LD_ADDR_VAR 0 9
64326: PUSH
64327: LD_VAR 0 35
64331: PUSH
64332: LD_VAR 0 36
64336: PUSH
64337: LD_VAR 0 37
64341: PUSH
64342: LD_VAR 0 38
64346: PUSH
64347: LD_VAR 0 39
64351: PUSH
64352: LD_VAR 0 40
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: PUSH
64365: LD_VAR 0 4
64369: PUSH
64370: LD_INT 1
64372: PLUS
64373: ARRAY
64374: ST_TO_ADDR
64375: GO 64742
64377: LD_INT 6
64379: DOUBLE
64380: EQUAL
64381: IFTRUE 64433
64383: LD_INT 7
64385: DOUBLE
64386: EQUAL
64387: IFTRUE 64433
64389: LD_INT 8
64391: DOUBLE
64392: EQUAL
64393: IFTRUE 64433
64395: LD_INT 13
64397: DOUBLE
64398: EQUAL
64399: IFTRUE 64433
64401: LD_INT 12
64403: DOUBLE
64404: EQUAL
64405: IFTRUE 64433
64407: LD_INT 15
64409: DOUBLE
64410: EQUAL
64411: IFTRUE 64433
64413: LD_INT 11
64415: DOUBLE
64416: EQUAL
64417: IFTRUE 64433
64419: LD_INT 14
64421: DOUBLE
64422: EQUAL
64423: IFTRUE 64433
64425: LD_INT 10
64427: DOUBLE
64428: EQUAL
64429: IFTRUE 64433
64431: GO 64489
64433: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64434: LD_ADDR_VAR 0 9
64438: PUSH
64439: LD_VAR 0 41
64443: PUSH
64444: LD_VAR 0 42
64448: PUSH
64449: LD_VAR 0 43
64453: PUSH
64454: LD_VAR 0 44
64458: PUSH
64459: LD_VAR 0 45
64463: PUSH
64464: LD_VAR 0 46
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: PUSH
64477: LD_VAR 0 4
64481: PUSH
64482: LD_INT 1
64484: PLUS
64485: ARRAY
64486: ST_TO_ADDR
64487: GO 64742
64489: LD_INT 36
64491: DOUBLE
64492: EQUAL
64493: IFTRUE 64497
64495: GO 64553
64497: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64498: LD_ADDR_VAR 0 9
64502: PUSH
64503: LD_VAR 0 47
64507: PUSH
64508: LD_VAR 0 48
64512: PUSH
64513: LD_VAR 0 49
64517: PUSH
64518: LD_VAR 0 50
64522: PUSH
64523: LD_VAR 0 51
64527: PUSH
64528: LD_VAR 0 52
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: PUSH
64541: LD_VAR 0 4
64545: PUSH
64546: LD_INT 1
64548: PLUS
64549: ARRAY
64550: ST_TO_ADDR
64551: GO 64742
64553: LD_INT 4
64555: DOUBLE
64556: EQUAL
64557: IFTRUE 64579
64559: LD_INT 5
64561: DOUBLE
64562: EQUAL
64563: IFTRUE 64579
64565: LD_INT 34
64567: DOUBLE
64568: EQUAL
64569: IFTRUE 64579
64571: LD_INT 37
64573: DOUBLE
64574: EQUAL
64575: IFTRUE 64579
64577: GO 64635
64579: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64580: LD_ADDR_VAR 0 9
64584: PUSH
64585: LD_VAR 0 53
64589: PUSH
64590: LD_VAR 0 54
64594: PUSH
64595: LD_VAR 0 55
64599: PUSH
64600: LD_VAR 0 56
64604: PUSH
64605: LD_VAR 0 57
64609: PUSH
64610: LD_VAR 0 58
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: PUSH
64623: LD_VAR 0 4
64627: PUSH
64628: LD_INT 1
64630: PLUS
64631: ARRAY
64632: ST_TO_ADDR
64633: GO 64742
64635: LD_INT 31
64637: DOUBLE
64638: EQUAL
64639: IFTRUE 64685
64641: LD_INT 32
64643: DOUBLE
64644: EQUAL
64645: IFTRUE 64685
64647: LD_INT 33
64649: DOUBLE
64650: EQUAL
64651: IFTRUE 64685
64653: LD_INT 27
64655: DOUBLE
64656: EQUAL
64657: IFTRUE 64685
64659: LD_INT 26
64661: DOUBLE
64662: EQUAL
64663: IFTRUE 64685
64665: LD_INT 28
64667: DOUBLE
64668: EQUAL
64669: IFTRUE 64685
64671: LD_INT 29
64673: DOUBLE
64674: EQUAL
64675: IFTRUE 64685
64677: LD_INT 30
64679: DOUBLE
64680: EQUAL
64681: IFTRUE 64685
64683: GO 64741
64685: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64686: LD_ADDR_VAR 0 9
64690: PUSH
64691: LD_VAR 0 59
64695: PUSH
64696: LD_VAR 0 60
64700: PUSH
64701: LD_VAR 0 61
64705: PUSH
64706: LD_VAR 0 62
64710: PUSH
64711: LD_VAR 0 63
64715: PUSH
64716: LD_VAR 0 64
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: PUSH
64729: LD_VAR 0 4
64733: PUSH
64734: LD_INT 1
64736: PLUS
64737: ARRAY
64738: ST_TO_ADDR
64739: GO 64742
64741: POP
// temp_list2 = [ ] ;
64742: LD_ADDR_VAR 0 10
64746: PUSH
64747: EMPTY
64748: ST_TO_ADDR
// for i in temp_list do
64749: LD_ADDR_VAR 0 8
64753: PUSH
64754: LD_VAR 0 9
64758: PUSH
64759: FOR_IN
64760: IFFALSE 64812
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64762: LD_ADDR_VAR 0 10
64766: PUSH
64767: LD_VAR 0 10
64771: PUSH
64772: LD_VAR 0 8
64776: PUSH
64777: LD_INT 1
64779: ARRAY
64780: PUSH
64781: LD_VAR 0 2
64785: PLUS
64786: PUSH
64787: LD_VAR 0 8
64791: PUSH
64792: LD_INT 2
64794: ARRAY
64795: PUSH
64796: LD_VAR 0 3
64800: PLUS
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: EMPTY
64807: LIST
64808: ADD
64809: ST_TO_ADDR
64810: GO 64759
64812: POP
64813: POP
// result = temp_list2 ;
64814: LD_ADDR_VAR 0 7
64818: PUSH
64819: LD_VAR 0 10
64823: ST_TO_ADDR
// end ;
64824: LD_VAR 0 7
64828: RET
// export function EnemyInRange ( unit , dist ) ; begin
64829: LD_INT 0
64831: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64832: LD_ADDR_VAR 0 3
64836: PUSH
64837: LD_VAR 0 1
64841: PPUSH
64842: CALL_OW 255
64846: PPUSH
64847: LD_VAR 0 1
64851: PPUSH
64852: CALL_OW 250
64856: PPUSH
64857: LD_VAR 0 1
64861: PPUSH
64862: CALL_OW 251
64866: PPUSH
64867: LD_VAR 0 2
64871: PPUSH
64872: CALL 38933 0 4
64876: PUSH
64877: LD_INT 4
64879: ARRAY
64880: ST_TO_ADDR
// end ;
64881: LD_VAR 0 3
64885: RET
// export function PlayerSeeMe ( unit ) ; begin
64886: LD_INT 0
64888: PPUSH
// result := See ( your_side , unit ) ;
64889: LD_ADDR_VAR 0 2
64893: PUSH
64894: LD_OWVAR 2
64898: PPUSH
64899: LD_VAR 0 1
64903: PPUSH
64904: CALL_OW 292
64908: ST_TO_ADDR
// end ;
64909: LD_VAR 0 2
64913: RET
// export function ReverseDir ( unit ) ; begin
64914: LD_INT 0
64916: PPUSH
// if not unit then
64917: LD_VAR 0 1
64921: NOT
64922: IFFALSE 64926
// exit ;
64924: GO 64949
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64926: LD_ADDR_VAR 0 2
64930: PUSH
64931: LD_VAR 0 1
64935: PPUSH
64936: CALL_OW 254
64940: PUSH
64941: LD_INT 3
64943: PLUS
64944: PUSH
64945: LD_INT 6
64947: MOD
64948: ST_TO_ADDR
// end ;
64949: LD_VAR 0 2
64953: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64954: LD_INT 0
64956: PPUSH
64957: PPUSH
64958: PPUSH
64959: PPUSH
64960: PPUSH
// if not hexes then
64961: LD_VAR 0 2
64965: NOT
64966: IFFALSE 64970
// exit ;
64968: GO 65118
// dist := 9999 ;
64970: LD_ADDR_VAR 0 5
64974: PUSH
64975: LD_INT 9999
64977: ST_TO_ADDR
// for i = 1 to hexes do
64978: LD_ADDR_VAR 0 4
64982: PUSH
64983: DOUBLE
64984: LD_INT 1
64986: DEC
64987: ST_TO_ADDR
64988: LD_VAR 0 2
64992: PUSH
64993: FOR_TO
64994: IFFALSE 65106
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64996: LD_VAR 0 1
65000: PPUSH
65001: LD_VAR 0 2
65005: PUSH
65006: LD_VAR 0 4
65010: ARRAY
65011: PUSH
65012: LD_INT 1
65014: ARRAY
65015: PPUSH
65016: LD_VAR 0 2
65020: PUSH
65021: LD_VAR 0 4
65025: ARRAY
65026: PUSH
65027: LD_INT 2
65029: ARRAY
65030: PPUSH
65031: CALL_OW 297
65035: PUSH
65036: LD_VAR 0 5
65040: LESS
65041: IFFALSE 65104
// begin hex := hexes [ i ] ;
65043: LD_ADDR_VAR 0 7
65047: PUSH
65048: LD_VAR 0 2
65052: PUSH
65053: LD_VAR 0 4
65057: ARRAY
65058: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65059: LD_ADDR_VAR 0 5
65063: PUSH
65064: LD_VAR 0 1
65068: PPUSH
65069: LD_VAR 0 2
65073: PUSH
65074: LD_VAR 0 4
65078: ARRAY
65079: PUSH
65080: LD_INT 1
65082: ARRAY
65083: PPUSH
65084: LD_VAR 0 2
65088: PUSH
65089: LD_VAR 0 4
65093: ARRAY
65094: PUSH
65095: LD_INT 2
65097: ARRAY
65098: PPUSH
65099: CALL_OW 297
65103: ST_TO_ADDR
// end ; end ;
65104: GO 64993
65106: POP
65107: POP
// result := hex ;
65108: LD_ADDR_VAR 0 3
65112: PUSH
65113: LD_VAR 0 7
65117: ST_TO_ADDR
// end ;
65118: LD_VAR 0 3
65122: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65123: LD_INT 0
65125: PPUSH
65126: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65127: LD_VAR 0 1
65131: NOT
65132: PUSH
65133: LD_VAR 0 1
65137: PUSH
65138: LD_INT 21
65140: PUSH
65141: LD_INT 2
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 23
65150: PUSH
65151: LD_INT 2
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PPUSH
65162: CALL_OW 69
65166: IN
65167: NOT
65168: OR
65169: IFFALSE 65173
// exit ;
65171: GO 65220
// for i = 1 to 3 do
65173: LD_ADDR_VAR 0 3
65177: PUSH
65178: DOUBLE
65179: LD_INT 1
65181: DEC
65182: ST_TO_ADDR
65183: LD_INT 3
65185: PUSH
65186: FOR_TO
65187: IFFALSE 65218
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65189: LD_VAR 0 1
65193: PPUSH
65194: CALL_OW 250
65198: PPUSH
65199: LD_VAR 0 1
65203: PPUSH
65204: CALL_OW 251
65208: PPUSH
65209: LD_INT 1
65211: PPUSH
65212: CALL_OW 453
65216: GO 65186
65218: POP
65219: POP
// end ;
65220: LD_VAR 0 2
65224: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65225: LD_INT 0
65227: PPUSH
65228: PPUSH
65229: PPUSH
65230: PPUSH
65231: PPUSH
65232: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65233: LD_VAR 0 1
65237: NOT
65238: PUSH
65239: LD_VAR 0 2
65243: NOT
65244: OR
65245: PUSH
65246: LD_VAR 0 1
65250: PPUSH
65251: CALL_OW 314
65255: OR
65256: IFFALSE 65260
// exit ;
65258: GO 65701
// x := GetX ( enemy_unit ) ;
65260: LD_ADDR_VAR 0 7
65264: PUSH
65265: LD_VAR 0 2
65269: PPUSH
65270: CALL_OW 250
65274: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65275: LD_ADDR_VAR 0 8
65279: PUSH
65280: LD_VAR 0 2
65284: PPUSH
65285: CALL_OW 251
65289: ST_TO_ADDR
// if not x or not y then
65290: LD_VAR 0 7
65294: NOT
65295: PUSH
65296: LD_VAR 0 8
65300: NOT
65301: OR
65302: IFFALSE 65306
// exit ;
65304: GO 65701
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65306: LD_ADDR_VAR 0 6
65310: PUSH
65311: LD_VAR 0 7
65315: PPUSH
65316: LD_INT 0
65318: PPUSH
65319: LD_INT 4
65321: PPUSH
65322: CALL_OW 272
65326: PUSH
65327: LD_VAR 0 8
65331: PPUSH
65332: LD_INT 0
65334: PPUSH
65335: LD_INT 4
65337: PPUSH
65338: CALL_OW 273
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_VAR 0 7
65351: PPUSH
65352: LD_INT 1
65354: PPUSH
65355: LD_INT 4
65357: PPUSH
65358: CALL_OW 272
65362: PUSH
65363: LD_VAR 0 8
65367: PPUSH
65368: LD_INT 1
65370: PPUSH
65371: LD_INT 4
65373: PPUSH
65374: CALL_OW 273
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_VAR 0 7
65387: PPUSH
65388: LD_INT 2
65390: PPUSH
65391: LD_INT 4
65393: PPUSH
65394: CALL_OW 272
65398: PUSH
65399: LD_VAR 0 8
65403: PPUSH
65404: LD_INT 2
65406: PPUSH
65407: LD_INT 4
65409: PPUSH
65410: CALL_OW 273
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_VAR 0 7
65423: PPUSH
65424: LD_INT 3
65426: PPUSH
65427: LD_INT 4
65429: PPUSH
65430: CALL_OW 272
65434: PUSH
65435: LD_VAR 0 8
65439: PPUSH
65440: LD_INT 3
65442: PPUSH
65443: LD_INT 4
65445: PPUSH
65446: CALL_OW 273
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_VAR 0 7
65459: PPUSH
65460: LD_INT 4
65462: PPUSH
65463: LD_INT 4
65465: PPUSH
65466: CALL_OW 272
65470: PUSH
65471: LD_VAR 0 8
65475: PPUSH
65476: LD_INT 4
65478: PPUSH
65479: LD_INT 4
65481: PPUSH
65482: CALL_OW 273
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_VAR 0 7
65495: PPUSH
65496: LD_INT 5
65498: PPUSH
65499: LD_INT 4
65501: PPUSH
65502: CALL_OW 272
65506: PUSH
65507: LD_VAR 0 8
65511: PPUSH
65512: LD_INT 5
65514: PPUSH
65515: LD_INT 4
65517: PPUSH
65518: CALL_OW 273
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: ST_TO_ADDR
// for i = tmp downto 1 do
65535: LD_ADDR_VAR 0 4
65539: PUSH
65540: DOUBLE
65541: LD_VAR 0 6
65545: INC
65546: ST_TO_ADDR
65547: LD_INT 1
65549: PUSH
65550: FOR_DOWNTO
65551: IFFALSE 65652
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65553: LD_VAR 0 6
65557: PUSH
65558: LD_VAR 0 4
65562: ARRAY
65563: PUSH
65564: LD_INT 1
65566: ARRAY
65567: PPUSH
65568: LD_VAR 0 6
65572: PUSH
65573: LD_VAR 0 4
65577: ARRAY
65578: PUSH
65579: LD_INT 2
65581: ARRAY
65582: PPUSH
65583: CALL_OW 488
65587: NOT
65588: PUSH
65589: LD_VAR 0 6
65593: PUSH
65594: LD_VAR 0 4
65598: ARRAY
65599: PUSH
65600: LD_INT 1
65602: ARRAY
65603: PPUSH
65604: LD_VAR 0 6
65608: PUSH
65609: LD_VAR 0 4
65613: ARRAY
65614: PUSH
65615: LD_INT 2
65617: ARRAY
65618: PPUSH
65619: CALL_OW 428
65623: PUSH
65624: LD_INT 0
65626: NONEQUAL
65627: OR
65628: IFFALSE 65650
// tmp := Delete ( tmp , i ) ;
65630: LD_ADDR_VAR 0 6
65634: PUSH
65635: LD_VAR 0 6
65639: PPUSH
65640: LD_VAR 0 4
65644: PPUSH
65645: CALL_OW 3
65649: ST_TO_ADDR
65650: GO 65550
65652: POP
65653: POP
// j := GetClosestHex ( unit , tmp ) ;
65654: LD_ADDR_VAR 0 5
65658: PUSH
65659: LD_VAR 0 1
65663: PPUSH
65664: LD_VAR 0 6
65668: PPUSH
65669: CALL 64954 0 2
65673: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65674: LD_VAR 0 1
65678: PPUSH
65679: LD_VAR 0 5
65683: PUSH
65684: LD_INT 1
65686: ARRAY
65687: PPUSH
65688: LD_VAR 0 5
65692: PUSH
65693: LD_INT 2
65695: ARRAY
65696: PPUSH
65697: CALL_OW 111
// end ;
65701: LD_VAR 0 3
65705: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65706: LD_INT 0
65708: PPUSH
65709: PPUSH
65710: PPUSH
// uc_side = 0 ;
65711: LD_ADDR_OWVAR 20
65715: PUSH
65716: LD_INT 0
65718: ST_TO_ADDR
// uc_nation = 0 ;
65719: LD_ADDR_OWVAR 21
65723: PUSH
65724: LD_INT 0
65726: ST_TO_ADDR
// InitHc_All ( ) ;
65727: CALL_OW 584
// InitVc ;
65731: CALL_OW 20
// if mastodonts then
65735: LD_VAR 0 6
65739: IFFALSE 65806
// for i = 1 to mastodonts do
65741: LD_ADDR_VAR 0 11
65745: PUSH
65746: DOUBLE
65747: LD_INT 1
65749: DEC
65750: ST_TO_ADDR
65751: LD_VAR 0 6
65755: PUSH
65756: FOR_TO
65757: IFFALSE 65804
// begin vc_chassis := 31 ;
65759: LD_ADDR_OWVAR 37
65763: PUSH
65764: LD_INT 31
65766: ST_TO_ADDR
// vc_control := control_rider ;
65767: LD_ADDR_OWVAR 38
65771: PUSH
65772: LD_INT 4
65774: ST_TO_ADDR
// animal := CreateVehicle ;
65775: LD_ADDR_VAR 0 12
65779: PUSH
65780: CALL_OW 45
65784: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65785: LD_VAR 0 12
65789: PPUSH
65790: LD_VAR 0 8
65794: PPUSH
65795: LD_INT 0
65797: PPUSH
65798: CALL 67994 0 3
// end ;
65802: GO 65756
65804: POP
65805: POP
// if horses then
65806: LD_VAR 0 5
65810: IFFALSE 65877
// for i = 1 to horses do
65812: LD_ADDR_VAR 0 11
65816: PUSH
65817: DOUBLE
65818: LD_INT 1
65820: DEC
65821: ST_TO_ADDR
65822: LD_VAR 0 5
65826: PUSH
65827: FOR_TO
65828: IFFALSE 65875
// begin hc_class := 21 ;
65830: LD_ADDR_OWVAR 28
65834: PUSH
65835: LD_INT 21
65837: ST_TO_ADDR
// hc_gallery :=  ;
65838: LD_ADDR_OWVAR 33
65842: PUSH
65843: LD_STRING 
65845: ST_TO_ADDR
// animal := CreateHuman ;
65846: LD_ADDR_VAR 0 12
65850: PUSH
65851: CALL_OW 44
65855: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65856: LD_VAR 0 12
65860: PPUSH
65861: LD_VAR 0 8
65865: PPUSH
65866: LD_INT 0
65868: PPUSH
65869: CALL 67994 0 3
// end ;
65873: GO 65827
65875: POP
65876: POP
// if birds then
65877: LD_VAR 0 1
65881: IFFALSE 65948
// for i = 1 to birds do
65883: LD_ADDR_VAR 0 11
65887: PUSH
65888: DOUBLE
65889: LD_INT 1
65891: DEC
65892: ST_TO_ADDR
65893: LD_VAR 0 1
65897: PUSH
65898: FOR_TO
65899: IFFALSE 65946
// begin hc_class = 18 ;
65901: LD_ADDR_OWVAR 28
65905: PUSH
65906: LD_INT 18
65908: ST_TO_ADDR
// hc_gallery =  ;
65909: LD_ADDR_OWVAR 33
65913: PUSH
65914: LD_STRING 
65916: ST_TO_ADDR
// animal := CreateHuman ;
65917: LD_ADDR_VAR 0 12
65921: PUSH
65922: CALL_OW 44
65926: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65927: LD_VAR 0 12
65931: PPUSH
65932: LD_VAR 0 8
65936: PPUSH
65937: LD_INT 0
65939: PPUSH
65940: CALL 67994 0 3
// end ;
65944: GO 65898
65946: POP
65947: POP
// if tigers then
65948: LD_VAR 0 2
65952: IFFALSE 66036
// for i = 1 to tigers do
65954: LD_ADDR_VAR 0 11
65958: PUSH
65959: DOUBLE
65960: LD_INT 1
65962: DEC
65963: ST_TO_ADDR
65964: LD_VAR 0 2
65968: PUSH
65969: FOR_TO
65970: IFFALSE 66034
// begin hc_class = class_tiger ;
65972: LD_ADDR_OWVAR 28
65976: PUSH
65977: LD_INT 14
65979: ST_TO_ADDR
// hc_gallery =  ;
65980: LD_ADDR_OWVAR 33
65984: PUSH
65985: LD_STRING 
65987: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65988: LD_ADDR_OWVAR 35
65992: PUSH
65993: LD_INT 7
65995: NEG
65996: PPUSH
65997: LD_INT 7
65999: PPUSH
66000: CALL_OW 12
66004: ST_TO_ADDR
// animal := CreateHuman ;
66005: LD_ADDR_VAR 0 12
66009: PUSH
66010: CALL_OW 44
66014: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66015: LD_VAR 0 12
66019: PPUSH
66020: LD_VAR 0 8
66024: PPUSH
66025: LD_INT 0
66027: PPUSH
66028: CALL 67994 0 3
// end ;
66032: GO 65969
66034: POP
66035: POP
// if apemans then
66036: LD_VAR 0 3
66040: IFFALSE 66163
// for i = 1 to apemans do
66042: LD_ADDR_VAR 0 11
66046: PUSH
66047: DOUBLE
66048: LD_INT 1
66050: DEC
66051: ST_TO_ADDR
66052: LD_VAR 0 3
66056: PUSH
66057: FOR_TO
66058: IFFALSE 66161
// begin hc_class = class_apeman ;
66060: LD_ADDR_OWVAR 28
66064: PUSH
66065: LD_INT 12
66067: ST_TO_ADDR
// hc_gallery =  ;
66068: LD_ADDR_OWVAR 33
66072: PUSH
66073: LD_STRING 
66075: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
66076: LD_ADDR_OWVAR 35
66080: PUSH
66081: LD_INT 5
66083: NEG
66084: PPUSH
66085: LD_INT 5
66087: PPUSH
66088: CALL_OW 12
66092: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66093: LD_ADDR_OWVAR 31
66097: PUSH
66098: LD_INT 1
66100: PPUSH
66101: LD_INT 3
66103: PPUSH
66104: CALL_OW 12
66108: PUSH
66109: LD_INT 1
66111: PPUSH
66112: LD_INT 3
66114: PPUSH
66115: CALL_OW 12
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: ST_TO_ADDR
// animal := CreateHuman ;
66132: LD_ADDR_VAR 0 12
66136: PUSH
66137: CALL_OW 44
66141: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66142: LD_VAR 0 12
66146: PPUSH
66147: LD_VAR 0 8
66151: PPUSH
66152: LD_INT 0
66154: PPUSH
66155: CALL 67994 0 3
// end ;
66159: GO 66057
66161: POP
66162: POP
// if enchidnas then
66163: LD_VAR 0 4
66167: IFFALSE 66234
// for i = 1 to enchidnas do
66169: LD_ADDR_VAR 0 11
66173: PUSH
66174: DOUBLE
66175: LD_INT 1
66177: DEC
66178: ST_TO_ADDR
66179: LD_VAR 0 4
66183: PUSH
66184: FOR_TO
66185: IFFALSE 66232
// begin hc_class = 13 ;
66187: LD_ADDR_OWVAR 28
66191: PUSH
66192: LD_INT 13
66194: ST_TO_ADDR
// hc_gallery =  ;
66195: LD_ADDR_OWVAR 33
66199: PUSH
66200: LD_STRING 
66202: ST_TO_ADDR
// animal := CreateHuman ;
66203: LD_ADDR_VAR 0 12
66207: PUSH
66208: CALL_OW 44
66212: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66213: LD_VAR 0 12
66217: PPUSH
66218: LD_VAR 0 8
66222: PPUSH
66223: LD_INT 0
66225: PPUSH
66226: CALL 67994 0 3
// end ;
66230: GO 66184
66232: POP
66233: POP
// if fishes then
66234: LD_VAR 0 7
66238: IFFALSE 66305
// for i = 1 to fishes do
66240: LD_ADDR_VAR 0 11
66244: PUSH
66245: DOUBLE
66246: LD_INT 1
66248: DEC
66249: ST_TO_ADDR
66250: LD_VAR 0 7
66254: PUSH
66255: FOR_TO
66256: IFFALSE 66303
// begin hc_class = 20 ;
66258: LD_ADDR_OWVAR 28
66262: PUSH
66263: LD_INT 20
66265: ST_TO_ADDR
// hc_gallery =  ;
66266: LD_ADDR_OWVAR 33
66270: PUSH
66271: LD_STRING 
66273: ST_TO_ADDR
// animal := CreateHuman ;
66274: LD_ADDR_VAR 0 12
66278: PUSH
66279: CALL_OW 44
66283: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66284: LD_VAR 0 12
66288: PPUSH
66289: LD_VAR 0 9
66293: PPUSH
66294: LD_INT 0
66296: PPUSH
66297: CALL 67994 0 3
// end ;
66301: GO 66255
66303: POP
66304: POP
// end ;
66305: LD_VAR 0 10
66309: RET
// export function WantHeal ( sci , unit ) ; begin
66310: LD_INT 0
66312: PPUSH
// if GetTaskList ( sci ) > 0 then
66313: LD_VAR 0 1
66317: PPUSH
66318: CALL_OW 437
66322: PUSH
66323: LD_INT 0
66325: GREATER
66326: IFFALSE 66396
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66328: LD_VAR 0 1
66332: PPUSH
66333: CALL_OW 437
66337: PUSH
66338: LD_INT 1
66340: ARRAY
66341: PUSH
66342: LD_INT 1
66344: ARRAY
66345: PUSH
66346: LD_STRING l
66348: EQUAL
66349: PUSH
66350: LD_VAR 0 1
66354: PPUSH
66355: CALL_OW 437
66359: PUSH
66360: LD_INT 1
66362: ARRAY
66363: PUSH
66364: LD_INT 4
66366: ARRAY
66367: PUSH
66368: LD_VAR 0 2
66372: EQUAL
66373: AND
66374: IFFALSE 66386
// result := true else
66376: LD_ADDR_VAR 0 3
66380: PUSH
66381: LD_INT 1
66383: ST_TO_ADDR
66384: GO 66394
// result := false ;
66386: LD_ADDR_VAR 0 3
66390: PUSH
66391: LD_INT 0
66393: ST_TO_ADDR
// end else
66394: GO 66404
// result := false ;
66396: LD_ADDR_VAR 0 3
66400: PUSH
66401: LD_INT 0
66403: ST_TO_ADDR
// end ;
66404: LD_VAR 0 3
66408: RET
// export function HealTarget ( sci ) ; begin
66409: LD_INT 0
66411: PPUSH
// if not sci then
66412: LD_VAR 0 1
66416: NOT
66417: IFFALSE 66421
// exit ;
66419: GO 66486
// result := 0 ;
66421: LD_ADDR_VAR 0 2
66425: PUSH
66426: LD_INT 0
66428: ST_TO_ADDR
// if GetTaskList ( sci ) then
66429: LD_VAR 0 1
66433: PPUSH
66434: CALL_OW 437
66438: IFFALSE 66486
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66440: LD_VAR 0 1
66444: PPUSH
66445: CALL_OW 437
66449: PUSH
66450: LD_INT 1
66452: ARRAY
66453: PUSH
66454: LD_INT 1
66456: ARRAY
66457: PUSH
66458: LD_STRING l
66460: EQUAL
66461: IFFALSE 66486
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66463: LD_ADDR_VAR 0 2
66467: PUSH
66468: LD_VAR 0 1
66472: PPUSH
66473: CALL_OW 437
66477: PUSH
66478: LD_INT 1
66480: ARRAY
66481: PUSH
66482: LD_INT 4
66484: ARRAY
66485: ST_TO_ADDR
// end ;
66486: LD_VAR 0 2
66490: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66491: LD_INT 0
66493: PPUSH
66494: PPUSH
66495: PPUSH
66496: PPUSH
// if not base_units then
66497: LD_VAR 0 1
66501: NOT
66502: IFFALSE 66506
// exit ;
66504: GO 66593
// result := false ;
66506: LD_ADDR_VAR 0 2
66510: PUSH
66511: LD_INT 0
66513: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66514: LD_ADDR_VAR 0 5
66518: PUSH
66519: LD_VAR 0 1
66523: PPUSH
66524: LD_INT 21
66526: PUSH
66527: LD_INT 3
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PPUSH
66534: CALL_OW 72
66538: ST_TO_ADDR
// if not tmp then
66539: LD_VAR 0 5
66543: NOT
66544: IFFALSE 66548
// exit ;
66546: GO 66593
// for i in tmp do
66548: LD_ADDR_VAR 0 3
66552: PUSH
66553: LD_VAR 0 5
66557: PUSH
66558: FOR_IN
66559: IFFALSE 66591
// begin result := EnemyInRange ( i , 22 ) ;
66561: LD_ADDR_VAR 0 2
66565: PUSH
66566: LD_VAR 0 3
66570: PPUSH
66571: LD_INT 22
66573: PPUSH
66574: CALL 64829 0 2
66578: ST_TO_ADDR
// if result then
66579: LD_VAR 0 2
66583: IFFALSE 66589
// exit ;
66585: POP
66586: POP
66587: GO 66593
// end ;
66589: GO 66558
66591: POP
66592: POP
// end ;
66593: LD_VAR 0 2
66597: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66598: LD_INT 0
66600: PPUSH
66601: PPUSH
// if not units then
66602: LD_VAR 0 1
66606: NOT
66607: IFFALSE 66611
// exit ;
66609: GO 66681
// result := [ ] ;
66611: LD_ADDR_VAR 0 3
66615: PUSH
66616: EMPTY
66617: ST_TO_ADDR
// for i in units do
66618: LD_ADDR_VAR 0 4
66622: PUSH
66623: LD_VAR 0 1
66627: PUSH
66628: FOR_IN
66629: IFFALSE 66679
// if GetTag ( i ) = tag then
66631: LD_VAR 0 4
66635: PPUSH
66636: CALL_OW 110
66640: PUSH
66641: LD_VAR 0 2
66645: EQUAL
66646: IFFALSE 66677
// result := Insert ( result , result + 1 , i ) ;
66648: LD_ADDR_VAR 0 3
66652: PUSH
66653: LD_VAR 0 3
66657: PPUSH
66658: LD_VAR 0 3
66662: PUSH
66663: LD_INT 1
66665: PLUS
66666: PPUSH
66667: LD_VAR 0 4
66671: PPUSH
66672: CALL_OW 2
66676: ST_TO_ADDR
66677: GO 66628
66679: POP
66680: POP
// end ;
66681: LD_VAR 0 3
66685: RET
// export function IsDriver ( un ) ; begin
66686: LD_INT 0
66688: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66689: LD_ADDR_VAR 0 2
66693: PUSH
66694: LD_VAR 0 1
66698: PUSH
66699: LD_INT 55
66701: PUSH
66702: EMPTY
66703: LIST
66704: PPUSH
66705: CALL_OW 69
66709: IN
66710: ST_TO_ADDR
// end ;
66711: LD_VAR 0 2
66715: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66716: LD_INT 0
66718: PPUSH
66719: PPUSH
// list := [ ] ;
66720: LD_ADDR_VAR 0 5
66724: PUSH
66725: EMPTY
66726: ST_TO_ADDR
// case d of 0 :
66727: LD_VAR 0 3
66731: PUSH
66732: LD_INT 0
66734: DOUBLE
66735: EQUAL
66736: IFTRUE 66740
66738: GO 66873
66740: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66741: LD_ADDR_VAR 0 5
66745: PUSH
66746: LD_VAR 0 1
66750: PUSH
66751: LD_INT 4
66753: MINUS
66754: PUSH
66755: LD_VAR 0 2
66759: PUSH
66760: LD_INT 4
66762: MINUS
66763: PUSH
66764: LD_INT 2
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: LIST
66771: PUSH
66772: LD_VAR 0 1
66776: PUSH
66777: LD_INT 3
66779: MINUS
66780: PUSH
66781: LD_VAR 0 2
66785: PUSH
66786: LD_INT 1
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: LIST
66793: PUSH
66794: LD_VAR 0 1
66798: PUSH
66799: LD_INT 4
66801: PLUS
66802: PUSH
66803: LD_VAR 0 2
66807: PUSH
66808: LD_INT 4
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: LIST
66815: PUSH
66816: LD_VAR 0 1
66820: PUSH
66821: LD_INT 3
66823: PLUS
66824: PUSH
66825: LD_VAR 0 2
66829: PUSH
66830: LD_INT 3
66832: PLUS
66833: PUSH
66834: LD_INT 5
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: LIST
66841: PUSH
66842: LD_VAR 0 1
66846: PUSH
66847: LD_VAR 0 2
66851: PUSH
66852: LD_INT 4
66854: PLUS
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: LIST
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: ST_TO_ADDR
// end ; 1 :
66871: GO 67571
66873: LD_INT 1
66875: DOUBLE
66876: EQUAL
66877: IFTRUE 66881
66879: GO 67014
66881: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66882: LD_ADDR_VAR 0 5
66886: PUSH
66887: LD_VAR 0 1
66891: PUSH
66892: LD_VAR 0 2
66896: PUSH
66897: LD_INT 4
66899: MINUS
66900: PUSH
66901: LD_INT 3
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: PUSH
66909: LD_VAR 0 1
66913: PUSH
66914: LD_INT 3
66916: MINUS
66917: PUSH
66918: LD_VAR 0 2
66922: PUSH
66923: LD_INT 3
66925: MINUS
66926: PUSH
66927: LD_INT 2
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: LIST
66934: PUSH
66935: LD_VAR 0 1
66939: PUSH
66940: LD_INT 4
66942: MINUS
66943: PUSH
66944: LD_VAR 0 2
66948: PUSH
66949: LD_INT 1
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: LIST
66956: PUSH
66957: LD_VAR 0 1
66961: PUSH
66962: LD_VAR 0 2
66966: PUSH
66967: LD_INT 3
66969: PLUS
66970: PUSH
66971: LD_INT 0
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: LIST
66978: PUSH
66979: LD_VAR 0 1
66983: PUSH
66984: LD_INT 4
66986: PLUS
66987: PUSH
66988: LD_VAR 0 2
66992: PUSH
66993: LD_INT 4
66995: PLUS
66996: PUSH
66997: LD_INT 5
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: LIST
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: ST_TO_ADDR
// end ; 2 :
67012: GO 67571
67014: LD_INT 2
67016: DOUBLE
67017: EQUAL
67018: IFTRUE 67022
67020: GO 67151
67022: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67023: LD_ADDR_VAR 0 5
67027: PUSH
67028: LD_VAR 0 1
67032: PUSH
67033: LD_VAR 0 2
67037: PUSH
67038: LD_INT 3
67040: MINUS
67041: PUSH
67042: LD_INT 3
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: LIST
67049: PUSH
67050: LD_VAR 0 1
67054: PUSH
67055: LD_INT 4
67057: PLUS
67058: PUSH
67059: LD_VAR 0 2
67063: PUSH
67064: LD_INT 4
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: LIST
67071: PUSH
67072: LD_VAR 0 1
67076: PUSH
67077: LD_VAR 0 2
67081: PUSH
67082: LD_INT 4
67084: PLUS
67085: PUSH
67086: LD_INT 0
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: LIST
67093: PUSH
67094: LD_VAR 0 1
67098: PUSH
67099: LD_INT 3
67101: MINUS
67102: PUSH
67103: LD_VAR 0 2
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: LIST
67115: PUSH
67116: LD_VAR 0 1
67120: PUSH
67121: LD_INT 4
67123: MINUS
67124: PUSH
67125: LD_VAR 0 2
67129: PUSH
67130: LD_INT 4
67132: MINUS
67133: PUSH
67134: LD_INT 2
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: LIST
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: ST_TO_ADDR
// end ; 3 :
67149: GO 67571
67151: LD_INT 3
67153: DOUBLE
67154: EQUAL
67155: IFTRUE 67159
67157: GO 67292
67159: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67160: LD_ADDR_VAR 0 5
67164: PUSH
67165: LD_VAR 0 1
67169: PUSH
67170: LD_INT 3
67172: PLUS
67173: PUSH
67174: LD_VAR 0 2
67178: PUSH
67179: LD_INT 4
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: LIST
67186: PUSH
67187: LD_VAR 0 1
67191: PUSH
67192: LD_INT 4
67194: PLUS
67195: PUSH
67196: LD_VAR 0 2
67200: PUSH
67201: LD_INT 4
67203: PLUS
67204: PUSH
67205: LD_INT 5
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: LIST
67212: PUSH
67213: LD_VAR 0 1
67217: PUSH
67218: LD_INT 4
67220: MINUS
67221: PUSH
67222: LD_VAR 0 2
67226: PUSH
67227: LD_INT 1
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: LIST
67234: PUSH
67235: LD_VAR 0 1
67239: PUSH
67240: LD_VAR 0 2
67244: PUSH
67245: LD_INT 4
67247: MINUS
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: LIST
67256: PUSH
67257: LD_VAR 0 1
67261: PUSH
67262: LD_INT 3
67264: MINUS
67265: PUSH
67266: LD_VAR 0 2
67270: PUSH
67271: LD_INT 3
67273: MINUS
67274: PUSH
67275: LD_INT 2
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: LIST
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: ST_TO_ADDR
// end ; 4 :
67290: GO 67571
67292: LD_INT 4
67294: DOUBLE
67295: EQUAL
67296: IFTRUE 67300
67298: GO 67433
67300: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67301: LD_ADDR_VAR 0 5
67305: PUSH
67306: LD_VAR 0 1
67310: PUSH
67311: LD_VAR 0 2
67315: PUSH
67316: LD_INT 4
67318: PLUS
67319: PUSH
67320: LD_INT 0
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: PUSH
67328: LD_VAR 0 1
67332: PUSH
67333: LD_INT 3
67335: PLUS
67336: PUSH
67337: LD_VAR 0 2
67341: PUSH
67342: LD_INT 3
67344: PLUS
67345: PUSH
67346: LD_INT 5
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: LIST
67353: PUSH
67354: LD_VAR 0 1
67358: PUSH
67359: LD_INT 4
67361: PLUS
67362: PUSH
67363: LD_VAR 0 2
67367: PUSH
67368: LD_INT 4
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: LIST
67375: PUSH
67376: LD_VAR 0 1
67380: PUSH
67381: LD_VAR 0 2
67385: PUSH
67386: LD_INT 3
67388: MINUS
67389: PUSH
67390: LD_INT 3
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: LIST
67397: PUSH
67398: LD_VAR 0 1
67402: PUSH
67403: LD_INT 4
67405: MINUS
67406: PUSH
67407: LD_VAR 0 2
67411: PUSH
67412: LD_INT 4
67414: MINUS
67415: PUSH
67416: LD_INT 2
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: LIST
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: ST_TO_ADDR
// end ; 5 :
67431: GO 67571
67433: LD_INT 5
67435: DOUBLE
67436: EQUAL
67437: IFTRUE 67441
67439: GO 67570
67441: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67442: LD_ADDR_VAR 0 5
67446: PUSH
67447: LD_VAR 0 1
67451: PUSH
67452: LD_INT 4
67454: MINUS
67455: PUSH
67456: LD_VAR 0 2
67460: PUSH
67461: LD_INT 1
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: LIST
67468: PUSH
67469: LD_VAR 0 1
67473: PUSH
67474: LD_VAR 0 2
67478: PUSH
67479: LD_INT 4
67481: MINUS
67482: PUSH
67483: LD_INT 3
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: LIST
67490: PUSH
67491: LD_VAR 0 1
67495: PUSH
67496: LD_INT 4
67498: PLUS
67499: PUSH
67500: LD_VAR 0 2
67504: PUSH
67505: LD_INT 4
67507: PLUS
67508: PUSH
67509: LD_INT 5
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: LIST
67516: PUSH
67517: LD_VAR 0 1
67521: PUSH
67522: LD_INT 3
67524: PLUS
67525: PUSH
67526: LD_VAR 0 2
67530: PUSH
67531: LD_INT 4
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: LIST
67538: PUSH
67539: LD_VAR 0 1
67543: PUSH
67544: LD_VAR 0 2
67548: PUSH
67549: LD_INT 3
67551: PLUS
67552: PUSH
67553: LD_INT 0
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: LIST
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: ST_TO_ADDR
// end ; end ;
67568: GO 67571
67570: POP
// result := list ;
67571: LD_ADDR_VAR 0 4
67575: PUSH
67576: LD_VAR 0 5
67580: ST_TO_ADDR
// end ;
67581: LD_VAR 0 4
67585: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67586: LD_INT 0
67588: PPUSH
67589: PPUSH
67590: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67591: LD_VAR 0 1
67595: NOT
67596: PUSH
67597: LD_VAR 0 2
67601: PUSH
67602: LD_INT 1
67604: PUSH
67605: LD_INT 2
67607: PUSH
67608: LD_INT 3
67610: PUSH
67611: LD_INT 4
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: IN
67620: NOT
67621: OR
67622: IFFALSE 67626
// exit ;
67624: GO 67718
// tmp := [ ] ;
67626: LD_ADDR_VAR 0 5
67630: PUSH
67631: EMPTY
67632: ST_TO_ADDR
// for i in units do
67633: LD_ADDR_VAR 0 4
67637: PUSH
67638: LD_VAR 0 1
67642: PUSH
67643: FOR_IN
67644: IFFALSE 67687
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67646: LD_ADDR_VAR 0 5
67650: PUSH
67651: LD_VAR 0 5
67655: PPUSH
67656: LD_VAR 0 5
67660: PUSH
67661: LD_INT 1
67663: PLUS
67664: PPUSH
67665: LD_VAR 0 4
67669: PPUSH
67670: LD_VAR 0 2
67674: PPUSH
67675: CALL_OW 259
67679: PPUSH
67680: CALL_OW 2
67684: ST_TO_ADDR
67685: GO 67643
67687: POP
67688: POP
// if not tmp then
67689: LD_VAR 0 5
67693: NOT
67694: IFFALSE 67698
// exit ;
67696: GO 67718
// result := SortListByListDesc ( units , tmp ) ;
67698: LD_ADDR_VAR 0 3
67702: PUSH
67703: LD_VAR 0 1
67707: PPUSH
67708: LD_VAR 0 5
67712: PPUSH
67713: CALL_OW 77
67717: ST_TO_ADDR
// end ;
67718: LD_VAR 0 3
67722: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67723: LD_INT 0
67725: PPUSH
67726: PPUSH
67727: PPUSH
// result := false ;
67728: LD_ADDR_VAR 0 3
67732: PUSH
67733: LD_INT 0
67735: ST_TO_ADDR
// x := GetX ( building ) ;
67736: LD_ADDR_VAR 0 4
67740: PUSH
67741: LD_VAR 0 2
67745: PPUSH
67746: CALL_OW 250
67750: ST_TO_ADDR
// y := GetY ( building ) ;
67751: LD_ADDR_VAR 0 5
67755: PUSH
67756: LD_VAR 0 2
67760: PPUSH
67761: CALL_OW 251
67765: ST_TO_ADDR
// if not building or not x or not y then
67766: LD_VAR 0 2
67770: NOT
67771: PUSH
67772: LD_VAR 0 4
67776: NOT
67777: OR
67778: PUSH
67779: LD_VAR 0 5
67783: NOT
67784: OR
67785: IFFALSE 67789
// exit ;
67787: GO 67881
// if GetTaskList ( unit ) then
67789: LD_VAR 0 1
67793: PPUSH
67794: CALL_OW 437
67798: IFFALSE 67881
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67800: LD_STRING e
67802: PUSH
67803: LD_VAR 0 1
67807: PPUSH
67808: CALL_OW 437
67812: PUSH
67813: LD_INT 1
67815: ARRAY
67816: PUSH
67817: LD_INT 1
67819: ARRAY
67820: EQUAL
67821: PUSH
67822: LD_VAR 0 4
67826: PUSH
67827: LD_VAR 0 1
67831: PPUSH
67832: CALL_OW 437
67836: PUSH
67837: LD_INT 1
67839: ARRAY
67840: PUSH
67841: LD_INT 2
67843: ARRAY
67844: EQUAL
67845: AND
67846: PUSH
67847: LD_VAR 0 5
67851: PUSH
67852: LD_VAR 0 1
67856: PPUSH
67857: CALL_OW 437
67861: PUSH
67862: LD_INT 1
67864: ARRAY
67865: PUSH
67866: LD_INT 3
67868: ARRAY
67869: EQUAL
67870: AND
67871: IFFALSE 67881
// result := true end ;
67873: LD_ADDR_VAR 0 3
67877: PUSH
67878: LD_INT 1
67880: ST_TO_ADDR
// end ;
67881: LD_VAR 0 3
67885: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67886: LD_INT 0
67888: PPUSH
// result := false ;
67889: LD_ADDR_VAR 0 4
67893: PUSH
67894: LD_INT 0
67896: ST_TO_ADDR
// if GetTaskList ( unit ) then
67897: LD_VAR 0 1
67901: PPUSH
67902: CALL_OW 437
67906: IFFALSE 67989
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67908: LD_STRING M
67910: PUSH
67911: LD_VAR 0 1
67915: PPUSH
67916: CALL_OW 437
67920: PUSH
67921: LD_INT 1
67923: ARRAY
67924: PUSH
67925: LD_INT 1
67927: ARRAY
67928: EQUAL
67929: PUSH
67930: LD_VAR 0 2
67934: PUSH
67935: LD_VAR 0 1
67939: PPUSH
67940: CALL_OW 437
67944: PUSH
67945: LD_INT 1
67947: ARRAY
67948: PUSH
67949: LD_INT 2
67951: ARRAY
67952: EQUAL
67953: AND
67954: PUSH
67955: LD_VAR 0 3
67959: PUSH
67960: LD_VAR 0 1
67964: PPUSH
67965: CALL_OW 437
67969: PUSH
67970: LD_INT 1
67972: ARRAY
67973: PUSH
67974: LD_INT 3
67976: ARRAY
67977: EQUAL
67978: AND
67979: IFFALSE 67989
// result := true ;
67981: LD_ADDR_VAR 0 4
67985: PUSH
67986: LD_INT 1
67988: ST_TO_ADDR
// end ; end ;
67989: LD_VAR 0 4
67993: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67994: LD_INT 0
67996: PPUSH
67997: PPUSH
67998: PPUSH
67999: PPUSH
// if not unit or not area then
68000: LD_VAR 0 1
68004: NOT
68005: PUSH
68006: LD_VAR 0 2
68010: NOT
68011: OR
68012: IFFALSE 68016
// exit ;
68014: GO 68180
// tmp := AreaToList ( area , i ) ;
68016: LD_ADDR_VAR 0 6
68020: PUSH
68021: LD_VAR 0 2
68025: PPUSH
68026: LD_VAR 0 5
68030: PPUSH
68031: CALL_OW 517
68035: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68036: LD_ADDR_VAR 0 5
68040: PUSH
68041: DOUBLE
68042: LD_INT 1
68044: DEC
68045: ST_TO_ADDR
68046: LD_VAR 0 6
68050: PUSH
68051: LD_INT 1
68053: ARRAY
68054: PUSH
68055: FOR_TO
68056: IFFALSE 68178
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68058: LD_ADDR_VAR 0 7
68062: PUSH
68063: LD_VAR 0 6
68067: PUSH
68068: LD_INT 1
68070: ARRAY
68071: PUSH
68072: LD_VAR 0 5
68076: ARRAY
68077: PUSH
68078: LD_VAR 0 6
68082: PUSH
68083: LD_INT 2
68085: ARRAY
68086: PUSH
68087: LD_VAR 0 5
68091: ARRAY
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68097: LD_VAR 0 7
68101: PUSH
68102: LD_INT 1
68104: ARRAY
68105: PPUSH
68106: LD_VAR 0 7
68110: PUSH
68111: LD_INT 2
68113: ARRAY
68114: PPUSH
68115: CALL_OW 428
68119: PUSH
68120: LD_INT 0
68122: EQUAL
68123: IFFALSE 68176
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68125: LD_VAR 0 1
68129: PPUSH
68130: LD_VAR 0 7
68134: PUSH
68135: LD_INT 1
68137: ARRAY
68138: PPUSH
68139: LD_VAR 0 7
68143: PUSH
68144: LD_INT 2
68146: ARRAY
68147: PPUSH
68148: LD_VAR 0 3
68152: PPUSH
68153: CALL_OW 48
// result := IsPlaced ( unit ) ;
68157: LD_ADDR_VAR 0 4
68161: PUSH
68162: LD_VAR 0 1
68166: PPUSH
68167: CALL_OW 305
68171: ST_TO_ADDR
// exit ;
68172: POP
68173: POP
68174: GO 68180
// end ; end ;
68176: GO 68055
68178: POP
68179: POP
// end ;
68180: LD_VAR 0 4
68184: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68185: LD_INT 0
68187: PPUSH
68188: PPUSH
68189: PPUSH
// if not side or side > 8 then
68190: LD_VAR 0 1
68194: NOT
68195: PUSH
68196: LD_VAR 0 1
68200: PUSH
68201: LD_INT 8
68203: GREATER
68204: OR
68205: IFFALSE 68209
// exit ;
68207: GO 68396
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68209: LD_ADDR_VAR 0 4
68213: PUSH
68214: LD_INT 22
68216: PUSH
68217: LD_VAR 0 1
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 21
68228: PUSH
68229: LD_INT 3
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PPUSH
68240: CALL_OW 69
68244: ST_TO_ADDR
// if not tmp then
68245: LD_VAR 0 4
68249: NOT
68250: IFFALSE 68254
// exit ;
68252: GO 68396
// enable_addtolog := true ;
68254: LD_ADDR_OWVAR 81
68258: PUSH
68259: LD_INT 1
68261: ST_TO_ADDR
// AddToLog ( [ ) ;
68262: LD_STRING [
68264: PPUSH
68265: CALL_OW 561
// for i in tmp do
68269: LD_ADDR_VAR 0 3
68273: PUSH
68274: LD_VAR 0 4
68278: PUSH
68279: FOR_IN
68280: IFFALSE 68387
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68282: LD_STRING [
68284: PUSH
68285: LD_VAR 0 3
68289: PPUSH
68290: CALL_OW 266
68294: STR
68295: PUSH
68296: LD_STRING , 
68298: STR
68299: PUSH
68300: LD_VAR 0 3
68304: PPUSH
68305: CALL_OW 250
68309: STR
68310: PUSH
68311: LD_STRING , 
68313: STR
68314: PUSH
68315: LD_VAR 0 3
68319: PPUSH
68320: CALL_OW 251
68324: STR
68325: PUSH
68326: LD_STRING , 
68328: STR
68329: PUSH
68330: LD_VAR 0 3
68334: PPUSH
68335: CALL_OW 254
68339: STR
68340: PUSH
68341: LD_STRING , 
68343: STR
68344: PUSH
68345: LD_VAR 0 3
68349: PPUSH
68350: LD_INT 1
68352: PPUSH
68353: CALL_OW 268
68357: STR
68358: PUSH
68359: LD_STRING , 
68361: STR
68362: PUSH
68363: LD_VAR 0 3
68367: PPUSH
68368: LD_INT 2
68370: PPUSH
68371: CALL_OW 268
68375: STR
68376: PUSH
68377: LD_STRING ],
68379: STR
68380: PPUSH
68381: CALL_OW 561
// end ;
68385: GO 68279
68387: POP
68388: POP
// AddToLog ( ]; ) ;
68389: LD_STRING ];
68391: PPUSH
68392: CALL_OW 561
// end ;
68396: LD_VAR 0 2
68400: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68401: LD_INT 0
68403: PPUSH
68404: PPUSH
68405: PPUSH
68406: PPUSH
68407: PPUSH
// if not area or not rate or not max then
68408: LD_VAR 0 1
68412: NOT
68413: PUSH
68414: LD_VAR 0 2
68418: NOT
68419: OR
68420: PUSH
68421: LD_VAR 0 4
68425: NOT
68426: OR
68427: IFFALSE 68431
// exit ;
68429: GO 68623
// while 1 do
68431: LD_INT 1
68433: IFFALSE 68623
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68435: LD_ADDR_VAR 0 9
68439: PUSH
68440: LD_VAR 0 1
68444: PPUSH
68445: LD_INT 1
68447: PPUSH
68448: CALL_OW 287
68452: PUSH
68453: LD_INT 10
68455: MUL
68456: ST_TO_ADDR
// r := rate / 10 ;
68457: LD_ADDR_VAR 0 7
68461: PUSH
68462: LD_VAR 0 2
68466: PUSH
68467: LD_INT 10
68469: DIVREAL
68470: ST_TO_ADDR
// time := 1 1$00 ;
68471: LD_ADDR_VAR 0 8
68475: PUSH
68476: LD_INT 2100
68478: ST_TO_ADDR
// if amount < min then
68479: LD_VAR 0 9
68483: PUSH
68484: LD_VAR 0 3
68488: LESS
68489: IFFALSE 68507
// r := r * 2 else
68491: LD_ADDR_VAR 0 7
68495: PUSH
68496: LD_VAR 0 7
68500: PUSH
68501: LD_INT 2
68503: MUL
68504: ST_TO_ADDR
68505: GO 68533
// if amount > max then
68507: LD_VAR 0 9
68511: PUSH
68512: LD_VAR 0 4
68516: GREATER
68517: IFFALSE 68533
// r := r / 2 ;
68519: LD_ADDR_VAR 0 7
68523: PUSH
68524: LD_VAR 0 7
68528: PUSH
68529: LD_INT 2
68531: DIVREAL
68532: ST_TO_ADDR
// time := time / r ;
68533: LD_ADDR_VAR 0 8
68537: PUSH
68538: LD_VAR 0 8
68542: PUSH
68543: LD_VAR 0 7
68547: DIVREAL
68548: ST_TO_ADDR
// if time < 0 then
68549: LD_VAR 0 8
68553: PUSH
68554: LD_INT 0
68556: LESS
68557: IFFALSE 68574
// time := time * - 1 ;
68559: LD_ADDR_VAR 0 8
68563: PUSH
68564: LD_VAR 0 8
68568: PUSH
68569: LD_INT 1
68571: NEG
68572: MUL
68573: ST_TO_ADDR
// wait ( time ) ;
68574: LD_VAR 0 8
68578: PPUSH
68579: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68583: LD_INT 35
68585: PPUSH
68586: LD_INT 875
68588: PPUSH
68589: CALL_OW 12
68593: PPUSH
68594: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68598: LD_INT 1
68600: PPUSH
68601: LD_INT 5
68603: PPUSH
68604: CALL_OW 12
68608: PPUSH
68609: LD_VAR 0 1
68613: PPUSH
68614: LD_INT 1
68616: PPUSH
68617: CALL_OW 55
// end ;
68621: GO 68431
// end ;
68623: LD_VAR 0 5
68627: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68628: LD_INT 0
68630: PPUSH
68631: PPUSH
68632: PPUSH
68633: PPUSH
68634: PPUSH
68635: PPUSH
68636: PPUSH
68637: PPUSH
// if not turrets or not factories then
68638: LD_VAR 0 1
68642: NOT
68643: PUSH
68644: LD_VAR 0 2
68648: NOT
68649: OR
68650: IFFALSE 68654
// exit ;
68652: GO 68961
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68654: LD_ADDR_VAR 0 10
68658: PUSH
68659: LD_INT 5
68661: PUSH
68662: LD_INT 6
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 2
68671: PUSH
68672: LD_INT 4
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 3
68681: PUSH
68682: LD_INT 5
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 24
68696: PUSH
68697: LD_INT 25
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 23
68706: PUSH
68707: LD_INT 27
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 42
68720: PUSH
68721: LD_INT 43
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 44
68730: PUSH
68731: LD_INT 46
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 45
68740: PUSH
68741: LD_INT 47
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: LIST
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: ST_TO_ADDR
// result := [ ] ;
68758: LD_ADDR_VAR 0 3
68762: PUSH
68763: EMPTY
68764: ST_TO_ADDR
// for i in turrets do
68765: LD_ADDR_VAR 0 4
68769: PUSH
68770: LD_VAR 0 1
68774: PUSH
68775: FOR_IN
68776: IFFALSE 68959
// begin nat := GetNation ( i ) ;
68778: LD_ADDR_VAR 0 7
68782: PUSH
68783: LD_VAR 0 4
68787: PPUSH
68788: CALL_OW 248
68792: ST_TO_ADDR
// weapon := 0 ;
68793: LD_ADDR_VAR 0 8
68797: PUSH
68798: LD_INT 0
68800: ST_TO_ADDR
// if not nat then
68801: LD_VAR 0 7
68805: NOT
68806: IFFALSE 68810
// continue ;
68808: GO 68775
// for j in list [ nat ] do
68810: LD_ADDR_VAR 0 5
68814: PUSH
68815: LD_VAR 0 10
68819: PUSH
68820: LD_VAR 0 7
68824: ARRAY
68825: PUSH
68826: FOR_IN
68827: IFFALSE 68868
// if GetBWeapon ( i ) = j [ 1 ] then
68829: LD_VAR 0 4
68833: PPUSH
68834: CALL_OW 269
68838: PUSH
68839: LD_VAR 0 5
68843: PUSH
68844: LD_INT 1
68846: ARRAY
68847: EQUAL
68848: IFFALSE 68866
// begin weapon := j [ 2 ] ;
68850: LD_ADDR_VAR 0 8
68854: PUSH
68855: LD_VAR 0 5
68859: PUSH
68860: LD_INT 2
68862: ARRAY
68863: ST_TO_ADDR
// break ;
68864: GO 68868
// end ;
68866: GO 68826
68868: POP
68869: POP
// if not weapon then
68870: LD_VAR 0 8
68874: NOT
68875: IFFALSE 68879
// continue ;
68877: GO 68775
// for k in factories do
68879: LD_ADDR_VAR 0 6
68883: PUSH
68884: LD_VAR 0 2
68888: PUSH
68889: FOR_IN
68890: IFFALSE 68955
// begin weapons := AvailableWeaponList ( k ) ;
68892: LD_ADDR_VAR 0 9
68896: PUSH
68897: LD_VAR 0 6
68901: PPUSH
68902: CALL_OW 478
68906: ST_TO_ADDR
// if not weapons then
68907: LD_VAR 0 9
68911: NOT
68912: IFFALSE 68916
// continue ;
68914: GO 68889
// if weapon in weapons then
68916: LD_VAR 0 8
68920: PUSH
68921: LD_VAR 0 9
68925: IN
68926: IFFALSE 68953
// begin result := [ i , weapon ] ;
68928: LD_ADDR_VAR 0 3
68932: PUSH
68933: LD_VAR 0 4
68937: PUSH
68938: LD_VAR 0 8
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: ST_TO_ADDR
// exit ;
68947: POP
68948: POP
68949: POP
68950: POP
68951: GO 68961
// end ; end ;
68953: GO 68889
68955: POP
68956: POP
// end ;
68957: GO 68775
68959: POP
68960: POP
// end ;
68961: LD_VAR 0 3
68965: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68966: LD_INT 0
68968: PPUSH
// if not side or side > 8 then
68969: LD_VAR 0 3
68973: NOT
68974: PUSH
68975: LD_VAR 0 3
68979: PUSH
68980: LD_INT 8
68982: GREATER
68983: OR
68984: IFFALSE 68988
// exit ;
68986: GO 69047
// if not range then
68988: LD_VAR 0 4
68992: NOT
68993: IFFALSE 69004
// range := - 12 ;
68995: LD_ADDR_VAR 0 4
68999: PUSH
69000: LD_INT 12
69002: NEG
69003: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69004: LD_VAR 0 1
69008: PPUSH
69009: LD_VAR 0 2
69013: PPUSH
69014: LD_VAR 0 3
69018: PPUSH
69019: LD_VAR 0 4
69023: PPUSH
69024: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69028: LD_VAR 0 1
69032: PPUSH
69033: LD_VAR 0 2
69037: PPUSH
69038: LD_VAR 0 3
69042: PPUSH
69043: CALL_OW 331
// end ;
69047: LD_VAR 0 5
69051: RET
// export function Video ( mode ) ; begin
69052: LD_INT 0
69054: PPUSH
// ingame_video = mode ;
69055: LD_ADDR_OWVAR 52
69059: PUSH
69060: LD_VAR 0 1
69064: ST_TO_ADDR
// interface_hidden = mode ;
69065: LD_ADDR_OWVAR 54
69069: PUSH
69070: LD_VAR 0 1
69074: ST_TO_ADDR
// end ;
69075: LD_VAR 0 2
69079: RET
// export function Join ( array , element ) ; begin
69080: LD_INT 0
69082: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69083: LD_ADDR_VAR 0 3
69087: PUSH
69088: LD_VAR 0 1
69092: PPUSH
69093: LD_VAR 0 1
69097: PUSH
69098: LD_INT 1
69100: PLUS
69101: PPUSH
69102: LD_VAR 0 2
69106: PPUSH
69107: CALL_OW 1
69111: ST_TO_ADDR
// end ;
69112: LD_VAR 0 3
69116: RET
// export function JoinUnion ( array , element ) ; begin
69117: LD_INT 0
69119: PPUSH
// result := array union element ;
69120: LD_ADDR_VAR 0 3
69124: PUSH
69125: LD_VAR 0 1
69129: PUSH
69130: LD_VAR 0 2
69134: UNION
69135: ST_TO_ADDR
// end ;
69136: LD_VAR 0 3
69140: RET
// export function GetBehemoths ( side ) ; begin
69141: LD_INT 0
69143: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69144: LD_ADDR_VAR 0 2
69148: PUSH
69149: LD_INT 22
69151: PUSH
69152: LD_VAR 0 1
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 31
69163: PUSH
69164: LD_INT 25
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PPUSH
69175: CALL_OW 69
69179: ST_TO_ADDR
// end ;
69180: LD_VAR 0 2
69184: RET
// export function Shuffle ( array ) ; var i , index ; begin
69185: LD_INT 0
69187: PPUSH
69188: PPUSH
69189: PPUSH
// result := [ ] ;
69190: LD_ADDR_VAR 0 2
69194: PUSH
69195: EMPTY
69196: ST_TO_ADDR
// if not array then
69197: LD_VAR 0 1
69201: NOT
69202: IFFALSE 69206
// exit ;
69204: GO 69305
// Randomize ;
69206: CALL_OW 10
// for i = array downto 1 do
69210: LD_ADDR_VAR 0 3
69214: PUSH
69215: DOUBLE
69216: LD_VAR 0 1
69220: INC
69221: ST_TO_ADDR
69222: LD_INT 1
69224: PUSH
69225: FOR_DOWNTO
69226: IFFALSE 69303
// begin index := rand ( 1 , array ) ;
69228: LD_ADDR_VAR 0 4
69232: PUSH
69233: LD_INT 1
69235: PPUSH
69236: LD_VAR 0 1
69240: PPUSH
69241: CALL_OW 12
69245: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69246: LD_ADDR_VAR 0 2
69250: PUSH
69251: LD_VAR 0 2
69255: PPUSH
69256: LD_VAR 0 2
69260: PUSH
69261: LD_INT 1
69263: PLUS
69264: PPUSH
69265: LD_VAR 0 1
69269: PUSH
69270: LD_VAR 0 4
69274: ARRAY
69275: PPUSH
69276: CALL_OW 2
69280: ST_TO_ADDR
// array := Delete ( array , index ) ;
69281: LD_ADDR_VAR 0 1
69285: PUSH
69286: LD_VAR 0 1
69290: PPUSH
69291: LD_VAR 0 4
69295: PPUSH
69296: CALL_OW 3
69300: ST_TO_ADDR
// end ;
69301: GO 69225
69303: POP
69304: POP
// end ;
69305: LD_VAR 0 2
69309: RET
// export function GetBaseMaterials ( base ) ; begin
69310: LD_INT 0
69312: PPUSH
// result := [ 0 , 0 , 0 ] ;
69313: LD_ADDR_VAR 0 2
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: LD_INT 0
69323: PUSH
69324: LD_INT 0
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: LIST
69331: ST_TO_ADDR
// if not base then
69332: LD_VAR 0 1
69336: NOT
69337: IFFALSE 69341
// exit ;
69339: GO 69390
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69341: LD_ADDR_VAR 0 2
69345: PUSH
69346: LD_VAR 0 1
69350: PPUSH
69351: LD_INT 1
69353: PPUSH
69354: CALL_OW 275
69358: PUSH
69359: LD_VAR 0 1
69363: PPUSH
69364: LD_INT 2
69366: PPUSH
69367: CALL_OW 275
69371: PUSH
69372: LD_VAR 0 1
69376: PPUSH
69377: LD_INT 3
69379: PPUSH
69380: CALL_OW 275
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: LIST
69389: ST_TO_ADDR
// end ;
69390: LD_VAR 0 2
69394: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69395: LD_INT 0
69397: PPUSH
69398: PPUSH
// result := array ;
69399: LD_ADDR_VAR 0 3
69403: PUSH
69404: LD_VAR 0 1
69408: ST_TO_ADDR
// if size > 0 then
69409: LD_VAR 0 2
69413: PUSH
69414: LD_INT 0
69416: GREATER
69417: IFFALSE 69463
// for i := array downto size do
69419: LD_ADDR_VAR 0 4
69423: PUSH
69424: DOUBLE
69425: LD_VAR 0 1
69429: INC
69430: ST_TO_ADDR
69431: LD_VAR 0 2
69435: PUSH
69436: FOR_DOWNTO
69437: IFFALSE 69461
// result := Delete ( result , result ) ;
69439: LD_ADDR_VAR 0 3
69443: PUSH
69444: LD_VAR 0 3
69448: PPUSH
69449: LD_VAR 0 3
69453: PPUSH
69454: CALL_OW 3
69458: ST_TO_ADDR
69459: GO 69436
69461: POP
69462: POP
// end ;
69463: LD_VAR 0 3
69467: RET
// export function ComExit ( unit ) ; var tmp ; begin
69468: LD_INT 0
69470: PPUSH
69471: PPUSH
// if not IsInUnit ( unit ) then
69472: LD_VAR 0 1
69476: PPUSH
69477: CALL_OW 310
69481: NOT
69482: IFFALSE 69486
// exit ;
69484: GO 69546
// tmp := IsInUnit ( unit ) ;
69486: LD_ADDR_VAR 0 3
69490: PUSH
69491: LD_VAR 0 1
69495: PPUSH
69496: CALL_OW 310
69500: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69501: LD_VAR 0 3
69505: PPUSH
69506: CALL_OW 247
69510: PUSH
69511: LD_INT 2
69513: EQUAL
69514: IFFALSE 69527
// ComExitVehicle ( unit ) else
69516: LD_VAR 0 1
69520: PPUSH
69521: CALL_OW 121
69525: GO 69536
// ComExitBuilding ( unit ) ;
69527: LD_VAR 0 1
69531: PPUSH
69532: CALL_OW 122
// result := tmp ;
69536: LD_ADDR_VAR 0 2
69540: PUSH
69541: LD_VAR 0 3
69545: ST_TO_ADDR
// end ;
69546: LD_VAR 0 2
69550: RET
// export function ResetHc ; begin
69551: LD_INT 0
69553: PPUSH
// InitHc ;
69554: CALL_OW 19
// hc_importance := 0 ;
69558: LD_ADDR_OWVAR 32
69562: PUSH
69563: LD_INT 0
69565: ST_TO_ADDR
// end ;
69566: LD_VAR 0 1
69570: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69571: LD_INT 0
69573: PPUSH
69574: PPUSH
69575: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69576: LD_ADDR_VAR 0 6
69580: PUSH
69581: LD_VAR 0 1
69585: PUSH
69586: LD_VAR 0 3
69590: PLUS
69591: PUSH
69592: LD_INT 2
69594: DIV
69595: ST_TO_ADDR
// if _x < 0 then
69596: LD_VAR 0 6
69600: PUSH
69601: LD_INT 0
69603: LESS
69604: IFFALSE 69621
// _x := _x * - 1 ;
69606: LD_ADDR_VAR 0 6
69610: PUSH
69611: LD_VAR 0 6
69615: PUSH
69616: LD_INT 1
69618: NEG
69619: MUL
69620: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69621: LD_ADDR_VAR 0 7
69625: PUSH
69626: LD_VAR 0 2
69630: PUSH
69631: LD_VAR 0 4
69635: PLUS
69636: PUSH
69637: LD_INT 2
69639: DIV
69640: ST_TO_ADDR
// if _y < 0 then
69641: LD_VAR 0 7
69645: PUSH
69646: LD_INT 0
69648: LESS
69649: IFFALSE 69666
// _y := _y * - 1 ;
69651: LD_ADDR_VAR 0 7
69655: PUSH
69656: LD_VAR 0 7
69660: PUSH
69661: LD_INT 1
69663: NEG
69664: MUL
69665: ST_TO_ADDR
// result := [ _x , _y ] ;
69666: LD_ADDR_VAR 0 5
69670: PUSH
69671: LD_VAR 0 6
69675: PUSH
69676: LD_VAR 0 7
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: ST_TO_ADDR
// end ;
69685: LD_VAR 0 5
69689: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69690: LD_INT 0
69692: PPUSH
69693: PPUSH
69694: PPUSH
69695: PPUSH
// task := GetTaskList ( unit ) ;
69696: LD_ADDR_VAR 0 7
69700: PUSH
69701: LD_VAR 0 1
69705: PPUSH
69706: CALL_OW 437
69710: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69711: LD_VAR 0 7
69715: NOT
69716: PUSH
69717: LD_VAR 0 1
69721: PPUSH
69722: LD_VAR 0 2
69726: PPUSH
69727: CALL_OW 308
69731: NOT
69732: AND
69733: IFFALSE 69737
// exit ;
69735: GO 69855
// if IsInArea ( unit , area ) then
69737: LD_VAR 0 1
69741: PPUSH
69742: LD_VAR 0 2
69746: PPUSH
69747: CALL_OW 308
69751: IFFALSE 69769
// begin ComMoveToArea ( unit , goAway ) ;
69753: LD_VAR 0 1
69757: PPUSH
69758: LD_VAR 0 3
69762: PPUSH
69763: CALL_OW 113
// exit ;
69767: GO 69855
// end ; if task [ 1 ] [ 1 ] <> M then
69769: LD_VAR 0 7
69773: PUSH
69774: LD_INT 1
69776: ARRAY
69777: PUSH
69778: LD_INT 1
69780: ARRAY
69781: PUSH
69782: LD_STRING M
69784: NONEQUAL
69785: IFFALSE 69789
// exit ;
69787: GO 69855
// x := task [ 1 ] [ 2 ] ;
69789: LD_ADDR_VAR 0 5
69793: PUSH
69794: LD_VAR 0 7
69798: PUSH
69799: LD_INT 1
69801: ARRAY
69802: PUSH
69803: LD_INT 2
69805: ARRAY
69806: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69807: LD_ADDR_VAR 0 6
69811: PUSH
69812: LD_VAR 0 7
69816: PUSH
69817: LD_INT 1
69819: ARRAY
69820: PUSH
69821: LD_INT 3
69823: ARRAY
69824: ST_TO_ADDR
// if InArea ( x , y , area ) then
69825: LD_VAR 0 5
69829: PPUSH
69830: LD_VAR 0 6
69834: PPUSH
69835: LD_VAR 0 2
69839: PPUSH
69840: CALL_OW 309
69844: IFFALSE 69855
// ComStop ( unit ) ;
69846: LD_VAR 0 1
69850: PPUSH
69851: CALL_OW 141
// end ;
69855: LD_VAR 0 4
69859: RET
// export function Abs ( value ) ; begin
69860: LD_INT 0
69862: PPUSH
// result := value ;
69863: LD_ADDR_VAR 0 2
69867: PUSH
69868: LD_VAR 0 1
69872: ST_TO_ADDR
// if value < 0 then
69873: LD_VAR 0 1
69877: PUSH
69878: LD_INT 0
69880: LESS
69881: IFFALSE 69898
// result := value * - 1 ;
69883: LD_ADDR_VAR 0 2
69887: PUSH
69888: LD_VAR 0 1
69892: PUSH
69893: LD_INT 1
69895: NEG
69896: MUL
69897: ST_TO_ADDR
// end ; end_of_file
69898: LD_VAR 0 2
69902: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69903: LD_VAR 0 1
69907: PUSH
69908: LD_INT 200
69910: DOUBLE
69911: GREATEREQUAL
69912: IFFALSE 69920
69914: LD_INT 299
69916: DOUBLE
69917: LESSEQUAL
69918: IFTRUE 69922
69920: GO 69954
69922: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69923: LD_VAR 0 1
69927: PPUSH
69928: LD_VAR 0 2
69932: PPUSH
69933: LD_VAR 0 3
69937: PPUSH
69938: LD_VAR 0 4
69942: PPUSH
69943: LD_VAR 0 5
69947: PPUSH
69948: CALL 29216 0 5
69952: GO 70031
69954: LD_INT 300
69956: DOUBLE
69957: GREATEREQUAL
69958: IFFALSE 69966
69960: LD_INT 399
69962: DOUBLE
69963: LESSEQUAL
69964: IFTRUE 69968
69966: GO 70030
69968: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69969: LD_VAR 0 1
69973: PPUSH
69974: LD_VAR 0 2
69978: PPUSH
69979: LD_VAR 0 3
69983: PPUSH
69984: LD_VAR 0 4
69988: PPUSH
69989: LD_VAR 0 5
69993: PPUSH
69994: LD_VAR 0 6
69998: PPUSH
69999: LD_VAR 0 7
70003: PPUSH
70004: LD_VAR 0 8
70008: PPUSH
70009: LD_VAR 0 9
70013: PPUSH
70014: LD_VAR 0 10
70018: PPUSH
70019: LD_VAR 0 11
70023: PPUSH
70024: CALL 27122 0 11
70028: GO 70031
70030: POP
// end ;
70031: PPOPN 11
70033: END
