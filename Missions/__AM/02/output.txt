// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10516 0 0
// PrepareRussianCommander ;
  44: CALL 12050 0 0
// PrepareSouthBase ;
  48: CALL 12146 0 0
// PrepareNorthBase ;
  52: CALL 12484 0 0
// PrepareOtherRussians ;
  56: CALL 12879 0 0
// PrepareHeroes ;
  60: CALL 10837 0 0
// PrepareLisSquad ;
  64: CALL 11207 0 0
// PrepareOtherAmericans ;
  68: CALL 11520 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 586
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 586
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11662 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 586
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11888 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 15211 0 0
// RussianTrap ;
6346: CALL 10215 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 13071 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6724: LD_EXP 20
6728: PUSH
6729: LD_EXP 15
6733: PUSH
6734: LD_EXP 16
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 52
6761: PUSH
6762: EMPTY
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 72
6774: AND
6775: IFFALSE 7108
6777: GO 6779
6779: DISABLE
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
// begin enable ;
6786: ENABLE
// for i in [ cargo1 , cargo2 ] do
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 15
6796: PUSH
6797: LD_EXP 16
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: FOR_IN
6807: IFFALSE 7106
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: CALL_OW 250
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: CALL_OW 251
6833: PPUSH
6834: LD_INT 6
6836: PPUSH
6837: CALL 76471 0 3
6841: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6842: LD_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL 77690 0 1
6856: PUSH
6857: LD_INT 4
6859: ARRAY
6860: PUSH
6861: LD_INT 60
6863: LESS
6864: AND
6865: IFFALSE 6904
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 1
6889: PUSH
6890: LD_INT 1
6892: ARRAY
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 117
6902: GO 7104
// if not IsInArea ( i , RemoveArea ) then
6904: LD_VAR 0 2
6908: PPUSH
6909: LD_INT 32
6911: PPUSH
6912: CALL_OW 308
6916: NOT
6917: IFFALSE 7065
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_VAR 0 2
6928: PPUSH
6929: CALL_OW 250
6933: PPUSH
6934: LD_INT 4
6936: PPUSH
6937: LD_INT 3
6939: PPUSH
6940: CALL_OW 272
6944: ST_TO_ADDR
// y := GetY ( i ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 251
6959: ST_TO_ADDR
// if HexInfo ( x , y ) then
6960: LD_VAR 0 3
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 428
6974: IFFALSE 6997
// x := ShiftX ( x , 4 , 3 ) ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 4
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 272
6996: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 428
7011: PUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 488
7026: NOT
7027: OR
7028: IFFALSE 7044
// ComMoveToArea ( i , RemoveArea ) else
7030: LD_VAR 0 2
7034: PPUSH
7035: LD_INT 32
7037: PPUSH
7038: CALL_OW 113
7042: GO 7063
// ComMoveXY ( i , x , y ) ;
7044: LD_VAR 0 2
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 111
// end else
7063: GO 7104
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 311
7074: PPUSH
7075: CALL_OW 64
// RemoveUnit ( i ) ;
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_EXP 20
7097: PUSH
7098: LD_INT 1
7100: PLUS
7101: ST_TO_ADDR
// continue ;
7102: GO 6806
// end ; end ;
7104: GO 6806
7106: POP
7107: POP
// end ;
7108: PPOPN 4
7110: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7111: LD_EXP 20
7115: PUSH
7116: LD_INT 1
7118: GREATER
7119: IFFALSE 7368
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7127: LD_INT 4
7129: PPUSH
7130: LD_INT 1
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7140: LD_INT 31
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: LD_INT 1
7148: PPUSH
7149: CALL_OW 324
// Hint ( Bunker ) ;
7153: LD_STRING Bunker
7155: PPUSH
7156: CALL_OW 339
// if IsOK ( Jerry ) then
7160: LD_EXP 7
7164: PPUSH
7165: CALL_OW 302
7169: IFFALSE 7185
// Say ( Jerry , D5a-Sol1-1 ) else
7171: LD_EXP 7
7175: PPUSH
7176: LD_STRING D5a-Sol1-1
7178: PPUSH
7179: CALL_OW 88
7183: GO 7271
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7185: LD_ADDR_VAR 0 1
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 26
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PUSH
7219: LD_EXP 1
7223: PUSH
7224: LD_EXP 2
7228: PUSH
7229: LD_EXP 3
7233: PUSH
7234: LD_EXP 5
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: DIFF
7245: ST_TO_ADDR
// if not speaker then
7246: LD_VAR 0 1
7250: NOT
7251: IFFALSE 7255
// exit ;
7253: GO 7368
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7255: LD_VAR 0 1
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PPUSH
7264: LD_STRING D5a-Sol1-1
7266: PPUSH
7267: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7271: LD_EXP 1
7275: PPUSH
7276: LD_STRING D5a-JMM-1
7278: PPUSH
7279: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7283: LD_INT 22
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 25
7298: PUSH
7299: LD_INT 2
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 70
7314: IFFALSE 7368
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7316: LD_INT 22
7318: PPUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 25
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_INT 31
7354: PPUSH
7355: LD_INT 44
7357: PPUSH
7358: LD_INT 13
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 145
// end ;
7368: PPOPN 1
7370: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 255
7378: PUSH
7379: LD_INT 3
7381: EQUAL
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: CALL_OW 256
7390: PUSH
7391: LD_INT 1000
7393: LESS
7394: AND
7395: PUSH
7396: LD_INT 10
7398: PPUSH
7399: CALL_OW 255
7403: PUSH
7404: LD_INT 3
7406: EQUAL
7407: PUSH
7408: LD_INT 10
7410: PPUSH
7411: CALL_OW 256
7415: PUSH
7416: LD_INT 1000
7418: LESS
7419: AND
7420: OR
7421: IFFALSE 7438
7423: GO 7425
7425: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D8-JMM-1
7433: PPUSH
7434: CALL_OW 88
7438: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: PUSH
7449: LD_INT 1
7451: EQUAL
7452: PUSH
7453: LD_EXP 22
7457: PUSH
7458: LD_INT 3
7460: EQUAL
7461: NOT
7462: AND
7463: IFFALSE 7485
7465: GO 7467
7467: DISABLE
// begin enable ;
7468: ENABLE
// mikhailInBase = 1 ;
7469: LD_ADDR_EXP 22
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// mikhailStatus = 1 ;
7477: LD_ADDR_EXP 21
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ;
7485: END
// export function AskMikhail ; begin
7486: LD_INT 0
7488: PPUSH
// case Query ( QMikh2 ) of 1 :
7489: LD_STRING QMikh2
7491: PPUSH
7492: CALL_OW 97
7496: PUSH
7497: LD_INT 1
7499: DOUBLE
7500: EQUAL
7501: IFTRUE 7505
7503: GO 7572
7505: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7506: LD_INT 1
7508: PPUSH
7509: LD_INT 6
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 1
7517: PPUSH
7518: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7522: LD_EXP 8
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7534: LD_EXP 8
7538: PPUSH
7539: CALL_OW 122
// wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7550: LD_EXP 8
7554: PPUSH
7555: LD_INT 17
7557: PPUSH
7558: CALL_OW 113
// mikhailInbase = 0 ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// end ; 2 :
7570: GO 7813
7572: LD_INT 2
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7753
7580: POP
// begin mikhailInBase = 2 ;
7581: LD_ADDR_EXP 22
7585: PUSH
7586: LD_INT 2
7588: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 6
7596: PPUSH
7597: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7601: LD_EXP 8
7605: PPUSH
7606: CALL_OW 122
// wait ( 0 0$1 ) ;
7610: LD_INT 35
7612: PPUSH
7613: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7617: LD_EXP 8
7621: PPUSH
7622: LD_EXP 8
7626: PPUSH
7627: CALL_OW 250
7631: PUSH
7632: LD_INT 2
7634: PLUS
7635: PPUSH
7636: LD_EXP 8
7640: PPUSH
7641: CALL_OW 251
7645: PUSH
7646: LD_INT 2
7648: PLUS
7649: PPUSH
7650: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7654: LD_EXP 8
7658: PPUSH
7659: LD_EXP 8
7663: PPUSH
7664: CALL_OW 250
7668: PUSH
7669: LD_INT 1
7671: PLUS
7672: PPUSH
7673: LD_EXP 8
7677: PPUSH
7678: CALL_OW 251
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PPUSH
7687: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7691: LD_EXP 8
7695: PPUSH
7696: LD_EXP 8
7700: PPUSH
7701: CALL_OW 250
7705: PUSH
7706: LD_INT 2
7708: PLUS
7709: PPUSH
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 251
7719: PPUSH
7720: CALL_OW 171
// wait ( 0 0$5 ) ;
7724: LD_INT 175
7726: PPUSH
7727: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7731: LD_EXP 8
7735: PPUSH
7736: LD_INT 25
7738: PPUSH
7739: CALL_OW 113
// mikhailInBase = 4 ;
7743: LD_ADDR_EXP 22
7747: PUSH
7748: LD_INT 4
7750: ST_TO_ADDR
// end ; 3 :
7751: GO 7813
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7812
7761: POP
// begin SetSide ( Mikhail , 6 ) ;
7762: LD_EXP 8
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7774: LD_EXP 8
7778: PPUSH
7779: CALL_OW 122
// wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7790: LD_EXP 8
7794: PPUSH
7795: LD_INT 17
7797: PPUSH
7798: CALL_OW 113
// mikhailInbase = 3 ;
7802: LD_ADDR_EXP 22
7806: PUSH
7807: LD_INT 3
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7813
7812: POP
// end ;
7813: LD_VAR 0 1
7817: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7818: LD_EXP 8
7822: PPUSH
7823: LD_INT 25
7825: PPUSH
7826: CALL_OW 308
7830: PUSH
7831: LD_EXP 22
7835: PUSH
7836: LD_INT 4
7838: EQUAL
7839: AND
7840: IFFALSE 7944
7842: GO 7844
7844: DISABLE
// begin enable ;
7845: ENABLE
// mikhailInBase = 1 ;
7846: LD_ADDR_EXP 22
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// InGameOn ;
7854: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 6
7863: PPUSH
7864: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7868: LD_INT 35
7870: PPUSH
7871: CALL_OW 67
// if Carry ( Mikhail ) then
7875: LD_EXP 8
7879: PPUSH
7880: CALL_OW 281
7884: IFFALSE 7895
// ComUnload ( Mikhail ) ;
7886: LD_EXP 8
7890: PPUSH
7891: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7895: LD_EXP 8
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7907: LD_EXP 8
7911: PPUSH
7912: CALL_OW 310
7916: IFFALSE 7868
// SetSide ( dep1 , 1 ) ;
7918: LD_INT 1
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7928: LD_EXP 8
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: CALL_OW 235
// InGameOff ;
7940: CALL_OW 9
// end ;
7944: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7945: LD_EXP 8
7949: PPUSH
7950: CALL_OW 310
7954: PUSH
7955: LD_EXP 22
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: NOT
7964: AND
7965: IFFALSE 8100
7967: GO 7969
7969: DISABLE
// begin enable ;
7970: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7971: LD_INT 22
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 91
7993: PUSH
7994: LD_EXP 8
7998: PPUSH
7999: CALL_OW 310
8003: PUSH
8004: LD_INT 10
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: PUSH
8022: LD_INT 1
8024: EQUAL
8025: IFFALSE 8100
// begin mikhailStatus = 4 ;
8027: LD_ADDR_EXP 21
8031: PUSH
8032: LD_INT 4
8034: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 6
8040: PPUSH
8041: LD_INT 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8051: LD_EXP 8
8055: PPUSH
8056: LD_INT 6
8058: PPUSH
8059: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8063: LD_EXP 8
8067: PPUSH
8068: CALL_OW 122
// wait ( 0 0$1 ) ;
8072: LD_INT 35
8074: PPUSH
8075: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8079: LD_EXP 8
8083: PPUSH
8084: LD_INT 17
8086: PPUSH
8087: CALL_OW 113
// mikhailStatus = 3 ;
8091: LD_ADDR_EXP 21
8095: PUSH
8096: LD_INT 3
8098: ST_TO_ADDR
// disable ;
8099: DISABLE
// end ; end ;
8100: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8101: LD_EXP 1
8105: PPUSH
8106: LD_EXP 23
8110: PPUSH
8111: CALL_OW 296
8115: PUSH
8116: LD_INT 5
8118: LESS
8119: PUSH
8120: LD_EXP 21
8124: PUSH
8125: LD_INT 3
8127: EQUAL
8128: AND
8129: PUSH
8130: LD_EXP 22
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: NOT
8139: AND
8140: IFFALSE 8371
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 26
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: PUSH
8193: LD_EXP 1
8197: PUSH
8198: LD_EXP 5
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: DIFF
8207: ST_TO_ADDR
// if not tmp then
8208: LD_VAR 0 1
8212: NOT
8213: IFFALSE 8217
// exit ;
8215: GO 8371
// DialogueOn ;
8217: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8221: LD_EXP 1
8225: PPUSH
8226: LD_STRING D7-JMM-1
8228: PPUSH
8229: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8233: LD_VAR 0 1
8237: PUSH
8238: LD_INT 1
8240: ARRAY
8241: PPUSH
8242: LD_STRING D7-Sol1-1
8244: PPUSH
8245: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8249: LD_EXP 1
8253: PPUSH
8254: LD_STRING D7-JMM-2
8256: PPUSH
8257: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8261: LD_VAR 0 1
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_STRING D7-Sol1-2
8272: PPUSH
8273: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8277: LD_EXP 1
8281: PPUSH
8282: LD_STRING D7-JMM-3
8284: PPUSH
8285: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8289: LD_VAR 0 1
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: LD_STRING D7-Sol1-3
8300: PPUSH
8301: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8305: LD_EXP 3
8309: PPUSH
8310: CALL_OW 302
8314: PUSH
8315: LD_EXP 4
8319: PPUSH
8320: CALL_OW 302
8324: AND
8325: IFFALSE 8367
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8327: LD_EXP 3
8331: PPUSH
8332: LD_STRING D7-Cyrus-3
8334: PPUSH
8335: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8339: LD_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_STRING D7-Sol1-4
8350: PPUSH
8351: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8355: LD_EXP 4
8359: PPUSH
8360: LD_STRING D7-Lisa-4
8362: PPUSH
8363: CALL_OW 88
// end ; DialogueOff ;
8367: CALL_OW 7
// end ;
8371: PPOPN 1
8373: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8374: LD_EXP 8
8378: PPUSH
8379: CALL_OW 303
8383: PUSH
8384: LD_EXP 21
8388: PUSH
8389: LD_INT 3
8391: EQUAL
8392: AND
8393: IFFALSE 8407
8395: GO 8397
8397: DISABLE
// begin enable ;
8398: ENABLE
// mikhailStatus = 2 ;
8399: LD_ADDR_EXP 21
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// end ;
8407: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8408: LD_EXP 8
8412: PPUSH
8413: LD_INT 17
8415: PPUSH
8416: CALL_OW 308
8420: PUSH
8421: LD_EXP 8
8425: PPUSH
8426: CALL_OW 255
8430: PUSH
8431: LD_INT 6
8433: EQUAL
8434: AND
8435: IFFALSE 8468
8437: GO 8439
8439: DISABLE
// begin if not mikhailInBase = 3 then
8440: LD_EXP 22
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: NOT
8449: IFFALSE 8459
// mikhailStatus = 3 ;
8451: LD_ADDR_EXP 21
8455: PUSH
8456: LD_INT 3
8458: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8459: LD_EXP 8
8463: PPUSH
8464: CALL_OW 64
// end ;
8468: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8469: LD_EXP 21
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: PUSH
8478: LD_EXP 8
8482: PPUSH
8483: CALL_OW 255
8487: PUSH
8488: LD_INT 6
8490: EQUAL
8491: AND
8492: IFFALSE 8658
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
// begin enable ;
8501: ENABLE
// if IsOk ( Mikhail ) then
8502: LD_EXP 8
8506: PPUSH
8507: CALL_OW 302
8511: IFFALSE 8658
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8513: LD_ADDR_VAR 0 2
8517: PUSH
8518: LD_EXP 8
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PPUSH
8552: CALL 10407 0 2
8556: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_EXP 8
8566: PPUSH
8567: CALL_OW 296
8571: PUSH
8572: LD_INT 8
8574: LESS
8575: IFFALSE 8658
// begin if GetSex ( attacker ) = sex_male then
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 258
8586: PUSH
8587: LD_INT 1
8589: EQUAL
8590: IFFALSE 8626
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-Sol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-Sol1-1a
8619: PPUSH
8620: CALL_OW 88
// end else
8624: GO 8658
// begin disable ;
8626: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_STRING D7a-FSol1-1
8634: PPUSH
8635: CALL_OW 88
// wait ( 0 0$2 ) ;
8639: LD_INT 70
8641: PPUSH
8642: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: LD_STRING D7a-FSol1-1a
8653: PPUSH
8654: CALL_OW 88
// end ; end ; end ; end ;
8658: PPOPN 2
8660: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8661: LD_EXP 27
8665: PUSH
8666: LD_INT 1
8668: EQUAL
8669: PUSH
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 70
8701: PUSH
8702: LD_INT 2
8704: GREATER
8705: AND
8706: PUSH
8707: LD_INT 22
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 59
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: PUSH
8753: LD_INT 0
8755: EQUAL
8756: AND
8757: IFFALSE 8772
8759: GO 8761
8761: DISABLE
// SetSide ( dep1 , 3 ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 3
8767: PPUSH
8768: CALL_OW 235
8772: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8773: LD_EXP 30
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 14
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: AND
8815: IFFALSE 8916
8817: GO 8819
8819: DISABLE
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_INT 22
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 21
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 23
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// for i in tmp do
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: FOR_IN
8880: IFFALSE 8907
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 4
8892: PPUSH
8893: CALL_OW 12
8897: PPUSH
8898: LD_INT 300
8900: PPUSH
8901: CALL_OW 492
8905: GO 8879
8907: POP
8908: POP
// SetAchievement ( ACH_TIGER ) ;
8909: LD_STRING ACH_TIGER
8911: PPUSH
8912: CALL_OW 543
// end ;
8916: PPOPN 2
8918: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 51
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 2
8950: GREATEREQUAL
8951: IFFALSE 8963
8953: GO 8955
8955: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8956: LD_STRING ACH_CARGO
8958: PPUSH
8959: CALL_OW 543
8963: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
// for i = 1 to count do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_VAR 0 6
8983: PUSH
8984: FOR_TO
8985: IFFALSE 9066
// begin uc_side = side ;
8987: LD_ADDR_OWVAR 20
8991: PUSH
8992: LD_VAR 0 1
8996: ST_TO_ADDR
// uc_nation = nation ;
8997: LD_ADDR_OWVAR 21
9001: PUSH
9002: LD_VAR 0 2
9006: ST_TO_ADDR
// hc_gallery =  ;
9007: LD_ADDR_OWVAR 33
9011: PUSH
9012: LD_STRING 
9014: ST_TO_ADDR
// hc_name =  ;
9015: LD_ADDR_OWVAR 26
9019: PUSH
9020: LD_STRING 
9022: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: LD_VAR 0 4
9035: PPUSH
9036: CALL_OW 380
// un = CreateHuman ;
9040: LD_ADDR_VAR 0 9
9044: PUSH
9045: CALL_OW 44
9049: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 52
// end ;
9064: GO 8984
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 7
9072: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
// uc_side := GetSide ( b ) ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 255
9092: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9093: LD_ADDR_OWVAR 21
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 248
9107: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9108: LD_INT 0
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 380
// un = CreateHuman ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: CALL_OW 44
9132: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9133: LD_ADDR_VAR 0 5
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 254
9147: PUSH
9148: LD_INT 3
9150: MINUS
9151: ST_TO_ADDR
// if dir < 0 then
9152: LD_VAR 0 5
9156: PUSH
9157: LD_INT 0
9159: LESS
9160: IFFALSE 9176
// dir := 6 + dir ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_INT 6
9169: PUSH
9170: LD_VAR 0 5
9174: PLUS
9175: ST_TO_ADDR
// SetDir ( un , dir ) ;
9176: LD_VAR 0 4
9180: PPUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9190: LD_VAR 0 4
9194: PPUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 52
// end ;
9204: LD_VAR 0 3
9208: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_VAR 0 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 1000
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: PPUSH
9319: CALL_OW 70
9323: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9324: LD_VAR 0 5
9328: NOT
9329: PUSH
9330: LD_VAR 0 7
9334: NOT
9335: AND
9336: IFFALSE 9340
// exit ;
9338: GO 9536
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9340: LD_VAR 0 5
9344: NOT
9345: PUSH
9346: LD_VAR 0 7
9350: PPUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 54
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: AND
9369: PUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: CALL_OW 302
9379: AND
9380: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 3
9389: PUSH
9390: LD_INT 54
9392: PUSH
9393: EMPTY
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 72
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL_OW 120
// if buildingsList then
9414: LD_VAR 0 5
9418: IFFALSE 9536
// begin for i in engineerOkList do
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_VAR 0 7
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9534
// if IsInUnit ( i ) then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 310
9442: IFFALSE 9455
// ComExitBuilding ( i ) else
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 122
9453: GO 9532
// if GetLives ( i ) > 650 then
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 256
9464: PUSH
9465: LD_INT 650
9467: GREATER
9468: IFFALSE 9496
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_VAR 0 6
9484: PPUSH
9485: CALL_OW 74
9489: PPUSH
9490: CALL_OW 130
9494: GO 9532
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 56
9503: PPUSH
9504: LD_INT 10
9506: PPUSH
9507: CALL_OW 297
9511: PUSH
9512: LD_INT 8
9514: GREATER
9515: IFFALSE 9532
// ComMoveXY ( i , 56 , 10 ) ;
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 56
9524: PPUSH
9525: LD_INT 10
9527: PPUSH
9528: CALL_OW 111
9532: GO 9430
9534: POP
9535: POP
// end ; end ;
9536: LD_VAR 0 4
9540: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_VAR 0 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 24
9576: PUSH
9577: LD_INT 250
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9594: LD_ADDR_VAR 0 8
9598: PUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_INT 22
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 650
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 70
9652: ST_TO_ADDR
// if not damageUnits and not sciList then
9653: LD_VAR 0 8
9657: NOT
9658: PUSH
9659: LD_VAR 0 6
9663: NOT
9664: AND
9665: IFFALSE 9669
// exit ;
9667: GO 9808
// if damageUnits then
9669: LD_VAR 0 8
9673: IFFALSE 9752
// begin for i in sciList do
9675: LD_ADDR_VAR 0 7
9679: PUSH
9680: LD_VAR 0 6
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9748
// if IsInUnit ( i ) then
9688: LD_VAR 0 7
9692: PPUSH
9693: CALL_OW 310
9697: IFFALSE 9710
// ComExitBuilding ( i ) else
9699: LD_VAR 0 7
9703: PPUSH
9704: CALL_OW 122
9708: GO 9746
// if not HasTask ( i ) then
9710: LD_VAR 0 7
9714: PPUSH
9715: CALL_OW 314
9719: NOT
9720: IFFALSE 9746
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: LD_VAR 0 8
9731: PPUSH
9732: LD_VAR 0 7
9736: PPUSH
9737: CALL_OW 74
9741: PPUSH
9742: CALL_OW 128
9746: GO 9685
9748: POP
9749: POP
// end else
9750: GO 9808
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9752: LD_VAR 0 6
9756: PPUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 54
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 72
9774: IFFALSE 9808
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9776: LD_VAR 0 6
9780: PPUSH
9781: LD_INT 3
9783: PUSH
9784: LD_INT 54
9786: PUSH
9787: EMPTY
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 72
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 120
// end ;
9808: LD_VAR 0 5
9812: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// if not defendersList then
9819: LD_VAR 0 3
9823: NOT
9824: IFFALSE 9828
// exit ;
9826: GO 10210
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9828: LD_ADDR_VAR 0 7
9832: PUSH
9833: LD_VAR 0 1
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 70
9886: ST_TO_ADDR
// if enemy then
9887: LD_VAR 0 7
9891: IFFALSE 10112
// begin for i in defendersList do
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 3
9902: PUSH
9903: FOR_IN
9904: IFFALSE 10108
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9906: LD_VAR 0 6
9910: PPUSH
9911: CALL_OW 310
9915: PUSH
9916: LD_VAR 0 6
9920: PPUSH
9921: CALL_OW 256
9925: PUSH
9926: LD_INT 500
9928: GREATER
9929: AND
9930: IFFALSE 9943
// ComExitBuilding ( i ) else
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 122
9941: GO 10106
// if GetLives ( i ) > 650 then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 256
9952: PUSH
9953: LD_INT 650
9955: GREATER
9956: IFFALSE 10009
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9958: LD_ADDR_VAR 0 8
9962: PUSH
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 6
9972: PPUSH
9973: CALL_OW 74
9977: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9978: LD_VAR 0 6
9982: PPUSH
9983: LD_VAR 0 8
9987: PPUSH
9988: CALL_OW 250
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: CALL_OW 251
10002: PPUSH
10003: CALL_OW 114
// end else
10007: GO 10106
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10009: LD_INT 22
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: IFFALSE 10077
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10039: LD_VAR 0 6
10043: PPUSH
10044: LD_INT 56
10046: PPUSH
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 297
10054: PUSH
10055: LD_INT 8
10057: GREATER
10058: IFFALSE 10075
// ComMoveXY ( i , 56 , 10 ) ;
10060: LD_VAR 0 6
10064: PPUSH
10065: LD_INT 56
10067: PPUSH
10068: LD_INT 10
10070: PPUSH
10071: CALL_OW 111
// end else
10075: GO 10106
// if GetLives ( i ) <= 500 then
10077: LD_VAR 0 6
10081: PPUSH
10082: CALL_OW 256
10086: PUSH
10087: LD_INT 500
10089: LESSEQUAL
10090: IFFALSE 10106
// ComEnterUnit ( i , building ) ;
10092: LD_VAR 0 6
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: CALL_OW 120
// end ;
10106: GO 9903
10108: POP
10109: POP
// end else
10110: GO 10210
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 56
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 60
10128: PUSH
10129: EMPTY
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 1000
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PPUSH
10151: CALL_OW 72
10155: IFFALSE 10210
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 56
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: EMPTY
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 1000
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 4
10205: PPUSH
10206: CALL_OW 120
// end ;
10210: LD_VAR 0 5
10214: RET
// export function RussianTrap ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// if GetSide ( Brian ) = 4 then
10219: LD_EXP 6
10223: PPUSH
10224: CALL_OW 255
10228: PUSH
10229: LD_INT 4
10231: EQUAL
10232: IFFALSE 10255
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10234: LD_EXP 6
10238: PUSH
10239: LD_EXP 7
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: LD_INT 0
10250: PPUSH
10251: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10400
// begin ComExitBuilding ( i ) ;
10292: LD_VAR 0 2
10296: PPUSH
10297: CALL_OW 122
// wait ( 0 0$1 ) ;
10301: LD_INT 35
10303: PPUSH
10304: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10308: LD_VAR 0 2
10312: PPUSH
10313: LD_INT 120
10315: PPUSH
10316: LD_INT 56
10318: PPUSH
10319: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10323: LD_VAR 0 2
10327: PPUSH
10328: LD_INT 111
10330: PPUSH
10331: LD_INT 37
10333: PPUSH
10334: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10338: LD_INT 33
10340: PPUSH
10341: CALL_OW 255
10345: PUSH
10346: LD_INT 3
10348: EQUAL
10349: PUSH
10350: LD_INT 33
10352: PPUSH
10353: CALL_OW 302
10357: AND
10358: IFFALSE 10374
// AddComEnterUnit ( i , arm2 ) else
10360: LD_VAR 0 2
10364: PPUSH
10365: LD_INT 33
10367: PPUSH
10368: CALL_OW 180
10372: GO 10398
// begin AddComCrawl ( i ) ;
10374: LD_VAR 0 2
10378: PPUSH
10379: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_INT 109
10390: PPUSH
10391: LD_INT 30
10393: PPUSH
10394: CALL_OW 174
// end ; end ;
10398: GO 10289
10400: POP
10401: POP
// end ;
10402: LD_VAR 0 1
10406: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// nearestDist := 1000 ;
10414: LD_ADDR_VAR 0 4
10418: PUSH
10419: LD_INT 1000
10421: ST_TO_ADDR
// nearestUn := un ;
10422: LD_ADDR_VAR 0 5
10426: PUSH
10427: LD_VAR 0 1
10431: ST_TO_ADDR
// for sold in units do
10432: LD_ADDR_VAR 0 6
10436: PUSH
10437: LD_VAR 0 2
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10499
// begin dist := GetDistUnits ( un , sold ) ;
10445: LD_ADDR_VAR 0 7
10449: PUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 296
10464: ST_TO_ADDR
// if dist < nearestDist then
10465: LD_VAR 0 7
10469: PUSH
10470: LD_VAR 0 4
10474: LESS
10475: IFFALSE 10497
// begin nearestUn := sold ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 6
10486: ST_TO_ADDR
// nearestDist := dist ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_VAR 0 7
10496: ST_TO_ADDR
// end ; end ;
10497: GO 10442
10499: POP
10500: POP
// result := NearestUn ;
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_VAR 0 5
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function PrepareDifficulty ; begin
10516: LD_INT 0
10518: PPUSH
// if Difficulty = 1 then
10519: LD_OWVAR 67
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10590
// begin RemoveUnit ( brw2 ) ;
10529: LD_INT 9
10531: PPUSH
10532: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10536: LD_INT 30
10538: PPUSH
10539: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10543: LD_INT 52
10545: PPUSH
10546: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10550: LD_INT 63
10552: PPUSH
10553: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10557: LD_INT 5
10559: PUSH
10560: LD_INT 4
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: LD_INT 60
10569: PPUSH
10570: CALL_OW 240
// RuSoldMinLevel = 0 ;
10574: LD_ADDR_EXP 13
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10582: LD_ADDR_EXP 14
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// end ; if Difficulty = 2 then
10590: LD_OWVAR 67
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: IFFALSE 10640
// begin RemoveUnit ( brw4 ) ;
10600: LD_INT 52
10602: PPUSH
10603: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10607: LD_INT 5
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: LD_INT 50
10619: PPUSH
10620: CALL_OW 240
// RuSoldMinLevel = 1 ;
10624: LD_ADDR_EXP 13
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10632: LD_ADDR_EXP 14
10636: PUSH
10637: LD_INT 2
10639: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10640: LD_OWVAR 67
10644: PUSH
10645: LD_INT 3
10647: GREATEREQUAL
10648: IFFALSE 10683
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10650: LD_INT 5
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: LD_INT 40
10662: PPUSH
10663: CALL_OW 240
// RuSoldMinLevel = 2 ;
10667: LD_ADDR_EXP 13
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10675: LD_ADDR_EXP 14
10679: PUSH
10680: LD_INT 3
10682: ST_TO_ADDR
// end ; end ;
10683: LD_VAR 0 1
10687: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not vehicles then
10693: LD_VAR 0 1
10697: NOT
10698: IFFALSE 10702
// exit ;
10700: GO 10832
// tmp := [ ] ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: EMPTY
10708: ST_TO_ADDR
// for i in vehicles do
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_VAR 0 1
10718: PUSH
10719: FOR_IN
10720: IFFALSE 10816
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_VAR 0 5
10731: PPUSH
10732: LD_VAR 0 5
10736: PUSH
10737: LD_INT 1
10739: PLUS
10740: PPUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 265
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 262
10760: PUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL_OW 263
10770: PUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 264
10780: PUSH
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 261
10790: PUSH
10791: LD_VAR 0 4
10795: PPUSH
10796: CALL_OW 256
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
10814: GO 10719
10816: POP
10817: POP
// SaveVariable ( tmp , ident ) ;
10818: LD_VAR 0 5
10822: PPUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: CALL_OW 39
// end ; end_of_file
10832: LD_VAR 0 3
10836: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
10841: PPUSH
// prefix := 01_ ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_STRING 01_
10849: ST_TO_ADDR
// uc_side := 1 ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10858: LD_ADDR_EXP 1
10862: PUSH
10863: LD_STRING JMM
10865: PPUSH
10866: LD_EXP 34
10870: NOT
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: CALL 36657 0 3
10881: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_STRING 01_JMMLifePoints_1
10889: PPUSH
10890: LD_INT 1000
10892: PPUSH
10893: CALL_OW 30
10897: ST_TO_ADDR
// if plive < 250 then
10898: LD_VAR 0 2
10902: PUSH
10903: LD_INT 250
10905: LESS
10906: IFFALSE 10916
// plive := 300 ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 300
10915: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10916: LD_EXP 1
10920: PPUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10930: LD_ADDR_EXP 9
10934: PUSH
10935: LD_STRING Powell
10937: PPUSH
10938: CALL_OW 25
10942: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10943: LD_ADDR_EXP 2
10947: PUSH
10948: LD_STRING Bobby
10950: PPUSH
10951: LD_EXP 34
10955: NOT
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 36657 0 3
10966: ST_TO_ADDR
// if Bobby then
10967: LD_EXP 2
10971: IFFALSE 11021
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_STRING 01_BobbyLifePoints_1
10980: PPUSH
10981: LD_INT 1000
10983: PPUSH
10984: CALL_OW 30
10988: ST_TO_ADDR
// if plive < 250 then
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 250
10996: LESS
10997: IFFALSE 11007
// plive := 300 ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_INT 300
11006: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11007: LD_EXP 2
11011: PPUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11021: LD_ADDR_EXP 3
11025: PUSH
11026: LD_STRING Cyrus
11028: PPUSH
11029: LD_EXP 34
11033: NOT
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: CALL 36657 0 3
11044: ST_TO_ADDR
// if Cyrus then
11045: LD_EXP 3
11049: IFFALSE 11099
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11051: LD_ADDR_VAR 0 2
11055: PUSH
11056: LD_STRING 01_CyrusLifePoints_1
11058: PPUSH
11059: LD_INT 1000
11061: PPUSH
11062: CALL_OW 30
11066: ST_TO_ADDR
// if plive < 250 then
11067: LD_VAR 0 2
11071: PUSH
11072: LD_INT 250
11074: LESS
11075: IFFALSE 11085
// plive := 300 ;
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_INT 300
11084: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11085: LD_EXP 3
11089: PPUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11099: LD_ADDR_EXP 5
11103: PUSH
11104: LD_STRING Khatam
11106: PPUSH
11107: CALL_OW 25
11111: ST_TO_ADDR
// uc_side := 4 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 4
11119: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11120: LD_ADDR_EXP 4
11124: PUSH
11125: LD_STRING Lisa
11127: PPUSH
11128: CALL_OW 25
11132: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_INT 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11148: LD_EXP 2
11152: PPUSH
11153: LD_INT 3
11155: PPUSH
11156: LD_INT 0
11158: PPUSH
11159: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11163: LD_EXP 3
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: LD_INT 0
11173: PPUSH
11174: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11178: LD_EXP 4
11182: PPUSH
11183: LD_INT 5
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// ComCrawl ( Lisa ) ;
11193: LD_EXP 4
11197: PPUSH
11198: CALL_OW 137
// end ;
11202: LD_VAR 0 1
11206: RET
// export function PrepareLisSquad ; var i , un ; begin
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
11211: PPUSH
// uc_side := 4 ;
11212: LD_ADDR_OWVAR 20
11216: PUSH
11217: LD_INT 4
11219: ST_TO_ADDR
// uc_nation := 1 ;
11220: LD_ADDR_OWVAR 21
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// hc_class := 2 ;
11228: LD_ADDR_OWVAR 28
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// hc_sex := sex_male ;
11236: LD_ADDR_OWVAR 27
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// hc_gallery :=  ;
11244: LD_ADDR_OWVAR 33
11248: PUSH
11249: LD_STRING 
11251: ST_TO_ADDR
// hc_name :=  ;
11252: LD_ADDR_OWVAR 26
11256: PUSH
11257: LD_STRING 
11259: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11260: LD_ADDR_OWVAR 30
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 0
11273: PUSH
11274: LD_INT 0
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11283: LD_ADDR_OWVAR 31
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// un := CreateHuman ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: CALL_OW 44
11315: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 6
11323: PPUSH
11324: LD_INT 0
11326: PPUSH
11327: CALL_OW 49
// hc_sex := sex_female ;
11331: LD_ADDR_OWVAR 27
11335: PUSH
11336: LD_INT 2
11338: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11339: LD_ADDR_OWVAR 30
11343: PUSH
11344: LD_INT 0
11346: PUSH
11347: LD_INT 0
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11362: LD_ADDR_OWVAR 31
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 0
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// un := CreateHuman ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 6
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// if not Bobby and not Cyrus then
11410: LD_EXP 2
11414: NOT
11415: PUSH
11416: LD_EXP 3
11420: NOT
11421: AND
11422: IFFALSE 11511
// begin hc_class := 1 ;
11424: LD_ADDR_OWVAR 28
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// hc_sex := sex_male ;
11432: LD_ADDR_OWVAR 27
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11440: LD_ADDR_OWVAR 30
11444: PUSH
11445: LD_INT 2
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11463: LD_ADDR_OWVAR 31
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: ST_TO_ADDR
// un := CreateHuman ;
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: CALL_OW 44
11495: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 31
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 49
// end ; InitHc ;
11511: CALL_OW 19
// end ;
11515: LD_VAR 0 1
11519: RET
// export function PrepareOtherAmericans ; begin
11520: LD_INT 0
11522: PPUSH
// uc_side := 4 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 4
11530: ST_TO_ADDR
// uc_nation := 1 ;
11531: LD_ADDR_OWVAR 21
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// hc_gallery :=  ;
11539: LD_ADDR_OWVAR 33
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// hc_name := Tom Garvin ;
11547: LD_ADDR_OWVAR 26
11551: PUSH
11552: LD_STRING Tom Garvin
11554: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11555: LD_INT 1
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 380
// Brian := CreateHuman ;
11568: LD_ADDR_EXP 6
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11578: LD_EXP 6
11582: PPUSH
11583: LD_INT 10
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 49
// hc_name := Jerry White ;
11593: LD_ADDR_OWVAR 26
11597: PUSH
11598: LD_STRING Jerry White
11600: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11601: LD_INT 1
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 380
// Jerry := CreateHuman ;
11614: LD_ADDR_EXP 7
11618: PUSH
11619: CALL_OW 44
11623: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11624: LD_EXP 7
11628: PPUSH
11629: LD_INT 10
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11639: LD_EXP 6
11643: PUSH
11644: LD_EXP 7
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 140
// end ;
11657: LD_VAR 0 1
11661: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11668: LD_ADDR_VAR 0 4
11672: PUSH
11673: LD_INT 16
11675: PPUSH
11676: LD_INT 0
11678: PPUSH
11679: CALL_OW 517
11683: ST_TO_ADDR
// for i = 1 to 6 do
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_INT 6
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11844
// begin uc_side := 4 ;
11700: LD_ADDR_OWVAR 20
11704: PUSH
11705: LD_INT 4
11707: ST_TO_ADDR
// uc_nation := 1 ;
11708: LD_ADDR_OWVAR 21
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// hc_gallery :=  ;
11716: LD_ADDR_OWVAR 33
11720: PUSH
11721: LD_STRING 
11723: ST_TO_ADDR
// hc_name :=  ;
11724: LD_ADDR_OWVAR 26
11728: PUSH
11729: LD_STRING 
11731: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: LD_INT 4
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_INT 3
11756: MOD
11757: PUSH
11758: LD_INT 1
11760: PLUS
11761: ARRAY
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 380
// un := CreateHuman ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: CALL_OW 44
11779: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: CALL_OW 12
11795: PPUSH
11796: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_VAR 0 4
11809: PUSH
11810: LD_INT 1
11812: ARRAY
11813: PUSH
11814: LD_VAR 0 2
11818: ARRAY
11819: PPUSH
11820: LD_VAR 0 4
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PUSH
11829: LD_VAR 0 2
11833: ARRAY
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 601
// end ;
11842: GO 11697
11844: POP
11845: POP
// DyingSold := CreateHuman ;
11846: LD_ADDR_EXP 35
11850: PUSH
11851: CALL_OW 44
11855: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11856: LD_EXP 35
11860: PPUSH
11861: LD_INT 16
11863: PPUSH
11864: LD_INT 0
11866: PPUSH
11867: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11871: LD_EXP 35
11875: PPUSH
11876: LD_INT 250
11878: PPUSH
11879: CALL_OW 234
// end ; end_of_file
11883: LD_VAR 0 1
11887: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 2
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: LD_INT 56
11935: PUSH
11936: EMPTY
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: PUSH
11951: LD_EXP 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: DIFF
11959: ST_TO_ADDR
// if not tmp then
11960: LD_VAR 0 2
11964: NOT
11965: IFFALSE 11969
// exit ;
11967: GO 12045
// uc_side = 6 ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_INT 6
11976: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11977: LD_ADDR_EXP 8
11981: PUSH
11982: LD_STRING Mikhail
11984: PPUSH
11985: CALL_OW 25
11989: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11990: LD_EXP 8
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12002: LD_EXP 8
12006: PPUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: CALL_OW 250
12020: PPUSH
12021: LD_VAR 0 2
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 251
12034: PPUSH
12035: LD_INT 5
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 50
// end ;
12045: LD_VAR 0 1
12049: RET
// export function PrepareRussianCommander ; begin
12050: LD_INT 0
12052: PPUSH
// uc_side = 3 ;
12053: LD_ADDR_OWVAR 20
12057: PUSH
12058: LD_INT 3
12060: ST_TO_ADDR
// uc_nation = 3 ;
12061: LD_ADDR_OWVAR 21
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12069: LD_ADDR_EXP 19
12073: PUSH
12074: LD_STRING Natasza
12076: PPUSH
12077: CALL_OW 25
12081: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12082: LD_EXP 19
12086: PPUSH
12087: LD_INT 24
12089: PPUSH
12090: LD_INT 0
12092: PPUSH
12093: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12097: LD_EXP 19
12101: PPUSH
12102: LD_INT 56
12104: PPUSH
12105: LD_INT 16
12107: PPUSH
12108: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12112: LD_ADDR_EXP 24
12116: PUSH
12117: LD_EXP 24
12121: PPUSH
12122: LD_EXP 24
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: LD_EXP 19
12135: PPUSH
12136: CALL_OW 1
12140: ST_TO_ADDR
// end ;
12141: LD_VAR 0 1
12145: RET
// export function PrepareSouthBase ; var i , un ; begin
12146: LD_INT 0
12148: PPUSH
12149: PPUSH
12150: PPUSH
// for i = 1 to 2 do
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_INT 2
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12274
// begin uc_side = 3 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 3
12174: ST_TO_ADDR
// uc_nation = 3 ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 3
12182: ST_TO_ADDR
// hc_gallery =  ;
12183: LD_ADDR_OWVAR 33
12187: PUSH
12188: LD_STRING 
12190: ST_TO_ADDR
// hc_name =  ;
12191: LD_ADDR_OWVAR 26
12195: PUSH
12196: LD_STRING 
12198: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12199: LD_INT 1
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: LD_EXP 13
12209: PPUSH
12210: LD_EXP 14
12214: PPUSH
12215: CALL_OW 12
12219: PPUSH
12220: CALL_OW 380
// hc_importance = 0 ;
12224: LD_ADDR_OWVAR 32
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// un = CreateHuman ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: CALL_OW 44
12241: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 11
12249: PPUSH
12250: LD_INT 0
12252: PPUSH
12253: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 111
12264: PPUSH
12265: LD_INT 38
12267: PPUSH
12268: CALL_OW 118
// end ;
12272: GO 12164
12274: POP
12275: POP
// for i = 1 to 2 do
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: DOUBLE
12282: LD_INT 1
12284: DEC
12285: ST_TO_ADDR
12286: LD_INT 2
12288: PUSH
12289: FOR_TO
12290: IFFALSE 12373
// begin uc_side = 3 ;
12292: LD_ADDR_OWVAR 20
12296: PUSH
12297: LD_INT 3
12299: ST_TO_ADDR
// uc_nation = 3 ;
12300: LD_ADDR_OWVAR 21
12304: PUSH
12305: LD_INT 3
12307: ST_TO_ADDR
// hc_gallery =  ;
12308: LD_ADDR_OWVAR 33
12312: PUSH
12313: LD_STRING 
12315: ST_TO_ADDR
// hc_name =  ;
12316: LD_ADDR_OWVAR 26
12320: PUSH
12321: LD_STRING 
12323: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12324: LD_INT 0
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_EXP 13
12334: PPUSH
12335: LD_EXP 14
12339: PPUSH
12340: CALL_OW 12
12344: PPUSH
12345: CALL_OW 380
// un = CreateHuman ;
12349: LD_ADDR_VAR 0 3
12353: PUSH
12354: CALL_OW 44
12358: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 52
// end ;
12371: GO 12289
12373: POP
12374: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12375: LD_INT 3
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: LD_INT 33
12383: PPUSH
12384: LD_EXP 13
12388: PPUSH
12389: LD_EXP 14
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 1
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_OWVAR 67
12424: ARRAY
12425: PPUSH
12426: CALL 8964 0 6
// for i in UnitsInside ( arm2 ) do
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_INT 33
12437: PPUSH
12438: CALL_OW 313
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12477
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12446: LD_ADDR_EXP 25
12450: PUSH
12451: LD_EXP 25
12455: PPUSH
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: PPUSH
12465: LD_VAR 0 2
12469: PPUSH
12470: CALL_OW 1
12474: ST_TO_ADDR
12475: GO 12443
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 1
12483: RET
// export function PrepareNorthBase ; var i , un ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 3
12523: PPUSH
12524: LD_INT 4
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 4
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_OWVAR 67
12545: ARRAY
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12634
// begin uc_side = 3 ;
12550: LD_ADDR_OWVAR 20
12554: PUSH
12555: LD_INT 3
12557: ST_TO_ADDR
// uc_nation = 3 ;
12558: LD_ADDR_OWVAR 21
12562: PUSH
12563: LD_INT 3
12565: ST_TO_ADDR
// hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_EXP 13
12592: PPUSH
12593: LD_EXP 14
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 380
// un = CreateHuman ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 14
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12547
12634: POP
12635: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 3
12641: PPUSH
12642: LD_INT 2
12644: PPUSH
12645: LD_EXP 13
12649: PPUSH
12650: LD_EXP 14
12654: PPUSH
12655: CALL_OW 12
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 2
12668: PPUSH
12669: CALL_OW 12
12673: PUSH
12674: LD_INT 1
12676: PPUSH
12677: LD_INT 3
12679: PPUSH
12680: CALL_OW 12
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 3
12690: PPUSH
12691: CALL_OW 12
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_OWVAR 67
12709: ARRAY
12710: PPUSH
12711: CALL 8964 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12715: LD_INT 3
12717: PPUSH
12718: LD_INT 3
12720: PPUSH
12721: LD_INT 23
12723: PPUSH
12724: LD_EXP 13
12728: PPUSH
12729: LD_EXP 14
12733: PPUSH
12734: CALL_OW 12
12738: PPUSH
12739: LD_INT 4
12741: PPUSH
12742: LD_INT 0
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: LD_OWVAR 67
12764: ARRAY
12765: PPUSH
12766: CALL 8964 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12770: LD_INT 3
12772: PPUSH
12773: LD_INT 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: LD_EXP 13
12783: PPUSH
12784: LD_EXP 14
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: LD_INT 1
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_OWVAR 67
12819: ARRAY
12820: PPUSH
12821: CALL 8964 0 6
// for i in UnitsInside ( arm1 ) do
12825: LD_ADDR_VAR 0 2
12829: PUSH
12830: LD_INT 2
12832: PPUSH
12833: CALL_OW 313
12837: PUSH
12838: FOR_IN
12839: IFFALSE 12872
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12841: LD_ADDR_EXP 24
12845: PUSH
12846: LD_EXP 24
12850: PPUSH
12851: LD_EXP 24
12855: PUSH
12856: LD_INT 1
12858: PLUS
12859: PPUSH
12860: LD_VAR 0 2
12864: PPUSH
12865: CALL_OW 1
12869: ST_TO_ADDR
12870: GO 12838
12872: POP
12873: POP
// end ;
12874: LD_VAR 0 1
12878: RET
// export function PrepareOtherRussians ; var i , un ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
12883: PPUSH
// for i = 1 to 2 do
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_INT 2
12896: PUSH
12897: FOR_TO
12898: IFFALSE 12999
// begin uc_side = 3 ;
12900: LD_ADDR_OWVAR 20
12904: PUSH
12905: LD_INT 3
12907: ST_TO_ADDR
// uc_nation = 3 ;
12908: LD_ADDR_OWVAR 21
12912: PUSH
12913: LD_INT 3
12915: ST_TO_ADDR
// hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 9
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 80
12989: PPUSH
12990: LD_INT 73
12992: PPUSH
12993: CALL_OW 118
// end ;
12997: GO 12897
12999: POP
13000: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_INT 3
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 31
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: PUSH
13035: FOR_IN
13036: IFFALSE 13064
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13038: LD_EXP 13
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 12
13052: PPUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL 9073 0 2
13062: GO 13035
13064: POP
13065: POP
// end ;
13066: LD_VAR 0 1
13070: RET
// export function PrepareCargoBays ; begin
13071: LD_INT 0
13073: PPUSH
// uc_side = 3 ;
13074: LD_ADDR_OWVAR 20
13078: PUSH
13079: LD_INT 3
13081: ST_TO_ADDR
// uc_nation = 3 ;
13082: LD_ADDR_OWVAR 21
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// vc_engine = 1 ;
13090: LD_ADDR_OWVAR 39
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// vc_control = 1 ;
13098: LD_ADDR_OWVAR 38
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// vc_weapon = 51 ;
13106: LD_ADDR_OWVAR 40
13110: PUSH
13111: LD_INT 51
13113: ST_TO_ADDR
// vc_chassis = 22 ;
13114: LD_ADDR_OWVAR 37
13118: PUSH
13119: LD_INT 22
13121: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13122: LD_ADDR_EXP 15
13126: PUSH
13127: CALL_OW 45
13131: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13132: LD_ADDR_EXP 16
13136: PUSH
13137: CALL_OW 45
13141: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13142: LD_EXP 15
13146: PPUSH
13147: LD_INT 13
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13157: LD_EXP 16
13161: PPUSH
13162: LD_INT 13
13164: PPUSH
13165: LD_INT 0
13167: PPUSH
13168: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13172: LD_EXP 15
13176: PPUSH
13177: LD_INT 2
13179: PPUSH
13180: LD_INT 70
13182: PUSH
13183: LD_INT 50
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_OWVAR 67
13202: ARRAY
13203: PPUSH
13204: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13208: LD_EXP 16
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: LD_INT 70
13218: PUSH
13219: LD_INT 50
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 20
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_OWVAR 67
13238: ARRAY
13239: PPUSH
13240: CALL_OW 291
// hc_gallery =  ;
13244: LD_ADDR_OWVAR 33
13248: PUSH
13249: LD_STRING 
13251: ST_TO_ADDR
// hc_name =  ;
13252: LD_ADDR_OWVAR 26
13256: PUSH
13257: LD_STRING 
13259: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13260: LD_INT 1
13262: PPUSH
13263: LD_INT 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 2
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: CALL_OW 380
// driver1 = CreateHuman ;
13281: LD_ADDR_EXP 17
13285: PUSH
13286: CALL_OW 44
13290: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13291: LD_EXP 17
13295: PPUSH
13296: LD_EXP 15
13300: PPUSH
13301: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13305: LD_ADDR_OWVAR 26
13309: PUSH
13310: LD_STRING Nikolai Andreyev
13312: ST_TO_ADDR
// driver2 = CreateHuman ;
13313: LD_ADDR_EXP 18
13317: PUSH
13318: CALL_OW 44
13322: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13323: LD_EXP 18
13327: PPUSH
13328: LD_EXP 16
13332: PPUSH
13333: CALL_OW 52
// end ;
13337: LD_VAR 0 1
13341: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// uc_side = 3 ;
13350: LD_ADDR_OWVAR 20
13354: PUSH
13355: LD_INT 3
13357: ST_TO_ADDR
// uc_nation = 3 ;
13358: LD_ADDR_OWVAR 21
13362: PUSH
13363: LD_INT 3
13365: ST_TO_ADDR
// for i := 1 to count do
13366: LD_ADDR_VAR 0 4
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_VAR 0 1
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13644
// begin vc_engine = 1 ;
13384: LD_ADDR_OWVAR 39
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// vc_control = 1 ;
13392: LD_ADDR_OWVAR 38
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13400: LD_ADDR_OWVAR 40
13404: PUSH
13405: LD_INT 42
13407: ST_TO_ADDR
// if Difficulty = 3 then
13408: LD_OWVAR 67
13412: PUSH
13413: LD_INT 3
13415: EQUAL
13416: IFFALSE 13445
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13418: LD_ADDR_OWVAR 40
13422: PUSH
13423: LD_INT 42
13425: PUSH
13426: LD_INT 43
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: ST_TO_ADDR
// if Difficulty = 4 then
13445: LD_OWVAR 67
13449: PUSH
13450: LD_INT 4
13452: EQUAL
13453: IFFALSE 13490
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13455: LD_ADDR_OWVAR 40
13459: PUSH
13460: LD_INT 42
13462: PUSH
13463: LD_INT 43
13465: PUSH
13466: LD_INT 43
13468: PUSH
13469: LD_INT 44
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 4
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13490: LD_ADDR_OWVAR 37
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_OWVAR 67
13517: ARRAY
13518: ST_TO_ADDR
// veh = CreateVehicle ;
13519: LD_ADDR_VAR 0 5
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13529: LD_VAR 0 5
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13546: LD_ADDR_EXP 26
13550: PUSH
13551: LD_EXP 26
13555: PUSH
13556: LD_VAR 0 5
13560: ADD
13561: ST_TO_ADDR
// hc_gallery =  ;
13562: LD_ADDR_OWVAR 33
13566: PUSH
13567: LD_STRING 
13569: ST_TO_ADDR
// hc_name =  ;
13570: LD_ADDR_OWVAR 26
13574: PUSH
13575: LD_STRING 
13577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13578: LD_INT 0
13580: PPUSH
13581: LD_INT 3
13583: PPUSH
13584: LD_EXP 13
13588: PPUSH
13589: LD_EXP 14
13593: PPUSH
13594: CALL_OW 12
13598: PPUSH
13599: CALL_OW 380
// un = CreateHuman ;
13603: LD_ADDR_VAR 0 6
13607: PUSH
13608: CALL_OW 44
13612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13613: LD_VAR 0 6
13617: PPUSH
13618: LD_VAR 0 5
13622: PPUSH
13623: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13627: LD_VAR 0 6
13631: PPUSH
13632: LD_INT 14
13634: PPUSH
13635: LD_INT 9
13637: PPUSH
13638: CALL_OW 111
// end ;
13642: GO 13381
13644: POP
13645: POP
// wait ( 0 0$1 ) ;
13646: LD_INT 35
13648: PPUSH
13649: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13653: LD_INT 0
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: LD_EXP 13
13663: PPUSH
13664: LD_EXP 14
13668: PPUSH
13669: CALL_OW 12
13673: PPUSH
13674: CALL_OW 380
// un = CreateHuman ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: CALL_OW 44
13687: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 2
13708: MUL
13709: PLUS
13710: PUSH
13711: FOR_TO
13712: IFFALSE 13804
// begin hc_gallery =  ;
13714: LD_ADDR_OWVAR 33
13718: PUSH
13719: LD_STRING 
13721: ST_TO_ADDR
// hc_name =  ;
13722: LD_ADDR_OWVAR 26
13726: PUSH
13727: LD_STRING 
13729: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13730: LD_INT 1
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: LD_EXP 13
13740: PPUSH
13741: LD_EXP 14
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 380
// un = CreateHuman ;
13755: LD_ADDR_VAR 0 6
13759: PUSH
13760: CALL_OW 44
13764: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13765: LD_VAR 0 6
13769: PPUSH
13770: LD_INT 9
13772: PPUSH
13773: LD_INT 13
13775: PPUSH
13776: LD_INT 4
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13786: LD_ADDR_EXP 26
13790: PUSH
13791: LD_EXP 26
13795: PUSH
13796: LD_VAR 0 6
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13711
13804: POP
13805: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_INT 26
13813: PPUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 70
13853: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13854: LD_VAR 0 7
13858: PUSH
13859: LD_INT 1
13861: ARRAY
13862: PPUSH
13863: LD_STRING D9-Rus3-1
13865: PPUSH
13866: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13870: LD_VAR 0 7
13874: PUSH
13875: LD_INT 2
13877: ARRAY
13878: PPUSH
13879: LD_STRING D9-Russ-1
13881: PPUSH
13882: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13886: LD_EXP 26
13890: PPUSH
13891: LD_INT 31
13893: PPUSH
13894: LD_INT 13
13896: PPUSH
13897: CALL_OW 114
// wait ( 0 0$3 ) ;
13901: LD_INT 105
13903: PPUSH
13904: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13908: LD_INT 35
13910: PPUSH
13911: CALL_OW 67
// for i in attackGroup do
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_EXP 26
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14293
// begin if IsDead ( i ) then
13928: LD_VAR 0 4
13932: PPUSH
13933: CALL_OW 301
13937: IFFALSE 13957
// begin attackGroup := attackGroup diff i ;
13939: LD_ADDR_EXP 26
13943: PUSH
13944: LD_EXP 26
13948: PUSH
13949: LD_VAR 0 4
13953: DIFF
13954: ST_TO_ADDR
// continue ;
13955: GO 13925
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 314
13966: NOT
13967: PUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 110
13977: NOT
13978: AND
13979: IFFALSE 14015
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13981: LD_VAR 0 4
13985: PPUSH
13986: LD_INT 22
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: CALL_OW 69
14000: PPUSH
14001: LD_VAR 0 4
14005: PPUSH
14006: CALL_OW 74
14010: PPUSH
14011: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14015: LD_VAR 0 4
14019: PPUSH
14020: CALL_OW 110
14024: NOT
14025: PUSH
14026: LD_VAR 0 4
14030: PPUSH
14031: CALL_OW 256
14035: PUSH
14036: LD_INT 650
14038: LESS
14039: AND
14040: PUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 247
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: AND
14055: IFFALSE 14084
// begin SetTag ( i , 1 ) ;
14057: LD_VAR 0 4
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14069: LD_VAR 0 4
14073: PPUSH
14074: LD_INT 20
14076: PPUSH
14077: LD_INT 8
14079: PPUSH
14080: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 110
14093: PUSH
14094: LD_INT 1
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: LD_INT 20
14105: PPUSH
14106: LD_INT 8
14108: PPUSH
14109: CALL_OW 297
14113: PUSH
14114: LD_INT 6
14116: LESS
14117: AND
14118: IFFALSE 14132
// SetTag ( i , 2 ) ;
14120: LD_VAR 0 4
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 109
// if GetTag ( i ) = 2 then
14132: LD_VAR 0 4
14136: PPUSH
14137: CALL_OW 110
14141: PUSH
14142: LD_INT 2
14144: EQUAL
14145: IFFALSE 14253
// begin if GetLives ( i ) = 1000 then
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 256
14156: PUSH
14157: LD_INT 1000
14159: EQUAL
14160: IFFALSE 14176
// SetTag ( i , 3 ) else
14162: LD_VAR 0 4
14166: PPUSH
14167: LD_INT 3
14169: PPUSH
14170: CALL_OW 109
14174: GO 14253
// if IsDrivenBy ( i ) then
14176: LD_VAR 0 4
14180: PPUSH
14181: CALL_OW 311
14185: IFFALSE 14253
// begin mech := IsDrivenBy ( i ) ;
14187: LD_ADDR_VAR 0 8
14191: PUSH
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 311
14201: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 8
14209: PPUSH
14210: CALL_OW 292
14214: NOT
14215: PUSH
14216: LD_VAR 0 8
14220: PPUSH
14221: CALL_OW 256
14225: PUSH
14226: LD_INT 1000
14228: LESS
14229: AND
14230: IFFALSE 14244
// SetLives ( mech , 1000 ) ;
14232: LD_VAR 0 8
14236: PPUSH
14237: LD_INT 1000
14239: PPUSH
14240: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14244: LD_VAR 0 8
14248: PPUSH
14249: CALL 75825 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14253: LD_VAR 0 4
14257: PPUSH
14258: CALL_OW 110
14262: PUSH
14263: LD_INT 3
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 311
14276: AND
14277: IFFALSE 14291
// SetTag ( i , 0 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 109
// end ;
14291: GO 13925
14293: POP
14294: POP
// until not attackGroup ;
14295: LD_EXP 26
14299: NOT
14300: IFFALSE 13908
// end ;
14302: LD_VAR 0 3
14306: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14307: LD_EXP 26
14311: PPUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 72
14326: IFFALSE 14394
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
// begin enable ;
14334: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_EXP 26
14344: PPUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 72
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14392
// if GetFuel ( i ) < 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 261
14372: PUSH
14373: LD_INT 3
14375: LESS
14376: IFFALSE 14390
// SetFuel ( i , 3 ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 3
14385: PPUSH
14386: CALL_OW 240
14390: GO 14360
14392: POP
14393: POP
// end ; end_of_file
14394: PPOPN 1
14396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14397: LD_INT 22
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: IFFALSE 14444
14427: GO 14429
14429: DISABLE
// begin enable ;
14430: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14431: LD_INT 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: LD_INT 22
14439: PPUSH
14440: CALL 9209 0 3
// end ;
14444: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14445: LD_INT 22
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: IFFALSE 14495
14475: GO 14477
14477: DISABLE
// begin enable ;
14478: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14479: LD_INT 3
14481: PPUSH
14482: LD_INT 20
14484: PPUSH
14485: LD_INT 22
14487: PPUSH
14488: LD_INT 23
14490: PPUSH
14491: CALL 9541 0 4
// end ;
14495: END
// every 0 0$1 trigger northBaseDefenders do
14496: LD_EXP 24
14500: IFFALSE 14524
14502: GO 14504
14504: DISABLE
// begin enable ;
14505: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14506: LD_INT 22
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_EXP 24
14516: PPUSH
14517: LD_INT 2
14519: PPUSH
14520: CALL 9813 0 4
// end ;
14524: END
// every 0 0$1 trigger southBaseDefenders do
14525: LD_EXP 25
14529: IFFALSE 14553
14531: GO 14533
14533: DISABLE
// begin enable ;
14534: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14535: LD_INT 23
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: LD_EXP 25
14545: PPUSH
14546: LD_INT 33
14548: PPUSH
14549: CALL 9813 0 4
// end ; end_of_file
14553: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL 32368 0 1
// if unit = JMM then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_EXP 1
14572: EQUAL
14573: IFFALSE 14582
// YouLost ( JMM ) ;
14575: LD_STRING JMM
14577: PPUSH
14578: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 266
14591: PUSH
14592: LD_INT 0
14594: EQUAL
14595: IFFALSE 14604
// YouLost ( DepotDestroyed ) ;
14597: LD_STRING DepotDestroyed
14599: PPUSH
14600: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// deadsCounter = deadsCounter + 1 ;
14634: LD_ADDR_EXP 31
14638: PUSH
14639: LD_EXP 31
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// end ;
14648: PPOPN 1
14650: END
// on Command ( cmd ) do var i , j , tmp ;
14651: LD_INT 0
14653: PPUSH
14654: PPUSH
14655: PPUSH
// begin SOS_Command ( cmd ) ;
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL 32472 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 2
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: PUSH
14699: FOR_IN
14700: IFFALSE 14821
// begin if GetTaskList ( i ) then
14702: LD_VAR 0 2
14706: PPUSH
14707: CALL_OW 437
14711: IFFALSE 14819
// begin for j = 1 to GetTaskList ( i ) do
14713: LD_ADDR_VAR 0 3
14717: PUSH
14718: DOUBLE
14719: LD_INT 1
14721: DEC
14722: ST_TO_ADDR
14723: LD_VAR 0 2
14727: PPUSH
14728: CALL_OW 437
14732: PUSH
14733: FOR_TO
14734: IFFALSE 14817
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14736: LD_ADDR_VAR 0 4
14740: PUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 437
14750: PUSH
14751: LD_VAR 0 3
14755: ARRAY
14756: PUSH
14757: LD_INT 4
14759: ARRAY
14760: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14761: LD_VAR 0 4
14765: PPUSH
14766: CALL_OW 255
14770: PUSH
14771: LD_INT 3
14773: EQUAL
14774: PUSH
14775: LD_VAR 0 4
14779: PPUSH
14780: CALL_OW 247
14784: PUSH
14785: LD_INT 2
14787: EQUAL
14788: AND
14789: PUSH
14790: LD_VAR 0 4
14794: PPUSH
14795: CALL_OW 264
14799: PUSH
14800: LD_INT 51
14802: EQUAL
14803: AND
14804: IFFALSE 14815
// ComStop ( i ) ;
14806: LD_VAR 0 2
14810: PPUSH
14811: CALL_OW 141
// end ;
14815: GO 14733
14817: POP
14818: POP
// end ; end ;
14819: GO 14699
14821: POP
14822: POP
// end ;
14823: PPOPN 4
14825: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14826: LD_VAR 0 2
14830: PUSH
14831: LD_EXP 8
14835: EQUAL
14836: PUSH
14837: LD_EXP 21
14841: PUSH
14842: LD_INT 4
14844: NONEQUAL
14845: AND
14846: IFFALSE 14998
// begin if IsOk ( Mikhail ) then
14848: LD_EXP 8
14852: PPUSH
14853: CALL_OW 302
14857: IFFALSE 14865
// AskMikhail else
14859: CALL 7486 0 0
14863: GO 14998
// if IsOk ( llab1 ) then
14865: LD_INT 23
14867: PPUSH
14868: CALL_OW 302
14872: IFFALSE 14961
// begin InGameOn ;
14874: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14878: LD_EXP 8
14882: PPUSH
14883: LD_INT 6
14885: PPUSH
14886: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14890: LD_INT 23
14892: PPUSH
14893: LD_INT 6
14895: PPUSH
14896: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14900: LD_EXP 8
14904: PPUSH
14905: LD_INT 23
14907: PPUSH
14908: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14912: LD_INT 35
14914: PPUSH
14915: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14919: LD_EXP 8
14923: PPUSH
14924: CALL_OW 310
14928: PUSH
14929: LD_INT 23
14931: EQUAL
14932: PUSH
14933: LD_EXP 8
14937: PPUSH
14938: CALL_OW 301
14942: OR
14943: IFFALSE 14912
// SetSide ( llab1 , 1 ) ;
14945: LD_INT 23
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: CALL_OW 235
// InGameOff ;
14955: CALL_OW 9
// end else
14959: GO 14998
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14961: LD_INT 3
14963: PPUSH
14964: LD_INT 6
14966: PPUSH
14967: LD_INT 2
14969: PPUSH
14970: LD_INT 1
14972: PPUSH
14973: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14977: LD_EXP 8
14981: PPUSH
14982: LD_INT 6
14984: PPUSH
14985: CALL_OW 235
// ComHold ( Mikhail ) ;
14989: LD_EXP 8
14993: PPUSH
14994: CALL_OW 140
// end ; end ; end ;
14998: PPOPN 2
15000: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15001: LD_VAR 0 1
15005: PPUSH
15006: LD_VAR 0 2
15010: PPUSH
15011: CALL 32488 0 2
// end ;
15015: PPOPN 2
15017: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15018: LD_EXP 8
15022: PPUSH
15023: CALL_OW 257
15027: PUSH
15028: LD_INT 3
15030: NONEQUAL
15031: IFFALSE 15049
15033: GO 15035
15035: DISABLE
// begin enable ;
15036: ENABLE
// SetClass ( Mikhail , 3 ) ;
15037: LD_EXP 8
15041: PPUSH
15042: LD_INT 3
15044: PPUSH
15045: CALL_OW 336
// end ; end_of_file
15049: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15050: LD_INT 22
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 21
15062: PUSH
15063: LD_INT 1
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 25
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: LIST
15084: PPUSH
15085: CALL_OW 69
15089: PUSH
15090: LD_INT 0
15092: EQUAL
15093: PUSH
15094: LD_INT 22
15096: PUSH
15097: LD_INT 4
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 25
15116: PUSH
15117: LD_INT 2
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: PUSH
15134: LD_INT 0
15136: EQUAL
15137: AND
15138: PUSH
15139: LD_INT 1
15141: PPUSH
15142: CALL_OW 255
15146: PUSH
15147: LD_INT 3
15149: EQUAL
15150: AND
15151: PUSH
15152: LD_INT 10
15154: PPUSH
15155: CALL_OW 255
15159: PUSH
15160: LD_INT 3
15162: EQUAL
15163: AND
15164: IFFALSE 15176
15166: GO 15168
15168: DISABLE
// YouLost ( Engineer ) ;
15169: LD_STRING Engineer
15171: PPUSH
15172: CALL_OW 104
15176: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15177: LD_INT 1
15179: PPUSH
15180: CALL_OW 255
15184: PUSH
15185: LD_INT 3
15187: EQUAL
15188: PUSH
15189: LD_EXP 27
15193: PUSH
15194: LD_INT 1
15196: EQUAL
15197: AND
15198: IFFALSE 15210
15200: GO 15202
15202: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15203: LD_STRING DepotCaptured
15205: PPUSH
15206: CALL_OW 104
15210: END
// export function PrepareTigers ; var i , un ; begin
15211: LD_INT 0
15213: PPUSH
15214: PPUSH
15215: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15216: LD_ADDR_VAR 0 2
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_INT 2
15228: PUSH
15229: LD_INT 3
15231: PUSH
15232: LD_INT 4
15234: PUSH
15235: LD_INT 5
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: PUSH
15244: LD_OWVAR 67
15248: ARRAY
15249: PUSH
15250: FOR_TO
15251: IFFALSE 15366
// begin uc_side := 0 ;
15253: LD_ADDR_OWVAR 20
15257: PUSH
15258: LD_INT 0
15260: ST_TO_ADDR
// uc_nation := nation_nature ;
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 0
15268: ST_TO_ADDR
// hc_sex := sex_male ;
15269: LD_ADDR_OWVAR 27
15273: PUSH
15274: LD_INT 1
15276: ST_TO_ADDR
// hc_class := class_tiger ;
15277: LD_ADDR_OWVAR 28
15281: PUSH
15282: LD_INT 14
15284: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15285: LD_ADDR_OWVAR 31
15289: PUSH
15290: LD_EXP 14
15294: PUSH
15295: LD_INT 0
15297: PUSH
15298: LD_INT 0
15300: PUSH
15301: LD_INT 0
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15310: LD_ADDR_OWVAR 35
15314: PUSH
15315: LD_INT 30
15317: PUSH
15318: LD_INT 40
15320: PUSH
15321: LD_INT 45
15323: PUSH
15324: LD_INT 50
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: LD_OWVAR 67
15337: ARRAY
15338: ST_TO_ADDR
// un = CreateHuman ;
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: CALL_OW 44
15348: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_INT 27
15356: PPUSH
15357: LD_INT 0
15359: PPUSH
15360: CALL_OW 49
// end ;
15364: GO 15250
15366: POP
15367: POP
// end ; end_of_file
15368: LD_VAR 0 1
15372: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 255
15380: PUSH
15381: LD_INT 1
15383: EQUAL
15384: PUSH
15385: LD_INT 10
15387: PPUSH
15388: CALL_OW 255
15392: PUSH
15393: LD_INT 1
15395: EQUAL
15396: AND
15397: PUSH
15398: LD_EXP 20
15402: PUSH
15403: LD_INT 1
15405: EQUAL
15406: AND
15407: PUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 3
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 34
15430: PUSH
15431: LD_INT 51
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 3
15440: PUSH
15441: LD_INT 58
15443: PUSH
15444: EMPTY
15445: LIST
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 69
15461: PUSH
15462: LD_INT 0
15464: EQUAL
15465: AND
15466: IFFALSE 15557
15468: GO 15470
15470: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15471: LD_INT 9450
15473: PUSH
15474: LD_INT 8400
15476: PUSH
15477: LD_INT 6300
15479: PUSH
15480: LD_INT 6300
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: PUSH
15489: LD_OWVAR 67
15493: ARRAY
15494: PPUSH
15495: CALL_OW 67
// if cargoEscape then
15499: LD_EXP 20
15503: IFFALSE 15557
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15505: LD_EXP 9
15509: PPUSH
15510: LD_STRING D6-Pow-1
15512: PPUSH
15513: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15517: LD_EXP 1
15521: PPUSH
15522: LD_STRING D6-JMM-1
15524: PPUSH
15525: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15529: LD_EXP 9
15533: PPUSH
15534: LD_STRING D6-Pow-2
15536: PPUSH
15537: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15541: LD_EXP 1
15545: PPUSH
15546: LD_STRING D6-JMM-2
15548: PPUSH
15549: CALL_OW 88
// FinishMission ;
15553: CALL 15773 0 0
// end ; end ;
15557: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15558: LD_INT 1
15560: PPUSH
15561: CALL_OW 255
15565: PUSH
15566: LD_INT 1
15568: EQUAL
15569: PUSH
15570: LD_INT 10
15572: PPUSH
15573: CALL_OW 255
15577: PUSH
15578: LD_INT 1
15580: EQUAL
15581: AND
15582: PUSH
15583: LD_EXP 20
15587: PUSH
15588: LD_INT 1
15590: GREATER
15591: AND
15592: IFFALSE 15667
15594: GO 15596
15596: DISABLE
15597: LD_INT 0
15599: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15600: LD_INT 11550
15602: PUSH
15603: LD_INT 10500
15605: PUSH
15606: LD_INT 9450
15608: PUSH
15609: LD_INT 8400
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: PUSH
15618: LD_OWVAR 67
15622: ARRAY
15623: PPUSH
15624: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15628: LD_INT 1
15630: PUSH
15631: LD_INT 2
15633: PUSH
15634: LD_INT 3
15636: PUSH
15637: LD_INT 4
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: PUSH
15646: LD_OWVAR 67
15650: ARRAY
15651: PPUSH
15652: LD_INT 13
15654: PPUSH
15655: CALL 13342 0 2
// lastBattle = 1 ;
15659: LD_ADDR_EXP 27
15663: PUSH
15664: LD_INT 1
15666: ST_TO_ADDR
// end ;
15667: PPOPN 1
15669: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15670: LD_EXP 27
15674: PUSH
15675: LD_INT 1
15677: EQUAL
15678: PUSH
15679: LD_INT 26
15681: PPUSH
15682: LD_INT 22
15684: PUSH
15685: LD_INT 3
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 21
15694: PUSH
15695: LD_INT 1
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 70
15710: PUSH
15711: LD_INT 0
15713: EQUAL
15714: AND
15715: IFFALSE 15772
15717: GO 15719
15719: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15720: LD_EXP 9
15724: PPUSH
15725: LD_STRING D6-Pow-1
15727: PPUSH
15728: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15732: LD_EXP 1
15736: PPUSH
15737: LD_STRING D6-JMM-1
15739: PPUSH
15740: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15744: LD_EXP 9
15748: PPUSH
15749: LD_STRING D6-Pow-2
15751: PPUSH
15752: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15756: LD_EXP 1
15760: PPUSH
15761: LD_STRING D6-JMM-2
15763: PPUSH
15764: CALL_OW 88
// FinishMission ;
15768: CALL 15773 0 0
// end ;
15772: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15773: LD_INT 0
15775: PPUSH
15776: PPUSH
15777: PPUSH
15778: PPUSH
15779: PPUSH
// if tick <= 18 18$00 then
15780: LD_OWVAR 1
15784: PUSH
15785: LD_INT 37800
15787: LESSEQUAL
15788: IFFALSE 15797
// SetAchievement ( ACH_ASPEED_2 ) ;
15790: LD_STRING ACH_ASPEED_2
15792: PPUSH
15793: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15797: LD_ADDR_VAR 0 2
15801: PUSH
15802: LD_INT 22
15804: PUSH
15805: LD_INT 1
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 21
15814: PUSH
15815: LD_INT 2
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 24
15824: PUSH
15825: LD_INT 251
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: ST_TO_ADDR
// if tmp then
15842: LD_VAR 0 2
15846: IFFALSE 15860
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15848: LD_VAR 0 2
15852: PPUSH
15853: LD_STRING 02_tanks_1
15855: PPUSH
15856: CALL 10688 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15860: LD_EXP 21
15864: PUSH
15865: LD_INT 1
15867: EQUAL
15868: PUSH
15869: LD_EXP 8
15873: PPUSH
15874: CALL_OW 300
15878: AND
15879: IFFALSE 15893
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15881: LD_EXP 21
15885: PPUSH
15886: LD_STRING 02_mikhailStatus_1
15888: PPUSH
15889: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15893: LD_INT 1
15895: PPUSH
15896: CALL_OW 274
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: CALL_OW 275
15908: PPUSH
15909: LD_STRING 02_resources_4
15911: PPUSH
15912: CALL_OW 39
// m1 := false ;
15916: LD_ADDR_VAR 0 3
15920: PUSH
15921: LD_INT 0
15923: ST_TO_ADDR
// m2 := false ;
15924: LD_ADDR_VAR 0 4
15928: PUSH
15929: LD_INT 0
15931: ST_TO_ADDR
// m3 := false ;
15932: LD_ADDR_VAR 0 5
15936: PUSH
15937: LD_INT 0
15939: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15940: LD_INT 1
15942: PPUSH
15943: CALL_OW 274
15947: PPUSH
15948: LD_INT 1
15950: PPUSH
15951: CALL_OW 275
15955: PUSH
15956: LD_INT 200
15958: GREATEREQUAL
15959: IFFALSE 15981
// begin AddMedal ( Cans , 1 ) ;
15961: LD_STRING Cans
15963: PPUSH
15964: LD_INT 1
15966: PPUSH
15967: CALL_OW 101
// m1 := true ;
15971: LD_ADDR_VAR 0 3
15975: PUSH
15976: LD_INT 1
15978: ST_TO_ADDR
// end else
15979: GO 15992
// begin AddMedal ( Cans , - 1 ) ;
15981: LD_STRING Cans
15983: PPUSH
15984: LD_INT 1
15986: NEG
15987: PPUSH
15988: CALL_OW 101
// end ; if deadsCounter < 2 then
15992: LD_EXP 31
15996: PUSH
15997: LD_INT 2
15999: LESS
16000: IFFALSE 16022
// begin AddMedal ( Deaths , 1 ) ;
16002: LD_STRING Deaths
16004: PPUSH
16005: LD_INT 1
16007: PPUSH
16008: CALL_OW 101
// m2 := true ;
16012: LD_ADDR_VAR 0 4
16016: PUSH
16017: LD_INT 1
16019: ST_TO_ADDR
// end else
16020: GO 16033
// begin AddMedal ( Deaths , - 1 ) ;
16022: LD_STRING Deaths
16024: PPUSH
16025: LD_INT 1
16027: NEG
16028: PPUSH
16029: CALL_OW 101
// end ; if mikhailStatus = 0 then
16033: LD_EXP 21
16037: PUSH
16038: LD_INT 0
16040: EQUAL
16041: IFFALSE 16054
// AddMedal ( Prisoner , - 1 ) ;
16043: LD_STRING Prisoner
16045: PPUSH
16046: LD_INT 1
16048: NEG
16049: PPUSH
16050: CALL_OW 101
// if mikhailStatus = 1 then
16054: LD_EXP 21
16058: PUSH
16059: LD_INT 1
16061: EQUAL
16062: IFFALSE 16082
// begin AddMedal ( Prisoner , 1 ) ;
16064: LD_STRING Prisoner
16066: PPUSH
16067: LD_INT 1
16069: PPUSH
16070: CALL_OW 101
// m3 := true ;
16074: LD_ADDR_VAR 0 5
16078: PUSH
16079: LD_INT 1
16081: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16082: LD_EXP 21
16086: PUSH
16087: LD_INT 2
16089: EQUAL
16090: IFFALSE 16110
// begin AddMedal ( Prisoner , 2 ) ;
16092: LD_STRING Prisoner
16094: PPUSH
16095: LD_INT 2
16097: PPUSH
16098: CALL_OW 101
// m3 := true ;
16102: LD_ADDR_VAR 0 5
16106: PUSH
16107: LD_INT 1
16109: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16110: LD_EXP 21
16114: PUSH
16115: LD_INT 3
16117: EQUAL
16118: IFFALSE 16131
// AddMedal ( Prisoner , - 2 ) ;
16120: LD_STRING Prisoner
16122: PPUSH
16123: LD_INT 2
16125: NEG
16126: PPUSH
16127: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16131: LD_OWVAR 67
16135: PUSH
16136: LD_INT 3
16138: GREATEREQUAL
16139: PUSH
16140: LD_VAR 0 3
16144: AND
16145: PUSH
16146: LD_VAR 0 4
16150: AND
16151: PUSH
16152: LD_VAR 0 5
16156: AND
16157: IFFALSE 16169
// SetAchievementEX ( ACH_AMER , 2 ) ;
16159: LD_STRING ACH_AMER
16161: PPUSH
16162: LD_INT 2
16164: PPUSH
16165: CALL_OW 564
// GiveMedals ( MAIN ) ;
16169: LD_STRING MAIN
16171: PPUSH
16172: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16176: LD_INT 22
16178: PUSH
16179: LD_INT 1
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 23
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 21
16198: PUSH
16199: LD_INT 1
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: LIST
16210: PPUSH
16211: CALL_OW 69
16215: PPUSH
16216: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16220: LD_EXP 1
16224: PPUSH
16225: LD_EXP 33
16229: PUSH
16230: LD_STRING JMM
16232: STR
16233: PPUSH
16234: CALL_OW 38
// if IsOK ( Bobby ) then
16238: LD_EXP 2
16242: PPUSH
16243: CALL_OW 302
16247: IFFALSE 16267
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16249: LD_EXP 2
16253: PPUSH
16254: LD_EXP 33
16258: PUSH
16259: LD_STRING Bobby
16261: STR
16262: PPUSH
16263: CALL_OW 38
// if IsOK ( Cyrus ) then
16267: LD_EXP 3
16271: PPUSH
16272: CALL_OW 302
16276: IFFALSE 16296
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16278: LD_EXP 3
16282: PPUSH
16283: LD_EXP 33
16287: PUSH
16288: LD_STRING Cyrus
16290: STR
16291: PPUSH
16292: CALL_OW 38
// if IsOK ( Lisa ) then
16296: LD_EXP 4
16300: PPUSH
16301: CALL_OW 302
16305: IFFALSE 16325
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16307: LD_EXP 4
16311: PPUSH
16312: LD_EXP 33
16316: PUSH
16317: LD_STRING Lisa
16319: STR
16320: PPUSH
16321: CALL_OW 38
// if IsOK ( Khatam ) then
16325: LD_EXP 5
16329: PPUSH
16330: CALL_OW 302
16334: IFFALSE 16354
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16336: LD_EXP 5
16340: PPUSH
16341: LD_EXP 33
16345: PUSH
16346: LD_STRING Khatam
16348: STR
16349: PPUSH
16350: CALL_OW 38
// if IsOK ( Brian ) then
16354: LD_EXP 6
16358: PPUSH
16359: CALL_OW 302
16363: IFFALSE 16383
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16365: LD_EXP 6
16369: PPUSH
16370: LD_EXP 33
16374: PUSH
16375: LD_STRING Brian
16377: STR
16378: PPUSH
16379: CALL_OW 38
// if IsOk ( Jerry ) then
16383: LD_EXP 7
16387: PPUSH
16388: CALL_OW 302
16392: IFFALSE 16412
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16394: LD_EXP 7
16398: PPUSH
16399: LD_EXP 33
16403: PUSH
16404: LD_STRING Jerry
16406: STR
16407: PPUSH
16408: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16412: LD_EXP 21
16416: PUSH
16417: LD_INT 1
16419: EQUAL
16420: PUSH
16421: LD_EXP 8
16425: PPUSH
16426: CALL_OW 255
16430: PUSH
16431: LD_INT 1
16433: EQUAL
16434: AND
16435: PUSH
16436: LD_EXP 8
16440: PPUSH
16441: CALL_OW 302
16445: AND
16446: IFFALSE 16466
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16448: LD_EXP 8
16452: PPUSH
16453: LD_EXP 33
16457: PUSH
16458: LD_STRING Mikhail
16460: STR
16461: PPUSH
16462: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16466: LD_INT 50
16468: PUSH
16469: EMPTY
16470: LIST
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 21
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: PUSH
16502: LD_EXP 1
16506: PUSH
16507: LD_EXP 2
16511: PUSH
16512: LD_EXP 3
16516: PUSH
16517: LD_EXP 4
16521: PUSH
16522: LD_EXP 5
16526: PUSH
16527: LD_EXP 6
16531: PUSH
16532: LD_EXP 7
16536: PUSH
16537: LD_EXP 8
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: DIFF
16552: PPUSH
16553: LD_STRING 02_other_survivors
16555: PPUSH
16556: CALL_OW 38
// YouWin ;
16560: CALL_OW 103
// end ; end_of_file end_of_file
16564: LD_VAR 0 1
16568: RET
// every 0 0$1 do
16569: GO 16571
16571: DISABLE
// begin enable ;
16572: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16573: LD_STRING updateTimer(
16575: PUSH
16576: LD_OWVAR 1
16580: STR
16581: PUSH
16582: LD_STRING );
16584: STR
16585: PPUSH
16586: CALL_OW 559
// end ;
16590: END
// export function SOS_MapStart ( ) ; begin
16591: LD_INT 0
16593: PPUSH
// if streamModeActive then
16594: LD_EXP 37
16598: IFFALSE 16607
// DefineStreamItems ( true ) ;
16600: LD_INT 1
16602: PPUSH
16603: CALL 18411 0 1
// UpdateLuaVariables ( ) ;
16607: CALL 16624 0 0
// UpdateFactoryWaypoints ( ) ;
16611: CALL 31272 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16615: CALL 31529 0 0
// end ;
16619: LD_VAR 0 1
16623: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
16624: LD_INT 0
16626: PPUSH
// if not globalGameSaveCounter then
16627: LD_EXP 36
16631: NOT
16632: IFFALSE 16643
// ToLua ( setGameSaveCounter(0) ) else
16634: LD_STRING setGameSaveCounter(0)
16636: PPUSH
16637: CALL_OW 559
16641: GO 16675
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
16643: LD_ADDR_EXP 36
16647: PUSH
16648: LD_EXP 36
16652: PPUSH
16653: CALL 75486 0 1
16657: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16658: LD_STRING setGameSaveCounter(
16660: PUSH
16661: LD_EXP 36
16665: STR
16666: PUSH
16667: LD_STRING )
16669: STR
16670: PPUSH
16671: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
16675: LD_STRING setGameDifficulty(
16677: PUSH
16678: LD_OWVAR 67
16682: STR
16683: PUSH
16684: LD_STRING )
16686: STR
16687: PPUSH
16688: CALL_OW 559
// end ;
16692: LD_VAR 0 1
16696: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16697: LD_INT 0
16699: PPUSH
// if p2 = stream_mode then
16700: LD_VAR 0 2
16704: PUSH
16705: LD_INT 100
16707: EQUAL
16708: IFFALSE 17711
// begin if not StreamModeActive then
16710: LD_EXP 37
16714: NOT
16715: IFFALSE 16725
// StreamModeActive := true ;
16717: LD_ADDR_EXP 37
16721: PUSH
16722: LD_INT 1
16724: ST_TO_ADDR
// if p3 = 0 then
16725: LD_VAR 0 3
16729: PUSH
16730: LD_INT 0
16732: EQUAL
16733: IFFALSE 16739
// InitStreamMode ;
16735: CALL 17947 0 0
// if p3 = 1 then
16739: LD_VAR 0 3
16743: PUSH
16744: LD_INT 1
16746: EQUAL
16747: IFFALSE 16757
// sRocket := true ;
16749: LD_ADDR_EXP 42
16753: PUSH
16754: LD_INT 1
16756: ST_TO_ADDR
// if p3 = 2 then
16757: LD_VAR 0 3
16761: PUSH
16762: LD_INT 2
16764: EQUAL
16765: IFFALSE 16775
// sSpeed := true ;
16767: LD_ADDR_EXP 41
16771: PUSH
16772: LD_INT 1
16774: ST_TO_ADDR
// if p3 = 3 then
16775: LD_VAR 0 3
16779: PUSH
16780: LD_INT 3
16782: EQUAL
16783: IFFALSE 16793
// sEngine := true ;
16785: LD_ADDR_EXP 43
16789: PUSH
16790: LD_INT 1
16792: ST_TO_ADDR
// if p3 = 4 then
16793: LD_VAR 0 3
16797: PUSH
16798: LD_INT 4
16800: EQUAL
16801: IFFALSE 16811
// sSpec := true ;
16803: LD_ADDR_EXP 40
16807: PUSH
16808: LD_INT 1
16810: ST_TO_ADDR
// if p3 = 5 then
16811: LD_VAR 0 3
16815: PUSH
16816: LD_INT 5
16818: EQUAL
16819: IFFALSE 16829
// sLevel := true ;
16821: LD_ADDR_EXP 44
16825: PUSH
16826: LD_INT 1
16828: ST_TO_ADDR
// if p3 = 6 then
16829: LD_VAR 0 3
16833: PUSH
16834: LD_INT 6
16836: EQUAL
16837: IFFALSE 16847
// sArmoury := true ;
16839: LD_ADDR_EXP 45
16843: PUSH
16844: LD_INT 1
16846: ST_TO_ADDR
// if p3 = 7 then
16847: LD_VAR 0 3
16851: PUSH
16852: LD_INT 7
16854: EQUAL
16855: IFFALSE 16865
// sRadar := true ;
16857: LD_ADDR_EXP 46
16861: PUSH
16862: LD_INT 1
16864: ST_TO_ADDR
// if p3 = 8 then
16865: LD_VAR 0 3
16869: PUSH
16870: LD_INT 8
16872: EQUAL
16873: IFFALSE 16883
// sBunker := true ;
16875: LD_ADDR_EXP 47
16879: PUSH
16880: LD_INT 1
16882: ST_TO_ADDR
// if p3 = 9 then
16883: LD_VAR 0 3
16887: PUSH
16888: LD_INT 9
16890: EQUAL
16891: IFFALSE 16901
// sHack := true ;
16893: LD_ADDR_EXP 48
16897: PUSH
16898: LD_INT 1
16900: ST_TO_ADDR
// if p3 = 10 then
16901: LD_VAR 0 3
16905: PUSH
16906: LD_INT 10
16908: EQUAL
16909: IFFALSE 16919
// sFire := true ;
16911: LD_ADDR_EXP 49
16915: PUSH
16916: LD_INT 1
16918: ST_TO_ADDR
// if p3 = 11 then
16919: LD_VAR 0 3
16923: PUSH
16924: LD_INT 11
16926: EQUAL
16927: IFFALSE 16937
// sRefresh := true ;
16929: LD_ADDR_EXP 50
16933: PUSH
16934: LD_INT 1
16936: ST_TO_ADDR
// if p3 = 12 then
16937: LD_VAR 0 3
16941: PUSH
16942: LD_INT 12
16944: EQUAL
16945: IFFALSE 16955
// sExp := true ;
16947: LD_ADDR_EXP 51
16951: PUSH
16952: LD_INT 1
16954: ST_TO_ADDR
// if p3 = 13 then
16955: LD_VAR 0 3
16959: PUSH
16960: LD_INT 13
16962: EQUAL
16963: IFFALSE 16973
// sDepot := true ;
16965: LD_ADDR_EXP 52
16969: PUSH
16970: LD_INT 1
16972: ST_TO_ADDR
// if p3 = 14 then
16973: LD_VAR 0 3
16977: PUSH
16978: LD_INT 14
16980: EQUAL
16981: IFFALSE 16991
// sFlag := true ;
16983: LD_ADDR_EXP 53
16987: PUSH
16988: LD_INT 1
16990: ST_TO_ADDR
// if p3 = 15 then
16991: LD_VAR 0 3
16995: PUSH
16996: LD_INT 15
16998: EQUAL
16999: IFFALSE 17009
// sKamikadze := true ;
17001: LD_ADDR_EXP 61
17005: PUSH
17006: LD_INT 1
17008: ST_TO_ADDR
// if p3 = 16 then
17009: LD_VAR 0 3
17013: PUSH
17014: LD_INT 16
17016: EQUAL
17017: IFFALSE 17027
// sTroll := true ;
17019: LD_ADDR_EXP 62
17023: PUSH
17024: LD_INT 1
17026: ST_TO_ADDR
// if p3 = 17 then
17027: LD_VAR 0 3
17031: PUSH
17032: LD_INT 17
17034: EQUAL
17035: IFFALSE 17045
// sSlow := true ;
17037: LD_ADDR_EXP 63
17041: PUSH
17042: LD_INT 1
17044: ST_TO_ADDR
// if p3 = 18 then
17045: LD_VAR 0 3
17049: PUSH
17050: LD_INT 18
17052: EQUAL
17053: IFFALSE 17063
// sLack := true ;
17055: LD_ADDR_EXP 64
17059: PUSH
17060: LD_INT 1
17062: ST_TO_ADDR
// if p3 = 19 then
17063: LD_VAR 0 3
17067: PUSH
17068: LD_INT 19
17070: EQUAL
17071: IFFALSE 17081
// sTank := true ;
17073: LD_ADDR_EXP 66
17077: PUSH
17078: LD_INT 1
17080: ST_TO_ADDR
// if p3 = 20 then
17081: LD_VAR 0 3
17085: PUSH
17086: LD_INT 20
17088: EQUAL
17089: IFFALSE 17099
// sRemote := true ;
17091: LD_ADDR_EXP 67
17095: PUSH
17096: LD_INT 1
17098: ST_TO_ADDR
// if p3 = 21 then
17099: LD_VAR 0 3
17103: PUSH
17104: LD_INT 21
17106: EQUAL
17107: IFFALSE 17117
// sPowell := true ;
17109: LD_ADDR_EXP 68
17113: PUSH
17114: LD_INT 1
17116: ST_TO_ADDR
// if p3 = 22 then
17117: LD_VAR 0 3
17121: PUSH
17122: LD_INT 22
17124: EQUAL
17125: IFFALSE 17135
// sTeleport := true ;
17127: LD_ADDR_EXP 71
17131: PUSH
17132: LD_INT 1
17134: ST_TO_ADDR
// if p3 = 23 then
17135: LD_VAR 0 3
17139: PUSH
17140: LD_INT 23
17142: EQUAL
17143: IFFALSE 17153
// sOilTower := true ;
17145: LD_ADDR_EXP 73
17149: PUSH
17150: LD_INT 1
17152: ST_TO_ADDR
// if p3 = 24 then
17153: LD_VAR 0 3
17157: PUSH
17158: LD_INT 24
17160: EQUAL
17161: IFFALSE 17171
// sShovel := true ;
17163: LD_ADDR_EXP 74
17167: PUSH
17168: LD_INT 1
17170: ST_TO_ADDR
// if p3 = 25 then
17171: LD_VAR 0 3
17175: PUSH
17176: LD_INT 25
17178: EQUAL
17179: IFFALSE 17189
// sSheik := true ;
17181: LD_ADDR_EXP 75
17185: PUSH
17186: LD_INT 1
17188: ST_TO_ADDR
// if p3 = 26 then
17189: LD_VAR 0 3
17193: PUSH
17194: LD_INT 26
17196: EQUAL
17197: IFFALSE 17207
// sEarthquake := true ;
17199: LD_ADDR_EXP 77
17203: PUSH
17204: LD_INT 1
17206: ST_TO_ADDR
// if p3 = 27 then
17207: LD_VAR 0 3
17211: PUSH
17212: LD_INT 27
17214: EQUAL
17215: IFFALSE 17225
// sAI := true ;
17217: LD_ADDR_EXP 78
17221: PUSH
17222: LD_INT 1
17224: ST_TO_ADDR
// if p3 = 28 then
17225: LD_VAR 0 3
17229: PUSH
17230: LD_INT 28
17232: EQUAL
17233: IFFALSE 17243
// sCargo := true ;
17235: LD_ADDR_EXP 81
17239: PUSH
17240: LD_INT 1
17242: ST_TO_ADDR
// if p3 = 29 then
17243: LD_VAR 0 3
17247: PUSH
17248: LD_INT 29
17250: EQUAL
17251: IFFALSE 17261
// sDLaser := true ;
17253: LD_ADDR_EXP 82
17257: PUSH
17258: LD_INT 1
17260: ST_TO_ADDR
// if p3 = 30 then
17261: LD_VAR 0 3
17265: PUSH
17266: LD_INT 30
17268: EQUAL
17269: IFFALSE 17279
// sExchange := true ;
17271: LD_ADDR_EXP 83
17275: PUSH
17276: LD_INT 1
17278: ST_TO_ADDR
// if p3 = 31 then
17279: LD_VAR 0 3
17283: PUSH
17284: LD_INT 31
17286: EQUAL
17287: IFFALSE 17297
// sFac := true ;
17289: LD_ADDR_EXP 84
17293: PUSH
17294: LD_INT 1
17296: ST_TO_ADDR
// if p3 = 32 then
17297: LD_VAR 0 3
17301: PUSH
17302: LD_INT 32
17304: EQUAL
17305: IFFALSE 17315
// sPower := true ;
17307: LD_ADDR_EXP 85
17311: PUSH
17312: LD_INT 1
17314: ST_TO_ADDR
// if p3 = 33 then
17315: LD_VAR 0 3
17319: PUSH
17320: LD_INT 33
17322: EQUAL
17323: IFFALSE 17333
// sRandom := true ;
17325: LD_ADDR_EXP 86
17329: PUSH
17330: LD_INT 1
17332: ST_TO_ADDR
// if p3 = 34 then
17333: LD_VAR 0 3
17337: PUSH
17338: LD_INT 34
17340: EQUAL
17341: IFFALSE 17351
// sShield := true ;
17343: LD_ADDR_EXP 87
17347: PUSH
17348: LD_INT 1
17350: ST_TO_ADDR
// if p3 = 35 then
17351: LD_VAR 0 3
17355: PUSH
17356: LD_INT 35
17358: EQUAL
17359: IFFALSE 17369
// sTime := true ;
17361: LD_ADDR_EXP 88
17365: PUSH
17366: LD_INT 1
17368: ST_TO_ADDR
// if p3 = 36 then
17369: LD_VAR 0 3
17373: PUSH
17374: LD_INT 36
17376: EQUAL
17377: IFFALSE 17387
// sTools := true ;
17379: LD_ADDR_EXP 89
17383: PUSH
17384: LD_INT 1
17386: ST_TO_ADDR
// if p3 = 101 then
17387: LD_VAR 0 3
17391: PUSH
17392: LD_INT 101
17394: EQUAL
17395: IFFALSE 17405
// sSold := true ;
17397: LD_ADDR_EXP 54
17401: PUSH
17402: LD_INT 1
17404: ST_TO_ADDR
// if p3 = 102 then
17405: LD_VAR 0 3
17409: PUSH
17410: LD_INT 102
17412: EQUAL
17413: IFFALSE 17423
// sDiff := true ;
17415: LD_ADDR_EXP 55
17419: PUSH
17420: LD_INT 1
17422: ST_TO_ADDR
// if p3 = 103 then
17423: LD_VAR 0 3
17427: PUSH
17428: LD_INT 103
17430: EQUAL
17431: IFFALSE 17441
// sFog := true ;
17433: LD_ADDR_EXP 58
17437: PUSH
17438: LD_INT 1
17440: ST_TO_ADDR
// if p3 = 104 then
17441: LD_VAR 0 3
17445: PUSH
17446: LD_INT 104
17448: EQUAL
17449: IFFALSE 17459
// sReset := true ;
17451: LD_ADDR_EXP 59
17455: PUSH
17456: LD_INT 1
17458: ST_TO_ADDR
// if p3 = 105 then
17459: LD_VAR 0 3
17463: PUSH
17464: LD_INT 105
17466: EQUAL
17467: IFFALSE 17477
// sSun := true ;
17469: LD_ADDR_EXP 60
17473: PUSH
17474: LD_INT 1
17476: ST_TO_ADDR
// if p3 = 106 then
17477: LD_VAR 0 3
17481: PUSH
17482: LD_INT 106
17484: EQUAL
17485: IFFALSE 17495
// sTiger := true ;
17487: LD_ADDR_EXP 56
17491: PUSH
17492: LD_INT 1
17494: ST_TO_ADDR
// if p3 = 107 then
17495: LD_VAR 0 3
17499: PUSH
17500: LD_INT 107
17502: EQUAL
17503: IFFALSE 17513
// sBomb := true ;
17505: LD_ADDR_EXP 57
17509: PUSH
17510: LD_INT 1
17512: ST_TO_ADDR
// if p3 = 108 then
17513: LD_VAR 0 3
17517: PUSH
17518: LD_INT 108
17520: EQUAL
17521: IFFALSE 17531
// sWound := true ;
17523: LD_ADDR_EXP 65
17527: PUSH
17528: LD_INT 1
17530: ST_TO_ADDR
// if p3 = 109 then
17531: LD_VAR 0 3
17535: PUSH
17536: LD_INT 109
17538: EQUAL
17539: IFFALSE 17549
// sBetray := true ;
17541: LD_ADDR_EXP 69
17545: PUSH
17546: LD_INT 1
17548: ST_TO_ADDR
// if p3 = 110 then
17549: LD_VAR 0 3
17553: PUSH
17554: LD_INT 110
17556: EQUAL
17557: IFFALSE 17567
// sContamin := true ;
17559: LD_ADDR_EXP 70
17563: PUSH
17564: LD_INT 1
17566: ST_TO_ADDR
// if p3 = 111 then
17567: LD_VAR 0 3
17571: PUSH
17572: LD_INT 111
17574: EQUAL
17575: IFFALSE 17585
// sOil := true ;
17577: LD_ADDR_EXP 72
17581: PUSH
17582: LD_INT 1
17584: ST_TO_ADDR
// if p3 = 112 then
17585: LD_VAR 0 3
17589: PUSH
17590: LD_INT 112
17592: EQUAL
17593: IFFALSE 17603
// sStu := true ;
17595: LD_ADDR_EXP 76
17599: PUSH
17600: LD_INT 1
17602: ST_TO_ADDR
// if p3 = 113 then
17603: LD_VAR 0 3
17607: PUSH
17608: LD_INT 113
17610: EQUAL
17611: IFFALSE 17621
// sBazooka := true ;
17613: LD_ADDR_EXP 79
17617: PUSH
17618: LD_INT 1
17620: ST_TO_ADDR
// if p3 = 114 then
17621: LD_VAR 0 3
17625: PUSH
17626: LD_INT 114
17628: EQUAL
17629: IFFALSE 17639
// sMortar := true ;
17631: LD_ADDR_EXP 80
17635: PUSH
17636: LD_INT 1
17638: ST_TO_ADDR
// if p3 = 115 then
17639: LD_VAR 0 3
17643: PUSH
17644: LD_INT 115
17646: EQUAL
17647: IFFALSE 17657
// sRanger := true ;
17649: LD_ADDR_EXP 90
17653: PUSH
17654: LD_INT 1
17656: ST_TO_ADDR
// if p3 = 116 then
17657: LD_VAR 0 3
17661: PUSH
17662: LD_INT 116
17664: EQUAL
17665: IFFALSE 17675
// sComputer := true ;
17667: LD_ADDR_EXP 91
17671: PUSH
17672: LD_INT 1
17674: ST_TO_ADDR
// if p3 = 117 then
17675: LD_VAR 0 3
17679: PUSH
17680: LD_INT 117
17682: EQUAL
17683: IFFALSE 17693
// s30 := true ;
17685: LD_ADDR_EXP 92
17689: PUSH
17690: LD_INT 1
17692: ST_TO_ADDR
// if p3 = 118 then
17693: LD_VAR 0 3
17697: PUSH
17698: LD_INT 118
17700: EQUAL
17701: IFFALSE 17711
// s60 := true ;
17703: LD_ADDR_EXP 93
17707: PUSH
17708: LD_INT 1
17710: ST_TO_ADDR
// end ; if p2 = hack_mode then
17711: LD_VAR 0 2
17715: PUSH
17716: LD_INT 101
17718: EQUAL
17719: IFFALSE 17847
// begin case p3 of 1 :
17721: LD_VAR 0 3
17725: PUSH
17726: LD_INT 1
17728: DOUBLE
17729: EQUAL
17730: IFTRUE 17734
17732: GO 17741
17734: POP
// hHackUnlimitedResources ; 2 :
17735: CALL 30018 0 0
17739: GO 17847
17741: LD_INT 2
17743: DOUBLE
17744: EQUAL
17745: IFTRUE 17749
17747: GO 17756
17749: POP
// hHackSetLevel10 ; 3 :
17750: CALL 30151 0 0
17754: GO 17847
17756: LD_INT 3
17758: DOUBLE
17759: EQUAL
17760: IFTRUE 17764
17762: GO 17771
17764: POP
// hHackSetLevel10YourUnits ; 4 :
17765: CALL 30236 0 0
17769: GO 17847
17771: LD_INT 4
17773: DOUBLE
17774: EQUAL
17775: IFTRUE 17779
17777: GO 17786
17779: POP
// hHackInvincible ; 5 :
17780: CALL 30684 0 0
17784: GO 17847
17786: LD_INT 5
17788: DOUBLE
17789: EQUAL
17790: IFTRUE 17794
17792: GO 17801
17794: POP
// hHackInvisible ; 6 :
17795: CALL 30795 0 0
17799: GO 17847
17801: LD_INT 6
17803: DOUBLE
17804: EQUAL
17805: IFTRUE 17809
17807: GO 17816
17809: POP
// hHackChangeYourSide ; 7 :
17810: CALL 30852 0 0
17814: GO 17847
17816: LD_INT 7
17818: DOUBLE
17819: EQUAL
17820: IFTRUE 17824
17822: GO 17831
17824: POP
// hHackChangeUnitSide ; 8 :
17825: CALL 30894 0 0
17829: GO 17847
17831: LD_INT 8
17833: DOUBLE
17834: EQUAL
17835: IFTRUE 17839
17837: GO 17846
17839: POP
// hHackFog ; end ;
17840: CALL 30995 0 0
17844: GO 17847
17846: POP
// end ; if p2 = game_save_mode then
17847: LD_VAR 0 2
17851: PUSH
17852: LD_INT 102
17854: EQUAL
17855: IFFALSE 17920
// begin if p3 = 1 then
17857: LD_VAR 0 3
17861: PUSH
17862: LD_INT 1
17864: EQUAL
17865: IFFALSE 17877
// globalGameSaveCounter := p4 ;
17867: LD_ADDR_EXP 36
17871: PUSH
17872: LD_VAR 0 4
17876: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17877: LD_VAR 0 3
17881: PUSH
17882: LD_INT 2
17884: EQUAL
17885: PUSH
17886: LD_EXP 36
17890: AND
17891: IFFALSE 17910
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17893: LD_STRING setGameSaveCounter(
17895: PUSH
17896: LD_EXP 36
17900: STR
17901: PUSH
17902: LD_STRING )
17904: STR
17905: PPUSH
17906: CALL_OW 559
// display_strings := globalGameSaveCounter ;
17910: LD_ADDR_OWVAR 47
17914: PUSH
17915: LD_EXP 36
17919: ST_TO_ADDR
// end ; end ;
17920: LD_VAR 0 7
17924: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
17925: GO 17927
17927: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17928: LD_STRING initStreamRollete();
17930: PPUSH
17931: CALL_OW 559
// InitStreamMode ;
17935: CALL 17947 0 0
// DefineStreamItems ( false ) ;
17939: LD_INT 0
17941: PPUSH
17942: CALL 18411 0 1
// end ;
17946: END
// function InitStreamMode ; begin
17947: LD_INT 0
17949: PPUSH
// streamModeActive := false ;
17950: LD_ADDR_EXP 37
17954: PUSH
17955: LD_INT 0
17957: ST_TO_ADDR
// normalCounter := 36 ;
17958: LD_ADDR_EXP 38
17962: PUSH
17963: LD_INT 36
17965: ST_TO_ADDR
// hardcoreCounter := 18 ;
17966: LD_ADDR_EXP 39
17970: PUSH
17971: LD_INT 18
17973: ST_TO_ADDR
// sRocket := false ;
17974: LD_ADDR_EXP 42
17978: PUSH
17979: LD_INT 0
17981: ST_TO_ADDR
// sSpeed := false ;
17982: LD_ADDR_EXP 41
17986: PUSH
17987: LD_INT 0
17989: ST_TO_ADDR
// sEngine := false ;
17990: LD_ADDR_EXP 43
17994: PUSH
17995: LD_INT 0
17997: ST_TO_ADDR
// sSpec := false ;
17998: LD_ADDR_EXP 40
18002: PUSH
18003: LD_INT 0
18005: ST_TO_ADDR
// sLevel := false ;
18006: LD_ADDR_EXP 44
18010: PUSH
18011: LD_INT 0
18013: ST_TO_ADDR
// sArmoury := false ;
18014: LD_ADDR_EXP 45
18018: PUSH
18019: LD_INT 0
18021: ST_TO_ADDR
// sRadar := false ;
18022: LD_ADDR_EXP 46
18026: PUSH
18027: LD_INT 0
18029: ST_TO_ADDR
// sBunker := false ;
18030: LD_ADDR_EXP 47
18034: PUSH
18035: LD_INT 0
18037: ST_TO_ADDR
// sHack := false ;
18038: LD_ADDR_EXP 48
18042: PUSH
18043: LD_INT 0
18045: ST_TO_ADDR
// sFire := false ;
18046: LD_ADDR_EXP 49
18050: PUSH
18051: LD_INT 0
18053: ST_TO_ADDR
// sRefresh := false ;
18054: LD_ADDR_EXP 50
18058: PUSH
18059: LD_INT 0
18061: ST_TO_ADDR
// sExp := false ;
18062: LD_ADDR_EXP 51
18066: PUSH
18067: LD_INT 0
18069: ST_TO_ADDR
// sDepot := false ;
18070: LD_ADDR_EXP 52
18074: PUSH
18075: LD_INT 0
18077: ST_TO_ADDR
// sFlag := false ;
18078: LD_ADDR_EXP 53
18082: PUSH
18083: LD_INT 0
18085: ST_TO_ADDR
// sKamikadze := false ;
18086: LD_ADDR_EXP 61
18090: PUSH
18091: LD_INT 0
18093: ST_TO_ADDR
// sTroll := false ;
18094: LD_ADDR_EXP 62
18098: PUSH
18099: LD_INT 0
18101: ST_TO_ADDR
// sSlow := false ;
18102: LD_ADDR_EXP 63
18106: PUSH
18107: LD_INT 0
18109: ST_TO_ADDR
// sLack := false ;
18110: LD_ADDR_EXP 64
18114: PUSH
18115: LD_INT 0
18117: ST_TO_ADDR
// sTank := false ;
18118: LD_ADDR_EXP 66
18122: PUSH
18123: LD_INT 0
18125: ST_TO_ADDR
// sRemote := false ;
18126: LD_ADDR_EXP 67
18130: PUSH
18131: LD_INT 0
18133: ST_TO_ADDR
// sPowell := false ;
18134: LD_ADDR_EXP 68
18138: PUSH
18139: LD_INT 0
18141: ST_TO_ADDR
// sTeleport := false ;
18142: LD_ADDR_EXP 71
18146: PUSH
18147: LD_INT 0
18149: ST_TO_ADDR
// sOilTower := false ;
18150: LD_ADDR_EXP 73
18154: PUSH
18155: LD_INT 0
18157: ST_TO_ADDR
// sShovel := false ;
18158: LD_ADDR_EXP 74
18162: PUSH
18163: LD_INT 0
18165: ST_TO_ADDR
// sSheik := false ;
18166: LD_ADDR_EXP 75
18170: PUSH
18171: LD_INT 0
18173: ST_TO_ADDR
// sEarthquake := false ;
18174: LD_ADDR_EXP 77
18178: PUSH
18179: LD_INT 0
18181: ST_TO_ADDR
// sAI := false ;
18182: LD_ADDR_EXP 78
18186: PUSH
18187: LD_INT 0
18189: ST_TO_ADDR
// sCargo := false ;
18190: LD_ADDR_EXP 81
18194: PUSH
18195: LD_INT 0
18197: ST_TO_ADDR
// sDLaser := false ;
18198: LD_ADDR_EXP 82
18202: PUSH
18203: LD_INT 0
18205: ST_TO_ADDR
// sExchange := false ;
18206: LD_ADDR_EXP 83
18210: PUSH
18211: LD_INT 0
18213: ST_TO_ADDR
// sFac := false ;
18214: LD_ADDR_EXP 84
18218: PUSH
18219: LD_INT 0
18221: ST_TO_ADDR
// sPower := false ;
18222: LD_ADDR_EXP 85
18226: PUSH
18227: LD_INT 0
18229: ST_TO_ADDR
// sRandom := false ;
18230: LD_ADDR_EXP 86
18234: PUSH
18235: LD_INT 0
18237: ST_TO_ADDR
// sShield := false ;
18238: LD_ADDR_EXP 87
18242: PUSH
18243: LD_INT 0
18245: ST_TO_ADDR
// sTime := false ;
18246: LD_ADDR_EXP 88
18250: PUSH
18251: LD_INT 0
18253: ST_TO_ADDR
// sTools := false ;
18254: LD_ADDR_EXP 89
18258: PUSH
18259: LD_INT 0
18261: ST_TO_ADDR
// sSold := false ;
18262: LD_ADDR_EXP 54
18266: PUSH
18267: LD_INT 0
18269: ST_TO_ADDR
// sDiff := false ;
18270: LD_ADDR_EXP 55
18274: PUSH
18275: LD_INT 0
18277: ST_TO_ADDR
// sFog := false ;
18278: LD_ADDR_EXP 58
18282: PUSH
18283: LD_INT 0
18285: ST_TO_ADDR
// sReset := false ;
18286: LD_ADDR_EXP 59
18290: PUSH
18291: LD_INT 0
18293: ST_TO_ADDR
// sSun := false ;
18294: LD_ADDR_EXP 60
18298: PUSH
18299: LD_INT 0
18301: ST_TO_ADDR
// sTiger := false ;
18302: LD_ADDR_EXP 56
18306: PUSH
18307: LD_INT 0
18309: ST_TO_ADDR
// sBomb := false ;
18310: LD_ADDR_EXP 57
18314: PUSH
18315: LD_INT 0
18317: ST_TO_ADDR
// sWound := false ;
18318: LD_ADDR_EXP 65
18322: PUSH
18323: LD_INT 0
18325: ST_TO_ADDR
// sBetray := false ;
18326: LD_ADDR_EXP 69
18330: PUSH
18331: LD_INT 0
18333: ST_TO_ADDR
// sContamin := false ;
18334: LD_ADDR_EXP 70
18338: PUSH
18339: LD_INT 0
18341: ST_TO_ADDR
// sOil := false ;
18342: LD_ADDR_EXP 72
18346: PUSH
18347: LD_INT 0
18349: ST_TO_ADDR
// sStu := false ;
18350: LD_ADDR_EXP 76
18354: PUSH
18355: LD_INT 0
18357: ST_TO_ADDR
// sBazooka := false ;
18358: LD_ADDR_EXP 79
18362: PUSH
18363: LD_INT 0
18365: ST_TO_ADDR
// sMortar := false ;
18366: LD_ADDR_EXP 80
18370: PUSH
18371: LD_INT 0
18373: ST_TO_ADDR
// sRanger := false ;
18374: LD_ADDR_EXP 90
18378: PUSH
18379: LD_INT 0
18381: ST_TO_ADDR
// sComputer := false ;
18382: LD_ADDR_EXP 91
18386: PUSH
18387: LD_INT 0
18389: ST_TO_ADDR
// s30 := false ;
18390: LD_ADDR_EXP 92
18394: PUSH
18395: LD_INT 0
18397: ST_TO_ADDR
// s60 := false ;
18398: LD_ADDR_EXP 93
18402: PUSH
18403: LD_INT 0
18405: ST_TO_ADDR
// end ;
18406: LD_VAR 0 1
18410: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18411: LD_INT 0
18413: PPUSH
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
18418: PPUSH
18419: PPUSH
// result := [ ] ;
18420: LD_ADDR_VAR 0 2
18424: PUSH
18425: EMPTY
18426: ST_TO_ADDR
// if campaign_id = 1 then
18427: LD_OWVAR 69
18431: PUSH
18432: LD_INT 1
18434: EQUAL
18435: IFFALSE 21601
// begin case mission_number of 1 :
18437: LD_OWVAR 70
18441: PUSH
18442: LD_INT 1
18444: DOUBLE
18445: EQUAL
18446: IFTRUE 18450
18448: GO 18526
18450: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18451: LD_ADDR_VAR 0 2
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 4
18461: PUSH
18462: LD_INT 11
18464: PUSH
18465: LD_INT 12
18467: PUSH
18468: LD_INT 15
18470: PUSH
18471: LD_INT 16
18473: PUSH
18474: LD_INT 22
18476: PUSH
18477: LD_INT 23
18479: PUSH
18480: LD_INT 26
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 101
18496: PUSH
18497: LD_INT 102
18499: PUSH
18500: LD_INT 106
18502: PUSH
18503: LD_INT 116
18505: PUSH
18506: LD_INT 117
18508: PUSH
18509: LD_INT 118
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: ST_TO_ADDR
18524: GO 21599
18526: LD_INT 2
18528: DOUBLE
18529: EQUAL
18530: IFTRUE 18534
18532: GO 18618
18534: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18535: LD_ADDR_VAR 0 2
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: LD_INT 4
18545: PUSH
18546: LD_INT 11
18548: PUSH
18549: LD_INT 12
18551: PUSH
18552: LD_INT 15
18554: PUSH
18555: LD_INT 16
18557: PUSH
18558: LD_INT 22
18560: PUSH
18561: LD_INT 23
18563: PUSH
18564: LD_INT 26
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 101
18580: PUSH
18581: LD_INT 102
18583: PUSH
18584: LD_INT 105
18586: PUSH
18587: LD_INT 106
18589: PUSH
18590: LD_INT 108
18592: PUSH
18593: LD_INT 116
18595: PUSH
18596: LD_INT 117
18598: PUSH
18599: LD_INT 118
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: ST_TO_ADDR
18616: GO 21599
18618: LD_INT 3
18620: DOUBLE
18621: EQUAL
18622: IFTRUE 18626
18624: GO 18714
18626: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18627: LD_ADDR_VAR 0 2
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: LD_INT 4
18637: PUSH
18638: LD_INT 5
18640: PUSH
18641: LD_INT 11
18643: PUSH
18644: LD_INT 12
18646: PUSH
18647: LD_INT 15
18649: PUSH
18650: LD_INT 16
18652: PUSH
18653: LD_INT 22
18655: PUSH
18656: LD_INT 26
18658: PUSH
18659: LD_INT 36
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 101
18676: PUSH
18677: LD_INT 102
18679: PUSH
18680: LD_INT 105
18682: PUSH
18683: LD_INT 106
18685: PUSH
18686: LD_INT 108
18688: PUSH
18689: LD_INT 116
18691: PUSH
18692: LD_INT 117
18694: PUSH
18695: LD_INT 118
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: ST_TO_ADDR
18712: GO 21599
18714: LD_INT 4
18716: DOUBLE
18717: EQUAL
18718: IFTRUE 18722
18720: GO 18818
18722: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18723: LD_ADDR_VAR 0 2
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: LD_INT 4
18733: PUSH
18734: LD_INT 5
18736: PUSH
18737: LD_INT 8
18739: PUSH
18740: LD_INT 11
18742: PUSH
18743: LD_INT 12
18745: PUSH
18746: LD_INT 15
18748: PUSH
18749: LD_INT 16
18751: PUSH
18752: LD_INT 22
18754: PUSH
18755: LD_INT 23
18757: PUSH
18758: LD_INT 26
18760: PUSH
18761: LD_INT 36
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 101
18780: PUSH
18781: LD_INT 102
18783: PUSH
18784: LD_INT 105
18786: PUSH
18787: LD_INT 106
18789: PUSH
18790: LD_INT 108
18792: PUSH
18793: LD_INT 116
18795: PUSH
18796: LD_INT 117
18798: PUSH
18799: LD_INT 118
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: ST_TO_ADDR
18816: GO 21599
18818: LD_INT 5
18820: DOUBLE
18821: EQUAL
18822: IFTRUE 18826
18824: GO 18938
18826: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18827: LD_ADDR_VAR 0 2
18831: PUSH
18832: LD_INT 2
18834: PUSH
18835: LD_INT 4
18837: PUSH
18838: LD_INT 5
18840: PUSH
18841: LD_INT 6
18843: PUSH
18844: LD_INT 8
18846: PUSH
18847: LD_INT 11
18849: PUSH
18850: LD_INT 12
18852: PUSH
18853: LD_INT 15
18855: PUSH
18856: LD_INT 16
18858: PUSH
18859: LD_INT 22
18861: PUSH
18862: LD_INT 23
18864: PUSH
18865: LD_INT 25
18867: PUSH
18868: LD_INT 26
18870: PUSH
18871: LD_INT 36
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 101
18892: PUSH
18893: LD_INT 102
18895: PUSH
18896: LD_INT 105
18898: PUSH
18899: LD_INT 106
18901: PUSH
18902: LD_INT 108
18904: PUSH
18905: LD_INT 109
18907: PUSH
18908: LD_INT 112
18910: PUSH
18911: LD_INT 116
18913: PUSH
18914: LD_INT 117
18916: PUSH
18917: LD_INT 118
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: ST_TO_ADDR
18936: GO 21599
18938: LD_INT 6
18940: DOUBLE
18941: EQUAL
18942: IFTRUE 18946
18944: GO 19078
18946: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18947: LD_ADDR_VAR 0 2
18951: PUSH
18952: LD_INT 2
18954: PUSH
18955: LD_INT 4
18957: PUSH
18958: LD_INT 5
18960: PUSH
18961: LD_INT 6
18963: PUSH
18964: LD_INT 8
18966: PUSH
18967: LD_INT 11
18969: PUSH
18970: LD_INT 12
18972: PUSH
18973: LD_INT 15
18975: PUSH
18976: LD_INT 16
18978: PUSH
18979: LD_INT 20
18981: PUSH
18982: LD_INT 21
18984: PUSH
18985: LD_INT 22
18987: PUSH
18988: LD_INT 23
18990: PUSH
18991: LD_INT 25
18993: PUSH
18994: LD_INT 26
18996: PUSH
18997: LD_INT 30
18999: PUSH
19000: LD_INT 31
19002: PUSH
19003: LD_INT 32
19005: PUSH
19006: LD_INT 36
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 101
19032: PUSH
19033: LD_INT 102
19035: PUSH
19036: LD_INT 105
19038: PUSH
19039: LD_INT 106
19041: PUSH
19042: LD_INT 108
19044: PUSH
19045: LD_INT 109
19047: PUSH
19048: LD_INT 112
19050: PUSH
19051: LD_INT 116
19053: PUSH
19054: LD_INT 117
19056: PUSH
19057: LD_INT 118
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: ST_TO_ADDR
19076: GO 21599
19078: LD_INT 7
19080: DOUBLE
19081: EQUAL
19082: IFTRUE 19086
19084: GO 19198
19086: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19087: LD_ADDR_VAR 0 2
19091: PUSH
19092: LD_INT 2
19094: PUSH
19095: LD_INT 4
19097: PUSH
19098: LD_INT 5
19100: PUSH
19101: LD_INT 7
19103: PUSH
19104: LD_INT 11
19106: PUSH
19107: LD_INT 12
19109: PUSH
19110: LD_INT 15
19112: PUSH
19113: LD_INT 16
19115: PUSH
19116: LD_INT 20
19118: PUSH
19119: LD_INT 21
19121: PUSH
19122: LD_INT 22
19124: PUSH
19125: LD_INT 23
19127: PUSH
19128: LD_INT 25
19130: PUSH
19131: LD_INT 26
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 101
19152: PUSH
19153: LD_INT 102
19155: PUSH
19156: LD_INT 103
19158: PUSH
19159: LD_INT 105
19161: PUSH
19162: LD_INT 106
19164: PUSH
19165: LD_INT 108
19167: PUSH
19168: LD_INT 112
19170: PUSH
19171: LD_INT 116
19173: PUSH
19174: LD_INT 117
19176: PUSH
19177: LD_INT 118
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: ST_TO_ADDR
19196: GO 21599
19198: LD_INT 8
19200: DOUBLE
19201: EQUAL
19202: IFTRUE 19206
19204: GO 19346
19206: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19207: LD_ADDR_VAR 0 2
19211: PUSH
19212: LD_INT 2
19214: PUSH
19215: LD_INT 4
19217: PUSH
19218: LD_INT 5
19220: PUSH
19221: LD_INT 6
19223: PUSH
19224: LD_INT 7
19226: PUSH
19227: LD_INT 8
19229: PUSH
19230: LD_INT 11
19232: PUSH
19233: LD_INT 12
19235: PUSH
19236: LD_INT 15
19238: PUSH
19239: LD_INT 16
19241: PUSH
19242: LD_INT 20
19244: PUSH
19245: LD_INT 21
19247: PUSH
19248: LD_INT 22
19250: PUSH
19251: LD_INT 23
19253: PUSH
19254: LD_INT 25
19256: PUSH
19257: LD_INT 26
19259: PUSH
19260: LD_INT 30
19262: PUSH
19263: LD_INT 31
19265: PUSH
19266: LD_INT 32
19268: PUSH
19269: LD_INT 36
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 101
19296: PUSH
19297: LD_INT 102
19299: PUSH
19300: LD_INT 103
19302: PUSH
19303: LD_INT 105
19305: PUSH
19306: LD_INT 106
19308: PUSH
19309: LD_INT 108
19311: PUSH
19312: LD_INT 109
19314: PUSH
19315: LD_INT 112
19317: PUSH
19318: LD_INT 116
19320: PUSH
19321: LD_INT 117
19323: PUSH
19324: LD_INT 118
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: ST_TO_ADDR
19344: GO 21599
19346: LD_INT 9
19348: DOUBLE
19349: EQUAL
19350: IFTRUE 19354
19352: GO 19502
19354: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19355: LD_ADDR_VAR 0 2
19359: PUSH
19360: LD_INT 2
19362: PUSH
19363: LD_INT 4
19365: PUSH
19366: LD_INT 5
19368: PUSH
19369: LD_INT 6
19371: PUSH
19372: LD_INT 7
19374: PUSH
19375: LD_INT 8
19377: PUSH
19378: LD_INT 11
19380: PUSH
19381: LD_INT 12
19383: PUSH
19384: LD_INT 15
19386: PUSH
19387: LD_INT 16
19389: PUSH
19390: LD_INT 20
19392: PUSH
19393: LD_INT 21
19395: PUSH
19396: LD_INT 22
19398: PUSH
19399: LD_INT 23
19401: PUSH
19402: LD_INT 25
19404: PUSH
19405: LD_INT 26
19407: PUSH
19408: LD_INT 28
19410: PUSH
19411: LD_INT 30
19413: PUSH
19414: LD_INT 31
19416: PUSH
19417: LD_INT 32
19419: PUSH
19420: LD_INT 36
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 101
19448: PUSH
19449: LD_INT 102
19451: PUSH
19452: LD_INT 103
19454: PUSH
19455: LD_INT 105
19457: PUSH
19458: LD_INT 106
19460: PUSH
19461: LD_INT 108
19463: PUSH
19464: LD_INT 109
19466: PUSH
19467: LD_INT 112
19469: PUSH
19470: LD_INT 114
19472: PUSH
19473: LD_INT 116
19475: PUSH
19476: LD_INT 117
19478: PUSH
19479: LD_INT 118
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: ST_TO_ADDR
19500: GO 21599
19502: LD_INT 10
19504: DOUBLE
19505: EQUAL
19506: IFTRUE 19510
19508: GO 19706
19510: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19511: LD_ADDR_VAR 0 2
19515: PUSH
19516: LD_INT 2
19518: PUSH
19519: LD_INT 4
19521: PUSH
19522: LD_INT 5
19524: PUSH
19525: LD_INT 6
19527: PUSH
19528: LD_INT 7
19530: PUSH
19531: LD_INT 8
19533: PUSH
19534: LD_INT 9
19536: PUSH
19537: LD_INT 10
19539: PUSH
19540: LD_INT 11
19542: PUSH
19543: LD_INT 12
19545: PUSH
19546: LD_INT 13
19548: PUSH
19549: LD_INT 14
19551: PUSH
19552: LD_INT 15
19554: PUSH
19555: LD_INT 16
19557: PUSH
19558: LD_INT 17
19560: PUSH
19561: LD_INT 18
19563: PUSH
19564: LD_INT 19
19566: PUSH
19567: LD_INT 20
19569: PUSH
19570: LD_INT 21
19572: PUSH
19573: LD_INT 22
19575: PUSH
19576: LD_INT 23
19578: PUSH
19579: LD_INT 24
19581: PUSH
19582: LD_INT 25
19584: PUSH
19585: LD_INT 26
19587: PUSH
19588: LD_INT 28
19590: PUSH
19591: LD_INT 30
19593: PUSH
19594: LD_INT 31
19596: PUSH
19597: LD_INT 32
19599: PUSH
19600: LD_INT 36
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 101
19636: PUSH
19637: LD_INT 102
19639: PUSH
19640: LD_INT 103
19642: PUSH
19643: LD_INT 104
19645: PUSH
19646: LD_INT 105
19648: PUSH
19649: LD_INT 106
19651: PUSH
19652: LD_INT 107
19654: PUSH
19655: LD_INT 108
19657: PUSH
19658: LD_INT 109
19660: PUSH
19661: LD_INT 110
19663: PUSH
19664: LD_INT 111
19666: PUSH
19667: LD_INT 112
19669: PUSH
19670: LD_INT 114
19672: PUSH
19673: LD_INT 116
19675: PUSH
19676: LD_INT 117
19678: PUSH
19679: LD_INT 118
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: ST_TO_ADDR
19704: GO 21599
19706: LD_INT 11
19708: DOUBLE
19709: EQUAL
19710: IFTRUE 19714
19712: GO 19918
19714: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19715: LD_ADDR_VAR 0 2
19719: PUSH
19720: LD_INT 2
19722: PUSH
19723: LD_INT 3
19725: PUSH
19726: LD_INT 4
19728: PUSH
19729: LD_INT 5
19731: PUSH
19732: LD_INT 6
19734: PUSH
19735: LD_INT 7
19737: PUSH
19738: LD_INT 8
19740: PUSH
19741: LD_INT 9
19743: PUSH
19744: LD_INT 10
19746: PUSH
19747: LD_INT 11
19749: PUSH
19750: LD_INT 12
19752: PUSH
19753: LD_INT 13
19755: PUSH
19756: LD_INT 14
19758: PUSH
19759: LD_INT 15
19761: PUSH
19762: LD_INT 16
19764: PUSH
19765: LD_INT 17
19767: PUSH
19768: LD_INT 18
19770: PUSH
19771: LD_INT 19
19773: PUSH
19774: LD_INT 20
19776: PUSH
19777: LD_INT 21
19779: PUSH
19780: LD_INT 22
19782: PUSH
19783: LD_INT 23
19785: PUSH
19786: LD_INT 24
19788: PUSH
19789: LD_INT 25
19791: PUSH
19792: LD_INT 26
19794: PUSH
19795: LD_INT 28
19797: PUSH
19798: LD_INT 30
19800: PUSH
19801: LD_INT 31
19803: PUSH
19804: LD_INT 32
19806: PUSH
19807: LD_INT 34
19809: PUSH
19810: LD_INT 36
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 101
19848: PUSH
19849: LD_INT 102
19851: PUSH
19852: LD_INT 103
19854: PUSH
19855: LD_INT 104
19857: PUSH
19858: LD_INT 105
19860: PUSH
19861: LD_INT 106
19863: PUSH
19864: LD_INT 107
19866: PUSH
19867: LD_INT 108
19869: PUSH
19870: LD_INT 109
19872: PUSH
19873: LD_INT 110
19875: PUSH
19876: LD_INT 111
19878: PUSH
19879: LD_INT 112
19881: PUSH
19882: LD_INT 114
19884: PUSH
19885: LD_INT 116
19887: PUSH
19888: LD_INT 117
19890: PUSH
19891: LD_INT 118
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: ST_TO_ADDR
19916: GO 21599
19918: LD_INT 12
19920: DOUBLE
19921: EQUAL
19922: IFTRUE 19926
19924: GO 20146
19926: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19927: LD_ADDR_VAR 0 2
19931: PUSH
19932: LD_INT 1
19934: PUSH
19935: LD_INT 2
19937: PUSH
19938: LD_INT 3
19940: PUSH
19941: LD_INT 4
19943: PUSH
19944: LD_INT 5
19946: PUSH
19947: LD_INT 6
19949: PUSH
19950: LD_INT 7
19952: PUSH
19953: LD_INT 8
19955: PUSH
19956: LD_INT 9
19958: PUSH
19959: LD_INT 10
19961: PUSH
19962: LD_INT 11
19964: PUSH
19965: LD_INT 12
19967: PUSH
19968: LD_INT 13
19970: PUSH
19971: LD_INT 14
19973: PUSH
19974: LD_INT 15
19976: PUSH
19977: LD_INT 16
19979: PUSH
19980: LD_INT 17
19982: PUSH
19983: LD_INT 18
19985: PUSH
19986: LD_INT 19
19988: PUSH
19989: LD_INT 20
19991: PUSH
19992: LD_INT 21
19994: PUSH
19995: LD_INT 22
19997: PUSH
19998: LD_INT 23
20000: PUSH
20001: LD_INT 24
20003: PUSH
20004: LD_INT 25
20006: PUSH
20007: LD_INT 26
20009: PUSH
20010: LD_INT 27
20012: PUSH
20013: LD_INT 28
20015: PUSH
20016: LD_INT 30
20018: PUSH
20019: LD_INT 31
20021: PUSH
20022: LD_INT 32
20024: PUSH
20025: LD_INT 33
20027: PUSH
20028: LD_INT 34
20030: PUSH
20031: LD_INT 36
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 101
20072: PUSH
20073: LD_INT 102
20075: PUSH
20076: LD_INT 103
20078: PUSH
20079: LD_INT 104
20081: PUSH
20082: LD_INT 105
20084: PUSH
20085: LD_INT 106
20087: PUSH
20088: LD_INT 107
20090: PUSH
20091: LD_INT 108
20093: PUSH
20094: LD_INT 109
20096: PUSH
20097: LD_INT 110
20099: PUSH
20100: LD_INT 111
20102: PUSH
20103: LD_INT 112
20105: PUSH
20106: LD_INT 113
20108: PUSH
20109: LD_INT 114
20111: PUSH
20112: LD_INT 116
20114: PUSH
20115: LD_INT 117
20117: PUSH
20118: LD_INT 118
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: ST_TO_ADDR
20144: GO 21599
20146: LD_INT 13
20148: DOUBLE
20149: EQUAL
20150: IFTRUE 20154
20152: GO 20362
20154: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20155: LD_ADDR_VAR 0 2
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: LD_INT 2
20165: PUSH
20166: LD_INT 3
20168: PUSH
20169: LD_INT 4
20171: PUSH
20172: LD_INT 5
20174: PUSH
20175: LD_INT 8
20177: PUSH
20178: LD_INT 9
20180: PUSH
20181: LD_INT 10
20183: PUSH
20184: LD_INT 11
20186: PUSH
20187: LD_INT 12
20189: PUSH
20190: LD_INT 14
20192: PUSH
20193: LD_INT 15
20195: PUSH
20196: LD_INT 16
20198: PUSH
20199: LD_INT 17
20201: PUSH
20202: LD_INT 18
20204: PUSH
20205: LD_INT 19
20207: PUSH
20208: LD_INT 20
20210: PUSH
20211: LD_INT 21
20213: PUSH
20214: LD_INT 22
20216: PUSH
20217: LD_INT 23
20219: PUSH
20220: LD_INT 24
20222: PUSH
20223: LD_INT 25
20225: PUSH
20226: LD_INT 26
20228: PUSH
20229: LD_INT 27
20231: PUSH
20232: LD_INT 28
20234: PUSH
20235: LD_INT 30
20237: PUSH
20238: LD_INT 31
20240: PUSH
20241: LD_INT 32
20243: PUSH
20244: LD_INT 33
20246: PUSH
20247: LD_INT 34
20249: PUSH
20250: LD_INT 36
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 101
20288: PUSH
20289: LD_INT 102
20291: PUSH
20292: LD_INT 103
20294: PUSH
20295: LD_INT 104
20297: PUSH
20298: LD_INT 105
20300: PUSH
20301: LD_INT 106
20303: PUSH
20304: LD_INT 107
20306: PUSH
20307: LD_INT 108
20309: PUSH
20310: LD_INT 109
20312: PUSH
20313: LD_INT 110
20315: PUSH
20316: LD_INT 111
20318: PUSH
20319: LD_INT 112
20321: PUSH
20322: LD_INT 113
20324: PUSH
20325: LD_INT 114
20327: PUSH
20328: LD_INT 116
20330: PUSH
20331: LD_INT 117
20333: PUSH
20334: LD_INT 118
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: ST_TO_ADDR
20360: GO 21599
20362: LD_INT 14
20364: DOUBLE
20365: EQUAL
20366: IFTRUE 20370
20368: GO 20594
20370: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20371: LD_ADDR_VAR 0 2
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: LD_INT 3
20384: PUSH
20385: LD_INT 4
20387: PUSH
20388: LD_INT 5
20390: PUSH
20391: LD_INT 6
20393: PUSH
20394: LD_INT 7
20396: PUSH
20397: LD_INT 8
20399: PUSH
20400: LD_INT 9
20402: PUSH
20403: LD_INT 10
20405: PUSH
20406: LD_INT 11
20408: PUSH
20409: LD_INT 12
20411: PUSH
20412: LD_INT 13
20414: PUSH
20415: LD_INT 14
20417: PUSH
20418: LD_INT 15
20420: PUSH
20421: LD_INT 16
20423: PUSH
20424: LD_INT 17
20426: PUSH
20427: LD_INT 18
20429: PUSH
20430: LD_INT 19
20432: PUSH
20433: LD_INT 20
20435: PUSH
20436: LD_INT 21
20438: PUSH
20439: LD_INT 22
20441: PUSH
20442: LD_INT 23
20444: PUSH
20445: LD_INT 24
20447: PUSH
20448: LD_INT 25
20450: PUSH
20451: LD_INT 26
20453: PUSH
20454: LD_INT 27
20456: PUSH
20457: LD_INT 28
20459: PUSH
20460: LD_INT 29
20462: PUSH
20463: LD_INT 30
20465: PUSH
20466: LD_INT 31
20468: PUSH
20469: LD_INT 32
20471: PUSH
20472: LD_INT 33
20474: PUSH
20475: LD_INT 34
20477: PUSH
20478: LD_INT 36
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 101
20520: PUSH
20521: LD_INT 102
20523: PUSH
20524: LD_INT 103
20526: PUSH
20527: LD_INT 104
20529: PUSH
20530: LD_INT 105
20532: PUSH
20533: LD_INT 106
20535: PUSH
20536: LD_INT 107
20538: PUSH
20539: LD_INT 108
20541: PUSH
20542: LD_INT 109
20544: PUSH
20545: LD_INT 110
20547: PUSH
20548: LD_INT 111
20550: PUSH
20551: LD_INT 112
20553: PUSH
20554: LD_INT 113
20556: PUSH
20557: LD_INT 114
20559: PUSH
20560: LD_INT 116
20562: PUSH
20563: LD_INT 117
20565: PUSH
20566: LD_INT 118
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: ST_TO_ADDR
20592: GO 21599
20594: LD_INT 15
20596: DOUBLE
20597: EQUAL
20598: IFTRUE 20602
20600: GO 20826
20602: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20603: LD_ADDR_VAR 0 2
20607: PUSH
20608: LD_INT 1
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: LD_INT 3
20616: PUSH
20617: LD_INT 4
20619: PUSH
20620: LD_INT 5
20622: PUSH
20623: LD_INT 6
20625: PUSH
20626: LD_INT 7
20628: PUSH
20629: LD_INT 8
20631: PUSH
20632: LD_INT 9
20634: PUSH
20635: LD_INT 10
20637: PUSH
20638: LD_INT 11
20640: PUSH
20641: LD_INT 12
20643: PUSH
20644: LD_INT 13
20646: PUSH
20647: LD_INT 14
20649: PUSH
20650: LD_INT 15
20652: PUSH
20653: LD_INT 16
20655: PUSH
20656: LD_INT 17
20658: PUSH
20659: LD_INT 18
20661: PUSH
20662: LD_INT 19
20664: PUSH
20665: LD_INT 20
20667: PUSH
20668: LD_INT 21
20670: PUSH
20671: LD_INT 22
20673: PUSH
20674: LD_INT 23
20676: PUSH
20677: LD_INT 24
20679: PUSH
20680: LD_INT 25
20682: PUSH
20683: LD_INT 26
20685: PUSH
20686: LD_INT 27
20688: PUSH
20689: LD_INT 28
20691: PUSH
20692: LD_INT 29
20694: PUSH
20695: LD_INT 30
20697: PUSH
20698: LD_INT 31
20700: PUSH
20701: LD_INT 32
20703: PUSH
20704: LD_INT 33
20706: PUSH
20707: LD_INT 34
20709: PUSH
20710: LD_INT 36
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 101
20752: PUSH
20753: LD_INT 102
20755: PUSH
20756: LD_INT 103
20758: PUSH
20759: LD_INT 104
20761: PUSH
20762: LD_INT 105
20764: PUSH
20765: LD_INT 106
20767: PUSH
20768: LD_INT 107
20770: PUSH
20771: LD_INT 108
20773: PUSH
20774: LD_INT 109
20776: PUSH
20777: LD_INT 110
20779: PUSH
20780: LD_INT 111
20782: PUSH
20783: LD_INT 112
20785: PUSH
20786: LD_INT 113
20788: PUSH
20789: LD_INT 114
20791: PUSH
20792: LD_INT 116
20794: PUSH
20795: LD_INT 117
20797: PUSH
20798: LD_INT 118
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: ST_TO_ADDR
20824: GO 21599
20826: LD_INT 16
20828: DOUBLE
20829: EQUAL
20830: IFTRUE 20834
20832: GO 20970
20834: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20835: LD_ADDR_VAR 0 2
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: LD_INT 4
20845: PUSH
20846: LD_INT 5
20848: PUSH
20849: LD_INT 7
20851: PUSH
20852: LD_INT 11
20854: PUSH
20855: LD_INT 12
20857: PUSH
20858: LD_INT 15
20860: PUSH
20861: LD_INT 16
20863: PUSH
20864: LD_INT 20
20866: PUSH
20867: LD_INT 21
20869: PUSH
20870: LD_INT 22
20872: PUSH
20873: LD_INT 23
20875: PUSH
20876: LD_INT 25
20878: PUSH
20879: LD_INT 26
20881: PUSH
20882: LD_INT 30
20884: PUSH
20885: LD_INT 31
20887: PUSH
20888: LD_INT 32
20890: PUSH
20891: LD_INT 33
20893: PUSH
20894: LD_INT 34
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 101
20920: PUSH
20921: LD_INT 102
20923: PUSH
20924: LD_INT 103
20926: PUSH
20927: LD_INT 106
20929: PUSH
20930: LD_INT 108
20932: PUSH
20933: LD_INT 112
20935: PUSH
20936: LD_INT 113
20938: PUSH
20939: LD_INT 114
20941: PUSH
20942: LD_INT 116
20944: PUSH
20945: LD_INT 117
20947: PUSH
20948: LD_INT 118
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: ST_TO_ADDR
20968: GO 21599
20970: LD_INT 17
20972: DOUBLE
20973: EQUAL
20974: IFTRUE 20978
20976: GO 21202
20978: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20979: LD_ADDR_VAR 0 2
20983: PUSH
20984: LD_INT 1
20986: PUSH
20987: LD_INT 2
20989: PUSH
20990: LD_INT 3
20992: PUSH
20993: LD_INT 4
20995: PUSH
20996: LD_INT 5
20998: PUSH
20999: LD_INT 6
21001: PUSH
21002: LD_INT 7
21004: PUSH
21005: LD_INT 8
21007: PUSH
21008: LD_INT 9
21010: PUSH
21011: LD_INT 10
21013: PUSH
21014: LD_INT 11
21016: PUSH
21017: LD_INT 12
21019: PUSH
21020: LD_INT 13
21022: PUSH
21023: LD_INT 14
21025: PUSH
21026: LD_INT 15
21028: PUSH
21029: LD_INT 16
21031: PUSH
21032: LD_INT 17
21034: PUSH
21035: LD_INT 18
21037: PUSH
21038: LD_INT 19
21040: PUSH
21041: LD_INT 20
21043: PUSH
21044: LD_INT 21
21046: PUSH
21047: LD_INT 22
21049: PUSH
21050: LD_INT 23
21052: PUSH
21053: LD_INT 24
21055: PUSH
21056: LD_INT 25
21058: PUSH
21059: LD_INT 26
21061: PUSH
21062: LD_INT 27
21064: PUSH
21065: LD_INT 28
21067: PUSH
21068: LD_INT 29
21070: PUSH
21071: LD_INT 30
21073: PUSH
21074: LD_INT 31
21076: PUSH
21077: LD_INT 32
21079: PUSH
21080: LD_INT 33
21082: PUSH
21083: LD_INT 34
21085: PUSH
21086: LD_INT 36
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 101
21128: PUSH
21129: LD_INT 102
21131: PUSH
21132: LD_INT 103
21134: PUSH
21135: LD_INT 104
21137: PUSH
21138: LD_INT 105
21140: PUSH
21141: LD_INT 106
21143: PUSH
21144: LD_INT 107
21146: PUSH
21147: LD_INT 108
21149: PUSH
21150: LD_INT 109
21152: PUSH
21153: LD_INT 110
21155: PUSH
21156: LD_INT 111
21158: PUSH
21159: LD_INT 112
21161: PUSH
21162: LD_INT 113
21164: PUSH
21165: LD_INT 114
21167: PUSH
21168: LD_INT 116
21170: PUSH
21171: LD_INT 117
21173: PUSH
21174: LD_INT 118
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: ST_TO_ADDR
21200: GO 21599
21202: LD_INT 18
21204: DOUBLE
21205: EQUAL
21206: IFTRUE 21210
21208: GO 21358
21210: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21211: LD_ADDR_VAR 0 2
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: LD_INT 4
21221: PUSH
21222: LD_INT 5
21224: PUSH
21225: LD_INT 7
21227: PUSH
21228: LD_INT 11
21230: PUSH
21231: LD_INT 12
21233: PUSH
21234: LD_INT 15
21236: PUSH
21237: LD_INT 16
21239: PUSH
21240: LD_INT 20
21242: PUSH
21243: LD_INT 21
21245: PUSH
21246: LD_INT 22
21248: PUSH
21249: LD_INT 23
21251: PUSH
21252: LD_INT 25
21254: PUSH
21255: LD_INT 26
21257: PUSH
21258: LD_INT 30
21260: PUSH
21261: LD_INT 31
21263: PUSH
21264: LD_INT 32
21266: PUSH
21267: LD_INT 33
21269: PUSH
21270: LD_INT 34
21272: PUSH
21273: LD_INT 35
21275: PUSH
21276: LD_INT 36
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 101
21304: PUSH
21305: LD_INT 102
21307: PUSH
21308: LD_INT 103
21310: PUSH
21311: LD_INT 106
21313: PUSH
21314: LD_INT 108
21316: PUSH
21317: LD_INT 112
21319: PUSH
21320: LD_INT 113
21322: PUSH
21323: LD_INT 114
21325: PUSH
21326: LD_INT 115
21328: PUSH
21329: LD_INT 116
21331: PUSH
21332: LD_INT 117
21334: PUSH
21335: LD_INT 118
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: ST_TO_ADDR
21356: GO 21599
21358: LD_INT 19
21360: DOUBLE
21361: EQUAL
21362: IFTRUE 21366
21364: GO 21598
21366: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21367: LD_ADDR_VAR 0 2
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: LD_INT 2
21377: PUSH
21378: LD_INT 3
21380: PUSH
21381: LD_INT 4
21383: PUSH
21384: LD_INT 5
21386: PUSH
21387: LD_INT 6
21389: PUSH
21390: LD_INT 7
21392: PUSH
21393: LD_INT 8
21395: PUSH
21396: LD_INT 9
21398: PUSH
21399: LD_INT 10
21401: PUSH
21402: LD_INT 11
21404: PUSH
21405: LD_INT 12
21407: PUSH
21408: LD_INT 13
21410: PUSH
21411: LD_INT 14
21413: PUSH
21414: LD_INT 15
21416: PUSH
21417: LD_INT 16
21419: PUSH
21420: LD_INT 17
21422: PUSH
21423: LD_INT 18
21425: PUSH
21426: LD_INT 19
21428: PUSH
21429: LD_INT 20
21431: PUSH
21432: LD_INT 21
21434: PUSH
21435: LD_INT 22
21437: PUSH
21438: LD_INT 23
21440: PUSH
21441: LD_INT 24
21443: PUSH
21444: LD_INT 25
21446: PUSH
21447: LD_INT 26
21449: PUSH
21450: LD_INT 27
21452: PUSH
21453: LD_INT 28
21455: PUSH
21456: LD_INT 29
21458: PUSH
21459: LD_INT 30
21461: PUSH
21462: LD_INT 31
21464: PUSH
21465: LD_INT 32
21467: PUSH
21468: LD_INT 33
21470: PUSH
21471: LD_INT 34
21473: PUSH
21474: LD_INT 35
21476: PUSH
21477: LD_INT 36
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 101
21520: PUSH
21521: LD_INT 102
21523: PUSH
21524: LD_INT 103
21526: PUSH
21527: LD_INT 104
21529: PUSH
21530: LD_INT 105
21532: PUSH
21533: LD_INT 106
21535: PUSH
21536: LD_INT 107
21538: PUSH
21539: LD_INT 108
21541: PUSH
21542: LD_INT 109
21544: PUSH
21545: LD_INT 110
21547: PUSH
21548: LD_INT 111
21550: PUSH
21551: LD_INT 112
21553: PUSH
21554: LD_INT 113
21556: PUSH
21557: LD_INT 114
21559: PUSH
21560: LD_INT 115
21562: PUSH
21563: LD_INT 116
21565: PUSH
21566: LD_INT 117
21568: PUSH
21569: LD_INT 118
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: ST_TO_ADDR
21596: GO 21599
21598: POP
// end else
21599: GO 21830
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21601: LD_ADDR_VAR 0 2
21605: PUSH
21606: LD_INT 1
21608: PUSH
21609: LD_INT 2
21611: PUSH
21612: LD_INT 3
21614: PUSH
21615: LD_INT 4
21617: PUSH
21618: LD_INT 5
21620: PUSH
21621: LD_INT 6
21623: PUSH
21624: LD_INT 7
21626: PUSH
21627: LD_INT 8
21629: PUSH
21630: LD_INT 9
21632: PUSH
21633: LD_INT 10
21635: PUSH
21636: LD_INT 11
21638: PUSH
21639: LD_INT 12
21641: PUSH
21642: LD_INT 13
21644: PUSH
21645: LD_INT 14
21647: PUSH
21648: LD_INT 15
21650: PUSH
21651: LD_INT 16
21653: PUSH
21654: LD_INT 17
21656: PUSH
21657: LD_INT 18
21659: PUSH
21660: LD_INT 19
21662: PUSH
21663: LD_INT 20
21665: PUSH
21666: LD_INT 21
21668: PUSH
21669: LD_INT 22
21671: PUSH
21672: LD_INT 23
21674: PUSH
21675: LD_INT 24
21677: PUSH
21678: LD_INT 25
21680: PUSH
21681: LD_INT 26
21683: PUSH
21684: LD_INT 27
21686: PUSH
21687: LD_INT 28
21689: PUSH
21690: LD_INT 29
21692: PUSH
21693: LD_INT 30
21695: PUSH
21696: LD_INT 31
21698: PUSH
21699: LD_INT 32
21701: PUSH
21702: LD_INT 33
21704: PUSH
21705: LD_INT 34
21707: PUSH
21708: LD_INT 35
21710: PUSH
21711: LD_INT 36
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 101
21754: PUSH
21755: LD_INT 102
21757: PUSH
21758: LD_INT 103
21760: PUSH
21761: LD_INT 104
21763: PUSH
21764: LD_INT 105
21766: PUSH
21767: LD_INT 106
21769: PUSH
21770: LD_INT 107
21772: PUSH
21773: LD_INT 108
21775: PUSH
21776: LD_INT 109
21778: PUSH
21779: LD_INT 110
21781: PUSH
21782: LD_INT 111
21784: PUSH
21785: LD_INT 112
21787: PUSH
21788: LD_INT 113
21790: PUSH
21791: LD_INT 114
21793: PUSH
21794: LD_INT 115
21796: PUSH
21797: LD_INT 116
21799: PUSH
21800: LD_INT 117
21802: PUSH
21803: LD_INT 118
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: ST_TO_ADDR
// if result then
21830: LD_VAR 0 2
21834: IFFALSE 22620
// begin normal :=  ;
21836: LD_ADDR_VAR 0 5
21840: PUSH
21841: LD_STRING 
21843: ST_TO_ADDR
// hardcore :=  ;
21844: LD_ADDR_VAR 0 6
21848: PUSH
21849: LD_STRING 
21851: ST_TO_ADDR
// active :=  ;
21852: LD_ADDR_VAR 0 7
21856: PUSH
21857: LD_STRING 
21859: ST_TO_ADDR
// for i = 1 to normalCounter do
21860: LD_ADDR_VAR 0 8
21864: PUSH
21865: DOUBLE
21866: LD_INT 1
21868: DEC
21869: ST_TO_ADDR
21870: LD_EXP 38
21874: PUSH
21875: FOR_TO
21876: IFFALSE 21977
// begin tmp := 0 ;
21878: LD_ADDR_VAR 0 3
21882: PUSH
21883: LD_STRING 0
21885: ST_TO_ADDR
// if result [ 1 ] then
21886: LD_VAR 0 2
21890: PUSH
21891: LD_INT 1
21893: ARRAY
21894: IFFALSE 21959
// if result [ 1 ] [ 1 ] = i then
21896: LD_VAR 0 2
21900: PUSH
21901: LD_INT 1
21903: ARRAY
21904: PUSH
21905: LD_INT 1
21907: ARRAY
21908: PUSH
21909: LD_VAR 0 8
21913: EQUAL
21914: IFFALSE 21959
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21916: LD_ADDR_VAR 0 2
21920: PUSH
21921: LD_VAR 0 2
21925: PPUSH
21926: LD_INT 1
21928: PPUSH
21929: LD_VAR 0 2
21933: PUSH
21934: LD_INT 1
21936: ARRAY
21937: PPUSH
21938: LD_INT 1
21940: PPUSH
21941: CALL_OW 3
21945: PPUSH
21946: CALL_OW 1
21950: ST_TO_ADDR
// tmp := 1 ;
21951: LD_ADDR_VAR 0 3
21955: PUSH
21956: LD_STRING 1
21958: ST_TO_ADDR
// end ; normal := normal & tmp ;
21959: LD_ADDR_VAR 0 5
21963: PUSH
21964: LD_VAR 0 5
21968: PUSH
21969: LD_VAR 0 3
21973: STR
21974: ST_TO_ADDR
// end ;
21975: GO 21875
21977: POP
21978: POP
// for i = 1 to hardcoreCounter do
21979: LD_ADDR_VAR 0 8
21983: PUSH
21984: DOUBLE
21985: LD_INT 1
21987: DEC
21988: ST_TO_ADDR
21989: LD_EXP 39
21993: PUSH
21994: FOR_TO
21995: IFFALSE 22100
// begin tmp := 0 ;
21997: LD_ADDR_VAR 0 3
22001: PUSH
22002: LD_STRING 0
22004: ST_TO_ADDR
// if result [ 2 ] then
22005: LD_VAR 0 2
22009: PUSH
22010: LD_INT 2
22012: ARRAY
22013: IFFALSE 22082
// if result [ 2 ] [ 1 ] = 100 + i then
22015: LD_VAR 0 2
22019: PUSH
22020: LD_INT 2
22022: ARRAY
22023: PUSH
22024: LD_INT 1
22026: ARRAY
22027: PUSH
22028: LD_INT 100
22030: PUSH
22031: LD_VAR 0 8
22035: PLUS
22036: EQUAL
22037: IFFALSE 22082
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22039: LD_ADDR_VAR 0 2
22043: PUSH
22044: LD_VAR 0 2
22048: PPUSH
22049: LD_INT 2
22051: PPUSH
22052: LD_VAR 0 2
22056: PUSH
22057: LD_INT 2
22059: ARRAY
22060: PPUSH
22061: LD_INT 1
22063: PPUSH
22064: CALL_OW 3
22068: PPUSH
22069: CALL_OW 1
22073: ST_TO_ADDR
// tmp := 1 ;
22074: LD_ADDR_VAR 0 3
22078: PUSH
22079: LD_STRING 1
22081: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22082: LD_ADDR_VAR 0 6
22086: PUSH
22087: LD_VAR 0 6
22091: PUSH
22092: LD_VAR 0 3
22096: STR
22097: ST_TO_ADDR
// end ;
22098: GO 21994
22100: POP
22101: POP
// if isGameLoad then
22102: LD_VAR 0 1
22106: IFFALSE 22581
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22108: LD_ADDR_VAR 0 4
22112: PUSH
22113: LD_EXP 42
22117: PUSH
22118: LD_EXP 41
22122: PUSH
22123: LD_EXP 43
22127: PUSH
22128: LD_EXP 40
22132: PUSH
22133: LD_EXP 44
22137: PUSH
22138: LD_EXP 45
22142: PUSH
22143: LD_EXP 46
22147: PUSH
22148: LD_EXP 47
22152: PUSH
22153: LD_EXP 48
22157: PUSH
22158: LD_EXP 49
22162: PUSH
22163: LD_EXP 50
22167: PUSH
22168: LD_EXP 51
22172: PUSH
22173: LD_EXP 52
22177: PUSH
22178: LD_EXP 53
22182: PUSH
22183: LD_EXP 61
22187: PUSH
22188: LD_EXP 62
22192: PUSH
22193: LD_EXP 63
22197: PUSH
22198: LD_EXP 64
22202: PUSH
22203: LD_EXP 66
22207: PUSH
22208: LD_EXP 67
22212: PUSH
22213: LD_EXP 68
22217: PUSH
22218: LD_EXP 71
22222: PUSH
22223: LD_EXP 73
22227: PUSH
22228: LD_EXP 74
22232: PUSH
22233: LD_EXP 75
22237: PUSH
22238: LD_EXP 77
22242: PUSH
22243: LD_EXP 78
22247: PUSH
22248: LD_EXP 81
22252: PUSH
22253: LD_EXP 82
22257: PUSH
22258: LD_EXP 83
22262: PUSH
22263: LD_EXP 84
22267: PUSH
22268: LD_EXP 85
22272: PUSH
22273: LD_EXP 86
22277: PUSH
22278: LD_EXP 87
22282: PUSH
22283: LD_EXP 88
22287: PUSH
22288: LD_EXP 89
22292: PUSH
22293: LD_EXP 54
22297: PUSH
22298: LD_EXP 55
22302: PUSH
22303: LD_EXP 58
22307: PUSH
22308: LD_EXP 59
22312: PUSH
22313: LD_EXP 60
22317: PUSH
22318: LD_EXP 56
22322: PUSH
22323: LD_EXP 57
22327: PUSH
22328: LD_EXP 65
22332: PUSH
22333: LD_EXP 69
22337: PUSH
22338: LD_EXP 70
22342: PUSH
22343: LD_EXP 72
22347: PUSH
22348: LD_EXP 76
22352: PUSH
22353: LD_EXP 79
22357: PUSH
22358: LD_EXP 80
22362: PUSH
22363: LD_EXP 90
22367: PUSH
22368: LD_EXP 91
22372: PUSH
22373: LD_EXP 92
22377: PUSH
22378: LD_EXP 93
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: ST_TO_ADDR
// tmp :=  ;
22439: LD_ADDR_VAR 0 3
22443: PUSH
22444: LD_STRING 
22446: ST_TO_ADDR
// for i = 1 to normalCounter do
22447: LD_ADDR_VAR 0 8
22451: PUSH
22452: DOUBLE
22453: LD_INT 1
22455: DEC
22456: ST_TO_ADDR
22457: LD_EXP 38
22461: PUSH
22462: FOR_TO
22463: IFFALSE 22499
// begin if flags [ i ] then
22465: LD_VAR 0 4
22469: PUSH
22470: LD_VAR 0 8
22474: ARRAY
22475: IFFALSE 22497
// tmp := tmp & i & ; ;
22477: LD_ADDR_VAR 0 3
22481: PUSH
22482: LD_VAR 0 3
22486: PUSH
22487: LD_VAR 0 8
22491: STR
22492: PUSH
22493: LD_STRING ;
22495: STR
22496: ST_TO_ADDR
// end ;
22497: GO 22462
22499: POP
22500: POP
// for i = 1 to hardcoreCounter do
22501: LD_ADDR_VAR 0 8
22505: PUSH
22506: DOUBLE
22507: LD_INT 1
22509: DEC
22510: ST_TO_ADDR
22511: LD_EXP 39
22515: PUSH
22516: FOR_TO
22517: IFFALSE 22563
// begin if flags [ normalCounter + i ] then
22519: LD_VAR 0 4
22523: PUSH
22524: LD_EXP 38
22528: PUSH
22529: LD_VAR 0 8
22533: PLUS
22534: ARRAY
22535: IFFALSE 22561
// tmp := tmp & ( 100 + i ) & ; ;
22537: LD_ADDR_VAR 0 3
22541: PUSH
22542: LD_VAR 0 3
22546: PUSH
22547: LD_INT 100
22549: PUSH
22550: LD_VAR 0 8
22554: PLUS
22555: STR
22556: PUSH
22557: LD_STRING ;
22559: STR
22560: ST_TO_ADDR
// end ;
22561: GO 22516
22563: POP
22564: POP
// if tmp then
22565: LD_VAR 0 3
22569: IFFALSE 22581
// active := tmp ;
22571: LD_ADDR_VAR 0 7
22575: PUSH
22576: LD_VAR 0 3
22580: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22581: LD_STRING getStreamItemsFromMission("
22583: PUSH
22584: LD_VAR 0 5
22588: STR
22589: PUSH
22590: LD_STRING ","
22592: STR
22593: PUSH
22594: LD_VAR 0 6
22598: STR
22599: PUSH
22600: LD_STRING ","
22602: STR
22603: PUSH
22604: LD_VAR 0 7
22608: STR
22609: PUSH
22610: LD_STRING ")
22612: STR
22613: PPUSH
22614: CALL_OW 559
// end else
22618: GO 22627
// ToLua ( getStreamItemsFromMission("","","") ) ;
22620: LD_STRING getStreamItemsFromMission("","","")
22622: PPUSH
22623: CALL_OW 559
// end ;
22627: LD_VAR 0 2
22631: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22632: LD_EXP 37
22636: PUSH
22637: LD_EXP 42
22641: AND
22642: IFFALSE 22766
22644: GO 22646
22646: DISABLE
22647: LD_INT 0
22649: PPUSH
22650: PPUSH
// begin enable ;
22651: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22652: LD_ADDR_VAR 0 2
22656: PUSH
22657: LD_INT 22
22659: PUSH
22660: LD_OWVAR 2
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 2
22671: PUSH
22672: LD_INT 34
22674: PUSH
22675: LD_INT 7
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 34
22684: PUSH
22685: LD_INT 45
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 34
22694: PUSH
22695: LD_INT 28
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 34
22704: PUSH
22705: LD_INT 47
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PPUSH
22723: CALL_OW 69
22727: ST_TO_ADDR
// if not tmp then
22728: LD_VAR 0 2
22732: NOT
22733: IFFALSE 22737
// exit ;
22735: GO 22766
// for i in tmp do
22737: LD_ADDR_VAR 0 1
22741: PUSH
22742: LD_VAR 0 2
22746: PUSH
22747: FOR_IN
22748: IFFALSE 22764
// begin SetLives ( i , 0 ) ;
22750: LD_VAR 0 1
22754: PPUSH
22755: LD_INT 0
22757: PPUSH
22758: CALL_OW 234
// end ;
22762: GO 22747
22764: POP
22765: POP
// end ;
22766: PPOPN 2
22768: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22769: LD_EXP 37
22773: PUSH
22774: LD_EXP 43
22778: AND
22779: IFFALSE 22863
22781: GO 22783
22783: DISABLE
22784: LD_INT 0
22786: PPUSH
22787: PPUSH
// begin enable ;
22788: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22789: LD_ADDR_VAR 0 2
22793: PUSH
22794: LD_INT 22
22796: PUSH
22797: LD_OWVAR 2
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 32
22808: PUSH
22809: LD_INT 3
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PPUSH
22820: CALL_OW 69
22824: ST_TO_ADDR
// if not tmp then
22825: LD_VAR 0 2
22829: NOT
22830: IFFALSE 22834
// exit ;
22832: GO 22863
// for i in tmp do
22834: LD_ADDR_VAR 0 1
22838: PUSH
22839: LD_VAR 0 2
22843: PUSH
22844: FOR_IN
22845: IFFALSE 22861
// begin SetLives ( i , 0 ) ;
22847: LD_VAR 0 1
22851: PPUSH
22852: LD_INT 0
22854: PPUSH
22855: CALL_OW 234
// end ;
22859: GO 22844
22861: POP
22862: POP
// end ;
22863: PPOPN 2
22865: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22866: LD_EXP 37
22870: PUSH
22871: LD_EXP 40
22875: AND
22876: IFFALSE 22969
22878: GO 22880
22880: DISABLE
22881: LD_INT 0
22883: PPUSH
// begin enable ;
22884: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22885: LD_ADDR_VAR 0 1
22889: PUSH
22890: LD_INT 22
22892: PUSH
22893: LD_OWVAR 2
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 2
22904: PUSH
22905: LD_INT 25
22907: PUSH
22908: LD_INT 5
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 25
22917: PUSH
22918: LD_INT 9
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 25
22927: PUSH
22928: LD_INT 8
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PPUSH
22945: CALL_OW 69
22949: PUSH
22950: FOR_IN
22951: IFFALSE 22967
// begin SetClass ( i , 1 ) ;
22953: LD_VAR 0 1
22957: PPUSH
22958: LD_INT 1
22960: PPUSH
22961: CALL_OW 336
// end ;
22965: GO 22950
22967: POP
22968: POP
// end ;
22969: PPOPN 1
22971: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22972: LD_EXP 37
22976: PUSH
22977: LD_EXP 41
22981: AND
22982: PUSH
22983: LD_OWVAR 65
22987: PUSH
22988: LD_INT 7
22990: LESS
22991: AND
22992: IFFALSE 23006
22994: GO 22996
22996: DISABLE
// begin enable ;
22997: ENABLE
// game_speed := 7 ;
22998: LD_ADDR_OWVAR 65
23002: PUSH
23003: LD_INT 7
23005: ST_TO_ADDR
// end ;
23006: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23007: LD_EXP 37
23011: PUSH
23012: LD_EXP 44
23016: AND
23017: IFFALSE 23219
23019: GO 23021
23021: DISABLE
23022: LD_INT 0
23024: PPUSH
23025: PPUSH
23026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23027: LD_ADDR_VAR 0 3
23031: PUSH
23032: LD_INT 81
23034: PUSH
23035: LD_OWVAR 2
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 21
23046: PUSH
23047: LD_INT 1
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PPUSH
23058: CALL_OW 69
23062: ST_TO_ADDR
// if not tmp then
23063: LD_VAR 0 3
23067: NOT
23068: IFFALSE 23072
// exit ;
23070: GO 23219
// if tmp > 5 then
23072: LD_VAR 0 3
23076: PUSH
23077: LD_INT 5
23079: GREATER
23080: IFFALSE 23092
// k := 5 else
23082: LD_ADDR_VAR 0 2
23086: PUSH
23087: LD_INT 5
23089: ST_TO_ADDR
23090: GO 23102
// k := tmp ;
23092: LD_ADDR_VAR 0 2
23096: PUSH
23097: LD_VAR 0 3
23101: ST_TO_ADDR
// for i := 1 to k do
23102: LD_ADDR_VAR 0 1
23106: PUSH
23107: DOUBLE
23108: LD_INT 1
23110: DEC
23111: ST_TO_ADDR
23112: LD_VAR 0 2
23116: PUSH
23117: FOR_TO
23118: IFFALSE 23217
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23120: LD_VAR 0 3
23124: PUSH
23125: LD_VAR 0 1
23129: ARRAY
23130: PPUSH
23131: LD_VAR 0 1
23135: PUSH
23136: LD_INT 4
23138: MOD
23139: PUSH
23140: LD_INT 1
23142: PLUS
23143: PPUSH
23144: CALL_OW 259
23148: PUSH
23149: LD_INT 10
23151: LESS
23152: IFFALSE 23215
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23154: LD_VAR 0 3
23158: PUSH
23159: LD_VAR 0 1
23163: ARRAY
23164: PPUSH
23165: LD_VAR 0 1
23169: PUSH
23170: LD_INT 4
23172: MOD
23173: PUSH
23174: LD_INT 1
23176: PLUS
23177: PPUSH
23178: LD_VAR 0 3
23182: PUSH
23183: LD_VAR 0 1
23187: ARRAY
23188: PPUSH
23189: LD_VAR 0 1
23193: PUSH
23194: LD_INT 4
23196: MOD
23197: PUSH
23198: LD_INT 1
23200: PLUS
23201: PPUSH
23202: CALL_OW 259
23206: PUSH
23207: LD_INT 1
23209: PLUS
23210: PPUSH
23211: CALL_OW 237
23215: GO 23117
23217: POP
23218: POP
// end ;
23219: PPOPN 3
23221: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23222: LD_EXP 37
23226: PUSH
23227: LD_EXP 45
23231: AND
23232: IFFALSE 23252
23234: GO 23236
23236: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23237: LD_INT 4
23239: PPUSH
23240: LD_OWVAR 2
23244: PPUSH
23245: LD_INT 0
23247: PPUSH
23248: CALL_OW 324
23252: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23253: LD_EXP 37
23257: PUSH
23258: LD_EXP 74
23262: AND
23263: IFFALSE 23283
23265: GO 23267
23267: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23268: LD_INT 19
23270: PPUSH
23271: LD_OWVAR 2
23275: PPUSH
23276: LD_INT 0
23278: PPUSH
23279: CALL_OW 324
23283: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23284: LD_EXP 37
23288: PUSH
23289: LD_EXP 46
23293: AND
23294: IFFALSE 23396
23296: GO 23298
23298: DISABLE
23299: LD_INT 0
23301: PPUSH
23302: PPUSH
// begin enable ;
23303: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23304: LD_ADDR_VAR 0 2
23308: PUSH
23309: LD_INT 22
23311: PUSH
23312: LD_OWVAR 2
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 34
23326: PUSH
23327: LD_INT 11
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 34
23336: PUSH
23337: LD_INT 30
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: LIST
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PPUSH
23353: CALL_OW 69
23357: ST_TO_ADDR
// if not tmp then
23358: LD_VAR 0 2
23362: NOT
23363: IFFALSE 23367
// exit ;
23365: GO 23396
// for i in tmp do
23367: LD_ADDR_VAR 0 1
23371: PUSH
23372: LD_VAR 0 2
23376: PUSH
23377: FOR_IN
23378: IFFALSE 23394
// begin SetLives ( i , 0 ) ;
23380: LD_VAR 0 1
23384: PPUSH
23385: LD_INT 0
23387: PPUSH
23388: CALL_OW 234
// end ;
23392: GO 23377
23394: POP
23395: POP
// end ;
23396: PPOPN 2
23398: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23399: LD_EXP 37
23403: PUSH
23404: LD_EXP 47
23408: AND
23409: IFFALSE 23429
23411: GO 23413
23413: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23414: LD_INT 32
23416: PPUSH
23417: LD_OWVAR 2
23421: PPUSH
23422: LD_INT 0
23424: PPUSH
23425: CALL_OW 324
23429: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23430: LD_EXP 37
23434: PUSH
23435: LD_EXP 48
23439: AND
23440: IFFALSE 23621
23442: GO 23444
23444: DISABLE
23445: LD_INT 0
23447: PPUSH
23448: PPUSH
23449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23450: LD_ADDR_VAR 0 2
23454: PUSH
23455: LD_INT 22
23457: PUSH
23458: LD_OWVAR 2
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 33
23469: PUSH
23470: LD_INT 3
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PPUSH
23481: CALL_OW 69
23485: ST_TO_ADDR
// if not tmp then
23486: LD_VAR 0 2
23490: NOT
23491: IFFALSE 23495
// exit ;
23493: GO 23621
// side := 0 ;
23495: LD_ADDR_VAR 0 3
23499: PUSH
23500: LD_INT 0
23502: ST_TO_ADDR
// for i := 1 to 8 do
23503: LD_ADDR_VAR 0 1
23507: PUSH
23508: DOUBLE
23509: LD_INT 1
23511: DEC
23512: ST_TO_ADDR
23513: LD_INT 8
23515: PUSH
23516: FOR_TO
23517: IFFALSE 23565
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23519: LD_OWVAR 2
23523: PUSH
23524: LD_VAR 0 1
23528: NONEQUAL
23529: PUSH
23530: LD_OWVAR 2
23534: PPUSH
23535: LD_VAR 0 1
23539: PPUSH
23540: CALL_OW 81
23544: PUSH
23545: LD_INT 2
23547: EQUAL
23548: AND
23549: IFFALSE 23563
// begin side := i ;
23551: LD_ADDR_VAR 0 3
23555: PUSH
23556: LD_VAR 0 1
23560: ST_TO_ADDR
// break ;
23561: GO 23565
// end ;
23563: GO 23516
23565: POP
23566: POP
// if not side then
23567: LD_VAR 0 3
23571: NOT
23572: IFFALSE 23576
// exit ;
23574: GO 23621
// for i := 1 to tmp do
23576: LD_ADDR_VAR 0 1
23580: PUSH
23581: DOUBLE
23582: LD_INT 1
23584: DEC
23585: ST_TO_ADDR
23586: LD_VAR 0 2
23590: PUSH
23591: FOR_TO
23592: IFFALSE 23619
// if Prob ( 60 ) then
23594: LD_INT 60
23596: PPUSH
23597: CALL_OW 13
23601: IFFALSE 23617
// SetSide ( i , side ) ;
23603: LD_VAR 0 1
23607: PPUSH
23608: LD_VAR 0 3
23612: PPUSH
23613: CALL_OW 235
23617: GO 23591
23619: POP
23620: POP
// end ;
23621: PPOPN 3
23623: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23624: LD_EXP 37
23628: PUSH
23629: LD_EXP 50
23633: AND
23634: IFFALSE 23753
23636: GO 23638
23638: DISABLE
23639: LD_INT 0
23641: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23642: LD_ADDR_VAR 0 1
23646: PUSH
23647: LD_INT 22
23649: PUSH
23650: LD_OWVAR 2
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 21
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 3
23671: PUSH
23672: LD_INT 23
23674: PUSH
23675: LD_INT 0
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: LIST
23690: PPUSH
23691: CALL_OW 69
23695: PUSH
23696: FOR_IN
23697: IFFALSE 23751
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23699: LD_VAR 0 1
23703: PPUSH
23704: CALL_OW 257
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: LD_INT 3
23717: PUSH
23718: LD_INT 4
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: IN
23727: IFFALSE 23749
// SetClass ( un , rand ( 1 , 4 ) ) ;
23729: LD_VAR 0 1
23733: PPUSH
23734: LD_INT 1
23736: PPUSH
23737: LD_INT 4
23739: PPUSH
23740: CALL_OW 12
23744: PPUSH
23745: CALL_OW 336
23749: GO 23696
23751: POP
23752: POP
// end ;
23753: PPOPN 1
23755: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23756: LD_EXP 37
23760: PUSH
23761: LD_EXP 49
23765: AND
23766: IFFALSE 23845
23768: GO 23770
23770: DISABLE
23771: LD_INT 0
23773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23774: LD_ADDR_VAR 0 1
23778: PUSH
23779: LD_INT 22
23781: PUSH
23782: LD_OWVAR 2
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 21
23793: PUSH
23794: LD_INT 3
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PPUSH
23805: CALL_OW 69
23809: ST_TO_ADDR
// if not tmp then
23810: LD_VAR 0 1
23814: NOT
23815: IFFALSE 23819
// exit ;
23817: GO 23845
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23819: LD_VAR 0 1
23823: PUSH
23824: LD_INT 1
23826: PPUSH
23827: LD_VAR 0 1
23831: PPUSH
23832: CALL_OW 12
23836: ARRAY
23837: PPUSH
23838: LD_INT 100
23840: PPUSH
23841: CALL_OW 234
// end ;
23845: PPOPN 1
23847: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23848: LD_EXP 37
23852: PUSH
23853: LD_EXP 51
23857: AND
23858: IFFALSE 23956
23860: GO 23862
23862: DISABLE
23863: LD_INT 0
23865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23866: LD_ADDR_VAR 0 1
23870: PUSH
23871: LD_INT 22
23873: PUSH
23874: LD_OWVAR 2
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 21
23885: PUSH
23886: LD_INT 1
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PPUSH
23897: CALL_OW 69
23901: ST_TO_ADDR
// if not tmp then
23902: LD_VAR 0 1
23906: NOT
23907: IFFALSE 23911
// exit ;
23909: GO 23956
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23911: LD_VAR 0 1
23915: PUSH
23916: LD_INT 1
23918: PPUSH
23919: LD_VAR 0 1
23923: PPUSH
23924: CALL_OW 12
23928: ARRAY
23929: PPUSH
23930: LD_INT 1
23932: PPUSH
23933: LD_INT 4
23935: PPUSH
23936: CALL_OW 12
23940: PPUSH
23941: LD_INT 3000
23943: PPUSH
23944: LD_INT 9000
23946: PPUSH
23947: CALL_OW 12
23951: PPUSH
23952: CALL_OW 492
// end ;
23956: PPOPN 1
23958: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23959: LD_EXP 37
23963: PUSH
23964: LD_EXP 52
23968: AND
23969: IFFALSE 23989
23971: GO 23973
23973: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23974: LD_INT 1
23976: PPUSH
23977: LD_OWVAR 2
23981: PPUSH
23982: LD_INT 0
23984: PPUSH
23985: CALL_OW 324
23989: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23990: LD_EXP 37
23994: PUSH
23995: LD_EXP 53
23999: AND
24000: IFFALSE 24083
24002: GO 24004
24004: DISABLE
24005: LD_INT 0
24007: PPUSH
24008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24009: LD_ADDR_VAR 0 2
24013: PUSH
24014: LD_INT 22
24016: PUSH
24017: LD_OWVAR 2
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 21
24028: PUSH
24029: LD_INT 3
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PPUSH
24040: CALL_OW 69
24044: ST_TO_ADDR
// if not tmp then
24045: LD_VAR 0 2
24049: NOT
24050: IFFALSE 24054
// exit ;
24052: GO 24083
// for i in tmp do
24054: LD_ADDR_VAR 0 1
24058: PUSH
24059: LD_VAR 0 2
24063: PUSH
24064: FOR_IN
24065: IFFALSE 24081
// SetBLevel ( i , 10 ) ;
24067: LD_VAR 0 1
24071: PPUSH
24072: LD_INT 10
24074: PPUSH
24075: CALL_OW 241
24079: GO 24064
24081: POP
24082: POP
// end ;
24083: PPOPN 2
24085: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24086: LD_EXP 37
24090: PUSH
24091: LD_EXP 54
24095: AND
24096: IFFALSE 24207
24098: GO 24100
24100: DISABLE
24101: LD_INT 0
24103: PPUSH
24104: PPUSH
24105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24106: LD_ADDR_VAR 0 3
24110: PUSH
24111: LD_INT 22
24113: PUSH
24114: LD_OWVAR 2
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 25
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PPUSH
24137: CALL_OW 69
24141: ST_TO_ADDR
// if not tmp then
24142: LD_VAR 0 3
24146: NOT
24147: IFFALSE 24151
// exit ;
24149: GO 24207
// un := tmp [ rand ( 1 , tmp ) ] ;
24151: LD_ADDR_VAR 0 2
24155: PUSH
24156: LD_VAR 0 3
24160: PUSH
24161: LD_INT 1
24163: PPUSH
24164: LD_VAR 0 3
24168: PPUSH
24169: CALL_OW 12
24173: ARRAY
24174: ST_TO_ADDR
// if Crawls ( un ) then
24175: LD_VAR 0 2
24179: PPUSH
24180: CALL_OW 318
24184: IFFALSE 24195
// ComWalk ( un ) ;
24186: LD_VAR 0 2
24190: PPUSH
24191: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24195: LD_VAR 0 2
24199: PPUSH
24200: LD_INT 5
24202: PPUSH
24203: CALL_OW 336
// end ;
24207: PPOPN 3
24209: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24210: LD_EXP 37
24214: PUSH
24215: LD_EXP 55
24219: AND
24220: PUSH
24221: LD_OWVAR 67
24225: PUSH
24226: LD_INT 4
24228: LESS
24229: AND
24230: IFFALSE 24249
24232: GO 24234
24234: DISABLE
// begin Difficulty := Difficulty + 1 ;
24235: LD_ADDR_OWVAR 67
24239: PUSH
24240: LD_OWVAR 67
24244: PUSH
24245: LD_INT 1
24247: PLUS
24248: ST_TO_ADDR
// end ;
24249: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24250: LD_EXP 37
24254: PUSH
24255: LD_EXP 56
24259: AND
24260: IFFALSE 24363
24262: GO 24264
24264: DISABLE
24265: LD_INT 0
24267: PPUSH
// begin for i := 1 to 5 do
24268: LD_ADDR_VAR 0 1
24272: PUSH
24273: DOUBLE
24274: LD_INT 1
24276: DEC
24277: ST_TO_ADDR
24278: LD_INT 5
24280: PUSH
24281: FOR_TO
24282: IFFALSE 24361
// begin uc_nation := nation_nature ;
24284: LD_ADDR_OWVAR 21
24288: PUSH
24289: LD_INT 0
24291: ST_TO_ADDR
// uc_side := 0 ;
24292: LD_ADDR_OWVAR 20
24296: PUSH
24297: LD_INT 0
24299: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24300: LD_ADDR_OWVAR 29
24304: PUSH
24305: LD_INT 12
24307: PUSH
24308: LD_INT 12
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: ST_TO_ADDR
// hc_agressivity := 20 ;
24315: LD_ADDR_OWVAR 35
24319: PUSH
24320: LD_INT 20
24322: ST_TO_ADDR
// hc_class := class_tiger ;
24323: LD_ADDR_OWVAR 28
24327: PUSH
24328: LD_INT 14
24330: ST_TO_ADDR
// hc_gallery :=  ;
24331: LD_ADDR_OWVAR 33
24335: PUSH
24336: LD_STRING 
24338: ST_TO_ADDR
// hc_name :=  ;
24339: LD_ADDR_OWVAR 26
24343: PUSH
24344: LD_STRING 
24346: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24347: CALL_OW 44
24351: PPUSH
24352: LD_INT 0
24354: PPUSH
24355: CALL_OW 51
// end ;
24359: GO 24281
24361: POP
24362: POP
// end ;
24363: PPOPN 1
24365: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24366: LD_EXP 37
24370: PUSH
24371: LD_EXP 57
24375: AND
24376: IFFALSE 24385
24378: GO 24380
24380: DISABLE
// StreamSibBomb ;
24381: CALL 24386 0 0
24385: END
// export function StreamSibBomb ; var i , x , y ; begin
24386: LD_INT 0
24388: PPUSH
24389: PPUSH
24390: PPUSH
24391: PPUSH
// result := false ;
24392: LD_ADDR_VAR 0 1
24396: PUSH
24397: LD_INT 0
24399: ST_TO_ADDR
// for i := 1 to 16 do
24400: LD_ADDR_VAR 0 2
24404: PUSH
24405: DOUBLE
24406: LD_INT 1
24408: DEC
24409: ST_TO_ADDR
24410: LD_INT 16
24412: PUSH
24413: FOR_TO
24414: IFFALSE 24613
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24416: LD_ADDR_VAR 0 3
24420: PUSH
24421: LD_INT 10
24423: PUSH
24424: LD_INT 20
24426: PUSH
24427: LD_INT 30
24429: PUSH
24430: LD_INT 40
24432: PUSH
24433: LD_INT 50
24435: PUSH
24436: LD_INT 60
24438: PUSH
24439: LD_INT 70
24441: PUSH
24442: LD_INT 80
24444: PUSH
24445: LD_INT 90
24447: PUSH
24448: LD_INT 100
24450: PUSH
24451: LD_INT 110
24453: PUSH
24454: LD_INT 120
24456: PUSH
24457: LD_INT 130
24459: PUSH
24460: LD_INT 140
24462: PUSH
24463: LD_INT 150
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: PPUSH
24486: LD_INT 15
24488: PPUSH
24489: CALL_OW 12
24493: ARRAY
24494: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24495: LD_ADDR_VAR 0 4
24499: PUSH
24500: LD_INT 10
24502: PUSH
24503: LD_INT 20
24505: PUSH
24506: LD_INT 30
24508: PUSH
24509: LD_INT 40
24511: PUSH
24512: LD_INT 50
24514: PUSH
24515: LD_INT 60
24517: PUSH
24518: LD_INT 70
24520: PUSH
24521: LD_INT 80
24523: PUSH
24524: LD_INT 90
24526: PUSH
24527: LD_INT 100
24529: PUSH
24530: LD_INT 110
24532: PUSH
24533: LD_INT 120
24535: PUSH
24536: LD_INT 130
24538: PUSH
24539: LD_INT 140
24541: PUSH
24542: LD_INT 150
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 1
24564: PPUSH
24565: LD_INT 15
24567: PPUSH
24568: CALL_OW 12
24572: ARRAY
24573: ST_TO_ADDR
// if ValidHex ( x , y ) then
24574: LD_VAR 0 3
24578: PPUSH
24579: LD_VAR 0 4
24583: PPUSH
24584: CALL_OW 488
24588: IFFALSE 24611
// begin result := [ x , y ] ;
24590: LD_ADDR_VAR 0 1
24594: PUSH
24595: LD_VAR 0 3
24599: PUSH
24600: LD_VAR 0 4
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: ST_TO_ADDR
// break ;
24609: GO 24613
// end ; end ;
24611: GO 24413
24613: POP
24614: POP
// if result then
24615: LD_VAR 0 1
24619: IFFALSE 24679
// begin ToLua ( playSibBomb() ) ;
24621: LD_STRING playSibBomb()
24623: PPUSH
24624: CALL_OW 559
// wait ( 0 0$14 ) ;
24628: LD_INT 490
24630: PPUSH
24631: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24635: LD_VAR 0 1
24639: PUSH
24640: LD_INT 1
24642: ARRAY
24643: PPUSH
24644: LD_VAR 0 1
24648: PUSH
24649: LD_INT 2
24651: ARRAY
24652: PPUSH
24653: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24657: LD_VAR 0 1
24661: PUSH
24662: LD_INT 1
24664: ARRAY
24665: PPUSH
24666: LD_VAR 0 1
24670: PUSH
24671: LD_INT 2
24673: ARRAY
24674: PPUSH
24675: CALL_OW 429
// end ; end ;
24679: LD_VAR 0 1
24683: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24684: LD_EXP 37
24688: PUSH
24689: LD_EXP 59
24693: AND
24694: IFFALSE 24706
24696: GO 24698
24698: DISABLE
// YouLost (  ) ;
24699: LD_STRING 
24701: PPUSH
24702: CALL_OW 104
24706: END
// every 0 0$1 trigger StreamModeActive and sFog do
24707: LD_EXP 37
24711: PUSH
24712: LD_EXP 58
24716: AND
24717: IFFALSE 24731
24719: GO 24721
24721: DISABLE
// FogOff ( your_side ) ;
24722: LD_OWVAR 2
24726: PPUSH
24727: CALL_OW 344
24731: END
// every 0 0$1 trigger StreamModeActive and sSun do
24732: LD_EXP 37
24736: PUSH
24737: LD_EXP 60
24741: AND
24742: IFFALSE 24770
24744: GO 24746
24746: DISABLE
// begin solar_recharge_percent := 0 ;
24747: LD_ADDR_OWVAR 79
24751: PUSH
24752: LD_INT 0
24754: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24755: LD_INT 10500
24757: PPUSH
24758: CALL_OW 67
// solar_recharge_percent := 100 ;
24762: LD_ADDR_OWVAR 79
24766: PUSH
24767: LD_INT 100
24769: ST_TO_ADDR
// end ;
24770: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24771: LD_EXP 37
24775: PUSH
24776: LD_EXP 61
24780: AND
24781: IFFALSE 25020
24783: GO 24785
24785: DISABLE
24786: LD_INT 0
24788: PPUSH
24789: PPUSH
24790: PPUSH
// begin tmp := [ ] ;
24791: LD_ADDR_VAR 0 3
24795: PUSH
24796: EMPTY
24797: ST_TO_ADDR
// for i := 1 to 6 do
24798: LD_ADDR_VAR 0 1
24802: PUSH
24803: DOUBLE
24804: LD_INT 1
24806: DEC
24807: ST_TO_ADDR
24808: LD_INT 6
24810: PUSH
24811: FOR_TO
24812: IFFALSE 24917
// begin uc_nation := nation_nature ;
24814: LD_ADDR_OWVAR 21
24818: PUSH
24819: LD_INT 0
24821: ST_TO_ADDR
// uc_side := 0 ;
24822: LD_ADDR_OWVAR 20
24826: PUSH
24827: LD_INT 0
24829: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24830: LD_ADDR_OWVAR 29
24834: PUSH
24835: LD_INT 12
24837: PUSH
24838: LD_INT 12
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: ST_TO_ADDR
// hc_agressivity := 20 ;
24845: LD_ADDR_OWVAR 35
24849: PUSH
24850: LD_INT 20
24852: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24853: LD_ADDR_OWVAR 28
24857: PUSH
24858: LD_INT 17
24860: ST_TO_ADDR
// hc_gallery :=  ;
24861: LD_ADDR_OWVAR 33
24865: PUSH
24866: LD_STRING 
24868: ST_TO_ADDR
// hc_name :=  ;
24869: LD_ADDR_OWVAR 26
24873: PUSH
24874: LD_STRING 
24876: ST_TO_ADDR
// un := CreateHuman ;
24877: LD_ADDR_VAR 0 2
24881: PUSH
24882: CALL_OW 44
24886: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24887: LD_VAR 0 2
24891: PPUSH
24892: LD_INT 1
24894: PPUSH
24895: CALL_OW 51
// tmp := tmp ^ un ;
24899: LD_ADDR_VAR 0 3
24903: PUSH
24904: LD_VAR 0 3
24908: PUSH
24909: LD_VAR 0 2
24913: ADD
24914: ST_TO_ADDR
// end ;
24915: GO 24811
24917: POP
24918: POP
// repeat wait ( 0 0$1 ) ;
24919: LD_INT 35
24921: PPUSH
24922: CALL_OW 67
// for un in tmp do
24926: LD_ADDR_VAR 0 2
24930: PUSH
24931: LD_VAR 0 3
24935: PUSH
24936: FOR_IN
24937: IFFALSE 25011
// begin if IsDead ( un ) then
24939: LD_VAR 0 2
24943: PPUSH
24944: CALL_OW 301
24948: IFFALSE 24968
// begin tmp := tmp diff un ;
24950: LD_ADDR_VAR 0 3
24954: PUSH
24955: LD_VAR 0 3
24959: PUSH
24960: LD_VAR 0 2
24964: DIFF
24965: ST_TO_ADDR
// continue ;
24966: GO 24936
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24968: LD_VAR 0 2
24972: PPUSH
24973: LD_INT 3
24975: PUSH
24976: LD_INT 22
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PPUSH
24990: CALL_OW 69
24994: PPUSH
24995: LD_VAR 0 2
24999: PPUSH
25000: CALL_OW 74
25004: PPUSH
25005: CALL_OW 115
// end ;
25009: GO 24936
25011: POP
25012: POP
// until not tmp ;
25013: LD_VAR 0 3
25017: NOT
25018: IFFALSE 24919
// end ;
25020: PPOPN 3
25022: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25023: LD_EXP 37
25027: PUSH
25028: LD_EXP 62
25032: AND
25033: IFFALSE 25087
25035: GO 25037
25037: DISABLE
// begin ToLua ( displayTroll(); ) ;
25038: LD_STRING displayTroll();
25040: PPUSH
25041: CALL_OW 559
// wait ( 3 3$00 ) ;
25045: LD_INT 6300
25047: PPUSH
25048: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25052: LD_STRING hideTroll();
25054: PPUSH
25055: CALL_OW 559
// wait ( 1 1$00 ) ;
25059: LD_INT 2100
25061: PPUSH
25062: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25066: LD_STRING displayTroll();
25068: PPUSH
25069: CALL_OW 559
// wait ( 1 1$00 ) ;
25073: LD_INT 2100
25075: PPUSH
25076: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25080: LD_STRING hideTroll();
25082: PPUSH
25083: CALL_OW 559
// end ;
25087: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25088: LD_EXP 37
25092: PUSH
25093: LD_EXP 63
25097: AND
25098: IFFALSE 25161
25100: GO 25102
25102: DISABLE
25103: LD_INT 0
25105: PPUSH
// begin p := 0 ;
25106: LD_ADDR_VAR 0 1
25110: PUSH
25111: LD_INT 0
25113: ST_TO_ADDR
// repeat game_speed := 1 ;
25114: LD_ADDR_OWVAR 65
25118: PUSH
25119: LD_INT 1
25121: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25122: LD_INT 35
25124: PPUSH
25125: CALL_OW 67
// p := p + 1 ;
25129: LD_ADDR_VAR 0 1
25133: PUSH
25134: LD_VAR 0 1
25138: PUSH
25139: LD_INT 1
25141: PLUS
25142: ST_TO_ADDR
// until p >= 60 ;
25143: LD_VAR 0 1
25147: PUSH
25148: LD_INT 60
25150: GREATEREQUAL
25151: IFFALSE 25114
// game_speed := 4 ;
25153: LD_ADDR_OWVAR 65
25157: PUSH
25158: LD_INT 4
25160: ST_TO_ADDR
// end ;
25161: PPOPN 1
25163: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25164: LD_EXP 37
25168: PUSH
25169: LD_EXP 64
25173: AND
25174: IFFALSE 25320
25176: GO 25178
25178: DISABLE
25179: LD_INT 0
25181: PPUSH
25182: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25183: LD_ADDR_VAR 0 1
25187: PUSH
25188: LD_INT 22
25190: PUSH
25191: LD_OWVAR 2
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: LD_INT 30
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 30
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: LIST
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PPUSH
25232: CALL_OW 69
25236: ST_TO_ADDR
// if not depot then
25237: LD_VAR 0 1
25241: NOT
25242: IFFALSE 25246
// exit ;
25244: GO 25320
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25246: LD_ADDR_VAR 0 2
25250: PUSH
25251: LD_VAR 0 1
25255: PUSH
25256: LD_INT 1
25258: PPUSH
25259: LD_VAR 0 1
25263: PPUSH
25264: CALL_OW 12
25268: ARRAY
25269: PPUSH
25270: CALL_OW 274
25274: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25275: LD_VAR 0 2
25279: PPUSH
25280: LD_INT 1
25282: PPUSH
25283: LD_INT 0
25285: PPUSH
25286: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25290: LD_VAR 0 2
25294: PPUSH
25295: LD_INT 2
25297: PPUSH
25298: LD_INT 0
25300: PPUSH
25301: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25305: LD_VAR 0 2
25309: PPUSH
25310: LD_INT 3
25312: PPUSH
25313: LD_INT 0
25315: PPUSH
25316: CALL_OW 277
// end ;
25320: PPOPN 2
25322: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25323: LD_EXP 37
25327: PUSH
25328: LD_EXP 65
25332: AND
25333: IFFALSE 25430
25335: GO 25337
25337: DISABLE
25338: LD_INT 0
25340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25341: LD_ADDR_VAR 0 1
25345: PUSH
25346: LD_INT 22
25348: PUSH
25349: LD_OWVAR 2
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 21
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 3
25370: PUSH
25371: LD_INT 23
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: LIST
25389: PPUSH
25390: CALL_OW 69
25394: ST_TO_ADDR
// if not tmp then
25395: LD_VAR 0 1
25399: NOT
25400: IFFALSE 25404
// exit ;
25402: GO 25430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25404: LD_VAR 0 1
25408: PUSH
25409: LD_INT 1
25411: PPUSH
25412: LD_VAR 0 1
25416: PPUSH
25417: CALL_OW 12
25421: ARRAY
25422: PPUSH
25423: LD_INT 200
25425: PPUSH
25426: CALL_OW 234
// end ;
25430: PPOPN 1
25432: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25433: LD_EXP 37
25437: PUSH
25438: LD_EXP 66
25442: AND
25443: IFFALSE 25522
25445: GO 25447
25447: DISABLE
25448: LD_INT 0
25450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25451: LD_ADDR_VAR 0 1
25455: PUSH
25456: LD_INT 22
25458: PUSH
25459: LD_OWVAR 2
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 21
25470: PUSH
25471: LD_INT 2
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PPUSH
25482: CALL_OW 69
25486: ST_TO_ADDR
// if not tmp then
25487: LD_VAR 0 1
25491: NOT
25492: IFFALSE 25496
// exit ;
25494: GO 25522
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25496: LD_VAR 0 1
25500: PUSH
25501: LD_INT 1
25503: PPUSH
25504: LD_VAR 0 1
25508: PPUSH
25509: CALL_OW 12
25513: ARRAY
25514: PPUSH
25515: LD_INT 60
25517: PPUSH
25518: CALL_OW 234
// end ;
25522: PPOPN 1
25524: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25525: LD_EXP 37
25529: PUSH
25530: LD_EXP 67
25534: AND
25535: IFFALSE 25634
25537: GO 25539
25539: DISABLE
25540: LD_INT 0
25542: PPUSH
25543: PPUSH
// begin enable ;
25544: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25545: LD_ADDR_VAR 0 1
25549: PUSH
25550: LD_INT 22
25552: PUSH
25553: LD_OWVAR 2
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 61
25564: PUSH
25565: EMPTY
25566: LIST
25567: PUSH
25568: LD_INT 33
25570: PUSH
25571: LD_INT 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: LIST
25582: PPUSH
25583: CALL_OW 69
25587: ST_TO_ADDR
// if not tmp then
25588: LD_VAR 0 1
25592: NOT
25593: IFFALSE 25597
// exit ;
25595: GO 25634
// for i in tmp do
25597: LD_ADDR_VAR 0 2
25601: PUSH
25602: LD_VAR 0 1
25606: PUSH
25607: FOR_IN
25608: IFFALSE 25632
// if IsControledBy ( i ) then
25610: LD_VAR 0 2
25614: PPUSH
25615: CALL_OW 312
25619: IFFALSE 25630
// ComUnlink ( i ) ;
25621: LD_VAR 0 2
25625: PPUSH
25626: CALL_OW 136
25630: GO 25607
25632: POP
25633: POP
// end ;
25634: PPOPN 2
25636: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25637: LD_EXP 37
25641: PUSH
25642: LD_EXP 68
25646: AND
25647: IFFALSE 25787
25649: GO 25651
25651: DISABLE
25652: LD_INT 0
25654: PPUSH
25655: PPUSH
// begin ToLua ( displayPowell(); ) ;
25656: LD_STRING displayPowell();
25658: PPUSH
25659: CALL_OW 559
// uc_side := 0 ;
25663: LD_ADDR_OWVAR 20
25667: PUSH
25668: LD_INT 0
25670: ST_TO_ADDR
// uc_nation := 2 ;
25671: LD_ADDR_OWVAR 21
25675: PUSH
25676: LD_INT 2
25678: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25679: LD_ADDR_OWVAR 37
25683: PUSH
25684: LD_INT 14
25686: ST_TO_ADDR
// vc_engine := engine_siberite ;
25687: LD_ADDR_OWVAR 39
25691: PUSH
25692: LD_INT 3
25694: ST_TO_ADDR
// vc_control := control_apeman ;
25695: LD_ADDR_OWVAR 38
25699: PUSH
25700: LD_INT 5
25702: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25703: LD_ADDR_OWVAR 40
25707: PUSH
25708: LD_INT 29
25710: ST_TO_ADDR
// un := CreateVehicle ;
25711: LD_ADDR_VAR 0 2
25715: PUSH
25716: CALL_OW 45
25720: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25721: LD_VAR 0 2
25725: PPUSH
25726: LD_INT 1
25728: PPUSH
25729: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25733: LD_INT 35
25735: PPUSH
25736: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25740: LD_VAR 0 2
25744: PPUSH
25745: LD_INT 22
25747: PUSH
25748: LD_OWVAR 2
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PPUSH
25757: CALL_OW 69
25761: PPUSH
25762: LD_VAR 0 2
25766: PPUSH
25767: CALL_OW 74
25771: PPUSH
25772: CALL_OW 115
// until IsDead ( un ) ;
25776: LD_VAR 0 2
25780: PPUSH
25781: CALL_OW 301
25785: IFFALSE 25733
// end ;
25787: PPOPN 2
25789: END
// every 0 0$1 trigger StreamModeActive and sStu do
25790: LD_EXP 37
25794: PUSH
25795: LD_EXP 76
25799: AND
25800: IFFALSE 25816
25802: GO 25804
25804: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25805: LD_STRING displayStucuk();
25807: PPUSH
25808: CALL_OW 559
// ResetFog ;
25812: CALL_OW 335
// end ;
25816: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25817: LD_EXP 37
25821: PUSH
25822: LD_EXP 69
25826: AND
25827: IFFALSE 25968
25829: GO 25831
25831: DISABLE
25832: LD_INT 0
25834: PPUSH
25835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25836: LD_ADDR_VAR 0 2
25840: PUSH
25841: LD_INT 22
25843: PUSH
25844: LD_OWVAR 2
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 21
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PPUSH
25867: CALL_OW 69
25871: ST_TO_ADDR
// if not tmp then
25872: LD_VAR 0 2
25876: NOT
25877: IFFALSE 25881
// exit ;
25879: GO 25968
// un := tmp [ rand ( 1 , tmp ) ] ;
25881: LD_ADDR_VAR 0 1
25885: PUSH
25886: LD_VAR 0 2
25890: PUSH
25891: LD_INT 1
25893: PPUSH
25894: LD_VAR 0 2
25898: PPUSH
25899: CALL_OW 12
25903: ARRAY
25904: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25905: LD_VAR 0 1
25909: PPUSH
25910: LD_INT 0
25912: PPUSH
25913: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25917: LD_VAR 0 1
25921: PPUSH
25922: LD_OWVAR 3
25926: PUSH
25927: LD_VAR 0 1
25931: DIFF
25932: PPUSH
25933: LD_VAR 0 1
25937: PPUSH
25938: CALL_OW 74
25942: PPUSH
25943: CALL_OW 115
// wait ( 0 0$20 ) ;
25947: LD_INT 700
25949: PPUSH
25950: CALL_OW 67
// SetSide ( un , your_side ) ;
25954: LD_VAR 0 1
25958: PPUSH
25959: LD_OWVAR 2
25963: PPUSH
25964: CALL_OW 235
// end ;
25968: PPOPN 2
25970: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25971: LD_EXP 37
25975: PUSH
25976: LD_EXP 70
25980: AND
25981: IFFALSE 26087
25983: GO 25985
25985: DISABLE
25986: LD_INT 0
25988: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25989: LD_ADDR_VAR 0 1
25993: PUSH
25994: LD_INT 22
25996: PUSH
25997: LD_OWVAR 2
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: LD_INT 30
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 30
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: LIST
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PPUSH
26038: CALL_OW 69
26042: ST_TO_ADDR
// if not depot then
26043: LD_VAR 0 1
26047: NOT
26048: IFFALSE 26052
// exit ;
26050: GO 26087
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26052: LD_VAR 0 1
26056: PUSH
26057: LD_INT 1
26059: ARRAY
26060: PPUSH
26061: CALL_OW 250
26065: PPUSH
26066: LD_VAR 0 1
26070: PUSH
26071: LD_INT 1
26073: ARRAY
26074: PPUSH
26075: CALL_OW 251
26079: PPUSH
26080: LD_INT 70
26082: PPUSH
26083: CALL_OW 495
// end ;
26087: PPOPN 1
26089: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26090: LD_EXP 37
26094: PUSH
26095: LD_EXP 71
26099: AND
26100: IFFALSE 26311
26102: GO 26104
26104: DISABLE
26105: LD_INT 0
26107: PPUSH
26108: PPUSH
26109: PPUSH
26110: PPUSH
26111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26112: LD_ADDR_VAR 0 5
26116: PUSH
26117: LD_INT 22
26119: PUSH
26120: LD_OWVAR 2
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 21
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PPUSH
26143: CALL_OW 69
26147: ST_TO_ADDR
// if not tmp then
26148: LD_VAR 0 5
26152: NOT
26153: IFFALSE 26157
// exit ;
26155: GO 26311
// for i in tmp do
26157: LD_ADDR_VAR 0 1
26161: PUSH
26162: LD_VAR 0 5
26166: PUSH
26167: FOR_IN
26168: IFFALSE 26309
// begin d := rand ( 0 , 5 ) ;
26170: LD_ADDR_VAR 0 4
26174: PUSH
26175: LD_INT 0
26177: PPUSH
26178: LD_INT 5
26180: PPUSH
26181: CALL_OW 12
26185: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26186: LD_ADDR_VAR 0 2
26190: PUSH
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 250
26200: PPUSH
26201: LD_VAR 0 4
26205: PPUSH
26206: LD_INT 3
26208: PPUSH
26209: LD_INT 12
26211: PPUSH
26212: CALL_OW 12
26216: PPUSH
26217: CALL_OW 272
26221: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26222: LD_ADDR_VAR 0 3
26226: PUSH
26227: LD_VAR 0 1
26231: PPUSH
26232: CALL_OW 251
26236: PPUSH
26237: LD_VAR 0 4
26241: PPUSH
26242: LD_INT 3
26244: PPUSH
26245: LD_INT 12
26247: PPUSH
26248: CALL_OW 12
26252: PPUSH
26253: CALL_OW 273
26257: ST_TO_ADDR
// if ValidHex ( x , y ) then
26258: LD_VAR 0 2
26262: PPUSH
26263: LD_VAR 0 3
26267: PPUSH
26268: CALL_OW 488
26272: IFFALSE 26307
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26274: LD_VAR 0 1
26278: PPUSH
26279: LD_VAR 0 2
26283: PPUSH
26284: LD_VAR 0 3
26288: PPUSH
26289: LD_INT 3
26291: PPUSH
26292: LD_INT 6
26294: PPUSH
26295: CALL_OW 12
26299: PPUSH
26300: LD_INT 1
26302: PPUSH
26303: CALL_OW 483
// end ;
26307: GO 26167
26309: POP
26310: POP
// end ;
26311: PPOPN 5
26313: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26314: LD_EXP 37
26318: PUSH
26319: LD_EXP 72
26323: AND
26324: IFFALSE 26418
26326: GO 26328
26328: DISABLE
26329: LD_INT 0
26331: PPUSH
26332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26333: LD_ADDR_VAR 0 2
26337: PUSH
26338: LD_INT 22
26340: PUSH
26341: LD_OWVAR 2
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 32
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 21
26362: PUSH
26363: LD_INT 2
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: PPUSH
26375: CALL_OW 69
26379: ST_TO_ADDR
// if not tmp then
26380: LD_VAR 0 2
26384: NOT
26385: IFFALSE 26389
// exit ;
26387: GO 26418
// for i in tmp do
26389: LD_ADDR_VAR 0 1
26393: PUSH
26394: LD_VAR 0 2
26398: PUSH
26399: FOR_IN
26400: IFFALSE 26416
// SetFuel ( i , 0 ) ;
26402: LD_VAR 0 1
26406: PPUSH
26407: LD_INT 0
26409: PPUSH
26410: CALL_OW 240
26414: GO 26399
26416: POP
26417: POP
// end ;
26418: PPOPN 2
26420: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26421: LD_EXP 37
26425: PUSH
26426: LD_EXP 73
26430: AND
26431: IFFALSE 26497
26433: GO 26435
26435: DISABLE
26436: LD_INT 0
26438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26439: LD_ADDR_VAR 0 1
26443: PUSH
26444: LD_INT 22
26446: PUSH
26447: LD_OWVAR 2
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 30
26458: PUSH
26459: LD_INT 29
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PPUSH
26470: CALL_OW 69
26474: ST_TO_ADDR
// if not tmp then
26475: LD_VAR 0 1
26479: NOT
26480: IFFALSE 26484
// exit ;
26482: GO 26497
// DestroyUnit ( tmp [ 1 ] ) ;
26484: LD_VAR 0 1
26488: PUSH
26489: LD_INT 1
26491: ARRAY
26492: PPUSH
26493: CALL_OW 65
// end ;
26497: PPOPN 1
26499: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26500: LD_EXP 37
26504: PUSH
26505: LD_EXP 75
26509: AND
26510: IFFALSE 26639
26512: GO 26514
26514: DISABLE
26515: LD_INT 0
26517: PPUSH
// begin uc_side := 0 ;
26518: LD_ADDR_OWVAR 20
26522: PUSH
26523: LD_INT 0
26525: ST_TO_ADDR
// uc_nation := nation_arabian ;
26526: LD_ADDR_OWVAR 21
26530: PUSH
26531: LD_INT 2
26533: ST_TO_ADDR
// hc_gallery :=  ;
26534: LD_ADDR_OWVAR 33
26538: PUSH
26539: LD_STRING 
26541: ST_TO_ADDR
// hc_name :=  ;
26542: LD_ADDR_OWVAR 26
26546: PUSH
26547: LD_STRING 
26549: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26550: LD_INT 1
26552: PPUSH
26553: LD_INT 11
26555: PPUSH
26556: LD_INT 10
26558: PPUSH
26559: CALL_OW 380
// un := CreateHuman ;
26563: LD_ADDR_VAR 0 1
26567: PUSH
26568: CALL_OW 44
26572: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26573: LD_VAR 0 1
26577: PPUSH
26578: LD_INT 1
26580: PPUSH
26581: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26585: LD_INT 35
26587: PPUSH
26588: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26592: LD_VAR 0 1
26596: PPUSH
26597: LD_INT 22
26599: PUSH
26600: LD_OWVAR 2
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PPUSH
26609: CALL_OW 69
26613: PPUSH
26614: LD_VAR 0 1
26618: PPUSH
26619: CALL_OW 74
26623: PPUSH
26624: CALL_OW 115
// until IsDead ( un ) ;
26628: LD_VAR 0 1
26632: PPUSH
26633: CALL_OW 301
26637: IFFALSE 26585
// end ;
26639: PPOPN 1
26641: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26642: LD_EXP 37
26646: PUSH
26647: LD_EXP 77
26651: AND
26652: IFFALSE 26664
26654: GO 26656
26656: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26657: LD_STRING earthquake(getX(game), 0, 32)
26659: PPUSH
26660: CALL_OW 559
26664: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26665: LD_EXP 37
26669: PUSH
26670: LD_EXP 78
26674: AND
26675: IFFALSE 26766
26677: GO 26679
26679: DISABLE
26680: LD_INT 0
26682: PPUSH
// begin enable ;
26683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26684: LD_ADDR_VAR 0 1
26688: PUSH
26689: LD_INT 22
26691: PUSH
26692: LD_OWVAR 2
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 21
26703: PUSH
26704: LD_INT 2
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 33
26713: PUSH
26714: LD_INT 3
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: LIST
26725: PPUSH
26726: CALL_OW 69
26730: ST_TO_ADDR
// if not tmp then
26731: LD_VAR 0 1
26735: NOT
26736: IFFALSE 26740
// exit ;
26738: GO 26766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26740: LD_VAR 0 1
26744: PUSH
26745: LD_INT 1
26747: PPUSH
26748: LD_VAR 0 1
26752: PPUSH
26753: CALL_OW 12
26757: ARRAY
26758: PPUSH
26759: LD_INT 1
26761: PPUSH
26762: CALL_OW 234
// end ;
26766: PPOPN 1
26768: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26769: LD_EXP 37
26773: PUSH
26774: LD_EXP 79
26778: AND
26779: IFFALSE 26920
26781: GO 26783
26783: DISABLE
26784: LD_INT 0
26786: PPUSH
26787: PPUSH
26788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26789: LD_ADDR_VAR 0 3
26793: PUSH
26794: LD_INT 22
26796: PUSH
26797: LD_OWVAR 2
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 25
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PPUSH
26820: CALL_OW 69
26824: ST_TO_ADDR
// if not tmp then
26825: LD_VAR 0 3
26829: NOT
26830: IFFALSE 26834
// exit ;
26832: GO 26920
// un := tmp [ rand ( 1 , tmp ) ] ;
26834: LD_ADDR_VAR 0 2
26838: PUSH
26839: LD_VAR 0 3
26843: PUSH
26844: LD_INT 1
26846: PPUSH
26847: LD_VAR 0 3
26851: PPUSH
26852: CALL_OW 12
26856: ARRAY
26857: ST_TO_ADDR
// if Crawls ( un ) then
26858: LD_VAR 0 2
26862: PPUSH
26863: CALL_OW 318
26867: IFFALSE 26878
// ComWalk ( un ) ;
26869: LD_VAR 0 2
26873: PPUSH
26874: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26878: LD_VAR 0 2
26882: PPUSH
26883: LD_INT 9
26885: PPUSH
26886: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26890: LD_INT 28
26892: PPUSH
26893: LD_OWVAR 2
26897: PPUSH
26898: LD_INT 2
26900: PPUSH
26901: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26905: LD_INT 29
26907: PPUSH
26908: LD_OWVAR 2
26912: PPUSH
26913: LD_INT 2
26915: PPUSH
26916: CALL_OW 322
// end ;
26920: PPOPN 3
26922: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26923: LD_EXP 37
26927: PUSH
26928: LD_EXP 80
26932: AND
26933: IFFALSE 27044
26935: GO 26937
26937: DISABLE
26938: LD_INT 0
26940: PPUSH
26941: PPUSH
26942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26943: LD_ADDR_VAR 0 3
26947: PUSH
26948: LD_INT 22
26950: PUSH
26951: LD_OWVAR 2
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 25
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PPUSH
26974: CALL_OW 69
26978: ST_TO_ADDR
// if not tmp then
26979: LD_VAR 0 3
26983: NOT
26984: IFFALSE 26988
// exit ;
26986: GO 27044
// un := tmp [ rand ( 1 , tmp ) ] ;
26988: LD_ADDR_VAR 0 2
26992: PUSH
26993: LD_VAR 0 3
26997: PUSH
26998: LD_INT 1
27000: PPUSH
27001: LD_VAR 0 3
27005: PPUSH
27006: CALL_OW 12
27010: ARRAY
27011: ST_TO_ADDR
// if Crawls ( un ) then
27012: LD_VAR 0 2
27016: PPUSH
27017: CALL_OW 318
27021: IFFALSE 27032
// ComWalk ( un ) ;
27023: LD_VAR 0 2
27027: PPUSH
27028: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27032: LD_VAR 0 2
27036: PPUSH
27037: LD_INT 8
27039: PPUSH
27040: CALL_OW 336
// end ;
27044: PPOPN 3
27046: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27047: LD_EXP 37
27051: PUSH
27052: LD_EXP 81
27056: AND
27057: IFFALSE 27201
27059: GO 27061
27061: DISABLE
27062: LD_INT 0
27064: PPUSH
27065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27066: LD_ADDR_VAR 0 2
27070: PUSH
27071: LD_INT 22
27073: PUSH
27074: LD_OWVAR 2
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 21
27085: PUSH
27086: LD_INT 2
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: LD_INT 34
27098: PUSH
27099: LD_INT 12
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 34
27108: PUSH
27109: LD_INT 51
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 34
27118: PUSH
27119: LD_INT 32
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: LIST
27136: PPUSH
27137: CALL_OW 69
27141: ST_TO_ADDR
// if not tmp then
27142: LD_VAR 0 2
27146: NOT
27147: IFFALSE 27151
// exit ;
27149: GO 27201
// for i in tmp do
27151: LD_ADDR_VAR 0 1
27155: PUSH
27156: LD_VAR 0 2
27160: PUSH
27161: FOR_IN
27162: IFFALSE 27199
// if GetCargo ( i , mat_artifact ) = 0 then
27164: LD_VAR 0 1
27168: PPUSH
27169: LD_INT 4
27171: PPUSH
27172: CALL_OW 289
27176: PUSH
27177: LD_INT 0
27179: EQUAL
27180: IFFALSE 27197
// SetCargo ( i , mat_siberit , 100 ) ;
27182: LD_VAR 0 1
27186: PPUSH
27187: LD_INT 3
27189: PPUSH
27190: LD_INT 100
27192: PPUSH
27193: CALL_OW 290
27197: GO 27161
27199: POP
27200: POP
// end ;
27201: PPOPN 2
27203: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27204: LD_EXP 37
27208: PUSH
27209: LD_EXP 82
27213: AND
27214: IFFALSE 27397
27216: GO 27218
27218: DISABLE
27219: LD_INT 0
27221: PPUSH
27222: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27223: LD_ADDR_VAR 0 2
27227: PUSH
27228: LD_INT 22
27230: PUSH
27231: LD_OWVAR 2
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PPUSH
27240: CALL_OW 69
27244: ST_TO_ADDR
// if not tmp then
27245: LD_VAR 0 2
27249: NOT
27250: IFFALSE 27254
// exit ;
27252: GO 27397
// for i := 1 to 2 do
27254: LD_ADDR_VAR 0 1
27258: PUSH
27259: DOUBLE
27260: LD_INT 1
27262: DEC
27263: ST_TO_ADDR
27264: LD_INT 2
27266: PUSH
27267: FOR_TO
27268: IFFALSE 27395
// begin uc_side := your_side ;
27270: LD_ADDR_OWVAR 20
27274: PUSH
27275: LD_OWVAR 2
27279: ST_TO_ADDR
// uc_nation := nation_american ;
27280: LD_ADDR_OWVAR 21
27284: PUSH
27285: LD_INT 1
27287: ST_TO_ADDR
// vc_chassis := us_morphling ;
27288: LD_ADDR_OWVAR 37
27292: PUSH
27293: LD_INT 5
27295: ST_TO_ADDR
// vc_engine := engine_siberite ;
27296: LD_ADDR_OWVAR 39
27300: PUSH
27301: LD_INT 3
27303: ST_TO_ADDR
// vc_control := control_computer ;
27304: LD_ADDR_OWVAR 38
27308: PUSH
27309: LD_INT 3
27311: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27312: LD_ADDR_OWVAR 40
27316: PUSH
27317: LD_INT 10
27319: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27320: LD_VAR 0 2
27324: PUSH
27325: LD_INT 1
27327: ARRAY
27328: PPUSH
27329: CALL_OW 310
27333: NOT
27334: IFFALSE 27381
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27336: CALL_OW 45
27340: PPUSH
27341: LD_VAR 0 2
27345: PUSH
27346: LD_INT 1
27348: ARRAY
27349: PPUSH
27350: CALL_OW 250
27354: PPUSH
27355: LD_VAR 0 2
27359: PUSH
27360: LD_INT 1
27362: ARRAY
27363: PPUSH
27364: CALL_OW 251
27368: PPUSH
27369: LD_INT 12
27371: PPUSH
27372: LD_INT 1
27374: PPUSH
27375: CALL_OW 50
27379: GO 27393
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27381: CALL_OW 45
27385: PPUSH
27386: LD_INT 1
27388: PPUSH
27389: CALL_OW 51
// end ;
27393: GO 27267
27395: POP
27396: POP
// end ;
27397: PPOPN 2
27399: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27400: LD_EXP 37
27404: PUSH
27405: LD_EXP 83
27409: AND
27410: IFFALSE 27632
27412: GO 27414
27414: DISABLE
27415: LD_INT 0
27417: PPUSH
27418: PPUSH
27419: PPUSH
27420: PPUSH
27421: PPUSH
27422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27423: LD_ADDR_VAR 0 6
27427: PUSH
27428: LD_INT 22
27430: PUSH
27431: LD_OWVAR 2
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 21
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 3
27452: PUSH
27453: LD_INT 23
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: LIST
27471: PPUSH
27472: CALL_OW 69
27476: ST_TO_ADDR
// if not tmp then
27477: LD_VAR 0 6
27481: NOT
27482: IFFALSE 27486
// exit ;
27484: GO 27632
// s1 := rand ( 1 , 4 ) ;
27486: LD_ADDR_VAR 0 2
27490: PUSH
27491: LD_INT 1
27493: PPUSH
27494: LD_INT 4
27496: PPUSH
27497: CALL_OW 12
27501: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27502: LD_ADDR_VAR 0 4
27506: PUSH
27507: LD_VAR 0 6
27511: PUSH
27512: LD_INT 1
27514: ARRAY
27515: PPUSH
27516: LD_VAR 0 2
27520: PPUSH
27521: CALL_OW 259
27525: ST_TO_ADDR
// if s1 = 1 then
27526: LD_VAR 0 2
27530: PUSH
27531: LD_INT 1
27533: EQUAL
27534: IFFALSE 27554
// s2 := rand ( 2 , 4 ) else
27536: LD_ADDR_VAR 0 3
27540: PUSH
27541: LD_INT 2
27543: PPUSH
27544: LD_INT 4
27546: PPUSH
27547: CALL_OW 12
27551: ST_TO_ADDR
27552: GO 27562
// s2 := 1 ;
27554: LD_ADDR_VAR 0 3
27558: PUSH
27559: LD_INT 1
27561: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27562: LD_ADDR_VAR 0 5
27566: PUSH
27567: LD_VAR 0 6
27571: PUSH
27572: LD_INT 1
27574: ARRAY
27575: PPUSH
27576: LD_VAR 0 3
27580: PPUSH
27581: CALL_OW 259
27585: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27586: LD_VAR 0 6
27590: PUSH
27591: LD_INT 1
27593: ARRAY
27594: PPUSH
27595: LD_VAR 0 2
27599: PPUSH
27600: LD_VAR 0 5
27604: PPUSH
27605: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27609: LD_VAR 0 6
27613: PUSH
27614: LD_INT 1
27616: ARRAY
27617: PPUSH
27618: LD_VAR 0 3
27622: PPUSH
27623: LD_VAR 0 4
27627: PPUSH
27628: CALL_OW 237
// end ;
27632: PPOPN 6
27634: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27635: LD_EXP 37
27639: PUSH
27640: LD_EXP 84
27644: AND
27645: IFFALSE 27724
27647: GO 27649
27649: DISABLE
27650: LD_INT 0
27652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27653: LD_ADDR_VAR 0 1
27657: PUSH
27658: LD_INT 22
27660: PUSH
27661: LD_OWVAR 2
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 30
27672: PUSH
27673: LD_INT 3
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PPUSH
27684: CALL_OW 69
27688: ST_TO_ADDR
// if not tmp then
27689: LD_VAR 0 1
27693: NOT
27694: IFFALSE 27698
// exit ;
27696: GO 27724
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27698: LD_VAR 0 1
27702: PUSH
27703: LD_INT 1
27705: PPUSH
27706: LD_VAR 0 1
27710: PPUSH
27711: CALL_OW 12
27715: ARRAY
27716: PPUSH
27717: LD_INT 1
27719: PPUSH
27720: CALL_OW 234
// end ;
27724: PPOPN 1
27726: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27727: LD_EXP 37
27731: PUSH
27732: LD_EXP 85
27736: AND
27737: IFFALSE 27849
27739: GO 27741
27741: DISABLE
27742: LD_INT 0
27744: PPUSH
27745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27746: LD_ADDR_VAR 0 2
27750: PUSH
27751: LD_INT 22
27753: PUSH
27754: LD_OWVAR 2
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 2
27765: PUSH
27766: LD_INT 30
27768: PUSH
27769: LD_INT 27
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 30
27778: PUSH
27779: LD_INT 26
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 30
27788: PUSH
27789: LD_INT 28
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PPUSH
27806: CALL_OW 69
27810: ST_TO_ADDR
// if not tmp then
27811: LD_VAR 0 2
27815: NOT
27816: IFFALSE 27820
// exit ;
27818: GO 27849
// for i in tmp do
27820: LD_ADDR_VAR 0 1
27824: PUSH
27825: LD_VAR 0 2
27829: PUSH
27830: FOR_IN
27831: IFFALSE 27847
// SetLives ( i , 1 ) ;
27833: LD_VAR 0 1
27837: PPUSH
27838: LD_INT 1
27840: PPUSH
27841: CALL_OW 234
27845: GO 27830
27847: POP
27848: POP
// end ;
27849: PPOPN 2
27851: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27852: LD_EXP 37
27856: PUSH
27857: LD_EXP 86
27861: AND
27862: IFFALSE 28149
27864: GO 27866
27866: DISABLE
27867: LD_INT 0
27869: PPUSH
27870: PPUSH
27871: PPUSH
// begin i := rand ( 1 , 7 ) ;
27872: LD_ADDR_VAR 0 1
27876: PUSH
27877: LD_INT 1
27879: PPUSH
27880: LD_INT 7
27882: PPUSH
27883: CALL_OW 12
27887: ST_TO_ADDR
// case i of 1 :
27888: LD_VAR 0 1
27892: PUSH
27893: LD_INT 1
27895: DOUBLE
27896: EQUAL
27897: IFTRUE 27901
27899: GO 27911
27901: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27902: LD_STRING earthquake(getX(game), 0, 32)
27904: PPUSH
27905: CALL_OW 559
27909: GO 28149
27911: LD_INT 2
27913: DOUBLE
27914: EQUAL
27915: IFTRUE 27919
27917: GO 27933
27919: POP
// begin ToLua ( displayStucuk(); ) ;
27920: LD_STRING displayStucuk();
27922: PPUSH
27923: CALL_OW 559
// ResetFog ;
27927: CALL_OW 335
// end ; 3 :
27931: GO 28149
27933: LD_INT 3
27935: DOUBLE
27936: EQUAL
27937: IFTRUE 27941
27939: GO 28045
27941: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27942: LD_ADDR_VAR 0 2
27946: PUSH
27947: LD_INT 22
27949: PUSH
27950: LD_OWVAR 2
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 25
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PPUSH
27973: CALL_OW 69
27977: ST_TO_ADDR
// if not tmp then
27978: LD_VAR 0 2
27982: NOT
27983: IFFALSE 27987
// exit ;
27985: GO 28149
// un := tmp [ rand ( 1 , tmp ) ] ;
27987: LD_ADDR_VAR 0 3
27991: PUSH
27992: LD_VAR 0 2
27996: PUSH
27997: LD_INT 1
27999: PPUSH
28000: LD_VAR 0 2
28004: PPUSH
28005: CALL_OW 12
28009: ARRAY
28010: ST_TO_ADDR
// if Crawls ( un ) then
28011: LD_VAR 0 3
28015: PPUSH
28016: CALL_OW 318
28020: IFFALSE 28031
// ComWalk ( un ) ;
28022: LD_VAR 0 3
28026: PPUSH
28027: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28031: LD_VAR 0 3
28035: PPUSH
28036: LD_INT 8
28038: PPUSH
28039: CALL_OW 336
// end ; 4 :
28043: GO 28149
28045: LD_INT 4
28047: DOUBLE
28048: EQUAL
28049: IFTRUE 28053
28051: GO 28127
28053: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28054: LD_ADDR_VAR 0 2
28058: PUSH
28059: LD_INT 22
28061: PUSH
28062: LD_OWVAR 2
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 30
28073: PUSH
28074: LD_INT 29
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PPUSH
28085: CALL_OW 69
28089: ST_TO_ADDR
// if not tmp then
28090: LD_VAR 0 2
28094: NOT
28095: IFFALSE 28099
// exit ;
28097: GO 28149
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28099: LD_VAR 0 2
28103: PUSH
28104: LD_INT 1
28106: ARRAY
28107: PPUSH
28108: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28112: LD_VAR 0 2
28116: PUSH
28117: LD_INT 1
28119: ARRAY
28120: PPUSH
28121: CALL_OW 65
// end ; 5 .. 7 :
28125: GO 28149
28127: LD_INT 5
28129: DOUBLE
28130: GREATEREQUAL
28131: IFFALSE 28139
28133: LD_INT 7
28135: DOUBLE
28136: LESSEQUAL
28137: IFTRUE 28141
28139: GO 28148
28141: POP
// StreamSibBomb ; end ;
28142: CALL 24386 0 0
28146: GO 28149
28148: POP
// end ;
28149: PPOPN 3
28151: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28152: LD_EXP 37
28156: PUSH
28157: LD_EXP 87
28161: AND
28162: IFFALSE 28318
28164: GO 28166
28166: DISABLE
28167: LD_INT 0
28169: PPUSH
28170: PPUSH
28171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28172: LD_ADDR_VAR 0 2
28176: PUSH
28177: LD_INT 81
28179: PUSH
28180: LD_OWVAR 2
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 2
28191: PUSH
28192: LD_INT 21
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 21
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: LIST
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PPUSH
28221: CALL_OW 69
28225: ST_TO_ADDR
// if not tmp then
28226: LD_VAR 0 2
28230: NOT
28231: IFFALSE 28235
// exit ;
28233: GO 28318
// p := 0 ;
28235: LD_ADDR_VAR 0 3
28239: PUSH
28240: LD_INT 0
28242: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28243: LD_INT 35
28245: PPUSH
28246: CALL_OW 67
// p := p + 1 ;
28250: LD_ADDR_VAR 0 3
28254: PUSH
28255: LD_VAR 0 3
28259: PUSH
28260: LD_INT 1
28262: PLUS
28263: ST_TO_ADDR
// for i in tmp do
28264: LD_ADDR_VAR 0 1
28268: PUSH
28269: LD_VAR 0 2
28273: PUSH
28274: FOR_IN
28275: IFFALSE 28306
// if GetLives ( i ) < 1000 then
28277: LD_VAR 0 1
28281: PPUSH
28282: CALL_OW 256
28286: PUSH
28287: LD_INT 1000
28289: LESS
28290: IFFALSE 28304
// SetLives ( i , 1000 ) ;
28292: LD_VAR 0 1
28296: PPUSH
28297: LD_INT 1000
28299: PPUSH
28300: CALL_OW 234
28304: GO 28274
28306: POP
28307: POP
// until p > 20 ;
28308: LD_VAR 0 3
28312: PUSH
28313: LD_INT 20
28315: GREATER
28316: IFFALSE 28243
// end ;
28318: PPOPN 3
28320: END
// every 0 0$1 trigger StreamModeActive and sTime do
28321: LD_EXP 37
28325: PUSH
28326: LD_EXP 88
28330: AND
28331: IFFALSE 28366
28333: GO 28335
28335: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28336: LD_INT 28
28338: PPUSH
28339: LD_OWVAR 2
28343: PPUSH
28344: LD_INT 2
28346: PPUSH
28347: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28351: LD_INT 30
28353: PPUSH
28354: LD_OWVAR 2
28358: PPUSH
28359: LD_INT 2
28361: PPUSH
28362: CALL_OW 322
// end ;
28366: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28367: LD_EXP 37
28371: PUSH
28372: LD_EXP 89
28376: AND
28377: IFFALSE 28498
28379: GO 28381
28381: DISABLE
28382: LD_INT 0
28384: PPUSH
28385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28386: LD_ADDR_VAR 0 2
28390: PUSH
28391: LD_INT 22
28393: PUSH
28394: LD_OWVAR 2
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 21
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 3
28415: PUSH
28416: LD_INT 23
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: LIST
28434: PPUSH
28435: CALL_OW 69
28439: ST_TO_ADDR
// if not tmp then
28440: LD_VAR 0 2
28444: NOT
28445: IFFALSE 28449
// exit ;
28447: GO 28498
// for i in tmp do
28449: LD_ADDR_VAR 0 1
28453: PUSH
28454: LD_VAR 0 2
28458: PUSH
28459: FOR_IN
28460: IFFALSE 28496
// begin if Crawls ( i ) then
28462: LD_VAR 0 1
28466: PPUSH
28467: CALL_OW 318
28471: IFFALSE 28482
// ComWalk ( i ) ;
28473: LD_VAR 0 1
28477: PPUSH
28478: CALL_OW 138
// SetClass ( i , 2 ) ;
28482: LD_VAR 0 1
28486: PPUSH
28487: LD_INT 2
28489: PPUSH
28490: CALL_OW 336
// end ;
28494: GO 28459
28496: POP
28497: POP
// end ;
28498: PPOPN 2
28500: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28501: LD_EXP 37
28505: PUSH
28506: LD_EXP 90
28510: AND
28511: IFFALSE 28799
28513: GO 28515
28515: DISABLE
28516: LD_INT 0
28518: PPUSH
28519: PPUSH
28520: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28521: LD_OWVAR 2
28525: PPUSH
28526: LD_INT 9
28528: PPUSH
28529: LD_INT 1
28531: PPUSH
28532: LD_INT 1
28534: PPUSH
28535: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28539: LD_INT 9
28541: PPUSH
28542: LD_OWVAR 2
28546: PPUSH
28547: CALL_OW 343
// uc_side := 9 ;
28551: LD_ADDR_OWVAR 20
28555: PUSH
28556: LD_INT 9
28558: ST_TO_ADDR
// uc_nation := 2 ;
28559: LD_ADDR_OWVAR 21
28563: PUSH
28564: LD_INT 2
28566: ST_TO_ADDR
// hc_name := Dark Warrior ;
28567: LD_ADDR_OWVAR 26
28571: PUSH
28572: LD_STRING Dark Warrior
28574: ST_TO_ADDR
// hc_gallery :=  ;
28575: LD_ADDR_OWVAR 33
28579: PUSH
28580: LD_STRING 
28582: ST_TO_ADDR
// hc_noskilllimit := true ;
28583: LD_ADDR_OWVAR 76
28587: PUSH
28588: LD_INT 1
28590: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28591: LD_ADDR_OWVAR 31
28595: PUSH
28596: LD_INT 30
28598: PUSH
28599: LD_INT 30
28601: PUSH
28602: LD_INT 30
28604: PUSH
28605: LD_INT 30
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: ST_TO_ADDR
// un := CreateHuman ;
28614: LD_ADDR_VAR 0 3
28618: PUSH
28619: CALL_OW 44
28623: ST_TO_ADDR
// hc_noskilllimit := false ;
28624: LD_ADDR_OWVAR 76
28628: PUSH
28629: LD_INT 0
28631: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28632: LD_VAR 0 3
28636: PPUSH
28637: LD_INT 1
28639: PPUSH
28640: CALL_OW 51
// ToLua ( playRanger() ) ;
28644: LD_STRING playRanger()
28646: PPUSH
28647: CALL_OW 559
// p := 0 ;
28651: LD_ADDR_VAR 0 2
28655: PUSH
28656: LD_INT 0
28658: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28659: LD_INT 35
28661: PPUSH
28662: CALL_OW 67
// p := p + 1 ;
28666: LD_ADDR_VAR 0 2
28670: PUSH
28671: LD_VAR 0 2
28675: PUSH
28676: LD_INT 1
28678: PLUS
28679: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28680: LD_VAR 0 3
28684: PPUSH
28685: CALL_OW 256
28689: PUSH
28690: LD_INT 1000
28692: LESS
28693: IFFALSE 28707
// SetLives ( un , 1000 ) ;
28695: LD_VAR 0 3
28699: PPUSH
28700: LD_INT 1000
28702: PPUSH
28703: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28707: LD_VAR 0 3
28711: PPUSH
28712: LD_INT 81
28714: PUSH
28715: LD_OWVAR 2
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 91
28726: PUSH
28727: LD_VAR 0 3
28731: PUSH
28732: LD_INT 30
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: LIST
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PPUSH
28744: CALL_OW 69
28748: PPUSH
28749: LD_VAR 0 3
28753: PPUSH
28754: CALL_OW 74
28758: PPUSH
28759: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28763: LD_VAR 0 2
28767: PUSH
28768: LD_INT 80
28770: GREATER
28771: PUSH
28772: LD_VAR 0 3
28776: PPUSH
28777: CALL_OW 301
28781: OR
28782: IFFALSE 28659
// if un then
28784: LD_VAR 0 3
28788: IFFALSE 28799
// RemoveUnit ( un ) ;
28790: LD_VAR 0 3
28794: PPUSH
28795: CALL_OW 64
// end ;
28799: PPOPN 3
28801: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28802: LD_EXP 91
28806: IFFALSE 28922
28808: GO 28810
28810: DISABLE
28811: LD_INT 0
28813: PPUSH
28814: PPUSH
28815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28816: LD_ADDR_VAR 0 2
28820: PUSH
28821: LD_INT 81
28823: PUSH
28824: LD_OWVAR 2
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 21
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PPUSH
28847: CALL_OW 69
28851: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28852: LD_STRING playComputer()
28854: PPUSH
28855: CALL_OW 559
// if not tmp then
28859: LD_VAR 0 2
28863: NOT
28864: IFFALSE 28868
// exit ;
28866: GO 28922
// for i in tmp do
28868: LD_ADDR_VAR 0 1
28872: PUSH
28873: LD_VAR 0 2
28877: PUSH
28878: FOR_IN
28879: IFFALSE 28920
// for j := 1 to 4 do
28881: LD_ADDR_VAR 0 3
28885: PUSH
28886: DOUBLE
28887: LD_INT 1
28889: DEC
28890: ST_TO_ADDR
28891: LD_INT 4
28893: PUSH
28894: FOR_TO
28895: IFFALSE 28916
// SetSkill ( i , j , 10 ) ;
28897: LD_VAR 0 1
28901: PPUSH
28902: LD_VAR 0 3
28906: PPUSH
28907: LD_INT 10
28909: PPUSH
28910: CALL_OW 237
28914: GO 28894
28916: POP
28917: POP
28918: GO 28878
28920: POP
28921: POP
// end ;
28922: PPOPN 3
28924: END
// every 0 0$1 trigger s30 do var i , tmp ;
28925: LD_EXP 92
28929: IFFALSE 28998
28931: GO 28933
28933: DISABLE
28934: LD_INT 0
28936: PPUSH
28937: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28938: LD_ADDR_VAR 0 2
28942: PUSH
28943: LD_INT 22
28945: PUSH
28946: LD_OWVAR 2
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PPUSH
28955: CALL_OW 69
28959: ST_TO_ADDR
// if not tmp then
28960: LD_VAR 0 2
28964: NOT
28965: IFFALSE 28969
// exit ;
28967: GO 28998
// for i in tmp do
28969: LD_ADDR_VAR 0 1
28973: PUSH
28974: LD_VAR 0 2
28978: PUSH
28979: FOR_IN
28980: IFFALSE 28996
// SetLives ( i , 300 ) ;
28982: LD_VAR 0 1
28986: PPUSH
28987: LD_INT 300
28989: PPUSH
28990: CALL_OW 234
28994: GO 28979
28996: POP
28997: POP
// end ;
28998: PPOPN 2
29000: END
// every 0 0$1 trigger s60 do var i , tmp ;
29001: LD_EXP 93
29005: IFFALSE 29074
29007: GO 29009
29009: DISABLE
29010: LD_INT 0
29012: PPUSH
29013: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29014: LD_ADDR_VAR 0 2
29018: PUSH
29019: LD_INT 22
29021: PUSH
29022: LD_OWVAR 2
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PPUSH
29031: CALL_OW 69
29035: ST_TO_ADDR
// if not tmp then
29036: LD_VAR 0 2
29040: NOT
29041: IFFALSE 29045
// exit ;
29043: GO 29074
// for i in tmp do
29045: LD_ADDR_VAR 0 1
29049: PUSH
29050: LD_VAR 0 2
29054: PUSH
29055: FOR_IN
29056: IFFALSE 29072
// SetLives ( i , 600 ) ;
29058: LD_VAR 0 1
29062: PPUSH
29063: LD_INT 600
29065: PPUSH
29066: CALL_OW 234
29070: GO 29055
29072: POP
29073: POP
// end ;
29074: PPOPN 2
29076: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29077: LD_INT 0
29079: PPUSH
// case cmd of 301 :
29080: LD_VAR 0 1
29084: PUSH
29085: LD_INT 301
29087: DOUBLE
29088: EQUAL
29089: IFTRUE 29093
29091: GO 29125
29093: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29094: LD_VAR 0 6
29098: PPUSH
29099: LD_VAR 0 7
29103: PPUSH
29104: LD_VAR 0 8
29108: PPUSH
29109: LD_VAR 0 4
29113: PPUSH
29114: LD_VAR 0 5
29118: PPUSH
29119: CALL 30326 0 5
29123: GO 29246
29125: LD_INT 302
29127: DOUBLE
29128: EQUAL
29129: IFTRUE 29133
29131: GO 29170
29133: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29134: LD_VAR 0 6
29138: PPUSH
29139: LD_VAR 0 7
29143: PPUSH
29144: LD_VAR 0 8
29148: PPUSH
29149: LD_VAR 0 9
29153: PPUSH
29154: LD_VAR 0 4
29158: PPUSH
29159: LD_VAR 0 5
29163: PPUSH
29164: CALL 30417 0 6
29168: GO 29246
29170: LD_INT 303
29172: DOUBLE
29173: EQUAL
29174: IFTRUE 29178
29176: GO 29215
29178: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29179: LD_VAR 0 6
29183: PPUSH
29184: LD_VAR 0 7
29188: PPUSH
29189: LD_VAR 0 8
29193: PPUSH
29194: LD_VAR 0 9
29198: PPUSH
29199: LD_VAR 0 4
29203: PPUSH
29204: LD_VAR 0 5
29208: PPUSH
29209: CALL 29251 0 6
29213: GO 29246
29215: LD_INT 304
29217: DOUBLE
29218: EQUAL
29219: IFTRUE 29223
29221: GO 29245
29223: POP
// hHackTeleport ( unit , x , y ) ; end ;
29224: LD_VAR 0 2
29228: PPUSH
29229: LD_VAR 0 4
29233: PPUSH
29234: LD_VAR 0 5
29238: PPUSH
29239: CALL 31010 0 3
29243: GO 29246
29245: POP
// end ;
29246: LD_VAR 0 12
29250: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29251: LD_INT 0
29253: PPUSH
29254: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29255: LD_VAR 0 1
29259: PUSH
29260: LD_INT 1
29262: LESS
29263: PUSH
29264: LD_VAR 0 1
29268: PUSH
29269: LD_INT 3
29271: GREATER
29272: OR
29273: PUSH
29274: LD_VAR 0 5
29278: PPUSH
29279: LD_VAR 0 6
29283: PPUSH
29284: CALL_OW 428
29288: OR
29289: IFFALSE 29293
// exit ;
29291: GO 30013
// uc_side := your_side ;
29293: LD_ADDR_OWVAR 20
29297: PUSH
29298: LD_OWVAR 2
29302: ST_TO_ADDR
// uc_nation := nation ;
29303: LD_ADDR_OWVAR 21
29307: PUSH
29308: LD_VAR 0 1
29312: ST_TO_ADDR
// bc_level = 1 ;
29313: LD_ADDR_OWVAR 43
29317: PUSH
29318: LD_INT 1
29320: ST_TO_ADDR
// case btype of 1 :
29321: LD_VAR 0 2
29325: PUSH
29326: LD_INT 1
29328: DOUBLE
29329: EQUAL
29330: IFTRUE 29334
29332: GO 29345
29334: POP
// bc_type := b_depot ; 2 :
29335: LD_ADDR_OWVAR 42
29339: PUSH
29340: LD_INT 0
29342: ST_TO_ADDR
29343: GO 29957
29345: LD_INT 2
29347: DOUBLE
29348: EQUAL
29349: IFTRUE 29353
29351: GO 29364
29353: POP
// bc_type := b_warehouse ; 3 :
29354: LD_ADDR_OWVAR 42
29358: PUSH
29359: LD_INT 1
29361: ST_TO_ADDR
29362: GO 29957
29364: LD_INT 3
29366: DOUBLE
29367: EQUAL
29368: IFTRUE 29372
29370: GO 29383
29372: POP
// bc_type := b_lab ; 4 .. 9 :
29373: LD_ADDR_OWVAR 42
29377: PUSH
29378: LD_INT 6
29380: ST_TO_ADDR
29381: GO 29957
29383: LD_INT 4
29385: DOUBLE
29386: GREATEREQUAL
29387: IFFALSE 29395
29389: LD_INT 9
29391: DOUBLE
29392: LESSEQUAL
29393: IFTRUE 29397
29395: GO 29449
29397: POP
// begin bc_type := b_lab_half ;
29398: LD_ADDR_OWVAR 42
29402: PUSH
29403: LD_INT 7
29405: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29406: LD_ADDR_OWVAR 44
29410: PUSH
29411: LD_INT 10
29413: PUSH
29414: LD_INT 11
29416: PUSH
29417: LD_INT 12
29419: PUSH
29420: LD_INT 15
29422: PUSH
29423: LD_INT 14
29425: PUSH
29426: LD_INT 13
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: PUSH
29437: LD_VAR 0 2
29441: PUSH
29442: LD_INT 3
29444: MINUS
29445: ARRAY
29446: ST_TO_ADDR
// end ; 10 .. 13 :
29447: GO 29957
29449: LD_INT 10
29451: DOUBLE
29452: GREATEREQUAL
29453: IFFALSE 29461
29455: LD_INT 13
29457: DOUBLE
29458: LESSEQUAL
29459: IFTRUE 29463
29461: GO 29540
29463: POP
// begin bc_type := b_lab_full ;
29464: LD_ADDR_OWVAR 42
29468: PUSH
29469: LD_INT 8
29471: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29472: LD_ADDR_OWVAR 44
29476: PUSH
29477: LD_INT 10
29479: PUSH
29480: LD_INT 12
29482: PUSH
29483: LD_INT 14
29485: PUSH
29486: LD_INT 13
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: PUSH
29495: LD_VAR 0 2
29499: PUSH
29500: LD_INT 9
29502: MINUS
29503: ARRAY
29504: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29505: LD_ADDR_OWVAR 45
29509: PUSH
29510: LD_INT 11
29512: PUSH
29513: LD_INT 15
29515: PUSH
29516: LD_INT 12
29518: PUSH
29519: LD_INT 15
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: PUSH
29528: LD_VAR 0 2
29532: PUSH
29533: LD_INT 9
29535: MINUS
29536: ARRAY
29537: ST_TO_ADDR
// end ; 14 :
29538: GO 29957
29540: LD_INT 14
29542: DOUBLE
29543: EQUAL
29544: IFTRUE 29548
29546: GO 29559
29548: POP
// bc_type := b_workshop ; 15 :
29549: LD_ADDR_OWVAR 42
29553: PUSH
29554: LD_INT 2
29556: ST_TO_ADDR
29557: GO 29957
29559: LD_INT 15
29561: DOUBLE
29562: EQUAL
29563: IFTRUE 29567
29565: GO 29578
29567: POP
// bc_type := b_factory ; 16 :
29568: LD_ADDR_OWVAR 42
29572: PUSH
29573: LD_INT 3
29575: ST_TO_ADDR
29576: GO 29957
29578: LD_INT 16
29580: DOUBLE
29581: EQUAL
29582: IFTRUE 29586
29584: GO 29597
29586: POP
// bc_type := b_ext_gun ; 17 :
29587: LD_ADDR_OWVAR 42
29591: PUSH
29592: LD_INT 17
29594: ST_TO_ADDR
29595: GO 29957
29597: LD_INT 17
29599: DOUBLE
29600: EQUAL
29601: IFTRUE 29605
29603: GO 29633
29605: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29606: LD_ADDR_OWVAR 42
29610: PUSH
29611: LD_INT 19
29613: PUSH
29614: LD_INT 23
29616: PUSH
29617: LD_INT 19
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: PUSH
29625: LD_VAR 0 1
29629: ARRAY
29630: ST_TO_ADDR
29631: GO 29957
29633: LD_INT 18
29635: DOUBLE
29636: EQUAL
29637: IFTRUE 29641
29639: GO 29652
29641: POP
// bc_type := b_ext_radar ; 19 :
29642: LD_ADDR_OWVAR 42
29646: PUSH
29647: LD_INT 20
29649: ST_TO_ADDR
29650: GO 29957
29652: LD_INT 19
29654: DOUBLE
29655: EQUAL
29656: IFTRUE 29660
29658: GO 29671
29660: POP
// bc_type := b_ext_radio ; 20 :
29661: LD_ADDR_OWVAR 42
29665: PUSH
29666: LD_INT 22
29668: ST_TO_ADDR
29669: GO 29957
29671: LD_INT 20
29673: DOUBLE
29674: EQUAL
29675: IFTRUE 29679
29677: GO 29690
29679: POP
// bc_type := b_ext_siberium ; 21 :
29680: LD_ADDR_OWVAR 42
29684: PUSH
29685: LD_INT 21
29687: ST_TO_ADDR
29688: GO 29957
29690: LD_INT 21
29692: DOUBLE
29693: EQUAL
29694: IFTRUE 29698
29696: GO 29709
29698: POP
// bc_type := b_ext_computer ; 22 :
29699: LD_ADDR_OWVAR 42
29703: PUSH
29704: LD_INT 24
29706: ST_TO_ADDR
29707: GO 29957
29709: LD_INT 22
29711: DOUBLE
29712: EQUAL
29713: IFTRUE 29717
29715: GO 29728
29717: POP
// bc_type := b_ext_track ; 23 :
29718: LD_ADDR_OWVAR 42
29722: PUSH
29723: LD_INT 16
29725: ST_TO_ADDR
29726: GO 29957
29728: LD_INT 23
29730: DOUBLE
29731: EQUAL
29732: IFTRUE 29736
29734: GO 29747
29736: POP
// bc_type := b_ext_laser ; 24 :
29737: LD_ADDR_OWVAR 42
29741: PUSH
29742: LD_INT 25
29744: ST_TO_ADDR
29745: GO 29957
29747: LD_INT 24
29749: DOUBLE
29750: EQUAL
29751: IFTRUE 29755
29753: GO 29766
29755: POP
// bc_type := b_control_tower ; 25 :
29756: LD_ADDR_OWVAR 42
29760: PUSH
29761: LD_INT 36
29763: ST_TO_ADDR
29764: GO 29957
29766: LD_INT 25
29768: DOUBLE
29769: EQUAL
29770: IFTRUE 29774
29772: GO 29785
29774: POP
// bc_type := b_breastwork ; 26 :
29775: LD_ADDR_OWVAR 42
29779: PUSH
29780: LD_INT 31
29782: ST_TO_ADDR
29783: GO 29957
29785: LD_INT 26
29787: DOUBLE
29788: EQUAL
29789: IFTRUE 29793
29791: GO 29804
29793: POP
// bc_type := b_bunker ; 27 :
29794: LD_ADDR_OWVAR 42
29798: PUSH
29799: LD_INT 32
29801: ST_TO_ADDR
29802: GO 29957
29804: LD_INT 27
29806: DOUBLE
29807: EQUAL
29808: IFTRUE 29812
29810: GO 29823
29812: POP
// bc_type := b_turret ; 28 :
29813: LD_ADDR_OWVAR 42
29817: PUSH
29818: LD_INT 33
29820: ST_TO_ADDR
29821: GO 29957
29823: LD_INT 28
29825: DOUBLE
29826: EQUAL
29827: IFTRUE 29831
29829: GO 29842
29831: POP
// bc_type := b_armoury ; 29 :
29832: LD_ADDR_OWVAR 42
29836: PUSH
29837: LD_INT 4
29839: ST_TO_ADDR
29840: GO 29957
29842: LD_INT 29
29844: DOUBLE
29845: EQUAL
29846: IFTRUE 29850
29848: GO 29861
29850: POP
// bc_type := b_barracks ; 30 :
29851: LD_ADDR_OWVAR 42
29855: PUSH
29856: LD_INT 5
29858: ST_TO_ADDR
29859: GO 29957
29861: LD_INT 30
29863: DOUBLE
29864: EQUAL
29865: IFTRUE 29869
29867: GO 29880
29869: POP
// bc_type := b_solar_power ; 31 :
29870: LD_ADDR_OWVAR 42
29874: PUSH
29875: LD_INT 27
29877: ST_TO_ADDR
29878: GO 29957
29880: LD_INT 31
29882: DOUBLE
29883: EQUAL
29884: IFTRUE 29888
29886: GO 29899
29888: POP
// bc_type := b_oil_power ; 32 :
29889: LD_ADDR_OWVAR 42
29893: PUSH
29894: LD_INT 26
29896: ST_TO_ADDR
29897: GO 29957
29899: LD_INT 32
29901: DOUBLE
29902: EQUAL
29903: IFTRUE 29907
29905: GO 29918
29907: POP
// bc_type := b_siberite_power ; 33 :
29908: LD_ADDR_OWVAR 42
29912: PUSH
29913: LD_INT 28
29915: ST_TO_ADDR
29916: GO 29957
29918: LD_INT 33
29920: DOUBLE
29921: EQUAL
29922: IFTRUE 29926
29924: GO 29937
29926: POP
// bc_type := b_oil_mine ; 34 :
29927: LD_ADDR_OWVAR 42
29931: PUSH
29932: LD_INT 29
29934: ST_TO_ADDR
29935: GO 29957
29937: LD_INT 34
29939: DOUBLE
29940: EQUAL
29941: IFTRUE 29945
29943: GO 29956
29945: POP
// bc_type := b_siberite_mine ; end ;
29946: LD_ADDR_OWVAR 42
29950: PUSH
29951: LD_INT 30
29953: ST_TO_ADDR
29954: GO 29957
29956: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29957: LD_ADDR_VAR 0 8
29961: PUSH
29962: LD_VAR 0 5
29966: PPUSH
29967: LD_VAR 0 6
29971: PPUSH
29972: LD_VAR 0 3
29976: PPUSH
29977: CALL_OW 47
29981: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29982: LD_OWVAR 42
29986: PUSH
29987: LD_INT 32
29989: PUSH
29990: LD_INT 33
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: IN
29997: IFFALSE 30013
// PlaceWeaponTurret ( b , weapon ) ;
29999: LD_VAR 0 8
30003: PPUSH
30004: LD_VAR 0 4
30008: PPUSH
30009: CALL_OW 431
// end ;
30013: LD_VAR 0 7
30017: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30018: LD_INT 0
30020: PPUSH
30021: PPUSH
30022: PPUSH
30023: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30024: LD_ADDR_VAR 0 4
30028: PUSH
30029: LD_INT 22
30031: PUSH
30032: LD_OWVAR 2
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 2
30043: PUSH
30044: LD_INT 30
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 30
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: LIST
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PPUSH
30073: CALL_OW 69
30077: ST_TO_ADDR
// if not tmp then
30078: LD_VAR 0 4
30082: NOT
30083: IFFALSE 30087
// exit ;
30085: GO 30146
// for i in tmp do
30087: LD_ADDR_VAR 0 2
30091: PUSH
30092: LD_VAR 0 4
30096: PUSH
30097: FOR_IN
30098: IFFALSE 30144
// for j = 1 to 3 do
30100: LD_ADDR_VAR 0 3
30104: PUSH
30105: DOUBLE
30106: LD_INT 1
30108: DEC
30109: ST_TO_ADDR
30110: LD_INT 3
30112: PUSH
30113: FOR_TO
30114: IFFALSE 30140
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30116: LD_VAR 0 2
30120: PPUSH
30121: CALL_OW 274
30125: PPUSH
30126: LD_VAR 0 3
30130: PPUSH
30131: LD_INT 99999
30133: PPUSH
30134: CALL_OW 277
30138: GO 30113
30140: POP
30141: POP
30142: GO 30097
30144: POP
30145: POP
// end ;
30146: LD_VAR 0 1
30150: RET
// export function hHackSetLevel10 ; var i , j ; begin
30151: LD_INT 0
30153: PPUSH
30154: PPUSH
30155: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30156: LD_ADDR_VAR 0 2
30160: PUSH
30161: LD_INT 21
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PPUSH
30171: CALL_OW 69
30175: PUSH
30176: FOR_IN
30177: IFFALSE 30229
// if IsSelected ( i ) then
30179: LD_VAR 0 2
30183: PPUSH
30184: CALL_OW 306
30188: IFFALSE 30227
// begin for j := 1 to 4 do
30190: LD_ADDR_VAR 0 3
30194: PUSH
30195: DOUBLE
30196: LD_INT 1
30198: DEC
30199: ST_TO_ADDR
30200: LD_INT 4
30202: PUSH
30203: FOR_TO
30204: IFFALSE 30225
// SetSkill ( i , j , 10 ) ;
30206: LD_VAR 0 2
30210: PPUSH
30211: LD_VAR 0 3
30215: PPUSH
30216: LD_INT 10
30218: PPUSH
30219: CALL_OW 237
30223: GO 30203
30225: POP
30226: POP
// end ;
30227: GO 30176
30229: POP
30230: POP
// end ;
30231: LD_VAR 0 1
30235: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30236: LD_INT 0
30238: PPUSH
30239: PPUSH
30240: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30241: LD_ADDR_VAR 0 2
30245: PUSH
30246: LD_INT 22
30248: PUSH
30249: LD_OWVAR 2
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 21
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PPUSH
30272: CALL_OW 69
30276: PUSH
30277: FOR_IN
30278: IFFALSE 30319
// begin for j := 1 to 4 do
30280: LD_ADDR_VAR 0 3
30284: PUSH
30285: DOUBLE
30286: LD_INT 1
30288: DEC
30289: ST_TO_ADDR
30290: LD_INT 4
30292: PUSH
30293: FOR_TO
30294: IFFALSE 30315
// SetSkill ( i , j , 10 ) ;
30296: LD_VAR 0 2
30300: PPUSH
30301: LD_VAR 0 3
30305: PPUSH
30306: LD_INT 10
30308: PPUSH
30309: CALL_OW 237
30313: GO 30293
30315: POP
30316: POP
// end ;
30317: GO 30277
30319: POP
30320: POP
// end ;
30321: LD_VAR 0 1
30325: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30326: LD_INT 0
30328: PPUSH
// uc_side := your_side ;
30329: LD_ADDR_OWVAR 20
30333: PUSH
30334: LD_OWVAR 2
30338: ST_TO_ADDR
// uc_nation := nation ;
30339: LD_ADDR_OWVAR 21
30343: PUSH
30344: LD_VAR 0 1
30348: ST_TO_ADDR
// InitHc ;
30349: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30353: LD_INT 0
30355: PPUSH
30356: LD_VAR 0 2
30360: PPUSH
30361: LD_VAR 0 3
30365: PPUSH
30366: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30370: LD_VAR 0 4
30374: PPUSH
30375: LD_VAR 0 5
30379: PPUSH
30380: CALL_OW 428
30384: PUSH
30385: LD_INT 0
30387: EQUAL
30388: IFFALSE 30412
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30390: CALL_OW 44
30394: PPUSH
30395: LD_VAR 0 4
30399: PPUSH
30400: LD_VAR 0 5
30404: PPUSH
30405: LD_INT 1
30407: PPUSH
30408: CALL_OW 48
// end ;
30412: LD_VAR 0 6
30416: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30417: LD_INT 0
30419: PPUSH
30420: PPUSH
// uc_side := your_side ;
30421: LD_ADDR_OWVAR 20
30425: PUSH
30426: LD_OWVAR 2
30430: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30431: LD_VAR 0 1
30435: PUSH
30436: LD_INT 1
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: LD_INT 3
30444: PUSH
30445: LD_INT 4
30447: PUSH
30448: LD_INT 5
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: IN
30458: IFFALSE 30470
// uc_nation := nation_american else
30460: LD_ADDR_OWVAR 21
30464: PUSH
30465: LD_INT 1
30467: ST_TO_ADDR
30468: GO 30513
// if chassis in [ 11 , 12 , 13 , 14 ] then
30470: LD_VAR 0 1
30474: PUSH
30475: LD_INT 11
30477: PUSH
30478: LD_INT 12
30480: PUSH
30481: LD_INT 13
30483: PUSH
30484: LD_INT 14
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: IN
30493: IFFALSE 30505
// uc_nation := nation_arabian else
30495: LD_ADDR_OWVAR 21
30499: PUSH
30500: LD_INT 2
30502: ST_TO_ADDR
30503: GO 30513
// uc_nation := nation_russian ;
30505: LD_ADDR_OWVAR 21
30509: PUSH
30510: LD_INT 3
30512: ST_TO_ADDR
// vc_chassis := chassis ;
30513: LD_ADDR_OWVAR 37
30517: PUSH
30518: LD_VAR 0 1
30522: ST_TO_ADDR
// vc_engine := engine ;
30523: LD_ADDR_OWVAR 39
30527: PUSH
30528: LD_VAR 0 2
30532: ST_TO_ADDR
// vc_control := control ;
30533: LD_ADDR_OWVAR 38
30537: PUSH
30538: LD_VAR 0 3
30542: ST_TO_ADDR
// vc_weapon := weapon ;
30543: LD_ADDR_OWVAR 40
30547: PUSH
30548: LD_VAR 0 4
30552: ST_TO_ADDR
// un := CreateVehicle ;
30553: LD_ADDR_VAR 0 8
30557: PUSH
30558: CALL_OW 45
30562: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30563: LD_VAR 0 8
30567: PPUSH
30568: LD_INT 0
30570: PPUSH
30571: LD_INT 5
30573: PPUSH
30574: CALL_OW 12
30578: PPUSH
30579: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30583: LD_VAR 0 8
30587: PPUSH
30588: LD_VAR 0 5
30592: PPUSH
30593: LD_VAR 0 6
30597: PPUSH
30598: LD_INT 1
30600: PPUSH
30601: CALL_OW 48
// end ;
30605: LD_VAR 0 7
30609: RET
// export hInvincible ; every 1 do
30610: GO 30612
30612: DISABLE
// hInvincible := [ ] ;
30613: LD_ADDR_EXP 94
30617: PUSH
30618: EMPTY
30619: ST_TO_ADDR
30620: END
// every 10 do var i ;
30621: GO 30623
30623: DISABLE
30624: LD_INT 0
30626: PPUSH
// begin enable ;
30627: ENABLE
// if not hInvincible then
30628: LD_EXP 94
30632: NOT
30633: IFFALSE 30637
// exit ;
30635: GO 30681
// for i in hInvincible do
30637: LD_ADDR_VAR 0 1
30641: PUSH
30642: LD_EXP 94
30646: PUSH
30647: FOR_IN
30648: IFFALSE 30679
// if GetLives ( i ) < 1000 then
30650: LD_VAR 0 1
30654: PPUSH
30655: CALL_OW 256
30659: PUSH
30660: LD_INT 1000
30662: LESS
30663: IFFALSE 30677
// SetLives ( i , 1000 ) ;
30665: LD_VAR 0 1
30669: PPUSH
30670: LD_INT 1000
30672: PPUSH
30673: CALL_OW 234
30677: GO 30647
30679: POP
30680: POP
// end ;
30681: PPOPN 1
30683: END
// export function hHackInvincible ; var i ; begin
30684: LD_INT 0
30686: PPUSH
30687: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30688: LD_ADDR_VAR 0 2
30692: PUSH
30693: LD_INT 2
30695: PUSH
30696: LD_INT 21
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 21
30708: PUSH
30709: LD_INT 2
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: LIST
30720: PPUSH
30721: CALL_OW 69
30725: PUSH
30726: FOR_IN
30727: IFFALSE 30788
// if IsSelected ( i ) then
30729: LD_VAR 0 2
30733: PPUSH
30734: CALL_OW 306
30738: IFFALSE 30786
// begin if i in hInvincible then
30740: LD_VAR 0 2
30744: PUSH
30745: LD_EXP 94
30749: IN
30750: IFFALSE 30770
// hInvincible := hInvincible diff i else
30752: LD_ADDR_EXP 94
30756: PUSH
30757: LD_EXP 94
30761: PUSH
30762: LD_VAR 0 2
30766: DIFF
30767: ST_TO_ADDR
30768: GO 30786
// hInvincible := hInvincible union i ;
30770: LD_ADDR_EXP 94
30774: PUSH
30775: LD_EXP 94
30779: PUSH
30780: LD_VAR 0 2
30784: UNION
30785: ST_TO_ADDR
// end ;
30786: GO 30726
30788: POP
30789: POP
// end ;
30790: LD_VAR 0 1
30794: RET
// export function hHackInvisible ; var i , j ; begin
30795: LD_INT 0
30797: PPUSH
30798: PPUSH
30799: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30800: LD_ADDR_VAR 0 2
30804: PUSH
30805: LD_INT 21
30807: PUSH
30808: LD_INT 1
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PPUSH
30815: CALL_OW 69
30819: PUSH
30820: FOR_IN
30821: IFFALSE 30845
// if IsSelected ( i ) then
30823: LD_VAR 0 2
30827: PPUSH
30828: CALL_OW 306
30832: IFFALSE 30843
// ComForceInvisible ( i ) ;
30834: LD_VAR 0 2
30838: PPUSH
30839: CALL_OW 496
30843: GO 30820
30845: POP
30846: POP
// end ;
30847: LD_VAR 0 1
30851: RET
// export function hHackChangeYourSide ; begin
30852: LD_INT 0
30854: PPUSH
// if your_side = 8 then
30855: LD_OWVAR 2
30859: PUSH
30860: LD_INT 8
30862: EQUAL
30863: IFFALSE 30875
// your_side := 0 else
30865: LD_ADDR_OWVAR 2
30869: PUSH
30870: LD_INT 0
30872: ST_TO_ADDR
30873: GO 30889
// your_side := your_side + 1 ;
30875: LD_ADDR_OWVAR 2
30879: PUSH
30880: LD_OWVAR 2
30884: PUSH
30885: LD_INT 1
30887: PLUS
30888: ST_TO_ADDR
// end ;
30889: LD_VAR 0 1
30893: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30894: LD_INT 0
30896: PPUSH
30897: PPUSH
30898: PPUSH
// for i in all_units do
30899: LD_ADDR_VAR 0 2
30903: PUSH
30904: LD_OWVAR 3
30908: PUSH
30909: FOR_IN
30910: IFFALSE 30988
// if IsSelected ( i ) then
30912: LD_VAR 0 2
30916: PPUSH
30917: CALL_OW 306
30921: IFFALSE 30986
// begin j := GetSide ( i ) ;
30923: LD_ADDR_VAR 0 3
30927: PUSH
30928: LD_VAR 0 2
30932: PPUSH
30933: CALL_OW 255
30937: ST_TO_ADDR
// if j = 8 then
30938: LD_VAR 0 3
30942: PUSH
30943: LD_INT 8
30945: EQUAL
30946: IFFALSE 30958
// j := 0 else
30948: LD_ADDR_VAR 0 3
30952: PUSH
30953: LD_INT 0
30955: ST_TO_ADDR
30956: GO 30972
// j := j + 1 ;
30958: LD_ADDR_VAR 0 3
30962: PUSH
30963: LD_VAR 0 3
30967: PUSH
30968: LD_INT 1
30970: PLUS
30971: ST_TO_ADDR
// SetSide ( i , j ) ;
30972: LD_VAR 0 2
30976: PPUSH
30977: LD_VAR 0 3
30981: PPUSH
30982: CALL_OW 235
// end ;
30986: GO 30909
30988: POP
30989: POP
// end ;
30990: LD_VAR 0 1
30994: RET
// export function hHackFog ; begin
30995: LD_INT 0
30997: PPUSH
// FogOff ( true ) ;
30998: LD_INT 1
31000: PPUSH
31001: CALL_OW 344
// end ;
31005: LD_VAR 0 1
31009: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31010: LD_INT 0
31012: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31013: LD_VAR 0 1
31017: PPUSH
31018: LD_VAR 0 2
31022: PPUSH
31023: LD_VAR 0 3
31027: PPUSH
31028: LD_INT 1
31030: PPUSH
31031: LD_INT 1
31033: PPUSH
31034: CALL_OW 483
// CenterOnXY ( x , y ) ;
31038: LD_VAR 0 2
31042: PPUSH
31043: LD_VAR 0 3
31047: PPUSH
31048: CALL_OW 84
// end ;
31052: LD_VAR 0 4
31056: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31057: LD_INT 0
31059: PPUSH
31060: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31061: LD_VAR 0 1
31065: NOT
31066: PUSH
31067: LD_VAR 0 2
31071: PPUSH
31072: LD_VAR 0 3
31076: PPUSH
31077: CALL_OW 488
31081: NOT
31082: OR
31083: PUSH
31084: LD_VAR 0 1
31088: PPUSH
31089: CALL_OW 266
31093: PUSH
31094: LD_INT 3
31096: NONEQUAL
31097: PUSH
31098: LD_VAR 0 1
31102: PPUSH
31103: CALL_OW 247
31107: PUSH
31108: LD_INT 1
31110: EQUAL
31111: NOT
31112: AND
31113: OR
31114: IFFALSE 31118
// exit ;
31116: GO 31267
// if GetType ( factory ) = unit_human then
31118: LD_VAR 0 1
31122: PPUSH
31123: CALL_OW 247
31127: PUSH
31128: LD_INT 1
31130: EQUAL
31131: IFFALSE 31148
// factory := IsInUnit ( factory ) ;
31133: LD_ADDR_VAR 0 1
31137: PUSH
31138: LD_VAR 0 1
31142: PPUSH
31143: CALL_OW 310
31147: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31148: LD_VAR 0 1
31152: PPUSH
31153: CALL_OW 266
31157: PUSH
31158: LD_INT 3
31160: NONEQUAL
31161: IFFALSE 31165
// exit ;
31163: GO 31267
// if HexInfo ( x , y ) = factory then
31165: LD_VAR 0 2
31169: PPUSH
31170: LD_VAR 0 3
31174: PPUSH
31175: CALL_OW 428
31179: PUSH
31180: LD_VAR 0 1
31184: EQUAL
31185: IFFALSE 31212
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31187: LD_ADDR_EXP 95
31191: PUSH
31192: LD_EXP 95
31196: PPUSH
31197: LD_VAR 0 1
31201: PPUSH
31202: LD_INT 0
31204: PPUSH
31205: CALL_OW 1
31209: ST_TO_ADDR
31210: GO 31263
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31212: LD_ADDR_EXP 95
31216: PUSH
31217: LD_EXP 95
31221: PPUSH
31222: LD_VAR 0 1
31226: PPUSH
31227: LD_VAR 0 1
31231: PPUSH
31232: CALL_OW 255
31236: PUSH
31237: LD_VAR 0 1
31241: PUSH
31242: LD_VAR 0 2
31246: PUSH
31247: LD_VAR 0 3
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: PPUSH
31258: CALL_OW 1
31262: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31263: CALL 31272 0 0
// end ;
31267: LD_VAR 0 4
31271: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31272: LD_INT 0
31274: PPUSH
31275: PPUSH
31276: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31277: LD_STRING resetFactoryWaypoint();
31279: PPUSH
31280: CALL_OW 559
// if factoryWaypoints then
31284: LD_EXP 95
31288: IFFALSE 31414
// begin list := PrepareArray ( factoryWaypoints ) ;
31290: LD_ADDR_VAR 0 3
31294: PUSH
31295: LD_EXP 95
31299: PPUSH
31300: CALL 77883 0 1
31304: ST_TO_ADDR
// for i := 1 to list do
31305: LD_ADDR_VAR 0 2
31309: PUSH
31310: DOUBLE
31311: LD_INT 1
31313: DEC
31314: ST_TO_ADDR
31315: LD_VAR 0 3
31319: PUSH
31320: FOR_TO
31321: IFFALSE 31412
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31323: LD_STRING setFactoryWaypointXY(
31325: PUSH
31326: LD_VAR 0 3
31330: PUSH
31331: LD_VAR 0 2
31335: ARRAY
31336: PUSH
31337: LD_INT 1
31339: ARRAY
31340: STR
31341: PUSH
31342: LD_STRING ,
31344: STR
31345: PUSH
31346: LD_VAR 0 3
31350: PUSH
31351: LD_VAR 0 2
31355: ARRAY
31356: PUSH
31357: LD_INT 2
31359: ARRAY
31360: STR
31361: PUSH
31362: LD_STRING ,
31364: STR
31365: PUSH
31366: LD_VAR 0 3
31370: PUSH
31371: LD_VAR 0 2
31375: ARRAY
31376: PUSH
31377: LD_INT 3
31379: ARRAY
31380: STR
31381: PUSH
31382: LD_STRING ,
31384: STR
31385: PUSH
31386: LD_VAR 0 3
31390: PUSH
31391: LD_VAR 0 2
31395: ARRAY
31396: PUSH
31397: LD_INT 4
31399: ARRAY
31400: STR
31401: PUSH
31402: LD_STRING )
31404: STR
31405: PPUSH
31406: CALL_OW 559
31410: GO 31320
31412: POP
31413: POP
// end ; end ;
31414: LD_VAR 0 1
31418: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31419: LD_INT 0
31421: PPUSH
// if HexInfo ( x , y ) = warehouse then
31422: LD_VAR 0 2
31426: PPUSH
31427: LD_VAR 0 3
31431: PPUSH
31432: CALL_OW 428
31436: PUSH
31437: LD_VAR 0 1
31441: EQUAL
31442: IFFALSE 31469
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31444: LD_ADDR_EXP 96
31448: PUSH
31449: LD_EXP 96
31453: PPUSH
31454: LD_VAR 0 1
31458: PPUSH
31459: LD_INT 0
31461: PPUSH
31462: CALL_OW 1
31466: ST_TO_ADDR
31467: GO 31520
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31469: LD_ADDR_EXP 96
31473: PUSH
31474: LD_EXP 96
31478: PPUSH
31479: LD_VAR 0 1
31483: PPUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 255
31493: PUSH
31494: LD_VAR 0 1
31498: PUSH
31499: LD_VAR 0 2
31503: PUSH
31504: LD_VAR 0 3
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: PPUSH
31515: CALL_OW 1
31519: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31520: CALL 31529 0 0
// end ;
31524: LD_VAR 0 4
31528: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31529: LD_INT 0
31531: PPUSH
31532: PPUSH
31533: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31534: LD_STRING resetWarehouseGatheringPoints();
31536: PPUSH
31537: CALL_OW 559
// if warehouseGatheringPoints then
31541: LD_EXP 96
31545: IFFALSE 31671
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31547: LD_ADDR_VAR 0 3
31551: PUSH
31552: LD_EXP 96
31556: PPUSH
31557: CALL 77883 0 1
31561: ST_TO_ADDR
// for i := 1 to list do
31562: LD_ADDR_VAR 0 2
31566: PUSH
31567: DOUBLE
31568: LD_INT 1
31570: DEC
31571: ST_TO_ADDR
31572: LD_VAR 0 3
31576: PUSH
31577: FOR_TO
31578: IFFALSE 31669
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31580: LD_STRING setWarehouseGatheringPointXY(
31582: PUSH
31583: LD_VAR 0 3
31587: PUSH
31588: LD_VAR 0 2
31592: ARRAY
31593: PUSH
31594: LD_INT 1
31596: ARRAY
31597: STR
31598: PUSH
31599: LD_STRING ,
31601: STR
31602: PUSH
31603: LD_VAR 0 3
31607: PUSH
31608: LD_VAR 0 2
31612: ARRAY
31613: PUSH
31614: LD_INT 2
31616: ARRAY
31617: STR
31618: PUSH
31619: LD_STRING ,
31621: STR
31622: PUSH
31623: LD_VAR 0 3
31627: PUSH
31628: LD_VAR 0 2
31632: ARRAY
31633: PUSH
31634: LD_INT 3
31636: ARRAY
31637: STR
31638: PUSH
31639: LD_STRING ,
31641: STR
31642: PUSH
31643: LD_VAR 0 3
31647: PUSH
31648: LD_VAR 0 2
31652: ARRAY
31653: PUSH
31654: LD_INT 4
31656: ARRAY
31657: STR
31658: PUSH
31659: LD_STRING )
31661: STR
31662: PPUSH
31663: CALL_OW 559
31667: GO 31577
31669: POP
31670: POP
// end ; end ;
31671: LD_VAR 0 1
31675: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31676: LD_EXP 96
31680: IFFALSE 32365
31682: GO 31684
31684: DISABLE
31685: LD_INT 0
31687: PPUSH
31688: PPUSH
31689: PPUSH
31690: PPUSH
31691: PPUSH
31692: PPUSH
31693: PPUSH
31694: PPUSH
31695: PPUSH
// begin enable ;
31696: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31697: LD_ADDR_VAR 0 3
31701: PUSH
31702: LD_EXP 96
31706: PPUSH
31707: CALL 77883 0 1
31711: ST_TO_ADDR
// if not list then
31712: LD_VAR 0 3
31716: NOT
31717: IFFALSE 31721
// exit ;
31719: GO 32365
// for i := 1 to list do
31721: LD_ADDR_VAR 0 1
31725: PUSH
31726: DOUBLE
31727: LD_INT 1
31729: DEC
31730: ST_TO_ADDR
31731: LD_VAR 0 3
31735: PUSH
31736: FOR_TO
31737: IFFALSE 32363
// begin depot := list [ i ] [ 2 ] ;
31739: LD_ADDR_VAR 0 8
31743: PUSH
31744: LD_VAR 0 3
31748: PUSH
31749: LD_VAR 0 1
31753: ARRAY
31754: PUSH
31755: LD_INT 2
31757: ARRAY
31758: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31759: LD_ADDR_VAR 0 5
31763: PUSH
31764: LD_VAR 0 3
31768: PUSH
31769: LD_VAR 0 1
31773: ARRAY
31774: PUSH
31775: LD_INT 1
31777: ARRAY
31778: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31779: LD_VAR 0 8
31783: PPUSH
31784: CALL_OW 301
31788: PUSH
31789: LD_VAR 0 5
31793: PUSH
31794: LD_VAR 0 8
31798: PPUSH
31799: CALL_OW 255
31803: NONEQUAL
31804: OR
31805: IFFALSE 31834
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31807: LD_ADDR_EXP 96
31811: PUSH
31812: LD_EXP 96
31816: PPUSH
31817: LD_VAR 0 8
31821: PPUSH
31822: LD_INT 0
31824: PPUSH
31825: CALL_OW 1
31829: ST_TO_ADDR
// exit ;
31830: POP
31831: POP
31832: GO 32365
// end ; x := list [ i ] [ 3 ] ;
31834: LD_ADDR_VAR 0 6
31838: PUSH
31839: LD_VAR 0 3
31843: PUSH
31844: LD_VAR 0 1
31848: ARRAY
31849: PUSH
31850: LD_INT 3
31852: ARRAY
31853: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31854: LD_ADDR_VAR 0 7
31858: PUSH
31859: LD_VAR 0 3
31863: PUSH
31864: LD_VAR 0 1
31868: ARRAY
31869: PUSH
31870: LD_INT 4
31872: ARRAY
31873: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31874: LD_ADDR_VAR 0 9
31878: PUSH
31879: LD_VAR 0 6
31883: PPUSH
31884: LD_VAR 0 7
31888: PPUSH
31889: LD_INT 16
31891: PPUSH
31892: CALL 76471 0 3
31896: ST_TO_ADDR
// if not cratesNearbyPoint then
31897: LD_VAR 0 9
31901: NOT
31902: IFFALSE 31908
// exit ;
31904: POP
31905: POP
31906: GO 32365
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31908: LD_ADDR_VAR 0 4
31912: PUSH
31913: LD_INT 22
31915: PUSH
31916: LD_VAR 0 5
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 3
31927: PUSH
31928: LD_INT 60
31930: PUSH
31931: EMPTY
31932: LIST
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 91
31940: PUSH
31941: LD_VAR 0 8
31945: PUSH
31946: LD_INT 6
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 2
31956: PUSH
31957: LD_INT 25
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 25
31969: PUSH
31970: LD_INT 16
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: PPUSH
31988: CALL_OW 69
31992: PUSH
31993: LD_VAR 0 8
31997: PPUSH
31998: CALL_OW 313
32002: PPUSH
32003: LD_INT 3
32005: PUSH
32006: LD_INT 60
32008: PUSH
32009: EMPTY
32010: LIST
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 2
32018: PUSH
32019: LD_INT 25
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 25
32031: PUSH
32032: LD_INT 16
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PPUSH
32048: CALL_OW 72
32052: UNION
32053: ST_TO_ADDR
// if tmp then
32054: LD_VAR 0 4
32058: IFFALSE 32138
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32060: LD_ADDR_VAR 0 4
32064: PUSH
32065: LD_VAR 0 4
32069: PPUSH
32070: LD_INT 3
32072: PPUSH
32073: CALL 74440 0 2
32077: ST_TO_ADDR
// for j in tmp do
32078: LD_ADDR_VAR 0 2
32082: PUSH
32083: LD_VAR 0 4
32087: PUSH
32088: FOR_IN
32089: IFFALSE 32132
// begin if IsInUnit ( j ) then
32091: LD_VAR 0 2
32095: PPUSH
32096: CALL_OW 310
32100: IFFALSE 32111
// ComExit ( j ) ;
32102: LD_VAR 0 2
32106: PPUSH
32107: CALL 74523 0 1
// AddComCollect ( j , x , y ) ;
32111: LD_VAR 0 2
32115: PPUSH
32116: LD_VAR 0 6
32120: PPUSH
32121: LD_VAR 0 7
32125: PPUSH
32126: CALL_OW 177
// end ;
32130: GO 32088
32132: POP
32133: POP
// exit ;
32134: POP
32135: POP
32136: GO 32365
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32138: LD_ADDR_VAR 0 4
32142: PUSH
32143: LD_INT 22
32145: PUSH
32146: LD_VAR 0 5
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 91
32157: PUSH
32158: LD_VAR 0 8
32162: PUSH
32163: LD_INT 8
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 2
32173: PUSH
32174: LD_INT 34
32176: PUSH
32177: LD_INT 12
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 34
32186: PUSH
32187: LD_INT 51
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 34
32196: PUSH
32197: LD_INT 32
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 34
32206: PUSH
32207: LD_INT 89
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: LIST
32225: PPUSH
32226: CALL_OW 69
32230: ST_TO_ADDR
// if tmp then
32231: LD_VAR 0 4
32235: IFFALSE 32361
// begin for j in tmp do
32237: LD_ADDR_VAR 0 2
32241: PUSH
32242: LD_VAR 0 4
32246: PUSH
32247: FOR_IN
32248: IFFALSE 32359
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32250: LD_VAR 0 2
32254: PPUSH
32255: CALL_OW 262
32259: PUSH
32260: LD_INT 3
32262: EQUAL
32263: PUSH
32264: LD_VAR 0 2
32268: PPUSH
32269: CALL_OW 261
32273: PUSH
32274: LD_INT 20
32276: GREATER
32277: OR
32278: PUSH
32279: LD_VAR 0 2
32283: PPUSH
32284: CALL_OW 314
32288: NOT
32289: AND
32290: PUSH
32291: LD_VAR 0 2
32295: PPUSH
32296: CALL_OW 263
32300: PUSH
32301: LD_INT 1
32303: NONEQUAL
32304: PUSH
32305: LD_VAR 0 2
32309: PPUSH
32310: CALL_OW 311
32314: OR
32315: AND
32316: IFFALSE 32357
// begin ComCollect ( j , x , y ) ;
32318: LD_VAR 0 2
32322: PPUSH
32323: LD_VAR 0 6
32327: PPUSH
32328: LD_VAR 0 7
32332: PPUSH
32333: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32337: LD_VAR 0 2
32341: PPUSH
32342: LD_VAR 0 8
32346: PPUSH
32347: CALL_OW 172
// exit ;
32351: POP
32352: POP
32353: POP
32354: POP
32355: GO 32365
// end ;
32357: GO 32247
32359: POP
32360: POP
// end ; end ;
32361: GO 31736
32363: POP
32364: POP
// end ; end_of_file
32365: PPOPN 9
32367: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32368: LD_INT 0
32370: PPUSH
32371: PPUSH
32372: PPUSH
32373: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32374: LD_VAR 0 1
32378: PPUSH
32379: CALL_OW 264
32383: PUSH
32384: LD_INT 91
32386: EQUAL
32387: IFFALSE 32459
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32389: LD_INT 68
32391: PPUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 255
32401: PPUSH
32402: CALL_OW 321
32406: PUSH
32407: LD_INT 2
32409: EQUAL
32410: IFFALSE 32422
// eff := 70 else
32412: LD_ADDR_VAR 0 4
32416: PUSH
32417: LD_INT 70
32419: ST_TO_ADDR
32420: GO 32430
// eff := 30 ;
32422: LD_ADDR_VAR 0 4
32426: PUSH
32427: LD_INT 30
32429: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32430: LD_VAR 0 1
32434: PPUSH
32435: CALL_OW 250
32439: PPUSH
32440: LD_VAR 0 1
32444: PPUSH
32445: CALL_OW 251
32449: PPUSH
32450: LD_VAR 0 4
32454: PPUSH
32455: CALL_OW 495
// end ; end ;
32459: LD_VAR 0 2
32463: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32464: LD_INT 0
32466: PPUSH
// end ;
32467: LD_VAR 0 4
32471: RET
// export function SOS_Command ( cmd ) ; begin
32472: LD_INT 0
32474: PPUSH
// end ;
32475: LD_VAR 0 2
32479: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32480: LD_INT 0
32482: PPUSH
// end ;
32483: LD_VAR 0 6
32487: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32488: LD_INT 0
32490: PPUSH
32491: PPUSH
// if not vehicle or not factory then
32492: LD_VAR 0 1
32496: NOT
32497: PUSH
32498: LD_VAR 0 2
32502: NOT
32503: OR
32504: IFFALSE 32508
// exit ;
32506: GO 32739
// if factoryWaypoints >= factory then
32508: LD_EXP 95
32512: PUSH
32513: LD_VAR 0 2
32517: GREATEREQUAL
32518: IFFALSE 32739
// if factoryWaypoints [ factory ] then
32520: LD_EXP 95
32524: PUSH
32525: LD_VAR 0 2
32529: ARRAY
32530: IFFALSE 32739
// begin if GetControl ( vehicle ) = control_manual then
32532: LD_VAR 0 1
32536: PPUSH
32537: CALL_OW 263
32541: PUSH
32542: LD_INT 1
32544: EQUAL
32545: IFFALSE 32626
// begin driver := IsDrivenBy ( vehicle ) ;
32547: LD_ADDR_VAR 0 4
32551: PUSH
32552: LD_VAR 0 1
32556: PPUSH
32557: CALL_OW 311
32561: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32562: LD_VAR 0 4
32566: PPUSH
32567: LD_EXP 95
32571: PUSH
32572: LD_VAR 0 2
32576: ARRAY
32577: PUSH
32578: LD_INT 3
32580: ARRAY
32581: PPUSH
32582: LD_EXP 95
32586: PUSH
32587: LD_VAR 0 2
32591: ARRAY
32592: PUSH
32593: LD_INT 4
32595: ARRAY
32596: PPUSH
32597: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32601: LD_VAR 0 4
32605: PPUSH
32606: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32610: LD_VAR 0 4
32614: PPUSH
32615: LD_VAR 0 2
32619: PPUSH
32620: CALL_OW 180
// end else
32624: GO 32739
// if GetControl ( vehicle ) = control_remote then
32626: LD_VAR 0 1
32630: PPUSH
32631: CALL_OW 263
32635: PUSH
32636: LD_INT 2
32638: EQUAL
32639: IFFALSE 32700
// begin wait ( 0 0$2 ) ;
32641: LD_INT 70
32643: PPUSH
32644: CALL_OW 67
// if Connect ( vehicle ) then
32648: LD_VAR 0 1
32652: PPUSH
32653: CALL 44763 0 1
32657: IFFALSE 32698
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32659: LD_VAR 0 1
32663: PPUSH
32664: LD_EXP 95
32668: PUSH
32669: LD_VAR 0 2
32673: ARRAY
32674: PUSH
32675: LD_INT 3
32677: ARRAY
32678: PPUSH
32679: LD_EXP 95
32683: PUSH
32684: LD_VAR 0 2
32688: ARRAY
32689: PUSH
32690: LD_INT 4
32692: ARRAY
32693: PPUSH
32694: CALL_OW 171
// end else
32698: GO 32739
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32700: LD_VAR 0 1
32704: PPUSH
32705: LD_EXP 95
32709: PUSH
32710: LD_VAR 0 2
32714: ARRAY
32715: PUSH
32716: LD_INT 3
32718: ARRAY
32719: PPUSH
32720: LD_EXP 95
32724: PUSH
32725: LD_VAR 0 2
32729: ARRAY
32730: PUSH
32731: LD_INT 4
32733: ARRAY
32734: PPUSH
32735: CALL_OW 171
// end ; end ;
32739: LD_VAR 0 3
32743: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32744: LD_INT 0
32746: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32747: LD_VAR 0 1
32751: PUSH
32752: LD_INT 250
32754: EQUAL
32755: PUSH
32756: LD_VAR 0 2
32760: PPUSH
32761: CALL_OW 264
32765: PUSH
32766: LD_INT 81
32768: EQUAL
32769: AND
32770: IFFALSE 32791
// MinerPlaceMine ( unit , x , y ) ;
32772: LD_VAR 0 2
32776: PPUSH
32777: LD_VAR 0 4
32781: PPUSH
32782: LD_VAR 0 5
32786: PPUSH
32787: CALL 35176 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32791: LD_VAR 0 1
32795: PUSH
32796: LD_INT 251
32798: EQUAL
32799: PUSH
32800: LD_VAR 0 2
32804: PPUSH
32805: CALL_OW 264
32809: PUSH
32810: LD_INT 81
32812: EQUAL
32813: AND
32814: IFFALSE 32835
// MinerDetonateMine ( unit , x , y ) ;
32816: LD_VAR 0 2
32820: PPUSH
32821: LD_VAR 0 4
32825: PPUSH
32826: LD_VAR 0 5
32830: PPUSH
32831: CALL 35451 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32835: LD_VAR 0 1
32839: PUSH
32840: LD_INT 252
32842: EQUAL
32843: PUSH
32844: LD_VAR 0 2
32848: PPUSH
32849: CALL_OW 264
32853: PUSH
32854: LD_INT 81
32856: EQUAL
32857: AND
32858: IFFALSE 32879
// MinerCreateMinefield ( unit , x , y ) ;
32860: LD_VAR 0 2
32864: PPUSH
32865: LD_VAR 0 4
32869: PPUSH
32870: LD_VAR 0 5
32874: PPUSH
32875: CALL 35868 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32879: LD_VAR 0 1
32883: PUSH
32884: LD_INT 253
32886: EQUAL
32887: PUSH
32888: LD_VAR 0 2
32892: PPUSH
32893: CALL_OW 257
32897: PUSH
32898: LD_INT 5
32900: EQUAL
32901: AND
32902: IFFALSE 32923
// ComBinocular ( unit , x , y ) ;
32904: LD_VAR 0 2
32908: PPUSH
32909: LD_VAR 0 4
32913: PPUSH
32914: LD_VAR 0 5
32918: PPUSH
32919: CALL 36237 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32923: LD_VAR 0 1
32927: PUSH
32928: LD_INT 254
32930: EQUAL
32931: PUSH
32932: LD_VAR 0 2
32936: PPUSH
32937: CALL_OW 264
32941: PUSH
32942: LD_INT 99
32944: EQUAL
32945: AND
32946: PUSH
32947: LD_VAR 0 3
32951: PPUSH
32952: CALL_OW 263
32956: PUSH
32957: LD_INT 3
32959: EQUAL
32960: AND
32961: IFFALSE 32977
// HackDestroyVehicle ( unit , selectedUnit ) ;
32963: LD_VAR 0 2
32967: PPUSH
32968: LD_VAR 0 3
32972: PPUSH
32973: CALL 34540 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32977: LD_VAR 0 1
32981: PUSH
32982: LD_INT 255
32984: EQUAL
32985: PUSH
32986: LD_VAR 0 2
32990: PPUSH
32991: CALL_OW 264
32995: PUSH
32996: LD_INT 14
32998: PUSH
32999: LD_INT 53
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: IN
33006: AND
33007: PUSH
33008: LD_VAR 0 4
33012: PPUSH
33013: LD_VAR 0 5
33017: PPUSH
33018: CALL_OW 488
33022: AND
33023: IFFALSE 33047
// CutTreeXYR ( unit , x , y , 12 ) ;
33025: LD_VAR 0 2
33029: PPUSH
33030: LD_VAR 0 4
33034: PPUSH
33035: LD_VAR 0 5
33039: PPUSH
33040: LD_INT 12
33042: PPUSH
33043: CALL 33110 0 4
// if cmd = 256 then
33047: LD_VAR 0 1
33051: PUSH
33052: LD_INT 256
33054: EQUAL
33055: IFFALSE 33076
// SetFactoryWaypoint ( unit , x , y ) ;
33057: LD_VAR 0 2
33061: PPUSH
33062: LD_VAR 0 4
33066: PPUSH
33067: LD_VAR 0 5
33071: PPUSH
33072: CALL 31057 0 3
// if cmd = 257 then
33076: LD_VAR 0 1
33080: PUSH
33081: LD_INT 257
33083: EQUAL
33084: IFFALSE 33105
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33086: LD_VAR 0 2
33090: PPUSH
33091: LD_VAR 0 4
33095: PPUSH
33096: LD_VAR 0 5
33100: PPUSH
33101: CALL 31419 0 3
// end ;
33105: LD_VAR 0 6
33109: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33110: LD_INT 0
33112: PPUSH
33113: PPUSH
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
33118: PPUSH
33119: PPUSH
33120: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33121: LD_VAR 0 1
33125: NOT
33126: PUSH
33127: LD_VAR 0 2
33131: PPUSH
33132: LD_VAR 0 3
33136: PPUSH
33137: CALL_OW 488
33141: NOT
33142: OR
33143: PUSH
33144: LD_VAR 0 4
33148: NOT
33149: OR
33150: IFFALSE 33154
// exit ;
33152: GO 33494
// list := [ ] ;
33154: LD_ADDR_VAR 0 13
33158: PUSH
33159: EMPTY
33160: ST_TO_ADDR
// if x - r < 0 then
33161: LD_VAR 0 2
33165: PUSH
33166: LD_VAR 0 4
33170: MINUS
33171: PUSH
33172: LD_INT 0
33174: LESS
33175: IFFALSE 33187
// min_x := 0 else
33177: LD_ADDR_VAR 0 7
33181: PUSH
33182: LD_INT 0
33184: ST_TO_ADDR
33185: GO 33203
// min_x := x - r ;
33187: LD_ADDR_VAR 0 7
33191: PUSH
33192: LD_VAR 0 2
33196: PUSH
33197: LD_VAR 0 4
33201: MINUS
33202: ST_TO_ADDR
// if y - r < 0 then
33203: LD_VAR 0 3
33207: PUSH
33208: LD_VAR 0 4
33212: MINUS
33213: PUSH
33214: LD_INT 0
33216: LESS
33217: IFFALSE 33229
// min_y := 0 else
33219: LD_ADDR_VAR 0 8
33223: PUSH
33224: LD_INT 0
33226: ST_TO_ADDR
33227: GO 33245
// min_y := y - r ;
33229: LD_ADDR_VAR 0 8
33233: PUSH
33234: LD_VAR 0 3
33238: PUSH
33239: LD_VAR 0 4
33243: MINUS
33244: ST_TO_ADDR
// max_x := x + r ;
33245: LD_ADDR_VAR 0 9
33249: PUSH
33250: LD_VAR 0 2
33254: PUSH
33255: LD_VAR 0 4
33259: PLUS
33260: ST_TO_ADDR
// max_y := y + r ;
33261: LD_ADDR_VAR 0 10
33265: PUSH
33266: LD_VAR 0 3
33270: PUSH
33271: LD_VAR 0 4
33275: PLUS
33276: ST_TO_ADDR
// for _x = min_x to max_x do
33277: LD_ADDR_VAR 0 11
33281: PUSH
33282: DOUBLE
33283: LD_VAR 0 7
33287: DEC
33288: ST_TO_ADDR
33289: LD_VAR 0 9
33293: PUSH
33294: FOR_TO
33295: IFFALSE 33412
// for _y = min_y to max_y do
33297: LD_ADDR_VAR 0 12
33301: PUSH
33302: DOUBLE
33303: LD_VAR 0 8
33307: DEC
33308: ST_TO_ADDR
33309: LD_VAR 0 10
33313: PUSH
33314: FOR_TO
33315: IFFALSE 33408
// begin if not ValidHex ( _x , _y ) then
33317: LD_VAR 0 11
33321: PPUSH
33322: LD_VAR 0 12
33326: PPUSH
33327: CALL_OW 488
33331: NOT
33332: IFFALSE 33336
// continue ;
33334: GO 33314
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33336: LD_VAR 0 11
33340: PPUSH
33341: LD_VAR 0 12
33345: PPUSH
33346: CALL_OW 351
33350: PUSH
33351: LD_VAR 0 11
33355: PPUSH
33356: LD_VAR 0 12
33360: PPUSH
33361: CALL_OW 554
33365: AND
33366: IFFALSE 33406
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33368: LD_ADDR_VAR 0 13
33372: PUSH
33373: LD_VAR 0 13
33377: PPUSH
33378: LD_VAR 0 13
33382: PUSH
33383: LD_INT 1
33385: PLUS
33386: PPUSH
33387: LD_VAR 0 11
33391: PUSH
33392: LD_VAR 0 12
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PPUSH
33401: CALL_OW 2
33405: ST_TO_ADDR
// end ;
33406: GO 33314
33408: POP
33409: POP
33410: GO 33294
33412: POP
33413: POP
// if not list then
33414: LD_VAR 0 13
33418: NOT
33419: IFFALSE 33423
// exit ;
33421: GO 33494
// for i in list do
33423: LD_ADDR_VAR 0 6
33427: PUSH
33428: LD_VAR 0 13
33432: PUSH
33433: FOR_IN
33434: IFFALSE 33492
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33436: LD_VAR 0 1
33440: PPUSH
33441: LD_STRING M
33443: PUSH
33444: LD_VAR 0 6
33448: PUSH
33449: LD_INT 1
33451: ARRAY
33452: PUSH
33453: LD_VAR 0 6
33457: PUSH
33458: LD_INT 2
33460: ARRAY
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 0
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: PUSH
33483: EMPTY
33484: LIST
33485: PPUSH
33486: CALL_OW 447
33490: GO 33433
33492: POP
33493: POP
// end ;
33494: LD_VAR 0 5
33498: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33499: LD_EXP 98
33503: NOT
33504: IFFALSE 33554
33506: GO 33508
33508: DISABLE
// begin initHack := true ;
33509: LD_ADDR_EXP 98
33513: PUSH
33514: LD_INT 1
33516: ST_TO_ADDR
// hackTanks := [ ] ;
33517: LD_ADDR_EXP 99
33521: PUSH
33522: EMPTY
33523: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33524: LD_ADDR_EXP 100
33528: PUSH
33529: EMPTY
33530: ST_TO_ADDR
// hackLimit := 3 ;
33531: LD_ADDR_EXP 101
33535: PUSH
33536: LD_INT 3
33538: ST_TO_ADDR
// hackDist := 12 ;
33539: LD_ADDR_EXP 102
33543: PUSH
33544: LD_INT 12
33546: ST_TO_ADDR
// hackCounter := [ ] ;
33547: LD_ADDR_EXP 103
33551: PUSH
33552: EMPTY
33553: ST_TO_ADDR
// end ;
33554: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33555: LD_EXP 98
33559: PUSH
33560: LD_INT 34
33562: PUSH
33563: LD_INT 99
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PPUSH
33570: CALL_OW 69
33574: AND
33575: IFFALSE 33828
33577: GO 33579
33579: DISABLE
33580: LD_INT 0
33582: PPUSH
33583: PPUSH
// begin enable ;
33584: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33585: LD_ADDR_VAR 0 1
33589: PUSH
33590: LD_INT 34
33592: PUSH
33593: LD_INT 99
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PPUSH
33600: CALL_OW 69
33604: PUSH
33605: FOR_IN
33606: IFFALSE 33826
// begin if not i in hackTanks then
33608: LD_VAR 0 1
33612: PUSH
33613: LD_EXP 99
33617: IN
33618: NOT
33619: IFFALSE 33702
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33621: LD_ADDR_EXP 99
33625: PUSH
33626: LD_EXP 99
33630: PPUSH
33631: LD_EXP 99
33635: PUSH
33636: LD_INT 1
33638: PLUS
33639: PPUSH
33640: LD_VAR 0 1
33644: PPUSH
33645: CALL_OW 1
33649: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33650: LD_ADDR_EXP 100
33654: PUSH
33655: LD_EXP 100
33659: PPUSH
33660: LD_EXP 100
33664: PUSH
33665: LD_INT 1
33667: PLUS
33668: PPUSH
33669: EMPTY
33670: PPUSH
33671: CALL_OW 1
33675: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33676: LD_ADDR_EXP 103
33680: PUSH
33681: LD_EXP 103
33685: PPUSH
33686: LD_EXP 103
33690: PUSH
33691: LD_INT 1
33693: PLUS
33694: PPUSH
33695: EMPTY
33696: PPUSH
33697: CALL_OW 1
33701: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33702: LD_VAR 0 1
33706: PPUSH
33707: CALL_OW 302
33711: NOT
33712: IFFALSE 33725
// begin HackUnlinkAll ( i ) ;
33714: LD_VAR 0 1
33718: PPUSH
33719: CALL 33831 0 1
// continue ;
33723: GO 33605
// end ; HackCheckCapturedStatus ( i ) ;
33725: LD_VAR 0 1
33729: PPUSH
33730: CALL 34274 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33734: LD_ADDR_VAR 0 2
33738: PUSH
33739: LD_INT 81
33741: PUSH
33742: LD_VAR 0 1
33746: PPUSH
33747: CALL_OW 255
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 33
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 91
33768: PUSH
33769: LD_VAR 0 1
33773: PUSH
33774: LD_EXP 102
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 50
33786: PUSH
33787: EMPTY
33788: LIST
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: PPUSH
33796: CALL_OW 69
33800: ST_TO_ADDR
// if not tmp then
33801: LD_VAR 0 2
33805: NOT
33806: IFFALSE 33810
// continue ;
33808: GO 33605
// HackLink ( i , tmp ) ;
33810: LD_VAR 0 1
33814: PPUSH
33815: LD_VAR 0 2
33819: PPUSH
33820: CALL 33967 0 2
// end ;
33824: GO 33605
33826: POP
33827: POP
// end ;
33828: PPOPN 2
33830: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33831: LD_INT 0
33833: PPUSH
33834: PPUSH
33835: PPUSH
// if not hack in hackTanks then
33836: LD_VAR 0 1
33840: PUSH
33841: LD_EXP 99
33845: IN
33846: NOT
33847: IFFALSE 33851
// exit ;
33849: GO 33962
// index := GetElementIndex ( hackTanks , hack ) ;
33851: LD_ADDR_VAR 0 4
33855: PUSH
33856: LD_EXP 99
33860: PPUSH
33861: LD_VAR 0 1
33865: PPUSH
33866: CALL 41579 0 2
33870: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33871: LD_EXP 100
33875: PUSH
33876: LD_VAR 0 4
33880: ARRAY
33881: IFFALSE 33962
// begin for i in hackTanksCaptured [ index ] do
33883: LD_ADDR_VAR 0 3
33887: PUSH
33888: LD_EXP 100
33892: PUSH
33893: LD_VAR 0 4
33897: ARRAY
33898: PUSH
33899: FOR_IN
33900: IFFALSE 33926
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33902: LD_VAR 0 3
33906: PUSH
33907: LD_INT 1
33909: ARRAY
33910: PPUSH
33911: LD_VAR 0 3
33915: PUSH
33916: LD_INT 2
33918: ARRAY
33919: PPUSH
33920: CALL_OW 235
33924: GO 33899
33926: POP
33927: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33928: LD_ADDR_EXP 100
33932: PUSH
33933: LD_EXP 100
33937: PPUSH
33938: LD_VAR 0 4
33942: PPUSH
33943: EMPTY
33944: PPUSH
33945: CALL_OW 1
33949: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33950: LD_VAR 0 1
33954: PPUSH
33955: LD_INT 0
33957: PPUSH
33958: CALL_OW 505
// end ; end ;
33962: LD_VAR 0 2
33966: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33967: LD_INT 0
33969: PPUSH
33970: PPUSH
33971: PPUSH
// if not hack in hackTanks or not vehicles then
33972: LD_VAR 0 1
33976: PUSH
33977: LD_EXP 99
33981: IN
33982: NOT
33983: PUSH
33984: LD_VAR 0 2
33988: NOT
33989: OR
33990: IFFALSE 33994
// exit ;
33992: GO 34269
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33994: LD_ADDR_VAR 0 2
33998: PUSH
33999: LD_VAR 0 1
34003: PPUSH
34004: LD_VAR 0 2
34008: PPUSH
34009: LD_INT 1
34011: PPUSH
34012: LD_INT 1
34014: PPUSH
34015: CALL 42229 0 4
34019: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34020: LD_ADDR_VAR 0 5
34024: PUSH
34025: LD_EXP 99
34029: PPUSH
34030: LD_VAR 0 1
34034: PPUSH
34035: CALL 41579 0 2
34039: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34040: LD_EXP 100
34044: PUSH
34045: LD_VAR 0 5
34049: ARRAY
34050: PUSH
34051: LD_EXP 101
34055: LESS
34056: IFFALSE 34245
// begin for i := 1 to vehicles do
34058: LD_ADDR_VAR 0 4
34062: PUSH
34063: DOUBLE
34064: LD_INT 1
34066: DEC
34067: ST_TO_ADDR
34068: LD_VAR 0 2
34072: PUSH
34073: FOR_TO
34074: IFFALSE 34243
// begin if hackTanksCaptured [ index ] = hackLimit then
34076: LD_EXP 100
34080: PUSH
34081: LD_VAR 0 5
34085: ARRAY
34086: PUSH
34087: LD_EXP 101
34091: EQUAL
34092: IFFALSE 34096
// break ;
34094: GO 34243
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34096: LD_ADDR_EXP 103
34100: PUSH
34101: LD_EXP 103
34105: PPUSH
34106: LD_VAR 0 5
34110: PPUSH
34111: LD_EXP 103
34115: PUSH
34116: LD_VAR 0 5
34120: ARRAY
34121: PUSH
34122: LD_INT 1
34124: PLUS
34125: PPUSH
34126: CALL_OW 1
34130: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34131: LD_ADDR_EXP 100
34135: PUSH
34136: LD_EXP 100
34140: PPUSH
34141: LD_VAR 0 5
34145: PUSH
34146: LD_EXP 100
34150: PUSH
34151: LD_VAR 0 5
34155: ARRAY
34156: PUSH
34157: LD_INT 1
34159: PLUS
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PPUSH
34165: LD_VAR 0 2
34169: PUSH
34170: LD_VAR 0 4
34174: ARRAY
34175: PUSH
34176: LD_VAR 0 2
34180: PUSH
34181: LD_VAR 0 4
34185: ARRAY
34186: PPUSH
34187: CALL_OW 255
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PPUSH
34196: CALL 41794 0 3
34200: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34201: LD_VAR 0 2
34205: PUSH
34206: LD_VAR 0 4
34210: ARRAY
34211: PPUSH
34212: LD_VAR 0 1
34216: PPUSH
34217: CALL_OW 255
34221: PPUSH
34222: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34226: LD_VAR 0 2
34230: PUSH
34231: LD_VAR 0 4
34235: ARRAY
34236: PPUSH
34237: CALL_OW 141
// end ;
34241: GO 34073
34243: POP
34244: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34245: LD_VAR 0 1
34249: PPUSH
34250: LD_EXP 100
34254: PUSH
34255: LD_VAR 0 5
34259: ARRAY
34260: PUSH
34261: LD_INT 0
34263: PLUS
34264: PPUSH
34265: CALL_OW 505
// end ;
34269: LD_VAR 0 3
34273: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34274: LD_INT 0
34276: PPUSH
34277: PPUSH
34278: PPUSH
34279: PPUSH
// if not hack in hackTanks then
34280: LD_VAR 0 1
34284: PUSH
34285: LD_EXP 99
34289: IN
34290: NOT
34291: IFFALSE 34295
// exit ;
34293: GO 34535
// index := GetElementIndex ( hackTanks , hack ) ;
34295: LD_ADDR_VAR 0 4
34299: PUSH
34300: LD_EXP 99
34304: PPUSH
34305: LD_VAR 0 1
34309: PPUSH
34310: CALL 41579 0 2
34314: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34315: LD_ADDR_VAR 0 3
34319: PUSH
34320: DOUBLE
34321: LD_EXP 100
34325: PUSH
34326: LD_VAR 0 4
34330: ARRAY
34331: INC
34332: ST_TO_ADDR
34333: LD_INT 1
34335: PUSH
34336: FOR_DOWNTO
34337: IFFALSE 34509
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34339: LD_ADDR_VAR 0 5
34343: PUSH
34344: LD_EXP 100
34348: PUSH
34349: LD_VAR 0 4
34353: ARRAY
34354: PUSH
34355: LD_VAR 0 3
34359: ARRAY
34360: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34361: LD_VAR 0 5
34365: PUSH
34366: LD_INT 1
34368: ARRAY
34369: PPUSH
34370: CALL_OW 302
34374: NOT
34375: PUSH
34376: LD_VAR 0 5
34380: PUSH
34381: LD_INT 1
34383: ARRAY
34384: PPUSH
34385: CALL_OW 255
34389: PUSH
34390: LD_VAR 0 1
34394: PPUSH
34395: CALL_OW 255
34399: NONEQUAL
34400: OR
34401: IFFALSE 34507
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34403: LD_VAR 0 5
34407: PUSH
34408: LD_INT 1
34410: ARRAY
34411: PPUSH
34412: CALL_OW 305
34416: PUSH
34417: LD_VAR 0 5
34421: PUSH
34422: LD_INT 1
34424: ARRAY
34425: PPUSH
34426: CALL_OW 255
34430: PUSH
34431: LD_VAR 0 1
34435: PPUSH
34436: CALL_OW 255
34440: EQUAL
34441: AND
34442: IFFALSE 34466
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34444: LD_VAR 0 5
34448: PUSH
34449: LD_INT 1
34451: ARRAY
34452: PPUSH
34453: LD_VAR 0 5
34457: PUSH
34458: LD_INT 2
34460: ARRAY
34461: PPUSH
34462: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34466: LD_ADDR_EXP 100
34470: PUSH
34471: LD_EXP 100
34475: PPUSH
34476: LD_VAR 0 4
34480: PPUSH
34481: LD_EXP 100
34485: PUSH
34486: LD_VAR 0 4
34490: ARRAY
34491: PPUSH
34492: LD_VAR 0 3
34496: PPUSH
34497: CALL_OW 3
34501: PPUSH
34502: CALL_OW 1
34506: ST_TO_ADDR
// end ; end ;
34507: GO 34336
34509: POP
34510: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34511: LD_VAR 0 1
34515: PPUSH
34516: LD_EXP 100
34520: PUSH
34521: LD_VAR 0 4
34525: ARRAY
34526: PUSH
34527: LD_INT 0
34529: PLUS
34530: PPUSH
34531: CALL_OW 505
// end ;
34535: LD_VAR 0 2
34539: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34540: LD_INT 0
34542: PPUSH
34543: PPUSH
34544: PPUSH
34545: PPUSH
// if not hack in hackTanks then
34546: LD_VAR 0 1
34550: PUSH
34551: LD_EXP 99
34555: IN
34556: NOT
34557: IFFALSE 34561
// exit ;
34559: GO 34646
// index := GetElementIndex ( hackTanks , hack ) ;
34561: LD_ADDR_VAR 0 5
34565: PUSH
34566: LD_EXP 99
34570: PPUSH
34571: LD_VAR 0 1
34575: PPUSH
34576: CALL 41579 0 2
34580: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34581: LD_ADDR_VAR 0 4
34585: PUSH
34586: DOUBLE
34587: LD_INT 1
34589: DEC
34590: ST_TO_ADDR
34591: LD_EXP 100
34595: PUSH
34596: LD_VAR 0 5
34600: ARRAY
34601: PUSH
34602: FOR_TO
34603: IFFALSE 34644
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34605: LD_EXP 100
34609: PUSH
34610: LD_VAR 0 5
34614: ARRAY
34615: PUSH
34616: LD_VAR 0 4
34620: ARRAY
34621: PUSH
34622: LD_INT 1
34624: ARRAY
34625: PUSH
34626: LD_VAR 0 2
34630: EQUAL
34631: IFFALSE 34642
// KillUnit ( vehicle ) ;
34633: LD_VAR 0 2
34637: PPUSH
34638: CALL_OW 66
34642: GO 34602
34644: POP
34645: POP
// end ;
34646: LD_VAR 0 3
34650: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34651: LD_EXP 104
34655: NOT
34656: IFFALSE 34691
34658: GO 34660
34660: DISABLE
// begin initMiner := true ;
34661: LD_ADDR_EXP 104
34665: PUSH
34666: LD_INT 1
34668: ST_TO_ADDR
// minersList := [ ] ;
34669: LD_ADDR_EXP 105
34673: PUSH
34674: EMPTY
34675: ST_TO_ADDR
// minerMinesList := [ ] ;
34676: LD_ADDR_EXP 106
34680: PUSH
34681: EMPTY
34682: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34683: LD_ADDR_EXP 107
34687: PUSH
34688: LD_INT 5
34690: ST_TO_ADDR
// end ;
34691: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34692: LD_EXP 104
34696: PUSH
34697: LD_INT 34
34699: PUSH
34700: LD_INT 81
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PPUSH
34707: CALL_OW 69
34711: AND
34712: IFFALSE 35173
34714: GO 34716
34716: DISABLE
34717: LD_INT 0
34719: PPUSH
34720: PPUSH
34721: PPUSH
34722: PPUSH
// begin enable ;
34723: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34724: LD_ADDR_VAR 0 1
34728: PUSH
34729: LD_INT 34
34731: PUSH
34732: LD_INT 81
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PPUSH
34739: CALL_OW 69
34743: PUSH
34744: FOR_IN
34745: IFFALSE 34817
// begin if not i in minersList then
34747: LD_VAR 0 1
34751: PUSH
34752: LD_EXP 105
34756: IN
34757: NOT
34758: IFFALSE 34815
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34760: LD_ADDR_EXP 105
34764: PUSH
34765: LD_EXP 105
34769: PPUSH
34770: LD_EXP 105
34774: PUSH
34775: LD_INT 1
34777: PLUS
34778: PPUSH
34779: LD_VAR 0 1
34783: PPUSH
34784: CALL_OW 1
34788: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34789: LD_ADDR_EXP 106
34793: PUSH
34794: LD_EXP 106
34798: PPUSH
34799: LD_EXP 106
34803: PUSH
34804: LD_INT 1
34806: PLUS
34807: PPUSH
34808: EMPTY
34809: PPUSH
34810: CALL_OW 1
34814: ST_TO_ADDR
// end end ;
34815: GO 34744
34817: POP
34818: POP
// for i := minerMinesList downto 1 do
34819: LD_ADDR_VAR 0 1
34823: PUSH
34824: DOUBLE
34825: LD_EXP 106
34829: INC
34830: ST_TO_ADDR
34831: LD_INT 1
34833: PUSH
34834: FOR_DOWNTO
34835: IFFALSE 35171
// begin if IsLive ( minersList [ i ] ) then
34837: LD_EXP 105
34841: PUSH
34842: LD_VAR 0 1
34846: ARRAY
34847: PPUSH
34848: CALL_OW 300
34852: IFFALSE 34880
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34854: LD_EXP 105
34858: PUSH
34859: LD_VAR 0 1
34863: ARRAY
34864: PPUSH
34865: LD_EXP 106
34869: PUSH
34870: LD_VAR 0 1
34874: ARRAY
34875: PPUSH
34876: CALL_OW 505
// if not minerMinesList [ i ] then
34880: LD_EXP 106
34884: PUSH
34885: LD_VAR 0 1
34889: ARRAY
34890: NOT
34891: IFFALSE 34895
// continue ;
34893: GO 34834
// for j := minerMinesList [ i ] downto 1 do
34895: LD_ADDR_VAR 0 2
34899: PUSH
34900: DOUBLE
34901: LD_EXP 106
34905: PUSH
34906: LD_VAR 0 1
34910: ARRAY
34911: INC
34912: ST_TO_ADDR
34913: LD_INT 1
34915: PUSH
34916: FOR_DOWNTO
34917: IFFALSE 35167
// begin side := GetSide ( minersList [ i ] ) ;
34919: LD_ADDR_VAR 0 3
34923: PUSH
34924: LD_EXP 105
34928: PUSH
34929: LD_VAR 0 1
34933: ARRAY
34934: PPUSH
34935: CALL_OW 255
34939: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34940: LD_ADDR_VAR 0 4
34944: PUSH
34945: LD_EXP 106
34949: PUSH
34950: LD_VAR 0 1
34954: ARRAY
34955: PUSH
34956: LD_VAR 0 2
34960: ARRAY
34961: PUSH
34962: LD_INT 1
34964: ARRAY
34965: PPUSH
34966: LD_EXP 106
34970: PUSH
34971: LD_VAR 0 1
34975: ARRAY
34976: PUSH
34977: LD_VAR 0 2
34981: ARRAY
34982: PUSH
34983: LD_INT 2
34985: ARRAY
34986: PPUSH
34987: CALL_OW 428
34991: ST_TO_ADDR
// if not tmp then
34992: LD_VAR 0 4
34996: NOT
34997: IFFALSE 35001
// continue ;
34999: GO 34916
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35001: LD_VAR 0 4
35005: PUSH
35006: LD_INT 81
35008: PUSH
35009: LD_VAR 0 3
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PPUSH
35018: CALL_OW 69
35022: IN
35023: PUSH
35024: LD_EXP 106
35028: PUSH
35029: LD_VAR 0 1
35033: ARRAY
35034: PUSH
35035: LD_VAR 0 2
35039: ARRAY
35040: PUSH
35041: LD_INT 1
35043: ARRAY
35044: PPUSH
35045: LD_EXP 106
35049: PUSH
35050: LD_VAR 0 1
35054: ARRAY
35055: PUSH
35056: LD_VAR 0 2
35060: ARRAY
35061: PUSH
35062: LD_INT 2
35064: ARRAY
35065: PPUSH
35066: CALL_OW 458
35070: AND
35071: IFFALSE 35165
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35073: LD_EXP 106
35077: PUSH
35078: LD_VAR 0 1
35082: ARRAY
35083: PUSH
35084: LD_VAR 0 2
35088: ARRAY
35089: PUSH
35090: LD_INT 1
35092: ARRAY
35093: PPUSH
35094: LD_EXP 106
35098: PUSH
35099: LD_VAR 0 1
35103: ARRAY
35104: PUSH
35105: LD_VAR 0 2
35109: ARRAY
35110: PUSH
35111: LD_INT 2
35113: ARRAY
35114: PPUSH
35115: LD_VAR 0 3
35119: PPUSH
35120: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35124: LD_ADDR_EXP 106
35128: PUSH
35129: LD_EXP 106
35133: PPUSH
35134: LD_VAR 0 1
35138: PPUSH
35139: LD_EXP 106
35143: PUSH
35144: LD_VAR 0 1
35148: ARRAY
35149: PPUSH
35150: LD_VAR 0 2
35154: PPUSH
35155: CALL_OW 3
35159: PPUSH
35160: CALL_OW 1
35164: ST_TO_ADDR
// end ; end ;
35165: GO 34916
35167: POP
35168: POP
// end ;
35169: GO 34834
35171: POP
35172: POP
// end ;
35173: PPOPN 4
35175: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35176: LD_INT 0
35178: PPUSH
35179: PPUSH
// result := false ;
35180: LD_ADDR_VAR 0 4
35184: PUSH
35185: LD_INT 0
35187: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35188: LD_VAR 0 1
35192: PPUSH
35193: CALL_OW 264
35197: PUSH
35198: LD_INT 81
35200: EQUAL
35201: NOT
35202: IFFALSE 35206
// exit ;
35204: GO 35446
// index := GetElementIndex ( minersList , unit ) ;
35206: LD_ADDR_VAR 0 5
35210: PUSH
35211: LD_EXP 105
35215: PPUSH
35216: LD_VAR 0 1
35220: PPUSH
35221: CALL 41579 0 2
35225: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35226: LD_EXP 106
35230: PUSH
35231: LD_VAR 0 5
35235: ARRAY
35236: PUSH
35237: LD_EXP 107
35241: GREATEREQUAL
35242: IFFALSE 35246
// exit ;
35244: GO 35446
// ComMoveXY ( unit , x , y ) ;
35246: LD_VAR 0 1
35250: PPUSH
35251: LD_VAR 0 2
35255: PPUSH
35256: LD_VAR 0 3
35260: PPUSH
35261: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35265: LD_INT 35
35267: PPUSH
35268: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35272: LD_VAR 0 1
35276: PPUSH
35277: LD_VAR 0 2
35281: PPUSH
35282: LD_VAR 0 3
35286: PPUSH
35287: CALL 72934 0 3
35291: NOT
35292: PUSH
35293: LD_VAR 0 1
35297: PPUSH
35298: CALL_OW 314
35302: AND
35303: IFFALSE 35307
// exit ;
35305: GO 35446
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35307: LD_VAR 0 2
35311: PPUSH
35312: LD_VAR 0 3
35316: PPUSH
35317: CALL_OW 428
35321: PUSH
35322: LD_VAR 0 1
35326: EQUAL
35327: PUSH
35328: LD_VAR 0 1
35332: PPUSH
35333: CALL_OW 314
35337: NOT
35338: AND
35339: IFFALSE 35265
// PlaySoundXY ( x , y , PlantMine ) ;
35341: LD_VAR 0 2
35345: PPUSH
35346: LD_VAR 0 3
35350: PPUSH
35351: LD_STRING PlantMine
35353: PPUSH
35354: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35358: LD_VAR 0 2
35362: PPUSH
35363: LD_VAR 0 3
35367: PPUSH
35368: LD_VAR 0 1
35372: PPUSH
35373: CALL_OW 255
35377: PPUSH
35378: LD_INT 0
35380: PPUSH
35381: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35385: LD_ADDR_EXP 106
35389: PUSH
35390: LD_EXP 106
35394: PPUSH
35395: LD_VAR 0 5
35399: PUSH
35400: LD_EXP 106
35404: PUSH
35405: LD_VAR 0 5
35409: ARRAY
35410: PUSH
35411: LD_INT 1
35413: PLUS
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PPUSH
35419: LD_VAR 0 2
35423: PUSH
35424: LD_VAR 0 3
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PPUSH
35433: CALL 41794 0 3
35437: ST_TO_ADDR
// result := true ;
35438: LD_ADDR_VAR 0 4
35442: PUSH
35443: LD_INT 1
35445: ST_TO_ADDR
// end ;
35446: LD_VAR 0 4
35450: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35451: LD_INT 0
35453: PPUSH
35454: PPUSH
35455: PPUSH
// if not unit in minersList then
35456: LD_VAR 0 1
35460: PUSH
35461: LD_EXP 105
35465: IN
35466: NOT
35467: IFFALSE 35471
// exit ;
35469: GO 35863
// index := GetElementIndex ( minersList , unit ) ;
35471: LD_ADDR_VAR 0 6
35475: PUSH
35476: LD_EXP 105
35480: PPUSH
35481: LD_VAR 0 1
35485: PPUSH
35486: CALL 41579 0 2
35490: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35491: LD_ADDR_VAR 0 5
35495: PUSH
35496: DOUBLE
35497: LD_EXP 106
35501: PUSH
35502: LD_VAR 0 6
35506: ARRAY
35507: INC
35508: ST_TO_ADDR
35509: LD_INT 1
35511: PUSH
35512: FOR_DOWNTO
35513: IFFALSE 35674
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35515: LD_EXP 106
35519: PUSH
35520: LD_VAR 0 6
35524: ARRAY
35525: PUSH
35526: LD_VAR 0 5
35530: ARRAY
35531: PUSH
35532: LD_INT 1
35534: ARRAY
35535: PUSH
35536: LD_VAR 0 2
35540: EQUAL
35541: PUSH
35542: LD_EXP 106
35546: PUSH
35547: LD_VAR 0 6
35551: ARRAY
35552: PUSH
35553: LD_VAR 0 5
35557: ARRAY
35558: PUSH
35559: LD_INT 2
35561: ARRAY
35562: PUSH
35563: LD_VAR 0 3
35567: EQUAL
35568: AND
35569: IFFALSE 35672
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35571: LD_EXP 106
35575: PUSH
35576: LD_VAR 0 6
35580: ARRAY
35581: PUSH
35582: LD_VAR 0 5
35586: ARRAY
35587: PUSH
35588: LD_INT 1
35590: ARRAY
35591: PPUSH
35592: LD_EXP 106
35596: PUSH
35597: LD_VAR 0 6
35601: ARRAY
35602: PUSH
35603: LD_VAR 0 5
35607: ARRAY
35608: PUSH
35609: LD_INT 2
35611: ARRAY
35612: PPUSH
35613: LD_VAR 0 1
35617: PPUSH
35618: CALL_OW 255
35622: PPUSH
35623: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35627: LD_ADDR_EXP 106
35631: PUSH
35632: LD_EXP 106
35636: PPUSH
35637: LD_VAR 0 6
35641: PPUSH
35642: LD_EXP 106
35646: PUSH
35647: LD_VAR 0 6
35651: ARRAY
35652: PPUSH
35653: LD_VAR 0 5
35657: PPUSH
35658: CALL_OW 3
35662: PPUSH
35663: CALL_OW 1
35667: ST_TO_ADDR
// exit ;
35668: POP
35669: POP
35670: GO 35863
// end ; end ;
35672: GO 35512
35674: POP
35675: POP
// for i := minerMinesList [ index ] downto 1 do
35676: LD_ADDR_VAR 0 5
35680: PUSH
35681: DOUBLE
35682: LD_EXP 106
35686: PUSH
35687: LD_VAR 0 6
35691: ARRAY
35692: INC
35693: ST_TO_ADDR
35694: LD_INT 1
35696: PUSH
35697: FOR_DOWNTO
35698: IFFALSE 35861
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35700: LD_EXP 106
35704: PUSH
35705: LD_VAR 0 6
35709: ARRAY
35710: PUSH
35711: LD_VAR 0 5
35715: ARRAY
35716: PUSH
35717: LD_INT 1
35719: ARRAY
35720: PPUSH
35721: LD_EXP 106
35725: PUSH
35726: LD_VAR 0 6
35730: ARRAY
35731: PUSH
35732: LD_VAR 0 5
35736: ARRAY
35737: PUSH
35738: LD_INT 2
35740: ARRAY
35741: PPUSH
35742: LD_VAR 0 2
35746: PPUSH
35747: LD_VAR 0 3
35751: PPUSH
35752: CALL_OW 298
35756: PUSH
35757: LD_INT 6
35759: LESS
35760: IFFALSE 35859
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35762: LD_EXP 106
35766: PUSH
35767: LD_VAR 0 6
35771: ARRAY
35772: PUSH
35773: LD_VAR 0 5
35777: ARRAY
35778: PUSH
35779: LD_INT 1
35781: ARRAY
35782: PPUSH
35783: LD_EXP 106
35787: PUSH
35788: LD_VAR 0 6
35792: ARRAY
35793: PUSH
35794: LD_VAR 0 5
35798: ARRAY
35799: PUSH
35800: LD_INT 2
35802: ARRAY
35803: PPUSH
35804: LD_VAR 0 1
35808: PPUSH
35809: CALL_OW 255
35813: PPUSH
35814: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35818: LD_ADDR_EXP 106
35822: PUSH
35823: LD_EXP 106
35827: PPUSH
35828: LD_VAR 0 6
35832: PPUSH
35833: LD_EXP 106
35837: PUSH
35838: LD_VAR 0 6
35842: ARRAY
35843: PPUSH
35844: LD_VAR 0 5
35848: PPUSH
35849: CALL_OW 3
35853: PPUSH
35854: CALL_OW 1
35858: ST_TO_ADDR
// end ; end ;
35859: GO 35697
35861: POP
35862: POP
// end ;
35863: LD_VAR 0 4
35867: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35868: LD_INT 0
35870: PPUSH
35871: PPUSH
35872: PPUSH
35873: PPUSH
35874: PPUSH
35875: PPUSH
35876: PPUSH
35877: PPUSH
35878: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35879: LD_VAR 0 1
35883: PPUSH
35884: CALL_OW 264
35888: PUSH
35889: LD_INT 81
35891: EQUAL
35892: NOT
35893: PUSH
35894: LD_VAR 0 1
35898: PUSH
35899: LD_EXP 105
35903: IN
35904: NOT
35905: OR
35906: IFFALSE 35910
// exit ;
35908: GO 36232
// index := GetElementIndex ( minersList , unit ) ;
35910: LD_ADDR_VAR 0 6
35914: PUSH
35915: LD_EXP 105
35919: PPUSH
35920: LD_VAR 0 1
35924: PPUSH
35925: CALL 41579 0 2
35929: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35930: LD_ADDR_VAR 0 8
35934: PUSH
35935: LD_EXP 107
35939: PUSH
35940: LD_EXP 106
35944: PUSH
35945: LD_VAR 0 6
35949: ARRAY
35950: MINUS
35951: ST_TO_ADDR
// if not minesFreeAmount then
35952: LD_VAR 0 8
35956: NOT
35957: IFFALSE 35961
// exit ;
35959: GO 36232
// tmp := [ ] ;
35961: LD_ADDR_VAR 0 7
35965: PUSH
35966: EMPTY
35967: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35968: LD_ADDR_VAR 0 5
35972: PUSH
35973: DOUBLE
35974: LD_INT 1
35976: DEC
35977: ST_TO_ADDR
35978: LD_VAR 0 8
35982: PUSH
35983: FOR_TO
35984: IFFALSE 36179
// begin _d := rand ( 0 , 5 ) ;
35986: LD_ADDR_VAR 0 11
35990: PUSH
35991: LD_INT 0
35993: PPUSH
35994: LD_INT 5
35996: PPUSH
35997: CALL_OW 12
36001: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36002: LD_ADDR_VAR 0 12
36006: PUSH
36007: LD_INT 2
36009: PPUSH
36010: LD_INT 6
36012: PPUSH
36013: CALL_OW 12
36017: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36018: LD_ADDR_VAR 0 9
36022: PUSH
36023: LD_VAR 0 2
36027: PPUSH
36028: LD_VAR 0 11
36032: PPUSH
36033: LD_VAR 0 12
36037: PPUSH
36038: CALL_OW 272
36042: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36043: LD_ADDR_VAR 0 10
36047: PUSH
36048: LD_VAR 0 3
36052: PPUSH
36053: LD_VAR 0 11
36057: PPUSH
36058: LD_VAR 0 12
36062: PPUSH
36063: CALL_OW 273
36067: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36068: LD_VAR 0 9
36072: PPUSH
36073: LD_VAR 0 10
36077: PPUSH
36078: CALL_OW 488
36082: PUSH
36083: LD_VAR 0 9
36087: PUSH
36088: LD_VAR 0 10
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_VAR 0 7
36101: IN
36102: NOT
36103: AND
36104: PUSH
36105: LD_VAR 0 9
36109: PPUSH
36110: LD_VAR 0 10
36114: PPUSH
36115: CALL_OW 458
36119: NOT
36120: AND
36121: IFFALSE 36163
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36123: LD_ADDR_VAR 0 7
36127: PUSH
36128: LD_VAR 0 7
36132: PPUSH
36133: LD_VAR 0 7
36137: PUSH
36138: LD_INT 1
36140: PLUS
36141: PPUSH
36142: LD_VAR 0 9
36146: PUSH
36147: LD_VAR 0 10
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PPUSH
36156: CALL_OW 1
36160: ST_TO_ADDR
36161: GO 36177
// i := i - 1 ;
36163: LD_ADDR_VAR 0 5
36167: PUSH
36168: LD_VAR 0 5
36172: PUSH
36173: LD_INT 1
36175: MINUS
36176: ST_TO_ADDR
// end ;
36177: GO 35983
36179: POP
36180: POP
// for i in tmp do
36181: LD_ADDR_VAR 0 5
36185: PUSH
36186: LD_VAR 0 7
36190: PUSH
36191: FOR_IN
36192: IFFALSE 36230
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36194: LD_VAR 0 1
36198: PPUSH
36199: LD_VAR 0 5
36203: PUSH
36204: LD_INT 1
36206: ARRAY
36207: PPUSH
36208: LD_VAR 0 5
36212: PUSH
36213: LD_INT 2
36215: ARRAY
36216: PPUSH
36217: CALL 35176 0 3
36221: NOT
36222: IFFALSE 36228
// exit ;
36224: POP
36225: POP
36226: GO 36232
36228: GO 36191
36230: POP
36231: POP
// end ;
36232: LD_VAR 0 4
36236: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36237: LD_INT 0
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
// if not GetClass ( unit ) = class_sniper then
36246: LD_VAR 0 1
36250: PPUSH
36251: CALL_OW 257
36255: PUSH
36256: LD_INT 5
36258: EQUAL
36259: NOT
36260: IFFALSE 36264
// exit ;
36262: GO 36652
// dist := 8 ;
36264: LD_ADDR_VAR 0 5
36268: PUSH
36269: LD_INT 8
36271: ST_TO_ADDR
// viewRange := 12 ;
36272: LD_ADDR_VAR 0 7
36276: PUSH
36277: LD_INT 12
36279: ST_TO_ADDR
// side := GetSide ( unit ) ;
36280: LD_ADDR_VAR 0 6
36284: PUSH
36285: LD_VAR 0 1
36289: PPUSH
36290: CALL_OW 255
36294: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36295: LD_INT 61
36297: PPUSH
36298: LD_VAR 0 6
36302: PPUSH
36303: CALL_OW 321
36307: PUSH
36308: LD_INT 2
36310: EQUAL
36311: IFFALSE 36321
// viewRange := 16 ;
36313: LD_ADDR_VAR 0 7
36317: PUSH
36318: LD_INT 16
36320: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36321: LD_VAR 0 1
36325: PPUSH
36326: LD_VAR 0 2
36330: PPUSH
36331: LD_VAR 0 3
36335: PPUSH
36336: CALL_OW 297
36340: PUSH
36341: LD_VAR 0 5
36345: GREATER
36346: IFFALSE 36425
// begin ComMoveXY ( unit , x , y ) ;
36348: LD_VAR 0 1
36352: PPUSH
36353: LD_VAR 0 2
36357: PPUSH
36358: LD_VAR 0 3
36362: PPUSH
36363: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36367: LD_INT 35
36369: PPUSH
36370: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36374: LD_VAR 0 1
36378: PPUSH
36379: LD_VAR 0 2
36383: PPUSH
36384: LD_VAR 0 3
36388: PPUSH
36389: CALL 72934 0 3
36393: NOT
36394: IFFALSE 36398
// exit ;
36396: GO 36652
// until GetDistUnitXY ( unit , x , y ) < dist ;
36398: LD_VAR 0 1
36402: PPUSH
36403: LD_VAR 0 2
36407: PPUSH
36408: LD_VAR 0 3
36412: PPUSH
36413: CALL_OW 297
36417: PUSH
36418: LD_VAR 0 5
36422: LESS
36423: IFFALSE 36367
// end ; ComTurnXY ( unit , x , y ) ;
36425: LD_VAR 0 1
36429: PPUSH
36430: LD_VAR 0 2
36434: PPUSH
36435: LD_VAR 0 3
36439: PPUSH
36440: CALL_OW 118
// wait ( 5 ) ;
36444: LD_INT 5
36446: PPUSH
36447: CALL_OW 67
// _d := GetDir ( unit ) ;
36451: LD_ADDR_VAR 0 10
36455: PUSH
36456: LD_VAR 0 1
36460: PPUSH
36461: CALL_OW 254
36465: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36466: LD_ADDR_VAR 0 8
36470: PUSH
36471: LD_VAR 0 1
36475: PPUSH
36476: CALL_OW 250
36480: PPUSH
36481: LD_VAR 0 10
36485: PPUSH
36486: LD_VAR 0 5
36490: PPUSH
36491: CALL_OW 272
36495: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36496: LD_ADDR_VAR 0 9
36500: PUSH
36501: LD_VAR 0 1
36505: PPUSH
36506: CALL_OW 251
36510: PPUSH
36511: LD_VAR 0 10
36515: PPUSH
36516: LD_VAR 0 5
36520: PPUSH
36521: CALL_OW 273
36525: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36526: LD_VAR 0 8
36530: PPUSH
36531: LD_VAR 0 9
36535: PPUSH
36536: CALL_OW 488
36540: NOT
36541: IFFALSE 36545
// exit ;
36543: GO 36652
// ComAnimCustom ( unit , 1 ) ;
36545: LD_VAR 0 1
36549: PPUSH
36550: LD_INT 1
36552: PPUSH
36553: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36557: LD_VAR 0 8
36561: PPUSH
36562: LD_VAR 0 9
36566: PPUSH
36567: LD_VAR 0 6
36571: PPUSH
36572: LD_VAR 0 7
36576: PPUSH
36577: CALL_OW 330
// repeat wait ( 1 ) ;
36581: LD_INT 1
36583: PPUSH
36584: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36588: LD_VAR 0 1
36592: PPUSH
36593: CALL_OW 316
36597: PUSH
36598: LD_VAR 0 1
36602: PPUSH
36603: CALL_OW 314
36607: OR
36608: PUSH
36609: LD_VAR 0 1
36613: PPUSH
36614: CALL_OW 302
36618: NOT
36619: OR
36620: PUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 301
36630: OR
36631: IFFALSE 36581
// RemoveSeeing ( _x , _y , side ) ;
36633: LD_VAR 0 8
36637: PPUSH
36638: LD_VAR 0 9
36642: PPUSH
36643: LD_VAR 0 6
36647: PPUSH
36648: CALL_OW 331
// end ; end_of_file
36652: LD_VAR 0 4
36656: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36657: LD_INT 0
36659: PPUSH
36660: PPUSH
// if exist_mode then
36661: LD_VAR 0 2
36665: IFFALSE 36690
// unit := CreateCharacter ( prefix & ident ) else
36667: LD_ADDR_VAR 0 5
36671: PUSH
36672: LD_VAR 0 3
36676: PUSH
36677: LD_VAR 0 1
36681: STR
36682: PPUSH
36683: CALL_OW 34
36687: ST_TO_ADDR
36688: GO 36705
// unit := NewCharacter ( ident ) ;
36690: LD_ADDR_VAR 0 5
36694: PUSH
36695: LD_VAR 0 1
36699: PPUSH
36700: CALL_OW 25
36704: ST_TO_ADDR
// result := unit ;
36705: LD_ADDR_VAR 0 4
36709: PUSH
36710: LD_VAR 0 5
36714: ST_TO_ADDR
// end ;
36715: LD_VAR 0 4
36719: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36720: LD_INT 0
36722: PPUSH
36723: PPUSH
// if not side or not nation then
36724: LD_VAR 0 1
36728: NOT
36729: PUSH
36730: LD_VAR 0 2
36734: NOT
36735: OR
36736: IFFALSE 36740
// exit ;
36738: GO 37508
// case nation of nation_american :
36740: LD_VAR 0 2
36744: PUSH
36745: LD_INT 1
36747: DOUBLE
36748: EQUAL
36749: IFTRUE 36753
36751: GO 36967
36753: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36754: LD_ADDR_VAR 0 4
36758: PUSH
36759: LD_INT 35
36761: PUSH
36762: LD_INT 45
36764: PUSH
36765: LD_INT 46
36767: PUSH
36768: LD_INT 47
36770: PUSH
36771: LD_INT 82
36773: PUSH
36774: LD_INT 83
36776: PUSH
36777: LD_INT 84
36779: PUSH
36780: LD_INT 85
36782: PUSH
36783: LD_INT 86
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: LD_INT 2
36791: PUSH
36792: LD_INT 6
36794: PUSH
36795: LD_INT 15
36797: PUSH
36798: LD_INT 16
36800: PUSH
36801: LD_INT 7
36803: PUSH
36804: LD_INT 12
36806: PUSH
36807: LD_INT 13
36809: PUSH
36810: LD_INT 10
36812: PUSH
36813: LD_INT 14
36815: PUSH
36816: LD_INT 20
36818: PUSH
36819: LD_INT 21
36821: PUSH
36822: LD_INT 22
36824: PUSH
36825: LD_INT 25
36827: PUSH
36828: LD_INT 32
36830: PUSH
36831: LD_INT 27
36833: PUSH
36834: LD_INT 36
36836: PUSH
36837: LD_INT 69
36839: PUSH
36840: LD_INT 39
36842: PUSH
36843: LD_INT 34
36845: PUSH
36846: LD_INT 40
36848: PUSH
36849: LD_INT 48
36851: PUSH
36852: LD_INT 49
36854: PUSH
36855: LD_INT 50
36857: PUSH
36858: LD_INT 51
36860: PUSH
36861: LD_INT 52
36863: PUSH
36864: LD_INT 53
36866: PUSH
36867: LD_INT 54
36869: PUSH
36870: LD_INT 55
36872: PUSH
36873: LD_INT 56
36875: PUSH
36876: LD_INT 57
36878: PUSH
36879: LD_INT 58
36881: PUSH
36882: LD_INT 59
36884: PUSH
36885: LD_INT 60
36887: PUSH
36888: LD_INT 61
36890: PUSH
36891: LD_INT 62
36893: PUSH
36894: LD_INT 80
36896: PUSH
36897: LD_INT 82
36899: PUSH
36900: LD_INT 83
36902: PUSH
36903: LD_INT 84
36905: PUSH
36906: LD_INT 85
36908: PUSH
36909: LD_INT 86
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: ST_TO_ADDR
36965: GO 37432
36967: LD_INT 2
36969: DOUBLE
36970: EQUAL
36971: IFTRUE 36975
36973: GO 37201
36975: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36976: LD_ADDR_VAR 0 4
36980: PUSH
36981: LD_INT 35
36983: PUSH
36984: LD_INT 45
36986: PUSH
36987: LD_INT 46
36989: PUSH
36990: LD_INT 47
36992: PUSH
36993: LD_INT 82
36995: PUSH
36996: LD_INT 83
36998: PUSH
36999: LD_INT 84
37001: PUSH
37002: LD_INT 85
37004: PUSH
37005: LD_INT 87
37007: PUSH
37008: LD_INT 70
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: LD_INT 11
37016: PUSH
37017: LD_INT 3
37019: PUSH
37020: LD_INT 4
37022: PUSH
37023: LD_INT 5
37025: PUSH
37026: LD_INT 6
37028: PUSH
37029: LD_INT 15
37031: PUSH
37032: LD_INT 18
37034: PUSH
37035: LD_INT 7
37037: PUSH
37038: LD_INT 17
37040: PUSH
37041: LD_INT 8
37043: PUSH
37044: LD_INT 20
37046: PUSH
37047: LD_INT 21
37049: PUSH
37050: LD_INT 22
37052: PUSH
37053: LD_INT 72
37055: PUSH
37056: LD_INT 26
37058: PUSH
37059: LD_INT 69
37061: PUSH
37062: LD_INT 39
37064: PUSH
37065: LD_INT 40
37067: PUSH
37068: LD_INT 41
37070: PUSH
37071: LD_INT 42
37073: PUSH
37074: LD_INT 43
37076: PUSH
37077: LD_INT 48
37079: PUSH
37080: LD_INT 49
37082: PUSH
37083: LD_INT 50
37085: PUSH
37086: LD_INT 51
37088: PUSH
37089: LD_INT 52
37091: PUSH
37092: LD_INT 53
37094: PUSH
37095: LD_INT 54
37097: PUSH
37098: LD_INT 55
37100: PUSH
37101: LD_INT 56
37103: PUSH
37104: LD_INT 60
37106: PUSH
37107: LD_INT 61
37109: PUSH
37110: LD_INT 62
37112: PUSH
37113: LD_INT 66
37115: PUSH
37116: LD_INT 67
37118: PUSH
37119: LD_INT 68
37121: PUSH
37122: LD_INT 81
37124: PUSH
37125: LD_INT 82
37127: PUSH
37128: LD_INT 83
37130: PUSH
37131: LD_INT 84
37133: PUSH
37134: LD_INT 85
37136: PUSH
37137: LD_INT 87
37139: PUSH
37140: LD_INT 88
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
37199: GO 37432
37201: LD_INT 3
37203: DOUBLE
37204: EQUAL
37205: IFTRUE 37209
37207: GO 37431
37209: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37210: LD_ADDR_VAR 0 4
37214: PUSH
37215: LD_INT 46
37217: PUSH
37218: LD_INT 47
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 82
37229: PUSH
37230: LD_INT 83
37232: PUSH
37233: LD_INT 84
37235: PUSH
37236: LD_INT 85
37238: PUSH
37239: LD_INT 86
37241: PUSH
37242: LD_INT 11
37244: PUSH
37245: LD_INT 9
37247: PUSH
37248: LD_INT 20
37250: PUSH
37251: LD_INT 19
37253: PUSH
37254: LD_INT 21
37256: PUSH
37257: LD_INT 24
37259: PUSH
37260: LD_INT 22
37262: PUSH
37263: LD_INT 25
37265: PUSH
37266: LD_INT 28
37268: PUSH
37269: LD_INT 29
37271: PUSH
37272: LD_INT 30
37274: PUSH
37275: LD_INT 31
37277: PUSH
37278: LD_INT 37
37280: PUSH
37281: LD_INT 38
37283: PUSH
37284: LD_INT 32
37286: PUSH
37287: LD_INT 27
37289: PUSH
37290: LD_INT 33
37292: PUSH
37293: LD_INT 69
37295: PUSH
37296: LD_INT 39
37298: PUSH
37299: LD_INT 34
37301: PUSH
37302: LD_INT 40
37304: PUSH
37305: LD_INT 71
37307: PUSH
37308: LD_INT 23
37310: PUSH
37311: LD_INT 44
37313: PUSH
37314: LD_INT 48
37316: PUSH
37317: LD_INT 49
37319: PUSH
37320: LD_INT 50
37322: PUSH
37323: LD_INT 51
37325: PUSH
37326: LD_INT 52
37328: PUSH
37329: LD_INT 53
37331: PUSH
37332: LD_INT 54
37334: PUSH
37335: LD_INT 55
37337: PUSH
37338: LD_INT 56
37340: PUSH
37341: LD_INT 57
37343: PUSH
37344: LD_INT 58
37346: PUSH
37347: LD_INT 59
37349: PUSH
37350: LD_INT 63
37352: PUSH
37353: LD_INT 64
37355: PUSH
37356: LD_INT 65
37358: PUSH
37359: LD_INT 82
37361: PUSH
37362: LD_INT 83
37364: PUSH
37365: LD_INT 84
37367: PUSH
37368: LD_INT 85
37370: PUSH
37371: LD_INT 86
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: ST_TO_ADDR
37429: GO 37432
37431: POP
// if state > - 1 and state < 3 then
37432: LD_VAR 0 3
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: GREATER
37441: PUSH
37442: LD_VAR 0 3
37446: PUSH
37447: LD_INT 3
37449: LESS
37450: AND
37451: IFFALSE 37508
// for i in result do
37453: LD_ADDR_VAR 0 5
37457: PUSH
37458: LD_VAR 0 4
37462: PUSH
37463: FOR_IN
37464: IFFALSE 37506
// if GetTech ( i , side ) <> state then
37466: LD_VAR 0 5
37470: PPUSH
37471: LD_VAR 0 1
37475: PPUSH
37476: CALL_OW 321
37480: PUSH
37481: LD_VAR 0 3
37485: NONEQUAL
37486: IFFALSE 37504
// result := result diff i ;
37488: LD_ADDR_VAR 0 4
37492: PUSH
37493: LD_VAR 0 4
37497: PUSH
37498: LD_VAR 0 5
37502: DIFF
37503: ST_TO_ADDR
37504: GO 37463
37506: POP
37507: POP
// end ;
37508: LD_VAR 0 4
37512: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37513: LD_INT 0
37515: PPUSH
37516: PPUSH
37517: PPUSH
// result := true ;
37518: LD_ADDR_VAR 0 3
37522: PUSH
37523: LD_INT 1
37525: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37526: LD_ADDR_VAR 0 5
37530: PUSH
37531: LD_VAR 0 2
37535: PPUSH
37536: CALL_OW 480
37540: ST_TO_ADDR
// if not tmp then
37541: LD_VAR 0 5
37545: NOT
37546: IFFALSE 37550
// exit ;
37548: GO 37599
// for i in tmp do
37550: LD_ADDR_VAR 0 4
37554: PUSH
37555: LD_VAR 0 5
37559: PUSH
37560: FOR_IN
37561: IFFALSE 37597
// if GetTech ( i , side ) <> state_researched then
37563: LD_VAR 0 4
37567: PPUSH
37568: LD_VAR 0 1
37572: PPUSH
37573: CALL_OW 321
37577: PUSH
37578: LD_INT 2
37580: NONEQUAL
37581: IFFALSE 37595
// begin result := false ;
37583: LD_ADDR_VAR 0 3
37587: PUSH
37588: LD_INT 0
37590: ST_TO_ADDR
// exit ;
37591: POP
37592: POP
37593: GO 37599
// end ;
37595: GO 37560
37597: POP
37598: POP
// end ;
37599: LD_VAR 0 3
37603: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37604: LD_INT 0
37606: PPUSH
37607: PPUSH
37608: PPUSH
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
37614: PPUSH
37615: PPUSH
37616: PPUSH
37617: PPUSH
37618: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37619: LD_VAR 0 1
37623: NOT
37624: PUSH
37625: LD_VAR 0 1
37629: PPUSH
37630: CALL_OW 257
37634: PUSH
37635: LD_INT 9
37637: NONEQUAL
37638: OR
37639: IFFALSE 37643
// exit ;
37641: GO 38216
// side := GetSide ( unit ) ;
37643: LD_ADDR_VAR 0 9
37647: PUSH
37648: LD_VAR 0 1
37652: PPUSH
37653: CALL_OW 255
37657: ST_TO_ADDR
// tech_space := tech_spacanom ;
37658: LD_ADDR_VAR 0 12
37662: PUSH
37663: LD_INT 29
37665: ST_TO_ADDR
// tech_time := tech_taurad ;
37666: LD_ADDR_VAR 0 13
37670: PUSH
37671: LD_INT 28
37673: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37674: LD_ADDR_VAR 0 11
37678: PUSH
37679: LD_VAR 0 1
37683: PPUSH
37684: CALL_OW 310
37688: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37689: LD_VAR 0 11
37693: PPUSH
37694: CALL_OW 247
37698: PUSH
37699: LD_INT 2
37701: EQUAL
37702: IFFALSE 37706
// exit ;
37704: GO 38216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37706: LD_ADDR_VAR 0 8
37710: PUSH
37711: LD_INT 81
37713: PUSH
37714: LD_VAR 0 9
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 3
37725: PUSH
37726: LD_INT 21
37728: PUSH
37729: LD_INT 3
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PPUSH
37744: CALL_OW 69
37748: ST_TO_ADDR
// if not tmp then
37749: LD_VAR 0 8
37753: NOT
37754: IFFALSE 37758
// exit ;
37756: GO 38216
// if in_unit then
37758: LD_VAR 0 11
37762: IFFALSE 37786
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37764: LD_ADDR_VAR 0 10
37768: PUSH
37769: LD_VAR 0 8
37773: PPUSH
37774: LD_VAR 0 11
37778: PPUSH
37779: CALL_OW 74
37783: ST_TO_ADDR
37784: GO 37806
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37786: LD_ADDR_VAR 0 10
37790: PUSH
37791: LD_VAR 0 8
37795: PPUSH
37796: LD_VAR 0 1
37800: PPUSH
37801: CALL_OW 74
37805: ST_TO_ADDR
// if not enemy then
37806: LD_VAR 0 10
37810: NOT
37811: IFFALSE 37815
// exit ;
37813: GO 38216
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37815: LD_VAR 0 11
37819: PUSH
37820: LD_VAR 0 11
37824: PPUSH
37825: LD_VAR 0 10
37829: PPUSH
37830: CALL_OW 296
37834: PUSH
37835: LD_INT 13
37837: GREATER
37838: AND
37839: PUSH
37840: LD_VAR 0 1
37844: PPUSH
37845: LD_VAR 0 10
37849: PPUSH
37850: CALL_OW 296
37854: PUSH
37855: LD_INT 12
37857: GREATER
37858: OR
37859: IFFALSE 37863
// exit ;
37861: GO 38216
// missile := [ 1 ] ;
37863: LD_ADDR_VAR 0 14
37867: PUSH
37868: LD_INT 1
37870: PUSH
37871: EMPTY
37872: LIST
37873: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37874: LD_VAR 0 9
37878: PPUSH
37879: LD_VAR 0 12
37883: PPUSH
37884: CALL_OW 325
37888: IFFALSE 37917
// missile := Replace ( missile , missile + 1 , 2 ) ;
37890: LD_ADDR_VAR 0 14
37894: PUSH
37895: LD_VAR 0 14
37899: PPUSH
37900: LD_VAR 0 14
37904: PUSH
37905: LD_INT 1
37907: PLUS
37908: PPUSH
37909: LD_INT 2
37911: PPUSH
37912: CALL_OW 1
37916: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37917: LD_VAR 0 9
37921: PPUSH
37922: LD_VAR 0 13
37926: PPUSH
37927: CALL_OW 325
37931: PUSH
37932: LD_VAR 0 10
37936: PPUSH
37937: CALL_OW 255
37941: PPUSH
37942: LD_VAR 0 13
37946: PPUSH
37947: CALL_OW 325
37951: NOT
37952: AND
37953: IFFALSE 37982
// missile := Replace ( missile , missile + 1 , 3 ) ;
37955: LD_ADDR_VAR 0 14
37959: PUSH
37960: LD_VAR 0 14
37964: PPUSH
37965: LD_VAR 0 14
37969: PUSH
37970: LD_INT 1
37972: PLUS
37973: PPUSH
37974: LD_INT 3
37976: PPUSH
37977: CALL_OW 1
37981: ST_TO_ADDR
// if missile < 2 then
37982: LD_VAR 0 14
37986: PUSH
37987: LD_INT 2
37989: LESS
37990: IFFALSE 37994
// exit ;
37992: GO 38216
// x := GetX ( enemy ) ;
37994: LD_ADDR_VAR 0 4
37998: PUSH
37999: LD_VAR 0 10
38003: PPUSH
38004: CALL_OW 250
38008: ST_TO_ADDR
// y := GetY ( enemy ) ;
38009: LD_ADDR_VAR 0 5
38013: PUSH
38014: LD_VAR 0 10
38018: PPUSH
38019: CALL_OW 251
38023: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38024: LD_ADDR_VAR 0 6
38028: PUSH
38029: LD_VAR 0 4
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PPUSH
38038: LD_INT 1
38040: PPUSH
38041: CALL_OW 12
38045: PLUS
38046: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38047: LD_ADDR_VAR 0 7
38051: PUSH
38052: LD_VAR 0 5
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PPUSH
38061: LD_INT 1
38063: PPUSH
38064: CALL_OW 12
38068: PLUS
38069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38070: LD_VAR 0 6
38074: PPUSH
38075: LD_VAR 0 7
38079: PPUSH
38080: CALL_OW 488
38084: NOT
38085: IFFALSE 38107
// begin _x := x ;
38087: LD_ADDR_VAR 0 6
38091: PUSH
38092: LD_VAR 0 4
38096: ST_TO_ADDR
// _y := y ;
38097: LD_ADDR_VAR 0 7
38101: PUSH
38102: LD_VAR 0 5
38106: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38107: LD_ADDR_VAR 0 3
38111: PUSH
38112: LD_INT 1
38114: PPUSH
38115: LD_VAR 0 14
38119: PPUSH
38120: CALL_OW 12
38124: ST_TO_ADDR
// case i of 1 :
38125: LD_VAR 0 3
38129: PUSH
38130: LD_INT 1
38132: DOUBLE
38133: EQUAL
38134: IFTRUE 38138
38136: GO 38155
38138: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38139: LD_VAR 0 1
38143: PPUSH
38144: LD_VAR 0 10
38148: PPUSH
38149: CALL_OW 115
38153: GO 38216
38155: LD_INT 2
38157: DOUBLE
38158: EQUAL
38159: IFTRUE 38163
38161: GO 38185
38163: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38164: LD_VAR 0 1
38168: PPUSH
38169: LD_VAR 0 6
38173: PPUSH
38174: LD_VAR 0 7
38178: PPUSH
38179: CALL_OW 153
38183: GO 38216
38185: LD_INT 3
38187: DOUBLE
38188: EQUAL
38189: IFTRUE 38193
38191: GO 38215
38193: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38194: LD_VAR 0 1
38198: PPUSH
38199: LD_VAR 0 6
38203: PPUSH
38204: LD_VAR 0 7
38208: PPUSH
38209: CALL_OW 154
38213: GO 38216
38215: POP
// end ;
38216: LD_VAR 0 2
38220: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38221: LD_INT 0
38223: PPUSH
38224: PPUSH
38225: PPUSH
38226: PPUSH
38227: PPUSH
38228: PPUSH
// if not unit or not building then
38229: LD_VAR 0 1
38233: NOT
38234: PUSH
38235: LD_VAR 0 2
38239: NOT
38240: OR
38241: IFFALSE 38245
// exit ;
38243: GO 38403
// x := GetX ( building ) ;
38245: LD_ADDR_VAR 0 5
38249: PUSH
38250: LD_VAR 0 2
38254: PPUSH
38255: CALL_OW 250
38259: ST_TO_ADDR
// y := GetY ( building ) ;
38260: LD_ADDR_VAR 0 6
38264: PUSH
38265: LD_VAR 0 2
38269: PPUSH
38270: CALL_OW 251
38274: ST_TO_ADDR
// for i = 0 to 5 do
38275: LD_ADDR_VAR 0 4
38279: PUSH
38280: DOUBLE
38281: LD_INT 0
38283: DEC
38284: ST_TO_ADDR
38285: LD_INT 5
38287: PUSH
38288: FOR_TO
38289: IFFALSE 38401
// begin _x := ShiftX ( x , i , 3 ) ;
38291: LD_ADDR_VAR 0 7
38295: PUSH
38296: LD_VAR 0 5
38300: PPUSH
38301: LD_VAR 0 4
38305: PPUSH
38306: LD_INT 3
38308: PPUSH
38309: CALL_OW 272
38313: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38314: LD_ADDR_VAR 0 8
38318: PUSH
38319: LD_VAR 0 6
38323: PPUSH
38324: LD_VAR 0 4
38328: PPUSH
38329: LD_INT 3
38331: PPUSH
38332: CALL_OW 273
38336: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38337: LD_VAR 0 7
38341: PPUSH
38342: LD_VAR 0 8
38346: PPUSH
38347: CALL_OW 488
38351: NOT
38352: IFFALSE 38356
// continue ;
38354: GO 38288
// if HexInfo ( _x , _y ) = 0 then
38356: LD_VAR 0 7
38360: PPUSH
38361: LD_VAR 0 8
38365: PPUSH
38366: CALL_OW 428
38370: PUSH
38371: LD_INT 0
38373: EQUAL
38374: IFFALSE 38399
// begin ComMoveXY ( unit , _x , _y ) ;
38376: LD_VAR 0 1
38380: PPUSH
38381: LD_VAR 0 7
38385: PPUSH
38386: LD_VAR 0 8
38390: PPUSH
38391: CALL_OW 111
// exit ;
38395: POP
38396: POP
38397: GO 38403
// end ; end ;
38399: GO 38288
38401: POP
38402: POP
// end ;
38403: LD_VAR 0 3
38407: RET
// export function ScanBase ( side , base_area ) ; begin
38408: LD_INT 0
38410: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38411: LD_ADDR_VAR 0 3
38415: PUSH
38416: LD_VAR 0 2
38420: PPUSH
38421: LD_INT 81
38423: PUSH
38424: LD_VAR 0 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PPUSH
38433: CALL_OW 70
38437: ST_TO_ADDR
// end ;
38438: LD_VAR 0 3
38442: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38443: LD_INT 0
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
// result := false ;
38449: LD_ADDR_VAR 0 2
38453: PUSH
38454: LD_INT 0
38456: ST_TO_ADDR
// side := GetSide ( unit ) ;
38457: LD_ADDR_VAR 0 3
38461: PUSH
38462: LD_VAR 0 1
38466: PPUSH
38467: CALL_OW 255
38471: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38472: LD_ADDR_VAR 0 4
38476: PUSH
38477: LD_VAR 0 1
38481: PPUSH
38482: CALL_OW 248
38486: ST_TO_ADDR
// case nat of 1 :
38487: LD_VAR 0 4
38491: PUSH
38492: LD_INT 1
38494: DOUBLE
38495: EQUAL
38496: IFTRUE 38500
38498: GO 38511
38500: POP
// tech := tech_lassight ; 2 :
38501: LD_ADDR_VAR 0 5
38505: PUSH
38506: LD_INT 12
38508: ST_TO_ADDR
38509: GO 38550
38511: LD_INT 2
38513: DOUBLE
38514: EQUAL
38515: IFTRUE 38519
38517: GO 38530
38519: POP
// tech := tech_mortar ; 3 :
38520: LD_ADDR_VAR 0 5
38524: PUSH
38525: LD_INT 41
38527: ST_TO_ADDR
38528: GO 38550
38530: LD_INT 3
38532: DOUBLE
38533: EQUAL
38534: IFTRUE 38538
38536: GO 38549
38538: POP
// tech := tech_bazooka ; end ;
38539: LD_ADDR_VAR 0 5
38543: PUSH
38544: LD_INT 44
38546: ST_TO_ADDR
38547: GO 38550
38549: POP
// if Researched ( side , tech ) then
38550: LD_VAR 0 3
38554: PPUSH
38555: LD_VAR 0 5
38559: PPUSH
38560: CALL_OW 325
38564: IFFALSE 38591
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38566: LD_ADDR_VAR 0 2
38570: PUSH
38571: LD_INT 5
38573: PUSH
38574: LD_INT 8
38576: PUSH
38577: LD_INT 9
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: PUSH
38585: LD_VAR 0 4
38589: ARRAY
38590: ST_TO_ADDR
// end ;
38591: LD_VAR 0 2
38595: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38596: LD_INT 0
38598: PPUSH
38599: PPUSH
38600: PPUSH
// if not mines then
38601: LD_VAR 0 2
38605: NOT
38606: IFFALSE 38610
// exit ;
38608: GO 38754
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38610: LD_ADDR_VAR 0 5
38614: PUSH
38615: LD_INT 81
38617: PUSH
38618: LD_VAR 0 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 3
38629: PUSH
38630: LD_INT 21
38632: PUSH
38633: LD_INT 3
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PPUSH
38648: CALL_OW 69
38652: ST_TO_ADDR
// for i in mines do
38653: LD_ADDR_VAR 0 4
38657: PUSH
38658: LD_VAR 0 2
38662: PUSH
38663: FOR_IN
38664: IFFALSE 38752
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38666: LD_VAR 0 4
38670: PUSH
38671: LD_INT 1
38673: ARRAY
38674: PPUSH
38675: LD_VAR 0 4
38679: PUSH
38680: LD_INT 2
38682: ARRAY
38683: PPUSH
38684: CALL_OW 458
38688: NOT
38689: IFFALSE 38693
// continue ;
38691: GO 38663
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38693: LD_VAR 0 4
38697: PUSH
38698: LD_INT 1
38700: ARRAY
38701: PPUSH
38702: LD_VAR 0 4
38706: PUSH
38707: LD_INT 2
38709: ARRAY
38710: PPUSH
38711: CALL_OW 428
38715: PUSH
38716: LD_VAR 0 5
38720: IN
38721: IFFALSE 38750
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38723: LD_VAR 0 4
38727: PUSH
38728: LD_INT 1
38730: ARRAY
38731: PPUSH
38732: LD_VAR 0 4
38736: PUSH
38737: LD_INT 2
38739: ARRAY
38740: PPUSH
38741: LD_VAR 0 1
38745: PPUSH
38746: CALL_OW 456
// end ;
38750: GO 38663
38752: POP
38753: POP
// end ;
38754: LD_VAR 0 3
38758: RET
// export function Count ( array ) ; var i ; begin
38759: LD_INT 0
38761: PPUSH
38762: PPUSH
// result := 0 ;
38763: LD_ADDR_VAR 0 2
38767: PUSH
38768: LD_INT 0
38770: ST_TO_ADDR
// for i in array do
38771: LD_ADDR_VAR 0 3
38775: PUSH
38776: LD_VAR 0 1
38780: PUSH
38781: FOR_IN
38782: IFFALSE 38806
// if i then
38784: LD_VAR 0 3
38788: IFFALSE 38804
// result := result + 1 ;
38790: LD_ADDR_VAR 0 2
38794: PUSH
38795: LD_VAR 0 2
38799: PUSH
38800: LD_INT 1
38802: PLUS
38803: ST_TO_ADDR
38804: GO 38781
38806: POP
38807: POP
// end ;
38808: LD_VAR 0 2
38812: RET
// export function IsEmpty ( building ) ; begin
38813: LD_INT 0
38815: PPUSH
// if not building then
38816: LD_VAR 0 1
38820: NOT
38821: IFFALSE 38825
// exit ;
38823: GO 38868
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38825: LD_ADDR_VAR 0 2
38829: PUSH
38830: LD_VAR 0 1
38834: PUSH
38835: LD_INT 22
38837: PUSH
38838: LD_VAR 0 1
38842: PPUSH
38843: CALL_OW 255
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 58
38854: PUSH
38855: EMPTY
38856: LIST
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PPUSH
38862: CALL_OW 69
38866: IN
38867: ST_TO_ADDR
// end ;
38868: LD_VAR 0 2
38872: RET
// export function IsNotFull ( building ) ; var places ; begin
38873: LD_INT 0
38875: PPUSH
38876: PPUSH
// if not building then
38877: LD_VAR 0 1
38881: NOT
38882: IFFALSE 38886
// exit ;
38884: GO 39057
// result := false ;
38886: LD_ADDR_VAR 0 2
38890: PUSH
38891: LD_INT 0
38893: ST_TO_ADDR
// places := 0 ;
38894: LD_ADDR_VAR 0 3
38898: PUSH
38899: LD_INT 0
38901: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
38902: LD_VAR 0 1
38906: PPUSH
38907: CALL_OW 266
38911: PUSH
38912: LD_INT 0
38914: DOUBLE
38915: EQUAL
38916: IFTRUE 38974
38918: LD_INT 1
38920: DOUBLE
38921: EQUAL
38922: IFTRUE 38974
38924: LD_INT 6
38926: DOUBLE
38927: EQUAL
38928: IFTRUE 38974
38930: LD_INT 7
38932: DOUBLE
38933: EQUAL
38934: IFTRUE 38974
38936: LD_INT 8
38938: DOUBLE
38939: EQUAL
38940: IFTRUE 38974
38942: LD_INT 4
38944: DOUBLE
38945: EQUAL
38946: IFTRUE 38974
38948: LD_INT 5
38950: DOUBLE
38951: EQUAL
38952: IFTRUE 38974
38954: LD_INT 2
38956: DOUBLE
38957: EQUAL
38958: IFTRUE 38974
38960: LD_INT 3
38962: DOUBLE
38963: EQUAL
38964: IFTRUE 38974
38966: LD_INT 35
38968: DOUBLE
38969: EQUAL
38970: IFTRUE 38974
38972: GO 38985
38974: POP
// places := 6 ; b_bunker , b_breastwork :
38975: LD_ADDR_VAR 0 3
38979: PUSH
38980: LD_INT 6
38982: ST_TO_ADDR
38983: GO 39030
38985: LD_INT 32
38987: DOUBLE
38988: EQUAL
38989: IFTRUE 38999
38991: LD_INT 31
38993: DOUBLE
38994: EQUAL
38995: IFTRUE 38999
38997: GO 39010
38999: POP
// places := 1 ; b_control_tower :
39000: LD_ADDR_VAR 0 3
39004: PUSH
39005: LD_INT 1
39007: ST_TO_ADDR
39008: GO 39030
39010: LD_INT 36
39012: DOUBLE
39013: EQUAL
39014: IFTRUE 39018
39016: GO 39029
39018: POP
// places := 3 ; end ;
39019: LD_ADDR_VAR 0 3
39023: PUSH
39024: LD_INT 3
39026: ST_TO_ADDR
39027: GO 39030
39029: POP
// if places then
39030: LD_VAR 0 3
39034: IFFALSE 39057
// result := UnitsInside ( building ) < places ;
39036: LD_ADDR_VAR 0 2
39040: PUSH
39041: LD_VAR 0 1
39045: PPUSH
39046: CALL_OW 313
39050: PUSH
39051: LD_VAR 0 3
39055: LESS
39056: ST_TO_ADDR
// end ;
39057: LD_VAR 0 2
39061: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39062: LD_INT 0
39064: PPUSH
39065: PPUSH
39066: PPUSH
39067: PPUSH
// tmp := [ ] ;
39068: LD_ADDR_VAR 0 3
39072: PUSH
39073: EMPTY
39074: ST_TO_ADDR
// list := [ ] ;
39075: LD_ADDR_VAR 0 5
39079: PUSH
39080: EMPTY
39081: ST_TO_ADDR
// for i = 16 to 25 do
39082: LD_ADDR_VAR 0 4
39086: PUSH
39087: DOUBLE
39088: LD_INT 16
39090: DEC
39091: ST_TO_ADDR
39092: LD_INT 25
39094: PUSH
39095: FOR_TO
39096: IFFALSE 39169
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39098: LD_ADDR_VAR 0 3
39102: PUSH
39103: LD_VAR 0 3
39107: PUSH
39108: LD_INT 22
39110: PUSH
39111: LD_VAR 0 1
39115: PPUSH
39116: CALL_OW 255
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 91
39127: PUSH
39128: LD_VAR 0 1
39132: PUSH
39133: LD_INT 6
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 30
39143: PUSH
39144: LD_VAR 0 4
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: PUSH
39158: EMPTY
39159: LIST
39160: PPUSH
39161: CALL_OW 69
39165: ADD
39166: ST_TO_ADDR
39167: GO 39095
39169: POP
39170: POP
// for i = 1 to tmp do
39171: LD_ADDR_VAR 0 4
39175: PUSH
39176: DOUBLE
39177: LD_INT 1
39179: DEC
39180: ST_TO_ADDR
39181: LD_VAR 0 3
39185: PUSH
39186: FOR_TO
39187: IFFALSE 39275
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39189: LD_ADDR_VAR 0 5
39193: PUSH
39194: LD_VAR 0 5
39198: PUSH
39199: LD_VAR 0 3
39203: PUSH
39204: LD_VAR 0 4
39208: ARRAY
39209: PPUSH
39210: CALL_OW 266
39214: PUSH
39215: LD_VAR 0 3
39219: PUSH
39220: LD_VAR 0 4
39224: ARRAY
39225: PPUSH
39226: CALL_OW 250
39230: PUSH
39231: LD_VAR 0 3
39235: PUSH
39236: LD_VAR 0 4
39240: ARRAY
39241: PPUSH
39242: CALL_OW 251
39246: PUSH
39247: LD_VAR 0 3
39251: PUSH
39252: LD_VAR 0 4
39256: ARRAY
39257: PPUSH
39258: CALL_OW 254
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: PUSH
39269: EMPTY
39270: LIST
39271: ADD
39272: ST_TO_ADDR
39273: GO 39186
39275: POP
39276: POP
// result := list ;
39277: LD_ADDR_VAR 0 2
39281: PUSH
39282: LD_VAR 0 5
39286: ST_TO_ADDR
// end ;
39287: LD_VAR 0 2
39291: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39292: LD_INT 0
39294: PPUSH
39295: PPUSH
39296: PPUSH
39297: PPUSH
39298: PPUSH
39299: PPUSH
39300: PPUSH
// if not factory then
39301: LD_VAR 0 1
39305: NOT
39306: IFFALSE 39310
// exit ;
39308: GO 39903
// if control = control_apeman then
39310: LD_VAR 0 4
39314: PUSH
39315: LD_INT 5
39317: EQUAL
39318: IFFALSE 39427
// begin tmp := UnitsInside ( factory ) ;
39320: LD_ADDR_VAR 0 8
39324: PUSH
39325: LD_VAR 0 1
39329: PPUSH
39330: CALL_OW 313
39334: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39335: LD_VAR 0 8
39339: PPUSH
39340: LD_INT 25
39342: PUSH
39343: LD_INT 12
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PPUSH
39350: CALL_OW 72
39354: NOT
39355: IFFALSE 39365
// control := control_manual ;
39357: LD_ADDR_VAR 0 4
39361: PUSH
39362: LD_INT 1
39364: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39365: LD_ADDR_VAR 0 8
39369: PUSH
39370: LD_VAR 0 1
39374: PPUSH
39375: CALL 39062 0 1
39379: ST_TO_ADDR
// if tmp then
39380: LD_VAR 0 8
39384: IFFALSE 39427
// begin for i in tmp do
39386: LD_ADDR_VAR 0 7
39390: PUSH
39391: LD_VAR 0 8
39395: PUSH
39396: FOR_IN
39397: IFFALSE 39425
// if i [ 1 ] = b_ext_radio then
39399: LD_VAR 0 7
39403: PUSH
39404: LD_INT 1
39406: ARRAY
39407: PUSH
39408: LD_INT 22
39410: EQUAL
39411: IFFALSE 39423
// begin control := control_remote ;
39413: LD_ADDR_VAR 0 4
39417: PUSH
39418: LD_INT 2
39420: ST_TO_ADDR
// break ;
39421: GO 39425
// end ;
39423: GO 39396
39425: POP
39426: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39427: LD_VAR 0 1
39431: PPUSH
39432: LD_VAR 0 2
39436: PPUSH
39437: LD_VAR 0 3
39441: PPUSH
39442: LD_VAR 0 4
39446: PPUSH
39447: LD_VAR 0 5
39451: PPUSH
39452: CALL_OW 448
39456: IFFALSE 39491
// begin result := [ chassis , engine , control , weapon ] ;
39458: LD_ADDR_VAR 0 6
39462: PUSH
39463: LD_VAR 0 2
39467: PUSH
39468: LD_VAR 0 3
39472: PUSH
39473: LD_VAR 0 4
39477: PUSH
39478: LD_VAR 0 5
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: ST_TO_ADDR
// exit ;
39489: GO 39903
// end ; _chassis := AvailableChassisList ( factory ) ;
39491: LD_ADDR_VAR 0 9
39495: PUSH
39496: LD_VAR 0 1
39500: PPUSH
39501: CALL_OW 475
39505: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39506: LD_ADDR_VAR 0 11
39510: PUSH
39511: LD_VAR 0 1
39515: PPUSH
39516: CALL_OW 476
39520: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39521: LD_ADDR_VAR 0 12
39525: PUSH
39526: LD_VAR 0 1
39530: PPUSH
39531: CALL_OW 477
39535: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39536: LD_ADDR_VAR 0 10
39540: PUSH
39541: LD_VAR 0 1
39545: PPUSH
39546: CALL_OW 478
39550: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39551: LD_VAR 0 9
39555: NOT
39556: PUSH
39557: LD_VAR 0 11
39561: NOT
39562: OR
39563: PUSH
39564: LD_VAR 0 12
39568: NOT
39569: OR
39570: PUSH
39571: LD_VAR 0 10
39575: NOT
39576: OR
39577: IFFALSE 39612
// begin result := [ chassis , engine , control , weapon ] ;
39579: LD_ADDR_VAR 0 6
39583: PUSH
39584: LD_VAR 0 2
39588: PUSH
39589: LD_VAR 0 3
39593: PUSH
39594: LD_VAR 0 4
39598: PUSH
39599: LD_VAR 0 5
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: ST_TO_ADDR
// exit ;
39610: GO 39903
// end ; if not chassis in _chassis then
39612: LD_VAR 0 2
39616: PUSH
39617: LD_VAR 0 9
39621: IN
39622: NOT
39623: IFFALSE 39649
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39625: LD_ADDR_VAR 0 2
39629: PUSH
39630: LD_VAR 0 9
39634: PUSH
39635: LD_INT 1
39637: PPUSH
39638: LD_VAR 0 9
39642: PPUSH
39643: CALL_OW 12
39647: ARRAY
39648: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39649: LD_VAR 0 2
39653: PPUSH
39654: LD_VAR 0 3
39658: PPUSH
39659: CALL 39908 0 2
39663: NOT
39664: IFFALSE 39723
// repeat engine := _engine [ 1 ] ;
39666: LD_ADDR_VAR 0 3
39670: PUSH
39671: LD_VAR 0 11
39675: PUSH
39676: LD_INT 1
39678: ARRAY
39679: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39680: LD_ADDR_VAR 0 11
39684: PUSH
39685: LD_VAR 0 11
39689: PPUSH
39690: LD_INT 1
39692: PPUSH
39693: CALL_OW 3
39697: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39698: LD_VAR 0 2
39702: PPUSH
39703: LD_VAR 0 3
39707: PPUSH
39708: CALL 39908 0 2
39712: PUSH
39713: LD_VAR 0 11
39717: PUSH
39718: EMPTY
39719: EQUAL
39720: OR
39721: IFFALSE 39666
// if not control in _control then
39723: LD_VAR 0 4
39727: PUSH
39728: LD_VAR 0 12
39732: IN
39733: NOT
39734: IFFALSE 39760
// control := _control [ rand ( 1 , _control ) ] ;
39736: LD_ADDR_VAR 0 4
39740: PUSH
39741: LD_VAR 0 12
39745: PUSH
39746: LD_INT 1
39748: PPUSH
39749: LD_VAR 0 12
39753: PPUSH
39754: CALL_OW 12
39758: ARRAY
39759: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39760: LD_VAR 0 2
39764: PPUSH
39765: LD_VAR 0 5
39769: PPUSH
39770: CALL 40128 0 2
39774: NOT
39775: IFFALSE 39834
// repeat weapon := _weapon [ 1 ] ;
39777: LD_ADDR_VAR 0 5
39781: PUSH
39782: LD_VAR 0 10
39786: PUSH
39787: LD_INT 1
39789: ARRAY
39790: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39791: LD_ADDR_VAR 0 10
39795: PUSH
39796: LD_VAR 0 10
39800: PPUSH
39801: LD_INT 1
39803: PPUSH
39804: CALL_OW 3
39808: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39809: LD_VAR 0 2
39813: PPUSH
39814: LD_VAR 0 5
39818: PPUSH
39819: CALL 40128 0 2
39823: PUSH
39824: LD_VAR 0 10
39828: PUSH
39829: EMPTY
39830: EQUAL
39831: OR
39832: IFFALSE 39777
// result := [ ] ;
39834: LD_ADDR_VAR 0 6
39838: PUSH
39839: EMPTY
39840: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39841: LD_VAR 0 1
39845: PPUSH
39846: LD_VAR 0 2
39850: PPUSH
39851: LD_VAR 0 3
39855: PPUSH
39856: LD_VAR 0 4
39860: PPUSH
39861: LD_VAR 0 5
39865: PPUSH
39866: CALL_OW 448
39870: IFFALSE 39903
// result := [ chassis , engine , control , weapon ] ;
39872: LD_ADDR_VAR 0 6
39876: PUSH
39877: LD_VAR 0 2
39881: PUSH
39882: LD_VAR 0 3
39886: PUSH
39887: LD_VAR 0 4
39891: PUSH
39892: LD_VAR 0 5
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: ST_TO_ADDR
// end ;
39903: LD_VAR 0 6
39907: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39908: LD_INT 0
39910: PPUSH
// if not chassis or not engine then
39911: LD_VAR 0 1
39915: NOT
39916: PUSH
39917: LD_VAR 0 2
39921: NOT
39922: OR
39923: IFFALSE 39927
// exit ;
39925: GO 40123
// case engine of engine_solar :
39927: LD_VAR 0 2
39931: PUSH
39932: LD_INT 2
39934: DOUBLE
39935: EQUAL
39936: IFTRUE 39940
39938: GO 39978
39940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39941: LD_ADDR_VAR 0 3
39945: PUSH
39946: LD_INT 11
39948: PUSH
39949: LD_INT 12
39951: PUSH
39952: LD_INT 13
39954: PUSH
39955: LD_INT 14
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: LD_INT 2
39963: PUSH
39964: LD_INT 3
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: ST_TO_ADDR
39976: GO 40107
39978: LD_INT 1
39980: DOUBLE
39981: EQUAL
39982: IFTRUE 39986
39984: GO 40048
39986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39987: LD_ADDR_VAR 0 3
39991: PUSH
39992: LD_INT 11
39994: PUSH
39995: LD_INT 12
39997: PUSH
39998: LD_INT 13
40000: PUSH
40001: LD_INT 14
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: LD_INT 3
40012: PUSH
40013: LD_INT 4
40015: PUSH
40016: LD_INT 5
40018: PUSH
40019: LD_INT 21
40021: PUSH
40022: LD_INT 23
40024: PUSH
40025: LD_INT 22
40027: PUSH
40028: LD_INT 24
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: ST_TO_ADDR
40046: GO 40107
40048: LD_INT 3
40050: DOUBLE
40051: EQUAL
40052: IFTRUE 40056
40054: GO 40106
40056: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40057: LD_ADDR_VAR 0 3
40061: PUSH
40062: LD_INT 13
40064: PUSH
40065: LD_INT 14
40067: PUSH
40068: LD_INT 2
40070: PUSH
40071: LD_INT 3
40073: PUSH
40074: LD_INT 4
40076: PUSH
40077: LD_INT 5
40079: PUSH
40080: LD_INT 21
40082: PUSH
40083: LD_INT 22
40085: PUSH
40086: LD_INT 23
40088: PUSH
40089: LD_INT 24
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: ST_TO_ADDR
40104: GO 40107
40106: POP
// result := ( chassis in result ) ;
40107: LD_ADDR_VAR 0 3
40111: PUSH
40112: LD_VAR 0 1
40116: PUSH
40117: LD_VAR 0 3
40121: IN
40122: ST_TO_ADDR
// end ;
40123: LD_VAR 0 3
40127: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40128: LD_INT 0
40130: PPUSH
// if not chassis or not weapon then
40131: LD_VAR 0 1
40135: NOT
40136: PUSH
40137: LD_VAR 0 2
40141: NOT
40142: OR
40143: IFFALSE 40147
// exit ;
40145: GO 41207
// case weapon of us_machine_gun :
40147: LD_VAR 0 2
40151: PUSH
40152: LD_INT 2
40154: DOUBLE
40155: EQUAL
40156: IFTRUE 40160
40158: GO 40190
40160: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40161: LD_ADDR_VAR 0 3
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: LD_INT 3
40174: PUSH
40175: LD_INT 4
40177: PUSH
40178: LD_INT 5
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: ST_TO_ADDR
40188: GO 41191
40190: LD_INT 3
40192: DOUBLE
40193: EQUAL
40194: IFTRUE 40198
40196: GO 40228
40198: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40199: LD_ADDR_VAR 0 3
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: LD_INT 3
40212: PUSH
40213: LD_INT 4
40215: PUSH
40216: LD_INT 5
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: ST_TO_ADDR
40226: GO 41191
40228: LD_INT 11
40230: DOUBLE
40231: EQUAL
40232: IFTRUE 40236
40234: GO 40266
40236: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40237: LD_ADDR_VAR 0 3
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: LD_INT 3
40250: PUSH
40251: LD_INT 4
40253: PUSH
40254: LD_INT 5
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: ST_TO_ADDR
40264: GO 41191
40266: LD_INT 4
40268: DOUBLE
40269: EQUAL
40270: IFTRUE 40274
40272: GO 40300
40274: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40275: LD_ADDR_VAR 0 3
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: LD_INT 3
40285: PUSH
40286: LD_INT 4
40288: PUSH
40289: LD_INT 5
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: ST_TO_ADDR
40298: GO 41191
40300: LD_INT 5
40302: DOUBLE
40303: EQUAL
40304: IFTRUE 40308
40306: GO 40334
40308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40309: LD_ADDR_VAR 0 3
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 3
40319: PUSH
40320: LD_INT 4
40322: PUSH
40323: LD_INT 5
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: ST_TO_ADDR
40332: GO 41191
40334: LD_INT 9
40336: DOUBLE
40337: EQUAL
40338: IFTRUE 40342
40340: GO 40368
40342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40343: LD_ADDR_VAR 0 3
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: LD_INT 3
40353: PUSH
40354: LD_INT 4
40356: PUSH
40357: LD_INT 5
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: ST_TO_ADDR
40366: GO 41191
40368: LD_INT 7
40370: DOUBLE
40371: EQUAL
40372: IFTRUE 40376
40374: GO 40402
40376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40377: LD_ADDR_VAR 0 3
40381: PUSH
40382: LD_INT 2
40384: PUSH
40385: LD_INT 3
40387: PUSH
40388: LD_INT 4
40390: PUSH
40391: LD_INT 5
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: ST_TO_ADDR
40400: GO 41191
40402: LD_INT 12
40404: DOUBLE
40405: EQUAL
40406: IFTRUE 40410
40408: GO 40436
40410: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40411: LD_ADDR_VAR 0 3
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: LD_INT 3
40421: PUSH
40422: LD_INT 4
40424: PUSH
40425: LD_INT 5
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: ST_TO_ADDR
40434: GO 41191
40436: LD_INT 13
40438: DOUBLE
40439: EQUAL
40440: IFTRUE 40444
40442: GO 40470
40444: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40445: LD_ADDR_VAR 0 3
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 3
40455: PUSH
40456: LD_INT 4
40458: PUSH
40459: LD_INT 5
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: ST_TO_ADDR
40468: GO 41191
40470: LD_INT 14
40472: DOUBLE
40473: EQUAL
40474: IFTRUE 40478
40476: GO 40496
40478: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40479: LD_ADDR_VAR 0 3
40483: PUSH
40484: LD_INT 4
40486: PUSH
40487: LD_INT 5
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: ST_TO_ADDR
40494: GO 41191
40496: LD_INT 6
40498: DOUBLE
40499: EQUAL
40500: IFTRUE 40504
40502: GO 40522
40504: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40505: LD_ADDR_VAR 0 3
40509: PUSH
40510: LD_INT 4
40512: PUSH
40513: LD_INT 5
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: ST_TO_ADDR
40520: GO 41191
40522: LD_INT 10
40524: DOUBLE
40525: EQUAL
40526: IFTRUE 40530
40528: GO 40548
40530: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40531: LD_ADDR_VAR 0 3
40535: PUSH
40536: LD_INT 4
40538: PUSH
40539: LD_INT 5
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: ST_TO_ADDR
40546: GO 41191
40548: LD_INT 22
40550: DOUBLE
40551: EQUAL
40552: IFTRUE 40556
40554: GO 40582
40556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40557: LD_ADDR_VAR 0 3
40561: PUSH
40562: LD_INT 11
40564: PUSH
40565: LD_INT 12
40567: PUSH
40568: LD_INT 13
40570: PUSH
40571: LD_INT 14
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: ST_TO_ADDR
40580: GO 41191
40582: LD_INT 23
40584: DOUBLE
40585: EQUAL
40586: IFTRUE 40590
40588: GO 40616
40590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40591: LD_ADDR_VAR 0 3
40595: PUSH
40596: LD_INT 11
40598: PUSH
40599: LD_INT 12
40601: PUSH
40602: LD_INT 13
40604: PUSH
40605: LD_INT 14
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: ST_TO_ADDR
40614: GO 41191
40616: LD_INT 24
40618: DOUBLE
40619: EQUAL
40620: IFTRUE 40624
40622: GO 40650
40624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40625: LD_ADDR_VAR 0 3
40629: PUSH
40630: LD_INT 11
40632: PUSH
40633: LD_INT 12
40635: PUSH
40636: LD_INT 13
40638: PUSH
40639: LD_INT 14
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: ST_TO_ADDR
40648: GO 41191
40650: LD_INT 30
40652: DOUBLE
40653: EQUAL
40654: IFTRUE 40658
40656: GO 40684
40658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40659: LD_ADDR_VAR 0 3
40663: PUSH
40664: LD_INT 11
40666: PUSH
40667: LD_INT 12
40669: PUSH
40670: LD_INT 13
40672: PUSH
40673: LD_INT 14
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: ST_TO_ADDR
40682: GO 41191
40684: LD_INT 25
40686: DOUBLE
40687: EQUAL
40688: IFTRUE 40692
40690: GO 40710
40692: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40693: LD_ADDR_VAR 0 3
40697: PUSH
40698: LD_INT 13
40700: PUSH
40701: LD_INT 14
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: ST_TO_ADDR
40708: GO 41191
40710: LD_INT 27
40712: DOUBLE
40713: EQUAL
40714: IFTRUE 40718
40716: GO 40736
40718: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40719: LD_ADDR_VAR 0 3
40723: PUSH
40724: LD_INT 13
40726: PUSH
40727: LD_INT 14
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: ST_TO_ADDR
40734: GO 41191
40736: LD_INT 92
40738: DOUBLE
40739: EQUAL
40740: IFTRUE 40744
40742: GO 40770
40744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40745: LD_ADDR_VAR 0 3
40749: PUSH
40750: LD_INT 11
40752: PUSH
40753: LD_INT 12
40755: PUSH
40756: LD_INT 13
40758: PUSH
40759: LD_INT 14
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: ST_TO_ADDR
40768: GO 41191
40770: LD_INT 28
40772: DOUBLE
40773: EQUAL
40774: IFTRUE 40778
40776: GO 40796
40778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40779: LD_ADDR_VAR 0 3
40783: PUSH
40784: LD_INT 13
40786: PUSH
40787: LD_INT 14
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: ST_TO_ADDR
40794: GO 41191
40796: LD_INT 29
40798: DOUBLE
40799: EQUAL
40800: IFTRUE 40804
40802: GO 40822
40804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40805: LD_ADDR_VAR 0 3
40809: PUSH
40810: LD_INT 13
40812: PUSH
40813: LD_INT 14
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: ST_TO_ADDR
40820: GO 41191
40822: LD_INT 31
40824: DOUBLE
40825: EQUAL
40826: IFTRUE 40830
40828: GO 40848
40830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40831: LD_ADDR_VAR 0 3
40835: PUSH
40836: LD_INT 13
40838: PUSH
40839: LD_INT 14
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: ST_TO_ADDR
40846: GO 41191
40848: LD_INT 26
40850: DOUBLE
40851: EQUAL
40852: IFTRUE 40856
40854: GO 40874
40856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40857: LD_ADDR_VAR 0 3
40861: PUSH
40862: LD_INT 13
40864: PUSH
40865: LD_INT 14
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: ST_TO_ADDR
40872: GO 41191
40874: LD_INT 42
40876: DOUBLE
40877: EQUAL
40878: IFTRUE 40882
40880: GO 40908
40882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40883: LD_ADDR_VAR 0 3
40887: PUSH
40888: LD_INT 21
40890: PUSH
40891: LD_INT 22
40893: PUSH
40894: LD_INT 23
40896: PUSH
40897: LD_INT 24
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: ST_TO_ADDR
40906: GO 41191
40908: LD_INT 43
40910: DOUBLE
40911: EQUAL
40912: IFTRUE 40916
40914: GO 40942
40916: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40917: LD_ADDR_VAR 0 3
40921: PUSH
40922: LD_INT 21
40924: PUSH
40925: LD_INT 22
40927: PUSH
40928: LD_INT 23
40930: PUSH
40931: LD_INT 24
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: ST_TO_ADDR
40940: GO 41191
40942: LD_INT 44
40944: DOUBLE
40945: EQUAL
40946: IFTRUE 40950
40948: GO 40976
40950: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40951: LD_ADDR_VAR 0 3
40955: PUSH
40956: LD_INT 21
40958: PUSH
40959: LD_INT 22
40961: PUSH
40962: LD_INT 23
40964: PUSH
40965: LD_INT 24
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: ST_TO_ADDR
40974: GO 41191
40976: LD_INT 45
40978: DOUBLE
40979: EQUAL
40980: IFTRUE 40984
40982: GO 41010
40984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40985: LD_ADDR_VAR 0 3
40989: PUSH
40990: LD_INT 21
40992: PUSH
40993: LD_INT 22
40995: PUSH
40996: LD_INT 23
40998: PUSH
40999: LD_INT 24
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: ST_TO_ADDR
41008: GO 41191
41010: LD_INT 49
41012: DOUBLE
41013: EQUAL
41014: IFTRUE 41018
41016: GO 41044
41018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41019: LD_ADDR_VAR 0 3
41023: PUSH
41024: LD_INT 21
41026: PUSH
41027: LD_INT 22
41029: PUSH
41030: LD_INT 23
41032: PUSH
41033: LD_INT 24
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: ST_TO_ADDR
41042: GO 41191
41044: LD_INT 51
41046: DOUBLE
41047: EQUAL
41048: IFTRUE 41052
41050: GO 41078
41052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41053: LD_ADDR_VAR 0 3
41057: PUSH
41058: LD_INT 21
41060: PUSH
41061: LD_INT 22
41063: PUSH
41064: LD_INT 23
41066: PUSH
41067: LD_INT 24
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: ST_TO_ADDR
41076: GO 41191
41078: LD_INT 52
41080: DOUBLE
41081: EQUAL
41082: IFTRUE 41086
41084: GO 41112
41086: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41087: LD_ADDR_VAR 0 3
41091: PUSH
41092: LD_INT 21
41094: PUSH
41095: LD_INT 22
41097: PUSH
41098: LD_INT 23
41100: PUSH
41101: LD_INT 24
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: ST_TO_ADDR
41110: GO 41191
41112: LD_INT 53
41114: DOUBLE
41115: EQUAL
41116: IFTRUE 41120
41118: GO 41138
41120: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41121: LD_ADDR_VAR 0 3
41125: PUSH
41126: LD_INT 23
41128: PUSH
41129: LD_INT 24
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: ST_TO_ADDR
41136: GO 41191
41138: LD_INT 46
41140: DOUBLE
41141: EQUAL
41142: IFTRUE 41146
41144: GO 41164
41146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41147: LD_ADDR_VAR 0 3
41151: PUSH
41152: LD_INT 23
41154: PUSH
41155: LD_INT 24
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: ST_TO_ADDR
41162: GO 41191
41164: LD_INT 47
41166: DOUBLE
41167: EQUAL
41168: IFTRUE 41172
41170: GO 41190
41172: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41173: LD_ADDR_VAR 0 3
41177: PUSH
41178: LD_INT 23
41180: PUSH
41181: LD_INT 24
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: ST_TO_ADDR
41188: GO 41191
41190: POP
// result := ( chassis in result ) ;
41191: LD_ADDR_VAR 0 3
41195: PUSH
41196: LD_VAR 0 1
41200: PUSH
41201: LD_VAR 0 3
41205: IN
41206: ST_TO_ADDR
// end ;
41207: LD_VAR 0 3
41211: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41212: LD_INT 0
41214: PPUSH
41215: PPUSH
41216: PPUSH
41217: PPUSH
41218: PPUSH
41219: PPUSH
41220: PPUSH
// result := array ;
41221: LD_ADDR_VAR 0 5
41225: PUSH
41226: LD_VAR 0 1
41230: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41231: LD_VAR 0 1
41235: NOT
41236: PUSH
41237: LD_VAR 0 2
41241: NOT
41242: OR
41243: PUSH
41244: LD_VAR 0 3
41248: NOT
41249: OR
41250: PUSH
41251: LD_VAR 0 2
41255: PUSH
41256: LD_VAR 0 1
41260: GREATER
41261: OR
41262: PUSH
41263: LD_VAR 0 3
41267: PUSH
41268: LD_VAR 0 1
41272: GREATER
41273: OR
41274: IFFALSE 41278
// exit ;
41276: GO 41574
// if direction then
41278: LD_VAR 0 4
41282: IFFALSE 41346
// begin d := 1 ;
41284: LD_ADDR_VAR 0 9
41288: PUSH
41289: LD_INT 1
41291: ST_TO_ADDR
// if i_from > i_to then
41292: LD_VAR 0 2
41296: PUSH
41297: LD_VAR 0 3
41301: GREATER
41302: IFFALSE 41328
// length := ( array - i_from ) + i_to else
41304: LD_ADDR_VAR 0 11
41308: PUSH
41309: LD_VAR 0 1
41313: PUSH
41314: LD_VAR 0 2
41318: MINUS
41319: PUSH
41320: LD_VAR 0 3
41324: PLUS
41325: ST_TO_ADDR
41326: GO 41344
// length := i_to - i_from ;
41328: LD_ADDR_VAR 0 11
41332: PUSH
41333: LD_VAR 0 3
41337: PUSH
41338: LD_VAR 0 2
41342: MINUS
41343: ST_TO_ADDR
// end else
41344: GO 41407
// begin d := - 1 ;
41346: LD_ADDR_VAR 0 9
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: ST_TO_ADDR
// if i_from > i_to then
41355: LD_VAR 0 2
41359: PUSH
41360: LD_VAR 0 3
41364: GREATER
41365: IFFALSE 41385
// length := i_from - i_to else
41367: LD_ADDR_VAR 0 11
41371: PUSH
41372: LD_VAR 0 2
41376: PUSH
41377: LD_VAR 0 3
41381: MINUS
41382: ST_TO_ADDR
41383: GO 41407
// length := ( array - i_to ) + i_from ;
41385: LD_ADDR_VAR 0 11
41389: PUSH
41390: LD_VAR 0 1
41394: PUSH
41395: LD_VAR 0 3
41399: MINUS
41400: PUSH
41401: LD_VAR 0 2
41405: PLUS
41406: ST_TO_ADDR
// end ; if not length then
41407: LD_VAR 0 11
41411: NOT
41412: IFFALSE 41416
// exit ;
41414: GO 41574
// tmp := array ;
41416: LD_ADDR_VAR 0 10
41420: PUSH
41421: LD_VAR 0 1
41425: ST_TO_ADDR
// for i = 1 to length do
41426: LD_ADDR_VAR 0 6
41430: PUSH
41431: DOUBLE
41432: LD_INT 1
41434: DEC
41435: ST_TO_ADDR
41436: LD_VAR 0 11
41440: PUSH
41441: FOR_TO
41442: IFFALSE 41562
// begin for j = 1 to array do
41444: LD_ADDR_VAR 0 7
41448: PUSH
41449: DOUBLE
41450: LD_INT 1
41452: DEC
41453: ST_TO_ADDR
41454: LD_VAR 0 1
41458: PUSH
41459: FOR_TO
41460: IFFALSE 41548
// begin k := j + d ;
41462: LD_ADDR_VAR 0 8
41466: PUSH
41467: LD_VAR 0 7
41471: PUSH
41472: LD_VAR 0 9
41476: PLUS
41477: ST_TO_ADDR
// if k > array then
41478: LD_VAR 0 8
41482: PUSH
41483: LD_VAR 0 1
41487: GREATER
41488: IFFALSE 41498
// k := 1 ;
41490: LD_ADDR_VAR 0 8
41494: PUSH
41495: LD_INT 1
41497: ST_TO_ADDR
// if not k then
41498: LD_VAR 0 8
41502: NOT
41503: IFFALSE 41515
// k := array ;
41505: LD_ADDR_VAR 0 8
41509: PUSH
41510: LD_VAR 0 1
41514: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41515: LD_ADDR_VAR 0 10
41519: PUSH
41520: LD_VAR 0 10
41524: PPUSH
41525: LD_VAR 0 8
41529: PPUSH
41530: LD_VAR 0 1
41534: PUSH
41535: LD_VAR 0 7
41539: ARRAY
41540: PPUSH
41541: CALL_OW 1
41545: ST_TO_ADDR
// end ;
41546: GO 41459
41548: POP
41549: POP
// array := tmp ;
41550: LD_ADDR_VAR 0 1
41554: PUSH
41555: LD_VAR 0 10
41559: ST_TO_ADDR
// end ;
41560: GO 41441
41562: POP
41563: POP
// result := array ;
41564: LD_ADDR_VAR 0 5
41568: PUSH
41569: LD_VAR 0 1
41573: ST_TO_ADDR
// end ;
41574: LD_VAR 0 5
41578: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41579: LD_INT 0
41581: PPUSH
41582: PPUSH
// result := 0 ;
41583: LD_ADDR_VAR 0 3
41587: PUSH
41588: LD_INT 0
41590: ST_TO_ADDR
// if not array or not value in array then
41591: LD_VAR 0 1
41595: NOT
41596: PUSH
41597: LD_VAR 0 2
41601: PUSH
41602: LD_VAR 0 1
41606: IN
41607: NOT
41608: OR
41609: IFFALSE 41613
// exit ;
41611: GO 41667
// for i = 1 to array do
41613: LD_ADDR_VAR 0 4
41617: PUSH
41618: DOUBLE
41619: LD_INT 1
41621: DEC
41622: ST_TO_ADDR
41623: LD_VAR 0 1
41627: PUSH
41628: FOR_TO
41629: IFFALSE 41665
// if value = array [ i ] then
41631: LD_VAR 0 2
41635: PUSH
41636: LD_VAR 0 1
41640: PUSH
41641: LD_VAR 0 4
41645: ARRAY
41646: EQUAL
41647: IFFALSE 41663
// begin result := i ;
41649: LD_ADDR_VAR 0 3
41653: PUSH
41654: LD_VAR 0 4
41658: ST_TO_ADDR
// exit ;
41659: POP
41660: POP
41661: GO 41667
// end ;
41663: GO 41628
41665: POP
41666: POP
// end ;
41667: LD_VAR 0 3
41671: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41672: LD_INT 0
41674: PPUSH
// vc_chassis := chassis ;
41675: LD_ADDR_OWVAR 37
41679: PUSH
41680: LD_VAR 0 1
41684: ST_TO_ADDR
// vc_engine := engine ;
41685: LD_ADDR_OWVAR 39
41689: PUSH
41690: LD_VAR 0 2
41694: ST_TO_ADDR
// vc_control := control ;
41695: LD_ADDR_OWVAR 38
41699: PUSH
41700: LD_VAR 0 3
41704: ST_TO_ADDR
// vc_weapon := weapon ;
41705: LD_ADDR_OWVAR 40
41709: PUSH
41710: LD_VAR 0 4
41714: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41715: LD_ADDR_OWVAR 41
41719: PUSH
41720: LD_VAR 0 5
41724: ST_TO_ADDR
// end ;
41725: LD_VAR 0 6
41729: RET
// export function WantPlant ( unit ) ; var task ; begin
41730: LD_INT 0
41732: PPUSH
41733: PPUSH
// result := false ;
41734: LD_ADDR_VAR 0 2
41738: PUSH
41739: LD_INT 0
41741: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41742: LD_ADDR_VAR 0 3
41746: PUSH
41747: LD_VAR 0 1
41751: PPUSH
41752: CALL_OW 437
41756: ST_TO_ADDR
// if task then
41757: LD_VAR 0 3
41761: IFFALSE 41789
// if task [ 1 ] [ 1 ] = p then
41763: LD_VAR 0 3
41767: PUSH
41768: LD_INT 1
41770: ARRAY
41771: PUSH
41772: LD_INT 1
41774: ARRAY
41775: PUSH
41776: LD_STRING p
41778: EQUAL
41779: IFFALSE 41789
// result := true ;
41781: LD_ADDR_VAR 0 2
41785: PUSH
41786: LD_INT 1
41788: ST_TO_ADDR
// end ;
41789: LD_VAR 0 2
41793: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41794: LD_INT 0
41796: PPUSH
41797: PPUSH
41798: PPUSH
41799: PPUSH
// if pos < 1 then
41800: LD_VAR 0 2
41804: PUSH
41805: LD_INT 1
41807: LESS
41808: IFFALSE 41812
// exit ;
41810: GO 42115
// if pos = 1 then
41812: LD_VAR 0 2
41816: PUSH
41817: LD_INT 1
41819: EQUAL
41820: IFFALSE 41853
// result := Replace ( arr , pos [ 1 ] , value ) else
41822: LD_ADDR_VAR 0 4
41826: PUSH
41827: LD_VAR 0 1
41831: PPUSH
41832: LD_VAR 0 2
41836: PUSH
41837: LD_INT 1
41839: ARRAY
41840: PPUSH
41841: LD_VAR 0 3
41845: PPUSH
41846: CALL_OW 1
41850: ST_TO_ADDR
41851: GO 42115
// begin tmp := arr ;
41853: LD_ADDR_VAR 0 6
41857: PUSH
41858: LD_VAR 0 1
41862: ST_TO_ADDR
// s_arr := [ tmp ] ;
41863: LD_ADDR_VAR 0 7
41867: PUSH
41868: LD_VAR 0 6
41872: PUSH
41873: EMPTY
41874: LIST
41875: ST_TO_ADDR
// for i = 1 to pos - 1 do
41876: LD_ADDR_VAR 0 5
41880: PUSH
41881: DOUBLE
41882: LD_INT 1
41884: DEC
41885: ST_TO_ADDR
41886: LD_VAR 0 2
41890: PUSH
41891: LD_INT 1
41893: MINUS
41894: PUSH
41895: FOR_TO
41896: IFFALSE 41941
// begin tmp := tmp [ pos [ i ] ] ;
41898: LD_ADDR_VAR 0 6
41902: PUSH
41903: LD_VAR 0 6
41907: PUSH
41908: LD_VAR 0 2
41912: PUSH
41913: LD_VAR 0 5
41917: ARRAY
41918: ARRAY
41919: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41920: LD_ADDR_VAR 0 7
41924: PUSH
41925: LD_VAR 0 7
41929: PUSH
41930: LD_VAR 0 6
41934: PUSH
41935: EMPTY
41936: LIST
41937: ADD
41938: ST_TO_ADDR
// end ;
41939: GO 41895
41941: POP
41942: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41943: LD_ADDR_VAR 0 6
41947: PUSH
41948: LD_VAR 0 6
41952: PPUSH
41953: LD_VAR 0 2
41957: PUSH
41958: LD_VAR 0 2
41962: ARRAY
41963: PPUSH
41964: LD_VAR 0 3
41968: PPUSH
41969: CALL_OW 1
41973: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41974: LD_ADDR_VAR 0 7
41978: PUSH
41979: LD_VAR 0 7
41983: PPUSH
41984: LD_VAR 0 7
41988: PPUSH
41989: LD_VAR 0 6
41993: PPUSH
41994: CALL_OW 1
41998: ST_TO_ADDR
// for i = s_arr downto 2 do
41999: LD_ADDR_VAR 0 5
42003: PUSH
42004: DOUBLE
42005: LD_VAR 0 7
42009: INC
42010: ST_TO_ADDR
42011: LD_INT 2
42013: PUSH
42014: FOR_DOWNTO
42015: IFFALSE 42099
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42017: LD_ADDR_VAR 0 6
42021: PUSH
42022: LD_VAR 0 7
42026: PUSH
42027: LD_VAR 0 5
42031: PUSH
42032: LD_INT 1
42034: MINUS
42035: ARRAY
42036: PPUSH
42037: LD_VAR 0 2
42041: PUSH
42042: LD_VAR 0 5
42046: PUSH
42047: LD_INT 1
42049: MINUS
42050: ARRAY
42051: PPUSH
42052: LD_VAR 0 7
42056: PUSH
42057: LD_VAR 0 5
42061: ARRAY
42062: PPUSH
42063: CALL_OW 1
42067: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42068: LD_ADDR_VAR 0 7
42072: PUSH
42073: LD_VAR 0 7
42077: PPUSH
42078: LD_VAR 0 5
42082: PUSH
42083: LD_INT 1
42085: MINUS
42086: PPUSH
42087: LD_VAR 0 6
42091: PPUSH
42092: CALL_OW 1
42096: ST_TO_ADDR
// end ;
42097: GO 42014
42099: POP
42100: POP
// result := s_arr [ 1 ] ;
42101: LD_ADDR_VAR 0 4
42105: PUSH
42106: LD_VAR 0 7
42110: PUSH
42111: LD_INT 1
42113: ARRAY
42114: ST_TO_ADDR
// end ; end ;
42115: LD_VAR 0 4
42119: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42120: LD_INT 0
42122: PPUSH
42123: PPUSH
// if not list then
42124: LD_VAR 0 1
42128: NOT
42129: IFFALSE 42133
// exit ;
42131: GO 42224
// i := list [ pos1 ] ;
42133: LD_ADDR_VAR 0 5
42137: PUSH
42138: LD_VAR 0 1
42142: PUSH
42143: LD_VAR 0 2
42147: ARRAY
42148: ST_TO_ADDR
// if not i then
42149: LD_VAR 0 5
42153: NOT
42154: IFFALSE 42158
// exit ;
42156: GO 42224
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42158: LD_ADDR_VAR 0 1
42162: PUSH
42163: LD_VAR 0 1
42167: PPUSH
42168: LD_VAR 0 2
42172: PPUSH
42173: LD_VAR 0 1
42177: PUSH
42178: LD_VAR 0 3
42182: ARRAY
42183: PPUSH
42184: CALL_OW 1
42188: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42189: LD_ADDR_VAR 0 1
42193: PUSH
42194: LD_VAR 0 1
42198: PPUSH
42199: LD_VAR 0 3
42203: PPUSH
42204: LD_VAR 0 5
42208: PPUSH
42209: CALL_OW 1
42213: ST_TO_ADDR
// result := list ;
42214: LD_ADDR_VAR 0 4
42218: PUSH
42219: LD_VAR 0 1
42223: ST_TO_ADDR
// end ;
42224: LD_VAR 0 4
42228: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42229: LD_INT 0
42231: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42232: LD_ADDR_VAR 0 5
42236: PUSH
42237: LD_VAR 0 1
42241: PPUSH
42242: CALL_OW 250
42246: PPUSH
42247: LD_VAR 0 1
42251: PPUSH
42252: CALL_OW 251
42256: PPUSH
42257: LD_VAR 0 2
42261: PPUSH
42262: LD_VAR 0 3
42266: PPUSH
42267: LD_VAR 0 4
42271: PPUSH
42272: CALL 42282 0 5
42276: ST_TO_ADDR
// end ;
42277: LD_VAR 0 5
42281: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42282: LD_INT 0
42284: PPUSH
42285: PPUSH
42286: PPUSH
42287: PPUSH
// if not list then
42288: LD_VAR 0 3
42292: NOT
42293: IFFALSE 42297
// exit ;
42295: GO 42685
// result := [ ] ;
42297: LD_ADDR_VAR 0 6
42301: PUSH
42302: EMPTY
42303: ST_TO_ADDR
// for i in list do
42304: LD_ADDR_VAR 0 7
42308: PUSH
42309: LD_VAR 0 3
42313: PUSH
42314: FOR_IN
42315: IFFALSE 42517
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42317: LD_ADDR_VAR 0 9
42321: PUSH
42322: LD_VAR 0 7
42326: PPUSH
42327: LD_VAR 0 1
42331: PPUSH
42332: LD_VAR 0 2
42336: PPUSH
42337: CALL_OW 297
42341: ST_TO_ADDR
// if not result then
42342: LD_VAR 0 6
42346: NOT
42347: IFFALSE 42373
// result := [ [ i , tmp ] ] else
42349: LD_ADDR_VAR 0 6
42353: PUSH
42354: LD_VAR 0 7
42358: PUSH
42359: LD_VAR 0 9
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: EMPTY
42369: LIST
42370: ST_TO_ADDR
42371: GO 42515
// begin if result [ result ] [ 2 ] < tmp then
42373: LD_VAR 0 6
42377: PUSH
42378: LD_VAR 0 6
42382: ARRAY
42383: PUSH
42384: LD_INT 2
42386: ARRAY
42387: PUSH
42388: LD_VAR 0 9
42392: LESS
42393: IFFALSE 42435
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42395: LD_ADDR_VAR 0 6
42399: PUSH
42400: LD_VAR 0 6
42404: PPUSH
42405: LD_VAR 0 6
42409: PUSH
42410: LD_INT 1
42412: PLUS
42413: PPUSH
42414: LD_VAR 0 7
42418: PUSH
42419: LD_VAR 0 9
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PPUSH
42428: CALL_OW 2
42432: ST_TO_ADDR
42433: GO 42515
// for j = 1 to result do
42435: LD_ADDR_VAR 0 8
42439: PUSH
42440: DOUBLE
42441: LD_INT 1
42443: DEC
42444: ST_TO_ADDR
42445: LD_VAR 0 6
42449: PUSH
42450: FOR_TO
42451: IFFALSE 42513
// begin if tmp < result [ j ] [ 2 ] then
42453: LD_VAR 0 9
42457: PUSH
42458: LD_VAR 0 6
42462: PUSH
42463: LD_VAR 0 8
42467: ARRAY
42468: PUSH
42469: LD_INT 2
42471: ARRAY
42472: LESS
42473: IFFALSE 42511
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42475: LD_ADDR_VAR 0 6
42479: PUSH
42480: LD_VAR 0 6
42484: PPUSH
42485: LD_VAR 0 8
42489: PPUSH
42490: LD_VAR 0 7
42494: PUSH
42495: LD_VAR 0 9
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PPUSH
42504: CALL_OW 2
42508: ST_TO_ADDR
// break ;
42509: GO 42513
// end ; end ;
42511: GO 42450
42513: POP
42514: POP
// end ; end ;
42515: GO 42314
42517: POP
42518: POP
// if result and not asc then
42519: LD_VAR 0 6
42523: PUSH
42524: LD_VAR 0 4
42528: NOT
42529: AND
42530: IFFALSE 42605
// begin tmp := result ;
42532: LD_ADDR_VAR 0 9
42536: PUSH
42537: LD_VAR 0 6
42541: ST_TO_ADDR
// for i = tmp downto 1 do
42542: LD_ADDR_VAR 0 7
42546: PUSH
42547: DOUBLE
42548: LD_VAR 0 9
42552: INC
42553: ST_TO_ADDR
42554: LD_INT 1
42556: PUSH
42557: FOR_DOWNTO
42558: IFFALSE 42603
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42560: LD_ADDR_VAR 0 6
42564: PUSH
42565: LD_VAR 0 6
42569: PPUSH
42570: LD_VAR 0 9
42574: PUSH
42575: LD_VAR 0 7
42579: MINUS
42580: PUSH
42581: LD_INT 1
42583: PLUS
42584: PPUSH
42585: LD_VAR 0 9
42589: PUSH
42590: LD_VAR 0 7
42594: ARRAY
42595: PPUSH
42596: CALL_OW 1
42600: ST_TO_ADDR
42601: GO 42557
42603: POP
42604: POP
// end ; tmp := [ ] ;
42605: LD_ADDR_VAR 0 9
42609: PUSH
42610: EMPTY
42611: ST_TO_ADDR
// if mode then
42612: LD_VAR 0 5
42616: IFFALSE 42685
// begin for i = 1 to result do
42618: LD_ADDR_VAR 0 7
42622: PUSH
42623: DOUBLE
42624: LD_INT 1
42626: DEC
42627: ST_TO_ADDR
42628: LD_VAR 0 6
42632: PUSH
42633: FOR_TO
42634: IFFALSE 42673
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42636: LD_ADDR_VAR 0 9
42640: PUSH
42641: LD_VAR 0 9
42645: PPUSH
42646: LD_VAR 0 7
42650: PPUSH
42651: LD_VAR 0 6
42655: PUSH
42656: LD_VAR 0 7
42660: ARRAY
42661: PUSH
42662: LD_INT 1
42664: ARRAY
42665: PPUSH
42666: CALL_OW 1
42670: ST_TO_ADDR
42671: GO 42633
42673: POP
42674: POP
// result := tmp ;
42675: LD_ADDR_VAR 0 6
42679: PUSH
42680: LD_VAR 0 9
42684: ST_TO_ADDR
// end ; end ;
42685: LD_VAR 0 6
42689: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42690: LD_INT 0
42692: PPUSH
42693: PPUSH
42694: PPUSH
42695: PPUSH
42696: PPUSH
42697: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42698: LD_ADDR_VAR 0 5
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: EMPTY
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: ST_TO_ADDR
// if not x or not y then
42720: LD_VAR 0 2
42724: NOT
42725: PUSH
42726: LD_VAR 0 3
42730: NOT
42731: OR
42732: IFFALSE 42736
// exit ;
42734: GO 44386
// if not range then
42736: LD_VAR 0 4
42740: NOT
42741: IFFALSE 42751
// range := 10 ;
42743: LD_ADDR_VAR 0 4
42747: PUSH
42748: LD_INT 10
42750: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42751: LD_ADDR_VAR 0 8
42755: PUSH
42756: LD_INT 81
42758: PUSH
42759: LD_VAR 0 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 92
42770: PUSH
42771: LD_VAR 0 2
42775: PUSH
42776: LD_VAR 0 3
42780: PUSH
42781: LD_VAR 0 4
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 3
42794: PUSH
42795: LD_INT 21
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: LIST
42813: PPUSH
42814: CALL_OW 69
42818: ST_TO_ADDR
// if not tmp then
42819: LD_VAR 0 8
42823: NOT
42824: IFFALSE 42828
// exit ;
42826: GO 44386
// for i in tmp do
42828: LD_ADDR_VAR 0 6
42832: PUSH
42833: LD_VAR 0 8
42837: PUSH
42838: FOR_IN
42839: IFFALSE 44361
// begin points := [ 0 , 0 , 0 ] ;
42841: LD_ADDR_VAR 0 9
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: ST_TO_ADDR
// bpoints := 1 ;
42860: LD_ADDR_VAR 0 10
42864: PUSH
42865: LD_INT 1
42867: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42868: LD_VAR 0 6
42872: PPUSH
42873: CALL_OW 247
42877: PUSH
42878: LD_INT 1
42880: DOUBLE
42881: EQUAL
42882: IFTRUE 42886
42884: GO 43464
42886: POP
// begin if GetClass ( i ) = 1 then
42887: LD_VAR 0 6
42891: PPUSH
42892: CALL_OW 257
42896: PUSH
42897: LD_INT 1
42899: EQUAL
42900: IFFALSE 42921
// points := [ 10 , 5 , 3 ] ;
42902: LD_ADDR_VAR 0 9
42906: PUSH
42907: LD_INT 10
42909: PUSH
42910: LD_INT 5
42912: PUSH
42913: LD_INT 3
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: LIST
42920: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42921: LD_VAR 0 6
42925: PPUSH
42926: CALL_OW 257
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: LD_INT 3
42936: PUSH
42937: LD_INT 4
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: IN
42945: IFFALSE 42966
// points := [ 3 , 2 , 1 ] ;
42947: LD_ADDR_VAR 0 9
42951: PUSH
42952: LD_INT 3
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42966: LD_VAR 0 6
42970: PPUSH
42971: CALL_OW 257
42975: PUSH
42976: LD_INT 5
42978: EQUAL
42979: IFFALSE 43000
// points := [ 130 , 5 , 2 ] ;
42981: LD_ADDR_VAR 0 9
42985: PUSH
42986: LD_INT 130
42988: PUSH
42989: LD_INT 5
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43000: LD_VAR 0 6
43004: PPUSH
43005: CALL_OW 257
43009: PUSH
43010: LD_INT 8
43012: EQUAL
43013: IFFALSE 43034
// points := [ 35 , 35 , 30 ] ;
43015: LD_ADDR_VAR 0 9
43019: PUSH
43020: LD_INT 35
43022: PUSH
43023: LD_INT 35
43025: PUSH
43026: LD_INT 30
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43034: LD_VAR 0 6
43038: PPUSH
43039: CALL_OW 257
43043: PUSH
43044: LD_INT 9
43046: EQUAL
43047: IFFALSE 43068
// points := [ 20 , 55 , 40 ] ;
43049: LD_ADDR_VAR 0 9
43053: PUSH
43054: LD_INT 20
43056: PUSH
43057: LD_INT 55
43059: PUSH
43060: LD_INT 40
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: LIST
43067: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43068: LD_VAR 0 6
43072: PPUSH
43073: CALL_OW 257
43077: PUSH
43078: LD_INT 12
43080: PUSH
43081: LD_INT 16
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: IN
43088: IFFALSE 43109
// points := [ 5 , 3 , 2 ] ;
43090: LD_ADDR_VAR 0 9
43094: PUSH
43095: LD_INT 5
43097: PUSH
43098: LD_INT 3
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43109: LD_VAR 0 6
43113: PPUSH
43114: CALL_OW 257
43118: PUSH
43119: LD_INT 17
43121: EQUAL
43122: IFFALSE 43143
// points := [ 100 , 50 , 75 ] ;
43124: LD_ADDR_VAR 0 9
43128: PUSH
43129: LD_INT 100
43131: PUSH
43132: LD_INT 50
43134: PUSH
43135: LD_INT 75
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43143: LD_VAR 0 6
43147: PPUSH
43148: CALL_OW 257
43152: PUSH
43153: LD_INT 15
43155: EQUAL
43156: IFFALSE 43177
// points := [ 10 , 5 , 3 ] ;
43158: LD_ADDR_VAR 0 9
43162: PUSH
43163: LD_INT 10
43165: PUSH
43166: LD_INT 5
43168: PUSH
43169: LD_INT 3
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: LIST
43176: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43177: LD_VAR 0 6
43181: PPUSH
43182: CALL_OW 257
43186: PUSH
43187: LD_INT 14
43189: EQUAL
43190: IFFALSE 43211
// points := [ 10 , 0 , 0 ] ;
43192: LD_ADDR_VAR 0 9
43196: PUSH
43197: LD_INT 10
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: LIST
43210: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43211: LD_VAR 0 6
43215: PPUSH
43216: CALL_OW 257
43220: PUSH
43221: LD_INT 11
43223: EQUAL
43224: IFFALSE 43245
// points := [ 30 , 10 , 5 ] ;
43226: LD_ADDR_VAR 0 9
43230: PUSH
43231: LD_INT 30
43233: PUSH
43234: LD_INT 10
43236: PUSH
43237: LD_INT 5
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: LIST
43244: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43245: LD_VAR 0 1
43249: PPUSH
43250: LD_INT 5
43252: PPUSH
43253: CALL_OW 321
43257: PUSH
43258: LD_INT 2
43260: EQUAL
43261: IFFALSE 43278
// bpoints := bpoints * 1.8 ;
43263: LD_ADDR_VAR 0 10
43267: PUSH
43268: LD_VAR 0 10
43272: PUSH
43273: LD_REAL  1.80000000000000E+0000
43276: MUL
43277: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43278: LD_VAR 0 6
43282: PPUSH
43283: CALL_OW 257
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: LD_INT 3
43296: PUSH
43297: LD_INT 4
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: IN
43306: PUSH
43307: LD_VAR 0 1
43311: PPUSH
43312: LD_INT 51
43314: PPUSH
43315: CALL_OW 321
43319: PUSH
43320: LD_INT 2
43322: EQUAL
43323: AND
43324: IFFALSE 43341
// bpoints := bpoints * 1.2 ;
43326: LD_ADDR_VAR 0 10
43330: PUSH
43331: LD_VAR 0 10
43335: PUSH
43336: LD_REAL  1.20000000000000E+0000
43339: MUL
43340: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43341: LD_VAR 0 6
43345: PPUSH
43346: CALL_OW 257
43350: PUSH
43351: LD_INT 5
43353: PUSH
43354: LD_INT 7
43356: PUSH
43357: LD_INT 9
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: IN
43365: PUSH
43366: LD_VAR 0 1
43370: PPUSH
43371: LD_INT 52
43373: PPUSH
43374: CALL_OW 321
43378: PUSH
43379: LD_INT 2
43381: EQUAL
43382: AND
43383: IFFALSE 43400
// bpoints := bpoints * 1.5 ;
43385: LD_ADDR_VAR 0 10
43389: PUSH
43390: LD_VAR 0 10
43394: PUSH
43395: LD_REAL  1.50000000000000E+0000
43398: MUL
43399: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43400: LD_VAR 0 1
43404: PPUSH
43405: LD_INT 66
43407: PPUSH
43408: CALL_OW 321
43412: PUSH
43413: LD_INT 2
43415: EQUAL
43416: IFFALSE 43433
// bpoints := bpoints * 1.1 ;
43418: LD_ADDR_VAR 0 10
43422: PUSH
43423: LD_VAR 0 10
43427: PUSH
43428: LD_REAL  1.10000000000000E+0000
43431: MUL
43432: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43433: LD_ADDR_VAR 0 10
43437: PUSH
43438: LD_VAR 0 10
43442: PUSH
43443: LD_VAR 0 6
43447: PPUSH
43448: LD_INT 1
43450: PPUSH
43451: CALL_OW 259
43455: PUSH
43456: LD_REAL  1.15000000000000E+0000
43459: MUL
43460: MUL
43461: ST_TO_ADDR
// end ; unit_vehicle :
43462: GO 44290
43464: LD_INT 2
43466: DOUBLE
43467: EQUAL
43468: IFTRUE 43472
43470: GO 44278
43472: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43473: LD_VAR 0 6
43477: PPUSH
43478: CALL_OW 264
43482: PUSH
43483: LD_INT 2
43485: PUSH
43486: LD_INT 42
43488: PUSH
43489: LD_INT 24
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: LIST
43496: IN
43497: IFFALSE 43518
// points := [ 25 , 5 , 3 ] ;
43499: LD_ADDR_VAR 0 9
43503: PUSH
43504: LD_INT 25
43506: PUSH
43507: LD_INT 5
43509: PUSH
43510: LD_INT 3
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: LIST
43517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43518: LD_VAR 0 6
43522: PPUSH
43523: CALL_OW 264
43527: PUSH
43528: LD_INT 4
43530: PUSH
43531: LD_INT 43
43533: PUSH
43534: LD_INT 25
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: LIST
43541: IN
43542: IFFALSE 43563
// points := [ 40 , 15 , 5 ] ;
43544: LD_ADDR_VAR 0 9
43548: PUSH
43549: LD_INT 40
43551: PUSH
43552: LD_INT 15
43554: PUSH
43555: LD_INT 5
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43563: LD_VAR 0 6
43567: PPUSH
43568: CALL_OW 264
43572: PUSH
43573: LD_INT 3
43575: PUSH
43576: LD_INT 23
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: IN
43583: IFFALSE 43604
// points := [ 7 , 25 , 8 ] ;
43585: LD_ADDR_VAR 0 9
43589: PUSH
43590: LD_INT 7
43592: PUSH
43593: LD_INT 25
43595: PUSH
43596: LD_INT 8
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43604: LD_VAR 0 6
43608: PPUSH
43609: CALL_OW 264
43613: PUSH
43614: LD_INT 5
43616: PUSH
43617: LD_INT 27
43619: PUSH
43620: LD_INT 44
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: LIST
43627: IN
43628: IFFALSE 43649
// points := [ 14 , 50 , 16 ] ;
43630: LD_ADDR_VAR 0 9
43634: PUSH
43635: LD_INT 14
43637: PUSH
43638: LD_INT 50
43640: PUSH
43641: LD_INT 16
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: LIST
43648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43649: LD_VAR 0 6
43653: PPUSH
43654: CALL_OW 264
43658: PUSH
43659: LD_INT 6
43661: PUSH
43662: LD_INT 46
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: IN
43669: IFFALSE 43690
// points := [ 32 , 120 , 70 ] ;
43671: LD_ADDR_VAR 0 9
43675: PUSH
43676: LD_INT 32
43678: PUSH
43679: LD_INT 120
43681: PUSH
43682: LD_INT 70
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: LIST
43689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43690: LD_VAR 0 6
43694: PPUSH
43695: CALL_OW 264
43699: PUSH
43700: LD_INT 7
43702: PUSH
43703: LD_INT 28
43705: PUSH
43706: LD_INT 45
43708: PUSH
43709: LD_INT 92
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: IN
43718: IFFALSE 43739
// points := [ 35 , 20 , 45 ] ;
43720: LD_ADDR_VAR 0 9
43724: PUSH
43725: LD_INT 35
43727: PUSH
43728: LD_INT 20
43730: PUSH
43731: LD_INT 45
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: LIST
43738: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43739: LD_VAR 0 6
43743: PPUSH
43744: CALL_OW 264
43748: PUSH
43749: LD_INT 47
43751: PUSH
43752: EMPTY
43753: LIST
43754: IN
43755: IFFALSE 43776
// points := [ 67 , 45 , 75 ] ;
43757: LD_ADDR_VAR 0 9
43761: PUSH
43762: LD_INT 67
43764: PUSH
43765: LD_INT 45
43767: PUSH
43768: LD_INT 75
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: LIST
43775: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43776: LD_VAR 0 6
43780: PPUSH
43781: CALL_OW 264
43785: PUSH
43786: LD_INT 26
43788: PUSH
43789: EMPTY
43790: LIST
43791: IN
43792: IFFALSE 43813
// points := [ 120 , 30 , 80 ] ;
43794: LD_ADDR_VAR 0 9
43798: PUSH
43799: LD_INT 120
43801: PUSH
43802: LD_INT 30
43804: PUSH
43805: LD_INT 80
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: LIST
43812: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43813: LD_VAR 0 6
43817: PPUSH
43818: CALL_OW 264
43822: PUSH
43823: LD_INT 22
43825: PUSH
43826: EMPTY
43827: LIST
43828: IN
43829: IFFALSE 43850
// points := [ 40 , 1 , 1 ] ;
43831: LD_ADDR_VAR 0 9
43835: PUSH
43836: LD_INT 40
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: LIST
43849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43850: LD_VAR 0 6
43854: PPUSH
43855: CALL_OW 264
43859: PUSH
43860: LD_INT 29
43862: PUSH
43863: EMPTY
43864: LIST
43865: IN
43866: IFFALSE 43887
// points := [ 70 , 200 , 400 ] ;
43868: LD_ADDR_VAR 0 9
43872: PUSH
43873: LD_INT 70
43875: PUSH
43876: LD_INT 200
43878: PUSH
43879: LD_INT 400
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43887: LD_VAR 0 6
43891: PPUSH
43892: CALL_OW 264
43896: PUSH
43897: LD_INT 14
43899: PUSH
43900: LD_INT 53
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: IN
43907: IFFALSE 43928
// points := [ 40 , 10 , 20 ] ;
43909: LD_ADDR_VAR 0 9
43913: PUSH
43914: LD_INT 40
43916: PUSH
43917: LD_INT 10
43919: PUSH
43920: LD_INT 20
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: LIST
43927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43928: LD_VAR 0 6
43932: PPUSH
43933: CALL_OW 264
43937: PUSH
43938: LD_INT 9
43940: PUSH
43941: EMPTY
43942: LIST
43943: IN
43944: IFFALSE 43965
// points := [ 5 , 70 , 20 ] ;
43946: LD_ADDR_VAR 0 9
43950: PUSH
43951: LD_INT 5
43953: PUSH
43954: LD_INT 70
43956: PUSH
43957: LD_INT 20
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43965: LD_VAR 0 6
43969: PPUSH
43970: CALL_OW 264
43974: PUSH
43975: LD_INT 10
43977: PUSH
43978: EMPTY
43979: LIST
43980: IN
43981: IFFALSE 44002
// points := [ 35 , 110 , 70 ] ;
43983: LD_ADDR_VAR 0 9
43987: PUSH
43988: LD_INT 35
43990: PUSH
43991: LD_INT 110
43993: PUSH
43994: LD_INT 70
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: LIST
44001: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44002: LD_VAR 0 6
44006: PPUSH
44007: CALL_OW 265
44011: PUSH
44012: LD_INT 25
44014: EQUAL
44015: IFFALSE 44036
// points := [ 80 , 65 , 100 ] ;
44017: LD_ADDR_VAR 0 9
44021: PUSH
44022: LD_INT 80
44024: PUSH
44025: LD_INT 65
44027: PUSH
44028: LD_INT 100
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: LIST
44035: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44036: LD_VAR 0 6
44040: PPUSH
44041: CALL_OW 263
44045: PUSH
44046: LD_INT 1
44048: EQUAL
44049: IFFALSE 44084
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44051: LD_ADDR_VAR 0 10
44055: PUSH
44056: LD_VAR 0 10
44060: PUSH
44061: LD_VAR 0 6
44065: PPUSH
44066: CALL_OW 311
44070: PPUSH
44071: LD_INT 3
44073: PPUSH
44074: CALL_OW 259
44078: PUSH
44079: LD_INT 4
44081: MUL
44082: MUL
44083: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44084: LD_VAR 0 6
44088: PPUSH
44089: CALL_OW 263
44093: PUSH
44094: LD_INT 2
44096: EQUAL
44097: IFFALSE 44148
// begin j := IsControledBy ( i ) ;
44099: LD_ADDR_VAR 0 7
44103: PUSH
44104: LD_VAR 0 6
44108: PPUSH
44109: CALL_OW 312
44113: ST_TO_ADDR
// if j then
44114: LD_VAR 0 7
44118: IFFALSE 44148
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44120: LD_ADDR_VAR 0 10
44124: PUSH
44125: LD_VAR 0 10
44129: PUSH
44130: LD_VAR 0 7
44134: PPUSH
44135: LD_INT 3
44137: PPUSH
44138: CALL_OW 259
44142: PUSH
44143: LD_INT 3
44145: MUL
44146: MUL
44147: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44148: LD_VAR 0 6
44152: PPUSH
44153: CALL_OW 264
44157: PUSH
44158: LD_INT 5
44160: PUSH
44161: LD_INT 6
44163: PUSH
44164: LD_INT 46
44166: PUSH
44167: LD_INT 44
44169: PUSH
44170: LD_INT 47
44172: PUSH
44173: LD_INT 45
44175: PUSH
44176: LD_INT 28
44178: PUSH
44179: LD_INT 7
44181: PUSH
44182: LD_INT 27
44184: PUSH
44185: LD_INT 29
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: IN
44200: PUSH
44201: LD_VAR 0 1
44205: PPUSH
44206: LD_INT 52
44208: PPUSH
44209: CALL_OW 321
44213: PUSH
44214: LD_INT 2
44216: EQUAL
44217: AND
44218: IFFALSE 44235
// bpoints := bpoints * 1.2 ;
44220: LD_ADDR_VAR 0 10
44224: PUSH
44225: LD_VAR 0 10
44229: PUSH
44230: LD_REAL  1.20000000000000E+0000
44233: MUL
44234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44235: LD_VAR 0 6
44239: PPUSH
44240: CALL_OW 264
44244: PUSH
44245: LD_INT 6
44247: PUSH
44248: LD_INT 46
44250: PUSH
44251: LD_INT 47
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: LIST
44258: IN
44259: IFFALSE 44276
// bpoints := bpoints * 1.2 ;
44261: LD_ADDR_VAR 0 10
44265: PUSH
44266: LD_VAR 0 10
44270: PUSH
44271: LD_REAL  1.20000000000000E+0000
44274: MUL
44275: ST_TO_ADDR
// end ; unit_building :
44276: GO 44290
44278: LD_INT 3
44280: DOUBLE
44281: EQUAL
44282: IFTRUE 44286
44284: GO 44289
44286: POP
// ; end ;
44287: GO 44290
44289: POP
// for j = 1 to 3 do
44290: LD_ADDR_VAR 0 7
44294: PUSH
44295: DOUBLE
44296: LD_INT 1
44298: DEC
44299: ST_TO_ADDR
44300: LD_INT 3
44302: PUSH
44303: FOR_TO
44304: IFFALSE 44357
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44306: LD_ADDR_VAR 0 5
44310: PUSH
44311: LD_VAR 0 5
44315: PPUSH
44316: LD_VAR 0 7
44320: PPUSH
44321: LD_VAR 0 5
44325: PUSH
44326: LD_VAR 0 7
44330: ARRAY
44331: PUSH
44332: LD_VAR 0 9
44336: PUSH
44337: LD_VAR 0 7
44341: ARRAY
44342: PUSH
44343: LD_VAR 0 10
44347: MUL
44348: PLUS
44349: PPUSH
44350: CALL_OW 1
44354: ST_TO_ADDR
44355: GO 44303
44357: POP
44358: POP
// end ;
44359: GO 42838
44361: POP
44362: POP
// result := Replace ( result , 4 , tmp ) ;
44363: LD_ADDR_VAR 0 5
44367: PUSH
44368: LD_VAR 0 5
44372: PPUSH
44373: LD_INT 4
44375: PPUSH
44376: LD_VAR 0 8
44380: PPUSH
44381: CALL_OW 1
44385: ST_TO_ADDR
// end ;
44386: LD_VAR 0 5
44390: RET
// export function DangerAtRange ( unit , range ) ; begin
44391: LD_INT 0
44393: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44394: LD_ADDR_VAR 0 3
44398: PUSH
44399: LD_VAR 0 1
44403: PPUSH
44404: CALL_OW 255
44408: PPUSH
44409: LD_VAR 0 1
44413: PPUSH
44414: CALL_OW 250
44418: PPUSH
44419: LD_VAR 0 1
44423: PPUSH
44424: CALL_OW 251
44428: PPUSH
44429: LD_VAR 0 2
44433: PPUSH
44434: CALL 42690 0 4
44438: ST_TO_ADDR
// end ;
44439: LD_VAR 0 3
44443: RET
// export function DangerInArea ( side , area ) ; begin
44444: LD_INT 0
44446: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44447: LD_ADDR_VAR 0 3
44451: PUSH
44452: LD_VAR 0 2
44456: PPUSH
44457: LD_INT 81
44459: PUSH
44460: LD_VAR 0 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PPUSH
44469: CALL_OW 70
44473: ST_TO_ADDR
// end ;
44474: LD_VAR 0 3
44478: RET
// export function IsExtension ( b ) ; begin
44479: LD_INT 0
44481: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44482: LD_ADDR_VAR 0 2
44486: PUSH
44487: LD_VAR 0 1
44491: PUSH
44492: LD_INT 23
44494: PUSH
44495: LD_INT 20
44497: PUSH
44498: LD_INT 22
44500: PUSH
44501: LD_INT 17
44503: PUSH
44504: LD_INT 24
44506: PUSH
44507: LD_INT 21
44509: PUSH
44510: LD_INT 19
44512: PUSH
44513: LD_INT 16
44515: PUSH
44516: LD_INT 25
44518: PUSH
44519: LD_INT 18
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: IN
44534: ST_TO_ADDR
// end ;
44535: LD_VAR 0 2
44539: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44540: LD_INT 0
44542: PPUSH
44543: PPUSH
44544: PPUSH
// result := [ ] ;
44545: LD_ADDR_VAR 0 4
44549: PUSH
44550: EMPTY
44551: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44552: LD_ADDR_VAR 0 5
44556: PUSH
44557: LD_VAR 0 2
44561: PPUSH
44562: LD_INT 21
44564: PUSH
44565: LD_INT 3
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PPUSH
44572: CALL_OW 70
44576: ST_TO_ADDR
// if not tmp then
44577: LD_VAR 0 5
44581: NOT
44582: IFFALSE 44586
// exit ;
44584: GO 44650
// if checkLink then
44586: LD_VAR 0 3
44590: IFFALSE 44640
// begin for i in tmp do
44592: LD_ADDR_VAR 0 6
44596: PUSH
44597: LD_VAR 0 5
44601: PUSH
44602: FOR_IN
44603: IFFALSE 44638
// if GetBase ( i ) <> base then
44605: LD_VAR 0 6
44609: PPUSH
44610: CALL_OW 274
44614: PUSH
44615: LD_VAR 0 1
44619: NONEQUAL
44620: IFFALSE 44636
// ComLinkToBase ( base , i ) ;
44622: LD_VAR 0 1
44626: PPUSH
44627: LD_VAR 0 6
44631: PPUSH
44632: CALL_OW 169
44636: GO 44602
44638: POP
44639: POP
// end ; result := tmp ;
44640: LD_ADDR_VAR 0 4
44644: PUSH
44645: LD_VAR 0 5
44649: ST_TO_ADDR
// end ;
44650: LD_VAR 0 4
44654: RET
// export function ComComplete ( units , b ) ; var i ; begin
44655: LD_INT 0
44657: PPUSH
44658: PPUSH
// if not units then
44659: LD_VAR 0 1
44663: NOT
44664: IFFALSE 44668
// exit ;
44666: GO 44758
// for i in units do
44668: LD_ADDR_VAR 0 4
44672: PUSH
44673: LD_VAR 0 1
44677: PUSH
44678: FOR_IN
44679: IFFALSE 44756
// if BuildingStatus ( b ) = bs_build then
44681: LD_VAR 0 2
44685: PPUSH
44686: CALL_OW 461
44690: PUSH
44691: LD_INT 1
44693: EQUAL
44694: IFFALSE 44754
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44696: LD_VAR 0 4
44700: PPUSH
44701: LD_STRING h
44703: PUSH
44704: LD_VAR 0 2
44708: PPUSH
44709: CALL_OW 250
44713: PUSH
44714: LD_VAR 0 2
44718: PPUSH
44719: CALL_OW 251
44723: PUSH
44724: LD_VAR 0 2
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: PUSH
44747: EMPTY
44748: LIST
44749: PPUSH
44750: CALL_OW 446
44754: GO 44678
44756: POP
44757: POP
// end ;
44758: LD_VAR 0 3
44762: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44763: LD_INT 0
44765: PPUSH
44766: PPUSH
44767: PPUSH
44768: PPUSH
44769: PPUSH
44770: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44771: LD_VAR 0 1
44775: NOT
44776: PUSH
44777: LD_VAR 0 1
44781: PPUSH
44782: CALL_OW 263
44786: PUSH
44787: LD_INT 2
44789: NONEQUAL
44790: OR
44791: IFFALSE 44795
// exit ;
44793: GO 45111
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44795: LD_ADDR_VAR 0 6
44799: PUSH
44800: LD_INT 22
44802: PUSH
44803: LD_VAR 0 1
44807: PPUSH
44808: CALL_OW 255
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: LD_INT 30
44822: PUSH
44823: LD_INT 36
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 34
44832: PUSH
44833: LD_INT 31
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: LIST
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PPUSH
44849: CALL_OW 69
44853: ST_TO_ADDR
// if not tmp then
44854: LD_VAR 0 6
44858: NOT
44859: IFFALSE 44863
// exit ;
44861: GO 45111
// result := [ ] ;
44863: LD_ADDR_VAR 0 2
44867: PUSH
44868: EMPTY
44869: ST_TO_ADDR
// for i in tmp do
44870: LD_ADDR_VAR 0 3
44874: PUSH
44875: LD_VAR 0 6
44879: PUSH
44880: FOR_IN
44881: IFFALSE 44952
// begin t := UnitsInside ( i ) ;
44883: LD_ADDR_VAR 0 4
44887: PUSH
44888: LD_VAR 0 3
44892: PPUSH
44893: CALL_OW 313
44897: ST_TO_ADDR
// if t then
44898: LD_VAR 0 4
44902: IFFALSE 44950
// for j in t do
44904: LD_ADDR_VAR 0 7
44908: PUSH
44909: LD_VAR 0 4
44913: PUSH
44914: FOR_IN
44915: IFFALSE 44948
// result := Replace ( result , result + 1 , j ) ;
44917: LD_ADDR_VAR 0 2
44921: PUSH
44922: LD_VAR 0 2
44926: PPUSH
44927: LD_VAR 0 2
44931: PUSH
44932: LD_INT 1
44934: PLUS
44935: PPUSH
44936: LD_VAR 0 7
44940: PPUSH
44941: CALL_OW 1
44945: ST_TO_ADDR
44946: GO 44914
44948: POP
44949: POP
// end ;
44950: GO 44880
44952: POP
44953: POP
// if not result then
44954: LD_VAR 0 2
44958: NOT
44959: IFFALSE 44963
// exit ;
44961: GO 45111
// mech := result [ 1 ] ;
44963: LD_ADDR_VAR 0 5
44967: PUSH
44968: LD_VAR 0 2
44972: PUSH
44973: LD_INT 1
44975: ARRAY
44976: ST_TO_ADDR
// if result > 1 then
44977: LD_VAR 0 2
44981: PUSH
44982: LD_INT 1
44984: GREATER
44985: IFFALSE 45097
// begin for i = 2 to result do
44987: LD_ADDR_VAR 0 3
44991: PUSH
44992: DOUBLE
44993: LD_INT 2
44995: DEC
44996: ST_TO_ADDR
44997: LD_VAR 0 2
45001: PUSH
45002: FOR_TO
45003: IFFALSE 45095
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45005: LD_ADDR_VAR 0 4
45009: PUSH
45010: LD_VAR 0 2
45014: PUSH
45015: LD_VAR 0 3
45019: ARRAY
45020: PPUSH
45021: LD_INT 3
45023: PPUSH
45024: CALL_OW 259
45028: PUSH
45029: LD_VAR 0 2
45033: PUSH
45034: LD_VAR 0 3
45038: ARRAY
45039: PPUSH
45040: CALL_OW 432
45044: MINUS
45045: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45046: LD_VAR 0 4
45050: PUSH
45051: LD_VAR 0 5
45055: PPUSH
45056: LD_INT 3
45058: PPUSH
45059: CALL_OW 259
45063: PUSH
45064: LD_VAR 0 5
45068: PPUSH
45069: CALL_OW 432
45073: MINUS
45074: GREATEREQUAL
45075: IFFALSE 45093
// mech := result [ i ] ;
45077: LD_ADDR_VAR 0 5
45081: PUSH
45082: LD_VAR 0 2
45086: PUSH
45087: LD_VAR 0 3
45091: ARRAY
45092: ST_TO_ADDR
// end ;
45093: GO 45002
45095: POP
45096: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45097: LD_VAR 0 1
45101: PPUSH
45102: LD_VAR 0 5
45106: PPUSH
45107: CALL_OW 135
// end ;
45111: LD_VAR 0 2
45115: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45116: LD_INT 0
45118: PPUSH
45119: PPUSH
45120: PPUSH
45121: PPUSH
45122: PPUSH
45123: PPUSH
45124: PPUSH
45125: PPUSH
45126: PPUSH
45127: PPUSH
45128: PPUSH
45129: PPUSH
45130: PPUSH
// result := [ ] ;
45131: LD_ADDR_VAR 0 7
45135: PUSH
45136: EMPTY
45137: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45138: LD_VAR 0 1
45142: PPUSH
45143: CALL_OW 266
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: IN
45158: NOT
45159: IFFALSE 45163
// exit ;
45161: GO 46797
// if name then
45163: LD_VAR 0 3
45167: IFFALSE 45183
// SetBName ( base_dep , name ) ;
45169: LD_VAR 0 1
45173: PPUSH
45174: LD_VAR 0 3
45178: PPUSH
45179: CALL_OW 500
// base := GetBase ( base_dep ) ;
45183: LD_ADDR_VAR 0 15
45187: PUSH
45188: LD_VAR 0 1
45192: PPUSH
45193: CALL_OW 274
45197: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45198: LD_ADDR_VAR 0 16
45202: PUSH
45203: LD_VAR 0 1
45207: PPUSH
45208: CALL_OW 255
45212: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45213: LD_ADDR_VAR 0 17
45217: PUSH
45218: LD_VAR 0 1
45222: PPUSH
45223: CALL_OW 248
45227: ST_TO_ADDR
// if sources then
45228: LD_VAR 0 5
45232: IFFALSE 45279
// for i = 1 to 3 do
45234: LD_ADDR_VAR 0 8
45238: PUSH
45239: DOUBLE
45240: LD_INT 1
45242: DEC
45243: ST_TO_ADDR
45244: LD_INT 3
45246: PUSH
45247: FOR_TO
45248: IFFALSE 45277
// AddResourceType ( base , i , sources [ i ] ) ;
45250: LD_VAR 0 15
45254: PPUSH
45255: LD_VAR 0 8
45259: PPUSH
45260: LD_VAR 0 5
45264: PUSH
45265: LD_VAR 0 8
45269: ARRAY
45270: PPUSH
45271: CALL_OW 276
45275: GO 45247
45277: POP
45278: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45279: LD_ADDR_VAR 0 18
45283: PUSH
45284: LD_VAR 0 15
45288: PPUSH
45289: LD_VAR 0 2
45293: PPUSH
45294: LD_INT 1
45296: PPUSH
45297: CALL 44540 0 3
45301: ST_TO_ADDR
// InitHc ;
45302: CALL_OW 19
// InitUc ;
45306: CALL_OW 18
// uc_side := side ;
45310: LD_ADDR_OWVAR 20
45314: PUSH
45315: LD_VAR 0 16
45319: ST_TO_ADDR
// uc_nation := nation ;
45320: LD_ADDR_OWVAR 21
45324: PUSH
45325: LD_VAR 0 17
45329: ST_TO_ADDR
// if buildings then
45330: LD_VAR 0 18
45334: IFFALSE 46656
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45336: LD_ADDR_VAR 0 19
45340: PUSH
45341: LD_VAR 0 18
45345: PPUSH
45346: LD_INT 2
45348: PUSH
45349: LD_INT 30
45351: PUSH
45352: LD_INT 29
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 30
45361: PUSH
45362: LD_INT 30
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: LIST
45373: PPUSH
45374: CALL_OW 72
45378: ST_TO_ADDR
// if tmp then
45379: LD_VAR 0 19
45383: IFFALSE 45431
// for i in tmp do
45385: LD_ADDR_VAR 0 8
45389: PUSH
45390: LD_VAR 0 19
45394: PUSH
45395: FOR_IN
45396: IFFALSE 45429
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45398: LD_VAR 0 8
45402: PPUSH
45403: CALL_OW 250
45407: PPUSH
45408: LD_VAR 0 8
45412: PPUSH
45413: CALL_OW 251
45417: PPUSH
45418: LD_VAR 0 16
45422: PPUSH
45423: CALL_OW 441
45427: GO 45395
45429: POP
45430: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45431: LD_VAR 0 18
45435: PPUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 30
45441: PUSH
45442: LD_INT 32
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 30
45451: PUSH
45452: LD_INT 33
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: LIST
45463: PPUSH
45464: CALL_OW 72
45468: IFFALSE 45556
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45470: LD_ADDR_VAR 0 8
45474: PUSH
45475: LD_VAR 0 18
45479: PPUSH
45480: LD_INT 2
45482: PUSH
45483: LD_INT 30
45485: PUSH
45486: LD_INT 32
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 30
45495: PUSH
45496: LD_INT 33
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: PPUSH
45508: CALL_OW 72
45512: PUSH
45513: FOR_IN
45514: IFFALSE 45554
// begin if not GetBWeapon ( i ) then
45516: LD_VAR 0 8
45520: PPUSH
45521: CALL_OW 269
45525: NOT
45526: IFFALSE 45552
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45528: LD_VAR 0 8
45532: PPUSH
45533: LD_VAR 0 8
45537: PPUSH
45538: LD_VAR 0 2
45542: PPUSH
45543: CALL 46802 0 2
45547: PPUSH
45548: CALL_OW 431
// end ;
45552: GO 45513
45554: POP
45555: POP
// end ; for i = 1 to personel do
45556: LD_ADDR_VAR 0 8
45560: PUSH
45561: DOUBLE
45562: LD_INT 1
45564: DEC
45565: ST_TO_ADDR
45566: LD_VAR 0 6
45570: PUSH
45571: FOR_TO
45572: IFFALSE 46636
// begin if i > 4 then
45574: LD_VAR 0 8
45578: PUSH
45579: LD_INT 4
45581: GREATER
45582: IFFALSE 45586
// break ;
45584: GO 46636
// case i of 1 :
45586: LD_VAR 0 8
45590: PUSH
45591: LD_INT 1
45593: DOUBLE
45594: EQUAL
45595: IFTRUE 45599
45597: GO 45679
45599: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45600: LD_ADDR_VAR 0 12
45604: PUSH
45605: LD_VAR 0 18
45609: PPUSH
45610: LD_INT 22
45612: PUSH
45613: LD_VAR 0 16
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 58
45624: PUSH
45625: EMPTY
45626: LIST
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: LD_INT 30
45633: PUSH
45634: LD_INT 32
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 30
45643: PUSH
45644: LD_INT 4
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 30
45653: PUSH
45654: LD_INT 5
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: LIST
45671: PPUSH
45672: CALL_OW 72
45676: ST_TO_ADDR
45677: GO 45901
45679: LD_INT 2
45681: DOUBLE
45682: EQUAL
45683: IFTRUE 45687
45685: GO 45749
45687: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45688: LD_ADDR_VAR 0 12
45692: PUSH
45693: LD_VAR 0 18
45697: PPUSH
45698: LD_INT 22
45700: PUSH
45701: LD_VAR 0 16
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: LD_INT 30
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 30
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: LIST
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PPUSH
45742: CALL_OW 72
45746: ST_TO_ADDR
45747: GO 45901
45749: LD_INT 3
45751: DOUBLE
45752: EQUAL
45753: IFTRUE 45757
45755: GO 45819
45757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45758: LD_ADDR_VAR 0 12
45762: PUSH
45763: LD_VAR 0 18
45767: PPUSH
45768: LD_INT 22
45770: PUSH
45771: LD_VAR 0 16
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: LD_INT 30
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 30
45795: PUSH
45796: LD_INT 3
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: LIST
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PPUSH
45812: CALL_OW 72
45816: ST_TO_ADDR
45817: GO 45901
45819: LD_INT 4
45821: DOUBLE
45822: EQUAL
45823: IFTRUE 45827
45825: GO 45900
45827: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45828: LD_ADDR_VAR 0 12
45832: PUSH
45833: LD_VAR 0 18
45837: PPUSH
45838: LD_INT 22
45840: PUSH
45841: LD_VAR 0 16
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: LD_INT 30
45855: PUSH
45856: LD_INT 6
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 30
45865: PUSH
45866: LD_INT 7
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 30
45875: PUSH
45876: LD_INT 8
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PPUSH
45893: CALL_OW 72
45897: ST_TO_ADDR
45898: GO 45901
45900: POP
// if i = 1 then
45901: LD_VAR 0 8
45905: PUSH
45906: LD_INT 1
45908: EQUAL
45909: IFFALSE 46020
// begin tmp := [ ] ;
45911: LD_ADDR_VAR 0 19
45915: PUSH
45916: EMPTY
45917: ST_TO_ADDR
// for j in f do
45918: LD_ADDR_VAR 0 9
45922: PUSH
45923: LD_VAR 0 12
45927: PUSH
45928: FOR_IN
45929: IFFALSE 46002
// if GetBType ( j ) = b_bunker then
45931: LD_VAR 0 9
45935: PPUSH
45936: CALL_OW 266
45940: PUSH
45941: LD_INT 32
45943: EQUAL
45944: IFFALSE 45971
// tmp := Insert ( tmp , 1 , j ) else
45946: LD_ADDR_VAR 0 19
45950: PUSH
45951: LD_VAR 0 19
45955: PPUSH
45956: LD_INT 1
45958: PPUSH
45959: LD_VAR 0 9
45963: PPUSH
45964: CALL_OW 2
45968: ST_TO_ADDR
45969: GO 46000
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45971: LD_ADDR_VAR 0 19
45975: PUSH
45976: LD_VAR 0 19
45980: PPUSH
45981: LD_VAR 0 19
45985: PUSH
45986: LD_INT 1
45988: PLUS
45989: PPUSH
45990: LD_VAR 0 9
45994: PPUSH
45995: CALL_OW 2
45999: ST_TO_ADDR
46000: GO 45928
46002: POP
46003: POP
// if tmp then
46004: LD_VAR 0 19
46008: IFFALSE 46020
// f := tmp ;
46010: LD_ADDR_VAR 0 12
46014: PUSH
46015: LD_VAR 0 19
46019: ST_TO_ADDR
// end ; x := personel [ i ] ;
46020: LD_ADDR_VAR 0 13
46024: PUSH
46025: LD_VAR 0 6
46029: PUSH
46030: LD_VAR 0 8
46034: ARRAY
46035: ST_TO_ADDR
// if x = - 1 then
46036: LD_VAR 0 13
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: EQUAL
46045: IFFALSE 46254
// begin for j in f do
46047: LD_ADDR_VAR 0 9
46051: PUSH
46052: LD_VAR 0 12
46056: PUSH
46057: FOR_IN
46058: IFFALSE 46250
// repeat InitHc ;
46060: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46064: LD_VAR 0 9
46068: PPUSH
46069: CALL_OW 266
46073: PUSH
46074: LD_INT 5
46076: EQUAL
46077: IFFALSE 46147
// begin if UnitsInside ( j ) < 3 then
46079: LD_VAR 0 9
46083: PPUSH
46084: CALL_OW 313
46088: PUSH
46089: LD_INT 3
46091: LESS
46092: IFFALSE 46128
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46094: LD_INT 0
46096: PPUSH
46097: LD_INT 5
46099: PUSH
46100: LD_INT 8
46102: PUSH
46103: LD_INT 9
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: PUSH
46111: LD_VAR 0 17
46115: ARRAY
46116: PPUSH
46117: LD_VAR 0 4
46121: PPUSH
46122: CALL_OW 380
46126: GO 46145
// PrepareHuman ( false , i , skill ) ;
46128: LD_INT 0
46130: PPUSH
46131: LD_VAR 0 8
46135: PPUSH
46136: LD_VAR 0 4
46140: PPUSH
46141: CALL_OW 380
// end else
46145: GO 46164
// PrepareHuman ( false , i , skill ) ;
46147: LD_INT 0
46149: PPUSH
46150: LD_VAR 0 8
46154: PPUSH
46155: LD_VAR 0 4
46159: PPUSH
46160: CALL_OW 380
// un := CreateHuman ;
46164: LD_ADDR_VAR 0 14
46168: PUSH
46169: CALL_OW 44
46173: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46174: LD_ADDR_VAR 0 7
46178: PUSH
46179: LD_VAR 0 7
46183: PPUSH
46184: LD_INT 1
46186: PPUSH
46187: LD_VAR 0 14
46191: PPUSH
46192: CALL_OW 2
46196: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46197: LD_VAR 0 14
46201: PPUSH
46202: LD_VAR 0 9
46206: PPUSH
46207: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46211: LD_VAR 0 9
46215: PPUSH
46216: CALL_OW 313
46220: PUSH
46221: LD_INT 6
46223: EQUAL
46224: PUSH
46225: LD_VAR 0 9
46229: PPUSH
46230: CALL_OW 266
46234: PUSH
46235: LD_INT 32
46237: PUSH
46238: LD_INT 31
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: IN
46245: OR
46246: IFFALSE 46060
46248: GO 46057
46250: POP
46251: POP
// end else
46252: GO 46634
// for j = 1 to x do
46254: LD_ADDR_VAR 0 9
46258: PUSH
46259: DOUBLE
46260: LD_INT 1
46262: DEC
46263: ST_TO_ADDR
46264: LD_VAR 0 13
46268: PUSH
46269: FOR_TO
46270: IFFALSE 46632
// begin InitHc ;
46272: CALL_OW 19
// if not f then
46276: LD_VAR 0 12
46280: NOT
46281: IFFALSE 46370
// begin PrepareHuman ( false , i , skill ) ;
46283: LD_INT 0
46285: PPUSH
46286: LD_VAR 0 8
46290: PPUSH
46291: LD_VAR 0 4
46295: PPUSH
46296: CALL_OW 380
// un := CreateHuman ;
46300: LD_ADDR_VAR 0 14
46304: PUSH
46305: CALL_OW 44
46309: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46310: LD_ADDR_VAR 0 7
46314: PUSH
46315: LD_VAR 0 7
46319: PPUSH
46320: LD_INT 1
46322: PPUSH
46323: LD_VAR 0 14
46327: PPUSH
46328: CALL_OW 2
46332: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46333: LD_VAR 0 14
46337: PPUSH
46338: LD_VAR 0 1
46342: PPUSH
46343: CALL_OW 250
46347: PPUSH
46348: LD_VAR 0 1
46352: PPUSH
46353: CALL_OW 251
46357: PPUSH
46358: LD_INT 10
46360: PPUSH
46361: LD_INT 0
46363: PPUSH
46364: CALL_OW 50
// continue ;
46368: GO 46269
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46370: LD_VAR 0 12
46374: PUSH
46375: LD_INT 1
46377: ARRAY
46378: PPUSH
46379: CALL_OW 313
46383: PUSH
46384: LD_VAR 0 12
46388: PUSH
46389: LD_INT 1
46391: ARRAY
46392: PPUSH
46393: CALL_OW 266
46397: PUSH
46398: LD_INT 32
46400: PUSH
46401: LD_INT 31
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: IN
46408: AND
46409: PUSH
46410: LD_VAR 0 12
46414: PUSH
46415: LD_INT 1
46417: ARRAY
46418: PPUSH
46419: CALL_OW 313
46423: PUSH
46424: LD_INT 6
46426: EQUAL
46427: OR
46428: IFFALSE 46448
// f := Delete ( f , 1 ) ;
46430: LD_ADDR_VAR 0 12
46434: PUSH
46435: LD_VAR 0 12
46439: PPUSH
46440: LD_INT 1
46442: PPUSH
46443: CALL_OW 3
46447: ST_TO_ADDR
// if not f then
46448: LD_VAR 0 12
46452: NOT
46453: IFFALSE 46471
// begin x := x + 2 ;
46455: LD_ADDR_VAR 0 13
46459: PUSH
46460: LD_VAR 0 13
46464: PUSH
46465: LD_INT 2
46467: PLUS
46468: ST_TO_ADDR
// continue ;
46469: GO 46269
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46471: LD_VAR 0 12
46475: PUSH
46476: LD_INT 1
46478: ARRAY
46479: PPUSH
46480: CALL_OW 266
46484: PUSH
46485: LD_INT 5
46487: EQUAL
46488: IFFALSE 46562
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46490: LD_VAR 0 12
46494: PUSH
46495: LD_INT 1
46497: ARRAY
46498: PPUSH
46499: CALL_OW 313
46503: PUSH
46504: LD_INT 3
46506: LESS
46507: IFFALSE 46543
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46509: LD_INT 0
46511: PPUSH
46512: LD_INT 5
46514: PUSH
46515: LD_INT 8
46517: PUSH
46518: LD_INT 9
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: PUSH
46526: LD_VAR 0 17
46530: ARRAY
46531: PPUSH
46532: LD_VAR 0 4
46536: PPUSH
46537: CALL_OW 380
46541: GO 46560
// PrepareHuman ( false , i , skill ) ;
46543: LD_INT 0
46545: PPUSH
46546: LD_VAR 0 8
46550: PPUSH
46551: LD_VAR 0 4
46555: PPUSH
46556: CALL_OW 380
// end else
46560: GO 46579
// PrepareHuman ( false , i , skill ) ;
46562: LD_INT 0
46564: PPUSH
46565: LD_VAR 0 8
46569: PPUSH
46570: LD_VAR 0 4
46574: PPUSH
46575: CALL_OW 380
// un := CreateHuman ;
46579: LD_ADDR_VAR 0 14
46583: PUSH
46584: CALL_OW 44
46588: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46589: LD_ADDR_VAR 0 7
46593: PUSH
46594: LD_VAR 0 7
46598: PPUSH
46599: LD_INT 1
46601: PPUSH
46602: LD_VAR 0 14
46606: PPUSH
46607: CALL_OW 2
46611: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46612: LD_VAR 0 14
46616: PPUSH
46617: LD_VAR 0 12
46621: PUSH
46622: LD_INT 1
46624: ARRAY
46625: PPUSH
46626: CALL_OW 52
// end ;
46630: GO 46269
46632: POP
46633: POP
// end ;
46634: GO 45571
46636: POP
46637: POP
// result := result ^ buildings ;
46638: LD_ADDR_VAR 0 7
46642: PUSH
46643: LD_VAR 0 7
46647: PUSH
46648: LD_VAR 0 18
46652: ADD
46653: ST_TO_ADDR
// end else
46654: GO 46797
// begin for i = 1 to personel do
46656: LD_ADDR_VAR 0 8
46660: PUSH
46661: DOUBLE
46662: LD_INT 1
46664: DEC
46665: ST_TO_ADDR
46666: LD_VAR 0 6
46670: PUSH
46671: FOR_TO
46672: IFFALSE 46795
// begin if i > 4 then
46674: LD_VAR 0 8
46678: PUSH
46679: LD_INT 4
46681: GREATER
46682: IFFALSE 46686
// break ;
46684: GO 46795
// x := personel [ i ] ;
46686: LD_ADDR_VAR 0 13
46690: PUSH
46691: LD_VAR 0 6
46695: PUSH
46696: LD_VAR 0 8
46700: ARRAY
46701: ST_TO_ADDR
// if x = - 1 then
46702: LD_VAR 0 13
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: EQUAL
46711: IFFALSE 46715
// continue ;
46713: GO 46671
// PrepareHuman ( false , i , skill ) ;
46715: LD_INT 0
46717: PPUSH
46718: LD_VAR 0 8
46722: PPUSH
46723: LD_VAR 0 4
46727: PPUSH
46728: CALL_OW 380
// un := CreateHuman ;
46732: LD_ADDR_VAR 0 14
46736: PUSH
46737: CALL_OW 44
46741: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46742: LD_VAR 0 14
46746: PPUSH
46747: LD_VAR 0 1
46751: PPUSH
46752: CALL_OW 250
46756: PPUSH
46757: LD_VAR 0 1
46761: PPUSH
46762: CALL_OW 251
46766: PPUSH
46767: LD_INT 10
46769: PPUSH
46770: LD_INT 0
46772: PPUSH
46773: CALL_OW 50
// result := result ^ un ;
46777: LD_ADDR_VAR 0 7
46781: PUSH
46782: LD_VAR 0 7
46786: PUSH
46787: LD_VAR 0 14
46791: ADD
46792: ST_TO_ADDR
// end ;
46793: GO 46671
46795: POP
46796: POP
// end ; end ;
46797: LD_VAR 0 7
46801: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46802: LD_INT 0
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
46811: PPUSH
46812: PPUSH
46813: PPUSH
46814: PPUSH
46815: PPUSH
46816: PPUSH
46817: PPUSH
46818: PPUSH
46819: PPUSH
// result := false ;
46820: LD_ADDR_VAR 0 3
46824: PUSH
46825: LD_INT 0
46827: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46828: LD_VAR 0 1
46832: NOT
46833: PUSH
46834: LD_VAR 0 1
46838: PPUSH
46839: CALL_OW 266
46843: PUSH
46844: LD_INT 32
46846: PUSH
46847: LD_INT 33
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: IN
46854: NOT
46855: OR
46856: IFFALSE 46860
// exit ;
46858: GO 47969
// nat := GetNation ( tower ) ;
46860: LD_ADDR_VAR 0 12
46864: PUSH
46865: LD_VAR 0 1
46869: PPUSH
46870: CALL_OW 248
46874: ST_TO_ADDR
// side := GetSide ( tower ) ;
46875: LD_ADDR_VAR 0 16
46879: PUSH
46880: LD_VAR 0 1
46884: PPUSH
46885: CALL_OW 255
46889: ST_TO_ADDR
// x := GetX ( tower ) ;
46890: LD_ADDR_VAR 0 10
46894: PUSH
46895: LD_VAR 0 1
46899: PPUSH
46900: CALL_OW 250
46904: ST_TO_ADDR
// y := GetY ( tower ) ;
46905: LD_ADDR_VAR 0 11
46909: PUSH
46910: LD_VAR 0 1
46914: PPUSH
46915: CALL_OW 251
46919: ST_TO_ADDR
// if not x or not y then
46920: LD_VAR 0 10
46924: NOT
46925: PUSH
46926: LD_VAR 0 11
46930: NOT
46931: OR
46932: IFFALSE 46936
// exit ;
46934: GO 47969
// weapon := 0 ;
46936: LD_ADDR_VAR 0 18
46940: PUSH
46941: LD_INT 0
46943: ST_TO_ADDR
// fac_list := [ ] ;
46944: LD_ADDR_VAR 0 17
46948: PUSH
46949: EMPTY
46950: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46951: LD_ADDR_VAR 0 6
46955: PUSH
46956: LD_VAR 0 1
46960: PPUSH
46961: CALL_OW 274
46965: PPUSH
46966: LD_VAR 0 2
46970: PPUSH
46971: LD_INT 0
46973: PPUSH
46974: CALL 44540 0 3
46978: PPUSH
46979: LD_INT 30
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PPUSH
46989: CALL_OW 72
46993: ST_TO_ADDR
// if not factories then
46994: LD_VAR 0 6
46998: NOT
46999: IFFALSE 47003
// exit ;
47001: GO 47969
// for i in factories do
47003: LD_ADDR_VAR 0 8
47007: PUSH
47008: LD_VAR 0 6
47012: PUSH
47013: FOR_IN
47014: IFFALSE 47039
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47016: LD_ADDR_VAR 0 17
47020: PUSH
47021: LD_VAR 0 17
47025: PUSH
47026: LD_VAR 0 8
47030: PPUSH
47031: CALL_OW 478
47035: UNION
47036: ST_TO_ADDR
47037: GO 47013
47039: POP
47040: POP
// if not fac_list then
47041: LD_VAR 0 17
47045: NOT
47046: IFFALSE 47050
// exit ;
47048: GO 47969
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47050: LD_ADDR_VAR 0 5
47054: PUSH
47055: LD_INT 4
47057: PUSH
47058: LD_INT 5
47060: PUSH
47061: LD_INT 9
47063: PUSH
47064: LD_INT 10
47066: PUSH
47067: LD_INT 6
47069: PUSH
47070: LD_INT 7
47072: PUSH
47073: LD_INT 11
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 27
47087: PUSH
47088: LD_INT 28
47090: PUSH
47091: LD_INT 26
47093: PUSH
47094: LD_INT 30
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 43
47105: PUSH
47106: LD_INT 44
47108: PUSH
47109: LD_INT 46
47111: PUSH
47112: LD_INT 45
47114: PUSH
47115: LD_INT 47
47117: PUSH
47118: LD_INT 49
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: PUSH
47134: LD_VAR 0 12
47138: ARRAY
47139: ST_TO_ADDR
// list := list isect fac_list ;
47140: LD_ADDR_VAR 0 5
47144: PUSH
47145: LD_VAR 0 5
47149: PUSH
47150: LD_VAR 0 17
47154: ISECT
47155: ST_TO_ADDR
// if not list then
47156: LD_VAR 0 5
47160: NOT
47161: IFFALSE 47165
// exit ;
47163: GO 47969
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47165: LD_VAR 0 12
47169: PUSH
47170: LD_INT 3
47172: EQUAL
47173: PUSH
47174: LD_INT 49
47176: PUSH
47177: LD_VAR 0 5
47181: IN
47182: AND
47183: PUSH
47184: LD_INT 31
47186: PPUSH
47187: LD_VAR 0 16
47191: PPUSH
47192: CALL_OW 321
47196: PUSH
47197: LD_INT 2
47199: EQUAL
47200: AND
47201: IFFALSE 47261
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47203: LD_INT 22
47205: PUSH
47206: LD_VAR 0 16
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 35
47217: PUSH
47218: LD_INT 49
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 91
47227: PUSH
47228: LD_VAR 0 1
47232: PUSH
47233: LD_INT 10
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: LIST
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: LIST
47245: PPUSH
47246: CALL_OW 69
47250: NOT
47251: IFFALSE 47261
// weapon := ru_time_lapser ;
47253: LD_ADDR_VAR 0 18
47257: PUSH
47258: LD_INT 49
47260: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47261: LD_VAR 0 12
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: IN
47276: PUSH
47277: LD_INT 11
47279: PUSH
47280: LD_VAR 0 5
47284: IN
47285: PUSH
47286: LD_INT 30
47288: PUSH
47289: LD_VAR 0 5
47293: IN
47294: OR
47295: AND
47296: PUSH
47297: LD_INT 6
47299: PPUSH
47300: LD_VAR 0 16
47304: PPUSH
47305: CALL_OW 321
47309: PUSH
47310: LD_INT 2
47312: EQUAL
47313: AND
47314: IFFALSE 47479
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47316: LD_INT 22
47318: PUSH
47319: LD_VAR 0 16
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: LD_INT 35
47333: PUSH
47334: LD_INT 11
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 35
47343: PUSH
47344: LD_INT 30
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 91
47358: PUSH
47359: LD_VAR 0 1
47363: PUSH
47364: LD_INT 18
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: PPUSH
47377: CALL_OW 69
47381: NOT
47382: PUSH
47383: LD_INT 22
47385: PUSH
47386: LD_VAR 0 16
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 30
47400: PUSH
47401: LD_INT 32
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 30
47410: PUSH
47411: LD_INT 33
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 91
47425: PUSH
47426: LD_VAR 0 1
47430: PUSH
47431: LD_INT 12
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: PUSH
47444: EMPTY
47445: LIST
47446: PPUSH
47447: CALL_OW 69
47451: PUSH
47452: LD_INT 2
47454: GREATER
47455: AND
47456: IFFALSE 47479
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47458: LD_ADDR_VAR 0 18
47462: PUSH
47463: LD_INT 11
47465: PUSH
47466: LD_INT 30
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_VAR 0 12
47477: ARRAY
47478: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47479: LD_VAR 0 18
47483: NOT
47484: PUSH
47485: LD_INT 40
47487: PPUSH
47488: LD_VAR 0 16
47492: PPUSH
47493: CALL_OW 321
47497: PUSH
47498: LD_INT 2
47500: EQUAL
47501: AND
47502: PUSH
47503: LD_INT 7
47505: PUSH
47506: LD_VAR 0 5
47510: IN
47511: PUSH
47512: LD_INT 28
47514: PUSH
47515: LD_VAR 0 5
47519: IN
47520: OR
47521: PUSH
47522: LD_INT 45
47524: PUSH
47525: LD_VAR 0 5
47529: IN
47530: OR
47531: AND
47532: IFFALSE 47786
// begin hex := GetHexInfo ( x , y ) ;
47534: LD_ADDR_VAR 0 4
47538: PUSH
47539: LD_VAR 0 10
47543: PPUSH
47544: LD_VAR 0 11
47548: PPUSH
47549: CALL_OW 546
47553: ST_TO_ADDR
// if hex [ 1 ] then
47554: LD_VAR 0 4
47558: PUSH
47559: LD_INT 1
47561: ARRAY
47562: IFFALSE 47566
// exit ;
47564: GO 47969
// height := hex [ 2 ] ;
47566: LD_ADDR_VAR 0 15
47570: PUSH
47571: LD_VAR 0 4
47575: PUSH
47576: LD_INT 2
47578: ARRAY
47579: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47580: LD_ADDR_VAR 0 14
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: LD_INT 3
47593: PUSH
47594: LD_INT 5
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: ST_TO_ADDR
// for i in tmp do
47603: LD_ADDR_VAR 0 8
47607: PUSH
47608: LD_VAR 0 14
47612: PUSH
47613: FOR_IN
47614: IFFALSE 47784
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47616: LD_ADDR_VAR 0 9
47620: PUSH
47621: LD_VAR 0 10
47625: PPUSH
47626: LD_VAR 0 8
47630: PPUSH
47631: LD_INT 5
47633: PPUSH
47634: CALL_OW 272
47638: PUSH
47639: LD_VAR 0 11
47643: PPUSH
47644: LD_VAR 0 8
47648: PPUSH
47649: LD_INT 5
47651: PPUSH
47652: CALL_OW 273
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47661: LD_VAR 0 9
47665: PUSH
47666: LD_INT 1
47668: ARRAY
47669: PPUSH
47670: LD_VAR 0 9
47674: PUSH
47675: LD_INT 2
47677: ARRAY
47678: PPUSH
47679: CALL_OW 488
47683: IFFALSE 47782
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47685: LD_ADDR_VAR 0 4
47689: PUSH
47690: LD_VAR 0 9
47694: PUSH
47695: LD_INT 1
47697: ARRAY
47698: PPUSH
47699: LD_VAR 0 9
47703: PUSH
47704: LD_INT 2
47706: ARRAY
47707: PPUSH
47708: CALL_OW 546
47712: ST_TO_ADDR
// if hex [ 1 ] then
47713: LD_VAR 0 4
47717: PUSH
47718: LD_INT 1
47720: ARRAY
47721: IFFALSE 47725
// continue ;
47723: GO 47613
// h := hex [ 2 ] ;
47725: LD_ADDR_VAR 0 13
47729: PUSH
47730: LD_VAR 0 4
47734: PUSH
47735: LD_INT 2
47737: ARRAY
47738: ST_TO_ADDR
// if h + 7 < height then
47739: LD_VAR 0 13
47743: PUSH
47744: LD_INT 7
47746: PLUS
47747: PUSH
47748: LD_VAR 0 15
47752: LESS
47753: IFFALSE 47782
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47755: LD_ADDR_VAR 0 18
47759: PUSH
47760: LD_INT 7
47762: PUSH
47763: LD_INT 28
47765: PUSH
47766: LD_INT 45
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: LIST
47773: PUSH
47774: LD_VAR 0 12
47778: ARRAY
47779: ST_TO_ADDR
// break ;
47780: GO 47784
// end ; end ; end ;
47782: GO 47613
47784: POP
47785: POP
// end ; if not weapon then
47786: LD_VAR 0 18
47790: NOT
47791: IFFALSE 47851
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47793: LD_ADDR_VAR 0 5
47797: PUSH
47798: LD_VAR 0 5
47802: PUSH
47803: LD_INT 11
47805: PUSH
47806: LD_INT 30
47808: PUSH
47809: LD_INT 49
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: DIFF
47817: ST_TO_ADDR
// if not list then
47818: LD_VAR 0 5
47822: NOT
47823: IFFALSE 47827
// exit ;
47825: GO 47969
// weapon := list [ rand ( 1 , list ) ] ;
47827: LD_ADDR_VAR 0 18
47831: PUSH
47832: LD_VAR 0 5
47836: PUSH
47837: LD_INT 1
47839: PPUSH
47840: LD_VAR 0 5
47844: PPUSH
47845: CALL_OW 12
47849: ARRAY
47850: ST_TO_ADDR
// end ; if weapon then
47851: LD_VAR 0 18
47855: IFFALSE 47969
// begin tmp := CostOfWeapon ( weapon ) ;
47857: LD_ADDR_VAR 0 14
47861: PUSH
47862: LD_VAR 0 18
47866: PPUSH
47867: CALL_OW 451
47871: ST_TO_ADDR
// j := GetBase ( tower ) ;
47872: LD_ADDR_VAR 0 9
47876: PUSH
47877: LD_VAR 0 1
47881: PPUSH
47882: CALL_OW 274
47886: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47887: LD_VAR 0 9
47891: PPUSH
47892: LD_INT 1
47894: PPUSH
47895: CALL_OW 275
47899: PUSH
47900: LD_VAR 0 14
47904: PUSH
47905: LD_INT 1
47907: ARRAY
47908: GREATEREQUAL
47909: PUSH
47910: LD_VAR 0 9
47914: PPUSH
47915: LD_INT 2
47917: PPUSH
47918: CALL_OW 275
47922: PUSH
47923: LD_VAR 0 14
47927: PUSH
47928: LD_INT 2
47930: ARRAY
47931: GREATEREQUAL
47932: AND
47933: PUSH
47934: LD_VAR 0 9
47938: PPUSH
47939: LD_INT 3
47941: PPUSH
47942: CALL_OW 275
47946: PUSH
47947: LD_VAR 0 14
47951: PUSH
47952: LD_INT 3
47954: ARRAY
47955: GREATEREQUAL
47956: AND
47957: IFFALSE 47969
// result := weapon ;
47959: LD_ADDR_VAR 0 3
47963: PUSH
47964: LD_VAR 0 18
47968: ST_TO_ADDR
// end ; end ;
47969: LD_VAR 0 3
47973: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47974: LD_INT 0
47976: PPUSH
47977: PPUSH
// result := true ;
47978: LD_ADDR_VAR 0 3
47982: PUSH
47983: LD_INT 1
47985: ST_TO_ADDR
// if array1 = array2 then
47986: LD_VAR 0 1
47990: PUSH
47991: LD_VAR 0 2
47995: EQUAL
47996: IFFALSE 48056
// begin for i = 1 to array1 do
47998: LD_ADDR_VAR 0 4
48002: PUSH
48003: DOUBLE
48004: LD_INT 1
48006: DEC
48007: ST_TO_ADDR
48008: LD_VAR 0 1
48012: PUSH
48013: FOR_TO
48014: IFFALSE 48052
// if array1 [ i ] <> array2 [ i ] then
48016: LD_VAR 0 1
48020: PUSH
48021: LD_VAR 0 4
48025: ARRAY
48026: PUSH
48027: LD_VAR 0 2
48031: PUSH
48032: LD_VAR 0 4
48036: ARRAY
48037: NONEQUAL
48038: IFFALSE 48050
// begin result := false ;
48040: LD_ADDR_VAR 0 3
48044: PUSH
48045: LD_INT 0
48047: ST_TO_ADDR
// break ;
48048: GO 48052
// end ;
48050: GO 48013
48052: POP
48053: POP
// end else
48054: GO 48064
// result := false ;
48056: LD_ADDR_VAR 0 3
48060: PUSH
48061: LD_INT 0
48063: ST_TO_ADDR
// end ;
48064: LD_VAR 0 3
48068: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48069: LD_INT 0
48071: PPUSH
48072: PPUSH
// if not array1 or not array2 then
48073: LD_VAR 0 1
48077: NOT
48078: PUSH
48079: LD_VAR 0 2
48083: NOT
48084: OR
48085: IFFALSE 48089
// exit ;
48087: GO 48153
// result := true ;
48089: LD_ADDR_VAR 0 3
48093: PUSH
48094: LD_INT 1
48096: ST_TO_ADDR
// for i = 1 to array1 do
48097: LD_ADDR_VAR 0 4
48101: PUSH
48102: DOUBLE
48103: LD_INT 1
48105: DEC
48106: ST_TO_ADDR
48107: LD_VAR 0 1
48111: PUSH
48112: FOR_TO
48113: IFFALSE 48151
// if array1 [ i ] <> array2 [ i ] then
48115: LD_VAR 0 1
48119: PUSH
48120: LD_VAR 0 4
48124: ARRAY
48125: PUSH
48126: LD_VAR 0 2
48130: PUSH
48131: LD_VAR 0 4
48135: ARRAY
48136: NONEQUAL
48137: IFFALSE 48149
// begin result := false ;
48139: LD_ADDR_VAR 0 3
48143: PUSH
48144: LD_INT 0
48146: ST_TO_ADDR
// break ;
48147: GO 48151
// end ;
48149: GO 48112
48151: POP
48152: POP
// end ;
48153: LD_VAR 0 3
48157: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48158: LD_INT 0
48160: PPUSH
48161: PPUSH
48162: PPUSH
// pom := GetBase ( fac ) ;
48163: LD_ADDR_VAR 0 5
48167: PUSH
48168: LD_VAR 0 1
48172: PPUSH
48173: CALL_OW 274
48177: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48178: LD_ADDR_VAR 0 4
48182: PUSH
48183: LD_VAR 0 2
48187: PUSH
48188: LD_INT 1
48190: ARRAY
48191: PPUSH
48192: LD_VAR 0 2
48196: PUSH
48197: LD_INT 2
48199: ARRAY
48200: PPUSH
48201: LD_VAR 0 2
48205: PUSH
48206: LD_INT 3
48208: ARRAY
48209: PPUSH
48210: LD_VAR 0 2
48214: PUSH
48215: LD_INT 4
48217: ARRAY
48218: PPUSH
48219: CALL_OW 449
48223: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48224: LD_ADDR_VAR 0 3
48228: PUSH
48229: LD_VAR 0 5
48233: PPUSH
48234: LD_INT 1
48236: PPUSH
48237: CALL_OW 275
48241: PUSH
48242: LD_VAR 0 4
48246: PUSH
48247: LD_INT 1
48249: ARRAY
48250: GREATEREQUAL
48251: PUSH
48252: LD_VAR 0 5
48256: PPUSH
48257: LD_INT 2
48259: PPUSH
48260: CALL_OW 275
48264: PUSH
48265: LD_VAR 0 4
48269: PUSH
48270: LD_INT 2
48272: ARRAY
48273: GREATEREQUAL
48274: AND
48275: PUSH
48276: LD_VAR 0 5
48280: PPUSH
48281: LD_INT 3
48283: PPUSH
48284: CALL_OW 275
48288: PUSH
48289: LD_VAR 0 4
48293: PUSH
48294: LD_INT 3
48296: ARRAY
48297: GREATEREQUAL
48298: AND
48299: ST_TO_ADDR
// end ;
48300: LD_VAR 0 3
48304: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48305: LD_INT 0
48307: PPUSH
48308: PPUSH
48309: PPUSH
48310: PPUSH
// pom := GetBase ( building ) ;
48311: LD_ADDR_VAR 0 3
48315: PUSH
48316: LD_VAR 0 1
48320: PPUSH
48321: CALL_OW 274
48325: ST_TO_ADDR
// if not pom then
48326: LD_VAR 0 3
48330: NOT
48331: IFFALSE 48335
// exit ;
48333: GO 48505
// btype := GetBType ( building ) ;
48335: LD_ADDR_VAR 0 5
48339: PUSH
48340: LD_VAR 0 1
48344: PPUSH
48345: CALL_OW 266
48349: ST_TO_ADDR
// if btype = b_armoury then
48350: LD_VAR 0 5
48354: PUSH
48355: LD_INT 4
48357: EQUAL
48358: IFFALSE 48368
// btype := b_barracks ;
48360: LD_ADDR_VAR 0 5
48364: PUSH
48365: LD_INT 5
48367: ST_TO_ADDR
// if btype = b_depot then
48368: LD_VAR 0 5
48372: PUSH
48373: LD_INT 0
48375: EQUAL
48376: IFFALSE 48386
// btype := b_warehouse ;
48378: LD_ADDR_VAR 0 5
48382: PUSH
48383: LD_INT 1
48385: ST_TO_ADDR
// if btype = b_workshop then
48386: LD_VAR 0 5
48390: PUSH
48391: LD_INT 2
48393: EQUAL
48394: IFFALSE 48404
// btype := b_factory ;
48396: LD_ADDR_VAR 0 5
48400: PUSH
48401: LD_INT 3
48403: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48404: LD_ADDR_VAR 0 4
48408: PUSH
48409: LD_VAR 0 5
48413: PPUSH
48414: LD_VAR 0 1
48418: PPUSH
48419: CALL_OW 248
48423: PPUSH
48424: CALL_OW 450
48428: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48429: LD_ADDR_VAR 0 2
48433: PUSH
48434: LD_VAR 0 3
48438: PPUSH
48439: LD_INT 1
48441: PPUSH
48442: CALL_OW 275
48446: PUSH
48447: LD_VAR 0 4
48451: PUSH
48452: LD_INT 1
48454: ARRAY
48455: GREATEREQUAL
48456: PUSH
48457: LD_VAR 0 3
48461: PPUSH
48462: LD_INT 2
48464: PPUSH
48465: CALL_OW 275
48469: PUSH
48470: LD_VAR 0 4
48474: PUSH
48475: LD_INT 2
48477: ARRAY
48478: GREATEREQUAL
48479: AND
48480: PUSH
48481: LD_VAR 0 3
48485: PPUSH
48486: LD_INT 3
48488: PPUSH
48489: CALL_OW 275
48493: PUSH
48494: LD_VAR 0 4
48498: PUSH
48499: LD_INT 3
48501: ARRAY
48502: GREATEREQUAL
48503: AND
48504: ST_TO_ADDR
// end ;
48505: LD_VAR 0 2
48509: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48510: LD_INT 0
48512: PPUSH
48513: PPUSH
48514: PPUSH
// pom := GetBase ( building ) ;
48515: LD_ADDR_VAR 0 4
48519: PUSH
48520: LD_VAR 0 1
48524: PPUSH
48525: CALL_OW 274
48529: ST_TO_ADDR
// if not pom then
48530: LD_VAR 0 4
48534: NOT
48535: IFFALSE 48539
// exit ;
48537: GO 48640
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48539: LD_ADDR_VAR 0 5
48543: PUSH
48544: LD_VAR 0 2
48548: PPUSH
48549: LD_VAR 0 1
48553: PPUSH
48554: CALL_OW 248
48558: PPUSH
48559: CALL_OW 450
48563: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48564: LD_ADDR_VAR 0 3
48568: PUSH
48569: LD_VAR 0 4
48573: PPUSH
48574: LD_INT 1
48576: PPUSH
48577: CALL_OW 275
48581: PUSH
48582: LD_VAR 0 5
48586: PUSH
48587: LD_INT 1
48589: ARRAY
48590: GREATEREQUAL
48591: PUSH
48592: LD_VAR 0 4
48596: PPUSH
48597: LD_INT 2
48599: PPUSH
48600: CALL_OW 275
48604: PUSH
48605: LD_VAR 0 5
48609: PUSH
48610: LD_INT 2
48612: ARRAY
48613: GREATEREQUAL
48614: AND
48615: PUSH
48616: LD_VAR 0 4
48620: PPUSH
48621: LD_INT 3
48623: PPUSH
48624: CALL_OW 275
48628: PUSH
48629: LD_VAR 0 5
48633: PUSH
48634: LD_INT 3
48636: ARRAY
48637: GREATEREQUAL
48638: AND
48639: ST_TO_ADDR
// end ;
48640: LD_VAR 0 3
48644: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48645: LD_INT 0
48647: PPUSH
48648: PPUSH
48649: PPUSH
48650: PPUSH
48651: PPUSH
48652: PPUSH
48653: PPUSH
48654: PPUSH
48655: PPUSH
48656: PPUSH
48657: PPUSH
// result := false ;
48658: LD_ADDR_VAR 0 8
48662: PUSH
48663: LD_INT 0
48665: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48666: LD_VAR 0 5
48670: NOT
48671: PUSH
48672: LD_VAR 0 1
48676: NOT
48677: OR
48678: PUSH
48679: LD_VAR 0 2
48683: NOT
48684: OR
48685: PUSH
48686: LD_VAR 0 3
48690: NOT
48691: OR
48692: IFFALSE 48696
// exit ;
48694: GO 49510
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48696: LD_ADDR_VAR 0 14
48700: PUSH
48701: LD_VAR 0 1
48705: PPUSH
48706: LD_VAR 0 2
48710: PPUSH
48711: LD_VAR 0 3
48715: PPUSH
48716: LD_VAR 0 4
48720: PPUSH
48721: LD_VAR 0 5
48725: PUSH
48726: LD_INT 1
48728: ARRAY
48729: PPUSH
48730: CALL_OW 248
48734: PPUSH
48735: LD_INT 0
48737: PPUSH
48738: CALL 50743 0 6
48742: ST_TO_ADDR
// if not hexes then
48743: LD_VAR 0 14
48747: NOT
48748: IFFALSE 48752
// exit ;
48750: GO 49510
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48752: LD_ADDR_VAR 0 17
48756: PUSH
48757: LD_VAR 0 5
48761: PPUSH
48762: LD_INT 22
48764: PUSH
48765: LD_VAR 0 13
48769: PPUSH
48770: CALL_OW 255
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: LD_INT 30
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 30
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: LIST
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PPUSH
48811: CALL_OW 72
48815: ST_TO_ADDR
// for i = 1 to hexes do
48816: LD_ADDR_VAR 0 9
48820: PUSH
48821: DOUBLE
48822: LD_INT 1
48824: DEC
48825: ST_TO_ADDR
48826: LD_VAR 0 14
48830: PUSH
48831: FOR_TO
48832: IFFALSE 49508
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48834: LD_ADDR_VAR 0 13
48838: PUSH
48839: LD_VAR 0 14
48843: PUSH
48844: LD_VAR 0 9
48848: ARRAY
48849: PUSH
48850: LD_INT 1
48852: ARRAY
48853: PPUSH
48854: LD_VAR 0 14
48858: PUSH
48859: LD_VAR 0 9
48863: ARRAY
48864: PUSH
48865: LD_INT 2
48867: ARRAY
48868: PPUSH
48869: CALL_OW 428
48873: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48874: LD_VAR 0 14
48878: PUSH
48879: LD_VAR 0 9
48883: ARRAY
48884: PUSH
48885: LD_INT 1
48887: ARRAY
48888: PPUSH
48889: LD_VAR 0 14
48893: PUSH
48894: LD_VAR 0 9
48898: ARRAY
48899: PUSH
48900: LD_INT 2
48902: ARRAY
48903: PPUSH
48904: CALL_OW 351
48908: PUSH
48909: LD_VAR 0 14
48913: PUSH
48914: LD_VAR 0 9
48918: ARRAY
48919: PUSH
48920: LD_INT 1
48922: ARRAY
48923: PPUSH
48924: LD_VAR 0 14
48928: PUSH
48929: LD_VAR 0 9
48933: ARRAY
48934: PUSH
48935: LD_INT 2
48937: ARRAY
48938: PPUSH
48939: CALL_OW 488
48943: NOT
48944: OR
48945: PUSH
48946: LD_VAR 0 13
48950: PPUSH
48951: CALL_OW 247
48955: PUSH
48956: LD_INT 3
48958: EQUAL
48959: OR
48960: IFFALSE 48966
// exit ;
48962: POP
48963: POP
48964: GO 49510
// if not tmp then
48966: LD_VAR 0 13
48970: NOT
48971: IFFALSE 48975
// continue ;
48973: GO 48831
// result := true ;
48975: LD_ADDR_VAR 0 8
48979: PUSH
48980: LD_INT 1
48982: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48983: LD_VAR 0 6
48987: PUSH
48988: LD_VAR 0 13
48992: PPUSH
48993: CALL_OW 247
48997: PUSH
48998: LD_INT 2
49000: EQUAL
49001: AND
49002: PUSH
49003: LD_VAR 0 13
49007: PPUSH
49008: CALL_OW 263
49012: PUSH
49013: LD_INT 1
49015: EQUAL
49016: AND
49017: IFFALSE 49181
// begin if IsDrivenBy ( tmp ) then
49019: LD_VAR 0 13
49023: PPUSH
49024: CALL_OW 311
49028: IFFALSE 49032
// continue ;
49030: GO 48831
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49032: LD_VAR 0 6
49036: PPUSH
49037: LD_INT 3
49039: PUSH
49040: LD_INT 60
49042: PUSH
49043: EMPTY
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 3
49052: PUSH
49053: LD_INT 55
49055: PUSH
49056: EMPTY
49057: LIST
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PPUSH
49067: CALL_OW 72
49071: IFFALSE 49179
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49073: LD_ADDR_VAR 0 18
49077: PUSH
49078: LD_VAR 0 6
49082: PPUSH
49083: LD_INT 3
49085: PUSH
49086: LD_INT 60
49088: PUSH
49089: EMPTY
49090: LIST
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 3
49098: PUSH
49099: LD_INT 55
49101: PUSH
49102: EMPTY
49103: LIST
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PPUSH
49113: CALL_OW 72
49117: PUSH
49118: LD_INT 1
49120: ARRAY
49121: ST_TO_ADDR
// if IsInUnit ( driver ) then
49122: LD_VAR 0 18
49126: PPUSH
49127: CALL_OW 310
49131: IFFALSE 49142
// ComExit ( driver ) ;
49133: LD_VAR 0 18
49137: PPUSH
49138: CALL 74523 0 1
// AddComEnterUnit ( driver , tmp ) ;
49142: LD_VAR 0 18
49146: PPUSH
49147: LD_VAR 0 13
49151: PPUSH
49152: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49156: LD_VAR 0 18
49160: PPUSH
49161: LD_VAR 0 7
49165: PPUSH
49166: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49170: LD_VAR 0 18
49174: PPUSH
49175: CALL_OW 181
// end ; continue ;
49179: GO 48831
// end ; if not cleaners or not tmp in cleaners then
49181: LD_VAR 0 6
49185: NOT
49186: PUSH
49187: LD_VAR 0 13
49191: PUSH
49192: LD_VAR 0 6
49196: IN
49197: NOT
49198: OR
49199: IFFALSE 49506
// begin if dep then
49201: LD_VAR 0 17
49205: IFFALSE 49341
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49207: LD_ADDR_VAR 0 16
49211: PUSH
49212: LD_VAR 0 17
49216: PUSH
49217: LD_INT 1
49219: ARRAY
49220: PPUSH
49221: CALL_OW 250
49225: PPUSH
49226: LD_VAR 0 17
49230: PUSH
49231: LD_INT 1
49233: ARRAY
49234: PPUSH
49235: CALL_OW 254
49239: PPUSH
49240: LD_INT 5
49242: PPUSH
49243: CALL_OW 272
49247: PUSH
49248: LD_VAR 0 17
49252: PUSH
49253: LD_INT 1
49255: ARRAY
49256: PPUSH
49257: CALL_OW 251
49261: PPUSH
49262: LD_VAR 0 17
49266: PUSH
49267: LD_INT 1
49269: ARRAY
49270: PPUSH
49271: CALL_OW 254
49275: PPUSH
49276: LD_INT 5
49278: PPUSH
49279: CALL_OW 273
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49288: LD_VAR 0 16
49292: PUSH
49293: LD_INT 1
49295: ARRAY
49296: PPUSH
49297: LD_VAR 0 16
49301: PUSH
49302: LD_INT 2
49304: ARRAY
49305: PPUSH
49306: CALL_OW 488
49310: IFFALSE 49341
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49312: LD_VAR 0 13
49316: PPUSH
49317: LD_VAR 0 16
49321: PUSH
49322: LD_INT 1
49324: ARRAY
49325: PPUSH
49326: LD_VAR 0 16
49330: PUSH
49331: LD_INT 2
49333: ARRAY
49334: PPUSH
49335: CALL_OW 111
// continue ;
49339: GO 48831
// end ; end ; r := GetDir ( tmp ) ;
49341: LD_ADDR_VAR 0 15
49345: PUSH
49346: LD_VAR 0 13
49350: PPUSH
49351: CALL_OW 254
49355: ST_TO_ADDR
// if r = 5 then
49356: LD_VAR 0 15
49360: PUSH
49361: LD_INT 5
49363: EQUAL
49364: IFFALSE 49374
// r := 0 ;
49366: LD_ADDR_VAR 0 15
49370: PUSH
49371: LD_INT 0
49373: ST_TO_ADDR
// for j = r to 5 do
49374: LD_ADDR_VAR 0 10
49378: PUSH
49379: DOUBLE
49380: LD_VAR 0 15
49384: DEC
49385: ST_TO_ADDR
49386: LD_INT 5
49388: PUSH
49389: FOR_TO
49390: IFFALSE 49504
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49392: LD_ADDR_VAR 0 11
49396: PUSH
49397: LD_VAR 0 13
49401: PPUSH
49402: CALL_OW 250
49406: PPUSH
49407: LD_VAR 0 10
49411: PPUSH
49412: LD_INT 2
49414: PPUSH
49415: CALL_OW 272
49419: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49420: LD_ADDR_VAR 0 12
49424: PUSH
49425: LD_VAR 0 13
49429: PPUSH
49430: CALL_OW 251
49434: PPUSH
49435: LD_VAR 0 10
49439: PPUSH
49440: LD_INT 2
49442: PPUSH
49443: CALL_OW 273
49447: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49448: LD_VAR 0 11
49452: PPUSH
49453: LD_VAR 0 12
49457: PPUSH
49458: CALL_OW 488
49462: PUSH
49463: LD_VAR 0 11
49467: PPUSH
49468: LD_VAR 0 12
49472: PPUSH
49473: CALL_OW 428
49477: NOT
49478: AND
49479: IFFALSE 49502
// begin ComMoveXY ( tmp , _x , _y ) ;
49481: LD_VAR 0 13
49485: PPUSH
49486: LD_VAR 0 11
49490: PPUSH
49491: LD_VAR 0 12
49495: PPUSH
49496: CALL_OW 111
// break ;
49500: GO 49504
// end ; end ;
49502: GO 49389
49504: POP
49505: POP
// end ; end ;
49506: GO 48831
49508: POP
49509: POP
// end ;
49510: LD_VAR 0 8
49514: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49515: LD_INT 0
49517: PPUSH
// result := true ;
49518: LD_ADDR_VAR 0 3
49522: PUSH
49523: LD_INT 1
49525: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49526: LD_VAR 0 2
49530: PUSH
49531: LD_INT 24
49533: DOUBLE
49534: EQUAL
49535: IFTRUE 49545
49537: LD_INT 33
49539: DOUBLE
49540: EQUAL
49541: IFTRUE 49545
49543: GO 49570
49545: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49546: LD_ADDR_VAR 0 3
49550: PUSH
49551: LD_INT 32
49553: PPUSH
49554: LD_VAR 0 1
49558: PPUSH
49559: CALL_OW 321
49563: PUSH
49564: LD_INT 2
49566: EQUAL
49567: ST_TO_ADDR
49568: GO 49886
49570: LD_INT 20
49572: DOUBLE
49573: EQUAL
49574: IFTRUE 49578
49576: GO 49603
49578: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49579: LD_ADDR_VAR 0 3
49583: PUSH
49584: LD_INT 6
49586: PPUSH
49587: LD_VAR 0 1
49591: PPUSH
49592: CALL_OW 321
49596: PUSH
49597: LD_INT 2
49599: EQUAL
49600: ST_TO_ADDR
49601: GO 49886
49603: LD_INT 22
49605: DOUBLE
49606: EQUAL
49607: IFTRUE 49617
49609: LD_INT 36
49611: DOUBLE
49612: EQUAL
49613: IFTRUE 49617
49615: GO 49642
49617: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49618: LD_ADDR_VAR 0 3
49622: PUSH
49623: LD_INT 15
49625: PPUSH
49626: LD_VAR 0 1
49630: PPUSH
49631: CALL_OW 321
49635: PUSH
49636: LD_INT 2
49638: EQUAL
49639: ST_TO_ADDR
49640: GO 49886
49642: LD_INT 30
49644: DOUBLE
49645: EQUAL
49646: IFTRUE 49650
49648: GO 49675
49650: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49651: LD_ADDR_VAR 0 3
49655: PUSH
49656: LD_INT 20
49658: PPUSH
49659: LD_VAR 0 1
49663: PPUSH
49664: CALL_OW 321
49668: PUSH
49669: LD_INT 2
49671: EQUAL
49672: ST_TO_ADDR
49673: GO 49886
49675: LD_INT 28
49677: DOUBLE
49678: EQUAL
49679: IFTRUE 49689
49681: LD_INT 21
49683: DOUBLE
49684: EQUAL
49685: IFTRUE 49689
49687: GO 49714
49689: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49690: LD_ADDR_VAR 0 3
49694: PUSH
49695: LD_INT 21
49697: PPUSH
49698: LD_VAR 0 1
49702: PPUSH
49703: CALL_OW 321
49707: PUSH
49708: LD_INT 2
49710: EQUAL
49711: ST_TO_ADDR
49712: GO 49886
49714: LD_INT 16
49716: DOUBLE
49717: EQUAL
49718: IFTRUE 49722
49720: GO 49747
49722: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49723: LD_ADDR_VAR 0 3
49727: PUSH
49728: LD_INT 84
49730: PPUSH
49731: LD_VAR 0 1
49735: PPUSH
49736: CALL_OW 321
49740: PUSH
49741: LD_INT 2
49743: EQUAL
49744: ST_TO_ADDR
49745: GO 49886
49747: LD_INT 19
49749: DOUBLE
49750: EQUAL
49751: IFTRUE 49761
49753: LD_INT 23
49755: DOUBLE
49756: EQUAL
49757: IFTRUE 49761
49759: GO 49786
49761: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49762: LD_ADDR_VAR 0 3
49766: PUSH
49767: LD_INT 83
49769: PPUSH
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 321
49779: PUSH
49780: LD_INT 2
49782: EQUAL
49783: ST_TO_ADDR
49784: GO 49886
49786: LD_INT 17
49788: DOUBLE
49789: EQUAL
49790: IFTRUE 49794
49792: GO 49819
49794: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49795: LD_ADDR_VAR 0 3
49799: PUSH
49800: LD_INT 39
49802: PPUSH
49803: LD_VAR 0 1
49807: PPUSH
49808: CALL_OW 321
49812: PUSH
49813: LD_INT 2
49815: EQUAL
49816: ST_TO_ADDR
49817: GO 49886
49819: LD_INT 18
49821: DOUBLE
49822: EQUAL
49823: IFTRUE 49827
49825: GO 49852
49827: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49828: LD_ADDR_VAR 0 3
49832: PUSH
49833: LD_INT 40
49835: PPUSH
49836: LD_VAR 0 1
49840: PPUSH
49841: CALL_OW 321
49845: PUSH
49846: LD_INT 2
49848: EQUAL
49849: ST_TO_ADDR
49850: GO 49886
49852: LD_INT 27
49854: DOUBLE
49855: EQUAL
49856: IFTRUE 49860
49858: GO 49885
49860: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49861: LD_ADDR_VAR 0 3
49865: PUSH
49866: LD_INT 35
49868: PPUSH
49869: LD_VAR 0 1
49873: PPUSH
49874: CALL_OW 321
49878: PUSH
49879: LD_INT 2
49881: EQUAL
49882: ST_TO_ADDR
49883: GO 49886
49885: POP
// end ;
49886: LD_VAR 0 3
49890: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49891: LD_INT 0
49893: PPUSH
49894: PPUSH
49895: PPUSH
49896: PPUSH
49897: PPUSH
49898: PPUSH
49899: PPUSH
49900: PPUSH
49901: PPUSH
49902: PPUSH
49903: PPUSH
// result := false ;
49904: LD_ADDR_VAR 0 6
49908: PUSH
49909: LD_INT 0
49911: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49912: LD_VAR 0 1
49916: NOT
49917: PUSH
49918: LD_VAR 0 1
49922: PPUSH
49923: CALL_OW 266
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: IN
49938: NOT
49939: OR
49940: PUSH
49941: LD_VAR 0 2
49945: NOT
49946: OR
49947: PUSH
49948: LD_VAR 0 5
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 3
49964: PUSH
49965: LD_INT 4
49967: PUSH
49968: LD_INT 5
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: IN
49979: NOT
49980: OR
49981: PUSH
49982: LD_VAR 0 3
49986: PPUSH
49987: LD_VAR 0 4
49991: PPUSH
49992: CALL_OW 488
49996: NOT
49997: OR
49998: IFFALSE 50002
// exit ;
50000: GO 50738
// side := GetSide ( depot ) ;
50002: LD_ADDR_VAR 0 9
50006: PUSH
50007: LD_VAR 0 1
50011: PPUSH
50012: CALL_OW 255
50016: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50017: LD_VAR 0 9
50021: PPUSH
50022: LD_VAR 0 2
50026: PPUSH
50027: CALL 49515 0 2
50031: NOT
50032: IFFALSE 50036
// exit ;
50034: GO 50738
// pom := GetBase ( depot ) ;
50036: LD_ADDR_VAR 0 10
50040: PUSH
50041: LD_VAR 0 1
50045: PPUSH
50046: CALL_OW 274
50050: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50051: LD_ADDR_VAR 0 11
50055: PUSH
50056: LD_VAR 0 2
50060: PPUSH
50061: LD_VAR 0 1
50065: PPUSH
50066: CALL_OW 248
50070: PPUSH
50071: CALL_OW 450
50075: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50076: LD_VAR 0 10
50080: PPUSH
50081: LD_INT 1
50083: PPUSH
50084: CALL_OW 275
50088: PUSH
50089: LD_VAR 0 11
50093: PUSH
50094: LD_INT 1
50096: ARRAY
50097: GREATEREQUAL
50098: PUSH
50099: LD_VAR 0 10
50103: PPUSH
50104: LD_INT 2
50106: PPUSH
50107: CALL_OW 275
50111: PUSH
50112: LD_VAR 0 11
50116: PUSH
50117: LD_INT 2
50119: ARRAY
50120: GREATEREQUAL
50121: AND
50122: PUSH
50123: LD_VAR 0 10
50127: PPUSH
50128: LD_INT 3
50130: PPUSH
50131: CALL_OW 275
50135: PUSH
50136: LD_VAR 0 11
50140: PUSH
50141: LD_INT 3
50143: ARRAY
50144: GREATEREQUAL
50145: AND
50146: NOT
50147: IFFALSE 50151
// exit ;
50149: GO 50738
// if GetBType ( depot ) = b_depot then
50151: LD_VAR 0 1
50155: PPUSH
50156: CALL_OW 266
50160: PUSH
50161: LD_INT 0
50163: EQUAL
50164: IFFALSE 50176
// dist := 28 else
50166: LD_ADDR_VAR 0 14
50170: PUSH
50171: LD_INT 28
50173: ST_TO_ADDR
50174: GO 50184
// dist := 36 ;
50176: LD_ADDR_VAR 0 14
50180: PUSH
50181: LD_INT 36
50183: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50184: LD_VAR 0 1
50188: PPUSH
50189: LD_VAR 0 3
50193: PPUSH
50194: LD_VAR 0 4
50198: PPUSH
50199: CALL_OW 297
50203: PUSH
50204: LD_VAR 0 14
50208: GREATER
50209: IFFALSE 50213
// exit ;
50211: GO 50738
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50213: LD_ADDR_VAR 0 12
50217: PUSH
50218: LD_VAR 0 2
50222: PPUSH
50223: LD_VAR 0 3
50227: PPUSH
50228: LD_VAR 0 4
50232: PPUSH
50233: LD_VAR 0 5
50237: PPUSH
50238: LD_VAR 0 1
50242: PPUSH
50243: CALL_OW 248
50247: PPUSH
50248: LD_INT 0
50250: PPUSH
50251: CALL 50743 0 6
50255: ST_TO_ADDR
// if not hexes then
50256: LD_VAR 0 12
50260: NOT
50261: IFFALSE 50265
// exit ;
50263: GO 50738
// hex := GetHexInfo ( x , y ) ;
50265: LD_ADDR_VAR 0 15
50269: PUSH
50270: LD_VAR 0 3
50274: PPUSH
50275: LD_VAR 0 4
50279: PPUSH
50280: CALL_OW 546
50284: ST_TO_ADDR
// if hex [ 1 ] then
50285: LD_VAR 0 15
50289: PUSH
50290: LD_INT 1
50292: ARRAY
50293: IFFALSE 50297
// exit ;
50295: GO 50738
// height := hex [ 2 ] ;
50297: LD_ADDR_VAR 0 13
50301: PUSH
50302: LD_VAR 0 15
50306: PUSH
50307: LD_INT 2
50309: ARRAY
50310: ST_TO_ADDR
// for i = 1 to hexes do
50311: LD_ADDR_VAR 0 7
50315: PUSH
50316: DOUBLE
50317: LD_INT 1
50319: DEC
50320: ST_TO_ADDR
50321: LD_VAR 0 12
50325: PUSH
50326: FOR_TO
50327: IFFALSE 50657
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50329: LD_VAR 0 12
50333: PUSH
50334: LD_VAR 0 7
50338: ARRAY
50339: PUSH
50340: LD_INT 1
50342: ARRAY
50343: PPUSH
50344: LD_VAR 0 12
50348: PUSH
50349: LD_VAR 0 7
50353: ARRAY
50354: PUSH
50355: LD_INT 2
50357: ARRAY
50358: PPUSH
50359: CALL_OW 488
50363: NOT
50364: PUSH
50365: LD_VAR 0 12
50369: PUSH
50370: LD_VAR 0 7
50374: ARRAY
50375: PUSH
50376: LD_INT 1
50378: ARRAY
50379: PPUSH
50380: LD_VAR 0 12
50384: PUSH
50385: LD_VAR 0 7
50389: ARRAY
50390: PUSH
50391: LD_INT 2
50393: ARRAY
50394: PPUSH
50395: CALL_OW 428
50399: PUSH
50400: LD_INT 0
50402: GREATER
50403: OR
50404: PUSH
50405: LD_VAR 0 12
50409: PUSH
50410: LD_VAR 0 7
50414: ARRAY
50415: PUSH
50416: LD_INT 1
50418: ARRAY
50419: PPUSH
50420: LD_VAR 0 12
50424: PUSH
50425: LD_VAR 0 7
50429: ARRAY
50430: PUSH
50431: LD_INT 2
50433: ARRAY
50434: PPUSH
50435: CALL_OW 351
50439: OR
50440: IFFALSE 50446
// exit ;
50442: POP
50443: POP
50444: GO 50738
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50446: LD_ADDR_VAR 0 8
50450: PUSH
50451: LD_VAR 0 12
50455: PUSH
50456: LD_VAR 0 7
50460: ARRAY
50461: PUSH
50462: LD_INT 1
50464: ARRAY
50465: PPUSH
50466: LD_VAR 0 12
50470: PUSH
50471: LD_VAR 0 7
50475: ARRAY
50476: PUSH
50477: LD_INT 2
50479: ARRAY
50480: PPUSH
50481: CALL_OW 546
50485: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50486: LD_VAR 0 8
50490: PUSH
50491: LD_INT 1
50493: ARRAY
50494: PUSH
50495: LD_VAR 0 8
50499: PUSH
50500: LD_INT 2
50502: ARRAY
50503: PUSH
50504: LD_VAR 0 13
50508: PUSH
50509: LD_INT 2
50511: PLUS
50512: GREATER
50513: OR
50514: PUSH
50515: LD_VAR 0 8
50519: PUSH
50520: LD_INT 2
50522: ARRAY
50523: PUSH
50524: LD_VAR 0 13
50528: PUSH
50529: LD_INT 2
50531: MINUS
50532: LESS
50533: OR
50534: PUSH
50535: LD_VAR 0 8
50539: PUSH
50540: LD_INT 3
50542: ARRAY
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 8
50549: PUSH
50550: LD_INT 9
50552: PUSH
50553: LD_INT 10
50555: PUSH
50556: LD_INT 11
50558: PUSH
50559: LD_INT 12
50561: PUSH
50562: LD_INT 13
50564: PUSH
50565: LD_INT 16
50567: PUSH
50568: LD_INT 17
50570: PUSH
50571: LD_INT 18
50573: PUSH
50574: LD_INT 19
50576: PUSH
50577: LD_INT 20
50579: PUSH
50580: LD_INT 21
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: IN
50598: NOT
50599: OR
50600: PUSH
50601: LD_VAR 0 8
50605: PUSH
50606: LD_INT 5
50608: ARRAY
50609: NOT
50610: OR
50611: PUSH
50612: LD_VAR 0 8
50616: PUSH
50617: LD_INT 6
50619: ARRAY
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: LD_INT 7
50629: PUSH
50630: LD_INT 9
50632: PUSH
50633: LD_INT 10
50635: PUSH
50636: LD_INT 11
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: IN
50647: NOT
50648: OR
50649: IFFALSE 50655
// exit ;
50651: POP
50652: POP
50653: GO 50738
// end ;
50655: GO 50326
50657: POP
50658: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50659: LD_VAR 0 9
50663: PPUSH
50664: LD_VAR 0 3
50668: PPUSH
50669: LD_VAR 0 4
50673: PPUSH
50674: LD_INT 20
50676: PPUSH
50677: CALL 42690 0 4
50681: PUSH
50682: LD_INT 4
50684: ARRAY
50685: IFFALSE 50689
// exit ;
50687: GO 50738
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50689: LD_VAR 0 2
50693: PUSH
50694: LD_INT 29
50696: PUSH
50697: LD_INT 30
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: IN
50704: PUSH
50705: LD_VAR 0 3
50709: PPUSH
50710: LD_VAR 0 4
50714: PPUSH
50715: LD_VAR 0 9
50719: PPUSH
50720: CALL_OW 440
50724: NOT
50725: AND
50726: IFFALSE 50730
// exit ;
50728: GO 50738
// result := true ;
50730: LD_ADDR_VAR 0 6
50734: PUSH
50735: LD_INT 1
50737: ST_TO_ADDR
// end ;
50738: LD_VAR 0 6
50742: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50743: LD_INT 0
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
50750: PPUSH
50751: PPUSH
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
50758: PPUSH
50759: PPUSH
50760: PPUSH
50761: PPUSH
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
50766: PPUSH
50767: PPUSH
50768: PPUSH
50769: PPUSH
50770: PPUSH
50771: PPUSH
50772: PPUSH
50773: PPUSH
50774: PPUSH
50775: PPUSH
50776: PPUSH
50777: PPUSH
50778: PPUSH
50779: PPUSH
50780: PPUSH
50781: PPUSH
50782: PPUSH
50783: PPUSH
50784: PPUSH
50785: PPUSH
50786: PPUSH
50787: PPUSH
50788: PPUSH
50789: PPUSH
50790: PPUSH
50791: PPUSH
50792: PPUSH
50793: PPUSH
50794: PPUSH
50795: PPUSH
50796: PPUSH
50797: PPUSH
50798: PPUSH
50799: PPUSH
50800: PPUSH
50801: PPUSH
50802: PPUSH
// result = [ ] ;
50803: LD_ADDR_VAR 0 7
50807: PUSH
50808: EMPTY
50809: ST_TO_ADDR
// temp_list = [ ] ;
50810: LD_ADDR_VAR 0 9
50814: PUSH
50815: EMPTY
50816: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50817: LD_VAR 0 4
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: LD_INT 3
50833: PUSH
50834: LD_INT 4
50836: PUSH
50837: LD_INT 5
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: IN
50848: NOT
50849: PUSH
50850: LD_VAR 0 1
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: IN
50865: PUSH
50866: LD_VAR 0 5
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: LD_INT 3
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: LIST
50884: IN
50885: NOT
50886: AND
50887: OR
50888: IFFALSE 50892
// exit ;
50890: GO 69283
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50892: LD_VAR 0 1
50896: PUSH
50897: LD_INT 6
50899: PUSH
50900: LD_INT 7
50902: PUSH
50903: LD_INT 8
50905: PUSH
50906: LD_INT 13
50908: PUSH
50909: LD_INT 12
50911: PUSH
50912: LD_INT 15
50914: PUSH
50915: LD_INT 11
50917: PUSH
50918: LD_INT 14
50920: PUSH
50921: LD_INT 10
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: IN
50935: IFFALSE 50945
// btype = b_lab ;
50937: LD_ADDR_VAR 0 1
50941: PUSH
50942: LD_INT 6
50944: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50945: LD_VAR 0 6
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: LIST
50963: IN
50964: NOT
50965: PUSH
50966: LD_VAR 0 1
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: LD_INT 6
50985: PUSH
50986: LD_INT 36
50988: PUSH
50989: LD_INT 4
50991: PUSH
50992: LD_INT 5
50994: PUSH
50995: LD_INT 31
50997: PUSH
50998: LD_INT 32
51000: PUSH
51001: LD_INT 33
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: IN
51017: NOT
51018: PUSH
51019: LD_VAR 0 6
51023: PUSH
51024: LD_INT 1
51026: EQUAL
51027: AND
51028: OR
51029: PUSH
51030: LD_VAR 0 1
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: IN
51045: NOT
51046: PUSH
51047: LD_VAR 0 6
51051: PUSH
51052: LD_INT 2
51054: EQUAL
51055: AND
51056: OR
51057: IFFALSE 51067
// mode = 0 ;
51059: LD_ADDR_VAR 0 6
51063: PUSH
51064: LD_INT 0
51066: ST_TO_ADDR
// case mode of 0 :
51067: LD_VAR 0 6
51071: PUSH
51072: LD_INT 0
51074: DOUBLE
51075: EQUAL
51076: IFTRUE 51080
51078: GO 62533
51080: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51081: LD_ADDR_VAR 0 11
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 3
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51274: LD_ADDR_VAR 0 12
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 3
51442: NEG
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51470: LD_ADDR_VAR 0 13
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: LD_INT 2
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: LD_INT 2
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: LD_INT 3
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 3
51629: NEG
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 3
51641: NEG
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51669: LD_ADDR_VAR 0 14
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 3
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 3
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51865: LD_ADDR_VAR 0 15
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 3
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 3
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52058: LD_ADDR_VAR 0 16
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52251: LD_ADDR_VAR 0 17
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 2
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 2
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: NEG
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52481: LD_ADDR_VAR 0 18
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52711: LD_ADDR_VAR 0 19
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: NEG
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 2
52910: NEG
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52941: LD_ADDR_VAR 0 20
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 2
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: LD_INT 2
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: LD_INT 2
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53171: LD_ADDR_VAR 0 21
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53401: LD_ADDR_VAR 0 22
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53631: LD_ADDR_VAR 0 23
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: LD_INT 3
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 2
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53911: LD_ADDR_VAR 0 24
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 2
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 2
54098: NEG
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: LD_INT 2
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 3
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 3
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54187: LD_ADDR_VAR 0 25
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 3
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 3
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: LD_INT 3
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 3
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54461: LD_ADDR_VAR 0 26
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: LD_INT 3
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54737: LD_ADDR_VAR 0 27
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 3
54982: NEG
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55017: LD_ADDR_VAR 0 28
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: NEG
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 3
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 3
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 3
55264: NEG
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55299: LD_ADDR_VAR 0 29
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: LD_INT 3
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 3
55543: NEG
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55578: LD_ADDR_VAR 0 30
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 2
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 3
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 3
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: LD_INT 3
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 3
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55856: LD_ADDR_VAR 0 31
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 3
56099: NEG
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56134: LD_ADDR_VAR 0 32
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 2
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 3
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: LD_INT 3
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 3
56377: NEG
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56412: LD_ADDR_VAR 0 33
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: LD_INT 2
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 3
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 3
56656: NEG
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56691: LD_ADDR_VAR 0 34
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 2
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 2
56847: NEG
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: NEG
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: LD_INT 3
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56971: LD_ADDR_VAR 0 35
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57083: LD_ADDR_VAR 0 36
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57195: LD_ADDR_VAR 0 37
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57307: LD_ADDR_VAR 0 38
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57419: LD_ADDR_VAR 0 39
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57531: LD_ADDR_VAR 0 40
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57643: LD_ADDR_VAR 0 41
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: NEG
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 2
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: LD_INT 3
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: LD_INT 2
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 2
57906: NEG
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 3
57928: NEG
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 3
57940: NEG
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 3
57952: NEG
57953: PUSH
57954: LD_INT 3
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57993: LD_ADDR_VAR 0 42
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: LD_INT 3
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: LD_INT 3
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 3
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: LD_INT 3
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: LD_INT 3
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 3
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 3
58302: NEG
58303: PUSH
58304: LD_INT 3
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58343: LD_ADDR_VAR 0 43
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: LD_INT 3
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: LD_INT 2
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 3
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: LD_INT 3
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: LD_INT 3
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58691: LD_ADDR_VAR 0 44
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 2
58846: NEG
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: LD_INT 3
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 3
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 3
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 3
58934: PUSH
58935: LD_INT 3
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: LD_INT 3
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 3
58965: NEG
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 3
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 3
58988: NEG
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 3
59000: NEG
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59041: LD_ADDR_VAR 0 45
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: LD_INT 3
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: LD_INT 3
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 3
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 3
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: LD_INT 3
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 2
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: LD_INT 3
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59391: LD_ADDR_VAR 0 46
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: LD_INT 2
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 2
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: NEG
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 2
59568: NEG
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: LD_INT 3
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 3
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 3
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 3
59687: NEG
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 3
59698: NEG
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59739: LD_ADDR_VAR 0 47
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59890: LD_ADDR_VAR 0 48
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: NEG
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: LD_INT 2
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60037: LD_ADDR_VAR 0 49
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 2
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 2
60149: PUSH
60150: LD_INT 2
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60181: LD_ADDR_VAR 0 50
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 2
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: LD_INT 2
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60325: LD_ADDR_VAR 0 51
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 1
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 2
60437: NEG
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60472: LD_ADDR_VAR 0 52
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 2
60576: NEG
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60623: LD_ADDR_VAR 0 53
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 1
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: LD_INT 2
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 2
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: LD_INT 2
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60853: LD_ADDR_VAR 0 54
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 2
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: LD_INT 2
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 2
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: NEG
61053: PUSH
61054: LD_INT 2
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61083: LD_ADDR_VAR 0 55
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 2
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: LD_INT 2
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 2
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: PUSH
61219: LD_INT 2
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: LD_INT 2
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 2
61270: NEG
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 2
61282: NEG
61283: PUSH
61284: LD_INT 2
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61313: LD_ADDR_VAR 0 56
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: LD_INT 1
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 1
61382: NEG
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: LD_INT 2
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: LD_INT 2
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 2
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 2
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 2
61448: PUSH
61449: LD_INT 2
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: LD_INT 2
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: LD_INT 2
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: NEG
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 2
61500: NEG
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61543: LD_ADDR_VAR 0 57
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 2
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: LD_INT 2
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: LD_INT 2
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: LD_INT 2
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 2
61730: NEG
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 2
61742: NEG
61743: PUSH
61744: LD_INT 2
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61773: LD_ADDR_VAR 0 58
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: LD_INT 2
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 2
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 2
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 2
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: LD_INT 2
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 2
61949: NEG
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 2
61960: NEG
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 2
61972: NEG
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62003: LD_ADDR_VAR 0 59
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: LD_INT 1
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62091: LD_ADDR_VAR 0 60
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 1
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62179: LD_ADDR_VAR 0 61
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62267: LD_ADDR_VAR 0 62
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62355: LD_ADDR_VAR 0 63
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: LD_INT 1
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: NEG
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62443: LD_ADDR_VAR 0 64
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: ST_TO_ADDR
// end ; 1 :
62531: GO 68428
62533: LD_INT 1
62535: DOUBLE
62536: EQUAL
62537: IFTRUE 62541
62539: GO 65164
62541: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62542: LD_ADDR_VAR 0 11
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: LD_INT 3
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 0
62561: PUSH
62562: LD_INT 3
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: LIST
62585: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62586: LD_ADDR_VAR 0 12
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 3
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 3
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: LIST
62626: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62627: LD_ADDR_VAR 0 13
62631: PUSH
62632: LD_INT 3
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 3
62644: PUSH
62645: LD_INT 3
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 2
62654: PUSH
62655: LD_INT 3
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: LIST
62666: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62667: LD_ADDR_VAR 0 14
62671: PUSH
62672: LD_INT 1
62674: PUSH
62675: LD_INT 3
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 3
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: LIST
62707: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62708: LD_ADDR_VAR 0 15
62712: PUSH
62713: LD_INT 2
62715: NEG
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 3
62726: NEG
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 3
62737: NEG
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: LIST
62751: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62752: LD_ADDR_VAR 0 16
62756: PUSH
62757: LD_INT 2
62759: NEG
62760: PUSH
62761: LD_INT 3
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: NEG
62772: PUSH
62773: LD_INT 2
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 3
62783: NEG
62784: PUSH
62785: LD_INT 3
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: LIST
62797: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62798: LD_ADDR_VAR 0 17
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: PUSH
62807: LD_INT 3
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: LD_INT 3
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 1
62828: PUSH
62829: LD_INT 2
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: LIST
62841: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62842: LD_ADDR_VAR 0 18
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 3
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 3
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: LIST
62882: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62883: LD_ADDR_VAR 0 19
62887: PUSH
62888: LD_INT 3
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 3
62900: PUSH
62901: LD_INT 3
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 2
62910: PUSH
62911: LD_INT 3
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: LIST
62922: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62923: LD_ADDR_VAR 0 20
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: LD_INT 3
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: NEG
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: LIST
62963: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62964: LD_ADDR_VAR 0 21
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 3
62982: NEG
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 3
62993: NEG
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: LIST
63007: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63008: LD_ADDR_VAR 0 22
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: LD_INT 3
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 3
63027: NEG
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 3
63039: NEG
63040: PUSH
63041: LD_INT 3
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63054: LD_ADDR_VAR 0 23
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: LD_INT 3
63064: NEG
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: LD_INT 4
63076: NEG
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: LD_INT 3
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: LIST
63097: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63098: LD_ADDR_VAR 0 24
63102: PUSH
63103: LD_INT 3
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 3
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 4
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: LIST
63138: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63139: LD_ADDR_VAR 0 25
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: LD_INT 3
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 4
63156: PUSH
63157: LD_INT 3
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 3
63166: PUSH
63167: LD_INT 4
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: LIST
63178: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63179: LD_ADDR_VAR 0 26
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: LD_INT 3
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: LD_INT 4
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: NEG
63207: PUSH
63208: LD_INT 3
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63220: LD_ADDR_VAR 0 27
63224: PUSH
63225: LD_INT 3
63227: NEG
63228: PUSH
63229: LD_INT 0
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 3
63238: NEG
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 4
63249: NEG
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: LIST
63263: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63264: LD_ADDR_VAR 0 28
63268: PUSH
63269: LD_INT 3
63271: NEG
63272: PUSH
63273: LD_INT 3
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 3
63283: NEG
63284: PUSH
63285: LD_INT 4
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 4
63295: NEG
63296: PUSH
63297: LD_INT 3
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: LIST
63309: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63310: LD_ADDR_VAR 0 29
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: LD_INT 3
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 3
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: LD_INT 2
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: NEG
63352: PUSH
63353: LD_INT 4
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: LD_INT 4
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: LD_INT 3
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: NEG
63386: PUSH
63387: LD_INT 5
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: LD_INT 5
63400: NEG
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: LD_INT 4
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 6
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 6
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: LD_INT 5
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63465: LD_ADDR_VAR 0 30
63469: PUSH
63470: LD_INT 2
63472: PUSH
63473: LD_INT 1
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 3
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 3
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 3
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 4
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 4
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 4
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 5
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 5
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 5
63565: PUSH
63566: LD_INT 1
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 6
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 6
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63608: LD_ADDR_VAR 0 31
63612: PUSH
63613: LD_INT 3
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 3
63625: PUSH
63626: LD_INT 3
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 2
63635: PUSH
63636: LD_INT 3
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 4
63645: PUSH
63646: LD_INT 3
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 4
63655: PUSH
63656: LD_INT 4
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 3
63665: PUSH
63666: LD_INT 4
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 5
63675: PUSH
63676: LD_INT 4
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 5
63685: PUSH
63686: LD_INT 5
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 4
63695: PUSH
63696: LD_INT 5
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 6
63705: PUSH
63706: LD_INT 5
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 6
63715: PUSH
63716: LD_INT 6
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 5
63725: PUSH
63726: LD_INT 6
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63747: LD_ADDR_VAR 0 32
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: LD_INT 3
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 3
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 1
63774: NEG
63775: PUSH
63776: LD_INT 2
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: LD_INT 4
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: LD_INT 4
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: LD_INT 3
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 1
63816: PUSH
63817: LD_INT 5
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: LD_INT 5
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 1
63836: NEG
63837: PUSH
63838: LD_INT 4
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 6
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: LD_INT 6
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: LD_INT 5
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63890: LD_ADDR_VAR 0 33
63894: PUSH
63895: LD_INT 2
63897: NEG
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 3
63908: NEG
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 3
63919: NEG
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 3
63931: NEG
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 4
63942: NEG
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 4
63953: NEG
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 4
63965: NEG
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 5
63976: NEG
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 5
63987: NEG
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 5
63999: NEG
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 6
64010: NEG
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 6
64021: NEG
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64045: LD_ADDR_VAR 0 34
64049: PUSH
64050: LD_INT 2
64052: NEG
64053: PUSH
64054: LD_INT 3
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 3
64064: NEG
64065: PUSH
64066: LD_INT 2
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 3
64076: NEG
64077: PUSH
64078: LD_INT 3
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 3
64088: NEG
64089: PUSH
64090: LD_INT 4
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 4
64100: NEG
64101: PUSH
64102: LD_INT 3
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 4
64112: NEG
64113: PUSH
64114: LD_INT 4
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 4
64124: NEG
64125: PUSH
64126: LD_INT 5
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 5
64136: NEG
64137: PUSH
64138: LD_INT 4
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 5
64148: NEG
64149: PUSH
64150: LD_INT 5
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 5
64160: NEG
64161: PUSH
64162: LD_INT 6
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 6
64172: NEG
64173: PUSH
64174: LD_INT 5
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 6
64184: NEG
64185: PUSH
64186: LD_INT 6
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64208: LD_ADDR_VAR 0 41
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: LD_INT 2
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: LD_INT 3
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: LD_INT 2
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: LIST
64251: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64252: LD_ADDR_VAR 0 42
64256: PUSH
64257: LD_INT 2
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 3
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: LIST
64292: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64293: LD_ADDR_VAR 0 43
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 3
64310: PUSH
64311: LD_INT 2
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: LD_INT 3
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: LIST
64332: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64333: LD_ADDR_VAR 0 44
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 2
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 1
64350: PUSH
64351: LD_INT 3
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: LD_INT 2
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: LIST
64373: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64374: LD_ADDR_VAR 0 45
64378: PUSH
64379: LD_INT 2
64381: NEG
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 2
64392: NEG
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 3
64403: NEG
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: LIST
64417: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64418: LD_ADDR_VAR 0 46
64422: PUSH
64423: LD_INT 2
64425: NEG
64426: PUSH
64427: LD_INT 2
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 2
64437: NEG
64438: PUSH
64439: LD_INT 3
64441: NEG
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 3
64449: NEG
64450: PUSH
64451: LD_INT 2
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: LIST
64463: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64464: LD_ADDR_VAR 0 47
64468: PUSH
64469: LD_INT 2
64471: NEG
64472: PUSH
64473: LD_INT 3
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 1
64483: NEG
64484: PUSH
64485: LD_INT 3
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64497: LD_ADDR_VAR 0 48
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: LD_INT 2
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: LD_INT 1
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64528: LD_ADDR_VAR 0 49
64532: PUSH
64533: LD_INT 3
64535: PUSH
64536: LD_INT 1
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 3
64545: PUSH
64546: LD_INT 2
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64557: LD_ADDR_VAR 0 50
64561: PUSH
64562: LD_INT 2
64564: PUSH
64565: LD_INT 3
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 1
64574: PUSH
64575: LD_INT 3
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64586: LD_ADDR_VAR 0 51
64590: PUSH
64591: LD_INT 1
64593: NEG
64594: PUSH
64595: LD_INT 2
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 2
64604: NEG
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64617: LD_ADDR_VAR 0 52
64621: PUSH
64622: LD_INT 3
64624: NEG
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 3
64636: NEG
64637: PUSH
64638: LD_INT 2
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64650: LD_ADDR_VAR 0 53
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: LD_INT 3
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: LD_INT 3
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: PUSH
64681: LD_INT 2
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: LIST
64693: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64694: LD_ADDR_VAR 0 54
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: LD_INT 1
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 3
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: LIST
64734: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64735: LD_ADDR_VAR 0 55
64739: PUSH
64740: LD_INT 3
64742: PUSH
64743: LD_INT 2
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 3
64752: PUSH
64753: LD_INT 3
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 2
64762: PUSH
64763: LD_INT 3
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: LIST
64774: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64775: LD_ADDR_VAR 0 56
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: LD_INT 3
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 3
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: NEG
64803: PUSH
64804: LD_INT 2
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64816: LD_ADDR_VAR 0 57
64820: PUSH
64821: LD_INT 2
64823: NEG
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 3
64834: NEG
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 3
64845: NEG
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: LIST
64859: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64860: LD_ADDR_VAR 0 58
64864: PUSH
64865: LD_INT 2
64867: NEG
64868: PUSH
64869: LD_INT 3
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 3
64879: NEG
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 3
64891: NEG
64892: PUSH
64893: LD_INT 3
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64906: LD_ADDR_VAR 0 59
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: LD_INT 2
64917: NEG
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: LD_INT 2
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 1
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: LIST
64949: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64950: LD_ADDR_VAR 0 60
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 2
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 2
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: LIST
64990: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64991: LD_ADDR_VAR 0 61
64995: PUSH
64996: LD_INT 2
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 2
65008: PUSH
65009: LD_INT 2
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: LD_INT 2
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: LIST
65030: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65031: LD_ADDR_VAR 0 62
65035: PUSH
65036: LD_INT 1
65038: PUSH
65039: LD_INT 2
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: LD_INT 2
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: LIST
65071: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65072: LD_ADDR_VAR 0 63
65076: PUSH
65077: LD_INT 1
65079: NEG
65080: PUSH
65081: LD_INT 1
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 2
65090: NEG
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 2
65101: NEG
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: LIST
65115: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65116: LD_ADDR_VAR 0 64
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: LD_INT 2
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 2
65135: NEG
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 2
65147: NEG
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: LIST
65161: ST_TO_ADDR
// end ; 2 :
65162: GO 68428
65164: LD_INT 2
65166: DOUBLE
65167: EQUAL
65168: IFTRUE 65172
65170: GO 68427
65172: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65173: LD_ADDR_VAR 0 29
65177: PUSH
65178: LD_INT 4
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 4
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 5
65201: PUSH
65202: LD_INT 0
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 5
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 4
65221: PUSH
65222: LD_INT 1
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 3
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 3
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 3
65252: PUSH
65253: LD_INT 2
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 5
65263: PUSH
65264: LD_INT 2
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 3
65273: PUSH
65274: LD_INT 3
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 3
65283: PUSH
65284: LD_INT 2
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 4
65293: PUSH
65294: LD_INT 3
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 4
65303: PUSH
65304: LD_INT 4
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 3
65313: PUSH
65314: LD_INT 4
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 2
65323: PUSH
65324: LD_INT 3
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 2
65333: PUSH
65334: LD_INT 2
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 4
65343: PUSH
65344: LD_INT 2
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 2
65353: PUSH
65354: LD_INT 4
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: LD_INT 4
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: LD_INT 3
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 1
65383: PUSH
65384: LD_INT 4
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 1
65393: PUSH
65394: LD_INT 5
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: LD_INT 5
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: NEG
65414: PUSH
65415: LD_INT 4
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 1
65424: NEG
65425: PUSH
65426: LD_INT 3
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 2
65435: PUSH
65436: LD_INT 5
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: LD_INT 3
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 3
65456: NEG
65457: PUSH
65458: LD_INT 0
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 3
65467: NEG
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 2
65479: NEG
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 2
65490: NEG
65491: PUSH
65492: LD_INT 1
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 3
65501: NEG
65502: PUSH
65503: LD_INT 1
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 4
65512: NEG
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 4
65523: NEG
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 4
65535: NEG
65536: PUSH
65537: LD_INT 2
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 2
65547: NEG
65548: PUSH
65549: LD_INT 2
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 4
65558: NEG
65559: PUSH
65560: LD_INT 4
65562: NEG
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 4
65570: NEG
65571: PUSH
65572: LD_INT 5
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 3
65582: NEG
65583: PUSH
65584: LD_INT 4
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 3
65594: NEG
65595: PUSH
65596: LD_INT 3
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 4
65606: NEG
65607: PUSH
65608: LD_INT 3
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 5
65618: NEG
65619: PUSH
65620: LD_INT 4
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 5
65630: NEG
65631: PUSH
65632: LD_INT 5
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 3
65642: NEG
65643: PUSH
65644: LD_INT 5
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 5
65654: NEG
65655: PUSH
65656: LD_INT 3
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65711: LD_ADDR_VAR 0 30
65715: PUSH
65716: LD_INT 4
65718: PUSH
65719: LD_INT 4
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 4
65728: PUSH
65729: LD_INT 3
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 5
65738: PUSH
65739: LD_INT 4
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 5
65748: PUSH
65749: LD_INT 5
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 4
65758: PUSH
65759: LD_INT 5
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 3
65768: PUSH
65769: LD_INT 4
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 3
65778: PUSH
65779: LD_INT 3
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 5
65788: PUSH
65789: LD_INT 3
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 3
65798: PUSH
65799: LD_INT 5
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 0
65808: PUSH
65809: LD_INT 3
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: LD_INT 2
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 1
65828: PUSH
65829: LD_INT 3
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: LD_INT 4
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: LD_INT 4
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 1
65858: NEG
65859: PUSH
65860: LD_INT 3
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 1
65869: NEG
65870: PUSH
65871: LD_INT 2
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 2
65880: PUSH
65881: LD_INT 4
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 2
65890: NEG
65891: PUSH
65892: LD_INT 2
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 4
65901: NEG
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 4
65912: NEG
65913: PUSH
65914: LD_INT 1
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 3
65924: NEG
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 3
65935: NEG
65936: PUSH
65937: LD_INT 1
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 4
65946: NEG
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 5
65957: NEG
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 5
65968: NEG
65969: PUSH
65970: LD_INT 1
65972: NEG
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 5
65980: NEG
65981: PUSH
65982: LD_INT 2
65984: NEG
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 3
65992: NEG
65993: PUSH
65994: LD_INT 2
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 3
66003: NEG
66004: PUSH
66005: LD_INT 3
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 3
66015: NEG
66016: PUSH
66017: LD_INT 4
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 2
66027: NEG
66028: PUSH
66029: LD_INT 3
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 2
66039: NEG
66040: PUSH
66041: LD_INT 2
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 3
66051: NEG
66052: PUSH
66053: LD_INT 2
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 4
66063: NEG
66064: PUSH
66065: LD_INT 3
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 4
66075: NEG
66076: PUSH
66077: LD_INT 4
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 2
66087: NEG
66088: PUSH
66089: LD_INT 4
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 4
66099: NEG
66100: PUSH
66101: LD_INT 2
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: LD_INT 4
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: LD_INT 5
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: LD_INT 4
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 1
66144: PUSH
66145: LD_INT 3
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: LD_INT 3
66158: NEG
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 1
66166: NEG
66167: PUSH
66168: LD_INT 4
66170: NEG
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 1
66178: NEG
66179: PUSH
66180: LD_INT 5
66182: NEG
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 2
66190: PUSH
66191: LD_INT 3
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 2
66201: NEG
66202: PUSH
66203: LD_INT 5
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66258: LD_ADDR_VAR 0 31
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: LD_INT 4
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: LD_INT 3
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 1
66285: PUSH
66286: LD_INT 4
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 1
66295: PUSH
66296: LD_INT 5
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: LD_INT 5
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: NEG
66316: PUSH
66317: LD_INT 4
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 1
66326: NEG
66327: PUSH
66328: LD_INT 3
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 2
66337: PUSH
66338: LD_INT 5
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 2
66347: NEG
66348: PUSH
66349: LD_INT 3
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 3
66358: NEG
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 3
66369: NEG
66370: PUSH
66371: LD_INT 1
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 2
66381: NEG
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 2
66392: NEG
66393: PUSH
66394: LD_INT 1
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 3
66403: NEG
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 4
66414: NEG
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 4
66425: NEG
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 4
66437: NEG
66438: PUSH
66439: LD_INT 2
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 2
66449: NEG
66450: PUSH
66451: LD_INT 2
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 4
66460: NEG
66461: PUSH
66462: LD_INT 4
66464: NEG
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 4
66472: NEG
66473: PUSH
66474: LD_INT 5
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 3
66484: NEG
66485: PUSH
66486: LD_INT 4
66488: NEG
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 3
66496: NEG
66497: PUSH
66498: LD_INT 3
66500: NEG
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 4
66508: NEG
66509: PUSH
66510: LD_INT 3
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 5
66520: NEG
66521: PUSH
66522: LD_INT 4
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 5
66532: NEG
66533: PUSH
66534: LD_INT 5
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 3
66544: NEG
66545: PUSH
66546: LD_INT 5
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 5
66556: NEG
66557: PUSH
66558: LD_INT 3
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 0
66568: PUSH
66569: LD_INT 3
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 0
66579: PUSH
66580: LD_INT 4
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: LD_INT 3
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: LD_INT 2
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: LD_INT 2
66615: NEG
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 1
66623: NEG
66624: PUSH
66625: LD_INT 3
66627: NEG
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 1
66635: NEG
66636: PUSH
66637: LD_INT 4
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 2
66647: PUSH
66648: LD_INT 2
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 2
66658: NEG
66659: PUSH
66660: LD_INT 4
66662: NEG
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 4
66670: PUSH
66671: LD_INT 0
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 4
66680: PUSH
66681: LD_INT 1
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 5
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 5
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 4
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 3
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 3
66731: PUSH
66732: LD_INT 1
66734: NEG
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 3
66742: PUSH
66743: LD_INT 2
66745: NEG
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 5
66753: PUSH
66754: LD_INT 2
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66808: LD_ADDR_VAR 0 32
66812: PUSH
66813: LD_INT 4
66815: NEG
66816: PUSH
66817: LD_INT 0
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 4
66826: NEG
66827: PUSH
66828: LD_INT 1
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 3
66838: NEG
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 3
66849: NEG
66850: PUSH
66851: LD_INT 1
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 4
66860: NEG
66861: PUSH
66862: LD_INT 1
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 5
66871: NEG
66872: PUSH
66873: LD_INT 0
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 5
66882: NEG
66883: PUSH
66884: LD_INT 1
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 5
66894: NEG
66895: PUSH
66896: LD_INT 2
66898: NEG
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 3
66906: NEG
66907: PUSH
66908: LD_INT 2
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 3
66917: NEG
66918: PUSH
66919: LD_INT 3
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 3
66929: NEG
66930: PUSH
66931: LD_INT 4
66933: NEG
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 2
66941: NEG
66942: PUSH
66943: LD_INT 3
66945: NEG
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 2
66953: NEG
66954: PUSH
66955: LD_INT 2
66957: NEG
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 3
66965: NEG
66966: PUSH
66967: LD_INT 2
66969: NEG
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 4
66977: NEG
66978: PUSH
66979: LD_INT 3
66981: NEG
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 4
66989: NEG
66990: PUSH
66991: LD_INT 4
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 2
67001: NEG
67002: PUSH
67003: LD_INT 4
67005: NEG
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 4
67013: NEG
67014: PUSH
67015: LD_INT 2
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 0
67025: PUSH
67026: LD_INT 4
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 0
67036: PUSH
67037: LD_INT 5
67039: NEG
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 1
67047: PUSH
67048: LD_INT 4
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: LD_INT 3
67061: NEG
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 0
67069: PUSH
67070: LD_INT 3
67072: NEG
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: LD_INT 4
67084: NEG
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 1
67092: NEG
67093: PUSH
67094: LD_INT 5
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 2
67104: PUSH
67105: LD_INT 3
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 2
67115: NEG
67116: PUSH
67117: LD_INT 5
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 3
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 3
67137: PUSH
67138: LD_INT 1
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 4
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 4
67158: PUSH
67159: LD_INT 1
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 3
67168: PUSH
67169: LD_INT 1
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 2
67178: PUSH
67179: LD_INT 0
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 2
67188: PUSH
67189: LD_INT 1
67191: NEG
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 2
67199: PUSH
67200: LD_INT 2
67202: NEG
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 4
67210: PUSH
67211: LD_INT 2
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 4
67220: PUSH
67221: LD_INT 4
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 4
67230: PUSH
67231: LD_INT 3
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 5
67240: PUSH
67241: LD_INT 4
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 5
67250: PUSH
67251: LD_INT 5
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 4
67260: PUSH
67261: LD_INT 5
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 3
67270: PUSH
67271: LD_INT 4
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 3
67280: PUSH
67281: LD_INT 3
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 5
67290: PUSH
67291: LD_INT 3
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 3
67300: PUSH
67301: LD_INT 5
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67355: LD_ADDR_VAR 0 33
67359: PUSH
67360: LD_INT 4
67362: NEG
67363: PUSH
67364: LD_INT 4
67366: NEG
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 4
67374: NEG
67375: PUSH
67376: LD_INT 5
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 3
67386: NEG
67387: PUSH
67388: LD_INT 4
67390: NEG
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 3
67398: NEG
67399: PUSH
67400: LD_INT 3
67402: NEG
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 4
67410: NEG
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 5
67422: NEG
67423: PUSH
67424: LD_INT 4
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 5
67434: NEG
67435: PUSH
67436: LD_INT 5
67438: NEG
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 3
67446: NEG
67447: PUSH
67448: LD_INT 5
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 5
67458: NEG
67459: PUSH
67460: LD_INT 3
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: LD_INT 3
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: LD_INT 4
67484: NEG
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 1
67492: PUSH
67493: LD_INT 3
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 1
67503: PUSH
67504: LD_INT 2
67506: NEG
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 0
67514: PUSH
67515: LD_INT 2
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 1
67525: NEG
67526: PUSH
67527: LD_INT 3
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 1
67537: NEG
67538: PUSH
67539: LD_INT 4
67541: NEG
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 2
67549: PUSH
67550: LD_INT 2
67552: NEG
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 2
67560: NEG
67561: PUSH
67562: LD_INT 4
67564: NEG
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 4
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 4
67582: PUSH
67583: LD_INT 1
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 5
67593: PUSH
67594: LD_INT 0
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 5
67603: PUSH
67604: LD_INT 1
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 4
67613: PUSH
67614: LD_INT 1
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 3
67623: PUSH
67624: LD_INT 0
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 3
67633: PUSH
67634: LD_INT 1
67636: NEG
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 3
67644: PUSH
67645: LD_INT 2
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 5
67655: PUSH
67656: LD_INT 2
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 3
67665: PUSH
67666: LD_INT 3
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 3
67675: PUSH
67676: LD_INT 2
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 4
67685: PUSH
67686: LD_INT 3
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 4
67695: PUSH
67696: LD_INT 4
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 3
67705: PUSH
67706: LD_INT 4
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 2
67715: PUSH
67716: LD_INT 3
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 2
67725: PUSH
67726: LD_INT 2
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 4
67735: PUSH
67736: LD_INT 2
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 2
67745: PUSH
67746: LD_INT 4
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 0
67755: PUSH
67756: LD_INT 4
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 0
67765: PUSH
67766: LD_INT 3
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 1
67775: PUSH
67776: LD_INT 4
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 1
67785: PUSH
67786: LD_INT 5
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 0
67795: PUSH
67796: LD_INT 5
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 1
67805: NEG
67806: PUSH
67807: LD_INT 4
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 1
67816: NEG
67817: PUSH
67818: LD_INT 3
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 2
67827: PUSH
67828: LD_INT 5
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 2
67837: NEG
67838: PUSH
67839: LD_INT 3
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67893: LD_ADDR_VAR 0 34
67897: PUSH
67898: LD_INT 0
67900: PUSH
67901: LD_INT 4
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 0
67911: PUSH
67912: LD_INT 5
67914: NEG
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 1
67922: PUSH
67923: LD_INT 4
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 1
67933: PUSH
67934: LD_INT 3
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: LD_INT 3
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 1
67955: NEG
67956: PUSH
67957: LD_INT 4
67959: NEG
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 1
67967: NEG
67968: PUSH
67969: LD_INT 5
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 2
67979: PUSH
67980: LD_INT 3
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 2
67990: NEG
67991: PUSH
67992: LD_INT 5
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 3
68002: PUSH
68003: LD_INT 0
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 3
68012: PUSH
68013: LD_INT 1
68015: NEG
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 4
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 4
68033: PUSH
68034: LD_INT 1
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 3
68043: PUSH
68044: LD_INT 1
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 2
68053: PUSH
68054: LD_INT 0
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 2
68063: PUSH
68064: LD_INT 1
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 2
68074: PUSH
68075: LD_INT 2
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 4
68085: PUSH
68086: LD_INT 2
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 4
68095: PUSH
68096: LD_INT 4
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 4
68105: PUSH
68106: LD_INT 3
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 5
68115: PUSH
68116: LD_INT 4
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 5
68125: PUSH
68126: LD_INT 5
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 4
68135: PUSH
68136: LD_INT 5
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 3
68145: PUSH
68146: LD_INT 4
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 3
68155: PUSH
68156: LD_INT 3
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 5
68165: PUSH
68166: LD_INT 3
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 3
68175: PUSH
68176: LD_INT 5
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: LD_INT 3
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 0
68195: PUSH
68196: LD_INT 2
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 1
68205: PUSH
68206: LD_INT 3
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 1
68215: PUSH
68216: LD_INT 4
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 0
68225: PUSH
68226: LD_INT 4
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 1
68235: NEG
68236: PUSH
68237: LD_INT 3
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 1
68246: NEG
68247: PUSH
68248: LD_INT 2
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 2
68257: PUSH
68258: LD_INT 4
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 2
68267: NEG
68268: PUSH
68269: LD_INT 2
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 4
68278: NEG
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 4
68289: NEG
68290: PUSH
68291: LD_INT 1
68293: NEG
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 3
68301: NEG
68302: PUSH
68303: LD_INT 0
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 3
68312: NEG
68313: PUSH
68314: LD_INT 1
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 4
68323: NEG
68324: PUSH
68325: LD_INT 1
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 5
68334: NEG
68335: PUSH
68336: LD_INT 0
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 5
68345: NEG
68346: PUSH
68347: LD_INT 1
68349: NEG
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 5
68357: NEG
68358: PUSH
68359: LD_INT 2
68361: NEG
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 3
68369: NEG
68370: PUSH
68371: LD_INT 2
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: ST_TO_ADDR
// end ; end ;
68425: GO 68428
68427: POP
// case btype of b_depot , b_warehouse :
68428: LD_VAR 0 1
68432: PUSH
68433: LD_INT 0
68435: DOUBLE
68436: EQUAL
68437: IFTRUE 68447
68439: LD_INT 1
68441: DOUBLE
68442: EQUAL
68443: IFTRUE 68447
68445: GO 68648
68447: POP
// case nation of nation_american :
68448: LD_VAR 0 5
68452: PUSH
68453: LD_INT 1
68455: DOUBLE
68456: EQUAL
68457: IFTRUE 68461
68459: GO 68517
68461: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68462: LD_ADDR_VAR 0 9
68466: PUSH
68467: LD_VAR 0 11
68471: PUSH
68472: LD_VAR 0 12
68476: PUSH
68477: LD_VAR 0 13
68481: PUSH
68482: LD_VAR 0 14
68486: PUSH
68487: LD_VAR 0 15
68491: PUSH
68492: LD_VAR 0 16
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: PUSH
68505: LD_VAR 0 4
68509: PUSH
68510: LD_INT 1
68512: PLUS
68513: ARRAY
68514: ST_TO_ADDR
68515: GO 68646
68517: LD_INT 2
68519: DOUBLE
68520: EQUAL
68521: IFTRUE 68525
68523: GO 68581
68525: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68526: LD_ADDR_VAR 0 9
68530: PUSH
68531: LD_VAR 0 17
68535: PUSH
68536: LD_VAR 0 18
68540: PUSH
68541: LD_VAR 0 19
68545: PUSH
68546: LD_VAR 0 20
68550: PUSH
68551: LD_VAR 0 21
68555: PUSH
68556: LD_VAR 0 22
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: PUSH
68569: LD_VAR 0 4
68573: PUSH
68574: LD_INT 1
68576: PLUS
68577: ARRAY
68578: ST_TO_ADDR
68579: GO 68646
68581: LD_INT 3
68583: DOUBLE
68584: EQUAL
68585: IFTRUE 68589
68587: GO 68645
68589: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68590: LD_ADDR_VAR 0 9
68594: PUSH
68595: LD_VAR 0 23
68599: PUSH
68600: LD_VAR 0 24
68604: PUSH
68605: LD_VAR 0 25
68609: PUSH
68610: LD_VAR 0 26
68614: PUSH
68615: LD_VAR 0 27
68619: PUSH
68620: LD_VAR 0 28
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: PUSH
68633: LD_VAR 0 4
68637: PUSH
68638: LD_INT 1
68640: PLUS
68641: ARRAY
68642: ST_TO_ADDR
68643: GO 68646
68645: POP
68646: GO 69201
68648: LD_INT 2
68650: DOUBLE
68651: EQUAL
68652: IFTRUE 68662
68654: LD_INT 3
68656: DOUBLE
68657: EQUAL
68658: IFTRUE 68662
68660: GO 68718
68662: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68663: LD_ADDR_VAR 0 9
68667: PUSH
68668: LD_VAR 0 29
68672: PUSH
68673: LD_VAR 0 30
68677: PUSH
68678: LD_VAR 0 31
68682: PUSH
68683: LD_VAR 0 32
68687: PUSH
68688: LD_VAR 0 33
68692: PUSH
68693: LD_VAR 0 34
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: PUSH
68706: LD_VAR 0 4
68710: PUSH
68711: LD_INT 1
68713: PLUS
68714: ARRAY
68715: ST_TO_ADDR
68716: GO 69201
68718: LD_INT 16
68720: DOUBLE
68721: EQUAL
68722: IFTRUE 68780
68724: LD_INT 17
68726: DOUBLE
68727: EQUAL
68728: IFTRUE 68780
68730: LD_INT 18
68732: DOUBLE
68733: EQUAL
68734: IFTRUE 68780
68736: LD_INT 19
68738: DOUBLE
68739: EQUAL
68740: IFTRUE 68780
68742: LD_INT 22
68744: DOUBLE
68745: EQUAL
68746: IFTRUE 68780
68748: LD_INT 20
68750: DOUBLE
68751: EQUAL
68752: IFTRUE 68780
68754: LD_INT 21
68756: DOUBLE
68757: EQUAL
68758: IFTRUE 68780
68760: LD_INT 23
68762: DOUBLE
68763: EQUAL
68764: IFTRUE 68780
68766: LD_INT 24
68768: DOUBLE
68769: EQUAL
68770: IFTRUE 68780
68772: LD_INT 25
68774: DOUBLE
68775: EQUAL
68776: IFTRUE 68780
68778: GO 68836
68780: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68781: LD_ADDR_VAR 0 9
68785: PUSH
68786: LD_VAR 0 35
68790: PUSH
68791: LD_VAR 0 36
68795: PUSH
68796: LD_VAR 0 37
68800: PUSH
68801: LD_VAR 0 38
68805: PUSH
68806: LD_VAR 0 39
68810: PUSH
68811: LD_VAR 0 40
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: PUSH
68824: LD_VAR 0 4
68828: PUSH
68829: LD_INT 1
68831: PLUS
68832: ARRAY
68833: ST_TO_ADDR
68834: GO 69201
68836: LD_INT 6
68838: DOUBLE
68839: EQUAL
68840: IFTRUE 68892
68842: LD_INT 7
68844: DOUBLE
68845: EQUAL
68846: IFTRUE 68892
68848: LD_INT 8
68850: DOUBLE
68851: EQUAL
68852: IFTRUE 68892
68854: LD_INT 13
68856: DOUBLE
68857: EQUAL
68858: IFTRUE 68892
68860: LD_INT 12
68862: DOUBLE
68863: EQUAL
68864: IFTRUE 68892
68866: LD_INT 15
68868: DOUBLE
68869: EQUAL
68870: IFTRUE 68892
68872: LD_INT 11
68874: DOUBLE
68875: EQUAL
68876: IFTRUE 68892
68878: LD_INT 14
68880: DOUBLE
68881: EQUAL
68882: IFTRUE 68892
68884: LD_INT 10
68886: DOUBLE
68887: EQUAL
68888: IFTRUE 68892
68890: GO 68948
68892: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68893: LD_ADDR_VAR 0 9
68897: PUSH
68898: LD_VAR 0 41
68902: PUSH
68903: LD_VAR 0 42
68907: PUSH
68908: LD_VAR 0 43
68912: PUSH
68913: LD_VAR 0 44
68917: PUSH
68918: LD_VAR 0 45
68922: PUSH
68923: LD_VAR 0 46
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: PUSH
68936: LD_VAR 0 4
68940: PUSH
68941: LD_INT 1
68943: PLUS
68944: ARRAY
68945: ST_TO_ADDR
68946: GO 69201
68948: LD_INT 36
68950: DOUBLE
68951: EQUAL
68952: IFTRUE 68956
68954: GO 69012
68956: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68957: LD_ADDR_VAR 0 9
68961: PUSH
68962: LD_VAR 0 47
68966: PUSH
68967: LD_VAR 0 48
68971: PUSH
68972: LD_VAR 0 49
68976: PUSH
68977: LD_VAR 0 50
68981: PUSH
68982: LD_VAR 0 51
68986: PUSH
68987: LD_VAR 0 52
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: PUSH
69000: LD_VAR 0 4
69004: PUSH
69005: LD_INT 1
69007: PLUS
69008: ARRAY
69009: ST_TO_ADDR
69010: GO 69201
69012: LD_INT 4
69014: DOUBLE
69015: EQUAL
69016: IFTRUE 69038
69018: LD_INT 5
69020: DOUBLE
69021: EQUAL
69022: IFTRUE 69038
69024: LD_INT 34
69026: DOUBLE
69027: EQUAL
69028: IFTRUE 69038
69030: LD_INT 37
69032: DOUBLE
69033: EQUAL
69034: IFTRUE 69038
69036: GO 69094
69038: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69039: LD_ADDR_VAR 0 9
69043: PUSH
69044: LD_VAR 0 53
69048: PUSH
69049: LD_VAR 0 54
69053: PUSH
69054: LD_VAR 0 55
69058: PUSH
69059: LD_VAR 0 56
69063: PUSH
69064: LD_VAR 0 57
69068: PUSH
69069: LD_VAR 0 58
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: PUSH
69082: LD_VAR 0 4
69086: PUSH
69087: LD_INT 1
69089: PLUS
69090: ARRAY
69091: ST_TO_ADDR
69092: GO 69201
69094: LD_INT 31
69096: DOUBLE
69097: EQUAL
69098: IFTRUE 69144
69100: LD_INT 32
69102: DOUBLE
69103: EQUAL
69104: IFTRUE 69144
69106: LD_INT 33
69108: DOUBLE
69109: EQUAL
69110: IFTRUE 69144
69112: LD_INT 27
69114: DOUBLE
69115: EQUAL
69116: IFTRUE 69144
69118: LD_INT 26
69120: DOUBLE
69121: EQUAL
69122: IFTRUE 69144
69124: LD_INT 28
69126: DOUBLE
69127: EQUAL
69128: IFTRUE 69144
69130: LD_INT 29
69132: DOUBLE
69133: EQUAL
69134: IFTRUE 69144
69136: LD_INT 30
69138: DOUBLE
69139: EQUAL
69140: IFTRUE 69144
69142: GO 69200
69144: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69145: LD_ADDR_VAR 0 9
69149: PUSH
69150: LD_VAR 0 59
69154: PUSH
69155: LD_VAR 0 60
69159: PUSH
69160: LD_VAR 0 61
69164: PUSH
69165: LD_VAR 0 62
69169: PUSH
69170: LD_VAR 0 63
69174: PUSH
69175: LD_VAR 0 64
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: PUSH
69188: LD_VAR 0 4
69192: PUSH
69193: LD_INT 1
69195: PLUS
69196: ARRAY
69197: ST_TO_ADDR
69198: GO 69201
69200: POP
// temp_list2 = [ ] ;
69201: LD_ADDR_VAR 0 10
69205: PUSH
69206: EMPTY
69207: ST_TO_ADDR
// for i in temp_list do
69208: LD_ADDR_VAR 0 8
69212: PUSH
69213: LD_VAR 0 9
69217: PUSH
69218: FOR_IN
69219: IFFALSE 69271
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69221: LD_ADDR_VAR 0 10
69225: PUSH
69226: LD_VAR 0 10
69230: PUSH
69231: LD_VAR 0 8
69235: PUSH
69236: LD_INT 1
69238: ARRAY
69239: PUSH
69240: LD_VAR 0 2
69244: PLUS
69245: PUSH
69246: LD_VAR 0 8
69250: PUSH
69251: LD_INT 2
69253: ARRAY
69254: PUSH
69255: LD_VAR 0 3
69259: PLUS
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: EMPTY
69266: LIST
69267: ADD
69268: ST_TO_ADDR
69269: GO 69218
69271: POP
69272: POP
// result = temp_list2 ;
69273: LD_ADDR_VAR 0 7
69277: PUSH
69278: LD_VAR 0 10
69282: ST_TO_ADDR
// end ;
69283: LD_VAR 0 7
69287: RET
// export function EnemyInRange ( unit , dist ) ; begin
69288: LD_INT 0
69290: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69291: LD_ADDR_VAR 0 3
69295: PUSH
69296: LD_VAR 0 1
69300: PPUSH
69301: CALL_OW 255
69305: PPUSH
69306: LD_VAR 0 1
69310: PPUSH
69311: CALL_OW 250
69315: PPUSH
69316: LD_VAR 0 1
69320: PPUSH
69321: CALL_OW 251
69325: PPUSH
69326: LD_VAR 0 2
69330: PPUSH
69331: CALL 42690 0 4
69335: PUSH
69336: LD_INT 4
69338: ARRAY
69339: ST_TO_ADDR
// end ;
69340: LD_VAR 0 3
69344: RET
// export function PlayerSeeMe ( unit ) ; begin
69345: LD_INT 0
69347: PPUSH
// result := See ( your_side , unit ) ;
69348: LD_ADDR_VAR 0 2
69352: PUSH
69353: LD_OWVAR 2
69357: PPUSH
69358: LD_VAR 0 1
69362: PPUSH
69363: CALL_OW 292
69367: ST_TO_ADDR
// end ;
69368: LD_VAR 0 2
69372: RET
// export function ReverseDir ( unit ) ; begin
69373: LD_INT 0
69375: PPUSH
// if not unit then
69376: LD_VAR 0 1
69380: NOT
69381: IFFALSE 69385
// exit ;
69383: GO 69408
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69385: LD_ADDR_VAR 0 2
69389: PUSH
69390: LD_VAR 0 1
69394: PPUSH
69395: CALL_OW 254
69399: PUSH
69400: LD_INT 3
69402: PLUS
69403: PUSH
69404: LD_INT 6
69406: MOD
69407: ST_TO_ADDR
// end ;
69408: LD_VAR 0 2
69412: RET
// export function ReverseArray ( array ) ; var i ; begin
69413: LD_INT 0
69415: PPUSH
69416: PPUSH
// if not array then
69417: LD_VAR 0 1
69421: NOT
69422: IFFALSE 69426
// exit ;
69424: GO 69481
// result := [ ] ;
69426: LD_ADDR_VAR 0 2
69430: PUSH
69431: EMPTY
69432: ST_TO_ADDR
// for i := array downto 1 do
69433: LD_ADDR_VAR 0 3
69437: PUSH
69438: DOUBLE
69439: LD_VAR 0 1
69443: INC
69444: ST_TO_ADDR
69445: LD_INT 1
69447: PUSH
69448: FOR_DOWNTO
69449: IFFALSE 69479
// result := Join ( result , array [ i ] ) ;
69451: LD_ADDR_VAR 0 2
69455: PUSH
69456: LD_VAR 0 2
69460: PPUSH
69461: LD_VAR 0 1
69465: PUSH
69466: LD_VAR 0 3
69470: ARRAY
69471: PPUSH
69472: CALL 74125 0 2
69476: ST_TO_ADDR
69477: GO 69448
69479: POP
69480: POP
// end ;
69481: LD_VAR 0 2
69485: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69486: LD_INT 0
69488: PPUSH
69489: PPUSH
69490: PPUSH
69491: PPUSH
69492: PPUSH
69493: PPUSH
// if not unit or not hexes then
69494: LD_VAR 0 1
69498: NOT
69499: PUSH
69500: LD_VAR 0 2
69504: NOT
69505: OR
69506: IFFALSE 69510
// exit ;
69508: GO 69633
// dist := 9999 ;
69510: LD_ADDR_VAR 0 5
69514: PUSH
69515: LD_INT 9999
69517: ST_TO_ADDR
// for i = 1 to hexes do
69518: LD_ADDR_VAR 0 4
69522: PUSH
69523: DOUBLE
69524: LD_INT 1
69526: DEC
69527: ST_TO_ADDR
69528: LD_VAR 0 2
69532: PUSH
69533: FOR_TO
69534: IFFALSE 69621
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69536: LD_ADDR_VAR 0 6
69540: PUSH
69541: LD_VAR 0 1
69545: PPUSH
69546: LD_VAR 0 2
69550: PUSH
69551: LD_VAR 0 4
69555: ARRAY
69556: PUSH
69557: LD_INT 1
69559: ARRAY
69560: PPUSH
69561: LD_VAR 0 2
69565: PUSH
69566: LD_VAR 0 4
69570: ARRAY
69571: PUSH
69572: LD_INT 2
69574: ARRAY
69575: PPUSH
69576: CALL_OW 297
69580: ST_TO_ADDR
// if tdist < dist then
69581: LD_VAR 0 6
69585: PUSH
69586: LD_VAR 0 5
69590: LESS
69591: IFFALSE 69619
// begin hex := hexes [ i ] ;
69593: LD_ADDR_VAR 0 8
69597: PUSH
69598: LD_VAR 0 2
69602: PUSH
69603: LD_VAR 0 4
69607: ARRAY
69608: ST_TO_ADDR
// dist := tdist ;
69609: LD_ADDR_VAR 0 5
69613: PUSH
69614: LD_VAR 0 6
69618: ST_TO_ADDR
// end ; end ;
69619: GO 69533
69621: POP
69622: POP
// result := hex ;
69623: LD_ADDR_VAR 0 3
69627: PUSH
69628: LD_VAR 0 8
69632: ST_TO_ADDR
// end ;
69633: LD_VAR 0 3
69637: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69638: LD_INT 0
69640: PPUSH
69641: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69642: LD_VAR 0 1
69646: NOT
69647: PUSH
69648: LD_VAR 0 1
69652: PUSH
69653: LD_INT 21
69655: PUSH
69656: LD_INT 2
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 23
69665: PUSH
69666: LD_INT 2
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PPUSH
69677: CALL_OW 69
69681: IN
69682: NOT
69683: OR
69684: IFFALSE 69688
// exit ;
69686: GO 69735
// for i = 1 to 3 do
69688: LD_ADDR_VAR 0 3
69692: PUSH
69693: DOUBLE
69694: LD_INT 1
69696: DEC
69697: ST_TO_ADDR
69698: LD_INT 3
69700: PUSH
69701: FOR_TO
69702: IFFALSE 69733
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69704: LD_VAR 0 1
69708: PPUSH
69709: CALL_OW 250
69713: PPUSH
69714: LD_VAR 0 1
69718: PPUSH
69719: CALL_OW 251
69723: PPUSH
69724: LD_INT 1
69726: PPUSH
69727: CALL_OW 453
69731: GO 69701
69733: POP
69734: POP
// end ;
69735: LD_VAR 0 2
69739: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69740: LD_INT 0
69742: PPUSH
69743: PPUSH
69744: PPUSH
69745: PPUSH
69746: PPUSH
69747: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69748: LD_VAR 0 1
69752: NOT
69753: PUSH
69754: LD_VAR 0 2
69758: NOT
69759: OR
69760: PUSH
69761: LD_VAR 0 1
69765: PPUSH
69766: CALL_OW 314
69770: OR
69771: IFFALSE 69775
// exit ;
69773: GO 70242
// if GetLives ( i ) < 250 then
69775: LD_VAR 0 4
69779: PPUSH
69780: CALL_OW 256
69784: PUSH
69785: LD_INT 250
69787: LESS
69788: IFFALSE 69801
// begin ComAutodestruct ( i ) ;
69790: LD_VAR 0 4
69794: PPUSH
69795: CALL 69638 0 1
// exit ;
69799: GO 70242
// end ; x := GetX ( enemy_unit ) ;
69801: LD_ADDR_VAR 0 7
69805: PUSH
69806: LD_VAR 0 2
69810: PPUSH
69811: CALL_OW 250
69815: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69816: LD_ADDR_VAR 0 8
69820: PUSH
69821: LD_VAR 0 2
69825: PPUSH
69826: CALL_OW 251
69830: ST_TO_ADDR
// if not x or not y then
69831: LD_VAR 0 7
69835: NOT
69836: PUSH
69837: LD_VAR 0 8
69841: NOT
69842: OR
69843: IFFALSE 69847
// exit ;
69845: GO 70242
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69847: LD_ADDR_VAR 0 6
69851: PUSH
69852: LD_VAR 0 7
69856: PPUSH
69857: LD_INT 0
69859: PPUSH
69860: LD_INT 4
69862: PPUSH
69863: CALL_OW 272
69867: PUSH
69868: LD_VAR 0 8
69872: PPUSH
69873: LD_INT 0
69875: PPUSH
69876: LD_INT 4
69878: PPUSH
69879: CALL_OW 273
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_VAR 0 7
69892: PPUSH
69893: LD_INT 1
69895: PPUSH
69896: LD_INT 4
69898: PPUSH
69899: CALL_OW 272
69903: PUSH
69904: LD_VAR 0 8
69908: PPUSH
69909: LD_INT 1
69911: PPUSH
69912: LD_INT 4
69914: PPUSH
69915: CALL_OW 273
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_VAR 0 7
69928: PPUSH
69929: LD_INT 2
69931: PPUSH
69932: LD_INT 4
69934: PPUSH
69935: CALL_OW 272
69939: PUSH
69940: LD_VAR 0 8
69944: PPUSH
69945: LD_INT 2
69947: PPUSH
69948: LD_INT 4
69950: PPUSH
69951: CALL_OW 273
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_VAR 0 7
69964: PPUSH
69965: LD_INT 3
69967: PPUSH
69968: LD_INT 4
69970: PPUSH
69971: CALL_OW 272
69975: PUSH
69976: LD_VAR 0 8
69980: PPUSH
69981: LD_INT 3
69983: PPUSH
69984: LD_INT 4
69986: PPUSH
69987: CALL_OW 273
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_VAR 0 7
70000: PPUSH
70001: LD_INT 4
70003: PPUSH
70004: LD_INT 4
70006: PPUSH
70007: CALL_OW 272
70011: PUSH
70012: LD_VAR 0 8
70016: PPUSH
70017: LD_INT 4
70019: PPUSH
70020: LD_INT 4
70022: PPUSH
70023: CALL_OW 273
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_VAR 0 7
70036: PPUSH
70037: LD_INT 5
70039: PPUSH
70040: LD_INT 4
70042: PPUSH
70043: CALL_OW 272
70047: PUSH
70048: LD_VAR 0 8
70052: PPUSH
70053: LD_INT 5
70055: PPUSH
70056: LD_INT 4
70058: PPUSH
70059: CALL_OW 273
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: ST_TO_ADDR
// for i = tmp downto 1 do
70076: LD_ADDR_VAR 0 4
70080: PUSH
70081: DOUBLE
70082: LD_VAR 0 6
70086: INC
70087: ST_TO_ADDR
70088: LD_INT 1
70090: PUSH
70091: FOR_DOWNTO
70092: IFFALSE 70193
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70094: LD_VAR 0 6
70098: PUSH
70099: LD_VAR 0 4
70103: ARRAY
70104: PUSH
70105: LD_INT 1
70107: ARRAY
70108: PPUSH
70109: LD_VAR 0 6
70113: PUSH
70114: LD_VAR 0 4
70118: ARRAY
70119: PUSH
70120: LD_INT 2
70122: ARRAY
70123: PPUSH
70124: CALL_OW 488
70128: NOT
70129: PUSH
70130: LD_VAR 0 6
70134: PUSH
70135: LD_VAR 0 4
70139: ARRAY
70140: PUSH
70141: LD_INT 1
70143: ARRAY
70144: PPUSH
70145: LD_VAR 0 6
70149: PUSH
70150: LD_VAR 0 4
70154: ARRAY
70155: PUSH
70156: LD_INT 2
70158: ARRAY
70159: PPUSH
70160: CALL_OW 428
70164: PUSH
70165: LD_INT 0
70167: NONEQUAL
70168: OR
70169: IFFALSE 70191
// tmp := Delete ( tmp , i ) ;
70171: LD_ADDR_VAR 0 6
70175: PUSH
70176: LD_VAR 0 6
70180: PPUSH
70181: LD_VAR 0 4
70185: PPUSH
70186: CALL_OW 3
70190: ST_TO_ADDR
70191: GO 70091
70193: POP
70194: POP
// j := GetClosestHex ( unit , tmp ) ;
70195: LD_ADDR_VAR 0 5
70199: PUSH
70200: LD_VAR 0 1
70204: PPUSH
70205: LD_VAR 0 6
70209: PPUSH
70210: CALL 69486 0 2
70214: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70215: LD_VAR 0 1
70219: PPUSH
70220: LD_VAR 0 5
70224: PUSH
70225: LD_INT 1
70227: ARRAY
70228: PPUSH
70229: LD_VAR 0 5
70233: PUSH
70234: LD_INT 2
70236: ARRAY
70237: PPUSH
70238: CALL_OW 111
// end ;
70242: LD_VAR 0 3
70246: RET
// export function PrepareApemanSoldier ( ) ; begin
70247: LD_INT 0
70249: PPUSH
// uc_nation := 0 ;
70250: LD_ADDR_OWVAR 21
70254: PUSH
70255: LD_INT 0
70257: ST_TO_ADDR
// hc_sex := sex_male ;
70258: LD_ADDR_OWVAR 27
70262: PUSH
70263: LD_INT 1
70265: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70266: LD_ADDR_OWVAR 28
70270: PUSH
70271: LD_INT 15
70273: ST_TO_ADDR
// hc_gallery :=  ;
70274: LD_ADDR_OWVAR 33
70278: PUSH
70279: LD_STRING 
70281: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70282: LD_ADDR_OWVAR 31
70286: PUSH
70287: LD_INT 0
70289: PPUSH
70290: LD_INT 3
70292: PPUSH
70293: CALL_OW 12
70297: PUSH
70298: LD_INT 0
70300: PPUSH
70301: LD_INT 3
70303: PPUSH
70304: CALL_OW 12
70308: PUSH
70309: LD_INT 0
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: ST_TO_ADDR
// end ;
70321: LD_VAR 0 1
70325: RET
// export function PrepareApemanEngineer ( ) ; begin
70326: LD_INT 0
70328: PPUSH
// uc_nation := 0 ;
70329: LD_ADDR_OWVAR 21
70333: PUSH
70334: LD_INT 0
70336: ST_TO_ADDR
// hc_sex := sex_male ;
70337: LD_ADDR_OWVAR 27
70341: PUSH
70342: LD_INT 1
70344: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70345: LD_ADDR_OWVAR 28
70349: PUSH
70350: LD_INT 16
70352: ST_TO_ADDR
// hc_gallery :=  ;
70353: LD_ADDR_OWVAR 33
70357: PUSH
70358: LD_STRING 
70360: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70361: LD_ADDR_OWVAR 31
70365: PUSH
70366: LD_INT 0
70368: PPUSH
70369: LD_INT 3
70371: PPUSH
70372: CALL_OW 12
70376: PUSH
70377: LD_INT 0
70379: PPUSH
70380: LD_INT 3
70382: PPUSH
70383: CALL_OW 12
70387: PUSH
70388: LD_INT 0
70390: PUSH
70391: LD_INT 0
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: ST_TO_ADDR
// end ;
70400: LD_VAR 0 1
70404: RET
// export function PrepareApeman ( agressivity ) ; begin
70405: LD_INT 0
70407: PPUSH
// uc_side := 0 ;
70408: LD_ADDR_OWVAR 20
70412: PUSH
70413: LD_INT 0
70415: ST_TO_ADDR
// uc_nation := 0 ;
70416: LD_ADDR_OWVAR 21
70420: PUSH
70421: LD_INT 0
70423: ST_TO_ADDR
// hc_sex := sex_male ;
70424: LD_ADDR_OWVAR 27
70428: PUSH
70429: LD_INT 1
70431: ST_TO_ADDR
// hc_class := class_apeman ;
70432: LD_ADDR_OWVAR 28
70436: PUSH
70437: LD_INT 12
70439: ST_TO_ADDR
// hc_gallery :=  ;
70440: LD_ADDR_OWVAR 33
70444: PUSH
70445: LD_STRING 
70447: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70448: LD_ADDR_OWVAR 35
70452: PUSH
70453: LD_VAR 0 1
70457: NEG
70458: PPUSH
70459: LD_VAR 0 1
70463: PPUSH
70464: CALL_OW 12
70468: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70469: LD_ADDR_OWVAR 31
70473: PUSH
70474: LD_INT 0
70476: PPUSH
70477: LD_INT 3
70479: PPUSH
70480: CALL_OW 12
70484: PUSH
70485: LD_INT 0
70487: PPUSH
70488: LD_INT 3
70490: PPUSH
70491: CALL_OW 12
70495: PUSH
70496: LD_INT 0
70498: PUSH
70499: LD_INT 0
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: ST_TO_ADDR
// end ;
70508: LD_VAR 0 2
70512: RET
// export function PrepareTiger ( agressivity ) ; begin
70513: LD_INT 0
70515: PPUSH
// uc_side := 0 ;
70516: LD_ADDR_OWVAR 20
70520: PUSH
70521: LD_INT 0
70523: ST_TO_ADDR
// uc_nation := 0 ;
70524: LD_ADDR_OWVAR 21
70528: PUSH
70529: LD_INT 0
70531: ST_TO_ADDR
// hc_class := class_tiger ;
70532: LD_ADDR_OWVAR 28
70536: PUSH
70537: LD_INT 14
70539: ST_TO_ADDR
// hc_gallery :=  ;
70540: LD_ADDR_OWVAR 33
70544: PUSH
70545: LD_STRING 
70547: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70548: LD_ADDR_OWVAR 35
70552: PUSH
70553: LD_VAR 0 1
70557: NEG
70558: PPUSH
70559: LD_VAR 0 1
70563: PPUSH
70564: CALL_OW 12
70568: ST_TO_ADDR
// end ;
70569: LD_VAR 0 2
70573: RET
// export function PrepareEnchidna ( ) ; begin
70574: LD_INT 0
70576: PPUSH
// uc_side := 0 ;
70577: LD_ADDR_OWVAR 20
70581: PUSH
70582: LD_INT 0
70584: ST_TO_ADDR
// uc_nation := 0 ;
70585: LD_ADDR_OWVAR 21
70589: PUSH
70590: LD_INT 0
70592: ST_TO_ADDR
// hc_class := class_baggie ;
70593: LD_ADDR_OWVAR 28
70597: PUSH
70598: LD_INT 13
70600: ST_TO_ADDR
// hc_gallery :=  ;
70601: LD_ADDR_OWVAR 33
70605: PUSH
70606: LD_STRING 
70608: ST_TO_ADDR
// end ;
70609: LD_VAR 0 1
70613: RET
// export function PrepareFrog ( ) ; begin
70614: LD_INT 0
70616: PPUSH
// uc_side := 0 ;
70617: LD_ADDR_OWVAR 20
70621: PUSH
70622: LD_INT 0
70624: ST_TO_ADDR
// uc_nation := 0 ;
70625: LD_ADDR_OWVAR 21
70629: PUSH
70630: LD_INT 0
70632: ST_TO_ADDR
// hc_class := class_frog ;
70633: LD_ADDR_OWVAR 28
70637: PUSH
70638: LD_INT 19
70640: ST_TO_ADDR
// hc_gallery :=  ;
70641: LD_ADDR_OWVAR 33
70645: PUSH
70646: LD_STRING 
70648: ST_TO_ADDR
// end ;
70649: LD_VAR 0 1
70653: RET
// export function PrepareFish ( ) ; begin
70654: LD_INT 0
70656: PPUSH
// uc_side := 0 ;
70657: LD_ADDR_OWVAR 20
70661: PUSH
70662: LD_INT 0
70664: ST_TO_ADDR
// uc_nation := 0 ;
70665: LD_ADDR_OWVAR 21
70669: PUSH
70670: LD_INT 0
70672: ST_TO_ADDR
// hc_class := class_fish ;
70673: LD_ADDR_OWVAR 28
70677: PUSH
70678: LD_INT 20
70680: ST_TO_ADDR
// hc_gallery :=  ;
70681: LD_ADDR_OWVAR 33
70685: PUSH
70686: LD_STRING 
70688: ST_TO_ADDR
// end ;
70689: LD_VAR 0 1
70693: RET
// export function PrepareBird ( ) ; begin
70694: LD_INT 0
70696: PPUSH
// uc_side := 0 ;
70697: LD_ADDR_OWVAR 20
70701: PUSH
70702: LD_INT 0
70704: ST_TO_ADDR
// uc_nation := 0 ;
70705: LD_ADDR_OWVAR 21
70709: PUSH
70710: LD_INT 0
70712: ST_TO_ADDR
// hc_class := class_phororhacos ;
70713: LD_ADDR_OWVAR 28
70717: PUSH
70718: LD_INT 18
70720: ST_TO_ADDR
// hc_gallery :=  ;
70721: LD_ADDR_OWVAR 33
70725: PUSH
70726: LD_STRING 
70728: ST_TO_ADDR
// end ;
70729: LD_VAR 0 1
70733: RET
// export function PrepareHorse ( ) ; begin
70734: LD_INT 0
70736: PPUSH
// uc_side := 0 ;
70737: LD_ADDR_OWVAR 20
70741: PUSH
70742: LD_INT 0
70744: ST_TO_ADDR
// uc_nation := 0 ;
70745: LD_ADDR_OWVAR 21
70749: PUSH
70750: LD_INT 0
70752: ST_TO_ADDR
// hc_class := class_horse ;
70753: LD_ADDR_OWVAR 28
70757: PUSH
70758: LD_INT 21
70760: ST_TO_ADDR
// hc_gallery :=  ;
70761: LD_ADDR_OWVAR 33
70765: PUSH
70766: LD_STRING 
70768: ST_TO_ADDR
// end ;
70769: LD_VAR 0 1
70773: RET
// export function PrepareMastodont ( ) ; begin
70774: LD_INT 0
70776: PPUSH
// uc_side := 0 ;
70777: LD_ADDR_OWVAR 20
70781: PUSH
70782: LD_INT 0
70784: ST_TO_ADDR
// uc_nation := 0 ;
70785: LD_ADDR_OWVAR 21
70789: PUSH
70790: LD_INT 0
70792: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70793: LD_ADDR_OWVAR 37
70797: PUSH
70798: LD_INT 31
70800: ST_TO_ADDR
// vc_control := control_rider ;
70801: LD_ADDR_OWVAR 38
70805: PUSH
70806: LD_INT 4
70808: ST_TO_ADDR
// end ;
70809: LD_VAR 0 1
70813: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70814: LD_INT 0
70816: PPUSH
70817: PPUSH
70818: PPUSH
// uc_side = 0 ;
70819: LD_ADDR_OWVAR 20
70823: PUSH
70824: LD_INT 0
70826: ST_TO_ADDR
// uc_nation = 0 ;
70827: LD_ADDR_OWVAR 21
70831: PUSH
70832: LD_INT 0
70834: ST_TO_ADDR
// InitHc_All ( ) ;
70835: CALL_OW 584
// InitVc ;
70839: CALL_OW 20
// if mastodonts then
70843: LD_VAR 0 6
70847: IFFALSE 70914
// for i = 1 to mastodonts do
70849: LD_ADDR_VAR 0 11
70853: PUSH
70854: DOUBLE
70855: LD_INT 1
70857: DEC
70858: ST_TO_ADDR
70859: LD_VAR 0 6
70863: PUSH
70864: FOR_TO
70865: IFFALSE 70912
// begin vc_chassis := 31 ;
70867: LD_ADDR_OWVAR 37
70871: PUSH
70872: LD_INT 31
70874: ST_TO_ADDR
// vc_control := control_rider ;
70875: LD_ADDR_OWVAR 38
70879: PUSH
70880: LD_INT 4
70882: ST_TO_ADDR
// animal := CreateVehicle ;
70883: LD_ADDR_VAR 0 12
70887: PUSH
70888: CALL_OW 45
70892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70893: LD_VAR 0 12
70897: PPUSH
70898: LD_VAR 0 8
70902: PPUSH
70903: LD_INT 0
70905: PPUSH
70906: CALL 73042 0 3
// end ;
70910: GO 70864
70912: POP
70913: POP
// if horses then
70914: LD_VAR 0 5
70918: IFFALSE 70985
// for i = 1 to horses do
70920: LD_ADDR_VAR 0 11
70924: PUSH
70925: DOUBLE
70926: LD_INT 1
70928: DEC
70929: ST_TO_ADDR
70930: LD_VAR 0 5
70934: PUSH
70935: FOR_TO
70936: IFFALSE 70983
// begin hc_class := 21 ;
70938: LD_ADDR_OWVAR 28
70942: PUSH
70943: LD_INT 21
70945: ST_TO_ADDR
// hc_gallery :=  ;
70946: LD_ADDR_OWVAR 33
70950: PUSH
70951: LD_STRING 
70953: ST_TO_ADDR
// animal := CreateHuman ;
70954: LD_ADDR_VAR 0 12
70958: PUSH
70959: CALL_OW 44
70963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70964: LD_VAR 0 12
70968: PPUSH
70969: LD_VAR 0 8
70973: PPUSH
70974: LD_INT 0
70976: PPUSH
70977: CALL 73042 0 3
// end ;
70981: GO 70935
70983: POP
70984: POP
// if birds then
70985: LD_VAR 0 1
70989: IFFALSE 71056
// for i = 1 to birds do
70991: LD_ADDR_VAR 0 11
70995: PUSH
70996: DOUBLE
70997: LD_INT 1
70999: DEC
71000: ST_TO_ADDR
71001: LD_VAR 0 1
71005: PUSH
71006: FOR_TO
71007: IFFALSE 71054
// begin hc_class = 18 ;
71009: LD_ADDR_OWVAR 28
71013: PUSH
71014: LD_INT 18
71016: ST_TO_ADDR
// hc_gallery =  ;
71017: LD_ADDR_OWVAR 33
71021: PUSH
71022: LD_STRING 
71024: ST_TO_ADDR
// animal := CreateHuman ;
71025: LD_ADDR_VAR 0 12
71029: PUSH
71030: CALL_OW 44
71034: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71035: LD_VAR 0 12
71039: PPUSH
71040: LD_VAR 0 8
71044: PPUSH
71045: LD_INT 0
71047: PPUSH
71048: CALL 73042 0 3
// end ;
71052: GO 71006
71054: POP
71055: POP
// if tigers then
71056: LD_VAR 0 2
71060: IFFALSE 71144
// for i = 1 to tigers do
71062: LD_ADDR_VAR 0 11
71066: PUSH
71067: DOUBLE
71068: LD_INT 1
71070: DEC
71071: ST_TO_ADDR
71072: LD_VAR 0 2
71076: PUSH
71077: FOR_TO
71078: IFFALSE 71142
// begin hc_class = class_tiger ;
71080: LD_ADDR_OWVAR 28
71084: PUSH
71085: LD_INT 14
71087: ST_TO_ADDR
// hc_gallery =  ;
71088: LD_ADDR_OWVAR 33
71092: PUSH
71093: LD_STRING 
71095: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71096: LD_ADDR_OWVAR 35
71100: PUSH
71101: LD_INT 7
71103: NEG
71104: PPUSH
71105: LD_INT 7
71107: PPUSH
71108: CALL_OW 12
71112: ST_TO_ADDR
// animal := CreateHuman ;
71113: LD_ADDR_VAR 0 12
71117: PUSH
71118: CALL_OW 44
71122: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71123: LD_VAR 0 12
71127: PPUSH
71128: LD_VAR 0 8
71132: PPUSH
71133: LD_INT 0
71135: PPUSH
71136: CALL 73042 0 3
// end ;
71140: GO 71077
71142: POP
71143: POP
// if apemans then
71144: LD_VAR 0 3
71148: IFFALSE 71271
// for i = 1 to apemans do
71150: LD_ADDR_VAR 0 11
71154: PUSH
71155: DOUBLE
71156: LD_INT 1
71158: DEC
71159: ST_TO_ADDR
71160: LD_VAR 0 3
71164: PUSH
71165: FOR_TO
71166: IFFALSE 71269
// begin hc_class = class_apeman ;
71168: LD_ADDR_OWVAR 28
71172: PUSH
71173: LD_INT 12
71175: ST_TO_ADDR
// hc_gallery =  ;
71176: LD_ADDR_OWVAR 33
71180: PUSH
71181: LD_STRING 
71183: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71184: LD_ADDR_OWVAR 35
71188: PUSH
71189: LD_INT 2
71191: NEG
71192: PPUSH
71193: LD_INT 2
71195: PPUSH
71196: CALL_OW 12
71200: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71201: LD_ADDR_OWVAR 31
71205: PUSH
71206: LD_INT 1
71208: PPUSH
71209: LD_INT 3
71211: PPUSH
71212: CALL_OW 12
71216: PUSH
71217: LD_INT 1
71219: PPUSH
71220: LD_INT 3
71222: PPUSH
71223: CALL_OW 12
71227: PUSH
71228: LD_INT 0
71230: PUSH
71231: LD_INT 0
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: ST_TO_ADDR
// animal := CreateHuman ;
71240: LD_ADDR_VAR 0 12
71244: PUSH
71245: CALL_OW 44
71249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71250: LD_VAR 0 12
71254: PPUSH
71255: LD_VAR 0 8
71259: PPUSH
71260: LD_INT 0
71262: PPUSH
71263: CALL 73042 0 3
// end ;
71267: GO 71165
71269: POP
71270: POP
// if enchidnas then
71271: LD_VAR 0 4
71275: IFFALSE 71342
// for i = 1 to enchidnas do
71277: LD_ADDR_VAR 0 11
71281: PUSH
71282: DOUBLE
71283: LD_INT 1
71285: DEC
71286: ST_TO_ADDR
71287: LD_VAR 0 4
71291: PUSH
71292: FOR_TO
71293: IFFALSE 71340
// begin hc_class = 13 ;
71295: LD_ADDR_OWVAR 28
71299: PUSH
71300: LD_INT 13
71302: ST_TO_ADDR
// hc_gallery =  ;
71303: LD_ADDR_OWVAR 33
71307: PUSH
71308: LD_STRING 
71310: ST_TO_ADDR
// animal := CreateHuman ;
71311: LD_ADDR_VAR 0 12
71315: PUSH
71316: CALL_OW 44
71320: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71321: LD_VAR 0 12
71325: PPUSH
71326: LD_VAR 0 8
71330: PPUSH
71331: LD_INT 0
71333: PPUSH
71334: CALL 73042 0 3
// end ;
71338: GO 71292
71340: POP
71341: POP
// if fishes then
71342: LD_VAR 0 7
71346: IFFALSE 71413
// for i = 1 to fishes do
71348: LD_ADDR_VAR 0 11
71352: PUSH
71353: DOUBLE
71354: LD_INT 1
71356: DEC
71357: ST_TO_ADDR
71358: LD_VAR 0 7
71362: PUSH
71363: FOR_TO
71364: IFFALSE 71411
// begin hc_class = 20 ;
71366: LD_ADDR_OWVAR 28
71370: PUSH
71371: LD_INT 20
71373: ST_TO_ADDR
// hc_gallery =  ;
71374: LD_ADDR_OWVAR 33
71378: PUSH
71379: LD_STRING 
71381: ST_TO_ADDR
// animal := CreateHuman ;
71382: LD_ADDR_VAR 0 12
71386: PUSH
71387: CALL_OW 44
71391: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71392: LD_VAR 0 12
71396: PPUSH
71397: LD_VAR 0 9
71401: PPUSH
71402: LD_INT 0
71404: PPUSH
71405: CALL 73042 0 3
// end ;
71409: GO 71363
71411: POP
71412: POP
// end ;
71413: LD_VAR 0 10
71417: RET
// export function WantHeal ( sci , unit ) ; begin
71418: LD_INT 0
71420: PPUSH
// if GetTaskList ( sci ) > 0 then
71421: LD_VAR 0 1
71425: PPUSH
71426: CALL_OW 437
71430: PUSH
71431: LD_INT 0
71433: GREATER
71434: IFFALSE 71504
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71436: LD_VAR 0 1
71440: PPUSH
71441: CALL_OW 437
71445: PUSH
71446: LD_INT 1
71448: ARRAY
71449: PUSH
71450: LD_INT 1
71452: ARRAY
71453: PUSH
71454: LD_STRING l
71456: EQUAL
71457: PUSH
71458: LD_VAR 0 1
71462: PPUSH
71463: CALL_OW 437
71467: PUSH
71468: LD_INT 1
71470: ARRAY
71471: PUSH
71472: LD_INT 4
71474: ARRAY
71475: PUSH
71476: LD_VAR 0 2
71480: EQUAL
71481: AND
71482: IFFALSE 71494
// result := true else
71484: LD_ADDR_VAR 0 3
71488: PUSH
71489: LD_INT 1
71491: ST_TO_ADDR
71492: GO 71502
// result := false ;
71494: LD_ADDR_VAR 0 3
71498: PUSH
71499: LD_INT 0
71501: ST_TO_ADDR
// end else
71502: GO 71512
// result := false ;
71504: LD_ADDR_VAR 0 3
71508: PUSH
71509: LD_INT 0
71511: ST_TO_ADDR
// end ;
71512: LD_VAR 0 3
71516: RET
// export function HealTarget ( sci ) ; begin
71517: LD_INT 0
71519: PPUSH
// if not sci then
71520: LD_VAR 0 1
71524: NOT
71525: IFFALSE 71529
// exit ;
71527: GO 71594
// result := 0 ;
71529: LD_ADDR_VAR 0 2
71533: PUSH
71534: LD_INT 0
71536: ST_TO_ADDR
// if GetTaskList ( sci ) then
71537: LD_VAR 0 1
71541: PPUSH
71542: CALL_OW 437
71546: IFFALSE 71594
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71548: LD_VAR 0 1
71552: PPUSH
71553: CALL_OW 437
71557: PUSH
71558: LD_INT 1
71560: ARRAY
71561: PUSH
71562: LD_INT 1
71564: ARRAY
71565: PUSH
71566: LD_STRING l
71568: EQUAL
71569: IFFALSE 71594
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71571: LD_ADDR_VAR 0 2
71575: PUSH
71576: LD_VAR 0 1
71580: PPUSH
71581: CALL_OW 437
71585: PUSH
71586: LD_INT 1
71588: ARRAY
71589: PUSH
71590: LD_INT 4
71592: ARRAY
71593: ST_TO_ADDR
// end ;
71594: LD_VAR 0 2
71598: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71599: LD_INT 0
71601: PPUSH
71602: PPUSH
71603: PPUSH
71604: PPUSH
// if not base_units then
71605: LD_VAR 0 1
71609: NOT
71610: IFFALSE 71614
// exit ;
71612: GO 71701
// result := false ;
71614: LD_ADDR_VAR 0 2
71618: PUSH
71619: LD_INT 0
71621: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71622: LD_ADDR_VAR 0 5
71626: PUSH
71627: LD_VAR 0 1
71631: PPUSH
71632: LD_INT 21
71634: PUSH
71635: LD_INT 3
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PPUSH
71642: CALL_OW 72
71646: ST_TO_ADDR
// if not tmp then
71647: LD_VAR 0 5
71651: NOT
71652: IFFALSE 71656
// exit ;
71654: GO 71701
// for i in tmp do
71656: LD_ADDR_VAR 0 3
71660: PUSH
71661: LD_VAR 0 5
71665: PUSH
71666: FOR_IN
71667: IFFALSE 71699
// begin result := EnemyInRange ( i , 22 ) ;
71669: LD_ADDR_VAR 0 2
71673: PUSH
71674: LD_VAR 0 3
71678: PPUSH
71679: LD_INT 22
71681: PPUSH
71682: CALL 69288 0 2
71686: ST_TO_ADDR
// if result then
71687: LD_VAR 0 2
71691: IFFALSE 71697
// exit ;
71693: POP
71694: POP
71695: GO 71701
// end ;
71697: GO 71666
71699: POP
71700: POP
// end ;
71701: LD_VAR 0 2
71705: RET
// export function FilterByTag ( units , tag ) ; begin
71706: LD_INT 0
71708: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71709: LD_ADDR_VAR 0 3
71713: PUSH
71714: LD_VAR 0 1
71718: PPUSH
71719: LD_INT 120
71721: PUSH
71722: LD_VAR 0 2
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PPUSH
71731: CALL_OW 72
71735: ST_TO_ADDR
// end ;
71736: LD_VAR 0 3
71740: RET
// export function IsDriver ( un ) ; begin
71741: LD_INT 0
71743: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71744: LD_ADDR_VAR 0 2
71748: PUSH
71749: LD_VAR 0 1
71753: PUSH
71754: LD_INT 55
71756: PUSH
71757: EMPTY
71758: LIST
71759: PPUSH
71760: CALL_OW 69
71764: IN
71765: ST_TO_ADDR
// end ;
71766: LD_VAR 0 2
71770: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71771: LD_INT 0
71773: PPUSH
71774: PPUSH
// list := [ ] ;
71775: LD_ADDR_VAR 0 5
71779: PUSH
71780: EMPTY
71781: ST_TO_ADDR
// case d of 0 :
71782: LD_VAR 0 3
71786: PUSH
71787: LD_INT 0
71789: DOUBLE
71790: EQUAL
71791: IFTRUE 71795
71793: GO 71928
71795: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71796: LD_ADDR_VAR 0 5
71800: PUSH
71801: LD_VAR 0 1
71805: PUSH
71806: LD_INT 4
71808: MINUS
71809: PUSH
71810: LD_VAR 0 2
71814: PUSH
71815: LD_INT 4
71817: MINUS
71818: PUSH
71819: LD_INT 2
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: LIST
71826: PUSH
71827: LD_VAR 0 1
71831: PUSH
71832: LD_INT 3
71834: MINUS
71835: PUSH
71836: LD_VAR 0 2
71840: PUSH
71841: LD_INT 1
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: LIST
71848: PUSH
71849: LD_VAR 0 1
71853: PUSH
71854: LD_INT 4
71856: PLUS
71857: PUSH
71858: LD_VAR 0 2
71862: PUSH
71863: LD_INT 4
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: LIST
71870: PUSH
71871: LD_VAR 0 1
71875: PUSH
71876: LD_INT 3
71878: PLUS
71879: PUSH
71880: LD_VAR 0 2
71884: PUSH
71885: LD_INT 3
71887: PLUS
71888: PUSH
71889: LD_INT 5
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: LIST
71896: PUSH
71897: LD_VAR 0 1
71901: PUSH
71902: LD_VAR 0 2
71906: PUSH
71907: LD_INT 4
71909: PLUS
71910: PUSH
71911: LD_INT 0
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: LIST
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: ST_TO_ADDR
// end ; 1 :
71926: GO 72626
71928: LD_INT 1
71930: DOUBLE
71931: EQUAL
71932: IFTRUE 71936
71934: GO 72069
71936: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71937: LD_ADDR_VAR 0 5
71941: PUSH
71942: LD_VAR 0 1
71946: PUSH
71947: LD_VAR 0 2
71951: PUSH
71952: LD_INT 4
71954: MINUS
71955: PUSH
71956: LD_INT 3
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: LIST
71963: PUSH
71964: LD_VAR 0 1
71968: PUSH
71969: LD_INT 3
71971: MINUS
71972: PUSH
71973: LD_VAR 0 2
71977: PUSH
71978: LD_INT 3
71980: MINUS
71981: PUSH
71982: LD_INT 2
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: LIST
71989: PUSH
71990: LD_VAR 0 1
71994: PUSH
71995: LD_INT 4
71997: MINUS
71998: PUSH
71999: LD_VAR 0 2
72003: PUSH
72004: LD_INT 1
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: LIST
72011: PUSH
72012: LD_VAR 0 1
72016: PUSH
72017: LD_VAR 0 2
72021: PUSH
72022: LD_INT 3
72024: PLUS
72025: PUSH
72026: LD_INT 0
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: LIST
72033: PUSH
72034: LD_VAR 0 1
72038: PUSH
72039: LD_INT 4
72041: PLUS
72042: PUSH
72043: LD_VAR 0 2
72047: PUSH
72048: LD_INT 4
72050: PLUS
72051: PUSH
72052: LD_INT 5
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: LIST
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: ST_TO_ADDR
// end ; 2 :
72067: GO 72626
72069: LD_INT 2
72071: DOUBLE
72072: EQUAL
72073: IFTRUE 72077
72075: GO 72206
72077: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72078: LD_ADDR_VAR 0 5
72082: PUSH
72083: LD_VAR 0 1
72087: PUSH
72088: LD_VAR 0 2
72092: PUSH
72093: LD_INT 3
72095: MINUS
72096: PUSH
72097: LD_INT 3
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: LIST
72104: PUSH
72105: LD_VAR 0 1
72109: PUSH
72110: LD_INT 4
72112: PLUS
72113: PUSH
72114: LD_VAR 0 2
72118: PUSH
72119: LD_INT 4
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: LIST
72126: PUSH
72127: LD_VAR 0 1
72131: PUSH
72132: LD_VAR 0 2
72136: PUSH
72137: LD_INT 4
72139: PLUS
72140: PUSH
72141: LD_INT 0
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: LIST
72148: PUSH
72149: LD_VAR 0 1
72153: PUSH
72154: LD_INT 3
72156: MINUS
72157: PUSH
72158: LD_VAR 0 2
72162: PUSH
72163: LD_INT 1
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: LIST
72170: PUSH
72171: LD_VAR 0 1
72175: PUSH
72176: LD_INT 4
72178: MINUS
72179: PUSH
72180: LD_VAR 0 2
72184: PUSH
72185: LD_INT 4
72187: MINUS
72188: PUSH
72189: LD_INT 2
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: LIST
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: ST_TO_ADDR
// end ; 3 :
72204: GO 72626
72206: LD_INT 3
72208: DOUBLE
72209: EQUAL
72210: IFTRUE 72214
72212: GO 72347
72214: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72215: LD_ADDR_VAR 0 5
72219: PUSH
72220: LD_VAR 0 1
72224: PUSH
72225: LD_INT 3
72227: PLUS
72228: PUSH
72229: LD_VAR 0 2
72233: PUSH
72234: LD_INT 4
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: LIST
72241: PUSH
72242: LD_VAR 0 1
72246: PUSH
72247: LD_INT 4
72249: PLUS
72250: PUSH
72251: LD_VAR 0 2
72255: PUSH
72256: LD_INT 4
72258: PLUS
72259: PUSH
72260: LD_INT 5
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: LIST
72267: PUSH
72268: LD_VAR 0 1
72272: PUSH
72273: LD_INT 4
72275: MINUS
72276: PUSH
72277: LD_VAR 0 2
72281: PUSH
72282: LD_INT 1
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: LIST
72289: PUSH
72290: LD_VAR 0 1
72294: PUSH
72295: LD_VAR 0 2
72299: PUSH
72300: LD_INT 4
72302: MINUS
72303: PUSH
72304: LD_INT 3
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: LIST
72311: PUSH
72312: LD_VAR 0 1
72316: PUSH
72317: LD_INT 3
72319: MINUS
72320: PUSH
72321: LD_VAR 0 2
72325: PUSH
72326: LD_INT 3
72328: MINUS
72329: PUSH
72330: LD_INT 2
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: LIST
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: ST_TO_ADDR
// end ; 4 :
72345: GO 72626
72347: LD_INT 4
72349: DOUBLE
72350: EQUAL
72351: IFTRUE 72355
72353: GO 72488
72355: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72356: LD_ADDR_VAR 0 5
72360: PUSH
72361: LD_VAR 0 1
72365: PUSH
72366: LD_VAR 0 2
72370: PUSH
72371: LD_INT 4
72373: PLUS
72374: PUSH
72375: LD_INT 0
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: LIST
72382: PUSH
72383: LD_VAR 0 1
72387: PUSH
72388: LD_INT 3
72390: PLUS
72391: PUSH
72392: LD_VAR 0 2
72396: PUSH
72397: LD_INT 3
72399: PLUS
72400: PUSH
72401: LD_INT 5
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: LIST
72408: PUSH
72409: LD_VAR 0 1
72413: PUSH
72414: LD_INT 4
72416: PLUS
72417: PUSH
72418: LD_VAR 0 2
72422: PUSH
72423: LD_INT 4
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: LIST
72430: PUSH
72431: LD_VAR 0 1
72435: PUSH
72436: LD_VAR 0 2
72440: PUSH
72441: LD_INT 3
72443: MINUS
72444: PUSH
72445: LD_INT 3
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: LIST
72452: PUSH
72453: LD_VAR 0 1
72457: PUSH
72458: LD_INT 4
72460: MINUS
72461: PUSH
72462: LD_VAR 0 2
72466: PUSH
72467: LD_INT 4
72469: MINUS
72470: PUSH
72471: LD_INT 2
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: LIST
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: ST_TO_ADDR
// end ; 5 :
72486: GO 72626
72488: LD_INT 5
72490: DOUBLE
72491: EQUAL
72492: IFTRUE 72496
72494: GO 72625
72496: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72497: LD_ADDR_VAR 0 5
72501: PUSH
72502: LD_VAR 0 1
72506: PUSH
72507: LD_INT 4
72509: MINUS
72510: PUSH
72511: LD_VAR 0 2
72515: PUSH
72516: LD_INT 1
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: LIST
72523: PUSH
72524: LD_VAR 0 1
72528: PUSH
72529: LD_VAR 0 2
72533: PUSH
72534: LD_INT 4
72536: MINUS
72537: PUSH
72538: LD_INT 3
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: LIST
72545: PUSH
72546: LD_VAR 0 1
72550: PUSH
72551: LD_INT 4
72553: PLUS
72554: PUSH
72555: LD_VAR 0 2
72559: PUSH
72560: LD_INT 4
72562: PLUS
72563: PUSH
72564: LD_INT 5
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: LIST
72571: PUSH
72572: LD_VAR 0 1
72576: PUSH
72577: LD_INT 3
72579: PLUS
72580: PUSH
72581: LD_VAR 0 2
72585: PUSH
72586: LD_INT 4
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: LIST
72593: PUSH
72594: LD_VAR 0 1
72598: PUSH
72599: LD_VAR 0 2
72603: PUSH
72604: LD_INT 3
72606: PLUS
72607: PUSH
72608: LD_INT 0
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: LIST
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: ST_TO_ADDR
// end ; end ;
72623: GO 72626
72625: POP
// result := list ;
72626: LD_ADDR_VAR 0 4
72630: PUSH
72631: LD_VAR 0 5
72635: ST_TO_ADDR
// end ;
72636: LD_VAR 0 4
72640: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72641: LD_INT 0
72643: PPUSH
72644: PPUSH
72645: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72646: LD_VAR 0 1
72650: NOT
72651: PUSH
72652: LD_VAR 0 2
72656: PUSH
72657: LD_INT 1
72659: PUSH
72660: LD_INT 2
72662: PUSH
72663: LD_INT 3
72665: PUSH
72666: LD_INT 4
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: IN
72675: NOT
72676: OR
72677: IFFALSE 72681
// exit ;
72679: GO 72764
// tmp := [ ] ;
72681: LD_ADDR_VAR 0 5
72685: PUSH
72686: EMPTY
72687: ST_TO_ADDR
// for i in units do
72688: LD_ADDR_VAR 0 4
72692: PUSH
72693: LD_VAR 0 1
72697: PUSH
72698: FOR_IN
72699: IFFALSE 72733
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72701: LD_ADDR_VAR 0 5
72705: PUSH
72706: LD_VAR 0 5
72710: PPUSH
72711: LD_VAR 0 4
72715: PPUSH
72716: LD_VAR 0 2
72720: PPUSH
72721: CALL_OW 259
72725: PPUSH
72726: CALL 74125 0 2
72730: ST_TO_ADDR
72731: GO 72698
72733: POP
72734: POP
// if not tmp then
72735: LD_VAR 0 5
72739: NOT
72740: IFFALSE 72744
// exit ;
72742: GO 72764
// result := SortListByListDesc ( units , tmp ) ;
72744: LD_ADDR_VAR 0 3
72748: PUSH
72749: LD_VAR 0 1
72753: PPUSH
72754: LD_VAR 0 5
72758: PPUSH
72759: CALL_OW 77
72763: ST_TO_ADDR
// end ;
72764: LD_VAR 0 3
72768: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72769: LD_INT 0
72771: PPUSH
72772: PPUSH
72773: PPUSH
// result := false ;
72774: LD_ADDR_VAR 0 3
72778: PUSH
72779: LD_INT 0
72781: ST_TO_ADDR
// if not building then
72782: LD_VAR 0 2
72786: NOT
72787: IFFALSE 72791
// exit ;
72789: GO 72929
// x := GetX ( building ) ;
72791: LD_ADDR_VAR 0 4
72795: PUSH
72796: LD_VAR 0 2
72800: PPUSH
72801: CALL_OW 250
72805: ST_TO_ADDR
// y := GetY ( building ) ;
72806: LD_ADDR_VAR 0 5
72810: PUSH
72811: LD_VAR 0 2
72815: PPUSH
72816: CALL_OW 251
72820: ST_TO_ADDR
// if not x or not y then
72821: LD_VAR 0 4
72825: NOT
72826: PUSH
72827: LD_VAR 0 5
72831: NOT
72832: OR
72833: IFFALSE 72837
// exit ;
72835: GO 72929
// if GetTaskList ( unit ) then
72837: LD_VAR 0 1
72841: PPUSH
72842: CALL_OW 437
72846: IFFALSE 72929
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72848: LD_STRING e
72850: PUSH
72851: LD_VAR 0 1
72855: PPUSH
72856: CALL_OW 437
72860: PUSH
72861: LD_INT 1
72863: ARRAY
72864: PUSH
72865: LD_INT 1
72867: ARRAY
72868: EQUAL
72869: PUSH
72870: LD_VAR 0 4
72874: PUSH
72875: LD_VAR 0 1
72879: PPUSH
72880: CALL_OW 437
72884: PUSH
72885: LD_INT 1
72887: ARRAY
72888: PUSH
72889: LD_INT 2
72891: ARRAY
72892: EQUAL
72893: AND
72894: PUSH
72895: LD_VAR 0 5
72899: PUSH
72900: LD_VAR 0 1
72904: PPUSH
72905: CALL_OW 437
72909: PUSH
72910: LD_INT 1
72912: ARRAY
72913: PUSH
72914: LD_INT 3
72916: ARRAY
72917: EQUAL
72918: AND
72919: IFFALSE 72929
// result := true end ;
72921: LD_ADDR_VAR 0 3
72925: PUSH
72926: LD_INT 1
72928: ST_TO_ADDR
// end ;
72929: LD_VAR 0 3
72933: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72934: LD_INT 0
72936: PPUSH
// result := false ;
72937: LD_ADDR_VAR 0 4
72941: PUSH
72942: LD_INT 0
72944: ST_TO_ADDR
// if GetTaskList ( unit ) then
72945: LD_VAR 0 1
72949: PPUSH
72950: CALL_OW 437
72954: IFFALSE 73037
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72956: LD_STRING M
72958: PUSH
72959: LD_VAR 0 1
72963: PPUSH
72964: CALL_OW 437
72968: PUSH
72969: LD_INT 1
72971: ARRAY
72972: PUSH
72973: LD_INT 1
72975: ARRAY
72976: EQUAL
72977: PUSH
72978: LD_VAR 0 2
72982: PUSH
72983: LD_VAR 0 1
72987: PPUSH
72988: CALL_OW 437
72992: PUSH
72993: LD_INT 1
72995: ARRAY
72996: PUSH
72997: LD_INT 2
72999: ARRAY
73000: EQUAL
73001: AND
73002: PUSH
73003: LD_VAR 0 3
73007: PUSH
73008: LD_VAR 0 1
73012: PPUSH
73013: CALL_OW 437
73017: PUSH
73018: LD_INT 1
73020: ARRAY
73021: PUSH
73022: LD_INT 3
73024: ARRAY
73025: EQUAL
73026: AND
73027: IFFALSE 73037
// result := true ;
73029: LD_ADDR_VAR 0 4
73033: PUSH
73034: LD_INT 1
73036: ST_TO_ADDR
// end ; end ;
73037: LD_VAR 0 4
73041: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73042: LD_INT 0
73044: PPUSH
73045: PPUSH
73046: PPUSH
73047: PPUSH
// if not unit or not area then
73048: LD_VAR 0 1
73052: NOT
73053: PUSH
73054: LD_VAR 0 2
73058: NOT
73059: OR
73060: IFFALSE 73064
// exit ;
73062: GO 73228
// tmp := AreaToList ( area , i ) ;
73064: LD_ADDR_VAR 0 6
73068: PUSH
73069: LD_VAR 0 2
73073: PPUSH
73074: LD_VAR 0 5
73078: PPUSH
73079: CALL_OW 517
73083: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73084: LD_ADDR_VAR 0 5
73088: PUSH
73089: DOUBLE
73090: LD_INT 1
73092: DEC
73093: ST_TO_ADDR
73094: LD_VAR 0 6
73098: PUSH
73099: LD_INT 1
73101: ARRAY
73102: PUSH
73103: FOR_TO
73104: IFFALSE 73226
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73106: LD_ADDR_VAR 0 7
73110: PUSH
73111: LD_VAR 0 6
73115: PUSH
73116: LD_INT 1
73118: ARRAY
73119: PUSH
73120: LD_VAR 0 5
73124: ARRAY
73125: PUSH
73126: LD_VAR 0 6
73130: PUSH
73131: LD_INT 2
73133: ARRAY
73134: PUSH
73135: LD_VAR 0 5
73139: ARRAY
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73145: LD_VAR 0 7
73149: PUSH
73150: LD_INT 1
73152: ARRAY
73153: PPUSH
73154: LD_VAR 0 7
73158: PUSH
73159: LD_INT 2
73161: ARRAY
73162: PPUSH
73163: CALL_OW 428
73167: PUSH
73168: LD_INT 0
73170: EQUAL
73171: IFFALSE 73224
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73173: LD_VAR 0 1
73177: PPUSH
73178: LD_VAR 0 7
73182: PUSH
73183: LD_INT 1
73185: ARRAY
73186: PPUSH
73187: LD_VAR 0 7
73191: PUSH
73192: LD_INT 2
73194: ARRAY
73195: PPUSH
73196: LD_VAR 0 3
73200: PPUSH
73201: CALL_OW 48
// result := IsPlaced ( unit ) ;
73205: LD_ADDR_VAR 0 4
73209: PUSH
73210: LD_VAR 0 1
73214: PPUSH
73215: CALL_OW 305
73219: ST_TO_ADDR
// exit ;
73220: POP
73221: POP
73222: GO 73228
// end ; end ;
73224: GO 73103
73226: POP
73227: POP
// end ;
73228: LD_VAR 0 4
73232: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73233: LD_INT 0
73235: PPUSH
73236: PPUSH
73237: PPUSH
// if not side or side > 8 then
73238: LD_VAR 0 1
73242: NOT
73243: PUSH
73244: LD_VAR 0 1
73248: PUSH
73249: LD_INT 8
73251: GREATER
73252: OR
73253: IFFALSE 73257
// exit ;
73255: GO 73444
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73257: LD_ADDR_VAR 0 4
73261: PUSH
73262: LD_INT 22
73264: PUSH
73265: LD_VAR 0 1
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 21
73276: PUSH
73277: LD_INT 3
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PPUSH
73288: CALL_OW 69
73292: ST_TO_ADDR
// if not tmp then
73293: LD_VAR 0 4
73297: NOT
73298: IFFALSE 73302
// exit ;
73300: GO 73444
// enable_addtolog := true ;
73302: LD_ADDR_OWVAR 81
73306: PUSH
73307: LD_INT 1
73309: ST_TO_ADDR
// AddToLog ( [ ) ;
73310: LD_STRING [
73312: PPUSH
73313: CALL_OW 561
// for i in tmp do
73317: LD_ADDR_VAR 0 3
73321: PUSH
73322: LD_VAR 0 4
73326: PUSH
73327: FOR_IN
73328: IFFALSE 73435
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73330: LD_STRING [
73332: PUSH
73333: LD_VAR 0 3
73337: PPUSH
73338: CALL_OW 266
73342: STR
73343: PUSH
73344: LD_STRING , 
73346: STR
73347: PUSH
73348: LD_VAR 0 3
73352: PPUSH
73353: CALL_OW 250
73357: STR
73358: PUSH
73359: LD_STRING , 
73361: STR
73362: PUSH
73363: LD_VAR 0 3
73367: PPUSH
73368: CALL_OW 251
73372: STR
73373: PUSH
73374: LD_STRING , 
73376: STR
73377: PUSH
73378: LD_VAR 0 3
73382: PPUSH
73383: CALL_OW 254
73387: STR
73388: PUSH
73389: LD_STRING , 
73391: STR
73392: PUSH
73393: LD_VAR 0 3
73397: PPUSH
73398: LD_INT 1
73400: PPUSH
73401: CALL_OW 268
73405: STR
73406: PUSH
73407: LD_STRING , 
73409: STR
73410: PUSH
73411: LD_VAR 0 3
73415: PPUSH
73416: LD_INT 2
73418: PPUSH
73419: CALL_OW 268
73423: STR
73424: PUSH
73425: LD_STRING ],
73427: STR
73428: PPUSH
73429: CALL_OW 561
// end ;
73433: GO 73327
73435: POP
73436: POP
// AddToLog ( ]; ) ;
73437: LD_STRING ];
73439: PPUSH
73440: CALL_OW 561
// end ;
73444: LD_VAR 0 2
73448: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73449: LD_INT 0
73451: PPUSH
73452: PPUSH
73453: PPUSH
73454: PPUSH
73455: PPUSH
// if not area or not rate or not max then
73456: LD_VAR 0 1
73460: NOT
73461: PUSH
73462: LD_VAR 0 2
73466: NOT
73467: OR
73468: PUSH
73469: LD_VAR 0 4
73473: NOT
73474: OR
73475: IFFALSE 73479
// exit ;
73477: GO 73668
// while 1 do
73479: LD_INT 1
73481: IFFALSE 73668
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73483: LD_ADDR_VAR 0 9
73487: PUSH
73488: LD_VAR 0 1
73492: PPUSH
73493: LD_INT 1
73495: PPUSH
73496: CALL_OW 287
73500: PUSH
73501: LD_INT 10
73503: MUL
73504: ST_TO_ADDR
// r := rate / 10 ;
73505: LD_ADDR_VAR 0 7
73509: PUSH
73510: LD_VAR 0 2
73514: PUSH
73515: LD_INT 10
73517: DIVREAL
73518: ST_TO_ADDR
// time := 1 1$00 ;
73519: LD_ADDR_VAR 0 8
73523: PUSH
73524: LD_INT 2100
73526: ST_TO_ADDR
// if amount < min then
73527: LD_VAR 0 9
73531: PUSH
73532: LD_VAR 0 3
73536: LESS
73537: IFFALSE 73555
// r := r * 2 else
73539: LD_ADDR_VAR 0 7
73543: PUSH
73544: LD_VAR 0 7
73548: PUSH
73549: LD_INT 2
73551: MUL
73552: ST_TO_ADDR
73553: GO 73581
// if amount > max then
73555: LD_VAR 0 9
73559: PUSH
73560: LD_VAR 0 4
73564: GREATER
73565: IFFALSE 73581
// r := r / 2 ;
73567: LD_ADDR_VAR 0 7
73571: PUSH
73572: LD_VAR 0 7
73576: PUSH
73577: LD_INT 2
73579: DIVREAL
73580: ST_TO_ADDR
// time := time / r ;
73581: LD_ADDR_VAR 0 8
73585: PUSH
73586: LD_VAR 0 8
73590: PUSH
73591: LD_VAR 0 7
73595: DIVREAL
73596: ST_TO_ADDR
// if time < 0 then
73597: LD_VAR 0 8
73601: PUSH
73602: LD_INT 0
73604: LESS
73605: IFFALSE 73622
// time := time * - 1 ;
73607: LD_ADDR_VAR 0 8
73611: PUSH
73612: LD_VAR 0 8
73616: PUSH
73617: LD_INT 1
73619: NEG
73620: MUL
73621: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73622: LD_VAR 0 8
73626: PUSH
73627: LD_INT 35
73629: PPUSH
73630: LD_INT 875
73632: PPUSH
73633: CALL_OW 12
73637: PLUS
73638: PPUSH
73639: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73643: LD_INT 1
73645: PPUSH
73646: LD_INT 5
73648: PPUSH
73649: CALL_OW 12
73653: PPUSH
73654: LD_VAR 0 1
73658: PPUSH
73659: LD_INT 1
73661: PPUSH
73662: CALL_OW 55
// end ;
73666: GO 73479
// end ;
73668: LD_VAR 0 5
73672: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73673: LD_INT 0
73675: PPUSH
73676: PPUSH
73677: PPUSH
73678: PPUSH
73679: PPUSH
73680: PPUSH
73681: PPUSH
73682: PPUSH
// if not turrets or not factories then
73683: LD_VAR 0 1
73687: NOT
73688: PUSH
73689: LD_VAR 0 2
73693: NOT
73694: OR
73695: IFFALSE 73699
// exit ;
73697: GO 74006
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73699: LD_ADDR_VAR 0 10
73703: PUSH
73704: LD_INT 5
73706: PUSH
73707: LD_INT 6
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: PUSH
73714: LD_INT 2
73716: PUSH
73717: LD_INT 4
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: PUSH
73724: LD_INT 3
73726: PUSH
73727: LD_INT 5
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: LIST
73738: PUSH
73739: LD_INT 24
73741: PUSH
73742: LD_INT 25
73744: PUSH
73745: EMPTY
73746: LIST
73747: LIST
73748: PUSH
73749: LD_INT 23
73751: PUSH
73752: LD_INT 27
73754: PUSH
73755: EMPTY
73756: LIST
73757: LIST
73758: PUSH
73759: EMPTY
73760: LIST
73761: LIST
73762: PUSH
73763: LD_INT 42
73765: PUSH
73766: LD_INT 43
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 44
73775: PUSH
73776: LD_INT 46
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PUSH
73783: LD_INT 45
73785: PUSH
73786: LD_INT 47
73788: PUSH
73789: EMPTY
73790: LIST
73791: LIST
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: LIST
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: LIST
73802: ST_TO_ADDR
// result := [ ] ;
73803: LD_ADDR_VAR 0 3
73807: PUSH
73808: EMPTY
73809: ST_TO_ADDR
// for i in turrets do
73810: LD_ADDR_VAR 0 4
73814: PUSH
73815: LD_VAR 0 1
73819: PUSH
73820: FOR_IN
73821: IFFALSE 74004
// begin nat := GetNation ( i ) ;
73823: LD_ADDR_VAR 0 7
73827: PUSH
73828: LD_VAR 0 4
73832: PPUSH
73833: CALL_OW 248
73837: ST_TO_ADDR
// weapon := 0 ;
73838: LD_ADDR_VAR 0 8
73842: PUSH
73843: LD_INT 0
73845: ST_TO_ADDR
// if not nat then
73846: LD_VAR 0 7
73850: NOT
73851: IFFALSE 73855
// continue ;
73853: GO 73820
// for j in list [ nat ] do
73855: LD_ADDR_VAR 0 5
73859: PUSH
73860: LD_VAR 0 10
73864: PUSH
73865: LD_VAR 0 7
73869: ARRAY
73870: PUSH
73871: FOR_IN
73872: IFFALSE 73913
// if GetBWeapon ( i ) = j [ 1 ] then
73874: LD_VAR 0 4
73878: PPUSH
73879: CALL_OW 269
73883: PUSH
73884: LD_VAR 0 5
73888: PUSH
73889: LD_INT 1
73891: ARRAY
73892: EQUAL
73893: IFFALSE 73911
// begin weapon := j [ 2 ] ;
73895: LD_ADDR_VAR 0 8
73899: PUSH
73900: LD_VAR 0 5
73904: PUSH
73905: LD_INT 2
73907: ARRAY
73908: ST_TO_ADDR
// break ;
73909: GO 73913
// end ;
73911: GO 73871
73913: POP
73914: POP
// if not weapon then
73915: LD_VAR 0 8
73919: NOT
73920: IFFALSE 73924
// continue ;
73922: GO 73820
// for k in factories do
73924: LD_ADDR_VAR 0 6
73928: PUSH
73929: LD_VAR 0 2
73933: PUSH
73934: FOR_IN
73935: IFFALSE 74000
// begin weapons := AvailableWeaponList ( k ) ;
73937: LD_ADDR_VAR 0 9
73941: PUSH
73942: LD_VAR 0 6
73946: PPUSH
73947: CALL_OW 478
73951: ST_TO_ADDR
// if not weapons then
73952: LD_VAR 0 9
73956: NOT
73957: IFFALSE 73961
// continue ;
73959: GO 73934
// if weapon in weapons then
73961: LD_VAR 0 8
73965: PUSH
73966: LD_VAR 0 9
73970: IN
73971: IFFALSE 73998
// begin result := [ i , weapon ] ;
73973: LD_ADDR_VAR 0 3
73977: PUSH
73978: LD_VAR 0 4
73982: PUSH
73983: LD_VAR 0 8
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: ST_TO_ADDR
// exit ;
73992: POP
73993: POP
73994: POP
73995: POP
73996: GO 74006
// end ; end ;
73998: GO 73934
74000: POP
74001: POP
// end ;
74002: GO 73820
74004: POP
74005: POP
// end ;
74006: LD_VAR 0 3
74010: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74011: LD_INT 0
74013: PPUSH
// if not side or side > 8 then
74014: LD_VAR 0 3
74018: NOT
74019: PUSH
74020: LD_VAR 0 3
74024: PUSH
74025: LD_INT 8
74027: GREATER
74028: OR
74029: IFFALSE 74033
// exit ;
74031: GO 74092
// if not range then
74033: LD_VAR 0 4
74037: NOT
74038: IFFALSE 74049
// range := - 12 ;
74040: LD_ADDR_VAR 0 4
74044: PUSH
74045: LD_INT 12
74047: NEG
74048: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74049: LD_VAR 0 1
74053: PPUSH
74054: LD_VAR 0 2
74058: PPUSH
74059: LD_VAR 0 3
74063: PPUSH
74064: LD_VAR 0 4
74068: PPUSH
74069: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74073: LD_VAR 0 1
74077: PPUSH
74078: LD_VAR 0 2
74082: PPUSH
74083: LD_VAR 0 3
74087: PPUSH
74088: CALL_OW 331
// end ;
74092: LD_VAR 0 5
74096: RET
// export function Video ( mode ) ; begin
74097: LD_INT 0
74099: PPUSH
// ingame_video = mode ;
74100: LD_ADDR_OWVAR 52
74104: PUSH
74105: LD_VAR 0 1
74109: ST_TO_ADDR
// interface_hidden = mode ;
74110: LD_ADDR_OWVAR 54
74114: PUSH
74115: LD_VAR 0 1
74119: ST_TO_ADDR
// end ;
74120: LD_VAR 0 2
74124: RET
// export function Join ( array , element ) ; begin
74125: LD_INT 0
74127: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74128: LD_ADDR_VAR 0 3
74132: PUSH
74133: LD_VAR 0 1
74137: PPUSH
74138: LD_VAR 0 1
74142: PUSH
74143: LD_INT 1
74145: PLUS
74146: PPUSH
74147: LD_VAR 0 2
74151: PPUSH
74152: CALL_OW 1
74156: ST_TO_ADDR
// end ;
74157: LD_VAR 0 3
74161: RET
// export function JoinUnion ( array , element ) ; begin
74162: LD_INT 0
74164: PPUSH
// result := array union element ;
74165: LD_ADDR_VAR 0 3
74169: PUSH
74170: LD_VAR 0 1
74174: PUSH
74175: LD_VAR 0 2
74179: UNION
74180: ST_TO_ADDR
// end ;
74181: LD_VAR 0 3
74185: RET
// export function GetBehemoths ( side ) ; begin
74186: LD_INT 0
74188: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74189: LD_ADDR_VAR 0 2
74193: PUSH
74194: LD_INT 22
74196: PUSH
74197: LD_VAR 0 1
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 31
74208: PUSH
74209: LD_INT 25
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: PPUSH
74220: CALL_OW 69
74224: ST_TO_ADDR
// end ;
74225: LD_VAR 0 2
74229: RET
// export function Shuffle ( array ) ; var i , index ; begin
74230: LD_INT 0
74232: PPUSH
74233: PPUSH
74234: PPUSH
// result := [ ] ;
74235: LD_ADDR_VAR 0 2
74239: PUSH
74240: EMPTY
74241: ST_TO_ADDR
// if not array then
74242: LD_VAR 0 1
74246: NOT
74247: IFFALSE 74251
// exit ;
74249: GO 74350
// Randomize ;
74251: CALL_OW 10
// for i = array downto 1 do
74255: LD_ADDR_VAR 0 3
74259: PUSH
74260: DOUBLE
74261: LD_VAR 0 1
74265: INC
74266: ST_TO_ADDR
74267: LD_INT 1
74269: PUSH
74270: FOR_DOWNTO
74271: IFFALSE 74348
// begin index := rand ( 1 , array ) ;
74273: LD_ADDR_VAR 0 4
74277: PUSH
74278: LD_INT 1
74280: PPUSH
74281: LD_VAR 0 1
74285: PPUSH
74286: CALL_OW 12
74290: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74291: LD_ADDR_VAR 0 2
74295: PUSH
74296: LD_VAR 0 2
74300: PPUSH
74301: LD_VAR 0 2
74305: PUSH
74306: LD_INT 1
74308: PLUS
74309: PPUSH
74310: LD_VAR 0 1
74314: PUSH
74315: LD_VAR 0 4
74319: ARRAY
74320: PPUSH
74321: CALL_OW 2
74325: ST_TO_ADDR
// array := Delete ( array , index ) ;
74326: LD_ADDR_VAR 0 1
74330: PUSH
74331: LD_VAR 0 1
74335: PPUSH
74336: LD_VAR 0 4
74340: PPUSH
74341: CALL_OW 3
74345: ST_TO_ADDR
// end ;
74346: GO 74270
74348: POP
74349: POP
// end ;
74350: LD_VAR 0 2
74354: RET
// export function GetBaseMaterials ( base ) ; begin
74355: LD_INT 0
74357: PPUSH
// result := [ 0 , 0 , 0 ] ;
74358: LD_ADDR_VAR 0 2
74362: PUSH
74363: LD_INT 0
74365: PUSH
74366: LD_INT 0
74368: PUSH
74369: LD_INT 0
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: LIST
74376: ST_TO_ADDR
// if not base then
74377: LD_VAR 0 1
74381: NOT
74382: IFFALSE 74386
// exit ;
74384: GO 74435
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74386: LD_ADDR_VAR 0 2
74390: PUSH
74391: LD_VAR 0 1
74395: PPUSH
74396: LD_INT 1
74398: PPUSH
74399: CALL_OW 275
74403: PUSH
74404: LD_VAR 0 1
74408: PPUSH
74409: LD_INT 2
74411: PPUSH
74412: CALL_OW 275
74416: PUSH
74417: LD_VAR 0 1
74421: PPUSH
74422: LD_INT 3
74424: PPUSH
74425: CALL_OW 275
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: LIST
74434: ST_TO_ADDR
// end ;
74435: LD_VAR 0 2
74439: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74440: LD_INT 0
74442: PPUSH
74443: PPUSH
// result := array ;
74444: LD_ADDR_VAR 0 3
74448: PUSH
74449: LD_VAR 0 1
74453: ST_TO_ADDR
// if size >= result then
74454: LD_VAR 0 2
74458: PUSH
74459: LD_VAR 0 3
74463: GREATEREQUAL
74464: IFFALSE 74468
// exit ;
74466: GO 74518
// if size then
74468: LD_VAR 0 2
74472: IFFALSE 74518
// for i := array downto size do
74474: LD_ADDR_VAR 0 4
74478: PUSH
74479: DOUBLE
74480: LD_VAR 0 1
74484: INC
74485: ST_TO_ADDR
74486: LD_VAR 0 2
74490: PUSH
74491: FOR_DOWNTO
74492: IFFALSE 74516
// result := Delete ( result , result ) ;
74494: LD_ADDR_VAR 0 3
74498: PUSH
74499: LD_VAR 0 3
74503: PPUSH
74504: LD_VAR 0 3
74508: PPUSH
74509: CALL_OW 3
74513: ST_TO_ADDR
74514: GO 74491
74516: POP
74517: POP
// end ;
74518: LD_VAR 0 3
74522: RET
// export function ComExit ( unit ) ; var tmp ; begin
74523: LD_INT 0
74525: PPUSH
74526: PPUSH
// if not IsInUnit ( unit ) then
74527: LD_VAR 0 1
74531: PPUSH
74532: CALL_OW 310
74536: NOT
74537: IFFALSE 74541
// exit ;
74539: GO 74601
// tmp := IsInUnit ( unit ) ;
74541: LD_ADDR_VAR 0 3
74545: PUSH
74546: LD_VAR 0 1
74550: PPUSH
74551: CALL_OW 310
74555: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74556: LD_VAR 0 3
74560: PPUSH
74561: CALL_OW 247
74565: PUSH
74566: LD_INT 2
74568: EQUAL
74569: IFFALSE 74582
// ComExitVehicle ( unit ) else
74571: LD_VAR 0 1
74575: PPUSH
74576: CALL_OW 121
74580: GO 74591
// ComExitBuilding ( unit ) ;
74582: LD_VAR 0 1
74586: PPUSH
74587: CALL_OW 122
// result := tmp ;
74591: LD_ADDR_VAR 0 2
74595: PUSH
74596: LD_VAR 0 3
74600: ST_TO_ADDR
// end ;
74601: LD_VAR 0 2
74605: RET
// export function ComExitAll ( units ) ; var i ; begin
74606: LD_INT 0
74608: PPUSH
74609: PPUSH
// if not units then
74610: LD_VAR 0 1
74614: NOT
74615: IFFALSE 74619
// exit ;
74617: GO 74645
// for i in units do
74619: LD_ADDR_VAR 0 3
74623: PUSH
74624: LD_VAR 0 1
74628: PUSH
74629: FOR_IN
74630: IFFALSE 74643
// ComExit ( i ) ;
74632: LD_VAR 0 3
74636: PPUSH
74637: CALL 74523 0 1
74641: GO 74629
74643: POP
74644: POP
// end ;
74645: LD_VAR 0 2
74649: RET
// export function ResetHc ; begin
74650: LD_INT 0
74652: PPUSH
// InitHc ;
74653: CALL_OW 19
// hc_importance := 0 ;
74657: LD_ADDR_OWVAR 32
74661: PUSH
74662: LD_INT 0
74664: ST_TO_ADDR
// end ;
74665: LD_VAR 0 1
74669: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74670: LD_INT 0
74672: PPUSH
74673: PPUSH
74674: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74675: LD_ADDR_VAR 0 6
74679: PUSH
74680: LD_VAR 0 1
74684: PUSH
74685: LD_VAR 0 3
74689: PLUS
74690: PUSH
74691: LD_INT 2
74693: DIV
74694: ST_TO_ADDR
// if _x < 0 then
74695: LD_VAR 0 6
74699: PUSH
74700: LD_INT 0
74702: LESS
74703: IFFALSE 74720
// _x := _x * - 1 ;
74705: LD_ADDR_VAR 0 6
74709: PUSH
74710: LD_VAR 0 6
74714: PUSH
74715: LD_INT 1
74717: NEG
74718: MUL
74719: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74720: LD_ADDR_VAR 0 7
74724: PUSH
74725: LD_VAR 0 2
74729: PUSH
74730: LD_VAR 0 4
74734: PLUS
74735: PUSH
74736: LD_INT 2
74738: DIV
74739: ST_TO_ADDR
// if _y < 0 then
74740: LD_VAR 0 7
74744: PUSH
74745: LD_INT 0
74747: LESS
74748: IFFALSE 74765
// _y := _y * - 1 ;
74750: LD_ADDR_VAR 0 7
74754: PUSH
74755: LD_VAR 0 7
74759: PUSH
74760: LD_INT 1
74762: NEG
74763: MUL
74764: ST_TO_ADDR
// result := [ _x , _y ] ;
74765: LD_ADDR_VAR 0 5
74769: PUSH
74770: LD_VAR 0 6
74774: PUSH
74775: LD_VAR 0 7
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: ST_TO_ADDR
// end ;
74784: LD_VAR 0 5
74788: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74789: LD_INT 0
74791: PPUSH
74792: PPUSH
74793: PPUSH
74794: PPUSH
// task := GetTaskList ( unit ) ;
74795: LD_ADDR_VAR 0 7
74799: PUSH
74800: LD_VAR 0 1
74804: PPUSH
74805: CALL_OW 437
74809: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74810: LD_VAR 0 7
74814: NOT
74815: PUSH
74816: LD_VAR 0 1
74820: PPUSH
74821: LD_VAR 0 2
74825: PPUSH
74826: CALL_OW 308
74830: NOT
74831: AND
74832: IFFALSE 74836
// exit ;
74834: GO 74954
// if IsInArea ( unit , area ) then
74836: LD_VAR 0 1
74840: PPUSH
74841: LD_VAR 0 2
74845: PPUSH
74846: CALL_OW 308
74850: IFFALSE 74868
// begin ComMoveToArea ( unit , goAway ) ;
74852: LD_VAR 0 1
74856: PPUSH
74857: LD_VAR 0 3
74861: PPUSH
74862: CALL_OW 113
// exit ;
74866: GO 74954
// end ; if task [ 1 ] [ 1 ] <> M then
74868: LD_VAR 0 7
74872: PUSH
74873: LD_INT 1
74875: ARRAY
74876: PUSH
74877: LD_INT 1
74879: ARRAY
74880: PUSH
74881: LD_STRING M
74883: NONEQUAL
74884: IFFALSE 74888
// exit ;
74886: GO 74954
// x := task [ 1 ] [ 2 ] ;
74888: LD_ADDR_VAR 0 5
74892: PUSH
74893: LD_VAR 0 7
74897: PUSH
74898: LD_INT 1
74900: ARRAY
74901: PUSH
74902: LD_INT 2
74904: ARRAY
74905: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74906: LD_ADDR_VAR 0 6
74910: PUSH
74911: LD_VAR 0 7
74915: PUSH
74916: LD_INT 1
74918: ARRAY
74919: PUSH
74920: LD_INT 3
74922: ARRAY
74923: ST_TO_ADDR
// if InArea ( x , y , area ) then
74924: LD_VAR 0 5
74928: PPUSH
74929: LD_VAR 0 6
74933: PPUSH
74934: LD_VAR 0 2
74938: PPUSH
74939: CALL_OW 309
74943: IFFALSE 74954
// ComStop ( unit ) ;
74945: LD_VAR 0 1
74949: PPUSH
74950: CALL_OW 141
// end ;
74954: LD_VAR 0 4
74958: RET
// export function Abs ( value ) ; begin
74959: LD_INT 0
74961: PPUSH
// result := value ;
74962: LD_ADDR_VAR 0 2
74966: PUSH
74967: LD_VAR 0 1
74971: ST_TO_ADDR
// if value < 0 then
74972: LD_VAR 0 1
74976: PUSH
74977: LD_INT 0
74979: LESS
74980: IFFALSE 74997
// result := value * - 1 ;
74982: LD_ADDR_VAR 0 2
74986: PUSH
74987: LD_VAR 0 1
74991: PUSH
74992: LD_INT 1
74994: NEG
74995: MUL
74996: ST_TO_ADDR
// end ;
74997: LD_VAR 0 2
75001: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75002: LD_INT 0
75004: PPUSH
75005: PPUSH
75006: PPUSH
75007: PPUSH
75008: PPUSH
75009: PPUSH
75010: PPUSH
75011: PPUSH
// if not unit or not building then
75012: LD_VAR 0 1
75016: NOT
75017: PUSH
75018: LD_VAR 0 2
75022: NOT
75023: OR
75024: IFFALSE 75028
// exit ;
75026: GO 75254
// x := GetX ( building ) ;
75028: LD_ADDR_VAR 0 4
75032: PUSH
75033: LD_VAR 0 2
75037: PPUSH
75038: CALL_OW 250
75042: ST_TO_ADDR
// y := GetY ( building ) ;
75043: LD_ADDR_VAR 0 6
75047: PUSH
75048: LD_VAR 0 2
75052: PPUSH
75053: CALL_OW 251
75057: ST_TO_ADDR
// d := GetDir ( building ) ;
75058: LD_ADDR_VAR 0 8
75062: PUSH
75063: LD_VAR 0 2
75067: PPUSH
75068: CALL_OW 254
75072: ST_TO_ADDR
// r := 4 ;
75073: LD_ADDR_VAR 0 9
75077: PUSH
75078: LD_INT 4
75080: ST_TO_ADDR
// for i := 1 to 5 do
75081: LD_ADDR_VAR 0 10
75085: PUSH
75086: DOUBLE
75087: LD_INT 1
75089: DEC
75090: ST_TO_ADDR
75091: LD_INT 5
75093: PUSH
75094: FOR_TO
75095: IFFALSE 75252
// begin _x := ShiftX ( x , d , r + i ) ;
75097: LD_ADDR_VAR 0 5
75101: PUSH
75102: LD_VAR 0 4
75106: PPUSH
75107: LD_VAR 0 8
75111: PPUSH
75112: LD_VAR 0 9
75116: PUSH
75117: LD_VAR 0 10
75121: PLUS
75122: PPUSH
75123: CALL_OW 272
75127: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75128: LD_ADDR_VAR 0 7
75132: PUSH
75133: LD_VAR 0 6
75137: PPUSH
75138: LD_VAR 0 8
75142: PPUSH
75143: LD_VAR 0 9
75147: PUSH
75148: LD_VAR 0 10
75152: PLUS
75153: PPUSH
75154: CALL_OW 273
75158: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75159: LD_VAR 0 5
75163: PPUSH
75164: LD_VAR 0 7
75168: PPUSH
75169: CALL_OW 488
75173: PUSH
75174: LD_VAR 0 5
75178: PPUSH
75179: LD_VAR 0 7
75183: PPUSH
75184: CALL_OW 428
75188: PPUSH
75189: CALL_OW 247
75193: PUSH
75194: LD_INT 3
75196: PUSH
75197: LD_INT 2
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: IN
75204: NOT
75205: AND
75206: IFFALSE 75250
// begin ComMoveXY ( unit , _x , _y ) ;
75208: LD_VAR 0 1
75212: PPUSH
75213: LD_VAR 0 5
75217: PPUSH
75218: LD_VAR 0 7
75222: PPUSH
75223: CALL_OW 111
// result := [ _x , _y ] ;
75227: LD_ADDR_VAR 0 3
75231: PUSH
75232: LD_VAR 0 5
75236: PUSH
75237: LD_VAR 0 7
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: ST_TO_ADDR
// exit ;
75246: POP
75247: POP
75248: GO 75254
// end ; end ;
75250: GO 75094
75252: POP
75253: POP
// end ;
75254: LD_VAR 0 3
75258: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75259: LD_INT 0
75261: PPUSH
75262: PPUSH
75263: PPUSH
// result := 0 ;
75264: LD_ADDR_VAR 0 3
75268: PUSH
75269: LD_INT 0
75271: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75272: LD_VAR 0 1
75276: PUSH
75277: LD_INT 0
75279: LESS
75280: PUSH
75281: LD_VAR 0 1
75285: PUSH
75286: LD_INT 8
75288: GREATER
75289: OR
75290: PUSH
75291: LD_VAR 0 2
75295: PUSH
75296: LD_INT 0
75298: LESS
75299: OR
75300: PUSH
75301: LD_VAR 0 2
75305: PUSH
75306: LD_INT 8
75308: GREATER
75309: OR
75310: IFFALSE 75314
// exit ;
75312: GO 75389
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75314: LD_ADDR_VAR 0 4
75318: PUSH
75319: LD_INT 22
75321: PUSH
75322: LD_VAR 0 2
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PPUSH
75331: CALL_OW 69
75335: PUSH
75336: FOR_IN
75337: IFFALSE 75387
// begin un := UnitShoot ( i ) ;
75339: LD_ADDR_VAR 0 5
75343: PUSH
75344: LD_VAR 0 4
75348: PPUSH
75349: CALL_OW 504
75353: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75354: LD_VAR 0 5
75358: PPUSH
75359: CALL_OW 255
75363: PUSH
75364: LD_VAR 0 1
75368: EQUAL
75369: IFFALSE 75385
// begin result := un ;
75371: LD_ADDR_VAR 0 3
75375: PUSH
75376: LD_VAR 0 5
75380: ST_TO_ADDR
// exit ;
75381: POP
75382: POP
75383: GO 75389
// end ; end ;
75385: GO 75336
75387: POP
75388: POP
// end ;
75389: LD_VAR 0 3
75393: RET
// export function GetCargoBay ( units ) ; begin
75394: LD_INT 0
75396: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75397: LD_ADDR_VAR 0 2
75401: PUSH
75402: LD_VAR 0 1
75406: PPUSH
75407: LD_INT 2
75409: PUSH
75410: LD_INT 34
75412: PUSH
75413: LD_INT 12
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: PUSH
75420: LD_INT 34
75422: PUSH
75423: LD_INT 51
75425: PUSH
75426: EMPTY
75427: LIST
75428: LIST
75429: PUSH
75430: LD_INT 34
75432: PUSH
75433: LD_INT 32
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: PUSH
75440: LD_INT 34
75442: PUSH
75443: LD_INT 89
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: PPUSH
75457: CALL_OW 72
75461: ST_TO_ADDR
// end ;
75462: LD_VAR 0 2
75466: RET
// export function Negate ( value ) ; begin
75467: LD_INT 0
75469: PPUSH
// result := not value ;
75470: LD_ADDR_VAR 0 2
75474: PUSH
75475: LD_VAR 0 1
75479: NOT
75480: ST_TO_ADDR
// end ;
75481: LD_VAR 0 2
75485: RET
// export function Inc ( value ) ; begin
75486: LD_INT 0
75488: PPUSH
// result := value + 1 ;
75489: LD_ADDR_VAR 0 2
75493: PUSH
75494: LD_VAR 0 1
75498: PUSH
75499: LD_INT 1
75501: PLUS
75502: ST_TO_ADDR
// end ;
75503: LD_VAR 0 2
75507: RET
// export function Dec ( value ) ; begin
75508: LD_INT 0
75510: PPUSH
// result := value - 1 ;
75511: LD_ADDR_VAR 0 2
75515: PUSH
75516: LD_VAR 0 1
75520: PUSH
75521: LD_INT 1
75523: MINUS
75524: ST_TO_ADDR
// end ;
75525: LD_VAR 0 2
75529: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75530: LD_INT 0
75532: PPUSH
75533: PPUSH
75534: PPUSH
75535: PPUSH
75536: PPUSH
75537: PPUSH
75538: PPUSH
75539: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75540: LD_VAR 0 1
75544: PPUSH
75545: LD_VAR 0 2
75549: PPUSH
75550: CALL_OW 488
75554: NOT
75555: PUSH
75556: LD_VAR 0 3
75560: PPUSH
75561: LD_VAR 0 4
75565: PPUSH
75566: CALL_OW 488
75570: NOT
75571: OR
75572: IFFALSE 75585
// begin result := - 1 ;
75574: LD_ADDR_VAR 0 5
75578: PUSH
75579: LD_INT 1
75581: NEG
75582: ST_TO_ADDR
// exit ;
75583: GO 75820
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75585: LD_ADDR_VAR 0 12
75589: PUSH
75590: LD_VAR 0 1
75594: PPUSH
75595: LD_VAR 0 2
75599: PPUSH
75600: LD_VAR 0 3
75604: PPUSH
75605: LD_VAR 0 4
75609: PPUSH
75610: CALL 74670 0 4
75614: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75615: LD_ADDR_VAR 0 11
75619: PUSH
75620: LD_VAR 0 1
75624: PPUSH
75625: LD_VAR 0 2
75629: PPUSH
75630: LD_VAR 0 12
75634: PUSH
75635: LD_INT 1
75637: ARRAY
75638: PPUSH
75639: LD_VAR 0 12
75643: PUSH
75644: LD_INT 2
75646: ARRAY
75647: PPUSH
75648: CALL_OW 298
75652: ST_TO_ADDR
// distance := 9999 ;
75653: LD_ADDR_VAR 0 10
75657: PUSH
75658: LD_INT 9999
75660: ST_TO_ADDR
// for i := 0 to 5 do
75661: LD_ADDR_VAR 0 6
75665: PUSH
75666: DOUBLE
75667: LD_INT 0
75669: DEC
75670: ST_TO_ADDR
75671: LD_INT 5
75673: PUSH
75674: FOR_TO
75675: IFFALSE 75818
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75677: LD_ADDR_VAR 0 7
75681: PUSH
75682: LD_VAR 0 1
75686: PPUSH
75687: LD_VAR 0 6
75691: PPUSH
75692: LD_VAR 0 11
75696: PPUSH
75697: CALL_OW 272
75701: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75702: LD_ADDR_VAR 0 8
75706: PUSH
75707: LD_VAR 0 2
75711: PPUSH
75712: LD_VAR 0 6
75716: PPUSH
75717: LD_VAR 0 11
75721: PPUSH
75722: CALL_OW 273
75726: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75727: LD_VAR 0 7
75731: PPUSH
75732: LD_VAR 0 8
75736: PPUSH
75737: CALL_OW 488
75741: NOT
75742: IFFALSE 75746
// continue ;
75744: GO 75674
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75746: LD_ADDR_VAR 0 9
75750: PUSH
75751: LD_VAR 0 12
75755: PUSH
75756: LD_INT 1
75758: ARRAY
75759: PPUSH
75760: LD_VAR 0 12
75764: PUSH
75765: LD_INT 2
75767: ARRAY
75768: PPUSH
75769: LD_VAR 0 7
75773: PPUSH
75774: LD_VAR 0 8
75778: PPUSH
75779: CALL_OW 298
75783: ST_TO_ADDR
// if tmp < distance then
75784: LD_VAR 0 9
75788: PUSH
75789: LD_VAR 0 10
75793: LESS
75794: IFFALSE 75816
// begin result := i ;
75796: LD_ADDR_VAR 0 5
75800: PUSH
75801: LD_VAR 0 6
75805: ST_TO_ADDR
// distance := tmp ;
75806: LD_ADDR_VAR 0 10
75810: PUSH
75811: LD_VAR 0 9
75815: ST_TO_ADDR
// end ; end ;
75816: GO 75674
75818: POP
75819: POP
// end ;
75820: LD_VAR 0 5
75824: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75825: LD_INT 0
75827: PPUSH
75828: PPUSH
// if not driver or not IsInUnit ( driver ) then
75829: LD_VAR 0 1
75833: NOT
75834: PUSH
75835: LD_VAR 0 1
75839: PPUSH
75840: CALL_OW 310
75844: NOT
75845: OR
75846: IFFALSE 75850
// exit ;
75848: GO 75940
// vehicle := IsInUnit ( driver ) ;
75850: LD_ADDR_VAR 0 3
75854: PUSH
75855: LD_VAR 0 1
75859: PPUSH
75860: CALL_OW 310
75864: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75865: LD_VAR 0 1
75869: PPUSH
75870: LD_STRING \
75872: PUSH
75873: LD_INT 0
75875: PUSH
75876: LD_INT 0
75878: PUSH
75879: LD_INT 0
75881: PUSH
75882: LD_INT 0
75884: PUSH
75885: LD_INT 0
75887: PUSH
75888: LD_INT 0
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: PUSH
75900: LD_STRING E
75902: PUSH
75903: LD_INT 0
75905: PUSH
75906: LD_INT 0
75908: PUSH
75909: LD_VAR 0 3
75913: PUSH
75914: LD_INT 0
75916: PUSH
75917: LD_INT 0
75919: PUSH
75920: LD_INT 0
75922: PUSH
75923: EMPTY
75924: LIST
75925: LIST
75926: LIST
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: PPUSH
75936: CALL_OW 446
// end ;
75940: LD_VAR 0 2
75944: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75945: LD_INT 0
75947: PPUSH
75948: PPUSH
// if not driver or not IsInUnit ( driver ) then
75949: LD_VAR 0 1
75953: NOT
75954: PUSH
75955: LD_VAR 0 1
75959: PPUSH
75960: CALL_OW 310
75964: NOT
75965: OR
75966: IFFALSE 75970
// exit ;
75968: GO 76060
// vehicle := IsInUnit ( driver ) ;
75970: LD_ADDR_VAR 0 3
75974: PUSH
75975: LD_VAR 0 1
75979: PPUSH
75980: CALL_OW 310
75984: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75985: LD_VAR 0 1
75989: PPUSH
75990: LD_STRING \
75992: PUSH
75993: LD_INT 0
75995: PUSH
75996: LD_INT 0
75998: PUSH
75999: LD_INT 0
76001: PUSH
76002: LD_INT 0
76004: PUSH
76005: LD_INT 0
76007: PUSH
76008: LD_INT 0
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: PUSH
76020: LD_STRING E
76022: PUSH
76023: LD_INT 0
76025: PUSH
76026: LD_INT 0
76028: PUSH
76029: LD_VAR 0 3
76033: PUSH
76034: LD_INT 0
76036: PUSH
76037: LD_INT 0
76039: PUSH
76040: LD_INT 0
76042: PUSH
76043: EMPTY
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: PPUSH
76056: CALL_OW 447
// end ;
76060: LD_VAR 0 2
76064: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76065: LD_INT 0
76067: PPUSH
76068: PPUSH
76069: PPUSH
// tmp := [ ] ;
76070: LD_ADDR_VAR 0 5
76074: PUSH
76075: EMPTY
76076: ST_TO_ADDR
// for i in units do
76077: LD_ADDR_VAR 0 4
76081: PUSH
76082: LD_VAR 0 1
76086: PUSH
76087: FOR_IN
76088: IFFALSE 76126
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76090: LD_ADDR_VAR 0 5
76094: PUSH
76095: LD_VAR 0 5
76099: PPUSH
76100: LD_VAR 0 5
76104: PUSH
76105: LD_INT 1
76107: PLUS
76108: PPUSH
76109: LD_VAR 0 4
76113: PPUSH
76114: CALL_OW 256
76118: PPUSH
76119: CALL_OW 2
76123: ST_TO_ADDR
76124: GO 76087
76126: POP
76127: POP
// if not tmp then
76128: LD_VAR 0 5
76132: NOT
76133: IFFALSE 76137
// exit ;
76135: GO 76185
// if asc then
76137: LD_VAR 0 2
76141: IFFALSE 76165
// result := SortListByListAsc ( units , tmp ) else
76143: LD_ADDR_VAR 0 3
76147: PUSH
76148: LD_VAR 0 1
76152: PPUSH
76153: LD_VAR 0 5
76157: PPUSH
76158: CALL_OW 76
76162: ST_TO_ADDR
76163: GO 76185
// result := SortListByListDesc ( units , tmp ) ;
76165: LD_ADDR_VAR 0 3
76169: PUSH
76170: LD_VAR 0 1
76174: PPUSH
76175: LD_VAR 0 5
76179: PPUSH
76180: CALL_OW 77
76184: ST_TO_ADDR
// end ;
76185: LD_VAR 0 3
76189: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76190: LD_INT 0
76192: PPUSH
76193: PPUSH
// task := GetTaskList ( mech ) ;
76194: LD_ADDR_VAR 0 4
76198: PUSH
76199: LD_VAR 0 1
76203: PPUSH
76204: CALL_OW 437
76208: ST_TO_ADDR
// if not task then
76209: LD_VAR 0 4
76213: NOT
76214: IFFALSE 76218
// exit ;
76216: GO 76260
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76218: LD_ADDR_VAR 0 3
76222: PUSH
76223: LD_VAR 0 4
76227: PUSH
76228: LD_INT 1
76230: ARRAY
76231: PUSH
76232: LD_INT 1
76234: ARRAY
76235: PUSH
76236: LD_STRING r
76238: EQUAL
76239: PUSH
76240: LD_VAR 0 4
76244: PUSH
76245: LD_INT 1
76247: ARRAY
76248: PUSH
76249: LD_INT 4
76251: ARRAY
76252: PUSH
76253: LD_VAR 0 2
76257: EQUAL
76258: AND
76259: ST_TO_ADDR
// end ;
76260: LD_VAR 0 3
76264: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76265: LD_INT 0
76267: PPUSH
// SetDir ( unit , d ) ;
76268: LD_VAR 0 1
76272: PPUSH
76273: LD_VAR 0 4
76277: PPUSH
76278: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76282: LD_VAR 0 1
76286: PPUSH
76287: LD_VAR 0 2
76291: PPUSH
76292: LD_VAR 0 3
76296: PPUSH
76297: LD_VAR 0 5
76301: PPUSH
76302: CALL_OW 48
// end ;
76306: LD_VAR 0 6
76310: RET
// export function ToNaturalNumber ( number ) ; begin
76311: LD_INT 0
76313: PPUSH
// result := number div 1 ;
76314: LD_ADDR_VAR 0 2
76318: PUSH
76319: LD_VAR 0 1
76323: PUSH
76324: LD_INT 1
76326: DIV
76327: ST_TO_ADDR
// if number < 0 then
76328: LD_VAR 0 1
76332: PUSH
76333: LD_INT 0
76335: LESS
76336: IFFALSE 76346
// result := 0 ;
76338: LD_ADDR_VAR 0 2
76342: PUSH
76343: LD_INT 0
76345: ST_TO_ADDR
// end ;
76346: LD_VAR 0 2
76350: RET
// export function SortByClass ( units , class ) ; var un ; begin
76351: LD_INT 0
76353: PPUSH
76354: PPUSH
// if not units or not class then
76355: LD_VAR 0 1
76359: NOT
76360: PUSH
76361: LD_VAR 0 2
76365: NOT
76366: OR
76367: IFFALSE 76371
// exit ;
76369: GO 76466
// result := [ ] ;
76371: LD_ADDR_VAR 0 3
76375: PUSH
76376: EMPTY
76377: ST_TO_ADDR
// for un in units do
76378: LD_ADDR_VAR 0 4
76382: PUSH
76383: LD_VAR 0 1
76387: PUSH
76388: FOR_IN
76389: IFFALSE 76464
// if GetClass ( un ) = class then
76391: LD_VAR 0 4
76395: PPUSH
76396: CALL_OW 257
76400: PUSH
76401: LD_VAR 0 2
76405: EQUAL
76406: IFFALSE 76433
// result := Insert ( result , 1 , un ) else
76408: LD_ADDR_VAR 0 3
76412: PUSH
76413: LD_VAR 0 3
76417: PPUSH
76418: LD_INT 1
76420: PPUSH
76421: LD_VAR 0 4
76425: PPUSH
76426: CALL_OW 2
76430: ST_TO_ADDR
76431: GO 76462
// result := Replace ( result , result + 1 , un ) ;
76433: LD_ADDR_VAR 0 3
76437: PUSH
76438: LD_VAR 0 3
76442: PPUSH
76443: LD_VAR 0 3
76447: PUSH
76448: LD_INT 1
76450: PLUS
76451: PPUSH
76452: LD_VAR 0 4
76456: PPUSH
76457: CALL_OW 1
76461: ST_TO_ADDR
76462: GO 76388
76464: POP
76465: POP
// end ;
76466: LD_VAR 0 3
76470: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76471: LD_INT 0
76473: PPUSH
76474: PPUSH
76475: PPUSH
76476: PPUSH
76477: PPUSH
76478: PPUSH
76479: PPUSH
// result := [ ] ;
76480: LD_ADDR_VAR 0 4
76484: PUSH
76485: EMPTY
76486: ST_TO_ADDR
// if x - r < 0 then
76487: LD_VAR 0 1
76491: PUSH
76492: LD_VAR 0 3
76496: MINUS
76497: PUSH
76498: LD_INT 0
76500: LESS
76501: IFFALSE 76513
// min_x := 0 else
76503: LD_ADDR_VAR 0 8
76507: PUSH
76508: LD_INT 0
76510: ST_TO_ADDR
76511: GO 76529
// min_x := x - r ;
76513: LD_ADDR_VAR 0 8
76517: PUSH
76518: LD_VAR 0 1
76522: PUSH
76523: LD_VAR 0 3
76527: MINUS
76528: ST_TO_ADDR
// if y - r < 0 then
76529: LD_VAR 0 2
76533: PUSH
76534: LD_VAR 0 3
76538: MINUS
76539: PUSH
76540: LD_INT 0
76542: LESS
76543: IFFALSE 76555
// min_y := 0 else
76545: LD_ADDR_VAR 0 7
76549: PUSH
76550: LD_INT 0
76552: ST_TO_ADDR
76553: GO 76571
// min_y := y - r ;
76555: LD_ADDR_VAR 0 7
76559: PUSH
76560: LD_VAR 0 2
76564: PUSH
76565: LD_VAR 0 3
76569: MINUS
76570: ST_TO_ADDR
// max_x := x + r ;
76571: LD_ADDR_VAR 0 9
76575: PUSH
76576: LD_VAR 0 1
76580: PUSH
76581: LD_VAR 0 3
76585: PLUS
76586: ST_TO_ADDR
// max_y := y + r ;
76587: LD_ADDR_VAR 0 10
76591: PUSH
76592: LD_VAR 0 2
76596: PUSH
76597: LD_VAR 0 3
76601: PLUS
76602: ST_TO_ADDR
// for _x = min_x to max_x do
76603: LD_ADDR_VAR 0 5
76607: PUSH
76608: DOUBLE
76609: LD_VAR 0 8
76613: DEC
76614: ST_TO_ADDR
76615: LD_VAR 0 9
76619: PUSH
76620: FOR_TO
76621: IFFALSE 76722
// for _y = min_y to max_y do
76623: LD_ADDR_VAR 0 6
76627: PUSH
76628: DOUBLE
76629: LD_VAR 0 7
76633: DEC
76634: ST_TO_ADDR
76635: LD_VAR 0 10
76639: PUSH
76640: FOR_TO
76641: IFFALSE 76718
// begin if not ValidHex ( _x , _y ) then
76643: LD_VAR 0 5
76647: PPUSH
76648: LD_VAR 0 6
76652: PPUSH
76653: CALL_OW 488
76657: NOT
76658: IFFALSE 76662
// continue ;
76660: GO 76640
// if GetResourceTypeXY ( _x , _y ) then
76662: LD_VAR 0 5
76666: PPUSH
76667: LD_VAR 0 6
76671: PPUSH
76672: CALL_OW 283
76676: IFFALSE 76716
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76678: LD_ADDR_VAR 0 4
76682: PUSH
76683: LD_VAR 0 4
76687: PPUSH
76688: LD_VAR 0 4
76692: PUSH
76693: LD_INT 1
76695: PLUS
76696: PPUSH
76697: LD_VAR 0 5
76701: PUSH
76702: LD_VAR 0 6
76706: PUSH
76707: EMPTY
76708: LIST
76709: LIST
76710: PPUSH
76711: CALL_OW 1
76715: ST_TO_ADDR
// end ;
76716: GO 76640
76718: POP
76719: POP
76720: GO 76620
76722: POP
76723: POP
// end ;
76724: LD_VAR 0 4
76728: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76729: LD_INT 0
76731: PPUSH
76732: PPUSH
76733: PPUSH
76734: PPUSH
76735: PPUSH
76736: PPUSH
76737: PPUSH
76738: PPUSH
// if not units then
76739: LD_VAR 0 1
76743: NOT
76744: IFFALSE 76748
// exit ;
76746: GO 77272
// result := UnitFilter ( units , [ f_ok ] ) ;
76748: LD_ADDR_VAR 0 3
76752: PUSH
76753: LD_VAR 0 1
76757: PPUSH
76758: LD_INT 50
76760: PUSH
76761: EMPTY
76762: LIST
76763: PPUSH
76764: CALL_OW 72
76768: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76769: LD_ADDR_VAR 0 8
76773: PUSH
76774: LD_VAR 0 1
76778: PUSH
76779: LD_INT 1
76781: ARRAY
76782: PPUSH
76783: CALL_OW 255
76787: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76788: LD_ADDR_VAR 0 10
76792: PUSH
76793: LD_INT 29
76795: PUSH
76796: LD_INT 91
76798: PUSH
76799: LD_INT 49
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: LIST
76806: ST_TO_ADDR
// if not result then
76807: LD_VAR 0 3
76811: NOT
76812: IFFALSE 76816
// exit ;
76814: GO 77272
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76816: LD_ADDR_VAR 0 5
76820: PUSH
76821: LD_INT 81
76823: PUSH
76824: LD_VAR 0 8
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PPUSH
76833: CALL_OW 69
76837: ST_TO_ADDR
// for i in result do
76838: LD_ADDR_VAR 0 4
76842: PUSH
76843: LD_VAR 0 3
76847: PUSH
76848: FOR_IN
76849: IFFALSE 77270
// begin tag := GetTag ( i ) + 1 ;
76851: LD_ADDR_VAR 0 9
76855: PUSH
76856: LD_VAR 0 4
76860: PPUSH
76861: CALL_OW 110
76865: PUSH
76866: LD_INT 1
76868: PLUS
76869: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76870: LD_ADDR_VAR 0 7
76874: PUSH
76875: LD_VAR 0 4
76879: PPUSH
76880: CALL_OW 250
76884: PPUSH
76885: LD_VAR 0 4
76889: PPUSH
76890: CALL_OW 251
76894: PPUSH
76895: LD_INT 6
76897: PPUSH
76898: CALL 76471 0 3
76902: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76903: LD_VAR 0 4
76907: PPUSH
76908: CALL_OW 247
76912: PUSH
76913: LD_INT 2
76915: EQUAL
76916: PUSH
76917: LD_VAR 0 7
76921: AND
76922: PUSH
76923: LD_VAR 0 4
76927: PPUSH
76928: CALL_OW 264
76932: PUSH
76933: LD_VAR 0 10
76937: IN
76938: NOT
76939: AND
76940: IFFALSE 76979
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76942: LD_VAR 0 4
76946: PPUSH
76947: LD_VAR 0 7
76951: PUSH
76952: LD_INT 1
76954: ARRAY
76955: PUSH
76956: LD_INT 1
76958: ARRAY
76959: PPUSH
76960: LD_VAR 0 7
76964: PUSH
76965: LD_INT 1
76967: ARRAY
76968: PUSH
76969: LD_INT 2
76971: ARRAY
76972: PPUSH
76973: CALL_OW 116
76977: GO 77268
// if path > tag then
76979: LD_VAR 0 2
76983: PUSH
76984: LD_VAR 0 9
76988: GREATER
76989: IFFALSE 77197
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76991: LD_ADDR_VAR 0 6
76995: PUSH
76996: LD_VAR 0 5
77000: PPUSH
77001: LD_INT 91
77003: PUSH
77004: LD_VAR 0 4
77008: PUSH
77009: LD_INT 8
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: LIST
77016: PPUSH
77017: CALL_OW 72
77021: ST_TO_ADDR
// if nearEnemy then
77022: LD_VAR 0 6
77026: IFFALSE 77095
// begin if GetWeapon ( i ) = ru_time_lapser then
77028: LD_VAR 0 4
77032: PPUSH
77033: CALL_OW 264
77037: PUSH
77038: LD_INT 49
77040: EQUAL
77041: IFFALSE 77069
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77043: LD_VAR 0 4
77047: PPUSH
77048: LD_VAR 0 6
77052: PPUSH
77053: LD_VAR 0 4
77057: PPUSH
77058: CALL_OW 74
77062: PPUSH
77063: CALL_OW 112
77067: GO 77093
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77069: LD_VAR 0 4
77073: PPUSH
77074: LD_VAR 0 6
77078: PPUSH
77079: LD_VAR 0 4
77083: PPUSH
77084: CALL_OW 74
77088: PPUSH
77089: CALL_OW 115
// end else
77093: GO 77195
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77095: LD_VAR 0 4
77099: PPUSH
77100: LD_VAR 0 2
77104: PUSH
77105: LD_VAR 0 9
77109: ARRAY
77110: PUSH
77111: LD_INT 1
77113: ARRAY
77114: PPUSH
77115: LD_VAR 0 2
77119: PUSH
77120: LD_VAR 0 9
77124: ARRAY
77125: PUSH
77126: LD_INT 2
77128: ARRAY
77129: PPUSH
77130: CALL_OW 297
77134: PUSH
77135: LD_INT 6
77137: GREATER
77138: IFFALSE 77181
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77140: LD_VAR 0 4
77144: PPUSH
77145: LD_VAR 0 2
77149: PUSH
77150: LD_VAR 0 9
77154: ARRAY
77155: PUSH
77156: LD_INT 1
77158: ARRAY
77159: PPUSH
77160: LD_VAR 0 2
77164: PUSH
77165: LD_VAR 0 9
77169: ARRAY
77170: PUSH
77171: LD_INT 2
77173: ARRAY
77174: PPUSH
77175: CALL_OW 114
77179: GO 77195
// SetTag ( i , tag ) ;
77181: LD_VAR 0 4
77185: PPUSH
77186: LD_VAR 0 9
77190: PPUSH
77191: CALL_OW 109
// end else
77195: GO 77268
// if enemy then
77197: LD_VAR 0 5
77201: IFFALSE 77268
// begin if GetWeapon ( i ) = ru_time_lapser then
77203: LD_VAR 0 4
77207: PPUSH
77208: CALL_OW 264
77212: PUSH
77213: LD_INT 49
77215: EQUAL
77216: IFFALSE 77244
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77218: LD_VAR 0 4
77222: PPUSH
77223: LD_VAR 0 5
77227: PPUSH
77228: LD_VAR 0 4
77232: PPUSH
77233: CALL_OW 74
77237: PPUSH
77238: CALL_OW 112
77242: GO 77268
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77244: LD_VAR 0 4
77248: PPUSH
77249: LD_VAR 0 5
77253: PPUSH
77254: LD_VAR 0 4
77258: PPUSH
77259: CALL_OW 74
77263: PPUSH
77264: CALL_OW 115
// end ; end ;
77268: GO 76848
77270: POP
77271: POP
// end ;
77272: LD_VAR 0 3
77276: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77277: LD_INT 0
77279: PPUSH
77280: PPUSH
77281: PPUSH
// if not unit or IsInUnit ( unit ) then
77282: LD_VAR 0 1
77286: NOT
77287: PUSH
77288: LD_VAR 0 1
77292: PPUSH
77293: CALL_OW 310
77297: OR
77298: IFFALSE 77302
// exit ;
77300: GO 77393
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77302: LD_ADDR_VAR 0 4
77306: PUSH
77307: LD_VAR 0 1
77311: PPUSH
77312: CALL_OW 250
77316: PPUSH
77317: LD_VAR 0 2
77321: PPUSH
77322: LD_INT 1
77324: PPUSH
77325: CALL_OW 272
77329: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77330: LD_ADDR_VAR 0 5
77334: PUSH
77335: LD_VAR 0 1
77339: PPUSH
77340: CALL_OW 251
77344: PPUSH
77345: LD_VAR 0 2
77349: PPUSH
77350: LD_INT 1
77352: PPUSH
77353: CALL_OW 273
77357: ST_TO_ADDR
// if ValidHex ( x , y ) then
77358: LD_VAR 0 4
77362: PPUSH
77363: LD_VAR 0 5
77367: PPUSH
77368: CALL_OW 488
77372: IFFALSE 77393
// ComTurnXY ( unit , x , y ) ;
77374: LD_VAR 0 1
77378: PPUSH
77379: LD_VAR 0 4
77383: PPUSH
77384: LD_VAR 0 5
77388: PPUSH
77389: CALL_OW 118
// end ;
77393: LD_VAR 0 3
77397: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77398: LD_INT 0
77400: PPUSH
77401: PPUSH
// result := false ;
77402: LD_ADDR_VAR 0 3
77406: PUSH
77407: LD_INT 0
77409: ST_TO_ADDR
// if not units then
77410: LD_VAR 0 2
77414: NOT
77415: IFFALSE 77419
// exit ;
77417: GO 77464
// for i in units do
77419: LD_ADDR_VAR 0 4
77423: PUSH
77424: LD_VAR 0 2
77428: PUSH
77429: FOR_IN
77430: IFFALSE 77462
// if See ( side , i ) then
77432: LD_VAR 0 1
77436: PPUSH
77437: LD_VAR 0 4
77441: PPUSH
77442: CALL_OW 292
77446: IFFALSE 77460
// begin result := true ;
77448: LD_ADDR_VAR 0 3
77452: PUSH
77453: LD_INT 1
77455: ST_TO_ADDR
// exit ;
77456: POP
77457: POP
77458: GO 77464
// end ;
77460: GO 77429
77462: POP
77463: POP
// end ;
77464: LD_VAR 0 3
77468: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77469: LD_INT 0
77471: PPUSH
77472: PPUSH
77473: PPUSH
77474: PPUSH
// if not unit or not points then
77475: LD_VAR 0 1
77479: NOT
77480: PUSH
77481: LD_VAR 0 2
77485: NOT
77486: OR
77487: IFFALSE 77491
// exit ;
77489: GO 77581
// dist := 99999 ;
77491: LD_ADDR_VAR 0 5
77495: PUSH
77496: LD_INT 99999
77498: ST_TO_ADDR
// for i in points do
77499: LD_ADDR_VAR 0 4
77503: PUSH
77504: LD_VAR 0 2
77508: PUSH
77509: FOR_IN
77510: IFFALSE 77579
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77512: LD_ADDR_VAR 0 6
77516: PUSH
77517: LD_VAR 0 1
77521: PPUSH
77522: LD_VAR 0 4
77526: PUSH
77527: LD_INT 1
77529: ARRAY
77530: PPUSH
77531: LD_VAR 0 4
77535: PUSH
77536: LD_INT 2
77538: ARRAY
77539: PPUSH
77540: CALL_OW 297
77544: ST_TO_ADDR
// if tmpDist < dist then
77545: LD_VAR 0 6
77549: PUSH
77550: LD_VAR 0 5
77554: LESS
77555: IFFALSE 77577
// begin result := i ;
77557: LD_ADDR_VAR 0 3
77561: PUSH
77562: LD_VAR 0 4
77566: ST_TO_ADDR
// dist := tmpDist ;
77567: LD_ADDR_VAR 0 5
77571: PUSH
77572: LD_VAR 0 6
77576: ST_TO_ADDR
// end ; end ;
77577: GO 77509
77579: POP
77580: POP
// end ;
77581: LD_VAR 0 3
77585: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77586: LD_INT 0
77588: PPUSH
// uc_side := side ;
77589: LD_ADDR_OWVAR 20
77593: PUSH
77594: LD_VAR 0 1
77598: ST_TO_ADDR
// uc_nation := 3 ;
77599: LD_ADDR_OWVAR 21
77603: PUSH
77604: LD_INT 3
77606: ST_TO_ADDR
// vc_chassis := 25 ;
77607: LD_ADDR_OWVAR 37
77611: PUSH
77612: LD_INT 25
77614: ST_TO_ADDR
// vc_engine := engine_siberite ;
77615: LD_ADDR_OWVAR 39
77619: PUSH
77620: LD_INT 3
77622: ST_TO_ADDR
// vc_control := control_computer ;
77623: LD_ADDR_OWVAR 38
77627: PUSH
77628: LD_INT 3
77630: ST_TO_ADDR
// vc_weapon := 59 ;
77631: LD_ADDR_OWVAR 40
77635: PUSH
77636: LD_INT 59
77638: ST_TO_ADDR
// result := CreateVehicle ;
77639: LD_ADDR_VAR 0 5
77643: PUSH
77644: CALL_OW 45
77648: ST_TO_ADDR
// SetDir ( result , d ) ;
77649: LD_VAR 0 5
77653: PPUSH
77654: LD_VAR 0 4
77658: PPUSH
77659: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77663: LD_VAR 0 5
77667: PPUSH
77668: LD_VAR 0 2
77672: PPUSH
77673: LD_VAR 0 3
77677: PPUSH
77678: LD_INT 0
77680: PPUSH
77681: CALL_OW 48
// end ;
77685: LD_VAR 0 5
77689: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77690: LD_INT 0
77692: PPUSH
77693: PPUSH
77694: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77695: LD_ADDR_VAR 0 2
77699: PUSH
77700: LD_INT 0
77702: PUSH
77703: LD_INT 0
77705: PUSH
77706: LD_INT 0
77708: PUSH
77709: LD_INT 0
77711: PUSH
77712: EMPTY
77713: LIST
77714: LIST
77715: LIST
77716: LIST
77717: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77718: LD_VAR 0 1
77722: NOT
77723: PUSH
77724: LD_VAR 0 1
77728: PPUSH
77729: CALL_OW 264
77733: PUSH
77734: LD_INT 12
77736: PUSH
77737: LD_INT 51
77739: PUSH
77740: LD_INT 32
77742: PUSH
77743: LD_INT 89
77745: PUSH
77746: EMPTY
77747: LIST
77748: LIST
77749: LIST
77750: LIST
77751: IN
77752: NOT
77753: OR
77754: IFFALSE 77758
// exit ;
77756: GO 77856
// for i := 1 to 3 do
77758: LD_ADDR_VAR 0 3
77762: PUSH
77763: DOUBLE
77764: LD_INT 1
77766: DEC
77767: ST_TO_ADDR
77768: LD_INT 3
77770: PUSH
77771: FOR_TO
77772: IFFALSE 77854
// begin tmp := GetCargo ( cargo , i ) ;
77774: LD_ADDR_VAR 0 4
77778: PUSH
77779: LD_VAR 0 1
77783: PPUSH
77784: LD_VAR 0 3
77788: PPUSH
77789: CALL_OW 289
77793: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77794: LD_ADDR_VAR 0 2
77798: PUSH
77799: LD_VAR 0 2
77803: PPUSH
77804: LD_VAR 0 3
77808: PPUSH
77809: LD_VAR 0 4
77813: PPUSH
77814: CALL_OW 1
77818: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77819: LD_ADDR_VAR 0 2
77823: PUSH
77824: LD_VAR 0 2
77828: PPUSH
77829: LD_INT 4
77831: PPUSH
77832: LD_VAR 0 2
77836: PUSH
77837: LD_INT 4
77839: ARRAY
77840: PUSH
77841: LD_VAR 0 4
77845: PLUS
77846: PPUSH
77847: CALL_OW 1
77851: ST_TO_ADDR
// end ;
77852: GO 77771
77854: POP
77855: POP
// end ;
77856: LD_VAR 0 2
77860: RET
// export function Length ( array ) ; begin
77861: LD_INT 0
77863: PPUSH
// result := array + 0 ;
77864: LD_ADDR_VAR 0 2
77868: PUSH
77869: LD_VAR 0 1
77873: PUSH
77874: LD_INT 0
77876: PLUS
77877: ST_TO_ADDR
// end ;
77878: LD_VAR 0 2
77882: RET
// export function PrepareArray ( array ) ; begin
77883: LD_INT 0
77885: PPUSH
// result := array diff 0 ;
77886: LD_ADDR_VAR 0 2
77890: PUSH
77891: LD_VAR 0 1
77895: PUSH
77896: LD_INT 0
77898: DIFF
77899: ST_TO_ADDR
// if not result [ 1 ] then
77900: LD_VAR 0 2
77904: PUSH
77905: LD_INT 1
77907: ARRAY
77908: NOT
77909: IFFALSE 77929
// result := Delete ( result , 1 ) ;
77911: LD_ADDR_VAR 0 2
77915: PUSH
77916: LD_VAR 0 2
77920: PPUSH
77921: LD_INT 1
77923: PPUSH
77924: CALL_OW 3
77928: ST_TO_ADDR
// end ;
77929: LD_VAR 0 2
77933: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77934: LD_INT 0
77936: PPUSH
77937: PPUSH
77938: PPUSH
77939: PPUSH
// sibRocketRange := 25 ;
77940: LD_ADDR_VAR 0 6
77944: PUSH
77945: LD_INT 25
77947: ST_TO_ADDR
// result := false ;
77948: LD_ADDR_VAR 0 4
77952: PUSH
77953: LD_INT 0
77955: ST_TO_ADDR
// for i := 0 to 5 do
77956: LD_ADDR_VAR 0 5
77960: PUSH
77961: DOUBLE
77962: LD_INT 0
77964: DEC
77965: ST_TO_ADDR
77966: LD_INT 5
77968: PUSH
77969: FOR_TO
77970: IFFALSE 78037
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77972: LD_VAR 0 1
77976: PPUSH
77977: LD_VAR 0 5
77981: PPUSH
77982: LD_VAR 0 6
77986: PPUSH
77987: CALL_OW 272
77991: PPUSH
77992: LD_VAR 0 2
77996: PPUSH
77997: LD_VAR 0 5
78001: PPUSH
78002: LD_VAR 0 6
78006: PPUSH
78007: CALL_OW 273
78011: PPUSH
78012: LD_VAR 0 3
78016: PPUSH
78017: CALL_OW 309
78021: IFFALSE 78035
// begin result := true ;
78023: LD_ADDR_VAR 0 4
78027: PUSH
78028: LD_INT 1
78030: ST_TO_ADDR
// exit ;
78031: POP
78032: POP
78033: GO 78039
// end ;
78035: GO 77969
78037: POP
78038: POP
// end ;
78039: LD_VAR 0 4
78043: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78044: LD_INT 0
78046: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78047: LD_VAR 0 1
78051: PPUSH
78052: LD_VAR 0 2
78056: PPUSH
78057: LD_INT 0
78059: PPUSH
78060: LD_INT 0
78062: PPUSH
78063: LD_INT 1
78065: PPUSH
78066: LD_INT 0
78068: PPUSH
78069: CALL_OW 587
// end ; end_of_file
78073: LD_VAR 0 3
78077: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78078: LD_VAR 0 1
78082: PUSH
78083: LD_INT 200
78085: DOUBLE
78086: GREATEREQUAL
78087: IFFALSE 78095
78089: LD_INT 299
78091: DOUBLE
78092: LESSEQUAL
78093: IFTRUE 78097
78095: GO 78129
78097: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78098: LD_VAR 0 1
78102: PPUSH
78103: LD_VAR 0 2
78107: PPUSH
78108: LD_VAR 0 3
78112: PPUSH
78113: LD_VAR 0 4
78117: PPUSH
78118: LD_VAR 0 5
78122: PPUSH
78123: CALL 32744 0 5
78127: GO 78206
78129: LD_INT 300
78131: DOUBLE
78132: GREATEREQUAL
78133: IFFALSE 78141
78135: LD_INT 399
78137: DOUBLE
78138: LESSEQUAL
78139: IFTRUE 78143
78141: GO 78205
78143: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78144: LD_VAR 0 1
78148: PPUSH
78149: LD_VAR 0 2
78153: PPUSH
78154: LD_VAR 0 3
78158: PPUSH
78159: LD_VAR 0 4
78163: PPUSH
78164: LD_VAR 0 5
78168: PPUSH
78169: LD_VAR 0 6
78173: PPUSH
78174: LD_VAR 0 7
78178: PPUSH
78179: LD_VAR 0 8
78183: PPUSH
78184: LD_VAR 0 9
78188: PPUSH
78189: LD_VAR 0 10
78193: PPUSH
78194: LD_VAR 0 11
78198: PPUSH
78199: CALL 29077 0 11
78203: GO 78206
78205: POP
// end ;
78206: PPOPN 11
78208: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78209: LD_VAR 0 1
78213: PPUSH
78214: LD_VAR 0 2
78218: PPUSH
78219: LD_VAR 0 3
78223: PPUSH
78224: LD_VAR 0 4
78228: PPUSH
78229: LD_VAR 0 5
78233: PPUSH
78234: CALL 32480 0 5
// end ; end_of_file
78238: PPOPN 5
78240: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78241: LD_VAR 0 1
78245: PPUSH
78246: LD_VAR 0 2
78250: PPUSH
78251: LD_VAR 0 3
78255: PPUSH
78256: LD_VAR 0 4
78260: PPUSH
78261: LD_VAR 0 5
78265: PPUSH
78266: LD_VAR 0 6
78270: PPUSH
78271: CALL 16697 0 6
// end ;
78275: PPOPN 6
78277: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78278: LD_INT 0
78280: PPUSH
// begin if not units then
78281: LD_VAR 0 1
78285: NOT
78286: IFFALSE 78290
// exit ;
78288: GO 78290
// end ;
78290: PPOPN 7
78292: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78293: CALL 16591 0 0
// end ;
78297: PPOPN 1
78299: END
