// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// AnimateTrees ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 573
// PrepareDifficulty ;
 168: CALL 10287 0 0
// PrepareRussianCommander ;
 172: CALL 11743 0 0
// PrepareSouthBase ;
 176: CALL 11826 0 0
// PrepareNorthBase ;
 180: CALL 12165 0 0
// PrepareOtherRussians ;
 184: CALL 12531 0 0
// PrepareHeroes ;
 188: CALL 10602 0 0
// PrepareLisSquad ;
 192: CALL 10930 0 0
// PrepareOtherAmericans ;
 196: CALL 11275 0 0
// end ; end_of_file
 200: END
// every 1 do var tmp ;
 201: GO 203
 203: DISABLE
 204: LD_INT 0
 206: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 207: LD_EXP 1
 211: PPUSH
 212: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: LD_EXP 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: DIFF
 258: ST_TO_ADDR
// if Cyrus and Bobby then
 259: LD_EXP 3
 263: PUSH
 264: LD_EXP 2
 268: AND
 269: IFFALSE 599
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 271: LD_EXP 3
 275: PPUSH
 276: LD_INT 43
 278: PPUSH
 279: LD_INT 72
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_INT 44
 293: PPUSH
 294: LD_INT 70
 296: PPUSH
 297: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 301: LD_EXP 1
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: LD_INT 73
 311: PPUSH
 312: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 316: LD_EXP 3
 320: PPUSH
 321: LD_STRING D1a-Cyrus-1
 323: PPUSH
 324: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_STRING D1a-JMM-1
 335: PPUSH
 336: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 340: LD_EXP 3
 344: PPUSH
 345: LD_INT 37
 347: PPUSH
 348: LD_INT 66
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 355: LD_EXP 2
 359: PPUSH
 360: LD_INT 41
 362: PPUSH
 363: LD_INT 67
 365: PPUSH
 366: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 370: LD_EXP 1
 374: PPUSH
 375: LD_INT 38
 377: PPUSH
 378: LD_INT 64
 380: PPUSH
 381: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_STRING D1a-Bobby-2
 392: PPUSH
 393: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 397: LD_EXP 3
 401: PPUSH
 402: LD_INT 35
 404: PPUSH
 405: LD_INT 62
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 412: LD_EXP 2
 416: PPUSH
 417: LD_INT 32
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 35
 434: PPUSH
 435: LD_INT 60
 437: PPUSH
 438: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 442: LD_EXP 1
 446: PPUSH
 447: LD_STRING D1a-JMM-2
 449: PPUSH
 450: CALL_OW 88
// ComWalk ( Lisa ) ;
 454: LD_EXP 4
 458: PPUSH
 459: CALL_OW 138
// wait ( 0 0$1 ) ;
 463: LD_INT 35
 465: PPUSH
 466: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 470: LD_EXP 4
 474: PPUSH
 475: LD_EXP 1
 479: PPUSH
 480: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 484: LD_EXP 1
 488: PUSH
 489: LD_EXP 3
 493: PUSH
 494: LD_EXP 2
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: PPUSH
 504: LD_EXP 4
 508: PPUSH
 509: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 513: LD_VAR 0 1
 517: PUSH
 518: LD_INT 1
 520: ARRAY
 521: PPUSH
 522: LD_INT 33
 524: PPUSH
 525: LD_INT 55
 527: PPUSH
 528: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 532: LD_VAR 0 1
 536: PUSH
 537: LD_INT 2
 539: ARRAY
 540: PPUSH
 541: LD_INT 30
 543: PPUSH
 544: LD_INT 54
 546: PPUSH
 547: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 551: LD_VAR 0 1
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_EXP 1
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 569: LD_VAR 0 1
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PPUSH
 578: LD_EXP 1
 582: PPUSH
 583: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_STRING D1a-Lisa-2
 594: PPUSH
 595: CALL_OW 88
// end ; if Cyrus and not Bobby then
 599: LD_EXP 3
 603: PUSH
 604: LD_EXP 2
 608: NOT
 609: AND
 610: IFFALSE 815
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 612: LD_EXP 3
 616: PPUSH
 617: LD_INT 43
 619: PPUSH
 620: LD_INT 72
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 46
 634: PPUSH
 635: LD_INT 73
 637: PPUSH
 638: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 642: LD_EXP 3
 646: PPUSH
 647: LD_STRING D1a-Cyrus-1
 649: PPUSH
 650: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 654: LD_EXP 1
 658: PPUSH
 659: LD_STRING D1a-JMM-1
 661: PPUSH
 662: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 666: LD_EXP 3
 670: PPUSH
 671: LD_INT 37
 673: PPUSH
 674: LD_INT 66
 676: PPUSH
 677: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 681: LD_EXP 1
 685: PPUSH
 686: LD_INT 38
 688: PPUSH
 689: LD_INT 64
 691: PPUSH
 692: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 696: LD_EXP 3
 700: PPUSH
 701: LD_STRING D1a-Cyrus-2
 703: PPUSH
 704: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 708: LD_EXP 3
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 62
 718: PPUSH
 719: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_INT 35
 730: PPUSH
 731: LD_INT 60
 733: PPUSH
 734: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_STRING D1a-JMM-2
 745: PPUSH
 746: CALL_OW 88
// ComWalk ( Lisa ) ;
 750: LD_EXP 4
 754: PPUSH
 755: CALL_OW 138
// wait ( 0 0$1 ) ;
 759: LD_INT 35
 761: PPUSH
 762: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 766: LD_EXP 4
 770: PPUSH
 771: LD_EXP 1
 775: PPUSH
 776: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_STRING D1a-Lisa-2
 787: PPUSH
 788: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 792: LD_EXP 1
 796: PUSH
 797: LD_EXP 3
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: LD_EXP 4
 810: PPUSH
 811: CALL_OW 119
// end ; if not Cyrus and Bobby then
 815: LD_EXP 3
 819: NOT
 820: PUSH
 821: LD_EXP 2
 825: AND
 826: IFFALSE 1105
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_INT 44
 835: PPUSH
 836: LD_INT 70
 838: PPUSH
 839: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 46
 850: PPUSH
 851: LD_INT 73
 853: PPUSH
 854: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 858: LD_EXP 2
 862: PPUSH
 863: LD_STRING D1a-Bobby-1
 865: PPUSH
 866: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 870: LD_EXP 1
 874: PPUSH
 875: LD_STRING D1a-JMM-1
 877: PPUSH
 878: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 37
 889: PPUSH
 890: LD_INT 66
 892: PPUSH
 893: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_INT 38
 904: PPUSH
 905: LD_INT 64
 907: PPUSH
 908: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 912: LD_EXP 2
 916: PPUSH
 917: LD_STRING D1a-Bobby-2
 919: PPUSH
 920: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 62
 934: PPUSH
 935: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_INT 35
 946: PPUSH
 947: LD_INT 60
 949: PPUSH
 950: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_STRING D1a-JMM-2
 961: PPUSH
 962: CALL_OW 88
// ComWalk ( Lisa ) ;
 966: LD_EXP 4
 970: PPUSH
 971: CALL_OW 138
// wait ( 0 0$1 ) ;
 975: LD_INT 35
 977: PPUSH
 978: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 982: LD_EXP 4
 986: PPUSH
 987: LD_EXP 1
 991: PPUSH
 992: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 996: LD_EXP 1
1000: PUSH
1001: LD_EXP 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: LD_EXP 4
1014: PPUSH
1015: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_INT 33
1030: PPUSH
1031: LD_INT 55
1033: PPUSH
1034: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1038: LD_VAR 0 1
1042: PUSH
1043: LD_INT 2
1045: ARRAY
1046: PPUSH
1047: LD_INT 30
1049: PPUSH
1050: LD_INT 54
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1057: LD_VAR 0 1
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_EXP 1
1070: PPUSH
1071: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: LD_EXP 1
1088: PPUSH
1089: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1093: LD_EXP 4
1097: PPUSH
1098: LD_STRING D1a-Lisa-2
1100: PPUSH
1101: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1105: LD_EXP 3
1109: NOT
1110: PUSH
1111: LD_EXP 2
1115: NOT
1116: AND
1117: IFFALSE 1331
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_INT 37
1126: PPUSH
1127: LD_INT 66
1129: PPUSH
1130: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1
1141: PPUSH
1142: CALL_OW 88
// ComCrawl ( JMM ) ;
1146: LD_EXP 1
1150: PPUSH
1151: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1155: LD_EXP 1
1159: PPUSH
1160: LD_INT 35
1162: PPUSH
1163: LD_INT 60
1165: PPUSH
1166: CALL_OW 171
// wait ( 0 0$8 ) ;
1170: LD_INT 280
1172: PPUSH
1173: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_STRING D1b-JMM-1a
1184: PPUSH
1185: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1189: LD_EXP 1
1193: PUSH
1194: LD_EXP 4
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 138
// wait ( 0 0$1 ) ;
1207: LD_INT 35
1209: PPUSH
1210: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_EXP 1
1223: PPUSH
1224: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1228: LD_EXP 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: PPUSH
1236: LD_EXP 4
1240: PPUSH
1241: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1245: LD_VAR 0 1
1249: PUSH
1250: LD_INT 1
1252: ARRAY
1253: PPUSH
1254: LD_INT 33
1256: PPUSH
1257: LD_INT 55
1259: PPUSH
1260: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: ARRAY
1272: PPUSH
1273: LD_INT 30
1275: PPUSH
1276: LD_INT 54
1278: PPUSH
1279: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1283: LD_VAR 0 1
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1301: LD_VAR 0 1
1305: PUSH
1306: LD_INT 2
1308: ARRAY
1309: PPUSH
1310: LD_EXP 1
1314: PPUSH
1315: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1319: LD_EXP 4
1323: PPUSH
1324: LD_STRING D1b-Lisa-1
1326: PPUSH
1327: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1331: LD_EXP 1
1335: PPUSH
1336: LD_STRING D1-JMM-1
1338: PPUSH
1339: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1343: LD_EXP 4
1347: PPUSH
1348: LD_STRING D1-Lisa-1
1350: PPUSH
1351: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1355: LD_EXP 1
1359: PPUSH
1360: LD_STRING D1-JMM-2
1362: PPUSH
1363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1367: LD_EXP 9
1371: PPUSH
1372: LD_STRING D1-Pow-2
1374: PPUSH
1375: CALL_OW 94
// if Cyrus then
1379: LD_EXP 3
1383: IFFALSE 1409
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1385: LD_EXP 3
1389: PPUSH
1390: LD_STRING D1-Cyrus-2
1392: PPUSH
1393: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1397: LD_EXP 1
1401: PPUSH
1402: LD_STRING D1-JMM-3
1404: PPUSH
1405: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1409: LD_EXP 9
1413: PPUSH
1414: LD_STRING D1-Pow-3
1416: PPUSH
1417: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1421: LD_EXP 1
1425: PPUSH
1426: LD_STRING D1-JMM-4
1428: PPUSH
1429: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_STRING D1-Pow-4
1440: PPUSH
1441: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_STRING D1-Pow-4a
1452: PPUSH
1453: CALL_OW 94
// if Cyrus then
1457: LD_EXP 3
1461: IFFALSE 1475
// Say ( Cyrus , D1-Cyrus-4 ) ;
1463: LD_EXP 3
1467: PPUSH
1468: LD_STRING D1-Cyrus-4
1470: PPUSH
1471: CALL_OW 88
// if Bobby then
1475: LD_EXP 2
1479: IFFALSE 1517
// begin Say ( Bobby , D1-Bobby-4 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1-Bobby-4
1488: PPUSH
1489: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1493: LD_EXP 4
1497: PPUSH
1498: LD_STRING D1-Lisa-4
1500: PPUSH
1501: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1505: LD_EXP 1
1509: PPUSH
1510: LD_STRING D1-JMM-5
1512: PPUSH
1513: CALL_OW 88
// end ; InGameOff ;
1517: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1521: LD_INT 22
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PPUSH
1531: CALL_OW 69
1535: PUSH
1536: LD_EXP 6
1540: PUSH
1541: LD_EXP 7
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: DIFF
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1558: LD_STRING M1
1560: PPUSH
1561: CALL_OW 337
// SaveForQuickRestart ;
1565: CALL_OW 22
// end ;
1569: PPOPN 1
1571: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1572: LD_INT 7
1574: PPUSH
1575: LD_INT 22
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PPUSH
1585: CALL_OW 70
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: IFFALSE 2010
1595: GO 1597
1597: DISABLE
// begin InGameOn ;
1598: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1602: LD_INT 22
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 21
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PPUSH
1631: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1635: LD_INT 24
1637: PPUSH
1638: LD_INT 32
1640: PPUSH
1641: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1660: LD_EXP 5
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: CALL_OW 336
// wait ( 0 0$1 ) ;
1672: LD_INT 35
1674: PPUSH
1675: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 27
1686: PPUSH
1687: LD_INT 38
1689: PPUSH
1690: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1694: LD_EXP 5
1698: PPUSH
1699: LD_EXP 1
1703: PPUSH
1704: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1708: LD_INT 22
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 21
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: LD_EXP 5
1741: PUSH
1742: EMPTY
1743: LIST
1744: DIFF
1745: PPUSH
1746: LD_EXP 5
1750: PPUSH
1751: CALL_OW 119
// wait ( 0 0$1 ) ;
1755: LD_INT 35
1757: PPUSH
1758: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1762: LD_EXP 5
1766: PPUSH
1767: LD_STRING D2a-Khat-1
1769: PPUSH
1770: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING D2a-JMM-1
1781: PPUSH
1782: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1786: LD_EXP 5
1790: PPUSH
1791: LD_STRING D2a-Khat-2
1793: PPUSH
1794: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_STRING D2a-JMM-2
1805: PPUSH
1806: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING D2a-Khat-3
1817: PPUSH
1818: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1822: LD_EXP 1
1826: PPUSH
1827: LD_STRING D2a-JMM-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1834: LD_EXP 5
1838: PPUSH
1839: LD_STRING D2a-Khat-4
1841: PPUSH
1842: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1846: LD_EXP 1
1850: PPUSH
1851: LD_STRING D2a-JMM-4
1853: PPUSH
1854: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1858: LD_EXP 5
1862: PPUSH
1863: LD_STRING D2a-Khat-5
1865: PPUSH
1866: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D2a-JMM-5
1877: PPUSH
1878: CALL_OW 88
// InGameOff ;
1882: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1886: LD_INT 22
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 800
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 0
1935: GREATER
1936: IFFALSE 2010
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1938: LD_EXP 5
1942: PPUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 21
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: LD_INT 24
1968: PUSH
1969: LD_INT 1000
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PPUSH
1994: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1998: LD_EXP 5
2002: PPUSH
2003: LD_STRING D2b-Khat-1
2005: PPUSH
2006: CALL_OW 88
// end ; end ;
2010: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp , p ;
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 70
2028: PUSH
2029: LD_INT 0
2031: GREATER
2032: IFFALSE 3229
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
2043: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: LD_INT 999
2051: PUSH
2052: LD_INT 999
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: LD_INT 22
2069: PUSH
2070: LD_INT 1
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 21
2079: PUSH
2080: LD_INT 1
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PPUSH
2091: CALL_OW 69
2095: PUSH
2096: LD_EXP 1
2100: PUSH
2101: LD_EXP 2
2105: PUSH
2106: LD_EXP 3
2110: PUSH
2111: LD_EXP 4
2115: PUSH
2116: LD_EXP 5
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: DIFF
2128: ST_TO_ADDR
// PrepareDeadSoldiers ;
2129: CALL 11433 0 0
// spotCorpses = 1 ;
2133: LD_ADDR_EXP 32
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2141: LD_INT 70
2143: PPUSH
2144: CALL_OW 67
// InGameOn ;
2148: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2152: LD_INT 23
2154: PPUSH
2155: LD_INT 12
2157: PPUSH
2158: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2162: LD_ADDR_VAR 0 3
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PUSH
2176: LD_INT 2
2178: ARRAY
2179: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 1
2218: PUSH
2219: LD_EXP 5
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: DIFF
2228: PUSH
2229: FOR_IN
2230: IFFALSE 2281
// if IsOK ( i ) then
2232: LD_VAR 0 1
2236: PPUSH
2237: CALL_OW 302
2241: IFFALSE 2279
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_VAR 0 2
2252: PUSH
2253: LD_VAR 0 1
2257: PUSH
2258: LD_VAR 0 1
2262: PPUSH
2263: LD_INT 16
2265: PPUSH
2266: CALL_OW 299
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: ADD
2278: ST_TO_ADDR
2279: GO 2229
2281: POP
2282: POP
// for i = 2 to distanceTab do
2283: LD_ADDR_VAR 0 1
2287: PUSH
2288: DOUBLE
2289: LD_INT 2
2291: DEC
2292: ST_TO_ADDR
2293: LD_VAR 0 2
2297: PUSH
2298: FOR_TO
2299: IFFALSE 2345
// if distanceTab [ i ] [ 2 ] < min then
2301: LD_VAR 0 2
2305: PUSH
2306: LD_VAR 0 1
2310: ARRAY
2311: PUSH
2312: LD_INT 2
2314: ARRAY
2315: PUSH
2316: LD_VAR 0 3
2320: LESS
2321: IFFALSE 2343
// min = distanceTab [ i ] [ 2 ] ;
2323: LD_ADDR_VAR 0 3
2327: PUSH
2328: LD_VAR 0 2
2332: PUSH
2333: LD_VAR 0 1
2337: ARRAY
2338: PUSH
2339: LD_INT 2
2341: ARRAY
2342: ST_TO_ADDR
2343: GO 2298
2345: POP
2346: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2347: LD_ADDR_VAR 0 1
2351: PUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 21
2364: PUSH
2365: LD_INT 1
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_EXP 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: DIFF
2389: PUSH
2390: FOR_IN
2391: IFFALSE 2461
// begin ComMoveToArea ( i , DeadCutscene ) ;
2393: LD_VAR 0 1
2397: PPUSH
2398: LD_INT 28
2400: PPUSH
2401: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2405: LD_EXP 1
2409: PPUSH
2410: LD_INT 30
2412: PPUSH
2413: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2417: LD_VAR 0 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2432: LD_EXP 1
2436: PPUSH
2437: LD_INT 23
2439: PPUSH
2440: LD_INT 11
2442: PPUSH
2443: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2447: LD_EXP 34
2451: PPUSH
2452: LD_INT 250
2454: PPUSH
2455: CALL_OW 234
// end ;
2459: GO 2390
2461: POP
2462: POP
// for i = 2 to distanceTab do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: DOUBLE
2469: LD_INT 2
2471: DEC
2472: ST_TO_ADDR
2473: LD_VAR 0 2
2477: PUSH
2478: FOR_TO
2479: IFFALSE 2865
// begin if distanceTab [ i ] [ 2 ] = min then
2481: LD_VAR 0 2
2485: PUSH
2486: LD_VAR 0 1
2490: ARRAY
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PUSH
2496: LD_VAR 0 3
2500: EQUAL
2501: IFFALSE 2863
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2503: LD_VAR 0 2
2507: PUSH
2508: LD_VAR 0 1
2512: ARRAY
2513: PUSH
2514: LD_INT 1
2516: ARRAY
2517: PUSH
2518: LD_EXP 2
2522: EQUAL
2523: IFFALSE 2537
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2525: LD_EXP 2
2529: PPUSH
2530: LD_STRING DCorpses-Bobby-1
2532: PPUSH
2533: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2537: LD_VAR 0 2
2541: PUSH
2542: LD_VAR 0 1
2546: ARRAY
2547: PUSH
2548: LD_INT 1
2550: ARRAY
2551: PUSH
2552: LD_EXP 3
2556: EQUAL
2557: IFFALSE 2571
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2559: LD_EXP 3
2563: PPUSH
2564: LD_STRING DCorpses-Cyrus-1
2566: PPUSH
2567: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2571: LD_VAR 0 2
2575: PUSH
2576: LD_VAR 0 1
2580: ARRAY
2581: PUSH
2582: LD_INT 1
2584: ARRAY
2585: PUSH
2586: LD_EXP 4
2590: EQUAL
2591: IFFALSE 2605
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2593: LD_EXP 4
2597: PPUSH
2598: LD_STRING DCorpses-Lisa-1
2600: PPUSH
2601: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 4
2624: PUSH
2625: LD_INT 1
2627: ARRAY
2628: EQUAL
2629: PUSH
2630: LD_VAR 0 4
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: CALL_OW 258
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: AND
2648: IFFALSE 2666
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2650: LD_VAR 0 4
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: PPUSH
2659: LD_STRING DCorpses-Sol1-1
2661: PPUSH
2662: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2666: LD_VAR 0 2
2670: PUSH
2671: LD_VAR 0 1
2675: ARRAY
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: PUSH
2681: LD_VAR 0 4
2685: PUSH
2686: LD_INT 1
2688: ARRAY
2689: EQUAL
2690: PUSH
2691: LD_VAR 0 4
2695: PUSH
2696: LD_INT 1
2698: ARRAY
2699: PPUSH
2700: CALL_OW 258
2704: PUSH
2705: LD_INT 2
2707: EQUAL
2708: AND
2709: IFFALSE 2727
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2711: LD_VAR 0 4
2715: PUSH
2716: LD_INT 1
2718: ARRAY
2719: PPUSH
2720: LD_STRING DCorpses-FSol1-1
2722: PPUSH
2723: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_VAR 0 1
2736: ARRAY
2737: PUSH
2738: LD_INT 1
2740: ARRAY
2741: PUSH
2742: LD_VAR 0 4
2746: PUSH
2747: LD_INT 2
2749: ARRAY
2750: EQUAL
2751: PUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 2
2759: ARRAY
2760: PPUSH
2761: CALL_OW 258
2765: PUSH
2766: LD_INT 1
2768: EQUAL
2769: AND
2770: IFFALSE 2788
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2772: LD_VAR 0 4
2776: PUSH
2777: LD_INT 2
2779: ARRAY
2780: PPUSH
2781: LD_STRING DCorpses-Sol1-1
2783: PPUSH
2784: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2788: LD_VAR 0 2
2792: PUSH
2793: LD_VAR 0 1
2797: ARRAY
2798: PUSH
2799: LD_INT 1
2801: ARRAY
2802: PUSH
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 2
2810: ARRAY
2811: EQUAL
2812: PUSH
2813: LD_VAR 0 4
2817: PUSH
2818: LD_INT 2
2820: ARRAY
2821: PPUSH
2822: CALL_OW 258
2826: PUSH
2827: LD_INT 2
2829: EQUAL
2830: AND
2831: IFFALSE 2849
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2833: LD_VAR 0 4
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_STRING DCorpses-FSol1-1
2844: PPUSH
2845: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2849: LD_EXP 34
2853: PPUSH
2854: LD_INT 150
2856: PPUSH
2857: CALL_OW 234
// break ;
2861: GO 2865
// end ; end ;
2863: GO 2478
2865: POP
2866: POP
// p := 0 ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_INT 0
2874: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2875: LD_INT 35
2877: PPUSH
2878: CALL_OW 67
// p := p + 1 ;
2882: LD_ADDR_VAR 0 5
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2896: LD_ADDR_VAR 0 1
2900: PUSH
2901: LD_INT 22
2903: PUSH
2904: LD_INT 1
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 21
2913: PUSH
2914: LD_INT 1
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PPUSH
2925: CALL_OW 69
2929: PUSH
2930: LD_EXP 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: DIFF
2938: PUSH
2939: FOR_IN
2940: IFFALSE 3010
// begin ComMoveToArea ( i , DeadCutscene ) ;
2942: LD_VAR 0 1
2946: PPUSH
2947: LD_INT 28
2949: PPUSH
2950: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2954: LD_EXP 1
2958: PPUSH
2959: LD_INT 30
2961: PPUSH
2962: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2966: LD_VAR 0 1
2970: PPUSH
2971: LD_INT 23
2973: PPUSH
2974: LD_INT 11
2976: PPUSH
2977: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2981: LD_EXP 1
2985: PPUSH
2986: LD_INT 23
2988: PPUSH
2989: LD_INT 11
2991: PPUSH
2992: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2996: LD_EXP 34
3000: PPUSH
3001: LD_INT 250
3003: PPUSH
3004: CALL_OW 234
// end ;
3008: GO 2939
3010: POP
3011: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3012: LD_EXP 1
3016: PPUSH
3017: LD_INT 30
3019: PPUSH
3020: CALL_OW 308
3024: PUSH
3025: LD_VAR 0 5
3029: PUSH
3030: LD_INT 16
3032: GREATEREQUAL
3033: OR
3034: IFFALSE 2875
// wait ( 0 0$1 ) ;
3036: LD_INT 35
3038: PPUSH
3039: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3043: LD_EXP 1
3047: PPUSH
3048: LD_STRING DCorpses-JMM-1
3050: PPUSH
3051: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3055: LD_EXP 34
3059: PPUSH
3060: LD_INT 100
3062: PPUSH
3063: CALL_OW 234
// if IsOK ( Khatam ) then
3067: LD_EXP 5
3071: PPUSH
3072: CALL_OW 302
3076: IFFALSE 3213
// begin repeat wait ( 0 0$1 ) ;
3078: LD_INT 35
3080: PPUSH
3081: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3085: LD_EXP 5
3089: PPUSH
3090: LD_EXP 34
3094: PPUSH
3095: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3099: LD_EXP 5
3103: PPUSH
3104: LD_EXP 34
3108: PPUSH
3109: CALL_OW 296
3113: PUSH
3114: LD_INT 2
3116: LESS
3117: IFFALSE 3078
// spotCorpses = 0 ;
3119: LD_ADDR_EXP 32
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3127: LD_EXP 34
3131: PPUSH
3132: LD_INT 10
3134: PPUSH
3135: CALL_OW 234
// wait ( 0 0$3 ) ;
3139: LD_INT 105
3141: PPUSH
3142: CALL_OW 67
// KillUnit ( DyingSold ) ;
3146: LD_EXP 34
3150: PPUSH
3151: CALL_OW 66
// wait ( 0 0$1 ) ;
3155: LD_INT 35
3157: PPUSH
3158: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3162: LD_EXP 1
3166: PUSH
3167: LD_EXP 5
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3180: LD_EXP 5
3184: PPUSH
3185: LD_EXP 1
3189: PPUSH
3190: CALL_OW 119
// wait ( 0 0$1 ) ;
3194: LD_INT 35
3196: PPUSH
3197: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3201: LD_EXP 5
3205: PPUSH
3206: LD_STRING DCorpses-Khat-1
3208: PPUSH
3209: CALL_OW 88
// end ; InGameOff ;
3213: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3217: LD_EXP 1
3221: PPUSH
3222: LD_STRING DCorpses-JMM-2
3224: PPUSH
3225: CALL_OW 88
// end ;
3229: PPOPN 5
3231: END
// every 0 0$1 trigger spotCorpses = 1 do
3232: LD_EXP 32
3236: PUSH
3237: LD_INT 1
3239: EQUAL
3240: IFFALSE 3258
3242: GO 3244
3244: DISABLE
// begin enable ;
3245: ENABLE
// SetLives ( DyingSold , 10 ) ;
3246: LD_EXP 34
3250: PPUSH
3251: LD_INT 10
3253: PPUSH
3254: CALL_OW 234
// end ;
3258: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3259: LD_INT 8
3261: PPUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 1
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 70
3276: PUSH
3277: LD_INT 0
3279: GREATER
3280: PUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 1
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_EXP 7
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: LD_EXP 7
3310: PPUSH
3311: CALL_OW 296
3315: PUSH
3316: LD_INT 13
3318: LESS
3319: OR
3320: IFFALSE 3517
3322: GO 3324
3324: DISABLE
3325: LD_INT 0
3327: PPUSH
// begin InGameOn ;
3328: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3332: LD_EXP 7
3336: PPUSH
3337: LD_INT 250
3339: PPUSH
3340: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 ] [ Difficulty ] ) ;
3344: LD_EXP 6
3348: PPUSH
3349: LD_INT 1000
3351: PUSH
3352: LD_INT 800
3354: PUSH
3355: LD_INT 750
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_OWVAR 67
3367: ARRAY
3368: PPUSH
3369: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3373: LD_INT 3
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: LD_INT 2
3381: PPUSH
3382: LD_INT 1
3384: PPUSH
3385: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3389: LD_EXP 6
3393: PUSH
3394: LD_EXP 7
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3407: LD_ADDR_VAR 0 1
3411: PUSH
3412: LD_INT 9
3414: PPUSH
3415: LD_INT 22
3417: PUSH
3418: LD_INT 3
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: PPUSH
3425: CALL_OW 70
3429: PUSH
3430: FOR_IN
3431: IFFALSE 3444
// ComFree ( i ) ;
3433: LD_VAR 0 1
3437: PPUSH
3438: CALL_OW 139
3442: GO 3430
3444: POP
3445: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3446: LD_ADDR_VAR 0 1
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: FOR_IN
3467: IFFALSE 3480
// ComFree ( i ) ;
3469: LD_VAR 0 1
3473: PPUSH
3474: CALL_OW 139
3478: GO 3466
3480: POP
3481: POP
// wait ( 0 0$1 ) ;
3482: LD_INT 35
3484: PPUSH
3485: CALL_OW 67
// InGameOff ;
3489: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3493: LD_EXP 6
3497: PPUSH
3498: LD_STRING DF-Sol1-1
3500: PPUSH
3501: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3505: LD_EXP 1
3509: PPUSH
3510: LD_STRING DF-JMM-1
3512: PPUSH
3513: CALL_OW 88
// end ;
3517: PPOPN 1
3519: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3520: LD_INT 19
3522: PPUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PPUSH
3533: CALL_OW 70
3537: PUSH
3538: LD_INT 0
3540: EQUAL
3541: IFFALSE 3650
3543: GO 3545
3545: DISABLE
// begin if not IsDead ( Brian ) then
3546: LD_EXP 6
3550: PPUSH
3551: CALL_OW 301
3555: NOT
3556: IFFALSE 3570
// SetSide ( Brian , 1 ) ;
3558: LD_EXP 6
3562: PPUSH
3563: LD_INT 1
3565: PPUSH
3566: CALL_OW 235
// if not IsDead ( Jerry ) then
3570: LD_EXP 7
3574: PPUSH
3575: CALL_OW 301
3579: NOT
3580: IFFALSE 3594
// SetSide ( Jerry , 1 ) ;
3582: LD_EXP 7
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3594: LD_INT 22
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 25
3606: PUSH
3607: LD_INT 4
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: IFFALSE 3638
// Say ( JMM , DFa-JMM-1 ) else
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING DFa-JMM-1
3631: PPUSH
3632: CALL_OW 88
3636: GO 3650
// Say ( JMM , DFa-JMM-1a ) ;
3638: LD_EXP 1
3642: PPUSH
3643: LD_STRING DFa-JMM-1a
3645: PPUSH
3646: CALL_OW 88
// end ;
3650: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3651: LD_INT 19
3653: PPUSH
3654: LD_INT 22
3656: PUSH
3657: LD_INT 3
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PPUSH
3664: CALL_OW 70
3668: PUSH
3669: LD_INT 0
3671: EQUAL
3672: PUSH
3673: LD_EXP 6
3677: PPUSH
3678: CALL_OW 302
3682: NOT
3683: AND
3684: IFFALSE 3770
3686: GO 3688
3688: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3689: LD_INT 35
3691: PPUSH
3692: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3696: LD_EXP 6
3700: PPUSH
3701: CALL_OW 256
3705: PUSH
3706: LD_INT 250
3708: GREATER
3709: IFFALSE 3689
// Say ( Brian , DFb-Sol1-1 ) ;
3711: LD_EXP 6
3715: PPUSH
3716: LD_STRING DFb-Sol1-1
3718: PPUSH
3719: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3723: LD_EXP 6
3727: PPUSH
3728: LD_INT 78
3730: PPUSH
3731: LD_INT 74
3733: PPUSH
3734: CALL_OW 111
// if IsDead ( Jerry ) then
3738: LD_EXP 7
3742: PPUSH
3743: CALL_OW 301
3747: IFFALSE 3763
// Say ( Brian , DFb-Sol1-1a ) else
3749: LD_EXP 6
3753: PPUSH
3754: LD_STRING DFb-Sol1-1a
3756: PPUSH
3757: CALL_OW 88
3761: GO 3770
// SetAchievement ( ACH_JERRY ) ;
3763: LD_STRING ACH_JERRY
3765: PPUSH
3766: CALL_OW 543
// end ;
3770: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3771: LD_INT 22
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 21
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PPUSH
3795: CALL_OW 69
3799: PUSH
3800: LD_INT 0
3802: EQUAL
3803: IFFALSE 3891
3805: GO 3807
3807: DISABLE
3808: LD_INT 0
3810: PPUSH
// begin enable ;
3811: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: LD_INT 22
3819: PUSH
3820: LD_INT 3
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 21
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 30
3839: PUSH
3840: LD_INT 31
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PPUSH
3852: CALL_OW 69
3856: PUSH
3857: FOR_IN
3858: IFFALSE 3889
// begin if See ( 1 , i ) then
3860: LD_INT 1
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: CALL_OW 292
3872: IFFALSE 3887
// begin disable ;
3874: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3875: LD_EXP 1
3879: PPUSH
3880: LD_STRING DX1-JMM-1
3882: PPUSH
3883: CALL_OW 88
// end ; end ;
3887: GO 3857
3889: POP
3890: POP
// end ;
3891: PPOPN 1
3893: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 11
3899: PPUSH
3900: CALL_OW 294
3904: IFFALSE 4163
3906: GO 3908
3908: DISABLE
3909: LD_INT 0
3911: PPUSH
3912: PPUSH
3913: PPUSH
// begin DialogueOn ;
3914: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3918: LD_INT 11
3920: PPUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: PPUSH
3945: CALL_OW 70
3949: PUSH
3950: LD_INT 1
3952: ARRAY
3953: PPUSH
3954: LD_STRING DX3-Rus1-1
3956: PPUSH
3957: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING DX3-JMM-1
3968: PPUSH
3969: CALL_OW 88
// DialogueOff ;
3973: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3977: LD_ADDR_VAR 0 1
3981: PUSH
3982: LD_INT 11
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 25
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 70
4013: PUSH
4014: FOR_IN
4015: IFFALSE 4035
// southBaseDefenders = southBaseDefenders ^ i ;
4017: LD_ADDR_EXP 25
4021: PUSH
4022: LD_EXP 25
4026: PUSH
4027: LD_VAR 0 1
4031: ADD
4032: ST_TO_ADDR
4033: GO 4014
4035: POP
4036: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 ] [ Difficulty ] ) ;
4037: LD_INT 175
4039: PUSH
4040: LD_INT 140
4042: PUSH
4043: LD_INT 105
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_OWVAR 67
4055: ARRAY
4056: PPUSH
4057: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 21
4078: PUSH
4079: LD_INT 1
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 25
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: PPUSH
4101: CALL_OW 69
4105: ST_TO_ADDR
// if not mech then
4106: LD_VAR 0 3
4110: NOT
4111: IFFALSE 4115
// exit ;
4113: GO 4163
// ComExitBuilding ( mech ) ;
4115: LD_VAR 0 3
4119: PPUSH
4120: CALL_OW 122
// wait ( 0 0$1 ) ;
4124: LD_INT 35
4126: PPUSH
4127: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4131: LD_VAR 0 3
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: LD_INT 5
4142: PPUSH
4143: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4147: LD_VAR 0 3
4151: PUSH
4152: LD_INT 2
4154: ARRAY
4155: PPUSH
4156: LD_INT 4
4158: PPUSH
4159: CALL_OW 180
// end ;
4163: PPOPN 3
4165: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 5
4171: PPUSH
4172: CALL_OW 292
4176: PUSH
4177: LD_INT 1
4179: PPUSH
4180: LD_INT 4
4182: PPUSH
4183: CALL_OW 292
4187: OR
4188: IFFALSE 4272
4190: GO 4192
4192: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4193: LD_INT 5
4195: PUSH
4196: LD_INT 4
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PPUSH
4203: CALL_OW 85
// if IsOK ( Bobby ) then
4207: LD_EXP 2
4211: PPUSH
4212: CALL_OW 302
4216: IFFALSE 4252
// begin DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4222: LD_EXP 2
4226: PPUSH
4227: LD_STRING DX2-Bobby-1
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4234: LD_EXP 1
4238: PPUSH
4239: LD_STRING DX2-JMM-1a
4241: PPUSH
4242: CALL_OW 88
// DialogueOff ;
4246: CALL_OW 7
// end else
4250: GO 4272
// begin DialogueOn ;
4252: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4256: LD_EXP 1
4260: PPUSH
4261: LD_STRING DX2-JMM-1
4263: PPUSH
4264: CALL_OW 88
// DialogueOff ;
4268: CALL_OW 7
// end ; end ;
4272: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4273: LD_INT 22
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: LD_INT 23
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 21
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 34
4305: PUSH
4306: LD_INT 42
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: IFFALSE 4744
4325: GO 4327
4327: DISABLE
4328: LD_INT 0
4330: PPUSH
4331: PPUSH
4332: PPUSH
4333: PPUSH
4334: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4335: LD_ADDR_VAR 0 1
4339: PUSH
4340: LD_INT 22
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 23
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 21
4362: PUSH
4363: LD_INT 2
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 34
4372: PUSH
4373: LD_INT 42
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PPUSH
4386: CALL_OW 69
4390: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: LD_INT 22
4398: PUSH
4399: LD_INT 1
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 21
4408: PUSH
4409: LD_INT 1
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 26
4418: PUSH
4419: LD_INT 1
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_EXP 1
4440: PUSH
4441: LD_EXP 3
4445: PUSH
4446: LD_EXP 2
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: DIFF
4456: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_INT 22
4464: PUSH
4465: LD_INT 1
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 26
4484: PUSH
4485: LD_INT 2
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PUSH
4502: LD_EXP 4
4506: PUSH
4507: EMPTY
4508: LIST
4509: DIFF
4510: ST_TO_ADDR
// if not tmp then
4511: LD_VAR 0 1
4515: NOT
4516: IFFALSE 4520
// exit ;
4518: GO 4744
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4520: LD_ADDR_VAR 0 2
4524: PUSH
4525: LD_VAR 0 1
4529: PUSH
4530: LD_INT 1
4532: ARRAY
4533: PPUSH
4534: CALL_OW 311
4538: ST_TO_ADDR
// if not speaker then
4539: LD_VAR 0 2
4543: NOT
4544: IFFALSE 4548
// exit ;
4546: GO 4744
// DialogueOn ;
4548: CALL_OW 6
// if speaker = JMM then
4552: LD_VAR 0 2
4556: PUSH
4557: LD_EXP 1
4561: EQUAL
4562: IFFALSE 4596
// begin if Lisa then
4564: LD_EXP 4
4568: IFFALSE 4582
// Say ( Lisa , DX2b-Lisa-1 ) ;
4570: LD_EXP 4
4574: PPUSH
4575: LD_STRING DX2b-Lisa-1
4577: PPUSH
4578: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4582: LD_EXP 1
4586: PPUSH
4587: LD_STRING DX2b-JMM-1
4589: PPUSH
4590: CALL_OW 88
// end else
4594: GO 4740
// begin Say ( JMM , DX2a-JMM-1 ) ;
4596: LD_EXP 1
4600: PPUSH
4601: LD_STRING DX2a-JMM-1
4603: PPUSH
4604: CALL_OW 88
// if speaker = Bobby then
4608: LD_VAR 0 2
4612: PUSH
4613: LD_EXP 2
4617: EQUAL
4618: IFFALSE 4632
// Say ( Bobby , DX2a-Bobby-1 ) ;
4620: LD_EXP 2
4624: PPUSH
4625: LD_STRING DX2a-Bobby-1
4627: PPUSH
4628: CALL_OW 88
// if speaker = Cyrus then
4632: LD_VAR 0 2
4636: PUSH
4637: LD_EXP 3
4641: EQUAL
4642: IFFALSE 4656
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4644: LD_EXP 3
4648: PPUSH
4649: LD_STRING DX2a-Cyrus-1
4651: PPUSH
4652: CALL_OW 88
// if speaker = Lisa then
4656: LD_VAR 0 2
4660: PUSH
4661: LD_EXP 4
4665: EQUAL
4666: IFFALSE 4680
// Say ( Lisa , DX2a-Lisa-1 ) ;
4668: LD_EXP 4
4672: PPUSH
4673: LD_STRING DX2a-Lisa-1
4675: PPUSH
4676: CALL_OW 88
// if speaker in temp1 then
4680: LD_VAR 0 2
4684: PUSH
4685: LD_VAR 0 3
4689: IN
4690: IFFALSE 4704
// Say ( speaker , DX2a-Sol1-1 ) ;
4692: LD_VAR 0 2
4696: PPUSH
4697: LD_STRING DX2a-Sol1-1
4699: PPUSH
4700: CALL_OW 88
// if speaker in temp2 then
4704: LD_VAR 0 2
4708: PUSH
4709: LD_VAR 0 4
4713: IN
4714: IFFALSE 4728
// Say ( speaker , DX2a-FSol1-1 ) ;
4716: LD_VAR 0 2
4720: PPUSH
4721: LD_STRING DX2a-FSol1-1
4723: PPUSH
4724: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4728: LD_EXP 1
4732: PPUSH
4733: LD_STRING DX2a-JMM-2
4735: PPUSH
4736: CALL_OW 88
// end ; DialogueOff ;
4740: CALL_OW 7
// end ;
4744: PPOPN 5
4746: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4747: LD_INT 1
4749: PPUSH
4750: CALL_OW 255
4754: PUSH
4755: LD_INT 1
4757: EQUAL
4758: PUSH
4759: LD_INT 10
4761: PPUSH
4762: CALL_OW 255
4766: PUSH
4767: LD_INT 1
4769: EQUAL
4770: OR
4771: IFFALSE 4831
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4780: LD_EXP 1
4784: PPUSH
4785: LD_STRING D3-JMM-1
4787: PPUSH
4788: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4792: LD_EXP 9
4796: PPUSH
4797: LD_STRING D3-Pow-1
4799: PPUSH
4800: CALL_OW 94
// if IsOK ( Cyrus ) then
4804: LD_EXP 3
4808: PPUSH
4809: CALL_OW 302
4813: IFFALSE 4827
// Say ( Cyrus , D3-Cyrus-1 ) ;
4815: LD_EXP 3
4819: PPUSH
4820: LD_STRING D3-Cyrus-1
4822: PPUSH
4823: CALL_OW 88
// DialogueOff ;
4827: CALL_OW 7
// end ;
4831: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4832: LD_INT 1
4834: PPUSH
4835: CALL_OW 255
4839: PUSH
4840: LD_INT 1
4842: EQUAL
4843: PUSH
4844: LD_INT 10
4846: PPUSH
4847: CALL_OW 255
4851: PUSH
4852: LD_INT 1
4854: EQUAL
4855: AND
4856: IFFALSE 6239
4858: GO 4860
4860: DISABLE
4861: LD_INT 0
4863: PPUSH
4864: PPUSH
4865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4866: LD_ADDR_VAR 0 2
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 21
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PPUSH
4895: CALL_OW 69
4899: ST_TO_ADDR
// if tmp then
4900: LD_VAR 0 2
4904: IFFALSE 4965
// begin for i in tmp do
4906: LD_ADDR_VAR 0 3
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: FOR_IN
4917: IFFALSE 4963
// begin if IsInUnit ( i ) then
4919: LD_VAR 0 3
4923: PPUSH
4924: CALL_OW 310
4928: IFFALSE 4939
// ComExitBuilding ( i ) ;
4930: LD_VAR 0 3
4934: PPUSH
4935: CALL_OW 122
// wait ( 0 0$1 ) ;
4939: LD_INT 35
4941: PPUSH
4942: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4946: LD_VAR 0 3
4950: PPUSH
4951: LD_INT 54
4953: PPUSH
4954: LD_INT 17
4956: PPUSH
4957: CALL_OW 174
// end ;
4961: GO 4916
4963: POP
4964: POP
// end ; wait ( 0 0$03 ) ;
4965: LD_INT 105
4967: PPUSH
4968: CALL_OW 67
// DialogueOn ;
4972: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4976: LD_EXP 1
4980: PPUSH
4981: LD_STRING D3a-JMM-1
4983: PPUSH
4984: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4988: LD_EXP 9
4992: PPUSH
4993: LD_STRING D3a-Pow-1
4995: PPUSH
4996: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5000: LD_EXP 1
5004: PPUSH
5005: LD_STRING D3a-JMM-2
5007: PPUSH
5008: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5012: LD_EXP 9
5016: PPUSH
5017: LD_STRING D3a-Pow-2
5019: PPUSH
5020: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5024: LD_EXP 1
5028: PPUSH
5029: LD_STRING D3a-JMM-3
5031: PPUSH
5032: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5036: LD_EXP 9
5040: PPUSH
5041: LD_STRING D3a-Pow-3
5043: PPUSH
5044: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5048: LD_EXP 1
5052: PPUSH
5053: LD_STRING D3a-JMM-4
5055: PPUSH
5056: CALL_OW 88
// DialogueOff ;
5060: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5064: LD_STRING M2
5066: PPUSH
5067: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5071: LD_EXP 1
5075: PPUSH
5076: LD_STRING D3b-JMM-1
5078: PPUSH
5079: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5083: LD_INT 35
5085: PPUSH
5086: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5090: LD_INT 22
5092: PPUSH
5093: LD_INT 22
5095: PUSH
5096: LD_INT 1
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: LD_INT 25
5105: PUSH
5106: LD_INT 2
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 70
5121: PUSH
5122: LD_INT 22
5124: PUSH
5125: LD_INT 3
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 21
5134: PUSH
5135: LD_INT 1
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 69
5150: NOT
5151: AND
5152: IFFALSE 5083
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5154: LD_ADDR_VAR 0 1
5158: PUSH
5159: LD_INT 22
5161: PUSH
5162: LD_INT 1
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 23
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 25
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 50
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: LD_INT 56
5197: PUSH
5198: EMPTY
5199: LIST
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 69
5212: PUSH
5213: LD_EXP 1
5217: PUSH
5218: LD_EXP 5
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: DIFF
5227: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5228: LD_INT 35
5230: PPUSH
5231: CALL_OW 67
// until temp > 0 ;
5235: LD_VAR 0 1
5239: PUSH
5240: LD_INT 0
5242: GREATER
5243: IFFALSE 5154
// wait ( 0 0$5 ) ;
5245: LD_INT 175
5247: PPUSH
5248: CALL_OW 67
// PrepareRussianHeroes ;
5252: CALL 11590 0 0
// InGameOn ;
5256: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5260: LD_EXP 8
5264: PPUSH
5265: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5269: LD_EXP 1
5273: PUSH
5274: LD_VAR 0 1
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 8
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5296: LD_EXP 8
5300: PPUSH
5301: LD_VAR 0 1
5305: PUSH
5306: LD_INT 1
5308: ARRAY
5309: PPUSH
5310: CALL_OW 119
// Wait ( 0 0$02 ) ;
5314: LD_INT 70
5316: PPUSH
5317: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5321: LD_EXP 8
5325: PPUSH
5326: LD_STRING D4-Mikh-1
5328: PPUSH
5329: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5333: LD_VAR 0 1
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: CALL_OW 258
5346: PUSH
5347: LD_INT 1
5349: EQUAL
5350: IFFALSE 5368
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5352: LD_VAR 0 1
5356: PUSH
5357: LD_INT 1
5359: ARRAY
5360: PPUSH
5361: LD_STRING D4-Sol1-1
5363: PPUSH
5364: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5368: LD_VAR 0 1
5372: PUSH
5373: LD_INT 1
5375: ARRAY
5376: PPUSH
5377: CALL_OW 258
5381: PUSH
5382: LD_INT 2
5384: EQUAL
5385: IFFALSE 5403
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5387: LD_VAR 0 1
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PPUSH
5396: LD_STRING D4-FSol1-1
5398: PPUSH
5399: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5403: LD_EXP 8
5407: PPUSH
5408: LD_STRING D4-Mikh-2
5410: PPUSH
5411: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5415: LD_VAR 0 1
5419: PUSH
5420: LD_INT 1
5422: ARRAY
5423: PPUSH
5424: CALL_OW 258
5428: PUSH
5429: LD_INT 1
5431: EQUAL
5432: IFFALSE 5450
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5434: LD_VAR 0 1
5438: PUSH
5439: LD_INT 1
5441: ARRAY
5442: PPUSH
5443: LD_STRING D4-Sol1-2
5445: PPUSH
5446: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5450: LD_VAR 0 1
5454: PUSH
5455: LD_INT 1
5457: ARRAY
5458: PPUSH
5459: CALL_OW 258
5463: PUSH
5464: LD_INT 2
5466: EQUAL
5467: IFFALSE 5485
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: LD_STRING D4-FSol1-2
5480: PPUSH
5481: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5485: LD_EXP 8
5489: PPUSH
5490: LD_STRING D4-Mikh-3
5492: PPUSH
5493: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5497: LD_VAR 0 1
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: CALL_OW 258
5510: PUSH
5511: LD_INT 1
5513: EQUAL
5514: IFFALSE 5532
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5516: LD_VAR 0 1
5520: PUSH
5521: LD_INT 1
5523: ARRAY
5524: PPUSH
5525: LD_STRING D4-Sol1-3
5527: PPUSH
5528: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5532: LD_VAR 0 1
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: PPUSH
5541: CALL_OW 258
5545: PUSH
5546: LD_INT 2
5548: EQUAL
5549: IFFALSE 5567
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5551: LD_VAR 0 1
5555: PUSH
5556: LD_INT 1
5558: ARRAY
5559: PPUSH
5560: LD_STRING D4-FSol1-3
5562: PPUSH
5563: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5567: LD_EXP 8
5571: PPUSH
5572: LD_STRING D4-Mikh-4
5574: PPUSH
5575: CALL_OW 88
// case query ( Qs1 ) of 1 :
5579: LD_STRING Qs1
5581: PPUSH
5582: CALL_OW 97
5586: PUSH
5587: LD_INT 1
5589: DOUBLE
5590: EQUAL
5591: IFTRUE 5595
5593: GO 5630
5595: POP
// begin InGameOff ;
5596: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5600: LD_INT 1
5602: PPUSH
5603: LD_INT 6
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5616: LD_EXP 8
5620: PPUSH
5621: LD_INT 17
5623: PPUSH
5624: CALL_OW 113
// end ; 2 :
5628: GO 6223
5630: LD_INT 2
5632: DOUBLE
5633: EQUAL
5634: IFTRUE 5638
5636: GO 6188
5638: POP
// begin repeat wait ( 0 0$1 ) ;
5639: LD_INT 35
5641: PPUSH
5642: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5646: LD_VAR 0 1
5650: PUSH
5651: LD_INT 1
5653: ARRAY
5654: PPUSH
5655: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5659: LD_VAR 0 1
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: LD_EXP 1
5672: PPUSH
5673: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5677: LD_EXP 8
5681: PPUSH
5682: LD_EXP 1
5686: PPUSH
5687: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5691: LD_EXP 1
5695: PPUSH
5696: LD_EXP 8
5700: PPUSH
5701: CALL_OW 296
5705: PUSH
5706: LD_INT 5
5708: LESS
5709: IFFALSE 5639
// ComTurnUnit ( Mikhail , JMM ) ;
5711: LD_EXP 8
5715: PPUSH
5716: LD_EXP 1
5720: PPUSH
5721: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5725: LD_EXP 1
5729: PPUSH
5730: LD_STRING D4b-JMM-1
5732: PPUSH
5733: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5737: LD_EXP 8
5741: PPUSH
5742: LD_STRING D4b-Mikh-1
5744: PPUSH
5745: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5749: LD_EXP 1
5753: PPUSH
5754: LD_STRING D4b-JMM-2
5756: PPUSH
5757: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5761: LD_EXP 8
5765: PPUSH
5766: LD_STRING D4b-Mikh-2
5768: PPUSH
5769: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5773: LD_EXP 1
5777: PPUSH
5778: LD_STRING D4b-JMM-3
5780: PPUSH
5781: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5785: LD_EXP 8
5789: PPUSH
5790: LD_STRING D4b-Mikh-3
5792: PPUSH
5793: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5797: LD_EXP 1
5801: PPUSH
5802: LD_STRING D4b-JMM-4
5804: PPUSH
5805: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5809: LD_EXP 8
5813: PPUSH
5814: LD_STRING D4b-Mikh-4
5816: PPUSH
5817: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5821: LD_EXP 1
5825: PPUSH
5826: LD_STRING D4b-JMM-5
5828: PPUSH
5829: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5833: LD_EXP 8
5837: PPUSH
5838: LD_STRING D4b-Mikh-5
5840: PPUSH
5841: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5845: LD_EXP 1
5849: PPUSH
5850: LD_STRING D4b-JMM-6
5852: PPUSH
5853: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5857: LD_EXP 8
5861: PPUSH
5862: LD_STRING D4b-Mikh-6
5864: PPUSH
5865: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5869: LD_EXP 1
5873: PPUSH
5874: LD_STRING D4b-JMM-7
5876: PPUSH
5877: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5881: LD_EXP 8
5885: PPUSH
5886: LD_STRING D4b-Mikh-7
5888: PPUSH
5889: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5893: LD_VAR 0 1
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: PPUSH
5902: CALL_OW 258
5906: PUSH
5907: LD_INT 1
5909: EQUAL
5910: IFFALSE 5928
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5912: LD_VAR 0 1
5916: PUSH
5917: LD_INT 1
5919: ARRAY
5920: PPUSH
5921: LD_STRING D4b-Sol1-7
5923: PPUSH
5924: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5928: LD_VAR 0 1
5932: PUSH
5933: LD_INT 1
5935: ARRAY
5936: PPUSH
5937: CALL_OW 258
5941: PUSH
5942: LD_INT 2
5944: EQUAL
5945: IFFALSE 5963
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5947: LD_VAR 0 1
5951: PUSH
5952: LD_INT 1
5954: ARRAY
5955: PPUSH
5956: LD_STRING D4b-FSol1-7
5958: PPUSH
5959: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5963: LD_EXP 1
5967: PPUSH
5968: LD_STRING D4b-JMM-8
5970: PPUSH
5971: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5975: LD_VAR 0 1
5979: PUSH
5980: LD_INT 1
5982: ARRAY
5983: PPUSH
5984: CALL_OW 258
5988: PUSH
5989: LD_INT 1
5991: EQUAL
5992: IFFALSE 6010
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
5994: LD_VAR 0 1
5998: PUSH
5999: LD_INT 1
6001: ARRAY
6002: PPUSH
6003: LD_STRING D4b-Sol1-8
6005: PPUSH
6006: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6010: LD_VAR 0 1
6014: PUSH
6015: LD_INT 1
6017: ARRAY
6018: PPUSH
6019: CALL_OW 258
6023: PUSH
6024: LD_INT 2
6026: EQUAL
6027: IFFALSE 6045
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6029: LD_VAR 0 1
6033: PUSH
6034: LD_INT 1
6036: ARRAY
6037: PPUSH
6038: LD_STRING D4b-FSol1-8
6040: PPUSH
6041: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6045: LD_EXP 1
6049: PPUSH
6050: LD_STRING D4b-JMM-9
6052: PPUSH
6053: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6057: LD_EXP 8
6061: PPUSH
6062: LD_INT 1
6064: PPUSH
6065: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: LD_INT 22
6076: PUSH
6077: LD_INT 1
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: PUSH
6092: FOR_IN
6093: IFFALSE 6106
// ComFree ( i ) ;
6095: LD_VAR 0 3
6099: PPUSH
6100: CALL_OW 139
6104: GO 6092
6106: POP
6107: POP
// repeat wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6115: LD_EXP 8
6119: PPUSH
6120: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6124: LD_EXP 8
6128: PUSH
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PPUSH
6142: LD_INT 1
6144: PPUSH
6145: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6149: LD_EXP 8
6153: PPUSH
6154: CALL_OW 310
6158: IFFALSE 6108
// mikhailDepot = IsInUnit ( Mikhail ) ;
6160: LD_ADDR_EXP 23
6164: PUSH
6165: LD_EXP 8
6169: PPUSH
6170: CALL_OW 310
6174: ST_TO_ADDR
// InGameOff ;
6175: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6179: LD_STRING M3
6181: PPUSH
6182: CALL_OW 337
// end ; 3 :
6186: GO 6223
6188: LD_INT 3
6190: DOUBLE
6191: EQUAL
6192: IFTRUE 6196
6194: GO 6222
6196: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6197: LD_EXP 8
6201: PPUSH
6202: LD_INT 17
6204: PPUSH
6205: CALL_OW 113
// wait ( 0 0$3 ) ;
6209: LD_INT 105
6211: PPUSH
6212: CALL_OW 67
// InGameOff ;
6216: CALL_OW 9
// end ; end ;
6220: GO 6223
6222: POP
// PrepareTigers ;
6223: CALL 14440 0 0
// RussianTrap ;
6227: CALL 9986 0 0
// tigersRespawn = 1 ;
6231: LD_ADDR_EXP 30
6235: PUSH
6236: LD_INT 1
6238: ST_TO_ADDR
// end ;
6239: PPOPN 3
6241: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6242: LD_INT 1
6244: PPUSH
6245: CALL_OW 255
6249: PUSH
6250: LD_INT 1
6252: EQUAL
6253: PUSH
6254: LD_INT 10
6256: PPUSH
6257: CALL_OW 255
6261: PUSH
6262: LD_INT 1
6264: EQUAL
6265: AND
6266: PUSH
6267: LD_INT 1
6269: PPUSH
6270: CALL_OW 274
6274: PPUSH
6275: LD_INT 1
6277: PPUSH
6278: CALL_OW 275
6282: PUSH
6283: LD_INT 100
6285: GREATEREQUAL
6286: AND
6287: IFFALSE 6436
6289: GO 6291
6291: DISABLE
6292: LD_INT 0
6294: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6295: LD_INT 2100
6297: PPUSH
6298: LD_INT 4200
6300: PPUSH
6301: CALL_OW 12
6305: PUSH
6306: LD_INT 1050
6308: PLUS
6309: PPUSH
6310: CALL_OW 67
// PrepareCargoBays ;
6314: CALL 12723 0 0
// cargoRespawn = 1 ;
6318: LD_ADDR_EXP 28
6322: PUSH
6323: LD_INT 1
6325: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6326: LD_ADDR_VAR 0 1
6330: PUSH
6331: LD_EXP 15
6335: PUSH
6336: LD_EXP 16
6340: PUSH
6341: LD_EXP 17
6345: PUSH
6346: LD_EXP 18
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6357: LD_VAR 0 1
6361: PPUSH
6362: LD_INT 17
6364: PPUSH
6365: LD_INT 10
6367: PPUSH
6368: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6372: LD_VAR 0 1
6376: PPUSH
6377: LD_INT 36
6379: PPUSH
6380: LD_INT 13
6382: PPUSH
6383: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6387: LD_VAR 0 1
6391: PPUSH
6392: LD_INT 40
6394: PPUSH
6395: LD_INT 20
6397: PPUSH
6398: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6402: LD_VAR 0 1
6406: PPUSH
6407: LD_INT 53
6409: PPUSH
6410: LD_INT 16
6412: PPUSH
6413: CALL_OW 171
// wait ( 0 0$5 ) ;
6417: LD_INT 175
6419: PPUSH
6420: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6424: LD_EXP 17
6428: PPUSH
6429: LD_STRING D5-Rus2-1
6431: PPUSH
6432: CALL_OW 88
// end ;
6436: PPOPN 1
6438: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6439: LD_EXP 28
6443: PUSH
6444: LD_INT 1
6446: EQUAL
6447: IFFALSE 6602
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6455: LD_ADDR_VAR 0 1
6459: PUSH
6460: LD_INT 22
6462: PUSH
6463: LD_INT 3
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PUSH
6470: LD_INT 21
6472: PUSH
6473: LD_INT 2
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 34
6482: PUSH
6483: LD_INT 51
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6500: LD_INT 105
6502: PPUSH
6503: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6507: LD_VAR 0 1
6511: PPUSH
6512: LD_INT 3
6514: PUSH
6515: LD_INT 60
6517: PUSH
6518: EMPTY
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 72
6529: PUSH
6530: LD_VAR 0 1
6534: PPUSH
6535: LD_INT 3
6537: PUSH
6538: LD_INT 24
6540: PUSH
6541: LD_INT 980
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PPUSH
6552: CALL_OW 72
6556: OR
6557: IFFALSE 6500
// ComMoveXY ( cargos , 7 , 9 ) ;
6559: LD_VAR 0 1
6563: PPUSH
6564: LD_INT 7
6566: PPUSH
6567: LD_INT 9
6569: PPUSH
6570: CALL_OW 111
// cargoSee = 1 ;
6574: LD_ADDR_EXP 29
6578: PUSH
6579: LD_INT 1
6581: ST_TO_ADDR
// cargoEscape = 1 ;
6582: LD_ADDR_EXP 20
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6590: LD_EXP 17
6594: PPUSH
6595: LD_STRING D5-Rus2-1a
6597: PPUSH
6598: CALL_OW 88
// end ;
6602: PPOPN 1
6604: END
// every 0 0$1 trigger cargoEscape > 0 do
6605: LD_EXP 20
6609: PUSH
6610: LD_INT 0
6612: GREATER
6613: IFFALSE 6760
6615: GO 6617
6617: DISABLE
// begin enable ;
6618: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6619: LD_EXP 15
6623: PUSH
6624: LD_EXP 16
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PPUSH
6633: LD_INT 13
6635: PPUSH
6636: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6640: LD_EXP 15
6644: PPUSH
6645: LD_INT 13
6647: PPUSH
6648: CALL_OW 308
6652: PUSH
6653: LD_EXP 17
6657: PPUSH
6658: LD_INT 13
6660: PPUSH
6661: CALL_OW 308
6665: OR
6666: IFFALSE 6700
// begin RemoveUnit ( cargo1 ) ;
6668: LD_EXP 15
6672: PPUSH
6673: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6677: LD_EXP 17
6681: PPUSH
6682: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6686: LD_ADDR_EXP 20
6690: PUSH
6691: LD_EXP 20
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6700: LD_EXP 16
6704: PPUSH
6705: LD_INT 13
6707: PPUSH
6708: CALL_OW 308
6712: PUSH
6713: LD_EXP 18
6717: PPUSH
6718: LD_INT 13
6720: PPUSH
6721: CALL_OW 308
6725: OR
6726: IFFALSE 6760
// begin RemoveUnit ( cargo2 ) ;
6728: LD_EXP 16
6732: PPUSH
6733: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6737: LD_EXP 18
6741: PPUSH
6742: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6746: LD_ADDR_EXP 20
6750: PUSH
6751: LD_EXP 20
6755: PUSH
6756: LD_INT 1
6758: PLUS
6759: ST_TO_ADDR
// end ; end ;
6760: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6761: LD_EXP 20
6765: PUSH
6766: LD_INT 1
6768: GREATER
6769: IFFALSE 6926
6771: GO 6773
6773: DISABLE
6774: LD_INT 0
6776: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6777: LD_INT 4
6779: PPUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 1
6785: PPUSH
6786: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6790: LD_INT 31
6792: PPUSH
6793: LD_INT 1
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 324
// if IsOK ( Jerry ) then
6803: LD_EXP 7
6807: PPUSH
6808: CALL_OW 302
6812: IFFALSE 6828
// Say ( Jerry , D5a-Sol1-1 ) else
6814: LD_EXP 7
6818: PPUSH
6819: LD_STRING D5a-Sol1-1
6821: PPUSH
6822: CALL_OW 88
6826: GO 6914
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6828: LD_ADDR_VAR 0 1
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 26
6845: PUSH
6846: LD_INT 1
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PPUSH
6857: CALL_OW 69
6861: PUSH
6862: LD_EXP 1
6866: PUSH
6867: LD_EXP 2
6871: PUSH
6872: LD_EXP 3
6876: PUSH
6877: LD_EXP 5
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: DIFF
6888: ST_TO_ADDR
// if not speaker then
6889: LD_VAR 0 1
6893: NOT
6894: IFFALSE 6898
// exit ;
6896: GO 6926
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
6898: LD_VAR 0 1
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_STRING D5a-Sol1-1
6909: PPUSH
6910: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6914: LD_EXP 1
6918: PPUSH
6919: LD_STRING D5a-JMM-1
6921: PPUSH
6922: CALL_OW 88
// end ;
6926: PPOPN 1
6928: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 255
6936: PUSH
6937: LD_INT 3
6939: EQUAL
6940: PUSH
6941: LD_INT 1
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: LESS
6952: AND
6953: PUSH
6954: LD_INT 10
6956: PPUSH
6957: CALL_OW 255
6961: PUSH
6962: LD_INT 3
6964: EQUAL
6965: PUSH
6966: LD_INT 10
6968: PPUSH
6969: CALL_OW 256
6973: PUSH
6974: LD_INT 1000
6976: LESS
6977: AND
6978: OR
6979: IFFALSE 6996
6981: GO 6983
6983: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
6984: LD_EXP 1
6988: PPUSH
6989: LD_STRING D8-JMM-1
6991: PPUSH
6992: CALL_OW 88
// end ;
6996: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
6997: LD_EXP 8
7001: PPUSH
7002: CALL_OW 310
7006: PUSH
7007: LD_INT 1
7009: EQUAL
7010: PUSH
7011: LD_EXP 22
7015: PUSH
7016: LD_INT 3
7018: EQUAL
7019: NOT
7020: AND
7021: IFFALSE 7043
7023: GO 7025
7025: DISABLE
// begin mikhailInBase = 1 ;
7026: LD_ADDR_EXP 22
7030: PUSH
7031: LD_INT 1
7033: ST_TO_ADDR
// mikhailStatus = 1 ;
7034: LD_ADDR_EXP 21
7038: PUSH
7039: LD_INT 1
7041: ST_TO_ADDR
// enable ;
7042: ENABLE
// end ;
7043: END
// export function AskMikhail ; begin
7044: LD_INT 0
7046: PPUSH
// case query ( QMikh2 ) of 1 :
7047: LD_STRING QMikh2
7049: PPUSH
7050: CALL_OW 97
7054: PUSH
7055: LD_INT 1
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7130
7063: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7064: LD_INT 1
7066: PPUSH
7067: LD_INT 6
7069: PPUSH
7070: LD_INT 2
7072: PPUSH
7073: LD_INT 1
7075: PPUSH
7076: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7080: LD_EXP 8
7084: PPUSH
7085: LD_INT 6
7087: PPUSH
7088: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7092: LD_EXP 8
7096: PPUSH
7097: CALL_OW 122
// wait ( 0 0$1 ) ;
7101: LD_INT 35
7103: PPUSH
7104: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7108: LD_EXP 8
7112: PPUSH
7113: LD_INT 17
7115: PPUSH
7116: CALL_OW 113
// mikhailInbase = 0 ;
7120: LD_ADDR_EXP 22
7124: PUSH
7125: LD_INT 0
7127: ST_TO_ADDR
// end ; 2 :
7128: GO 7371
7130: LD_INT 2
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7311
7138: POP
// begin mikhailInBase = 2 ;
7139: LD_ADDR_EXP 22
7143: PUSH
7144: LD_INT 2
7146: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7147: LD_EXP 8
7151: PPUSH
7152: LD_INT 6
7154: PPUSH
7155: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7159: LD_EXP 8
7163: PPUSH
7164: CALL_OW 122
// wait ( 0 0$1 ) ;
7168: LD_INT 35
7170: PPUSH
7171: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7175: LD_EXP 8
7179: PPUSH
7180: LD_EXP 8
7184: PPUSH
7185: CALL_OW 250
7189: PUSH
7190: LD_INT 2
7192: PLUS
7193: PPUSH
7194: LD_EXP 8
7198: PPUSH
7199: CALL_OW 251
7203: PUSH
7204: LD_INT 2
7206: PLUS
7207: PPUSH
7208: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7212: LD_EXP 8
7216: PPUSH
7217: LD_EXP 8
7221: PPUSH
7222: CALL_OW 250
7226: PUSH
7227: LD_INT 1
7229: PLUS
7230: PPUSH
7231: LD_EXP 8
7235: PPUSH
7236: CALL_OW 251
7240: PUSH
7241: LD_INT 2
7243: PLUS
7244: PPUSH
7245: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7249: LD_EXP 8
7253: PPUSH
7254: LD_EXP 8
7258: PPUSH
7259: CALL_OW 250
7263: PUSH
7264: LD_INT 2
7266: PLUS
7267: PPUSH
7268: LD_EXP 8
7272: PPUSH
7273: CALL_OW 251
7277: PPUSH
7278: CALL_OW 171
// wait ( 0 0$5 ) ;
7282: LD_INT 175
7284: PPUSH
7285: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7289: LD_EXP 8
7293: PPUSH
7294: LD_INT 25
7296: PPUSH
7297: CALL_OW 113
// mikhailInBase = 4 ;
7301: LD_ADDR_EXP 22
7305: PUSH
7306: LD_INT 4
7308: ST_TO_ADDR
// end ; 3 :
7309: GO 7371
7311: LD_INT 3
7313: DOUBLE
7314: EQUAL
7315: IFTRUE 7319
7317: GO 7370
7319: POP
// begin SetSide ( Mikhail , 6 ) ;
7320: LD_EXP 8
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7332: LD_EXP 8
7336: PPUSH
7337: CALL_OW 122
// wait ( 0 0$1 ) ;
7341: LD_INT 35
7343: PPUSH
7344: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7348: LD_EXP 8
7352: PPUSH
7353: LD_INT 17
7355: PPUSH
7356: CALL_OW 113
// mikhailInbase = 3 ;
7360: LD_ADDR_EXP 22
7364: PUSH
7365: LD_INT 3
7367: ST_TO_ADDR
// end ; end ;
7368: GO 7371
7370: POP
// end ;
7371: LD_VAR 0 1
7375: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7376: LD_EXP 8
7380: PPUSH
7381: LD_INT 25
7383: PPUSH
7384: CALL_OW 308
7388: PUSH
7389: LD_EXP 22
7393: PUSH
7394: LD_INT 4
7396: EQUAL
7397: AND
7398: IFFALSE 7502
7400: GO 7402
7402: DISABLE
// begin enable ;
7403: ENABLE
// mikhailInBase = 1 ;
7404: LD_ADDR_EXP 22
7408: PUSH
7409: LD_INT 1
7411: ST_TO_ADDR
// InGameOn ;
7412: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7416: LD_INT 1
7418: PPUSH
7419: LD_INT 6
7421: PPUSH
7422: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7426: LD_INT 35
7428: PPUSH
7429: CALL_OW 67
// if Carry ( Mikhail ) then
7433: LD_EXP 8
7437: PPUSH
7438: CALL_OW 281
7442: IFFALSE 7453
// ComUnload ( Mikhail ) ;
7444: LD_EXP 8
7448: PPUSH
7449: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7453: LD_EXP 8
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7465: LD_EXP 8
7469: PPUSH
7470: CALL_OW 310
7474: IFFALSE 7426
// SetSide ( dep1 , 1 ) ;
7476: LD_INT 1
7478: PPUSH
7479: LD_INT 1
7481: PPUSH
7482: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7486: LD_EXP 8
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: CALL_OW 235
// InGameOff ;
7498: CALL_OW 9
// end ;
7502: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7503: LD_EXP 8
7507: PPUSH
7508: CALL_OW 310
7512: PUSH
7513: LD_EXP 22
7517: PUSH
7518: LD_INT 3
7520: EQUAL
7521: NOT
7522: AND
7523: IFFALSE 7658
7525: GO 7527
7527: DISABLE
// begin enable ;
7528: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7529: LD_INT 22
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 21
7541: PUSH
7542: LD_INT 1
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 91
7551: PUSH
7552: LD_EXP 8
7556: PPUSH
7557: CALL_OW 310
7561: PUSH
7562: LD_INT 10
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: PUSH
7580: LD_INT 1
7582: EQUAL
7583: IFFALSE 7658
// begin mikhailStatus = 4 ;
7585: LD_ADDR_EXP 21
7589: PUSH
7590: LD_INT 4
7592: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7593: LD_INT 1
7595: PPUSH
7596: LD_INT 6
7598: PPUSH
7599: LD_INT 2
7601: PPUSH
7602: LD_INT 1
7604: PPUSH
7605: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7609: LD_EXP 8
7613: PPUSH
7614: LD_INT 6
7616: PPUSH
7617: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7621: LD_EXP 8
7625: PPUSH
7626: CALL_OW 122
// wait ( 0 0$1 ) ;
7630: LD_INT 35
7632: PPUSH
7633: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7637: LD_EXP 8
7641: PPUSH
7642: LD_INT 17
7644: PPUSH
7645: CALL_OW 113
// mikhailStatus = 3 ;
7649: LD_ADDR_EXP 21
7653: PUSH
7654: LD_INT 3
7656: ST_TO_ADDR
// disable ;
7657: DISABLE
// end ; end ;
7658: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7659: LD_EXP 1
7663: PPUSH
7664: LD_EXP 23
7668: PPUSH
7669: CALL_OW 296
7673: PUSH
7674: LD_INT 5
7676: LESS
7677: PUSH
7678: LD_EXP 21
7682: PUSH
7683: LD_INT 3
7685: EQUAL
7686: AND
7687: PUSH
7688: LD_EXP 22
7692: PUSH
7693: LD_INT 3
7695: EQUAL
7696: NOT
7697: AND
7698: IFFALSE 7920
7700: GO 7702
7702: DISABLE
7703: LD_INT 0
7705: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7706: LD_ADDR_VAR 0 1
7710: PUSH
7711: LD_INT 22
7713: PUSH
7714: LD_INT 1
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 21
7723: PUSH
7724: LD_INT 1
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: LD_INT 26
7733: PUSH
7734: LD_INT 1
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 69
7750: PUSH
7751: LD_EXP 1
7755: PUSH
7756: LD_EXP 5
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: DIFF
7765: ST_TO_ADDR
// DialogueOn ;
7766: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7770: LD_EXP 1
7774: PPUSH
7775: LD_STRING D7-JMM-1
7777: PPUSH
7778: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7782: LD_VAR 0 1
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: PPUSH
7791: LD_STRING D7-Sol1-1
7793: PPUSH
7794: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7798: LD_EXP 1
7802: PPUSH
7803: LD_STRING D7-JMM-2
7805: PPUSH
7806: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7810: LD_VAR 0 1
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PPUSH
7819: LD_STRING D7-Sol1-2
7821: PPUSH
7822: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7826: LD_EXP 1
7830: PPUSH
7831: LD_STRING D7-JMM-3
7833: PPUSH
7834: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7838: LD_VAR 0 1
7842: PUSH
7843: LD_INT 1
7845: ARRAY
7846: PPUSH
7847: LD_STRING D7-Sol1-3
7849: PPUSH
7850: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7854: LD_EXP 3
7858: PPUSH
7859: CALL_OW 302
7863: PUSH
7864: LD_EXP 4
7868: PPUSH
7869: CALL_OW 302
7873: AND
7874: IFFALSE 7916
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7876: LD_EXP 3
7880: PPUSH
7881: LD_STRING D7-Cyrus-3
7883: PPUSH
7884: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7888: LD_VAR 0 1
7892: PUSH
7893: LD_INT 1
7895: ARRAY
7896: PPUSH
7897: LD_STRING D7-Sol1-4
7899: PPUSH
7900: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
7904: LD_EXP 4
7908: PPUSH
7909: LD_STRING D7-Lisa-4
7911: PPUSH
7912: CALL_OW 88
// end ; DialogueOff ;
7916: CALL_OW 7
// end ;
7920: PPOPN 1
7922: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
7923: LD_EXP 8
7927: PPUSH
7928: CALL_OW 303
7932: PUSH
7933: LD_EXP 21
7937: PUSH
7938: LD_INT 3
7940: EQUAL
7941: AND
7942: IFFALSE 7956
7944: GO 7946
7946: DISABLE
// begin enable ;
7947: ENABLE
// mikhailStatus = 2 ;
7948: LD_ADDR_EXP 21
7952: PUSH
7953: LD_INT 2
7955: ST_TO_ADDR
// end ;
7956: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
7957: LD_EXP 8
7961: PPUSH
7962: LD_INT 17
7964: PPUSH
7965: CALL_OW 308
7969: PUSH
7970: LD_EXP 8
7974: PPUSH
7975: CALL_OW 255
7979: PUSH
7980: LD_INT 6
7982: EQUAL
7983: AND
7984: IFFALSE 8017
7986: GO 7988
7988: DISABLE
// begin if not mikhailInBase = 3 then
7989: LD_EXP 22
7993: PUSH
7994: LD_INT 3
7996: EQUAL
7997: NOT
7998: IFFALSE 8008
// mikhailStatus = 3 ;
8000: LD_ADDR_EXP 21
8004: PUSH
8005: LD_INT 3
8007: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8008: LD_EXP 8
8012: PPUSH
8013: CALL_OW 64
// end ;
8017: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8018: LD_EXP 21
8022: PUSH
8023: LD_INT 3
8025: EQUAL
8026: PUSH
8027: LD_EXP 8
8031: PPUSH
8032: CALL_OW 255
8036: PUSH
8037: LD_INT 6
8039: EQUAL
8040: AND
8041: IFFALSE 8207
8043: GO 8045
8045: DISABLE
8046: LD_INT 0
8048: PPUSH
8049: PPUSH
// begin enable ;
8050: ENABLE
// if IsOk ( Mikhail ) then
8051: LD_EXP 8
8055: PPUSH
8056: CALL_OW 302
8060: IFFALSE 8207
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8062: LD_ADDR_VAR 0 2
8066: PUSH
8067: LD_EXP 8
8071: PPUSH
8072: LD_INT 22
8074: PUSH
8075: LD_INT 1
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 21
8084: PUSH
8085: LD_INT 1
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 69
8100: PPUSH
8101: CALL 10178 0 2
8105: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_EXP 8
8115: PPUSH
8116: CALL_OW 296
8120: PUSH
8121: LD_INT 8
8123: LESS
8124: IFFALSE 8207
// begin if GetSex ( attacker ) = sex_male then
8126: LD_VAR 0 2
8130: PPUSH
8131: CALL_OW 258
8135: PUSH
8136: LD_INT 1
8138: EQUAL
8139: IFFALSE 8175
// begin disable ;
8141: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8142: LD_VAR 0 2
8146: PPUSH
8147: LD_STRING D7a-Sol1-1
8149: PPUSH
8150: CALL_OW 88
// wait ( 0 0$2 ) ;
8154: LD_INT 70
8156: PPUSH
8157: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8161: LD_VAR 0 2
8165: PPUSH
8166: LD_STRING D7a-Sol1-1a
8168: PPUSH
8169: CALL_OW 88
// end else
8173: GO 8207
// begin disable ;
8175: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_STRING D7a-FSol1-1
8183: PPUSH
8184: CALL_OW 88
// wait ( 0 0$2 ) ;
8188: LD_INT 70
8190: PPUSH
8191: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_STRING D7a-FSol1-1a
8202: PPUSH
8203: CALL_OW 88
// end ; end ; end ; end ;
8207: PPOPN 2
8209: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8210: LD_EXP 27
8214: PUSH
8215: LD_INT 1
8217: EQUAL
8218: PUSH
8219: LD_INT 22
8221: PPUSH
8222: LD_INT 22
8224: PUSH
8225: LD_INT 3
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 21
8234: PUSH
8235: LD_INT 1
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: CALL_OW 70
8250: PUSH
8251: LD_INT 2
8253: GREATER
8254: AND
8255: PUSH
8256: LD_INT 22
8258: PPUSH
8259: LD_INT 22
8261: PUSH
8262: LD_INT 1
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 2
8271: PUSH
8272: LD_INT 21
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 59
8284: PUSH
8285: EMPTY
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PPUSH
8297: CALL_OW 70
8301: PUSH
8302: LD_INT 0
8304: EQUAL
8305: AND
8306: IFFALSE 8321
8308: GO 8310
8310: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 3
8316: PPUSH
8317: CALL_OW 235
// end ;
8321: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8322: LD_EXP 30
8326: PUSH
8327: LD_INT 1
8329: EQUAL
8330: PUSH
8331: LD_INT 22
8333: PUSH
8334: LD_INT 0
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: LD_INT 25
8343: PUSH
8344: LD_INT 14
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PPUSH
8355: CALL_OW 69
8359: PUSH
8360: LD_INT 0
8362: EQUAL
8363: AND
8364: IFFALSE 8465
8366: GO 8368
8368: DISABLE
8369: LD_INT 0
8371: PPUSH
8372: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8373: LD_ADDR_VAR 0 2
8377: PUSH
8378: LD_INT 22
8380: PUSH
8381: LD_INT 1
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 1
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 23
8400: PUSH
8401: LD_INT 1
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: LIST
8412: PPUSH
8413: CALL_OW 69
8417: ST_TO_ADDR
// for i in tmp do
8418: LD_ADDR_VAR 0 1
8422: PUSH
8423: LD_VAR 0 2
8427: PUSH
8428: FOR_IN
8429: IFFALSE 8456
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8431: LD_VAR 0 1
8435: PPUSH
8436: LD_INT 1
8438: PPUSH
8439: LD_INT 4
8441: PPUSH
8442: CALL_OW 12
8446: PPUSH
8447: LD_INT 300
8449: PPUSH
8450: CALL_OW 492
8454: GO 8428
8456: POP
8457: POP
// SetAchievement ( ACH_TIGER ) ;
8458: LD_STRING ACH_TIGER
8460: PPUSH
8461: CALL_OW 543
// end ;
8465: PPOPN 2
8467: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8468: LD_INT 22
8470: PUSH
8471: LD_INT 1
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 34
8480: PUSH
8481: LD_INT 51
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PPUSH
8492: CALL_OW 69
8496: PUSH
8497: LD_INT 2
8499: GREATEREQUAL
8500: IFFALSE 8512
8502: GO 8504
8504: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8505: LD_STRING ACH_CARGO
8507: PPUSH
8508: CALL_OW 543
8512: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8513: LD_INT 0
8515: PPUSH
8516: PPUSH
8517: PPUSH
8518: PPUSH
// for i = 1 to count do
8519: LD_ADDR_VAR 0 8
8523: PUSH
8524: DOUBLE
8525: LD_INT 1
8527: DEC
8528: ST_TO_ADDR
8529: LD_VAR 0 6
8533: PUSH
8534: FOR_TO
8535: IFFALSE 8616
// begin uc_side = side ;
8537: LD_ADDR_OWVAR 20
8541: PUSH
8542: LD_VAR 0 1
8546: ST_TO_ADDR
// uc_nation = nation ;
8547: LD_ADDR_OWVAR 21
8551: PUSH
8552: LD_VAR 0 2
8556: ST_TO_ADDR
// hc_gallery =  ;
8557: LD_ADDR_OWVAR 33
8561: PUSH
8562: LD_STRING 
8564: ST_TO_ADDR
// hc_name =  ;
8565: LD_ADDR_OWVAR 26
8569: PUSH
8570: LD_STRING 
8572: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8573: LD_INT 0
8575: PPUSH
8576: LD_VAR 0 5
8580: PPUSH
8581: LD_VAR 0 4
8585: PPUSH
8586: CALL_OW 380
// un = CreateHuman ;
8590: LD_ADDR_VAR 0 10
8594: PUSH
8595: CALL_OW 44
8599: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8600: LD_VAR 0 10
8604: PPUSH
8605: LD_VAR 0 3
8609: PPUSH
8610: CALL_OW 52
// end ;
8614: GO 8534
8616: POP
8617: POP
// end ;
8618: LD_VAR 0 7
8622: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8623: LD_INT 0
8625: PPUSH
8626: PPUSH
8627: PPUSH
// uc_side := GetSide ( b ) ;
8628: LD_ADDR_OWVAR 20
8632: PUSH
8633: LD_VAR 0 2
8637: PPUSH
8638: CALL_OW 255
8642: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8643: LD_ADDR_OWVAR 21
8647: PUSH
8648: LD_VAR 0 2
8652: PPUSH
8653: CALL_OW 248
8657: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8658: LD_INT 0
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: LD_VAR 0 1
8668: PPUSH
8669: CALL_OW 380
// un = CreateHuman ;
8673: LD_ADDR_VAR 0 4
8677: PUSH
8678: CALL_OW 44
8682: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8683: LD_ADDR_VAR 0 5
8687: PUSH
8688: LD_VAR 0 2
8692: PPUSH
8693: CALL_OW 254
8697: PUSH
8698: LD_INT 3
8700: MINUS
8701: ST_TO_ADDR
// if dir < 0 then
8702: LD_VAR 0 5
8706: PUSH
8707: LD_INT 0
8709: LESS
8710: IFFALSE 8726
// dir := 6 + dir ;
8712: LD_ADDR_VAR 0 5
8716: PUSH
8717: LD_INT 6
8719: PUSH
8720: LD_VAR 0 5
8724: PLUS
8725: ST_TO_ADDR
// SetDir ( un , dir ) ;
8726: LD_VAR 0 4
8730: PPUSH
8731: LD_VAR 0 5
8735: PPUSH
8736: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8740: LD_VAR 0 4
8744: PPUSH
8745: LD_VAR 0 2
8749: PPUSH
8750: CALL_OW 52
// end ;
8754: LD_VAR 0 3
8758: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8759: LD_INT 0
8761: PPUSH
8762: PPUSH
8763: PPUSH
8764: PPUSH
8765: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8766: LD_ADDR_VAR 0 7
8770: PUSH
8771: LD_INT 22
8773: PUSH
8774: LD_VAR 0 1
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 25
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 24
8795: PUSH
8796: LD_INT 1000
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 69
8812: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8813: LD_ADDR_VAR 0 5
8817: PUSH
8818: LD_VAR 0 3
8822: PPUSH
8823: LD_INT 22
8825: PUSH
8826: LD_VAR 0 1
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 21
8837: PUSH
8838: LD_INT 3
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: LD_INT 3
8847: PUSH
8848: LD_INT 24
8850: PUSH
8851: LD_INT 1000
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: LIST
8866: PUSH
8867: EMPTY
8868: LIST
8869: PPUSH
8870: CALL_OW 70
8874: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8875: LD_VAR 0 5
8879: PUSH
8880: LD_INT 0
8882: GREATER
8883: PUSH
8884: LD_VAR 0 7
8888: PUSH
8889: LD_INT 0
8891: GREATER
8892: AND
8893: IFFALSE 8959
// begin for i in engineerOk_list do
8895: LD_ADDR_VAR 0 6
8899: PUSH
8900: LD_VAR 0 7
8904: PUSH
8905: FOR_IN
8906: IFFALSE 8957
// begin for j in buildings_list do
8908: LD_ADDR_VAR 0 8
8912: PUSH
8913: LD_VAR 0 5
8917: PUSH
8918: FOR_IN
8919: IFFALSE 8953
// begin AddComExitBuilding ( i ) ;
8921: LD_VAR 0 6
8925: PPUSH
8926: CALL_OW 182
// wait ( 0 0$1 ) ;
8930: LD_INT 35
8932: PPUSH
8933: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
8937: LD_VAR 0 6
8941: PPUSH
8942: LD_VAR 0 8
8946: PPUSH
8947: CALL_OW 190
// end ;
8951: GO 8918
8953: POP
8954: POP
// end ;
8955: GO 8905
8957: POP
8958: POP
// end ; if buildings_list = 0 then
8959: LD_VAR 0 5
8963: PUSH
8964: LD_INT 0
8966: EQUAL
8967: IFFALSE 9000
// begin for i in engineerOK_list do
8969: LD_ADDR_VAR 0 6
8973: PUSH
8974: LD_VAR 0 7
8978: PUSH
8979: FOR_IN
8980: IFFALSE 8998
// begin ComEnterUnit ( i , building ) ;
8982: LD_VAR 0 6
8986: PPUSH
8987: LD_VAR 0 2
8991: PPUSH
8992: CALL_OW 120
// end ;
8996: GO 8979
8998: POP
8999: POP
// end ; end ;
9000: LD_VAR 0 4
9004: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9005: LD_INT 0
9007: PPUSH
9008: PPUSH
9009: PPUSH
9010: PPUSH
9011: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9012: LD_ADDR_VAR 0 6
9016: PUSH
9017: LD_INT 22
9019: PUSH
9020: LD_VAR 0 1
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 25
9031: PUSH
9032: LD_INT 4
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 24
9041: PUSH
9042: LD_INT 250
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 69
9058: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9059: LD_ADDR_VAR 0 9
9063: PUSH
9064: LD_VAR 0 3
9068: PPUSH
9069: LD_INT 22
9071: PUSH
9072: LD_VAR 0 1
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 1
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 3
9093: PUSH
9094: LD_INT 24
9096: PUSH
9097: LD_INT 650
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: PPUSH
9113: CALL_OW 70
9117: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9118: LD_VAR 0 9
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: PUSH
9127: LD_VAR 0 6
9131: PUSH
9132: LD_INT 0
9134: GREATER
9135: AND
9136: IFFALSE 9263
// begin for i = 1 to damageUnits do
9138: LD_ADDR_VAR 0 7
9142: PUSH
9143: DOUBLE
9144: LD_INT 1
9146: DEC
9147: ST_TO_ADDR
9148: LD_VAR 0 9
9152: PUSH
9153: FOR_TO
9154: IFFALSE 9178
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9156: LD_VAR 0 9
9160: PUSH
9161: LD_VAR 0 7
9165: ARRAY
9166: PPUSH
9167: LD_VAR 0 2
9171: PPUSH
9172: CALL_OW 113
9176: GO 9153
9178: POP
9179: POP
// for i in sci_list do
9180: LD_ADDR_VAR 0 7
9184: PUSH
9185: LD_VAR 0 6
9189: PUSH
9190: FOR_IN
9191: IFFALSE 9259
// begin ComExitBuilding ( i ) ;
9193: LD_VAR 0 7
9197: PPUSH
9198: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9202: LD_ADDR_VAR 0 8
9206: PUSH
9207: LD_VAR 0 2
9211: PPUSH
9212: LD_INT 22
9214: PUSH
9215: LD_VAR 0 1
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PPUSH
9224: CALL_OW 70
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9255
// begin AddComHeal ( i , j ) ;
9232: LD_VAR 0 7
9236: PPUSH
9237: LD_VAR 0 8
9241: PPUSH
9242: CALL_OW 188
// wait ( 1 1$0 ) ;
9246: LD_INT 2100
9248: PPUSH
9249: CALL_OW 67
// end ;
9253: GO 9229
9255: POP
9256: POP
// end ;
9257: GO 9190
9259: POP
9260: POP
// end else
9261: GO 9277
// begin AddComEnterUnit ( sci_list , build ) ;
9263: LD_VAR 0 6
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: CALL_OW 180
// end ; end ;
9277: LD_VAR 0 5
9281: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9282: LD_INT 0
9284: PPUSH
9285: PPUSH
9286: PPUSH
9287: PPUSH
9288: PPUSH
9289: PPUSH
9290: PPUSH
9291: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9292: LD_ADDR_VAR 0 7
9296: PUSH
9297: LD_VAR 0 3
9301: PPUSH
9302: LD_INT 22
9304: PUSH
9305: LD_VAR 0 1
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 21
9316: PUSH
9317: LD_INT 2
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 24
9326: PUSH
9327: LD_INT 550
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 34
9336: PUSH
9337: LD_INT 46
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PPUSH
9350: CALL_OW 70
9354: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9355: LD_ADDR_VAR 0 8
9359: PUSH
9360: LD_VAR 0 3
9364: PPUSH
9365: LD_INT 22
9367: PUSH
9368: LD_VAR 0 1
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 21
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 34
9389: PUSH
9390: LD_INT 46
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: LD_INT 24
9402: PUSH
9403: LD_INT 550
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 70
9424: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9425: LD_ADDR_VAR 0 9
9429: PUSH
9430: LD_VAR 0 2
9434: PPUSH
9435: LD_INT 22
9437: PUSH
9438: LD_VAR 0 1
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 21
9449: PUSH
9450: LD_INT 2
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PUSH
9457: LD_INT 34
9459: PUSH
9460: LD_INT 46
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 24
9469: PUSH
9470: LD_INT 1000
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 58
9479: PUSH
9480: EMPTY
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: PPUSH
9490: CALL_OW 70
9494: ST_TO_ADDR
// for i in damageVehicle_list do
9495: LD_ADDR_VAR 0 5
9499: PUSH
9500: LD_VAR 0 8
9504: PUSH
9505: FOR_IN
9506: IFFALSE 9525
// mechanicInside_list = UnitsInside ( i ) ;
9508: LD_ADDR_VAR 0 10
9512: PUSH
9513: LD_VAR 0 5
9517: PPUSH
9518: CALL_OW 313
9522: ST_TO_ADDR
9523: GO 9505
9525: POP
9526: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9527: LD_ADDR_VAR 0 11
9531: PUSH
9532: LD_VAR 0 2
9536: PPUSH
9537: LD_INT 22
9539: PUSH
9540: LD_VAR 0 1
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 25
9551: PUSH
9552: LD_INT 3
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 70
9567: ST_TO_ADDR
// if damageVehicle_list > 0 then
9568: LD_VAR 0 8
9572: PUSH
9573: LD_INT 0
9575: GREATER
9576: IFFALSE 9649
// begin for i in damageVehicle_list do
9578: LD_ADDR_VAR 0 5
9582: PUSH
9583: LD_VAR 0 8
9587: PUSH
9588: FOR_IN
9589: IFFALSE 9647
// begin for j in mechanicInside_list do
9591: LD_ADDR_VAR 0 6
9595: PUSH
9596: LD_VAR 0 10
9600: PUSH
9601: FOR_IN
9602: IFFALSE 9643
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9604: LD_VAR 0 8
9608: PPUSH
9609: LD_VAR 0 2
9613: PPUSH
9614: CALL_OW 113
// AddComExitVehicle ( j ) ;
9618: LD_VAR 0 6
9622: PPUSH
9623: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9627: LD_VAR 0 6
9631: PPUSH
9632: LD_VAR 0 5
9636: PPUSH
9637: CALL_OW 189
// end ;
9641: GO 9601
9643: POP
9644: POP
// end ;
9645: GO 9588
9647: POP
9648: POP
// end ; if emptyVehicle_list > 0 then
9649: LD_VAR 0 9
9653: PUSH
9654: LD_INT 0
9656: GREATER
9657: IFFALSE 9707
// begin for i in emptyVehicle_list do
9659: LD_ADDR_VAR 0 5
9663: PUSH
9664: LD_VAR 0 9
9668: PUSH
9669: FOR_IN
9670: IFFALSE 9705
// begin for j in mechanicOutside_list do
9672: LD_ADDR_VAR 0 6
9676: PUSH
9677: LD_VAR 0 11
9681: PUSH
9682: FOR_IN
9683: IFFALSE 9701
// begin AddComEnterUnit ( j , i ) ;
9685: LD_VAR 0 6
9689: PPUSH
9690: LD_VAR 0 5
9694: PPUSH
9695: CALL_OW 180
// end ;
9699: GO 9682
9701: POP
9702: POP
// end ;
9703: GO 9669
9705: POP
9706: POP
// end ; if VehicleOK_list > 0 then
9707: LD_VAR 0 7
9711: PUSH
9712: LD_INT 0
9714: GREATER
9715: IFFALSE 9749
// begin for i in VehicleOK_list do
9717: LD_ADDR_VAR 0 5
9721: PUSH
9722: LD_VAR 0 7
9726: PUSH
9727: FOR_IN
9728: IFFALSE 9747
// ComAgressiveMove ( i , 110 , 29 ) ;
9730: LD_VAR 0 5
9734: PPUSH
9735: LD_INT 110
9737: PPUSH
9738: LD_INT 29
9740: PPUSH
9741: CALL_OW 114
9745: GO 9727
9747: POP
9748: POP
// end ; end ;
9749: LD_VAR 0 4
9753: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9754: LD_INT 0
9756: PPUSH
9757: PPUSH
9758: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9759: LD_VAR 0 1
9763: PPUSH
9764: LD_INT 22
9766: PUSH
9767: LD_VAR 0 2
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: LD_INT 21
9781: PUSH
9782: LD_INT 2
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 21
9791: PUSH
9792: LD_INT 1
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 70
9812: PUSH
9813: LD_VAR 0 5
9817: GREATER
9818: IFFALSE 9950
// begin for i in defendersList do
9820: LD_ADDR_VAR 0 7
9824: PUSH
9825: LD_VAR 0 3
9829: PUSH
9830: FOR_IN
9831: IFFALSE 9946
// begin AddComExitBuilding ( i ) ;
9833: LD_VAR 0 7
9837: PPUSH
9838: CALL_OW 182
// wait ( 0 0$1 ) ;
9842: LD_INT 35
9844: PPUSH
9845: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9849: LD_ADDR_VAR 0 8
9853: PUSH
9854: LD_VAR 0 1
9858: PPUSH
9859: LD_INT 22
9861: PUSH
9862: LD_VAR 0 2
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 2
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 2
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 1
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 70
9907: PUSH
9908: FOR_IN
9909: IFFALSE 9942
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
9911: LD_VAR 0 7
9915: PPUSH
9916: LD_VAR 0 8
9920: PPUSH
9921: CALL_OW 250
9925: PPUSH
9926: LD_VAR 0 8
9930: PPUSH
9931: CALL_OW 251
9935: PPUSH
9936: CALL_OW 174
9940: GO 9908
9942: POP
9943: POP
// end ;
9944: GO 9830
9946: POP
9947: POP
// end else
9948: GO 9981
// begin for i in defendersList do
9950: LD_ADDR_VAR 0 7
9954: PUSH
9955: LD_VAR 0 3
9959: PUSH
9960: FOR_IN
9961: IFFALSE 9979
// ComEnterUnit ( i , build ) ;
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 4
9972: PPUSH
9973: CALL_OW 120
9977: GO 9960
9979: POP
9980: POP
// end ; end ;
9981: LD_VAR 0 6
9985: RET
// export function RussianTrap ; var i ; begin
9986: LD_INT 0
9988: PPUSH
9989: PPUSH
// if GetSide ( Brian ) = 4 then
9990: LD_EXP 6
9994: PPUSH
9995: CALL_OW 255
9999: PUSH
10000: LD_INT 4
10002: EQUAL
10003: IFFALSE 10026
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10005: LD_EXP 6
10009: PUSH
10010: LD_EXP 7
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PPUSH
10019: LD_INT 0
10021: PPUSH
10022: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10026: LD_ADDR_VAR 0 2
10030: PUSH
10031: LD_INT 22
10033: PUSH
10034: LD_INT 3
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 21
10043: PUSH
10044: LD_INT 1
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: PUSH
10060: FOR_IN
10061: IFFALSE 10171
// begin ComExitBuilding ( i ) ;
10063: LD_VAR 0 2
10067: PPUSH
10068: CALL_OW 122
// wait ( 0 0$1 ) ;
10072: LD_INT 35
10074: PPUSH
10075: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10079: LD_VAR 0 2
10083: PPUSH
10084: LD_INT 120
10086: PPUSH
10087: LD_INT 56
10089: PPUSH
10090: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10094: LD_VAR 0 2
10098: PPUSH
10099: LD_INT 111
10101: PPUSH
10102: LD_INT 37
10104: PPUSH
10105: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10109: LD_INT 33
10111: PPUSH
10112: CALL_OW 255
10116: PUSH
10117: LD_INT 3
10119: EQUAL
10120: PUSH
10121: LD_INT 33
10123: PPUSH
10124: CALL_OW 302
10128: AND
10129: IFFALSE 10145
// begin AddComEnterUnit ( i , arm2 ) ;
10131: LD_VAR 0 2
10135: PPUSH
10136: LD_INT 33
10138: PPUSH
10139: CALL_OW 180
// end else
10143: GO 10169
// begin AddComCrawl ( i ) ;
10145: LD_VAR 0 2
10149: PPUSH
10150: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10154: LD_VAR 0 2
10158: PPUSH
10159: LD_INT 109
10161: PPUSH
10162: LD_INT 30
10164: PPUSH
10165: CALL_OW 174
// end ; end ;
10169: GO 10060
10171: POP
10172: POP
// end ;
10173: LD_VAR 0 1
10177: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10178: LD_INT 0
10180: PPUSH
10181: PPUSH
10182: PPUSH
10183: PPUSH
10184: PPUSH
// nearest_dist = 1000 ;
10185: LD_ADDR_VAR 0 4
10189: PUSH
10190: LD_INT 1000
10192: ST_TO_ADDR
// nearest_un = un ;
10193: LD_ADDR_VAR 0 5
10197: PUSH
10198: LD_VAR 0 1
10202: ST_TO_ADDR
// for sold in units do
10203: LD_ADDR_VAR 0 6
10207: PUSH
10208: LD_VAR 0 2
10212: PUSH
10213: FOR_IN
10214: IFFALSE 10270
// begin dist = GetDistUnits ( un , sold ) ;
10216: LD_ADDR_VAR 0 7
10220: PUSH
10221: LD_VAR 0 1
10225: PPUSH
10226: LD_VAR 0 6
10230: PPUSH
10231: CALL_OW 296
10235: ST_TO_ADDR
// if dist < nearest_dist then
10236: LD_VAR 0 7
10240: PUSH
10241: LD_VAR 0 4
10245: LESS
10246: IFFALSE 10268
// begin nearest_un = sold ;
10248: LD_ADDR_VAR 0 5
10252: PUSH
10253: LD_VAR 0 6
10257: ST_TO_ADDR
// nearest_dist = dist ;
10258: LD_ADDR_VAR 0 4
10262: PUSH
10263: LD_VAR 0 7
10267: ST_TO_ADDR
// end ; end ;
10268: GO 10213
10270: POP
10271: POP
// result := nearest_un ;
10272: LD_ADDR_VAR 0 3
10276: PUSH
10277: LD_VAR 0 5
10281: ST_TO_ADDR
// end ;
10282: LD_VAR 0 3
10286: RET
// export function PrepareDifficulty ; begin
10287: LD_INT 0
10289: PPUSH
// if Difficulty = 1 then
10290: LD_OWVAR 67
10294: PUSH
10295: LD_INT 1
10297: EQUAL
10298: IFFALSE 10361
// begin RemoveUnit ( brw2 ) ;
10300: LD_INT 9
10302: PPUSH
10303: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10307: LD_INT 30
10309: PPUSH
10310: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10314: LD_INT 52
10316: PPUSH
10317: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10321: LD_INT 63
10323: PPUSH
10324: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10328: LD_INT 5
10330: PUSH
10331: LD_INT 4
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PPUSH
10338: LD_INT 60
10340: PPUSH
10341: CALL_OW 240
// RuSoldMinLevel = 0 ;
10345: LD_ADDR_EXP 13
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10353: LD_ADDR_EXP 14
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// end ; if Difficulty = 2 then
10361: LD_OWVAR 67
10365: PUSH
10366: LD_INT 2
10368: EQUAL
10369: IFFALSE 10411
// begin RemoveUnit ( brw4 ) ;
10371: LD_INT 52
10373: PPUSH
10374: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10378: LD_INT 5
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PPUSH
10388: LD_INT 50
10390: PPUSH
10391: CALL_OW 240
// RuSoldMinLevel = 1 ;
10395: LD_ADDR_EXP 13
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10403: LD_ADDR_EXP 14
10407: PUSH
10408: LD_INT 2
10410: ST_TO_ADDR
// end ; if Difficulty = 3 then
10411: LD_OWVAR 67
10415: PUSH
10416: LD_INT 3
10418: EQUAL
10419: IFFALSE 10454
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10421: LD_INT 5
10423: PUSH
10424: LD_INT 4
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: LD_INT 40
10433: PPUSH
10434: CALL_OW 240
// RuSoldMinLevel = 2 ;
10438: LD_ADDR_EXP 13
10442: PUSH
10443: LD_INT 2
10445: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10446: LD_ADDR_EXP 14
10450: PUSH
10451: LD_INT 3
10453: ST_TO_ADDR
// end ; end ;
10454: LD_VAR 0 1
10458: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10459: LD_INT 0
10461: PPUSH
10462: PPUSH
10463: PPUSH
// tmp = [ ] ;
10464: LD_ADDR_VAR 0 5
10468: PUSH
10469: EMPTY
10470: ST_TO_ADDR
// if not vehicles then
10471: LD_VAR 0 1
10475: NOT
10476: IFFALSE 10480
// exit ;
10478: GO 10597
// for i in vehicles do
10480: LD_ADDR_VAR 0 4
10484: PUSH
10485: LD_VAR 0 1
10489: PUSH
10490: FOR_IN
10491: IFFALSE 10581
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10493: LD_ADDR_VAR 0 5
10497: PUSH
10498: LD_VAR 0 5
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_VAR 0 4
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: CALL_OW 263
10535: PUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: CALL_OW 261
10555: PUSH
10556: LD_VAR 0 4
10560: PPUSH
10561: CALL_OW 256
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 2
10578: ST_TO_ADDR
// end ;
10579: GO 10490
10581: POP
10582: POP
// SaveVariable ( tmp , ident ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 39
// end ; end_of_file
10597: LD_VAR 0 3
10601: RET
// export function PrepareHeroes ; var plive ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
// uc_side = 1 ;
10606: LD_ADDR_OWVAR 20
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10614: LD_ADDR_EXP 1
10618: PUSH
10619: LD_STRING 01_JMM
10621: PPUSH
10622: CALL_OW 34
10626: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10627: LD_ADDR_VAR 0 2
10631: PUSH
10632: LD_STRING 01_JMMLifePoints_1
10634: PPUSH
10635: LD_INT 1000
10637: PPUSH
10638: CALL_OW 30
10642: ST_TO_ADDR
// if plive < 250 then
10643: LD_VAR 0 2
10647: PUSH
10648: LD_INT 250
10650: LESS
10651: IFFALSE 10661
// plive := 300 ;
10653: LD_ADDR_VAR 0 2
10657: PUSH
10658: LD_INT 300
10660: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10661: LD_EXP 1
10665: PPUSH
10666: LD_VAR 0 2
10670: PPUSH
10671: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10675: LD_ADDR_EXP 9
10679: PUSH
10680: LD_STRING Powell
10682: PPUSH
10683: CALL_OW 25
10687: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10688: LD_ADDR_EXP 2
10692: PUSH
10693: LD_STRING 01_Bobby
10695: PPUSH
10696: CALL_OW 34
10700: ST_TO_ADDR
// if Bobby then
10701: LD_EXP 2
10705: IFFALSE 10755
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10707: LD_ADDR_VAR 0 2
10711: PUSH
10712: LD_STRING 01_BobbyLifePoints_1
10714: PPUSH
10715: LD_INT 1000
10717: PPUSH
10718: CALL_OW 30
10722: ST_TO_ADDR
// if plive < 250 then
10723: LD_VAR 0 2
10727: PUSH
10728: LD_INT 250
10730: LESS
10731: IFFALSE 10741
// plive := 300 ;
10733: LD_ADDR_VAR 0 2
10737: PUSH
10738: LD_INT 300
10740: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10741: LD_EXP 2
10745: PPUSH
10746: LD_VAR 0 2
10750: PPUSH
10751: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10755: LD_ADDR_EXP 3
10759: PUSH
10760: LD_STRING 01_Cyrus
10762: PPUSH
10763: CALL_OW 34
10767: ST_TO_ADDR
// if Cyrus then
10768: LD_EXP 3
10772: IFFALSE 10822
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10774: LD_ADDR_VAR 0 2
10778: PUSH
10779: LD_STRING 01_CyrusLifePoints_1
10781: PPUSH
10782: LD_INT 1000
10784: PPUSH
10785: CALL_OW 30
10789: ST_TO_ADDR
// if plive < 250 then
10790: LD_VAR 0 2
10794: PUSH
10795: LD_INT 250
10797: LESS
10798: IFFALSE 10808
// plive := 300 ;
10800: LD_ADDR_VAR 0 2
10804: PUSH
10805: LD_INT 300
10807: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10808: LD_EXP 3
10812: PPUSH
10813: LD_VAR 0 2
10817: PPUSH
10818: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10822: LD_ADDR_EXP 5
10826: PUSH
10827: LD_STRING Khatam
10829: PPUSH
10830: CALL_OW 25
10834: ST_TO_ADDR
// uc_side = 4 ;
10835: LD_ADDR_OWVAR 20
10839: PUSH
10840: LD_INT 4
10842: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10843: LD_ADDR_EXP 4
10847: PUSH
10848: LD_STRING Lisa
10850: PPUSH
10851: CALL_OW 25
10855: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10856: LD_EXP 1
10860: PPUSH
10861: LD_INT 3
10863: PPUSH
10864: LD_INT 0
10866: PPUSH
10867: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10871: LD_EXP 2
10875: PPUSH
10876: LD_INT 3
10878: PPUSH
10879: LD_INT 0
10881: PPUSH
10882: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10886: LD_EXP 3
10890: PPUSH
10891: LD_INT 3
10893: PPUSH
10894: LD_INT 0
10896: PPUSH
10897: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10901: LD_EXP 4
10905: PPUSH
10906: LD_INT 5
10908: PPUSH
10909: LD_INT 0
10911: PPUSH
10912: CALL_OW 49
// ComCrawl ( Lisa ) ;
10916: LD_EXP 4
10920: PPUSH
10921: CALL_OW 137
// end ;
10925: LD_VAR 0 1
10929: RET
// export function PrepareLisSquad ; var i , un ; begin
10930: LD_INT 0
10932: PPUSH
10933: PPUSH
10934: PPUSH
// uc_side = 4 ;
10935: LD_ADDR_OWVAR 20
10939: PUSH
10940: LD_INT 4
10942: ST_TO_ADDR
// uc_nation = 1 ;
10943: LD_ADDR_OWVAR 21
10947: PUSH
10948: LD_INT 1
10950: ST_TO_ADDR
// hc_class := 2 ;
10951: LD_ADDR_OWVAR 28
10955: PUSH
10956: LD_INT 2
10958: ST_TO_ADDR
// hc_sex := sex_male ;
10959: LD_ADDR_OWVAR 27
10963: PUSH
10964: LD_INT 1
10966: ST_TO_ADDR
// hc_gallery :=  ;
10967: LD_ADDR_OWVAR 33
10971: PUSH
10972: LD_STRING 
10974: ST_TO_ADDR
// hc_name :=  ;
10975: LD_ADDR_OWVAR 26
10979: PUSH
10980: LD_STRING 
10982: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
10983: LD_ADDR_OWVAR 30
10987: PUSH
10988: LD_INT 0
10990: PUSH
10991: LD_INT 1
10993: PUSH
10994: LD_INT 0
10996: PUSH
10997: LD_INT 0
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11006: LD_ADDR_OWVAR 31
11010: PUSH
11011: LD_INT 1
11013: PUSH
11014: LD_INT 2
11016: PUSH
11017: LD_INT 0
11019: PUSH
11020: LD_INT 0
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: ST_TO_ADDR
// un := CreateHuman ;
11029: LD_ADDR_VAR 0 3
11033: PUSH
11034: CALL_OW 44
11038: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_INT 6
11046: PPUSH
11047: LD_INT 0
11049: PPUSH
11050: CALL_OW 49
// hc_sex := sex_female ;
11054: LD_ADDR_OWVAR 27
11058: PUSH
11059: LD_INT 2
11061: ST_TO_ADDR
// hc_gallery :=  ;
11062: LD_ADDR_OWVAR 33
11066: PUSH
11067: LD_STRING 
11069: ST_TO_ADDR
// hc_name :=  ;
11070: LD_ADDR_OWVAR 26
11074: PUSH
11075: LD_STRING 
11077: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11078: LD_ADDR_OWVAR 30
11082: PUSH
11083: LD_INT 0
11085: PUSH
11086: LD_INT 0
11088: PUSH
11089: LD_INT 0
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11101: LD_ADDR_OWVAR 31
11105: PUSH
11106: LD_INT 0
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: LD_INT 0
11114: PUSH
11115: LD_INT 1
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: ST_TO_ADDR
// un := CreateHuman ;
11124: LD_ADDR_VAR 0 3
11128: PUSH
11129: CALL_OW 44
11133: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11134: LD_VAR 0 3
11138: PPUSH
11139: LD_INT 6
11141: PPUSH
11142: LD_INT 0
11144: PPUSH
11145: CALL_OW 49
// if not Bobby and not Cyrus then
11149: LD_EXP 2
11153: NOT
11154: PUSH
11155: LD_EXP 3
11159: NOT
11160: AND
11161: IFFALSE 11266
// begin hc_class := 1 ;
11163: LD_ADDR_OWVAR 28
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
// hc_sex := sex_male ;
11171: LD_ADDR_OWVAR 27
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// hc_gallery :=  ;
11179: LD_ADDR_OWVAR 33
11183: PUSH
11184: LD_STRING 
11186: ST_TO_ADDR
// hc_name :=  ;
11187: LD_ADDR_OWVAR 26
11191: PUSH
11192: LD_STRING 
11194: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11195: LD_ADDR_OWVAR 30
11199: PUSH
11200: LD_INT 2
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: LD_INT 0
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11218: LD_ADDR_OWVAR 31
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: LD_INT 3
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: LD_INT 0
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: ST_TO_ADDR
// un := CreateHuman ;
11241: LD_ADDR_VAR 0 3
11245: PUSH
11246: CALL_OW 44
11250: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11251: LD_VAR 0 3
11255: PPUSH
11256: LD_INT 31
11258: PPUSH
11259: LD_INT 0
11261: PPUSH
11262: CALL_OW 49
// end ; InitHc ;
11266: CALL_OW 19
// end ;
11270: LD_VAR 0 1
11274: RET
// export function PrepareOtherAmericans ; begin
11275: LD_INT 0
11277: PPUSH
// uc_side = 4 ;
11278: LD_ADDR_OWVAR 20
11282: PUSH
11283: LD_INT 4
11285: ST_TO_ADDR
// uc_nation = 1 ;
11286: LD_ADDR_OWVAR 21
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// hc_gallery =  ;
11294: LD_ADDR_OWVAR 33
11298: PUSH
11299: LD_STRING 
11301: ST_TO_ADDR
// hc_name = Tom Garvin ;
11302: LD_ADDR_OWVAR 26
11306: PUSH
11307: LD_STRING Tom Garvin
11309: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11310: LD_INT 1
11312: PPUSH
11313: LD_INT 1
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: LD_INT 2
11321: PPUSH
11322: CALL_OW 12
11326: PPUSH
11327: CALL_OW 380
// Brian = CreateHuman ;
11331: LD_ADDR_EXP 6
11335: PUSH
11336: CALL_OW 44
11340: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11341: LD_EXP 6
11345: PPUSH
11346: LD_INT 10
11348: PPUSH
11349: LD_INT 0
11351: PPUSH
11352: CALL_OW 49
// hc_name = Jerry White ;
11356: LD_ADDR_OWVAR 26
11360: PUSH
11361: LD_STRING Jerry White
11363: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11364: LD_INT 1
11366: PPUSH
11367: LD_INT 3
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: LD_INT 2
11375: PPUSH
11376: CALL_OW 12
11380: PPUSH
11381: CALL_OW 380
// Jerry = CreateHuman ;
11385: LD_ADDR_EXP 7
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11395: LD_EXP 7
11399: PPUSH
11400: LD_INT 10
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11410: LD_EXP 6
11414: PUSH
11415: LD_EXP 7
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 140
// end ;
11428: LD_VAR 0 1
11432: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11433: LD_INT 0
11435: PPUSH
11436: PPUSH
11437: PPUSH
// for i = 1 to 6 do
11438: LD_ADDR_VAR 0 2
11442: PUSH
11443: DOUBLE
11444: LD_INT 1
11446: DEC
11447: ST_TO_ADDR
11448: LD_INT 6
11450: PUSH
11451: FOR_TO
11452: IFFALSE 11546
// begin uc_side = 4 ;
11454: LD_ADDR_OWVAR 20
11458: PUSH
11459: LD_INT 4
11461: ST_TO_ADDR
// uc_nation = 1 ;
11462: LD_ADDR_OWVAR 21
11466: PUSH
11467: LD_INT 1
11469: ST_TO_ADDR
// hc_gallery =  ;
11470: LD_ADDR_OWVAR 33
11474: PUSH
11475: LD_STRING 
11477: ST_TO_ADDR
// hc_name =  ;
11478: LD_ADDR_OWVAR 26
11482: PUSH
11483: LD_STRING 
11485: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11486: LD_INT 0
11488: PPUSH
11489: LD_INT 1
11491: PPUSH
11492: LD_INT 4
11494: PPUSH
11495: CALL_OW 12
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 380
// un = CreateHuman ;
11507: LD_ADDR_VAR 0 3
11511: PUSH
11512: CALL_OW 44
11516: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11517: LD_VAR 0 3
11521: PPUSH
11522: LD_INT 16
11524: PPUSH
11525: LD_INT 0
11527: PPUSH
11528: CALL_OW 49
// SetLives ( un , 1 ) ;
11532: LD_VAR 0 3
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 234
// end ;
11544: GO 11451
11546: POP
11547: POP
// DyingSold = CreateHuman ;
11548: LD_ADDR_EXP 34
11552: PUSH
11553: CALL_OW 44
11557: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11558: LD_EXP 34
11562: PPUSH
11563: LD_INT 16
11565: PPUSH
11566: LD_INT 0
11568: PPUSH
11569: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11573: LD_EXP 34
11577: PPUSH
11578: LD_INT 250
11580: PPUSH
11581: CALL_OW 234
// end ; end_of_file
11585: LD_VAR 0 1
11589: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: LD_INT 22
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 23
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 25
11621: PUSH
11622: LD_INT 2
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 50
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: LD_INT 56
11637: PUSH
11638: EMPTY
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: PUSH
11653: LD_EXP 1
11657: PUSH
11658: EMPTY
11659: LIST
11660: DIFF
11661: ST_TO_ADDR
// uc_side = 6 ;
11662: LD_ADDR_OWVAR 20
11666: PUSH
11667: LD_INT 6
11669: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11670: LD_ADDR_EXP 8
11674: PUSH
11675: LD_STRING Mikhail
11677: PPUSH
11678: CALL_OW 25
11682: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11683: LD_EXP 8
11687: PPUSH
11688: LD_INT 3
11690: PPUSH
11691: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11695: LD_EXP 8
11699: PPUSH
11700: LD_VAR 0 2
11704: PUSH
11705: LD_INT 1
11707: ARRAY
11708: PPUSH
11709: CALL_OW 250
11713: PPUSH
11714: LD_VAR 0 2
11718: PUSH
11719: LD_INT 1
11721: ARRAY
11722: PPUSH
11723: CALL_OW 251
11727: PPUSH
11728: LD_INT 5
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL_OW 50
// end ;
11738: LD_VAR 0 1
11742: RET
// export function PrepareRussianCommander ; begin
11743: LD_INT 0
11745: PPUSH
// uc_side = 3 ;
11746: LD_ADDR_OWVAR 20
11750: PUSH
11751: LD_INT 3
11753: ST_TO_ADDR
// uc_nation = 3 ;
11754: LD_ADDR_OWVAR 21
11758: PUSH
11759: LD_INT 3
11761: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11762: LD_ADDR_EXP 19
11766: PUSH
11767: LD_STRING Natasza
11769: PPUSH
11770: CALL_OW 25
11774: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11775: LD_EXP 19
11779: PPUSH
11780: LD_INT 24
11782: PPUSH
11783: LD_INT 0
11785: PPUSH
11786: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11790: LD_EXP 19
11794: PPUSH
11795: LD_INT 56
11797: PPUSH
11798: LD_INT 16
11800: PPUSH
11801: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11805: LD_ADDR_EXP 24
11809: PUSH
11810: LD_EXP 24
11814: PUSH
11815: LD_EXP 19
11819: ADD
11820: ST_TO_ADDR
// end ;
11821: LD_VAR 0 1
11825: RET
// export function PrepareSouthBase ; var i , un ; begin
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
// for i = 1 to 2 do
11831: LD_ADDR_VAR 0 2
11835: PUSH
11836: DOUBLE
11837: LD_INT 1
11839: DEC
11840: ST_TO_ADDR
11841: LD_INT 2
11843: PUSH
11844: FOR_TO
11845: IFFALSE 11954
// begin uc_side = 3 ;
11847: LD_ADDR_OWVAR 20
11851: PUSH
11852: LD_INT 3
11854: ST_TO_ADDR
// uc_nation = 3 ;
11855: LD_ADDR_OWVAR 21
11859: PUSH
11860: LD_INT 3
11862: ST_TO_ADDR
// hc_gallery =  ;
11863: LD_ADDR_OWVAR 33
11867: PUSH
11868: LD_STRING 
11870: ST_TO_ADDR
// hc_name =  ;
11871: LD_ADDR_OWVAR 26
11875: PUSH
11876: LD_STRING 
11878: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11879: LD_INT 1
11881: PPUSH
11882: LD_INT 1
11884: PPUSH
11885: LD_EXP 13
11889: PPUSH
11890: LD_EXP 14
11894: PPUSH
11895: CALL_OW 12
11899: PPUSH
11900: CALL_OW 380
// hc_importance = 0 ;
11904: LD_ADDR_OWVAR 32
11908: PUSH
11909: LD_INT 0
11911: ST_TO_ADDR
// un = CreateHuman ;
11912: LD_ADDR_VAR 0 3
11916: PUSH
11917: CALL_OW 44
11921: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_INT 11
11929: PPUSH
11930: LD_INT 0
11932: PPUSH
11933: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11937: LD_VAR 0 3
11941: PPUSH
11942: LD_INT 111
11944: PPUSH
11945: LD_INT 38
11947: PPUSH
11948: CALL_OW 118
// end ;
11952: GO 11844
11954: POP
11955: POP
// for i = 1 to Difficulty do
11956: LD_ADDR_VAR 0 2
11960: PUSH
11961: DOUBLE
11962: LD_INT 1
11964: DEC
11965: ST_TO_ADDR
11966: LD_OWVAR 67
11970: PUSH
11971: FOR_TO
11972: IFFALSE 12055
// begin uc_side = 3 ;
11974: LD_ADDR_OWVAR 20
11978: PUSH
11979: LD_INT 3
11981: ST_TO_ADDR
// uc_nation = 3 ;
11982: LD_ADDR_OWVAR 21
11986: PUSH
11987: LD_INT 3
11989: ST_TO_ADDR
// hc_gallery =  ;
11990: LD_ADDR_OWVAR 33
11994: PUSH
11995: LD_STRING 
11997: ST_TO_ADDR
// hc_name =  ;
11998: LD_ADDR_OWVAR 26
12002: PUSH
12003: LD_STRING 
12005: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12006: LD_INT 0
12008: PPUSH
12009: LD_INT 3
12011: PPUSH
12012: LD_EXP 13
12016: PPUSH
12017: LD_EXP 14
12021: PPUSH
12022: CALL_OW 12
12026: PPUSH
12027: CALL_OW 380
// un = CreateHuman ;
12031: LD_ADDR_VAR 0 3
12035: PUSH
12036: CALL_OW 44
12040: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12041: LD_VAR 0 3
12045: PPUSH
12046: LD_INT 10
12048: PPUSH
12049: CALL_OW 52
// end ;
12053: GO 11971
12055: POP
12056: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12057: LD_INT 3
12059: PPUSH
12060: LD_INT 3
12062: PPUSH
12063: LD_INT 33
12065: PPUSH
12066: LD_EXP 13
12070: PPUSH
12071: LD_EXP 14
12075: PPUSH
12076: CALL_OW 12
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: LD_INT 1
12086: PUSH
12087: LD_INT 1
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: CALL_OW 12
12097: PUSH
12098: LD_INT 1
12100: PPUSH
12101: LD_INT 2
12103: PPUSH
12104: CALL_OW 12
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: PUSH
12114: LD_OWVAR 67
12118: ARRAY
12119: PPUSH
12120: CALL 8513 0 6
// for i in UnitsInside ( arm2 ) do
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: LD_INT 33
12131: PPUSH
12132: CALL_OW 313
12136: PUSH
12137: FOR_IN
12138: IFFALSE 12158
// southBaseDefenders = southBaseDefenders ^ i ;
12140: LD_ADDR_EXP 25
12144: PUSH
12145: LD_EXP 25
12149: PUSH
12150: LD_VAR 0 2
12154: ADD
12155: ST_TO_ADDR
12156: GO 12137
12158: POP
12159: POP
// end ;
12160: LD_VAR 0 1
12164: RET
// export function PrepareNorthBase ; var i , un ; begin
12165: LD_INT 0
12167: PPUSH
12168: PPUSH
12169: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12170: LD_ADDR_VAR 0 2
12174: PUSH
12175: DOUBLE
12176: LD_INT 1
12178: DEC
12179: ST_TO_ADDR
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 2
12185: PPUSH
12186: CALL_OW 12
12190: PUSH
12191: LD_INT 2
12193: PPUSH
12194: LD_INT 3
12196: PPUSH
12197: CALL_OW 12
12201: PUSH
12202: LD_INT 3
12204: PPUSH
12205: LD_INT 4
12207: PPUSH
12208: CALL_OW 12
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: LIST
12217: PUSH
12218: LD_OWVAR 67
12222: ARRAY
12223: PUSH
12224: FOR_TO
12225: IFFALSE 12311
// begin uc_side = 3 ;
12227: LD_ADDR_OWVAR 20
12231: PUSH
12232: LD_INT 3
12234: ST_TO_ADDR
// uc_nation = 3 ;
12235: LD_ADDR_OWVAR 21
12239: PUSH
12240: LD_INT 3
12242: ST_TO_ADDR
// hc_gallery =  ;
12243: LD_ADDR_OWVAR 33
12247: PUSH
12248: LD_STRING 
12250: ST_TO_ADDR
// hc_name =  ;
12251: LD_ADDR_OWVAR 26
12255: PUSH
12256: LD_STRING 
12258: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12259: LD_INT 0
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: LD_EXP 13
12269: PPUSH
12270: LD_EXP 14
12274: PPUSH
12275: CALL_OW 12
12279: PPUSH
12280: CALL_OW 380
// un = CreateHuman ;
12284: LD_ADDR_VAR 0 3
12288: PUSH
12289: CALL_OW 44
12293: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 14
12301: PPUSH
12302: LD_INT 0
12304: PPUSH
12305: CALL_OW 49
// end ;
12309: GO 12224
12311: POP
12312: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12313: LD_INT 3
12315: PPUSH
12316: LD_INT 3
12318: PPUSH
12319: LD_INT 2
12321: PPUSH
12322: LD_EXP 13
12326: PPUSH
12327: LD_EXP 14
12331: PPUSH
12332: CALL_OW 12
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: LD_INT 2
12345: PPUSH
12346: CALL_OW 12
12350: PUSH
12351: LD_INT 1
12353: PPUSH
12354: LD_INT 3
12356: PPUSH
12357: CALL_OW 12
12361: PUSH
12362: LD_INT 1
12364: PPUSH
12365: LD_INT 3
12367: PPUSH
12368: CALL_OW 12
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: PUSH
12378: LD_OWVAR 67
12382: ARRAY
12383: PPUSH
12384: CALL 8513 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12388: LD_INT 3
12390: PPUSH
12391: LD_INT 3
12393: PPUSH
12394: LD_INT 23
12396: PPUSH
12397: LD_EXP 13
12401: PPUSH
12402: LD_EXP 14
12406: PPUSH
12407: CALL_OW 12
12411: PPUSH
12412: LD_INT 4
12414: PPUSH
12415: LD_INT 0
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: PUSH
12429: LD_OWVAR 67
12433: ARRAY
12434: PPUSH
12435: CALL 8513 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12439: LD_INT 3
12441: PPUSH
12442: LD_INT 3
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: LD_EXP 13
12452: PPUSH
12453: LD_EXP 14
12457: PPUSH
12458: CALL_OW 12
12462: PPUSH
12463: LD_INT 2
12465: PPUSH
12466: LD_INT 1
12468: PUSH
12469: LD_INT 2
12471: PUSH
12472: LD_INT 2
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_OWVAR 67
12484: ARRAY
12485: PPUSH
12486: CALL 8513 0 6
// for i in UnitsInside ( arm1 ) do
12490: LD_ADDR_VAR 0 2
12494: PUSH
12495: LD_INT 2
12497: PPUSH
12498: CALL_OW 313
12502: PUSH
12503: FOR_IN
12504: IFFALSE 12524
// northBaseDefenders = northBaseDefenders ^ i ;
12506: LD_ADDR_EXP 24
12510: PUSH
12511: LD_EXP 24
12515: PUSH
12516: LD_VAR 0 2
12520: ADD
12521: ST_TO_ADDR
12522: GO 12503
12524: POP
12525: POP
// end ;
12526: LD_VAR 0 1
12530: RET
// export function PrepareOtherRussians ; var i , un ; begin
12531: LD_INT 0
12533: PPUSH
12534: PPUSH
12535: PPUSH
// for i = 1 to 2 do
12536: LD_ADDR_VAR 0 2
12540: PUSH
12541: DOUBLE
12542: LD_INT 1
12544: DEC
12545: ST_TO_ADDR
12546: LD_INT 2
12548: PUSH
12549: FOR_TO
12550: IFFALSE 12651
// begin uc_side = 3 ;
12552: LD_ADDR_OWVAR 20
12556: PUSH
12557: LD_INT 3
12559: ST_TO_ADDR
// uc_nation = 3 ;
12560: LD_ADDR_OWVAR 21
12564: PUSH
12565: LD_INT 3
12567: ST_TO_ADDR
// hc_gallery =  ;
12568: LD_ADDR_OWVAR 33
12572: PUSH
12573: LD_STRING 
12575: ST_TO_ADDR
// hc_name =  ;
12576: LD_ADDR_OWVAR 26
12580: PUSH
12581: LD_STRING 
12583: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12584: LD_INT 0
12586: PPUSH
12587: LD_INT 1
12589: PPUSH
12590: LD_EXP 13
12594: PPUSH
12595: LD_EXP 14
12599: PPUSH
12600: CALL_OW 12
12604: PPUSH
12605: CALL_OW 380
// un = CreateHuman ;
12609: LD_ADDR_VAR 0 3
12613: PUSH
12614: CALL_OW 44
12618: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_INT 9
12626: PPUSH
12627: LD_INT 0
12629: PPUSH
12630: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12634: LD_VAR 0 3
12638: PPUSH
12639: LD_INT 80
12641: PPUSH
12642: LD_INT 73
12644: PPUSH
12645: CALL_OW 118
// end ;
12649: GO 12549
12651: POP
12652: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_INT 3
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 31
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: CALL_OW 69
12686: PUSH
12687: FOR_IN
12688: IFFALSE 12716
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12690: LD_EXP 13
12694: PPUSH
12695: LD_EXP 14
12699: PPUSH
12700: CALL_OW 12
12704: PPUSH
12705: LD_VAR 0 2
12709: PPUSH
12710: CALL 8623 0 2
12714: GO 12687
12716: POP
12717: POP
// end ;
12718: LD_VAR 0 1
12722: RET
// export function PrepareCargoBays ; begin
12723: LD_INT 0
12725: PPUSH
// uc_side = 3 ;
12726: LD_ADDR_OWVAR 20
12730: PUSH
12731: LD_INT 3
12733: ST_TO_ADDR
// uc_nation = 3 ;
12734: LD_ADDR_OWVAR 21
12738: PUSH
12739: LD_INT 3
12741: ST_TO_ADDR
// vc_engine = 1 ;
12742: LD_ADDR_OWVAR 39
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// vc_control = 1 ;
12750: LD_ADDR_OWVAR 38
12754: PUSH
12755: LD_INT 1
12757: ST_TO_ADDR
// vc_weapon = 51 ;
12758: LD_ADDR_OWVAR 40
12762: PUSH
12763: LD_INT 51
12765: ST_TO_ADDR
// vc_chassis = 22 ;
12766: LD_ADDR_OWVAR 37
12770: PUSH
12771: LD_INT 22
12773: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12774: LD_ADDR_EXP 15
12778: PUSH
12779: CALL_OW 45
12783: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12784: LD_ADDR_EXP 16
12788: PUSH
12789: CALL_OW 45
12793: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12794: LD_EXP 15
12798: PPUSH
12799: LD_INT 13
12801: PPUSH
12802: LD_INT 0
12804: PPUSH
12805: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12809: LD_EXP 16
12813: PPUSH
12814: LD_INT 13
12816: PPUSH
12817: LD_INT 0
12819: PPUSH
12820: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12824: LD_EXP 15
12828: PPUSH
12829: LD_INT 2
12831: PPUSH
12832: LD_INT 70
12834: PUSH
12835: LD_INT 50
12837: PUSH
12838: LD_INT 30
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: PUSH
12846: LD_OWVAR 67
12850: ARRAY
12851: PPUSH
12852: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12856: LD_EXP 16
12860: PPUSH
12861: LD_INT 2
12863: PPUSH
12864: LD_INT 70
12866: PUSH
12867: LD_INT 50
12869: PUSH
12870: LD_INT 30
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: PUSH
12878: LD_OWVAR 67
12882: ARRAY
12883: PPUSH
12884: CALL_OW 291
// hc_gallery =  ;
12888: LD_ADDR_OWVAR 33
12892: PUSH
12893: LD_STRING 
12895: ST_TO_ADDR
// hc_name =  ;
12896: LD_ADDR_OWVAR 26
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12904: LD_INT 1
12906: PPUSH
12907: LD_INT 3
12909: PPUSH
12910: LD_INT 1
12912: PPUSH
12913: LD_INT 2
12915: PPUSH
12916: CALL_OW 12
12920: PPUSH
12921: CALL_OW 380
// driver1 = CreateHuman ;
12925: LD_ADDR_EXP 17
12929: PUSH
12930: CALL_OW 44
12934: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12935: LD_EXP 17
12939: PPUSH
12940: LD_EXP 15
12944: PPUSH
12945: CALL_OW 52
// hc_name = Nikolai Andreyev ;
12949: LD_ADDR_OWVAR 26
12953: PUSH
12954: LD_STRING Nikolai Andreyev
12956: ST_TO_ADDR
// driver2 = CreateHuman ;
12957: LD_ADDR_EXP 18
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
12967: LD_EXP 18
12971: PPUSH
12972: LD_EXP 16
12976: PPUSH
12977: CALL_OW 52
// end ;
12981: LD_VAR 0 1
12985: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
12986: LD_INT 0
12988: PPUSH
12989: PPUSH
12990: PPUSH
12991: PPUSH
12992: PPUSH
12993: PPUSH
12994: PPUSH
// uc_side = 3 ;
12995: LD_ADDR_OWVAR 20
12999: PUSH
13000: LD_INT 3
13002: ST_TO_ADDR
// uc_nation = 3 ;
13003: LD_ADDR_OWVAR 21
13007: PUSH
13008: LD_INT 3
13010: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13011: LD_ADDR_VAR 0 4
13015: PUSH
13016: DOUBLE
13017: LD_INT 1
13019: DEC
13020: ST_TO_ADDR
13021: LD_VAR 0 1
13025: PUSH
13026: LD_INT 1
13028: PPUSH
13029: LD_INT 3
13031: PPUSH
13032: CALL_OW 12
13036: PLUS
13037: PUSH
13038: FOR_TO
13039: IFFALSE 13216
// begin vc_engine = 1 ;
13041: LD_ADDR_OWVAR 39
13045: PUSH
13046: LD_INT 1
13048: ST_TO_ADDR
// vc_control = 1 ;
13049: LD_ADDR_OWVAR 38
13053: PUSH
13054: LD_INT 1
13056: ST_TO_ADDR
// vc_weapon = 42 ;
13057: LD_ADDR_OWVAR 40
13061: PUSH
13062: LD_INT 42
13064: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13065: LD_ADDR_OWVAR 37
13069: PUSH
13070: LD_INT 21
13072: PUSH
13073: LD_INT 22
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: LD_OWVAR 67
13088: ARRAY
13089: ST_TO_ADDR
// veh = CreateVehicle ;
13090: LD_ADDR_VAR 0 5
13094: PUSH
13095: CALL_OW 45
13099: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13100: LD_VAR 0 5
13104: PPUSH
13105: LD_VAR 0 2
13109: PPUSH
13110: LD_INT 0
13112: PPUSH
13113: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13117: LD_ADDR_EXP 26
13121: PUSH
13122: LD_EXP 26
13126: PUSH
13127: LD_VAR 0 5
13131: ADD
13132: ST_TO_ADDR
// hc_gallery =  ;
13133: LD_ADDR_OWVAR 33
13137: PUSH
13138: LD_STRING 
13140: ST_TO_ADDR
// hc_name =  ;
13141: LD_ADDR_OWVAR 26
13145: PUSH
13146: LD_STRING 
13148: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13149: LD_INT 0
13151: PPUSH
13152: LD_INT 3
13154: PPUSH
13155: LD_EXP 13
13159: PPUSH
13160: LD_EXP 14
13164: PPUSH
13165: CALL_OW 12
13169: PPUSH
13170: CALL_OW 380
// un = CreateHuman ;
13174: LD_ADDR_VAR 0 6
13178: PUSH
13179: CALL_OW 44
13183: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13184: LD_VAR 0 6
13188: PPUSH
13189: LD_VAR 0 5
13193: PPUSH
13194: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13198: LD_ADDR_EXP 26
13202: PUSH
13203: LD_EXP 26
13207: PUSH
13208: LD_VAR 0 6
13212: ADD
13213: ST_TO_ADDR
// end ;
13214: GO 13038
13216: POP
13217: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13218: LD_INT 0
13220: PPUSH
13221: LD_INT 2
13223: PPUSH
13224: LD_EXP 13
13228: PPUSH
13229: LD_EXP 14
13233: PPUSH
13234: CALL_OW 12
13238: PPUSH
13239: CALL_OW 380
// un = CreateHuman ;
13243: LD_ADDR_VAR 0 6
13247: PUSH
13248: CALL_OW 44
13252: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13253: LD_ADDR_VAR 0 4
13257: PUSH
13258: DOUBLE
13259: LD_INT 1
13261: DEC
13262: ST_TO_ADDR
13263: LD_VAR 0 1
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: LD_INT 2
13273: MUL
13274: PLUS
13275: PUSH
13276: FOR_TO
13277: IFFALSE 13365
// begin hc_gallery =  ;
13279: LD_ADDR_OWVAR 33
13283: PUSH
13284: LD_STRING 
13286: ST_TO_ADDR
// hc_name =  ;
13287: LD_ADDR_OWVAR 26
13291: PUSH
13292: LD_STRING 
13294: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13295: LD_INT 1
13297: PPUSH
13298: LD_INT 1
13300: PPUSH
13301: LD_EXP 13
13305: PPUSH
13306: LD_EXP 14
13310: PPUSH
13311: CALL_OW 12
13315: PPUSH
13316: CALL_OW 380
// un = CreateHuman ;
13320: LD_ADDR_VAR 0 6
13324: PUSH
13325: CALL_OW 44
13329: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13330: LD_VAR 0 6
13334: PPUSH
13335: LD_VAR 0 2
13339: PPUSH
13340: LD_INT 0
13342: PPUSH
13343: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13347: LD_ADDR_EXP 26
13351: PUSH
13352: LD_EXP 26
13356: PUSH
13357: LD_VAR 0 6
13361: ADD
13362: ST_TO_ADDR
// end ;
13363: GO 13276
13365: POP
13366: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13367: LD_ADDR_VAR 0 7
13371: PUSH
13372: LD_INT 26
13374: PPUSH
13375: LD_INT 22
13377: PUSH
13378: LD_INT 3
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 26
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13415: LD_VAR 0 7
13419: PUSH
13420: LD_INT 1
13422: ARRAY
13423: PPUSH
13424: LD_STRING D9-Rus3-1
13426: PPUSH
13427: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13431: LD_VAR 0 7
13435: PUSH
13436: LD_INT 2
13438: ARRAY
13439: PPUSH
13440: LD_STRING D9-Russ-1
13442: PPUSH
13443: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13447: LD_INT 35
13449: PPUSH
13450: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13454: LD_ADDR_VAR 0 4
13458: PUSH
13459: LD_INT 26
13461: PPUSH
13462: LD_INT 22
13464: PUSH
13465: LD_INT 3
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: PPUSH
13475: CALL_OW 70
13479: PUSH
13480: FOR_IN
13481: IFFALSE 13653
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13483: LD_ADDR_VAR 0 8
13487: PUSH
13488: LD_INT 22
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: PPUSH
13503: LD_VAR 0 4
13507: PPUSH
13508: CALL_OW 74
13512: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13513: LD_ADDR_VAR 0 9
13517: PUSH
13518: LD_INT 22
13520: PUSH
13521: LD_INT 1
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: LD_INT 59
13533: PUSH
13534: EMPTY
13535: LIST
13536: PUSH
13537: LD_INT 21
13539: PUSH
13540: LD_INT 1
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 2
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: EMPTY
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: PPUSH
13575: LD_VAR 0 4
13579: PPUSH
13580: CALL_OW 74
13584: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13585: LD_VAR 0 4
13589: PPUSH
13590: LD_VAR 0 8
13594: PPUSH
13595: CALL_OW 296
13599: PUSH
13600: LD_INT 8
13602: PLUS
13603: PUSH
13604: LD_VAR 0 4
13608: PPUSH
13609: LD_VAR 0 9
13613: PPUSH
13614: CALL_OW 296
13618: LESS
13619: IFFALSE 13637
// begin ComAttackUnit ( i , target1 ) ;
13621: LD_VAR 0 4
13625: PPUSH
13626: LD_VAR 0 8
13630: PPUSH
13631: CALL_OW 115
// end else
13635: GO 13651
// begin ComAttackUnit ( i , target2 ) ;
13637: LD_VAR 0 4
13641: PPUSH
13642: LD_VAR 0 9
13646: PPUSH
13647: CALL_OW 115
// end ; end ;
13651: GO 13480
13653: POP
13654: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13655: LD_INT 26
13657: PPUSH
13658: LD_INT 22
13660: PUSH
13661: LD_INT 3
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 2
13670: PUSH
13671: LD_INT 21
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 21
13683: PUSH
13684: LD_INT 2
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 59
13693: PUSH
13694: EMPTY
13695: LIST
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PPUSH
13707: CALL_OW 70
13711: PUSH
13712: LD_INT 0
13714: EQUAL
13715: IFFALSE 13447
// end ; end_of_file
13717: LD_VAR 0 3
13721: RET
// every 0 0$1 do
13722: GO 13724
13724: DISABLE
// begin enable ;
13725: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13726: LD_INT 3
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: LD_INT 22
13734: PPUSH
13735: CALL 8759 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
13739: LD_INT 3
13741: PPUSH
13742: LD_INT 20
13744: PPUSH
13745: LD_INT 22
13747: PPUSH
13748: LD_INT 23
13750: PPUSH
13751: CALL 9005 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13755: LD_INT 3
13757: PPUSH
13758: LD_INT 21
13760: PPUSH
13761: LD_INT 23
13763: PPUSH
13764: CALL 9282 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13768: LD_INT 22
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: LD_EXP 24
13778: PPUSH
13779: LD_INT 2
13781: PPUSH
13782: LD_INT 3
13784: PPUSH
13785: CALL 9754 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13789: LD_INT 23
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: LD_EXP 25
13799: PPUSH
13800: LD_INT 33
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL 9754 0 5
// end ; end_of_file
13810: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13811: LD_VAR 0 1
13815: PPUSH
13816: CALL_OW 266
13820: PUSH
13821: LD_INT 0
13823: EQUAL
13824: IFFALSE 13833
// YouLost ( DepotDestroyed ) ;
13826: LD_STRING DepotDestroyed
13828: PPUSH
13829: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 255
13842: PUSH
13843: LD_INT 1
13845: EQUAL
13846: PUSH
13847: LD_VAR 0 1
13851: PPUSH
13852: CALL_OW 247
13856: PUSH
13857: LD_INT 1
13859: EQUAL
13860: AND
13861: IFFALSE 13877
// deadsCounter = deadsCounter + 1 ;
13863: LD_ADDR_EXP 31
13867: PUSH
13868: LD_EXP 31
13872: PUSH
13873: LD_INT 1
13875: PLUS
13876: ST_TO_ADDR
// end ;
13877: PPOPN 1
13879: END
// on Command ( comandid ) do var i , j , tmp ;
13880: LD_INT 0
13882: PPUSH
13883: PPUSH
13884: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13885: LD_ADDR_VAR 0 2
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_INT 1
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 21
13902: PUSH
13903: LD_INT 2
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PPUSH
13914: CALL_OW 69
13918: PUSH
13919: FOR_IN
13920: IFFALSE 14045
// begin if GetTaskList ( i ) > 0 then
13922: LD_VAR 0 2
13926: PPUSH
13927: CALL_OW 437
13931: PUSH
13932: LD_INT 0
13934: GREATER
13935: IFFALSE 14043
// begin for j = 1 to GetTaskList ( i ) do
13937: LD_ADDR_VAR 0 3
13941: PUSH
13942: DOUBLE
13943: LD_INT 1
13945: DEC
13946: ST_TO_ADDR
13947: LD_VAR 0 2
13951: PPUSH
13952: CALL_OW 437
13956: PUSH
13957: FOR_TO
13958: IFFALSE 14041
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
13960: LD_ADDR_VAR 0 4
13964: PUSH
13965: LD_VAR 0 2
13969: PPUSH
13970: CALL_OW 437
13974: PUSH
13975: LD_VAR 0 3
13979: ARRAY
13980: PUSH
13981: LD_INT 4
13983: ARRAY
13984: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
13985: LD_VAR 0 4
13989: PPUSH
13990: CALL_OW 255
13994: PUSH
13995: LD_INT 3
13997: EQUAL
13998: PUSH
13999: LD_VAR 0 4
14003: PPUSH
14004: CALL_OW 247
14008: PUSH
14009: LD_INT 2
14011: EQUAL
14012: AND
14013: PUSH
14014: LD_VAR 0 4
14018: PPUSH
14019: CALL_OW 264
14023: PUSH
14024: LD_INT 51
14026: EQUAL
14027: AND
14028: IFFALSE 14039
// ComStop ( i ) ;
14030: LD_VAR 0 2
14034: PPUSH
14035: CALL_OW 141
// end ;
14039: GO 13957
14041: POP
14042: POP
// end ; end ;
14043: GO 13919
14045: POP
14046: POP
// end ;
14047: PPOPN 4
14049: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14050: LD_VAR 0 2
14054: PUSH
14055: LD_EXP 8
14059: EQUAL
14060: PUSH
14061: LD_EXP 21
14065: PUSH
14066: LD_INT 4
14068: NONEQUAL
14069: AND
14070: IFFALSE 14222
// begin if IsOk ( Mikhail ) then
14072: LD_EXP 8
14076: PPUSH
14077: CALL_OW 302
14081: IFFALSE 14089
// AskMikhail else
14083: CALL 7044 0 0
14087: GO 14222
// if IsOk ( llab1 ) then
14089: LD_INT 23
14091: PPUSH
14092: CALL_OW 302
14096: IFFALSE 14185
// begin InGameOn ;
14098: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14102: LD_EXP 8
14106: PPUSH
14107: LD_INT 6
14109: PPUSH
14110: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14114: LD_INT 23
14116: PPUSH
14117: LD_INT 6
14119: PPUSH
14120: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14124: LD_EXP 8
14128: PPUSH
14129: LD_INT 23
14131: PPUSH
14132: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14136: LD_INT 35
14138: PPUSH
14139: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14143: LD_EXP 8
14147: PPUSH
14148: CALL_OW 310
14152: PUSH
14153: LD_INT 23
14155: EQUAL
14156: PUSH
14157: LD_EXP 8
14161: PPUSH
14162: CALL_OW 301
14166: OR
14167: IFFALSE 14136
// SetSide ( llab1 , 1 ) ;
14169: LD_INT 23
14171: PPUSH
14172: LD_INT 1
14174: PPUSH
14175: CALL_OW 235
// InGameOff ;
14179: CALL_OW 9
// end else
14183: GO 14222
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14185: LD_INT 3
14187: PPUSH
14188: LD_INT 6
14190: PPUSH
14191: LD_INT 2
14193: PPUSH
14194: LD_INT 1
14196: PPUSH
14197: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14201: LD_EXP 8
14205: PPUSH
14206: LD_INT 6
14208: PPUSH
14209: CALL_OW 235
// ComHold ( Mikhail ) ;
14213: LD_EXP 8
14217: PPUSH
14218: CALL_OW 140
// end ; end ; end ;
14222: PPOPN 2
14224: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14225: LD_EXP 8
14229: PPUSH
14230: CALL_OW 257
14234: PUSH
14235: LD_INT 3
14237: NONEQUAL
14238: IFFALSE 14256
14240: GO 14242
14242: DISABLE
// begin enable ;
14243: ENABLE
// SetClass ( Mikhail , 3 ) ;
14244: LD_EXP 8
14248: PPUSH
14249: LD_INT 3
14251: PPUSH
14252: CALL_OW 336
// end ; end_of_file
14256: END
// every 0 0$1 trigger IsDead ( JMM ) do
14257: LD_EXP 1
14261: PPUSH
14262: CALL_OW 301
14266: IFFALSE 14278
14268: GO 14270
14270: DISABLE
// YouLost ( JMM ) ;
14271: LD_STRING JMM
14273: PPUSH
14274: CALL_OW 104
14278: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14279: LD_INT 22
14281: PUSH
14282: LD_INT 1
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 21
14291: PUSH
14292: LD_INT 1
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 25
14301: PUSH
14302: LD_INT 2
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 69
14318: PUSH
14319: LD_INT 0
14321: EQUAL
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 4
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 25
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: PPUSH
14358: CALL_OW 69
14362: PUSH
14363: LD_INT 0
14365: EQUAL
14366: AND
14367: PUSH
14368: LD_INT 1
14370: PPUSH
14371: CALL_OW 255
14375: PUSH
14376: LD_INT 3
14378: EQUAL
14379: AND
14380: PUSH
14381: LD_INT 10
14383: PPUSH
14384: CALL_OW 255
14388: PUSH
14389: LD_INT 3
14391: EQUAL
14392: AND
14393: IFFALSE 14405
14395: GO 14397
14397: DISABLE
// YouLost ( Engineer ) ;
14398: LD_STRING Engineer
14400: PPUSH
14401: CALL_OW 104
14405: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 255
14413: PUSH
14414: LD_INT 3
14416: EQUAL
14417: PUSH
14418: LD_EXP 27
14422: PUSH
14423: LD_INT 1
14425: EQUAL
14426: AND
14427: IFFALSE 14439
14429: GO 14431
14431: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14432: LD_STRING DepotCaptured
14434: PPUSH
14435: CALL_OW 104
14439: END
// export function PrepareTigers ; var i , un ; begin
14440: LD_INT 0
14442: PPUSH
14443: PPUSH
14444: PPUSH
// for i = 1 to Difficulty do
14445: LD_ADDR_VAR 0 2
14449: PUSH
14450: DOUBLE
14451: LD_INT 1
14453: DEC
14454: ST_TO_ADDR
14455: LD_OWVAR 67
14459: PUSH
14460: FOR_TO
14461: IFFALSE 14596
// begin hc_sex = sex_male ;
14463: LD_ADDR_OWVAR 27
14467: PUSH
14468: LD_INT 1
14470: ST_TO_ADDR
// uc_side = 0 ;
14471: LD_ADDR_OWVAR 20
14475: PUSH
14476: LD_INT 0
14478: ST_TO_ADDR
// uc_nation = nation_nature ;
14479: LD_ADDR_OWVAR 21
14483: PUSH
14484: LD_INT 0
14486: ST_TO_ADDR
// hc_class = class_tiger ;
14487: LD_ADDR_OWVAR 28
14491: PUSH
14492: LD_INT 14
14494: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14495: LD_ADDR_OWVAR 31
14499: PUSH
14500: LD_EXP 14
14504: PUSH
14505: LD_INT 0
14507: PUSH
14508: LD_INT 0
14510: PUSH
14511: LD_INT 0
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14520: LD_ADDR_OWVAR 35
14524: PUSH
14525: LD_INT 30
14527: PPUSH
14528: LD_INT 40
14530: PPUSH
14531: CALL_OW 12
14535: PUSH
14536: LD_INT 40
14538: PPUSH
14539: LD_INT 50
14541: PPUSH
14542: CALL_OW 12
14546: PUSH
14547: LD_INT 50
14549: PPUSH
14550: LD_INT 60
14552: PPUSH
14553: CALL_OW 12
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_OWVAR 67
14567: ARRAY
14568: ST_TO_ADDR
// un = CreateHuman ;
14569: LD_ADDR_VAR 0 3
14573: PUSH
14574: CALL_OW 44
14578: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14579: LD_VAR 0 3
14583: PPUSH
14584: LD_INT 27
14586: PPUSH
14587: LD_INT 0
14589: PPUSH
14590: CALL_OW 49
// end ;
14594: GO 14460
14596: POP
14597: POP
// end ; end_of_file
14598: LD_VAR 0 1
14602: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14603: LD_INT 1
14605: PPUSH
14606: CALL_OW 255
14610: PUSH
14611: LD_INT 1
14613: EQUAL
14614: PUSH
14615: LD_INT 10
14617: PPUSH
14618: CALL_OW 255
14622: PUSH
14623: LD_INT 1
14625: EQUAL
14626: AND
14627: PUSH
14628: LD_EXP 20
14632: PUSH
14633: LD_INT 1
14635: EQUAL
14636: AND
14637: PUSH
14638: LD_INT 22
14640: PUSH
14641: LD_INT 3
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 21
14650: PUSH
14651: LD_INT 2
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 34
14660: PUSH
14661: LD_INT 51
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 3
14670: PUSH
14671: LD_INT 58
14673: PUSH
14674: EMPTY
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: PUSH
14692: LD_INT 0
14694: EQUAL
14695: AND
14696: IFFALSE 14787
14698: GO 14700
14700: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14701: LD_INT 9450
14703: PUSH
14704: LD_INT 8400
14706: PUSH
14707: LD_INT 6300
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: PUSH
14715: LD_OWVAR 67
14719: ARRAY
14720: PPUSH
14721: CALL_OW 67
// if cargoEscape = 1 then
14725: LD_EXP 20
14729: PUSH
14730: LD_INT 1
14732: EQUAL
14733: IFFALSE 14787
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14735: LD_EXP 9
14739: PPUSH
14740: LD_STRING D6-Pow-1
14742: PPUSH
14743: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14747: LD_EXP 1
14751: PPUSH
14752: LD_STRING D6-JMM-1
14754: PPUSH
14755: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14759: LD_EXP 9
14763: PPUSH
14764: LD_STRING D6-Pow-2
14766: PPUSH
14767: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14771: LD_EXP 1
14775: PPUSH
14776: LD_STRING D6-JMM-2
14778: PPUSH
14779: CALL_OW 88
// FinishMission ;
14783: CALL 14995 0 0
// end ; end ;
14787: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14788: LD_INT 1
14790: PPUSH
14791: CALL_OW 255
14795: PUSH
14796: LD_INT 1
14798: EQUAL
14799: PUSH
14800: LD_INT 10
14802: PPUSH
14803: CALL_OW 255
14807: PUSH
14808: LD_INT 1
14810: EQUAL
14811: AND
14812: PUSH
14813: LD_EXP 20
14817: PUSH
14818: LD_INT 1
14820: GREATER
14821: AND
14822: IFFALSE 14889
14824: GO 14826
14826: DISABLE
14827: LD_INT 0
14829: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14830: LD_INT 11550
14832: PUSH
14833: LD_INT 10500
14835: PUSH
14836: LD_INT 9450
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: PUSH
14844: LD_OWVAR 67
14848: ARRAY
14849: PPUSH
14850: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14854: LD_INT 1
14856: PUSH
14857: LD_INT 2
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: LIST
14867: PUSH
14868: LD_OWVAR 67
14872: ARRAY
14873: PPUSH
14874: LD_INT 13
14876: PPUSH
14877: CALL 12986 0 2
// lastBattle = 1 ;
14881: LD_ADDR_EXP 27
14885: PUSH
14886: LD_INT 1
14888: ST_TO_ADDR
// end ;
14889: PPOPN 1
14891: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14892: LD_EXP 27
14896: PUSH
14897: LD_INT 1
14899: EQUAL
14900: PUSH
14901: LD_INT 26
14903: PPUSH
14904: LD_INT 22
14906: PUSH
14907: LD_INT 3
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 21
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PPUSH
14928: CALL_OW 70
14932: PUSH
14933: LD_INT 0
14935: EQUAL
14936: AND
14937: IFFALSE 14994
14939: GO 14941
14941: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14942: LD_EXP 9
14946: PPUSH
14947: LD_STRING D6-Pow-1
14949: PPUSH
14950: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14954: LD_EXP 1
14958: PPUSH
14959: LD_STRING D6-JMM-1
14961: PPUSH
14962: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14966: LD_EXP 9
14970: PPUSH
14971: LD_STRING D6-Pow-2
14973: PPUSH
14974: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14978: LD_EXP 1
14982: PPUSH
14983: LD_STRING D6-JMM-2
14985: PPUSH
14986: CALL_OW 88
// FinishMission ;
14990: CALL 14995 0 0
// end ;
14994: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
14995: LD_INT 0
14997: PPUSH
14998: PPUSH
14999: PPUSH
15000: PPUSH
15001: PPUSH
// if tick <= 18 18$00 then
15002: LD_OWVAR 1
15006: PUSH
15007: LD_INT 37800
15009: LESSEQUAL
15010: IFFALSE 15019
// SetAchievement ( ACH_ASPEED_2 ) ;
15012: LD_STRING ACH_ASPEED_2
15014: PPUSH
15015: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15019: LD_ADDR_VAR 0 2
15023: PUSH
15024: LD_INT 22
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 21
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 24
15046: PUSH
15047: LD_INT 251
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL_OW 69
15063: ST_TO_ADDR
// if tmp then
15064: LD_VAR 0 2
15068: IFFALSE 15082
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15070: LD_VAR 0 2
15074: PPUSH
15075: LD_STRING 02_tanks_1
15077: PPUSH
15078: CALL 10459 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15082: LD_EXP 21
15086: PUSH
15087: LD_INT 1
15089: EQUAL
15090: PUSH
15091: LD_EXP 8
15095: PPUSH
15096: CALL_OW 300
15100: AND
15101: IFFALSE 15115
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15103: LD_EXP 21
15107: PPUSH
15108: LD_STRING 02_mikhailStatus_1
15110: PPUSH
15111: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 274
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 275
15130: PPUSH
15131: LD_STRING 02_resources_4
15133: PPUSH
15134: CALL_OW 39
// m1 := false ;
15138: LD_ADDR_VAR 0 3
15142: PUSH
15143: LD_INT 0
15145: ST_TO_ADDR
// m2 := false ;
15146: LD_ADDR_VAR 0 4
15150: PUSH
15151: LD_INT 0
15153: ST_TO_ADDR
// m3 := false ;
15154: LD_ADDR_VAR 0 5
15158: PUSH
15159: LD_INT 0
15161: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15162: LD_INT 1
15164: PPUSH
15165: CALL_OW 274
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 275
15177: PUSH
15178: LD_INT 200
15180: GREATEREQUAL
15181: IFFALSE 15203
// begin AddMedal ( Cans , 1 ) ;
15183: LD_STRING Cans
15185: PPUSH
15186: LD_INT 1
15188: PPUSH
15189: CALL_OW 101
// m1 := true ;
15193: LD_ADDR_VAR 0 3
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// end else
15201: GO 15214
// begin AddMedal ( Cans , - 1 ) ;
15203: LD_STRING Cans
15205: PPUSH
15206: LD_INT 1
15208: NEG
15209: PPUSH
15210: CALL_OW 101
// end ; if deadsCounter < 2 then
15214: LD_EXP 31
15218: PUSH
15219: LD_INT 2
15221: LESS
15222: IFFALSE 15244
// begin AddMedal ( Deaths , 1 ) ;
15224: LD_STRING Deaths
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 101
// m2 := true ;
15234: LD_ADDR_VAR 0 4
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// end else
15242: GO 15255
// begin AddMedal ( Deaths , - 1 ) ;
15244: LD_STRING Deaths
15246: PPUSH
15247: LD_INT 1
15249: NEG
15250: PPUSH
15251: CALL_OW 101
// end ; if mikhailStatus = 0 then
15255: LD_EXP 21
15259: PUSH
15260: LD_INT 0
15262: EQUAL
15263: IFFALSE 15276
// AddMedal ( Prisoner , - 1 ) ;
15265: LD_STRING Prisoner
15267: PPUSH
15268: LD_INT 1
15270: NEG
15271: PPUSH
15272: CALL_OW 101
// if mikhailStatus = 1 then
15276: LD_EXP 21
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: IFFALSE 15304
// begin AddMedal ( Prisoner , 1 ) ;
15286: LD_STRING Prisoner
15288: PPUSH
15289: LD_INT 1
15291: PPUSH
15292: CALL_OW 101
// m3 := true ;
15296: LD_ADDR_VAR 0 5
15300: PUSH
15301: LD_INT 1
15303: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15304: LD_EXP 21
15308: PUSH
15309: LD_INT 2
15311: EQUAL
15312: IFFALSE 15332
// begin AddMedal ( Prisoner , 2 ) ;
15314: LD_STRING Prisoner
15316: PPUSH
15317: LD_INT 2
15319: PPUSH
15320: CALL_OW 101
// m3 := true ;
15324: LD_ADDR_VAR 0 5
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15332: LD_EXP 21
15336: PUSH
15337: LD_INT 3
15339: EQUAL
15340: IFFALSE 15353
// AddMedal ( Prisoner , - 2 ) ;
15342: LD_STRING Prisoner
15344: PPUSH
15345: LD_INT 2
15347: NEG
15348: PPUSH
15349: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
15353: LD_OWVAR 67
15357: PUSH
15358: LD_INT 3
15360: EQUAL
15361: PUSH
15362: LD_VAR 0 3
15366: AND
15367: PUSH
15368: LD_VAR 0 4
15372: AND
15373: PUSH
15374: LD_VAR 0 5
15378: AND
15379: IFFALSE 15391
// SetAchievementEX ( ACH_AMER , 2 ) ;
15381: LD_STRING ACH_AMER
15383: PPUSH
15384: LD_INT 2
15386: PPUSH
15387: CALL_OW 564
// GiveMedals ( MAIN ) ;
15391: LD_STRING MAIN
15393: PPUSH
15394: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15398: LD_INT 22
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 23
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: PPUSH
15433: CALL_OW 69
15437: PPUSH
15438: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15442: LD_EXP 1
15446: PPUSH
15447: LD_EXP 33
15451: PUSH
15452: LD_STRING JMM
15454: STR
15455: PPUSH
15456: CALL_OW 38
// if IsOK ( Bobby ) then
15460: LD_EXP 2
15464: PPUSH
15465: CALL_OW 302
15469: IFFALSE 15489
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15471: LD_EXP 2
15475: PPUSH
15476: LD_EXP 33
15480: PUSH
15481: LD_STRING Bobby
15483: STR
15484: PPUSH
15485: CALL_OW 38
// if IsOK ( Cyrus ) then
15489: LD_EXP 3
15493: PPUSH
15494: CALL_OW 302
15498: IFFALSE 15518
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15500: LD_EXP 3
15504: PPUSH
15505: LD_EXP 33
15509: PUSH
15510: LD_STRING Cyrus
15512: STR
15513: PPUSH
15514: CALL_OW 38
// if IsOK ( Lisa ) then
15518: LD_EXP 4
15522: PPUSH
15523: CALL_OW 302
15527: IFFALSE 15547
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15529: LD_EXP 4
15533: PPUSH
15534: LD_EXP 33
15538: PUSH
15539: LD_STRING Lisa
15541: STR
15542: PPUSH
15543: CALL_OW 38
// if IsOK ( Khatam ) then
15547: LD_EXP 5
15551: PPUSH
15552: CALL_OW 302
15556: IFFALSE 15576
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15558: LD_EXP 5
15562: PPUSH
15563: LD_EXP 33
15567: PUSH
15568: LD_STRING Khatam
15570: STR
15571: PPUSH
15572: CALL_OW 38
// if IsOK ( Brian ) then
15576: LD_EXP 6
15580: PPUSH
15581: CALL_OW 302
15585: IFFALSE 15605
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15587: LD_EXP 6
15591: PPUSH
15592: LD_EXP 33
15596: PUSH
15597: LD_STRING Brian
15599: STR
15600: PPUSH
15601: CALL_OW 38
// if IsOk ( Jerry ) then
15605: LD_EXP 7
15609: PPUSH
15610: CALL_OW 302
15614: IFFALSE 15634
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15616: LD_EXP 7
15620: PPUSH
15621: LD_EXP 33
15625: PUSH
15626: LD_STRING Jerry
15628: STR
15629: PPUSH
15630: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15634: LD_EXP 21
15638: PUSH
15639: LD_INT 1
15641: EQUAL
15642: PUSH
15643: LD_EXP 8
15647: PPUSH
15648: CALL_OW 255
15652: PUSH
15653: LD_INT 1
15655: EQUAL
15656: AND
15657: PUSH
15658: LD_EXP 8
15662: PPUSH
15663: CALL_OW 302
15667: AND
15668: IFFALSE 15688
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15670: LD_EXP 8
15674: PPUSH
15675: LD_EXP 33
15679: PUSH
15680: LD_STRING Mikhail
15682: STR
15683: PPUSH
15684: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15688: LD_INT 50
15690: PUSH
15691: EMPTY
15692: LIST
15693: PUSH
15694: LD_INT 22
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: PPUSH
15719: CALL_OW 69
15723: PUSH
15724: LD_EXP 1
15728: PUSH
15729: LD_EXP 2
15733: PUSH
15734: LD_EXP 3
15738: PUSH
15739: LD_EXP 4
15743: PUSH
15744: LD_EXP 5
15748: PUSH
15749: LD_EXP 6
15753: PUSH
15754: LD_EXP 7
15758: PUSH
15759: LD_EXP 8
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: DIFF
15774: PPUSH
15775: LD_STRING 02_other_survivors
15777: PPUSH
15778: CALL_OW 38
// YouWin ;
15782: CALL_OW 103
// end ; end_of_file
15786: LD_VAR 0 1
15790: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
15791: LD_INT 0
15793: PPUSH
// ar_crane := 88 ;
15794: LD_ADDR_EXP 41
15798: PUSH
15799: LD_INT 88
15801: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15802: LD_ADDR_EXP 36
15806: PUSH
15807: LD_INT 89
15809: ST_TO_ADDR
// us_hack := 99 ;
15810: LD_ADDR_EXP 37
15814: PUSH
15815: LD_INT 99
15817: ST_TO_ADDR
// us_artillery := 97 ;
15818: LD_ADDR_EXP 38
15822: PUSH
15823: LD_INT 97
15825: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15826: LD_ADDR_EXP 39
15830: PUSH
15831: LD_INT 91
15833: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15834: LD_ADDR_EXP 40
15838: PUSH
15839: LD_INT 92
15841: ST_TO_ADDR
// ru_radar := 98 ;
15842: LD_ADDR_EXP 35
15846: PUSH
15847: LD_INT 98
15849: ST_TO_ADDR
// tech_Artillery := 80 ;
15850: LD_ADDR_EXP 42
15854: PUSH
15855: LD_INT 80
15857: ST_TO_ADDR
// tech_RadMat := 81 ;
15858: LD_ADDR_EXP 43
15862: PUSH
15863: LD_INT 81
15865: ST_TO_ADDR
// tech_BasicTools := 82 ;
15866: LD_ADDR_EXP 44
15870: PUSH
15871: LD_INT 82
15873: ST_TO_ADDR
// tech_Cargo := 83 ;
15874: LD_ADDR_EXP 45
15878: PUSH
15879: LD_INT 83
15881: ST_TO_ADDR
// tech_Track := 84 ;
15882: LD_ADDR_EXP 46
15886: PUSH
15887: LD_INT 84
15889: ST_TO_ADDR
// tech_Crane := 85 ;
15890: LD_ADDR_EXP 47
15894: PUSH
15895: LD_INT 85
15897: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15898: LD_ADDR_EXP 48
15902: PUSH
15903: LD_INT 86
15905: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15906: LD_ADDR_EXP 49
15910: PUSH
15911: LD_INT 87
15913: ST_TO_ADDR
// end ;
15914: LD_VAR 0 1
15918: RET
// every 1 do
15919: GO 15921
15921: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15922: CALL 15791 0 0
15926: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15927: LD_VAR 0 2
15931: PUSH
15932: LD_INT 100
15934: EQUAL
15935: IFFALSE 16884
// begin if not StreamModeActive then
15937: LD_EXP 50
15941: NOT
15942: IFFALSE 15952
// StreamModeActive := true ;
15944: LD_ADDR_EXP 50
15948: PUSH
15949: LD_INT 1
15951: ST_TO_ADDR
// if p3 = 0 then
15952: LD_VAR 0 3
15956: PUSH
15957: LD_INT 0
15959: EQUAL
15960: IFFALSE 15966
// InitStreamMode ;
15962: CALL 17117 0 0
// if p3 = 1 then
15966: LD_VAR 0 3
15970: PUSH
15971: LD_INT 1
15973: EQUAL
15974: IFFALSE 15984
// sRocket := true ;
15976: LD_ADDR_EXP 55
15980: PUSH
15981: LD_INT 1
15983: ST_TO_ADDR
// if p3 = 2 then
15984: LD_VAR 0 3
15988: PUSH
15989: LD_INT 2
15991: EQUAL
15992: IFFALSE 16002
// sSpeed := true ;
15994: LD_ADDR_EXP 54
15998: PUSH
15999: LD_INT 1
16001: ST_TO_ADDR
// if p3 = 3 then
16002: LD_VAR 0 3
16006: PUSH
16007: LD_INT 3
16009: EQUAL
16010: IFFALSE 16020
// sEngine := true ;
16012: LD_ADDR_EXP 56
16016: PUSH
16017: LD_INT 1
16019: ST_TO_ADDR
// if p3 = 4 then
16020: LD_VAR 0 3
16024: PUSH
16025: LD_INT 4
16027: EQUAL
16028: IFFALSE 16038
// sSpec := true ;
16030: LD_ADDR_EXP 53
16034: PUSH
16035: LD_INT 1
16037: ST_TO_ADDR
// if p3 = 5 then
16038: LD_VAR 0 3
16042: PUSH
16043: LD_INT 5
16045: EQUAL
16046: IFFALSE 16056
// sLevel := true ;
16048: LD_ADDR_EXP 57
16052: PUSH
16053: LD_INT 1
16055: ST_TO_ADDR
// if p3 = 6 then
16056: LD_VAR 0 3
16060: PUSH
16061: LD_INT 6
16063: EQUAL
16064: IFFALSE 16074
// sArmoury := true ;
16066: LD_ADDR_EXP 58
16070: PUSH
16071: LD_INT 1
16073: ST_TO_ADDR
// if p3 = 7 then
16074: LD_VAR 0 3
16078: PUSH
16079: LD_INT 7
16081: EQUAL
16082: IFFALSE 16092
// sRadar := true ;
16084: LD_ADDR_EXP 59
16088: PUSH
16089: LD_INT 1
16091: ST_TO_ADDR
// if p3 = 8 then
16092: LD_VAR 0 3
16096: PUSH
16097: LD_INT 8
16099: EQUAL
16100: IFFALSE 16110
// sBunker := true ;
16102: LD_ADDR_EXP 60
16106: PUSH
16107: LD_INT 1
16109: ST_TO_ADDR
// if p3 = 9 then
16110: LD_VAR 0 3
16114: PUSH
16115: LD_INT 9
16117: EQUAL
16118: IFFALSE 16128
// sHack := true ;
16120: LD_ADDR_EXP 61
16124: PUSH
16125: LD_INT 1
16127: ST_TO_ADDR
// if p3 = 10 then
16128: LD_VAR 0 3
16132: PUSH
16133: LD_INT 10
16135: EQUAL
16136: IFFALSE 16146
// sFire := true ;
16138: LD_ADDR_EXP 62
16142: PUSH
16143: LD_INT 1
16145: ST_TO_ADDR
// if p3 = 11 then
16146: LD_VAR 0 3
16150: PUSH
16151: LD_INT 11
16153: EQUAL
16154: IFFALSE 16164
// sRefresh := true ;
16156: LD_ADDR_EXP 63
16160: PUSH
16161: LD_INT 1
16163: ST_TO_ADDR
// if p3 = 12 then
16164: LD_VAR 0 3
16168: PUSH
16169: LD_INT 12
16171: EQUAL
16172: IFFALSE 16182
// sExp := true ;
16174: LD_ADDR_EXP 64
16178: PUSH
16179: LD_INT 1
16181: ST_TO_ADDR
// if p3 = 13 then
16182: LD_VAR 0 3
16186: PUSH
16187: LD_INT 13
16189: EQUAL
16190: IFFALSE 16200
// sDepot := true ;
16192: LD_ADDR_EXP 65
16196: PUSH
16197: LD_INT 1
16199: ST_TO_ADDR
// if p3 = 14 then
16200: LD_VAR 0 3
16204: PUSH
16205: LD_INT 14
16207: EQUAL
16208: IFFALSE 16218
// sFlag := true ;
16210: LD_ADDR_EXP 66
16214: PUSH
16215: LD_INT 1
16217: ST_TO_ADDR
// if p3 = 15 then
16218: LD_VAR 0 3
16222: PUSH
16223: LD_INT 15
16225: EQUAL
16226: IFFALSE 16236
// sKamikadze := true ;
16228: LD_ADDR_EXP 74
16232: PUSH
16233: LD_INT 1
16235: ST_TO_ADDR
// if p3 = 16 then
16236: LD_VAR 0 3
16240: PUSH
16241: LD_INT 16
16243: EQUAL
16244: IFFALSE 16254
// sTroll := true ;
16246: LD_ADDR_EXP 75
16250: PUSH
16251: LD_INT 1
16253: ST_TO_ADDR
// if p3 = 17 then
16254: LD_VAR 0 3
16258: PUSH
16259: LD_INT 17
16261: EQUAL
16262: IFFALSE 16272
// sSlow := true ;
16264: LD_ADDR_EXP 76
16268: PUSH
16269: LD_INT 1
16271: ST_TO_ADDR
// if p3 = 18 then
16272: LD_VAR 0 3
16276: PUSH
16277: LD_INT 18
16279: EQUAL
16280: IFFALSE 16290
// sLack := true ;
16282: LD_ADDR_EXP 77
16286: PUSH
16287: LD_INT 1
16289: ST_TO_ADDR
// if p3 = 19 then
16290: LD_VAR 0 3
16294: PUSH
16295: LD_INT 19
16297: EQUAL
16298: IFFALSE 16308
// sTank := true ;
16300: LD_ADDR_EXP 79
16304: PUSH
16305: LD_INT 1
16307: ST_TO_ADDR
// if p3 = 20 then
16308: LD_VAR 0 3
16312: PUSH
16313: LD_INT 20
16315: EQUAL
16316: IFFALSE 16326
// sRemote := true ;
16318: LD_ADDR_EXP 80
16322: PUSH
16323: LD_INT 1
16325: ST_TO_ADDR
// if p3 = 21 then
16326: LD_VAR 0 3
16330: PUSH
16331: LD_INT 21
16333: EQUAL
16334: IFFALSE 16344
// sPowell := true ;
16336: LD_ADDR_EXP 81
16340: PUSH
16341: LD_INT 1
16343: ST_TO_ADDR
// if p3 = 22 then
16344: LD_VAR 0 3
16348: PUSH
16349: LD_INT 22
16351: EQUAL
16352: IFFALSE 16362
// sTeleport := true ;
16354: LD_ADDR_EXP 84
16358: PUSH
16359: LD_INT 1
16361: ST_TO_ADDR
// if p3 = 23 then
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 23
16369: EQUAL
16370: IFFALSE 16380
// sOilTower := true ;
16372: LD_ADDR_EXP 86
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// if p3 = 24 then
16380: LD_VAR 0 3
16384: PUSH
16385: LD_INT 24
16387: EQUAL
16388: IFFALSE 16398
// sShovel := true ;
16390: LD_ADDR_EXP 87
16394: PUSH
16395: LD_INT 1
16397: ST_TO_ADDR
// if p3 = 25 then
16398: LD_VAR 0 3
16402: PUSH
16403: LD_INT 25
16405: EQUAL
16406: IFFALSE 16416
// sSheik := true ;
16408: LD_ADDR_EXP 88
16412: PUSH
16413: LD_INT 1
16415: ST_TO_ADDR
// if p3 = 26 then
16416: LD_VAR 0 3
16420: PUSH
16421: LD_INT 26
16423: EQUAL
16424: IFFALSE 16434
// sEarthquake := true ;
16426: LD_ADDR_EXP 90
16430: PUSH
16431: LD_INT 1
16433: ST_TO_ADDR
// if p3 = 27 then
16434: LD_VAR 0 3
16438: PUSH
16439: LD_INT 27
16441: EQUAL
16442: IFFALSE 16452
// sAI := true ;
16444: LD_ADDR_EXP 91
16448: PUSH
16449: LD_INT 1
16451: ST_TO_ADDR
// if p3 = 28 then
16452: LD_VAR 0 3
16456: PUSH
16457: LD_INT 28
16459: EQUAL
16460: IFFALSE 16470
// sCargo := true ;
16462: LD_ADDR_EXP 94
16466: PUSH
16467: LD_INT 1
16469: ST_TO_ADDR
// if p3 = 29 then
16470: LD_VAR 0 3
16474: PUSH
16475: LD_INT 29
16477: EQUAL
16478: IFFALSE 16488
// sDLaser := true ;
16480: LD_ADDR_EXP 95
16484: PUSH
16485: LD_INT 1
16487: ST_TO_ADDR
// if p3 = 30 then
16488: LD_VAR 0 3
16492: PUSH
16493: LD_INT 30
16495: EQUAL
16496: IFFALSE 16506
// sExchange := true ;
16498: LD_ADDR_EXP 96
16502: PUSH
16503: LD_INT 1
16505: ST_TO_ADDR
// if p3 = 31 then
16506: LD_VAR 0 3
16510: PUSH
16511: LD_INT 31
16513: EQUAL
16514: IFFALSE 16524
// sFac := true ;
16516: LD_ADDR_EXP 97
16520: PUSH
16521: LD_INT 1
16523: ST_TO_ADDR
// if p3 = 32 then
16524: LD_VAR 0 3
16528: PUSH
16529: LD_INT 32
16531: EQUAL
16532: IFFALSE 16542
// sPower := true ;
16534: LD_ADDR_EXP 98
16538: PUSH
16539: LD_INT 1
16541: ST_TO_ADDR
// if p3 = 33 then
16542: LD_VAR 0 3
16546: PUSH
16547: LD_INT 33
16549: EQUAL
16550: IFFALSE 16560
// sRandom := true ;
16552: LD_ADDR_EXP 99
16556: PUSH
16557: LD_INT 1
16559: ST_TO_ADDR
// if p3 = 34 then
16560: LD_VAR 0 3
16564: PUSH
16565: LD_INT 34
16567: EQUAL
16568: IFFALSE 16578
// sShield := true ;
16570: LD_ADDR_EXP 100
16574: PUSH
16575: LD_INT 1
16577: ST_TO_ADDR
// if p3 = 35 then
16578: LD_VAR 0 3
16582: PUSH
16583: LD_INT 35
16585: EQUAL
16586: IFFALSE 16596
// sTime := true ;
16588: LD_ADDR_EXP 101
16592: PUSH
16593: LD_INT 1
16595: ST_TO_ADDR
// if p3 = 36 then
16596: LD_VAR 0 3
16600: PUSH
16601: LD_INT 36
16603: EQUAL
16604: IFFALSE 16614
// sTools := true ;
16606: LD_ADDR_EXP 102
16610: PUSH
16611: LD_INT 1
16613: ST_TO_ADDR
// if p3 = 101 then
16614: LD_VAR 0 3
16618: PUSH
16619: LD_INT 101
16621: EQUAL
16622: IFFALSE 16632
// sSold := true ;
16624: LD_ADDR_EXP 67
16628: PUSH
16629: LD_INT 1
16631: ST_TO_ADDR
// if p3 = 102 then
16632: LD_VAR 0 3
16636: PUSH
16637: LD_INT 102
16639: EQUAL
16640: IFFALSE 16650
// sDiff := true ;
16642: LD_ADDR_EXP 68
16646: PUSH
16647: LD_INT 1
16649: ST_TO_ADDR
// if p3 = 103 then
16650: LD_VAR 0 3
16654: PUSH
16655: LD_INT 103
16657: EQUAL
16658: IFFALSE 16668
// sFog := true ;
16660: LD_ADDR_EXP 71
16664: PUSH
16665: LD_INT 1
16667: ST_TO_ADDR
// if p3 = 104 then
16668: LD_VAR 0 3
16672: PUSH
16673: LD_INT 104
16675: EQUAL
16676: IFFALSE 16686
// sReset := true ;
16678: LD_ADDR_EXP 72
16682: PUSH
16683: LD_INT 1
16685: ST_TO_ADDR
// if p3 = 105 then
16686: LD_VAR 0 3
16690: PUSH
16691: LD_INT 105
16693: EQUAL
16694: IFFALSE 16704
// sSun := true ;
16696: LD_ADDR_EXP 73
16700: PUSH
16701: LD_INT 1
16703: ST_TO_ADDR
// if p3 = 106 then
16704: LD_VAR 0 3
16708: PUSH
16709: LD_INT 106
16711: EQUAL
16712: IFFALSE 16722
// sTiger := true ;
16714: LD_ADDR_EXP 69
16718: PUSH
16719: LD_INT 1
16721: ST_TO_ADDR
// if p3 = 107 then
16722: LD_VAR 0 3
16726: PUSH
16727: LD_INT 107
16729: EQUAL
16730: IFFALSE 16740
// sBomb := true ;
16732: LD_ADDR_EXP 70
16736: PUSH
16737: LD_INT 1
16739: ST_TO_ADDR
// if p3 = 108 then
16740: LD_VAR 0 3
16744: PUSH
16745: LD_INT 108
16747: EQUAL
16748: IFFALSE 16758
// sWound := true ;
16750: LD_ADDR_EXP 78
16754: PUSH
16755: LD_INT 1
16757: ST_TO_ADDR
// if p3 = 109 then
16758: LD_VAR 0 3
16762: PUSH
16763: LD_INT 109
16765: EQUAL
16766: IFFALSE 16776
// sBetray := true ;
16768: LD_ADDR_EXP 82
16772: PUSH
16773: LD_INT 1
16775: ST_TO_ADDR
// if p3 = 110 then
16776: LD_VAR 0 3
16780: PUSH
16781: LD_INT 110
16783: EQUAL
16784: IFFALSE 16794
// sContamin := true ;
16786: LD_ADDR_EXP 83
16790: PUSH
16791: LD_INT 1
16793: ST_TO_ADDR
// if p3 = 111 then
16794: LD_VAR 0 3
16798: PUSH
16799: LD_INT 111
16801: EQUAL
16802: IFFALSE 16812
// sOil := true ;
16804: LD_ADDR_EXP 85
16808: PUSH
16809: LD_INT 1
16811: ST_TO_ADDR
// if p3 = 112 then
16812: LD_VAR 0 3
16816: PUSH
16817: LD_INT 112
16819: EQUAL
16820: IFFALSE 16830
// sStu := true ;
16822: LD_ADDR_EXP 89
16826: PUSH
16827: LD_INT 1
16829: ST_TO_ADDR
// if p3 = 113 then
16830: LD_VAR 0 3
16834: PUSH
16835: LD_INT 113
16837: EQUAL
16838: IFFALSE 16848
// sBazooka := true ;
16840: LD_ADDR_EXP 92
16844: PUSH
16845: LD_INT 1
16847: ST_TO_ADDR
// if p3 = 114 then
16848: LD_VAR 0 3
16852: PUSH
16853: LD_INT 114
16855: EQUAL
16856: IFFALSE 16866
// sMortar := true ;
16858: LD_ADDR_EXP 93
16862: PUSH
16863: LD_INT 1
16865: ST_TO_ADDR
// if p3 = 115 then
16866: LD_VAR 0 3
16870: PUSH
16871: LD_INT 115
16873: EQUAL
16874: IFFALSE 16884
// sRanger := true ;
16876: LD_ADDR_EXP 103
16880: PUSH
16881: LD_INT 1
16883: ST_TO_ADDR
// end ; if p2 = 101 then
16884: LD_VAR 0 2
16888: PUSH
16889: LD_INT 101
16891: EQUAL
16892: IFFALSE 17095
// begin case p3 of 1 :
16894: LD_VAR 0 3
16898: PUSH
16899: LD_INT 1
16901: DOUBLE
16902: EQUAL
16903: IFTRUE 16907
16905: GO 16914
16907: POP
// hHackUnlimitedResources ; 2 :
16908: CALL 27189 0 0
16912: GO 17095
16914: LD_INT 2
16916: DOUBLE
16917: EQUAL
16918: IFTRUE 16922
16920: GO 16929
16922: POP
// hHackSetLevel10 ; 3 :
16923: CALL 27322 0 0
16927: GO 17095
16929: LD_INT 3
16931: DOUBLE
16932: EQUAL
16933: IFTRUE 16937
16935: GO 16944
16937: POP
// hHackSetLevel10YourUnits ; 4 :
16938: CALL 27407 0 0
16942: GO 17095
16944: LD_INT 4
16946: DOUBLE
16947: EQUAL
16948: IFTRUE 16952
16950: GO 16974
16952: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
16953: LD_VAR 0 4
16957: PPUSH
16958: LD_VAR 0 5
16962: PPUSH
16963: LD_VAR 0 6
16967: PPUSH
16968: CALL 27497 0 3
16972: GO 17095
16974: LD_INT 5
16976: DOUBLE
16977: EQUAL
16978: IFTRUE 16982
16980: GO 16989
16982: POP
// hHackSpawnVehicle ; 6 :
16983: CALL 27558 0 0
16987: GO 17095
16989: LD_INT 6
16991: DOUBLE
16992: EQUAL
16993: IFTRUE 16997
16995: GO 17004
16997: POP
// hHackInvincible ; 7 :
16998: CALL 28104 0 0
17002: GO 17095
17004: LD_INT 7
17006: DOUBLE
17007: EQUAL
17008: IFTRUE 17012
17010: GO 17019
17012: POP
// hHackInvisible ; 8 :
17013: CALL 28215 0 0
17017: GO 17095
17019: LD_INT 8
17021: DOUBLE
17022: EQUAL
17023: IFTRUE 17027
17025: GO 17034
17027: POP
// hHackChangeYourSide ; 9 :
17028: CALL 28272 0 0
17032: GO 17095
17034: LD_INT 9
17036: DOUBLE
17037: EQUAL
17038: IFTRUE 17042
17040: GO 17049
17042: POP
// hHackChangeUnitSide ; 10 :
17043: CALL 28314 0 0
17047: GO 17095
17049: LD_INT 10
17051: DOUBLE
17052: EQUAL
17053: IFTRUE 17057
17055: GO 17064
17057: POP
// hHackFog ; 11 :
17058: CALL 28415 0 0
17062: GO 17095
17064: LD_INT 11
17066: DOUBLE
17067: EQUAL
17068: IFTRUE 17072
17070: GO 17079
17072: POP
// hHackApeman ; 12 :
17073: CALL 28430 0 0
17077: GO 17095
17079: LD_INT 12
17081: DOUBLE
17082: EQUAL
17083: IFTRUE 17087
17085: GO 17094
17087: POP
// hHackBoom ; end ;
17088: CALL 28515 0 0
17092: GO 17095
17094: POP
// end ; end ;
17095: PPOPN 6
17097: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
17098: GO 17100
17100: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17101: LD_STRING initStreamRollete();
17103: PPUSH
17104: CALL_OW 559
// InitStreamMode ;
17108: CALL 17117 0 0
// DefineStreamItems ( ) ;
17112: CALL 17557 0 0
// end ;
17116: END
// function InitStreamMode ; begin
17117: LD_INT 0
17119: PPUSH
// streamModeActive := false ;
17120: LD_ADDR_EXP 50
17124: PUSH
17125: LD_INT 0
17127: ST_TO_ADDR
// normalCounter := 36 ;
17128: LD_ADDR_EXP 51
17132: PUSH
17133: LD_INT 36
17135: ST_TO_ADDR
// hardcoreCounter := 16 ;
17136: LD_ADDR_EXP 52
17140: PUSH
17141: LD_INT 16
17143: ST_TO_ADDR
// sRocket := false ;
17144: LD_ADDR_EXP 55
17148: PUSH
17149: LD_INT 0
17151: ST_TO_ADDR
// sSpeed := false ;
17152: LD_ADDR_EXP 54
17156: PUSH
17157: LD_INT 0
17159: ST_TO_ADDR
// sEngine := false ;
17160: LD_ADDR_EXP 56
17164: PUSH
17165: LD_INT 0
17167: ST_TO_ADDR
// sSpec := false ;
17168: LD_ADDR_EXP 53
17172: PUSH
17173: LD_INT 0
17175: ST_TO_ADDR
// sLevel := false ;
17176: LD_ADDR_EXP 57
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// sArmoury := false ;
17184: LD_ADDR_EXP 58
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// sRadar := false ;
17192: LD_ADDR_EXP 59
17196: PUSH
17197: LD_INT 0
17199: ST_TO_ADDR
// sBunker := false ;
17200: LD_ADDR_EXP 60
17204: PUSH
17205: LD_INT 0
17207: ST_TO_ADDR
// sHack := false ;
17208: LD_ADDR_EXP 61
17212: PUSH
17213: LD_INT 0
17215: ST_TO_ADDR
// sFire := false ;
17216: LD_ADDR_EXP 62
17220: PUSH
17221: LD_INT 0
17223: ST_TO_ADDR
// sRefresh := false ;
17224: LD_ADDR_EXP 63
17228: PUSH
17229: LD_INT 0
17231: ST_TO_ADDR
// sExp := false ;
17232: LD_ADDR_EXP 64
17236: PUSH
17237: LD_INT 0
17239: ST_TO_ADDR
// sDepot := false ;
17240: LD_ADDR_EXP 65
17244: PUSH
17245: LD_INT 0
17247: ST_TO_ADDR
// sFlag := false ;
17248: LD_ADDR_EXP 66
17252: PUSH
17253: LD_INT 0
17255: ST_TO_ADDR
// sKamikadze := false ;
17256: LD_ADDR_EXP 74
17260: PUSH
17261: LD_INT 0
17263: ST_TO_ADDR
// sTroll := false ;
17264: LD_ADDR_EXP 75
17268: PUSH
17269: LD_INT 0
17271: ST_TO_ADDR
// sSlow := false ;
17272: LD_ADDR_EXP 76
17276: PUSH
17277: LD_INT 0
17279: ST_TO_ADDR
// sLack := false ;
17280: LD_ADDR_EXP 77
17284: PUSH
17285: LD_INT 0
17287: ST_TO_ADDR
// sTank := false ;
17288: LD_ADDR_EXP 79
17292: PUSH
17293: LD_INT 0
17295: ST_TO_ADDR
// sRemote := false ;
17296: LD_ADDR_EXP 80
17300: PUSH
17301: LD_INT 0
17303: ST_TO_ADDR
// sPowell := false ;
17304: LD_ADDR_EXP 81
17308: PUSH
17309: LD_INT 0
17311: ST_TO_ADDR
// sTeleport := false ;
17312: LD_ADDR_EXP 84
17316: PUSH
17317: LD_INT 0
17319: ST_TO_ADDR
// sOilTower := false ;
17320: LD_ADDR_EXP 86
17324: PUSH
17325: LD_INT 0
17327: ST_TO_ADDR
// sShovel := false ;
17328: LD_ADDR_EXP 87
17332: PUSH
17333: LD_INT 0
17335: ST_TO_ADDR
// sSheik := false ;
17336: LD_ADDR_EXP 88
17340: PUSH
17341: LD_INT 0
17343: ST_TO_ADDR
// sEarthquake := false ;
17344: LD_ADDR_EXP 90
17348: PUSH
17349: LD_INT 0
17351: ST_TO_ADDR
// sAI := false ;
17352: LD_ADDR_EXP 91
17356: PUSH
17357: LD_INT 0
17359: ST_TO_ADDR
// sCargo := false ;
17360: LD_ADDR_EXP 94
17364: PUSH
17365: LD_INT 0
17367: ST_TO_ADDR
// sDLaser := false ;
17368: LD_ADDR_EXP 95
17372: PUSH
17373: LD_INT 0
17375: ST_TO_ADDR
// sExchange := false ;
17376: LD_ADDR_EXP 96
17380: PUSH
17381: LD_INT 0
17383: ST_TO_ADDR
// sFac := false ;
17384: LD_ADDR_EXP 97
17388: PUSH
17389: LD_INT 0
17391: ST_TO_ADDR
// sPower := false ;
17392: LD_ADDR_EXP 98
17396: PUSH
17397: LD_INT 0
17399: ST_TO_ADDR
// sRandom := false ;
17400: LD_ADDR_EXP 99
17404: PUSH
17405: LD_INT 0
17407: ST_TO_ADDR
// sShield := false ;
17408: LD_ADDR_EXP 100
17412: PUSH
17413: LD_INT 0
17415: ST_TO_ADDR
// sTime := false ;
17416: LD_ADDR_EXP 101
17420: PUSH
17421: LD_INT 0
17423: ST_TO_ADDR
// sTools := false ;
17424: LD_ADDR_EXP 102
17428: PUSH
17429: LD_INT 0
17431: ST_TO_ADDR
// sSold := false ;
17432: LD_ADDR_EXP 67
17436: PUSH
17437: LD_INT 0
17439: ST_TO_ADDR
// sDiff := false ;
17440: LD_ADDR_EXP 68
17444: PUSH
17445: LD_INT 0
17447: ST_TO_ADDR
// sFog := false ;
17448: LD_ADDR_EXP 71
17452: PUSH
17453: LD_INT 0
17455: ST_TO_ADDR
// sReset := false ;
17456: LD_ADDR_EXP 72
17460: PUSH
17461: LD_INT 0
17463: ST_TO_ADDR
// sSun := false ;
17464: LD_ADDR_EXP 73
17468: PUSH
17469: LD_INT 0
17471: ST_TO_ADDR
// sTiger := false ;
17472: LD_ADDR_EXP 69
17476: PUSH
17477: LD_INT 0
17479: ST_TO_ADDR
// sBomb := false ;
17480: LD_ADDR_EXP 70
17484: PUSH
17485: LD_INT 0
17487: ST_TO_ADDR
// sWound := false ;
17488: LD_ADDR_EXP 78
17492: PUSH
17493: LD_INT 0
17495: ST_TO_ADDR
// sBetray := false ;
17496: LD_ADDR_EXP 82
17500: PUSH
17501: LD_INT 0
17503: ST_TO_ADDR
// sContamin := false ;
17504: LD_ADDR_EXP 83
17508: PUSH
17509: LD_INT 0
17511: ST_TO_ADDR
// sOil := false ;
17512: LD_ADDR_EXP 85
17516: PUSH
17517: LD_INT 0
17519: ST_TO_ADDR
// sStu := false ;
17520: LD_ADDR_EXP 89
17524: PUSH
17525: LD_INT 0
17527: ST_TO_ADDR
// sBazooka := false ;
17528: LD_ADDR_EXP 92
17532: PUSH
17533: LD_INT 0
17535: ST_TO_ADDR
// sMortar := false ;
17536: LD_ADDR_EXP 93
17540: PUSH
17541: LD_INT 0
17543: ST_TO_ADDR
// sRanger := false ;
17544: LD_ADDR_EXP 103
17548: PUSH
17549: LD_INT 0
17551: ST_TO_ADDR
// end ;
17552: LD_VAR 0 1
17556: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
17557: LD_INT 0
17559: PPUSH
17560: PPUSH
17561: PPUSH
17562: PPUSH
17563: PPUSH
// result := [ ] ;
17564: LD_ADDR_VAR 0 1
17568: PUSH
17569: EMPTY
17570: ST_TO_ADDR
// if campaign_id = 1 then
17571: LD_OWVAR 69
17575: PUSH
17576: LD_INT 1
17578: EQUAL
17579: IFFALSE 20517
// begin case mission_number of 1 :
17581: LD_OWVAR 70
17585: PUSH
17586: LD_INT 1
17588: DOUBLE
17589: EQUAL
17590: IFTRUE 17594
17592: GO 17658
17594: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
17595: LD_ADDR_VAR 0 1
17599: PUSH
17600: LD_INT 2
17602: PUSH
17603: LD_INT 4
17605: PUSH
17606: LD_INT 11
17608: PUSH
17609: LD_INT 12
17611: PUSH
17612: LD_INT 15
17614: PUSH
17615: LD_INT 16
17617: PUSH
17618: LD_INT 22
17620: PUSH
17621: LD_INT 23
17623: PUSH
17624: LD_INT 26
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 101
17640: PUSH
17641: LD_INT 102
17643: PUSH
17644: LD_INT 106
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: ST_TO_ADDR
17656: GO 20515
17658: LD_INT 2
17660: DOUBLE
17661: EQUAL
17662: IFTRUE 17666
17664: GO 17738
17666: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
17667: LD_ADDR_VAR 0 1
17671: PUSH
17672: LD_INT 2
17674: PUSH
17675: LD_INT 4
17677: PUSH
17678: LD_INT 11
17680: PUSH
17681: LD_INT 12
17683: PUSH
17684: LD_INT 15
17686: PUSH
17687: LD_INT 16
17689: PUSH
17690: LD_INT 22
17692: PUSH
17693: LD_INT 23
17695: PUSH
17696: LD_INT 26
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 101
17712: PUSH
17713: LD_INT 102
17715: PUSH
17716: LD_INT 105
17718: PUSH
17719: LD_INT 106
17721: PUSH
17722: LD_INT 108
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: ST_TO_ADDR
17736: GO 20515
17738: LD_INT 3
17740: DOUBLE
17741: EQUAL
17742: IFTRUE 17746
17744: GO 17822
17746: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
17747: LD_ADDR_VAR 0 1
17751: PUSH
17752: LD_INT 2
17754: PUSH
17755: LD_INT 4
17757: PUSH
17758: LD_INT 5
17760: PUSH
17761: LD_INT 11
17763: PUSH
17764: LD_INT 12
17766: PUSH
17767: LD_INT 15
17769: PUSH
17770: LD_INT 16
17772: PUSH
17773: LD_INT 22
17775: PUSH
17776: LD_INT 26
17778: PUSH
17779: LD_INT 36
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 101
17796: PUSH
17797: LD_INT 102
17799: PUSH
17800: LD_INT 105
17802: PUSH
17803: LD_INT 106
17805: PUSH
17806: LD_INT 108
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: ST_TO_ADDR
17820: GO 20515
17822: LD_INT 4
17824: DOUBLE
17825: EQUAL
17826: IFTRUE 17830
17828: GO 17914
17830: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
17831: LD_ADDR_VAR 0 1
17835: PUSH
17836: LD_INT 2
17838: PUSH
17839: LD_INT 4
17841: PUSH
17842: LD_INT 5
17844: PUSH
17845: LD_INT 8
17847: PUSH
17848: LD_INT 11
17850: PUSH
17851: LD_INT 12
17853: PUSH
17854: LD_INT 15
17856: PUSH
17857: LD_INT 16
17859: PUSH
17860: LD_INT 22
17862: PUSH
17863: LD_INT 23
17865: PUSH
17866: LD_INT 26
17868: PUSH
17869: LD_INT 36
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 101
17888: PUSH
17889: LD_INT 102
17891: PUSH
17892: LD_INT 105
17894: PUSH
17895: LD_INT 106
17897: PUSH
17898: LD_INT 108
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: ST_TO_ADDR
17912: GO 20515
17914: LD_INT 5
17916: DOUBLE
17917: EQUAL
17918: IFTRUE 17922
17920: GO 18022
17922: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17923: LD_ADDR_VAR 0 1
17927: PUSH
17928: LD_INT 2
17930: PUSH
17931: LD_INT 4
17933: PUSH
17934: LD_INT 5
17936: PUSH
17937: LD_INT 6
17939: PUSH
17940: LD_INT 8
17942: PUSH
17943: LD_INT 11
17945: PUSH
17946: LD_INT 12
17948: PUSH
17949: LD_INT 15
17951: PUSH
17952: LD_INT 16
17954: PUSH
17955: LD_INT 22
17957: PUSH
17958: LD_INT 23
17960: PUSH
17961: LD_INT 25
17963: PUSH
17964: LD_INT 26
17966: PUSH
17967: LD_INT 36
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 101
17988: PUSH
17989: LD_INT 102
17991: PUSH
17992: LD_INT 105
17994: PUSH
17995: LD_INT 106
17997: PUSH
17998: LD_INT 108
18000: PUSH
18001: LD_INT 109
18003: PUSH
18004: LD_INT 112
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: ST_TO_ADDR
18020: GO 20515
18022: LD_INT 6
18024: DOUBLE
18025: EQUAL
18026: IFTRUE 18030
18028: GO 18150
18030: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
18031: LD_ADDR_VAR 0 1
18035: PUSH
18036: LD_INT 2
18038: PUSH
18039: LD_INT 4
18041: PUSH
18042: LD_INT 5
18044: PUSH
18045: LD_INT 6
18047: PUSH
18048: LD_INT 8
18050: PUSH
18051: LD_INT 11
18053: PUSH
18054: LD_INT 12
18056: PUSH
18057: LD_INT 15
18059: PUSH
18060: LD_INT 16
18062: PUSH
18063: LD_INT 20
18065: PUSH
18066: LD_INT 21
18068: PUSH
18069: LD_INT 22
18071: PUSH
18072: LD_INT 23
18074: PUSH
18075: LD_INT 25
18077: PUSH
18078: LD_INT 26
18080: PUSH
18081: LD_INT 30
18083: PUSH
18084: LD_INT 31
18086: PUSH
18087: LD_INT 32
18089: PUSH
18090: LD_INT 36
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 101
18116: PUSH
18117: LD_INT 102
18119: PUSH
18120: LD_INT 105
18122: PUSH
18123: LD_INT 106
18125: PUSH
18126: LD_INT 108
18128: PUSH
18129: LD_INT 109
18131: PUSH
18132: LD_INT 112
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: ST_TO_ADDR
18148: GO 20515
18150: LD_INT 7
18152: DOUBLE
18153: EQUAL
18154: IFTRUE 18158
18156: GO 18258
18158: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
18159: LD_ADDR_VAR 0 1
18163: PUSH
18164: LD_INT 2
18166: PUSH
18167: LD_INT 4
18169: PUSH
18170: LD_INT 5
18172: PUSH
18173: LD_INT 7
18175: PUSH
18176: LD_INT 11
18178: PUSH
18179: LD_INT 12
18181: PUSH
18182: LD_INT 15
18184: PUSH
18185: LD_INT 16
18187: PUSH
18188: LD_INT 20
18190: PUSH
18191: LD_INT 21
18193: PUSH
18194: LD_INT 22
18196: PUSH
18197: LD_INT 23
18199: PUSH
18200: LD_INT 25
18202: PUSH
18203: LD_INT 26
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 101
18224: PUSH
18225: LD_INT 102
18227: PUSH
18228: LD_INT 103
18230: PUSH
18231: LD_INT 105
18233: PUSH
18234: LD_INT 106
18236: PUSH
18237: LD_INT 108
18239: PUSH
18240: LD_INT 112
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: ST_TO_ADDR
18256: GO 20515
18258: LD_INT 8
18260: DOUBLE
18261: EQUAL
18262: IFTRUE 18266
18264: GO 18394
18266: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
18267: LD_ADDR_VAR 0 1
18271: PUSH
18272: LD_INT 2
18274: PUSH
18275: LD_INT 4
18277: PUSH
18278: LD_INT 5
18280: PUSH
18281: LD_INT 6
18283: PUSH
18284: LD_INT 7
18286: PUSH
18287: LD_INT 8
18289: PUSH
18290: LD_INT 11
18292: PUSH
18293: LD_INT 12
18295: PUSH
18296: LD_INT 15
18298: PUSH
18299: LD_INT 16
18301: PUSH
18302: LD_INT 20
18304: PUSH
18305: LD_INT 21
18307: PUSH
18308: LD_INT 22
18310: PUSH
18311: LD_INT 23
18313: PUSH
18314: LD_INT 25
18316: PUSH
18317: LD_INT 26
18319: PUSH
18320: LD_INT 30
18322: PUSH
18323: LD_INT 31
18325: PUSH
18326: LD_INT 32
18328: PUSH
18329: LD_INT 36
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 101
18356: PUSH
18357: LD_INT 102
18359: PUSH
18360: LD_INT 103
18362: PUSH
18363: LD_INT 105
18365: PUSH
18366: LD_INT 106
18368: PUSH
18369: LD_INT 108
18371: PUSH
18372: LD_INT 109
18374: PUSH
18375: LD_INT 112
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: ST_TO_ADDR
18392: GO 20515
18394: LD_INT 9
18396: DOUBLE
18397: EQUAL
18398: IFTRUE 18402
18400: GO 18538
18402: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
18403: LD_ADDR_VAR 0 1
18407: PUSH
18408: LD_INT 2
18410: PUSH
18411: LD_INT 4
18413: PUSH
18414: LD_INT 5
18416: PUSH
18417: LD_INT 6
18419: PUSH
18420: LD_INT 7
18422: PUSH
18423: LD_INT 8
18425: PUSH
18426: LD_INT 11
18428: PUSH
18429: LD_INT 12
18431: PUSH
18432: LD_INT 15
18434: PUSH
18435: LD_INT 16
18437: PUSH
18438: LD_INT 20
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 22
18446: PUSH
18447: LD_INT 23
18449: PUSH
18450: LD_INT 25
18452: PUSH
18453: LD_INT 26
18455: PUSH
18456: LD_INT 28
18458: PUSH
18459: LD_INT 30
18461: PUSH
18462: LD_INT 31
18464: PUSH
18465: LD_INT 32
18467: PUSH
18468: LD_INT 36
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 101
18496: PUSH
18497: LD_INT 102
18499: PUSH
18500: LD_INT 103
18502: PUSH
18503: LD_INT 105
18505: PUSH
18506: LD_INT 106
18508: PUSH
18509: LD_INT 108
18511: PUSH
18512: LD_INT 109
18514: PUSH
18515: LD_INT 112
18517: PUSH
18518: LD_INT 114
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: ST_TO_ADDR
18536: GO 20515
18538: LD_INT 10
18540: DOUBLE
18541: EQUAL
18542: IFTRUE 18546
18544: GO 18730
18546: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
18547: LD_ADDR_VAR 0 1
18551: PUSH
18552: LD_INT 2
18554: PUSH
18555: LD_INT 4
18557: PUSH
18558: LD_INT 5
18560: PUSH
18561: LD_INT 6
18563: PUSH
18564: LD_INT 7
18566: PUSH
18567: LD_INT 8
18569: PUSH
18570: LD_INT 9
18572: PUSH
18573: LD_INT 10
18575: PUSH
18576: LD_INT 11
18578: PUSH
18579: LD_INT 12
18581: PUSH
18582: LD_INT 13
18584: PUSH
18585: LD_INT 14
18587: PUSH
18588: LD_INT 15
18590: PUSH
18591: LD_INT 16
18593: PUSH
18594: LD_INT 17
18596: PUSH
18597: LD_INT 18
18599: PUSH
18600: LD_INT 19
18602: PUSH
18603: LD_INT 20
18605: PUSH
18606: LD_INT 21
18608: PUSH
18609: LD_INT 22
18611: PUSH
18612: LD_INT 23
18614: PUSH
18615: LD_INT 24
18617: PUSH
18618: LD_INT 25
18620: PUSH
18621: LD_INT 26
18623: PUSH
18624: LD_INT 28
18626: PUSH
18627: LD_INT 30
18629: PUSH
18630: LD_INT 31
18632: PUSH
18633: LD_INT 32
18635: PUSH
18636: LD_INT 36
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 101
18672: PUSH
18673: LD_INT 102
18675: PUSH
18676: LD_INT 103
18678: PUSH
18679: LD_INT 104
18681: PUSH
18682: LD_INT 105
18684: PUSH
18685: LD_INT 106
18687: PUSH
18688: LD_INT 107
18690: PUSH
18691: LD_INT 108
18693: PUSH
18694: LD_INT 109
18696: PUSH
18697: LD_INT 110
18699: PUSH
18700: LD_INT 111
18702: PUSH
18703: LD_INT 112
18705: PUSH
18706: LD_INT 114
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: ST_TO_ADDR
18728: GO 20515
18730: LD_INT 11
18732: DOUBLE
18733: EQUAL
18734: IFTRUE 18738
18736: GO 18930
18738: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
18739: LD_ADDR_VAR 0 1
18743: PUSH
18744: LD_INT 2
18746: PUSH
18747: LD_INT 3
18749: PUSH
18750: LD_INT 4
18752: PUSH
18753: LD_INT 5
18755: PUSH
18756: LD_INT 6
18758: PUSH
18759: LD_INT 7
18761: PUSH
18762: LD_INT 8
18764: PUSH
18765: LD_INT 9
18767: PUSH
18768: LD_INT 10
18770: PUSH
18771: LD_INT 11
18773: PUSH
18774: LD_INT 12
18776: PUSH
18777: LD_INT 13
18779: PUSH
18780: LD_INT 14
18782: PUSH
18783: LD_INT 15
18785: PUSH
18786: LD_INT 16
18788: PUSH
18789: LD_INT 17
18791: PUSH
18792: LD_INT 18
18794: PUSH
18795: LD_INT 19
18797: PUSH
18798: LD_INT 20
18800: PUSH
18801: LD_INT 21
18803: PUSH
18804: LD_INT 22
18806: PUSH
18807: LD_INT 23
18809: PUSH
18810: LD_INT 24
18812: PUSH
18813: LD_INT 25
18815: PUSH
18816: LD_INT 26
18818: PUSH
18819: LD_INT 28
18821: PUSH
18822: LD_INT 30
18824: PUSH
18825: LD_INT 31
18827: PUSH
18828: LD_INT 32
18830: PUSH
18831: LD_INT 34
18833: PUSH
18834: LD_INT 36
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 101
18872: PUSH
18873: LD_INT 102
18875: PUSH
18876: LD_INT 103
18878: PUSH
18879: LD_INT 104
18881: PUSH
18882: LD_INT 105
18884: PUSH
18885: LD_INT 106
18887: PUSH
18888: LD_INT 107
18890: PUSH
18891: LD_INT 108
18893: PUSH
18894: LD_INT 109
18896: PUSH
18897: LD_INT 110
18899: PUSH
18900: LD_INT 111
18902: PUSH
18903: LD_INT 112
18905: PUSH
18906: LD_INT 114
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: ST_TO_ADDR
18928: GO 20515
18930: LD_INT 12
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 19146
18938: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18939: LD_ADDR_VAR 0 1
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: LD_INT 2
18949: PUSH
18950: LD_INT 3
18952: PUSH
18953: LD_INT 4
18955: PUSH
18956: LD_INT 5
18958: PUSH
18959: LD_INT 6
18961: PUSH
18962: LD_INT 7
18964: PUSH
18965: LD_INT 8
18967: PUSH
18968: LD_INT 9
18970: PUSH
18971: LD_INT 10
18973: PUSH
18974: LD_INT 11
18976: PUSH
18977: LD_INT 12
18979: PUSH
18980: LD_INT 13
18982: PUSH
18983: LD_INT 14
18985: PUSH
18986: LD_INT 15
18988: PUSH
18989: LD_INT 16
18991: PUSH
18992: LD_INT 17
18994: PUSH
18995: LD_INT 18
18997: PUSH
18998: LD_INT 19
19000: PUSH
19001: LD_INT 20
19003: PUSH
19004: LD_INT 21
19006: PUSH
19007: LD_INT 22
19009: PUSH
19010: LD_INT 23
19012: PUSH
19013: LD_INT 24
19015: PUSH
19016: LD_INT 25
19018: PUSH
19019: LD_INT 26
19021: PUSH
19022: LD_INT 27
19024: PUSH
19025: LD_INT 28
19027: PUSH
19028: LD_INT 30
19030: PUSH
19031: LD_INT 31
19033: PUSH
19034: LD_INT 32
19036: PUSH
19037: LD_INT 33
19039: PUSH
19040: LD_INT 34
19042: PUSH
19043: LD_INT 36
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 101
19084: PUSH
19085: LD_INT 102
19087: PUSH
19088: LD_INT 103
19090: PUSH
19091: LD_INT 104
19093: PUSH
19094: LD_INT 105
19096: PUSH
19097: LD_INT 106
19099: PUSH
19100: LD_INT 107
19102: PUSH
19103: LD_INT 108
19105: PUSH
19106: LD_INT 109
19108: PUSH
19109: LD_INT 110
19111: PUSH
19112: LD_INT 111
19114: PUSH
19115: LD_INT 112
19117: PUSH
19118: LD_INT 113
19120: PUSH
19121: LD_INT 114
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: ST_TO_ADDR
19144: GO 20515
19146: LD_INT 13
19148: DOUBLE
19149: EQUAL
19150: IFTRUE 19154
19152: GO 19350
19154: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
19155: LD_ADDR_VAR 0 1
19159: PUSH
19160: LD_INT 1
19162: PUSH
19163: LD_INT 2
19165: PUSH
19166: LD_INT 3
19168: PUSH
19169: LD_INT 4
19171: PUSH
19172: LD_INT 5
19174: PUSH
19175: LD_INT 8
19177: PUSH
19178: LD_INT 9
19180: PUSH
19181: LD_INT 10
19183: PUSH
19184: LD_INT 11
19186: PUSH
19187: LD_INT 12
19189: PUSH
19190: LD_INT 14
19192: PUSH
19193: LD_INT 15
19195: PUSH
19196: LD_INT 16
19198: PUSH
19199: LD_INT 17
19201: PUSH
19202: LD_INT 18
19204: PUSH
19205: LD_INT 19
19207: PUSH
19208: LD_INT 20
19210: PUSH
19211: LD_INT 21
19213: PUSH
19214: LD_INT 22
19216: PUSH
19217: LD_INT 23
19219: PUSH
19220: LD_INT 24
19222: PUSH
19223: LD_INT 25
19225: PUSH
19226: LD_INT 26
19228: PUSH
19229: LD_INT 27
19231: PUSH
19232: LD_INT 28
19234: PUSH
19235: LD_INT 30
19237: PUSH
19238: LD_INT 31
19240: PUSH
19241: LD_INT 32
19243: PUSH
19244: LD_INT 33
19246: PUSH
19247: LD_INT 34
19249: PUSH
19250: LD_INT 36
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 101
19288: PUSH
19289: LD_INT 102
19291: PUSH
19292: LD_INT 103
19294: PUSH
19295: LD_INT 104
19297: PUSH
19298: LD_INT 105
19300: PUSH
19301: LD_INT 106
19303: PUSH
19304: LD_INT 107
19306: PUSH
19307: LD_INT 108
19309: PUSH
19310: LD_INT 109
19312: PUSH
19313: LD_INT 110
19315: PUSH
19316: LD_INT 111
19318: PUSH
19319: LD_INT 112
19321: PUSH
19322: LD_INT 113
19324: PUSH
19325: LD_INT 114
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: ST_TO_ADDR
19348: GO 20515
19350: LD_INT 14
19352: DOUBLE
19353: EQUAL
19354: IFTRUE 19358
19356: GO 19570
19358: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
19359: LD_ADDR_VAR 0 1
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: LD_INT 2
19369: PUSH
19370: LD_INT 3
19372: PUSH
19373: LD_INT 4
19375: PUSH
19376: LD_INT 5
19378: PUSH
19379: LD_INT 6
19381: PUSH
19382: LD_INT 7
19384: PUSH
19385: LD_INT 8
19387: PUSH
19388: LD_INT 9
19390: PUSH
19391: LD_INT 10
19393: PUSH
19394: LD_INT 11
19396: PUSH
19397: LD_INT 12
19399: PUSH
19400: LD_INT 13
19402: PUSH
19403: LD_INT 14
19405: PUSH
19406: LD_INT 15
19408: PUSH
19409: LD_INT 16
19411: PUSH
19412: LD_INT 17
19414: PUSH
19415: LD_INT 18
19417: PUSH
19418: LD_INT 19
19420: PUSH
19421: LD_INT 20
19423: PUSH
19424: LD_INT 21
19426: PUSH
19427: LD_INT 22
19429: PUSH
19430: LD_INT 23
19432: PUSH
19433: LD_INT 24
19435: PUSH
19436: LD_INT 25
19438: PUSH
19439: LD_INT 26
19441: PUSH
19442: LD_INT 27
19444: PUSH
19445: LD_INT 28
19447: PUSH
19448: LD_INT 29
19450: PUSH
19451: LD_INT 30
19453: PUSH
19454: LD_INT 31
19456: PUSH
19457: LD_INT 32
19459: PUSH
19460: LD_INT 33
19462: PUSH
19463: LD_INT 34
19465: PUSH
19466: LD_INT 36
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 101
19508: PUSH
19509: LD_INT 102
19511: PUSH
19512: LD_INT 103
19514: PUSH
19515: LD_INT 104
19517: PUSH
19518: LD_INT 105
19520: PUSH
19521: LD_INT 106
19523: PUSH
19524: LD_INT 107
19526: PUSH
19527: LD_INT 108
19529: PUSH
19530: LD_INT 109
19532: PUSH
19533: LD_INT 110
19535: PUSH
19536: LD_INT 111
19538: PUSH
19539: LD_INT 112
19541: PUSH
19542: LD_INT 113
19544: PUSH
19545: LD_INT 114
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: ST_TO_ADDR
19568: GO 20515
19570: LD_INT 15
19572: DOUBLE
19573: EQUAL
19574: IFTRUE 19578
19576: GO 19790
19578: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
19579: LD_ADDR_VAR 0 1
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: LD_INT 3
19592: PUSH
19593: LD_INT 4
19595: PUSH
19596: LD_INT 5
19598: PUSH
19599: LD_INT 6
19601: PUSH
19602: LD_INT 7
19604: PUSH
19605: LD_INT 8
19607: PUSH
19608: LD_INT 9
19610: PUSH
19611: LD_INT 10
19613: PUSH
19614: LD_INT 11
19616: PUSH
19617: LD_INT 12
19619: PUSH
19620: LD_INT 13
19622: PUSH
19623: LD_INT 14
19625: PUSH
19626: LD_INT 15
19628: PUSH
19629: LD_INT 16
19631: PUSH
19632: LD_INT 17
19634: PUSH
19635: LD_INT 18
19637: PUSH
19638: LD_INT 19
19640: PUSH
19641: LD_INT 20
19643: PUSH
19644: LD_INT 21
19646: PUSH
19647: LD_INT 22
19649: PUSH
19650: LD_INT 23
19652: PUSH
19653: LD_INT 24
19655: PUSH
19656: LD_INT 25
19658: PUSH
19659: LD_INT 26
19661: PUSH
19662: LD_INT 27
19664: PUSH
19665: LD_INT 28
19667: PUSH
19668: LD_INT 29
19670: PUSH
19671: LD_INT 30
19673: PUSH
19674: LD_INT 31
19676: PUSH
19677: LD_INT 32
19679: PUSH
19680: LD_INT 33
19682: PUSH
19683: LD_INT 34
19685: PUSH
19686: LD_INT 36
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 101
19728: PUSH
19729: LD_INT 102
19731: PUSH
19732: LD_INT 103
19734: PUSH
19735: LD_INT 104
19737: PUSH
19738: LD_INT 105
19740: PUSH
19741: LD_INT 106
19743: PUSH
19744: LD_INT 107
19746: PUSH
19747: LD_INT 108
19749: PUSH
19750: LD_INT 109
19752: PUSH
19753: LD_INT 110
19755: PUSH
19756: LD_INT 111
19758: PUSH
19759: LD_INT 112
19761: PUSH
19762: LD_INT 113
19764: PUSH
19765: LD_INT 114
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: ST_TO_ADDR
19788: GO 20515
19790: LD_INT 16
19792: DOUBLE
19793: EQUAL
19794: IFTRUE 19798
19796: GO 19922
19798: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
19799: LD_ADDR_VAR 0 1
19803: PUSH
19804: LD_INT 2
19806: PUSH
19807: LD_INT 4
19809: PUSH
19810: LD_INT 5
19812: PUSH
19813: LD_INT 7
19815: PUSH
19816: LD_INT 11
19818: PUSH
19819: LD_INT 12
19821: PUSH
19822: LD_INT 15
19824: PUSH
19825: LD_INT 16
19827: PUSH
19828: LD_INT 20
19830: PUSH
19831: LD_INT 21
19833: PUSH
19834: LD_INT 22
19836: PUSH
19837: LD_INT 23
19839: PUSH
19840: LD_INT 25
19842: PUSH
19843: LD_INT 26
19845: PUSH
19846: LD_INT 30
19848: PUSH
19849: LD_INT 31
19851: PUSH
19852: LD_INT 32
19854: PUSH
19855: LD_INT 33
19857: PUSH
19858: LD_INT 34
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 101
19884: PUSH
19885: LD_INT 102
19887: PUSH
19888: LD_INT 103
19890: PUSH
19891: LD_INT 106
19893: PUSH
19894: LD_INT 108
19896: PUSH
19897: LD_INT 112
19899: PUSH
19900: LD_INT 113
19902: PUSH
19903: LD_INT 114
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: ST_TO_ADDR
19920: GO 20515
19922: LD_INT 17
19924: DOUBLE
19925: EQUAL
19926: IFTRUE 19930
19928: GO 20142
19930: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19931: LD_ADDR_VAR 0 1
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: LD_INT 2
19941: PUSH
19942: LD_INT 3
19944: PUSH
19945: LD_INT 4
19947: PUSH
19948: LD_INT 5
19950: PUSH
19951: LD_INT 6
19953: PUSH
19954: LD_INT 7
19956: PUSH
19957: LD_INT 8
19959: PUSH
19960: LD_INT 9
19962: PUSH
19963: LD_INT 10
19965: PUSH
19966: LD_INT 11
19968: PUSH
19969: LD_INT 12
19971: PUSH
19972: LD_INT 13
19974: PUSH
19975: LD_INT 14
19977: PUSH
19978: LD_INT 15
19980: PUSH
19981: LD_INT 16
19983: PUSH
19984: LD_INT 17
19986: PUSH
19987: LD_INT 18
19989: PUSH
19990: LD_INT 19
19992: PUSH
19993: LD_INT 20
19995: PUSH
19996: LD_INT 21
19998: PUSH
19999: LD_INT 22
20001: PUSH
20002: LD_INT 23
20004: PUSH
20005: LD_INT 24
20007: PUSH
20008: LD_INT 25
20010: PUSH
20011: LD_INT 26
20013: PUSH
20014: LD_INT 27
20016: PUSH
20017: LD_INT 28
20019: PUSH
20020: LD_INT 29
20022: PUSH
20023: LD_INT 30
20025: PUSH
20026: LD_INT 31
20028: PUSH
20029: LD_INT 32
20031: PUSH
20032: LD_INT 33
20034: PUSH
20035: LD_INT 34
20037: PUSH
20038: LD_INT 36
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 101
20080: PUSH
20081: LD_INT 102
20083: PUSH
20084: LD_INT 103
20086: PUSH
20087: LD_INT 104
20089: PUSH
20090: LD_INT 105
20092: PUSH
20093: LD_INT 106
20095: PUSH
20096: LD_INT 107
20098: PUSH
20099: LD_INT 108
20101: PUSH
20102: LD_INT 109
20104: PUSH
20105: LD_INT 110
20107: PUSH
20108: LD_INT 111
20110: PUSH
20111: LD_INT 112
20113: PUSH
20114: LD_INT 113
20116: PUSH
20117: LD_INT 114
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: ST_TO_ADDR
20140: GO 20515
20142: LD_INT 18
20144: DOUBLE
20145: EQUAL
20146: IFTRUE 20150
20148: GO 20286
20150: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
20151: LD_ADDR_VAR 0 1
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: LD_INT 4
20161: PUSH
20162: LD_INT 5
20164: PUSH
20165: LD_INT 7
20167: PUSH
20168: LD_INT 11
20170: PUSH
20171: LD_INT 12
20173: PUSH
20174: LD_INT 15
20176: PUSH
20177: LD_INT 16
20179: PUSH
20180: LD_INT 20
20182: PUSH
20183: LD_INT 21
20185: PUSH
20186: LD_INT 22
20188: PUSH
20189: LD_INT 23
20191: PUSH
20192: LD_INT 25
20194: PUSH
20195: LD_INT 26
20197: PUSH
20198: LD_INT 30
20200: PUSH
20201: LD_INT 31
20203: PUSH
20204: LD_INT 32
20206: PUSH
20207: LD_INT 33
20209: PUSH
20210: LD_INT 34
20212: PUSH
20213: LD_INT 35
20215: PUSH
20216: LD_INT 36
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 101
20244: PUSH
20245: LD_INT 102
20247: PUSH
20248: LD_INT 103
20250: PUSH
20251: LD_INT 106
20253: PUSH
20254: LD_INT 108
20256: PUSH
20257: LD_INT 112
20259: PUSH
20260: LD_INT 113
20262: PUSH
20263: LD_INT 114
20265: PUSH
20266: LD_INT 115
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: ST_TO_ADDR
20284: GO 20515
20286: LD_INT 19
20288: DOUBLE
20289: EQUAL
20290: IFTRUE 20294
20292: GO 20514
20294: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
20295: LD_ADDR_VAR 0 1
20299: PUSH
20300: LD_INT 1
20302: PUSH
20303: LD_INT 2
20305: PUSH
20306: LD_INT 3
20308: PUSH
20309: LD_INT 4
20311: PUSH
20312: LD_INT 5
20314: PUSH
20315: LD_INT 6
20317: PUSH
20318: LD_INT 7
20320: PUSH
20321: LD_INT 8
20323: PUSH
20324: LD_INT 9
20326: PUSH
20327: LD_INT 10
20329: PUSH
20330: LD_INT 11
20332: PUSH
20333: LD_INT 12
20335: PUSH
20336: LD_INT 13
20338: PUSH
20339: LD_INT 14
20341: PUSH
20342: LD_INT 15
20344: PUSH
20345: LD_INT 16
20347: PUSH
20348: LD_INT 17
20350: PUSH
20351: LD_INT 18
20353: PUSH
20354: LD_INT 19
20356: PUSH
20357: LD_INT 20
20359: PUSH
20360: LD_INT 21
20362: PUSH
20363: LD_INT 22
20365: PUSH
20366: LD_INT 23
20368: PUSH
20369: LD_INT 24
20371: PUSH
20372: LD_INT 25
20374: PUSH
20375: LD_INT 26
20377: PUSH
20378: LD_INT 27
20380: PUSH
20381: LD_INT 28
20383: PUSH
20384: LD_INT 29
20386: PUSH
20387: LD_INT 30
20389: PUSH
20390: LD_INT 31
20392: PUSH
20393: LD_INT 32
20395: PUSH
20396: LD_INT 33
20398: PUSH
20399: LD_INT 34
20401: PUSH
20402: LD_INT 35
20404: PUSH
20405: LD_INT 36
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 101
20448: PUSH
20449: LD_INT 102
20451: PUSH
20452: LD_INT 103
20454: PUSH
20455: LD_INT 104
20457: PUSH
20458: LD_INT 105
20460: PUSH
20461: LD_INT 106
20463: PUSH
20464: LD_INT 107
20466: PUSH
20467: LD_INT 108
20469: PUSH
20470: LD_INT 109
20472: PUSH
20473: LD_INT 110
20475: PUSH
20476: LD_INT 111
20478: PUSH
20479: LD_INT 112
20481: PUSH
20482: LD_INT 113
20484: PUSH
20485: LD_INT 114
20487: PUSH
20488: LD_INT 115
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: ST_TO_ADDR
20512: GO 20515
20514: POP
// end else
20515: GO 20734
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
20517: LD_ADDR_VAR 0 1
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: LD_INT 2
20527: PUSH
20528: LD_INT 3
20530: PUSH
20531: LD_INT 4
20533: PUSH
20534: LD_INT 5
20536: PUSH
20537: LD_INT 6
20539: PUSH
20540: LD_INT 7
20542: PUSH
20543: LD_INT 8
20545: PUSH
20546: LD_INT 9
20548: PUSH
20549: LD_INT 10
20551: PUSH
20552: LD_INT 11
20554: PUSH
20555: LD_INT 12
20557: PUSH
20558: LD_INT 13
20560: PUSH
20561: LD_INT 14
20563: PUSH
20564: LD_INT 15
20566: PUSH
20567: LD_INT 16
20569: PUSH
20570: LD_INT 17
20572: PUSH
20573: LD_INT 18
20575: PUSH
20576: LD_INT 19
20578: PUSH
20579: LD_INT 20
20581: PUSH
20582: LD_INT 21
20584: PUSH
20585: LD_INT 22
20587: PUSH
20588: LD_INT 23
20590: PUSH
20591: LD_INT 24
20593: PUSH
20594: LD_INT 25
20596: PUSH
20597: LD_INT 26
20599: PUSH
20600: LD_INT 27
20602: PUSH
20603: LD_INT 28
20605: PUSH
20606: LD_INT 29
20608: PUSH
20609: LD_INT 30
20611: PUSH
20612: LD_INT 31
20614: PUSH
20615: LD_INT 32
20617: PUSH
20618: LD_INT 33
20620: PUSH
20621: LD_INT 34
20623: PUSH
20624: LD_INT 35
20626: PUSH
20627: LD_INT 36
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 101
20670: PUSH
20671: LD_INT 102
20673: PUSH
20674: LD_INT 103
20676: PUSH
20677: LD_INT 104
20679: PUSH
20680: LD_INT 105
20682: PUSH
20683: LD_INT 106
20685: PUSH
20686: LD_INT 107
20688: PUSH
20689: LD_INT 108
20691: PUSH
20692: LD_INT 109
20694: PUSH
20695: LD_INT 110
20697: PUSH
20698: LD_INT 111
20700: PUSH
20701: LD_INT 112
20703: PUSH
20704: LD_INT 113
20706: PUSH
20707: LD_INT 114
20709: PUSH
20710: LD_INT 115
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: ST_TO_ADDR
// if result then
20734: LD_VAR 0 1
20738: IFFALSE 21027
// begin normal :=  ;
20740: LD_ADDR_VAR 0 3
20744: PUSH
20745: LD_STRING 
20747: ST_TO_ADDR
// hardcore :=  ;
20748: LD_ADDR_VAR 0 4
20752: PUSH
20753: LD_STRING 
20755: ST_TO_ADDR
// for i = 1 to normalCounter do
20756: LD_ADDR_VAR 0 5
20760: PUSH
20761: DOUBLE
20762: LD_INT 1
20764: DEC
20765: ST_TO_ADDR
20766: LD_EXP 51
20770: PUSH
20771: FOR_TO
20772: IFFALSE 20873
// begin tmp := 0 ;
20774: LD_ADDR_VAR 0 2
20778: PUSH
20779: LD_STRING 0
20781: ST_TO_ADDR
// if result [ 1 ] then
20782: LD_VAR 0 1
20786: PUSH
20787: LD_INT 1
20789: ARRAY
20790: IFFALSE 20855
// if result [ 1 ] [ 1 ] = i then
20792: LD_VAR 0 1
20796: PUSH
20797: LD_INT 1
20799: ARRAY
20800: PUSH
20801: LD_INT 1
20803: ARRAY
20804: PUSH
20805: LD_VAR 0 5
20809: EQUAL
20810: IFFALSE 20855
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20812: LD_ADDR_VAR 0 1
20816: PUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: LD_INT 1
20824: PPUSH
20825: LD_VAR 0 1
20829: PUSH
20830: LD_INT 1
20832: ARRAY
20833: PPUSH
20834: LD_INT 1
20836: PPUSH
20837: CALL_OW 3
20841: PPUSH
20842: CALL_OW 1
20846: ST_TO_ADDR
// tmp := 1 ;
20847: LD_ADDR_VAR 0 2
20851: PUSH
20852: LD_STRING 1
20854: ST_TO_ADDR
// end ; normal := normal & tmp ;
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: LD_VAR 0 3
20864: PUSH
20865: LD_VAR 0 2
20869: STR
20870: ST_TO_ADDR
// end ;
20871: GO 20771
20873: POP
20874: POP
// for i = 1 to hardcoreCounter do
20875: LD_ADDR_VAR 0 5
20879: PUSH
20880: DOUBLE
20881: LD_INT 1
20883: DEC
20884: ST_TO_ADDR
20885: LD_EXP 52
20889: PUSH
20890: FOR_TO
20891: IFFALSE 20996
// begin tmp := 0 ;
20893: LD_ADDR_VAR 0 2
20897: PUSH
20898: LD_STRING 0
20900: ST_TO_ADDR
// if result [ 2 ] then
20901: LD_VAR 0 1
20905: PUSH
20906: LD_INT 2
20908: ARRAY
20909: IFFALSE 20978
// if result [ 2 ] [ 1 ] = 100 + i then
20911: LD_VAR 0 1
20915: PUSH
20916: LD_INT 2
20918: ARRAY
20919: PUSH
20920: LD_INT 1
20922: ARRAY
20923: PUSH
20924: LD_INT 100
20926: PUSH
20927: LD_VAR 0 5
20931: PLUS
20932: EQUAL
20933: IFFALSE 20978
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20935: LD_ADDR_VAR 0 1
20939: PUSH
20940: LD_VAR 0 1
20944: PPUSH
20945: LD_INT 2
20947: PPUSH
20948: LD_VAR 0 1
20952: PUSH
20953: LD_INT 2
20955: ARRAY
20956: PPUSH
20957: LD_INT 1
20959: PPUSH
20960: CALL_OW 3
20964: PPUSH
20965: CALL_OW 1
20969: ST_TO_ADDR
// tmp := 1 ;
20970: LD_ADDR_VAR 0 2
20974: PUSH
20975: LD_STRING 1
20977: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20978: LD_ADDR_VAR 0 4
20982: PUSH
20983: LD_VAR 0 4
20987: PUSH
20988: LD_VAR 0 2
20992: STR
20993: ST_TO_ADDR
// end ;
20994: GO 20890
20996: POP
20997: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20998: LD_STRING getStreamItemsFromMission("
21000: PUSH
21001: LD_VAR 0 3
21005: STR
21006: PUSH
21007: LD_STRING ","
21009: STR
21010: PUSH
21011: LD_VAR 0 4
21015: STR
21016: PUSH
21017: LD_STRING ")
21019: STR
21020: PPUSH
21021: CALL_OW 559
// end else
21025: GO 21034
// ToLua ( getStreamItemsFromMission("","") ) ;
21027: LD_STRING getStreamItemsFromMission("","")
21029: PPUSH
21030: CALL_OW 559
// end ;
21034: LD_VAR 0 1
21038: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21039: LD_EXP 50
21043: PUSH
21044: LD_EXP 55
21048: AND
21049: IFFALSE 21173
21051: GO 21053
21053: DISABLE
21054: LD_INT 0
21056: PPUSH
21057: PPUSH
// begin enable ;
21058: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21059: LD_ADDR_VAR 0 2
21063: PUSH
21064: LD_INT 22
21066: PUSH
21067: LD_OWVAR 2
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 2
21078: PUSH
21079: LD_INT 34
21081: PUSH
21082: LD_INT 7
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 34
21091: PUSH
21092: LD_INT 45
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 34
21101: PUSH
21102: LD_INT 28
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 34
21111: PUSH
21112: LD_INT 47
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PPUSH
21130: CALL_OW 69
21134: ST_TO_ADDR
// if not tmp then
21135: LD_VAR 0 2
21139: NOT
21140: IFFALSE 21144
// exit ;
21142: GO 21173
// for i in tmp do
21144: LD_ADDR_VAR 0 1
21148: PUSH
21149: LD_VAR 0 2
21153: PUSH
21154: FOR_IN
21155: IFFALSE 21171
// begin SetLives ( i , 0 ) ;
21157: LD_VAR 0 1
21161: PPUSH
21162: LD_INT 0
21164: PPUSH
21165: CALL_OW 234
// end ;
21169: GO 21154
21171: POP
21172: POP
// end ;
21173: PPOPN 2
21175: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21176: LD_EXP 50
21180: PUSH
21181: LD_EXP 56
21185: AND
21186: IFFALSE 21270
21188: GO 21190
21190: DISABLE
21191: LD_INT 0
21193: PPUSH
21194: PPUSH
// begin enable ;
21195: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21196: LD_ADDR_VAR 0 2
21200: PUSH
21201: LD_INT 22
21203: PUSH
21204: LD_OWVAR 2
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 32
21215: PUSH
21216: LD_INT 3
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PPUSH
21227: CALL_OW 69
21231: ST_TO_ADDR
// if not tmp then
21232: LD_VAR 0 2
21236: NOT
21237: IFFALSE 21241
// exit ;
21239: GO 21270
// for i in tmp do
21241: LD_ADDR_VAR 0 1
21245: PUSH
21246: LD_VAR 0 2
21250: PUSH
21251: FOR_IN
21252: IFFALSE 21268
// begin SetLives ( i , 0 ) ;
21254: LD_VAR 0 1
21258: PPUSH
21259: LD_INT 0
21261: PPUSH
21262: CALL_OW 234
// end ;
21266: GO 21251
21268: POP
21269: POP
// end ;
21270: PPOPN 2
21272: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21273: LD_EXP 50
21277: PUSH
21278: LD_EXP 53
21282: AND
21283: IFFALSE 21376
21285: GO 21287
21287: DISABLE
21288: LD_INT 0
21290: PPUSH
// begin enable ;
21291: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21292: LD_ADDR_VAR 0 1
21296: PUSH
21297: LD_INT 22
21299: PUSH
21300: LD_OWVAR 2
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 2
21311: PUSH
21312: LD_INT 25
21314: PUSH
21315: LD_INT 5
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 25
21324: PUSH
21325: LD_INT 9
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 25
21334: PUSH
21335: LD_INT 8
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PPUSH
21352: CALL_OW 69
21356: PUSH
21357: FOR_IN
21358: IFFALSE 21374
// begin SetClass ( i , 1 ) ;
21360: LD_VAR 0 1
21364: PPUSH
21365: LD_INT 1
21367: PPUSH
21368: CALL_OW 336
// end ;
21372: GO 21357
21374: POP
21375: POP
// end ;
21376: PPOPN 1
21378: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21379: LD_EXP 50
21383: PUSH
21384: LD_EXP 54
21388: AND
21389: PUSH
21390: LD_OWVAR 65
21394: PUSH
21395: LD_INT 7
21397: LESS
21398: AND
21399: IFFALSE 21413
21401: GO 21403
21403: DISABLE
// begin enable ;
21404: ENABLE
// game_speed := 7 ;
21405: LD_ADDR_OWVAR 65
21409: PUSH
21410: LD_INT 7
21412: ST_TO_ADDR
// end ;
21413: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21414: LD_EXP 50
21418: PUSH
21419: LD_EXP 57
21423: AND
21424: IFFALSE 21626
21426: GO 21428
21428: DISABLE
21429: LD_INT 0
21431: PPUSH
21432: PPUSH
21433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21434: LD_ADDR_VAR 0 3
21438: PUSH
21439: LD_INT 81
21441: PUSH
21442: LD_OWVAR 2
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 21
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PPUSH
21465: CALL_OW 69
21469: ST_TO_ADDR
// if not tmp then
21470: LD_VAR 0 3
21474: NOT
21475: IFFALSE 21479
// exit ;
21477: GO 21626
// if tmp > 5 then
21479: LD_VAR 0 3
21483: PUSH
21484: LD_INT 5
21486: GREATER
21487: IFFALSE 21499
// k := 5 else
21489: LD_ADDR_VAR 0 2
21493: PUSH
21494: LD_INT 5
21496: ST_TO_ADDR
21497: GO 21509
// k := tmp ;
21499: LD_ADDR_VAR 0 2
21503: PUSH
21504: LD_VAR 0 3
21508: ST_TO_ADDR
// for i := 1 to k do
21509: LD_ADDR_VAR 0 1
21513: PUSH
21514: DOUBLE
21515: LD_INT 1
21517: DEC
21518: ST_TO_ADDR
21519: LD_VAR 0 2
21523: PUSH
21524: FOR_TO
21525: IFFALSE 21624
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21527: LD_VAR 0 3
21531: PUSH
21532: LD_VAR 0 1
21536: ARRAY
21537: PPUSH
21538: LD_VAR 0 1
21542: PUSH
21543: LD_INT 4
21545: MOD
21546: PUSH
21547: LD_INT 1
21549: PLUS
21550: PPUSH
21551: CALL_OW 259
21555: PUSH
21556: LD_INT 10
21558: LESS
21559: IFFALSE 21622
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21561: LD_VAR 0 3
21565: PUSH
21566: LD_VAR 0 1
21570: ARRAY
21571: PPUSH
21572: LD_VAR 0 1
21576: PUSH
21577: LD_INT 4
21579: MOD
21580: PUSH
21581: LD_INT 1
21583: PLUS
21584: PPUSH
21585: LD_VAR 0 3
21589: PUSH
21590: LD_VAR 0 1
21594: ARRAY
21595: PPUSH
21596: LD_VAR 0 1
21600: PUSH
21601: LD_INT 4
21603: MOD
21604: PUSH
21605: LD_INT 1
21607: PLUS
21608: PPUSH
21609: CALL_OW 259
21613: PUSH
21614: LD_INT 1
21616: PLUS
21617: PPUSH
21618: CALL_OW 237
21622: GO 21524
21624: POP
21625: POP
// end ;
21626: PPOPN 3
21628: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21629: LD_EXP 50
21633: PUSH
21634: LD_EXP 58
21638: AND
21639: IFFALSE 21659
21641: GO 21643
21643: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21644: LD_INT 4
21646: PPUSH
21647: LD_OWVAR 2
21651: PPUSH
21652: LD_INT 0
21654: PPUSH
21655: CALL_OW 324
21659: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21660: LD_EXP 50
21664: PUSH
21665: LD_EXP 87
21669: AND
21670: IFFALSE 21690
21672: GO 21674
21674: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21675: LD_INT 19
21677: PPUSH
21678: LD_OWVAR 2
21682: PPUSH
21683: LD_INT 0
21685: PPUSH
21686: CALL_OW 324
21690: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21691: LD_EXP 50
21695: PUSH
21696: LD_EXP 59
21700: AND
21701: IFFALSE 21803
21703: GO 21705
21705: DISABLE
21706: LD_INT 0
21708: PPUSH
21709: PPUSH
// begin enable ;
21710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_INT 22
21718: PUSH
21719: LD_OWVAR 2
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 2
21730: PUSH
21731: LD_INT 34
21733: PUSH
21734: LD_INT 11
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 34
21743: PUSH
21744: LD_INT 30
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PPUSH
21760: CALL_OW 69
21764: ST_TO_ADDR
// if not tmp then
21765: LD_VAR 0 2
21769: NOT
21770: IFFALSE 21774
// exit ;
21772: GO 21803
// for i in tmp do
21774: LD_ADDR_VAR 0 1
21778: PUSH
21779: LD_VAR 0 2
21783: PUSH
21784: FOR_IN
21785: IFFALSE 21801
// begin SetLives ( i , 0 ) ;
21787: LD_VAR 0 1
21791: PPUSH
21792: LD_INT 0
21794: PPUSH
21795: CALL_OW 234
// end ;
21799: GO 21784
21801: POP
21802: POP
// end ;
21803: PPOPN 2
21805: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21806: LD_EXP 50
21810: PUSH
21811: LD_EXP 60
21815: AND
21816: IFFALSE 21836
21818: GO 21820
21820: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21821: LD_INT 32
21823: PPUSH
21824: LD_OWVAR 2
21828: PPUSH
21829: LD_INT 0
21831: PPUSH
21832: CALL_OW 324
21836: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21837: LD_EXP 50
21841: PUSH
21842: LD_EXP 61
21846: AND
21847: IFFALSE 22028
21849: GO 21851
21851: DISABLE
21852: LD_INT 0
21854: PPUSH
21855: PPUSH
21856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21857: LD_ADDR_VAR 0 2
21861: PUSH
21862: LD_INT 22
21864: PUSH
21865: LD_OWVAR 2
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 33
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PPUSH
21888: CALL_OW 69
21892: ST_TO_ADDR
// if not tmp then
21893: LD_VAR 0 2
21897: NOT
21898: IFFALSE 21902
// exit ;
21900: GO 22028
// side := 0 ;
21902: LD_ADDR_VAR 0 3
21906: PUSH
21907: LD_INT 0
21909: ST_TO_ADDR
// for i := 1 to 8 do
21910: LD_ADDR_VAR 0 1
21914: PUSH
21915: DOUBLE
21916: LD_INT 1
21918: DEC
21919: ST_TO_ADDR
21920: LD_INT 8
21922: PUSH
21923: FOR_TO
21924: IFFALSE 21972
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21926: LD_OWVAR 2
21930: PUSH
21931: LD_VAR 0 1
21935: NONEQUAL
21936: PUSH
21937: LD_OWVAR 2
21941: PPUSH
21942: LD_VAR 0 1
21946: PPUSH
21947: CALL_OW 81
21951: PUSH
21952: LD_INT 2
21954: EQUAL
21955: AND
21956: IFFALSE 21970
// begin side := i ;
21958: LD_ADDR_VAR 0 3
21962: PUSH
21963: LD_VAR 0 1
21967: ST_TO_ADDR
// break ;
21968: GO 21972
// end ;
21970: GO 21923
21972: POP
21973: POP
// if not side then
21974: LD_VAR 0 3
21978: NOT
21979: IFFALSE 21983
// exit ;
21981: GO 22028
// for i := 1 to tmp do
21983: LD_ADDR_VAR 0 1
21987: PUSH
21988: DOUBLE
21989: LD_INT 1
21991: DEC
21992: ST_TO_ADDR
21993: LD_VAR 0 2
21997: PUSH
21998: FOR_TO
21999: IFFALSE 22026
// if Prob ( 60 ) then
22001: LD_INT 60
22003: PPUSH
22004: CALL_OW 13
22008: IFFALSE 22024
// SetSide ( i , side ) ;
22010: LD_VAR 0 1
22014: PPUSH
22015: LD_VAR 0 3
22019: PPUSH
22020: CALL_OW 235
22024: GO 21998
22026: POP
22027: POP
// end ;
22028: PPOPN 3
22030: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22031: LD_EXP 50
22035: PUSH
22036: LD_EXP 63
22040: AND
22041: IFFALSE 22160
22043: GO 22045
22045: DISABLE
22046: LD_INT 0
22048: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22049: LD_ADDR_VAR 0 1
22053: PUSH
22054: LD_INT 22
22056: PUSH
22057: LD_OWVAR 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 21
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 3
22078: PUSH
22079: LD_INT 23
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: PPUSH
22098: CALL_OW 69
22102: PUSH
22103: FOR_IN
22104: IFFALSE 22158
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22106: LD_VAR 0 1
22110: PPUSH
22111: CALL_OW 257
22115: PUSH
22116: LD_INT 1
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: LD_INT 3
22124: PUSH
22125: LD_INT 4
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: IN
22134: IFFALSE 22156
// SetClass ( un , rand ( 1 , 4 ) ) ;
22136: LD_VAR 0 1
22140: PPUSH
22141: LD_INT 1
22143: PPUSH
22144: LD_INT 4
22146: PPUSH
22147: CALL_OW 12
22151: PPUSH
22152: CALL_OW 336
22156: GO 22103
22158: POP
22159: POP
// end ;
22160: PPOPN 1
22162: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22163: LD_EXP 50
22167: PUSH
22168: LD_EXP 62
22172: AND
22173: IFFALSE 22252
22175: GO 22177
22177: DISABLE
22178: LD_INT 0
22180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22181: LD_ADDR_VAR 0 1
22185: PUSH
22186: LD_INT 22
22188: PUSH
22189: LD_OWVAR 2
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 21
22200: PUSH
22201: LD_INT 3
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PPUSH
22212: CALL_OW 69
22216: ST_TO_ADDR
// if not tmp then
22217: LD_VAR 0 1
22221: NOT
22222: IFFALSE 22226
// exit ;
22224: GO 22252
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22226: LD_VAR 0 1
22230: PUSH
22231: LD_INT 1
22233: PPUSH
22234: LD_VAR 0 1
22238: PPUSH
22239: CALL_OW 12
22243: ARRAY
22244: PPUSH
22245: LD_INT 100
22247: PPUSH
22248: CALL_OW 234
// end ;
22252: PPOPN 1
22254: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22255: LD_EXP 50
22259: PUSH
22260: LD_EXP 64
22264: AND
22265: IFFALSE 22363
22267: GO 22269
22269: DISABLE
22270: LD_INT 0
22272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22273: LD_ADDR_VAR 0 1
22277: PUSH
22278: LD_INT 22
22280: PUSH
22281: LD_OWVAR 2
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 21
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PPUSH
22304: CALL_OW 69
22308: ST_TO_ADDR
// if not tmp then
22309: LD_VAR 0 1
22313: NOT
22314: IFFALSE 22318
// exit ;
22316: GO 22363
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22318: LD_VAR 0 1
22322: PUSH
22323: LD_INT 1
22325: PPUSH
22326: LD_VAR 0 1
22330: PPUSH
22331: CALL_OW 12
22335: ARRAY
22336: PPUSH
22337: LD_INT 1
22339: PPUSH
22340: LD_INT 4
22342: PPUSH
22343: CALL_OW 12
22347: PPUSH
22348: LD_INT 3000
22350: PPUSH
22351: LD_INT 9000
22353: PPUSH
22354: CALL_OW 12
22358: PPUSH
22359: CALL_OW 492
// end ;
22363: PPOPN 1
22365: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22366: LD_EXP 50
22370: PUSH
22371: LD_EXP 65
22375: AND
22376: IFFALSE 22396
22378: GO 22380
22380: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22381: LD_INT 1
22383: PPUSH
22384: LD_OWVAR 2
22388: PPUSH
22389: LD_INT 0
22391: PPUSH
22392: CALL_OW 324
22396: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22397: LD_EXP 50
22401: PUSH
22402: LD_EXP 66
22406: AND
22407: IFFALSE 22490
22409: GO 22411
22411: DISABLE
22412: LD_INT 0
22414: PPUSH
22415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22416: LD_ADDR_VAR 0 2
22420: PUSH
22421: LD_INT 22
22423: PUSH
22424: LD_OWVAR 2
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 21
22435: PUSH
22436: LD_INT 3
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PPUSH
22447: CALL_OW 69
22451: ST_TO_ADDR
// if not tmp then
22452: LD_VAR 0 2
22456: NOT
22457: IFFALSE 22461
// exit ;
22459: GO 22490
// for i in tmp do
22461: LD_ADDR_VAR 0 1
22465: PUSH
22466: LD_VAR 0 2
22470: PUSH
22471: FOR_IN
22472: IFFALSE 22488
// SetBLevel ( i , 10 ) ;
22474: LD_VAR 0 1
22478: PPUSH
22479: LD_INT 10
22481: PPUSH
22482: CALL_OW 241
22486: GO 22471
22488: POP
22489: POP
// end ;
22490: PPOPN 2
22492: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22493: LD_EXP 50
22497: PUSH
22498: LD_EXP 67
22502: AND
22503: IFFALSE 22614
22505: GO 22507
22507: DISABLE
22508: LD_INT 0
22510: PPUSH
22511: PPUSH
22512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22513: LD_ADDR_VAR 0 3
22517: PUSH
22518: LD_INT 22
22520: PUSH
22521: LD_OWVAR 2
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 25
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PPUSH
22544: CALL_OW 69
22548: ST_TO_ADDR
// if not tmp then
22549: LD_VAR 0 3
22553: NOT
22554: IFFALSE 22558
// exit ;
22556: GO 22614
// un := tmp [ rand ( 1 , tmp ) ] ;
22558: LD_ADDR_VAR 0 2
22562: PUSH
22563: LD_VAR 0 3
22567: PUSH
22568: LD_INT 1
22570: PPUSH
22571: LD_VAR 0 3
22575: PPUSH
22576: CALL_OW 12
22580: ARRAY
22581: ST_TO_ADDR
// if Crawls ( un ) then
22582: LD_VAR 0 2
22586: PPUSH
22587: CALL_OW 318
22591: IFFALSE 22602
// ComWalk ( un ) ;
22593: LD_VAR 0 2
22597: PPUSH
22598: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22602: LD_VAR 0 2
22606: PPUSH
22607: LD_INT 5
22609: PPUSH
22610: CALL_OW 336
// end ;
22614: PPOPN 3
22616: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
22617: LD_EXP 50
22621: PUSH
22622: LD_EXP 68
22626: AND
22627: PUSH
22628: LD_OWVAR 67
22632: PUSH
22633: LD_INT 3
22635: LESS
22636: AND
22637: IFFALSE 22656
22639: GO 22641
22641: DISABLE
// Difficulty := Difficulty + 1 ;
22642: LD_ADDR_OWVAR 67
22646: PUSH
22647: LD_OWVAR 67
22651: PUSH
22652: LD_INT 1
22654: PLUS
22655: ST_TO_ADDR
22656: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22657: LD_EXP 50
22661: PUSH
22662: LD_EXP 69
22666: AND
22667: IFFALSE 22770
22669: GO 22671
22671: DISABLE
22672: LD_INT 0
22674: PPUSH
// begin for i := 1 to 5 do
22675: LD_ADDR_VAR 0 1
22679: PUSH
22680: DOUBLE
22681: LD_INT 1
22683: DEC
22684: ST_TO_ADDR
22685: LD_INT 5
22687: PUSH
22688: FOR_TO
22689: IFFALSE 22768
// begin uc_nation := nation_nature ;
22691: LD_ADDR_OWVAR 21
22695: PUSH
22696: LD_INT 0
22698: ST_TO_ADDR
// uc_side := 0 ;
22699: LD_ADDR_OWVAR 20
22703: PUSH
22704: LD_INT 0
22706: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22707: LD_ADDR_OWVAR 29
22711: PUSH
22712: LD_INT 12
22714: PUSH
22715: LD_INT 12
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: ST_TO_ADDR
// hc_agressivity := 20 ;
22722: LD_ADDR_OWVAR 35
22726: PUSH
22727: LD_INT 20
22729: ST_TO_ADDR
// hc_class := class_tiger ;
22730: LD_ADDR_OWVAR 28
22734: PUSH
22735: LD_INT 14
22737: ST_TO_ADDR
// hc_gallery :=  ;
22738: LD_ADDR_OWVAR 33
22742: PUSH
22743: LD_STRING 
22745: ST_TO_ADDR
// hc_name :=  ;
22746: LD_ADDR_OWVAR 26
22750: PUSH
22751: LD_STRING 
22753: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22754: CALL_OW 44
22758: PPUSH
22759: LD_INT 0
22761: PPUSH
22762: CALL_OW 51
// end ;
22766: GO 22688
22768: POP
22769: POP
// end ;
22770: PPOPN 1
22772: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22773: LD_EXP 50
22777: PUSH
22778: LD_EXP 70
22782: AND
22783: IFFALSE 22792
22785: GO 22787
22787: DISABLE
// StreamSibBomb ;
22788: CALL 22793 0 0
22792: END
// export function StreamSibBomb ; var i , x , y ; begin
22793: LD_INT 0
22795: PPUSH
22796: PPUSH
22797: PPUSH
22798: PPUSH
// result := false ;
22799: LD_ADDR_VAR 0 1
22803: PUSH
22804: LD_INT 0
22806: ST_TO_ADDR
// for i := 1 to 16 do
22807: LD_ADDR_VAR 0 2
22811: PUSH
22812: DOUBLE
22813: LD_INT 1
22815: DEC
22816: ST_TO_ADDR
22817: LD_INT 16
22819: PUSH
22820: FOR_TO
22821: IFFALSE 23020
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22823: LD_ADDR_VAR 0 3
22827: PUSH
22828: LD_INT 10
22830: PUSH
22831: LD_INT 20
22833: PUSH
22834: LD_INT 30
22836: PUSH
22837: LD_INT 40
22839: PUSH
22840: LD_INT 50
22842: PUSH
22843: LD_INT 60
22845: PUSH
22846: LD_INT 70
22848: PUSH
22849: LD_INT 80
22851: PUSH
22852: LD_INT 90
22854: PUSH
22855: LD_INT 100
22857: PUSH
22858: LD_INT 110
22860: PUSH
22861: LD_INT 120
22863: PUSH
22864: LD_INT 130
22866: PUSH
22867: LD_INT 140
22869: PUSH
22870: LD_INT 150
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 1
22892: PPUSH
22893: LD_INT 15
22895: PPUSH
22896: CALL_OW 12
22900: ARRAY
22901: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22902: LD_ADDR_VAR 0 4
22906: PUSH
22907: LD_INT 10
22909: PUSH
22910: LD_INT 20
22912: PUSH
22913: LD_INT 30
22915: PUSH
22916: LD_INT 40
22918: PUSH
22919: LD_INT 50
22921: PUSH
22922: LD_INT 60
22924: PUSH
22925: LD_INT 70
22927: PUSH
22928: LD_INT 80
22930: PUSH
22931: LD_INT 90
22933: PUSH
22934: LD_INT 100
22936: PUSH
22937: LD_INT 110
22939: PUSH
22940: LD_INT 120
22942: PUSH
22943: LD_INT 130
22945: PUSH
22946: LD_INT 140
22948: PUSH
22949: LD_INT 150
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 1
22971: PPUSH
22972: LD_INT 15
22974: PPUSH
22975: CALL_OW 12
22979: ARRAY
22980: ST_TO_ADDR
// if ValidHex ( x , y ) then
22981: LD_VAR 0 3
22985: PPUSH
22986: LD_VAR 0 4
22990: PPUSH
22991: CALL_OW 488
22995: IFFALSE 23018
// begin result := [ x , y ] ;
22997: LD_ADDR_VAR 0 1
23001: PUSH
23002: LD_VAR 0 3
23006: PUSH
23007: LD_VAR 0 4
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: ST_TO_ADDR
// break ;
23016: GO 23020
// end ; end ;
23018: GO 22820
23020: POP
23021: POP
// if result then
23022: LD_VAR 0 1
23026: IFFALSE 23086
// begin ToLua ( playSibBomb() ) ;
23028: LD_STRING playSibBomb()
23030: PPUSH
23031: CALL_OW 559
// wait ( 0 0$14 ) ;
23035: LD_INT 490
23037: PPUSH
23038: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23042: LD_VAR 0 1
23046: PUSH
23047: LD_INT 1
23049: ARRAY
23050: PPUSH
23051: LD_VAR 0 1
23055: PUSH
23056: LD_INT 2
23058: ARRAY
23059: PPUSH
23060: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23064: LD_VAR 0 1
23068: PUSH
23069: LD_INT 1
23071: ARRAY
23072: PPUSH
23073: LD_VAR 0 1
23077: PUSH
23078: LD_INT 2
23080: ARRAY
23081: PPUSH
23082: CALL_OW 429
// end ; end ;
23086: LD_VAR 0 1
23090: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23091: LD_EXP 50
23095: PUSH
23096: LD_EXP 72
23100: AND
23101: IFFALSE 23113
23103: GO 23105
23105: DISABLE
// YouLost (  ) ;
23106: LD_STRING 
23108: PPUSH
23109: CALL_OW 104
23113: END
// every 0 0$1 trigger StreamModeActive and sFog do
23114: LD_EXP 50
23118: PUSH
23119: LD_EXP 71
23123: AND
23124: IFFALSE 23138
23126: GO 23128
23128: DISABLE
// FogOff ( your_side ) ;
23129: LD_OWVAR 2
23133: PPUSH
23134: CALL_OW 344
23138: END
// every 0 0$1 trigger StreamModeActive and sSun do
23139: LD_EXP 50
23143: PUSH
23144: LD_EXP 73
23148: AND
23149: IFFALSE 23177
23151: GO 23153
23153: DISABLE
// begin solar_recharge_percent := 0 ;
23154: LD_ADDR_OWVAR 79
23158: PUSH
23159: LD_INT 0
23161: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23162: LD_INT 10500
23164: PPUSH
23165: CALL_OW 67
// solar_recharge_percent := 100 ;
23169: LD_ADDR_OWVAR 79
23173: PUSH
23174: LD_INT 100
23176: ST_TO_ADDR
// end ;
23177: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23178: LD_EXP 50
23182: PUSH
23183: LD_EXP 74
23187: AND
23188: IFFALSE 23427
23190: GO 23192
23192: DISABLE
23193: LD_INT 0
23195: PPUSH
23196: PPUSH
23197: PPUSH
// begin tmp := [ ] ;
23198: LD_ADDR_VAR 0 3
23202: PUSH
23203: EMPTY
23204: ST_TO_ADDR
// for i := 1 to 6 do
23205: LD_ADDR_VAR 0 1
23209: PUSH
23210: DOUBLE
23211: LD_INT 1
23213: DEC
23214: ST_TO_ADDR
23215: LD_INT 6
23217: PUSH
23218: FOR_TO
23219: IFFALSE 23324
// begin uc_nation := nation_nature ;
23221: LD_ADDR_OWVAR 21
23225: PUSH
23226: LD_INT 0
23228: ST_TO_ADDR
// uc_side := 0 ;
23229: LD_ADDR_OWVAR 20
23233: PUSH
23234: LD_INT 0
23236: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23237: LD_ADDR_OWVAR 29
23241: PUSH
23242: LD_INT 12
23244: PUSH
23245: LD_INT 12
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: ST_TO_ADDR
// hc_agressivity := 20 ;
23252: LD_ADDR_OWVAR 35
23256: PUSH
23257: LD_INT 20
23259: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23260: LD_ADDR_OWVAR 28
23264: PUSH
23265: LD_INT 17
23267: ST_TO_ADDR
// hc_gallery :=  ;
23268: LD_ADDR_OWVAR 33
23272: PUSH
23273: LD_STRING 
23275: ST_TO_ADDR
// hc_name :=  ;
23276: LD_ADDR_OWVAR 26
23280: PUSH
23281: LD_STRING 
23283: ST_TO_ADDR
// un := CreateHuman ;
23284: LD_ADDR_VAR 0 2
23288: PUSH
23289: CALL_OW 44
23293: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23294: LD_VAR 0 2
23298: PPUSH
23299: LD_INT 1
23301: PPUSH
23302: CALL_OW 51
// tmp := tmp ^ un ;
23306: LD_ADDR_VAR 0 3
23310: PUSH
23311: LD_VAR 0 3
23315: PUSH
23316: LD_VAR 0 2
23320: ADD
23321: ST_TO_ADDR
// end ;
23322: GO 23218
23324: POP
23325: POP
// repeat wait ( 0 0$1 ) ;
23326: LD_INT 35
23328: PPUSH
23329: CALL_OW 67
// for un in tmp do
23333: LD_ADDR_VAR 0 2
23337: PUSH
23338: LD_VAR 0 3
23342: PUSH
23343: FOR_IN
23344: IFFALSE 23418
// begin if IsDead ( un ) then
23346: LD_VAR 0 2
23350: PPUSH
23351: CALL_OW 301
23355: IFFALSE 23375
// begin tmp := tmp diff un ;
23357: LD_ADDR_VAR 0 3
23361: PUSH
23362: LD_VAR 0 3
23366: PUSH
23367: LD_VAR 0 2
23371: DIFF
23372: ST_TO_ADDR
// continue ;
23373: GO 23343
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23375: LD_VAR 0 2
23379: PPUSH
23380: LD_INT 3
23382: PUSH
23383: LD_INT 22
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PPUSH
23397: CALL_OW 69
23401: PPUSH
23402: LD_VAR 0 2
23406: PPUSH
23407: CALL_OW 74
23411: PPUSH
23412: CALL_OW 115
// end ;
23416: GO 23343
23418: POP
23419: POP
// until not tmp ;
23420: LD_VAR 0 3
23424: NOT
23425: IFFALSE 23326
// end ;
23427: PPOPN 3
23429: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23430: LD_EXP 50
23434: PUSH
23435: LD_EXP 75
23439: AND
23440: IFFALSE 23494
23442: GO 23444
23444: DISABLE
// begin ToLua ( displayTroll(); ) ;
23445: LD_STRING displayTroll();
23447: PPUSH
23448: CALL_OW 559
// wait ( 3 3$00 ) ;
23452: LD_INT 6300
23454: PPUSH
23455: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23459: LD_STRING hideTroll();
23461: PPUSH
23462: CALL_OW 559
// wait ( 1 1$00 ) ;
23466: LD_INT 2100
23468: PPUSH
23469: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23473: LD_STRING displayTroll();
23475: PPUSH
23476: CALL_OW 559
// wait ( 1 1$00 ) ;
23480: LD_INT 2100
23482: PPUSH
23483: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23487: LD_STRING hideTroll();
23489: PPUSH
23490: CALL_OW 559
// end ;
23494: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23495: LD_EXP 50
23499: PUSH
23500: LD_EXP 76
23504: AND
23505: IFFALSE 23568
23507: GO 23509
23509: DISABLE
23510: LD_INT 0
23512: PPUSH
// begin p := 0 ;
23513: LD_ADDR_VAR 0 1
23517: PUSH
23518: LD_INT 0
23520: ST_TO_ADDR
// repeat game_speed := 1 ;
23521: LD_ADDR_OWVAR 65
23525: PUSH
23526: LD_INT 1
23528: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23529: LD_INT 35
23531: PPUSH
23532: CALL_OW 67
// p := p + 1 ;
23536: LD_ADDR_VAR 0 1
23540: PUSH
23541: LD_VAR 0 1
23545: PUSH
23546: LD_INT 1
23548: PLUS
23549: ST_TO_ADDR
// until p >= 60 ;
23550: LD_VAR 0 1
23554: PUSH
23555: LD_INT 60
23557: GREATEREQUAL
23558: IFFALSE 23521
// game_speed := 4 ;
23560: LD_ADDR_OWVAR 65
23564: PUSH
23565: LD_INT 4
23567: ST_TO_ADDR
// end ;
23568: PPOPN 1
23570: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23571: LD_EXP 50
23575: PUSH
23576: LD_EXP 77
23580: AND
23581: IFFALSE 23727
23583: GO 23585
23585: DISABLE
23586: LD_INT 0
23588: PPUSH
23589: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23590: LD_ADDR_VAR 0 1
23594: PUSH
23595: LD_INT 22
23597: PUSH
23598: LD_OWVAR 2
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 2
23609: PUSH
23610: LD_INT 30
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 30
23622: PUSH
23623: LD_INT 1
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PPUSH
23639: CALL_OW 69
23643: ST_TO_ADDR
// if not depot then
23644: LD_VAR 0 1
23648: NOT
23649: IFFALSE 23653
// exit ;
23651: GO 23727
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23653: LD_ADDR_VAR 0 2
23657: PUSH
23658: LD_VAR 0 1
23662: PUSH
23663: LD_INT 1
23665: PPUSH
23666: LD_VAR 0 1
23670: PPUSH
23671: CALL_OW 12
23675: ARRAY
23676: PPUSH
23677: CALL_OW 274
23681: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23682: LD_VAR 0 2
23686: PPUSH
23687: LD_INT 1
23689: PPUSH
23690: LD_INT 0
23692: PPUSH
23693: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23697: LD_VAR 0 2
23701: PPUSH
23702: LD_INT 2
23704: PPUSH
23705: LD_INT 0
23707: PPUSH
23708: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23712: LD_VAR 0 2
23716: PPUSH
23717: LD_INT 3
23719: PPUSH
23720: LD_INT 0
23722: PPUSH
23723: CALL_OW 277
// end ;
23727: PPOPN 2
23729: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23730: LD_EXP 50
23734: PUSH
23735: LD_EXP 78
23739: AND
23740: IFFALSE 23837
23742: GO 23744
23744: DISABLE
23745: LD_INT 0
23747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23748: LD_ADDR_VAR 0 1
23752: PUSH
23753: LD_INT 22
23755: PUSH
23756: LD_OWVAR 2
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 21
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 3
23777: PUSH
23778: LD_INT 23
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: PPUSH
23797: CALL_OW 69
23801: ST_TO_ADDR
// if not tmp then
23802: LD_VAR 0 1
23806: NOT
23807: IFFALSE 23811
// exit ;
23809: GO 23837
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23811: LD_VAR 0 1
23815: PUSH
23816: LD_INT 1
23818: PPUSH
23819: LD_VAR 0 1
23823: PPUSH
23824: CALL_OW 12
23828: ARRAY
23829: PPUSH
23830: LD_INT 200
23832: PPUSH
23833: CALL_OW 234
// end ;
23837: PPOPN 1
23839: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23840: LD_EXP 50
23844: PUSH
23845: LD_EXP 79
23849: AND
23850: IFFALSE 23929
23852: GO 23854
23854: DISABLE
23855: LD_INT 0
23857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23858: LD_ADDR_VAR 0 1
23862: PUSH
23863: LD_INT 22
23865: PUSH
23866: LD_OWVAR 2
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 21
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PPUSH
23889: CALL_OW 69
23893: ST_TO_ADDR
// if not tmp then
23894: LD_VAR 0 1
23898: NOT
23899: IFFALSE 23903
// exit ;
23901: GO 23929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23903: LD_VAR 0 1
23907: PUSH
23908: LD_INT 1
23910: PPUSH
23911: LD_VAR 0 1
23915: PPUSH
23916: CALL_OW 12
23920: ARRAY
23921: PPUSH
23922: LD_INT 60
23924: PPUSH
23925: CALL_OW 234
// end ;
23929: PPOPN 1
23931: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23932: LD_EXP 50
23936: PUSH
23937: LD_EXP 80
23941: AND
23942: IFFALSE 24041
23944: GO 23946
23946: DISABLE
23947: LD_INT 0
23949: PPUSH
23950: PPUSH
// begin enable ;
23951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23952: LD_ADDR_VAR 0 1
23956: PUSH
23957: LD_INT 22
23959: PUSH
23960: LD_OWVAR 2
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 61
23971: PUSH
23972: EMPTY
23973: LIST
23974: PUSH
23975: LD_INT 33
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: LIST
23989: PPUSH
23990: CALL_OW 69
23994: ST_TO_ADDR
// if not tmp then
23995: LD_VAR 0 1
23999: NOT
24000: IFFALSE 24004
// exit ;
24002: GO 24041
// for i in tmp do
24004: LD_ADDR_VAR 0 2
24008: PUSH
24009: LD_VAR 0 1
24013: PUSH
24014: FOR_IN
24015: IFFALSE 24039
// if IsControledBy ( i ) then
24017: LD_VAR 0 2
24021: PPUSH
24022: CALL_OW 312
24026: IFFALSE 24037
// ComUnlink ( i ) ;
24028: LD_VAR 0 2
24032: PPUSH
24033: CALL_OW 136
24037: GO 24014
24039: POP
24040: POP
// end ;
24041: PPOPN 2
24043: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24044: LD_EXP 50
24048: PUSH
24049: LD_EXP 81
24053: AND
24054: IFFALSE 24194
24056: GO 24058
24058: DISABLE
24059: LD_INT 0
24061: PPUSH
24062: PPUSH
// begin ToLua ( displayPowell(); ) ;
24063: LD_STRING displayPowell();
24065: PPUSH
24066: CALL_OW 559
// uc_side := 0 ;
24070: LD_ADDR_OWVAR 20
24074: PUSH
24075: LD_INT 0
24077: ST_TO_ADDR
// uc_nation := 2 ;
24078: LD_ADDR_OWVAR 21
24082: PUSH
24083: LD_INT 2
24085: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24086: LD_ADDR_OWVAR 37
24090: PUSH
24091: LD_INT 14
24093: ST_TO_ADDR
// vc_engine := engine_siberite ;
24094: LD_ADDR_OWVAR 39
24098: PUSH
24099: LD_INT 3
24101: ST_TO_ADDR
// vc_control := control_apeman ;
24102: LD_ADDR_OWVAR 38
24106: PUSH
24107: LD_INT 5
24109: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24110: LD_ADDR_OWVAR 40
24114: PUSH
24115: LD_INT 29
24117: ST_TO_ADDR
// un := CreateVehicle ;
24118: LD_ADDR_VAR 0 2
24122: PUSH
24123: CALL_OW 45
24127: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24128: LD_VAR 0 2
24132: PPUSH
24133: LD_INT 1
24135: PPUSH
24136: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24140: LD_INT 35
24142: PPUSH
24143: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24147: LD_VAR 0 2
24151: PPUSH
24152: LD_INT 22
24154: PUSH
24155: LD_OWVAR 2
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PPUSH
24164: CALL_OW 69
24168: PPUSH
24169: LD_VAR 0 2
24173: PPUSH
24174: CALL_OW 74
24178: PPUSH
24179: CALL_OW 115
// until IsDead ( un ) ;
24183: LD_VAR 0 2
24187: PPUSH
24188: CALL_OW 301
24192: IFFALSE 24140
// end ;
24194: PPOPN 2
24196: END
// every 0 0$1 trigger StreamModeActive and sStu do
24197: LD_EXP 50
24201: PUSH
24202: LD_EXP 89
24206: AND
24207: IFFALSE 24223
24209: GO 24211
24211: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24212: LD_STRING displayStucuk();
24214: PPUSH
24215: CALL_OW 559
// ResetFog ;
24219: CALL_OW 335
// end ;
24223: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24224: LD_EXP 50
24228: PUSH
24229: LD_EXP 82
24233: AND
24234: IFFALSE 24375
24236: GO 24238
24238: DISABLE
24239: LD_INT 0
24241: PPUSH
24242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24243: LD_ADDR_VAR 0 2
24247: PUSH
24248: LD_INT 22
24250: PUSH
24251: LD_OWVAR 2
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 21
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PPUSH
24274: CALL_OW 69
24278: ST_TO_ADDR
// if not tmp then
24279: LD_VAR 0 2
24283: NOT
24284: IFFALSE 24288
// exit ;
24286: GO 24375
// un := tmp [ rand ( 1 , tmp ) ] ;
24288: LD_ADDR_VAR 0 1
24292: PUSH
24293: LD_VAR 0 2
24297: PUSH
24298: LD_INT 1
24300: PPUSH
24301: LD_VAR 0 2
24305: PPUSH
24306: CALL_OW 12
24310: ARRAY
24311: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24312: LD_VAR 0 1
24316: PPUSH
24317: LD_INT 0
24319: PPUSH
24320: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24324: LD_VAR 0 1
24328: PPUSH
24329: LD_OWVAR 3
24333: PUSH
24334: LD_VAR 0 1
24338: DIFF
24339: PPUSH
24340: LD_VAR 0 1
24344: PPUSH
24345: CALL_OW 74
24349: PPUSH
24350: CALL_OW 115
// wait ( 0 0$20 ) ;
24354: LD_INT 700
24356: PPUSH
24357: CALL_OW 67
// SetSide ( un , your_side ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: LD_OWVAR 2
24370: PPUSH
24371: CALL_OW 235
// end ;
24375: PPOPN 2
24377: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24378: LD_EXP 50
24382: PUSH
24383: LD_EXP 83
24387: AND
24388: IFFALSE 24494
24390: GO 24392
24392: DISABLE
24393: LD_INT 0
24395: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24396: LD_ADDR_VAR 0 1
24400: PUSH
24401: LD_INT 22
24403: PUSH
24404: LD_OWVAR 2
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 2
24415: PUSH
24416: LD_INT 30
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 30
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: LIST
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PPUSH
24445: CALL_OW 69
24449: ST_TO_ADDR
// if not depot then
24450: LD_VAR 0 1
24454: NOT
24455: IFFALSE 24459
// exit ;
24457: GO 24494
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24459: LD_VAR 0 1
24463: PUSH
24464: LD_INT 1
24466: ARRAY
24467: PPUSH
24468: CALL_OW 250
24472: PPUSH
24473: LD_VAR 0 1
24477: PUSH
24478: LD_INT 1
24480: ARRAY
24481: PPUSH
24482: CALL_OW 251
24486: PPUSH
24487: LD_INT 70
24489: PPUSH
24490: CALL_OW 495
// end ;
24494: PPOPN 1
24496: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24497: LD_EXP 50
24501: PUSH
24502: LD_EXP 84
24506: AND
24507: IFFALSE 24718
24509: GO 24511
24511: DISABLE
24512: LD_INT 0
24514: PPUSH
24515: PPUSH
24516: PPUSH
24517: PPUSH
24518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24519: LD_ADDR_VAR 0 5
24523: PUSH
24524: LD_INT 22
24526: PUSH
24527: LD_OWVAR 2
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 21
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PPUSH
24550: CALL_OW 69
24554: ST_TO_ADDR
// if not tmp then
24555: LD_VAR 0 5
24559: NOT
24560: IFFALSE 24564
// exit ;
24562: GO 24718
// for i in tmp do
24564: LD_ADDR_VAR 0 1
24568: PUSH
24569: LD_VAR 0 5
24573: PUSH
24574: FOR_IN
24575: IFFALSE 24716
// begin d := rand ( 0 , 5 ) ;
24577: LD_ADDR_VAR 0 4
24581: PUSH
24582: LD_INT 0
24584: PPUSH
24585: LD_INT 5
24587: PPUSH
24588: CALL_OW 12
24592: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24593: LD_ADDR_VAR 0 2
24597: PUSH
24598: LD_VAR 0 1
24602: PPUSH
24603: CALL_OW 250
24607: PPUSH
24608: LD_VAR 0 4
24612: PPUSH
24613: LD_INT 3
24615: PPUSH
24616: LD_INT 12
24618: PPUSH
24619: CALL_OW 12
24623: PPUSH
24624: CALL_OW 272
24628: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24629: LD_ADDR_VAR 0 3
24633: PUSH
24634: LD_VAR 0 1
24638: PPUSH
24639: CALL_OW 251
24643: PPUSH
24644: LD_VAR 0 4
24648: PPUSH
24649: LD_INT 3
24651: PPUSH
24652: LD_INT 12
24654: PPUSH
24655: CALL_OW 12
24659: PPUSH
24660: CALL_OW 273
24664: ST_TO_ADDR
// if ValidHex ( x , y ) then
24665: LD_VAR 0 2
24669: PPUSH
24670: LD_VAR 0 3
24674: PPUSH
24675: CALL_OW 488
24679: IFFALSE 24714
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24681: LD_VAR 0 1
24685: PPUSH
24686: LD_VAR 0 2
24690: PPUSH
24691: LD_VAR 0 3
24695: PPUSH
24696: LD_INT 3
24698: PPUSH
24699: LD_INT 6
24701: PPUSH
24702: CALL_OW 12
24706: PPUSH
24707: LD_INT 1
24709: PPUSH
24710: CALL_OW 483
// end ;
24714: GO 24574
24716: POP
24717: POP
// end ;
24718: PPOPN 5
24720: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24721: LD_EXP 50
24725: PUSH
24726: LD_EXP 85
24730: AND
24731: IFFALSE 24825
24733: GO 24735
24735: DISABLE
24736: LD_INT 0
24738: PPUSH
24739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24740: LD_ADDR_VAR 0 2
24744: PUSH
24745: LD_INT 22
24747: PUSH
24748: LD_OWVAR 2
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 32
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 21
24769: PUSH
24770: LD_INT 2
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: LIST
24781: PPUSH
24782: CALL_OW 69
24786: ST_TO_ADDR
// if not tmp then
24787: LD_VAR 0 2
24791: NOT
24792: IFFALSE 24796
// exit ;
24794: GO 24825
// for i in tmp do
24796: LD_ADDR_VAR 0 1
24800: PUSH
24801: LD_VAR 0 2
24805: PUSH
24806: FOR_IN
24807: IFFALSE 24823
// SetFuel ( i , 0 ) ;
24809: LD_VAR 0 1
24813: PPUSH
24814: LD_INT 0
24816: PPUSH
24817: CALL_OW 240
24821: GO 24806
24823: POP
24824: POP
// end ;
24825: PPOPN 2
24827: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24828: LD_EXP 50
24832: PUSH
24833: LD_EXP 86
24837: AND
24838: IFFALSE 24904
24840: GO 24842
24842: DISABLE
24843: LD_INT 0
24845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24846: LD_ADDR_VAR 0 1
24850: PUSH
24851: LD_INT 22
24853: PUSH
24854: LD_OWVAR 2
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 30
24865: PUSH
24866: LD_INT 29
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PPUSH
24877: CALL_OW 69
24881: ST_TO_ADDR
// if not tmp then
24882: LD_VAR 0 1
24886: NOT
24887: IFFALSE 24891
// exit ;
24889: GO 24904
// DestroyUnit ( tmp [ 1 ] ) ;
24891: LD_VAR 0 1
24895: PUSH
24896: LD_INT 1
24898: ARRAY
24899: PPUSH
24900: CALL_OW 65
// end ;
24904: PPOPN 1
24906: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24907: LD_EXP 50
24911: PUSH
24912: LD_EXP 88
24916: AND
24917: IFFALSE 25046
24919: GO 24921
24921: DISABLE
24922: LD_INT 0
24924: PPUSH
// begin uc_side := 0 ;
24925: LD_ADDR_OWVAR 20
24929: PUSH
24930: LD_INT 0
24932: ST_TO_ADDR
// uc_nation := nation_arabian ;
24933: LD_ADDR_OWVAR 21
24937: PUSH
24938: LD_INT 2
24940: ST_TO_ADDR
// hc_gallery :=  ;
24941: LD_ADDR_OWVAR 33
24945: PUSH
24946: LD_STRING 
24948: ST_TO_ADDR
// hc_name :=  ;
24949: LD_ADDR_OWVAR 26
24953: PUSH
24954: LD_STRING 
24956: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24957: LD_INT 1
24959: PPUSH
24960: LD_INT 11
24962: PPUSH
24963: LD_INT 10
24965: PPUSH
24966: CALL_OW 380
// un := CreateHuman ;
24970: LD_ADDR_VAR 0 1
24974: PUSH
24975: CALL_OW 44
24979: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24980: LD_VAR 0 1
24984: PPUSH
24985: LD_INT 1
24987: PPUSH
24988: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24992: LD_INT 35
24994: PPUSH
24995: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24999: LD_VAR 0 1
25003: PPUSH
25004: LD_INT 22
25006: PUSH
25007: LD_OWVAR 2
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PPUSH
25016: CALL_OW 69
25020: PPUSH
25021: LD_VAR 0 1
25025: PPUSH
25026: CALL_OW 74
25030: PPUSH
25031: CALL_OW 115
// until IsDead ( un ) ;
25035: LD_VAR 0 1
25039: PPUSH
25040: CALL_OW 301
25044: IFFALSE 24992
// end ;
25046: PPOPN 1
25048: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25049: LD_EXP 50
25053: PUSH
25054: LD_EXP 90
25058: AND
25059: IFFALSE 25071
25061: GO 25063
25063: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25064: LD_STRING earthquake(getX(game), 0, 32)
25066: PPUSH
25067: CALL_OW 559
25071: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25072: LD_EXP 50
25076: PUSH
25077: LD_EXP 91
25081: AND
25082: IFFALSE 25173
25084: GO 25086
25086: DISABLE
25087: LD_INT 0
25089: PPUSH
// begin enable ;
25090: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25091: LD_ADDR_VAR 0 1
25095: PUSH
25096: LD_INT 22
25098: PUSH
25099: LD_OWVAR 2
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 21
25110: PUSH
25111: LD_INT 2
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 33
25120: PUSH
25121: LD_INT 3
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: LIST
25132: PPUSH
25133: CALL_OW 69
25137: ST_TO_ADDR
// if not tmp then
25138: LD_VAR 0 1
25142: NOT
25143: IFFALSE 25147
// exit ;
25145: GO 25173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25147: LD_VAR 0 1
25151: PUSH
25152: LD_INT 1
25154: PPUSH
25155: LD_VAR 0 1
25159: PPUSH
25160: CALL_OW 12
25164: ARRAY
25165: PPUSH
25166: LD_INT 1
25168: PPUSH
25169: CALL_OW 234
// end ;
25173: PPOPN 1
25175: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25176: LD_EXP 50
25180: PUSH
25181: LD_EXP 92
25185: AND
25186: IFFALSE 25327
25188: GO 25190
25190: DISABLE
25191: LD_INT 0
25193: PPUSH
25194: PPUSH
25195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25196: LD_ADDR_VAR 0 3
25200: PUSH
25201: LD_INT 22
25203: PUSH
25204: LD_OWVAR 2
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 25
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PPUSH
25227: CALL_OW 69
25231: ST_TO_ADDR
// if not tmp then
25232: LD_VAR 0 3
25236: NOT
25237: IFFALSE 25241
// exit ;
25239: GO 25327
// un := tmp [ rand ( 1 , tmp ) ] ;
25241: LD_ADDR_VAR 0 2
25245: PUSH
25246: LD_VAR 0 3
25250: PUSH
25251: LD_INT 1
25253: PPUSH
25254: LD_VAR 0 3
25258: PPUSH
25259: CALL_OW 12
25263: ARRAY
25264: ST_TO_ADDR
// if Crawls ( un ) then
25265: LD_VAR 0 2
25269: PPUSH
25270: CALL_OW 318
25274: IFFALSE 25285
// ComWalk ( un ) ;
25276: LD_VAR 0 2
25280: PPUSH
25281: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25285: LD_VAR 0 2
25289: PPUSH
25290: LD_INT 9
25292: PPUSH
25293: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25297: LD_INT 28
25299: PPUSH
25300: LD_OWVAR 2
25304: PPUSH
25305: LD_INT 2
25307: PPUSH
25308: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25312: LD_INT 29
25314: PPUSH
25315: LD_OWVAR 2
25319: PPUSH
25320: LD_INT 2
25322: PPUSH
25323: CALL_OW 322
// end ;
25327: PPOPN 3
25329: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25330: LD_EXP 50
25334: PUSH
25335: LD_EXP 93
25339: AND
25340: IFFALSE 25451
25342: GO 25344
25344: DISABLE
25345: LD_INT 0
25347: PPUSH
25348: PPUSH
25349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25350: LD_ADDR_VAR 0 3
25354: PUSH
25355: LD_INT 22
25357: PUSH
25358: LD_OWVAR 2
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 25
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PPUSH
25381: CALL_OW 69
25385: ST_TO_ADDR
// if not tmp then
25386: LD_VAR 0 3
25390: NOT
25391: IFFALSE 25395
// exit ;
25393: GO 25451
// un := tmp [ rand ( 1 , tmp ) ] ;
25395: LD_ADDR_VAR 0 2
25399: PUSH
25400: LD_VAR 0 3
25404: PUSH
25405: LD_INT 1
25407: PPUSH
25408: LD_VAR 0 3
25412: PPUSH
25413: CALL_OW 12
25417: ARRAY
25418: ST_TO_ADDR
// if Crawls ( un ) then
25419: LD_VAR 0 2
25423: PPUSH
25424: CALL_OW 318
25428: IFFALSE 25439
// ComWalk ( un ) ;
25430: LD_VAR 0 2
25434: PPUSH
25435: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25439: LD_VAR 0 2
25443: PPUSH
25444: LD_INT 8
25446: PPUSH
25447: CALL_OW 336
// end ;
25451: PPOPN 3
25453: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25454: LD_EXP 50
25458: PUSH
25459: LD_EXP 94
25463: AND
25464: IFFALSE 25608
25466: GO 25468
25468: DISABLE
25469: LD_INT 0
25471: PPUSH
25472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25473: LD_ADDR_VAR 0 2
25477: PUSH
25478: LD_INT 22
25480: PUSH
25481: LD_OWVAR 2
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 21
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 34
25505: PUSH
25506: LD_INT 12
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 34
25515: PUSH
25516: LD_INT 51
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 34
25525: PUSH
25526: LD_INT 32
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: LIST
25543: PPUSH
25544: CALL_OW 69
25548: ST_TO_ADDR
// if not tmp then
25549: LD_VAR 0 2
25553: NOT
25554: IFFALSE 25558
// exit ;
25556: GO 25608
// for i in tmp do
25558: LD_ADDR_VAR 0 1
25562: PUSH
25563: LD_VAR 0 2
25567: PUSH
25568: FOR_IN
25569: IFFALSE 25606
// if GetCargo ( i , mat_artifact ) = 0 then
25571: LD_VAR 0 1
25575: PPUSH
25576: LD_INT 4
25578: PPUSH
25579: CALL_OW 289
25583: PUSH
25584: LD_INT 0
25586: EQUAL
25587: IFFALSE 25604
// SetCargo ( i , mat_siberit , 100 ) ;
25589: LD_VAR 0 1
25593: PPUSH
25594: LD_INT 3
25596: PPUSH
25597: LD_INT 100
25599: PPUSH
25600: CALL_OW 290
25604: GO 25568
25606: POP
25607: POP
// end ;
25608: PPOPN 2
25610: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25611: LD_EXP 50
25615: PUSH
25616: LD_EXP 95
25620: AND
25621: IFFALSE 25804
25623: GO 25625
25625: DISABLE
25626: LD_INT 0
25628: PPUSH
25629: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25630: LD_ADDR_VAR 0 2
25634: PUSH
25635: LD_INT 22
25637: PUSH
25638: LD_OWVAR 2
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PPUSH
25647: CALL_OW 69
25651: ST_TO_ADDR
// if not tmp then
25652: LD_VAR 0 2
25656: NOT
25657: IFFALSE 25661
// exit ;
25659: GO 25804
// for i := 1 to 2 do
25661: LD_ADDR_VAR 0 1
25665: PUSH
25666: DOUBLE
25667: LD_INT 1
25669: DEC
25670: ST_TO_ADDR
25671: LD_INT 2
25673: PUSH
25674: FOR_TO
25675: IFFALSE 25802
// begin uc_side := your_side ;
25677: LD_ADDR_OWVAR 20
25681: PUSH
25682: LD_OWVAR 2
25686: ST_TO_ADDR
// uc_nation := nation_american ;
25687: LD_ADDR_OWVAR 21
25691: PUSH
25692: LD_INT 1
25694: ST_TO_ADDR
// vc_chassis := us_morphling ;
25695: LD_ADDR_OWVAR 37
25699: PUSH
25700: LD_INT 5
25702: ST_TO_ADDR
// vc_engine := engine_siberite ;
25703: LD_ADDR_OWVAR 39
25707: PUSH
25708: LD_INT 3
25710: ST_TO_ADDR
// vc_control := control_computer ;
25711: LD_ADDR_OWVAR 38
25715: PUSH
25716: LD_INT 3
25718: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25719: LD_ADDR_OWVAR 40
25723: PUSH
25724: LD_INT 10
25726: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25727: LD_VAR 0 2
25731: PUSH
25732: LD_INT 1
25734: ARRAY
25735: PPUSH
25736: CALL_OW 310
25740: NOT
25741: IFFALSE 25788
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25743: CALL_OW 45
25747: PPUSH
25748: LD_VAR 0 2
25752: PUSH
25753: LD_INT 1
25755: ARRAY
25756: PPUSH
25757: CALL_OW 250
25761: PPUSH
25762: LD_VAR 0 2
25766: PUSH
25767: LD_INT 1
25769: ARRAY
25770: PPUSH
25771: CALL_OW 251
25775: PPUSH
25776: LD_INT 12
25778: PPUSH
25779: LD_INT 1
25781: PPUSH
25782: CALL_OW 50
25786: GO 25800
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25788: CALL_OW 45
25792: PPUSH
25793: LD_INT 1
25795: PPUSH
25796: CALL_OW 51
// end ;
25800: GO 25674
25802: POP
25803: POP
// end ;
25804: PPOPN 2
25806: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25807: LD_EXP 50
25811: PUSH
25812: LD_EXP 96
25816: AND
25817: IFFALSE 26039
25819: GO 25821
25821: DISABLE
25822: LD_INT 0
25824: PPUSH
25825: PPUSH
25826: PPUSH
25827: PPUSH
25828: PPUSH
25829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25830: LD_ADDR_VAR 0 6
25834: PUSH
25835: LD_INT 22
25837: PUSH
25838: LD_OWVAR 2
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 21
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 3
25859: PUSH
25860: LD_INT 23
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: PPUSH
25879: CALL_OW 69
25883: ST_TO_ADDR
// if not tmp then
25884: LD_VAR 0 6
25888: NOT
25889: IFFALSE 25893
// exit ;
25891: GO 26039
// s1 := rand ( 1 , 4 ) ;
25893: LD_ADDR_VAR 0 2
25897: PUSH
25898: LD_INT 1
25900: PPUSH
25901: LD_INT 4
25903: PPUSH
25904: CALL_OW 12
25908: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25909: LD_ADDR_VAR 0 4
25913: PUSH
25914: LD_VAR 0 6
25918: PUSH
25919: LD_INT 1
25921: ARRAY
25922: PPUSH
25923: LD_VAR 0 2
25927: PPUSH
25928: CALL_OW 259
25932: ST_TO_ADDR
// if s1 = 1 then
25933: LD_VAR 0 2
25937: PUSH
25938: LD_INT 1
25940: EQUAL
25941: IFFALSE 25961
// s2 := rand ( 2 , 4 ) else
25943: LD_ADDR_VAR 0 3
25947: PUSH
25948: LD_INT 2
25950: PPUSH
25951: LD_INT 4
25953: PPUSH
25954: CALL_OW 12
25958: ST_TO_ADDR
25959: GO 25969
// s2 := 1 ;
25961: LD_ADDR_VAR 0 3
25965: PUSH
25966: LD_INT 1
25968: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25969: LD_ADDR_VAR 0 5
25973: PUSH
25974: LD_VAR 0 6
25978: PUSH
25979: LD_INT 1
25981: ARRAY
25982: PPUSH
25983: LD_VAR 0 3
25987: PPUSH
25988: CALL_OW 259
25992: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25993: LD_VAR 0 6
25997: PUSH
25998: LD_INT 1
26000: ARRAY
26001: PPUSH
26002: LD_VAR 0 2
26006: PPUSH
26007: LD_VAR 0 5
26011: PPUSH
26012: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26016: LD_VAR 0 6
26020: PUSH
26021: LD_INT 1
26023: ARRAY
26024: PPUSH
26025: LD_VAR 0 3
26029: PPUSH
26030: LD_VAR 0 4
26034: PPUSH
26035: CALL_OW 237
// end ;
26039: PPOPN 6
26041: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26042: LD_EXP 50
26046: PUSH
26047: LD_EXP 97
26051: AND
26052: IFFALSE 26131
26054: GO 26056
26056: DISABLE
26057: LD_INT 0
26059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26060: LD_ADDR_VAR 0 1
26064: PUSH
26065: LD_INT 22
26067: PUSH
26068: LD_OWVAR 2
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 30
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PPUSH
26091: CALL_OW 69
26095: ST_TO_ADDR
// if not tmp then
26096: LD_VAR 0 1
26100: NOT
26101: IFFALSE 26105
// exit ;
26103: GO 26131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26105: LD_VAR 0 1
26109: PUSH
26110: LD_INT 1
26112: PPUSH
26113: LD_VAR 0 1
26117: PPUSH
26118: CALL_OW 12
26122: ARRAY
26123: PPUSH
26124: LD_INT 1
26126: PPUSH
26127: CALL_OW 234
// end ;
26131: PPOPN 1
26133: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26134: LD_EXP 50
26138: PUSH
26139: LD_EXP 98
26143: AND
26144: IFFALSE 26256
26146: GO 26148
26148: DISABLE
26149: LD_INT 0
26151: PPUSH
26152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26153: LD_ADDR_VAR 0 2
26157: PUSH
26158: LD_INT 22
26160: PUSH
26161: LD_OWVAR 2
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 2
26172: PUSH
26173: LD_INT 30
26175: PUSH
26176: LD_INT 27
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 30
26185: PUSH
26186: LD_INT 26
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 30
26195: PUSH
26196: LD_INT 28
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PPUSH
26213: CALL_OW 69
26217: ST_TO_ADDR
// if not tmp then
26218: LD_VAR 0 2
26222: NOT
26223: IFFALSE 26227
// exit ;
26225: GO 26256
// for i in tmp do
26227: LD_ADDR_VAR 0 1
26231: PUSH
26232: LD_VAR 0 2
26236: PUSH
26237: FOR_IN
26238: IFFALSE 26254
// SetLives ( i , 1 ) ;
26240: LD_VAR 0 1
26244: PPUSH
26245: LD_INT 1
26247: PPUSH
26248: CALL_OW 234
26252: GO 26237
26254: POP
26255: POP
// end ;
26256: PPOPN 2
26258: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26259: LD_EXP 50
26263: PUSH
26264: LD_EXP 99
26268: AND
26269: IFFALSE 26543
26271: GO 26273
26273: DISABLE
26274: LD_INT 0
26276: PPUSH
26277: PPUSH
26278: PPUSH
// begin i := rand ( 1 , 7 ) ;
26279: LD_ADDR_VAR 0 1
26283: PUSH
26284: LD_INT 1
26286: PPUSH
26287: LD_INT 7
26289: PPUSH
26290: CALL_OW 12
26294: ST_TO_ADDR
// case i of 1 :
26295: LD_VAR 0 1
26299: PUSH
26300: LD_INT 1
26302: DOUBLE
26303: EQUAL
26304: IFTRUE 26308
26306: GO 26318
26308: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26309: LD_STRING earthquake(getX(game), 0, 32)
26311: PPUSH
26312: CALL_OW 559
26316: GO 26543
26318: LD_INT 2
26320: DOUBLE
26321: EQUAL
26322: IFTRUE 26326
26324: GO 26340
26326: POP
// begin ToLua ( displayStucuk(); ) ;
26327: LD_STRING displayStucuk();
26329: PPUSH
26330: CALL_OW 559
// ResetFog ;
26334: CALL_OW 335
// end ; 3 :
26338: GO 26543
26340: LD_INT 3
26342: DOUBLE
26343: EQUAL
26344: IFTRUE 26348
26346: GO 26452
26348: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26349: LD_ADDR_VAR 0 2
26353: PUSH
26354: LD_INT 22
26356: PUSH
26357: LD_OWVAR 2
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 25
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: CALL_OW 69
26384: ST_TO_ADDR
// if not tmp then
26385: LD_VAR 0 2
26389: NOT
26390: IFFALSE 26394
// exit ;
26392: GO 26543
// un := tmp [ rand ( 1 , tmp ) ] ;
26394: LD_ADDR_VAR 0 3
26398: PUSH
26399: LD_VAR 0 2
26403: PUSH
26404: LD_INT 1
26406: PPUSH
26407: LD_VAR 0 2
26411: PPUSH
26412: CALL_OW 12
26416: ARRAY
26417: ST_TO_ADDR
// if Crawls ( un ) then
26418: LD_VAR 0 3
26422: PPUSH
26423: CALL_OW 318
26427: IFFALSE 26438
// ComWalk ( un ) ;
26429: LD_VAR 0 3
26433: PPUSH
26434: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26438: LD_VAR 0 3
26442: PPUSH
26443: LD_INT 8
26445: PPUSH
26446: CALL_OW 336
// end ; 4 :
26450: GO 26543
26452: LD_INT 4
26454: DOUBLE
26455: EQUAL
26456: IFTRUE 26460
26458: GO 26521
26460: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26461: LD_ADDR_VAR 0 2
26465: PUSH
26466: LD_INT 22
26468: PUSH
26469: LD_OWVAR 2
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 30
26480: PUSH
26481: LD_INT 29
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PPUSH
26492: CALL_OW 69
26496: ST_TO_ADDR
// if not tmp then
26497: LD_VAR 0 2
26501: NOT
26502: IFFALSE 26506
// exit ;
26504: GO 26543
// DestroyUnit ( tmp [ 1 ] ) ;
26506: LD_VAR 0 2
26510: PUSH
26511: LD_INT 1
26513: ARRAY
26514: PPUSH
26515: CALL_OW 65
// end ; 5 .. 7 :
26519: GO 26543
26521: LD_INT 5
26523: DOUBLE
26524: GREATEREQUAL
26525: IFFALSE 26533
26527: LD_INT 7
26529: DOUBLE
26530: LESSEQUAL
26531: IFTRUE 26535
26533: GO 26542
26535: POP
// StreamSibBomb ; end ;
26536: CALL 22793 0 0
26540: GO 26543
26542: POP
// end ;
26543: PPOPN 3
26545: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26546: LD_EXP 50
26550: PUSH
26551: LD_EXP 100
26555: AND
26556: IFFALSE 26712
26558: GO 26560
26560: DISABLE
26561: LD_INT 0
26563: PPUSH
26564: PPUSH
26565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26566: LD_ADDR_VAR 0 2
26570: PUSH
26571: LD_INT 81
26573: PUSH
26574: LD_OWVAR 2
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: PUSH
26586: LD_INT 21
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 21
26598: PUSH
26599: LD_INT 2
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PPUSH
26615: CALL_OW 69
26619: ST_TO_ADDR
// if not tmp then
26620: LD_VAR 0 2
26624: NOT
26625: IFFALSE 26629
// exit ;
26627: GO 26712
// p := 0 ;
26629: LD_ADDR_VAR 0 3
26633: PUSH
26634: LD_INT 0
26636: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26637: LD_INT 35
26639: PPUSH
26640: CALL_OW 67
// p := p + 1 ;
26644: LD_ADDR_VAR 0 3
26648: PUSH
26649: LD_VAR 0 3
26653: PUSH
26654: LD_INT 1
26656: PLUS
26657: ST_TO_ADDR
// for i in tmp do
26658: LD_ADDR_VAR 0 1
26662: PUSH
26663: LD_VAR 0 2
26667: PUSH
26668: FOR_IN
26669: IFFALSE 26700
// if GetLives ( i ) < 1000 then
26671: LD_VAR 0 1
26675: PPUSH
26676: CALL_OW 256
26680: PUSH
26681: LD_INT 1000
26683: LESS
26684: IFFALSE 26698
// SetLives ( i , 1000 ) ;
26686: LD_VAR 0 1
26690: PPUSH
26691: LD_INT 1000
26693: PPUSH
26694: CALL_OW 234
26698: GO 26668
26700: POP
26701: POP
// until p > 20 ;
26702: LD_VAR 0 3
26706: PUSH
26707: LD_INT 20
26709: GREATER
26710: IFFALSE 26637
// end ;
26712: PPOPN 3
26714: END
// every 0 0$1 trigger StreamModeActive and sTime do
26715: LD_EXP 50
26719: PUSH
26720: LD_EXP 101
26724: AND
26725: IFFALSE 26760
26727: GO 26729
26729: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26730: LD_INT 28
26732: PPUSH
26733: LD_OWVAR 2
26737: PPUSH
26738: LD_INT 2
26740: PPUSH
26741: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26745: LD_INT 30
26747: PPUSH
26748: LD_OWVAR 2
26752: PPUSH
26753: LD_INT 2
26755: PPUSH
26756: CALL_OW 322
// end ;
26760: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26761: LD_EXP 50
26765: PUSH
26766: LD_EXP 102
26770: AND
26771: IFFALSE 26892
26773: GO 26775
26775: DISABLE
26776: LD_INT 0
26778: PPUSH
26779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26780: LD_ADDR_VAR 0 2
26784: PUSH
26785: LD_INT 22
26787: PUSH
26788: LD_OWVAR 2
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 21
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 3
26809: PUSH
26810: LD_INT 23
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: PPUSH
26829: CALL_OW 69
26833: ST_TO_ADDR
// if not tmp then
26834: LD_VAR 0 2
26838: NOT
26839: IFFALSE 26843
// exit ;
26841: GO 26892
// for i in tmp do
26843: LD_ADDR_VAR 0 1
26847: PUSH
26848: LD_VAR 0 2
26852: PUSH
26853: FOR_IN
26854: IFFALSE 26890
// begin if Crawls ( i ) then
26856: LD_VAR 0 1
26860: PPUSH
26861: CALL_OW 318
26865: IFFALSE 26876
// ComWalk ( i ) ;
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 138
// SetClass ( i , 2 ) ;
26876: LD_VAR 0 1
26880: PPUSH
26881: LD_INT 2
26883: PPUSH
26884: CALL_OW 336
// end ;
26888: GO 26853
26890: POP
26891: POP
// end ;
26892: PPOPN 2
26894: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26895: LD_EXP 50
26899: PUSH
26900: LD_EXP 103
26904: AND
26905: IFFALSE 27186
26907: GO 26909
26909: DISABLE
26910: LD_INT 0
26912: PPUSH
26913: PPUSH
26914: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26915: LD_OWVAR 2
26919: PPUSH
26920: LD_INT 9
26922: PPUSH
26923: LD_INT 1
26925: PPUSH
26926: LD_INT 1
26928: PPUSH
26929: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26933: LD_INT 9
26935: PPUSH
26936: LD_OWVAR 2
26940: PPUSH
26941: CALL_OW 343
// uc_side := 9 ;
26945: LD_ADDR_OWVAR 20
26949: PUSH
26950: LD_INT 9
26952: ST_TO_ADDR
// uc_nation := 2 ;
26953: LD_ADDR_OWVAR 21
26957: PUSH
26958: LD_INT 2
26960: ST_TO_ADDR
// hc_name := Dark Warrior ;
26961: LD_ADDR_OWVAR 26
26965: PUSH
26966: LD_STRING Dark Warrior
26968: ST_TO_ADDR
// hc_gallery :=  ;
26969: LD_ADDR_OWVAR 33
26973: PUSH
26974: LD_STRING 
26976: ST_TO_ADDR
// hc_noskilllimit := true ;
26977: LD_ADDR_OWVAR 76
26981: PUSH
26982: LD_INT 1
26984: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26985: LD_ADDR_OWVAR 31
26989: PUSH
26990: LD_INT 30
26992: PUSH
26993: LD_INT 30
26995: PUSH
26996: LD_INT 30
26998: PUSH
26999: LD_INT 30
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: ST_TO_ADDR
// un := CreateHuman ;
27008: LD_ADDR_VAR 0 3
27012: PUSH
27013: CALL_OW 44
27017: ST_TO_ADDR
// hc_noskilllimit := false ;
27018: LD_ADDR_OWVAR 76
27022: PUSH
27023: LD_INT 0
27025: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27026: LD_VAR 0 3
27030: PPUSH
27031: LD_INT 1
27033: PPUSH
27034: CALL_OW 51
// p := 0 ;
27038: LD_ADDR_VAR 0 2
27042: PUSH
27043: LD_INT 0
27045: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27046: LD_INT 35
27048: PPUSH
27049: CALL_OW 67
// p := p + 1 ;
27053: LD_ADDR_VAR 0 2
27057: PUSH
27058: LD_VAR 0 2
27062: PUSH
27063: LD_INT 1
27065: PLUS
27066: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27067: LD_VAR 0 3
27071: PPUSH
27072: CALL_OW 256
27076: PUSH
27077: LD_INT 1000
27079: LESS
27080: IFFALSE 27094
// SetLives ( un , 1000 ) ;
27082: LD_VAR 0 3
27086: PPUSH
27087: LD_INT 1000
27089: PPUSH
27090: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27094: LD_VAR 0 3
27098: PPUSH
27099: LD_INT 81
27101: PUSH
27102: LD_OWVAR 2
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 91
27113: PUSH
27114: LD_VAR 0 3
27118: PUSH
27119: LD_INT 30
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PPUSH
27131: CALL_OW 69
27135: PPUSH
27136: LD_VAR 0 3
27140: PPUSH
27141: CALL_OW 74
27145: PPUSH
27146: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
27150: LD_VAR 0 2
27154: PUSH
27155: LD_INT 60
27157: GREATER
27158: PUSH
27159: LD_VAR 0 3
27163: PPUSH
27164: CALL_OW 301
27168: OR
27169: IFFALSE 27046
// if un then
27171: LD_VAR 0 3
27175: IFFALSE 27186
// RemoveUnit ( un ) ;
27177: LD_VAR 0 3
27181: PPUSH
27182: CALL_OW 64
// end ;
27186: PPOPN 3
27188: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27189: LD_INT 0
27191: PPUSH
27192: PPUSH
27193: PPUSH
27194: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27195: LD_ADDR_VAR 0 4
27199: PUSH
27200: LD_INT 22
27202: PUSH
27203: LD_OWVAR 2
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 2
27214: PUSH
27215: LD_INT 30
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 30
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: LIST
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PPUSH
27244: CALL_OW 69
27248: ST_TO_ADDR
// if not tmp then
27249: LD_VAR 0 4
27253: NOT
27254: IFFALSE 27258
// exit ;
27256: GO 27317
// for i in tmp do
27258: LD_ADDR_VAR 0 2
27262: PUSH
27263: LD_VAR 0 4
27267: PUSH
27268: FOR_IN
27269: IFFALSE 27315
// for j = 1 to 3 do
27271: LD_ADDR_VAR 0 3
27275: PUSH
27276: DOUBLE
27277: LD_INT 1
27279: DEC
27280: ST_TO_ADDR
27281: LD_INT 3
27283: PUSH
27284: FOR_TO
27285: IFFALSE 27311
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27287: LD_VAR 0 2
27291: PPUSH
27292: CALL_OW 274
27296: PPUSH
27297: LD_VAR 0 3
27301: PPUSH
27302: LD_INT 99999
27304: PPUSH
27305: CALL_OW 277
27309: GO 27284
27311: POP
27312: POP
27313: GO 27268
27315: POP
27316: POP
// end ;
27317: LD_VAR 0 1
27321: RET
// export function hHackSetLevel10 ; var i , j ; begin
27322: LD_INT 0
27324: PPUSH
27325: PPUSH
27326: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27327: LD_ADDR_VAR 0 2
27331: PUSH
27332: LD_INT 21
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PPUSH
27342: CALL_OW 69
27346: PUSH
27347: FOR_IN
27348: IFFALSE 27400
// if IsSelected ( i ) then
27350: LD_VAR 0 2
27354: PPUSH
27355: CALL_OW 306
27359: IFFALSE 27398
// begin for j := 1 to 4 do
27361: LD_ADDR_VAR 0 3
27365: PUSH
27366: DOUBLE
27367: LD_INT 1
27369: DEC
27370: ST_TO_ADDR
27371: LD_INT 4
27373: PUSH
27374: FOR_TO
27375: IFFALSE 27396
// SetSkill ( i , j , 10 ) ;
27377: LD_VAR 0 2
27381: PPUSH
27382: LD_VAR 0 3
27386: PPUSH
27387: LD_INT 10
27389: PPUSH
27390: CALL_OW 237
27394: GO 27374
27396: POP
27397: POP
// end ;
27398: GO 27347
27400: POP
27401: POP
// end ;
27402: LD_VAR 0 1
27406: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27407: LD_INT 0
27409: PPUSH
27410: PPUSH
27411: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27412: LD_ADDR_VAR 0 2
27416: PUSH
27417: LD_INT 22
27419: PUSH
27420: LD_OWVAR 2
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 21
27431: PUSH
27432: LD_INT 1
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PPUSH
27443: CALL_OW 69
27447: PUSH
27448: FOR_IN
27449: IFFALSE 27490
// begin for j := 1 to 4 do
27451: LD_ADDR_VAR 0 3
27455: PUSH
27456: DOUBLE
27457: LD_INT 1
27459: DEC
27460: ST_TO_ADDR
27461: LD_INT 4
27463: PUSH
27464: FOR_TO
27465: IFFALSE 27486
// SetSkill ( i , j , 10 ) ;
27467: LD_VAR 0 2
27471: PPUSH
27472: LD_VAR 0 3
27476: PPUSH
27477: LD_INT 10
27479: PPUSH
27480: CALL_OW 237
27484: GO 27464
27486: POP
27487: POP
// end ;
27488: GO 27448
27490: POP
27491: POP
// end ;
27492: LD_VAR 0 1
27496: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
27497: LD_INT 0
27499: PPUSH
// uc_side := your_side ;
27500: LD_ADDR_OWVAR 20
27504: PUSH
27505: LD_OWVAR 2
27509: ST_TO_ADDR
// uc_nation := nation ;
27510: LD_ADDR_OWVAR 21
27514: PUSH
27515: LD_VAR 0 1
27519: ST_TO_ADDR
// InitHc ;
27520: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27524: LD_INT 0
27526: PPUSH
27527: LD_VAR 0 2
27531: PPUSH
27532: LD_VAR 0 3
27536: PPUSH
27537: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
27541: CALL_OW 44
27545: PPUSH
27546: LD_INT 1
27548: PPUSH
27549: CALL_OW 51
// end ;
27553: LD_VAR 0 4
27557: RET
// export function hHackSpawnVehicle ; begin
27558: LD_INT 0
27560: PPUSH
// uc_side := your_side ;
27561: LD_ADDR_OWVAR 20
27565: PUSH
27566: LD_OWVAR 2
27570: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
27571: LD_ADDR_OWVAR 21
27575: PUSH
27576: LD_INT 1
27578: PPUSH
27579: LD_INT 3
27581: PPUSH
27582: CALL_OW 12
27586: ST_TO_ADDR
// InitVc ;
27587: CALL_OW 20
// case uc_nation of 1 :
27591: LD_OWVAR 21
27595: PUSH
27596: LD_INT 1
27598: DOUBLE
27599: EQUAL
27600: IFTRUE 27604
27602: GO 27748
27604: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
27605: LD_ADDR_OWVAR 37
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 3
27618: PUSH
27619: LD_INT 4
27621: PUSH
27622: LD_INT 5
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 1
27634: PPUSH
27635: LD_INT 5
27637: PPUSH
27638: CALL_OW 12
27642: ARRAY
27643: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27644: LD_ADDR_OWVAR 39
27648: PUSH
27649: LD_INT 1
27651: PPUSH
27652: LD_INT 3
27654: PPUSH
27655: CALL_OW 12
27659: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
27660: LD_ADDR_OWVAR 38
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: LD_INT 2
27670: PUSH
27671: LD_INT 3
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: PPUSH
27682: LD_INT 3
27684: PPUSH
27685: CALL_OW 12
27689: ARRAY
27690: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
27691: LD_ADDR_OWVAR 40
27695: PUSH
27696: LD_INT 2
27698: PUSH
27699: LD_INT 4
27701: PUSH
27702: LD_INT 5
27704: PUSH
27705: LD_INT 3
27707: PUSH
27708: LD_INT 7
27710: PUSH
27711: LD_INT 8
27713: PUSH
27714: LD_INT 9
27716: PUSH
27717: LD_INT 10
27719: PUSH
27720: LD_INT 6
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: PPUSH
27737: LD_INT 9
27739: PPUSH
27740: CALL_OW 12
27744: ARRAY
27745: ST_TO_ADDR
// end ; 2 :
27746: GO 28013
27748: LD_INT 2
27750: DOUBLE
27751: EQUAL
27752: IFTRUE 27756
27754: GO 27880
27756: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
27757: LD_ADDR_OWVAR 37
27761: PUSH
27762: LD_INT 11
27764: PUSH
27765: LD_INT 12
27767: PUSH
27768: LD_INT 13
27770: PUSH
27771: LD_INT 14
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: PPUSH
27783: LD_INT 4
27785: PPUSH
27786: CALL_OW 12
27790: ARRAY
27791: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27792: LD_ADDR_OWVAR 39
27796: PUSH
27797: LD_INT 1
27799: PPUSH
27800: LD_INT 3
27802: PPUSH
27803: CALL_OW 12
27807: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
27808: LD_ADDR_OWVAR 38
27812: PUSH
27813: LD_INT 1
27815: PUSH
27816: LD_INT 2
27818: PUSH
27819: LD_INT 5
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: PPUSH
27830: LD_INT 3
27832: PPUSH
27833: CALL_OW 12
27837: ARRAY
27838: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
27839: LD_ADDR_OWVAR 40
27843: PUSH
27844: LD_INT 24
27846: PUSH
27847: LD_INT 26
27849: PUSH
27850: LD_INT 27
27852: PUSH
27853: LD_INT 28
27855: PUSH
27856: LD_INT 29
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: PPUSH
27869: LD_INT 5
27871: PPUSH
27872: CALL_OW 12
27876: ARRAY
27877: ST_TO_ADDR
// end ; 3 :
27878: GO 28013
27880: LD_INT 3
27882: DOUBLE
27883: EQUAL
27884: IFTRUE 27888
27886: GO 28012
27888: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
27889: LD_ADDR_OWVAR 37
27893: PUSH
27894: LD_INT 21
27896: PUSH
27897: LD_INT 23
27899: PUSH
27900: LD_INT 22
27902: PUSH
27903: LD_INT 24
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: PPUSH
27915: LD_INT 4
27917: PPUSH
27918: CALL_OW 12
27922: ARRAY
27923: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27924: LD_ADDR_OWVAR 39
27928: PUSH
27929: LD_INT 1
27931: PPUSH
27932: LD_INT 3
27934: PPUSH
27935: CALL_OW 12
27939: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
27940: LD_ADDR_OWVAR 38
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: LD_INT 3
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 1
27957: PPUSH
27958: LD_INT 2
27960: PPUSH
27961: CALL_OW 12
27965: ARRAY
27966: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
27967: LD_ADDR_OWVAR 40
27971: PUSH
27972: LD_INT 42
27974: PUSH
27975: LD_INT 43
27977: PUSH
27978: LD_INT 44
27980: PUSH
27981: LD_INT 46
27983: PUSH
27984: LD_INT 48
27986: PUSH
27987: LD_INT 47
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 1
28000: PPUSH
28001: LD_INT 6
28003: PPUSH
28004: CALL_OW 12
28008: ARRAY
28009: ST_TO_ADDR
// end ; end ;
28010: GO 28013
28012: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28013: CALL_OW 45
28017: PPUSH
28018: LD_INT 1
28020: PPUSH
28021: CALL_OW 51
// end ;
28025: LD_VAR 0 1
28029: RET
// export hInvincible ; every 1 do
28030: GO 28032
28032: DISABLE
// hInvincible := [ ] ;
28033: LD_ADDR_EXP 104
28037: PUSH
28038: EMPTY
28039: ST_TO_ADDR
28040: END
// every 10 do var i ;
28041: GO 28043
28043: DISABLE
28044: LD_INT 0
28046: PPUSH
// begin enable ;
28047: ENABLE
// if not hInvincible then
28048: LD_EXP 104
28052: NOT
28053: IFFALSE 28057
// exit ;
28055: GO 28101
// for i in hInvincible do
28057: LD_ADDR_VAR 0 1
28061: PUSH
28062: LD_EXP 104
28066: PUSH
28067: FOR_IN
28068: IFFALSE 28099
// if GetLives ( i ) < 1000 then
28070: LD_VAR 0 1
28074: PPUSH
28075: CALL_OW 256
28079: PUSH
28080: LD_INT 1000
28082: LESS
28083: IFFALSE 28097
// SetLives ( i , 1000 ) ;
28085: LD_VAR 0 1
28089: PPUSH
28090: LD_INT 1000
28092: PPUSH
28093: CALL_OW 234
28097: GO 28067
28099: POP
28100: POP
// end ;
28101: PPOPN 1
28103: END
// export function hHackInvincible ; var i ; begin
28104: LD_INT 0
28106: PPUSH
28107: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28108: LD_ADDR_VAR 0 2
28112: PUSH
28113: LD_INT 2
28115: PUSH
28116: LD_INT 21
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 21
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: PPUSH
28141: CALL_OW 69
28145: PUSH
28146: FOR_IN
28147: IFFALSE 28208
// if IsSelected ( i ) then
28149: LD_VAR 0 2
28153: PPUSH
28154: CALL_OW 306
28158: IFFALSE 28206
// begin if i in hInvincible then
28160: LD_VAR 0 2
28164: PUSH
28165: LD_EXP 104
28169: IN
28170: IFFALSE 28190
// hInvincible := hInvincible diff i else
28172: LD_ADDR_EXP 104
28176: PUSH
28177: LD_EXP 104
28181: PUSH
28182: LD_VAR 0 2
28186: DIFF
28187: ST_TO_ADDR
28188: GO 28206
// hInvincible := hInvincible union i ;
28190: LD_ADDR_EXP 104
28194: PUSH
28195: LD_EXP 104
28199: PUSH
28200: LD_VAR 0 2
28204: UNION
28205: ST_TO_ADDR
// end ;
28206: GO 28146
28208: POP
28209: POP
// end ;
28210: LD_VAR 0 1
28214: RET
// export function hHackInvisible ; var i , j ; begin
28215: LD_INT 0
28217: PPUSH
28218: PPUSH
28219: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28220: LD_ADDR_VAR 0 2
28224: PUSH
28225: LD_INT 21
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PPUSH
28235: CALL_OW 69
28239: PUSH
28240: FOR_IN
28241: IFFALSE 28265
// if IsSelected ( i ) then
28243: LD_VAR 0 2
28247: PPUSH
28248: CALL_OW 306
28252: IFFALSE 28263
// ComForceInvisible ( i ) ;
28254: LD_VAR 0 2
28258: PPUSH
28259: CALL_OW 496
28263: GO 28240
28265: POP
28266: POP
// end ;
28267: LD_VAR 0 1
28271: RET
// export function hHackChangeYourSide ; begin
28272: LD_INT 0
28274: PPUSH
// if your_side = 8 then
28275: LD_OWVAR 2
28279: PUSH
28280: LD_INT 8
28282: EQUAL
28283: IFFALSE 28295
// your_side := 0 else
28285: LD_ADDR_OWVAR 2
28289: PUSH
28290: LD_INT 0
28292: ST_TO_ADDR
28293: GO 28309
// your_side := your_side + 1 ;
28295: LD_ADDR_OWVAR 2
28299: PUSH
28300: LD_OWVAR 2
28304: PUSH
28305: LD_INT 1
28307: PLUS
28308: ST_TO_ADDR
// end ;
28309: LD_VAR 0 1
28313: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28314: LD_INT 0
28316: PPUSH
28317: PPUSH
28318: PPUSH
// for i in all_units do
28319: LD_ADDR_VAR 0 2
28323: PUSH
28324: LD_OWVAR 3
28328: PUSH
28329: FOR_IN
28330: IFFALSE 28408
// if IsSelected ( i ) then
28332: LD_VAR 0 2
28336: PPUSH
28337: CALL_OW 306
28341: IFFALSE 28406
// begin j := GetSide ( i ) ;
28343: LD_ADDR_VAR 0 3
28347: PUSH
28348: LD_VAR 0 2
28352: PPUSH
28353: CALL_OW 255
28357: ST_TO_ADDR
// if j = 8 then
28358: LD_VAR 0 3
28362: PUSH
28363: LD_INT 8
28365: EQUAL
28366: IFFALSE 28378
// j := 0 else
28368: LD_ADDR_VAR 0 3
28372: PUSH
28373: LD_INT 0
28375: ST_TO_ADDR
28376: GO 28392
// j := j + 1 ;
28378: LD_ADDR_VAR 0 3
28382: PUSH
28383: LD_VAR 0 3
28387: PUSH
28388: LD_INT 1
28390: PLUS
28391: ST_TO_ADDR
// SetSide ( i , j ) ;
28392: LD_VAR 0 2
28396: PPUSH
28397: LD_VAR 0 3
28401: PPUSH
28402: CALL_OW 235
// end ;
28406: GO 28329
28408: POP
28409: POP
// end ;
28410: LD_VAR 0 1
28414: RET
// export function hHackFog ; begin
28415: LD_INT 0
28417: PPUSH
// FogOff ( true ) ;
28418: LD_INT 1
28420: PPUSH
28421: CALL_OW 344
// end ;
28425: LD_VAR 0 1
28429: RET
// export function hHackApeman ; begin
28430: LD_INT 0
28432: PPUSH
// uc_side := your_side ;
28433: LD_ADDR_OWVAR 20
28437: PUSH
28438: LD_OWVAR 2
28442: ST_TO_ADDR
// uc_nation := 0 ;
28443: LD_ADDR_OWVAR 21
28447: PUSH
28448: LD_INT 0
28450: ST_TO_ADDR
// hc_name :=  ;
28451: LD_ADDR_OWVAR 26
28455: PUSH
28456: LD_STRING 
28458: ST_TO_ADDR
// hc_gallery :=  ;
28459: LD_ADDR_OWVAR 33
28463: PUSH
28464: LD_STRING 
28466: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
28467: LD_ADDR_OWVAR 31
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 0
28480: PUSH
28481: LD_INT 0
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: ST_TO_ADDR
// hc_class := class_apeman ;
28490: LD_ADDR_OWVAR 28
28494: PUSH
28495: LD_INT 12
28497: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
28498: CALL_OW 44
28502: PPUSH
28503: LD_INT 1
28505: PPUSH
28506: CALL_OW 51
// end ;
28510: LD_VAR 0 1
28514: RET
// export function hHackBoom ; begin
28515: LD_INT 0
28517: PPUSH
// uc_side := your_side ;
28518: LD_ADDR_OWVAR 20
28522: PUSH
28523: LD_OWVAR 2
28527: ST_TO_ADDR
// uc_nation := 1 ;
28528: LD_ADDR_OWVAR 21
28532: PUSH
28533: LD_INT 1
28535: ST_TO_ADDR
// vc_chassis := us_morphling ;
28536: LD_ADDR_OWVAR 37
28540: PUSH
28541: LD_INT 5
28543: ST_TO_ADDR
// vc_engine := engine_siberite ;
28544: LD_ADDR_OWVAR 39
28548: PUSH
28549: LD_INT 3
28551: ST_TO_ADDR
// vc_control := control_computer ;
28552: LD_ADDR_OWVAR 38
28556: PUSH
28557: LD_INT 3
28559: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
28560: LD_ADDR_OWVAR 40
28564: PUSH
28565: LD_INT 8
28567: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28568: CALL_OW 45
28572: PPUSH
28573: LD_INT 1
28575: PPUSH
28576: CALL_OW 51
// end ; end_of_file
28580: LD_VAR 0 1
28584: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28585: LD_INT 0
28587: PPUSH
28588: PPUSH
28589: PPUSH
28590: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 264
28600: PUSH
28601: LD_EXP 39
28605: EQUAL
28606: IFFALSE 28678
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28608: LD_INT 68
28610: PPUSH
28611: LD_VAR 0 1
28615: PPUSH
28616: CALL_OW 255
28620: PPUSH
28621: CALL_OW 321
28625: PUSH
28626: LD_INT 2
28628: EQUAL
28629: IFFALSE 28641
// eff := 70 else
28631: LD_ADDR_VAR 0 4
28635: PUSH
28636: LD_INT 70
28638: ST_TO_ADDR
28639: GO 28649
// eff := 30 ;
28641: LD_ADDR_VAR 0 4
28645: PUSH
28646: LD_INT 30
28648: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28649: LD_VAR 0 1
28653: PPUSH
28654: CALL_OW 250
28658: PPUSH
28659: LD_VAR 0 1
28663: PPUSH
28664: CALL_OW 251
28668: PPUSH
28669: LD_VAR 0 4
28673: PPUSH
28674: CALL_OW 495
// end ; end ;
28678: LD_VAR 0 2
28682: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28683: LD_INT 0
28685: PPUSH
// end ;
28686: LD_VAR 0 4
28690: RET
// export function SOS_Command ( cmd ) ; begin
28691: LD_INT 0
28693: PPUSH
// end ;
28694: LD_VAR 0 2
28698: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28699: LD_VAR 0 1
28703: PUSH
28704: LD_INT 254
28706: EQUAL
28707: PUSH
28708: LD_VAR 0 2
28712: PPUSH
28713: CALL_OW 264
28717: PUSH
28718: LD_EXP 37
28722: EQUAL
28723: AND
28724: PUSH
28725: LD_VAR 0 3
28729: PPUSH
28730: CALL_OW 263
28734: PUSH
28735: LD_INT 3
28737: EQUAL
28738: AND
28739: IFFALSE 28755
// HackDestroyVehicle ( unit , selectedUnit ) ;
28741: LD_VAR 0 2
28745: PPUSH
28746: LD_VAR 0 3
28750: PPUSH
28751: CALL 30262 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28755: LD_VAR 0 1
28759: PUSH
28760: LD_INT 255
28762: EQUAL
28763: PUSH
28764: LD_VAR 0 2
28768: PPUSH
28769: CALL_OW 264
28773: PUSH
28774: LD_INT 14
28776: PUSH
28777: LD_INT 53
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: IN
28784: AND
28785: PUSH
28786: LD_VAR 0 4
28790: PPUSH
28791: LD_VAR 0 5
28795: PPUSH
28796: CALL_OW 488
28800: AND
28801: IFFALSE 28825
// CutTreeXYR ( unit , x , y , 12 ) ;
28803: LD_VAR 0 2
28807: PPUSH
28808: LD_VAR 0 4
28812: PPUSH
28813: LD_VAR 0 5
28817: PPUSH
28818: LD_INT 12
28820: PPUSH
28821: CALL 28828 0 4
// end ;
28825: PPOPN 5
28827: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28828: LD_INT 0
28830: PPUSH
28831: PPUSH
28832: PPUSH
28833: PPUSH
28834: PPUSH
28835: PPUSH
28836: PPUSH
28837: PPUSH
28838: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28839: LD_VAR 0 1
28843: NOT
28844: PUSH
28845: LD_VAR 0 2
28849: PPUSH
28850: LD_VAR 0 3
28854: PPUSH
28855: CALL_OW 488
28859: NOT
28860: OR
28861: PUSH
28862: LD_VAR 0 4
28866: NOT
28867: OR
28868: IFFALSE 28872
// exit ;
28870: GO 29212
// list := [ ] ;
28872: LD_ADDR_VAR 0 13
28876: PUSH
28877: EMPTY
28878: ST_TO_ADDR
// if x - r < 0 then
28879: LD_VAR 0 2
28883: PUSH
28884: LD_VAR 0 4
28888: MINUS
28889: PUSH
28890: LD_INT 0
28892: LESS
28893: IFFALSE 28905
// min_x := 0 else
28895: LD_ADDR_VAR 0 7
28899: PUSH
28900: LD_INT 0
28902: ST_TO_ADDR
28903: GO 28921
// min_x := x - r ;
28905: LD_ADDR_VAR 0 7
28909: PUSH
28910: LD_VAR 0 2
28914: PUSH
28915: LD_VAR 0 4
28919: MINUS
28920: ST_TO_ADDR
// if y - r < 0 then
28921: LD_VAR 0 3
28925: PUSH
28926: LD_VAR 0 4
28930: MINUS
28931: PUSH
28932: LD_INT 0
28934: LESS
28935: IFFALSE 28947
// min_y := 0 else
28937: LD_ADDR_VAR 0 8
28941: PUSH
28942: LD_INT 0
28944: ST_TO_ADDR
28945: GO 28963
// min_y := y - r ;
28947: LD_ADDR_VAR 0 8
28951: PUSH
28952: LD_VAR 0 3
28956: PUSH
28957: LD_VAR 0 4
28961: MINUS
28962: ST_TO_ADDR
// max_x := x + r ;
28963: LD_ADDR_VAR 0 9
28967: PUSH
28968: LD_VAR 0 2
28972: PUSH
28973: LD_VAR 0 4
28977: PLUS
28978: ST_TO_ADDR
// max_y := y + r ;
28979: LD_ADDR_VAR 0 10
28983: PUSH
28984: LD_VAR 0 3
28988: PUSH
28989: LD_VAR 0 4
28993: PLUS
28994: ST_TO_ADDR
// for _x = min_x to max_x do
28995: LD_ADDR_VAR 0 11
28999: PUSH
29000: DOUBLE
29001: LD_VAR 0 7
29005: DEC
29006: ST_TO_ADDR
29007: LD_VAR 0 9
29011: PUSH
29012: FOR_TO
29013: IFFALSE 29130
// for _y = min_y to max_y do
29015: LD_ADDR_VAR 0 12
29019: PUSH
29020: DOUBLE
29021: LD_VAR 0 8
29025: DEC
29026: ST_TO_ADDR
29027: LD_VAR 0 10
29031: PUSH
29032: FOR_TO
29033: IFFALSE 29126
// begin if not ValidHex ( _x , _y ) then
29035: LD_VAR 0 11
29039: PPUSH
29040: LD_VAR 0 12
29044: PPUSH
29045: CALL_OW 488
29049: NOT
29050: IFFALSE 29054
// continue ;
29052: GO 29032
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29054: LD_VAR 0 11
29058: PPUSH
29059: LD_VAR 0 12
29063: PPUSH
29064: CALL_OW 351
29068: PUSH
29069: LD_VAR 0 11
29073: PPUSH
29074: LD_VAR 0 12
29078: PPUSH
29079: CALL_OW 554
29083: AND
29084: IFFALSE 29124
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29086: LD_ADDR_VAR 0 13
29090: PUSH
29091: LD_VAR 0 13
29095: PPUSH
29096: LD_VAR 0 13
29100: PUSH
29101: LD_INT 1
29103: PLUS
29104: PPUSH
29105: LD_VAR 0 11
29109: PUSH
29110: LD_VAR 0 12
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PPUSH
29119: CALL_OW 2
29123: ST_TO_ADDR
// end ;
29124: GO 29032
29126: POP
29127: POP
29128: GO 29012
29130: POP
29131: POP
// if not list then
29132: LD_VAR 0 13
29136: NOT
29137: IFFALSE 29141
// exit ;
29139: GO 29212
// for i in list do
29141: LD_ADDR_VAR 0 6
29145: PUSH
29146: LD_VAR 0 13
29150: PUSH
29151: FOR_IN
29152: IFFALSE 29210
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29154: LD_VAR 0 1
29158: PPUSH
29159: LD_STRING M
29161: PUSH
29162: LD_VAR 0 6
29166: PUSH
29167: LD_INT 1
29169: ARRAY
29170: PUSH
29171: LD_VAR 0 6
29175: PUSH
29176: LD_INT 2
29178: ARRAY
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: PPUSH
29204: CALL_OW 447
29208: GO 29151
29210: POP
29211: POP
// end ;
29212: LD_VAR 0 5
29216: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29217: LD_EXP 105
29221: NOT
29222: IFFALSE 29272
29224: GO 29226
29226: DISABLE
// begin initHack := true ;
29227: LD_ADDR_EXP 105
29231: PUSH
29232: LD_INT 1
29234: ST_TO_ADDR
// hackTanks := [ ] ;
29235: LD_ADDR_EXP 106
29239: PUSH
29240: EMPTY
29241: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29242: LD_ADDR_EXP 107
29246: PUSH
29247: EMPTY
29248: ST_TO_ADDR
// hackLimit := 3 ;
29249: LD_ADDR_EXP 108
29253: PUSH
29254: LD_INT 3
29256: ST_TO_ADDR
// hackDist := 12 ;
29257: LD_ADDR_EXP 109
29261: PUSH
29262: LD_INT 12
29264: ST_TO_ADDR
// hackCounter := [ ] ;
29265: LD_ADDR_EXP 110
29269: PUSH
29270: EMPTY
29271: ST_TO_ADDR
// end ;
29272: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29273: LD_EXP 105
29277: PUSH
29278: LD_INT 34
29280: PUSH
29281: LD_EXP 37
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PPUSH
29290: CALL_OW 69
29294: AND
29295: IFFALSE 29550
29297: GO 29299
29299: DISABLE
29300: LD_INT 0
29302: PPUSH
29303: PPUSH
// begin enable ;
29304: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29305: LD_ADDR_VAR 0 1
29309: PUSH
29310: LD_INT 34
29312: PUSH
29313: LD_EXP 37
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PPUSH
29322: CALL_OW 69
29326: PUSH
29327: FOR_IN
29328: IFFALSE 29548
// begin if not i in hackTanks then
29330: LD_VAR 0 1
29334: PUSH
29335: LD_EXP 106
29339: IN
29340: NOT
29341: IFFALSE 29424
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29343: LD_ADDR_EXP 106
29347: PUSH
29348: LD_EXP 106
29352: PPUSH
29353: LD_EXP 106
29357: PUSH
29358: LD_INT 1
29360: PLUS
29361: PPUSH
29362: LD_VAR 0 1
29366: PPUSH
29367: CALL_OW 1
29371: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29372: LD_ADDR_EXP 107
29376: PUSH
29377: LD_EXP 107
29381: PPUSH
29382: LD_EXP 107
29386: PUSH
29387: LD_INT 1
29389: PLUS
29390: PPUSH
29391: EMPTY
29392: PPUSH
29393: CALL_OW 1
29397: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29398: LD_ADDR_EXP 110
29402: PUSH
29403: LD_EXP 110
29407: PPUSH
29408: LD_EXP 110
29412: PUSH
29413: LD_INT 1
29415: PLUS
29416: PPUSH
29417: EMPTY
29418: PPUSH
29419: CALL_OW 1
29423: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29424: LD_VAR 0 1
29428: PPUSH
29429: CALL_OW 302
29433: NOT
29434: IFFALSE 29447
// begin HackUnlinkAll ( i ) ;
29436: LD_VAR 0 1
29440: PPUSH
29441: CALL 29553 0 1
// continue ;
29445: GO 29327
// end ; HackCheckCapturedStatus ( i ) ;
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL 29996 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29456: LD_ADDR_VAR 0 2
29460: PUSH
29461: LD_INT 81
29463: PUSH
29464: LD_VAR 0 1
29468: PPUSH
29469: CALL_OW 255
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 33
29480: PUSH
29481: LD_INT 3
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 91
29490: PUSH
29491: LD_VAR 0 1
29495: PUSH
29496: LD_EXP 109
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 50
29508: PUSH
29509: EMPTY
29510: LIST
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: PPUSH
29518: CALL_OW 69
29522: ST_TO_ADDR
// if not tmp then
29523: LD_VAR 0 2
29527: NOT
29528: IFFALSE 29532
// continue ;
29530: GO 29327
// HackLink ( i , tmp ) ;
29532: LD_VAR 0 1
29536: PPUSH
29537: LD_VAR 0 2
29541: PPUSH
29542: CALL 29689 0 2
// end ;
29546: GO 29327
29548: POP
29549: POP
// end ;
29550: PPOPN 2
29552: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29553: LD_INT 0
29555: PPUSH
29556: PPUSH
29557: PPUSH
// if not hack in hackTanks then
29558: LD_VAR 0 1
29562: PUSH
29563: LD_EXP 106
29567: IN
29568: NOT
29569: IFFALSE 29573
// exit ;
29571: GO 29684
// index := GetElementIndex ( hackTanks , hack ) ;
29573: LD_ADDR_VAR 0 4
29577: PUSH
29578: LD_EXP 106
29582: PPUSH
29583: LD_VAR 0 1
29587: PPUSH
29588: CALL 35104 0 2
29592: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29593: LD_EXP 107
29597: PUSH
29598: LD_VAR 0 4
29602: ARRAY
29603: IFFALSE 29684
// begin for i in hackTanksCaptured [ index ] do
29605: LD_ADDR_VAR 0 3
29609: PUSH
29610: LD_EXP 107
29614: PUSH
29615: LD_VAR 0 4
29619: ARRAY
29620: PUSH
29621: FOR_IN
29622: IFFALSE 29648
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29624: LD_VAR 0 3
29628: PUSH
29629: LD_INT 1
29631: ARRAY
29632: PPUSH
29633: LD_VAR 0 3
29637: PUSH
29638: LD_INT 2
29640: ARRAY
29641: PPUSH
29642: CALL_OW 235
29646: GO 29621
29648: POP
29649: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29650: LD_ADDR_EXP 107
29654: PUSH
29655: LD_EXP 107
29659: PPUSH
29660: LD_VAR 0 4
29664: PPUSH
29665: EMPTY
29666: PPUSH
29667: CALL_OW 1
29671: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29672: LD_VAR 0 1
29676: PPUSH
29677: LD_INT 0
29679: PPUSH
29680: CALL_OW 505
// end ; end ;
29684: LD_VAR 0 2
29688: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29689: LD_INT 0
29691: PPUSH
29692: PPUSH
29693: PPUSH
// if not hack in hackTanks or not vehicles then
29694: LD_VAR 0 1
29698: PUSH
29699: LD_EXP 106
29703: IN
29704: NOT
29705: PUSH
29706: LD_VAR 0 2
29710: NOT
29711: OR
29712: IFFALSE 29716
// exit ;
29714: GO 29991
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29716: LD_ADDR_VAR 0 2
29720: PUSH
29721: LD_VAR 0 1
29725: PPUSH
29726: LD_VAR 0 2
29730: PPUSH
29731: LD_INT 1
29733: PPUSH
29734: LD_INT 1
29736: PPUSH
29737: CALL 35754 0 4
29741: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29742: LD_ADDR_VAR 0 5
29746: PUSH
29747: LD_EXP 106
29751: PPUSH
29752: LD_VAR 0 1
29756: PPUSH
29757: CALL 35104 0 2
29761: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29762: LD_EXP 107
29766: PUSH
29767: LD_VAR 0 5
29771: ARRAY
29772: PUSH
29773: LD_EXP 108
29777: LESS
29778: IFFALSE 29967
// begin for i := 1 to vehicles do
29780: LD_ADDR_VAR 0 4
29784: PUSH
29785: DOUBLE
29786: LD_INT 1
29788: DEC
29789: ST_TO_ADDR
29790: LD_VAR 0 2
29794: PUSH
29795: FOR_TO
29796: IFFALSE 29965
// begin if hackTanksCaptured [ index ] = hackLimit then
29798: LD_EXP 107
29802: PUSH
29803: LD_VAR 0 5
29807: ARRAY
29808: PUSH
29809: LD_EXP 108
29813: EQUAL
29814: IFFALSE 29818
// break ;
29816: GO 29965
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29818: LD_ADDR_EXP 110
29822: PUSH
29823: LD_EXP 110
29827: PPUSH
29828: LD_VAR 0 5
29832: PPUSH
29833: LD_EXP 110
29837: PUSH
29838: LD_VAR 0 5
29842: ARRAY
29843: PUSH
29844: LD_INT 1
29846: PLUS
29847: PPUSH
29848: CALL_OW 1
29852: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29853: LD_ADDR_EXP 107
29857: PUSH
29858: LD_EXP 107
29862: PPUSH
29863: LD_VAR 0 5
29867: PUSH
29868: LD_EXP 107
29872: PUSH
29873: LD_VAR 0 5
29877: ARRAY
29878: PUSH
29879: LD_INT 1
29881: PLUS
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PPUSH
29887: LD_VAR 0 2
29891: PUSH
29892: LD_VAR 0 4
29896: ARRAY
29897: PUSH
29898: LD_VAR 0 2
29902: PUSH
29903: LD_VAR 0 4
29907: ARRAY
29908: PPUSH
29909: CALL_OW 255
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PPUSH
29918: CALL 35319 0 3
29922: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29923: LD_VAR 0 2
29927: PUSH
29928: LD_VAR 0 4
29932: ARRAY
29933: PPUSH
29934: LD_VAR 0 1
29938: PPUSH
29939: CALL_OW 255
29943: PPUSH
29944: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29948: LD_VAR 0 2
29952: PUSH
29953: LD_VAR 0 4
29957: ARRAY
29958: PPUSH
29959: CALL_OW 141
// end ;
29963: GO 29795
29965: POP
29966: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29967: LD_VAR 0 1
29971: PPUSH
29972: LD_EXP 107
29976: PUSH
29977: LD_VAR 0 5
29981: ARRAY
29982: PUSH
29983: LD_INT 0
29985: PLUS
29986: PPUSH
29987: CALL_OW 505
// end ;
29991: LD_VAR 0 3
29995: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29996: LD_INT 0
29998: PPUSH
29999: PPUSH
30000: PPUSH
30001: PPUSH
// if not hack in hackTanks then
30002: LD_VAR 0 1
30006: PUSH
30007: LD_EXP 106
30011: IN
30012: NOT
30013: IFFALSE 30017
// exit ;
30015: GO 30257
// index := GetElementIndex ( hackTanks , hack ) ;
30017: LD_ADDR_VAR 0 4
30021: PUSH
30022: LD_EXP 106
30026: PPUSH
30027: LD_VAR 0 1
30031: PPUSH
30032: CALL 35104 0 2
30036: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30037: LD_ADDR_VAR 0 3
30041: PUSH
30042: DOUBLE
30043: LD_EXP 107
30047: PUSH
30048: LD_VAR 0 4
30052: ARRAY
30053: INC
30054: ST_TO_ADDR
30055: LD_INT 1
30057: PUSH
30058: FOR_DOWNTO
30059: IFFALSE 30231
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30061: LD_ADDR_VAR 0 5
30065: PUSH
30066: LD_EXP 107
30070: PUSH
30071: LD_VAR 0 4
30075: ARRAY
30076: PUSH
30077: LD_VAR 0 3
30081: ARRAY
30082: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30083: LD_VAR 0 5
30087: PUSH
30088: LD_INT 1
30090: ARRAY
30091: PPUSH
30092: CALL_OW 302
30096: NOT
30097: PUSH
30098: LD_VAR 0 5
30102: PUSH
30103: LD_INT 1
30105: ARRAY
30106: PPUSH
30107: CALL_OW 255
30111: PUSH
30112: LD_VAR 0 1
30116: PPUSH
30117: CALL_OW 255
30121: NONEQUAL
30122: OR
30123: IFFALSE 30229
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30125: LD_VAR 0 5
30129: PUSH
30130: LD_INT 1
30132: ARRAY
30133: PPUSH
30134: CALL_OW 305
30138: PUSH
30139: LD_VAR 0 5
30143: PUSH
30144: LD_INT 1
30146: ARRAY
30147: PPUSH
30148: CALL_OW 255
30152: PUSH
30153: LD_VAR 0 1
30157: PPUSH
30158: CALL_OW 255
30162: EQUAL
30163: AND
30164: IFFALSE 30188
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30166: LD_VAR 0 5
30170: PUSH
30171: LD_INT 1
30173: ARRAY
30174: PPUSH
30175: LD_VAR 0 5
30179: PUSH
30180: LD_INT 2
30182: ARRAY
30183: PPUSH
30184: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30188: LD_ADDR_EXP 107
30192: PUSH
30193: LD_EXP 107
30197: PPUSH
30198: LD_VAR 0 4
30202: PPUSH
30203: LD_EXP 107
30207: PUSH
30208: LD_VAR 0 4
30212: ARRAY
30213: PPUSH
30214: LD_VAR 0 3
30218: PPUSH
30219: CALL_OW 3
30223: PPUSH
30224: CALL_OW 1
30228: ST_TO_ADDR
// end ; end ;
30229: GO 30058
30231: POP
30232: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30233: LD_VAR 0 1
30237: PPUSH
30238: LD_EXP 107
30242: PUSH
30243: LD_VAR 0 4
30247: ARRAY
30248: PUSH
30249: LD_INT 0
30251: PLUS
30252: PPUSH
30253: CALL_OW 505
// end ;
30257: LD_VAR 0 2
30261: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30262: LD_INT 0
30264: PPUSH
30265: PPUSH
30266: PPUSH
30267: PPUSH
// if not hack in hackTanks then
30268: LD_VAR 0 1
30272: PUSH
30273: LD_EXP 106
30277: IN
30278: NOT
30279: IFFALSE 30283
// exit ;
30281: GO 30368
// index := GetElementIndex ( hackTanks , hack ) ;
30283: LD_ADDR_VAR 0 5
30287: PUSH
30288: LD_EXP 106
30292: PPUSH
30293: LD_VAR 0 1
30297: PPUSH
30298: CALL 35104 0 2
30302: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30303: LD_ADDR_VAR 0 4
30307: PUSH
30308: DOUBLE
30309: LD_INT 1
30311: DEC
30312: ST_TO_ADDR
30313: LD_EXP 107
30317: PUSH
30318: LD_VAR 0 5
30322: ARRAY
30323: PUSH
30324: FOR_TO
30325: IFFALSE 30366
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30327: LD_EXP 107
30331: PUSH
30332: LD_VAR 0 5
30336: ARRAY
30337: PUSH
30338: LD_VAR 0 4
30342: ARRAY
30343: PUSH
30344: LD_INT 1
30346: ARRAY
30347: PUSH
30348: LD_VAR 0 2
30352: EQUAL
30353: IFFALSE 30364
// KillUnit ( vehicle ) ;
30355: LD_VAR 0 2
30359: PPUSH
30360: CALL_OW 66
30364: GO 30324
30366: POP
30367: POP
// end ; end_of_file
30368: LD_VAR 0 3
30372: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30373: LD_INT 0
30375: PPUSH
30376: PPUSH
// if exist_mode then
30377: LD_VAR 0 2
30381: IFFALSE 30406
// unit := CreateCharacter ( prefix & ident ) else
30383: LD_ADDR_VAR 0 5
30387: PUSH
30388: LD_VAR 0 3
30392: PUSH
30393: LD_VAR 0 1
30397: STR
30398: PPUSH
30399: CALL_OW 34
30403: ST_TO_ADDR
30404: GO 30421
// unit := NewCharacter ( ident ) ;
30406: LD_ADDR_VAR 0 5
30410: PUSH
30411: LD_VAR 0 1
30415: PPUSH
30416: CALL_OW 25
30420: ST_TO_ADDR
// result := unit ;
30421: LD_ADDR_VAR 0 4
30425: PUSH
30426: LD_VAR 0 5
30430: ST_TO_ADDR
// end ;
30431: LD_VAR 0 4
30435: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30436: LD_INT 0
30438: PPUSH
30439: PPUSH
// if not side or not nation then
30440: LD_VAR 0 1
30444: NOT
30445: PUSH
30446: LD_VAR 0 2
30450: NOT
30451: OR
30452: IFFALSE 30456
// exit ;
30454: GO 31220
// case nation of nation_american :
30456: LD_VAR 0 2
30460: PUSH
30461: LD_INT 1
30463: DOUBLE
30464: EQUAL
30465: IFTRUE 30469
30467: GO 30683
30469: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30470: LD_ADDR_VAR 0 4
30474: PUSH
30475: LD_INT 35
30477: PUSH
30478: LD_INT 45
30480: PUSH
30481: LD_INT 46
30483: PUSH
30484: LD_INT 47
30486: PUSH
30487: LD_INT 82
30489: PUSH
30490: LD_INT 83
30492: PUSH
30493: LD_INT 84
30495: PUSH
30496: LD_INT 85
30498: PUSH
30499: LD_INT 86
30501: PUSH
30502: LD_INT 1
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: LD_INT 6
30510: PUSH
30511: LD_INT 15
30513: PUSH
30514: LD_INT 16
30516: PUSH
30517: LD_INT 7
30519: PUSH
30520: LD_INT 12
30522: PUSH
30523: LD_INT 13
30525: PUSH
30526: LD_INT 10
30528: PUSH
30529: LD_INT 14
30531: PUSH
30532: LD_INT 20
30534: PUSH
30535: LD_INT 21
30537: PUSH
30538: LD_INT 22
30540: PUSH
30541: LD_INT 25
30543: PUSH
30544: LD_INT 32
30546: PUSH
30547: LD_INT 27
30549: PUSH
30550: LD_INT 36
30552: PUSH
30553: LD_INT 69
30555: PUSH
30556: LD_INT 39
30558: PUSH
30559: LD_INT 34
30561: PUSH
30562: LD_INT 40
30564: PUSH
30565: LD_INT 48
30567: PUSH
30568: LD_INT 49
30570: PUSH
30571: LD_INT 50
30573: PUSH
30574: LD_INT 51
30576: PUSH
30577: LD_INT 52
30579: PUSH
30580: LD_INT 53
30582: PUSH
30583: LD_INT 54
30585: PUSH
30586: LD_INT 55
30588: PUSH
30589: LD_INT 56
30591: PUSH
30592: LD_INT 57
30594: PUSH
30595: LD_INT 58
30597: PUSH
30598: LD_INT 59
30600: PUSH
30601: LD_INT 60
30603: PUSH
30604: LD_INT 61
30606: PUSH
30607: LD_INT 62
30609: PUSH
30610: LD_INT 80
30612: PUSH
30613: LD_INT 82
30615: PUSH
30616: LD_INT 83
30618: PUSH
30619: LD_INT 84
30621: PUSH
30622: LD_INT 85
30624: PUSH
30625: LD_INT 86
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: ST_TO_ADDR
30681: GO 31144
30683: LD_INT 2
30685: DOUBLE
30686: EQUAL
30687: IFTRUE 30691
30689: GO 30913
30691: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
30692: LD_ADDR_VAR 0 4
30696: PUSH
30697: LD_INT 35
30699: PUSH
30700: LD_INT 45
30702: PUSH
30703: LD_INT 46
30705: PUSH
30706: LD_INT 47
30708: PUSH
30709: LD_INT 82
30711: PUSH
30712: LD_INT 83
30714: PUSH
30715: LD_INT 84
30717: PUSH
30718: LD_INT 85
30720: PUSH
30721: LD_INT 87
30723: PUSH
30724: LD_INT 70
30726: PUSH
30727: LD_INT 1
30729: PUSH
30730: LD_INT 11
30732: PUSH
30733: LD_INT 3
30735: PUSH
30736: LD_INT 4
30738: PUSH
30739: LD_INT 5
30741: PUSH
30742: LD_INT 6
30744: PUSH
30745: LD_INT 15
30747: PUSH
30748: LD_INT 18
30750: PUSH
30751: LD_INT 7
30753: PUSH
30754: LD_INT 17
30756: PUSH
30757: LD_INT 8
30759: PUSH
30760: LD_INT 20
30762: PUSH
30763: LD_INT 21
30765: PUSH
30766: LD_INT 22
30768: PUSH
30769: LD_INT 72
30771: PUSH
30772: LD_INT 26
30774: PUSH
30775: LD_INT 69
30777: PUSH
30778: LD_INT 39
30780: PUSH
30781: LD_INT 40
30783: PUSH
30784: LD_INT 41
30786: PUSH
30787: LD_INT 42
30789: PUSH
30790: LD_INT 43
30792: PUSH
30793: LD_INT 48
30795: PUSH
30796: LD_INT 49
30798: PUSH
30799: LD_INT 50
30801: PUSH
30802: LD_INT 51
30804: PUSH
30805: LD_INT 52
30807: PUSH
30808: LD_INT 53
30810: PUSH
30811: LD_INT 54
30813: PUSH
30814: LD_INT 55
30816: PUSH
30817: LD_INT 56
30819: PUSH
30820: LD_INT 60
30822: PUSH
30823: LD_INT 61
30825: PUSH
30826: LD_INT 62
30828: PUSH
30829: LD_INT 66
30831: PUSH
30832: LD_INT 67
30834: PUSH
30835: LD_INT 68
30837: PUSH
30838: LD_INT 81
30840: PUSH
30841: LD_INT 82
30843: PUSH
30844: LD_INT 83
30846: PUSH
30847: LD_INT 84
30849: PUSH
30850: LD_INT 85
30852: PUSH
30853: LD_INT 87
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: ST_TO_ADDR
30911: GO 31144
30913: LD_INT 3
30915: DOUBLE
30916: EQUAL
30917: IFTRUE 30921
30919: GO 31143
30921: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30922: LD_ADDR_VAR 0 4
30926: PUSH
30927: LD_INT 46
30929: PUSH
30930: LD_INT 47
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: LD_INT 2
30938: PUSH
30939: LD_INT 82
30941: PUSH
30942: LD_INT 83
30944: PUSH
30945: LD_INT 84
30947: PUSH
30948: LD_INT 85
30950: PUSH
30951: LD_INT 86
30953: PUSH
30954: LD_INT 11
30956: PUSH
30957: LD_INT 9
30959: PUSH
30960: LD_INT 20
30962: PUSH
30963: LD_INT 19
30965: PUSH
30966: LD_INT 21
30968: PUSH
30969: LD_INT 24
30971: PUSH
30972: LD_INT 22
30974: PUSH
30975: LD_INT 25
30977: PUSH
30978: LD_INT 28
30980: PUSH
30981: LD_INT 29
30983: PUSH
30984: LD_INT 30
30986: PUSH
30987: LD_INT 31
30989: PUSH
30990: LD_INT 37
30992: PUSH
30993: LD_INT 38
30995: PUSH
30996: LD_INT 32
30998: PUSH
30999: LD_INT 27
31001: PUSH
31002: LD_INT 33
31004: PUSH
31005: LD_INT 69
31007: PUSH
31008: LD_INT 39
31010: PUSH
31011: LD_INT 34
31013: PUSH
31014: LD_INT 40
31016: PUSH
31017: LD_INT 71
31019: PUSH
31020: LD_INT 23
31022: PUSH
31023: LD_INT 44
31025: PUSH
31026: LD_INT 48
31028: PUSH
31029: LD_INT 49
31031: PUSH
31032: LD_INT 50
31034: PUSH
31035: LD_INT 51
31037: PUSH
31038: LD_INT 52
31040: PUSH
31041: LD_INT 53
31043: PUSH
31044: LD_INT 54
31046: PUSH
31047: LD_INT 55
31049: PUSH
31050: LD_INT 56
31052: PUSH
31053: LD_INT 57
31055: PUSH
31056: LD_INT 58
31058: PUSH
31059: LD_INT 59
31061: PUSH
31062: LD_INT 63
31064: PUSH
31065: LD_INT 64
31067: PUSH
31068: LD_INT 65
31070: PUSH
31071: LD_INT 82
31073: PUSH
31074: LD_INT 83
31076: PUSH
31077: LD_INT 84
31079: PUSH
31080: LD_INT 85
31082: PUSH
31083: LD_INT 86
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: ST_TO_ADDR
31141: GO 31144
31143: POP
// if state > - 1 and state < 3 then
31144: LD_VAR 0 3
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: GREATER
31153: PUSH
31154: LD_VAR 0 3
31158: PUSH
31159: LD_INT 3
31161: LESS
31162: AND
31163: IFFALSE 31220
// for i in result do
31165: LD_ADDR_VAR 0 5
31169: PUSH
31170: LD_VAR 0 4
31174: PUSH
31175: FOR_IN
31176: IFFALSE 31218
// if GetTech ( i , side ) <> state then
31178: LD_VAR 0 5
31182: PPUSH
31183: LD_VAR 0 1
31187: PPUSH
31188: CALL_OW 321
31192: PUSH
31193: LD_VAR 0 3
31197: NONEQUAL
31198: IFFALSE 31216
// result := result diff i ;
31200: LD_ADDR_VAR 0 4
31204: PUSH
31205: LD_VAR 0 4
31209: PUSH
31210: LD_VAR 0 5
31214: DIFF
31215: ST_TO_ADDR
31216: GO 31175
31218: POP
31219: POP
// end ;
31220: LD_VAR 0 4
31224: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31225: LD_INT 0
31227: PPUSH
31228: PPUSH
31229: PPUSH
// result := true ;
31230: LD_ADDR_VAR 0 3
31234: PUSH
31235: LD_INT 1
31237: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31238: LD_ADDR_VAR 0 5
31242: PUSH
31243: LD_VAR 0 2
31247: PPUSH
31248: CALL_OW 480
31252: ST_TO_ADDR
// if not tmp then
31253: LD_VAR 0 5
31257: NOT
31258: IFFALSE 31262
// exit ;
31260: GO 31311
// for i in tmp do
31262: LD_ADDR_VAR 0 4
31266: PUSH
31267: LD_VAR 0 5
31271: PUSH
31272: FOR_IN
31273: IFFALSE 31309
// if GetTech ( i , side ) <> state_researched then
31275: LD_VAR 0 4
31279: PPUSH
31280: LD_VAR 0 1
31284: PPUSH
31285: CALL_OW 321
31289: PUSH
31290: LD_INT 2
31292: NONEQUAL
31293: IFFALSE 31307
// begin result := false ;
31295: LD_ADDR_VAR 0 3
31299: PUSH
31300: LD_INT 0
31302: ST_TO_ADDR
// exit ;
31303: POP
31304: POP
31305: GO 31311
// end ;
31307: GO 31272
31309: POP
31310: POP
// end ;
31311: LD_VAR 0 3
31315: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31316: LD_INT 0
31318: PPUSH
31319: PPUSH
31320: PPUSH
31321: PPUSH
31322: PPUSH
31323: PPUSH
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31331: LD_VAR 0 1
31335: NOT
31336: PUSH
31337: LD_VAR 0 1
31341: PPUSH
31342: CALL_OW 257
31346: PUSH
31347: LD_INT 9
31349: NONEQUAL
31350: OR
31351: IFFALSE 31355
// exit ;
31353: GO 31928
// side := GetSide ( unit ) ;
31355: LD_ADDR_VAR 0 9
31359: PUSH
31360: LD_VAR 0 1
31364: PPUSH
31365: CALL_OW 255
31369: ST_TO_ADDR
// tech_space := tech_spacanom ;
31370: LD_ADDR_VAR 0 12
31374: PUSH
31375: LD_INT 29
31377: ST_TO_ADDR
// tech_time := tech_taurad ;
31378: LD_ADDR_VAR 0 13
31382: PUSH
31383: LD_INT 28
31385: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31386: LD_ADDR_VAR 0 11
31390: PUSH
31391: LD_VAR 0 1
31395: PPUSH
31396: CALL_OW 310
31400: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31401: LD_VAR 0 11
31405: PPUSH
31406: CALL_OW 247
31410: PUSH
31411: LD_INT 2
31413: EQUAL
31414: IFFALSE 31418
// exit ;
31416: GO 31928
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31418: LD_ADDR_VAR 0 8
31422: PUSH
31423: LD_INT 81
31425: PUSH
31426: LD_VAR 0 9
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 3
31437: PUSH
31438: LD_INT 21
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PPUSH
31456: CALL_OW 69
31460: ST_TO_ADDR
// if not tmp then
31461: LD_VAR 0 8
31465: NOT
31466: IFFALSE 31470
// exit ;
31468: GO 31928
// if in_unit then
31470: LD_VAR 0 11
31474: IFFALSE 31498
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31476: LD_ADDR_VAR 0 10
31480: PUSH
31481: LD_VAR 0 8
31485: PPUSH
31486: LD_VAR 0 11
31490: PPUSH
31491: CALL_OW 74
31495: ST_TO_ADDR
31496: GO 31518
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31498: LD_ADDR_VAR 0 10
31502: PUSH
31503: LD_VAR 0 8
31507: PPUSH
31508: LD_VAR 0 1
31512: PPUSH
31513: CALL_OW 74
31517: ST_TO_ADDR
// if not enemy then
31518: LD_VAR 0 10
31522: NOT
31523: IFFALSE 31527
// exit ;
31525: GO 31928
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31527: LD_VAR 0 11
31531: PUSH
31532: LD_VAR 0 11
31536: PPUSH
31537: LD_VAR 0 10
31541: PPUSH
31542: CALL_OW 296
31546: PUSH
31547: LD_INT 13
31549: GREATER
31550: AND
31551: PUSH
31552: LD_VAR 0 1
31556: PPUSH
31557: LD_VAR 0 10
31561: PPUSH
31562: CALL_OW 296
31566: PUSH
31567: LD_INT 12
31569: GREATER
31570: OR
31571: IFFALSE 31575
// exit ;
31573: GO 31928
// missile := [ 1 ] ;
31575: LD_ADDR_VAR 0 14
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: EMPTY
31584: LIST
31585: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31586: LD_VAR 0 9
31590: PPUSH
31591: LD_VAR 0 12
31595: PPUSH
31596: CALL_OW 325
31600: IFFALSE 31629
// missile := Insert ( missile , missile + 1 , 2 ) ;
31602: LD_ADDR_VAR 0 14
31606: PUSH
31607: LD_VAR 0 14
31611: PPUSH
31612: LD_VAR 0 14
31616: PUSH
31617: LD_INT 1
31619: PLUS
31620: PPUSH
31621: LD_INT 2
31623: PPUSH
31624: CALL_OW 2
31628: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31629: LD_VAR 0 9
31633: PPUSH
31634: LD_VAR 0 13
31638: PPUSH
31639: CALL_OW 325
31643: PUSH
31644: LD_VAR 0 10
31648: PPUSH
31649: CALL_OW 255
31653: PPUSH
31654: LD_VAR 0 13
31658: PPUSH
31659: CALL_OW 325
31663: NOT
31664: AND
31665: IFFALSE 31694
// missile := Insert ( missile , missile + 1 , 3 ) ;
31667: LD_ADDR_VAR 0 14
31671: PUSH
31672: LD_VAR 0 14
31676: PPUSH
31677: LD_VAR 0 14
31681: PUSH
31682: LD_INT 1
31684: PLUS
31685: PPUSH
31686: LD_INT 3
31688: PPUSH
31689: CALL_OW 2
31693: ST_TO_ADDR
// if missile < 2 then
31694: LD_VAR 0 14
31698: PUSH
31699: LD_INT 2
31701: LESS
31702: IFFALSE 31706
// exit ;
31704: GO 31928
// x := GetX ( enemy ) ;
31706: LD_ADDR_VAR 0 4
31710: PUSH
31711: LD_VAR 0 10
31715: PPUSH
31716: CALL_OW 250
31720: ST_TO_ADDR
// y := GetY ( enemy ) ;
31721: LD_ADDR_VAR 0 5
31725: PUSH
31726: LD_VAR 0 10
31730: PPUSH
31731: CALL_OW 251
31735: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31736: LD_ADDR_VAR 0 6
31740: PUSH
31741: LD_VAR 0 4
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PPUSH
31750: LD_INT 1
31752: PPUSH
31753: CALL_OW 12
31757: PLUS
31758: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31759: LD_ADDR_VAR 0 7
31763: PUSH
31764: LD_VAR 0 5
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PPUSH
31773: LD_INT 1
31775: PPUSH
31776: CALL_OW 12
31780: PLUS
31781: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31782: LD_VAR 0 6
31786: PPUSH
31787: LD_VAR 0 7
31791: PPUSH
31792: CALL_OW 488
31796: NOT
31797: IFFALSE 31819
// begin _x := x ;
31799: LD_ADDR_VAR 0 6
31803: PUSH
31804: LD_VAR 0 4
31808: ST_TO_ADDR
// _y := y ;
31809: LD_ADDR_VAR 0 7
31813: PUSH
31814: LD_VAR 0 5
31818: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31819: LD_ADDR_VAR 0 3
31823: PUSH
31824: LD_INT 1
31826: PPUSH
31827: LD_VAR 0 14
31831: PPUSH
31832: CALL_OW 12
31836: ST_TO_ADDR
// case i of 1 :
31837: LD_VAR 0 3
31841: PUSH
31842: LD_INT 1
31844: DOUBLE
31845: EQUAL
31846: IFTRUE 31850
31848: GO 31867
31850: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31851: LD_VAR 0 1
31855: PPUSH
31856: LD_VAR 0 10
31860: PPUSH
31861: CALL_OW 115
31865: GO 31928
31867: LD_INT 2
31869: DOUBLE
31870: EQUAL
31871: IFTRUE 31875
31873: GO 31897
31875: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31876: LD_VAR 0 1
31880: PPUSH
31881: LD_VAR 0 6
31885: PPUSH
31886: LD_VAR 0 7
31890: PPUSH
31891: CALL_OW 153
31895: GO 31928
31897: LD_INT 3
31899: DOUBLE
31900: EQUAL
31901: IFTRUE 31905
31903: GO 31927
31905: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31906: LD_VAR 0 1
31910: PPUSH
31911: LD_VAR 0 6
31915: PPUSH
31916: LD_VAR 0 7
31920: PPUSH
31921: CALL_OW 154
31925: GO 31928
31927: POP
// end ;
31928: LD_VAR 0 2
31932: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31933: LD_INT 0
31935: PPUSH
31936: PPUSH
31937: PPUSH
31938: PPUSH
31939: PPUSH
31940: PPUSH
// if not unit or not building then
31941: LD_VAR 0 1
31945: NOT
31946: PUSH
31947: LD_VAR 0 2
31951: NOT
31952: OR
31953: IFFALSE 31957
// exit ;
31955: GO 32115
// x := GetX ( building ) ;
31957: LD_ADDR_VAR 0 5
31961: PUSH
31962: LD_VAR 0 2
31966: PPUSH
31967: CALL_OW 250
31971: ST_TO_ADDR
// y := GetY ( building ) ;
31972: LD_ADDR_VAR 0 6
31976: PUSH
31977: LD_VAR 0 2
31981: PPUSH
31982: CALL_OW 251
31986: ST_TO_ADDR
// for i = 0 to 5 do
31987: LD_ADDR_VAR 0 4
31991: PUSH
31992: DOUBLE
31993: LD_INT 0
31995: DEC
31996: ST_TO_ADDR
31997: LD_INT 5
31999: PUSH
32000: FOR_TO
32001: IFFALSE 32113
// begin _x := ShiftX ( x , i , 3 ) ;
32003: LD_ADDR_VAR 0 7
32007: PUSH
32008: LD_VAR 0 5
32012: PPUSH
32013: LD_VAR 0 4
32017: PPUSH
32018: LD_INT 3
32020: PPUSH
32021: CALL_OW 272
32025: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32026: LD_ADDR_VAR 0 8
32030: PUSH
32031: LD_VAR 0 6
32035: PPUSH
32036: LD_VAR 0 4
32040: PPUSH
32041: LD_INT 3
32043: PPUSH
32044: CALL_OW 273
32048: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32049: LD_VAR 0 7
32053: PPUSH
32054: LD_VAR 0 8
32058: PPUSH
32059: CALL_OW 488
32063: NOT
32064: IFFALSE 32068
// continue ;
32066: GO 32000
// if HexInfo ( _x , _y ) = 0 then
32068: LD_VAR 0 7
32072: PPUSH
32073: LD_VAR 0 8
32077: PPUSH
32078: CALL_OW 428
32082: PUSH
32083: LD_INT 0
32085: EQUAL
32086: IFFALSE 32111
// begin ComMoveXY ( unit , _x , _y ) ;
32088: LD_VAR 0 1
32092: PPUSH
32093: LD_VAR 0 7
32097: PPUSH
32098: LD_VAR 0 8
32102: PPUSH
32103: CALL_OW 111
// exit ;
32107: POP
32108: POP
32109: GO 32115
// end ; end ;
32111: GO 32000
32113: POP
32114: POP
// end ;
32115: LD_VAR 0 3
32119: RET
// export function ScanBase ( side , base_area ) ; begin
32120: LD_INT 0
32122: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32123: LD_ADDR_VAR 0 3
32127: PUSH
32128: LD_VAR 0 2
32132: PPUSH
32133: LD_INT 81
32135: PUSH
32136: LD_VAR 0 1
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PPUSH
32145: CALL_OW 70
32149: ST_TO_ADDR
// end ;
32150: LD_VAR 0 3
32154: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32155: LD_INT 0
32157: PPUSH
32158: PPUSH
32159: PPUSH
32160: PPUSH
// result := false ;
32161: LD_ADDR_VAR 0 2
32165: PUSH
32166: LD_INT 0
32168: ST_TO_ADDR
// side := GetSide ( unit ) ;
32169: LD_ADDR_VAR 0 3
32173: PUSH
32174: LD_VAR 0 1
32178: PPUSH
32179: CALL_OW 255
32183: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32184: LD_ADDR_VAR 0 4
32188: PUSH
32189: LD_VAR 0 1
32193: PPUSH
32194: CALL_OW 248
32198: ST_TO_ADDR
// case nat of 1 :
32199: LD_VAR 0 4
32203: PUSH
32204: LD_INT 1
32206: DOUBLE
32207: EQUAL
32208: IFTRUE 32212
32210: GO 32223
32212: POP
// tech := tech_lassight ; 2 :
32213: LD_ADDR_VAR 0 5
32217: PUSH
32218: LD_INT 12
32220: ST_TO_ADDR
32221: GO 32262
32223: LD_INT 2
32225: DOUBLE
32226: EQUAL
32227: IFTRUE 32231
32229: GO 32242
32231: POP
// tech := tech_mortar ; 3 :
32232: LD_ADDR_VAR 0 5
32236: PUSH
32237: LD_INT 41
32239: ST_TO_ADDR
32240: GO 32262
32242: LD_INT 3
32244: DOUBLE
32245: EQUAL
32246: IFTRUE 32250
32248: GO 32261
32250: POP
// tech := tech_bazooka ; end ;
32251: LD_ADDR_VAR 0 5
32255: PUSH
32256: LD_INT 44
32258: ST_TO_ADDR
32259: GO 32262
32261: POP
// if Researched ( side , tech ) then
32262: LD_VAR 0 3
32266: PPUSH
32267: LD_VAR 0 5
32271: PPUSH
32272: CALL_OW 325
32276: IFFALSE 32303
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32278: LD_ADDR_VAR 0 2
32282: PUSH
32283: LD_INT 5
32285: PUSH
32286: LD_INT 8
32288: PUSH
32289: LD_INT 9
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: LIST
32296: PUSH
32297: LD_VAR 0 4
32301: ARRAY
32302: ST_TO_ADDR
// end ;
32303: LD_VAR 0 2
32307: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32308: LD_INT 0
32310: PPUSH
32311: PPUSH
32312: PPUSH
// if not mines then
32313: LD_VAR 0 2
32317: NOT
32318: IFFALSE 32322
// exit ;
32320: GO 32466
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32322: LD_ADDR_VAR 0 5
32326: PUSH
32327: LD_INT 81
32329: PUSH
32330: LD_VAR 0 1
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 3
32341: PUSH
32342: LD_INT 21
32344: PUSH
32345: LD_INT 3
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PPUSH
32360: CALL_OW 69
32364: ST_TO_ADDR
// for i in mines do
32365: LD_ADDR_VAR 0 4
32369: PUSH
32370: LD_VAR 0 2
32374: PUSH
32375: FOR_IN
32376: IFFALSE 32464
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32378: LD_VAR 0 4
32382: PUSH
32383: LD_INT 1
32385: ARRAY
32386: PPUSH
32387: LD_VAR 0 4
32391: PUSH
32392: LD_INT 2
32394: ARRAY
32395: PPUSH
32396: CALL_OW 458
32400: NOT
32401: IFFALSE 32405
// continue ;
32403: GO 32375
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32405: LD_VAR 0 4
32409: PUSH
32410: LD_INT 1
32412: ARRAY
32413: PPUSH
32414: LD_VAR 0 4
32418: PUSH
32419: LD_INT 2
32421: ARRAY
32422: PPUSH
32423: CALL_OW 428
32427: PUSH
32428: LD_VAR 0 5
32432: IN
32433: IFFALSE 32462
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32435: LD_VAR 0 4
32439: PUSH
32440: LD_INT 1
32442: ARRAY
32443: PPUSH
32444: LD_VAR 0 4
32448: PUSH
32449: LD_INT 2
32451: ARRAY
32452: PPUSH
32453: LD_VAR 0 1
32457: PPUSH
32458: CALL_OW 456
// end ;
32462: GO 32375
32464: POP
32465: POP
// end ;
32466: LD_VAR 0 3
32470: RET
// export function Count ( array ) ; var i ; begin
32471: LD_INT 0
32473: PPUSH
32474: PPUSH
// result := 0 ;
32475: LD_ADDR_VAR 0 2
32479: PUSH
32480: LD_INT 0
32482: ST_TO_ADDR
// for i in array do
32483: LD_ADDR_VAR 0 3
32487: PUSH
32488: LD_VAR 0 1
32492: PUSH
32493: FOR_IN
32494: IFFALSE 32518
// if i then
32496: LD_VAR 0 3
32500: IFFALSE 32516
// result := result + 1 ;
32502: LD_ADDR_VAR 0 2
32506: PUSH
32507: LD_VAR 0 2
32511: PUSH
32512: LD_INT 1
32514: PLUS
32515: ST_TO_ADDR
32516: GO 32493
32518: POP
32519: POP
// end ;
32520: LD_VAR 0 2
32524: RET
// export function IsEmpty ( building ) ; begin
32525: LD_INT 0
32527: PPUSH
// if not building then
32528: LD_VAR 0 1
32532: NOT
32533: IFFALSE 32537
// exit ;
32535: GO 32580
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32537: LD_ADDR_VAR 0 2
32541: PUSH
32542: LD_VAR 0 1
32546: PUSH
32547: LD_INT 22
32549: PUSH
32550: LD_VAR 0 1
32554: PPUSH
32555: CALL_OW 255
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 58
32566: PUSH
32567: EMPTY
32568: LIST
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PPUSH
32574: CALL_OW 69
32578: IN
32579: ST_TO_ADDR
// end ;
32580: LD_VAR 0 2
32584: RET
// export function IsNotFull ( building ) ; begin
32585: LD_INT 0
32587: PPUSH
// if not building then
32588: LD_VAR 0 1
32592: NOT
32593: IFFALSE 32597
// exit ;
32595: GO 32616
// result := UnitsInside ( building ) < 6 ;
32597: LD_ADDR_VAR 0 2
32601: PUSH
32602: LD_VAR 0 1
32606: PPUSH
32607: CALL_OW 313
32611: PUSH
32612: LD_INT 6
32614: LESS
32615: ST_TO_ADDR
// end ;
32616: LD_VAR 0 2
32620: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32621: LD_INT 0
32623: PPUSH
32624: PPUSH
32625: PPUSH
32626: PPUSH
// tmp := [ ] ;
32627: LD_ADDR_VAR 0 3
32631: PUSH
32632: EMPTY
32633: ST_TO_ADDR
// list := [ ] ;
32634: LD_ADDR_VAR 0 5
32638: PUSH
32639: EMPTY
32640: ST_TO_ADDR
// for i = 16 to 25 do
32641: LD_ADDR_VAR 0 4
32645: PUSH
32646: DOUBLE
32647: LD_INT 16
32649: DEC
32650: ST_TO_ADDR
32651: LD_INT 25
32653: PUSH
32654: FOR_TO
32655: IFFALSE 32728
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32657: LD_ADDR_VAR 0 3
32661: PUSH
32662: LD_VAR 0 3
32666: PUSH
32667: LD_INT 22
32669: PUSH
32670: LD_VAR 0 1
32674: PPUSH
32675: CALL_OW 255
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 91
32686: PUSH
32687: LD_VAR 0 1
32691: PUSH
32692: LD_INT 6
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 30
32702: PUSH
32703: LD_VAR 0 4
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: LIST
32716: PUSH
32717: EMPTY
32718: LIST
32719: PPUSH
32720: CALL_OW 69
32724: ADD
32725: ST_TO_ADDR
32726: GO 32654
32728: POP
32729: POP
// for i = 1 to tmp do
32730: LD_ADDR_VAR 0 4
32734: PUSH
32735: DOUBLE
32736: LD_INT 1
32738: DEC
32739: ST_TO_ADDR
32740: LD_VAR 0 3
32744: PUSH
32745: FOR_TO
32746: IFFALSE 32834
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32748: LD_ADDR_VAR 0 5
32752: PUSH
32753: LD_VAR 0 5
32757: PUSH
32758: LD_VAR 0 3
32762: PUSH
32763: LD_VAR 0 4
32767: ARRAY
32768: PPUSH
32769: CALL_OW 266
32773: PUSH
32774: LD_VAR 0 3
32778: PUSH
32779: LD_VAR 0 4
32783: ARRAY
32784: PPUSH
32785: CALL_OW 250
32789: PUSH
32790: LD_VAR 0 3
32794: PUSH
32795: LD_VAR 0 4
32799: ARRAY
32800: PPUSH
32801: CALL_OW 251
32805: PUSH
32806: LD_VAR 0 3
32810: PUSH
32811: LD_VAR 0 4
32815: ARRAY
32816: PPUSH
32817: CALL_OW 254
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: PUSH
32828: EMPTY
32829: LIST
32830: ADD
32831: ST_TO_ADDR
32832: GO 32745
32834: POP
32835: POP
// result := list ;
32836: LD_ADDR_VAR 0 2
32840: PUSH
32841: LD_VAR 0 5
32845: ST_TO_ADDR
// end ;
32846: LD_VAR 0 2
32850: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32851: LD_INT 0
32853: PPUSH
32854: PPUSH
32855: PPUSH
32856: PPUSH
32857: PPUSH
32858: PPUSH
32859: PPUSH
// if not factory then
32860: LD_VAR 0 1
32864: NOT
32865: IFFALSE 32869
// exit ;
32867: GO 33462
// if control = control_apeman then
32869: LD_VAR 0 4
32873: PUSH
32874: LD_INT 5
32876: EQUAL
32877: IFFALSE 32986
// begin tmp := UnitsInside ( factory ) ;
32879: LD_ADDR_VAR 0 8
32883: PUSH
32884: LD_VAR 0 1
32888: PPUSH
32889: CALL_OW 313
32893: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32894: LD_VAR 0 8
32898: PPUSH
32899: LD_INT 25
32901: PUSH
32902: LD_INT 12
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PPUSH
32909: CALL_OW 72
32913: NOT
32914: IFFALSE 32924
// control := control_manual ;
32916: LD_ADDR_VAR 0 4
32920: PUSH
32921: LD_INT 1
32923: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32924: LD_ADDR_VAR 0 8
32928: PUSH
32929: LD_VAR 0 1
32933: PPUSH
32934: CALL 32621 0 1
32938: ST_TO_ADDR
// if tmp then
32939: LD_VAR 0 8
32943: IFFALSE 32986
// begin for i in tmp do
32945: LD_ADDR_VAR 0 7
32949: PUSH
32950: LD_VAR 0 8
32954: PUSH
32955: FOR_IN
32956: IFFALSE 32984
// if i [ 1 ] = b_ext_radio then
32958: LD_VAR 0 7
32962: PUSH
32963: LD_INT 1
32965: ARRAY
32966: PUSH
32967: LD_INT 22
32969: EQUAL
32970: IFFALSE 32982
// begin control := control_remote ;
32972: LD_ADDR_VAR 0 4
32976: PUSH
32977: LD_INT 2
32979: ST_TO_ADDR
// break ;
32980: GO 32984
// end ;
32982: GO 32955
32984: POP
32985: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32986: LD_VAR 0 1
32990: PPUSH
32991: LD_VAR 0 2
32995: PPUSH
32996: LD_VAR 0 3
33000: PPUSH
33001: LD_VAR 0 4
33005: PPUSH
33006: LD_VAR 0 5
33010: PPUSH
33011: CALL_OW 448
33015: IFFALSE 33050
// begin result := [ chassis , engine , control , weapon ] ;
33017: LD_ADDR_VAR 0 6
33021: PUSH
33022: LD_VAR 0 2
33026: PUSH
33027: LD_VAR 0 3
33031: PUSH
33032: LD_VAR 0 4
33036: PUSH
33037: LD_VAR 0 5
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
// exit ;
33048: GO 33462
// end ; _chassis := AvailableChassisList ( factory ) ;
33050: LD_ADDR_VAR 0 9
33054: PUSH
33055: LD_VAR 0 1
33059: PPUSH
33060: CALL_OW 475
33064: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33065: LD_ADDR_VAR 0 11
33069: PUSH
33070: LD_VAR 0 1
33074: PPUSH
33075: CALL_OW 476
33079: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33080: LD_ADDR_VAR 0 12
33084: PUSH
33085: LD_VAR 0 1
33089: PPUSH
33090: CALL_OW 477
33094: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33095: LD_ADDR_VAR 0 10
33099: PUSH
33100: LD_VAR 0 1
33104: PPUSH
33105: CALL_OW 478
33109: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33110: LD_VAR 0 9
33114: NOT
33115: PUSH
33116: LD_VAR 0 11
33120: NOT
33121: OR
33122: PUSH
33123: LD_VAR 0 12
33127: NOT
33128: OR
33129: PUSH
33130: LD_VAR 0 10
33134: NOT
33135: OR
33136: IFFALSE 33171
// begin result := [ chassis , engine , control , weapon ] ;
33138: LD_ADDR_VAR 0 6
33142: PUSH
33143: LD_VAR 0 2
33147: PUSH
33148: LD_VAR 0 3
33152: PUSH
33153: LD_VAR 0 4
33157: PUSH
33158: LD_VAR 0 5
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: ST_TO_ADDR
// exit ;
33169: GO 33462
// end ; if not chassis in _chassis then
33171: LD_VAR 0 2
33175: PUSH
33176: LD_VAR 0 9
33180: IN
33181: NOT
33182: IFFALSE 33208
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33184: LD_ADDR_VAR 0 2
33188: PUSH
33189: LD_VAR 0 9
33193: PUSH
33194: LD_INT 1
33196: PPUSH
33197: LD_VAR 0 9
33201: PPUSH
33202: CALL_OW 12
33206: ARRAY
33207: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33208: LD_VAR 0 2
33212: PPUSH
33213: LD_VAR 0 3
33217: PPUSH
33218: CALL 33467 0 2
33222: NOT
33223: IFFALSE 33282
// repeat engine := _engine [ 1 ] ;
33225: LD_ADDR_VAR 0 3
33229: PUSH
33230: LD_VAR 0 11
33234: PUSH
33235: LD_INT 1
33237: ARRAY
33238: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33239: LD_ADDR_VAR 0 11
33243: PUSH
33244: LD_VAR 0 11
33248: PPUSH
33249: LD_INT 1
33251: PPUSH
33252: CALL_OW 3
33256: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33257: LD_VAR 0 2
33261: PPUSH
33262: LD_VAR 0 3
33266: PPUSH
33267: CALL 33467 0 2
33271: PUSH
33272: LD_VAR 0 11
33276: PUSH
33277: EMPTY
33278: EQUAL
33279: OR
33280: IFFALSE 33225
// if not control in _control then
33282: LD_VAR 0 4
33286: PUSH
33287: LD_VAR 0 12
33291: IN
33292: NOT
33293: IFFALSE 33319
// control := _control [ rand ( 1 , _control ) ] ;
33295: LD_ADDR_VAR 0 4
33299: PUSH
33300: LD_VAR 0 12
33304: PUSH
33305: LD_INT 1
33307: PPUSH
33308: LD_VAR 0 12
33312: PPUSH
33313: CALL_OW 12
33317: ARRAY
33318: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33319: LD_VAR 0 2
33323: PPUSH
33324: LD_VAR 0 5
33328: PPUSH
33329: CALL 33687 0 2
33333: NOT
33334: IFFALSE 33393
// repeat weapon := _weapon [ 1 ] ;
33336: LD_ADDR_VAR 0 5
33340: PUSH
33341: LD_VAR 0 10
33345: PUSH
33346: LD_INT 1
33348: ARRAY
33349: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33350: LD_ADDR_VAR 0 10
33354: PUSH
33355: LD_VAR 0 10
33359: PPUSH
33360: LD_INT 1
33362: PPUSH
33363: CALL_OW 3
33367: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33368: LD_VAR 0 2
33372: PPUSH
33373: LD_VAR 0 5
33377: PPUSH
33378: CALL 33687 0 2
33382: PUSH
33383: LD_VAR 0 10
33387: PUSH
33388: EMPTY
33389: EQUAL
33390: OR
33391: IFFALSE 33336
// result := [ ] ;
33393: LD_ADDR_VAR 0 6
33397: PUSH
33398: EMPTY
33399: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33400: LD_VAR 0 1
33404: PPUSH
33405: LD_VAR 0 2
33409: PPUSH
33410: LD_VAR 0 3
33414: PPUSH
33415: LD_VAR 0 4
33419: PPUSH
33420: LD_VAR 0 5
33424: PPUSH
33425: CALL_OW 448
33429: IFFALSE 33462
// result := [ chassis , engine , control , weapon ] ;
33431: LD_ADDR_VAR 0 6
33435: PUSH
33436: LD_VAR 0 2
33440: PUSH
33441: LD_VAR 0 3
33445: PUSH
33446: LD_VAR 0 4
33450: PUSH
33451: LD_VAR 0 5
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: ST_TO_ADDR
// end ;
33462: LD_VAR 0 6
33466: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33467: LD_INT 0
33469: PPUSH
// if not chassis or not engine then
33470: LD_VAR 0 1
33474: NOT
33475: PUSH
33476: LD_VAR 0 2
33480: NOT
33481: OR
33482: IFFALSE 33486
// exit ;
33484: GO 33682
// case engine of engine_solar :
33486: LD_VAR 0 2
33490: PUSH
33491: LD_INT 2
33493: DOUBLE
33494: EQUAL
33495: IFTRUE 33499
33497: GO 33537
33499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33500: LD_ADDR_VAR 0 3
33504: PUSH
33505: LD_INT 11
33507: PUSH
33508: LD_INT 12
33510: PUSH
33511: LD_INT 13
33513: PUSH
33514: LD_INT 14
33516: PUSH
33517: LD_INT 1
33519: PUSH
33520: LD_INT 2
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: ST_TO_ADDR
33535: GO 33666
33537: LD_INT 1
33539: DOUBLE
33540: EQUAL
33541: IFTRUE 33545
33543: GO 33607
33545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33546: LD_ADDR_VAR 0 3
33550: PUSH
33551: LD_INT 11
33553: PUSH
33554: LD_INT 12
33556: PUSH
33557: LD_INT 13
33559: PUSH
33560: LD_INT 14
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 2
33568: PUSH
33569: LD_INT 3
33571: PUSH
33572: LD_INT 4
33574: PUSH
33575: LD_INT 5
33577: PUSH
33578: LD_INT 21
33580: PUSH
33581: LD_INT 23
33583: PUSH
33584: LD_INT 22
33586: PUSH
33587: LD_INT 24
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: ST_TO_ADDR
33605: GO 33666
33607: LD_INT 3
33609: DOUBLE
33610: EQUAL
33611: IFTRUE 33615
33613: GO 33665
33615: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33616: LD_ADDR_VAR 0 3
33620: PUSH
33621: LD_INT 13
33623: PUSH
33624: LD_INT 14
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 3
33632: PUSH
33633: LD_INT 4
33635: PUSH
33636: LD_INT 5
33638: PUSH
33639: LD_INT 21
33641: PUSH
33642: LD_INT 22
33644: PUSH
33645: LD_INT 23
33647: PUSH
33648: LD_INT 24
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: ST_TO_ADDR
33663: GO 33666
33665: POP
// result := ( chassis in result ) ;
33666: LD_ADDR_VAR 0 3
33670: PUSH
33671: LD_VAR 0 1
33675: PUSH
33676: LD_VAR 0 3
33680: IN
33681: ST_TO_ADDR
// end ;
33682: LD_VAR 0 3
33686: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33687: LD_INT 0
33689: PPUSH
// if not chassis or not weapon then
33690: LD_VAR 0 1
33694: NOT
33695: PUSH
33696: LD_VAR 0 2
33700: NOT
33701: OR
33702: IFFALSE 33706
// exit ;
33704: GO 34732
// case weapon of us_machine_gun :
33706: LD_VAR 0 2
33710: PUSH
33711: LD_INT 2
33713: DOUBLE
33714: EQUAL
33715: IFTRUE 33719
33717: GO 33749
33719: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33720: LD_ADDR_VAR 0 3
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: LD_INT 3
33733: PUSH
33734: LD_INT 4
33736: PUSH
33737: LD_INT 5
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: ST_TO_ADDR
33747: GO 34716
33749: LD_INT 3
33751: DOUBLE
33752: EQUAL
33753: IFTRUE 33757
33755: GO 33787
33757: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: LD_INT 3
33771: PUSH
33772: LD_INT 4
33774: PUSH
33775: LD_INT 5
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: ST_TO_ADDR
33785: GO 34716
33787: LD_INT 11
33789: DOUBLE
33790: EQUAL
33791: IFTRUE 33795
33793: GO 33825
33795: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33796: LD_ADDR_VAR 0 3
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: LD_INT 3
33809: PUSH
33810: LD_INT 4
33812: PUSH
33813: LD_INT 5
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: ST_TO_ADDR
33823: GO 34716
33825: LD_INT 4
33827: DOUBLE
33828: EQUAL
33829: IFTRUE 33833
33831: GO 33859
33833: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33834: LD_ADDR_VAR 0 3
33838: PUSH
33839: LD_INT 2
33841: PUSH
33842: LD_INT 3
33844: PUSH
33845: LD_INT 4
33847: PUSH
33848: LD_INT 5
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: ST_TO_ADDR
33857: GO 34716
33859: LD_INT 5
33861: DOUBLE
33862: EQUAL
33863: IFTRUE 33867
33865: GO 33893
33867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33868: LD_ADDR_VAR 0 3
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: LD_INT 3
33878: PUSH
33879: LD_INT 4
33881: PUSH
33882: LD_INT 5
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: ST_TO_ADDR
33891: GO 34716
33893: LD_INT 9
33895: DOUBLE
33896: EQUAL
33897: IFTRUE 33901
33899: GO 33927
33901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33902: LD_ADDR_VAR 0 3
33906: PUSH
33907: LD_INT 2
33909: PUSH
33910: LD_INT 3
33912: PUSH
33913: LD_INT 4
33915: PUSH
33916: LD_INT 5
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: ST_TO_ADDR
33925: GO 34716
33927: LD_INT 7
33929: DOUBLE
33930: EQUAL
33931: IFTRUE 33935
33933: GO 33961
33935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33936: LD_ADDR_VAR 0 3
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: LD_INT 3
33946: PUSH
33947: LD_INT 4
33949: PUSH
33950: LD_INT 5
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: ST_TO_ADDR
33959: GO 34716
33961: LD_INT 12
33963: DOUBLE
33964: EQUAL
33965: IFTRUE 33969
33967: GO 33995
33969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33970: LD_ADDR_VAR 0 3
33974: PUSH
33975: LD_INT 2
33977: PUSH
33978: LD_INT 3
33980: PUSH
33981: LD_INT 4
33983: PUSH
33984: LD_INT 5
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: ST_TO_ADDR
33993: GO 34716
33995: LD_INT 13
33997: DOUBLE
33998: EQUAL
33999: IFTRUE 34003
34001: GO 34029
34003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34004: LD_ADDR_VAR 0 3
34008: PUSH
34009: LD_INT 2
34011: PUSH
34012: LD_INT 3
34014: PUSH
34015: LD_INT 4
34017: PUSH
34018: LD_INT 5
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: ST_TO_ADDR
34027: GO 34716
34029: LD_INT 14
34031: DOUBLE
34032: EQUAL
34033: IFTRUE 34037
34035: GO 34055
34037: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34038: LD_ADDR_VAR 0 3
34042: PUSH
34043: LD_INT 4
34045: PUSH
34046: LD_INT 5
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: ST_TO_ADDR
34053: GO 34716
34055: LD_INT 6
34057: DOUBLE
34058: EQUAL
34059: IFTRUE 34063
34061: GO 34081
34063: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34064: LD_ADDR_VAR 0 3
34068: PUSH
34069: LD_INT 4
34071: PUSH
34072: LD_INT 5
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: ST_TO_ADDR
34079: GO 34716
34081: LD_INT 10
34083: DOUBLE
34084: EQUAL
34085: IFTRUE 34089
34087: GO 34107
34089: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34090: LD_ADDR_VAR 0 3
34094: PUSH
34095: LD_INT 4
34097: PUSH
34098: LD_INT 5
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: ST_TO_ADDR
34105: GO 34716
34107: LD_INT 22
34109: DOUBLE
34110: EQUAL
34111: IFTRUE 34115
34113: GO 34141
34115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34116: LD_ADDR_VAR 0 3
34120: PUSH
34121: LD_INT 11
34123: PUSH
34124: LD_INT 12
34126: PUSH
34127: LD_INT 13
34129: PUSH
34130: LD_INT 14
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: ST_TO_ADDR
34139: GO 34716
34141: LD_INT 23
34143: DOUBLE
34144: EQUAL
34145: IFTRUE 34149
34147: GO 34175
34149: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34150: LD_ADDR_VAR 0 3
34154: PUSH
34155: LD_INT 11
34157: PUSH
34158: LD_INT 12
34160: PUSH
34161: LD_INT 13
34163: PUSH
34164: LD_INT 14
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: ST_TO_ADDR
34173: GO 34716
34175: LD_INT 24
34177: DOUBLE
34178: EQUAL
34179: IFTRUE 34183
34181: GO 34209
34183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34184: LD_ADDR_VAR 0 3
34188: PUSH
34189: LD_INT 11
34191: PUSH
34192: LD_INT 12
34194: PUSH
34195: LD_INT 13
34197: PUSH
34198: LD_INT 14
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: ST_TO_ADDR
34207: GO 34716
34209: LD_INT 30
34211: DOUBLE
34212: EQUAL
34213: IFTRUE 34217
34215: GO 34243
34217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34218: LD_ADDR_VAR 0 3
34222: PUSH
34223: LD_INT 11
34225: PUSH
34226: LD_INT 12
34228: PUSH
34229: LD_INT 13
34231: PUSH
34232: LD_INT 14
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: ST_TO_ADDR
34241: GO 34716
34243: LD_INT 25
34245: DOUBLE
34246: EQUAL
34247: IFTRUE 34251
34249: GO 34269
34251: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34252: LD_ADDR_VAR 0 3
34256: PUSH
34257: LD_INT 13
34259: PUSH
34260: LD_INT 14
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: ST_TO_ADDR
34267: GO 34716
34269: LD_INT 27
34271: DOUBLE
34272: EQUAL
34273: IFTRUE 34277
34275: GO 34295
34277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34278: LD_ADDR_VAR 0 3
34282: PUSH
34283: LD_INT 13
34285: PUSH
34286: LD_INT 14
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: ST_TO_ADDR
34293: GO 34716
34295: LD_INT 28
34297: DOUBLE
34298: EQUAL
34299: IFTRUE 34303
34301: GO 34321
34303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34304: LD_ADDR_VAR 0 3
34308: PUSH
34309: LD_INT 13
34311: PUSH
34312: LD_INT 14
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: ST_TO_ADDR
34319: GO 34716
34321: LD_INT 29
34323: DOUBLE
34324: EQUAL
34325: IFTRUE 34329
34327: GO 34347
34329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34330: LD_ADDR_VAR 0 3
34334: PUSH
34335: LD_INT 13
34337: PUSH
34338: LD_INT 14
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: ST_TO_ADDR
34345: GO 34716
34347: LD_INT 31
34349: DOUBLE
34350: EQUAL
34351: IFTRUE 34355
34353: GO 34373
34355: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34356: LD_ADDR_VAR 0 3
34360: PUSH
34361: LD_INT 13
34363: PUSH
34364: LD_INT 14
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: ST_TO_ADDR
34371: GO 34716
34373: LD_INT 26
34375: DOUBLE
34376: EQUAL
34377: IFTRUE 34381
34379: GO 34399
34381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34382: LD_ADDR_VAR 0 3
34386: PUSH
34387: LD_INT 13
34389: PUSH
34390: LD_INT 14
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: ST_TO_ADDR
34397: GO 34716
34399: LD_INT 42
34401: DOUBLE
34402: EQUAL
34403: IFTRUE 34407
34405: GO 34433
34407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34408: LD_ADDR_VAR 0 3
34412: PUSH
34413: LD_INT 21
34415: PUSH
34416: LD_INT 22
34418: PUSH
34419: LD_INT 23
34421: PUSH
34422: LD_INT 24
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: ST_TO_ADDR
34431: GO 34716
34433: LD_INT 43
34435: DOUBLE
34436: EQUAL
34437: IFTRUE 34441
34439: GO 34467
34441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_INT 21
34449: PUSH
34450: LD_INT 22
34452: PUSH
34453: LD_INT 23
34455: PUSH
34456: LD_INT 24
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: ST_TO_ADDR
34465: GO 34716
34467: LD_INT 44
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34475
34473: GO 34501
34475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34476: LD_ADDR_VAR 0 3
34480: PUSH
34481: LD_INT 21
34483: PUSH
34484: LD_INT 22
34486: PUSH
34487: LD_INT 23
34489: PUSH
34490: LD_INT 24
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: ST_TO_ADDR
34499: GO 34716
34501: LD_INT 45
34503: DOUBLE
34504: EQUAL
34505: IFTRUE 34509
34507: GO 34535
34509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34510: LD_ADDR_VAR 0 3
34514: PUSH
34515: LD_INT 21
34517: PUSH
34518: LD_INT 22
34520: PUSH
34521: LD_INT 23
34523: PUSH
34524: LD_INT 24
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: ST_TO_ADDR
34533: GO 34716
34535: LD_INT 49
34537: DOUBLE
34538: EQUAL
34539: IFTRUE 34543
34541: GO 34569
34543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34544: LD_ADDR_VAR 0 3
34548: PUSH
34549: LD_INT 21
34551: PUSH
34552: LD_INT 22
34554: PUSH
34555: LD_INT 23
34557: PUSH
34558: LD_INT 24
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: ST_TO_ADDR
34567: GO 34716
34569: LD_INT 51
34571: DOUBLE
34572: EQUAL
34573: IFTRUE 34577
34575: GO 34603
34577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34578: LD_ADDR_VAR 0 3
34582: PUSH
34583: LD_INT 21
34585: PUSH
34586: LD_INT 22
34588: PUSH
34589: LD_INT 23
34591: PUSH
34592: LD_INT 24
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: ST_TO_ADDR
34601: GO 34716
34603: LD_INT 52
34605: DOUBLE
34606: EQUAL
34607: IFTRUE 34611
34609: GO 34637
34611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34612: LD_ADDR_VAR 0 3
34616: PUSH
34617: LD_INT 21
34619: PUSH
34620: LD_INT 22
34622: PUSH
34623: LD_INT 23
34625: PUSH
34626: LD_INT 24
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: ST_TO_ADDR
34635: GO 34716
34637: LD_INT 53
34639: DOUBLE
34640: EQUAL
34641: IFTRUE 34645
34643: GO 34663
34645: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34646: LD_ADDR_VAR 0 3
34650: PUSH
34651: LD_INT 23
34653: PUSH
34654: LD_INT 24
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: ST_TO_ADDR
34661: GO 34716
34663: LD_INT 46
34665: DOUBLE
34666: EQUAL
34667: IFTRUE 34671
34669: GO 34689
34671: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34672: LD_ADDR_VAR 0 3
34676: PUSH
34677: LD_INT 23
34679: PUSH
34680: LD_INT 24
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: ST_TO_ADDR
34687: GO 34716
34689: LD_INT 47
34691: DOUBLE
34692: EQUAL
34693: IFTRUE 34697
34695: GO 34715
34697: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34698: LD_ADDR_VAR 0 3
34702: PUSH
34703: LD_INT 23
34705: PUSH
34706: LD_INT 24
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: ST_TO_ADDR
34713: GO 34716
34715: POP
// result := ( chassis in result ) ;
34716: LD_ADDR_VAR 0 3
34720: PUSH
34721: LD_VAR 0 1
34725: PUSH
34726: LD_VAR 0 3
34730: IN
34731: ST_TO_ADDR
// end ;
34732: LD_VAR 0 3
34736: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34737: LD_INT 0
34739: PPUSH
34740: PPUSH
34741: PPUSH
34742: PPUSH
34743: PPUSH
34744: PPUSH
34745: PPUSH
// result := array ;
34746: LD_ADDR_VAR 0 5
34750: PUSH
34751: LD_VAR 0 1
34755: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34756: LD_VAR 0 1
34760: NOT
34761: PUSH
34762: LD_VAR 0 2
34766: NOT
34767: OR
34768: PUSH
34769: LD_VAR 0 3
34773: NOT
34774: OR
34775: PUSH
34776: LD_VAR 0 2
34780: PUSH
34781: LD_VAR 0 1
34785: GREATER
34786: OR
34787: PUSH
34788: LD_VAR 0 3
34792: PUSH
34793: LD_VAR 0 1
34797: GREATER
34798: OR
34799: IFFALSE 34803
// exit ;
34801: GO 35099
// if direction then
34803: LD_VAR 0 4
34807: IFFALSE 34871
// begin d := 1 ;
34809: LD_ADDR_VAR 0 9
34813: PUSH
34814: LD_INT 1
34816: ST_TO_ADDR
// if i_from > i_to then
34817: LD_VAR 0 2
34821: PUSH
34822: LD_VAR 0 3
34826: GREATER
34827: IFFALSE 34853
// length := ( array - i_from ) + i_to else
34829: LD_ADDR_VAR 0 11
34833: PUSH
34834: LD_VAR 0 1
34838: PUSH
34839: LD_VAR 0 2
34843: MINUS
34844: PUSH
34845: LD_VAR 0 3
34849: PLUS
34850: ST_TO_ADDR
34851: GO 34869
// length := i_to - i_from ;
34853: LD_ADDR_VAR 0 11
34857: PUSH
34858: LD_VAR 0 3
34862: PUSH
34863: LD_VAR 0 2
34867: MINUS
34868: ST_TO_ADDR
// end else
34869: GO 34932
// begin d := - 1 ;
34871: LD_ADDR_VAR 0 9
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: ST_TO_ADDR
// if i_from > i_to then
34880: LD_VAR 0 2
34884: PUSH
34885: LD_VAR 0 3
34889: GREATER
34890: IFFALSE 34910
// length := i_from - i_to else
34892: LD_ADDR_VAR 0 11
34896: PUSH
34897: LD_VAR 0 2
34901: PUSH
34902: LD_VAR 0 3
34906: MINUS
34907: ST_TO_ADDR
34908: GO 34932
// length := ( array - i_to ) + i_from ;
34910: LD_ADDR_VAR 0 11
34914: PUSH
34915: LD_VAR 0 1
34919: PUSH
34920: LD_VAR 0 3
34924: MINUS
34925: PUSH
34926: LD_VAR 0 2
34930: PLUS
34931: ST_TO_ADDR
// end ; if not length then
34932: LD_VAR 0 11
34936: NOT
34937: IFFALSE 34941
// exit ;
34939: GO 35099
// tmp := array ;
34941: LD_ADDR_VAR 0 10
34945: PUSH
34946: LD_VAR 0 1
34950: ST_TO_ADDR
// for i = 1 to length do
34951: LD_ADDR_VAR 0 6
34955: PUSH
34956: DOUBLE
34957: LD_INT 1
34959: DEC
34960: ST_TO_ADDR
34961: LD_VAR 0 11
34965: PUSH
34966: FOR_TO
34967: IFFALSE 35087
// begin for j = 1 to array do
34969: LD_ADDR_VAR 0 7
34973: PUSH
34974: DOUBLE
34975: LD_INT 1
34977: DEC
34978: ST_TO_ADDR
34979: LD_VAR 0 1
34983: PUSH
34984: FOR_TO
34985: IFFALSE 35073
// begin k := j + d ;
34987: LD_ADDR_VAR 0 8
34991: PUSH
34992: LD_VAR 0 7
34996: PUSH
34997: LD_VAR 0 9
35001: PLUS
35002: ST_TO_ADDR
// if k > array then
35003: LD_VAR 0 8
35007: PUSH
35008: LD_VAR 0 1
35012: GREATER
35013: IFFALSE 35023
// k := 1 ;
35015: LD_ADDR_VAR 0 8
35019: PUSH
35020: LD_INT 1
35022: ST_TO_ADDR
// if not k then
35023: LD_VAR 0 8
35027: NOT
35028: IFFALSE 35040
// k := array ;
35030: LD_ADDR_VAR 0 8
35034: PUSH
35035: LD_VAR 0 1
35039: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35040: LD_ADDR_VAR 0 10
35044: PUSH
35045: LD_VAR 0 10
35049: PPUSH
35050: LD_VAR 0 8
35054: PPUSH
35055: LD_VAR 0 1
35059: PUSH
35060: LD_VAR 0 7
35064: ARRAY
35065: PPUSH
35066: CALL_OW 1
35070: ST_TO_ADDR
// end ;
35071: GO 34984
35073: POP
35074: POP
// array := tmp ;
35075: LD_ADDR_VAR 0 1
35079: PUSH
35080: LD_VAR 0 10
35084: ST_TO_ADDR
// end ;
35085: GO 34966
35087: POP
35088: POP
// result := array ;
35089: LD_ADDR_VAR 0 5
35093: PUSH
35094: LD_VAR 0 1
35098: ST_TO_ADDR
// end ;
35099: LD_VAR 0 5
35103: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35104: LD_INT 0
35106: PPUSH
35107: PPUSH
// result := 0 ;
35108: LD_ADDR_VAR 0 3
35112: PUSH
35113: LD_INT 0
35115: ST_TO_ADDR
// if not array or not value in array then
35116: LD_VAR 0 1
35120: NOT
35121: PUSH
35122: LD_VAR 0 2
35126: PUSH
35127: LD_VAR 0 1
35131: IN
35132: NOT
35133: OR
35134: IFFALSE 35138
// exit ;
35136: GO 35192
// for i = 1 to array do
35138: LD_ADDR_VAR 0 4
35142: PUSH
35143: DOUBLE
35144: LD_INT 1
35146: DEC
35147: ST_TO_ADDR
35148: LD_VAR 0 1
35152: PUSH
35153: FOR_TO
35154: IFFALSE 35190
// if value = array [ i ] then
35156: LD_VAR 0 2
35160: PUSH
35161: LD_VAR 0 1
35165: PUSH
35166: LD_VAR 0 4
35170: ARRAY
35171: EQUAL
35172: IFFALSE 35188
// begin result := i ;
35174: LD_ADDR_VAR 0 3
35178: PUSH
35179: LD_VAR 0 4
35183: ST_TO_ADDR
// exit ;
35184: POP
35185: POP
35186: GO 35192
// end ;
35188: GO 35153
35190: POP
35191: POP
// end ;
35192: LD_VAR 0 3
35196: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35197: LD_INT 0
35199: PPUSH
// vc_chassis := chassis ;
35200: LD_ADDR_OWVAR 37
35204: PUSH
35205: LD_VAR 0 1
35209: ST_TO_ADDR
// vc_engine := engine ;
35210: LD_ADDR_OWVAR 39
35214: PUSH
35215: LD_VAR 0 2
35219: ST_TO_ADDR
// vc_control := control ;
35220: LD_ADDR_OWVAR 38
35224: PUSH
35225: LD_VAR 0 3
35229: ST_TO_ADDR
// vc_weapon := weapon ;
35230: LD_ADDR_OWVAR 40
35234: PUSH
35235: LD_VAR 0 4
35239: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35240: LD_ADDR_OWVAR 41
35244: PUSH
35245: LD_VAR 0 5
35249: ST_TO_ADDR
// end ;
35250: LD_VAR 0 6
35254: RET
// export function WantPlant ( unit ) ; var task ; begin
35255: LD_INT 0
35257: PPUSH
35258: PPUSH
// result := false ;
35259: LD_ADDR_VAR 0 2
35263: PUSH
35264: LD_INT 0
35266: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35267: LD_ADDR_VAR 0 3
35271: PUSH
35272: LD_VAR 0 1
35276: PPUSH
35277: CALL_OW 437
35281: ST_TO_ADDR
// if task then
35282: LD_VAR 0 3
35286: IFFALSE 35314
// if task [ 1 ] [ 1 ] = p then
35288: LD_VAR 0 3
35292: PUSH
35293: LD_INT 1
35295: ARRAY
35296: PUSH
35297: LD_INT 1
35299: ARRAY
35300: PUSH
35301: LD_STRING p
35303: EQUAL
35304: IFFALSE 35314
// result := true ;
35306: LD_ADDR_VAR 0 2
35310: PUSH
35311: LD_INT 1
35313: ST_TO_ADDR
// end ;
35314: LD_VAR 0 2
35318: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35319: LD_INT 0
35321: PPUSH
35322: PPUSH
35323: PPUSH
35324: PPUSH
// if pos < 1 then
35325: LD_VAR 0 2
35329: PUSH
35330: LD_INT 1
35332: LESS
35333: IFFALSE 35337
// exit ;
35335: GO 35640
// if pos = 1 then
35337: LD_VAR 0 2
35341: PUSH
35342: LD_INT 1
35344: EQUAL
35345: IFFALSE 35378
// result := Replace ( arr , pos [ 1 ] , value ) else
35347: LD_ADDR_VAR 0 4
35351: PUSH
35352: LD_VAR 0 1
35356: PPUSH
35357: LD_VAR 0 2
35361: PUSH
35362: LD_INT 1
35364: ARRAY
35365: PPUSH
35366: LD_VAR 0 3
35370: PPUSH
35371: CALL_OW 1
35375: ST_TO_ADDR
35376: GO 35640
// begin tmp := arr ;
35378: LD_ADDR_VAR 0 6
35382: PUSH
35383: LD_VAR 0 1
35387: ST_TO_ADDR
// s_arr := [ tmp ] ;
35388: LD_ADDR_VAR 0 7
35392: PUSH
35393: LD_VAR 0 6
35397: PUSH
35398: EMPTY
35399: LIST
35400: ST_TO_ADDR
// for i = 1 to pos - 1 do
35401: LD_ADDR_VAR 0 5
35405: PUSH
35406: DOUBLE
35407: LD_INT 1
35409: DEC
35410: ST_TO_ADDR
35411: LD_VAR 0 2
35415: PUSH
35416: LD_INT 1
35418: MINUS
35419: PUSH
35420: FOR_TO
35421: IFFALSE 35466
// begin tmp := tmp [ pos [ i ] ] ;
35423: LD_ADDR_VAR 0 6
35427: PUSH
35428: LD_VAR 0 6
35432: PUSH
35433: LD_VAR 0 2
35437: PUSH
35438: LD_VAR 0 5
35442: ARRAY
35443: ARRAY
35444: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35445: LD_ADDR_VAR 0 7
35449: PUSH
35450: LD_VAR 0 7
35454: PUSH
35455: LD_VAR 0 6
35459: PUSH
35460: EMPTY
35461: LIST
35462: ADD
35463: ST_TO_ADDR
// end ;
35464: GO 35420
35466: POP
35467: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35468: LD_ADDR_VAR 0 6
35472: PUSH
35473: LD_VAR 0 6
35477: PPUSH
35478: LD_VAR 0 2
35482: PUSH
35483: LD_VAR 0 2
35487: ARRAY
35488: PPUSH
35489: LD_VAR 0 3
35493: PPUSH
35494: CALL_OW 1
35498: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35499: LD_ADDR_VAR 0 7
35503: PUSH
35504: LD_VAR 0 7
35508: PPUSH
35509: LD_VAR 0 7
35513: PPUSH
35514: LD_VAR 0 6
35518: PPUSH
35519: CALL_OW 1
35523: ST_TO_ADDR
// for i = s_arr downto 2 do
35524: LD_ADDR_VAR 0 5
35528: PUSH
35529: DOUBLE
35530: LD_VAR 0 7
35534: INC
35535: ST_TO_ADDR
35536: LD_INT 2
35538: PUSH
35539: FOR_DOWNTO
35540: IFFALSE 35624
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35542: LD_ADDR_VAR 0 6
35546: PUSH
35547: LD_VAR 0 7
35551: PUSH
35552: LD_VAR 0 5
35556: PUSH
35557: LD_INT 1
35559: MINUS
35560: ARRAY
35561: PPUSH
35562: LD_VAR 0 2
35566: PUSH
35567: LD_VAR 0 5
35571: PUSH
35572: LD_INT 1
35574: MINUS
35575: ARRAY
35576: PPUSH
35577: LD_VAR 0 7
35581: PUSH
35582: LD_VAR 0 5
35586: ARRAY
35587: PPUSH
35588: CALL_OW 1
35592: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35593: LD_ADDR_VAR 0 7
35597: PUSH
35598: LD_VAR 0 7
35602: PPUSH
35603: LD_VAR 0 5
35607: PUSH
35608: LD_INT 1
35610: MINUS
35611: PPUSH
35612: LD_VAR 0 6
35616: PPUSH
35617: CALL_OW 1
35621: ST_TO_ADDR
// end ;
35622: GO 35539
35624: POP
35625: POP
// result := s_arr [ 1 ] ;
35626: LD_ADDR_VAR 0 4
35630: PUSH
35631: LD_VAR 0 7
35635: PUSH
35636: LD_INT 1
35638: ARRAY
35639: ST_TO_ADDR
// end ; end ;
35640: LD_VAR 0 4
35644: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35645: LD_INT 0
35647: PPUSH
35648: PPUSH
// if not list then
35649: LD_VAR 0 1
35653: NOT
35654: IFFALSE 35658
// exit ;
35656: GO 35749
// i := list [ pos1 ] ;
35658: LD_ADDR_VAR 0 5
35662: PUSH
35663: LD_VAR 0 1
35667: PUSH
35668: LD_VAR 0 2
35672: ARRAY
35673: ST_TO_ADDR
// if not i then
35674: LD_VAR 0 5
35678: NOT
35679: IFFALSE 35683
// exit ;
35681: GO 35749
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35683: LD_ADDR_VAR 0 1
35687: PUSH
35688: LD_VAR 0 1
35692: PPUSH
35693: LD_VAR 0 2
35697: PPUSH
35698: LD_VAR 0 1
35702: PUSH
35703: LD_VAR 0 3
35707: ARRAY
35708: PPUSH
35709: CALL_OW 1
35713: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35714: LD_ADDR_VAR 0 1
35718: PUSH
35719: LD_VAR 0 1
35723: PPUSH
35724: LD_VAR 0 3
35728: PPUSH
35729: LD_VAR 0 5
35733: PPUSH
35734: CALL_OW 1
35738: ST_TO_ADDR
// result := list ;
35739: LD_ADDR_VAR 0 4
35743: PUSH
35744: LD_VAR 0 1
35748: ST_TO_ADDR
// end ;
35749: LD_VAR 0 4
35753: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35754: LD_INT 0
35756: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35757: LD_ADDR_VAR 0 5
35761: PUSH
35762: LD_VAR 0 1
35766: PPUSH
35767: CALL_OW 250
35771: PPUSH
35772: LD_VAR 0 1
35776: PPUSH
35777: CALL_OW 251
35781: PPUSH
35782: LD_VAR 0 2
35786: PPUSH
35787: LD_VAR 0 3
35791: PPUSH
35792: LD_VAR 0 4
35796: PPUSH
35797: CALL 35807 0 5
35801: ST_TO_ADDR
// end ;
35802: LD_VAR 0 5
35806: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35807: LD_INT 0
35809: PPUSH
35810: PPUSH
35811: PPUSH
35812: PPUSH
// if not list then
35813: LD_VAR 0 3
35817: NOT
35818: IFFALSE 35822
// exit ;
35820: GO 36210
// result := [ ] ;
35822: LD_ADDR_VAR 0 6
35826: PUSH
35827: EMPTY
35828: ST_TO_ADDR
// for i in list do
35829: LD_ADDR_VAR 0 7
35833: PUSH
35834: LD_VAR 0 3
35838: PUSH
35839: FOR_IN
35840: IFFALSE 36042
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35842: LD_ADDR_VAR 0 9
35846: PUSH
35847: LD_VAR 0 7
35851: PPUSH
35852: LD_VAR 0 1
35856: PPUSH
35857: LD_VAR 0 2
35861: PPUSH
35862: CALL_OW 297
35866: ST_TO_ADDR
// if not result then
35867: LD_VAR 0 6
35871: NOT
35872: IFFALSE 35898
// result := [ [ i , tmp ] ] else
35874: LD_ADDR_VAR 0 6
35878: PUSH
35879: LD_VAR 0 7
35883: PUSH
35884: LD_VAR 0 9
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: EMPTY
35894: LIST
35895: ST_TO_ADDR
35896: GO 36040
// begin if result [ result ] [ 2 ] < tmp then
35898: LD_VAR 0 6
35902: PUSH
35903: LD_VAR 0 6
35907: ARRAY
35908: PUSH
35909: LD_INT 2
35911: ARRAY
35912: PUSH
35913: LD_VAR 0 9
35917: LESS
35918: IFFALSE 35960
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35920: LD_ADDR_VAR 0 6
35924: PUSH
35925: LD_VAR 0 6
35929: PPUSH
35930: LD_VAR 0 6
35934: PUSH
35935: LD_INT 1
35937: PLUS
35938: PPUSH
35939: LD_VAR 0 7
35943: PUSH
35944: LD_VAR 0 9
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PPUSH
35953: CALL_OW 2
35957: ST_TO_ADDR
35958: GO 36040
// for j = 1 to result do
35960: LD_ADDR_VAR 0 8
35964: PUSH
35965: DOUBLE
35966: LD_INT 1
35968: DEC
35969: ST_TO_ADDR
35970: LD_VAR 0 6
35974: PUSH
35975: FOR_TO
35976: IFFALSE 36038
// begin if tmp < result [ j ] [ 2 ] then
35978: LD_VAR 0 9
35982: PUSH
35983: LD_VAR 0 6
35987: PUSH
35988: LD_VAR 0 8
35992: ARRAY
35993: PUSH
35994: LD_INT 2
35996: ARRAY
35997: LESS
35998: IFFALSE 36036
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36000: LD_ADDR_VAR 0 6
36004: PUSH
36005: LD_VAR 0 6
36009: PPUSH
36010: LD_VAR 0 8
36014: PPUSH
36015: LD_VAR 0 7
36019: PUSH
36020: LD_VAR 0 9
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PPUSH
36029: CALL_OW 2
36033: ST_TO_ADDR
// break ;
36034: GO 36038
// end ; end ;
36036: GO 35975
36038: POP
36039: POP
// end ; end ;
36040: GO 35839
36042: POP
36043: POP
// if result and not asc then
36044: LD_VAR 0 6
36048: PUSH
36049: LD_VAR 0 4
36053: NOT
36054: AND
36055: IFFALSE 36130
// begin tmp := result ;
36057: LD_ADDR_VAR 0 9
36061: PUSH
36062: LD_VAR 0 6
36066: ST_TO_ADDR
// for i = tmp downto 1 do
36067: LD_ADDR_VAR 0 7
36071: PUSH
36072: DOUBLE
36073: LD_VAR 0 9
36077: INC
36078: ST_TO_ADDR
36079: LD_INT 1
36081: PUSH
36082: FOR_DOWNTO
36083: IFFALSE 36128
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36085: LD_ADDR_VAR 0 6
36089: PUSH
36090: LD_VAR 0 6
36094: PPUSH
36095: LD_VAR 0 9
36099: PUSH
36100: LD_VAR 0 7
36104: MINUS
36105: PUSH
36106: LD_INT 1
36108: PLUS
36109: PPUSH
36110: LD_VAR 0 9
36114: PUSH
36115: LD_VAR 0 7
36119: ARRAY
36120: PPUSH
36121: CALL_OW 1
36125: ST_TO_ADDR
36126: GO 36082
36128: POP
36129: POP
// end ; tmp := [ ] ;
36130: LD_ADDR_VAR 0 9
36134: PUSH
36135: EMPTY
36136: ST_TO_ADDR
// if mode then
36137: LD_VAR 0 5
36141: IFFALSE 36210
// begin for i = 1 to result do
36143: LD_ADDR_VAR 0 7
36147: PUSH
36148: DOUBLE
36149: LD_INT 1
36151: DEC
36152: ST_TO_ADDR
36153: LD_VAR 0 6
36157: PUSH
36158: FOR_TO
36159: IFFALSE 36198
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36161: LD_ADDR_VAR 0 9
36165: PUSH
36166: LD_VAR 0 9
36170: PPUSH
36171: LD_VAR 0 7
36175: PPUSH
36176: LD_VAR 0 6
36180: PUSH
36181: LD_VAR 0 7
36185: ARRAY
36186: PUSH
36187: LD_INT 1
36189: ARRAY
36190: PPUSH
36191: CALL_OW 1
36195: ST_TO_ADDR
36196: GO 36158
36198: POP
36199: POP
// result := tmp ;
36200: LD_ADDR_VAR 0 6
36204: PUSH
36205: LD_VAR 0 9
36209: ST_TO_ADDR
// end ; end ;
36210: LD_VAR 0 6
36214: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36215: LD_INT 0
36217: PPUSH
36218: PPUSH
36219: PPUSH
36220: PPUSH
36221: PPUSH
36222: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36223: LD_ADDR_VAR 0 5
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: ST_TO_ADDR
// if not x or not y then
36245: LD_VAR 0 2
36249: NOT
36250: PUSH
36251: LD_VAR 0 3
36255: NOT
36256: OR
36257: IFFALSE 36261
// exit ;
36259: GO 37907
// if not range then
36261: LD_VAR 0 4
36265: NOT
36266: IFFALSE 36276
// range := 10 ;
36268: LD_ADDR_VAR 0 4
36272: PUSH
36273: LD_INT 10
36275: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36276: LD_ADDR_VAR 0 8
36280: PUSH
36281: LD_INT 81
36283: PUSH
36284: LD_VAR 0 1
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 92
36295: PUSH
36296: LD_VAR 0 2
36300: PUSH
36301: LD_VAR 0 3
36305: PUSH
36306: LD_VAR 0 4
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 3
36319: PUSH
36320: LD_INT 21
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: LIST
36338: PPUSH
36339: CALL_OW 69
36343: ST_TO_ADDR
// if not tmp then
36344: LD_VAR 0 8
36348: NOT
36349: IFFALSE 36353
// exit ;
36351: GO 37907
// for i in tmp do
36353: LD_ADDR_VAR 0 6
36357: PUSH
36358: LD_VAR 0 8
36362: PUSH
36363: FOR_IN
36364: IFFALSE 37882
// begin points := [ 0 , 0 , 0 ] ;
36366: LD_ADDR_VAR 0 9
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: LIST
36384: ST_TO_ADDR
// bpoints := 1 ;
36385: LD_ADDR_VAR 0 10
36389: PUSH
36390: LD_INT 1
36392: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36393: LD_VAR 0 6
36397: PPUSH
36398: CALL_OW 247
36402: PUSH
36403: LD_INT 1
36405: DOUBLE
36406: EQUAL
36407: IFTRUE 36411
36409: GO 36989
36411: POP
// begin if GetClass ( i ) = 1 then
36412: LD_VAR 0 6
36416: PPUSH
36417: CALL_OW 257
36421: PUSH
36422: LD_INT 1
36424: EQUAL
36425: IFFALSE 36446
// points := [ 10 , 5 , 3 ] ;
36427: LD_ADDR_VAR 0 9
36431: PUSH
36432: LD_INT 10
36434: PUSH
36435: LD_INT 5
36437: PUSH
36438: LD_INT 3
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36446: LD_VAR 0 6
36450: PPUSH
36451: CALL_OW 257
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: LD_INT 3
36461: PUSH
36462: LD_INT 4
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: LIST
36469: IN
36470: IFFALSE 36491
// points := [ 3 , 2 , 1 ] ;
36472: LD_ADDR_VAR 0 9
36476: PUSH
36477: LD_INT 3
36479: PUSH
36480: LD_INT 2
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: LIST
36490: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36491: LD_VAR 0 6
36495: PPUSH
36496: CALL_OW 257
36500: PUSH
36501: LD_INT 5
36503: EQUAL
36504: IFFALSE 36525
// points := [ 130 , 5 , 2 ] ;
36506: LD_ADDR_VAR 0 9
36510: PUSH
36511: LD_INT 130
36513: PUSH
36514: LD_INT 5
36516: PUSH
36517: LD_INT 2
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36525: LD_VAR 0 6
36529: PPUSH
36530: CALL_OW 257
36534: PUSH
36535: LD_INT 8
36537: EQUAL
36538: IFFALSE 36559
// points := [ 35 , 35 , 30 ] ;
36540: LD_ADDR_VAR 0 9
36544: PUSH
36545: LD_INT 35
36547: PUSH
36548: LD_INT 35
36550: PUSH
36551: LD_INT 30
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: LIST
36558: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36559: LD_VAR 0 6
36563: PPUSH
36564: CALL_OW 257
36568: PUSH
36569: LD_INT 9
36571: EQUAL
36572: IFFALSE 36593
// points := [ 20 , 55 , 40 ] ;
36574: LD_ADDR_VAR 0 9
36578: PUSH
36579: LD_INT 20
36581: PUSH
36582: LD_INT 55
36584: PUSH
36585: LD_INT 40
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: LIST
36592: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36593: LD_VAR 0 6
36597: PPUSH
36598: CALL_OW 257
36602: PUSH
36603: LD_INT 12
36605: PUSH
36606: LD_INT 16
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: IN
36613: IFFALSE 36634
// points := [ 5 , 3 , 2 ] ;
36615: LD_ADDR_VAR 0 9
36619: PUSH
36620: LD_INT 5
36622: PUSH
36623: LD_INT 3
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: LIST
36633: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36634: LD_VAR 0 6
36638: PPUSH
36639: CALL_OW 257
36643: PUSH
36644: LD_INT 17
36646: EQUAL
36647: IFFALSE 36668
// points := [ 100 , 50 , 75 ] ;
36649: LD_ADDR_VAR 0 9
36653: PUSH
36654: LD_INT 100
36656: PUSH
36657: LD_INT 50
36659: PUSH
36660: LD_INT 75
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: LIST
36667: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36668: LD_VAR 0 6
36672: PPUSH
36673: CALL_OW 257
36677: PUSH
36678: LD_INT 15
36680: EQUAL
36681: IFFALSE 36702
// points := [ 10 , 5 , 3 ] ;
36683: LD_ADDR_VAR 0 9
36687: PUSH
36688: LD_INT 10
36690: PUSH
36691: LD_INT 5
36693: PUSH
36694: LD_INT 3
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: LIST
36701: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36702: LD_VAR 0 6
36706: PPUSH
36707: CALL_OW 257
36711: PUSH
36712: LD_INT 14
36714: EQUAL
36715: IFFALSE 36736
// points := [ 10 , 0 , 0 ] ;
36717: LD_ADDR_VAR 0 9
36721: PUSH
36722: LD_INT 10
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: LIST
36735: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36736: LD_VAR 0 6
36740: PPUSH
36741: CALL_OW 257
36745: PUSH
36746: LD_INT 11
36748: EQUAL
36749: IFFALSE 36770
// points := [ 30 , 10 , 5 ] ;
36751: LD_ADDR_VAR 0 9
36755: PUSH
36756: LD_INT 30
36758: PUSH
36759: LD_INT 10
36761: PUSH
36762: LD_INT 5
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: LIST
36769: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36770: LD_VAR 0 1
36774: PPUSH
36775: LD_INT 5
36777: PPUSH
36778: CALL_OW 321
36782: PUSH
36783: LD_INT 2
36785: EQUAL
36786: IFFALSE 36803
// bpoints := bpoints * 1.8 ;
36788: LD_ADDR_VAR 0 10
36792: PUSH
36793: LD_VAR 0 10
36797: PUSH
36798: LD_REAL  1.80000000000000E+0000
36801: MUL
36802: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36803: LD_VAR 0 6
36807: PPUSH
36808: CALL_OW 257
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 2
36818: PUSH
36819: LD_INT 3
36821: PUSH
36822: LD_INT 4
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: IN
36831: PUSH
36832: LD_VAR 0 1
36836: PPUSH
36837: LD_INT 51
36839: PPUSH
36840: CALL_OW 321
36844: PUSH
36845: LD_INT 2
36847: EQUAL
36848: AND
36849: IFFALSE 36866
// bpoints := bpoints * 1.2 ;
36851: LD_ADDR_VAR 0 10
36855: PUSH
36856: LD_VAR 0 10
36860: PUSH
36861: LD_REAL  1.20000000000000E+0000
36864: MUL
36865: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36866: LD_VAR 0 6
36870: PPUSH
36871: CALL_OW 257
36875: PUSH
36876: LD_INT 5
36878: PUSH
36879: LD_INT 7
36881: PUSH
36882: LD_INT 9
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: IN
36890: PUSH
36891: LD_VAR 0 1
36895: PPUSH
36896: LD_INT 52
36898: PPUSH
36899: CALL_OW 321
36903: PUSH
36904: LD_INT 2
36906: EQUAL
36907: AND
36908: IFFALSE 36925
// bpoints := bpoints * 1.5 ;
36910: LD_ADDR_VAR 0 10
36914: PUSH
36915: LD_VAR 0 10
36919: PUSH
36920: LD_REAL  1.50000000000000E+0000
36923: MUL
36924: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36925: LD_VAR 0 1
36929: PPUSH
36930: LD_INT 66
36932: PPUSH
36933: CALL_OW 321
36937: PUSH
36938: LD_INT 2
36940: EQUAL
36941: IFFALSE 36958
// bpoints := bpoints * 1.1 ;
36943: LD_ADDR_VAR 0 10
36947: PUSH
36948: LD_VAR 0 10
36952: PUSH
36953: LD_REAL  1.10000000000000E+0000
36956: MUL
36957: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36958: LD_ADDR_VAR 0 10
36962: PUSH
36963: LD_VAR 0 10
36967: PUSH
36968: LD_VAR 0 6
36972: PPUSH
36973: LD_INT 1
36975: PPUSH
36976: CALL_OW 259
36980: PUSH
36981: LD_REAL  1.15000000000000E+0000
36984: MUL
36985: MUL
36986: ST_TO_ADDR
// end ; unit_vehicle :
36987: GO 37811
36989: LD_INT 2
36991: DOUBLE
36992: EQUAL
36993: IFTRUE 36997
36995: GO 37799
36997: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36998: LD_VAR 0 6
37002: PPUSH
37003: CALL_OW 264
37007: PUSH
37008: LD_INT 2
37010: PUSH
37011: LD_INT 42
37013: PUSH
37014: LD_INT 24
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: IN
37022: IFFALSE 37043
// points := [ 25 , 5 , 3 ] ;
37024: LD_ADDR_VAR 0 9
37028: PUSH
37029: LD_INT 25
37031: PUSH
37032: LD_INT 5
37034: PUSH
37035: LD_INT 3
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37043: LD_VAR 0 6
37047: PPUSH
37048: CALL_OW 264
37052: PUSH
37053: LD_INT 4
37055: PUSH
37056: LD_INT 43
37058: PUSH
37059: LD_INT 25
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: LIST
37066: IN
37067: IFFALSE 37088
// points := [ 40 , 15 , 5 ] ;
37069: LD_ADDR_VAR 0 9
37073: PUSH
37074: LD_INT 40
37076: PUSH
37077: LD_INT 15
37079: PUSH
37080: LD_INT 5
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: LIST
37087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37088: LD_VAR 0 6
37092: PPUSH
37093: CALL_OW 264
37097: PUSH
37098: LD_INT 3
37100: PUSH
37101: LD_INT 23
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: IN
37108: IFFALSE 37129
// points := [ 7 , 25 , 8 ] ;
37110: LD_ADDR_VAR 0 9
37114: PUSH
37115: LD_INT 7
37117: PUSH
37118: LD_INT 25
37120: PUSH
37121: LD_INT 8
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: LIST
37128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37129: LD_VAR 0 6
37133: PPUSH
37134: CALL_OW 264
37138: PUSH
37139: LD_INT 5
37141: PUSH
37142: LD_INT 27
37144: PUSH
37145: LD_INT 44
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: LIST
37152: IN
37153: IFFALSE 37174
// points := [ 14 , 50 , 16 ] ;
37155: LD_ADDR_VAR 0 9
37159: PUSH
37160: LD_INT 14
37162: PUSH
37163: LD_INT 50
37165: PUSH
37166: LD_INT 16
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: LIST
37173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37174: LD_VAR 0 6
37178: PPUSH
37179: CALL_OW 264
37183: PUSH
37184: LD_INT 6
37186: PUSH
37187: LD_INT 46
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: IN
37194: IFFALSE 37215
// points := [ 32 , 120 , 70 ] ;
37196: LD_ADDR_VAR 0 9
37200: PUSH
37201: LD_INT 32
37203: PUSH
37204: LD_INT 120
37206: PUSH
37207: LD_INT 70
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
37215: LD_VAR 0 6
37219: PPUSH
37220: CALL_OW 264
37224: PUSH
37225: LD_INT 7
37227: PUSH
37228: LD_INT 28
37230: PUSH
37231: LD_INT 45
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: LIST
37238: IN
37239: IFFALSE 37260
// points := [ 35 , 20 , 45 ] ;
37241: LD_ADDR_VAR 0 9
37245: PUSH
37246: LD_INT 35
37248: PUSH
37249: LD_INT 20
37251: PUSH
37252: LD_INT 45
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37260: LD_VAR 0 6
37264: PPUSH
37265: CALL_OW 264
37269: PUSH
37270: LD_INT 47
37272: PUSH
37273: EMPTY
37274: LIST
37275: IN
37276: IFFALSE 37297
// points := [ 67 , 45 , 75 ] ;
37278: LD_ADDR_VAR 0 9
37282: PUSH
37283: LD_INT 67
37285: PUSH
37286: LD_INT 45
37288: PUSH
37289: LD_INT 75
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37297: LD_VAR 0 6
37301: PPUSH
37302: CALL_OW 264
37306: PUSH
37307: LD_INT 26
37309: PUSH
37310: EMPTY
37311: LIST
37312: IN
37313: IFFALSE 37334
// points := [ 120 , 30 , 80 ] ;
37315: LD_ADDR_VAR 0 9
37319: PUSH
37320: LD_INT 120
37322: PUSH
37323: LD_INT 30
37325: PUSH
37326: LD_INT 80
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: LIST
37333: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37334: LD_VAR 0 6
37338: PPUSH
37339: CALL_OW 264
37343: PUSH
37344: LD_INT 22
37346: PUSH
37347: EMPTY
37348: LIST
37349: IN
37350: IFFALSE 37371
// points := [ 40 , 1 , 1 ] ;
37352: LD_ADDR_VAR 0 9
37356: PUSH
37357: LD_INT 40
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37371: LD_VAR 0 6
37375: PPUSH
37376: CALL_OW 264
37380: PUSH
37381: LD_INT 29
37383: PUSH
37384: EMPTY
37385: LIST
37386: IN
37387: IFFALSE 37408
// points := [ 70 , 200 , 400 ] ;
37389: LD_ADDR_VAR 0 9
37393: PUSH
37394: LD_INT 70
37396: PUSH
37397: LD_INT 200
37399: PUSH
37400: LD_INT 400
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: LIST
37407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37408: LD_VAR 0 6
37412: PPUSH
37413: CALL_OW 264
37417: PUSH
37418: LD_INT 14
37420: PUSH
37421: LD_INT 53
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: IN
37428: IFFALSE 37449
// points := [ 40 , 10 , 20 ] ;
37430: LD_ADDR_VAR 0 9
37434: PUSH
37435: LD_INT 40
37437: PUSH
37438: LD_INT 10
37440: PUSH
37441: LD_INT 20
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37449: LD_VAR 0 6
37453: PPUSH
37454: CALL_OW 264
37458: PUSH
37459: LD_INT 9
37461: PUSH
37462: EMPTY
37463: LIST
37464: IN
37465: IFFALSE 37486
// points := [ 5 , 70 , 20 ] ;
37467: LD_ADDR_VAR 0 9
37471: PUSH
37472: LD_INT 5
37474: PUSH
37475: LD_INT 70
37477: PUSH
37478: LD_INT 20
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37486: LD_VAR 0 6
37490: PPUSH
37491: CALL_OW 264
37495: PUSH
37496: LD_INT 10
37498: PUSH
37499: EMPTY
37500: LIST
37501: IN
37502: IFFALSE 37523
// points := [ 35 , 110 , 70 ] ;
37504: LD_ADDR_VAR 0 9
37508: PUSH
37509: LD_INT 35
37511: PUSH
37512: LD_INT 110
37514: PUSH
37515: LD_INT 70
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: LIST
37522: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37523: LD_VAR 0 6
37527: PPUSH
37528: CALL_OW 265
37532: PUSH
37533: LD_INT 25
37535: EQUAL
37536: IFFALSE 37557
// points := [ 80 , 65 , 100 ] ;
37538: LD_ADDR_VAR 0 9
37542: PUSH
37543: LD_INT 80
37545: PUSH
37546: LD_INT 65
37548: PUSH
37549: LD_INT 100
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37557: LD_VAR 0 6
37561: PPUSH
37562: CALL_OW 263
37566: PUSH
37567: LD_INT 1
37569: EQUAL
37570: IFFALSE 37605
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37572: LD_ADDR_VAR 0 10
37576: PUSH
37577: LD_VAR 0 10
37581: PUSH
37582: LD_VAR 0 6
37586: PPUSH
37587: CALL_OW 311
37591: PPUSH
37592: LD_INT 3
37594: PPUSH
37595: CALL_OW 259
37599: PUSH
37600: LD_INT 4
37602: MUL
37603: MUL
37604: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37605: LD_VAR 0 6
37609: PPUSH
37610: CALL_OW 263
37614: PUSH
37615: LD_INT 2
37617: EQUAL
37618: IFFALSE 37669
// begin j := IsControledBy ( i ) ;
37620: LD_ADDR_VAR 0 7
37624: PUSH
37625: LD_VAR 0 6
37629: PPUSH
37630: CALL_OW 312
37634: ST_TO_ADDR
// if j then
37635: LD_VAR 0 7
37639: IFFALSE 37669
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37641: LD_ADDR_VAR 0 10
37645: PUSH
37646: LD_VAR 0 10
37650: PUSH
37651: LD_VAR 0 7
37655: PPUSH
37656: LD_INT 3
37658: PPUSH
37659: CALL_OW 259
37663: PUSH
37664: LD_INT 3
37666: MUL
37667: MUL
37668: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37669: LD_VAR 0 6
37673: PPUSH
37674: CALL_OW 264
37678: PUSH
37679: LD_INT 5
37681: PUSH
37682: LD_INT 6
37684: PUSH
37685: LD_INT 46
37687: PUSH
37688: LD_INT 44
37690: PUSH
37691: LD_INT 47
37693: PUSH
37694: LD_INT 45
37696: PUSH
37697: LD_INT 28
37699: PUSH
37700: LD_INT 7
37702: PUSH
37703: LD_INT 27
37705: PUSH
37706: LD_INT 29
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: IN
37721: PUSH
37722: LD_VAR 0 1
37726: PPUSH
37727: LD_INT 52
37729: PPUSH
37730: CALL_OW 321
37734: PUSH
37735: LD_INT 2
37737: EQUAL
37738: AND
37739: IFFALSE 37756
// bpoints := bpoints * 1.2 ;
37741: LD_ADDR_VAR 0 10
37745: PUSH
37746: LD_VAR 0 10
37750: PUSH
37751: LD_REAL  1.20000000000000E+0000
37754: MUL
37755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37756: LD_VAR 0 6
37760: PPUSH
37761: CALL_OW 264
37765: PUSH
37766: LD_INT 6
37768: PUSH
37769: LD_INT 46
37771: PUSH
37772: LD_INT 47
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: IN
37780: IFFALSE 37797
// bpoints := bpoints * 1.2 ;
37782: LD_ADDR_VAR 0 10
37786: PUSH
37787: LD_VAR 0 10
37791: PUSH
37792: LD_REAL  1.20000000000000E+0000
37795: MUL
37796: ST_TO_ADDR
// end ; unit_building :
37797: GO 37811
37799: LD_INT 3
37801: DOUBLE
37802: EQUAL
37803: IFTRUE 37807
37805: GO 37810
37807: POP
// ; end ;
37808: GO 37811
37810: POP
// for j = 1 to 3 do
37811: LD_ADDR_VAR 0 7
37815: PUSH
37816: DOUBLE
37817: LD_INT 1
37819: DEC
37820: ST_TO_ADDR
37821: LD_INT 3
37823: PUSH
37824: FOR_TO
37825: IFFALSE 37878
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37827: LD_ADDR_VAR 0 5
37831: PUSH
37832: LD_VAR 0 5
37836: PPUSH
37837: LD_VAR 0 7
37841: PPUSH
37842: LD_VAR 0 5
37846: PUSH
37847: LD_VAR 0 7
37851: ARRAY
37852: PUSH
37853: LD_VAR 0 9
37857: PUSH
37858: LD_VAR 0 7
37862: ARRAY
37863: PUSH
37864: LD_VAR 0 10
37868: MUL
37869: PLUS
37870: PPUSH
37871: CALL_OW 1
37875: ST_TO_ADDR
37876: GO 37824
37878: POP
37879: POP
// end ;
37880: GO 36363
37882: POP
37883: POP
// result := Replace ( result , 4 , tmp ) ;
37884: LD_ADDR_VAR 0 5
37888: PUSH
37889: LD_VAR 0 5
37893: PPUSH
37894: LD_INT 4
37896: PPUSH
37897: LD_VAR 0 8
37901: PPUSH
37902: CALL_OW 1
37906: ST_TO_ADDR
// end ;
37907: LD_VAR 0 5
37911: RET
// export function DangerAtRange ( unit , range ) ; begin
37912: LD_INT 0
37914: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37915: LD_ADDR_VAR 0 3
37919: PUSH
37920: LD_VAR 0 1
37924: PPUSH
37925: CALL_OW 255
37929: PPUSH
37930: LD_VAR 0 1
37934: PPUSH
37935: CALL_OW 250
37939: PPUSH
37940: LD_VAR 0 1
37944: PPUSH
37945: CALL_OW 251
37949: PPUSH
37950: LD_VAR 0 2
37954: PPUSH
37955: CALL 36215 0 4
37959: ST_TO_ADDR
// end ;
37960: LD_VAR 0 3
37964: RET
// export function DangerInArea ( side , area ) ; begin
37965: LD_INT 0
37967: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37968: LD_ADDR_VAR 0 3
37972: PUSH
37973: LD_VAR 0 2
37977: PPUSH
37978: LD_INT 81
37980: PUSH
37981: LD_VAR 0 1
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PPUSH
37990: CALL_OW 70
37994: ST_TO_ADDR
// end ;
37995: LD_VAR 0 3
37999: RET
// export function IsExtension ( b ) ; begin
38000: LD_INT 0
38002: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38003: LD_ADDR_VAR 0 2
38007: PUSH
38008: LD_VAR 0 1
38012: PUSH
38013: LD_INT 23
38015: PUSH
38016: LD_INT 20
38018: PUSH
38019: LD_INT 22
38021: PUSH
38022: LD_INT 17
38024: PUSH
38025: LD_INT 24
38027: PUSH
38028: LD_INT 21
38030: PUSH
38031: LD_INT 19
38033: PUSH
38034: LD_INT 16
38036: PUSH
38037: LD_INT 25
38039: PUSH
38040: LD_INT 18
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: IN
38055: ST_TO_ADDR
// end ;
38056: LD_VAR 0 2
38060: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
38061: LD_INT 0
38063: PPUSH
38064: PPUSH
38065: PPUSH
// result := [ ] ;
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: EMPTY
38072: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38073: LD_ADDR_VAR 0 4
38077: PUSH
38078: LD_VAR 0 2
38082: PPUSH
38083: LD_INT 21
38085: PUSH
38086: LD_INT 3
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PPUSH
38093: CALL_OW 70
38097: ST_TO_ADDR
// if not tmp then
38098: LD_VAR 0 4
38102: NOT
38103: IFFALSE 38107
// exit ;
38105: GO 38165
// for i in tmp do
38107: LD_ADDR_VAR 0 5
38111: PUSH
38112: LD_VAR 0 4
38116: PUSH
38117: FOR_IN
38118: IFFALSE 38153
// if GetBase ( i ) <> base then
38120: LD_VAR 0 5
38124: PPUSH
38125: CALL_OW 274
38129: PUSH
38130: LD_VAR 0 1
38134: NONEQUAL
38135: IFFALSE 38151
// ComLinkToBase ( base , i ) ;
38137: LD_VAR 0 1
38141: PPUSH
38142: LD_VAR 0 5
38146: PPUSH
38147: CALL_OW 169
38151: GO 38117
38153: POP
38154: POP
// result := tmp ;
38155: LD_ADDR_VAR 0 3
38159: PUSH
38160: LD_VAR 0 4
38164: ST_TO_ADDR
// end ;
38165: LD_VAR 0 3
38169: RET
// export function ComComplete ( unit , b ) ; var i ; begin
38170: LD_INT 0
38172: PPUSH
38173: PPUSH
// if BuildingStatus ( b ) = bs_build then
38174: LD_VAR 0 2
38178: PPUSH
38179: CALL_OW 461
38183: PUSH
38184: LD_INT 1
38186: EQUAL
38187: IFFALSE 38247
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38189: LD_VAR 0 1
38193: PPUSH
38194: LD_STRING h
38196: PUSH
38197: LD_VAR 0 2
38201: PPUSH
38202: CALL_OW 250
38206: PUSH
38207: LD_VAR 0 2
38211: PPUSH
38212: CALL_OW 251
38216: PUSH
38217: LD_VAR 0 2
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: PPUSH
38243: CALL_OW 446
// end ;
38247: LD_VAR 0 3
38251: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38252: LD_INT 0
38254: PPUSH
38255: PPUSH
38256: PPUSH
38257: PPUSH
38258: PPUSH
38259: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
38260: LD_VAR 0 1
38264: NOT
38265: PUSH
38266: LD_VAR 0 1
38270: PPUSH
38271: CALL_OW 263
38275: PUSH
38276: LD_INT 2
38278: EQUAL
38279: NOT
38280: OR
38281: IFFALSE 38285
// exit ;
38283: GO 38601
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38285: LD_ADDR_VAR 0 6
38289: PUSH
38290: LD_INT 22
38292: PUSH
38293: LD_VAR 0 1
38297: PPUSH
38298: CALL_OW 255
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 2
38309: PUSH
38310: LD_INT 30
38312: PUSH
38313: LD_INT 36
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 34
38322: PUSH
38323: LD_INT 31
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: LIST
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PPUSH
38339: CALL_OW 69
38343: ST_TO_ADDR
// if not tmp then
38344: LD_VAR 0 6
38348: NOT
38349: IFFALSE 38353
// exit ;
38351: GO 38601
// result := [ ] ;
38353: LD_ADDR_VAR 0 2
38357: PUSH
38358: EMPTY
38359: ST_TO_ADDR
// for i in tmp do
38360: LD_ADDR_VAR 0 3
38364: PUSH
38365: LD_VAR 0 6
38369: PUSH
38370: FOR_IN
38371: IFFALSE 38442
// begin t := UnitsInside ( i ) ;
38373: LD_ADDR_VAR 0 4
38377: PUSH
38378: LD_VAR 0 3
38382: PPUSH
38383: CALL_OW 313
38387: ST_TO_ADDR
// if t then
38388: LD_VAR 0 4
38392: IFFALSE 38440
// for j in t do
38394: LD_ADDR_VAR 0 7
38398: PUSH
38399: LD_VAR 0 4
38403: PUSH
38404: FOR_IN
38405: IFFALSE 38438
// result := Insert ( result , result + 1 , j ) ;
38407: LD_ADDR_VAR 0 2
38411: PUSH
38412: LD_VAR 0 2
38416: PPUSH
38417: LD_VAR 0 2
38421: PUSH
38422: LD_INT 1
38424: PLUS
38425: PPUSH
38426: LD_VAR 0 7
38430: PPUSH
38431: CALL_OW 2
38435: ST_TO_ADDR
38436: GO 38404
38438: POP
38439: POP
// end ;
38440: GO 38370
38442: POP
38443: POP
// if not result then
38444: LD_VAR 0 2
38448: NOT
38449: IFFALSE 38453
// exit ;
38451: GO 38601
// mech := result [ 1 ] ;
38453: LD_ADDR_VAR 0 5
38457: PUSH
38458: LD_VAR 0 2
38462: PUSH
38463: LD_INT 1
38465: ARRAY
38466: ST_TO_ADDR
// if result > 1 then
38467: LD_VAR 0 2
38471: PUSH
38472: LD_INT 1
38474: GREATER
38475: IFFALSE 38587
// for i = 2 to result do
38477: LD_ADDR_VAR 0 3
38481: PUSH
38482: DOUBLE
38483: LD_INT 2
38485: DEC
38486: ST_TO_ADDR
38487: LD_VAR 0 2
38491: PUSH
38492: FOR_TO
38493: IFFALSE 38585
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38495: LD_ADDR_VAR 0 4
38499: PUSH
38500: LD_VAR 0 2
38504: PUSH
38505: LD_VAR 0 3
38509: ARRAY
38510: PPUSH
38511: LD_INT 3
38513: PPUSH
38514: CALL_OW 259
38518: PUSH
38519: LD_VAR 0 2
38523: PUSH
38524: LD_VAR 0 3
38528: ARRAY
38529: PPUSH
38530: CALL_OW 432
38534: MINUS
38535: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38536: LD_VAR 0 4
38540: PUSH
38541: LD_VAR 0 5
38545: PPUSH
38546: LD_INT 3
38548: PPUSH
38549: CALL_OW 259
38553: PUSH
38554: LD_VAR 0 5
38558: PPUSH
38559: CALL_OW 432
38563: MINUS
38564: GREATEREQUAL
38565: IFFALSE 38583
// mech := result [ i ] ;
38567: LD_ADDR_VAR 0 5
38571: PUSH
38572: LD_VAR 0 2
38576: PUSH
38577: LD_VAR 0 3
38581: ARRAY
38582: ST_TO_ADDR
// end ;
38583: GO 38492
38585: POP
38586: POP
// ComLinkTo ( vehicle , mech ) ;
38587: LD_VAR 0 1
38591: PPUSH
38592: LD_VAR 0 5
38596: PPUSH
38597: CALL_OW 135
// end ;
38601: LD_VAR 0 2
38605: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38606: LD_INT 0
38608: PPUSH
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
38613: PPUSH
38614: PPUSH
38615: PPUSH
38616: PPUSH
38617: PPUSH
38618: PPUSH
38619: PPUSH
38620: PPUSH
// result := [ ] ;
38621: LD_ADDR_VAR 0 7
38625: PUSH
38626: EMPTY
38627: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL_OW 266
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: IN
38648: NOT
38649: IFFALSE 38653
// exit ;
38651: GO 40284
// if name then
38653: LD_VAR 0 3
38657: IFFALSE 38673
// SetBName ( base_dep , name ) ;
38659: LD_VAR 0 1
38663: PPUSH
38664: LD_VAR 0 3
38668: PPUSH
38669: CALL_OW 500
// base := GetBase ( base_dep ) ;
38673: LD_ADDR_VAR 0 15
38677: PUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 274
38687: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38688: LD_ADDR_VAR 0 16
38692: PUSH
38693: LD_VAR 0 1
38697: PPUSH
38698: CALL_OW 255
38702: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38703: LD_ADDR_VAR 0 17
38707: PUSH
38708: LD_VAR 0 1
38712: PPUSH
38713: CALL_OW 248
38717: ST_TO_ADDR
// if sources then
38718: LD_VAR 0 5
38722: IFFALSE 38769
// for i = 1 to 3 do
38724: LD_ADDR_VAR 0 8
38728: PUSH
38729: DOUBLE
38730: LD_INT 1
38732: DEC
38733: ST_TO_ADDR
38734: LD_INT 3
38736: PUSH
38737: FOR_TO
38738: IFFALSE 38767
// AddResourceType ( base , i , sources [ i ] ) ;
38740: LD_VAR 0 15
38744: PPUSH
38745: LD_VAR 0 8
38749: PPUSH
38750: LD_VAR 0 5
38754: PUSH
38755: LD_VAR 0 8
38759: ARRAY
38760: PPUSH
38761: CALL_OW 276
38765: GO 38737
38767: POP
38768: POP
// buildings := GetBaseBuildings ( base , area ) ;
38769: LD_ADDR_VAR 0 18
38773: PUSH
38774: LD_VAR 0 15
38778: PPUSH
38779: LD_VAR 0 2
38783: PPUSH
38784: CALL 38061 0 2
38788: ST_TO_ADDR
// InitHc ;
38789: CALL_OW 19
// InitUc ;
38793: CALL_OW 18
// uc_side := side ;
38797: LD_ADDR_OWVAR 20
38801: PUSH
38802: LD_VAR 0 16
38806: ST_TO_ADDR
// uc_nation := nation ;
38807: LD_ADDR_OWVAR 21
38811: PUSH
38812: LD_VAR 0 17
38816: ST_TO_ADDR
// if buildings then
38817: LD_VAR 0 18
38821: IFFALSE 40143
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38823: LD_ADDR_VAR 0 19
38827: PUSH
38828: LD_VAR 0 18
38832: PPUSH
38833: LD_INT 2
38835: PUSH
38836: LD_INT 30
38838: PUSH
38839: LD_INT 29
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 30
38848: PUSH
38849: LD_INT 30
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: PPUSH
38861: CALL_OW 72
38865: ST_TO_ADDR
// if tmp then
38866: LD_VAR 0 19
38870: IFFALSE 38918
// for i in tmp do
38872: LD_ADDR_VAR 0 8
38876: PUSH
38877: LD_VAR 0 19
38881: PUSH
38882: FOR_IN
38883: IFFALSE 38916
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38885: LD_VAR 0 8
38889: PPUSH
38890: CALL_OW 250
38894: PPUSH
38895: LD_VAR 0 8
38899: PPUSH
38900: CALL_OW 251
38904: PPUSH
38905: LD_VAR 0 16
38909: PPUSH
38910: CALL_OW 441
38914: GO 38882
38916: POP
38917: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38918: LD_VAR 0 18
38922: PPUSH
38923: LD_INT 2
38925: PUSH
38926: LD_INT 30
38928: PUSH
38929: LD_INT 32
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 30
38938: PUSH
38939: LD_INT 33
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: PPUSH
38951: CALL_OW 72
38955: IFFALSE 39043
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38957: LD_ADDR_VAR 0 8
38961: PUSH
38962: LD_VAR 0 18
38966: PPUSH
38967: LD_INT 2
38969: PUSH
38970: LD_INT 30
38972: PUSH
38973: LD_INT 32
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 30
38982: PUSH
38983: LD_INT 33
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: PPUSH
38995: CALL_OW 72
38999: PUSH
39000: FOR_IN
39001: IFFALSE 39041
// begin if not GetBWeapon ( i ) then
39003: LD_VAR 0 8
39007: PPUSH
39008: CALL_OW 269
39012: NOT
39013: IFFALSE 39039
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39015: LD_VAR 0 8
39019: PPUSH
39020: LD_VAR 0 8
39024: PPUSH
39025: LD_VAR 0 2
39029: PPUSH
39030: CALL 40289 0 2
39034: PPUSH
39035: CALL_OW 431
// end ;
39039: GO 39000
39041: POP
39042: POP
// end ; for i = 1 to personel do
39043: LD_ADDR_VAR 0 8
39047: PUSH
39048: DOUBLE
39049: LD_INT 1
39051: DEC
39052: ST_TO_ADDR
39053: LD_VAR 0 6
39057: PUSH
39058: FOR_TO
39059: IFFALSE 40123
// begin if i > 4 then
39061: LD_VAR 0 8
39065: PUSH
39066: LD_INT 4
39068: GREATER
39069: IFFALSE 39073
// break ;
39071: GO 40123
// case i of 1 :
39073: LD_VAR 0 8
39077: PUSH
39078: LD_INT 1
39080: DOUBLE
39081: EQUAL
39082: IFTRUE 39086
39084: GO 39166
39086: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39087: LD_ADDR_VAR 0 12
39091: PUSH
39092: LD_VAR 0 18
39096: PPUSH
39097: LD_INT 22
39099: PUSH
39100: LD_VAR 0 16
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 58
39111: PUSH
39112: EMPTY
39113: LIST
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: LD_INT 30
39120: PUSH
39121: LD_INT 32
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 30
39130: PUSH
39131: LD_INT 4
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 30
39140: PUSH
39141: LD_INT 5
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: LIST
39158: PPUSH
39159: CALL_OW 72
39163: ST_TO_ADDR
39164: GO 39388
39166: LD_INT 2
39168: DOUBLE
39169: EQUAL
39170: IFTRUE 39174
39172: GO 39236
39174: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39175: LD_ADDR_VAR 0 12
39179: PUSH
39180: LD_VAR 0 18
39184: PPUSH
39185: LD_INT 22
39187: PUSH
39188: LD_VAR 0 16
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: LD_INT 30
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 30
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PPUSH
39229: CALL_OW 72
39233: ST_TO_ADDR
39234: GO 39388
39236: LD_INT 3
39238: DOUBLE
39239: EQUAL
39240: IFTRUE 39244
39242: GO 39306
39244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39245: LD_ADDR_VAR 0 12
39249: PUSH
39250: LD_VAR 0 18
39254: PPUSH
39255: LD_INT 22
39257: PUSH
39258: LD_VAR 0 16
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: LD_INT 30
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 30
39282: PUSH
39283: LD_INT 3
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: LIST
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PPUSH
39299: CALL_OW 72
39303: ST_TO_ADDR
39304: GO 39388
39306: LD_INT 4
39308: DOUBLE
39309: EQUAL
39310: IFTRUE 39314
39312: GO 39387
39314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39315: LD_ADDR_VAR 0 12
39319: PUSH
39320: LD_VAR 0 18
39324: PPUSH
39325: LD_INT 22
39327: PUSH
39328: LD_VAR 0 16
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 2
39339: PUSH
39340: LD_INT 30
39342: PUSH
39343: LD_INT 6
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 30
39352: PUSH
39353: LD_INT 7
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 30
39362: PUSH
39363: LD_INT 8
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PPUSH
39380: CALL_OW 72
39384: ST_TO_ADDR
39385: GO 39388
39387: POP
// if i = 1 then
39388: LD_VAR 0 8
39392: PUSH
39393: LD_INT 1
39395: EQUAL
39396: IFFALSE 39507
// begin tmp := [ ] ;
39398: LD_ADDR_VAR 0 19
39402: PUSH
39403: EMPTY
39404: ST_TO_ADDR
// for j in f do
39405: LD_ADDR_VAR 0 9
39409: PUSH
39410: LD_VAR 0 12
39414: PUSH
39415: FOR_IN
39416: IFFALSE 39489
// if GetBType ( j ) = b_bunker then
39418: LD_VAR 0 9
39422: PPUSH
39423: CALL_OW 266
39427: PUSH
39428: LD_INT 32
39430: EQUAL
39431: IFFALSE 39458
// tmp := Insert ( tmp , 1 , j ) else
39433: LD_ADDR_VAR 0 19
39437: PUSH
39438: LD_VAR 0 19
39442: PPUSH
39443: LD_INT 1
39445: PPUSH
39446: LD_VAR 0 9
39450: PPUSH
39451: CALL_OW 2
39455: ST_TO_ADDR
39456: GO 39487
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39458: LD_ADDR_VAR 0 19
39462: PUSH
39463: LD_VAR 0 19
39467: PPUSH
39468: LD_VAR 0 19
39472: PUSH
39473: LD_INT 1
39475: PLUS
39476: PPUSH
39477: LD_VAR 0 9
39481: PPUSH
39482: CALL_OW 2
39486: ST_TO_ADDR
39487: GO 39415
39489: POP
39490: POP
// if tmp then
39491: LD_VAR 0 19
39495: IFFALSE 39507
// f := tmp ;
39497: LD_ADDR_VAR 0 12
39501: PUSH
39502: LD_VAR 0 19
39506: ST_TO_ADDR
// end ; x := personel [ i ] ;
39507: LD_ADDR_VAR 0 13
39511: PUSH
39512: LD_VAR 0 6
39516: PUSH
39517: LD_VAR 0 8
39521: ARRAY
39522: ST_TO_ADDR
// if x = - 1 then
39523: LD_VAR 0 13
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: EQUAL
39532: IFFALSE 39741
// begin for j in f do
39534: LD_ADDR_VAR 0 9
39538: PUSH
39539: LD_VAR 0 12
39543: PUSH
39544: FOR_IN
39545: IFFALSE 39737
// repeat InitHc ;
39547: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39551: LD_VAR 0 9
39555: PPUSH
39556: CALL_OW 266
39560: PUSH
39561: LD_INT 5
39563: EQUAL
39564: IFFALSE 39634
// begin if UnitsInside ( j ) < 3 then
39566: LD_VAR 0 9
39570: PPUSH
39571: CALL_OW 313
39575: PUSH
39576: LD_INT 3
39578: LESS
39579: IFFALSE 39615
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39581: LD_INT 0
39583: PPUSH
39584: LD_INT 5
39586: PUSH
39587: LD_INT 8
39589: PUSH
39590: LD_INT 9
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: PUSH
39598: LD_VAR 0 17
39602: ARRAY
39603: PPUSH
39604: LD_VAR 0 4
39608: PPUSH
39609: CALL_OW 380
39613: GO 39632
// PrepareHuman ( false , i , skill ) ;
39615: LD_INT 0
39617: PPUSH
39618: LD_VAR 0 8
39622: PPUSH
39623: LD_VAR 0 4
39627: PPUSH
39628: CALL_OW 380
// end else
39632: GO 39651
// PrepareHuman ( false , i , skill ) ;
39634: LD_INT 0
39636: PPUSH
39637: LD_VAR 0 8
39641: PPUSH
39642: LD_VAR 0 4
39646: PPUSH
39647: CALL_OW 380
// un := CreateHuman ;
39651: LD_ADDR_VAR 0 14
39655: PUSH
39656: CALL_OW 44
39660: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39661: LD_ADDR_VAR 0 7
39665: PUSH
39666: LD_VAR 0 7
39670: PPUSH
39671: LD_INT 1
39673: PPUSH
39674: LD_VAR 0 14
39678: PPUSH
39679: CALL_OW 2
39683: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39684: LD_VAR 0 14
39688: PPUSH
39689: LD_VAR 0 9
39693: PPUSH
39694: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39698: LD_VAR 0 9
39702: PPUSH
39703: CALL_OW 313
39707: PUSH
39708: LD_INT 6
39710: EQUAL
39711: PUSH
39712: LD_VAR 0 9
39716: PPUSH
39717: CALL_OW 266
39721: PUSH
39722: LD_INT 32
39724: PUSH
39725: LD_INT 31
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: IN
39732: OR
39733: IFFALSE 39547
39735: GO 39544
39737: POP
39738: POP
// end else
39739: GO 40121
// for j = 1 to x do
39741: LD_ADDR_VAR 0 9
39745: PUSH
39746: DOUBLE
39747: LD_INT 1
39749: DEC
39750: ST_TO_ADDR
39751: LD_VAR 0 13
39755: PUSH
39756: FOR_TO
39757: IFFALSE 40119
// begin InitHc ;
39759: CALL_OW 19
// if not f then
39763: LD_VAR 0 12
39767: NOT
39768: IFFALSE 39857
// begin PrepareHuman ( false , i , skill ) ;
39770: LD_INT 0
39772: PPUSH
39773: LD_VAR 0 8
39777: PPUSH
39778: LD_VAR 0 4
39782: PPUSH
39783: CALL_OW 380
// un := CreateHuman ;
39787: LD_ADDR_VAR 0 14
39791: PUSH
39792: CALL_OW 44
39796: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39797: LD_ADDR_VAR 0 7
39801: PUSH
39802: LD_VAR 0 7
39806: PPUSH
39807: LD_INT 1
39809: PPUSH
39810: LD_VAR 0 14
39814: PPUSH
39815: CALL_OW 2
39819: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39820: LD_VAR 0 14
39824: PPUSH
39825: LD_VAR 0 1
39829: PPUSH
39830: CALL_OW 250
39834: PPUSH
39835: LD_VAR 0 1
39839: PPUSH
39840: CALL_OW 251
39844: PPUSH
39845: LD_INT 10
39847: PPUSH
39848: LD_INT 0
39850: PPUSH
39851: CALL_OW 50
// continue ;
39855: GO 39756
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39857: LD_VAR 0 12
39861: PUSH
39862: LD_INT 1
39864: ARRAY
39865: PPUSH
39866: CALL_OW 313
39870: PUSH
39871: LD_VAR 0 12
39875: PUSH
39876: LD_INT 1
39878: ARRAY
39879: PPUSH
39880: CALL_OW 266
39884: PUSH
39885: LD_INT 32
39887: PUSH
39888: LD_INT 31
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: IN
39895: AND
39896: PUSH
39897: LD_VAR 0 12
39901: PUSH
39902: LD_INT 1
39904: ARRAY
39905: PPUSH
39906: CALL_OW 313
39910: PUSH
39911: LD_INT 6
39913: EQUAL
39914: OR
39915: IFFALSE 39935
// f := Delete ( f , 1 ) ;
39917: LD_ADDR_VAR 0 12
39921: PUSH
39922: LD_VAR 0 12
39926: PPUSH
39927: LD_INT 1
39929: PPUSH
39930: CALL_OW 3
39934: ST_TO_ADDR
// if not f then
39935: LD_VAR 0 12
39939: NOT
39940: IFFALSE 39958
// begin x := x + 2 ;
39942: LD_ADDR_VAR 0 13
39946: PUSH
39947: LD_VAR 0 13
39951: PUSH
39952: LD_INT 2
39954: PLUS
39955: ST_TO_ADDR
// continue ;
39956: GO 39756
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39958: LD_VAR 0 12
39962: PUSH
39963: LD_INT 1
39965: ARRAY
39966: PPUSH
39967: CALL_OW 266
39971: PUSH
39972: LD_INT 5
39974: EQUAL
39975: IFFALSE 40049
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39977: LD_VAR 0 12
39981: PUSH
39982: LD_INT 1
39984: ARRAY
39985: PPUSH
39986: CALL_OW 313
39990: PUSH
39991: LD_INT 3
39993: LESS
39994: IFFALSE 40030
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39996: LD_INT 0
39998: PPUSH
39999: LD_INT 5
40001: PUSH
40002: LD_INT 8
40004: PUSH
40005: LD_INT 9
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: PUSH
40013: LD_VAR 0 17
40017: ARRAY
40018: PPUSH
40019: LD_VAR 0 4
40023: PPUSH
40024: CALL_OW 380
40028: GO 40047
// PrepareHuman ( false , i , skill ) ;
40030: LD_INT 0
40032: PPUSH
40033: LD_VAR 0 8
40037: PPUSH
40038: LD_VAR 0 4
40042: PPUSH
40043: CALL_OW 380
// end else
40047: GO 40066
// PrepareHuman ( false , i , skill ) ;
40049: LD_INT 0
40051: PPUSH
40052: LD_VAR 0 8
40056: PPUSH
40057: LD_VAR 0 4
40061: PPUSH
40062: CALL_OW 380
// un := CreateHuman ;
40066: LD_ADDR_VAR 0 14
40070: PUSH
40071: CALL_OW 44
40075: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40076: LD_ADDR_VAR 0 7
40080: PUSH
40081: LD_VAR 0 7
40085: PPUSH
40086: LD_INT 1
40088: PPUSH
40089: LD_VAR 0 14
40093: PPUSH
40094: CALL_OW 2
40098: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40099: LD_VAR 0 14
40103: PPUSH
40104: LD_VAR 0 12
40108: PUSH
40109: LD_INT 1
40111: ARRAY
40112: PPUSH
40113: CALL_OW 52
// end ;
40117: GO 39756
40119: POP
40120: POP
// end ;
40121: GO 39058
40123: POP
40124: POP
// result := result ^ buildings ;
40125: LD_ADDR_VAR 0 7
40129: PUSH
40130: LD_VAR 0 7
40134: PUSH
40135: LD_VAR 0 18
40139: ADD
40140: ST_TO_ADDR
// end else
40141: GO 40284
// begin for i = 1 to personel do
40143: LD_ADDR_VAR 0 8
40147: PUSH
40148: DOUBLE
40149: LD_INT 1
40151: DEC
40152: ST_TO_ADDR
40153: LD_VAR 0 6
40157: PUSH
40158: FOR_TO
40159: IFFALSE 40282
// begin if i > 4 then
40161: LD_VAR 0 8
40165: PUSH
40166: LD_INT 4
40168: GREATER
40169: IFFALSE 40173
// break ;
40171: GO 40282
// x := personel [ i ] ;
40173: LD_ADDR_VAR 0 13
40177: PUSH
40178: LD_VAR 0 6
40182: PUSH
40183: LD_VAR 0 8
40187: ARRAY
40188: ST_TO_ADDR
// if x = - 1 then
40189: LD_VAR 0 13
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: EQUAL
40198: IFFALSE 40202
// continue ;
40200: GO 40158
// PrepareHuman ( false , i , skill ) ;
40202: LD_INT 0
40204: PPUSH
40205: LD_VAR 0 8
40209: PPUSH
40210: LD_VAR 0 4
40214: PPUSH
40215: CALL_OW 380
// un := CreateHuman ;
40219: LD_ADDR_VAR 0 14
40223: PUSH
40224: CALL_OW 44
40228: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40229: LD_VAR 0 14
40233: PPUSH
40234: LD_VAR 0 1
40238: PPUSH
40239: CALL_OW 250
40243: PPUSH
40244: LD_VAR 0 1
40248: PPUSH
40249: CALL_OW 251
40253: PPUSH
40254: LD_INT 10
40256: PPUSH
40257: LD_INT 0
40259: PPUSH
40260: CALL_OW 50
// result := result ^ un ;
40264: LD_ADDR_VAR 0 7
40268: PUSH
40269: LD_VAR 0 7
40273: PUSH
40274: LD_VAR 0 14
40278: ADD
40279: ST_TO_ADDR
// end ;
40280: GO 40158
40282: POP
40283: POP
// end ; end ;
40284: LD_VAR 0 7
40288: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40289: LD_INT 0
40291: PPUSH
40292: PPUSH
40293: PPUSH
40294: PPUSH
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
40303: PPUSH
40304: PPUSH
40305: PPUSH
40306: PPUSH
// result := false ;
40307: LD_ADDR_VAR 0 3
40311: PUSH
40312: LD_INT 0
40314: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40315: LD_VAR 0 1
40319: NOT
40320: PUSH
40321: LD_VAR 0 1
40325: PPUSH
40326: CALL_OW 266
40330: PUSH
40331: LD_INT 32
40333: PUSH
40334: LD_INT 33
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: IN
40341: NOT
40342: OR
40343: IFFALSE 40347
// exit ;
40345: GO 41483
// nat := GetNation ( tower ) ;
40347: LD_ADDR_VAR 0 12
40351: PUSH
40352: LD_VAR 0 1
40356: PPUSH
40357: CALL_OW 248
40361: ST_TO_ADDR
// side := GetSide ( tower ) ;
40362: LD_ADDR_VAR 0 16
40366: PUSH
40367: LD_VAR 0 1
40371: PPUSH
40372: CALL_OW 255
40376: ST_TO_ADDR
// x := GetX ( tower ) ;
40377: LD_ADDR_VAR 0 10
40381: PUSH
40382: LD_VAR 0 1
40386: PPUSH
40387: CALL_OW 250
40391: ST_TO_ADDR
// y := GetY ( tower ) ;
40392: LD_ADDR_VAR 0 11
40396: PUSH
40397: LD_VAR 0 1
40401: PPUSH
40402: CALL_OW 251
40406: ST_TO_ADDR
// if not x or not y then
40407: LD_VAR 0 10
40411: NOT
40412: PUSH
40413: LD_VAR 0 11
40417: NOT
40418: OR
40419: IFFALSE 40423
// exit ;
40421: GO 41483
// weapon := 0 ;
40423: LD_ADDR_VAR 0 18
40427: PUSH
40428: LD_INT 0
40430: ST_TO_ADDR
// fac_list := [ ] ;
40431: LD_ADDR_VAR 0 17
40435: PUSH
40436: EMPTY
40437: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
40438: LD_ADDR_VAR 0 6
40442: PUSH
40443: LD_VAR 0 1
40447: PPUSH
40448: CALL_OW 274
40452: PPUSH
40453: LD_VAR 0 2
40457: PPUSH
40458: CALL 38061 0 2
40462: PPUSH
40463: LD_INT 30
40465: PUSH
40466: LD_INT 3
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PPUSH
40473: CALL_OW 72
40477: ST_TO_ADDR
// if not factories then
40478: LD_VAR 0 6
40482: NOT
40483: IFFALSE 40487
// exit ;
40485: GO 41483
// for i in factories do
40487: LD_ADDR_VAR 0 8
40491: PUSH
40492: LD_VAR 0 6
40496: PUSH
40497: FOR_IN
40498: IFFALSE 40523
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40500: LD_ADDR_VAR 0 17
40504: PUSH
40505: LD_VAR 0 17
40509: PUSH
40510: LD_VAR 0 8
40514: PPUSH
40515: CALL_OW 478
40519: UNION
40520: ST_TO_ADDR
40521: GO 40497
40523: POP
40524: POP
// if not fac_list then
40525: LD_VAR 0 17
40529: NOT
40530: IFFALSE 40534
// exit ;
40532: GO 41483
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40534: LD_ADDR_VAR 0 5
40538: PUSH
40539: LD_INT 4
40541: PUSH
40542: LD_INT 5
40544: PUSH
40545: LD_INT 9
40547: PUSH
40548: LD_INT 10
40550: PUSH
40551: LD_INT 6
40553: PUSH
40554: LD_INT 7
40556: PUSH
40557: LD_INT 11
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 27
40571: PUSH
40572: LD_INT 28
40574: PUSH
40575: LD_INT 26
40577: PUSH
40578: LD_INT 30
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 43
40589: PUSH
40590: LD_INT 44
40592: PUSH
40593: LD_INT 46
40595: PUSH
40596: LD_INT 45
40598: PUSH
40599: LD_INT 47
40601: PUSH
40602: LD_INT 49
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: LIST
40617: PUSH
40618: LD_VAR 0 12
40622: ARRAY
40623: ST_TO_ADDR
// for i in list do
40624: LD_ADDR_VAR 0 8
40628: PUSH
40629: LD_VAR 0 5
40633: PUSH
40634: FOR_IN
40635: IFFALSE 40668
// if not i in fac_list then
40637: LD_VAR 0 8
40641: PUSH
40642: LD_VAR 0 17
40646: IN
40647: NOT
40648: IFFALSE 40666
// list := list diff i ;
40650: LD_ADDR_VAR 0 5
40654: PUSH
40655: LD_VAR 0 5
40659: PUSH
40660: LD_VAR 0 8
40664: DIFF
40665: ST_TO_ADDR
40666: GO 40634
40668: POP
40669: POP
// if not list then
40670: LD_VAR 0 5
40674: NOT
40675: IFFALSE 40679
// exit ;
40677: GO 41483
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40679: LD_VAR 0 12
40683: PUSH
40684: LD_INT 3
40686: EQUAL
40687: PUSH
40688: LD_INT 49
40690: PUSH
40691: LD_VAR 0 5
40695: IN
40696: AND
40697: PUSH
40698: LD_INT 31
40700: PPUSH
40701: LD_VAR 0 16
40705: PPUSH
40706: CALL_OW 321
40710: PUSH
40711: LD_INT 2
40713: EQUAL
40714: AND
40715: IFFALSE 40775
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40717: LD_INT 22
40719: PUSH
40720: LD_VAR 0 16
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 35
40731: PUSH
40732: LD_INT 49
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 91
40741: PUSH
40742: LD_VAR 0 1
40746: PUSH
40747: LD_INT 10
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: PPUSH
40760: CALL_OW 69
40764: NOT
40765: IFFALSE 40775
// weapon := ru_time_lapser ;
40767: LD_ADDR_VAR 0 18
40771: PUSH
40772: LD_INT 49
40774: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40775: LD_VAR 0 12
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: IN
40790: PUSH
40791: LD_INT 11
40793: PUSH
40794: LD_VAR 0 5
40798: IN
40799: PUSH
40800: LD_INT 30
40802: PUSH
40803: LD_VAR 0 5
40807: IN
40808: OR
40809: AND
40810: PUSH
40811: LD_INT 6
40813: PPUSH
40814: LD_VAR 0 16
40818: PPUSH
40819: CALL_OW 321
40823: PUSH
40824: LD_INT 2
40826: EQUAL
40827: AND
40828: IFFALSE 40993
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40830: LD_INT 22
40832: PUSH
40833: LD_VAR 0 16
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 2
40844: PUSH
40845: LD_INT 35
40847: PUSH
40848: LD_INT 11
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 35
40857: PUSH
40858: LD_INT 30
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 91
40872: PUSH
40873: LD_VAR 0 1
40877: PUSH
40878: LD_INT 18
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: LIST
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: PPUSH
40891: CALL_OW 69
40895: NOT
40896: PUSH
40897: LD_INT 22
40899: PUSH
40900: LD_VAR 0 16
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: LD_INT 30
40914: PUSH
40915: LD_INT 32
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 30
40924: PUSH
40925: LD_INT 33
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 91
40939: PUSH
40940: LD_VAR 0 1
40944: PUSH
40945: LD_INT 12
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: LIST
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: PUSH
40958: EMPTY
40959: LIST
40960: PPUSH
40961: CALL_OW 69
40965: PUSH
40966: LD_INT 2
40968: GREATER
40969: AND
40970: IFFALSE 40993
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40972: LD_ADDR_VAR 0 18
40976: PUSH
40977: LD_INT 11
40979: PUSH
40980: LD_INT 30
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_VAR 0 12
40991: ARRAY
40992: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40993: LD_VAR 0 18
40997: NOT
40998: PUSH
40999: LD_INT 40
41001: PPUSH
41002: LD_VAR 0 16
41006: PPUSH
41007: CALL_OW 321
41011: PUSH
41012: LD_INT 2
41014: EQUAL
41015: AND
41016: PUSH
41017: LD_INT 7
41019: PUSH
41020: LD_VAR 0 5
41024: IN
41025: PUSH
41026: LD_INT 28
41028: PUSH
41029: LD_VAR 0 5
41033: IN
41034: OR
41035: PUSH
41036: LD_INT 45
41038: PUSH
41039: LD_VAR 0 5
41043: IN
41044: OR
41045: AND
41046: IFFALSE 41300
// begin hex := GetHexInfo ( x , y ) ;
41048: LD_ADDR_VAR 0 4
41052: PUSH
41053: LD_VAR 0 10
41057: PPUSH
41058: LD_VAR 0 11
41062: PPUSH
41063: CALL_OW 546
41067: ST_TO_ADDR
// if hex [ 1 ] then
41068: LD_VAR 0 4
41072: PUSH
41073: LD_INT 1
41075: ARRAY
41076: IFFALSE 41080
// exit ;
41078: GO 41483
// height := hex [ 2 ] ;
41080: LD_ADDR_VAR 0 15
41084: PUSH
41085: LD_VAR 0 4
41089: PUSH
41090: LD_INT 2
41092: ARRAY
41093: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41094: LD_ADDR_VAR 0 14
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: LD_INT 2
41104: PUSH
41105: LD_INT 3
41107: PUSH
41108: LD_INT 5
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: ST_TO_ADDR
// for i in tmp do
41117: LD_ADDR_VAR 0 8
41121: PUSH
41122: LD_VAR 0 14
41126: PUSH
41127: FOR_IN
41128: IFFALSE 41298
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41130: LD_ADDR_VAR 0 9
41134: PUSH
41135: LD_VAR 0 10
41139: PPUSH
41140: LD_VAR 0 8
41144: PPUSH
41145: LD_INT 5
41147: PPUSH
41148: CALL_OW 272
41152: PUSH
41153: LD_VAR 0 11
41157: PPUSH
41158: LD_VAR 0 8
41162: PPUSH
41163: LD_INT 5
41165: PPUSH
41166: CALL_OW 273
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41175: LD_VAR 0 9
41179: PUSH
41180: LD_INT 1
41182: ARRAY
41183: PPUSH
41184: LD_VAR 0 9
41188: PUSH
41189: LD_INT 2
41191: ARRAY
41192: PPUSH
41193: CALL_OW 488
41197: IFFALSE 41296
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41199: LD_ADDR_VAR 0 4
41203: PUSH
41204: LD_VAR 0 9
41208: PUSH
41209: LD_INT 1
41211: ARRAY
41212: PPUSH
41213: LD_VAR 0 9
41217: PUSH
41218: LD_INT 2
41220: ARRAY
41221: PPUSH
41222: CALL_OW 546
41226: ST_TO_ADDR
// if hex [ 1 ] then
41227: LD_VAR 0 4
41231: PUSH
41232: LD_INT 1
41234: ARRAY
41235: IFFALSE 41239
// continue ;
41237: GO 41127
// h := hex [ 2 ] ;
41239: LD_ADDR_VAR 0 13
41243: PUSH
41244: LD_VAR 0 4
41248: PUSH
41249: LD_INT 2
41251: ARRAY
41252: ST_TO_ADDR
// if h + 7 < height then
41253: LD_VAR 0 13
41257: PUSH
41258: LD_INT 7
41260: PLUS
41261: PUSH
41262: LD_VAR 0 15
41266: LESS
41267: IFFALSE 41296
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41269: LD_ADDR_VAR 0 18
41273: PUSH
41274: LD_INT 7
41276: PUSH
41277: LD_INT 28
41279: PUSH
41280: LD_INT 45
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: PUSH
41288: LD_VAR 0 12
41292: ARRAY
41293: ST_TO_ADDR
// break ;
41294: GO 41298
// end ; end ; end ;
41296: GO 41127
41298: POP
41299: POP
// end ; if not weapon then
41300: LD_VAR 0 18
41304: NOT
41305: IFFALSE 41365
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41307: LD_ADDR_VAR 0 5
41311: PUSH
41312: LD_VAR 0 5
41316: PUSH
41317: LD_INT 11
41319: PUSH
41320: LD_INT 30
41322: PUSH
41323: LD_INT 49
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: LIST
41330: DIFF
41331: ST_TO_ADDR
// if not list then
41332: LD_VAR 0 5
41336: NOT
41337: IFFALSE 41341
// exit ;
41339: GO 41483
// weapon := list [ rand ( 1 , list ) ] ;
41341: LD_ADDR_VAR 0 18
41345: PUSH
41346: LD_VAR 0 5
41350: PUSH
41351: LD_INT 1
41353: PPUSH
41354: LD_VAR 0 5
41358: PPUSH
41359: CALL_OW 12
41363: ARRAY
41364: ST_TO_ADDR
// end ; if weapon then
41365: LD_VAR 0 18
41369: IFFALSE 41483
// begin tmp := CostOfWeapon ( weapon ) ;
41371: LD_ADDR_VAR 0 14
41375: PUSH
41376: LD_VAR 0 18
41380: PPUSH
41381: CALL_OW 451
41385: ST_TO_ADDR
// j := GetBase ( tower ) ;
41386: LD_ADDR_VAR 0 9
41390: PUSH
41391: LD_VAR 0 1
41395: PPUSH
41396: CALL_OW 274
41400: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41401: LD_VAR 0 9
41405: PPUSH
41406: LD_INT 1
41408: PPUSH
41409: CALL_OW 275
41413: PUSH
41414: LD_VAR 0 14
41418: PUSH
41419: LD_INT 1
41421: ARRAY
41422: GREATEREQUAL
41423: PUSH
41424: LD_VAR 0 9
41428: PPUSH
41429: LD_INT 2
41431: PPUSH
41432: CALL_OW 275
41436: PUSH
41437: LD_VAR 0 14
41441: PUSH
41442: LD_INT 2
41444: ARRAY
41445: GREATEREQUAL
41446: AND
41447: PUSH
41448: LD_VAR 0 9
41452: PPUSH
41453: LD_INT 3
41455: PPUSH
41456: CALL_OW 275
41460: PUSH
41461: LD_VAR 0 14
41465: PUSH
41466: LD_INT 3
41468: ARRAY
41469: GREATEREQUAL
41470: AND
41471: IFFALSE 41483
// result := weapon ;
41473: LD_ADDR_VAR 0 3
41477: PUSH
41478: LD_VAR 0 18
41482: ST_TO_ADDR
// end ; end ;
41483: LD_VAR 0 3
41487: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41488: LD_INT 0
41490: PPUSH
41491: PPUSH
// result := true ;
41492: LD_ADDR_VAR 0 3
41496: PUSH
41497: LD_INT 1
41499: ST_TO_ADDR
// if array1 = array2 then
41500: LD_VAR 0 1
41504: PUSH
41505: LD_VAR 0 2
41509: EQUAL
41510: IFFALSE 41570
// begin for i = 1 to array1 do
41512: LD_ADDR_VAR 0 4
41516: PUSH
41517: DOUBLE
41518: LD_INT 1
41520: DEC
41521: ST_TO_ADDR
41522: LD_VAR 0 1
41526: PUSH
41527: FOR_TO
41528: IFFALSE 41566
// if array1 [ i ] <> array2 [ i ] then
41530: LD_VAR 0 1
41534: PUSH
41535: LD_VAR 0 4
41539: ARRAY
41540: PUSH
41541: LD_VAR 0 2
41545: PUSH
41546: LD_VAR 0 4
41550: ARRAY
41551: NONEQUAL
41552: IFFALSE 41564
// begin result := false ;
41554: LD_ADDR_VAR 0 3
41558: PUSH
41559: LD_INT 0
41561: ST_TO_ADDR
// break ;
41562: GO 41566
// end ;
41564: GO 41527
41566: POP
41567: POP
// end else
41568: GO 41578
// result := false ;
41570: LD_ADDR_VAR 0 3
41574: PUSH
41575: LD_INT 0
41577: ST_TO_ADDR
// end ;
41578: LD_VAR 0 3
41582: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41583: LD_INT 0
41585: PPUSH
41586: PPUSH
41587: PPUSH
// pom := GetBase ( fac ) ;
41588: LD_ADDR_VAR 0 5
41592: PUSH
41593: LD_VAR 0 1
41597: PPUSH
41598: CALL_OW 274
41602: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41603: LD_ADDR_VAR 0 4
41607: PUSH
41608: LD_VAR 0 2
41612: PUSH
41613: LD_INT 1
41615: ARRAY
41616: PPUSH
41617: LD_VAR 0 2
41621: PUSH
41622: LD_INT 2
41624: ARRAY
41625: PPUSH
41626: LD_VAR 0 2
41630: PUSH
41631: LD_INT 3
41633: ARRAY
41634: PPUSH
41635: LD_VAR 0 2
41639: PUSH
41640: LD_INT 4
41642: ARRAY
41643: PPUSH
41644: CALL_OW 449
41648: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41649: LD_ADDR_VAR 0 3
41653: PUSH
41654: LD_VAR 0 5
41658: PPUSH
41659: LD_INT 1
41661: PPUSH
41662: CALL_OW 275
41666: PUSH
41667: LD_VAR 0 4
41671: PUSH
41672: LD_INT 1
41674: ARRAY
41675: GREATEREQUAL
41676: PUSH
41677: LD_VAR 0 5
41681: PPUSH
41682: LD_INT 2
41684: PPUSH
41685: CALL_OW 275
41689: PUSH
41690: LD_VAR 0 4
41694: PUSH
41695: LD_INT 2
41697: ARRAY
41698: GREATEREQUAL
41699: AND
41700: PUSH
41701: LD_VAR 0 5
41705: PPUSH
41706: LD_INT 3
41708: PPUSH
41709: CALL_OW 275
41713: PUSH
41714: LD_VAR 0 4
41718: PUSH
41719: LD_INT 3
41721: ARRAY
41722: GREATEREQUAL
41723: AND
41724: ST_TO_ADDR
// end ;
41725: LD_VAR 0 3
41729: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41730: LD_INT 0
41732: PPUSH
41733: PPUSH
41734: PPUSH
41735: PPUSH
// pom := GetBase ( building ) ;
41736: LD_ADDR_VAR 0 3
41740: PUSH
41741: LD_VAR 0 1
41745: PPUSH
41746: CALL_OW 274
41750: ST_TO_ADDR
// if not pom then
41751: LD_VAR 0 3
41755: NOT
41756: IFFALSE 41760
// exit ;
41758: GO 41930
// btype := GetBType ( building ) ;
41760: LD_ADDR_VAR 0 5
41764: PUSH
41765: LD_VAR 0 1
41769: PPUSH
41770: CALL_OW 266
41774: ST_TO_ADDR
// if btype = b_armoury then
41775: LD_VAR 0 5
41779: PUSH
41780: LD_INT 4
41782: EQUAL
41783: IFFALSE 41793
// btype := b_barracks ;
41785: LD_ADDR_VAR 0 5
41789: PUSH
41790: LD_INT 5
41792: ST_TO_ADDR
// if btype = b_depot then
41793: LD_VAR 0 5
41797: PUSH
41798: LD_INT 0
41800: EQUAL
41801: IFFALSE 41811
// btype := b_warehouse ;
41803: LD_ADDR_VAR 0 5
41807: PUSH
41808: LD_INT 1
41810: ST_TO_ADDR
// if btype = b_workshop then
41811: LD_VAR 0 5
41815: PUSH
41816: LD_INT 2
41818: EQUAL
41819: IFFALSE 41829
// btype := b_factory ;
41821: LD_ADDR_VAR 0 5
41825: PUSH
41826: LD_INT 3
41828: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41829: LD_ADDR_VAR 0 4
41833: PUSH
41834: LD_VAR 0 5
41838: PPUSH
41839: LD_VAR 0 1
41843: PPUSH
41844: CALL_OW 248
41848: PPUSH
41849: CALL_OW 450
41853: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41854: LD_ADDR_VAR 0 2
41858: PUSH
41859: LD_VAR 0 3
41863: PPUSH
41864: LD_INT 1
41866: PPUSH
41867: CALL_OW 275
41871: PUSH
41872: LD_VAR 0 4
41876: PUSH
41877: LD_INT 1
41879: ARRAY
41880: GREATEREQUAL
41881: PUSH
41882: LD_VAR 0 3
41886: PPUSH
41887: LD_INT 2
41889: PPUSH
41890: CALL_OW 275
41894: PUSH
41895: LD_VAR 0 4
41899: PUSH
41900: LD_INT 2
41902: ARRAY
41903: GREATEREQUAL
41904: AND
41905: PUSH
41906: LD_VAR 0 3
41910: PPUSH
41911: LD_INT 3
41913: PPUSH
41914: CALL_OW 275
41918: PUSH
41919: LD_VAR 0 4
41923: PUSH
41924: LD_INT 3
41926: ARRAY
41927: GREATEREQUAL
41928: AND
41929: ST_TO_ADDR
// end ;
41930: LD_VAR 0 2
41934: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41935: LD_INT 0
41937: PPUSH
41938: PPUSH
41939: PPUSH
// pom := GetBase ( building ) ;
41940: LD_ADDR_VAR 0 4
41944: PUSH
41945: LD_VAR 0 1
41949: PPUSH
41950: CALL_OW 274
41954: ST_TO_ADDR
// if not pom then
41955: LD_VAR 0 4
41959: NOT
41960: IFFALSE 41964
// exit ;
41962: GO 42065
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41964: LD_ADDR_VAR 0 5
41968: PUSH
41969: LD_VAR 0 2
41973: PPUSH
41974: LD_VAR 0 1
41978: PPUSH
41979: CALL_OW 248
41983: PPUSH
41984: CALL_OW 450
41988: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41989: LD_ADDR_VAR 0 3
41993: PUSH
41994: LD_VAR 0 4
41998: PPUSH
41999: LD_INT 1
42001: PPUSH
42002: CALL_OW 275
42006: PUSH
42007: LD_VAR 0 5
42011: PUSH
42012: LD_INT 1
42014: ARRAY
42015: GREATEREQUAL
42016: PUSH
42017: LD_VAR 0 4
42021: PPUSH
42022: LD_INT 2
42024: PPUSH
42025: CALL_OW 275
42029: PUSH
42030: LD_VAR 0 5
42034: PUSH
42035: LD_INT 2
42037: ARRAY
42038: GREATEREQUAL
42039: AND
42040: PUSH
42041: LD_VAR 0 4
42045: PPUSH
42046: LD_INT 3
42048: PPUSH
42049: CALL_OW 275
42053: PUSH
42054: LD_VAR 0 5
42058: PUSH
42059: LD_INT 3
42061: ARRAY
42062: GREATEREQUAL
42063: AND
42064: ST_TO_ADDR
// end ;
42065: LD_VAR 0 3
42069: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
42070: LD_INT 0
42072: PPUSH
42073: PPUSH
42074: PPUSH
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
42081: PPUSH
// result := false ;
42082: LD_ADDR_VAR 0 6
42086: PUSH
42087: LD_INT 0
42089: ST_TO_ADDR
// if not base or not btype or not x or not y then
42090: LD_VAR 0 1
42094: NOT
42095: PUSH
42096: LD_VAR 0 2
42100: NOT
42101: OR
42102: PUSH
42103: LD_VAR 0 3
42107: NOT
42108: OR
42109: PUSH
42110: LD_VAR 0 4
42114: NOT
42115: OR
42116: IFFALSE 42120
// exit ;
42118: GO 42729
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
42120: LD_ADDR_VAR 0 12
42124: PUSH
42125: LD_VAR 0 2
42129: PPUSH
42130: LD_VAR 0 3
42134: PPUSH
42135: LD_VAR 0 4
42139: PPUSH
42140: LD_VAR 0 5
42144: PPUSH
42145: LD_VAR 0 1
42149: PUSH
42150: LD_INT 1
42152: ARRAY
42153: PPUSH
42154: CALL_OW 248
42158: PPUSH
42159: LD_INT 0
42161: PPUSH
42162: CALL 43566 0 6
42166: ST_TO_ADDR
// if not hexes then
42167: LD_VAR 0 12
42171: NOT
42172: IFFALSE 42176
// exit ;
42174: GO 42729
// for i = 1 to hexes do
42176: LD_ADDR_VAR 0 7
42180: PUSH
42181: DOUBLE
42182: LD_INT 1
42184: DEC
42185: ST_TO_ADDR
42186: LD_VAR 0 12
42190: PUSH
42191: FOR_TO
42192: IFFALSE 42727
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42194: LD_ADDR_VAR 0 11
42198: PUSH
42199: LD_VAR 0 12
42203: PUSH
42204: LD_VAR 0 7
42208: ARRAY
42209: PUSH
42210: LD_INT 1
42212: ARRAY
42213: PPUSH
42214: LD_VAR 0 12
42218: PUSH
42219: LD_VAR 0 7
42223: ARRAY
42224: PUSH
42225: LD_INT 2
42227: ARRAY
42228: PPUSH
42229: CALL_OW 428
42233: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42234: LD_VAR 0 12
42238: PUSH
42239: LD_VAR 0 7
42243: ARRAY
42244: PUSH
42245: LD_INT 1
42247: ARRAY
42248: PPUSH
42249: LD_VAR 0 12
42253: PUSH
42254: LD_VAR 0 7
42258: ARRAY
42259: PUSH
42260: LD_INT 2
42262: ARRAY
42263: PPUSH
42264: CALL_OW 351
42268: PUSH
42269: LD_VAR 0 12
42273: PUSH
42274: LD_VAR 0 7
42278: ARRAY
42279: PUSH
42280: LD_INT 1
42282: ARRAY
42283: PPUSH
42284: LD_VAR 0 12
42288: PUSH
42289: LD_VAR 0 7
42293: ARRAY
42294: PUSH
42295: LD_INT 2
42297: ARRAY
42298: PPUSH
42299: CALL_OW 488
42303: NOT
42304: OR
42305: PUSH
42306: LD_VAR 0 11
42310: PPUSH
42311: CALL_OW 247
42315: PUSH
42316: LD_INT 3
42318: EQUAL
42319: OR
42320: IFFALSE 42326
// exit ;
42322: POP
42323: POP
42324: GO 42729
// if not tmp or not tmp in base then
42326: LD_VAR 0 11
42330: NOT
42331: PUSH
42332: LD_VAR 0 11
42336: PUSH
42337: LD_VAR 0 1
42341: IN
42342: NOT
42343: OR
42344: IFFALSE 42348
// continue ;
42346: GO 42191
// result := true ;
42348: LD_ADDR_VAR 0 6
42352: PUSH
42353: LD_INT 1
42355: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42356: LD_ADDR_VAR 0 15
42360: PUSH
42361: LD_VAR 0 1
42365: PPUSH
42366: LD_INT 22
42368: PUSH
42369: LD_VAR 0 11
42373: PPUSH
42374: CALL_OW 255
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: LD_INT 30
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 30
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: LIST
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PPUSH
42415: CALL_OW 72
42419: ST_TO_ADDR
// if dep then
42420: LD_VAR 0 15
42424: IFFALSE 42560
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42426: LD_ADDR_VAR 0 14
42430: PUSH
42431: LD_VAR 0 15
42435: PUSH
42436: LD_INT 1
42438: ARRAY
42439: PPUSH
42440: CALL_OW 250
42444: PPUSH
42445: LD_VAR 0 15
42449: PUSH
42450: LD_INT 1
42452: ARRAY
42453: PPUSH
42454: CALL_OW 254
42458: PPUSH
42459: LD_INT 5
42461: PPUSH
42462: CALL_OW 272
42466: PUSH
42467: LD_VAR 0 15
42471: PUSH
42472: LD_INT 1
42474: ARRAY
42475: PPUSH
42476: CALL_OW 251
42480: PPUSH
42481: LD_VAR 0 15
42485: PUSH
42486: LD_INT 1
42488: ARRAY
42489: PPUSH
42490: CALL_OW 254
42494: PPUSH
42495: LD_INT 5
42497: PPUSH
42498: CALL_OW 273
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42507: LD_VAR 0 14
42511: PUSH
42512: LD_INT 1
42514: ARRAY
42515: PPUSH
42516: LD_VAR 0 14
42520: PUSH
42521: LD_INT 2
42523: ARRAY
42524: PPUSH
42525: CALL_OW 488
42529: IFFALSE 42560
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42531: LD_VAR 0 11
42535: PPUSH
42536: LD_VAR 0 14
42540: PUSH
42541: LD_INT 1
42543: ARRAY
42544: PPUSH
42545: LD_VAR 0 14
42549: PUSH
42550: LD_INT 2
42552: ARRAY
42553: PPUSH
42554: CALL_OW 111
// continue ;
42558: GO 42191
// end ; end ; r := GetDir ( tmp ) ;
42560: LD_ADDR_VAR 0 13
42564: PUSH
42565: LD_VAR 0 11
42569: PPUSH
42570: CALL_OW 254
42574: ST_TO_ADDR
// if r = 5 then
42575: LD_VAR 0 13
42579: PUSH
42580: LD_INT 5
42582: EQUAL
42583: IFFALSE 42593
// r := 0 ;
42585: LD_ADDR_VAR 0 13
42589: PUSH
42590: LD_INT 0
42592: ST_TO_ADDR
// for j = r to 5 do
42593: LD_ADDR_VAR 0 8
42597: PUSH
42598: DOUBLE
42599: LD_VAR 0 13
42603: DEC
42604: ST_TO_ADDR
42605: LD_INT 5
42607: PUSH
42608: FOR_TO
42609: IFFALSE 42723
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42611: LD_ADDR_VAR 0 9
42615: PUSH
42616: LD_VAR 0 11
42620: PPUSH
42621: CALL_OW 250
42625: PPUSH
42626: LD_VAR 0 8
42630: PPUSH
42631: LD_INT 2
42633: PPUSH
42634: CALL_OW 272
42638: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42639: LD_ADDR_VAR 0 10
42643: PUSH
42644: LD_VAR 0 11
42648: PPUSH
42649: CALL_OW 251
42653: PPUSH
42654: LD_VAR 0 8
42658: PPUSH
42659: LD_INT 2
42661: PPUSH
42662: CALL_OW 273
42666: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42667: LD_VAR 0 9
42671: PPUSH
42672: LD_VAR 0 10
42676: PPUSH
42677: CALL_OW 488
42681: PUSH
42682: LD_VAR 0 9
42686: PPUSH
42687: LD_VAR 0 10
42691: PPUSH
42692: CALL_OW 428
42696: NOT
42697: AND
42698: IFFALSE 42721
// begin ComMoveXY ( tmp , _x , _y ) ;
42700: LD_VAR 0 11
42704: PPUSH
42705: LD_VAR 0 9
42709: PPUSH
42710: LD_VAR 0 10
42714: PPUSH
42715: CALL_OW 111
// break ;
42719: GO 42723
// end ; end ;
42721: GO 42608
42723: POP
42724: POP
// end ;
42725: GO 42191
42727: POP
42728: POP
// end ;
42729: LD_VAR 0 6
42733: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
42734: LD_INT 0
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
// result := false ;
42746: LD_ADDR_VAR 0 6
42750: PUSH
42751: LD_INT 0
42753: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42754: LD_VAR 0 1
42758: NOT
42759: PUSH
42760: LD_VAR 0 1
42764: PPUSH
42765: CALL_OW 266
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: IN
42780: NOT
42781: OR
42782: PUSH
42783: LD_VAR 0 2
42787: NOT
42788: OR
42789: PUSH
42790: LD_VAR 0 5
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: LD_INT 3
42806: PUSH
42807: LD_INT 4
42809: PUSH
42810: LD_INT 5
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: IN
42821: NOT
42822: OR
42823: PUSH
42824: LD_VAR 0 3
42828: PPUSH
42829: LD_VAR 0 4
42833: PPUSH
42834: CALL_OW 488
42838: NOT
42839: OR
42840: IFFALSE 42844
// exit ;
42842: GO 43561
// pom := GetBase ( depot ) ;
42844: LD_ADDR_VAR 0 10
42848: PUSH
42849: LD_VAR 0 1
42853: PPUSH
42854: CALL_OW 274
42858: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42859: LD_ADDR_VAR 0 11
42863: PUSH
42864: LD_VAR 0 2
42868: PPUSH
42869: LD_VAR 0 1
42873: PPUSH
42874: CALL_OW 248
42878: PPUSH
42879: CALL_OW 450
42883: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42884: LD_VAR 0 10
42888: PPUSH
42889: LD_INT 1
42891: PPUSH
42892: CALL_OW 275
42896: PUSH
42897: LD_VAR 0 11
42901: PUSH
42902: LD_INT 1
42904: ARRAY
42905: GREATEREQUAL
42906: PUSH
42907: LD_VAR 0 10
42911: PPUSH
42912: LD_INT 2
42914: PPUSH
42915: CALL_OW 275
42919: PUSH
42920: LD_VAR 0 11
42924: PUSH
42925: LD_INT 2
42927: ARRAY
42928: GREATEREQUAL
42929: AND
42930: PUSH
42931: LD_VAR 0 10
42935: PPUSH
42936: LD_INT 3
42938: PPUSH
42939: CALL_OW 275
42943: PUSH
42944: LD_VAR 0 11
42948: PUSH
42949: LD_INT 3
42951: ARRAY
42952: GREATEREQUAL
42953: AND
42954: NOT
42955: IFFALSE 42959
// exit ;
42957: GO 43561
// if GetBType ( depot ) = b_depot then
42959: LD_VAR 0 1
42963: PPUSH
42964: CALL_OW 266
42968: PUSH
42969: LD_INT 0
42971: EQUAL
42972: IFFALSE 42984
// dist := 28 else
42974: LD_ADDR_VAR 0 14
42978: PUSH
42979: LD_INT 28
42981: ST_TO_ADDR
42982: GO 42992
// dist := 36 ;
42984: LD_ADDR_VAR 0 14
42988: PUSH
42989: LD_INT 36
42991: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42992: LD_VAR 0 1
42996: PPUSH
42997: LD_VAR 0 3
43001: PPUSH
43002: LD_VAR 0 4
43006: PPUSH
43007: CALL_OW 297
43011: PUSH
43012: LD_VAR 0 14
43016: GREATER
43017: IFFALSE 43021
// exit ;
43019: GO 43561
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43021: LD_ADDR_VAR 0 12
43025: PUSH
43026: LD_VAR 0 2
43030: PPUSH
43031: LD_VAR 0 3
43035: PPUSH
43036: LD_VAR 0 4
43040: PPUSH
43041: LD_VAR 0 5
43045: PPUSH
43046: LD_VAR 0 1
43050: PPUSH
43051: CALL_OW 248
43055: PPUSH
43056: LD_INT 0
43058: PPUSH
43059: CALL 43566 0 6
43063: ST_TO_ADDR
// if not hexes then
43064: LD_VAR 0 12
43068: NOT
43069: IFFALSE 43073
// exit ;
43071: GO 43561
// hex := GetHexInfo ( x , y ) ;
43073: LD_ADDR_VAR 0 15
43077: PUSH
43078: LD_VAR 0 3
43082: PPUSH
43083: LD_VAR 0 4
43087: PPUSH
43088: CALL_OW 546
43092: ST_TO_ADDR
// if hex [ 1 ] then
43093: LD_VAR 0 15
43097: PUSH
43098: LD_INT 1
43100: ARRAY
43101: IFFALSE 43105
// exit ;
43103: GO 43561
// height := hex [ 2 ] ;
43105: LD_ADDR_VAR 0 13
43109: PUSH
43110: LD_VAR 0 15
43114: PUSH
43115: LD_INT 2
43117: ARRAY
43118: ST_TO_ADDR
// for i = 1 to hexes do
43119: LD_ADDR_VAR 0 7
43123: PUSH
43124: DOUBLE
43125: LD_INT 1
43127: DEC
43128: ST_TO_ADDR
43129: LD_VAR 0 12
43133: PUSH
43134: FOR_TO
43135: IFFALSE 43465
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43137: LD_VAR 0 12
43141: PUSH
43142: LD_VAR 0 7
43146: ARRAY
43147: PUSH
43148: LD_INT 1
43150: ARRAY
43151: PPUSH
43152: LD_VAR 0 12
43156: PUSH
43157: LD_VAR 0 7
43161: ARRAY
43162: PUSH
43163: LD_INT 2
43165: ARRAY
43166: PPUSH
43167: CALL_OW 488
43171: NOT
43172: PUSH
43173: LD_VAR 0 12
43177: PUSH
43178: LD_VAR 0 7
43182: ARRAY
43183: PUSH
43184: LD_INT 1
43186: ARRAY
43187: PPUSH
43188: LD_VAR 0 12
43192: PUSH
43193: LD_VAR 0 7
43197: ARRAY
43198: PUSH
43199: LD_INT 2
43201: ARRAY
43202: PPUSH
43203: CALL_OW 428
43207: PUSH
43208: LD_INT 0
43210: GREATER
43211: OR
43212: PUSH
43213: LD_VAR 0 12
43217: PUSH
43218: LD_VAR 0 7
43222: ARRAY
43223: PUSH
43224: LD_INT 1
43226: ARRAY
43227: PPUSH
43228: LD_VAR 0 12
43232: PUSH
43233: LD_VAR 0 7
43237: ARRAY
43238: PUSH
43239: LD_INT 2
43241: ARRAY
43242: PPUSH
43243: CALL_OW 351
43247: OR
43248: IFFALSE 43254
// exit ;
43250: POP
43251: POP
43252: GO 43561
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43254: LD_ADDR_VAR 0 8
43258: PUSH
43259: LD_VAR 0 12
43263: PUSH
43264: LD_VAR 0 7
43268: ARRAY
43269: PUSH
43270: LD_INT 1
43272: ARRAY
43273: PPUSH
43274: LD_VAR 0 12
43278: PUSH
43279: LD_VAR 0 7
43283: ARRAY
43284: PUSH
43285: LD_INT 2
43287: ARRAY
43288: PPUSH
43289: CALL_OW 546
43293: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43294: LD_VAR 0 8
43298: PUSH
43299: LD_INT 1
43301: ARRAY
43302: PUSH
43303: LD_VAR 0 8
43307: PUSH
43308: LD_INT 2
43310: ARRAY
43311: PUSH
43312: LD_VAR 0 13
43316: PUSH
43317: LD_INT 2
43319: PLUS
43320: GREATER
43321: OR
43322: PUSH
43323: LD_VAR 0 8
43327: PUSH
43328: LD_INT 2
43330: ARRAY
43331: PUSH
43332: LD_VAR 0 13
43336: PUSH
43337: LD_INT 2
43339: MINUS
43340: LESS
43341: OR
43342: PUSH
43343: LD_VAR 0 8
43347: PUSH
43348: LD_INT 3
43350: ARRAY
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: LD_INT 8
43357: PUSH
43358: LD_INT 9
43360: PUSH
43361: LD_INT 10
43363: PUSH
43364: LD_INT 11
43366: PUSH
43367: LD_INT 12
43369: PUSH
43370: LD_INT 13
43372: PUSH
43373: LD_INT 16
43375: PUSH
43376: LD_INT 17
43378: PUSH
43379: LD_INT 18
43381: PUSH
43382: LD_INT 19
43384: PUSH
43385: LD_INT 20
43387: PUSH
43388: LD_INT 21
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: IN
43406: NOT
43407: OR
43408: PUSH
43409: LD_VAR 0 8
43413: PUSH
43414: LD_INT 5
43416: ARRAY
43417: NOT
43418: OR
43419: PUSH
43420: LD_VAR 0 8
43424: PUSH
43425: LD_INT 6
43427: ARRAY
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: LD_INT 7
43437: PUSH
43438: LD_INT 9
43440: PUSH
43441: LD_INT 10
43443: PUSH
43444: LD_INT 11
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: IN
43455: NOT
43456: OR
43457: IFFALSE 43463
// exit ;
43459: POP
43460: POP
43461: GO 43561
// end ;
43463: GO 43134
43465: POP
43466: POP
// side := GetSide ( depot ) ;
43467: LD_ADDR_VAR 0 9
43471: PUSH
43472: LD_VAR 0 1
43476: PPUSH
43477: CALL_OW 255
43481: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43482: LD_VAR 0 9
43486: PPUSH
43487: LD_VAR 0 3
43491: PPUSH
43492: LD_VAR 0 4
43496: PPUSH
43497: LD_INT 20
43499: PPUSH
43500: CALL 36215 0 4
43504: PUSH
43505: LD_INT 4
43507: ARRAY
43508: IFFALSE 43512
// exit ;
43510: GO 43561
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43512: LD_VAR 0 2
43516: PUSH
43517: LD_INT 29
43519: PUSH
43520: LD_INT 30
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: IN
43527: PUSH
43528: LD_VAR 0 3
43532: PPUSH
43533: LD_VAR 0 4
43537: PPUSH
43538: LD_VAR 0 9
43542: PPUSH
43543: CALL_OW 440
43547: NOT
43548: AND
43549: IFFALSE 43553
// exit ;
43551: GO 43561
// result := true ;
43553: LD_ADDR_VAR 0 6
43557: PUSH
43558: LD_INT 1
43560: ST_TO_ADDR
// end ;
43561: LD_VAR 0 6
43565: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
43566: LD_INT 0
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
43575: PPUSH
43576: PPUSH
43577: PPUSH
43578: PPUSH
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
43593: PPUSH
43594: PPUSH
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
43602: PPUSH
43603: PPUSH
43604: PPUSH
43605: PPUSH
43606: PPUSH
43607: PPUSH
43608: PPUSH
43609: PPUSH
43610: PPUSH
43611: PPUSH
43612: PPUSH
43613: PPUSH
43614: PPUSH
43615: PPUSH
43616: PPUSH
43617: PPUSH
43618: PPUSH
43619: PPUSH
43620: PPUSH
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
43625: PPUSH
// result = [ ] ;
43626: LD_ADDR_VAR 0 7
43630: PUSH
43631: EMPTY
43632: ST_TO_ADDR
// temp_list = [ ] ;
43633: LD_ADDR_VAR 0 9
43637: PUSH
43638: EMPTY
43639: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43640: LD_VAR 0 4
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 3
43656: PUSH
43657: LD_INT 4
43659: PUSH
43660: LD_INT 5
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: IN
43671: NOT
43672: PUSH
43673: LD_VAR 0 1
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: IN
43688: PUSH
43689: LD_VAR 0 5
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 3
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: LIST
43707: IN
43708: NOT
43709: AND
43710: OR
43711: IFFALSE 43715
// exit ;
43713: GO 62106
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43715: LD_VAR 0 1
43719: PUSH
43720: LD_INT 6
43722: PUSH
43723: LD_INT 7
43725: PUSH
43726: LD_INT 8
43728: PUSH
43729: LD_INT 13
43731: PUSH
43732: LD_INT 12
43734: PUSH
43735: LD_INT 15
43737: PUSH
43738: LD_INT 11
43740: PUSH
43741: LD_INT 14
43743: PUSH
43744: LD_INT 10
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: IN
43758: IFFALSE 43768
// btype = b_lab ;
43760: LD_ADDR_VAR 0 1
43764: PUSH
43765: LD_INT 6
43767: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43768: LD_VAR 0 6
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: LIST
43786: IN
43787: NOT
43788: PUSH
43789: LD_VAR 0 1
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: LD_INT 3
43805: PUSH
43806: LD_INT 6
43808: PUSH
43809: LD_INT 36
43811: PUSH
43812: LD_INT 4
43814: PUSH
43815: LD_INT 5
43817: PUSH
43818: LD_INT 31
43820: PUSH
43821: LD_INT 32
43823: PUSH
43824: LD_INT 33
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: IN
43840: NOT
43841: PUSH
43842: LD_VAR 0 6
43846: PUSH
43847: LD_INT 1
43849: EQUAL
43850: AND
43851: OR
43852: PUSH
43853: LD_VAR 0 1
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: LD_INT 3
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: IN
43868: NOT
43869: PUSH
43870: LD_VAR 0 6
43874: PUSH
43875: LD_INT 2
43877: EQUAL
43878: AND
43879: OR
43880: IFFALSE 43890
// mode = 0 ;
43882: LD_ADDR_VAR 0 6
43886: PUSH
43887: LD_INT 0
43889: ST_TO_ADDR
// case mode of 0 :
43890: LD_VAR 0 6
43894: PUSH
43895: LD_INT 0
43897: DOUBLE
43898: EQUAL
43899: IFTRUE 43903
43901: GO 55356
43903: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43904: LD_ADDR_VAR 0 11
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 2
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 2
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 2
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 3
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 3
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 2
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44097: LD_ADDR_VAR 0 12
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 3
44254: NEG
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 3
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44293: LD_ADDR_VAR 0 13
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: LD_INT 2
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: NEG
44441: PUSH
44442: LD_INT 3
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 3
44452: NEG
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 3
44464: NEG
44465: PUSH
44466: LD_INT 3
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44492: LD_ADDR_VAR 0 14
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 2
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 3
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 3
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44688: LD_ADDR_VAR 0 15
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: NEG
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 3
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44881: LD_ADDR_VAR 0 16
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: LD_INT 2
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 3
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 3
45038: PUSH
45039: LD_INT 3
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 2
45048: PUSH
45049: LD_INT 3
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45074: LD_ADDR_VAR 0 17
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 2
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45304: LD_ADDR_VAR 0 18
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45534: LD_ADDR_VAR 0 19
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45764: LD_ADDR_VAR 0 20
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45994: LD_ADDR_VAR 0 21
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: LD_INT 2
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46224: LD_ADDR_VAR 0 22
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46454: LD_ADDR_VAR 0 23
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: LD_INT 3
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46734: LD_ADDR_VAR 0 24
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 2
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 3
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47010: LD_ADDR_VAR 0 25
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: NEG
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 3
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 3
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: LD_INT 3
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: LD_INT 3
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47284: LD_ADDR_VAR 0 26
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: LD_INT 3
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 3
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47560: LD_ADDR_VAR 0 27
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: NEG
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 3
47793: NEG
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 3
47805: NEG
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47840: LD_ADDR_VAR 0 28
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: NEG
48052: PUSH
48053: LD_INT 3
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 3
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 3
48087: NEG
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48122: LD_ADDR_VAR 0 29
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 3
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 3
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 3
48366: NEG
48367: PUSH
48368: LD_INT 2
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48401: LD_ADDR_VAR 0 30
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: LD_INT 2
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: LD_INT 3
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 3
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: LD_INT 3
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 3
48644: NEG
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48679: LD_ADDR_VAR 0 31
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: LD_INT 3
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 3
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: LD_INT 3
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 3
48922: NEG
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48957: LD_ADDR_VAR 0 32
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: LD_INT 3
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 3
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49235: LD_ADDR_VAR 0 33
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: LD_INT 3
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 3
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 3
49479: NEG
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49514: LD_ADDR_VAR 0 34
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: LD_INT 3
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 3
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 2
49748: NEG
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 3
49759: NEG
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49794: LD_ADDR_VAR 0 35
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49906: LD_ADDR_VAR 0 36
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50018: LD_ADDR_VAR 0 37
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50130: LD_ADDR_VAR 0 38
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50242: LD_ADDR_VAR 0 39
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50354: LD_ADDR_VAR 0 40
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50466: LD_ADDR_VAR 0 41
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 2
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: LD_INT 3
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 3
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 3
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 3
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 3
50709: PUSH
50710: LD_INT 3
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: LD_INT 3
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 3
50740: NEG
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 3
50751: NEG
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 3
50763: NEG
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 3
50775: NEG
50776: PUSH
50777: LD_INT 3
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50816: LD_ADDR_VAR 0 42
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: LD_INT 3
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: LD_INT 3
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 3
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 3
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 3
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 3
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 3
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 3
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 3
51113: NEG
51114: PUSH
51115: LD_INT 2
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 3
51125: NEG
51126: PUSH
51127: LD_INT 3
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51166: LD_ADDR_VAR 0 43
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: NEG
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 3
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 3
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 3
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 3
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 3
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 3
51462: NEG
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51514: LD_ADDR_VAR 0 44
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: LD_INT 3
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 3
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: LD_INT 3
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 3
51788: NEG
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 3
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 3
51811: NEG
51812: PUSH
51813: LD_INT 2
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 3
51823: NEG
51824: PUSH
51825: LD_INT 3
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51864: LD_ADDR_VAR 0 45
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: NEG
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: LD_INT 3
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 3
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 3
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 3
52100: PUSH
52101: LD_INT 2
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 3
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 3
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 3
52161: NEG
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 3
52173: NEG
52174: PUSH
52175: LD_INT 3
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52214: LD_ADDR_VAR 0 46
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 2
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 2
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 2
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 3
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 3
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 3
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 3
52510: NEG
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: NEG
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52562: LD_ADDR_VAR 0 47
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 2
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 2
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52713: LD_ADDR_VAR 0 48
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52860: LD_ADDR_VAR 0 49
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53004: LD_ADDR_VAR 0 50
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53148: LD_ADDR_VAR 0 51
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 2
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 2
53260: NEG
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 2
53271: NEG
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53295: LD_ADDR_VAR 0 52
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 2
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53446: LD_ADDR_VAR 0 53
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53676: LD_ADDR_VAR 0 54
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53906: LD_ADDR_VAR 0 55
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54136: LD_ADDR_VAR 0 56
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54366: LD_ADDR_VAR 0 57
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54596: LD_ADDR_VAR 0 58
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54826: LD_ADDR_VAR 0 59
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54914: LD_ADDR_VAR 0 60
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55002: LD_ADDR_VAR 0 61
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55090: LD_ADDR_VAR 0 62
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55178: LD_ADDR_VAR 0 63
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55266: LD_ADDR_VAR 0 64
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: ST_TO_ADDR
// end ; 1 :
55354: GO 61251
55356: LD_INT 1
55358: DOUBLE
55359: EQUAL
55360: IFTRUE 55364
55362: GO 57987
55364: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55365: LD_ADDR_VAR 0 11
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: LD_INT 3
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 3
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: LIST
55408: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55409: LD_ADDR_VAR 0 12
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: LIST
55449: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55450: LD_ADDR_VAR 0 13
55454: PUSH
55455: LD_INT 3
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: PUSH
55468: LD_INT 3
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: LIST
55489: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55490: LD_ADDR_VAR 0 14
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 3
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: LIST
55530: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55531: LD_ADDR_VAR 0 15
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 3
55549: NEG
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: LIST
55574: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55575: LD_ADDR_VAR 0 16
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 3
55594: NEG
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 3
55606: NEG
55607: PUSH
55608: LD_INT 3
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: LIST
55620: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55621: LD_ADDR_VAR 0 17
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 3
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 3
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: LIST
55664: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55665: LD_ADDR_VAR 0 18
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 3
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 3
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: LIST
55705: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55706: LD_ADDR_VAR 0 19
55710: PUSH
55711: LD_INT 3
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 3
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: LIST
55745: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55746: LD_ADDR_VAR 0 20
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: LD_INT 3
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: LD_INT 3
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: LIST
55786: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55787: LD_ADDR_VAR 0 21
55791: PUSH
55792: LD_INT 2
55794: NEG
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: NEG
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55831: LD_ADDR_VAR 0 22
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: LD_INT 3
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 3
55850: NEG
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 3
55862: NEG
55863: PUSH
55864: LD_INT 3
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: LIST
55876: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55877: LD_ADDR_VAR 0 23
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 3
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: LD_INT 4
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 3
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: LIST
55920: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55921: LD_ADDR_VAR 0 24
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 4
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: LIST
55961: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55962: LD_ADDR_VAR 0 25
55966: PUSH
55967: LD_INT 3
55969: PUSH
55970: LD_INT 3
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 4
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 3
55989: PUSH
55990: LD_INT 4
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: LIST
56001: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56002: LD_ADDR_VAR 0 26
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 3
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 4
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: LIST
56042: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56043: LD_ADDR_VAR 0 27
56047: PUSH
56048: LD_INT 3
56050: NEG
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 4
56072: NEG
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: LIST
56086: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56087: LD_ADDR_VAR 0 28
56091: PUSH
56092: LD_INT 3
56094: NEG
56095: PUSH
56096: LD_INT 3
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 3
56106: NEG
56107: PUSH
56108: LD_INT 4
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 4
56118: NEG
56119: PUSH
56120: LD_INT 3
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: LIST
56132: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56133: LD_ADDR_VAR 0 29
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 3
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 4
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 4
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 3
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 5
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 5
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: LD_INT 4
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: LD_INT 6
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 6
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 5
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56288: LD_ADDR_VAR 0 30
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 3
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 3
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 3
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 4
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 4
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 4
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 5
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 5
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 5
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 6
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 6
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56431: LD_ADDR_VAR 0 31
56435: PUSH
56436: LD_INT 3
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 3
56448: PUSH
56449: LD_INT 3
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: LD_INT 3
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 4
56468: PUSH
56469: LD_INT 3
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 4
56478: PUSH
56479: LD_INT 4
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: LD_INT 4
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 5
56498: PUSH
56499: LD_INT 4
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 5
56508: PUSH
56509: LD_INT 5
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 4
56518: PUSH
56519: LD_INT 5
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 6
56528: PUSH
56529: LD_INT 5
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 6
56538: PUSH
56539: LD_INT 6
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 5
56548: PUSH
56549: LD_INT 6
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56570: LD_ADDR_VAR 0 32
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 3
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 4
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 4
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: LD_INT 3
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 5
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 5
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 4
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 6
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 6
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 5
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56713: LD_ADDR_VAR 0 33
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 3
56731: NEG
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 4
56765: NEG
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 4
56776: NEG
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 4
56788: NEG
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 5
56799: NEG
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 5
56810: NEG
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 5
56822: NEG
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 6
56833: NEG
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 6
56844: NEG
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56868: LD_ADDR_VAR 0 34
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 3
56899: NEG
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 3
56911: NEG
56912: PUSH
56913: LD_INT 4
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 4
56923: NEG
56924: PUSH
56925: LD_INT 3
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 4
56935: NEG
56936: PUSH
56937: LD_INT 4
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 4
56947: NEG
56948: PUSH
56949: LD_INT 5
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 5
56959: NEG
56960: PUSH
56961: LD_INT 4
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 5
56971: NEG
56972: PUSH
56973: LD_INT 5
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 5
56983: NEG
56984: PUSH
56985: LD_INT 6
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 6
56995: NEG
56996: PUSH
56997: LD_INT 5
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 6
57007: NEG
57008: PUSH
57009: LD_INT 6
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57031: LD_ADDR_VAR 0 41
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: LD_INT 3
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: LIST
57074: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57075: LD_ADDR_VAR 0 42
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: LIST
57115: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57116: LD_ADDR_VAR 0 43
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 3
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: LIST
57155: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57156: LD_ADDR_VAR 0 44
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: LD_INT 3
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57197: LD_ADDR_VAR 0 45
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 3
57226: NEG
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: LIST
57240: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57241: LD_ADDR_VAR 0 46
57245: PUSH
57246: LD_INT 2
57248: NEG
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: LD_INT 3
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: LIST
57286: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57287: LD_ADDR_VAR 0 47
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57320: LD_ADDR_VAR 0 48
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57351: LD_ADDR_VAR 0 49
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 3
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57380: LD_ADDR_VAR 0 50
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: LD_INT 3
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57409: LD_ADDR_VAR 0 51
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57440: LD_ADDR_VAR 0 52
57444: PUSH
57445: LD_INT 3
57447: NEG
57448: PUSH
57449: LD_INT 1
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 3
57459: NEG
57460: PUSH
57461: LD_INT 2
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57473: LD_ADDR_VAR 0 53
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: LIST
57516: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57517: LD_ADDR_VAR 0 54
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 3
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: LIST
57557: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57558: LD_ADDR_VAR 0 55
57562: PUSH
57563: LD_INT 3
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: PUSH
57576: LD_INT 3
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: LD_INT 3
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: LIST
57597: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57598: LD_ADDR_VAR 0 56
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 3
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 3
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57639: LD_ADDR_VAR 0 57
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 3
57657: NEG
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 3
57668: NEG
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: LIST
57682: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57683: LD_ADDR_VAR 0 58
57687: PUSH
57688: LD_INT 2
57690: NEG
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 3
57702: NEG
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 3
57714: NEG
57715: PUSH
57716: LD_INT 3
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: LIST
57728: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57729: LD_ADDR_VAR 0 59
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: LIST
57772: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57773: LD_ADDR_VAR 0 60
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: LIST
57813: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57814: LD_ADDR_VAR 0 61
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: LIST
57853: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57854: LD_ADDR_VAR 0 62
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 2
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: LIST
57894: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57895: LD_ADDR_VAR 0 63
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: LIST
57938: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57939: LD_ADDR_VAR 0 64
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: LD_INT 2
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: LIST
57984: ST_TO_ADDR
// end ; 2 :
57985: GO 61251
57987: LD_INT 2
57989: DOUBLE
57990: EQUAL
57991: IFTRUE 57995
57993: GO 61250
57995: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57996: LD_ADDR_VAR 0 29
58000: PUSH
58001: LD_INT 4
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 4
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 5
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 5
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 4
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 3
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 3
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 5
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 3
58096: PUSH
58097: LD_INT 3
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 4
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 4
58126: PUSH
58127: LD_INT 4
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: LD_INT 4
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 4
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: LD_INT 4
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 4
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: LD_INT 4
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 5
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 5
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 4
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: LD_INT 3
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: LD_INT 5
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: NEG
58269: PUSH
58270: LD_INT 3
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 2
58313: NEG
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 3
58324: NEG
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 4
58335: NEG
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 4
58346: NEG
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 4
58358: NEG
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: LD_INT 2
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 4
58381: NEG
58382: PUSH
58383: LD_INT 4
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 4
58393: NEG
58394: PUSH
58395: LD_INT 5
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 3
58405: NEG
58406: PUSH
58407: LD_INT 4
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 3
58417: NEG
58418: PUSH
58419: LD_INT 3
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 4
58429: NEG
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 5
58441: NEG
58442: PUSH
58443: LD_INT 4
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 5
58453: NEG
58454: PUSH
58455: LD_INT 5
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: LD_INT 5
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 5
58477: NEG
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58534: LD_ADDR_VAR 0 30
58538: PUSH
58539: LD_INT 4
58541: PUSH
58542: LD_INT 4
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 4
58551: PUSH
58552: LD_INT 3
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 5
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 5
58571: PUSH
58572: LD_INT 5
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 4
58581: PUSH
58582: LD_INT 5
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 3
58591: PUSH
58592: LD_INT 4
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 3
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 5
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: LD_INT 5
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: LD_INT 3
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: LD_INT 4
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 4
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 3
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: LD_INT 4
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 2
58713: NEG
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 4
58724: NEG
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 4
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 3
58747: NEG
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 3
58758: NEG
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 4
58769: NEG
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 5
58780: NEG
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 5
58791: NEG
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 5
58803: NEG
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 3
58815: NEG
58816: PUSH
58817: LD_INT 2
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 3
58826: NEG
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: NEG
58839: PUSH
58840: LD_INT 4
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: LD_INT 3
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 4
58886: NEG
58887: PUSH
58888: LD_INT 3
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 4
58898: NEG
58899: PUSH
58900: LD_INT 4
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: LD_INT 4
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 4
58922: NEG
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 4
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: LD_INT 5
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: LD_INT 4
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: LD_INT 3
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: LD_INT 3
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: LD_INT 4
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: LD_INT 5
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: LD_INT 3
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: LD_INT 5
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59081: LD_ADDR_VAR 0 31
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: LD_INT 4
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: LD_INT 4
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: LD_INT 5
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 5
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: LD_INT 4
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: LD_INT 3
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: LD_INT 5
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: LD_INT 3
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 3
59181: NEG
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 3
59192: NEG
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 3
59226: NEG
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 4
59237: NEG
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 4
59248: NEG
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 4
59260: NEG
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: LD_INT 2
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 4
59283: NEG
59284: PUSH
59285: LD_INT 4
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 4
59295: NEG
59296: PUSH
59297: LD_INT 5
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: NEG
59308: PUSH
59309: LD_INT 4
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 3
59319: NEG
59320: PUSH
59321: LD_INT 3
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 4
59331: NEG
59332: PUSH
59333: LD_INT 3
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 5
59343: NEG
59344: PUSH
59345: LD_INT 4
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 5
59355: NEG
59356: PUSH
59357: LD_INT 5
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: LD_INT 5
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 5
59379: NEG
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 4
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 3
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: LD_INT 4
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: LD_INT 4
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 4
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 4
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 5
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 5
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 4
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 3
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 3
59565: PUSH
59566: LD_INT 2
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 5
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59631: LD_ADDR_VAR 0 32
59635: PUSH
59636: LD_INT 4
59638: NEG
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 4
59649: NEG
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 3
59661: NEG
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 3
59672: NEG
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 4
59683: NEG
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 5
59694: NEG
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 5
59705: NEG
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 5
59717: NEG
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: NEG
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 3
59740: NEG
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: NEG
59753: PUSH
59754: LD_INT 4
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 2
59764: NEG
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 2
59776: NEG
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 3
59788: NEG
59789: PUSH
59790: LD_INT 2
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 4
59800: NEG
59801: PUSH
59802: LD_INT 3
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 4
59812: NEG
59813: PUSH
59814: LD_INT 4
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: LD_INT 4
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 4
59836: NEG
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: LD_INT 4
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 5
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: LD_INT 4
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 3
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_INT 3
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: LD_INT 4
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: LD_INT 5
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: LD_INT 5
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 3
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 3
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 4
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 4
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 4
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 4
60043: PUSH
60044: LD_INT 4
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 4
60053: PUSH
60054: LD_INT 3
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 5
60063: PUSH
60064: LD_INT 4
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 5
60073: PUSH
60074: LD_INT 5
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 4
60083: PUSH
60084: LD_INT 5
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 3
60093: PUSH
60094: LD_INT 4
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 3
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 5
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 3
60123: PUSH
60124: LD_INT 5
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60178: LD_ADDR_VAR 0 33
60182: PUSH
60183: LD_INT 4
60185: NEG
60186: PUSH
60187: LD_INT 4
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 4
60197: NEG
60198: PUSH
60199: LD_INT 5
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: LD_INT 4
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 3
60221: NEG
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 4
60233: NEG
60234: PUSH
60235: LD_INT 3
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 5
60245: NEG
60246: PUSH
60247: LD_INT 4
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 5
60257: NEG
60258: PUSH
60259: LD_INT 5
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 3
60269: NEG
60270: PUSH
60271: LD_INT 5
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 5
60281: NEG
60282: PUSH
60283: LD_INT 3
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 4
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: LD_INT 3
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: LD_INT 2
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 2
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 3
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: NEG
60361: PUSH
60362: LD_INT 4
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 2
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: LD_INT 4
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 4
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 4
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 5
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 5
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 4
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 3
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 3
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 5
60478: PUSH
60479: LD_INT 2
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 3
60488: PUSH
60489: LD_INT 3
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: LD_INT 2
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 4
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 4
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 3
60528: PUSH
60529: LD_INT 4
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 4
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: PUSH
60569: LD_INT 4
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 4
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: LD_INT 3
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: LD_INT 4
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: LD_INT 5
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: LD_INT 5
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 4
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: LD_INT 3
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: LD_INT 5
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: LD_INT 3
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60716: LD_ADDR_VAR 0 34
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 4
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 5
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 4
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: LD_INT 3
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: LD_INT 3
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 4
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 5
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: LD_INT 3
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: LD_INT 5
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 4
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 4
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 2
60897: PUSH
60898: LD_INT 2
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 4
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 4
60918: PUSH
60919: LD_INT 4
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 4
60928: PUSH
60929: LD_INT 3
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 5
60938: PUSH
60939: LD_INT 4
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 5
60948: PUSH
60949: LD_INT 5
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 4
60958: PUSH
60959: LD_INT 5
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 3
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 3
60978: PUSH
60979: LD_INT 3
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 5
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 3
60998: PUSH
60999: LD_INT 5
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 3
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: PUSH
61029: LD_INT 3
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: LD_INT 4
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: LD_INT 4
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: LD_INT 2
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: LD_INT 4
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 4
61101: NEG
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 4
61112: NEG
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 3
61124: NEG
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 3
61135: NEG
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 4
61146: NEG
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 5
61157: NEG
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 5
61168: NEG
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 5
61180: NEG
61181: PUSH
61182: LD_INT 2
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 3
61192: NEG
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: ST_TO_ADDR
// end ; end ;
61248: GO 61251
61250: POP
// case btype of b_depot , b_warehouse :
61251: LD_VAR 0 1
61255: PUSH
61256: LD_INT 0
61258: DOUBLE
61259: EQUAL
61260: IFTRUE 61270
61262: LD_INT 1
61264: DOUBLE
61265: EQUAL
61266: IFTRUE 61270
61268: GO 61471
61270: POP
// case nation of nation_american :
61271: LD_VAR 0 5
61275: PUSH
61276: LD_INT 1
61278: DOUBLE
61279: EQUAL
61280: IFTRUE 61284
61282: GO 61340
61284: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
61285: LD_ADDR_VAR 0 9
61289: PUSH
61290: LD_VAR 0 11
61294: PUSH
61295: LD_VAR 0 12
61299: PUSH
61300: LD_VAR 0 13
61304: PUSH
61305: LD_VAR 0 14
61309: PUSH
61310: LD_VAR 0 15
61314: PUSH
61315: LD_VAR 0 16
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: PUSH
61328: LD_VAR 0 4
61332: PUSH
61333: LD_INT 1
61335: PLUS
61336: ARRAY
61337: ST_TO_ADDR
61338: GO 61469
61340: LD_INT 2
61342: DOUBLE
61343: EQUAL
61344: IFTRUE 61348
61346: GO 61404
61348: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
61349: LD_ADDR_VAR 0 9
61353: PUSH
61354: LD_VAR 0 17
61358: PUSH
61359: LD_VAR 0 18
61363: PUSH
61364: LD_VAR 0 19
61368: PUSH
61369: LD_VAR 0 20
61373: PUSH
61374: LD_VAR 0 21
61378: PUSH
61379: LD_VAR 0 22
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: PUSH
61392: LD_VAR 0 4
61396: PUSH
61397: LD_INT 1
61399: PLUS
61400: ARRAY
61401: ST_TO_ADDR
61402: GO 61469
61404: LD_INT 3
61406: DOUBLE
61407: EQUAL
61408: IFTRUE 61412
61410: GO 61468
61412: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61413: LD_ADDR_VAR 0 9
61417: PUSH
61418: LD_VAR 0 23
61422: PUSH
61423: LD_VAR 0 24
61427: PUSH
61428: LD_VAR 0 25
61432: PUSH
61433: LD_VAR 0 26
61437: PUSH
61438: LD_VAR 0 27
61442: PUSH
61443: LD_VAR 0 28
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: PUSH
61456: LD_VAR 0 4
61460: PUSH
61461: LD_INT 1
61463: PLUS
61464: ARRAY
61465: ST_TO_ADDR
61466: GO 61469
61468: POP
61469: GO 62024
61471: LD_INT 2
61473: DOUBLE
61474: EQUAL
61475: IFTRUE 61485
61477: LD_INT 3
61479: DOUBLE
61480: EQUAL
61481: IFTRUE 61485
61483: GO 61541
61485: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61486: LD_ADDR_VAR 0 9
61490: PUSH
61491: LD_VAR 0 29
61495: PUSH
61496: LD_VAR 0 30
61500: PUSH
61501: LD_VAR 0 31
61505: PUSH
61506: LD_VAR 0 32
61510: PUSH
61511: LD_VAR 0 33
61515: PUSH
61516: LD_VAR 0 34
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: PUSH
61529: LD_VAR 0 4
61533: PUSH
61534: LD_INT 1
61536: PLUS
61537: ARRAY
61538: ST_TO_ADDR
61539: GO 62024
61541: LD_INT 16
61543: DOUBLE
61544: EQUAL
61545: IFTRUE 61603
61547: LD_INT 17
61549: DOUBLE
61550: EQUAL
61551: IFTRUE 61603
61553: LD_INT 18
61555: DOUBLE
61556: EQUAL
61557: IFTRUE 61603
61559: LD_INT 19
61561: DOUBLE
61562: EQUAL
61563: IFTRUE 61603
61565: LD_INT 22
61567: DOUBLE
61568: EQUAL
61569: IFTRUE 61603
61571: LD_INT 20
61573: DOUBLE
61574: EQUAL
61575: IFTRUE 61603
61577: LD_INT 21
61579: DOUBLE
61580: EQUAL
61581: IFTRUE 61603
61583: LD_INT 23
61585: DOUBLE
61586: EQUAL
61587: IFTRUE 61603
61589: LD_INT 24
61591: DOUBLE
61592: EQUAL
61593: IFTRUE 61603
61595: LD_INT 25
61597: DOUBLE
61598: EQUAL
61599: IFTRUE 61603
61601: GO 61659
61603: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61604: LD_ADDR_VAR 0 9
61608: PUSH
61609: LD_VAR 0 35
61613: PUSH
61614: LD_VAR 0 36
61618: PUSH
61619: LD_VAR 0 37
61623: PUSH
61624: LD_VAR 0 38
61628: PUSH
61629: LD_VAR 0 39
61633: PUSH
61634: LD_VAR 0 40
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: PUSH
61647: LD_VAR 0 4
61651: PUSH
61652: LD_INT 1
61654: PLUS
61655: ARRAY
61656: ST_TO_ADDR
61657: GO 62024
61659: LD_INT 6
61661: DOUBLE
61662: EQUAL
61663: IFTRUE 61715
61665: LD_INT 7
61667: DOUBLE
61668: EQUAL
61669: IFTRUE 61715
61671: LD_INT 8
61673: DOUBLE
61674: EQUAL
61675: IFTRUE 61715
61677: LD_INT 13
61679: DOUBLE
61680: EQUAL
61681: IFTRUE 61715
61683: LD_INT 12
61685: DOUBLE
61686: EQUAL
61687: IFTRUE 61715
61689: LD_INT 15
61691: DOUBLE
61692: EQUAL
61693: IFTRUE 61715
61695: LD_INT 11
61697: DOUBLE
61698: EQUAL
61699: IFTRUE 61715
61701: LD_INT 14
61703: DOUBLE
61704: EQUAL
61705: IFTRUE 61715
61707: LD_INT 10
61709: DOUBLE
61710: EQUAL
61711: IFTRUE 61715
61713: GO 61771
61715: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
61716: LD_ADDR_VAR 0 9
61720: PUSH
61721: LD_VAR 0 41
61725: PUSH
61726: LD_VAR 0 42
61730: PUSH
61731: LD_VAR 0 43
61735: PUSH
61736: LD_VAR 0 44
61740: PUSH
61741: LD_VAR 0 45
61745: PUSH
61746: LD_VAR 0 46
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: PUSH
61759: LD_VAR 0 4
61763: PUSH
61764: LD_INT 1
61766: PLUS
61767: ARRAY
61768: ST_TO_ADDR
61769: GO 62024
61771: LD_INT 36
61773: DOUBLE
61774: EQUAL
61775: IFTRUE 61779
61777: GO 61835
61779: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61780: LD_ADDR_VAR 0 9
61784: PUSH
61785: LD_VAR 0 47
61789: PUSH
61790: LD_VAR 0 48
61794: PUSH
61795: LD_VAR 0 49
61799: PUSH
61800: LD_VAR 0 50
61804: PUSH
61805: LD_VAR 0 51
61809: PUSH
61810: LD_VAR 0 52
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: PUSH
61823: LD_VAR 0 4
61827: PUSH
61828: LD_INT 1
61830: PLUS
61831: ARRAY
61832: ST_TO_ADDR
61833: GO 62024
61835: LD_INT 4
61837: DOUBLE
61838: EQUAL
61839: IFTRUE 61861
61841: LD_INT 5
61843: DOUBLE
61844: EQUAL
61845: IFTRUE 61861
61847: LD_INT 34
61849: DOUBLE
61850: EQUAL
61851: IFTRUE 61861
61853: LD_INT 37
61855: DOUBLE
61856: EQUAL
61857: IFTRUE 61861
61859: GO 61917
61861: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61862: LD_ADDR_VAR 0 9
61866: PUSH
61867: LD_VAR 0 53
61871: PUSH
61872: LD_VAR 0 54
61876: PUSH
61877: LD_VAR 0 55
61881: PUSH
61882: LD_VAR 0 56
61886: PUSH
61887: LD_VAR 0 57
61891: PUSH
61892: LD_VAR 0 58
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: PUSH
61905: LD_VAR 0 4
61909: PUSH
61910: LD_INT 1
61912: PLUS
61913: ARRAY
61914: ST_TO_ADDR
61915: GO 62024
61917: LD_INT 31
61919: DOUBLE
61920: EQUAL
61921: IFTRUE 61967
61923: LD_INT 32
61925: DOUBLE
61926: EQUAL
61927: IFTRUE 61967
61929: LD_INT 33
61931: DOUBLE
61932: EQUAL
61933: IFTRUE 61967
61935: LD_INT 27
61937: DOUBLE
61938: EQUAL
61939: IFTRUE 61967
61941: LD_INT 26
61943: DOUBLE
61944: EQUAL
61945: IFTRUE 61967
61947: LD_INT 28
61949: DOUBLE
61950: EQUAL
61951: IFTRUE 61967
61953: LD_INT 29
61955: DOUBLE
61956: EQUAL
61957: IFTRUE 61967
61959: LD_INT 30
61961: DOUBLE
61962: EQUAL
61963: IFTRUE 61967
61965: GO 62023
61967: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
61968: LD_ADDR_VAR 0 9
61972: PUSH
61973: LD_VAR 0 59
61977: PUSH
61978: LD_VAR 0 60
61982: PUSH
61983: LD_VAR 0 61
61987: PUSH
61988: LD_VAR 0 62
61992: PUSH
61993: LD_VAR 0 63
61997: PUSH
61998: LD_VAR 0 64
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: PUSH
62011: LD_VAR 0 4
62015: PUSH
62016: LD_INT 1
62018: PLUS
62019: ARRAY
62020: ST_TO_ADDR
62021: GO 62024
62023: POP
// temp_list2 = [ ] ;
62024: LD_ADDR_VAR 0 10
62028: PUSH
62029: EMPTY
62030: ST_TO_ADDR
// for i in temp_list do
62031: LD_ADDR_VAR 0 8
62035: PUSH
62036: LD_VAR 0 9
62040: PUSH
62041: FOR_IN
62042: IFFALSE 62094
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62044: LD_ADDR_VAR 0 10
62048: PUSH
62049: LD_VAR 0 10
62053: PUSH
62054: LD_VAR 0 8
62058: PUSH
62059: LD_INT 1
62061: ARRAY
62062: PUSH
62063: LD_VAR 0 2
62067: PLUS
62068: PUSH
62069: LD_VAR 0 8
62073: PUSH
62074: LD_INT 2
62076: ARRAY
62077: PUSH
62078: LD_VAR 0 3
62082: PLUS
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: EMPTY
62089: LIST
62090: ADD
62091: ST_TO_ADDR
62092: GO 62041
62094: POP
62095: POP
// result = temp_list2 ;
62096: LD_ADDR_VAR 0 7
62100: PUSH
62101: LD_VAR 0 10
62105: ST_TO_ADDR
// end ;
62106: LD_VAR 0 7
62110: RET
// export function EnemyInRange ( unit , dist ) ; begin
62111: LD_INT 0
62113: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62114: LD_ADDR_VAR 0 3
62118: PUSH
62119: LD_VAR 0 1
62123: PPUSH
62124: CALL_OW 255
62128: PPUSH
62129: LD_VAR 0 1
62133: PPUSH
62134: CALL_OW 250
62138: PPUSH
62139: LD_VAR 0 1
62143: PPUSH
62144: CALL_OW 251
62148: PPUSH
62149: LD_VAR 0 2
62153: PPUSH
62154: CALL 36215 0 4
62158: PUSH
62159: LD_INT 4
62161: ARRAY
62162: ST_TO_ADDR
// end ;
62163: LD_VAR 0 3
62167: RET
// export function PlayerSeeMe ( unit ) ; begin
62168: LD_INT 0
62170: PPUSH
// result := See ( your_side , unit ) ;
62171: LD_ADDR_VAR 0 2
62175: PUSH
62176: LD_OWVAR 2
62180: PPUSH
62181: LD_VAR 0 1
62185: PPUSH
62186: CALL_OW 292
62190: ST_TO_ADDR
// end ;
62191: LD_VAR 0 2
62195: RET
// export function ReverseDir ( unit ) ; begin
62196: LD_INT 0
62198: PPUSH
// if not unit then
62199: LD_VAR 0 1
62203: NOT
62204: IFFALSE 62208
// exit ;
62206: GO 62231
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62208: LD_ADDR_VAR 0 2
62212: PUSH
62213: LD_VAR 0 1
62217: PPUSH
62218: CALL_OW 254
62222: PUSH
62223: LD_INT 3
62225: PLUS
62226: PUSH
62227: LD_INT 6
62229: MOD
62230: ST_TO_ADDR
// end ;
62231: LD_VAR 0 2
62235: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62236: LD_INT 0
62238: PPUSH
62239: PPUSH
62240: PPUSH
62241: PPUSH
62242: PPUSH
// if not hexes then
62243: LD_VAR 0 2
62247: NOT
62248: IFFALSE 62252
// exit ;
62250: GO 62400
// dist := 9999 ;
62252: LD_ADDR_VAR 0 5
62256: PUSH
62257: LD_INT 9999
62259: ST_TO_ADDR
// for i = 1 to hexes do
62260: LD_ADDR_VAR 0 4
62264: PUSH
62265: DOUBLE
62266: LD_INT 1
62268: DEC
62269: ST_TO_ADDR
62270: LD_VAR 0 2
62274: PUSH
62275: FOR_TO
62276: IFFALSE 62388
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62278: LD_VAR 0 1
62282: PPUSH
62283: LD_VAR 0 2
62287: PUSH
62288: LD_VAR 0 4
62292: ARRAY
62293: PUSH
62294: LD_INT 1
62296: ARRAY
62297: PPUSH
62298: LD_VAR 0 2
62302: PUSH
62303: LD_VAR 0 4
62307: ARRAY
62308: PUSH
62309: LD_INT 2
62311: ARRAY
62312: PPUSH
62313: CALL_OW 297
62317: PUSH
62318: LD_VAR 0 5
62322: LESS
62323: IFFALSE 62386
// begin hex := hexes [ i ] ;
62325: LD_ADDR_VAR 0 7
62329: PUSH
62330: LD_VAR 0 2
62334: PUSH
62335: LD_VAR 0 4
62339: ARRAY
62340: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62341: LD_ADDR_VAR 0 5
62345: PUSH
62346: LD_VAR 0 1
62350: PPUSH
62351: LD_VAR 0 2
62355: PUSH
62356: LD_VAR 0 4
62360: ARRAY
62361: PUSH
62362: LD_INT 1
62364: ARRAY
62365: PPUSH
62366: LD_VAR 0 2
62370: PUSH
62371: LD_VAR 0 4
62375: ARRAY
62376: PUSH
62377: LD_INT 2
62379: ARRAY
62380: PPUSH
62381: CALL_OW 297
62385: ST_TO_ADDR
// end ; end ;
62386: GO 62275
62388: POP
62389: POP
// result := hex ;
62390: LD_ADDR_VAR 0 3
62394: PUSH
62395: LD_VAR 0 7
62399: ST_TO_ADDR
// end ;
62400: LD_VAR 0 3
62404: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62405: LD_INT 0
62407: PPUSH
62408: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62409: LD_VAR 0 1
62413: NOT
62414: PUSH
62415: LD_VAR 0 1
62419: PUSH
62420: LD_INT 21
62422: PUSH
62423: LD_INT 2
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 23
62432: PUSH
62433: LD_INT 2
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PPUSH
62444: CALL_OW 69
62448: IN
62449: NOT
62450: OR
62451: IFFALSE 62455
// exit ;
62453: GO 62502
// for i = 1 to 3 do
62455: LD_ADDR_VAR 0 3
62459: PUSH
62460: DOUBLE
62461: LD_INT 1
62463: DEC
62464: ST_TO_ADDR
62465: LD_INT 3
62467: PUSH
62468: FOR_TO
62469: IFFALSE 62500
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62471: LD_VAR 0 1
62475: PPUSH
62476: CALL_OW 250
62480: PPUSH
62481: LD_VAR 0 1
62485: PPUSH
62486: CALL_OW 251
62490: PPUSH
62491: LD_INT 1
62493: PPUSH
62494: CALL_OW 453
62498: GO 62468
62500: POP
62501: POP
// end ;
62502: LD_VAR 0 2
62506: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62507: LD_INT 0
62509: PPUSH
62510: PPUSH
62511: PPUSH
62512: PPUSH
62513: PPUSH
62514: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62515: LD_VAR 0 1
62519: NOT
62520: PUSH
62521: LD_VAR 0 2
62525: NOT
62526: OR
62527: PUSH
62528: LD_VAR 0 1
62532: PPUSH
62533: CALL_OW 314
62537: OR
62538: IFFALSE 62542
// exit ;
62540: GO 62983
// x := GetX ( enemy_unit ) ;
62542: LD_ADDR_VAR 0 7
62546: PUSH
62547: LD_VAR 0 2
62551: PPUSH
62552: CALL_OW 250
62556: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62557: LD_ADDR_VAR 0 8
62561: PUSH
62562: LD_VAR 0 2
62566: PPUSH
62567: CALL_OW 251
62571: ST_TO_ADDR
// if not x or not y then
62572: LD_VAR 0 7
62576: NOT
62577: PUSH
62578: LD_VAR 0 8
62582: NOT
62583: OR
62584: IFFALSE 62588
// exit ;
62586: GO 62983
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62588: LD_ADDR_VAR 0 6
62592: PUSH
62593: LD_VAR 0 7
62597: PPUSH
62598: LD_INT 0
62600: PPUSH
62601: LD_INT 4
62603: PPUSH
62604: CALL_OW 272
62608: PUSH
62609: LD_VAR 0 8
62613: PPUSH
62614: LD_INT 0
62616: PPUSH
62617: LD_INT 4
62619: PPUSH
62620: CALL_OW 273
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_VAR 0 7
62633: PPUSH
62634: LD_INT 1
62636: PPUSH
62637: LD_INT 4
62639: PPUSH
62640: CALL_OW 272
62644: PUSH
62645: LD_VAR 0 8
62649: PPUSH
62650: LD_INT 1
62652: PPUSH
62653: LD_INT 4
62655: PPUSH
62656: CALL_OW 273
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_VAR 0 7
62669: PPUSH
62670: LD_INT 2
62672: PPUSH
62673: LD_INT 4
62675: PPUSH
62676: CALL_OW 272
62680: PUSH
62681: LD_VAR 0 8
62685: PPUSH
62686: LD_INT 2
62688: PPUSH
62689: LD_INT 4
62691: PPUSH
62692: CALL_OW 273
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_VAR 0 7
62705: PPUSH
62706: LD_INT 3
62708: PPUSH
62709: LD_INT 4
62711: PPUSH
62712: CALL_OW 272
62716: PUSH
62717: LD_VAR 0 8
62721: PPUSH
62722: LD_INT 3
62724: PPUSH
62725: LD_INT 4
62727: PPUSH
62728: CALL_OW 273
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_VAR 0 7
62741: PPUSH
62742: LD_INT 4
62744: PPUSH
62745: LD_INT 4
62747: PPUSH
62748: CALL_OW 272
62752: PUSH
62753: LD_VAR 0 8
62757: PPUSH
62758: LD_INT 4
62760: PPUSH
62761: LD_INT 4
62763: PPUSH
62764: CALL_OW 273
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_VAR 0 7
62777: PPUSH
62778: LD_INT 5
62780: PPUSH
62781: LD_INT 4
62783: PPUSH
62784: CALL_OW 272
62788: PUSH
62789: LD_VAR 0 8
62793: PPUSH
62794: LD_INT 5
62796: PPUSH
62797: LD_INT 4
62799: PPUSH
62800: CALL_OW 273
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: ST_TO_ADDR
// for i = tmp downto 1 do
62817: LD_ADDR_VAR 0 4
62821: PUSH
62822: DOUBLE
62823: LD_VAR 0 6
62827: INC
62828: ST_TO_ADDR
62829: LD_INT 1
62831: PUSH
62832: FOR_DOWNTO
62833: IFFALSE 62934
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62835: LD_VAR 0 6
62839: PUSH
62840: LD_VAR 0 4
62844: ARRAY
62845: PUSH
62846: LD_INT 1
62848: ARRAY
62849: PPUSH
62850: LD_VAR 0 6
62854: PUSH
62855: LD_VAR 0 4
62859: ARRAY
62860: PUSH
62861: LD_INT 2
62863: ARRAY
62864: PPUSH
62865: CALL_OW 488
62869: NOT
62870: PUSH
62871: LD_VAR 0 6
62875: PUSH
62876: LD_VAR 0 4
62880: ARRAY
62881: PUSH
62882: LD_INT 1
62884: ARRAY
62885: PPUSH
62886: LD_VAR 0 6
62890: PUSH
62891: LD_VAR 0 4
62895: ARRAY
62896: PUSH
62897: LD_INT 2
62899: ARRAY
62900: PPUSH
62901: CALL_OW 428
62905: PUSH
62906: LD_INT 0
62908: NONEQUAL
62909: OR
62910: IFFALSE 62932
// tmp := Delete ( tmp , i ) ;
62912: LD_ADDR_VAR 0 6
62916: PUSH
62917: LD_VAR 0 6
62921: PPUSH
62922: LD_VAR 0 4
62926: PPUSH
62927: CALL_OW 3
62931: ST_TO_ADDR
62932: GO 62832
62934: POP
62935: POP
// j := GetClosestHex ( unit , tmp ) ;
62936: LD_ADDR_VAR 0 5
62940: PUSH
62941: LD_VAR 0 1
62945: PPUSH
62946: LD_VAR 0 6
62950: PPUSH
62951: CALL 62236 0 2
62955: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62956: LD_VAR 0 1
62960: PPUSH
62961: LD_VAR 0 5
62965: PUSH
62966: LD_INT 1
62968: ARRAY
62969: PPUSH
62970: LD_VAR 0 5
62974: PUSH
62975: LD_INT 2
62977: ARRAY
62978: PPUSH
62979: CALL_OW 111
// end ;
62983: LD_VAR 0 3
62987: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62988: LD_INT 0
62990: PPUSH
62991: PPUSH
62992: PPUSH
// uc_side = 0 ;
62993: LD_ADDR_OWVAR 20
62997: PUSH
62998: LD_INT 0
63000: ST_TO_ADDR
// uc_nation = 0 ;
63001: LD_ADDR_OWVAR 21
63005: PUSH
63006: LD_INT 0
63008: ST_TO_ADDR
// InitHc ;
63009: CALL_OW 19
// InitVc ;
63013: CALL_OW 20
// if mastodonts then
63017: LD_VAR 0 6
63021: IFFALSE 63088
// for i = 1 to mastodonts do
63023: LD_ADDR_VAR 0 11
63027: PUSH
63028: DOUBLE
63029: LD_INT 1
63031: DEC
63032: ST_TO_ADDR
63033: LD_VAR 0 6
63037: PUSH
63038: FOR_TO
63039: IFFALSE 63086
// begin vc_chassis := 31 ;
63041: LD_ADDR_OWVAR 37
63045: PUSH
63046: LD_INT 31
63048: ST_TO_ADDR
// vc_control := control_rider ;
63049: LD_ADDR_OWVAR 38
63053: PUSH
63054: LD_INT 4
63056: ST_TO_ADDR
// animal := CreateVehicle ;
63057: LD_ADDR_VAR 0 12
63061: PUSH
63062: CALL_OW 45
63066: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63067: LD_VAR 0 12
63071: PPUSH
63072: LD_VAR 0 8
63076: PPUSH
63077: LD_INT 0
63079: PPUSH
63080: CALL 65157 0 3
// end ;
63084: GO 63038
63086: POP
63087: POP
// if horses then
63088: LD_VAR 0 5
63092: IFFALSE 63159
// for i = 1 to horses do
63094: LD_ADDR_VAR 0 11
63098: PUSH
63099: DOUBLE
63100: LD_INT 1
63102: DEC
63103: ST_TO_ADDR
63104: LD_VAR 0 5
63108: PUSH
63109: FOR_TO
63110: IFFALSE 63157
// begin hc_class := 21 ;
63112: LD_ADDR_OWVAR 28
63116: PUSH
63117: LD_INT 21
63119: ST_TO_ADDR
// hc_gallery :=  ;
63120: LD_ADDR_OWVAR 33
63124: PUSH
63125: LD_STRING 
63127: ST_TO_ADDR
// animal := CreateHuman ;
63128: LD_ADDR_VAR 0 12
63132: PUSH
63133: CALL_OW 44
63137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63138: LD_VAR 0 12
63142: PPUSH
63143: LD_VAR 0 8
63147: PPUSH
63148: LD_INT 0
63150: PPUSH
63151: CALL 65157 0 3
// end ;
63155: GO 63109
63157: POP
63158: POP
// if birds then
63159: LD_VAR 0 1
63163: IFFALSE 63230
// for i = 1 to birds do
63165: LD_ADDR_VAR 0 11
63169: PUSH
63170: DOUBLE
63171: LD_INT 1
63173: DEC
63174: ST_TO_ADDR
63175: LD_VAR 0 1
63179: PUSH
63180: FOR_TO
63181: IFFALSE 63228
// begin hc_class = 18 ;
63183: LD_ADDR_OWVAR 28
63187: PUSH
63188: LD_INT 18
63190: ST_TO_ADDR
// hc_gallery =  ;
63191: LD_ADDR_OWVAR 33
63195: PUSH
63196: LD_STRING 
63198: ST_TO_ADDR
// animal := CreateHuman ;
63199: LD_ADDR_VAR 0 12
63203: PUSH
63204: CALL_OW 44
63208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63209: LD_VAR 0 12
63213: PPUSH
63214: LD_VAR 0 8
63218: PPUSH
63219: LD_INT 0
63221: PPUSH
63222: CALL 65157 0 3
// end ;
63226: GO 63180
63228: POP
63229: POP
// if tigers then
63230: LD_VAR 0 2
63234: IFFALSE 63318
// for i = 1 to tigers do
63236: LD_ADDR_VAR 0 11
63240: PUSH
63241: DOUBLE
63242: LD_INT 1
63244: DEC
63245: ST_TO_ADDR
63246: LD_VAR 0 2
63250: PUSH
63251: FOR_TO
63252: IFFALSE 63316
// begin hc_class = class_tiger ;
63254: LD_ADDR_OWVAR 28
63258: PUSH
63259: LD_INT 14
63261: ST_TO_ADDR
// hc_gallery =  ;
63262: LD_ADDR_OWVAR 33
63266: PUSH
63267: LD_STRING 
63269: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63270: LD_ADDR_OWVAR 35
63274: PUSH
63275: LD_INT 7
63277: NEG
63278: PPUSH
63279: LD_INT 7
63281: PPUSH
63282: CALL_OW 12
63286: ST_TO_ADDR
// animal := CreateHuman ;
63287: LD_ADDR_VAR 0 12
63291: PUSH
63292: CALL_OW 44
63296: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63297: LD_VAR 0 12
63301: PPUSH
63302: LD_VAR 0 8
63306: PPUSH
63307: LD_INT 0
63309: PPUSH
63310: CALL 65157 0 3
// end ;
63314: GO 63251
63316: POP
63317: POP
// if apemans then
63318: LD_VAR 0 3
63322: IFFALSE 63445
// for i = 1 to apemans do
63324: LD_ADDR_VAR 0 11
63328: PUSH
63329: DOUBLE
63330: LD_INT 1
63332: DEC
63333: ST_TO_ADDR
63334: LD_VAR 0 3
63338: PUSH
63339: FOR_TO
63340: IFFALSE 63443
// begin hc_class = class_apeman ;
63342: LD_ADDR_OWVAR 28
63346: PUSH
63347: LD_INT 12
63349: ST_TO_ADDR
// hc_gallery =  ;
63350: LD_ADDR_OWVAR 33
63354: PUSH
63355: LD_STRING 
63357: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
63358: LD_ADDR_OWVAR 35
63362: PUSH
63363: LD_INT 5
63365: NEG
63366: PPUSH
63367: LD_INT 5
63369: PPUSH
63370: CALL_OW 12
63374: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63375: LD_ADDR_OWVAR 31
63379: PUSH
63380: LD_INT 1
63382: PPUSH
63383: LD_INT 3
63385: PPUSH
63386: CALL_OW 12
63390: PUSH
63391: LD_INT 1
63393: PPUSH
63394: LD_INT 3
63396: PPUSH
63397: CALL_OW 12
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: ST_TO_ADDR
// animal := CreateHuman ;
63414: LD_ADDR_VAR 0 12
63418: PUSH
63419: CALL_OW 44
63423: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63424: LD_VAR 0 12
63428: PPUSH
63429: LD_VAR 0 8
63433: PPUSH
63434: LD_INT 0
63436: PPUSH
63437: CALL 65157 0 3
// end ;
63441: GO 63339
63443: POP
63444: POP
// if enchidnas then
63445: LD_VAR 0 4
63449: IFFALSE 63516
// for i = 1 to enchidnas do
63451: LD_ADDR_VAR 0 11
63455: PUSH
63456: DOUBLE
63457: LD_INT 1
63459: DEC
63460: ST_TO_ADDR
63461: LD_VAR 0 4
63465: PUSH
63466: FOR_TO
63467: IFFALSE 63514
// begin hc_class = 13 ;
63469: LD_ADDR_OWVAR 28
63473: PUSH
63474: LD_INT 13
63476: ST_TO_ADDR
// hc_gallery =  ;
63477: LD_ADDR_OWVAR 33
63481: PUSH
63482: LD_STRING 
63484: ST_TO_ADDR
// animal := CreateHuman ;
63485: LD_ADDR_VAR 0 12
63489: PUSH
63490: CALL_OW 44
63494: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63495: LD_VAR 0 12
63499: PPUSH
63500: LD_VAR 0 8
63504: PPUSH
63505: LD_INT 0
63507: PPUSH
63508: CALL 65157 0 3
// end ;
63512: GO 63466
63514: POP
63515: POP
// if fishes then
63516: LD_VAR 0 7
63520: IFFALSE 63587
// for i = 1 to fishes do
63522: LD_ADDR_VAR 0 11
63526: PUSH
63527: DOUBLE
63528: LD_INT 1
63530: DEC
63531: ST_TO_ADDR
63532: LD_VAR 0 7
63536: PUSH
63537: FOR_TO
63538: IFFALSE 63585
// begin hc_class = 20 ;
63540: LD_ADDR_OWVAR 28
63544: PUSH
63545: LD_INT 20
63547: ST_TO_ADDR
// hc_gallery =  ;
63548: LD_ADDR_OWVAR 33
63552: PUSH
63553: LD_STRING 
63555: ST_TO_ADDR
// animal := CreateHuman ;
63556: LD_ADDR_VAR 0 12
63560: PUSH
63561: CALL_OW 44
63565: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63566: LD_VAR 0 12
63570: PPUSH
63571: LD_VAR 0 9
63575: PPUSH
63576: LD_INT 0
63578: PPUSH
63579: CALL 65157 0 3
// end ;
63583: GO 63537
63585: POP
63586: POP
// end ;
63587: LD_VAR 0 10
63591: RET
// export function WantHeal ( sci , unit ) ; begin
63592: LD_INT 0
63594: PPUSH
// if GetTaskList ( sci ) > 0 then
63595: LD_VAR 0 1
63599: PPUSH
63600: CALL_OW 437
63604: PUSH
63605: LD_INT 0
63607: GREATER
63608: IFFALSE 63678
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63610: LD_VAR 0 1
63614: PPUSH
63615: CALL_OW 437
63619: PUSH
63620: LD_INT 1
63622: ARRAY
63623: PUSH
63624: LD_INT 1
63626: ARRAY
63627: PUSH
63628: LD_STRING l
63630: EQUAL
63631: PUSH
63632: LD_VAR 0 1
63636: PPUSH
63637: CALL_OW 437
63641: PUSH
63642: LD_INT 1
63644: ARRAY
63645: PUSH
63646: LD_INT 4
63648: ARRAY
63649: PUSH
63650: LD_VAR 0 2
63654: EQUAL
63655: AND
63656: IFFALSE 63668
// result := true else
63658: LD_ADDR_VAR 0 3
63662: PUSH
63663: LD_INT 1
63665: ST_TO_ADDR
63666: GO 63676
// result := false ;
63668: LD_ADDR_VAR 0 3
63672: PUSH
63673: LD_INT 0
63675: ST_TO_ADDR
// end else
63676: GO 63686
// result := false ;
63678: LD_ADDR_VAR 0 3
63682: PUSH
63683: LD_INT 0
63685: ST_TO_ADDR
// end ;
63686: LD_VAR 0 3
63690: RET
// export function HealTarget ( sci ) ; begin
63691: LD_INT 0
63693: PPUSH
// if not sci then
63694: LD_VAR 0 1
63698: NOT
63699: IFFALSE 63703
// exit ;
63701: GO 63768
// result := 0 ;
63703: LD_ADDR_VAR 0 2
63707: PUSH
63708: LD_INT 0
63710: ST_TO_ADDR
// if GetTaskList ( sci ) then
63711: LD_VAR 0 1
63715: PPUSH
63716: CALL_OW 437
63720: IFFALSE 63768
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63722: LD_VAR 0 1
63726: PPUSH
63727: CALL_OW 437
63731: PUSH
63732: LD_INT 1
63734: ARRAY
63735: PUSH
63736: LD_INT 1
63738: ARRAY
63739: PUSH
63740: LD_STRING l
63742: EQUAL
63743: IFFALSE 63768
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63745: LD_ADDR_VAR 0 2
63749: PUSH
63750: LD_VAR 0 1
63754: PPUSH
63755: CALL_OW 437
63759: PUSH
63760: LD_INT 1
63762: ARRAY
63763: PUSH
63764: LD_INT 4
63766: ARRAY
63767: ST_TO_ADDR
// end ;
63768: LD_VAR 0 2
63772: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63773: LD_INT 0
63775: PPUSH
63776: PPUSH
63777: PPUSH
63778: PPUSH
// if not base_units then
63779: LD_VAR 0 1
63783: NOT
63784: IFFALSE 63788
// exit ;
63786: GO 63875
// result := false ;
63788: LD_ADDR_VAR 0 2
63792: PUSH
63793: LD_INT 0
63795: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63796: LD_ADDR_VAR 0 5
63800: PUSH
63801: LD_VAR 0 1
63805: PPUSH
63806: LD_INT 21
63808: PUSH
63809: LD_INT 3
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PPUSH
63816: CALL_OW 72
63820: ST_TO_ADDR
// if not tmp then
63821: LD_VAR 0 5
63825: NOT
63826: IFFALSE 63830
// exit ;
63828: GO 63875
// for i in tmp do
63830: LD_ADDR_VAR 0 3
63834: PUSH
63835: LD_VAR 0 5
63839: PUSH
63840: FOR_IN
63841: IFFALSE 63873
// begin result := EnemyInRange ( i , 22 ) ;
63843: LD_ADDR_VAR 0 2
63847: PUSH
63848: LD_VAR 0 3
63852: PPUSH
63853: LD_INT 22
63855: PPUSH
63856: CALL 62111 0 2
63860: ST_TO_ADDR
// if result then
63861: LD_VAR 0 2
63865: IFFALSE 63871
// exit ;
63867: POP
63868: POP
63869: GO 63875
// end ;
63871: GO 63840
63873: POP
63874: POP
// end ;
63875: LD_VAR 0 2
63879: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63880: LD_INT 0
63882: PPUSH
63883: PPUSH
// if not units then
63884: LD_VAR 0 1
63888: NOT
63889: IFFALSE 63893
// exit ;
63891: GO 63963
// result := [ ] ;
63893: LD_ADDR_VAR 0 3
63897: PUSH
63898: EMPTY
63899: ST_TO_ADDR
// for i in units do
63900: LD_ADDR_VAR 0 4
63904: PUSH
63905: LD_VAR 0 1
63909: PUSH
63910: FOR_IN
63911: IFFALSE 63961
// if GetTag ( i ) = tag then
63913: LD_VAR 0 4
63917: PPUSH
63918: CALL_OW 110
63922: PUSH
63923: LD_VAR 0 2
63927: EQUAL
63928: IFFALSE 63959
// result := Insert ( result , result + 1 , i ) ;
63930: LD_ADDR_VAR 0 3
63934: PUSH
63935: LD_VAR 0 3
63939: PPUSH
63940: LD_VAR 0 3
63944: PUSH
63945: LD_INT 1
63947: PLUS
63948: PPUSH
63949: LD_VAR 0 4
63953: PPUSH
63954: CALL_OW 2
63958: ST_TO_ADDR
63959: GO 63910
63961: POP
63962: POP
// end ;
63963: LD_VAR 0 3
63967: RET
// export function IsDriver ( un ) ; begin
63968: LD_INT 0
63970: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63971: LD_ADDR_VAR 0 2
63975: PUSH
63976: LD_VAR 0 1
63980: PUSH
63981: LD_INT 55
63983: PUSH
63984: EMPTY
63985: LIST
63986: PPUSH
63987: CALL_OW 69
63991: IN
63992: ST_TO_ADDR
// end ;
63993: LD_VAR 0 2
63997: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63998: LD_INT 0
64000: PPUSH
64001: PPUSH
// list := [ ] ;
64002: LD_ADDR_VAR 0 5
64006: PUSH
64007: EMPTY
64008: ST_TO_ADDR
// case d of 0 :
64009: LD_VAR 0 3
64013: PUSH
64014: LD_INT 0
64016: DOUBLE
64017: EQUAL
64018: IFTRUE 64022
64020: GO 64155
64022: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64023: LD_ADDR_VAR 0 5
64027: PUSH
64028: LD_VAR 0 1
64032: PUSH
64033: LD_INT 4
64035: MINUS
64036: PUSH
64037: LD_VAR 0 2
64041: PUSH
64042: LD_INT 4
64044: MINUS
64045: PUSH
64046: LD_INT 2
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: LIST
64053: PUSH
64054: LD_VAR 0 1
64058: PUSH
64059: LD_INT 3
64061: MINUS
64062: PUSH
64063: LD_VAR 0 2
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: LIST
64075: PUSH
64076: LD_VAR 0 1
64080: PUSH
64081: LD_INT 4
64083: PLUS
64084: PUSH
64085: LD_VAR 0 2
64089: PUSH
64090: LD_INT 4
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: LIST
64097: PUSH
64098: LD_VAR 0 1
64102: PUSH
64103: LD_INT 3
64105: PLUS
64106: PUSH
64107: LD_VAR 0 2
64111: PUSH
64112: LD_INT 3
64114: PLUS
64115: PUSH
64116: LD_INT 5
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: LIST
64123: PUSH
64124: LD_VAR 0 1
64128: PUSH
64129: LD_VAR 0 2
64133: PUSH
64134: LD_INT 4
64136: PLUS
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: LIST
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: ST_TO_ADDR
// end ; 1 :
64153: GO 64853
64155: LD_INT 1
64157: DOUBLE
64158: EQUAL
64159: IFTRUE 64163
64161: GO 64296
64163: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64164: LD_ADDR_VAR 0 5
64168: PUSH
64169: LD_VAR 0 1
64173: PUSH
64174: LD_VAR 0 2
64178: PUSH
64179: LD_INT 4
64181: MINUS
64182: PUSH
64183: LD_INT 3
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: LIST
64190: PUSH
64191: LD_VAR 0 1
64195: PUSH
64196: LD_INT 3
64198: MINUS
64199: PUSH
64200: LD_VAR 0 2
64204: PUSH
64205: LD_INT 3
64207: MINUS
64208: PUSH
64209: LD_INT 2
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: PUSH
64217: LD_VAR 0 1
64221: PUSH
64222: LD_INT 4
64224: MINUS
64225: PUSH
64226: LD_VAR 0 2
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: LIST
64238: PUSH
64239: LD_VAR 0 1
64243: PUSH
64244: LD_VAR 0 2
64248: PUSH
64249: LD_INT 3
64251: PLUS
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: LIST
64260: PUSH
64261: LD_VAR 0 1
64265: PUSH
64266: LD_INT 4
64268: PLUS
64269: PUSH
64270: LD_VAR 0 2
64274: PUSH
64275: LD_INT 4
64277: PLUS
64278: PUSH
64279: LD_INT 5
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: LIST
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: ST_TO_ADDR
// end ; 2 :
64294: GO 64853
64296: LD_INT 2
64298: DOUBLE
64299: EQUAL
64300: IFTRUE 64304
64302: GO 64433
64304: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64305: LD_ADDR_VAR 0 5
64309: PUSH
64310: LD_VAR 0 1
64314: PUSH
64315: LD_VAR 0 2
64319: PUSH
64320: LD_INT 3
64322: MINUS
64323: PUSH
64324: LD_INT 3
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: LIST
64331: PUSH
64332: LD_VAR 0 1
64336: PUSH
64337: LD_INT 4
64339: PLUS
64340: PUSH
64341: LD_VAR 0 2
64345: PUSH
64346: LD_INT 4
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: LIST
64353: PUSH
64354: LD_VAR 0 1
64358: PUSH
64359: LD_VAR 0 2
64363: PUSH
64364: LD_INT 4
64366: PLUS
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: LIST
64375: PUSH
64376: LD_VAR 0 1
64380: PUSH
64381: LD_INT 3
64383: MINUS
64384: PUSH
64385: LD_VAR 0 2
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: LIST
64397: PUSH
64398: LD_VAR 0 1
64402: PUSH
64403: LD_INT 4
64405: MINUS
64406: PUSH
64407: LD_VAR 0 2
64411: PUSH
64412: LD_INT 4
64414: MINUS
64415: PUSH
64416: LD_INT 2
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: LIST
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: ST_TO_ADDR
// end ; 3 :
64431: GO 64853
64433: LD_INT 3
64435: DOUBLE
64436: EQUAL
64437: IFTRUE 64441
64439: GO 64574
64441: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64442: LD_ADDR_VAR 0 5
64446: PUSH
64447: LD_VAR 0 1
64451: PUSH
64452: LD_INT 3
64454: PLUS
64455: PUSH
64456: LD_VAR 0 2
64460: PUSH
64461: LD_INT 4
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: LIST
64468: PUSH
64469: LD_VAR 0 1
64473: PUSH
64474: LD_INT 4
64476: PLUS
64477: PUSH
64478: LD_VAR 0 2
64482: PUSH
64483: LD_INT 4
64485: PLUS
64486: PUSH
64487: LD_INT 5
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: LIST
64494: PUSH
64495: LD_VAR 0 1
64499: PUSH
64500: LD_INT 4
64502: MINUS
64503: PUSH
64504: LD_VAR 0 2
64508: PUSH
64509: LD_INT 1
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: PUSH
64517: LD_VAR 0 1
64521: PUSH
64522: LD_VAR 0 2
64526: PUSH
64527: LD_INT 4
64529: MINUS
64530: PUSH
64531: LD_INT 3
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: LIST
64538: PUSH
64539: LD_VAR 0 1
64543: PUSH
64544: LD_INT 3
64546: MINUS
64547: PUSH
64548: LD_VAR 0 2
64552: PUSH
64553: LD_INT 3
64555: MINUS
64556: PUSH
64557: LD_INT 2
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: ST_TO_ADDR
// end ; 4 :
64572: GO 64853
64574: LD_INT 4
64576: DOUBLE
64577: EQUAL
64578: IFTRUE 64582
64580: GO 64715
64582: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64583: LD_ADDR_VAR 0 5
64587: PUSH
64588: LD_VAR 0 1
64592: PUSH
64593: LD_VAR 0 2
64597: PUSH
64598: LD_INT 4
64600: PLUS
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: LIST
64609: PUSH
64610: LD_VAR 0 1
64614: PUSH
64615: LD_INT 3
64617: PLUS
64618: PUSH
64619: LD_VAR 0 2
64623: PUSH
64624: LD_INT 3
64626: PLUS
64627: PUSH
64628: LD_INT 5
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: LIST
64635: PUSH
64636: LD_VAR 0 1
64640: PUSH
64641: LD_INT 4
64643: PLUS
64644: PUSH
64645: LD_VAR 0 2
64649: PUSH
64650: LD_INT 4
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: LIST
64657: PUSH
64658: LD_VAR 0 1
64662: PUSH
64663: LD_VAR 0 2
64667: PUSH
64668: LD_INT 3
64670: MINUS
64671: PUSH
64672: LD_INT 3
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: LIST
64679: PUSH
64680: LD_VAR 0 1
64684: PUSH
64685: LD_INT 4
64687: MINUS
64688: PUSH
64689: LD_VAR 0 2
64693: PUSH
64694: LD_INT 4
64696: MINUS
64697: PUSH
64698: LD_INT 2
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: LIST
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: ST_TO_ADDR
// end ; 5 :
64713: GO 64853
64715: LD_INT 5
64717: DOUBLE
64718: EQUAL
64719: IFTRUE 64723
64721: GO 64852
64723: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64724: LD_ADDR_VAR 0 5
64728: PUSH
64729: LD_VAR 0 1
64733: PUSH
64734: LD_INT 4
64736: MINUS
64737: PUSH
64738: LD_VAR 0 2
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: LIST
64750: PUSH
64751: LD_VAR 0 1
64755: PUSH
64756: LD_VAR 0 2
64760: PUSH
64761: LD_INT 4
64763: MINUS
64764: PUSH
64765: LD_INT 3
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: LIST
64772: PUSH
64773: LD_VAR 0 1
64777: PUSH
64778: LD_INT 4
64780: PLUS
64781: PUSH
64782: LD_VAR 0 2
64786: PUSH
64787: LD_INT 4
64789: PLUS
64790: PUSH
64791: LD_INT 5
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: PUSH
64799: LD_VAR 0 1
64803: PUSH
64804: LD_INT 3
64806: PLUS
64807: PUSH
64808: LD_VAR 0 2
64812: PUSH
64813: LD_INT 4
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: LIST
64820: PUSH
64821: LD_VAR 0 1
64825: PUSH
64826: LD_VAR 0 2
64830: PUSH
64831: LD_INT 3
64833: PLUS
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: LIST
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: ST_TO_ADDR
// end ; end ;
64850: GO 64853
64852: POP
// result := list ;
64853: LD_ADDR_VAR 0 4
64857: PUSH
64858: LD_VAR 0 5
64862: ST_TO_ADDR
// end ;
64863: LD_VAR 0 4
64867: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64868: LD_INT 0
64870: PPUSH
64871: PPUSH
64872: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64873: LD_VAR 0 1
64877: NOT
64878: PUSH
64879: LD_VAR 0 2
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: LD_INT 4
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: IN
64902: NOT
64903: OR
64904: IFFALSE 64908
// exit ;
64906: GO 65000
// tmp := [ ] ;
64908: LD_ADDR_VAR 0 5
64912: PUSH
64913: EMPTY
64914: ST_TO_ADDR
// for i in units do
64915: LD_ADDR_VAR 0 4
64919: PUSH
64920: LD_VAR 0 1
64924: PUSH
64925: FOR_IN
64926: IFFALSE 64969
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64928: LD_ADDR_VAR 0 5
64932: PUSH
64933: LD_VAR 0 5
64937: PPUSH
64938: LD_VAR 0 5
64942: PUSH
64943: LD_INT 1
64945: PLUS
64946: PPUSH
64947: LD_VAR 0 4
64951: PPUSH
64952: LD_VAR 0 2
64956: PPUSH
64957: CALL_OW 259
64961: PPUSH
64962: CALL_OW 2
64966: ST_TO_ADDR
64967: GO 64925
64969: POP
64970: POP
// if not tmp then
64971: LD_VAR 0 5
64975: NOT
64976: IFFALSE 64980
// exit ;
64978: GO 65000
// result := SortListByListDesc ( units , tmp ) ;
64980: LD_ADDR_VAR 0 3
64984: PUSH
64985: LD_VAR 0 1
64989: PPUSH
64990: LD_VAR 0 5
64994: PPUSH
64995: CALL_OW 77
64999: ST_TO_ADDR
// end ;
65000: LD_VAR 0 3
65004: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65005: LD_INT 0
65007: PPUSH
65008: PPUSH
65009: PPUSH
// x := GetX ( building ) ;
65010: LD_ADDR_VAR 0 4
65014: PUSH
65015: LD_VAR 0 2
65019: PPUSH
65020: CALL_OW 250
65024: ST_TO_ADDR
// y := GetY ( building ) ;
65025: LD_ADDR_VAR 0 5
65029: PUSH
65030: LD_VAR 0 2
65034: PPUSH
65035: CALL_OW 251
65039: ST_TO_ADDR
// if GetTaskList ( unit ) then
65040: LD_VAR 0 1
65044: PPUSH
65045: CALL_OW 437
65049: IFFALSE 65144
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65051: LD_STRING e
65053: PUSH
65054: LD_VAR 0 1
65058: PPUSH
65059: CALL_OW 437
65063: PUSH
65064: LD_INT 1
65066: ARRAY
65067: PUSH
65068: LD_INT 1
65070: ARRAY
65071: EQUAL
65072: PUSH
65073: LD_VAR 0 4
65077: PUSH
65078: LD_VAR 0 1
65082: PPUSH
65083: CALL_OW 437
65087: PUSH
65088: LD_INT 1
65090: ARRAY
65091: PUSH
65092: LD_INT 2
65094: ARRAY
65095: EQUAL
65096: AND
65097: PUSH
65098: LD_VAR 0 5
65102: PUSH
65103: LD_VAR 0 1
65107: PPUSH
65108: CALL_OW 437
65112: PUSH
65113: LD_INT 1
65115: ARRAY
65116: PUSH
65117: LD_INT 3
65119: ARRAY
65120: EQUAL
65121: AND
65122: IFFALSE 65134
// result := true else
65124: LD_ADDR_VAR 0 3
65128: PUSH
65129: LD_INT 1
65131: ST_TO_ADDR
65132: GO 65142
// result := false ;
65134: LD_ADDR_VAR 0 3
65138: PUSH
65139: LD_INT 0
65141: ST_TO_ADDR
// end else
65142: GO 65152
// result := false ;
65144: LD_ADDR_VAR 0 3
65148: PUSH
65149: LD_INT 0
65151: ST_TO_ADDR
// end ;
65152: LD_VAR 0 3
65156: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65157: LD_INT 0
65159: PPUSH
65160: PPUSH
65161: PPUSH
65162: PPUSH
// if not unit or not area then
65163: LD_VAR 0 1
65167: NOT
65168: PUSH
65169: LD_VAR 0 2
65173: NOT
65174: OR
65175: IFFALSE 65179
// exit ;
65177: GO 65343
// tmp := AreaToList ( area , i ) ;
65179: LD_ADDR_VAR 0 6
65183: PUSH
65184: LD_VAR 0 2
65188: PPUSH
65189: LD_VAR 0 5
65193: PPUSH
65194: CALL_OW 517
65198: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65199: LD_ADDR_VAR 0 5
65203: PUSH
65204: DOUBLE
65205: LD_INT 1
65207: DEC
65208: ST_TO_ADDR
65209: LD_VAR 0 6
65213: PUSH
65214: LD_INT 1
65216: ARRAY
65217: PUSH
65218: FOR_TO
65219: IFFALSE 65341
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65221: LD_ADDR_VAR 0 7
65225: PUSH
65226: LD_VAR 0 6
65230: PUSH
65231: LD_INT 1
65233: ARRAY
65234: PUSH
65235: LD_VAR 0 5
65239: ARRAY
65240: PUSH
65241: LD_VAR 0 6
65245: PUSH
65246: LD_INT 2
65248: ARRAY
65249: PUSH
65250: LD_VAR 0 5
65254: ARRAY
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65260: LD_VAR 0 7
65264: PUSH
65265: LD_INT 1
65267: ARRAY
65268: PPUSH
65269: LD_VAR 0 7
65273: PUSH
65274: LD_INT 2
65276: ARRAY
65277: PPUSH
65278: CALL_OW 428
65282: PUSH
65283: LD_INT 0
65285: EQUAL
65286: IFFALSE 65339
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65288: LD_VAR 0 1
65292: PPUSH
65293: LD_VAR 0 7
65297: PUSH
65298: LD_INT 1
65300: ARRAY
65301: PPUSH
65302: LD_VAR 0 7
65306: PUSH
65307: LD_INT 2
65309: ARRAY
65310: PPUSH
65311: LD_VAR 0 3
65315: PPUSH
65316: CALL_OW 48
// result := IsPlaced ( unit ) ;
65320: LD_ADDR_VAR 0 4
65324: PUSH
65325: LD_VAR 0 1
65329: PPUSH
65330: CALL_OW 305
65334: ST_TO_ADDR
// exit ;
65335: POP
65336: POP
65337: GO 65343
// end ; end ;
65339: GO 65218
65341: POP
65342: POP
// end ;
65343: LD_VAR 0 4
65347: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65348: LD_INT 0
65350: PPUSH
65351: PPUSH
65352: PPUSH
// if not side or side > 8 then
65353: LD_VAR 0 1
65357: NOT
65358: PUSH
65359: LD_VAR 0 1
65363: PUSH
65364: LD_INT 8
65366: GREATER
65367: OR
65368: IFFALSE 65372
// exit ;
65370: GO 65559
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65372: LD_ADDR_VAR 0 4
65376: PUSH
65377: LD_INT 22
65379: PUSH
65380: LD_VAR 0 1
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 21
65391: PUSH
65392: LD_INT 3
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PPUSH
65403: CALL_OW 69
65407: ST_TO_ADDR
// if not tmp then
65408: LD_VAR 0 4
65412: NOT
65413: IFFALSE 65417
// exit ;
65415: GO 65559
// enable_addtolog := true ;
65417: LD_ADDR_OWVAR 81
65421: PUSH
65422: LD_INT 1
65424: ST_TO_ADDR
// AddToLog ( [ ) ;
65425: LD_STRING [
65427: PPUSH
65428: CALL_OW 561
// for i in tmp do
65432: LD_ADDR_VAR 0 3
65436: PUSH
65437: LD_VAR 0 4
65441: PUSH
65442: FOR_IN
65443: IFFALSE 65550
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65445: LD_STRING [
65447: PUSH
65448: LD_VAR 0 3
65452: PPUSH
65453: CALL_OW 266
65457: STR
65458: PUSH
65459: LD_STRING , 
65461: STR
65462: PUSH
65463: LD_VAR 0 3
65467: PPUSH
65468: CALL_OW 250
65472: STR
65473: PUSH
65474: LD_STRING , 
65476: STR
65477: PUSH
65478: LD_VAR 0 3
65482: PPUSH
65483: CALL_OW 251
65487: STR
65488: PUSH
65489: LD_STRING , 
65491: STR
65492: PUSH
65493: LD_VAR 0 3
65497: PPUSH
65498: CALL_OW 254
65502: STR
65503: PUSH
65504: LD_STRING , 
65506: STR
65507: PUSH
65508: LD_VAR 0 3
65512: PPUSH
65513: LD_INT 1
65515: PPUSH
65516: CALL_OW 268
65520: STR
65521: PUSH
65522: LD_STRING , 
65524: STR
65525: PUSH
65526: LD_VAR 0 3
65530: PPUSH
65531: LD_INT 2
65533: PPUSH
65534: CALL_OW 268
65538: STR
65539: PUSH
65540: LD_STRING ],
65542: STR
65543: PPUSH
65544: CALL_OW 561
// end ;
65548: GO 65442
65550: POP
65551: POP
// AddToLog ( ]; ) ;
65552: LD_STRING ];
65554: PPUSH
65555: CALL_OW 561
// end ;
65559: LD_VAR 0 2
65563: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65564: LD_INT 0
65566: PPUSH
65567: PPUSH
65568: PPUSH
65569: PPUSH
65570: PPUSH
// if not area or not rate or not max then
65571: LD_VAR 0 1
65575: NOT
65576: PUSH
65577: LD_VAR 0 2
65581: NOT
65582: OR
65583: PUSH
65584: LD_VAR 0 4
65588: NOT
65589: OR
65590: IFFALSE 65594
// exit ;
65592: GO 65786
// while 1 do
65594: LD_INT 1
65596: IFFALSE 65786
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65598: LD_ADDR_VAR 0 9
65602: PUSH
65603: LD_VAR 0 1
65607: PPUSH
65608: LD_INT 1
65610: PPUSH
65611: CALL_OW 287
65615: PUSH
65616: LD_INT 10
65618: MUL
65619: ST_TO_ADDR
// r := rate / 10 ;
65620: LD_ADDR_VAR 0 7
65624: PUSH
65625: LD_VAR 0 2
65629: PUSH
65630: LD_INT 10
65632: DIVREAL
65633: ST_TO_ADDR
// time := 1 1$00 ;
65634: LD_ADDR_VAR 0 8
65638: PUSH
65639: LD_INT 2100
65641: ST_TO_ADDR
// if amount < min then
65642: LD_VAR 0 9
65646: PUSH
65647: LD_VAR 0 3
65651: LESS
65652: IFFALSE 65670
// r := r * 2 else
65654: LD_ADDR_VAR 0 7
65658: PUSH
65659: LD_VAR 0 7
65663: PUSH
65664: LD_INT 2
65666: MUL
65667: ST_TO_ADDR
65668: GO 65696
// if amount > max then
65670: LD_VAR 0 9
65674: PUSH
65675: LD_VAR 0 4
65679: GREATER
65680: IFFALSE 65696
// r := r / 2 ;
65682: LD_ADDR_VAR 0 7
65686: PUSH
65687: LD_VAR 0 7
65691: PUSH
65692: LD_INT 2
65694: DIVREAL
65695: ST_TO_ADDR
// time := time / r ;
65696: LD_ADDR_VAR 0 8
65700: PUSH
65701: LD_VAR 0 8
65705: PUSH
65706: LD_VAR 0 7
65710: DIVREAL
65711: ST_TO_ADDR
// if time < 0 then
65712: LD_VAR 0 8
65716: PUSH
65717: LD_INT 0
65719: LESS
65720: IFFALSE 65737
// time := time * - 1 ;
65722: LD_ADDR_VAR 0 8
65726: PUSH
65727: LD_VAR 0 8
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: MUL
65736: ST_TO_ADDR
// wait ( time ) ;
65737: LD_VAR 0 8
65741: PPUSH
65742: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65746: LD_INT 35
65748: PPUSH
65749: LD_INT 875
65751: PPUSH
65752: CALL_OW 12
65756: PPUSH
65757: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65761: LD_INT 1
65763: PPUSH
65764: LD_INT 5
65766: PPUSH
65767: CALL_OW 12
65771: PPUSH
65772: LD_VAR 0 1
65776: PPUSH
65777: LD_INT 1
65779: PPUSH
65780: CALL_OW 55
// end ;
65784: GO 65594
// end ;
65786: LD_VAR 0 5
65790: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65791: LD_INT 0
65793: PPUSH
65794: PPUSH
65795: PPUSH
65796: PPUSH
65797: PPUSH
65798: PPUSH
65799: PPUSH
65800: PPUSH
// if not turrets or not factories then
65801: LD_VAR 0 1
65805: NOT
65806: PUSH
65807: LD_VAR 0 2
65811: NOT
65812: OR
65813: IFFALSE 65817
// exit ;
65815: GO 66124
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65817: LD_ADDR_VAR 0 10
65821: PUSH
65822: LD_INT 5
65824: PUSH
65825: LD_INT 6
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 2
65834: PUSH
65835: LD_INT 4
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 3
65844: PUSH
65845: LD_INT 5
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 24
65859: PUSH
65860: LD_INT 25
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 23
65869: PUSH
65870: LD_INT 27
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 42
65883: PUSH
65884: LD_INT 43
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 44
65893: PUSH
65894: LD_INT 46
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 45
65903: PUSH
65904: LD_INT 47
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: LIST
65920: ST_TO_ADDR
// result := [ ] ;
65921: LD_ADDR_VAR 0 3
65925: PUSH
65926: EMPTY
65927: ST_TO_ADDR
// for i in turrets do
65928: LD_ADDR_VAR 0 4
65932: PUSH
65933: LD_VAR 0 1
65937: PUSH
65938: FOR_IN
65939: IFFALSE 66122
// begin nat := GetNation ( i ) ;
65941: LD_ADDR_VAR 0 7
65945: PUSH
65946: LD_VAR 0 4
65950: PPUSH
65951: CALL_OW 248
65955: ST_TO_ADDR
// weapon := 0 ;
65956: LD_ADDR_VAR 0 8
65960: PUSH
65961: LD_INT 0
65963: ST_TO_ADDR
// if not nat then
65964: LD_VAR 0 7
65968: NOT
65969: IFFALSE 65973
// continue ;
65971: GO 65938
// for j in list [ nat ] do
65973: LD_ADDR_VAR 0 5
65977: PUSH
65978: LD_VAR 0 10
65982: PUSH
65983: LD_VAR 0 7
65987: ARRAY
65988: PUSH
65989: FOR_IN
65990: IFFALSE 66031
// if GetBWeapon ( i ) = j [ 1 ] then
65992: LD_VAR 0 4
65996: PPUSH
65997: CALL_OW 269
66001: PUSH
66002: LD_VAR 0 5
66006: PUSH
66007: LD_INT 1
66009: ARRAY
66010: EQUAL
66011: IFFALSE 66029
// begin weapon := j [ 2 ] ;
66013: LD_ADDR_VAR 0 8
66017: PUSH
66018: LD_VAR 0 5
66022: PUSH
66023: LD_INT 2
66025: ARRAY
66026: ST_TO_ADDR
// break ;
66027: GO 66031
// end ;
66029: GO 65989
66031: POP
66032: POP
// if not weapon then
66033: LD_VAR 0 8
66037: NOT
66038: IFFALSE 66042
// continue ;
66040: GO 65938
// for k in factories do
66042: LD_ADDR_VAR 0 6
66046: PUSH
66047: LD_VAR 0 2
66051: PUSH
66052: FOR_IN
66053: IFFALSE 66118
// begin weapons := AvailableWeaponList ( k ) ;
66055: LD_ADDR_VAR 0 9
66059: PUSH
66060: LD_VAR 0 6
66064: PPUSH
66065: CALL_OW 478
66069: ST_TO_ADDR
// if not weapons then
66070: LD_VAR 0 9
66074: NOT
66075: IFFALSE 66079
// continue ;
66077: GO 66052
// if weapon in weapons then
66079: LD_VAR 0 8
66083: PUSH
66084: LD_VAR 0 9
66088: IN
66089: IFFALSE 66116
// begin result := [ i , weapon ] ;
66091: LD_ADDR_VAR 0 3
66095: PUSH
66096: LD_VAR 0 4
66100: PUSH
66101: LD_VAR 0 8
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: ST_TO_ADDR
// exit ;
66110: POP
66111: POP
66112: POP
66113: POP
66114: GO 66124
// end ; end ;
66116: GO 66052
66118: POP
66119: POP
// end ;
66120: GO 65938
66122: POP
66123: POP
// end ;
66124: LD_VAR 0 3
66128: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66129: LD_INT 0
66131: PPUSH
// if not side or side > 8 then
66132: LD_VAR 0 3
66136: NOT
66137: PUSH
66138: LD_VAR 0 3
66142: PUSH
66143: LD_INT 8
66145: GREATER
66146: OR
66147: IFFALSE 66151
// exit ;
66149: GO 66210
// if not range then
66151: LD_VAR 0 4
66155: NOT
66156: IFFALSE 66167
// range := - 12 ;
66158: LD_ADDR_VAR 0 4
66162: PUSH
66163: LD_INT 12
66165: NEG
66166: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66167: LD_VAR 0 1
66171: PPUSH
66172: LD_VAR 0 2
66176: PPUSH
66177: LD_VAR 0 3
66181: PPUSH
66182: LD_VAR 0 4
66186: PPUSH
66187: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66191: LD_VAR 0 1
66195: PPUSH
66196: LD_VAR 0 2
66200: PPUSH
66201: LD_VAR 0 3
66205: PPUSH
66206: CALL_OW 331
// end ;
66210: LD_VAR 0 5
66214: RET
// export function Video ( mode ) ; begin
66215: LD_INT 0
66217: PPUSH
// ingame_video = mode ;
66218: LD_ADDR_OWVAR 52
66222: PUSH
66223: LD_VAR 0 1
66227: ST_TO_ADDR
// interface_hidden = mode ;
66228: LD_ADDR_OWVAR 54
66232: PUSH
66233: LD_VAR 0 1
66237: ST_TO_ADDR
// end ;
66238: LD_VAR 0 2
66242: RET
// export function Join ( array , element ) ; begin
66243: LD_INT 0
66245: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66246: LD_ADDR_VAR 0 3
66250: PUSH
66251: LD_VAR 0 1
66255: PPUSH
66256: LD_VAR 0 1
66260: PUSH
66261: LD_INT 1
66263: PLUS
66264: PPUSH
66265: LD_VAR 0 2
66269: PPUSH
66270: CALL_OW 1
66274: ST_TO_ADDR
// end ;
66275: LD_VAR 0 3
66279: RET
// export function JoinUnion ( array , element ) ; begin
66280: LD_INT 0
66282: PPUSH
// result := array union element ;
66283: LD_ADDR_VAR 0 3
66287: PUSH
66288: LD_VAR 0 1
66292: PUSH
66293: LD_VAR 0 2
66297: UNION
66298: ST_TO_ADDR
// end ;
66299: LD_VAR 0 3
66303: RET
// export function GetBehemoths ( side ) ; begin
66304: LD_INT 0
66306: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66307: LD_ADDR_VAR 0 2
66311: PUSH
66312: LD_INT 22
66314: PUSH
66315: LD_VAR 0 1
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 31
66326: PUSH
66327: LD_INT 25
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PPUSH
66338: CALL_OW 69
66342: ST_TO_ADDR
// end ;
66343: LD_VAR 0 2
66347: RET
// export function Shuffle ( array ) ; var i , index ; begin
66348: LD_INT 0
66350: PPUSH
66351: PPUSH
66352: PPUSH
// result := [ ] ;
66353: LD_ADDR_VAR 0 2
66357: PUSH
66358: EMPTY
66359: ST_TO_ADDR
// if not array then
66360: LD_VAR 0 1
66364: NOT
66365: IFFALSE 66369
// exit ;
66367: GO 66468
// Randomize ;
66369: CALL_OW 10
// for i = array downto 1 do
66373: LD_ADDR_VAR 0 3
66377: PUSH
66378: DOUBLE
66379: LD_VAR 0 1
66383: INC
66384: ST_TO_ADDR
66385: LD_INT 1
66387: PUSH
66388: FOR_DOWNTO
66389: IFFALSE 66466
// begin index := rand ( 1 , array ) ;
66391: LD_ADDR_VAR 0 4
66395: PUSH
66396: LD_INT 1
66398: PPUSH
66399: LD_VAR 0 1
66403: PPUSH
66404: CALL_OW 12
66408: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66409: LD_ADDR_VAR 0 2
66413: PUSH
66414: LD_VAR 0 2
66418: PPUSH
66419: LD_VAR 0 2
66423: PUSH
66424: LD_INT 1
66426: PLUS
66427: PPUSH
66428: LD_VAR 0 1
66432: PUSH
66433: LD_VAR 0 4
66437: ARRAY
66438: PPUSH
66439: CALL_OW 2
66443: ST_TO_ADDR
// array := Delete ( array , index ) ;
66444: LD_ADDR_VAR 0 1
66448: PUSH
66449: LD_VAR 0 1
66453: PPUSH
66454: LD_VAR 0 4
66458: PPUSH
66459: CALL_OW 3
66463: ST_TO_ADDR
// end ;
66464: GO 66388
66466: POP
66467: POP
// end ;
66468: LD_VAR 0 2
66472: RET
// export function GetBaseMaterials ( base ) ; begin
66473: LD_INT 0
66475: PPUSH
// result := [ 0 , 0 , 0 ] ;
66476: LD_ADDR_VAR 0 2
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: LD_INT 0
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: LIST
66494: ST_TO_ADDR
// if not base then
66495: LD_VAR 0 1
66499: NOT
66500: IFFALSE 66504
// exit ;
66502: GO 66553
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66504: LD_ADDR_VAR 0 2
66508: PUSH
66509: LD_VAR 0 1
66513: PPUSH
66514: LD_INT 1
66516: PPUSH
66517: CALL_OW 275
66521: PUSH
66522: LD_VAR 0 1
66526: PPUSH
66527: LD_INT 2
66529: PPUSH
66530: CALL_OW 275
66534: PUSH
66535: LD_VAR 0 1
66539: PPUSH
66540: LD_INT 3
66542: PPUSH
66543: CALL_OW 275
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: LIST
66552: ST_TO_ADDR
// end ;
66553: LD_VAR 0 2
66557: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66558: LD_INT 0
66560: PPUSH
66561: PPUSH
// result := array ;
66562: LD_ADDR_VAR 0 3
66566: PUSH
66567: LD_VAR 0 1
66571: ST_TO_ADDR
// if size > 0 then
66572: LD_VAR 0 2
66576: PUSH
66577: LD_INT 0
66579: GREATER
66580: IFFALSE 66626
// for i := array downto size do
66582: LD_ADDR_VAR 0 4
66586: PUSH
66587: DOUBLE
66588: LD_VAR 0 1
66592: INC
66593: ST_TO_ADDR
66594: LD_VAR 0 2
66598: PUSH
66599: FOR_DOWNTO
66600: IFFALSE 66624
// result := Delete ( result , result ) ;
66602: LD_ADDR_VAR 0 3
66606: PUSH
66607: LD_VAR 0 3
66611: PPUSH
66612: LD_VAR 0 3
66616: PPUSH
66617: CALL_OW 3
66621: ST_TO_ADDR
66622: GO 66599
66624: POP
66625: POP
// end ;
66626: LD_VAR 0 3
66630: RET
// export function ComExit ( unit ) ; var tmp ; begin
66631: LD_INT 0
66633: PPUSH
66634: PPUSH
// if not IsInUnit ( unit ) then
66635: LD_VAR 0 1
66639: PPUSH
66640: CALL_OW 310
66644: NOT
66645: IFFALSE 66649
// exit ;
66647: GO 66709
// tmp := IsInUnit ( unit ) ;
66649: LD_ADDR_VAR 0 3
66653: PUSH
66654: LD_VAR 0 1
66658: PPUSH
66659: CALL_OW 310
66663: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66664: LD_VAR 0 3
66668: PPUSH
66669: CALL_OW 247
66673: PUSH
66674: LD_INT 2
66676: EQUAL
66677: IFFALSE 66690
// ComExitVehicle ( unit ) else
66679: LD_VAR 0 1
66683: PPUSH
66684: CALL_OW 121
66688: GO 66699
// ComExitBuilding ( unit ) ;
66690: LD_VAR 0 1
66694: PPUSH
66695: CALL_OW 122
// result := tmp ;
66699: LD_ADDR_VAR 0 2
66703: PUSH
66704: LD_VAR 0 3
66708: ST_TO_ADDR
// end ;
66709: LD_VAR 0 2
66713: RET
// export function ResetHc ; begin
66714: LD_INT 0
66716: PPUSH
// InitHc ;
66717: CALL_OW 19
// hc_importance := 0 ;
66721: LD_ADDR_OWVAR 32
66725: PUSH
66726: LD_INT 0
66728: ST_TO_ADDR
// end ;
66729: LD_VAR 0 1
66733: RET
