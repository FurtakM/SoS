// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10561 0 0
// PrepareRussianCommander ;
  44: CALL 12095 0 0
// PrepareSouthBase ;
  48: CALL 12191 0 0
// PrepareNorthBase ;
  52: CALL 12529 0 0
// PrepareOtherRussians ;
  56: CALL 12924 0 0
// PrepareHeroes ;
  60: CALL 10882 0 0
// PrepareLisSquad ;
  64: CALL 11252 0 0
// PrepareOtherAmericans ;
  68: CALL 11565 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 586
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 586
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11707 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 586
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and IsOk ( dep1 ) and IsOk ( dep2 ) do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: PUSH
4969: LD_INT 1
4971: PPUSH
4972: CALL_OW 302
4976: AND
4977: PUSH
4978: LD_INT 10
4980: PPUSH
4981: CALL_OW 302
4985: AND
4986: IFFALSE 6376
4988: GO 4990
4990: DISABLE
4991: LD_INT 0
4993: PPUSH
4994: PPUSH
4995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4996: LD_ADDR_VAR 0 2
5000: PUSH
5001: LD_INT 22
5003: PUSH
5004: LD_INT 3
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: LD_INT 21
5013: PUSH
5014: LD_INT 1
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PPUSH
5025: CALL_OW 69
5029: ST_TO_ADDR
// if tmp then
5030: LD_VAR 0 2
5034: IFFALSE 5095
// begin for i in tmp do
5036: LD_ADDR_VAR 0 3
5040: PUSH
5041: LD_VAR 0 2
5045: PUSH
5046: FOR_IN
5047: IFFALSE 5093
// begin if IsInUnit ( i ) then
5049: LD_VAR 0 3
5053: PPUSH
5054: CALL_OW 310
5058: IFFALSE 5069
// ComExitBuilding ( i ) ;
5060: LD_VAR 0 3
5064: PPUSH
5065: CALL_OW 122
// wait ( 0 0$1 ) ;
5069: LD_INT 35
5071: PPUSH
5072: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5076: LD_VAR 0 3
5080: PPUSH
5081: LD_INT 54
5083: PPUSH
5084: LD_INT 17
5086: PPUSH
5087: CALL_OW 174
// end ;
5091: GO 5046
5093: POP
5094: POP
// end ; wait ( 0 0$03 ) ;
5095: LD_INT 105
5097: PPUSH
5098: CALL_OW 67
// DialogueOn ;
5102: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5106: LD_EXP 1
5110: PPUSH
5111: LD_STRING D3a-JMM-1
5113: PPUSH
5114: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5118: LD_EXP 9
5122: PPUSH
5123: LD_STRING D3a-Pow-1
5125: PPUSH
5126: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5130: LD_EXP 1
5134: PPUSH
5135: LD_STRING D3a-JMM-2
5137: PPUSH
5138: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5142: LD_EXP 9
5146: PPUSH
5147: LD_STRING D3a-Pow-2
5149: PPUSH
5150: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5154: LD_EXP 1
5158: PPUSH
5159: LD_STRING D3a-JMM-3
5161: PPUSH
5162: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5166: LD_EXP 9
5170: PPUSH
5171: LD_STRING D3a-Pow-3
5173: PPUSH
5174: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5178: LD_EXP 1
5182: PPUSH
5183: LD_STRING D3a-JMM-4
5185: PPUSH
5186: CALL_OW 88
// DialogueOff ;
5190: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5194: LD_STRING M2
5196: PPUSH
5197: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5201: LD_EXP 1
5205: PPUSH
5206: LD_STRING D3b-JMM-1
5208: PPUSH
5209: CALL_OW 88
// Hint ( Depot2 ) ;
5213: LD_STRING Depot2
5215: PPUSH
5216: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5220: LD_INT 35
5222: PPUSH
5223: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5227: LD_INT 22
5229: PPUSH
5230: LD_INT 22
5232: PUSH
5233: LD_INT 1
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 2
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 70
5258: PUSH
5259: LD_INT 22
5261: PUSH
5262: LD_INT 3
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PUSH
5269: LD_INT 21
5271: PUSH
5272: LD_INT 1
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PPUSH
5283: CALL_OW 69
5287: NOT
5288: AND
5289: IFFALSE 5220
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5291: LD_ADDR_VAR 0 1
5295: PUSH
5296: LD_INT 22
5298: PUSH
5299: LD_INT 1
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: PUSH
5306: LD_INT 23
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 25
5318: PUSH
5319: LD_INT 2
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: PUSH
5326: LD_INT 50
5328: PUSH
5329: EMPTY
5330: LIST
5331: PUSH
5332: LD_INT 56
5334: PUSH
5335: EMPTY
5336: LIST
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: PPUSH
5345: CALL_OW 69
5349: PUSH
5350: LD_EXP 1
5354: PUSH
5355: LD_EXP 5
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: DIFF
5364: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5365: LD_INT 35
5367: PPUSH
5368: CALL_OW 67
// until temp > 0 ;
5372: LD_VAR 0 1
5376: PUSH
5377: LD_INT 0
5379: GREATER
5380: IFFALSE 5291
// wait ( 0 0$5 ) ;
5382: LD_INT 175
5384: PPUSH
5385: CALL_OW 67
// PrepareRussianHeroes ;
5389: CALL 11933 0 0
// InGameOn ;
5393: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5397: LD_EXP 8
5401: PPUSH
5402: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5406: LD_EXP 1
5410: PUSH
5411: LD_VAR 0 1
5415: PUSH
5416: LD_INT 1
5418: ARRAY
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PPUSH
5424: LD_EXP 8
5428: PPUSH
5429: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5433: LD_EXP 8
5437: PPUSH
5438: LD_VAR 0 1
5442: PUSH
5443: LD_INT 1
5445: ARRAY
5446: PPUSH
5447: CALL_OW 119
// wait ( 0 0$02 ) ;
5451: LD_INT 70
5453: PPUSH
5454: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5458: LD_EXP 8
5462: PPUSH
5463: LD_STRING D4-Mikh-1
5465: PPUSH
5466: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5470: LD_VAR 0 1
5474: PUSH
5475: LD_INT 1
5477: ARRAY
5478: PPUSH
5479: CALL_OW 258
5483: PUSH
5484: LD_INT 1
5486: EQUAL
5487: IFFALSE 5505
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5489: LD_VAR 0 1
5493: PUSH
5494: LD_INT 1
5496: ARRAY
5497: PPUSH
5498: LD_STRING D4-Sol1-1
5500: PPUSH
5501: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5505: LD_VAR 0 1
5509: PUSH
5510: LD_INT 1
5512: ARRAY
5513: PPUSH
5514: CALL_OW 258
5518: PUSH
5519: LD_INT 2
5521: EQUAL
5522: IFFALSE 5540
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5524: LD_VAR 0 1
5528: PUSH
5529: LD_INT 1
5531: ARRAY
5532: PPUSH
5533: LD_STRING D4-FSol1-1
5535: PPUSH
5536: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5540: LD_EXP 8
5544: PPUSH
5545: LD_STRING D4-Mikh-2
5547: PPUSH
5548: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5552: LD_VAR 0 1
5556: PUSH
5557: LD_INT 1
5559: ARRAY
5560: PPUSH
5561: CALL_OW 258
5565: PUSH
5566: LD_INT 1
5568: EQUAL
5569: IFFALSE 5587
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5571: LD_VAR 0 1
5575: PUSH
5576: LD_INT 1
5578: ARRAY
5579: PPUSH
5580: LD_STRING D4-Sol1-2
5582: PPUSH
5583: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5587: LD_VAR 0 1
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PPUSH
5596: CALL_OW 258
5600: PUSH
5601: LD_INT 2
5603: EQUAL
5604: IFFALSE 5622
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5606: LD_VAR 0 1
5610: PUSH
5611: LD_INT 1
5613: ARRAY
5614: PPUSH
5615: LD_STRING D4-FSol1-2
5617: PPUSH
5618: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5622: LD_EXP 8
5626: PPUSH
5627: LD_STRING D4-Mikh-3
5629: PPUSH
5630: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5634: LD_VAR 0 1
5638: PUSH
5639: LD_INT 1
5641: ARRAY
5642: PPUSH
5643: CALL_OW 258
5647: PUSH
5648: LD_INT 1
5650: EQUAL
5651: IFFALSE 5669
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5653: LD_VAR 0 1
5657: PUSH
5658: LD_INT 1
5660: ARRAY
5661: PPUSH
5662: LD_STRING D4-Sol1-3
5664: PPUSH
5665: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5669: LD_VAR 0 1
5673: PUSH
5674: LD_INT 1
5676: ARRAY
5677: PPUSH
5678: CALL_OW 258
5682: PUSH
5683: LD_INT 2
5685: EQUAL
5686: IFFALSE 5704
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5688: LD_VAR 0 1
5692: PUSH
5693: LD_INT 1
5695: ARRAY
5696: PPUSH
5697: LD_STRING D4-FSol1-3
5699: PPUSH
5700: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5704: LD_EXP 8
5708: PPUSH
5709: LD_STRING D4-Mikh-4
5711: PPUSH
5712: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5716: LD_STRING Qs1
5718: PPUSH
5719: CALL_OW 97
5723: PUSH
5724: LD_INT 1
5726: DOUBLE
5727: EQUAL
5728: IFTRUE 5732
5730: GO 5767
5732: POP
// begin InGameOff ;
5733: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5737: LD_INT 1
5739: PPUSH
5740: LD_INT 6
5742: PPUSH
5743: LD_INT 2
5745: PPUSH
5746: LD_INT 1
5748: PPUSH
5749: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5753: LD_EXP 8
5757: PPUSH
5758: LD_INT 17
5760: PPUSH
5761: CALL_OW 113
// end ; 2 :
5765: GO 6360
5767: LD_INT 2
5769: DOUBLE
5770: EQUAL
5771: IFTRUE 5775
5773: GO 6325
5775: POP
// begin repeat wait ( 0 0$1 ) ;
5776: LD_INT 35
5778: PPUSH
5779: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5783: LD_VAR 0 1
5787: PUSH
5788: LD_INT 1
5790: ARRAY
5791: PPUSH
5792: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5796: LD_VAR 0 1
5800: PUSH
5801: LD_INT 1
5803: ARRAY
5804: PPUSH
5805: LD_EXP 1
5809: PPUSH
5810: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5814: LD_EXP 8
5818: PPUSH
5819: LD_EXP 1
5823: PPUSH
5824: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5828: LD_EXP 1
5832: PPUSH
5833: LD_EXP 8
5837: PPUSH
5838: CALL_OW 296
5842: PUSH
5843: LD_INT 5
5845: LESS
5846: IFFALSE 5776
// ComTurnUnit ( Mikhail , JMM ) ;
5848: LD_EXP 8
5852: PPUSH
5853: LD_EXP 1
5857: PPUSH
5858: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5862: LD_EXP 1
5866: PPUSH
5867: LD_STRING D4b-JMM-1
5869: PPUSH
5870: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5874: LD_EXP 8
5878: PPUSH
5879: LD_STRING D4b-Mikh-1
5881: PPUSH
5882: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5886: LD_EXP 1
5890: PPUSH
5891: LD_STRING D4b-JMM-2
5893: PPUSH
5894: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5898: LD_EXP 8
5902: PPUSH
5903: LD_STRING D4b-Mikh-2
5905: PPUSH
5906: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5910: LD_EXP 1
5914: PPUSH
5915: LD_STRING D4b-JMM-3
5917: PPUSH
5918: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5922: LD_EXP 8
5926: PPUSH
5927: LD_STRING D4b-Mikh-3
5929: PPUSH
5930: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5934: LD_EXP 1
5938: PPUSH
5939: LD_STRING D4b-JMM-4
5941: PPUSH
5942: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5946: LD_EXP 8
5950: PPUSH
5951: LD_STRING D4b-Mikh-4
5953: PPUSH
5954: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5958: LD_EXP 1
5962: PPUSH
5963: LD_STRING D4b-JMM-5
5965: PPUSH
5966: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5970: LD_EXP 8
5974: PPUSH
5975: LD_STRING D4b-Mikh-5
5977: PPUSH
5978: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5982: LD_EXP 1
5986: PPUSH
5987: LD_STRING D4b-JMM-6
5989: PPUSH
5990: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5994: LD_EXP 8
5998: PPUSH
5999: LD_STRING D4b-Mikh-6
6001: PPUSH
6002: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
6006: LD_EXP 1
6010: PPUSH
6011: LD_STRING D4b-JMM-7
6013: PPUSH
6014: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6018: LD_EXP 8
6022: PPUSH
6023: LD_STRING D4b-Mikh-7
6025: PPUSH
6026: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6030: LD_VAR 0 1
6034: PUSH
6035: LD_INT 1
6037: ARRAY
6038: PPUSH
6039: CALL_OW 258
6043: PUSH
6044: LD_INT 1
6046: EQUAL
6047: IFFALSE 6065
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6049: LD_VAR 0 1
6053: PUSH
6054: LD_INT 1
6056: ARRAY
6057: PPUSH
6058: LD_STRING D4b-Sol1-7
6060: PPUSH
6061: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6065: LD_VAR 0 1
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: CALL_OW 258
6078: PUSH
6079: LD_INT 2
6081: EQUAL
6082: IFFALSE 6100
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6084: LD_VAR 0 1
6088: PUSH
6089: LD_INT 1
6091: ARRAY
6092: PPUSH
6093: LD_STRING D4b-FSol1-7
6095: PPUSH
6096: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6100: LD_EXP 1
6104: PPUSH
6105: LD_STRING D4b-JMM-8
6107: PPUSH
6108: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6112: LD_VAR 0 1
6116: PUSH
6117: LD_INT 1
6119: ARRAY
6120: PPUSH
6121: CALL_OW 258
6125: PUSH
6126: LD_INT 1
6128: EQUAL
6129: IFFALSE 6147
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6131: LD_VAR 0 1
6135: PUSH
6136: LD_INT 1
6138: ARRAY
6139: PPUSH
6140: LD_STRING D4b-Sol1-8
6142: PPUSH
6143: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6147: LD_VAR 0 1
6151: PUSH
6152: LD_INT 1
6154: ARRAY
6155: PPUSH
6156: CALL_OW 258
6160: PUSH
6161: LD_INT 2
6163: EQUAL
6164: IFFALSE 6182
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6166: LD_VAR 0 1
6170: PUSH
6171: LD_INT 1
6173: ARRAY
6174: PPUSH
6175: LD_STRING D4b-FSol1-8
6177: PPUSH
6178: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6182: LD_EXP 1
6186: PPUSH
6187: LD_STRING D4b-JMM-9
6189: PPUSH
6190: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6194: LD_EXP 8
6198: PPUSH
6199: LD_INT 1
6201: PPUSH
6202: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6206: LD_ADDR_VAR 0 3
6210: PUSH
6211: LD_INT 22
6213: PUSH
6214: LD_INT 1
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: EMPTY
6222: LIST
6223: PPUSH
6224: CALL_OW 69
6228: PUSH
6229: FOR_IN
6230: IFFALSE 6243
// ComFree ( i ) ;
6232: LD_VAR 0 3
6236: PPUSH
6237: CALL_OW 139
6241: GO 6229
6243: POP
6244: POP
// repeat wait ( 0 0$1 ) ;
6245: LD_INT 35
6247: PPUSH
6248: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6252: LD_EXP 8
6256: PPUSH
6257: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6261: LD_EXP 8
6265: PUSH
6266: LD_VAR 0 1
6270: PUSH
6271: LD_INT 1
6273: ARRAY
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PPUSH
6279: LD_INT 1
6281: PPUSH
6282: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6286: LD_EXP 8
6290: PPUSH
6291: CALL_OW 310
6295: IFFALSE 6245
// mikhailDepot = IsInUnit ( Mikhail ) ;
6297: LD_ADDR_EXP 23
6301: PUSH
6302: LD_EXP 8
6306: PPUSH
6307: CALL_OW 310
6311: ST_TO_ADDR
// InGameOff ;
6312: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6316: LD_STRING M3
6318: PPUSH
6319: CALL_OW 337
// end ; 3 :
6323: GO 6360
6325: LD_INT 3
6327: DOUBLE
6328: EQUAL
6329: IFTRUE 6333
6331: GO 6359
6333: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6334: LD_EXP 8
6338: PPUSH
6339: LD_INT 17
6341: PPUSH
6342: CALL_OW 113
// wait ( 0 0$3 ) ;
6346: LD_INT 105
6348: PPUSH
6349: CALL_OW 67
// InGameOff ;
6353: CALL_OW 9
// end ; end ;
6357: GO 6360
6359: POP
// PrepareTigers ;
6360: CALL 15350 0 0
// RussianTrap ;
6364: CALL 10260 0 0
// tigersRespawn = 1 ;
6368: LD_ADDR_EXP 30
6372: PUSH
6373: LD_INT 1
6375: ST_TO_ADDR
// end ;
6376: PPOPN 3
6378: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6379: LD_INT 1
6381: PPUSH
6382: CALL_OW 255
6386: PUSH
6387: LD_INT 1
6389: EQUAL
6390: PUSH
6391: LD_INT 10
6393: PPUSH
6394: CALL_OW 255
6398: PUSH
6399: LD_INT 1
6401: EQUAL
6402: AND
6403: PUSH
6404: LD_INT 1
6406: PPUSH
6407: CALL_OW 274
6411: PPUSH
6412: LD_INT 1
6414: PPUSH
6415: CALL_OW 275
6419: PUSH
6420: LD_INT 100
6422: GREATEREQUAL
6423: AND
6424: IFFALSE 6573
6426: GO 6428
6428: DISABLE
6429: LD_INT 0
6431: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6432: LD_INT 2100
6434: PPUSH
6435: LD_INT 4200
6437: PPUSH
6438: CALL_OW 12
6442: PUSH
6443: LD_INT 1050
6445: PLUS
6446: PPUSH
6447: CALL_OW 67
// PrepareCargoBays ;
6451: CALL 13116 0 0
// cargoRespawn = 1 ;
6455: LD_ADDR_EXP 28
6459: PUSH
6460: LD_INT 1
6462: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6463: LD_ADDR_VAR 0 1
6467: PUSH
6468: LD_EXP 15
6472: PUSH
6473: LD_EXP 16
6477: PUSH
6478: LD_EXP 17
6482: PUSH
6483: LD_EXP 18
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6494: LD_VAR 0 1
6498: PPUSH
6499: LD_INT 17
6501: PPUSH
6502: LD_INT 10
6504: PPUSH
6505: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6509: LD_VAR 0 1
6513: PPUSH
6514: LD_INT 36
6516: PPUSH
6517: LD_INT 13
6519: PPUSH
6520: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 40
6531: PPUSH
6532: LD_INT 20
6534: PPUSH
6535: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6539: LD_VAR 0 1
6543: PPUSH
6544: LD_INT 53
6546: PPUSH
6547: LD_INT 16
6549: PPUSH
6550: CALL_OW 171
// wait ( 0 0$5 ) ;
6554: LD_INT 175
6556: PPUSH
6557: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6561: LD_EXP 17
6565: PPUSH
6566: LD_STRING D5-Rus2-1
6568: PPUSH
6569: CALL_OW 88
// end ;
6573: PPOPN 1
6575: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6576: LD_EXP 28
6580: PUSH
6581: LD_INT 1
6583: EQUAL
6584: IFFALSE 6739
6586: GO 6588
6588: DISABLE
6589: LD_INT 0
6591: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 21
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: LD_INT 34
6619: PUSH
6620: LD_INT 51
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: LIST
6631: PPUSH
6632: CALL_OW 69
6636: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6637: LD_INT 105
6639: PPUSH
6640: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6644: LD_VAR 0 1
6648: PPUSH
6649: LD_INT 3
6651: PUSH
6652: LD_INT 60
6654: PUSH
6655: EMPTY
6656: LIST
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 72
6666: PUSH
6667: LD_VAR 0 1
6671: PPUSH
6672: LD_INT 3
6674: PUSH
6675: LD_INT 24
6677: PUSH
6678: LD_INT 980
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: PPUSH
6689: CALL_OW 72
6693: OR
6694: IFFALSE 6637
// ComMoveXY ( cargos , 7 , 9 ) ;
6696: LD_VAR 0 1
6700: PPUSH
6701: LD_INT 7
6703: PPUSH
6704: LD_INT 9
6706: PPUSH
6707: CALL_OW 111
// cargoSee = 1 ;
6711: LD_ADDR_EXP 29
6715: PUSH
6716: LD_INT 1
6718: ST_TO_ADDR
// cargoEscape = 1 ;
6719: LD_ADDR_EXP 20
6723: PUSH
6724: LD_INT 1
6726: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6727: LD_EXP 17
6731: PPUSH
6732: LD_STRING D5-Rus2-1a
6734: PPUSH
6735: CALL_OW 88
// end ;
6739: PPOPN 1
6741: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6742: LD_EXP 20
6746: PUSH
6747: LD_EXP 15
6751: PUSH
6752: LD_EXP 16
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PPUSH
6761: LD_INT 50
6763: PUSH
6764: EMPTY
6765: LIST
6766: PUSH
6767: LD_INT 22
6769: PUSH
6770: LD_INT 3
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 52
6779: PUSH
6780: EMPTY
6781: LIST
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: PPUSH
6788: CALL_OW 72
6792: AND
6793: IFFALSE 7126
6795: GO 6797
6797: DISABLE
6798: LD_INT 0
6800: PPUSH
6801: PPUSH
6802: PPUSH
6803: PPUSH
// begin enable ;
6804: ENABLE
// for i in [ cargo1 , cargo2 ] do
6805: LD_ADDR_VAR 0 2
6809: PUSH
6810: LD_EXP 15
6814: PUSH
6815: LD_EXP 16
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: FOR_IN
6825: IFFALSE 7124
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6827: LD_ADDR_VAR 0 1
6831: PUSH
6832: LD_VAR 0 2
6836: PPUSH
6837: CALL_OW 250
6841: PPUSH
6842: LD_VAR 0 2
6846: PPUSH
6847: CALL_OW 251
6851: PPUSH
6852: LD_INT 6
6854: PPUSH
6855: CALL 77307 0 3
6859: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6860: LD_VAR 0 1
6864: PUSH
6865: LD_VAR 0 2
6869: PPUSH
6870: CALL 78526 0 1
6874: PUSH
6875: LD_INT 4
6877: ARRAY
6878: PUSH
6879: LD_INT 60
6881: LESS
6882: AND
6883: IFFALSE 6922
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6885: LD_VAR 0 2
6889: PPUSH
6890: LD_VAR 0 1
6894: PUSH
6895: LD_INT 1
6897: ARRAY
6898: PUSH
6899: LD_INT 1
6901: ARRAY
6902: PPUSH
6903: LD_VAR 0 1
6907: PUSH
6908: LD_INT 1
6910: ARRAY
6911: PUSH
6912: LD_INT 2
6914: ARRAY
6915: PPUSH
6916: CALL_OW 117
6920: GO 7122
// if not IsInArea ( i , RemoveArea ) then
6922: LD_VAR 0 2
6926: PPUSH
6927: LD_INT 32
6929: PPUSH
6930: CALL_OW 308
6934: NOT
6935: IFFALSE 7083
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6937: LD_ADDR_VAR 0 3
6941: PUSH
6942: LD_VAR 0 2
6946: PPUSH
6947: CALL_OW 250
6951: PPUSH
6952: LD_INT 4
6954: PPUSH
6955: LD_INT 3
6957: PPUSH
6958: CALL_OW 272
6962: ST_TO_ADDR
// y := GetY ( i ) ;
6963: LD_ADDR_VAR 0 4
6967: PUSH
6968: LD_VAR 0 2
6972: PPUSH
6973: CALL_OW 251
6977: ST_TO_ADDR
// if HexInfo ( x , y ) then
6978: LD_VAR 0 3
6982: PPUSH
6983: LD_VAR 0 4
6987: PPUSH
6988: CALL_OW 428
6992: IFFALSE 7015
// x := ShiftX ( x , 4 , 3 ) ;
6994: LD_ADDR_VAR 0 3
6998: PUSH
6999: LD_VAR 0 3
7003: PPUSH
7004: LD_INT 4
7006: PPUSH
7007: LD_INT 3
7009: PPUSH
7010: CALL_OW 272
7014: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
7015: LD_VAR 0 3
7019: PPUSH
7020: LD_VAR 0 4
7024: PPUSH
7025: CALL_OW 428
7029: PUSH
7030: LD_VAR 0 3
7034: PPUSH
7035: LD_VAR 0 4
7039: PPUSH
7040: CALL_OW 488
7044: NOT
7045: OR
7046: IFFALSE 7062
// ComMoveToArea ( i , RemoveArea ) else
7048: LD_VAR 0 2
7052: PPUSH
7053: LD_INT 32
7055: PPUSH
7056: CALL_OW 113
7060: GO 7081
// ComMoveXY ( i , x , y ) ;
7062: LD_VAR 0 2
7066: PPUSH
7067: LD_VAR 0 3
7071: PPUSH
7072: LD_VAR 0 4
7076: PPUSH
7077: CALL_OW 111
// end else
7081: GO 7122
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7083: LD_VAR 0 2
7087: PPUSH
7088: CALL_OW 311
7092: PPUSH
7093: CALL_OW 64
// RemoveUnit ( i ) ;
7097: LD_VAR 0 2
7101: PPUSH
7102: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7106: LD_ADDR_EXP 20
7110: PUSH
7111: LD_EXP 20
7115: PUSH
7116: LD_INT 1
7118: PLUS
7119: ST_TO_ADDR
// continue ;
7120: GO 6824
// end ; end ;
7122: GO 6824
7124: POP
7125: POP
// end ;
7126: PPOPN 4
7128: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7129: LD_EXP 20
7133: PUSH
7134: LD_INT 1
7136: GREATER
7137: IFFALSE 7386
7139: GO 7141
7141: DISABLE
7142: LD_INT 0
7144: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7145: LD_INT 4
7147: PPUSH
7148: LD_INT 1
7150: PPUSH
7151: LD_INT 1
7153: PPUSH
7154: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7158: LD_INT 31
7160: PPUSH
7161: LD_INT 1
7163: PPUSH
7164: LD_INT 1
7166: PPUSH
7167: CALL_OW 324
// Hint ( Bunker ) ;
7171: LD_STRING Bunker
7173: PPUSH
7174: CALL_OW 339
// if IsOK ( Jerry ) then
7178: LD_EXP 7
7182: PPUSH
7183: CALL_OW 302
7187: IFFALSE 7203
// Say ( Jerry , D5a-Sol1-1 ) else
7189: LD_EXP 7
7193: PPUSH
7194: LD_STRING D5a-Sol1-1
7196: PPUSH
7197: CALL_OW 88
7201: GO 7289
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7203: LD_ADDR_VAR 0 1
7207: PUSH
7208: LD_INT 22
7210: PUSH
7211: LD_INT 1
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: LD_INT 26
7220: PUSH
7221: LD_INT 1
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PPUSH
7232: CALL_OW 69
7236: PUSH
7237: LD_EXP 1
7241: PUSH
7242: LD_EXP 2
7246: PUSH
7247: LD_EXP 3
7251: PUSH
7252: LD_EXP 5
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: DIFF
7263: ST_TO_ADDR
// if not speaker then
7264: LD_VAR 0 1
7268: NOT
7269: IFFALSE 7273
// exit ;
7271: GO 7386
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7273: LD_VAR 0 1
7277: PUSH
7278: LD_INT 1
7280: ARRAY
7281: PPUSH
7282: LD_STRING D5a-Sol1-1
7284: PPUSH
7285: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7289: LD_EXP 1
7293: PPUSH
7294: LD_STRING D5a-JMM-1
7296: PPUSH
7297: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7301: LD_INT 22
7303: PPUSH
7304: LD_INT 22
7306: PUSH
7307: LD_INT 1
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 25
7316: PUSH
7317: LD_INT 2
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PPUSH
7328: CALL_OW 70
7332: IFFALSE 7386
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7334: LD_INT 22
7336: PPUSH
7337: LD_INT 22
7339: PUSH
7340: LD_INT 1
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: LD_INT 25
7349: PUSH
7350: LD_INT 2
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PPUSH
7361: CALL_OW 70
7365: PUSH
7366: LD_INT 1
7368: ARRAY
7369: PPUSH
7370: LD_INT 31
7372: PPUSH
7373: LD_INT 44
7375: PPUSH
7376: LD_INT 13
7378: PPUSH
7379: LD_INT 1
7381: PPUSH
7382: CALL_OW 145
// end ;
7386: PPOPN 1
7388: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7389: LD_INT 1
7391: PPUSH
7392: CALL_OW 255
7396: PUSH
7397: LD_INT 3
7399: EQUAL
7400: PUSH
7401: LD_INT 1
7403: PPUSH
7404: CALL_OW 256
7408: PUSH
7409: LD_INT 1000
7411: LESS
7412: AND
7413: PUSH
7414: LD_INT 10
7416: PPUSH
7417: CALL_OW 255
7421: PUSH
7422: LD_INT 3
7424: EQUAL
7425: PUSH
7426: LD_INT 10
7428: PPUSH
7429: CALL_OW 256
7433: PUSH
7434: LD_INT 1000
7436: LESS
7437: AND
7438: OR
7439: IFFALSE 7456
7441: GO 7443
7443: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7444: LD_EXP 1
7448: PPUSH
7449: LD_STRING D8-JMM-1
7451: PPUSH
7452: CALL_OW 88
7456: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7457: LD_EXP 8
7461: PPUSH
7462: CALL_OW 310
7466: PUSH
7467: LD_INT 1
7469: EQUAL
7470: PUSH
7471: LD_EXP 22
7475: PUSH
7476: LD_INT 3
7478: EQUAL
7479: NOT
7480: AND
7481: IFFALSE 7503
7483: GO 7485
7485: DISABLE
// begin enable ;
7486: ENABLE
// mikhailInBase = 1 ;
7487: LD_ADDR_EXP 22
7491: PUSH
7492: LD_INT 1
7494: ST_TO_ADDR
// mikhailStatus = 1 ;
7495: LD_ADDR_EXP 21
7499: PUSH
7500: LD_INT 1
7502: ST_TO_ADDR
// end ;
7503: END
// export function AskMikhail ; begin
7504: LD_INT 0
7506: PPUSH
// case Query ( QMikh2 ) of 1 :
7507: LD_STRING QMikh2
7509: PPUSH
7510: CALL_OW 97
7514: PUSH
7515: LD_INT 1
7517: DOUBLE
7518: EQUAL
7519: IFTRUE 7523
7521: GO 7590
7523: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7524: LD_INT 1
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: LD_INT 2
7532: PPUSH
7533: LD_INT 1
7535: PPUSH
7536: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7540: LD_EXP 8
7544: PPUSH
7545: LD_INT 6
7547: PPUSH
7548: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7552: LD_EXP 8
7556: PPUSH
7557: CALL_OW 122
// wait ( 0 0$1 ) ;
7561: LD_INT 35
7563: PPUSH
7564: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7568: LD_EXP 8
7572: PPUSH
7573: LD_INT 17
7575: PPUSH
7576: CALL_OW 113
// mikhailInbase = 0 ;
7580: LD_ADDR_EXP 22
7584: PUSH
7585: LD_INT 0
7587: ST_TO_ADDR
// end ; 2 :
7588: GO 7831
7590: LD_INT 2
7592: DOUBLE
7593: EQUAL
7594: IFTRUE 7598
7596: GO 7771
7598: POP
// begin mikhailInBase = 2 ;
7599: LD_ADDR_EXP 22
7603: PUSH
7604: LD_INT 2
7606: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7607: LD_EXP 8
7611: PPUSH
7612: LD_INT 6
7614: PPUSH
7615: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7619: LD_EXP 8
7623: PPUSH
7624: CALL_OW 122
// wait ( 0 0$1 ) ;
7628: LD_INT 35
7630: PPUSH
7631: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7635: LD_EXP 8
7639: PPUSH
7640: LD_EXP 8
7644: PPUSH
7645: CALL_OW 250
7649: PUSH
7650: LD_INT 2
7652: PLUS
7653: PPUSH
7654: LD_EXP 8
7658: PPUSH
7659: CALL_OW 251
7663: PUSH
7664: LD_INT 2
7666: PLUS
7667: PPUSH
7668: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7672: LD_EXP 8
7676: PPUSH
7677: LD_EXP 8
7681: PPUSH
7682: CALL_OW 250
7686: PUSH
7687: LD_INT 1
7689: PLUS
7690: PPUSH
7691: LD_EXP 8
7695: PPUSH
7696: CALL_OW 251
7700: PUSH
7701: LD_INT 2
7703: PLUS
7704: PPUSH
7705: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7709: LD_EXP 8
7713: PPUSH
7714: LD_EXP 8
7718: PPUSH
7719: CALL_OW 250
7723: PUSH
7724: LD_INT 2
7726: PLUS
7727: PPUSH
7728: LD_EXP 8
7732: PPUSH
7733: CALL_OW 251
7737: PPUSH
7738: CALL_OW 171
// wait ( 0 0$5 ) ;
7742: LD_INT 175
7744: PPUSH
7745: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7749: LD_EXP 8
7753: PPUSH
7754: LD_INT 25
7756: PPUSH
7757: CALL_OW 113
// mikhailInBase = 4 ;
7761: LD_ADDR_EXP 22
7765: PUSH
7766: LD_INT 4
7768: ST_TO_ADDR
// end ; 3 :
7769: GO 7831
7771: LD_INT 3
7773: DOUBLE
7774: EQUAL
7775: IFTRUE 7779
7777: GO 7830
7779: POP
// begin SetSide ( Mikhail , 6 ) ;
7780: LD_EXP 8
7784: PPUSH
7785: LD_INT 6
7787: PPUSH
7788: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7792: LD_EXP 8
7796: PPUSH
7797: CALL_OW 122
// wait ( 0 0$1 ) ;
7801: LD_INT 35
7803: PPUSH
7804: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7808: LD_EXP 8
7812: PPUSH
7813: LD_INT 17
7815: PPUSH
7816: CALL_OW 113
// mikhailInbase = 3 ;
7820: LD_ADDR_EXP 22
7824: PUSH
7825: LD_INT 3
7827: ST_TO_ADDR
// end ; end ;
7828: GO 7831
7830: POP
// end ;
7831: LD_VAR 0 1
7835: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7836: LD_EXP 8
7840: PPUSH
7841: LD_INT 25
7843: PPUSH
7844: CALL_OW 308
7848: PUSH
7849: LD_EXP 22
7853: PUSH
7854: LD_INT 4
7856: EQUAL
7857: AND
7858: IFFALSE 7962
7860: GO 7862
7862: DISABLE
// begin enable ;
7863: ENABLE
// mikhailInBase = 1 ;
7864: LD_ADDR_EXP 22
7868: PUSH
7869: LD_INT 1
7871: ST_TO_ADDR
// InGameOn ;
7872: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7876: LD_INT 1
7878: PPUSH
7879: LD_INT 6
7881: PPUSH
7882: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7886: LD_INT 35
7888: PPUSH
7889: CALL_OW 67
// if Carry ( Mikhail ) then
7893: LD_EXP 8
7897: PPUSH
7898: CALL_OW 281
7902: IFFALSE 7913
// ComUnload ( Mikhail ) ;
7904: LD_EXP 8
7908: PPUSH
7909: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7913: LD_EXP 8
7917: PPUSH
7918: LD_INT 1
7920: PPUSH
7921: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7925: LD_EXP 8
7929: PPUSH
7930: CALL_OW 310
7934: IFFALSE 7886
// SetSide ( dep1 , 1 ) ;
7936: LD_INT 1
7938: PPUSH
7939: LD_INT 1
7941: PPUSH
7942: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7946: LD_EXP 8
7950: PPUSH
7951: LD_INT 1
7953: PPUSH
7954: CALL_OW 235
// InGameOff ;
7958: CALL_OW 9
// end ;
7962: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7963: LD_EXP 8
7967: PPUSH
7968: CALL_OW 310
7972: PUSH
7973: LD_EXP 22
7977: PUSH
7978: LD_INT 3
7980: EQUAL
7981: NOT
7982: AND
7983: IFFALSE 8118
7985: GO 7987
7987: DISABLE
// begin enable ;
7988: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7989: LD_INT 22
7991: PUSH
7992: LD_INT 1
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 21
8001: PUSH
8002: LD_INT 1
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: LD_INT 91
8011: PUSH
8012: LD_EXP 8
8016: PPUSH
8017: CALL_OW 310
8021: PUSH
8022: LD_INT 10
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: LIST
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: PPUSH
8035: CALL_OW 69
8039: PUSH
8040: LD_INT 1
8042: EQUAL
8043: IFFALSE 8118
// begin mikhailStatus = 4 ;
8045: LD_ADDR_EXP 21
8049: PUSH
8050: LD_INT 4
8052: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8053: LD_INT 1
8055: PPUSH
8056: LD_INT 6
8058: PPUSH
8059: LD_INT 2
8061: PPUSH
8062: LD_INT 1
8064: PPUSH
8065: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8069: LD_EXP 8
8073: PPUSH
8074: LD_INT 6
8076: PPUSH
8077: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8081: LD_EXP 8
8085: PPUSH
8086: CALL_OW 122
// wait ( 0 0$1 ) ;
8090: LD_INT 35
8092: PPUSH
8093: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8097: LD_EXP 8
8101: PPUSH
8102: LD_INT 17
8104: PPUSH
8105: CALL_OW 113
// mikhailStatus = 3 ;
8109: LD_ADDR_EXP 21
8113: PUSH
8114: LD_INT 3
8116: ST_TO_ADDR
// disable ;
8117: DISABLE
// end ; end ;
8118: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8119: LD_EXP 1
8123: PPUSH
8124: LD_EXP 23
8128: PPUSH
8129: CALL_OW 296
8133: PUSH
8134: LD_INT 5
8136: LESS
8137: PUSH
8138: LD_EXP 21
8142: PUSH
8143: LD_INT 3
8145: EQUAL
8146: AND
8147: PUSH
8148: LD_EXP 22
8152: PUSH
8153: LD_INT 3
8155: EQUAL
8156: NOT
8157: AND
8158: IFFALSE 8389
8160: GO 8162
8162: DISABLE
8163: LD_INT 0
8165: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8166: LD_ADDR_VAR 0 1
8170: PUSH
8171: LD_INT 22
8173: PUSH
8174: LD_INT 1
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 21
8183: PUSH
8184: LD_INT 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 26
8193: PUSH
8194: LD_INT 1
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: PPUSH
8206: CALL_OW 69
8210: PUSH
8211: LD_EXP 1
8215: PUSH
8216: LD_EXP 5
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: DIFF
8225: ST_TO_ADDR
// if not tmp then
8226: LD_VAR 0 1
8230: NOT
8231: IFFALSE 8235
// exit ;
8233: GO 8389
// DialogueOn ;
8235: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8239: LD_EXP 1
8243: PPUSH
8244: LD_STRING D7-JMM-1
8246: PPUSH
8247: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8251: LD_VAR 0 1
8255: PUSH
8256: LD_INT 1
8258: ARRAY
8259: PPUSH
8260: LD_STRING D7-Sol1-1
8262: PPUSH
8263: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8267: LD_EXP 1
8271: PPUSH
8272: LD_STRING D7-JMM-2
8274: PPUSH
8275: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8279: LD_VAR 0 1
8283: PUSH
8284: LD_INT 1
8286: ARRAY
8287: PPUSH
8288: LD_STRING D7-Sol1-2
8290: PPUSH
8291: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8295: LD_EXP 1
8299: PPUSH
8300: LD_STRING D7-JMM-3
8302: PPUSH
8303: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8307: LD_VAR 0 1
8311: PUSH
8312: LD_INT 1
8314: ARRAY
8315: PPUSH
8316: LD_STRING D7-Sol1-3
8318: PPUSH
8319: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8323: LD_EXP 3
8327: PPUSH
8328: CALL_OW 302
8332: PUSH
8333: LD_EXP 4
8337: PPUSH
8338: CALL_OW 302
8342: AND
8343: IFFALSE 8385
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8345: LD_EXP 3
8349: PPUSH
8350: LD_STRING D7-Cyrus-3
8352: PPUSH
8353: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8357: LD_VAR 0 1
8361: PUSH
8362: LD_INT 1
8364: ARRAY
8365: PPUSH
8366: LD_STRING D7-Sol1-4
8368: PPUSH
8369: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8373: LD_EXP 4
8377: PPUSH
8378: LD_STRING D7-Lisa-4
8380: PPUSH
8381: CALL_OW 88
// end ; DialogueOff ;
8385: CALL_OW 7
// end ;
8389: PPOPN 1
8391: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8392: LD_EXP 8
8396: PPUSH
8397: CALL_OW 303
8401: PUSH
8402: LD_EXP 21
8406: PUSH
8407: LD_INT 3
8409: EQUAL
8410: AND
8411: IFFALSE 8425
8413: GO 8415
8415: DISABLE
// begin enable ;
8416: ENABLE
// mikhailStatus = 2 ;
8417: LD_ADDR_EXP 21
8421: PUSH
8422: LD_INT 2
8424: ST_TO_ADDR
// end ;
8425: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8426: LD_EXP 8
8430: PPUSH
8431: LD_INT 17
8433: PPUSH
8434: CALL_OW 308
8438: PUSH
8439: LD_EXP 8
8443: PPUSH
8444: CALL_OW 255
8448: PUSH
8449: LD_INT 6
8451: EQUAL
8452: AND
8453: IFFALSE 8486
8455: GO 8457
8457: DISABLE
// begin if not mikhailInBase = 3 then
8458: LD_EXP 22
8462: PUSH
8463: LD_INT 3
8465: EQUAL
8466: NOT
8467: IFFALSE 8477
// mikhailStatus = 3 ;
8469: LD_ADDR_EXP 21
8473: PUSH
8474: LD_INT 3
8476: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8477: LD_EXP 8
8481: PPUSH
8482: CALL_OW 64
// end ;
8486: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8487: LD_EXP 21
8491: PUSH
8492: LD_INT 3
8494: EQUAL
8495: PUSH
8496: LD_EXP 8
8500: PPUSH
8501: CALL_OW 255
8505: PUSH
8506: LD_INT 6
8508: EQUAL
8509: AND
8510: IFFALSE 8703
8512: GO 8514
8514: DISABLE
8515: LD_INT 0
8517: PPUSH
8518: PPUSH
// begin enable ;
8519: ENABLE
// if IsOk ( Mikhail ) then
8520: LD_EXP 8
8524: PPUSH
8525: CALL_OW 302
8529: IFFALSE 8703
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) diff [ JMM , Bobby , Cyrus , Lisa ] ;
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_EXP 8
8540: PPUSH
8541: LD_INT 22
8543: PUSH
8544: LD_INT 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 1
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PPUSH
8565: CALL_OW 69
8569: PPUSH
8570: CALL 10452 0 2
8574: PUSH
8575: LD_EXP 1
8579: PUSH
8580: LD_EXP 2
8584: PUSH
8585: LD_EXP 3
8589: PUSH
8590: LD_EXP 4
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: DIFF
8601: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 10 then
8602: LD_VAR 0 2
8606: PPUSH
8607: LD_EXP 8
8611: PPUSH
8612: CALL_OW 296
8616: PUSH
8617: LD_INT 10
8619: LESS
8620: IFFALSE 8703
// begin if GetSex ( attacker ) = sex_male then
8622: LD_VAR 0 2
8626: PPUSH
8627: CALL_OW 258
8631: PUSH
8632: LD_INT 1
8634: EQUAL
8635: IFFALSE 8671
// begin disable ;
8637: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8638: LD_VAR 0 2
8642: PPUSH
8643: LD_STRING D7a-Sol1-1
8645: PPUSH
8646: CALL_OW 88
// wait ( 0 0$2 ) ;
8650: LD_INT 70
8652: PPUSH
8653: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8657: LD_VAR 0 2
8661: PPUSH
8662: LD_STRING D7a-Sol1-1a
8664: PPUSH
8665: CALL_OW 88
// end else
8669: GO 8703
// begin disable ;
8671: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8672: LD_VAR 0 2
8676: PPUSH
8677: LD_STRING D7a-FSol1-1
8679: PPUSH
8680: CALL_OW 88
// wait ( 0 0$2 ) ;
8684: LD_INT 70
8686: PPUSH
8687: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8691: LD_VAR 0 2
8695: PPUSH
8696: LD_STRING D7a-FSol1-1a
8698: PPUSH
8699: CALL_OW 88
// end ; end ; end ; end ;
8703: PPOPN 2
8705: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8706: LD_EXP 27
8710: PUSH
8711: LD_INT 1
8713: EQUAL
8714: PUSH
8715: LD_INT 22
8717: PPUSH
8718: LD_INT 22
8720: PUSH
8721: LD_INT 3
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 21
8730: PUSH
8731: LD_INT 1
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PPUSH
8742: CALL_OW 70
8746: PUSH
8747: LD_INT 2
8749: GREATER
8750: AND
8751: PUSH
8752: LD_INT 22
8754: PPUSH
8755: LD_INT 22
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: LD_INT 21
8770: PUSH
8771: LD_INT 1
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 59
8780: PUSH
8781: EMPTY
8782: LIST
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: LIST
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 70
8797: PUSH
8798: LD_INT 0
8800: EQUAL
8801: AND
8802: IFFALSE 8817
8804: GO 8806
8806: DISABLE
// SetSide ( dep1 , 3 ) ;
8807: LD_INT 1
8809: PPUSH
8810: LD_INT 3
8812: PPUSH
8813: CALL_OW 235
8817: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8818: LD_EXP 30
8822: PUSH
8823: LD_INT 1
8825: EQUAL
8826: PUSH
8827: LD_INT 22
8829: PUSH
8830: LD_INT 0
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: PUSH
8837: LD_INT 25
8839: PUSH
8840: LD_INT 14
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 69
8855: PUSH
8856: LD_INT 0
8858: EQUAL
8859: AND
8860: IFFALSE 8961
8862: GO 8864
8864: DISABLE
8865: LD_INT 0
8867: PPUSH
8868: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8869: LD_ADDR_VAR 0 2
8873: PUSH
8874: LD_INT 22
8876: PUSH
8877: LD_INT 1
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PUSH
8884: LD_INT 21
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 23
8896: PUSH
8897: LD_INT 1
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL_OW 69
8913: ST_TO_ADDR
// for i in tmp do
8914: LD_ADDR_VAR 0 1
8918: PUSH
8919: LD_VAR 0 2
8923: PUSH
8924: FOR_IN
8925: IFFALSE 8952
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8927: LD_VAR 0 1
8931: PPUSH
8932: LD_INT 1
8934: PPUSH
8935: LD_INT 4
8937: PPUSH
8938: CALL_OW 12
8942: PPUSH
8943: LD_INT 300
8945: PPUSH
8946: CALL_OW 492
8950: GO 8924
8952: POP
8953: POP
// SetAchievement ( ACH_TIGER ) ;
8954: LD_STRING ACH_TIGER
8956: PPUSH
8957: CALL_OW 543
// end ;
8961: PPOPN 2
8963: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8964: LD_INT 22
8966: PUSH
8967: LD_INT 1
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: LD_INT 34
8976: PUSH
8977: LD_INT 51
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: PUSH
8993: LD_INT 2
8995: GREATEREQUAL
8996: IFFALSE 9008
8998: GO 9000
9000: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
9001: LD_STRING ACH_CARGO
9003: PPUSH
9004: CALL_OW 543
9008: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
9009: LD_INT 0
9011: PPUSH
9012: PPUSH
9013: PPUSH
// for i = 1 to count do
9014: LD_ADDR_VAR 0 8
9018: PUSH
9019: DOUBLE
9020: LD_INT 1
9022: DEC
9023: ST_TO_ADDR
9024: LD_VAR 0 6
9028: PUSH
9029: FOR_TO
9030: IFFALSE 9111
// begin uc_side = side ;
9032: LD_ADDR_OWVAR 20
9036: PUSH
9037: LD_VAR 0 1
9041: ST_TO_ADDR
// uc_nation = nation ;
9042: LD_ADDR_OWVAR 21
9046: PUSH
9047: LD_VAR 0 2
9051: ST_TO_ADDR
// hc_gallery =  ;
9052: LD_ADDR_OWVAR 33
9056: PUSH
9057: LD_STRING 
9059: ST_TO_ADDR
// hc_name =  ;
9060: LD_ADDR_OWVAR 26
9064: PUSH
9065: LD_STRING 
9067: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9068: LD_INT 0
9070: PPUSH
9071: LD_VAR 0 5
9075: PPUSH
9076: LD_VAR 0 4
9080: PPUSH
9081: CALL_OW 380
// un = CreateHuman ;
9085: LD_ADDR_VAR 0 9
9089: PUSH
9090: CALL_OW 44
9094: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9095: LD_VAR 0 9
9099: PPUSH
9100: LD_VAR 0 3
9104: PPUSH
9105: CALL_OW 52
// end ;
9109: GO 9029
9111: POP
9112: POP
// end ;
9113: LD_VAR 0 7
9117: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9118: LD_INT 0
9120: PPUSH
9121: PPUSH
9122: PPUSH
// uc_side := GetSide ( b ) ;
9123: LD_ADDR_OWVAR 20
9127: PUSH
9128: LD_VAR 0 2
9132: PPUSH
9133: CALL_OW 255
9137: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9138: LD_ADDR_OWVAR 21
9142: PUSH
9143: LD_VAR 0 2
9147: PPUSH
9148: CALL_OW 248
9152: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9153: LD_INT 0
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: LD_VAR 0 1
9163: PPUSH
9164: CALL_OW 380
// un = CreateHuman ;
9168: LD_ADDR_VAR 0 4
9172: PUSH
9173: CALL_OW 44
9177: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9178: LD_ADDR_VAR 0 5
9182: PUSH
9183: LD_VAR 0 2
9187: PPUSH
9188: CALL_OW 254
9192: PUSH
9193: LD_INT 3
9195: MINUS
9196: ST_TO_ADDR
// if dir < 0 then
9197: LD_VAR 0 5
9201: PUSH
9202: LD_INT 0
9204: LESS
9205: IFFALSE 9221
// dir := 6 + dir ;
9207: LD_ADDR_VAR 0 5
9211: PUSH
9212: LD_INT 6
9214: PUSH
9215: LD_VAR 0 5
9219: PLUS
9220: ST_TO_ADDR
// SetDir ( un , dir ) ;
9221: LD_VAR 0 4
9225: PPUSH
9226: LD_VAR 0 5
9230: PPUSH
9231: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9235: LD_VAR 0 4
9239: PPUSH
9240: LD_VAR 0 2
9244: PPUSH
9245: CALL_OW 52
// end ;
9249: LD_VAR 0 3
9253: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9254: LD_INT 0
9256: PPUSH
9257: PPUSH
9258: PPUSH
9259: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9260: LD_ADDR_VAR 0 7
9264: PUSH
9265: LD_INT 22
9267: PUSH
9268: LD_VAR 0 1
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 25
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 24
9289: PUSH
9290: LD_INT 1000
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: PPUSH
9302: CALL_OW 69
9306: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9307: LD_ADDR_VAR 0 5
9311: PUSH
9312: LD_VAR 0 3
9316: PPUSH
9317: LD_INT 22
9319: PUSH
9320: LD_VAR 0 1
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 21
9331: PUSH
9332: LD_INT 3
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 3
9341: PUSH
9342: LD_INT 24
9344: PUSH
9345: LD_INT 1000
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: PUSH
9361: EMPTY
9362: LIST
9363: PPUSH
9364: CALL_OW 70
9368: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9369: LD_VAR 0 5
9373: NOT
9374: PUSH
9375: LD_VAR 0 7
9379: NOT
9380: AND
9381: IFFALSE 9385
// exit ;
9383: GO 9581
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9385: LD_VAR 0 5
9389: NOT
9390: PUSH
9391: LD_VAR 0 7
9395: PPUSH
9396: LD_INT 3
9398: PUSH
9399: LD_INT 54
9401: PUSH
9402: EMPTY
9403: LIST
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PPUSH
9409: CALL_OW 72
9413: AND
9414: PUSH
9415: LD_VAR 0 2
9419: PPUSH
9420: CALL_OW 302
9424: AND
9425: IFFALSE 9459
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9427: LD_VAR 0 7
9431: PPUSH
9432: LD_INT 3
9434: PUSH
9435: LD_INT 54
9437: PUSH
9438: EMPTY
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PPUSH
9445: CALL_OW 72
9449: PPUSH
9450: LD_VAR 0 2
9454: PPUSH
9455: CALL_OW 120
// if buildingsList then
9459: LD_VAR 0 5
9463: IFFALSE 9581
// begin for i in engineerOkList do
9465: LD_ADDR_VAR 0 6
9469: PUSH
9470: LD_VAR 0 7
9474: PUSH
9475: FOR_IN
9476: IFFALSE 9579
// if IsInUnit ( i ) then
9478: LD_VAR 0 6
9482: PPUSH
9483: CALL_OW 310
9487: IFFALSE 9500
// ComExitBuilding ( i ) else
9489: LD_VAR 0 6
9493: PPUSH
9494: CALL_OW 122
9498: GO 9577
// if GetLives ( i ) > 650 then
9500: LD_VAR 0 6
9504: PPUSH
9505: CALL_OW 256
9509: PUSH
9510: LD_INT 650
9512: GREATER
9513: IFFALSE 9541
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9515: LD_VAR 0 6
9519: PPUSH
9520: LD_VAR 0 5
9524: PPUSH
9525: LD_VAR 0 6
9529: PPUSH
9530: CALL_OW 74
9534: PPUSH
9535: CALL_OW 130
9539: GO 9577
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9541: LD_VAR 0 6
9545: PPUSH
9546: LD_INT 56
9548: PPUSH
9549: LD_INT 10
9551: PPUSH
9552: CALL_OW 297
9556: PUSH
9557: LD_INT 8
9559: GREATER
9560: IFFALSE 9577
// ComMoveXY ( i , 56 , 10 ) ;
9562: LD_VAR 0 6
9566: PPUSH
9567: LD_INT 56
9569: PPUSH
9570: LD_INT 10
9572: PPUSH
9573: CALL_OW 111
9577: GO 9475
9579: POP
9580: POP
// end ; end ;
9581: LD_VAR 0 4
9585: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9586: LD_INT 0
9588: PPUSH
9589: PPUSH
9590: PPUSH
9591: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9592: LD_ADDR_VAR 0 6
9596: PUSH
9597: LD_INT 22
9599: PUSH
9600: LD_VAR 0 1
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 25
9611: PUSH
9612: LD_INT 4
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 24
9621: PUSH
9622: LD_INT 250
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: PPUSH
9634: CALL_OW 69
9638: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9639: LD_ADDR_VAR 0 8
9643: PUSH
9644: LD_VAR 0 3
9648: PPUSH
9649: LD_INT 22
9651: PUSH
9652: LD_VAR 0 1
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: LD_INT 21
9663: PUSH
9664: LD_INT 1
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 3
9673: PUSH
9674: LD_INT 24
9676: PUSH
9677: LD_INT 650
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: PPUSH
9693: CALL_OW 70
9697: ST_TO_ADDR
// if not damageUnits and not sciList then
9698: LD_VAR 0 8
9702: NOT
9703: PUSH
9704: LD_VAR 0 6
9708: NOT
9709: AND
9710: IFFALSE 9714
// exit ;
9712: GO 9853
// if damageUnits then
9714: LD_VAR 0 8
9718: IFFALSE 9797
// begin for i in sciList do
9720: LD_ADDR_VAR 0 7
9724: PUSH
9725: LD_VAR 0 6
9729: PUSH
9730: FOR_IN
9731: IFFALSE 9793
// if IsInUnit ( i ) then
9733: LD_VAR 0 7
9737: PPUSH
9738: CALL_OW 310
9742: IFFALSE 9755
// ComExitBuilding ( i ) else
9744: LD_VAR 0 7
9748: PPUSH
9749: CALL_OW 122
9753: GO 9791
// if not HasTask ( i ) then
9755: LD_VAR 0 7
9759: PPUSH
9760: CALL_OW 314
9764: NOT
9765: IFFALSE 9791
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9767: LD_VAR 0 7
9771: PPUSH
9772: LD_VAR 0 8
9776: PPUSH
9777: LD_VAR 0 7
9781: PPUSH
9782: CALL_OW 74
9786: PPUSH
9787: CALL_OW 128
9791: GO 9730
9793: POP
9794: POP
// end else
9795: GO 9853
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9797: LD_VAR 0 6
9801: PPUSH
9802: LD_INT 3
9804: PUSH
9805: LD_INT 54
9807: PUSH
9808: EMPTY
9809: LIST
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PPUSH
9815: CALL_OW 72
9819: IFFALSE 9853
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9821: LD_VAR 0 6
9825: PPUSH
9826: LD_INT 3
9828: PUSH
9829: LD_INT 54
9831: PUSH
9832: EMPTY
9833: LIST
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PPUSH
9839: CALL_OW 72
9843: PPUSH
9844: LD_VAR 0 4
9848: PPUSH
9849: CALL_OW 120
// end ;
9853: LD_VAR 0 5
9857: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9858: LD_INT 0
9860: PPUSH
9861: PPUSH
9862: PPUSH
9863: PPUSH
// if not defendersList then
9864: LD_VAR 0 3
9868: NOT
9869: IFFALSE 9873
// exit ;
9871: GO 10255
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9873: LD_ADDR_VAR 0 7
9877: PUSH
9878: LD_VAR 0 1
9882: PPUSH
9883: LD_INT 22
9885: PUSH
9886: LD_VAR 0 2
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 2
9897: PUSH
9898: LD_INT 21
9900: PUSH
9901: LD_INT 2
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 21
9910: PUSH
9911: LD_INT 1
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: LIST
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PPUSH
9927: CALL_OW 70
9931: ST_TO_ADDR
// if enemy then
9932: LD_VAR 0 7
9936: IFFALSE 10157
// begin for i in defendersList do
9938: LD_ADDR_VAR 0 6
9942: PUSH
9943: LD_VAR 0 3
9947: PUSH
9948: FOR_IN
9949: IFFALSE 10153
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9951: LD_VAR 0 6
9955: PPUSH
9956: CALL_OW 310
9960: PUSH
9961: LD_VAR 0 6
9965: PPUSH
9966: CALL_OW 256
9970: PUSH
9971: LD_INT 500
9973: GREATER
9974: AND
9975: IFFALSE 9988
// ComExitBuilding ( i ) else
9977: LD_VAR 0 6
9981: PPUSH
9982: CALL_OW 122
9986: GO 10151
// if GetLives ( i ) > 650 then
9988: LD_VAR 0 6
9992: PPUSH
9993: CALL_OW 256
9997: PUSH
9998: LD_INT 650
10000: GREATER
10001: IFFALSE 10054
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
10003: LD_ADDR_VAR 0 8
10007: PUSH
10008: LD_VAR 0 7
10012: PPUSH
10013: LD_VAR 0 6
10017: PPUSH
10018: CALL_OW 74
10022: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
10023: LD_VAR 0 6
10027: PPUSH
10028: LD_VAR 0 8
10032: PPUSH
10033: CALL_OW 250
10037: PPUSH
10038: LD_VAR 0 8
10042: PPUSH
10043: CALL_OW 251
10047: PPUSH
10048: CALL_OW 114
// end else
10052: GO 10151
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10054: LD_INT 22
10056: PUSH
10057: LD_INT 3
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 25
10066: PUSH
10067: LD_INT 4
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PPUSH
10078: CALL_OW 69
10082: IFFALSE 10122
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10084: LD_VAR 0 6
10088: PPUSH
10089: LD_INT 56
10091: PPUSH
10092: LD_INT 10
10094: PPUSH
10095: CALL_OW 297
10099: PUSH
10100: LD_INT 8
10102: GREATER
10103: IFFALSE 10120
// ComMoveXY ( i , 56 , 10 ) ;
10105: LD_VAR 0 6
10109: PPUSH
10110: LD_INT 56
10112: PPUSH
10113: LD_INT 10
10115: PPUSH
10116: CALL_OW 111
// end else
10120: GO 10151
// if GetLives ( i ) <= 500 then
10122: LD_VAR 0 6
10126: PPUSH
10127: CALL_OW 256
10131: PUSH
10132: LD_INT 500
10134: LESSEQUAL
10135: IFFALSE 10151
// ComEnterUnit ( i , building ) ;
10137: LD_VAR 0 6
10141: PPUSH
10142: LD_VAR 0 4
10146: PPUSH
10147: CALL_OW 120
// end ;
10151: GO 9948
10153: POP
10154: POP
// end else
10155: GO 10255
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 56
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: EMPTY
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 1000
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: IFFALSE 10255
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10202: LD_VAR 0 3
10206: PPUSH
10207: LD_INT 56
10209: PUSH
10210: EMPTY
10211: LIST
10212: PUSH
10213: LD_INT 3
10215: PUSH
10216: LD_INT 60
10218: PUSH
10219: EMPTY
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: PUSH
10226: LD_INT 24
10228: PUSH
10229: LD_INT 1000
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: PPUSH
10241: CALL_OW 72
10245: PPUSH
10246: LD_VAR 0 4
10250: PPUSH
10251: CALL_OW 120
// end ;
10255: LD_VAR 0 5
10259: RET
// export function RussianTrap ; var i ; begin
10260: LD_INT 0
10262: PPUSH
10263: PPUSH
// if GetSide ( Brian ) = 4 then
10264: LD_EXP 6
10268: PPUSH
10269: CALL_OW 255
10273: PUSH
10274: LD_INT 4
10276: EQUAL
10277: IFFALSE 10300
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10279: LD_EXP 6
10283: PUSH
10284: LD_EXP 7
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PPUSH
10293: LD_INT 0
10295: PPUSH
10296: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10300: LD_ADDR_VAR 0 2
10304: PUSH
10305: LD_INT 22
10307: PUSH
10308: LD_INT 3
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 21
10317: PUSH
10318: LD_INT 1
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PPUSH
10329: CALL_OW 69
10333: PUSH
10334: FOR_IN
10335: IFFALSE 10445
// begin ComExitBuilding ( i ) ;
10337: LD_VAR 0 2
10341: PPUSH
10342: CALL_OW 122
// wait ( 0 0$1 ) ;
10346: LD_INT 35
10348: PPUSH
10349: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10353: LD_VAR 0 2
10357: PPUSH
10358: LD_INT 120
10360: PPUSH
10361: LD_INT 56
10363: PPUSH
10364: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10368: LD_VAR 0 2
10372: PPUSH
10373: LD_INT 111
10375: PPUSH
10376: LD_INT 37
10378: PPUSH
10379: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10383: LD_INT 33
10385: PPUSH
10386: CALL_OW 255
10390: PUSH
10391: LD_INT 3
10393: EQUAL
10394: PUSH
10395: LD_INT 33
10397: PPUSH
10398: CALL_OW 302
10402: AND
10403: IFFALSE 10419
// AddComEnterUnit ( i , arm2 ) else
10405: LD_VAR 0 2
10409: PPUSH
10410: LD_INT 33
10412: PPUSH
10413: CALL_OW 180
10417: GO 10443
// begin AddComCrawl ( i ) ;
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10428: LD_VAR 0 2
10432: PPUSH
10433: LD_INT 109
10435: PPUSH
10436: LD_INT 30
10438: PPUSH
10439: CALL_OW 174
// end ; end ;
10443: GO 10334
10445: POP
10446: POP
// end ;
10447: LD_VAR 0 1
10451: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10452: LD_INT 0
10454: PPUSH
10455: PPUSH
10456: PPUSH
10457: PPUSH
10458: PPUSH
// nearestDist := 1000 ;
10459: LD_ADDR_VAR 0 4
10463: PUSH
10464: LD_INT 1000
10466: ST_TO_ADDR
// nearestUn := un ;
10467: LD_ADDR_VAR 0 5
10471: PUSH
10472: LD_VAR 0 1
10476: ST_TO_ADDR
// for sold in units do
10477: LD_ADDR_VAR 0 6
10481: PUSH
10482: LD_VAR 0 2
10486: PUSH
10487: FOR_IN
10488: IFFALSE 10544
// begin dist := GetDistUnits ( un , sold ) ;
10490: LD_ADDR_VAR 0 7
10494: PUSH
10495: LD_VAR 0 1
10499: PPUSH
10500: LD_VAR 0 6
10504: PPUSH
10505: CALL_OW 296
10509: ST_TO_ADDR
// if dist < nearestDist then
10510: LD_VAR 0 7
10514: PUSH
10515: LD_VAR 0 4
10519: LESS
10520: IFFALSE 10542
// begin nearestUn := sold ;
10522: LD_ADDR_VAR 0 5
10526: PUSH
10527: LD_VAR 0 6
10531: ST_TO_ADDR
// nearestDist := dist ;
10532: LD_ADDR_VAR 0 4
10536: PUSH
10537: LD_VAR 0 7
10541: ST_TO_ADDR
// end ; end ;
10542: GO 10487
10544: POP
10545: POP
// result := NearestUn ;
10546: LD_ADDR_VAR 0 3
10550: PUSH
10551: LD_VAR 0 5
10555: ST_TO_ADDR
// end ;
10556: LD_VAR 0 3
10560: RET
// export function PrepareDifficulty ; begin
10561: LD_INT 0
10563: PPUSH
// if Difficulty = 1 then
10564: LD_OWVAR 67
10568: PUSH
10569: LD_INT 1
10571: EQUAL
10572: IFFALSE 10635
// begin RemoveUnit ( brw2 ) ;
10574: LD_INT 9
10576: PPUSH
10577: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10581: LD_INT 30
10583: PPUSH
10584: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10588: LD_INT 52
10590: PPUSH
10591: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10595: LD_INT 63
10597: PPUSH
10598: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10602: LD_INT 5
10604: PUSH
10605: LD_INT 4
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: LD_INT 60
10614: PPUSH
10615: CALL_OW 240
// RuSoldMinLevel = 0 ;
10619: LD_ADDR_EXP 13
10623: PUSH
10624: LD_INT 0
10626: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10627: LD_ADDR_EXP 14
10631: PUSH
10632: LD_INT 1
10634: ST_TO_ADDR
// end ; if Difficulty = 2 then
10635: LD_OWVAR 67
10639: PUSH
10640: LD_INT 2
10642: EQUAL
10643: IFFALSE 10685
// begin RemoveUnit ( brw4 ) ;
10645: LD_INT 52
10647: PPUSH
10648: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10652: LD_INT 5
10654: PUSH
10655: LD_INT 4
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PPUSH
10662: LD_INT 50
10664: PPUSH
10665: CALL_OW 240
// RuSoldMinLevel = 1 ;
10669: LD_ADDR_EXP 13
10673: PUSH
10674: LD_INT 1
10676: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10677: LD_ADDR_EXP 14
10681: PUSH
10682: LD_INT 2
10684: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10685: LD_OWVAR 67
10689: PUSH
10690: LD_INT 3
10692: GREATEREQUAL
10693: IFFALSE 10728
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10695: LD_INT 5
10697: PUSH
10698: LD_INT 4
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PPUSH
10705: LD_INT 40
10707: PPUSH
10708: CALL_OW 240
// RuSoldMinLevel = 2 ;
10712: LD_ADDR_EXP 13
10716: PUSH
10717: LD_INT 2
10719: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10720: LD_ADDR_EXP 14
10724: PUSH
10725: LD_INT 3
10727: ST_TO_ADDR
// end ; end ;
10728: LD_VAR 0 1
10732: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10733: LD_INT 0
10735: PPUSH
10736: PPUSH
10737: PPUSH
// if not vehicles then
10738: LD_VAR 0 1
10742: NOT
10743: IFFALSE 10747
// exit ;
10745: GO 10877
// tmp := [ ] ;
10747: LD_ADDR_VAR 0 5
10751: PUSH
10752: EMPTY
10753: ST_TO_ADDR
// for i in vehicles do
10754: LD_ADDR_VAR 0 4
10758: PUSH
10759: LD_VAR 0 1
10763: PUSH
10764: FOR_IN
10765: IFFALSE 10861
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10767: LD_ADDR_VAR 0 5
10771: PUSH
10772: LD_VAR 0 5
10776: PPUSH
10777: LD_VAR 0 5
10781: PUSH
10782: LD_INT 1
10784: PLUS
10785: PPUSH
10786: LD_VAR 0 4
10790: PPUSH
10791: CALL_OW 265
10795: PUSH
10796: LD_VAR 0 4
10800: PPUSH
10801: CALL_OW 262
10805: PUSH
10806: LD_VAR 0 4
10810: PPUSH
10811: CALL_OW 263
10815: PUSH
10816: LD_VAR 0 4
10820: PPUSH
10821: CALL_OW 264
10825: PUSH
10826: LD_VAR 0 4
10830: PPUSH
10831: CALL_OW 261
10835: PUSH
10836: LD_VAR 0 4
10840: PPUSH
10841: CALL_OW 256
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 1
10858: ST_TO_ADDR
10859: GO 10764
10861: POP
10862: POP
// SaveVariable ( tmp , ident ) ;
10863: LD_VAR 0 5
10867: PPUSH
10868: LD_VAR 0 2
10872: PPUSH
10873: CALL_OW 39
// end ; end_of_file
10877: LD_VAR 0 3
10881: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10882: LD_INT 0
10884: PPUSH
10885: PPUSH
10886: PPUSH
// prefix := 01_ ;
10887: LD_ADDR_VAR 0 3
10891: PUSH
10892: LD_STRING 01_
10894: ST_TO_ADDR
// uc_side := 1 ;
10895: LD_ADDR_OWVAR 20
10899: PUSH
10900: LD_INT 1
10902: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10903: LD_ADDR_EXP 1
10907: PUSH
10908: LD_STRING JMM
10910: PPUSH
10911: LD_EXP 34
10915: NOT
10916: PPUSH
10917: LD_VAR 0 3
10921: PPUSH
10922: CALL 37259 0 3
10926: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10927: LD_ADDR_VAR 0 2
10931: PUSH
10932: LD_STRING 01_JMMLifePoints_1
10934: PPUSH
10935: LD_INT 1000
10937: PPUSH
10938: CALL_OW 30
10942: ST_TO_ADDR
// if plive < 250 then
10943: LD_VAR 0 2
10947: PUSH
10948: LD_INT 250
10950: LESS
10951: IFFALSE 10961
// plive := 300 ;
10953: LD_ADDR_VAR 0 2
10957: PUSH
10958: LD_INT 300
10960: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10961: LD_EXP 1
10965: PPUSH
10966: LD_VAR 0 2
10970: PPUSH
10971: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10975: LD_ADDR_EXP 9
10979: PUSH
10980: LD_STRING Powell
10982: PPUSH
10983: CALL_OW 25
10987: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10988: LD_ADDR_EXP 2
10992: PUSH
10993: LD_STRING Bobby
10995: PPUSH
10996: LD_EXP 34
11000: NOT
11001: PPUSH
11002: LD_VAR 0 3
11006: PPUSH
11007: CALL 37259 0 3
11011: ST_TO_ADDR
// if Bobby then
11012: LD_EXP 2
11016: IFFALSE 11066
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
11018: LD_ADDR_VAR 0 2
11022: PUSH
11023: LD_STRING 01_BobbyLifePoints_1
11025: PPUSH
11026: LD_INT 1000
11028: PPUSH
11029: CALL_OW 30
11033: ST_TO_ADDR
// if plive < 250 then
11034: LD_VAR 0 2
11038: PUSH
11039: LD_INT 250
11041: LESS
11042: IFFALSE 11052
// plive := 300 ;
11044: LD_ADDR_VAR 0 2
11048: PUSH
11049: LD_INT 300
11051: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11052: LD_EXP 2
11056: PPUSH
11057: LD_VAR 0 2
11061: PPUSH
11062: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11066: LD_ADDR_EXP 3
11070: PUSH
11071: LD_STRING Cyrus
11073: PPUSH
11074: LD_EXP 34
11078: NOT
11079: PPUSH
11080: LD_VAR 0 3
11084: PPUSH
11085: CALL 37259 0 3
11089: ST_TO_ADDR
// if Cyrus then
11090: LD_EXP 3
11094: IFFALSE 11144
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11096: LD_ADDR_VAR 0 2
11100: PUSH
11101: LD_STRING 01_CyrusLifePoints_1
11103: PPUSH
11104: LD_INT 1000
11106: PPUSH
11107: CALL_OW 30
11111: ST_TO_ADDR
// if plive < 250 then
11112: LD_VAR 0 2
11116: PUSH
11117: LD_INT 250
11119: LESS
11120: IFFALSE 11130
// plive := 300 ;
11122: LD_ADDR_VAR 0 2
11126: PUSH
11127: LD_INT 300
11129: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11130: LD_EXP 3
11134: PPUSH
11135: LD_VAR 0 2
11139: PPUSH
11140: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11144: LD_ADDR_EXP 5
11148: PUSH
11149: LD_STRING Khatam
11151: PPUSH
11152: CALL_OW 25
11156: ST_TO_ADDR
// uc_side := 4 ;
11157: LD_ADDR_OWVAR 20
11161: PUSH
11162: LD_INT 4
11164: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11165: LD_ADDR_EXP 4
11169: PUSH
11170: LD_STRING Lisa
11172: PPUSH
11173: CALL_OW 25
11177: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11178: LD_EXP 1
11182: PPUSH
11183: LD_INT 3
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11193: LD_EXP 2
11197: PPUSH
11198: LD_INT 3
11200: PPUSH
11201: LD_INT 0
11203: PPUSH
11204: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11208: LD_EXP 3
11212: PPUSH
11213: LD_INT 3
11215: PPUSH
11216: LD_INT 0
11218: PPUSH
11219: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11223: LD_EXP 4
11227: PPUSH
11228: LD_INT 5
11230: PPUSH
11231: LD_INT 0
11233: PPUSH
11234: CALL_OW 49
// ComCrawl ( Lisa ) ;
11238: LD_EXP 4
11242: PPUSH
11243: CALL_OW 137
// end ;
11247: LD_VAR 0 1
11251: RET
// export function PrepareLisSquad ; var i , un ; begin
11252: LD_INT 0
11254: PPUSH
11255: PPUSH
11256: PPUSH
// uc_side := 4 ;
11257: LD_ADDR_OWVAR 20
11261: PUSH
11262: LD_INT 4
11264: ST_TO_ADDR
// uc_nation := 1 ;
11265: LD_ADDR_OWVAR 21
11269: PUSH
11270: LD_INT 1
11272: ST_TO_ADDR
// hc_class := 2 ;
11273: LD_ADDR_OWVAR 28
11277: PUSH
11278: LD_INT 2
11280: ST_TO_ADDR
// hc_sex := sex_male ;
11281: LD_ADDR_OWVAR 27
11285: PUSH
11286: LD_INT 1
11288: ST_TO_ADDR
// hc_gallery :=  ;
11289: LD_ADDR_OWVAR 33
11293: PUSH
11294: LD_STRING 
11296: ST_TO_ADDR
// hc_name :=  ;
11297: LD_ADDR_OWVAR 26
11301: PUSH
11302: LD_STRING 
11304: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11305: LD_ADDR_OWVAR 30
11309: PUSH
11310: LD_INT 0
11312: PUSH
11313: LD_INT 1
11315: PUSH
11316: LD_INT 0
11318: PUSH
11319: LD_INT 0
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11328: LD_ADDR_OWVAR 31
11332: PUSH
11333: LD_INT 1
11335: PUSH
11336: LD_INT 2
11338: PUSH
11339: LD_INT 0
11341: PUSH
11342: LD_INT 0
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: ST_TO_ADDR
// un := CreateHuman ;
11351: LD_ADDR_VAR 0 3
11355: PUSH
11356: CALL_OW 44
11360: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11361: LD_VAR 0 3
11365: PPUSH
11366: LD_INT 6
11368: PPUSH
11369: LD_INT 0
11371: PPUSH
11372: CALL_OW 49
// hc_sex := sex_female ;
11376: LD_ADDR_OWVAR 27
11380: PUSH
11381: LD_INT 2
11383: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11384: LD_ADDR_OWVAR 30
11388: PUSH
11389: LD_INT 0
11391: PUSH
11392: LD_INT 0
11394: PUSH
11395: LD_INT 0
11397: PUSH
11398: LD_INT 1
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11407: LD_ADDR_OWVAR 31
11411: PUSH
11412: LD_INT 0
11414: PUSH
11415: LD_INT 1
11417: PUSH
11418: LD_INT 0
11420: PUSH
11421: LD_INT 1
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: ST_TO_ADDR
// un := CreateHuman ;
11430: LD_ADDR_VAR 0 3
11434: PUSH
11435: CALL_OW 44
11439: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11440: LD_VAR 0 3
11444: PPUSH
11445: LD_INT 6
11447: PPUSH
11448: LD_INT 0
11450: PPUSH
11451: CALL_OW 49
// if not Bobby and not Cyrus then
11455: LD_EXP 2
11459: NOT
11460: PUSH
11461: LD_EXP 3
11465: NOT
11466: AND
11467: IFFALSE 11556
// begin hc_class := 1 ;
11469: LD_ADDR_OWVAR 28
11473: PUSH
11474: LD_INT 1
11476: ST_TO_ADDR
// hc_sex := sex_male ;
11477: LD_ADDR_OWVAR 27
11481: PUSH
11482: LD_INT 1
11484: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11485: LD_ADDR_OWVAR 30
11489: PUSH
11490: LD_INT 2
11492: PUSH
11493: LD_INT 3
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: LD_INT 0
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11508: LD_ADDR_OWVAR 31
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: LD_INT 3
11518: PUSH
11519: LD_INT 1
11521: PUSH
11522: LD_INT 0
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: ST_TO_ADDR
// un := CreateHuman ;
11531: LD_ADDR_VAR 0 3
11535: PUSH
11536: CALL_OW 44
11540: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11541: LD_VAR 0 3
11545: PPUSH
11546: LD_INT 31
11548: PPUSH
11549: LD_INT 0
11551: PPUSH
11552: CALL_OW 49
// end ; InitHc ;
11556: CALL_OW 19
// end ;
11560: LD_VAR 0 1
11564: RET
// export function PrepareOtherAmericans ; begin
11565: LD_INT 0
11567: PPUSH
// uc_side := 4 ;
11568: LD_ADDR_OWVAR 20
11572: PUSH
11573: LD_INT 4
11575: ST_TO_ADDR
// uc_nation := 1 ;
11576: LD_ADDR_OWVAR 21
11580: PUSH
11581: LD_INT 1
11583: ST_TO_ADDR
// hc_gallery :=  ;
11584: LD_ADDR_OWVAR 33
11588: PUSH
11589: LD_STRING 
11591: ST_TO_ADDR
// hc_name := Tom Garvin ;
11592: LD_ADDR_OWVAR 26
11596: PUSH
11597: LD_STRING Tom Garvin
11599: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11600: LD_INT 1
11602: PPUSH
11603: LD_INT 1
11605: PPUSH
11606: LD_INT 2
11608: PPUSH
11609: CALL_OW 380
// Brian := CreateHuman ;
11613: LD_ADDR_EXP 6
11617: PUSH
11618: CALL_OW 44
11622: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11623: LD_EXP 6
11627: PPUSH
11628: LD_INT 10
11630: PPUSH
11631: LD_INT 0
11633: PPUSH
11634: CALL_OW 49
// hc_name := Jerry White ;
11638: LD_ADDR_OWVAR 26
11642: PUSH
11643: LD_STRING Jerry White
11645: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11646: LD_INT 1
11648: PPUSH
11649: LD_INT 3
11651: PPUSH
11652: LD_INT 2
11654: PPUSH
11655: CALL_OW 380
// Jerry := CreateHuman ;
11659: LD_ADDR_EXP 7
11663: PUSH
11664: CALL_OW 44
11668: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11669: LD_EXP 7
11673: PPUSH
11674: LD_INT 10
11676: PPUSH
11677: LD_INT 0
11679: PPUSH
11680: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11684: LD_EXP 6
11688: PUSH
11689: LD_EXP 7
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PPUSH
11698: CALL_OW 140
// end ;
11702: LD_VAR 0 1
11706: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11707: LD_INT 0
11709: PPUSH
11710: PPUSH
11711: PPUSH
11712: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11713: LD_ADDR_VAR 0 4
11717: PUSH
11718: LD_INT 16
11720: PPUSH
11721: LD_INT 0
11723: PPUSH
11724: CALL_OW 517
11728: ST_TO_ADDR
// for i = 1 to 6 do
11729: LD_ADDR_VAR 0 2
11733: PUSH
11734: DOUBLE
11735: LD_INT 1
11737: DEC
11738: ST_TO_ADDR
11739: LD_INT 6
11741: PUSH
11742: FOR_TO
11743: IFFALSE 11889
// begin uc_side := 4 ;
11745: LD_ADDR_OWVAR 20
11749: PUSH
11750: LD_INT 4
11752: ST_TO_ADDR
// uc_nation := 1 ;
11753: LD_ADDR_OWVAR 21
11757: PUSH
11758: LD_INT 1
11760: ST_TO_ADDR
// hc_gallery :=  ;
11761: LD_ADDR_OWVAR 33
11765: PUSH
11766: LD_STRING 
11768: ST_TO_ADDR
// hc_name :=  ;
11769: LD_ADDR_OWVAR 26
11773: PUSH
11774: LD_STRING 
11776: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11777: LD_INT 0
11779: PPUSH
11780: LD_INT 1
11782: PUSH
11783: LD_INT 1
11785: PUSH
11786: LD_INT 4
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: PUSH
11794: LD_VAR 0 2
11798: PUSH
11799: LD_INT 3
11801: MOD
11802: PUSH
11803: LD_INT 1
11805: PLUS
11806: ARRAY
11807: PPUSH
11808: LD_INT 1
11810: PPUSH
11811: CALL_OW 380
// un := CreateHuman ;
11815: LD_ADDR_VAR 0 3
11819: PUSH
11820: CALL_OW 44
11824: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11825: LD_VAR 0 3
11829: PPUSH
11830: LD_INT 0
11832: PPUSH
11833: LD_INT 5
11835: PPUSH
11836: CALL_OW 12
11840: PPUSH
11841: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11845: LD_VAR 0 3
11849: PPUSH
11850: LD_VAR 0 4
11854: PUSH
11855: LD_INT 1
11857: ARRAY
11858: PUSH
11859: LD_VAR 0 2
11863: ARRAY
11864: PPUSH
11865: LD_VAR 0 4
11869: PUSH
11870: LD_INT 2
11872: ARRAY
11873: PUSH
11874: LD_VAR 0 2
11878: ARRAY
11879: PPUSH
11880: LD_INT 1
11882: PPUSH
11883: CALL_OW 601
// end ;
11887: GO 11742
11889: POP
11890: POP
// DyingSold := CreateHuman ;
11891: LD_ADDR_EXP 35
11895: PUSH
11896: CALL_OW 44
11900: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11901: LD_EXP 35
11905: PPUSH
11906: LD_INT 16
11908: PPUSH
11909: LD_INT 0
11911: PPUSH
11912: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11916: LD_EXP 35
11920: PPUSH
11921: LD_INT 250
11923: PPUSH
11924: CALL_OW 234
// end ; end_of_file
11928: LD_VAR 0 1
11932: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11933: LD_INT 0
11935: PPUSH
11936: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11937: LD_ADDR_VAR 0 2
11941: PUSH
11942: LD_INT 22
11944: PUSH
11945: LD_INT 1
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 23
11954: PUSH
11955: LD_INT 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 25
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 50
11974: PUSH
11975: EMPTY
11976: LIST
11977: PUSH
11978: LD_INT 56
11980: PUSH
11981: EMPTY
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PPUSH
11991: CALL_OW 69
11995: PUSH
11996: LD_EXP 1
12000: PUSH
12001: EMPTY
12002: LIST
12003: DIFF
12004: ST_TO_ADDR
// if not tmp then
12005: LD_VAR 0 2
12009: NOT
12010: IFFALSE 12014
// exit ;
12012: GO 12090
// uc_side = 6 ;
12014: LD_ADDR_OWVAR 20
12018: PUSH
12019: LD_INT 6
12021: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
12022: LD_ADDR_EXP 8
12026: PUSH
12027: LD_STRING Mikhail
12029: PPUSH
12030: CALL_OW 25
12034: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
12035: LD_EXP 8
12039: PPUSH
12040: LD_INT 3
12042: PPUSH
12043: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12047: LD_EXP 8
12051: PPUSH
12052: LD_VAR 0 2
12056: PUSH
12057: LD_INT 1
12059: ARRAY
12060: PPUSH
12061: CALL_OW 250
12065: PPUSH
12066: LD_VAR 0 2
12070: PUSH
12071: LD_INT 1
12073: ARRAY
12074: PPUSH
12075: CALL_OW 251
12079: PPUSH
12080: LD_INT 5
12082: PPUSH
12083: LD_INT 1
12085: PPUSH
12086: CALL_OW 50
// end ;
12090: LD_VAR 0 1
12094: RET
// export function PrepareRussianCommander ; begin
12095: LD_INT 0
12097: PPUSH
// uc_side = 3 ;
12098: LD_ADDR_OWVAR 20
12102: PUSH
12103: LD_INT 3
12105: ST_TO_ADDR
// uc_nation = 3 ;
12106: LD_ADDR_OWVAR 21
12110: PUSH
12111: LD_INT 3
12113: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12114: LD_ADDR_EXP 19
12118: PUSH
12119: LD_STRING Natasza
12121: PPUSH
12122: CALL_OW 25
12126: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12127: LD_EXP 19
12131: PPUSH
12132: LD_INT 24
12134: PPUSH
12135: LD_INT 0
12137: PPUSH
12138: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12142: LD_EXP 19
12146: PPUSH
12147: LD_INT 56
12149: PPUSH
12150: LD_INT 16
12152: PPUSH
12153: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12157: LD_ADDR_EXP 24
12161: PUSH
12162: LD_EXP 24
12166: PPUSH
12167: LD_EXP 24
12171: PUSH
12172: LD_INT 1
12174: PLUS
12175: PPUSH
12176: LD_EXP 19
12180: PPUSH
12181: CALL_OW 1
12185: ST_TO_ADDR
// end ;
12186: LD_VAR 0 1
12190: RET
// export function PrepareSouthBase ; var i , un ; begin
12191: LD_INT 0
12193: PPUSH
12194: PPUSH
12195: PPUSH
// for i = 1 to 2 do
12196: LD_ADDR_VAR 0 2
12200: PUSH
12201: DOUBLE
12202: LD_INT 1
12204: DEC
12205: ST_TO_ADDR
12206: LD_INT 2
12208: PUSH
12209: FOR_TO
12210: IFFALSE 12319
// begin uc_side = 3 ;
12212: LD_ADDR_OWVAR 20
12216: PUSH
12217: LD_INT 3
12219: ST_TO_ADDR
// uc_nation = 3 ;
12220: LD_ADDR_OWVAR 21
12224: PUSH
12225: LD_INT 3
12227: ST_TO_ADDR
// hc_gallery =  ;
12228: LD_ADDR_OWVAR 33
12232: PUSH
12233: LD_STRING 
12235: ST_TO_ADDR
// hc_name =  ;
12236: LD_ADDR_OWVAR 26
12240: PUSH
12241: LD_STRING 
12243: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12244: LD_INT 1
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: LD_EXP 13
12254: PPUSH
12255: LD_EXP 14
12259: PPUSH
12260: CALL_OW 12
12264: PPUSH
12265: CALL_OW 380
// hc_importance = 0 ;
12269: LD_ADDR_OWVAR 32
12273: PUSH
12274: LD_INT 0
12276: ST_TO_ADDR
// un = CreateHuman ;
12277: LD_ADDR_VAR 0 3
12281: PUSH
12282: CALL_OW 44
12286: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12287: LD_VAR 0 3
12291: PPUSH
12292: LD_INT 11
12294: PPUSH
12295: LD_INT 0
12297: PPUSH
12298: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12302: LD_VAR 0 3
12306: PPUSH
12307: LD_INT 111
12309: PPUSH
12310: LD_INT 38
12312: PPUSH
12313: CALL_OW 118
// end ;
12317: GO 12209
12319: POP
12320: POP
// for i = 1 to 2 do
12321: LD_ADDR_VAR 0 2
12325: PUSH
12326: DOUBLE
12327: LD_INT 1
12329: DEC
12330: ST_TO_ADDR
12331: LD_INT 2
12333: PUSH
12334: FOR_TO
12335: IFFALSE 12418
// begin uc_side = 3 ;
12337: LD_ADDR_OWVAR 20
12341: PUSH
12342: LD_INT 3
12344: ST_TO_ADDR
// uc_nation = 3 ;
12345: LD_ADDR_OWVAR 21
12349: PUSH
12350: LD_INT 3
12352: ST_TO_ADDR
// hc_gallery =  ;
12353: LD_ADDR_OWVAR 33
12357: PUSH
12358: LD_STRING 
12360: ST_TO_ADDR
// hc_name =  ;
12361: LD_ADDR_OWVAR 26
12365: PUSH
12366: LD_STRING 
12368: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12369: LD_INT 0
12371: PPUSH
12372: LD_INT 3
12374: PPUSH
12375: LD_EXP 13
12379: PPUSH
12380: LD_EXP 14
12384: PPUSH
12385: CALL_OW 12
12389: PPUSH
12390: CALL_OW 380
// un = CreateHuman ;
12394: LD_ADDR_VAR 0 3
12398: PUSH
12399: CALL_OW 44
12403: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12404: LD_VAR 0 3
12408: PPUSH
12409: LD_INT 10
12411: PPUSH
12412: CALL_OW 52
// end ;
12416: GO 12334
12418: POP
12419: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12420: LD_INT 3
12422: PPUSH
12423: LD_INT 3
12425: PPUSH
12426: LD_INT 33
12428: PPUSH
12429: LD_EXP 13
12433: PPUSH
12434: LD_EXP 14
12438: PPUSH
12439: CALL_OW 12
12443: PPUSH
12444: LD_INT 1
12446: PPUSH
12447: LD_INT 1
12449: PUSH
12450: LD_INT 2
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: LD_INT 3
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: PUSH
12465: LD_OWVAR 67
12469: ARRAY
12470: PPUSH
12471: CALL 9009 0 6
// for i in UnitsInside ( arm2 ) do
12475: LD_ADDR_VAR 0 2
12479: PUSH
12480: LD_INT 33
12482: PPUSH
12483: CALL_OW 313
12487: PUSH
12488: FOR_IN
12489: IFFALSE 12522
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12491: LD_ADDR_EXP 25
12495: PUSH
12496: LD_EXP 25
12500: PPUSH
12501: LD_EXP 25
12505: PUSH
12506: LD_INT 1
12508: PLUS
12509: PPUSH
12510: LD_VAR 0 2
12514: PPUSH
12515: CALL_OW 1
12519: ST_TO_ADDR
12520: GO 12488
12522: POP
12523: POP
// end ;
12524: LD_VAR 0 1
12528: RET
// export function PrepareNorthBase ; var i , un ; begin
12529: LD_INT 0
12531: PPUSH
12532: PPUSH
12533: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12534: LD_ADDR_VAR 0 2
12538: PUSH
12539: DOUBLE
12540: LD_INT 1
12542: DEC
12543: ST_TO_ADDR
12544: LD_INT 1
12546: PPUSH
12547: LD_INT 2
12549: PPUSH
12550: CALL_OW 12
12554: PUSH
12555: LD_INT 2
12557: PPUSH
12558: LD_INT 3
12560: PPUSH
12561: CALL_OW 12
12565: PUSH
12566: LD_INT 3
12568: PPUSH
12569: LD_INT 4
12571: PPUSH
12572: CALL_OW 12
12576: PUSH
12577: LD_INT 4
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: PUSH
12586: LD_OWVAR 67
12590: ARRAY
12591: PUSH
12592: FOR_TO
12593: IFFALSE 12679
// begin uc_side = 3 ;
12595: LD_ADDR_OWVAR 20
12599: PUSH
12600: LD_INT 3
12602: ST_TO_ADDR
// uc_nation = 3 ;
12603: LD_ADDR_OWVAR 21
12607: PUSH
12608: LD_INT 3
12610: ST_TO_ADDR
// hc_gallery =  ;
12611: LD_ADDR_OWVAR 33
12615: PUSH
12616: LD_STRING 
12618: ST_TO_ADDR
// hc_name =  ;
12619: LD_ADDR_OWVAR 26
12623: PUSH
12624: LD_STRING 
12626: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12627: LD_INT 0
12629: PPUSH
12630: LD_INT 1
12632: PPUSH
12633: LD_EXP 13
12637: PPUSH
12638: LD_EXP 14
12642: PPUSH
12643: CALL_OW 12
12647: PPUSH
12648: CALL_OW 380
// un = CreateHuman ;
12652: LD_ADDR_VAR 0 3
12656: PUSH
12657: CALL_OW 44
12661: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12662: LD_VAR 0 3
12666: PPUSH
12667: LD_INT 14
12669: PPUSH
12670: LD_INT 0
12672: PPUSH
12673: CALL_OW 49
// end ;
12677: GO 12592
12679: POP
12680: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12681: LD_INT 3
12683: PPUSH
12684: LD_INT 3
12686: PPUSH
12687: LD_INT 2
12689: PPUSH
12690: LD_EXP 13
12694: PPUSH
12695: LD_EXP 14
12699: PPUSH
12700: CALL_OW 12
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: LD_INT 2
12713: PPUSH
12714: CALL_OW 12
12718: PUSH
12719: LD_INT 1
12721: PPUSH
12722: LD_INT 3
12724: PPUSH
12725: CALL_OW 12
12729: PUSH
12730: LD_INT 1
12732: PPUSH
12733: LD_INT 3
12735: PPUSH
12736: CALL_OW 12
12740: PUSH
12741: LD_INT 4
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_OWVAR 67
12754: ARRAY
12755: PPUSH
12756: CALL 9009 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12760: LD_INT 3
12762: PPUSH
12763: LD_INT 3
12765: PPUSH
12766: LD_INT 23
12768: PPUSH
12769: LD_EXP 13
12773: PPUSH
12774: LD_EXP 14
12778: PPUSH
12779: CALL_OW 12
12783: PPUSH
12784: LD_INT 4
12786: PPUSH
12787: LD_INT 0
12789: PUSH
12790: LD_INT 1
12792: PUSH
12793: LD_INT 2
12795: PUSH
12796: LD_INT 2
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: PUSH
12805: LD_OWVAR 67
12809: ARRAY
12810: PPUSH
12811: CALL 9009 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12815: LD_INT 3
12817: PPUSH
12818: LD_INT 3
12820: PPUSH
12821: LD_INT 1
12823: PPUSH
12824: LD_EXP 13
12828: PPUSH
12829: LD_EXP 14
12833: PPUSH
12834: CALL_OW 12
12838: PPUSH
12839: LD_INT 2
12841: PPUSH
12842: LD_INT 1
12844: PUSH
12845: LD_INT 2
12847: PUSH
12848: LD_INT 2
12850: PUSH
12851: LD_INT 3
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: PUSH
12860: LD_OWVAR 67
12864: ARRAY
12865: PPUSH
12866: CALL 9009 0 6
// for i in UnitsInside ( arm1 ) do
12870: LD_ADDR_VAR 0 2
12874: PUSH
12875: LD_INT 2
12877: PPUSH
12878: CALL_OW 313
12882: PUSH
12883: FOR_IN
12884: IFFALSE 12917
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12886: LD_ADDR_EXP 24
12890: PUSH
12891: LD_EXP 24
12895: PPUSH
12896: LD_EXP 24
12900: PUSH
12901: LD_INT 1
12903: PLUS
12904: PPUSH
12905: LD_VAR 0 2
12909: PPUSH
12910: CALL_OW 1
12914: ST_TO_ADDR
12915: GO 12883
12917: POP
12918: POP
// end ;
12919: LD_VAR 0 1
12923: RET
// export function PrepareOtherRussians ; var i , un ; begin
12924: LD_INT 0
12926: PPUSH
12927: PPUSH
12928: PPUSH
// for i = 1 to 2 do
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: DOUBLE
12935: LD_INT 1
12937: DEC
12938: ST_TO_ADDR
12939: LD_INT 2
12941: PUSH
12942: FOR_TO
12943: IFFALSE 13044
// begin uc_side = 3 ;
12945: LD_ADDR_OWVAR 20
12949: PUSH
12950: LD_INT 3
12952: ST_TO_ADDR
// uc_nation = 3 ;
12953: LD_ADDR_OWVAR 21
12957: PUSH
12958: LD_INT 3
12960: ST_TO_ADDR
// hc_gallery =  ;
12961: LD_ADDR_OWVAR 33
12965: PUSH
12966: LD_STRING 
12968: ST_TO_ADDR
// hc_name =  ;
12969: LD_ADDR_OWVAR 26
12973: PUSH
12974: LD_STRING 
12976: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12977: LD_INT 0
12979: PPUSH
12980: LD_INT 1
12982: PPUSH
12983: LD_EXP 13
12987: PPUSH
12988: LD_EXP 14
12992: PPUSH
12993: CALL_OW 12
12997: PPUSH
12998: CALL_OW 380
// un = CreateHuman ;
13002: LD_ADDR_VAR 0 3
13006: PUSH
13007: CALL_OW 44
13011: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
13012: LD_VAR 0 3
13016: PPUSH
13017: LD_INT 9
13019: PPUSH
13020: LD_INT 0
13022: PPUSH
13023: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
13027: LD_VAR 0 3
13031: PPUSH
13032: LD_INT 80
13034: PPUSH
13035: LD_INT 73
13037: PPUSH
13038: CALL_OW 118
// end ;
13042: GO 12942
13044: POP
13045: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13046: LD_ADDR_VAR 0 2
13050: PUSH
13051: LD_INT 22
13053: PUSH
13054: LD_INT 3
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 30
13063: PUSH
13064: LD_INT 31
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PPUSH
13075: CALL_OW 69
13079: PUSH
13080: FOR_IN
13081: IFFALSE 13109
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13083: LD_EXP 13
13087: PPUSH
13088: LD_EXP 14
13092: PPUSH
13093: CALL_OW 12
13097: PPUSH
13098: LD_VAR 0 2
13102: PPUSH
13103: CALL 9118 0 2
13107: GO 13080
13109: POP
13110: POP
// end ;
13111: LD_VAR 0 1
13115: RET
// export function PrepareCargoBays ; begin
13116: LD_INT 0
13118: PPUSH
// uc_side = 3 ;
13119: LD_ADDR_OWVAR 20
13123: PUSH
13124: LD_INT 3
13126: ST_TO_ADDR
// uc_nation = 3 ;
13127: LD_ADDR_OWVAR 21
13131: PUSH
13132: LD_INT 3
13134: ST_TO_ADDR
// vc_engine = 1 ;
13135: LD_ADDR_OWVAR 39
13139: PUSH
13140: LD_INT 1
13142: ST_TO_ADDR
// vc_control = 1 ;
13143: LD_ADDR_OWVAR 38
13147: PUSH
13148: LD_INT 1
13150: ST_TO_ADDR
// vc_weapon = 51 ;
13151: LD_ADDR_OWVAR 40
13155: PUSH
13156: LD_INT 51
13158: ST_TO_ADDR
// vc_chassis = 22 ;
13159: LD_ADDR_OWVAR 37
13163: PUSH
13164: LD_INT 22
13166: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13167: LD_ADDR_EXP 15
13171: PUSH
13172: CALL_OW 45
13176: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13177: LD_ADDR_EXP 16
13181: PUSH
13182: CALL_OW 45
13186: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13187: LD_EXP 15
13191: PPUSH
13192: LD_INT 13
13194: PPUSH
13195: LD_INT 0
13197: PPUSH
13198: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13202: LD_EXP 16
13206: PPUSH
13207: LD_INT 13
13209: PPUSH
13210: LD_INT 0
13212: PPUSH
13213: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13217: LD_EXP 15
13221: PPUSH
13222: LD_INT 2
13224: PPUSH
13225: LD_INT 70
13227: PUSH
13228: LD_INT 50
13230: PUSH
13231: LD_INT 30
13233: PUSH
13234: LD_INT 20
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: LD_OWVAR 67
13247: ARRAY
13248: PPUSH
13249: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13253: LD_EXP 16
13257: PPUSH
13258: LD_INT 2
13260: PPUSH
13261: LD_INT 70
13263: PUSH
13264: LD_INT 50
13266: PUSH
13267: LD_INT 30
13269: PUSH
13270: LD_INT 20
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: PUSH
13279: LD_OWVAR 67
13283: ARRAY
13284: PPUSH
13285: CALL_OW 291
// hc_gallery =  ;
13289: LD_ADDR_OWVAR 33
13293: PUSH
13294: LD_STRING 
13296: ST_TO_ADDR
// hc_name =  ;
13297: LD_ADDR_OWVAR 26
13301: PUSH
13302: LD_STRING 
13304: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13305: LD_INT 1
13307: PPUSH
13308: LD_INT 3
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: LD_INT 2
13316: PPUSH
13317: CALL_OW 12
13321: PPUSH
13322: CALL_OW 380
// driver1 = CreateHuman ;
13326: LD_ADDR_EXP 17
13330: PUSH
13331: CALL_OW 44
13335: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13336: LD_EXP 17
13340: PPUSH
13341: LD_EXP 15
13345: PPUSH
13346: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13350: LD_ADDR_OWVAR 26
13354: PUSH
13355: LD_STRING Nikolai Andreyev
13357: ST_TO_ADDR
// driver2 = CreateHuman ;
13358: LD_ADDR_EXP 18
13362: PUSH
13363: CALL_OW 44
13367: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13368: LD_EXP 18
13372: PPUSH
13373: LD_EXP 16
13377: PPUSH
13378: CALL_OW 52
// end ;
13382: LD_VAR 0 1
13386: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13387: LD_INT 0
13389: PPUSH
13390: PPUSH
13391: PPUSH
13392: PPUSH
13393: PPUSH
13394: PPUSH
// uc_side = 3 ;
13395: LD_ADDR_OWVAR 20
13399: PUSH
13400: LD_INT 3
13402: ST_TO_ADDR
// uc_nation = 3 ;
13403: LD_ADDR_OWVAR 21
13407: PUSH
13408: LD_INT 3
13410: ST_TO_ADDR
// for i := 1 to count do
13411: LD_ADDR_VAR 0 4
13415: PUSH
13416: DOUBLE
13417: LD_INT 1
13419: DEC
13420: ST_TO_ADDR
13421: LD_VAR 0 1
13425: PUSH
13426: FOR_TO
13427: IFFALSE 13689
// begin vc_engine = 1 ;
13429: LD_ADDR_OWVAR 39
13433: PUSH
13434: LD_INT 1
13436: ST_TO_ADDR
// vc_control = 1 ;
13437: LD_ADDR_OWVAR 38
13441: PUSH
13442: LD_INT 1
13444: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13445: LD_ADDR_OWVAR 40
13449: PUSH
13450: LD_INT 42
13452: ST_TO_ADDR
// if Difficulty = 3 then
13453: LD_OWVAR 67
13457: PUSH
13458: LD_INT 3
13460: EQUAL
13461: IFFALSE 13490
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13463: LD_ADDR_OWVAR 40
13467: PUSH
13468: LD_INT 42
13470: PUSH
13471: LD_INT 43
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 2
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// if Difficulty = 4 then
13490: LD_OWVAR 67
13494: PUSH
13495: LD_INT 4
13497: EQUAL
13498: IFFALSE 13535
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13500: LD_ADDR_OWVAR 40
13504: PUSH
13505: LD_INT 42
13507: PUSH
13508: LD_INT 43
13510: PUSH
13511: LD_INT 43
13513: PUSH
13514: LD_INT 44
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 1
13525: PPUSH
13526: LD_INT 4
13528: PPUSH
13529: CALL_OW 12
13533: ARRAY
13534: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13535: LD_ADDR_OWVAR 37
13539: PUSH
13540: LD_INT 21
13542: PUSH
13543: LD_INT 22
13545: PUSH
13546: LD_INT 22
13548: PUSH
13549: LD_INT 22
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: PUSH
13558: LD_OWVAR 67
13562: ARRAY
13563: ST_TO_ADDR
// veh = CreateVehicle ;
13564: LD_ADDR_VAR 0 5
13568: PUSH
13569: CALL_OW 45
13573: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13574: LD_VAR 0 5
13578: PPUSH
13579: LD_VAR 0 2
13583: PPUSH
13584: LD_INT 0
13586: PPUSH
13587: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13591: LD_ADDR_EXP 26
13595: PUSH
13596: LD_EXP 26
13600: PUSH
13601: LD_VAR 0 5
13605: ADD
13606: ST_TO_ADDR
// hc_gallery =  ;
13607: LD_ADDR_OWVAR 33
13611: PUSH
13612: LD_STRING 
13614: ST_TO_ADDR
// hc_name =  ;
13615: LD_ADDR_OWVAR 26
13619: PUSH
13620: LD_STRING 
13622: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13623: LD_INT 0
13625: PPUSH
13626: LD_INT 3
13628: PPUSH
13629: LD_EXP 13
13633: PPUSH
13634: LD_EXP 14
13638: PPUSH
13639: CALL_OW 12
13643: PPUSH
13644: CALL_OW 380
// un = CreateHuman ;
13648: LD_ADDR_VAR 0 6
13652: PUSH
13653: CALL_OW 44
13657: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13658: LD_VAR 0 6
13662: PPUSH
13663: LD_VAR 0 5
13667: PPUSH
13668: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13672: LD_VAR 0 6
13676: PPUSH
13677: LD_INT 14
13679: PPUSH
13680: LD_INT 9
13682: PPUSH
13683: CALL_OW 111
// end ;
13687: GO 13426
13689: POP
13690: POP
// wait ( 0 0$1 ) ;
13691: LD_INT 35
13693: PPUSH
13694: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13698: LD_INT 0
13700: PPUSH
13701: LD_INT 2
13703: PPUSH
13704: LD_EXP 13
13708: PPUSH
13709: LD_EXP 14
13713: PPUSH
13714: CALL_OW 12
13718: PPUSH
13719: CALL_OW 380
// un = CreateHuman ;
13723: LD_ADDR_VAR 0 6
13727: PUSH
13728: CALL_OW 44
13732: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13733: LD_ADDR_VAR 0 4
13737: PUSH
13738: DOUBLE
13739: LD_INT 1
13741: DEC
13742: ST_TO_ADDR
13743: LD_VAR 0 1
13747: PUSH
13748: LD_INT 2
13750: PUSH
13751: LD_INT 2
13753: MUL
13754: PLUS
13755: PUSH
13756: FOR_TO
13757: IFFALSE 13849
// begin hc_gallery =  ;
13759: LD_ADDR_OWVAR 33
13763: PUSH
13764: LD_STRING 
13766: ST_TO_ADDR
// hc_name =  ;
13767: LD_ADDR_OWVAR 26
13771: PUSH
13772: LD_STRING 
13774: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13775: LD_INT 1
13777: PPUSH
13778: LD_INT 1
13780: PPUSH
13781: LD_EXP 13
13785: PPUSH
13786: LD_EXP 14
13790: PPUSH
13791: CALL_OW 12
13795: PPUSH
13796: CALL_OW 380
// un = CreateHuman ;
13800: LD_ADDR_VAR 0 6
13804: PUSH
13805: CALL_OW 44
13809: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13810: LD_VAR 0 6
13814: PPUSH
13815: LD_INT 9
13817: PPUSH
13818: LD_INT 13
13820: PPUSH
13821: LD_INT 4
13823: PPUSH
13824: LD_INT 0
13826: PPUSH
13827: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13831: LD_ADDR_EXP 26
13835: PUSH
13836: LD_EXP 26
13840: PUSH
13841: LD_VAR 0 6
13845: ADD
13846: ST_TO_ADDR
// end ;
13847: GO 13756
13849: POP
13850: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13851: LD_ADDR_VAR 0 7
13855: PUSH
13856: LD_INT 26
13858: PPUSH
13859: LD_INT 22
13861: PUSH
13862: LD_INT 3
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 21
13871: PUSH
13872: LD_INT 1
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: LD_INT 26
13881: PUSH
13882: LD_INT 1
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: PPUSH
13894: CALL_OW 70
13898: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13899: LD_VAR 0 7
13903: PUSH
13904: LD_INT 1
13906: ARRAY
13907: PPUSH
13908: LD_STRING D9-Rus3-1
13910: PPUSH
13911: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13915: LD_VAR 0 7
13919: PUSH
13920: LD_INT 2
13922: ARRAY
13923: PPUSH
13924: LD_STRING D9-Russ-1
13926: PPUSH
13927: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13931: LD_EXP 26
13935: PPUSH
13936: LD_INT 31
13938: PPUSH
13939: LD_INT 13
13941: PPUSH
13942: CALL_OW 114
// wait ( 0 0$3 ) ;
13946: LD_INT 105
13948: PPUSH
13949: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13953: LD_INT 35
13955: PPUSH
13956: CALL_OW 67
// for i in attackGroup do
13960: LD_ADDR_VAR 0 4
13964: PUSH
13965: LD_EXP 26
13969: PUSH
13970: FOR_IN
13971: IFFALSE 14338
// begin if IsDead ( i ) then
13973: LD_VAR 0 4
13977: PPUSH
13978: CALL_OW 301
13982: IFFALSE 14002
// begin attackGroup := attackGroup diff i ;
13984: LD_ADDR_EXP 26
13988: PUSH
13989: LD_EXP 26
13993: PUSH
13994: LD_VAR 0 4
13998: DIFF
13999: ST_TO_ADDR
// continue ;
14000: GO 13970
// end ; if not HasTask ( i ) and not GetTag ( i ) then
14002: LD_VAR 0 4
14006: PPUSH
14007: CALL_OW 314
14011: NOT
14012: PUSH
14013: LD_VAR 0 4
14017: PPUSH
14018: CALL_OW 110
14022: NOT
14023: AND
14024: IFFALSE 14060
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
14026: LD_VAR 0 4
14030: PPUSH
14031: LD_INT 22
14033: PUSH
14034: LD_INT 1
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PPUSH
14041: CALL_OW 69
14045: PPUSH
14046: LD_VAR 0 4
14050: PPUSH
14051: CALL_OW 74
14055: PPUSH
14056: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14060: LD_VAR 0 4
14064: PPUSH
14065: CALL_OW 110
14069: NOT
14070: PUSH
14071: LD_VAR 0 4
14075: PPUSH
14076: CALL_OW 256
14080: PUSH
14081: LD_INT 650
14083: LESS
14084: AND
14085: PUSH
14086: LD_VAR 0 4
14090: PPUSH
14091: CALL_OW 247
14095: PUSH
14096: LD_INT 2
14098: EQUAL
14099: AND
14100: IFFALSE 14129
// begin SetTag ( i , 1 ) ;
14102: LD_VAR 0 4
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14114: LD_VAR 0 4
14118: PPUSH
14119: LD_INT 20
14121: PPUSH
14122: LD_INT 8
14124: PPUSH
14125: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14129: LD_VAR 0 4
14133: PPUSH
14134: CALL_OW 110
14138: PUSH
14139: LD_INT 1
14141: EQUAL
14142: PUSH
14143: LD_VAR 0 4
14147: PPUSH
14148: LD_INT 20
14150: PPUSH
14151: LD_INT 8
14153: PPUSH
14154: CALL_OW 297
14158: PUSH
14159: LD_INT 6
14161: LESS
14162: AND
14163: IFFALSE 14177
// SetTag ( i , 2 ) ;
14165: LD_VAR 0 4
14169: PPUSH
14170: LD_INT 2
14172: PPUSH
14173: CALL_OW 109
// if GetTag ( i ) = 2 then
14177: LD_VAR 0 4
14181: PPUSH
14182: CALL_OW 110
14186: PUSH
14187: LD_INT 2
14189: EQUAL
14190: IFFALSE 14298
// begin if GetLives ( i ) = 1000 then
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 256
14201: PUSH
14202: LD_INT 1000
14204: EQUAL
14205: IFFALSE 14221
// SetTag ( i , 3 ) else
14207: LD_VAR 0 4
14211: PPUSH
14212: LD_INT 3
14214: PPUSH
14215: CALL_OW 109
14219: GO 14298
// if IsDrivenBy ( i ) then
14221: LD_VAR 0 4
14225: PPUSH
14226: CALL_OW 311
14230: IFFALSE 14298
// begin mech := IsDrivenBy ( i ) ;
14232: LD_ADDR_VAR 0 8
14236: PUSH
14237: LD_VAR 0 4
14241: PPUSH
14242: CALL_OW 311
14246: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14247: LD_INT 1
14249: PPUSH
14250: LD_VAR 0 8
14254: PPUSH
14255: CALL_OW 292
14259: NOT
14260: PUSH
14261: LD_VAR 0 8
14265: PPUSH
14266: CALL_OW 256
14270: PUSH
14271: LD_INT 1000
14273: LESS
14274: AND
14275: IFFALSE 14289
// SetLives ( mech , 1000 ) ;
14277: LD_VAR 0 8
14281: PPUSH
14282: LD_INT 1000
14284: PPUSH
14285: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14289: LD_VAR 0 8
14293: PPUSH
14294: CALL 76661 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14298: LD_VAR 0 4
14302: PPUSH
14303: CALL_OW 110
14307: PUSH
14308: LD_INT 3
14310: EQUAL
14311: PUSH
14312: LD_VAR 0 4
14316: PPUSH
14317: CALL_OW 311
14321: AND
14322: IFFALSE 14336
// SetTag ( i , 0 ) ;
14324: LD_VAR 0 4
14328: PPUSH
14329: LD_INT 0
14331: PPUSH
14332: CALL_OW 109
// end ;
14336: GO 13970
14338: POP
14339: POP
// until not attackGroup ;
14340: LD_EXP 26
14344: NOT
14345: IFFALSE 13953
// end ;
14347: LD_VAR 0 3
14351: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14352: LD_EXP 26
14356: PPUSH
14357: LD_INT 21
14359: PUSH
14360: LD_INT 2
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PPUSH
14367: CALL_OW 72
14371: IFFALSE 14439
14373: GO 14375
14375: DISABLE
14376: LD_INT 0
14378: PPUSH
// begin enable ;
14379: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14380: LD_ADDR_VAR 0 1
14384: PUSH
14385: LD_EXP 26
14389: PPUSH
14390: LD_INT 21
14392: PUSH
14393: LD_INT 2
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 72
14404: PUSH
14405: FOR_IN
14406: IFFALSE 14437
// if GetFuel ( i ) < 3 then
14408: LD_VAR 0 1
14412: PPUSH
14413: CALL_OW 261
14417: PUSH
14418: LD_INT 3
14420: LESS
14421: IFFALSE 14435
// SetFuel ( i , 3 ) ;
14423: LD_VAR 0 1
14427: PPUSH
14428: LD_INT 3
14430: PPUSH
14431: CALL_OW 240
14435: GO 14405
14437: POP
14438: POP
// end ; end_of_file
14439: PPOPN 1
14441: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14442: LD_INT 22
14444: PUSH
14445: LD_INT 3
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 25
14454: PUSH
14455: LD_INT 2
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PPUSH
14466: CALL_OW 69
14470: IFFALSE 14489
14472: GO 14474
14474: DISABLE
// begin enable ;
14475: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14476: LD_INT 3
14478: PPUSH
14479: LD_INT 1
14481: PPUSH
14482: LD_INT 22
14484: PPUSH
14485: CALL 9254 0 3
// end ;
14489: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14490: LD_INT 22
14492: PUSH
14493: LD_INT 3
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 25
14502: PUSH
14503: LD_INT 4
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PPUSH
14514: CALL_OW 69
14518: IFFALSE 14540
14520: GO 14522
14522: DISABLE
// begin enable ;
14523: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14524: LD_INT 3
14526: PPUSH
14527: LD_INT 20
14529: PPUSH
14530: LD_INT 22
14532: PPUSH
14533: LD_INT 23
14535: PPUSH
14536: CALL 9586 0 4
// end ;
14540: END
// every 0 0$1 trigger northBaseDefenders do
14541: LD_EXP 24
14545: IFFALSE 14569
14547: GO 14549
14549: DISABLE
// begin enable ;
14550: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14551: LD_INT 22
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: LD_EXP 24
14561: PPUSH
14562: LD_INT 2
14564: PPUSH
14565: CALL 9858 0 4
// end ;
14569: END
// every 0 0$1 trigger southBaseDefenders do
14570: LD_EXP 25
14574: IFFALSE 14598
14576: GO 14578
14578: DISABLE
// begin enable ;
14579: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14580: LD_INT 23
14582: PPUSH
14583: LD_INT 1
14585: PPUSH
14586: LD_EXP 25
14590: PPUSH
14591: LD_INT 33
14593: PPUSH
14594: CALL 9858 0 4
// end ; end_of_file
14598: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14599: LD_VAR 0 1
14603: PPUSH
14604: CALL 32531 0 1
// if unit = JMM then
14608: LD_VAR 0 1
14612: PUSH
14613: LD_EXP 1
14617: EQUAL
14618: IFFALSE 14627
// YouLost ( JMM ) ;
14620: LD_STRING JMM
14622: PPUSH
14623: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14627: LD_VAR 0 1
14631: PPUSH
14632: CALL_OW 266
14636: PUSH
14637: LD_INT 0
14639: EQUAL
14640: IFFALSE 14649
// YouLost ( DepotDestroyed ) ;
14642: LD_STRING DepotDestroyed
14644: PPUSH
14645: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14649: LD_VAR 0 1
14653: PPUSH
14654: CALL_OW 255
14658: PUSH
14659: LD_INT 1
14661: EQUAL
14662: PUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: CALL_OW 247
14672: PUSH
14673: LD_INT 1
14675: EQUAL
14676: AND
14677: IFFALSE 14693
// deadsCounter = deadsCounter + 1 ;
14679: LD_ADDR_EXP 31
14683: PUSH
14684: LD_EXP 31
14688: PUSH
14689: LD_INT 1
14691: PLUS
14692: ST_TO_ADDR
// end ;
14693: PPOPN 1
14695: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14696: LD_VAR 0 1
14700: PPUSH
14701: CALL_OW 255
14705: PUSH
14706: LD_INT 3
14708: EQUAL
14709: IFFALSE 14787
// begin ComMoveXY ( driver , 6 , 10 ) ;
14711: LD_VAR 0 1
14715: PPUSH
14716: LD_INT 6
14718: PPUSH
14719: LD_INT 10
14721: PPUSH
14722: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14726: LD_INT 35
14728: PPUSH
14729: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: LD_INT 6
14740: PPUSH
14741: LD_INT 10
14743: PPUSH
14744: CALL_OW 111
// if IsDead ( driver ) then
14748: LD_VAR 0 1
14752: PPUSH
14753: CALL_OW 301
14757: IFFALSE 14761
// exit ;
14759: GO 14787
// until IsAt ( driver , 6 , 10 ) ;
14761: LD_VAR 0 1
14765: PPUSH
14766: LD_INT 6
14768: PPUSH
14769: LD_INT 10
14771: PPUSH
14772: CALL_OW 307
14776: IFFALSE 14726
// RemoveUnit ( driver ) ;
14778: LD_VAR 0 1
14782: PPUSH
14783: CALL_OW 64
// end ; end ;
14787: PPOPN 4
14789: END
// on Command ( cmd ) do var i , j , tmp ;
14790: LD_INT 0
14792: PPUSH
14793: PPUSH
14794: PPUSH
// begin SOS_Command ( cmd ) ;
14795: LD_VAR 0 1
14799: PPUSH
14800: CALL 32635 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14804: LD_ADDR_VAR 0 2
14808: PUSH
14809: LD_INT 22
14811: PUSH
14812: LD_INT 1
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 21
14821: PUSH
14822: LD_INT 2
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 69
14837: PUSH
14838: FOR_IN
14839: IFFALSE 14960
// begin if GetTaskList ( i ) then
14841: LD_VAR 0 2
14845: PPUSH
14846: CALL_OW 437
14850: IFFALSE 14958
// begin for j = 1 to GetTaskList ( i ) do
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: DOUBLE
14858: LD_INT 1
14860: DEC
14861: ST_TO_ADDR
14862: LD_VAR 0 2
14866: PPUSH
14867: CALL_OW 437
14871: PUSH
14872: FOR_TO
14873: IFFALSE 14956
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14875: LD_ADDR_VAR 0 4
14879: PUSH
14880: LD_VAR 0 2
14884: PPUSH
14885: CALL_OW 437
14889: PUSH
14890: LD_VAR 0 3
14894: ARRAY
14895: PUSH
14896: LD_INT 4
14898: ARRAY
14899: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14900: LD_VAR 0 4
14904: PPUSH
14905: CALL_OW 255
14909: PUSH
14910: LD_INT 3
14912: EQUAL
14913: PUSH
14914: LD_VAR 0 4
14918: PPUSH
14919: CALL_OW 247
14923: PUSH
14924: LD_INT 2
14926: EQUAL
14927: AND
14928: PUSH
14929: LD_VAR 0 4
14933: PPUSH
14934: CALL_OW 264
14938: PUSH
14939: LD_INT 51
14941: EQUAL
14942: AND
14943: IFFALSE 14954
// ComStop ( i ) ;
14945: LD_VAR 0 2
14949: PPUSH
14950: CALL_OW 141
// end ;
14954: GO 14872
14956: POP
14957: POP
// end ; end ;
14958: GO 14838
14960: POP
14961: POP
// end ;
14962: PPOPN 4
14964: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14965: LD_VAR 0 2
14969: PUSH
14970: LD_EXP 8
14974: EQUAL
14975: PUSH
14976: LD_EXP 21
14980: PUSH
14981: LD_INT 4
14983: NONEQUAL
14984: AND
14985: IFFALSE 15137
// begin if IsOk ( Mikhail ) then
14987: LD_EXP 8
14991: PPUSH
14992: CALL_OW 302
14996: IFFALSE 15004
// AskMikhail else
14998: CALL 7504 0 0
15002: GO 15137
// if IsOk ( llab1 ) then
15004: LD_INT 23
15006: PPUSH
15007: CALL_OW 302
15011: IFFALSE 15100
// begin InGameOn ;
15013: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
15017: LD_EXP 8
15021: PPUSH
15022: LD_INT 6
15024: PPUSH
15025: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
15029: LD_INT 23
15031: PPUSH
15032: LD_INT 6
15034: PPUSH
15035: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
15039: LD_EXP 8
15043: PPUSH
15044: LD_INT 23
15046: PPUSH
15047: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15051: LD_INT 35
15053: PPUSH
15054: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15058: LD_EXP 8
15062: PPUSH
15063: CALL_OW 310
15067: PUSH
15068: LD_INT 23
15070: EQUAL
15071: PUSH
15072: LD_EXP 8
15076: PPUSH
15077: CALL_OW 301
15081: OR
15082: IFFALSE 15051
// SetSide ( llab1 , 1 ) ;
15084: LD_INT 23
15086: PPUSH
15087: LD_INT 1
15089: PPUSH
15090: CALL_OW 235
// InGameOff ;
15094: CALL_OW 9
// end else
15098: GO 15137
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15100: LD_INT 3
15102: PPUSH
15103: LD_INT 6
15105: PPUSH
15106: LD_INT 2
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15116: LD_EXP 8
15120: PPUSH
15121: LD_INT 6
15123: PPUSH
15124: CALL_OW 235
// ComHold ( Mikhail ) ;
15128: LD_EXP 8
15132: PPUSH
15133: CALL_OW 140
// end ; end ; end ;
15137: PPOPN 2
15139: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15140: LD_VAR 0 1
15144: PPUSH
15145: LD_VAR 0 2
15149: PPUSH
15150: CALL 32651 0 2
// end ;
15154: PPOPN 2
15156: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15157: LD_EXP 8
15161: PPUSH
15162: CALL_OW 257
15166: PUSH
15167: LD_INT 3
15169: NONEQUAL
15170: IFFALSE 15188
15172: GO 15174
15174: DISABLE
// begin enable ;
15175: ENABLE
// SetClass ( Mikhail , 3 ) ;
15176: LD_EXP 8
15180: PPUSH
15181: LD_INT 3
15183: PPUSH
15184: CALL_OW 336
// end ; end_of_file
15188: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15189: LD_INT 22
15191: PUSH
15192: LD_INT 1
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 21
15201: PUSH
15202: LD_INT 1
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: LD_INT 25
15211: PUSH
15212: LD_INT 2
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: LIST
15223: PPUSH
15224: CALL_OW 69
15228: PUSH
15229: LD_INT 0
15231: EQUAL
15232: PUSH
15233: LD_INT 22
15235: PUSH
15236: LD_INT 4
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 21
15245: PUSH
15246: LD_INT 1
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 25
15255: PUSH
15256: LD_INT 2
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: LIST
15267: PPUSH
15268: CALL_OW 69
15272: PUSH
15273: LD_INT 0
15275: EQUAL
15276: AND
15277: PUSH
15278: LD_INT 1
15280: PPUSH
15281: CALL_OW 255
15285: PUSH
15286: LD_INT 3
15288: EQUAL
15289: AND
15290: PUSH
15291: LD_INT 10
15293: PPUSH
15294: CALL_OW 255
15298: PUSH
15299: LD_INT 3
15301: EQUAL
15302: AND
15303: IFFALSE 15315
15305: GO 15307
15307: DISABLE
// YouLost ( Engineer ) ;
15308: LD_STRING Engineer
15310: PPUSH
15311: CALL_OW 104
15315: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15316: LD_INT 1
15318: PPUSH
15319: CALL_OW 255
15323: PUSH
15324: LD_INT 3
15326: EQUAL
15327: PUSH
15328: LD_EXP 27
15332: PUSH
15333: LD_INT 1
15335: EQUAL
15336: AND
15337: IFFALSE 15349
15339: GO 15341
15341: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15342: LD_STRING DepotCaptured
15344: PPUSH
15345: CALL_OW 104
15349: END
// export function PrepareTigers ; var i , un ; begin
15350: LD_INT 0
15352: PPUSH
15353: PPUSH
15354: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15355: LD_ADDR_VAR 0 2
15359: PUSH
15360: DOUBLE
15361: LD_INT 1
15363: DEC
15364: ST_TO_ADDR
15365: LD_INT 2
15367: PUSH
15368: LD_INT 3
15370: PUSH
15371: LD_INT 4
15373: PUSH
15374: LD_INT 5
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: PUSH
15383: LD_OWVAR 67
15387: ARRAY
15388: PUSH
15389: FOR_TO
15390: IFFALSE 15505
// begin uc_side := 0 ;
15392: LD_ADDR_OWVAR 20
15396: PUSH
15397: LD_INT 0
15399: ST_TO_ADDR
// uc_nation := nation_nature ;
15400: LD_ADDR_OWVAR 21
15404: PUSH
15405: LD_INT 0
15407: ST_TO_ADDR
// hc_sex := sex_male ;
15408: LD_ADDR_OWVAR 27
15412: PUSH
15413: LD_INT 1
15415: ST_TO_ADDR
// hc_class := class_tiger ;
15416: LD_ADDR_OWVAR 28
15420: PUSH
15421: LD_INT 14
15423: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15424: LD_ADDR_OWVAR 31
15428: PUSH
15429: LD_EXP 14
15433: PUSH
15434: LD_INT 0
15436: PUSH
15437: LD_INT 0
15439: PUSH
15440: LD_INT 0
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15449: LD_ADDR_OWVAR 35
15453: PUSH
15454: LD_INT 30
15456: PUSH
15457: LD_INT 40
15459: PUSH
15460: LD_INT 45
15462: PUSH
15463: LD_INT 50
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: PUSH
15472: LD_OWVAR 67
15476: ARRAY
15477: ST_TO_ADDR
// un = CreateHuman ;
15478: LD_ADDR_VAR 0 3
15482: PUSH
15483: CALL_OW 44
15487: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15488: LD_VAR 0 3
15492: PPUSH
15493: LD_INT 27
15495: PPUSH
15496: LD_INT 0
15498: PPUSH
15499: CALL_OW 49
// end ;
15503: GO 15389
15505: POP
15506: POP
// end ; end_of_file
15507: LD_VAR 0 1
15511: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15512: LD_INT 1
15514: PPUSH
15515: CALL_OW 255
15519: PUSH
15520: LD_INT 1
15522: EQUAL
15523: PUSH
15524: LD_INT 10
15526: PPUSH
15527: CALL_OW 255
15531: PUSH
15532: LD_INT 1
15534: EQUAL
15535: AND
15536: PUSH
15537: LD_EXP 20
15541: PUSH
15542: LD_INT 1
15544: EQUAL
15545: AND
15546: PUSH
15547: LD_INT 22
15549: PUSH
15550: LD_INT 3
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 21
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 34
15569: PUSH
15570: LD_INT 51
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 3
15579: PUSH
15580: LD_INT 58
15582: PUSH
15583: EMPTY
15584: LIST
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: PPUSH
15596: CALL_OW 69
15600: PUSH
15601: LD_INT 0
15603: EQUAL
15604: AND
15605: IFFALSE 15696
15607: GO 15609
15609: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15610: LD_INT 9450
15612: PUSH
15613: LD_INT 8400
15615: PUSH
15616: LD_INT 6300
15618: PUSH
15619: LD_INT 6300
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: PUSH
15628: LD_OWVAR 67
15632: ARRAY
15633: PPUSH
15634: CALL_OW 67
// if cargoEscape then
15638: LD_EXP 20
15642: IFFALSE 15696
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15644: LD_EXP 9
15648: PPUSH
15649: LD_STRING D6-Pow-1
15651: PPUSH
15652: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15656: LD_EXP 1
15660: PPUSH
15661: LD_STRING D6-JMM-1
15663: PPUSH
15664: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15668: LD_EXP 9
15672: PPUSH
15673: LD_STRING D6-Pow-2
15675: PPUSH
15676: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15680: LD_EXP 1
15684: PPUSH
15685: LD_STRING D6-JMM-2
15687: PPUSH
15688: CALL_OW 88
// FinishMission ;
15692: CALL 15912 0 0
// end ; end ;
15696: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15697: LD_INT 1
15699: PPUSH
15700: CALL_OW 255
15704: PUSH
15705: LD_INT 1
15707: EQUAL
15708: PUSH
15709: LD_INT 10
15711: PPUSH
15712: CALL_OW 255
15716: PUSH
15717: LD_INT 1
15719: EQUAL
15720: AND
15721: PUSH
15722: LD_EXP 20
15726: PUSH
15727: LD_INT 1
15729: GREATER
15730: AND
15731: IFFALSE 15806
15733: GO 15735
15735: DISABLE
15736: LD_INT 0
15738: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15739: LD_INT 11550
15741: PUSH
15742: LD_INT 10500
15744: PUSH
15745: LD_INT 9450
15747: PUSH
15748: LD_INT 8400
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: PUSH
15757: LD_OWVAR 67
15761: ARRAY
15762: PPUSH
15763: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15767: LD_INT 1
15769: PUSH
15770: LD_INT 2
15772: PUSH
15773: LD_INT 3
15775: PUSH
15776: LD_INT 4
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: PUSH
15785: LD_OWVAR 67
15789: ARRAY
15790: PPUSH
15791: LD_INT 13
15793: PPUSH
15794: CALL 13387 0 2
// lastBattle = 1 ;
15798: LD_ADDR_EXP 27
15802: PUSH
15803: LD_INT 1
15805: ST_TO_ADDR
// end ;
15806: PPOPN 1
15808: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15809: LD_EXP 27
15813: PUSH
15814: LD_INT 1
15816: EQUAL
15817: PUSH
15818: LD_INT 26
15820: PPUSH
15821: LD_INT 22
15823: PUSH
15824: LD_INT 3
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 21
15833: PUSH
15834: LD_INT 1
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PPUSH
15845: CALL_OW 70
15849: PUSH
15850: LD_INT 0
15852: EQUAL
15853: AND
15854: IFFALSE 15911
15856: GO 15858
15858: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15859: LD_EXP 9
15863: PPUSH
15864: LD_STRING D6-Pow-1
15866: PPUSH
15867: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15871: LD_EXP 1
15875: PPUSH
15876: LD_STRING D6-JMM-1
15878: PPUSH
15879: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15883: LD_EXP 9
15887: PPUSH
15888: LD_STRING D6-Pow-2
15890: PPUSH
15891: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15895: LD_EXP 1
15899: PPUSH
15900: LD_STRING D6-JMM-2
15902: PPUSH
15903: CALL_OW 88
// FinishMission ;
15907: CALL 15912 0 0
// end ;
15911: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15912: LD_INT 0
15914: PPUSH
15915: PPUSH
15916: PPUSH
15917: PPUSH
15918: PPUSH
// if tick <= 18 18$00 then
15919: LD_OWVAR 1
15923: PUSH
15924: LD_INT 37800
15926: LESSEQUAL
15927: IFFALSE 15936
// SetAchievement ( ACH_ASPEED_2 ) ;
15929: LD_STRING ACH_ASPEED_2
15931: PPUSH
15932: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15936: LD_ADDR_VAR 0 2
15940: PUSH
15941: LD_INT 22
15943: PUSH
15944: LD_INT 1
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 21
15953: PUSH
15954: LD_INT 2
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 24
15963: PUSH
15964: LD_INT 251
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: PPUSH
15976: CALL_OW 69
15980: ST_TO_ADDR
// if tmp then
15981: LD_VAR 0 2
15985: IFFALSE 15999
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15987: LD_VAR 0 2
15991: PPUSH
15992: LD_STRING 02_tanks_1
15994: PPUSH
15995: CALL 10733 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15999: LD_EXP 21
16003: PUSH
16004: LD_INT 1
16006: EQUAL
16007: PUSH
16008: LD_EXP 8
16012: PPUSH
16013: CALL_OW 300
16017: AND
16018: IFFALSE 16032
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
16020: LD_EXP 21
16024: PPUSH
16025: LD_STRING 02_mikhailStatus_1
16027: PPUSH
16028: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
16032: LD_INT 1
16034: PPUSH
16035: CALL_OW 274
16039: PPUSH
16040: LD_INT 1
16042: PPUSH
16043: CALL_OW 275
16047: PPUSH
16048: LD_STRING 02_resources_4
16050: PPUSH
16051: CALL_OW 39
// m1 := false ;
16055: LD_ADDR_VAR 0 3
16059: PUSH
16060: LD_INT 0
16062: ST_TO_ADDR
// m2 := false ;
16063: LD_ADDR_VAR 0 4
16067: PUSH
16068: LD_INT 0
16070: ST_TO_ADDR
// m3 := false ;
16071: LD_ADDR_VAR 0 5
16075: PUSH
16076: LD_INT 0
16078: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16079: LD_INT 1
16081: PPUSH
16082: CALL_OW 274
16086: PPUSH
16087: LD_INT 1
16089: PPUSH
16090: CALL_OW 275
16094: PUSH
16095: LD_INT 200
16097: GREATEREQUAL
16098: IFFALSE 16120
// begin AddMedal ( Cans , 1 ) ;
16100: LD_STRING Cans
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 101
// m1 := true ;
16110: LD_ADDR_VAR 0 3
16114: PUSH
16115: LD_INT 1
16117: ST_TO_ADDR
// end else
16118: GO 16131
// begin AddMedal ( Cans , - 1 ) ;
16120: LD_STRING Cans
16122: PPUSH
16123: LD_INT 1
16125: NEG
16126: PPUSH
16127: CALL_OW 101
// end ; if deadsCounter < 2 then
16131: LD_EXP 31
16135: PUSH
16136: LD_INT 2
16138: LESS
16139: IFFALSE 16161
// begin AddMedal ( Deaths , 1 ) ;
16141: LD_STRING Deaths
16143: PPUSH
16144: LD_INT 1
16146: PPUSH
16147: CALL_OW 101
// m2 := true ;
16151: LD_ADDR_VAR 0 4
16155: PUSH
16156: LD_INT 1
16158: ST_TO_ADDR
// end else
16159: GO 16172
// begin AddMedal ( Deaths , - 1 ) ;
16161: LD_STRING Deaths
16163: PPUSH
16164: LD_INT 1
16166: NEG
16167: PPUSH
16168: CALL_OW 101
// end ; if mikhailStatus = 0 then
16172: LD_EXP 21
16176: PUSH
16177: LD_INT 0
16179: EQUAL
16180: IFFALSE 16193
// AddMedal ( Prisoner , - 1 ) ;
16182: LD_STRING Prisoner
16184: PPUSH
16185: LD_INT 1
16187: NEG
16188: PPUSH
16189: CALL_OW 101
// if mikhailStatus = 1 then
16193: LD_EXP 21
16197: PUSH
16198: LD_INT 1
16200: EQUAL
16201: IFFALSE 16221
// begin AddMedal ( Prisoner , 1 ) ;
16203: LD_STRING Prisoner
16205: PPUSH
16206: LD_INT 1
16208: PPUSH
16209: CALL_OW 101
// m3 := true ;
16213: LD_ADDR_VAR 0 5
16217: PUSH
16218: LD_INT 1
16220: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16221: LD_EXP 21
16225: PUSH
16226: LD_INT 2
16228: EQUAL
16229: IFFALSE 16249
// begin AddMedal ( Prisoner , 2 ) ;
16231: LD_STRING Prisoner
16233: PPUSH
16234: LD_INT 2
16236: PPUSH
16237: CALL_OW 101
// m3 := true ;
16241: LD_ADDR_VAR 0 5
16245: PUSH
16246: LD_INT 1
16248: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16249: LD_EXP 21
16253: PUSH
16254: LD_INT 3
16256: EQUAL
16257: IFFALSE 16270
// AddMedal ( Prisoner , - 2 ) ;
16259: LD_STRING Prisoner
16261: PPUSH
16262: LD_INT 2
16264: NEG
16265: PPUSH
16266: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16270: LD_OWVAR 67
16274: PUSH
16275: LD_INT 3
16277: GREATEREQUAL
16278: PUSH
16279: LD_VAR 0 3
16283: AND
16284: PUSH
16285: LD_VAR 0 4
16289: AND
16290: PUSH
16291: LD_VAR 0 5
16295: AND
16296: IFFALSE 16308
// SetAchievementEX ( ACH_AMER , 2 ) ;
16298: LD_STRING ACH_AMER
16300: PPUSH
16301: LD_INT 2
16303: PPUSH
16304: CALL_OW 564
// GiveMedals ( MAIN ) ;
16308: LD_STRING MAIN
16310: PPUSH
16311: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16315: LD_INT 22
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 23
16327: PUSH
16328: LD_INT 1
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 21
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: PPUSH
16350: CALL_OW 69
16354: PPUSH
16355: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16359: LD_EXP 1
16363: PPUSH
16364: LD_EXP 33
16368: PUSH
16369: LD_STRING JMM
16371: STR
16372: PPUSH
16373: CALL_OW 38
// if IsOK ( Bobby ) then
16377: LD_EXP 2
16381: PPUSH
16382: CALL_OW 302
16386: IFFALSE 16406
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16388: LD_EXP 2
16392: PPUSH
16393: LD_EXP 33
16397: PUSH
16398: LD_STRING Bobby
16400: STR
16401: PPUSH
16402: CALL_OW 38
// if IsOK ( Cyrus ) then
16406: LD_EXP 3
16410: PPUSH
16411: CALL_OW 302
16415: IFFALSE 16435
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16417: LD_EXP 3
16421: PPUSH
16422: LD_EXP 33
16426: PUSH
16427: LD_STRING Cyrus
16429: STR
16430: PPUSH
16431: CALL_OW 38
// if IsOK ( Lisa ) then
16435: LD_EXP 4
16439: PPUSH
16440: CALL_OW 302
16444: IFFALSE 16471
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
16446: LD_STRING enableBioCharacter(BIO_LISA)
16448: PPUSH
16449: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16453: LD_EXP 4
16457: PPUSH
16458: LD_EXP 33
16462: PUSH
16463: LD_STRING Lisa
16465: STR
16466: PPUSH
16467: CALL_OW 38
// end ; if IsOK ( Khatam ) then
16471: LD_EXP 5
16475: PPUSH
16476: CALL_OW 302
16480: IFFALSE 16507
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
16482: LD_STRING enableBioCharacter(BIO_KHAT)
16484: PPUSH
16485: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16489: LD_EXP 5
16493: PPUSH
16494: LD_EXP 33
16498: PUSH
16499: LD_STRING Khatam
16501: STR
16502: PPUSH
16503: CALL_OW 38
// end ; if IsOK ( Brian ) then
16507: LD_EXP 6
16511: PPUSH
16512: CALL_OW 302
16516: IFFALSE 16536
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16518: LD_EXP 6
16522: PPUSH
16523: LD_EXP 33
16527: PUSH
16528: LD_STRING Brian
16530: STR
16531: PPUSH
16532: CALL_OW 38
// if IsOk ( Jerry ) then
16536: LD_EXP 7
16540: PPUSH
16541: CALL_OW 302
16545: IFFALSE 16565
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16547: LD_EXP 7
16551: PPUSH
16552: LD_EXP 33
16556: PUSH
16557: LD_STRING Jerry
16559: STR
16560: PPUSH
16561: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16565: LD_EXP 21
16569: PUSH
16570: LD_INT 1
16572: EQUAL
16573: PUSH
16574: LD_EXP 8
16578: PPUSH
16579: CALL_OW 255
16583: PUSH
16584: LD_INT 1
16586: EQUAL
16587: AND
16588: PUSH
16589: LD_EXP 8
16593: PPUSH
16594: CALL_OW 302
16598: AND
16599: IFFALSE 16626
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
16601: LD_STRING enableBioCharacter(BIO_MICH)
16603: PPUSH
16604: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16608: LD_EXP 8
16612: PPUSH
16613: LD_EXP 33
16617: PUSH
16618: LD_STRING Mikhail
16620: STR
16621: PPUSH
16622: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16626: LD_INT 50
16628: PUSH
16629: EMPTY
16630: LIST
16631: PUSH
16632: LD_INT 22
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 21
16644: PUSH
16645: LD_INT 1
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: PPUSH
16657: CALL_OW 69
16661: PUSH
16662: LD_EXP 1
16666: PUSH
16667: LD_EXP 2
16671: PUSH
16672: LD_EXP 3
16676: PUSH
16677: LD_EXP 4
16681: PUSH
16682: LD_EXP 5
16686: PUSH
16687: LD_EXP 6
16691: PUSH
16692: LD_EXP 7
16696: PUSH
16697: LD_EXP 8
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: DIFF
16712: PPUSH
16713: LD_STRING 02_other_survivors
16715: PPUSH
16716: CALL_OW 38
// YouWin ;
16720: CALL_OW 103
// end ; end_of_file end_of_file
16724: LD_VAR 0 1
16728: RET
// export globalGameSaveCounter ; every 0 0$1 do
16729: GO 16731
16731: DISABLE
// begin enable ;
16732: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16733: LD_STRING updateTimer(
16735: PUSH
16736: LD_OWVAR 1
16740: STR
16741: PUSH
16742: LD_STRING );
16744: STR
16745: PPUSH
16746: CALL_OW 559
// end ;
16750: END
// every 0 0$1 do
16751: GO 16753
16753: DISABLE
// begin globalGameSaveCounter := 0 ;
16754: LD_ADDR_EXP 36
16758: PUSH
16759: LD_INT 0
16761: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16762: LD_STRING setGameSaveCounter(0)
16764: PPUSH
16765: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16769: LD_STRING initStreamRollete();
16771: PPUSH
16772: CALL_OW 559
// InitStreamMode ;
16776: CALL 18102 0 0
// DefineStreamItems ( false ) ;
16780: LD_INT 0
16782: PPUSH
16783: CALL 18566 0 1
// end ;
16787: END
// export function SOS_MapStart ( ) ; begin
16788: LD_INT 0
16790: PPUSH
// if streamModeActive then
16791: LD_EXP 37
16795: IFFALSE 16804
// DefineStreamItems ( true ) ;
16797: LD_INT 1
16799: PPUSH
16800: CALL 18566 0 1
// UpdateLuaVariables ( ) ;
16804: CALL 16821 0 0
// UpdateFactoryWaypoints ( ) ;
16808: CALL 31435 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16812: CALL 31692 0 0
// end ;
16816: LD_VAR 0 1
16820: RET
// function UpdateLuaVariables ( ) ; begin
16821: LD_INT 0
16823: PPUSH
// if globalGameSaveCounter then
16824: LD_EXP 36
16828: IFFALSE 16862
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
16830: LD_ADDR_EXP 36
16834: PUSH
16835: LD_EXP 36
16839: PPUSH
16840: CALL 76322 0 1
16844: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16845: LD_STRING setGameSaveCounter(
16847: PUSH
16848: LD_EXP 36
16852: STR
16853: PUSH
16854: LD_STRING )
16856: STR
16857: PPUSH
16858: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
16862: LD_STRING setGameDifficulty(
16864: PUSH
16865: LD_OWVAR 67
16869: STR
16870: PUSH
16871: LD_STRING )
16873: STR
16874: PPUSH
16875: CALL_OW 559
// end ;
16879: LD_VAR 0 1
16883: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16884: LD_INT 0
16886: PPUSH
// if p2 = stream_mode then
16887: LD_VAR 0 2
16891: PUSH
16892: LD_INT 100
16894: EQUAL
16895: IFFALSE 17898
// begin if not StreamModeActive then
16897: LD_EXP 37
16901: NOT
16902: IFFALSE 16912
// StreamModeActive := true ;
16904: LD_ADDR_EXP 37
16908: PUSH
16909: LD_INT 1
16911: ST_TO_ADDR
// if p3 = 0 then
16912: LD_VAR 0 3
16916: PUSH
16917: LD_INT 0
16919: EQUAL
16920: IFFALSE 16926
// InitStreamMode ;
16922: CALL 18102 0 0
// if p3 = 1 then
16926: LD_VAR 0 3
16930: PUSH
16931: LD_INT 1
16933: EQUAL
16934: IFFALSE 16944
// sRocket := true ;
16936: LD_ADDR_EXP 42
16940: PUSH
16941: LD_INT 1
16943: ST_TO_ADDR
// if p3 = 2 then
16944: LD_VAR 0 3
16948: PUSH
16949: LD_INT 2
16951: EQUAL
16952: IFFALSE 16962
// sSpeed := true ;
16954: LD_ADDR_EXP 41
16958: PUSH
16959: LD_INT 1
16961: ST_TO_ADDR
// if p3 = 3 then
16962: LD_VAR 0 3
16966: PUSH
16967: LD_INT 3
16969: EQUAL
16970: IFFALSE 16980
// sEngine := true ;
16972: LD_ADDR_EXP 43
16976: PUSH
16977: LD_INT 1
16979: ST_TO_ADDR
// if p3 = 4 then
16980: LD_VAR 0 3
16984: PUSH
16985: LD_INT 4
16987: EQUAL
16988: IFFALSE 16998
// sSpec := true ;
16990: LD_ADDR_EXP 40
16994: PUSH
16995: LD_INT 1
16997: ST_TO_ADDR
// if p3 = 5 then
16998: LD_VAR 0 3
17002: PUSH
17003: LD_INT 5
17005: EQUAL
17006: IFFALSE 17016
// sLevel := true ;
17008: LD_ADDR_EXP 44
17012: PUSH
17013: LD_INT 1
17015: ST_TO_ADDR
// if p3 = 6 then
17016: LD_VAR 0 3
17020: PUSH
17021: LD_INT 6
17023: EQUAL
17024: IFFALSE 17034
// sArmoury := true ;
17026: LD_ADDR_EXP 45
17030: PUSH
17031: LD_INT 1
17033: ST_TO_ADDR
// if p3 = 7 then
17034: LD_VAR 0 3
17038: PUSH
17039: LD_INT 7
17041: EQUAL
17042: IFFALSE 17052
// sRadar := true ;
17044: LD_ADDR_EXP 46
17048: PUSH
17049: LD_INT 1
17051: ST_TO_ADDR
// if p3 = 8 then
17052: LD_VAR 0 3
17056: PUSH
17057: LD_INT 8
17059: EQUAL
17060: IFFALSE 17070
// sBunker := true ;
17062: LD_ADDR_EXP 47
17066: PUSH
17067: LD_INT 1
17069: ST_TO_ADDR
// if p3 = 9 then
17070: LD_VAR 0 3
17074: PUSH
17075: LD_INT 9
17077: EQUAL
17078: IFFALSE 17088
// sHack := true ;
17080: LD_ADDR_EXP 48
17084: PUSH
17085: LD_INT 1
17087: ST_TO_ADDR
// if p3 = 10 then
17088: LD_VAR 0 3
17092: PUSH
17093: LD_INT 10
17095: EQUAL
17096: IFFALSE 17106
// sFire := true ;
17098: LD_ADDR_EXP 49
17102: PUSH
17103: LD_INT 1
17105: ST_TO_ADDR
// if p3 = 11 then
17106: LD_VAR 0 3
17110: PUSH
17111: LD_INT 11
17113: EQUAL
17114: IFFALSE 17124
// sRefresh := true ;
17116: LD_ADDR_EXP 50
17120: PUSH
17121: LD_INT 1
17123: ST_TO_ADDR
// if p3 = 12 then
17124: LD_VAR 0 3
17128: PUSH
17129: LD_INT 12
17131: EQUAL
17132: IFFALSE 17142
// sExp := true ;
17134: LD_ADDR_EXP 51
17138: PUSH
17139: LD_INT 1
17141: ST_TO_ADDR
// if p3 = 13 then
17142: LD_VAR 0 3
17146: PUSH
17147: LD_INT 13
17149: EQUAL
17150: IFFALSE 17160
// sDepot := true ;
17152: LD_ADDR_EXP 52
17156: PUSH
17157: LD_INT 1
17159: ST_TO_ADDR
// if p3 = 14 then
17160: LD_VAR 0 3
17164: PUSH
17165: LD_INT 14
17167: EQUAL
17168: IFFALSE 17178
// sFlag := true ;
17170: LD_ADDR_EXP 53
17174: PUSH
17175: LD_INT 1
17177: ST_TO_ADDR
// if p3 = 15 then
17178: LD_VAR 0 3
17182: PUSH
17183: LD_INT 15
17185: EQUAL
17186: IFFALSE 17196
// sKamikadze := true ;
17188: LD_ADDR_EXP 61
17192: PUSH
17193: LD_INT 1
17195: ST_TO_ADDR
// if p3 = 16 then
17196: LD_VAR 0 3
17200: PUSH
17201: LD_INT 16
17203: EQUAL
17204: IFFALSE 17214
// sTroll := true ;
17206: LD_ADDR_EXP 62
17210: PUSH
17211: LD_INT 1
17213: ST_TO_ADDR
// if p3 = 17 then
17214: LD_VAR 0 3
17218: PUSH
17219: LD_INT 17
17221: EQUAL
17222: IFFALSE 17232
// sSlow := true ;
17224: LD_ADDR_EXP 63
17228: PUSH
17229: LD_INT 1
17231: ST_TO_ADDR
// if p3 = 18 then
17232: LD_VAR 0 3
17236: PUSH
17237: LD_INT 18
17239: EQUAL
17240: IFFALSE 17250
// sLack := true ;
17242: LD_ADDR_EXP 64
17246: PUSH
17247: LD_INT 1
17249: ST_TO_ADDR
// if p3 = 19 then
17250: LD_VAR 0 3
17254: PUSH
17255: LD_INT 19
17257: EQUAL
17258: IFFALSE 17268
// sTank := true ;
17260: LD_ADDR_EXP 66
17264: PUSH
17265: LD_INT 1
17267: ST_TO_ADDR
// if p3 = 20 then
17268: LD_VAR 0 3
17272: PUSH
17273: LD_INT 20
17275: EQUAL
17276: IFFALSE 17286
// sRemote := true ;
17278: LD_ADDR_EXP 67
17282: PUSH
17283: LD_INT 1
17285: ST_TO_ADDR
// if p3 = 21 then
17286: LD_VAR 0 3
17290: PUSH
17291: LD_INT 21
17293: EQUAL
17294: IFFALSE 17304
// sPowell := true ;
17296: LD_ADDR_EXP 68
17300: PUSH
17301: LD_INT 1
17303: ST_TO_ADDR
// if p3 = 22 then
17304: LD_VAR 0 3
17308: PUSH
17309: LD_INT 22
17311: EQUAL
17312: IFFALSE 17322
// sTeleport := true ;
17314: LD_ADDR_EXP 71
17318: PUSH
17319: LD_INT 1
17321: ST_TO_ADDR
// if p3 = 23 then
17322: LD_VAR 0 3
17326: PUSH
17327: LD_INT 23
17329: EQUAL
17330: IFFALSE 17340
// sOilTower := true ;
17332: LD_ADDR_EXP 73
17336: PUSH
17337: LD_INT 1
17339: ST_TO_ADDR
// if p3 = 24 then
17340: LD_VAR 0 3
17344: PUSH
17345: LD_INT 24
17347: EQUAL
17348: IFFALSE 17358
// sShovel := true ;
17350: LD_ADDR_EXP 74
17354: PUSH
17355: LD_INT 1
17357: ST_TO_ADDR
// if p3 = 25 then
17358: LD_VAR 0 3
17362: PUSH
17363: LD_INT 25
17365: EQUAL
17366: IFFALSE 17376
// sSheik := true ;
17368: LD_ADDR_EXP 75
17372: PUSH
17373: LD_INT 1
17375: ST_TO_ADDR
// if p3 = 26 then
17376: LD_VAR 0 3
17380: PUSH
17381: LD_INT 26
17383: EQUAL
17384: IFFALSE 17394
// sEarthquake := true ;
17386: LD_ADDR_EXP 77
17390: PUSH
17391: LD_INT 1
17393: ST_TO_ADDR
// if p3 = 27 then
17394: LD_VAR 0 3
17398: PUSH
17399: LD_INT 27
17401: EQUAL
17402: IFFALSE 17412
// sAI := true ;
17404: LD_ADDR_EXP 78
17408: PUSH
17409: LD_INT 1
17411: ST_TO_ADDR
// if p3 = 28 then
17412: LD_VAR 0 3
17416: PUSH
17417: LD_INT 28
17419: EQUAL
17420: IFFALSE 17430
// sCargo := true ;
17422: LD_ADDR_EXP 81
17426: PUSH
17427: LD_INT 1
17429: ST_TO_ADDR
// if p3 = 29 then
17430: LD_VAR 0 3
17434: PUSH
17435: LD_INT 29
17437: EQUAL
17438: IFFALSE 17448
// sDLaser := true ;
17440: LD_ADDR_EXP 82
17444: PUSH
17445: LD_INT 1
17447: ST_TO_ADDR
// if p3 = 30 then
17448: LD_VAR 0 3
17452: PUSH
17453: LD_INT 30
17455: EQUAL
17456: IFFALSE 17466
// sExchange := true ;
17458: LD_ADDR_EXP 83
17462: PUSH
17463: LD_INT 1
17465: ST_TO_ADDR
// if p3 = 31 then
17466: LD_VAR 0 3
17470: PUSH
17471: LD_INT 31
17473: EQUAL
17474: IFFALSE 17484
// sFac := true ;
17476: LD_ADDR_EXP 84
17480: PUSH
17481: LD_INT 1
17483: ST_TO_ADDR
// if p3 = 32 then
17484: LD_VAR 0 3
17488: PUSH
17489: LD_INT 32
17491: EQUAL
17492: IFFALSE 17502
// sPower := true ;
17494: LD_ADDR_EXP 85
17498: PUSH
17499: LD_INT 1
17501: ST_TO_ADDR
// if p3 = 33 then
17502: LD_VAR 0 3
17506: PUSH
17507: LD_INT 33
17509: EQUAL
17510: IFFALSE 17520
// sRandom := true ;
17512: LD_ADDR_EXP 86
17516: PUSH
17517: LD_INT 1
17519: ST_TO_ADDR
// if p3 = 34 then
17520: LD_VAR 0 3
17524: PUSH
17525: LD_INT 34
17527: EQUAL
17528: IFFALSE 17538
// sShield := true ;
17530: LD_ADDR_EXP 87
17534: PUSH
17535: LD_INT 1
17537: ST_TO_ADDR
// if p3 = 35 then
17538: LD_VAR 0 3
17542: PUSH
17543: LD_INT 35
17545: EQUAL
17546: IFFALSE 17556
// sTime := true ;
17548: LD_ADDR_EXP 88
17552: PUSH
17553: LD_INT 1
17555: ST_TO_ADDR
// if p3 = 36 then
17556: LD_VAR 0 3
17560: PUSH
17561: LD_INT 36
17563: EQUAL
17564: IFFALSE 17574
// sTools := true ;
17566: LD_ADDR_EXP 89
17570: PUSH
17571: LD_INT 1
17573: ST_TO_ADDR
// if p3 = 101 then
17574: LD_VAR 0 3
17578: PUSH
17579: LD_INT 101
17581: EQUAL
17582: IFFALSE 17592
// sSold := true ;
17584: LD_ADDR_EXP 54
17588: PUSH
17589: LD_INT 1
17591: ST_TO_ADDR
// if p3 = 102 then
17592: LD_VAR 0 3
17596: PUSH
17597: LD_INT 102
17599: EQUAL
17600: IFFALSE 17610
// sDiff := true ;
17602: LD_ADDR_EXP 55
17606: PUSH
17607: LD_INT 1
17609: ST_TO_ADDR
// if p3 = 103 then
17610: LD_VAR 0 3
17614: PUSH
17615: LD_INT 103
17617: EQUAL
17618: IFFALSE 17628
// sFog := true ;
17620: LD_ADDR_EXP 58
17624: PUSH
17625: LD_INT 1
17627: ST_TO_ADDR
// if p3 = 104 then
17628: LD_VAR 0 3
17632: PUSH
17633: LD_INT 104
17635: EQUAL
17636: IFFALSE 17646
// sReset := true ;
17638: LD_ADDR_EXP 59
17642: PUSH
17643: LD_INT 1
17645: ST_TO_ADDR
// if p3 = 105 then
17646: LD_VAR 0 3
17650: PUSH
17651: LD_INT 105
17653: EQUAL
17654: IFFALSE 17664
// sSun := true ;
17656: LD_ADDR_EXP 60
17660: PUSH
17661: LD_INT 1
17663: ST_TO_ADDR
// if p3 = 106 then
17664: LD_VAR 0 3
17668: PUSH
17669: LD_INT 106
17671: EQUAL
17672: IFFALSE 17682
// sTiger := true ;
17674: LD_ADDR_EXP 56
17678: PUSH
17679: LD_INT 1
17681: ST_TO_ADDR
// if p3 = 107 then
17682: LD_VAR 0 3
17686: PUSH
17687: LD_INT 107
17689: EQUAL
17690: IFFALSE 17700
// sBomb := true ;
17692: LD_ADDR_EXP 57
17696: PUSH
17697: LD_INT 1
17699: ST_TO_ADDR
// if p3 = 108 then
17700: LD_VAR 0 3
17704: PUSH
17705: LD_INT 108
17707: EQUAL
17708: IFFALSE 17718
// sWound := true ;
17710: LD_ADDR_EXP 65
17714: PUSH
17715: LD_INT 1
17717: ST_TO_ADDR
// if p3 = 109 then
17718: LD_VAR 0 3
17722: PUSH
17723: LD_INT 109
17725: EQUAL
17726: IFFALSE 17736
// sBetray := true ;
17728: LD_ADDR_EXP 69
17732: PUSH
17733: LD_INT 1
17735: ST_TO_ADDR
// if p3 = 110 then
17736: LD_VAR 0 3
17740: PUSH
17741: LD_INT 110
17743: EQUAL
17744: IFFALSE 17754
// sContamin := true ;
17746: LD_ADDR_EXP 70
17750: PUSH
17751: LD_INT 1
17753: ST_TO_ADDR
// if p3 = 111 then
17754: LD_VAR 0 3
17758: PUSH
17759: LD_INT 111
17761: EQUAL
17762: IFFALSE 17772
// sOil := true ;
17764: LD_ADDR_EXP 72
17768: PUSH
17769: LD_INT 1
17771: ST_TO_ADDR
// if p3 = 112 then
17772: LD_VAR 0 3
17776: PUSH
17777: LD_INT 112
17779: EQUAL
17780: IFFALSE 17790
// sStu := true ;
17782: LD_ADDR_EXP 76
17786: PUSH
17787: LD_INT 1
17789: ST_TO_ADDR
// if p3 = 113 then
17790: LD_VAR 0 3
17794: PUSH
17795: LD_INT 113
17797: EQUAL
17798: IFFALSE 17808
// sBazooka := true ;
17800: LD_ADDR_EXP 79
17804: PUSH
17805: LD_INT 1
17807: ST_TO_ADDR
// if p3 = 114 then
17808: LD_VAR 0 3
17812: PUSH
17813: LD_INT 114
17815: EQUAL
17816: IFFALSE 17826
// sMortar := true ;
17818: LD_ADDR_EXP 80
17822: PUSH
17823: LD_INT 1
17825: ST_TO_ADDR
// if p3 = 115 then
17826: LD_VAR 0 3
17830: PUSH
17831: LD_INT 115
17833: EQUAL
17834: IFFALSE 17844
// sRanger := true ;
17836: LD_ADDR_EXP 90
17840: PUSH
17841: LD_INT 1
17843: ST_TO_ADDR
// if p3 = 116 then
17844: LD_VAR 0 3
17848: PUSH
17849: LD_INT 116
17851: EQUAL
17852: IFFALSE 17862
// sComputer := true ;
17854: LD_ADDR_EXP 91
17858: PUSH
17859: LD_INT 1
17861: ST_TO_ADDR
// if p3 = 117 then
17862: LD_VAR 0 3
17866: PUSH
17867: LD_INT 117
17869: EQUAL
17870: IFFALSE 17880
// s30 := true ;
17872: LD_ADDR_EXP 92
17876: PUSH
17877: LD_INT 1
17879: ST_TO_ADDR
// if p3 = 118 then
17880: LD_VAR 0 3
17884: PUSH
17885: LD_INT 118
17887: EQUAL
17888: IFFALSE 17898
// s60 := true ;
17890: LD_ADDR_EXP 93
17894: PUSH
17895: LD_INT 1
17897: ST_TO_ADDR
// end ; if p2 = hack_mode then
17898: LD_VAR 0 2
17902: PUSH
17903: LD_INT 101
17905: EQUAL
17906: IFFALSE 18034
// begin case p3 of 1 :
17908: LD_VAR 0 3
17912: PUSH
17913: LD_INT 1
17915: DOUBLE
17916: EQUAL
17917: IFTRUE 17921
17919: GO 17928
17921: POP
// hHackUnlimitedResources ; 2 :
17922: CALL 30181 0 0
17926: GO 18034
17928: LD_INT 2
17930: DOUBLE
17931: EQUAL
17932: IFTRUE 17936
17934: GO 17943
17936: POP
// hHackSetLevel10 ; 3 :
17937: CALL 30314 0 0
17941: GO 18034
17943: LD_INT 3
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17951
17949: GO 17958
17951: POP
// hHackSetLevel10YourUnits ; 4 :
17952: CALL 30399 0 0
17956: GO 18034
17958: LD_INT 4
17960: DOUBLE
17961: EQUAL
17962: IFTRUE 17966
17964: GO 17973
17966: POP
// hHackInvincible ; 5 :
17967: CALL 30847 0 0
17971: GO 18034
17973: LD_INT 5
17975: DOUBLE
17976: EQUAL
17977: IFTRUE 17981
17979: GO 17988
17981: POP
// hHackInvisible ; 6 :
17982: CALL 30958 0 0
17986: GO 18034
17988: LD_INT 6
17990: DOUBLE
17991: EQUAL
17992: IFTRUE 17996
17994: GO 18003
17996: POP
// hHackChangeYourSide ; 7 :
17997: CALL 31015 0 0
18001: GO 18034
18003: LD_INT 7
18005: DOUBLE
18006: EQUAL
18007: IFTRUE 18011
18009: GO 18018
18011: POP
// hHackChangeUnitSide ; 8 :
18012: CALL 31057 0 0
18016: GO 18034
18018: LD_INT 8
18020: DOUBLE
18021: EQUAL
18022: IFTRUE 18026
18024: GO 18033
18026: POP
// hHackFog ; end ;
18027: CALL 31158 0 0
18031: GO 18034
18033: POP
// end ; if p2 = game_save_mode then
18034: LD_VAR 0 2
18038: PUSH
18039: LD_INT 102
18041: EQUAL
18042: IFFALSE 18097
// begin if p3 = 1 then
18044: LD_VAR 0 3
18048: PUSH
18049: LD_INT 1
18051: EQUAL
18052: IFFALSE 18064
// globalGameSaveCounter := p4 ;
18054: LD_ADDR_EXP 36
18058: PUSH
18059: LD_VAR 0 4
18063: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18064: LD_VAR 0 3
18068: PUSH
18069: LD_INT 2
18071: EQUAL
18072: PUSH
18073: LD_EXP 36
18077: AND
18078: IFFALSE 18097
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18080: LD_STRING setGameSaveCounter(
18082: PUSH
18083: LD_EXP 36
18087: STR
18088: PUSH
18089: LD_STRING )
18091: STR
18092: PPUSH
18093: CALL_OW 559
// end ; end ;
18097: LD_VAR 0 7
18101: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18102: LD_INT 0
18104: PPUSH
// streamModeActive := false ;
18105: LD_ADDR_EXP 37
18109: PUSH
18110: LD_INT 0
18112: ST_TO_ADDR
// normalCounter := 36 ;
18113: LD_ADDR_EXP 38
18117: PUSH
18118: LD_INT 36
18120: ST_TO_ADDR
// hardcoreCounter := 18 ;
18121: LD_ADDR_EXP 39
18125: PUSH
18126: LD_INT 18
18128: ST_TO_ADDR
// sRocket := false ;
18129: LD_ADDR_EXP 42
18133: PUSH
18134: LD_INT 0
18136: ST_TO_ADDR
// sSpeed := false ;
18137: LD_ADDR_EXP 41
18141: PUSH
18142: LD_INT 0
18144: ST_TO_ADDR
// sEngine := false ;
18145: LD_ADDR_EXP 43
18149: PUSH
18150: LD_INT 0
18152: ST_TO_ADDR
// sSpec := false ;
18153: LD_ADDR_EXP 40
18157: PUSH
18158: LD_INT 0
18160: ST_TO_ADDR
// sLevel := false ;
18161: LD_ADDR_EXP 44
18165: PUSH
18166: LD_INT 0
18168: ST_TO_ADDR
// sArmoury := false ;
18169: LD_ADDR_EXP 45
18173: PUSH
18174: LD_INT 0
18176: ST_TO_ADDR
// sRadar := false ;
18177: LD_ADDR_EXP 46
18181: PUSH
18182: LD_INT 0
18184: ST_TO_ADDR
// sBunker := false ;
18185: LD_ADDR_EXP 47
18189: PUSH
18190: LD_INT 0
18192: ST_TO_ADDR
// sHack := false ;
18193: LD_ADDR_EXP 48
18197: PUSH
18198: LD_INT 0
18200: ST_TO_ADDR
// sFire := false ;
18201: LD_ADDR_EXP 49
18205: PUSH
18206: LD_INT 0
18208: ST_TO_ADDR
// sRefresh := false ;
18209: LD_ADDR_EXP 50
18213: PUSH
18214: LD_INT 0
18216: ST_TO_ADDR
// sExp := false ;
18217: LD_ADDR_EXP 51
18221: PUSH
18222: LD_INT 0
18224: ST_TO_ADDR
// sDepot := false ;
18225: LD_ADDR_EXP 52
18229: PUSH
18230: LD_INT 0
18232: ST_TO_ADDR
// sFlag := false ;
18233: LD_ADDR_EXP 53
18237: PUSH
18238: LD_INT 0
18240: ST_TO_ADDR
// sKamikadze := false ;
18241: LD_ADDR_EXP 61
18245: PUSH
18246: LD_INT 0
18248: ST_TO_ADDR
// sTroll := false ;
18249: LD_ADDR_EXP 62
18253: PUSH
18254: LD_INT 0
18256: ST_TO_ADDR
// sSlow := false ;
18257: LD_ADDR_EXP 63
18261: PUSH
18262: LD_INT 0
18264: ST_TO_ADDR
// sLack := false ;
18265: LD_ADDR_EXP 64
18269: PUSH
18270: LD_INT 0
18272: ST_TO_ADDR
// sTank := false ;
18273: LD_ADDR_EXP 66
18277: PUSH
18278: LD_INT 0
18280: ST_TO_ADDR
// sRemote := false ;
18281: LD_ADDR_EXP 67
18285: PUSH
18286: LD_INT 0
18288: ST_TO_ADDR
// sPowell := false ;
18289: LD_ADDR_EXP 68
18293: PUSH
18294: LD_INT 0
18296: ST_TO_ADDR
// sTeleport := false ;
18297: LD_ADDR_EXP 71
18301: PUSH
18302: LD_INT 0
18304: ST_TO_ADDR
// sOilTower := false ;
18305: LD_ADDR_EXP 73
18309: PUSH
18310: LD_INT 0
18312: ST_TO_ADDR
// sShovel := false ;
18313: LD_ADDR_EXP 74
18317: PUSH
18318: LD_INT 0
18320: ST_TO_ADDR
// sSheik := false ;
18321: LD_ADDR_EXP 75
18325: PUSH
18326: LD_INT 0
18328: ST_TO_ADDR
// sEarthquake := false ;
18329: LD_ADDR_EXP 77
18333: PUSH
18334: LD_INT 0
18336: ST_TO_ADDR
// sAI := false ;
18337: LD_ADDR_EXP 78
18341: PUSH
18342: LD_INT 0
18344: ST_TO_ADDR
// sCargo := false ;
18345: LD_ADDR_EXP 81
18349: PUSH
18350: LD_INT 0
18352: ST_TO_ADDR
// sDLaser := false ;
18353: LD_ADDR_EXP 82
18357: PUSH
18358: LD_INT 0
18360: ST_TO_ADDR
// sExchange := false ;
18361: LD_ADDR_EXP 83
18365: PUSH
18366: LD_INT 0
18368: ST_TO_ADDR
// sFac := false ;
18369: LD_ADDR_EXP 84
18373: PUSH
18374: LD_INT 0
18376: ST_TO_ADDR
// sPower := false ;
18377: LD_ADDR_EXP 85
18381: PUSH
18382: LD_INT 0
18384: ST_TO_ADDR
// sRandom := false ;
18385: LD_ADDR_EXP 86
18389: PUSH
18390: LD_INT 0
18392: ST_TO_ADDR
// sShield := false ;
18393: LD_ADDR_EXP 87
18397: PUSH
18398: LD_INT 0
18400: ST_TO_ADDR
// sTime := false ;
18401: LD_ADDR_EXP 88
18405: PUSH
18406: LD_INT 0
18408: ST_TO_ADDR
// sTools := false ;
18409: LD_ADDR_EXP 89
18413: PUSH
18414: LD_INT 0
18416: ST_TO_ADDR
// sSold := false ;
18417: LD_ADDR_EXP 54
18421: PUSH
18422: LD_INT 0
18424: ST_TO_ADDR
// sDiff := false ;
18425: LD_ADDR_EXP 55
18429: PUSH
18430: LD_INT 0
18432: ST_TO_ADDR
// sFog := false ;
18433: LD_ADDR_EXP 58
18437: PUSH
18438: LD_INT 0
18440: ST_TO_ADDR
// sReset := false ;
18441: LD_ADDR_EXP 59
18445: PUSH
18446: LD_INT 0
18448: ST_TO_ADDR
// sSun := false ;
18449: LD_ADDR_EXP 60
18453: PUSH
18454: LD_INT 0
18456: ST_TO_ADDR
// sTiger := false ;
18457: LD_ADDR_EXP 56
18461: PUSH
18462: LD_INT 0
18464: ST_TO_ADDR
// sBomb := false ;
18465: LD_ADDR_EXP 57
18469: PUSH
18470: LD_INT 0
18472: ST_TO_ADDR
// sWound := false ;
18473: LD_ADDR_EXP 65
18477: PUSH
18478: LD_INT 0
18480: ST_TO_ADDR
// sBetray := false ;
18481: LD_ADDR_EXP 69
18485: PUSH
18486: LD_INT 0
18488: ST_TO_ADDR
// sContamin := false ;
18489: LD_ADDR_EXP 70
18493: PUSH
18494: LD_INT 0
18496: ST_TO_ADDR
// sOil := false ;
18497: LD_ADDR_EXP 72
18501: PUSH
18502: LD_INT 0
18504: ST_TO_ADDR
// sStu := false ;
18505: LD_ADDR_EXP 76
18509: PUSH
18510: LD_INT 0
18512: ST_TO_ADDR
// sBazooka := false ;
18513: LD_ADDR_EXP 79
18517: PUSH
18518: LD_INT 0
18520: ST_TO_ADDR
// sMortar := false ;
18521: LD_ADDR_EXP 80
18525: PUSH
18526: LD_INT 0
18528: ST_TO_ADDR
// sRanger := false ;
18529: LD_ADDR_EXP 90
18533: PUSH
18534: LD_INT 0
18536: ST_TO_ADDR
// sComputer := false ;
18537: LD_ADDR_EXP 91
18541: PUSH
18542: LD_INT 0
18544: ST_TO_ADDR
// s30 := false ;
18545: LD_ADDR_EXP 92
18549: PUSH
18550: LD_INT 0
18552: ST_TO_ADDR
// s60 := false ;
18553: LD_ADDR_EXP 93
18557: PUSH
18558: LD_INT 0
18560: ST_TO_ADDR
// end ;
18561: LD_VAR 0 1
18565: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18566: LD_INT 0
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
18572: PPUSH
18573: PPUSH
18574: PPUSH
// result := [ ] ;
18575: LD_ADDR_VAR 0 2
18579: PUSH
18580: EMPTY
18581: ST_TO_ADDR
// if campaign_id = 1 then
18582: LD_OWVAR 69
18586: PUSH
18587: LD_INT 1
18589: EQUAL
18590: IFFALSE 21756
// begin case mission_number of 1 :
18592: LD_OWVAR 70
18596: PUSH
18597: LD_INT 1
18599: DOUBLE
18600: EQUAL
18601: IFTRUE 18605
18603: GO 18681
18605: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18606: LD_ADDR_VAR 0 2
18610: PUSH
18611: LD_INT 2
18613: PUSH
18614: LD_INT 4
18616: PUSH
18617: LD_INT 11
18619: PUSH
18620: LD_INT 12
18622: PUSH
18623: LD_INT 15
18625: PUSH
18626: LD_INT 16
18628: PUSH
18629: LD_INT 22
18631: PUSH
18632: LD_INT 23
18634: PUSH
18635: LD_INT 26
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 101
18651: PUSH
18652: LD_INT 102
18654: PUSH
18655: LD_INT 106
18657: PUSH
18658: LD_INT 116
18660: PUSH
18661: LD_INT 117
18663: PUSH
18664: LD_INT 118
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: ST_TO_ADDR
18679: GO 21754
18681: LD_INT 2
18683: DOUBLE
18684: EQUAL
18685: IFTRUE 18689
18687: GO 18773
18689: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18690: LD_ADDR_VAR 0 2
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: LD_INT 4
18700: PUSH
18701: LD_INT 11
18703: PUSH
18704: LD_INT 12
18706: PUSH
18707: LD_INT 15
18709: PUSH
18710: LD_INT 16
18712: PUSH
18713: LD_INT 22
18715: PUSH
18716: LD_INT 23
18718: PUSH
18719: LD_INT 26
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 101
18735: PUSH
18736: LD_INT 102
18738: PUSH
18739: LD_INT 105
18741: PUSH
18742: LD_INT 106
18744: PUSH
18745: LD_INT 108
18747: PUSH
18748: LD_INT 116
18750: PUSH
18751: LD_INT 117
18753: PUSH
18754: LD_INT 118
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: ST_TO_ADDR
18771: GO 21754
18773: LD_INT 3
18775: DOUBLE
18776: EQUAL
18777: IFTRUE 18781
18779: GO 18869
18781: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18782: LD_ADDR_VAR 0 2
18786: PUSH
18787: LD_INT 2
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: LD_INT 5
18795: PUSH
18796: LD_INT 11
18798: PUSH
18799: LD_INT 12
18801: PUSH
18802: LD_INT 15
18804: PUSH
18805: LD_INT 16
18807: PUSH
18808: LD_INT 22
18810: PUSH
18811: LD_INT 26
18813: PUSH
18814: LD_INT 36
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 101
18831: PUSH
18832: LD_INT 102
18834: PUSH
18835: LD_INT 105
18837: PUSH
18838: LD_INT 106
18840: PUSH
18841: LD_INT 108
18843: PUSH
18844: LD_INT 116
18846: PUSH
18847: LD_INT 117
18849: PUSH
18850: LD_INT 118
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: ST_TO_ADDR
18867: GO 21754
18869: LD_INT 4
18871: DOUBLE
18872: EQUAL
18873: IFTRUE 18877
18875: GO 18973
18877: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18878: LD_ADDR_VAR 0 2
18882: PUSH
18883: LD_INT 2
18885: PUSH
18886: LD_INT 4
18888: PUSH
18889: LD_INT 5
18891: PUSH
18892: LD_INT 8
18894: PUSH
18895: LD_INT 11
18897: PUSH
18898: LD_INT 12
18900: PUSH
18901: LD_INT 15
18903: PUSH
18904: LD_INT 16
18906: PUSH
18907: LD_INT 22
18909: PUSH
18910: LD_INT 23
18912: PUSH
18913: LD_INT 26
18915: PUSH
18916: LD_INT 36
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 101
18935: PUSH
18936: LD_INT 102
18938: PUSH
18939: LD_INT 105
18941: PUSH
18942: LD_INT 106
18944: PUSH
18945: LD_INT 108
18947: PUSH
18948: LD_INT 116
18950: PUSH
18951: LD_INT 117
18953: PUSH
18954: LD_INT 118
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: ST_TO_ADDR
18971: GO 21754
18973: LD_INT 5
18975: DOUBLE
18976: EQUAL
18977: IFTRUE 18981
18979: GO 19093
18981: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18982: LD_ADDR_VAR 0 2
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: LD_INT 4
18992: PUSH
18993: LD_INT 5
18995: PUSH
18996: LD_INT 6
18998: PUSH
18999: LD_INT 8
19001: PUSH
19002: LD_INT 11
19004: PUSH
19005: LD_INT 12
19007: PUSH
19008: LD_INT 15
19010: PUSH
19011: LD_INT 16
19013: PUSH
19014: LD_INT 22
19016: PUSH
19017: LD_INT 23
19019: PUSH
19020: LD_INT 25
19022: PUSH
19023: LD_INT 26
19025: PUSH
19026: LD_INT 36
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 101
19047: PUSH
19048: LD_INT 102
19050: PUSH
19051: LD_INT 105
19053: PUSH
19054: LD_INT 106
19056: PUSH
19057: LD_INT 108
19059: PUSH
19060: LD_INT 109
19062: PUSH
19063: LD_INT 112
19065: PUSH
19066: LD_INT 116
19068: PUSH
19069: LD_INT 117
19071: PUSH
19072: LD_INT 118
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: ST_TO_ADDR
19091: GO 21754
19093: LD_INT 6
19095: DOUBLE
19096: EQUAL
19097: IFTRUE 19101
19099: GO 19233
19101: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19102: LD_ADDR_VAR 0 2
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: LD_INT 4
19112: PUSH
19113: LD_INT 5
19115: PUSH
19116: LD_INT 6
19118: PUSH
19119: LD_INT 8
19121: PUSH
19122: LD_INT 11
19124: PUSH
19125: LD_INT 12
19127: PUSH
19128: LD_INT 15
19130: PUSH
19131: LD_INT 16
19133: PUSH
19134: LD_INT 20
19136: PUSH
19137: LD_INT 21
19139: PUSH
19140: LD_INT 22
19142: PUSH
19143: LD_INT 23
19145: PUSH
19146: LD_INT 25
19148: PUSH
19149: LD_INT 26
19151: PUSH
19152: LD_INT 30
19154: PUSH
19155: LD_INT 31
19157: PUSH
19158: LD_INT 32
19160: PUSH
19161: LD_INT 36
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 101
19187: PUSH
19188: LD_INT 102
19190: PUSH
19191: LD_INT 105
19193: PUSH
19194: LD_INT 106
19196: PUSH
19197: LD_INT 108
19199: PUSH
19200: LD_INT 109
19202: PUSH
19203: LD_INT 112
19205: PUSH
19206: LD_INT 116
19208: PUSH
19209: LD_INT 117
19211: PUSH
19212: LD_INT 118
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: ST_TO_ADDR
19231: GO 21754
19233: LD_INT 7
19235: DOUBLE
19236: EQUAL
19237: IFTRUE 19241
19239: GO 19353
19241: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19242: LD_ADDR_VAR 0 2
19246: PUSH
19247: LD_INT 2
19249: PUSH
19250: LD_INT 4
19252: PUSH
19253: LD_INT 5
19255: PUSH
19256: LD_INT 7
19258: PUSH
19259: LD_INT 11
19261: PUSH
19262: LD_INT 12
19264: PUSH
19265: LD_INT 15
19267: PUSH
19268: LD_INT 16
19270: PUSH
19271: LD_INT 20
19273: PUSH
19274: LD_INT 21
19276: PUSH
19277: LD_INT 22
19279: PUSH
19280: LD_INT 23
19282: PUSH
19283: LD_INT 25
19285: PUSH
19286: LD_INT 26
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 101
19307: PUSH
19308: LD_INT 102
19310: PUSH
19311: LD_INT 103
19313: PUSH
19314: LD_INT 105
19316: PUSH
19317: LD_INT 106
19319: PUSH
19320: LD_INT 108
19322: PUSH
19323: LD_INT 112
19325: PUSH
19326: LD_INT 116
19328: PUSH
19329: LD_INT 117
19331: PUSH
19332: LD_INT 118
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: ST_TO_ADDR
19351: GO 21754
19353: LD_INT 8
19355: DOUBLE
19356: EQUAL
19357: IFTRUE 19361
19359: GO 19501
19361: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19362: LD_ADDR_VAR 0 2
19366: PUSH
19367: LD_INT 2
19369: PUSH
19370: LD_INT 4
19372: PUSH
19373: LD_INT 5
19375: PUSH
19376: LD_INT 6
19378: PUSH
19379: LD_INT 7
19381: PUSH
19382: LD_INT 8
19384: PUSH
19385: LD_INT 11
19387: PUSH
19388: LD_INT 12
19390: PUSH
19391: LD_INT 15
19393: PUSH
19394: LD_INT 16
19396: PUSH
19397: LD_INT 20
19399: PUSH
19400: LD_INT 21
19402: PUSH
19403: LD_INT 22
19405: PUSH
19406: LD_INT 23
19408: PUSH
19409: LD_INT 25
19411: PUSH
19412: LD_INT 26
19414: PUSH
19415: LD_INT 30
19417: PUSH
19418: LD_INT 31
19420: PUSH
19421: LD_INT 32
19423: PUSH
19424: LD_INT 36
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 101
19451: PUSH
19452: LD_INT 102
19454: PUSH
19455: LD_INT 103
19457: PUSH
19458: LD_INT 105
19460: PUSH
19461: LD_INT 106
19463: PUSH
19464: LD_INT 108
19466: PUSH
19467: LD_INT 109
19469: PUSH
19470: LD_INT 112
19472: PUSH
19473: LD_INT 116
19475: PUSH
19476: LD_INT 117
19478: PUSH
19479: LD_INT 118
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: ST_TO_ADDR
19499: GO 21754
19501: LD_INT 9
19503: DOUBLE
19504: EQUAL
19505: IFTRUE 19509
19507: GO 19657
19509: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19510: LD_ADDR_VAR 0 2
19514: PUSH
19515: LD_INT 2
19517: PUSH
19518: LD_INT 4
19520: PUSH
19521: LD_INT 5
19523: PUSH
19524: LD_INT 6
19526: PUSH
19527: LD_INT 7
19529: PUSH
19530: LD_INT 8
19532: PUSH
19533: LD_INT 11
19535: PUSH
19536: LD_INT 12
19538: PUSH
19539: LD_INT 15
19541: PUSH
19542: LD_INT 16
19544: PUSH
19545: LD_INT 20
19547: PUSH
19548: LD_INT 21
19550: PUSH
19551: LD_INT 22
19553: PUSH
19554: LD_INT 23
19556: PUSH
19557: LD_INT 25
19559: PUSH
19560: LD_INT 26
19562: PUSH
19563: LD_INT 28
19565: PUSH
19566: LD_INT 30
19568: PUSH
19569: LD_INT 31
19571: PUSH
19572: LD_INT 32
19574: PUSH
19575: LD_INT 36
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 101
19603: PUSH
19604: LD_INT 102
19606: PUSH
19607: LD_INT 103
19609: PUSH
19610: LD_INT 105
19612: PUSH
19613: LD_INT 106
19615: PUSH
19616: LD_INT 108
19618: PUSH
19619: LD_INT 109
19621: PUSH
19622: LD_INT 112
19624: PUSH
19625: LD_INT 114
19627: PUSH
19628: LD_INT 116
19630: PUSH
19631: LD_INT 117
19633: PUSH
19634: LD_INT 118
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: ST_TO_ADDR
19655: GO 21754
19657: LD_INT 10
19659: DOUBLE
19660: EQUAL
19661: IFTRUE 19665
19663: GO 19861
19665: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19666: LD_ADDR_VAR 0 2
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: LD_INT 4
19676: PUSH
19677: LD_INT 5
19679: PUSH
19680: LD_INT 6
19682: PUSH
19683: LD_INT 7
19685: PUSH
19686: LD_INT 8
19688: PUSH
19689: LD_INT 9
19691: PUSH
19692: LD_INT 10
19694: PUSH
19695: LD_INT 11
19697: PUSH
19698: LD_INT 12
19700: PUSH
19701: LD_INT 13
19703: PUSH
19704: LD_INT 14
19706: PUSH
19707: LD_INT 15
19709: PUSH
19710: LD_INT 16
19712: PUSH
19713: LD_INT 17
19715: PUSH
19716: LD_INT 18
19718: PUSH
19719: LD_INT 19
19721: PUSH
19722: LD_INT 20
19724: PUSH
19725: LD_INT 21
19727: PUSH
19728: LD_INT 22
19730: PUSH
19731: LD_INT 23
19733: PUSH
19734: LD_INT 24
19736: PUSH
19737: LD_INT 25
19739: PUSH
19740: LD_INT 26
19742: PUSH
19743: LD_INT 28
19745: PUSH
19746: LD_INT 30
19748: PUSH
19749: LD_INT 31
19751: PUSH
19752: LD_INT 32
19754: PUSH
19755: LD_INT 36
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 101
19791: PUSH
19792: LD_INT 102
19794: PUSH
19795: LD_INT 103
19797: PUSH
19798: LD_INT 104
19800: PUSH
19801: LD_INT 105
19803: PUSH
19804: LD_INT 106
19806: PUSH
19807: LD_INT 107
19809: PUSH
19810: LD_INT 108
19812: PUSH
19813: LD_INT 109
19815: PUSH
19816: LD_INT 110
19818: PUSH
19819: LD_INT 111
19821: PUSH
19822: LD_INT 112
19824: PUSH
19825: LD_INT 114
19827: PUSH
19828: LD_INT 116
19830: PUSH
19831: LD_INT 117
19833: PUSH
19834: LD_INT 118
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: ST_TO_ADDR
19859: GO 21754
19861: LD_INT 11
19863: DOUBLE
19864: EQUAL
19865: IFTRUE 19869
19867: GO 20073
19869: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19870: LD_ADDR_VAR 0 2
19874: PUSH
19875: LD_INT 2
19877: PUSH
19878: LD_INT 3
19880: PUSH
19881: LD_INT 4
19883: PUSH
19884: LD_INT 5
19886: PUSH
19887: LD_INT 6
19889: PUSH
19890: LD_INT 7
19892: PUSH
19893: LD_INT 8
19895: PUSH
19896: LD_INT 9
19898: PUSH
19899: LD_INT 10
19901: PUSH
19902: LD_INT 11
19904: PUSH
19905: LD_INT 12
19907: PUSH
19908: LD_INT 13
19910: PUSH
19911: LD_INT 14
19913: PUSH
19914: LD_INT 15
19916: PUSH
19917: LD_INT 16
19919: PUSH
19920: LD_INT 17
19922: PUSH
19923: LD_INT 18
19925: PUSH
19926: LD_INT 19
19928: PUSH
19929: LD_INT 20
19931: PUSH
19932: LD_INT 21
19934: PUSH
19935: LD_INT 22
19937: PUSH
19938: LD_INT 23
19940: PUSH
19941: LD_INT 24
19943: PUSH
19944: LD_INT 25
19946: PUSH
19947: LD_INT 26
19949: PUSH
19950: LD_INT 28
19952: PUSH
19953: LD_INT 30
19955: PUSH
19956: LD_INT 31
19958: PUSH
19959: LD_INT 32
19961: PUSH
19962: LD_INT 34
19964: PUSH
19965: LD_INT 36
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 101
20003: PUSH
20004: LD_INT 102
20006: PUSH
20007: LD_INT 103
20009: PUSH
20010: LD_INT 104
20012: PUSH
20013: LD_INT 105
20015: PUSH
20016: LD_INT 106
20018: PUSH
20019: LD_INT 107
20021: PUSH
20022: LD_INT 108
20024: PUSH
20025: LD_INT 109
20027: PUSH
20028: LD_INT 110
20030: PUSH
20031: LD_INT 111
20033: PUSH
20034: LD_INT 112
20036: PUSH
20037: LD_INT 114
20039: PUSH
20040: LD_INT 116
20042: PUSH
20043: LD_INT 117
20045: PUSH
20046: LD_INT 118
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: ST_TO_ADDR
20071: GO 21754
20073: LD_INT 12
20075: DOUBLE
20076: EQUAL
20077: IFTRUE 20081
20079: GO 20301
20081: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20082: LD_ADDR_VAR 0 2
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: LD_INT 3
20095: PUSH
20096: LD_INT 4
20098: PUSH
20099: LD_INT 5
20101: PUSH
20102: LD_INT 6
20104: PUSH
20105: LD_INT 7
20107: PUSH
20108: LD_INT 8
20110: PUSH
20111: LD_INT 9
20113: PUSH
20114: LD_INT 10
20116: PUSH
20117: LD_INT 11
20119: PUSH
20120: LD_INT 12
20122: PUSH
20123: LD_INT 13
20125: PUSH
20126: LD_INT 14
20128: PUSH
20129: LD_INT 15
20131: PUSH
20132: LD_INT 16
20134: PUSH
20135: LD_INT 17
20137: PUSH
20138: LD_INT 18
20140: PUSH
20141: LD_INT 19
20143: PUSH
20144: LD_INT 20
20146: PUSH
20147: LD_INT 21
20149: PUSH
20150: LD_INT 22
20152: PUSH
20153: LD_INT 23
20155: PUSH
20156: LD_INT 24
20158: PUSH
20159: LD_INT 25
20161: PUSH
20162: LD_INT 26
20164: PUSH
20165: LD_INT 27
20167: PUSH
20168: LD_INT 28
20170: PUSH
20171: LD_INT 30
20173: PUSH
20174: LD_INT 31
20176: PUSH
20177: LD_INT 32
20179: PUSH
20180: LD_INT 33
20182: PUSH
20183: LD_INT 34
20185: PUSH
20186: LD_INT 36
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 101
20227: PUSH
20228: LD_INT 102
20230: PUSH
20231: LD_INT 103
20233: PUSH
20234: LD_INT 104
20236: PUSH
20237: LD_INT 105
20239: PUSH
20240: LD_INT 106
20242: PUSH
20243: LD_INT 107
20245: PUSH
20246: LD_INT 108
20248: PUSH
20249: LD_INT 109
20251: PUSH
20252: LD_INT 110
20254: PUSH
20255: LD_INT 111
20257: PUSH
20258: LD_INT 112
20260: PUSH
20261: LD_INT 113
20263: PUSH
20264: LD_INT 114
20266: PUSH
20267: LD_INT 116
20269: PUSH
20270: LD_INT 117
20272: PUSH
20273: LD_INT 118
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: ST_TO_ADDR
20299: GO 21754
20301: LD_INT 13
20303: DOUBLE
20304: EQUAL
20305: IFTRUE 20309
20307: GO 20517
20309: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20310: LD_ADDR_VAR 0 2
20314: PUSH
20315: LD_INT 1
20317: PUSH
20318: LD_INT 2
20320: PUSH
20321: LD_INT 3
20323: PUSH
20324: LD_INT 4
20326: PUSH
20327: LD_INT 5
20329: PUSH
20330: LD_INT 8
20332: PUSH
20333: LD_INT 9
20335: PUSH
20336: LD_INT 10
20338: PUSH
20339: LD_INT 11
20341: PUSH
20342: LD_INT 12
20344: PUSH
20345: LD_INT 14
20347: PUSH
20348: LD_INT 15
20350: PUSH
20351: LD_INT 16
20353: PUSH
20354: LD_INT 17
20356: PUSH
20357: LD_INT 18
20359: PUSH
20360: LD_INT 19
20362: PUSH
20363: LD_INT 20
20365: PUSH
20366: LD_INT 21
20368: PUSH
20369: LD_INT 22
20371: PUSH
20372: LD_INT 23
20374: PUSH
20375: LD_INT 24
20377: PUSH
20378: LD_INT 25
20380: PUSH
20381: LD_INT 26
20383: PUSH
20384: LD_INT 27
20386: PUSH
20387: LD_INT 28
20389: PUSH
20390: LD_INT 30
20392: PUSH
20393: LD_INT 31
20395: PUSH
20396: LD_INT 32
20398: PUSH
20399: LD_INT 33
20401: PUSH
20402: LD_INT 34
20404: PUSH
20405: LD_INT 36
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 101
20443: PUSH
20444: LD_INT 102
20446: PUSH
20447: LD_INT 103
20449: PUSH
20450: LD_INT 104
20452: PUSH
20453: LD_INT 105
20455: PUSH
20456: LD_INT 106
20458: PUSH
20459: LD_INT 107
20461: PUSH
20462: LD_INT 108
20464: PUSH
20465: LD_INT 109
20467: PUSH
20468: LD_INT 110
20470: PUSH
20471: LD_INT 111
20473: PUSH
20474: LD_INT 112
20476: PUSH
20477: LD_INT 113
20479: PUSH
20480: LD_INT 114
20482: PUSH
20483: LD_INT 116
20485: PUSH
20486: LD_INT 117
20488: PUSH
20489: LD_INT 118
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: ST_TO_ADDR
20515: GO 21754
20517: LD_INT 14
20519: DOUBLE
20520: EQUAL
20521: IFTRUE 20525
20523: GO 20749
20525: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20526: LD_ADDR_VAR 0 2
20530: PUSH
20531: LD_INT 1
20533: PUSH
20534: LD_INT 2
20536: PUSH
20537: LD_INT 3
20539: PUSH
20540: LD_INT 4
20542: PUSH
20543: LD_INT 5
20545: PUSH
20546: LD_INT 6
20548: PUSH
20549: LD_INT 7
20551: PUSH
20552: LD_INT 8
20554: PUSH
20555: LD_INT 9
20557: PUSH
20558: LD_INT 10
20560: PUSH
20561: LD_INT 11
20563: PUSH
20564: LD_INT 12
20566: PUSH
20567: LD_INT 13
20569: PUSH
20570: LD_INT 14
20572: PUSH
20573: LD_INT 15
20575: PUSH
20576: LD_INT 16
20578: PUSH
20579: LD_INT 17
20581: PUSH
20582: LD_INT 18
20584: PUSH
20585: LD_INT 19
20587: PUSH
20588: LD_INT 20
20590: PUSH
20591: LD_INT 21
20593: PUSH
20594: LD_INT 22
20596: PUSH
20597: LD_INT 23
20599: PUSH
20600: LD_INT 24
20602: PUSH
20603: LD_INT 25
20605: PUSH
20606: LD_INT 26
20608: PUSH
20609: LD_INT 27
20611: PUSH
20612: LD_INT 28
20614: PUSH
20615: LD_INT 29
20617: PUSH
20618: LD_INT 30
20620: PUSH
20621: LD_INT 31
20623: PUSH
20624: LD_INT 32
20626: PUSH
20627: LD_INT 33
20629: PUSH
20630: LD_INT 34
20632: PUSH
20633: LD_INT 36
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 101
20675: PUSH
20676: LD_INT 102
20678: PUSH
20679: LD_INT 103
20681: PUSH
20682: LD_INT 104
20684: PUSH
20685: LD_INT 105
20687: PUSH
20688: LD_INT 106
20690: PUSH
20691: LD_INT 107
20693: PUSH
20694: LD_INT 108
20696: PUSH
20697: LD_INT 109
20699: PUSH
20700: LD_INT 110
20702: PUSH
20703: LD_INT 111
20705: PUSH
20706: LD_INT 112
20708: PUSH
20709: LD_INT 113
20711: PUSH
20712: LD_INT 114
20714: PUSH
20715: LD_INT 116
20717: PUSH
20718: LD_INT 117
20720: PUSH
20721: LD_INT 118
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: ST_TO_ADDR
20747: GO 21754
20749: LD_INT 15
20751: DOUBLE
20752: EQUAL
20753: IFTRUE 20757
20755: GO 20981
20757: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20758: LD_ADDR_VAR 0 2
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: LD_INT 2
20768: PUSH
20769: LD_INT 3
20771: PUSH
20772: LD_INT 4
20774: PUSH
20775: LD_INT 5
20777: PUSH
20778: LD_INT 6
20780: PUSH
20781: LD_INT 7
20783: PUSH
20784: LD_INT 8
20786: PUSH
20787: LD_INT 9
20789: PUSH
20790: LD_INT 10
20792: PUSH
20793: LD_INT 11
20795: PUSH
20796: LD_INT 12
20798: PUSH
20799: LD_INT 13
20801: PUSH
20802: LD_INT 14
20804: PUSH
20805: LD_INT 15
20807: PUSH
20808: LD_INT 16
20810: PUSH
20811: LD_INT 17
20813: PUSH
20814: LD_INT 18
20816: PUSH
20817: LD_INT 19
20819: PUSH
20820: LD_INT 20
20822: PUSH
20823: LD_INT 21
20825: PUSH
20826: LD_INT 22
20828: PUSH
20829: LD_INT 23
20831: PUSH
20832: LD_INT 24
20834: PUSH
20835: LD_INT 25
20837: PUSH
20838: LD_INT 26
20840: PUSH
20841: LD_INT 27
20843: PUSH
20844: LD_INT 28
20846: PUSH
20847: LD_INT 29
20849: PUSH
20850: LD_INT 30
20852: PUSH
20853: LD_INT 31
20855: PUSH
20856: LD_INT 32
20858: PUSH
20859: LD_INT 33
20861: PUSH
20862: LD_INT 34
20864: PUSH
20865: LD_INT 36
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 101
20907: PUSH
20908: LD_INT 102
20910: PUSH
20911: LD_INT 103
20913: PUSH
20914: LD_INT 104
20916: PUSH
20917: LD_INT 105
20919: PUSH
20920: LD_INT 106
20922: PUSH
20923: LD_INT 107
20925: PUSH
20926: LD_INT 108
20928: PUSH
20929: LD_INT 109
20931: PUSH
20932: LD_INT 110
20934: PUSH
20935: LD_INT 111
20937: PUSH
20938: LD_INT 112
20940: PUSH
20941: LD_INT 113
20943: PUSH
20944: LD_INT 114
20946: PUSH
20947: LD_INT 116
20949: PUSH
20950: LD_INT 117
20952: PUSH
20953: LD_INT 118
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: ST_TO_ADDR
20979: GO 21754
20981: LD_INT 16
20983: DOUBLE
20984: EQUAL
20985: IFTRUE 20989
20987: GO 21125
20989: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20990: LD_ADDR_VAR 0 2
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: LD_INT 4
21000: PUSH
21001: LD_INT 5
21003: PUSH
21004: LD_INT 7
21006: PUSH
21007: LD_INT 11
21009: PUSH
21010: LD_INT 12
21012: PUSH
21013: LD_INT 15
21015: PUSH
21016: LD_INT 16
21018: PUSH
21019: LD_INT 20
21021: PUSH
21022: LD_INT 21
21024: PUSH
21025: LD_INT 22
21027: PUSH
21028: LD_INT 23
21030: PUSH
21031: LD_INT 25
21033: PUSH
21034: LD_INT 26
21036: PUSH
21037: LD_INT 30
21039: PUSH
21040: LD_INT 31
21042: PUSH
21043: LD_INT 32
21045: PUSH
21046: LD_INT 33
21048: PUSH
21049: LD_INT 34
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 101
21075: PUSH
21076: LD_INT 102
21078: PUSH
21079: LD_INT 103
21081: PUSH
21082: LD_INT 106
21084: PUSH
21085: LD_INT 108
21087: PUSH
21088: LD_INT 112
21090: PUSH
21091: LD_INT 113
21093: PUSH
21094: LD_INT 114
21096: PUSH
21097: LD_INT 116
21099: PUSH
21100: LD_INT 117
21102: PUSH
21103: LD_INT 118
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: ST_TO_ADDR
21123: GO 21754
21125: LD_INT 17
21127: DOUBLE
21128: EQUAL
21129: IFTRUE 21133
21131: GO 21357
21133: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21134: LD_ADDR_VAR 0 2
21138: PUSH
21139: LD_INT 1
21141: PUSH
21142: LD_INT 2
21144: PUSH
21145: LD_INT 3
21147: PUSH
21148: LD_INT 4
21150: PUSH
21151: LD_INT 5
21153: PUSH
21154: LD_INT 6
21156: PUSH
21157: LD_INT 7
21159: PUSH
21160: LD_INT 8
21162: PUSH
21163: LD_INT 9
21165: PUSH
21166: LD_INT 10
21168: PUSH
21169: LD_INT 11
21171: PUSH
21172: LD_INT 12
21174: PUSH
21175: LD_INT 13
21177: PUSH
21178: LD_INT 14
21180: PUSH
21181: LD_INT 15
21183: PUSH
21184: LD_INT 16
21186: PUSH
21187: LD_INT 17
21189: PUSH
21190: LD_INT 18
21192: PUSH
21193: LD_INT 19
21195: PUSH
21196: LD_INT 20
21198: PUSH
21199: LD_INT 21
21201: PUSH
21202: LD_INT 22
21204: PUSH
21205: LD_INT 23
21207: PUSH
21208: LD_INT 24
21210: PUSH
21211: LD_INT 25
21213: PUSH
21214: LD_INT 26
21216: PUSH
21217: LD_INT 27
21219: PUSH
21220: LD_INT 28
21222: PUSH
21223: LD_INT 29
21225: PUSH
21226: LD_INT 30
21228: PUSH
21229: LD_INT 31
21231: PUSH
21232: LD_INT 32
21234: PUSH
21235: LD_INT 33
21237: PUSH
21238: LD_INT 34
21240: PUSH
21241: LD_INT 36
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 101
21283: PUSH
21284: LD_INT 102
21286: PUSH
21287: LD_INT 103
21289: PUSH
21290: LD_INT 104
21292: PUSH
21293: LD_INT 105
21295: PUSH
21296: LD_INT 106
21298: PUSH
21299: LD_INT 107
21301: PUSH
21302: LD_INT 108
21304: PUSH
21305: LD_INT 109
21307: PUSH
21308: LD_INT 110
21310: PUSH
21311: LD_INT 111
21313: PUSH
21314: LD_INT 112
21316: PUSH
21317: LD_INT 113
21319: PUSH
21320: LD_INT 114
21322: PUSH
21323: LD_INT 116
21325: PUSH
21326: LD_INT 117
21328: PUSH
21329: LD_INT 118
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: ST_TO_ADDR
21355: GO 21754
21357: LD_INT 18
21359: DOUBLE
21360: EQUAL
21361: IFTRUE 21365
21363: GO 21513
21365: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21366: LD_ADDR_VAR 0 2
21370: PUSH
21371: LD_INT 2
21373: PUSH
21374: LD_INT 4
21376: PUSH
21377: LD_INT 5
21379: PUSH
21380: LD_INT 7
21382: PUSH
21383: LD_INT 11
21385: PUSH
21386: LD_INT 12
21388: PUSH
21389: LD_INT 15
21391: PUSH
21392: LD_INT 16
21394: PUSH
21395: LD_INT 20
21397: PUSH
21398: LD_INT 21
21400: PUSH
21401: LD_INT 22
21403: PUSH
21404: LD_INT 23
21406: PUSH
21407: LD_INT 25
21409: PUSH
21410: LD_INT 26
21412: PUSH
21413: LD_INT 30
21415: PUSH
21416: LD_INT 31
21418: PUSH
21419: LD_INT 32
21421: PUSH
21422: LD_INT 33
21424: PUSH
21425: LD_INT 34
21427: PUSH
21428: LD_INT 35
21430: PUSH
21431: LD_INT 36
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 101
21459: PUSH
21460: LD_INT 102
21462: PUSH
21463: LD_INT 103
21465: PUSH
21466: LD_INT 106
21468: PUSH
21469: LD_INT 108
21471: PUSH
21472: LD_INT 112
21474: PUSH
21475: LD_INT 113
21477: PUSH
21478: LD_INT 114
21480: PUSH
21481: LD_INT 115
21483: PUSH
21484: LD_INT 116
21486: PUSH
21487: LD_INT 117
21489: PUSH
21490: LD_INT 118
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: ST_TO_ADDR
21511: GO 21754
21513: LD_INT 19
21515: DOUBLE
21516: EQUAL
21517: IFTRUE 21521
21519: GO 21753
21521: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21522: LD_ADDR_VAR 0 2
21526: PUSH
21527: LD_INT 1
21529: PUSH
21530: LD_INT 2
21532: PUSH
21533: LD_INT 3
21535: PUSH
21536: LD_INT 4
21538: PUSH
21539: LD_INT 5
21541: PUSH
21542: LD_INT 6
21544: PUSH
21545: LD_INT 7
21547: PUSH
21548: LD_INT 8
21550: PUSH
21551: LD_INT 9
21553: PUSH
21554: LD_INT 10
21556: PUSH
21557: LD_INT 11
21559: PUSH
21560: LD_INT 12
21562: PUSH
21563: LD_INT 13
21565: PUSH
21566: LD_INT 14
21568: PUSH
21569: LD_INT 15
21571: PUSH
21572: LD_INT 16
21574: PUSH
21575: LD_INT 17
21577: PUSH
21578: LD_INT 18
21580: PUSH
21581: LD_INT 19
21583: PUSH
21584: LD_INT 20
21586: PUSH
21587: LD_INT 21
21589: PUSH
21590: LD_INT 22
21592: PUSH
21593: LD_INT 23
21595: PUSH
21596: LD_INT 24
21598: PUSH
21599: LD_INT 25
21601: PUSH
21602: LD_INT 26
21604: PUSH
21605: LD_INT 27
21607: PUSH
21608: LD_INT 28
21610: PUSH
21611: LD_INT 29
21613: PUSH
21614: LD_INT 30
21616: PUSH
21617: LD_INT 31
21619: PUSH
21620: LD_INT 32
21622: PUSH
21623: LD_INT 33
21625: PUSH
21626: LD_INT 34
21628: PUSH
21629: LD_INT 35
21631: PUSH
21632: LD_INT 36
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 101
21675: PUSH
21676: LD_INT 102
21678: PUSH
21679: LD_INT 103
21681: PUSH
21682: LD_INT 104
21684: PUSH
21685: LD_INT 105
21687: PUSH
21688: LD_INT 106
21690: PUSH
21691: LD_INT 107
21693: PUSH
21694: LD_INT 108
21696: PUSH
21697: LD_INT 109
21699: PUSH
21700: LD_INT 110
21702: PUSH
21703: LD_INT 111
21705: PUSH
21706: LD_INT 112
21708: PUSH
21709: LD_INT 113
21711: PUSH
21712: LD_INT 114
21714: PUSH
21715: LD_INT 115
21717: PUSH
21718: LD_INT 116
21720: PUSH
21721: LD_INT 117
21723: PUSH
21724: LD_INT 118
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: ST_TO_ADDR
21751: GO 21754
21753: POP
// end else
21754: GO 21985
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21756: LD_ADDR_VAR 0 2
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: LD_INT 3
21769: PUSH
21770: LD_INT 4
21772: PUSH
21773: LD_INT 5
21775: PUSH
21776: LD_INT 6
21778: PUSH
21779: LD_INT 7
21781: PUSH
21782: LD_INT 8
21784: PUSH
21785: LD_INT 9
21787: PUSH
21788: LD_INT 10
21790: PUSH
21791: LD_INT 11
21793: PUSH
21794: LD_INT 12
21796: PUSH
21797: LD_INT 13
21799: PUSH
21800: LD_INT 14
21802: PUSH
21803: LD_INT 15
21805: PUSH
21806: LD_INT 16
21808: PUSH
21809: LD_INT 17
21811: PUSH
21812: LD_INT 18
21814: PUSH
21815: LD_INT 19
21817: PUSH
21818: LD_INT 20
21820: PUSH
21821: LD_INT 21
21823: PUSH
21824: LD_INT 22
21826: PUSH
21827: LD_INT 23
21829: PUSH
21830: LD_INT 24
21832: PUSH
21833: LD_INT 25
21835: PUSH
21836: LD_INT 26
21838: PUSH
21839: LD_INT 27
21841: PUSH
21842: LD_INT 28
21844: PUSH
21845: LD_INT 29
21847: PUSH
21848: LD_INT 30
21850: PUSH
21851: LD_INT 31
21853: PUSH
21854: LD_INT 32
21856: PUSH
21857: LD_INT 33
21859: PUSH
21860: LD_INT 34
21862: PUSH
21863: LD_INT 35
21865: PUSH
21866: LD_INT 36
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 101
21909: PUSH
21910: LD_INT 102
21912: PUSH
21913: LD_INT 103
21915: PUSH
21916: LD_INT 104
21918: PUSH
21919: LD_INT 105
21921: PUSH
21922: LD_INT 106
21924: PUSH
21925: LD_INT 107
21927: PUSH
21928: LD_INT 108
21930: PUSH
21931: LD_INT 109
21933: PUSH
21934: LD_INT 110
21936: PUSH
21937: LD_INT 111
21939: PUSH
21940: LD_INT 112
21942: PUSH
21943: LD_INT 113
21945: PUSH
21946: LD_INT 114
21948: PUSH
21949: LD_INT 115
21951: PUSH
21952: LD_INT 116
21954: PUSH
21955: LD_INT 117
21957: PUSH
21958: LD_INT 118
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: ST_TO_ADDR
// if result then
21985: LD_VAR 0 2
21989: IFFALSE 22775
// begin normal :=  ;
21991: LD_ADDR_VAR 0 5
21995: PUSH
21996: LD_STRING 
21998: ST_TO_ADDR
// hardcore :=  ;
21999: LD_ADDR_VAR 0 6
22003: PUSH
22004: LD_STRING 
22006: ST_TO_ADDR
// active :=  ;
22007: LD_ADDR_VAR 0 7
22011: PUSH
22012: LD_STRING 
22014: ST_TO_ADDR
// for i = 1 to normalCounter do
22015: LD_ADDR_VAR 0 8
22019: PUSH
22020: DOUBLE
22021: LD_INT 1
22023: DEC
22024: ST_TO_ADDR
22025: LD_EXP 38
22029: PUSH
22030: FOR_TO
22031: IFFALSE 22132
// begin tmp := 0 ;
22033: LD_ADDR_VAR 0 3
22037: PUSH
22038: LD_STRING 0
22040: ST_TO_ADDR
// if result [ 1 ] then
22041: LD_VAR 0 2
22045: PUSH
22046: LD_INT 1
22048: ARRAY
22049: IFFALSE 22114
// if result [ 1 ] [ 1 ] = i then
22051: LD_VAR 0 2
22055: PUSH
22056: LD_INT 1
22058: ARRAY
22059: PUSH
22060: LD_INT 1
22062: ARRAY
22063: PUSH
22064: LD_VAR 0 8
22068: EQUAL
22069: IFFALSE 22114
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22071: LD_ADDR_VAR 0 2
22075: PUSH
22076: LD_VAR 0 2
22080: PPUSH
22081: LD_INT 1
22083: PPUSH
22084: LD_VAR 0 2
22088: PUSH
22089: LD_INT 1
22091: ARRAY
22092: PPUSH
22093: LD_INT 1
22095: PPUSH
22096: CALL_OW 3
22100: PPUSH
22101: CALL_OW 1
22105: ST_TO_ADDR
// tmp := 1 ;
22106: LD_ADDR_VAR 0 3
22110: PUSH
22111: LD_STRING 1
22113: ST_TO_ADDR
// end ; normal := normal & tmp ;
22114: LD_ADDR_VAR 0 5
22118: PUSH
22119: LD_VAR 0 5
22123: PUSH
22124: LD_VAR 0 3
22128: STR
22129: ST_TO_ADDR
// end ;
22130: GO 22030
22132: POP
22133: POP
// for i = 1 to hardcoreCounter do
22134: LD_ADDR_VAR 0 8
22138: PUSH
22139: DOUBLE
22140: LD_INT 1
22142: DEC
22143: ST_TO_ADDR
22144: LD_EXP 39
22148: PUSH
22149: FOR_TO
22150: IFFALSE 22255
// begin tmp := 0 ;
22152: LD_ADDR_VAR 0 3
22156: PUSH
22157: LD_STRING 0
22159: ST_TO_ADDR
// if result [ 2 ] then
22160: LD_VAR 0 2
22164: PUSH
22165: LD_INT 2
22167: ARRAY
22168: IFFALSE 22237
// if result [ 2 ] [ 1 ] = 100 + i then
22170: LD_VAR 0 2
22174: PUSH
22175: LD_INT 2
22177: ARRAY
22178: PUSH
22179: LD_INT 1
22181: ARRAY
22182: PUSH
22183: LD_INT 100
22185: PUSH
22186: LD_VAR 0 8
22190: PLUS
22191: EQUAL
22192: IFFALSE 22237
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22194: LD_ADDR_VAR 0 2
22198: PUSH
22199: LD_VAR 0 2
22203: PPUSH
22204: LD_INT 2
22206: PPUSH
22207: LD_VAR 0 2
22211: PUSH
22212: LD_INT 2
22214: ARRAY
22215: PPUSH
22216: LD_INT 1
22218: PPUSH
22219: CALL_OW 3
22223: PPUSH
22224: CALL_OW 1
22228: ST_TO_ADDR
// tmp := 1 ;
22229: LD_ADDR_VAR 0 3
22233: PUSH
22234: LD_STRING 1
22236: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22237: LD_ADDR_VAR 0 6
22241: PUSH
22242: LD_VAR 0 6
22246: PUSH
22247: LD_VAR 0 3
22251: STR
22252: ST_TO_ADDR
// end ;
22253: GO 22149
22255: POP
22256: POP
// if isGameLoad then
22257: LD_VAR 0 1
22261: IFFALSE 22736
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22263: LD_ADDR_VAR 0 4
22267: PUSH
22268: LD_EXP 42
22272: PUSH
22273: LD_EXP 41
22277: PUSH
22278: LD_EXP 43
22282: PUSH
22283: LD_EXP 40
22287: PUSH
22288: LD_EXP 44
22292: PUSH
22293: LD_EXP 45
22297: PUSH
22298: LD_EXP 46
22302: PUSH
22303: LD_EXP 47
22307: PUSH
22308: LD_EXP 48
22312: PUSH
22313: LD_EXP 49
22317: PUSH
22318: LD_EXP 50
22322: PUSH
22323: LD_EXP 51
22327: PUSH
22328: LD_EXP 52
22332: PUSH
22333: LD_EXP 53
22337: PUSH
22338: LD_EXP 61
22342: PUSH
22343: LD_EXP 62
22347: PUSH
22348: LD_EXP 63
22352: PUSH
22353: LD_EXP 64
22357: PUSH
22358: LD_EXP 66
22362: PUSH
22363: LD_EXP 67
22367: PUSH
22368: LD_EXP 68
22372: PUSH
22373: LD_EXP 71
22377: PUSH
22378: LD_EXP 73
22382: PUSH
22383: LD_EXP 74
22387: PUSH
22388: LD_EXP 75
22392: PUSH
22393: LD_EXP 77
22397: PUSH
22398: LD_EXP 78
22402: PUSH
22403: LD_EXP 81
22407: PUSH
22408: LD_EXP 82
22412: PUSH
22413: LD_EXP 83
22417: PUSH
22418: LD_EXP 84
22422: PUSH
22423: LD_EXP 85
22427: PUSH
22428: LD_EXP 86
22432: PUSH
22433: LD_EXP 87
22437: PUSH
22438: LD_EXP 88
22442: PUSH
22443: LD_EXP 89
22447: PUSH
22448: LD_EXP 54
22452: PUSH
22453: LD_EXP 55
22457: PUSH
22458: LD_EXP 58
22462: PUSH
22463: LD_EXP 59
22467: PUSH
22468: LD_EXP 60
22472: PUSH
22473: LD_EXP 56
22477: PUSH
22478: LD_EXP 57
22482: PUSH
22483: LD_EXP 65
22487: PUSH
22488: LD_EXP 69
22492: PUSH
22493: LD_EXP 70
22497: PUSH
22498: LD_EXP 72
22502: PUSH
22503: LD_EXP 76
22507: PUSH
22508: LD_EXP 79
22512: PUSH
22513: LD_EXP 80
22517: PUSH
22518: LD_EXP 90
22522: PUSH
22523: LD_EXP 91
22527: PUSH
22528: LD_EXP 92
22532: PUSH
22533: LD_EXP 93
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: ST_TO_ADDR
// tmp :=  ;
22594: LD_ADDR_VAR 0 3
22598: PUSH
22599: LD_STRING 
22601: ST_TO_ADDR
// for i = 1 to normalCounter do
22602: LD_ADDR_VAR 0 8
22606: PUSH
22607: DOUBLE
22608: LD_INT 1
22610: DEC
22611: ST_TO_ADDR
22612: LD_EXP 38
22616: PUSH
22617: FOR_TO
22618: IFFALSE 22654
// begin if flags [ i ] then
22620: LD_VAR 0 4
22624: PUSH
22625: LD_VAR 0 8
22629: ARRAY
22630: IFFALSE 22652
// tmp := tmp & i & ; ;
22632: LD_ADDR_VAR 0 3
22636: PUSH
22637: LD_VAR 0 3
22641: PUSH
22642: LD_VAR 0 8
22646: STR
22647: PUSH
22648: LD_STRING ;
22650: STR
22651: ST_TO_ADDR
// end ;
22652: GO 22617
22654: POP
22655: POP
// for i = 1 to hardcoreCounter do
22656: LD_ADDR_VAR 0 8
22660: PUSH
22661: DOUBLE
22662: LD_INT 1
22664: DEC
22665: ST_TO_ADDR
22666: LD_EXP 39
22670: PUSH
22671: FOR_TO
22672: IFFALSE 22718
// begin if flags [ normalCounter + i ] then
22674: LD_VAR 0 4
22678: PUSH
22679: LD_EXP 38
22683: PUSH
22684: LD_VAR 0 8
22688: PLUS
22689: ARRAY
22690: IFFALSE 22716
// tmp := tmp & ( 100 + i ) & ; ;
22692: LD_ADDR_VAR 0 3
22696: PUSH
22697: LD_VAR 0 3
22701: PUSH
22702: LD_INT 100
22704: PUSH
22705: LD_VAR 0 8
22709: PLUS
22710: STR
22711: PUSH
22712: LD_STRING ;
22714: STR
22715: ST_TO_ADDR
// end ;
22716: GO 22671
22718: POP
22719: POP
// if tmp then
22720: LD_VAR 0 3
22724: IFFALSE 22736
// active := tmp ;
22726: LD_ADDR_VAR 0 7
22730: PUSH
22731: LD_VAR 0 3
22735: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22736: LD_STRING getStreamItemsFromMission("
22738: PUSH
22739: LD_VAR 0 5
22743: STR
22744: PUSH
22745: LD_STRING ","
22747: STR
22748: PUSH
22749: LD_VAR 0 6
22753: STR
22754: PUSH
22755: LD_STRING ","
22757: STR
22758: PUSH
22759: LD_VAR 0 7
22763: STR
22764: PUSH
22765: LD_STRING ")
22767: STR
22768: PPUSH
22769: CALL_OW 559
// end else
22773: GO 22782
// ToLua ( getStreamItemsFromMission("","","") ) ;
22775: LD_STRING getStreamItemsFromMission("","","")
22777: PPUSH
22778: CALL_OW 559
// end ;
22782: LD_VAR 0 2
22786: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22787: LD_EXP 37
22791: PUSH
22792: LD_EXP 42
22796: AND
22797: IFFALSE 22921
22799: GO 22801
22801: DISABLE
22802: LD_INT 0
22804: PPUSH
22805: PPUSH
// begin enable ;
22806: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22807: LD_ADDR_VAR 0 2
22811: PUSH
22812: LD_INT 22
22814: PUSH
22815: LD_OWVAR 2
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 34
22829: PUSH
22830: LD_INT 7
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 34
22839: PUSH
22840: LD_INT 45
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 34
22849: PUSH
22850: LD_INT 28
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 34
22859: PUSH
22860: LD_INT 47
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PPUSH
22878: CALL_OW 69
22882: ST_TO_ADDR
// if not tmp then
22883: LD_VAR 0 2
22887: NOT
22888: IFFALSE 22892
// exit ;
22890: GO 22921
// for i in tmp do
22892: LD_ADDR_VAR 0 1
22896: PUSH
22897: LD_VAR 0 2
22901: PUSH
22902: FOR_IN
22903: IFFALSE 22919
// begin SetLives ( i , 0 ) ;
22905: LD_VAR 0 1
22909: PPUSH
22910: LD_INT 0
22912: PPUSH
22913: CALL_OW 234
// end ;
22917: GO 22902
22919: POP
22920: POP
// end ;
22921: PPOPN 2
22923: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22924: LD_EXP 37
22928: PUSH
22929: LD_EXP 43
22933: AND
22934: IFFALSE 23018
22936: GO 22938
22938: DISABLE
22939: LD_INT 0
22941: PPUSH
22942: PPUSH
// begin enable ;
22943: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22944: LD_ADDR_VAR 0 2
22948: PUSH
22949: LD_INT 22
22951: PUSH
22952: LD_OWVAR 2
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 32
22963: PUSH
22964: LD_INT 3
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PPUSH
22975: CALL_OW 69
22979: ST_TO_ADDR
// if not tmp then
22980: LD_VAR 0 2
22984: NOT
22985: IFFALSE 22989
// exit ;
22987: GO 23018
// for i in tmp do
22989: LD_ADDR_VAR 0 1
22993: PUSH
22994: LD_VAR 0 2
22998: PUSH
22999: FOR_IN
23000: IFFALSE 23016
// begin SetLives ( i , 0 ) ;
23002: LD_VAR 0 1
23006: PPUSH
23007: LD_INT 0
23009: PPUSH
23010: CALL_OW 234
// end ;
23014: GO 22999
23016: POP
23017: POP
// end ;
23018: PPOPN 2
23020: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23021: LD_EXP 37
23025: PUSH
23026: LD_EXP 40
23030: AND
23031: IFFALSE 23124
23033: GO 23035
23035: DISABLE
23036: LD_INT 0
23038: PPUSH
// begin enable ;
23039: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23040: LD_ADDR_VAR 0 1
23044: PUSH
23045: LD_INT 22
23047: PUSH
23048: LD_OWVAR 2
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 2
23059: PUSH
23060: LD_INT 25
23062: PUSH
23063: LD_INT 5
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 25
23072: PUSH
23073: LD_INT 9
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 25
23082: PUSH
23083: LD_INT 8
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PPUSH
23100: CALL_OW 69
23104: PUSH
23105: FOR_IN
23106: IFFALSE 23122
// begin SetClass ( i , 1 ) ;
23108: LD_VAR 0 1
23112: PPUSH
23113: LD_INT 1
23115: PPUSH
23116: CALL_OW 336
// end ;
23120: GO 23105
23122: POP
23123: POP
// end ;
23124: PPOPN 1
23126: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23127: LD_EXP 37
23131: PUSH
23132: LD_EXP 41
23136: AND
23137: PUSH
23138: LD_OWVAR 65
23142: PUSH
23143: LD_INT 7
23145: LESS
23146: AND
23147: IFFALSE 23161
23149: GO 23151
23151: DISABLE
// begin enable ;
23152: ENABLE
// game_speed := 7 ;
23153: LD_ADDR_OWVAR 65
23157: PUSH
23158: LD_INT 7
23160: ST_TO_ADDR
// end ;
23161: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23162: LD_EXP 37
23166: PUSH
23167: LD_EXP 44
23171: AND
23172: IFFALSE 23374
23174: GO 23176
23176: DISABLE
23177: LD_INT 0
23179: PPUSH
23180: PPUSH
23181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23182: LD_ADDR_VAR 0 3
23186: PUSH
23187: LD_INT 81
23189: PUSH
23190: LD_OWVAR 2
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 21
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PPUSH
23213: CALL_OW 69
23217: ST_TO_ADDR
// if not tmp then
23218: LD_VAR 0 3
23222: NOT
23223: IFFALSE 23227
// exit ;
23225: GO 23374
// if tmp > 5 then
23227: LD_VAR 0 3
23231: PUSH
23232: LD_INT 5
23234: GREATER
23235: IFFALSE 23247
// k := 5 else
23237: LD_ADDR_VAR 0 2
23241: PUSH
23242: LD_INT 5
23244: ST_TO_ADDR
23245: GO 23257
// k := tmp ;
23247: LD_ADDR_VAR 0 2
23251: PUSH
23252: LD_VAR 0 3
23256: ST_TO_ADDR
// for i := 1 to k do
23257: LD_ADDR_VAR 0 1
23261: PUSH
23262: DOUBLE
23263: LD_INT 1
23265: DEC
23266: ST_TO_ADDR
23267: LD_VAR 0 2
23271: PUSH
23272: FOR_TO
23273: IFFALSE 23372
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23275: LD_VAR 0 3
23279: PUSH
23280: LD_VAR 0 1
23284: ARRAY
23285: PPUSH
23286: LD_VAR 0 1
23290: PUSH
23291: LD_INT 4
23293: MOD
23294: PUSH
23295: LD_INT 1
23297: PLUS
23298: PPUSH
23299: CALL_OW 259
23303: PUSH
23304: LD_INT 10
23306: LESS
23307: IFFALSE 23370
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23309: LD_VAR 0 3
23313: PUSH
23314: LD_VAR 0 1
23318: ARRAY
23319: PPUSH
23320: LD_VAR 0 1
23324: PUSH
23325: LD_INT 4
23327: MOD
23328: PUSH
23329: LD_INT 1
23331: PLUS
23332: PPUSH
23333: LD_VAR 0 3
23337: PUSH
23338: LD_VAR 0 1
23342: ARRAY
23343: PPUSH
23344: LD_VAR 0 1
23348: PUSH
23349: LD_INT 4
23351: MOD
23352: PUSH
23353: LD_INT 1
23355: PLUS
23356: PPUSH
23357: CALL_OW 259
23361: PUSH
23362: LD_INT 1
23364: PLUS
23365: PPUSH
23366: CALL_OW 237
23370: GO 23272
23372: POP
23373: POP
// end ;
23374: PPOPN 3
23376: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23377: LD_EXP 37
23381: PUSH
23382: LD_EXP 45
23386: AND
23387: IFFALSE 23407
23389: GO 23391
23391: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23392: LD_INT 4
23394: PPUSH
23395: LD_OWVAR 2
23399: PPUSH
23400: LD_INT 0
23402: PPUSH
23403: CALL_OW 324
23407: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23408: LD_EXP 37
23412: PUSH
23413: LD_EXP 74
23417: AND
23418: IFFALSE 23438
23420: GO 23422
23422: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23423: LD_INT 19
23425: PPUSH
23426: LD_OWVAR 2
23430: PPUSH
23431: LD_INT 0
23433: PPUSH
23434: CALL_OW 324
23438: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23439: LD_EXP 37
23443: PUSH
23444: LD_EXP 46
23448: AND
23449: IFFALSE 23551
23451: GO 23453
23453: DISABLE
23454: LD_INT 0
23456: PPUSH
23457: PPUSH
// begin enable ;
23458: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23459: LD_ADDR_VAR 0 2
23463: PUSH
23464: LD_INT 22
23466: PUSH
23467: LD_OWVAR 2
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: LD_INT 34
23481: PUSH
23482: LD_INT 11
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 34
23491: PUSH
23492: LD_INT 30
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PPUSH
23508: CALL_OW 69
23512: ST_TO_ADDR
// if not tmp then
23513: LD_VAR 0 2
23517: NOT
23518: IFFALSE 23522
// exit ;
23520: GO 23551
// for i in tmp do
23522: LD_ADDR_VAR 0 1
23526: PUSH
23527: LD_VAR 0 2
23531: PUSH
23532: FOR_IN
23533: IFFALSE 23549
// begin SetLives ( i , 0 ) ;
23535: LD_VAR 0 1
23539: PPUSH
23540: LD_INT 0
23542: PPUSH
23543: CALL_OW 234
// end ;
23547: GO 23532
23549: POP
23550: POP
// end ;
23551: PPOPN 2
23553: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23554: LD_EXP 37
23558: PUSH
23559: LD_EXP 47
23563: AND
23564: IFFALSE 23584
23566: GO 23568
23568: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23569: LD_INT 32
23571: PPUSH
23572: LD_OWVAR 2
23576: PPUSH
23577: LD_INT 0
23579: PPUSH
23580: CALL_OW 324
23584: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23585: LD_EXP 37
23589: PUSH
23590: LD_EXP 48
23594: AND
23595: IFFALSE 23776
23597: GO 23599
23599: DISABLE
23600: LD_INT 0
23602: PPUSH
23603: PPUSH
23604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23605: LD_ADDR_VAR 0 2
23609: PUSH
23610: LD_INT 22
23612: PUSH
23613: LD_OWVAR 2
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 33
23624: PUSH
23625: LD_INT 3
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PPUSH
23636: CALL_OW 69
23640: ST_TO_ADDR
// if not tmp then
23641: LD_VAR 0 2
23645: NOT
23646: IFFALSE 23650
// exit ;
23648: GO 23776
// side := 0 ;
23650: LD_ADDR_VAR 0 3
23654: PUSH
23655: LD_INT 0
23657: ST_TO_ADDR
// for i := 1 to 8 do
23658: LD_ADDR_VAR 0 1
23662: PUSH
23663: DOUBLE
23664: LD_INT 1
23666: DEC
23667: ST_TO_ADDR
23668: LD_INT 8
23670: PUSH
23671: FOR_TO
23672: IFFALSE 23720
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23674: LD_OWVAR 2
23678: PUSH
23679: LD_VAR 0 1
23683: NONEQUAL
23684: PUSH
23685: LD_OWVAR 2
23689: PPUSH
23690: LD_VAR 0 1
23694: PPUSH
23695: CALL_OW 81
23699: PUSH
23700: LD_INT 2
23702: EQUAL
23703: AND
23704: IFFALSE 23718
// begin side := i ;
23706: LD_ADDR_VAR 0 3
23710: PUSH
23711: LD_VAR 0 1
23715: ST_TO_ADDR
// break ;
23716: GO 23720
// end ;
23718: GO 23671
23720: POP
23721: POP
// if not side then
23722: LD_VAR 0 3
23726: NOT
23727: IFFALSE 23731
// exit ;
23729: GO 23776
// for i := 1 to tmp do
23731: LD_ADDR_VAR 0 1
23735: PUSH
23736: DOUBLE
23737: LD_INT 1
23739: DEC
23740: ST_TO_ADDR
23741: LD_VAR 0 2
23745: PUSH
23746: FOR_TO
23747: IFFALSE 23774
// if Prob ( 60 ) then
23749: LD_INT 60
23751: PPUSH
23752: CALL_OW 13
23756: IFFALSE 23772
// SetSide ( i , side ) ;
23758: LD_VAR 0 1
23762: PPUSH
23763: LD_VAR 0 3
23767: PPUSH
23768: CALL_OW 235
23772: GO 23746
23774: POP
23775: POP
// end ;
23776: PPOPN 3
23778: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23779: LD_EXP 37
23783: PUSH
23784: LD_EXP 50
23788: AND
23789: IFFALSE 23908
23791: GO 23793
23793: DISABLE
23794: LD_INT 0
23796: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23797: LD_ADDR_VAR 0 1
23801: PUSH
23802: LD_INT 22
23804: PUSH
23805: LD_OWVAR 2
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 21
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 3
23826: PUSH
23827: LD_INT 23
23829: PUSH
23830: LD_INT 0
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: LIST
23845: PPUSH
23846: CALL_OW 69
23850: PUSH
23851: FOR_IN
23852: IFFALSE 23906
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23854: LD_VAR 0 1
23858: PPUSH
23859: CALL_OW 257
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: LD_INT 2
23869: PUSH
23870: LD_INT 3
23872: PUSH
23873: LD_INT 4
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: IN
23882: IFFALSE 23904
// SetClass ( un , rand ( 1 , 4 ) ) ;
23884: LD_VAR 0 1
23888: PPUSH
23889: LD_INT 1
23891: PPUSH
23892: LD_INT 4
23894: PPUSH
23895: CALL_OW 12
23899: PPUSH
23900: CALL_OW 336
23904: GO 23851
23906: POP
23907: POP
// end ;
23908: PPOPN 1
23910: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23911: LD_EXP 37
23915: PUSH
23916: LD_EXP 49
23920: AND
23921: IFFALSE 24000
23923: GO 23925
23925: DISABLE
23926: LD_INT 0
23928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23929: LD_ADDR_VAR 0 1
23933: PUSH
23934: LD_INT 22
23936: PUSH
23937: LD_OWVAR 2
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 21
23948: PUSH
23949: LD_INT 3
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PPUSH
23960: CALL_OW 69
23964: ST_TO_ADDR
// if not tmp then
23965: LD_VAR 0 1
23969: NOT
23970: IFFALSE 23974
// exit ;
23972: GO 24000
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23974: LD_VAR 0 1
23978: PUSH
23979: LD_INT 1
23981: PPUSH
23982: LD_VAR 0 1
23986: PPUSH
23987: CALL_OW 12
23991: ARRAY
23992: PPUSH
23993: LD_INT 100
23995: PPUSH
23996: CALL_OW 234
// end ;
24000: PPOPN 1
24002: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24003: LD_EXP 37
24007: PUSH
24008: LD_EXP 51
24012: AND
24013: IFFALSE 24111
24015: GO 24017
24017: DISABLE
24018: LD_INT 0
24020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24021: LD_ADDR_VAR 0 1
24025: PUSH
24026: LD_INT 22
24028: PUSH
24029: LD_OWVAR 2
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 21
24040: PUSH
24041: LD_INT 1
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PPUSH
24052: CALL_OW 69
24056: ST_TO_ADDR
// if not tmp then
24057: LD_VAR 0 1
24061: NOT
24062: IFFALSE 24066
// exit ;
24064: GO 24111
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24066: LD_VAR 0 1
24070: PUSH
24071: LD_INT 1
24073: PPUSH
24074: LD_VAR 0 1
24078: PPUSH
24079: CALL_OW 12
24083: ARRAY
24084: PPUSH
24085: LD_INT 1
24087: PPUSH
24088: LD_INT 4
24090: PPUSH
24091: CALL_OW 12
24095: PPUSH
24096: LD_INT 3000
24098: PPUSH
24099: LD_INT 9000
24101: PPUSH
24102: CALL_OW 12
24106: PPUSH
24107: CALL_OW 492
// end ;
24111: PPOPN 1
24113: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24114: LD_EXP 37
24118: PUSH
24119: LD_EXP 52
24123: AND
24124: IFFALSE 24144
24126: GO 24128
24128: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24129: LD_INT 1
24131: PPUSH
24132: LD_OWVAR 2
24136: PPUSH
24137: LD_INT 0
24139: PPUSH
24140: CALL_OW 324
24144: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24145: LD_EXP 37
24149: PUSH
24150: LD_EXP 53
24154: AND
24155: IFFALSE 24238
24157: GO 24159
24159: DISABLE
24160: LD_INT 0
24162: PPUSH
24163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24164: LD_ADDR_VAR 0 2
24168: PUSH
24169: LD_INT 22
24171: PUSH
24172: LD_OWVAR 2
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 21
24183: PUSH
24184: LD_INT 3
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PPUSH
24195: CALL_OW 69
24199: ST_TO_ADDR
// if not tmp then
24200: LD_VAR 0 2
24204: NOT
24205: IFFALSE 24209
// exit ;
24207: GO 24238
// for i in tmp do
24209: LD_ADDR_VAR 0 1
24213: PUSH
24214: LD_VAR 0 2
24218: PUSH
24219: FOR_IN
24220: IFFALSE 24236
// SetBLevel ( i , 10 ) ;
24222: LD_VAR 0 1
24226: PPUSH
24227: LD_INT 10
24229: PPUSH
24230: CALL_OW 241
24234: GO 24219
24236: POP
24237: POP
// end ;
24238: PPOPN 2
24240: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24241: LD_EXP 37
24245: PUSH
24246: LD_EXP 54
24250: AND
24251: IFFALSE 24362
24253: GO 24255
24255: DISABLE
24256: LD_INT 0
24258: PPUSH
24259: PPUSH
24260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24261: LD_ADDR_VAR 0 3
24265: PUSH
24266: LD_INT 22
24268: PUSH
24269: LD_OWVAR 2
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 25
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PPUSH
24292: CALL_OW 69
24296: ST_TO_ADDR
// if not tmp then
24297: LD_VAR 0 3
24301: NOT
24302: IFFALSE 24306
// exit ;
24304: GO 24362
// un := tmp [ rand ( 1 , tmp ) ] ;
24306: LD_ADDR_VAR 0 2
24310: PUSH
24311: LD_VAR 0 3
24315: PUSH
24316: LD_INT 1
24318: PPUSH
24319: LD_VAR 0 3
24323: PPUSH
24324: CALL_OW 12
24328: ARRAY
24329: ST_TO_ADDR
// if Crawls ( un ) then
24330: LD_VAR 0 2
24334: PPUSH
24335: CALL_OW 318
24339: IFFALSE 24350
// ComWalk ( un ) ;
24341: LD_VAR 0 2
24345: PPUSH
24346: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24350: LD_VAR 0 2
24354: PPUSH
24355: LD_INT 5
24357: PPUSH
24358: CALL_OW 336
// end ;
24362: PPOPN 3
24364: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24365: LD_EXP 37
24369: PUSH
24370: LD_EXP 55
24374: AND
24375: PUSH
24376: LD_OWVAR 67
24380: PUSH
24381: LD_INT 4
24383: LESS
24384: AND
24385: IFFALSE 24404
24387: GO 24389
24389: DISABLE
// begin Difficulty := Difficulty + 1 ;
24390: LD_ADDR_OWVAR 67
24394: PUSH
24395: LD_OWVAR 67
24399: PUSH
24400: LD_INT 1
24402: PLUS
24403: ST_TO_ADDR
// end ;
24404: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24405: LD_EXP 37
24409: PUSH
24410: LD_EXP 56
24414: AND
24415: IFFALSE 24518
24417: GO 24419
24419: DISABLE
24420: LD_INT 0
24422: PPUSH
// begin for i := 1 to 5 do
24423: LD_ADDR_VAR 0 1
24427: PUSH
24428: DOUBLE
24429: LD_INT 1
24431: DEC
24432: ST_TO_ADDR
24433: LD_INT 5
24435: PUSH
24436: FOR_TO
24437: IFFALSE 24516
// begin uc_nation := nation_nature ;
24439: LD_ADDR_OWVAR 21
24443: PUSH
24444: LD_INT 0
24446: ST_TO_ADDR
// uc_side := 0 ;
24447: LD_ADDR_OWVAR 20
24451: PUSH
24452: LD_INT 0
24454: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24455: LD_ADDR_OWVAR 29
24459: PUSH
24460: LD_INT 12
24462: PUSH
24463: LD_INT 12
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: ST_TO_ADDR
// hc_agressivity := 20 ;
24470: LD_ADDR_OWVAR 35
24474: PUSH
24475: LD_INT 20
24477: ST_TO_ADDR
// hc_class := class_tiger ;
24478: LD_ADDR_OWVAR 28
24482: PUSH
24483: LD_INT 14
24485: ST_TO_ADDR
// hc_gallery :=  ;
24486: LD_ADDR_OWVAR 33
24490: PUSH
24491: LD_STRING 
24493: ST_TO_ADDR
// hc_name :=  ;
24494: LD_ADDR_OWVAR 26
24498: PUSH
24499: LD_STRING 
24501: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24502: CALL_OW 44
24506: PPUSH
24507: LD_INT 0
24509: PPUSH
24510: CALL_OW 51
// end ;
24514: GO 24436
24516: POP
24517: POP
// end ;
24518: PPOPN 1
24520: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24521: LD_EXP 37
24525: PUSH
24526: LD_EXP 57
24530: AND
24531: IFFALSE 24540
24533: GO 24535
24535: DISABLE
// StreamSibBomb ;
24536: CALL 24541 0 0
24540: END
// export function StreamSibBomb ; var i , x , y ; begin
24541: LD_INT 0
24543: PPUSH
24544: PPUSH
24545: PPUSH
24546: PPUSH
// result := false ;
24547: LD_ADDR_VAR 0 1
24551: PUSH
24552: LD_INT 0
24554: ST_TO_ADDR
// for i := 1 to 16 do
24555: LD_ADDR_VAR 0 2
24559: PUSH
24560: DOUBLE
24561: LD_INT 1
24563: DEC
24564: ST_TO_ADDR
24565: LD_INT 16
24567: PUSH
24568: FOR_TO
24569: IFFALSE 24768
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24571: LD_ADDR_VAR 0 3
24575: PUSH
24576: LD_INT 10
24578: PUSH
24579: LD_INT 20
24581: PUSH
24582: LD_INT 30
24584: PUSH
24585: LD_INT 40
24587: PUSH
24588: LD_INT 50
24590: PUSH
24591: LD_INT 60
24593: PUSH
24594: LD_INT 70
24596: PUSH
24597: LD_INT 80
24599: PUSH
24600: LD_INT 90
24602: PUSH
24603: LD_INT 100
24605: PUSH
24606: LD_INT 110
24608: PUSH
24609: LD_INT 120
24611: PUSH
24612: LD_INT 130
24614: PUSH
24615: LD_INT 140
24617: PUSH
24618: LD_INT 150
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 1
24640: PPUSH
24641: LD_INT 15
24643: PPUSH
24644: CALL_OW 12
24648: ARRAY
24649: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24650: LD_ADDR_VAR 0 4
24654: PUSH
24655: LD_INT 10
24657: PUSH
24658: LD_INT 20
24660: PUSH
24661: LD_INT 30
24663: PUSH
24664: LD_INT 40
24666: PUSH
24667: LD_INT 50
24669: PUSH
24670: LD_INT 60
24672: PUSH
24673: LD_INT 70
24675: PUSH
24676: LD_INT 80
24678: PUSH
24679: LD_INT 90
24681: PUSH
24682: LD_INT 100
24684: PUSH
24685: LD_INT 110
24687: PUSH
24688: LD_INT 120
24690: PUSH
24691: LD_INT 130
24693: PUSH
24694: LD_INT 140
24696: PUSH
24697: LD_INT 150
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 1
24719: PPUSH
24720: LD_INT 15
24722: PPUSH
24723: CALL_OW 12
24727: ARRAY
24728: ST_TO_ADDR
// if ValidHex ( x , y ) then
24729: LD_VAR 0 3
24733: PPUSH
24734: LD_VAR 0 4
24738: PPUSH
24739: CALL_OW 488
24743: IFFALSE 24766
// begin result := [ x , y ] ;
24745: LD_ADDR_VAR 0 1
24749: PUSH
24750: LD_VAR 0 3
24754: PUSH
24755: LD_VAR 0 4
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: ST_TO_ADDR
// break ;
24764: GO 24768
// end ; end ;
24766: GO 24568
24768: POP
24769: POP
// if result then
24770: LD_VAR 0 1
24774: IFFALSE 24834
// begin ToLua ( playSibBomb() ) ;
24776: LD_STRING playSibBomb()
24778: PPUSH
24779: CALL_OW 559
// wait ( 0 0$14 ) ;
24783: LD_INT 490
24785: PPUSH
24786: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24790: LD_VAR 0 1
24794: PUSH
24795: LD_INT 1
24797: ARRAY
24798: PPUSH
24799: LD_VAR 0 1
24803: PUSH
24804: LD_INT 2
24806: ARRAY
24807: PPUSH
24808: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24812: LD_VAR 0 1
24816: PUSH
24817: LD_INT 1
24819: ARRAY
24820: PPUSH
24821: LD_VAR 0 1
24825: PUSH
24826: LD_INT 2
24828: ARRAY
24829: PPUSH
24830: CALL_OW 429
// end ; end ;
24834: LD_VAR 0 1
24838: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24839: LD_EXP 37
24843: PUSH
24844: LD_EXP 59
24848: AND
24849: IFFALSE 24861
24851: GO 24853
24853: DISABLE
// YouLost (  ) ;
24854: LD_STRING 
24856: PPUSH
24857: CALL_OW 104
24861: END
// every 0 0$1 trigger StreamModeActive and sFog do
24862: LD_EXP 37
24866: PUSH
24867: LD_EXP 58
24871: AND
24872: IFFALSE 24886
24874: GO 24876
24876: DISABLE
// FogOff ( your_side ) ;
24877: LD_OWVAR 2
24881: PPUSH
24882: CALL_OW 344
24886: END
// every 0 0$1 trigger StreamModeActive and sSun do
24887: LD_EXP 37
24891: PUSH
24892: LD_EXP 60
24896: AND
24897: IFFALSE 24925
24899: GO 24901
24901: DISABLE
// begin solar_recharge_percent := 0 ;
24902: LD_ADDR_OWVAR 79
24906: PUSH
24907: LD_INT 0
24909: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24910: LD_INT 10500
24912: PPUSH
24913: CALL_OW 67
// solar_recharge_percent := 100 ;
24917: LD_ADDR_OWVAR 79
24921: PUSH
24922: LD_INT 100
24924: ST_TO_ADDR
// end ;
24925: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24926: LD_EXP 37
24930: PUSH
24931: LD_EXP 61
24935: AND
24936: IFFALSE 25175
24938: GO 24940
24940: DISABLE
24941: LD_INT 0
24943: PPUSH
24944: PPUSH
24945: PPUSH
// begin tmp := [ ] ;
24946: LD_ADDR_VAR 0 3
24950: PUSH
24951: EMPTY
24952: ST_TO_ADDR
// for i := 1 to 6 do
24953: LD_ADDR_VAR 0 1
24957: PUSH
24958: DOUBLE
24959: LD_INT 1
24961: DEC
24962: ST_TO_ADDR
24963: LD_INT 6
24965: PUSH
24966: FOR_TO
24967: IFFALSE 25072
// begin uc_nation := nation_nature ;
24969: LD_ADDR_OWVAR 21
24973: PUSH
24974: LD_INT 0
24976: ST_TO_ADDR
// uc_side := 0 ;
24977: LD_ADDR_OWVAR 20
24981: PUSH
24982: LD_INT 0
24984: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24985: LD_ADDR_OWVAR 29
24989: PUSH
24990: LD_INT 12
24992: PUSH
24993: LD_INT 12
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: ST_TO_ADDR
// hc_agressivity := 20 ;
25000: LD_ADDR_OWVAR 35
25004: PUSH
25005: LD_INT 20
25007: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25008: LD_ADDR_OWVAR 28
25012: PUSH
25013: LD_INT 17
25015: ST_TO_ADDR
// hc_gallery :=  ;
25016: LD_ADDR_OWVAR 33
25020: PUSH
25021: LD_STRING 
25023: ST_TO_ADDR
// hc_name :=  ;
25024: LD_ADDR_OWVAR 26
25028: PUSH
25029: LD_STRING 
25031: ST_TO_ADDR
// un := CreateHuman ;
25032: LD_ADDR_VAR 0 2
25036: PUSH
25037: CALL_OW 44
25041: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25042: LD_VAR 0 2
25046: PPUSH
25047: LD_INT 1
25049: PPUSH
25050: CALL_OW 51
// tmp := tmp ^ un ;
25054: LD_ADDR_VAR 0 3
25058: PUSH
25059: LD_VAR 0 3
25063: PUSH
25064: LD_VAR 0 2
25068: ADD
25069: ST_TO_ADDR
// end ;
25070: GO 24966
25072: POP
25073: POP
// repeat wait ( 0 0$1 ) ;
25074: LD_INT 35
25076: PPUSH
25077: CALL_OW 67
// for un in tmp do
25081: LD_ADDR_VAR 0 2
25085: PUSH
25086: LD_VAR 0 3
25090: PUSH
25091: FOR_IN
25092: IFFALSE 25166
// begin if IsDead ( un ) then
25094: LD_VAR 0 2
25098: PPUSH
25099: CALL_OW 301
25103: IFFALSE 25123
// begin tmp := tmp diff un ;
25105: LD_ADDR_VAR 0 3
25109: PUSH
25110: LD_VAR 0 3
25114: PUSH
25115: LD_VAR 0 2
25119: DIFF
25120: ST_TO_ADDR
// continue ;
25121: GO 25091
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25123: LD_VAR 0 2
25127: PPUSH
25128: LD_INT 3
25130: PUSH
25131: LD_INT 22
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PPUSH
25145: CALL_OW 69
25149: PPUSH
25150: LD_VAR 0 2
25154: PPUSH
25155: CALL_OW 74
25159: PPUSH
25160: CALL_OW 115
// end ;
25164: GO 25091
25166: POP
25167: POP
// until not tmp ;
25168: LD_VAR 0 3
25172: NOT
25173: IFFALSE 25074
// end ;
25175: PPOPN 3
25177: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25178: LD_EXP 37
25182: PUSH
25183: LD_EXP 62
25187: AND
25188: IFFALSE 25242
25190: GO 25192
25192: DISABLE
// begin ToLua ( displayTroll(); ) ;
25193: LD_STRING displayTroll();
25195: PPUSH
25196: CALL_OW 559
// wait ( 3 3$00 ) ;
25200: LD_INT 6300
25202: PPUSH
25203: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25207: LD_STRING hideTroll();
25209: PPUSH
25210: CALL_OW 559
// wait ( 1 1$00 ) ;
25214: LD_INT 2100
25216: PPUSH
25217: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25221: LD_STRING displayTroll();
25223: PPUSH
25224: CALL_OW 559
// wait ( 1 1$00 ) ;
25228: LD_INT 2100
25230: PPUSH
25231: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25235: LD_STRING hideTroll();
25237: PPUSH
25238: CALL_OW 559
// end ;
25242: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25243: LD_EXP 37
25247: PUSH
25248: LD_EXP 63
25252: AND
25253: IFFALSE 25316
25255: GO 25257
25257: DISABLE
25258: LD_INT 0
25260: PPUSH
// begin p := 0 ;
25261: LD_ADDR_VAR 0 1
25265: PUSH
25266: LD_INT 0
25268: ST_TO_ADDR
// repeat game_speed := 1 ;
25269: LD_ADDR_OWVAR 65
25273: PUSH
25274: LD_INT 1
25276: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25277: LD_INT 35
25279: PPUSH
25280: CALL_OW 67
// p := p + 1 ;
25284: LD_ADDR_VAR 0 1
25288: PUSH
25289: LD_VAR 0 1
25293: PUSH
25294: LD_INT 1
25296: PLUS
25297: ST_TO_ADDR
// until p >= 60 ;
25298: LD_VAR 0 1
25302: PUSH
25303: LD_INT 60
25305: GREATEREQUAL
25306: IFFALSE 25269
// game_speed := 4 ;
25308: LD_ADDR_OWVAR 65
25312: PUSH
25313: LD_INT 4
25315: ST_TO_ADDR
// end ;
25316: PPOPN 1
25318: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25319: LD_EXP 37
25323: PUSH
25324: LD_EXP 64
25328: AND
25329: IFFALSE 25475
25331: GO 25333
25333: DISABLE
25334: LD_INT 0
25336: PPUSH
25337: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25338: LD_ADDR_VAR 0 1
25342: PUSH
25343: LD_INT 22
25345: PUSH
25346: LD_OWVAR 2
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 2
25357: PUSH
25358: LD_INT 30
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 30
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: LIST
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PPUSH
25387: CALL_OW 69
25391: ST_TO_ADDR
// if not depot then
25392: LD_VAR 0 1
25396: NOT
25397: IFFALSE 25401
// exit ;
25399: GO 25475
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25401: LD_ADDR_VAR 0 2
25405: PUSH
25406: LD_VAR 0 1
25410: PUSH
25411: LD_INT 1
25413: PPUSH
25414: LD_VAR 0 1
25418: PPUSH
25419: CALL_OW 12
25423: ARRAY
25424: PPUSH
25425: CALL_OW 274
25429: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25430: LD_VAR 0 2
25434: PPUSH
25435: LD_INT 1
25437: PPUSH
25438: LD_INT 0
25440: PPUSH
25441: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25445: LD_VAR 0 2
25449: PPUSH
25450: LD_INT 2
25452: PPUSH
25453: LD_INT 0
25455: PPUSH
25456: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25460: LD_VAR 0 2
25464: PPUSH
25465: LD_INT 3
25467: PPUSH
25468: LD_INT 0
25470: PPUSH
25471: CALL_OW 277
// end ;
25475: PPOPN 2
25477: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25478: LD_EXP 37
25482: PUSH
25483: LD_EXP 65
25487: AND
25488: IFFALSE 25585
25490: GO 25492
25492: DISABLE
25493: LD_INT 0
25495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25496: LD_ADDR_VAR 0 1
25500: PUSH
25501: LD_INT 22
25503: PUSH
25504: LD_OWVAR 2
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 21
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 3
25525: PUSH
25526: LD_INT 23
25528: PUSH
25529: LD_INT 0
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: LIST
25544: PPUSH
25545: CALL_OW 69
25549: ST_TO_ADDR
// if not tmp then
25550: LD_VAR 0 1
25554: NOT
25555: IFFALSE 25559
// exit ;
25557: GO 25585
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25559: LD_VAR 0 1
25563: PUSH
25564: LD_INT 1
25566: PPUSH
25567: LD_VAR 0 1
25571: PPUSH
25572: CALL_OW 12
25576: ARRAY
25577: PPUSH
25578: LD_INT 200
25580: PPUSH
25581: CALL_OW 234
// end ;
25585: PPOPN 1
25587: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25588: LD_EXP 37
25592: PUSH
25593: LD_EXP 66
25597: AND
25598: IFFALSE 25677
25600: GO 25602
25602: DISABLE
25603: LD_INT 0
25605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25606: LD_ADDR_VAR 0 1
25610: PUSH
25611: LD_INT 22
25613: PUSH
25614: LD_OWVAR 2
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 21
25625: PUSH
25626: LD_INT 2
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PPUSH
25637: CALL_OW 69
25641: ST_TO_ADDR
// if not tmp then
25642: LD_VAR 0 1
25646: NOT
25647: IFFALSE 25651
// exit ;
25649: GO 25677
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25651: LD_VAR 0 1
25655: PUSH
25656: LD_INT 1
25658: PPUSH
25659: LD_VAR 0 1
25663: PPUSH
25664: CALL_OW 12
25668: ARRAY
25669: PPUSH
25670: LD_INT 60
25672: PPUSH
25673: CALL_OW 234
// end ;
25677: PPOPN 1
25679: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25680: LD_EXP 37
25684: PUSH
25685: LD_EXP 67
25689: AND
25690: IFFALSE 25789
25692: GO 25694
25694: DISABLE
25695: LD_INT 0
25697: PPUSH
25698: PPUSH
// begin enable ;
25699: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25700: LD_ADDR_VAR 0 1
25704: PUSH
25705: LD_INT 22
25707: PUSH
25708: LD_OWVAR 2
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 61
25719: PUSH
25720: EMPTY
25721: LIST
25722: PUSH
25723: LD_INT 33
25725: PUSH
25726: LD_INT 2
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: PPUSH
25738: CALL_OW 69
25742: ST_TO_ADDR
// if not tmp then
25743: LD_VAR 0 1
25747: NOT
25748: IFFALSE 25752
// exit ;
25750: GO 25789
// for i in tmp do
25752: LD_ADDR_VAR 0 2
25756: PUSH
25757: LD_VAR 0 1
25761: PUSH
25762: FOR_IN
25763: IFFALSE 25787
// if IsControledBy ( i ) then
25765: LD_VAR 0 2
25769: PPUSH
25770: CALL_OW 312
25774: IFFALSE 25785
// ComUnlink ( i ) ;
25776: LD_VAR 0 2
25780: PPUSH
25781: CALL_OW 136
25785: GO 25762
25787: POP
25788: POP
// end ;
25789: PPOPN 2
25791: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25792: LD_EXP 37
25796: PUSH
25797: LD_EXP 68
25801: AND
25802: IFFALSE 25942
25804: GO 25806
25806: DISABLE
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
// begin ToLua ( displayPowell(); ) ;
25811: LD_STRING displayPowell();
25813: PPUSH
25814: CALL_OW 559
// uc_side := 0 ;
25818: LD_ADDR_OWVAR 20
25822: PUSH
25823: LD_INT 0
25825: ST_TO_ADDR
// uc_nation := 2 ;
25826: LD_ADDR_OWVAR 21
25830: PUSH
25831: LD_INT 2
25833: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25834: LD_ADDR_OWVAR 37
25838: PUSH
25839: LD_INT 14
25841: ST_TO_ADDR
// vc_engine := engine_siberite ;
25842: LD_ADDR_OWVAR 39
25846: PUSH
25847: LD_INT 3
25849: ST_TO_ADDR
// vc_control := control_apeman ;
25850: LD_ADDR_OWVAR 38
25854: PUSH
25855: LD_INT 5
25857: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25858: LD_ADDR_OWVAR 40
25862: PUSH
25863: LD_INT 29
25865: ST_TO_ADDR
// un := CreateVehicle ;
25866: LD_ADDR_VAR 0 2
25870: PUSH
25871: CALL_OW 45
25875: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25876: LD_VAR 0 2
25880: PPUSH
25881: LD_INT 1
25883: PPUSH
25884: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25888: LD_INT 35
25890: PPUSH
25891: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25895: LD_VAR 0 2
25899: PPUSH
25900: LD_INT 22
25902: PUSH
25903: LD_OWVAR 2
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PPUSH
25912: CALL_OW 69
25916: PPUSH
25917: LD_VAR 0 2
25921: PPUSH
25922: CALL_OW 74
25926: PPUSH
25927: CALL_OW 115
// until IsDead ( un ) ;
25931: LD_VAR 0 2
25935: PPUSH
25936: CALL_OW 301
25940: IFFALSE 25888
// end ;
25942: PPOPN 2
25944: END
// every 0 0$1 trigger StreamModeActive and sStu do
25945: LD_EXP 37
25949: PUSH
25950: LD_EXP 76
25954: AND
25955: IFFALSE 25971
25957: GO 25959
25959: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25960: LD_STRING displayStucuk();
25962: PPUSH
25963: CALL_OW 559
// ResetFog ;
25967: CALL_OW 335
// end ;
25971: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25972: LD_EXP 37
25976: PUSH
25977: LD_EXP 69
25981: AND
25982: IFFALSE 26123
25984: GO 25986
25986: DISABLE
25987: LD_INT 0
25989: PPUSH
25990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25991: LD_ADDR_VAR 0 2
25995: PUSH
25996: LD_INT 22
25998: PUSH
25999: LD_OWVAR 2
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 21
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PPUSH
26022: CALL_OW 69
26026: ST_TO_ADDR
// if not tmp then
26027: LD_VAR 0 2
26031: NOT
26032: IFFALSE 26036
// exit ;
26034: GO 26123
// un := tmp [ rand ( 1 , tmp ) ] ;
26036: LD_ADDR_VAR 0 1
26040: PUSH
26041: LD_VAR 0 2
26045: PUSH
26046: LD_INT 1
26048: PPUSH
26049: LD_VAR 0 2
26053: PPUSH
26054: CALL_OW 12
26058: ARRAY
26059: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26060: LD_VAR 0 1
26064: PPUSH
26065: LD_INT 0
26067: PPUSH
26068: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26072: LD_VAR 0 1
26076: PPUSH
26077: LD_OWVAR 3
26081: PUSH
26082: LD_VAR 0 1
26086: DIFF
26087: PPUSH
26088: LD_VAR 0 1
26092: PPUSH
26093: CALL_OW 74
26097: PPUSH
26098: CALL_OW 115
// wait ( 0 0$20 ) ;
26102: LD_INT 700
26104: PPUSH
26105: CALL_OW 67
// SetSide ( un , your_side ) ;
26109: LD_VAR 0 1
26113: PPUSH
26114: LD_OWVAR 2
26118: PPUSH
26119: CALL_OW 235
// end ;
26123: PPOPN 2
26125: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26126: LD_EXP 37
26130: PUSH
26131: LD_EXP 70
26135: AND
26136: IFFALSE 26242
26138: GO 26140
26140: DISABLE
26141: LD_INT 0
26143: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26144: LD_ADDR_VAR 0 1
26148: PUSH
26149: LD_INT 22
26151: PUSH
26152: LD_OWVAR 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: LD_INT 30
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 30
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: LIST
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PPUSH
26193: CALL_OW 69
26197: ST_TO_ADDR
// if not depot then
26198: LD_VAR 0 1
26202: NOT
26203: IFFALSE 26207
// exit ;
26205: GO 26242
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26207: LD_VAR 0 1
26211: PUSH
26212: LD_INT 1
26214: ARRAY
26215: PPUSH
26216: CALL_OW 250
26220: PPUSH
26221: LD_VAR 0 1
26225: PUSH
26226: LD_INT 1
26228: ARRAY
26229: PPUSH
26230: CALL_OW 251
26234: PPUSH
26235: LD_INT 70
26237: PPUSH
26238: CALL_OW 495
// end ;
26242: PPOPN 1
26244: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26245: LD_EXP 37
26249: PUSH
26250: LD_EXP 71
26254: AND
26255: IFFALSE 26466
26257: GO 26259
26259: DISABLE
26260: LD_INT 0
26262: PPUSH
26263: PPUSH
26264: PPUSH
26265: PPUSH
26266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26267: LD_ADDR_VAR 0 5
26271: PUSH
26272: LD_INT 22
26274: PUSH
26275: LD_OWVAR 2
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 21
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PPUSH
26298: CALL_OW 69
26302: ST_TO_ADDR
// if not tmp then
26303: LD_VAR 0 5
26307: NOT
26308: IFFALSE 26312
// exit ;
26310: GO 26466
// for i in tmp do
26312: LD_ADDR_VAR 0 1
26316: PUSH
26317: LD_VAR 0 5
26321: PUSH
26322: FOR_IN
26323: IFFALSE 26464
// begin d := rand ( 0 , 5 ) ;
26325: LD_ADDR_VAR 0 4
26329: PUSH
26330: LD_INT 0
26332: PPUSH
26333: LD_INT 5
26335: PPUSH
26336: CALL_OW 12
26340: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26341: LD_ADDR_VAR 0 2
26345: PUSH
26346: LD_VAR 0 1
26350: PPUSH
26351: CALL_OW 250
26355: PPUSH
26356: LD_VAR 0 4
26360: PPUSH
26361: LD_INT 3
26363: PPUSH
26364: LD_INT 12
26366: PPUSH
26367: CALL_OW 12
26371: PPUSH
26372: CALL_OW 272
26376: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26377: LD_ADDR_VAR 0 3
26381: PUSH
26382: LD_VAR 0 1
26386: PPUSH
26387: CALL_OW 251
26391: PPUSH
26392: LD_VAR 0 4
26396: PPUSH
26397: LD_INT 3
26399: PPUSH
26400: LD_INT 12
26402: PPUSH
26403: CALL_OW 12
26407: PPUSH
26408: CALL_OW 273
26412: ST_TO_ADDR
// if ValidHex ( x , y ) then
26413: LD_VAR 0 2
26417: PPUSH
26418: LD_VAR 0 3
26422: PPUSH
26423: CALL_OW 488
26427: IFFALSE 26462
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26429: LD_VAR 0 1
26433: PPUSH
26434: LD_VAR 0 2
26438: PPUSH
26439: LD_VAR 0 3
26443: PPUSH
26444: LD_INT 3
26446: PPUSH
26447: LD_INT 6
26449: PPUSH
26450: CALL_OW 12
26454: PPUSH
26455: LD_INT 1
26457: PPUSH
26458: CALL_OW 483
// end ;
26462: GO 26322
26464: POP
26465: POP
// end ;
26466: PPOPN 5
26468: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26469: LD_EXP 37
26473: PUSH
26474: LD_EXP 72
26478: AND
26479: IFFALSE 26573
26481: GO 26483
26483: DISABLE
26484: LD_INT 0
26486: PPUSH
26487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26488: LD_ADDR_VAR 0 2
26492: PUSH
26493: LD_INT 22
26495: PUSH
26496: LD_OWVAR 2
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 32
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 21
26517: PUSH
26518: LD_INT 2
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: PPUSH
26530: CALL_OW 69
26534: ST_TO_ADDR
// if not tmp then
26535: LD_VAR 0 2
26539: NOT
26540: IFFALSE 26544
// exit ;
26542: GO 26573
// for i in tmp do
26544: LD_ADDR_VAR 0 1
26548: PUSH
26549: LD_VAR 0 2
26553: PUSH
26554: FOR_IN
26555: IFFALSE 26571
// SetFuel ( i , 0 ) ;
26557: LD_VAR 0 1
26561: PPUSH
26562: LD_INT 0
26564: PPUSH
26565: CALL_OW 240
26569: GO 26554
26571: POP
26572: POP
// end ;
26573: PPOPN 2
26575: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26576: LD_EXP 37
26580: PUSH
26581: LD_EXP 73
26585: AND
26586: IFFALSE 26652
26588: GO 26590
26590: DISABLE
26591: LD_INT 0
26593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26594: LD_ADDR_VAR 0 1
26598: PUSH
26599: LD_INT 22
26601: PUSH
26602: LD_OWVAR 2
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 30
26613: PUSH
26614: LD_INT 29
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PPUSH
26625: CALL_OW 69
26629: ST_TO_ADDR
// if not tmp then
26630: LD_VAR 0 1
26634: NOT
26635: IFFALSE 26639
// exit ;
26637: GO 26652
// DestroyUnit ( tmp [ 1 ] ) ;
26639: LD_VAR 0 1
26643: PUSH
26644: LD_INT 1
26646: ARRAY
26647: PPUSH
26648: CALL_OW 65
// end ;
26652: PPOPN 1
26654: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26655: LD_EXP 37
26659: PUSH
26660: LD_EXP 75
26664: AND
26665: IFFALSE 26794
26667: GO 26669
26669: DISABLE
26670: LD_INT 0
26672: PPUSH
// begin uc_side := 0 ;
26673: LD_ADDR_OWVAR 20
26677: PUSH
26678: LD_INT 0
26680: ST_TO_ADDR
// uc_nation := nation_arabian ;
26681: LD_ADDR_OWVAR 21
26685: PUSH
26686: LD_INT 2
26688: ST_TO_ADDR
// hc_gallery :=  ;
26689: LD_ADDR_OWVAR 33
26693: PUSH
26694: LD_STRING 
26696: ST_TO_ADDR
// hc_name :=  ;
26697: LD_ADDR_OWVAR 26
26701: PUSH
26702: LD_STRING 
26704: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26705: LD_INT 1
26707: PPUSH
26708: LD_INT 11
26710: PPUSH
26711: LD_INT 10
26713: PPUSH
26714: CALL_OW 380
// un := CreateHuman ;
26718: LD_ADDR_VAR 0 1
26722: PUSH
26723: CALL_OW 44
26727: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26728: LD_VAR 0 1
26732: PPUSH
26733: LD_INT 1
26735: PPUSH
26736: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26740: LD_INT 35
26742: PPUSH
26743: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26747: LD_VAR 0 1
26751: PPUSH
26752: LD_INT 22
26754: PUSH
26755: LD_OWVAR 2
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PPUSH
26764: CALL_OW 69
26768: PPUSH
26769: LD_VAR 0 1
26773: PPUSH
26774: CALL_OW 74
26778: PPUSH
26779: CALL_OW 115
// until IsDead ( un ) ;
26783: LD_VAR 0 1
26787: PPUSH
26788: CALL_OW 301
26792: IFFALSE 26740
// end ;
26794: PPOPN 1
26796: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26797: LD_EXP 37
26801: PUSH
26802: LD_EXP 77
26806: AND
26807: IFFALSE 26819
26809: GO 26811
26811: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26812: LD_STRING earthquake(getX(game), 0, 32)
26814: PPUSH
26815: CALL_OW 559
26819: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26820: LD_EXP 37
26824: PUSH
26825: LD_EXP 78
26829: AND
26830: IFFALSE 26921
26832: GO 26834
26834: DISABLE
26835: LD_INT 0
26837: PPUSH
// begin enable ;
26838: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26839: LD_ADDR_VAR 0 1
26843: PUSH
26844: LD_INT 22
26846: PUSH
26847: LD_OWVAR 2
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 21
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 33
26868: PUSH
26869: LD_INT 3
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: LIST
26880: PPUSH
26881: CALL_OW 69
26885: ST_TO_ADDR
// if not tmp then
26886: LD_VAR 0 1
26890: NOT
26891: IFFALSE 26895
// exit ;
26893: GO 26921
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26895: LD_VAR 0 1
26899: PUSH
26900: LD_INT 1
26902: PPUSH
26903: LD_VAR 0 1
26907: PPUSH
26908: CALL_OW 12
26912: ARRAY
26913: PPUSH
26914: LD_INT 1
26916: PPUSH
26917: CALL_OW 234
// end ;
26921: PPOPN 1
26923: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26924: LD_EXP 37
26928: PUSH
26929: LD_EXP 79
26933: AND
26934: IFFALSE 27075
26936: GO 26938
26938: DISABLE
26939: LD_INT 0
26941: PPUSH
26942: PPUSH
26943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26944: LD_ADDR_VAR 0 3
26948: PUSH
26949: LD_INT 22
26951: PUSH
26952: LD_OWVAR 2
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 25
26963: PUSH
26964: LD_INT 1
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PPUSH
26975: CALL_OW 69
26979: ST_TO_ADDR
// if not tmp then
26980: LD_VAR 0 3
26984: NOT
26985: IFFALSE 26989
// exit ;
26987: GO 27075
// un := tmp [ rand ( 1 , tmp ) ] ;
26989: LD_ADDR_VAR 0 2
26993: PUSH
26994: LD_VAR 0 3
26998: PUSH
26999: LD_INT 1
27001: PPUSH
27002: LD_VAR 0 3
27006: PPUSH
27007: CALL_OW 12
27011: ARRAY
27012: ST_TO_ADDR
// if Crawls ( un ) then
27013: LD_VAR 0 2
27017: PPUSH
27018: CALL_OW 318
27022: IFFALSE 27033
// ComWalk ( un ) ;
27024: LD_VAR 0 2
27028: PPUSH
27029: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27033: LD_VAR 0 2
27037: PPUSH
27038: LD_INT 9
27040: PPUSH
27041: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27045: LD_INT 28
27047: PPUSH
27048: LD_OWVAR 2
27052: PPUSH
27053: LD_INT 2
27055: PPUSH
27056: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27060: LD_INT 29
27062: PPUSH
27063: LD_OWVAR 2
27067: PPUSH
27068: LD_INT 2
27070: PPUSH
27071: CALL_OW 322
// end ;
27075: PPOPN 3
27077: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27078: LD_EXP 37
27082: PUSH
27083: LD_EXP 80
27087: AND
27088: IFFALSE 27199
27090: GO 27092
27092: DISABLE
27093: LD_INT 0
27095: PPUSH
27096: PPUSH
27097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27098: LD_ADDR_VAR 0 3
27102: PUSH
27103: LD_INT 22
27105: PUSH
27106: LD_OWVAR 2
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 25
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PPUSH
27129: CALL_OW 69
27133: ST_TO_ADDR
// if not tmp then
27134: LD_VAR 0 3
27138: NOT
27139: IFFALSE 27143
// exit ;
27141: GO 27199
// un := tmp [ rand ( 1 , tmp ) ] ;
27143: LD_ADDR_VAR 0 2
27147: PUSH
27148: LD_VAR 0 3
27152: PUSH
27153: LD_INT 1
27155: PPUSH
27156: LD_VAR 0 3
27160: PPUSH
27161: CALL_OW 12
27165: ARRAY
27166: ST_TO_ADDR
// if Crawls ( un ) then
27167: LD_VAR 0 2
27171: PPUSH
27172: CALL_OW 318
27176: IFFALSE 27187
// ComWalk ( un ) ;
27178: LD_VAR 0 2
27182: PPUSH
27183: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27187: LD_VAR 0 2
27191: PPUSH
27192: LD_INT 8
27194: PPUSH
27195: CALL_OW 336
// end ;
27199: PPOPN 3
27201: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27202: LD_EXP 37
27206: PUSH
27207: LD_EXP 81
27211: AND
27212: IFFALSE 27356
27214: GO 27216
27216: DISABLE
27217: LD_INT 0
27219: PPUSH
27220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27221: LD_ADDR_VAR 0 2
27225: PUSH
27226: LD_INT 22
27228: PUSH
27229: LD_OWVAR 2
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 21
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 2
27250: PUSH
27251: LD_INT 34
27253: PUSH
27254: LD_INT 12
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 34
27263: PUSH
27264: LD_INT 51
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 34
27273: PUSH
27274: LD_INT 32
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: LIST
27291: PPUSH
27292: CALL_OW 69
27296: ST_TO_ADDR
// if not tmp then
27297: LD_VAR 0 2
27301: NOT
27302: IFFALSE 27306
// exit ;
27304: GO 27356
// for i in tmp do
27306: LD_ADDR_VAR 0 1
27310: PUSH
27311: LD_VAR 0 2
27315: PUSH
27316: FOR_IN
27317: IFFALSE 27354
// if GetCargo ( i , mat_artifact ) = 0 then
27319: LD_VAR 0 1
27323: PPUSH
27324: LD_INT 4
27326: PPUSH
27327: CALL_OW 289
27331: PUSH
27332: LD_INT 0
27334: EQUAL
27335: IFFALSE 27352
// SetCargo ( i , mat_siberit , 100 ) ;
27337: LD_VAR 0 1
27341: PPUSH
27342: LD_INT 3
27344: PPUSH
27345: LD_INT 100
27347: PPUSH
27348: CALL_OW 290
27352: GO 27316
27354: POP
27355: POP
// end ;
27356: PPOPN 2
27358: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27359: LD_EXP 37
27363: PUSH
27364: LD_EXP 82
27368: AND
27369: IFFALSE 27552
27371: GO 27373
27373: DISABLE
27374: LD_INT 0
27376: PPUSH
27377: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27378: LD_ADDR_VAR 0 2
27382: PUSH
27383: LD_INT 22
27385: PUSH
27386: LD_OWVAR 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PPUSH
27395: CALL_OW 69
27399: ST_TO_ADDR
// if not tmp then
27400: LD_VAR 0 2
27404: NOT
27405: IFFALSE 27409
// exit ;
27407: GO 27552
// for i := 1 to 2 do
27409: LD_ADDR_VAR 0 1
27413: PUSH
27414: DOUBLE
27415: LD_INT 1
27417: DEC
27418: ST_TO_ADDR
27419: LD_INT 2
27421: PUSH
27422: FOR_TO
27423: IFFALSE 27550
// begin uc_side := your_side ;
27425: LD_ADDR_OWVAR 20
27429: PUSH
27430: LD_OWVAR 2
27434: ST_TO_ADDR
// uc_nation := nation_american ;
27435: LD_ADDR_OWVAR 21
27439: PUSH
27440: LD_INT 1
27442: ST_TO_ADDR
// vc_chassis := us_morphling ;
27443: LD_ADDR_OWVAR 37
27447: PUSH
27448: LD_INT 5
27450: ST_TO_ADDR
// vc_engine := engine_siberite ;
27451: LD_ADDR_OWVAR 39
27455: PUSH
27456: LD_INT 3
27458: ST_TO_ADDR
// vc_control := control_computer ;
27459: LD_ADDR_OWVAR 38
27463: PUSH
27464: LD_INT 3
27466: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27467: LD_ADDR_OWVAR 40
27471: PUSH
27472: LD_INT 10
27474: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27475: LD_VAR 0 2
27479: PUSH
27480: LD_INT 1
27482: ARRAY
27483: PPUSH
27484: CALL_OW 310
27488: NOT
27489: IFFALSE 27536
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27491: CALL_OW 45
27495: PPUSH
27496: LD_VAR 0 2
27500: PUSH
27501: LD_INT 1
27503: ARRAY
27504: PPUSH
27505: CALL_OW 250
27509: PPUSH
27510: LD_VAR 0 2
27514: PUSH
27515: LD_INT 1
27517: ARRAY
27518: PPUSH
27519: CALL_OW 251
27523: PPUSH
27524: LD_INT 12
27526: PPUSH
27527: LD_INT 1
27529: PPUSH
27530: CALL_OW 50
27534: GO 27548
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27536: CALL_OW 45
27540: PPUSH
27541: LD_INT 1
27543: PPUSH
27544: CALL_OW 51
// end ;
27548: GO 27422
27550: POP
27551: POP
// end ;
27552: PPOPN 2
27554: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27555: LD_EXP 37
27559: PUSH
27560: LD_EXP 83
27564: AND
27565: IFFALSE 27787
27567: GO 27569
27569: DISABLE
27570: LD_INT 0
27572: PPUSH
27573: PPUSH
27574: PPUSH
27575: PPUSH
27576: PPUSH
27577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27578: LD_ADDR_VAR 0 6
27582: PUSH
27583: LD_INT 22
27585: PUSH
27586: LD_OWVAR 2
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 21
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 3
27607: PUSH
27608: LD_INT 23
27610: PUSH
27611: LD_INT 0
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: PPUSH
27627: CALL_OW 69
27631: ST_TO_ADDR
// if not tmp then
27632: LD_VAR 0 6
27636: NOT
27637: IFFALSE 27641
// exit ;
27639: GO 27787
// s1 := rand ( 1 , 4 ) ;
27641: LD_ADDR_VAR 0 2
27645: PUSH
27646: LD_INT 1
27648: PPUSH
27649: LD_INT 4
27651: PPUSH
27652: CALL_OW 12
27656: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27657: LD_ADDR_VAR 0 4
27661: PUSH
27662: LD_VAR 0 6
27666: PUSH
27667: LD_INT 1
27669: ARRAY
27670: PPUSH
27671: LD_VAR 0 2
27675: PPUSH
27676: CALL_OW 259
27680: ST_TO_ADDR
// if s1 = 1 then
27681: LD_VAR 0 2
27685: PUSH
27686: LD_INT 1
27688: EQUAL
27689: IFFALSE 27709
// s2 := rand ( 2 , 4 ) else
27691: LD_ADDR_VAR 0 3
27695: PUSH
27696: LD_INT 2
27698: PPUSH
27699: LD_INT 4
27701: PPUSH
27702: CALL_OW 12
27706: ST_TO_ADDR
27707: GO 27717
// s2 := 1 ;
27709: LD_ADDR_VAR 0 3
27713: PUSH
27714: LD_INT 1
27716: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27717: LD_ADDR_VAR 0 5
27721: PUSH
27722: LD_VAR 0 6
27726: PUSH
27727: LD_INT 1
27729: ARRAY
27730: PPUSH
27731: LD_VAR 0 3
27735: PPUSH
27736: CALL_OW 259
27740: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27741: LD_VAR 0 6
27745: PUSH
27746: LD_INT 1
27748: ARRAY
27749: PPUSH
27750: LD_VAR 0 2
27754: PPUSH
27755: LD_VAR 0 5
27759: PPUSH
27760: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27764: LD_VAR 0 6
27768: PUSH
27769: LD_INT 1
27771: ARRAY
27772: PPUSH
27773: LD_VAR 0 3
27777: PPUSH
27778: LD_VAR 0 4
27782: PPUSH
27783: CALL_OW 237
// end ;
27787: PPOPN 6
27789: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27790: LD_EXP 37
27794: PUSH
27795: LD_EXP 84
27799: AND
27800: IFFALSE 27879
27802: GO 27804
27804: DISABLE
27805: LD_INT 0
27807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27808: LD_ADDR_VAR 0 1
27812: PUSH
27813: LD_INT 22
27815: PUSH
27816: LD_OWVAR 2
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 30
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PPUSH
27839: CALL_OW 69
27843: ST_TO_ADDR
// if not tmp then
27844: LD_VAR 0 1
27848: NOT
27849: IFFALSE 27853
// exit ;
27851: GO 27879
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27853: LD_VAR 0 1
27857: PUSH
27858: LD_INT 1
27860: PPUSH
27861: LD_VAR 0 1
27865: PPUSH
27866: CALL_OW 12
27870: ARRAY
27871: PPUSH
27872: LD_INT 1
27874: PPUSH
27875: CALL_OW 234
// end ;
27879: PPOPN 1
27881: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27882: LD_EXP 37
27886: PUSH
27887: LD_EXP 85
27891: AND
27892: IFFALSE 28004
27894: GO 27896
27896: DISABLE
27897: LD_INT 0
27899: PPUSH
27900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27901: LD_ADDR_VAR 0 2
27905: PUSH
27906: LD_INT 22
27908: PUSH
27909: LD_OWVAR 2
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 2
27920: PUSH
27921: LD_INT 30
27923: PUSH
27924: LD_INT 27
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 30
27933: PUSH
27934: LD_INT 26
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 30
27943: PUSH
27944: LD_INT 28
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PPUSH
27961: CALL_OW 69
27965: ST_TO_ADDR
// if not tmp then
27966: LD_VAR 0 2
27970: NOT
27971: IFFALSE 27975
// exit ;
27973: GO 28004
// for i in tmp do
27975: LD_ADDR_VAR 0 1
27979: PUSH
27980: LD_VAR 0 2
27984: PUSH
27985: FOR_IN
27986: IFFALSE 28002
// SetLives ( i , 1 ) ;
27988: LD_VAR 0 1
27992: PPUSH
27993: LD_INT 1
27995: PPUSH
27996: CALL_OW 234
28000: GO 27985
28002: POP
28003: POP
// end ;
28004: PPOPN 2
28006: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28007: LD_EXP 37
28011: PUSH
28012: LD_EXP 86
28016: AND
28017: IFFALSE 28304
28019: GO 28021
28021: DISABLE
28022: LD_INT 0
28024: PPUSH
28025: PPUSH
28026: PPUSH
// begin i := rand ( 1 , 7 ) ;
28027: LD_ADDR_VAR 0 1
28031: PUSH
28032: LD_INT 1
28034: PPUSH
28035: LD_INT 7
28037: PPUSH
28038: CALL_OW 12
28042: ST_TO_ADDR
// case i of 1 :
28043: LD_VAR 0 1
28047: PUSH
28048: LD_INT 1
28050: DOUBLE
28051: EQUAL
28052: IFTRUE 28056
28054: GO 28066
28056: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28057: LD_STRING earthquake(getX(game), 0, 32)
28059: PPUSH
28060: CALL_OW 559
28064: GO 28304
28066: LD_INT 2
28068: DOUBLE
28069: EQUAL
28070: IFTRUE 28074
28072: GO 28088
28074: POP
// begin ToLua ( displayStucuk(); ) ;
28075: LD_STRING displayStucuk();
28077: PPUSH
28078: CALL_OW 559
// ResetFog ;
28082: CALL_OW 335
// end ; 3 :
28086: GO 28304
28088: LD_INT 3
28090: DOUBLE
28091: EQUAL
28092: IFTRUE 28096
28094: GO 28200
28096: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28097: LD_ADDR_VAR 0 2
28101: PUSH
28102: LD_INT 22
28104: PUSH
28105: LD_OWVAR 2
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 25
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PPUSH
28128: CALL_OW 69
28132: ST_TO_ADDR
// if not tmp then
28133: LD_VAR 0 2
28137: NOT
28138: IFFALSE 28142
// exit ;
28140: GO 28304
// un := tmp [ rand ( 1 , tmp ) ] ;
28142: LD_ADDR_VAR 0 3
28146: PUSH
28147: LD_VAR 0 2
28151: PUSH
28152: LD_INT 1
28154: PPUSH
28155: LD_VAR 0 2
28159: PPUSH
28160: CALL_OW 12
28164: ARRAY
28165: ST_TO_ADDR
// if Crawls ( un ) then
28166: LD_VAR 0 3
28170: PPUSH
28171: CALL_OW 318
28175: IFFALSE 28186
// ComWalk ( un ) ;
28177: LD_VAR 0 3
28181: PPUSH
28182: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28186: LD_VAR 0 3
28190: PPUSH
28191: LD_INT 8
28193: PPUSH
28194: CALL_OW 336
// end ; 4 :
28198: GO 28304
28200: LD_INT 4
28202: DOUBLE
28203: EQUAL
28204: IFTRUE 28208
28206: GO 28282
28208: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28209: LD_ADDR_VAR 0 2
28213: PUSH
28214: LD_INT 22
28216: PUSH
28217: LD_OWVAR 2
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 30
28228: PUSH
28229: LD_INT 29
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PPUSH
28240: CALL_OW 69
28244: ST_TO_ADDR
// if not tmp then
28245: LD_VAR 0 2
28249: NOT
28250: IFFALSE 28254
// exit ;
28252: GO 28304
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28254: LD_VAR 0 2
28258: PUSH
28259: LD_INT 1
28261: ARRAY
28262: PPUSH
28263: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28267: LD_VAR 0 2
28271: PUSH
28272: LD_INT 1
28274: ARRAY
28275: PPUSH
28276: CALL_OW 65
// end ; 5 .. 7 :
28280: GO 28304
28282: LD_INT 5
28284: DOUBLE
28285: GREATEREQUAL
28286: IFFALSE 28294
28288: LD_INT 7
28290: DOUBLE
28291: LESSEQUAL
28292: IFTRUE 28296
28294: GO 28303
28296: POP
// StreamSibBomb ; end ;
28297: CALL 24541 0 0
28301: GO 28304
28303: POP
// end ;
28304: PPOPN 3
28306: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28307: LD_EXP 37
28311: PUSH
28312: LD_EXP 87
28316: AND
28317: IFFALSE 28473
28319: GO 28321
28321: DISABLE
28322: LD_INT 0
28324: PPUSH
28325: PPUSH
28326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28327: LD_ADDR_VAR 0 2
28331: PUSH
28332: LD_INT 81
28334: PUSH
28335: LD_OWVAR 2
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: LD_INT 21
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 21
28359: PUSH
28360: LD_INT 2
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PPUSH
28376: CALL_OW 69
28380: ST_TO_ADDR
// if not tmp then
28381: LD_VAR 0 2
28385: NOT
28386: IFFALSE 28390
// exit ;
28388: GO 28473
// p := 0 ;
28390: LD_ADDR_VAR 0 3
28394: PUSH
28395: LD_INT 0
28397: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28398: LD_INT 35
28400: PPUSH
28401: CALL_OW 67
// p := p + 1 ;
28405: LD_ADDR_VAR 0 3
28409: PUSH
28410: LD_VAR 0 3
28414: PUSH
28415: LD_INT 1
28417: PLUS
28418: ST_TO_ADDR
// for i in tmp do
28419: LD_ADDR_VAR 0 1
28423: PUSH
28424: LD_VAR 0 2
28428: PUSH
28429: FOR_IN
28430: IFFALSE 28461
// if GetLives ( i ) < 1000 then
28432: LD_VAR 0 1
28436: PPUSH
28437: CALL_OW 256
28441: PUSH
28442: LD_INT 1000
28444: LESS
28445: IFFALSE 28459
// SetLives ( i , 1000 ) ;
28447: LD_VAR 0 1
28451: PPUSH
28452: LD_INT 1000
28454: PPUSH
28455: CALL_OW 234
28459: GO 28429
28461: POP
28462: POP
// until p > 20 ;
28463: LD_VAR 0 3
28467: PUSH
28468: LD_INT 20
28470: GREATER
28471: IFFALSE 28398
// end ;
28473: PPOPN 3
28475: END
// every 0 0$1 trigger StreamModeActive and sTime do
28476: LD_EXP 37
28480: PUSH
28481: LD_EXP 88
28485: AND
28486: IFFALSE 28521
28488: GO 28490
28490: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28491: LD_INT 28
28493: PPUSH
28494: LD_OWVAR 2
28498: PPUSH
28499: LD_INT 2
28501: PPUSH
28502: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28506: LD_INT 30
28508: PPUSH
28509: LD_OWVAR 2
28513: PPUSH
28514: LD_INT 2
28516: PPUSH
28517: CALL_OW 322
// end ;
28521: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28522: LD_EXP 37
28526: PUSH
28527: LD_EXP 89
28531: AND
28532: IFFALSE 28653
28534: GO 28536
28536: DISABLE
28537: LD_INT 0
28539: PPUSH
28540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28541: LD_ADDR_VAR 0 2
28545: PUSH
28546: LD_INT 22
28548: PUSH
28549: LD_OWVAR 2
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 21
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 3
28570: PUSH
28571: LD_INT 23
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: LIST
28589: PPUSH
28590: CALL_OW 69
28594: ST_TO_ADDR
// if not tmp then
28595: LD_VAR 0 2
28599: NOT
28600: IFFALSE 28604
// exit ;
28602: GO 28653
// for i in tmp do
28604: LD_ADDR_VAR 0 1
28608: PUSH
28609: LD_VAR 0 2
28613: PUSH
28614: FOR_IN
28615: IFFALSE 28651
// begin if Crawls ( i ) then
28617: LD_VAR 0 1
28621: PPUSH
28622: CALL_OW 318
28626: IFFALSE 28637
// ComWalk ( i ) ;
28628: LD_VAR 0 1
28632: PPUSH
28633: CALL_OW 138
// SetClass ( i , 2 ) ;
28637: LD_VAR 0 1
28641: PPUSH
28642: LD_INT 2
28644: PPUSH
28645: CALL_OW 336
// end ;
28649: GO 28614
28651: POP
28652: POP
// end ;
28653: PPOPN 2
28655: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28656: LD_EXP 37
28660: PUSH
28661: LD_EXP 90
28665: AND
28666: IFFALSE 28954
28668: GO 28670
28670: DISABLE
28671: LD_INT 0
28673: PPUSH
28674: PPUSH
28675: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28676: LD_OWVAR 2
28680: PPUSH
28681: LD_INT 9
28683: PPUSH
28684: LD_INT 1
28686: PPUSH
28687: LD_INT 1
28689: PPUSH
28690: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28694: LD_INT 9
28696: PPUSH
28697: LD_OWVAR 2
28701: PPUSH
28702: CALL_OW 343
// uc_side := 9 ;
28706: LD_ADDR_OWVAR 20
28710: PUSH
28711: LD_INT 9
28713: ST_TO_ADDR
// uc_nation := 2 ;
28714: LD_ADDR_OWVAR 21
28718: PUSH
28719: LD_INT 2
28721: ST_TO_ADDR
// hc_name := Dark Warrior ;
28722: LD_ADDR_OWVAR 26
28726: PUSH
28727: LD_STRING Dark Warrior
28729: ST_TO_ADDR
// hc_gallery :=  ;
28730: LD_ADDR_OWVAR 33
28734: PUSH
28735: LD_STRING 
28737: ST_TO_ADDR
// hc_noskilllimit := true ;
28738: LD_ADDR_OWVAR 76
28742: PUSH
28743: LD_INT 1
28745: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28746: LD_ADDR_OWVAR 31
28750: PUSH
28751: LD_INT 30
28753: PUSH
28754: LD_INT 30
28756: PUSH
28757: LD_INT 30
28759: PUSH
28760: LD_INT 30
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: ST_TO_ADDR
// un := CreateHuman ;
28769: LD_ADDR_VAR 0 3
28773: PUSH
28774: CALL_OW 44
28778: ST_TO_ADDR
// hc_noskilllimit := false ;
28779: LD_ADDR_OWVAR 76
28783: PUSH
28784: LD_INT 0
28786: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28787: LD_VAR 0 3
28791: PPUSH
28792: LD_INT 1
28794: PPUSH
28795: CALL_OW 51
// ToLua ( playRanger() ) ;
28799: LD_STRING playRanger()
28801: PPUSH
28802: CALL_OW 559
// p := 0 ;
28806: LD_ADDR_VAR 0 2
28810: PUSH
28811: LD_INT 0
28813: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28814: LD_INT 35
28816: PPUSH
28817: CALL_OW 67
// p := p + 1 ;
28821: LD_ADDR_VAR 0 2
28825: PUSH
28826: LD_VAR 0 2
28830: PUSH
28831: LD_INT 1
28833: PLUS
28834: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28835: LD_VAR 0 3
28839: PPUSH
28840: CALL_OW 256
28844: PUSH
28845: LD_INT 1000
28847: LESS
28848: IFFALSE 28862
// SetLives ( un , 1000 ) ;
28850: LD_VAR 0 3
28854: PPUSH
28855: LD_INT 1000
28857: PPUSH
28858: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28862: LD_VAR 0 3
28866: PPUSH
28867: LD_INT 81
28869: PUSH
28870: LD_OWVAR 2
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 91
28881: PUSH
28882: LD_VAR 0 3
28886: PUSH
28887: LD_INT 30
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PPUSH
28899: CALL_OW 69
28903: PPUSH
28904: LD_VAR 0 3
28908: PPUSH
28909: CALL_OW 74
28913: PPUSH
28914: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28918: LD_VAR 0 2
28922: PUSH
28923: LD_INT 80
28925: GREATER
28926: PUSH
28927: LD_VAR 0 3
28931: PPUSH
28932: CALL_OW 301
28936: OR
28937: IFFALSE 28814
// if un then
28939: LD_VAR 0 3
28943: IFFALSE 28954
// RemoveUnit ( un ) ;
28945: LD_VAR 0 3
28949: PPUSH
28950: CALL_OW 64
// end ;
28954: PPOPN 3
28956: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28957: LD_EXP 91
28961: IFFALSE 29077
28963: GO 28965
28965: DISABLE
28966: LD_INT 0
28968: PPUSH
28969: PPUSH
28970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28971: LD_ADDR_VAR 0 2
28975: PUSH
28976: LD_INT 81
28978: PUSH
28979: LD_OWVAR 2
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 21
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PPUSH
29002: CALL_OW 69
29006: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29007: LD_STRING playComputer()
29009: PPUSH
29010: CALL_OW 559
// if not tmp then
29014: LD_VAR 0 2
29018: NOT
29019: IFFALSE 29023
// exit ;
29021: GO 29077
// for i in tmp do
29023: LD_ADDR_VAR 0 1
29027: PUSH
29028: LD_VAR 0 2
29032: PUSH
29033: FOR_IN
29034: IFFALSE 29075
// for j := 1 to 4 do
29036: LD_ADDR_VAR 0 3
29040: PUSH
29041: DOUBLE
29042: LD_INT 1
29044: DEC
29045: ST_TO_ADDR
29046: LD_INT 4
29048: PUSH
29049: FOR_TO
29050: IFFALSE 29071
// SetSkill ( i , j , 10 ) ;
29052: LD_VAR 0 1
29056: PPUSH
29057: LD_VAR 0 3
29061: PPUSH
29062: LD_INT 10
29064: PPUSH
29065: CALL_OW 237
29069: GO 29049
29071: POP
29072: POP
29073: GO 29033
29075: POP
29076: POP
// end ;
29077: PPOPN 3
29079: END
// every 0 0$1 trigger s30 do var i , tmp ;
29080: LD_EXP 92
29084: IFFALSE 29153
29086: GO 29088
29088: DISABLE
29089: LD_INT 0
29091: PPUSH
29092: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29093: LD_ADDR_VAR 0 2
29097: PUSH
29098: LD_INT 22
29100: PUSH
29101: LD_OWVAR 2
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PPUSH
29110: CALL_OW 69
29114: ST_TO_ADDR
// if not tmp then
29115: LD_VAR 0 2
29119: NOT
29120: IFFALSE 29124
// exit ;
29122: GO 29153
// for i in tmp do
29124: LD_ADDR_VAR 0 1
29128: PUSH
29129: LD_VAR 0 2
29133: PUSH
29134: FOR_IN
29135: IFFALSE 29151
// SetLives ( i , 300 ) ;
29137: LD_VAR 0 1
29141: PPUSH
29142: LD_INT 300
29144: PPUSH
29145: CALL_OW 234
29149: GO 29134
29151: POP
29152: POP
// end ;
29153: PPOPN 2
29155: END
// every 0 0$1 trigger s60 do var i , tmp ;
29156: LD_EXP 93
29160: IFFALSE 29229
29162: GO 29164
29164: DISABLE
29165: LD_INT 0
29167: PPUSH
29168: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29169: LD_ADDR_VAR 0 2
29173: PUSH
29174: LD_INT 22
29176: PUSH
29177: LD_OWVAR 2
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PPUSH
29186: CALL_OW 69
29190: ST_TO_ADDR
// if not tmp then
29191: LD_VAR 0 2
29195: NOT
29196: IFFALSE 29200
// exit ;
29198: GO 29229
// for i in tmp do
29200: LD_ADDR_VAR 0 1
29204: PUSH
29205: LD_VAR 0 2
29209: PUSH
29210: FOR_IN
29211: IFFALSE 29227
// SetLives ( i , 600 ) ;
29213: LD_VAR 0 1
29217: PPUSH
29218: LD_INT 600
29220: PPUSH
29221: CALL_OW 234
29225: GO 29210
29227: POP
29228: POP
// end ;
29229: PPOPN 2
29231: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29232: LD_INT 0
29234: PPUSH
// case cmd of 301 :
29235: LD_VAR 0 1
29239: PUSH
29240: LD_INT 301
29242: DOUBLE
29243: EQUAL
29244: IFTRUE 29248
29246: GO 29280
29248: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29249: LD_VAR 0 6
29253: PPUSH
29254: LD_VAR 0 7
29258: PPUSH
29259: LD_VAR 0 8
29263: PPUSH
29264: LD_VAR 0 4
29268: PPUSH
29269: LD_VAR 0 5
29273: PPUSH
29274: CALL 30489 0 5
29278: GO 29401
29280: LD_INT 302
29282: DOUBLE
29283: EQUAL
29284: IFTRUE 29288
29286: GO 29325
29288: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29289: LD_VAR 0 6
29293: PPUSH
29294: LD_VAR 0 7
29298: PPUSH
29299: LD_VAR 0 8
29303: PPUSH
29304: LD_VAR 0 9
29308: PPUSH
29309: LD_VAR 0 4
29313: PPUSH
29314: LD_VAR 0 5
29318: PPUSH
29319: CALL 30580 0 6
29323: GO 29401
29325: LD_INT 303
29327: DOUBLE
29328: EQUAL
29329: IFTRUE 29333
29331: GO 29370
29333: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29334: LD_VAR 0 6
29338: PPUSH
29339: LD_VAR 0 7
29343: PPUSH
29344: LD_VAR 0 8
29348: PPUSH
29349: LD_VAR 0 9
29353: PPUSH
29354: LD_VAR 0 4
29358: PPUSH
29359: LD_VAR 0 5
29363: PPUSH
29364: CALL 29406 0 6
29368: GO 29401
29370: LD_INT 304
29372: DOUBLE
29373: EQUAL
29374: IFTRUE 29378
29376: GO 29400
29378: POP
// hHackTeleport ( unit , x , y ) ; end ;
29379: LD_VAR 0 2
29383: PPUSH
29384: LD_VAR 0 4
29388: PPUSH
29389: LD_VAR 0 5
29393: PPUSH
29394: CALL 31173 0 3
29398: GO 29401
29400: POP
// end ;
29401: LD_VAR 0 12
29405: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29406: LD_INT 0
29408: PPUSH
29409: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29410: LD_VAR 0 1
29414: PUSH
29415: LD_INT 1
29417: LESS
29418: PUSH
29419: LD_VAR 0 1
29423: PUSH
29424: LD_INT 3
29426: GREATER
29427: OR
29428: PUSH
29429: LD_VAR 0 5
29433: PPUSH
29434: LD_VAR 0 6
29438: PPUSH
29439: CALL_OW 428
29443: OR
29444: IFFALSE 29448
// exit ;
29446: GO 30176
// uc_side := your_side ;
29448: LD_ADDR_OWVAR 20
29452: PUSH
29453: LD_OWVAR 2
29457: ST_TO_ADDR
// uc_nation := nation ;
29458: LD_ADDR_OWVAR 21
29462: PUSH
29463: LD_VAR 0 1
29467: ST_TO_ADDR
// bc_level = 1 ;
29468: LD_ADDR_OWVAR 43
29472: PUSH
29473: LD_INT 1
29475: ST_TO_ADDR
// case btype of 1 :
29476: LD_VAR 0 2
29480: PUSH
29481: LD_INT 1
29483: DOUBLE
29484: EQUAL
29485: IFTRUE 29489
29487: GO 29500
29489: POP
// bc_type := b_depot ; 2 :
29490: LD_ADDR_OWVAR 42
29494: PUSH
29495: LD_INT 0
29497: ST_TO_ADDR
29498: GO 30120
29500: LD_INT 2
29502: DOUBLE
29503: EQUAL
29504: IFTRUE 29508
29506: GO 29519
29508: POP
// bc_type := b_warehouse ; 3 :
29509: LD_ADDR_OWVAR 42
29513: PUSH
29514: LD_INT 1
29516: ST_TO_ADDR
29517: GO 30120
29519: LD_INT 3
29521: DOUBLE
29522: EQUAL
29523: IFTRUE 29527
29525: GO 29538
29527: POP
// bc_type := b_lab ; 4 .. 9 :
29528: LD_ADDR_OWVAR 42
29532: PUSH
29533: LD_INT 6
29535: ST_TO_ADDR
29536: GO 30120
29538: LD_INT 4
29540: DOUBLE
29541: GREATEREQUAL
29542: IFFALSE 29550
29544: LD_INT 9
29546: DOUBLE
29547: LESSEQUAL
29548: IFTRUE 29552
29550: GO 29612
29552: POP
// begin bc_type := b_lab_half ;
29553: LD_ADDR_OWVAR 42
29557: PUSH
29558: LD_INT 7
29560: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29561: LD_ADDR_OWVAR 44
29565: PUSH
29566: LD_INT 10
29568: PUSH
29569: LD_INT 11
29571: PUSH
29572: LD_INT 12
29574: PUSH
29575: LD_INT 15
29577: PUSH
29578: LD_INT 14
29580: PUSH
29581: LD_INT 13
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: PUSH
29592: LD_VAR 0 2
29596: PUSH
29597: LD_INT 3
29599: MINUS
29600: ARRAY
29601: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
29602: LD_ADDR_OWVAR 45
29606: PUSH
29607: LD_INT 9
29609: ST_TO_ADDR
// end ; 10 .. 13 :
29610: GO 30120
29612: LD_INT 10
29614: DOUBLE
29615: GREATEREQUAL
29616: IFFALSE 29624
29618: LD_INT 13
29620: DOUBLE
29621: LESSEQUAL
29622: IFTRUE 29626
29624: GO 29703
29626: POP
// begin bc_type := b_lab_full ;
29627: LD_ADDR_OWVAR 42
29631: PUSH
29632: LD_INT 8
29634: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29635: LD_ADDR_OWVAR 44
29639: PUSH
29640: LD_INT 10
29642: PUSH
29643: LD_INT 12
29645: PUSH
29646: LD_INT 14
29648: PUSH
29649: LD_INT 13
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: PUSH
29658: LD_VAR 0 2
29662: PUSH
29663: LD_INT 9
29665: MINUS
29666: ARRAY
29667: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29668: LD_ADDR_OWVAR 45
29672: PUSH
29673: LD_INT 11
29675: PUSH
29676: LD_INT 15
29678: PUSH
29679: LD_INT 12
29681: PUSH
29682: LD_INT 15
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: PUSH
29691: LD_VAR 0 2
29695: PUSH
29696: LD_INT 9
29698: MINUS
29699: ARRAY
29700: ST_TO_ADDR
// end ; 14 :
29701: GO 30120
29703: LD_INT 14
29705: DOUBLE
29706: EQUAL
29707: IFTRUE 29711
29709: GO 29722
29711: POP
// bc_type := b_workshop ; 15 :
29712: LD_ADDR_OWVAR 42
29716: PUSH
29717: LD_INT 2
29719: ST_TO_ADDR
29720: GO 30120
29722: LD_INT 15
29724: DOUBLE
29725: EQUAL
29726: IFTRUE 29730
29728: GO 29741
29730: POP
// bc_type := b_factory ; 16 :
29731: LD_ADDR_OWVAR 42
29735: PUSH
29736: LD_INT 3
29738: ST_TO_ADDR
29739: GO 30120
29741: LD_INT 16
29743: DOUBLE
29744: EQUAL
29745: IFTRUE 29749
29747: GO 29760
29749: POP
// bc_type := b_ext_gun ; 17 :
29750: LD_ADDR_OWVAR 42
29754: PUSH
29755: LD_INT 17
29757: ST_TO_ADDR
29758: GO 30120
29760: LD_INT 17
29762: DOUBLE
29763: EQUAL
29764: IFTRUE 29768
29766: GO 29796
29768: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29769: LD_ADDR_OWVAR 42
29773: PUSH
29774: LD_INT 19
29776: PUSH
29777: LD_INT 23
29779: PUSH
29780: LD_INT 19
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: PUSH
29788: LD_VAR 0 1
29792: ARRAY
29793: ST_TO_ADDR
29794: GO 30120
29796: LD_INT 18
29798: DOUBLE
29799: EQUAL
29800: IFTRUE 29804
29802: GO 29815
29804: POP
// bc_type := b_ext_radar ; 19 :
29805: LD_ADDR_OWVAR 42
29809: PUSH
29810: LD_INT 20
29812: ST_TO_ADDR
29813: GO 30120
29815: LD_INT 19
29817: DOUBLE
29818: EQUAL
29819: IFTRUE 29823
29821: GO 29834
29823: POP
// bc_type := b_ext_radio ; 20 :
29824: LD_ADDR_OWVAR 42
29828: PUSH
29829: LD_INT 22
29831: ST_TO_ADDR
29832: GO 30120
29834: LD_INT 20
29836: DOUBLE
29837: EQUAL
29838: IFTRUE 29842
29840: GO 29853
29842: POP
// bc_type := b_ext_siberium ; 21 :
29843: LD_ADDR_OWVAR 42
29847: PUSH
29848: LD_INT 21
29850: ST_TO_ADDR
29851: GO 30120
29853: LD_INT 21
29855: DOUBLE
29856: EQUAL
29857: IFTRUE 29861
29859: GO 29872
29861: POP
// bc_type := b_ext_computer ; 22 :
29862: LD_ADDR_OWVAR 42
29866: PUSH
29867: LD_INT 24
29869: ST_TO_ADDR
29870: GO 30120
29872: LD_INT 22
29874: DOUBLE
29875: EQUAL
29876: IFTRUE 29880
29878: GO 29891
29880: POP
// bc_type := b_ext_track ; 23 :
29881: LD_ADDR_OWVAR 42
29885: PUSH
29886: LD_INT 16
29888: ST_TO_ADDR
29889: GO 30120
29891: LD_INT 23
29893: DOUBLE
29894: EQUAL
29895: IFTRUE 29899
29897: GO 29910
29899: POP
// bc_type := b_ext_laser ; 24 :
29900: LD_ADDR_OWVAR 42
29904: PUSH
29905: LD_INT 25
29907: ST_TO_ADDR
29908: GO 30120
29910: LD_INT 24
29912: DOUBLE
29913: EQUAL
29914: IFTRUE 29918
29916: GO 29929
29918: POP
// bc_type := b_control_tower ; 25 :
29919: LD_ADDR_OWVAR 42
29923: PUSH
29924: LD_INT 36
29926: ST_TO_ADDR
29927: GO 30120
29929: LD_INT 25
29931: DOUBLE
29932: EQUAL
29933: IFTRUE 29937
29935: GO 29948
29937: POP
// bc_type := b_breastwork ; 26 :
29938: LD_ADDR_OWVAR 42
29942: PUSH
29943: LD_INT 31
29945: ST_TO_ADDR
29946: GO 30120
29948: LD_INT 26
29950: DOUBLE
29951: EQUAL
29952: IFTRUE 29956
29954: GO 29967
29956: POP
// bc_type := b_bunker ; 27 :
29957: LD_ADDR_OWVAR 42
29961: PUSH
29962: LD_INT 32
29964: ST_TO_ADDR
29965: GO 30120
29967: LD_INT 27
29969: DOUBLE
29970: EQUAL
29971: IFTRUE 29975
29973: GO 29986
29975: POP
// bc_type := b_turret ; 28 :
29976: LD_ADDR_OWVAR 42
29980: PUSH
29981: LD_INT 33
29983: ST_TO_ADDR
29984: GO 30120
29986: LD_INT 28
29988: DOUBLE
29989: EQUAL
29990: IFTRUE 29994
29992: GO 30005
29994: POP
// bc_type := b_armoury ; 29 :
29995: LD_ADDR_OWVAR 42
29999: PUSH
30000: LD_INT 4
30002: ST_TO_ADDR
30003: GO 30120
30005: LD_INT 29
30007: DOUBLE
30008: EQUAL
30009: IFTRUE 30013
30011: GO 30024
30013: POP
// bc_type := b_barracks ; 30 :
30014: LD_ADDR_OWVAR 42
30018: PUSH
30019: LD_INT 5
30021: ST_TO_ADDR
30022: GO 30120
30024: LD_INT 30
30026: DOUBLE
30027: EQUAL
30028: IFTRUE 30032
30030: GO 30043
30032: POP
// bc_type := b_solar_power ; 31 :
30033: LD_ADDR_OWVAR 42
30037: PUSH
30038: LD_INT 27
30040: ST_TO_ADDR
30041: GO 30120
30043: LD_INT 31
30045: DOUBLE
30046: EQUAL
30047: IFTRUE 30051
30049: GO 30062
30051: POP
// bc_type := b_oil_power ; 32 :
30052: LD_ADDR_OWVAR 42
30056: PUSH
30057: LD_INT 26
30059: ST_TO_ADDR
30060: GO 30120
30062: LD_INT 32
30064: DOUBLE
30065: EQUAL
30066: IFTRUE 30070
30068: GO 30081
30070: POP
// bc_type := b_siberite_power ; 33 :
30071: LD_ADDR_OWVAR 42
30075: PUSH
30076: LD_INT 28
30078: ST_TO_ADDR
30079: GO 30120
30081: LD_INT 33
30083: DOUBLE
30084: EQUAL
30085: IFTRUE 30089
30087: GO 30100
30089: POP
// bc_type := b_oil_mine ; 34 :
30090: LD_ADDR_OWVAR 42
30094: PUSH
30095: LD_INT 29
30097: ST_TO_ADDR
30098: GO 30120
30100: LD_INT 34
30102: DOUBLE
30103: EQUAL
30104: IFTRUE 30108
30106: GO 30119
30108: POP
// bc_type := b_siberite_mine ; end ;
30109: LD_ADDR_OWVAR 42
30113: PUSH
30114: LD_INT 30
30116: ST_TO_ADDR
30117: GO 30120
30119: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30120: LD_ADDR_VAR 0 8
30124: PUSH
30125: LD_VAR 0 5
30129: PPUSH
30130: LD_VAR 0 6
30134: PPUSH
30135: LD_VAR 0 3
30139: PPUSH
30140: CALL_OW 47
30144: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30145: LD_OWVAR 42
30149: PUSH
30150: LD_INT 32
30152: PUSH
30153: LD_INT 33
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: IN
30160: IFFALSE 30176
// PlaceWeaponTurret ( b , weapon ) ;
30162: LD_VAR 0 8
30166: PPUSH
30167: LD_VAR 0 4
30171: PPUSH
30172: CALL_OW 431
// end ;
30176: LD_VAR 0 7
30180: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30181: LD_INT 0
30183: PPUSH
30184: PPUSH
30185: PPUSH
30186: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30187: LD_ADDR_VAR 0 4
30191: PUSH
30192: LD_INT 22
30194: PUSH
30195: LD_OWVAR 2
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 2
30206: PUSH
30207: LD_INT 30
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 30
30219: PUSH
30220: LD_INT 1
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: LIST
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PPUSH
30236: CALL_OW 69
30240: ST_TO_ADDR
// if not tmp then
30241: LD_VAR 0 4
30245: NOT
30246: IFFALSE 30250
// exit ;
30248: GO 30309
// for i in tmp do
30250: LD_ADDR_VAR 0 2
30254: PUSH
30255: LD_VAR 0 4
30259: PUSH
30260: FOR_IN
30261: IFFALSE 30307
// for j = 1 to 3 do
30263: LD_ADDR_VAR 0 3
30267: PUSH
30268: DOUBLE
30269: LD_INT 1
30271: DEC
30272: ST_TO_ADDR
30273: LD_INT 3
30275: PUSH
30276: FOR_TO
30277: IFFALSE 30303
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30279: LD_VAR 0 2
30283: PPUSH
30284: CALL_OW 274
30288: PPUSH
30289: LD_VAR 0 3
30293: PPUSH
30294: LD_INT 99999
30296: PPUSH
30297: CALL_OW 277
30301: GO 30276
30303: POP
30304: POP
30305: GO 30260
30307: POP
30308: POP
// end ;
30309: LD_VAR 0 1
30313: RET
// export function hHackSetLevel10 ; var i , j ; begin
30314: LD_INT 0
30316: PPUSH
30317: PPUSH
30318: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30319: LD_ADDR_VAR 0 2
30323: PUSH
30324: LD_INT 21
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PPUSH
30334: CALL_OW 69
30338: PUSH
30339: FOR_IN
30340: IFFALSE 30392
// if IsSelected ( i ) then
30342: LD_VAR 0 2
30346: PPUSH
30347: CALL_OW 306
30351: IFFALSE 30390
// begin for j := 1 to 4 do
30353: LD_ADDR_VAR 0 3
30357: PUSH
30358: DOUBLE
30359: LD_INT 1
30361: DEC
30362: ST_TO_ADDR
30363: LD_INT 4
30365: PUSH
30366: FOR_TO
30367: IFFALSE 30388
// SetSkill ( i , j , 10 ) ;
30369: LD_VAR 0 2
30373: PPUSH
30374: LD_VAR 0 3
30378: PPUSH
30379: LD_INT 10
30381: PPUSH
30382: CALL_OW 237
30386: GO 30366
30388: POP
30389: POP
// end ;
30390: GO 30339
30392: POP
30393: POP
// end ;
30394: LD_VAR 0 1
30398: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30399: LD_INT 0
30401: PPUSH
30402: PPUSH
30403: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30404: LD_ADDR_VAR 0 2
30408: PUSH
30409: LD_INT 22
30411: PUSH
30412: LD_OWVAR 2
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 21
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PPUSH
30435: CALL_OW 69
30439: PUSH
30440: FOR_IN
30441: IFFALSE 30482
// begin for j := 1 to 4 do
30443: LD_ADDR_VAR 0 3
30447: PUSH
30448: DOUBLE
30449: LD_INT 1
30451: DEC
30452: ST_TO_ADDR
30453: LD_INT 4
30455: PUSH
30456: FOR_TO
30457: IFFALSE 30478
// SetSkill ( i , j , 10 ) ;
30459: LD_VAR 0 2
30463: PPUSH
30464: LD_VAR 0 3
30468: PPUSH
30469: LD_INT 10
30471: PPUSH
30472: CALL_OW 237
30476: GO 30456
30478: POP
30479: POP
// end ;
30480: GO 30440
30482: POP
30483: POP
// end ;
30484: LD_VAR 0 1
30488: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30489: LD_INT 0
30491: PPUSH
// uc_side := your_side ;
30492: LD_ADDR_OWVAR 20
30496: PUSH
30497: LD_OWVAR 2
30501: ST_TO_ADDR
// uc_nation := nation ;
30502: LD_ADDR_OWVAR 21
30506: PUSH
30507: LD_VAR 0 1
30511: ST_TO_ADDR
// InitHc ;
30512: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30516: LD_INT 0
30518: PPUSH
30519: LD_VAR 0 2
30523: PPUSH
30524: LD_VAR 0 3
30528: PPUSH
30529: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30533: LD_VAR 0 4
30537: PPUSH
30538: LD_VAR 0 5
30542: PPUSH
30543: CALL_OW 428
30547: PUSH
30548: LD_INT 0
30550: EQUAL
30551: IFFALSE 30575
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30553: CALL_OW 44
30557: PPUSH
30558: LD_VAR 0 4
30562: PPUSH
30563: LD_VAR 0 5
30567: PPUSH
30568: LD_INT 1
30570: PPUSH
30571: CALL_OW 48
// end ;
30575: LD_VAR 0 6
30579: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30580: LD_INT 0
30582: PPUSH
30583: PPUSH
// uc_side := your_side ;
30584: LD_ADDR_OWVAR 20
30588: PUSH
30589: LD_OWVAR 2
30593: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30594: LD_VAR 0 1
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: LD_INT 2
30604: PUSH
30605: LD_INT 3
30607: PUSH
30608: LD_INT 4
30610: PUSH
30611: LD_INT 5
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: IN
30621: IFFALSE 30633
// uc_nation := nation_american else
30623: LD_ADDR_OWVAR 21
30627: PUSH
30628: LD_INT 1
30630: ST_TO_ADDR
30631: GO 30676
// if chassis in [ 11 , 12 , 13 , 14 ] then
30633: LD_VAR 0 1
30637: PUSH
30638: LD_INT 11
30640: PUSH
30641: LD_INT 12
30643: PUSH
30644: LD_INT 13
30646: PUSH
30647: LD_INT 14
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: IN
30656: IFFALSE 30668
// uc_nation := nation_arabian else
30658: LD_ADDR_OWVAR 21
30662: PUSH
30663: LD_INT 2
30665: ST_TO_ADDR
30666: GO 30676
// uc_nation := nation_russian ;
30668: LD_ADDR_OWVAR 21
30672: PUSH
30673: LD_INT 3
30675: ST_TO_ADDR
// vc_chassis := chassis ;
30676: LD_ADDR_OWVAR 37
30680: PUSH
30681: LD_VAR 0 1
30685: ST_TO_ADDR
// vc_engine := engine ;
30686: LD_ADDR_OWVAR 39
30690: PUSH
30691: LD_VAR 0 2
30695: ST_TO_ADDR
// vc_control := control ;
30696: LD_ADDR_OWVAR 38
30700: PUSH
30701: LD_VAR 0 3
30705: ST_TO_ADDR
// vc_weapon := weapon ;
30706: LD_ADDR_OWVAR 40
30710: PUSH
30711: LD_VAR 0 4
30715: ST_TO_ADDR
// un := CreateVehicle ;
30716: LD_ADDR_VAR 0 8
30720: PUSH
30721: CALL_OW 45
30725: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30726: LD_VAR 0 8
30730: PPUSH
30731: LD_INT 0
30733: PPUSH
30734: LD_INT 5
30736: PPUSH
30737: CALL_OW 12
30741: PPUSH
30742: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30746: LD_VAR 0 8
30750: PPUSH
30751: LD_VAR 0 5
30755: PPUSH
30756: LD_VAR 0 6
30760: PPUSH
30761: LD_INT 1
30763: PPUSH
30764: CALL_OW 48
// end ;
30768: LD_VAR 0 7
30772: RET
// export hInvincible ; every 1 do
30773: GO 30775
30775: DISABLE
// hInvincible := [ ] ;
30776: LD_ADDR_EXP 94
30780: PUSH
30781: EMPTY
30782: ST_TO_ADDR
30783: END
// every 10 do var i ;
30784: GO 30786
30786: DISABLE
30787: LD_INT 0
30789: PPUSH
// begin enable ;
30790: ENABLE
// if not hInvincible then
30791: LD_EXP 94
30795: NOT
30796: IFFALSE 30800
// exit ;
30798: GO 30844
// for i in hInvincible do
30800: LD_ADDR_VAR 0 1
30804: PUSH
30805: LD_EXP 94
30809: PUSH
30810: FOR_IN
30811: IFFALSE 30842
// if GetLives ( i ) < 1000 then
30813: LD_VAR 0 1
30817: PPUSH
30818: CALL_OW 256
30822: PUSH
30823: LD_INT 1000
30825: LESS
30826: IFFALSE 30840
// SetLives ( i , 1000 ) ;
30828: LD_VAR 0 1
30832: PPUSH
30833: LD_INT 1000
30835: PPUSH
30836: CALL_OW 234
30840: GO 30810
30842: POP
30843: POP
// end ;
30844: PPOPN 1
30846: END
// export function hHackInvincible ; var i ; begin
30847: LD_INT 0
30849: PPUSH
30850: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30851: LD_ADDR_VAR 0 2
30855: PUSH
30856: LD_INT 2
30858: PUSH
30859: LD_INT 21
30861: PUSH
30862: LD_INT 1
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 21
30871: PUSH
30872: LD_INT 2
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: LIST
30883: PPUSH
30884: CALL_OW 69
30888: PUSH
30889: FOR_IN
30890: IFFALSE 30951
// if IsSelected ( i ) then
30892: LD_VAR 0 2
30896: PPUSH
30897: CALL_OW 306
30901: IFFALSE 30949
// begin if i in hInvincible then
30903: LD_VAR 0 2
30907: PUSH
30908: LD_EXP 94
30912: IN
30913: IFFALSE 30933
// hInvincible := hInvincible diff i else
30915: LD_ADDR_EXP 94
30919: PUSH
30920: LD_EXP 94
30924: PUSH
30925: LD_VAR 0 2
30929: DIFF
30930: ST_TO_ADDR
30931: GO 30949
// hInvincible := hInvincible union i ;
30933: LD_ADDR_EXP 94
30937: PUSH
30938: LD_EXP 94
30942: PUSH
30943: LD_VAR 0 2
30947: UNION
30948: ST_TO_ADDR
// end ;
30949: GO 30889
30951: POP
30952: POP
// end ;
30953: LD_VAR 0 1
30957: RET
// export function hHackInvisible ; var i , j ; begin
30958: LD_INT 0
30960: PPUSH
30961: PPUSH
30962: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30963: LD_ADDR_VAR 0 2
30967: PUSH
30968: LD_INT 21
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PPUSH
30978: CALL_OW 69
30982: PUSH
30983: FOR_IN
30984: IFFALSE 31008
// if IsSelected ( i ) then
30986: LD_VAR 0 2
30990: PPUSH
30991: CALL_OW 306
30995: IFFALSE 31006
// ComForceInvisible ( i ) ;
30997: LD_VAR 0 2
31001: PPUSH
31002: CALL_OW 496
31006: GO 30983
31008: POP
31009: POP
// end ;
31010: LD_VAR 0 1
31014: RET
// export function hHackChangeYourSide ; begin
31015: LD_INT 0
31017: PPUSH
// if your_side = 8 then
31018: LD_OWVAR 2
31022: PUSH
31023: LD_INT 8
31025: EQUAL
31026: IFFALSE 31038
// your_side := 0 else
31028: LD_ADDR_OWVAR 2
31032: PUSH
31033: LD_INT 0
31035: ST_TO_ADDR
31036: GO 31052
// your_side := your_side + 1 ;
31038: LD_ADDR_OWVAR 2
31042: PUSH
31043: LD_OWVAR 2
31047: PUSH
31048: LD_INT 1
31050: PLUS
31051: ST_TO_ADDR
// end ;
31052: LD_VAR 0 1
31056: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31057: LD_INT 0
31059: PPUSH
31060: PPUSH
31061: PPUSH
// for i in all_units do
31062: LD_ADDR_VAR 0 2
31066: PUSH
31067: LD_OWVAR 3
31071: PUSH
31072: FOR_IN
31073: IFFALSE 31151
// if IsSelected ( i ) then
31075: LD_VAR 0 2
31079: PPUSH
31080: CALL_OW 306
31084: IFFALSE 31149
// begin j := GetSide ( i ) ;
31086: LD_ADDR_VAR 0 3
31090: PUSH
31091: LD_VAR 0 2
31095: PPUSH
31096: CALL_OW 255
31100: ST_TO_ADDR
// if j = 8 then
31101: LD_VAR 0 3
31105: PUSH
31106: LD_INT 8
31108: EQUAL
31109: IFFALSE 31121
// j := 0 else
31111: LD_ADDR_VAR 0 3
31115: PUSH
31116: LD_INT 0
31118: ST_TO_ADDR
31119: GO 31135
// j := j + 1 ;
31121: LD_ADDR_VAR 0 3
31125: PUSH
31126: LD_VAR 0 3
31130: PUSH
31131: LD_INT 1
31133: PLUS
31134: ST_TO_ADDR
// SetSide ( i , j ) ;
31135: LD_VAR 0 2
31139: PPUSH
31140: LD_VAR 0 3
31144: PPUSH
31145: CALL_OW 235
// end ;
31149: GO 31072
31151: POP
31152: POP
// end ;
31153: LD_VAR 0 1
31157: RET
// export function hHackFog ; begin
31158: LD_INT 0
31160: PPUSH
// FogOff ( true ) ;
31161: LD_INT 1
31163: PPUSH
31164: CALL_OW 344
// end ;
31168: LD_VAR 0 1
31172: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31173: LD_INT 0
31175: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31176: LD_VAR 0 1
31180: PPUSH
31181: LD_VAR 0 2
31185: PPUSH
31186: LD_VAR 0 3
31190: PPUSH
31191: LD_INT 1
31193: PPUSH
31194: LD_INT 1
31196: PPUSH
31197: CALL_OW 483
// CenterOnXY ( x , y ) ;
31201: LD_VAR 0 2
31205: PPUSH
31206: LD_VAR 0 3
31210: PPUSH
31211: CALL_OW 84
// end ;
31215: LD_VAR 0 4
31219: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31220: LD_INT 0
31222: PPUSH
31223: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31224: LD_VAR 0 1
31228: NOT
31229: PUSH
31230: LD_VAR 0 2
31234: PPUSH
31235: LD_VAR 0 3
31239: PPUSH
31240: CALL_OW 488
31244: NOT
31245: OR
31246: PUSH
31247: LD_VAR 0 1
31251: PPUSH
31252: CALL_OW 266
31256: PUSH
31257: LD_INT 3
31259: NONEQUAL
31260: PUSH
31261: LD_VAR 0 1
31265: PPUSH
31266: CALL_OW 247
31270: PUSH
31271: LD_INT 1
31273: EQUAL
31274: NOT
31275: AND
31276: OR
31277: IFFALSE 31281
// exit ;
31279: GO 31430
// if GetType ( factory ) = unit_human then
31281: LD_VAR 0 1
31285: PPUSH
31286: CALL_OW 247
31290: PUSH
31291: LD_INT 1
31293: EQUAL
31294: IFFALSE 31311
// factory := IsInUnit ( factory ) ;
31296: LD_ADDR_VAR 0 1
31300: PUSH
31301: LD_VAR 0 1
31305: PPUSH
31306: CALL_OW 310
31310: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31311: LD_VAR 0 1
31315: PPUSH
31316: CALL_OW 266
31320: PUSH
31321: LD_INT 3
31323: NONEQUAL
31324: IFFALSE 31328
// exit ;
31326: GO 31430
// if HexInfo ( x , y ) = factory then
31328: LD_VAR 0 2
31332: PPUSH
31333: LD_VAR 0 3
31337: PPUSH
31338: CALL_OW 428
31342: PUSH
31343: LD_VAR 0 1
31347: EQUAL
31348: IFFALSE 31375
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31350: LD_ADDR_EXP 95
31354: PUSH
31355: LD_EXP 95
31359: PPUSH
31360: LD_VAR 0 1
31364: PPUSH
31365: LD_INT 0
31367: PPUSH
31368: CALL_OW 1
31372: ST_TO_ADDR
31373: GO 31426
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31375: LD_ADDR_EXP 95
31379: PUSH
31380: LD_EXP 95
31384: PPUSH
31385: LD_VAR 0 1
31389: PPUSH
31390: LD_VAR 0 1
31394: PPUSH
31395: CALL_OW 255
31399: PUSH
31400: LD_VAR 0 1
31404: PUSH
31405: LD_VAR 0 2
31409: PUSH
31410: LD_VAR 0 3
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: PPUSH
31421: CALL_OW 1
31425: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31426: CALL 31435 0 0
// end ;
31430: LD_VAR 0 4
31434: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31435: LD_INT 0
31437: PPUSH
31438: PPUSH
31439: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31440: LD_STRING resetFactoryWaypoint();
31442: PPUSH
31443: CALL_OW 559
// if factoryWaypoints then
31447: LD_EXP 95
31451: IFFALSE 31577
// begin list := PrepareArray ( factoryWaypoints ) ;
31453: LD_ADDR_VAR 0 3
31457: PUSH
31458: LD_EXP 95
31462: PPUSH
31463: CALL 78719 0 1
31467: ST_TO_ADDR
// for i := 1 to list do
31468: LD_ADDR_VAR 0 2
31472: PUSH
31473: DOUBLE
31474: LD_INT 1
31476: DEC
31477: ST_TO_ADDR
31478: LD_VAR 0 3
31482: PUSH
31483: FOR_TO
31484: IFFALSE 31575
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31486: LD_STRING setFactoryWaypointXY(
31488: PUSH
31489: LD_VAR 0 3
31493: PUSH
31494: LD_VAR 0 2
31498: ARRAY
31499: PUSH
31500: LD_INT 1
31502: ARRAY
31503: STR
31504: PUSH
31505: LD_STRING ,
31507: STR
31508: PUSH
31509: LD_VAR 0 3
31513: PUSH
31514: LD_VAR 0 2
31518: ARRAY
31519: PUSH
31520: LD_INT 2
31522: ARRAY
31523: STR
31524: PUSH
31525: LD_STRING ,
31527: STR
31528: PUSH
31529: LD_VAR 0 3
31533: PUSH
31534: LD_VAR 0 2
31538: ARRAY
31539: PUSH
31540: LD_INT 3
31542: ARRAY
31543: STR
31544: PUSH
31545: LD_STRING ,
31547: STR
31548: PUSH
31549: LD_VAR 0 3
31553: PUSH
31554: LD_VAR 0 2
31558: ARRAY
31559: PUSH
31560: LD_INT 4
31562: ARRAY
31563: STR
31564: PUSH
31565: LD_STRING )
31567: STR
31568: PPUSH
31569: CALL_OW 559
31573: GO 31483
31575: POP
31576: POP
// end ; end ;
31577: LD_VAR 0 1
31581: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31582: LD_INT 0
31584: PPUSH
// if HexInfo ( x , y ) = warehouse then
31585: LD_VAR 0 2
31589: PPUSH
31590: LD_VAR 0 3
31594: PPUSH
31595: CALL_OW 428
31599: PUSH
31600: LD_VAR 0 1
31604: EQUAL
31605: IFFALSE 31632
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31607: LD_ADDR_EXP 96
31611: PUSH
31612: LD_EXP 96
31616: PPUSH
31617: LD_VAR 0 1
31621: PPUSH
31622: LD_INT 0
31624: PPUSH
31625: CALL_OW 1
31629: ST_TO_ADDR
31630: GO 31683
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31632: LD_ADDR_EXP 96
31636: PUSH
31637: LD_EXP 96
31641: PPUSH
31642: LD_VAR 0 1
31646: PPUSH
31647: LD_VAR 0 1
31651: PPUSH
31652: CALL_OW 255
31656: PUSH
31657: LD_VAR 0 1
31661: PUSH
31662: LD_VAR 0 2
31666: PUSH
31667: LD_VAR 0 3
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: PPUSH
31678: CALL_OW 1
31682: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31683: CALL 31692 0 0
// end ;
31687: LD_VAR 0 4
31691: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31692: LD_INT 0
31694: PPUSH
31695: PPUSH
31696: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31697: LD_STRING resetWarehouseGatheringPoints();
31699: PPUSH
31700: CALL_OW 559
// if warehouseGatheringPoints then
31704: LD_EXP 96
31708: IFFALSE 31834
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31710: LD_ADDR_VAR 0 3
31714: PUSH
31715: LD_EXP 96
31719: PPUSH
31720: CALL 78719 0 1
31724: ST_TO_ADDR
// for i := 1 to list do
31725: LD_ADDR_VAR 0 2
31729: PUSH
31730: DOUBLE
31731: LD_INT 1
31733: DEC
31734: ST_TO_ADDR
31735: LD_VAR 0 3
31739: PUSH
31740: FOR_TO
31741: IFFALSE 31832
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31743: LD_STRING setWarehouseGatheringPointXY(
31745: PUSH
31746: LD_VAR 0 3
31750: PUSH
31751: LD_VAR 0 2
31755: ARRAY
31756: PUSH
31757: LD_INT 1
31759: ARRAY
31760: STR
31761: PUSH
31762: LD_STRING ,
31764: STR
31765: PUSH
31766: LD_VAR 0 3
31770: PUSH
31771: LD_VAR 0 2
31775: ARRAY
31776: PUSH
31777: LD_INT 2
31779: ARRAY
31780: STR
31781: PUSH
31782: LD_STRING ,
31784: STR
31785: PUSH
31786: LD_VAR 0 3
31790: PUSH
31791: LD_VAR 0 2
31795: ARRAY
31796: PUSH
31797: LD_INT 3
31799: ARRAY
31800: STR
31801: PUSH
31802: LD_STRING ,
31804: STR
31805: PUSH
31806: LD_VAR 0 3
31810: PUSH
31811: LD_VAR 0 2
31815: ARRAY
31816: PUSH
31817: LD_INT 4
31819: ARRAY
31820: STR
31821: PUSH
31822: LD_STRING )
31824: STR
31825: PPUSH
31826: CALL_OW 559
31830: GO 31740
31832: POP
31833: POP
// end ; end ;
31834: LD_VAR 0 1
31838: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31839: LD_EXP 96
31843: IFFALSE 32528
31845: GO 31847
31847: DISABLE
31848: LD_INT 0
31850: PPUSH
31851: PPUSH
31852: PPUSH
31853: PPUSH
31854: PPUSH
31855: PPUSH
31856: PPUSH
31857: PPUSH
31858: PPUSH
// begin enable ;
31859: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31860: LD_ADDR_VAR 0 3
31864: PUSH
31865: LD_EXP 96
31869: PPUSH
31870: CALL 78719 0 1
31874: ST_TO_ADDR
// if not list then
31875: LD_VAR 0 3
31879: NOT
31880: IFFALSE 31884
// exit ;
31882: GO 32528
// for i := 1 to list do
31884: LD_ADDR_VAR 0 1
31888: PUSH
31889: DOUBLE
31890: LD_INT 1
31892: DEC
31893: ST_TO_ADDR
31894: LD_VAR 0 3
31898: PUSH
31899: FOR_TO
31900: IFFALSE 32526
// begin depot := list [ i ] [ 2 ] ;
31902: LD_ADDR_VAR 0 8
31906: PUSH
31907: LD_VAR 0 3
31911: PUSH
31912: LD_VAR 0 1
31916: ARRAY
31917: PUSH
31918: LD_INT 2
31920: ARRAY
31921: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31922: LD_ADDR_VAR 0 5
31926: PUSH
31927: LD_VAR 0 3
31931: PUSH
31932: LD_VAR 0 1
31936: ARRAY
31937: PUSH
31938: LD_INT 1
31940: ARRAY
31941: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31942: LD_VAR 0 8
31946: PPUSH
31947: CALL_OW 301
31951: PUSH
31952: LD_VAR 0 5
31956: PUSH
31957: LD_VAR 0 8
31961: PPUSH
31962: CALL_OW 255
31966: NONEQUAL
31967: OR
31968: IFFALSE 31997
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31970: LD_ADDR_EXP 96
31974: PUSH
31975: LD_EXP 96
31979: PPUSH
31980: LD_VAR 0 8
31984: PPUSH
31985: LD_INT 0
31987: PPUSH
31988: CALL_OW 1
31992: ST_TO_ADDR
// exit ;
31993: POP
31994: POP
31995: GO 32528
// end ; x := list [ i ] [ 3 ] ;
31997: LD_ADDR_VAR 0 6
32001: PUSH
32002: LD_VAR 0 3
32006: PUSH
32007: LD_VAR 0 1
32011: ARRAY
32012: PUSH
32013: LD_INT 3
32015: ARRAY
32016: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32017: LD_ADDR_VAR 0 7
32021: PUSH
32022: LD_VAR 0 3
32026: PUSH
32027: LD_VAR 0 1
32031: ARRAY
32032: PUSH
32033: LD_INT 4
32035: ARRAY
32036: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32037: LD_ADDR_VAR 0 9
32041: PUSH
32042: LD_VAR 0 6
32046: PPUSH
32047: LD_VAR 0 7
32051: PPUSH
32052: LD_INT 16
32054: PPUSH
32055: CALL 77307 0 3
32059: ST_TO_ADDR
// if not cratesNearbyPoint then
32060: LD_VAR 0 9
32064: NOT
32065: IFFALSE 32071
// exit ;
32067: POP
32068: POP
32069: GO 32528
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32071: LD_ADDR_VAR 0 4
32075: PUSH
32076: LD_INT 22
32078: PUSH
32079: LD_VAR 0 5
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 3
32090: PUSH
32091: LD_INT 60
32093: PUSH
32094: EMPTY
32095: LIST
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 91
32103: PUSH
32104: LD_VAR 0 8
32108: PUSH
32109: LD_INT 6
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: LD_INT 25
32122: PUSH
32123: LD_INT 2
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 25
32132: PUSH
32133: LD_INT 16
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: PPUSH
32151: CALL_OW 69
32155: PUSH
32156: LD_VAR 0 8
32160: PPUSH
32161: CALL_OW 313
32165: PPUSH
32166: LD_INT 3
32168: PUSH
32169: LD_INT 60
32171: PUSH
32172: EMPTY
32173: LIST
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 2
32181: PUSH
32182: LD_INT 25
32184: PUSH
32185: LD_INT 2
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 25
32194: PUSH
32195: LD_INT 16
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: LIST
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PPUSH
32211: CALL_OW 72
32215: UNION
32216: ST_TO_ADDR
// if tmp then
32217: LD_VAR 0 4
32221: IFFALSE 32301
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32223: LD_ADDR_VAR 0 4
32227: PUSH
32228: LD_VAR 0 4
32232: PPUSH
32233: LD_INT 3
32235: PPUSH
32236: CALL 75276 0 2
32240: ST_TO_ADDR
// for j in tmp do
32241: LD_ADDR_VAR 0 2
32245: PUSH
32246: LD_VAR 0 4
32250: PUSH
32251: FOR_IN
32252: IFFALSE 32295
// begin if IsInUnit ( j ) then
32254: LD_VAR 0 2
32258: PPUSH
32259: CALL_OW 310
32263: IFFALSE 32274
// ComExit ( j ) ;
32265: LD_VAR 0 2
32269: PPUSH
32270: CALL 75359 0 1
// AddComCollect ( j , x , y ) ;
32274: LD_VAR 0 2
32278: PPUSH
32279: LD_VAR 0 6
32283: PPUSH
32284: LD_VAR 0 7
32288: PPUSH
32289: CALL_OW 177
// end ;
32293: GO 32251
32295: POP
32296: POP
// exit ;
32297: POP
32298: POP
32299: GO 32528
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32301: LD_ADDR_VAR 0 4
32305: PUSH
32306: LD_INT 22
32308: PUSH
32309: LD_VAR 0 5
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 91
32320: PUSH
32321: LD_VAR 0 8
32325: PUSH
32326: LD_INT 8
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: LD_INT 34
32339: PUSH
32340: LD_INT 12
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 34
32349: PUSH
32350: LD_INT 51
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 34
32359: PUSH
32360: LD_INT 32
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 34
32369: PUSH
32370: LD_INT 89
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: LIST
32388: PPUSH
32389: CALL_OW 69
32393: ST_TO_ADDR
// if tmp then
32394: LD_VAR 0 4
32398: IFFALSE 32524
// begin for j in tmp do
32400: LD_ADDR_VAR 0 2
32404: PUSH
32405: LD_VAR 0 4
32409: PUSH
32410: FOR_IN
32411: IFFALSE 32522
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32413: LD_VAR 0 2
32417: PPUSH
32418: CALL_OW 262
32422: PUSH
32423: LD_INT 3
32425: EQUAL
32426: PUSH
32427: LD_VAR 0 2
32431: PPUSH
32432: CALL_OW 261
32436: PUSH
32437: LD_INT 20
32439: GREATER
32440: OR
32441: PUSH
32442: LD_VAR 0 2
32446: PPUSH
32447: CALL_OW 314
32451: NOT
32452: AND
32453: PUSH
32454: LD_VAR 0 2
32458: PPUSH
32459: CALL_OW 263
32463: PUSH
32464: LD_INT 1
32466: NONEQUAL
32467: PUSH
32468: LD_VAR 0 2
32472: PPUSH
32473: CALL_OW 311
32477: OR
32478: AND
32479: IFFALSE 32520
// begin ComCollect ( j , x , y ) ;
32481: LD_VAR 0 2
32485: PPUSH
32486: LD_VAR 0 6
32490: PPUSH
32491: LD_VAR 0 7
32495: PPUSH
32496: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32500: LD_VAR 0 2
32504: PPUSH
32505: LD_VAR 0 8
32509: PPUSH
32510: CALL_OW 172
// exit ;
32514: POP
32515: POP
32516: POP
32517: POP
32518: GO 32528
// end ;
32520: GO 32410
32522: POP
32523: POP
// end ; end ;
32524: GO 31899
32526: POP
32527: POP
// end ; end_of_file
32528: PPOPN 9
32530: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32531: LD_INT 0
32533: PPUSH
32534: PPUSH
32535: PPUSH
32536: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32537: LD_VAR 0 1
32541: PPUSH
32542: CALL_OW 264
32546: PUSH
32547: LD_INT 91
32549: EQUAL
32550: IFFALSE 32622
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32552: LD_INT 68
32554: PPUSH
32555: LD_VAR 0 1
32559: PPUSH
32560: CALL_OW 255
32564: PPUSH
32565: CALL_OW 321
32569: PUSH
32570: LD_INT 2
32572: EQUAL
32573: IFFALSE 32585
// eff := 70 else
32575: LD_ADDR_VAR 0 4
32579: PUSH
32580: LD_INT 70
32582: ST_TO_ADDR
32583: GO 32593
// eff := 30 ;
32585: LD_ADDR_VAR 0 4
32589: PUSH
32590: LD_INT 30
32592: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32593: LD_VAR 0 1
32597: PPUSH
32598: CALL_OW 250
32602: PPUSH
32603: LD_VAR 0 1
32607: PPUSH
32608: CALL_OW 251
32612: PPUSH
32613: LD_VAR 0 4
32617: PPUSH
32618: CALL_OW 495
// end ; end ;
32622: LD_VAR 0 2
32626: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32627: LD_INT 0
32629: PPUSH
// end ;
32630: LD_VAR 0 4
32634: RET
// export function SOS_Command ( cmd ) ; begin
32635: LD_INT 0
32637: PPUSH
// end ;
32638: LD_VAR 0 2
32642: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32643: LD_INT 0
32645: PPUSH
// end ;
32646: LD_VAR 0 6
32650: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32651: LD_INT 0
32653: PPUSH
32654: PPUSH
// if not vehicle or not factory then
32655: LD_VAR 0 1
32659: NOT
32660: PUSH
32661: LD_VAR 0 2
32665: NOT
32666: OR
32667: IFFALSE 32671
// exit ;
32669: GO 32902
// if factoryWaypoints >= factory then
32671: LD_EXP 95
32675: PUSH
32676: LD_VAR 0 2
32680: GREATEREQUAL
32681: IFFALSE 32902
// if factoryWaypoints [ factory ] then
32683: LD_EXP 95
32687: PUSH
32688: LD_VAR 0 2
32692: ARRAY
32693: IFFALSE 32902
// begin if GetControl ( vehicle ) = control_manual then
32695: LD_VAR 0 1
32699: PPUSH
32700: CALL_OW 263
32704: PUSH
32705: LD_INT 1
32707: EQUAL
32708: IFFALSE 32789
// begin driver := IsDrivenBy ( vehicle ) ;
32710: LD_ADDR_VAR 0 4
32714: PUSH
32715: LD_VAR 0 1
32719: PPUSH
32720: CALL_OW 311
32724: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32725: LD_VAR 0 4
32729: PPUSH
32730: LD_EXP 95
32734: PUSH
32735: LD_VAR 0 2
32739: ARRAY
32740: PUSH
32741: LD_INT 3
32743: ARRAY
32744: PPUSH
32745: LD_EXP 95
32749: PUSH
32750: LD_VAR 0 2
32754: ARRAY
32755: PUSH
32756: LD_INT 4
32758: ARRAY
32759: PPUSH
32760: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32764: LD_VAR 0 4
32768: PPUSH
32769: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32773: LD_VAR 0 4
32777: PPUSH
32778: LD_VAR 0 2
32782: PPUSH
32783: CALL_OW 180
// end else
32787: GO 32902
// if GetControl ( vehicle ) = control_remote then
32789: LD_VAR 0 1
32793: PPUSH
32794: CALL_OW 263
32798: PUSH
32799: LD_INT 2
32801: EQUAL
32802: IFFALSE 32863
// begin wait ( 0 0$2 ) ;
32804: LD_INT 70
32806: PPUSH
32807: CALL_OW 67
// if Connect ( vehicle ) then
32811: LD_VAR 0 1
32815: PPUSH
32816: CALL 45567 0 1
32820: IFFALSE 32861
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32822: LD_VAR 0 1
32826: PPUSH
32827: LD_EXP 95
32831: PUSH
32832: LD_VAR 0 2
32836: ARRAY
32837: PUSH
32838: LD_INT 3
32840: ARRAY
32841: PPUSH
32842: LD_EXP 95
32846: PUSH
32847: LD_VAR 0 2
32851: ARRAY
32852: PUSH
32853: LD_INT 4
32855: ARRAY
32856: PPUSH
32857: CALL_OW 171
// end else
32861: GO 32902
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32863: LD_VAR 0 1
32867: PPUSH
32868: LD_EXP 95
32872: PUSH
32873: LD_VAR 0 2
32877: ARRAY
32878: PUSH
32879: LD_INT 3
32881: ARRAY
32882: PPUSH
32883: LD_EXP 95
32887: PUSH
32888: LD_VAR 0 2
32892: ARRAY
32893: PUSH
32894: LD_INT 4
32896: ARRAY
32897: PPUSH
32898: CALL_OW 171
// end ; end ;
32902: LD_VAR 0 3
32906: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32907: LD_INT 0
32909: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32910: LD_VAR 0 1
32914: PUSH
32915: LD_INT 250
32917: EQUAL
32918: PUSH
32919: LD_VAR 0 2
32923: PPUSH
32924: CALL_OW 264
32928: PUSH
32929: LD_INT 81
32931: EQUAL
32932: AND
32933: IFFALSE 32954
// MinerPlaceMine ( unit , x , y ) ;
32935: LD_VAR 0 2
32939: PPUSH
32940: LD_VAR 0 4
32944: PPUSH
32945: LD_VAR 0 5
32949: PPUSH
32950: CALL 35778 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32954: LD_VAR 0 1
32958: PUSH
32959: LD_INT 251
32961: EQUAL
32962: PUSH
32963: LD_VAR 0 2
32967: PPUSH
32968: CALL_OW 264
32972: PUSH
32973: LD_INT 81
32975: EQUAL
32976: AND
32977: IFFALSE 32998
// MinerDetonateMine ( unit , x , y ) ;
32979: LD_VAR 0 2
32983: PPUSH
32984: LD_VAR 0 4
32988: PPUSH
32989: LD_VAR 0 5
32993: PPUSH
32994: CALL 36053 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32998: LD_VAR 0 1
33002: PUSH
33003: LD_INT 252
33005: EQUAL
33006: PUSH
33007: LD_VAR 0 2
33011: PPUSH
33012: CALL_OW 264
33016: PUSH
33017: LD_INT 81
33019: EQUAL
33020: AND
33021: IFFALSE 33042
// MinerCreateMinefield ( unit , x , y ) ;
33023: LD_VAR 0 2
33027: PPUSH
33028: LD_VAR 0 4
33032: PPUSH
33033: LD_VAR 0 5
33037: PPUSH
33038: CALL 36470 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33042: LD_VAR 0 1
33046: PUSH
33047: LD_INT 253
33049: EQUAL
33050: PUSH
33051: LD_VAR 0 2
33055: PPUSH
33056: CALL_OW 257
33060: PUSH
33061: LD_INT 5
33063: EQUAL
33064: AND
33065: IFFALSE 33086
// ComBinocular ( unit , x , y ) ;
33067: LD_VAR 0 2
33071: PPUSH
33072: LD_VAR 0 4
33076: PPUSH
33077: LD_VAR 0 5
33081: PPUSH
33082: CALL 36839 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33086: LD_VAR 0 1
33090: PUSH
33091: LD_INT 254
33093: EQUAL
33094: PUSH
33095: LD_VAR 0 2
33099: PPUSH
33100: CALL_OW 264
33104: PUSH
33105: LD_INT 99
33107: EQUAL
33108: AND
33109: PUSH
33110: LD_VAR 0 3
33114: PPUSH
33115: CALL_OW 263
33119: PUSH
33120: LD_INT 3
33122: EQUAL
33123: AND
33124: IFFALSE 33140
// HackDestroyVehicle ( unit , selectedUnit ) ;
33126: LD_VAR 0 2
33130: PPUSH
33131: LD_VAR 0 3
33135: PPUSH
33136: CALL 35142 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33140: LD_VAR 0 1
33144: PUSH
33145: LD_INT 255
33147: EQUAL
33148: PUSH
33149: LD_VAR 0 2
33153: PPUSH
33154: CALL_OW 264
33158: PUSH
33159: LD_INT 14
33161: PUSH
33162: LD_INT 53
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: IN
33169: AND
33170: PUSH
33171: LD_VAR 0 4
33175: PPUSH
33176: LD_VAR 0 5
33180: PPUSH
33181: CALL_OW 488
33185: AND
33186: IFFALSE 33210
// CutTreeXYR ( unit , x , y , 12 ) ;
33188: LD_VAR 0 2
33192: PPUSH
33193: LD_VAR 0 4
33197: PPUSH
33198: LD_VAR 0 5
33202: PPUSH
33203: LD_INT 12
33205: PPUSH
33206: CALL 33305 0 4
// if cmd = 256 then
33210: LD_VAR 0 1
33214: PUSH
33215: LD_INT 256
33217: EQUAL
33218: IFFALSE 33239
// SetFactoryWaypoint ( unit , x , y ) ;
33220: LD_VAR 0 2
33224: PPUSH
33225: LD_VAR 0 4
33229: PPUSH
33230: LD_VAR 0 5
33234: PPUSH
33235: CALL 31220 0 3
// if cmd = 257 then
33239: LD_VAR 0 1
33243: PUSH
33244: LD_INT 257
33246: EQUAL
33247: IFFALSE 33268
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33249: LD_VAR 0 2
33253: PPUSH
33254: LD_VAR 0 4
33258: PPUSH
33259: LD_VAR 0 5
33263: PPUSH
33264: CALL 31582 0 3
// if cmd = 258 then
33268: LD_VAR 0 1
33272: PUSH
33273: LD_INT 258
33275: EQUAL
33276: IFFALSE 33300
// BurnTreeXYR ( unit , x , y , 8 ) ;
33278: LD_VAR 0 2
33282: PPUSH
33283: LD_VAR 0 4
33287: PPUSH
33288: LD_VAR 0 5
33292: PPUSH
33293: LD_INT 8
33295: PPUSH
33296: CALL 33699 0 4
// end ;
33300: LD_VAR 0 6
33304: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33305: LD_INT 0
33307: PPUSH
33308: PPUSH
33309: PPUSH
33310: PPUSH
33311: PPUSH
33312: PPUSH
33313: PPUSH
33314: PPUSH
33315: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
33316: LD_VAR 0 1
33320: PPUSH
33321: CALL_OW 302
33325: NOT
33326: PUSH
33327: LD_VAR 0 2
33331: PPUSH
33332: LD_VAR 0 3
33336: PPUSH
33337: CALL_OW 488
33341: NOT
33342: OR
33343: PUSH
33344: LD_VAR 0 4
33348: NOT
33349: OR
33350: IFFALSE 33354
// exit ;
33352: GO 33694
// list := [ ] ;
33354: LD_ADDR_VAR 0 13
33358: PUSH
33359: EMPTY
33360: ST_TO_ADDR
// if x - r < 0 then
33361: LD_VAR 0 2
33365: PUSH
33366: LD_VAR 0 4
33370: MINUS
33371: PUSH
33372: LD_INT 0
33374: LESS
33375: IFFALSE 33387
// min_x := 0 else
33377: LD_ADDR_VAR 0 7
33381: PUSH
33382: LD_INT 0
33384: ST_TO_ADDR
33385: GO 33403
// min_x := x - r ;
33387: LD_ADDR_VAR 0 7
33391: PUSH
33392: LD_VAR 0 2
33396: PUSH
33397: LD_VAR 0 4
33401: MINUS
33402: ST_TO_ADDR
// if y - r < 0 then
33403: LD_VAR 0 3
33407: PUSH
33408: LD_VAR 0 4
33412: MINUS
33413: PUSH
33414: LD_INT 0
33416: LESS
33417: IFFALSE 33429
// min_y := 0 else
33419: LD_ADDR_VAR 0 8
33423: PUSH
33424: LD_INT 0
33426: ST_TO_ADDR
33427: GO 33445
// min_y := y - r ;
33429: LD_ADDR_VAR 0 8
33433: PUSH
33434: LD_VAR 0 3
33438: PUSH
33439: LD_VAR 0 4
33443: MINUS
33444: ST_TO_ADDR
// max_x := x + r ;
33445: LD_ADDR_VAR 0 9
33449: PUSH
33450: LD_VAR 0 2
33454: PUSH
33455: LD_VAR 0 4
33459: PLUS
33460: ST_TO_ADDR
// max_y := y + r ;
33461: LD_ADDR_VAR 0 10
33465: PUSH
33466: LD_VAR 0 3
33470: PUSH
33471: LD_VAR 0 4
33475: PLUS
33476: ST_TO_ADDR
// for _x = min_x to max_x do
33477: LD_ADDR_VAR 0 11
33481: PUSH
33482: DOUBLE
33483: LD_VAR 0 7
33487: DEC
33488: ST_TO_ADDR
33489: LD_VAR 0 9
33493: PUSH
33494: FOR_TO
33495: IFFALSE 33612
// for _y = min_y to max_y do
33497: LD_ADDR_VAR 0 12
33501: PUSH
33502: DOUBLE
33503: LD_VAR 0 8
33507: DEC
33508: ST_TO_ADDR
33509: LD_VAR 0 10
33513: PUSH
33514: FOR_TO
33515: IFFALSE 33608
// begin if not ValidHex ( _x , _y ) then
33517: LD_VAR 0 11
33521: PPUSH
33522: LD_VAR 0 12
33526: PPUSH
33527: CALL_OW 488
33531: NOT
33532: IFFALSE 33536
// continue ;
33534: GO 33514
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33536: LD_VAR 0 11
33540: PPUSH
33541: LD_VAR 0 12
33545: PPUSH
33546: CALL_OW 351
33550: PUSH
33551: LD_VAR 0 11
33555: PPUSH
33556: LD_VAR 0 12
33560: PPUSH
33561: CALL_OW 554
33565: AND
33566: IFFALSE 33606
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33568: LD_ADDR_VAR 0 13
33572: PUSH
33573: LD_VAR 0 13
33577: PPUSH
33578: LD_VAR 0 13
33582: PUSH
33583: LD_INT 1
33585: PLUS
33586: PPUSH
33587: LD_VAR 0 11
33591: PUSH
33592: LD_VAR 0 12
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PPUSH
33601: CALL_OW 2
33605: ST_TO_ADDR
// end ;
33606: GO 33514
33608: POP
33609: POP
33610: GO 33494
33612: POP
33613: POP
// if not list then
33614: LD_VAR 0 13
33618: NOT
33619: IFFALSE 33623
// exit ;
33621: GO 33694
// for i in list do
33623: LD_ADDR_VAR 0 6
33627: PUSH
33628: LD_VAR 0 13
33632: PUSH
33633: FOR_IN
33634: IFFALSE 33692
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33636: LD_VAR 0 1
33640: PPUSH
33641: LD_STRING M
33643: PUSH
33644: LD_VAR 0 6
33648: PUSH
33649: LD_INT 1
33651: ARRAY
33652: PUSH
33653: LD_VAR 0 6
33657: PUSH
33658: LD_INT 2
33660: ARRAY
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: PUSH
33683: EMPTY
33684: LIST
33685: PPUSH
33686: CALL_OW 447
33690: GO 33633
33692: POP
33693: POP
// end ;
33694: LD_VAR 0 5
33698: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33699: LD_INT 0
33701: PPUSH
33702: PPUSH
33703: PPUSH
33704: PPUSH
33705: PPUSH
33706: PPUSH
33707: PPUSH
33708: PPUSH
33709: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
33710: LD_VAR 0 1
33714: PPUSH
33715: CALL_OW 302
33719: NOT
33720: PUSH
33721: LD_VAR 0 2
33725: PPUSH
33726: LD_VAR 0 3
33730: PPUSH
33731: CALL_OW 488
33735: NOT
33736: OR
33737: PUSH
33738: LD_VAR 0 4
33742: NOT
33743: OR
33744: IFFALSE 33748
// exit ;
33746: GO 34096
// list := [ ] ;
33748: LD_ADDR_VAR 0 13
33752: PUSH
33753: EMPTY
33754: ST_TO_ADDR
// if x - r < 0 then
33755: LD_VAR 0 2
33759: PUSH
33760: LD_VAR 0 4
33764: MINUS
33765: PUSH
33766: LD_INT 0
33768: LESS
33769: IFFALSE 33781
// min_x := 0 else
33771: LD_ADDR_VAR 0 7
33775: PUSH
33776: LD_INT 0
33778: ST_TO_ADDR
33779: GO 33797
// min_x := x - r ;
33781: LD_ADDR_VAR 0 7
33785: PUSH
33786: LD_VAR 0 2
33790: PUSH
33791: LD_VAR 0 4
33795: MINUS
33796: ST_TO_ADDR
// if y - r < 0 then
33797: LD_VAR 0 3
33801: PUSH
33802: LD_VAR 0 4
33806: MINUS
33807: PUSH
33808: LD_INT 0
33810: LESS
33811: IFFALSE 33823
// min_y := 0 else
33813: LD_ADDR_VAR 0 8
33817: PUSH
33818: LD_INT 0
33820: ST_TO_ADDR
33821: GO 33839
// min_y := y - r ;
33823: LD_ADDR_VAR 0 8
33827: PUSH
33828: LD_VAR 0 3
33832: PUSH
33833: LD_VAR 0 4
33837: MINUS
33838: ST_TO_ADDR
// max_x := x + r ;
33839: LD_ADDR_VAR 0 9
33843: PUSH
33844: LD_VAR 0 2
33848: PUSH
33849: LD_VAR 0 4
33853: PLUS
33854: ST_TO_ADDR
// max_y := y + r ;
33855: LD_ADDR_VAR 0 10
33859: PUSH
33860: LD_VAR 0 3
33864: PUSH
33865: LD_VAR 0 4
33869: PLUS
33870: ST_TO_ADDR
// for _x = min_x to max_x do
33871: LD_ADDR_VAR 0 11
33875: PUSH
33876: DOUBLE
33877: LD_VAR 0 7
33881: DEC
33882: ST_TO_ADDR
33883: LD_VAR 0 9
33887: PUSH
33888: FOR_TO
33889: IFFALSE 34006
// for _y = min_y to max_y do
33891: LD_ADDR_VAR 0 12
33895: PUSH
33896: DOUBLE
33897: LD_VAR 0 8
33901: DEC
33902: ST_TO_ADDR
33903: LD_VAR 0 10
33907: PUSH
33908: FOR_TO
33909: IFFALSE 34002
// begin if not ValidHex ( _x , _y ) then
33911: LD_VAR 0 11
33915: PPUSH
33916: LD_VAR 0 12
33920: PPUSH
33921: CALL_OW 488
33925: NOT
33926: IFFALSE 33930
// continue ;
33928: GO 33908
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33930: LD_VAR 0 11
33934: PPUSH
33935: LD_VAR 0 12
33939: PPUSH
33940: CALL_OW 351
33944: PUSH
33945: LD_VAR 0 11
33949: PPUSH
33950: LD_VAR 0 12
33954: PPUSH
33955: CALL_OW 554
33959: AND
33960: IFFALSE 34000
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33962: LD_ADDR_VAR 0 13
33966: PUSH
33967: LD_VAR 0 13
33971: PPUSH
33972: LD_VAR 0 13
33976: PUSH
33977: LD_INT 1
33979: PLUS
33980: PPUSH
33981: LD_VAR 0 11
33985: PUSH
33986: LD_VAR 0 12
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PPUSH
33995: CALL_OW 2
33999: ST_TO_ADDR
// end ;
34000: GO 33908
34002: POP
34003: POP
34004: GO 33888
34006: POP
34007: POP
// if not list then
34008: LD_VAR 0 13
34012: NOT
34013: IFFALSE 34017
// exit ;
34015: GO 34096
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
34017: LD_ADDR_VAR 0 13
34021: PUSH
34022: LD_VAR 0 1
34026: PPUSH
34027: LD_VAR 0 13
34031: PPUSH
34032: LD_INT 1
34034: PPUSH
34035: LD_INT 1
34037: PPUSH
34038: CALL 42709 0 4
34042: ST_TO_ADDR
// ComStop ( flame ) ;
34043: LD_VAR 0 1
34047: PPUSH
34048: CALL_OW 141
// for i in list do
34052: LD_ADDR_VAR 0 6
34056: PUSH
34057: LD_VAR 0 13
34061: PUSH
34062: FOR_IN
34063: IFFALSE 34094
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
34065: LD_VAR 0 1
34069: PPUSH
34070: LD_VAR 0 6
34074: PUSH
34075: LD_INT 1
34077: ARRAY
34078: PPUSH
34079: LD_VAR 0 6
34083: PUSH
34084: LD_INT 2
34086: ARRAY
34087: PPUSH
34088: CALL_OW 176
34092: GO 34062
34094: POP
34095: POP
// end ;
34096: LD_VAR 0 5
34100: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34101: LD_EXP 98
34105: NOT
34106: IFFALSE 34156
34108: GO 34110
34110: DISABLE
// begin initHack := true ;
34111: LD_ADDR_EXP 98
34115: PUSH
34116: LD_INT 1
34118: ST_TO_ADDR
// hackTanks := [ ] ;
34119: LD_ADDR_EXP 99
34123: PUSH
34124: EMPTY
34125: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34126: LD_ADDR_EXP 100
34130: PUSH
34131: EMPTY
34132: ST_TO_ADDR
// hackLimit := 3 ;
34133: LD_ADDR_EXP 101
34137: PUSH
34138: LD_INT 3
34140: ST_TO_ADDR
// hackDist := 12 ;
34141: LD_ADDR_EXP 102
34145: PUSH
34146: LD_INT 12
34148: ST_TO_ADDR
// hackCounter := [ ] ;
34149: LD_ADDR_EXP 103
34153: PUSH
34154: EMPTY
34155: ST_TO_ADDR
// end ;
34156: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34157: LD_EXP 98
34161: PUSH
34162: LD_INT 34
34164: PUSH
34165: LD_INT 99
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PPUSH
34172: CALL_OW 69
34176: AND
34177: IFFALSE 34430
34179: GO 34181
34181: DISABLE
34182: LD_INT 0
34184: PPUSH
34185: PPUSH
// begin enable ;
34186: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34187: LD_ADDR_VAR 0 1
34191: PUSH
34192: LD_INT 34
34194: PUSH
34195: LD_INT 99
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PPUSH
34202: CALL_OW 69
34206: PUSH
34207: FOR_IN
34208: IFFALSE 34428
// begin if not i in hackTanks then
34210: LD_VAR 0 1
34214: PUSH
34215: LD_EXP 99
34219: IN
34220: NOT
34221: IFFALSE 34304
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34223: LD_ADDR_EXP 99
34227: PUSH
34228: LD_EXP 99
34232: PPUSH
34233: LD_EXP 99
34237: PUSH
34238: LD_INT 1
34240: PLUS
34241: PPUSH
34242: LD_VAR 0 1
34246: PPUSH
34247: CALL_OW 1
34251: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34252: LD_ADDR_EXP 100
34256: PUSH
34257: LD_EXP 100
34261: PPUSH
34262: LD_EXP 100
34266: PUSH
34267: LD_INT 1
34269: PLUS
34270: PPUSH
34271: EMPTY
34272: PPUSH
34273: CALL_OW 1
34277: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34278: LD_ADDR_EXP 103
34282: PUSH
34283: LD_EXP 103
34287: PPUSH
34288: LD_EXP 103
34292: PUSH
34293: LD_INT 1
34295: PLUS
34296: PPUSH
34297: EMPTY
34298: PPUSH
34299: CALL_OW 1
34303: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34304: LD_VAR 0 1
34308: PPUSH
34309: CALL_OW 302
34313: NOT
34314: IFFALSE 34327
// begin HackUnlinkAll ( i ) ;
34316: LD_VAR 0 1
34320: PPUSH
34321: CALL 34433 0 1
// continue ;
34325: GO 34207
// end ; HackCheckCapturedStatus ( i ) ;
34327: LD_VAR 0 1
34331: PPUSH
34332: CALL 34876 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34336: LD_ADDR_VAR 0 2
34340: PUSH
34341: LD_INT 81
34343: PUSH
34344: LD_VAR 0 1
34348: PPUSH
34349: CALL_OW 255
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 33
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 91
34370: PUSH
34371: LD_VAR 0 1
34375: PUSH
34376: LD_EXP 102
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 50
34388: PUSH
34389: EMPTY
34390: LIST
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: PPUSH
34398: CALL_OW 69
34402: ST_TO_ADDR
// if not tmp then
34403: LD_VAR 0 2
34407: NOT
34408: IFFALSE 34412
// continue ;
34410: GO 34207
// HackLink ( i , tmp ) ;
34412: LD_VAR 0 1
34416: PPUSH
34417: LD_VAR 0 2
34421: PPUSH
34422: CALL 34569 0 2
// end ;
34426: GO 34207
34428: POP
34429: POP
// end ;
34430: PPOPN 2
34432: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34433: LD_INT 0
34435: PPUSH
34436: PPUSH
34437: PPUSH
// if not hack in hackTanks then
34438: LD_VAR 0 1
34442: PUSH
34443: LD_EXP 99
34447: IN
34448: NOT
34449: IFFALSE 34453
// exit ;
34451: GO 34564
// index := GetElementIndex ( hackTanks , hack ) ;
34453: LD_ADDR_VAR 0 4
34457: PUSH
34458: LD_EXP 99
34462: PPUSH
34463: LD_VAR 0 1
34467: PPUSH
34468: CALL 42006 0 2
34472: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34473: LD_EXP 100
34477: PUSH
34478: LD_VAR 0 4
34482: ARRAY
34483: IFFALSE 34564
// begin for i in hackTanksCaptured [ index ] do
34485: LD_ADDR_VAR 0 3
34489: PUSH
34490: LD_EXP 100
34494: PUSH
34495: LD_VAR 0 4
34499: ARRAY
34500: PUSH
34501: FOR_IN
34502: IFFALSE 34528
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34504: LD_VAR 0 3
34508: PUSH
34509: LD_INT 1
34511: ARRAY
34512: PPUSH
34513: LD_VAR 0 3
34517: PUSH
34518: LD_INT 2
34520: ARRAY
34521: PPUSH
34522: CALL_OW 235
34526: GO 34501
34528: POP
34529: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34530: LD_ADDR_EXP 100
34534: PUSH
34535: LD_EXP 100
34539: PPUSH
34540: LD_VAR 0 4
34544: PPUSH
34545: EMPTY
34546: PPUSH
34547: CALL_OW 1
34551: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34552: LD_VAR 0 1
34556: PPUSH
34557: LD_INT 0
34559: PPUSH
34560: CALL_OW 505
// end ; end ;
34564: LD_VAR 0 2
34568: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34569: LD_INT 0
34571: PPUSH
34572: PPUSH
34573: PPUSH
// if not hack in hackTanks or not vehicles then
34574: LD_VAR 0 1
34578: PUSH
34579: LD_EXP 99
34583: IN
34584: NOT
34585: PUSH
34586: LD_VAR 0 2
34590: NOT
34591: OR
34592: IFFALSE 34596
// exit ;
34594: GO 34871
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34596: LD_ADDR_VAR 0 2
34600: PUSH
34601: LD_VAR 0 1
34605: PPUSH
34606: LD_VAR 0 2
34610: PPUSH
34611: LD_INT 1
34613: PPUSH
34614: LD_INT 1
34616: PPUSH
34617: CALL 42656 0 4
34621: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34622: LD_ADDR_VAR 0 5
34626: PUSH
34627: LD_EXP 99
34631: PPUSH
34632: LD_VAR 0 1
34636: PPUSH
34637: CALL 42006 0 2
34641: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34642: LD_EXP 100
34646: PUSH
34647: LD_VAR 0 5
34651: ARRAY
34652: PUSH
34653: LD_EXP 101
34657: LESS
34658: IFFALSE 34847
// begin for i := 1 to vehicles do
34660: LD_ADDR_VAR 0 4
34664: PUSH
34665: DOUBLE
34666: LD_INT 1
34668: DEC
34669: ST_TO_ADDR
34670: LD_VAR 0 2
34674: PUSH
34675: FOR_TO
34676: IFFALSE 34845
// begin if hackTanksCaptured [ index ] = hackLimit then
34678: LD_EXP 100
34682: PUSH
34683: LD_VAR 0 5
34687: ARRAY
34688: PUSH
34689: LD_EXP 101
34693: EQUAL
34694: IFFALSE 34698
// break ;
34696: GO 34845
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34698: LD_ADDR_EXP 103
34702: PUSH
34703: LD_EXP 103
34707: PPUSH
34708: LD_VAR 0 5
34712: PPUSH
34713: LD_EXP 103
34717: PUSH
34718: LD_VAR 0 5
34722: ARRAY
34723: PUSH
34724: LD_INT 1
34726: PLUS
34727: PPUSH
34728: CALL_OW 1
34732: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34733: LD_ADDR_EXP 100
34737: PUSH
34738: LD_EXP 100
34742: PPUSH
34743: LD_VAR 0 5
34747: PUSH
34748: LD_EXP 100
34752: PUSH
34753: LD_VAR 0 5
34757: ARRAY
34758: PUSH
34759: LD_INT 1
34761: PLUS
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PPUSH
34767: LD_VAR 0 2
34771: PUSH
34772: LD_VAR 0 4
34776: ARRAY
34777: PUSH
34778: LD_VAR 0 2
34782: PUSH
34783: LD_VAR 0 4
34787: ARRAY
34788: PPUSH
34789: CALL_OW 255
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PPUSH
34798: CALL 42221 0 3
34802: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34803: LD_VAR 0 2
34807: PUSH
34808: LD_VAR 0 4
34812: ARRAY
34813: PPUSH
34814: LD_VAR 0 1
34818: PPUSH
34819: CALL_OW 255
34823: PPUSH
34824: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34828: LD_VAR 0 2
34832: PUSH
34833: LD_VAR 0 4
34837: ARRAY
34838: PPUSH
34839: CALL_OW 141
// end ;
34843: GO 34675
34845: POP
34846: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34847: LD_VAR 0 1
34851: PPUSH
34852: LD_EXP 100
34856: PUSH
34857: LD_VAR 0 5
34861: ARRAY
34862: PUSH
34863: LD_INT 0
34865: PLUS
34866: PPUSH
34867: CALL_OW 505
// end ;
34871: LD_VAR 0 3
34875: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34876: LD_INT 0
34878: PPUSH
34879: PPUSH
34880: PPUSH
34881: PPUSH
// if not hack in hackTanks then
34882: LD_VAR 0 1
34886: PUSH
34887: LD_EXP 99
34891: IN
34892: NOT
34893: IFFALSE 34897
// exit ;
34895: GO 35137
// index := GetElementIndex ( hackTanks , hack ) ;
34897: LD_ADDR_VAR 0 4
34901: PUSH
34902: LD_EXP 99
34906: PPUSH
34907: LD_VAR 0 1
34911: PPUSH
34912: CALL 42006 0 2
34916: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34917: LD_ADDR_VAR 0 3
34921: PUSH
34922: DOUBLE
34923: LD_EXP 100
34927: PUSH
34928: LD_VAR 0 4
34932: ARRAY
34933: INC
34934: ST_TO_ADDR
34935: LD_INT 1
34937: PUSH
34938: FOR_DOWNTO
34939: IFFALSE 35111
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34941: LD_ADDR_VAR 0 5
34945: PUSH
34946: LD_EXP 100
34950: PUSH
34951: LD_VAR 0 4
34955: ARRAY
34956: PUSH
34957: LD_VAR 0 3
34961: ARRAY
34962: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34963: LD_VAR 0 5
34967: PUSH
34968: LD_INT 1
34970: ARRAY
34971: PPUSH
34972: CALL_OW 302
34976: NOT
34977: PUSH
34978: LD_VAR 0 5
34982: PUSH
34983: LD_INT 1
34985: ARRAY
34986: PPUSH
34987: CALL_OW 255
34991: PUSH
34992: LD_VAR 0 1
34996: PPUSH
34997: CALL_OW 255
35001: NONEQUAL
35002: OR
35003: IFFALSE 35109
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35005: LD_VAR 0 5
35009: PUSH
35010: LD_INT 1
35012: ARRAY
35013: PPUSH
35014: CALL_OW 305
35018: PUSH
35019: LD_VAR 0 5
35023: PUSH
35024: LD_INT 1
35026: ARRAY
35027: PPUSH
35028: CALL_OW 255
35032: PUSH
35033: LD_VAR 0 1
35037: PPUSH
35038: CALL_OW 255
35042: EQUAL
35043: AND
35044: IFFALSE 35068
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35046: LD_VAR 0 5
35050: PUSH
35051: LD_INT 1
35053: ARRAY
35054: PPUSH
35055: LD_VAR 0 5
35059: PUSH
35060: LD_INT 2
35062: ARRAY
35063: PPUSH
35064: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35068: LD_ADDR_EXP 100
35072: PUSH
35073: LD_EXP 100
35077: PPUSH
35078: LD_VAR 0 4
35082: PPUSH
35083: LD_EXP 100
35087: PUSH
35088: LD_VAR 0 4
35092: ARRAY
35093: PPUSH
35094: LD_VAR 0 3
35098: PPUSH
35099: CALL_OW 3
35103: PPUSH
35104: CALL_OW 1
35108: ST_TO_ADDR
// end ; end ;
35109: GO 34938
35111: POP
35112: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35113: LD_VAR 0 1
35117: PPUSH
35118: LD_EXP 100
35122: PUSH
35123: LD_VAR 0 4
35127: ARRAY
35128: PUSH
35129: LD_INT 0
35131: PLUS
35132: PPUSH
35133: CALL_OW 505
// end ;
35137: LD_VAR 0 2
35141: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35142: LD_INT 0
35144: PPUSH
35145: PPUSH
35146: PPUSH
35147: PPUSH
// if not hack in hackTanks then
35148: LD_VAR 0 1
35152: PUSH
35153: LD_EXP 99
35157: IN
35158: NOT
35159: IFFALSE 35163
// exit ;
35161: GO 35248
// index := GetElementIndex ( hackTanks , hack ) ;
35163: LD_ADDR_VAR 0 5
35167: PUSH
35168: LD_EXP 99
35172: PPUSH
35173: LD_VAR 0 1
35177: PPUSH
35178: CALL 42006 0 2
35182: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35183: LD_ADDR_VAR 0 4
35187: PUSH
35188: DOUBLE
35189: LD_INT 1
35191: DEC
35192: ST_TO_ADDR
35193: LD_EXP 100
35197: PUSH
35198: LD_VAR 0 5
35202: ARRAY
35203: PUSH
35204: FOR_TO
35205: IFFALSE 35246
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35207: LD_EXP 100
35211: PUSH
35212: LD_VAR 0 5
35216: ARRAY
35217: PUSH
35218: LD_VAR 0 4
35222: ARRAY
35223: PUSH
35224: LD_INT 1
35226: ARRAY
35227: PUSH
35228: LD_VAR 0 2
35232: EQUAL
35233: IFFALSE 35244
// KillUnit ( vehicle ) ;
35235: LD_VAR 0 2
35239: PPUSH
35240: CALL_OW 66
35244: GO 35204
35246: POP
35247: POP
// end ;
35248: LD_VAR 0 3
35252: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35253: LD_EXP 104
35257: NOT
35258: IFFALSE 35293
35260: GO 35262
35262: DISABLE
// begin initMiner := true ;
35263: LD_ADDR_EXP 104
35267: PUSH
35268: LD_INT 1
35270: ST_TO_ADDR
// minersList := [ ] ;
35271: LD_ADDR_EXP 105
35275: PUSH
35276: EMPTY
35277: ST_TO_ADDR
// minerMinesList := [ ] ;
35278: LD_ADDR_EXP 106
35282: PUSH
35283: EMPTY
35284: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35285: LD_ADDR_EXP 107
35289: PUSH
35290: LD_INT 5
35292: ST_TO_ADDR
// end ;
35293: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35294: LD_EXP 104
35298: PUSH
35299: LD_INT 34
35301: PUSH
35302: LD_INT 81
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PPUSH
35309: CALL_OW 69
35313: AND
35314: IFFALSE 35775
35316: GO 35318
35318: DISABLE
35319: LD_INT 0
35321: PPUSH
35322: PPUSH
35323: PPUSH
35324: PPUSH
// begin enable ;
35325: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35326: LD_ADDR_VAR 0 1
35330: PUSH
35331: LD_INT 34
35333: PUSH
35334: LD_INT 81
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PPUSH
35341: CALL_OW 69
35345: PUSH
35346: FOR_IN
35347: IFFALSE 35419
// begin if not i in minersList then
35349: LD_VAR 0 1
35353: PUSH
35354: LD_EXP 105
35358: IN
35359: NOT
35360: IFFALSE 35417
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35362: LD_ADDR_EXP 105
35366: PUSH
35367: LD_EXP 105
35371: PPUSH
35372: LD_EXP 105
35376: PUSH
35377: LD_INT 1
35379: PLUS
35380: PPUSH
35381: LD_VAR 0 1
35385: PPUSH
35386: CALL_OW 1
35390: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35391: LD_ADDR_EXP 106
35395: PUSH
35396: LD_EXP 106
35400: PPUSH
35401: LD_EXP 106
35405: PUSH
35406: LD_INT 1
35408: PLUS
35409: PPUSH
35410: EMPTY
35411: PPUSH
35412: CALL_OW 1
35416: ST_TO_ADDR
// end end ;
35417: GO 35346
35419: POP
35420: POP
// for i := minerMinesList downto 1 do
35421: LD_ADDR_VAR 0 1
35425: PUSH
35426: DOUBLE
35427: LD_EXP 106
35431: INC
35432: ST_TO_ADDR
35433: LD_INT 1
35435: PUSH
35436: FOR_DOWNTO
35437: IFFALSE 35773
// begin if IsLive ( minersList [ i ] ) then
35439: LD_EXP 105
35443: PUSH
35444: LD_VAR 0 1
35448: ARRAY
35449: PPUSH
35450: CALL_OW 300
35454: IFFALSE 35482
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35456: LD_EXP 105
35460: PUSH
35461: LD_VAR 0 1
35465: ARRAY
35466: PPUSH
35467: LD_EXP 106
35471: PUSH
35472: LD_VAR 0 1
35476: ARRAY
35477: PPUSH
35478: CALL_OW 505
// if not minerMinesList [ i ] then
35482: LD_EXP 106
35486: PUSH
35487: LD_VAR 0 1
35491: ARRAY
35492: NOT
35493: IFFALSE 35497
// continue ;
35495: GO 35436
// for j := minerMinesList [ i ] downto 1 do
35497: LD_ADDR_VAR 0 2
35501: PUSH
35502: DOUBLE
35503: LD_EXP 106
35507: PUSH
35508: LD_VAR 0 1
35512: ARRAY
35513: INC
35514: ST_TO_ADDR
35515: LD_INT 1
35517: PUSH
35518: FOR_DOWNTO
35519: IFFALSE 35769
// begin side := GetSide ( minersList [ i ] ) ;
35521: LD_ADDR_VAR 0 3
35525: PUSH
35526: LD_EXP 105
35530: PUSH
35531: LD_VAR 0 1
35535: ARRAY
35536: PPUSH
35537: CALL_OW 255
35541: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35542: LD_ADDR_VAR 0 4
35546: PUSH
35547: LD_EXP 106
35551: PUSH
35552: LD_VAR 0 1
35556: ARRAY
35557: PUSH
35558: LD_VAR 0 2
35562: ARRAY
35563: PUSH
35564: LD_INT 1
35566: ARRAY
35567: PPUSH
35568: LD_EXP 106
35572: PUSH
35573: LD_VAR 0 1
35577: ARRAY
35578: PUSH
35579: LD_VAR 0 2
35583: ARRAY
35584: PUSH
35585: LD_INT 2
35587: ARRAY
35588: PPUSH
35589: CALL_OW 428
35593: ST_TO_ADDR
// if not tmp then
35594: LD_VAR 0 4
35598: NOT
35599: IFFALSE 35603
// continue ;
35601: GO 35518
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35603: LD_VAR 0 4
35607: PUSH
35608: LD_INT 81
35610: PUSH
35611: LD_VAR 0 3
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PPUSH
35620: CALL_OW 69
35624: IN
35625: PUSH
35626: LD_EXP 106
35630: PUSH
35631: LD_VAR 0 1
35635: ARRAY
35636: PUSH
35637: LD_VAR 0 2
35641: ARRAY
35642: PUSH
35643: LD_INT 1
35645: ARRAY
35646: PPUSH
35647: LD_EXP 106
35651: PUSH
35652: LD_VAR 0 1
35656: ARRAY
35657: PUSH
35658: LD_VAR 0 2
35662: ARRAY
35663: PUSH
35664: LD_INT 2
35666: ARRAY
35667: PPUSH
35668: CALL_OW 458
35672: AND
35673: IFFALSE 35767
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35675: LD_EXP 106
35679: PUSH
35680: LD_VAR 0 1
35684: ARRAY
35685: PUSH
35686: LD_VAR 0 2
35690: ARRAY
35691: PUSH
35692: LD_INT 1
35694: ARRAY
35695: PPUSH
35696: LD_EXP 106
35700: PUSH
35701: LD_VAR 0 1
35705: ARRAY
35706: PUSH
35707: LD_VAR 0 2
35711: ARRAY
35712: PUSH
35713: LD_INT 2
35715: ARRAY
35716: PPUSH
35717: LD_VAR 0 3
35721: PPUSH
35722: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35726: LD_ADDR_EXP 106
35730: PUSH
35731: LD_EXP 106
35735: PPUSH
35736: LD_VAR 0 1
35740: PPUSH
35741: LD_EXP 106
35745: PUSH
35746: LD_VAR 0 1
35750: ARRAY
35751: PPUSH
35752: LD_VAR 0 2
35756: PPUSH
35757: CALL_OW 3
35761: PPUSH
35762: CALL_OW 1
35766: ST_TO_ADDR
// end ; end ;
35767: GO 35518
35769: POP
35770: POP
// end ;
35771: GO 35436
35773: POP
35774: POP
// end ;
35775: PPOPN 4
35777: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35778: LD_INT 0
35780: PPUSH
35781: PPUSH
// result := false ;
35782: LD_ADDR_VAR 0 4
35786: PUSH
35787: LD_INT 0
35789: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35790: LD_VAR 0 1
35794: PPUSH
35795: CALL_OW 264
35799: PUSH
35800: LD_INT 81
35802: EQUAL
35803: NOT
35804: IFFALSE 35808
// exit ;
35806: GO 36048
// index := GetElementIndex ( minersList , unit ) ;
35808: LD_ADDR_VAR 0 5
35812: PUSH
35813: LD_EXP 105
35817: PPUSH
35818: LD_VAR 0 1
35822: PPUSH
35823: CALL 42006 0 2
35827: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35828: LD_EXP 106
35832: PUSH
35833: LD_VAR 0 5
35837: ARRAY
35838: PUSH
35839: LD_EXP 107
35843: GREATEREQUAL
35844: IFFALSE 35848
// exit ;
35846: GO 36048
// ComMoveXY ( unit , x , y ) ;
35848: LD_VAR 0 1
35852: PPUSH
35853: LD_VAR 0 2
35857: PPUSH
35858: LD_VAR 0 3
35862: PPUSH
35863: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35867: LD_INT 35
35869: PPUSH
35870: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35874: LD_VAR 0 1
35878: PPUSH
35879: LD_VAR 0 2
35883: PPUSH
35884: LD_VAR 0 3
35888: PPUSH
35889: CALL 73758 0 3
35893: NOT
35894: PUSH
35895: LD_VAR 0 1
35899: PPUSH
35900: CALL_OW 314
35904: AND
35905: IFFALSE 35909
// exit ;
35907: GO 36048
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35909: LD_VAR 0 2
35913: PPUSH
35914: LD_VAR 0 3
35918: PPUSH
35919: CALL_OW 428
35923: PUSH
35924: LD_VAR 0 1
35928: EQUAL
35929: PUSH
35930: LD_VAR 0 1
35934: PPUSH
35935: CALL_OW 314
35939: NOT
35940: AND
35941: IFFALSE 35867
// PlaySoundXY ( x , y , PlantMine ) ;
35943: LD_VAR 0 2
35947: PPUSH
35948: LD_VAR 0 3
35952: PPUSH
35953: LD_STRING PlantMine
35955: PPUSH
35956: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35960: LD_VAR 0 2
35964: PPUSH
35965: LD_VAR 0 3
35969: PPUSH
35970: LD_VAR 0 1
35974: PPUSH
35975: CALL_OW 255
35979: PPUSH
35980: LD_INT 0
35982: PPUSH
35983: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35987: LD_ADDR_EXP 106
35991: PUSH
35992: LD_EXP 106
35996: PPUSH
35997: LD_VAR 0 5
36001: PUSH
36002: LD_EXP 106
36006: PUSH
36007: LD_VAR 0 5
36011: ARRAY
36012: PUSH
36013: LD_INT 1
36015: PLUS
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PPUSH
36021: LD_VAR 0 2
36025: PUSH
36026: LD_VAR 0 3
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PPUSH
36035: CALL 42221 0 3
36039: ST_TO_ADDR
// result := true ;
36040: LD_ADDR_VAR 0 4
36044: PUSH
36045: LD_INT 1
36047: ST_TO_ADDR
// end ;
36048: LD_VAR 0 4
36052: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36053: LD_INT 0
36055: PPUSH
36056: PPUSH
36057: PPUSH
// if not unit in minersList then
36058: LD_VAR 0 1
36062: PUSH
36063: LD_EXP 105
36067: IN
36068: NOT
36069: IFFALSE 36073
// exit ;
36071: GO 36465
// index := GetElementIndex ( minersList , unit ) ;
36073: LD_ADDR_VAR 0 6
36077: PUSH
36078: LD_EXP 105
36082: PPUSH
36083: LD_VAR 0 1
36087: PPUSH
36088: CALL 42006 0 2
36092: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36093: LD_ADDR_VAR 0 5
36097: PUSH
36098: DOUBLE
36099: LD_EXP 106
36103: PUSH
36104: LD_VAR 0 6
36108: ARRAY
36109: INC
36110: ST_TO_ADDR
36111: LD_INT 1
36113: PUSH
36114: FOR_DOWNTO
36115: IFFALSE 36276
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36117: LD_EXP 106
36121: PUSH
36122: LD_VAR 0 6
36126: ARRAY
36127: PUSH
36128: LD_VAR 0 5
36132: ARRAY
36133: PUSH
36134: LD_INT 1
36136: ARRAY
36137: PUSH
36138: LD_VAR 0 2
36142: EQUAL
36143: PUSH
36144: LD_EXP 106
36148: PUSH
36149: LD_VAR 0 6
36153: ARRAY
36154: PUSH
36155: LD_VAR 0 5
36159: ARRAY
36160: PUSH
36161: LD_INT 2
36163: ARRAY
36164: PUSH
36165: LD_VAR 0 3
36169: EQUAL
36170: AND
36171: IFFALSE 36274
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36173: LD_EXP 106
36177: PUSH
36178: LD_VAR 0 6
36182: ARRAY
36183: PUSH
36184: LD_VAR 0 5
36188: ARRAY
36189: PUSH
36190: LD_INT 1
36192: ARRAY
36193: PPUSH
36194: LD_EXP 106
36198: PUSH
36199: LD_VAR 0 6
36203: ARRAY
36204: PUSH
36205: LD_VAR 0 5
36209: ARRAY
36210: PUSH
36211: LD_INT 2
36213: ARRAY
36214: PPUSH
36215: LD_VAR 0 1
36219: PPUSH
36220: CALL_OW 255
36224: PPUSH
36225: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36229: LD_ADDR_EXP 106
36233: PUSH
36234: LD_EXP 106
36238: PPUSH
36239: LD_VAR 0 6
36243: PPUSH
36244: LD_EXP 106
36248: PUSH
36249: LD_VAR 0 6
36253: ARRAY
36254: PPUSH
36255: LD_VAR 0 5
36259: PPUSH
36260: CALL_OW 3
36264: PPUSH
36265: CALL_OW 1
36269: ST_TO_ADDR
// exit ;
36270: POP
36271: POP
36272: GO 36465
// end ; end ;
36274: GO 36114
36276: POP
36277: POP
// for i := minerMinesList [ index ] downto 1 do
36278: LD_ADDR_VAR 0 5
36282: PUSH
36283: DOUBLE
36284: LD_EXP 106
36288: PUSH
36289: LD_VAR 0 6
36293: ARRAY
36294: INC
36295: ST_TO_ADDR
36296: LD_INT 1
36298: PUSH
36299: FOR_DOWNTO
36300: IFFALSE 36463
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36302: LD_EXP 106
36306: PUSH
36307: LD_VAR 0 6
36311: ARRAY
36312: PUSH
36313: LD_VAR 0 5
36317: ARRAY
36318: PUSH
36319: LD_INT 1
36321: ARRAY
36322: PPUSH
36323: LD_EXP 106
36327: PUSH
36328: LD_VAR 0 6
36332: ARRAY
36333: PUSH
36334: LD_VAR 0 5
36338: ARRAY
36339: PUSH
36340: LD_INT 2
36342: ARRAY
36343: PPUSH
36344: LD_VAR 0 2
36348: PPUSH
36349: LD_VAR 0 3
36353: PPUSH
36354: CALL_OW 298
36358: PUSH
36359: LD_INT 6
36361: LESS
36362: IFFALSE 36461
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36364: LD_EXP 106
36368: PUSH
36369: LD_VAR 0 6
36373: ARRAY
36374: PUSH
36375: LD_VAR 0 5
36379: ARRAY
36380: PUSH
36381: LD_INT 1
36383: ARRAY
36384: PPUSH
36385: LD_EXP 106
36389: PUSH
36390: LD_VAR 0 6
36394: ARRAY
36395: PUSH
36396: LD_VAR 0 5
36400: ARRAY
36401: PUSH
36402: LD_INT 2
36404: ARRAY
36405: PPUSH
36406: LD_VAR 0 1
36410: PPUSH
36411: CALL_OW 255
36415: PPUSH
36416: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36420: LD_ADDR_EXP 106
36424: PUSH
36425: LD_EXP 106
36429: PPUSH
36430: LD_VAR 0 6
36434: PPUSH
36435: LD_EXP 106
36439: PUSH
36440: LD_VAR 0 6
36444: ARRAY
36445: PPUSH
36446: LD_VAR 0 5
36450: PPUSH
36451: CALL_OW 3
36455: PPUSH
36456: CALL_OW 1
36460: ST_TO_ADDR
// end ; end ;
36461: GO 36299
36463: POP
36464: POP
// end ;
36465: LD_VAR 0 4
36469: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36470: LD_INT 0
36472: PPUSH
36473: PPUSH
36474: PPUSH
36475: PPUSH
36476: PPUSH
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36481: LD_VAR 0 1
36485: PPUSH
36486: CALL_OW 264
36490: PUSH
36491: LD_INT 81
36493: EQUAL
36494: NOT
36495: PUSH
36496: LD_VAR 0 1
36500: PUSH
36501: LD_EXP 105
36505: IN
36506: NOT
36507: OR
36508: IFFALSE 36512
// exit ;
36510: GO 36834
// index := GetElementIndex ( minersList , unit ) ;
36512: LD_ADDR_VAR 0 6
36516: PUSH
36517: LD_EXP 105
36521: PPUSH
36522: LD_VAR 0 1
36526: PPUSH
36527: CALL 42006 0 2
36531: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36532: LD_ADDR_VAR 0 8
36536: PUSH
36537: LD_EXP 107
36541: PUSH
36542: LD_EXP 106
36546: PUSH
36547: LD_VAR 0 6
36551: ARRAY
36552: MINUS
36553: ST_TO_ADDR
// if not minesFreeAmount then
36554: LD_VAR 0 8
36558: NOT
36559: IFFALSE 36563
// exit ;
36561: GO 36834
// tmp := [ ] ;
36563: LD_ADDR_VAR 0 7
36567: PUSH
36568: EMPTY
36569: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36570: LD_ADDR_VAR 0 5
36574: PUSH
36575: DOUBLE
36576: LD_INT 1
36578: DEC
36579: ST_TO_ADDR
36580: LD_VAR 0 8
36584: PUSH
36585: FOR_TO
36586: IFFALSE 36781
// begin _d := rand ( 0 , 5 ) ;
36588: LD_ADDR_VAR 0 11
36592: PUSH
36593: LD_INT 0
36595: PPUSH
36596: LD_INT 5
36598: PPUSH
36599: CALL_OW 12
36603: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36604: LD_ADDR_VAR 0 12
36608: PUSH
36609: LD_INT 2
36611: PPUSH
36612: LD_INT 6
36614: PPUSH
36615: CALL_OW 12
36619: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36620: LD_ADDR_VAR 0 9
36624: PUSH
36625: LD_VAR 0 2
36629: PPUSH
36630: LD_VAR 0 11
36634: PPUSH
36635: LD_VAR 0 12
36639: PPUSH
36640: CALL_OW 272
36644: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36645: LD_ADDR_VAR 0 10
36649: PUSH
36650: LD_VAR 0 3
36654: PPUSH
36655: LD_VAR 0 11
36659: PPUSH
36660: LD_VAR 0 12
36664: PPUSH
36665: CALL_OW 273
36669: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36670: LD_VAR 0 9
36674: PPUSH
36675: LD_VAR 0 10
36679: PPUSH
36680: CALL_OW 488
36684: PUSH
36685: LD_VAR 0 9
36689: PUSH
36690: LD_VAR 0 10
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_VAR 0 7
36703: IN
36704: NOT
36705: AND
36706: PUSH
36707: LD_VAR 0 9
36711: PPUSH
36712: LD_VAR 0 10
36716: PPUSH
36717: CALL_OW 458
36721: NOT
36722: AND
36723: IFFALSE 36765
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36725: LD_ADDR_VAR 0 7
36729: PUSH
36730: LD_VAR 0 7
36734: PPUSH
36735: LD_VAR 0 7
36739: PUSH
36740: LD_INT 1
36742: PLUS
36743: PPUSH
36744: LD_VAR 0 9
36748: PUSH
36749: LD_VAR 0 10
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PPUSH
36758: CALL_OW 1
36762: ST_TO_ADDR
36763: GO 36779
// i := i - 1 ;
36765: LD_ADDR_VAR 0 5
36769: PUSH
36770: LD_VAR 0 5
36774: PUSH
36775: LD_INT 1
36777: MINUS
36778: ST_TO_ADDR
// end ;
36779: GO 36585
36781: POP
36782: POP
// for i in tmp do
36783: LD_ADDR_VAR 0 5
36787: PUSH
36788: LD_VAR 0 7
36792: PUSH
36793: FOR_IN
36794: IFFALSE 36832
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36796: LD_VAR 0 1
36800: PPUSH
36801: LD_VAR 0 5
36805: PUSH
36806: LD_INT 1
36808: ARRAY
36809: PPUSH
36810: LD_VAR 0 5
36814: PUSH
36815: LD_INT 2
36817: ARRAY
36818: PPUSH
36819: CALL 35778 0 3
36823: NOT
36824: IFFALSE 36830
// exit ;
36826: POP
36827: POP
36828: GO 36834
36830: GO 36793
36832: POP
36833: POP
// end ;
36834: LD_VAR 0 4
36838: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36839: LD_INT 0
36841: PPUSH
36842: PPUSH
36843: PPUSH
36844: PPUSH
36845: PPUSH
36846: PPUSH
36847: PPUSH
// if not GetClass ( unit ) = class_sniper then
36848: LD_VAR 0 1
36852: PPUSH
36853: CALL_OW 257
36857: PUSH
36858: LD_INT 5
36860: EQUAL
36861: NOT
36862: IFFALSE 36866
// exit ;
36864: GO 37254
// dist := 8 ;
36866: LD_ADDR_VAR 0 5
36870: PUSH
36871: LD_INT 8
36873: ST_TO_ADDR
// viewRange := 12 ;
36874: LD_ADDR_VAR 0 7
36878: PUSH
36879: LD_INT 12
36881: ST_TO_ADDR
// side := GetSide ( unit ) ;
36882: LD_ADDR_VAR 0 6
36886: PUSH
36887: LD_VAR 0 1
36891: PPUSH
36892: CALL_OW 255
36896: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36897: LD_INT 61
36899: PPUSH
36900: LD_VAR 0 6
36904: PPUSH
36905: CALL_OW 321
36909: PUSH
36910: LD_INT 2
36912: EQUAL
36913: IFFALSE 36923
// viewRange := 16 ;
36915: LD_ADDR_VAR 0 7
36919: PUSH
36920: LD_INT 16
36922: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36923: LD_VAR 0 1
36927: PPUSH
36928: LD_VAR 0 2
36932: PPUSH
36933: LD_VAR 0 3
36937: PPUSH
36938: CALL_OW 297
36942: PUSH
36943: LD_VAR 0 5
36947: GREATER
36948: IFFALSE 37027
// begin ComMoveXY ( unit , x , y ) ;
36950: LD_VAR 0 1
36954: PPUSH
36955: LD_VAR 0 2
36959: PPUSH
36960: LD_VAR 0 3
36964: PPUSH
36965: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36969: LD_INT 35
36971: PPUSH
36972: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36976: LD_VAR 0 1
36980: PPUSH
36981: LD_VAR 0 2
36985: PPUSH
36986: LD_VAR 0 3
36990: PPUSH
36991: CALL 73758 0 3
36995: NOT
36996: IFFALSE 37000
// exit ;
36998: GO 37254
// until GetDistUnitXY ( unit , x , y ) < dist ;
37000: LD_VAR 0 1
37004: PPUSH
37005: LD_VAR 0 2
37009: PPUSH
37010: LD_VAR 0 3
37014: PPUSH
37015: CALL_OW 297
37019: PUSH
37020: LD_VAR 0 5
37024: LESS
37025: IFFALSE 36969
// end ; ComTurnXY ( unit , x , y ) ;
37027: LD_VAR 0 1
37031: PPUSH
37032: LD_VAR 0 2
37036: PPUSH
37037: LD_VAR 0 3
37041: PPUSH
37042: CALL_OW 118
// wait ( 5 ) ;
37046: LD_INT 5
37048: PPUSH
37049: CALL_OW 67
// _d := GetDir ( unit ) ;
37053: LD_ADDR_VAR 0 10
37057: PUSH
37058: LD_VAR 0 1
37062: PPUSH
37063: CALL_OW 254
37067: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37068: LD_ADDR_VAR 0 8
37072: PUSH
37073: LD_VAR 0 1
37077: PPUSH
37078: CALL_OW 250
37082: PPUSH
37083: LD_VAR 0 10
37087: PPUSH
37088: LD_VAR 0 5
37092: PPUSH
37093: CALL_OW 272
37097: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37098: LD_ADDR_VAR 0 9
37102: PUSH
37103: LD_VAR 0 1
37107: PPUSH
37108: CALL_OW 251
37112: PPUSH
37113: LD_VAR 0 10
37117: PPUSH
37118: LD_VAR 0 5
37122: PPUSH
37123: CALL_OW 273
37127: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37128: LD_VAR 0 8
37132: PPUSH
37133: LD_VAR 0 9
37137: PPUSH
37138: CALL_OW 488
37142: NOT
37143: IFFALSE 37147
// exit ;
37145: GO 37254
// ComAnimCustom ( unit , 1 ) ;
37147: LD_VAR 0 1
37151: PPUSH
37152: LD_INT 1
37154: PPUSH
37155: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37159: LD_VAR 0 8
37163: PPUSH
37164: LD_VAR 0 9
37168: PPUSH
37169: LD_VAR 0 6
37173: PPUSH
37174: LD_VAR 0 7
37178: PPUSH
37179: CALL_OW 330
// repeat wait ( 1 ) ;
37183: LD_INT 1
37185: PPUSH
37186: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37190: LD_VAR 0 1
37194: PPUSH
37195: CALL_OW 316
37199: PUSH
37200: LD_VAR 0 1
37204: PPUSH
37205: CALL_OW 314
37209: OR
37210: PUSH
37211: LD_VAR 0 1
37215: PPUSH
37216: CALL_OW 302
37220: NOT
37221: OR
37222: PUSH
37223: LD_VAR 0 1
37227: PPUSH
37228: CALL_OW 301
37232: OR
37233: IFFALSE 37183
// RemoveSeeing ( _x , _y , side ) ;
37235: LD_VAR 0 8
37239: PPUSH
37240: LD_VAR 0 9
37244: PPUSH
37245: LD_VAR 0 6
37249: PPUSH
37250: CALL_OW 331
// end ; end_of_file
37254: LD_VAR 0 4
37258: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37259: LD_INT 0
37261: PPUSH
37262: PPUSH
// if exist_mode then
37263: LD_VAR 0 2
37267: IFFALSE 37292
// unit := CreateCharacter ( prefix & ident ) else
37269: LD_ADDR_VAR 0 5
37273: PUSH
37274: LD_VAR 0 3
37278: PUSH
37279: LD_VAR 0 1
37283: STR
37284: PPUSH
37285: CALL_OW 34
37289: ST_TO_ADDR
37290: GO 37307
// unit := NewCharacter ( ident ) ;
37292: LD_ADDR_VAR 0 5
37296: PUSH
37297: LD_VAR 0 1
37301: PPUSH
37302: CALL_OW 25
37306: ST_TO_ADDR
// result := unit ;
37307: LD_ADDR_VAR 0 4
37311: PUSH
37312: LD_VAR 0 5
37316: ST_TO_ADDR
// end ;
37317: LD_VAR 0 4
37321: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37322: LD_INT 0
37324: PPUSH
37325: PPUSH
// if not side or not nation then
37326: LD_VAR 0 1
37330: NOT
37331: PUSH
37332: LD_VAR 0 2
37336: NOT
37337: OR
37338: IFFALSE 37342
// exit ;
37340: GO 38110
// case nation of nation_american :
37342: LD_VAR 0 2
37346: PUSH
37347: LD_INT 1
37349: DOUBLE
37350: EQUAL
37351: IFTRUE 37355
37353: GO 37569
37355: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37356: LD_ADDR_VAR 0 4
37360: PUSH
37361: LD_INT 35
37363: PUSH
37364: LD_INT 45
37366: PUSH
37367: LD_INT 46
37369: PUSH
37370: LD_INT 47
37372: PUSH
37373: LD_INT 82
37375: PUSH
37376: LD_INT 83
37378: PUSH
37379: LD_INT 84
37381: PUSH
37382: LD_INT 85
37384: PUSH
37385: LD_INT 86
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: LD_INT 2
37393: PUSH
37394: LD_INT 6
37396: PUSH
37397: LD_INT 15
37399: PUSH
37400: LD_INT 16
37402: PUSH
37403: LD_INT 7
37405: PUSH
37406: LD_INT 12
37408: PUSH
37409: LD_INT 13
37411: PUSH
37412: LD_INT 10
37414: PUSH
37415: LD_INT 14
37417: PUSH
37418: LD_INT 20
37420: PUSH
37421: LD_INT 21
37423: PUSH
37424: LD_INT 22
37426: PUSH
37427: LD_INT 25
37429: PUSH
37430: LD_INT 32
37432: PUSH
37433: LD_INT 27
37435: PUSH
37436: LD_INT 36
37438: PUSH
37439: LD_INT 69
37441: PUSH
37442: LD_INT 39
37444: PUSH
37445: LD_INT 34
37447: PUSH
37448: LD_INT 40
37450: PUSH
37451: LD_INT 48
37453: PUSH
37454: LD_INT 49
37456: PUSH
37457: LD_INT 50
37459: PUSH
37460: LD_INT 51
37462: PUSH
37463: LD_INT 52
37465: PUSH
37466: LD_INT 53
37468: PUSH
37469: LD_INT 54
37471: PUSH
37472: LD_INT 55
37474: PUSH
37475: LD_INT 56
37477: PUSH
37478: LD_INT 57
37480: PUSH
37481: LD_INT 58
37483: PUSH
37484: LD_INT 59
37486: PUSH
37487: LD_INT 60
37489: PUSH
37490: LD_INT 61
37492: PUSH
37493: LD_INT 62
37495: PUSH
37496: LD_INT 80
37498: PUSH
37499: LD_INT 82
37501: PUSH
37502: LD_INT 83
37504: PUSH
37505: LD_INT 84
37507: PUSH
37508: LD_INT 85
37510: PUSH
37511: LD_INT 86
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: ST_TO_ADDR
37567: GO 38034
37569: LD_INT 2
37571: DOUBLE
37572: EQUAL
37573: IFTRUE 37577
37575: GO 37803
37577: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37578: LD_ADDR_VAR 0 4
37582: PUSH
37583: LD_INT 35
37585: PUSH
37586: LD_INT 45
37588: PUSH
37589: LD_INT 46
37591: PUSH
37592: LD_INT 47
37594: PUSH
37595: LD_INT 82
37597: PUSH
37598: LD_INT 83
37600: PUSH
37601: LD_INT 84
37603: PUSH
37604: LD_INT 85
37606: PUSH
37607: LD_INT 87
37609: PUSH
37610: LD_INT 70
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: LD_INT 11
37618: PUSH
37619: LD_INT 3
37621: PUSH
37622: LD_INT 4
37624: PUSH
37625: LD_INT 5
37627: PUSH
37628: LD_INT 6
37630: PUSH
37631: LD_INT 15
37633: PUSH
37634: LD_INT 18
37636: PUSH
37637: LD_INT 7
37639: PUSH
37640: LD_INT 17
37642: PUSH
37643: LD_INT 8
37645: PUSH
37646: LD_INT 20
37648: PUSH
37649: LD_INT 21
37651: PUSH
37652: LD_INT 22
37654: PUSH
37655: LD_INT 72
37657: PUSH
37658: LD_INT 26
37660: PUSH
37661: LD_INT 69
37663: PUSH
37664: LD_INT 39
37666: PUSH
37667: LD_INT 40
37669: PUSH
37670: LD_INT 41
37672: PUSH
37673: LD_INT 42
37675: PUSH
37676: LD_INT 43
37678: PUSH
37679: LD_INT 48
37681: PUSH
37682: LD_INT 49
37684: PUSH
37685: LD_INT 50
37687: PUSH
37688: LD_INT 51
37690: PUSH
37691: LD_INT 52
37693: PUSH
37694: LD_INT 53
37696: PUSH
37697: LD_INT 54
37699: PUSH
37700: LD_INT 55
37702: PUSH
37703: LD_INT 56
37705: PUSH
37706: LD_INT 60
37708: PUSH
37709: LD_INT 61
37711: PUSH
37712: LD_INT 62
37714: PUSH
37715: LD_INT 66
37717: PUSH
37718: LD_INT 67
37720: PUSH
37721: LD_INT 68
37723: PUSH
37724: LD_INT 81
37726: PUSH
37727: LD_INT 82
37729: PUSH
37730: LD_INT 83
37732: PUSH
37733: LD_INT 84
37735: PUSH
37736: LD_INT 85
37738: PUSH
37739: LD_INT 87
37741: PUSH
37742: LD_INT 88
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: ST_TO_ADDR
37801: GO 38034
37803: LD_INT 3
37805: DOUBLE
37806: EQUAL
37807: IFTRUE 37811
37809: GO 38033
37811: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37812: LD_ADDR_VAR 0 4
37816: PUSH
37817: LD_INT 46
37819: PUSH
37820: LD_INT 47
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: LD_INT 82
37831: PUSH
37832: LD_INT 83
37834: PUSH
37835: LD_INT 84
37837: PUSH
37838: LD_INT 85
37840: PUSH
37841: LD_INT 86
37843: PUSH
37844: LD_INT 11
37846: PUSH
37847: LD_INT 9
37849: PUSH
37850: LD_INT 20
37852: PUSH
37853: LD_INT 19
37855: PUSH
37856: LD_INT 21
37858: PUSH
37859: LD_INT 24
37861: PUSH
37862: LD_INT 22
37864: PUSH
37865: LD_INT 25
37867: PUSH
37868: LD_INT 28
37870: PUSH
37871: LD_INT 29
37873: PUSH
37874: LD_INT 30
37876: PUSH
37877: LD_INT 31
37879: PUSH
37880: LD_INT 37
37882: PUSH
37883: LD_INT 38
37885: PUSH
37886: LD_INT 32
37888: PUSH
37889: LD_INT 27
37891: PUSH
37892: LD_INT 33
37894: PUSH
37895: LD_INT 69
37897: PUSH
37898: LD_INT 39
37900: PUSH
37901: LD_INT 34
37903: PUSH
37904: LD_INT 40
37906: PUSH
37907: LD_INT 71
37909: PUSH
37910: LD_INT 23
37912: PUSH
37913: LD_INT 44
37915: PUSH
37916: LD_INT 48
37918: PUSH
37919: LD_INT 49
37921: PUSH
37922: LD_INT 50
37924: PUSH
37925: LD_INT 51
37927: PUSH
37928: LD_INT 52
37930: PUSH
37931: LD_INT 53
37933: PUSH
37934: LD_INT 54
37936: PUSH
37937: LD_INT 55
37939: PUSH
37940: LD_INT 56
37942: PUSH
37943: LD_INT 57
37945: PUSH
37946: LD_INT 58
37948: PUSH
37949: LD_INT 59
37951: PUSH
37952: LD_INT 63
37954: PUSH
37955: LD_INT 64
37957: PUSH
37958: LD_INT 65
37960: PUSH
37961: LD_INT 82
37963: PUSH
37964: LD_INT 83
37966: PUSH
37967: LD_INT 84
37969: PUSH
37970: LD_INT 85
37972: PUSH
37973: LD_INT 86
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: ST_TO_ADDR
38031: GO 38034
38033: POP
// if state > - 1 and state < 3 then
38034: LD_VAR 0 3
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: GREATER
38043: PUSH
38044: LD_VAR 0 3
38048: PUSH
38049: LD_INT 3
38051: LESS
38052: AND
38053: IFFALSE 38110
// for i in result do
38055: LD_ADDR_VAR 0 5
38059: PUSH
38060: LD_VAR 0 4
38064: PUSH
38065: FOR_IN
38066: IFFALSE 38108
// if GetTech ( i , side ) <> state then
38068: LD_VAR 0 5
38072: PPUSH
38073: LD_VAR 0 1
38077: PPUSH
38078: CALL_OW 321
38082: PUSH
38083: LD_VAR 0 3
38087: NONEQUAL
38088: IFFALSE 38106
// result := result diff i ;
38090: LD_ADDR_VAR 0 4
38094: PUSH
38095: LD_VAR 0 4
38099: PUSH
38100: LD_VAR 0 5
38104: DIFF
38105: ST_TO_ADDR
38106: GO 38065
38108: POP
38109: POP
// end ;
38110: LD_VAR 0 4
38114: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38115: LD_INT 0
38117: PPUSH
38118: PPUSH
38119: PPUSH
// result := true ;
38120: LD_ADDR_VAR 0 3
38124: PUSH
38125: LD_INT 1
38127: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38128: LD_ADDR_VAR 0 5
38132: PUSH
38133: LD_VAR 0 2
38137: PPUSH
38138: CALL_OW 480
38142: ST_TO_ADDR
// if not tmp then
38143: LD_VAR 0 5
38147: NOT
38148: IFFALSE 38152
// exit ;
38150: GO 38201
// for i in tmp do
38152: LD_ADDR_VAR 0 4
38156: PUSH
38157: LD_VAR 0 5
38161: PUSH
38162: FOR_IN
38163: IFFALSE 38199
// if GetTech ( i , side ) <> state_researched then
38165: LD_VAR 0 4
38169: PPUSH
38170: LD_VAR 0 1
38174: PPUSH
38175: CALL_OW 321
38179: PUSH
38180: LD_INT 2
38182: NONEQUAL
38183: IFFALSE 38197
// begin result := false ;
38185: LD_ADDR_VAR 0 3
38189: PUSH
38190: LD_INT 0
38192: ST_TO_ADDR
// exit ;
38193: POP
38194: POP
38195: GO 38201
// end ;
38197: GO 38162
38199: POP
38200: POP
// end ;
38201: LD_VAR 0 3
38205: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38206: LD_INT 0
38208: PPUSH
38209: PPUSH
38210: PPUSH
38211: PPUSH
38212: PPUSH
38213: PPUSH
38214: PPUSH
38215: PPUSH
38216: PPUSH
38217: PPUSH
38218: PPUSH
38219: PPUSH
38220: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38221: LD_VAR 0 1
38225: NOT
38226: PUSH
38227: LD_VAR 0 1
38231: PPUSH
38232: CALL_OW 257
38236: PUSH
38237: LD_INT 9
38239: NONEQUAL
38240: OR
38241: IFFALSE 38245
// exit ;
38243: GO 38818
// side := GetSide ( unit ) ;
38245: LD_ADDR_VAR 0 9
38249: PUSH
38250: LD_VAR 0 1
38254: PPUSH
38255: CALL_OW 255
38259: ST_TO_ADDR
// tech_space := tech_spacanom ;
38260: LD_ADDR_VAR 0 12
38264: PUSH
38265: LD_INT 29
38267: ST_TO_ADDR
// tech_time := tech_taurad ;
38268: LD_ADDR_VAR 0 13
38272: PUSH
38273: LD_INT 28
38275: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38276: LD_ADDR_VAR 0 11
38280: PUSH
38281: LD_VAR 0 1
38285: PPUSH
38286: CALL_OW 310
38290: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38291: LD_VAR 0 11
38295: PPUSH
38296: CALL_OW 247
38300: PUSH
38301: LD_INT 2
38303: EQUAL
38304: IFFALSE 38308
// exit ;
38306: GO 38818
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38308: LD_ADDR_VAR 0 8
38312: PUSH
38313: LD_INT 81
38315: PUSH
38316: LD_VAR 0 9
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 3
38327: PUSH
38328: LD_INT 21
38330: PUSH
38331: LD_INT 3
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PPUSH
38346: CALL_OW 69
38350: ST_TO_ADDR
// if not tmp then
38351: LD_VAR 0 8
38355: NOT
38356: IFFALSE 38360
// exit ;
38358: GO 38818
// if in_unit then
38360: LD_VAR 0 11
38364: IFFALSE 38388
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38366: LD_ADDR_VAR 0 10
38370: PUSH
38371: LD_VAR 0 8
38375: PPUSH
38376: LD_VAR 0 11
38380: PPUSH
38381: CALL_OW 74
38385: ST_TO_ADDR
38386: GO 38408
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38388: LD_ADDR_VAR 0 10
38392: PUSH
38393: LD_VAR 0 8
38397: PPUSH
38398: LD_VAR 0 1
38402: PPUSH
38403: CALL_OW 74
38407: ST_TO_ADDR
// if not enemy then
38408: LD_VAR 0 10
38412: NOT
38413: IFFALSE 38417
// exit ;
38415: GO 38818
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38417: LD_VAR 0 11
38421: PUSH
38422: LD_VAR 0 11
38426: PPUSH
38427: LD_VAR 0 10
38431: PPUSH
38432: CALL_OW 296
38436: PUSH
38437: LD_INT 13
38439: GREATER
38440: AND
38441: PUSH
38442: LD_VAR 0 1
38446: PPUSH
38447: LD_VAR 0 10
38451: PPUSH
38452: CALL_OW 296
38456: PUSH
38457: LD_INT 12
38459: GREATER
38460: OR
38461: IFFALSE 38465
// exit ;
38463: GO 38818
// missile := [ 1 ] ;
38465: LD_ADDR_VAR 0 14
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38476: LD_VAR 0 9
38480: PPUSH
38481: LD_VAR 0 12
38485: PPUSH
38486: CALL_OW 325
38490: IFFALSE 38519
// missile := Replace ( missile , missile + 1 , 2 ) ;
38492: LD_ADDR_VAR 0 14
38496: PUSH
38497: LD_VAR 0 14
38501: PPUSH
38502: LD_VAR 0 14
38506: PUSH
38507: LD_INT 1
38509: PLUS
38510: PPUSH
38511: LD_INT 2
38513: PPUSH
38514: CALL_OW 1
38518: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38519: LD_VAR 0 9
38523: PPUSH
38524: LD_VAR 0 13
38528: PPUSH
38529: CALL_OW 325
38533: PUSH
38534: LD_VAR 0 10
38538: PPUSH
38539: CALL_OW 255
38543: PPUSH
38544: LD_VAR 0 13
38548: PPUSH
38549: CALL_OW 325
38553: NOT
38554: AND
38555: IFFALSE 38584
// missile := Replace ( missile , missile + 1 , 3 ) ;
38557: LD_ADDR_VAR 0 14
38561: PUSH
38562: LD_VAR 0 14
38566: PPUSH
38567: LD_VAR 0 14
38571: PUSH
38572: LD_INT 1
38574: PLUS
38575: PPUSH
38576: LD_INT 3
38578: PPUSH
38579: CALL_OW 1
38583: ST_TO_ADDR
// if missile < 2 then
38584: LD_VAR 0 14
38588: PUSH
38589: LD_INT 2
38591: LESS
38592: IFFALSE 38596
// exit ;
38594: GO 38818
// x := GetX ( enemy ) ;
38596: LD_ADDR_VAR 0 4
38600: PUSH
38601: LD_VAR 0 10
38605: PPUSH
38606: CALL_OW 250
38610: ST_TO_ADDR
// y := GetY ( enemy ) ;
38611: LD_ADDR_VAR 0 5
38615: PUSH
38616: LD_VAR 0 10
38620: PPUSH
38621: CALL_OW 251
38625: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38626: LD_ADDR_VAR 0 6
38630: PUSH
38631: LD_VAR 0 4
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PPUSH
38640: LD_INT 1
38642: PPUSH
38643: CALL_OW 12
38647: PLUS
38648: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38649: LD_ADDR_VAR 0 7
38653: PUSH
38654: LD_VAR 0 5
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PPUSH
38663: LD_INT 1
38665: PPUSH
38666: CALL_OW 12
38670: PLUS
38671: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38672: LD_VAR 0 6
38676: PPUSH
38677: LD_VAR 0 7
38681: PPUSH
38682: CALL_OW 488
38686: NOT
38687: IFFALSE 38709
// begin _x := x ;
38689: LD_ADDR_VAR 0 6
38693: PUSH
38694: LD_VAR 0 4
38698: ST_TO_ADDR
// _y := y ;
38699: LD_ADDR_VAR 0 7
38703: PUSH
38704: LD_VAR 0 5
38708: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38709: LD_ADDR_VAR 0 3
38713: PUSH
38714: LD_INT 1
38716: PPUSH
38717: LD_VAR 0 14
38721: PPUSH
38722: CALL_OW 12
38726: ST_TO_ADDR
// case i of 1 :
38727: LD_VAR 0 3
38731: PUSH
38732: LD_INT 1
38734: DOUBLE
38735: EQUAL
38736: IFTRUE 38740
38738: GO 38757
38740: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38741: LD_VAR 0 1
38745: PPUSH
38746: LD_VAR 0 10
38750: PPUSH
38751: CALL_OW 115
38755: GO 38818
38757: LD_INT 2
38759: DOUBLE
38760: EQUAL
38761: IFTRUE 38765
38763: GO 38787
38765: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38766: LD_VAR 0 1
38770: PPUSH
38771: LD_VAR 0 6
38775: PPUSH
38776: LD_VAR 0 7
38780: PPUSH
38781: CALL_OW 153
38785: GO 38818
38787: LD_INT 3
38789: DOUBLE
38790: EQUAL
38791: IFTRUE 38795
38793: GO 38817
38795: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38796: LD_VAR 0 1
38800: PPUSH
38801: LD_VAR 0 6
38805: PPUSH
38806: LD_VAR 0 7
38810: PPUSH
38811: CALL_OW 154
38815: GO 38818
38817: POP
// end ;
38818: LD_VAR 0 2
38822: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38823: LD_INT 0
38825: PPUSH
38826: PPUSH
38827: PPUSH
38828: PPUSH
38829: PPUSH
38830: PPUSH
// if not unit or not building then
38831: LD_VAR 0 1
38835: NOT
38836: PUSH
38837: LD_VAR 0 2
38841: NOT
38842: OR
38843: IFFALSE 38847
// exit ;
38845: GO 39005
// x := GetX ( building ) ;
38847: LD_ADDR_VAR 0 5
38851: PUSH
38852: LD_VAR 0 2
38856: PPUSH
38857: CALL_OW 250
38861: ST_TO_ADDR
// y := GetY ( building ) ;
38862: LD_ADDR_VAR 0 6
38866: PUSH
38867: LD_VAR 0 2
38871: PPUSH
38872: CALL_OW 251
38876: ST_TO_ADDR
// for i = 0 to 5 do
38877: LD_ADDR_VAR 0 4
38881: PUSH
38882: DOUBLE
38883: LD_INT 0
38885: DEC
38886: ST_TO_ADDR
38887: LD_INT 5
38889: PUSH
38890: FOR_TO
38891: IFFALSE 39003
// begin _x := ShiftX ( x , i , 3 ) ;
38893: LD_ADDR_VAR 0 7
38897: PUSH
38898: LD_VAR 0 5
38902: PPUSH
38903: LD_VAR 0 4
38907: PPUSH
38908: LD_INT 3
38910: PPUSH
38911: CALL_OW 272
38915: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38916: LD_ADDR_VAR 0 8
38920: PUSH
38921: LD_VAR 0 6
38925: PPUSH
38926: LD_VAR 0 4
38930: PPUSH
38931: LD_INT 3
38933: PPUSH
38934: CALL_OW 273
38938: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38939: LD_VAR 0 7
38943: PPUSH
38944: LD_VAR 0 8
38948: PPUSH
38949: CALL_OW 488
38953: NOT
38954: IFFALSE 38958
// continue ;
38956: GO 38890
// if HexInfo ( _x , _y ) = 0 then
38958: LD_VAR 0 7
38962: PPUSH
38963: LD_VAR 0 8
38967: PPUSH
38968: CALL_OW 428
38972: PUSH
38973: LD_INT 0
38975: EQUAL
38976: IFFALSE 39001
// begin ComMoveXY ( unit , _x , _y ) ;
38978: LD_VAR 0 1
38982: PPUSH
38983: LD_VAR 0 7
38987: PPUSH
38988: LD_VAR 0 8
38992: PPUSH
38993: CALL_OW 111
// exit ;
38997: POP
38998: POP
38999: GO 39005
// end ; end ;
39001: GO 38890
39003: POP
39004: POP
// end ;
39005: LD_VAR 0 3
39009: RET
// export function ScanBase ( side , base_area ) ; begin
39010: LD_INT 0
39012: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39013: LD_ADDR_VAR 0 3
39017: PUSH
39018: LD_VAR 0 2
39022: PPUSH
39023: LD_INT 81
39025: PUSH
39026: LD_VAR 0 1
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PPUSH
39035: CALL_OW 70
39039: ST_TO_ADDR
// end ;
39040: LD_VAR 0 3
39044: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39045: LD_INT 0
39047: PPUSH
39048: PPUSH
39049: PPUSH
39050: PPUSH
// result := false ;
39051: LD_ADDR_VAR 0 2
39055: PUSH
39056: LD_INT 0
39058: ST_TO_ADDR
// side := GetSide ( unit ) ;
39059: LD_ADDR_VAR 0 3
39063: PUSH
39064: LD_VAR 0 1
39068: PPUSH
39069: CALL_OW 255
39073: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39074: LD_ADDR_VAR 0 4
39078: PUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL_OW 248
39088: ST_TO_ADDR
// case nat of 1 :
39089: LD_VAR 0 4
39093: PUSH
39094: LD_INT 1
39096: DOUBLE
39097: EQUAL
39098: IFTRUE 39102
39100: GO 39113
39102: POP
// tech := tech_lassight ; 2 :
39103: LD_ADDR_VAR 0 5
39107: PUSH
39108: LD_INT 12
39110: ST_TO_ADDR
39111: GO 39152
39113: LD_INT 2
39115: DOUBLE
39116: EQUAL
39117: IFTRUE 39121
39119: GO 39132
39121: POP
// tech := tech_mortar ; 3 :
39122: LD_ADDR_VAR 0 5
39126: PUSH
39127: LD_INT 41
39129: ST_TO_ADDR
39130: GO 39152
39132: LD_INT 3
39134: DOUBLE
39135: EQUAL
39136: IFTRUE 39140
39138: GO 39151
39140: POP
// tech := tech_bazooka ; end ;
39141: LD_ADDR_VAR 0 5
39145: PUSH
39146: LD_INT 44
39148: ST_TO_ADDR
39149: GO 39152
39151: POP
// if Researched ( side , tech ) then
39152: LD_VAR 0 3
39156: PPUSH
39157: LD_VAR 0 5
39161: PPUSH
39162: CALL_OW 325
39166: IFFALSE 39193
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39168: LD_ADDR_VAR 0 2
39172: PUSH
39173: LD_INT 5
39175: PUSH
39176: LD_INT 8
39178: PUSH
39179: LD_INT 9
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: PUSH
39187: LD_VAR 0 4
39191: ARRAY
39192: ST_TO_ADDR
// end ;
39193: LD_VAR 0 2
39197: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39198: LD_INT 0
39200: PPUSH
39201: PPUSH
39202: PPUSH
// if not mines then
39203: LD_VAR 0 2
39207: NOT
39208: IFFALSE 39212
// exit ;
39210: GO 39356
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39212: LD_ADDR_VAR 0 5
39216: PUSH
39217: LD_INT 81
39219: PUSH
39220: LD_VAR 0 1
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 3
39231: PUSH
39232: LD_INT 21
39234: PUSH
39235: LD_INT 3
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PPUSH
39250: CALL_OW 69
39254: ST_TO_ADDR
// for i in mines do
39255: LD_ADDR_VAR 0 4
39259: PUSH
39260: LD_VAR 0 2
39264: PUSH
39265: FOR_IN
39266: IFFALSE 39354
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39268: LD_VAR 0 4
39272: PUSH
39273: LD_INT 1
39275: ARRAY
39276: PPUSH
39277: LD_VAR 0 4
39281: PUSH
39282: LD_INT 2
39284: ARRAY
39285: PPUSH
39286: CALL_OW 458
39290: NOT
39291: IFFALSE 39295
// continue ;
39293: GO 39265
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39295: LD_VAR 0 4
39299: PUSH
39300: LD_INT 1
39302: ARRAY
39303: PPUSH
39304: LD_VAR 0 4
39308: PUSH
39309: LD_INT 2
39311: ARRAY
39312: PPUSH
39313: CALL_OW 428
39317: PUSH
39318: LD_VAR 0 5
39322: IN
39323: IFFALSE 39352
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39325: LD_VAR 0 4
39329: PUSH
39330: LD_INT 1
39332: ARRAY
39333: PPUSH
39334: LD_VAR 0 4
39338: PUSH
39339: LD_INT 2
39341: ARRAY
39342: PPUSH
39343: LD_VAR 0 1
39347: PPUSH
39348: CALL_OW 456
// end ;
39352: GO 39265
39354: POP
39355: POP
// end ;
39356: LD_VAR 0 3
39360: RET
// export function Count ( array ) ; begin
39361: LD_INT 0
39363: PPUSH
// result := array + 0 ;
39364: LD_ADDR_VAR 0 2
39368: PUSH
39369: LD_VAR 0 1
39373: PUSH
39374: LD_INT 0
39376: PLUS
39377: ST_TO_ADDR
// end ;
39378: LD_VAR 0 2
39382: RET
// export function IsEmpty ( building ) ; begin
39383: LD_INT 0
39385: PPUSH
// if not building then
39386: LD_VAR 0 1
39390: NOT
39391: IFFALSE 39395
// exit ;
39393: GO 39438
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39395: LD_ADDR_VAR 0 2
39399: PUSH
39400: LD_VAR 0 1
39404: PUSH
39405: LD_INT 22
39407: PUSH
39408: LD_VAR 0 1
39412: PPUSH
39413: CALL_OW 255
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 58
39424: PUSH
39425: EMPTY
39426: LIST
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PPUSH
39432: CALL_OW 69
39436: IN
39437: ST_TO_ADDR
// end ;
39438: LD_VAR 0 2
39442: RET
// export function IsNotFull ( building ) ; var places ; begin
39443: LD_INT 0
39445: PPUSH
39446: PPUSH
// if not building then
39447: LD_VAR 0 1
39451: NOT
39452: IFFALSE 39456
// exit ;
39454: GO 39484
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
39456: LD_ADDR_VAR 0 2
39460: PUSH
39461: LD_VAR 0 1
39465: PPUSH
39466: LD_INT 3
39468: PUSH
39469: LD_INT 62
39471: PUSH
39472: EMPTY
39473: LIST
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PPUSH
39479: CALL_OW 72
39483: ST_TO_ADDR
// end ;
39484: LD_VAR 0 2
39488: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39489: LD_INT 0
39491: PPUSH
39492: PPUSH
39493: PPUSH
39494: PPUSH
// tmp := [ ] ;
39495: LD_ADDR_VAR 0 3
39499: PUSH
39500: EMPTY
39501: ST_TO_ADDR
// list := [ ] ;
39502: LD_ADDR_VAR 0 5
39506: PUSH
39507: EMPTY
39508: ST_TO_ADDR
// for i = 16 to 25 do
39509: LD_ADDR_VAR 0 4
39513: PUSH
39514: DOUBLE
39515: LD_INT 16
39517: DEC
39518: ST_TO_ADDR
39519: LD_INT 25
39521: PUSH
39522: FOR_TO
39523: IFFALSE 39596
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39525: LD_ADDR_VAR 0 3
39529: PUSH
39530: LD_VAR 0 3
39534: PUSH
39535: LD_INT 22
39537: PUSH
39538: LD_VAR 0 1
39542: PPUSH
39543: CALL_OW 255
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 91
39554: PUSH
39555: LD_VAR 0 1
39559: PUSH
39560: LD_INT 6
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 30
39570: PUSH
39571: LD_VAR 0 4
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: LIST
39584: PUSH
39585: EMPTY
39586: LIST
39587: PPUSH
39588: CALL_OW 69
39592: ADD
39593: ST_TO_ADDR
39594: GO 39522
39596: POP
39597: POP
// for i = 1 to tmp do
39598: LD_ADDR_VAR 0 4
39602: PUSH
39603: DOUBLE
39604: LD_INT 1
39606: DEC
39607: ST_TO_ADDR
39608: LD_VAR 0 3
39612: PUSH
39613: FOR_TO
39614: IFFALSE 39702
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39616: LD_ADDR_VAR 0 5
39620: PUSH
39621: LD_VAR 0 5
39625: PUSH
39626: LD_VAR 0 3
39630: PUSH
39631: LD_VAR 0 4
39635: ARRAY
39636: PPUSH
39637: CALL_OW 266
39641: PUSH
39642: LD_VAR 0 3
39646: PUSH
39647: LD_VAR 0 4
39651: ARRAY
39652: PPUSH
39653: CALL_OW 250
39657: PUSH
39658: LD_VAR 0 3
39662: PUSH
39663: LD_VAR 0 4
39667: ARRAY
39668: PPUSH
39669: CALL_OW 251
39673: PUSH
39674: LD_VAR 0 3
39678: PUSH
39679: LD_VAR 0 4
39683: ARRAY
39684: PPUSH
39685: CALL_OW 254
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: PUSH
39696: EMPTY
39697: LIST
39698: ADD
39699: ST_TO_ADDR
39700: GO 39613
39702: POP
39703: POP
// result := list ;
39704: LD_ADDR_VAR 0 2
39708: PUSH
39709: LD_VAR 0 5
39713: ST_TO_ADDR
// end ;
39714: LD_VAR 0 2
39718: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39719: LD_INT 0
39721: PPUSH
39722: PPUSH
39723: PPUSH
39724: PPUSH
39725: PPUSH
39726: PPUSH
39727: PPUSH
// if not factory then
39728: LD_VAR 0 1
39732: NOT
39733: IFFALSE 39737
// exit ;
39735: GO 40330
// if control = control_apeman then
39737: LD_VAR 0 4
39741: PUSH
39742: LD_INT 5
39744: EQUAL
39745: IFFALSE 39854
// begin tmp := UnitsInside ( factory ) ;
39747: LD_ADDR_VAR 0 8
39751: PUSH
39752: LD_VAR 0 1
39756: PPUSH
39757: CALL_OW 313
39761: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39762: LD_VAR 0 8
39766: PPUSH
39767: LD_INT 25
39769: PUSH
39770: LD_INT 12
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PPUSH
39777: CALL_OW 72
39781: NOT
39782: IFFALSE 39792
// control := control_manual ;
39784: LD_ADDR_VAR 0 4
39788: PUSH
39789: LD_INT 1
39791: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39792: LD_ADDR_VAR 0 8
39796: PUSH
39797: LD_VAR 0 1
39801: PPUSH
39802: CALL 39489 0 1
39806: ST_TO_ADDR
// if tmp then
39807: LD_VAR 0 8
39811: IFFALSE 39854
// begin for i in tmp do
39813: LD_ADDR_VAR 0 7
39817: PUSH
39818: LD_VAR 0 8
39822: PUSH
39823: FOR_IN
39824: IFFALSE 39852
// if i [ 1 ] = b_ext_radio then
39826: LD_VAR 0 7
39830: PUSH
39831: LD_INT 1
39833: ARRAY
39834: PUSH
39835: LD_INT 22
39837: EQUAL
39838: IFFALSE 39850
// begin control := control_remote ;
39840: LD_ADDR_VAR 0 4
39844: PUSH
39845: LD_INT 2
39847: ST_TO_ADDR
// break ;
39848: GO 39852
// end ;
39850: GO 39823
39852: POP
39853: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39854: LD_VAR 0 1
39858: PPUSH
39859: LD_VAR 0 2
39863: PPUSH
39864: LD_VAR 0 3
39868: PPUSH
39869: LD_VAR 0 4
39873: PPUSH
39874: LD_VAR 0 5
39878: PPUSH
39879: CALL_OW 448
39883: IFFALSE 39918
// begin result := [ chassis , engine , control , weapon ] ;
39885: LD_ADDR_VAR 0 6
39889: PUSH
39890: LD_VAR 0 2
39894: PUSH
39895: LD_VAR 0 3
39899: PUSH
39900: LD_VAR 0 4
39904: PUSH
39905: LD_VAR 0 5
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: ST_TO_ADDR
// exit ;
39916: GO 40330
// end ; _chassis := AvailableChassisList ( factory ) ;
39918: LD_ADDR_VAR 0 9
39922: PUSH
39923: LD_VAR 0 1
39927: PPUSH
39928: CALL_OW 475
39932: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39933: LD_ADDR_VAR 0 11
39937: PUSH
39938: LD_VAR 0 1
39942: PPUSH
39943: CALL_OW 476
39947: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39948: LD_ADDR_VAR 0 12
39952: PUSH
39953: LD_VAR 0 1
39957: PPUSH
39958: CALL_OW 477
39962: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39963: LD_ADDR_VAR 0 10
39967: PUSH
39968: LD_VAR 0 1
39972: PPUSH
39973: CALL_OW 478
39977: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39978: LD_VAR 0 9
39982: NOT
39983: PUSH
39984: LD_VAR 0 11
39988: NOT
39989: OR
39990: PUSH
39991: LD_VAR 0 12
39995: NOT
39996: OR
39997: PUSH
39998: LD_VAR 0 10
40002: NOT
40003: OR
40004: IFFALSE 40039
// begin result := [ chassis , engine , control , weapon ] ;
40006: LD_ADDR_VAR 0 6
40010: PUSH
40011: LD_VAR 0 2
40015: PUSH
40016: LD_VAR 0 3
40020: PUSH
40021: LD_VAR 0 4
40025: PUSH
40026: LD_VAR 0 5
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: ST_TO_ADDR
// exit ;
40037: GO 40330
// end ; if not chassis in _chassis then
40039: LD_VAR 0 2
40043: PUSH
40044: LD_VAR 0 9
40048: IN
40049: NOT
40050: IFFALSE 40076
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40052: LD_ADDR_VAR 0 2
40056: PUSH
40057: LD_VAR 0 9
40061: PUSH
40062: LD_INT 1
40064: PPUSH
40065: LD_VAR 0 9
40069: PPUSH
40070: CALL_OW 12
40074: ARRAY
40075: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40076: LD_VAR 0 2
40080: PPUSH
40081: LD_VAR 0 3
40085: PPUSH
40086: CALL 40335 0 2
40090: NOT
40091: IFFALSE 40150
// repeat engine := _engine [ 1 ] ;
40093: LD_ADDR_VAR 0 3
40097: PUSH
40098: LD_VAR 0 11
40102: PUSH
40103: LD_INT 1
40105: ARRAY
40106: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40107: LD_ADDR_VAR 0 11
40111: PUSH
40112: LD_VAR 0 11
40116: PPUSH
40117: LD_INT 1
40119: PPUSH
40120: CALL_OW 3
40124: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40125: LD_VAR 0 2
40129: PPUSH
40130: LD_VAR 0 3
40134: PPUSH
40135: CALL 40335 0 2
40139: PUSH
40140: LD_VAR 0 11
40144: PUSH
40145: EMPTY
40146: EQUAL
40147: OR
40148: IFFALSE 40093
// if not control in _control then
40150: LD_VAR 0 4
40154: PUSH
40155: LD_VAR 0 12
40159: IN
40160: NOT
40161: IFFALSE 40187
// control := _control [ rand ( 1 , _control ) ] ;
40163: LD_ADDR_VAR 0 4
40167: PUSH
40168: LD_VAR 0 12
40172: PUSH
40173: LD_INT 1
40175: PPUSH
40176: LD_VAR 0 12
40180: PPUSH
40181: CALL_OW 12
40185: ARRAY
40186: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40187: LD_VAR 0 2
40191: PPUSH
40192: LD_VAR 0 5
40196: PPUSH
40197: CALL 40555 0 2
40201: NOT
40202: IFFALSE 40261
// repeat weapon := _weapon [ 1 ] ;
40204: LD_ADDR_VAR 0 5
40208: PUSH
40209: LD_VAR 0 10
40213: PUSH
40214: LD_INT 1
40216: ARRAY
40217: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40218: LD_ADDR_VAR 0 10
40222: PUSH
40223: LD_VAR 0 10
40227: PPUSH
40228: LD_INT 1
40230: PPUSH
40231: CALL_OW 3
40235: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40236: LD_VAR 0 2
40240: PPUSH
40241: LD_VAR 0 5
40245: PPUSH
40246: CALL 40555 0 2
40250: PUSH
40251: LD_VAR 0 10
40255: PUSH
40256: EMPTY
40257: EQUAL
40258: OR
40259: IFFALSE 40204
// result := [ ] ;
40261: LD_ADDR_VAR 0 6
40265: PUSH
40266: EMPTY
40267: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40268: LD_VAR 0 1
40272: PPUSH
40273: LD_VAR 0 2
40277: PPUSH
40278: LD_VAR 0 3
40282: PPUSH
40283: LD_VAR 0 4
40287: PPUSH
40288: LD_VAR 0 5
40292: PPUSH
40293: CALL_OW 448
40297: IFFALSE 40330
// result := [ chassis , engine , control , weapon ] ;
40299: LD_ADDR_VAR 0 6
40303: PUSH
40304: LD_VAR 0 2
40308: PUSH
40309: LD_VAR 0 3
40313: PUSH
40314: LD_VAR 0 4
40318: PUSH
40319: LD_VAR 0 5
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: ST_TO_ADDR
// end ;
40330: LD_VAR 0 6
40334: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40335: LD_INT 0
40337: PPUSH
// if not chassis or not engine then
40338: LD_VAR 0 1
40342: NOT
40343: PUSH
40344: LD_VAR 0 2
40348: NOT
40349: OR
40350: IFFALSE 40354
// exit ;
40352: GO 40550
// case engine of engine_solar :
40354: LD_VAR 0 2
40358: PUSH
40359: LD_INT 2
40361: DOUBLE
40362: EQUAL
40363: IFTRUE 40367
40365: GO 40405
40367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40368: LD_ADDR_VAR 0 3
40372: PUSH
40373: LD_INT 11
40375: PUSH
40376: LD_INT 12
40378: PUSH
40379: LD_INT 13
40381: PUSH
40382: LD_INT 14
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: LD_INT 2
40390: PUSH
40391: LD_INT 3
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: ST_TO_ADDR
40403: GO 40534
40405: LD_INT 1
40407: DOUBLE
40408: EQUAL
40409: IFTRUE 40413
40411: GO 40475
40413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40414: LD_ADDR_VAR 0 3
40418: PUSH
40419: LD_INT 11
40421: PUSH
40422: LD_INT 12
40424: PUSH
40425: LD_INT 13
40427: PUSH
40428: LD_INT 14
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: LD_INT 3
40439: PUSH
40440: LD_INT 4
40442: PUSH
40443: LD_INT 5
40445: PUSH
40446: LD_INT 21
40448: PUSH
40449: LD_INT 23
40451: PUSH
40452: LD_INT 22
40454: PUSH
40455: LD_INT 24
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: ST_TO_ADDR
40473: GO 40534
40475: LD_INT 3
40477: DOUBLE
40478: EQUAL
40479: IFTRUE 40483
40481: GO 40533
40483: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40484: LD_ADDR_VAR 0 3
40488: PUSH
40489: LD_INT 13
40491: PUSH
40492: LD_INT 14
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: LD_INT 3
40500: PUSH
40501: LD_INT 4
40503: PUSH
40504: LD_INT 5
40506: PUSH
40507: LD_INT 21
40509: PUSH
40510: LD_INT 22
40512: PUSH
40513: LD_INT 23
40515: PUSH
40516: LD_INT 24
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: ST_TO_ADDR
40531: GO 40534
40533: POP
// result := ( chassis in result ) ;
40534: LD_ADDR_VAR 0 3
40538: PUSH
40539: LD_VAR 0 1
40543: PUSH
40544: LD_VAR 0 3
40548: IN
40549: ST_TO_ADDR
// end ;
40550: LD_VAR 0 3
40554: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40555: LD_INT 0
40557: PPUSH
// if not chassis or not weapon then
40558: LD_VAR 0 1
40562: NOT
40563: PUSH
40564: LD_VAR 0 2
40568: NOT
40569: OR
40570: IFFALSE 40574
// exit ;
40572: GO 41634
// case weapon of us_machine_gun :
40574: LD_VAR 0 2
40578: PUSH
40579: LD_INT 2
40581: DOUBLE
40582: EQUAL
40583: IFTRUE 40587
40585: GO 40617
40587: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40588: LD_ADDR_VAR 0 3
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: LD_INT 3
40601: PUSH
40602: LD_INT 4
40604: PUSH
40605: LD_INT 5
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: ST_TO_ADDR
40615: GO 41618
40617: LD_INT 3
40619: DOUBLE
40620: EQUAL
40621: IFTRUE 40625
40623: GO 40655
40625: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: LD_INT 3
40639: PUSH
40640: LD_INT 4
40642: PUSH
40643: LD_INT 5
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: ST_TO_ADDR
40653: GO 41618
40655: LD_INT 11
40657: DOUBLE
40658: EQUAL
40659: IFTRUE 40663
40661: GO 40693
40663: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40664: LD_ADDR_VAR 0 3
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: LD_INT 3
40677: PUSH
40678: LD_INT 4
40680: PUSH
40681: LD_INT 5
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: ST_TO_ADDR
40691: GO 41618
40693: LD_INT 4
40695: DOUBLE
40696: EQUAL
40697: IFTRUE 40701
40699: GO 40727
40701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40702: LD_ADDR_VAR 0 3
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: LD_INT 3
40712: PUSH
40713: LD_INT 4
40715: PUSH
40716: LD_INT 5
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: ST_TO_ADDR
40725: GO 41618
40727: LD_INT 5
40729: DOUBLE
40730: EQUAL
40731: IFTRUE 40735
40733: GO 40761
40735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40736: LD_ADDR_VAR 0 3
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: LD_INT 3
40746: PUSH
40747: LD_INT 4
40749: PUSH
40750: LD_INT 5
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: ST_TO_ADDR
40759: GO 41618
40761: LD_INT 9
40763: DOUBLE
40764: EQUAL
40765: IFTRUE 40769
40767: GO 40795
40769: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40770: LD_ADDR_VAR 0 3
40774: PUSH
40775: LD_INT 2
40777: PUSH
40778: LD_INT 3
40780: PUSH
40781: LD_INT 4
40783: PUSH
40784: LD_INT 5
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: ST_TO_ADDR
40793: GO 41618
40795: LD_INT 7
40797: DOUBLE
40798: EQUAL
40799: IFTRUE 40803
40801: GO 40829
40803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40804: LD_ADDR_VAR 0 3
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: LD_INT 3
40814: PUSH
40815: LD_INT 4
40817: PUSH
40818: LD_INT 5
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: ST_TO_ADDR
40827: GO 41618
40829: LD_INT 12
40831: DOUBLE
40832: EQUAL
40833: IFTRUE 40837
40835: GO 40863
40837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40838: LD_ADDR_VAR 0 3
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: LD_INT 3
40848: PUSH
40849: LD_INT 4
40851: PUSH
40852: LD_INT 5
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: ST_TO_ADDR
40861: GO 41618
40863: LD_INT 13
40865: DOUBLE
40866: EQUAL
40867: IFTRUE 40871
40869: GO 40897
40871: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40872: LD_ADDR_VAR 0 3
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: LD_INT 3
40882: PUSH
40883: LD_INT 4
40885: PUSH
40886: LD_INT 5
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: ST_TO_ADDR
40895: GO 41618
40897: LD_INT 14
40899: DOUBLE
40900: EQUAL
40901: IFTRUE 40905
40903: GO 40923
40905: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40906: LD_ADDR_VAR 0 3
40910: PUSH
40911: LD_INT 4
40913: PUSH
40914: LD_INT 5
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: ST_TO_ADDR
40921: GO 41618
40923: LD_INT 6
40925: DOUBLE
40926: EQUAL
40927: IFTRUE 40931
40929: GO 40949
40931: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40932: LD_ADDR_VAR 0 3
40936: PUSH
40937: LD_INT 4
40939: PUSH
40940: LD_INT 5
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: ST_TO_ADDR
40947: GO 41618
40949: LD_INT 10
40951: DOUBLE
40952: EQUAL
40953: IFTRUE 40957
40955: GO 40975
40957: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40958: LD_ADDR_VAR 0 3
40962: PUSH
40963: LD_INT 4
40965: PUSH
40966: LD_INT 5
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: ST_TO_ADDR
40973: GO 41618
40975: LD_INT 22
40977: DOUBLE
40978: EQUAL
40979: IFTRUE 40983
40981: GO 41009
40983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40984: LD_ADDR_VAR 0 3
40988: PUSH
40989: LD_INT 11
40991: PUSH
40992: LD_INT 12
40994: PUSH
40995: LD_INT 13
40997: PUSH
40998: LD_INT 14
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: ST_TO_ADDR
41007: GO 41618
41009: LD_INT 23
41011: DOUBLE
41012: EQUAL
41013: IFTRUE 41017
41015: GO 41043
41017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41018: LD_ADDR_VAR 0 3
41022: PUSH
41023: LD_INT 11
41025: PUSH
41026: LD_INT 12
41028: PUSH
41029: LD_INT 13
41031: PUSH
41032: LD_INT 14
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: ST_TO_ADDR
41041: GO 41618
41043: LD_INT 24
41045: DOUBLE
41046: EQUAL
41047: IFTRUE 41051
41049: GO 41077
41051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41052: LD_ADDR_VAR 0 3
41056: PUSH
41057: LD_INT 11
41059: PUSH
41060: LD_INT 12
41062: PUSH
41063: LD_INT 13
41065: PUSH
41066: LD_INT 14
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: ST_TO_ADDR
41075: GO 41618
41077: LD_INT 30
41079: DOUBLE
41080: EQUAL
41081: IFTRUE 41085
41083: GO 41111
41085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41086: LD_ADDR_VAR 0 3
41090: PUSH
41091: LD_INT 11
41093: PUSH
41094: LD_INT 12
41096: PUSH
41097: LD_INT 13
41099: PUSH
41100: LD_INT 14
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: ST_TO_ADDR
41109: GO 41618
41111: LD_INT 25
41113: DOUBLE
41114: EQUAL
41115: IFTRUE 41119
41117: GO 41137
41119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41120: LD_ADDR_VAR 0 3
41124: PUSH
41125: LD_INT 13
41127: PUSH
41128: LD_INT 14
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: ST_TO_ADDR
41135: GO 41618
41137: LD_INT 27
41139: DOUBLE
41140: EQUAL
41141: IFTRUE 41145
41143: GO 41163
41145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41146: LD_ADDR_VAR 0 3
41150: PUSH
41151: LD_INT 13
41153: PUSH
41154: LD_INT 14
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: ST_TO_ADDR
41161: GO 41618
41163: LD_INT 92
41165: DOUBLE
41166: EQUAL
41167: IFTRUE 41171
41169: GO 41197
41171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41172: LD_ADDR_VAR 0 3
41176: PUSH
41177: LD_INT 11
41179: PUSH
41180: LD_INT 12
41182: PUSH
41183: LD_INT 13
41185: PUSH
41186: LD_INT 14
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: ST_TO_ADDR
41195: GO 41618
41197: LD_INT 28
41199: DOUBLE
41200: EQUAL
41201: IFTRUE 41205
41203: GO 41223
41205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41206: LD_ADDR_VAR 0 3
41210: PUSH
41211: LD_INT 13
41213: PUSH
41214: LD_INT 14
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: ST_TO_ADDR
41221: GO 41618
41223: LD_INT 29
41225: DOUBLE
41226: EQUAL
41227: IFTRUE 41231
41229: GO 41249
41231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41232: LD_ADDR_VAR 0 3
41236: PUSH
41237: LD_INT 13
41239: PUSH
41240: LD_INT 14
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: ST_TO_ADDR
41247: GO 41618
41249: LD_INT 31
41251: DOUBLE
41252: EQUAL
41253: IFTRUE 41257
41255: GO 41275
41257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41258: LD_ADDR_VAR 0 3
41262: PUSH
41263: LD_INT 13
41265: PUSH
41266: LD_INT 14
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: ST_TO_ADDR
41273: GO 41618
41275: LD_INT 26
41277: DOUBLE
41278: EQUAL
41279: IFTRUE 41283
41281: GO 41301
41283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41284: LD_ADDR_VAR 0 3
41288: PUSH
41289: LD_INT 13
41291: PUSH
41292: LD_INT 14
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: ST_TO_ADDR
41299: GO 41618
41301: LD_INT 42
41303: DOUBLE
41304: EQUAL
41305: IFTRUE 41309
41307: GO 41335
41309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41310: LD_ADDR_VAR 0 3
41314: PUSH
41315: LD_INT 21
41317: PUSH
41318: LD_INT 22
41320: PUSH
41321: LD_INT 23
41323: PUSH
41324: LD_INT 24
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: ST_TO_ADDR
41333: GO 41618
41335: LD_INT 43
41337: DOUBLE
41338: EQUAL
41339: IFTRUE 41343
41341: GO 41369
41343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41344: LD_ADDR_VAR 0 3
41348: PUSH
41349: LD_INT 21
41351: PUSH
41352: LD_INT 22
41354: PUSH
41355: LD_INT 23
41357: PUSH
41358: LD_INT 24
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: ST_TO_ADDR
41367: GO 41618
41369: LD_INT 44
41371: DOUBLE
41372: EQUAL
41373: IFTRUE 41377
41375: GO 41403
41377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41378: LD_ADDR_VAR 0 3
41382: PUSH
41383: LD_INT 21
41385: PUSH
41386: LD_INT 22
41388: PUSH
41389: LD_INT 23
41391: PUSH
41392: LD_INT 24
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: ST_TO_ADDR
41401: GO 41618
41403: LD_INT 45
41405: DOUBLE
41406: EQUAL
41407: IFTRUE 41411
41409: GO 41437
41411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41412: LD_ADDR_VAR 0 3
41416: PUSH
41417: LD_INT 21
41419: PUSH
41420: LD_INT 22
41422: PUSH
41423: LD_INT 23
41425: PUSH
41426: LD_INT 24
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: ST_TO_ADDR
41435: GO 41618
41437: LD_INT 49
41439: DOUBLE
41440: EQUAL
41441: IFTRUE 41445
41443: GO 41471
41445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41446: LD_ADDR_VAR 0 3
41450: PUSH
41451: LD_INT 21
41453: PUSH
41454: LD_INT 22
41456: PUSH
41457: LD_INT 23
41459: PUSH
41460: LD_INT 24
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: ST_TO_ADDR
41469: GO 41618
41471: LD_INT 51
41473: DOUBLE
41474: EQUAL
41475: IFTRUE 41479
41477: GO 41505
41479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41480: LD_ADDR_VAR 0 3
41484: PUSH
41485: LD_INT 21
41487: PUSH
41488: LD_INT 22
41490: PUSH
41491: LD_INT 23
41493: PUSH
41494: LD_INT 24
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: ST_TO_ADDR
41503: GO 41618
41505: LD_INT 52
41507: DOUBLE
41508: EQUAL
41509: IFTRUE 41513
41511: GO 41539
41513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41514: LD_ADDR_VAR 0 3
41518: PUSH
41519: LD_INT 21
41521: PUSH
41522: LD_INT 22
41524: PUSH
41525: LD_INT 23
41527: PUSH
41528: LD_INT 24
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: ST_TO_ADDR
41537: GO 41618
41539: LD_INT 53
41541: DOUBLE
41542: EQUAL
41543: IFTRUE 41547
41545: GO 41565
41547: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41548: LD_ADDR_VAR 0 3
41552: PUSH
41553: LD_INT 23
41555: PUSH
41556: LD_INT 24
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: ST_TO_ADDR
41563: GO 41618
41565: LD_INT 46
41567: DOUBLE
41568: EQUAL
41569: IFTRUE 41573
41571: GO 41591
41573: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41574: LD_ADDR_VAR 0 3
41578: PUSH
41579: LD_INT 23
41581: PUSH
41582: LD_INT 24
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: ST_TO_ADDR
41589: GO 41618
41591: LD_INT 47
41593: DOUBLE
41594: EQUAL
41595: IFTRUE 41599
41597: GO 41617
41599: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41600: LD_ADDR_VAR 0 3
41604: PUSH
41605: LD_INT 23
41607: PUSH
41608: LD_INT 24
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: ST_TO_ADDR
41615: GO 41618
41617: POP
// result := ( chassis in result ) ;
41618: LD_ADDR_VAR 0 3
41622: PUSH
41623: LD_VAR 0 1
41627: PUSH
41628: LD_VAR 0 3
41632: IN
41633: ST_TO_ADDR
// end ;
41634: LD_VAR 0 3
41638: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41639: LD_INT 0
41641: PPUSH
41642: PPUSH
41643: PPUSH
41644: PPUSH
41645: PPUSH
41646: PPUSH
41647: PPUSH
// result := array ;
41648: LD_ADDR_VAR 0 5
41652: PUSH
41653: LD_VAR 0 1
41657: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41658: LD_VAR 0 1
41662: NOT
41663: PUSH
41664: LD_VAR 0 2
41668: NOT
41669: OR
41670: PUSH
41671: LD_VAR 0 3
41675: NOT
41676: OR
41677: PUSH
41678: LD_VAR 0 2
41682: PUSH
41683: LD_VAR 0 1
41687: GREATER
41688: OR
41689: PUSH
41690: LD_VAR 0 3
41694: PUSH
41695: LD_VAR 0 1
41699: GREATER
41700: OR
41701: IFFALSE 41705
// exit ;
41703: GO 42001
// if direction then
41705: LD_VAR 0 4
41709: IFFALSE 41773
// begin d := 1 ;
41711: LD_ADDR_VAR 0 9
41715: PUSH
41716: LD_INT 1
41718: ST_TO_ADDR
// if i_from > i_to then
41719: LD_VAR 0 2
41723: PUSH
41724: LD_VAR 0 3
41728: GREATER
41729: IFFALSE 41755
// length := ( array - i_from ) + i_to else
41731: LD_ADDR_VAR 0 11
41735: PUSH
41736: LD_VAR 0 1
41740: PUSH
41741: LD_VAR 0 2
41745: MINUS
41746: PUSH
41747: LD_VAR 0 3
41751: PLUS
41752: ST_TO_ADDR
41753: GO 41771
// length := i_to - i_from ;
41755: LD_ADDR_VAR 0 11
41759: PUSH
41760: LD_VAR 0 3
41764: PUSH
41765: LD_VAR 0 2
41769: MINUS
41770: ST_TO_ADDR
// end else
41771: GO 41834
// begin d := - 1 ;
41773: LD_ADDR_VAR 0 9
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: ST_TO_ADDR
// if i_from > i_to then
41782: LD_VAR 0 2
41786: PUSH
41787: LD_VAR 0 3
41791: GREATER
41792: IFFALSE 41812
// length := i_from - i_to else
41794: LD_ADDR_VAR 0 11
41798: PUSH
41799: LD_VAR 0 2
41803: PUSH
41804: LD_VAR 0 3
41808: MINUS
41809: ST_TO_ADDR
41810: GO 41834
// length := ( array - i_to ) + i_from ;
41812: LD_ADDR_VAR 0 11
41816: PUSH
41817: LD_VAR 0 1
41821: PUSH
41822: LD_VAR 0 3
41826: MINUS
41827: PUSH
41828: LD_VAR 0 2
41832: PLUS
41833: ST_TO_ADDR
// end ; if not length then
41834: LD_VAR 0 11
41838: NOT
41839: IFFALSE 41843
// exit ;
41841: GO 42001
// tmp := array ;
41843: LD_ADDR_VAR 0 10
41847: PUSH
41848: LD_VAR 0 1
41852: ST_TO_ADDR
// for i = 1 to length do
41853: LD_ADDR_VAR 0 6
41857: PUSH
41858: DOUBLE
41859: LD_INT 1
41861: DEC
41862: ST_TO_ADDR
41863: LD_VAR 0 11
41867: PUSH
41868: FOR_TO
41869: IFFALSE 41989
// begin for j = 1 to array do
41871: LD_ADDR_VAR 0 7
41875: PUSH
41876: DOUBLE
41877: LD_INT 1
41879: DEC
41880: ST_TO_ADDR
41881: LD_VAR 0 1
41885: PUSH
41886: FOR_TO
41887: IFFALSE 41975
// begin k := j + d ;
41889: LD_ADDR_VAR 0 8
41893: PUSH
41894: LD_VAR 0 7
41898: PUSH
41899: LD_VAR 0 9
41903: PLUS
41904: ST_TO_ADDR
// if k > array then
41905: LD_VAR 0 8
41909: PUSH
41910: LD_VAR 0 1
41914: GREATER
41915: IFFALSE 41925
// k := 1 ;
41917: LD_ADDR_VAR 0 8
41921: PUSH
41922: LD_INT 1
41924: ST_TO_ADDR
// if not k then
41925: LD_VAR 0 8
41929: NOT
41930: IFFALSE 41942
// k := array ;
41932: LD_ADDR_VAR 0 8
41936: PUSH
41937: LD_VAR 0 1
41941: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41942: LD_ADDR_VAR 0 10
41946: PUSH
41947: LD_VAR 0 10
41951: PPUSH
41952: LD_VAR 0 8
41956: PPUSH
41957: LD_VAR 0 1
41961: PUSH
41962: LD_VAR 0 7
41966: ARRAY
41967: PPUSH
41968: CALL_OW 1
41972: ST_TO_ADDR
// end ;
41973: GO 41886
41975: POP
41976: POP
// array := tmp ;
41977: LD_ADDR_VAR 0 1
41981: PUSH
41982: LD_VAR 0 10
41986: ST_TO_ADDR
// end ;
41987: GO 41868
41989: POP
41990: POP
// result := array ;
41991: LD_ADDR_VAR 0 5
41995: PUSH
41996: LD_VAR 0 1
42000: ST_TO_ADDR
// end ;
42001: LD_VAR 0 5
42005: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42006: LD_INT 0
42008: PPUSH
42009: PPUSH
// result := 0 ;
42010: LD_ADDR_VAR 0 3
42014: PUSH
42015: LD_INT 0
42017: ST_TO_ADDR
// if not array or not value in array then
42018: LD_VAR 0 1
42022: NOT
42023: PUSH
42024: LD_VAR 0 2
42028: PUSH
42029: LD_VAR 0 1
42033: IN
42034: NOT
42035: OR
42036: IFFALSE 42040
// exit ;
42038: GO 42094
// for i = 1 to array do
42040: LD_ADDR_VAR 0 4
42044: PUSH
42045: DOUBLE
42046: LD_INT 1
42048: DEC
42049: ST_TO_ADDR
42050: LD_VAR 0 1
42054: PUSH
42055: FOR_TO
42056: IFFALSE 42092
// if value = array [ i ] then
42058: LD_VAR 0 2
42062: PUSH
42063: LD_VAR 0 1
42067: PUSH
42068: LD_VAR 0 4
42072: ARRAY
42073: EQUAL
42074: IFFALSE 42090
// begin result := i ;
42076: LD_ADDR_VAR 0 3
42080: PUSH
42081: LD_VAR 0 4
42085: ST_TO_ADDR
// exit ;
42086: POP
42087: POP
42088: GO 42094
// end ;
42090: GO 42055
42092: POP
42093: POP
// end ;
42094: LD_VAR 0 3
42098: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42099: LD_INT 0
42101: PPUSH
// vc_chassis := chassis ;
42102: LD_ADDR_OWVAR 37
42106: PUSH
42107: LD_VAR 0 1
42111: ST_TO_ADDR
// vc_engine := engine ;
42112: LD_ADDR_OWVAR 39
42116: PUSH
42117: LD_VAR 0 2
42121: ST_TO_ADDR
// vc_control := control ;
42122: LD_ADDR_OWVAR 38
42126: PUSH
42127: LD_VAR 0 3
42131: ST_TO_ADDR
// vc_weapon := weapon ;
42132: LD_ADDR_OWVAR 40
42136: PUSH
42137: LD_VAR 0 4
42141: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42142: LD_ADDR_OWVAR 41
42146: PUSH
42147: LD_VAR 0 5
42151: ST_TO_ADDR
// end ;
42152: LD_VAR 0 6
42156: RET
// export function WantPlant ( unit ) ; var task ; begin
42157: LD_INT 0
42159: PPUSH
42160: PPUSH
// result := false ;
42161: LD_ADDR_VAR 0 2
42165: PUSH
42166: LD_INT 0
42168: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42169: LD_ADDR_VAR 0 3
42173: PUSH
42174: LD_VAR 0 1
42178: PPUSH
42179: CALL_OW 437
42183: ST_TO_ADDR
// if task then
42184: LD_VAR 0 3
42188: IFFALSE 42216
// if task [ 1 ] [ 1 ] = p then
42190: LD_VAR 0 3
42194: PUSH
42195: LD_INT 1
42197: ARRAY
42198: PUSH
42199: LD_INT 1
42201: ARRAY
42202: PUSH
42203: LD_STRING p
42205: EQUAL
42206: IFFALSE 42216
// result := true ;
42208: LD_ADDR_VAR 0 2
42212: PUSH
42213: LD_INT 1
42215: ST_TO_ADDR
// end ;
42216: LD_VAR 0 2
42220: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42221: LD_INT 0
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
// if pos < 1 then
42227: LD_VAR 0 2
42231: PUSH
42232: LD_INT 1
42234: LESS
42235: IFFALSE 42239
// exit ;
42237: GO 42542
// if pos = 1 then
42239: LD_VAR 0 2
42243: PUSH
42244: LD_INT 1
42246: EQUAL
42247: IFFALSE 42280
// result := Replace ( arr , pos [ 1 ] , value ) else
42249: LD_ADDR_VAR 0 4
42253: PUSH
42254: LD_VAR 0 1
42258: PPUSH
42259: LD_VAR 0 2
42263: PUSH
42264: LD_INT 1
42266: ARRAY
42267: PPUSH
42268: LD_VAR 0 3
42272: PPUSH
42273: CALL_OW 1
42277: ST_TO_ADDR
42278: GO 42542
// begin tmp := arr ;
42280: LD_ADDR_VAR 0 6
42284: PUSH
42285: LD_VAR 0 1
42289: ST_TO_ADDR
// s_arr := [ tmp ] ;
42290: LD_ADDR_VAR 0 7
42294: PUSH
42295: LD_VAR 0 6
42299: PUSH
42300: EMPTY
42301: LIST
42302: ST_TO_ADDR
// for i = 1 to pos - 1 do
42303: LD_ADDR_VAR 0 5
42307: PUSH
42308: DOUBLE
42309: LD_INT 1
42311: DEC
42312: ST_TO_ADDR
42313: LD_VAR 0 2
42317: PUSH
42318: LD_INT 1
42320: MINUS
42321: PUSH
42322: FOR_TO
42323: IFFALSE 42368
// begin tmp := tmp [ pos [ i ] ] ;
42325: LD_ADDR_VAR 0 6
42329: PUSH
42330: LD_VAR 0 6
42334: PUSH
42335: LD_VAR 0 2
42339: PUSH
42340: LD_VAR 0 5
42344: ARRAY
42345: ARRAY
42346: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42347: LD_ADDR_VAR 0 7
42351: PUSH
42352: LD_VAR 0 7
42356: PUSH
42357: LD_VAR 0 6
42361: PUSH
42362: EMPTY
42363: LIST
42364: ADD
42365: ST_TO_ADDR
// end ;
42366: GO 42322
42368: POP
42369: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42370: LD_ADDR_VAR 0 6
42374: PUSH
42375: LD_VAR 0 6
42379: PPUSH
42380: LD_VAR 0 2
42384: PUSH
42385: LD_VAR 0 2
42389: ARRAY
42390: PPUSH
42391: LD_VAR 0 3
42395: PPUSH
42396: CALL_OW 1
42400: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42401: LD_ADDR_VAR 0 7
42405: PUSH
42406: LD_VAR 0 7
42410: PPUSH
42411: LD_VAR 0 7
42415: PPUSH
42416: LD_VAR 0 6
42420: PPUSH
42421: CALL_OW 1
42425: ST_TO_ADDR
// for i = s_arr downto 2 do
42426: LD_ADDR_VAR 0 5
42430: PUSH
42431: DOUBLE
42432: LD_VAR 0 7
42436: INC
42437: ST_TO_ADDR
42438: LD_INT 2
42440: PUSH
42441: FOR_DOWNTO
42442: IFFALSE 42526
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42444: LD_ADDR_VAR 0 6
42448: PUSH
42449: LD_VAR 0 7
42453: PUSH
42454: LD_VAR 0 5
42458: PUSH
42459: LD_INT 1
42461: MINUS
42462: ARRAY
42463: PPUSH
42464: LD_VAR 0 2
42468: PUSH
42469: LD_VAR 0 5
42473: PUSH
42474: LD_INT 1
42476: MINUS
42477: ARRAY
42478: PPUSH
42479: LD_VAR 0 7
42483: PUSH
42484: LD_VAR 0 5
42488: ARRAY
42489: PPUSH
42490: CALL_OW 1
42494: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42495: LD_ADDR_VAR 0 7
42499: PUSH
42500: LD_VAR 0 7
42504: PPUSH
42505: LD_VAR 0 5
42509: PUSH
42510: LD_INT 1
42512: MINUS
42513: PPUSH
42514: LD_VAR 0 6
42518: PPUSH
42519: CALL_OW 1
42523: ST_TO_ADDR
// end ;
42524: GO 42441
42526: POP
42527: POP
// result := s_arr [ 1 ] ;
42528: LD_ADDR_VAR 0 4
42532: PUSH
42533: LD_VAR 0 7
42537: PUSH
42538: LD_INT 1
42540: ARRAY
42541: ST_TO_ADDR
// end ; end ;
42542: LD_VAR 0 4
42546: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42547: LD_INT 0
42549: PPUSH
42550: PPUSH
// if not list then
42551: LD_VAR 0 1
42555: NOT
42556: IFFALSE 42560
// exit ;
42558: GO 42651
// i := list [ pos1 ] ;
42560: LD_ADDR_VAR 0 5
42564: PUSH
42565: LD_VAR 0 1
42569: PUSH
42570: LD_VAR 0 2
42574: ARRAY
42575: ST_TO_ADDR
// if not i then
42576: LD_VAR 0 5
42580: NOT
42581: IFFALSE 42585
// exit ;
42583: GO 42651
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42585: LD_ADDR_VAR 0 1
42589: PUSH
42590: LD_VAR 0 1
42594: PPUSH
42595: LD_VAR 0 2
42599: PPUSH
42600: LD_VAR 0 1
42604: PUSH
42605: LD_VAR 0 3
42609: ARRAY
42610: PPUSH
42611: CALL_OW 1
42615: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42616: LD_ADDR_VAR 0 1
42620: PUSH
42621: LD_VAR 0 1
42625: PPUSH
42626: LD_VAR 0 3
42630: PPUSH
42631: LD_VAR 0 5
42635: PPUSH
42636: CALL_OW 1
42640: ST_TO_ADDR
// result := list ;
42641: LD_ADDR_VAR 0 4
42645: PUSH
42646: LD_VAR 0 1
42650: ST_TO_ADDR
// end ;
42651: LD_VAR 0 4
42655: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42656: LD_INT 0
42658: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42659: LD_ADDR_VAR 0 5
42663: PUSH
42664: LD_VAR 0 1
42668: PPUSH
42669: CALL_OW 250
42673: PPUSH
42674: LD_VAR 0 1
42678: PPUSH
42679: CALL_OW 251
42683: PPUSH
42684: LD_VAR 0 2
42688: PPUSH
42689: LD_VAR 0 3
42693: PPUSH
42694: LD_VAR 0 4
42698: PPUSH
42699: CALL 43077 0 5
42703: ST_TO_ADDR
// end ;
42704: LD_VAR 0 5
42708: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
42709: LD_INT 0
42711: PPUSH
42712: PPUSH
42713: PPUSH
42714: PPUSH
// if not list or not unit then
42715: LD_VAR 0 2
42719: NOT
42720: PUSH
42721: LD_VAR 0 1
42725: NOT
42726: OR
42727: IFFALSE 42731
// exit ;
42729: GO 43072
// result := [ ] ;
42731: LD_ADDR_VAR 0 5
42735: PUSH
42736: EMPTY
42737: ST_TO_ADDR
// for i in list do
42738: LD_ADDR_VAR 0 6
42742: PUSH
42743: LD_VAR 0 2
42747: PUSH
42748: FOR_IN
42749: IFFALSE 42967
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42751: LD_ADDR_VAR 0 8
42755: PUSH
42756: LD_VAR 0 1
42760: PPUSH
42761: LD_VAR 0 6
42765: PUSH
42766: LD_INT 1
42768: ARRAY
42769: PPUSH
42770: LD_VAR 0 6
42774: PUSH
42775: LD_INT 2
42777: ARRAY
42778: PPUSH
42779: CALL_OW 297
42783: ST_TO_ADDR
// if not Count ( result ) then
42784: LD_VAR 0 5
42788: PPUSH
42789: CALL 39361 0 1
42793: NOT
42794: IFFALSE 42827
// begin result := Join ( result , [ i , tmp ] ) ;
42796: LD_ADDR_VAR 0 5
42800: PUSH
42801: LD_VAR 0 5
42805: PPUSH
42806: LD_VAR 0 6
42810: PUSH
42811: LD_VAR 0 8
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PPUSH
42820: CALL 74961 0 2
42824: ST_TO_ADDR
// continue ;
42825: GO 42748
// end ; if result [ result ] [ 2 ] <= tmp then
42827: LD_VAR 0 5
42831: PUSH
42832: LD_VAR 0 5
42836: ARRAY
42837: PUSH
42838: LD_INT 2
42840: ARRAY
42841: PUSH
42842: LD_VAR 0 8
42846: LESSEQUAL
42847: IFFALSE 42880
// result := Join ( result , [ i , tmp ] ) else
42849: LD_ADDR_VAR 0 5
42853: PUSH
42854: LD_VAR 0 5
42858: PPUSH
42859: LD_VAR 0 6
42863: PUSH
42864: LD_VAR 0 8
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PPUSH
42873: CALL 74961 0 2
42877: ST_TO_ADDR
42878: GO 42965
// begin for j := 1 to Count ( result ) do
42880: LD_ADDR_VAR 0 7
42884: PUSH
42885: DOUBLE
42886: LD_INT 1
42888: DEC
42889: ST_TO_ADDR
42890: LD_VAR 0 5
42894: PPUSH
42895: CALL 39361 0 1
42899: PUSH
42900: FOR_TO
42901: IFFALSE 42963
// begin if tmp < result [ j ] [ 2 ] then
42903: LD_VAR 0 8
42907: PUSH
42908: LD_VAR 0 5
42912: PUSH
42913: LD_VAR 0 7
42917: ARRAY
42918: PUSH
42919: LD_INT 2
42921: ARRAY
42922: LESS
42923: IFFALSE 42961
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42925: LD_ADDR_VAR 0 5
42929: PUSH
42930: LD_VAR 0 5
42934: PPUSH
42935: LD_VAR 0 7
42939: PPUSH
42940: LD_VAR 0 6
42944: PUSH
42945: LD_VAR 0 8
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PPUSH
42954: CALL_OW 2
42958: ST_TO_ADDR
// break ;
42959: GO 42963
// end ; end ;
42961: GO 42900
42963: POP
42964: POP
// end ; end ;
42965: GO 42748
42967: POP
42968: POP
// if result and not asc then
42969: LD_VAR 0 5
42973: PUSH
42974: LD_VAR 0 3
42978: NOT
42979: AND
42980: IFFALSE 42997
// result := ReverseArray ( result ) ;
42982: LD_ADDR_VAR 0 5
42986: PUSH
42987: LD_VAR 0 5
42991: PPUSH
42992: CALL 70237 0 1
42996: ST_TO_ADDR
// tmp := [ ] ;
42997: LD_ADDR_VAR 0 8
43001: PUSH
43002: EMPTY
43003: ST_TO_ADDR
// if mode then
43004: LD_VAR 0 4
43008: IFFALSE 43072
// begin for i := 1 to result do
43010: LD_ADDR_VAR 0 6
43014: PUSH
43015: DOUBLE
43016: LD_INT 1
43018: DEC
43019: ST_TO_ADDR
43020: LD_VAR 0 5
43024: PUSH
43025: FOR_TO
43026: IFFALSE 43060
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
43028: LD_ADDR_VAR 0 8
43032: PUSH
43033: LD_VAR 0 8
43037: PPUSH
43038: LD_VAR 0 5
43042: PUSH
43043: LD_VAR 0 6
43047: ARRAY
43048: PUSH
43049: LD_INT 1
43051: ARRAY
43052: PPUSH
43053: CALL 74961 0 2
43057: ST_TO_ADDR
43058: GO 43025
43060: POP
43061: POP
// result := tmp ;
43062: LD_ADDR_VAR 0 5
43066: PUSH
43067: LD_VAR 0 8
43071: ST_TO_ADDR
// end ; end ;
43072: LD_VAR 0 5
43076: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43077: LD_INT 0
43079: PPUSH
43080: PPUSH
43081: PPUSH
43082: PPUSH
// if not list then
43083: LD_VAR 0 3
43087: NOT
43088: IFFALSE 43092
// exit ;
43090: GO 43480
// result := [ ] ;
43092: LD_ADDR_VAR 0 6
43096: PUSH
43097: EMPTY
43098: ST_TO_ADDR
// for i in list do
43099: LD_ADDR_VAR 0 7
43103: PUSH
43104: LD_VAR 0 3
43108: PUSH
43109: FOR_IN
43110: IFFALSE 43312
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43112: LD_ADDR_VAR 0 9
43116: PUSH
43117: LD_VAR 0 7
43121: PPUSH
43122: LD_VAR 0 1
43126: PPUSH
43127: LD_VAR 0 2
43131: PPUSH
43132: CALL_OW 297
43136: ST_TO_ADDR
// if not result then
43137: LD_VAR 0 6
43141: NOT
43142: IFFALSE 43168
// result := [ [ i , tmp ] ] else
43144: LD_ADDR_VAR 0 6
43148: PUSH
43149: LD_VAR 0 7
43153: PUSH
43154: LD_VAR 0 9
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: EMPTY
43164: LIST
43165: ST_TO_ADDR
43166: GO 43310
// begin if result [ result ] [ 2 ] < tmp then
43168: LD_VAR 0 6
43172: PUSH
43173: LD_VAR 0 6
43177: ARRAY
43178: PUSH
43179: LD_INT 2
43181: ARRAY
43182: PUSH
43183: LD_VAR 0 9
43187: LESS
43188: IFFALSE 43230
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43190: LD_ADDR_VAR 0 6
43194: PUSH
43195: LD_VAR 0 6
43199: PPUSH
43200: LD_VAR 0 6
43204: PUSH
43205: LD_INT 1
43207: PLUS
43208: PPUSH
43209: LD_VAR 0 7
43213: PUSH
43214: LD_VAR 0 9
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PPUSH
43223: CALL_OW 2
43227: ST_TO_ADDR
43228: GO 43310
// for j = 1 to result do
43230: LD_ADDR_VAR 0 8
43234: PUSH
43235: DOUBLE
43236: LD_INT 1
43238: DEC
43239: ST_TO_ADDR
43240: LD_VAR 0 6
43244: PUSH
43245: FOR_TO
43246: IFFALSE 43308
// begin if tmp < result [ j ] [ 2 ] then
43248: LD_VAR 0 9
43252: PUSH
43253: LD_VAR 0 6
43257: PUSH
43258: LD_VAR 0 8
43262: ARRAY
43263: PUSH
43264: LD_INT 2
43266: ARRAY
43267: LESS
43268: IFFALSE 43306
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43270: LD_ADDR_VAR 0 6
43274: PUSH
43275: LD_VAR 0 6
43279: PPUSH
43280: LD_VAR 0 8
43284: PPUSH
43285: LD_VAR 0 7
43289: PUSH
43290: LD_VAR 0 9
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PPUSH
43299: CALL_OW 2
43303: ST_TO_ADDR
// break ;
43304: GO 43308
// end ; end ;
43306: GO 43245
43308: POP
43309: POP
// end ; end ;
43310: GO 43109
43312: POP
43313: POP
// if result and not asc then
43314: LD_VAR 0 6
43318: PUSH
43319: LD_VAR 0 4
43323: NOT
43324: AND
43325: IFFALSE 43400
// begin tmp := result ;
43327: LD_ADDR_VAR 0 9
43331: PUSH
43332: LD_VAR 0 6
43336: ST_TO_ADDR
// for i = tmp downto 1 do
43337: LD_ADDR_VAR 0 7
43341: PUSH
43342: DOUBLE
43343: LD_VAR 0 9
43347: INC
43348: ST_TO_ADDR
43349: LD_INT 1
43351: PUSH
43352: FOR_DOWNTO
43353: IFFALSE 43398
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43355: LD_ADDR_VAR 0 6
43359: PUSH
43360: LD_VAR 0 6
43364: PPUSH
43365: LD_VAR 0 9
43369: PUSH
43370: LD_VAR 0 7
43374: MINUS
43375: PUSH
43376: LD_INT 1
43378: PLUS
43379: PPUSH
43380: LD_VAR 0 9
43384: PUSH
43385: LD_VAR 0 7
43389: ARRAY
43390: PPUSH
43391: CALL_OW 1
43395: ST_TO_ADDR
43396: GO 43352
43398: POP
43399: POP
// end ; tmp := [ ] ;
43400: LD_ADDR_VAR 0 9
43404: PUSH
43405: EMPTY
43406: ST_TO_ADDR
// if mode then
43407: LD_VAR 0 5
43411: IFFALSE 43480
// begin for i = 1 to result do
43413: LD_ADDR_VAR 0 7
43417: PUSH
43418: DOUBLE
43419: LD_INT 1
43421: DEC
43422: ST_TO_ADDR
43423: LD_VAR 0 6
43427: PUSH
43428: FOR_TO
43429: IFFALSE 43468
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43431: LD_ADDR_VAR 0 9
43435: PUSH
43436: LD_VAR 0 9
43440: PPUSH
43441: LD_VAR 0 7
43445: PPUSH
43446: LD_VAR 0 6
43450: PUSH
43451: LD_VAR 0 7
43455: ARRAY
43456: PUSH
43457: LD_INT 1
43459: ARRAY
43460: PPUSH
43461: CALL_OW 1
43465: ST_TO_ADDR
43466: GO 43428
43468: POP
43469: POP
// result := tmp ;
43470: LD_ADDR_VAR 0 6
43474: PUSH
43475: LD_VAR 0 9
43479: ST_TO_ADDR
// end ; end ;
43480: LD_VAR 0 6
43484: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43485: LD_INT 0
43487: PPUSH
43488: PPUSH
43489: PPUSH
43490: PPUSH
43491: PPUSH
43492: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43493: LD_ADDR_VAR 0 5
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: ST_TO_ADDR
// if not x or not y then
43515: LD_VAR 0 2
43519: NOT
43520: PUSH
43521: LD_VAR 0 3
43525: NOT
43526: OR
43527: IFFALSE 43531
// exit ;
43529: GO 45181
// if not range then
43531: LD_VAR 0 4
43535: NOT
43536: IFFALSE 43546
// range := 10 ;
43538: LD_ADDR_VAR 0 4
43542: PUSH
43543: LD_INT 10
43545: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43546: LD_ADDR_VAR 0 8
43550: PUSH
43551: LD_INT 81
43553: PUSH
43554: LD_VAR 0 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 92
43565: PUSH
43566: LD_VAR 0 2
43570: PUSH
43571: LD_VAR 0 3
43575: PUSH
43576: LD_VAR 0 4
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 3
43589: PUSH
43590: LD_INT 21
43592: PUSH
43593: LD_INT 3
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: PPUSH
43609: CALL_OW 69
43613: ST_TO_ADDR
// if not tmp then
43614: LD_VAR 0 8
43618: NOT
43619: IFFALSE 43623
// exit ;
43621: GO 45181
// for i in tmp do
43623: LD_ADDR_VAR 0 6
43627: PUSH
43628: LD_VAR 0 8
43632: PUSH
43633: FOR_IN
43634: IFFALSE 45156
// begin points := [ 0 , 0 , 0 ] ;
43636: LD_ADDR_VAR 0 9
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: LIST
43654: ST_TO_ADDR
// bpoints := 1 ;
43655: LD_ADDR_VAR 0 10
43659: PUSH
43660: LD_INT 1
43662: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43663: LD_VAR 0 6
43667: PPUSH
43668: CALL_OW 247
43672: PUSH
43673: LD_INT 1
43675: DOUBLE
43676: EQUAL
43677: IFTRUE 43681
43679: GO 44259
43681: POP
// begin if GetClass ( i ) = 1 then
43682: LD_VAR 0 6
43686: PPUSH
43687: CALL_OW 257
43691: PUSH
43692: LD_INT 1
43694: EQUAL
43695: IFFALSE 43716
// points := [ 10 , 5 , 3 ] ;
43697: LD_ADDR_VAR 0 9
43701: PUSH
43702: LD_INT 10
43704: PUSH
43705: LD_INT 5
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: LIST
43715: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43716: LD_VAR 0 6
43720: PPUSH
43721: CALL_OW 257
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: LD_INT 3
43731: PUSH
43732: LD_INT 4
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: IN
43740: IFFALSE 43761
// points := [ 3 , 2 , 1 ] ;
43742: LD_ADDR_VAR 0 9
43746: PUSH
43747: LD_INT 3
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43761: LD_VAR 0 6
43765: PPUSH
43766: CALL_OW 257
43770: PUSH
43771: LD_INT 5
43773: EQUAL
43774: IFFALSE 43795
// points := [ 130 , 5 , 2 ] ;
43776: LD_ADDR_VAR 0 9
43780: PUSH
43781: LD_INT 130
43783: PUSH
43784: LD_INT 5
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43795: LD_VAR 0 6
43799: PPUSH
43800: CALL_OW 257
43804: PUSH
43805: LD_INT 8
43807: EQUAL
43808: IFFALSE 43829
// points := [ 35 , 35 , 30 ] ;
43810: LD_ADDR_VAR 0 9
43814: PUSH
43815: LD_INT 35
43817: PUSH
43818: LD_INT 35
43820: PUSH
43821: LD_INT 30
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: LIST
43828: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43829: LD_VAR 0 6
43833: PPUSH
43834: CALL_OW 257
43838: PUSH
43839: LD_INT 9
43841: EQUAL
43842: IFFALSE 43863
// points := [ 20 , 55 , 40 ] ;
43844: LD_ADDR_VAR 0 9
43848: PUSH
43849: LD_INT 20
43851: PUSH
43852: LD_INT 55
43854: PUSH
43855: LD_INT 40
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: LIST
43862: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43863: LD_VAR 0 6
43867: PPUSH
43868: CALL_OW 257
43872: PUSH
43873: LD_INT 12
43875: PUSH
43876: LD_INT 16
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: IN
43883: IFFALSE 43904
// points := [ 5 , 3 , 2 ] ;
43885: LD_ADDR_VAR 0 9
43889: PUSH
43890: LD_INT 5
43892: PUSH
43893: LD_INT 3
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43904: LD_VAR 0 6
43908: PPUSH
43909: CALL_OW 257
43913: PUSH
43914: LD_INT 17
43916: EQUAL
43917: IFFALSE 43938
// points := [ 100 , 50 , 75 ] ;
43919: LD_ADDR_VAR 0 9
43923: PUSH
43924: LD_INT 100
43926: PUSH
43927: LD_INT 50
43929: PUSH
43930: LD_INT 75
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: LIST
43937: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43938: LD_VAR 0 6
43942: PPUSH
43943: CALL_OW 257
43947: PUSH
43948: LD_INT 15
43950: EQUAL
43951: IFFALSE 43972
// points := [ 10 , 5 , 3 ] ;
43953: LD_ADDR_VAR 0 9
43957: PUSH
43958: LD_INT 10
43960: PUSH
43961: LD_INT 5
43963: PUSH
43964: LD_INT 3
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: LIST
43971: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43972: LD_VAR 0 6
43976: PPUSH
43977: CALL_OW 257
43981: PUSH
43982: LD_INT 14
43984: EQUAL
43985: IFFALSE 44006
// points := [ 10 , 0 , 0 ] ;
43987: LD_ADDR_VAR 0 9
43991: PUSH
43992: LD_INT 10
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44006: LD_VAR 0 6
44010: PPUSH
44011: CALL_OW 257
44015: PUSH
44016: LD_INT 11
44018: EQUAL
44019: IFFALSE 44040
// points := [ 30 , 10 , 5 ] ;
44021: LD_ADDR_VAR 0 9
44025: PUSH
44026: LD_INT 30
44028: PUSH
44029: LD_INT 10
44031: PUSH
44032: LD_INT 5
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: LIST
44039: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44040: LD_VAR 0 1
44044: PPUSH
44045: LD_INT 5
44047: PPUSH
44048: CALL_OW 321
44052: PUSH
44053: LD_INT 2
44055: EQUAL
44056: IFFALSE 44073
// bpoints := bpoints * 1.8 ;
44058: LD_ADDR_VAR 0 10
44062: PUSH
44063: LD_VAR 0 10
44067: PUSH
44068: LD_REAL  1.80000000000000E+0000
44071: MUL
44072: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44073: LD_VAR 0 6
44077: PPUSH
44078: CALL_OW 257
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: LD_INT 4
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: IN
44101: PUSH
44102: LD_VAR 0 1
44106: PPUSH
44107: LD_INT 51
44109: PPUSH
44110: CALL_OW 321
44114: PUSH
44115: LD_INT 2
44117: EQUAL
44118: AND
44119: IFFALSE 44136
// bpoints := bpoints * 1.2 ;
44121: LD_ADDR_VAR 0 10
44125: PUSH
44126: LD_VAR 0 10
44130: PUSH
44131: LD_REAL  1.20000000000000E+0000
44134: MUL
44135: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44136: LD_VAR 0 6
44140: PPUSH
44141: CALL_OW 257
44145: PUSH
44146: LD_INT 5
44148: PUSH
44149: LD_INT 7
44151: PUSH
44152: LD_INT 9
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: IN
44160: PUSH
44161: LD_VAR 0 1
44165: PPUSH
44166: LD_INT 52
44168: PPUSH
44169: CALL_OW 321
44173: PUSH
44174: LD_INT 2
44176: EQUAL
44177: AND
44178: IFFALSE 44195
// bpoints := bpoints * 1.5 ;
44180: LD_ADDR_VAR 0 10
44184: PUSH
44185: LD_VAR 0 10
44189: PUSH
44190: LD_REAL  1.50000000000000E+0000
44193: MUL
44194: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44195: LD_VAR 0 1
44199: PPUSH
44200: LD_INT 66
44202: PPUSH
44203: CALL_OW 321
44207: PUSH
44208: LD_INT 2
44210: EQUAL
44211: IFFALSE 44228
// bpoints := bpoints * 1.1 ;
44213: LD_ADDR_VAR 0 10
44217: PUSH
44218: LD_VAR 0 10
44222: PUSH
44223: LD_REAL  1.10000000000000E+0000
44226: MUL
44227: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44228: LD_ADDR_VAR 0 10
44232: PUSH
44233: LD_VAR 0 10
44237: PUSH
44238: LD_VAR 0 6
44242: PPUSH
44243: LD_INT 1
44245: PPUSH
44246: CALL_OW 259
44250: PUSH
44251: LD_REAL  1.15000000000000E+0000
44254: MUL
44255: MUL
44256: ST_TO_ADDR
// end ; unit_vehicle :
44257: GO 45085
44259: LD_INT 2
44261: DOUBLE
44262: EQUAL
44263: IFTRUE 44267
44265: GO 45073
44267: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44268: LD_VAR 0 6
44272: PPUSH
44273: CALL_OW 264
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: LD_INT 42
44283: PUSH
44284: LD_INT 24
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: LIST
44291: IN
44292: IFFALSE 44313
// points := [ 25 , 5 , 3 ] ;
44294: LD_ADDR_VAR 0 9
44298: PUSH
44299: LD_INT 25
44301: PUSH
44302: LD_INT 5
44304: PUSH
44305: LD_INT 3
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44313: LD_VAR 0 6
44317: PPUSH
44318: CALL_OW 264
44322: PUSH
44323: LD_INT 4
44325: PUSH
44326: LD_INT 43
44328: PUSH
44329: LD_INT 25
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: LIST
44336: IN
44337: IFFALSE 44358
// points := [ 40 , 15 , 5 ] ;
44339: LD_ADDR_VAR 0 9
44343: PUSH
44344: LD_INT 40
44346: PUSH
44347: LD_INT 15
44349: PUSH
44350: LD_INT 5
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: LIST
44357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44358: LD_VAR 0 6
44362: PPUSH
44363: CALL_OW 264
44367: PUSH
44368: LD_INT 3
44370: PUSH
44371: LD_INT 23
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: IN
44378: IFFALSE 44399
// points := [ 7 , 25 , 8 ] ;
44380: LD_ADDR_VAR 0 9
44384: PUSH
44385: LD_INT 7
44387: PUSH
44388: LD_INT 25
44390: PUSH
44391: LD_INT 8
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44399: LD_VAR 0 6
44403: PPUSH
44404: CALL_OW 264
44408: PUSH
44409: LD_INT 5
44411: PUSH
44412: LD_INT 27
44414: PUSH
44415: LD_INT 44
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: LIST
44422: IN
44423: IFFALSE 44444
// points := [ 14 , 50 , 16 ] ;
44425: LD_ADDR_VAR 0 9
44429: PUSH
44430: LD_INT 14
44432: PUSH
44433: LD_INT 50
44435: PUSH
44436: LD_INT 16
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: LIST
44443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44444: LD_VAR 0 6
44448: PPUSH
44449: CALL_OW 264
44453: PUSH
44454: LD_INT 6
44456: PUSH
44457: LD_INT 46
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: IN
44464: IFFALSE 44485
// points := [ 32 , 120 , 70 ] ;
44466: LD_ADDR_VAR 0 9
44470: PUSH
44471: LD_INT 32
44473: PUSH
44474: LD_INT 120
44476: PUSH
44477: LD_INT 70
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: LIST
44484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44485: LD_VAR 0 6
44489: PPUSH
44490: CALL_OW 264
44494: PUSH
44495: LD_INT 7
44497: PUSH
44498: LD_INT 28
44500: PUSH
44501: LD_INT 45
44503: PUSH
44504: LD_INT 92
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: IN
44513: IFFALSE 44534
// points := [ 35 , 20 , 45 ] ;
44515: LD_ADDR_VAR 0 9
44519: PUSH
44520: LD_INT 35
44522: PUSH
44523: LD_INT 20
44525: PUSH
44526: LD_INT 45
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44534: LD_VAR 0 6
44538: PPUSH
44539: CALL_OW 264
44543: PUSH
44544: LD_INT 47
44546: PUSH
44547: EMPTY
44548: LIST
44549: IN
44550: IFFALSE 44571
// points := [ 67 , 45 , 75 ] ;
44552: LD_ADDR_VAR 0 9
44556: PUSH
44557: LD_INT 67
44559: PUSH
44560: LD_INT 45
44562: PUSH
44563: LD_INT 75
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44571: LD_VAR 0 6
44575: PPUSH
44576: CALL_OW 264
44580: PUSH
44581: LD_INT 26
44583: PUSH
44584: EMPTY
44585: LIST
44586: IN
44587: IFFALSE 44608
// points := [ 120 , 30 , 80 ] ;
44589: LD_ADDR_VAR 0 9
44593: PUSH
44594: LD_INT 120
44596: PUSH
44597: LD_INT 30
44599: PUSH
44600: LD_INT 80
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44608: LD_VAR 0 6
44612: PPUSH
44613: CALL_OW 264
44617: PUSH
44618: LD_INT 22
44620: PUSH
44621: EMPTY
44622: LIST
44623: IN
44624: IFFALSE 44645
// points := [ 40 , 1 , 1 ] ;
44626: LD_ADDR_VAR 0 9
44630: PUSH
44631: LD_INT 40
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: LIST
44644: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44645: LD_VAR 0 6
44649: PPUSH
44650: CALL_OW 264
44654: PUSH
44655: LD_INT 29
44657: PUSH
44658: EMPTY
44659: LIST
44660: IN
44661: IFFALSE 44682
// points := [ 70 , 200 , 400 ] ;
44663: LD_ADDR_VAR 0 9
44667: PUSH
44668: LD_INT 70
44670: PUSH
44671: LD_INT 200
44673: PUSH
44674: LD_INT 400
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: LIST
44681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44682: LD_VAR 0 6
44686: PPUSH
44687: CALL_OW 264
44691: PUSH
44692: LD_INT 14
44694: PUSH
44695: LD_INT 53
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: IN
44702: IFFALSE 44723
// points := [ 40 , 10 , 20 ] ;
44704: LD_ADDR_VAR 0 9
44708: PUSH
44709: LD_INT 40
44711: PUSH
44712: LD_INT 10
44714: PUSH
44715: LD_INT 20
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44723: LD_VAR 0 6
44727: PPUSH
44728: CALL_OW 264
44732: PUSH
44733: LD_INT 9
44735: PUSH
44736: EMPTY
44737: LIST
44738: IN
44739: IFFALSE 44760
// points := [ 5 , 70 , 20 ] ;
44741: LD_ADDR_VAR 0 9
44745: PUSH
44746: LD_INT 5
44748: PUSH
44749: LD_INT 70
44751: PUSH
44752: LD_INT 20
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44760: LD_VAR 0 6
44764: PPUSH
44765: CALL_OW 264
44769: PUSH
44770: LD_INT 10
44772: PUSH
44773: EMPTY
44774: LIST
44775: IN
44776: IFFALSE 44797
// points := [ 35 , 110 , 70 ] ;
44778: LD_ADDR_VAR 0 9
44782: PUSH
44783: LD_INT 35
44785: PUSH
44786: LD_INT 110
44788: PUSH
44789: LD_INT 70
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: LIST
44796: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44797: LD_VAR 0 6
44801: PPUSH
44802: CALL_OW 265
44806: PUSH
44807: LD_INT 25
44809: EQUAL
44810: IFFALSE 44831
// points := [ 80 , 65 , 100 ] ;
44812: LD_ADDR_VAR 0 9
44816: PUSH
44817: LD_INT 80
44819: PUSH
44820: LD_INT 65
44822: PUSH
44823: LD_INT 100
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: LIST
44830: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44831: LD_VAR 0 6
44835: PPUSH
44836: CALL_OW 263
44840: PUSH
44841: LD_INT 1
44843: EQUAL
44844: IFFALSE 44879
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44846: LD_ADDR_VAR 0 10
44850: PUSH
44851: LD_VAR 0 10
44855: PUSH
44856: LD_VAR 0 6
44860: PPUSH
44861: CALL_OW 311
44865: PPUSH
44866: LD_INT 3
44868: PPUSH
44869: CALL_OW 259
44873: PUSH
44874: LD_INT 4
44876: MUL
44877: MUL
44878: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44879: LD_VAR 0 6
44883: PPUSH
44884: CALL_OW 263
44888: PUSH
44889: LD_INT 2
44891: EQUAL
44892: IFFALSE 44943
// begin j := IsControledBy ( i ) ;
44894: LD_ADDR_VAR 0 7
44898: PUSH
44899: LD_VAR 0 6
44903: PPUSH
44904: CALL_OW 312
44908: ST_TO_ADDR
// if j then
44909: LD_VAR 0 7
44913: IFFALSE 44943
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44915: LD_ADDR_VAR 0 10
44919: PUSH
44920: LD_VAR 0 10
44924: PUSH
44925: LD_VAR 0 7
44929: PPUSH
44930: LD_INT 3
44932: PPUSH
44933: CALL_OW 259
44937: PUSH
44938: LD_INT 3
44940: MUL
44941: MUL
44942: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44943: LD_VAR 0 6
44947: PPUSH
44948: CALL_OW 264
44952: PUSH
44953: LD_INT 5
44955: PUSH
44956: LD_INT 6
44958: PUSH
44959: LD_INT 46
44961: PUSH
44962: LD_INT 44
44964: PUSH
44965: LD_INT 47
44967: PUSH
44968: LD_INT 45
44970: PUSH
44971: LD_INT 28
44973: PUSH
44974: LD_INT 7
44976: PUSH
44977: LD_INT 27
44979: PUSH
44980: LD_INT 29
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: IN
44995: PUSH
44996: LD_VAR 0 1
45000: PPUSH
45001: LD_INT 52
45003: PPUSH
45004: CALL_OW 321
45008: PUSH
45009: LD_INT 2
45011: EQUAL
45012: AND
45013: IFFALSE 45030
// bpoints := bpoints * 1.2 ;
45015: LD_ADDR_VAR 0 10
45019: PUSH
45020: LD_VAR 0 10
45024: PUSH
45025: LD_REAL  1.20000000000000E+0000
45028: MUL
45029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45030: LD_VAR 0 6
45034: PPUSH
45035: CALL_OW 264
45039: PUSH
45040: LD_INT 6
45042: PUSH
45043: LD_INT 46
45045: PUSH
45046: LD_INT 47
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: IN
45054: IFFALSE 45071
// bpoints := bpoints * 1.2 ;
45056: LD_ADDR_VAR 0 10
45060: PUSH
45061: LD_VAR 0 10
45065: PUSH
45066: LD_REAL  1.20000000000000E+0000
45069: MUL
45070: ST_TO_ADDR
// end ; unit_building :
45071: GO 45085
45073: LD_INT 3
45075: DOUBLE
45076: EQUAL
45077: IFTRUE 45081
45079: GO 45084
45081: POP
// ; end ;
45082: GO 45085
45084: POP
// for j = 1 to 3 do
45085: LD_ADDR_VAR 0 7
45089: PUSH
45090: DOUBLE
45091: LD_INT 1
45093: DEC
45094: ST_TO_ADDR
45095: LD_INT 3
45097: PUSH
45098: FOR_TO
45099: IFFALSE 45152
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45101: LD_ADDR_VAR 0 5
45105: PUSH
45106: LD_VAR 0 5
45110: PPUSH
45111: LD_VAR 0 7
45115: PPUSH
45116: LD_VAR 0 5
45120: PUSH
45121: LD_VAR 0 7
45125: ARRAY
45126: PUSH
45127: LD_VAR 0 9
45131: PUSH
45132: LD_VAR 0 7
45136: ARRAY
45137: PUSH
45138: LD_VAR 0 10
45142: MUL
45143: PLUS
45144: PPUSH
45145: CALL_OW 1
45149: ST_TO_ADDR
45150: GO 45098
45152: POP
45153: POP
// end ;
45154: GO 43633
45156: POP
45157: POP
// result := Replace ( result , 4 , tmp ) ;
45158: LD_ADDR_VAR 0 5
45162: PUSH
45163: LD_VAR 0 5
45167: PPUSH
45168: LD_INT 4
45170: PPUSH
45171: LD_VAR 0 8
45175: PPUSH
45176: CALL_OW 1
45180: ST_TO_ADDR
// end ;
45181: LD_VAR 0 5
45185: RET
// export function DangerAtRange ( unit , range ) ; begin
45186: LD_INT 0
45188: PPUSH
// if not unit then
45189: LD_VAR 0 1
45193: NOT
45194: IFFALSE 45198
// exit ;
45196: GO 45243
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45198: LD_ADDR_VAR 0 3
45202: PUSH
45203: LD_VAR 0 1
45207: PPUSH
45208: CALL_OW 255
45212: PPUSH
45213: LD_VAR 0 1
45217: PPUSH
45218: CALL_OW 250
45222: PPUSH
45223: LD_VAR 0 1
45227: PPUSH
45228: CALL_OW 251
45232: PPUSH
45233: LD_VAR 0 2
45237: PPUSH
45238: CALL 43485 0 4
45242: ST_TO_ADDR
// end ;
45243: LD_VAR 0 3
45247: RET
// export function DangerInArea ( side , area ) ; begin
45248: LD_INT 0
45250: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45251: LD_ADDR_VAR 0 3
45255: PUSH
45256: LD_VAR 0 2
45260: PPUSH
45261: LD_INT 81
45263: PUSH
45264: LD_VAR 0 1
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PPUSH
45273: CALL_OW 70
45277: ST_TO_ADDR
// end ;
45278: LD_VAR 0 3
45282: RET
// export function IsExtension ( b ) ; begin
45283: LD_INT 0
45285: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45286: LD_ADDR_VAR 0 2
45290: PUSH
45291: LD_VAR 0 1
45295: PUSH
45296: LD_INT 23
45298: PUSH
45299: LD_INT 20
45301: PUSH
45302: LD_INT 22
45304: PUSH
45305: LD_INT 17
45307: PUSH
45308: LD_INT 24
45310: PUSH
45311: LD_INT 21
45313: PUSH
45314: LD_INT 19
45316: PUSH
45317: LD_INT 16
45319: PUSH
45320: LD_INT 25
45322: PUSH
45323: LD_INT 18
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: IN
45338: ST_TO_ADDR
// end ;
45339: LD_VAR 0 2
45343: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45344: LD_INT 0
45346: PPUSH
45347: PPUSH
45348: PPUSH
// result := [ ] ;
45349: LD_ADDR_VAR 0 4
45353: PUSH
45354: EMPTY
45355: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45356: LD_ADDR_VAR 0 5
45360: PUSH
45361: LD_VAR 0 2
45365: PPUSH
45366: LD_INT 21
45368: PUSH
45369: LD_INT 3
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PPUSH
45376: CALL_OW 70
45380: ST_TO_ADDR
// if not tmp then
45381: LD_VAR 0 5
45385: NOT
45386: IFFALSE 45390
// exit ;
45388: GO 45454
// if checkLink then
45390: LD_VAR 0 3
45394: IFFALSE 45444
// begin for i in tmp do
45396: LD_ADDR_VAR 0 6
45400: PUSH
45401: LD_VAR 0 5
45405: PUSH
45406: FOR_IN
45407: IFFALSE 45442
// if GetBase ( i ) <> base then
45409: LD_VAR 0 6
45413: PPUSH
45414: CALL_OW 274
45418: PUSH
45419: LD_VAR 0 1
45423: NONEQUAL
45424: IFFALSE 45440
// ComLinkToBase ( base , i ) ;
45426: LD_VAR 0 1
45430: PPUSH
45431: LD_VAR 0 6
45435: PPUSH
45436: CALL_OW 169
45440: GO 45406
45442: POP
45443: POP
// end ; result := tmp ;
45444: LD_ADDR_VAR 0 4
45448: PUSH
45449: LD_VAR 0 5
45453: ST_TO_ADDR
// end ;
45454: LD_VAR 0 4
45458: RET
// export function ComComplete ( units , b ) ; var i ; begin
45459: LD_INT 0
45461: PPUSH
45462: PPUSH
// if not units then
45463: LD_VAR 0 1
45467: NOT
45468: IFFALSE 45472
// exit ;
45470: GO 45562
// for i in units do
45472: LD_ADDR_VAR 0 4
45476: PUSH
45477: LD_VAR 0 1
45481: PUSH
45482: FOR_IN
45483: IFFALSE 45560
// if BuildingStatus ( b ) = bs_build then
45485: LD_VAR 0 2
45489: PPUSH
45490: CALL_OW 461
45494: PUSH
45495: LD_INT 1
45497: EQUAL
45498: IFFALSE 45558
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45500: LD_VAR 0 4
45504: PPUSH
45505: LD_STRING h
45507: PUSH
45508: LD_VAR 0 2
45512: PPUSH
45513: CALL_OW 250
45517: PUSH
45518: LD_VAR 0 2
45522: PPUSH
45523: CALL_OW 251
45527: PUSH
45528: LD_VAR 0 2
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: PUSH
45551: EMPTY
45552: LIST
45553: PPUSH
45554: CALL_OW 446
45558: GO 45482
45560: POP
45561: POP
// end ;
45562: LD_VAR 0 3
45566: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45567: LD_INT 0
45569: PPUSH
45570: PPUSH
45571: PPUSH
45572: PPUSH
45573: PPUSH
45574: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45575: LD_VAR 0 1
45579: NOT
45580: PUSH
45581: LD_VAR 0 1
45585: PPUSH
45586: CALL_OW 263
45590: PUSH
45591: LD_INT 2
45593: NONEQUAL
45594: OR
45595: IFFALSE 45599
// exit ;
45597: GO 45915
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45599: LD_ADDR_VAR 0 6
45603: PUSH
45604: LD_INT 22
45606: PUSH
45607: LD_VAR 0 1
45611: PPUSH
45612: CALL_OW 255
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: LD_INT 30
45626: PUSH
45627: LD_INT 36
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 34
45636: PUSH
45637: LD_INT 31
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: LIST
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PPUSH
45653: CALL_OW 69
45657: ST_TO_ADDR
// if not tmp then
45658: LD_VAR 0 6
45662: NOT
45663: IFFALSE 45667
// exit ;
45665: GO 45915
// result := [ ] ;
45667: LD_ADDR_VAR 0 2
45671: PUSH
45672: EMPTY
45673: ST_TO_ADDR
// for i in tmp do
45674: LD_ADDR_VAR 0 3
45678: PUSH
45679: LD_VAR 0 6
45683: PUSH
45684: FOR_IN
45685: IFFALSE 45756
// begin t := UnitsInside ( i ) ;
45687: LD_ADDR_VAR 0 4
45691: PUSH
45692: LD_VAR 0 3
45696: PPUSH
45697: CALL_OW 313
45701: ST_TO_ADDR
// if t then
45702: LD_VAR 0 4
45706: IFFALSE 45754
// for j in t do
45708: LD_ADDR_VAR 0 7
45712: PUSH
45713: LD_VAR 0 4
45717: PUSH
45718: FOR_IN
45719: IFFALSE 45752
// result := Replace ( result , result + 1 , j ) ;
45721: LD_ADDR_VAR 0 2
45725: PUSH
45726: LD_VAR 0 2
45730: PPUSH
45731: LD_VAR 0 2
45735: PUSH
45736: LD_INT 1
45738: PLUS
45739: PPUSH
45740: LD_VAR 0 7
45744: PPUSH
45745: CALL_OW 1
45749: ST_TO_ADDR
45750: GO 45718
45752: POP
45753: POP
// end ;
45754: GO 45684
45756: POP
45757: POP
// if not result then
45758: LD_VAR 0 2
45762: NOT
45763: IFFALSE 45767
// exit ;
45765: GO 45915
// mech := result [ 1 ] ;
45767: LD_ADDR_VAR 0 5
45771: PUSH
45772: LD_VAR 0 2
45776: PUSH
45777: LD_INT 1
45779: ARRAY
45780: ST_TO_ADDR
// if result > 1 then
45781: LD_VAR 0 2
45785: PUSH
45786: LD_INT 1
45788: GREATER
45789: IFFALSE 45901
// begin for i = 2 to result do
45791: LD_ADDR_VAR 0 3
45795: PUSH
45796: DOUBLE
45797: LD_INT 2
45799: DEC
45800: ST_TO_ADDR
45801: LD_VAR 0 2
45805: PUSH
45806: FOR_TO
45807: IFFALSE 45899
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45809: LD_ADDR_VAR 0 4
45813: PUSH
45814: LD_VAR 0 2
45818: PUSH
45819: LD_VAR 0 3
45823: ARRAY
45824: PPUSH
45825: LD_INT 3
45827: PPUSH
45828: CALL_OW 259
45832: PUSH
45833: LD_VAR 0 2
45837: PUSH
45838: LD_VAR 0 3
45842: ARRAY
45843: PPUSH
45844: CALL_OW 432
45848: MINUS
45849: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45850: LD_VAR 0 4
45854: PUSH
45855: LD_VAR 0 5
45859: PPUSH
45860: LD_INT 3
45862: PPUSH
45863: CALL_OW 259
45867: PUSH
45868: LD_VAR 0 5
45872: PPUSH
45873: CALL_OW 432
45877: MINUS
45878: GREATEREQUAL
45879: IFFALSE 45897
// mech := result [ i ] ;
45881: LD_ADDR_VAR 0 5
45885: PUSH
45886: LD_VAR 0 2
45890: PUSH
45891: LD_VAR 0 3
45895: ARRAY
45896: ST_TO_ADDR
// end ;
45897: GO 45806
45899: POP
45900: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45901: LD_VAR 0 1
45905: PPUSH
45906: LD_VAR 0 5
45910: PPUSH
45911: CALL_OW 135
// end ;
45915: LD_VAR 0 2
45919: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45920: LD_INT 0
45922: PPUSH
45923: PPUSH
45924: PPUSH
45925: PPUSH
45926: PPUSH
45927: PPUSH
45928: PPUSH
45929: PPUSH
45930: PPUSH
45931: PPUSH
45932: PPUSH
45933: PPUSH
45934: PPUSH
// result := [ ] ;
45935: LD_ADDR_VAR 0 7
45939: PUSH
45940: EMPTY
45941: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45942: LD_VAR 0 1
45946: PPUSH
45947: CALL_OW 266
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: IN
45962: NOT
45963: IFFALSE 45967
// exit ;
45965: GO 47601
// if name then
45967: LD_VAR 0 3
45971: IFFALSE 45987
// SetBName ( base_dep , name ) ;
45973: LD_VAR 0 1
45977: PPUSH
45978: LD_VAR 0 3
45982: PPUSH
45983: CALL_OW 500
// base := GetBase ( base_dep ) ;
45987: LD_ADDR_VAR 0 15
45991: PUSH
45992: LD_VAR 0 1
45996: PPUSH
45997: CALL_OW 274
46001: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46002: LD_ADDR_VAR 0 16
46006: PUSH
46007: LD_VAR 0 1
46011: PPUSH
46012: CALL_OW 255
46016: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46017: LD_ADDR_VAR 0 17
46021: PUSH
46022: LD_VAR 0 1
46026: PPUSH
46027: CALL_OW 248
46031: ST_TO_ADDR
// if sources then
46032: LD_VAR 0 5
46036: IFFALSE 46083
// for i = 1 to 3 do
46038: LD_ADDR_VAR 0 8
46042: PUSH
46043: DOUBLE
46044: LD_INT 1
46046: DEC
46047: ST_TO_ADDR
46048: LD_INT 3
46050: PUSH
46051: FOR_TO
46052: IFFALSE 46081
// AddResourceType ( base , i , sources [ i ] ) ;
46054: LD_VAR 0 15
46058: PPUSH
46059: LD_VAR 0 8
46063: PPUSH
46064: LD_VAR 0 5
46068: PUSH
46069: LD_VAR 0 8
46073: ARRAY
46074: PPUSH
46075: CALL_OW 276
46079: GO 46051
46081: POP
46082: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46083: LD_ADDR_VAR 0 18
46087: PUSH
46088: LD_VAR 0 15
46092: PPUSH
46093: LD_VAR 0 2
46097: PPUSH
46098: LD_INT 1
46100: PPUSH
46101: CALL 45344 0 3
46105: ST_TO_ADDR
// InitHc ;
46106: CALL_OW 19
// InitUc ;
46110: CALL_OW 18
// uc_side := side ;
46114: LD_ADDR_OWVAR 20
46118: PUSH
46119: LD_VAR 0 16
46123: ST_TO_ADDR
// uc_nation := nation ;
46124: LD_ADDR_OWVAR 21
46128: PUSH
46129: LD_VAR 0 17
46133: ST_TO_ADDR
// if buildings then
46134: LD_VAR 0 18
46138: IFFALSE 47460
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46140: LD_ADDR_VAR 0 19
46144: PUSH
46145: LD_VAR 0 18
46149: PPUSH
46150: LD_INT 2
46152: PUSH
46153: LD_INT 30
46155: PUSH
46156: LD_INT 29
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 30
46165: PUSH
46166: LD_INT 30
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: PPUSH
46178: CALL_OW 72
46182: ST_TO_ADDR
// if tmp then
46183: LD_VAR 0 19
46187: IFFALSE 46235
// for i in tmp do
46189: LD_ADDR_VAR 0 8
46193: PUSH
46194: LD_VAR 0 19
46198: PUSH
46199: FOR_IN
46200: IFFALSE 46233
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46202: LD_VAR 0 8
46206: PPUSH
46207: CALL_OW 250
46211: PPUSH
46212: LD_VAR 0 8
46216: PPUSH
46217: CALL_OW 251
46221: PPUSH
46222: LD_VAR 0 16
46226: PPUSH
46227: CALL_OW 441
46231: GO 46199
46233: POP
46234: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46235: LD_VAR 0 18
46239: PPUSH
46240: LD_INT 2
46242: PUSH
46243: LD_INT 30
46245: PUSH
46246: LD_INT 32
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 30
46255: PUSH
46256: LD_INT 33
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: PPUSH
46268: CALL_OW 72
46272: IFFALSE 46360
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46274: LD_ADDR_VAR 0 8
46278: PUSH
46279: LD_VAR 0 18
46283: PPUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 30
46289: PUSH
46290: LD_INT 32
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 30
46299: PUSH
46300: LD_INT 33
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: LIST
46311: PPUSH
46312: CALL_OW 72
46316: PUSH
46317: FOR_IN
46318: IFFALSE 46358
// begin if not GetBWeapon ( i ) then
46320: LD_VAR 0 8
46324: PPUSH
46325: CALL_OW 269
46329: NOT
46330: IFFALSE 46356
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46332: LD_VAR 0 8
46336: PPUSH
46337: LD_VAR 0 8
46341: PPUSH
46342: LD_VAR 0 2
46346: PPUSH
46347: CALL 47606 0 2
46351: PPUSH
46352: CALL_OW 431
// end ;
46356: GO 46317
46358: POP
46359: POP
// end ; for i = 1 to personel do
46360: LD_ADDR_VAR 0 8
46364: PUSH
46365: DOUBLE
46366: LD_INT 1
46368: DEC
46369: ST_TO_ADDR
46370: LD_VAR 0 6
46374: PUSH
46375: FOR_TO
46376: IFFALSE 47440
// begin if i > 4 then
46378: LD_VAR 0 8
46382: PUSH
46383: LD_INT 4
46385: GREATER
46386: IFFALSE 46390
// break ;
46388: GO 47440
// case i of 1 :
46390: LD_VAR 0 8
46394: PUSH
46395: LD_INT 1
46397: DOUBLE
46398: EQUAL
46399: IFTRUE 46403
46401: GO 46483
46403: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46404: LD_ADDR_VAR 0 12
46408: PUSH
46409: LD_VAR 0 18
46413: PPUSH
46414: LD_INT 22
46416: PUSH
46417: LD_VAR 0 16
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 58
46428: PUSH
46429: EMPTY
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 30
46437: PUSH
46438: LD_INT 32
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 30
46447: PUSH
46448: LD_INT 4
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 30
46457: PUSH
46458: LD_INT 5
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: LIST
46475: PPUSH
46476: CALL_OW 72
46480: ST_TO_ADDR
46481: GO 46705
46483: LD_INT 2
46485: DOUBLE
46486: EQUAL
46487: IFTRUE 46491
46489: GO 46553
46491: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46492: LD_ADDR_VAR 0 12
46496: PUSH
46497: LD_VAR 0 18
46501: PPUSH
46502: LD_INT 22
46504: PUSH
46505: LD_VAR 0 16
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: LD_INT 30
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 30
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: LIST
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PPUSH
46546: CALL_OW 72
46550: ST_TO_ADDR
46551: GO 46705
46553: LD_INT 3
46555: DOUBLE
46556: EQUAL
46557: IFTRUE 46561
46559: GO 46623
46561: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46562: LD_ADDR_VAR 0 12
46566: PUSH
46567: LD_VAR 0 18
46571: PPUSH
46572: LD_INT 22
46574: PUSH
46575: LD_VAR 0 16
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: LD_INT 30
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 30
46599: PUSH
46600: LD_INT 3
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PPUSH
46616: CALL_OW 72
46620: ST_TO_ADDR
46621: GO 46705
46623: LD_INT 4
46625: DOUBLE
46626: EQUAL
46627: IFTRUE 46631
46629: GO 46704
46631: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46632: LD_ADDR_VAR 0 12
46636: PUSH
46637: LD_VAR 0 18
46641: PPUSH
46642: LD_INT 22
46644: PUSH
46645: LD_VAR 0 16
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: LD_INT 30
46659: PUSH
46660: LD_INT 6
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 30
46669: PUSH
46670: LD_INT 7
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 30
46679: PUSH
46680: LD_INT 8
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PPUSH
46697: CALL_OW 72
46701: ST_TO_ADDR
46702: GO 46705
46704: POP
// if i = 1 then
46705: LD_VAR 0 8
46709: PUSH
46710: LD_INT 1
46712: EQUAL
46713: IFFALSE 46824
// begin tmp := [ ] ;
46715: LD_ADDR_VAR 0 19
46719: PUSH
46720: EMPTY
46721: ST_TO_ADDR
// for j in f do
46722: LD_ADDR_VAR 0 9
46726: PUSH
46727: LD_VAR 0 12
46731: PUSH
46732: FOR_IN
46733: IFFALSE 46806
// if GetBType ( j ) = b_bunker then
46735: LD_VAR 0 9
46739: PPUSH
46740: CALL_OW 266
46744: PUSH
46745: LD_INT 32
46747: EQUAL
46748: IFFALSE 46775
// tmp := Insert ( tmp , 1 , j ) else
46750: LD_ADDR_VAR 0 19
46754: PUSH
46755: LD_VAR 0 19
46759: PPUSH
46760: LD_INT 1
46762: PPUSH
46763: LD_VAR 0 9
46767: PPUSH
46768: CALL_OW 2
46772: ST_TO_ADDR
46773: GO 46804
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46775: LD_ADDR_VAR 0 19
46779: PUSH
46780: LD_VAR 0 19
46784: PPUSH
46785: LD_VAR 0 19
46789: PUSH
46790: LD_INT 1
46792: PLUS
46793: PPUSH
46794: LD_VAR 0 9
46798: PPUSH
46799: CALL_OW 2
46803: ST_TO_ADDR
46804: GO 46732
46806: POP
46807: POP
// if tmp then
46808: LD_VAR 0 19
46812: IFFALSE 46824
// f := tmp ;
46814: LD_ADDR_VAR 0 12
46818: PUSH
46819: LD_VAR 0 19
46823: ST_TO_ADDR
// end ; x := personel [ i ] ;
46824: LD_ADDR_VAR 0 13
46828: PUSH
46829: LD_VAR 0 6
46833: PUSH
46834: LD_VAR 0 8
46838: ARRAY
46839: ST_TO_ADDR
// if x = - 1 then
46840: LD_VAR 0 13
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: EQUAL
46849: IFFALSE 47058
// begin for j in f do
46851: LD_ADDR_VAR 0 9
46855: PUSH
46856: LD_VAR 0 12
46860: PUSH
46861: FOR_IN
46862: IFFALSE 47054
// repeat InitHc ;
46864: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46868: LD_VAR 0 9
46872: PPUSH
46873: CALL_OW 266
46877: PUSH
46878: LD_INT 5
46880: EQUAL
46881: IFFALSE 46951
// begin if UnitsInside ( j ) < 3 then
46883: LD_VAR 0 9
46887: PPUSH
46888: CALL_OW 313
46892: PUSH
46893: LD_INT 3
46895: LESS
46896: IFFALSE 46932
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46898: LD_INT 0
46900: PPUSH
46901: LD_INT 5
46903: PUSH
46904: LD_INT 8
46906: PUSH
46907: LD_INT 9
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: PUSH
46915: LD_VAR 0 17
46919: ARRAY
46920: PPUSH
46921: LD_VAR 0 4
46925: PPUSH
46926: CALL_OW 380
46930: GO 46949
// PrepareHuman ( false , i , skill ) ;
46932: LD_INT 0
46934: PPUSH
46935: LD_VAR 0 8
46939: PPUSH
46940: LD_VAR 0 4
46944: PPUSH
46945: CALL_OW 380
// end else
46949: GO 46968
// PrepareHuman ( false , i , skill ) ;
46951: LD_INT 0
46953: PPUSH
46954: LD_VAR 0 8
46958: PPUSH
46959: LD_VAR 0 4
46963: PPUSH
46964: CALL_OW 380
// un := CreateHuman ;
46968: LD_ADDR_VAR 0 14
46972: PUSH
46973: CALL_OW 44
46977: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46978: LD_ADDR_VAR 0 7
46982: PUSH
46983: LD_VAR 0 7
46987: PPUSH
46988: LD_INT 1
46990: PPUSH
46991: LD_VAR 0 14
46995: PPUSH
46996: CALL_OW 2
47000: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47001: LD_VAR 0 14
47005: PPUSH
47006: LD_VAR 0 9
47010: PPUSH
47011: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47015: LD_VAR 0 9
47019: PPUSH
47020: CALL_OW 313
47024: PUSH
47025: LD_INT 6
47027: EQUAL
47028: PUSH
47029: LD_VAR 0 9
47033: PPUSH
47034: CALL_OW 266
47038: PUSH
47039: LD_INT 32
47041: PUSH
47042: LD_INT 31
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: IN
47049: OR
47050: IFFALSE 46864
47052: GO 46861
47054: POP
47055: POP
// end else
47056: GO 47438
// for j = 1 to x do
47058: LD_ADDR_VAR 0 9
47062: PUSH
47063: DOUBLE
47064: LD_INT 1
47066: DEC
47067: ST_TO_ADDR
47068: LD_VAR 0 13
47072: PUSH
47073: FOR_TO
47074: IFFALSE 47436
// begin InitHc ;
47076: CALL_OW 19
// if not f then
47080: LD_VAR 0 12
47084: NOT
47085: IFFALSE 47174
// begin PrepareHuman ( false , i , skill ) ;
47087: LD_INT 0
47089: PPUSH
47090: LD_VAR 0 8
47094: PPUSH
47095: LD_VAR 0 4
47099: PPUSH
47100: CALL_OW 380
// un := CreateHuman ;
47104: LD_ADDR_VAR 0 14
47108: PUSH
47109: CALL_OW 44
47113: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47114: LD_ADDR_VAR 0 7
47118: PUSH
47119: LD_VAR 0 7
47123: PPUSH
47124: LD_INT 1
47126: PPUSH
47127: LD_VAR 0 14
47131: PPUSH
47132: CALL_OW 2
47136: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47137: LD_VAR 0 14
47141: PPUSH
47142: LD_VAR 0 1
47146: PPUSH
47147: CALL_OW 250
47151: PPUSH
47152: LD_VAR 0 1
47156: PPUSH
47157: CALL_OW 251
47161: PPUSH
47162: LD_INT 10
47164: PPUSH
47165: LD_INT 0
47167: PPUSH
47168: CALL_OW 50
// continue ;
47172: GO 47073
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47174: LD_VAR 0 12
47178: PUSH
47179: LD_INT 1
47181: ARRAY
47182: PPUSH
47183: CALL_OW 313
47187: PUSH
47188: LD_VAR 0 12
47192: PUSH
47193: LD_INT 1
47195: ARRAY
47196: PPUSH
47197: CALL_OW 266
47201: PUSH
47202: LD_INT 32
47204: PUSH
47205: LD_INT 31
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: IN
47212: AND
47213: PUSH
47214: LD_VAR 0 12
47218: PUSH
47219: LD_INT 1
47221: ARRAY
47222: PPUSH
47223: CALL_OW 313
47227: PUSH
47228: LD_INT 6
47230: EQUAL
47231: OR
47232: IFFALSE 47252
// f := Delete ( f , 1 ) ;
47234: LD_ADDR_VAR 0 12
47238: PUSH
47239: LD_VAR 0 12
47243: PPUSH
47244: LD_INT 1
47246: PPUSH
47247: CALL_OW 3
47251: ST_TO_ADDR
// if not f then
47252: LD_VAR 0 12
47256: NOT
47257: IFFALSE 47275
// begin x := x + 2 ;
47259: LD_ADDR_VAR 0 13
47263: PUSH
47264: LD_VAR 0 13
47268: PUSH
47269: LD_INT 2
47271: PLUS
47272: ST_TO_ADDR
// continue ;
47273: GO 47073
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47275: LD_VAR 0 12
47279: PUSH
47280: LD_INT 1
47282: ARRAY
47283: PPUSH
47284: CALL_OW 266
47288: PUSH
47289: LD_INT 5
47291: EQUAL
47292: IFFALSE 47366
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47294: LD_VAR 0 12
47298: PUSH
47299: LD_INT 1
47301: ARRAY
47302: PPUSH
47303: CALL_OW 313
47307: PUSH
47308: LD_INT 3
47310: LESS
47311: IFFALSE 47347
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47313: LD_INT 0
47315: PPUSH
47316: LD_INT 5
47318: PUSH
47319: LD_INT 8
47321: PUSH
47322: LD_INT 9
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: PUSH
47330: LD_VAR 0 17
47334: ARRAY
47335: PPUSH
47336: LD_VAR 0 4
47340: PPUSH
47341: CALL_OW 380
47345: GO 47364
// PrepareHuman ( false , i , skill ) ;
47347: LD_INT 0
47349: PPUSH
47350: LD_VAR 0 8
47354: PPUSH
47355: LD_VAR 0 4
47359: PPUSH
47360: CALL_OW 380
// end else
47364: GO 47383
// PrepareHuman ( false , i , skill ) ;
47366: LD_INT 0
47368: PPUSH
47369: LD_VAR 0 8
47373: PPUSH
47374: LD_VAR 0 4
47378: PPUSH
47379: CALL_OW 380
// un := CreateHuman ;
47383: LD_ADDR_VAR 0 14
47387: PUSH
47388: CALL_OW 44
47392: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47393: LD_ADDR_VAR 0 7
47397: PUSH
47398: LD_VAR 0 7
47402: PPUSH
47403: LD_INT 1
47405: PPUSH
47406: LD_VAR 0 14
47410: PPUSH
47411: CALL_OW 2
47415: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47416: LD_VAR 0 14
47420: PPUSH
47421: LD_VAR 0 12
47425: PUSH
47426: LD_INT 1
47428: ARRAY
47429: PPUSH
47430: CALL_OW 52
// end ;
47434: GO 47073
47436: POP
47437: POP
// end ;
47438: GO 46375
47440: POP
47441: POP
// result := result ^ buildings ;
47442: LD_ADDR_VAR 0 7
47446: PUSH
47447: LD_VAR 0 7
47451: PUSH
47452: LD_VAR 0 18
47456: ADD
47457: ST_TO_ADDR
// end else
47458: GO 47601
// begin for i = 1 to personel do
47460: LD_ADDR_VAR 0 8
47464: PUSH
47465: DOUBLE
47466: LD_INT 1
47468: DEC
47469: ST_TO_ADDR
47470: LD_VAR 0 6
47474: PUSH
47475: FOR_TO
47476: IFFALSE 47599
// begin if i > 4 then
47478: LD_VAR 0 8
47482: PUSH
47483: LD_INT 4
47485: GREATER
47486: IFFALSE 47490
// break ;
47488: GO 47599
// x := personel [ i ] ;
47490: LD_ADDR_VAR 0 13
47494: PUSH
47495: LD_VAR 0 6
47499: PUSH
47500: LD_VAR 0 8
47504: ARRAY
47505: ST_TO_ADDR
// if x = - 1 then
47506: LD_VAR 0 13
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: EQUAL
47515: IFFALSE 47519
// continue ;
47517: GO 47475
// PrepareHuman ( false , i , skill ) ;
47519: LD_INT 0
47521: PPUSH
47522: LD_VAR 0 8
47526: PPUSH
47527: LD_VAR 0 4
47531: PPUSH
47532: CALL_OW 380
// un := CreateHuman ;
47536: LD_ADDR_VAR 0 14
47540: PUSH
47541: CALL_OW 44
47545: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47546: LD_VAR 0 14
47550: PPUSH
47551: LD_VAR 0 1
47555: PPUSH
47556: CALL_OW 250
47560: PPUSH
47561: LD_VAR 0 1
47565: PPUSH
47566: CALL_OW 251
47570: PPUSH
47571: LD_INT 10
47573: PPUSH
47574: LD_INT 0
47576: PPUSH
47577: CALL_OW 50
// result := result ^ un ;
47581: LD_ADDR_VAR 0 7
47585: PUSH
47586: LD_VAR 0 7
47590: PUSH
47591: LD_VAR 0 14
47595: ADD
47596: ST_TO_ADDR
// end ;
47597: GO 47475
47599: POP
47600: POP
// end ; end ;
47601: LD_VAR 0 7
47605: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47606: LD_INT 0
47608: PPUSH
47609: PPUSH
47610: PPUSH
47611: PPUSH
47612: PPUSH
47613: PPUSH
47614: PPUSH
47615: PPUSH
47616: PPUSH
47617: PPUSH
47618: PPUSH
47619: PPUSH
47620: PPUSH
47621: PPUSH
47622: PPUSH
47623: PPUSH
// result := false ;
47624: LD_ADDR_VAR 0 3
47628: PUSH
47629: LD_INT 0
47631: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47632: LD_VAR 0 1
47636: NOT
47637: PUSH
47638: LD_VAR 0 1
47642: PPUSH
47643: CALL_OW 266
47647: PUSH
47648: LD_INT 32
47650: PUSH
47651: LD_INT 33
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: IN
47658: NOT
47659: OR
47660: IFFALSE 47664
// exit ;
47662: GO 48773
// nat := GetNation ( tower ) ;
47664: LD_ADDR_VAR 0 12
47668: PUSH
47669: LD_VAR 0 1
47673: PPUSH
47674: CALL_OW 248
47678: ST_TO_ADDR
// side := GetSide ( tower ) ;
47679: LD_ADDR_VAR 0 16
47683: PUSH
47684: LD_VAR 0 1
47688: PPUSH
47689: CALL_OW 255
47693: ST_TO_ADDR
// x := GetX ( tower ) ;
47694: LD_ADDR_VAR 0 10
47698: PUSH
47699: LD_VAR 0 1
47703: PPUSH
47704: CALL_OW 250
47708: ST_TO_ADDR
// y := GetY ( tower ) ;
47709: LD_ADDR_VAR 0 11
47713: PUSH
47714: LD_VAR 0 1
47718: PPUSH
47719: CALL_OW 251
47723: ST_TO_ADDR
// if not x or not y then
47724: LD_VAR 0 10
47728: NOT
47729: PUSH
47730: LD_VAR 0 11
47734: NOT
47735: OR
47736: IFFALSE 47740
// exit ;
47738: GO 48773
// weapon := 0 ;
47740: LD_ADDR_VAR 0 18
47744: PUSH
47745: LD_INT 0
47747: ST_TO_ADDR
// fac_list := [ ] ;
47748: LD_ADDR_VAR 0 17
47752: PUSH
47753: EMPTY
47754: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47755: LD_ADDR_VAR 0 6
47759: PUSH
47760: LD_VAR 0 1
47764: PPUSH
47765: CALL_OW 274
47769: PPUSH
47770: LD_VAR 0 2
47774: PPUSH
47775: LD_INT 0
47777: PPUSH
47778: CALL 45344 0 3
47782: PPUSH
47783: LD_INT 30
47785: PUSH
47786: LD_INT 3
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PPUSH
47793: CALL_OW 72
47797: ST_TO_ADDR
// if not factories then
47798: LD_VAR 0 6
47802: NOT
47803: IFFALSE 47807
// exit ;
47805: GO 48773
// for i in factories do
47807: LD_ADDR_VAR 0 8
47811: PUSH
47812: LD_VAR 0 6
47816: PUSH
47817: FOR_IN
47818: IFFALSE 47843
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47820: LD_ADDR_VAR 0 17
47824: PUSH
47825: LD_VAR 0 17
47829: PUSH
47830: LD_VAR 0 8
47834: PPUSH
47835: CALL_OW 478
47839: UNION
47840: ST_TO_ADDR
47841: GO 47817
47843: POP
47844: POP
// if not fac_list then
47845: LD_VAR 0 17
47849: NOT
47850: IFFALSE 47854
// exit ;
47852: GO 48773
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47854: LD_ADDR_VAR 0 5
47858: PUSH
47859: LD_INT 4
47861: PUSH
47862: LD_INT 5
47864: PUSH
47865: LD_INT 9
47867: PUSH
47868: LD_INT 10
47870: PUSH
47871: LD_INT 6
47873: PUSH
47874: LD_INT 7
47876: PUSH
47877: LD_INT 11
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 27
47891: PUSH
47892: LD_INT 28
47894: PUSH
47895: LD_INT 26
47897: PUSH
47898: LD_INT 30
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 43
47909: PUSH
47910: LD_INT 44
47912: PUSH
47913: LD_INT 46
47915: PUSH
47916: LD_INT 45
47918: PUSH
47919: LD_INT 47
47921: PUSH
47922: LD_INT 49
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: PUSH
47938: LD_VAR 0 12
47942: ARRAY
47943: ST_TO_ADDR
// list := list isect fac_list ;
47944: LD_ADDR_VAR 0 5
47948: PUSH
47949: LD_VAR 0 5
47953: PUSH
47954: LD_VAR 0 17
47958: ISECT
47959: ST_TO_ADDR
// if not list then
47960: LD_VAR 0 5
47964: NOT
47965: IFFALSE 47969
// exit ;
47967: GO 48773
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47969: LD_VAR 0 12
47973: PUSH
47974: LD_INT 3
47976: EQUAL
47977: PUSH
47978: LD_INT 49
47980: PUSH
47981: LD_VAR 0 5
47985: IN
47986: AND
47987: PUSH
47988: LD_INT 31
47990: PPUSH
47991: LD_VAR 0 16
47995: PPUSH
47996: CALL_OW 321
48000: PUSH
48001: LD_INT 2
48003: EQUAL
48004: AND
48005: IFFALSE 48065
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48007: LD_INT 22
48009: PUSH
48010: LD_VAR 0 16
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 35
48021: PUSH
48022: LD_INT 49
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 91
48031: PUSH
48032: LD_VAR 0 1
48036: PUSH
48037: LD_INT 10
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: LIST
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: LIST
48049: PPUSH
48050: CALL_OW 69
48054: NOT
48055: IFFALSE 48065
// weapon := ru_time_lapser ;
48057: LD_ADDR_VAR 0 18
48061: PUSH
48062: LD_INT 49
48064: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48065: LD_VAR 0 12
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: IN
48080: PUSH
48081: LD_INT 11
48083: PUSH
48084: LD_VAR 0 5
48088: IN
48089: PUSH
48090: LD_INT 30
48092: PUSH
48093: LD_VAR 0 5
48097: IN
48098: OR
48099: AND
48100: PUSH
48101: LD_INT 6
48103: PPUSH
48104: LD_VAR 0 16
48108: PPUSH
48109: CALL_OW 321
48113: PUSH
48114: LD_INT 2
48116: EQUAL
48117: AND
48118: IFFALSE 48283
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48120: LD_INT 22
48122: PUSH
48123: LD_VAR 0 16
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 35
48137: PUSH
48138: LD_INT 11
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 35
48147: PUSH
48148: LD_INT 30
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 91
48162: PUSH
48163: LD_VAR 0 1
48167: PUSH
48168: LD_INT 18
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: LIST
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: LIST
48180: PPUSH
48181: CALL_OW 69
48185: NOT
48186: PUSH
48187: LD_INT 22
48189: PUSH
48190: LD_VAR 0 16
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 30
48204: PUSH
48205: LD_INT 32
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 30
48214: PUSH
48215: LD_INT 33
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 91
48229: PUSH
48230: LD_VAR 0 1
48234: PUSH
48235: LD_INT 12
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: PUSH
48248: EMPTY
48249: LIST
48250: PPUSH
48251: CALL_OW 69
48255: PUSH
48256: LD_INT 2
48258: GREATER
48259: AND
48260: IFFALSE 48283
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48262: LD_ADDR_VAR 0 18
48266: PUSH
48267: LD_INT 11
48269: PUSH
48270: LD_INT 30
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_VAR 0 12
48281: ARRAY
48282: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48283: LD_VAR 0 18
48287: NOT
48288: PUSH
48289: LD_INT 40
48291: PPUSH
48292: LD_VAR 0 16
48296: PPUSH
48297: CALL_OW 321
48301: PUSH
48302: LD_INT 2
48304: EQUAL
48305: AND
48306: PUSH
48307: LD_INT 7
48309: PUSH
48310: LD_VAR 0 5
48314: IN
48315: PUSH
48316: LD_INT 28
48318: PUSH
48319: LD_VAR 0 5
48323: IN
48324: OR
48325: PUSH
48326: LD_INT 45
48328: PUSH
48329: LD_VAR 0 5
48333: IN
48334: OR
48335: AND
48336: IFFALSE 48590
// begin hex := GetHexInfo ( x , y ) ;
48338: LD_ADDR_VAR 0 4
48342: PUSH
48343: LD_VAR 0 10
48347: PPUSH
48348: LD_VAR 0 11
48352: PPUSH
48353: CALL_OW 546
48357: ST_TO_ADDR
// if hex [ 1 ] then
48358: LD_VAR 0 4
48362: PUSH
48363: LD_INT 1
48365: ARRAY
48366: IFFALSE 48370
// exit ;
48368: GO 48773
// height := hex [ 2 ] ;
48370: LD_ADDR_VAR 0 15
48374: PUSH
48375: LD_VAR 0 4
48379: PUSH
48380: LD_INT 2
48382: ARRAY
48383: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48384: LD_ADDR_VAR 0 14
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: LD_INT 5
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: ST_TO_ADDR
// for i in tmp do
48407: LD_ADDR_VAR 0 8
48411: PUSH
48412: LD_VAR 0 14
48416: PUSH
48417: FOR_IN
48418: IFFALSE 48588
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48420: LD_ADDR_VAR 0 9
48424: PUSH
48425: LD_VAR 0 10
48429: PPUSH
48430: LD_VAR 0 8
48434: PPUSH
48435: LD_INT 5
48437: PPUSH
48438: CALL_OW 272
48442: PUSH
48443: LD_VAR 0 11
48447: PPUSH
48448: LD_VAR 0 8
48452: PPUSH
48453: LD_INT 5
48455: PPUSH
48456: CALL_OW 273
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48465: LD_VAR 0 9
48469: PUSH
48470: LD_INT 1
48472: ARRAY
48473: PPUSH
48474: LD_VAR 0 9
48478: PUSH
48479: LD_INT 2
48481: ARRAY
48482: PPUSH
48483: CALL_OW 488
48487: IFFALSE 48586
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48489: LD_ADDR_VAR 0 4
48493: PUSH
48494: LD_VAR 0 9
48498: PUSH
48499: LD_INT 1
48501: ARRAY
48502: PPUSH
48503: LD_VAR 0 9
48507: PUSH
48508: LD_INT 2
48510: ARRAY
48511: PPUSH
48512: CALL_OW 546
48516: ST_TO_ADDR
// if hex [ 1 ] then
48517: LD_VAR 0 4
48521: PUSH
48522: LD_INT 1
48524: ARRAY
48525: IFFALSE 48529
// continue ;
48527: GO 48417
// h := hex [ 2 ] ;
48529: LD_ADDR_VAR 0 13
48533: PUSH
48534: LD_VAR 0 4
48538: PUSH
48539: LD_INT 2
48541: ARRAY
48542: ST_TO_ADDR
// if h + 7 < height then
48543: LD_VAR 0 13
48547: PUSH
48548: LD_INT 7
48550: PLUS
48551: PUSH
48552: LD_VAR 0 15
48556: LESS
48557: IFFALSE 48586
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48559: LD_ADDR_VAR 0 18
48563: PUSH
48564: LD_INT 7
48566: PUSH
48567: LD_INT 28
48569: PUSH
48570: LD_INT 45
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: PUSH
48578: LD_VAR 0 12
48582: ARRAY
48583: ST_TO_ADDR
// break ;
48584: GO 48588
// end ; end ; end ;
48586: GO 48417
48588: POP
48589: POP
// end ; if not weapon then
48590: LD_VAR 0 18
48594: NOT
48595: IFFALSE 48655
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48597: LD_ADDR_VAR 0 5
48601: PUSH
48602: LD_VAR 0 5
48606: PUSH
48607: LD_INT 11
48609: PUSH
48610: LD_INT 30
48612: PUSH
48613: LD_INT 49
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: DIFF
48621: ST_TO_ADDR
// if not list then
48622: LD_VAR 0 5
48626: NOT
48627: IFFALSE 48631
// exit ;
48629: GO 48773
// weapon := list [ rand ( 1 , list ) ] ;
48631: LD_ADDR_VAR 0 18
48635: PUSH
48636: LD_VAR 0 5
48640: PUSH
48641: LD_INT 1
48643: PPUSH
48644: LD_VAR 0 5
48648: PPUSH
48649: CALL_OW 12
48653: ARRAY
48654: ST_TO_ADDR
// end ; if weapon then
48655: LD_VAR 0 18
48659: IFFALSE 48773
// begin tmp := CostOfWeapon ( weapon ) ;
48661: LD_ADDR_VAR 0 14
48665: PUSH
48666: LD_VAR 0 18
48670: PPUSH
48671: CALL_OW 451
48675: ST_TO_ADDR
// j := GetBase ( tower ) ;
48676: LD_ADDR_VAR 0 9
48680: PUSH
48681: LD_VAR 0 1
48685: PPUSH
48686: CALL_OW 274
48690: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48691: LD_VAR 0 9
48695: PPUSH
48696: LD_INT 1
48698: PPUSH
48699: CALL_OW 275
48703: PUSH
48704: LD_VAR 0 14
48708: PUSH
48709: LD_INT 1
48711: ARRAY
48712: GREATEREQUAL
48713: PUSH
48714: LD_VAR 0 9
48718: PPUSH
48719: LD_INT 2
48721: PPUSH
48722: CALL_OW 275
48726: PUSH
48727: LD_VAR 0 14
48731: PUSH
48732: LD_INT 2
48734: ARRAY
48735: GREATEREQUAL
48736: AND
48737: PUSH
48738: LD_VAR 0 9
48742: PPUSH
48743: LD_INT 3
48745: PPUSH
48746: CALL_OW 275
48750: PUSH
48751: LD_VAR 0 14
48755: PUSH
48756: LD_INT 3
48758: ARRAY
48759: GREATEREQUAL
48760: AND
48761: IFFALSE 48773
// result := weapon ;
48763: LD_ADDR_VAR 0 3
48767: PUSH
48768: LD_VAR 0 18
48772: ST_TO_ADDR
// end ; end ;
48773: LD_VAR 0 3
48777: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48778: LD_INT 0
48780: PPUSH
48781: PPUSH
// result := true ;
48782: LD_ADDR_VAR 0 3
48786: PUSH
48787: LD_INT 1
48789: ST_TO_ADDR
// if array1 = array2 then
48790: LD_VAR 0 1
48794: PUSH
48795: LD_VAR 0 2
48799: EQUAL
48800: IFFALSE 48860
// begin for i = 1 to array1 do
48802: LD_ADDR_VAR 0 4
48806: PUSH
48807: DOUBLE
48808: LD_INT 1
48810: DEC
48811: ST_TO_ADDR
48812: LD_VAR 0 1
48816: PUSH
48817: FOR_TO
48818: IFFALSE 48856
// if array1 [ i ] <> array2 [ i ] then
48820: LD_VAR 0 1
48824: PUSH
48825: LD_VAR 0 4
48829: ARRAY
48830: PUSH
48831: LD_VAR 0 2
48835: PUSH
48836: LD_VAR 0 4
48840: ARRAY
48841: NONEQUAL
48842: IFFALSE 48854
// begin result := false ;
48844: LD_ADDR_VAR 0 3
48848: PUSH
48849: LD_INT 0
48851: ST_TO_ADDR
// break ;
48852: GO 48856
// end ;
48854: GO 48817
48856: POP
48857: POP
// end else
48858: GO 48868
// result := false ;
48860: LD_ADDR_VAR 0 3
48864: PUSH
48865: LD_INT 0
48867: ST_TO_ADDR
// end ;
48868: LD_VAR 0 3
48872: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48873: LD_INT 0
48875: PPUSH
48876: PPUSH
// if not array1 or not array2 then
48877: LD_VAR 0 1
48881: NOT
48882: PUSH
48883: LD_VAR 0 2
48887: NOT
48888: OR
48889: IFFALSE 48893
// exit ;
48891: GO 48957
// result := true ;
48893: LD_ADDR_VAR 0 3
48897: PUSH
48898: LD_INT 1
48900: ST_TO_ADDR
// for i = 1 to array1 do
48901: LD_ADDR_VAR 0 4
48905: PUSH
48906: DOUBLE
48907: LD_INT 1
48909: DEC
48910: ST_TO_ADDR
48911: LD_VAR 0 1
48915: PUSH
48916: FOR_TO
48917: IFFALSE 48955
// if array1 [ i ] <> array2 [ i ] then
48919: LD_VAR 0 1
48923: PUSH
48924: LD_VAR 0 4
48928: ARRAY
48929: PUSH
48930: LD_VAR 0 2
48934: PUSH
48935: LD_VAR 0 4
48939: ARRAY
48940: NONEQUAL
48941: IFFALSE 48953
// begin result := false ;
48943: LD_ADDR_VAR 0 3
48947: PUSH
48948: LD_INT 0
48950: ST_TO_ADDR
// break ;
48951: GO 48955
// end ;
48953: GO 48916
48955: POP
48956: POP
// end ;
48957: LD_VAR 0 3
48961: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48962: LD_INT 0
48964: PPUSH
48965: PPUSH
48966: PPUSH
// pom := GetBase ( fac ) ;
48967: LD_ADDR_VAR 0 5
48971: PUSH
48972: LD_VAR 0 1
48976: PPUSH
48977: CALL_OW 274
48981: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48982: LD_ADDR_VAR 0 4
48986: PUSH
48987: LD_VAR 0 2
48991: PUSH
48992: LD_INT 1
48994: ARRAY
48995: PPUSH
48996: LD_VAR 0 2
49000: PUSH
49001: LD_INT 2
49003: ARRAY
49004: PPUSH
49005: LD_VAR 0 2
49009: PUSH
49010: LD_INT 3
49012: ARRAY
49013: PPUSH
49014: LD_VAR 0 2
49018: PUSH
49019: LD_INT 4
49021: ARRAY
49022: PPUSH
49023: CALL_OW 449
49027: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49028: LD_ADDR_VAR 0 3
49032: PUSH
49033: LD_VAR 0 5
49037: PPUSH
49038: LD_INT 1
49040: PPUSH
49041: CALL_OW 275
49045: PUSH
49046: LD_VAR 0 4
49050: PUSH
49051: LD_INT 1
49053: ARRAY
49054: GREATEREQUAL
49055: PUSH
49056: LD_VAR 0 5
49060: PPUSH
49061: LD_INT 2
49063: PPUSH
49064: CALL_OW 275
49068: PUSH
49069: LD_VAR 0 4
49073: PUSH
49074: LD_INT 2
49076: ARRAY
49077: GREATEREQUAL
49078: AND
49079: PUSH
49080: LD_VAR 0 5
49084: PPUSH
49085: LD_INT 3
49087: PPUSH
49088: CALL_OW 275
49092: PUSH
49093: LD_VAR 0 4
49097: PUSH
49098: LD_INT 3
49100: ARRAY
49101: GREATEREQUAL
49102: AND
49103: ST_TO_ADDR
// end ;
49104: LD_VAR 0 3
49108: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49109: LD_INT 0
49111: PPUSH
49112: PPUSH
49113: PPUSH
49114: PPUSH
// pom := GetBase ( building ) ;
49115: LD_ADDR_VAR 0 3
49119: PUSH
49120: LD_VAR 0 1
49124: PPUSH
49125: CALL_OW 274
49129: ST_TO_ADDR
// if not pom then
49130: LD_VAR 0 3
49134: NOT
49135: IFFALSE 49139
// exit ;
49137: GO 49309
// btype := GetBType ( building ) ;
49139: LD_ADDR_VAR 0 5
49143: PUSH
49144: LD_VAR 0 1
49148: PPUSH
49149: CALL_OW 266
49153: ST_TO_ADDR
// if btype = b_armoury then
49154: LD_VAR 0 5
49158: PUSH
49159: LD_INT 4
49161: EQUAL
49162: IFFALSE 49172
// btype := b_barracks ;
49164: LD_ADDR_VAR 0 5
49168: PUSH
49169: LD_INT 5
49171: ST_TO_ADDR
// if btype = b_depot then
49172: LD_VAR 0 5
49176: PUSH
49177: LD_INT 0
49179: EQUAL
49180: IFFALSE 49190
// btype := b_warehouse ;
49182: LD_ADDR_VAR 0 5
49186: PUSH
49187: LD_INT 1
49189: ST_TO_ADDR
// if btype = b_workshop then
49190: LD_VAR 0 5
49194: PUSH
49195: LD_INT 2
49197: EQUAL
49198: IFFALSE 49208
// btype := b_factory ;
49200: LD_ADDR_VAR 0 5
49204: PUSH
49205: LD_INT 3
49207: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49208: LD_ADDR_VAR 0 4
49212: PUSH
49213: LD_VAR 0 5
49217: PPUSH
49218: LD_VAR 0 1
49222: PPUSH
49223: CALL_OW 248
49227: PPUSH
49228: CALL_OW 450
49232: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49233: LD_ADDR_VAR 0 2
49237: PUSH
49238: LD_VAR 0 3
49242: PPUSH
49243: LD_INT 1
49245: PPUSH
49246: CALL_OW 275
49250: PUSH
49251: LD_VAR 0 4
49255: PUSH
49256: LD_INT 1
49258: ARRAY
49259: GREATEREQUAL
49260: PUSH
49261: LD_VAR 0 3
49265: PPUSH
49266: LD_INT 2
49268: PPUSH
49269: CALL_OW 275
49273: PUSH
49274: LD_VAR 0 4
49278: PUSH
49279: LD_INT 2
49281: ARRAY
49282: GREATEREQUAL
49283: AND
49284: PUSH
49285: LD_VAR 0 3
49289: PPUSH
49290: LD_INT 3
49292: PPUSH
49293: CALL_OW 275
49297: PUSH
49298: LD_VAR 0 4
49302: PUSH
49303: LD_INT 3
49305: ARRAY
49306: GREATEREQUAL
49307: AND
49308: ST_TO_ADDR
// end ;
49309: LD_VAR 0 2
49313: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49314: LD_INT 0
49316: PPUSH
49317: PPUSH
49318: PPUSH
// pom := GetBase ( building ) ;
49319: LD_ADDR_VAR 0 4
49323: PUSH
49324: LD_VAR 0 1
49328: PPUSH
49329: CALL_OW 274
49333: ST_TO_ADDR
// if not pom then
49334: LD_VAR 0 4
49338: NOT
49339: IFFALSE 49343
// exit ;
49341: GO 49444
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49343: LD_ADDR_VAR 0 5
49347: PUSH
49348: LD_VAR 0 2
49352: PPUSH
49353: LD_VAR 0 1
49357: PPUSH
49358: CALL_OW 248
49362: PPUSH
49363: CALL_OW 450
49367: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49368: LD_ADDR_VAR 0 3
49372: PUSH
49373: LD_VAR 0 4
49377: PPUSH
49378: LD_INT 1
49380: PPUSH
49381: CALL_OW 275
49385: PUSH
49386: LD_VAR 0 5
49390: PUSH
49391: LD_INT 1
49393: ARRAY
49394: GREATEREQUAL
49395: PUSH
49396: LD_VAR 0 4
49400: PPUSH
49401: LD_INT 2
49403: PPUSH
49404: CALL_OW 275
49408: PUSH
49409: LD_VAR 0 5
49413: PUSH
49414: LD_INT 2
49416: ARRAY
49417: GREATEREQUAL
49418: AND
49419: PUSH
49420: LD_VAR 0 4
49424: PPUSH
49425: LD_INT 3
49427: PPUSH
49428: CALL_OW 275
49432: PUSH
49433: LD_VAR 0 5
49437: PUSH
49438: LD_INT 3
49440: ARRAY
49441: GREATEREQUAL
49442: AND
49443: ST_TO_ADDR
// end ;
49444: LD_VAR 0 3
49448: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49449: LD_INT 0
49451: PPUSH
49452: PPUSH
49453: PPUSH
49454: PPUSH
49455: PPUSH
49456: PPUSH
49457: PPUSH
49458: PPUSH
49459: PPUSH
49460: PPUSH
49461: PPUSH
// result := false ;
49462: LD_ADDR_VAR 0 8
49466: PUSH
49467: LD_INT 0
49469: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49470: LD_VAR 0 5
49474: NOT
49475: PUSH
49476: LD_VAR 0 1
49480: NOT
49481: OR
49482: PUSH
49483: LD_VAR 0 2
49487: NOT
49488: OR
49489: PUSH
49490: LD_VAR 0 3
49494: NOT
49495: OR
49496: IFFALSE 49500
// exit ;
49498: GO 50314
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49500: LD_ADDR_VAR 0 14
49504: PUSH
49505: LD_VAR 0 1
49509: PPUSH
49510: LD_VAR 0 2
49514: PPUSH
49515: LD_VAR 0 3
49519: PPUSH
49520: LD_VAR 0 4
49524: PPUSH
49525: LD_VAR 0 5
49529: PUSH
49530: LD_INT 1
49532: ARRAY
49533: PPUSH
49534: CALL_OW 248
49538: PPUSH
49539: LD_INT 0
49541: PPUSH
49542: CALL 51567 0 6
49546: ST_TO_ADDR
// if not hexes then
49547: LD_VAR 0 14
49551: NOT
49552: IFFALSE 49556
// exit ;
49554: GO 50314
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49556: LD_ADDR_VAR 0 17
49560: PUSH
49561: LD_VAR 0 5
49565: PPUSH
49566: LD_INT 22
49568: PUSH
49569: LD_VAR 0 13
49573: PPUSH
49574: CALL_OW 255
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: LD_INT 30
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 30
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: LIST
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PPUSH
49615: CALL_OW 72
49619: ST_TO_ADDR
// for i = 1 to hexes do
49620: LD_ADDR_VAR 0 9
49624: PUSH
49625: DOUBLE
49626: LD_INT 1
49628: DEC
49629: ST_TO_ADDR
49630: LD_VAR 0 14
49634: PUSH
49635: FOR_TO
49636: IFFALSE 50312
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49638: LD_ADDR_VAR 0 13
49642: PUSH
49643: LD_VAR 0 14
49647: PUSH
49648: LD_VAR 0 9
49652: ARRAY
49653: PUSH
49654: LD_INT 1
49656: ARRAY
49657: PPUSH
49658: LD_VAR 0 14
49662: PUSH
49663: LD_VAR 0 9
49667: ARRAY
49668: PUSH
49669: LD_INT 2
49671: ARRAY
49672: PPUSH
49673: CALL_OW 428
49677: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49678: LD_VAR 0 14
49682: PUSH
49683: LD_VAR 0 9
49687: ARRAY
49688: PUSH
49689: LD_INT 1
49691: ARRAY
49692: PPUSH
49693: LD_VAR 0 14
49697: PUSH
49698: LD_VAR 0 9
49702: ARRAY
49703: PUSH
49704: LD_INT 2
49706: ARRAY
49707: PPUSH
49708: CALL_OW 351
49712: PUSH
49713: LD_VAR 0 14
49717: PUSH
49718: LD_VAR 0 9
49722: ARRAY
49723: PUSH
49724: LD_INT 1
49726: ARRAY
49727: PPUSH
49728: LD_VAR 0 14
49732: PUSH
49733: LD_VAR 0 9
49737: ARRAY
49738: PUSH
49739: LD_INT 2
49741: ARRAY
49742: PPUSH
49743: CALL_OW 488
49747: NOT
49748: OR
49749: PUSH
49750: LD_VAR 0 13
49754: PPUSH
49755: CALL_OW 247
49759: PUSH
49760: LD_INT 3
49762: EQUAL
49763: OR
49764: IFFALSE 49770
// exit ;
49766: POP
49767: POP
49768: GO 50314
// if not tmp then
49770: LD_VAR 0 13
49774: NOT
49775: IFFALSE 49779
// continue ;
49777: GO 49635
// result := true ;
49779: LD_ADDR_VAR 0 8
49783: PUSH
49784: LD_INT 1
49786: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49787: LD_VAR 0 6
49791: PUSH
49792: LD_VAR 0 13
49796: PPUSH
49797: CALL_OW 247
49801: PUSH
49802: LD_INT 2
49804: EQUAL
49805: AND
49806: PUSH
49807: LD_VAR 0 13
49811: PPUSH
49812: CALL_OW 263
49816: PUSH
49817: LD_INT 1
49819: EQUAL
49820: AND
49821: IFFALSE 49985
// begin if IsDrivenBy ( tmp ) then
49823: LD_VAR 0 13
49827: PPUSH
49828: CALL_OW 311
49832: IFFALSE 49836
// continue ;
49834: GO 49635
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49836: LD_VAR 0 6
49840: PPUSH
49841: LD_INT 3
49843: PUSH
49844: LD_INT 60
49846: PUSH
49847: EMPTY
49848: LIST
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: LD_INT 55
49859: PUSH
49860: EMPTY
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PPUSH
49871: CALL_OW 72
49875: IFFALSE 49983
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49877: LD_ADDR_VAR 0 18
49881: PUSH
49882: LD_VAR 0 6
49886: PPUSH
49887: LD_INT 3
49889: PUSH
49890: LD_INT 60
49892: PUSH
49893: EMPTY
49894: LIST
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 3
49902: PUSH
49903: LD_INT 55
49905: PUSH
49906: EMPTY
49907: LIST
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PPUSH
49917: CALL_OW 72
49921: PUSH
49922: LD_INT 1
49924: ARRAY
49925: ST_TO_ADDR
// if IsInUnit ( driver ) then
49926: LD_VAR 0 18
49930: PPUSH
49931: CALL_OW 310
49935: IFFALSE 49946
// ComExit ( driver ) ;
49937: LD_VAR 0 18
49941: PPUSH
49942: CALL 75359 0 1
// AddComEnterUnit ( driver , tmp ) ;
49946: LD_VAR 0 18
49950: PPUSH
49951: LD_VAR 0 13
49955: PPUSH
49956: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49960: LD_VAR 0 18
49964: PPUSH
49965: LD_VAR 0 7
49969: PPUSH
49970: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49974: LD_VAR 0 18
49978: PPUSH
49979: CALL_OW 181
// end ; continue ;
49983: GO 49635
// end ; if not cleaners or not tmp in cleaners then
49985: LD_VAR 0 6
49989: NOT
49990: PUSH
49991: LD_VAR 0 13
49995: PUSH
49996: LD_VAR 0 6
50000: IN
50001: NOT
50002: OR
50003: IFFALSE 50310
// begin if dep then
50005: LD_VAR 0 17
50009: IFFALSE 50145
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50011: LD_ADDR_VAR 0 16
50015: PUSH
50016: LD_VAR 0 17
50020: PUSH
50021: LD_INT 1
50023: ARRAY
50024: PPUSH
50025: CALL_OW 250
50029: PPUSH
50030: LD_VAR 0 17
50034: PUSH
50035: LD_INT 1
50037: ARRAY
50038: PPUSH
50039: CALL_OW 254
50043: PPUSH
50044: LD_INT 5
50046: PPUSH
50047: CALL_OW 272
50051: PUSH
50052: LD_VAR 0 17
50056: PUSH
50057: LD_INT 1
50059: ARRAY
50060: PPUSH
50061: CALL_OW 251
50065: PPUSH
50066: LD_VAR 0 17
50070: PUSH
50071: LD_INT 1
50073: ARRAY
50074: PPUSH
50075: CALL_OW 254
50079: PPUSH
50080: LD_INT 5
50082: PPUSH
50083: CALL_OW 273
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50092: LD_VAR 0 16
50096: PUSH
50097: LD_INT 1
50099: ARRAY
50100: PPUSH
50101: LD_VAR 0 16
50105: PUSH
50106: LD_INT 2
50108: ARRAY
50109: PPUSH
50110: CALL_OW 488
50114: IFFALSE 50145
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50116: LD_VAR 0 13
50120: PPUSH
50121: LD_VAR 0 16
50125: PUSH
50126: LD_INT 1
50128: ARRAY
50129: PPUSH
50130: LD_VAR 0 16
50134: PUSH
50135: LD_INT 2
50137: ARRAY
50138: PPUSH
50139: CALL_OW 111
// continue ;
50143: GO 49635
// end ; end ; r := GetDir ( tmp ) ;
50145: LD_ADDR_VAR 0 15
50149: PUSH
50150: LD_VAR 0 13
50154: PPUSH
50155: CALL_OW 254
50159: ST_TO_ADDR
// if r = 5 then
50160: LD_VAR 0 15
50164: PUSH
50165: LD_INT 5
50167: EQUAL
50168: IFFALSE 50178
// r := 0 ;
50170: LD_ADDR_VAR 0 15
50174: PUSH
50175: LD_INT 0
50177: ST_TO_ADDR
// for j = r to 5 do
50178: LD_ADDR_VAR 0 10
50182: PUSH
50183: DOUBLE
50184: LD_VAR 0 15
50188: DEC
50189: ST_TO_ADDR
50190: LD_INT 5
50192: PUSH
50193: FOR_TO
50194: IFFALSE 50308
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50196: LD_ADDR_VAR 0 11
50200: PUSH
50201: LD_VAR 0 13
50205: PPUSH
50206: CALL_OW 250
50210: PPUSH
50211: LD_VAR 0 10
50215: PPUSH
50216: LD_INT 2
50218: PPUSH
50219: CALL_OW 272
50223: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50224: LD_ADDR_VAR 0 12
50228: PUSH
50229: LD_VAR 0 13
50233: PPUSH
50234: CALL_OW 251
50238: PPUSH
50239: LD_VAR 0 10
50243: PPUSH
50244: LD_INT 2
50246: PPUSH
50247: CALL_OW 273
50251: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50252: LD_VAR 0 11
50256: PPUSH
50257: LD_VAR 0 12
50261: PPUSH
50262: CALL_OW 488
50266: PUSH
50267: LD_VAR 0 11
50271: PPUSH
50272: LD_VAR 0 12
50276: PPUSH
50277: CALL_OW 428
50281: NOT
50282: AND
50283: IFFALSE 50306
// begin ComMoveXY ( tmp , _x , _y ) ;
50285: LD_VAR 0 13
50289: PPUSH
50290: LD_VAR 0 11
50294: PPUSH
50295: LD_VAR 0 12
50299: PPUSH
50300: CALL_OW 111
// break ;
50304: GO 50308
// end ; end ;
50306: GO 50193
50308: POP
50309: POP
// end ; end ;
50310: GO 49635
50312: POP
50313: POP
// end ;
50314: LD_VAR 0 8
50318: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50319: LD_INT 0
50321: PPUSH
// result := true ;
50322: LD_ADDR_VAR 0 3
50326: PUSH
50327: LD_INT 1
50329: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50330: LD_VAR 0 2
50334: PUSH
50335: LD_INT 24
50337: DOUBLE
50338: EQUAL
50339: IFTRUE 50349
50341: LD_INT 33
50343: DOUBLE
50344: EQUAL
50345: IFTRUE 50349
50347: GO 50374
50349: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50350: LD_ADDR_VAR 0 3
50354: PUSH
50355: LD_INT 32
50357: PPUSH
50358: LD_VAR 0 1
50362: PPUSH
50363: CALL_OW 321
50367: PUSH
50368: LD_INT 2
50370: EQUAL
50371: ST_TO_ADDR
50372: GO 50690
50374: LD_INT 20
50376: DOUBLE
50377: EQUAL
50378: IFTRUE 50382
50380: GO 50407
50382: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50383: LD_ADDR_VAR 0 3
50387: PUSH
50388: LD_INT 6
50390: PPUSH
50391: LD_VAR 0 1
50395: PPUSH
50396: CALL_OW 321
50400: PUSH
50401: LD_INT 2
50403: EQUAL
50404: ST_TO_ADDR
50405: GO 50690
50407: LD_INT 22
50409: DOUBLE
50410: EQUAL
50411: IFTRUE 50421
50413: LD_INT 36
50415: DOUBLE
50416: EQUAL
50417: IFTRUE 50421
50419: GO 50446
50421: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50422: LD_ADDR_VAR 0 3
50426: PUSH
50427: LD_INT 15
50429: PPUSH
50430: LD_VAR 0 1
50434: PPUSH
50435: CALL_OW 321
50439: PUSH
50440: LD_INT 2
50442: EQUAL
50443: ST_TO_ADDR
50444: GO 50690
50446: LD_INT 30
50448: DOUBLE
50449: EQUAL
50450: IFTRUE 50454
50452: GO 50479
50454: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50455: LD_ADDR_VAR 0 3
50459: PUSH
50460: LD_INT 20
50462: PPUSH
50463: LD_VAR 0 1
50467: PPUSH
50468: CALL_OW 321
50472: PUSH
50473: LD_INT 2
50475: EQUAL
50476: ST_TO_ADDR
50477: GO 50690
50479: LD_INT 28
50481: DOUBLE
50482: EQUAL
50483: IFTRUE 50493
50485: LD_INT 21
50487: DOUBLE
50488: EQUAL
50489: IFTRUE 50493
50491: GO 50518
50493: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50494: LD_ADDR_VAR 0 3
50498: PUSH
50499: LD_INT 21
50501: PPUSH
50502: LD_VAR 0 1
50506: PPUSH
50507: CALL_OW 321
50511: PUSH
50512: LD_INT 2
50514: EQUAL
50515: ST_TO_ADDR
50516: GO 50690
50518: LD_INT 16
50520: DOUBLE
50521: EQUAL
50522: IFTRUE 50526
50524: GO 50551
50526: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50527: LD_ADDR_VAR 0 3
50531: PUSH
50532: LD_INT 84
50534: PPUSH
50535: LD_VAR 0 1
50539: PPUSH
50540: CALL_OW 321
50544: PUSH
50545: LD_INT 2
50547: EQUAL
50548: ST_TO_ADDR
50549: GO 50690
50551: LD_INT 19
50553: DOUBLE
50554: EQUAL
50555: IFTRUE 50565
50557: LD_INT 23
50559: DOUBLE
50560: EQUAL
50561: IFTRUE 50565
50563: GO 50590
50565: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50566: LD_ADDR_VAR 0 3
50570: PUSH
50571: LD_INT 83
50573: PPUSH
50574: LD_VAR 0 1
50578: PPUSH
50579: CALL_OW 321
50583: PUSH
50584: LD_INT 2
50586: EQUAL
50587: ST_TO_ADDR
50588: GO 50690
50590: LD_INT 17
50592: DOUBLE
50593: EQUAL
50594: IFTRUE 50598
50596: GO 50623
50598: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50599: LD_ADDR_VAR 0 3
50603: PUSH
50604: LD_INT 39
50606: PPUSH
50607: LD_VAR 0 1
50611: PPUSH
50612: CALL_OW 321
50616: PUSH
50617: LD_INT 2
50619: EQUAL
50620: ST_TO_ADDR
50621: GO 50690
50623: LD_INT 18
50625: DOUBLE
50626: EQUAL
50627: IFTRUE 50631
50629: GO 50656
50631: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50632: LD_ADDR_VAR 0 3
50636: PUSH
50637: LD_INT 40
50639: PPUSH
50640: LD_VAR 0 1
50644: PPUSH
50645: CALL_OW 321
50649: PUSH
50650: LD_INT 2
50652: EQUAL
50653: ST_TO_ADDR
50654: GO 50690
50656: LD_INT 27
50658: DOUBLE
50659: EQUAL
50660: IFTRUE 50664
50662: GO 50689
50664: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50665: LD_ADDR_VAR 0 3
50669: PUSH
50670: LD_INT 35
50672: PPUSH
50673: LD_VAR 0 1
50677: PPUSH
50678: CALL_OW 321
50682: PUSH
50683: LD_INT 2
50685: EQUAL
50686: ST_TO_ADDR
50687: GO 50690
50689: POP
// end ;
50690: LD_VAR 0 3
50694: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50695: LD_INT 0
50697: PPUSH
50698: PPUSH
50699: PPUSH
50700: PPUSH
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
50707: PPUSH
// result := false ;
50708: LD_ADDR_VAR 0 6
50712: PUSH
50713: LD_INT 0
50715: ST_TO_ADDR
// if btype = b_depot then
50716: LD_VAR 0 2
50720: PUSH
50721: LD_INT 0
50723: EQUAL
50724: IFFALSE 50736
// begin result := true ;
50726: LD_ADDR_VAR 0 6
50730: PUSH
50731: LD_INT 1
50733: ST_TO_ADDR
// exit ;
50734: GO 51562
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50736: LD_VAR 0 1
50740: NOT
50741: PUSH
50742: LD_VAR 0 1
50746: PPUSH
50747: CALL_OW 266
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: IN
50762: NOT
50763: OR
50764: PUSH
50765: LD_VAR 0 2
50769: NOT
50770: OR
50771: PUSH
50772: LD_VAR 0 5
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: LD_INT 4
50791: PUSH
50792: LD_INT 5
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: IN
50803: NOT
50804: OR
50805: PUSH
50806: LD_VAR 0 3
50810: PPUSH
50811: LD_VAR 0 4
50815: PPUSH
50816: CALL_OW 488
50820: NOT
50821: OR
50822: IFFALSE 50826
// exit ;
50824: GO 51562
// side := GetSide ( depot ) ;
50826: LD_ADDR_VAR 0 9
50830: PUSH
50831: LD_VAR 0 1
50835: PPUSH
50836: CALL_OW 255
50840: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50841: LD_VAR 0 9
50845: PPUSH
50846: LD_VAR 0 2
50850: PPUSH
50851: CALL 50319 0 2
50855: NOT
50856: IFFALSE 50860
// exit ;
50858: GO 51562
// pom := GetBase ( depot ) ;
50860: LD_ADDR_VAR 0 10
50864: PUSH
50865: LD_VAR 0 1
50869: PPUSH
50870: CALL_OW 274
50874: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50875: LD_ADDR_VAR 0 11
50879: PUSH
50880: LD_VAR 0 2
50884: PPUSH
50885: LD_VAR 0 1
50889: PPUSH
50890: CALL_OW 248
50894: PPUSH
50895: CALL_OW 450
50899: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50900: LD_VAR 0 10
50904: PPUSH
50905: LD_INT 1
50907: PPUSH
50908: CALL_OW 275
50912: PUSH
50913: LD_VAR 0 11
50917: PUSH
50918: LD_INT 1
50920: ARRAY
50921: GREATEREQUAL
50922: PUSH
50923: LD_VAR 0 10
50927: PPUSH
50928: LD_INT 2
50930: PPUSH
50931: CALL_OW 275
50935: PUSH
50936: LD_VAR 0 11
50940: PUSH
50941: LD_INT 2
50943: ARRAY
50944: GREATEREQUAL
50945: AND
50946: PUSH
50947: LD_VAR 0 10
50951: PPUSH
50952: LD_INT 3
50954: PPUSH
50955: CALL_OW 275
50959: PUSH
50960: LD_VAR 0 11
50964: PUSH
50965: LD_INT 3
50967: ARRAY
50968: GREATEREQUAL
50969: AND
50970: NOT
50971: IFFALSE 50975
// exit ;
50973: GO 51562
// if GetBType ( depot ) = b_depot then
50975: LD_VAR 0 1
50979: PPUSH
50980: CALL_OW 266
50984: PUSH
50985: LD_INT 0
50987: EQUAL
50988: IFFALSE 51000
// dist := 28 else
50990: LD_ADDR_VAR 0 14
50994: PUSH
50995: LD_INT 28
50997: ST_TO_ADDR
50998: GO 51008
// dist := 36 ;
51000: LD_ADDR_VAR 0 14
51004: PUSH
51005: LD_INT 36
51007: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51008: LD_VAR 0 1
51012: PPUSH
51013: LD_VAR 0 3
51017: PPUSH
51018: LD_VAR 0 4
51022: PPUSH
51023: CALL_OW 297
51027: PUSH
51028: LD_VAR 0 14
51032: GREATER
51033: IFFALSE 51037
// exit ;
51035: GO 51562
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51037: LD_ADDR_VAR 0 12
51041: PUSH
51042: LD_VAR 0 2
51046: PPUSH
51047: LD_VAR 0 3
51051: PPUSH
51052: LD_VAR 0 4
51056: PPUSH
51057: LD_VAR 0 5
51061: PPUSH
51062: LD_VAR 0 1
51066: PPUSH
51067: CALL_OW 248
51071: PPUSH
51072: LD_INT 0
51074: PPUSH
51075: CALL 51567 0 6
51079: ST_TO_ADDR
// if not hexes then
51080: LD_VAR 0 12
51084: NOT
51085: IFFALSE 51089
// exit ;
51087: GO 51562
// hex := GetHexInfo ( x , y ) ;
51089: LD_ADDR_VAR 0 15
51093: PUSH
51094: LD_VAR 0 3
51098: PPUSH
51099: LD_VAR 0 4
51103: PPUSH
51104: CALL_OW 546
51108: ST_TO_ADDR
// if hex [ 1 ] then
51109: LD_VAR 0 15
51113: PUSH
51114: LD_INT 1
51116: ARRAY
51117: IFFALSE 51121
// exit ;
51119: GO 51562
// height := hex [ 2 ] ;
51121: LD_ADDR_VAR 0 13
51125: PUSH
51126: LD_VAR 0 15
51130: PUSH
51131: LD_INT 2
51133: ARRAY
51134: ST_TO_ADDR
// for i = 1 to hexes do
51135: LD_ADDR_VAR 0 7
51139: PUSH
51140: DOUBLE
51141: LD_INT 1
51143: DEC
51144: ST_TO_ADDR
51145: LD_VAR 0 12
51149: PUSH
51150: FOR_TO
51151: IFFALSE 51481
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51153: LD_VAR 0 12
51157: PUSH
51158: LD_VAR 0 7
51162: ARRAY
51163: PUSH
51164: LD_INT 1
51166: ARRAY
51167: PPUSH
51168: LD_VAR 0 12
51172: PUSH
51173: LD_VAR 0 7
51177: ARRAY
51178: PUSH
51179: LD_INT 2
51181: ARRAY
51182: PPUSH
51183: CALL_OW 488
51187: NOT
51188: PUSH
51189: LD_VAR 0 12
51193: PUSH
51194: LD_VAR 0 7
51198: ARRAY
51199: PUSH
51200: LD_INT 1
51202: ARRAY
51203: PPUSH
51204: LD_VAR 0 12
51208: PUSH
51209: LD_VAR 0 7
51213: ARRAY
51214: PUSH
51215: LD_INT 2
51217: ARRAY
51218: PPUSH
51219: CALL_OW 428
51223: PUSH
51224: LD_INT 0
51226: GREATER
51227: OR
51228: PUSH
51229: LD_VAR 0 12
51233: PUSH
51234: LD_VAR 0 7
51238: ARRAY
51239: PUSH
51240: LD_INT 1
51242: ARRAY
51243: PPUSH
51244: LD_VAR 0 12
51248: PUSH
51249: LD_VAR 0 7
51253: ARRAY
51254: PUSH
51255: LD_INT 2
51257: ARRAY
51258: PPUSH
51259: CALL_OW 351
51263: OR
51264: IFFALSE 51270
// exit ;
51266: POP
51267: POP
51268: GO 51562
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51270: LD_ADDR_VAR 0 8
51274: PUSH
51275: LD_VAR 0 12
51279: PUSH
51280: LD_VAR 0 7
51284: ARRAY
51285: PUSH
51286: LD_INT 1
51288: ARRAY
51289: PPUSH
51290: LD_VAR 0 12
51294: PUSH
51295: LD_VAR 0 7
51299: ARRAY
51300: PUSH
51301: LD_INT 2
51303: ARRAY
51304: PPUSH
51305: CALL_OW 546
51309: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51310: LD_VAR 0 8
51314: PUSH
51315: LD_INT 1
51317: ARRAY
51318: PUSH
51319: LD_VAR 0 8
51323: PUSH
51324: LD_INT 2
51326: ARRAY
51327: PUSH
51328: LD_VAR 0 13
51332: PUSH
51333: LD_INT 2
51335: PLUS
51336: GREATER
51337: OR
51338: PUSH
51339: LD_VAR 0 8
51343: PUSH
51344: LD_INT 2
51346: ARRAY
51347: PUSH
51348: LD_VAR 0 13
51352: PUSH
51353: LD_INT 2
51355: MINUS
51356: LESS
51357: OR
51358: PUSH
51359: LD_VAR 0 8
51363: PUSH
51364: LD_INT 3
51366: ARRAY
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 8
51373: PUSH
51374: LD_INT 9
51376: PUSH
51377: LD_INT 10
51379: PUSH
51380: LD_INT 11
51382: PUSH
51383: LD_INT 12
51385: PUSH
51386: LD_INT 13
51388: PUSH
51389: LD_INT 16
51391: PUSH
51392: LD_INT 17
51394: PUSH
51395: LD_INT 18
51397: PUSH
51398: LD_INT 19
51400: PUSH
51401: LD_INT 20
51403: PUSH
51404: LD_INT 21
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: IN
51422: NOT
51423: OR
51424: PUSH
51425: LD_VAR 0 8
51429: PUSH
51430: LD_INT 5
51432: ARRAY
51433: NOT
51434: OR
51435: PUSH
51436: LD_VAR 0 8
51440: PUSH
51441: LD_INT 6
51443: ARRAY
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: LD_INT 7
51453: PUSH
51454: LD_INT 9
51456: PUSH
51457: LD_INT 10
51459: PUSH
51460: LD_INT 11
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: IN
51471: NOT
51472: OR
51473: IFFALSE 51479
// exit ;
51475: POP
51476: POP
51477: GO 51562
// end ;
51479: GO 51150
51481: POP
51482: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51483: LD_VAR 0 9
51487: PPUSH
51488: LD_VAR 0 3
51492: PPUSH
51493: LD_VAR 0 4
51497: PPUSH
51498: LD_INT 20
51500: PPUSH
51501: CALL 43485 0 4
51505: PUSH
51506: LD_INT 4
51508: ARRAY
51509: IFFALSE 51513
// exit ;
51511: GO 51562
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51513: LD_VAR 0 2
51517: PUSH
51518: LD_INT 29
51520: PUSH
51521: LD_INT 30
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: IN
51528: PUSH
51529: LD_VAR 0 3
51533: PPUSH
51534: LD_VAR 0 4
51538: PPUSH
51539: LD_VAR 0 9
51543: PPUSH
51544: CALL_OW 440
51548: NOT
51549: AND
51550: IFFALSE 51554
// exit ;
51552: GO 51562
// result := true ;
51554: LD_ADDR_VAR 0 6
51558: PUSH
51559: LD_INT 1
51561: ST_TO_ADDR
// end ;
51562: LD_VAR 0 6
51566: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51567: LD_INT 0
51569: PPUSH
51570: PPUSH
51571: PPUSH
51572: PPUSH
51573: PPUSH
51574: PPUSH
51575: PPUSH
51576: PPUSH
51577: PPUSH
51578: PPUSH
51579: PPUSH
51580: PPUSH
51581: PPUSH
51582: PPUSH
51583: PPUSH
51584: PPUSH
51585: PPUSH
51586: PPUSH
51587: PPUSH
51588: PPUSH
51589: PPUSH
51590: PPUSH
51591: PPUSH
51592: PPUSH
51593: PPUSH
51594: PPUSH
51595: PPUSH
51596: PPUSH
51597: PPUSH
51598: PPUSH
51599: PPUSH
51600: PPUSH
51601: PPUSH
51602: PPUSH
51603: PPUSH
51604: PPUSH
51605: PPUSH
51606: PPUSH
51607: PPUSH
51608: PPUSH
51609: PPUSH
51610: PPUSH
51611: PPUSH
51612: PPUSH
51613: PPUSH
51614: PPUSH
51615: PPUSH
51616: PPUSH
51617: PPUSH
51618: PPUSH
51619: PPUSH
51620: PPUSH
51621: PPUSH
51622: PPUSH
51623: PPUSH
51624: PPUSH
51625: PPUSH
51626: PPUSH
// result = [ ] ;
51627: LD_ADDR_VAR 0 7
51631: PUSH
51632: EMPTY
51633: ST_TO_ADDR
// temp_list = [ ] ;
51634: LD_ADDR_VAR 0 9
51638: PUSH
51639: EMPTY
51640: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51641: LD_VAR 0 4
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: LD_INT 4
51660: PUSH
51661: LD_INT 5
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: IN
51672: NOT
51673: PUSH
51674: LD_VAR 0 1
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: IN
51689: PUSH
51690: LD_VAR 0 5
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: LD_INT 3
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: LIST
51708: IN
51709: NOT
51710: AND
51711: OR
51712: IFFALSE 51716
// exit ;
51714: GO 70107
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51716: LD_VAR 0 1
51720: PUSH
51721: LD_INT 6
51723: PUSH
51724: LD_INT 7
51726: PUSH
51727: LD_INT 8
51729: PUSH
51730: LD_INT 13
51732: PUSH
51733: LD_INT 12
51735: PUSH
51736: LD_INT 15
51738: PUSH
51739: LD_INT 11
51741: PUSH
51742: LD_INT 14
51744: PUSH
51745: LD_INT 10
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: IN
51759: IFFALSE 51769
// btype = b_lab ;
51761: LD_ADDR_VAR 0 1
51765: PUSH
51766: LD_INT 6
51768: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51769: LD_VAR 0 6
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: LIST
51787: IN
51788: NOT
51789: PUSH
51790: LD_VAR 0 1
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: LD_INT 6
51809: PUSH
51810: LD_INT 36
51812: PUSH
51813: LD_INT 4
51815: PUSH
51816: LD_INT 5
51818: PUSH
51819: LD_INT 31
51821: PUSH
51822: LD_INT 32
51824: PUSH
51825: LD_INT 33
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: IN
51841: NOT
51842: PUSH
51843: LD_VAR 0 6
51847: PUSH
51848: LD_INT 1
51850: EQUAL
51851: AND
51852: OR
51853: PUSH
51854: LD_VAR 0 1
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: LD_INT 3
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: IN
51869: NOT
51870: PUSH
51871: LD_VAR 0 6
51875: PUSH
51876: LD_INT 2
51878: EQUAL
51879: AND
51880: OR
51881: IFFALSE 51891
// mode = 0 ;
51883: LD_ADDR_VAR 0 6
51887: PUSH
51888: LD_INT 0
51890: ST_TO_ADDR
// case mode of 0 :
51891: LD_VAR 0 6
51895: PUSH
51896: LD_INT 0
51898: DOUBLE
51899: EQUAL
51900: IFTRUE 51904
51902: GO 63357
51904: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51905: LD_ADDR_VAR 0 11
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 3
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 3
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52098: LD_ADDR_VAR 0 12
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: NEG
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 3
52255: NEG
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 3
52266: NEG
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52294: LD_ADDR_VAR 0 13
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: NEG
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: LD_INT 3
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 3
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 3
52465: NEG
52466: PUSH
52467: LD_INT 3
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52493: LD_ADDR_VAR 0 14
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 3
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52689: LD_ADDR_VAR 0 15
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 3
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52882: LD_ADDR_VAR 0 16
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: NEG
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 3
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 3
53039: PUSH
53040: LD_INT 3
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: LD_INT 3
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53075: LD_ADDR_VAR 0 17
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53305: LD_ADDR_VAR 0 18
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53535: LD_ADDR_VAR 0 19
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: LD_INT 2
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53765: LD_ADDR_VAR 0 20
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53995: LD_ADDR_VAR 0 21
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 2
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54225: LD_ADDR_VAR 0 22
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 2
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54455: LD_ADDR_VAR 0 23
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: LD_INT 2
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 3
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54735: LD_ADDR_VAR 0 24
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55011: LD_ADDR_VAR 0 25
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 3
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 3
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: LD_INT 3
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 3
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55285: LD_ADDR_VAR 0 26
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 2
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: LD_INT 2
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 3
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: LD_INT 3
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55561: LD_ADDR_VAR 0 27
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 2
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 3
55794: NEG
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 3
55806: NEG
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55841: LD_ADDR_VAR 0 28
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 3
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 3
56088: NEG
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56123: LD_ADDR_VAR 0 29
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: NEG
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 3
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 3
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: LD_INT 2
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 3
56367: NEG
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56402: LD_ADDR_VAR 0 30
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 2
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56680: LD_ADDR_VAR 0 31
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 3
56923: NEG
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56958: LD_ADDR_VAR 0 32
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 2
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 3
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57236: LD_ADDR_VAR 0 33
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: LD_INT 2
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 2
57414: NEG
57415: PUSH
57416: LD_INT 2
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 3
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 3
57480: NEG
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57515: LD_ADDR_VAR 0 34
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: LD_INT 2
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 2
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 3
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 3
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: LD_INT 3
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: NEG
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57795: LD_ADDR_VAR 0 35
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57907: LD_ADDR_VAR 0 36
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: LD_INT 2
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58019: LD_ADDR_VAR 0 37
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58131: LD_ADDR_VAR 0 38
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58243: LD_ADDR_VAR 0 39
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 2
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58355: LD_ADDR_VAR 0 40
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58467: LD_ADDR_VAR 0 41
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: LD_INT 2
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: LD_INT 3
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 3
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 3
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: NEG
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: NEG
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 3
58764: NEG
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 3
58776: NEG
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58817: LD_ADDR_VAR 0 42
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 0
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: NEG
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 2
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 2
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: LD_INT 3
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: LD_INT 3
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 3
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: LD_INT 3
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 3
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: LD_INT 2
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 3
59126: NEG
59127: PUSH
59128: LD_INT 3
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59167: LD_ADDR_VAR 0 43
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 1
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 3
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: LD_INT 2
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 3
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 3
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 3
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 3
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 3
59474: NEG
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59515: LD_ADDR_VAR 0 44
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: LD_INT 1
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 2
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 2
59693: NEG
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: LD_INT 3
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 3
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 3
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 3
59748: PUSH
59749: LD_INT 2
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 3
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: LD_INT 3
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: NEG
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: NEG
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 3
59812: NEG
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 3
59824: NEG
59825: PUSH
59826: LD_INT 3
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59865: LD_ADDR_VAR 0 45
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: LD_INT 2
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 2
60055: NEG
60056: PUSH
60057: LD_INT 3
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: LD_INT 3
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 3
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 3
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: PUSH
60122: LD_INT 3
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 3
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 3
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60215: LD_ADDR_VAR 0 46
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: LD_INT 2
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 2
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: LD_INT 2
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: LD_INT 2
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 2
60392: NEG
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 3
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: LD_INT 2
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 2
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 3
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 2
60500: NEG
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: NEG
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 3
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60563: LD_ADDR_VAR 0 47
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: LD_INT 1
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 2
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60714: LD_ADDR_VAR 0 48
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 2
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60861: LD_ADDR_VAR 0 49
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61005: LD_ADDR_VAR 0 50
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61149: LD_ADDR_VAR 0 51
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: NEG
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61296: LD_ADDR_VAR 0 52
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: LD_INT 1
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: LD_INT 1
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 2
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 2
61423: NEG
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61447: LD_ADDR_VAR 0 53
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: NEG
61529: PUSH
61530: LD_INT 2
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 2
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: LD_INT 2
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61677: LD_ADDR_VAR 0 54
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 2
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 2
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: LD_INT 2
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 2
61853: NEG
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 2
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61907: LD_ADDR_VAR 0 55
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: LD_INT 2
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 2
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 2
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 2
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: LD_INT 2
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: LD_INT 2
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 2
62083: NEG
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 2
62094: NEG
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 2
62106: NEG
62107: PUSH
62108: LD_INT 2
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62137: LD_ADDR_VAR 0 56
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: LD_INT 2
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: LD_INT 2
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 2
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 2
62272: PUSH
62273: LD_INT 2
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: PUSH
62283: LD_INT 2
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: NEG
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 2
62324: NEG
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 2
62336: NEG
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62367: LD_ADDR_VAR 0 57
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 2
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 2
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 2
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 2
62502: PUSH
62503: LD_INT 2
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: LD_INT 2
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: LD_INT 2
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 1
62532: NEG
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 2
62554: NEG
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 2
62566: NEG
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62597: LD_ADDR_VAR 0 58
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 2
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 2
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: LD_INT 2
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62827: LD_ADDR_VAR 0 59
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62915: LD_ADDR_VAR 0 60
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63003: LD_ADDR_VAR 0 61
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: LD_INT 1
63076: NEG
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63091: LD_ADDR_VAR 0 62
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63179: LD_ADDR_VAR 0 63
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63267: LD_ADDR_VAR 0 64
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: LD_INT 1
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: NEG
63337: PUSH
63338: LD_INT 1
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: ST_TO_ADDR
// end ; 1 :
63355: GO 69252
63357: LD_INT 1
63359: DOUBLE
63360: EQUAL
63361: IFTRUE 63365
63363: GO 65988
63365: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63366: LD_ADDR_VAR 0 11
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: LD_INT 3
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: LD_INT 3
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 1
63396: PUSH
63397: LD_INT 2
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: LIST
63409: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63410: LD_ADDR_VAR 0 12
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 3
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 3
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63451: LD_ADDR_VAR 0 13
63455: PUSH
63456: LD_INT 3
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 3
63468: PUSH
63469: LD_INT 3
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 2
63478: PUSH
63479: LD_INT 3
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: LIST
63490: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63491: LD_ADDR_VAR 0 14
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: LD_INT 3
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 0
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 1
63518: NEG
63519: PUSH
63520: LD_INT 2
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63532: LD_ADDR_VAR 0 15
63536: PUSH
63537: LD_INT 2
63539: NEG
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 3
63550: NEG
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 3
63561: NEG
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: LIST
63575: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63576: LD_ADDR_VAR 0 16
63580: PUSH
63581: LD_INT 2
63583: NEG
63584: PUSH
63585: LD_INT 3
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 3
63595: NEG
63596: PUSH
63597: LD_INT 2
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: LD_INT 3
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: LIST
63621: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63622: LD_ADDR_VAR 0 17
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: LD_INT 3
63633: NEG
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 3
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: LD_INT 2
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: LIST
63665: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63666: LD_ADDR_VAR 0 18
63670: PUSH
63671: LD_INT 2
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 3
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 3
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: LIST
63706: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63707: LD_ADDR_VAR 0 19
63711: PUSH
63712: LD_INT 3
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 3
63724: PUSH
63725: LD_INT 3
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 2
63734: PUSH
63735: LD_INT 3
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: LIST
63746: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63747: LD_ADDR_VAR 0 20
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: LD_INT 3
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 3
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 1
63774: NEG
63775: PUSH
63776: LD_INT 2
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63788: LD_ADDR_VAR 0 21
63792: PUSH
63793: LD_INT 2
63795: NEG
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 3
63806: NEG
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 3
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: LIST
63831: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63832: LD_ADDR_VAR 0 22
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: LD_INT 3
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 3
63851: NEG
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 3
63863: NEG
63864: PUSH
63865: LD_INT 3
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: LIST
63877: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63878: LD_ADDR_VAR 0 23
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: LD_INT 3
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 1
63896: NEG
63897: PUSH
63898: LD_INT 4
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: PUSH
63909: LD_INT 3
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: LIST
63921: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63922: LD_ADDR_VAR 0 24
63926: PUSH
63927: LD_INT 3
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 3
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 4
63950: PUSH
63951: LD_INT 1
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: LIST
63962: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63963: LD_ADDR_VAR 0 25
63967: PUSH
63968: LD_INT 3
63970: PUSH
63971: LD_INT 3
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 4
63980: PUSH
63981: LD_INT 3
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 3
63990: PUSH
63991: LD_INT 4
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: LIST
64002: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64003: LD_ADDR_VAR 0 26
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: LD_INT 3
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: LD_INT 4
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: LD_INT 3
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: LIST
64043: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64044: LD_ADDR_VAR 0 27
64048: PUSH
64049: LD_INT 3
64051: NEG
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 3
64062: NEG
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 4
64073: NEG
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64088: LD_ADDR_VAR 0 28
64092: PUSH
64093: LD_INT 3
64095: NEG
64096: PUSH
64097: LD_INT 3
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 3
64107: NEG
64108: PUSH
64109: LD_INT 4
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 4
64119: NEG
64120: PUSH
64121: LD_INT 3
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64134: LD_ADDR_VAR 0 29
64138: PUSH
64139: LD_INT 1
64141: NEG
64142: PUSH
64143: LD_INT 3
64145: NEG
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: LD_INT 3
64156: NEG
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: LD_INT 2
64167: NEG
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: LD_INT 4
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: LD_INT 4
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 1
64198: PUSH
64199: LD_INT 3
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 1
64209: NEG
64210: PUSH
64211: LD_INT 5
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: LD_INT 5
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: LD_INT 4
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: LD_INT 6
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: LD_INT 6
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: LD_INT 5
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64289: LD_ADDR_VAR 0 30
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 3
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 3
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 3
64327: PUSH
64328: LD_INT 1
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 4
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 4
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 4
64358: PUSH
64359: LD_INT 1
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 5
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 5
64379: PUSH
64380: LD_INT 1
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 5
64389: PUSH
64390: LD_INT 1
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 6
64400: PUSH
64401: LD_INT 0
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 6
64410: PUSH
64411: LD_INT 1
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64432: LD_ADDR_VAR 0 31
64436: PUSH
64437: LD_INT 3
64439: PUSH
64440: LD_INT 2
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 3
64449: PUSH
64450: LD_INT 3
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: LD_INT 3
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 4
64469: PUSH
64470: LD_INT 3
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 4
64479: PUSH
64480: LD_INT 4
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 3
64489: PUSH
64490: LD_INT 4
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 5
64499: PUSH
64500: LD_INT 4
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 5
64509: PUSH
64510: LD_INT 5
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 4
64519: PUSH
64520: LD_INT 5
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 6
64529: PUSH
64530: LD_INT 5
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 6
64539: PUSH
64540: LD_INT 6
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 5
64549: PUSH
64550: LD_INT 6
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64571: LD_ADDR_VAR 0 32
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: LD_INT 3
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 0
64588: PUSH
64589: LD_INT 3
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 1
64598: NEG
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 1
64609: PUSH
64610: LD_INT 4
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: LD_INT 4
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: LD_INT 3
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: LD_INT 5
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: LD_INT 5
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: LD_INT 4
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: LD_INT 6
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: LD_INT 6
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 1
64691: NEG
64692: PUSH
64693: LD_INT 5
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64714: LD_ADDR_VAR 0 33
64718: PUSH
64719: LD_INT 2
64721: NEG
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 3
64732: NEG
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 3
64743: NEG
64744: PUSH
64745: LD_INT 1
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 3
64755: NEG
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 4
64766: NEG
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 4
64777: NEG
64778: PUSH
64779: LD_INT 1
64781: NEG
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 4
64789: NEG
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 5
64800: NEG
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 5
64811: NEG
64812: PUSH
64813: LD_INT 1
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 5
64823: NEG
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 6
64834: NEG
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 6
64845: NEG
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64869: LD_ADDR_VAR 0 34
64873: PUSH
64874: LD_INT 2
64876: NEG
64877: PUSH
64878: LD_INT 3
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 3
64888: NEG
64889: PUSH
64890: LD_INT 2
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 3
64900: NEG
64901: PUSH
64902: LD_INT 3
64904: NEG
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 3
64912: NEG
64913: PUSH
64914: LD_INT 4
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 4
64924: NEG
64925: PUSH
64926: LD_INT 3
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 4
64936: NEG
64937: PUSH
64938: LD_INT 4
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 4
64948: NEG
64949: PUSH
64950: LD_INT 5
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 5
64960: NEG
64961: PUSH
64962: LD_INT 4
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 5
64972: NEG
64973: PUSH
64974: LD_INT 5
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 5
64984: NEG
64985: PUSH
64986: LD_INT 6
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 6
64996: NEG
64997: PUSH
64998: LD_INT 5
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 6
65008: NEG
65009: PUSH
65010: LD_INT 6
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65032: LD_ADDR_VAR 0 41
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: LD_INT 2
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 1
65050: NEG
65051: PUSH
65052: LD_INT 3
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: LD_INT 2
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: LIST
65075: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65076: LD_ADDR_VAR 0 42
65080: PUSH
65081: LD_INT 2
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: LIST
65116: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65117: LD_ADDR_VAR 0 43
65121: PUSH
65122: LD_INT 2
65124: PUSH
65125: LD_INT 2
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 3
65134: PUSH
65135: LD_INT 2
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 2
65144: PUSH
65145: LD_INT 3
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65157: LD_ADDR_VAR 0 44
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 2
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: LD_INT 3
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: LD_INT 2
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65198: LD_ADDR_VAR 0 45
65202: PUSH
65203: LD_INT 2
65205: NEG
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 2
65216: NEG
65217: PUSH
65218: LD_INT 1
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 3
65227: NEG
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: LIST
65241: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65242: LD_ADDR_VAR 0 46
65246: PUSH
65247: LD_INT 2
65249: NEG
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 2
65261: NEG
65262: PUSH
65263: LD_INT 3
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 3
65273: NEG
65274: PUSH
65275: LD_INT 2
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: LIST
65287: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65288: LD_ADDR_VAR 0 47
65292: PUSH
65293: LD_INT 2
65295: NEG
65296: PUSH
65297: LD_INT 3
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 1
65307: NEG
65308: PUSH
65309: LD_INT 3
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65321: LD_ADDR_VAR 0 48
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: LD_INT 2
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 2
65339: PUSH
65340: LD_INT 1
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65352: LD_ADDR_VAR 0 49
65356: PUSH
65357: LD_INT 3
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 3
65369: PUSH
65370: LD_INT 2
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65381: LD_ADDR_VAR 0 50
65385: PUSH
65386: LD_INT 2
65388: PUSH
65389: LD_INT 3
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 1
65398: PUSH
65399: LD_INT 3
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65410: LD_ADDR_VAR 0 51
65414: PUSH
65415: LD_INT 1
65417: NEG
65418: PUSH
65419: LD_INT 2
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 2
65428: NEG
65429: PUSH
65430: LD_INT 1
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65441: LD_ADDR_VAR 0 52
65445: PUSH
65446: LD_INT 3
65448: NEG
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 3
65460: NEG
65461: PUSH
65462: LD_INT 2
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65474: LD_ADDR_VAR 0 53
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 3
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: LD_INT 3
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: LD_INT 2
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: LIST
65517: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65518: LD_ADDR_VAR 0 54
65522: PUSH
65523: LD_INT 2
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 3
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 3
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: LIST
65558: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65559: LD_ADDR_VAR 0 55
65563: PUSH
65564: LD_INT 3
65566: PUSH
65567: LD_INT 2
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 3
65576: PUSH
65577: LD_INT 3
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 2
65586: PUSH
65587: LD_INT 3
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: LIST
65598: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65599: LD_ADDR_VAR 0 56
65603: PUSH
65604: LD_INT 1
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 0
65616: PUSH
65617: LD_INT 3
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: NEG
65627: PUSH
65628: LD_INT 2
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: LIST
65639: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65640: LD_ADDR_VAR 0 57
65644: PUSH
65645: LD_INT 2
65647: NEG
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 3
65658: NEG
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 3
65669: NEG
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: LIST
65683: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65684: LD_ADDR_VAR 0 58
65688: PUSH
65689: LD_INT 2
65691: NEG
65692: PUSH
65693: LD_INT 3
65695: NEG
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 3
65703: NEG
65704: PUSH
65705: LD_INT 2
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 3
65715: NEG
65716: PUSH
65717: LD_INT 3
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: LIST
65729: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65730: LD_ADDR_VAR 0 59
65734: PUSH
65735: LD_INT 1
65737: NEG
65738: PUSH
65739: LD_INT 2
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 0
65749: PUSH
65750: LD_INT 2
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: LD_INT 1
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65774: LD_ADDR_VAR 0 60
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: LD_INT 1
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: LIST
65814: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65815: LD_ADDR_VAR 0 61
65819: PUSH
65820: LD_INT 2
65822: PUSH
65823: LD_INT 1
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 2
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: LD_INT 2
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: LIST
65854: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65855: LD_ADDR_VAR 0 62
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: LD_INT 2
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 1
65882: NEG
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: LIST
65895: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65896: LD_ADDR_VAR 0 63
65900: PUSH
65901: LD_INT 1
65903: NEG
65904: PUSH
65905: LD_INT 1
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 2
65914: NEG
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 2
65925: NEG
65926: PUSH
65927: LD_INT 1
65929: NEG
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65940: LD_ADDR_VAR 0 64
65944: PUSH
65945: LD_INT 1
65947: NEG
65948: PUSH
65949: LD_INT 2
65951: NEG
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 2
65959: NEG
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 2
65971: NEG
65972: PUSH
65973: LD_INT 2
65975: NEG
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: LIST
65985: ST_TO_ADDR
// end ; 2 :
65986: GO 69252
65988: LD_INT 2
65990: DOUBLE
65991: EQUAL
65992: IFTRUE 65996
65994: GO 69251
65996: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65997: LD_ADDR_VAR 0 29
66001: PUSH
66002: LD_INT 4
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 4
66014: PUSH
66015: LD_INT 1
66017: NEG
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 5
66025: PUSH
66026: LD_INT 0
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 5
66035: PUSH
66036: LD_INT 1
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 4
66045: PUSH
66046: LD_INT 1
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 3
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 3
66065: PUSH
66066: LD_INT 1
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 3
66076: PUSH
66077: LD_INT 2
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 5
66087: PUSH
66088: LD_INT 2
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 3
66097: PUSH
66098: LD_INT 3
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 3
66107: PUSH
66108: LD_INT 2
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 4
66117: PUSH
66118: LD_INT 3
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 4
66127: PUSH
66128: LD_INT 4
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 3
66137: PUSH
66138: LD_INT 4
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 2
66147: PUSH
66148: LD_INT 3
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 2
66157: PUSH
66158: LD_INT 2
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 4
66167: PUSH
66168: LD_INT 2
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 2
66177: PUSH
66178: LD_INT 4
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: LD_INT 4
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 0
66197: PUSH
66198: LD_INT 3
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 1
66207: PUSH
66208: LD_INT 4
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: PUSH
66218: LD_INT 5
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: LD_INT 5
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: LD_INT 4
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: NEG
66249: PUSH
66250: LD_INT 3
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 2
66259: PUSH
66260: LD_INT 5
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 2
66269: NEG
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 3
66280: NEG
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 3
66291: NEG
66292: PUSH
66293: LD_INT 1
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 2
66303: NEG
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 2
66314: NEG
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 3
66325: NEG
66326: PUSH
66327: LD_INT 1
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 4
66336: NEG
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 4
66347: NEG
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 4
66359: NEG
66360: PUSH
66361: LD_INT 2
66363: NEG
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 2
66371: NEG
66372: PUSH
66373: LD_INT 2
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 4
66382: NEG
66383: PUSH
66384: LD_INT 4
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 4
66394: NEG
66395: PUSH
66396: LD_INT 5
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 3
66406: NEG
66407: PUSH
66408: LD_INT 4
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 3
66418: NEG
66419: PUSH
66420: LD_INT 3
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 4
66430: NEG
66431: PUSH
66432: LD_INT 3
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 5
66442: NEG
66443: PUSH
66444: LD_INT 4
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 5
66454: NEG
66455: PUSH
66456: LD_INT 5
66458: NEG
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 3
66466: NEG
66467: PUSH
66468: LD_INT 5
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 5
66478: NEG
66479: PUSH
66480: LD_INT 3
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66535: LD_ADDR_VAR 0 30
66539: PUSH
66540: LD_INT 4
66542: PUSH
66543: LD_INT 4
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 4
66552: PUSH
66553: LD_INT 3
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 5
66562: PUSH
66563: LD_INT 4
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 5
66572: PUSH
66573: LD_INT 5
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 4
66582: PUSH
66583: LD_INT 5
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 3
66592: PUSH
66593: LD_INT 4
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 3
66602: PUSH
66603: LD_INT 3
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 5
66612: PUSH
66613: LD_INT 3
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 3
66622: PUSH
66623: LD_INT 5
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: LD_INT 3
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: LD_INT 2
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 1
66652: PUSH
66653: LD_INT 3
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 1
66662: PUSH
66663: LD_INT 4
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 0
66672: PUSH
66673: LD_INT 4
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: LD_INT 3
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 1
66693: NEG
66694: PUSH
66695: LD_INT 2
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 2
66704: PUSH
66705: LD_INT 4
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 2
66714: NEG
66715: PUSH
66716: LD_INT 2
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 4
66725: NEG
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 4
66736: NEG
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 3
66748: NEG
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 3
66759: NEG
66760: PUSH
66761: LD_INT 1
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 4
66770: NEG
66771: PUSH
66772: LD_INT 1
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 5
66781: NEG
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 5
66792: NEG
66793: PUSH
66794: LD_INT 1
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 5
66804: NEG
66805: PUSH
66806: LD_INT 2
66808: NEG
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 3
66816: NEG
66817: PUSH
66818: LD_INT 2
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 3
66827: NEG
66828: PUSH
66829: LD_INT 3
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 3
66839: NEG
66840: PUSH
66841: LD_INT 4
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 2
66851: NEG
66852: PUSH
66853: LD_INT 3
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 2
66863: NEG
66864: PUSH
66865: LD_INT 2
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 3
66875: NEG
66876: PUSH
66877: LD_INT 2
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 4
66887: NEG
66888: PUSH
66889: LD_INT 3
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 4
66899: NEG
66900: PUSH
66901: LD_INT 4
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 2
66911: NEG
66912: PUSH
66913: LD_INT 4
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 4
66923: NEG
66924: PUSH
66925: LD_INT 2
66927: NEG
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 0
66935: PUSH
66936: LD_INT 4
66938: NEG
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 0
66946: PUSH
66947: LD_INT 5
66949: NEG
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: LD_INT 4
66960: NEG
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 1
66968: PUSH
66969: LD_INT 3
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 0
66979: PUSH
66980: LD_INT 3
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 1
66990: NEG
66991: PUSH
66992: LD_INT 4
66994: NEG
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: LD_INT 5
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 2
67014: PUSH
67015: LD_INT 3
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 2
67025: NEG
67026: PUSH
67027: LD_INT 5
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67082: LD_ADDR_VAR 0 31
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: LD_INT 4
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: LD_INT 3
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 1
67109: PUSH
67110: LD_INT 4
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 1
67119: PUSH
67120: LD_INT 5
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 0
67129: PUSH
67130: LD_INT 5
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: LD_INT 4
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 1
67150: NEG
67151: PUSH
67152: LD_INT 3
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 2
67161: PUSH
67162: LD_INT 5
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 2
67171: NEG
67172: PUSH
67173: LD_INT 3
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 3
67182: NEG
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 3
67193: NEG
67194: PUSH
67195: LD_INT 1
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 2
67205: NEG
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 2
67216: NEG
67217: PUSH
67218: LD_INT 1
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 3
67227: NEG
67228: PUSH
67229: LD_INT 1
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 4
67238: NEG
67239: PUSH
67240: LD_INT 0
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 4
67249: NEG
67250: PUSH
67251: LD_INT 1
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 4
67261: NEG
67262: PUSH
67263: LD_INT 2
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 2
67273: NEG
67274: PUSH
67275: LD_INT 2
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 4
67284: NEG
67285: PUSH
67286: LD_INT 4
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 4
67296: NEG
67297: PUSH
67298: LD_INT 5
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 3
67308: NEG
67309: PUSH
67310: LD_INT 4
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 3
67320: NEG
67321: PUSH
67322: LD_INT 3
67324: NEG
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 4
67332: NEG
67333: PUSH
67334: LD_INT 3
67336: NEG
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 5
67344: NEG
67345: PUSH
67346: LD_INT 4
67348: NEG
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 5
67356: NEG
67357: PUSH
67358: LD_INT 5
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 3
67368: NEG
67369: PUSH
67370: LD_INT 5
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 5
67380: NEG
67381: PUSH
67382: LD_INT 3
67384: NEG
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: LD_INT 3
67395: NEG
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: LD_INT 4
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 1
67414: PUSH
67415: LD_INT 3
67417: NEG
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 1
67425: PUSH
67426: LD_INT 2
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 0
67436: PUSH
67437: LD_INT 2
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 1
67447: NEG
67448: PUSH
67449: LD_INT 3
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 1
67459: NEG
67460: PUSH
67461: LD_INT 4
67463: NEG
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 2
67471: PUSH
67472: LD_INT 2
67474: NEG
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 2
67482: NEG
67483: PUSH
67484: LD_INT 4
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 4
67494: PUSH
67495: LD_INT 0
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 4
67504: PUSH
67505: LD_INT 1
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 5
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 5
67525: PUSH
67526: LD_INT 1
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 4
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 3
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: LD_INT 1
67558: NEG
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 3
67566: PUSH
67567: LD_INT 2
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 5
67577: PUSH
67578: LD_INT 2
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67632: LD_ADDR_VAR 0 32
67636: PUSH
67637: LD_INT 4
67639: NEG
67640: PUSH
67641: LD_INT 0
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 4
67650: NEG
67651: PUSH
67652: LD_INT 1
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 3
67662: NEG
67663: PUSH
67664: LD_INT 0
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 3
67673: NEG
67674: PUSH
67675: LD_INT 1
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 4
67684: NEG
67685: PUSH
67686: LD_INT 1
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 5
67695: NEG
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 5
67706: NEG
67707: PUSH
67708: LD_INT 1
67710: NEG
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 5
67718: NEG
67719: PUSH
67720: LD_INT 2
67722: NEG
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 3
67730: NEG
67731: PUSH
67732: LD_INT 2
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 3
67741: NEG
67742: PUSH
67743: LD_INT 3
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 3
67753: NEG
67754: PUSH
67755: LD_INT 4
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 2
67765: NEG
67766: PUSH
67767: LD_INT 3
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 2
67777: NEG
67778: PUSH
67779: LD_INT 2
67781: NEG
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 3
67789: NEG
67790: PUSH
67791: LD_INT 2
67793: NEG
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 4
67801: NEG
67802: PUSH
67803: LD_INT 3
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 4
67813: NEG
67814: PUSH
67815: LD_INT 4
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 2
67825: NEG
67826: PUSH
67827: LD_INT 4
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 4
67837: NEG
67838: PUSH
67839: LD_INT 2
67841: NEG
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: LD_INT 4
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 0
67860: PUSH
67861: LD_INT 5
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: LD_INT 4
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 1
67882: PUSH
67883: LD_INT 3
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: LD_INT 3
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 1
67904: NEG
67905: PUSH
67906: LD_INT 4
67908: NEG
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 1
67916: NEG
67917: PUSH
67918: LD_INT 5
67920: NEG
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 2
67928: PUSH
67929: LD_INT 3
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 2
67939: NEG
67940: PUSH
67941: LD_INT 5
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 3
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 3
67961: PUSH
67962: LD_INT 1
67964: NEG
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 4
67972: PUSH
67973: LD_INT 0
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 4
67982: PUSH
67983: LD_INT 1
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 3
67992: PUSH
67993: LD_INT 1
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 2
68002: PUSH
68003: LD_INT 0
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 2
68012: PUSH
68013: LD_INT 1
68015: NEG
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 2
68023: PUSH
68024: LD_INT 2
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 4
68034: PUSH
68035: LD_INT 2
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 4
68044: PUSH
68045: LD_INT 4
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 4
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 5
68064: PUSH
68065: LD_INT 4
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 5
68074: PUSH
68075: LD_INT 5
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 4
68084: PUSH
68085: LD_INT 5
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 3
68094: PUSH
68095: LD_INT 4
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 3
68104: PUSH
68105: LD_INT 3
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 5
68114: PUSH
68115: LD_INT 3
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 3
68124: PUSH
68125: LD_INT 5
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68179: LD_ADDR_VAR 0 33
68183: PUSH
68184: LD_INT 4
68186: NEG
68187: PUSH
68188: LD_INT 4
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 4
68198: NEG
68199: PUSH
68200: LD_INT 5
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 3
68210: NEG
68211: PUSH
68212: LD_INT 4
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 3
68222: NEG
68223: PUSH
68224: LD_INT 3
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 4
68234: NEG
68235: PUSH
68236: LD_INT 3
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 5
68246: NEG
68247: PUSH
68248: LD_INT 4
68250: NEG
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 5
68258: NEG
68259: PUSH
68260: LD_INT 5
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 3
68270: NEG
68271: PUSH
68272: LD_INT 5
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 5
68282: NEG
68283: PUSH
68284: LD_INT 3
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: LD_INT 3
68297: NEG
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 0
68305: PUSH
68306: LD_INT 4
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 1
68316: PUSH
68317: LD_INT 3
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 1
68327: PUSH
68328: LD_INT 2
68330: NEG
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 0
68338: PUSH
68339: LD_INT 2
68341: NEG
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 1
68349: NEG
68350: PUSH
68351: LD_INT 3
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 1
68361: NEG
68362: PUSH
68363: LD_INT 4
68365: NEG
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 2
68373: PUSH
68374: LD_INT 2
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 2
68384: NEG
68385: PUSH
68386: LD_INT 4
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 4
68396: PUSH
68397: LD_INT 0
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 4
68406: PUSH
68407: LD_INT 1
68409: NEG
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 5
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 5
68427: PUSH
68428: LD_INT 1
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 4
68437: PUSH
68438: LD_INT 1
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 3
68447: PUSH
68448: LD_INT 0
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 3
68457: PUSH
68458: LD_INT 1
68460: NEG
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 3
68468: PUSH
68469: LD_INT 2
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 5
68479: PUSH
68480: LD_INT 2
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 3
68489: PUSH
68490: LD_INT 3
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 3
68499: PUSH
68500: LD_INT 2
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 4
68509: PUSH
68510: LD_INT 3
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 4
68519: PUSH
68520: LD_INT 4
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 3
68529: PUSH
68530: LD_INT 4
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 2
68539: PUSH
68540: LD_INT 3
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 2
68549: PUSH
68550: LD_INT 2
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 4
68559: PUSH
68560: LD_INT 2
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 2
68569: PUSH
68570: LD_INT 4
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 0
68579: PUSH
68580: LD_INT 4
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 0
68589: PUSH
68590: LD_INT 3
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 1
68599: PUSH
68600: LD_INT 4
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 1
68609: PUSH
68610: LD_INT 5
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: LD_INT 5
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 1
68629: NEG
68630: PUSH
68631: LD_INT 4
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 1
68640: NEG
68641: PUSH
68642: LD_INT 3
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 2
68651: PUSH
68652: LD_INT 5
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 2
68661: NEG
68662: PUSH
68663: LD_INT 3
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68717: LD_ADDR_VAR 0 34
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: LD_INT 4
68727: NEG
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: LD_INT 5
68738: NEG
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 1
68746: PUSH
68747: LD_INT 4
68749: NEG
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 1
68757: PUSH
68758: LD_INT 3
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 0
68768: PUSH
68769: LD_INT 3
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 1
68779: NEG
68780: PUSH
68781: LD_INT 4
68783: NEG
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 1
68791: NEG
68792: PUSH
68793: LD_INT 5
68795: NEG
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 2
68803: PUSH
68804: LD_INT 3
68806: NEG
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 2
68814: NEG
68815: PUSH
68816: LD_INT 5
68818: NEG
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 3
68826: PUSH
68827: LD_INT 0
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 3
68836: PUSH
68837: LD_INT 1
68839: NEG
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 4
68847: PUSH
68848: LD_INT 0
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 4
68857: PUSH
68858: LD_INT 1
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 3
68867: PUSH
68868: LD_INT 1
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 2
68877: PUSH
68878: LD_INT 0
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 2
68887: PUSH
68888: LD_INT 1
68890: NEG
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 2
68898: PUSH
68899: LD_INT 2
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 4
68909: PUSH
68910: LD_INT 2
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 4
68919: PUSH
68920: LD_INT 4
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 4
68929: PUSH
68930: LD_INT 3
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 5
68939: PUSH
68940: LD_INT 4
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 5
68949: PUSH
68950: LD_INT 5
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 4
68959: PUSH
68960: LD_INT 5
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 3
68969: PUSH
68970: LD_INT 4
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 3
68979: PUSH
68980: LD_INT 3
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 5
68989: PUSH
68990: LD_INT 3
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 3
68999: PUSH
69000: LD_INT 5
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: LD_INT 3
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 0
69019: PUSH
69020: LD_INT 2
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 1
69029: PUSH
69030: LD_INT 3
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 1
69039: PUSH
69040: LD_INT 4
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 0
69049: PUSH
69050: LD_INT 4
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 1
69059: NEG
69060: PUSH
69061: LD_INT 3
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 1
69070: NEG
69071: PUSH
69072: LD_INT 2
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 2
69081: PUSH
69082: LD_INT 4
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 2
69091: NEG
69092: PUSH
69093: LD_INT 2
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 4
69102: NEG
69103: PUSH
69104: LD_INT 0
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 4
69113: NEG
69114: PUSH
69115: LD_INT 1
69117: NEG
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 3
69125: NEG
69126: PUSH
69127: LD_INT 0
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 3
69136: NEG
69137: PUSH
69138: LD_INT 1
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 4
69147: NEG
69148: PUSH
69149: LD_INT 1
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 5
69158: NEG
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 5
69169: NEG
69170: PUSH
69171: LD_INT 1
69173: NEG
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 5
69181: NEG
69182: PUSH
69183: LD_INT 2
69185: NEG
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 3
69193: NEG
69194: PUSH
69195: LD_INT 2
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: ST_TO_ADDR
// end ; end ;
69249: GO 69252
69251: POP
// case btype of b_depot , b_warehouse :
69252: LD_VAR 0 1
69256: PUSH
69257: LD_INT 0
69259: DOUBLE
69260: EQUAL
69261: IFTRUE 69271
69263: LD_INT 1
69265: DOUBLE
69266: EQUAL
69267: IFTRUE 69271
69269: GO 69472
69271: POP
// case nation of nation_american :
69272: LD_VAR 0 5
69276: PUSH
69277: LD_INT 1
69279: DOUBLE
69280: EQUAL
69281: IFTRUE 69285
69283: GO 69341
69285: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69286: LD_ADDR_VAR 0 9
69290: PUSH
69291: LD_VAR 0 11
69295: PUSH
69296: LD_VAR 0 12
69300: PUSH
69301: LD_VAR 0 13
69305: PUSH
69306: LD_VAR 0 14
69310: PUSH
69311: LD_VAR 0 15
69315: PUSH
69316: LD_VAR 0 16
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: PUSH
69329: LD_VAR 0 4
69333: PUSH
69334: LD_INT 1
69336: PLUS
69337: ARRAY
69338: ST_TO_ADDR
69339: GO 69470
69341: LD_INT 2
69343: DOUBLE
69344: EQUAL
69345: IFTRUE 69349
69347: GO 69405
69349: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69350: LD_ADDR_VAR 0 9
69354: PUSH
69355: LD_VAR 0 17
69359: PUSH
69360: LD_VAR 0 18
69364: PUSH
69365: LD_VAR 0 19
69369: PUSH
69370: LD_VAR 0 20
69374: PUSH
69375: LD_VAR 0 21
69379: PUSH
69380: LD_VAR 0 22
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: PUSH
69393: LD_VAR 0 4
69397: PUSH
69398: LD_INT 1
69400: PLUS
69401: ARRAY
69402: ST_TO_ADDR
69403: GO 69470
69405: LD_INT 3
69407: DOUBLE
69408: EQUAL
69409: IFTRUE 69413
69411: GO 69469
69413: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69414: LD_ADDR_VAR 0 9
69418: PUSH
69419: LD_VAR 0 23
69423: PUSH
69424: LD_VAR 0 24
69428: PUSH
69429: LD_VAR 0 25
69433: PUSH
69434: LD_VAR 0 26
69438: PUSH
69439: LD_VAR 0 27
69443: PUSH
69444: LD_VAR 0 28
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: PUSH
69457: LD_VAR 0 4
69461: PUSH
69462: LD_INT 1
69464: PLUS
69465: ARRAY
69466: ST_TO_ADDR
69467: GO 69470
69469: POP
69470: GO 70025
69472: LD_INT 2
69474: DOUBLE
69475: EQUAL
69476: IFTRUE 69486
69478: LD_INT 3
69480: DOUBLE
69481: EQUAL
69482: IFTRUE 69486
69484: GO 69542
69486: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69487: LD_ADDR_VAR 0 9
69491: PUSH
69492: LD_VAR 0 29
69496: PUSH
69497: LD_VAR 0 30
69501: PUSH
69502: LD_VAR 0 31
69506: PUSH
69507: LD_VAR 0 32
69511: PUSH
69512: LD_VAR 0 33
69516: PUSH
69517: LD_VAR 0 34
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: PUSH
69530: LD_VAR 0 4
69534: PUSH
69535: LD_INT 1
69537: PLUS
69538: ARRAY
69539: ST_TO_ADDR
69540: GO 70025
69542: LD_INT 16
69544: DOUBLE
69545: EQUAL
69546: IFTRUE 69604
69548: LD_INT 17
69550: DOUBLE
69551: EQUAL
69552: IFTRUE 69604
69554: LD_INT 18
69556: DOUBLE
69557: EQUAL
69558: IFTRUE 69604
69560: LD_INT 19
69562: DOUBLE
69563: EQUAL
69564: IFTRUE 69604
69566: LD_INT 22
69568: DOUBLE
69569: EQUAL
69570: IFTRUE 69604
69572: LD_INT 20
69574: DOUBLE
69575: EQUAL
69576: IFTRUE 69604
69578: LD_INT 21
69580: DOUBLE
69581: EQUAL
69582: IFTRUE 69604
69584: LD_INT 23
69586: DOUBLE
69587: EQUAL
69588: IFTRUE 69604
69590: LD_INT 24
69592: DOUBLE
69593: EQUAL
69594: IFTRUE 69604
69596: LD_INT 25
69598: DOUBLE
69599: EQUAL
69600: IFTRUE 69604
69602: GO 69660
69604: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69605: LD_ADDR_VAR 0 9
69609: PUSH
69610: LD_VAR 0 35
69614: PUSH
69615: LD_VAR 0 36
69619: PUSH
69620: LD_VAR 0 37
69624: PUSH
69625: LD_VAR 0 38
69629: PUSH
69630: LD_VAR 0 39
69634: PUSH
69635: LD_VAR 0 40
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: PUSH
69648: LD_VAR 0 4
69652: PUSH
69653: LD_INT 1
69655: PLUS
69656: ARRAY
69657: ST_TO_ADDR
69658: GO 70025
69660: LD_INT 6
69662: DOUBLE
69663: EQUAL
69664: IFTRUE 69716
69666: LD_INT 7
69668: DOUBLE
69669: EQUAL
69670: IFTRUE 69716
69672: LD_INT 8
69674: DOUBLE
69675: EQUAL
69676: IFTRUE 69716
69678: LD_INT 13
69680: DOUBLE
69681: EQUAL
69682: IFTRUE 69716
69684: LD_INT 12
69686: DOUBLE
69687: EQUAL
69688: IFTRUE 69716
69690: LD_INT 15
69692: DOUBLE
69693: EQUAL
69694: IFTRUE 69716
69696: LD_INT 11
69698: DOUBLE
69699: EQUAL
69700: IFTRUE 69716
69702: LD_INT 14
69704: DOUBLE
69705: EQUAL
69706: IFTRUE 69716
69708: LD_INT 10
69710: DOUBLE
69711: EQUAL
69712: IFTRUE 69716
69714: GO 69772
69716: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69717: LD_ADDR_VAR 0 9
69721: PUSH
69722: LD_VAR 0 41
69726: PUSH
69727: LD_VAR 0 42
69731: PUSH
69732: LD_VAR 0 43
69736: PUSH
69737: LD_VAR 0 44
69741: PUSH
69742: LD_VAR 0 45
69746: PUSH
69747: LD_VAR 0 46
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: PUSH
69760: LD_VAR 0 4
69764: PUSH
69765: LD_INT 1
69767: PLUS
69768: ARRAY
69769: ST_TO_ADDR
69770: GO 70025
69772: LD_INT 36
69774: DOUBLE
69775: EQUAL
69776: IFTRUE 69780
69778: GO 69836
69780: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69781: LD_ADDR_VAR 0 9
69785: PUSH
69786: LD_VAR 0 47
69790: PUSH
69791: LD_VAR 0 48
69795: PUSH
69796: LD_VAR 0 49
69800: PUSH
69801: LD_VAR 0 50
69805: PUSH
69806: LD_VAR 0 51
69810: PUSH
69811: LD_VAR 0 52
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: PUSH
69824: LD_VAR 0 4
69828: PUSH
69829: LD_INT 1
69831: PLUS
69832: ARRAY
69833: ST_TO_ADDR
69834: GO 70025
69836: LD_INT 4
69838: DOUBLE
69839: EQUAL
69840: IFTRUE 69862
69842: LD_INT 5
69844: DOUBLE
69845: EQUAL
69846: IFTRUE 69862
69848: LD_INT 34
69850: DOUBLE
69851: EQUAL
69852: IFTRUE 69862
69854: LD_INT 37
69856: DOUBLE
69857: EQUAL
69858: IFTRUE 69862
69860: GO 69918
69862: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69863: LD_ADDR_VAR 0 9
69867: PUSH
69868: LD_VAR 0 53
69872: PUSH
69873: LD_VAR 0 54
69877: PUSH
69878: LD_VAR 0 55
69882: PUSH
69883: LD_VAR 0 56
69887: PUSH
69888: LD_VAR 0 57
69892: PUSH
69893: LD_VAR 0 58
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: PUSH
69906: LD_VAR 0 4
69910: PUSH
69911: LD_INT 1
69913: PLUS
69914: ARRAY
69915: ST_TO_ADDR
69916: GO 70025
69918: LD_INT 31
69920: DOUBLE
69921: EQUAL
69922: IFTRUE 69968
69924: LD_INT 32
69926: DOUBLE
69927: EQUAL
69928: IFTRUE 69968
69930: LD_INT 33
69932: DOUBLE
69933: EQUAL
69934: IFTRUE 69968
69936: LD_INT 27
69938: DOUBLE
69939: EQUAL
69940: IFTRUE 69968
69942: LD_INT 26
69944: DOUBLE
69945: EQUAL
69946: IFTRUE 69968
69948: LD_INT 28
69950: DOUBLE
69951: EQUAL
69952: IFTRUE 69968
69954: LD_INT 29
69956: DOUBLE
69957: EQUAL
69958: IFTRUE 69968
69960: LD_INT 30
69962: DOUBLE
69963: EQUAL
69964: IFTRUE 69968
69966: GO 70024
69968: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69969: LD_ADDR_VAR 0 9
69973: PUSH
69974: LD_VAR 0 59
69978: PUSH
69979: LD_VAR 0 60
69983: PUSH
69984: LD_VAR 0 61
69988: PUSH
69989: LD_VAR 0 62
69993: PUSH
69994: LD_VAR 0 63
69998: PUSH
69999: LD_VAR 0 64
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: PUSH
70012: LD_VAR 0 4
70016: PUSH
70017: LD_INT 1
70019: PLUS
70020: ARRAY
70021: ST_TO_ADDR
70022: GO 70025
70024: POP
// temp_list2 = [ ] ;
70025: LD_ADDR_VAR 0 10
70029: PUSH
70030: EMPTY
70031: ST_TO_ADDR
// for i in temp_list do
70032: LD_ADDR_VAR 0 8
70036: PUSH
70037: LD_VAR 0 9
70041: PUSH
70042: FOR_IN
70043: IFFALSE 70095
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70045: LD_ADDR_VAR 0 10
70049: PUSH
70050: LD_VAR 0 10
70054: PUSH
70055: LD_VAR 0 8
70059: PUSH
70060: LD_INT 1
70062: ARRAY
70063: PUSH
70064: LD_VAR 0 2
70068: PLUS
70069: PUSH
70070: LD_VAR 0 8
70074: PUSH
70075: LD_INT 2
70077: ARRAY
70078: PUSH
70079: LD_VAR 0 3
70083: PLUS
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: EMPTY
70090: LIST
70091: ADD
70092: ST_TO_ADDR
70093: GO 70042
70095: POP
70096: POP
// result = temp_list2 ;
70097: LD_ADDR_VAR 0 7
70101: PUSH
70102: LD_VAR 0 10
70106: ST_TO_ADDR
// end ;
70107: LD_VAR 0 7
70111: RET
// export function EnemyInRange ( unit , dist ) ; begin
70112: LD_INT 0
70114: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70115: LD_ADDR_VAR 0 3
70119: PUSH
70120: LD_VAR 0 1
70124: PPUSH
70125: CALL_OW 255
70129: PPUSH
70130: LD_VAR 0 1
70134: PPUSH
70135: CALL_OW 250
70139: PPUSH
70140: LD_VAR 0 1
70144: PPUSH
70145: CALL_OW 251
70149: PPUSH
70150: LD_VAR 0 2
70154: PPUSH
70155: CALL 43485 0 4
70159: PUSH
70160: LD_INT 4
70162: ARRAY
70163: ST_TO_ADDR
// end ;
70164: LD_VAR 0 3
70168: RET
// export function PlayerSeeMe ( unit ) ; begin
70169: LD_INT 0
70171: PPUSH
// result := See ( your_side , unit ) ;
70172: LD_ADDR_VAR 0 2
70176: PUSH
70177: LD_OWVAR 2
70181: PPUSH
70182: LD_VAR 0 1
70186: PPUSH
70187: CALL_OW 292
70191: ST_TO_ADDR
// end ;
70192: LD_VAR 0 2
70196: RET
// export function ReverseDir ( unit ) ; begin
70197: LD_INT 0
70199: PPUSH
// if not unit then
70200: LD_VAR 0 1
70204: NOT
70205: IFFALSE 70209
// exit ;
70207: GO 70232
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70209: LD_ADDR_VAR 0 2
70213: PUSH
70214: LD_VAR 0 1
70218: PPUSH
70219: CALL_OW 254
70223: PUSH
70224: LD_INT 3
70226: PLUS
70227: PUSH
70228: LD_INT 6
70230: MOD
70231: ST_TO_ADDR
// end ;
70232: LD_VAR 0 2
70236: RET
// export function ReverseArray ( array ) ; var i ; begin
70237: LD_INT 0
70239: PPUSH
70240: PPUSH
// if not array then
70241: LD_VAR 0 1
70245: NOT
70246: IFFALSE 70250
// exit ;
70248: GO 70305
// result := [ ] ;
70250: LD_ADDR_VAR 0 2
70254: PUSH
70255: EMPTY
70256: ST_TO_ADDR
// for i := array downto 1 do
70257: LD_ADDR_VAR 0 3
70261: PUSH
70262: DOUBLE
70263: LD_VAR 0 1
70267: INC
70268: ST_TO_ADDR
70269: LD_INT 1
70271: PUSH
70272: FOR_DOWNTO
70273: IFFALSE 70303
// result := Join ( result , array [ i ] ) ;
70275: LD_ADDR_VAR 0 2
70279: PUSH
70280: LD_VAR 0 2
70284: PPUSH
70285: LD_VAR 0 1
70289: PUSH
70290: LD_VAR 0 3
70294: ARRAY
70295: PPUSH
70296: CALL 74961 0 2
70300: ST_TO_ADDR
70301: GO 70272
70303: POP
70304: POP
// end ;
70305: LD_VAR 0 2
70309: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70310: LD_INT 0
70312: PPUSH
70313: PPUSH
70314: PPUSH
70315: PPUSH
70316: PPUSH
70317: PPUSH
// if not unit or not hexes then
70318: LD_VAR 0 1
70322: NOT
70323: PUSH
70324: LD_VAR 0 2
70328: NOT
70329: OR
70330: IFFALSE 70334
// exit ;
70332: GO 70457
// dist := 9999 ;
70334: LD_ADDR_VAR 0 5
70338: PUSH
70339: LD_INT 9999
70341: ST_TO_ADDR
// for i = 1 to hexes do
70342: LD_ADDR_VAR 0 4
70346: PUSH
70347: DOUBLE
70348: LD_INT 1
70350: DEC
70351: ST_TO_ADDR
70352: LD_VAR 0 2
70356: PUSH
70357: FOR_TO
70358: IFFALSE 70445
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70360: LD_ADDR_VAR 0 6
70364: PUSH
70365: LD_VAR 0 1
70369: PPUSH
70370: LD_VAR 0 2
70374: PUSH
70375: LD_VAR 0 4
70379: ARRAY
70380: PUSH
70381: LD_INT 1
70383: ARRAY
70384: PPUSH
70385: LD_VAR 0 2
70389: PUSH
70390: LD_VAR 0 4
70394: ARRAY
70395: PUSH
70396: LD_INT 2
70398: ARRAY
70399: PPUSH
70400: CALL_OW 297
70404: ST_TO_ADDR
// if tdist < dist then
70405: LD_VAR 0 6
70409: PUSH
70410: LD_VAR 0 5
70414: LESS
70415: IFFALSE 70443
// begin hex := hexes [ i ] ;
70417: LD_ADDR_VAR 0 8
70421: PUSH
70422: LD_VAR 0 2
70426: PUSH
70427: LD_VAR 0 4
70431: ARRAY
70432: ST_TO_ADDR
// dist := tdist ;
70433: LD_ADDR_VAR 0 5
70437: PUSH
70438: LD_VAR 0 6
70442: ST_TO_ADDR
// end ; end ;
70443: GO 70357
70445: POP
70446: POP
// result := hex ;
70447: LD_ADDR_VAR 0 3
70451: PUSH
70452: LD_VAR 0 8
70456: ST_TO_ADDR
// end ;
70457: LD_VAR 0 3
70461: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70462: LD_INT 0
70464: PPUSH
70465: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70466: LD_VAR 0 1
70470: NOT
70471: PUSH
70472: LD_VAR 0 1
70476: PUSH
70477: LD_INT 21
70479: PUSH
70480: LD_INT 2
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 23
70489: PUSH
70490: LD_INT 2
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PPUSH
70501: CALL_OW 69
70505: IN
70506: NOT
70507: OR
70508: IFFALSE 70512
// exit ;
70510: GO 70559
// for i = 1 to 3 do
70512: LD_ADDR_VAR 0 3
70516: PUSH
70517: DOUBLE
70518: LD_INT 1
70520: DEC
70521: ST_TO_ADDR
70522: LD_INT 3
70524: PUSH
70525: FOR_TO
70526: IFFALSE 70557
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70528: LD_VAR 0 1
70532: PPUSH
70533: CALL_OW 250
70537: PPUSH
70538: LD_VAR 0 1
70542: PPUSH
70543: CALL_OW 251
70547: PPUSH
70548: LD_INT 1
70550: PPUSH
70551: CALL_OW 453
70555: GO 70525
70557: POP
70558: POP
// end ;
70559: LD_VAR 0 2
70563: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70564: LD_INT 0
70566: PPUSH
70567: PPUSH
70568: PPUSH
70569: PPUSH
70570: PPUSH
70571: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70572: LD_VAR 0 1
70576: NOT
70577: PUSH
70578: LD_VAR 0 2
70582: NOT
70583: OR
70584: PUSH
70585: LD_VAR 0 1
70589: PPUSH
70590: CALL_OW 314
70594: OR
70595: IFFALSE 70599
// exit ;
70597: GO 71066
// if GetLives ( i ) < 250 then
70599: LD_VAR 0 4
70603: PPUSH
70604: CALL_OW 256
70608: PUSH
70609: LD_INT 250
70611: LESS
70612: IFFALSE 70625
// begin ComAutodestruct ( i ) ;
70614: LD_VAR 0 4
70618: PPUSH
70619: CALL 70462 0 1
// exit ;
70623: GO 71066
// end ; x := GetX ( enemy_unit ) ;
70625: LD_ADDR_VAR 0 7
70629: PUSH
70630: LD_VAR 0 2
70634: PPUSH
70635: CALL_OW 250
70639: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70640: LD_ADDR_VAR 0 8
70644: PUSH
70645: LD_VAR 0 2
70649: PPUSH
70650: CALL_OW 251
70654: ST_TO_ADDR
// if not x or not y then
70655: LD_VAR 0 7
70659: NOT
70660: PUSH
70661: LD_VAR 0 8
70665: NOT
70666: OR
70667: IFFALSE 70671
// exit ;
70669: GO 71066
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70671: LD_ADDR_VAR 0 6
70675: PUSH
70676: LD_VAR 0 7
70680: PPUSH
70681: LD_INT 0
70683: PPUSH
70684: LD_INT 4
70686: PPUSH
70687: CALL_OW 272
70691: PUSH
70692: LD_VAR 0 8
70696: PPUSH
70697: LD_INT 0
70699: PPUSH
70700: LD_INT 4
70702: PPUSH
70703: CALL_OW 273
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_VAR 0 7
70716: PPUSH
70717: LD_INT 1
70719: PPUSH
70720: LD_INT 4
70722: PPUSH
70723: CALL_OW 272
70727: PUSH
70728: LD_VAR 0 8
70732: PPUSH
70733: LD_INT 1
70735: PPUSH
70736: LD_INT 4
70738: PPUSH
70739: CALL_OW 273
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_VAR 0 7
70752: PPUSH
70753: LD_INT 2
70755: PPUSH
70756: LD_INT 4
70758: PPUSH
70759: CALL_OW 272
70763: PUSH
70764: LD_VAR 0 8
70768: PPUSH
70769: LD_INT 2
70771: PPUSH
70772: LD_INT 4
70774: PPUSH
70775: CALL_OW 273
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_VAR 0 7
70788: PPUSH
70789: LD_INT 3
70791: PPUSH
70792: LD_INT 4
70794: PPUSH
70795: CALL_OW 272
70799: PUSH
70800: LD_VAR 0 8
70804: PPUSH
70805: LD_INT 3
70807: PPUSH
70808: LD_INT 4
70810: PPUSH
70811: CALL_OW 273
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_VAR 0 7
70824: PPUSH
70825: LD_INT 4
70827: PPUSH
70828: LD_INT 4
70830: PPUSH
70831: CALL_OW 272
70835: PUSH
70836: LD_VAR 0 8
70840: PPUSH
70841: LD_INT 4
70843: PPUSH
70844: LD_INT 4
70846: PPUSH
70847: CALL_OW 273
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_VAR 0 7
70860: PPUSH
70861: LD_INT 5
70863: PPUSH
70864: LD_INT 4
70866: PPUSH
70867: CALL_OW 272
70871: PUSH
70872: LD_VAR 0 8
70876: PPUSH
70877: LD_INT 5
70879: PPUSH
70880: LD_INT 4
70882: PPUSH
70883: CALL_OW 273
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: ST_TO_ADDR
// for i = tmp downto 1 do
70900: LD_ADDR_VAR 0 4
70904: PUSH
70905: DOUBLE
70906: LD_VAR 0 6
70910: INC
70911: ST_TO_ADDR
70912: LD_INT 1
70914: PUSH
70915: FOR_DOWNTO
70916: IFFALSE 71017
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70918: LD_VAR 0 6
70922: PUSH
70923: LD_VAR 0 4
70927: ARRAY
70928: PUSH
70929: LD_INT 1
70931: ARRAY
70932: PPUSH
70933: LD_VAR 0 6
70937: PUSH
70938: LD_VAR 0 4
70942: ARRAY
70943: PUSH
70944: LD_INT 2
70946: ARRAY
70947: PPUSH
70948: CALL_OW 488
70952: NOT
70953: PUSH
70954: LD_VAR 0 6
70958: PUSH
70959: LD_VAR 0 4
70963: ARRAY
70964: PUSH
70965: LD_INT 1
70967: ARRAY
70968: PPUSH
70969: LD_VAR 0 6
70973: PUSH
70974: LD_VAR 0 4
70978: ARRAY
70979: PUSH
70980: LD_INT 2
70982: ARRAY
70983: PPUSH
70984: CALL_OW 428
70988: PUSH
70989: LD_INT 0
70991: NONEQUAL
70992: OR
70993: IFFALSE 71015
// tmp := Delete ( tmp , i ) ;
70995: LD_ADDR_VAR 0 6
70999: PUSH
71000: LD_VAR 0 6
71004: PPUSH
71005: LD_VAR 0 4
71009: PPUSH
71010: CALL_OW 3
71014: ST_TO_ADDR
71015: GO 70915
71017: POP
71018: POP
// j := GetClosestHex ( unit , tmp ) ;
71019: LD_ADDR_VAR 0 5
71023: PUSH
71024: LD_VAR 0 1
71028: PPUSH
71029: LD_VAR 0 6
71033: PPUSH
71034: CALL 70310 0 2
71038: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71039: LD_VAR 0 1
71043: PPUSH
71044: LD_VAR 0 5
71048: PUSH
71049: LD_INT 1
71051: ARRAY
71052: PPUSH
71053: LD_VAR 0 5
71057: PUSH
71058: LD_INT 2
71060: ARRAY
71061: PPUSH
71062: CALL_OW 111
// end ;
71066: LD_VAR 0 3
71070: RET
// export function PrepareApemanSoldier ( ) ; begin
71071: LD_INT 0
71073: PPUSH
// uc_nation := 0 ;
71074: LD_ADDR_OWVAR 21
71078: PUSH
71079: LD_INT 0
71081: ST_TO_ADDR
// hc_sex := sex_male ;
71082: LD_ADDR_OWVAR 27
71086: PUSH
71087: LD_INT 1
71089: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71090: LD_ADDR_OWVAR 28
71094: PUSH
71095: LD_INT 15
71097: ST_TO_ADDR
// hc_gallery :=  ;
71098: LD_ADDR_OWVAR 33
71102: PUSH
71103: LD_STRING 
71105: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71106: LD_ADDR_OWVAR 31
71110: PUSH
71111: LD_INT 0
71113: PPUSH
71114: LD_INT 3
71116: PPUSH
71117: CALL_OW 12
71121: PUSH
71122: LD_INT 0
71124: PPUSH
71125: LD_INT 3
71127: PPUSH
71128: CALL_OW 12
71132: PUSH
71133: LD_INT 0
71135: PUSH
71136: LD_INT 0
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: ST_TO_ADDR
// end ;
71145: LD_VAR 0 1
71149: RET
// export function PrepareApemanEngineer ( ) ; begin
71150: LD_INT 0
71152: PPUSH
// uc_nation := 0 ;
71153: LD_ADDR_OWVAR 21
71157: PUSH
71158: LD_INT 0
71160: ST_TO_ADDR
// hc_sex := sex_male ;
71161: LD_ADDR_OWVAR 27
71165: PUSH
71166: LD_INT 1
71168: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71169: LD_ADDR_OWVAR 28
71173: PUSH
71174: LD_INT 16
71176: ST_TO_ADDR
// hc_gallery :=  ;
71177: LD_ADDR_OWVAR 33
71181: PUSH
71182: LD_STRING 
71184: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71185: LD_ADDR_OWVAR 31
71189: PUSH
71190: LD_INT 0
71192: PPUSH
71193: LD_INT 3
71195: PPUSH
71196: CALL_OW 12
71200: PUSH
71201: LD_INT 0
71203: PPUSH
71204: LD_INT 3
71206: PPUSH
71207: CALL_OW 12
71211: PUSH
71212: LD_INT 0
71214: PUSH
71215: LD_INT 0
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: ST_TO_ADDR
// end ;
71224: LD_VAR 0 1
71228: RET
// export function PrepareApeman ( agressivity ) ; begin
71229: LD_INT 0
71231: PPUSH
// uc_side := 0 ;
71232: LD_ADDR_OWVAR 20
71236: PUSH
71237: LD_INT 0
71239: ST_TO_ADDR
// uc_nation := 0 ;
71240: LD_ADDR_OWVAR 21
71244: PUSH
71245: LD_INT 0
71247: ST_TO_ADDR
// hc_sex := sex_male ;
71248: LD_ADDR_OWVAR 27
71252: PUSH
71253: LD_INT 1
71255: ST_TO_ADDR
// hc_class := class_apeman ;
71256: LD_ADDR_OWVAR 28
71260: PUSH
71261: LD_INT 12
71263: ST_TO_ADDR
// hc_gallery :=  ;
71264: LD_ADDR_OWVAR 33
71268: PUSH
71269: LD_STRING 
71271: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71272: LD_ADDR_OWVAR 35
71276: PUSH
71277: LD_VAR 0 1
71281: NEG
71282: PPUSH
71283: LD_VAR 0 1
71287: PPUSH
71288: CALL_OW 12
71292: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71293: LD_ADDR_OWVAR 31
71297: PUSH
71298: LD_INT 0
71300: PPUSH
71301: LD_INT 3
71303: PPUSH
71304: CALL_OW 12
71308: PUSH
71309: LD_INT 0
71311: PPUSH
71312: LD_INT 3
71314: PPUSH
71315: CALL_OW 12
71319: PUSH
71320: LD_INT 0
71322: PUSH
71323: LD_INT 0
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: ST_TO_ADDR
// end ;
71332: LD_VAR 0 2
71336: RET
// export function PrepareTiger ( agressivity ) ; begin
71337: LD_INT 0
71339: PPUSH
// uc_side := 0 ;
71340: LD_ADDR_OWVAR 20
71344: PUSH
71345: LD_INT 0
71347: ST_TO_ADDR
// uc_nation := 0 ;
71348: LD_ADDR_OWVAR 21
71352: PUSH
71353: LD_INT 0
71355: ST_TO_ADDR
// hc_class := class_tiger ;
71356: LD_ADDR_OWVAR 28
71360: PUSH
71361: LD_INT 14
71363: ST_TO_ADDR
// hc_gallery :=  ;
71364: LD_ADDR_OWVAR 33
71368: PUSH
71369: LD_STRING 
71371: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71372: LD_ADDR_OWVAR 35
71376: PUSH
71377: LD_VAR 0 1
71381: NEG
71382: PPUSH
71383: LD_VAR 0 1
71387: PPUSH
71388: CALL_OW 12
71392: ST_TO_ADDR
// end ;
71393: LD_VAR 0 2
71397: RET
// export function PrepareEnchidna ( ) ; begin
71398: LD_INT 0
71400: PPUSH
// uc_side := 0 ;
71401: LD_ADDR_OWVAR 20
71405: PUSH
71406: LD_INT 0
71408: ST_TO_ADDR
// uc_nation := 0 ;
71409: LD_ADDR_OWVAR 21
71413: PUSH
71414: LD_INT 0
71416: ST_TO_ADDR
// hc_class := class_baggie ;
71417: LD_ADDR_OWVAR 28
71421: PUSH
71422: LD_INT 13
71424: ST_TO_ADDR
// hc_gallery :=  ;
71425: LD_ADDR_OWVAR 33
71429: PUSH
71430: LD_STRING 
71432: ST_TO_ADDR
// end ;
71433: LD_VAR 0 1
71437: RET
// export function PrepareFrog ( ) ; begin
71438: LD_INT 0
71440: PPUSH
// uc_side := 0 ;
71441: LD_ADDR_OWVAR 20
71445: PUSH
71446: LD_INT 0
71448: ST_TO_ADDR
// uc_nation := 0 ;
71449: LD_ADDR_OWVAR 21
71453: PUSH
71454: LD_INT 0
71456: ST_TO_ADDR
// hc_class := class_frog ;
71457: LD_ADDR_OWVAR 28
71461: PUSH
71462: LD_INT 19
71464: ST_TO_ADDR
// hc_gallery :=  ;
71465: LD_ADDR_OWVAR 33
71469: PUSH
71470: LD_STRING 
71472: ST_TO_ADDR
// end ;
71473: LD_VAR 0 1
71477: RET
// export function PrepareFish ( ) ; begin
71478: LD_INT 0
71480: PPUSH
// uc_side := 0 ;
71481: LD_ADDR_OWVAR 20
71485: PUSH
71486: LD_INT 0
71488: ST_TO_ADDR
// uc_nation := 0 ;
71489: LD_ADDR_OWVAR 21
71493: PUSH
71494: LD_INT 0
71496: ST_TO_ADDR
// hc_class := class_fish ;
71497: LD_ADDR_OWVAR 28
71501: PUSH
71502: LD_INT 20
71504: ST_TO_ADDR
// hc_gallery :=  ;
71505: LD_ADDR_OWVAR 33
71509: PUSH
71510: LD_STRING 
71512: ST_TO_ADDR
// end ;
71513: LD_VAR 0 1
71517: RET
// export function PrepareBird ( ) ; begin
71518: LD_INT 0
71520: PPUSH
// uc_side := 0 ;
71521: LD_ADDR_OWVAR 20
71525: PUSH
71526: LD_INT 0
71528: ST_TO_ADDR
// uc_nation := 0 ;
71529: LD_ADDR_OWVAR 21
71533: PUSH
71534: LD_INT 0
71536: ST_TO_ADDR
// hc_class := class_phororhacos ;
71537: LD_ADDR_OWVAR 28
71541: PUSH
71542: LD_INT 18
71544: ST_TO_ADDR
// hc_gallery :=  ;
71545: LD_ADDR_OWVAR 33
71549: PUSH
71550: LD_STRING 
71552: ST_TO_ADDR
// end ;
71553: LD_VAR 0 1
71557: RET
// export function PrepareHorse ( ) ; begin
71558: LD_INT 0
71560: PPUSH
// uc_side := 0 ;
71561: LD_ADDR_OWVAR 20
71565: PUSH
71566: LD_INT 0
71568: ST_TO_ADDR
// uc_nation := 0 ;
71569: LD_ADDR_OWVAR 21
71573: PUSH
71574: LD_INT 0
71576: ST_TO_ADDR
// hc_class := class_horse ;
71577: LD_ADDR_OWVAR 28
71581: PUSH
71582: LD_INT 21
71584: ST_TO_ADDR
// hc_gallery :=  ;
71585: LD_ADDR_OWVAR 33
71589: PUSH
71590: LD_STRING 
71592: ST_TO_ADDR
// end ;
71593: LD_VAR 0 1
71597: RET
// export function PrepareMastodont ( ) ; begin
71598: LD_INT 0
71600: PPUSH
// uc_side := 0 ;
71601: LD_ADDR_OWVAR 20
71605: PUSH
71606: LD_INT 0
71608: ST_TO_ADDR
// uc_nation := 0 ;
71609: LD_ADDR_OWVAR 21
71613: PUSH
71614: LD_INT 0
71616: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71617: LD_ADDR_OWVAR 37
71621: PUSH
71622: LD_INT 31
71624: ST_TO_ADDR
// vc_control := control_rider ;
71625: LD_ADDR_OWVAR 38
71629: PUSH
71630: LD_INT 4
71632: ST_TO_ADDR
// end ;
71633: LD_VAR 0 1
71637: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71638: LD_INT 0
71640: PPUSH
71641: PPUSH
71642: PPUSH
// uc_side = 0 ;
71643: LD_ADDR_OWVAR 20
71647: PUSH
71648: LD_INT 0
71650: ST_TO_ADDR
// uc_nation = 0 ;
71651: LD_ADDR_OWVAR 21
71655: PUSH
71656: LD_INT 0
71658: ST_TO_ADDR
// InitHc_All ( ) ;
71659: CALL_OW 584
// InitVc ;
71663: CALL_OW 20
// if mastodonts then
71667: LD_VAR 0 6
71671: IFFALSE 71738
// for i = 1 to mastodonts do
71673: LD_ADDR_VAR 0 11
71677: PUSH
71678: DOUBLE
71679: LD_INT 1
71681: DEC
71682: ST_TO_ADDR
71683: LD_VAR 0 6
71687: PUSH
71688: FOR_TO
71689: IFFALSE 71736
// begin vc_chassis := 31 ;
71691: LD_ADDR_OWVAR 37
71695: PUSH
71696: LD_INT 31
71698: ST_TO_ADDR
// vc_control := control_rider ;
71699: LD_ADDR_OWVAR 38
71703: PUSH
71704: LD_INT 4
71706: ST_TO_ADDR
// animal := CreateVehicle ;
71707: LD_ADDR_VAR 0 12
71711: PUSH
71712: CALL_OW 45
71716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71717: LD_VAR 0 12
71721: PPUSH
71722: LD_VAR 0 8
71726: PPUSH
71727: LD_INT 0
71729: PPUSH
71730: CALL 73866 0 3
// end ;
71734: GO 71688
71736: POP
71737: POP
// if horses then
71738: LD_VAR 0 5
71742: IFFALSE 71809
// for i = 1 to horses do
71744: LD_ADDR_VAR 0 11
71748: PUSH
71749: DOUBLE
71750: LD_INT 1
71752: DEC
71753: ST_TO_ADDR
71754: LD_VAR 0 5
71758: PUSH
71759: FOR_TO
71760: IFFALSE 71807
// begin hc_class := 21 ;
71762: LD_ADDR_OWVAR 28
71766: PUSH
71767: LD_INT 21
71769: ST_TO_ADDR
// hc_gallery :=  ;
71770: LD_ADDR_OWVAR 33
71774: PUSH
71775: LD_STRING 
71777: ST_TO_ADDR
// animal := CreateHuman ;
71778: LD_ADDR_VAR 0 12
71782: PUSH
71783: CALL_OW 44
71787: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71788: LD_VAR 0 12
71792: PPUSH
71793: LD_VAR 0 8
71797: PPUSH
71798: LD_INT 0
71800: PPUSH
71801: CALL 73866 0 3
// end ;
71805: GO 71759
71807: POP
71808: POP
// if birds then
71809: LD_VAR 0 1
71813: IFFALSE 71880
// for i = 1 to birds do
71815: LD_ADDR_VAR 0 11
71819: PUSH
71820: DOUBLE
71821: LD_INT 1
71823: DEC
71824: ST_TO_ADDR
71825: LD_VAR 0 1
71829: PUSH
71830: FOR_TO
71831: IFFALSE 71878
// begin hc_class := 18 ;
71833: LD_ADDR_OWVAR 28
71837: PUSH
71838: LD_INT 18
71840: ST_TO_ADDR
// hc_gallery =  ;
71841: LD_ADDR_OWVAR 33
71845: PUSH
71846: LD_STRING 
71848: ST_TO_ADDR
// animal := CreateHuman ;
71849: LD_ADDR_VAR 0 12
71853: PUSH
71854: CALL_OW 44
71858: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71859: LD_VAR 0 12
71863: PPUSH
71864: LD_VAR 0 8
71868: PPUSH
71869: LD_INT 0
71871: PPUSH
71872: CALL 73866 0 3
// end ;
71876: GO 71830
71878: POP
71879: POP
// if tigers then
71880: LD_VAR 0 2
71884: IFFALSE 71968
// for i = 1 to tigers do
71886: LD_ADDR_VAR 0 11
71890: PUSH
71891: DOUBLE
71892: LD_INT 1
71894: DEC
71895: ST_TO_ADDR
71896: LD_VAR 0 2
71900: PUSH
71901: FOR_TO
71902: IFFALSE 71966
// begin hc_class = class_tiger ;
71904: LD_ADDR_OWVAR 28
71908: PUSH
71909: LD_INT 14
71911: ST_TO_ADDR
// hc_gallery =  ;
71912: LD_ADDR_OWVAR 33
71916: PUSH
71917: LD_STRING 
71919: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71920: LD_ADDR_OWVAR 35
71924: PUSH
71925: LD_INT 7
71927: NEG
71928: PPUSH
71929: LD_INT 7
71931: PPUSH
71932: CALL_OW 12
71936: ST_TO_ADDR
// animal := CreateHuman ;
71937: LD_ADDR_VAR 0 12
71941: PUSH
71942: CALL_OW 44
71946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71947: LD_VAR 0 12
71951: PPUSH
71952: LD_VAR 0 8
71956: PPUSH
71957: LD_INT 0
71959: PPUSH
71960: CALL 73866 0 3
// end ;
71964: GO 71901
71966: POP
71967: POP
// if apemans then
71968: LD_VAR 0 3
71972: IFFALSE 72095
// for i = 1 to apemans do
71974: LD_ADDR_VAR 0 11
71978: PUSH
71979: DOUBLE
71980: LD_INT 1
71982: DEC
71983: ST_TO_ADDR
71984: LD_VAR 0 3
71988: PUSH
71989: FOR_TO
71990: IFFALSE 72093
// begin hc_class = class_apeman ;
71992: LD_ADDR_OWVAR 28
71996: PUSH
71997: LD_INT 12
71999: ST_TO_ADDR
// hc_gallery =  ;
72000: LD_ADDR_OWVAR 33
72004: PUSH
72005: LD_STRING 
72007: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72008: LD_ADDR_OWVAR 35
72012: PUSH
72013: LD_INT 2
72015: NEG
72016: PPUSH
72017: LD_INT 2
72019: PPUSH
72020: CALL_OW 12
72024: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72025: LD_ADDR_OWVAR 31
72029: PUSH
72030: LD_INT 1
72032: PPUSH
72033: LD_INT 3
72035: PPUSH
72036: CALL_OW 12
72040: PUSH
72041: LD_INT 1
72043: PPUSH
72044: LD_INT 3
72046: PPUSH
72047: CALL_OW 12
72051: PUSH
72052: LD_INT 0
72054: PUSH
72055: LD_INT 0
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: ST_TO_ADDR
// animal := CreateHuman ;
72064: LD_ADDR_VAR 0 12
72068: PUSH
72069: CALL_OW 44
72073: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72074: LD_VAR 0 12
72078: PPUSH
72079: LD_VAR 0 8
72083: PPUSH
72084: LD_INT 0
72086: PPUSH
72087: CALL 73866 0 3
// end ;
72091: GO 71989
72093: POP
72094: POP
// if enchidnas then
72095: LD_VAR 0 4
72099: IFFALSE 72166
// for i = 1 to enchidnas do
72101: LD_ADDR_VAR 0 11
72105: PUSH
72106: DOUBLE
72107: LD_INT 1
72109: DEC
72110: ST_TO_ADDR
72111: LD_VAR 0 4
72115: PUSH
72116: FOR_TO
72117: IFFALSE 72164
// begin hc_class = 13 ;
72119: LD_ADDR_OWVAR 28
72123: PUSH
72124: LD_INT 13
72126: ST_TO_ADDR
// hc_gallery =  ;
72127: LD_ADDR_OWVAR 33
72131: PUSH
72132: LD_STRING 
72134: ST_TO_ADDR
// animal := CreateHuman ;
72135: LD_ADDR_VAR 0 12
72139: PUSH
72140: CALL_OW 44
72144: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72145: LD_VAR 0 12
72149: PPUSH
72150: LD_VAR 0 8
72154: PPUSH
72155: LD_INT 0
72157: PPUSH
72158: CALL 73866 0 3
// end ;
72162: GO 72116
72164: POP
72165: POP
// if fishes then
72166: LD_VAR 0 7
72170: IFFALSE 72237
// for i = 1 to fishes do
72172: LD_ADDR_VAR 0 11
72176: PUSH
72177: DOUBLE
72178: LD_INT 1
72180: DEC
72181: ST_TO_ADDR
72182: LD_VAR 0 7
72186: PUSH
72187: FOR_TO
72188: IFFALSE 72235
// begin hc_class = 20 ;
72190: LD_ADDR_OWVAR 28
72194: PUSH
72195: LD_INT 20
72197: ST_TO_ADDR
// hc_gallery =  ;
72198: LD_ADDR_OWVAR 33
72202: PUSH
72203: LD_STRING 
72205: ST_TO_ADDR
// animal := CreateHuman ;
72206: LD_ADDR_VAR 0 12
72210: PUSH
72211: CALL_OW 44
72215: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72216: LD_VAR 0 12
72220: PPUSH
72221: LD_VAR 0 9
72225: PPUSH
72226: LD_INT 0
72228: PPUSH
72229: CALL 73866 0 3
// end ;
72233: GO 72187
72235: POP
72236: POP
// end ;
72237: LD_VAR 0 10
72241: RET
// export function WantHeal ( sci , unit ) ; begin
72242: LD_INT 0
72244: PPUSH
// if GetTaskList ( sci ) > 0 then
72245: LD_VAR 0 1
72249: PPUSH
72250: CALL_OW 437
72254: PUSH
72255: LD_INT 0
72257: GREATER
72258: IFFALSE 72328
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72260: LD_VAR 0 1
72264: PPUSH
72265: CALL_OW 437
72269: PUSH
72270: LD_INT 1
72272: ARRAY
72273: PUSH
72274: LD_INT 1
72276: ARRAY
72277: PUSH
72278: LD_STRING l
72280: EQUAL
72281: PUSH
72282: LD_VAR 0 1
72286: PPUSH
72287: CALL_OW 437
72291: PUSH
72292: LD_INT 1
72294: ARRAY
72295: PUSH
72296: LD_INT 4
72298: ARRAY
72299: PUSH
72300: LD_VAR 0 2
72304: EQUAL
72305: AND
72306: IFFALSE 72318
// result := true else
72308: LD_ADDR_VAR 0 3
72312: PUSH
72313: LD_INT 1
72315: ST_TO_ADDR
72316: GO 72326
// result := false ;
72318: LD_ADDR_VAR 0 3
72322: PUSH
72323: LD_INT 0
72325: ST_TO_ADDR
// end else
72326: GO 72336
// result := false ;
72328: LD_ADDR_VAR 0 3
72332: PUSH
72333: LD_INT 0
72335: ST_TO_ADDR
// end ;
72336: LD_VAR 0 3
72340: RET
// export function HealTarget ( sci ) ; begin
72341: LD_INT 0
72343: PPUSH
// if not sci then
72344: LD_VAR 0 1
72348: NOT
72349: IFFALSE 72353
// exit ;
72351: GO 72418
// result := 0 ;
72353: LD_ADDR_VAR 0 2
72357: PUSH
72358: LD_INT 0
72360: ST_TO_ADDR
// if GetTaskList ( sci ) then
72361: LD_VAR 0 1
72365: PPUSH
72366: CALL_OW 437
72370: IFFALSE 72418
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72372: LD_VAR 0 1
72376: PPUSH
72377: CALL_OW 437
72381: PUSH
72382: LD_INT 1
72384: ARRAY
72385: PUSH
72386: LD_INT 1
72388: ARRAY
72389: PUSH
72390: LD_STRING l
72392: EQUAL
72393: IFFALSE 72418
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72395: LD_ADDR_VAR 0 2
72399: PUSH
72400: LD_VAR 0 1
72404: PPUSH
72405: CALL_OW 437
72409: PUSH
72410: LD_INT 1
72412: ARRAY
72413: PUSH
72414: LD_INT 4
72416: ARRAY
72417: ST_TO_ADDR
// end ;
72418: LD_VAR 0 2
72422: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72423: LD_INT 0
72425: PPUSH
72426: PPUSH
72427: PPUSH
72428: PPUSH
// if not base_units then
72429: LD_VAR 0 1
72433: NOT
72434: IFFALSE 72438
// exit ;
72436: GO 72525
// result := false ;
72438: LD_ADDR_VAR 0 2
72442: PUSH
72443: LD_INT 0
72445: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72446: LD_ADDR_VAR 0 5
72450: PUSH
72451: LD_VAR 0 1
72455: PPUSH
72456: LD_INT 21
72458: PUSH
72459: LD_INT 3
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PPUSH
72466: CALL_OW 72
72470: ST_TO_ADDR
// if not tmp then
72471: LD_VAR 0 5
72475: NOT
72476: IFFALSE 72480
// exit ;
72478: GO 72525
// for i in tmp do
72480: LD_ADDR_VAR 0 3
72484: PUSH
72485: LD_VAR 0 5
72489: PUSH
72490: FOR_IN
72491: IFFALSE 72523
// begin result := EnemyInRange ( i , 22 ) ;
72493: LD_ADDR_VAR 0 2
72497: PUSH
72498: LD_VAR 0 3
72502: PPUSH
72503: LD_INT 22
72505: PPUSH
72506: CALL 70112 0 2
72510: ST_TO_ADDR
// if result then
72511: LD_VAR 0 2
72515: IFFALSE 72521
// exit ;
72517: POP
72518: POP
72519: GO 72525
// end ;
72521: GO 72490
72523: POP
72524: POP
// end ;
72525: LD_VAR 0 2
72529: RET
// export function FilterByTag ( units , tag ) ; begin
72530: LD_INT 0
72532: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72533: LD_ADDR_VAR 0 3
72537: PUSH
72538: LD_VAR 0 1
72542: PPUSH
72543: LD_INT 120
72545: PUSH
72546: LD_VAR 0 2
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: PPUSH
72555: CALL_OW 72
72559: ST_TO_ADDR
// end ;
72560: LD_VAR 0 3
72564: RET
// export function IsDriver ( un ) ; begin
72565: LD_INT 0
72567: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72568: LD_ADDR_VAR 0 2
72572: PUSH
72573: LD_VAR 0 1
72577: PUSH
72578: LD_INT 55
72580: PUSH
72581: EMPTY
72582: LIST
72583: PPUSH
72584: CALL_OW 69
72588: IN
72589: ST_TO_ADDR
// end ;
72590: LD_VAR 0 2
72594: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72595: LD_INT 0
72597: PPUSH
72598: PPUSH
// list := [ ] ;
72599: LD_ADDR_VAR 0 5
72603: PUSH
72604: EMPTY
72605: ST_TO_ADDR
// case d of 0 :
72606: LD_VAR 0 3
72610: PUSH
72611: LD_INT 0
72613: DOUBLE
72614: EQUAL
72615: IFTRUE 72619
72617: GO 72752
72619: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72620: LD_ADDR_VAR 0 5
72624: PUSH
72625: LD_VAR 0 1
72629: PUSH
72630: LD_INT 4
72632: MINUS
72633: PUSH
72634: LD_VAR 0 2
72638: PUSH
72639: LD_INT 4
72641: MINUS
72642: PUSH
72643: LD_INT 2
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: LIST
72650: PUSH
72651: LD_VAR 0 1
72655: PUSH
72656: LD_INT 3
72658: MINUS
72659: PUSH
72660: LD_VAR 0 2
72664: PUSH
72665: LD_INT 1
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: LIST
72672: PUSH
72673: LD_VAR 0 1
72677: PUSH
72678: LD_INT 4
72680: PLUS
72681: PUSH
72682: LD_VAR 0 2
72686: PUSH
72687: LD_INT 4
72689: PUSH
72690: EMPTY
72691: LIST
72692: LIST
72693: LIST
72694: PUSH
72695: LD_VAR 0 1
72699: PUSH
72700: LD_INT 3
72702: PLUS
72703: PUSH
72704: LD_VAR 0 2
72708: PUSH
72709: LD_INT 3
72711: PLUS
72712: PUSH
72713: LD_INT 5
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: LIST
72720: PUSH
72721: LD_VAR 0 1
72725: PUSH
72726: LD_VAR 0 2
72730: PUSH
72731: LD_INT 4
72733: PLUS
72734: PUSH
72735: LD_INT 0
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: LIST
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: ST_TO_ADDR
// end ; 1 :
72750: GO 73450
72752: LD_INT 1
72754: DOUBLE
72755: EQUAL
72756: IFTRUE 72760
72758: GO 72893
72760: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72761: LD_ADDR_VAR 0 5
72765: PUSH
72766: LD_VAR 0 1
72770: PUSH
72771: LD_VAR 0 2
72775: PUSH
72776: LD_INT 4
72778: MINUS
72779: PUSH
72780: LD_INT 3
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: LIST
72787: PUSH
72788: LD_VAR 0 1
72792: PUSH
72793: LD_INT 3
72795: MINUS
72796: PUSH
72797: LD_VAR 0 2
72801: PUSH
72802: LD_INT 3
72804: MINUS
72805: PUSH
72806: LD_INT 2
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: LIST
72813: PUSH
72814: LD_VAR 0 1
72818: PUSH
72819: LD_INT 4
72821: MINUS
72822: PUSH
72823: LD_VAR 0 2
72827: PUSH
72828: LD_INT 1
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: LIST
72835: PUSH
72836: LD_VAR 0 1
72840: PUSH
72841: LD_VAR 0 2
72845: PUSH
72846: LD_INT 3
72848: PLUS
72849: PUSH
72850: LD_INT 0
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: LIST
72857: PUSH
72858: LD_VAR 0 1
72862: PUSH
72863: LD_INT 4
72865: PLUS
72866: PUSH
72867: LD_VAR 0 2
72871: PUSH
72872: LD_INT 4
72874: PLUS
72875: PUSH
72876: LD_INT 5
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: LIST
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: ST_TO_ADDR
// end ; 2 :
72891: GO 73450
72893: LD_INT 2
72895: DOUBLE
72896: EQUAL
72897: IFTRUE 72901
72899: GO 73030
72901: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72902: LD_ADDR_VAR 0 5
72906: PUSH
72907: LD_VAR 0 1
72911: PUSH
72912: LD_VAR 0 2
72916: PUSH
72917: LD_INT 3
72919: MINUS
72920: PUSH
72921: LD_INT 3
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: LIST
72928: PUSH
72929: LD_VAR 0 1
72933: PUSH
72934: LD_INT 4
72936: PLUS
72937: PUSH
72938: LD_VAR 0 2
72942: PUSH
72943: LD_INT 4
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: LIST
72950: PUSH
72951: LD_VAR 0 1
72955: PUSH
72956: LD_VAR 0 2
72960: PUSH
72961: LD_INT 4
72963: PLUS
72964: PUSH
72965: LD_INT 0
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: LIST
72972: PUSH
72973: LD_VAR 0 1
72977: PUSH
72978: LD_INT 3
72980: MINUS
72981: PUSH
72982: LD_VAR 0 2
72986: PUSH
72987: LD_INT 1
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: LIST
72994: PUSH
72995: LD_VAR 0 1
72999: PUSH
73000: LD_INT 4
73002: MINUS
73003: PUSH
73004: LD_VAR 0 2
73008: PUSH
73009: LD_INT 4
73011: MINUS
73012: PUSH
73013: LD_INT 2
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: LIST
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: ST_TO_ADDR
// end ; 3 :
73028: GO 73450
73030: LD_INT 3
73032: DOUBLE
73033: EQUAL
73034: IFTRUE 73038
73036: GO 73171
73038: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73039: LD_ADDR_VAR 0 5
73043: PUSH
73044: LD_VAR 0 1
73048: PUSH
73049: LD_INT 3
73051: PLUS
73052: PUSH
73053: LD_VAR 0 2
73057: PUSH
73058: LD_INT 4
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: LIST
73065: PUSH
73066: LD_VAR 0 1
73070: PUSH
73071: LD_INT 4
73073: PLUS
73074: PUSH
73075: LD_VAR 0 2
73079: PUSH
73080: LD_INT 4
73082: PLUS
73083: PUSH
73084: LD_INT 5
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: LIST
73091: PUSH
73092: LD_VAR 0 1
73096: PUSH
73097: LD_INT 4
73099: MINUS
73100: PUSH
73101: LD_VAR 0 2
73105: PUSH
73106: LD_INT 1
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: LIST
73113: PUSH
73114: LD_VAR 0 1
73118: PUSH
73119: LD_VAR 0 2
73123: PUSH
73124: LD_INT 4
73126: MINUS
73127: PUSH
73128: LD_INT 3
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: LIST
73135: PUSH
73136: LD_VAR 0 1
73140: PUSH
73141: LD_INT 3
73143: MINUS
73144: PUSH
73145: LD_VAR 0 2
73149: PUSH
73150: LD_INT 3
73152: MINUS
73153: PUSH
73154: LD_INT 2
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: LIST
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: ST_TO_ADDR
// end ; 4 :
73169: GO 73450
73171: LD_INT 4
73173: DOUBLE
73174: EQUAL
73175: IFTRUE 73179
73177: GO 73312
73179: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73180: LD_ADDR_VAR 0 5
73184: PUSH
73185: LD_VAR 0 1
73189: PUSH
73190: LD_VAR 0 2
73194: PUSH
73195: LD_INT 4
73197: PLUS
73198: PUSH
73199: LD_INT 0
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: LIST
73206: PUSH
73207: LD_VAR 0 1
73211: PUSH
73212: LD_INT 3
73214: PLUS
73215: PUSH
73216: LD_VAR 0 2
73220: PUSH
73221: LD_INT 3
73223: PLUS
73224: PUSH
73225: LD_INT 5
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: LIST
73232: PUSH
73233: LD_VAR 0 1
73237: PUSH
73238: LD_INT 4
73240: PLUS
73241: PUSH
73242: LD_VAR 0 2
73246: PUSH
73247: LD_INT 4
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: LIST
73254: PUSH
73255: LD_VAR 0 1
73259: PUSH
73260: LD_VAR 0 2
73264: PUSH
73265: LD_INT 3
73267: MINUS
73268: PUSH
73269: LD_INT 3
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: LIST
73276: PUSH
73277: LD_VAR 0 1
73281: PUSH
73282: LD_INT 4
73284: MINUS
73285: PUSH
73286: LD_VAR 0 2
73290: PUSH
73291: LD_INT 4
73293: MINUS
73294: PUSH
73295: LD_INT 2
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: LIST
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: ST_TO_ADDR
// end ; 5 :
73310: GO 73450
73312: LD_INT 5
73314: DOUBLE
73315: EQUAL
73316: IFTRUE 73320
73318: GO 73449
73320: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73321: LD_ADDR_VAR 0 5
73325: PUSH
73326: LD_VAR 0 1
73330: PUSH
73331: LD_INT 4
73333: MINUS
73334: PUSH
73335: LD_VAR 0 2
73339: PUSH
73340: LD_INT 1
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: LIST
73347: PUSH
73348: LD_VAR 0 1
73352: PUSH
73353: LD_VAR 0 2
73357: PUSH
73358: LD_INT 4
73360: MINUS
73361: PUSH
73362: LD_INT 3
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: LIST
73369: PUSH
73370: LD_VAR 0 1
73374: PUSH
73375: LD_INT 4
73377: PLUS
73378: PUSH
73379: LD_VAR 0 2
73383: PUSH
73384: LD_INT 4
73386: PLUS
73387: PUSH
73388: LD_INT 5
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: LIST
73395: PUSH
73396: LD_VAR 0 1
73400: PUSH
73401: LD_INT 3
73403: PLUS
73404: PUSH
73405: LD_VAR 0 2
73409: PUSH
73410: LD_INT 4
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: LIST
73417: PUSH
73418: LD_VAR 0 1
73422: PUSH
73423: LD_VAR 0 2
73427: PUSH
73428: LD_INT 3
73430: PLUS
73431: PUSH
73432: LD_INT 0
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: LIST
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: ST_TO_ADDR
// end ; end ;
73447: GO 73450
73449: POP
// result := list ;
73450: LD_ADDR_VAR 0 4
73454: PUSH
73455: LD_VAR 0 5
73459: ST_TO_ADDR
// end ;
73460: LD_VAR 0 4
73464: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73465: LD_INT 0
73467: PPUSH
73468: PPUSH
73469: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73470: LD_VAR 0 1
73474: NOT
73475: PUSH
73476: LD_VAR 0 2
73480: PUSH
73481: LD_INT 1
73483: PUSH
73484: LD_INT 2
73486: PUSH
73487: LD_INT 3
73489: PUSH
73490: LD_INT 4
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: LIST
73497: LIST
73498: IN
73499: NOT
73500: OR
73501: IFFALSE 73505
// exit ;
73503: GO 73588
// tmp := [ ] ;
73505: LD_ADDR_VAR 0 5
73509: PUSH
73510: EMPTY
73511: ST_TO_ADDR
// for i in units do
73512: LD_ADDR_VAR 0 4
73516: PUSH
73517: LD_VAR 0 1
73521: PUSH
73522: FOR_IN
73523: IFFALSE 73557
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
73525: LD_ADDR_VAR 0 5
73529: PUSH
73530: LD_VAR 0 5
73534: PPUSH
73535: LD_VAR 0 4
73539: PPUSH
73540: LD_VAR 0 2
73544: PPUSH
73545: CALL_OW 259
73549: PPUSH
73550: CALL 74961 0 2
73554: ST_TO_ADDR
73555: GO 73522
73557: POP
73558: POP
// if not tmp then
73559: LD_VAR 0 5
73563: NOT
73564: IFFALSE 73568
// exit ;
73566: GO 73588
// result := SortListByListDesc ( units , tmp ) ;
73568: LD_ADDR_VAR 0 3
73572: PUSH
73573: LD_VAR 0 1
73577: PPUSH
73578: LD_VAR 0 5
73582: PPUSH
73583: CALL_OW 77
73587: ST_TO_ADDR
// end ;
73588: LD_VAR 0 3
73592: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73593: LD_INT 0
73595: PPUSH
73596: PPUSH
73597: PPUSH
// result := false ;
73598: LD_ADDR_VAR 0 3
73602: PUSH
73603: LD_INT 0
73605: ST_TO_ADDR
// if not building then
73606: LD_VAR 0 2
73610: NOT
73611: IFFALSE 73615
// exit ;
73613: GO 73753
// x := GetX ( building ) ;
73615: LD_ADDR_VAR 0 4
73619: PUSH
73620: LD_VAR 0 2
73624: PPUSH
73625: CALL_OW 250
73629: ST_TO_ADDR
// y := GetY ( building ) ;
73630: LD_ADDR_VAR 0 5
73634: PUSH
73635: LD_VAR 0 2
73639: PPUSH
73640: CALL_OW 251
73644: ST_TO_ADDR
// if not x or not y then
73645: LD_VAR 0 4
73649: NOT
73650: PUSH
73651: LD_VAR 0 5
73655: NOT
73656: OR
73657: IFFALSE 73661
// exit ;
73659: GO 73753
// if GetTaskList ( unit ) then
73661: LD_VAR 0 1
73665: PPUSH
73666: CALL_OW 437
73670: IFFALSE 73753
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73672: LD_STRING e
73674: PUSH
73675: LD_VAR 0 1
73679: PPUSH
73680: CALL_OW 437
73684: PUSH
73685: LD_INT 1
73687: ARRAY
73688: PUSH
73689: LD_INT 1
73691: ARRAY
73692: EQUAL
73693: PUSH
73694: LD_VAR 0 4
73698: PUSH
73699: LD_VAR 0 1
73703: PPUSH
73704: CALL_OW 437
73708: PUSH
73709: LD_INT 1
73711: ARRAY
73712: PUSH
73713: LD_INT 2
73715: ARRAY
73716: EQUAL
73717: AND
73718: PUSH
73719: LD_VAR 0 5
73723: PUSH
73724: LD_VAR 0 1
73728: PPUSH
73729: CALL_OW 437
73733: PUSH
73734: LD_INT 1
73736: ARRAY
73737: PUSH
73738: LD_INT 3
73740: ARRAY
73741: EQUAL
73742: AND
73743: IFFALSE 73753
// result := true end ;
73745: LD_ADDR_VAR 0 3
73749: PUSH
73750: LD_INT 1
73752: ST_TO_ADDR
// end ;
73753: LD_VAR 0 3
73757: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73758: LD_INT 0
73760: PPUSH
// result := false ;
73761: LD_ADDR_VAR 0 4
73765: PUSH
73766: LD_INT 0
73768: ST_TO_ADDR
// if GetTaskList ( unit ) then
73769: LD_VAR 0 1
73773: PPUSH
73774: CALL_OW 437
73778: IFFALSE 73861
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73780: LD_STRING M
73782: PUSH
73783: LD_VAR 0 1
73787: PPUSH
73788: CALL_OW 437
73792: PUSH
73793: LD_INT 1
73795: ARRAY
73796: PUSH
73797: LD_INT 1
73799: ARRAY
73800: EQUAL
73801: PUSH
73802: LD_VAR 0 2
73806: PUSH
73807: LD_VAR 0 1
73811: PPUSH
73812: CALL_OW 437
73816: PUSH
73817: LD_INT 1
73819: ARRAY
73820: PUSH
73821: LD_INT 2
73823: ARRAY
73824: EQUAL
73825: AND
73826: PUSH
73827: LD_VAR 0 3
73831: PUSH
73832: LD_VAR 0 1
73836: PPUSH
73837: CALL_OW 437
73841: PUSH
73842: LD_INT 1
73844: ARRAY
73845: PUSH
73846: LD_INT 3
73848: ARRAY
73849: EQUAL
73850: AND
73851: IFFALSE 73861
// result := true ;
73853: LD_ADDR_VAR 0 4
73857: PUSH
73858: LD_INT 1
73860: ST_TO_ADDR
// end ; end ;
73861: LD_VAR 0 4
73865: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73866: LD_INT 0
73868: PPUSH
73869: PPUSH
73870: PPUSH
73871: PPUSH
// if not unit or not area then
73872: LD_VAR 0 1
73876: NOT
73877: PUSH
73878: LD_VAR 0 2
73882: NOT
73883: OR
73884: IFFALSE 73888
// exit ;
73886: GO 74064
// tmp := AreaToList ( area , i ) ;
73888: LD_ADDR_VAR 0 6
73892: PUSH
73893: LD_VAR 0 2
73897: PPUSH
73898: LD_VAR 0 5
73902: PPUSH
73903: CALL_OW 517
73907: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73908: LD_ADDR_VAR 0 5
73912: PUSH
73913: DOUBLE
73914: LD_INT 1
73916: DEC
73917: ST_TO_ADDR
73918: LD_VAR 0 6
73922: PUSH
73923: LD_INT 1
73925: ARRAY
73926: PUSH
73927: FOR_TO
73928: IFFALSE 74062
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73930: LD_ADDR_VAR 0 7
73934: PUSH
73935: LD_VAR 0 6
73939: PUSH
73940: LD_INT 1
73942: ARRAY
73943: PUSH
73944: LD_VAR 0 5
73948: ARRAY
73949: PUSH
73950: LD_VAR 0 6
73954: PUSH
73955: LD_INT 2
73957: ARRAY
73958: PUSH
73959: LD_VAR 0 5
73963: ARRAY
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
73969: LD_INT 92
73971: PUSH
73972: LD_VAR 0 7
73976: PUSH
73977: LD_INT 1
73979: ARRAY
73980: PUSH
73981: LD_VAR 0 7
73985: PUSH
73986: LD_INT 2
73988: ARRAY
73989: PUSH
73990: LD_INT 2
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: PPUSH
73999: CALL_OW 69
74003: PUSH
74004: LD_INT 0
74006: EQUAL
74007: IFFALSE 74060
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74009: LD_VAR 0 1
74013: PPUSH
74014: LD_VAR 0 7
74018: PUSH
74019: LD_INT 1
74021: ARRAY
74022: PPUSH
74023: LD_VAR 0 7
74027: PUSH
74028: LD_INT 2
74030: ARRAY
74031: PPUSH
74032: LD_VAR 0 3
74036: PPUSH
74037: CALL_OW 48
// result := IsPlaced ( unit ) ;
74041: LD_ADDR_VAR 0 4
74045: PUSH
74046: LD_VAR 0 1
74050: PPUSH
74051: CALL_OW 305
74055: ST_TO_ADDR
// exit ;
74056: POP
74057: POP
74058: GO 74064
// end ; end ;
74060: GO 73927
74062: POP
74063: POP
// end ;
74064: LD_VAR 0 4
74068: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74069: LD_INT 0
74071: PPUSH
74072: PPUSH
74073: PPUSH
// if not side or side > 8 then
74074: LD_VAR 0 1
74078: NOT
74079: PUSH
74080: LD_VAR 0 1
74084: PUSH
74085: LD_INT 8
74087: GREATER
74088: OR
74089: IFFALSE 74093
// exit ;
74091: GO 74280
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74093: LD_ADDR_VAR 0 4
74097: PUSH
74098: LD_INT 22
74100: PUSH
74101: LD_VAR 0 1
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PUSH
74110: LD_INT 21
74112: PUSH
74113: LD_INT 3
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PPUSH
74124: CALL_OW 69
74128: ST_TO_ADDR
// if not tmp then
74129: LD_VAR 0 4
74133: NOT
74134: IFFALSE 74138
// exit ;
74136: GO 74280
// enable_addtolog := true ;
74138: LD_ADDR_OWVAR 81
74142: PUSH
74143: LD_INT 1
74145: ST_TO_ADDR
// AddToLog ( [ ) ;
74146: LD_STRING [
74148: PPUSH
74149: CALL_OW 561
// for i in tmp do
74153: LD_ADDR_VAR 0 3
74157: PUSH
74158: LD_VAR 0 4
74162: PUSH
74163: FOR_IN
74164: IFFALSE 74271
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74166: LD_STRING [
74168: PUSH
74169: LD_VAR 0 3
74173: PPUSH
74174: CALL_OW 266
74178: STR
74179: PUSH
74180: LD_STRING , 
74182: STR
74183: PUSH
74184: LD_VAR 0 3
74188: PPUSH
74189: CALL_OW 250
74193: STR
74194: PUSH
74195: LD_STRING , 
74197: STR
74198: PUSH
74199: LD_VAR 0 3
74203: PPUSH
74204: CALL_OW 251
74208: STR
74209: PUSH
74210: LD_STRING , 
74212: STR
74213: PUSH
74214: LD_VAR 0 3
74218: PPUSH
74219: CALL_OW 254
74223: STR
74224: PUSH
74225: LD_STRING , 
74227: STR
74228: PUSH
74229: LD_VAR 0 3
74233: PPUSH
74234: LD_INT 1
74236: PPUSH
74237: CALL_OW 268
74241: STR
74242: PUSH
74243: LD_STRING , 
74245: STR
74246: PUSH
74247: LD_VAR 0 3
74251: PPUSH
74252: LD_INT 2
74254: PPUSH
74255: CALL_OW 268
74259: STR
74260: PUSH
74261: LD_STRING ],
74263: STR
74264: PPUSH
74265: CALL_OW 561
// end ;
74269: GO 74163
74271: POP
74272: POP
// AddToLog ( ]; ) ;
74273: LD_STRING ];
74275: PPUSH
74276: CALL_OW 561
// end ;
74280: LD_VAR 0 2
74284: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74285: LD_INT 0
74287: PPUSH
74288: PPUSH
74289: PPUSH
74290: PPUSH
74291: PPUSH
// if not area or not rate or not max then
74292: LD_VAR 0 1
74296: NOT
74297: PUSH
74298: LD_VAR 0 2
74302: NOT
74303: OR
74304: PUSH
74305: LD_VAR 0 4
74309: NOT
74310: OR
74311: IFFALSE 74315
// exit ;
74313: GO 74504
// while 1 do
74315: LD_INT 1
74317: IFFALSE 74504
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74319: LD_ADDR_VAR 0 9
74323: PUSH
74324: LD_VAR 0 1
74328: PPUSH
74329: LD_INT 1
74331: PPUSH
74332: CALL_OW 287
74336: PUSH
74337: LD_INT 10
74339: MUL
74340: ST_TO_ADDR
// r := rate / 10 ;
74341: LD_ADDR_VAR 0 7
74345: PUSH
74346: LD_VAR 0 2
74350: PUSH
74351: LD_INT 10
74353: DIVREAL
74354: ST_TO_ADDR
// time := 1 1$00 ;
74355: LD_ADDR_VAR 0 8
74359: PUSH
74360: LD_INT 2100
74362: ST_TO_ADDR
// if amount < min then
74363: LD_VAR 0 9
74367: PUSH
74368: LD_VAR 0 3
74372: LESS
74373: IFFALSE 74391
// r := r * 2 else
74375: LD_ADDR_VAR 0 7
74379: PUSH
74380: LD_VAR 0 7
74384: PUSH
74385: LD_INT 2
74387: MUL
74388: ST_TO_ADDR
74389: GO 74417
// if amount > max then
74391: LD_VAR 0 9
74395: PUSH
74396: LD_VAR 0 4
74400: GREATER
74401: IFFALSE 74417
// r := r / 2 ;
74403: LD_ADDR_VAR 0 7
74407: PUSH
74408: LD_VAR 0 7
74412: PUSH
74413: LD_INT 2
74415: DIVREAL
74416: ST_TO_ADDR
// time := time / r ;
74417: LD_ADDR_VAR 0 8
74421: PUSH
74422: LD_VAR 0 8
74426: PUSH
74427: LD_VAR 0 7
74431: DIVREAL
74432: ST_TO_ADDR
// if time < 0 then
74433: LD_VAR 0 8
74437: PUSH
74438: LD_INT 0
74440: LESS
74441: IFFALSE 74458
// time := time * - 1 ;
74443: LD_ADDR_VAR 0 8
74447: PUSH
74448: LD_VAR 0 8
74452: PUSH
74453: LD_INT 1
74455: NEG
74456: MUL
74457: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74458: LD_VAR 0 8
74462: PUSH
74463: LD_INT 35
74465: PPUSH
74466: LD_INT 875
74468: PPUSH
74469: CALL_OW 12
74473: PLUS
74474: PPUSH
74475: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74479: LD_INT 1
74481: PPUSH
74482: LD_INT 5
74484: PPUSH
74485: CALL_OW 12
74489: PPUSH
74490: LD_VAR 0 1
74494: PPUSH
74495: LD_INT 1
74497: PPUSH
74498: CALL_OW 55
// end ;
74502: GO 74315
// end ;
74504: LD_VAR 0 5
74508: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74509: LD_INT 0
74511: PPUSH
74512: PPUSH
74513: PPUSH
74514: PPUSH
74515: PPUSH
74516: PPUSH
74517: PPUSH
74518: PPUSH
// if not turrets or not factories then
74519: LD_VAR 0 1
74523: NOT
74524: PUSH
74525: LD_VAR 0 2
74529: NOT
74530: OR
74531: IFFALSE 74535
// exit ;
74533: GO 74842
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74535: LD_ADDR_VAR 0 10
74539: PUSH
74540: LD_INT 5
74542: PUSH
74543: LD_INT 6
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: PUSH
74550: LD_INT 2
74552: PUSH
74553: LD_INT 4
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: PUSH
74560: LD_INT 3
74562: PUSH
74563: LD_INT 5
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: LIST
74574: PUSH
74575: LD_INT 24
74577: PUSH
74578: LD_INT 25
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PUSH
74585: LD_INT 23
74587: PUSH
74588: LD_INT 27
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: LD_INT 42
74601: PUSH
74602: LD_INT 43
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: PUSH
74609: LD_INT 44
74611: PUSH
74612: LD_INT 46
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: LD_INT 45
74621: PUSH
74622: LD_INT 47
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: LIST
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: LIST
74638: ST_TO_ADDR
// result := [ ] ;
74639: LD_ADDR_VAR 0 3
74643: PUSH
74644: EMPTY
74645: ST_TO_ADDR
// for i in turrets do
74646: LD_ADDR_VAR 0 4
74650: PUSH
74651: LD_VAR 0 1
74655: PUSH
74656: FOR_IN
74657: IFFALSE 74840
// begin nat := GetNation ( i ) ;
74659: LD_ADDR_VAR 0 7
74663: PUSH
74664: LD_VAR 0 4
74668: PPUSH
74669: CALL_OW 248
74673: ST_TO_ADDR
// weapon := 0 ;
74674: LD_ADDR_VAR 0 8
74678: PUSH
74679: LD_INT 0
74681: ST_TO_ADDR
// if not nat then
74682: LD_VAR 0 7
74686: NOT
74687: IFFALSE 74691
// continue ;
74689: GO 74656
// for j in list [ nat ] do
74691: LD_ADDR_VAR 0 5
74695: PUSH
74696: LD_VAR 0 10
74700: PUSH
74701: LD_VAR 0 7
74705: ARRAY
74706: PUSH
74707: FOR_IN
74708: IFFALSE 74749
// if GetBWeapon ( i ) = j [ 1 ] then
74710: LD_VAR 0 4
74714: PPUSH
74715: CALL_OW 269
74719: PUSH
74720: LD_VAR 0 5
74724: PUSH
74725: LD_INT 1
74727: ARRAY
74728: EQUAL
74729: IFFALSE 74747
// begin weapon := j [ 2 ] ;
74731: LD_ADDR_VAR 0 8
74735: PUSH
74736: LD_VAR 0 5
74740: PUSH
74741: LD_INT 2
74743: ARRAY
74744: ST_TO_ADDR
// break ;
74745: GO 74749
// end ;
74747: GO 74707
74749: POP
74750: POP
// if not weapon then
74751: LD_VAR 0 8
74755: NOT
74756: IFFALSE 74760
// continue ;
74758: GO 74656
// for k in factories do
74760: LD_ADDR_VAR 0 6
74764: PUSH
74765: LD_VAR 0 2
74769: PUSH
74770: FOR_IN
74771: IFFALSE 74836
// begin weapons := AvailableWeaponList ( k ) ;
74773: LD_ADDR_VAR 0 9
74777: PUSH
74778: LD_VAR 0 6
74782: PPUSH
74783: CALL_OW 478
74787: ST_TO_ADDR
// if not weapons then
74788: LD_VAR 0 9
74792: NOT
74793: IFFALSE 74797
// continue ;
74795: GO 74770
// if weapon in weapons then
74797: LD_VAR 0 8
74801: PUSH
74802: LD_VAR 0 9
74806: IN
74807: IFFALSE 74834
// begin result := [ i , weapon ] ;
74809: LD_ADDR_VAR 0 3
74813: PUSH
74814: LD_VAR 0 4
74818: PUSH
74819: LD_VAR 0 8
74823: PUSH
74824: EMPTY
74825: LIST
74826: LIST
74827: ST_TO_ADDR
// exit ;
74828: POP
74829: POP
74830: POP
74831: POP
74832: GO 74842
// end ; end ;
74834: GO 74770
74836: POP
74837: POP
// end ;
74838: GO 74656
74840: POP
74841: POP
// end ;
74842: LD_VAR 0 3
74846: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74847: LD_INT 0
74849: PPUSH
// if not side or side > 8 then
74850: LD_VAR 0 3
74854: NOT
74855: PUSH
74856: LD_VAR 0 3
74860: PUSH
74861: LD_INT 8
74863: GREATER
74864: OR
74865: IFFALSE 74869
// exit ;
74867: GO 74928
// if not range then
74869: LD_VAR 0 4
74873: NOT
74874: IFFALSE 74885
// range := - 12 ;
74876: LD_ADDR_VAR 0 4
74880: PUSH
74881: LD_INT 12
74883: NEG
74884: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74885: LD_VAR 0 1
74889: PPUSH
74890: LD_VAR 0 2
74894: PPUSH
74895: LD_VAR 0 3
74899: PPUSH
74900: LD_VAR 0 4
74904: PPUSH
74905: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74909: LD_VAR 0 1
74913: PPUSH
74914: LD_VAR 0 2
74918: PPUSH
74919: LD_VAR 0 3
74923: PPUSH
74924: CALL_OW 331
// end ;
74928: LD_VAR 0 5
74932: RET
// export function Video ( mode ) ; begin
74933: LD_INT 0
74935: PPUSH
// ingame_video = mode ;
74936: LD_ADDR_OWVAR 52
74940: PUSH
74941: LD_VAR 0 1
74945: ST_TO_ADDR
// interface_hidden = mode ;
74946: LD_ADDR_OWVAR 54
74950: PUSH
74951: LD_VAR 0 1
74955: ST_TO_ADDR
// end ;
74956: LD_VAR 0 2
74960: RET
// export function Join ( array , element ) ; begin
74961: LD_INT 0
74963: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74964: LD_ADDR_VAR 0 3
74968: PUSH
74969: LD_VAR 0 1
74973: PPUSH
74974: LD_VAR 0 1
74978: PUSH
74979: LD_INT 1
74981: PLUS
74982: PPUSH
74983: LD_VAR 0 2
74987: PPUSH
74988: CALL_OW 1
74992: ST_TO_ADDR
// end ;
74993: LD_VAR 0 3
74997: RET
// export function JoinUnion ( array , element ) ; begin
74998: LD_INT 0
75000: PPUSH
// result := array union element ;
75001: LD_ADDR_VAR 0 3
75005: PUSH
75006: LD_VAR 0 1
75010: PUSH
75011: LD_VAR 0 2
75015: UNION
75016: ST_TO_ADDR
// end ;
75017: LD_VAR 0 3
75021: RET
// export function GetBehemoths ( side ) ; begin
75022: LD_INT 0
75024: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75025: LD_ADDR_VAR 0 2
75029: PUSH
75030: LD_INT 22
75032: PUSH
75033: LD_VAR 0 1
75037: PUSH
75038: EMPTY
75039: LIST
75040: LIST
75041: PUSH
75042: LD_INT 31
75044: PUSH
75045: LD_INT 25
75047: PUSH
75048: EMPTY
75049: LIST
75050: LIST
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: PPUSH
75056: CALL_OW 69
75060: ST_TO_ADDR
// end ;
75061: LD_VAR 0 2
75065: RET
// export function Shuffle ( array ) ; var i , index ; begin
75066: LD_INT 0
75068: PPUSH
75069: PPUSH
75070: PPUSH
// result := [ ] ;
75071: LD_ADDR_VAR 0 2
75075: PUSH
75076: EMPTY
75077: ST_TO_ADDR
// if not array then
75078: LD_VAR 0 1
75082: NOT
75083: IFFALSE 75087
// exit ;
75085: GO 75186
// Randomize ;
75087: CALL_OW 10
// for i = array downto 1 do
75091: LD_ADDR_VAR 0 3
75095: PUSH
75096: DOUBLE
75097: LD_VAR 0 1
75101: INC
75102: ST_TO_ADDR
75103: LD_INT 1
75105: PUSH
75106: FOR_DOWNTO
75107: IFFALSE 75184
// begin index := rand ( 1 , array ) ;
75109: LD_ADDR_VAR 0 4
75113: PUSH
75114: LD_INT 1
75116: PPUSH
75117: LD_VAR 0 1
75121: PPUSH
75122: CALL_OW 12
75126: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75127: LD_ADDR_VAR 0 2
75131: PUSH
75132: LD_VAR 0 2
75136: PPUSH
75137: LD_VAR 0 2
75141: PUSH
75142: LD_INT 1
75144: PLUS
75145: PPUSH
75146: LD_VAR 0 1
75150: PUSH
75151: LD_VAR 0 4
75155: ARRAY
75156: PPUSH
75157: CALL_OW 2
75161: ST_TO_ADDR
// array := Delete ( array , index ) ;
75162: LD_ADDR_VAR 0 1
75166: PUSH
75167: LD_VAR 0 1
75171: PPUSH
75172: LD_VAR 0 4
75176: PPUSH
75177: CALL_OW 3
75181: ST_TO_ADDR
// end ;
75182: GO 75106
75184: POP
75185: POP
// end ;
75186: LD_VAR 0 2
75190: RET
// export function GetBaseMaterials ( base ) ; begin
75191: LD_INT 0
75193: PPUSH
// result := [ 0 , 0 , 0 ] ;
75194: LD_ADDR_VAR 0 2
75198: PUSH
75199: LD_INT 0
75201: PUSH
75202: LD_INT 0
75204: PUSH
75205: LD_INT 0
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: LIST
75212: ST_TO_ADDR
// if not base then
75213: LD_VAR 0 1
75217: NOT
75218: IFFALSE 75222
// exit ;
75220: GO 75271
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75222: LD_ADDR_VAR 0 2
75226: PUSH
75227: LD_VAR 0 1
75231: PPUSH
75232: LD_INT 1
75234: PPUSH
75235: CALL_OW 275
75239: PUSH
75240: LD_VAR 0 1
75244: PPUSH
75245: LD_INT 2
75247: PPUSH
75248: CALL_OW 275
75252: PUSH
75253: LD_VAR 0 1
75257: PPUSH
75258: LD_INT 3
75260: PPUSH
75261: CALL_OW 275
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: LIST
75270: ST_TO_ADDR
// end ;
75271: LD_VAR 0 2
75275: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75276: LD_INT 0
75278: PPUSH
75279: PPUSH
// result := array ;
75280: LD_ADDR_VAR 0 3
75284: PUSH
75285: LD_VAR 0 1
75289: ST_TO_ADDR
// if size >= result then
75290: LD_VAR 0 2
75294: PUSH
75295: LD_VAR 0 3
75299: GREATEREQUAL
75300: IFFALSE 75304
// exit ;
75302: GO 75354
// if size then
75304: LD_VAR 0 2
75308: IFFALSE 75354
// for i := array downto size do
75310: LD_ADDR_VAR 0 4
75314: PUSH
75315: DOUBLE
75316: LD_VAR 0 1
75320: INC
75321: ST_TO_ADDR
75322: LD_VAR 0 2
75326: PUSH
75327: FOR_DOWNTO
75328: IFFALSE 75352
// result := Delete ( result , result ) ;
75330: LD_ADDR_VAR 0 3
75334: PUSH
75335: LD_VAR 0 3
75339: PPUSH
75340: LD_VAR 0 3
75344: PPUSH
75345: CALL_OW 3
75349: ST_TO_ADDR
75350: GO 75327
75352: POP
75353: POP
// end ;
75354: LD_VAR 0 3
75358: RET
// export function ComExit ( unit ) ; var tmp ; begin
75359: LD_INT 0
75361: PPUSH
75362: PPUSH
// if not IsInUnit ( unit ) then
75363: LD_VAR 0 1
75367: PPUSH
75368: CALL_OW 310
75372: NOT
75373: IFFALSE 75377
// exit ;
75375: GO 75437
// tmp := IsInUnit ( unit ) ;
75377: LD_ADDR_VAR 0 3
75381: PUSH
75382: LD_VAR 0 1
75386: PPUSH
75387: CALL_OW 310
75391: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75392: LD_VAR 0 3
75396: PPUSH
75397: CALL_OW 247
75401: PUSH
75402: LD_INT 2
75404: EQUAL
75405: IFFALSE 75418
// ComExitVehicle ( unit ) else
75407: LD_VAR 0 1
75411: PPUSH
75412: CALL_OW 121
75416: GO 75427
// ComExitBuilding ( unit ) ;
75418: LD_VAR 0 1
75422: PPUSH
75423: CALL_OW 122
// result := tmp ;
75427: LD_ADDR_VAR 0 2
75431: PUSH
75432: LD_VAR 0 3
75436: ST_TO_ADDR
// end ;
75437: LD_VAR 0 2
75441: RET
// export function ComExitAll ( units ) ; var i ; begin
75442: LD_INT 0
75444: PPUSH
75445: PPUSH
// if not units then
75446: LD_VAR 0 1
75450: NOT
75451: IFFALSE 75455
// exit ;
75453: GO 75481
// for i in units do
75455: LD_ADDR_VAR 0 3
75459: PUSH
75460: LD_VAR 0 1
75464: PUSH
75465: FOR_IN
75466: IFFALSE 75479
// ComExit ( i ) ;
75468: LD_VAR 0 3
75472: PPUSH
75473: CALL 75359 0 1
75477: GO 75465
75479: POP
75480: POP
// end ;
75481: LD_VAR 0 2
75485: RET
// export function ResetHc ; begin
75486: LD_INT 0
75488: PPUSH
// InitHc ;
75489: CALL_OW 19
// hc_importance := 0 ;
75493: LD_ADDR_OWVAR 32
75497: PUSH
75498: LD_INT 0
75500: ST_TO_ADDR
// end ;
75501: LD_VAR 0 1
75505: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75506: LD_INT 0
75508: PPUSH
75509: PPUSH
75510: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75511: LD_ADDR_VAR 0 6
75515: PUSH
75516: LD_VAR 0 1
75520: PUSH
75521: LD_VAR 0 3
75525: PLUS
75526: PUSH
75527: LD_INT 2
75529: DIV
75530: ST_TO_ADDR
// if _x < 0 then
75531: LD_VAR 0 6
75535: PUSH
75536: LD_INT 0
75538: LESS
75539: IFFALSE 75556
// _x := _x * - 1 ;
75541: LD_ADDR_VAR 0 6
75545: PUSH
75546: LD_VAR 0 6
75550: PUSH
75551: LD_INT 1
75553: NEG
75554: MUL
75555: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75556: LD_ADDR_VAR 0 7
75560: PUSH
75561: LD_VAR 0 2
75565: PUSH
75566: LD_VAR 0 4
75570: PLUS
75571: PUSH
75572: LD_INT 2
75574: DIV
75575: ST_TO_ADDR
// if _y < 0 then
75576: LD_VAR 0 7
75580: PUSH
75581: LD_INT 0
75583: LESS
75584: IFFALSE 75601
// _y := _y * - 1 ;
75586: LD_ADDR_VAR 0 7
75590: PUSH
75591: LD_VAR 0 7
75595: PUSH
75596: LD_INT 1
75598: NEG
75599: MUL
75600: ST_TO_ADDR
// result := [ _x , _y ] ;
75601: LD_ADDR_VAR 0 5
75605: PUSH
75606: LD_VAR 0 6
75610: PUSH
75611: LD_VAR 0 7
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: ST_TO_ADDR
// end ;
75620: LD_VAR 0 5
75624: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75625: LD_INT 0
75627: PPUSH
75628: PPUSH
75629: PPUSH
75630: PPUSH
// task := GetTaskList ( unit ) ;
75631: LD_ADDR_VAR 0 7
75635: PUSH
75636: LD_VAR 0 1
75640: PPUSH
75641: CALL_OW 437
75645: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75646: LD_VAR 0 7
75650: NOT
75651: PUSH
75652: LD_VAR 0 1
75656: PPUSH
75657: LD_VAR 0 2
75661: PPUSH
75662: CALL_OW 308
75666: NOT
75667: AND
75668: IFFALSE 75672
// exit ;
75670: GO 75790
// if IsInArea ( unit , area ) then
75672: LD_VAR 0 1
75676: PPUSH
75677: LD_VAR 0 2
75681: PPUSH
75682: CALL_OW 308
75686: IFFALSE 75704
// begin ComMoveToArea ( unit , goAway ) ;
75688: LD_VAR 0 1
75692: PPUSH
75693: LD_VAR 0 3
75697: PPUSH
75698: CALL_OW 113
// exit ;
75702: GO 75790
// end ; if task [ 1 ] [ 1 ] <> M then
75704: LD_VAR 0 7
75708: PUSH
75709: LD_INT 1
75711: ARRAY
75712: PUSH
75713: LD_INT 1
75715: ARRAY
75716: PUSH
75717: LD_STRING M
75719: NONEQUAL
75720: IFFALSE 75724
// exit ;
75722: GO 75790
// x := task [ 1 ] [ 2 ] ;
75724: LD_ADDR_VAR 0 5
75728: PUSH
75729: LD_VAR 0 7
75733: PUSH
75734: LD_INT 1
75736: ARRAY
75737: PUSH
75738: LD_INT 2
75740: ARRAY
75741: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75742: LD_ADDR_VAR 0 6
75746: PUSH
75747: LD_VAR 0 7
75751: PUSH
75752: LD_INT 1
75754: ARRAY
75755: PUSH
75756: LD_INT 3
75758: ARRAY
75759: ST_TO_ADDR
// if InArea ( x , y , area ) then
75760: LD_VAR 0 5
75764: PPUSH
75765: LD_VAR 0 6
75769: PPUSH
75770: LD_VAR 0 2
75774: PPUSH
75775: CALL_OW 309
75779: IFFALSE 75790
// ComStop ( unit ) ;
75781: LD_VAR 0 1
75785: PPUSH
75786: CALL_OW 141
// end ;
75790: LD_VAR 0 4
75794: RET
// export function Abs ( value ) ; begin
75795: LD_INT 0
75797: PPUSH
// result := value ;
75798: LD_ADDR_VAR 0 2
75802: PUSH
75803: LD_VAR 0 1
75807: ST_TO_ADDR
// if value < 0 then
75808: LD_VAR 0 1
75812: PUSH
75813: LD_INT 0
75815: LESS
75816: IFFALSE 75833
// result := value * - 1 ;
75818: LD_ADDR_VAR 0 2
75822: PUSH
75823: LD_VAR 0 1
75827: PUSH
75828: LD_INT 1
75830: NEG
75831: MUL
75832: ST_TO_ADDR
// end ;
75833: LD_VAR 0 2
75837: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75838: LD_INT 0
75840: PPUSH
75841: PPUSH
75842: PPUSH
75843: PPUSH
75844: PPUSH
75845: PPUSH
75846: PPUSH
75847: PPUSH
// if not unit or not building then
75848: LD_VAR 0 1
75852: NOT
75853: PUSH
75854: LD_VAR 0 2
75858: NOT
75859: OR
75860: IFFALSE 75864
// exit ;
75862: GO 76090
// x := GetX ( building ) ;
75864: LD_ADDR_VAR 0 4
75868: PUSH
75869: LD_VAR 0 2
75873: PPUSH
75874: CALL_OW 250
75878: ST_TO_ADDR
// y := GetY ( building ) ;
75879: LD_ADDR_VAR 0 6
75883: PUSH
75884: LD_VAR 0 2
75888: PPUSH
75889: CALL_OW 251
75893: ST_TO_ADDR
// d := GetDir ( building ) ;
75894: LD_ADDR_VAR 0 8
75898: PUSH
75899: LD_VAR 0 2
75903: PPUSH
75904: CALL_OW 254
75908: ST_TO_ADDR
// r := 4 ;
75909: LD_ADDR_VAR 0 9
75913: PUSH
75914: LD_INT 4
75916: ST_TO_ADDR
// for i := 1 to 5 do
75917: LD_ADDR_VAR 0 10
75921: PUSH
75922: DOUBLE
75923: LD_INT 1
75925: DEC
75926: ST_TO_ADDR
75927: LD_INT 5
75929: PUSH
75930: FOR_TO
75931: IFFALSE 76088
// begin _x := ShiftX ( x , d , r + i ) ;
75933: LD_ADDR_VAR 0 5
75937: PUSH
75938: LD_VAR 0 4
75942: PPUSH
75943: LD_VAR 0 8
75947: PPUSH
75948: LD_VAR 0 9
75952: PUSH
75953: LD_VAR 0 10
75957: PLUS
75958: PPUSH
75959: CALL_OW 272
75963: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75964: LD_ADDR_VAR 0 7
75968: PUSH
75969: LD_VAR 0 6
75973: PPUSH
75974: LD_VAR 0 8
75978: PPUSH
75979: LD_VAR 0 9
75983: PUSH
75984: LD_VAR 0 10
75988: PLUS
75989: PPUSH
75990: CALL_OW 273
75994: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75995: LD_VAR 0 5
75999: PPUSH
76000: LD_VAR 0 7
76004: PPUSH
76005: CALL_OW 488
76009: PUSH
76010: LD_VAR 0 5
76014: PPUSH
76015: LD_VAR 0 7
76019: PPUSH
76020: CALL_OW 428
76024: PPUSH
76025: CALL_OW 247
76029: PUSH
76030: LD_INT 3
76032: PUSH
76033: LD_INT 2
76035: PUSH
76036: EMPTY
76037: LIST
76038: LIST
76039: IN
76040: NOT
76041: AND
76042: IFFALSE 76086
// begin ComMoveXY ( unit , _x , _y ) ;
76044: LD_VAR 0 1
76048: PPUSH
76049: LD_VAR 0 5
76053: PPUSH
76054: LD_VAR 0 7
76058: PPUSH
76059: CALL_OW 111
// result := [ _x , _y ] ;
76063: LD_ADDR_VAR 0 3
76067: PUSH
76068: LD_VAR 0 5
76072: PUSH
76073: LD_VAR 0 7
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: ST_TO_ADDR
// exit ;
76082: POP
76083: POP
76084: GO 76090
// end ; end ;
76086: GO 75930
76088: POP
76089: POP
// end ;
76090: LD_VAR 0 3
76094: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76095: LD_INT 0
76097: PPUSH
76098: PPUSH
76099: PPUSH
// result := 0 ;
76100: LD_ADDR_VAR 0 3
76104: PUSH
76105: LD_INT 0
76107: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76108: LD_VAR 0 1
76112: PUSH
76113: LD_INT 0
76115: LESS
76116: PUSH
76117: LD_VAR 0 1
76121: PUSH
76122: LD_INT 8
76124: GREATER
76125: OR
76126: PUSH
76127: LD_VAR 0 2
76131: PUSH
76132: LD_INT 0
76134: LESS
76135: OR
76136: PUSH
76137: LD_VAR 0 2
76141: PUSH
76142: LD_INT 8
76144: GREATER
76145: OR
76146: IFFALSE 76150
// exit ;
76148: GO 76225
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76150: LD_ADDR_VAR 0 4
76154: PUSH
76155: LD_INT 22
76157: PUSH
76158: LD_VAR 0 2
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: PPUSH
76167: CALL_OW 69
76171: PUSH
76172: FOR_IN
76173: IFFALSE 76223
// begin un := UnitShoot ( i ) ;
76175: LD_ADDR_VAR 0 5
76179: PUSH
76180: LD_VAR 0 4
76184: PPUSH
76185: CALL_OW 504
76189: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76190: LD_VAR 0 5
76194: PPUSH
76195: CALL_OW 255
76199: PUSH
76200: LD_VAR 0 1
76204: EQUAL
76205: IFFALSE 76221
// begin result := un ;
76207: LD_ADDR_VAR 0 3
76211: PUSH
76212: LD_VAR 0 5
76216: ST_TO_ADDR
// exit ;
76217: POP
76218: POP
76219: GO 76225
// end ; end ;
76221: GO 76172
76223: POP
76224: POP
// end ;
76225: LD_VAR 0 3
76229: RET
// export function GetCargoBay ( units ) ; begin
76230: LD_INT 0
76232: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76233: LD_ADDR_VAR 0 2
76237: PUSH
76238: LD_VAR 0 1
76242: PPUSH
76243: LD_INT 2
76245: PUSH
76246: LD_INT 34
76248: PUSH
76249: LD_INT 12
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: PUSH
76256: LD_INT 34
76258: PUSH
76259: LD_INT 51
76261: PUSH
76262: EMPTY
76263: LIST
76264: LIST
76265: PUSH
76266: LD_INT 34
76268: PUSH
76269: LD_INT 32
76271: PUSH
76272: EMPTY
76273: LIST
76274: LIST
76275: PUSH
76276: LD_INT 34
76278: PUSH
76279: LD_INT 89
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: PUSH
76286: EMPTY
76287: LIST
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: PPUSH
76293: CALL_OW 72
76297: ST_TO_ADDR
// end ;
76298: LD_VAR 0 2
76302: RET
// export function Negate ( value ) ; begin
76303: LD_INT 0
76305: PPUSH
// result := not value ;
76306: LD_ADDR_VAR 0 2
76310: PUSH
76311: LD_VAR 0 1
76315: NOT
76316: ST_TO_ADDR
// end ;
76317: LD_VAR 0 2
76321: RET
// export function Inc ( value ) ; begin
76322: LD_INT 0
76324: PPUSH
// result := value + 1 ;
76325: LD_ADDR_VAR 0 2
76329: PUSH
76330: LD_VAR 0 1
76334: PUSH
76335: LD_INT 1
76337: PLUS
76338: ST_TO_ADDR
// end ;
76339: LD_VAR 0 2
76343: RET
// export function Dec ( value ) ; begin
76344: LD_INT 0
76346: PPUSH
// result := value - 1 ;
76347: LD_ADDR_VAR 0 2
76351: PUSH
76352: LD_VAR 0 1
76356: PUSH
76357: LD_INT 1
76359: MINUS
76360: ST_TO_ADDR
// end ;
76361: LD_VAR 0 2
76365: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76366: LD_INT 0
76368: PPUSH
76369: PPUSH
76370: PPUSH
76371: PPUSH
76372: PPUSH
76373: PPUSH
76374: PPUSH
76375: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76376: LD_VAR 0 1
76380: PPUSH
76381: LD_VAR 0 2
76385: PPUSH
76386: CALL_OW 488
76390: NOT
76391: PUSH
76392: LD_VAR 0 3
76396: PPUSH
76397: LD_VAR 0 4
76401: PPUSH
76402: CALL_OW 488
76406: NOT
76407: OR
76408: IFFALSE 76421
// begin result := - 1 ;
76410: LD_ADDR_VAR 0 5
76414: PUSH
76415: LD_INT 1
76417: NEG
76418: ST_TO_ADDR
// exit ;
76419: GO 76656
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76421: LD_ADDR_VAR 0 12
76425: PUSH
76426: LD_VAR 0 1
76430: PPUSH
76431: LD_VAR 0 2
76435: PPUSH
76436: LD_VAR 0 3
76440: PPUSH
76441: LD_VAR 0 4
76445: PPUSH
76446: CALL 75506 0 4
76450: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76451: LD_ADDR_VAR 0 11
76455: PUSH
76456: LD_VAR 0 1
76460: PPUSH
76461: LD_VAR 0 2
76465: PPUSH
76466: LD_VAR 0 12
76470: PUSH
76471: LD_INT 1
76473: ARRAY
76474: PPUSH
76475: LD_VAR 0 12
76479: PUSH
76480: LD_INT 2
76482: ARRAY
76483: PPUSH
76484: CALL_OW 298
76488: ST_TO_ADDR
// distance := 9999 ;
76489: LD_ADDR_VAR 0 10
76493: PUSH
76494: LD_INT 9999
76496: ST_TO_ADDR
// for i := 0 to 5 do
76497: LD_ADDR_VAR 0 6
76501: PUSH
76502: DOUBLE
76503: LD_INT 0
76505: DEC
76506: ST_TO_ADDR
76507: LD_INT 5
76509: PUSH
76510: FOR_TO
76511: IFFALSE 76654
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76513: LD_ADDR_VAR 0 7
76517: PUSH
76518: LD_VAR 0 1
76522: PPUSH
76523: LD_VAR 0 6
76527: PPUSH
76528: LD_VAR 0 11
76532: PPUSH
76533: CALL_OW 272
76537: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76538: LD_ADDR_VAR 0 8
76542: PUSH
76543: LD_VAR 0 2
76547: PPUSH
76548: LD_VAR 0 6
76552: PPUSH
76553: LD_VAR 0 11
76557: PPUSH
76558: CALL_OW 273
76562: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76563: LD_VAR 0 7
76567: PPUSH
76568: LD_VAR 0 8
76572: PPUSH
76573: CALL_OW 488
76577: NOT
76578: IFFALSE 76582
// continue ;
76580: GO 76510
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76582: LD_ADDR_VAR 0 9
76586: PUSH
76587: LD_VAR 0 12
76591: PUSH
76592: LD_INT 1
76594: ARRAY
76595: PPUSH
76596: LD_VAR 0 12
76600: PUSH
76601: LD_INT 2
76603: ARRAY
76604: PPUSH
76605: LD_VAR 0 7
76609: PPUSH
76610: LD_VAR 0 8
76614: PPUSH
76615: CALL_OW 298
76619: ST_TO_ADDR
// if tmp < distance then
76620: LD_VAR 0 9
76624: PUSH
76625: LD_VAR 0 10
76629: LESS
76630: IFFALSE 76652
// begin result := i ;
76632: LD_ADDR_VAR 0 5
76636: PUSH
76637: LD_VAR 0 6
76641: ST_TO_ADDR
// distance := tmp ;
76642: LD_ADDR_VAR 0 10
76646: PUSH
76647: LD_VAR 0 9
76651: ST_TO_ADDR
// end ; end ;
76652: GO 76510
76654: POP
76655: POP
// end ;
76656: LD_VAR 0 5
76660: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76661: LD_INT 0
76663: PPUSH
76664: PPUSH
// if not driver or not IsInUnit ( driver ) then
76665: LD_VAR 0 1
76669: NOT
76670: PUSH
76671: LD_VAR 0 1
76675: PPUSH
76676: CALL_OW 310
76680: NOT
76681: OR
76682: IFFALSE 76686
// exit ;
76684: GO 76776
// vehicle := IsInUnit ( driver ) ;
76686: LD_ADDR_VAR 0 3
76690: PUSH
76691: LD_VAR 0 1
76695: PPUSH
76696: CALL_OW 310
76700: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76701: LD_VAR 0 1
76705: PPUSH
76706: LD_STRING \
76708: PUSH
76709: LD_INT 0
76711: PUSH
76712: LD_INT 0
76714: PUSH
76715: LD_INT 0
76717: PUSH
76718: LD_INT 0
76720: PUSH
76721: LD_INT 0
76723: PUSH
76724: LD_INT 0
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: LIST
76731: LIST
76732: LIST
76733: LIST
76734: LIST
76735: PUSH
76736: LD_STRING E
76738: PUSH
76739: LD_INT 0
76741: PUSH
76742: LD_INT 0
76744: PUSH
76745: LD_VAR 0 3
76749: PUSH
76750: LD_INT 0
76752: PUSH
76753: LD_INT 0
76755: PUSH
76756: LD_INT 0
76758: PUSH
76759: EMPTY
76760: LIST
76761: LIST
76762: LIST
76763: LIST
76764: LIST
76765: LIST
76766: LIST
76767: PUSH
76768: EMPTY
76769: LIST
76770: LIST
76771: PPUSH
76772: CALL_OW 446
// end ;
76776: LD_VAR 0 2
76780: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76781: LD_INT 0
76783: PPUSH
76784: PPUSH
// if not driver or not IsInUnit ( driver ) then
76785: LD_VAR 0 1
76789: NOT
76790: PUSH
76791: LD_VAR 0 1
76795: PPUSH
76796: CALL_OW 310
76800: NOT
76801: OR
76802: IFFALSE 76806
// exit ;
76804: GO 76896
// vehicle := IsInUnit ( driver ) ;
76806: LD_ADDR_VAR 0 3
76810: PUSH
76811: LD_VAR 0 1
76815: PPUSH
76816: CALL_OW 310
76820: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76821: LD_VAR 0 1
76825: PPUSH
76826: LD_STRING \
76828: PUSH
76829: LD_INT 0
76831: PUSH
76832: LD_INT 0
76834: PUSH
76835: LD_INT 0
76837: PUSH
76838: LD_INT 0
76840: PUSH
76841: LD_INT 0
76843: PUSH
76844: LD_INT 0
76846: PUSH
76847: EMPTY
76848: LIST
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: PUSH
76856: LD_STRING E
76858: PUSH
76859: LD_INT 0
76861: PUSH
76862: LD_INT 0
76864: PUSH
76865: LD_VAR 0 3
76869: PUSH
76870: LD_INT 0
76872: PUSH
76873: LD_INT 0
76875: PUSH
76876: LD_INT 0
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: LIST
76883: LIST
76884: LIST
76885: LIST
76886: LIST
76887: PUSH
76888: EMPTY
76889: LIST
76890: LIST
76891: PPUSH
76892: CALL_OW 447
// end ;
76896: LD_VAR 0 2
76900: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76901: LD_INT 0
76903: PPUSH
76904: PPUSH
76905: PPUSH
// tmp := [ ] ;
76906: LD_ADDR_VAR 0 5
76910: PUSH
76911: EMPTY
76912: ST_TO_ADDR
// for i in units do
76913: LD_ADDR_VAR 0 4
76917: PUSH
76918: LD_VAR 0 1
76922: PUSH
76923: FOR_IN
76924: IFFALSE 76962
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76926: LD_ADDR_VAR 0 5
76930: PUSH
76931: LD_VAR 0 5
76935: PPUSH
76936: LD_VAR 0 5
76940: PUSH
76941: LD_INT 1
76943: PLUS
76944: PPUSH
76945: LD_VAR 0 4
76949: PPUSH
76950: CALL_OW 256
76954: PPUSH
76955: CALL_OW 2
76959: ST_TO_ADDR
76960: GO 76923
76962: POP
76963: POP
// if not tmp then
76964: LD_VAR 0 5
76968: NOT
76969: IFFALSE 76973
// exit ;
76971: GO 77021
// if asc then
76973: LD_VAR 0 2
76977: IFFALSE 77001
// result := SortListByListAsc ( units , tmp ) else
76979: LD_ADDR_VAR 0 3
76983: PUSH
76984: LD_VAR 0 1
76988: PPUSH
76989: LD_VAR 0 5
76993: PPUSH
76994: CALL_OW 76
76998: ST_TO_ADDR
76999: GO 77021
// result := SortListByListDesc ( units , tmp ) ;
77001: LD_ADDR_VAR 0 3
77005: PUSH
77006: LD_VAR 0 1
77010: PPUSH
77011: LD_VAR 0 5
77015: PPUSH
77016: CALL_OW 77
77020: ST_TO_ADDR
// end ;
77021: LD_VAR 0 3
77025: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77026: LD_INT 0
77028: PPUSH
77029: PPUSH
// task := GetTaskList ( mech ) ;
77030: LD_ADDR_VAR 0 4
77034: PUSH
77035: LD_VAR 0 1
77039: PPUSH
77040: CALL_OW 437
77044: ST_TO_ADDR
// if not task then
77045: LD_VAR 0 4
77049: NOT
77050: IFFALSE 77054
// exit ;
77052: GO 77096
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77054: LD_ADDR_VAR 0 3
77058: PUSH
77059: LD_VAR 0 4
77063: PUSH
77064: LD_INT 1
77066: ARRAY
77067: PUSH
77068: LD_INT 1
77070: ARRAY
77071: PUSH
77072: LD_STRING r
77074: EQUAL
77075: PUSH
77076: LD_VAR 0 4
77080: PUSH
77081: LD_INT 1
77083: ARRAY
77084: PUSH
77085: LD_INT 4
77087: ARRAY
77088: PUSH
77089: LD_VAR 0 2
77093: EQUAL
77094: AND
77095: ST_TO_ADDR
// end ;
77096: LD_VAR 0 3
77100: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77101: LD_INT 0
77103: PPUSH
// SetDir ( unit , d ) ;
77104: LD_VAR 0 1
77108: PPUSH
77109: LD_VAR 0 4
77113: PPUSH
77114: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77118: LD_VAR 0 1
77122: PPUSH
77123: LD_VAR 0 2
77127: PPUSH
77128: LD_VAR 0 3
77132: PPUSH
77133: LD_VAR 0 5
77137: PPUSH
77138: CALL_OW 48
// end ;
77142: LD_VAR 0 6
77146: RET
// export function ToNaturalNumber ( number ) ; begin
77147: LD_INT 0
77149: PPUSH
// result := number div 1 ;
77150: LD_ADDR_VAR 0 2
77154: PUSH
77155: LD_VAR 0 1
77159: PUSH
77160: LD_INT 1
77162: DIV
77163: ST_TO_ADDR
// if number < 0 then
77164: LD_VAR 0 1
77168: PUSH
77169: LD_INT 0
77171: LESS
77172: IFFALSE 77182
// result := 0 ;
77174: LD_ADDR_VAR 0 2
77178: PUSH
77179: LD_INT 0
77181: ST_TO_ADDR
// end ;
77182: LD_VAR 0 2
77186: RET
// export function SortByClass ( units , class ) ; var un ; begin
77187: LD_INT 0
77189: PPUSH
77190: PPUSH
// if not units or not class then
77191: LD_VAR 0 1
77195: NOT
77196: PUSH
77197: LD_VAR 0 2
77201: NOT
77202: OR
77203: IFFALSE 77207
// exit ;
77205: GO 77302
// result := [ ] ;
77207: LD_ADDR_VAR 0 3
77211: PUSH
77212: EMPTY
77213: ST_TO_ADDR
// for un in units do
77214: LD_ADDR_VAR 0 4
77218: PUSH
77219: LD_VAR 0 1
77223: PUSH
77224: FOR_IN
77225: IFFALSE 77300
// if GetClass ( un ) = class then
77227: LD_VAR 0 4
77231: PPUSH
77232: CALL_OW 257
77236: PUSH
77237: LD_VAR 0 2
77241: EQUAL
77242: IFFALSE 77269
// result := Insert ( result , 1 , un ) else
77244: LD_ADDR_VAR 0 3
77248: PUSH
77249: LD_VAR 0 3
77253: PPUSH
77254: LD_INT 1
77256: PPUSH
77257: LD_VAR 0 4
77261: PPUSH
77262: CALL_OW 2
77266: ST_TO_ADDR
77267: GO 77298
// result := Replace ( result , result + 1 , un ) ;
77269: LD_ADDR_VAR 0 3
77273: PUSH
77274: LD_VAR 0 3
77278: PPUSH
77279: LD_VAR 0 3
77283: PUSH
77284: LD_INT 1
77286: PLUS
77287: PPUSH
77288: LD_VAR 0 4
77292: PPUSH
77293: CALL_OW 1
77297: ST_TO_ADDR
77298: GO 77224
77300: POP
77301: POP
// end ;
77302: LD_VAR 0 3
77306: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77307: LD_INT 0
77309: PPUSH
77310: PPUSH
77311: PPUSH
77312: PPUSH
77313: PPUSH
77314: PPUSH
77315: PPUSH
// result := [ ] ;
77316: LD_ADDR_VAR 0 4
77320: PUSH
77321: EMPTY
77322: ST_TO_ADDR
// if x - r < 0 then
77323: LD_VAR 0 1
77327: PUSH
77328: LD_VAR 0 3
77332: MINUS
77333: PUSH
77334: LD_INT 0
77336: LESS
77337: IFFALSE 77349
// min_x := 0 else
77339: LD_ADDR_VAR 0 8
77343: PUSH
77344: LD_INT 0
77346: ST_TO_ADDR
77347: GO 77365
// min_x := x - r ;
77349: LD_ADDR_VAR 0 8
77353: PUSH
77354: LD_VAR 0 1
77358: PUSH
77359: LD_VAR 0 3
77363: MINUS
77364: ST_TO_ADDR
// if y - r < 0 then
77365: LD_VAR 0 2
77369: PUSH
77370: LD_VAR 0 3
77374: MINUS
77375: PUSH
77376: LD_INT 0
77378: LESS
77379: IFFALSE 77391
// min_y := 0 else
77381: LD_ADDR_VAR 0 7
77385: PUSH
77386: LD_INT 0
77388: ST_TO_ADDR
77389: GO 77407
// min_y := y - r ;
77391: LD_ADDR_VAR 0 7
77395: PUSH
77396: LD_VAR 0 2
77400: PUSH
77401: LD_VAR 0 3
77405: MINUS
77406: ST_TO_ADDR
// max_x := x + r ;
77407: LD_ADDR_VAR 0 9
77411: PUSH
77412: LD_VAR 0 1
77416: PUSH
77417: LD_VAR 0 3
77421: PLUS
77422: ST_TO_ADDR
// max_y := y + r ;
77423: LD_ADDR_VAR 0 10
77427: PUSH
77428: LD_VAR 0 2
77432: PUSH
77433: LD_VAR 0 3
77437: PLUS
77438: ST_TO_ADDR
// for _x = min_x to max_x do
77439: LD_ADDR_VAR 0 5
77443: PUSH
77444: DOUBLE
77445: LD_VAR 0 8
77449: DEC
77450: ST_TO_ADDR
77451: LD_VAR 0 9
77455: PUSH
77456: FOR_TO
77457: IFFALSE 77558
// for _y = min_y to max_y do
77459: LD_ADDR_VAR 0 6
77463: PUSH
77464: DOUBLE
77465: LD_VAR 0 7
77469: DEC
77470: ST_TO_ADDR
77471: LD_VAR 0 10
77475: PUSH
77476: FOR_TO
77477: IFFALSE 77554
// begin if not ValidHex ( _x , _y ) then
77479: LD_VAR 0 5
77483: PPUSH
77484: LD_VAR 0 6
77488: PPUSH
77489: CALL_OW 488
77493: NOT
77494: IFFALSE 77498
// continue ;
77496: GO 77476
// if GetResourceTypeXY ( _x , _y ) then
77498: LD_VAR 0 5
77502: PPUSH
77503: LD_VAR 0 6
77507: PPUSH
77508: CALL_OW 283
77512: IFFALSE 77552
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77514: LD_ADDR_VAR 0 4
77518: PUSH
77519: LD_VAR 0 4
77523: PPUSH
77524: LD_VAR 0 4
77528: PUSH
77529: LD_INT 1
77531: PLUS
77532: PPUSH
77533: LD_VAR 0 5
77537: PUSH
77538: LD_VAR 0 6
77542: PUSH
77543: EMPTY
77544: LIST
77545: LIST
77546: PPUSH
77547: CALL_OW 1
77551: ST_TO_ADDR
// end ;
77552: GO 77476
77554: POP
77555: POP
77556: GO 77456
77558: POP
77559: POP
// end ;
77560: LD_VAR 0 4
77564: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77565: LD_INT 0
77567: PPUSH
77568: PPUSH
77569: PPUSH
77570: PPUSH
77571: PPUSH
77572: PPUSH
77573: PPUSH
77574: PPUSH
// if not units then
77575: LD_VAR 0 1
77579: NOT
77580: IFFALSE 77584
// exit ;
77582: GO 78108
// result := UnitFilter ( units , [ f_ok ] ) ;
77584: LD_ADDR_VAR 0 3
77588: PUSH
77589: LD_VAR 0 1
77593: PPUSH
77594: LD_INT 50
77596: PUSH
77597: EMPTY
77598: LIST
77599: PPUSH
77600: CALL_OW 72
77604: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77605: LD_ADDR_VAR 0 8
77609: PUSH
77610: LD_VAR 0 1
77614: PUSH
77615: LD_INT 1
77617: ARRAY
77618: PPUSH
77619: CALL_OW 255
77623: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77624: LD_ADDR_VAR 0 10
77628: PUSH
77629: LD_INT 29
77631: PUSH
77632: LD_INT 91
77634: PUSH
77635: LD_INT 49
77637: PUSH
77638: EMPTY
77639: LIST
77640: LIST
77641: LIST
77642: ST_TO_ADDR
// if not result then
77643: LD_VAR 0 3
77647: NOT
77648: IFFALSE 77652
// exit ;
77650: GO 78108
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77652: LD_ADDR_VAR 0 5
77656: PUSH
77657: LD_INT 81
77659: PUSH
77660: LD_VAR 0 8
77664: PUSH
77665: EMPTY
77666: LIST
77667: LIST
77668: PPUSH
77669: CALL_OW 69
77673: ST_TO_ADDR
// for i in result do
77674: LD_ADDR_VAR 0 4
77678: PUSH
77679: LD_VAR 0 3
77683: PUSH
77684: FOR_IN
77685: IFFALSE 78106
// begin tag := GetTag ( i ) + 1 ;
77687: LD_ADDR_VAR 0 9
77691: PUSH
77692: LD_VAR 0 4
77696: PPUSH
77697: CALL_OW 110
77701: PUSH
77702: LD_INT 1
77704: PLUS
77705: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77706: LD_ADDR_VAR 0 7
77710: PUSH
77711: LD_VAR 0 4
77715: PPUSH
77716: CALL_OW 250
77720: PPUSH
77721: LD_VAR 0 4
77725: PPUSH
77726: CALL_OW 251
77730: PPUSH
77731: LD_INT 6
77733: PPUSH
77734: CALL 77307 0 3
77738: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77739: LD_VAR 0 4
77743: PPUSH
77744: CALL_OW 247
77748: PUSH
77749: LD_INT 2
77751: EQUAL
77752: PUSH
77753: LD_VAR 0 7
77757: AND
77758: PUSH
77759: LD_VAR 0 4
77763: PPUSH
77764: CALL_OW 264
77768: PUSH
77769: LD_VAR 0 10
77773: IN
77774: NOT
77775: AND
77776: IFFALSE 77815
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77778: LD_VAR 0 4
77782: PPUSH
77783: LD_VAR 0 7
77787: PUSH
77788: LD_INT 1
77790: ARRAY
77791: PUSH
77792: LD_INT 1
77794: ARRAY
77795: PPUSH
77796: LD_VAR 0 7
77800: PUSH
77801: LD_INT 1
77803: ARRAY
77804: PUSH
77805: LD_INT 2
77807: ARRAY
77808: PPUSH
77809: CALL_OW 116
77813: GO 78104
// if path > tag then
77815: LD_VAR 0 2
77819: PUSH
77820: LD_VAR 0 9
77824: GREATER
77825: IFFALSE 78033
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
77827: LD_ADDR_VAR 0 6
77831: PUSH
77832: LD_VAR 0 5
77836: PPUSH
77837: LD_INT 91
77839: PUSH
77840: LD_VAR 0 4
77844: PUSH
77845: LD_INT 8
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: LIST
77852: PPUSH
77853: CALL_OW 72
77857: ST_TO_ADDR
// if nearEnemy then
77858: LD_VAR 0 6
77862: IFFALSE 77931
// begin if GetWeapon ( i ) = ru_time_lapser then
77864: LD_VAR 0 4
77868: PPUSH
77869: CALL_OW 264
77873: PUSH
77874: LD_INT 49
77876: EQUAL
77877: IFFALSE 77905
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77879: LD_VAR 0 4
77883: PPUSH
77884: LD_VAR 0 6
77888: PPUSH
77889: LD_VAR 0 4
77893: PPUSH
77894: CALL_OW 74
77898: PPUSH
77899: CALL_OW 112
77903: GO 77929
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77905: LD_VAR 0 4
77909: PPUSH
77910: LD_VAR 0 6
77914: PPUSH
77915: LD_VAR 0 4
77919: PPUSH
77920: CALL_OW 74
77924: PPUSH
77925: CALL 79033 0 2
// end else
77929: GO 78031
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77931: LD_VAR 0 4
77935: PPUSH
77936: LD_VAR 0 2
77940: PUSH
77941: LD_VAR 0 9
77945: ARRAY
77946: PUSH
77947: LD_INT 1
77949: ARRAY
77950: PPUSH
77951: LD_VAR 0 2
77955: PUSH
77956: LD_VAR 0 9
77960: ARRAY
77961: PUSH
77962: LD_INT 2
77964: ARRAY
77965: PPUSH
77966: CALL_OW 297
77970: PUSH
77971: LD_INT 6
77973: GREATER
77974: IFFALSE 78017
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77976: LD_VAR 0 4
77980: PPUSH
77981: LD_VAR 0 2
77985: PUSH
77986: LD_VAR 0 9
77990: ARRAY
77991: PUSH
77992: LD_INT 1
77994: ARRAY
77995: PPUSH
77996: LD_VAR 0 2
78000: PUSH
78001: LD_VAR 0 9
78005: ARRAY
78006: PUSH
78007: LD_INT 2
78009: ARRAY
78010: PPUSH
78011: CALL_OW 114
78015: GO 78031
// SetTag ( i , tag ) ;
78017: LD_VAR 0 4
78021: PPUSH
78022: LD_VAR 0 9
78026: PPUSH
78027: CALL_OW 109
// end else
78031: GO 78104
// if enemy then
78033: LD_VAR 0 5
78037: IFFALSE 78104
// begin if GetWeapon ( i ) = ru_time_lapser then
78039: LD_VAR 0 4
78043: PPUSH
78044: CALL_OW 264
78048: PUSH
78049: LD_INT 49
78051: EQUAL
78052: IFFALSE 78080
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78054: LD_VAR 0 4
78058: PPUSH
78059: LD_VAR 0 5
78063: PPUSH
78064: LD_VAR 0 4
78068: PPUSH
78069: CALL_OW 74
78073: PPUSH
78074: CALL_OW 112
78078: GO 78104
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78080: LD_VAR 0 4
78084: PPUSH
78085: LD_VAR 0 5
78089: PPUSH
78090: LD_VAR 0 4
78094: PPUSH
78095: CALL_OW 74
78099: PPUSH
78100: CALL 79033 0 2
// end ; end ;
78104: GO 77684
78106: POP
78107: POP
// end ;
78108: LD_VAR 0 3
78112: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78113: LD_INT 0
78115: PPUSH
78116: PPUSH
78117: PPUSH
// if not unit or IsInUnit ( unit ) then
78118: LD_VAR 0 1
78122: NOT
78123: PUSH
78124: LD_VAR 0 1
78128: PPUSH
78129: CALL_OW 310
78133: OR
78134: IFFALSE 78138
// exit ;
78136: GO 78229
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78138: LD_ADDR_VAR 0 4
78142: PUSH
78143: LD_VAR 0 1
78147: PPUSH
78148: CALL_OW 250
78152: PPUSH
78153: LD_VAR 0 2
78157: PPUSH
78158: LD_INT 1
78160: PPUSH
78161: CALL_OW 272
78165: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78166: LD_ADDR_VAR 0 5
78170: PUSH
78171: LD_VAR 0 1
78175: PPUSH
78176: CALL_OW 251
78180: PPUSH
78181: LD_VAR 0 2
78185: PPUSH
78186: LD_INT 1
78188: PPUSH
78189: CALL_OW 273
78193: ST_TO_ADDR
// if ValidHex ( x , y ) then
78194: LD_VAR 0 4
78198: PPUSH
78199: LD_VAR 0 5
78203: PPUSH
78204: CALL_OW 488
78208: IFFALSE 78229
// ComTurnXY ( unit , x , y ) ;
78210: LD_VAR 0 1
78214: PPUSH
78215: LD_VAR 0 4
78219: PPUSH
78220: LD_VAR 0 5
78224: PPUSH
78225: CALL_OW 118
// end ;
78229: LD_VAR 0 3
78233: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78234: LD_INT 0
78236: PPUSH
78237: PPUSH
// result := false ;
78238: LD_ADDR_VAR 0 3
78242: PUSH
78243: LD_INT 0
78245: ST_TO_ADDR
// if not units then
78246: LD_VAR 0 2
78250: NOT
78251: IFFALSE 78255
// exit ;
78253: GO 78300
// for i in units do
78255: LD_ADDR_VAR 0 4
78259: PUSH
78260: LD_VAR 0 2
78264: PUSH
78265: FOR_IN
78266: IFFALSE 78298
// if See ( side , i ) then
78268: LD_VAR 0 1
78272: PPUSH
78273: LD_VAR 0 4
78277: PPUSH
78278: CALL_OW 292
78282: IFFALSE 78296
// begin result := true ;
78284: LD_ADDR_VAR 0 3
78288: PUSH
78289: LD_INT 1
78291: ST_TO_ADDR
// exit ;
78292: POP
78293: POP
78294: GO 78300
// end ;
78296: GO 78265
78298: POP
78299: POP
// end ;
78300: LD_VAR 0 3
78304: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78305: LD_INT 0
78307: PPUSH
78308: PPUSH
78309: PPUSH
78310: PPUSH
// if not unit or not points then
78311: LD_VAR 0 1
78315: NOT
78316: PUSH
78317: LD_VAR 0 2
78321: NOT
78322: OR
78323: IFFALSE 78327
// exit ;
78325: GO 78417
// dist := 99999 ;
78327: LD_ADDR_VAR 0 5
78331: PUSH
78332: LD_INT 99999
78334: ST_TO_ADDR
// for i in points do
78335: LD_ADDR_VAR 0 4
78339: PUSH
78340: LD_VAR 0 2
78344: PUSH
78345: FOR_IN
78346: IFFALSE 78415
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78348: LD_ADDR_VAR 0 6
78352: PUSH
78353: LD_VAR 0 1
78357: PPUSH
78358: LD_VAR 0 4
78362: PUSH
78363: LD_INT 1
78365: ARRAY
78366: PPUSH
78367: LD_VAR 0 4
78371: PUSH
78372: LD_INT 2
78374: ARRAY
78375: PPUSH
78376: CALL_OW 297
78380: ST_TO_ADDR
// if tmpDist < dist then
78381: LD_VAR 0 6
78385: PUSH
78386: LD_VAR 0 5
78390: LESS
78391: IFFALSE 78413
// begin result := i ;
78393: LD_ADDR_VAR 0 3
78397: PUSH
78398: LD_VAR 0 4
78402: ST_TO_ADDR
// dist := tmpDist ;
78403: LD_ADDR_VAR 0 5
78407: PUSH
78408: LD_VAR 0 6
78412: ST_TO_ADDR
// end ; end ;
78413: GO 78345
78415: POP
78416: POP
// end ;
78417: LD_VAR 0 3
78421: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78422: LD_INT 0
78424: PPUSH
// uc_side := side ;
78425: LD_ADDR_OWVAR 20
78429: PUSH
78430: LD_VAR 0 1
78434: ST_TO_ADDR
// uc_nation := 3 ;
78435: LD_ADDR_OWVAR 21
78439: PUSH
78440: LD_INT 3
78442: ST_TO_ADDR
// vc_chassis := 25 ;
78443: LD_ADDR_OWVAR 37
78447: PUSH
78448: LD_INT 25
78450: ST_TO_ADDR
// vc_engine := engine_siberite ;
78451: LD_ADDR_OWVAR 39
78455: PUSH
78456: LD_INT 3
78458: ST_TO_ADDR
// vc_control := control_computer ;
78459: LD_ADDR_OWVAR 38
78463: PUSH
78464: LD_INT 3
78466: ST_TO_ADDR
// vc_weapon := 59 ;
78467: LD_ADDR_OWVAR 40
78471: PUSH
78472: LD_INT 59
78474: ST_TO_ADDR
// result := CreateVehicle ;
78475: LD_ADDR_VAR 0 5
78479: PUSH
78480: CALL_OW 45
78484: ST_TO_ADDR
// SetDir ( result , d ) ;
78485: LD_VAR 0 5
78489: PPUSH
78490: LD_VAR 0 4
78494: PPUSH
78495: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78499: LD_VAR 0 5
78503: PPUSH
78504: LD_VAR 0 2
78508: PPUSH
78509: LD_VAR 0 3
78513: PPUSH
78514: LD_INT 0
78516: PPUSH
78517: CALL_OW 48
// end ;
78521: LD_VAR 0 5
78525: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78526: LD_INT 0
78528: PPUSH
78529: PPUSH
78530: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78531: LD_ADDR_VAR 0 2
78535: PUSH
78536: LD_INT 0
78538: PUSH
78539: LD_INT 0
78541: PUSH
78542: LD_INT 0
78544: PUSH
78545: LD_INT 0
78547: PUSH
78548: EMPTY
78549: LIST
78550: LIST
78551: LIST
78552: LIST
78553: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78554: LD_VAR 0 1
78558: NOT
78559: PUSH
78560: LD_VAR 0 1
78564: PPUSH
78565: CALL_OW 264
78569: PUSH
78570: LD_INT 12
78572: PUSH
78573: LD_INT 51
78575: PUSH
78576: LD_INT 32
78578: PUSH
78579: LD_INT 89
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: LIST
78586: LIST
78587: IN
78588: NOT
78589: OR
78590: IFFALSE 78594
// exit ;
78592: GO 78692
// for i := 1 to 3 do
78594: LD_ADDR_VAR 0 3
78598: PUSH
78599: DOUBLE
78600: LD_INT 1
78602: DEC
78603: ST_TO_ADDR
78604: LD_INT 3
78606: PUSH
78607: FOR_TO
78608: IFFALSE 78690
// begin tmp := GetCargo ( cargo , i ) ;
78610: LD_ADDR_VAR 0 4
78614: PUSH
78615: LD_VAR 0 1
78619: PPUSH
78620: LD_VAR 0 3
78624: PPUSH
78625: CALL_OW 289
78629: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78630: LD_ADDR_VAR 0 2
78634: PUSH
78635: LD_VAR 0 2
78639: PPUSH
78640: LD_VAR 0 3
78644: PPUSH
78645: LD_VAR 0 4
78649: PPUSH
78650: CALL_OW 1
78654: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78655: LD_ADDR_VAR 0 2
78659: PUSH
78660: LD_VAR 0 2
78664: PPUSH
78665: LD_INT 4
78667: PPUSH
78668: LD_VAR 0 2
78672: PUSH
78673: LD_INT 4
78675: ARRAY
78676: PUSH
78677: LD_VAR 0 4
78681: PLUS
78682: PPUSH
78683: CALL_OW 1
78687: ST_TO_ADDR
// end ;
78688: GO 78607
78690: POP
78691: POP
// end ;
78692: LD_VAR 0 2
78696: RET
// export function Length ( array ) ; begin
78697: LD_INT 0
78699: PPUSH
// result := array + 0 ;
78700: LD_ADDR_VAR 0 2
78704: PUSH
78705: LD_VAR 0 1
78709: PUSH
78710: LD_INT 0
78712: PLUS
78713: ST_TO_ADDR
// end ;
78714: LD_VAR 0 2
78718: RET
// export function PrepareArray ( array ) ; begin
78719: LD_INT 0
78721: PPUSH
// result := array diff 0 ;
78722: LD_ADDR_VAR 0 2
78726: PUSH
78727: LD_VAR 0 1
78731: PUSH
78732: LD_INT 0
78734: DIFF
78735: ST_TO_ADDR
// if not result [ 1 ] then
78736: LD_VAR 0 2
78740: PUSH
78741: LD_INT 1
78743: ARRAY
78744: NOT
78745: IFFALSE 78765
// result := Delete ( result , 1 ) ;
78747: LD_ADDR_VAR 0 2
78751: PUSH
78752: LD_VAR 0 2
78756: PPUSH
78757: LD_INT 1
78759: PPUSH
78760: CALL_OW 3
78764: ST_TO_ADDR
// end ;
78765: LD_VAR 0 2
78769: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
78770: LD_INT 0
78772: PPUSH
78773: PPUSH
78774: PPUSH
78775: PPUSH
// sibRocketRange := 25 ;
78776: LD_ADDR_VAR 0 6
78780: PUSH
78781: LD_INT 25
78783: ST_TO_ADDR
// result := false ;
78784: LD_ADDR_VAR 0 4
78788: PUSH
78789: LD_INT 0
78791: ST_TO_ADDR
// for i := 0 to 5 do
78792: LD_ADDR_VAR 0 5
78796: PUSH
78797: DOUBLE
78798: LD_INT 0
78800: DEC
78801: ST_TO_ADDR
78802: LD_INT 5
78804: PUSH
78805: FOR_TO
78806: IFFALSE 78873
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
78808: LD_VAR 0 1
78812: PPUSH
78813: LD_VAR 0 5
78817: PPUSH
78818: LD_VAR 0 6
78822: PPUSH
78823: CALL_OW 272
78827: PPUSH
78828: LD_VAR 0 2
78832: PPUSH
78833: LD_VAR 0 5
78837: PPUSH
78838: LD_VAR 0 6
78842: PPUSH
78843: CALL_OW 273
78847: PPUSH
78848: LD_VAR 0 3
78852: PPUSH
78853: CALL_OW 309
78857: IFFALSE 78871
// begin result := true ;
78859: LD_ADDR_VAR 0 4
78863: PUSH
78864: LD_INT 1
78866: ST_TO_ADDR
// exit ;
78867: POP
78868: POP
78869: GO 78875
// end ;
78871: GO 78805
78873: POP
78874: POP
// end ;
78875: LD_VAR 0 4
78879: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78880: LD_INT 0
78882: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78883: LD_VAR 0 1
78887: PPUSH
78888: LD_VAR 0 2
78892: PPUSH
78893: LD_INT 0
78895: PPUSH
78896: LD_INT 0
78898: PPUSH
78899: LD_INT 1
78901: PPUSH
78902: LD_INT 0
78904: PPUSH
78905: CALL_OW 587
// end ;
78909: LD_VAR 0 3
78913: RET
// export function CenterOnNow ( unit ) ; begin
78914: LD_INT 0
78916: PPUSH
// result := IsInUnit ( unit ) ;
78917: LD_ADDR_VAR 0 2
78921: PUSH
78922: LD_VAR 0 1
78926: PPUSH
78927: CALL_OW 310
78931: ST_TO_ADDR
// if not result then
78932: LD_VAR 0 2
78936: NOT
78937: IFFALSE 78949
// result := unit ;
78939: LD_ADDR_VAR 0 2
78943: PUSH
78944: LD_VAR 0 1
78948: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78949: LD_VAR 0 1
78953: PPUSH
78954: CALL_OW 87
// end ;
78958: LD_VAR 0 2
78962: RET
// export function ComMoveHex ( unit , hex ) ; begin
78963: LD_INT 0
78965: PPUSH
// if not hex then
78966: LD_VAR 0 2
78970: NOT
78971: IFFALSE 78975
// exit ;
78973: GO 79028
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78975: LD_VAR 0 2
78979: PUSH
78980: LD_INT 1
78982: ARRAY
78983: PPUSH
78984: LD_VAR 0 2
78988: PUSH
78989: LD_INT 2
78991: ARRAY
78992: PPUSH
78993: CALL_OW 428
78997: IFFALSE 79001
// exit ;
78999: GO 79028
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
79001: LD_VAR 0 1
79005: PPUSH
79006: LD_VAR 0 2
79010: PUSH
79011: LD_INT 1
79013: ARRAY
79014: PPUSH
79015: LD_VAR 0 2
79019: PUSH
79020: LD_INT 2
79022: ARRAY
79023: PPUSH
79024: CALL_OW 111
// end ;
79028: LD_VAR 0 3
79032: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
79033: LD_INT 0
79035: PPUSH
79036: PPUSH
79037: PPUSH
// if not unit or not enemy then
79038: LD_VAR 0 1
79042: NOT
79043: PUSH
79044: LD_VAR 0 2
79048: NOT
79049: OR
79050: IFFALSE 79054
// exit ;
79052: GO 79178
// x := GetX ( enemy ) ;
79054: LD_ADDR_VAR 0 4
79058: PUSH
79059: LD_VAR 0 2
79063: PPUSH
79064: CALL_OW 250
79068: ST_TO_ADDR
// y := GetY ( enemy ) ;
79069: LD_ADDR_VAR 0 5
79073: PUSH
79074: LD_VAR 0 2
79078: PPUSH
79079: CALL_OW 251
79083: ST_TO_ADDR
// if ValidHex ( x , y ) then
79084: LD_VAR 0 4
79088: PPUSH
79089: LD_VAR 0 5
79093: PPUSH
79094: CALL_OW 488
79098: IFFALSE 79178
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
79100: LD_VAR 0 2
79104: PPUSH
79105: CALL_OW 247
79109: PUSH
79110: LD_INT 3
79112: PUSH
79113: LD_INT 2
79115: PUSH
79116: EMPTY
79117: LIST
79118: LIST
79119: IN
79120: PUSH
79121: LD_VAR 0 1
79125: PPUSH
79126: CALL_OW 255
79130: PPUSH
79131: LD_VAR 0 2
79135: PPUSH
79136: CALL_OW 292
79140: AND
79141: IFFALSE 79159
// ComAttackUnit ( unit , enemy ) else
79143: LD_VAR 0 1
79147: PPUSH
79148: LD_VAR 0 2
79152: PPUSH
79153: CALL_OW 115
79157: GO 79178
// ComAgressiveMove ( unit , x , y ) ;
79159: LD_VAR 0 1
79163: PPUSH
79164: LD_VAR 0 4
79168: PPUSH
79169: LD_VAR 0 5
79173: PPUSH
79174: CALL_OW 114
// end ; end_of_file
79178: LD_VAR 0 3
79182: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79183: LD_VAR 0 1
79187: PUSH
79188: LD_INT 200
79190: DOUBLE
79191: GREATEREQUAL
79192: IFFALSE 79200
79194: LD_INT 299
79196: DOUBLE
79197: LESSEQUAL
79198: IFTRUE 79202
79200: GO 79234
79202: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79203: LD_VAR 0 1
79207: PPUSH
79208: LD_VAR 0 2
79212: PPUSH
79213: LD_VAR 0 3
79217: PPUSH
79218: LD_VAR 0 4
79222: PPUSH
79223: LD_VAR 0 5
79227: PPUSH
79228: CALL 32907 0 5
79232: GO 79311
79234: LD_INT 300
79236: DOUBLE
79237: GREATEREQUAL
79238: IFFALSE 79246
79240: LD_INT 399
79242: DOUBLE
79243: LESSEQUAL
79244: IFTRUE 79248
79246: GO 79310
79248: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79249: LD_VAR 0 1
79253: PPUSH
79254: LD_VAR 0 2
79258: PPUSH
79259: LD_VAR 0 3
79263: PPUSH
79264: LD_VAR 0 4
79268: PPUSH
79269: LD_VAR 0 5
79273: PPUSH
79274: LD_VAR 0 6
79278: PPUSH
79279: LD_VAR 0 7
79283: PPUSH
79284: LD_VAR 0 8
79288: PPUSH
79289: LD_VAR 0 9
79293: PPUSH
79294: LD_VAR 0 10
79298: PPUSH
79299: LD_VAR 0 11
79303: PPUSH
79304: CALL 29232 0 11
79308: GO 79311
79310: POP
// end ;
79311: PPOPN 11
79313: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79314: LD_VAR 0 1
79318: PPUSH
79319: LD_VAR 0 2
79323: PPUSH
79324: LD_VAR 0 3
79328: PPUSH
79329: LD_VAR 0 4
79333: PPUSH
79334: LD_VAR 0 5
79338: PPUSH
79339: CALL 32643 0 5
// end ; end_of_file
79343: PPOPN 5
79345: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79346: LD_VAR 0 1
79350: PPUSH
79351: LD_VAR 0 2
79355: PPUSH
79356: LD_VAR 0 3
79360: PPUSH
79361: LD_VAR 0 4
79365: PPUSH
79366: LD_VAR 0 5
79370: PPUSH
79371: LD_VAR 0 6
79375: PPUSH
79376: CALL 16884 0 6
// end ;
79380: PPOPN 6
79382: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79383: LD_INT 0
79385: PPUSH
// begin if not units then
79386: LD_VAR 0 1
79390: NOT
79391: IFFALSE 79395
// exit ;
79393: GO 79395
// end ;
79395: PPOPN 7
79397: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79398: CALL 16788 0 0
// end ;
79402: PPOPN 1
79404: END
