// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10516 0 0
// PrepareRussianCommander ;
  44: CALL 12050 0 0
// PrepareSouthBase ;
  48: CALL 12146 0 0
// PrepareNorthBase ;
  52: CALL 12484 0 0
// PrepareOtherRussians ;
  56: CALL 12879 0 0
// PrepareHeroes ;
  60: CALL 10837 0 0
// PrepareLisSquad ;
  64: CALL 11207 0 0
// PrepareOtherAmericans ;
  68: CALL 11520 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 586
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 586
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11662 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 586
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11888 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 15211 0 0
// RussianTrap ;
6346: CALL 10215 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 13071 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6724: LD_EXP 20
6728: PUSH
6729: LD_EXP 15
6733: PUSH
6734: LD_EXP 16
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 52
6761: PUSH
6762: EMPTY
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 72
6774: AND
6775: IFFALSE 7108
6777: GO 6779
6779: DISABLE
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
// begin enable ;
6786: ENABLE
// for i in [ cargo1 , cargo2 ] do
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 15
6796: PUSH
6797: LD_EXP 16
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: FOR_IN
6807: IFFALSE 7106
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: CALL_OW 250
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: CALL_OW 251
6833: PPUSH
6834: LD_INT 6
6836: PPUSH
6837: CALL 76302 0 3
6841: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6842: LD_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL 77521 0 1
6856: PUSH
6857: LD_INT 4
6859: ARRAY
6860: PUSH
6861: LD_INT 60
6863: LESS
6864: AND
6865: IFFALSE 6904
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 1
6889: PUSH
6890: LD_INT 1
6892: ARRAY
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 117
6902: GO 7104
// if not IsInArea ( i , RemoveArea ) then
6904: LD_VAR 0 2
6908: PPUSH
6909: LD_INT 32
6911: PPUSH
6912: CALL_OW 308
6916: NOT
6917: IFFALSE 7065
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_VAR 0 2
6928: PPUSH
6929: CALL_OW 250
6933: PPUSH
6934: LD_INT 4
6936: PPUSH
6937: LD_INT 3
6939: PPUSH
6940: CALL_OW 272
6944: ST_TO_ADDR
// y := GetY ( i ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 251
6959: ST_TO_ADDR
// if HexInfo ( x , y ) then
6960: LD_VAR 0 3
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 428
6974: IFFALSE 6997
// x := ShiftX ( x , 4 , 3 ) ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 4
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 272
6996: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 428
7011: PUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 488
7026: NOT
7027: OR
7028: IFFALSE 7044
// ComMoveToArea ( i , RemoveArea ) else
7030: LD_VAR 0 2
7034: PPUSH
7035: LD_INT 32
7037: PPUSH
7038: CALL_OW 113
7042: GO 7063
// ComMoveXY ( i , x , y ) ;
7044: LD_VAR 0 2
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 111
// end else
7063: GO 7104
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 311
7074: PPUSH
7075: CALL_OW 64
// RemoveUnit ( i ) ;
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_EXP 20
7097: PUSH
7098: LD_INT 1
7100: PLUS
7101: ST_TO_ADDR
// continue ;
7102: GO 6806
// end ; end ;
7104: GO 6806
7106: POP
7107: POP
// end ;
7108: PPOPN 4
7110: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7111: LD_EXP 20
7115: PUSH
7116: LD_INT 1
7118: GREATER
7119: IFFALSE 7368
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7127: LD_INT 4
7129: PPUSH
7130: LD_INT 1
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7140: LD_INT 31
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: LD_INT 1
7148: PPUSH
7149: CALL_OW 324
// Hint ( Bunker ) ;
7153: LD_STRING Bunker
7155: PPUSH
7156: CALL_OW 339
// if IsOK ( Jerry ) then
7160: LD_EXP 7
7164: PPUSH
7165: CALL_OW 302
7169: IFFALSE 7185
// Say ( Jerry , D5a-Sol1-1 ) else
7171: LD_EXP 7
7175: PPUSH
7176: LD_STRING D5a-Sol1-1
7178: PPUSH
7179: CALL_OW 88
7183: GO 7271
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7185: LD_ADDR_VAR 0 1
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 26
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PUSH
7219: LD_EXP 1
7223: PUSH
7224: LD_EXP 2
7228: PUSH
7229: LD_EXP 3
7233: PUSH
7234: LD_EXP 5
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: DIFF
7245: ST_TO_ADDR
// if not speaker then
7246: LD_VAR 0 1
7250: NOT
7251: IFFALSE 7255
// exit ;
7253: GO 7368
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7255: LD_VAR 0 1
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PPUSH
7264: LD_STRING D5a-Sol1-1
7266: PPUSH
7267: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7271: LD_EXP 1
7275: PPUSH
7276: LD_STRING D5a-JMM-1
7278: PPUSH
7279: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7283: LD_INT 22
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 25
7298: PUSH
7299: LD_INT 2
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 70
7314: IFFALSE 7368
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7316: LD_INT 22
7318: PPUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 25
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_INT 31
7354: PPUSH
7355: LD_INT 44
7357: PPUSH
7358: LD_INT 13
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 145
// end ;
7368: PPOPN 1
7370: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 255
7378: PUSH
7379: LD_INT 3
7381: EQUAL
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: CALL_OW 256
7390: PUSH
7391: LD_INT 1000
7393: LESS
7394: AND
7395: PUSH
7396: LD_INT 10
7398: PPUSH
7399: CALL_OW 255
7403: PUSH
7404: LD_INT 3
7406: EQUAL
7407: PUSH
7408: LD_INT 10
7410: PPUSH
7411: CALL_OW 256
7415: PUSH
7416: LD_INT 1000
7418: LESS
7419: AND
7420: OR
7421: IFFALSE 7438
7423: GO 7425
7425: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D8-JMM-1
7433: PPUSH
7434: CALL_OW 88
7438: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: PUSH
7449: LD_INT 1
7451: EQUAL
7452: PUSH
7453: LD_EXP 22
7457: PUSH
7458: LD_INT 3
7460: EQUAL
7461: NOT
7462: AND
7463: IFFALSE 7485
7465: GO 7467
7467: DISABLE
// begin enable ;
7468: ENABLE
// mikhailInBase = 1 ;
7469: LD_ADDR_EXP 22
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// mikhailStatus = 1 ;
7477: LD_ADDR_EXP 21
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ;
7485: END
// export function AskMikhail ; begin
7486: LD_INT 0
7488: PPUSH
// case Query ( QMikh2 ) of 1 :
7489: LD_STRING QMikh2
7491: PPUSH
7492: CALL_OW 97
7496: PUSH
7497: LD_INT 1
7499: DOUBLE
7500: EQUAL
7501: IFTRUE 7505
7503: GO 7572
7505: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7506: LD_INT 1
7508: PPUSH
7509: LD_INT 6
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 1
7517: PPUSH
7518: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7522: LD_EXP 8
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7534: LD_EXP 8
7538: PPUSH
7539: CALL_OW 122
// wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7550: LD_EXP 8
7554: PPUSH
7555: LD_INT 17
7557: PPUSH
7558: CALL_OW 113
// mikhailInbase = 0 ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// end ; 2 :
7570: GO 7813
7572: LD_INT 2
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7753
7580: POP
// begin mikhailInBase = 2 ;
7581: LD_ADDR_EXP 22
7585: PUSH
7586: LD_INT 2
7588: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 6
7596: PPUSH
7597: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7601: LD_EXP 8
7605: PPUSH
7606: CALL_OW 122
// wait ( 0 0$1 ) ;
7610: LD_INT 35
7612: PPUSH
7613: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7617: LD_EXP 8
7621: PPUSH
7622: LD_EXP 8
7626: PPUSH
7627: CALL_OW 250
7631: PUSH
7632: LD_INT 2
7634: PLUS
7635: PPUSH
7636: LD_EXP 8
7640: PPUSH
7641: CALL_OW 251
7645: PUSH
7646: LD_INT 2
7648: PLUS
7649: PPUSH
7650: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7654: LD_EXP 8
7658: PPUSH
7659: LD_EXP 8
7663: PPUSH
7664: CALL_OW 250
7668: PUSH
7669: LD_INT 1
7671: PLUS
7672: PPUSH
7673: LD_EXP 8
7677: PPUSH
7678: CALL_OW 251
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PPUSH
7687: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7691: LD_EXP 8
7695: PPUSH
7696: LD_EXP 8
7700: PPUSH
7701: CALL_OW 250
7705: PUSH
7706: LD_INT 2
7708: PLUS
7709: PPUSH
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 251
7719: PPUSH
7720: CALL_OW 171
// wait ( 0 0$5 ) ;
7724: LD_INT 175
7726: PPUSH
7727: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7731: LD_EXP 8
7735: PPUSH
7736: LD_INT 25
7738: PPUSH
7739: CALL_OW 113
// mikhailInBase = 4 ;
7743: LD_ADDR_EXP 22
7747: PUSH
7748: LD_INT 4
7750: ST_TO_ADDR
// end ; 3 :
7751: GO 7813
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7812
7761: POP
// begin SetSide ( Mikhail , 6 ) ;
7762: LD_EXP 8
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7774: LD_EXP 8
7778: PPUSH
7779: CALL_OW 122
// wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7790: LD_EXP 8
7794: PPUSH
7795: LD_INT 17
7797: PPUSH
7798: CALL_OW 113
// mikhailInbase = 3 ;
7802: LD_ADDR_EXP 22
7806: PUSH
7807: LD_INT 3
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7813
7812: POP
// end ;
7813: LD_VAR 0 1
7817: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7818: LD_EXP 8
7822: PPUSH
7823: LD_INT 25
7825: PPUSH
7826: CALL_OW 308
7830: PUSH
7831: LD_EXP 22
7835: PUSH
7836: LD_INT 4
7838: EQUAL
7839: AND
7840: IFFALSE 7944
7842: GO 7844
7844: DISABLE
// begin enable ;
7845: ENABLE
// mikhailInBase = 1 ;
7846: LD_ADDR_EXP 22
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// InGameOn ;
7854: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 6
7863: PPUSH
7864: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7868: LD_INT 35
7870: PPUSH
7871: CALL_OW 67
// if Carry ( Mikhail ) then
7875: LD_EXP 8
7879: PPUSH
7880: CALL_OW 281
7884: IFFALSE 7895
// ComUnload ( Mikhail ) ;
7886: LD_EXP 8
7890: PPUSH
7891: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7895: LD_EXP 8
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7907: LD_EXP 8
7911: PPUSH
7912: CALL_OW 310
7916: IFFALSE 7868
// SetSide ( dep1 , 1 ) ;
7918: LD_INT 1
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7928: LD_EXP 8
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: CALL_OW 235
// InGameOff ;
7940: CALL_OW 9
// end ;
7944: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7945: LD_EXP 8
7949: PPUSH
7950: CALL_OW 310
7954: PUSH
7955: LD_EXP 22
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: NOT
7964: AND
7965: IFFALSE 8100
7967: GO 7969
7969: DISABLE
// begin enable ;
7970: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7971: LD_INT 22
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 91
7993: PUSH
7994: LD_EXP 8
7998: PPUSH
7999: CALL_OW 310
8003: PUSH
8004: LD_INT 10
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: PUSH
8022: LD_INT 1
8024: EQUAL
8025: IFFALSE 8100
// begin mikhailStatus = 4 ;
8027: LD_ADDR_EXP 21
8031: PUSH
8032: LD_INT 4
8034: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 6
8040: PPUSH
8041: LD_INT 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8051: LD_EXP 8
8055: PPUSH
8056: LD_INT 6
8058: PPUSH
8059: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8063: LD_EXP 8
8067: PPUSH
8068: CALL_OW 122
// wait ( 0 0$1 ) ;
8072: LD_INT 35
8074: PPUSH
8075: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8079: LD_EXP 8
8083: PPUSH
8084: LD_INT 17
8086: PPUSH
8087: CALL_OW 113
// mikhailStatus = 3 ;
8091: LD_ADDR_EXP 21
8095: PUSH
8096: LD_INT 3
8098: ST_TO_ADDR
// disable ;
8099: DISABLE
// end ; end ;
8100: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8101: LD_EXP 1
8105: PPUSH
8106: LD_EXP 23
8110: PPUSH
8111: CALL_OW 296
8115: PUSH
8116: LD_INT 5
8118: LESS
8119: PUSH
8120: LD_EXP 21
8124: PUSH
8125: LD_INT 3
8127: EQUAL
8128: AND
8129: PUSH
8130: LD_EXP 22
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: NOT
8139: AND
8140: IFFALSE 8371
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 26
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: PUSH
8193: LD_EXP 1
8197: PUSH
8198: LD_EXP 5
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: DIFF
8207: ST_TO_ADDR
// if not tmp then
8208: LD_VAR 0 1
8212: NOT
8213: IFFALSE 8217
// exit ;
8215: GO 8371
// DialogueOn ;
8217: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8221: LD_EXP 1
8225: PPUSH
8226: LD_STRING D7-JMM-1
8228: PPUSH
8229: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8233: LD_VAR 0 1
8237: PUSH
8238: LD_INT 1
8240: ARRAY
8241: PPUSH
8242: LD_STRING D7-Sol1-1
8244: PPUSH
8245: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8249: LD_EXP 1
8253: PPUSH
8254: LD_STRING D7-JMM-2
8256: PPUSH
8257: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8261: LD_VAR 0 1
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_STRING D7-Sol1-2
8272: PPUSH
8273: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8277: LD_EXP 1
8281: PPUSH
8282: LD_STRING D7-JMM-3
8284: PPUSH
8285: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8289: LD_VAR 0 1
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: LD_STRING D7-Sol1-3
8300: PPUSH
8301: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8305: LD_EXP 3
8309: PPUSH
8310: CALL_OW 302
8314: PUSH
8315: LD_EXP 4
8319: PPUSH
8320: CALL_OW 302
8324: AND
8325: IFFALSE 8367
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8327: LD_EXP 3
8331: PPUSH
8332: LD_STRING D7-Cyrus-3
8334: PPUSH
8335: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8339: LD_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_STRING D7-Sol1-4
8350: PPUSH
8351: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8355: LD_EXP 4
8359: PPUSH
8360: LD_STRING D7-Lisa-4
8362: PPUSH
8363: CALL_OW 88
// end ; DialogueOff ;
8367: CALL_OW 7
// end ;
8371: PPOPN 1
8373: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8374: LD_EXP 8
8378: PPUSH
8379: CALL_OW 303
8383: PUSH
8384: LD_EXP 21
8388: PUSH
8389: LD_INT 3
8391: EQUAL
8392: AND
8393: IFFALSE 8407
8395: GO 8397
8397: DISABLE
// begin enable ;
8398: ENABLE
// mikhailStatus = 2 ;
8399: LD_ADDR_EXP 21
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// end ;
8407: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8408: LD_EXP 8
8412: PPUSH
8413: LD_INT 17
8415: PPUSH
8416: CALL_OW 308
8420: PUSH
8421: LD_EXP 8
8425: PPUSH
8426: CALL_OW 255
8430: PUSH
8431: LD_INT 6
8433: EQUAL
8434: AND
8435: IFFALSE 8468
8437: GO 8439
8439: DISABLE
// begin if not mikhailInBase = 3 then
8440: LD_EXP 22
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: NOT
8449: IFFALSE 8459
// mikhailStatus = 3 ;
8451: LD_ADDR_EXP 21
8455: PUSH
8456: LD_INT 3
8458: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8459: LD_EXP 8
8463: PPUSH
8464: CALL_OW 64
// end ;
8468: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8469: LD_EXP 21
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: PUSH
8478: LD_EXP 8
8482: PPUSH
8483: CALL_OW 255
8487: PUSH
8488: LD_INT 6
8490: EQUAL
8491: AND
8492: IFFALSE 8658
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
// begin enable ;
8501: ENABLE
// if IsOk ( Mikhail ) then
8502: LD_EXP 8
8506: PPUSH
8507: CALL_OW 302
8511: IFFALSE 8658
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8513: LD_ADDR_VAR 0 2
8517: PUSH
8518: LD_EXP 8
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PPUSH
8552: CALL 10407 0 2
8556: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_EXP 8
8566: PPUSH
8567: CALL_OW 296
8571: PUSH
8572: LD_INT 8
8574: LESS
8575: IFFALSE 8658
// begin if GetSex ( attacker ) = sex_male then
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 258
8586: PUSH
8587: LD_INT 1
8589: EQUAL
8590: IFFALSE 8626
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-Sol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-Sol1-1a
8619: PPUSH
8620: CALL_OW 88
// end else
8624: GO 8658
// begin disable ;
8626: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_STRING D7a-FSol1-1
8634: PPUSH
8635: CALL_OW 88
// wait ( 0 0$2 ) ;
8639: LD_INT 70
8641: PPUSH
8642: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: LD_STRING D7a-FSol1-1a
8653: PPUSH
8654: CALL_OW 88
// end ; end ; end ; end ;
8658: PPOPN 2
8660: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8661: LD_EXP 27
8665: PUSH
8666: LD_INT 1
8668: EQUAL
8669: PUSH
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 70
8701: PUSH
8702: LD_INT 2
8704: GREATER
8705: AND
8706: PUSH
8707: LD_INT 22
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 59
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: PUSH
8753: LD_INT 0
8755: EQUAL
8756: AND
8757: IFFALSE 8772
8759: GO 8761
8761: DISABLE
// SetSide ( dep1 , 3 ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 3
8767: PPUSH
8768: CALL_OW 235
8772: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8773: LD_EXP 30
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 14
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: AND
8815: IFFALSE 8916
8817: GO 8819
8819: DISABLE
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_INT 22
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 21
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 23
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// for i in tmp do
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: FOR_IN
8880: IFFALSE 8907
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 4
8892: PPUSH
8893: CALL_OW 12
8897: PPUSH
8898: LD_INT 300
8900: PPUSH
8901: CALL_OW 492
8905: GO 8879
8907: POP
8908: POP
// SetAchievement ( ACH_TIGER ) ;
8909: LD_STRING ACH_TIGER
8911: PPUSH
8912: CALL_OW 543
// end ;
8916: PPOPN 2
8918: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 51
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 2
8950: GREATEREQUAL
8951: IFFALSE 8963
8953: GO 8955
8955: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8956: LD_STRING ACH_CARGO
8958: PPUSH
8959: CALL_OW 543
8963: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
// for i = 1 to count do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_VAR 0 6
8983: PUSH
8984: FOR_TO
8985: IFFALSE 9066
// begin uc_side = side ;
8987: LD_ADDR_OWVAR 20
8991: PUSH
8992: LD_VAR 0 1
8996: ST_TO_ADDR
// uc_nation = nation ;
8997: LD_ADDR_OWVAR 21
9001: PUSH
9002: LD_VAR 0 2
9006: ST_TO_ADDR
// hc_gallery =  ;
9007: LD_ADDR_OWVAR 33
9011: PUSH
9012: LD_STRING 
9014: ST_TO_ADDR
// hc_name =  ;
9015: LD_ADDR_OWVAR 26
9019: PUSH
9020: LD_STRING 
9022: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: LD_VAR 0 4
9035: PPUSH
9036: CALL_OW 380
// un = CreateHuman ;
9040: LD_ADDR_VAR 0 9
9044: PUSH
9045: CALL_OW 44
9049: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 52
// end ;
9064: GO 8984
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 7
9072: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
// uc_side := GetSide ( b ) ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 255
9092: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9093: LD_ADDR_OWVAR 21
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 248
9107: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9108: LD_INT 0
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 380
// un = CreateHuman ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: CALL_OW 44
9132: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9133: LD_ADDR_VAR 0 5
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 254
9147: PUSH
9148: LD_INT 3
9150: MINUS
9151: ST_TO_ADDR
// if dir < 0 then
9152: LD_VAR 0 5
9156: PUSH
9157: LD_INT 0
9159: LESS
9160: IFFALSE 9176
// dir := 6 + dir ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_INT 6
9169: PUSH
9170: LD_VAR 0 5
9174: PLUS
9175: ST_TO_ADDR
// SetDir ( un , dir ) ;
9176: LD_VAR 0 4
9180: PPUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9190: LD_VAR 0 4
9194: PPUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 52
// end ;
9204: LD_VAR 0 3
9208: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_VAR 0 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 1000
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: PPUSH
9319: CALL_OW 70
9323: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9324: LD_VAR 0 5
9328: NOT
9329: PUSH
9330: LD_VAR 0 7
9334: NOT
9335: AND
9336: IFFALSE 9340
// exit ;
9338: GO 9536
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9340: LD_VAR 0 5
9344: NOT
9345: PUSH
9346: LD_VAR 0 7
9350: PPUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 54
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: AND
9369: PUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: CALL_OW 302
9379: AND
9380: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 3
9389: PUSH
9390: LD_INT 54
9392: PUSH
9393: EMPTY
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 72
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL_OW 120
// if buildingsList then
9414: LD_VAR 0 5
9418: IFFALSE 9536
// begin for i in engineerOkList do
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_VAR 0 7
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9534
// if IsInUnit ( i ) then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 310
9442: IFFALSE 9455
// ComExitBuilding ( i ) else
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 122
9453: GO 9532
// if GetLives ( i ) > 650 then
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 256
9464: PUSH
9465: LD_INT 650
9467: GREATER
9468: IFFALSE 9496
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_VAR 0 6
9484: PPUSH
9485: CALL_OW 74
9489: PPUSH
9490: CALL_OW 130
9494: GO 9532
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 56
9503: PPUSH
9504: LD_INT 10
9506: PPUSH
9507: CALL_OW 297
9511: PUSH
9512: LD_INT 8
9514: GREATER
9515: IFFALSE 9532
// ComMoveXY ( i , 56 , 10 ) ;
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 56
9524: PPUSH
9525: LD_INT 10
9527: PPUSH
9528: CALL_OW 111
9532: GO 9430
9534: POP
9535: POP
// end ; end ;
9536: LD_VAR 0 4
9540: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_VAR 0 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 24
9576: PUSH
9577: LD_INT 250
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9594: LD_ADDR_VAR 0 8
9598: PUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_INT 22
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 650
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 70
9652: ST_TO_ADDR
// if not damageUnits and not sciList then
9653: LD_VAR 0 8
9657: NOT
9658: PUSH
9659: LD_VAR 0 6
9663: NOT
9664: AND
9665: IFFALSE 9669
// exit ;
9667: GO 9808
// if damageUnits then
9669: LD_VAR 0 8
9673: IFFALSE 9752
// begin for i in sciList do
9675: LD_ADDR_VAR 0 7
9679: PUSH
9680: LD_VAR 0 6
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9748
// if IsInUnit ( i ) then
9688: LD_VAR 0 7
9692: PPUSH
9693: CALL_OW 310
9697: IFFALSE 9710
// ComExitBuilding ( i ) else
9699: LD_VAR 0 7
9703: PPUSH
9704: CALL_OW 122
9708: GO 9746
// if not HasTask ( i ) then
9710: LD_VAR 0 7
9714: PPUSH
9715: CALL_OW 314
9719: NOT
9720: IFFALSE 9746
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: LD_VAR 0 8
9731: PPUSH
9732: LD_VAR 0 7
9736: PPUSH
9737: CALL_OW 74
9741: PPUSH
9742: CALL_OW 128
9746: GO 9685
9748: POP
9749: POP
// end else
9750: GO 9808
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9752: LD_VAR 0 6
9756: PPUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 54
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 72
9774: IFFALSE 9808
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9776: LD_VAR 0 6
9780: PPUSH
9781: LD_INT 3
9783: PUSH
9784: LD_INT 54
9786: PUSH
9787: EMPTY
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 72
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 120
// end ;
9808: LD_VAR 0 5
9812: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// if not defendersList then
9819: LD_VAR 0 3
9823: NOT
9824: IFFALSE 9828
// exit ;
9826: GO 10210
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9828: LD_ADDR_VAR 0 7
9832: PUSH
9833: LD_VAR 0 1
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 70
9886: ST_TO_ADDR
// if enemy then
9887: LD_VAR 0 7
9891: IFFALSE 10112
// begin for i in defendersList do
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 3
9902: PUSH
9903: FOR_IN
9904: IFFALSE 10108
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9906: LD_VAR 0 6
9910: PPUSH
9911: CALL_OW 310
9915: PUSH
9916: LD_VAR 0 6
9920: PPUSH
9921: CALL_OW 256
9925: PUSH
9926: LD_INT 500
9928: GREATER
9929: AND
9930: IFFALSE 9943
// ComExitBuilding ( i ) else
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 122
9941: GO 10106
// if GetLives ( i ) > 650 then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 256
9952: PUSH
9953: LD_INT 650
9955: GREATER
9956: IFFALSE 10009
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9958: LD_ADDR_VAR 0 8
9962: PUSH
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 6
9972: PPUSH
9973: CALL_OW 74
9977: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9978: LD_VAR 0 6
9982: PPUSH
9983: LD_VAR 0 8
9987: PPUSH
9988: CALL_OW 250
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: CALL_OW 251
10002: PPUSH
10003: CALL_OW 114
// end else
10007: GO 10106
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10009: LD_INT 22
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: IFFALSE 10077
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10039: LD_VAR 0 6
10043: PPUSH
10044: LD_INT 56
10046: PPUSH
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 297
10054: PUSH
10055: LD_INT 8
10057: GREATER
10058: IFFALSE 10075
// ComMoveXY ( i , 56 , 10 ) ;
10060: LD_VAR 0 6
10064: PPUSH
10065: LD_INT 56
10067: PPUSH
10068: LD_INT 10
10070: PPUSH
10071: CALL_OW 111
// end else
10075: GO 10106
// if GetLives ( i ) <= 500 then
10077: LD_VAR 0 6
10081: PPUSH
10082: CALL_OW 256
10086: PUSH
10087: LD_INT 500
10089: LESSEQUAL
10090: IFFALSE 10106
// ComEnterUnit ( i , building ) ;
10092: LD_VAR 0 6
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: CALL_OW 120
// end ;
10106: GO 9903
10108: POP
10109: POP
// end else
10110: GO 10210
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 56
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 60
10128: PUSH
10129: EMPTY
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 1000
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PPUSH
10151: CALL_OW 72
10155: IFFALSE 10210
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 56
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: EMPTY
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 1000
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 4
10205: PPUSH
10206: CALL_OW 120
// end ;
10210: LD_VAR 0 5
10214: RET
// export function RussianTrap ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// if GetSide ( Brian ) = 4 then
10219: LD_EXP 6
10223: PPUSH
10224: CALL_OW 255
10228: PUSH
10229: LD_INT 4
10231: EQUAL
10232: IFFALSE 10255
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10234: LD_EXP 6
10238: PUSH
10239: LD_EXP 7
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: LD_INT 0
10250: PPUSH
10251: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10400
// begin ComExitBuilding ( i ) ;
10292: LD_VAR 0 2
10296: PPUSH
10297: CALL_OW 122
// wait ( 0 0$1 ) ;
10301: LD_INT 35
10303: PPUSH
10304: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10308: LD_VAR 0 2
10312: PPUSH
10313: LD_INT 120
10315: PPUSH
10316: LD_INT 56
10318: PPUSH
10319: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10323: LD_VAR 0 2
10327: PPUSH
10328: LD_INT 111
10330: PPUSH
10331: LD_INT 37
10333: PPUSH
10334: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10338: LD_INT 33
10340: PPUSH
10341: CALL_OW 255
10345: PUSH
10346: LD_INT 3
10348: EQUAL
10349: PUSH
10350: LD_INT 33
10352: PPUSH
10353: CALL_OW 302
10357: AND
10358: IFFALSE 10374
// AddComEnterUnit ( i , arm2 ) else
10360: LD_VAR 0 2
10364: PPUSH
10365: LD_INT 33
10367: PPUSH
10368: CALL_OW 180
10372: GO 10398
// begin AddComCrawl ( i ) ;
10374: LD_VAR 0 2
10378: PPUSH
10379: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_INT 109
10390: PPUSH
10391: LD_INT 30
10393: PPUSH
10394: CALL_OW 174
// end ; end ;
10398: GO 10289
10400: POP
10401: POP
// end ;
10402: LD_VAR 0 1
10406: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// nearestDist := 1000 ;
10414: LD_ADDR_VAR 0 4
10418: PUSH
10419: LD_INT 1000
10421: ST_TO_ADDR
// nearestUn := un ;
10422: LD_ADDR_VAR 0 5
10426: PUSH
10427: LD_VAR 0 1
10431: ST_TO_ADDR
// for sold in units do
10432: LD_ADDR_VAR 0 6
10436: PUSH
10437: LD_VAR 0 2
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10499
// begin dist := GetDistUnits ( un , sold ) ;
10445: LD_ADDR_VAR 0 7
10449: PUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 296
10464: ST_TO_ADDR
// if dist < nearestDist then
10465: LD_VAR 0 7
10469: PUSH
10470: LD_VAR 0 4
10474: LESS
10475: IFFALSE 10497
// begin nearestUn := sold ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 6
10486: ST_TO_ADDR
// nearestDist := dist ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_VAR 0 7
10496: ST_TO_ADDR
// end ; end ;
10497: GO 10442
10499: POP
10500: POP
// result := NearestUn ;
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_VAR 0 5
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function PrepareDifficulty ; begin
10516: LD_INT 0
10518: PPUSH
// if Difficulty = 1 then
10519: LD_OWVAR 67
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10590
// begin RemoveUnit ( brw2 ) ;
10529: LD_INT 9
10531: PPUSH
10532: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10536: LD_INT 30
10538: PPUSH
10539: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10543: LD_INT 52
10545: PPUSH
10546: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10550: LD_INT 63
10552: PPUSH
10553: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10557: LD_INT 5
10559: PUSH
10560: LD_INT 4
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: LD_INT 60
10569: PPUSH
10570: CALL_OW 240
// RuSoldMinLevel = 0 ;
10574: LD_ADDR_EXP 13
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10582: LD_ADDR_EXP 14
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// end ; if Difficulty = 2 then
10590: LD_OWVAR 67
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: IFFALSE 10640
// begin RemoveUnit ( brw4 ) ;
10600: LD_INT 52
10602: PPUSH
10603: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10607: LD_INT 5
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: LD_INT 50
10619: PPUSH
10620: CALL_OW 240
// RuSoldMinLevel = 1 ;
10624: LD_ADDR_EXP 13
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10632: LD_ADDR_EXP 14
10636: PUSH
10637: LD_INT 2
10639: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10640: LD_OWVAR 67
10644: PUSH
10645: LD_INT 3
10647: GREATEREQUAL
10648: IFFALSE 10683
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10650: LD_INT 5
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: LD_INT 40
10662: PPUSH
10663: CALL_OW 240
// RuSoldMinLevel = 2 ;
10667: LD_ADDR_EXP 13
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10675: LD_ADDR_EXP 14
10679: PUSH
10680: LD_INT 3
10682: ST_TO_ADDR
// end ; end ;
10683: LD_VAR 0 1
10687: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not vehicles then
10693: LD_VAR 0 1
10697: NOT
10698: IFFALSE 10702
// exit ;
10700: GO 10832
// tmp := [ ] ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: EMPTY
10708: ST_TO_ADDR
// for i in vehicles do
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_VAR 0 1
10718: PUSH
10719: FOR_IN
10720: IFFALSE 10816
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_VAR 0 5
10731: PPUSH
10732: LD_VAR 0 5
10736: PUSH
10737: LD_INT 1
10739: PLUS
10740: PPUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 265
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 262
10760: PUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL_OW 263
10770: PUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 264
10780: PUSH
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 261
10790: PUSH
10791: LD_VAR 0 4
10795: PPUSH
10796: CALL_OW 256
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
10814: GO 10719
10816: POP
10817: POP
// SaveVariable ( tmp , ident ) ;
10818: LD_VAR 0 5
10822: PPUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: CALL_OW 39
// end ; end_of_file
10832: LD_VAR 0 3
10836: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
10841: PPUSH
// prefix := 01_ ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_STRING 01_
10849: ST_TO_ADDR
// uc_side := 1 ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10858: LD_ADDR_EXP 1
10862: PUSH
10863: LD_STRING JMM
10865: PPUSH
10866: LD_EXP 34
10870: NOT
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: CALL 36507 0 3
10881: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_STRING 01_JMMLifePoints_1
10889: PPUSH
10890: LD_INT 1000
10892: PPUSH
10893: CALL_OW 30
10897: ST_TO_ADDR
// if plive < 250 then
10898: LD_VAR 0 2
10902: PUSH
10903: LD_INT 250
10905: LESS
10906: IFFALSE 10916
// plive := 300 ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 300
10915: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10916: LD_EXP 1
10920: PPUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10930: LD_ADDR_EXP 9
10934: PUSH
10935: LD_STRING Powell
10937: PPUSH
10938: CALL_OW 25
10942: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10943: LD_ADDR_EXP 2
10947: PUSH
10948: LD_STRING Bobby
10950: PPUSH
10951: LD_EXP 34
10955: NOT
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 36507 0 3
10966: ST_TO_ADDR
// if Bobby then
10967: LD_EXP 2
10971: IFFALSE 11021
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_STRING 01_BobbyLifePoints_1
10980: PPUSH
10981: LD_INT 1000
10983: PPUSH
10984: CALL_OW 30
10988: ST_TO_ADDR
// if plive < 250 then
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 250
10996: LESS
10997: IFFALSE 11007
// plive := 300 ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_INT 300
11006: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11007: LD_EXP 2
11011: PPUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11021: LD_ADDR_EXP 3
11025: PUSH
11026: LD_STRING Cyrus
11028: PPUSH
11029: LD_EXP 34
11033: NOT
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: CALL 36507 0 3
11044: ST_TO_ADDR
// if Cyrus then
11045: LD_EXP 3
11049: IFFALSE 11099
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11051: LD_ADDR_VAR 0 2
11055: PUSH
11056: LD_STRING 01_CyrusLifePoints_1
11058: PPUSH
11059: LD_INT 1000
11061: PPUSH
11062: CALL_OW 30
11066: ST_TO_ADDR
// if plive < 250 then
11067: LD_VAR 0 2
11071: PUSH
11072: LD_INT 250
11074: LESS
11075: IFFALSE 11085
// plive := 300 ;
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_INT 300
11084: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11085: LD_EXP 3
11089: PPUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11099: LD_ADDR_EXP 5
11103: PUSH
11104: LD_STRING Khatam
11106: PPUSH
11107: CALL_OW 25
11111: ST_TO_ADDR
// uc_side := 4 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 4
11119: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11120: LD_ADDR_EXP 4
11124: PUSH
11125: LD_STRING Lisa
11127: PPUSH
11128: CALL_OW 25
11132: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_INT 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11148: LD_EXP 2
11152: PPUSH
11153: LD_INT 3
11155: PPUSH
11156: LD_INT 0
11158: PPUSH
11159: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11163: LD_EXP 3
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: LD_INT 0
11173: PPUSH
11174: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11178: LD_EXP 4
11182: PPUSH
11183: LD_INT 5
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// ComCrawl ( Lisa ) ;
11193: LD_EXP 4
11197: PPUSH
11198: CALL_OW 137
// end ;
11202: LD_VAR 0 1
11206: RET
// export function PrepareLisSquad ; var i , un ; begin
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
11211: PPUSH
// uc_side := 4 ;
11212: LD_ADDR_OWVAR 20
11216: PUSH
11217: LD_INT 4
11219: ST_TO_ADDR
// uc_nation := 1 ;
11220: LD_ADDR_OWVAR 21
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// hc_class := 2 ;
11228: LD_ADDR_OWVAR 28
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// hc_sex := sex_male ;
11236: LD_ADDR_OWVAR 27
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// hc_gallery :=  ;
11244: LD_ADDR_OWVAR 33
11248: PUSH
11249: LD_STRING 
11251: ST_TO_ADDR
// hc_name :=  ;
11252: LD_ADDR_OWVAR 26
11256: PUSH
11257: LD_STRING 
11259: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11260: LD_ADDR_OWVAR 30
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 0
11273: PUSH
11274: LD_INT 0
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11283: LD_ADDR_OWVAR 31
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// un := CreateHuman ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: CALL_OW 44
11315: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 6
11323: PPUSH
11324: LD_INT 0
11326: PPUSH
11327: CALL_OW 49
// hc_sex := sex_female ;
11331: LD_ADDR_OWVAR 27
11335: PUSH
11336: LD_INT 2
11338: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11339: LD_ADDR_OWVAR 30
11343: PUSH
11344: LD_INT 0
11346: PUSH
11347: LD_INT 0
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11362: LD_ADDR_OWVAR 31
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 0
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// un := CreateHuman ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 6
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// if not Bobby and not Cyrus then
11410: LD_EXP 2
11414: NOT
11415: PUSH
11416: LD_EXP 3
11420: NOT
11421: AND
11422: IFFALSE 11511
// begin hc_class := 1 ;
11424: LD_ADDR_OWVAR 28
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// hc_sex := sex_male ;
11432: LD_ADDR_OWVAR 27
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11440: LD_ADDR_OWVAR 30
11444: PUSH
11445: LD_INT 2
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11463: LD_ADDR_OWVAR 31
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: ST_TO_ADDR
// un := CreateHuman ;
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: CALL_OW 44
11495: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 31
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 49
// end ; InitHc ;
11511: CALL_OW 19
// end ;
11515: LD_VAR 0 1
11519: RET
// export function PrepareOtherAmericans ; begin
11520: LD_INT 0
11522: PPUSH
// uc_side := 4 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 4
11530: ST_TO_ADDR
// uc_nation := 1 ;
11531: LD_ADDR_OWVAR 21
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// hc_gallery :=  ;
11539: LD_ADDR_OWVAR 33
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// hc_name := Tom Garvin ;
11547: LD_ADDR_OWVAR 26
11551: PUSH
11552: LD_STRING Tom Garvin
11554: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11555: LD_INT 1
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 380
// Brian := CreateHuman ;
11568: LD_ADDR_EXP 6
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11578: LD_EXP 6
11582: PPUSH
11583: LD_INT 10
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 49
// hc_name := Jerry White ;
11593: LD_ADDR_OWVAR 26
11597: PUSH
11598: LD_STRING Jerry White
11600: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11601: LD_INT 1
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 380
// Jerry := CreateHuman ;
11614: LD_ADDR_EXP 7
11618: PUSH
11619: CALL_OW 44
11623: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11624: LD_EXP 7
11628: PPUSH
11629: LD_INT 10
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11639: LD_EXP 6
11643: PUSH
11644: LD_EXP 7
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 140
// end ;
11657: LD_VAR 0 1
11661: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11668: LD_ADDR_VAR 0 4
11672: PUSH
11673: LD_INT 16
11675: PPUSH
11676: LD_INT 0
11678: PPUSH
11679: CALL_OW 517
11683: ST_TO_ADDR
// for i = 1 to 6 do
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_INT 6
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11844
// begin uc_side := 4 ;
11700: LD_ADDR_OWVAR 20
11704: PUSH
11705: LD_INT 4
11707: ST_TO_ADDR
// uc_nation := 1 ;
11708: LD_ADDR_OWVAR 21
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// hc_gallery :=  ;
11716: LD_ADDR_OWVAR 33
11720: PUSH
11721: LD_STRING 
11723: ST_TO_ADDR
// hc_name :=  ;
11724: LD_ADDR_OWVAR 26
11728: PUSH
11729: LD_STRING 
11731: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: LD_INT 4
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_INT 3
11756: MOD
11757: PUSH
11758: LD_INT 1
11760: PLUS
11761: ARRAY
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 380
// un := CreateHuman ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: CALL_OW 44
11779: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: CALL_OW 12
11795: PPUSH
11796: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_VAR 0 4
11809: PUSH
11810: LD_INT 1
11812: ARRAY
11813: PUSH
11814: LD_VAR 0 2
11818: ARRAY
11819: PPUSH
11820: LD_VAR 0 4
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PUSH
11829: LD_VAR 0 2
11833: ARRAY
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 601
// end ;
11842: GO 11697
11844: POP
11845: POP
// DyingSold := CreateHuman ;
11846: LD_ADDR_EXP 35
11850: PUSH
11851: CALL_OW 44
11855: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11856: LD_EXP 35
11860: PPUSH
11861: LD_INT 16
11863: PPUSH
11864: LD_INT 0
11866: PPUSH
11867: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11871: LD_EXP 35
11875: PPUSH
11876: LD_INT 250
11878: PPUSH
11879: CALL_OW 234
// end ; end_of_file
11883: LD_VAR 0 1
11887: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 2
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: LD_INT 56
11935: PUSH
11936: EMPTY
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: PUSH
11951: LD_EXP 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: DIFF
11959: ST_TO_ADDR
// if not tmp then
11960: LD_VAR 0 2
11964: NOT
11965: IFFALSE 11969
// exit ;
11967: GO 12045
// uc_side = 6 ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_INT 6
11976: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11977: LD_ADDR_EXP 8
11981: PUSH
11982: LD_STRING Mikhail
11984: PPUSH
11985: CALL_OW 25
11989: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11990: LD_EXP 8
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12002: LD_EXP 8
12006: PPUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: CALL_OW 250
12020: PPUSH
12021: LD_VAR 0 2
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 251
12034: PPUSH
12035: LD_INT 5
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 50
// end ;
12045: LD_VAR 0 1
12049: RET
// export function PrepareRussianCommander ; begin
12050: LD_INT 0
12052: PPUSH
// uc_side = 3 ;
12053: LD_ADDR_OWVAR 20
12057: PUSH
12058: LD_INT 3
12060: ST_TO_ADDR
// uc_nation = 3 ;
12061: LD_ADDR_OWVAR 21
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12069: LD_ADDR_EXP 19
12073: PUSH
12074: LD_STRING Natasza
12076: PPUSH
12077: CALL_OW 25
12081: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12082: LD_EXP 19
12086: PPUSH
12087: LD_INT 24
12089: PPUSH
12090: LD_INT 0
12092: PPUSH
12093: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12097: LD_EXP 19
12101: PPUSH
12102: LD_INT 56
12104: PPUSH
12105: LD_INT 16
12107: PPUSH
12108: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12112: LD_ADDR_EXP 24
12116: PUSH
12117: LD_EXP 24
12121: PPUSH
12122: LD_EXP 24
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: LD_EXP 19
12135: PPUSH
12136: CALL_OW 1
12140: ST_TO_ADDR
// end ;
12141: LD_VAR 0 1
12145: RET
// export function PrepareSouthBase ; var i , un ; begin
12146: LD_INT 0
12148: PPUSH
12149: PPUSH
12150: PPUSH
// for i = 1 to 2 do
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_INT 2
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12274
// begin uc_side = 3 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 3
12174: ST_TO_ADDR
// uc_nation = 3 ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 3
12182: ST_TO_ADDR
// hc_gallery =  ;
12183: LD_ADDR_OWVAR 33
12187: PUSH
12188: LD_STRING 
12190: ST_TO_ADDR
// hc_name =  ;
12191: LD_ADDR_OWVAR 26
12195: PUSH
12196: LD_STRING 
12198: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12199: LD_INT 1
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: LD_EXP 13
12209: PPUSH
12210: LD_EXP 14
12214: PPUSH
12215: CALL_OW 12
12219: PPUSH
12220: CALL_OW 380
// hc_importance = 0 ;
12224: LD_ADDR_OWVAR 32
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// un = CreateHuman ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: CALL_OW 44
12241: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 11
12249: PPUSH
12250: LD_INT 0
12252: PPUSH
12253: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 111
12264: PPUSH
12265: LD_INT 38
12267: PPUSH
12268: CALL_OW 118
// end ;
12272: GO 12164
12274: POP
12275: POP
// for i = 1 to 2 do
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: DOUBLE
12282: LD_INT 1
12284: DEC
12285: ST_TO_ADDR
12286: LD_INT 2
12288: PUSH
12289: FOR_TO
12290: IFFALSE 12373
// begin uc_side = 3 ;
12292: LD_ADDR_OWVAR 20
12296: PUSH
12297: LD_INT 3
12299: ST_TO_ADDR
// uc_nation = 3 ;
12300: LD_ADDR_OWVAR 21
12304: PUSH
12305: LD_INT 3
12307: ST_TO_ADDR
// hc_gallery =  ;
12308: LD_ADDR_OWVAR 33
12312: PUSH
12313: LD_STRING 
12315: ST_TO_ADDR
// hc_name =  ;
12316: LD_ADDR_OWVAR 26
12320: PUSH
12321: LD_STRING 
12323: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12324: LD_INT 0
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_EXP 13
12334: PPUSH
12335: LD_EXP 14
12339: PPUSH
12340: CALL_OW 12
12344: PPUSH
12345: CALL_OW 380
// un = CreateHuman ;
12349: LD_ADDR_VAR 0 3
12353: PUSH
12354: CALL_OW 44
12358: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 52
// end ;
12371: GO 12289
12373: POP
12374: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12375: LD_INT 3
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: LD_INT 33
12383: PPUSH
12384: LD_EXP 13
12388: PPUSH
12389: LD_EXP 14
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 1
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_OWVAR 67
12424: ARRAY
12425: PPUSH
12426: CALL 8964 0 6
// for i in UnitsInside ( arm2 ) do
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_INT 33
12437: PPUSH
12438: CALL_OW 313
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12477
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12446: LD_ADDR_EXP 25
12450: PUSH
12451: LD_EXP 25
12455: PPUSH
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: PPUSH
12465: LD_VAR 0 2
12469: PPUSH
12470: CALL_OW 1
12474: ST_TO_ADDR
12475: GO 12443
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 1
12483: RET
// export function PrepareNorthBase ; var i , un ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 3
12523: PPUSH
12524: LD_INT 4
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 4
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_OWVAR 67
12545: ARRAY
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12634
// begin uc_side = 3 ;
12550: LD_ADDR_OWVAR 20
12554: PUSH
12555: LD_INT 3
12557: ST_TO_ADDR
// uc_nation = 3 ;
12558: LD_ADDR_OWVAR 21
12562: PUSH
12563: LD_INT 3
12565: ST_TO_ADDR
// hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_EXP 13
12592: PPUSH
12593: LD_EXP 14
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 380
// un = CreateHuman ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 14
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12547
12634: POP
12635: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 3
12641: PPUSH
12642: LD_INT 2
12644: PPUSH
12645: LD_EXP 13
12649: PPUSH
12650: LD_EXP 14
12654: PPUSH
12655: CALL_OW 12
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 2
12668: PPUSH
12669: CALL_OW 12
12673: PUSH
12674: LD_INT 1
12676: PPUSH
12677: LD_INT 3
12679: PPUSH
12680: CALL_OW 12
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 3
12690: PPUSH
12691: CALL_OW 12
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_OWVAR 67
12709: ARRAY
12710: PPUSH
12711: CALL 8964 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12715: LD_INT 3
12717: PPUSH
12718: LD_INT 3
12720: PPUSH
12721: LD_INT 23
12723: PPUSH
12724: LD_EXP 13
12728: PPUSH
12729: LD_EXP 14
12733: PPUSH
12734: CALL_OW 12
12738: PPUSH
12739: LD_INT 4
12741: PPUSH
12742: LD_INT 0
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: LD_OWVAR 67
12764: ARRAY
12765: PPUSH
12766: CALL 8964 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12770: LD_INT 3
12772: PPUSH
12773: LD_INT 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: LD_EXP 13
12783: PPUSH
12784: LD_EXP 14
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: LD_INT 1
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_OWVAR 67
12819: ARRAY
12820: PPUSH
12821: CALL 8964 0 6
// for i in UnitsInside ( arm1 ) do
12825: LD_ADDR_VAR 0 2
12829: PUSH
12830: LD_INT 2
12832: PPUSH
12833: CALL_OW 313
12837: PUSH
12838: FOR_IN
12839: IFFALSE 12872
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12841: LD_ADDR_EXP 24
12845: PUSH
12846: LD_EXP 24
12850: PPUSH
12851: LD_EXP 24
12855: PUSH
12856: LD_INT 1
12858: PLUS
12859: PPUSH
12860: LD_VAR 0 2
12864: PPUSH
12865: CALL_OW 1
12869: ST_TO_ADDR
12870: GO 12838
12872: POP
12873: POP
// end ;
12874: LD_VAR 0 1
12878: RET
// export function PrepareOtherRussians ; var i , un ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
12883: PPUSH
// for i = 1 to 2 do
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_INT 2
12896: PUSH
12897: FOR_TO
12898: IFFALSE 12999
// begin uc_side = 3 ;
12900: LD_ADDR_OWVAR 20
12904: PUSH
12905: LD_INT 3
12907: ST_TO_ADDR
// uc_nation = 3 ;
12908: LD_ADDR_OWVAR 21
12912: PUSH
12913: LD_INT 3
12915: ST_TO_ADDR
// hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 9
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 80
12989: PPUSH
12990: LD_INT 73
12992: PPUSH
12993: CALL_OW 118
// end ;
12997: GO 12897
12999: POP
13000: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_INT 3
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 31
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: PUSH
13035: FOR_IN
13036: IFFALSE 13064
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13038: LD_EXP 13
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 12
13052: PPUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL 9073 0 2
13062: GO 13035
13064: POP
13065: POP
// end ;
13066: LD_VAR 0 1
13070: RET
// export function PrepareCargoBays ; begin
13071: LD_INT 0
13073: PPUSH
// uc_side = 3 ;
13074: LD_ADDR_OWVAR 20
13078: PUSH
13079: LD_INT 3
13081: ST_TO_ADDR
// uc_nation = 3 ;
13082: LD_ADDR_OWVAR 21
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// vc_engine = 1 ;
13090: LD_ADDR_OWVAR 39
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// vc_control = 1 ;
13098: LD_ADDR_OWVAR 38
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// vc_weapon = 51 ;
13106: LD_ADDR_OWVAR 40
13110: PUSH
13111: LD_INT 51
13113: ST_TO_ADDR
// vc_chassis = 22 ;
13114: LD_ADDR_OWVAR 37
13118: PUSH
13119: LD_INT 22
13121: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13122: LD_ADDR_EXP 15
13126: PUSH
13127: CALL_OW 45
13131: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13132: LD_ADDR_EXP 16
13136: PUSH
13137: CALL_OW 45
13141: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13142: LD_EXP 15
13146: PPUSH
13147: LD_INT 13
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13157: LD_EXP 16
13161: PPUSH
13162: LD_INT 13
13164: PPUSH
13165: LD_INT 0
13167: PPUSH
13168: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13172: LD_EXP 15
13176: PPUSH
13177: LD_INT 2
13179: PPUSH
13180: LD_INT 70
13182: PUSH
13183: LD_INT 50
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_OWVAR 67
13202: ARRAY
13203: PPUSH
13204: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13208: LD_EXP 16
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: LD_INT 70
13218: PUSH
13219: LD_INT 50
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 20
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_OWVAR 67
13238: ARRAY
13239: PPUSH
13240: CALL_OW 291
// hc_gallery =  ;
13244: LD_ADDR_OWVAR 33
13248: PUSH
13249: LD_STRING 
13251: ST_TO_ADDR
// hc_name =  ;
13252: LD_ADDR_OWVAR 26
13256: PUSH
13257: LD_STRING 
13259: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13260: LD_INT 1
13262: PPUSH
13263: LD_INT 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 2
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: CALL_OW 380
// driver1 = CreateHuman ;
13281: LD_ADDR_EXP 17
13285: PUSH
13286: CALL_OW 44
13290: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13291: LD_EXP 17
13295: PPUSH
13296: LD_EXP 15
13300: PPUSH
13301: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13305: LD_ADDR_OWVAR 26
13309: PUSH
13310: LD_STRING Nikolai Andreyev
13312: ST_TO_ADDR
// driver2 = CreateHuman ;
13313: LD_ADDR_EXP 18
13317: PUSH
13318: CALL_OW 44
13322: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13323: LD_EXP 18
13327: PPUSH
13328: LD_EXP 16
13332: PPUSH
13333: CALL_OW 52
// end ;
13337: LD_VAR 0 1
13341: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// uc_side = 3 ;
13350: LD_ADDR_OWVAR 20
13354: PUSH
13355: LD_INT 3
13357: ST_TO_ADDR
// uc_nation = 3 ;
13358: LD_ADDR_OWVAR 21
13362: PUSH
13363: LD_INT 3
13365: ST_TO_ADDR
// for i := 1 to count do
13366: LD_ADDR_VAR 0 4
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_VAR 0 1
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13644
// begin vc_engine = 1 ;
13384: LD_ADDR_OWVAR 39
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// vc_control = 1 ;
13392: LD_ADDR_OWVAR 38
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13400: LD_ADDR_OWVAR 40
13404: PUSH
13405: LD_INT 42
13407: ST_TO_ADDR
// if Difficulty = 3 then
13408: LD_OWVAR 67
13412: PUSH
13413: LD_INT 3
13415: EQUAL
13416: IFFALSE 13445
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13418: LD_ADDR_OWVAR 40
13422: PUSH
13423: LD_INT 42
13425: PUSH
13426: LD_INT 43
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: ST_TO_ADDR
// if Difficulty = 4 then
13445: LD_OWVAR 67
13449: PUSH
13450: LD_INT 4
13452: EQUAL
13453: IFFALSE 13490
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13455: LD_ADDR_OWVAR 40
13459: PUSH
13460: LD_INT 42
13462: PUSH
13463: LD_INT 43
13465: PUSH
13466: LD_INT 43
13468: PUSH
13469: LD_INT 44
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 4
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13490: LD_ADDR_OWVAR 37
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_OWVAR 67
13517: ARRAY
13518: ST_TO_ADDR
// veh = CreateVehicle ;
13519: LD_ADDR_VAR 0 5
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13529: LD_VAR 0 5
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13546: LD_ADDR_EXP 26
13550: PUSH
13551: LD_EXP 26
13555: PUSH
13556: LD_VAR 0 5
13560: ADD
13561: ST_TO_ADDR
// hc_gallery =  ;
13562: LD_ADDR_OWVAR 33
13566: PUSH
13567: LD_STRING 
13569: ST_TO_ADDR
// hc_name =  ;
13570: LD_ADDR_OWVAR 26
13574: PUSH
13575: LD_STRING 
13577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13578: LD_INT 0
13580: PPUSH
13581: LD_INT 3
13583: PPUSH
13584: LD_EXP 13
13588: PPUSH
13589: LD_EXP 14
13593: PPUSH
13594: CALL_OW 12
13598: PPUSH
13599: CALL_OW 380
// un = CreateHuman ;
13603: LD_ADDR_VAR 0 6
13607: PUSH
13608: CALL_OW 44
13612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13613: LD_VAR 0 6
13617: PPUSH
13618: LD_VAR 0 5
13622: PPUSH
13623: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13627: LD_VAR 0 6
13631: PPUSH
13632: LD_INT 14
13634: PPUSH
13635: LD_INT 9
13637: PPUSH
13638: CALL_OW 111
// end ;
13642: GO 13381
13644: POP
13645: POP
// wait ( 0 0$1 ) ;
13646: LD_INT 35
13648: PPUSH
13649: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13653: LD_INT 0
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: LD_EXP 13
13663: PPUSH
13664: LD_EXP 14
13668: PPUSH
13669: CALL_OW 12
13673: PPUSH
13674: CALL_OW 380
// un = CreateHuman ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: CALL_OW 44
13687: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 2
13708: MUL
13709: PLUS
13710: PUSH
13711: FOR_TO
13712: IFFALSE 13804
// begin hc_gallery =  ;
13714: LD_ADDR_OWVAR 33
13718: PUSH
13719: LD_STRING 
13721: ST_TO_ADDR
// hc_name =  ;
13722: LD_ADDR_OWVAR 26
13726: PUSH
13727: LD_STRING 
13729: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13730: LD_INT 1
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: LD_EXP 13
13740: PPUSH
13741: LD_EXP 14
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 380
// un = CreateHuman ;
13755: LD_ADDR_VAR 0 6
13759: PUSH
13760: CALL_OW 44
13764: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13765: LD_VAR 0 6
13769: PPUSH
13770: LD_INT 9
13772: PPUSH
13773: LD_INT 13
13775: PPUSH
13776: LD_INT 4
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13786: LD_ADDR_EXP 26
13790: PUSH
13791: LD_EXP 26
13795: PUSH
13796: LD_VAR 0 6
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13711
13804: POP
13805: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_INT 26
13813: PPUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 70
13853: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13854: LD_VAR 0 7
13858: PUSH
13859: LD_INT 1
13861: ARRAY
13862: PPUSH
13863: LD_STRING D9-Rus3-1
13865: PPUSH
13866: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13870: LD_VAR 0 7
13874: PUSH
13875: LD_INT 2
13877: ARRAY
13878: PPUSH
13879: LD_STRING D9-Russ-1
13881: PPUSH
13882: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13886: LD_EXP 26
13890: PPUSH
13891: LD_INT 31
13893: PPUSH
13894: LD_INT 13
13896: PPUSH
13897: CALL_OW 114
// wait ( 0 0$3 ) ;
13901: LD_INT 105
13903: PPUSH
13904: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13908: LD_INT 35
13910: PPUSH
13911: CALL_OW 67
// for i in attackGroup do
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_EXP 26
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14293
// begin if IsDead ( i ) then
13928: LD_VAR 0 4
13932: PPUSH
13933: CALL_OW 301
13937: IFFALSE 13957
// begin attackGroup := attackGroup diff i ;
13939: LD_ADDR_EXP 26
13943: PUSH
13944: LD_EXP 26
13948: PUSH
13949: LD_VAR 0 4
13953: DIFF
13954: ST_TO_ADDR
// continue ;
13955: GO 13925
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 314
13966: NOT
13967: PUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 110
13977: NOT
13978: AND
13979: IFFALSE 14015
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13981: LD_VAR 0 4
13985: PPUSH
13986: LD_INT 22
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: CALL_OW 69
14000: PPUSH
14001: LD_VAR 0 4
14005: PPUSH
14006: CALL_OW 74
14010: PPUSH
14011: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14015: LD_VAR 0 4
14019: PPUSH
14020: CALL_OW 110
14024: NOT
14025: PUSH
14026: LD_VAR 0 4
14030: PPUSH
14031: CALL_OW 256
14035: PUSH
14036: LD_INT 650
14038: LESS
14039: AND
14040: PUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 247
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: AND
14055: IFFALSE 14084
// begin SetTag ( i , 1 ) ;
14057: LD_VAR 0 4
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14069: LD_VAR 0 4
14073: PPUSH
14074: LD_INT 20
14076: PPUSH
14077: LD_INT 8
14079: PPUSH
14080: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 110
14093: PUSH
14094: LD_INT 1
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: LD_INT 20
14105: PPUSH
14106: LD_INT 8
14108: PPUSH
14109: CALL_OW 297
14113: PUSH
14114: LD_INT 6
14116: LESS
14117: AND
14118: IFFALSE 14132
// SetTag ( i , 2 ) ;
14120: LD_VAR 0 4
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 109
// if GetTag ( i ) = 2 then
14132: LD_VAR 0 4
14136: PPUSH
14137: CALL_OW 110
14141: PUSH
14142: LD_INT 2
14144: EQUAL
14145: IFFALSE 14253
// begin if GetLives ( i ) = 1000 then
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 256
14156: PUSH
14157: LD_INT 1000
14159: EQUAL
14160: IFFALSE 14176
// SetTag ( i , 3 ) else
14162: LD_VAR 0 4
14166: PPUSH
14167: LD_INT 3
14169: PPUSH
14170: CALL_OW 109
14174: GO 14253
// if IsDrivenBy ( i ) then
14176: LD_VAR 0 4
14180: PPUSH
14181: CALL_OW 311
14185: IFFALSE 14253
// begin mech := IsDrivenBy ( i ) ;
14187: LD_ADDR_VAR 0 8
14191: PUSH
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 311
14201: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 8
14209: PPUSH
14210: CALL_OW 292
14214: NOT
14215: PUSH
14216: LD_VAR 0 8
14220: PPUSH
14221: CALL_OW 256
14225: PUSH
14226: LD_INT 1000
14228: LESS
14229: AND
14230: IFFALSE 14244
// SetLives ( mech , 1000 ) ;
14232: LD_VAR 0 8
14236: PPUSH
14237: LD_INT 1000
14239: PPUSH
14240: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14244: LD_VAR 0 8
14248: PPUSH
14249: CALL 75656 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14253: LD_VAR 0 4
14257: PPUSH
14258: CALL_OW 110
14262: PUSH
14263: LD_INT 3
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 311
14276: AND
14277: IFFALSE 14291
// SetTag ( i , 0 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 109
// end ;
14291: GO 13925
14293: POP
14294: POP
// until not attackGroup ;
14295: LD_EXP 26
14299: NOT
14300: IFFALSE 13908
// end ;
14302: LD_VAR 0 3
14306: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14307: LD_EXP 26
14311: PPUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 72
14326: IFFALSE 14394
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
// begin enable ;
14334: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_EXP 26
14344: PPUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 72
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14392
// if GetFuel ( i ) < 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 261
14372: PUSH
14373: LD_INT 3
14375: LESS
14376: IFFALSE 14390
// SetFuel ( i , 3 ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 3
14385: PPUSH
14386: CALL_OW 240
14390: GO 14360
14392: POP
14393: POP
// end ; end_of_file
14394: PPOPN 1
14396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14397: LD_INT 22
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: IFFALSE 14444
14427: GO 14429
14429: DISABLE
// begin enable ;
14430: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14431: LD_INT 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: LD_INT 22
14439: PPUSH
14440: CALL 9209 0 3
// end ;
14444: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14445: LD_INT 22
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: IFFALSE 14495
14475: GO 14477
14477: DISABLE
// begin enable ;
14478: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14479: LD_INT 3
14481: PPUSH
14482: LD_INT 20
14484: PPUSH
14485: LD_INT 22
14487: PPUSH
14488: LD_INT 23
14490: PPUSH
14491: CALL 9541 0 4
// end ;
14495: END
// every 0 0$1 trigger northBaseDefenders do
14496: LD_EXP 24
14500: IFFALSE 14524
14502: GO 14504
14504: DISABLE
// begin enable ;
14505: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14506: LD_INT 22
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_EXP 24
14516: PPUSH
14517: LD_INT 2
14519: PPUSH
14520: CALL 9813 0 4
// end ;
14524: END
// every 0 0$1 trigger southBaseDefenders do
14525: LD_EXP 25
14529: IFFALSE 14553
14531: GO 14533
14533: DISABLE
// begin enable ;
14534: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14535: LD_INT 23
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: LD_EXP 25
14545: PPUSH
14546: LD_INT 33
14548: PPUSH
14549: CALL 9813 0 4
// end ; end_of_file
14553: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL 32218 0 1
// if unit = JMM then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_EXP 1
14572: EQUAL
14573: IFFALSE 14582
// YouLost ( JMM ) ;
14575: LD_STRING JMM
14577: PPUSH
14578: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 266
14591: PUSH
14592: LD_INT 0
14594: EQUAL
14595: IFFALSE 14604
// YouLost ( DepotDestroyed ) ;
14597: LD_STRING DepotDestroyed
14599: PPUSH
14600: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// deadsCounter = deadsCounter + 1 ;
14634: LD_ADDR_EXP 31
14638: PUSH
14639: LD_EXP 31
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// end ;
14648: PPOPN 1
14650: END
// on Command ( cmd ) do var i , j , tmp ;
14651: LD_INT 0
14653: PPUSH
14654: PPUSH
14655: PPUSH
// begin SOS_Command ( cmd ) ;
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL 32322 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 2
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: PUSH
14699: FOR_IN
14700: IFFALSE 14821
// begin if GetTaskList ( i ) then
14702: LD_VAR 0 2
14706: PPUSH
14707: CALL_OW 437
14711: IFFALSE 14819
// begin for j = 1 to GetTaskList ( i ) do
14713: LD_ADDR_VAR 0 3
14717: PUSH
14718: DOUBLE
14719: LD_INT 1
14721: DEC
14722: ST_TO_ADDR
14723: LD_VAR 0 2
14727: PPUSH
14728: CALL_OW 437
14732: PUSH
14733: FOR_TO
14734: IFFALSE 14817
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14736: LD_ADDR_VAR 0 4
14740: PUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 437
14750: PUSH
14751: LD_VAR 0 3
14755: ARRAY
14756: PUSH
14757: LD_INT 4
14759: ARRAY
14760: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14761: LD_VAR 0 4
14765: PPUSH
14766: CALL_OW 255
14770: PUSH
14771: LD_INT 3
14773: EQUAL
14774: PUSH
14775: LD_VAR 0 4
14779: PPUSH
14780: CALL_OW 247
14784: PUSH
14785: LD_INT 2
14787: EQUAL
14788: AND
14789: PUSH
14790: LD_VAR 0 4
14794: PPUSH
14795: CALL_OW 264
14799: PUSH
14800: LD_INT 51
14802: EQUAL
14803: AND
14804: IFFALSE 14815
// ComStop ( i ) ;
14806: LD_VAR 0 2
14810: PPUSH
14811: CALL_OW 141
// end ;
14815: GO 14733
14817: POP
14818: POP
// end ; end ;
14819: GO 14699
14821: POP
14822: POP
// end ;
14823: PPOPN 4
14825: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14826: LD_VAR 0 2
14830: PUSH
14831: LD_EXP 8
14835: EQUAL
14836: PUSH
14837: LD_EXP 21
14841: PUSH
14842: LD_INT 4
14844: NONEQUAL
14845: AND
14846: IFFALSE 14998
// begin if IsOk ( Mikhail ) then
14848: LD_EXP 8
14852: PPUSH
14853: CALL_OW 302
14857: IFFALSE 14865
// AskMikhail else
14859: CALL 7486 0 0
14863: GO 14998
// if IsOk ( llab1 ) then
14865: LD_INT 23
14867: PPUSH
14868: CALL_OW 302
14872: IFFALSE 14961
// begin InGameOn ;
14874: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14878: LD_EXP 8
14882: PPUSH
14883: LD_INT 6
14885: PPUSH
14886: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14890: LD_INT 23
14892: PPUSH
14893: LD_INT 6
14895: PPUSH
14896: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14900: LD_EXP 8
14904: PPUSH
14905: LD_INT 23
14907: PPUSH
14908: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14912: LD_INT 35
14914: PPUSH
14915: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14919: LD_EXP 8
14923: PPUSH
14924: CALL_OW 310
14928: PUSH
14929: LD_INT 23
14931: EQUAL
14932: PUSH
14933: LD_EXP 8
14937: PPUSH
14938: CALL_OW 301
14942: OR
14943: IFFALSE 14912
// SetSide ( llab1 , 1 ) ;
14945: LD_INT 23
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: CALL_OW 235
// InGameOff ;
14955: CALL_OW 9
// end else
14959: GO 14998
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14961: LD_INT 3
14963: PPUSH
14964: LD_INT 6
14966: PPUSH
14967: LD_INT 2
14969: PPUSH
14970: LD_INT 1
14972: PPUSH
14973: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14977: LD_EXP 8
14981: PPUSH
14982: LD_INT 6
14984: PPUSH
14985: CALL_OW 235
// ComHold ( Mikhail ) ;
14989: LD_EXP 8
14993: PPUSH
14994: CALL_OW 140
// end ; end ; end ;
14998: PPOPN 2
15000: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15001: LD_VAR 0 1
15005: PPUSH
15006: LD_VAR 0 2
15010: PPUSH
15011: CALL 32338 0 2
// end ;
15015: PPOPN 2
15017: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15018: LD_EXP 8
15022: PPUSH
15023: CALL_OW 257
15027: PUSH
15028: LD_INT 3
15030: NONEQUAL
15031: IFFALSE 15049
15033: GO 15035
15035: DISABLE
// begin enable ;
15036: ENABLE
// SetClass ( Mikhail , 3 ) ;
15037: LD_EXP 8
15041: PPUSH
15042: LD_INT 3
15044: PPUSH
15045: CALL_OW 336
// end ; end_of_file
15049: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15050: LD_INT 22
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 21
15062: PUSH
15063: LD_INT 1
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 25
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: LIST
15084: PPUSH
15085: CALL_OW 69
15089: PUSH
15090: LD_INT 0
15092: EQUAL
15093: PUSH
15094: LD_INT 22
15096: PUSH
15097: LD_INT 4
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 25
15116: PUSH
15117: LD_INT 2
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: PUSH
15134: LD_INT 0
15136: EQUAL
15137: AND
15138: PUSH
15139: LD_INT 1
15141: PPUSH
15142: CALL_OW 255
15146: PUSH
15147: LD_INT 3
15149: EQUAL
15150: AND
15151: PUSH
15152: LD_INT 10
15154: PPUSH
15155: CALL_OW 255
15159: PUSH
15160: LD_INT 3
15162: EQUAL
15163: AND
15164: IFFALSE 15176
15166: GO 15168
15168: DISABLE
// YouLost ( Engineer ) ;
15169: LD_STRING Engineer
15171: PPUSH
15172: CALL_OW 104
15176: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15177: LD_INT 1
15179: PPUSH
15180: CALL_OW 255
15184: PUSH
15185: LD_INT 3
15187: EQUAL
15188: PUSH
15189: LD_EXP 27
15193: PUSH
15194: LD_INT 1
15196: EQUAL
15197: AND
15198: IFFALSE 15210
15200: GO 15202
15202: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15203: LD_STRING DepotCaptured
15205: PPUSH
15206: CALL_OW 104
15210: END
// export function PrepareTigers ; var i , un ; begin
15211: LD_INT 0
15213: PPUSH
15214: PPUSH
15215: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15216: LD_ADDR_VAR 0 2
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_INT 2
15228: PUSH
15229: LD_INT 3
15231: PUSH
15232: LD_INT 4
15234: PUSH
15235: LD_INT 5
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: PUSH
15244: LD_OWVAR 67
15248: ARRAY
15249: PUSH
15250: FOR_TO
15251: IFFALSE 15366
// begin uc_side := 0 ;
15253: LD_ADDR_OWVAR 20
15257: PUSH
15258: LD_INT 0
15260: ST_TO_ADDR
// uc_nation := nation_nature ;
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 0
15268: ST_TO_ADDR
// hc_sex := sex_male ;
15269: LD_ADDR_OWVAR 27
15273: PUSH
15274: LD_INT 1
15276: ST_TO_ADDR
// hc_class := class_tiger ;
15277: LD_ADDR_OWVAR 28
15281: PUSH
15282: LD_INT 14
15284: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15285: LD_ADDR_OWVAR 31
15289: PUSH
15290: LD_EXP 14
15294: PUSH
15295: LD_INT 0
15297: PUSH
15298: LD_INT 0
15300: PUSH
15301: LD_INT 0
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15310: LD_ADDR_OWVAR 35
15314: PUSH
15315: LD_INT 30
15317: PUSH
15318: LD_INT 40
15320: PUSH
15321: LD_INT 45
15323: PUSH
15324: LD_INT 50
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: LD_OWVAR 67
15337: ARRAY
15338: ST_TO_ADDR
// un = CreateHuman ;
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: CALL_OW 44
15348: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_INT 27
15356: PPUSH
15357: LD_INT 0
15359: PPUSH
15360: CALL_OW 49
// end ;
15364: GO 15250
15366: POP
15367: POP
// end ; end_of_file
15368: LD_VAR 0 1
15372: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 255
15380: PUSH
15381: LD_INT 1
15383: EQUAL
15384: PUSH
15385: LD_INT 10
15387: PPUSH
15388: CALL_OW 255
15392: PUSH
15393: LD_INT 1
15395: EQUAL
15396: AND
15397: PUSH
15398: LD_EXP 20
15402: PUSH
15403: LD_INT 1
15405: EQUAL
15406: AND
15407: PUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 3
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 21
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 34
15430: PUSH
15431: LD_INT 51
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 3
15440: PUSH
15441: LD_INT 58
15443: PUSH
15444: EMPTY
15445: LIST
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 69
15461: PUSH
15462: LD_INT 0
15464: EQUAL
15465: AND
15466: IFFALSE 15557
15468: GO 15470
15470: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15471: LD_INT 9450
15473: PUSH
15474: LD_INT 8400
15476: PUSH
15477: LD_INT 6300
15479: PUSH
15480: LD_INT 6300
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: PUSH
15489: LD_OWVAR 67
15493: ARRAY
15494: PPUSH
15495: CALL_OW 67
// if cargoEscape then
15499: LD_EXP 20
15503: IFFALSE 15557
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15505: LD_EXP 9
15509: PPUSH
15510: LD_STRING D6-Pow-1
15512: PPUSH
15513: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15517: LD_EXP 1
15521: PPUSH
15522: LD_STRING D6-JMM-1
15524: PPUSH
15525: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15529: LD_EXP 9
15533: PPUSH
15534: LD_STRING D6-Pow-2
15536: PPUSH
15537: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15541: LD_EXP 1
15545: PPUSH
15546: LD_STRING D6-JMM-2
15548: PPUSH
15549: CALL_OW 88
// FinishMission ;
15553: CALL 15773 0 0
// end ; end ;
15557: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15558: LD_INT 1
15560: PPUSH
15561: CALL_OW 255
15565: PUSH
15566: LD_INT 1
15568: EQUAL
15569: PUSH
15570: LD_INT 10
15572: PPUSH
15573: CALL_OW 255
15577: PUSH
15578: LD_INT 1
15580: EQUAL
15581: AND
15582: PUSH
15583: LD_EXP 20
15587: PUSH
15588: LD_INT 1
15590: GREATER
15591: AND
15592: IFFALSE 15667
15594: GO 15596
15596: DISABLE
15597: LD_INT 0
15599: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15600: LD_INT 11550
15602: PUSH
15603: LD_INT 10500
15605: PUSH
15606: LD_INT 9450
15608: PUSH
15609: LD_INT 8400
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: PUSH
15618: LD_OWVAR 67
15622: ARRAY
15623: PPUSH
15624: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15628: LD_INT 1
15630: PUSH
15631: LD_INT 2
15633: PUSH
15634: LD_INT 3
15636: PUSH
15637: LD_INT 4
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: PUSH
15646: LD_OWVAR 67
15650: ARRAY
15651: PPUSH
15652: LD_INT 13
15654: PPUSH
15655: CALL 13342 0 2
// lastBattle = 1 ;
15659: LD_ADDR_EXP 27
15663: PUSH
15664: LD_INT 1
15666: ST_TO_ADDR
// end ;
15667: PPOPN 1
15669: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15670: LD_EXP 27
15674: PUSH
15675: LD_INT 1
15677: EQUAL
15678: PUSH
15679: LD_INT 26
15681: PPUSH
15682: LD_INT 22
15684: PUSH
15685: LD_INT 3
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 21
15694: PUSH
15695: LD_INT 1
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 70
15710: PUSH
15711: LD_INT 0
15713: EQUAL
15714: AND
15715: IFFALSE 15772
15717: GO 15719
15719: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15720: LD_EXP 9
15724: PPUSH
15725: LD_STRING D6-Pow-1
15727: PPUSH
15728: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15732: LD_EXP 1
15736: PPUSH
15737: LD_STRING D6-JMM-1
15739: PPUSH
15740: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15744: LD_EXP 9
15748: PPUSH
15749: LD_STRING D6-Pow-2
15751: PPUSH
15752: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15756: LD_EXP 1
15760: PPUSH
15761: LD_STRING D6-JMM-2
15763: PPUSH
15764: CALL_OW 88
// FinishMission ;
15768: CALL 15773 0 0
// end ;
15772: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15773: LD_INT 0
15775: PPUSH
15776: PPUSH
15777: PPUSH
15778: PPUSH
15779: PPUSH
// if tick <= 18 18$00 then
15780: LD_OWVAR 1
15784: PUSH
15785: LD_INT 37800
15787: LESSEQUAL
15788: IFFALSE 15797
// SetAchievement ( ACH_ASPEED_2 ) ;
15790: LD_STRING ACH_ASPEED_2
15792: PPUSH
15793: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15797: LD_ADDR_VAR 0 2
15801: PUSH
15802: LD_INT 22
15804: PUSH
15805: LD_INT 1
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 21
15814: PUSH
15815: LD_INT 2
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 24
15824: PUSH
15825: LD_INT 251
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: ST_TO_ADDR
// if tmp then
15842: LD_VAR 0 2
15846: IFFALSE 15860
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15848: LD_VAR 0 2
15852: PPUSH
15853: LD_STRING 02_tanks_1
15855: PPUSH
15856: CALL 10688 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15860: LD_EXP 21
15864: PUSH
15865: LD_INT 1
15867: EQUAL
15868: PUSH
15869: LD_EXP 8
15873: PPUSH
15874: CALL_OW 300
15878: AND
15879: IFFALSE 15893
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15881: LD_EXP 21
15885: PPUSH
15886: LD_STRING 02_mikhailStatus_1
15888: PPUSH
15889: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15893: LD_INT 1
15895: PPUSH
15896: CALL_OW 274
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: CALL_OW 275
15908: PPUSH
15909: LD_STRING 02_resources_4
15911: PPUSH
15912: CALL_OW 39
// m1 := false ;
15916: LD_ADDR_VAR 0 3
15920: PUSH
15921: LD_INT 0
15923: ST_TO_ADDR
// m2 := false ;
15924: LD_ADDR_VAR 0 4
15928: PUSH
15929: LD_INT 0
15931: ST_TO_ADDR
// m3 := false ;
15932: LD_ADDR_VAR 0 5
15936: PUSH
15937: LD_INT 0
15939: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15940: LD_INT 1
15942: PPUSH
15943: CALL_OW 274
15947: PPUSH
15948: LD_INT 1
15950: PPUSH
15951: CALL_OW 275
15955: PUSH
15956: LD_INT 200
15958: GREATEREQUAL
15959: IFFALSE 15981
// begin AddMedal ( Cans , 1 ) ;
15961: LD_STRING Cans
15963: PPUSH
15964: LD_INT 1
15966: PPUSH
15967: CALL_OW 101
// m1 := true ;
15971: LD_ADDR_VAR 0 3
15975: PUSH
15976: LD_INT 1
15978: ST_TO_ADDR
// end else
15979: GO 15992
// begin AddMedal ( Cans , - 1 ) ;
15981: LD_STRING Cans
15983: PPUSH
15984: LD_INT 1
15986: NEG
15987: PPUSH
15988: CALL_OW 101
// end ; if deadsCounter < 2 then
15992: LD_EXP 31
15996: PUSH
15997: LD_INT 2
15999: LESS
16000: IFFALSE 16022
// begin AddMedal ( Deaths , 1 ) ;
16002: LD_STRING Deaths
16004: PPUSH
16005: LD_INT 1
16007: PPUSH
16008: CALL_OW 101
// m2 := true ;
16012: LD_ADDR_VAR 0 4
16016: PUSH
16017: LD_INT 1
16019: ST_TO_ADDR
// end else
16020: GO 16033
// begin AddMedal ( Deaths , - 1 ) ;
16022: LD_STRING Deaths
16024: PPUSH
16025: LD_INT 1
16027: NEG
16028: PPUSH
16029: CALL_OW 101
// end ; if mikhailStatus = 0 then
16033: LD_EXP 21
16037: PUSH
16038: LD_INT 0
16040: EQUAL
16041: IFFALSE 16054
// AddMedal ( Prisoner , - 1 ) ;
16043: LD_STRING Prisoner
16045: PPUSH
16046: LD_INT 1
16048: NEG
16049: PPUSH
16050: CALL_OW 101
// if mikhailStatus = 1 then
16054: LD_EXP 21
16058: PUSH
16059: LD_INT 1
16061: EQUAL
16062: IFFALSE 16082
// begin AddMedal ( Prisoner , 1 ) ;
16064: LD_STRING Prisoner
16066: PPUSH
16067: LD_INT 1
16069: PPUSH
16070: CALL_OW 101
// m3 := true ;
16074: LD_ADDR_VAR 0 5
16078: PUSH
16079: LD_INT 1
16081: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16082: LD_EXP 21
16086: PUSH
16087: LD_INT 2
16089: EQUAL
16090: IFFALSE 16110
// begin AddMedal ( Prisoner , 2 ) ;
16092: LD_STRING Prisoner
16094: PPUSH
16095: LD_INT 2
16097: PPUSH
16098: CALL_OW 101
// m3 := true ;
16102: LD_ADDR_VAR 0 5
16106: PUSH
16107: LD_INT 1
16109: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16110: LD_EXP 21
16114: PUSH
16115: LD_INT 3
16117: EQUAL
16118: IFFALSE 16131
// AddMedal ( Prisoner , - 2 ) ;
16120: LD_STRING Prisoner
16122: PPUSH
16123: LD_INT 2
16125: NEG
16126: PPUSH
16127: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16131: LD_OWVAR 67
16135: PUSH
16136: LD_INT 3
16138: GREATEREQUAL
16139: PUSH
16140: LD_VAR 0 3
16144: AND
16145: PUSH
16146: LD_VAR 0 4
16150: AND
16151: PUSH
16152: LD_VAR 0 5
16156: AND
16157: IFFALSE 16169
// SetAchievementEX ( ACH_AMER , 2 ) ;
16159: LD_STRING ACH_AMER
16161: PPUSH
16162: LD_INT 2
16164: PPUSH
16165: CALL_OW 564
// GiveMedals ( MAIN ) ;
16169: LD_STRING MAIN
16171: PPUSH
16172: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16176: LD_INT 22
16178: PUSH
16179: LD_INT 1
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 23
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 21
16198: PUSH
16199: LD_INT 1
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: LIST
16210: PPUSH
16211: CALL_OW 69
16215: PPUSH
16216: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16220: LD_EXP 1
16224: PPUSH
16225: LD_EXP 33
16229: PUSH
16230: LD_STRING JMM
16232: STR
16233: PPUSH
16234: CALL_OW 38
// if IsOK ( Bobby ) then
16238: LD_EXP 2
16242: PPUSH
16243: CALL_OW 302
16247: IFFALSE 16267
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16249: LD_EXP 2
16253: PPUSH
16254: LD_EXP 33
16258: PUSH
16259: LD_STRING Bobby
16261: STR
16262: PPUSH
16263: CALL_OW 38
// if IsOK ( Cyrus ) then
16267: LD_EXP 3
16271: PPUSH
16272: CALL_OW 302
16276: IFFALSE 16296
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16278: LD_EXP 3
16282: PPUSH
16283: LD_EXP 33
16287: PUSH
16288: LD_STRING Cyrus
16290: STR
16291: PPUSH
16292: CALL_OW 38
// if IsOK ( Lisa ) then
16296: LD_EXP 4
16300: PPUSH
16301: CALL_OW 302
16305: IFFALSE 16325
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16307: LD_EXP 4
16311: PPUSH
16312: LD_EXP 33
16316: PUSH
16317: LD_STRING Lisa
16319: STR
16320: PPUSH
16321: CALL_OW 38
// if IsOK ( Khatam ) then
16325: LD_EXP 5
16329: PPUSH
16330: CALL_OW 302
16334: IFFALSE 16354
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16336: LD_EXP 5
16340: PPUSH
16341: LD_EXP 33
16345: PUSH
16346: LD_STRING Khatam
16348: STR
16349: PPUSH
16350: CALL_OW 38
// if IsOK ( Brian ) then
16354: LD_EXP 6
16358: PPUSH
16359: CALL_OW 302
16363: IFFALSE 16383
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16365: LD_EXP 6
16369: PPUSH
16370: LD_EXP 33
16374: PUSH
16375: LD_STRING Brian
16377: STR
16378: PPUSH
16379: CALL_OW 38
// if IsOk ( Jerry ) then
16383: LD_EXP 7
16387: PPUSH
16388: CALL_OW 302
16392: IFFALSE 16412
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16394: LD_EXP 7
16398: PPUSH
16399: LD_EXP 33
16403: PUSH
16404: LD_STRING Jerry
16406: STR
16407: PPUSH
16408: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16412: LD_EXP 21
16416: PUSH
16417: LD_INT 1
16419: EQUAL
16420: PUSH
16421: LD_EXP 8
16425: PPUSH
16426: CALL_OW 255
16430: PUSH
16431: LD_INT 1
16433: EQUAL
16434: AND
16435: PUSH
16436: LD_EXP 8
16440: PPUSH
16441: CALL_OW 302
16445: AND
16446: IFFALSE 16466
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16448: LD_EXP 8
16452: PPUSH
16453: LD_EXP 33
16457: PUSH
16458: LD_STRING Mikhail
16460: STR
16461: PPUSH
16462: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16466: LD_INT 50
16468: PUSH
16469: EMPTY
16470: LIST
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 21
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: PUSH
16502: LD_EXP 1
16506: PUSH
16507: LD_EXP 2
16511: PUSH
16512: LD_EXP 3
16516: PUSH
16517: LD_EXP 4
16521: PUSH
16522: LD_EXP 5
16526: PUSH
16527: LD_EXP 6
16531: PUSH
16532: LD_EXP 7
16536: PUSH
16537: LD_EXP 8
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: DIFF
16552: PPUSH
16553: LD_STRING 02_other_survivors
16555: PPUSH
16556: CALL_OW 38
// YouWin ;
16560: CALL_OW 103
// end ; end_of_file end_of_file
16564: LD_VAR 0 1
16568: RET
// every 0 0$1 do
16569: GO 16571
16571: DISABLE
// begin enable ;
16572: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16573: LD_STRING updateTimer(
16575: PUSH
16576: LD_OWVAR 1
16580: STR
16581: PUSH
16582: LD_STRING );
16584: STR
16585: PPUSH
16586: CALL_OW 559
// end ;
16590: END
// export function SOS_MapStart ( ) ; begin
16591: LD_INT 0
16593: PPUSH
// if streamModeActive then
16594: LD_EXP 36
16598: IFFALSE 16607
// DefineStreamItems ( true ) ;
16600: LD_INT 1
16602: PPUSH
16603: CALL 18261 0 1
// UpdateFactoryWaypoints ( ) ;
16607: CALL 31122 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16611: CALL 31379 0 0
// end ;
16615: LD_VAR 0 1
16619: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16620: LD_INT 0
16622: PPUSH
// if p2 = hack_mode then
16623: LD_VAR 0 2
16627: PUSH
16628: LD_INT 100
16630: EQUAL
16631: IFFALSE 17634
// begin if not StreamModeActive then
16633: LD_EXP 36
16637: NOT
16638: IFFALSE 16648
// StreamModeActive := true ;
16640: LD_ADDR_EXP 36
16644: PUSH
16645: LD_INT 1
16647: ST_TO_ADDR
// if p3 = 0 then
16648: LD_VAR 0 3
16652: PUSH
16653: LD_INT 0
16655: EQUAL
16656: IFFALSE 16662
// InitStreamMode ;
16658: CALL 17797 0 0
// if p3 = 1 then
16662: LD_VAR 0 3
16666: PUSH
16667: LD_INT 1
16669: EQUAL
16670: IFFALSE 16680
// sRocket := true ;
16672: LD_ADDR_EXP 41
16676: PUSH
16677: LD_INT 1
16679: ST_TO_ADDR
// if p3 = 2 then
16680: LD_VAR 0 3
16684: PUSH
16685: LD_INT 2
16687: EQUAL
16688: IFFALSE 16698
// sSpeed := true ;
16690: LD_ADDR_EXP 40
16694: PUSH
16695: LD_INT 1
16697: ST_TO_ADDR
// if p3 = 3 then
16698: LD_VAR 0 3
16702: PUSH
16703: LD_INT 3
16705: EQUAL
16706: IFFALSE 16716
// sEngine := true ;
16708: LD_ADDR_EXP 42
16712: PUSH
16713: LD_INT 1
16715: ST_TO_ADDR
// if p3 = 4 then
16716: LD_VAR 0 3
16720: PUSH
16721: LD_INT 4
16723: EQUAL
16724: IFFALSE 16734
// sSpec := true ;
16726: LD_ADDR_EXP 39
16730: PUSH
16731: LD_INT 1
16733: ST_TO_ADDR
// if p3 = 5 then
16734: LD_VAR 0 3
16738: PUSH
16739: LD_INT 5
16741: EQUAL
16742: IFFALSE 16752
// sLevel := true ;
16744: LD_ADDR_EXP 43
16748: PUSH
16749: LD_INT 1
16751: ST_TO_ADDR
// if p3 = 6 then
16752: LD_VAR 0 3
16756: PUSH
16757: LD_INT 6
16759: EQUAL
16760: IFFALSE 16770
// sArmoury := true ;
16762: LD_ADDR_EXP 44
16766: PUSH
16767: LD_INT 1
16769: ST_TO_ADDR
// if p3 = 7 then
16770: LD_VAR 0 3
16774: PUSH
16775: LD_INT 7
16777: EQUAL
16778: IFFALSE 16788
// sRadar := true ;
16780: LD_ADDR_EXP 45
16784: PUSH
16785: LD_INT 1
16787: ST_TO_ADDR
// if p3 = 8 then
16788: LD_VAR 0 3
16792: PUSH
16793: LD_INT 8
16795: EQUAL
16796: IFFALSE 16806
// sBunker := true ;
16798: LD_ADDR_EXP 46
16802: PUSH
16803: LD_INT 1
16805: ST_TO_ADDR
// if p3 = 9 then
16806: LD_VAR 0 3
16810: PUSH
16811: LD_INT 9
16813: EQUAL
16814: IFFALSE 16824
// sHack := true ;
16816: LD_ADDR_EXP 47
16820: PUSH
16821: LD_INT 1
16823: ST_TO_ADDR
// if p3 = 10 then
16824: LD_VAR 0 3
16828: PUSH
16829: LD_INT 10
16831: EQUAL
16832: IFFALSE 16842
// sFire := true ;
16834: LD_ADDR_EXP 48
16838: PUSH
16839: LD_INT 1
16841: ST_TO_ADDR
// if p3 = 11 then
16842: LD_VAR 0 3
16846: PUSH
16847: LD_INT 11
16849: EQUAL
16850: IFFALSE 16860
// sRefresh := true ;
16852: LD_ADDR_EXP 49
16856: PUSH
16857: LD_INT 1
16859: ST_TO_ADDR
// if p3 = 12 then
16860: LD_VAR 0 3
16864: PUSH
16865: LD_INT 12
16867: EQUAL
16868: IFFALSE 16878
// sExp := true ;
16870: LD_ADDR_EXP 50
16874: PUSH
16875: LD_INT 1
16877: ST_TO_ADDR
// if p3 = 13 then
16878: LD_VAR 0 3
16882: PUSH
16883: LD_INT 13
16885: EQUAL
16886: IFFALSE 16896
// sDepot := true ;
16888: LD_ADDR_EXP 51
16892: PUSH
16893: LD_INT 1
16895: ST_TO_ADDR
// if p3 = 14 then
16896: LD_VAR 0 3
16900: PUSH
16901: LD_INT 14
16903: EQUAL
16904: IFFALSE 16914
// sFlag := true ;
16906: LD_ADDR_EXP 52
16910: PUSH
16911: LD_INT 1
16913: ST_TO_ADDR
// if p3 = 15 then
16914: LD_VAR 0 3
16918: PUSH
16919: LD_INT 15
16921: EQUAL
16922: IFFALSE 16932
// sKamikadze := true ;
16924: LD_ADDR_EXP 60
16928: PUSH
16929: LD_INT 1
16931: ST_TO_ADDR
// if p3 = 16 then
16932: LD_VAR 0 3
16936: PUSH
16937: LD_INT 16
16939: EQUAL
16940: IFFALSE 16950
// sTroll := true ;
16942: LD_ADDR_EXP 61
16946: PUSH
16947: LD_INT 1
16949: ST_TO_ADDR
// if p3 = 17 then
16950: LD_VAR 0 3
16954: PUSH
16955: LD_INT 17
16957: EQUAL
16958: IFFALSE 16968
// sSlow := true ;
16960: LD_ADDR_EXP 62
16964: PUSH
16965: LD_INT 1
16967: ST_TO_ADDR
// if p3 = 18 then
16968: LD_VAR 0 3
16972: PUSH
16973: LD_INT 18
16975: EQUAL
16976: IFFALSE 16986
// sLack := true ;
16978: LD_ADDR_EXP 63
16982: PUSH
16983: LD_INT 1
16985: ST_TO_ADDR
// if p3 = 19 then
16986: LD_VAR 0 3
16990: PUSH
16991: LD_INT 19
16993: EQUAL
16994: IFFALSE 17004
// sTank := true ;
16996: LD_ADDR_EXP 65
17000: PUSH
17001: LD_INT 1
17003: ST_TO_ADDR
// if p3 = 20 then
17004: LD_VAR 0 3
17008: PUSH
17009: LD_INT 20
17011: EQUAL
17012: IFFALSE 17022
// sRemote := true ;
17014: LD_ADDR_EXP 66
17018: PUSH
17019: LD_INT 1
17021: ST_TO_ADDR
// if p3 = 21 then
17022: LD_VAR 0 3
17026: PUSH
17027: LD_INT 21
17029: EQUAL
17030: IFFALSE 17040
// sPowell := true ;
17032: LD_ADDR_EXP 67
17036: PUSH
17037: LD_INT 1
17039: ST_TO_ADDR
// if p3 = 22 then
17040: LD_VAR 0 3
17044: PUSH
17045: LD_INT 22
17047: EQUAL
17048: IFFALSE 17058
// sTeleport := true ;
17050: LD_ADDR_EXP 70
17054: PUSH
17055: LD_INT 1
17057: ST_TO_ADDR
// if p3 = 23 then
17058: LD_VAR 0 3
17062: PUSH
17063: LD_INT 23
17065: EQUAL
17066: IFFALSE 17076
// sOilTower := true ;
17068: LD_ADDR_EXP 72
17072: PUSH
17073: LD_INT 1
17075: ST_TO_ADDR
// if p3 = 24 then
17076: LD_VAR 0 3
17080: PUSH
17081: LD_INT 24
17083: EQUAL
17084: IFFALSE 17094
// sShovel := true ;
17086: LD_ADDR_EXP 73
17090: PUSH
17091: LD_INT 1
17093: ST_TO_ADDR
// if p3 = 25 then
17094: LD_VAR 0 3
17098: PUSH
17099: LD_INT 25
17101: EQUAL
17102: IFFALSE 17112
// sSheik := true ;
17104: LD_ADDR_EXP 74
17108: PUSH
17109: LD_INT 1
17111: ST_TO_ADDR
// if p3 = 26 then
17112: LD_VAR 0 3
17116: PUSH
17117: LD_INT 26
17119: EQUAL
17120: IFFALSE 17130
// sEarthquake := true ;
17122: LD_ADDR_EXP 76
17126: PUSH
17127: LD_INT 1
17129: ST_TO_ADDR
// if p3 = 27 then
17130: LD_VAR 0 3
17134: PUSH
17135: LD_INT 27
17137: EQUAL
17138: IFFALSE 17148
// sAI := true ;
17140: LD_ADDR_EXP 77
17144: PUSH
17145: LD_INT 1
17147: ST_TO_ADDR
// if p3 = 28 then
17148: LD_VAR 0 3
17152: PUSH
17153: LD_INT 28
17155: EQUAL
17156: IFFALSE 17166
// sCargo := true ;
17158: LD_ADDR_EXP 80
17162: PUSH
17163: LD_INT 1
17165: ST_TO_ADDR
// if p3 = 29 then
17166: LD_VAR 0 3
17170: PUSH
17171: LD_INT 29
17173: EQUAL
17174: IFFALSE 17184
// sDLaser := true ;
17176: LD_ADDR_EXP 81
17180: PUSH
17181: LD_INT 1
17183: ST_TO_ADDR
// if p3 = 30 then
17184: LD_VAR 0 3
17188: PUSH
17189: LD_INT 30
17191: EQUAL
17192: IFFALSE 17202
// sExchange := true ;
17194: LD_ADDR_EXP 82
17198: PUSH
17199: LD_INT 1
17201: ST_TO_ADDR
// if p3 = 31 then
17202: LD_VAR 0 3
17206: PUSH
17207: LD_INT 31
17209: EQUAL
17210: IFFALSE 17220
// sFac := true ;
17212: LD_ADDR_EXP 83
17216: PUSH
17217: LD_INT 1
17219: ST_TO_ADDR
// if p3 = 32 then
17220: LD_VAR 0 3
17224: PUSH
17225: LD_INT 32
17227: EQUAL
17228: IFFALSE 17238
// sPower := true ;
17230: LD_ADDR_EXP 84
17234: PUSH
17235: LD_INT 1
17237: ST_TO_ADDR
// if p3 = 33 then
17238: LD_VAR 0 3
17242: PUSH
17243: LD_INT 33
17245: EQUAL
17246: IFFALSE 17256
// sRandom := true ;
17248: LD_ADDR_EXP 85
17252: PUSH
17253: LD_INT 1
17255: ST_TO_ADDR
// if p3 = 34 then
17256: LD_VAR 0 3
17260: PUSH
17261: LD_INT 34
17263: EQUAL
17264: IFFALSE 17274
// sShield := true ;
17266: LD_ADDR_EXP 86
17270: PUSH
17271: LD_INT 1
17273: ST_TO_ADDR
// if p3 = 35 then
17274: LD_VAR 0 3
17278: PUSH
17279: LD_INT 35
17281: EQUAL
17282: IFFALSE 17292
// sTime := true ;
17284: LD_ADDR_EXP 87
17288: PUSH
17289: LD_INT 1
17291: ST_TO_ADDR
// if p3 = 36 then
17292: LD_VAR 0 3
17296: PUSH
17297: LD_INT 36
17299: EQUAL
17300: IFFALSE 17310
// sTools := true ;
17302: LD_ADDR_EXP 88
17306: PUSH
17307: LD_INT 1
17309: ST_TO_ADDR
// if p3 = 101 then
17310: LD_VAR 0 3
17314: PUSH
17315: LD_INT 101
17317: EQUAL
17318: IFFALSE 17328
// sSold := true ;
17320: LD_ADDR_EXP 53
17324: PUSH
17325: LD_INT 1
17327: ST_TO_ADDR
// if p3 = 102 then
17328: LD_VAR 0 3
17332: PUSH
17333: LD_INT 102
17335: EQUAL
17336: IFFALSE 17346
// sDiff := true ;
17338: LD_ADDR_EXP 54
17342: PUSH
17343: LD_INT 1
17345: ST_TO_ADDR
// if p3 = 103 then
17346: LD_VAR 0 3
17350: PUSH
17351: LD_INT 103
17353: EQUAL
17354: IFFALSE 17364
// sFog := true ;
17356: LD_ADDR_EXP 57
17360: PUSH
17361: LD_INT 1
17363: ST_TO_ADDR
// if p3 = 104 then
17364: LD_VAR 0 3
17368: PUSH
17369: LD_INT 104
17371: EQUAL
17372: IFFALSE 17382
// sReset := true ;
17374: LD_ADDR_EXP 58
17378: PUSH
17379: LD_INT 1
17381: ST_TO_ADDR
// if p3 = 105 then
17382: LD_VAR 0 3
17386: PUSH
17387: LD_INT 105
17389: EQUAL
17390: IFFALSE 17400
// sSun := true ;
17392: LD_ADDR_EXP 59
17396: PUSH
17397: LD_INT 1
17399: ST_TO_ADDR
// if p3 = 106 then
17400: LD_VAR 0 3
17404: PUSH
17405: LD_INT 106
17407: EQUAL
17408: IFFALSE 17418
// sTiger := true ;
17410: LD_ADDR_EXP 55
17414: PUSH
17415: LD_INT 1
17417: ST_TO_ADDR
// if p3 = 107 then
17418: LD_VAR 0 3
17422: PUSH
17423: LD_INT 107
17425: EQUAL
17426: IFFALSE 17436
// sBomb := true ;
17428: LD_ADDR_EXP 56
17432: PUSH
17433: LD_INT 1
17435: ST_TO_ADDR
// if p3 = 108 then
17436: LD_VAR 0 3
17440: PUSH
17441: LD_INT 108
17443: EQUAL
17444: IFFALSE 17454
// sWound := true ;
17446: LD_ADDR_EXP 64
17450: PUSH
17451: LD_INT 1
17453: ST_TO_ADDR
// if p3 = 109 then
17454: LD_VAR 0 3
17458: PUSH
17459: LD_INT 109
17461: EQUAL
17462: IFFALSE 17472
// sBetray := true ;
17464: LD_ADDR_EXP 68
17468: PUSH
17469: LD_INT 1
17471: ST_TO_ADDR
// if p3 = 110 then
17472: LD_VAR 0 3
17476: PUSH
17477: LD_INT 110
17479: EQUAL
17480: IFFALSE 17490
// sContamin := true ;
17482: LD_ADDR_EXP 69
17486: PUSH
17487: LD_INT 1
17489: ST_TO_ADDR
// if p3 = 111 then
17490: LD_VAR 0 3
17494: PUSH
17495: LD_INT 111
17497: EQUAL
17498: IFFALSE 17508
// sOil := true ;
17500: LD_ADDR_EXP 71
17504: PUSH
17505: LD_INT 1
17507: ST_TO_ADDR
// if p3 = 112 then
17508: LD_VAR 0 3
17512: PUSH
17513: LD_INT 112
17515: EQUAL
17516: IFFALSE 17526
// sStu := true ;
17518: LD_ADDR_EXP 75
17522: PUSH
17523: LD_INT 1
17525: ST_TO_ADDR
// if p3 = 113 then
17526: LD_VAR 0 3
17530: PUSH
17531: LD_INT 113
17533: EQUAL
17534: IFFALSE 17544
// sBazooka := true ;
17536: LD_ADDR_EXP 78
17540: PUSH
17541: LD_INT 1
17543: ST_TO_ADDR
// if p3 = 114 then
17544: LD_VAR 0 3
17548: PUSH
17549: LD_INT 114
17551: EQUAL
17552: IFFALSE 17562
// sMortar := true ;
17554: LD_ADDR_EXP 79
17558: PUSH
17559: LD_INT 1
17561: ST_TO_ADDR
// if p3 = 115 then
17562: LD_VAR 0 3
17566: PUSH
17567: LD_INT 115
17569: EQUAL
17570: IFFALSE 17580
// sRanger := true ;
17572: LD_ADDR_EXP 89
17576: PUSH
17577: LD_INT 1
17579: ST_TO_ADDR
// if p3 = 116 then
17580: LD_VAR 0 3
17584: PUSH
17585: LD_INT 116
17587: EQUAL
17588: IFFALSE 17598
// sComputer := true ;
17590: LD_ADDR_EXP 90
17594: PUSH
17595: LD_INT 1
17597: ST_TO_ADDR
// if p3 = 117 then
17598: LD_VAR 0 3
17602: PUSH
17603: LD_INT 117
17605: EQUAL
17606: IFFALSE 17616
// s30 := true ;
17608: LD_ADDR_EXP 91
17612: PUSH
17613: LD_INT 1
17615: ST_TO_ADDR
// if p3 = 118 then
17616: LD_VAR 0 3
17620: PUSH
17621: LD_INT 118
17623: EQUAL
17624: IFFALSE 17634
// s60 := true ;
17626: LD_ADDR_EXP 92
17630: PUSH
17631: LD_INT 1
17633: ST_TO_ADDR
// end ; if p2 = stream_mode then
17634: LD_VAR 0 2
17638: PUSH
17639: LD_INT 101
17641: EQUAL
17642: IFFALSE 17770
// begin case p3 of 1 :
17644: LD_VAR 0 3
17648: PUSH
17649: LD_INT 1
17651: DOUBLE
17652: EQUAL
17653: IFTRUE 17657
17655: GO 17664
17657: POP
// hHackUnlimitedResources ; 2 :
17658: CALL 29868 0 0
17662: GO 17770
17664: LD_INT 2
17666: DOUBLE
17667: EQUAL
17668: IFTRUE 17672
17670: GO 17679
17672: POP
// hHackSetLevel10 ; 3 :
17673: CALL 30001 0 0
17677: GO 17770
17679: LD_INT 3
17681: DOUBLE
17682: EQUAL
17683: IFTRUE 17687
17685: GO 17694
17687: POP
// hHackSetLevel10YourUnits ; 4 :
17688: CALL 30086 0 0
17692: GO 17770
17694: LD_INT 4
17696: DOUBLE
17697: EQUAL
17698: IFTRUE 17702
17700: GO 17709
17702: POP
// hHackInvincible ; 5 :
17703: CALL 30534 0 0
17707: GO 17770
17709: LD_INT 5
17711: DOUBLE
17712: EQUAL
17713: IFTRUE 17717
17715: GO 17724
17717: POP
// hHackInvisible ; 6 :
17718: CALL 30645 0 0
17722: GO 17770
17724: LD_INT 6
17726: DOUBLE
17727: EQUAL
17728: IFTRUE 17732
17730: GO 17739
17732: POP
// hHackChangeYourSide ; 7 :
17733: CALL 30702 0 0
17737: GO 17770
17739: LD_INT 7
17741: DOUBLE
17742: EQUAL
17743: IFTRUE 17747
17745: GO 17754
17747: POP
// hHackChangeUnitSide ; 8 :
17748: CALL 30744 0 0
17752: GO 17770
17754: LD_INT 8
17756: DOUBLE
17757: EQUAL
17758: IFTRUE 17762
17760: GO 17769
17762: POP
// hHackFog ; end ;
17763: CALL 30845 0 0
17767: GO 17770
17769: POP
// end ; end ;
17770: LD_VAR 0 7
17774: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
17775: GO 17777
17777: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17778: LD_STRING initStreamRollete();
17780: PPUSH
17781: CALL_OW 559
// InitStreamMode ;
17785: CALL 17797 0 0
// DefineStreamItems ( false ) ;
17789: LD_INT 0
17791: PPUSH
17792: CALL 18261 0 1
// end ;
17796: END
// function InitStreamMode ; begin
17797: LD_INT 0
17799: PPUSH
// streamModeActive := false ;
17800: LD_ADDR_EXP 36
17804: PUSH
17805: LD_INT 0
17807: ST_TO_ADDR
// normalCounter := 36 ;
17808: LD_ADDR_EXP 37
17812: PUSH
17813: LD_INT 36
17815: ST_TO_ADDR
// hardcoreCounter := 18 ;
17816: LD_ADDR_EXP 38
17820: PUSH
17821: LD_INT 18
17823: ST_TO_ADDR
// sRocket := false ;
17824: LD_ADDR_EXP 41
17828: PUSH
17829: LD_INT 0
17831: ST_TO_ADDR
// sSpeed := false ;
17832: LD_ADDR_EXP 40
17836: PUSH
17837: LD_INT 0
17839: ST_TO_ADDR
// sEngine := false ;
17840: LD_ADDR_EXP 42
17844: PUSH
17845: LD_INT 0
17847: ST_TO_ADDR
// sSpec := false ;
17848: LD_ADDR_EXP 39
17852: PUSH
17853: LD_INT 0
17855: ST_TO_ADDR
// sLevel := false ;
17856: LD_ADDR_EXP 43
17860: PUSH
17861: LD_INT 0
17863: ST_TO_ADDR
// sArmoury := false ;
17864: LD_ADDR_EXP 44
17868: PUSH
17869: LD_INT 0
17871: ST_TO_ADDR
// sRadar := false ;
17872: LD_ADDR_EXP 45
17876: PUSH
17877: LD_INT 0
17879: ST_TO_ADDR
// sBunker := false ;
17880: LD_ADDR_EXP 46
17884: PUSH
17885: LD_INT 0
17887: ST_TO_ADDR
// sHack := false ;
17888: LD_ADDR_EXP 47
17892: PUSH
17893: LD_INT 0
17895: ST_TO_ADDR
// sFire := false ;
17896: LD_ADDR_EXP 48
17900: PUSH
17901: LD_INT 0
17903: ST_TO_ADDR
// sRefresh := false ;
17904: LD_ADDR_EXP 49
17908: PUSH
17909: LD_INT 0
17911: ST_TO_ADDR
// sExp := false ;
17912: LD_ADDR_EXP 50
17916: PUSH
17917: LD_INT 0
17919: ST_TO_ADDR
// sDepot := false ;
17920: LD_ADDR_EXP 51
17924: PUSH
17925: LD_INT 0
17927: ST_TO_ADDR
// sFlag := false ;
17928: LD_ADDR_EXP 52
17932: PUSH
17933: LD_INT 0
17935: ST_TO_ADDR
// sKamikadze := false ;
17936: LD_ADDR_EXP 60
17940: PUSH
17941: LD_INT 0
17943: ST_TO_ADDR
// sTroll := false ;
17944: LD_ADDR_EXP 61
17948: PUSH
17949: LD_INT 0
17951: ST_TO_ADDR
// sSlow := false ;
17952: LD_ADDR_EXP 62
17956: PUSH
17957: LD_INT 0
17959: ST_TO_ADDR
// sLack := false ;
17960: LD_ADDR_EXP 63
17964: PUSH
17965: LD_INT 0
17967: ST_TO_ADDR
// sTank := false ;
17968: LD_ADDR_EXP 65
17972: PUSH
17973: LD_INT 0
17975: ST_TO_ADDR
// sRemote := false ;
17976: LD_ADDR_EXP 66
17980: PUSH
17981: LD_INT 0
17983: ST_TO_ADDR
// sPowell := false ;
17984: LD_ADDR_EXP 67
17988: PUSH
17989: LD_INT 0
17991: ST_TO_ADDR
// sTeleport := false ;
17992: LD_ADDR_EXP 70
17996: PUSH
17997: LD_INT 0
17999: ST_TO_ADDR
// sOilTower := false ;
18000: LD_ADDR_EXP 72
18004: PUSH
18005: LD_INT 0
18007: ST_TO_ADDR
// sShovel := false ;
18008: LD_ADDR_EXP 73
18012: PUSH
18013: LD_INT 0
18015: ST_TO_ADDR
// sSheik := false ;
18016: LD_ADDR_EXP 74
18020: PUSH
18021: LD_INT 0
18023: ST_TO_ADDR
// sEarthquake := false ;
18024: LD_ADDR_EXP 76
18028: PUSH
18029: LD_INT 0
18031: ST_TO_ADDR
// sAI := false ;
18032: LD_ADDR_EXP 77
18036: PUSH
18037: LD_INT 0
18039: ST_TO_ADDR
// sCargo := false ;
18040: LD_ADDR_EXP 80
18044: PUSH
18045: LD_INT 0
18047: ST_TO_ADDR
// sDLaser := false ;
18048: LD_ADDR_EXP 81
18052: PUSH
18053: LD_INT 0
18055: ST_TO_ADDR
// sExchange := false ;
18056: LD_ADDR_EXP 82
18060: PUSH
18061: LD_INT 0
18063: ST_TO_ADDR
// sFac := false ;
18064: LD_ADDR_EXP 83
18068: PUSH
18069: LD_INT 0
18071: ST_TO_ADDR
// sPower := false ;
18072: LD_ADDR_EXP 84
18076: PUSH
18077: LD_INT 0
18079: ST_TO_ADDR
// sRandom := false ;
18080: LD_ADDR_EXP 85
18084: PUSH
18085: LD_INT 0
18087: ST_TO_ADDR
// sShield := false ;
18088: LD_ADDR_EXP 86
18092: PUSH
18093: LD_INT 0
18095: ST_TO_ADDR
// sTime := false ;
18096: LD_ADDR_EXP 87
18100: PUSH
18101: LD_INT 0
18103: ST_TO_ADDR
// sTools := false ;
18104: LD_ADDR_EXP 88
18108: PUSH
18109: LD_INT 0
18111: ST_TO_ADDR
// sSold := false ;
18112: LD_ADDR_EXP 53
18116: PUSH
18117: LD_INT 0
18119: ST_TO_ADDR
// sDiff := false ;
18120: LD_ADDR_EXP 54
18124: PUSH
18125: LD_INT 0
18127: ST_TO_ADDR
// sFog := false ;
18128: LD_ADDR_EXP 57
18132: PUSH
18133: LD_INT 0
18135: ST_TO_ADDR
// sReset := false ;
18136: LD_ADDR_EXP 58
18140: PUSH
18141: LD_INT 0
18143: ST_TO_ADDR
// sSun := false ;
18144: LD_ADDR_EXP 59
18148: PUSH
18149: LD_INT 0
18151: ST_TO_ADDR
// sTiger := false ;
18152: LD_ADDR_EXP 55
18156: PUSH
18157: LD_INT 0
18159: ST_TO_ADDR
// sBomb := false ;
18160: LD_ADDR_EXP 56
18164: PUSH
18165: LD_INT 0
18167: ST_TO_ADDR
// sWound := false ;
18168: LD_ADDR_EXP 64
18172: PUSH
18173: LD_INT 0
18175: ST_TO_ADDR
// sBetray := false ;
18176: LD_ADDR_EXP 68
18180: PUSH
18181: LD_INT 0
18183: ST_TO_ADDR
// sContamin := false ;
18184: LD_ADDR_EXP 69
18188: PUSH
18189: LD_INT 0
18191: ST_TO_ADDR
// sOil := false ;
18192: LD_ADDR_EXP 71
18196: PUSH
18197: LD_INT 0
18199: ST_TO_ADDR
// sStu := false ;
18200: LD_ADDR_EXP 75
18204: PUSH
18205: LD_INT 0
18207: ST_TO_ADDR
// sBazooka := false ;
18208: LD_ADDR_EXP 78
18212: PUSH
18213: LD_INT 0
18215: ST_TO_ADDR
// sMortar := false ;
18216: LD_ADDR_EXP 79
18220: PUSH
18221: LD_INT 0
18223: ST_TO_ADDR
// sRanger := false ;
18224: LD_ADDR_EXP 89
18228: PUSH
18229: LD_INT 0
18231: ST_TO_ADDR
// sComputer := false ;
18232: LD_ADDR_EXP 90
18236: PUSH
18237: LD_INT 0
18239: ST_TO_ADDR
// s30 := false ;
18240: LD_ADDR_EXP 91
18244: PUSH
18245: LD_INT 0
18247: ST_TO_ADDR
// s60 := false ;
18248: LD_ADDR_EXP 92
18252: PUSH
18253: LD_INT 0
18255: ST_TO_ADDR
// end ;
18256: LD_VAR 0 1
18260: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18261: LD_INT 0
18263: PPUSH
18264: PPUSH
18265: PPUSH
18266: PPUSH
18267: PPUSH
18268: PPUSH
18269: PPUSH
// result := [ ] ;
18270: LD_ADDR_VAR 0 2
18274: PUSH
18275: EMPTY
18276: ST_TO_ADDR
// if campaign_id = 1 then
18277: LD_OWVAR 69
18281: PUSH
18282: LD_INT 1
18284: EQUAL
18285: IFFALSE 21451
// begin case mission_number of 1 :
18287: LD_OWVAR 70
18291: PUSH
18292: LD_INT 1
18294: DOUBLE
18295: EQUAL
18296: IFTRUE 18300
18298: GO 18376
18300: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18301: LD_ADDR_VAR 0 2
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: LD_INT 4
18311: PUSH
18312: LD_INT 11
18314: PUSH
18315: LD_INT 12
18317: PUSH
18318: LD_INT 15
18320: PUSH
18321: LD_INT 16
18323: PUSH
18324: LD_INT 22
18326: PUSH
18327: LD_INT 23
18329: PUSH
18330: LD_INT 26
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 101
18346: PUSH
18347: LD_INT 102
18349: PUSH
18350: LD_INT 106
18352: PUSH
18353: LD_INT 116
18355: PUSH
18356: LD_INT 117
18358: PUSH
18359: LD_INT 118
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: ST_TO_ADDR
18374: GO 21449
18376: LD_INT 2
18378: DOUBLE
18379: EQUAL
18380: IFTRUE 18384
18382: GO 18468
18384: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18385: LD_ADDR_VAR 0 2
18389: PUSH
18390: LD_INT 2
18392: PUSH
18393: LD_INT 4
18395: PUSH
18396: LD_INT 11
18398: PUSH
18399: LD_INT 12
18401: PUSH
18402: LD_INT 15
18404: PUSH
18405: LD_INT 16
18407: PUSH
18408: LD_INT 22
18410: PUSH
18411: LD_INT 23
18413: PUSH
18414: LD_INT 26
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 101
18430: PUSH
18431: LD_INT 102
18433: PUSH
18434: LD_INT 105
18436: PUSH
18437: LD_INT 106
18439: PUSH
18440: LD_INT 108
18442: PUSH
18443: LD_INT 116
18445: PUSH
18446: LD_INT 117
18448: PUSH
18449: LD_INT 118
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: ST_TO_ADDR
18466: GO 21449
18468: LD_INT 3
18470: DOUBLE
18471: EQUAL
18472: IFTRUE 18476
18474: GO 18564
18476: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18477: LD_ADDR_VAR 0 2
18481: PUSH
18482: LD_INT 2
18484: PUSH
18485: LD_INT 4
18487: PUSH
18488: LD_INT 5
18490: PUSH
18491: LD_INT 11
18493: PUSH
18494: LD_INT 12
18496: PUSH
18497: LD_INT 15
18499: PUSH
18500: LD_INT 16
18502: PUSH
18503: LD_INT 22
18505: PUSH
18506: LD_INT 26
18508: PUSH
18509: LD_INT 36
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 101
18526: PUSH
18527: LD_INT 102
18529: PUSH
18530: LD_INT 105
18532: PUSH
18533: LD_INT 106
18535: PUSH
18536: LD_INT 108
18538: PUSH
18539: LD_INT 116
18541: PUSH
18542: LD_INT 117
18544: PUSH
18545: LD_INT 118
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: ST_TO_ADDR
18562: GO 21449
18564: LD_INT 4
18566: DOUBLE
18567: EQUAL
18568: IFTRUE 18572
18570: GO 18668
18572: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18573: LD_ADDR_VAR 0 2
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: LD_INT 4
18583: PUSH
18584: LD_INT 5
18586: PUSH
18587: LD_INT 8
18589: PUSH
18590: LD_INT 11
18592: PUSH
18593: LD_INT 12
18595: PUSH
18596: LD_INT 15
18598: PUSH
18599: LD_INT 16
18601: PUSH
18602: LD_INT 22
18604: PUSH
18605: LD_INT 23
18607: PUSH
18608: LD_INT 26
18610: PUSH
18611: LD_INT 36
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 101
18630: PUSH
18631: LD_INT 102
18633: PUSH
18634: LD_INT 105
18636: PUSH
18637: LD_INT 106
18639: PUSH
18640: LD_INT 108
18642: PUSH
18643: LD_INT 116
18645: PUSH
18646: LD_INT 117
18648: PUSH
18649: LD_INT 118
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: ST_TO_ADDR
18666: GO 21449
18668: LD_INT 5
18670: DOUBLE
18671: EQUAL
18672: IFTRUE 18676
18674: GO 18788
18676: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18677: LD_ADDR_VAR 0 2
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: LD_INT 4
18687: PUSH
18688: LD_INT 5
18690: PUSH
18691: LD_INT 6
18693: PUSH
18694: LD_INT 8
18696: PUSH
18697: LD_INT 11
18699: PUSH
18700: LD_INT 12
18702: PUSH
18703: LD_INT 15
18705: PUSH
18706: LD_INT 16
18708: PUSH
18709: LD_INT 22
18711: PUSH
18712: LD_INT 23
18714: PUSH
18715: LD_INT 25
18717: PUSH
18718: LD_INT 26
18720: PUSH
18721: LD_INT 36
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 101
18742: PUSH
18743: LD_INT 102
18745: PUSH
18746: LD_INT 105
18748: PUSH
18749: LD_INT 106
18751: PUSH
18752: LD_INT 108
18754: PUSH
18755: LD_INT 109
18757: PUSH
18758: LD_INT 112
18760: PUSH
18761: LD_INT 116
18763: PUSH
18764: LD_INT 117
18766: PUSH
18767: LD_INT 118
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: ST_TO_ADDR
18786: GO 21449
18788: LD_INT 6
18790: DOUBLE
18791: EQUAL
18792: IFTRUE 18796
18794: GO 18928
18796: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18797: LD_ADDR_VAR 0 2
18801: PUSH
18802: LD_INT 2
18804: PUSH
18805: LD_INT 4
18807: PUSH
18808: LD_INT 5
18810: PUSH
18811: LD_INT 6
18813: PUSH
18814: LD_INT 8
18816: PUSH
18817: LD_INT 11
18819: PUSH
18820: LD_INT 12
18822: PUSH
18823: LD_INT 15
18825: PUSH
18826: LD_INT 16
18828: PUSH
18829: LD_INT 20
18831: PUSH
18832: LD_INT 21
18834: PUSH
18835: LD_INT 22
18837: PUSH
18838: LD_INT 23
18840: PUSH
18841: LD_INT 25
18843: PUSH
18844: LD_INT 26
18846: PUSH
18847: LD_INT 30
18849: PUSH
18850: LD_INT 31
18852: PUSH
18853: LD_INT 32
18855: PUSH
18856: LD_INT 36
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 101
18882: PUSH
18883: LD_INT 102
18885: PUSH
18886: LD_INT 105
18888: PUSH
18889: LD_INT 106
18891: PUSH
18892: LD_INT 108
18894: PUSH
18895: LD_INT 109
18897: PUSH
18898: LD_INT 112
18900: PUSH
18901: LD_INT 116
18903: PUSH
18904: LD_INT 117
18906: PUSH
18907: LD_INT 118
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: ST_TO_ADDR
18926: GO 21449
18928: LD_INT 7
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 19048
18936: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18937: LD_ADDR_VAR 0 2
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 4
18947: PUSH
18948: LD_INT 5
18950: PUSH
18951: LD_INT 7
18953: PUSH
18954: LD_INT 11
18956: PUSH
18957: LD_INT 12
18959: PUSH
18960: LD_INT 15
18962: PUSH
18963: LD_INT 16
18965: PUSH
18966: LD_INT 20
18968: PUSH
18969: LD_INT 21
18971: PUSH
18972: LD_INT 22
18974: PUSH
18975: LD_INT 23
18977: PUSH
18978: LD_INT 25
18980: PUSH
18981: LD_INT 26
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 101
19002: PUSH
19003: LD_INT 102
19005: PUSH
19006: LD_INT 103
19008: PUSH
19009: LD_INT 105
19011: PUSH
19012: LD_INT 106
19014: PUSH
19015: LD_INT 108
19017: PUSH
19018: LD_INT 112
19020: PUSH
19021: LD_INT 116
19023: PUSH
19024: LD_INT 117
19026: PUSH
19027: LD_INT 118
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: ST_TO_ADDR
19046: GO 21449
19048: LD_INT 8
19050: DOUBLE
19051: EQUAL
19052: IFTRUE 19056
19054: GO 19196
19056: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19057: LD_ADDR_VAR 0 2
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 4
19067: PUSH
19068: LD_INT 5
19070: PUSH
19071: LD_INT 6
19073: PUSH
19074: LD_INT 7
19076: PUSH
19077: LD_INT 8
19079: PUSH
19080: LD_INT 11
19082: PUSH
19083: LD_INT 12
19085: PUSH
19086: LD_INT 15
19088: PUSH
19089: LD_INT 16
19091: PUSH
19092: LD_INT 20
19094: PUSH
19095: LD_INT 21
19097: PUSH
19098: LD_INT 22
19100: PUSH
19101: LD_INT 23
19103: PUSH
19104: LD_INT 25
19106: PUSH
19107: LD_INT 26
19109: PUSH
19110: LD_INT 30
19112: PUSH
19113: LD_INT 31
19115: PUSH
19116: LD_INT 32
19118: PUSH
19119: LD_INT 36
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 101
19146: PUSH
19147: LD_INT 102
19149: PUSH
19150: LD_INT 103
19152: PUSH
19153: LD_INT 105
19155: PUSH
19156: LD_INT 106
19158: PUSH
19159: LD_INT 108
19161: PUSH
19162: LD_INT 109
19164: PUSH
19165: LD_INT 112
19167: PUSH
19168: LD_INT 116
19170: PUSH
19171: LD_INT 117
19173: PUSH
19174: LD_INT 118
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: ST_TO_ADDR
19194: GO 21449
19196: LD_INT 9
19198: DOUBLE
19199: EQUAL
19200: IFTRUE 19204
19202: GO 19352
19204: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19205: LD_ADDR_VAR 0 2
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: LD_INT 4
19215: PUSH
19216: LD_INT 5
19218: PUSH
19219: LD_INT 6
19221: PUSH
19222: LD_INT 7
19224: PUSH
19225: LD_INT 8
19227: PUSH
19228: LD_INT 11
19230: PUSH
19231: LD_INT 12
19233: PUSH
19234: LD_INT 15
19236: PUSH
19237: LD_INT 16
19239: PUSH
19240: LD_INT 20
19242: PUSH
19243: LD_INT 21
19245: PUSH
19246: LD_INT 22
19248: PUSH
19249: LD_INT 23
19251: PUSH
19252: LD_INT 25
19254: PUSH
19255: LD_INT 26
19257: PUSH
19258: LD_INT 28
19260: PUSH
19261: LD_INT 30
19263: PUSH
19264: LD_INT 31
19266: PUSH
19267: LD_INT 32
19269: PUSH
19270: LD_INT 36
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 101
19298: PUSH
19299: LD_INT 102
19301: PUSH
19302: LD_INT 103
19304: PUSH
19305: LD_INT 105
19307: PUSH
19308: LD_INT 106
19310: PUSH
19311: LD_INT 108
19313: PUSH
19314: LD_INT 109
19316: PUSH
19317: LD_INT 112
19319: PUSH
19320: LD_INT 114
19322: PUSH
19323: LD_INT 116
19325: PUSH
19326: LD_INT 117
19328: PUSH
19329: LD_INT 118
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: ST_TO_ADDR
19350: GO 21449
19352: LD_INT 10
19354: DOUBLE
19355: EQUAL
19356: IFTRUE 19360
19358: GO 19556
19360: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19361: LD_ADDR_VAR 0 2
19365: PUSH
19366: LD_INT 2
19368: PUSH
19369: LD_INT 4
19371: PUSH
19372: LD_INT 5
19374: PUSH
19375: LD_INT 6
19377: PUSH
19378: LD_INT 7
19380: PUSH
19381: LD_INT 8
19383: PUSH
19384: LD_INT 9
19386: PUSH
19387: LD_INT 10
19389: PUSH
19390: LD_INT 11
19392: PUSH
19393: LD_INT 12
19395: PUSH
19396: LD_INT 13
19398: PUSH
19399: LD_INT 14
19401: PUSH
19402: LD_INT 15
19404: PUSH
19405: LD_INT 16
19407: PUSH
19408: LD_INT 17
19410: PUSH
19411: LD_INT 18
19413: PUSH
19414: LD_INT 19
19416: PUSH
19417: LD_INT 20
19419: PUSH
19420: LD_INT 21
19422: PUSH
19423: LD_INT 22
19425: PUSH
19426: LD_INT 23
19428: PUSH
19429: LD_INT 24
19431: PUSH
19432: LD_INT 25
19434: PUSH
19435: LD_INT 26
19437: PUSH
19438: LD_INT 28
19440: PUSH
19441: LD_INT 30
19443: PUSH
19444: LD_INT 31
19446: PUSH
19447: LD_INT 32
19449: PUSH
19450: LD_INT 36
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 101
19486: PUSH
19487: LD_INT 102
19489: PUSH
19490: LD_INT 103
19492: PUSH
19493: LD_INT 104
19495: PUSH
19496: LD_INT 105
19498: PUSH
19499: LD_INT 106
19501: PUSH
19502: LD_INT 107
19504: PUSH
19505: LD_INT 108
19507: PUSH
19508: LD_INT 109
19510: PUSH
19511: LD_INT 110
19513: PUSH
19514: LD_INT 111
19516: PUSH
19517: LD_INT 112
19519: PUSH
19520: LD_INT 114
19522: PUSH
19523: LD_INT 116
19525: PUSH
19526: LD_INT 117
19528: PUSH
19529: LD_INT 118
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: ST_TO_ADDR
19554: GO 21449
19556: LD_INT 11
19558: DOUBLE
19559: EQUAL
19560: IFTRUE 19564
19562: GO 19768
19564: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19565: LD_ADDR_VAR 0 2
19569: PUSH
19570: LD_INT 2
19572: PUSH
19573: LD_INT 3
19575: PUSH
19576: LD_INT 4
19578: PUSH
19579: LD_INT 5
19581: PUSH
19582: LD_INT 6
19584: PUSH
19585: LD_INT 7
19587: PUSH
19588: LD_INT 8
19590: PUSH
19591: LD_INT 9
19593: PUSH
19594: LD_INT 10
19596: PUSH
19597: LD_INT 11
19599: PUSH
19600: LD_INT 12
19602: PUSH
19603: LD_INT 13
19605: PUSH
19606: LD_INT 14
19608: PUSH
19609: LD_INT 15
19611: PUSH
19612: LD_INT 16
19614: PUSH
19615: LD_INT 17
19617: PUSH
19618: LD_INT 18
19620: PUSH
19621: LD_INT 19
19623: PUSH
19624: LD_INT 20
19626: PUSH
19627: LD_INT 21
19629: PUSH
19630: LD_INT 22
19632: PUSH
19633: LD_INT 23
19635: PUSH
19636: LD_INT 24
19638: PUSH
19639: LD_INT 25
19641: PUSH
19642: LD_INT 26
19644: PUSH
19645: LD_INT 28
19647: PUSH
19648: LD_INT 30
19650: PUSH
19651: LD_INT 31
19653: PUSH
19654: LD_INT 32
19656: PUSH
19657: LD_INT 34
19659: PUSH
19660: LD_INT 36
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 101
19698: PUSH
19699: LD_INT 102
19701: PUSH
19702: LD_INT 103
19704: PUSH
19705: LD_INT 104
19707: PUSH
19708: LD_INT 105
19710: PUSH
19711: LD_INT 106
19713: PUSH
19714: LD_INT 107
19716: PUSH
19717: LD_INT 108
19719: PUSH
19720: LD_INT 109
19722: PUSH
19723: LD_INT 110
19725: PUSH
19726: LD_INT 111
19728: PUSH
19729: LD_INT 112
19731: PUSH
19732: LD_INT 114
19734: PUSH
19735: LD_INT 116
19737: PUSH
19738: LD_INT 117
19740: PUSH
19741: LD_INT 118
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: ST_TO_ADDR
19766: GO 21449
19768: LD_INT 12
19770: DOUBLE
19771: EQUAL
19772: IFTRUE 19776
19774: GO 19996
19776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19777: LD_ADDR_VAR 0 2
19781: PUSH
19782: LD_INT 1
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 3
19790: PUSH
19791: LD_INT 4
19793: PUSH
19794: LD_INT 5
19796: PUSH
19797: LD_INT 6
19799: PUSH
19800: LD_INT 7
19802: PUSH
19803: LD_INT 8
19805: PUSH
19806: LD_INT 9
19808: PUSH
19809: LD_INT 10
19811: PUSH
19812: LD_INT 11
19814: PUSH
19815: LD_INT 12
19817: PUSH
19818: LD_INT 13
19820: PUSH
19821: LD_INT 14
19823: PUSH
19824: LD_INT 15
19826: PUSH
19827: LD_INT 16
19829: PUSH
19830: LD_INT 17
19832: PUSH
19833: LD_INT 18
19835: PUSH
19836: LD_INT 19
19838: PUSH
19839: LD_INT 20
19841: PUSH
19842: LD_INT 21
19844: PUSH
19845: LD_INT 22
19847: PUSH
19848: LD_INT 23
19850: PUSH
19851: LD_INT 24
19853: PUSH
19854: LD_INT 25
19856: PUSH
19857: LD_INT 26
19859: PUSH
19860: LD_INT 27
19862: PUSH
19863: LD_INT 28
19865: PUSH
19866: LD_INT 30
19868: PUSH
19869: LD_INT 31
19871: PUSH
19872: LD_INT 32
19874: PUSH
19875: LD_INT 33
19877: PUSH
19878: LD_INT 34
19880: PUSH
19881: LD_INT 36
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 101
19922: PUSH
19923: LD_INT 102
19925: PUSH
19926: LD_INT 103
19928: PUSH
19929: LD_INT 104
19931: PUSH
19932: LD_INT 105
19934: PUSH
19935: LD_INT 106
19937: PUSH
19938: LD_INT 107
19940: PUSH
19941: LD_INT 108
19943: PUSH
19944: LD_INT 109
19946: PUSH
19947: LD_INT 110
19949: PUSH
19950: LD_INT 111
19952: PUSH
19953: LD_INT 112
19955: PUSH
19956: LD_INT 113
19958: PUSH
19959: LD_INT 114
19961: PUSH
19962: LD_INT 116
19964: PUSH
19965: LD_INT 117
19967: PUSH
19968: LD_INT 118
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: ST_TO_ADDR
19994: GO 21449
19996: LD_INT 13
19998: DOUBLE
19999: EQUAL
20000: IFTRUE 20004
20002: GO 20212
20004: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20005: LD_ADDR_VAR 0 2
20009: PUSH
20010: LD_INT 1
20012: PUSH
20013: LD_INT 2
20015: PUSH
20016: LD_INT 3
20018: PUSH
20019: LD_INT 4
20021: PUSH
20022: LD_INT 5
20024: PUSH
20025: LD_INT 8
20027: PUSH
20028: LD_INT 9
20030: PUSH
20031: LD_INT 10
20033: PUSH
20034: LD_INT 11
20036: PUSH
20037: LD_INT 12
20039: PUSH
20040: LD_INT 14
20042: PUSH
20043: LD_INT 15
20045: PUSH
20046: LD_INT 16
20048: PUSH
20049: LD_INT 17
20051: PUSH
20052: LD_INT 18
20054: PUSH
20055: LD_INT 19
20057: PUSH
20058: LD_INT 20
20060: PUSH
20061: LD_INT 21
20063: PUSH
20064: LD_INT 22
20066: PUSH
20067: LD_INT 23
20069: PUSH
20070: LD_INT 24
20072: PUSH
20073: LD_INT 25
20075: PUSH
20076: LD_INT 26
20078: PUSH
20079: LD_INT 27
20081: PUSH
20082: LD_INT 28
20084: PUSH
20085: LD_INT 30
20087: PUSH
20088: LD_INT 31
20090: PUSH
20091: LD_INT 32
20093: PUSH
20094: LD_INT 33
20096: PUSH
20097: LD_INT 34
20099: PUSH
20100: LD_INT 36
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 101
20138: PUSH
20139: LD_INT 102
20141: PUSH
20142: LD_INT 103
20144: PUSH
20145: LD_INT 104
20147: PUSH
20148: LD_INT 105
20150: PUSH
20151: LD_INT 106
20153: PUSH
20154: LD_INT 107
20156: PUSH
20157: LD_INT 108
20159: PUSH
20160: LD_INT 109
20162: PUSH
20163: LD_INT 110
20165: PUSH
20166: LD_INT 111
20168: PUSH
20169: LD_INT 112
20171: PUSH
20172: LD_INT 113
20174: PUSH
20175: LD_INT 114
20177: PUSH
20178: LD_INT 116
20180: PUSH
20181: LD_INT 117
20183: PUSH
20184: LD_INT 118
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: ST_TO_ADDR
20210: GO 21449
20212: LD_INT 14
20214: DOUBLE
20215: EQUAL
20216: IFTRUE 20220
20218: GO 20444
20220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20221: LD_ADDR_VAR 0 2
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: LD_INT 2
20231: PUSH
20232: LD_INT 3
20234: PUSH
20235: LD_INT 4
20237: PUSH
20238: LD_INT 5
20240: PUSH
20241: LD_INT 6
20243: PUSH
20244: LD_INT 7
20246: PUSH
20247: LD_INT 8
20249: PUSH
20250: LD_INT 9
20252: PUSH
20253: LD_INT 10
20255: PUSH
20256: LD_INT 11
20258: PUSH
20259: LD_INT 12
20261: PUSH
20262: LD_INT 13
20264: PUSH
20265: LD_INT 14
20267: PUSH
20268: LD_INT 15
20270: PUSH
20271: LD_INT 16
20273: PUSH
20274: LD_INT 17
20276: PUSH
20277: LD_INT 18
20279: PUSH
20280: LD_INT 19
20282: PUSH
20283: LD_INT 20
20285: PUSH
20286: LD_INT 21
20288: PUSH
20289: LD_INT 22
20291: PUSH
20292: LD_INT 23
20294: PUSH
20295: LD_INT 24
20297: PUSH
20298: LD_INT 25
20300: PUSH
20301: LD_INT 26
20303: PUSH
20304: LD_INT 27
20306: PUSH
20307: LD_INT 28
20309: PUSH
20310: LD_INT 29
20312: PUSH
20313: LD_INT 30
20315: PUSH
20316: LD_INT 31
20318: PUSH
20319: LD_INT 32
20321: PUSH
20322: LD_INT 33
20324: PUSH
20325: LD_INT 34
20327: PUSH
20328: LD_INT 36
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 101
20370: PUSH
20371: LD_INT 102
20373: PUSH
20374: LD_INT 103
20376: PUSH
20377: LD_INT 104
20379: PUSH
20380: LD_INT 105
20382: PUSH
20383: LD_INT 106
20385: PUSH
20386: LD_INT 107
20388: PUSH
20389: LD_INT 108
20391: PUSH
20392: LD_INT 109
20394: PUSH
20395: LD_INT 110
20397: PUSH
20398: LD_INT 111
20400: PUSH
20401: LD_INT 112
20403: PUSH
20404: LD_INT 113
20406: PUSH
20407: LD_INT 114
20409: PUSH
20410: LD_INT 116
20412: PUSH
20413: LD_INT 117
20415: PUSH
20416: LD_INT 118
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: ST_TO_ADDR
20442: GO 21449
20444: LD_INT 15
20446: DOUBLE
20447: EQUAL
20448: IFTRUE 20452
20450: GO 20676
20452: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20453: LD_ADDR_VAR 0 2
20457: PUSH
20458: LD_INT 1
20460: PUSH
20461: LD_INT 2
20463: PUSH
20464: LD_INT 3
20466: PUSH
20467: LD_INT 4
20469: PUSH
20470: LD_INT 5
20472: PUSH
20473: LD_INT 6
20475: PUSH
20476: LD_INT 7
20478: PUSH
20479: LD_INT 8
20481: PUSH
20482: LD_INT 9
20484: PUSH
20485: LD_INT 10
20487: PUSH
20488: LD_INT 11
20490: PUSH
20491: LD_INT 12
20493: PUSH
20494: LD_INT 13
20496: PUSH
20497: LD_INT 14
20499: PUSH
20500: LD_INT 15
20502: PUSH
20503: LD_INT 16
20505: PUSH
20506: LD_INT 17
20508: PUSH
20509: LD_INT 18
20511: PUSH
20512: LD_INT 19
20514: PUSH
20515: LD_INT 20
20517: PUSH
20518: LD_INT 21
20520: PUSH
20521: LD_INT 22
20523: PUSH
20524: LD_INT 23
20526: PUSH
20527: LD_INT 24
20529: PUSH
20530: LD_INT 25
20532: PUSH
20533: LD_INT 26
20535: PUSH
20536: LD_INT 27
20538: PUSH
20539: LD_INT 28
20541: PUSH
20542: LD_INT 29
20544: PUSH
20545: LD_INT 30
20547: PUSH
20548: LD_INT 31
20550: PUSH
20551: LD_INT 32
20553: PUSH
20554: LD_INT 33
20556: PUSH
20557: LD_INT 34
20559: PUSH
20560: LD_INT 36
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 101
20602: PUSH
20603: LD_INT 102
20605: PUSH
20606: LD_INT 103
20608: PUSH
20609: LD_INT 104
20611: PUSH
20612: LD_INT 105
20614: PUSH
20615: LD_INT 106
20617: PUSH
20618: LD_INT 107
20620: PUSH
20621: LD_INT 108
20623: PUSH
20624: LD_INT 109
20626: PUSH
20627: LD_INT 110
20629: PUSH
20630: LD_INT 111
20632: PUSH
20633: LD_INT 112
20635: PUSH
20636: LD_INT 113
20638: PUSH
20639: LD_INT 114
20641: PUSH
20642: LD_INT 116
20644: PUSH
20645: LD_INT 117
20647: PUSH
20648: LD_INT 118
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: ST_TO_ADDR
20674: GO 21449
20676: LD_INT 16
20678: DOUBLE
20679: EQUAL
20680: IFTRUE 20684
20682: GO 20820
20684: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20685: LD_ADDR_VAR 0 2
20689: PUSH
20690: LD_INT 2
20692: PUSH
20693: LD_INT 4
20695: PUSH
20696: LD_INT 5
20698: PUSH
20699: LD_INT 7
20701: PUSH
20702: LD_INT 11
20704: PUSH
20705: LD_INT 12
20707: PUSH
20708: LD_INT 15
20710: PUSH
20711: LD_INT 16
20713: PUSH
20714: LD_INT 20
20716: PUSH
20717: LD_INT 21
20719: PUSH
20720: LD_INT 22
20722: PUSH
20723: LD_INT 23
20725: PUSH
20726: LD_INT 25
20728: PUSH
20729: LD_INT 26
20731: PUSH
20732: LD_INT 30
20734: PUSH
20735: LD_INT 31
20737: PUSH
20738: LD_INT 32
20740: PUSH
20741: LD_INT 33
20743: PUSH
20744: LD_INT 34
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 101
20770: PUSH
20771: LD_INT 102
20773: PUSH
20774: LD_INT 103
20776: PUSH
20777: LD_INT 106
20779: PUSH
20780: LD_INT 108
20782: PUSH
20783: LD_INT 112
20785: PUSH
20786: LD_INT 113
20788: PUSH
20789: LD_INT 114
20791: PUSH
20792: LD_INT 116
20794: PUSH
20795: LD_INT 117
20797: PUSH
20798: LD_INT 118
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: ST_TO_ADDR
20818: GO 21449
20820: LD_INT 17
20822: DOUBLE
20823: EQUAL
20824: IFTRUE 20828
20826: GO 21052
20828: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20829: LD_ADDR_VAR 0 2
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: LD_INT 2
20839: PUSH
20840: LD_INT 3
20842: PUSH
20843: LD_INT 4
20845: PUSH
20846: LD_INT 5
20848: PUSH
20849: LD_INT 6
20851: PUSH
20852: LD_INT 7
20854: PUSH
20855: LD_INT 8
20857: PUSH
20858: LD_INT 9
20860: PUSH
20861: LD_INT 10
20863: PUSH
20864: LD_INT 11
20866: PUSH
20867: LD_INT 12
20869: PUSH
20870: LD_INT 13
20872: PUSH
20873: LD_INT 14
20875: PUSH
20876: LD_INT 15
20878: PUSH
20879: LD_INT 16
20881: PUSH
20882: LD_INT 17
20884: PUSH
20885: LD_INT 18
20887: PUSH
20888: LD_INT 19
20890: PUSH
20891: LD_INT 20
20893: PUSH
20894: LD_INT 21
20896: PUSH
20897: LD_INT 22
20899: PUSH
20900: LD_INT 23
20902: PUSH
20903: LD_INT 24
20905: PUSH
20906: LD_INT 25
20908: PUSH
20909: LD_INT 26
20911: PUSH
20912: LD_INT 27
20914: PUSH
20915: LD_INT 28
20917: PUSH
20918: LD_INT 29
20920: PUSH
20921: LD_INT 30
20923: PUSH
20924: LD_INT 31
20926: PUSH
20927: LD_INT 32
20929: PUSH
20930: LD_INT 33
20932: PUSH
20933: LD_INT 34
20935: PUSH
20936: LD_INT 36
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 101
20978: PUSH
20979: LD_INT 102
20981: PUSH
20982: LD_INT 103
20984: PUSH
20985: LD_INT 104
20987: PUSH
20988: LD_INT 105
20990: PUSH
20991: LD_INT 106
20993: PUSH
20994: LD_INT 107
20996: PUSH
20997: LD_INT 108
20999: PUSH
21000: LD_INT 109
21002: PUSH
21003: LD_INT 110
21005: PUSH
21006: LD_INT 111
21008: PUSH
21009: LD_INT 112
21011: PUSH
21012: LD_INT 113
21014: PUSH
21015: LD_INT 114
21017: PUSH
21018: LD_INT 116
21020: PUSH
21021: LD_INT 117
21023: PUSH
21024: LD_INT 118
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: ST_TO_ADDR
21050: GO 21449
21052: LD_INT 18
21054: DOUBLE
21055: EQUAL
21056: IFTRUE 21060
21058: GO 21208
21060: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21061: LD_ADDR_VAR 0 2
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: LD_INT 4
21071: PUSH
21072: LD_INT 5
21074: PUSH
21075: LD_INT 7
21077: PUSH
21078: LD_INT 11
21080: PUSH
21081: LD_INT 12
21083: PUSH
21084: LD_INT 15
21086: PUSH
21087: LD_INT 16
21089: PUSH
21090: LD_INT 20
21092: PUSH
21093: LD_INT 21
21095: PUSH
21096: LD_INT 22
21098: PUSH
21099: LD_INT 23
21101: PUSH
21102: LD_INT 25
21104: PUSH
21105: LD_INT 26
21107: PUSH
21108: LD_INT 30
21110: PUSH
21111: LD_INT 31
21113: PUSH
21114: LD_INT 32
21116: PUSH
21117: LD_INT 33
21119: PUSH
21120: LD_INT 34
21122: PUSH
21123: LD_INT 35
21125: PUSH
21126: LD_INT 36
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 101
21154: PUSH
21155: LD_INT 102
21157: PUSH
21158: LD_INT 103
21160: PUSH
21161: LD_INT 106
21163: PUSH
21164: LD_INT 108
21166: PUSH
21167: LD_INT 112
21169: PUSH
21170: LD_INT 113
21172: PUSH
21173: LD_INT 114
21175: PUSH
21176: LD_INT 115
21178: PUSH
21179: LD_INT 116
21181: PUSH
21182: LD_INT 117
21184: PUSH
21185: LD_INT 118
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: ST_TO_ADDR
21206: GO 21449
21208: LD_INT 19
21210: DOUBLE
21211: EQUAL
21212: IFTRUE 21216
21214: GO 21448
21216: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21217: LD_ADDR_VAR 0 2
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: LD_INT 2
21227: PUSH
21228: LD_INT 3
21230: PUSH
21231: LD_INT 4
21233: PUSH
21234: LD_INT 5
21236: PUSH
21237: LD_INT 6
21239: PUSH
21240: LD_INT 7
21242: PUSH
21243: LD_INT 8
21245: PUSH
21246: LD_INT 9
21248: PUSH
21249: LD_INT 10
21251: PUSH
21252: LD_INT 11
21254: PUSH
21255: LD_INT 12
21257: PUSH
21258: LD_INT 13
21260: PUSH
21261: LD_INT 14
21263: PUSH
21264: LD_INT 15
21266: PUSH
21267: LD_INT 16
21269: PUSH
21270: LD_INT 17
21272: PUSH
21273: LD_INT 18
21275: PUSH
21276: LD_INT 19
21278: PUSH
21279: LD_INT 20
21281: PUSH
21282: LD_INT 21
21284: PUSH
21285: LD_INT 22
21287: PUSH
21288: LD_INT 23
21290: PUSH
21291: LD_INT 24
21293: PUSH
21294: LD_INT 25
21296: PUSH
21297: LD_INT 26
21299: PUSH
21300: LD_INT 27
21302: PUSH
21303: LD_INT 28
21305: PUSH
21306: LD_INT 29
21308: PUSH
21309: LD_INT 30
21311: PUSH
21312: LD_INT 31
21314: PUSH
21315: LD_INT 32
21317: PUSH
21318: LD_INT 33
21320: PUSH
21321: LD_INT 34
21323: PUSH
21324: LD_INT 35
21326: PUSH
21327: LD_INT 36
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 101
21370: PUSH
21371: LD_INT 102
21373: PUSH
21374: LD_INT 103
21376: PUSH
21377: LD_INT 104
21379: PUSH
21380: LD_INT 105
21382: PUSH
21383: LD_INT 106
21385: PUSH
21386: LD_INT 107
21388: PUSH
21389: LD_INT 108
21391: PUSH
21392: LD_INT 109
21394: PUSH
21395: LD_INT 110
21397: PUSH
21398: LD_INT 111
21400: PUSH
21401: LD_INT 112
21403: PUSH
21404: LD_INT 113
21406: PUSH
21407: LD_INT 114
21409: PUSH
21410: LD_INT 115
21412: PUSH
21413: LD_INT 116
21415: PUSH
21416: LD_INT 117
21418: PUSH
21419: LD_INT 118
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: ST_TO_ADDR
21446: GO 21449
21448: POP
// end else
21449: GO 21680
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21451: LD_ADDR_VAR 0 2
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: LD_INT 3
21464: PUSH
21465: LD_INT 4
21467: PUSH
21468: LD_INT 5
21470: PUSH
21471: LD_INT 6
21473: PUSH
21474: LD_INT 7
21476: PUSH
21477: LD_INT 8
21479: PUSH
21480: LD_INT 9
21482: PUSH
21483: LD_INT 10
21485: PUSH
21486: LD_INT 11
21488: PUSH
21489: LD_INT 12
21491: PUSH
21492: LD_INT 13
21494: PUSH
21495: LD_INT 14
21497: PUSH
21498: LD_INT 15
21500: PUSH
21501: LD_INT 16
21503: PUSH
21504: LD_INT 17
21506: PUSH
21507: LD_INT 18
21509: PUSH
21510: LD_INT 19
21512: PUSH
21513: LD_INT 20
21515: PUSH
21516: LD_INT 21
21518: PUSH
21519: LD_INT 22
21521: PUSH
21522: LD_INT 23
21524: PUSH
21525: LD_INT 24
21527: PUSH
21528: LD_INT 25
21530: PUSH
21531: LD_INT 26
21533: PUSH
21534: LD_INT 27
21536: PUSH
21537: LD_INT 28
21539: PUSH
21540: LD_INT 29
21542: PUSH
21543: LD_INT 30
21545: PUSH
21546: LD_INT 31
21548: PUSH
21549: LD_INT 32
21551: PUSH
21552: LD_INT 33
21554: PUSH
21555: LD_INT 34
21557: PUSH
21558: LD_INT 35
21560: PUSH
21561: LD_INT 36
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 101
21604: PUSH
21605: LD_INT 102
21607: PUSH
21608: LD_INT 103
21610: PUSH
21611: LD_INT 104
21613: PUSH
21614: LD_INT 105
21616: PUSH
21617: LD_INT 106
21619: PUSH
21620: LD_INT 107
21622: PUSH
21623: LD_INT 108
21625: PUSH
21626: LD_INT 109
21628: PUSH
21629: LD_INT 110
21631: PUSH
21632: LD_INT 111
21634: PUSH
21635: LD_INT 112
21637: PUSH
21638: LD_INT 113
21640: PUSH
21641: LD_INT 114
21643: PUSH
21644: LD_INT 115
21646: PUSH
21647: LD_INT 116
21649: PUSH
21650: LD_INT 117
21652: PUSH
21653: LD_INT 118
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: ST_TO_ADDR
// if result then
21680: LD_VAR 0 2
21684: IFFALSE 22470
// begin normal :=  ;
21686: LD_ADDR_VAR 0 5
21690: PUSH
21691: LD_STRING 
21693: ST_TO_ADDR
// hardcore :=  ;
21694: LD_ADDR_VAR 0 6
21698: PUSH
21699: LD_STRING 
21701: ST_TO_ADDR
// active :=  ;
21702: LD_ADDR_VAR 0 7
21706: PUSH
21707: LD_STRING 
21709: ST_TO_ADDR
// for i = 1 to normalCounter do
21710: LD_ADDR_VAR 0 8
21714: PUSH
21715: DOUBLE
21716: LD_INT 1
21718: DEC
21719: ST_TO_ADDR
21720: LD_EXP 37
21724: PUSH
21725: FOR_TO
21726: IFFALSE 21827
// begin tmp := 0 ;
21728: LD_ADDR_VAR 0 3
21732: PUSH
21733: LD_STRING 0
21735: ST_TO_ADDR
// if result [ 1 ] then
21736: LD_VAR 0 2
21740: PUSH
21741: LD_INT 1
21743: ARRAY
21744: IFFALSE 21809
// if result [ 1 ] [ 1 ] = i then
21746: LD_VAR 0 2
21750: PUSH
21751: LD_INT 1
21753: ARRAY
21754: PUSH
21755: LD_INT 1
21757: ARRAY
21758: PUSH
21759: LD_VAR 0 8
21763: EQUAL
21764: IFFALSE 21809
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: LD_VAR 0 2
21775: PPUSH
21776: LD_INT 1
21778: PPUSH
21779: LD_VAR 0 2
21783: PUSH
21784: LD_INT 1
21786: ARRAY
21787: PPUSH
21788: LD_INT 1
21790: PPUSH
21791: CALL_OW 3
21795: PPUSH
21796: CALL_OW 1
21800: ST_TO_ADDR
// tmp := 1 ;
21801: LD_ADDR_VAR 0 3
21805: PUSH
21806: LD_STRING 1
21808: ST_TO_ADDR
// end ; normal := normal & tmp ;
21809: LD_ADDR_VAR 0 5
21813: PUSH
21814: LD_VAR 0 5
21818: PUSH
21819: LD_VAR 0 3
21823: STR
21824: ST_TO_ADDR
// end ;
21825: GO 21725
21827: POP
21828: POP
// for i = 1 to hardcoreCounter do
21829: LD_ADDR_VAR 0 8
21833: PUSH
21834: DOUBLE
21835: LD_INT 1
21837: DEC
21838: ST_TO_ADDR
21839: LD_EXP 38
21843: PUSH
21844: FOR_TO
21845: IFFALSE 21950
// begin tmp := 0 ;
21847: LD_ADDR_VAR 0 3
21851: PUSH
21852: LD_STRING 0
21854: ST_TO_ADDR
// if result [ 2 ] then
21855: LD_VAR 0 2
21859: PUSH
21860: LD_INT 2
21862: ARRAY
21863: IFFALSE 21932
// if result [ 2 ] [ 1 ] = 100 + i then
21865: LD_VAR 0 2
21869: PUSH
21870: LD_INT 2
21872: ARRAY
21873: PUSH
21874: LD_INT 1
21876: ARRAY
21877: PUSH
21878: LD_INT 100
21880: PUSH
21881: LD_VAR 0 8
21885: PLUS
21886: EQUAL
21887: IFFALSE 21932
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21889: LD_ADDR_VAR 0 2
21893: PUSH
21894: LD_VAR 0 2
21898: PPUSH
21899: LD_INT 2
21901: PPUSH
21902: LD_VAR 0 2
21906: PUSH
21907: LD_INT 2
21909: ARRAY
21910: PPUSH
21911: LD_INT 1
21913: PPUSH
21914: CALL_OW 3
21918: PPUSH
21919: CALL_OW 1
21923: ST_TO_ADDR
// tmp := 1 ;
21924: LD_ADDR_VAR 0 3
21928: PUSH
21929: LD_STRING 1
21931: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21932: LD_ADDR_VAR 0 6
21936: PUSH
21937: LD_VAR 0 6
21941: PUSH
21942: LD_VAR 0 3
21946: STR
21947: ST_TO_ADDR
// end ;
21948: GO 21844
21950: POP
21951: POP
// if isGameLoad then
21952: LD_VAR 0 1
21956: IFFALSE 22431
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21958: LD_ADDR_VAR 0 4
21962: PUSH
21963: LD_EXP 41
21967: PUSH
21968: LD_EXP 40
21972: PUSH
21973: LD_EXP 42
21977: PUSH
21978: LD_EXP 39
21982: PUSH
21983: LD_EXP 43
21987: PUSH
21988: LD_EXP 44
21992: PUSH
21993: LD_EXP 45
21997: PUSH
21998: LD_EXP 46
22002: PUSH
22003: LD_EXP 47
22007: PUSH
22008: LD_EXP 48
22012: PUSH
22013: LD_EXP 49
22017: PUSH
22018: LD_EXP 50
22022: PUSH
22023: LD_EXP 51
22027: PUSH
22028: LD_EXP 52
22032: PUSH
22033: LD_EXP 60
22037: PUSH
22038: LD_EXP 61
22042: PUSH
22043: LD_EXP 62
22047: PUSH
22048: LD_EXP 63
22052: PUSH
22053: LD_EXP 65
22057: PUSH
22058: LD_EXP 66
22062: PUSH
22063: LD_EXP 67
22067: PUSH
22068: LD_EXP 70
22072: PUSH
22073: LD_EXP 72
22077: PUSH
22078: LD_EXP 73
22082: PUSH
22083: LD_EXP 74
22087: PUSH
22088: LD_EXP 76
22092: PUSH
22093: LD_EXP 77
22097: PUSH
22098: LD_EXP 80
22102: PUSH
22103: LD_EXP 81
22107: PUSH
22108: LD_EXP 82
22112: PUSH
22113: LD_EXP 83
22117: PUSH
22118: LD_EXP 84
22122: PUSH
22123: LD_EXP 85
22127: PUSH
22128: LD_EXP 86
22132: PUSH
22133: LD_EXP 87
22137: PUSH
22138: LD_EXP 88
22142: PUSH
22143: LD_EXP 53
22147: PUSH
22148: LD_EXP 54
22152: PUSH
22153: LD_EXP 57
22157: PUSH
22158: LD_EXP 58
22162: PUSH
22163: LD_EXP 59
22167: PUSH
22168: LD_EXP 55
22172: PUSH
22173: LD_EXP 56
22177: PUSH
22178: LD_EXP 64
22182: PUSH
22183: LD_EXP 68
22187: PUSH
22188: LD_EXP 69
22192: PUSH
22193: LD_EXP 71
22197: PUSH
22198: LD_EXP 75
22202: PUSH
22203: LD_EXP 78
22207: PUSH
22208: LD_EXP 79
22212: PUSH
22213: LD_EXP 89
22217: PUSH
22218: LD_EXP 90
22222: PUSH
22223: LD_EXP 91
22227: PUSH
22228: LD_EXP 92
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: ST_TO_ADDR
// tmp :=  ;
22289: LD_ADDR_VAR 0 3
22293: PUSH
22294: LD_STRING 
22296: ST_TO_ADDR
// for i = 1 to normalCounter do
22297: LD_ADDR_VAR 0 8
22301: PUSH
22302: DOUBLE
22303: LD_INT 1
22305: DEC
22306: ST_TO_ADDR
22307: LD_EXP 37
22311: PUSH
22312: FOR_TO
22313: IFFALSE 22349
// begin if flags [ i ] then
22315: LD_VAR 0 4
22319: PUSH
22320: LD_VAR 0 8
22324: ARRAY
22325: IFFALSE 22347
// tmp := tmp & i & ; ;
22327: LD_ADDR_VAR 0 3
22331: PUSH
22332: LD_VAR 0 3
22336: PUSH
22337: LD_VAR 0 8
22341: STR
22342: PUSH
22343: LD_STRING ;
22345: STR
22346: ST_TO_ADDR
// end ;
22347: GO 22312
22349: POP
22350: POP
// for i = 1 to hardcoreCounter do
22351: LD_ADDR_VAR 0 8
22355: PUSH
22356: DOUBLE
22357: LD_INT 1
22359: DEC
22360: ST_TO_ADDR
22361: LD_EXP 38
22365: PUSH
22366: FOR_TO
22367: IFFALSE 22413
// begin if flags [ normalCounter + i ] then
22369: LD_VAR 0 4
22373: PUSH
22374: LD_EXP 37
22378: PUSH
22379: LD_VAR 0 8
22383: PLUS
22384: ARRAY
22385: IFFALSE 22411
// tmp := tmp & ( 100 + i ) & ; ;
22387: LD_ADDR_VAR 0 3
22391: PUSH
22392: LD_VAR 0 3
22396: PUSH
22397: LD_INT 100
22399: PUSH
22400: LD_VAR 0 8
22404: PLUS
22405: STR
22406: PUSH
22407: LD_STRING ;
22409: STR
22410: ST_TO_ADDR
// end ;
22411: GO 22366
22413: POP
22414: POP
// if tmp then
22415: LD_VAR 0 3
22419: IFFALSE 22431
// active := tmp ;
22421: LD_ADDR_VAR 0 7
22425: PUSH
22426: LD_VAR 0 3
22430: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22431: LD_STRING getStreamItemsFromMission("
22433: PUSH
22434: LD_VAR 0 5
22438: STR
22439: PUSH
22440: LD_STRING ","
22442: STR
22443: PUSH
22444: LD_VAR 0 6
22448: STR
22449: PUSH
22450: LD_STRING ","
22452: STR
22453: PUSH
22454: LD_VAR 0 7
22458: STR
22459: PUSH
22460: LD_STRING ")
22462: STR
22463: PPUSH
22464: CALL_OW 559
// end else
22468: GO 22477
// ToLua ( getStreamItemsFromMission("","","") ) ;
22470: LD_STRING getStreamItemsFromMission("","","")
22472: PPUSH
22473: CALL_OW 559
// end ;
22477: LD_VAR 0 2
22481: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22482: LD_EXP 36
22486: PUSH
22487: LD_EXP 41
22491: AND
22492: IFFALSE 22616
22494: GO 22496
22496: DISABLE
22497: LD_INT 0
22499: PPUSH
22500: PPUSH
// begin enable ;
22501: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22502: LD_ADDR_VAR 0 2
22506: PUSH
22507: LD_INT 22
22509: PUSH
22510: LD_OWVAR 2
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 34
22524: PUSH
22525: LD_INT 7
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 34
22534: PUSH
22535: LD_INT 45
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 34
22544: PUSH
22545: LD_INT 28
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 34
22554: PUSH
22555: LD_INT 47
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PPUSH
22573: CALL_OW 69
22577: ST_TO_ADDR
// if not tmp then
22578: LD_VAR 0 2
22582: NOT
22583: IFFALSE 22587
// exit ;
22585: GO 22616
// for i in tmp do
22587: LD_ADDR_VAR 0 1
22591: PUSH
22592: LD_VAR 0 2
22596: PUSH
22597: FOR_IN
22598: IFFALSE 22614
// begin SetLives ( i , 0 ) ;
22600: LD_VAR 0 1
22604: PPUSH
22605: LD_INT 0
22607: PPUSH
22608: CALL_OW 234
// end ;
22612: GO 22597
22614: POP
22615: POP
// end ;
22616: PPOPN 2
22618: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22619: LD_EXP 36
22623: PUSH
22624: LD_EXP 42
22628: AND
22629: IFFALSE 22713
22631: GO 22633
22633: DISABLE
22634: LD_INT 0
22636: PPUSH
22637: PPUSH
// begin enable ;
22638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22639: LD_ADDR_VAR 0 2
22643: PUSH
22644: LD_INT 22
22646: PUSH
22647: LD_OWVAR 2
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 32
22658: PUSH
22659: LD_INT 3
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PPUSH
22670: CALL_OW 69
22674: ST_TO_ADDR
// if not tmp then
22675: LD_VAR 0 2
22679: NOT
22680: IFFALSE 22684
// exit ;
22682: GO 22713
// for i in tmp do
22684: LD_ADDR_VAR 0 1
22688: PUSH
22689: LD_VAR 0 2
22693: PUSH
22694: FOR_IN
22695: IFFALSE 22711
// begin SetLives ( i , 0 ) ;
22697: LD_VAR 0 1
22701: PPUSH
22702: LD_INT 0
22704: PPUSH
22705: CALL_OW 234
// end ;
22709: GO 22694
22711: POP
22712: POP
// end ;
22713: PPOPN 2
22715: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22716: LD_EXP 36
22720: PUSH
22721: LD_EXP 39
22725: AND
22726: IFFALSE 22819
22728: GO 22730
22730: DISABLE
22731: LD_INT 0
22733: PPUSH
// begin enable ;
22734: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22735: LD_ADDR_VAR 0 1
22739: PUSH
22740: LD_INT 22
22742: PUSH
22743: LD_OWVAR 2
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: LD_INT 25
22757: PUSH
22758: LD_INT 5
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 25
22767: PUSH
22768: LD_INT 9
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 25
22777: PUSH
22778: LD_INT 8
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PPUSH
22795: CALL_OW 69
22799: PUSH
22800: FOR_IN
22801: IFFALSE 22817
// begin SetClass ( i , 1 ) ;
22803: LD_VAR 0 1
22807: PPUSH
22808: LD_INT 1
22810: PPUSH
22811: CALL_OW 336
// end ;
22815: GO 22800
22817: POP
22818: POP
// end ;
22819: PPOPN 1
22821: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22822: LD_EXP 36
22826: PUSH
22827: LD_EXP 40
22831: AND
22832: PUSH
22833: LD_OWVAR 65
22837: PUSH
22838: LD_INT 7
22840: LESS
22841: AND
22842: IFFALSE 22856
22844: GO 22846
22846: DISABLE
// begin enable ;
22847: ENABLE
// game_speed := 7 ;
22848: LD_ADDR_OWVAR 65
22852: PUSH
22853: LD_INT 7
22855: ST_TO_ADDR
// end ;
22856: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22857: LD_EXP 36
22861: PUSH
22862: LD_EXP 43
22866: AND
22867: IFFALSE 23069
22869: GO 22871
22871: DISABLE
22872: LD_INT 0
22874: PPUSH
22875: PPUSH
22876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22877: LD_ADDR_VAR 0 3
22881: PUSH
22882: LD_INT 81
22884: PUSH
22885: LD_OWVAR 2
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 21
22896: PUSH
22897: LD_INT 1
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PPUSH
22908: CALL_OW 69
22912: ST_TO_ADDR
// if not tmp then
22913: LD_VAR 0 3
22917: NOT
22918: IFFALSE 22922
// exit ;
22920: GO 23069
// if tmp > 5 then
22922: LD_VAR 0 3
22926: PUSH
22927: LD_INT 5
22929: GREATER
22930: IFFALSE 22942
// k := 5 else
22932: LD_ADDR_VAR 0 2
22936: PUSH
22937: LD_INT 5
22939: ST_TO_ADDR
22940: GO 22952
// k := tmp ;
22942: LD_ADDR_VAR 0 2
22946: PUSH
22947: LD_VAR 0 3
22951: ST_TO_ADDR
// for i := 1 to k do
22952: LD_ADDR_VAR 0 1
22956: PUSH
22957: DOUBLE
22958: LD_INT 1
22960: DEC
22961: ST_TO_ADDR
22962: LD_VAR 0 2
22966: PUSH
22967: FOR_TO
22968: IFFALSE 23067
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22970: LD_VAR 0 3
22974: PUSH
22975: LD_VAR 0 1
22979: ARRAY
22980: PPUSH
22981: LD_VAR 0 1
22985: PUSH
22986: LD_INT 4
22988: MOD
22989: PUSH
22990: LD_INT 1
22992: PLUS
22993: PPUSH
22994: CALL_OW 259
22998: PUSH
22999: LD_INT 10
23001: LESS
23002: IFFALSE 23065
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23004: LD_VAR 0 3
23008: PUSH
23009: LD_VAR 0 1
23013: ARRAY
23014: PPUSH
23015: LD_VAR 0 1
23019: PUSH
23020: LD_INT 4
23022: MOD
23023: PUSH
23024: LD_INT 1
23026: PLUS
23027: PPUSH
23028: LD_VAR 0 3
23032: PUSH
23033: LD_VAR 0 1
23037: ARRAY
23038: PPUSH
23039: LD_VAR 0 1
23043: PUSH
23044: LD_INT 4
23046: MOD
23047: PUSH
23048: LD_INT 1
23050: PLUS
23051: PPUSH
23052: CALL_OW 259
23056: PUSH
23057: LD_INT 1
23059: PLUS
23060: PPUSH
23061: CALL_OW 237
23065: GO 22967
23067: POP
23068: POP
// end ;
23069: PPOPN 3
23071: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23072: LD_EXP 36
23076: PUSH
23077: LD_EXP 44
23081: AND
23082: IFFALSE 23102
23084: GO 23086
23086: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23087: LD_INT 4
23089: PPUSH
23090: LD_OWVAR 2
23094: PPUSH
23095: LD_INT 0
23097: PPUSH
23098: CALL_OW 324
23102: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23103: LD_EXP 36
23107: PUSH
23108: LD_EXP 73
23112: AND
23113: IFFALSE 23133
23115: GO 23117
23117: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23118: LD_INT 19
23120: PPUSH
23121: LD_OWVAR 2
23125: PPUSH
23126: LD_INT 0
23128: PPUSH
23129: CALL_OW 324
23133: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23134: LD_EXP 36
23138: PUSH
23139: LD_EXP 45
23143: AND
23144: IFFALSE 23246
23146: GO 23148
23148: DISABLE
23149: LD_INT 0
23151: PPUSH
23152: PPUSH
// begin enable ;
23153: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23154: LD_ADDR_VAR 0 2
23158: PUSH
23159: LD_INT 22
23161: PUSH
23162: LD_OWVAR 2
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: LD_INT 34
23176: PUSH
23177: LD_INT 11
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 34
23186: PUSH
23187: LD_INT 30
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: LIST
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PPUSH
23203: CALL_OW 69
23207: ST_TO_ADDR
// if not tmp then
23208: LD_VAR 0 2
23212: NOT
23213: IFFALSE 23217
// exit ;
23215: GO 23246
// for i in tmp do
23217: LD_ADDR_VAR 0 1
23221: PUSH
23222: LD_VAR 0 2
23226: PUSH
23227: FOR_IN
23228: IFFALSE 23244
// begin SetLives ( i , 0 ) ;
23230: LD_VAR 0 1
23234: PPUSH
23235: LD_INT 0
23237: PPUSH
23238: CALL_OW 234
// end ;
23242: GO 23227
23244: POP
23245: POP
// end ;
23246: PPOPN 2
23248: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23249: LD_EXP 36
23253: PUSH
23254: LD_EXP 46
23258: AND
23259: IFFALSE 23279
23261: GO 23263
23263: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23264: LD_INT 32
23266: PPUSH
23267: LD_OWVAR 2
23271: PPUSH
23272: LD_INT 0
23274: PPUSH
23275: CALL_OW 324
23279: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23280: LD_EXP 36
23284: PUSH
23285: LD_EXP 47
23289: AND
23290: IFFALSE 23471
23292: GO 23294
23294: DISABLE
23295: LD_INT 0
23297: PPUSH
23298: PPUSH
23299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23300: LD_ADDR_VAR 0 2
23304: PUSH
23305: LD_INT 22
23307: PUSH
23308: LD_OWVAR 2
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 33
23319: PUSH
23320: LD_INT 3
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PPUSH
23331: CALL_OW 69
23335: ST_TO_ADDR
// if not tmp then
23336: LD_VAR 0 2
23340: NOT
23341: IFFALSE 23345
// exit ;
23343: GO 23471
// side := 0 ;
23345: LD_ADDR_VAR 0 3
23349: PUSH
23350: LD_INT 0
23352: ST_TO_ADDR
// for i := 1 to 8 do
23353: LD_ADDR_VAR 0 1
23357: PUSH
23358: DOUBLE
23359: LD_INT 1
23361: DEC
23362: ST_TO_ADDR
23363: LD_INT 8
23365: PUSH
23366: FOR_TO
23367: IFFALSE 23415
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23369: LD_OWVAR 2
23373: PUSH
23374: LD_VAR 0 1
23378: NONEQUAL
23379: PUSH
23380: LD_OWVAR 2
23384: PPUSH
23385: LD_VAR 0 1
23389: PPUSH
23390: CALL_OW 81
23394: PUSH
23395: LD_INT 2
23397: EQUAL
23398: AND
23399: IFFALSE 23413
// begin side := i ;
23401: LD_ADDR_VAR 0 3
23405: PUSH
23406: LD_VAR 0 1
23410: ST_TO_ADDR
// break ;
23411: GO 23415
// end ;
23413: GO 23366
23415: POP
23416: POP
// if not side then
23417: LD_VAR 0 3
23421: NOT
23422: IFFALSE 23426
// exit ;
23424: GO 23471
// for i := 1 to tmp do
23426: LD_ADDR_VAR 0 1
23430: PUSH
23431: DOUBLE
23432: LD_INT 1
23434: DEC
23435: ST_TO_ADDR
23436: LD_VAR 0 2
23440: PUSH
23441: FOR_TO
23442: IFFALSE 23469
// if Prob ( 60 ) then
23444: LD_INT 60
23446: PPUSH
23447: CALL_OW 13
23451: IFFALSE 23467
// SetSide ( i , side ) ;
23453: LD_VAR 0 1
23457: PPUSH
23458: LD_VAR 0 3
23462: PPUSH
23463: CALL_OW 235
23467: GO 23441
23469: POP
23470: POP
// end ;
23471: PPOPN 3
23473: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23474: LD_EXP 36
23478: PUSH
23479: LD_EXP 49
23483: AND
23484: IFFALSE 23603
23486: GO 23488
23488: DISABLE
23489: LD_INT 0
23491: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23492: LD_ADDR_VAR 0 1
23496: PUSH
23497: LD_INT 22
23499: PUSH
23500: LD_OWVAR 2
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 21
23511: PUSH
23512: LD_INT 1
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 3
23521: PUSH
23522: LD_INT 23
23524: PUSH
23525: LD_INT 0
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: LIST
23540: PPUSH
23541: CALL_OW 69
23545: PUSH
23546: FOR_IN
23547: IFFALSE 23601
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23549: LD_VAR 0 1
23553: PPUSH
23554: CALL_OW 257
23558: PUSH
23559: LD_INT 1
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: LD_INT 3
23567: PUSH
23568: LD_INT 4
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: IN
23577: IFFALSE 23599
// SetClass ( un , rand ( 1 , 4 ) ) ;
23579: LD_VAR 0 1
23583: PPUSH
23584: LD_INT 1
23586: PPUSH
23587: LD_INT 4
23589: PPUSH
23590: CALL_OW 12
23594: PPUSH
23595: CALL_OW 336
23599: GO 23546
23601: POP
23602: POP
// end ;
23603: PPOPN 1
23605: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23606: LD_EXP 36
23610: PUSH
23611: LD_EXP 48
23615: AND
23616: IFFALSE 23695
23618: GO 23620
23620: DISABLE
23621: LD_INT 0
23623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23624: LD_ADDR_VAR 0 1
23628: PUSH
23629: LD_INT 22
23631: PUSH
23632: LD_OWVAR 2
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 21
23643: PUSH
23644: LD_INT 3
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PPUSH
23655: CALL_OW 69
23659: ST_TO_ADDR
// if not tmp then
23660: LD_VAR 0 1
23664: NOT
23665: IFFALSE 23669
// exit ;
23667: GO 23695
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23669: LD_VAR 0 1
23673: PUSH
23674: LD_INT 1
23676: PPUSH
23677: LD_VAR 0 1
23681: PPUSH
23682: CALL_OW 12
23686: ARRAY
23687: PPUSH
23688: LD_INT 100
23690: PPUSH
23691: CALL_OW 234
// end ;
23695: PPOPN 1
23697: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23698: LD_EXP 36
23702: PUSH
23703: LD_EXP 50
23707: AND
23708: IFFALSE 23806
23710: GO 23712
23712: DISABLE
23713: LD_INT 0
23715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23716: LD_ADDR_VAR 0 1
23720: PUSH
23721: LD_INT 22
23723: PUSH
23724: LD_OWVAR 2
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 21
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PPUSH
23747: CALL_OW 69
23751: ST_TO_ADDR
// if not tmp then
23752: LD_VAR 0 1
23756: NOT
23757: IFFALSE 23761
// exit ;
23759: GO 23806
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23761: LD_VAR 0 1
23765: PUSH
23766: LD_INT 1
23768: PPUSH
23769: LD_VAR 0 1
23773: PPUSH
23774: CALL_OW 12
23778: ARRAY
23779: PPUSH
23780: LD_INT 1
23782: PPUSH
23783: LD_INT 4
23785: PPUSH
23786: CALL_OW 12
23790: PPUSH
23791: LD_INT 3000
23793: PPUSH
23794: LD_INT 9000
23796: PPUSH
23797: CALL_OW 12
23801: PPUSH
23802: CALL_OW 492
// end ;
23806: PPOPN 1
23808: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23809: LD_EXP 36
23813: PUSH
23814: LD_EXP 51
23818: AND
23819: IFFALSE 23839
23821: GO 23823
23823: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23824: LD_INT 1
23826: PPUSH
23827: LD_OWVAR 2
23831: PPUSH
23832: LD_INT 0
23834: PPUSH
23835: CALL_OW 324
23839: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23840: LD_EXP 36
23844: PUSH
23845: LD_EXP 52
23849: AND
23850: IFFALSE 23933
23852: GO 23854
23854: DISABLE
23855: LD_INT 0
23857: PPUSH
23858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23859: LD_ADDR_VAR 0 2
23863: PUSH
23864: LD_INT 22
23866: PUSH
23867: LD_OWVAR 2
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 21
23878: PUSH
23879: LD_INT 3
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PPUSH
23890: CALL_OW 69
23894: ST_TO_ADDR
// if not tmp then
23895: LD_VAR 0 2
23899: NOT
23900: IFFALSE 23904
// exit ;
23902: GO 23933
// for i in tmp do
23904: LD_ADDR_VAR 0 1
23908: PUSH
23909: LD_VAR 0 2
23913: PUSH
23914: FOR_IN
23915: IFFALSE 23931
// SetBLevel ( i , 10 ) ;
23917: LD_VAR 0 1
23921: PPUSH
23922: LD_INT 10
23924: PPUSH
23925: CALL_OW 241
23929: GO 23914
23931: POP
23932: POP
// end ;
23933: PPOPN 2
23935: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23936: LD_EXP 36
23940: PUSH
23941: LD_EXP 53
23945: AND
23946: IFFALSE 24057
23948: GO 23950
23950: DISABLE
23951: LD_INT 0
23953: PPUSH
23954: PPUSH
23955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23956: LD_ADDR_VAR 0 3
23960: PUSH
23961: LD_INT 22
23963: PUSH
23964: LD_OWVAR 2
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 25
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PPUSH
23987: CALL_OW 69
23991: ST_TO_ADDR
// if not tmp then
23992: LD_VAR 0 3
23996: NOT
23997: IFFALSE 24001
// exit ;
23999: GO 24057
// un := tmp [ rand ( 1 , tmp ) ] ;
24001: LD_ADDR_VAR 0 2
24005: PUSH
24006: LD_VAR 0 3
24010: PUSH
24011: LD_INT 1
24013: PPUSH
24014: LD_VAR 0 3
24018: PPUSH
24019: CALL_OW 12
24023: ARRAY
24024: ST_TO_ADDR
// if Crawls ( un ) then
24025: LD_VAR 0 2
24029: PPUSH
24030: CALL_OW 318
24034: IFFALSE 24045
// ComWalk ( un ) ;
24036: LD_VAR 0 2
24040: PPUSH
24041: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24045: LD_VAR 0 2
24049: PPUSH
24050: LD_INT 5
24052: PPUSH
24053: CALL_OW 336
// end ;
24057: PPOPN 3
24059: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24060: LD_EXP 36
24064: PUSH
24065: LD_EXP 54
24069: AND
24070: PUSH
24071: LD_OWVAR 67
24075: PUSH
24076: LD_INT 4
24078: LESS
24079: AND
24080: IFFALSE 24099
24082: GO 24084
24084: DISABLE
// begin Difficulty := Difficulty + 1 ;
24085: LD_ADDR_OWVAR 67
24089: PUSH
24090: LD_OWVAR 67
24094: PUSH
24095: LD_INT 1
24097: PLUS
24098: ST_TO_ADDR
// end ;
24099: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24100: LD_EXP 36
24104: PUSH
24105: LD_EXP 55
24109: AND
24110: IFFALSE 24213
24112: GO 24114
24114: DISABLE
24115: LD_INT 0
24117: PPUSH
// begin for i := 1 to 5 do
24118: LD_ADDR_VAR 0 1
24122: PUSH
24123: DOUBLE
24124: LD_INT 1
24126: DEC
24127: ST_TO_ADDR
24128: LD_INT 5
24130: PUSH
24131: FOR_TO
24132: IFFALSE 24211
// begin uc_nation := nation_nature ;
24134: LD_ADDR_OWVAR 21
24138: PUSH
24139: LD_INT 0
24141: ST_TO_ADDR
// uc_side := 0 ;
24142: LD_ADDR_OWVAR 20
24146: PUSH
24147: LD_INT 0
24149: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24150: LD_ADDR_OWVAR 29
24154: PUSH
24155: LD_INT 12
24157: PUSH
24158: LD_INT 12
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: ST_TO_ADDR
// hc_agressivity := 20 ;
24165: LD_ADDR_OWVAR 35
24169: PUSH
24170: LD_INT 20
24172: ST_TO_ADDR
// hc_class := class_tiger ;
24173: LD_ADDR_OWVAR 28
24177: PUSH
24178: LD_INT 14
24180: ST_TO_ADDR
// hc_gallery :=  ;
24181: LD_ADDR_OWVAR 33
24185: PUSH
24186: LD_STRING 
24188: ST_TO_ADDR
// hc_name :=  ;
24189: LD_ADDR_OWVAR 26
24193: PUSH
24194: LD_STRING 
24196: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24197: CALL_OW 44
24201: PPUSH
24202: LD_INT 0
24204: PPUSH
24205: CALL_OW 51
// end ;
24209: GO 24131
24211: POP
24212: POP
// end ;
24213: PPOPN 1
24215: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24216: LD_EXP 36
24220: PUSH
24221: LD_EXP 56
24225: AND
24226: IFFALSE 24235
24228: GO 24230
24230: DISABLE
// StreamSibBomb ;
24231: CALL 24236 0 0
24235: END
// export function StreamSibBomb ; var i , x , y ; begin
24236: LD_INT 0
24238: PPUSH
24239: PPUSH
24240: PPUSH
24241: PPUSH
// result := false ;
24242: LD_ADDR_VAR 0 1
24246: PUSH
24247: LD_INT 0
24249: ST_TO_ADDR
// for i := 1 to 16 do
24250: LD_ADDR_VAR 0 2
24254: PUSH
24255: DOUBLE
24256: LD_INT 1
24258: DEC
24259: ST_TO_ADDR
24260: LD_INT 16
24262: PUSH
24263: FOR_TO
24264: IFFALSE 24463
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24266: LD_ADDR_VAR 0 3
24270: PUSH
24271: LD_INT 10
24273: PUSH
24274: LD_INT 20
24276: PUSH
24277: LD_INT 30
24279: PUSH
24280: LD_INT 40
24282: PUSH
24283: LD_INT 50
24285: PUSH
24286: LD_INT 60
24288: PUSH
24289: LD_INT 70
24291: PUSH
24292: LD_INT 80
24294: PUSH
24295: LD_INT 90
24297: PUSH
24298: LD_INT 100
24300: PUSH
24301: LD_INT 110
24303: PUSH
24304: LD_INT 120
24306: PUSH
24307: LD_INT 130
24309: PUSH
24310: LD_INT 140
24312: PUSH
24313: LD_INT 150
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 1
24335: PPUSH
24336: LD_INT 15
24338: PPUSH
24339: CALL_OW 12
24343: ARRAY
24344: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24345: LD_ADDR_VAR 0 4
24349: PUSH
24350: LD_INT 10
24352: PUSH
24353: LD_INT 20
24355: PUSH
24356: LD_INT 30
24358: PUSH
24359: LD_INT 40
24361: PUSH
24362: LD_INT 50
24364: PUSH
24365: LD_INT 60
24367: PUSH
24368: LD_INT 70
24370: PUSH
24371: LD_INT 80
24373: PUSH
24374: LD_INT 90
24376: PUSH
24377: LD_INT 100
24379: PUSH
24380: LD_INT 110
24382: PUSH
24383: LD_INT 120
24385: PUSH
24386: LD_INT 130
24388: PUSH
24389: LD_INT 140
24391: PUSH
24392: LD_INT 150
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 1
24414: PPUSH
24415: LD_INT 15
24417: PPUSH
24418: CALL_OW 12
24422: ARRAY
24423: ST_TO_ADDR
// if ValidHex ( x , y ) then
24424: LD_VAR 0 3
24428: PPUSH
24429: LD_VAR 0 4
24433: PPUSH
24434: CALL_OW 488
24438: IFFALSE 24461
// begin result := [ x , y ] ;
24440: LD_ADDR_VAR 0 1
24444: PUSH
24445: LD_VAR 0 3
24449: PUSH
24450: LD_VAR 0 4
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: ST_TO_ADDR
// break ;
24459: GO 24463
// end ; end ;
24461: GO 24263
24463: POP
24464: POP
// if result then
24465: LD_VAR 0 1
24469: IFFALSE 24529
// begin ToLua ( playSibBomb() ) ;
24471: LD_STRING playSibBomb()
24473: PPUSH
24474: CALL_OW 559
// wait ( 0 0$14 ) ;
24478: LD_INT 490
24480: PPUSH
24481: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24485: LD_VAR 0 1
24489: PUSH
24490: LD_INT 1
24492: ARRAY
24493: PPUSH
24494: LD_VAR 0 1
24498: PUSH
24499: LD_INT 2
24501: ARRAY
24502: PPUSH
24503: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24507: LD_VAR 0 1
24511: PUSH
24512: LD_INT 1
24514: ARRAY
24515: PPUSH
24516: LD_VAR 0 1
24520: PUSH
24521: LD_INT 2
24523: ARRAY
24524: PPUSH
24525: CALL_OW 429
// end ; end ;
24529: LD_VAR 0 1
24533: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24534: LD_EXP 36
24538: PUSH
24539: LD_EXP 58
24543: AND
24544: IFFALSE 24556
24546: GO 24548
24548: DISABLE
// YouLost (  ) ;
24549: LD_STRING 
24551: PPUSH
24552: CALL_OW 104
24556: END
// every 0 0$1 trigger StreamModeActive and sFog do
24557: LD_EXP 36
24561: PUSH
24562: LD_EXP 57
24566: AND
24567: IFFALSE 24581
24569: GO 24571
24571: DISABLE
// FogOff ( your_side ) ;
24572: LD_OWVAR 2
24576: PPUSH
24577: CALL_OW 344
24581: END
// every 0 0$1 trigger StreamModeActive and sSun do
24582: LD_EXP 36
24586: PUSH
24587: LD_EXP 59
24591: AND
24592: IFFALSE 24620
24594: GO 24596
24596: DISABLE
// begin solar_recharge_percent := 0 ;
24597: LD_ADDR_OWVAR 79
24601: PUSH
24602: LD_INT 0
24604: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24605: LD_INT 10500
24607: PPUSH
24608: CALL_OW 67
// solar_recharge_percent := 100 ;
24612: LD_ADDR_OWVAR 79
24616: PUSH
24617: LD_INT 100
24619: ST_TO_ADDR
// end ;
24620: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24621: LD_EXP 36
24625: PUSH
24626: LD_EXP 60
24630: AND
24631: IFFALSE 24870
24633: GO 24635
24635: DISABLE
24636: LD_INT 0
24638: PPUSH
24639: PPUSH
24640: PPUSH
// begin tmp := [ ] ;
24641: LD_ADDR_VAR 0 3
24645: PUSH
24646: EMPTY
24647: ST_TO_ADDR
// for i := 1 to 6 do
24648: LD_ADDR_VAR 0 1
24652: PUSH
24653: DOUBLE
24654: LD_INT 1
24656: DEC
24657: ST_TO_ADDR
24658: LD_INT 6
24660: PUSH
24661: FOR_TO
24662: IFFALSE 24767
// begin uc_nation := nation_nature ;
24664: LD_ADDR_OWVAR 21
24668: PUSH
24669: LD_INT 0
24671: ST_TO_ADDR
// uc_side := 0 ;
24672: LD_ADDR_OWVAR 20
24676: PUSH
24677: LD_INT 0
24679: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24680: LD_ADDR_OWVAR 29
24684: PUSH
24685: LD_INT 12
24687: PUSH
24688: LD_INT 12
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: ST_TO_ADDR
// hc_agressivity := 20 ;
24695: LD_ADDR_OWVAR 35
24699: PUSH
24700: LD_INT 20
24702: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24703: LD_ADDR_OWVAR 28
24707: PUSH
24708: LD_INT 17
24710: ST_TO_ADDR
// hc_gallery :=  ;
24711: LD_ADDR_OWVAR 33
24715: PUSH
24716: LD_STRING 
24718: ST_TO_ADDR
// hc_name :=  ;
24719: LD_ADDR_OWVAR 26
24723: PUSH
24724: LD_STRING 
24726: ST_TO_ADDR
// un := CreateHuman ;
24727: LD_ADDR_VAR 0 2
24731: PUSH
24732: CALL_OW 44
24736: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24737: LD_VAR 0 2
24741: PPUSH
24742: LD_INT 1
24744: PPUSH
24745: CALL_OW 51
// tmp := tmp ^ un ;
24749: LD_ADDR_VAR 0 3
24753: PUSH
24754: LD_VAR 0 3
24758: PUSH
24759: LD_VAR 0 2
24763: ADD
24764: ST_TO_ADDR
// end ;
24765: GO 24661
24767: POP
24768: POP
// repeat wait ( 0 0$1 ) ;
24769: LD_INT 35
24771: PPUSH
24772: CALL_OW 67
// for un in tmp do
24776: LD_ADDR_VAR 0 2
24780: PUSH
24781: LD_VAR 0 3
24785: PUSH
24786: FOR_IN
24787: IFFALSE 24861
// begin if IsDead ( un ) then
24789: LD_VAR 0 2
24793: PPUSH
24794: CALL_OW 301
24798: IFFALSE 24818
// begin tmp := tmp diff un ;
24800: LD_ADDR_VAR 0 3
24804: PUSH
24805: LD_VAR 0 3
24809: PUSH
24810: LD_VAR 0 2
24814: DIFF
24815: ST_TO_ADDR
// continue ;
24816: GO 24786
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24818: LD_VAR 0 2
24822: PPUSH
24823: LD_INT 3
24825: PUSH
24826: LD_INT 22
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PPUSH
24840: CALL_OW 69
24844: PPUSH
24845: LD_VAR 0 2
24849: PPUSH
24850: CALL_OW 74
24854: PPUSH
24855: CALL_OW 115
// end ;
24859: GO 24786
24861: POP
24862: POP
// until not tmp ;
24863: LD_VAR 0 3
24867: NOT
24868: IFFALSE 24769
// end ;
24870: PPOPN 3
24872: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24873: LD_EXP 36
24877: PUSH
24878: LD_EXP 61
24882: AND
24883: IFFALSE 24937
24885: GO 24887
24887: DISABLE
// begin ToLua ( displayTroll(); ) ;
24888: LD_STRING displayTroll();
24890: PPUSH
24891: CALL_OW 559
// wait ( 3 3$00 ) ;
24895: LD_INT 6300
24897: PPUSH
24898: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24902: LD_STRING hideTroll();
24904: PPUSH
24905: CALL_OW 559
// wait ( 1 1$00 ) ;
24909: LD_INT 2100
24911: PPUSH
24912: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24916: LD_STRING displayTroll();
24918: PPUSH
24919: CALL_OW 559
// wait ( 1 1$00 ) ;
24923: LD_INT 2100
24925: PPUSH
24926: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24930: LD_STRING hideTroll();
24932: PPUSH
24933: CALL_OW 559
// end ;
24937: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24938: LD_EXP 36
24942: PUSH
24943: LD_EXP 62
24947: AND
24948: IFFALSE 25011
24950: GO 24952
24952: DISABLE
24953: LD_INT 0
24955: PPUSH
// begin p := 0 ;
24956: LD_ADDR_VAR 0 1
24960: PUSH
24961: LD_INT 0
24963: ST_TO_ADDR
// repeat game_speed := 1 ;
24964: LD_ADDR_OWVAR 65
24968: PUSH
24969: LD_INT 1
24971: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24972: LD_INT 35
24974: PPUSH
24975: CALL_OW 67
// p := p + 1 ;
24979: LD_ADDR_VAR 0 1
24983: PUSH
24984: LD_VAR 0 1
24988: PUSH
24989: LD_INT 1
24991: PLUS
24992: ST_TO_ADDR
// until p >= 60 ;
24993: LD_VAR 0 1
24997: PUSH
24998: LD_INT 60
25000: GREATEREQUAL
25001: IFFALSE 24964
// game_speed := 4 ;
25003: LD_ADDR_OWVAR 65
25007: PUSH
25008: LD_INT 4
25010: ST_TO_ADDR
// end ;
25011: PPOPN 1
25013: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25014: LD_EXP 36
25018: PUSH
25019: LD_EXP 63
25023: AND
25024: IFFALSE 25170
25026: GO 25028
25028: DISABLE
25029: LD_INT 0
25031: PPUSH
25032: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25033: LD_ADDR_VAR 0 1
25037: PUSH
25038: LD_INT 22
25040: PUSH
25041: LD_OWVAR 2
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 2
25052: PUSH
25053: LD_INT 30
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 30
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: LIST
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PPUSH
25082: CALL_OW 69
25086: ST_TO_ADDR
// if not depot then
25087: LD_VAR 0 1
25091: NOT
25092: IFFALSE 25096
// exit ;
25094: GO 25170
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25096: LD_ADDR_VAR 0 2
25100: PUSH
25101: LD_VAR 0 1
25105: PUSH
25106: LD_INT 1
25108: PPUSH
25109: LD_VAR 0 1
25113: PPUSH
25114: CALL_OW 12
25118: ARRAY
25119: PPUSH
25120: CALL_OW 274
25124: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25125: LD_VAR 0 2
25129: PPUSH
25130: LD_INT 1
25132: PPUSH
25133: LD_INT 0
25135: PPUSH
25136: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25140: LD_VAR 0 2
25144: PPUSH
25145: LD_INT 2
25147: PPUSH
25148: LD_INT 0
25150: PPUSH
25151: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25155: LD_VAR 0 2
25159: PPUSH
25160: LD_INT 3
25162: PPUSH
25163: LD_INT 0
25165: PPUSH
25166: CALL_OW 277
// end ;
25170: PPOPN 2
25172: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25173: LD_EXP 36
25177: PUSH
25178: LD_EXP 64
25182: AND
25183: IFFALSE 25280
25185: GO 25187
25187: DISABLE
25188: LD_INT 0
25190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25191: LD_ADDR_VAR 0 1
25195: PUSH
25196: LD_INT 22
25198: PUSH
25199: LD_OWVAR 2
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 21
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 3
25220: PUSH
25221: LD_INT 23
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: PPUSH
25240: CALL_OW 69
25244: ST_TO_ADDR
// if not tmp then
25245: LD_VAR 0 1
25249: NOT
25250: IFFALSE 25254
// exit ;
25252: GO 25280
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25254: LD_VAR 0 1
25258: PUSH
25259: LD_INT 1
25261: PPUSH
25262: LD_VAR 0 1
25266: PPUSH
25267: CALL_OW 12
25271: ARRAY
25272: PPUSH
25273: LD_INT 200
25275: PPUSH
25276: CALL_OW 234
// end ;
25280: PPOPN 1
25282: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25283: LD_EXP 36
25287: PUSH
25288: LD_EXP 65
25292: AND
25293: IFFALSE 25372
25295: GO 25297
25297: DISABLE
25298: LD_INT 0
25300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25301: LD_ADDR_VAR 0 1
25305: PUSH
25306: LD_INT 22
25308: PUSH
25309: LD_OWVAR 2
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 21
25320: PUSH
25321: LD_INT 2
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PPUSH
25332: CALL_OW 69
25336: ST_TO_ADDR
// if not tmp then
25337: LD_VAR 0 1
25341: NOT
25342: IFFALSE 25346
// exit ;
25344: GO 25372
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25346: LD_VAR 0 1
25350: PUSH
25351: LD_INT 1
25353: PPUSH
25354: LD_VAR 0 1
25358: PPUSH
25359: CALL_OW 12
25363: ARRAY
25364: PPUSH
25365: LD_INT 60
25367: PPUSH
25368: CALL_OW 234
// end ;
25372: PPOPN 1
25374: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25375: LD_EXP 36
25379: PUSH
25380: LD_EXP 66
25384: AND
25385: IFFALSE 25484
25387: GO 25389
25389: DISABLE
25390: LD_INT 0
25392: PPUSH
25393: PPUSH
// begin enable ;
25394: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25395: LD_ADDR_VAR 0 1
25399: PUSH
25400: LD_INT 22
25402: PUSH
25403: LD_OWVAR 2
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 61
25414: PUSH
25415: EMPTY
25416: LIST
25417: PUSH
25418: LD_INT 33
25420: PUSH
25421: LD_INT 2
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: LIST
25432: PPUSH
25433: CALL_OW 69
25437: ST_TO_ADDR
// if not tmp then
25438: LD_VAR 0 1
25442: NOT
25443: IFFALSE 25447
// exit ;
25445: GO 25484
// for i in tmp do
25447: LD_ADDR_VAR 0 2
25451: PUSH
25452: LD_VAR 0 1
25456: PUSH
25457: FOR_IN
25458: IFFALSE 25482
// if IsControledBy ( i ) then
25460: LD_VAR 0 2
25464: PPUSH
25465: CALL_OW 312
25469: IFFALSE 25480
// ComUnlink ( i ) ;
25471: LD_VAR 0 2
25475: PPUSH
25476: CALL_OW 136
25480: GO 25457
25482: POP
25483: POP
// end ;
25484: PPOPN 2
25486: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25487: LD_EXP 36
25491: PUSH
25492: LD_EXP 67
25496: AND
25497: IFFALSE 25637
25499: GO 25501
25501: DISABLE
25502: LD_INT 0
25504: PPUSH
25505: PPUSH
// begin ToLua ( displayPowell(); ) ;
25506: LD_STRING displayPowell();
25508: PPUSH
25509: CALL_OW 559
// uc_side := 0 ;
25513: LD_ADDR_OWVAR 20
25517: PUSH
25518: LD_INT 0
25520: ST_TO_ADDR
// uc_nation := 2 ;
25521: LD_ADDR_OWVAR 21
25525: PUSH
25526: LD_INT 2
25528: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25529: LD_ADDR_OWVAR 37
25533: PUSH
25534: LD_INT 14
25536: ST_TO_ADDR
// vc_engine := engine_siberite ;
25537: LD_ADDR_OWVAR 39
25541: PUSH
25542: LD_INT 3
25544: ST_TO_ADDR
// vc_control := control_apeman ;
25545: LD_ADDR_OWVAR 38
25549: PUSH
25550: LD_INT 5
25552: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25553: LD_ADDR_OWVAR 40
25557: PUSH
25558: LD_INT 29
25560: ST_TO_ADDR
// un := CreateVehicle ;
25561: LD_ADDR_VAR 0 2
25565: PUSH
25566: CALL_OW 45
25570: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25571: LD_VAR 0 2
25575: PPUSH
25576: LD_INT 1
25578: PPUSH
25579: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25583: LD_INT 35
25585: PPUSH
25586: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25590: LD_VAR 0 2
25594: PPUSH
25595: LD_INT 22
25597: PUSH
25598: LD_OWVAR 2
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PPUSH
25607: CALL_OW 69
25611: PPUSH
25612: LD_VAR 0 2
25616: PPUSH
25617: CALL_OW 74
25621: PPUSH
25622: CALL_OW 115
// until IsDead ( un ) ;
25626: LD_VAR 0 2
25630: PPUSH
25631: CALL_OW 301
25635: IFFALSE 25583
// end ;
25637: PPOPN 2
25639: END
// every 0 0$1 trigger StreamModeActive and sStu do
25640: LD_EXP 36
25644: PUSH
25645: LD_EXP 75
25649: AND
25650: IFFALSE 25666
25652: GO 25654
25654: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25655: LD_STRING displayStucuk();
25657: PPUSH
25658: CALL_OW 559
// ResetFog ;
25662: CALL_OW 335
// end ;
25666: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25667: LD_EXP 36
25671: PUSH
25672: LD_EXP 68
25676: AND
25677: IFFALSE 25818
25679: GO 25681
25681: DISABLE
25682: LD_INT 0
25684: PPUSH
25685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25686: LD_ADDR_VAR 0 2
25690: PUSH
25691: LD_INT 22
25693: PUSH
25694: LD_OWVAR 2
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 21
25705: PUSH
25706: LD_INT 1
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PPUSH
25717: CALL_OW 69
25721: ST_TO_ADDR
// if not tmp then
25722: LD_VAR 0 2
25726: NOT
25727: IFFALSE 25731
// exit ;
25729: GO 25818
// un := tmp [ rand ( 1 , tmp ) ] ;
25731: LD_ADDR_VAR 0 1
25735: PUSH
25736: LD_VAR 0 2
25740: PUSH
25741: LD_INT 1
25743: PPUSH
25744: LD_VAR 0 2
25748: PPUSH
25749: CALL_OW 12
25753: ARRAY
25754: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25755: LD_VAR 0 1
25759: PPUSH
25760: LD_INT 0
25762: PPUSH
25763: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25767: LD_VAR 0 1
25771: PPUSH
25772: LD_OWVAR 3
25776: PUSH
25777: LD_VAR 0 1
25781: DIFF
25782: PPUSH
25783: LD_VAR 0 1
25787: PPUSH
25788: CALL_OW 74
25792: PPUSH
25793: CALL_OW 115
// wait ( 0 0$20 ) ;
25797: LD_INT 700
25799: PPUSH
25800: CALL_OW 67
// SetSide ( un , your_side ) ;
25804: LD_VAR 0 1
25808: PPUSH
25809: LD_OWVAR 2
25813: PPUSH
25814: CALL_OW 235
// end ;
25818: PPOPN 2
25820: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25821: LD_EXP 36
25825: PUSH
25826: LD_EXP 69
25830: AND
25831: IFFALSE 25937
25833: GO 25835
25835: DISABLE
25836: LD_INT 0
25838: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25839: LD_ADDR_VAR 0 1
25843: PUSH
25844: LD_INT 22
25846: PUSH
25847: LD_OWVAR 2
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 2
25858: PUSH
25859: LD_INT 30
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 30
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PPUSH
25888: CALL_OW 69
25892: ST_TO_ADDR
// if not depot then
25893: LD_VAR 0 1
25897: NOT
25898: IFFALSE 25902
// exit ;
25900: GO 25937
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25902: LD_VAR 0 1
25906: PUSH
25907: LD_INT 1
25909: ARRAY
25910: PPUSH
25911: CALL_OW 250
25915: PPUSH
25916: LD_VAR 0 1
25920: PUSH
25921: LD_INT 1
25923: ARRAY
25924: PPUSH
25925: CALL_OW 251
25929: PPUSH
25930: LD_INT 70
25932: PPUSH
25933: CALL_OW 495
// end ;
25937: PPOPN 1
25939: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25940: LD_EXP 36
25944: PUSH
25945: LD_EXP 70
25949: AND
25950: IFFALSE 26161
25952: GO 25954
25954: DISABLE
25955: LD_INT 0
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25962: LD_ADDR_VAR 0 5
25966: PUSH
25967: LD_INT 22
25969: PUSH
25970: LD_OWVAR 2
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 21
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PPUSH
25993: CALL_OW 69
25997: ST_TO_ADDR
// if not tmp then
25998: LD_VAR 0 5
26002: NOT
26003: IFFALSE 26007
// exit ;
26005: GO 26161
// for i in tmp do
26007: LD_ADDR_VAR 0 1
26011: PUSH
26012: LD_VAR 0 5
26016: PUSH
26017: FOR_IN
26018: IFFALSE 26159
// begin d := rand ( 0 , 5 ) ;
26020: LD_ADDR_VAR 0 4
26024: PUSH
26025: LD_INT 0
26027: PPUSH
26028: LD_INT 5
26030: PPUSH
26031: CALL_OW 12
26035: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26036: LD_ADDR_VAR 0 2
26040: PUSH
26041: LD_VAR 0 1
26045: PPUSH
26046: CALL_OW 250
26050: PPUSH
26051: LD_VAR 0 4
26055: PPUSH
26056: LD_INT 3
26058: PPUSH
26059: LD_INT 12
26061: PPUSH
26062: CALL_OW 12
26066: PPUSH
26067: CALL_OW 272
26071: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26072: LD_ADDR_VAR 0 3
26076: PUSH
26077: LD_VAR 0 1
26081: PPUSH
26082: CALL_OW 251
26086: PPUSH
26087: LD_VAR 0 4
26091: PPUSH
26092: LD_INT 3
26094: PPUSH
26095: LD_INT 12
26097: PPUSH
26098: CALL_OW 12
26102: PPUSH
26103: CALL_OW 273
26107: ST_TO_ADDR
// if ValidHex ( x , y ) then
26108: LD_VAR 0 2
26112: PPUSH
26113: LD_VAR 0 3
26117: PPUSH
26118: CALL_OW 488
26122: IFFALSE 26157
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26124: LD_VAR 0 1
26128: PPUSH
26129: LD_VAR 0 2
26133: PPUSH
26134: LD_VAR 0 3
26138: PPUSH
26139: LD_INT 3
26141: PPUSH
26142: LD_INT 6
26144: PPUSH
26145: CALL_OW 12
26149: PPUSH
26150: LD_INT 1
26152: PPUSH
26153: CALL_OW 483
// end ;
26157: GO 26017
26159: POP
26160: POP
// end ;
26161: PPOPN 5
26163: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26164: LD_EXP 36
26168: PUSH
26169: LD_EXP 71
26173: AND
26174: IFFALSE 26268
26176: GO 26178
26178: DISABLE
26179: LD_INT 0
26181: PPUSH
26182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26183: LD_ADDR_VAR 0 2
26187: PUSH
26188: LD_INT 22
26190: PUSH
26191: LD_OWVAR 2
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 32
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 21
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: LIST
26224: PPUSH
26225: CALL_OW 69
26229: ST_TO_ADDR
// if not tmp then
26230: LD_VAR 0 2
26234: NOT
26235: IFFALSE 26239
// exit ;
26237: GO 26268
// for i in tmp do
26239: LD_ADDR_VAR 0 1
26243: PUSH
26244: LD_VAR 0 2
26248: PUSH
26249: FOR_IN
26250: IFFALSE 26266
// SetFuel ( i , 0 ) ;
26252: LD_VAR 0 1
26256: PPUSH
26257: LD_INT 0
26259: PPUSH
26260: CALL_OW 240
26264: GO 26249
26266: POP
26267: POP
// end ;
26268: PPOPN 2
26270: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26271: LD_EXP 36
26275: PUSH
26276: LD_EXP 72
26280: AND
26281: IFFALSE 26347
26283: GO 26285
26285: DISABLE
26286: LD_INT 0
26288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26289: LD_ADDR_VAR 0 1
26293: PUSH
26294: LD_INT 22
26296: PUSH
26297: LD_OWVAR 2
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 30
26308: PUSH
26309: LD_INT 29
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PPUSH
26320: CALL_OW 69
26324: ST_TO_ADDR
// if not tmp then
26325: LD_VAR 0 1
26329: NOT
26330: IFFALSE 26334
// exit ;
26332: GO 26347
// DestroyUnit ( tmp [ 1 ] ) ;
26334: LD_VAR 0 1
26338: PUSH
26339: LD_INT 1
26341: ARRAY
26342: PPUSH
26343: CALL_OW 65
// end ;
26347: PPOPN 1
26349: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26350: LD_EXP 36
26354: PUSH
26355: LD_EXP 74
26359: AND
26360: IFFALSE 26489
26362: GO 26364
26364: DISABLE
26365: LD_INT 0
26367: PPUSH
// begin uc_side := 0 ;
26368: LD_ADDR_OWVAR 20
26372: PUSH
26373: LD_INT 0
26375: ST_TO_ADDR
// uc_nation := nation_arabian ;
26376: LD_ADDR_OWVAR 21
26380: PUSH
26381: LD_INT 2
26383: ST_TO_ADDR
// hc_gallery :=  ;
26384: LD_ADDR_OWVAR 33
26388: PUSH
26389: LD_STRING 
26391: ST_TO_ADDR
// hc_name :=  ;
26392: LD_ADDR_OWVAR 26
26396: PUSH
26397: LD_STRING 
26399: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26400: LD_INT 1
26402: PPUSH
26403: LD_INT 11
26405: PPUSH
26406: LD_INT 10
26408: PPUSH
26409: CALL_OW 380
// un := CreateHuman ;
26413: LD_ADDR_VAR 0 1
26417: PUSH
26418: CALL_OW 44
26422: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26423: LD_VAR 0 1
26427: PPUSH
26428: LD_INT 1
26430: PPUSH
26431: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26435: LD_INT 35
26437: PPUSH
26438: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26442: LD_VAR 0 1
26446: PPUSH
26447: LD_INT 22
26449: PUSH
26450: LD_OWVAR 2
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PPUSH
26459: CALL_OW 69
26463: PPUSH
26464: LD_VAR 0 1
26468: PPUSH
26469: CALL_OW 74
26473: PPUSH
26474: CALL_OW 115
// until IsDead ( un ) ;
26478: LD_VAR 0 1
26482: PPUSH
26483: CALL_OW 301
26487: IFFALSE 26435
// end ;
26489: PPOPN 1
26491: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26492: LD_EXP 36
26496: PUSH
26497: LD_EXP 76
26501: AND
26502: IFFALSE 26514
26504: GO 26506
26506: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26507: LD_STRING earthquake(getX(game), 0, 32)
26509: PPUSH
26510: CALL_OW 559
26514: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26515: LD_EXP 36
26519: PUSH
26520: LD_EXP 77
26524: AND
26525: IFFALSE 26616
26527: GO 26529
26529: DISABLE
26530: LD_INT 0
26532: PPUSH
// begin enable ;
26533: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26534: LD_ADDR_VAR 0 1
26538: PUSH
26539: LD_INT 22
26541: PUSH
26542: LD_OWVAR 2
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 21
26553: PUSH
26554: LD_INT 2
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 33
26563: PUSH
26564: LD_INT 3
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: PPUSH
26576: CALL_OW 69
26580: ST_TO_ADDR
// if not tmp then
26581: LD_VAR 0 1
26585: NOT
26586: IFFALSE 26590
// exit ;
26588: GO 26616
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26590: LD_VAR 0 1
26594: PUSH
26595: LD_INT 1
26597: PPUSH
26598: LD_VAR 0 1
26602: PPUSH
26603: CALL_OW 12
26607: ARRAY
26608: PPUSH
26609: LD_INT 1
26611: PPUSH
26612: CALL_OW 234
// end ;
26616: PPOPN 1
26618: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26619: LD_EXP 36
26623: PUSH
26624: LD_EXP 78
26628: AND
26629: IFFALSE 26770
26631: GO 26633
26633: DISABLE
26634: LD_INT 0
26636: PPUSH
26637: PPUSH
26638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26639: LD_ADDR_VAR 0 3
26643: PUSH
26644: LD_INT 22
26646: PUSH
26647: LD_OWVAR 2
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 25
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PPUSH
26670: CALL_OW 69
26674: ST_TO_ADDR
// if not tmp then
26675: LD_VAR 0 3
26679: NOT
26680: IFFALSE 26684
// exit ;
26682: GO 26770
// un := tmp [ rand ( 1 , tmp ) ] ;
26684: LD_ADDR_VAR 0 2
26688: PUSH
26689: LD_VAR 0 3
26693: PUSH
26694: LD_INT 1
26696: PPUSH
26697: LD_VAR 0 3
26701: PPUSH
26702: CALL_OW 12
26706: ARRAY
26707: ST_TO_ADDR
// if Crawls ( un ) then
26708: LD_VAR 0 2
26712: PPUSH
26713: CALL_OW 318
26717: IFFALSE 26728
// ComWalk ( un ) ;
26719: LD_VAR 0 2
26723: PPUSH
26724: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26728: LD_VAR 0 2
26732: PPUSH
26733: LD_INT 9
26735: PPUSH
26736: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26740: LD_INT 28
26742: PPUSH
26743: LD_OWVAR 2
26747: PPUSH
26748: LD_INT 2
26750: PPUSH
26751: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26755: LD_INT 29
26757: PPUSH
26758: LD_OWVAR 2
26762: PPUSH
26763: LD_INT 2
26765: PPUSH
26766: CALL_OW 322
// end ;
26770: PPOPN 3
26772: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26773: LD_EXP 36
26777: PUSH
26778: LD_EXP 79
26782: AND
26783: IFFALSE 26894
26785: GO 26787
26787: DISABLE
26788: LD_INT 0
26790: PPUSH
26791: PPUSH
26792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26793: LD_ADDR_VAR 0 3
26797: PUSH
26798: LD_INT 22
26800: PUSH
26801: LD_OWVAR 2
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 25
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PPUSH
26824: CALL_OW 69
26828: ST_TO_ADDR
// if not tmp then
26829: LD_VAR 0 3
26833: NOT
26834: IFFALSE 26838
// exit ;
26836: GO 26894
// un := tmp [ rand ( 1 , tmp ) ] ;
26838: LD_ADDR_VAR 0 2
26842: PUSH
26843: LD_VAR 0 3
26847: PUSH
26848: LD_INT 1
26850: PPUSH
26851: LD_VAR 0 3
26855: PPUSH
26856: CALL_OW 12
26860: ARRAY
26861: ST_TO_ADDR
// if Crawls ( un ) then
26862: LD_VAR 0 2
26866: PPUSH
26867: CALL_OW 318
26871: IFFALSE 26882
// ComWalk ( un ) ;
26873: LD_VAR 0 2
26877: PPUSH
26878: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26882: LD_VAR 0 2
26886: PPUSH
26887: LD_INT 8
26889: PPUSH
26890: CALL_OW 336
// end ;
26894: PPOPN 3
26896: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26897: LD_EXP 36
26901: PUSH
26902: LD_EXP 80
26906: AND
26907: IFFALSE 27051
26909: GO 26911
26911: DISABLE
26912: LD_INT 0
26914: PPUSH
26915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26916: LD_ADDR_VAR 0 2
26920: PUSH
26921: LD_INT 22
26923: PUSH
26924: LD_OWVAR 2
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 21
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 2
26945: PUSH
26946: LD_INT 34
26948: PUSH
26949: LD_INT 12
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 34
26958: PUSH
26959: LD_INT 51
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 34
26968: PUSH
26969: LD_INT 32
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: PPUSH
26987: CALL_OW 69
26991: ST_TO_ADDR
// if not tmp then
26992: LD_VAR 0 2
26996: NOT
26997: IFFALSE 27001
// exit ;
26999: GO 27051
// for i in tmp do
27001: LD_ADDR_VAR 0 1
27005: PUSH
27006: LD_VAR 0 2
27010: PUSH
27011: FOR_IN
27012: IFFALSE 27049
// if GetCargo ( i , mat_artifact ) = 0 then
27014: LD_VAR 0 1
27018: PPUSH
27019: LD_INT 4
27021: PPUSH
27022: CALL_OW 289
27026: PUSH
27027: LD_INT 0
27029: EQUAL
27030: IFFALSE 27047
// SetCargo ( i , mat_siberit , 100 ) ;
27032: LD_VAR 0 1
27036: PPUSH
27037: LD_INT 3
27039: PPUSH
27040: LD_INT 100
27042: PPUSH
27043: CALL_OW 290
27047: GO 27011
27049: POP
27050: POP
// end ;
27051: PPOPN 2
27053: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27054: LD_EXP 36
27058: PUSH
27059: LD_EXP 81
27063: AND
27064: IFFALSE 27247
27066: GO 27068
27068: DISABLE
27069: LD_INT 0
27071: PPUSH
27072: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27073: LD_ADDR_VAR 0 2
27077: PUSH
27078: LD_INT 22
27080: PUSH
27081: LD_OWVAR 2
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PPUSH
27090: CALL_OW 69
27094: ST_TO_ADDR
// if not tmp then
27095: LD_VAR 0 2
27099: NOT
27100: IFFALSE 27104
// exit ;
27102: GO 27247
// for i := 1 to 2 do
27104: LD_ADDR_VAR 0 1
27108: PUSH
27109: DOUBLE
27110: LD_INT 1
27112: DEC
27113: ST_TO_ADDR
27114: LD_INT 2
27116: PUSH
27117: FOR_TO
27118: IFFALSE 27245
// begin uc_side := your_side ;
27120: LD_ADDR_OWVAR 20
27124: PUSH
27125: LD_OWVAR 2
27129: ST_TO_ADDR
// uc_nation := nation_american ;
27130: LD_ADDR_OWVAR 21
27134: PUSH
27135: LD_INT 1
27137: ST_TO_ADDR
// vc_chassis := us_morphling ;
27138: LD_ADDR_OWVAR 37
27142: PUSH
27143: LD_INT 5
27145: ST_TO_ADDR
// vc_engine := engine_siberite ;
27146: LD_ADDR_OWVAR 39
27150: PUSH
27151: LD_INT 3
27153: ST_TO_ADDR
// vc_control := control_computer ;
27154: LD_ADDR_OWVAR 38
27158: PUSH
27159: LD_INT 3
27161: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27162: LD_ADDR_OWVAR 40
27166: PUSH
27167: LD_INT 10
27169: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27170: LD_VAR 0 2
27174: PUSH
27175: LD_INT 1
27177: ARRAY
27178: PPUSH
27179: CALL_OW 310
27183: NOT
27184: IFFALSE 27231
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27186: CALL_OW 45
27190: PPUSH
27191: LD_VAR 0 2
27195: PUSH
27196: LD_INT 1
27198: ARRAY
27199: PPUSH
27200: CALL_OW 250
27204: PPUSH
27205: LD_VAR 0 2
27209: PUSH
27210: LD_INT 1
27212: ARRAY
27213: PPUSH
27214: CALL_OW 251
27218: PPUSH
27219: LD_INT 12
27221: PPUSH
27222: LD_INT 1
27224: PPUSH
27225: CALL_OW 50
27229: GO 27243
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27231: CALL_OW 45
27235: PPUSH
27236: LD_INT 1
27238: PPUSH
27239: CALL_OW 51
// end ;
27243: GO 27117
27245: POP
27246: POP
// end ;
27247: PPOPN 2
27249: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27250: LD_EXP 36
27254: PUSH
27255: LD_EXP 82
27259: AND
27260: IFFALSE 27482
27262: GO 27264
27264: DISABLE
27265: LD_INT 0
27267: PPUSH
27268: PPUSH
27269: PPUSH
27270: PPUSH
27271: PPUSH
27272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27273: LD_ADDR_VAR 0 6
27277: PUSH
27278: LD_INT 22
27280: PUSH
27281: LD_OWVAR 2
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 21
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 3
27302: PUSH
27303: LD_INT 23
27305: PUSH
27306: LD_INT 0
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: PPUSH
27322: CALL_OW 69
27326: ST_TO_ADDR
// if not tmp then
27327: LD_VAR 0 6
27331: NOT
27332: IFFALSE 27336
// exit ;
27334: GO 27482
// s1 := rand ( 1 , 4 ) ;
27336: LD_ADDR_VAR 0 2
27340: PUSH
27341: LD_INT 1
27343: PPUSH
27344: LD_INT 4
27346: PPUSH
27347: CALL_OW 12
27351: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27352: LD_ADDR_VAR 0 4
27356: PUSH
27357: LD_VAR 0 6
27361: PUSH
27362: LD_INT 1
27364: ARRAY
27365: PPUSH
27366: LD_VAR 0 2
27370: PPUSH
27371: CALL_OW 259
27375: ST_TO_ADDR
// if s1 = 1 then
27376: LD_VAR 0 2
27380: PUSH
27381: LD_INT 1
27383: EQUAL
27384: IFFALSE 27404
// s2 := rand ( 2 , 4 ) else
27386: LD_ADDR_VAR 0 3
27390: PUSH
27391: LD_INT 2
27393: PPUSH
27394: LD_INT 4
27396: PPUSH
27397: CALL_OW 12
27401: ST_TO_ADDR
27402: GO 27412
// s2 := 1 ;
27404: LD_ADDR_VAR 0 3
27408: PUSH
27409: LD_INT 1
27411: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27412: LD_ADDR_VAR 0 5
27416: PUSH
27417: LD_VAR 0 6
27421: PUSH
27422: LD_INT 1
27424: ARRAY
27425: PPUSH
27426: LD_VAR 0 3
27430: PPUSH
27431: CALL_OW 259
27435: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27436: LD_VAR 0 6
27440: PUSH
27441: LD_INT 1
27443: ARRAY
27444: PPUSH
27445: LD_VAR 0 2
27449: PPUSH
27450: LD_VAR 0 5
27454: PPUSH
27455: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27459: LD_VAR 0 6
27463: PUSH
27464: LD_INT 1
27466: ARRAY
27467: PPUSH
27468: LD_VAR 0 3
27472: PPUSH
27473: LD_VAR 0 4
27477: PPUSH
27478: CALL_OW 237
// end ;
27482: PPOPN 6
27484: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27485: LD_EXP 36
27489: PUSH
27490: LD_EXP 83
27494: AND
27495: IFFALSE 27574
27497: GO 27499
27499: DISABLE
27500: LD_INT 0
27502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27503: LD_ADDR_VAR 0 1
27507: PUSH
27508: LD_INT 22
27510: PUSH
27511: LD_OWVAR 2
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 30
27522: PUSH
27523: LD_INT 3
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PPUSH
27534: CALL_OW 69
27538: ST_TO_ADDR
// if not tmp then
27539: LD_VAR 0 1
27543: NOT
27544: IFFALSE 27548
// exit ;
27546: GO 27574
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27548: LD_VAR 0 1
27552: PUSH
27553: LD_INT 1
27555: PPUSH
27556: LD_VAR 0 1
27560: PPUSH
27561: CALL_OW 12
27565: ARRAY
27566: PPUSH
27567: LD_INT 1
27569: PPUSH
27570: CALL_OW 234
// end ;
27574: PPOPN 1
27576: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27577: LD_EXP 36
27581: PUSH
27582: LD_EXP 84
27586: AND
27587: IFFALSE 27699
27589: GO 27591
27591: DISABLE
27592: LD_INT 0
27594: PPUSH
27595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27596: LD_ADDR_VAR 0 2
27600: PUSH
27601: LD_INT 22
27603: PUSH
27604: LD_OWVAR 2
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 30
27618: PUSH
27619: LD_INT 27
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 30
27628: PUSH
27629: LD_INT 26
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 30
27638: PUSH
27639: LD_INT 28
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PPUSH
27656: CALL_OW 69
27660: ST_TO_ADDR
// if not tmp then
27661: LD_VAR 0 2
27665: NOT
27666: IFFALSE 27670
// exit ;
27668: GO 27699
// for i in tmp do
27670: LD_ADDR_VAR 0 1
27674: PUSH
27675: LD_VAR 0 2
27679: PUSH
27680: FOR_IN
27681: IFFALSE 27697
// SetLives ( i , 1 ) ;
27683: LD_VAR 0 1
27687: PPUSH
27688: LD_INT 1
27690: PPUSH
27691: CALL_OW 234
27695: GO 27680
27697: POP
27698: POP
// end ;
27699: PPOPN 2
27701: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27702: LD_EXP 36
27706: PUSH
27707: LD_EXP 85
27711: AND
27712: IFFALSE 27999
27714: GO 27716
27716: DISABLE
27717: LD_INT 0
27719: PPUSH
27720: PPUSH
27721: PPUSH
// begin i := rand ( 1 , 7 ) ;
27722: LD_ADDR_VAR 0 1
27726: PUSH
27727: LD_INT 1
27729: PPUSH
27730: LD_INT 7
27732: PPUSH
27733: CALL_OW 12
27737: ST_TO_ADDR
// case i of 1 :
27738: LD_VAR 0 1
27742: PUSH
27743: LD_INT 1
27745: DOUBLE
27746: EQUAL
27747: IFTRUE 27751
27749: GO 27761
27751: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27752: LD_STRING earthquake(getX(game), 0, 32)
27754: PPUSH
27755: CALL_OW 559
27759: GO 27999
27761: LD_INT 2
27763: DOUBLE
27764: EQUAL
27765: IFTRUE 27769
27767: GO 27783
27769: POP
// begin ToLua ( displayStucuk(); ) ;
27770: LD_STRING displayStucuk();
27772: PPUSH
27773: CALL_OW 559
// ResetFog ;
27777: CALL_OW 335
// end ; 3 :
27781: GO 27999
27783: LD_INT 3
27785: DOUBLE
27786: EQUAL
27787: IFTRUE 27791
27789: GO 27895
27791: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27792: LD_ADDR_VAR 0 2
27796: PUSH
27797: LD_INT 22
27799: PUSH
27800: LD_OWVAR 2
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 25
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PPUSH
27823: CALL_OW 69
27827: ST_TO_ADDR
// if not tmp then
27828: LD_VAR 0 2
27832: NOT
27833: IFFALSE 27837
// exit ;
27835: GO 27999
// un := tmp [ rand ( 1 , tmp ) ] ;
27837: LD_ADDR_VAR 0 3
27841: PUSH
27842: LD_VAR 0 2
27846: PUSH
27847: LD_INT 1
27849: PPUSH
27850: LD_VAR 0 2
27854: PPUSH
27855: CALL_OW 12
27859: ARRAY
27860: ST_TO_ADDR
// if Crawls ( un ) then
27861: LD_VAR 0 3
27865: PPUSH
27866: CALL_OW 318
27870: IFFALSE 27881
// ComWalk ( un ) ;
27872: LD_VAR 0 3
27876: PPUSH
27877: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27881: LD_VAR 0 3
27885: PPUSH
27886: LD_INT 8
27888: PPUSH
27889: CALL_OW 336
// end ; 4 :
27893: GO 27999
27895: LD_INT 4
27897: DOUBLE
27898: EQUAL
27899: IFTRUE 27903
27901: GO 27977
27903: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27904: LD_ADDR_VAR 0 2
27908: PUSH
27909: LD_INT 22
27911: PUSH
27912: LD_OWVAR 2
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 30
27923: PUSH
27924: LD_INT 29
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PPUSH
27935: CALL_OW 69
27939: ST_TO_ADDR
// if not tmp then
27940: LD_VAR 0 2
27944: NOT
27945: IFFALSE 27949
// exit ;
27947: GO 27999
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27949: LD_VAR 0 2
27953: PUSH
27954: LD_INT 1
27956: ARRAY
27957: PPUSH
27958: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27962: LD_VAR 0 2
27966: PUSH
27967: LD_INT 1
27969: ARRAY
27970: PPUSH
27971: CALL_OW 65
// end ; 5 .. 7 :
27975: GO 27999
27977: LD_INT 5
27979: DOUBLE
27980: GREATEREQUAL
27981: IFFALSE 27989
27983: LD_INT 7
27985: DOUBLE
27986: LESSEQUAL
27987: IFTRUE 27991
27989: GO 27998
27991: POP
// StreamSibBomb ; end ;
27992: CALL 24236 0 0
27996: GO 27999
27998: POP
// end ;
27999: PPOPN 3
28001: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28002: LD_EXP 36
28006: PUSH
28007: LD_EXP 86
28011: AND
28012: IFFALSE 28168
28014: GO 28016
28016: DISABLE
28017: LD_INT 0
28019: PPUSH
28020: PPUSH
28021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28022: LD_ADDR_VAR 0 2
28026: PUSH
28027: LD_INT 81
28029: PUSH
28030: LD_OWVAR 2
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: LD_INT 21
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 21
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: LIST
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PPUSH
28071: CALL_OW 69
28075: ST_TO_ADDR
// if not tmp then
28076: LD_VAR 0 2
28080: NOT
28081: IFFALSE 28085
// exit ;
28083: GO 28168
// p := 0 ;
28085: LD_ADDR_VAR 0 3
28089: PUSH
28090: LD_INT 0
28092: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28093: LD_INT 35
28095: PPUSH
28096: CALL_OW 67
// p := p + 1 ;
28100: LD_ADDR_VAR 0 3
28104: PUSH
28105: LD_VAR 0 3
28109: PUSH
28110: LD_INT 1
28112: PLUS
28113: ST_TO_ADDR
// for i in tmp do
28114: LD_ADDR_VAR 0 1
28118: PUSH
28119: LD_VAR 0 2
28123: PUSH
28124: FOR_IN
28125: IFFALSE 28156
// if GetLives ( i ) < 1000 then
28127: LD_VAR 0 1
28131: PPUSH
28132: CALL_OW 256
28136: PUSH
28137: LD_INT 1000
28139: LESS
28140: IFFALSE 28154
// SetLives ( i , 1000 ) ;
28142: LD_VAR 0 1
28146: PPUSH
28147: LD_INT 1000
28149: PPUSH
28150: CALL_OW 234
28154: GO 28124
28156: POP
28157: POP
// until p > 20 ;
28158: LD_VAR 0 3
28162: PUSH
28163: LD_INT 20
28165: GREATER
28166: IFFALSE 28093
// end ;
28168: PPOPN 3
28170: END
// every 0 0$1 trigger StreamModeActive and sTime do
28171: LD_EXP 36
28175: PUSH
28176: LD_EXP 87
28180: AND
28181: IFFALSE 28216
28183: GO 28185
28185: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28186: LD_INT 28
28188: PPUSH
28189: LD_OWVAR 2
28193: PPUSH
28194: LD_INT 2
28196: PPUSH
28197: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28201: LD_INT 30
28203: PPUSH
28204: LD_OWVAR 2
28208: PPUSH
28209: LD_INT 2
28211: PPUSH
28212: CALL_OW 322
// end ;
28216: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28217: LD_EXP 36
28221: PUSH
28222: LD_EXP 88
28226: AND
28227: IFFALSE 28348
28229: GO 28231
28231: DISABLE
28232: LD_INT 0
28234: PPUSH
28235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28236: LD_ADDR_VAR 0 2
28240: PUSH
28241: LD_INT 22
28243: PUSH
28244: LD_OWVAR 2
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 21
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 3
28265: PUSH
28266: LD_INT 23
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: PPUSH
28285: CALL_OW 69
28289: ST_TO_ADDR
// if not tmp then
28290: LD_VAR 0 2
28294: NOT
28295: IFFALSE 28299
// exit ;
28297: GO 28348
// for i in tmp do
28299: LD_ADDR_VAR 0 1
28303: PUSH
28304: LD_VAR 0 2
28308: PUSH
28309: FOR_IN
28310: IFFALSE 28346
// begin if Crawls ( i ) then
28312: LD_VAR 0 1
28316: PPUSH
28317: CALL_OW 318
28321: IFFALSE 28332
// ComWalk ( i ) ;
28323: LD_VAR 0 1
28327: PPUSH
28328: CALL_OW 138
// SetClass ( i , 2 ) ;
28332: LD_VAR 0 1
28336: PPUSH
28337: LD_INT 2
28339: PPUSH
28340: CALL_OW 336
// end ;
28344: GO 28309
28346: POP
28347: POP
// end ;
28348: PPOPN 2
28350: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28351: LD_EXP 36
28355: PUSH
28356: LD_EXP 89
28360: AND
28361: IFFALSE 28649
28363: GO 28365
28365: DISABLE
28366: LD_INT 0
28368: PPUSH
28369: PPUSH
28370: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28371: LD_OWVAR 2
28375: PPUSH
28376: LD_INT 9
28378: PPUSH
28379: LD_INT 1
28381: PPUSH
28382: LD_INT 1
28384: PPUSH
28385: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28389: LD_INT 9
28391: PPUSH
28392: LD_OWVAR 2
28396: PPUSH
28397: CALL_OW 343
// uc_side := 9 ;
28401: LD_ADDR_OWVAR 20
28405: PUSH
28406: LD_INT 9
28408: ST_TO_ADDR
// uc_nation := 2 ;
28409: LD_ADDR_OWVAR 21
28413: PUSH
28414: LD_INT 2
28416: ST_TO_ADDR
// hc_name := Dark Warrior ;
28417: LD_ADDR_OWVAR 26
28421: PUSH
28422: LD_STRING Dark Warrior
28424: ST_TO_ADDR
// hc_gallery :=  ;
28425: LD_ADDR_OWVAR 33
28429: PUSH
28430: LD_STRING 
28432: ST_TO_ADDR
// hc_noskilllimit := true ;
28433: LD_ADDR_OWVAR 76
28437: PUSH
28438: LD_INT 1
28440: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28441: LD_ADDR_OWVAR 31
28445: PUSH
28446: LD_INT 30
28448: PUSH
28449: LD_INT 30
28451: PUSH
28452: LD_INT 30
28454: PUSH
28455: LD_INT 30
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: ST_TO_ADDR
// un := CreateHuman ;
28464: LD_ADDR_VAR 0 3
28468: PUSH
28469: CALL_OW 44
28473: ST_TO_ADDR
// hc_noskilllimit := false ;
28474: LD_ADDR_OWVAR 76
28478: PUSH
28479: LD_INT 0
28481: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28482: LD_VAR 0 3
28486: PPUSH
28487: LD_INT 1
28489: PPUSH
28490: CALL_OW 51
// ToLua ( playRanger() ) ;
28494: LD_STRING playRanger()
28496: PPUSH
28497: CALL_OW 559
// p := 0 ;
28501: LD_ADDR_VAR 0 2
28505: PUSH
28506: LD_INT 0
28508: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28509: LD_INT 35
28511: PPUSH
28512: CALL_OW 67
// p := p + 1 ;
28516: LD_ADDR_VAR 0 2
28520: PUSH
28521: LD_VAR 0 2
28525: PUSH
28526: LD_INT 1
28528: PLUS
28529: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28530: LD_VAR 0 3
28534: PPUSH
28535: CALL_OW 256
28539: PUSH
28540: LD_INT 1000
28542: LESS
28543: IFFALSE 28557
// SetLives ( un , 1000 ) ;
28545: LD_VAR 0 3
28549: PPUSH
28550: LD_INT 1000
28552: PPUSH
28553: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28557: LD_VAR 0 3
28561: PPUSH
28562: LD_INT 81
28564: PUSH
28565: LD_OWVAR 2
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 91
28576: PUSH
28577: LD_VAR 0 3
28581: PUSH
28582: LD_INT 30
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: LIST
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PPUSH
28594: CALL_OW 69
28598: PPUSH
28599: LD_VAR 0 3
28603: PPUSH
28604: CALL_OW 74
28608: PPUSH
28609: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28613: LD_VAR 0 2
28617: PUSH
28618: LD_INT 80
28620: GREATER
28621: PUSH
28622: LD_VAR 0 3
28626: PPUSH
28627: CALL_OW 301
28631: OR
28632: IFFALSE 28509
// if un then
28634: LD_VAR 0 3
28638: IFFALSE 28649
// RemoveUnit ( un ) ;
28640: LD_VAR 0 3
28644: PPUSH
28645: CALL_OW 64
// end ;
28649: PPOPN 3
28651: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28652: LD_EXP 90
28656: IFFALSE 28772
28658: GO 28660
28660: DISABLE
28661: LD_INT 0
28663: PPUSH
28664: PPUSH
28665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28666: LD_ADDR_VAR 0 2
28670: PUSH
28671: LD_INT 81
28673: PUSH
28674: LD_OWVAR 2
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 21
28685: PUSH
28686: LD_INT 1
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PPUSH
28697: CALL_OW 69
28701: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28702: LD_STRING playComputer()
28704: PPUSH
28705: CALL_OW 559
// if not tmp then
28709: LD_VAR 0 2
28713: NOT
28714: IFFALSE 28718
// exit ;
28716: GO 28772
// for i in tmp do
28718: LD_ADDR_VAR 0 1
28722: PUSH
28723: LD_VAR 0 2
28727: PUSH
28728: FOR_IN
28729: IFFALSE 28770
// for j := 1 to 4 do
28731: LD_ADDR_VAR 0 3
28735: PUSH
28736: DOUBLE
28737: LD_INT 1
28739: DEC
28740: ST_TO_ADDR
28741: LD_INT 4
28743: PUSH
28744: FOR_TO
28745: IFFALSE 28766
// SetSkill ( i , j , 10 ) ;
28747: LD_VAR 0 1
28751: PPUSH
28752: LD_VAR 0 3
28756: PPUSH
28757: LD_INT 10
28759: PPUSH
28760: CALL_OW 237
28764: GO 28744
28766: POP
28767: POP
28768: GO 28728
28770: POP
28771: POP
// end ;
28772: PPOPN 3
28774: END
// every 0 0$1 trigger s30 do var i , tmp ;
28775: LD_EXP 91
28779: IFFALSE 28848
28781: GO 28783
28783: DISABLE
28784: LD_INT 0
28786: PPUSH
28787: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28788: LD_ADDR_VAR 0 2
28792: PUSH
28793: LD_INT 22
28795: PUSH
28796: LD_OWVAR 2
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PPUSH
28805: CALL_OW 69
28809: ST_TO_ADDR
// if not tmp then
28810: LD_VAR 0 2
28814: NOT
28815: IFFALSE 28819
// exit ;
28817: GO 28848
// for i in tmp do
28819: LD_ADDR_VAR 0 1
28823: PUSH
28824: LD_VAR 0 2
28828: PUSH
28829: FOR_IN
28830: IFFALSE 28846
// SetLives ( i , 300 ) ;
28832: LD_VAR 0 1
28836: PPUSH
28837: LD_INT 300
28839: PPUSH
28840: CALL_OW 234
28844: GO 28829
28846: POP
28847: POP
// end ;
28848: PPOPN 2
28850: END
// every 0 0$1 trigger s60 do var i , tmp ;
28851: LD_EXP 92
28855: IFFALSE 28924
28857: GO 28859
28859: DISABLE
28860: LD_INT 0
28862: PPUSH
28863: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28864: LD_ADDR_VAR 0 2
28868: PUSH
28869: LD_INT 22
28871: PUSH
28872: LD_OWVAR 2
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PPUSH
28881: CALL_OW 69
28885: ST_TO_ADDR
// if not tmp then
28886: LD_VAR 0 2
28890: NOT
28891: IFFALSE 28895
// exit ;
28893: GO 28924
// for i in tmp do
28895: LD_ADDR_VAR 0 1
28899: PUSH
28900: LD_VAR 0 2
28904: PUSH
28905: FOR_IN
28906: IFFALSE 28922
// SetLives ( i , 600 ) ;
28908: LD_VAR 0 1
28912: PPUSH
28913: LD_INT 600
28915: PPUSH
28916: CALL_OW 234
28920: GO 28905
28922: POP
28923: POP
// end ;
28924: PPOPN 2
28926: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28927: LD_INT 0
28929: PPUSH
// case cmd of 301 :
28930: LD_VAR 0 1
28934: PUSH
28935: LD_INT 301
28937: DOUBLE
28938: EQUAL
28939: IFTRUE 28943
28941: GO 28975
28943: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28944: LD_VAR 0 6
28948: PPUSH
28949: LD_VAR 0 7
28953: PPUSH
28954: LD_VAR 0 8
28958: PPUSH
28959: LD_VAR 0 4
28963: PPUSH
28964: LD_VAR 0 5
28968: PPUSH
28969: CALL 30176 0 5
28973: GO 29096
28975: LD_INT 302
28977: DOUBLE
28978: EQUAL
28979: IFTRUE 28983
28981: GO 29020
28983: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28984: LD_VAR 0 6
28988: PPUSH
28989: LD_VAR 0 7
28993: PPUSH
28994: LD_VAR 0 8
28998: PPUSH
28999: LD_VAR 0 9
29003: PPUSH
29004: LD_VAR 0 4
29008: PPUSH
29009: LD_VAR 0 5
29013: PPUSH
29014: CALL 30267 0 6
29018: GO 29096
29020: LD_INT 303
29022: DOUBLE
29023: EQUAL
29024: IFTRUE 29028
29026: GO 29065
29028: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29029: LD_VAR 0 6
29033: PPUSH
29034: LD_VAR 0 7
29038: PPUSH
29039: LD_VAR 0 8
29043: PPUSH
29044: LD_VAR 0 9
29048: PPUSH
29049: LD_VAR 0 4
29053: PPUSH
29054: LD_VAR 0 5
29058: PPUSH
29059: CALL 29101 0 6
29063: GO 29096
29065: LD_INT 304
29067: DOUBLE
29068: EQUAL
29069: IFTRUE 29073
29071: GO 29095
29073: POP
// hHackTeleport ( unit , x , y ) ; end ;
29074: LD_VAR 0 2
29078: PPUSH
29079: LD_VAR 0 4
29083: PPUSH
29084: LD_VAR 0 5
29088: PPUSH
29089: CALL 30860 0 3
29093: GO 29096
29095: POP
// end ;
29096: LD_VAR 0 12
29100: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29101: LD_INT 0
29103: PPUSH
29104: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29105: LD_VAR 0 1
29109: PUSH
29110: LD_INT 1
29112: LESS
29113: PUSH
29114: LD_VAR 0 1
29118: PUSH
29119: LD_INT 3
29121: GREATER
29122: OR
29123: PUSH
29124: LD_VAR 0 5
29128: PPUSH
29129: LD_VAR 0 6
29133: PPUSH
29134: CALL_OW 428
29138: OR
29139: IFFALSE 29143
// exit ;
29141: GO 29863
// uc_side := your_side ;
29143: LD_ADDR_OWVAR 20
29147: PUSH
29148: LD_OWVAR 2
29152: ST_TO_ADDR
// uc_nation := nation ;
29153: LD_ADDR_OWVAR 21
29157: PUSH
29158: LD_VAR 0 1
29162: ST_TO_ADDR
// bc_level = 1 ;
29163: LD_ADDR_OWVAR 43
29167: PUSH
29168: LD_INT 1
29170: ST_TO_ADDR
// case btype of 1 :
29171: LD_VAR 0 2
29175: PUSH
29176: LD_INT 1
29178: DOUBLE
29179: EQUAL
29180: IFTRUE 29184
29182: GO 29195
29184: POP
// bc_type := b_depot ; 2 :
29185: LD_ADDR_OWVAR 42
29189: PUSH
29190: LD_INT 0
29192: ST_TO_ADDR
29193: GO 29807
29195: LD_INT 2
29197: DOUBLE
29198: EQUAL
29199: IFTRUE 29203
29201: GO 29214
29203: POP
// bc_type := b_warehouse ; 3 :
29204: LD_ADDR_OWVAR 42
29208: PUSH
29209: LD_INT 1
29211: ST_TO_ADDR
29212: GO 29807
29214: LD_INT 3
29216: DOUBLE
29217: EQUAL
29218: IFTRUE 29222
29220: GO 29233
29222: POP
// bc_type := b_lab ; 4 .. 9 :
29223: LD_ADDR_OWVAR 42
29227: PUSH
29228: LD_INT 6
29230: ST_TO_ADDR
29231: GO 29807
29233: LD_INT 4
29235: DOUBLE
29236: GREATEREQUAL
29237: IFFALSE 29245
29239: LD_INT 9
29241: DOUBLE
29242: LESSEQUAL
29243: IFTRUE 29247
29245: GO 29299
29247: POP
// begin bc_type := b_lab_half ;
29248: LD_ADDR_OWVAR 42
29252: PUSH
29253: LD_INT 7
29255: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29256: LD_ADDR_OWVAR 44
29260: PUSH
29261: LD_INT 10
29263: PUSH
29264: LD_INT 11
29266: PUSH
29267: LD_INT 12
29269: PUSH
29270: LD_INT 15
29272: PUSH
29273: LD_INT 14
29275: PUSH
29276: LD_INT 13
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: PUSH
29287: LD_VAR 0 2
29291: PUSH
29292: LD_INT 3
29294: MINUS
29295: ARRAY
29296: ST_TO_ADDR
// end ; 10 .. 13 :
29297: GO 29807
29299: LD_INT 10
29301: DOUBLE
29302: GREATEREQUAL
29303: IFFALSE 29311
29305: LD_INT 13
29307: DOUBLE
29308: LESSEQUAL
29309: IFTRUE 29313
29311: GO 29390
29313: POP
// begin bc_type := b_lab_full ;
29314: LD_ADDR_OWVAR 42
29318: PUSH
29319: LD_INT 8
29321: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29322: LD_ADDR_OWVAR 44
29326: PUSH
29327: LD_INT 10
29329: PUSH
29330: LD_INT 12
29332: PUSH
29333: LD_INT 14
29335: PUSH
29336: LD_INT 13
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: PUSH
29345: LD_VAR 0 2
29349: PUSH
29350: LD_INT 9
29352: MINUS
29353: ARRAY
29354: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29355: LD_ADDR_OWVAR 45
29359: PUSH
29360: LD_INT 11
29362: PUSH
29363: LD_INT 15
29365: PUSH
29366: LD_INT 12
29368: PUSH
29369: LD_INT 15
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: PUSH
29378: LD_VAR 0 2
29382: PUSH
29383: LD_INT 9
29385: MINUS
29386: ARRAY
29387: ST_TO_ADDR
// end ; 14 :
29388: GO 29807
29390: LD_INT 14
29392: DOUBLE
29393: EQUAL
29394: IFTRUE 29398
29396: GO 29409
29398: POP
// bc_type := b_workshop ; 15 :
29399: LD_ADDR_OWVAR 42
29403: PUSH
29404: LD_INT 2
29406: ST_TO_ADDR
29407: GO 29807
29409: LD_INT 15
29411: DOUBLE
29412: EQUAL
29413: IFTRUE 29417
29415: GO 29428
29417: POP
// bc_type := b_factory ; 16 :
29418: LD_ADDR_OWVAR 42
29422: PUSH
29423: LD_INT 3
29425: ST_TO_ADDR
29426: GO 29807
29428: LD_INT 16
29430: DOUBLE
29431: EQUAL
29432: IFTRUE 29436
29434: GO 29447
29436: POP
// bc_type := b_ext_gun ; 17 :
29437: LD_ADDR_OWVAR 42
29441: PUSH
29442: LD_INT 17
29444: ST_TO_ADDR
29445: GO 29807
29447: LD_INT 17
29449: DOUBLE
29450: EQUAL
29451: IFTRUE 29455
29453: GO 29483
29455: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29456: LD_ADDR_OWVAR 42
29460: PUSH
29461: LD_INT 19
29463: PUSH
29464: LD_INT 23
29466: PUSH
29467: LD_INT 19
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: LIST
29474: PUSH
29475: LD_VAR 0 1
29479: ARRAY
29480: ST_TO_ADDR
29481: GO 29807
29483: LD_INT 18
29485: DOUBLE
29486: EQUAL
29487: IFTRUE 29491
29489: GO 29502
29491: POP
// bc_type := b_ext_radar ; 19 :
29492: LD_ADDR_OWVAR 42
29496: PUSH
29497: LD_INT 20
29499: ST_TO_ADDR
29500: GO 29807
29502: LD_INT 19
29504: DOUBLE
29505: EQUAL
29506: IFTRUE 29510
29508: GO 29521
29510: POP
// bc_type := b_ext_radio ; 20 :
29511: LD_ADDR_OWVAR 42
29515: PUSH
29516: LD_INT 22
29518: ST_TO_ADDR
29519: GO 29807
29521: LD_INT 20
29523: DOUBLE
29524: EQUAL
29525: IFTRUE 29529
29527: GO 29540
29529: POP
// bc_type := b_ext_siberium ; 21 :
29530: LD_ADDR_OWVAR 42
29534: PUSH
29535: LD_INT 21
29537: ST_TO_ADDR
29538: GO 29807
29540: LD_INT 21
29542: DOUBLE
29543: EQUAL
29544: IFTRUE 29548
29546: GO 29559
29548: POP
// bc_type := b_ext_computer ; 22 :
29549: LD_ADDR_OWVAR 42
29553: PUSH
29554: LD_INT 24
29556: ST_TO_ADDR
29557: GO 29807
29559: LD_INT 22
29561: DOUBLE
29562: EQUAL
29563: IFTRUE 29567
29565: GO 29578
29567: POP
// bc_type := b_ext_track ; 23 :
29568: LD_ADDR_OWVAR 42
29572: PUSH
29573: LD_INT 16
29575: ST_TO_ADDR
29576: GO 29807
29578: LD_INT 23
29580: DOUBLE
29581: EQUAL
29582: IFTRUE 29586
29584: GO 29597
29586: POP
// bc_type := b_ext_laser ; 24 :
29587: LD_ADDR_OWVAR 42
29591: PUSH
29592: LD_INT 25
29594: ST_TO_ADDR
29595: GO 29807
29597: LD_INT 24
29599: DOUBLE
29600: EQUAL
29601: IFTRUE 29605
29603: GO 29616
29605: POP
// bc_type := b_control_tower ; 25 :
29606: LD_ADDR_OWVAR 42
29610: PUSH
29611: LD_INT 36
29613: ST_TO_ADDR
29614: GO 29807
29616: LD_INT 25
29618: DOUBLE
29619: EQUAL
29620: IFTRUE 29624
29622: GO 29635
29624: POP
// bc_type := b_breastwork ; 26 :
29625: LD_ADDR_OWVAR 42
29629: PUSH
29630: LD_INT 31
29632: ST_TO_ADDR
29633: GO 29807
29635: LD_INT 26
29637: DOUBLE
29638: EQUAL
29639: IFTRUE 29643
29641: GO 29654
29643: POP
// bc_type := b_bunker ; 27 :
29644: LD_ADDR_OWVAR 42
29648: PUSH
29649: LD_INT 32
29651: ST_TO_ADDR
29652: GO 29807
29654: LD_INT 27
29656: DOUBLE
29657: EQUAL
29658: IFTRUE 29662
29660: GO 29673
29662: POP
// bc_type := b_turret ; 28 :
29663: LD_ADDR_OWVAR 42
29667: PUSH
29668: LD_INT 33
29670: ST_TO_ADDR
29671: GO 29807
29673: LD_INT 28
29675: DOUBLE
29676: EQUAL
29677: IFTRUE 29681
29679: GO 29692
29681: POP
// bc_type := b_armoury ; 29 :
29682: LD_ADDR_OWVAR 42
29686: PUSH
29687: LD_INT 4
29689: ST_TO_ADDR
29690: GO 29807
29692: LD_INT 29
29694: DOUBLE
29695: EQUAL
29696: IFTRUE 29700
29698: GO 29711
29700: POP
// bc_type := b_barracks ; 30 :
29701: LD_ADDR_OWVAR 42
29705: PUSH
29706: LD_INT 5
29708: ST_TO_ADDR
29709: GO 29807
29711: LD_INT 30
29713: DOUBLE
29714: EQUAL
29715: IFTRUE 29719
29717: GO 29730
29719: POP
// bc_type := b_solar_power ; 31 :
29720: LD_ADDR_OWVAR 42
29724: PUSH
29725: LD_INT 27
29727: ST_TO_ADDR
29728: GO 29807
29730: LD_INT 31
29732: DOUBLE
29733: EQUAL
29734: IFTRUE 29738
29736: GO 29749
29738: POP
// bc_type := b_oil_power ; 32 :
29739: LD_ADDR_OWVAR 42
29743: PUSH
29744: LD_INT 26
29746: ST_TO_ADDR
29747: GO 29807
29749: LD_INT 32
29751: DOUBLE
29752: EQUAL
29753: IFTRUE 29757
29755: GO 29768
29757: POP
// bc_type := b_siberite_power ; 33 :
29758: LD_ADDR_OWVAR 42
29762: PUSH
29763: LD_INT 28
29765: ST_TO_ADDR
29766: GO 29807
29768: LD_INT 33
29770: DOUBLE
29771: EQUAL
29772: IFTRUE 29776
29774: GO 29787
29776: POP
// bc_type := b_oil_mine ; 34 :
29777: LD_ADDR_OWVAR 42
29781: PUSH
29782: LD_INT 29
29784: ST_TO_ADDR
29785: GO 29807
29787: LD_INT 34
29789: DOUBLE
29790: EQUAL
29791: IFTRUE 29795
29793: GO 29806
29795: POP
// bc_type := b_siberite_mine ; end ;
29796: LD_ADDR_OWVAR 42
29800: PUSH
29801: LD_INT 30
29803: ST_TO_ADDR
29804: GO 29807
29806: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29807: LD_ADDR_VAR 0 8
29811: PUSH
29812: LD_VAR 0 5
29816: PPUSH
29817: LD_VAR 0 6
29821: PPUSH
29822: LD_VAR 0 3
29826: PPUSH
29827: CALL_OW 47
29831: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29832: LD_OWVAR 42
29836: PUSH
29837: LD_INT 32
29839: PUSH
29840: LD_INT 33
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: IN
29847: IFFALSE 29863
// PlaceWeaponTurret ( b , weapon ) ;
29849: LD_VAR 0 8
29853: PPUSH
29854: LD_VAR 0 4
29858: PPUSH
29859: CALL_OW 431
// end ;
29863: LD_VAR 0 7
29867: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29868: LD_INT 0
29870: PPUSH
29871: PPUSH
29872: PPUSH
29873: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29874: LD_ADDR_VAR 0 4
29878: PUSH
29879: LD_INT 22
29881: PUSH
29882: LD_OWVAR 2
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 2
29893: PUSH
29894: LD_INT 30
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 30
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: LIST
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PPUSH
29923: CALL_OW 69
29927: ST_TO_ADDR
// if not tmp then
29928: LD_VAR 0 4
29932: NOT
29933: IFFALSE 29937
// exit ;
29935: GO 29996
// for i in tmp do
29937: LD_ADDR_VAR 0 2
29941: PUSH
29942: LD_VAR 0 4
29946: PUSH
29947: FOR_IN
29948: IFFALSE 29994
// for j = 1 to 3 do
29950: LD_ADDR_VAR 0 3
29954: PUSH
29955: DOUBLE
29956: LD_INT 1
29958: DEC
29959: ST_TO_ADDR
29960: LD_INT 3
29962: PUSH
29963: FOR_TO
29964: IFFALSE 29990
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29966: LD_VAR 0 2
29970: PPUSH
29971: CALL_OW 274
29975: PPUSH
29976: LD_VAR 0 3
29980: PPUSH
29981: LD_INT 99999
29983: PPUSH
29984: CALL_OW 277
29988: GO 29963
29990: POP
29991: POP
29992: GO 29947
29994: POP
29995: POP
// end ;
29996: LD_VAR 0 1
30000: RET
// export function hHackSetLevel10 ; var i , j ; begin
30001: LD_INT 0
30003: PPUSH
30004: PPUSH
30005: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30006: LD_ADDR_VAR 0 2
30010: PUSH
30011: LD_INT 21
30013: PUSH
30014: LD_INT 1
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PPUSH
30021: CALL_OW 69
30025: PUSH
30026: FOR_IN
30027: IFFALSE 30079
// if IsSelected ( i ) then
30029: LD_VAR 0 2
30033: PPUSH
30034: CALL_OW 306
30038: IFFALSE 30077
// begin for j := 1 to 4 do
30040: LD_ADDR_VAR 0 3
30044: PUSH
30045: DOUBLE
30046: LD_INT 1
30048: DEC
30049: ST_TO_ADDR
30050: LD_INT 4
30052: PUSH
30053: FOR_TO
30054: IFFALSE 30075
// SetSkill ( i , j , 10 ) ;
30056: LD_VAR 0 2
30060: PPUSH
30061: LD_VAR 0 3
30065: PPUSH
30066: LD_INT 10
30068: PPUSH
30069: CALL_OW 237
30073: GO 30053
30075: POP
30076: POP
// end ;
30077: GO 30026
30079: POP
30080: POP
// end ;
30081: LD_VAR 0 1
30085: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30086: LD_INT 0
30088: PPUSH
30089: PPUSH
30090: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30091: LD_ADDR_VAR 0 2
30095: PUSH
30096: LD_INT 22
30098: PUSH
30099: LD_OWVAR 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 21
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PPUSH
30122: CALL_OW 69
30126: PUSH
30127: FOR_IN
30128: IFFALSE 30169
// begin for j := 1 to 4 do
30130: LD_ADDR_VAR 0 3
30134: PUSH
30135: DOUBLE
30136: LD_INT 1
30138: DEC
30139: ST_TO_ADDR
30140: LD_INT 4
30142: PUSH
30143: FOR_TO
30144: IFFALSE 30165
// SetSkill ( i , j , 10 ) ;
30146: LD_VAR 0 2
30150: PPUSH
30151: LD_VAR 0 3
30155: PPUSH
30156: LD_INT 10
30158: PPUSH
30159: CALL_OW 237
30163: GO 30143
30165: POP
30166: POP
// end ;
30167: GO 30127
30169: POP
30170: POP
// end ;
30171: LD_VAR 0 1
30175: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30176: LD_INT 0
30178: PPUSH
// uc_side := your_side ;
30179: LD_ADDR_OWVAR 20
30183: PUSH
30184: LD_OWVAR 2
30188: ST_TO_ADDR
// uc_nation := nation ;
30189: LD_ADDR_OWVAR 21
30193: PUSH
30194: LD_VAR 0 1
30198: ST_TO_ADDR
// InitHc ;
30199: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30203: LD_INT 0
30205: PPUSH
30206: LD_VAR 0 2
30210: PPUSH
30211: LD_VAR 0 3
30215: PPUSH
30216: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30220: LD_VAR 0 4
30224: PPUSH
30225: LD_VAR 0 5
30229: PPUSH
30230: CALL_OW 428
30234: PUSH
30235: LD_INT 0
30237: EQUAL
30238: IFFALSE 30262
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30240: CALL_OW 44
30244: PPUSH
30245: LD_VAR 0 4
30249: PPUSH
30250: LD_VAR 0 5
30254: PPUSH
30255: LD_INT 1
30257: PPUSH
30258: CALL_OW 48
// end ;
30262: LD_VAR 0 6
30266: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30267: LD_INT 0
30269: PPUSH
30270: PPUSH
// uc_side := your_side ;
30271: LD_ADDR_OWVAR 20
30275: PUSH
30276: LD_OWVAR 2
30280: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30281: LD_VAR 0 1
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: LD_INT 2
30291: PUSH
30292: LD_INT 3
30294: PUSH
30295: LD_INT 4
30297: PUSH
30298: LD_INT 5
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: IN
30308: IFFALSE 30320
// uc_nation := nation_american else
30310: LD_ADDR_OWVAR 21
30314: PUSH
30315: LD_INT 1
30317: ST_TO_ADDR
30318: GO 30363
// if chassis in [ 11 , 12 , 13 , 14 ] then
30320: LD_VAR 0 1
30324: PUSH
30325: LD_INT 11
30327: PUSH
30328: LD_INT 12
30330: PUSH
30331: LD_INT 13
30333: PUSH
30334: LD_INT 14
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: IN
30343: IFFALSE 30355
// uc_nation := nation_arabian else
30345: LD_ADDR_OWVAR 21
30349: PUSH
30350: LD_INT 2
30352: ST_TO_ADDR
30353: GO 30363
// uc_nation := nation_russian ;
30355: LD_ADDR_OWVAR 21
30359: PUSH
30360: LD_INT 3
30362: ST_TO_ADDR
// vc_chassis := chassis ;
30363: LD_ADDR_OWVAR 37
30367: PUSH
30368: LD_VAR 0 1
30372: ST_TO_ADDR
// vc_engine := engine ;
30373: LD_ADDR_OWVAR 39
30377: PUSH
30378: LD_VAR 0 2
30382: ST_TO_ADDR
// vc_control := control ;
30383: LD_ADDR_OWVAR 38
30387: PUSH
30388: LD_VAR 0 3
30392: ST_TO_ADDR
// vc_weapon := weapon ;
30393: LD_ADDR_OWVAR 40
30397: PUSH
30398: LD_VAR 0 4
30402: ST_TO_ADDR
// un := CreateVehicle ;
30403: LD_ADDR_VAR 0 8
30407: PUSH
30408: CALL_OW 45
30412: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30413: LD_VAR 0 8
30417: PPUSH
30418: LD_INT 0
30420: PPUSH
30421: LD_INT 5
30423: PPUSH
30424: CALL_OW 12
30428: PPUSH
30429: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30433: LD_VAR 0 8
30437: PPUSH
30438: LD_VAR 0 5
30442: PPUSH
30443: LD_VAR 0 6
30447: PPUSH
30448: LD_INT 1
30450: PPUSH
30451: CALL_OW 48
// end ;
30455: LD_VAR 0 7
30459: RET
// export hInvincible ; every 1 do
30460: GO 30462
30462: DISABLE
// hInvincible := [ ] ;
30463: LD_ADDR_EXP 93
30467: PUSH
30468: EMPTY
30469: ST_TO_ADDR
30470: END
// every 10 do var i ;
30471: GO 30473
30473: DISABLE
30474: LD_INT 0
30476: PPUSH
// begin enable ;
30477: ENABLE
// if not hInvincible then
30478: LD_EXP 93
30482: NOT
30483: IFFALSE 30487
// exit ;
30485: GO 30531
// for i in hInvincible do
30487: LD_ADDR_VAR 0 1
30491: PUSH
30492: LD_EXP 93
30496: PUSH
30497: FOR_IN
30498: IFFALSE 30529
// if GetLives ( i ) < 1000 then
30500: LD_VAR 0 1
30504: PPUSH
30505: CALL_OW 256
30509: PUSH
30510: LD_INT 1000
30512: LESS
30513: IFFALSE 30527
// SetLives ( i , 1000 ) ;
30515: LD_VAR 0 1
30519: PPUSH
30520: LD_INT 1000
30522: PPUSH
30523: CALL_OW 234
30527: GO 30497
30529: POP
30530: POP
// end ;
30531: PPOPN 1
30533: END
// export function hHackInvincible ; var i ; begin
30534: LD_INT 0
30536: PPUSH
30537: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30538: LD_ADDR_VAR 0 2
30542: PUSH
30543: LD_INT 2
30545: PUSH
30546: LD_INT 21
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 21
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: LIST
30570: PPUSH
30571: CALL_OW 69
30575: PUSH
30576: FOR_IN
30577: IFFALSE 30638
// if IsSelected ( i ) then
30579: LD_VAR 0 2
30583: PPUSH
30584: CALL_OW 306
30588: IFFALSE 30636
// begin if i in hInvincible then
30590: LD_VAR 0 2
30594: PUSH
30595: LD_EXP 93
30599: IN
30600: IFFALSE 30620
// hInvincible := hInvincible diff i else
30602: LD_ADDR_EXP 93
30606: PUSH
30607: LD_EXP 93
30611: PUSH
30612: LD_VAR 0 2
30616: DIFF
30617: ST_TO_ADDR
30618: GO 30636
// hInvincible := hInvincible union i ;
30620: LD_ADDR_EXP 93
30624: PUSH
30625: LD_EXP 93
30629: PUSH
30630: LD_VAR 0 2
30634: UNION
30635: ST_TO_ADDR
// end ;
30636: GO 30576
30638: POP
30639: POP
// end ;
30640: LD_VAR 0 1
30644: RET
// export function hHackInvisible ; var i , j ; begin
30645: LD_INT 0
30647: PPUSH
30648: PPUSH
30649: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30650: LD_ADDR_VAR 0 2
30654: PUSH
30655: LD_INT 21
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PPUSH
30665: CALL_OW 69
30669: PUSH
30670: FOR_IN
30671: IFFALSE 30695
// if IsSelected ( i ) then
30673: LD_VAR 0 2
30677: PPUSH
30678: CALL_OW 306
30682: IFFALSE 30693
// ComForceInvisible ( i ) ;
30684: LD_VAR 0 2
30688: PPUSH
30689: CALL_OW 496
30693: GO 30670
30695: POP
30696: POP
// end ;
30697: LD_VAR 0 1
30701: RET
// export function hHackChangeYourSide ; begin
30702: LD_INT 0
30704: PPUSH
// if your_side = 8 then
30705: LD_OWVAR 2
30709: PUSH
30710: LD_INT 8
30712: EQUAL
30713: IFFALSE 30725
// your_side := 0 else
30715: LD_ADDR_OWVAR 2
30719: PUSH
30720: LD_INT 0
30722: ST_TO_ADDR
30723: GO 30739
// your_side := your_side + 1 ;
30725: LD_ADDR_OWVAR 2
30729: PUSH
30730: LD_OWVAR 2
30734: PUSH
30735: LD_INT 1
30737: PLUS
30738: ST_TO_ADDR
// end ;
30739: LD_VAR 0 1
30743: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30744: LD_INT 0
30746: PPUSH
30747: PPUSH
30748: PPUSH
// for i in all_units do
30749: LD_ADDR_VAR 0 2
30753: PUSH
30754: LD_OWVAR 3
30758: PUSH
30759: FOR_IN
30760: IFFALSE 30838
// if IsSelected ( i ) then
30762: LD_VAR 0 2
30766: PPUSH
30767: CALL_OW 306
30771: IFFALSE 30836
// begin j := GetSide ( i ) ;
30773: LD_ADDR_VAR 0 3
30777: PUSH
30778: LD_VAR 0 2
30782: PPUSH
30783: CALL_OW 255
30787: ST_TO_ADDR
// if j = 8 then
30788: LD_VAR 0 3
30792: PUSH
30793: LD_INT 8
30795: EQUAL
30796: IFFALSE 30808
// j := 0 else
30798: LD_ADDR_VAR 0 3
30802: PUSH
30803: LD_INT 0
30805: ST_TO_ADDR
30806: GO 30822
// j := j + 1 ;
30808: LD_ADDR_VAR 0 3
30812: PUSH
30813: LD_VAR 0 3
30817: PUSH
30818: LD_INT 1
30820: PLUS
30821: ST_TO_ADDR
// SetSide ( i , j ) ;
30822: LD_VAR 0 2
30826: PPUSH
30827: LD_VAR 0 3
30831: PPUSH
30832: CALL_OW 235
// end ;
30836: GO 30759
30838: POP
30839: POP
// end ;
30840: LD_VAR 0 1
30844: RET
// export function hHackFog ; begin
30845: LD_INT 0
30847: PPUSH
// FogOff ( true ) ;
30848: LD_INT 1
30850: PPUSH
30851: CALL_OW 344
// end ;
30855: LD_VAR 0 1
30859: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30860: LD_INT 0
30862: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30863: LD_VAR 0 1
30867: PPUSH
30868: LD_VAR 0 2
30872: PPUSH
30873: LD_VAR 0 3
30877: PPUSH
30878: LD_INT 1
30880: PPUSH
30881: LD_INT 1
30883: PPUSH
30884: CALL_OW 483
// CenterOnXY ( x , y ) ;
30888: LD_VAR 0 2
30892: PPUSH
30893: LD_VAR 0 3
30897: PPUSH
30898: CALL_OW 84
// end ;
30902: LD_VAR 0 4
30906: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30907: LD_INT 0
30909: PPUSH
30910: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30911: LD_VAR 0 1
30915: NOT
30916: PUSH
30917: LD_VAR 0 2
30921: PPUSH
30922: LD_VAR 0 3
30926: PPUSH
30927: CALL_OW 488
30931: NOT
30932: OR
30933: PUSH
30934: LD_VAR 0 1
30938: PPUSH
30939: CALL_OW 266
30943: PUSH
30944: LD_INT 3
30946: NONEQUAL
30947: PUSH
30948: LD_VAR 0 1
30952: PPUSH
30953: CALL_OW 247
30957: PUSH
30958: LD_INT 1
30960: EQUAL
30961: NOT
30962: AND
30963: OR
30964: IFFALSE 30968
// exit ;
30966: GO 31117
// if GetType ( factory ) = unit_human then
30968: LD_VAR 0 1
30972: PPUSH
30973: CALL_OW 247
30977: PUSH
30978: LD_INT 1
30980: EQUAL
30981: IFFALSE 30998
// factory := IsInUnit ( factory ) ;
30983: LD_ADDR_VAR 0 1
30987: PUSH
30988: LD_VAR 0 1
30992: PPUSH
30993: CALL_OW 310
30997: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30998: LD_VAR 0 1
31002: PPUSH
31003: CALL_OW 266
31007: PUSH
31008: LD_INT 3
31010: NONEQUAL
31011: IFFALSE 31015
// exit ;
31013: GO 31117
// if HexInfo ( x , y ) = factory then
31015: LD_VAR 0 2
31019: PPUSH
31020: LD_VAR 0 3
31024: PPUSH
31025: CALL_OW 428
31029: PUSH
31030: LD_VAR 0 1
31034: EQUAL
31035: IFFALSE 31062
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31037: LD_ADDR_EXP 94
31041: PUSH
31042: LD_EXP 94
31046: PPUSH
31047: LD_VAR 0 1
31051: PPUSH
31052: LD_INT 0
31054: PPUSH
31055: CALL_OW 1
31059: ST_TO_ADDR
31060: GO 31113
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31062: LD_ADDR_EXP 94
31066: PUSH
31067: LD_EXP 94
31071: PPUSH
31072: LD_VAR 0 1
31076: PPUSH
31077: LD_VAR 0 1
31081: PPUSH
31082: CALL_OW 255
31086: PUSH
31087: LD_VAR 0 1
31091: PUSH
31092: LD_VAR 0 2
31096: PUSH
31097: LD_VAR 0 3
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: PPUSH
31108: CALL_OW 1
31112: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31113: CALL 31122 0 0
// end ;
31117: LD_VAR 0 4
31121: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31122: LD_INT 0
31124: PPUSH
31125: PPUSH
31126: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31127: LD_STRING resetFactoryWaypoint();
31129: PPUSH
31130: CALL_OW 559
// if factoryWaypoints then
31134: LD_EXP 94
31138: IFFALSE 31264
// begin list := PrepareArray ( factoryWaypoints ) ;
31140: LD_ADDR_VAR 0 3
31144: PUSH
31145: LD_EXP 94
31149: PPUSH
31150: CALL 77714 0 1
31154: ST_TO_ADDR
// for i := 1 to list do
31155: LD_ADDR_VAR 0 2
31159: PUSH
31160: DOUBLE
31161: LD_INT 1
31163: DEC
31164: ST_TO_ADDR
31165: LD_VAR 0 3
31169: PUSH
31170: FOR_TO
31171: IFFALSE 31262
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31173: LD_STRING setFactoryWaypointXY(
31175: PUSH
31176: LD_VAR 0 3
31180: PUSH
31181: LD_VAR 0 2
31185: ARRAY
31186: PUSH
31187: LD_INT 1
31189: ARRAY
31190: STR
31191: PUSH
31192: LD_STRING ,
31194: STR
31195: PUSH
31196: LD_VAR 0 3
31200: PUSH
31201: LD_VAR 0 2
31205: ARRAY
31206: PUSH
31207: LD_INT 2
31209: ARRAY
31210: STR
31211: PUSH
31212: LD_STRING ,
31214: STR
31215: PUSH
31216: LD_VAR 0 3
31220: PUSH
31221: LD_VAR 0 2
31225: ARRAY
31226: PUSH
31227: LD_INT 3
31229: ARRAY
31230: STR
31231: PUSH
31232: LD_STRING ,
31234: STR
31235: PUSH
31236: LD_VAR 0 3
31240: PUSH
31241: LD_VAR 0 2
31245: ARRAY
31246: PUSH
31247: LD_INT 4
31249: ARRAY
31250: STR
31251: PUSH
31252: LD_STRING )
31254: STR
31255: PPUSH
31256: CALL_OW 559
31260: GO 31170
31262: POP
31263: POP
// end ; end ;
31264: LD_VAR 0 1
31268: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31269: LD_INT 0
31271: PPUSH
// if HexInfo ( x , y ) = warehouse then
31272: LD_VAR 0 2
31276: PPUSH
31277: LD_VAR 0 3
31281: PPUSH
31282: CALL_OW 428
31286: PUSH
31287: LD_VAR 0 1
31291: EQUAL
31292: IFFALSE 31319
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31294: LD_ADDR_EXP 95
31298: PUSH
31299: LD_EXP 95
31303: PPUSH
31304: LD_VAR 0 1
31308: PPUSH
31309: LD_INT 0
31311: PPUSH
31312: CALL_OW 1
31316: ST_TO_ADDR
31317: GO 31370
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31319: LD_ADDR_EXP 95
31323: PUSH
31324: LD_EXP 95
31328: PPUSH
31329: LD_VAR 0 1
31333: PPUSH
31334: LD_VAR 0 1
31338: PPUSH
31339: CALL_OW 255
31343: PUSH
31344: LD_VAR 0 1
31348: PUSH
31349: LD_VAR 0 2
31353: PUSH
31354: LD_VAR 0 3
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: PPUSH
31365: CALL_OW 1
31369: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31370: CALL 31379 0 0
// end ;
31374: LD_VAR 0 4
31378: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31379: LD_INT 0
31381: PPUSH
31382: PPUSH
31383: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31384: LD_STRING resetWarehouseGatheringPoints();
31386: PPUSH
31387: CALL_OW 559
// if warehouseGatheringPoints then
31391: LD_EXP 95
31395: IFFALSE 31521
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31397: LD_ADDR_VAR 0 3
31401: PUSH
31402: LD_EXP 95
31406: PPUSH
31407: CALL 77714 0 1
31411: ST_TO_ADDR
// for i := 1 to list do
31412: LD_ADDR_VAR 0 2
31416: PUSH
31417: DOUBLE
31418: LD_INT 1
31420: DEC
31421: ST_TO_ADDR
31422: LD_VAR 0 3
31426: PUSH
31427: FOR_TO
31428: IFFALSE 31519
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31430: LD_STRING setWarehouseGatheringPointXY(
31432: PUSH
31433: LD_VAR 0 3
31437: PUSH
31438: LD_VAR 0 2
31442: ARRAY
31443: PUSH
31444: LD_INT 1
31446: ARRAY
31447: STR
31448: PUSH
31449: LD_STRING ,
31451: STR
31452: PUSH
31453: LD_VAR 0 3
31457: PUSH
31458: LD_VAR 0 2
31462: ARRAY
31463: PUSH
31464: LD_INT 2
31466: ARRAY
31467: STR
31468: PUSH
31469: LD_STRING ,
31471: STR
31472: PUSH
31473: LD_VAR 0 3
31477: PUSH
31478: LD_VAR 0 2
31482: ARRAY
31483: PUSH
31484: LD_INT 3
31486: ARRAY
31487: STR
31488: PUSH
31489: LD_STRING ,
31491: STR
31492: PUSH
31493: LD_VAR 0 3
31497: PUSH
31498: LD_VAR 0 2
31502: ARRAY
31503: PUSH
31504: LD_INT 4
31506: ARRAY
31507: STR
31508: PUSH
31509: LD_STRING )
31511: STR
31512: PPUSH
31513: CALL_OW 559
31517: GO 31427
31519: POP
31520: POP
// end ; end ;
31521: LD_VAR 0 1
31525: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31526: LD_EXP 95
31530: IFFALSE 32215
31532: GO 31534
31534: DISABLE
31535: LD_INT 0
31537: PPUSH
31538: PPUSH
31539: PPUSH
31540: PPUSH
31541: PPUSH
31542: PPUSH
31543: PPUSH
31544: PPUSH
31545: PPUSH
// begin enable ;
31546: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31547: LD_ADDR_VAR 0 3
31551: PUSH
31552: LD_EXP 95
31556: PPUSH
31557: CALL 77714 0 1
31561: ST_TO_ADDR
// if not list then
31562: LD_VAR 0 3
31566: NOT
31567: IFFALSE 31571
// exit ;
31569: GO 32215
// for i := 1 to list do
31571: LD_ADDR_VAR 0 1
31575: PUSH
31576: DOUBLE
31577: LD_INT 1
31579: DEC
31580: ST_TO_ADDR
31581: LD_VAR 0 3
31585: PUSH
31586: FOR_TO
31587: IFFALSE 32213
// begin depot := list [ i ] [ 2 ] ;
31589: LD_ADDR_VAR 0 8
31593: PUSH
31594: LD_VAR 0 3
31598: PUSH
31599: LD_VAR 0 1
31603: ARRAY
31604: PUSH
31605: LD_INT 2
31607: ARRAY
31608: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31609: LD_ADDR_VAR 0 5
31613: PUSH
31614: LD_VAR 0 3
31618: PUSH
31619: LD_VAR 0 1
31623: ARRAY
31624: PUSH
31625: LD_INT 1
31627: ARRAY
31628: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31629: LD_VAR 0 8
31633: PPUSH
31634: CALL_OW 301
31638: PUSH
31639: LD_VAR 0 5
31643: PUSH
31644: LD_VAR 0 8
31648: PPUSH
31649: CALL_OW 255
31653: NONEQUAL
31654: OR
31655: IFFALSE 31684
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31657: LD_ADDR_EXP 95
31661: PUSH
31662: LD_EXP 95
31666: PPUSH
31667: LD_VAR 0 8
31671: PPUSH
31672: LD_INT 0
31674: PPUSH
31675: CALL_OW 1
31679: ST_TO_ADDR
// exit ;
31680: POP
31681: POP
31682: GO 32215
// end ; x := list [ i ] [ 3 ] ;
31684: LD_ADDR_VAR 0 6
31688: PUSH
31689: LD_VAR 0 3
31693: PUSH
31694: LD_VAR 0 1
31698: ARRAY
31699: PUSH
31700: LD_INT 3
31702: ARRAY
31703: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31704: LD_ADDR_VAR 0 7
31708: PUSH
31709: LD_VAR 0 3
31713: PUSH
31714: LD_VAR 0 1
31718: ARRAY
31719: PUSH
31720: LD_INT 4
31722: ARRAY
31723: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31724: LD_ADDR_VAR 0 9
31728: PUSH
31729: LD_VAR 0 6
31733: PPUSH
31734: LD_VAR 0 7
31738: PPUSH
31739: LD_INT 16
31741: PPUSH
31742: CALL 76302 0 3
31746: ST_TO_ADDR
// if not cratesNearbyPoint then
31747: LD_VAR 0 9
31751: NOT
31752: IFFALSE 31758
// exit ;
31754: POP
31755: POP
31756: GO 32215
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31758: LD_ADDR_VAR 0 4
31762: PUSH
31763: LD_INT 22
31765: PUSH
31766: LD_VAR 0 5
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 3
31777: PUSH
31778: LD_INT 60
31780: PUSH
31781: EMPTY
31782: LIST
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 91
31790: PUSH
31791: LD_VAR 0 8
31795: PUSH
31796: LD_INT 6
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: LD_INT 25
31809: PUSH
31810: LD_INT 2
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 25
31819: PUSH
31820: LD_INT 16
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: LIST
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: PPUSH
31838: CALL_OW 69
31842: PUSH
31843: LD_VAR 0 8
31847: PPUSH
31848: CALL_OW 313
31852: PPUSH
31853: LD_INT 3
31855: PUSH
31856: LD_INT 60
31858: PUSH
31859: EMPTY
31860: LIST
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: LD_INT 25
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 25
31881: PUSH
31882: LD_INT 16
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: LIST
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PPUSH
31898: CALL_OW 72
31902: UNION
31903: ST_TO_ADDR
// if tmp then
31904: LD_VAR 0 4
31908: IFFALSE 31988
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31910: LD_ADDR_VAR 0 4
31914: PUSH
31915: LD_VAR 0 4
31919: PPUSH
31920: LD_INT 3
31922: PPUSH
31923: CALL 74271 0 2
31927: ST_TO_ADDR
// for j in tmp do
31928: LD_ADDR_VAR 0 2
31932: PUSH
31933: LD_VAR 0 4
31937: PUSH
31938: FOR_IN
31939: IFFALSE 31982
// begin if IsInUnit ( j ) then
31941: LD_VAR 0 2
31945: PPUSH
31946: CALL_OW 310
31950: IFFALSE 31961
// ComExit ( j ) ;
31952: LD_VAR 0 2
31956: PPUSH
31957: CALL 74354 0 1
// AddComCollect ( j , x , y ) ;
31961: LD_VAR 0 2
31965: PPUSH
31966: LD_VAR 0 6
31970: PPUSH
31971: LD_VAR 0 7
31975: PPUSH
31976: CALL_OW 177
// end ;
31980: GO 31938
31982: POP
31983: POP
// exit ;
31984: POP
31985: POP
31986: GO 32215
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31988: LD_ADDR_VAR 0 4
31992: PUSH
31993: LD_INT 22
31995: PUSH
31996: LD_VAR 0 5
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 91
32007: PUSH
32008: LD_VAR 0 8
32012: PUSH
32013: LD_INT 8
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 2
32023: PUSH
32024: LD_INT 34
32026: PUSH
32027: LD_INT 12
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 34
32036: PUSH
32037: LD_INT 51
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 34
32046: PUSH
32047: LD_INT 32
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 34
32056: PUSH
32057: LD_INT 89
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: LIST
32075: PPUSH
32076: CALL_OW 69
32080: ST_TO_ADDR
// if tmp then
32081: LD_VAR 0 4
32085: IFFALSE 32211
// begin for j in tmp do
32087: LD_ADDR_VAR 0 2
32091: PUSH
32092: LD_VAR 0 4
32096: PUSH
32097: FOR_IN
32098: IFFALSE 32209
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32100: LD_VAR 0 2
32104: PPUSH
32105: CALL_OW 262
32109: PUSH
32110: LD_INT 3
32112: EQUAL
32113: PUSH
32114: LD_VAR 0 2
32118: PPUSH
32119: CALL_OW 261
32123: PUSH
32124: LD_INT 20
32126: GREATER
32127: OR
32128: PUSH
32129: LD_VAR 0 2
32133: PPUSH
32134: CALL_OW 314
32138: NOT
32139: AND
32140: PUSH
32141: LD_VAR 0 2
32145: PPUSH
32146: CALL_OW 263
32150: PUSH
32151: LD_INT 1
32153: NONEQUAL
32154: PUSH
32155: LD_VAR 0 2
32159: PPUSH
32160: CALL_OW 311
32164: OR
32165: AND
32166: IFFALSE 32207
// begin ComCollect ( j , x , y ) ;
32168: LD_VAR 0 2
32172: PPUSH
32173: LD_VAR 0 6
32177: PPUSH
32178: LD_VAR 0 7
32182: PPUSH
32183: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32187: LD_VAR 0 2
32191: PPUSH
32192: LD_VAR 0 8
32196: PPUSH
32197: CALL_OW 172
// exit ;
32201: POP
32202: POP
32203: POP
32204: POP
32205: GO 32215
// end ;
32207: GO 32097
32209: POP
32210: POP
// end ; end ;
32211: GO 31586
32213: POP
32214: POP
// end ; end_of_file
32215: PPOPN 9
32217: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32218: LD_INT 0
32220: PPUSH
32221: PPUSH
32222: PPUSH
32223: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32224: LD_VAR 0 1
32228: PPUSH
32229: CALL_OW 264
32233: PUSH
32234: LD_INT 91
32236: EQUAL
32237: IFFALSE 32309
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32239: LD_INT 68
32241: PPUSH
32242: LD_VAR 0 1
32246: PPUSH
32247: CALL_OW 255
32251: PPUSH
32252: CALL_OW 321
32256: PUSH
32257: LD_INT 2
32259: EQUAL
32260: IFFALSE 32272
// eff := 70 else
32262: LD_ADDR_VAR 0 4
32266: PUSH
32267: LD_INT 70
32269: ST_TO_ADDR
32270: GO 32280
// eff := 30 ;
32272: LD_ADDR_VAR 0 4
32276: PUSH
32277: LD_INT 30
32279: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32280: LD_VAR 0 1
32284: PPUSH
32285: CALL_OW 250
32289: PPUSH
32290: LD_VAR 0 1
32294: PPUSH
32295: CALL_OW 251
32299: PPUSH
32300: LD_VAR 0 4
32304: PPUSH
32305: CALL_OW 495
// end ; end ;
32309: LD_VAR 0 2
32313: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32314: LD_INT 0
32316: PPUSH
// end ;
32317: LD_VAR 0 4
32321: RET
// export function SOS_Command ( cmd ) ; begin
32322: LD_INT 0
32324: PPUSH
// end ;
32325: LD_VAR 0 2
32329: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32330: LD_INT 0
32332: PPUSH
// end ;
32333: LD_VAR 0 6
32337: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32338: LD_INT 0
32340: PPUSH
32341: PPUSH
// if not vehicle or not factory then
32342: LD_VAR 0 1
32346: NOT
32347: PUSH
32348: LD_VAR 0 2
32352: NOT
32353: OR
32354: IFFALSE 32358
// exit ;
32356: GO 32589
// if factoryWaypoints >= factory then
32358: LD_EXP 94
32362: PUSH
32363: LD_VAR 0 2
32367: GREATEREQUAL
32368: IFFALSE 32589
// if factoryWaypoints [ factory ] then
32370: LD_EXP 94
32374: PUSH
32375: LD_VAR 0 2
32379: ARRAY
32380: IFFALSE 32589
// begin if GetControl ( vehicle ) = control_manual then
32382: LD_VAR 0 1
32386: PPUSH
32387: CALL_OW 263
32391: PUSH
32392: LD_INT 1
32394: EQUAL
32395: IFFALSE 32476
// begin driver := IsDrivenBy ( vehicle ) ;
32397: LD_ADDR_VAR 0 4
32401: PUSH
32402: LD_VAR 0 1
32406: PPUSH
32407: CALL_OW 311
32411: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32412: LD_VAR 0 4
32416: PPUSH
32417: LD_EXP 94
32421: PUSH
32422: LD_VAR 0 2
32426: ARRAY
32427: PUSH
32428: LD_INT 3
32430: ARRAY
32431: PPUSH
32432: LD_EXP 94
32436: PUSH
32437: LD_VAR 0 2
32441: ARRAY
32442: PUSH
32443: LD_INT 4
32445: ARRAY
32446: PPUSH
32447: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32451: LD_VAR 0 4
32455: PPUSH
32456: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32460: LD_VAR 0 4
32464: PPUSH
32465: LD_VAR 0 2
32469: PPUSH
32470: CALL_OW 180
// end else
32474: GO 32589
// if GetControl ( vehicle ) = control_remote then
32476: LD_VAR 0 1
32480: PPUSH
32481: CALL_OW 263
32485: PUSH
32486: LD_INT 2
32488: EQUAL
32489: IFFALSE 32550
// begin wait ( 0 0$2 ) ;
32491: LD_INT 70
32493: PPUSH
32494: CALL_OW 67
// if Connect ( vehicle ) then
32498: LD_VAR 0 1
32502: PPUSH
32503: CALL 44613 0 1
32507: IFFALSE 32548
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32509: LD_VAR 0 1
32513: PPUSH
32514: LD_EXP 94
32518: PUSH
32519: LD_VAR 0 2
32523: ARRAY
32524: PUSH
32525: LD_INT 3
32527: ARRAY
32528: PPUSH
32529: LD_EXP 94
32533: PUSH
32534: LD_VAR 0 2
32538: ARRAY
32539: PUSH
32540: LD_INT 4
32542: ARRAY
32543: PPUSH
32544: CALL_OW 171
// end else
32548: GO 32589
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32550: LD_VAR 0 1
32554: PPUSH
32555: LD_EXP 94
32559: PUSH
32560: LD_VAR 0 2
32564: ARRAY
32565: PUSH
32566: LD_INT 3
32568: ARRAY
32569: PPUSH
32570: LD_EXP 94
32574: PUSH
32575: LD_VAR 0 2
32579: ARRAY
32580: PUSH
32581: LD_INT 4
32583: ARRAY
32584: PPUSH
32585: CALL_OW 171
// end ; end ;
32589: LD_VAR 0 3
32593: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32594: LD_INT 0
32596: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32597: LD_VAR 0 1
32601: PUSH
32602: LD_INT 250
32604: EQUAL
32605: PUSH
32606: LD_VAR 0 2
32610: PPUSH
32611: CALL_OW 264
32615: PUSH
32616: LD_INT 81
32618: EQUAL
32619: AND
32620: IFFALSE 32641
// MinerPlaceMine ( unit , x , y ) ;
32622: LD_VAR 0 2
32626: PPUSH
32627: LD_VAR 0 4
32631: PPUSH
32632: LD_VAR 0 5
32636: PPUSH
32637: CALL 35026 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32641: LD_VAR 0 1
32645: PUSH
32646: LD_INT 251
32648: EQUAL
32649: PUSH
32650: LD_VAR 0 2
32654: PPUSH
32655: CALL_OW 264
32659: PUSH
32660: LD_INT 81
32662: EQUAL
32663: AND
32664: IFFALSE 32685
// MinerDetonateMine ( unit , x , y ) ;
32666: LD_VAR 0 2
32670: PPUSH
32671: LD_VAR 0 4
32675: PPUSH
32676: LD_VAR 0 5
32680: PPUSH
32681: CALL 35301 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32685: LD_VAR 0 1
32689: PUSH
32690: LD_INT 252
32692: EQUAL
32693: PUSH
32694: LD_VAR 0 2
32698: PPUSH
32699: CALL_OW 264
32703: PUSH
32704: LD_INT 81
32706: EQUAL
32707: AND
32708: IFFALSE 32729
// MinerCreateMinefield ( unit , x , y ) ;
32710: LD_VAR 0 2
32714: PPUSH
32715: LD_VAR 0 4
32719: PPUSH
32720: LD_VAR 0 5
32724: PPUSH
32725: CALL 35718 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32729: LD_VAR 0 1
32733: PUSH
32734: LD_INT 253
32736: EQUAL
32737: PUSH
32738: LD_VAR 0 2
32742: PPUSH
32743: CALL_OW 257
32747: PUSH
32748: LD_INT 5
32750: EQUAL
32751: AND
32752: IFFALSE 32773
// ComBinocular ( unit , x , y ) ;
32754: LD_VAR 0 2
32758: PPUSH
32759: LD_VAR 0 4
32763: PPUSH
32764: LD_VAR 0 5
32768: PPUSH
32769: CALL 36087 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32773: LD_VAR 0 1
32777: PUSH
32778: LD_INT 254
32780: EQUAL
32781: PUSH
32782: LD_VAR 0 2
32786: PPUSH
32787: CALL_OW 264
32791: PUSH
32792: LD_INT 99
32794: EQUAL
32795: AND
32796: PUSH
32797: LD_VAR 0 3
32801: PPUSH
32802: CALL_OW 263
32806: PUSH
32807: LD_INT 3
32809: EQUAL
32810: AND
32811: IFFALSE 32827
// HackDestroyVehicle ( unit , selectedUnit ) ;
32813: LD_VAR 0 2
32817: PPUSH
32818: LD_VAR 0 3
32822: PPUSH
32823: CALL 34390 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32827: LD_VAR 0 1
32831: PUSH
32832: LD_INT 255
32834: EQUAL
32835: PUSH
32836: LD_VAR 0 2
32840: PPUSH
32841: CALL_OW 264
32845: PUSH
32846: LD_INT 14
32848: PUSH
32849: LD_INT 53
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: IN
32856: AND
32857: PUSH
32858: LD_VAR 0 4
32862: PPUSH
32863: LD_VAR 0 5
32867: PPUSH
32868: CALL_OW 488
32872: AND
32873: IFFALSE 32897
// CutTreeXYR ( unit , x , y , 12 ) ;
32875: LD_VAR 0 2
32879: PPUSH
32880: LD_VAR 0 4
32884: PPUSH
32885: LD_VAR 0 5
32889: PPUSH
32890: LD_INT 12
32892: PPUSH
32893: CALL 32960 0 4
// if cmd = 256 then
32897: LD_VAR 0 1
32901: PUSH
32902: LD_INT 256
32904: EQUAL
32905: IFFALSE 32926
// SetFactoryWaypoint ( unit , x , y ) ;
32907: LD_VAR 0 2
32911: PPUSH
32912: LD_VAR 0 4
32916: PPUSH
32917: LD_VAR 0 5
32921: PPUSH
32922: CALL 30907 0 3
// if cmd = 257 then
32926: LD_VAR 0 1
32930: PUSH
32931: LD_INT 257
32933: EQUAL
32934: IFFALSE 32955
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32936: LD_VAR 0 2
32940: PPUSH
32941: LD_VAR 0 4
32945: PPUSH
32946: LD_VAR 0 5
32950: PPUSH
32951: CALL 31269 0 3
// end ;
32955: LD_VAR 0 6
32959: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32960: LD_INT 0
32962: PPUSH
32963: PPUSH
32964: PPUSH
32965: PPUSH
32966: PPUSH
32967: PPUSH
32968: PPUSH
32969: PPUSH
32970: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32971: LD_VAR 0 1
32975: NOT
32976: PUSH
32977: LD_VAR 0 2
32981: PPUSH
32982: LD_VAR 0 3
32986: PPUSH
32987: CALL_OW 488
32991: NOT
32992: OR
32993: PUSH
32994: LD_VAR 0 4
32998: NOT
32999: OR
33000: IFFALSE 33004
// exit ;
33002: GO 33344
// list := [ ] ;
33004: LD_ADDR_VAR 0 13
33008: PUSH
33009: EMPTY
33010: ST_TO_ADDR
// if x - r < 0 then
33011: LD_VAR 0 2
33015: PUSH
33016: LD_VAR 0 4
33020: MINUS
33021: PUSH
33022: LD_INT 0
33024: LESS
33025: IFFALSE 33037
// min_x := 0 else
33027: LD_ADDR_VAR 0 7
33031: PUSH
33032: LD_INT 0
33034: ST_TO_ADDR
33035: GO 33053
// min_x := x - r ;
33037: LD_ADDR_VAR 0 7
33041: PUSH
33042: LD_VAR 0 2
33046: PUSH
33047: LD_VAR 0 4
33051: MINUS
33052: ST_TO_ADDR
// if y - r < 0 then
33053: LD_VAR 0 3
33057: PUSH
33058: LD_VAR 0 4
33062: MINUS
33063: PUSH
33064: LD_INT 0
33066: LESS
33067: IFFALSE 33079
// min_y := 0 else
33069: LD_ADDR_VAR 0 8
33073: PUSH
33074: LD_INT 0
33076: ST_TO_ADDR
33077: GO 33095
// min_y := y - r ;
33079: LD_ADDR_VAR 0 8
33083: PUSH
33084: LD_VAR 0 3
33088: PUSH
33089: LD_VAR 0 4
33093: MINUS
33094: ST_TO_ADDR
// max_x := x + r ;
33095: LD_ADDR_VAR 0 9
33099: PUSH
33100: LD_VAR 0 2
33104: PUSH
33105: LD_VAR 0 4
33109: PLUS
33110: ST_TO_ADDR
// max_y := y + r ;
33111: LD_ADDR_VAR 0 10
33115: PUSH
33116: LD_VAR 0 3
33120: PUSH
33121: LD_VAR 0 4
33125: PLUS
33126: ST_TO_ADDR
// for _x = min_x to max_x do
33127: LD_ADDR_VAR 0 11
33131: PUSH
33132: DOUBLE
33133: LD_VAR 0 7
33137: DEC
33138: ST_TO_ADDR
33139: LD_VAR 0 9
33143: PUSH
33144: FOR_TO
33145: IFFALSE 33262
// for _y = min_y to max_y do
33147: LD_ADDR_VAR 0 12
33151: PUSH
33152: DOUBLE
33153: LD_VAR 0 8
33157: DEC
33158: ST_TO_ADDR
33159: LD_VAR 0 10
33163: PUSH
33164: FOR_TO
33165: IFFALSE 33258
// begin if not ValidHex ( _x , _y ) then
33167: LD_VAR 0 11
33171: PPUSH
33172: LD_VAR 0 12
33176: PPUSH
33177: CALL_OW 488
33181: NOT
33182: IFFALSE 33186
// continue ;
33184: GO 33164
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33186: LD_VAR 0 11
33190: PPUSH
33191: LD_VAR 0 12
33195: PPUSH
33196: CALL_OW 351
33200: PUSH
33201: LD_VAR 0 11
33205: PPUSH
33206: LD_VAR 0 12
33210: PPUSH
33211: CALL_OW 554
33215: AND
33216: IFFALSE 33256
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33218: LD_ADDR_VAR 0 13
33222: PUSH
33223: LD_VAR 0 13
33227: PPUSH
33228: LD_VAR 0 13
33232: PUSH
33233: LD_INT 1
33235: PLUS
33236: PPUSH
33237: LD_VAR 0 11
33241: PUSH
33242: LD_VAR 0 12
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PPUSH
33251: CALL_OW 2
33255: ST_TO_ADDR
// end ;
33256: GO 33164
33258: POP
33259: POP
33260: GO 33144
33262: POP
33263: POP
// if not list then
33264: LD_VAR 0 13
33268: NOT
33269: IFFALSE 33273
// exit ;
33271: GO 33344
// for i in list do
33273: LD_ADDR_VAR 0 6
33277: PUSH
33278: LD_VAR 0 13
33282: PUSH
33283: FOR_IN
33284: IFFALSE 33342
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33286: LD_VAR 0 1
33290: PPUSH
33291: LD_STRING M
33293: PUSH
33294: LD_VAR 0 6
33298: PUSH
33299: LD_INT 1
33301: ARRAY
33302: PUSH
33303: LD_VAR 0 6
33307: PUSH
33308: LD_INT 2
33310: ARRAY
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: LD_INT 0
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: PUSH
33333: EMPTY
33334: LIST
33335: PPUSH
33336: CALL_OW 447
33340: GO 33283
33342: POP
33343: POP
// end ;
33344: LD_VAR 0 5
33348: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33349: LD_EXP 97
33353: NOT
33354: IFFALSE 33404
33356: GO 33358
33358: DISABLE
// begin initHack := true ;
33359: LD_ADDR_EXP 97
33363: PUSH
33364: LD_INT 1
33366: ST_TO_ADDR
// hackTanks := [ ] ;
33367: LD_ADDR_EXP 98
33371: PUSH
33372: EMPTY
33373: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33374: LD_ADDR_EXP 99
33378: PUSH
33379: EMPTY
33380: ST_TO_ADDR
// hackLimit := 3 ;
33381: LD_ADDR_EXP 100
33385: PUSH
33386: LD_INT 3
33388: ST_TO_ADDR
// hackDist := 12 ;
33389: LD_ADDR_EXP 101
33393: PUSH
33394: LD_INT 12
33396: ST_TO_ADDR
// hackCounter := [ ] ;
33397: LD_ADDR_EXP 102
33401: PUSH
33402: EMPTY
33403: ST_TO_ADDR
// end ;
33404: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33405: LD_EXP 97
33409: PUSH
33410: LD_INT 34
33412: PUSH
33413: LD_INT 99
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PPUSH
33420: CALL_OW 69
33424: AND
33425: IFFALSE 33678
33427: GO 33429
33429: DISABLE
33430: LD_INT 0
33432: PPUSH
33433: PPUSH
// begin enable ;
33434: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33435: LD_ADDR_VAR 0 1
33439: PUSH
33440: LD_INT 34
33442: PUSH
33443: LD_INT 99
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PPUSH
33450: CALL_OW 69
33454: PUSH
33455: FOR_IN
33456: IFFALSE 33676
// begin if not i in hackTanks then
33458: LD_VAR 0 1
33462: PUSH
33463: LD_EXP 98
33467: IN
33468: NOT
33469: IFFALSE 33552
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33471: LD_ADDR_EXP 98
33475: PUSH
33476: LD_EXP 98
33480: PPUSH
33481: LD_EXP 98
33485: PUSH
33486: LD_INT 1
33488: PLUS
33489: PPUSH
33490: LD_VAR 0 1
33494: PPUSH
33495: CALL_OW 1
33499: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33500: LD_ADDR_EXP 99
33504: PUSH
33505: LD_EXP 99
33509: PPUSH
33510: LD_EXP 99
33514: PUSH
33515: LD_INT 1
33517: PLUS
33518: PPUSH
33519: EMPTY
33520: PPUSH
33521: CALL_OW 1
33525: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33526: LD_ADDR_EXP 102
33530: PUSH
33531: LD_EXP 102
33535: PPUSH
33536: LD_EXP 102
33540: PUSH
33541: LD_INT 1
33543: PLUS
33544: PPUSH
33545: EMPTY
33546: PPUSH
33547: CALL_OW 1
33551: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33552: LD_VAR 0 1
33556: PPUSH
33557: CALL_OW 302
33561: NOT
33562: IFFALSE 33575
// begin HackUnlinkAll ( i ) ;
33564: LD_VAR 0 1
33568: PPUSH
33569: CALL 33681 0 1
// continue ;
33573: GO 33455
// end ; HackCheckCapturedStatus ( i ) ;
33575: LD_VAR 0 1
33579: PPUSH
33580: CALL 34124 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33584: LD_ADDR_VAR 0 2
33588: PUSH
33589: LD_INT 81
33591: PUSH
33592: LD_VAR 0 1
33596: PPUSH
33597: CALL_OW 255
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 33
33608: PUSH
33609: LD_INT 3
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 91
33618: PUSH
33619: LD_VAR 0 1
33623: PUSH
33624: LD_EXP 101
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 50
33636: PUSH
33637: EMPTY
33638: LIST
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: PPUSH
33646: CALL_OW 69
33650: ST_TO_ADDR
// if not tmp then
33651: LD_VAR 0 2
33655: NOT
33656: IFFALSE 33660
// continue ;
33658: GO 33455
// HackLink ( i , tmp ) ;
33660: LD_VAR 0 1
33664: PPUSH
33665: LD_VAR 0 2
33669: PPUSH
33670: CALL 33817 0 2
// end ;
33674: GO 33455
33676: POP
33677: POP
// end ;
33678: PPOPN 2
33680: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33681: LD_INT 0
33683: PPUSH
33684: PPUSH
33685: PPUSH
// if not hack in hackTanks then
33686: LD_VAR 0 1
33690: PUSH
33691: LD_EXP 98
33695: IN
33696: NOT
33697: IFFALSE 33701
// exit ;
33699: GO 33812
// index := GetElementIndex ( hackTanks , hack ) ;
33701: LD_ADDR_VAR 0 4
33705: PUSH
33706: LD_EXP 98
33710: PPUSH
33711: LD_VAR 0 1
33715: PPUSH
33716: CALL 41429 0 2
33720: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33721: LD_EXP 99
33725: PUSH
33726: LD_VAR 0 4
33730: ARRAY
33731: IFFALSE 33812
// begin for i in hackTanksCaptured [ index ] do
33733: LD_ADDR_VAR 0 3
33737: PUSH
33738: LD_EXP 99
33742: PUSH
33743: LD_VAR 0 4
33747: ARRAY
33748: PUSH
33749: FOR_IN
33750: IFFALSE 33776
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33752: LD_VAR 0 3
33756: PUSH
33757: LD_INT 1
33759: ARRAY
33760: PPUSH
33761: LD_VAR 0 3
33765: PUSH
33766: LD_INT 2
33768: ARRAY
33769: PPUSH
33770: CALL_OW 235
33774: GO 33749
33776: POP
33777: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33778: LD_ADDR_EXP 99
33782: PUSH
33783: LD_EXP 99
33787: PPUSH
33788: LD_VAR 0 4
33792: PPUSH
33793: EMPTY
33794: PPUSH
33795: CALL_OW 1
33799: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33800: LD_VAR 0 1
33804: PPUSH
33805: LD_INT 0
33807: PPUSH
33808: CALL_OW 505
// end ; end ;
33812: LD_VAR 0 2
33816: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33817: LD_INT 0
33819: PPUSH
33820: PPUSH
33821: PPUSH
// if not hack in hackTanks or not vehicles then
33822: LD_VAR 0 1
33826: PUSH
33827: LD_EXP 98
33831: IN
33832: NOT
33833: PUSH
33834: LD_VAR 0 2
33838: NOT
33839: OR
33840: IFFALSE 33844
// exit ;
33842: GO 34119
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33844: LD_ADDR_VAR 0 2
33848: PUSH
33849: LD_VAR 0 1
33853: PPUSH
33854: LD_VAR 0 2
33858: PPUSH
33859: LD_INT 1
33861: PPUSH
33862: LD_INT 1
33864: PPUSH
33865: CALL 42079 0 4
33869: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33870: LD_ADDR_VAR 0 5
33874: PUSH
33875: LD_EXP 98
33879: PPUSH
33880: LD_VAR 0 1
33884: PPUSH
33885: CALL 41429 0 2
33889: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33890: LD_EXP 99
33894: PUSH
33895: LD_VAR 0 5
33899: ARRAY
33900: PUSH
33901: LD_EXP 100
33905: LESS
33906: IFFALSE 34095
// begin for i := 1 to vehicles do
33908: LD_ADDR_VAR 0 4
33912: PUSH
33913: DOUBLE
33914: LD_INT 1
33916: DEC
33917: ST_TO_ADDR
33918: LD_VAR 0 2
33922: PUSH
33923: FOR_TO
33924: IFFALSE 34093
// begin if hackTanksCaptured [ index ] = hackLimit then
33926: LD_EXP 99
33930: PUSH
33931: LD_VAR 0 5
33935: ARRAY
33936: PUSH
33937: LD_EXP 100
33941: EQUAL
33942: IFFALSE 33946
// break ;
33944: GO 34093
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33946: LD_ADDR_EXP 102
33950: PUSH
33951: LD_EXP 102
33955: PPUSH
33956: LD_VAR 0 5
33960: PPUSH
33961: LD_EXP 102
33965: PUSH
33966: LD_VAR 0 5
33970: ARRAY
33971: PUSH
33972: LD_INT 1
33974: PLUS
33975: PPUSH
33976: CALL_OW 1
33980: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33981: LD_ADDR_EXP 99
33985: PUSH
33986: LD_EXP 99
33990: PPUSH
33991: LD_VAR 0 5
33995: PUSH
33996: LD_EXP 99
34000: PUSH
34001: LD_VAR 0 5
34005: ARRAY
34006: PUSH
34007: LD_INT 1
34009: PLUS
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PPUSH
34015: LD_VAR 0 2
34019: PUSH
34020: LD_VAR 0 4
34024: ARRAY
34025: PUSH
34026: LD_VAR 0 2
34030: PUSH
34031: LD_VAR 0 4
34035: ARRAY
34036: PPUSH
34037: CALL_OW 255
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PPUSH
34046: CALL 41644 0 3
34050: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34051: LD_VAR 0 2
34055: PUSH
34056: LD_VAR 0 4
34060: ARRAY
34061: PPUSH
34062: LD_VAR 0 1
34066: PPUSH
34067: CALL_OW 255
34071: PPUSH
34072: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34076: LD_VAR 0 2
34080: PUSH
34081: LD_VAR 0 4
34085: ARRAY
34086: PPUSH
34087: CALL_OW 141
// end ;
34091: GO 33923
34093: POP
34094: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34095: LD_VAR 0 1
34099: PPUSH
34100: LD_EXP 99
34104: PUSH
34105: LD_VAR 0 5
34109: ARRAY
34110: PUSH
34111: LD_INT 0
34113: PLUS
34114: PPUSH
34115: CALL_OW 505
// end ;
34119: LD_VAR 0 3
34123: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34124: LD_INT 0
34126: PPUSH
34127: PPUSH
34128: PPUSH
34129: PPUSH
// if not hack in hackTanks then
34130: LD_VAR 0 1
34134: PUSH
34135: LD_EXP 98
34139: IN
34140: NOT
34141: IFFALSE 34145
// exit ;
34143: GO 34385
// index := GetElementIndex ( hackTanks , hack ) ;
34145: LD_ADDR_VAR 0 4
34149: PUSH
34150: LD_EXP 98
34154: PPUSH
34155: LD_VAR 0 1
34159: PPUSH
34160: CALL 41429 0 2
34164: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34165: LD_ADDR_VAR 0 3
34169: PUSH
34170: DOUBLE
34171: LD_EXP 99
34175: PUSH
34176: LD_VAR 0 4
34180: ARRAY
34181: INC
34182: ST_TO_ADDR
34183: LD_INT 1
34185: PUSH
34186: FOR_DOWNTO
34187: IFFALSE 34359
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34189: LD_ADDR_VAR 0 5
34193: PUSH
34194: LD_EXP 99
34198: PUSH
34199: LD_VAR 0 4
34203: ARRAY
34204: PUSH
34205: LD_VAR 0 3
34209: ARRAY
34210: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34211: LD_VAR 0 5
34215: PUSH
34216: LD_INT 1
34218: ARRAY
34219: PPUSH
34220: CALL_OW 302
34224: NOT
34225: PUSH
34226: LD_VAR 0 5
34230: PUSH
34231: LD_INT 1
34233: ARRAY
34234: PPUSH
34235: CALL_OW 255
34239: PUSH
34240: LD_VAR 0 1
34244: PPUSH
34245: CALL_OW 255
34249: NONEQUAL
34250: OR
34251: IFFALSE 34357
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34253: LD_VAR 0 5
34257: PUSH
34258: LD_INT 1
34260: ARRAY
34261: PPUSH
34262: CALL_OW 305
34266: PUSH
34267: LD_VAR 0 5
34271: PUSH
34272: LD_INT 1
34274: ARRAY
34275: PPUSH
34276: CALL_OW 255
34280: PUSH
34281: LD_VAR 0 1
34285: PPUSH
34286: CALL_OW 255
34290: EQUAL
34291: AND
34292: IFFALSE 34316
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34294: LD_VAR 0 5
34298: PUSH
34299: LD_INT 1
34301: ARRAY
34302: PPUSH
34303: LD_VAR 0 5
34307: PUSH
34308: LD_INT 2
34310: ARRAY
34311: PPUSH
34312: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34316: LD_ADDR_EXP 99
34320: PUSH
34321: LD_EXP 99
34325: PPUSH
34326: LD_VAR 0 4
34330: PPUSH
34331: LD_EXP 99
34335: PUSH
34336: LD_VAR 0 4
34340: ARRAY
34341: PPUSH
34342: LD_VAR 0 3
34346: PPUSH
34347: CALL_OW 3
34351: PPUSH
34352: CALL_OW 1
34356: ST_TO_ADDR
// end ; end ;
34357: GO 34186
34359: POP
34360: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34361: LD_VAR 0 1
34365: PPUSH
34366: LD_EXP 99
34370: PUSH
34371: LD_VAR 0 4
34375: ARRAY
34376: PUSH
34377: LD_INT 0
34379: PLUS
34380: PPUSH
34381: CALL_OW 505
// end ;
34385: LD_VAR 0 2
34389: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34390: LD_INT 0
34392: PPUSH
34393: PPUSH
34394: PPUSH
34395: PPUSH
// if not hack in hackTanks then
34396: LD_VAR 0 1
34400: PUSH
34401: LD_EXP 98
34405: IN
34406: NOT
34407: IFFALSE 34411
// exit ;
34409: GO 34496
// index := GetElementIndex ( hackTanks , hack ) ;
34411: LD_ADDR_VAR 0 5
34415: PUSH
34416: LD_EXP 98
34420: PPUSH
34421: LD_VAR 0 1
34425: PPUSH
34426: CALL 41429 0 2
34430: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34431: LD_ADDR_VAR 0 4
34435: PUSH
34436: DOUBLE
34437: LD_INT 1
34439: DEC
34440: ST_TO_ADDR
34441: LD_EXP 99
34445: PUSH
34446: LD_VAR 0 5
34450: ARRAY
34451: PUSH
34452: FOR_TO
34453: IFFALSE 34494
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34455: LD_EXP 99
34459: PUSH
34460: LD_VAR 0 5
34464: ARRAY
34465: PUSH
34466: LD_VAR 0 4
34470: ARRAY
34471: PUSH
34472: LD_INT 1
34474: ARRAY
34475: PUSH
34476: LD_VAR 0 2
34480: EQUAL
34481: IFFALSE 34492
// KillUnit ( vehicle ) ;
34483: LD_VAR 0 2
34487: PPUSH
34488: CALL_OW 66
34492: GO 34452
34494: POP
34495: POP
// end ;
34496: LD_VAR 0 3
34500: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34501: LD_EXP 103
34505: NOT
34506: IFFALSE 34541
34508: GO 34510
34510: DISABLE
// begin initMiner := true ;
34511: LD_ADDR_EXP 103
34515: PUSH
34516: LD_INT 1
34518: ST_TO_ADDR
// minersList := [ ] ;
34519: LD_ADDR_EXP 104
34523: PUSH
34524: EMPTY
34525: ST_TO_ADDR
// minerMinesList := [ ] ;
34526: LD_ADDR_EXP 105
34530: PUSH
34531: EMPTY
34532: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34533: LD_ADDR_EXP 106
34537: PUSH
34538: LD_INT 5
34540: ST_TO_ADDR
// end ;
34541: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34542: LD_EXP 103
34546: PUSH
34547: LD_INT 34
34549: PUSH
34550: LD_INT 81
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PPUSH
34557: CALL_OW 69
34561: AND
34562: IFFALSE 35023
34564: GO 34566
34566: DISABLE
34567: LD_INT 0
34569: PPUSH
34570: PPUSH
34571: PPUSH
34572: PPUSH
// begin enable ;
34573: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34574: LD_ADDR_VAR 0 1
34578: PUSH
34579: LD_INT 34
34581: PUSH
34582: LD_INT 81
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PPUSH
34589: CALL_OW 69
34593: PUSH
34594: FOR_IN
34595: IFFALSE 34667
// begin if not i in minersList then
34597: LD_VAR 0 1
34601: PUSH
34602: LD_EXP 104
34606: IN
34607: NOT
34608: IFFALSE 34665
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34610: LD_ADDR_EXP 104
34614: PUSH
34615: LD_EXP 104
34619: PPUSH
34620: LD_EXP 104
34624: PUSH
34625: LD_INT 1
34627: PLUS
34628: PPUSH
34629: LD_VAR 0 1
34633: PPUSH
34634: CALL_OW 1
34638: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34639: LD_ADDR_EXP 105
34643: PUSH
34644: LD_EXP 105
34648: PPUSH
34649: LD_EXP 105
34653: PUSH
34654: LD_INT 1
34656: PLUS
34657: PPUSH
34658: EMPTY
34659: PPUSH
34660: CALL_OW 1
34664: ST_TO_ADDR
// end end ;
34665: GO 34594
34667: POP
34668: POP
// for i := minerMinesList downto 1 do
34669: LD_ADDR_VAR 0 1
34673: PUSH
34674: DOUBLE
34675: LD_EXP 105
34679: INC
34680: ST_TO_ADDR
34681: LD_INT 1
34683: PUSH
34684: FOR_DOWNTO
34685: IFFALSE 35021
// begin if IsLive ( minersList [ i ] ) then
34687: LD_EXP 104
34691: PUSH
34692: LD_VAR 0 1
34696: ARRAY
34697: PPUSH
34698: CALL_OW 300
34702: IFFALSE 34730
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34704: LD_EXP 104
34708: PUSH
34709: LD_VAR 0 1
34713: ARRAY
34714: PPUSH
34715: LD_EXP 105
34719: PUSH
34720: LD_VAR 0 1
34724: ARRAY
34725: PPUSH
34726: CALL_OW 505
// if not minerMinesList [ i ] then
34730: LD_EXP 105
34734: PUSH
34735: LD_VAR 0 1
34739: ARRAY
34740: NOT
34741: IFFALSE 34745
// continue ;
34743: GO 34684
// for j := minerMinesList [ i ] downto 1 do
34745: LD_ADDR_VAR 0 2
34749: PUSH
34750: DOUBLE
34751: LD_EXP 105
34755: PUSH
34756: LD_VAR 0 1
34760: ARRAY
34761: INC
34762: ST_TO_ADDR
34763: LD_INT 1
34765: PUSH
34766: FOR_DOWNTO
34767: IFFALSE 35017
// begin side := GetSide ( minersList [ i ] ) ;
34769: LD_ADDR_VAR 0 3
34773: PUSH
34774: LD_EXP 104
34778: PUSH
34779: LD_VAR 0 1
34783: ARRAY
34784: PPUSH
34785: CALL_OW 255
34789: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34790: LD_ADDR_VAR 0 4
34794: PUSH
34795: LD_EXP 105
34799: PUSH
34800: LD_VAR 0 1
34804: ARRAY
34805: PUSH
34806: LD_VAR 0 2
34810: ARRAY
34811: PUSH
34812: LD_INT 1
34814: ARRAY
34815: PPUSH
34816: LD_EXP 105
34820: PUSH
34821: LD_VAR 0 1
34825: ARRAY
34826: PUSH
34827: LD_VAR 0 2
34831: ARRAY
34832: PUSH
34833: LD_INT 2
34835: ARRAY
34836: PPUSH
34837: CALL_OW 428
34841: ST_TO_ADDR
// if not tmp then
34842: LD_VAR 0 4
34846: NOT
34847: IFFALSE 34851
// continue ;
34849: GO 34766
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34851: LD_VAR 0 4
34855: PUSH
34856: LD_INT 81
34858: PUSH
34859: LD_VAR 0 3
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PPUSH
34868: CALL_OW 69
34872: IN
34873: PUSH
34874: LD_EXP 105
34878: PUSH
34879: LD_VAR 0 1
34883: ARRAY
34884: PUSH
34885: LD_VAR 0 2
34889: ARRAY
34890: PUSH
34891: LD_INT 1
34893: ARRAY
34894: PPUSH
34895: LD_EXP 105
34899: PUSH
34900: LD_VAR 0 1
34904: ARRAY
34905: PUSH
34906: LD_VAR 0 2
34910: ARRAY
34911: PUSH
34912: LD_INT 2
34914: ARRAY
34915: PPUSH
34916: CALL_OW 458
34920: AND
34921: IFFALSE 35015
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34923: LD_EXP 105
34927: PUSH
34928: LD_VAR 0 1
34932: ARRAY
34933: PUSH
34934: LD_VAR 0 2
34938: ARRAY
34939: PUSH
34940: LD_INT 1
34942: ARRAY
34943: PPUSH
34944: LD_EXP 105
34948: PUSH
34949: LD_VAR 0 1
34953: ARRAY
34954: PUSH
34955: LD_VAR 0 2
34959: ARRAY
34960: PUSH
34961: LD_INT 2
34963: ARRAY
34964: PPUSH
34965: LD_VAR 0 3
34969: PPUSH
34970: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34974: LD_ADDR_EXP 105
34978: PUSH
34979: LD_EXP 105
34983: PPUSH
34984: LD_VAR 0 1
34988: PPUSH
34989: LD_EXP 105
34993: PUSH
34994: LD_VAR 0 1
34998: ARRAY
34999: PPUSH
35000: LD_VAR 0 2
35004: PPUSH
35005: CALL_OW 3
35009: PPUSH
35010: CALL_OW 1
35014: ST_TO_ADDR
// end ; end ;
35015: GO 34766
35017: POP
35018: POP
// end ;
35019: GO 34684
35021: POP
35022: POP
// end ;
35023: PPOPN 4
35025: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35026: LD_INT 0
35028: PPUSH
35029: PPUSH
// result := false ;
35030: LD_ADDR_VAR 0 4
35034: PUSH
35035: LD_INT 0
35037: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35038: LD_VAR 0 1
35042: PPUSH
35043: CALL_OW 264
35047: PUSH
35048: LD_INT 81
35050: EQUAL
35051: NOT
35052: IFFALSE 35056
// exit ;
35054: GO 35296
// index := GetElementIndex ( minersList , unit ) ;
35056: LD_ADDR_VAR 0 5
35060: PUSH
35061: LD_EXP 104
35065: PPUSH
35066: LD_VAR 0 1
35070: PPUSH
35071: CALL 41429 0 2
35075: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35076: LD_EXP 105
35080: PUSH
35081: LD_VAR 0 5
35085: ARRAY
35086: PUSH
35087: LD_EXP 106
35091: GREATEREQUAL
35092: IFFALSE 35096
// exit ;
35094: GO 35296
// ComMoveXY ( unit , x , y ) ;
35096: LD_VAR 0 1
35100: PPUSH
35101: LD_VAR 0 2
35105: PPUSH
35106: LD_VAR 0 3
35110: PPUSH
35111: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35115: LD_INT 35
35117: PPUSH
35118: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35122: LD_VAR 0 1
35126: PPUSH
35127: LD_VAR 0 2
35131: PPUSH
35132: LD_VAR 0 3
35136: PPUSH
35137: CALL 72765 0 3
35141: NOT
35142: PUSH
35143: LD_VAR 0 1
35147: PPUSH
35148: CALL_OW 314
35152: AND
35153: IFFALSE 35157
// exit ;
35155: GO 35296
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35157: LD_VAR 0 2
35161: PPUSH
35162: LD_VAR 0 3
35166: PPUSH
35167: CALL_OW 428
35171: PUSH
35172: LD_VAR 0 1
35176: EQUAL
35177: PUSH
35178: LD_VAR 0 1
35182: PPUSH
35183: CALL_OW 314
35187: NOT
35188: AND
35189: IFFALSE 35115
// PlaySoundXY ( x , y , PlantMine ) ;
35191: LD_VAR 0 2
35195: PPUSH
35196: LD_VAR 0 3
35200: PPUSH
35201: LD_STRING PlantMine
35203: PPUSH
35204: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35208: LD_VAR 0 2
35212: PPUSH
35213: LD_VAR 0 3
35217: PPUSH
35218: LD_VAR 0 1
35222: PPUSH
35223: CALL_OW 255
35227: PPUSH
35228: LD_INT 0
35230: PPUSH
35231: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35235: LD_ADDR_EXP 105
35239: PUSH
35240: LD_EXP 105
35244: PPUSH
35245: LD_VAR 0 5
35249: PUSH
35250: LD_EXP 105
35254: PUSH
35255: LD_VAR 0 5
35259: ARRAY
35260: PUSH
35261: LD_INT 1
35263: PLUS
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PPUSH
35269: LD_VAR 0 2
35273: PUSH
35274: LD_VAR 0 3
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PPUSH
35283: CALL 41644 0 3
35287: ST_TO_ADDR
// result := true ;
35288: LD_ADDR_VAR 0 4
35292: PUSH
35293: LD_INT 1
35295: ST_TO_ADDR
// end ;
35296: LD_VAR 0 4
35300: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35301: LD_INT 0
35303: PPUSH
35304: PPUSH
35305: PPUSH
// if not unit in minersList then
35306: LD_VAR 0 1
35310: PUSH
35311: LD_EXP 104
35315: IN
35316: NOT
35317: IFFALSE 35321
// exit ;
35319: GO 35713
// index := GetElementIndex ( minersList , unit ) ;
35321: LD_ADDR_VAR 0 6
35325: PUSH
35326: LD_EXP 104
35330: PPUSH
35331: LD_VAR 0 1
35335: PPUSH
35336: CALL 41429 0 2
35340: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35341: LD_ADDR_VAR 0 5
35345: PUSH
35346: DOUBLE
35347: LD_EXP 105
35351: PUSH
35352: LD_VAR 0 6
35356: ARRAY
35357: INC
35358: ST_TO_ADDR
35359: LD_INT 1
35361: PUSH
35362: FOR_DOWNTO
35363: IFFALSE 35524
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35365: LD_EXP 105
35369: PUSH
35370: LD_VAR 0 6
35374: ARRAY
35375: PUSH
35376: LD_VAR 0 5
35380: ARRAY
35381: PUSH
35382: LD_INT 1
35384: ARRAY
35385: PUSH
35386: LD_VAR 0 2
35390: EQUAL
35391: PUSH
35392: LD_EXP 105
35396: PUSH
35397: LD_VAR 0 6
35401: ARRAY
35402: PUSH
35403: LD_VAR 0 5
35407: ARRAY
35408: PUSH
35409: LD_INT 2
35411: ARRAY
35412: PUSH
35413: LD_VAR 0 3
35417: EQUAL
35418: AND
35419: IFFALSE 35522
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35421: LD_EXP 105
35425: PUSH
35426: LD_VAR 0 6
35430: ARRAY
35431: PUSH
35432: LD_VAR 0 5
35436: ARRAY
35437: PUSH
35438: LD_INT 1
35440: ARRAY
35441: PPUSH
35442: LD_EXP 105
35446: PUSH
35447: LD_VAR 0 6
35451: ARRAY
35452: PUSH
35453: LD_VAR 0 5
35457: ARRAY
35458: PUSH
35459: LD_INT 2
35461: ARRAY
35462: PPUSH
35463: LD_VAR 0 1
35467: PPUSH
35468: CALL_OW 255
35472: PPUSH
35473: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35477: LD_ADDR_EXP 105
35481: PUSH
35482: LD_EXP 105
35486: PPUSH
35487: LD_VAR 0 6
35491: PPUSH
35492: LD_EXP 105
35496: PUSH
35497: LD_VAR 0 6
35501: ARRAY
35502: PPUSH
35503: LD_VAR 0 5
35507: PPUSH
35508: CALL_OW 3
35512: PPUSH
35513: CALL_OW 1
35517: ST_TO_ADDR
// exit ;
35518: POP
35519: POP
35520: GO 35713
// end ; end ;
35522: GO 35362
35524: POP
35525: POP
// for i := minerMinesList [ index ] downto 1 do
35526: LD_ADDR_VAR 0 5
35530: PUSH
35531: DOUBLE
35532: LD_EXP 105
35536: PUSH
35537: LD_VAR 0 6
35541: ARRAY
35542: INC
35543: ST_TO_ADDR
35544: LD_INT 1
35546: PUSH
35547: FOR_DOWNTO
35548: IFFALSE 35711
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35550: LD_EXP 105
35554: PUSH
35555: LD_VAR 0 6
35559: ARRAY
35560: PUSH
35561: LD_VAR 0 5
35565: ARRAY
35566: PUSH
35567: LD_INT 1
35569: ARRAY
35570: PPUSH
35571: LD_EXP 105
35575: PUSH
35576: LD_VAR 0 6
35580: ARRAY
35581: PUSH
35582: LD_VAR 0 5
35586: ARRAY
35587: PUSH
35588: LD_INT 2
35590: ARRAY
35591: PPUSH
35592: LD_VAR 0 2
35596: PPUSH
35597: LD_VAR 0 3
35601: PPUSH
35602: CALL_OW 298
35606: PUSH
35607: LD_INT 6
35609: LESS
35610: IFFALSE 35709
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35612: LD_EXP 105
35616: PUSH
35617: LD_VAR 0 6
35621: ARRAY
35622: PUSH
35623: LD_VAR 0 5
35627: ARRAY
35628: PUSH
35629: LD_INT 1
35631: ARRAY
35632: PPUSH
35633: LD_EXP 105
35637: PUSH
35638: LD_VAR 0 6
35642: ARRAY
35643: PUSH
35644: LD_VAR 0 5
35648: ARRAY
35649: PUSH
35650: LD_INT 2
35652: ARRAY
35653: PPUSH
35654: LD_VAR 0 1
35658: PPUSH
35659: CALL_OW 255
35663: PPUSH
35664: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35668: LD_ADDR_EXP 105
35672: PUSH
35673: LD_EXP 105
35677: PPUSH
35678: LD_VAR 0 6
35682: PPUSH
35683: LD_EXP 105
35687: PUSH
35688: LD_VAR 0 6
35692: ARRAY
35693: PPUSH
35694: LD_VAR 0 5
35698: PPUSH
35699: CALL_OW 3
35703: PPUSH
35704: CALL_OW 1
35708: ST_TO_ADDR
// end ; end ;
35709: GO 35547
35711: POP
35712: POP
// end ;
35713: LD_VAR 0 4
35717: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35718: LD_INT 0
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
35726: PPUSH
35727: PPUSH
35728: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35729: LD_VAR 0 1
35733: PPUSH
35734: CALL_OW 264
35738: PUSH
35739: LD_INT 81
35741: EQUAL
35742: NOT
35743: PUSH
35744: LD_VAR 0 1
35748: PUSH
35749: LD_EXP 104
35753: IN
35754: NOT
35755: OR
35756: IFFALSE 35760
// exit ;
35758: GO 36082
// index := GetElementIndex ( minersList , unit ) ;
35760: LD_ADDR_VAR 0 6
35764: PUSH
35765: LD_EXP 104
35769: PPUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL 41429 0 2
35779: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35780: LD_ADDR_VAR 0 8
35784: PUSH
35785: LD_EXP 106
35789: PUSH
35790: LD_EXP 105
35794: PUSH
35795: LD_VAR 0 6
35799: ARRAY
35800: MINUS
35801: ST_TO_ADDR
// if not minesFreeAmount then
35802: LD_VAR 0 8
35806: NOT
35807: IFFALSE 35811
// exit ;
35809: GO 36082
// tmp := [ ] ;
35811: LD_ADDR_VAR 0 7
35815: PUSH
35816: EMPTY
35817: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35818: LD_ADDR_VAR 0 5
35822: PUSH
35823: DOUBLE
35824: LD_INT 1
35826: DEC
35827: ST_TO_ADDR
35828: LD_VAR 0 8
35832: PUSH
35833: FOR_TO
35834: IFFALSE 36029
// begin _d := rand ( 0 , 5 ) ;
35836: LD_ADDR_VAR 0 11
35840: PUSH
35841: LD_INT 0
35843: PPUSH
35844: LD_INT 5
35846: PPUSH
35847: CALL_OW 12
35851: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35852: LD_ADDR_VAR 0 12
35856: PUSH
35857: LD_INT 2
35859: PPUSH
35860: LD_INT 6
35862: PPUSH
35863: CALL_OW 12
35867: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35868: LD_ADDR_VAR 0 9
35872: PUSH
35873: LD_VAR 0 2
35877: PPUSH
35878: LD_VAR 0 11
35882: PPUSH
35883: LD_VAR 0 12
35887: PPUSH
35888: CALL_OW 272
35892: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35893: LD_ADDR_VAR 0 10
35897: PUSH
35898: LD_VAR 0 3
35902: PPUSH
35903: LD_VAR 0 11
35907: PPUSH
35908: LD_VAR 0 12
35912: PPUSH
35913: CALL_OW 273
35917: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35918: LD_VAR 0 9
35922: PPUSH
35923: LD_VAR 0 10
35927: PPUSH
35928: CALL_OW 488
35932: PUSH
35933: LD_VAR 0 9
35937: PUSH
35938: LD_VAR 0 10
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_VAR 0 7
35951: IN
35952: NOT
35953: AND
35954: PUSH
35955: LD_VAR 0 9
35959: PPUSH
35960: LD_VAR 0 10
35964: PPUSH
35965: CALL_OW 458
35969: NOT
35970: AND
35971: IFFALSE 36013
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35973: LD_ADDR_VAR 0 7
35977: PUSH
35978: LD_VAR 0 7
35982: PPUSH
35983: LD_VAR 0 7
35987: PUSH
35988: LD_INT 1
35990: PLUS
35991: PPUSH
35992: LD_VAR 0 9
35996: PUSH
35997: LD_VAR 0 10
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PPUSH
36006: CALL_OW 1
36010: ST_TO_ADDR
36011: GO 36027
// i := i - 1 ;
36013: LD_ADDR_VAR 0 5
36017: PUSH
36018: LD_VAR 0 5
36022: PUSH
36023: LD_INT 1
36025: MINUS
36026: ST_TO_ADDR
// end ;
36027: GO 35833
36029: POP
36030: POP
// for i in tmp do
36031: LD_ADDR_VAR 0 5
36035: PUSH
36036: LD_VAR 0 7
36040: PUSH
36041: FOR_IN
36042: IFFALSE 36080
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36044: LD_VAR 0 1
36048: PPUSH
36049: LD_VAR 0 5
36053: PUSH
36054: LD_INT 1
36056: ARRAY
36057: PPUSH
36058: LD_VAR 0 5
36062: PUSH
36063: LD_INT 2
36065: ARRAY
36066: PPUSH
36067: CALL 35026 0 3
36071: NOT
36072: IFFALSE 36078
// exit ;
36074: POP
36075: POP
36076: GO 36082
36078: GO 36041
36080: POP
36081: POP
// end ;
36082: LD_VAR 0 4
36086: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36087: LD_INT 0
36089: PPUSH
36090: PPUSH
36091: PPUSH
36092: PPUSH
36093: PPUSH
36094: PPUSH
36095: PPUSH
// if not GetClass ( unit ) = class_sniper then
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL_OW 257
36105: PUSH
36106: LD_INT 5
36108: EQUAL
36109: NOT
36110: IFFALSE 36114
// exit ;
36112: GO 36502
// dist := 8 ;
36114: LD_ADDR_VAR 0 5
36118: PUSH
36119: LD_INT 8
36121: ST_TO_ADDR
// viewRange := 12 ;
36122: LD_ADDR_VAR 0 7
36126: PUSH
36127: LD_INT 12
36129: ST_TO_ADDR
// side := GetSide ( unit ) ;
36130: LD_ADDR_VAR 0 6
36134: PUSH
36135: LD_VAR 0 1
36139: PPUSH
36140: CALL_OW 255
36144: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36145: LD_INT 61
36147: PPUSH
36148: LD_VAR 0 6
36152: PPUSH
36153: CALL_OW 321
36157: PUSH
36158: LD_INT 2
36160: EQUAL
36161: IFFALSE 36171
// viewRange := 16 ;
36163: LD_ADDR_VAR 0 7
36167: PUSH
36168: LD_INT 16
36170: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36171: LD_VAR 0 1
36175: PPUSH
36176: LD_VAR 0 2
36180: PPUSH
36181: LD_VAR 0 3
36185: PPUSH
36186: CALL_OW 297
36190: PUSH
36191: LD_VAR 0 5
36195: GREATER
36196: IFFALSE 36275
// begin ComMoveXY ( unit , x , y ) ;
36198: LD_VAR 0 1
36202: PPUSH
36203: LD_VAR 0 2
36207: PPUSH
36208: LD_VAR 0 3
36212: PPUSH
36213: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36217: LD_INT 35
36219: PPUSH
36220: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36224: LD_VAR 0 1
36228: PPUSH
36229: LD_VAR 0 2
36233: PPUSH
36234: LD_VAR 0 3
36238: PPUSH
36239: CALL 72765 0 3
36243: NOT
36244: IFFALSE 36248
// exit ;
36246: GO 36502
// until GetDistUnitXY ( unit , x , y ) < dist ;
36248: LD_VAR 0 1
36252: PPUSH
36253: LD_VAR 0 2
36257: PPUSH
36258: LD_VAR 0 3
36262: PPUSH
36263: CALL_OW 297
36267: PUSH
36268: LD_VAR 0 5
36272: LESS
36273: IFFALSE 36217
// end ; ComTurnXY ( unit , x , y ) ;
36275: LD_VAR 0 1
36279: PPUSH
36280: LD_VAR 0 2
36284: PPUSH
36285: LD_VAR 0 3
36289: PPUSH
36290: CALL_OW 118
// wait ( 5 ) ;
36294: LD_INT 5
36296: PPUSH
36297: CALL_OW 67
// _d := GetDir ( unit ) ;
36301: LD_ADDR_VAR 0 10
36305: PUSH
36306: LD_VAR 0 1
36310: PPUSH
36311: CALL_OW 254
36315: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36316: LD_ADDR_VAR 0 8
36320: PUSH
36321: LD_VAR 0 1
36325: PPUSH
36326: CALL_OW 250
36330: PPUSH
36331: LD_VAR 0 10
36335: PPUSH
36336: LD_VAR 0 5
36340: PPUSH
36341: CALL_OW 272
36345: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36346: LD_ADDR_VAR 0 9
36350: PUSH
36351: LD_VAR 0 1
36355: PPUSH
36356: CALL_OW 251
36360: PPUSH
36361: LD_VAR 0 10
36365: PPUSH
36366: LD_VAR 0 5
36370: PPUSH
36371: CALL_OW 273
36375: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36376: LD_VAR 0 8
36380: PPUSH
36381: LD_VAR 0 9
36385: PPUSH
36386: CALL_OW 488
36390: NOT
36391: IFFALSE 36395
// exit ;
36393: GO 36502
// ComAnimCustom ( unit , 1 ) ;
36395: LD_VAR 0 1
36399: PPUSH
36400: LD_INT 1
36402: PPUSH
36403: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36407: LD_VAR 0 8
36411: PPUSH
36412: LD_VAR 0 9
36416: PPUSH
36417: LD_VAR 0 6
36421: PPUSH
36422: LD_VAR 0 7
36426: PPUSH
36427: CALL_OW 330
// repeat wait ( 1 ) ;
36431: LD_INT 1
36433: PPUSH
36434: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36438: LD_VAR 0 1
36442: PPUSH
36443: CALL_OW 316
36447: PUSH
36448: LD_VAR 0 1
36452: PPUSH
36453: CALL_OW 314
36457: OR
36458: PUSH
36459: LD_VAR 0 1
36463: PPUSH
36464: CALL_OW 302
36468: NOT
36469: OR
36470: PUSH
36471: LD_VAR 0 1
36475: PPUSH
36476: CALL_OW 301
36480: OR
36481: IFFALSE 36431
// RemoveSeeing ( _x , _y , side ) ;
36483: LD_VAR 0 8
36487: PPUSH
36488: LD_VAR 0 9
36492: PPUSH
36493: LD_VAR 0 6
36497: PPUSH
36498: CALL_OW 331
// end ; end_of_file
36502: LD_VAR 0 4
36506: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36507: LD_INT 0
36509: PPUSH
36510: PPUSH
// if exist_mode then
36511: LD_VAR 0 2
36515: IFFALSE 36540
// unit := CreateCharacter ( prefix & ident ) else
36517: LD_ADDR_VAR 0 5
36521: PUSH
36522: LD_VAR 0 3
36526: PUSH
36527: LD_VAR 0 1
36531: STR
36532: PPUSH
36533: CALL_OW 34
36537: ST_TO_ADDR
36538: GO 36555
// unit := NewCharacter ( ident ) ;
36540: LD_ADDR_VAR 0 5
36544: PUSH
36545: LD_VAR 0 1
36549: PPUSH
36550: CALL_OW 25
36554: ST_TO_ADDR
// result := unit ;
36555: LD_ADDR_VAR 0 4
36559: PUSH
36560: LD_VAR 0 5
36564: ST_TO_ADDR
// end ;
36565: LD_VAR 0 4
36569: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36570: LD_INT 0
36572: PPUSH
36573: PPUSH
// if not side or not nation then
36574: LD_VAR 0 1
36578: NOT
36579: PUSH
36580: LD_VAR 0 2
36584: NOT
36585: OR
36586: IFFALSE 36590
// exit ;
36588: GO 37358
// case nation of nation_american :
36590: LD_VAR 0 2
36594: PUSH
36595: LD_INT 1
36597: DOUBLE
36598: EQUAL
36599: IFTRUE 36603
36601: GO 36817
36603: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36604: LD_ADDR_VAR 0 4
36608: PUSH
36609: LD_INT 35
36611: PUSH
36612: LD_INT 45
36614: PUSH
36615: LD_INT 46
36617: PUSH
36618: LD_INT 47
36620: PUSH
36621: LD_INT 82
36623: PUSH
36624: LD_INT 83
36626: PUSH
36627: LD_INT 84
36629: PUSH
36630: LD_INT 85
36632: PUSH
36633: LD_INT 86
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: LD_INT 6
36644: PUSH
36645: LD_INT 15
36647: PUSH
36648: LD_INT 16
36650: PUSH
36651: LD_INT 7
36653: PUSH
36654: LD_INT 12
36656: PUSH
36657: LD_INT 13
36659: PUSH
36660: LD_INT 10
36662: PUSH
36663: LD_INT 14
36665: PUSH
36666: LD_INT 20
36668: PUSH
36669: LD_INT 21
36671: PUSH
36672: LD_INT 22
36674: PUSH
36675: LD_INT 25
36677: PUSH
36678: LD_INT 32
36680: PUSH
36681: LD_INT 27
36683: PUSH
36684: LD_INT 36
36686: PUSH
36687: LD_INT 69
36689: PUSH
36690: LD_INT 39
36692: PUSH
36693: LD_INT 34
36695: PUSH
36696: LD_INT 40
36698: PUSH
36699: LD_INT 48
36701: PUSH
36702: LD_INT 49
36704: PUSH
36705: LD_INT 50
36707: PUSH
36708: LD_INT 51
36710: PUSH
36711: LD_INT 52
36713: PUSH
36714: LD_INT 53
36716: PUSH
36717: LD_INT 54
36719: PUSH
36720: LD_INT 55
36722: PUSH
36723: LD_INT 56
36725: PUSH
36726: LD_INT 57
36728: PUSH
36729: LD_INT 58
36731: PUSH
36732: LD_INT 59
36734: PUSH
36735: LD_INT 60
36737: PUSH
36738: LD_INT 61
36740: PUSH
36741: LD_INT 62
36743: PUSH
36744: LD_INT 80
36746: PUSH
36747: LD_INT 82
36749: PUSH
36750: LD_INT 83
36752: PUSH
36753: LD_INT 84
36755: PUSH
36756: LD_INT 85
36758: PUSH
36759: LD_INT 86
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: ST_TO_ADDR
36815: GO 37282
36817: LD_INT 2
36819: DOUBLE
36820: EQUAL
36821: IFTRUE 36825
36823: GO 37051
36825: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36826: LD_ADDR_VAR 0 4
36830: PUSH
36831: LD_INT 35
36833: PUSH
36834: LD_INT 45
36836: PUSH
36837: LD_INT 46
36839: PUSH
36840: LD_INT 47
36842: PUSH
36843: LD_INT 82
36845: PUSH
36846: LD_INT 83
36848: PUSH
36849: LD_INT 84
36851: PUSH
36852: LD_INT 85
36854: PUSH
36855: LD_INT 87
36857: PUSH
36858: LD_INT 70
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: LD_INT 11
36866: PUSH
36867: LD_INT 3
36869: PUSH
36870: LD_INT 4
36872: PUSH
36873: LD_INT 5
36875: PUSH
36876: LD_INT 6
36878: PUSH
36879: LD_INT 15
36881: PUSH
36882: LD_INT 18
36884: PUSH
36885: LD_INT 7
36887: PUSH
36888: LD_INT 17
36890: PUSH
36891: LD_INT 8
36893: PUSH
36894: LD_INT 20
36896: PUSH
36897: LD_INT 21
36899: PUSH
36900: LD_INT 22
36902: PUSH
36903: LD_INT 72
36905: PUSH
36906: LD_INT 26
36908: PUSH
36909: LD_INT 69
36911: PUSH
36912: LD_INT 39
36914: PUSH
36915: LD_INT 40
36917: PUSH
36918: LD_INT 41
36920: PUSH
36921: LD_INT 42
36923: PUSH
36924: LD_INT 43
36926: PUSH
36927: LD_INT 48
36929: PUSH
36930: LD_INT 49
36932: PUSH
36933: LD_INT 50
36935: PUSH
36936: LD_INT 51
36938: PUSH
36939: LD_INT 52
36941: PUSH
36942: LD_INT 53
36944: PUSH
36945: LD_INT 54
36947: PUSH
36948: LD_INT 55
36950: PUSH
36951: LD_INT 56
36953: PUSH
36954: LD_INT 60
36956: PUSH
36957: LD_INT 61
36959: PUSH
36960: LD_INT 62
36962: PUSH
36963: LD_INT 66
36965: PUSH
36966: LD_INT 67
36968: PUSH
36969: LD_INT 68
36971: PUSH
36972: LD_INT 81
36974: PUSH
36975: LD_INT 82
36977: PUSH
36978: LD_INT 83
36980: PUSH
36981: LD_INT 84
36983: PUSH
36984: LD_INT 85
36986: PUSH
36987: LD_INT 87
36989: PUSH
36990: LD_INT 88
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: ST_TO_ADDR
37049: GO 37282
37051: LD_INT 3
37053: DOUBLE
37054: EQUAL
37055: IFTRUE 37059
37057: GO 37281
37059: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37060: LD_ADDR_VAR 0 4
37064: PUSH
37065: LD_INT 46
37067: PUSH
37068: LD_INT 47
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: LD_INT 2
37076: PUSH
37077: LD_INT 82
37079: PUSH
37080: LD_INT 83
37082: PUSH
37083: LD_INT 84
37085: PUSH
37086: LD_INT 85
37088: PUSH
37089: LD_INT 86
37091: PUSH
37092: LD_INT 11
37094: PUSH
37095: LD_INT 9
37097: PUSH
37098: LD_INT 20
37100: PUSH
37101: LD_INT 19
37103: PUSH
37104: LD_INT 21
37106: PUSH
37107: LD_INT 24
37109: PUSH
37110: LD_INT 22
37112: PUSH
37113: LD_INT 25
37115: PUSH
37116: LD_INT 28
37118: PUSH
37119: LD_INT 29
37121: PUSH
37122: LD_INT 30
37124: PUSH
37125: LD_INT 31
37127: PUSH
37128: LD_INT 37
37130: PUSH
37131: LD_INT 38
37133: PUSH
37134: LD_INT 32
37136: PUSH
37137: LD_INT 27
37139: PUSH
37140: LD_INT 33
37142: PUSH
37143: LD_INT 69
37145: PUSH
37146: LD_INT 39
37148: PUSH
37149: LD_INT 34
37151: PUSH
37152: LD_INT 40
37154: PUSH
37155: LD_INT 71
37157: PUSH
37158: LD_INT 23
37160: PUSH
37161: LD_INT 44
37163: PUSH
37164: LD_INT 48
37166: PUSH
37167: LD_INT 49
37169: PUSH
37170: LD_INT 50
37172: PUSH
37173: LD_INT 51
37175: PUSH
37176: LD_INT 52
37178: PUSH
37179: LD_INT 53
37181: PUSH
37182: LD_INT 54
37184: PUSH
37185: LD_INT 55
37187: PUSH
37188: LD_INT 56
37190: PUSH
37191: LD_INT 57
37193: PUSH
37194: LD_INT 58
37196: PUSH
37197: LD_INT 59
37199: PUSH
37200: LD_INT 63
37202: PUSH
37203: LD_INT 64
37205: PUSH
37206: LD_INT 65
37208: PUSH
37209: LD_INT 82
37211: PUSH
37212: LD_INT 83
37214: PUSH
37215: LD_INT 84
37217: PUSH
37218: LD_INT 85
37220: PUSH
37221: LD_INT 86
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
37279: GO 37282
37281: POP
// if state > - 1 and state < 3 then
37282: LD_VAR 0 3
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: GREATER
37291: PUSH
37292: LD_VAR 0 3
37296: PUSH
37297: LD_INT 3
37299: LESS
37300: AND
37301: IFFALSE 37358
// for i in result do
37303: LD_ADDR_VAR 0 5
37307: PUSH
37308: LD_VAR 0 4
37312: PUSH
37313: FOR_IN
37314: IFFALSE 37356
// if GetTech ( i , side ) <> state then
37316: LD_VAR 0 5
37320: PPUSH
37321: LD_VAR 0 1
37325: PPUSH
37326: CALL_OW 321
37330: PUSH
37331: LD_VAR 0 3
37335: NONEQUAL
37336: IFFALSE 37354
// result := result diff i ;
37338: LD_ADDR_VAR 0 4
37342: PUSH
37343: LD_VAR 0 4
37347: PUSH
37348: LD_VAR 0 5
37352: DIFF
37353: ST_TO_ADDR
37354: GO 37313
37356: POP
37357: POP
// end ;
37358: LD_VAR 0 4
37362: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37363: LD_INT 0
37365: PPUSH
37366: PPUSH
37367: PPUSH
// result := true ;
37368: LD_ADDR_VAR 0 3
37372: PUSH
37373: LD_INT 1
37375: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37376: LD_ADDR_VAR 0 5
37380: PUSH
37381: LD_VAR 0 2
37385: PPUSH
37386: CALL_OW 480
37390: ST_TO_ADDR
// if not tmp then
37391: LD_VAR 0 5
37395: NOT
37396: IFFALSE 37400
// exit ;
37398: GO 37449
// for i in tmp do
37400: LD_ADDR_VAR 0 4
37404: PUSH
37405: LD_VAR 0 5
37409: PUSH
37410: FOR_IN
37411: IFFALSE 37447
// if GetTech ( i , side ) <> state_researched then
37413: LD_VAR 0 4
37417: PPUSH
37418: LD_VAR 0 1
37422: PPUSH
37423: CALL_OW 321
37427: PUSH
37428: LD_INT 2
37430: NONEQUAL
37431: IFFALSE 37445
// begin result := false ;
37433: LD_ADDR_VAR 0 3
37437: PUSH
37438: LD_INT 0
37440: ST_TO_ADDR
// exit ;
37441: POP
37442: POP
37443: GO 37449
// end ;
37445: GO 37410
37447: POP
37448: POP
// end ;
37449: LD_VAR 0 3
37453: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37454: LD_INT 0
37456: PPUSH
37457: PPUSH
37458: PPUSH
37459: PPUSH
37460: PPUSH
37461: PPUSH
37462: PPUSH
37463: PPUSH
37464: PPUSH
37465: PPUSH
37466: PPUSH
37467: PPUSH
37468: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37469: LD_VAR 0 1
37473: NOT
37474: PUSH
37475: LD_VAR 0 1
37479: PPUSH
37480: CALL_OW 257
37484: PUSH
37485: LD_INT 9
37487: NONEQUAL
37488: OR
37489: IFFALSE 37493
// exit ;
37491: GO 38066
// side := GetSide ( unit ) ;
37493: LD_ADDR_VAR 0 9
37497: PUSH
37498: LD_VAR 0 1
37502: PPUSH
37503: CALL_OW 255
37507: ST_TO_ADDR
// tech_space := tech_spacanom ;
37508: LD_ADDR_VAR 0 12
37512: PUSH
37513: LD_INT 29
37515: ST_TO_ADDR
// tech_time := tech_taurad ;
37516: LD_ADDR_VAR 0 13
37520: PUSH
37521: LD_INT 28
37523: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37524: LD_ADDR_VAR 0 11
37528: PUSH
37529: LD_VAR 0 1
37533: PPUSH
37534: CALL_OW 310
37538: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37539: LD_VAR 0 11
37543: PPUSH
37544: CALL_OW 247
37548: PUSH
37549: LD_INT 2
37551: EQUAL
37552: IFFALSE 37556
// exit ;
37554: GO 38066
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37556: LD_ADDR_VAR 0 8
37560: PUSH
37561: LD_INT 81
37563: PUSH
37564: LD_VAR 0 9
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 3
37575: PUSH
37576: LD_INT 21
37578: PUSH
37579: LD_INT 3
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PPUSH
37594: CALL_OW 69
37598: ST_TO_ADDR
// if not tmp then
37599: LD_VAR 0 8
37603: NOT
37604: IFFALSE 37608
// exit ;
37606: GO 38066
// if in_unit then
37608: LD_VAR 0 11
37612: IFFALSE 37636
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37614: LD_ADDR_VAR 0 10
37618: PUSH
37619: LD_VAR 0 8
37623: PPUSH
37624: LD_VAR 0 11
37628: PPUSH
37629: CALL_OW 74
37633: ST_TO_ADDR
37634: GO 37656
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37636: LD_ADDR_VAR 0 10
37640: PUSH
37641: LD_VAR 0 8
37645: PPUSH
37646: LD_VAR 0 1
37650: PPUSH
37651: CALL_OW 74
37655: ST_TO_ADDR
// if not enemy then
37656: LD_VAR 0 10
37660: NOT
37661: IFFALSE 37665
// exit ;
37663: GO 38066
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37665: LD_VAR 0 11
37669: PUSH
37670: LD_VAR 0 11
37674: PPUSH
37675: LD_VAR 0 10
37679: PPUSH
37680: CALL_OW 296
37684: PUSH
37685: LD_INT 13
37687: GREATER
37688: AND
37689: PUSH
37690: LD_VAR 0 1
37694: PPUSH
37695: LD_VAR 0 10
37699: PPUSH
37700: CALL_OW 296
37704: PUSH
37705: LD_INT 12
37707: GREATER
37708: OR
37709: IFFALSE 37713
// exit ;
37711: GO 38066
// missile := [ 1 ] ;
37713: LD_ADDR_VAR 0 14
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: EMPTY
37722: LIST
37723: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37724: LD_VAR 0 9
37728: PPUSH
37729: LD_VAR 0 12
37733: PPUSH
37734: CALL_OW 325
37738: IFFALSE 37767
// missile := Replace ( missile , missile + 1 , 2 ) ;
37740: LD_ADDR_VAR 0 14
37744: PUSH
37745: LD_VAR 0 14
37749: PPUSH
37750: LD_VAR 0 14
37754: PUSH
37755: LD_INT 1
37757: PLUS
37758: PPUSH
37759: LD_INT 2
37761: PPUSH
37762: CALL_OW 1
37766: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37767: LD_VAR 0 9
37771: PPUSH
37772: LD_VAR 0 13
37776: PPUSH
37777: CALL_OW 325
37781: PUSH
37782: LD_VAR 0 10
37786: PPUSH
37787: CALL_OW 255
37791: PPUSH
37792: LD_VAR 0 13
37796: PPUSH
37797: CALL_OW 325
37801: NOT
37802: AND
37803: IFFALSE 37832
// missile := Replace ( missile , missile + 1 , 3 ) ;
37805: LD_ADDR_VAR 0 14
37809: PUSH
37810: LD_VAR 0 14
37814: PPUSH
37815: LD_VAR 0 14
37819: PUSH
37820: LD_INT 1
37822: PLUS
37823: PPUSH
37824: LD_INT 3
37826: PPUSH
37827: CALL_OW 1
37831: ST_TO_ADDR
// if missile < 2 then
37832: LD_VAR 0 14
37836: PUSH
37837: LD_INT 2
37839: LESS
37840: IFFALSE 37844
// exit ;
37842: GO 38066
// x := GetX ( enemy ) ;
37844: LD_ADDR_VAR 0 4
37848: PUSH
37849: LD_VAR 0 10
37853: PPUSH
37854: CALL_OW 250
37858: ST_TO_ADDR
// y := GetY ( enemy ) ;
37859: LD_ADDR_VAR 0 5
37863: PUSH
37864: LD_VAR 0 10
37868: PPUSH
37869: CALL_OW 251
37873: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37874: LD_ADDR_VAR 0 6
37878: PUSH
37879: LD_VAR 0 4
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PPUSH
37888: LD_INT 1
37890: PPUSH
37891: CALL_OW 12
37895: PLUS
37896: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37897: LD_ADDR_VAR 0 7
37901: PUSH
37902: LD_VAR 0 5
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PPUSH
37911: LD_INT 1
37913: PPUSH
37914: CALL_OW 12
37918: PLUS
37919: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37920: LD_VAR 0 6
37924: PPUSH
37925: LD_VAR 0 7
37929: PPUSH
37930: CALL_OW 488
37934: NOT
37935: IFFALSE 37957
// begin _x := x ;
37937: LD_ADDR_VAR 0 6
37941: PUSH
37942: LD_VAR 0 4
37946: ST_TO_ADDR
// _y := y ;
37947: LD_ADDR_VAR 0 7
37951: PUSH
37952: LD_VAR 0 5
37956: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37957: LD_ADDR_VAR 0 3
37961: PUSH
37962: LD_INT 1
37964: PPUSH
37965: LD_VAR 0 14
37969: PPUSH
37970: CALL_OW 12
37974: ST_TO_ADDR
// case i of 1 :
37975: LD_VAR 0 3
37979: PUSH
37980: LD_INT 1
37982: DOUBLE
37983: EQUAL
37984: IFTRUE 37988
37986: GO 38005
37988: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37989: LD_VAR 0 1
37993: PPUSH
37994: LD_VAR 0 10
37998: PPUSH
37999: CALL_OW 115
38003: GO 38066
38005: LD_INT 2
38007: DOUBLE
38008: EQUAL
38009: IFTRUE 38013
38011: GO 38035
38013: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38014: LD_VAR 0 1
38018: PPUSH
38019: LD_VAR 0 6
38023: PPUSH
38024: LD_VAR 0 7
38028: PPUSH
38029: CALL_OW 153
38033: GO 38066
38035: LD_INT 3
38037: DOUBLE
38038: EQUAL
38039: IFTRUE 38043
38041: GO 38065
38043: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38044: LD_VAR 0 1
38048: PPUSH
38049: LD_VAR 0 6
38053: PPUSH
38054: LD_VAR 0 7
38058: PPUSH
38059: CALL_OW 154
38063: GO 38066
38065: POP
// end ;
38066: LD_VAR 0 2
38070: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38071: LD_INT 0
38073: PPUSH
38074: PPUSH
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
// if not unit or not building then
38079: LD_VAR 0 1
38083: NOT
38084: PUSH
38085: LD_VAR 0 2
38089: NOT
38090: OR
38091: IFFALSE 38095
// exit ;
38093: GO 38253
// x := GetX ( building ) ;
38095: LD_ADDR_VAR 0 5
38099: PUSH
38100: LD_VAR 0 2
38104: PPUSH
38105: CALL_OW 250
38109: ST_TO_ADDR
// y := GetY ( building ) ;
38110: LD_ADDR_VAR 0 6
38114: PUSH
38115: LD_VAR 0 2
38119: PPUSH
38120: CALL_OW 251
38124: ST_TO_ADDR
// for i = 0 to 5 do
38125: LD_ADDR_VAR 0 4
38129: PUSH
38130: DOUBLE
38131: LD_INT 0
38133: DEC
38134: ST_TO_ADDR
38135: LD_INT 5
38137: PUSH
38138: FOR_TO
38139: IFFALSE 38251
// begin _x := ShiftX ( x , i , 3 ) ;
38141: LD_ADDR_VAR 0 7
38145: PUSH
38146: LD_VAR 0 5
38150: PPUSH
38151: LD_VAR 0 4
38155: PPUSH
38156: LD_INT 3
38158: PPUSH
38159: CALL_OW 272
38163: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38164: LD_ADDR_VAR 0 8
38168: PUSH
38169: LD_VAR 0 6
38173: PPUSH
38174: LD_VAR 0 4
38178: PPUSH
38179: LD_INT 3
38181: PPUSH
38182: CALL_OW 273
38186: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38187: LD_VAR 0 7
38191: PPUSH
38192: LD_VAR 0 8
38196: PPUSH
38197: CALL_OW 488
38201: NOT
38202: IFFALSE 38206
// continue ;
38204: GO 38138
// if HexInfo ( _x , _y ) = 0 then
38206: LD_VAR 0 7
38210: PPUSH
38211: LD_VAR 0 8
38215: PPUSH
38216: CALL_OW 428
38220: PUSH
38221: LD_INT 0
38223: EQUAL
38224: IFFALSE 38249
// begin ComMoveXY ( unit , _x , _y ) ;
38226: LD_VAR 0 1
38230: PPUSH
38231: LD_VAR 0 7
38235: PPUSH
38236: LD_VAR 0 8
38240: PPUSH
38241: CALL_OW 111
// exit ;
38245: POP
38246: POP
38247: GO 38253
// end ; end ;
38249: GO 38138
38251: POP
38252: POP
// end ;
38253: LD_VAR 0 3
38257: RET
// export function ScanBase ( side , base_area ) ; begin
38258: LD_INT 0
38260: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38261: LD_ADDR_VAR 0 3
38265: PUSH
38266: LD_VAR 0 2
38270: PPUSH
38271: LD_INT 81
38273: PUSH
38274: LD_VAR 0 1
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PPUSH
38283: CALL_OW 70
38287: ST_TO_ADDR
// end ;
38288: LD_VAR 0 3
38292: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38293: LD_INT 0
38295: PPUSH
38296: PPUSH
38297: PPUSH
38298: PPUSH
// result := false ;
38299: LD_ADDR_VAR 0 2
38303: PUSH
38304: LD_INT 0
38306: ST_TO_ADDR
// side := GetSide ( unit ) ;
38307: LD_ADDR_VAR 0 3
38311: PUSH
38312: LD_VAR 0 1
38316: PPUSH
38317: CALL_OW 255
38321: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38322: LD_ADDR_VAR 0 4
38326: PUSH
38327: LD_VAR 0 1
38331: PPUSH
38332: CALL_OW 248
38336: ST_TO_ADDR
// case nat of 1 :
38337: LD_VAR 0 4
38341: PUSH
38342: LD_INT 1
38344: DOUBLE
38345: EQUAL
38346: IFTRUE 38350
38348: GO 38361
38350: POP
// tech := tech_lassight ; 2 :
38351: LD_ADDR_VAR 0 5
38355: PUSH
38356: LD_INT 12
38358: ST_TO_ADDR
38359: GO 38400
38361: LD_INT 2
38363: DOUBLE
38364: EQUAL
38365: IFTRUE 38369
38367: GO 38380
38369: POP
// tech := tech_mortar ; 3 :
38370: LD_ADDR_VAR 0 5
38374: PUSH
38375: LD_INT 41
38377: ST_TO_ADDR
38378: GO 38400
38380: LD_INT 3
38382: DOUBLE
38383: EQUAL
38384: IFTRUE 38388
38386: GO 38399
38388: POP
// tech := tech_bazooka ; end ;
38389: LD_ADDR_VAR 0 5
38393: PUSH
38394: LD_INT 44
38396: ST_TO_ADDR
38397: GO 38400
38399: POP
// if Researched ( side , tech ) then
38400: LD_VAR 0 3
38404: PPUSH
38405: LD_VAR 0 5
38409: PPUSH
38410: CALL_OW 325
38414: IFFALSE 38441
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38416: LD_ADDR_VAR 0 2
38420: PUSH
38421: LD_INT 5
38423: PUSH
38424: LD_INT 8
38426: PUSH
38427: LD_INT 9
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: LIST
38434: PUSH
38435: LD_VAR 0 4
38439: ARRAY
38440: ST_TO_ADDR
// end ;
38441: LD_VAR 0 2
38445: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38446: LD_INT 0
38448: PPUSH
38449: PPUSH
38450: PPUSH
// if not mines then
38451: LD_VAR 0 2
38455: NOT
38456: IFFALSE 38460
// exit ;
38458: GO 38604
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38460: LD_ADDR_VAR 0 5
38464: PUSH
38465: LD_INT 81
38467: PUSH
38468: LD_VAR 0 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 3
38479: PUSH
38480: LD_INT 21
38482: PUSH
38483: LD_INT 3
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PPUSH
38498: CALL_OW 69
38502: ST_TO_ADDR
// for i in mines do
38503: LD_ADDR_VAR 0 4
38507: PUSH
38508: LD_VAR 0 2
38512: PUSH
38513: FOR_IN
38514: IFFALSE 38602
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38516: LD_VAR 0 4
38520: PUSH
38521: LD_INT 1
38523: ARRAY
38524: PPUSH
38525: LD_VAR 0 4
38529: PUSH
38530: LD_INT 2
38532: ARRAY
38533: PPUSH
38534: CALL_OW 458
38538: NOT
38539: IFFALSE 38543
// continue ;
38541: GO 38513
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38543: LD_VAR 0 4
38547: PUSH
38548: LD_INT 1
38550: ARRAY
38551: PPUSH
38552: LD_VAR 0 4
38556: PUSH
38557: LD_INT 2
38559: ARRAY
38560: PPUSH
38561: CALL_OW 428
38565: PUSH
38566: LD_VAR 0 5
38570: IN
38571: IFFALSE 38600
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38573: LD_VAR 0 4
38577: PUSH
38578: LD_INT 1
38580: ARRAY
38581: PPUSH
38582: LD_VAR 0 4
38586: PUSH
38587: LD_INT 2
38589: ARRAY
38590: PPUSH
38591: LD_VAR 0 1
38595: PPUSH
38596: CALL_OW 456
// end ;
38600: GO 38513
38602: POP
38603: POP
// end ;
38604: LD_VAR 0 3
38608: RET
// export function Count ( array ) ; var i ; begin
38609: LD_INT 0
38611: PPUSH
38612: PPUSH
// result := 0 ;
38613: LD_ADDR_VAR 0 2
38617: PUSH
38618: LD_INT 0
38620: ST_TO_ADDR
// for i in array do
38621: LD_ADDR_VAR 0 3
38625: PUSH
38626: LD_VAR 0 1
38630: PUSH
38631: FOR_IN
38632: IFFALSE 38656
// if i then
38634: LD_VAR 0 3
38638: IFFALSE 38654
// result := result + 1 ;
38640: LD_ADDR_VAR 0 2
38644: PUSH
38645: LD_VAR 0 2
38649: PUSH
38650: LD_INT 1
38652: PLUS
38653: ST_TO_ADDR
38654: GO 38631
38656: POP
38657: POP
// end ;
38658: LD_VAR 0 2
38662: RET
// export function IsEmpty ( building ) ; begin
38663: LD_INT 0
38665: PPUSH
// if not building then
38666: LD_VAR 0 1
38670: NOT
38671: IFFALSE 38675
// exit ;
38673: GO 38718
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38675: LD_ADDR_VAR 0 2
38679: PUSH
38680: LD_VAR 0 1
38684: PUSH
38685: LD_INT 22
38687: PUSH
38688: LD_VAR 0 1
38692: PPUSH
38693: CALL_OW 255
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 58
38704: PUSH
38705: EMPTY
38706: LIST
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PPUSH
38712: CALL_OW 69
38716: IN
38717: ST_TO_ADDR
// end ;
38718: LD_VAR 0 2
38722: RET
// export function IsNotFull ( building ) ; var places ; begin
38723: LD_INT 0
38725: PPUSH
38726: PPUSH
// if not building then
38727: LD_VAR 0 1
38731: NOT
38732: IFFALSE 38736
// exit ;
38734: GO 38907
// result := false ;
38736: LD_ADDR_VAR 0 2
38740: PUSH
38741: LD_INT 0
38743: ST_TO_ADDR
// places := 0 ;
38744: LD_ADDR_VAR 0 3
38748: PUSH
38749: LD_INT 0
38751: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
38752: LD_VAR 0 1
38756: PPUSH
38757: CALL_OW 266
38761: PUSH
38762: LD_INT 0
38764: DOUBLE
38765: EQUAL
38766: IFTRUE 38824
38768: LD_INT 1
38770: DOUBLE
38771: EQUAL
38772: IFTRUE 38824
38774: LD_INT 6
38776: DOUBLE
38777: EQUAL
38778: IFTRUE 38824
38780: LD_INT 7
38782: DOUBLE
38783: EQUAL
38784: IFTRUE 38824
38786: LD_INT 8
38788: DOUBLE
38789: EQUAL
38790: IFTRUE 38824
38792: LD_INT 4
38794: DOUBLE
38795: EQUAL
38796: IFTRUE 38824
38798: LD_INT 5
38800: DOUBLE
38801: EQUAL
38802: IFTRUE 38824
38804: LD_INT 2
38806: DOUBLE
38807: EQUAL
38808: IFTRUE 38824
38810: LD_INT 3
38812: DOUBLE
38813: EQUAL
38814: IFTRUE 38824
38816: LD_INT 35
38818: DOUBLE
38819: EQUAL
38820: IFTRUE 38824
38822: GO 38835
38824: POP
// places := 6 ; b_bunker , b_breastwork :
38825: LD_ADDR_VAR 0 3
38829: PUSH
38830: LD_INT 6
38832: ST_TO_ADDR
38833: GO 38880
38835: LD_INT 32
38837: DOUBLE
38838: EQUAL
38839: IFTRUE 38849
38841: LD_INT 31
38843: DOUBLE
38844: EQUAL
38845: IFTRUE 38849
38847: GO 38860
38849: POP
// places := 1 ; b_control_tower :
38850: LD_ADDR_VAR 0 3
38854: PUSH
38855: LD_INT 1
38857: ST_TO_ADDR
38858: GO 38880
38860: LD_INT 36
38862: DOUBLE
38863: EQUAL
38864: IFTRUE 38868
38866: GO 38879
38868: POP
// places := 3 ; end ;
38869: LD_ADDR_VAR 0 3
38873: PUSH
38874: LD_INT 3
38876: ST_TO_ADDR
38877: GO 38880
38879: POP
// if places then
38880: LD_VAR 0 3
38884: IFFALSE 38907
// result := UnitsInside ( building ) < places ;
38886: LD_ADDR_VAR 0 2
38890: PUSH
38891: LD_VAR 0 1
38895: PPUSH
38896: CALL_OW 313
38900: PUSH
38901: LD_VAR 0 3
38905: LESS
38906: ST_TO_ADDR
// end ;
38907: LD_VAR 0 2
38911: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38912: LD_INT 0
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
// tmp := [ ] ;
38918: LD_ADDR_VAR 0 3
38922: PUSH
38923: EMPTY
38924: ST_TO_ADDR
// list := [ ] ;
38925: LD_ADDR_VAR 0 5
38929: PUSH
38930: EMPTY
38931: ST_TO_ADDR
// for i = 16 to 25 do
38932: LD_ADDR_VAR 0 4
38936: PUSH
38937: DOUBLE
38938: LD_INT 16
38940: DEC
38941: ST_TO_ADDR
38942: LD_INT 25
38944: PUSH
38945: FOR_TO
38946: IFFALSE 39019
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38948: LD_ADDR_VAR 0 3
38952: PUSH
38953: LD_VAR 0 3
38957: PUSH
38958: LD_INT 22
38960: PUSH
38961: LD_VAR 0 1
38965: PPUSH
38966: CALL_OW 255
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 91
38977: PUSH
38978: LD_VAR 0 1
38982: PUSH
38983: LD_INT 6
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 30
38993: PUSH
38994: LD_VAR 0 4
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: PUSH
39008: EMPTY
39009: LIST
39010: PPUSH
39011: CALL_OW 69
39015: ADD
39016: ST_TO_ADDR
39017: GO 38945
39019: POP
39020: POP
// for i = 1 to tmp do
39021: LD_ADDR_VAR 0 4
39025: PUSH
39026: DOUBLE
39027: LD_INT 1
39029: DEC
39030: ST_TO_ADDR
39031: LD_VAR 0 3
39035: PUSH
39036: FOR_TO
39037: IFFALSE 39125
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39039: LD_ADDR_VAR 0 5
39043: PUSH
39044: LD_VAR 0 5
39048: PUSH
39049: LD_VAR 0 3
39053: PUSH
39054: LD_VAR 0 4
39058: ARRAY
39059: PPUSH
39060: CALL_OW 266
39064: PUSH
39065: LD_VAR 0 3
39069: PUSH
39070: LD_VAR 0 4
39074: ARRAY
39075: PPUSH
39076: CALL_OW 250
39080: PUSH
39081: LD_VAR 0 3
39085: PUSH
39086: LD_VAR 0 4
39090: ARRAY
39091: PPUSH
39092: CALL_OW 251
39096: PUSH
39097: LD_VAR 0 3
39101: PUSH
39102: LD_VAR 0 4
39106: ARRAY
39107: PPUSH
39108: CALL_OW 254
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: ADD
39122: ST_TO_ADDR
39123: GO 39036
39125: POP
39126: POP
// result := list ;
39127: LD_ADDR_VAR 0 2
39131: PUSH
39132: LD_VAR 0 5
39136: ST_TO_ADDR
// end ;
39137: LD_VAR 0 2
39141: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39142: LD_INT 0
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
// if not factory then
39151: LD_VAR 0 1
39155: NOT
39156: IFFALSE 39160
// exit ;
39158: GO 39753
// if control = control_apeman then
39160: LD_VAR 0 4
39164: PUSH
39165: LD_INT 5
39167: EQUAL
39168: IFFALSE 39277
// begin tmp := UnitsInside ( factory ) ;
39170: LD_ADDR_VAR 0 8
39174: PUSH
39175: LD_VAR 0 1
39179: PPUSH
39180: CALL_OW 313
39184: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39185: LD_VAR 0 8
39189: PPUSH
39190: LD_INT 25
39192: PUSH
39193: LD_INT 12
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PPUSH
39200: CALL_OW 72
39204: NOT
39205: IFFALSE 39215
// control := control_manual ;
39207: LD_ADDR_VAR 0 4
39211: PUSH
39212: LD_INT 1
39214: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39215: LD_ADDR_VAR 0 8
39219: PUSH
39220: LD_VAR 0 1
39224: PPUSH
39225: CALL 38912 0 1
39229: ST_TO_ADDR
// if tmp then
39230: LD_VAR 0 8
39234: IFFALSE 39277
// begin for i in tmp do
39236: LD_ADDR_VAR 0 7
39240: PUSH
39241: LD_VAR 0 8
39245: PUSH
39246: FOR_IN
39247: IFFALSE 39275
// if i [ 1 ] = b_ext_radio then
39249: LD_VAR 0 7
39253: PUSH
39254: LD_INT 1
39256: ARRAY
39257: PUSH
39258: LD_INT 22
39260: EQUAL
39261: IFFALSE 39273
// begin control := control_remote ;
39263: LD_ADDR_VAR 0 4
39267: PUSH
39268: LD_INT 2
39270: ST_TO_ADDR
// break ;
39271: GO 39275
// end ;
39273: GO 39246
39275: POP
39276: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39277: LD_VAR 0 1
39281: PPUSH
39282: LD_VAR 0 2
39286: PPUSH
39287: LD_VAR 0 3
39291: PPUSH
39292: LD_VAR 0 4
39296: PPUSH
39297: LD_VAR 0 5
39301: PPUSH
39302: CALL_OW 448
39306: IFFALSE 39341
// begin result := [ chassis , engine , control , weapon ] ;
39308: LD_ADDR_VAR 0 6
39312: PUSH
39313: LD_VAR 0 2
39317: PUSH
39318: LD_VAR 0 3
39322: PUSH
39323: LD_VAR 0 4
39327: PUSH
39328: LD_VAR 0 5
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: ST_TO_ADDR
// exit ;
39339: GO 39753
// end ; _chassis := AvailableChassisList ( factory ) ;
39341: LD_ADDR_VAR 0 9
39345: PUSH
39346: LD_VAR 0 1
39350: PPUSH
39351: CALL_OW 475
39355: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39356: LD_ADDR_VAR 0 11
39360: PUSH
39361: LD_VAR 0 1
39365: PPUSH
39366: CALL_OW 476
39370: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39371: LD_ADDR_VAR 0 12
39375: PUSH
39376: LD_VAR 0 1
39380: PPUSH
39381: CALL_OW 477
39385: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39386: LD_ADDR_VAR 0 10
39390: PUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: CALL_OW 478
39400: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39401: LD_VAR 0 9
39405: NOT
39406: PUSH
39407: LD_VAR 0 11
39411: NOT
39412: OR
39413: PUSH
39414: LD_VAR 0 12
39418: NOT
39419: OR
39420: PUSH
39421: LD_VAR 0 10
39425: NOT
39426: OR
39427: IFFALSE 39462
// begin result := [ chassis , engine , control , weapon ] ;
39429: LD_ADDR_VAR 0 6
39433: PUSH
39434: LD_VAR 0 2
39438: PUSH
39439: LD_VAR 0 3
39443: PUSH
39444: LD_VAR 0 4
39448: PUSH
39449: LD_VAR 0 5
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: ST_TO_ADDR
// exit ;
39460: GO 39753
// end ; if not chassis in _chassis then
39462: LD_VAR 0 2
39466: PUSH
39467: LD_VAR 0 9
39471: IN
39472: NOT
39473: IFFALSE 39499
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39475: LD_ADDR_VAR 0 2
39479: PUSH
39480: LD_VAR 0 9
39484: PUSH
39485: LD_INT 1
39487: PPUSH
39488: LD_VAR 0 9
39492: PPUSH
39493: CALL_OW 12
39497: ARRAY
39498: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39499: LD_VAR 0 2
39503: PPUSH
39504: LD_VAR 0 3
39508: PPUSH
39509: CALL 39758 0 2
39513: NOT
39514: IFFALSE 39573
// repeat engine := _engine [ 1 ] ;
39516: LD_ADDR_VAR 0 3
39520: PUSH
39521: LD_VAR 0 11
39525: PUSH
39526: LD_INT 1
39528: ARRAY
39529: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39530: LD_ADDR_VAR 0 11
39534: PUSH
39535: LD_VAR 0 11
39539: PPUSH
39540: LD_INT 1
39542: PPUSH
39543: CALL_OW 3
39547: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39548: LD_VAR 0 2
39552: PPUSH
39553: LD_VAR 0 3
39557: PPUSH
39558: CALL 39758 0 2
39562: PUSH
39563: LD_VAR 0 11
39567: PUSH
39568: EMPTY
39569: EQUAL
39570: OR
39571: IFFALSE 39516
// if not control in _control then
39573: LD_VAR 0 4
39577: PUSH
39578: LD_VAR 0 12
39582: IN
39583: NOT
39584: IFFALSE 39610
// control := _control [ rand ( 1 , _control ) ] ;
39586: LD_ADDR_VAR 0 4
39590: PUSH
39591: LD_VAR 0 12
39595: PUSH
39596: LD_INT 1
39598: PPUSH
39599: LD_VAR 0 12
39603: PPUSH
39604: CALL_OW 12
39608: ARRAY
39609: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39610: LD_VAR 0 2
39614: PPUSH
39615: LD_VAR 0 5
39619: PPUSH
39620: CALL 39978 0 2
39624: NOT
39625: IFFALSE 39684
// repeat weapon := _weapon [ 1 ] ;
39627: LD_ADDR_VAR 0 5
39631: PUSH
39632: LD_VAR 0 10
39636: PUSH
39637: LD_INT 1
39639: ARRAY
39640: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39641: LD_ADDR_VAR 0 10
39645: PUSH
39646: LD_VAR 0 10
39650: PPUSH
39651: LD_INT 1
39653: PPUSH
39654: CALL_OW 3
39658: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39659: LD_VAR 0 2
39663: PPUSH
39664: LD_VAR 0 5
39668: PPUSH
39669: CALL 39978 0 2
39673: PUSH
39674: LD_VAR 0 10
39678: PUSH
39679: EMPTY
39680: EQUAL
39681: OR
39682: IFFALSE 39627
// result := [ ] ;
39684: LD_ADDR_VAR 0 6
39688: PUSH
39689: EMPTY
39690: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39691: LD_VAR 0 1
39695: PPUSH
39696: LD_VAR 0 2
39700: PPUSH
39701: LD_VAR 0 3
39705: PPUSH
39706: LD_VAR 0 4
39710: PPUSH
39711: LD_VAR 0 5
39715: PPUSH
39716: CALL_OW 448
39720: IFFALSE 39753
// result := [ chassis , engine , control , weapon ] ;
39722: LD_ADDR_VAR 0 6
39726: PUSH
39727: LD_VAR 0 2
39731: PUSH
39732: LD_VAR 0 3
39736: PUSH
39737: LD_VAR 0 4
39741: PUSH
39742: LD_VAR 0 5
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: ST_TO_ADDR
// end ;
39753: LD_VAR 0 6
39757: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39758: LD_INT 0
39760: PPUSH
// if not chassis or not engine then
39761: LD_VAR 0 1
39765: NOT
39766: PUSH
39767: LD_VAR 0 2
39771: NOT
39772: OR
39773: IFFALSE 39777
// exit ;
39775: GO 39973
// case engine of engine_solar :
39777: LD_VAR 0 2
39781: PUSH
39782: LD_INT 2
39784: DOUBLE
39785: EQUAL
39786: IFTRUE 39790
39788: GO 39828
39790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39791: LD_ADDR_VAR 0 3
39795: PUSH
39796: LD_INT 11
39798: PUSH
39799: LD_INT 12
39801: PUSH
39802: LD_INT 13
39804: PUSH
39805: LD_INT 14
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: LD_INT 3
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
39826: GO 39957
39828: LD_INT 1
39830: DOUBLE
39831: EQUAL
39832: IFTRUE 39836
39834: GO 39898
39836: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39837: LD_ADDR_VAR 0 3
39841: PUSH
39842: LD_INT 11
39844: PUSH
39845: LD_INT 12
39847: PUSH
39848: LD_INT 13
39850: PUSH
39851: LD_INT 14
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: LD_INT 2
39859: PUSH
39860: LD_INT 3
39862: PUSH
39863: LD_INT 4
39865: PUSH
39866: LD_INT 5
39868: PUSH
39869: LD_INT 21
39871: PUSH
39872: LD_INT 23
39874: PUSH
39875: LD_INT 22
39877: PUSH
39878: LD_INT 24
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: ST_TO_ADDR
39896: GO 39957
39898: LD_INT 3
39900: DOUBLE
39901: EQUAL
39902: IFTRUE 39906
39904: GO 39956
39906: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39907: LD_ADDR_VAR 0 3
39911: PUSH
39912: LD_INT 13
39914: PUSH
39915: LD_INT 14
39917: PUSH
39918: LD_INT 2
39920: PUSH
39921: LD_INT 3
39923: PUSH
39924: LD_INT 4
39926: PUSH
39927: LD_INT 5
39929: PUSH
39930: LD_INT 21
39932: PUSH
39933: LD_INT 22
39935: PUSH
39936: LD_INT 23
39938: PUSH
39939: LD_INT 24
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: ST_TO_ADDR
39954: GO 39957
39956: POP
// result := ( chassis in result ) ;
39957: LD_ADDR_VAR 0 3
39961: PUSH
39962: LD_VAR 0 1
39966: PUSH
39967: LD_VAR 0 3
39971: IN
39972: ST_TO_ADDR
// end ;
39973: LD_VAR 0 3
39977: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39978: LD_INT 0
39980: PPUSH
// if not chassis or not weapon then
39981: LD_VAR 0 1
39985: NOT
39986: PUSH
39987: LD_VAR 0 2
39991: NOT
39992: OR
39993: IFFALSE 39997
// exit ;
39995: GO 41057
// case weapon of us_machine_gun :
39997: LD_VAR 0 2
40001: PUSH
40002: LD_INT 2
40004: DOUBLE
40005: EQUAL
40006: IFTRUE 40010
40008: GO 40040
40010: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40011: LD_ADDR_VAR 0 3
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 3
40024: PUSH
40025: LD_INT 4
40027: PUSH
40028: LD_INT 5
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: ST_TO_ADDR
40038: GO 41041
40040: LD_INT 3
40042: DOUBLE
40043: EQUAL
40044: IFTRUE 40048
40046: GO 40078
40048: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40049: LD_ADDR_VAR 0 3
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: LD_INT 2
40059: PUSH
40060: LD_INT 3
40062: PUSH
40063: LD_INT 4
40065: PUSH
40066: LD_INT 5
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: ST_TO_ADDR
40076: GO 41041
40078: LD_INT 11
40080: DOUBLE
40081: EQUAL
40082: IFTRUE 40086
40084: GO 40116
40086: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40087: LD_ADDR_VAR 0 3
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: LD_INT 3
40100: PUSH
40101: LD_INT 4
40103: PUSH
40104: LD_INT 5
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: ST_TO_ADDR
40114: GO 41041
40116: LD_INT 4
40118: DOUBLE
40119: EQUAL
40120: IFTRUE 40124
40122: GO 40150
40124: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40125: LD_ADDR_VAR 0 3
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: LD_INT 3
40135: PUSH
40136: LD_INT 4
40138: PUSH
40139: LD_INT 5
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: ST_TO_ADDR
40148: GO 41041
40150: LD_INT 5
40152: DOUBLE
40153: EQUAL
40154: IFTRUE 40158
40156: GO 40184
40158: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40159: LD_ADDR_VAR 0 3
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 3
40169: PUSH
40170: LD_INT 4
40172: PUSH
40173: LD_INT 5
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: ST_TO_ADDR
40182: GO 41041
40184: LD_INT 9
40186: DOUBLE
40187: EQUAL
40188: IFTRUE 40192
40190: GO 40218
40192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40193: LD_ADDR_VAR 0 3
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: LD_INT 4
40206: PUSH
40207: LD_INT 5
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: ST_TO_ADDR
40216: GO 41041
40218: LD_INT 7
40220: DOUBLE
40221: EQUAL
40222: IFTRUE 40226
40224: GO 40252
40226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40227: LD_ADDR_VAR 0 3
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: LD_INT 3
40237: PUSH
40238: LD_INT 4
40240: PUSH
40241: LD_INT 5
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: ST_TO_ADDR
40250: GO 41041
40252: LD_INT 12
40254: DOUBLE
40255: EQUAL
40256: IFTRUE 40260
40258: GO 40286
40260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40261: LD_ADDR_VAR 0 3
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 3
40271: PUSH
40272: LD_INT 4
40274: PUSH
40275: LD_INT 5
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: ST_TO_ADDR
40284: GO 41041
40286: LD_INT 13
40288: DOUBLE
40289: EQUAL
40290: IFTRUE 40294
40292: GO 40320
40294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40295: LD_ADDR_VAR 0 3
40299: PUSH
40300: LD_INT 2
40302: PUSH
40303: LD_INT 3
40305: PUSH
40306: LD_INT 4
40308: PUSH
40309: LD_INT 5
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: ST_TO_ADDR
40318: GO 41041
40320: LD_INT 14
40322: DOUBLE
40323: EQUAL
40324: IFTRUE 40328
40326: GO 40346
40328: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40329: LD_ADDR_VAR 0 3
40333: PUSH
40334: LD_INT 4
40336: PUSH
40337: LD_INT 5
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: ST_TO_ADDR
40344: GO 41041
40346: LD_INT 6
40348: DOUBLE
40349: EQUAL
40350: IFTRUE 40354
40352: GO 40372
40354: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40355: LD_ADDR_VAR 0 3
40359: PUSH
40360: LD_INT 4
40362: PUSH
40363: LD_INT 5
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: ST_TO_ADDR
40370: GO 41041
40372: LD_INT 10
40374: DOUBLE
40375: EQUAL
40376: IFTRUE 40380
40378: GO 40398
40380: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40381: LD_ADDR_VAR 0 3
40385: PUSH
40386: LD_INT 4
40388: PUSH
40389: LD_INT 5
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: ST_TO_ADDR
40396: GO 41041
40398: LD_INT 22
40400: DOUBLE
40401: EQUAL
40402: IFTRUE 40406
40404: GO 40432
40406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40407: LD_ADDR_VAR 0 3
40411: PUSH
40412: LD_INT 11
40414: PUSH
40415: LD_INT 12
40417: PUSH
40418: LD_INT 13
40420: PUSH
40421: LD_INT 14
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: ST_TO_ADDR
40430: GO 41041
40432: LD_INT 23
40434: DOUBLE
40435: EQUAL
40436: IFTRUE 40440
40438: GO 40466
40440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40441: LD_ADDR_VAR 0 3
40445: PUSH
40446: LD_INT 11
40448: PUSH
40449: LD_INT 12
40451: PUSH
40452: LD_INT 13
40454: PUSH
40455: LD_INT 14
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: ST_TO_ADDR
40464: GO 41041
40466: LD_INT 24
40468: DOUBLE
40469: EQUAL
40470: IFTRUE 40474
40472: GO 40500
40474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40475: LD_ADDR_VAR 0 3
40479: PUSH
40480: LD_INT 11
40482: PUSH
40483: LD_INT 12
40485: PUSH
40486: LD_INT 13
40488: PUSH
40489: LD_INT 14
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: ST_TO_ADDR
40498: GO 41041
40500: LD_INT 30
40502: DOUBLE
40503: EQUAL
40504: IFTRUE 40508
40506: GO 40534
40508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40509: LD_ADDR_VAR 0 3
40513: PUSH
40514: LD_INT 11
40516: PUSH
40517: LD_INT 12
40519: PUSH
40520: LD_INT 13
40522: PUSH
40523: LD_INT 14
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: ST_TO_ADDR
40532: GO 41041
40534: LD_INT 25
40536: DOUBLE
40537: EQUAL
40538: IFTRUE 40542
40540: GO 40560
40542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40543: LD_ADDR_VAR 0 3
40547: PUSH
40548: LD_INT 13
40550: PUSH
40551: LD_INT 14
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: ST_TO_ADDR
40558: GO 41041
40560: LD_INT 27
40562: DOUBLE
40563: EQUAL
40564: IFTRUE 40568
40566: GO 40586
40568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40569: LD_ADDR_VAR 0 3
40573: PUSH
40574: LD_INT 13
40576: PUSH
40577: LD_INT 14
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: ST_TO_ADDR
40584: GO 41041
40586: LD_INT 92
40588: DOUBLE
40589: EQUAL
40590: IFTRUE 40594
40592: GO 40620
40594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40595: LD_ADDR_VAR 0 3
40599: PUSH
40600: LD_INT 11
40602: PUSH
40603: LD_INT 12
40605: PUSH
40606: LD_INT 13
40608: PUSH
40609: LD_INT 14
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: ST_TO_ADDR
40618: GO 41041
40620: LD_INT 28
40622: DOUBLE
40623: EQUAL
40624: IFTRUE 40628
40626: GO 40646
40628: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40629: LD_ADDR_VAR 0 3
40633: PUSH
40634: LD_INT 13
40636: PUSH
40637: LD_INT 14
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: ST_TO_ADDR
40644: GO 41041
40646: LD_INT 29
40648: DOUBLE
40649: EQUAL
40650: IFTRUE 40654
40652: GO 40672
40654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40655: LD_ADDR_VAR 0 3
40659: PUSH
40660: LD_INT 13
40662: PUSH
40663: LD_INT 14
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: ST_TO_ADDR
40670: GO 41041
40672: LD_INT 31
40674: DOUBLE
40675: EQUAL
40676: IFTRUE 40680
40678: GO 40698
40680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40681: LD_ADDR_VAR 0 3
40685: PUSH
40686: LD_INT 13
40688: PUSH
40689: LD_INT 14
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: ST_TO_ADDR
40696: GO 41041
40698: LD_INT 26
40700: DOUBLE
40701: EQUAL
40702: IFTRUE 40706
40704: GO 40724
40706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40707: LD_ADDR_VAR 0 3
40711: PUSH
40712: LD_INT 13
40714: PUSH
40715: LD_INT 14
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: ST_TO_ADDR
40722: GO 41041
40724: LD_INT 42
40726: DOUBLE
40727: EQUAL
40728: IFTRUE 40732
40730: GO 40758
40732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40733: LD_ADDR_VAR 0 3
40737: PUSH
40738: LD_INT 21
40740: PUSH
40741: LD_INT 22
40743: PUSH
40744: LD_INT 23
40746: PUSH
40747: LD_INT 24
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: ST_TO_ADDR
40756: GO 41041
40758: LD_INT 43
40760: DOUBLE
40761: EQUAL
40762: IFTRUE 40766
40764: GO 40792
40766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40767: LD_ADDR_VAR 0 3
40771: PUSH
40772: LD_INT 21
40774: PUSH
40775: LD_INT 22
40777: PUSH
40778: LD_INT 23
40780: PUSH
40781: LD_INT 24
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: ST_TO_ADDR
40790: GO 41041
40792: LD_INT 44
40794: DOUBLE
40795: EQUAL
40796: IFTRUE 40800
40798: GO 40826
40800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40801: LD_ADDR_VAR 0 3
40805: PUSH
40806: LD_INT 21
40808: PUSH
40809: LD_INT 22
40811: PUSH
40812: LD_INT 23
40814: PUSH
40815: LD_INT 24
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: ST_TO_ADDR
40824: GO 41041
40826: LD_INT 45
40828: DOUBLE
40829: EQUAL
40830: IFTRUE 40834
40832: GO 40860
40834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40835: LD_ADDR_VAR 0 3
40839: PUSH
40840: LD_INT 21
40842: PUSH
40843: LD_INT 22
40845: PUSH
40846: LD_INT 23
40848: PUSH
40849: LD_INT 24
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: ST_TO_ADDR
40858: GO 41041
40860: LD_INT 49
40862: DOUBLE
40863: EQUAL
40864: IFTRUE 40868
40866: GO 40894
40868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40869: LD_ADDR_VAR 0 3
40873: PUSH
40874: LD_INT 21
40876: PUSH
40877: LD_INT 22
40879: PUSH
40880: LD_INT 23
40882: PUSH
40883: LD_INT 24
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: ST_TO_ADDR
40892: GO 41041
40894: LD_INT 51
40896: DOUBLE
40897: EQUAL
40898: IFTRUE 40902
40900: GO 40928
40902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40903: LD_ADDR_VAR 0 3
40907: PUSH
40908: LD_INT 21
40910: PUSH
40911: LD_INT 22
40913: PUSH
40914: LD_INT 23
40916: PUSH
40917: LD_INT 24
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: ST_TO_ADDR
40926: GO 41041
40928: LD_INT 52
40930: DOUBLE
40931: EQUAL
40932: IFTRUE 40936
40934: GO 40962
40936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40937: LD_ADDR_VAR 0 3
40941: PUSH
40942: LD_INT 21
40944: PUSH
40945: LD_INT 22
40947: PUSH
40948: LD_INT 23
40950: PUSH
40951: LD_INT 24
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: ST_TO_ADDR
40960: GO 41041
40962: LD_INT 53
40964: DOUBLE
40965: EQUAL
40966: IFTRUE 40970
40968: GO 40988
40970: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40971: LD_ADDR_VAR 0 3
40975: PUSH
40976: LD_INT 23
40978: PUSH
40979: LD_INT 24
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: ST_TO_ADDR
40986: GO 41041
40988: LD_INT 46
40990: DOUBLE
40991: EQUAL
40992: IFTRUE 40996
40994: GO 41014
40996: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40997: LD_ADDR_VAR 0 3
41001: PUSH
41002: LD_INT 23
41004: PUSH
41005: LD_INT 24
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: ST_TO_ADDR
41012: GO 41041
41014: LD_INT 47
41016: DOUBLE
41017: EQUAL
41018: IFTRUE 41022
41020: GO 41040
41022: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41023: LD_ADDR_VAR 0 3
41027: PUSH
41028: LD_INT 23
41030: PUSH
41031: LD_INT 24
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: ST_TO_ADDR
41038: GO 41041
41040: POP
// result := ( chassis in result ) ;
41041: LD_ADDR_VAR 0 3
41045: PUSH
41046: LD_VAR 0 1
41050: PUSH
41051: LD_VAR 0 3
41055: IN
41056: ST_TO_ADDR
// end ;
41057: LD_VAR 0 3
41061: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41062: LD_INT 0
41064: PPUSH
41065: PPUSH
41066: PPUSH
41067: PPUSH
41068: PPUSH
41069: PPUSH
41070: PPUSH
// result := array ;
41071: LD_ADDR_VAR 0 5
41075: PUSH
41076: LD_VAR 0 1
41080: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41081: LD_VAR 0 1
41085: NOT
41086: PUSH
41087: LD_VAR 0 2
41091: NOT
41092: OR
41093: PUSH
41094: LD_VAR 0 3
41098: NOT
41099: OR
41100: PUSH
41101: LD_VAR 0 2
41105: PUSH
41106: LD_VAR 0 1
41110: GREATER
41111: OR
41112: PUSH
41113: LD_VAR 0 3
41117: PUSH
41118: LD_VAR 0 1
41122: GREATER
41123: OR
41124: IFFALSE 41128
// exit ;
41126: GO 41424
// if direction then
41128: LD_VAR 0 4
41132: IFFALSE 41196
// begin d := 1 ;
41134: LD_ADDR_VAR 0 9
41138: PUSH
41139: LD_INT 1
41141: ST_TO_ADDR
// if i_from > i_to then
41142: LD_VAR 0 2
41146: PUSH
41147: LD_VAR 0 3
41151: GREATER
41152: IFFALSE 41178
// length := ( array - i_from ) + i_to else
41154: LD_ADDR_VAR 0 11
41158: PUSH
41159: LD_VAR 0 1
41163: PUSH
41164: LD_VAR 0 2
41168: MINUS
41169: PUSH
41170: LD_VAR 0 3
41174: PLUS
41175: ST_TO_ADDR
41176: GO 41194
// length := i_to - i_from ;
41178: LD_ADDR_VAR 0 11
41182: PUSH
41183: LD_VAR 0 3
41187: PUSH
41188: LD_VAR 0 2
41192: MINUS
41193: ST_TO_ADDR
// end else
41194: GO 41257
// begin d := - 1 ;
41196: LD_ADDR_VAR 0 9
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: ST_TO_ADDR
// if i_from > i_to then
41205: LD_VAR 0 2
41209: PUSH
41210: LD_VAR 0 3
41214: GREATER
41215: IFFALSE 41235
// length := i_from - i_to else
41217: LD_ADDR_VAR 0 11
41221: PUSH
41222: LD_VAR 0 2
41226: PUSH
41227: LD_VAR 0 3
41231: MINUS
41232: ST_TO_ADDR
41233: GO 41257
// length := ( array - i_to ) + i_from ;
41235: LD_ADDR_VAR 0 11
41239: PUSH
41240: LD_VAR 0 1
41244: PUSH
41245: LD_VAR 0 3
41249: MINUS
41250: PUSH
41251: LD_VAR 0 2
41255: PLUS
41256: ST_TO_ADDR
// end ; if not length then
41257: LD_VAR 0 11
41261: NOT
41262: IFFALSE 41266
// exit ;
41264: GO 41424
// tmp := array ;
41266: LD_ADDR_VAR 0 10
41270: PUSH
41271: LD_VAR 0 1
41275: ST_TO_ADDR
// for i = 1 to length do
41276: LD_ADDR_VAR 0 6
41280: PUSH
41281: DOUBLE
41282: LD_INT 1
41284: DEC
41285: ST_TO_ADDR
41286: LD_VAR 0 11
41290: PUSH
41291: FOR_TO
41292: IFFALSE 41412
// begin for j = 1 to array do
41294: LD_ADDR_VAR 0 7
41298: PUSH
41299: DOUBLE
41300: LD_INT 1
41302: DEC
41303: ST_TO_ADDR
41304: LD_VAR 0 1
41308: PUSH
41309: FOR_TO
41310: IFFALSE 41398
// begin k := j + d ;
41312: LD_ADDR_VAR 0 8
41316: PUSH
41317: LD_VAR 0 7
41321: PUSH
41322: LD_VAR 0 9
41326: PLUS
41327: ST_TO_ADDR
// if k > array then
41328: LD_VAR 0 8
41332: PUSH
41333: LD_VAR 0 1
41337: GREATER
41338: IFFALSE 41348
// k := 1 ;
41340: LD_ADDR_VAR 0 8
41344: PUSH
41345: LD_INT 1
41347: ST_TO_ADDR
// if not k then
41348: LD_VAR 0 8
41352: NOT
41353: IFFALSE 41365
// k := array ;
41355: LD_ADDR_VAR 0 8
41359: PUSH
41360: LD_VAR 0 1
41364: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41365: LD_ADDR_VAR 0 10
41369: PUSH
41370: LD_VAR 0 10
41374: PPUSH
41375: LD_VAR 0 8
41379: PPUSH
41380: LD_VAR 0 1
41384: PUSH
41385: LD_VAR 0 7
41389: ARRAY
41390: PPUSH
41391: CALL_OW 1
41395: ST_TO_ADDR
// end ;
41396: GO 41309
41398: POP
41399: POP
// array := tmp ;
41400: LD_ADDR_VAR 0 1
41404: PUSH
41405: LD_VAR 0 10
41409: ST_TO_ADDR
// end ;
41410: GO 41291
41412: POP
41413: POP
// result := array ;
41414: LD_ADDR_VAR 0 5
41418: PUSH
41419: LD_VAR 0 1
41423: ST_TO_ADDR
// end ;
41424: LD_VAR 0 5
41428: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41429: LD_INT 0
41431: PPUSH
41432: PPUSH
// result := 0 ;
41433: LD_ADDR_VAR 0 3
41437: PUSH
41438: LD_INT 0
41440: ST_TO_ADDR
// if not array or not value in array then
41441: LD_VAR 0 1
41445: NOT
41446: PUSH
41447: LD_VAR 0 2
41451: PUSH
41452: LD_VAR 0 1
41456: IN
41457: NOT
41458: OR
41459: IFFALSE 41463
// exit ;
41461: GO 41517
// for i = 1 to array do
41463: LD_ADDR_VAR 0 4
41467: PUSH
41468: DOUBLE
41469: LD_INT 1
41471: DEC
41472: ST_TO_ADDR
41473: LD_VAR 0 1
41477: PUSH
41478: FOR_TO
41479: IFFALSE 41515
// if value = array [ i ] then
41481: LD_VAR 0 2
41485: PUSH
41486: LD_VAR 0 1
41490: PUSH
41491: LD_VAR 0 4
41495: ARRAY
41496: EQUAL
41497: IFFALSE 41513
// begin result := i ;
41499: LD_ADDR_VAR 0 3
41503: PUSH
41504: LD_VAR 0 4
41508: ST_TO_ADDR
// exit ;
41509: POP
41510: POP
41511: GO 41517
// end ;
41513: GO 41478
41515: POP
41516: POP
// end ;
41517: LD_VAR 0 3
41521: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41522: LD_INT 0
41524: PPUSH
// vc_chassis := chassis ;
41525: LD_ADDR_OWVAR 37
41529: PUSH
41530: LD_VAR 0 1
41534: ST_TO_ADDR
// vc_engine := engine ;
41535: LD_ADDR_OWVAR 39
41539: PUSH
41540: LD_VAR 0 2
41544: ST_TO_ADDR
// vc_control := control ;
41545: LD_ADDR_OWVAR 38
41549: PUSH
41550: LD_VAR 0 3
41554: ST_TO_ADDR
// vc_weapon := weapon ;
41555: LD_ADDR_OWVAR 40
41559: PUSH
41560: LD_VAR 0 4
41564: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41565: LD_ADDR_OWVAR 41
41569: PUSH
41570: LD_VAR 0 5
41574: ST_TO_ADDR
// end ;
41575: LD_VAR 0 6
41579: RET
// export function WantPlant ( unit ) ; var task ; begin
41580: LD_INT 0
41582: PPUSH
41583: PPUSH
// result := false ;
41584: LD_ADDR_VAR 0 2
41588: PUSH
41589: LD_INT 0
41591: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41592: LD_ADDR_VAR 0 3
41596: PUSH
41597: LD_VAR 0 1
41601: PPUSH
41602: CALL_OW 437
41606: ST_TO_ADDR
// if task then
41607: LD_VAR 0 3
41611: IFFALSE 41639
// if task [ 1 ] [ 1 ] = p then
41613: LD_VAR 0 3
41617: PUSH
41618: LD_INT 1
41620: ARRAY
41621: PUSH
41622: LD_INT 1
41624: ARRAY
41625: PUSH
41626: LD_STRING p
41628: EQUAL
41629: IFFALSE 41639
// result := true ;
41631: LD_ADDR_VAR 0 2
41635: PUSH
41636: LD_INT 1
41638: ST_TO_ADDR
// end ;
41639: LD_VAR 0 2
41643: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41644: LD_INT 0
41646: PPUSH
41647: PPUSH
41648: PPUSH
41649: PPUSH
// if pos < 1 then
41650: LD_VAR 0 2
41654: PUSH
41655: LD_INT 1
41657: LESS
41658: IFFALSE 41662
// exit ;
41660: GO 41965
// if pos = 1 then
41662: LD_VAR 0 2
41666: PUSH
41667: LD_INT 1
41669: EQUAL
41670: IFFALSE 41703
// result := Replace ( arr , pos [ 1 ] , value ) else
41672: LD_ADDR_VAR 0 4
41676: PUSH
41677: LD_VAR 0 1
41681: PPUSH
41682: LD_VAR 0 2
41686: PUSH
41687: LD_INT 1
41689: ARRAY
41690: PPUSH
41691: LD_VAR 0 3
41695: PPUSH
41696: CALL_OW 1
41700: ST_TO_ADDR
41701: GO 41965
// begin tmp := arr ;
41703: LD_ADDR_VAR 0 6
41707: PUSH
41708: LD_VAR 0 1
41712: ST_TO_ADDR
// s_arr := [ tmp ] ;
41713: LD_ADDR_VAR 0 7
41717: PUSH
41718: LD_VAR 0 6
41722: PUSH
41723: EMPTY
41724: LIST
41725: ST_TO_ADDR
// for i = 1 to pos - 1 do
41726: LD_ADDR_VAR 0 5
41730: PUSH
41731: DOUBLE
41732: LD_INT 1
41734: DEC
41735: ST_TO_ADDR
41736: LD_VAR 0 2
41740: PUSH
41741: LD_INT 1
41743: MINUS
41744: PUSH
41745: FOR_TO
41746: IFFALSE 41791
// begin tmp := tmp [ pos [ i ] ] ;
41748: LD_ADDR_VAR 0 6
41752: PUSH
41753: LD_VAR 0 6
41757: PUSH
41758: LD_VAR 0 2
41762: PUSH
41763: LD_VAR 0 5
41767: ARRAY
41768: ARRAY
41769: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41770: LD_ADDR_VAR 0 7
41774: PUSH
41775: LD_VAR 0 7
41779: PUSH
41780: LD_VAR 0 6
41784: PUSH
41785: EMPTY
41786: LIST
41787: ADD
41788: ST_TO_ADDR
// end ;
41789: GO 41745
41791: POP
41792: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41793: LD_ADDR_VAR 0 6
41797: PUSH
41798: LD_VAR 0 6
41802: PPUSH
41803: LD_VAR 0 2
41807: PUSH
41808: LD_VAR 0 2
41812: ARRAY
41813: PPUSH
41814: LD_VAR 0 3
41818: PPUSH
41819: CALL_OW 1
41823: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41824: LD_ADDR_VAR 0 7
41828: PUSH
41829: LD_VAR 0 7
41833: PPUSH
41834: LD_VAR 0 7
41838: PPUSH
41839: LD_VAR 0 6
41843: PPUSH
41844: CALL_OW 1
41848: ST_TO_ADDR
// for i = s_arr downto 2 do
41849: LD_ADDR_VAR 0 5
41853: PUSH
41854: DOUBLE
41855: LD_VAR 0 7
41859: INC
41860: ST_TO_ADDR
41861: LD_INT 2
41863: PUSH
41864: FOR_DOWNTO
41865: IFFALSE 41949
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41867: LD_ADDR_VAR 0 6
41871: PUSH
41872: LD_VAR 0 7
41876: PUSH
41877: LD_VAR 0 5
41881: PUSH
41882: LD_INT 1
41884: MINUS
41885: ARRAY
41886: PPUSH
41887: LD_VAR 0 2
41891: PUSH
41892: LD_VAR 0 5
41896: PUSH
41897: LD_INT 1
41899: MINUS
41900: ARRAY
41901: PPUSH
41902: LD_VAR 0 7
41906: PUSH
41907: LD_VAR 0 5
41911: ARRAY
41912: PPUSH
41913: CALL_OW 1
41917: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41918: LD_ADDR_VAR 0 7
41922: PUSH
41923: LD_VAR 0 7
41927: PPUSH
41928: LD_VAR 0 5
41932: PUSH
41933: LD_INT 1
41935: MINUS
41936: PPUSH
41937: LD_VAR 0 6
41941: PPUSH
41942: CALL_OW 1
41946: ST_TO_ADDR
// end ;
41947: GO 41864
41949: POP
41950: POP
// result := s_arr [ 1 ] ;
41951: LD_ADDR_VAR 0 4
41955: PUSH
41956: LD_VAR 0 7
41960: PUSH
41961: LD_INT 1
41963: ARRAY
41964: ST_TO_ADDR
// end ; end ;
41965: LD_VAR 0 4
41969: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41970: LD_INT 0
41972: PPUSH
41973: PPUSH
// if not list then
41974: LD_VAR 0 1
41978: NOT
41979: IFFALSE 41983
// exit ;
41981: GO 42074
// i := list [ pos1 ] ;
41983: LD_ADDR_VAR 0 5
41987: PUSH
41988: LD_VAR 0 1
41992: PUSH
41993: LD_VAR 0 2
41997: ARRAY
41998: ST_TO_ADDR
// if not i then
41999: LD_VAR 0 5
42003: NOT
42004: IFFALSE 42008
// exit ;
42006: GO 42074
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42008: LD_ADDR_VAR 0 1
42012: PUSH
42013: LD_VAR 0 1
42017: PPUSH
42018: LD_VAR 0 2
42022: PPUSH
42023: LD_VAR 0 1
42027: PUSH
42028: LD_VAR 0 3
42032: ARRAY
42033: PPUSH
42034: CALL_OW 1
42038: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42039: LD_ADDR_VAR 0 1
42043: PUSH
42044: LD_VAR 0 1
42048: PPUSH
42049: LD_VAR 0 3
42053: PPUSH
42054: LD_VAR 0 5
42058: PPUSH
42059: CALL_OW 1
42063: ST_TO_ADDR
// result := list ;
42064: LD_ADDR_VAR 0 4
42068: PUSH
42069: LD_VAR 0 1
42073: ST_TO_ADDR
// end ;
42074: LD_VAR 0 4
42078: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42079: LD_INT 0
42081: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42082: LD_ADDR_VAR 0 5
42086: PUSH
42087: LD_VAR 0 1
42091: PPUSH
42092: CALL_OW 250
42096: PPUSH
42097: LD_VAR 0 1
42101: PPUSH
42102: CALL_OW 251
42106: PPUSH
42107: LD_VAR 0 2
42111: PPUSH
42112: LD_VAR 0 3
42116: PPUSH
42117: LD_VAR 0 4
42121: PPUSH
42122: CALL 42132 0 5
42126: ST_TO_ADDR
// end ;
42127: LD_VAR 0 5
42131: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42132: LD_INT 0
42134: PPUSH
42135: PPUSH
42136: PPUSH
42137: PPUSH
// if not list then
42138: LD_VAR 0 3
42142: NOT
42143: IFFALSE 42147
// exit ;
42145: GO 42535
// result := [ ] ;
42147: LD_ADDR_VAR 0 6
42151: PUSH
42152: EMPTY
42153: ST_TO_ADDR
// for i in list do
42154: LD_ADDR_VAR 0 7
42158: PUSH
42159: LD_VAR 0 3
42163: PUSH
42164: FOR_IN
42165: IFFALSE 42367
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42167: LD_ADDR_VAR 0 9
42171: PUSH
42172: LD_VAR 0 7
42176: PPUSH
42177: LD_VAR 0 1
42181: PPUSH
42182: LD_VAR 0 2
42186: PPUSH
42187: CALL_OW 297
42191: ST_TO_ADDR
// if not result then
42192: LD_VAR 0 6
42196: NOT
42197: IFFALSE 42223
// result := [ [ i , tmp ] ] else
42199: LD_ADDR_VAR 0 6
42203: PUSH
42204: LD_VAR 0 7
42208: PUSH
42209: LD_VAR 0 9
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: EMPTY
42219: LIST
42220: ST_TO_ADDR
42221: GO 42365
// begin if result [ result ] [ 2 ] < tmp then
42223: LD_VAR 0 6
42227: PUSH
42228: LD_VAR 0 6
42232: ARRAY
42233: PUSH
42234: LD_INT 2
42236: ARRAY
42237: PUSH
42238: LD_VAR 0 9
42242: LESS
42243: IFFALSE 42285
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42245: LD_ADDR_VAR 0 6
42249: PUSH
42250: LD_VAR 0 6
42254: PPUSH
42255: LD_VAR 0 6
42259: PUSH
42260: LD_INT 1
42262: PLUS
42263: PPUSH
42264: LD_VAR 0 7
42268: PUSH
42269: LD_VAR 0 9
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PPUSH
42278: CALL_OW 2
42282: ST_TO_ADDR
42283: GO 42365
// for j = 1 to result do
42285: LD_ADDR_VAR 0 8
42289: PUSH
42290: DOUBLE
42291: LD_INT 1
42293: DEC
42294: ST_TO_ADDR
42295: LD_VAR 0 6
42299: PUSH
42300: FOR_TO
42301: IFFALSE 42363
// begin if tmp < result [ j ] [ 2 ] then
42303: LD_VAR 0 9
42307: PUSH
42308: LD_VAR 0 6
42312: PUSH
42313: LD_VAR 0 8
42317: ARRAY
42318: PUSH
42319: LD_INT 2
42321: ARRAY
42322: LESS
42323: IFFALSE 42361
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42325: LD_ADDR_VAR 0 6
42329: PUSH
42330: LD_VAR 0 6
42334: PPUSH
42335: LD_VAR 0 8
42339: PPUSH
42340: LD_VAR 0 7
42344: PUSH
42345: LD_VAR 0 9
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PPUSH
42354: CALL_OW 2
42358: ST_TO_ADDR
// break ;
42359: GO 42363
// end ; end ;
42361: GO 42300
42363: POP
42364: POP
// end ; end ;
42365: GO 42164
42367: POP
42368: POP
// if result and not asc then
42369: LD_VAR 0 6
42373: PUSH
42374: LD_VAR 0 4
42378: NOT
42379: AND
42380: IFFALSE 42455
// begin tmp := result ;
42382: LD_ADDR_VAR 0 9
42386: PUSH
42387: LD_VAR 0 6
42391: ST_TO_ADDR
// for i = tmp downto 1 do
42392: LD_ADDR_VAR 0 7
42396: PUSH
42397: DOUBLE
42398: LD_VAR 0 9
42402: INC
42403: ST_TO_ADDR
42404: LD_INT 1
42406: PUSH
42407: FOR_DOWNTO
42408: IFFALSE 42453
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42410: LD_ADDR_VAR 0 6
42414: PUSH
42415: LD_VAR 0 6
42419: PPUSH
42420: LD_VAR 0 9
42424: PUSH
42425: LD_VAR 0 7
42429: MINUS
42430: PUSH
42431: LD_INT 1
42433: PLUS
42434: PPUSH
42435: LD_VAR 0 9
42439: PUSH
42440: LD_VAR 0 7
42444: ARRAY
42445: PPUSH
42446: CALL_OW 1
42450: ST_TO_ADDR
42451: GO 42407
42453: POP
42454: POP
// end ; tmp := [ ] ;
42455: LD_ADDR_VAR 0 9
42459: PUSH
42460: EMPTY
42461: ST_TO_ADDR
// if mode then
42462: LD_VAR 0 5
42466: IFFALSE 42535
// begin for i = 1 to result do
42468: LD_ADDR_VAR 0 7
42472: PUSH
42473: DOUBLE
42474: LD_INT 1
42476: DEC
42477: ST_TO_ADDR
42478: LD_VAR 0 6
42482: PUSH
42483: FOR_TO
42484: IFFALSE 42523
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42486: LD_ADDR_VAR 0 9
42490: PUSH
42491: LD_VAR 0 9
42495: PPUSH
42496: LD_VAR 0 7
42500: PPUSH
42501: LD_VAR 0 6
42505: PUSH
42506: LD_VAR 0 7
42510: ARRAY
42511: PUSH
42512: LD_INT 1
42514: ARRAY
42515: PPUSH
42516: CALL_OW 1
42520: ST_TO_ADDR
42521: GO 42483
42523: POP
42524: POP
// result := tmp ;
42525: LD_ADDR_VAR 0 6
42529: PUSH
42530: LD_VAR 0 9
42534: ST_TO_ADDR
// end ; end ;
42535: LD_VAR 0 6
42539: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42540: LD_INT 0
42542: PPUSH
42543: PPUSH
42544: PPUSH
42545: PPUSH
42546: PPUSH
42547: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42548: LD_ADDR_VAR 0 5
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: ST_TO_ADDR
// if not x or not y then
42570: LD_VAR 0 2
42574: NOT
42575: PUSH
42576: LD_VAR 0 3
42580: NOT
42581: OR
42582: IFFALSE 42586
// exit ;
42584: GO 44236
// if not range then
42586: LD_VAR 0 4
42590: NOT
42591: IFFALSE 42601
// range := 10 ;
42593: LD_ADDR_VAR 0 4
42597: PUSH
42598: LD_INT 10
42600: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42601: LD_ADDR_VAR 0 8
42605: PUSH
42606: LD_INT 81
42608: PUSH
42609: LD_VAR 0 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 92
42620: PUSH
42621: LD_VAR 0 2
42625: PUSH
42626: LD_VAR 0 3
42630: PUSH
42631: LD_VAR 0 4
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 3
42644: PUSH
42645: LD_INT 21
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: PPUSH
42664: CALL_OW 69
42668: ST_TO_ADDR
// if not tmp then
42669: LD_VAR 0 8
42673: NOT
42674: IFFALSE 42678
// exit ;
42676: GO 44236
// for i in tmp do
42678: LD_ADDR_VAR 0 6
42682: PUSH
42683: LD_VAR 0 8
42687: PUSH
42688: FOR_IN
42689: IFFALSE 44211
// begin points := [ 0 , 0 , 0 ] ;
42691: LD_ADDR_VAR 0 9
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: ST_TO_ADDR
// bpoints := 1 ;
42710: LD_ADDR_VAR 0 10
42714: PUSH
42715: LD_INT 1
42717: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42718: LD_VAR 0 6
42722: PPUSH
42723: CALL_OW 247
42727: PUSH
42728: LD_INT 1
42730: DOUBLE
42731: EQUAL
42732: IFTRUE 42736
42734: GO 43314
42736: POP
// begin if GetClass ( i ) = 1 then
42737: LD_VAR 0 6
42741: PPUSH
42742: CALL_OW 257
42746: PUSH
42747: LD_INT 1
42749: EQUAL
42750: IFFALSE 42771
// points := [ 10 , 5 , 3 ] ;
42752: LD_ADDR_VAR 0 9
42756: PUSH
42757: LD_INT 10
42759: PUSH
42760: LD_INT 5
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: LIST
42770: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42771: LD_VAR 0 6
42775: PPUSH
42776: CALL_OW 257
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: LD_INT 4
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: IN
42795: IFFALSE 42816
// points := [ 3 , 2 , 1 ] ;
42797: LD_ADDR_VAR 0 9
42801: PUSH
42802: LD_INT 3
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: LIST
42815: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42816: LD_VAR 0 6
42820: PPUSH
42821: CALL_OW 257
42825: PUSH
42826: LD_INT 5
42828: EQUAL
42829: IFFALSE 42850
// points := [ 130 , 5 , 2 ] ;
42831: LD_ADDR_VAR 0 9
42835: PUSH
42836: LD_INT 130
42838: PUSH
42839: LD_INT 5
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42850: LD_VAR 0 6
42854: PPUSH
42855: CALL_OW 257
42859: PUSH
42860: LD_INT 8
42862: EQUAL
42863: IFFALSE 42884
// points := [ 35 , 35 , 30 ] ;
42865: LD_ADDR_VAR 0 9
42869: PUSH
42870: LD_INT 35
42872: PUSH
42873: LD_INT 35
42875: PUSH
42876: LD_INT 30
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42884: LD_VAR 0 6
42888: PPUSH
42889: CALL_OW 257
42893: PUSH
42894: LD_INT 9
42896: EQUAL
42897: IFFALSE 42918
// points := [ 20 , 55 , 40 ] ;
42899: LD_ADDR_VAR 0 9
42903: PUSH
42904: LD_INT 20
42906: PUSH
42907: LD_INT 55
42909: PUSH
42910: LD_INT 40
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42918: LD_VAR 0 6
42922: PPUSH
42923: CALL_OW 257
42927: PUSH
42928: LD_INT 12
42930: PUSH
42931: LD_INT 16
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: IN
42938: IFFALSE 42959
// points := [ 5 , 3 , 2 ] ;
42940: LD_ADDR_VAR 0 9
42944: PUSH
42945: LD_INT 5
42947: PUSH
42948: LD_INT 3
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42959: LD_VAR 0 6
42963: PPUSH
42964: CALL_OW 257
42968: PUSH
42969: LD_INT 17
42971: EQUAL
42972: IFFALSE 42993
// points := [ 100 , 50 , 75 ] ;
42974: LD_ADDR_VAR 0 9
42978: PUSH
42979: LD_INT 100
42981: PUSH
42982: LD_INT 50
42984: PUSH
42985: LD_INT 75
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42993: LD_VAR 0 6
42997: PPUSH
42998: CALL_OW 257
43002: PUSH
43003: LD_INT 15
43005: EQUAL
43006: IFFALSE 43027
// points := [ 10 , 5 , 3 ] ;
43008: LD_ADDR_VAR 0 9
43012: PUSH
43013: LD_INT 10
43015: PUSH
43016: LD_INT 5
43018: PUSH
43019: LD_INT 3
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: LIST
43026: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43027: LD_VAR 0 6
43031: PPUSH
43032: CALL_OW 257
43036: PUSH
43037: LD_INT 14
43039: EQUAL
43040: IFFALSE 43061
// points := [ 10 , 0 , 0 ] ;
43042: LD_ADDR_VAR 0 9
43046: PUSH
43047: LD_INT 10
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43061: LD_VAR 0 6
43065: PPUSH
43066: CALL_OW 257
43070: PUSH
43071: LD_INT 11
43073: EQUAL
43074: IFFALSE 43095
// points := [ 30 , 10 , 5 ] ;
43076: LD_ADDR_VAR 0 9
43080: PUSH
43081: LD_INT 30
43083: PUSH
43084: LD_INT 10
43086: PUSH
43087: LD_INT 5
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: LIST
43094: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43095: LD_VAR 0 1
43099: PPUSH
43100: LD_INT 5
43102: PPUSH
43103: CALL_OW 321
43107: PUSH
43108: LD_INT 2
43110: EQUAL
43111: IFFALSE 43128
// bpoints := bpoints * 1.8 ;
43113: LD_ADDR_VAR 0 10
43117: PUSH
43118: LD_VAR 0 10
43122: PUSH
43123: LD_REAL  1.80000000000000E+0000
43126: MUL
43127: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43128: LD_VAR 0 6
43132: PPUSH
43133: CALL_OW 257
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: LD_INT 4
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: IN
43156: PUSH
43157: LD_VAR 0 1
43161: PPUSH
43162: LD_INT 51
43164: PPUSH
43165: CALL_OW 321
43169: PUSH
43170: LD_INT 2
43172: EQUAL
43173: AND
43174: IFFALSE 43191
// bpoints := bpoints * 1.2 ;
43176: LD_ADDR_VAR 0 10
43180: PUSH
43181: LD_VAR 0 10
43185: PUSH
43186: LD_REAL  1.20000000000000E+0000
43189: MUL
43190: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43191: LD_VAR 0 6
43195: PPUSH
43196: CALL_OW 257
43200: PUSH
43201: LD_INT 5
43203: PUSH
43204: LD_INT 7
43206: PUSH
43207: LD_INT 9
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: LIST
43214: IN
43215: PUSH
43216: LD_VAR 0 1
43220: PPUSH
43221: LD_INT 52
43223: PPUSH
43224: CALL_OW 321
43228: PUSH
43229: LD_INT 2
43231: EQUAL
43232: AND
43233: IFFALSE 43250
// bpoints := bpoints * 1.5 ;
43235: LD_ADDR_VAR 0 10
43239: PUSH
43240: LD_VAR 0 10
43244: PUSH
43245: LD_REAL  1.50000000000000E+0000
43248: MUL
43249: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43250: LD_VAR 0 1
43254: PPUSH
43255: LD_INT 66
43257: PPUSH
43258: CALL_OW 321
43262: PUSH
43263: LD_INT 2
43265: EQUAL
43266: IFFALSE 43283
// bpoints := bpoints * 1.1 ;
43268: LD_ADDR_VAR 0 10
43272: PUSH
43273: LD_VAR 0 10
43277: PUSH
43278: LD_REAL  1.10000000000000E+0000
43281: MUL
43282: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43283: LD_ADDR_VAR 0 10
43287: PUSH
43288: LD_VAR 0 10
43292: PUSH
43293: LD_VAR 0 6
43297: PPUSH
43298: LD_INT 1
43300: PPUSH
43301: CALL_OW 259
43305: PUSH
43306: LD_REAL  1.15000000000000E+0000
43309: MUL
43310: MUL
43311: ST_TO_ADDR
// end ; unit_vehicle :
43312: GO 44140
43314: LD_INT 2
43316: DOUBLE
43317: EQUAL
43318: IFTRUE 43322
43320: GO 44128
43322: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43323: LD_VAR 0 6
43327: PPUSH
43328: CALL_OW 264
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 42
43338: PUSH
43339: LD_INT 24
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: LIST
43346: IN
43347: IFFALSE 43368
// points := [ 25 , 5 , 3 ] ;
43349: LD_ADDR_VAR 0 9
43353: PUSH
43354: LD_INT 25
43356: PUSH
43357: LD_INT 5
43359: PUSH
43360: LD_INT 3
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: LIST
43367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43368: LD_VAR 0 6
43372: PPUSH
43373: CALL_OW 264
43377: PUSH
43378: LD_INT 4
43380: PUSH
43381: LD_INT 43
43383: PUSH
43384: LD_INT 25
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: IN
43392: IFFALSE 43413
// points := [ 40 , 15 , 5 ] ;
43394: LD_ADDR_VAR 0 9
43398: PUSH
43399: LD_INT 40
43401: PUSH
43402: LD_INT 15
43404: PUSH
43405: LD_INT 5
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: LIST
43412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43413: LD_VAR 0 6
43417: PPUSH
43418: CALL_OW 264
43422: PUSH
43423: LD_INT 3
43425: PUSH
43426: LD_INT 23
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: IN
43433: IFFALSE 43454
// points := [ 7 , 25 , 8 ] ;
43435: LD_ADDR_VAR 0 9
43439: PUSH
43440: LD_INT 7
43442: PUSH
43443: LD_INT 25
43445: PUSH
43446: LD_INT 8
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43454: LD_VAR 0 6
43458: PPUSH
43459: CALL_OW 264
43463: PUSH
43464: LD_INT 5
43466: PUSH
43467: LD_INT 27
43469: PUSH
43470: LD_INT 44
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: IN
43478: IFFALSE 43499
// points := [ 14 , 50 , 16 ] ;
43480: LD_ADDR_VAR 0 9
43484: PUSH
43485: LD_INT 14
43487: PUSH
43488: LD_INT 50
43490: PUSH
43491: LD_INT 16
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43499: LD_VAR 0 6
43503: PPUSH
43504: CALL_OW 264
43508: PUSH
43509: LD_INT 6
43511: PUSH
43512: LD_INT 46
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: IN
43519: IFFALSE 43540
// points := [ 32 , 120 , 70 ] ;
43521: LD_ADDR_VAR 0 9
43525: PUSH
43526: LD_INT 32
43528: PUSH
43529: LD_INT 120
43531: PUSH
43532: LD_INT 70
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: LIST
43539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43540: LD_VAR 0 6
43544: PPUSH
43545: CALL_OW 264
43549: PUSH
43550: LD_INT 7
43552: PUSH
43553: LD_INT 28
43555: PUSH
43556: LD_INT 45
43558: PUSH
43559: LD_INT 92
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: IN
43568: IFFALSE 43589
// points := [ 35 , 20 , 45 ] ;
43570: LD_ADDR_VAR 0 9
43574: PUSH
43575: LD_INT 35
43577: PUSH
43578: LD_INT 20
43580: PUSH
43581: LD_INT 45
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: LIST
43588: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43589: LD_VAR 0 6
43593: PPUSH
43594: CALL_OW 264
43598: PUSH
43599: LD_INT 47
43601: PUSH
43602: EMPTY
43603: LIST
43604: IN
43605: IFFALSE 43626
// points := [ 67 , 45 , 75 ] ;
43607: LD_ADDR_VAR 0 9
43611: PUSH
43612: LD_INT 67
43614: PUSH
43615: LD_INT 45
43617: PUSH
43618: LD_INT 75
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: LIST
43625: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43626: LD_VAR 0 6
43630: PPUSH
43631: CALL_OW 264
43635: PUSH
43636: LD_INT 26
43638: PUSH
43639: EMPTY
43640: LIST
43641: IN
43642: IFFALSE 43663
// points := [ 120 , 30 , 80 ] ;
43644: LD_ADDR_VAR 0 9
43648: PUSH
43649: LD_INT 120
43651: PUSH
43652: LD_INT 30
43654: PUSH
43655: LD_INT 80
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43663: LD_VAR 0 6
43667: PPUSH
43668: CALL_OW 264
43672: PUSH
43673: LD_INT 22
43675: PUSH
43676: EMPTY
43677: LIST
43678: IN
43679: IFFALSE 43700
// points := [ 40 , 1 , 1 ] ;
43681: LD_ADDR_VAR 0 9
43685: PUSH
43686: LD_INT 40
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: LIST
43699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43700: LD_VAR 0 6
43704: PPUSH
43705: CALL_OW 264
43709: PUSH
43710: LD_INT 29
43712: PUSH
43713: EMPTY
43714: LIST
43715: IN
43716: IFFALSE 43737
// points := [ 70 , 200 , 400 ] ;
43718: LD_ADDR_VAR 0 9
43722: PUSH
43723: LD_INT 70
43725: PUSH
43726: LD_INT 200
43728: PUSH
43729: LD_INT 400
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43737: LD_VAR 0 6
43741: PPUSH
43742: CALL_OW 264
43746: PUSH
43747: LD_INT 14
43749: PUSH
43750: LD_INT 53
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: IN
43757: IFFALSE 43778
// points := [ 40 , 10 , 20 ] ;
43759: LD_ADDR_VAR 0 9
43763: PUSH
43764: LD_INT 40
43766: PUSH
43767: LD_INT 10
43769: PUSH
43770: LD_INT 20
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: LIST
43777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43778: LD_VAR 0 6
43782: PPUSH
43783: CALL_OW 264
43787: PUSH
43788: LD_INT 9
43790: PUSH
43791: EMPTY
43792: LIST
43793: IN
43794: IFFALSE 43815
// points := [ 5 , 70 , 20 ] ;
43796: LD_ADDR_VAR 0 9
43800: PUSH
43801: LD_INT 5
43803: PUSH
43804: LD_INT 70
43806: PUSH
43807: LD_INT 20
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: LIST
43814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43815: LD_VAR 0 6
43819: PPUSH
43820: CALL_OW 264
43824: PUSH
43825: LD_INT 10
43827: PUSH
43828: EMPTY
43829: LIST
43830: IN
43831: IFFALSE 43852
// points := [ 35 , 110 , 70 ] ;
43833: LD_ADDR_VAR 0 9
43837: PUSH
43838: LD_INT 35
43840: PUSH
43841: LD_INT 110
43843: PUSH
43844: LD_INT 70
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: LIST
43851: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43852: LD_VAR 0 6
43856: PPUSH
43857: CALL_OW 265
43861: PUSH
43862: LD_INT 25
43864: EQUAL
43865: IFFALSE 43886
// points := [ 80 , 65 , 100 ] ;
43867: LD_ADDR_VAR 0 9
43871: PUSH
43872: LD_INT 80
43874: PUSH
43875: LD_INT 65
43877: PUSH
43878: LD_INT 100
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43886: LD_VAR 0 6
43890: PPUSH
43891: CALL_OW 263
43895: PUSH
43896: LD_INT 1
43898: EQUAL
43899: IFFALSE 43934
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43901: LD_ADDR_VAR 0 10
43905: PUSH
43906: LD_VAR 0 10
43910: PUSH
43911: LD_VAR 0 6
43915: PPUSH
43916: CALL_OW 311
43920: PPUSH
43921: LD_INT 3
43923: PPUSH
43924: CALL_OW 259
43928: PUSH
43929: LD_INT 4
43931: MUL
43932: MUL
43933: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43934: LD_VAR 0 6
43938: PPUSH
43939: CALL_OW 263
43943: PUSH
43944: LD_INT 2
43946: EQUAL
43947: IFFALSE 43998
// begin j := IsControledBy ( i ) ;
43949: LD_ADDR_VAR 0 7
43953: PUSH
43954: LD_VAR 0 6
43958: PPUSH
43959: CALL_OW 312
43963: ST_TO_ADDR
// if j then
43964: LD_VAR 0 7
43968: IFFALSE 43998
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43970: LD_ADDR_VAR 0 10
43974: PUSH
43975: LD_VAR 0 10
43979: PUSH
43980: LD_VAR 0 7
43984: PPUSH
43985: LD_INT 3
43987: PPUSH
43988: CALL_OW 259
43992: PUSH
43993: LD_INT 3
43995: MUL
43996: MUL
43997: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43998: LD_VAR 0 6
44002: PPUSH
44003: CALL_OW 264
44007: PUSH
44008: LD_INT 5
44010: PUSH
44011: LD_INT 6
44013: PUSH
44014: LD_INT 46
44016: PUSH
44017: LD_INT 44
44019: PUSH
44020: LD_INT 47
44022: PUSH
44023: LD_INT 45
44025: PUSH
44026: LD_INT 28
44028: PUSH
44029: LD_INT 7
44031: PUSH
44032: LD_INT 27
44034: PUSH
44035: LD_INT 29
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: IN
44050: PUSH
44051: LD_VAR 0 1
44055: PPUSH
44056: LD_INT 52
44058: PPUSH
44059: CALL_OW 321
44063: PUSH
44064: LD_INT 2
44066: EQUAL
44067: AND
44068: IFFALSE 44085
// bpoints := bpoints * 1.2 ;
44070: LD_ADDR_VAR 0 10
44074: PUSH
44075: LD_VAR 0 10
44079: PUSH
44080: LD_REAL  1.20000000000000E+0000
44083: MUL
44084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44085: LD_VAR 0 6
44089: PPUSH
44090: CALL_OW 264
44094: PUSH
44095: LD_INT 6
44097: PUSH
44098: LD_INT 46
44100: PUSH
44101: LD_INT 47
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: LIST
44108: IN
44109: IFFALSE 44126
// bpoints := bpoints * 1.2 ;
44111: LD_ADDR_VAR 0 10
44115: PUSH
44116: LD_VAR 0 10
44120: PUSH
44121: LD_REAL  1.20000000000000E+0000
44124: MUL
44125: ST_TO_ADDR
// end ; unit_building :
44126: GO 44140
44128: LD_INT 3
44130: DOUBLE
44131: EQUAL
44132: IFTRUE 44136
44134: GO 44139
44136: POP
// ; end ;
44137: GO 44140
44139: POP
// for j = 1 to 3 do
44140: LD_ADDR_VAR 0 7
44144: PUSH
44145: DOUBLE
44146: LD_INT 1
44148: DEC
44149: ST_TO_ADDR
44150: LD_INT 3
44152: PUSH
44153: FOR_TO
44154: IFFALSE 44207
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44156: LD_ADDR_VAR 0 5
44160: PUSH
44161: LD_VAR 0 5
44165: PPUSH
44166: LD_VAR 0 7
44170: PPUSH
44171: LD_VAR 0 5
44175: PUSH
44176: LD_VAR 0 7
44180: ARRAY
44181: PUSH
44182: LD_VAR 0 9
44186: PUSH
44187: LD_VAR 0 7
44191: ARRAY
44192: PUSH
44193: LD_VAR 0 10
44197: MUL
44198: PLUS
44199: PPUSH
44200: CALL_OW 1
44204: ST_TO_ADDR
44205: GO 44153
44207: POP
44208: POP
// end ;
44209: GO 42688
44211: POP
44212: POP
// result := Replace ( result , 4 , tmp ) ;
44213: LD_ADDR_VAR 0 5
44217: PUSH
44218: LD_VAR 0 5
44222: PPUSH
44223: LD_INT 4
44225: PPUSH
44226: LD_VAR 0 8
44230: PPUSH
44231: CALL_OW 1
44235: ST_TO_ADDR
// end ;
44236: LD_VAR 0 5
44240: RET
// export function DangerAtRange ( unit , range ) ; begin
44241: LD_INT 0
44243: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44244: LD_ADDR_VAR 0 3
44248: PUSH
44249: LD_VAR 0 1
44253: PPUSH
44254: CALL_OW 255
44258: PPUSH
44259: LD_VAR 0 1
44263: PPUSH
44264: CALL_OW 250
44268: PPUSH
44269: LD_VAR 0 1
44273: PPUSH
44274: CALL_OW 251
44278: PPUSH
44279: LD_VAR 0 2
44283: PPUSH
44284: CALL 42540 0 4
44288: ST_TO_ADDR
// end ;
44289: LD_VAR 0 3
44293: RET
// export function DangerInArea ( side , area ) ; begin
44294: LD_INT 0
44296: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44297: LD_ADDR_VAR 0 3
44301: PUSH
44302: LD_VAR 0 2
44306: PPUSH
44307: LD_INT 81
44309: PUSH
44310: LD_VAR 0 1
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PPUSH
44319: CALL_OW 70
44323: ST_TO_ADDR
// end ;
44324: LD_VAR 0 3
44328: RET
// export function IsExtension ( b ) ; begin
44329: LD_INT 0
44331: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44332: LD_ADDR_VAR 0 2
44336: PUSH
44337: LD_VAR 0 1
44341: PUSH
44342: LD_INT 23
44344: PUSH
44345: LD_INT 20
44347: PUSH
44348: LD_INT 22
44350: PUSH
44351: LD_INT 17
44353: PUSH
44354: LD_INT 24
44356: PUSH
44357: LD_INT 21
44359: PUSH
44360: LD_INT 19
44362: PUSH
44363: LD_INT 16
44365: PUSH
44366: LD_INT 25
44368: PUSH
44369: LD_INT 18
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: IN
44384: ST_TO_ADDR
// end ;
44385: LD_VAR 0 2
44389: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44390: LD_INT 0
44392: PPUSH
44393: PPUSH
44394: PPUSH
// result := [ ] ;
44395: LD_ADDR_VAR 0 4
44399: PUSH
44400: EMPTY
44401: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44402: LD_ADDR_VAR 0 5
44406: PUSH
44407: LD_VAR 0 2
44411: PPUSH
44412: LD_INT 21
44414: PUSH
44415: LD_INT 3
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PPUSH
44422: CALL_OW 70
44426: ST_TO_ADDR
// if not tmp then
44427: LD_VAR 0 5
44431: NOT
44432: IFFALSE 44436
// exit ;
44434: GO 44500
// if checkLink then
44436: LD_VAR 0 3
44440: IFFALSE 44490
// begin for i in tmp do
44442: LD_ADDR_VAR 0 6
44446: PUSH
44447: LD_VAR 0 5
44451: PUSH
44452: FOR_IN
44453: IFFALSE 44488
// if GetBase ( i ) <> base then
44455: LD_VAR 0 6
44459: PPUSH
44460: CALL_OW 274
44464: PUSH
44465: LD_VAR 0 1
44469: NONEQUAL
44470: IFFALSE 44486
// ComLinkToBase ( base , i ) ;
44472: LD_VAR 0 1
44476: PPUSH
44477: LD_VAR 0 6
44481: PPUSH
44482: CALL_OW 169
44486: GO 44452
44488: POP
44489: POP
// end ; result := tmp ;
44490: LD_ADDR_VAR 0 4
44494: PUSH
44495: LD_VAR 0 5
44499: ST_TO_ADDR
// end ;
44500: LD_VAR 0 4
44504: RET
// export function ComComplete ( units , b ) ; var i ; begin
44505: LD_INT 0
44507: PPUSH
44508: PPUSH
// if not units then
44509: LD_VAR 0 1
44513: NOT
44514: IFFALSE 44518
// exit ;
44516: GO 44608
// for i in units do
44518: LD_ADDR_VAR 0 4
44522: PUSH
44523: LD_VAR 0 1
44527: PUSH
44528: FOR_IN
44529: IFFALSE 44606
// if BuildingStatus ( b ) = bs_build then
44531: LD_VAR 0 2
44535: PPUSH
44536: CALL_OW 461
44540: PUSH
44541: LD_INT 1
44543: EQUAL
44544: IFFALSE 44604
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44546: LD_VAR 0 4
44550: PPUSH
44551: LD_STRING h
44553: PUSH
44554: LD_VAR 0 2
44558: PPUSH
44559: CALL_OW 250
44563: PUSH
44564: LD_VAR 0 2
44568: PPUSH
44569: CALL_OW 251
44573: PUSH
44574: LD_VAR 0 2
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: PUSH
44597: EMPTY
44598: LIST
44599: PPUSH
44600: CALL_OW 446
44604: GO 44528
44606: POP
44607: POP
// end ;
44608: LD_VAR 0 3
44612: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44613: LD_INT 0
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44621: LD_VAR 0 1
44625: NOT
44626: PUSH
44627: LD_VAR 0 1
44631: PPUSH
44632: CALL_OW 263
44636: PUSH
44637: LD_INT 2
44639: NONEQUAL
44640: OR
44641: IFFALSE 44645
// exit ;
44643: GO 44961
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44645: LD_ADDR_VAR 0 6
44649: PUSH
44650: LD_INT 22
44652: PUSH
44653: LD_VAR 0 1
44657: PPUSH
44658: CALL_OW 255
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: LD_INT 30
44672: PUSH
44673: LD_INT 36
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 34
44682: PUSH
44683: LD_INT 31
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: LIST
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PPUSH
44699: CALL_OW 69
44703: ST_TO_ADDR
// if not tmp then
44704: LD_VAR 0 6
44708: NOT
44709: IFFALSE 44713
// exit ;
44711: GO 44961
// result := [ ] ;
44713: LD_ADDR_VAR 0 2
44717: PUSH
44718: EMPTY
44719: ST_TO_ADDR
// for i in tmp do
44720: LD_ADDR_VAR 0 3
44724: PUSH
44725: LD_VAR 0 6
44729: PUSH
44730: FOR_IN
44731: IFFALSE 44802
// begin t := UnitsInside ( i ) ;
44733: LD_ADDR_VAR 0 4
44737: PUSH
44738: LD_VAR 0 3
44742: PPUSH
44743: CALL_OW 313
44747: ST_TO_ADDR
// if t then
44748: LD_VAR 0 4
44752: IFFALSE 44800
// for j in t do
44754: LD_ADDR_VAR 0 7
44758: PUSH
44759: LD_VAR 0 4
44763: PUSH
44764: FOR_IN
44765: IFFALSE 44798
// result := Replace ( result , result + 1 , j ) ;
44767: LD_ADDR_VAR 0 2
44771: PUSH
44772: LD_VAR 0 2
44776: PPUSH
44777: LD_VAR 0 2
44781: PUSH
44782: LD_INT 1
44784: PLUS
44785: PPUSH
44786: LD_VAR 0 7
44790: PPUSH
44791: CALL_OW 1
44795: ST_TO_ADDR
44796: GO 44764
44798: POP
44799: POP
// end ;
44800: GO 44730
44802: POP
44803: POP
// if not result then
44804: LD_VAR 0 2
44808: NOT
44809: IFFALSE 44813
// exit ;
44811: GO 44961
// mech := result [ 1 ] ;
44813: LD_ADDR_VAR 0 5
44817: PUSH
44818: LD_VAR 0 2
44822: PUSH
44823: LD_INT 1
44825: ARRAY
44826: ST_TO_ADDR
// if result > 1 then
44827: LD_VAR 0 2
44831: PUSH
44832: LD_INT 1
44834: GREATER
44835: IFFALSE 44947
// begin for i = 2 to result do
44837: LD_ADDR_VAR 0 3
44841: PUSH
44842: DOUBLE
44843: LD_INT 2
44845: DEC
44846: ST_TO_ADDR
44847: LD_VAR 0 2
44851: PUSH
44852: FOR_TO
44853: IFFALSE 44945
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44855: LD_ADDR_VAR 0 4
44859: PUSH
44860: LD_VAR 0 2
44864: PUSH
44865: LD_VAR 0 3
44869: ARRAY
44870: PPUSH
44871: LD_INT 3
44873: PPUSH
44874: CALL_OW 259
44878: PUSH
44879: LD_VAR 0 2
44883: PUSH
44884: LD_VAR 0 3
44888: ARRAY
44889: PPUSH
44890: CALL_OW 432
44894: MINUS
44895: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44896: LD_VAR 0 4
44900: PUSH
44901: LD_VAR 0 5
44905: PPUSH
44906: LD_INT 3
44908: PPUSH
44909: CALL_OW 259
44913: PUSH
44914: LD_VAR 0 5
44918: PPUSH
44919: CALL_OW 432
44923: MINUS
44924: GREATEREQUAL
44925: IFFALSE 44943
// mech := result [ i ] ;
44927: LD_ADDR_VAR 0 5
44931: PUSH
44932: LD_VAR 0 2
44936: PUSH
44937: LD_VAR 0 3
44941: ARRAY
44942: ST_TO_ADDR
// end ;
44943: GO 44852
44945: POP
44946: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44947: LD_VAR 0 1
44951: PPUSH
44952: LD_VAR 0 5
44956: PPUSH
44957: CALL_OW 135
// end ;
44961: LD_VAR 0 2
44965: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44966: LD_INT 0
44968: PPUSH
44969: PPUSH
44970: PPUSH
44971: PPUSH
44972: PPUSH
44973: PPUSH
44974: PPUSH
44975: PPUSH
44976: PPUSH
44977: PPUSH
44978: PPUSH
44979: PPUSH
44980: PPUSH
// result := [ ] ;
44981: LD_ADDR_VAR 0 7
44985: PUSH
44986: EMPTY
44987: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44988: LD_VAR 0 1
44992: PPUSH
44993: CALL_OW 266
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: IN
45008: NOT
45009: IFFALSE 45013
// exit ;
45011: GO 46647
// if name then
45013: LD_VAR 0 3
45017: IFFALSE 45033
// SetBName ( base_dep , name ) ;
45019: LD_VAR 0 1
45023: PPUSH
45024: LD_VAR 0 3
45028: PPUSH
45029: CALL_OW 500
// base := GetBase ( base_dep ) ;
45033: LD_ADDR_VAR 0 15
45037: PUSH
45038: LD_VAR 0 1
45042: PPUSH
45043: CALL_OW 274
45047: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45048: LD_ADDR_VAR 0 16
45052: PUSH
45053: LD_VAR 0 1
45057: PPUSH
45058: CALL_OW 255
45062: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45063: LD_ADDR_VAR 0 17
45067: PUSH
45068: LD_VAR 0 1
45072: PPUSH
45073: CALL_OW 248
45077: ST_TO_ADDR
// if sources then
45078: LD_VAR 0 5
45082: IFFALSE 45129
// for i = 1 to 3 do
45084: LD_ADDR_VAR 0 8
45088: PUSH
45089: DOUBLE
45090: LD_INT 1
45092: DEC
45093: ST_TO_ADDR
45094: LD_INT 3
45096: PUSH
45097: FOR_TO
45098: IFFALSE 45127
// AddResourceType ( base , i , sources [ i ] ) ;
45100: LD_VAR 0 15
45104: PPUSH
45105: LD_VAR 0 8
45109: PPUSH
45110: LD_VAR 0 5
45114: PUSH
45115: LD_VAR 0 8
45119: ARRAY
45120: PPUSH
45121: CALL_OW 276
45125: GO 45097
45127: POP
45128: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45129: LD_ADDR_VAR 0 18
45133: PUSH
45134: LD_VAR 0 15
45138: PPUSH
45139: LD_VAR 0 2
45143: PPUSH
45144: LD_INT 1
45146: PPUSH
45147: CALL 44390 0 3
45151: ST_TO_ADDR
// InitHc ;
45152: CALL_OW 19
// InitUc ;
45156: CALL_OW 18
// uc_side := side ;
45160: LD_ADDR_OWVAR 20
45164: PUSH
45165: LD_VAR 0 16
45169: ST_TO_ADDR
// uc_nation := nation ;
45170: LD_ADDR_OWVAR 21
45174: PUSH
45175: LD_VAR 0 17
45179: ST_TO_ADDR
// if buildings then
45180: LD_VAR 0 18
45184: IFFALSE 46506
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45186: LD_ADDR_VAR 0 19
45190: PUSH
45191: LD_VAR 0 18
45195: PPUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 30
45201: PUSH
45202: LD_INT 29
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 30
45211: PUSH
45212: LD_INT 30
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: LIST
45223: PPUSH
45224: CALL_OW 72
45228: ST_TO_ADDR
// if tmp then
45229: LD_VAR 0 19
45233: IFFALSE 45281
// for i in tmp do
45235: LD_ADDR_VAR 0 8
45239: PUSH
45240: LD_VAR 0 19
45244: PUSH
45245: FOR_IN
45246: IFFALSE 45279
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45248: LD_VAR 0 8
45252: PPUSH
45253: CALL_OW 250
45257: PPUSH
45258: LD_VAR 0 8
45262: PPUSH
45263: CALL_OW 251
45267: PPUSH
45268: LD_VAR 0 16
45272: PPUSH
45273: CALL_OW 441
45277: GO 45245
45279: POP
45280: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45281: LD_VAR 0 18
45285: PPUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 30
45291: PUSH
45292: LD_INT 32
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 30
45301: PUSH
45302: LD_INT 33
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: PPUSH
45314: CALL_OW 72
45318: IFFALSE 45406
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45320: LD_ADDR_VAR 0 8
45324: PUSH
45325: LD_VAR 0 18
45329: PPUSH
45330: LD_INT 2
45332: PUSH
45333: LD_INT 30
45335: PUSH
45336: LD_INT 32
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 30
45345: PUSH
45346: LD_INT 33
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: LIST
45357: PPUSH
45358: CALL_OW 72
45362: PUSH
45363: FOR_IN
45364: IFFALSE 45404
// begin if not GetBWeapon ( i ) then
45366: LD_VAR 0 8
45370: PPUSH
45371: CALL_OW 269
45375: NOT
45376: IFFALSE 45402
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45378: LD_VAR 0 8
45382: PPUSH
45383: LD_VAR 0 8
45387: PPUSH
45388: LD_VAR 0 2
45392: PPUSH
45393: CALL 46652 0 2
45397: PPUSH
45398: CALL_OW 431
// end ;
45402: GO 45363
45404: POP
45405: POP
// end ; for i = 1 to personel do
45406: LD_ADDR_VAR 0 8
45410: PUSH
45411: DOUBLE
45412: LD_INT 1
45414: DEC
45415: ST_TO_ADDR
45416: LD_VAR 0 6
45420: PUSH
45421: FOR_TO
45422: IFFALSE 46486
// begin if i > 4 then
45424: LD_VAR 0 8
45428: PUSH
45429: LD_INT 4
45431: GREATER
45432: IFFALSE 45436
// break ;
45434: GO 46486
// case i of 1 :
45436: LD_VAR 0 8
45440: PUSH
45441: LD_INT 1
45443: DOUBLE
45444: EQUAL
45445: IFTRUE 45449
45447: GO 45529
45449: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45450: LD_ADDR_VAR 0 12
45454: PUSH
45455: LD_VAR 0 18
45459: PPUSH
45460: LD_INT 22
45462: PUSH
45463: LD_VAR 0 16
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 58
45474: PUSH
45475: EMPTY
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: LD_INT 30
45483: PUSH
45484: LD_INT 32
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 30
45493: PUSH
45494: LD_INT 4
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 30
45503: PUSH
45504: LD_INT 5
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: PPUSH
45522: CALL_OW 72
45526: ST_TO_ADDR
45527: GO 45751
45529: LD_INT 2
45531: DOUBLE
45532: EQUAL
45533: IFTRUE 45537
45535: GO 45599
45537: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45538: LD_ADDR_VAR 0 12
45542: PUSH
45543: LD_VAR 0 18
45547: PPUSH
45548: LD_INT 22
45550: PUSH
45551: LD_VAR 0 16
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: LD_INT 30
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 30
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: LIST
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PPUSH
45592: CALL_OW 72
45596: ST_TO_ADDR
45597: GO 45751
45599: LD_INT 3
45601: DOUBLE
45602: EQUAL
45603: IFTRUE 45607
45605: GO 45669
45607: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45608: LD_ADDR_VAR 0 12
45612: PUSH
45613: LD_VAR 0 18
45617: PPUSH
45618: LD_INT 22
45620: PUSH
45621: LD_VAR 0 16
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: LD_INT 30
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 30
45645: PUSH
45646: LD_INT 3
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PPUSH
45662: CALL_OW 72
45666: ST_TO_ADDR
45667: GO 45751
45669: LD_INT 4
45671: DOUBLE
45672: EQUAL
45673: IFTRUE 45677
45675: GO 45750
45677: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45678: LD_ADDR_VAR 0 12
45682: PUSH
45683: LD_VAR 0 18
45687: PPUSH
45688: LD_INT 22
45690: PUSH
45691: LD_VAR 0 16
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: LD_INT 30
45705: PUSH
45706: LD_INT 6
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 30
45715: PUSH
45716: LD_INT 7
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 30
45725: PUSH
45726: LD_INT 8
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PPUSH
45743: CALL_OW 72
45747: ST_TO_ADDR
45748: GO 45751
45750: POP
// if i = 1 then
45751: LD_VAR 0 8
45755: PUSH
45756: LD_INT 1
45758: EQUAL
45759: IFFALSE 45870
// begin tmp := [ ] ;
45761: LD_ADDR_VAR 0 19
45765: PUSH
45766: EMPTY
45767: ST_TO_ADDR
// for j in f do
45768: LD_ADDR_VAR 0 9
45772: PUSH
45773: LD_VAR 0 12
45777: PUSH
45778: FOR_IN
45779: IFFALSE 45852
// if GetBType ( j ) = b_bunker then
45781: LD_VAR 0 9
45785: PPUSH
45786: CALL_OW 266
45790: PUSH
45791: LD_INT 32
45793: EQUAL
45794: IFFALSE 45821
// tmp := Insert ( tmp , 1 , j ) else
45796: LD_ADDR_VAR 0 19
45800: PUSH
45801: LD_VAR 0 19
45805: PPUSH
45806: LD_INT 1
45808: PPUSH
45809: LD_VAR 0 9
45813: PPUSH
45814: CALL_OW 2
45818: ST_TO_ADDR
45819: GO 45850
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45821: LD_ADDR_VAR 0 19
45825: PUSH
45826: LD_VAR 0 19
45830: PPUSH
45831: LD_VAR 0 19
45835: PUSH
45836: LD_INT 1
45838: PLUS
45839: PPUSH
45840: LD_VAR 0 9
45844: PPUSH
45845: CALL_OW 2
45849: ST_TO_ADDR
45850: GO 45778
45852: POP
45853: POP
// if tmp then
45854: LD_VAR 0 19
45858: IFFALSE 45870
// f := tmp ;
45860: LD_ADDR_VAR 0 12
45864: PUSH
45865: LD_VAR 0 19
45869: ST_TO_ADDR
// end ; x := personel [ i ] ;
45870: LD_ADDR_VAR 0 13
45874: PUSH
45875: LD_VAR 0 6
45879: PUSH
45880: LD_VAR 0 8
45884: ARRAY
45885: ST_TO_ADDR
// if x = - 1 then
45886: LD_VAR 0 13
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: EQUAL
45895: IFFALSE 46104
// begin for j in f do
45897: LD_ADDR_VAR 0 9
45901: PUSH
45902: LD_VAR 0 12
45906: PUSH
45907: FOR_IN
45908: IFFALSE 46100
// repeat InitHc ;
45910: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45914: LD_VAR 0 9
45918: PPUSH
45919: CALL_OW 266
45923: PUSH
45924: LD_INT 5
45926: EQUAL
45927: IFFALSE 45997
// begin if UnitsInside ( j ) < 3 then
45929: LD_VAR 0 9
45933: PPUSH
45934: CALL_OW 313
45938: PUSH
45939: LD_INT 3
45941: LESS
45942: IFFALSE 45978
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45944: LD_INT 0
45946: PPUSH
45947: LD_INT 5
45949: PUSH
45950: LD_INT 8
45952: PUSH
45953: LD_INT 9
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: PUSH
45961: LD_VAR 0 17
45965: ARRAY
45966: PPUSH
45967: LD_VAR 0 4
45971: PPUSH
45972: CALL_OW 380
45976: GO 45995
// PrepareHuman ( false , i , skill ) ;
45978: LD_INT 0
45980: PPUSH
45981: LD_VAR 0 8
45985: PPUSH
45986: LD_VAR 0 4
45990: PPUSH
45991: CALL_OW 380
// end else
45995: GO 46014
// PrepareHuman ( false , i , skill ) ;
45997: LD_INT 0
45999: PPUSH
46000: LD_VAR 0 8
46004: PPUSH
46005: LD_VAR 0 4
46009: PPUSH
46010: CALL_OW 380
// un := CreateHuman ;
46014: LD_ADDR_VAR 0 14
46018: PUSH
46019: CALL_OW 44
46023: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46024: LD_ADDR_VAR 0 7
46028: PUSH
46029: LD_VAR 0 7
46033: PPUSH
46034: LD_INT 1
46036: PPUSH
46037: LD_VAR 0 14
46041: PPUSH
46042: CALL_OW 2
46046: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46047: LD_VAR 0 14
46051: PPUSH
46052: LD_VAR 0 9
46056: PPUSH
46057: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46061: LD_VAR 0 9
46065: PPUSH
46066: CALL_OW 313
46070: PUSH
46071: LD_INT 6
46073: EQUAL
46074: PUSH
46075: LD_VAR 0 9
46079: PPUSH
46080: CALL_OW 266
46084: PUSH
46085: LD_INT 32
46087: PUSH
46088: LD_INT 31
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: IN
46095: OR
46096: IFFALSE 45910
46098: GO 45907
46100: POP
46101: POP
// end else
46102: GO 46484
// for j = 1 to x do
46104: LD_ADDR_VAR 0 9
46108: PUSH
46109: DOUBLE
46110: LD_INT 1
46112: DEC
46113: ST_TO_ADDR
46114: LD_VAR 0 13
46118: PUSH
46119: FOR_TO
46120: IFFALSE 46482
// begin InitHc ;
46122: CALL_OW 19
// if not f then
46126: LD_VAR 0 12
46130: NOT
46131: IFFALSE 46220
// begin PrepareHuman ( false , i , skill ) ;
46133: LD_INT 0
46135: PPUSH
46136: LD_VAR 0 8
46140: PPUSH
46141: LD_VAR 0 4
46145: PPUSH
46146: CALL_OW 380
// un := CreateHuman ;
46150: LD_ADDR_VAR 0 14
46154: PUSH
46155: CALL_OW 44
46159: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46160: LD_ADDR_VAR 0 7
46164: PUSH
46165: LD_VAR 0 7
46169: PPUSH
46170: LD_INT 1
46172: PPUSH
46173: LD_VAR 0 14
46177: PPUSH
46178: CALL_OW 2
46182: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46183: LD_VAR 0 14
46187: PPUSH
46188: LD_VAR 0 1
46192: PPUSH
46193: CALL_OW 250
46197: PPUSH
46198: LD_VAR 0 1
46202: PPUSH
46203: CALL_OW 251
46207: PPUSH
46208: LD_INT 10
46210: PPUSH
46211: LD_INT 0
46213: PPUSH
46214: CALL_OW 50
// continue ;
46218: GO 46119
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46220: LD_VAR 0 12
46224: PUSH
46225: LD_INT 1
46227: ARRAY
46228: PPUSH
46229: CALL_OW 313
46233: PUSH
46234: LD_VAR 0 12
46238: PUSH
46239: LD_INT 1
46241: ARRAY
46242: PPUSH
46243: CALL_OW 266
46247: PUSH
46248: LD_INT 32
46250: PUSH
46251: LD_INT 31
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: IN
46258: AND
46259: PUSH
46260: LD_VAR 0 12
46264: PUSH
46265: LD_INT 1
46267: ARRAY
46268: PPUSH
46269: CALL_OW 313
46273: PUSH
46274: LD_INT 6
46276: EQUAL
46277: OR
46278: IFFALSE 46298
// f := Delete ( f , 1 ) ;
46280: LD_ADDR_VAR 0 12
46284: PUSH
46285: LD_VAR 0 12
46289: PPUSH
46290: LD_INT 1
46292: PPUSH
46293: CALL_OW 3
46297: ST_TO_ADDR
// if not f then
46298: LD_VAR 0 12
46302: NOT
46303: IFFALSE 46321
// begin x := x + 2 ;
46305: LD_ADDR_VAR 0 13
46309: PUSH
46310: LD_VAR 0 13
46314: PUSH
46315: LD_INT 2
46317: PLUS
46318: ST_TO_ADDR
// continue ;
46319: GO 46119
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46321: LD_VAR 0 12
46325: PUSH
46326: LD_INT 1
46328: ARRAY
46329: PPUSH
46330: CALL_OW 266
46334: PUSH
46335: LD_INT 5
46337: EQUAL
46338: IFFALSE 46412
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46340: LD_VAR 0 12
46344: PUSH
46345: LD_INT 1
46347: ARRAY
46348: PPUSH
46349: CALL_OW 313
46353: PUSH
46354: LD_INT 3
46356: LESS
46357: IFFALSE 46393
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46359: LD_INT 0
46361: PPUSH
46362: LD_INT 5
46364: PUSH
46365: LD_INT 8
46367: PUSH
46368: LD_INT 9
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: LIST
46375: PUSH
46376: LD_VAR 0 17
46380: ARRAY
46381: PPUSH
46382: LD_VAR 0 4
46386: PPUSH
46387: CALL_OW 380
46391: GO 46410
// PrepareHuman ( false , i , skill ) ;
46393: LD_INT 0
46395: PPUSH
46396: LD_VAR 0 8
46400: PPUSH
46401: LD_VAR 0 4
46405: PPUSH
46406: CALL_OW 380
// end else
46410: GO 46429
// PrepareHuman ( false , i , skill ) ;
46412: LD_INT 0
46414: PPUSH
46415: LD_VAR 0 8
46419: PPUSH
46420: LD_VAR 0 4
46424: PPUSH
46425: CALL_OW 380
// un := CreateHuman ;
46429: LD_ADDR_VAR 0 14
46433: PUSH
46434: CALL_OW 44
46438: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46439: LD_ADDR_VAR 0 7
46443: PUSH
46444: LD_VAR 0 7
46448: PPUSH
46449: LD_INT 1
46451: PPUSH
46452: LD_VAR 0 14
46456: PPUSH
46457: CALL_OW 2
46461: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46462: LD_VAR 0 14
46466: PPUSH
46467: LD_VAR 0 12
46471: PUSH
46472: LD_INT 1
46474: ARRAY
46475: PPUSH
46476: CALL_OW 52
// end ;
46480: GO 46119
46482: POP
46483: POP
// end ;
46484: GO 45421
46486: POP
46487: POP
// result := result ^ buildings ;
46488: LD_ADDR_VAR 0 7
46492: PUSH
46493: LD_VAR 0 7
46497: PUSH
46498: LD_VAR 0 18
46502: ADD
46503: ST_TO_ADDR
// end else
46504: GO 46647
// begin for i = 1 to personel do
46506: LD_ADDR_VAR 0 8
46510: PUSH
46511: DOUBLE
46512: LD_INT 1
46514: DEC
46515: ST_TO_ADDR
46516: LD_VAR 0 6
46520: PUSH
46521: FOR_TO
46522: IFFALSE 46645
// begin if i > 4 then
46524: LD_VAR 0 8
46528: PUSH
46529: LD_INT 4
46531: GREATER
46532: IFFALSE 46536
// break ;
46534: GO 46645
// x := personel [ i ] ;
46536: LD_ADDR_VAR 0 13
46540: PUSH
46541: LD_VAR 0 6
46545: PUSH
46546: LD_VAR 0 8
46550: ARRAY
46551: ST_TO_ADDR
// if x = - 1 then
46552: LD_VAR 0 13
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: EQUAL
46561: IFFALSE 46565
// continue ;
46563: GO 46521
// PrepareHuman ( false , i , skill ) ;
46565: LD_INT 0
46567: PPUSH
46568: LD_VAR 0 8
46572: PPUSH
46573: LD_VAR 0 4
46577: PPUSH
46578: CALL_OW 380
// un := CreateHuman ;
46582: LD_ADDR_VAR 0 14
46586: PUSH
46587: CALL_OW 44
46591: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46592: LD_VAR 0 14
46596: PPUSH
46597: LD_VAR 0 1
46601: PPUSH
46602: CALL_OW 250
46606: PPUSH
46607: LD_VAR 0 1
46611: PPUSH
46612: CALL_OW 251
46616: PPUSH
46617: LD_INT 10
46619: PPUSH
46620: LD_INT 0
46622: PPUSH
46623: CALL_OW 50
// result := result ^ un ;
46627: LD_ADDR_VAR 0 7
46631: PUSH
46632: LD_VAR 0 7
46636: PUSH
46637: LD_VAR 0 14
46641: ADD
46642: ST_TO_ADDR
// end ;
46643: GO 46521
46645: POP
46646: POP
// end ; end ;
46647: LD_VAR 0 7
46651: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46652: LD_INT 0
46654: PPUSH
46655: PPUSH
46656: PPUSH
46657: PPUSH
46658: PPUSH
46659: PPUSH
46660: PPUSH
46661: PPUSH
46662: PPUSH
46663: PPUSH
46664: PPUSH
46665: PPUSH
46666: PPUSH
46667: PPUSH
46668: PPUSH
46669: PPUSH
// result := false ;
46670: LD_ADDR_VAR 0 3
46674: PUSH
46675: LD_INT 0
46677: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46678: LD_VAR 0 1
46682: NOT
46683: PUSH
46684: LD_VAR 0 1
46688: PPUSH
46689: CALL_OW 266
46693: PUSH
46694: LD_INT 32
46696: PUSH
46697: LD_INT 33
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: IN
46704: NOT
46705: OR
46706: IFFALSE 46710
// exit ;
46708: GO 47819
// nat := GetNation ( tower ) ;
46710: LD_ADDR_VAR 0 12
46714: PUSH
46715: LD_VAR 0 1
46719: PPUSH
46720: CALL_OW 248
46724: ST_TO_ADDR
// side := GetSide ( tower ) ;
46725: LD_ADDR_VAR 0 16
46729: PUSH
46730: LD_VAR 0 1
46734: PPUSH
46735: CALL_OW 255
46739: ST_TO_ADDR
// x := GetX ( tower ) ;
46740: LD_ADDR_VAR 0 10
46744: PUSH
46745: LD_VAR 0 1
46749: PPUSH
46750: CALL_OW 250
46754: ST_TO_ADDR
// y := GetY ( tower ) ;
46755: LD_ADDR_VAR 0 11
46759: PUSH
46760: LD_VAR 0 1
46764: PPUSH
46765: CALL_OW 251
46769: ST_TO_ADDR
// if not x or not y then
46770: LD_VAR 0 10
46774: NOT
46775: PUSH
46776: LD_VAR 0 11
46780: NOT
46781: OR
46782: IFFALSE 46786
// exit ;
46784: GO 47819
// weapon := 0 ;
46786: LD_ADDR_VAR 0 18
46790: PUSH
46791: LD_INT 0
46793: ST_TO_ADDR
// fac_list := [ ] ;
46794: LD_ADDR_VAR 0 17
46798: PUSH
46799: EMPTY
46800: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46801: LD_ADDR_VAR 0 6
46805: PUSH
46806: LD_VAR 0 1
46810: PPUSH
46811: CALL_OW 274
46815: PPUSH
46816: LD_VAR 0 2
46820: PPUSH
46821: LD_INT 0
46823: PPUSH
46824: CALL 44390 0 3
46828: PPUSH
46829: LD_INT 30
46831: PUSH
46832: LD_INT 3
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PPUSH
46839: CALL_OW 72
46843: ST_TO_ADDR
// if not factories then
46844: LD_VAR 0 6
46848: NOT
46849: IFFALSE 46853
// exit ;
46851: GO 47819
// for i in factories do
46853: LD_ADDR_VAR 0 8
46857: PUSH
46858: LD_VAR 0 6
46862: PUSH
46863: FOR_IN
46864: IFFALSE 46889
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46866: LD_ADDR_VAR 0 17
46870: PUSH
46871: LD_VAR 0 17
46875: PUSH
46876: LD_VAR 0 8
46880: PPUSH
46881: CALL_OW 478
46885: UNION
46886: ST_TO_ADDR
46887: GO 46863
46889: POP
46890: POP
// if not fac_list then
46891: LD_VAR 0 17
46895: NOT
46896: IFFALSE 46900
// exit ;
46898: GO 47819
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46900: LD_ADDR_VAR 0 5
46904: PUSH
46905: LD_INT 4
46907: PUSH
46908: LD_INT 5
46910: PUSH
46911: LD_INT 9
46913: PUSH
46914: LD_INT 10
46916: PUSH
46917: LD_INT 6
46919: PUSH
46920: LD_INT 7
46922: PUSH
46923: LD_INT 11
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 27
46937: PUSH
46938: LD_INT 28
46940: PUSH
46941: LD_INT 26
46943: PUSH
46944: LD_INT 30
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 43
46955: PUSH
46956: LD_INT 44
46958: PUSH
46959: LD_INT 46
46961: PUSH
46962: LD_INT 45
46964: PUSH
46965: LD_INT 47
46967: PUSH
46968: LD_INT 49
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: PUSH
46984: LD_VAR 0 12
46988: ARRAY
46989: ST_TO_ADDR
// list := list isect fac_list ;
46990: LD_ADDR_VAR 0 5
46994: PUSH
46995: LD_VAR 0 5
46999: PUSH
47000: LD_VAR 0 17
47004: ISECT
47005: ST_TO_ADDR
// if not list then
47006: LD_VAR 0 5
47010: NOT
47011: IFFALSE 47015
// exit ;
47013: GO 47819
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47015: LD_VAR 0 12
47019: PUSH
47020: LD_INT 3
47022: EQUAL
47023: PUSH
47024: LD_INT 49
47026: PUSH
47027: LD_VAR 0 5
47031: IN
47032: AND
47033: PUSH
47034: LD_INT 31
47036: PPUSH
47037: LD_VAR 0 16
47041: PPUSH
47042: CALL_OW 321
47046: PUSH
47047: LD_INT 2
47049: EQUAL
47050: AND
47051: IFFALSE 47111
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47053: LD_INT 22
47055: PUSH
47056: LD_VAR 0 16
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 35
47067: PUSH
47068: LD_INT 49
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 91
47077: PUSH
47078: LD_VAR 0 1
47082: PUSH
47083: LD_INT 10
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: LIST
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: LIST
47095: PPUSH
47096: CALL_OW 69
47100: NOT
47101: IFFALSE 47111
// weapon := ru_time_lapser ;
47103: LD_ADDR_VAR 0 18
47107: PUSH
47108: LD_INT 49
47110: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47111: LD_VAR 0 12
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: IN
47126: PUSH
47127: LD_INT 11
47129: PUSH
47130: LD_VAR 0 5
47134: IN
47135: PUSH
47136: LD_INT 30
47138: PUSH
47139: LD_VAR 0 5
47143: IN
47144: OR
47145: AND
47146: PUSH
47147: LD_INT 6
47149: PPUSH
47150: LD_VAR 0 16
47154: PPUSH
47155: CALL_OW 321
47159: PUSH
47160: LD_INT 2
47162: EQUAL
47163: AND
47164: IFFALSE 47329
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47166: LD_INT 22
47168: PUSH
47169: LD_VAR 0 16
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: LD_INT 35
47183: PUSH
47184: LD_INT 11
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 35
47193: PUSH
47194: LD_INT 30
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 91
47208: PUSH
47209: LD_VAR 0 1
47213: PUSH
47214: LD_INT 18
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: LIST
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: LIST
47226: PPUSH
47227: CALL_OW 69
47231: NOT
47232: PUSH
47233: LD_INT 22
47235: PUSH
47236: LD_VAR 0 16
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 30
47250: PUSH
47251: LD_INT 32
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 30
47260: PUSH
47261: LD_INT 33
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 91
47275: PUSH
47276: LD_VAR 0 1
47280: PUSH
47281: LD_INT 12
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: LIST
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: LIST
47293: PUSH
47294: EMPTY
47295: LIST
47296: PPUSH
47297: CALL_OW 69
47301: PUSH
47302: LD_INT 2
47304: GREATER
47305: AND
47306: IFFALSE 47329
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47308: LD_ADDR_VAR 0 18
47312: PUSH
47313: LD_INT 11
47315: PUSH
47316: LD_INT 30
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_VAR 0 12
47327: ARRAY
47328: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47329: LD_VAR 0 18
47333: NOT
47334: PUSH
47335: LD_INT 40
47337: PPUSH
47338: LD_VAR 0 16
47342: PPUSH
47343: CALL_OW 321
47347: PUSH
47348: LD_INT 2
47350: EQUAL
47351: AND
47352: PUSH
47353: LD_INT 7
47355: PUSH
47356: LD_VAR 0 5
47360: IN
47361: PUSH
47362: LD_INT 28
47364: PUSH
47365: LD_VAR 0 5
47369: IN
47370: OR
47371: PUSH
47372: LD_INT 45
47374: PUSH
47375: LD_VAR 0 5
47379: IN
47380: OR
47381: AND
47382: IFFALSE 47636
// begin hex := GetHexInfo ( x , y ) ;
47384: LD_ADDR_VAR 0 4
47388: PUSH
47389: LD_VAR 0 10
47393: PPUSH
47394: LD_VAR 0 11
47398: PPUSH
47399: CALL_OW 546
47403: ST_TO_ADDR
// if hex [ 1 ] then
47404: LD_VAR 0 4
47408: PUSH
47409: LD_INT 1
47411: ARRAY
47412: IFFALSE 47416
// exit ;
47414: GO 47819
// height := hex [ 2 ] ;
47416: LD_ADDR_VAR 0 15
47420: PUSH
47421: LD_VAR 0 4
47425: PUSH
47426: LD_INT 2
47428: ARRAY
47429: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47430: LD_ADDR_VAR 0 14
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: LD_INT 3
47443: PUSH
47444: LD_INT 5
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: ST_TO_ADDR
// for i in tmp do
47453: LD_ADDR_VAR 0 8
47457: PUSH
47458: LD_VAR 0 14
47462: PUSH
47463: FOR_IN
47464: IFFALSE 47634
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47466: LD_ADDR_VAR 0 9
47470: PUSH
47471: LD_VAR 0 10
47475: PPUSH
47476: LD_VAR 0 8
47480: PPUSH
47481: LD_INT 5
47483: PPUSH
47484: CALL_OW 272
47488: PUSH
47489: LD_VAR 0 11
47493: PPUSH
47494: LD_VAR 0 8
47498: PPUSH
47499: LD_INT 5
47501: PPUSH
47502: CALL_OW 273
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47511: LD_VAR 0 9
47515: PUSH
47516: LD_INT 1
47518: ARRAY
47519: PPUSH
47520: LD_VAR 0 9
47524: PUSH
47525: LD_INT 2
47527: ARRAY
47528: PPUSH
47529: CALL_OW 488
47533: IFFALSE 47632
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47535: LD_ADDR_VAR 0 4
47539: PUSH
47540: LD_VAR 0 9
47544: PUSH
47545: LD_INT 1
47547: ARRAY
47548: PPUSH
47549: LD_VAR 0 9
47553: PUSH
47554: LD_INT 2
47556: ARRAY
47557: PPUSH
47558: CALL_OW 546
47562: ST_TO_ADDR
// if hex [ 1 ] then
47563: LD_VAR 0 4
47567: PUSH
47568: LD_INT 1
47570: ARRAY
47571: IFFALSE 47575
// continue ;
47573: GO 47463
// h := hex [ 2 ] ;
47575: LD_ADDR_VAR 0 13
47579: PUSH
47580: LD_VAR 0 4
47584: PUSH
47585: LD_INT 2
47587: ARRAY
47588: ST_TO_ADDR
// if h + 7 < height then
47589: LD_VAR 0 13
47593: PUSH
47594: LD_INT 7
47596: PLUS
47597: PUSH
47598: LD_VAR 0 15
47602: LESS
47603: IFFALSE 47632
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47605: LD_ADDR_VAR 0 18
47609: PUSH
47610: LD_INT 7
47612: PUSH
47613: LD_INT 28
47615: PUSH
47616: LD_INT 45
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: PUSH
47624: LD_VAR 0 12
47628: ARRAY
47629: ST_TO_ADDR
// break ;
47630: GO 47634
// end ; end ; end ;
47632: GO 47463
47634: POP
47635: POP
// end ; if not weapon then
47636: LD_VAR 0 18
47640: NOT
47641: IFFALSE 47701
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47643: LD_ADDR_VAR 0 5
47647: PUSH
47648: LD_VAR 0 5
47652: PUSH
47653: LD_INT 11
47655: PUSH
47656: LD_INT 30
47658: PUSH
47659: LD_INT 49
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: LIST
47666: DIFF
47667: ST_TO_ADDR
// if not list then
47668: LD_VAR 0 5
47672: NOT
47673: IFFALSE 47677
// exit ;
47675: GO 47819
// weapon := list [ rand ( 1 , list ) ] ;
47677: LD_ADDR_VAR 0 18
47681: PUSH
47682: LD_VAR 0 5
47686: PUSH
47687: LD_INT 1
47689: PPUSH
47690: LD_VAR 0 5
47694: PPUSH
47695: CALL_OW 12
47699: ARRAY
47700: ST_TO_ADDR
// end ; if weapon then
47701: LD_VAR 0 18
47705: IFFALSE 47819
// begin tmp := CostOfWeapon ( weapon ) ;
47707: LD_ADDR_VAR 0 14
47711: PUSH
47712: LD_VAR 0 18
47716: PPUSH
47717: CALL_OW 451
47721: ST_TO_ADDR
// j := GetBase ( tower ) ;
47722: LD_ADDR_VAR 0 9
47726: PUSH
47727: LD_VAR 0 1
47731: PPUSH
47732: CALL_OW 274
47736: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47737: LD_VAR 0 9
47741: PPUSH
47742: LD_INT 1
47744: PPUSH
47745: CALL_OW 275
47749: PUSH
47750: LD_VAR 0 14
47754: PUSH
47755: LD_INT 1
47757: ARRAY
47758: GREATEREQUAL
47759: PUSH
47760: LD_VAR 0 9
47764: PPUSH
47765: LD_INT 2
47767: PPUSH
47768: CALL_OW 275
47772: PUSH
47773: LD_VAR 0 14
47777: PUSH
47778: LD_INT 2
47780: ARRAY
47781: GREATEREQUAL
47782: AND
47783: PUSH
47784: LD_VAR 0 9
47788: PPUSH
47789: LD_INT 3
47791: PPUSH
47792: CALL_OW 275
47796: PUSH
47797: LD_VAR 0 14
47801: PUSH
47802: LD_INT 3
47804: ARRAY
47805: GREATEREQUAL
47806: AND
47807: IFFALSE 47819
// result := weapon ;
47809: LD_ADDR_VAR 0 3
47813: PUSH
47814: LD_VAR 0 18
47818: ST_TO_ADDR
// end ; end ;
47819: LD_VAR 0 3
47823: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47824: LD_INT 0
47826: PPUSH
47827: PPUSH
// result := true ;
47828: LD_ADDR_VAR 0 3
47832: PUSH
47833: LD_INT 1
47835: ST_TO_ADDR
// if array1 = array2 then
47836: LD_VAR 0 1
47840: PUSH
47841: LD_VAR 0 2
47845: EQUAL
47846: IFFALSE 47906
// begin for i = 1 to array1 do
47848: LD_ADDR_VAR 0 4
47852: PUSH
47853: DOUBLE
47854: LD_INT 1
47856: DEC
47857: ST_TO_ADDR
47858: LD_VAR 0 1
47862: PUSH
47863: FOR_TO
47864: IFFALSE 47902
// if array1 [ i ] <> array2 [ i ] then
47866: LD_VAR 0 1
47870: PUSH
47871: LD_VAR 0 4
47875: ARRAY
47876: PUSH
47877: LD_VAR 0 2
47881: PUSH
47882: LD_VAR 0 4
47886: ARRAY
47887: NONEQUAL
47888: IFFALSE 47900
// begin result := false ;
47890: LD_ADDR_VAR 0 3
47894: PUSH
47895: LD_INT 0
47897: ST_TO_ADDR
// break ;
47898: GO 47902
// end ;
47900: GO 47863
47902: POP
47903: POP
// end else
47904: GO 47914
// result := false ;
47906: LD_ADDR_VAR 0 3
47910: PUSH
47911: LD_INT 0
47913: ST_TO_ADDR
// end ;
47914: LD_VAR 0 3
47918: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47919: LD_INT 0
47921: PPUSH
47922: PPUSH
// if not array1 or not array2 then
47923: LD_VAR 0 1
47927: NOT
47928: PUSH
47929: LD_VAR 0 2
47933: NOT
47934: OR
47935: IFFALSE 47939
// exit ;
47937: GO 48003
// result := true ;
47939: LD_ADDR_VAR 0 3
47943: PUSH
47944: LD_INT 1
47946: ST_TO_ADDR
// for i = 1 to array1 do
47947: LD_ADDR_VAR 0 4
47951: PUSH
47952: DOUBLE
47953: LD_INT 1
47955: DEC
47956: ST_TO_ADDR
47957: LD_VAR 0 1
47961: PUSH
47962: FOR_TO
47963: IFFALSE 48001
// if array1 [ i ] <> array2 [ i ] then
47965: LD_VAR 0 1
47969: PUSH
47970: LD_VAR 0 4
47974: ARRAY
47975: PUSH
47976: LD_VAR 0 2
47980: PUSH
47981: LD_VAR 0 4
47985: ARRAY
47986: NONEQUAL
47987: IFFALSE 47999
// begin result := false ;
47989: LD_ADDR_VAR 0 3
47993: PUSH
47994: LD_INT 0
47996: ST_TO_ADDR
// break ;
47997: GO 48001
// end ;
47999: GO 47962
48001: POP
48002: POP
// end ;
48003: LD_VAR 0 3
48007: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48008: LD_INT 0
48010: PPUSH
48011: PPUSH
48012: PPUSH
// pom := GetBase ( fac ) ;
48013: LD_ADDR_VAR 0 5
48017: PUSH
48018: LD_VAR 0 1
48022: PPUSH
48023: CALL_OW 274
48027: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48028: LD_ADDR_VAR 0 4
48032: PUSH
48033: LD_VAR 0 2
48037: PUSH
48038: LD_INT 1
48040: ARRAY
48041: PPUSH
48042: LD_VAR 0 2
48046: PUSH
48047: LD_INT 2
48049: ARRAY
48050: PPUSH
48051: LD_VAR 0 2
48055: PUSH
48056: LD_INT 3
48058: ARRAY
48059: PPUSH
48060: LD_VAR 0 2
48064: PUSH
48065: LD_INT 4
48067: ARRAY
48068: PPUSH
48069: CALL_OW 449
48073: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48074: LD_ADDR_VAR 0 3
48078: PUSH
48079: LD_VAR 0 5
48083: PPUSH
48084: LD_INT 1
48086: PPUSH
48087: CALL_OW 275
48091: PUSH
48092: LD_VAR 0 4
48096: PUSH
48097: LD_INT 1
48099: ARRAY
48100: GREATEREQUAL
48101: PUSH
48102: LD_VAR 0 5
48106: PPUSH
48107: LD_INT 2
48109: PPUSH
48110: CALL_OW 275
48114: PUSH
48115: LD_VAR 0 4
48119: PUSH
48120: LD_INT 2
48122: ARRAY
48123: GREATEREQUAL
48124: AND
48125: PUSH
48126: LD_VAR 0 5
48130: PPUSH
48131: LD_INT 3
48133: PPUSH
48134: CALL_OW 275
48138: PUSH
48139: LD_VAR 0 4
48143: PUSH
48144: LD_INT 3
48146: ARRAY
48147: GREATEREQUAL
48148: AND
48149: ST_TO_ADDR
// end ;
48150: LD_VAR 0 3
48154: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48155: LD_INT 0
48157: PPUSH
48158: PPUSH
48159: PPUSH
48160: PPUSH
// pom := GetBase ( building ) ;
48161: LD_ADDR_VAR 0 3
48165: PUSH
48166: LD_VAR 0 1
48170: PPUSH
48171: CALL_OW 274
48175: ST_TO_ADDR
// if not pom then
48176: LD_VAR 0 3
48180: NOT
48181: IFFALSE 48185
// exit ;
48183: GO 48355
// btype := GetBType ( building ) ;
48185: LD_ADDR_VAR 0 5
48189: PUSH
48190: LD_VAR 0 1
48194: PPUSH
48195: CALL_OW 266
48199: ST_TO_ADDR
// if btype = b_armoury then
48200: LD_VAR 0 5
48204: PUSH
48205: LD_INT 4
48207: EQUAL
48208: IFFALSE 48218
// btype := b_barracks ;
48210: LD_ADDR_VAR 0 5
48214: PUSH
48215: LD_INT 5
48217: ST_TO_ADDR
// if btype = b_depot then
48218: LD_VAR 0 5
48222: PUSH
48223: LD_INT 0
48225: EQUAL
48226: IFFALSE 48236
// btype := b_warehouse ;
48228: LD_ADDR_VAR 0 5
48232: PUSH
48233: LD_INT 1
48235: ST_TO_ADDR
// if btype = b_workshop then
48236: LD_VAR 0 5
48240: PUSH
48241: LD_INT 2
48243: EQUAL
48244: IFFALSE 48254
// btype := b_factory ;
48246: LD_ADDR_VAR 0 5
48250: PUSH
48251: LD_INT 3
48253: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48254: LD_ADDR_VAR 0 4
48258: PUSH
48259: LD_VAR 0 5
48263: PPUSH
48264: LD_VAR 0 1
48268: PPUSH
48269: CALL_OW 248
48273: PPUSH
48274: CALL_OW 450
48278: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48279: LD_ADDR_VAR 0 2
48283: PUSH
48284: LD_VAR 0 3
48288: PPUSH
48289: LD_INT 1
48291: PPUSH
48292: CALL_OW 275
48296: PUSH
48297: LD_VAR 0 4
48301: PUSH
48302: LD_INT 1
48304: ARRAY
48305: GREATEREQUAL
48306: PUSH
48307: LD_VAR 0 3
48311: PPUSH
48312: LD_INT 2
48314: PPUSH
48315: CALL_OW 275
48319: PUSH
48320: LD_VAR 0 4
48324: PUSH
48325: LD_INT 2
48327: ARRAY
48328: GREATEREQUAL
48329: AND
48330: PUSH
48331: LD_VAR 0 3
48335: PPUSH
48336: LD_INT 3
48338: PPUSH
48339: CALL_OW 275
48343: PUSH
48344: LD_VAR 0 4
48348: PUSH
48349: LD_INT 3
48351: ARRAY
48352: GREATEREQUAL
48353: AND
48354: ST_TO_ADDR
// end ;
48355: LD_VAR 0 2
48359: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48360: LD_INT 0
48362: PPUSH
48363: PPUSH
48364: PPUSH
// pom := GetBase ( building ) ;
48365: LD_ADDR_VAR 0 4
48369: PUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: CALL_OW 274
48379: ST_TO_ADDR
// if not pom then
48380: LD_VAR 0 4
48384: NOT
48385: IFFALSE 48389
// exit ;
48387: GO 48490
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48389: LD_ADDR_VAR 0 5
48393: PUSH
48394: LD_VAR 0 2
48398: PPUSH
48399: LD_VAR 0 1
48403: PPUSH
48404: CALL_OW 248
48408: PPUSH
48409: CALL_OW 450
48413: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48414: LD_ADDR_VAR 0 3
48418: PUSH
48419: LD_VAR 0 4
48423: PPUSH
48424: LD_INT 1
48426: PPUSH
48427: CALL_OW 275
48431: PUSH
48432: LD_VAR 0 5
48436: PUSH
48437: LD_INT 1
48439: ARRAY
48440: GREATEREQUAL
48441: PUSH
48442: LD_VAR 0 4
48446: PPUSH
48447: LD_INT 2
48449: PPUSH
48450: CALL_OW 275
48454: PUSH
48455: LD_VAR 0 5
48459: PUSH
48460: LD_INT 2
48462: ARRAY
48463: GREATEREQUAL
48464: AND
48465: PUSH
48466: LD_VAR 0 4
48470: PPUSH
48471: LD_INT 3
48473: PPUSH
48474: CALL_OW 275
48478: PUSH
48479: LD_VAR 0 5
48483: PUSH
48484: LD_INT 3
48486: ARRAY
48487: GREATEREQUAL
48488: AND
48489: ST_TO_ADDR
// end ;
48490: LD_VAR 0 3
48494: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48495: LD_INT 0
48497: PPUSH
48498: PPUSH
48499: PPUSH
48500: PPUSH
48501: PPUSH
48502: PPUSH
48503: PPUSH
48504: PPUSH
48505: PPUSH
48506: PPUSH
48507: PPUSH
// result := false ;
48508: LD_ADDR_VAR 0 8
48512: PUSH
48513: LD_INT 0
48515: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48516: LD_VAR 0 5
48520: NOT
48521: PUSH
48522: LD_VAR 0 1
48526: NOT
48527: OR
48528: PUSH
48529: LD_VAR 0 2
48533: NOT
48534: OR
48535: PUSH
48536: LD_VAR 0 3
48540: NOT
48541: OR
48542: IFFALSE 48546
// exit ;
48544: GO 49360
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48546: LD_ADDR_VAR 0 14
48550: PUSH
48551: LD_VAR 0 1
48555: PPUSH
48556: LD_VAR 0 2
48560: PPUSH
48561: LD_VAR 0 3
48565: PPUSH
48566: LD_VAR 0 4
48570: PPUSH
48571: LD_VAR 0 5
48575: PUSH
48576: LD_INT 1
48578: ARRAY
48579: PPUSH
48580: CALL_OW 248
48584: PPUSH
48585: LD_INT 0
48587: PPUSH
48588: CALL 50593 0 6
48592: ST_TO_ADDR
// if not hexes then
48593: LD_VAR 0 14
48597: NOT
48598: IFFALSE 48602
// exit ;
48600: GO 49360
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48602: LD_ADDR_VAR 0 17
48606: PUSH
48607: LD_VAR 0 5
48611: PPUSH
48612: LD_INT 22
48614: PUSH
48615: LD_VAR 0 13
48619: PPUSH
48620: CALL_OW 255
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: LD_INT 30
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 30
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: LIST
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PPUSH
48661: CALL_OW 72
48665: ST_TO_ADDR
// for i = 1 to hexes do
48666: LD_ADDR_VAR 0 9
48670: PUSH
48671: DOUBLE
48672: LD_INT 1
48674: DEC
48675: ST_TO_ADDR
48676: LD_VAR 0 14
48680: PUSH
48681: FOR_TO
48682: IFFALSE 49358
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48684: LD_ADDR_VAR 0 13
48688: PUSH
48689: LD_VAR 0 14
48693: PUSH
48694: LD_VAR 0 9
48698: ARRAY
48699: PUSH
48700: LD_INT 1
48702: ARRAY
48703: PPUSH
48704: LD_VAR 0 14
48708: PUSH
48709: LD_VAR 0 9
48713: ARRAY
48714: PUSH
48715: LD_INT 2
48717: ARRAY
48718: PPUSH
48719: CALL_OW 428
48723: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48724: LD_VAR 0 14
48728: PUSH
48729: LD_VAR 0 9
48733: ARRAY
48734: PUSH
48735: LD_INT 1
48737: ARRAY
48738: PPUSH
48739: LD_VAR 0 14
48743: PUSH
48744: LD_VAR 0 9
48748: ARRAY
48749: PUSH
48750: LD_INT 2
48752: ARRAY
48753: PPUSH
48754: CALL_OW 351
48758: PUSH
48759: LD_VAR 0 14
48763: PUSH
48764: LD_VAR 0 9
48768: ARRAY
48769: PUSH
48770: LD_INT 1
48772: ARRAY
48773: PPUSH
48774: LD_VAR 0 14
48778: PUSH
48779: LD_VAR 0 9
48783: ARRAY
48784: PUSH
48785: LD_INT 2
48787: ARRAY
48788: PPUSH
48789: CALL_OW 488
48793: NOT
48794: OR
48795: PUSH
48796: LD_VAR 0 13
48800: PPUSH
48801: CALL_OW 247
48805: PUSH
48806: LD_INT 3
48808: EQUAL
48809: OR
48810: IFFALSE 48816
// exit ;
48812: POP
48813: POP
48814: GO 49360
// if not tmp then
48816: LD_VAR 0 13
48820: NOT
48821: IFFALSE 48825
// continue ;
48823: GO 48681
// result := true ;
48825: LD_ADDR_VAR 0 8
48829: PUSH
48830: LD_INT 1
48832: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48833: LD_VAR 0 6
48837: PUSH
48838: LD_VAR 0 13
48842: PPUSH
48843: CALL_OW 247
48847: PUSH
48848: LD_INT 2
48850: EQUAL
48851: AND
48852: PUSH
48853: LD_VAR 0 13
48857: PPUSH
48858: CALL_OW 263
48862: PUSH
48863: LD_INT 1
48865: EQUAL
48866: AND
48867: IFFALSE 49031
// begin if IsDrivenBy ( tmp ) then
48869: LD_VAR 0 13
48873: PPUSH
48874: CALL_OW 311
48878: IFFALSE 48882
// continue ;
48880: GO 48681
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48882: LD_VAR 0 6
48886: PPUSH
48887: LD_INT 3
48889: PUSH
48890: LD_INT 60
48892: PUSH
48893: EMPTY
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 3
48902: PUSH
48903: LD_INT 55
48905: PUSH
48906: EMPTY
48907: LIST
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PPUSH
48917: CALL_OW 72
48921: IFFALSE 49029
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48923: LD_ADDR_VAR 0 18
48927: PUSH
48928: LD_VAR 0 6
48932: PPUSH
48933: LD_INT 3
48935: PUSH
48936: LD_INT 60
48938: PUSH
48939: EMPTY
48940: LIST
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 3
48948: PUSH
48949: LD_INT 55
48951: PUSH
48952: EMPTY
48953: LIST
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PPUSH
48963: CALL_OW 72
48967: PUSH
48968: LD_INT 1
48970: ARRAY
48971: ST_TO_ADDR
// if IsInUnit ( driver ) then
48972: LD_VAR 0 18
48976: PPUSH
48977: CALL_OW 310
48981: IFFALSE 48992
// ComExit ( driver ) ;
48983: LD_VAR 0 18
48987: PPUSH
48988: CALL 74354 0 1
// AddComEnterUnit ( driver , tmp ) ;
48992: LD_VAR 0 18
48996: PPUSH
48997: LD_VAR 0 13
49001: PPUSH
49002: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49006: LD_VAR 0 18
49010: PPUSH
49011: LD_VAR 0 7
49015: PPUSH
49016: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49020: LD_VAR 0 18
49024: PPUSH
49025: CALL_OW 181
// end ; continue ;
49029: GO 48681
// end ; if not cleaners or not tmp in cleaners then
49031: LD_VAR 0 6
49035: NOT
49036: PUSH
49037: LD_VAR 0 13
49041: PUSH
49042: LD_VAR 0 6
49046: IN
49047: NOT
49048: OR
49049: IFFALSE 49356
// begin if dep then
49051: LD_VAR 0 17
49055: IFFALSE 49191
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49057: LD_ADDR_VAR 0 16
49061: PUSH
49062: LD_VAR 0 17
49066: PUSH
49067: LD_INT 1
49069: ARRAY
49070: PPUSH
49071: CALL_OW 250
49075: PPUSH
49076: LD_VAR 0 17
49080: PUSH
49081: LD_INT 1
49083: ARRAY
49084: PPUSH
49085: CALL_OW 254
49089: PPUSH
49090: LD_INT 5
49092: PPUSH
49093: CALL_OW 272
49097: PUSH
49098: LD_VAR 0 17
49102: PUSH
49103: LD_INT 1
49105: ARRAY
49106: PPUSH
49107: CALL_OW 251
49111: PPUSH
49112: LD_VAR 0 17
49116: PUSH
49117: LD_INT 1
49119: ARRAY
49120: PPUSH
49121: CALL_OW 254
49125: PPUSH
49126: LD_INT 5
49128: PPUSH
49129: CALL_OW 273
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49138: LD_VAR 0 16
49142: PUSH
49143: LD_INT 1
49145: ARRAY
49146: PPUSH
49147: LD_VAR 0 16
49151: PUSH
49152: LD_INT 2
49154: ARRAY
49155: PPUSH
49156: CALL_OW 488
49160: IFFALSE 49191
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49162: LD_VAR 0 13
49166: PPUSH
49167: LD_VAR 0 16
49171: PUSH
49172: LD_INT 1
49174: ARRAY
49175: PPUSH
49176: LD_VAR 0 16
49180: PUSH
49181: LD_INT 2
49183: ARRAY
49184: PPUSH
49185: CALL_OW 111
// continue ;
49189: GO 48681
// end ; end ; r := GetDir ( tmp ) ;
49191: LD_ADDR_VAR 0 15
49195: PUSH
49196: LD_VAR 0 13
49200: PPUSH
49201: CALL_OW 254
49205: ST_TO_ADDR
// if r = 5 then
49206: LD_VAR 0 15
49210: PUSH
49211: LD_INT 5
49213: EQUAL
49214: IFFALSE 49224
// r := 0 ;
49216: LD_ADDR_VAR 0 15
49220: PUSH
49221: LD_INT 0
49223: ST_TO_ADDR
// for j = r to 5 do
49224: LD_ADDR_VAR 0 10
49228: PUSH
49229: DOUBLE
49230: LD_VAR 0 15
49234: DEC
49235: ST_TO_ADDR
49236: LD_INT 5
49238: PUSH
49239: FOR_TO
49240: IFFALSE 49354
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49242: LD_ADDR_VAR 0 11
49246: PUSH
49247: LD_VAR 0 13
49251: PPUSH
49252: CALL_OW 250
49256: PPUSH
49257: LD_VAR 0 10
49261: PPUSH
49262: LD_INT 2
49264: PPUSH
49265: CALL_OW 272
49269: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49270: LD_ADDR_VAR 0 12
49274: PUSH
49275: LD_VAR 0 13
49279: PPUSH
49280: CALL_OW 251
49284: PPUSH
49285: LD_VAR 0 10
49289: PPUSH
49290: LD_INT 2
49292: PPUSH
49293: CALL_OW 273
49297: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49298: LD_VAR 0 11
49302: PPUSH
49303: LD_VAR 0 12
49307: PPUSH
49308: CALL_OW 488
49312: PUSH
49313: LD_VAR 0 11
49317: PPUSH
49318: LD_VAR 0 12
49322: PPUSH
49323: CALL_OW 428
49327: NOT
49328: AND
49329: IFFALSE 49352
// begin ComMoveXY ( tmp , _x , _y ) ;
49331: LD_VAR 0 13
49335: PPUSH
49336: LD_VAR 0 11
49340: PPUSH
49341: LD_VAR 0 12
49345: PPUSH
49346: CALL_OW 111
// break ;
49350: GO 49354
// end ; end ;
49352: GO 49239
49354: POP
49355: POP
// end ; end ;
49356: GO 48681
49358: POP
49359: POP
// end ;
49360: LD_VAR 0 8
49364: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49365: LD_INT 0
49367: PPUSH
// result := true ;
49368: LD_ADDR_VAR 0 3
49372: PUSH
49373: LD_INT 1
49375: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49376: LD_VAR 0 2
49380: PUSH
49381: LD_INT 24
49383: DOUBLE
49384: EQUAL
49385: IFTRUE 49395
49387: LD_INT 33
49389: DOUBLE
49390: EQUAL
49391: IFTRUE 49395
49393: GO 49420
49395: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49396: LD_ADDR_VAR 0 3
49400: PUSH
49401: LD_INT 32
49403: PPUSH
49404: LD_VAR 0 1
49408: PPUSH
49409: CALL_OW 321
49413: PUSH
49414: LD_INT 2
49416: EQUAL
49417: ST_TO_ADDR
49418: GO 49736
49420: LD_INT 20
49422: DOUBLE
49423: EQUAL
49424: IFTRUE 49428
49426: GO 49453
49428: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49429: LD_ADDR_VAR 0 3
49433: PUSH
49434: LD_INT 6
49436: PPUSH
49437: LD_VAR 0 1
49441: PPUSH
49442: CALL_OW 321
49446: PUSH
49447: LD_INT 2
49449: EQUAL
49450: ST_TO_ADDR
49451: GO 49736
49453: LD_INT 22
49455: DOUBLE
49456: EQUAL
49457: IFTRUE 49467
49459: LD_INT 36
49461: DOUBLE
49462: EQUAL
49463: IFTRUE 49467
49465: GO 49492
49467: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49468: LD_ADDR_VAR 0 3
49472: PUSH
49473: LD_INT 15
49475: PPUSH
49476: LD_VAR 0 1
49480: PPUSH
49481: CALL_OW 321
49485: PUSH
49486: LD_INT 2
49488: EQUAL
49489: ST_TO_ADDR
49490: GO 49736
49492: LD_INT 30
49494: DOUBLE
49495: EQUAL
49496: IFTRUE 49500
49498: GO 49525
49500: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49501: LD_ADDR_VAR 0 3
49505: PUSH
49506: LD_INT 20
49508: PPUSH
49509: LD_VAR 0 1
49513: PPUSH
49514: CALL_OW 321
49518: PUSH
49519: LD_INT 2
49521: EQUAL
49522: ST_TO_ADDR
49523: GO 49736
49525: LD_INT 28
49527: DOUBLE
49528: EQUAL
49529: IFTRUE 49539
49531: LD_INT 21
49533: DOUBLE
49534: EQUAL
49535: IFTRUE 49539
49537: GO 49564
49539: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49540: LD_ADDR_VAR 0 3
49544: PUSH
49545: LD_INT 21
49547: PPUSH
49548: LD_VAR 0 1
49552: PPUSH
49553: CALL_OW 321
49557: PUSH
49558: LD_INT 2
49560: EQUAL
49561: ST_TO_ADDR
49562: GO 49736
49564: LD_INT 16
49566: DOUBLE
49567: EQUAL
49568: IFTRUE 49572
49570: GO 49597
49572: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49573: LD_ADDR_VAR 0 3
49577: PUSH
49578: LD_INT 84
49580: PPUSH
49581: LD_VAR 0 1
49585: PPUSH
49586: CALL_OW 321
49590: PUSH
49591: LD_INT 2
49593: EQUAL
49594: ST_TO_ADDR
49595: GO 49736
49597: LD_INT 19
49599: DOUBLE
49600: EQUAL
49601: IFTRUE 49611
49603: LD_INT 23
49605: DOUBLE
49606: EQUAL
49607: IFTRUE 49611
49609: GO 49636
49611: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49612: LD_ADDR_VAR 0 3
49616: PUSH
49617: LD_INT 83
49619: PPUSH
49620: LD_VAR 0 1
49624: PPUSH
49625: CALL_OW 321
49629: PUSH
49630: LD_INT 2
49632: EQUAL
49633: ST_TO_ADDR
49634: GO 49736
49636: LD_INT 17
49638: DOUBLE
49639: EQUAL
49640: IFTRUE 49644
49642: GO 49669
49644: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49645: LD_ADDR_VAR 0 3
49649: PUSH
49650: LD_INT 39
49652: PPUSH
49653: LD_VAR 0 1
49657: PPUSH
49658: CALL_OW 321
49662: PUSH
49663: LD_INT 2
49665: EQUAL
49666: ST_TO_ADDR
49667: GO 49736
49669: LD_INT 18
49671: DOUBLE
49672: EQUAL
49673: IFTRUE 49677
49675: GO 49702
49677: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49678: LD_ADDR_VAR 0 3
49682: PUSH
49683: LD_INT 40
49685: PPUSH
49686: LD_VAR 0 1
49690: PPUSH
49691: CALL_OW 321
49695: PUSH
49696: LD_INT 2
49698: EQUAL
49699: ST_TO_ADDR
49700: GO 49736
49702: LD_INT 27
49704: DOUBLE
49705: EQUAL
49706: IFTRUE 49710
49708: GO 49735
49710: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49711: LD_ADDR_VAR 0 3
49715: PUSH
49716: LD_INT 35
49718: PPUSH
49719: LD_VAR 0 1
49723: PPUSH
49724: CALL_OW 321
49728: PUSH
49729: LD_INT 2
49731: EQUAL
49732: ST_TO_ADDR
49733: GO 49736
49735: POP
// end ;
49736: LD_VAR 0 3
49740: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49741: LD_INT 0
49743: PPUSH
49744: PPUSH
49745: PPUSH
49746: PPUSH
49747: PPUSH
49748: PPUSH
49749: PPUSH
49750: PPUSH
49751: PPUSH
49752: PPUSH
49753: PPUSH
// result := false ;
49754: LD_ADDR_VAR 0 6
49758: PUSH
49759: LD_INT 0
49761: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49762: LD_VAR 0 1
49766: NOT
49767: PUSH
49768: LD_VAR 0 1
49772: PPUSH
49773: CALL_OW 266
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: IN
49788: NOT
49789: OR
49790: PUSH
49791: LD_VAR 0 2
49795: NOT
49796: OR
49797: PUSH
49798: LD_VAR 0 5
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: LD_INT 4
49817: PUSH
49818: LD_INT 5
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: IN
49829: NOT
49830: OR
49831: PUSH
49832: LD_VAR 0 3
49836: PPUSH
49837: LD_VAR 0 4
49841: PPUSH
49842: CALL_OW 488
49846: NOT
49847: OR
49848: IFFALSE 49852
// exit ;
49850: GO 50588
// side := GetSide ( depot ) ;
49852: LD_ADDR_VAR 0 9
49856: PUSH
49857: LD_VAR 0 1
49861: PPUSH
49862: CALL_OW 255
49866: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49867: LD_VAR 0 9
49871: PPUSH
49872: LD_VAR 0 2
49876: PPUSH
49877: CALL 49365 0 2
49881: NOT
49882: IFFALSE 49886
// exit ;
49884: GO 50588
// pom := GetBase ( depot ) ;
49886: LD_ADDR_VAR 0 10
49890: PUSH
49891: LD_VAR 0 1
49895: PPUSH
49896: CALL_OW 274
49900: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49901: LD_ADDR_VAR 0 11
49905: PUSH
49906: LD_VAR 0 2
49910: PPUSH
49911: LD_VAR 0 1
49915: PPUSH
49916: CALL_OW 248
49920: PPUSH
49921: CALL_OW 450
49925: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49926: LD_VAR 0 10
49930: PPUSH
49931: LD_INT 1
49933: PPUSH
49934: CALL_OW 275
49938: PUSH
49939: LD_VAR 0 11
49943: PUSH
49944: LD_INT 1
49946: ARRAY
49947: GREATEREQUAL
49948: PUSH
49949: LD_VAR 0 10
49953: PPUSH
49954: LD_INT 2
49956: PPUSH
49957: CALL_OW 275
49961: PUSH
49962: LD_VAR 0 11
49966: PUSH
49967: LD_INT 2
49969: ARRAY
49970: GREATEREQUAL
49971: AND
49972: PUSH
49973: LD_VAR 0 10
49977: PPUSH
49978: LD_INT 3
49980: PPUSH
49981: CALL_OW 275
49985: PUSH
49986: LD_VAR 0 11
49990: PUSH
49991: LD_INT 3
49993: ARRAY
49994: GREATEREQUAL
49995: AND
49996: NOT
49997: IFFALSE 50001
// exit ;
49999: GO 50588
// if GetBType ( depot ) = b_depot then
50001: LD_VAR 0 1
50005: PPUSH
50006: CALL_OW 266
50010: PUSH
50011: LD_INT 0
50013: EQUAL
50014: IFFALSE 50026
// dist := 28 else
50016: LD_ADDR_VAR 0 14
50020: PUSH
50021: LD_INT 28
50023: ST_TO_ADDR
50024: GO 50034
// dist := 36 ;
50026: LD_ADDR_VAR 0 14
50030: PUSH
50031: LD_INT 36
50033: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50034: LD_VAR 0 1
50038: PPUSH
50039: LD_VAR 0 3
50043: PPUSH
50044: LD_VAR 0 4
50048: PPUSH
50049: CALL_OW 297
50053: PUSH
50054: LD_VAR 0 14
50058: GREATER
50059: IFFALSE 50063
// exit ;
50061: GO 50588
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50063: LD_ADDR_VAR 0 12
50067: PUSH
50068: LD_VAR 0 2
50072: PPUSH
50073: LD_VAR 0 3
50077: PPUSH
50078: LD_VAR 0 4
50082: PPUSH
50083: LD_VAR 0 5
50087: PPUSH
50088: LD_VAR 0 1
50092: PPUSH
50093: CALL_OW 248
50097: PPUSH
50098: LD_INT 0
50100: PPUSH
50101: CALL 50593 0 6
50105: ST_TO_ADDR
// if not hexes then
50106: LD_VAR 0 12
50110: NOT
50111: IFFALSE 50115
// exit ;
50113: GO 50588
// hex := GetHexInfo ( x , y ) ;
50115: LD_ADDR_VAR 0 15
50119: PUSH
50120: LD_VAR 0 3
50124: PPUSH
50125: LD_VAR 0 4
50129: PPUSH
50130: CALL_OW 546
50134: ST_TO_ADDR
// if hex [ 1 ] then
50135: LD_VAR 0 15
50139: PUSH
50140: LD_INT 1
50142: ARRAY
50143: IFFALSE 50147
// exit ;
50145: GO 50588
// height := hex [ 2 ] ;
50147: LD_ADDR_VAR 0 13
50151: PUSH
50152: LD_VAR 0 15
50156: PUSH
50157: LD_INT 2
50159: ARRAY
50160: ST_TO_ADDR
// for i = 1 to hexes do
50161: LD_ADDR_VAR 0 7
50165: PUSH
50166: DOUBLE
50167: LD_INT 1
50169: DEC
50170: ST_TO_ADDR
50171: LD_VAR 0 12
50175: PUSH
50176: FOR_TO
50177: IFFALSE 50507
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50179: LD_VAR 0 12
50183: PUSH
50184: LD_VAR 0 7
50188: ARRAY
50189: PUSH
50190: LD_INT 1
50192: ARRAY
50193: PPUSH
50194: LD_VAR 0 12
50198: PUSH
50199: LD_VAR 0 7
50203: ARRAY
50204: PUSH
50205: LD_INT 2
50207: ARRAY
50208: PPUSH
50209: CALL_OW 488
50213: NOT
50214: PUSH
50215: LD_VAR 0 12
50219: PUSH
50220: LD_VAR 0 7
50224: ARRAY
50225: PUSH
50226: LD_INT 1
50228: ARRAY
50229: PPUSH
50230: LD_VAR 0 12
50234: PUSH
50235: LD_VAR 0 7
50239: ARRAY
50240: PUSH
50241: LD_INT 2
50243: ARRAY
50244: PPUSH
50245: CALL_OW 428
50249: PUSH
50250: LD_INT 0
50252: GREATER
50253: OR
50254: PUSH
50255: LD_VAR 0 12
50259: PUSH
50260: LD_VAR 0 7
50264: ARRAY
50265: PUSH
50266: LD_INT 1
50268: ARRAY
50269: PPUSH
50270: LD_VAR 0 12
50274: PUSH
50275: LD_VAR 0 7
50279: ARRAY
50280: PUSH
50281: LD_INT 2
50283: ARRAY
50284: PPUSH
50285: CALL_OW 351
50289: OR
50290: IFFALSE 50296
// exit ;
50292: POP
50293: POP
50294: GO 50588
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50296: LD_ADDR_VAR 0 8
50300: PUSH
50301: LD_VAR 0 12
50305: PUSH
50306: LD_VAR 0 7
50310: ARRAY
50311: PUSH
50312: LD_INT 1
50314: ARRAY
50315: PPUSH
50316: LD_VAR 0 12
50320: PUSH
50321: LD_VAR 0 7
50325: ARRAY
50326: PUSH
50327: LD_INT 2
50329: ARRAY
50330: PPUSH
50331: CALL_OW 546
50335: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50336: LD_VAR 0 8
50340: PUSH
50341: LD_INT 1
50343: ARRAY
50344: PUSH
50345: LD_VAR 0 8
50349: PUSH
50350: LD_INT 2
50352: ARRAY
50353: PUSH
50354: LD_VAR 0 13
50358: PUSH
50359: LD_INT 2
50361: PLUS
50362: GREATER
50363: OR
50364: PUSH
50365: LD_VAR 0 8
50369: PUSH
50370: LD_INT 2
50372: ARRAY
50373: PUSH
50374: LD_VAR 0 13
50378: PUSH
50379: LD_INT 2
50381: MINUS
50382: LESS
50383: OR
50384: PUSH
50385: LD_VAR 0 8
50389: PUSH
50390: LD_INT 3
50392: ARRAY
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: LD_INT 8
50399: PUSH
50400: LD_INT 9
50402: PUSH
50403: LD_INT 10
50405: PUSH
50406: LD_INT 11
50408: PUSH
50409: LD_INT 12
50411: PUSH
50412: LD_INT 13
50414: PUSH
50415: LD_INT 16
50417: PUSH
50418: LD_INT 17
50420: PUSH
50421: LD_INT 18
50423: PUSH
50424: LD_INT 19
50426: PUSH
50427: LD_INT 20
50429: PUSH
50430: LD_INT 21
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: IN
50448: NOT
50449: OR
50450: PUSH
50451: LD_VAR 0 8
50455: PUSH
50456: LD_INT 5
50458: ARRAY
50459: NOT
50460: OR
50461: PUSH
50462: LD_VAR 0 8
50466: PUSH
50467: LD_INT 6
50469: ARRAY
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: LD_INT 7
50479: PUSH
50480: LD_INT 9
50482: PUSH
50483: LD_INT 10
50485: PUSH
50486: LD_INT 11
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: IN
50497: NOT
50498: OR
50499: IFFALSE 50505
// exit ;
50501: POP
50502: POP
50503: GO 50588
// end ;
50505: GO 50176
50507: POP
50508: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50509: LD_VAR 0 9
50513: PPUSH
50514: LD_VAR 0 3
50518: PPUSH
50519: LD_VAR 0 4
50523: PPUSH
50524: LD_INT 20
50526: PPUSH
50527: CALL 42540 0 4
50531: PUSH
50532: LD_INT 4
50534: ARRAY
50535: IFFALSE 50539
// exit ;
50537: GO 50588
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50539: LD_VAR 0 2
50543: PUSH
50544: LD_INT 29
50546: PUSH
50547: LD_INT 30
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: IN
50554: PUSH
50555: LD_VAR 0 3
50559: PPUSH
50560: LD_VAR 0 4
50564: PPUSH
50565: LD_VAR 0 9
50569: PPUSH
50570: CALL_OW 440
50574: NOT
50575: AND
50576: IFFALSE 50580
// exit ;
50578: GO 50588
// result := true ;
50580: LD_ADDR_VAR 0 6
50584: PUSH
50585: LD_INT 1
50587: ST_TO_ADDR
// end ;
50588: LD_VAR 0 6
50592: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50593: LD_INT 0
50595: PPUSH
50596: PPUSH
50597: PPUSH
50598: PPUSH
50599: PPUSH
50600: PPUSH
50601: PPUSH
50602: PPUSH
50603: PPUSH
50604: PPUSH
50605: PPUSH
50606: PPUSH
50607: PPUSH
50608: PPUSH
50609: PPUSH
50610: PPUSH
50611: PPUSH
50612: PPUSH
50613: PPUSH
50614: PPUSH
50615: PPUSH
50616: PPUSH
50617: PPUSH
50618: PPUSH
50619: PPUSH
50620: PPUSH
50621: PPUSH
50622: PPUSH
50623: PPUSH
50624: PPUSH
50625: PPUSH
50626: PPUSH
50627: PPUSH
50628: PPUSH
50629: PPUSH
50630: PPUSH
50631: PPUSH
50632: PPUSH
50633: PPUSH
50634: PPUSH
50635: PPUSH
50636: PPUSH
50637: PPUSH
50638: PPUSH
50639: PPUSH
50640: PPUSH
50641: PPUSH
50642: PPUSH
50643: PPUSH
50644: PPUSH
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
// result = [ ] ;
50653: LD_ADDR_VAR 0 7
50657: PUSH
50658: EMPTY
50659: ST_TO_ADDR
// temp_list = [ ] ;
50660: LD_ADDR_VAR 0 9
50664: PUSH
50665: EMPTY
50666: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50667: LD_VAR 0 4
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: LD_INT 4
50686: PUSH
50687: LD_INT 5
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: IN
50698: NOT
50699: PUSH
50700: LD_VAR 0 1
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: IN
50715: PUSH
50716: LD_VAR 0 5
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: LD_INT 3
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: IN
50735: NOT
50736: AND
50737: OR
50738: IFFALSE 50742
// exit ;
50740: GO 69133
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50742: LD_VAR 0 1
50746: PUSH
50747: LD_INT 6
50749: PUSH
50750: LD_INT 7
50752: PUSH
50753: LD_INT 8
50755: PUSH
50756: LD_INT 13
50758: PUSH
50759: LD_INT 12
50761: PUSH
50762: LD_INT 15
50764: PUSH
50765: LD_INT 11
50767: PUSH
50768: LD_INT 14
50770: PUSH
50771: LD_INT 10
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: IN
50785: IFFALSE 50795
// btype = b_lab ;
50787: LD_ADDR_VAR 0 1
50791: PUSH
50792: LD_INT 6
50794: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50795: LD_VAR 0 6
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: LIST
50813: IN
50814: NOT
50815: PUSH
50816: LD_VAR 0 1
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: LD_INT 6
50835: PUSH
50836: LD_INT 36
50838: PUSH
50839: LD_INT 4
50841: PUSH
50842: LD_INT 5
50844: PUSH
50845: LD_INT 31
50847: PUSH
50848: LD_INT 32
50850: PUSH
50851: LD_INT 33
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: IN
50867: NOT
50868: PUSH
50869: LD_VAR 0 6
50873: PUSH
50874: LD_INT 1
50876: EQUAL
50877: AND
50878: OR
50879: PUSH
50880: LD_VAR 0 1
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: LD_INT 3
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: IN
50895: NOT
50896: PUSH
50897: LD_VAR 0 6
50901: PUSH
50902: LD_INT 2
50904: EQUAL
50905: AND
50906: OR
50907: IFFALSE 50917
// mode = 0 ;
50909: LD_ADDR_VAR 0 6
50913: PUSH
50914: LD_INT 0
50916: ST_TO_ADDR
// case mode of 0 :
50917: LD_VAR 0 6
50921: PUSH
50922: LD_INT 0
50924: DOUBLE
50925: EQUAL
50926: IFTRUE 50930
50928: GO 62383
50930: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50931: LD_ADDR_VAR 0 11
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 2
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 2
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 3
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51124: LD_ADDR_VAR 0 12
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 3
51281: NEG
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 3
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51320: LD_ADDR_VAR 0 13
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 2
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 3
51479: NEG
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 3
51491: NEG
51492: PUSH
51493: LD_INT 3
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51519: LD_ADDR_VAR 0 14
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 3
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 3
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 2
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51715: LD_ADDR_VAR 0 15
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 3
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 3
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51908: LD_ADDR_VAR 0 16
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: NEG
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 3
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52101: LD_ADDR_VAR 0 17
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 2
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 2
52300: NEG
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52331: LD_ADDR_VAR 0 18
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: NEG
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 2
52530: NEG
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52561: LD_ADDR_VAR 0 19
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 2
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: LD_INT 2
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: LD_INT 2
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 2
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 2
52748: NEG
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52791: LD_ADDR_VAR 0 20
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 2
52978: NEG
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: NEG
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53021: LD_ADDR_VAR 0 21
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: NEG
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53251: LD_ADDR_VAR 0 22
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: LD_INT 2
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53481: LD_ADDR_VAR 0 23
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: LD_INT 2
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: LD_INT 3
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 2
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53761: LD_ADDR_VAR 0 24
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: NEG
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 3
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 3
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54037: LD_ADDR_VAR 0 25
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 3
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 3
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54311: LD_ADDR_VAR 0 26
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 2
54498: NEG
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: LD_INT 3
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54587: LD_ADDR_VAR 0 27
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: NEG
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 3
54820: NEG
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 3
54832: NEG
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54867: LD_ADDR_VAR 0 28
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 3
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55149: LD_ADDR_VAR 0 29
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 2
55327: NEG
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: LD_INT 3
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: LD_INT 3
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 3
55393: NEG
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55428: LD_ADDR_VAR 0 30
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 3
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 3
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: LD_INT 3
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55706: LD_ADDR_VAR 0 31
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 2
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: LD_INT 3
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 3
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 3
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 3
55949: NEG
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55984: LD_ADDR_VAR 0 32
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 3
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: LD_INT 2
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 3
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 3
56227: NEG
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56262: LD_ADDR_VAR 0 33
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: LD_INT 3
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 2
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 3
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56541: LD_ADDR_VAR 0 34
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: NEG
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: NEG
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 2
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 3
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: LD_INT 3
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 3
56786: NEG
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56821: LD_ADDR_VAR 0 35
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 2
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56933: LD_ADDR_VAR 0 36
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: LD_INT 2
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57045: LD_ADDR_VAR 0 37
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57157: LD_ADDR_VAR 0 38
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 2
57248: NEG
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57269: LD_ADDR_VAR 0 39
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57381: LD_ADDR_VAR 0 40
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57493: LD_ADDR_VAR 0 41
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 3
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 3
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 3
57726: PUSH
57727: LD_INT 2
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 3
57767: NEG
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 3
57778: NEG
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 3
57790: NEG
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 3
57802: NEG
57803: PUSH
57804: LD_INT 3
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57843: LD_ADDR_VAR 0 42
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: LD_INT 2
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 2
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: LD_INT 3
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 3
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 3
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 3
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: LD_INT 2
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58193: LD_ADDR_VAR 0 43
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 2
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: LD_INT 3
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 3
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 3
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: LD_INT 3
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 3
58500: NEG
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58541: LD_ADDR_VAR 0 44
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 2
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: LD_INT 3
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 3
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 3
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 3
58784: PUSH
58785: LD_INT 3
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: LD_INT 3
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: NEG
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 3
58815: NEG
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 3
58826: NEG
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: NEG
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: LD_INT 3
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58891: LD_ADDR_VAR 0 45
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 2
59057: NEG
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 2
59081: NEG
59082: PUSH
59083: LD_INT 3
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 3
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: LD_INT 3
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: LD_INT 2
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: NEG
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 3
59200: NEG
59201: PUSH
59202: LD_INT 3
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59241: LD_ADDR_VAR 0 46
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 2
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: LD_INT 3
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 3
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 3
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 3
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: LD_INT 3
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 3
59537: NEG
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 3
59548: NEG
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59589: LD_ADDR_VAR 0 47
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 2
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: NEG
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59740: LD_ADDR_VAR 0 48
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: LD_INT 1
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: NEG
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: LD_INT 2
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 2
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: LD_INT 1
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: LD_INT 1
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59887: LD_ADDR_VAR 0 49
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60031: LD_ADDR_VAR 0 50
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60175: LD_ADDR_VAR 0 51
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: NEG
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 2
60298: NEG
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60322: LD_ADDR_VAR 0 52
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 1
60380: NEG
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: LD_INT 2
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 2
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: NEG
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60473: LD_ADDR_VAR 0 53
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 2
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: LD_INT 2
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: LD_INT 2
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 2
60672: NEG
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60703: LD_ADDR_VAR 0 54
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: NEG
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60933: LD_ADDR_VAR 0 55
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 2
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 2
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: LD_INT 2
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 2
61120: NEG
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 2
61132: NEG
61133: PUSH
61134: LD_INT 2
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61163: LD_ADDR_VAR 0 56
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: LD_INT 2
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: LD_INT 2
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: LD_INT 1
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 2
61350: NEG
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61393: LD_ADDR_VAR 0 57
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: LD_INT 2
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 2
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 2
61580: NEG
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61623: LD_ADDR_VAR 0 58
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: LD_INT 2
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 2
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 2
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 2
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: LD_INT 2
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: LD_INT 2
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 2
61810: NEG
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 2
61822: NEG
61823: PUSH
61824: LD_INT 2
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61853: LD_ADDR_VAR 0 59
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61941: LD_ADDR_VAR 0 60
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62029: LD_ADDR_VAR 0 61
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62117: LD_ADDR_VAR 0 62
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: NEG
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62205: LD_ADDR_VAR 0 63
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62293: LD_ADDR_VAR 0 64
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: LD_INT 1
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: LD_INT 1
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 1
62362: NEG
62363: PUSH
62364: LD_INT 1
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: ST_TO_ADDR
// end ; 1 :
62381: GO 68278
62383: LD_INT 1
62385: DOUBLE
62386: EQUAL
62387: IFTRUE 62391
62389: GO 65014
62391: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62392: LD_ADDR_VAR 0 11
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 3
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 3
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: LD_INT 2
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: LIST
62435: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62436: LD_ADDR_VAR 0 12
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 3
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: LD_INT 1
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: LIST
62476: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62477: LD_ADDR_VAR 0 13
62481: PUSH
62482: LD_INT 3
62484: PUSH
62485: LD_INT 2
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 3
62494: PUSH
62495: LD_INT 3
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: LD_INT 3
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: LIST
62516: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62517: LD_ADDR_VAR 0 14
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 3
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: LD_INT 3
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 2
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62558: LD_ADDR_VAR 0 15
62562: PUSH
62563: LD_INT 2
62565: NEG
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 3
62576: NEG
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 3
62587: NEG
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62602: LD_ADDR_VAR 0 16
62606: PUSH
62607: LD_INT 2
62609: NEG
62610: PUSH
62611: LD_INT 3
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 3
62621: NEG
62622: PUSH
62623: LD_INT 2
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: LD_INT 3
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62648: LD_ADDR_VAR 0 17
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: LD_INT 3
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 3
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: LIST
62691: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62692: LD_ADDR_VAR 0 18
62696: PUSH
62697: LD_INT 2
62699: PUSH
62700: LD_INT 1
62702: NEG
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 3
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 3
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: LIST
62732: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62733: LD_ADDR_VAR 0 19
62737: PUSH
62738: LD_INT 3
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 3
62750: PUSH
62751: LD_INT 3
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: PUSH
62761: LD_INT 3
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: LIST
62772: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62773: LD_ADDR_VAR 0 20
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: LD_INT 3
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: LD_INT 3
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: LD_INT 2
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62814: LD_ADDR_VAR 0 21
62818: PUSH
62819: LD_INT 2
62821: NEG
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 3
62832: NEG
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 3
62843: NEG
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62858: LD_ADDR_VAR 0 22
62862: PUSH
62863: LD_INT 2
62865: NEG
62866: PUSH
62867: LD_INT 3
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 3
62877: NEG
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 3
62889: NEG
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: LIST
62903: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62904: LD_ADDR_VAR 0 23
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: LD_INT 3
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: LD_INT 4
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: LD_INT 3
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: LIST
62947: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62948: LD_ADDR_VAR 0 24
62952: PUSH
62953: LD_INT 3
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 3
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 4
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: LIST
62988: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62989: LD_ADDR_VAR 0 25
62993: PUSH
62994: LD_INT 3
62996: PUSH
62997: LD_INT 3
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 4
63006: PUSH
63007: LD_INT 3
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 3
63016: PUSH
63017: LD_INT 4
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: LIST
63028: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63029: LD_ADDR_VAR 0 26
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: LD_INT 3
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: LD_INT 4
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: LD_INT 3
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63070: LD_ADDR_VAR 0 27
63074: PUSH
63075: LD_INT 3
63077: NEG
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 3
63088: NEG
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 4
63099: NEG
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: LIST
63113: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63114: LD_ADDR_VAR 0 28
63118: PUSH
63119: LD_INT 3
63121: NEG
63122: PUSH
63123: LD_INT 3
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 3
63133: NEG
63134: PUSH
63135: LD_INT 4
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 4
63145: NEG
63146: PUSH
63147: LD_INT 3
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: LIST
63159: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63160: LD_ADDR_VAR 0 29
63164: PUSH
63165: LD_INT 1
63167: NEG
63168: PUSH
63169: LD_INT 3
63171: NEG
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 3
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 2
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: LD_INT 4
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 4
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: LD_INT 3
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: LD_INT 5
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 5
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: LD_INT 4
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: LD_INT 6
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 6
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 5
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63315: LD_ADDR_VAR 0 30
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 3
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 3
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 3
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 4
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 4
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 4
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 5
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 5
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 5
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 6
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 6
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63458: LD_ADDR_VAR 0 31
63462: PUSH
63463: LD_INT 3
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 3
63475: PUSH
63476: LD_INT 3
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 2
63485: PUSH
63486: LD_INT 3
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 4
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 4
63505: PUSH
63506: LD_INT 4
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 3
63515: PUSH
63516: LD_INT 4
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 5
63525: PUSH
63526: LD_INT 4
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 5
63535: PUSH
63536: LD_INT 5
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 4
63545: PUSH
63546: LD_INT 5
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 6
63555: PUSH
63556: LD_INT 5
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 6
63565: PUSH
63566: LD_INT 6
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 5
63575: PUSH
63576: LD_INT 6
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63597: LD_ADDR_VAR 0 32
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: LD_INT 3
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: LD_INT 3
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 1
63635: PUSH
63636: LD_INT 4
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: LD_INT 4
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: LD_INT 3
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: LD_INT 5
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: LD_INT 5
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: LD_INT 4
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: LD_INT 6
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: LD_INT 6
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: LD_INT 5
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63740: LD_ADDR_VAR 0 33
63744: PUSH
63745: LD_INT 2
63747: NEG
63748: PUSH
63749: LD_INT 1
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 3
63758: NEG
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 3
63769: NEG
63770: PUSH
63771: LD_INT 1
63773: NEG
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 3
63781: NEG
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 4
63792: NEG
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 4
63803: NEG
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 4
63815: NEG
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 5
63826: NEG
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 5
63837: NEG
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 5
63849: NEG
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 6
63860: NEG
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 6
63871: NEG
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63895: LD_ADDR_VAR 0 34
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: LD_INT 3
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: LD_INT 2
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 3
63926: NEG
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 3
63938: NEG
63939: PUSH
63940: LD_INT 4
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 4
63950: NEG
63951: PUSH
63952: LD_INT 3
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 4
63962: NEG
63963: PUSH
63964: LD_INT 4
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 4
63974: NEG
63975: PUSH
63976: LD_INT 5
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 5
63986: NEG
63987: PUSH
63988: LD_INT 4
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 5
63998: NEG
63999: PUSH
64000: LD_INT 5
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 5
64010: NEG
64011: PUSH
64012: LD_INT 6
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 6
64022: NEG
64023: PUSH
64024: LD_INT 5
64026: NEG
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 6
64034: NEG
64035: PUSH
64036: LD_INT 6
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64058: LD_ADDR_VAR 0 41
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 2
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: LD_INT 3
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: PUSH
64089: LD_INT 2
64091: NEG
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: LIST
64101: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64102: LD_ADDR_VAR 0 42
64106: PUSH
64107: LD_INT 2
64109: PUSH
64110: LD_INT 0
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 3
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: LIST
64142: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64143: LD_ADDR_VAR 0 43
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: LD_INT 2
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 3
64160: PUSH
64161: LD_INT 2
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 2
64170: PUSH
64171: LD_INT 3
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: LIST
64182: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64183: LD_ADDR_VAR 0 44
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: LD_INT 2
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: LD_INT 3
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 1
64210: NEG
64211: PUSH
64212: LD_INT 2
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64224: LD_ADDR_VAR 0 45
64228: PUSH
64229: LD_INT 2
64231: NEG
64232: PUSH
64233: LD_INT 0
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 2
64242: NEG
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 3
64253: NEG
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: LIST
64267: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64268: LD_ADDR_VAR 0 46
64272: PUSH
64273: LD_INT 2
64275: NEG
64276: PUSH
64277: LD_INT 2
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: LD_INT 3
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 3
64299: NEG
64300: PUSH
64301: LD_INT 2
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64314: LD_ADDR_VAR 0 47
64318: PUSH
64319: LD_INT 2
64321: NEG
64322: PUSH
64323: LD_INT 3
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: LD_INT 3
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64347: LD_ADDR_VAR 0 48
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: LD_INT 2
64357: NEG
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 2
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64378: LD_ADDR_VAR 0 49
64382: PUSH
64383: LD_INT 3
64385: PUSH
64386: LD_INT 1
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 3
64395: PUSH
64396: LD_INT 2
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64407: LD_ADDR_VAR 0 50
64411: PUSH
64412: LD_INT 2
64414: PUSH
64415: LD_INT 3
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: LD_INT 3
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64436: LD_ADDR_VAR 0 51
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: LD_INT 2
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 2
64454: NEG
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64467: LD_ADDR_VAR 0 52
64471: PUSH
64472: LD_INT 3
64474: NEG
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 3
64486: NEG
64487: PUSH
64488: LD_INT 2
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64500: LD_ADDR_VAR 0 53
64504: PUSH
64505: LD_INT 1
64507: NEG
64508: PUSH
64509: LD_INT 3
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 0
64519: PUSH
64520: LD_INT 3
64522: NEG
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: LD_INT 2
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: LIST
64543: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64544: LD_ADDR_VAR 0 54
64548: PUSH
64549: LD_INT 2
64551: PUSH
64552: LD_INT 1
64554: NEG
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 3
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 3
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: LIST
64584: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64585: LD_ADDR_VAR 0 55
64589: PUSH
64590: LD_INT 3
64592: PUSH
64593: LD_INT 2
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 3
64602: PUSH
64603: LD_INT 3
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: LD_INT 3
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: LIST
64624: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64625: LD_ADDR_VAR 0 56
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 3
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: LD_INT 3
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: LD_INT 2
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: LIST
64665: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64666: LD_ADDR_VAR 0 57
64670: PUSH
64671: LD_INT 2
64673: NEG
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 3
64684: NEG
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 3
64695: NEG
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: LIST
64709: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64710: LD_ADDR_VAR 0 58
64714: PUSH
64715: LD_INT 2
64717: NEG
64718: PUSH
64719: LD_INT 3
64721: NEG
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 3
64729: NEG
64730: PUSH
64731: LD_INT 2
64733: NEG
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 3
64741: NEG
64742: PUSH
64743: LD_INT 3
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: LIST
64755: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64756: LD_ADDR_VAR 0 59
64760: PUSH
64761: LD_INT 1
64763: NEG
64764: PUSH
64765: LD_INT 2
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: LD_INT 2
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 1
64786: PUSH
64787: LD_INT 1
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64800: LD_ADDR_VAR 0 60
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 2
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: LIST
64840: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64841: LD_ADDR_VAR 0 61
64845: PUSH
64846: LD_INT 2
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 2
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: LIST
64880: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64881: LD_ADDR_VAR 0 62
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: LD_INT 2
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: LD_INT 2
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: NEG
64909: PUSH
64910: LD_INT 1
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64922: LD_ADDR_VAR 0 63
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: LD_INT 1
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 2
64940: NEG
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 2
64951: NEG
64952: PUSH
64953: LD_INT 1
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64966: LD_ADDR_VAR 0 64
64970: PUSH
64971: LD_INT 1
64973: NEG
64974: PUSH
64975: LD_INT 2
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 2
64985: NEG
64986: PUSH
64987: LD_INT 1
64989: NEG
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 2
64997: NEG
64998: PUSH
64999: LD_INT 2
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: LIST
65011: ST_TO_ADDR
// end ; 2 :
65012: GO 68278
65014: LD_INT 2
65016: DOUBLE
65017: EQUAL
65018: IFTRUE 65022
65020: GO 68277
65022: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65023: LD_ADDR_VAR 0 29
65027: PUSH
65028: LD_INT 4
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 4
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 5
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 5
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 4
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 3
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 3
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 3
65102: PUSH
65103: LD_INT 2
65105: NEG
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 5
65113: PUSH
65114: LD_INT 2
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 3
65123: PUSH
65124: LD_INT 3
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 3
65133: PUSH
65134: LD_INT 2
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 4
65143: PUSH
65144: LD_INT 3
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 4
65153: PUSH
65154: LD_INT 4
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 3
65163: PUSH
65164: LD_INT 4
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: LD_INT 3
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 2
65183: PUSH
65184: LD_INT 2
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 4
65193: PUSH
65194: LD_INT 2
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 2
65203: PUSH
65204: LD_INT 4
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: LD_INT 4
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: LD_INT 3
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: LD_INT 4
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: LD_INT 5
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: LD_INT 5
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 1
65263: NEG
65264: PUSH
65265: LD_INT 4
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 1
65274: NEG
65275: PUSH
65276: LD_INT 3
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: LD_INT 5
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 2
65295: NEG
65296: PUSH
65297: LD_INT 3
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 3
65306: NEG
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 3
65317: NEG
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 2
65329: NEG
65330: PUSH
65331: LD_INT 0
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 2
65340: NEG
65341: PUSH
65342: LD_INT 1
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 3
65351: NEG
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 4
65362: NEG
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 4
65373: NEG
65374: PUSH
65375: LD_INT 1
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 4
65385: NEG
65386: PUSH
65387: LD_INT 2
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 2
65397: NEG
65398: PUSH
65399: LD_INT 2
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 4
65408: NEG
65409: PUSH
65410: LD_INT 4
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 4
65420: NEG
65421: PUSH
65422: LD_INT 5
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 3
65432: NEG
65433: PUSH
65434: LD_INT 4
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 3
65444: NEG
65445: PUSH
65446: LD_INT 3
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 4
65456: NEG
65457: PUSH
65458: LD_INT 3
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 5
65468: NEG
65469: PUSH
65470: LD_INT 4
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 5
65480: NEG
65481: PUSH
65482: LD_INT 5
65484: NEG
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 3
65492: NEG
65493: PUSH
65494: LD_INT 5
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 5
65504: NEG
65505: PUSH
65506: LD_INT 3
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65561: LD_ADDR_VAR 0 30
65565: PUSH
65566: LD_INT 4
65568: PUSH
65569: LD_INT 4
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 4
65578: PUSH
65579: LD_INT 3
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 5
65588: PUSH
65589: LD_INT 4
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 5
65598: PUSH
65599: LD_INT 5
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 4
65608: PUSH
65609: LD_INT 5
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 3
65618: PUSH
65619: LD_INT 4
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 3
65628: PUSH
65629: LD_INT 3
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 5
65638: PUSH
65639: LD_INT 3
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 3
65648: PUSH
65649: LD_INT 5
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: LD_INT 3
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 0
65668: PUSH
65669: LD_INT 2
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 1
65678: PUSH
65679: LD_INT 3
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: LD_INT 4
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: LD_INT 4
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: LD_INT 3
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 1
65719: NEG
65720: PUSH
65721: LD_INT 2
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 2
65730: PUSH
65731: LD_INT 4
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 2
65740: NEG
65741: PUSH
65742: LD_INT 2
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 4
65751: NEG
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 4
65762: NEG
65763: PUSH
65764: LD_INT 1
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 3
65774: NEG
65775: PUSH
65776: LD_INT 0
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 3
65785: NEG
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 4
65796: NEG
65797: PUSH
65798: LD_INT 1
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 5
65807: NEG
65808: PUSH
65809: LD_INT 0
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 5
65818: NEG
65819: PUSH
65820: LD_INT 1
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 5
65830: NEG
65831: PUSH
65832: LD_INT 2
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 3
65842: NEG
65843: PUSH
65844: LD_INT 2
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 3
65853: NEG
65854: PUSH
65855: LD_INT 3
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 3
65865: NEG
65866: PUSH
65867: LD_INT 4
65869: NEG
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 2
65877: NEG
65878: PUSH
65879: LD_INT 3
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 2
65889: NEG
65890: PUSH
65891: LD_INT 2
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 3
65901: NEG
65902: PUSH
65903: LD_INT 2
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 4
65913: NEG
65914: PUSH
65915: LD_INT 3
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 4
65925: NEG
65926: PUSH
65927: LD_INT 4
65929: NEG
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 2
65937: NEG
65938: PUSH
65939: LD_INT 4
65941: NEG
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 4
65949: NEG
65950: PUSH
65951: LD_INT 2
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: LD_INT 4
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 0
65972: PUSH
65973: LD_INT 5
65975: NEG
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 1
65983: PUSH
65984: LD_INT 4
65986: NEG
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: LD_INT 3
65997: NEG
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: LD_INT 3
66008: NEG
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: LD_INT 4
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: NEG
66029: PUSH
66030: LD_INT 5
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 2
66040: PUSH
66041: LD_INT 3
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 2
66051: NEG
66052: PUSH
66053: LD_INT 5
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66108: LD_ADDR_VAR 0 31
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: LD_INT 4
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: LD_INT 3
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: LD_INT 4
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: LD_INT 5
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: LD_INT 5
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: NEG
66166: PUSH
66167: LD_INT 4
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: NEG
66177: PUSH
66178: LD_INT 3
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 2
66187: PUSH
66188: LD_INT 5
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 2
66197: NEG
66198: PUSH
66199: LD_INT 3
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 3
66208: NEG
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 3
66219: NEG
66220: PUSH
66221: LD_INT 1
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 2
66231: NEG
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 2
66242: NEG
66243: PUSH
66244: LD_INT 1
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 3
66253: NEG
66254: PUSH
66255: LD_INT 1
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 4
66264: NEG
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 4
66275: NEG
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 4
66287: NEG
66288: PUSH
66289: LD_INT 2
66291: NEG
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 2
66299: NEG
66300: PUSH
66301: LD_INT 2
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 4
66310: NEG
66311: PUSH
66312: LD_INT 4
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 4
66322: NEG
66323: PUSH
66324: LD_INT 5
66326: NEG
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 3
66334: NEG
66335: PUSH
66336: LD_INT 4
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 3
66346: NEG
66347: PUSH
66348: LD_INT 3
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 4
66358: NEG
66359: PUSH
66360: LD_INT 3
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 5
66370: NEG
66371: PUSH
66372: LD_INT 4
66374: NEG
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 5
66382: NEG
66383: PUSH
66384: LD_INT 5
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 3
66394: NEG
66395: PUSH
66396: LD_INT 5
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 5
66406: NEG
66407: PUSH
66408: LD_INT 3
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: LD_INT 3
66421: NEG
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: LD_INT 4
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 1
66440: PUSH
66441: LD_INT 3
66443: NEG
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 1
66451: PUSH
66452: LD_INT 2
66454: NEG
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: LD_INT 2
66465: NEG
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 1
66473: NEG
66474: PUSH
66475: LD_INT 3
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: LD_INT 4
66489: NEG
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 2
66497: PUSH
66498: LD_INT 2
66500: NEG
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 2
66508: NEG
66509: PUSH
66510: LD_INT 4
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 4
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 4
66530: PUSH
66531: LD_INT 1
66533: NEG
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 5
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 5
66551: PUSH
66552: LD_INT 1
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 4
66561: PUSH
66562: LD_INT 1
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 3
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 3
66581: PUSH
66582: LD_INT 1
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 3
66592: PUSH
66593: LD_INT 2
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 5
66603: PUSH
66604: LD_INT 2
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66658: LD_ADDR_VAR 0 32
66662: PUSH
66663: LD_INT 4
66665: NEG
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 4
66676: NEG
66677: PUSH
66678: LD_INT 1
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 3
66688: NEG
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 3
66699: NEG
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 4
66710: NEG
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 5
66721: NEG
66722: PUSH
66723: LD_INT 0
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 5
66732: NEG
66733: PUSH
66734: LD_INT 1
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 5
66744: NEG
66745: PUSH
66746: LD_INT 2
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 3
66756: NEG
66757: PUSH
66758: LD_INT 2
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 3
66767: NEG
66768: PUSH
66769: LD_INT 3
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 3
66779: NEG
66780: PUSH
66781: LD_INT 4
66783: NEG
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 2
66791: NEG
66792: PUSH
66793: LD_INT 3
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 2
66803: NEG
66804: PUSH
66805: LD_INT 2
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 3
66815: NEG
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 4
66827: NEG
66828: PUSH
66829: LD_INT 3
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 4
66839: NEG
66840: PUSH
66841: LD_INT 4
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 2
66851: NEG
66852: PUSH
66853: LD_INT 4
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 4
66863: NEG
66864: PUSH
66865: LD_INT 2
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 0
66875: PUSH
66876: LD_INT 4
66878: NEG
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: LD_INT 5
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 1
66897: PUSH
66898: LD_INT 4
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: LD_INT 3
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: LD_INT 3
66922: NEG
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: LD_INT 4
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 1
66942: NEG
66943: PUSH
66944: LD_INT 5
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: LD_INT 3
66957: NEG
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 2
66965: NEG
66966: PUSH
66967: LD_INT 5
66969: NEG
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 3
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 3
66987: PUSH
66988: LD_INT 1
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 4
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 4
67008: PUSH
67009: LD_INT 1
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 3
67018: PUSH
67019: LD_INT 1
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 2
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 2
67038: PUSH
67039: LD_INT 1
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 2
67049: PUSH
67050: LD_INT 2
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 4
67060: PUSH
67061: LD_INT 2
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 4
67070: PUSH
67071: LD_INT 4
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 4
67080: PUSH
67081: LD_INT 3
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 5
67090: PUSH
67091: LD_INT 4
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 5
67100: PUSH
67101: LD_INT 5
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 4
67110: PUSH
67111: LD_INT 5
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 3
67120: PUSH
67121: LD_INT 4
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 3
67130: PUSH
67131: LD_INT 3
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 5
67140: PUSH
67141: LD_INT 3
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 3
67150: PUSH
67151: LD_INT 5
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67205: LD_ADDR_VAR 0 33
67209: PUSH
67210: LD_INT 4
67212: NEG
67213: PUSH
67214: LD_INT 4
67216: NEG
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 4
67224: NEG
67225: PUSH
67226: LD_INT 5
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 3
67236: NEG
67237: PUSH
67238: LD_INT 4
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 3
67248: NEG
67249: PUSH
67250: LD_INT 3
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 4
67260: NEG
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 5
67272: NEG
67273: PUSH
67274: LD_INT 4
67276: NEG
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 5
67284: NEG
67285: PUSH
67286: LD_INT 5
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 3
67296: NEG
67297: PUSH
67298: LD_INT 5
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 5
67308: NEG
67309: PUSH
67310: LD_INT 3
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: LD_INT 3
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 0
67331: PUSH
67332: LD_INT 4
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 1
67342: PUSH
67343: LD_INT 3
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 1
67353: PUSH
67354: LD_INT 2
67356: NEG
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: LD_INT 2
67367: NEG
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 1
67375: NEG
67376: PUSH
67377: LD_INT 3
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 1
67387: NEG
67388: PUSH
67389: LD_INT 4
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 2
67399: PUSH
67400: LD_INT 2
67402: NEG
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 2
67410: NEG
67411: PUSH
67412: LD_INT 4
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 4
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 4
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 5
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 5
67453: PUSH
67454: LD_INT 1
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 4
67463: PUSH
67464: LD_INT 1
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: LD_INT 1
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 3
67494: PUSH
67495: LD_INT 2
67497: NEG
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 5
67505: PUSH
67506: LD_INT 2
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 3
67515: PUSH
67516: LD_INT 3
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 3
67525: PUSH
67526: LD_INT 2
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 4
67535: PUSH
67536: LD_INT 3
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 4
67545: PUSH
67546: LD_INT 4
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: LD_INT 4
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 2
67565: PUSH
67566: LD_INT 3
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 2
67575: PUSH
67576: LD_INT 2
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 4
67585: PUSH
67586: LD_INT 2
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 2
67595: PUSH
67596: LD_INT 4
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: LD_INT 3
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 1
67625: PUSH
67626: LD_INT 4
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: LD_INT 5
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: LD_INT 5
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: NEG
67656: PUSH
67657: LD_INT 4
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: LD_INT 3
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 2
67677: PUSH
67678: LD_INT 5
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 2
67687: NEG
67688: PUSH
67689: LD_INT 3
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67743: LD_ADDR_VAR 0 34
67747: PUSH
67748: LD_INT 0
67750: PUSH
67751: LD_INT 4
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: LD_INT 5
67764: NEG
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 1
67772: PUSH
67773: LD_INT 4
67775: NEG
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 1
67783: PUSH
67784: LD_INT 3
67786: NEG
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 0
67794: PUSH
67795: LD_INT 3
67797: NEG
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 1
67805: NEG
67806: PUSH
67807: LD_INT 4
67809: NEG
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 1
67817: NEG
67818: PUSH
67819: LD_INT 5
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 2
67829: PUSH
67830: LD_INT 3
67832: NEG
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 2
67840: NEG
67841: PUSH
67842: LD_INT 5
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 3
67852: PUSH
67853: LD_INT 0
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 3
67862: PUSH
67863: LD_INT 1
67865: NEG
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 4
67873: PUSH
67874: LD_INT 0
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 4
67883: PUSH
67884: LD_INT 1
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 3
67893: PUSH
67894: LD_INT 1
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 2
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 2
67913: PUSH
67914: LD_INT 1
67916: NEG
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 2
67924: PUSH
67925: LD_INT 2
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 4
67935: PUSH
67936: LD_INT 2
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 4
67945: PUSH
67946: LD_INT 4
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 4
67955: PUSH
67956: LD_INT 3
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 5
67965: PUSH
67966: LD_INT 4
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 5
67975: PUSH
67976: LD_INT 5
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 4
67985: PUSH
67986: LD_INT 5
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 3
67995: PUSH
67996: LD_INT 4
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 3
68005: PUSH
68006: LD_INT 3
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 5
68015: PUSH
68016: LD_INT 3
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 3
68025: PUSH
68026: LD_INT 5
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 0
68035: PUSH
68036: LD_INT 3
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 0
68045: PUSH
68046: LD_INT 2
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 1
68055: PUSH
68056: LD_INT 3
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 1
68065: PUSH
68066: LD_INT 4
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: LD_INT 4
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 1
68085: NEG
68086: PUSH
68087: LD_INT 3
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 1
68096: NEG
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 2
68107: PUSH
68108: LD_INT 4
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 2
68117: NEG
68118: PUSH
68119: LD_INT 2
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 4
68128: NEG
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 4
68139: NEG
68140: PUSH
68141: LD_INT 1
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 3
68151: NEG
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 3
68162: NEG
68163: PUSH
68164: LD_INT 1
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 4
68173: NEG
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 5
68184: NEG
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 5
68195: NEG
68196: PUSH
68197: LD_INT 1
68199: NEG
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 5
68207: NEG
68208: PUSH
68209: LD_INT 2
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 3
68219: NEG
68220: PUSH
68221: LD_INT 2
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: ST_TO_ADDR
// end ; end ;
68275: GO 68278
68277: POP
// case btype of b_depot , b_warehouse :
68278: LD_VAR 0 1
68282: PUSH
68283: LD_INT 0
68285: DOUBLE
68286: EQUAL
68287: IFTRUE 68297
68289: LD_INT 1
68291: DOUBLE
68292: EQUAL
68293: IFTRUE 68297
68295: GO 68498
68297: POP
// case nation of nation_american :
68298: LD_VAR 0 5
68302: PUSH
68303: LD_INT 1
68305: DOUBLE
68306: EQUAL
68307: IFTRUE 68311
68309: GO 68367
68311: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68312: LD_ADDR_VAR 0 9
68316: PUSH
68317: LD_VAR 0 11
68321: PUSH
68322: LD_VAR 0 12
68326: PUSH
68327: LD_VAR 0 13
68331: PUSH
68332: LD_VAR 0 14
68336: PUSH
68337: LD_VAR 0 15
68341: PUSH
68342: LD_VAR 0 16
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: PUSH
68355: LD_VAR 0 4
68359: PUSH
68360: LD_INT 1
68362: PLUS
68363: ARRAY
68364: ST_TO_ADDR
68365: GO 68496
68367: LD_INT 2
68369: DOUBLE
68370: EQUAL
68371: IFTRUE 68375
68373: GO 68431
68375: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68376: LD_ADDR_VAR 0 9
68380: PUSH
68381: LD_VAR 0 17
68385: PUSH
68386: LD_VAR 0 18
68390: PUSH
68391: LD_VAR 0 19
68395: PUSH
68396: LD_VAR 0 20
68400: PUSH
68401: LD_VAR 0 21
68405: PUSH
68406: LD_VAR 0 22
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: PUSH
68419: LD_VAR 0 4
68423: PUSH
68424: LD_INT 1
68426: PLUS
68427: ARRAY
68428: ST_TO_ADDR
68429: GO 68496
68431: LD_INT 3
68433: DOUBLE
68434: EQUAL
68435: IFTRUE 68439
68437: GO 68495
68439: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68440: LD_ADDR_VAR 0 9
68444: PUSH
68445: LD_VAR 0 23
68449: PUSH
68450: LD_VAR 0 24
68454: PUSH
68455: LD_VAR 0 25
68459: PUSH
68460: LD_VAR 0 26
68464: PUSH
68465: LD_VAR 0 27
68469: PUSH
68470: LD_VAR 0 28
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: PUSH
68483: LD_VAR 0 4
68487: PUSH
68488: LD_INT 1
68490: PLUS
68491: ARRAY
68492: ST_TO_ADDR
68493: GO 68496
68495: POP
68496: GO 69051
68498: LD_INT 2
68500: DOUBLE
68501: EQUAL
68502: IFTRUE 68512
68504: LD_INT 3
68506: DOUBLE
68507: EQUAL
68508: IFTRUE 68512
68510: GO 68568
68512: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68513: LD_ADDR_VAR 0 9
68517: PUSH
68518: LD_VAR 0 29
68522: PUSH
68523: LD_VAR 0 30
68527: PUSH
68528: LD_VAR 0 31
68532: PUSH
68533: LD_VAR 0 32
68537: PUSH
68538: LD_VAR 0 33
68542: PUSH
68543: LD_VAR 0 34
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: PUSH
68556: LD_VAR 0 4
68560: PUSH
68561: LD_INT 1
68563: PLUS
68564: ARRAY
68565: ST_TO_ADDR
68566: GO 69051
68568: LD_INT 16
68570: DOUBLE
68571: EQUAL
68572: IFTRUE 68630
68574: LD_INT 17
68576: DOUBLE
68577: EQUAL
68578: IFTRUE 68630
68580: LD_INT 18
68582: DOUBLE
68583: EQUAL
68584: IFTRUE 68630
68586: LD_INT 19
68588: DOUBLE
68589: EQUAL
68590: IFTRUE 68630
68592: LD_INT 22
68594: DOUBLE
68595: EQUAL
68596: IFTRUE 68630
68598: LD_INT 20
68600: DOUBLE
68601: EQUAL
68602: IFTRUE 68630
68604: LD_INT 21
68606: DOUBLE
68607: EQUAL
68608: IFTRUE 68630
68610: LD_INT 23
68612: DOUBLE
68613: EQUAL
68614: IFTRUE 68630
68616: LD_INT 24
68618: DOUBLE
68619: EQUAL
68620: IFTRUE 68630
68622: LD_INT 25
68624: DOUBLE
68625: EQUAL
68626: IFTRUE 68630
68628: GO 68686
68630: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68631: LD_ADDR_VAR 0 9
68635: PUSH
68636: LD_VAR 0 35
68640: PUSH
68641: LD_VAR 0 36
68645: PUSH
68646: LD_VAR 0 37
68650: PUSH
68651: LD_VAR 0 38
68655: PUSH
68656: LD_VAR 0 39
68660: PUSH
68661: LD_VAR 0 40
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: PUSH
68674: LD_VAR 0 4
68678: PUSH
68679: LD_INT 1
68681: PLUS
68682: ARRAY
68683: ST_TO_ADDR
68684: GO 69051
68686: LD_INT 6
68688: DOUBLE
68689: EQUAL
68690: IFTRUE 68742
68692: LD_INT 7
68694: DOUBLE
68695: EQUAL
68696: IFTRUE 68742
68698: LD_INT 8
68700: DOUBLE
68701: EQUAL
68702: IFTRUE 68742
68704: LD_INT 13
68706: DOUBLE
68707: EQUAL
68708: IFTRUE 68742
68710: LD_INT 12
68712: DOUBLE
68713: EQUAL
68714: IFTRUE 68742
68716: LD_INT 15
68718: DOUBLE
68719: EQUAL
68720: IFTRUE 68742
68722: LD_INT 11
68724: DOUBLE
68725: EQUAL
68726: IFTRUE 68742
68728: LD_INT 14
68730: DOUBLE
68731: EQUAL
68732: IFTRUE 68742
68734: LD_INT 10
68736: DOUBLE
68737: EQUAL
68738: IFTRUE 68742
68740: GO 68798
68742: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68743: LD_ADDR_VAR 0 9
68747: PUSH
68748: LD_VAR 0 41
68752: PUSH
68753: LD_VAR 0 42
68757: PUSH
68758: LD_VAR 0 43
68762: PUSH
68763: LD_VAR 0 44
68767: PUSH
68768: LD_VAR 0 45
68772: PUSH
68773: LD_VAR 0 46
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: PUSH
68786: LD_VAR 0 4
68790: PUSH
68791: LD_INT 1
68793: PLUS
68794: ARRAY
68795: ST_TO_ADDR
68796: GO 69051
68798: LD_INT 36
68800: DOUBLE
68801: EQUAL
68802: IFTRUE 68806
68804: GO 68862
68806: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68807: LD_ADDR_VAR 0 9
68811: PUSH
68812: LD_VAR 0 47
68816: PUSH
68817: LD_VAR 0 48
68821: PUSH
68822: LD_VAR 0 49
68826: PUSH
68827: LD_VAR 0 50
68831: PUSH
68832: LD_VAR 0 51
68836: PUSH
68837: LD_VAR 0 52
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: PUSH
68850: LD_VAR 0 4
68854: PUSH
68855: LD_INT 1
68857: PLUS
68858: ARRAY
68859: ST_TO_ADDR
68860: GO 69051
68862: LD_INT 4
68864: DOUBLE
68865: EQUAL
68866: IFTRUE 68888
68868: LD_INT 5
68870: DOUBLE
68871: EQUAL
68872: IFTRUE 68888
68874: LD_INT 34
68876: DOUBLE
68877: EQUAL
68878: IFTRUE 68888
68880: LD_INT 37
68882: DOUBLE
68883: EQUAL
68884: IFTRUE 68888
68886: GO 68944
68888: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68889: LD_ADDR_VAR 0 9
68893: PUSH
68894: LD_VAR 0 53
68898: PUSH
68899: LD_VAR 0 54
68903: PUSH
68904: LD_VAR 0 55
68908: PUSH
68909: LD_VAR 0 56
68913: PUSH
68914: LD_VAR 0 57
68918: PUSH
68919: LD_VAR 0 58
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: PUSH
68932: LD_VAR 0 4
68936: PUSH
68937: LD_INT 1
68939: PLUS
68940: ARRAY
68941: ST_TO_ADDR
68942: GO 69051
68944: LD_INT 31
68946: DOUBLE
68947: EQUAL
68948: IFTRUE 68994
68950: LD_INT 32
68952: DOUBLE
68953: EQUAL
68954: IFTRUE 68994
68956: LD_INT 33
68958: DOUBLE
68959: EQUAL
68960: IFTRUE 68994
68962: LD_INT 27
68964: DOUBLE
68965: EQUAL
68966: IFTRUE 68994
68968: LD_INT 26
68970: DOUBLE
68971: EQUAL
68972: IFTRUE 68994
68974: LD_INT 28
68976: DOUBLE
68977: EQUAL
68978: IFTRUE 68994
68980: LD_INT 29
68982: DOUBLE
68983: EQUAL
68984: IFTRUE 68994
68986: LD_INT 30
68988: DOUBLE
68989: EQUAL
68990: IFTRUE 68994
68992: GO 69050
68994: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68995: LD_ADDR_VAR 0 9
68999: PUSH
69000: LD_VAR 0 59
69004: PUSH
69005: LD_VAR 0 60
69009: PUSH
69010: LD_VAR 0 61
69014: PUSH
69015: LD_VAR 0 62
69019: PUSH
69020: LD_VAR 0 63
69024: PUSH
69025: LD_VAR 0 64
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: PUSH
69038: LD_VAR 0 4
69042: PUSH
69043: LD_INT 1
69045: PLUS
69046: ARRAY
69047: ST_TO_ADDR
69048: GO 69051
69050: POP
// temp_list2 = [ ] ;
69051: LD_ADDR_VAR 0 10
69055: PUSH
69056: EMPTY
69057: ST_TO_ADDR
// for i in temp_list do
69058: LD_ADDR_VAR 0 8
69062: PUSH
69063: LD_VAR 0 9
69067: PUSH
69068: FOR_IN
69069: IFFALSE 69121
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69071: LD_ADDR_VAR 0 10
69075: PUSH
69076: LD_VAR 0 10
69080: PUSH
69081: LD_VAR 0 8
69085: PUSH
69086: LD_INT 1
69088: ARRAY
69089: PUSH
69090: LD_VAR 0 2
69094: PLUS
69095: PUSH
69096: LD_VAR 0 8
69100: PUSH
69101: LD_INT 2
69103: ARRAY
69104: PUSH
69105: LD_VAR 0 3
69109: PLUS
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: EMPTY
69116: LIST
69117: ADD
69118: ST_TO_ADDR
69119: GO 69068
69121: POP
69122: POP
// result = temp_list2 ;
69123: LD_ADDR_VAR 0 7
69127: PUSH
69128: LD_VAR 0 10
69132: ST_TO_ADDR
// end ;
69133: LD_VAR 0 7
69137: RET
// export function EnemyInRange ( unit , dist ) ; begin
69138: LD_INT 0
69140: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69141: LD_ADDR_VAR 0 3
69145: PUSH
69146: LD_VAR 0 1
69150: PPUSH
69151: CALL_OW 255
69155: PPUSH
69156: LD_VAR 0 1
69160: PPUSH
69161: CALL_OW 250
69165: PPUSH
69166: LD_VAR 0 1
69170: PPUSH
69171: CALL_OW 251
69175: PPUSH
69176: LD_VAR 0 2
69180: PPUSH
69181: CALL 42540 0 4
69185: PUSH
69186: LD_INT 4
69188: ARRAY
69189: ST_TO_ADDR
// end ;
69190: LD_VAR 0 3
69194: RET
// export function PlayerSeeMe ( unit ) ; begin
69195: LD_INT 0
69197: PPUSH
// result := See ( your_side , unit ) ;
69198: LD_ADDR_VAR 0 2
69202: PUSH
69203: LD_OWVAR 2
69207: PPUSH
69208: LD_VAR 0 1
69212: PPUSH
69213: CALL_OW 292
69217: ST_TO_ADDR
// end ;
69218: LD_VAR 0 2
69222: RET
// export function ReverseDir ( unit ) ; begin
69223: LD_INT 0
69225: PPUSH
// if not unit then
69226: LD_VAR 0 1
69230: NOT
69231: IFFALSE 69235
// exit ;
69233: GO 69258
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69235: LD_ADDR_VAR 0 2
69239: PUSH
69240: LD_VAR 0 1
69244: PPUSH
69245: CALL_OW 254
69249: PUSH
69250: LD_INT 3
69252: PLUS
69253: PUSH
69254: LD_INT 6
69256: MOD
69257: ST_TO_ADDR
// end ;
69258: LD_VAR 0 2
69262: RET
// export function ReverseArray ( array ) ; var i ; begin
69263: LD_INT 0
69265: PPUSH
69266: PPUSH
// if not array then
69267: LD_VAR 0 1
69271: NOT
69272: IFFALSE 69276
// exit ;
69274: GO 69331
// result := [ ] ;
69276: LD_ADDR_VAR 0 2
69280: PUSH
69281: EMPTY
69282: ST_TO_ADDR
// for i := array downto 1 do
69283: LD_ADDR_VAR 0 3
69287: PUSH
69288: DOUBLE
69289: LD_VAR 0 1
69293: INC
69294: ST_TO_ADDR
69295: LD_INT 1
69297: PUSH
69298: FOR_DOWNTO
69299: IFFALSE 69329
// result := Join ( result , array [ i ] ) ;
69301: LD_ADDR_VAR 0 2
69305: PUSH
69306: LD_VAR 0 2
69310: PPUSH
69311: LD_VAR 0 1
69315: PUSH
69316: LD_VAR 0 3
69320: ARRAY
69321: PPUSH
69322: CALL 73956 0 2
69326: ST_TO_ADDR
69327: GO 69298
69329: POP
69330: POP
// end ;
69331: LD_VAR 0 2
69335: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69336: LD_INT 0
69338: PPUSH
69339: PPUSH
69340: PPUSH
69341: PPUSH
69342: PPUSH
69343: PPUSH
// if not unit or not hexes then
69344: LD_VAR 0 1
69348: NOT
69349: PUSH
69350: LD_VAR 0 2
69354: NOT
69355: OR
69356: IFFALSE 69360
// exit ;
69358: GO 69483
// dist := 9999 ;
69360: LD_ADDR_VAR 0 5
69364: PUSH
69365: LD_INT 9999
69367: ST_TO_ADDR
// for i = 1 to hexes do
69368: LD_ADDR_VAR 0 4
69372: PUSH
69373: DOUBLE
69374: LD_INT 1
69376: DEC
69377: ST_TO_ADDR
69378: LD_VAR 0 2
69382: PUSH
69383: FOR_TO
69384: IFFALSE 69471
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69386: LD_ADDR_VAR 0 6
69390: PUSH
69391: LD_VAR 0 1
69395: PPUSH
69396: LD_VAR 0 2
69400: PUSH
69401: LD_VAR 0 4
69405: ARRAY
69406: PUSH
69407: LD_INT 1
69409: ARRAY
69410: PPUSH
69411: LD_VAR 0 2
69415: PUSH
69416: LD_VAR 0 4
69420: ARRAY
69421: PUSH
69422: LD_INT 2
69424: ARRAY
69425: PPUSH
69426: CALL_OW 297
69430: ST_TO_ADDR
// if tdist < dist then
69431: LD_VAR 0 6
69435: PUSH
69436: LD_VAR 0 5
69440: LESS
69441: IFFALSE 69469
// begin hex := hexes [ i ] ;
69443: LD_ADDR_VAR 0 8
69447: PUSH
69448: LD_VAR 0 2
69452: PUSH
69453: LD_VAR 0 4
69457: ARRAY
69458: ST_TO_ADDR
// dist := tdist ;
69459: LD_ADDR_VAR 0 5
69463: PUSH
69464: LD_VAR 0 6
69468: ST_TO_ADDR
// end ; end ;
69469: GO 69383
69471: POP
69472: POP
// result := hex ;
69473: LD_ADDR_VAR 0 3
69477: PUSH
69478: LD_VAR 0 8
69482: ST_TO_ADDR
// end ;
69483: LD_VAR 0 3
69487: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69488: LD_INT 0
69490: PPUSH
69491: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69492: LD_VAR 0 1
69496: NOT
69497: PUSH
69498: LD_VAR 0 1
69502: PUSH
69503: LD_INT 21
69505: PUSH
69506: LD_INT 2
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 23
69515: PUSH
69516: LD_INT 2
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PPUSH
69527: CALL_OW 69
69531: IN
69532: NOT
69533: OR
69534: IFFALSE 69538
// exit ;
69536: GO 69585
// for i = 1 to 3 do
69538: LD_ADDR_VAR 0 3
69542: PUSH
69543: DOUBLE
69544: LD_INT 1
69546: DEC
69547: ST_TO_ADDR
69548: LD_INT 3
69550: PUSH
69551: FOR_TO
69552: IFFALSE 69583
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69554: LD_VAR 0 1
69558: PPUSH
69559: CALL_OW 250
69563: PPUSH
69564: LD_VAR 0 1
69568: PPUSH
69569: CALL_OW 251
69573: PPUSH
69574: LD_INT 1
69576: PPUSH
69577: CALL_OW 453
69581: GO 69551
69583: POP
69584: POP
// end ;
69585: LD_VAR 0 2
69589: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69590: LD_INT 0
69592: PPUSH
69593: PPUSH
69594: PPUSH
69595: PPUSH
69596: PPUSH
69597: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69598: LD_VAR 0 1
69602: NOT
69603: PUSH
69604: LD_VAR 0 2
69608: NOT
69609: OR
69610: PUSH
69611: LD_VAR 0 1
69615: PPUSH
69616: CALL_OW 314
69620: OR
69621: IFFALSE 69625
// exit ;
69623: GO 70066
// x := GetX ( enemy_unit ) ;
69625: LD_ADDR_VAR 0 7
69629: PUSH
69630: LD_VAR 0 2
69634: PPUSH
69635: CALL_OW 250
69639: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69640: LD_ADDR_VAR 0 8
69644: PUSH
69645: LD_VAR 0 2
69649: PPUSH
69650: CALL_OW 251
69654: ST_TO_ADDR
// if not x or not y then
69655: LD_VAR 0 7
69659: NOT
69660: PUSH
69661: LD_VAR 0 8
69665: NOT
69666: OR
69667: IFFALSE 69671
// exit ;
69669: GO 70066
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69671: LD_ADDR_VAR 0 6
69675: PUSH
69676: LD_VAR 0 7
69680: PPUSH
69681: LD_INT 0
69683: PPUSH
69684: LD_INT 4
69686: PPUSH
69687: CALL_OW 272
69691: PUSH
69692: LD_VAR 0 8
69696: PPUSH
69697: LD_INT 0
69699: PPUSH
69700: LD_INT 4
69702: PPUSH
69703: CALL_OW 273
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_VAR 0 7
69716: PPUSH
69717: LD_INT 1
69719: PPUSH
69720: LD_INT 4
69722: PPUSH
69723: CALL_OW 272
69727: PUSH
69728: LD_VAR 0 8
69732: PPUSH
69733: LD_INT 1
69735: PPUSH
69736: LD_INT 4
69738: PPUSH
69739: CALL_OW 273
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_VAR 0 7
69752: PPUSH
69753: LD_INT 2
69755: PPUSH
69756: LD_INT 4
69758: PPUSH
69759: CALL_OW 272
69763: PUSH
69764: LD_VAR 0 8
69768: PPUSH
69769: LD_INT 2
69771: PPUSH
69772: LD_INT 4
69774: PPUSH
69775: CALL_OW 273
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_VAR 0 7
69788: PPUSH
69789: LD_INT 3
69791: PPUSH
69792: LD_INT 4
69794: PPUSH
69795: CALL_OW 272
69799: PUSH
69800: LD_VAR 0 8
69804: PPUSH
69805: LD_INT 3
69807: PPUSH
69808: LD_INT 4
69810: PPUSH
69811: CALL_OW 273
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_VAR 0 7
69824: PPUSH
69825: LD_INT 4
69827: PPUSH
69828: LD_INT 4
69830: PPUSH
69831: CALL_OW 272
69835: PUSH
69836: LD_VAR 0 8
69840: PPUSH
69841: LD_INT 4
69843: PPUSH
69844: LD_INT 4
69846: PPUSH
69847: CALL_OW 273
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_VAR 0 7
69860: PPUSH
69861: LD_INT 5
69863: PPUSH
69864: LD_INT 4
69866: PPUSH
69867: CALL_OW 272
69871: PUSH
69872: LD_VAR 0 8
69876: PPUSH
69877: LD_INT 5
69879: PPUSH
69880: LD_INT 4
69882: PPUSH
69883: CALL_OW 273
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: ST_TO_ADDR
// for i = tmp downto 1 do
69900: LD_ADDR_VAR 0 4
69904: PUSH
69905: DOUBLE
69906: LD_VAR 0 6
69910: INC
69911: ST_TO_ADDR
69912: LD_INT 1
69914: PUSH
69915: FOR_DOWNTO
69916: IFFALSE 70017
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69918: LD_VAR 0 6
69922: PUSH
69923: LD_VAR 0 4
69927: ARRAY
69928: PUSH
69929: LD_INT 1
69931: ARRAY
69932: PPUSH
69933: LD_VAR 0 6
69937: PUSH
69938: LD_VAR 0 4
69942: ARRAY
69943: PUSH
69944: LD_INT 2
69946: ARRAY
69947: PPUSH
69948: CALL_OW 488
69952: NOT
69953: PUSH
69954: LD_VAR 0 6
69958: PUSH
69959: LD_VAR 0 4
69963: ARRAY
69964: PUSH
69965: LD_INT 1
69967: ARRAY
69968: PPUSH
69969: LD_VAR 0 6
69973: PUSH
69974: LD_VAR 0 4
69978: ARRAY
69979: PUSH
69980: LD_INT 2
69982: ARRAY
69983: PPUSH
69984: CALL_OW 428
69988: PUSH
69989: LD_INT 0
69991: NONEQUAL
69992: OR
69993: IFFALSE 70015
// tmp := Delete ( tmp , i ) ;
69995: LD_ADDR_VAR 0 6
69999: PUSH
70000: LD_VAR 0 6
70004: PPUSH
70005: LD_VAR 0 4
70009: PPUSH
70010: CALL_OW 3
70014: ST_TO_ADDR
70015: GO 69915
70017: POP
70018: POP
// j := GetClosestHex ( unit , tmp ) ;
70019: LD_ADDR_VAR 0 5
70023: PUSH
70024: LD_VAR 0 1
70028: PPUSH
70029: LD_VAR 0 6
70033: PPUSH
70034: CALL 69336 0 2
70038: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70039: LD_VAR 0 1
70043: PPUSH
70044: LD_VAR 0 5
70048: PUSH
70049: LD_INT 1
70051: ARRAY
70052: PPUSH
70053: LD_VAR 0 5
70057: PUSH
70058: LD_INT 2
70060: ARRAY
70061: PPUSH
70062: CALL_OW 111
// end ;
70066: LD_VAR 0 3
70070: RET
// export function PrepareApemanSoldier ( ) ; begin
70071: LD_INT 0
70073: PPUSH
// uc_nation := 0 ;
70074: LD_ADDR_OWVAR 21
70078: PUSH
70079: LD_INT 0
70081: ST_TO_ADDR
// hc_sex := sex_male ;
70082: LD_ADDR_OWVAR 27
70086: PUSH
70087: LD_INT 1
70089: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70090: LD_ADDR_OWVAR 28
70094: PUSH
70095: LD_INT 15
70097: ST_TO_ADDR
// hc_gallery :=  ;
70098: LD_ADDR_OWVAR 33
70102: PUSH
70103: LD_STRING 
70105: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70106: LD_ADDR_OWVAR 31
70110: PUSH
70111: LD_INT 0
70113: PPUSH
70114: LD_INT 3
70116: PPUSH
70117: CALL_OW 12
70121: PUSH
70122: LD_INT 0
70124: PPUSH
70125: LD_INT 3
70127: PPUSH
70128: CALL_OW 12
70132: PUSH
70133: LD_INT 0
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: ST_TO_ADDR
// end ;
70145: LD_VAR 0 1
70149: RET
// export function PrepareApemanEngineer ( ) ; begin
70150: LD_INT 0
70152: PPUSH
// uc_nation := 0 ;
70153: LD_ADDR_OWVAR 21
70157: PUSH
70158: LD_INT 0
70160: ST_TO_ADDR
// hc_sex := sex_male ;
70161: LD_ADDR_OWVAR 27
70165: PUSH
70166: LD_INT 1
70168: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70169: LD_ADDR_OWVAR 28
70173: PUSH
70174: LD_INT 16
70176: ST_TO_ADDR
// hc_gallery :=  ;
70177: LD_ADDR_OWVAR 33
70181: PUSH
70182: LD_STRING 
70184: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70185: LD_ADDR_OWVAR 31
70189: PUSH
70190: LD_INT 0
70192: PPUSH
70193: LD_INT 3
70195: PPUSH
70196: CALL_OW 12
70200: PUSH
70201: LD_INT 0
70203: PPUSH
70204: LD_INT 3
70206: PPUSH
70207: CALL_OW 12
70211: PUSH
70212: LD_INT 0
70214: PUSH
70215: LD_INT 0
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: ST_TO_ADDR
// end ;
70224: LD_VAR 0 1
70228: RET
// export function PrepareApeman ( agressivity ) ; begin
70229: LD_INT 0
70231: PPUSH
// uc_side := 0 ;
70232: LD_ADDR_OWVAR 20
70236: PUSH
70237: LD_INT 0
70239: ST_TO_ADDR
// uc_nation := 0 ;
70240: LD_ADDR_OWVAR 21
70244: PUSH
70245: LD_INT 0
70247: ST_TO_ADDR
// hc_sex := sex_male ;
70248: LD_ADDR_OWVAR 27
70252: PUSH
70253: LD_INT 1
70255: ST_TO_ADDR
// hc_class := class_apeman ;
70256: LD_ADDR_OWVAR 28
70260: PUSH
70261: LD_INT 12
70263: ST_TO_ADDR
// hc_gallery :=  ;
70264: LD_ADDR_OWVAR 33
70268: PUSH
70269: LD_STRING 
70271: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70272: LD_ADDR_OWVAR 35
70276: PUSH
70277: LD_VAR 0 1
70281: NEG
70282: PPUSH
70283: LD_VAR 0 1
70287: PPUSH
70288: CALL_OW 12
70292: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70293: LD_ADDR_OWVAR 31
70297: PUSH
70298: LD_INT 0
70300: PPUSH
70301: LD_INT 3
70303: PPUSH
70304: CALL_OW 12
70308: PUSH
70309: LD_INT 0
70311: PPUSH
70312: LD_INT 3
70314: PPUSH
70315: CALL_OW 12
70319: PUSH
70320: LD_INT 0
70322: PUSH
70323: LD_INT 0
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: ST_TO_ADDR
// end ;
70332: LD_VAR 0 2
70336: RET
// export function PrepareTiger ( agressivity ) ; begin
70337: LD_INT 0
70339: PPUSH
// uc_side := 0 ;
70340: LD_ADDR_OWVAR 20
70344: PUSH
70345: LD_INT 0
70347: ST_TO_ADDR
// uc_nation := 0 ;
70348: LD_ADDR_OWVAR 21
70352: PUSH
70353: LD_INT 0
70355: ST_TO_ADDR
// hc_class := class_tiger ;
70356: LD_ADDR_OWVAR 28
70360: PUSH
70361: LD_INT 14
70363: ST_TO_ADDR
// hc_gallery :=  ;
70364: LD_ADDR_OWVAR 33
70368: PUSH
70369: LD_STRING 
70371: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70372: LD_ADDR_OWVAR 35
70376: PUSH
70377: LD_VAR 0 1
70381: NEG
70382: PPUSH
70383: LD_VAR 0 1
70387: PPUSH
70388: CALL_OW 12
70392: ST_TO_ADDR
// end ;
70393: LD_VAR 0 2
70397: RET
// export function PrepareEnchidna ( ) ; begin
70398: LD_INT 0
70400: PPUSH
// uc_side := 0 ;
70401: LD_ADDR_OWVAR 20
70405: PUSH
70406: LD_INT 0
70408: ST_TO_ADDR
// uc_nation := 0 ;
70409: LD_ADDR_OWVAR 21
70413: PUSH
70414: LD_INT 0
70416: ST_TO_ADDR
// hc_class := class_baggie ;
70417: LD_ADDR_OWVAR 28
70421: PUSH
70422: LD_INT 13
70424: ST_TO_ADDR
// hc_gallery :=  ;
70425: LD_ADDR_OWVAR 33
70429: PUSH
70430: LD_STRING 
70432: ST_TO_ADDR
// end ;
70433: LD_VAR 0 1
70437: RET
// export function PrepareFrog ( ) ; begin
70438: LD_INT 0
70440: PPUSH
// uc_side := 0 ;
70441: LD_ADDR_OWVAR 20
70445: PUSH
70446: LD_INT 0
70448: ST_TO_ADDR
// uc_nation := 0 ;
70449: LD_ADDR_OWVAR 21
70453: PUSH
70454: LD_INT 0
70456: ST_TO_ADDR
// hc_class := class_frog ;
70457: LD_ADDR_OWVAR 28
70461: PUSH
70462: LD_INT 19
70464: ST_TO_ADDR
// hc_gallery :=  ;
70465: LD_ADDR_OWVAR 33
70469: PUSH
70470: LD_STRING 
70472: ST_TO_ADDR
// end ;
70473: LD_VAR 0 1
70477: RET
// export function PrepareFish ( ) ; begin
70478: LD_INT 0
70480: PPUSH
// uc_side := 0 ;
70481: LD_ADDR_OWVAR 20
70485: PUSH
70486: LD_INT 0
70488: ST_TO_ADDR
// uc_nation := 0 ;
70489: LD_ADDR_OWVAR 21
70493: PUSH
70494: LD_INT 0
70496: ST_TO_ADDR
// hc_class := class_fish ;
70497: LD_ADDR_OWVAR 28
70501: PUSH
70502: LD_INT 20
70504: ST_TO_ADDR
// hc_gallery :=  ;
70505: LD_ADDR_OWVAR 33
70509: PUSH
70510: LD_STRING 
70512: ST_TO_ADDR
// end ;
70513: LD_VAR 0 1
70517: RET
// export function PrepareBird ( ) ; begin
70518: LD_INT 0
70520: PPUSH
// uc_side := 0 ;
70521: LD_ADDR_OWVAR 20
70525: PUSH
70526: LD_INT 0
70528: ST_TO_ADDR
// uc_nation := 0 ;
70529: LD_ADDR_OWVAR 21
70533: PUSH
70534: LD_INT 0
70536: ST_TO_ADDR
// hc_class := class_phororhacos ;
70537: LD_ADDR_OWVAR 28
70541: PUSH
70542: LD_INT 18
70544: ST_TO_ADDR
// hc_gallery :=  ;
70545: LD_ADDR_OWVAR 33
70549: PUSH
70550: LD_STRING 
70552: ST_TO_ADDR
// end ;
70553: LD_VAR 0 1
70557: RET
// export function PrepareHorse ( ) ; begin
70558: LD_INT 0
70560: PPUSH
// uc_side := 0 ;
70561: LD_ADDR_OWVAR 20
70565: PUSH
70566: LD_INT 0
70568: ST_TO_ADDR
// uc_nation := 0 ;
70569: LD_ADDR_OWVAR 21
70573: PUSH
70574: LD_INT 0
70576: ST_TO_ADDR
// hc_class := class_horse ;
70577: LD_ADDR_OWVAR 28
70581: PUSH
70582: LD_INT 21
70584: ST_TO_ADDR
// hc_gallery :=  ;
70585: LD_ADDR_OWVAR 33
70589: PUSH
70590: LD_STRING 
70592: ST_TO_ADDR
// end ;
70593: LD_VAR 0 1
70597: RET
// export function PrepareMastodont ( ) ; begin
70598: LD_INT 0
70600: PPUSH
// uc_side := 0 ;
70601: LD_ADDR_OWVAR 20
70605: PUSH
70606: LD_INT 0
70608: ST_TO_ADDR
// uc_nation := 0 ;
70609: LD_ADDR_OWVAR 21
70613: PUSH
70614: LD_INT 0
70616: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70617: LD_ADDR_OWVAR 37
70621: PUSH
70622: LD_INT 31
70624: ST_TO_ADDR
// vc_control := control_rider ;
70625: LD_ADDR_OWVAR 38
70629: PUSH
70630: LD_INT 4
70632: ST_TO_ADDR
// end ;
70633: LD_VAR 0 1
70637: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70638: LD_INT 0
70640: PPUSH
70641: PPUSH
70642: PPUSH
// uc_side = 0 ;
70643: LD_ADDR_OWVAR 20
70647: PUSH
70648: LD_INT 0
70650: ST_TO_ADDR
// uc_nation = 0 ;
70651: LD_ADDR_OWVAR 21
70655: PUSH
70656: LD_INT 0
70658: ST_TO_ADDR
// InitHc_All ( ) ;
70659: CALL_OW 584
// InitVc ;
70663: CALL_OW 20
// if mastodonts then
70667: LD_VAR 0 6
70671: IFFALSE 70738
// for i = 1 to mastodonts do
70673: LD_ADDR_VAR 0 11
70677: PUSH
70678: DOUBLE
70679: LD_INT 1
70681: DEC
70682: ST_TO_ADDR
70683: LD_VAR 0 6
70687: PUSH
70688: FOR_TO
70689: IFFALSE 70736
// begin vc_chassis := 31 ;
70691: LD_ADDR_OWVAR 37
70695: PUSH
70696: LD_INT 31
70698: ST_TO_ADDR
// vc_control := control_rider ;
70699: LD_ADDR_OWVAR 38
70703: PUSH
70704: LD_INT 4
70706: ST_TO_ADDR
// animal := CreateVehicle ;
70707: LD_ADDR_VAR 0 12
70711: PUSH
70712: CALL_OW 45
70716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70717: LD_VAR 0 12
70721: PPUSH
70722: LD_VAR 0 8
70726: PPUSH
70727: LD_INT 0
70729: PPUSH
70730: CALL 72873 0 3
// end ;
70734: GO 70688
70736: POP
70737: POP
// if horses then
70738: LD_VAR 0 5
70742: IFFALSE 70809
// for i = 1 to horses do
70744: LD_ADDR_VAR 0 11
70748: PUSH
70749: DOUBLE
70750: LD_INT 1
70752: DEC
70753: ST_TO_ADDR
70754: LD_VAR 0 5
70758: PUSH
70759: FOR_TO
70760: IFFALSE 70807
// begin hc_class := 21 ;
70762: LD_ADDR_OWVAR 28
70766: PUSH
70767: LD_INT 21
70769: ST_TO_ADDR
// hc_gallery :=  ;
70770: LD_ADDR_OWVAR 33
70774: PUSH
70775: LD_STRING 
70777: ST_TO_ADDR
// animal := CreateHuman ;
70778: LD_ADDR_VAR 0 12
70782: PUSH
70783: CALL_OW 44
70787: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70788: LD_VAR 0 12
70792: PPUSH
70793: LD_VAR 0 8
70797: PPUSH
70798: LD_INT 0
70800: PPUSH
70801: CALL 72873 0 3
// end ;
70805: GO 70759
70807: POP
70808: POP
// if birds then
70809: LD_VAR 0 1
70813: IFFALSE 70880
// for i = 1 to birds do
70815: LD_ADDR_VAR 0 11
70819: PUSH
70820: DOUBLE
70821: LD_INT 1
70823: DEC
70824: ST_TO_ADDR
70825: LD_VAR 0 1
70829: PUSH
70830: FOR_TO
70831: IFFALSE 70878
// begin hc_class = 18 ;
70833: LD_ADDR_OWVAR 28
70837: PUSH
70838: LD_INT 18
70840: ST_TO_ADDR
// hc_gallery =  ;
70841: LD_ADDR_OWVAR 33
70845: PUSH
70846: LD_STRING 
70848: ST_TO_ADDR
// animal := CreateHuman ;
70849: LD_ADDR_VAR 0 12
70853: PUSH
70854: CALL_OW 44
70858: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70859: LD_VAR 0 12
70863: PPUSH
70864: LD_VAR 0 8
70868: PPUSH
70869: LD_INT 0
70871: PPUSH
70872: CALL 72873 0 3
// end ;
70876: GO 70830
70878: POP
70879: POP
// if tigers then
70880: LD_VAR 0 2
70884: IFFALSE 70968
// for i = 1 to tigers do
70886: LD_ADDR_VAR 0 11
70890: PUSH
70891: DOUBLE
70892: LD_INT 1
70894: DEC
70895: ST_TO_ADDR
70896: LD_VAR 0 2
70900: PUSH
70901: FOR_TO
70902: IFFALSE 70966
// begin hc_class = class_tiger ;
70904: LD_ADDR_OWVAR 28
70908: PUSH
70909: LD_INT 14
70911: ST_TO_ADDR
// hc_gallery =  ;
70912: LD_ADDR_OWVAR 33
70916: PUSH
70917: LD_STRING 
70919: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70920: LD_ADDR_OWVAR 35
70924: PUSH
70925: LD_INT 7
70927: NEG
70928: PPUSH
70929: LD_INT 7
70931: PPUSH
70932: CALL_OW 12
70936: ST_TO_ADDR
// animal := CreateHuman ;
70937: LD_ADDR_VAR 0 12
70941: PUSH
70942: CALL_OW 44
70946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70947: LD_VAR 0 12
70951: PPUSH
70952: LD_VAR 0 8
70956: PPUSH
70957: LD_INT 0
70959: PPUSH
70960: CALL 72873 0 3
// end ;
70964: GO 70901
70966: POP
70967: POP
// if apemans then
70968: LD_VAR 0 3
70972: IFFALSE 71095
// for i = 1 to apemans do
70974: LD_ADDR_VAR 0 11
70978: PUSH
70979: DOUBLE
70980: LD_INT 1
70982: DEC
70983: ST_TO_ADDR
70984: LD_VAR 0 3
70988: PUSH
70989: FOR_TO
70990: IFFALSE 71093
// begin hc_class = class_apeman ;
70992: LD_ADDR_OWVAR 28
70996: PUSH
70997: LD_INT 12
70999: ST_TO_ADDR
// hc_gallery =  ;
71000: LD_ADDR_OWVAR 33
71004: PUSH
71005: LD_STRING 
71007: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71008: LD_ADDR_OWVAR 35
71012: PUSH
71013: LD_INT 2
71015: NEG
71016: PPUSH
71017: LD_INT 2
71019: PPUSH
71020: CALL_OW 12
71024: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71025: LD_ADDR_OWVAR 31
71029: PUSH
71030: LD_INT 1
71032: PPUSH
71033: LD_INT 3
71035: PPUSH
71036: CALL_OW 12
71040: PUSH
71041: LD_INT 1
71043: PPUSH
71044: LD_INT 3
71046: PPUSH
71047: CALL_OW 12
71051: PUSH
71052: LD_INT 0
71054: PUSH
71055: LD_INT 0
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: ST_TO_ADDR
// animal := CreateHuman ;
71064: LD_ADDR_VAR 0 12
71068: PUSH
71069: CALL_OW 44
71073: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71074: LD_VAR 0 12
71078: PPUSH
71079: LD_VAR 0 8
71083: PPUSH
71084: LD_INT 0
71086: PPUSH
71087: CALL 72873 0 3
// end ;
71091: GO 70989
71093: POP
71094: POP
// if enchidnas then
71095: LD_VAR 0 4
71099: IFFALSE 71166
// for i = 1 to enchidnas do
71101: LD_ADDR_VAR 0 11
71105: PUSH
71106: DOUBLE
71107: LD_INT 1
71109: DEC
71110: ST_TO_ADDR
71111: LD_VAR 0 4
71115: PUSH
71116: FOR_TO
71117: IFFALSE 71164
// begin hc_class = 13 ;
71119: LD_ADDR_OWVAR 28
71123: PUSH
71124: LD_INT 13
71126: ST_TO_ADDR
// hc_gallery =  ;
71127: LD_ADDR_OWVAR 33
71131: PUSH
71132: LD_STRING 
71134: ST_TO_ADDR
// animal := CreateHuman ;
71135: LD_ADDR_VAR 0 12
71139: PUSH
71140: CALL_OW 44
71144: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71145: LD_VAR 0 12
71149: PPUSH
71150: LD_VAR 0 8
71154: PPUSH
71155: LD_INT 0
71157: PPUSH
71158: CALL 72873 0 3
// end ;
71162: GO 71116
71164: POP
71165: POP
// if fishes then
71166: LD_VAR 0 7
71170: IFFALSE 71237
// for i = 1 to fishes do
71172: LD_ADDR_VAR 0 11
71176: PUSH
71177: DOUBLE
71178: LD_INT 1
71180: DEC
71181: ST_TO_ADDR
71182: LD_VAR 0 7
71186: PUSH
71187: FOR_TO
71188: IFFALSE 71235
// begin hc_class = 20 ;
71190: LD_ADDR_OWVAR 28
71194: PUSH
71195: LD_INT 20
71197: ST_TO_ADDR
// hc_gallery =  ;
71198: LD_ADDR_OWVAR 33
71202: PUSH
71203: LD_STRING 
71205: ST_TO_ADDR
// animal := CreateHuman ;
71206: LD_ADDR_VAR 0 12
71210: PUSH
71211: CALL_OW 44
71215: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71216: LD_VAR 0 12
71220: PPUSH
71221: LD_VAR 0 9
71225: PPUSH
71226: LD_INT 0
71228: PPUSH
71229: CALL 72873 0 3
// end ;
71233: GO 71187
71235: POP
71236: POP
// end ;
71237: LD_VAR 0 10
71241: RET
// export function WantHeal ( sci , unit ) ; begin
71242: LD_INT 0
71244: PPUSH
// if GetTaskList ( sci ) > 0 then
71245: LD_VAR 0 1
71249: PPUSH
71250: CALL_OW 437
71254: PUSH
71255: LD_INT 0
71257: GREATER
71258: IFFALSE 71328
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71260: LD_VAR 0 1
71264: PPUSH
71265: CALL_OW 437
71269: PUSH
71270: LD_INT 1
71272: ARRAY
71273: PUSH
71274: LD_INT 1
71276: ARRAY
71277: PUSH
71278: LD_STRING l
71280: EQUAL
71281: PUSH
71282: LD_VAR 0 1
71286: PPUSH
71287: CALL_OW 437
71291: PUSH
71292: LD_INT 1
71294: ARRAY
71295: PUSH
71296: LD_INT 4
71298: ARRAY
71299: PUSH
71300: LD_VAR 0 2
71304: EQUAL
71305: AND
71306: IFFALSE 71318
// result := true else
71308: LD_ADDR_VAR 0 3
71312: PUSH
71313: LD_INT 1
71315: ST_TO_ADDR
71316: GO 71326
// result := false ;
71318: LD_ADDR_VAR 0 3
71322: PUSH
71323: LD_INT 0
71325: ST_TO_ADDR
// end else
71326: GO 71336
// result := false ;
71328: LD_ADDR_VAR 0 3
71332: PUSH
71333: LD_INT 0
71335: ST_TO_ADDR
// end ;
71336: LD_VAR 0 3
71340: RET
// export function HealTarget ( sci ) ; begin
71341: LD_INT 0
71343: PPUSH
// if not sci then
71344: LD_VAR 0 1
71348: NOT
71349: IFFALSE 71353
// exit ;
71351: GO 71418
// result := 0 ;
71353: LD_ADDR_VAR 0 2
71357: PUSH
71358: LD_INT 0
71360: ST_TO_ADDR
// if GetTaskList ( sci ) then
71361: LD_VAR 0 1
71365: PPUSH
71366: CALL_OW 437
71370: IFFALSE 71418
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71372: LD_VAR 0 1
71376: PPUSH
71377: CALL_OW 437
71381: PUSH
71382: LD_INT 1
71384: ARRAY
71385: PUSH
71386: LD_INT 1
71388: ARRAY
71389: PUSH
71390: LD_STRING l
71392: EQUAL
71393: IFFALSE 71418
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71395: LD_ADDR_VAR 0 2
71399: PUSH
71400: LD_VAR 0 1
71404: PPUSH
71405: CALL_OW 437
71409: PUSH
71410: LD_INT 1
71412: ARRAY
71413: PUSH
71414: LD_INT 4
71416: ARRAY
71417: ST_TO_ADDR
// end ;
71418: LD_VAR 0 2
71422: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71423: LD_INT 0
71425: PPUSH
71426: PPUSH
71427: PPUSH
71428: PPUSH
// if not base_units then
71429: LD_VAR 0 1
71433: NOT
71434: IFFALSE 71438
// exit ;
71436: GO 71525
// result := false ;
71438: LD_ADDR_VAR 0 2
71442: PUSH
71443: LD_INT 0
71445: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71446: LD_ADDR_VAR 0 5
71450: PUSH
71451: LD_VAR 0 1
71455: PPUSH
71456: LD_INT 21
71458: PUSH
71459: LD_INT 3
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PPUSH
71466: CALL_OW 72
71470: ST_TO_ADDR
// if not tmp then
71471: LD_VAR 0 5
71475: NOT
71476: IFFALSE 71480
// exit ;
71478: GO 71525
// for i in tmp do
71480: LD_ADDR_VAR 0 3
71484: PUSH
71485: LD_VAR 0 5
71489: PUSH
71490: FOR_IN
71491: IFFALSE 71523
// begin result := EnemyInRange ( i , 22 ) ;
71493: LD_ADDR_VAR 0 2
71497: PUSH
71498: LD_VAR 0 3
71502: PPUSH
71503: LD_INT 22
71505: PPUSH
71506: CALL 69138 0 2
71510: ST_TO_ADDR
// if result then
71511: LD_VAR 0 2
71515: IFFALSE 71521
// exit ;
71517: POP
71518: POP
71519: GO 71525
// end ;
71521: GO 71490
71523: POP
71524: POP
// end ;
71525: LD_VAR 0 2
71529: RET
// export function FilterByTag ( units , tag ) ; begin
71530: LD_INT 0
71532: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71533: LD_ADDR_VAR 0 3
71537: PUSH
71538: LD_VAR 0 1
71542: PPUSH
71543: LD_INT 120
71545: PUSH
71546: LD_VAR 0 2
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PPUSH
71555: CALL_OW 72
71559: ST_TO_ADDR
// end ;
71560: LD_VAR 0 3
71564: RET
// export function IsDriver ( un ) ; begin
71565: LD_INT 0
71567: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71568: LD_ADDR_VAR 0 2
71572: PUSH
71573: LD_VAR 0 1
71577: PUSH
71578: LD_INT 55
71580: PUSH
71581: EMPTY
71582: LIST
71583: PPUSH
71584: CALL_OW 69
71588: IN
71589: ST_TO_ADDR
// end ;
71590: LD_VAR 0 2
71594: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71595: LD_INT 0
71597: PPUSH
71598: PPUSH
// list := [ ] ;
71599: LD_ADDR_VAR 0 5
71603: PUSH
71604: EMPTY
71605: ST_TO_ADDR
// case d of 0 :
71606: LD_VAR 0 3
71610: PUSH
71611: LD_INT 0
71613: DOUBLE
71614: EQUAL
71615: IFTRUE 71619
71617: GO 71752
71619: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71620: LD_ADDR_VAR 0 5
71624: PUSH
71625: LD_VAR 0 1
71629: PUSH
71630: LD_INT 4
71632: MINUS
71633: PUSH
71634: LD_VAR 0 2
71638: PUSH
71639: LD_INT 4
71641: MINUS
71642: PUSH
71643: LD_INT 2
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: LIST
71650: PUSH
71651: LD_VAR 0 1
71655: PUSH
71656: LD_INT 3
71658: MINUS
71659: PUSH
71660: LD_VAR 0 2
71664: PUSH
71665: LD_INT 1
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: LIST
71672: PUSH
71673: LD_VAR 0 1
71677: PUSH
71678: LD_INT 4
71680: PLUS
71681: PUSH
71682: LD_VAR 0 2
71686: PUSH
71687: LD_INT 4
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: LIST
71694: PUSH
71695: LD_VAR 0 1
71699: PUSH
71700: LD_INT 3
71702: PLUS
71703: PUSH
71704: LD_VAR 0 2
71708: PUSH
71709: LD_INT 3
71711: PLUS
71712: PUSH
71713: LD_INT 5
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: LIST
71720: PUSH
71721: LD_VAR 0 1
71725: PUSH
71726: LD_VAR 0 2
71730: PUSH
71731: LD_INT 4
71733: PLUS
71734: PUSH
71735: LD_INT 0
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: LIST
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: ST_TO_ADDR
// end ; 1 :
71750: GO 72450
71752: LD_INT 1
71754: DOUBLE
71755: EQUAL
71756: IFTRUE 71760
71758: GO 71893
71760: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71761: LD_ADDR_VAR 0 5
71765: PUSH
71766: LD_VAR 0 1
71770: PUSH
71771: LD_VAR 0 2
71775: PUSH
71776: LD_INT 4
71778: MINUS
71779: PUSH
71780: LD_INT 3
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: LIST
71787: PUSH
71788: LD_VAR 0 1
71792: PUSH
71793: LD_INT 3
71795: MINUS
71796: PUSH
71797: LD_VAR 0 2
71801: PUSH
71802: LD_INT 3
71804: MINUS
71805: PUSH
71806: LD_INT 2
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: LIST
71813: PUSH
71814: LD_VAR 0 1
71818: PUSH
71819: LD_INT 4
71821: MINUS
71822: PUSH
71823: LD_VAR 0 2
71827: PUSH
71828: LD_INT 1
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: LIST
71835: PUSH
71836: LD_VAR 0 1
71840: PUSH
71841: LD_VAR 0 2
71845: PUSH
71846: LD_INT 3
71848: PLUS
71849: PUSH
71850: LD_INT 0
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: LIST
71857: PUSH
71858: LD_VAR 0 1
71862: PUSH
71863: LD_INT 4
71865: PLUS
71866: PUSH
71867: LD_VAR 0 2
71871: PUSH
71872: LD_INT 4
71874: PLUS
71875: PUSH
71876: LD_INT 5
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: LIST
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: ST_TO_ADDR
// end ; 2 :
71891: GO 72450
71893: LD_INT 2
71895: DOUBLE
71896: EQUAL
71897: IFTRUE 71901
71899: GO 72030
71901: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71902: LD_ADDR_VAR 0 5
71906: PUSH
71907: LD_VAR 0 1
71911: PUSH
71912: LD_VAR 0 2
71916: PUSH
71917: LD_INT 3
71919: MINUS
71920: PUSH
71921: LD_INT 3
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: LIST
71928: PUSH
71929: LD_VAR 0 1
71933: PUSH
71934: LD_INT 4
71936: PLUS
71937: PUSH
71938: LD_VAR 0 2
71942: PUSH
71943: LD_INT 4
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: LIST
71950: PUSH
71951: LD_VAR 0 1
71955: PUSH
71956: LD_VAR 0 2
71960: PUSH
71961: LD_INT 4
71963: PLUS
71964: PUSH
71965: LD_INT 0
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: LIST
71972: PUSH
71973: LD_VAR 0 1
71977: PUSH
71978: LD_INT 3
71980: MINUS
71981: PUSH
71982: LD_VAR 0 2
71986: PUSH
71987: LD_INT 1
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: LIST
71994: PUSH
71995: LD_VAR 0 1
71999: PUSH
72000: LD_INT 4
72002: MINUS
72003: PUSH
72004: LD_VAR 0 2
72008: PUSH
72009: LD_INT 4
72011: MINUS
72012: PUSH
72013: LD_INT 2
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: LIST
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: ST_TO_ADDR
// end ; 3 :
72028: GO 72450
72030: LD_INT 3
72032: DOUBLE
72033: EQUAL
72034: IFTRUE 72038
72036: GO 72171
72038: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72039: LD_ADDR_VAR 0 5
72043: PUSH
72044: LD_VAR 0 1
72048: PUSH
72049: LD_INT 3
72051: PLUS
72052: PUSH
72053: LD_VAR 0 2
72057: PUSH
72058: LD_INT 4
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: LIST
72065: PUSH
72066: LD_VAR 0 1
72070: PUSH
72071: LD_INT 4
72073: PLUS
72074: PUSH
72075: LD_VAR 0 2
72079: PUSH
72080: LD_INT 4
72082: PLUS
72083: PUSH
72084: LD_INT 5
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: LIST
72091: PUSH
72092: LD_VAR 0 1
72096: PUSH
72097: LD_INT 4
72099: MINUS
72100: PUSH
72101: LD_VAR 0 2
72105: PUSH
72106: LD_INT 1
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: LIST
72113: PUSH
72114: LD_VAR 0 1
72118: PUSH
72119: LD_VAR 0 2
72123: PUSH
72124: LD_INT 4
72126: MINUS
72127: PUSH
72128: LD_INT 3
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: LIST
72135: PUSH
72136: LD_VAR 0 1
72140: PUSH
72141: LD_INT 3
72143: MINUS
72144: PUSH
72145: LD_VAR 0 2
72149: PUSH
72150: LD_INT 3
72152: MINUS
72153: PUSH
72154: LD_INT 2
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: LIST
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: ST_TO_ADDR
// end ; 4 :
72169: GO 72450
72171: LD_INT 4
72173: DOUBLE
72174: EQUAL
72175: IFTRUE 72179
72177: GO 72312
72179: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72180: LD_ADDR_VAR 0 5
72184: PUSH
72185: LD_VAR 0 1
72189: PUSH
72190: LD_VAR 0 2
72194: PUSH
72195: LD_INT 4
72197: PLUS
72198: PUSH
72199: LD_INT 0
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: LIST
72206: PUSH
72207: LD_VAR 0 1
72211: PUSH
72212: LD_INT 3
72214: PLUS
72215: PUSH
72216: LD_VAR 0 2
72220: PUSH
72221: LD_INT 3
72223: PLUS
72224: PUSH
72225: LD_INT 5
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: LIST
72232: PUSH
72233: LD_VAR 0 1
72237: PUSH
72238: LD_INT 4
72240: PLUS
72241: PUSH
72242: LD_VAR 0 2
72246: PUSH
72247: LD_INT 4
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: LIST
72254: PUSH
72255: LD_VAR 0 1
72259: PUSH
72260: LD_VAR 0 2
72264: PUSH
72265: LD_INT 3
72267: MINUS
72268: PUSH
72269: LD_INT 3
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: LIST
72276: PUSH
72277: LD_VAR 0 1
72281: PUSH
72282: LD_INT 4
72284: MINUS
72285: PUSH
72286: LD_VAR 0 2
72290: PUSH
72291: LD_INT 4
72293: MINUS
72294: PUSH
72295: LD_INT 2
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: LIST
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: ST_TO_ADDR
// end ; 5 :
72310: GO 72450
72312: LD_INT 5
72314: DOUBLE
72315: EQUAL
72316: IFTRUE 72320
72318: GO 72449
72320: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72321: LD_ADDR_VAR 0 5
72325: PUSH
72326: LD_VAR 0 1
72330: PUSH
72331: LD_INT 4
72333: MINUS
72334: PUSH
72335: LD_VAR 0 2
72339: PUSH
72340: LD_INT 1
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: LIST
72347: PUSH
72348: LD_VAR 0 1
72352: PUSH
72353: LD_VAR 0 2
72357: PUSH
72358: LD_INT 4
72360: MINUS
72361: PUSH
72362: LD_INT 3
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: LIST
72369: PUSH
72370: LD_VAR 0 1
72374: PUSH
72375: LD_INT 4
72377: PLUS
72378: PUSH
72379: LD_VAR 0 2
72383: PUSH
72384: LD_INT 4
72386: PLUS
72387: PUSH
72388: LD_INT 5
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: LIST
72395: PUSH
72396: LD_VAR 0 1
72400: PUSH
72401: LD_INT 3
72403: PLUS
72404: PUSH
72405: LD_VAR 0 2
72409: PUSH
72410: LD_INT 4
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: LIST
72417: PUSH
72418: LD_VAR 0 1
72422: PUSH
72423: LD_VAR 0 2
72427: PUSH
72428: LD_INT 3
72430: PLUS
72431: PUSH
72432: LD_INT 0
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: LIST
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: ST_TO_ADDR
// end ; end ;
72447: GO 72450
72449: POP
// result := list ;
72450: LD_ADDR_VAR 0 4
72454: PUSH
72455: LD_VAR 0 5
72459: ST_TO_ADDR
// end ;
72460: LD_VAR 0 4
72464: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72465: LD_INT 0
72467: PPUSH
72468: PPUSH
72469: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72470: LD_VAR 0 1
72474: NOT
72475: PUSH
72476: LD_VAR 0 2
72480: PUSH
72481: LD_INT 1
72483: PUSH
72484: LD_INT 2
72486: PUSH
72487: LD_INT 3
72489: PUSH
72490: LD_INT 4
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: IN
72499: NOT
72500: OR
72501: IFFALSE 72505
// exit ;
72503: GO 72597
// tmp := [ ] ;
72505: LD_ADDR_VAR 0 5
72509: PUSH
72510: EMPTY
72511: ST_TO_ADDR
// for i in units do
72512: LD_ADDR_VAR 0 4
72516: PUSH
72517: LD_VAR 0 1
72521: PUSH
72522: FOR_IN
72523: IFFALSE 72566
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72525: LD_ADDR_VAR 0 5
72529: PUSH
72530: LD_VAR 0 5
72534: PPUSH
72535: LD_VAR 0 5
72539: PUSH
72540: LD_INT 1
72542: PLUS
72543: PPUSH
72544: LD_VAR 0 4
72548: PPUSH
72549: LD_VAR 0 2
72553: PPUSH
72554: CALL_OW 259
72558: PPUSH
72559: CALL_OW 2
72563: ST_TO_ADDR
72564: GO 72522
72566: POP
72567: POP
// if not tmp then
72568: LD_VAR 0 5
72572: NOT
72573: IFFALSE 72577
// exit ;
72575: GO 72597
// result := SortListByListDesc ( units , tmp ) ;
72577: LD_ADDR_VAR 0 3
72581: PUSH
72582: LD_VAR 0 1
72586: PPUSH
72587: LD_VAR 0 5
72591: PPUSH
72592: CALL_OW 77
72596: ST_TO_ADDR
// end ;
72597: LD_VAR 0 3
72601: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72602: LD_INT 0
72604: PPUSH
72605: PPUSH
72606: PPUSH
// result := false ;
72607: LD_ADDR_VAR 0 3
72611: PUSH
72612: LD_INT 0
72614: ST_TO_ADDR
// x := GetX ( building ) ;
72615: LD_ADDR_VAR 0 4
72619: PUSH
72620: LD_VAR 0 2
72624: PPUSH
72625: CALL_OW 250
72629: ST_TO_ADDR
// y := GetY ( building ) ;
72630: LD_ADDR_VAR 0 5
72634: PUSH
72635: LD_VAR 0 2
72639: PPUSH
72640: CALL_OW 251
72644: ST_TO_ADDR
// if not building or not x or not y then
72645: LD_VAR 0 2
72649: NOT
72650: PUSH
72651: LD_VAR 0 4
72655: NOT
72656: OR
72657: PUSH
72658: LD_VAR 0 5
72662: NOT
72663: OR
72664: IFFALSE 72668
// exit ;
72666: GO 72760
// if GetTaskList ( unit ) then
72668: LD_VAR 0 1
72672: PPUSH
72673: CALL_OW 437
72677: IFFALSE 72760
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72679: LD_STRING e
72681: PUSH
72682: LD_VAR 0 1
72686: PPUSH
72687: CALL_OW 437
72691: PUSH
72692: LD_INT 1
72694: ARRAY
72695: PUSH
72696: LD_INT 1
72698: ARRAY
72699: EQUAL
72700: PUSH
72701: LD_VAR 0 4
72705: PUSH
72706: LD_VAR 0 1
72710: PPUSH
72711: CALL_OW 437
72715: PUSH
72716: LD_INT 1
72718: ARRAY
72719: PUSH
72720: LD_INT 2
72722: ARRAY
72723: EQUAL
72724: AND
72725: PUSH
72726: LD_VAR 0 5
72730: PUSH
72731: LD_VAR 0 1
72735: PPUSH
72736: CALL_OW 437
72740: PUSH
72741: LD_INT 1
72743: ARRAY
72744: PUSH
72745: LD_INT 3
72747: ARRAY
72748: EQUAL
72749: AND
72750: IFFALSE 72760
// result := true end ;
72752: LD_ADDR_VAR 0 3
72756: PUSH
72757: LD_INT 1
72759: ST_TO_ADDR
// end ;
72760: LD_VAR 0 3
72764: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72765: LD_INT 0
72767: PPUSH
// result := false ;
72768: LD_ADDR_VAR 0 4
72772: PUSH
72773: LD_INT 0
72775: ST_TO_ADDR
// if GetTaskList ( unit ) then
72776: LD_VAR 0 1
72780: PPUSH
72781: CALL_OW 437
72785: IFFALSE 72868
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72787: LD_STRING M
72789: PUSH
72790: LD_VAR 0 1
72794: PPUSH
72795: CALL_OW 437
72799: PUSH
72800: LD_INT 1
72802: ARRAY
72803: PUSH
72804: LD_INT 1
72806: ARRAY
72807: EQUAL
72808: PUSH
72809: LD_VAR 0 2
72813: PUSH
72814: LD_VAR 0 1
72818: PPUSH
72819: CALL_OW 437
72823: PUSH
72824: LD_INT 1
72826: ARRAY
72827: PUSH
72828: LD_INT 2
72830: ARRAY
72831: EQUAL
72832: AND
72833: PUSH
72834: LD_VAR 0 3
72838: PUSH
72839: LD_VAR 0 1
72843: PPUSH
72844: CALL_OW 437
72848: PUSH
72849: LD_INT 1
72851: ARRAY
72852: PUSH
72853: LD_INT 3
72855: ARRAY
72856: EQUAL
72857: AND
72858: IFFALSE 72868
// result := true ;
72860: LD_ADDR_VAR 0 4
72864: PUSH
72865: LD_INT 1
72867: ST_TO_ADDR
// end ; end ;
72868: LD_VAR 0 4
72872: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72873: LD_INT 0
72875: PPUSH
72876: PPUSH
72877: PPUSH
72878: PPUSH
// if not unit or not area then
72879: LD_VAR 0 1
72883: NOT
72884: PUSH
72885: LD_VAR 0 2
72889: NOT
72890: OR
72891: IFFALSE 72895
// exit ;
72893: GO 73059
// tmp := AreaToList ( area , i ) ;
72895: LD_ADDR_VAR 0 6
72899: PUSH
72900: LD_VAR 0 2
72904: PPUSH
72905: LD_VAR 0 5
72909: PPUSH
72910: CALL_OW 517
72914: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72915: LD_ADDR_VAR 0 5
72919: PUSH
72920: DOUBLE
72921: LD_INT 1
72923: DEC
72924: ST_TO_ADDR
72925: LD_VAR 0 6
72929: PUSH
72930: LD_INT 1
72932: ARRAY
72933: PUSH
72934: FOR_TO
72935: IFFALSE 73057
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72937: LD_ADDR_VAR 0 7
72941: PUSH
72942: LD_VAR 0 6
72946: PUSH
72947: LD_INT 1
72949: ARRAY
72950: PUSH
72951: LD_VAR 0 5
72955: ARRAY
72956: PUSH
72957: LD_VAR 0 6
72961: PUSH
72962: LD_INT 2
72964: ARRAY
72965: PUSH
72966: LD_VAR 0 5
72970: ARRAY
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72976: LD_VAR 0 7
72980: PUSH
72981: LD_INT 1
72983: ARRAY
72984: PPUSH
72985: LD_VAR 0 7
72989: PUSH
72990: LD_INT 2
72992: ARRAY
72993: PPUSH
72994: CALL_OW 428
72998: PUSH
72999: LD_INT 0
73001: EQUAL
73002: IFFALSE 73055
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73004: LD_VAR 0 1
73008: PPUSH
73009: LD_VAR 0 7
73013: PUSH
73014: LD_INT 1
73016: ARRAY
73017: PPUSH
73018: LD_VAR 0 7
73022: PUSH
73023: LD_INT 2
73025: ARRAY
73026: PPUSH
73027: LD_VAR 0 3
73031: PPUSH
73032: CALL_OW 48
// result := IsPlaced ( unit ) ;
73036: LD_ADDR_VAR 0 4
73040: PUSH
73041: LD_VAR 0 1
73045: PPUSH
73046: CALL_OW 305
73050: ST_TO_ADDR
// exit ;
73051: POP
73052: POP
73053: GO 73059
// end ; end ;
73055: GO 72934
73057: POP
73058: POP
// end ;
73059: LD_VAR 0 4
73063: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73064: LD_INT 0
73066: PPUSH
73067: PPUSH
73068: PPUSH
// if not side or side > 8 then
73069: LD_VAR 0 1
73073: NOT
73074: PUSH
73075: LD_VAR 0 1
73079: PUSH
73080: LD_INT 8
73082: GREATER
73083: OR
73084: IFFALSE 73088
// exit ;
73086: GO 73275
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73088: LD_ADDR_VAR 0 4
73092: PUSH
73093: LD_INT 22
73095: PUSH
73096: LD_VAR 0 1
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: LD_INT 21
73107: PUSH
73108: LD_INT 3
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PPUSH
73119: CALL_OW 69
73123: ST_TO_ADDR
// if not tmp then
73124: LD_VAR 0 4
73128: NOT
73129: IFFALSE 73133
// exit ;
73131: GO 73275
// enable_addtolog := true ;
73133: LD_ADDR_OWVAR 81
73137: PUSH
73138: LD_INT 1
73140: ST_TO_ADDR
// AddToLog ( [ ) ;
73141: LD_STRING [
73143: PPUSH
73144: CALL_OW 561
// for i in tmp do
73148: LD_ADDR_VAR 0 3
73152: PUSH
73153: LD_VAR 0 4
73157: PUSH
73158: FOR_IN
73159: IFFALSE 73266
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73161: LD_STRING [
73163: PUSH
73164: LD_VAR 0 3
73168: PPUSH
73169: CALL_OW 266
73173: STR
73174: PUSH
73175: LD_STRING , 
73177: STR
73178: PUSH
73179: LD_VAR 0 3
73183: PPUSH
73184: CALL_OW 250
73188: STR
73189: PUSH
73190: LD_STRING , 
73192: STR
73193: PUSH
73194: LD_VAR 0 3
73198: PPUSH
73199: CALL_OW 251
73203: STR
73204: PUSH
73205: LD_STRING , 
73207: STR
73208: PUSH
73209: LD_VAR 0 3
73213: PPUSH
73214: CALL_OW 254
73218: STR
73219: PUSH
73220: LD_STRING , 
73222: STR
73223: PUSH
73224: LD_VAR 0 3
73228: PPUSH
73229: LD_INT 1
73231: PPUSH
73232: CALL_OW 268
73236: STR
73237: PUSH
73238: LD_STRING , 
73240: STR
73241: PUSH
73242: LD_VAR 0 3
73246: PPUSH
73247: LD_INT 2
73249: PPUSH
73250: CALL_OW 268
73254: STR
73255: PUSH
73256: LD_STRING ],
73258: STR
73259: PPUSH
73260: CALL_OW 561
// end ;
73264: GO 73158
73266: POP
73267: POP
// AddToLog ( ]; ) ;
73268: LD_STRING ];
73270: PPUSH
73271: CALL_OW 561
// end ;
73275: LD_VAR 0 2
73279: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73280: LD_INT 0
73282: PPUSH
73283: PPUSH
73284: PPUSH
73285: PPUSH
73286: PPUSH
// if not area or not rate or not max then
73287: LD_VAR 0 1
73291: NOT
73292: PUSH
73293: LD_VAR 0 2
73297: NOT
73298: OR
73299: PUSH
73300: LD_VAR 0 4
73304: NOT
73305: OR
73306: IFFALSE 73310
// exit ;
73308: GO 73499
// while 1 do
73310: LD_INT 1
73312: IFFALSE 73499
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73314: LD_ADDR_VAR 0 9
73318: PUSH
73319: LD_VAR 0 1
73323: PPUSH
73324: LD_INT 1
73326: PPUSH
73327: CALL_OW 287
73331: PUSH
73332: LD_INT 10
73334: MUL
73335: ST_TO_ADDR
// r := rate / 10 ;
73336: LD_ADDR_VAR 0 7
73340: PUSH
73341: LD_VAR 0 2
73345: PUSH
73346: LD_INT 10
73348: DIVREAL
73349: ST_TO_ADDR
// time := 1 1$00 ;
73350: LD_ADDR_VAR 0 8
73354: PUSH
73355: LD_INT 2100
73357: ST_TO_ADDR
// if amount < min then
73358: LD_VAR 0 9
73362: PUSH
73363: LD_VAR 0 3
73367: LESS
73368: IFFALSE 73386
// r := r * 2 else
73370: LD_ADDR_VAR 0 7
73374: PUSH
73375: LD_VAR 0 7
73379: PUSH
73380: LD_INT 2
73382: MUL
73383: ST_TO_ADDR
73384: GO 73412
// if amount > max then
73386: LD_VAR 0 9
73390: PUSH
73391: LD_VAR 0 4
73395: GREATER
73396: IFFALSE 73412
// r := r / 2 ;
73398: LD_ADDR_VAR 0 7
73402: PUSH
73403: LD_VAR 0 7
73407: PUSH
73408: LD_INT 2
73410: DIVREAL
73411: ST_TO_ADDR
// time := time / r ;
73412: LD_ADDR_VAR 0 8
73416: PUSH
73417: LD_VAR 0 8
73421: PUSH
73422: LD_VAR 0 7
73426: DIVREAL
73427: ST_TO_ADDR
// if time < 0 then
73428: LD_VAR 0 8
73432: PUSH
73433: LD_INT 0
73435: LESS
73436: IFFALSE 73453
// time := time * - 1 ;
73438: LD_ADDR_VAR 0 8
73442: PUSH
73443: LD_VAR 0 8
73447: PUSH
73448: LD_INT 1
73450: NEG
73451: MUL
73452: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73453: LD_VAR 0 8
73457: PUSH
73458: LD_INT 35
73460: PPUSH
73461: LD_INT 875
73463: PPUSH
73464: CALL_OW 12
73468: PLUS
73469: PPUSH
73470: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73474: LD_INT 1
73476: PPUSH
73477: LD_INT 5
73479: PPUSH
73480: CALL_OW 12
73484: PPUSH
73485: LD_VAR 0 1
73489: PPUSH
73490: LD_INT 1
73492: PPUSH
73493: CALL_OW 55
// end ;
73497: GO 73310
// end ;
73499: LD_VAR 0 5
73503: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73504: LD_INT 0
73506: PPUSH
73507: PPUSH
73508: PPUSH
73509: PPUSH
73510: PPUSH
73511: PPUSH
73512: PPUSH
73513: PPUSH
// if not turrets or not factories then
73514: LD_VAR 0 1
73518: NOT
73519: PUSH
73520: LD_VAR 0 2
73524: NOT
73525: OR
73526: IFFALSE 73530
// exit ;
73528: GO 73837
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73530: LD_ADDR_VAR 0 10
73534: PUSH
73535: LD_INT 5
73537: PUSH
73538: LD_INT 6
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PUSH
73545: LD_INT 2
73547: PUSH
73548: LD_INT 4
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: PUSH
73555: LD_INT 3
73557: PUSH
73558: LD_INT 5
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: LIST
73569: PUSH
73570: LD_INT 24
73572: PUSH
73573: LD_INT 25
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PUSH
73580: LD_INT 23
73582: PUSH
73583: LD_INT 27
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PUSH
73594: LD_INT 42
73596: PUSH
73597: LD_INT 43
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PUSH
73604: LD_INT 44
73606: PUSH
73607: LD_INT 46
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 45
73616: PUSH
73617: LD_INT 47
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: LIST
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: LIST
73633: ST_TO_ADDR
// result := [ ] ;
73634: LD_ADDR_VAR 0 3
73638: PUSH
73639: EMPTY
73640: ST_TO_ADDR
// for i in turrets do
73641: LD_ADDR_VAR 0 4
73645: PUSH
73646: LD_VAR 0 1
73650: PUSH
73651: FOR_IN
73652: IFFALSE 73835
// begin nat := GetNation ( i ) ;
73654: LD_ADDR_VAR 0 7
73658: PUSH
73659: LD_VAR 0 4
73663: PPUSH
73664: CALL_OW 248
73668: ST_TO_ADDR
// weapon := 0 ;
73669: LD_ADDR_VAR 0 8
73673: PUSH
73674: LD_INT 0
73676: ST_TO_ADDR
// if not nat then
73677: LD_VAR 0 7
73681: NOT
73682: IFFALSE 73686
// continue ;
73684: GO 73651
// for j in list [ nat ] do
73686: LD_ADDR_VAR 0 5
73690: PUSH
73691: LD_VAR 0 10
73695: PUSH
73696: LD_VAR 0 7
73700: ARRAY
73701: PUSH
73702: FOR_IN
73703: IFFALSE 73744
// if GetBWeapon ( i ) = j [ 1 ] then
73705: LD_VAR 0 4
73709: PPUSH
73710: CALL_OW 269
73714: PUSH
73715: LD_VAR 0 5
73719: PUSH
73720: LD_INT 1
73722: ARRAY
73723: EQUAL
73724: IFFALSE 73742
// begin weapon := j [ 2 ] ;
73726: LD_ADDR_VAR 0 8
73730: PUSH
73731: LD_VAR 0 5
73735: PUSH
73736: LD_INT 2
73738: ARRAY
73739: ST_TO_ADDR
// break ;
73740: GO 73744
// end ;
73742: GO 73702
73744: POP
73745: POP
// if not weapon then
73746: LD_VAR 0 8
73750: NOT
73751: IFFALSE 73755
// continue ;
73753: GO 73651
// for k in factories do
73755: LD_ADDR_VAR 0 6
73759: PUSH
73760: LD_VAR 0 2
73764: PUSH
73765: FOR_IN
73766: IFFALSE 73831
// begin weapons := AvailableWeaponList ( k ) ;
73768: LD_ADDR_VAR 0 9
73772: PUSH
73773: LD_VAR 0 6
73777: PPUSH
73778: CALL_OW 478
73782: ST_TO_ADDR
// if not weapons then
73783: LD_VAR 0 9
73787: NOT
73788: IFFALSE 73792
// continue ;
73790: GO 73765
// if weapon in weapons then
73792: LD_VAR 0 8
73796: PUSH
73797: LD_VAR 0 9
73801: IN
73802: IFFALSE 73829
// begin result := [ i , weapon ] ;
73804: LD_ADDR_VAR 0 3
73808: PUSH
73809: LD_VAR 0 4
73813: PUSH
73814: LD_VAR 0 8
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: ST_TO_ADDR
// exit ;
73823: POP
73824: POP
73825: POP
73826: POP
73827: GO 73837
// end ; end ;
73829: GO 73765
73831: POP
73832: POP
// end ;
73833: GO 73651
73835: POP
73836: POP
// end ;
73837: LD_VAR 0 3
73841: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73842: LD_INT 0
73844: PPUSH
// if not side or side > 8 then
73845: LD_VAR 0 3
73849: NOT
73850: PUSH
73851: LD_VAR 0 3
73855: PUSH
73856: LD_INT 8
73858: GREATER
73859: OR
73860: IFFALSE 73864
// exit ;
73862: GO 73923
// if not range then
73864: LD_VAR 0 4
73868: NOT
73869: IFFALSE 73880
// range := - 12 ;
73871: LD_ADDR_VAR 0 4
73875: PUSH
73876: LD_INT 12
73878: NEG
73879: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73880: LD_VAR 0 1
73884: PPUSH
73885: LD_VAR 0 2
73889: PPUSH
73890: LD_VAR 0 3
73894: PPUSH
73895: LD_VAR 0 4
73899: PPUSH
73900: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73904: LD_VAR 0 1
73908: PPUSH
73909: LD_VAR 0 2
73913: PPUSH
73914: LD_VAR 0 3
73918: PPUSH
73919: CALL_OW 331
// end ;
73923: LD_VAR 0 5
73927: RET
// export function Video ( mode ) ; begin
73928: LD_INT 0
73930: PPUSH
// ingame_video = mode ;
73931: LD_ADDR_OWVAR 52
73935: PUSH
73936: LD_VAR 0 1
73940: ST_TO_ADDR
// interface_hidden = mode ;
73941: LD_ADDR_OWVAR 54
73945: PUSH
73946: LD_VAR 0 1
73950: ST_TO_ADDR
// end ;
73951: LD_VAR 0 2
73955: RET
// export function Join ( array , element ) ; begin
73956: LD_INT 0
73958: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73959: LD_ADDR_VAR 0 3
73963: PUSH
73964: LD_VAR 0 1
73968: PPUSH
73969: LD_VAR 0 1
73973: PUSH
73974: LD_INT 1
73976: PLUS
73977: PPUSH
73978: LD_VAR 0 2
73982: PPUSH
73983: CALL_OW 1
73987: ST_TO_ADDR
// end ;
73988: LD_VAR 0 3
73992: RET
// export function JoinUnion ( array , element ) ; begin
73993: LD_INT 0
73995: PPUSH
// result := array union element ;
73996: LD_ADDR_VAR 0 3
74000: PUSH
74001: LD_VAR 0 1
74005: PUSH
74006: LD_VAR 0 2
74010: UNION
74011: ST_TO_ADDR
// end ;
74012: LD_VAR 0 3
74016: RET
// export function GetBehemoths ( side ) ; begin
74017: LD_INT 0
74019: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74020: LD_ADDR_VAR 0 2
74024: PUSH
74025: LD_INT 22
74027: PUSH
74028: LD_VAR 0 1
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: PUSH
74037: LD_INT 31
74039: PUSH
74040: LD_INT 25
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: PPUSH
74051: CALL_OW 69
74055: ST_TO_ADDR
// end ;
74056: LD_VAR 0 2
74060: RET
// export function Shuffle ( array ) ; var i , index ; begin
74061: LD_INT 0
74063: PPUSH
74064: PPUSH
74065: PPUSH
// result := [ ] ;
74066: LD_ADDR_VAR 0 2
74070: PUSH
74071: EMPTY
74072: ST_TO_ADDR
// if not array then
74073: LD_VAR 0 1
74077: NOT
74078: IFFALSE 74082
// exit ;
74080: GO 74181
// Randomize ;
74082: CALL_OW 10
// for i = array downto 1 do
74086: LD_ADDR_VAR 0 3
74090: PUSH
74091: DOUBLE
74092: LD_VAR 0 1
74096: INC
74097: ST_TO_ADDR
74098: LD_INT 1
74100: PUSH
74101: FOR_DOWNTO
74102: IFFALSE 74179
// begin index := rand ( 1 , array ) ;
74104: LD_ADDR_VAR 0 4
74108: PUSH
74109: LD_INT 1
74111: PPUSH
74112: LD_VAR 0 1
74116: PPUSH
74117: CALL_OW 12
74121: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74122: LD_ADDR_VAR 0 2
74126: PUSH
74127: LD_VAR 0 2
74131: PPUSH
74132: LD_VAR 0 2
74136: PUSH
74137: LD_INT 1
74139: PLUS
74140: PPUSH
74141: LD_VAR 0 1
74145: PUSH
74146: LD_VAR 0 4
74150: ARRAY
74151: PPUSH
74152: CALL_OW 2
74156: ST_TO_ADDR
// array := Delete ( array , index ) ;
74157: LD_ADDR_VAR 0 1
74161: PUSH
74162: LD_VAR 0 1
74166: PPUSH
74167: LD_VAR 0 4
74171: PPUSH
74172: CALL_OW 3
74176: ST_TO_ADDR
// end ;
74177: GO 74101
74179: POP
74180: POP
// end ;
74181: LD_VAR 0 2
74185: RET
// export function GetBaseMaterials ( base ) ; begin
74186: LD_INT 0
74188: PPUSH
// result := [ 0 , 0 , 0 ] ;
74189: LD_ADDR_VAR 0 2
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: LD_INT 0
74199: PUSH
74200: LD_INT 0
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: LIST
74207: ST_TO_ADDR
// if not base then
74208: LD_VAR 0 1
74212: NOT
74213: IFFALSE 74217
// exit ;
74215: GO 74266
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74217: LD_ADDR_VAR 0 2
74221: PUSH
74222: LD_VAR 0 1
74226: PPUSH
74227: LD_INT 1
74229: PPUSH
74230: CALL_OW 275
74234: PUSH
74235: LD_VAR 0 1
74239: PPUSH
74240: LD_INT 2
74242: PPUSH
74243: CALL_OW 275
74247: PUSH
74248: LD_VAR 0 1
74252: PPUSH
74253: LD_INT 3
74255: PPUSH
74256: CALL_OW 275
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: LIST
74265: ST_TO_ADDR
// end ;
74266: LD_VAR 0 2
74270: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74271: LD_INT 0
74273: PPUSH
74274: PPUSH
// result := array ;
74275: LD_ADDR_VAR 0 3
74279: PUSH
74280: LD_VAR 0 1
74284: ST_TO_ADDR
// if size >= result then
74285: LD_VAR 0 2
74289: PUSH
74290: LD_VAR 0 3
74294: GREATEREQUAL
74295: IFFALSE 74299
// exit ;
74297: GO 74349
// if size then
74299: LD_VAR 0 2
74303: IFFALSE 74349
// for i := array downto size do
74305: LD_ADDR_VAR 0 4
74309: PUSH
74310: DOUBLE
74311: LD_VAR 0 1
74315: INC
74316: ST_TO_ADDR
74317: LD_VAR 0 2
74321: PUSH
74322: FOR_DOWNTO
74323: IFFALSE 74347
// result := Delete ( result , result ) ;
74325: LD_ADDR_VAR 0 3
74329: PUSH
74330: LD_VAR 0 3
74334: PPUSH
74335: LD_VAR 0 3
74339: PPUSH
74340: CALL_OW 3
74344: ST_TO_ADDR
74345: GO 74322
74347: POP
74348: POP
// end ;
74349: LD_VAR 0 3
74353: RET
// export function ComExit ( unit ) ; var tmp ; begin
74354: LD_INT 0
74356: PPUSH
74357: PPUSH
// if not IsInUnit ( unit ) then
74358: LD_VAR 0 1
74362: PPUSH
74363: CALL_OW 310
74367: NOT
74368: IFFALSE 74372
// exit ;
74370: GO 74432
// tmp := IsInUnit ( unit ) ;
74372: LD_ADDR_VAR 0 3
74376: PUSH
74377: LD_VAR 0 1
74381: PPUSH
74382: CALL_OW 310
74386: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74387: LD_VAR 0 3
74391: PPUSH
74392: CALL_OW 247
74396: PUSH
74397: LD_INT 2
74399: EQUAL
74400: IFFALSE 74413
// ComExitVehicle ( unit ) else
74402: LD_VAR 0 1
74406: PPUSH
74407: CALL_OW 121
74411: GO 74422
// ComExitBuilding ( unit ) ;
74413: LD_VAR 0 1
74417: PPUSH
74418: CALL_OW 122
// result := tmp ;
74422: LD_ADDR_VAR 0 2
74426: PUSH
74427: LD_VAR 0 3
74431: ST_TO_ADDR
// end ;
74432: LD_VAR 0 2
74436: RET
// export function ComExitAll ( units ) ; var i ; begin
74437: LD_INT 0
74439: PPUSH
74440: PPUSH
// if not units then
74441: LD_VAR 0 1
74445: NOT
74446: IFFALSE 74450
// exit ;
74448: GO 74476
// for i in units do
74450: LD_ADDR_VAR 0 3
74454: PUSH
74455: LD_VAR 0 1
74459: PUSH
74460: FOR_IN
74461: IFFALSE 74474
// ComExit ( i ) ;
74463: LD_VAR 0 3
74467: PPUSH
74468: CALL 74354 0 1
74472: GO 74460
74474: POP
74475: POP
// end ;
74476: LD_VAR 0 2
74480: RET
// export function ResetHc ; begin
74481: LD_INT 0
74483: PPUSH
// InitHc ;
74484: CALL_OW 19
// hc_importance := 0 ;
74488: LD_ADDR_OWVAR 32
74492: PUSH
74493: LD_INT 0
74495: ST_TO_ADDR
// end ;
74496: LD_VAR 0 1
74500: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74501: LD_INT 0
74503: PPUSH
74504: PPUSH
74505: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74506: LD_ADDR_VAR 0 6
74510: PUSH
74511: LD_VAR 0 1
74515: PUSH
74516: LD_VAR 0 3
74520: PLUS
74521: PUSH
74522: LD_INT 2
74524: DIV
74525: ST_TO_ADDR
// if _x < 0 then
74526: LD_VAR 0 6
74530: PUSH
74531: LD_INT 0
74533: LESS
74534: IFFALSE 74551
// _x := _x * - 1 ;
74536: LD_ADDR_VAR 0 6
74540: PUSH
74541: LD_VAR 0 6
74545: PUSH
74546: LD_INT 1
74548: NEG
74549: MUL
74550: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74551: LD_ADDR_VAR 0 7
74555: PUSH
74556: LD_VAR 0 2
74560: PUSH
74561: LD_VAR 0 4
74565: PLUS
74566: PUSH
74567: LD_INT 2
74569: DIV
74570: ST_TO_ADDR
// if _y < 0 then
74571: LD_VAR 0 7
74575: PUSH
74576: LD_INT 0
74578: LESS
74579: IFFALSE 74596
// _y := _y * - 1 ;
74581: LD_ADDR_VAR 0 7
74585: PUSH
74586: LD_VAR 0 7
74590: PUSH
74591: LD_INT 1
74593: NEG
74594: MUL
74595: ST_TO_ADDR
// result := [ _x , _y ] ;
74596: LD_ADDR_VAR 0 5
74600: PUSH
74601: LD_VAR 0 6
74605: PUSH
74606: LD_VAR 0 7
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: ST_TO_ADDR
// end ;
74615: LD_VAR 0 5
74619: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74620: LD_INT 0
74622: PPUSH
74623: PPUSH
74624: PPUSH
74625: PPUSH
// task := GetTaskList ( unit ) ;
74626: LD_ADDR_VAR 0 7
74630: PUSH
74631: LD_VAR 0 1
74635: PPUSH
74636: CALL_OW 437
74640: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74641: LD_VAR 0 7
74645: NOT
74646: PUSH
74647: LD_VAR 0 1
74651: PPUSH
74652: LD_VAR 0 2
74656: PPUSH
74657: CALL_OW 308
74661: NOT
74662: AND
74663: IFFALSE 74667
// exit ;
74665: GO 74785
// if IsInArea ( unit , area ) then
74667: LD_VAR 0 1
74671: PPUSH
74672: LD_VAR 0 2
74676: PPUSH
74677: CALL_OW 308
74681: IFFALSE 74699
// begin ComMoveToArea ( unit , goAway ) ;
74683: LD_VAR 0 1
74687: PPUSH
74688: LD_VAR 0 3
74692: PPUSH
74693: CALL_OW 113
// exit ;
74697: GO 74785
// end ; if task [ 1 ] [ 1 ] <> M then
74699: LD_VAR 0 7
74703: PUSH
74704: LD_INT 1
74706: ARRAY
74707: PUSH
74708: LD_INT 1
74710: ARRAY
74711: PUSH
74712: LD_STRING M
74714: NONEQUAL
74715: IFFALSE 74719
// exit ;
74717: GO 74785
// x := task [ 1 ] [ 2 ] ;
74719: LD_ADDR_VAR 0 5
74723: PUSH
74724: LD_VAR 0 7
74728: PUSH
74729: LD_INT 1
74731: ARRAY
74732: PUSH
74733: LD_INT 2
74735: ARRAY
74736: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74737: LD_ADDR_VAR 0 6
74741: PUSH
74742: LD_VAR 0 7
74746: PUSH
74747: LD_INT 1
74749: ARRAY
74750: PUSH
74751: LD_INT 3
74753: ARRAY
74754: ST_TO_ADDR
// if InArea ( x , y , area ) then
74755: LD_VAR 0 5
74759: PPUSH
74760: LD_VAR 0 6
74764: PPUSH
74765: LD_VAR 0 2
74769: PPUSH
74770: CALL_OW 309
74774: IFFALSE 74785
// ComStop ( unit ) ;
74776: LD_VAR 0 1
74780: PPUSH
74781: CALL_OW 141
// end ;
74785: LD_VAR 0 4
74789: RET
// export function Abs ( value ) ; begin
74790: LD_INT 0
74792: PPUSH
// result := value ;
74793: LD_ADDR_VAR 0 2
74797: PUSH
74798: LD_VAR 0 1
74802: ST_TO_ADDR
// if value < 0 then
74803: LD_VAR 0 1
74807: PUSH
74808: LD_INT 0
74810: LESS
74811: IFFALSE 74828
// result := value * - 1 ;
74813: LD_ADDR_VAR 0 2
74817: PUSH
74818: LD_VAR 0 1
74822: PUSH
74823: LD_INT 1
74825: NEG
74826: MUL
74827: ST_TO_ADDR
// end ;
74828: LD_VAR 0 2
74832: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74833: LD_INT 0
74835: PPUSH
74836: PPUSH
74837: PPUSH
74838: PPUSH
74839: PPUSH
74840: PPUSH
74841: PPUSH
74842: PPUSH
// if not unit or not building then
74843: LD_VAR 0 1
74847: NOT
74848: PUSH
74849: LD_VAR 0 2
74853: NOT
74854: OR
74855: IFFALSE 74859
// exit ;
74857: GO 75085
// x := GetX ( building ) ;
74859: LD_ADDR_VAR 0 4
74863: PUSH
74864: LD_VAR 0 2
74868: PPUSH
74869: CALL_OW 250
74873: ST_TO_ADDR
// y := GetY ( building ) ;
74874: LD_ADDR_VAR 0 6
74878: PUSH
74879: LD_VAR 0 2
74883: PPUSH
74884: CALL_OW 251
74888: ST_TO_ADDR
// d := GetDir ( building ) ;
74889: LD_ADDR_VAR 0 8
74893: PUSH
74894: LD_VAR 0 2
74898: PPUSH
74899: CALL_OW 254
74903: ST_TO_ADDR
// r := 4 ;
74904: LD_ADDR_VAR 0 9
74908: PUSH
74909: LD_INT 4
74911: ST_TO_ADDR
// for i := 1 to 5 do
74912: LD_ADDR_VAR 0 10
74916: PUSH
74917: DOUBLE
74918: LD_INT 1
74920: DEC
74921: ST_TO_ADDR
74922: LD_INT 5
74924: PUSH
74925: FOR_TO
74926: IFFALSE 75083
// begin _x := ShiftX ( x , d , r + i ) ;
74928: LD_ADDR_VAR 0 5
74932: PUSH
74933: LD_VAR 0 4
74937: PPUSH
74938: LD_VAR 0 8
74942: PPUSH
74943: LD_VAR 0 9
74947: PUSH
74948: LD_VAR 0 10
74952: PLUS
74953: PPUSH
74954: CALL_OW 272
74958: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74959: LD_ADDR_VAR 0 7
74963: PUSH
74964: LD_VAR 0 6
74968: PPUSH
74969: LD_VAR 0 8
74973: PPUSH
74974: LD_VAR 0 9
74978: PUSH
74979: LD_VAR 0 10
74983: PLUS
74984: PPUSH
74985: CALL_OW 273
74989: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74990: LD_VAR 0 5
74994: PPUSH
74995: LD_VAR 0 7
74999: PPUSH
75000: CALL_OW 488
75004: PUSH
75005: LD_VAR 0 5
75009: PPUSH
75010: LD_VAR 0 7
75014: PPUSH
75015: CALL_OW 428
75019: PPUSH
75020: CALL_OW 247
75024: PUSH
75025: LD_INT 3
75027: PUSH
75028: LD_INT 2
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: IN
75035: NOT
75036: AND
75037: IFFALSE 75081
// begin ComMoveXY ( unit , _x , _y ) ;
75039: LD_VAR 0 1
75043: PPUSH
75044: LD_VAR 0 5
75048: PPUSH
75049: LD_VAR 0 7
75053: PPUSH
75054: CALL_OW 111
// result := [ _x , _y ] ;
75058: LD_ADDR_VAR 0 3
75062: PUSH
75063: LD_VAR 0 5
75067: PUSH
75068: LD_VAR 0 7
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: ST_TO_ADDR
// exit ;
75077: POP
75078: POP
75079: GO 75085
// end ; end ;
75081: GO 74925
75083: POP
75084: POP
// end ;
75085: LD_VAR 0 3
75089: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75090: LD_INT 0
75092: PPUSH
75093: PPUSH
75094: PPUSH
// result := 0 ;
75095: LD_ADDR_VAR 0 3
75099: PUSH
75100: LD_INT 0
75102: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75103: LD_VAR 0 1
75107: PUSH
75108: LD_INT 0
75110: LESS
75111: PUSH
75112: LD_VAR 0 1
75116: PUSH
75117: LD_INT 8
75119: GREATER
75120: OR
75121: PUSH
75122: LD_VAR 0 2
75126: PUSH
75127: LD_INT 0
75129: LESS
75130: OR
75131: PUSH
75132: LD_VAR 0 2
75136: PUSH
75137: LD_INT 8
75139: GREATER
75140: OR
75141: IFFALSE 75145
// exit ;
75143: GO 75220
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75145: LD_ADDR_VAR 0 4
75149: PUSH
75150: LD_INT 22
75152: PUSH
75153: LD_VAR 0 2
75157: PUSH
75158: EMPTY
75159: LIST
75160: LIST
75161: PPUSH
75162: CALL_OW 69
75166: PUSH
75167: FOR_IN
75168: IFFALSE 75218
// begin un := UnitShoot ( i ) ;
75170: LD_ADDR_VAR 0 5
75174: PUSH
75175: LD_VAR 0 4
75179: PPUSH
75180: CALL_OW 504
75184: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75185: LD_VAR 0 5
75189: PPUSH
75190: CALL_OW 255
75194: PUSH
75195: LD_VAR 0 1
75199: EQUAL
75200: IFFALSE 75216
// begin result := un ;
75202: LD_ADDR_VAR 0 3
75206: PUSH
75207: LD_VAR 0 5
75211: ST_TO_ADDR
// exit ;
75212: POP
75213: POP
75214: GO 75220
// end ; end ;
75216: GO 75167
75218: POP
75219: POP
// end ;
75220: LD_VAR 0 3
75224: RET
// export function GetCargoBay ( units ) ; begin
75225: LD_INT 0
75227: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75228: LD_ADDR_VAR 0 2
75232: PUSH
75233: LD_VAR 0 1
75237: PPUSH
75238: LD_INT 2
75240: PUSH
75241: LD_INT 34
75243: PUSH
75244: LD_INT 12
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PUSH
75251: LD_INT 34
75253: PUSH
75254: LD_INT 51
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PUSH
75261: LD_INT 34
75263: PUSH
75264: LD_INT 32
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: LD_INT 34
75273: PUSH
75274: LD_INT 89
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: PPUSH
75288: CALL_OW 72
75292: ST_TO_ADDR
// end ;
75293: LD_VAR 0 2
75297: RET
// export function Negate ( value ) ; begin
75298: LD_INT 0
75300: PPUSH
// result := not value ;
75301: LD_ADDR_VAR 0 2
75305: PUSH
75306: LD_VAR 0 1
75310: NOT
75311: ST_TO_ADDR
// end ;
75312: LD_VAR 0 2
75316: RET
// export function Inc ( value ) ; begin
75317: LD_INT 0
75319: PPUSH
// result := value + 1 ;
75320: LD_ADDR_VAR 0 2
75324: PUSH
75325: LD_VAR 0 1
75329: PUSH
75330: LD_INT 1
75332: PLUS
75333: ST_TO_ADDR
// end ;
75334: LD_VAR 0 2
75338: RET
// export function Dec ( value ) ; begin
75339: LD_INT 0
75341: PPUSH
// result := value - 1 ;
75342: LD_ADDR_VAR 0 2
75346: PUSH
75347: LD_VAR 0 1
75351: PUSH
75352: LD_INT 1
75354: MINUS
75355: ST_TO_ADDR
// end ;
75356: LD_VAR 0 2
75360: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75361: LD_INT 0
75363: PPUSH
75364: PPUSH
75365: PPUSH
75366: PPUSH
75367: PPUSH
75368: PPUSH
75369: PPUSH
75370: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75371: LD_VAR 0 1
75375: PPUSH
75376: LD_VAR 0 2
75380: PPUSH
75381: CALL_OW 488
75385: NOT
75386: PUSH
75387: LD_VAR 0 3
75391: PPUSH
75392: LD_VAR 0 4
75396: PPUSH
75397: CALL_OW 488
75401: NOT
75402: OR
75403: IFFALSE 75416
// begin result := - 1 ;
75405: LD_ADDR_VAR 0 5
75409: PUSH
75410: LD_INT 1
75412: NEG
75413: ST_TO_ADDR
// exit ;
75414: GO 75651
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75416: LD_ADDR_VAR 0 12
75420: PUSH
75421: LD_VAR 0 1
75425: PPUSH
75426: LD_VAR 0 2
75430: PPUSH
75431: LD_VAR 0 3
75435: PPUSH
75436: LD_VAR 0 4
75440: PPUSH
75441: CALL 74501 0 4
75445: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75446: LD_ADDR_VAR 0 11
75450: PUSH
75451: LD_VAR 0 1
75455: PPUSH
75456: LD_VAR 0 2
75460: PPUSH
75461: LD_VAR 0 12
75465: PUSH
75466: LD_INT 1
75468: ARRAY
75469: PPUSH
75470: LD_VAR 0 12
75474: PUSH
75475: LD_INT 2
75477: ARRAY
75478: PPUSH
75479: CALL_OW 298
75483: ST_TO_ADDR
// distance := 9999 ;
75484: LD_ADDR_VAR 0 10
75488: PUSH
75489: LD_INT 9999
75491: ST_TO_ADDR
// for i := 0 to 5 do
75492: LD_ADDR_VAR 0 6
75496: PUSH
75497: DOUBLE
75498: LD_INT 0
75500: DEC
75501: ST_TO_ADDR
75502: LD_INT 5
75504: PUSH
75505: FOR_TO
75506: IFFALSE 75649
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75508: LD_ADDR_VAR 0 7
75512: PUSH
75513: LD_VAR 0 1
75517: PPUSH
75518: LD_VAR 0 6
75522: PPUSH
75523: LD_VAR 0 11
75527: PPUSH
75528: CALL_OW 272
75532: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75533: LD_ADDR_VAR 0 8
75537: PUSH
75538: LD_VAR 0 2
75542: PPUSH
75543: LD_VAR 0 6
75547: PPUSH
75548: LD_VAR 0 11
75552: PPUSH
75553: CALL_OW 273
75557: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75558: LD_VAR 0 7
75562: PPUSH
75563: LD_VAR 0 8
75567: PPUSH
75568: CALL_OW 488
75572: NOT
75573: IFFALSE 75577
// continue ;
75575: GO 75505
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75577: LD_ADDR_VAR 0 9
75581: PUSH
75582: LD_VAR 0 12
75586: PUSH
75587: LD_INT 1
75589: ARRAY
75590: PPUSH
75591: LD_VAR 0 12
75595: PUSH
75596: LD_INT 2
75598: ARRAY
75599: PPUSH
75600: LD_VAR 0 7
75604: PPUSH
75605: LD_VAR 0 8
75609: PPUSH
75610: CALL_OW 298
75614: ST_TO_ADDR
// if tmp < distance then
75615: LD_VAR 0 9
75619: PUSH
75620: LD_VAR 0 10
75624: LESS
75625: IFFALSE 75647
// begin result := i ;
75627: LD_ADDR_VAR 0 5
75631: PUSH
75632: LD_VAR 0 6
75636: ST_TO_ADDR
// distance := tmp ;
75637: LD_ADDR_VAR 0 10
75641: PUSH
75642: LD_VAR 0 9
75646: ST_TO_ADDR
// end ; end ;
75647: GO 75505
75649: POP
75650: POP
// end ;
75651: LD_VAR 0 5
75655: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75656: LD_INT 0
75658: PPUSH
75659: PPUSH
// if not driver or not IsInUnit ( driver ) then
75660: LD_VAR 0 1
75664: NOT
75665: PUSH
75666: LD_VAR 0 1
75670: PPUSH
75671: CALL_OW 310
75675: NOT
75676: OR
75677: IFFALSE 75681
// exit ;
75679: GO 75771
// vehicle := IsInUnit ( driver ) ;
75681: LD_ADDR_VAR 0 3
75685: PUSH
75686: LD_VAR 0 1
75690: PPUSH
75691: CALL_OW 310
75695: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75696: LD_VAR 0 1
75700: PPUSH
75701: LD_STRING \
75703: PUSH
75704: LD_INT 0
75706: PUSH
75707: LD_INT 0
75709: PUSH
75710: LD_INT 0
75712: PUSH
75713: LD_INT 0
75715: PUSH
75716: LD_INT 0
75718: PUSH
75719: LD_INT 0
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: LIST
75726: LIST
75727: LIST
75728: LIST
75729: LIST
75730: PUSH
75731: LD_STRING E
75733: PUSH
75734: LD_INT 0
75736: PUSH
75737: LD_INT 0
75739: PUSH
75740: LD_VAR 0 3
75744: PUSH
75745: LD_INT 0
75747: PUSH
75748: LD_INT 0
75750: PUSH
75751: LD_INT 0
75753: PUSH
75754: EMPTY
75755: LIST
75756: LIST
75757: LIST
75758: LIST
75759: LIST
75760: LIST
75761: LIST
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PPUSH
75767: CALL_OW 446
// end ;
75771: LD_VAR 0 2
75775: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75776: LD_INT 0
75778: PPUSH
75779: PPUSH
// if not driver or not IsInUnit ( driver ) then
75780: LD_VAR 0 1
75784: NOT
75785: PUSH
75786: LD_VAR 0 1
75790: PPUSH
75791: CALL_OW 310
75795: NOT
75796: OR
75797: IFFALSE 75801
// exit ;
75799: GO 75891
// vehicle := IsInUnit ( driver ) ;
75801: LD_ADDR_VAR 0 3
75805: PUSH
75806: LD_VAR 0 1
75810: PPUSH
75811: CALL_OW 310
75815: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75816: LD_VAR 0 1
75820: PPUSH
75821: LD_STRING \
75823: PUSH
75824: LD_INT 0
75826: PUSH
75827: LD_INT 0
75829: PUSH
75830: LD_INT 0
75832: PUSH
75833: LD_INT 0
75835: PUSH
75836: LD_INT 0
75838: PUSH
75839: LD_INT 0
75841: PUSH
75842: EMPTY
75843: LIST
75844: LIST
75845: LIST
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: PUSH
75851: LD_STRING E
75853: PUSH
75854: LD_INT 0
75856: PUSH
75857: LD_INT 0
75859: PUSH
75860: LD_VAR 0 3
75864: PUSH
75865: LD_INT 0
75867: PUSH
75868: LD_INT 0
75870: PUSH
75871: LD_INT 0
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: PPUSH
75887: CALL_OW 447
// end ;
75891: LD_VAR 0 2
75895: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75896: LD_INT 0
75898: PPUSH
75899: PPUSH
75900: PPUSH
// tmp := [ ] ;
75901: LD_ADDR_VAR 0 5
75905: PUSH
75906: EMPTY
75907: ST_TO_ADDR
// for i in units do
75908: LD_ADDR_VAR 0 4
75912: PUSH
75913: LD_VAR 0 1
75917: PUSH
75918: FOR_IN
75919: IFFALSE 75957
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75921: LD_ADDR_VAR 0 5
75925: PUSH
75926: LD_VAR 0 5
75930: PPUSH
75931: LD_VAR 0 5
75935: PUSH
75936: LD_INT 1
75938: PLUS
75939: PPUSH
75940: LD_VAR 0 4
75944: PPUSH
75945: CALL_OW 256
75949: PPUSH
75950: CALL_OW 2
75954: ST_TO_ADDR
75955: GO 75918
75957: POP
75958: POP
// if not tmp then
75959: LD_VAR 0 5
75963: NOT
75964: IFFALSE 75968
// exit ;
75966: GO 76016
// if asc then
75968: LD_VAR 0 2
75972: IFFALSE 75996
// result := SortListByListAsc ( units , tmp ) else
75974: LD_ADDR_VAR 0 3
75978: PUSH
75979: LD_VAR 0 1
75983: PPUSH
75984: LD_VAR 0 5
75988: PPUSH
75989: CALL_OW 76
75993: ST_TO_ADDR
75994: GO 76016
// result := SortListByListDesc ( units , tmp ) ;
75996: LD_ADDR_VAR 0 3
76000: PUSH
76001: LD_VAR 0 1
76005: PPUSH
76006: LD_VAR 0 5
76010: PPUSH
76011: CALL_OW 77
76015: ST_TO_ADDR
// end ;
76016: LD_VAR 0 3
76020: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76021: LD_INT 0
76023: PPUSH
76024: PPUSH
// task := GetTaskList ( mech ) ;
76025: LD_ADDR_VAR 0 4
76029: PUSH
76030: LD_VAR 0 1
76034: PPUSH
76035: CALL_OW 437
76039: ST_TO_ADDR
// if not task then
76040: LD_VAR 0 4
76044: NOT
76045: IFFALSE 76049
// exit ;
76047: GO 76091
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76049: LD_ADDR_VAR 0 3
76053: PUSH
76054: LD_VAR 0 4
76058: PUSH
76059: LD_INT 1
76061: ARRAY
76062: PUSH
76063: LD_INT 1
76065: ARRAY
76066: PUSH
76067: LD_STRING r
76069: EQUAL
76070: PUSH
76071: LD_VAR 0 4
76075: PUSH
76076: LD_INT 1
76078: ARRAY
76079: PUSH
76080: LD_INT 4
76082: ARRAY
76083: PUSH
76084: LD_VAR 0 2
76088: EQUAL
76089: AND
76090: ST_TO_ADDR
// end ;
76091: LD_VAR 0 3
76095: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76096: LD_INT 0
76098: PPUSH
// SetDir ( unit , d ) ;
76099: LD_VAR 0 1
76103: PPUSH
76104: LD_VAR 0 4
76108: PPUSH
76109: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76113: LD_VAR 0 1
76117: PPUSH
76118: LD_VAR 0 2
76122: PPUSH
76123: LD_VAR 0 3
76127: PPUSH
76128: LD_VAR 0 5
76132: PPUSH
76133: CALL_OW 48
// end ;
76137: LD_VAR 0 6
76141: RET
// export function ToNaturalNumber ( number ) ; begin
76142: LD_INT 0
76144: PPUSH
// result := number div 1 ;
76145: LD_ADDR_VAR 0 2
76149: PUSH
76150: LD_VAR 0 1
76154: PUSH
76155: LD_INT 1
76157: DIV
76158: ST_TO_ADDR
// if number < 0 then
76159: LD_VAR 0 1
76163: PUSH
76164: LD_INT 0
76166: LESS
76167: IFFALSE 76177
// result := 0 ;
76169: LD_ADDR_VAR 0 2
76173: PUSH
76174: LD_INT 0
76176: ST_TO_ADDR
// end ;
76177: LD_VAR 0 2
76181: RET
// export function SortByClass ( units , class ) ; var un ; begin
76182: LD_INT 0
76184: PPUSH
76185: PPUSH
// if not units or not class then
76186: LD_VAR 0 1
76190: NOT
76191: PUSH
76192: LD_VAR 0 2
76196: NOT
76197: OR
76198: IFFALSE 76202
// exit ;
76200: GO 76297
// result := [ ] ;
76202: LD_ADDR_VAR 0 3
76206: PUSH
76207: EMPTY
76208: ST_TO_ADDR
// for un in units do
76209: LD_ADDR_VAR 0 4
76213: PUSH
76214: LD_VAR 0 1
76218: PUSH
76219: FOR_IN
76220: IFFALSE 76295
// if GetClass ( un ) = class then
76222: LD_VAR 0 4
76226: PPUSH
76227: CALL_OW 257
76231: PUSH
76232: LD_VAR 0 2
76236: EQUAL
76237: IFFALSE 76264
// result := Insert ( result , 1 , un ) else
76239: LD_ADDR_VAR 0 3
76243: PUSH
76244: LD_VAR 0 3
76248: PPUSH
76249: LD_INT 1
76251: PPUSH
76252: LD_VAR 0 4
76256: PPUSH
76257: CALL_OW 2
76261: ST_TO_ADDR
76262: GO 76293
// result := Replace ( result , result + 1 , un ) ;
76264: LD_ADDR_VAR 0 3
76268: PUSH
76269: LD_VAR 0 3
76273: PPUSH
76274: LD_VAR 0 3
76278: PUSH
76279: LD_INT 1
76281: PLUS
76282: PPUSH
76283: LD_VAR 0 4
76287: PPUSH
76288: CALL_OW 1
76292: ST_TO_ADDR
76293: GO 76219
76295: POP
76296: POP
// end ;
76297: LD_VAR 0 3
76301: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76302: LD_INT 0
76304: PPUSH
76305: PPUSH
76306: PPUSH
76307: PPUSH
76308: PPUSH
76309: PPUSH
76310: PPUSH
// result := [ ] ;
76311: LD_ADDR_VAR 0 4
76315: PUSH
76316: EMPTY
76317: ST_TO_ADDR
// if x - r < 0 then
76318: LD_VAR 0 1
76322: PUSH
76323: LD_VAR 0 3
76327: MINUS
76328: PUSH
76329: LD_INT 0
76331: LESS
76332: IFFALSE 76344
// min_x := 0 else
76334: LD_ADDR_VAR 0 8
76338: PUSH
76339: LD_INT 0
76341: ST_TO_ADDR
76342: GO 76360
// min_x := x - r ;
76344: LD_ADDR_VAR 0 8
76348: PUSH
76349: LD_VAR 0 1
76353: PUSH
76354: LD_VAR 0 3
76358: MINUS
76359: ST_TO_ADDR
// if y - r < 0 then
76360: LD_VAR 0 2
76364: PUSH
76365: LD_VAR 0 3
76369: MINUS
76370: PUSH
76371: LD_INT 0
76373: LESS
76374: IFFALSE 76386
// min_y := 0 else
76376: LD_ADDR_VAR 0 7
76380: PUSH
76381: LD_INT 0
76383: ST_TO_ADDR
76384: GO 76402
// min_y := y - r ;
76386: LD_ADDR_VAR 0 7
76390: PUSH
76391: LD_VAR 0 2
76395: PUSH
76396: LD_VAR 0 3
76400: MINUS
76401: ST_TO_ADDR
// max_x := x + r ;
76402: LD_ADDR_VAR 0 9
76406: PUSH
76407: LD_VAR 0 1
76411: PUSH
76412: LD_VAR 0 3
76416: PLUS
76417: ST_TO_ADDR
// max_y := y + r ;
76418: LD_ADDR_VAR 0 10
76422: PUSH
76423: LD_VAR 0 2
76427: PUSH
76428: LD_VAR 0 3
76432: PLUS
76433: ST_TO_ADDR
// for _x = min_x to max_x do
76434: LD_ADDR_VAR 0 5
76438: PUSH
76439: DOUBLE
76440: LD_VAR 0 8
76444: DEC
76445: ST_TO_ADDR
76446: LD_VAR 0 9
76450: PUSH
76451: FOR_TO
76452: IFFALSE 76553
// for _y = min_y to max_y do
76454: LD_ADDR_VAR 0 6
76458: PUSH
76459: DOUBLE
76460: LD_VAR 0 7
76464: DEC
76465: ST_TO_ADDR
76466: LD_VAR 0 10
76470: PUSH
76471: FOR_TO
76472: IFFALSE 76549
// begin if not ValidHex ( _x , _y ) then
76474: LD_VAR 0 5
76478: PPUSH
76479: LD_VAR 0 6
76483: PPUSH
76484: CALL_OW 488
76488: NOT
76489: IFFALSE 76493
// continue ;
76491: GO 76471
// if GetResourceTypeXY ( _x , _y ) then
76493: LD_VAR 0 5
76497: PPUSH
76498: LD_VAR 0 6
76502: PPUSH
76503: CALL_OW 283
76507: IFFALSE 76547
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76509: LD_ADDR_VAR 0 4
76513: PUSH
76514: LD_VAR 0 4
76518: PPUSH
76519: LD_VAR 0 4
76523: PUSH
76524: LD_INT 1
76526: PLUS
76527: PPUSH
76528: LD_VAR 0 5
76532: PUSH
76533: LD_VAR 0 6
76537: PUSH
76538: EMPTY
76539: LIST
76540: LIST
76541: PPUSH
76542: CALL_OW 1
76546: ST_TO_ADDR
// end ;
76547: GO 76471
76549: POP
76550: POP
76551: GO 76451
76553: POP
76554: POP
// end ;
76555: LD_VAR 0 4
76559: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76560: LD_INT 0
76562: PPUSH
76563: PPUSH
76564: PPUSH
76565: PPUSH
76566: PPUSH
76567: PPUSH
76568: PPUSH
76569: PPUSH
// if not units then
76570: LD_VAR 0 1
76574: NOT
76575: IFFALSE 76579
// exit ;
76577: GO 77103
// result := UnitFilter ( units , [ f_ok ] ) ;
76579: LD_ADDR_VAR 0 3
76583: PUSH
76584: LD_VAR 0 1
76588: PPUSH
76589: LD_INT 50
76591: PUSH
76592: EMPTY
76593: LIST
76594: PPUSH
76595: CALL_OW 72
76599: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76600: LD_ADDR_VAR 0 8
76604: PUSH
76605: LD_VAR 0 1
76609: PUSH
76610: LD_INT 1
76612: ARRAY
76613: PPUSH
76614: CALL_OW 255
76618: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76619: LD_ADDR_VAR 0 10
76623: PUSH
76624: LD_INT 29
76626: PUSH
76627: LD_INT 91
76629: PUSH
76630: LD_INT 49
76632: PUSH
76633: EMPTY
76634: LIST
76635: LIST
76636: LIST
76637: ST_TO_ADDR
// if not result then
76638: LD_VAR 0 3
76642: NOT
76643: IFFALSE 76647
// exit ;
76645: GO 77103
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76647: LD_ADDR_VAR 0 5
76651: PUSH
76652: LD_INT 81
76654: PUSH
76655: LD_VAR 0 8
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PPUSH
76664: CALL_OW 69
76668: ST_TO_ADDR
// for i in result do
76669: LD_ADDR_VAR 0 4
76673: PUSH
76674: LD_VAR 0 3
76678: PUSH
76679: FOR_IN
76680: IFFALSE 77101
// begin tag := GetTag ( i ) + 1 ;
76682: LD_ADDR_VAR 0 9
76686: PUSH
76687: LD_VAR 0 4
76691: PPUSH
76692: CALL_OW 110
76696: PUSH
76697: LD_INT 1
76699: PLUS
76700: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76701: LD_ADDR_VAR 0 7
76705: PUSH
76706: LD_VAR 0 4
76710: PPUSH
76711: CALL_OW 250
76715: PPUSH
76716: LD_VAR 0 4
76720: PPUSH
76721: CALL_OW 251
76725: PPUSH
76726: LD_INT 6
76728: PPUSH
76729: CALL 76302 0 3
76733: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76734: LD_VAR 0 4
76738: PPUSH
76739: CALL_OW 247
76743: PUSH
76744: LD_INT 2
76746: EQUAL
76747: PUSH
76748: LD_VAR 0 7
76752: AND
76753: PUSH
76754: LD_VAR 0 4
76758: PPUSH
76759: CALL_OW 264
76763: PUSH
76764: LD_VAR 0 10
76768: IN
76769: NOT
76770: AND
76771: IFFALSE 76810
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76773: LD_VAR 0 4
76777: PPUSH
76778: LD_VAR 0 7
76782: PUSH
76783: LD_INT 1
76785: ARRAY
76786: PUSH
76787: LD_INT 1
76789: ARRAY
76790: PPUSH
76791: LD_VAR 0 7
76795: PUSH
76796: LD_INT 1
76798: ARRAY
76799: PUSH
76800: LD_INT 2
76802: ARRAY
76803: PPUSH
76804: CALL_OW 116
76808: GO 77099
// if path > tag then
76810: LD_VAR 0 2
76814: PUSH
76815: LD_VAR 0 9
76819: GREATER
76820: IFFALSE 77028
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76822: LD_ADDR_VAR 0 6
76826: PUSH
76827: LD_VAR 0 5
76831: PPUSH
76832: LD_INT 91
76834: PUSH
76835: LD_VAR 0 4
76839: PUSH
76840: LD_INT 8
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: LIST
76847: PPUSH
76848: CALL_OW 72
76852: ST_TO_ADDR
// if nearEnemy then
76853: LD_VAR 0 6
76857: IFFALSE 76926
// begin if GetWeapon ( i ) = ru_time_lapser then
76859: LD_VAR 0 4
76863: PPUSH
76864: CALL_OW 264
76868: PUSH
76869: LD_INT 49
76871: EQUAL
76872: IFFALSE 76900
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76874: LD_VAR 0 4
76878: PPUSH
76879: LD_VAR 0 6
76883: PPUSH
76884: LD_VAR 0 4
76888: PPUSH
76889: CALL_OW 74
76893: PPUSH
76894: CALL_OW 112
76898: GO 76924
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76900: LD_VAR 0 4
76904: PPUSH
76905: LD_VAR 0 6
76909: PPUSH
76910: LD_VAR 0 4
76914: PPUSH
76915: CALL_OW 74
76919: PPUSH
76920: CALL_OW 115
// end else
76924: GO 77026
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76926: LD_VAR 0 4
76930: PPUSH
76931: LD_VAR 0 2
76935: PUSH
76936: LD_VAR 0 9
76940: ARRAY
76941: PUSH
76942: LD_INT 1
76944: ARRAY
76945: PPUSH
76946: LD_VAR 0 2
76950: PUSH
76951: LD_VAR 0 9
76955: ARRAY
76956: PUSH
76957: LD_INT 2
76959: ARRAY
76960: PPUSH
76961: CALL_OW 297
76965: PUSH
76966: LD_INT 6
76968: GREATER
76969: IFFALSE 77012
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76971: LD_VAR 0 4
76975: PPUSH
76976: LD_VAR 0 2
76980: PUSH
76981: LD_VAR 0 9
76985: ARRAY
76986: PUSH
76987: LD_INT 1
76989: ARRAY
76990: PPUSH
76991: LD_VAR 0 2
76995: PUSH
76996: LD_VAR 0 9
77000: ARRAY
77001: PUSH
77002: LD_INT 2
77004: ARRAY
77005: PPUSH
77006: CALL_OW 114
77010: GO 77026
// SetTag ( i , tag ) ;
77012: LD_VAR 0 4
77016: PPUSH
77017: LD_VAR 0 9
77021: PPUSH
77022: CALL_OW 109
// end else
77026: GO 77099
// if enemy then
77028: LD_VAR 0 5
77032: IFFALSE 77099
// begin if GetWeapon ( i ) = ru_time_lapser then
77034: LD_VAR 0 4
77038: PPUSH
77039: CALL_OW 264
77043: PUSH
77044: LD_INT 49
77046: EQUAL
77047: IFFALSE 77075
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77049: LD_VAR 0 4
77053: PPUSH
77054: LD_VAR 0 5
77058: PPUSH
77059: LD_VAR 0 4
77063: PPUSH
77064: CALL_OW 74
77068: PPUSH
77069: CALL_OW 112
77073: GO 77099
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77075: LD_VAR 0 4
77079: PPUSH
77080: LD_VAR 0 5
77084: PPUSH
77085: LD_VAR 0 4
77089: PPUSH
77090: CALL_OW 74
77094: PPUSH
77095: CALL_OW 115
// end ; end ;
77099: GO 76679
77101: POP
77102: POP
// end ;
77103: LD_VAR 0 3
77107: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77108: LD_INT 0
77110: PPUSH
77111: PPUSH
77112: PPUSH
// if not unit or IsInUnit ( unit ) then
77113: LD_VAR 0 1
77117: NOT
77118: PUSH
77119: LD_VAR 0 1
77123: PPUSH
77124: CALL_OW 310
77128: OR
77129: IFFALSE 77133
// exit ;
77131: GO 77224
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77133: LD_ADDR_VAR 0 4
77137: PUSH
77138: LD_VAR 0 1
77142: PPUSH
77143: CALL_OW 250
77147: PPUSH
77148: LD_VAR 0 2
77152: PPUSH
77153: LD_INT 1
77155: PPUSH
77156: CALL_OW 272
77160: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77161: LD_ADDR_VAR 0 5
77165: PUSH
77166: LD_VAR 0 1
77170: PPUSH
77171: CALL_OW 251
77175: PPUSH
77176: LD_VAR 0 2
77180: PPUSH
77181: LD_INT 1
77183: PPUSH
77184: CALL_OW 273
77188: ST_TO_ADDR
// if ValidHex ( x , y ) then
77189: LD_VAR 0 4
77193: PPUSH
77194: LD_VAR 0 5
77198: PPUSH
77199: CALL_OW 488
77203: IFFALSE 77224
// ComTurnXY ( unit , x , y ) ;
77205: LD_VAR 0 1
77209: PPUSH
77210: LD_VAR 0 4
77214: PPUSH
77215: LD_VAR 0 5
77219: PPUSH
77220: CALL_OW 118
// end ;
77224: LD_VAR 0 3
77228: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77229: LD_INT 0
77231: PPUSH
77232: PPUSH
// result := false ;
77233: LD_ADDR_VAR 0 3
77237: PUSH
77238: LD_INT 0
77240: ST_TO_ADDR
// if not units then
77241: LD_VAR 0 2
77245: NOT
77246: IFFALSE 77250
// exit ;
77248: GO 77295
// for i in units do
77250: LD_ADDR_VAR 0 4
77254: PUSH
77255: LD_VAR 0 2
77259: PUSH
77260: FOR_IN
77261: IFFALSE 77293
// if See ( side , i ) then
77263: LD_VAR 0 1
77267: PPUSH
77268: LD_VAR 0 4
77272: PPUSH
77273: CALL_OW 292
77277: IFFALSE 77291
// begin result := true ;
77279: LD_ADDR_VAR 0 3
77283: PUSH
77284: LD_INT 1
77286: ST_TO_ADDR
// exit ;
77287: POP
77288: POP
77289: GO 77295
// end ;
77291: GO 77260
77293: POP
77294: POP
// end ;
77295: LD_VAR 0 3
77299: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77300: LD_INT 0
77302: PPUSH
77303: PPUSH
77304: PPUSH
77305: PPUSH
// if not unit or not points then
77306: LD_VAR 0 1
77310: NOT
77311: PUSH
77312: LD_VAR 0 2
77316: NOT
77317: OR
77318: IFFALSE 77322
// exit ;
77320: GO 77412
// dist := 99999 ;
77322: LD_ADDR_VAR 0 5
77326: PUSH
77327: LD_INT 99999
77329: ST_TO_ADDR
// for i in points do
77330: LD_ADDR_VAR 0 4
77334: PUSH
77335: LD_VAR 0 2
77339: PUSH
77340: FOR_IN
77341: IFFALSE 77410
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77343: LD_ADDR_VAR 0 6
77347: PUSH
77348: LD_VAR 0 1
77352: PPUSH
77353: LD_VAR 0 4
77357: PUSH
77358: LD_INT 1
77360: ARRAY
77361: PPUSH
77362: LD_VAR 0 4
77366: PUSH
77367: LD_INT 2
77369: ARRAY
77370: PPUSH
77371: CALL_OW 297
77375: ST_TO_ADDR
// if tmpDist < dist then
77376: LD_VAR 0 6
77380: PUSH
77381: LD_VAR 0 5
77385: LESS
77386: IFFALSE 77408
// begin result := i ;
77388: LD_ADDR_VAR 0 3
77392: PUSH
77393: LD_VAR 0 4
77397: ST_TO_ADDR
// dist := tmpDist ;
77398: LD_ADDR_VAR 0 5
77402: PUSH
77403: LD_VAR 0 6
77407: ST_TO_ADDR
// end ; end ;
77408: GO 77340
77410: POP
77411: POP
// end ;
77412: LD_VAR 0 3
77416: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77417: LD_INT 0
77419: PPUSH
// uc_side := side ;
77420: LD_ADDR_OWVAR 20
77424: PUSH
77425: LD_VAR 0 1
77429: ST_TO_ADDR
// uc_nation := 3 ;
77430: LD_ADDR_OWVAR 21
77434: PUSH
77435: LD_INT 3
77437: ST_TO_ADDR
// vc_chassis := 25 ;
77438: LD_ADDR_OWVAR 37
77442: PUSH
77443: LD_INT 25
77445: ST_TO_ADDR
// vc_engine := engine_siberite ;
77446: LD_ADDR_OWVAR 39
77450: PUSH
77451: LD_INT 3
77453: ST_TO_ADDR
// vc_control := control_computer ;
77454: LD_ADDR_OWVAR 38
77458: PUSH
77459: LD_INT 3
77461: ST_TO_ADDR
// vc_weapon := 59 ;
77462: LD_ADDR_OWVAR 40
77466: PUSH
77467: LD_INT 59
77469: ST_TO_ADDR
// result := CreateVehicle ;
77470: LD_ADDR_VAR 0 5
77474: PUSH
77475: CALL_OW 45
77479: ST_TO_ADDR
// SetDir ( result , d ) ;
77480: LD_VAR 0 5
77484: PPUSH
77485: LD_VAR 0 4
77489: PPUSH
77490: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77494: LD_VAR 0 5
77498: PPUSH
77499: LD_VAR 0 2
77503: PPUSH
77504: LD_VAR 0 3
77508: PPUSH
77509: LD_INT 0
77511: PPUSH
77512: CALL_OW 48
// end ;
77516: LD_VAR 0 5
77520: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77521: LD_INT 0
77523: PPUSH
77524: PPUSH
77525: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77526: LD_ADDR_VAR 0 2
77530: PUSH
77531: LD_INT 0
77533: PUSH
77534: LD_INT 0
77536: PUSH
77537: LD_INT 0
77539: PUSH
77540: LD_INT 0
77542: PUSH
77543: EMPTY
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77549: LD_VAR 0 1
77553: NOT
77554: PUSH
77555: LD_VAR 0 1
77559: PPUSH
77560: CALL_OW 264
77564: PUSH
77565: LD_INT 12
77567: PUSH
77568: LD_INT 51
77570: PUSH
77571: LD_INT 32
77573: PUSH
77574: LD_INT 89
77576: PUSH
77577: EMPTY
77578: LIST
77579: LIST
77580: LIST
77581: LIST
77582: IN
77583: NOT
77584: OR
77585: IFFALSE 77589
// exit ;
77587: GO 77687
// for i := 1 to 3 do
77589: LD_ADDR_VAR 0 3
77593: PUSH
77594: DOUBLE
77595: LD_INT 1
77597: DEC
77598: ST_TO_ADDR
77599: LD_INT 3
77601: PUSH
77602: FOR_TO
77603: IFFALSE 77685
// begin tmp := GetCargo ( cargo , i ) ;
77605: LD_ADDR_VAR 0 4
77609: PUSH
77610: LD_VAR 0 1
77614: PPUSH
77615: LD_VAR 0 3
77619: PPUSH
77620: CALL_OW 289
77624: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77625: LD_ADDR_VAR 0 2
77629: PUSH
77630: LD_VAR 0 2
77634: PPUSH
77635: LD_VAR 0 3
77639: PPUSH
77640: LD_VAR 0 4
77644: PPUSH
77645: CALL_OW 1
77649: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77650: LD_ADDR_VAR 0 2
77654: PUSH
77655: LD_VAR 0 2
77659: PPUSH
77660: LD_INT 4
77662: PPUSH
77663: LD_VAR 0 2
77667: PUSH
77668: LD_INT 4
77670: ARRAY
77671: PUSH
77672: LD_VAR 0 4
77676: PLUS
77677: PPUSH
77678: CALL_OW 1
77682: ST_TO_ADDR
// end ;
77683: GO 77602
77685: POP
77686: POP
// end ;
77687: LD_VAR 0 2
77691: RET
// export function Length ( array ) ; begin
77692: LD_INT 0
77694: PPUSH
// result := array + 0 ;
77695: LD_ADDR_VAR 0 2
77699: PUSH
77700: LD_VAR 0 1
77704: PUSH
77705: LD_INT 0
77707: PLUS
77708: ST_TO_ADDR
// end ;
77709: LD_VAR 0 2
77713: RET
// export function PrepareArray ( array ) ; begin
77714: LD_INT 0
77716: PPUSH
// result := array diff 0 ;
77717: LD_ADDR_VAR 0 2
77721: PUSH
77722: LD_VAR 0 1
77726: PUSH
77727: LD_INT 0
77729: DIFF
77730: ST_TO_ADDR
// if not result [ 1 ] then
77731: LD_VAR 0 2
77735: PUSH
77736: LD_INT 1
77738: ARRAY
77739: NOT
77740: IFFALSE 77760
// result := Delete ( result , 1 ) ;
77742: LD_ADDR_VAR 0 2
77746: PUSH
77747: LD_VAR 0 2
77751: PPUSH
77752: LD_INT 1
77754: PPUSH
77755: CALL_OW 3
77759: ST_TO_ADDR
// end ;
77760: LD_VAR 0 2
77764: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77765: LD_INT 0
77767: PPUSH
77768: PPUSH
77769: PPUSH
77770: PPUSH
// sibRocketRange := 25 ;
77771: LD_ADDR_VAR 0 6
77775: PUSH
77776: LD_INT 25
77778: ST_TO_ADDR
// result := false ;
77779: LD_ADDR_VAR 0 4
77783: PUSH
77784: LD_INT 0
77786: ST_TO_ADDR
// for i := 0 to 5 do
77787: LD_ADDR_VAR 0 5
77791: PUSH
77792: DOUBLE
77793: LD_INT 0
77795: DEC
77796: ST_TO_ADDR
77797: LD_INT 5
77799: PUSH
77800: FOR_TO
77801: IFFALSE 77868
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77803: LD_VAR 0 1
77807: PPUSH
77808: LD_VAR 0 5
77812: PPUSH
77813: LD_VAR 0 6
77817: PPUSH
77818: CALL_OW 272
77822: PPUSH
77823: LD_VAR 0 2
77827: PPUSH
77828: LD_VAR 0 5
77832: PPUSH
77833: LD_VAR 0 6
77837: PPUSH
77838: CALL_OW 273
77842: PPUSH
77843: LD_VAR 0 3
77847: PPUSH
77848: CALL_OW 309
77852: IFFALSE 77866
// begin result := true ;
77854: LD_ADDR_VAR 0 4
77858: PUSH
77859: LD_INT 1
77861: ST_TO_ADDR
// exit ;
77862: POP
77863: POP
77864: GO 77870
// end ;
77866: GO 77800
77868: POP
77869: POP
// end ;
77870: LD_VAR 0 4
77874: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77875: LD_INT 0
77877: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77878: LD_VAR 0 1
77882: PPUSH
77883: LD_VAR 0 2
77887: PPUSH
77888: LD_INT 0
77890: PPUSH
77891: LD_INT 0
77893: PPUSH
77894: LD_INT 1
77896: PPUSH
77897: LD_INT 0
77899: PPUSH
77900: CALL_OW 587
// end ; end_of_file
77904: LD_VAR 0 3
77908: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77909: LD_VAR 0 1
77913: PUSH
77914: LD_INT 200
77916: DOUBLE
77917: GREATEREQUAL
77918: IFFALSE 77926
77920: LD_INT 299
77922: DOUBLE
77923: LESSEQUAL
77924: IFTRUE 77928
77926: GO 77960
77928: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77929: LD_VAR 0 1
77933: PPUSH
77934: LD_VAR 0 2
77938: PPUSH
77939: LD_VAR 0 3
77943: PPUSH
77944: LD_VAR 0 4
77948: PPUSH
77949: LD_VAR 0 5
77953: PPUSH
77954: CALL 32594 0 5
77958: GO 78037
77960: LD_INT 300
77962: DOUBLE
77963: GREATEREQUAL
77964: IFFALSE 77972
77966: LD_INT 399
77968: DOUBLE
77969: LESSEQUAL
77970: IFTRUE 77974
77972: GO 78036
77974: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77975: LD_VAR 0 1
77979: PPUSH
77980: LD_VAR 0 2
77984: PPUSH
77985: LD_VAR 0 3
77989: PPUSH
77990: LD_VAR 0 4
77994: PPUSH
77995: LD_VAR 0 5
77999: PPUSH
78000: LD_VAR 0 6
78004: PPUSH
78005: LD_VAR 0 7
78009: PPUSH
78010: LD_VAR 0 8
78014: PPUSH
78015: LD_VAR 0 9
78019: PPUSH
78020: LD_VAR 0 10
78024: PPUSH
78025: LD_VAR 0 11
78029: PPUSH
78030: CALL 28927 0 11
78034: GO 78037
78036: POP
// end ;
78037: PPOPN 11
78039: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78040: LD_VAR 0 1
78044: PPUSH
78045: LD_VAR 0 2
78049: PPUSH
78050: LD_VAR 0 3
78054: PPUSH
78055: LD_VAR 0 4
78059: PPUSH
78060: LD_VAR 0 5
78064: PPUSH
78065: CALL 32330 0 5
// end ; end_of_file
78069: PPOPN 5
78071: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78072: LD_VAR 0 1
78076: PPUSH
78077: LD_VAR 0 2
78081: PPUSH
78082: LD_VAR 0 3
78086: PPUSH
78087: LD_VAR 0 4
78091: PPUSH
78092: LD_VAR 0 5
78096: PPUSH
78097: LD_VAR 0 6
78101: PPUSH
78102: CALL 16620 0 6
// end ;
78106: PPOPN 6
78108: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78109: LD_INT 0
78111: PPUSH
// begin if not units then
78112: LD_VAR 0 1
78116: NOT
78117: IFFALSE 78121
// exit ;
78119: GO 78121
// end ;
78121: PPOPN 7
78123: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78124: CALL 16591 0 0
// end ;
78128: PPOPN 1
78130: END
