// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10281 0 0
// PrepareRussianCommander ;
  44: CALL 11746 0 0
// PrepareSouthBase ;
  48: CALL 11842 0 0
// PrepareNorthBase ;
  52: CALL 12180 0 0
// PrepareOtherRussians ;
  56: CALL 12575 0 0
// PrepareHeroes ;
  60: CALL 10602 0 0
// PrepareLisSquad ;
  64: CALL 10972 0 0
// PrepareOtherAmericans ;
  68: CALL 11285 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 94
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 94
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11427 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 94
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11584 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 14881 0 0
// RussianTrap ;
6346: CALL 9980 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 12767 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape do
6724: LD_EXP 20
6728: IFFALSE 6875
6730: GO 6732
6732: DISABLE
// begin enable ;
6733: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6734: LD_EXP 15
6738: PUSH
6739: LD_EXP 16
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PPUSH
6748: LD_INT 13
6750: PPUSH
6751: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6755: LD_EXP 15
6759: PPUSH
6760: LD_INT 13
6762: PPUSH
6763: CALL_OW 308
6767: PUSH
6768: LD_EXP 17
6772: PPUSH
6773: LD_INT 13
6775: PPUSH
6776: CALL_OW 308
6780: OR
6781: IFFALSE 6815
// begin RemoveUnit ( cargo1 ) ;
6783: LD_EXP 15
6787: PPUSH
6788: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6792: LD_EXP 17
6796: PPUSH
6797: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6801: LD_ADDR_EXP 20
6805: PUSH
6806: LD_EXP 20
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6815: LD_EXP 16
6819: PPUSH
6820: LD_INT 13
6822: PPUSH
6823: CALL_OW 308
6827: PUSH
6828: LD_EXP 18
6832: PPUSH
6833: LD_INT 13
6835: PPUSH
6836: CALL_OW 308
6840: OR
6841: IFFALSE 6875
// begin RemoveUnit ( cargo2 ) ;
6843: LD_EXP 16
6847: PPUSH
6848: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6852: LD_EXP 18
6856: PPUSH
6857: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6861: LD_ADDR_EXP 20
6865: PUSH
6866: LD_EXP 20
6870: PUSH
6871: LD_INT 1
6873: PLUS
6874: ST_TO_ADDR
// end ; end ;
6875: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6876: LD_EXP 20
6880: PUSH
6881: LD_INT 1
6883: GREATER
6884: IFFALSE 7133
6886: GO 6888
6888: DISABLE
6889: LD_INT 0
6891: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6892: LD_INT 4
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6905: LD_INT 31
6907: PPUSH
6908: LD_INT 1
6910: PPUSH
6911: LD_INT 1
6913: PPUSH
6914: CALL_OW 324
// Hint ( Bunker ) ;
6918: LD_STRING Bunker
6920: PPUSH
6921: CALL_OW 339
// if IsOK ( Jerry ) then
6925: LD_EXP 7
6929: PPUSH
6930: CALL_OW 302
6934: IFFALSE 6950
// Say ( Jerry , D5a-Sol1-1 ) else
6936: LD_EXP 7
6940: PPUSH
6941: LD_STRING D5a-Sol1-1
6943: PPUSH
6944: CALL_OW 88
6948: GO 7036
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6950: LD_ADDR_VAR 0 1
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 26
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 69
6983: PUSH
6984: LD_EXP 1
6988: PUSH
6989: LD_EXP 2
6993: PUSH
6994: LD_EXP 3
6998: PUSH
6999: LD_EXP 5
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: DIFF
7010: ST_TO_ADDR
// if not speaker then
7011: LD_VAR 0 1
7015: NOT
7016: IFFALSE 7020
// exit ;
7018: GO 7133
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7020: LD_VAR 0 1
7024: PUSH
7025: LD_INT 1
7027: ARRAY
7028: PPUSH
7029: LD_STRING D5a-Sol1-1
7031: PPUSH
7032: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7036: LD_EXP 1
7040: PPUSH
7041: LD_STRING D5a-JMM-1
7043: PPUSH
7044: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7048: LD_INT 22
7050: PPUSH
7051: LD_INT 22
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 2
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 70
7079: IFFALSE 7133
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7081: LD_INT 22
7083: PPUSH
7084: LD_INT 22
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 25
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PPUSH
7108: CALL_OW 70
7112: PUSH
7113: LD_INT 1
7115: ARRAY
7116: PPUSH
7117: LD_INT 31
7119: PPUSH
7120: LD_INT 44
7122: PPUSH
7123: LD_INT 13
7125: PPUSH
7126: LD_INT 1
7128: PPUSH
7129: CALL_OW 145
// end ;
7133: PPOPN 1
7135: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 255
7143: PUSH
7144: LD_INT 3
7146: EQUAL
7147: PUSH
7148: LD_INT 1
7150: PPUSH
7151: CALL_OW 256
7155: PUSH
7156: LD_INT 1000
7158: LESS
7159: AND
7160: PUSH
7161: LD_INT 10
7163: PPUSH
7164: CALL_OW 255
7168: PUSH
7169: LD_INT 3
7171: EQUAL
7172: PUSH
7173: LD_INT 10
7175: PPUSH
7176: CALL_OW 256
7180: PUSH
7181: LD_INT 1000
7183: LESS
7184: AND
7185: OR
7186: IFFALSE 7203
7188: GO 7190
7190: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7191: LD_EXP 1
7195: PPUSH
7196: LD_STRING D8-JMM-1
7198: PPUSH
7199: CALL_OW 88
7203: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7204: LD_EXP 8
7208: PPUSH
7209: CALL_OW 310
7213: PUSH
7214: LD_INT 1
7216: EQUAL
7217: PUSH
7218: LD_EXP 22
7222: PUSH
7223: LD_INT 3
7225: EQUAL
7226: NOT
7227: AND
7228: IFFALSE 7250
7230: GO 7232
7232: DISABLE
// begin enable ;
7233: ENABLE
// mikhailInBase = 1 ;
7234: LD_ADDR_EXP 22
7238: PUSH
7239: LD_INT 1
7241: ST_TO_ADDR
// mikhailStatus = 1 ;
7242: LD_ADDR_EXP 21
7246: PUSH
7247: LD_INT 1
7249: ST_TO_ADDR
// end ;
7250: END
// export function AskMikhail ; begin
7251: LD_INT 0
7253: PPUSH
// case Query ( QMikh2 ) of 1 :
7254: LD_STRING QMikh2
7256: PPUSH
7257: CALL_OW 97
7261: PUSH
7262: LD_INT 1
7264: DOUBLE
7265: EQUAL
7266: IFTRUE 7270
7268: GO 7337
7270: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7271: LD_INT 1
7273: PPUSH
7274: LD_INT 6
7276: PPUSH
7277: LD_INT 2
7279: PPUSH
7280: LD_INT 1
7282: PPUSH
7283: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7287: LD_EXP 8
7291: PPUSH
7292: LD_INT 6
7294: PPUSH
7295: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7299: LD_EXP 8
7303: PPUSH
7304: CALL_OW 122
// wait ( 0 0$1 ) ;
7308: LD_INT 35
7310: PPUSH
7311: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7315: LD_EXP 8
7319: PPUSH
7320: LD_INT 17
7322: PPUSH
7323: CALL_OW 113
// mikhailInbase = 0 ;
7327: LD_ADDR_EXP 22
7331: PUSH
7332: LD_INT 0
7334: ST_TO_ADDR
// end ; 2 :
7335: GO 7578
7337: LD_INT 2
7339: DOUBLE
7340: EQUAL
7341: IFTRUE 7345
7343: GO 7518
7345: POP
// begin mikhailInBase = 2 ;
7346: LD_ADDR_EXP 22
7350: PUSH
7351: LD_INT 2
7353: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7354: LD_EXP 8
7358: PPUSH
7359: LD_INT 6
7361: PPUSH
7362: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7366: LD_EXP 8
7370: PPUSH
7371: CALL_OW 122
// wait ( 0 0$1 ) ;
7375: LD_INT 35
7377: PPUSH
7378: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7382: LD_EXP 8
7386: PPUSH
7387: LD_EXP 8
7391: PPUSH
7392: CALL_OW 250
7396: PUSH
7397: LD_INT 2
7399: PLUS
7400: PPUSH
7401: LD_EXP 8
7405: PPUSH
7406: CALL_OW 251
7410: PUSH
7411: LD_INT 2
7413: PLUS
7414: PPUSH
7415: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7419: LD_EXP 8
7423: PPUSH
7424: LD_EXP 8
7428: PPUSH
7429: CALL_OW 250
7433: PUSH
7434: LD_INT 1
7436: PLUS
7437: PPUSH
7438: LD_EXP 8
7442: PPUSH
7443: CALL_OW 251
7447: PUSH
7448: LD_INT 2
7450: PLUS
7451: PPUSH
7452: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7456: LD_EXP 8
7460: PPUSH
7461: LD_EXP 8
7465: PPUSH
7466: CALL_OW 250
7470: PUSH
7471: LD_INT 2
7473: PLUS
7474: PPUSH
7475: LD_EXP 8
7479: PPUSH
7480: CALL_OW 251
7484: PPUSH
7485: CALL_OW 171
// wait ( 0 0$5 ) ;
7489: LD_INT 175
7491: PPUSH
7492: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7496: LD_EXP 8
7500: PPUSH
7501: LD_INT 25
7503: PPUSH
7504: CALL_OW 113
// mikhailInBase = 4 ;
7508: LD_ADDR_EXP 22
7512: PUSH
7513: LD_INT 4
7515: ST_TO_ADDR
// end ; 3 :
7516: GO 7578
7518: LD_INT 3
7520: DOUBLE
7521: EQUAL
7522: IFTRUE 7526
7524: GO 7577
7526: POP
// begin SetSide ( Mikhail , 6 ) ;
7527: LD_EXP 8
7531: PPUSH
7532: LD_INT 6
7534: PPUSH
7535: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7539: LD_EXP 8
7543: PPUSH
7544: CALL_OW 122
// wait ( 0 0$1 ) ;
7548: LD_INT 35
7550: PPUSH
7551: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7555: LD_EXP 8
7559: PPUSH
7560: LD_INT 17
7562: PPUSH
7563: CALL_OW 113
// mikhailInbase = 3 ;
7567: LD_ADDR_EXP 22
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// end ;
7578: LD_VAR 0 1
7582: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7583: LD_EXP 8
7587: PPUSH
7588: LD_INT 25
7590: PPUSH
7591: CALL_OW 308
7595: PUSH
7596: LD_EXP 22
7600: PUSH
7601: LD_INT 4
7603: EQUAL
7604: AND
7605: IFFALSE 7709
7607: GO 7609
7609: DISABLE
// begin enable ;
7610: ENABLE
// mikhailInBase = 1 ;
7611: LD_ADDR_EXP 22
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// InGameOn ;
7619: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7623: LD_INT 1
7625: PPUSH
7626: LD_INT 6
7628: PPUSH
7629: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7633: LD_INT 35
7635: PPUSH
7636: CALL_OW 67
// if Carry ( Mikhail ) then
7640: LD_EXP 8
7644: PPUSH
7645: CALL_OW 281
7649: IFFALSE 7660
// ComUnload ( Mikhail ) ;
7651: LD_EXP 8
7655: PPUSH
7656: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7660: LD_EXP 8
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7672: LD_EXP 8
7676: PPUSH
7677: CALL_OW 310
7681: IFFALSE 7633
// SetSide ( dep1 , 1 ) ;
7683: LD_INT 1
7685: PPUSH
7686: LD_INT 1
7688: PPUSH
7689: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7693: LD_EXP 8
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: CALL_OW 235
// InGameOff ;
7705: CALL_OW 9
// end ;
7709: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 310
7719: PUSH
7720: LD_EXP 22
7724: PUSH
7725: LD_INT 3
7727: EQUAL
7728: NOT
7729: AND
7730: IFFALSE 7865
7732: GO 7734
7734: DISABLE
// begin enable ;
7735: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7736: LD_INT 22
7738: PUSH
7739: LD_INT 1
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 21
7748: PUSH
7749: LD_INT 1
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 91
7758: PUSH
7759: LD_EXP 8
7763: PPUSH
7764: CALL_OW 310
7768: PUSH
7769: LD_INT 10
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 69
7786: PUSH
7787: LD_INT 1
7789: EQUAL
7790: IFFALSE 7865
// begin mikhailStatus = 4 ;
7792: LD_ADDR_EXP 21
7796: PUSH
7797: LD_INT 4
7799: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7800: LD_INT 1
7802: PPUSH
7803: LD_INT 6
7805: PPUSH
7806: LD_INT 2
7808: PPUSH
7809: LD_INT 1
7811: PPUSH
7812: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7816: LD_EXP 8
7820: PPUSH
7821: LD_INT 6
7823: PPUSH
7824: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7828: LD_EXP 8
7832: PPUSH
7833: CALL_OW 122
// wait ( 0 0$1 ) ;
7837: LD_INT 35
7839: PPUSH
7840: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7844: LD_EXP 8
7848: PPUSH
7849: LD_INT 17
7851: PPUSH
7852: CALL_OW 113
// mikhailStatus = 3 ;
7856: LD_ADDR_EXP 21
7860: PUSH
7861: LD_INT 3
7863: ST_TO_ADDR
// disable ;
7864: DISABLE
// end ; end ;
7865: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7866: LD_EXP 1
7870: PPUSH
7871: LD_EXP 23
7875: PPUSH
7876: CALL_OW 296
7880: PUSH
7881: LD_INT 5
7883: LESS
7884: PUSH
7885: LD_EXP 21
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: AND
7894: PUSH
7895: LD_EXP 22
7899: PUSH
7900: LD_INT 3
7902: EQUAL
7903: NOT
7904: AND
7905: IFFALSE 8136
7907: GO 7909
7909: DISABLE
7910: LD_INT 0
7912: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7913: LD_ADDR_VAR 0 1
7917: PUSH
7918: LD_INT 22
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 21
7930: PUSH
7931: LD_INT 1
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 26
7940: PUSH
7941: LD_INT 1
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: PUSH
7958: LD_EXP 1
7962: PUSH
7963: LD_EXP 5
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: DIFF
7972: ST_TO_ADDR
// if not tmp then
7973: LD_VAR 0 1
7977: NOT
7978: IFFALSE 7982
// exit ;
7980: GO 8136
// DialogueOn ;
7982: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7986: LD_EXP 1
7990: PPUSH
7991: LD_STRING D7-JMM-1
7993: PPUSH
7994: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7998: LD_VAR 0 1
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PPUSH
8007: LD_STRING D7-Sol1-1
8009: PPUSH
8010: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8014: LD_EXP 1
8018: PPUSH
8019: LD_STRING D7-JMM-2
8021: PPUSH
8022: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8026: LD_VAR 0 1
8030: PUSH
8031: LD_INT 1
8033: ARRAY
8034: PPUSH
8035: LD_STRING D7-Sol1-2
8037: PPUSH
8038: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8042: LD_EXP 1
8046: PPUSH
8047: LD_STRING D7-JMM-3
8049: PPUSH
8050: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8054: LD_VAR 0 1
8058: PUSH
8059: LD_INT 1
8061: ARRAY
8062: PPUSH
8063: LD_STRING D7-Sol1-3
8065: PPUSH
8066: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8070: LD_EXP 3
8074: PPUSH
8075: CALL_OW 302
8079: PUSH
8080: LD_EXP 4
8084: PPUSH
8085: CALL_OW 302
8089: AND
8090: IFFALSE 8132
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8092: LD_EXP 3
8096: PPUSH
8097: LD_STRING D7-Cyrus-3
8099: PPUSH
8100: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8104: LD_VAR 0 1
8108: PUSH
8109: LD_INT 1
8111: ARRAY
8112: PPUSH
8113: LD_STRING D7-Sol1-4
8115: PPUSH
8116: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8120: LD_EXP 4
8124: PPUSH
8125: LD_STRING D7-Lisa-4
8127: PPUSH
8128: CALL_OW 88
// end ; DialogueOff ;
8132: CALL_OW 7
// end ;
8136: PPOPN 1
8138: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8139: LD_EXP 8
8143: PPUSH
8144: CALL_OW 303
8148: PUSH
8149: LD_EXP 21
8153: PUSH
8154: LD_INT 3
8156: EQUAL
8157: AND
8158: IFFALSE 8172
8160: GO 8162
8162: DISABLE
// begin enable ;
8163: ENABLE
// mikhailStatus = 2 ;
8164: LD_ADDR_EXP 21
8168: PUSH
8169: LD_INT 2
8171: ST_TO_ADDR
// end ;
8172: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8173: LD_EXP 8
8177: PPUSH
8178: LD_INT 17
8180: PPUSH
8181: CALL_OW 308
8185: PUSH
8186: LD_EXP 8
8190: PPUSH
8191: CALL_OW 255
8195: PUSH
8196: LD_INT 6
8198: EQUAL
8199: AND
8200: IFFALSE 8233
8202: GO 8204
8204: DISABLE
// begin if not mikhailInBase = 3 then
8205: LD_EXP 22
8209: PUSH
8210: LD_INT 3
8212: EQUAL
8213: NOT
8214: IFFALSE 8224
// mikhailStatus = 3 ;
8216: LD_ADDR_EXP 21
8220: PUSH
8221: LD_INT 3
8223: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8224: LD_EXP 8
8228: PPUSH
8229: CALL_OW 64
// end ;
8233: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8234: LD_EXP 21
8238: PUSH
8239: LD_INT 3
8241: EQUAL
8242: PUSH
8243: LD_EXP 8
8247: PPUSH
8248: CALL_OW 255
8252: PUSH
8253: LD_INT 6
8255: EQUAL
8256: AND
8257: IFFALSE 8423
8259: GO 8261
8261: DISABLE
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
// begin enable ;
8266: ENABLE
// if IsOk ( Mikhail ) then
8267: LD_EXP 8
8271: PPUSH
8272: CALL_OW 302
8276: IFFALSE 8423
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8278: LD_ADDR_VAR 0 2
8282: PUSH
8283: LD_EXP 8
8287: PPUSH
8288: LD_INT 22
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 21
8300: PUSH
8301: LD_INT 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PPUSH
8312: CALL_OW 69
8316: PPUSH
8317: CALL 10172 0 2
8321: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8322: LD_VAR 0 2
8326: PPUSH
8327: LD_EXP 8
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 8
8339: LESS
8340: IFFALSE 8423
// begin if GetSex ( attacker ) = sex_male then
8342: LD_VAR 0 2
8346: PPUSH
8347: CALL_OW 258
8351: PUSH
8352: LD_INT 1
8354: EQUAL
8355: IFFALSE 8391
// begin disable ;
8357: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8358: LD_VAR 0 2
8362: PPUSH
8363: LD_STRING D7a-Sol1-1
8365: PPUSH
8366: CALL_OW 88
// wait ( 0 0$2 ) ;
8370: LD_INT 70
8372: PPUSH
8373: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8377: LD_VAR 0 2
8381: PPUSH
8382: LD_STRING D7a-Sol1-1a
8384: PPUSH
8385: CALL_OW 88
// end else
8389: GO 8423
// begin disable ;
8391: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8392: LD_VAR 0 2
8396: PPUSH
8397: LD_STRING D7a-FSol1-1
8399: PPUSH
8400: CALL_OW 88
// wait ( 0 0$2 ) ;
8404: LD_INT 70
8406: PPUSH
8407: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8411: LD_VAR 0 2
8415: PPUSH
8416: LD_STRING D7a-FSol1-1a
8418: PPUSH
8419: CALL_OW 88
// end ; end ; end ; end ;
8423: PPOPN 2
8425: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8426: LD_EXP 27
8430: PUSH
8431: LD_INT 1
8433: EQUAL
8434: PUSH
8435: LD_INT 22
8437: PPUSH
8438: LD_INT 22
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 21
8450: PUSH
8451: LD_INT 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PPUSH
8462: CALL_OW 70
8466: PUSH
8467: LD_INT 2
8469: GREATER
8470: AND
8471: PUSH
8472: LD_INT 22
8474: PPUSH
8475: LD_INT 22
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 2
8487: PUSH
8488: LD_INT 21
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 59
8500: PUSH
8501: EMPTY
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PPUSH
8513: CALL_OW 70
8517: PUSH
8518: LD_INT 0
8520: EQUAL
8521: AND
8522: IFFALSE 8537
8524: GO 8526
8526: DISABLE
// SetSide ( dep1 , 3 ) ;
8527: LD_INT 1
8529: PPUSH
8530: LD_INT 3
8532: PPUSH
8533: CALL_OW 235
8537: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8538: LD_EXP 30
8542: PUSH
8543: LD_INT 1
8545: EQUAL
8546: PUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 0
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 25
8559: PUSH
8560: LD_INT 14
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: PUSH
8576: LD_INT 0
8578: EQUAL
8579: AND
8580: IFFALSE 8681
8582: GO 8584
8584: DISABLE
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8589: LD_ADDR_VAR 0 2
8593: PUSH
8594: LD_INT 22
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: LD_INT 21
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 23
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PPUSH
8629: CALL_OW 69
8633: ST_TO_ADDR
// for i in tmp do
8634: LD_ADDR_VAR 0 1
8638: PUSH
8639: LD_VAR 0 2
8643: PUSH
8644: FOR_IN
8645: IFFALSE 8672
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8647: LD_VAR 0 1
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_INT 4
8657: PPUSH
8658: CALL_OW 12
8662: PPUSH
8663: LD_INT 300
8665: PPUSH
8666: CALL_OW 492
8670: GO 8644
8672: POP
8673: POP
// SetAchievement ( ACH_TIGER ) ;
8674: LD_STRING ACH_TIGER
8676: PPUSH
8677: CALL_OW 543
// end ;
8681: PPOPN 2
8683: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8684: LD_INT 22
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 34
8696: PUSH
8697: LD_INT 51
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PPUSH
8708: CALL_OW 69
8712: PUSH
8713: LD_INT 2
8715: GREATEREQUAL
8716: IFFALSE 8728
8718: GO 8720
8720: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8721: LD_STRING ACH_CARGO
8723: PPUSH
8724: CALL_OW 543
8728: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8729: LD_INT 0
8731: PPUSH
8732: PPUSH
8733: PPUSH
// for i = 1 to count do
8734: LD_ADDR_VAR 0 8
8738: PUSH
8739: DOUBLE
8740: LD_INT 1
8742: DEC
8743: ST_TO_ADDR
8744: LD_VAR 0 6
8748: PUSH
8749: FOR_TO
8750: IFFALSE 8831
// begin uc_side = side ;
8752: LD_ADDR_OWVAR 20
8756: PUSH
8757: LD_VAR 0 1
8761: ST_TO_ADDR
// uc_nation = nation ;
8762: LD_ADDR_OWVAR 21
8766: PUSH
8767: LD_VAR 0 2
8771: ST_TO_ADDR
// hc_gallery =  ;
8772: LD_ADDR_OWVAR 33
8776: PUSH
8777: LD_STRING 
8779: ST_TO_ADDR
// hc_name =  ;
8780: LD_ADDR_OWVAR 26
8784: PUSH
8785: LD_STRING 
8787: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8788: LD_INT 0
8790: PPUSH
8791: LD_VAR 0 5
8795: PPUSH
8796: LD_VAR 0 4
8800: PPUSH
8801: CALL_OW 380
// un = CreateHuman ;
8805: LD_ADDR_VAR 0 9
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8815: LD_VAR 0 9
8819: PPUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: CALL_OW 52
// end ;
8829: GO 8749
8831: POP
8832: POP
// end ;
8833: LD_VAR 0 7
8837: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8838: LD_INT 0
8840: PPUSH
8841: PPUSH
8842: PPUSH
// uc_side := GetSide ( b ) ;
8843: LD_ADDR_OWVAR 20
8847: PUSH
8848: LD_VAR 0 2
8852: PPUSH
8853: CALL_OW 255
8857: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8858: LD_ADDR_OWVAR 21
8862: PUSH
8863: LD_VAR 0 2
8867: PPUSH
8868: CALL_OW 248
8872: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8873: LD_INT 0
8875: PPUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 380
// un = CreateHuman ;
8888: LD_ADDR_VAR 0 4
8892: PUSH
8893: CALL_OW 44
8897: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8898: LD_ADDR_VAR 0 5
8902: PUSH
8903: LD_VAR 0 2
8907: PPUSH
8908: CALL_OW 254
8912: PUSH
8913: LD_INT 3
8915: MINUS
8916: ST_TO_ADDR
// if dir < 0 then
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 0
8924: LESS
8925: IFFALSE 8941
// dir := 6 + dir ;
8927: LD_ADDR_VAR 0 5
8931: PUSH
8932: LD_INT 6
8934: PUSH
8935: LD_VAR 0 5
8939: PLUS
8940: ST_TO_ADDR
// SetDir ( un , dir ) ;
8941: LD_VAR 0 4
8945: PPUSH
8946: LD_VAR 0 5
8950: PPUSH
8951: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8955: LD_VAR 0 4
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 52
// end ;
8969: LD_VAR 0 3
8973: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
8974: LD_INT 0
8976: PPUSH
8977: PPUSH
8978: PPUSH
8979: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8980: LD_ADDR_VAR 0 7
8984: PUSH
8985: LD_INT 22
8987: PUSH
8988: LD_VAR 0 1
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 24
9009: PUSH
9010: LD_INT 1000
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9027: LD_ADDR_VAR 0 5
9031: PUSH
9032: LD_VAR 0 3
9036: PPUSH
9037: LD_INT 22
9039: PUSH
9040: LD_VAR 0 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 21
9051: PUSH
9052: LD_INT 3
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 3
9061: PUSH
9062: LD_INT 24
9064: PUSH
9065: LD_INT 1000
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: EMPTY
9082: LIST
9083: PPUSH
9084: CALL_OW 70
9088: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9089: LD_VAR 0 5
9093: NOT
9094: PUSH
9095: LD_VAR 0 7
9099: NOT
9100: AND
9101: IFFALSE 9105
// exit ;
9103: GO 9301
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9105: LD_VAR 0 5
9109: NOT
9110: PUSH
9111: LD_VAR 0 7
9115: PPUSH
9116: LD_INT 3
9118: PUSH
9119: LD_INT 54
9121: PUSH
9122: EMPTY
9123: LIST
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 72
9133: AND
9134: PUSH
9135: LD_VAR 0 2
9139: PPUSH
9140: CALL_OW 302
9144: AND
9145: IFFALSE 9179
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9147: LD_VAR 0 7
9151: PPUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 54
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: PPUSH
9170: LD_VAR 0 2
9174: PPUSH
9175: CALL_OW 120
// if buildingsList then
9179: LD_VAR 0 5
9183: IFFALSE 9301
// begin for i in engineerOkList do
9185: LD_ADDR_VAR 0 6
9189: PUSH
9190: LD_VAR 0 7
9194: PUSH
9195: FOR_IN
9196: IFFALSE 9299
// if IsInUnit ( i ) then
9198: LD_VAR 0 6
9202: PPUSH
9203: CALL_OW 310
9207: IFFALSE 9220
// ComExitBuilding ( i ) else
9209: LD_VAR 0 6
9213: PPUSH
9214: CALL_OW 122
9218: GO 9297
// if GetLives ( i ) > 650 then
9220: LD_VAR 0 6
9224: PPUSH
9225: CALL_OW 256
9229: PUSH
9230: LD_INT 650
9232: GREATER
9233: IFFALSE 9261
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9235: LD_VAR 0 6
9239: PPUSH
9240: LD_VAR 0 5
9244: PPUSH
9245: LD_VAR 0 6
9249: PPUSH
9250: CALL_OW 74
9254: PPUSH
9255: CALL_OW 130
9259: GO 9297
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9261: LD_VAR 0 6
9265: PPUSH
9266: LD_INT 56
9268: PPUSH
9269: LD_INT 10
9271: PPUSH
9272: CALL_OW 297
9276: PUSH
9277: LD_INT 8
9279: GREATER
9280: IFFALSE 9297
// ComMoveXY ( i , 56 , 10 ) ;
9282: LD_VAR 0 6
9286: PPUSH
9287: LD_INT 56
9289: PPUSH
9290: LD_INT 10
9292: PPUSH
9293: CALL_OW 111
9297: GO 9195
9299: POP
9300: POP
// end ; end ;
9301: LD_VAR 0 4
9305: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9306: LD_INT 0
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9312: LD_ADDR_VAR 0 6
9316: PUSH
9317: LD_INT 22
9319: PUSH
9320: LD_VAR 0 1
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 4
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 24
9341: PUSH
9342: LD_INT 250
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: PPUSH
9354: CALL_OW 69
9358: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_VAR 0 3
9368: PPUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 21
9383: PUSH
9384: LD_INT 1
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: LD_INT 24
9396: PUSH
9397: LD_INT 650
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 70
9417: ST_TO_ADDR
// if not damageUnits and not sciList then
9418: LD_VAR 0 8
9422: NOT
9423: PUSH
9424: LD_VAR 0 6
9428: NOT
9429: AND
9430: IFFALSE 9434
// exit ;
9432: GO 9573
// if damageUnits then
9434: LD_VAR 0 8
9438: IFFALSE 9517
// begin for i in sciList do
9440: LD_ADDR_VAR 0 7
9444: PUSH
9445: LD_VAR 0 6
9449: PUSH
9450: FOR_IN
9451: IFFALSE 9513
// if IsInUnit ( i ) then
9453: LD_VAR 0 7
9457: PPUSH
9458: CALL_OW 310
9462: IFFALSE 9475
// ComExitBuilding ( i ) else
9464: LD_VAR 0 7
9468: PPUSH
9469: CALL_OW 122
9473: GO 9511
// if not HasTask ( i ) then
9475: LD_VAR 0 7
9479: PPUSH
9480: CALL_OW 314
9484: NOT
9485: IFFALSE 9511
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9487: LD_VAR 0 7
9491: PPUSH
9492: LD_VAR 0 8
9496: PPUSH
9497: LD_VAR 0 7
9501: PPUSH
9502: CALL_OW 74
9506: PPUSH
9507: CALL_OW 128
9511: GO 9450
9513: POP
9514: POP
// end else
9515: GO 9573
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 3
9524: PUSH
9525: LD_INT 54
9527: PUSH
9528: EMPTY
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PPUSH
9535: CALL_OW 72
9539: IFFALSE 9573
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9541: LD_VAR 0 6
9545: PPUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 54
9551: PUSH
9552: EMPTY
9553: LIST
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PPUSH
9559: CALL_OW 72
9563: PPUSH
9564: LD_VAR 0 4
9568: PPUSH
9569: CALL_OW 120
// end ;
9573: LD_VAR 0 5
9577: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9578: LD_INT 0
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
// if not defendersList then
9584: LD_VAR 0 3
9588: NOT
9589: IFFALSE 9593
// exit ;
9591: GO 9975
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9593: LD_ADDR_VAR 0 7
9597: PUSH
9598: LD_VAR 0 1
9602: PPUSH
9603: LD_INT 22
9605: PUSH
9606: LD_VAR 0 2
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: LD_INT 21
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 21
9630: PUSH
9631: LD_INT 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 70
9651: ST_TO_ADDR
// if enemy then
9652: LD_VAR 0 7
9656: IFFALSE 9877
// begin for i in defendersList do
9658: LD_ADDR_VAR 0 6
9662: PUSH
9663: LD_VAR 0 3
9667: PUSH
9668: FOR_IN
9669: IFFALSE 9873
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9671: LD_VAR 0 6
9675: PPUSH
9676: CALL_OW 310
9680: PUSH
9681: LD_VAR 0 6
9685: PPUSH
9686: CALL_OW 256
9690: PUSH
9691: LD_INT 500
9693: GREATER
9694: AND
9695: IFFALSE 9708
// ComExitBuilding ( i ) else
9697: LD_VAR 0 6
9701: PPUSH
9702: CALL_OW 122
9706: GO 9871
// if GetLives ( i ) > 650 then
9708: LD_VAR 0 6
9712: PPUSH
9713: CALL_OW 256
9717: PUSH
9718: LD_INT 650
9720: GREATER
9721: IFFALSE 9774
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9723: LD_ADDR_VAR 0 8
9727: PUSH
9728: LD_VAR 0 7
9732: PPUSH
9733: LD_VAR 0 6
9737: PPUSH
9738: CALL_OW 74
9742: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9743: LD_VAR 0 6
9747: PPUSH
9748: LD_VAR 0 8
9752: PPUSH
9753: CALL_OW 250
9757: PPUSH
9758: LD_VAR 0 8
9762: PPUSH
9763: CALL_OW 251
9767: PPUSH
9768: CALL_OW 114
// end else
9772: GO 9871
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
9774: LD_INT 22
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 25
9786: PUSH
9787: LD_INT 4
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 69
9802: IFFALSE 9842
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9804: LD_VAR 0 6
9808: PPUSH
9809: LD_INT 56
9811: PPUSH
9812: LD_INT 10
9814: PPUSH
9815: CALL_OW 297
9819: PUSH
9820: LD_INT 8
9822: GREATER
9823: IFFALSE 9840
// ComMoveXY ( i , 56 , 10 ) ;
9825: LD_VAR 0 6
9829: PPUSH
9830: LD_INT 56
9832: PPUSH
9833: LD_INT 10
9835: PPUSH
9836: CALL_OW 111
// end else
9840: GO 9871
// if GetLives ( i ) <= 500 then
9842: LD_VAR 0 6
9846: PPUSH
9847: CALL_OW 256
9851: PUSH
9852: LD_INT 500
9854: LESSEQUAL
9855: IFFALSE 9871
// ComEnterUnit ( i , building ) ;
9857: LD_VAR 0 6
9861: PPUSH
9862: LD_VAR 0 4
9866: PPUSH
9867: CALL_OW 120
// end ;
9871: GO 9668
9873: POP
9874: POP
// end else
9875: GO 9975
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_INT 56
9884: PUSH
9885: EMPTY
9886: LIST
9887: PUSH
9888: LD_INT 3
9890: PUSH
9891: LD_INT 60
9893: PUSH
9894: EMPTY
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 24
9903: PUSH
9904: LD_INT 1000
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: PPUSH
9916: CALL_OW 72
9920: IFFALSE 9975
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
9922: LD_VAR 0 3
9926: PPUSH
9927: LD_INT 56
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: LD_INT 60
9938: PUSH
9939: EMPTY
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 24
9948: PUSH
9949: LD_INT 1000
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 72
9965: PPUSH
9966: LD_VAR 0 4
9970: PPUSH
9971: CALL_OW 120
// end ;
9975: LD_VAR 0 5
9979: RET
// export function RussianTrap ; var i ; begin
9980: LD_INT 0
9982: PPUSH
9983: PPUSH
// if GetSide ( Brian ) = 4 then
9984: LD_EXP 6
9988: PPUSH
9989: CALL_OW 255
9993: PUSH
9994: LD_INT 4
9996: EQUAL
9997: IFFALSE 10020
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9999: LD_EXP 6
10003: PUSH
10004: LD_EXP 7
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: LD_INT 0
10015: PPUSH
10016: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_INT 3
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 69
10053: PUSH
10054: FOR_IN
10055: IFFALSE 10165
// begin ComExitBuilding ( i ) ;
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL_OW 122
// wait ( 0 0$1 ) ;
10066: LD_INT 35
10068: PPUSH
10069: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10073: LD_VAR 0 2
10077: PPUSH
10078: LD_INT 120
10080: PPUSH
10081: LD_INT 56
10083: PPUSH
10084: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_INT 111
10095: PPUSH
10096: LD_INT 37
10098: PPUSH
10099: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10103: LD_INT 33
10105: PPUSH
10106: CALL_OW 255
10110: PUSH
10111: LD_INT 3
10113: EQUAL
10114: PUSH
10115: LD_INT 33
10117: PPUSH
10118: CALL_OW 302
10122: AND
10123: IFFALSE 10139
// AddComEnterUnit ( i , arm2 ) else
10125: LD_VAR 0 2
10129: PPUSH
10130: LD_INT 33
10132: PPUSH
10133: CALL_OW 180
10137: GO 10163
// begin AddComCrawl ( i ) ;
10139: LD_VAR 0 2
10143: PPUSH
10144: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: LD_INT 109
10155: PPUSH
10156: LD_INT 30
10158: PPUSH
10159: CALL_OW 174
// end ; end ;
10163: GO 10054
10165: POP
10166: POP
// end ;
10167: LD_VAR 0 1
10171: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10172: LD_INT 0
10174: PPUSH
10175: PPUSH
10176: PPUSH
10177: PPUSH
10178: PPUSH
// nearestDist := 1000 ;
10179: LD_ADDR_VAR 0 4
10183: PUSH
10184: LD_INT 1000
10186: ST_TO_ADDR
// nearestUn := un ;
10187: LD_ADDR_VAR 0 5
10191: PUSH
10192: LD_VAR 0 1
10196: ST_TO_ADDR
// for sold in units do
10197: LD_ADDR_VAR 0 6
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: FOR_IN
10208: IFFALSE 10264
// begin dist := GetDistUnits ( un , sold ) ;
10210: LD_ADDR_VAR 0 7
10214: PUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_VAR 0 6
10224: PPUSH
10225: CALL_OW 296
10229: ST_TO_ADDR
// if dist < nearestDist then
10230: LD_VAR 0 7
10234: PUSH
10235: LD_VAR 0 4
10239: LESS
10240: IFFALSE 10262
// begin nearestUn := sold ;
10242: LD_ADDR_VAR 0 5
10246: PUSH
10247: LD_VAR 0 6
10251: ST_TO_ADDR
// nearestDist := dist ;
10252: LD_ADDR_VAR 0 4
10256: PUSH
10257: LD_VAR 0 7
10261: ST_TO_ADDR
// end ; end ;
10262: GO 10207
10264: POP
10265: POP
// result := NearestUn ;
10266: LD_ADDR_VAR 0 3
10270: PUSH
10271: LD_VAR 0 5
10275: ST_TO_ADDR
// end ;
10276: LD_VAR 0 3
10280: RET
// export function PrepareDifficulty ; begin
10281: LD_INT 0
10283: PPUSH
// if Difficulty = 1 then
10284: LD_OWVAR 67
10288: PUSH
10289: LD_INT 1
10291: EQUAL
10292: IFFALSE 10355
// begin RemoveUnit ( brw2 ) ;
10294: LD_INT 9
10296: PPUSH
10297: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10301: LD_INT 30
10303: PPUSH
10304: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10308: LD_INT 52
10310: PPUSH
10311: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10315: LD_INT 63
10317: PPUSH
10318: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10322: LD_INT 5
10324: PUSH
10325: LD_INT 4
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 60
10334: PPUSH
10335: CALL_OW 240
// RuSoldMinLevel = 0 ;
10339: LD_ADDR_EXP 13
10343: PUSH
10344: LD_INT 0
10346: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10347: LD_ADDR_EXP 14
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// end ; if Difficulty = 2 then
10355: LD_OWVAR 67
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: IFFALSE 10405
// begin RemoveUnit ( brw4 ) ;
10365: LD_INT 52
10367: PPUSH
10368: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10372: LD_INT 5
10374: PUSH
10375: LD_INT 4
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: LD_INT 50
10384: PPUSH
10385: CALL_OW 240
// RuSoldMinLevel = 1 ;
10389: LD_ADDR_EXP 13
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10397: LD_ADDR_EXP 14
10401: PUSH
10402: LD_INT 2
10404: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10405: LD_OWVAR 67
10409: PUSH
10410: LD_INT 3
10412: GREATEREQUAL
10413: IFFALSE 10448
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10415: LD_INT 5
10417: PUSH
10418: LD_INT 4
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: LD_INT 40
10427: PPUSH
10428: CALL_OW 240
// RuSoldMinLevel = 2 ;
10432: LD_ADDR_EXP 13
10436: PUSH
10437: LD_INT 2
10439: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10440: LD_ADDR_EXP 14
10444: PUSH
10445: LD_INT 3
10447: ST_TO_ADDR
// end ; end ;
10448: LD_VAR 0 1
10452: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
// if not vehicles then
10458: LD_VAR 0 1
10462: NOT
10463: IFFALSE 10467
// exit ;
10465: GO 10597
// tmp := [ ] ;
10467: LD_ADDR_VAR 0 5
10471: PUSH
10472: EMPTY
10473: ST_TO_ADDR
// for i in vehicles do
10474: LD_ADDR_VAR 0 4
10478: PUSH
10479: LD_VAR 0 1
10483: PUSH
10484: FOR_IN
10485: IFFALSE 10581
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10487: LD_ADDR_VAR 0 5
10491: PUSH
10492: LD_VAR 0 5
10496: PPUSH
10497: LD_VAR 0 5
10501: PUSH
10502: LD_INT 1
10504: PLUS
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_VAR 0 4
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: CALL_OW 263
10535: PUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: CALL_OW 261
10555: PUSH
10556: LD_VAR 0 4
10560: PPUSH
10561: CALL_OW 256
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 1
10578: ST_TO_ADDR
10579: GO 10484
10581: POP
10582: POP
// SaveVariable ( tmp , ident ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 39
// end ; end_of_file
10597: LD_VAR 0 3
10601: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
10606: PPUSH
// prefix := 01_ ;
10607: LD_ADDR_VAR 0 3
10611: PUSH
10612: LD_STRING 01_
10614: ST_TO_ADDR
// uc_side := 1 ;
10615: LD_ADDR_OWVAR 20
10619: PUSH
10620: LD_INT 1
10622: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10623: LD_ADDR_EXP 1
10627: PUSH
10628: LD_STRING JMM
10630: PPUSH
10631: LD_EXP 34
10635: NOT
10636: PPUSH
10637: LD_VAR 0 3
10641: PPUSH
10642: CALL 33598 0 3
10646: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10647: LD_ADDR_VAR 0 2
10651: PUSH
10652: LD_STRING 01_JMMLifePoints_1
10654: PPUSH
10655: LD_INT 1000
10657: PPUSH
10658: CALL_OW 30
10662: ST_TO_ADDR
// if plive < 250 then
10663: LD_VAR 0 2
10667: PUSH
10668: LD_INT 250
10670: LESS
10671: IFFALSE 10681
// plive := 300 ;
10673: LD_ADDR_VAR 0 2
10677: PUSH
10678: LD_INT 300
10680: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10681: LD_EXP 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10695: LD_ADDR_EXP 9
10699: PUSH
10700: LD_STRING Powell
10702: PPUSH
10703: CALL_OW 25
10707: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10708: LD_ADDR_EXP 2
10712: PUSH
10713: LD_STRING Bobby
10715: PPUSH
10716: LD_EXP 34
10720: NOT
10721: PPUSH
10722: LD_VAR 0 3
10726: PPUSH
10727: CALL 33598 0 3
10731: ST_TO_ADDR
// if Bobby then
10732: LD_EXP 2
10736: IFFALSE 10786
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10738: LD_ADDR_VAR 0 2
10742: PUSH
10743: LD_STRING 01_BobbyLifePoints_1
10745: PPUSH
10746: LD_INT 1000
10748: PPUSH
10749: CALL_OW 30
10753: ST_TO_ADDR
// if plive < 250 then
10754: LD_VAR 0 2
10758: PUSH
10759: LD_INT 250
10761: LESS
10762: IFFALSE 10772
// plive := 300 ;
10764: LD_ADDR_VAR 0 2
10768: PUSH
10769: LD_INT 300
10771: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10772: LD_EXP 2
10776: PPUSH
10777: LD_VAR 0 2
10781: PPUSH
10782: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
10786: LD_ADDR_EXP 3
10790: PUSH
10791: LD_STRING Cyrus
10793: PPUSH
10794: LD_EXP 34
10798: NOT
10799: PPUSH
10800: LD_VAR 0 3
10804: PPUSH
10805: CALL 33598 0 3
10809: ST_TO_ADDR
// if Cyrus then
10810: LD_EXP 3
10814: IFFALSE 10864
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10816: LD_ADDR_VAR 0 2
10820: PUSH
10821: LD_STRING 01_CyrusLifePoints_1
10823: PPUSH
10824: LD_INT 1000
10826: PPUSH
10827: CALL_OW 30
10831: ST_TO_ADDR
// if plive < 250 then
10832: LD_VAR 0 2
10836: PUSH
10837: LD_INT 250
10839: LESS
10840: IFFALSE 10850
// plive := 300 ;
10842: LD_ADDR_VAR 0 2
10846: PUSH
10847: LD_INT 300
10849: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10850: LD_EXP 3
10854: PPUSH
10855: LD_VAR 0 2
10859: PPUSH
10860: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
10864: LD_ADDR_EXP 5
10868: PUSH
10869: LD_STRING Khatam
10871: PPUSH
10872: CALL_OW 25
10876: ST_TO_ADDR
// uc_side := 4 ;
10877: LD_ADDR_OWVAR 20
10881: PUSH
10882: LD_INT 4
10884: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10885: LD_ADDR_EXP 4
10889: PUSH
10890: LD_STRING Lisa
10892: PPUSH
10893: CALL_OW 25
10897: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10898: LD_EXP 1
10902: PPUSH
10903: LD_INT 3
10905: PPUSH
10906: LD_INT 0
10908: PPUSH
10909: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10913: LD_EXP 2
10917: PPUSH
10918: LD_INT 3
10920: PPUSH
10921: LD_INT 0
10923: PPUSH
10924: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10928: LD_EXP 3
10932: PPUSH
10933: LD_INT 3
10935: PPUSH
10936: LD_INT 0
10938: PPUSH
10939: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10943: LD_EXP 4
10947: PPUSH
10948: LD_INT 5
10950: PPUSH
10951: LD_INT 0
10953: PPUSH
10954: CALL_OW 49
// ComCrawl ( Lisa ) ;
10958: LD_EXP 4
10962: PPUSH
10963: CALL_OW 137
// end ;
10967: LD_VAR 0 1
10971: RET
// export function PrepareLisSquad ; var i , un ; begin
10972: LD_INT 0
10974: PPUSH
10975: PPUSH
10976: PPUSH
// uc_side := 4 ;
10977: LD_ADDR_OWVAR 20
10981: PUSH
10982: LD_INT 4
10984: ST_TO_ADDR
// uc_nation := 1 ;
10985: LD_ADDR_OWVAR 21
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// hc_class := 2 ;
10993: LD_ADDR_OWVAR 28
10997: PUSH
10998: LD_INT 2
11000: ST_TO_ADDR
// hc_sex := sex_male ;
11001: LD_ADDR_OWVAR 27
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// hc_gallery :=  ;
11009: LD_ADDR_OWVAR 33
11013: PUSH
11014: LD_STRING 
11016: ST_TO_ADDR
// hc_name :=  ;
11017: LD_ADDR_OWVAR 26
11021: PUSH
11022: LD_STRING 
11024: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11025: LD_ADDR_OWVAR 30
11029: PUSH
11030: LD_INT 0
11032: PUSH
11033: LD_INT 1
11035: PUSH
11036: LD_INT 0
11038: PUSH
11039: LD_INT 0
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11048: LD_ADDR_OWVAR 31
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: LD_INT 2
11058: PUSH
11059: LD_INT 0
11061: PUSH
11062: LD_INT 0
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: ST_TO_ADDR
// un := CreateHuman ;
11071: LD_ADDR_VAR 0 3
11075: PUSH
11076: CALL_OW 44
11080: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11081: LD_VAR 0 3
11085: PPUSH
11086: LD_INT 6
11088: PPUSH
11089: LD_INT 0
11091: PPUSH
11092: CALL_OW 49
// hc_sex := sex_female ;
11096: LD_ADDR_OWVAR 27
11100: PUSH
11101: LD_INT 2
11103: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11104: LD_ADDR_OWVAR 30
11108: PUSH
11109: LD_INT 0
11111: PUSH
11112: LD_INT 0
11114: PUSH
11115: LD_INT 0
11117: PUSH
11118: LD_INT 1
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11127: LD_ADDR_OWVAR 31
11131: PUSH
11132: LD_INT 0
11134: PUSH
11135: LD_INT 1
11137: PUSH
11138: LD_INT 0
11140: PUSH
11141: LD_INT 1
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: ST_TO_ADDR
// un := CreateHuman ;
11150: LD_ADDR_VAR 0 3
11154: PUSH
11155: CALL_OW 44
11159: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11160: LD_VAR 0 3
11164: PPUSH
11165: LD_INT 6
11167: PPUSH
11168: LD_INT 0
11170: PPUSH
11171: CALL_OW 49
// if not Bobby and not Cyrus then
11175: LD_EXP 2
11179: NOT
11180: PUSH
11181: LD_EXP 3
11185: NOT
11186: AND
11187: IFFALSE 11276
// begin hc_class := 1 ;
11189: LD_ADDR_OWVAR 28
11193: PUSH
11194: LD_INT 1
11196: ST_TO_ADDR
// hc_sex := sex_male ;
11197: LD_ADDR_OWVAR 27
11201: PUSH
11202: LD_INT 1
11204: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11205: LD_ADDR_OWVAR 30
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: LD_INT 1
11218: PUSH
11219: LD_INT 0
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11228: LD_ADDR_OWVAR 31
11232: PUSH
11233: LD_INT 2
11235: PUSH
11236: LD_INT 3
11238: PUSH
11239: LD_INT 1
11241: PUSH
11242: LD_INT 0
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: ST_TO_ADDR
// un := CreateHuman ;
11251: LD_ADDR_VAR 0 3
11255: PUSH
11256: CALL_OW 44
11260: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11261: LD_VAR 0 3
11265: PPUSH
11266: LD_INT 31
11268: PPUSH
11269: LD_INT 0
11271: PPUSH
11272: CALL_OW 49
// end ; InitHc ;
11276: CALL_OW 19
// end ;
11280: LD_VAR 0 1
11284: RET
// export function PrepareOtherAmericans ; begin
11285: LD_INT 0
11287: PPUSH
// uc_side := 4 ;
11288: LD_ADDR_OWVAR 20
11292: PUSH
11293: LD_INT 4
11295: ST_TO_ADDR
// uc_nation := 1 ;
11296: LD_ADDR_OWVAR 21
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// hc_gallery :=  ;
11304: LD_ADDR_OWVAR 33
11308: PUSH
11309: LD_STRING 
11311: ST_TO_ADDR
// hc_name := Tom Garvin ;
11312: LD_ADDR_OWVAR 26
11316: PUSH
11317: LD_STRING Tom Garvin
11319: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11320: LD_INT 1
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: LD_INT 2
11328: PPUSH
11329: CALL_OW 380
// Brian := CreateHuman ;
11333: LD_ADDR_EXP 6
11337: PUSH
11338: CALL_OW 44
11342: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11343: LD_EXP 6
11347: PPUSH
11348: LD_INT 10
11350: PPUSH
11351: LD_INT 0
11353: PPUSH
11354: CALL_OW 49
// hc_name := Jerry White ;
11358: LD_ADDR_OWVAR 26
11362: PUSH
11363: LD_STRING Jerry White
11365: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11366: LD_INT 1
11368: PPUSH
11369: LD_INT 3
11371: PPUSH
11372: LD_INT 2
11374: PPUSH
11375: CALL_OW 380
// Jerry := CreateHuman ;
11379: LD_ADDR_EXP 7
11383: PUSH
11384: CALL_OW 44
11388: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11389: LD_EXP 7
11393: PPUSH
11394: LD_INT 10
11396: PPUSH
11397: LD_INT 0
11399: PPUSH
11400: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11404: LD_EXP 6
11408: PUSH
11409: LD_EXP 7
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PPUSH
11418: CALL_OW 140
// end ;
11422: LD_VAR 0 1
11426: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11427: LD_INT 0
11429: PPUSH
11430: PPUSH
11431: PPUSH
// for i = 1 to 6 do
11432: LD_ADDR_VAR 0 2
11436: PUSH
11437: DOUBLE
11438: LD_INT 1
11440: DEC
11441: ST_TO_ADDR
11442: LD_INT 6
11444: PUSH
11445: FOR_TO
11446: IFFALSE 11540
// begin uc_side := 4 ;
11448: LD_ADDR_OWVAR 20
11452: PUSH
11453: LD_INT 4
11455: ST_TO_ADDR
// uc_nation := 1 ;
11456: LD_ADDR_OWVAR 21
11460: PUSH
11461: LD_INT 1
11463: ST_TO_ADDR
// hc_gallery :=  ;
11464: LD_ADDR_OWVAR 33
11468: PUSH
11469: LD_STRING 
11471: ST_TO_ADDR
// hc_name :=  ;
11472: LD_ADDR_OWVAR 26
11476: PUSH
11477: LD_STRING 
11479: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11480: LD_INT 0
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: LD_INT 4
11488: PPUSH
11489: CALL_OW 12
11493: PPUSH
11494: LD_INT 1
11496: PPUSH
11497: CALL_OW 380
// un := CreateHuman ;
11501: LD_ADDR_VAR 0 3
11505: PUSH
11506: CALL_OW 44
11510: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11511: LD_VAR 0 3
11515: PPUSH
11516: LD_INT 16
11518: PPUSH
11519: LD_INT 0
11521: PPUSH
11522: CALL_OW 49
// SetLives ( un , 1 ) ;
11526: LD_VAR 0 3
11530: PPUSH
11531: LD_INT 1
11533: PPUSH
11534: CALL_OW 234
// end ;
11538: GO 11445
11540: POP
11541: POP
// DyingSold := CreateHuman ;
11542: LD_ADDR_EXP 35
11546: PUSH
11547: CALL_OW 44
11551: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11552: LD_EXP 35
11556: PPUSH
11557: LD_INT 16
11559: PPUSH
11560: LD_INT 0
11562: PPUSH
11563: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11567: LD_EXP 35
11571: PPUSH
11572: LD_INT 250
11574: PPUSH
11575: CALL_OW 234
// end ; end_of_file
11579: LD_VAR 0 1
11583: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11584: LD_INT 0
11586: PPUSH
11587: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11588: LD_ADDR_VAR 0 2
11592: PUSH
11593: LD_INT 22
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 23
11605: PUSH
11606: LD_INT 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 25
11615: PUSH
11616: LD_INT 2
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 50
11625: PUSH
11626: EMPTY
11627: LIST
11628: PUSH
11629: LD_INT 56
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PPUSH
11642: CALL_OW 69
11646: PUSH
11647: LD_EXP 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: DIFF
11655: ST_TO_ADDR
// if not tmp then
11656: LD_VAR 0 2
11660: NOT
11661: IFFALSE 11665
// exit ;
11663: GO 11741
// uc_side = 6 ;
11665: LD_ADDR_OWVAR 20
11669: PUSH
11670: LD_INT 6
11672: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11673: LD_ADDR_EXP 8
11677: PUSH
11678: LD_STRING Mikhail
11680: PPUSH
11681: CALL_OW 25
11685: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11686: LD_EXP 8
11690: PPUSH
11691: LD_INT 3
11693: PPUSH
11694: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11698: LD_EXP 8
11702: PPUSH
11703: LD_VAR 0 2
11707: PUSH
11708: LD_INT 1
11710: ARRAY
11711: PPUSH
11712: CALL_OW 250
11716: PPUSH
11717: LD_VAR 0 2
11721: PUSH
11722: LD_INT 1
11724: ARRAY
11725: PPUSH
11726: CALL_OW 251
11730: PPUSH
11731: LD_INT 5
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 50
// end ;
11741: LD_VAR 0 1
11745: RET
// export function PrepareRussianCommander ; begin
11746: LD_INT 0
11748: PPUSH
// uc_side = 3 ;
11749: LD_ADDR_OWVAR 20
11753: PUSH
11754: LD_INT 3
11756: ST_TO_ADDR
// uc_nation = 3 ;
11757: LD_ADDR_OWVAR 21
11761: PUSH
11762: LD_INT 3
11764: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11765: LD_ADDR_EXP 19
11769: PUSH
11770: LD_STRING Natasza
11772: PPUSH
11773: CALL_OW 25
11777: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11778: LD_EXP 19
11782: PPUSH
11783: LD_INT 24
11785: PPUSH
11786: LD_INT 0
11788: PPUSH
11789: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11793: LD_EXP 19
11797: PPUSH
11798: LD_INT 56
11800: PPUSH
11801: LD_INT 16
11803: PPUSH
11804: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
11808: LD_ADDR_EXP 24
11812: PUSH
11813: LD_EXP 24
11817: PPUSH
11818: LD_EXP 24
11822: PUSH
11823: LD_INT 1
11825: PLUS
11826: PPUSH
11827: LD_EXP 19
11831: PPUSH
11832: CALL_OW 1
11836: ST_TO_ADDR
// end ;
11837: LD_VAR 0 1
11841: RET
// export function PrepareSouthBase ; var i , un ; begin
11842: LD_INT 0
11844: PPUSH
11845: PPUSH
11846: PPUSH
// for i = 1 to 2 do
11847: LD_ADDR_VAR 0 2
11851: PUSH
11852: DOUBLE
11853: LD_INT 1
11855: DEC
11856: ST_TO_ADDR
11857: LD_INT 2
11859: PUSH
11860: FOR_TO
11861: IFFALSE 11970
// begin uc_side = 3 ;
11863: LD_ADDR_OWVAR 20
11867: PUSH
11868: LD_INT 3
11870: ST_TO_ADDR
// uc_nation = 3 ;
11871: LD_ADDR_OWVAR 21
11875: PUSH
11876: LD_INT 3
11878: ST_TO_ADDR
// hc_gallery =  ;
11879: LD_ADDR_OWVAR 33
11883: PUSH
11884: LD_STRING 
11886: ST_TO_ADDR
// hc_name =  ;
11887: LD_ADDR_OWVAR 26
11891: PUSH
11892: LD_STRING 
11894: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11895: LD_INT 1
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_EXP 13
11905: PPUSH
11906: LD_EXP 14
11910: PPUSH
11911: CALL_OW 12
11915: PPUSH
11916: CALL_OW 380
// hc_importance = 0 ;
11920: LD_ADDR_OWVAR 32
11924: PUSH
11925: LD_INT 0
11927: ST_TO_ADDR
// un = CreateHuman ;
11928: LD_ADDR_VAR 0 3
11932: PUSH
11933: CALL_OW 44
11937: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11938: LD_VAR 0 3
11942: PPUSH
11943: LD_INT 11
11945: PPUSH
11946: LD_INT 0
11948: PPUSH
11949: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_INT 111
11960: PPUSH
11961: LD_INT 38
11963: PPUSH
11964: CALL_OW 118
// end ;
11968: GO 11860
11970: POP
11971: POP
// for i = 1 to 2 do
11972: LD_ADDR_VAR 0 2
11976: PUSH
11977: DOUBLE
11978: LD_INT 1
11980: DEC
11981: ST_TO_ADDR
11982: LD_INT 2
11984: PUSH
11985: FOR_TO
11986: IFFALSE 12069
// begin uc_side = 3 ;
11988: LD_ADDR_OWVAR 20
11992: PUSH
11993: LD_INT 3
11995: ST_TO_ADDR
// uc_nation = 3 ;
11996: LD_ADDR_OWVAR 21
12000: PUSH
12001: LD_INT 3
12003: ST_TO_ADDR
// hc_gallery =  ;
12004: LD_ADDR_OWVAR 33
12008: PUSH
12009: LD_STRING 
12011: ST_TO_ADDR
// hc_name =  ;
12012: LD_ADDR_OWVAR 26
12016: PUSH
12017: LD_STRING 
12019: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12020: LD_INT 0
12022: PPUSH
12023: LD_INT 3
12025: PPUSH
12026: LD_EXP 13
12030: PPUSH
12031: LD_EXP 14
12035: PPUSH
12036: CALL_OW 12
12040: PPUSH
12041: CALL_OW 380
// un = CreateHuman ;
12045: LD_ADDR_VAR 0 3
12049: PUSH
12050: CALL_OW 44
12054: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12055: LD_VAR 0 3
12059: PPUSH
12060: LD_INT 10
12062: PPUSH
12063: CALL_OW 52
// end ;
12067: GO 11985
12069: POP
12070: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12071: LD_INT 3
12073: PPUSH
12074: LD_INT 3
12076: PPUSH
12077: LD_INT 33
12079: PPUSH
12080: LD_EXP 13
12084: PPUSH
12085: LD_EXP 14
12089: PPUSH
12090: CALL_OW 12
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: LD_INT 1
12100: PUSH
12101: LD_INT 2
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: LD_INT 3
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: LD_OWVAR 67
12120: ARRAY
12121: PPUSH
12122: CALL 8729 0 6
// for i in UnitsInside ( arm2 ) do
12126: LD_ADDR_VAR 0 2
12130: PUSH
12131: LD_INT 33
12133: PPUSH
12134: CALL_OW 313
12138: PUSH
12139: FOR_IN
12140: IFFALSE 12173
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12142: LD_ADDR_EXP 25
12146: PUSH
12147: LD_EXP 25
12151: PPUSH
12152: LD_EXP 25
12156: PUSH
12157: LD_INT 1
12159: PLUS
12160: PPUSH
12161: LD_VAR 0 2
12165: PPUSH
12166: CALL_OW 1
12170: ST_TO_ADDR
12171: GO 12139
12173: POP
12174: POP
// end ;
12175: LD_VAR 0 1
12179: RET
// export function PrepareNorthBase ; var i , un ; begin
12180: LD_INT 0
12182: PPUSH
12183: PPUSH
12184: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: DOUBLE
12191: LD_INT 1
12193: DEC
12194: ST_TO_ADDR
12195: LD_INT 1
12197: PPUSH
12198: LD_INT 2
12200: PPUSH
12201: CALL_OW 12
12205: PUSH
12206: LD_INT 2
12208: PPUSH
12209: LD_INT 3
12211: PPUSH
12212: CALL_OW 12
12216: PUSH
12217: LD_INT 3
12219: PPUSH
12220: LD_INT 4
12222: PPUSH
12223: CALL_OW 12
12227: PUSH
12228: LD_INT 4
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: LD_OWVAR 67
12241: ARRAY
12242: PUSH
12243: FOR_TO
12244: IFFALSE 12330
// begin uc_side = 3 ;
12246: LD_ADDR_OWVAR 20
12250: PUSH
12251: LD_INT 3
12253: ST_TO_ADDR
// uc_nation = 3 ;
12254: LD_ADDR_OWVAR 21
12258: PUSH
12259: LD_INT 3
12261: ST_TO_ADDR
// hc_gallery =  ;
12262: LD_ADDR_OWVAR 33
12266: PUSH
12267: LD_STRING 
12269: ST_TO_ADDR
// hc_name =  ;
12270: LD_ADDR_OWVAR 26
12274: PUSH
12275: LD_STRING 
12277: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12278: LD_INT 0
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: LD_EXP 13
12288: PPUSH
12289: LD_EXP 14
12293: PPUSH
12294: CALL_OW 12
12298: PPUSH
12299: CALL_OW 380
// un = CreateHuman ;
12303: LD_ADDR_VAR 0 3
12307: PUSH
12308: CALL_OW 44
12312: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12313: LD_VAR 0 3
12317: PPUSH
12318: LD_INT 14
12320: PPUSH
12321: LD_INT 0
12323: PPUSH
12324: CALL_OW 49
// end ;
12328: GO 12243
12330: POP
12331: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12332: LD_INT 3
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: LD_INT 2
12340: PPUSH
12341: LD_EXP 13
12345: PPUSH
12346: LD_EXP 14
12350: PPUSH
12351: CALL_OW 12
12355: PPUSH
12356: LD_INT 1
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_INT 2
12364: PPUSH
12365: CALL_OW 12
12369: PUSH
12370: LD_INT 1
12372: PPUSH
12373: LD_INT 3
12375: PPUSH
12376: CALL_OW 12
12380: PUSH
12381: LD_INT 1
12383: PPUSH
12384: LD_INT 3
12386: PPUSH
12387: CALL_OW 12
12391: PUSH
12392: LD_INT 4
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: PUSH
12401: LD_OWVAR 67
12405: ARRAY
12406: PPUSH
12407: CALL 8729 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12411: LD_INT 3
12413: PPUSH
12414: LD_INT 3
12416: PPUSH
12417: LD_INT 23
12419: PPUSH
12420: LD_EXP 13
12424: PPUSH
12425: LD_EXP 14
12429: PPUSH
12430: CALL_OW 12
12434: PPUSH
12435: LD_INT 4
12437: PPUSH
12438: LD_INT 0
12440: PUSH
12441: LD_INT 1
12443: PUSH
12444: LD_INT 2
12446: PUSH
12447: LD_INT 2
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: LD_OWVAR 67
12460: ARRAY
12461: PPUSH
12462: CALL 8729 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12466: LD_INT 3
12468: PPUSH
12469: LD_INT 3
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: LD_EXP 13
12479: PPUSH
12480: LD_EXP 14
12484: PPUSH
12485: CALL_OW 12
12489: PPUSH
12490: LD_INT 2
12492: PPUSH
12493: LD_INT 1
12495: PUSH
12496: LD_INT 2
12498: PUSH
12499: LD_INT 2
12501: PUSH
12502: LD_INT 3
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: PUSH
12511: LD_OWVAR 67
12515: ARRAY
12516: PPUSH
12517: CALL 8729 0 6
// for i in UnitsInside ( arm1 ) do
12521: LD_ADDR_VAR 0 2
12525: PUSH
12526: LD_INT 2
12528: PPUSH
12529: CALL_OW 313
12533: PUSH
12534: FOR_IN
12535: IFFALSE 12568
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12537: LD_ADDR_EXP 24
12541: PUSH
12542: LD_EXP 24
12546: PPUSH
12547: LD_EXP 24
12551: PUSH
12552: LD_INT 1
12554: PLUS
12555: PPUSH
12556: LD_VAR 0 2
12560: PPUSH
12561: CALL_OW 1
12565: ST_TO_ADDR
12566: GO 12534
12568: POP
12569: POP
// end ;
12570: LD_VAR 0 1
12574: RET
// export function PrepareOtherRussians ; var i , un ; begin
12575: LD_INT 0
12577: PPUSH
12578: PPUSH
12579: PPUSH
// for i = 1 to 2 do
12580: LD_ADDR_VAR 0 2
12584: PUSH
12585: DOUBLE
12586: LD_INT 1
12588: DEC
12589: ST_TO_ADDR
12590: LD_INT 2
12592: PUSH
12593: FOR_TO
12594: IFFALSE 12695
// begin uc_side = 3 ;
12596: LD_ADDR_OWVAR 20
12600: PUSH
12601: LD_INT 3
12603: ST_TO_ADDR
// uc_nation = 3 ;
12604: LD_ADDR_OWVAR 21
12608: PUSH
12609: LD_INT 3
12611: ST_TO_ADDR
// hc_gallery =  ;
12612: LD_ADDR_OWVAR 33
12616: PUSH
12617: LD_STRING 
12619: ST_TO_ADDR
// hc_name =  ;
12620: LD_ADDR_OWVAR 26
12624: PUSH
12625: LD_STRING 
12627: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12628: LD_INT 0
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: LD_EXP 13
12638: PPUSH
12639: LD_EXP 14
12643: PPUSH
12644: CALL_OW 12
12648: PPUSH
12649: CALL_OW 380
// un = CreateHuman ;
12653: LD_ADDR_VAR 0 3
12657: PUSH
12658: CALL_OW 44
12662: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12663: LD_VAR 0 3
12667: PPUSH
12668: LD_INT 9
12670: PPUSH
12671: LD_INT 0
12673: PPUSH
12674: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12678: LD_VAR 0 3
12682: PPUSH
12683: LD_INT 80
12685: PPUSH
12686: LD_INT 73
12688: PPUSH
12689: CALL_OW 118
// end ;
12693: GO 12593
12695: POP
12696: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12697: LD_ADDR_VAR 0 2
12701: PUSH
12702: LD_INT 22
12704: PUSH
12705: LD_INT 3
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 30
12714: PUSH
12715: LD_INT 31
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PPUSH
12726: CALL_OW 69
12730: PUSH
12731: FOR_IN
12732: IFFALSE 12760
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12734: LD_EXP 13
12738: PPUSH
12739: LD_EXP 14
12743: PPUSH
12744: CALL_OW 12
12748: PPUSH
12749: LD_VAR 0 2
12753: PPUSH
12754: CALL 8838 0 2
12758: GO 12731
12760: POP
12761: POP
// end ;
12762: LD_VAR 0 1
12766: RET
// export function PrepareCargoBays ; begin
12767: LD_INT 0
12769: PPUSH
// uc_side = 3 ;
12770: LD_ADDR_OWVAR 20
12774: PUSH
12775: LD_INT 3
12777: ST_TO_ADDR
// uc_nation = 3 ;
12778: LD_ADDR_OWVAR 21
12782: PUSH
12783: LD_INT 3
12785: ST_TO_ADDR
// vc_engine = 1 ;
12786: LD_ADDR_OWVAR 39
12790: PUSH
12791: LD_INT 1
12793: ST_TO_ADDR
// vc_control = 1 ;
12794: LD_ADDR_OWVAR 38
12798: PUSH
12799: LD_INT 1
12801: ST_TO_ADDR
// vc_weapon = 51 ;
12802: LD_ADDR_OWVAR 40
12806: PUSH
12807: LD_INT 51
12809: ST_TO_ADDR
// vc_chassis = 22 ;
12810: LD_ADDR_OWVAR 37
12814: PUSH
12815: LD_INT 22
12817: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12818: LD_ADDR_EXP 15
12822: PUSH
12823: CALL_OW 45
12827: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12828: LD_ADDR_EXP 16
12832: PUSH
12833: CALL_OW 45
12837: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12838: LD_EXP 15
12842: PPUSH
12843: LD_INT 13
12845: PPUSH
12846: LD_INT 0
12848: PPUSH
12849: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12853: LD_EXP 16
12857: PPUSH
12858: LD_INT 13
12860: PPUSH
12861: LD_INT 0
12863: PPUSH
12864: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12868: LD_EXP 15
12872: PPUSH
12873: LD_INT 2
12875: PPUSH
12876: LD_INT 70
12878: PUSH
12879: LD_INT 50
12881: PUSH
12882: LD_INT 30
12884: PUSH
12885: LD_INT 20
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: PUSH
12894: LD_OWVAR 67
12898: ARRAY
12899: PPUSH
12900: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12904: LD_EXP 16
12908: PPUSH
12909: LD_INT 2
12911: PPUSH
12912: LD_INT 70
12914: PUSH
12915: LD_INT 50
12917: PUSH
12918: LD_INT 30
12920: PUSH
12921: LD_INT 20
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: PUSH
12930: LD_OWVAR 67
12934: ARRAY
12935: PPUSH
12936: CALL_OW 291
// hc_gallery =  ;
12940: LD_ADDR_OWVAR 33
12944: PUSH
12945: LD_STRING 
12947: ST_TO_ADDR
// hc_name =  ;
12948: LD_ADDR_OWVAR 26
12952: PUSH
12953: LD_STRING 
12955: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12956: LD_INT 1
12958: PPUSH
12959: LD_INT 3
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: LD_INT 2
12967: PPUSH
12968: CALL_OW 12
12972: PPUSH
12973: CALL_OW 380
// driver1 = CreateHuman ;
12977: LD_ADDR_EXP 17
12981: PUSH
12982: CALL_OW 44
12986: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12987: LD_EXP 17
12991: PPUSH
12992: LD_EXP 15
12996: PPUSH
12997: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13001: LD_ADDR_OWVAR 26
13005: PUSH
13006: LD_STRING Nikolai Andreyev
13008: ST_TO_ADDR
// driver2 = CreateHuman ;
13009: LD_ADDR_EXP 18
13013: PUSH
13014: CALL_OW 44
13018: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13019: LD_EXP 18
13023: PPUSH
13024: LD_EXP 16
13028: PPUSH
13029: CALL_OW 52
// end ;
13033: LD_VAR 0 1
13037: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13038: LD_INT 0
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
13044: PPUSH
13045: PPUSH
// uc_side = 3 ;
13046: LD_ADDR_OWVAR 20
13050: PUSH
13051: LD_INT 3
13053: ST_TO_ADDR
// uc_nation = 3 ;
13054: LD_ADDR_OWVAR 21
13058: PUSH
13059: LD_INT 3
13061: ST_TO_ADDR
// for i := 1 to count do
13062: LD_ADDR_VAR 0 4
13066: PUSH
13067: DOUBLE
13068: LD_INT 1
13070: DEC
13071: ST_TO_ADDR
13072: LD_VAR 0 1
13076: PUSH
13077: FOR_TO
13078: IFFALSE 13340
// begin vc_engine = 1 ;
13080: LD_ADDR_OWVAR 39
13084: PUSH
13085: LD_INT 1
13087: ST_TO_ADDR
// vc_control = 1 ;
13088: LD_ADDR_OWVAR 38
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13096: LD_ADDR_OWVAR 40
13100: PUSH
13101: LD_INT 42
13103: ST_TO_ADDR
// if Difficulty = 3 then
13104: LD_OWVAR 67
13108: PUSH
13109: LD_INT 3
13111: EQUAL
13112: IFFALSE 13141
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13114: LD_ADDR_OWVAR 40
13118: PUSH
13119: LD_INT 42
13121: PUSH
13122: LD_INT 43
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 1
13131: PPUSH
13132: LD_INT 2
13134: PPUSH
13135: CALL_OW 12
13139: ARRAY
13140: ST_TO_ADDR
// if Difficulty = 4 then
13141: LD_OWVAR 67
13145: PUSH
13146: LD_INT 4
13148: EQUAL
13149: IFFALSE 13186
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13151: LD_ADDR_OWVAR 40
13155: PUSH
13156: LD_INT 42
13158: PUSH
13159: LD_INT 43
13161: PUSH
13162: LD_INT 43
13164: PUSH
13165: LD_INT 44
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 1
13176: PPUSH
13177: LD_INT 4
13179: PPUSH
13180: CALL_OW 12
13184: ARRAY
13185: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13186: LD_ADDR_OWVAR 37
13190: PUSH
13191: LD_INT 21
13193: PUSH
13194: LD_INT 22
13196: PUSH
13197: LD_INT 22
13199: PUSH
13200: LD_INT 22
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: PUSH
13209: LD_OWVAR 67
13213: ARRAY
13214: ST_TO_ADDR
// veh = CreateVehicle ;
13215: LD_ADDR_VAR 0 5
13219: PUSH
13220: CALL_OW 45
13224: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13225: LD_VAR 0 5
13229: PPUSH
13230: LD_VAR 0 2
13234: PPUSH
13235: LD_INT 0
13237: PPUSH
13238: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13242: LD_ADDR_EXP 26
13246: PUSH
13247: LD_EXP 26
13251: PUSH
13252: LD_VAR 0 5
13256: ADD
13257: ST_TO_ADDR
// hc_gallery =  ;
13258: LD_ADDR_OWVAR 33
13262: PUSH
13263: LD_STRING 
13265: ST_TO_ADDR
// hc_name =  ;
13266: LD_ADDR_OWVAR 26
13270: PUSH
13271: LD_STRING 
13273: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13274: LD_INT 0
13276: PPUSH
13277: LD_INT 3
13279: PPUSH
13280: LD_EXP 13
13284: PPUSH
13285: LD_EXP 14
13289: PPUSH
13290: CALL_OW 12
13294: PPUSH
13295: CALL_OW 380
// un = CreateHuman ;
13299: LD_ADDR_VAR 0 6
13303: PUSH
13304: CALL_OW 44
13308: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13309: LD_VAR 0 6
13313: PPUSH
13314: LD_VAR 0 5
13318: PPUSH
13319: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13323: LD_VAR 0 6
13327: PPUSH
13328: LD_INT 14
13330: PPUSH
13331: LD_INT 9
13333: PPUSH
13334: CALL_OW 111
// end ;
13338: GO 13077
13340: POP
13341: POP
// wait ( 0 0$1 ) ;
13342: LD_INT 35
13344: PPUSH
13345: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13349: LD_INT 0
13351: PPUSH
13352: LD_INT 2
13354: PPUSH
13355: LD_EXP 13
13359: PPUSH
13360: LD_EXP 14
13364: PPUSH
13365: CALL_OW 12
13369: PPUSH
13370: CALL_OW 380
// un = CreateHuman ;
13374: LD_ADDR_VAR 0 6
13378: PUSH
13379: CALL_OW 44
13383: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13384: LD_ADDR_VAR 0 4
13388: PUSH
13389: DOUBLE
13390: LD_INT 1
13392: DEC
13393: ST_TO_ADDR
13394: LD_VAR 0 1
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: LD_INT 2
13404: MUL
13405: PLUS
13406: PUSH
13407: FOR_TO
13408: IFFALSE 13500
// begin hc_gallery =  ;
13410: LD_ADDR_OWVAR 33
13414: PUSH
13415: LD_STRING 
13417: ST_TO_ADDR
// hc_name =  ;
13418: LD_ADDR_OWVAR 26
13422: PUSH
13423: LD_STRING 
13425: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13426: LD_INT 1
13428: PPUSH
13429: LD_INT 1
13431: PPUSH
13432: LD_EXP 13
13436: PPUSH
13437: LD_EXP 14
13441: PPUSH
13442: CALL_OW 12
13446: PPUSH
13447: CALL_OW 380
// un = CreateHuman ;
13451: LD_ADDR_VAR 0 6
13455: PUSH
13456: CALL_OW 44
13460: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13461: LD_VAR 0 6
13465: PPUSH
13466: LD_INT 9
13468: PPUSH
13469: LD_INT 13
13471: PPUSH
13472: LD_INT 4
13474: PPUSH
13475: LD_INT 0
13477: PPUSH
13478: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13482: LD_ADDR_EXP 26
13486: PUSH
13487: LD_EXP 26
13491: PUSH
13492: LD_VAR 0 6
13496: ADD
13497: ST_TO_ADDR
// end ;
13498: GO 13407
13500: POP
13501: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13502: LD_ADDR_VAR 0 7
13506: PUSH
13507: LD_INT 26
13509: PPUSH
13510: LD_INT 22
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 21
13522: PUSH
13523: LD_INT 1
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 26
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: LIST
13544: PPUSH
13545: CALL_OW 70
13549: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13550: LD_VAR 0 7
13554: PUSH
13555: LD_INT 1
13557: ARRAY
13558: PPUSH
13559: LD_STRING D9-Rus3-1
13561: PPUSH
13562: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13566: LD_VAR 0 7
13570: PUSH
13571: LD_INT 2
13573: ARRAY
13574: PPUSH
13575: LD_STRING D9-Russ-1
13577: PPUSH
13578: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13582: LD_EXP 26
13586: PPUSH
13587: LD_INT 31
13589: PPUSH
13590: LD_INT 13
13592: PPUSH
13593: CALL_OW 114
// wait ( 0 0$3 ) ;
13597: LD_INT 105
13599: PPUSH
13600: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13604: LD_INT 35
13606: PPUSH
13607: CALL_OW 67
// for i in attackGroup do
13611: LD_ADDR_VAR 0 4
13615: PUSH
13616: LD_EXP 26
13620: PUSH
13621: FOR_IN
13622: IFFALSE 13989
// begin if IsDead ( i ) then
13624: LD_VAR 0 4
13628: PPUSH
13629: CALL_OW 301
13633: IFFALSE 13653
// begin attackGroup := attackGroup diff i ;
13635: LD_ADDR_EXP 26
13639: PUSH
13640: LD_EXP 26
13644: PUSH
13645: LD_VAR 0 4
13649: DIFF
13650: ST_TO_ADDR
// continue ;
13651: GO 13621
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13653: LD_VAR 0 4
13657: PPUSH
13658: CALL_OW 314
13662: NOT
13663: PUSH
13664: LD_VAR 0 4
13668: PPUSH
13669: CALL_OW 110
13673: NOT
13674: AND
13675: IFFALSE 13711
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13677: LD_VAR 0 4
13681: PPUSH
13682: LD_INT 22
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PPUSH
13692: CALL_OW 69
13696: PPUSH
13697: LD_VAR 0 4
13701: PPUSH
13702: CALL_OW 74
13706: PPUSH
13707: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
13711: LD_VAR 0 4
13715: PPUSH
13716: CALL_OW 110
13720: NOT
13721: PUSH
13722: LD_VAR 0 4
13726: PPUSH
13727: CALL_OW 256
13731: PUSH
13732: LD_INT 650
13734: LESS
13735: AND
13736: PUSH
13737: LD_VAR 0 4
13741: PPUSH
13742: CALL_OW 247
13746: PUSH
13747: LD_INT 2
13749: EQUAL
13750: AND
13751: IFFALSE 13780
// begin SetTag ( i , 1 ) ;
13753: LD_VAR 0 4
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
13765: LD_VAR 0 4
13769: PPUSH
13770: LD_INT 20
13772: PPUSH
13773: LD_INT 8
13775: PPUSH
13776: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
13780: LD_VAR 0 4
13784: PPUSH
13785: CALL_OW 110
13789: PUSH
13790: LD_INT 1
13792: EQUAL
13793: PUSH
13794: LD_VAR 0 4
13798: PPUSH
13799: LD_INT 20
13801: PPUSH
13802: LD_INT 8
13804: PPUSH
13805: CALL_OW 297
13809: PUSH
13810: LD_INT 6
13812: LESS
13813: AND
13814: IFFALSE 13828
// SetTag ( i , 2 ) ;
13816: LD_VAR 0 4
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: CALL_OW 109
// if GetTag ( i ) = 2 then
13828: LD_VAR 0 4
13832: PPUSH
13833: CALL_OW 110
13837: PUSH
13838: LD_INT 2
13840: EQUAL
13841: IFFALSE 13949
// begin if GetLives ( i ) = 1000 then
13843: LD_VAR 0 4
13847: PPUSH
13848: CALL_OW 256
13852: PUSH
13853: LD_INT 1000
13855: EQUAL
13856: IFFALSE 13872
// SetTag ( i , 3 ) else
13858: LD_VAR 0 4
13862: PPUSH
13863: LD_INT 3
13865: PPUSH
13866: CALL_OW 109
13870: GO 13949
// if IsDrivenBy ( i ) then
13872: LD_VAR 0 4
13876: PPUSH
13877: CALL_OW 311
13881: IFFALSE 13949
// begin mech := IsDrivenBy ( i ) ;
13883: LD_ADDR_VAR 0 8
13887: PUSH
13888: LD_VAR 0 4
13892: PPUSH
13893: CALL_OW 311
13897: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
13898: LD_INT 1
13900: PPUSH
13901: LD_VAR 0 8
13905: PPUSH
13906: CALL_OW 292
13910: NOT
13911: PUSH
13912: LD_VAR 0 8
13916: PPUSH
13917: CALL_OW 256
13921: PUSH
13922: LD_INT 1000
13924: LESS
13925: AND
13926: IFFALSE 13940
// SetLives ( mech , 1000 ) ;
13928: LD_VAR 0 8
13932: PPUSH
13933: LD_INT 1000
13935: PPUSH
13936: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
13940: LD_VAR 0 8
13944: PPUSH
13945: CALL 71826 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
13949: LD_VAR 0 4
13953: PPUSH
13954: CALL_OW 110
13958: PUSH
13959: LD_INT 3
13961: EQUAL
13962: PUSH
13963: LD_VAR 0 4
13967: PPUSH
13968: CALL_OW 311
13972: AND
13973: IFFALSE 13987
// SetTag ( i , 0 ) ;
13975: LD_VAR 0 4
13979: PPUSH
13980: LD_INT 0
13982: PPUSH
13983: CALL_OW 109
// end ;
13987: GO 13621
13989: POP
13990: POP
// until not attackGroup ;
13991: LD_EXP 26
13995: NOT
13996: IFFALSE 13604
// end ;
13998: LD_VAR 0 3
14002: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14003: LD_EXP 26
14007: PPUSH
14008: LD_INT 21
14010: PUSH
14011: LD_INT 2
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PPUSH
14018: CALL_OW 72
14022: IFFALSE 14090
14024: GO 14026
14026: DISABLE
14027: LD_INT 0
14029: PPUSH
// begin enable ;
14030: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14031: LD_ADDR_VAR 0 1
14035: PUSH
14036: LD_EXP 26
14040: PPUSH
14041: LD_INT 21
14043: PUSH
14044: LD_INT 2
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PPUSH
14051: CALL_OW 72
14055: PUSH
14056: FOR_IN
14057: IFFALSE 14088
// if GetFuel ( i ) < 3 then
14059: LD_VAR 0 1
14063: PPUSH
14064: CALL_OW 261
14068: PUSH
14069: LD_INT 3
14071: LESS
14072: IFFALSE 14086
// SetFuel ( i , 3 ) ;
14074: LD_VAR 0 1
14078: PPUSH
14079: LD_INT 3
14081: PPUSH
14082: CALL_OW 240
14086: GO 14056
14088: POP
14089: POP
// end ; end_of_file
14090: PPOPN 1
14092: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14093: LD_INT 22
14095: PUSH
14096: LD_INT 3
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 25
14105: PUSH
14106: LD_INT 2
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 69
14121: IFFALSE 14140
14123: GO 14125
14125: DISABLE
// begin enable ;
14126: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14127: LD_INT 3
14129: PPUSH
14130: LD_INT 1
14132: PPUSH
14133: LD_INT 22
14135: PPUSH
14136: CALL 8974 0 3
// end ;
14140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14141: LD_INT 22
14143: PUSH
14144: LD_INT 3
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: LD_INT 25
14153: PUSH
14154: LD_INT 4
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PPUSH
14165: CALL_OW 69
14169: IFFALSE 14191
14171: GO 14173
14173: DISABLE
// begin enable ;
14174: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14175: LD_INT 3
14177: PPUSH
14178: LD_INT 20
14180: PPUSH
14181: LD_INT 22
14183: PPUSH
14184: LD_INT 23
14186: PPUSH
14187: CALL 9306 0 4
// end ;
14191: END
// every 0 0$1 trigger northBaseDefenders do
14192: LD_EXP 24
14196: IFFALSE 14220
14198: GO 14200
14200: DISABLE
// begin enable ;
14201: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14202: LD_INT 22
14204: PPUSH
14205: LD_INT 1
14207: PPUSH
14208: LD_EXP 24
14212: PPUSH
14213: LD_INT 2
14215: PPUSH
14216: CALL 9578 0 4
// end ;
14220: END
// every 0 0$1 trigger southBaseDefenders do
14221: LD_EXP 25
14225: IFFALSE 14249
14227: GO 14229
14229: DISABLE
// begin enable ;
14230: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14231: LD_INT 23
14233: PPUSH
14234: LD_INT 1
14236: PPUSH
14237: LD_EXP 25
14241: PPUSH
14242: LD_INT 33
14244: PPUSH
14245: CALL 9578 0 4
// end ; end_of_file
14249: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
14250: LD_VAR 0 1
14254: PUSH
14255: LD_EXP 1
14259: EQUAL
14260: IFFALSE 14269
// YouLost ( JMM ) ;
14262: LD_STRING JMM
14264: PPUSH
14265: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14269: LD_VAR 0 1
14273: PPUSH
14274: CALL_OW 266
14278: PUSH
14279: LD_INT 0
14281: EQUAL
14282: IFFALSE 14291
// YouLost ( DepotDestroyed ) ;
14284: LD_STRING DepotDestroyed
14286: PPUSH
14287: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14291: LD_VAR 0 1
14295: PPUSH
14296: CALL_OW 255
14300: PUSH
14301: LD_INT 1
14303: EQUAL
14304: PUSH
14305: LD_VAR 0 1
14309: PPUSH
14310: CALL_OW 247
14314: PUSH
14315: LD_INT 1
14317: EQUAL
14318: AND
14319: IFFALSE 14335
// deadsCounter = deadsCounter + 1 ;
14321: LD_ADDR_EXP 31
14325: PUSH
14326: LD_EXP 31
14330: PUSH
14331: LD_INT 1
14333: PLUS
14334: ST_TO_ADDR
// end ;
14335: PPOPN 1
14337: END
// on Command ( cmd ) do var i , j , tmp ;
14338: LD_INT 0
14340: PPUSH
14341: PPUSH
14342: PPUSH
// begin SOS_Command ( cmd ) ;
14343: LD_VAR 0 1
14347: PPUSH
14348: CALL 29689 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14352: LD_ADDR_VAR 0 2
14356: PUSH
14357: LD_INT 22
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 21
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PPUSH
14381: CALL_OW 69
14385: PUSH
14386: FOR_IN
14387: IFFALSE 14508
// begin if GetTaskList ( i ) then
14389: LD_VAR 0 2
14393: PPUSH
14394: CALL_OW 437
14398: IFFALSE 14506
// begin for j = 1 to GetTaskList ( i ) do
14400: LD_ADDR_VAR 0 3
14404: PUSH
14405: DOUBLE
14406: LD_INT 1
14408: DEC
14409: ST_TO_ADDR
14410: LD_VAR 0 2
14414: PPUSH
14415: CALL_OW 437
14419: PUSH
14420: FOR_TO
14421: IFFALSE 14504
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14423: LD_ADDR_VAR 0 4
14427: PUSH
14428: LD_VAR 0 2
14432: PPUSH
14433: CALL_OW 437
14437: PUSH
14438: LD_VAR 0 3
14442: ARRAY
14443: PUSH
14444: LD_INT 4
14446: ARRAY
14447: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14448: LD_VAR 0 4
14452: PPUSH
14453: CALL_OW 255
14457: PUSH
14458: LD_INT 3
14460: EQUAL
14461: PUSH
14462: LD_VAR 0 4
14466: PPUSH
14467: CALL_OW 247
14471: PUSH
14472: LD_INT 2
14474: EQUAL
14475: AND
14476: PUSH
14477: LD_VAR 0 4
14481: PPUSH
14482: CALL_OW 264
14486: PUSH
14487: LD_INT 51
14489: EQUAL
14490: AND
14491: IFFALSE 14502
// ComStop ( i ) ;
14493: LD_VAR 0 2
14497: PPUSH
14498: CALL_OW 141
// end ;
14502: GO 14420
14504: POP
14505: POP
// end ; end ;
14506: GO 14386
14508: POP
14509: POP
// end ;
14510: PPOPN 4
14512: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14513: LD_VAR 0 2
14517: PUSH
14518: LD_EXP 8
14522: EQUAL
14523: PUSH
14524: LD_EXP 21
14528: PUSH
14529: LD_INT 4
14531: NONEQUAL
14532: AND
14533: IFFALSE 14685
// begin if IsOk ( Mikhail ) then
14535: LD_EXP 8
14539: PPUSH
14540: CALL_OW 302
14544: IFFALSE 14552
// AskMikhail else
14546: CALL 7251 0 0
14550: GO 14685
// if IsOk ( llab1 ) then
14552: LD_INT 23
14554: PPUSH
14555: CALL_OW 302
14559: IFFALSE 14648
// begin InGameOn ;
14561: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14565: LD_EXP 8
14569: PPUSH
14570: LD_INT 6
14572: PPUSH
14573: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14577: LD_INT 23
14579: PPUSH
14580: LD_INT 6
14582: PPUSH
14583: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14587: LD_EXP 8
14591: PPUSH
14592: LD_INT 23
14594: PPUSH
14595: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14599: LD_INT 35
14601: PPUSH
14602: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14606: LD_EXP 8
14610: PPUSH
14611: CALL_OW 310
14615: PUSH
14616: LD_INT 23
14618: EQUAL
14619: PUSH
14620: LD_EXP 8
14624: PPUSH
14625: CALL_OW 301
14629: OR
14630: IFFALSE 14599
// SetSide ( llab1 , 1 ) ;
14632: LD_INT 23
14634: PPUSH
14635: LD_INT 1
14637: PPUSH
14638: CALL_OW 235
// InGameOff ;
14642: CALL_OW 9
// end else
14646: GO 14685
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14648: LD_INT 3
14650: PPUSH
14651: LD_INT 6
14653: PPUSH
14654: LD_INT 2
14656: PPUSH
14657: LD_INT 1
14659: PPUSH
14660: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14664: LD_EXP 8
14668: PPUSH
14669: LD_INT 6
14671: PPUSH
14672: CALL_OW 235
// ComHold ( Mikhail ) ;
14676: LD_EXP 8
14680: PPUSH
14681: CALL_OW 140
// end ; end ; end ;
14685: PPOPN 2
14687: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14688: LD_EXP 8
14692: PPUSH
14693: CALL_OW 257
14697: PUSH
14698: LD_INT 3
14700: NONEQUAL
14701: IFFALSE 14719
14703: GO 14705
14705: DISABLE
// begin enable ;
14706: ENABLE
// SetClass ( Mikhail , 3 ) ;
14707: LD_EXP 8
14711: PPUSH
14712: LD_INT 3
14714: PPUSH
14715: CALL_OW 336
// end ; end_of_file
14719: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14720: LD_INT 22
14722: PUSH
14723: LD_INT 1
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 21
14732: PUSH
14733: LD_INT 1
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 25
14742: PUSH
14743: LD_INT 2
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: PPUSH
14755: CALL_OW 69
14759: PUSH
14760: LD_INT 0
14762: EQUAL
14763: PUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 4
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 25
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: PUSH
14804: LD_INT 0
14806: EQUAL
14807: AND
14808: PUSH
14809: LD_INT 1
14811: PPUSH
14812: CALL_OW 255
14816: PUSH
14817: LD_INT 3
14819: EQUAL
14820: AND
14821: PUSH
14822: LD_INT 10
14824: PPUSH
14825: CALL_OW 255
14829: PUSH
14830: LD_INT 3
14832: EQUAL
14833: AND
14834: IFFALSE 14846
14836: GO 14838
14838: DISABLE
// YouLost ( Engineer ) ;
14839: LD_STRING Engineer
14841: PPUSH
14842: CALL_OW 104
14846: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 255
14854: PUSH
14855: LD_INT 3
14857: EQUAL
14858: PUSH
14859: LD_EXP 27
14863: PUSH
14864: LD_INT 1
14866: EQUAL
14867: AND
14868: IFFALSE 14880
14870: GO 14872
14872: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14873: LD_STRING DepotCaptured
14875: PPUSH
14876: CALL_OW 104
14880: END
// export function PrepareTigers ; var i , un ; begin
14881: LD_INT 0
14883: PPUSH
14884: PPUSH
14885: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
14886: LD_ADDR_VAR 0 2
14890: PUSH
14891: DOUBLE
14892: LD_INT 1
14894: DEC
14895: ST_TO_ADDR
14896: LD_INT 2
14898: PUSH
14899: LD_INT 3
14901: PUSH
14902: LD_INT 4
14904: PUSH
14905: LD_INT 5
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: LD_OWVAR 67
14918: ARRAY
14919: PUSH
14920: FOR_TO
14921: IFFALSE 15036
// begin uc_side := 0 ;
14923: LD_ADDR_OWVAR 20
14927: PUSH
14928: LD_INT 0
14930: ST_TO_ADDR
// uc_nation := nation_nature ;
14931: LD_ADDR_OWVAR 21
14935: PUSH
14936: LD_INT 0
14938: ST_TO_ADDR
// hc_sex := sex_male ;
14939: LD_ADDR_OWVAR 27
14943: PUSH
14944: LD_INT 1
14946: ST_TO_ADDR
// hc_class := class_tiger ;
14947: LD_ADDR_OWVAR 28
14951: PUSH
14952: LD_INT 14
14954: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14955: LD_ADDR_OWVAR 31
14959: PUSH
14960: LD_EXP 14
14964: PUSH
14965: LD_INT 0
14967: PUSH
14968: LD_INT 0
14970: PUSH
14971: LD_INT 0
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
14980: LD_ADDR_OWVAR 35
14984: PUSH
14985: LD_INT 30
14987: PUSH
14988: LD_INT 40
14990: PUSH
14991: LD_INT 45
14993: PUSH
14994: LD_INT 50
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: PUSH
15003: LD_OWVAR 67
15007: ARRAY
15008: ST_TO_ADDR
// un = CreateHuman ;
15009: LD_ADDR_VAR 0 3
15013: PUSH
15014: CALL_OW 44
15018: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15019: LD_VAR 0 3
15023: PPUSH
15024: LD_INT 27
15026: PPUSH
15027: LD_INT 0
15029: PPUSH
15030: CALL_OW 49
// end ;
15034: GO 14920
15036: POP
15037: POP
// end ; end_of_file
15038: LD_VAR 0 1
15042: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 255
15050: PUSH
15051: LD_INT 1
15053: EQUAL
15054: PUSH
15055: LD_INT 10
15057: PPUSH
15058: CALL_OW 255
15062: PUSH
15063: LD_INT 1
15065: EQUAL
15066: AND
15067: PUSH
15068: LD_EXP 20
15072: PUSH
15073: LD_INT 1
15075: EQUAL
15076: AND
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_INT 3
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 21
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 34
15100: PUSH
15101: LD_INT 51
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 3
15110: PUSH
15111: LD_INT 58
15113: PUSH
15114: EMPTY
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 69
15131: PUSH
15132: LD_INT 0
15134: EQUAL
15135: AND
15136: IFFALSE 15231
15138: GO 15140
15140: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15141: LD_INT 9450
15143: PUSH
15144: LD_INT 8400
15146: PUSH
15147: LD_INT 6300
15149: PUSH
15150: LD_INT 6300
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: PUSH
15159: LD_OWVAR 67
15163: ARRAY
15164: PPUSH
15165: CALL_OW 67
// if cargoEscape = 1 then
15169: LD_EXP 20
15173: PUSH
15174: LD_INT 1
15176: EQUAL
15177: IFFALSE 15231
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15179: LD_EXP 9
15183: PPUSH
15184: LD_STRING D6-Pow-1
15186: PPUSH
15187: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15191: LD_EXP 1
15195: PPUSH
15196: LD_STRING D6-JMM-1
15198: PPUSH
15199: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15203: LD_EXP 9
15207: PPUSH
15208: LD_STRING D6-Pow-2
15210: PPUSH
15211: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15215: LD_EXP 1
15219: PPUSH
15220: LD_STRING D6-JMM-2
15222: PPUSH
15223: CALL_OW 88
// FinishMission ;
15227: CALL 15447 0 0
// end ; end ;
15231: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15232: LD_INT 1
15234: PPUSH
15235: CALL_OW 255
15239: PUSH
15240: LD_INT 1
15242: EQUAL
15243: PUSH
15244: LD_INT 10
15246: PPUSH
15247: CALL_OW 255
15251: PUSH
15252: LD_INT 1
15254: EQUAL
15255: AND
15256: PUSH
15257: LD_EXP 20
15261: PUSH
15262: LD_INT 1
15264: GREATER
15265: AND
15266: IFFALSE 15341
15268: GO 15270
15270: DISABLE
15271: LD_INT 0
15273: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15274: LD_INT 11550
15276: PUSH
15277: LD_INT 10500
15279: PUSH
15280: LD_INT 9450
15282: PUSH
15283: LD_INT 8400
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: PUSH
15292: LD_OWVAR 67
15296: ARRAY
15297: PPUSH
15298: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15302: LD_INT 1
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 4
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: PUSH
15320: LD_OWVAR 67
15324: ARRAY
15325: PPUSH
15326: LD_INT 13
15328: PPUSH
15329: CALL 13038 0 2
// lastBattle = 1 ;
15333: LD_ADDR_EXP 27
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// end ;
15341: PPOPN 1
15343: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15344: LD_EXP 27
15348: PUSH
15349: LD_INT 1
15351: EQUAL
15352: PUSH
15353: LD_INT 26
15355: PPUSH
15356: LD_INT 22
15358: PUSH
15359: LD_INT 3
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 21
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PPUSH
15380: CALL_OW 70
15384: PUSH
15385: LD_INT 0
15387: EQUAL
15388: AND
15389: IFFALSE 15446
15391: GO 15393
15393: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15394: LD_EXP 9
15398: PPUSH
15399: LD_STRING D6-Pow-1
15401: PPUSH
15402: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15406: LD_EXP 1
15410: PPUSH
15411: LD_STRING D6-JMM-1
15413: PPUSH
15414: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15418: LD_EXP 9
15422: PPUSH
15423: LD_STRING D6-Pow-2
15425: PPUSH
15426: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15430: LD_EXP 1
15434: PPUSH
15435: LD_STRING D6-JMM-2
15437: PPUSH
15438: CALL_OW 88
// FinishMission ;
15442: CALL 15447 0 0
// end ;
15446: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15447: LD_INT 0
15449: PPUSH
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
// if tick <= 18 18$00 then
15454: LD_OWVAR 1
15458: PUSH
15459: LD_INT 37800
15461: LESSEQUAL
15462: IFFALSE 15471
// SetAchievement ( ACH_ASPEED_2 ) ;
15464: LD_STRING ACH_ASPEED_2
15466: PPUSH
15467: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: LD_INT 1
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 21
15488: PUSH
15489: LD_INT 2
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 24
15498: PUSH
15499: LD_INT 251
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: PPUSH
15511: CALL_OW 69
15515: ST_TO_ADDR
// if tmp then
15516: LD_VAR 0 2
15520: IFFALSE 15534
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15522: LD_VAR 0 2
15526: PPUSH
15527: LD_STRING 02_tanks_1
15529: PPUSH
15530: CALL 10453 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15534: LD_EXP 21
15538: PUSH
15539: LD_INT 1
15541: EQUAL
15542: PUSH
15543: LD_EXP 8
15547: PPUSH
15548: CALL_OW 300
15552: AND
15553: IFFALSE 15567
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15555: LD_EXP 21
15559: PPUSH
15560: LD_STRING 02_mikhailStatus_1
15562: PPUSH
15563: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15567: LD_INT 1
15569: PPUSH
15570: CALL_OW 274
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: CALL_OW 275
15582: PPUSH
15583: LD_STRING 02_resources_4
15585: PPUSH
15586: CALL_OW 39
// m1 := false ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_INT 0
15597: ST_TO_ADDR
// m2 := false ;
15598: LD_ADDR_VAR 0 4
15602: PUSH
15603: LD_INT 0
15605: ST_TO_ADDR
// m3 := false ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_INT 0
15613: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 274
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 275
15629: PUSH
15630: LD_INT 200
15632: GREATEREQUAL
15633: IFFALSE 15655
// begin AddMedal ( Cans , 1 ) ;
15635: LD_STRING Cans
15637: PPUSH
15638: LD_INT 1
15640: PPUSH
15641: CALL_OW 101
// m1 := true ;
15645: LD_ADDR_VAR 0 3
15649: PUSH
15650: LD_INT 1
15652: ST_TO_ADDR
// end else
15653: GO 15666
// begin AddMedal ( Cans , - 1 ) ;
15655: LD_STRING Cans
15657: PPUSH
15658: LD_INT 1
15660: NEG
15661: PPUSH
15662: CALL_OW 101
// end ; if deadsCounter < 2 then
15666: LD_EXP 31
15670: PUSH
15671: LD_INT 2
15673: LESS
15674: IFFALSE 15696
// begin AddMedal ( Deaths , 1 ) ;
15676: LD_STRING Deaths
15678: PPUSH
15679: LD_INT 1
15681: PPUSH
15682: CALL_OW 101
// m2 := true ;
15686: LD_ADDR_VAR 0 4
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// end else
15694: GO 15707
// begin AddMedal ( Deaths , - 1 ) ;
15696: LD_STRING Deaths
15698: PPUSH
15699: LD_INT 1
15701: NEG
15702: PPUSH
15703: CALL_OW 101
// end ; if mikhailStatus = 0 then
15707: LD_EXP 21
15711: PUSH
15712: LD_INT 0
15714: EQUAL
15715: IFFALSE 15728
// AddMedal ( Prisoner , - 1 ) ;
15717: LD_STRING Prisoner
15719: PPUSH
15720: LD_INT 1
15722: NEG
15723: PPUSH
15724: CALL_OW 101
// if mikhailStatus = 1 then
15728: LD_EXP 21
15732: PUSH
15733: LD_INT 1
15735: EQUAL
15736: IFFALSE 15756
// begin AddMedal ( Prisoner , 1 ) ;
15738: LD_STRING Prisoner
15740: PPUSH
15741: LD_INT 1
15743: PPUSH
15744: CALL_OW 101
// m3 := true ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_INT 1
15755: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15756: LD_EXP 21
15760: PUSH
15761: LD_INT 2
15763: EQUAL
15764: IFFALSE 15784
// begin AddMedal ( Prisoner , 2 ) ;
15766: LD_STRING Prisoner
15768: PPUSH
15769: LD_INT 2
15771: PPUSH
15772: CALL_OW 101
// m3 := true ;
15776: LD_ADDR_VAR 0 5
15780: PUSH
15781: LD_INT 1
15783: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15784: LD_EXP 21
15788: PUSH
15789: LD_INT 3
15791: EQUAL
15792: IFFALSE 15805
// AddMedal ( Prisoner , - 2 ) ;
15794: LD_STRING Prisoner
15796: PPUSH
15797: LD_INT 2
15799: NEG
15800: PPUSH
15801: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
15805: LD_OWVAR 67
15809: PUSH
15810: LD_INT 3
15812: GREATEREQUAL
15813: PUSH
15814: LD_VAR 0 3
15818: AND
15819: PUSH
15820: LD_VAR 0 4
15824: AND
15825: PUSH
15826: LD_VAR 0 5
15830: AND
15831: IFFALSE 15843
// SetAchievementEX ( ACH_AMER , 2 ) ;
15833: LD_STRING ACH_AMER
15835: PPUSH
15836: LD_INT 2
15838: PPUSH
15839: CALL_OW 564
// GiveMedals ( MAIN ) ;
15843: LD_STRING MAIN
15845: PPUSH
15846: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15850: LD_INT 22
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 23
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 21
15872: PUSH
15873: LD_INT 1
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: LIST
15884: PPUSH
15885: CALL_OW 69
15889: PPUSH
15890: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15894: LD_EXP 1
15898: PPUSH
15899: LD_EXP 33
15903: PUSH
15904: LD_STRING JMM
15906: STR
15907: PPUSH
15908: CALL_OW 38
// if IsOK ( Bobby ) then
15912: LD_EXP 2
15916: PPUSH
15917: CALL_OW 302
15921: IFFALSE 15941
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15923: LD_EXP 2
15927: PPUSH
15928: LD_EXP 33
15932: PUSH
15933: LD_STRING Bobby
15935: STR
15936: PPUSH
15937: CALL_OW 38
// if IsOK ( Cyrus ) then
15941: LD_EXP 3
15945: PPUSH
15946: CALL_OW 302
15950: IFFALSE 15970
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15952: LD_EXP 3
15956: PPUSH
15957: LD_EXP 33
15961: PUSH
15962: LD_STRING Cyrus
15964: STR
15965: PPUSH
15966: CALL_OW 38
// if IsOK ( Lisa ) then
15970: LD_EXP 4
15974: PPUSH
15975: CALL_OW 302
15979: IFFALSE 15999
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15981: LD_EXP 4
15985: PPUSH
15986: LD_EXP 33
15990: PUSH
15991: LD_STRING Lisa
15993: STR
15994: PPUSH
15995: CALL_OW 38
// if IsOK ( Khatam ) then
15999: LD_EXP 5
16003: PPUSH
16004: CALL_OW 302
16008: IFFALSE 16028
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16010: LD_EXP 5
16014: PPUSH
16015: LD_EXP 33
16019: PUSH
16020: LD_STRING Khatam
16022: STR
16023: PPUSH
16024: CALL_OW 38
// if IsOK ( Brian ) then
16028: LD_EXP 6
16032: PPUSH
16033: CALL_OW 302
16037: IFFALSE 16057
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16039: LD_EXP 6
16043: PPUSH
16044: LD_EXP 33
16048: PUSH
16049: LD_STRING Brian
16051: STR
16052: PPUSH
16053: CALL_OW 38
// if IsOk ( Jerry ) then
16057: LD_EXP 7
16061: PPUSH
16062: CALL_OW 302
16066: IFFALSE 16086
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16068: LD_EXP 7
16072: PPUSH
16073: LD_EXP 33
16077: PUSH
16078: LD_STRING Jerry
16080: STR
16081: PPUSH
16082: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16086: LD_EXP 21
16090: PUSH
16091: LD_INT 1
16093: EQUAL
16094: PUSH
16095: LD_EXP 8
16099: PPUSH
16100: CALL_OW 255
16104: PUSH
16105: LD_INT 1
16107: EQUAL
16108: AND
16109: PUSH
16110: LD_EXP 8
16114: PPUSH
16115: CALL_OW 302
16119: AND
16120: IFFALSE 16140
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16122: LD_EXP 8
16126: PPUSH
16127: LD_EXP 33
16131: PUSH
16132: LD_STRING Mikhail
16134: STR
16135: PPUSH
16136: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16140: LD_INT 50
16142: PUSH
16143: EMPTY
16144: LIST
16145: PUSH
16146: LD_INT 22
16148: PUSH
16149: LD_INT 1
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 21
16158: PUSH
16159: LD_INT 1
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: LIST
16170: PPUSH
16171: CALL_OW 69
16175: PUSH
16176: LD_EXP 1
16180: PUSH
16181: LD_EXP 2
16185: PUSH
16186: LD_EXP 3
16190: PUSH
16191: LD_EXP 4
16195: PUSH
16196: LD_EXP 5
16200: PUSH
16201: LD_EXP 6
16205: PUSH
16206: LD_EXP 7
16210: PUSH
16211: LD_EXP 8
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: DIFF
16226: PPUSH
16227: LD_STRING 02_other_survivors
16229: PPUSH
16230: CALL_OW 38
// YouWin ;
16234: CALL_OW 103
// end ; end_of_file
16238: LD_VAR 0 1
16242: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
16243: LD_INT 0
16245: PPUSH
// ar_miner := 81 ;
16246: LD_ADDR_EXP 43
16250: PUSH
16251: LD_INT 81
16253: ST_TO_ADDR
// ar_crane := 88 ;
16254: LD_ADDR_EXP 42
16258: PUSH
16259: LD_INT 88
16261: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
16262: LD_ADDR_EXP 37
16266: PUSH
16267: LD_INT 89
16269: ST_TO_ADDR
// us_hack := 99 ;
16270: LD_ADDR_EXP 38
16274: PUSH
16275: LD_INT 99
16277: ST_TO_ADDR
// us_artillery := 97 ;
16278: LD_ADDR_EXP 39
16282: PUSH
16283: LD_INT 97
16285: ST_TO_ADDR
// ar_bio_bomb := 91 ;
16286: LD_ADDR_EXP 40
16290: PUSH
16291: LD_INT 91
16293: ST_TO_ADDR
// ar_mortar := 92 ;
16294: LD_ADDR_EXP 41
16298: PUSH
16299: LD_INT 92
16301: ST_TO_ADDR
// ru_radar := 98 ;
16302: LD_ADDR_EXP 36
16306: PUSH
16307: LD_INT 98
16309: ST_TO_ADDR
// tech_Artillery := 80 ;
16310: LD_ADDR_EXP 44
16314: PUSH
16315: LD_INT 80
16317: ST_TO_ADDR
// tech_RadMat := 81 ;
16318: LD_ADDR_EXP 45
16322: PUSH
16323: LD_INT 81
16325: ST_TO_ADDR
// tech_BasicTools := 82 ;
16326: LD_ADDR_EXP 46
16330: PUSH
16331: LD_INT 82
16333: ST_TO_ADDR
// tech_Cargo := 83 ;
16334: LD_ADDR_EXP 47
16338: PUSH
16339: LD_INT 83
16341: ST_TO_ADDR
// tech_Track := 84 ;
16342: LD_ADDR_EXP 48
16346: PUSH
16347: LD_INT 84
16349: ST_TO_ADDR
// tech_Crane := 85 ;
16350: LD_ADDR_EXP 49
16354: PUSH
16355: LD_INT 85
16357: ST_TO_ADDR
// tech_Bulldozer := 86 ;
16358: LD_ADDR_EXP 50
16362: PUSH
16363: LD_INT 86
16365: ST_TO_ADDR
// tech_Hovercraft := 87 ;
16366: LD_ADDR_EXP 51
16370: PUSH
16371: LD_INT 87
16373: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
16374: LD_ADDR_EXP 52
16378: PUSH
16379: LD_INT 88
16381: ST_TO_ADDR
// class_mastodont := 31 ;
16382: LD_ADDR_EXP 53
16386: PUSH
16387: LD_INT 31
16389: ST_TO_ADDR
// class_horse := 21 ;
16390: LD_ADDR_EXP 54
16394: PUSH
16395: LD_INT 21
16397: ST_TO_ADDR
// end ;
16398: LD_VAR 0 1
16402: RET
// every 1 do
16403: GO 16405
16405: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
16406: CALL 16243 0 0
16410: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16411: LD_INT 0
16413: PPUSH
// if p2 = 100 then
16414: LD_VAR 0 2
16418: PUSH
16419: LD_INT 100
16421: EQUAL
16422: IFFALSE 17371
// begin if not StreamModeActive then
16424: LD_EXP 55
16428: NOT
16429: IFFALSE 16439
// StreamModeActive := true ;
16431: LD_ADDR_EXP 55
16435: PUSH
16436: LD_INT 1
16438: ST_TO_ADDR
// if p3 = 0 then
16439: LD_VAR 0 3
16443: PUSH
16444: LD_INT 0
16446: EQUAL
16447: IFFALSE 16453
// InitStreamMode ;
16449: CALL 17531 0 0
// if p3 = 1 then
16453: LD_VAR 0 3
16457: PUSH
16458: LD_INT 1
16460: EQUAL
16461: IFFALSE 16471
// sRocket := true ;
16463: LD_ADDR_EXP 60
16467: PUSH
16468: LD_INT 1
16470: ST_TO_ADDR
// if p3 = 2 then
16471: LD_VAR 0 3
16475: PUSH
16476: LD_INT 2
16478: EQUAL
16479: IFFALSE 16489
// sSpeed := true ;
16481: LD_ADDR_EXP 59
16485: PUSH
16486: LD_INT 1
16488: ST_TO_ADDR
// if p3 = 3 then
16489: LD_VAR 0 3
16493: PUSH
16494: LD_INT 3
16496: EQUAL
16497: IFFALSE 16507
// sEngine := true ;
16499: LD_ADDR_EXP 61
16503: PUSH
16504: LD_INT 1
16506: ST_TO_ADDR
// if p3 = 4 then
16507: LD_VAR 0 3
16511: PUSH
16512: LD_INT 4
16514: EQUAL
16515: IFFALSE 16525
// sSpec := true ;
16517: LD_ADDR_EXP 58
16521: PUSH
16522: LD_INT 1
16524: ST_TO_ADDR
// if p3 = 5 then
16525: LD_VAR 0 3
16529: PUSH
16530: LD_INT 5
16532: EQUAL
16533: IFFALSE 16543
// sLevel := true ;
16535: LD_ADDR_EXP 62
16539: PUSH
16540: LD_INT 1
16542: ST_TO_ADDR
// if p3 = 6 then
16543: LD_VAR 0 3
16547: PUSH
16548: LD_INT 6
16550: EQUAL
16551: IFFALSE 16561
// sArmoury := true ;
16553: LD_ADDR_EXP 63
16557: PUSH
16558: LD_INT 1
16560: ST_TO_ADDR
// if p3 = 7 then
16561: LD_VAR 0 3
16565: PUSH
16566: LD_INT 7
16568: EQUAL
16569: IFFALSE 16579
// sRadar := true ;
16571: LD_ADDR_EXP 64
16575: PUSH
16576: LD_INT 1
16578: ST_TO_ADDR
// if p3 = 8 then
16579: LD_VAR 0 3
16583: PUSH
16584: LD_INT 8
16586: EQUAL
16587: IFFALSE 16597
// sBunker := true ;
16589: LD_ADDR_EXP 65
16593: PUSH
16594: LD_INT 1
16596: ST_TO_ADDR
// if p3 = 9 then
16597: LD_VAR 0 3
16601: PUSH
16602: LD_INT 9
16604: EQUAL
16605: IFFALSE 16615
// sHack := true ;
16607: LD_ADDR_EXP 66
16611: PUSH
16612: LD_INT 1
16614: ST_TO_ADDR
// if p3 = 10 then
16615: LD_VAR 0 3
16619: PUSH
16620: LD_INT 10
16622: EQUAL
16623: IFFALSE 16633
// sFire := true ;
16625: LD_ADDR_EXP 67
16629: PUSH
16630: LD_INT 1
16632: ST_TO_ADDR
// if p3 = 11 then
16633: LD_VAR 0 3
16637: PUSH
16638: LD_INT 11
16640: EQUAL
16641: IFFALSE 16651
// sRefresh := true ;
16643: LD_ADDR_EXP 68
16647: PUSH
16648: LD_INT 1
16650: ST_TO_ADDR
// if p3 = 12 then
16651: LD_VAR 0 3
16655: PUSH
16656: LD_INT 12
16658: EQUAL
16659: IFFALSE 16669
// sExp := true ;
16661: LD_ADDR_EXP 69
16665: PUSH
16666: LD_INT 1
16668: ST_TO_ADDR
// if p3 = 13 then
16669: LD_VAR 0 3
16673: PUSH
16674: LD_INT 13
16676: EQUAL
16677: IFFALSE 16687
// sDepot := true ;
16679: LD_ADDR_EXP 70
16683: PUSH
16684: LD_INT 1
16686: ST_TO_ADDR
// if p3 = 14 then
16687: LD_VAR 0 3
16691: PUSH
16692: LD_INT 14
16694: EQUAL
16695: IFFALSE 16705
// sFlag := true ;
16697: LD_ADDR_EXP 71
16701: PUSH
16702: LD_INT 1
16704: ST_TO_ADDR
// if p3 = 15 then
16705: LD_VAR 0 3
16709: PUSH
16710: LD_INT 15
16712: EQUAL
16713: IFFALSE 16723
// sKamikadze := true ;
16715: LD_ADDR_EXP 79
16719: PUSH
16720: LD_INT 1
16722: ST_TO_ADDR
// if p3 = 16 then
16723: LD_VAR 0 3
16727: PUSH
16728: LD_INT 16
16730: EQUAL
16731: IFFALSE 16741
// sTroll := true ;
16733: LD_ADDR_EXP 80
16737: PUSH
16738: LD_INT 1
16740: ST_TO_ADDR
// if p3 = 17 then
16741: LD_VAR 0 3
16745: PUSH
16746: LD_INT 17
16748: EQUAL
16749: IFFALSE 16759
// sSlow := true ;
16751: LD_ADDR_EXP 81
16755: PUSH
16756: LD_INT 1
16758: ST_TO_ADDR
// if p3 = 18 then
16759: LD_VAR 0 3
16763: PUSH
16764: LD_INT 18
16766: EQUAL
16767: IFFALSE 16777
// sLack := true ;
16769: LD_ADDR_EXP 82
16773: PUSH
16774: LD_INT 1
16776: ST_TO_ADDR
// if p3 = 19 then
16777: LD_VAR 0 3
16781: PUSH
16782: LD_INT 19
16784: EQUAL
16785: IFFALSE 16795
// sTank := true ;
16787: LD_ADDR_EXP 84
16791: PUSH
16792: LD_INT 1
16794: ST_TO_ADDR
// if p3 = 20 then
16795: LD_VAR 0 3
16799: PUSH
16800: LD_INT 20
16802: EQUAL
16803: IFFALSE 16813
// sRemote := true ;
16805: LD_ADDR_EXP 85
16809: PUSH
16810: LD_INT 1
16812: ST_TO_ADDR
// if p3 = 21 then
16813: LD_VAR 0 3
16817: PUSH
16818: LD_INT 21
16820: EQUAL
16821: IFFALSE 16831
// sPowell := true ;
16823: LD_ADDR_EXP 86
16827: PUSH
16828: LD_INT 1
16830: ST_TO_ADDR
// if p3 = 22 then
16831: LD_VAR 0 3
16835: PUSH
16836: LD_INT 22
16838: EQUAL
16839: IFFALSE 16849
// sTeleport := true ;
16841: LD_ADDR_EXP 89
16845: PUSH
16846: LD_INT 1
16848: ST_TO_ADDR
// if p3 = 23 then
16849: LD_VAR 0 3
16853: PUSH
16854: LD_INT 23
16856: EQUAL
16857: IFFALSE 16867
// sOilTower := true ;
16859: LD_ADDR_EXP 91
16863: PUSH
16864: LD_INT 1
16866: ST_TO_ADDR
// if p3 = 24 then
16867: LD_VAR 0 3
16871: PUSH
16872: LD_INT 24
16874: EQUAL
16875: IFFALSE 16885
// sShovel := true ;
16877: LD_ADDR_EXP 92
16881: PUSH
16882: LD_INT 1
16884: ST_TO_ADDR
// if p3 = 25 then
16885: LD_VAR 0 3
16889: PUSH
16890: LD_INT 25
16892: EQUAL
16893: IFFALSE 16903
// sSheik := true ;
16895: LD_ADDR_EXP 93
16899: PUSH
16900: LD_INT 1
16902: ST_TO_ADDR
// if p3 = 26 then
16903: LD_VAR 0 3
16907: PUSH
16908: LD_INT 26
16910: EQUAL
16911: IFFALSE 16921
// sEarthquake := true ;
16913: LD_ADDR_EXP 95
16917: PUSH
16918: LD_INT 1
16920: ST_TO_ADDR
// if p3 = 27 then
16921: LD_VAR 0 3
16925: PUSH
16926: LD_INT 27
16928: EQUAL
16929: IFFALSE 16939
// sAI := true ;
16931: LD_ADDR_EXP 96
16935: PUSH
16936: LD_INT 1
16938: ST_TO_ADDR
// if p3 = 28 then
16939: LD_VAR 0 3
16943: PUSH
16944: LD_INT 28
16946: EQUAL
16947: IFFALSE 16957
// sCargo := true ;
16949: LD_ADDR_EXP 99
16953: PUSH
16954: LD_INT 1
16956: ST_TO_ADDR
// if p3 = 29 then
16957: LD_VAR 0 3
16961: PUSH
16962: LD_INT 29
16964: EQUAL
16965: IFFALSE 16975
// sDLaser := true ;
16967: LD_ADDR_EXP 100
16971: PUSH
16972: LD_INT 1
16974: ST_TO_ADDR
// if p3 = 30 then
16975: LD_VAR 0 3
16979: PUSH
16980: LD_INT 30
16982: EQUAL
16983: IFFALSE 16993
// sExchange := true ;
16985: LD_ADDR_EXP 101
16989: PUSH
16990: LD_INT 1
16992: ST_TO_ADDR
// if p3 = 31 then
16993: LD_VAR 0 3
16997: PUSH
16998: LD_INT 31
17000: EQUAL
17001: IFFALSE 17011
// sFac := true ;
17003: LD_ADDR_EXP 102
17007: PUSH
17008: LD_INT 1
17010: ST_TO_ADDR
// if p3 = 32 then
17011: LD_VAR 0 3
17015: PUSH
17016: LD_INT 32
17018: EQUAL
17019: IFFALSE 17029
// sPower := true ;
17021: LD_ADDR_EXP 103
17025: PUSH
17026: LD_INT 1
17028: ST_TO_ADDR
// if p3 = 33 then
17029: LD_VAR 0 3
17033: PUSH
17034: LD_INT 33
17036: EQUAL
17037: IFFALSE 17047
// sRandom := true ;
17039: LD_ADDR_EXP 104
17043: PUSH
17044: LD_INT 1
17046: ST_TO_ADDR
// if p3 = 34 then
17047: LD_VAR 0 3
17051: PUSH
17052: LD_INT 34
17054: EQUAL
17055: IFFALSE 17065
// sShield := true ;
17057: LD_ADDR_EXP 105
17061: PUSH
17062: LD_INT 1
17064: ST_TO_ADDR
// if p3 = 35 then
17065: LD_VAR 0 3
17069: PUSH
17070: LD_INT 35
17072: EQUAL
17073: IFFALSE 17083
// sTime := true ;
17075: LD_ADDR_EXP 106
17079: PUSH
17080: LD_INT 1
17082: ST_TO_ADDR
// if p3 = 36 then
17083: LD_VAR 0 3
17087: PUSH
17088: LD_INT 36
17090: EQUAL
17091: IFFALSE 17101
// sTools := true ;
17093: LD_ADDR_EXP 107
17097: PUSH
17098: LD_INT 1
17100: ST_TO_ADDR
// if p3 = 101 then
17101: LD_VAR 0 3
17105: PUSH
17106: LD_INT 101
17108: EQUAL
17109: IFFALSE 17119
// sSold := true ;
17111: LD_ADDR_EXP 72
17115: PUSH
17116: LD_INT 1
17118: ST_TO_ADDR
// if p3 = 102 then
17119: LD_VAR 0 3
17123: PUSH
17124: LD_INT 102
17126: EQUAL
17127: IFFALSE 17137
// sDiff := true ;
17129: LD_ADDR_EXP 73
17133: PUSH
17134: LD_INT 1
17136: ST_TO_ADDR
// if p3 = 103 then
17137: LD_VAR 0 3
17141: PUSH
17142: LD_INT 103
17144: EQUAL
17145: IFFALSE 17155
// sFog := true ;
17147: LD_ADDR_EXP 76
17151: PUSH
17152: LD_INT 1
17154: ST_TO_ADDR
// if p3 = 104 then
17155: LD_VAR 0 3
17159: PUSH
17160: LD_INT 104
17162: EQUAL
17163: IFFALSE 17173
// sReset := true ;
17165: LD_ADDR_EXP 77
17169: PUSH
17170: LD_INT 1
17172: ST_TO_ADDR
// if p3 = 105 then
17173: LD_VAR 0 3
17177: PUSH
17178: LD_INT 105
17180: EQUAL
17181: IFFALSE 17191
// sSun := true ;
17183: LD_ADDR_EXP 78
17187: PUSH
17188: LD_INT 1
17190: ST_TO_ADDR
// if p3 = 106 then
17191: LD_VAR 0 3
17195: PUSH
17196: LD_INT 106
17198: EQUAL
17199: IFFALSE 17209
// sTiger := true ;
17201: LD_ADDR_EXP 74
17205: PUSH
17206: LD_INT 1
17208: ST_TO_ADDR
// if p3 = 107 then
17209: LD_VAR 0 3
17213: PUSH
17214: LD_INT 107
17216: EQUAL
17217: IFFALSE 17227
// sBomb := true ;
17219: LD_ADDR_EXP 75
17223: PUSH
17224: LD_INT 1
17226: ST_TO_ADDR
// if p3 = 108 then
17227: LD_VAR 0 3
17231: PUSH
17232: LD_INT 108
17234: EQUAL
17235: IFFALSE 17245
// sWound := true ;
17237: LD_ADDR_EXP 83
17241: PUSH
17242: LD_INT 1
17244: ST_TO_ADDR
// if p3 = 109 then
17245: LD_VAR 0 3
17249: PUSH
17250: LD_INT 109
17252: EQUAL
17253: IFFALSE 17263
// sBetray := true ;
17255: LD_ADDR_EXP 87
17259: PUSH
17260: LD_INT 1
17262: ST_TO_ADDR
// if p3 = 110 then
17263: LD_VAR 0 3
17267: PUSH
17268: LD_INT 110
17270: EQUAL
17271: IFFALSE 17281
// sContamin := true ;
17273: LD_ADDR_EXP 88
17277: PUSH
17278: LD_INT 1
17280: ST_TO_ADDR
// if p3 = 111 then
17281: LD_VAR 0 3
17285: PUSH
17286: LD_INT 111
17288: EQUAL
17289: IFFALSE 17299
// sOil := true ;
17291: LD_ADDR_EXP 90
17295: PUSH
17296: LD_INT 1
17298: ST_TO_ADDR
// if p3 = 112 then
17299: LD_VAR 0 3
17303: PUSH
17304: LD_INT 112
17306: EQUAL
17307: IFFALSE 17317
// sStu := true ;
17309: LD_ADDR_EXP 94
17313: PUSH
17314: LD_INT 1
17316: ST_TO_ADDR
// if p3 = 113 then
17317: LD_VAR 0 3
17321: PUSH
17322: LD_INT 113
17324: EQUAL
17325: IFFALSE 17335
// sBazooka := true ;
17327: LD_ADDR_EXP 97
17331: PUSH
17332: LD_INT 1
17334: ST_TO_ADDR
// if p3 = 114 then
17335: LD_VAR 0 3
17339: PUSH
17340: LD_INT 114
17342: EQUAL
17343: IFFALSE 17353
// sMortar := true ;
17345: LD_ADDR_EXP 98
17349: PUSH
17350: LD_INT 1
17352: ST_TO_ADDR
// if p3 = 115 then
17353: LD_VAR 0 3
17357: PUSH
17358: LD_INT 115
17360: EQUAL
17361: IFFALSE 17371
// sRanger := true ;
17363: LD_ADDR_EXP 108
17367: PUSH
17368: LD_INT 1
17370: ST_TO_ADDR
// end ; if p2 = 101 then
17371: LD_VAR 0 2
17375: PUSH
17376: LD_INT 101
17378: EQUAL
17379: IFFALSE 17507
// begin case p3 of 1 :
17381: LD_VAR 0 3
17385: PUSH
17386: LD_INT 1
17388: DOUBLE
17389: EQUAL
17390: IFTRUE 17394
17392: GO 17401
17394: POP
// hHackUnlimitedResources ; 2 :
17395: CALL 28544 0 0
17399: GO 17507
17401: LD_INT 2
17403: DOUBLE
17404: EQUAL
17405: IFTRUE 17409
17407: GO 17416
17409: POP
// hHackSetLevel10 ; 3 :
17410: CALL 28677 0 0
17414: GO 17507
17416: LD_INT 3
17418: DOUBLE
17419: EQUAL
17420: IFTRUE 17424
17422: GO 17431
17424: POP
// hHackSetLevel10YourUnits ; 4 :
17425: CALL 28762 0 0
17429: GO 17507
17431: LD_INT 4
17433: DOUBLE
17434: EQUAL
17435: IFTRUE 17439
17437: GO 17446
17439: POP
// hHackInvincible ; 5 :
17440: CALL 29210 0 0
17444: GO 17507
17446: LD_INT 5
17448: DOUBLE
17449: EQUAL
17450: IFTRUE 17454
17452: GO 17461
17454: POP
// hHackInvisible ; 6 :
17455: CALL 29321 0 0
17459: GO 17507
17461: LD_INT 6
17463: DOUBLE
17464: EQUAL
17465: IFTRUE 17469
17467: GO 17476
17469: POP
// hHackChangeYourSide ; 7 :
17470: CALL 29378 0 0
17474: GO 17507
17476: LD_INT 7
17478: DOUBLE
17479: EQUAL
17480: IFTRUE 17484
17482: GO 17491
17484: POP
// hHackChangeUnitSide ; 8 :
17485: CALL 29420 0 0
17489: GO 17507
17491: LD_INT 8
17493: DOUBLE
17494: EQUAL
17495: IFTRUE 17499
17497: GO 17506
17499: POP
// hHackFog ; end ;
17500: CALL 29521 0 0
17504: GO 17507
17506: POP
// end ; end ;
17507: LD_VAR 0 7
17511: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
17512: GO 17514
17514: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17515: LD_STRING initStreamRollete();
17517: PPUSH
17518: CALL_OW 559
// InitStreamMode ;
17522: CALL 17531 0 0
// DefineStreamItems ( ) ;
17526: CALL 17971 0 0
// end ;
17530: END
// function InitStreamMode ; begin
17531: LD_INT 0
17533: PPUSH
// streamModeActive := false ;
17534: LD_ADDR_EXP 55
17538: PUSH
17539: LD_INT 0
17541: ST_TO_ADDR
// normalCounter := 36 ;
17542: LD_ADDR_EXP 56
17546: PUSH
17547: LD_INT 36
17549: ST_TO_ADDR
// hardcoreCounter := 16 ;
17550: LD_ADDR_EXP 57
17554: PUSH
17555: LD_INT 16
17557: ST_TO_ADDR
// sRocket := false ;
17558: LD_ADDR_EXP 60
17562: PUSH
17563: LD_INT 0
17565: ST_TO_ADDR
// sSpeed := false ;
17566: LD_ADDR_EXP 59
17570: PUSH
17571: LD_INT 0
17573: ST_TO_ADDR
// sEngine := false ;
17574: LD_ADDR_EXP 61
17578: PUSH
17579: LD_INT 0
17581: ST_TO_ADDR
// sSpec := false ;
17582: LD_ADDR_EXP 58
17586: PUSH
17587: LD_INT 0
17589: ST_TO_ADDR
// sLevel := false ;
17590: LD_ADDR_EXP 62
17594: PUSH
17595: LD_INT 0
17597: ST_TO_ADDR
// sArmoury := false ;
17598: LD_ADDR_EXP 63
17602: PUSH
17603: LD_INT 0
17605: ST_TO_ADDR
// sRadar := false ;
17606: LD_ADDR_EXP 64
17610: PUSH
17611: LD_INT 0
17613: ST_TO_ADDR
// sBunker := false ;
17614: LD_ADDR_EXP 65
17618: PUSH
17619: LD_INT 0
17621: ST_TO_ADDR
// sHack := false ;
17622: LD_ADDR_EXP 66
17626: PUSH
17627: LD_INT 0
17629: ST_TO_ADDR
// sFire := false ;
17630: LD_ADDR_EXP 67
17634: PUSH
17635: LD_INT 0
17637: ST_TO_ADDR
// sRefresh := false ;
17638: LD_ADDR_EXP 68
17642: PUSH
17643: LD_INT 0
17645: ST_TO_ADDR
// sExp := false ;
17646: LD_ADDR_EXP 69
17650: PUSH
17651: LD_INT 0
17653: ST_TO_ADDR
// sDepot := false ;
17654: LD_ADDR_EXP 70
17658: PUSH
17659: LD_INT 0
17661: ST_TO_ADDR
// sFlag := false ;
17662: LD_ADDR_EXP 71
17666: PUSH
17667: LD_INT 0
17669: ST_TO_ADDR
// sKamikadze := false ;
17670: LD_ADDR_EXP 79
17674: PUSH
17675: LD_INT 0
17677: ST_TO_ADDR
// sTroll := false ;
17678: LD_ADDR_EXP 80
17682: PUSH
17683: LD_INT 0
17685: ST_TO_ADDR
// sSlow := false ;
17686: LD_ADDR_EXP 81
17690: PUSH
17691: LD_INT 0
17693: ST_TO_ADDR
// sLack := false ;
17694: LD_ADDR_EXP 82
17698: PUSH
17699: LD_INT 0
17701: ST_TO_ADDR
// sTank := false ;
17702: LD_ADDR_EXP 84
17706: PUSH
17707: LD_INT 0
17709: ST_TO_ADDR
// sRemote := false ;
17710: LD_ADDR_EXP 85
17714: PUSH
17715: LD_INT 0
17717: ST_TO_ADDR
// sPowell := false ;
17718: LD_ADDR_EXP 86
17722: PUSH
17723: LD_INT 0
17725: ST_TO_ADDR
// sTeleport := false ;
17726: LD_ADDR_EXP 89
17730: PUSH
17731: LD_INT 0
17733: ST_TO_ADDR
// sOilTower := false ;
17734: LD_ADDR_EXP 91
17738: PUSH
17739: LD_INT 0
17741: ST_TO_ADDR
// sShovel := false ;
17742: LD_ADDR_EXP 92
17746: PUSH
17747: LD_INT 0
17749: ST_TO_ADDR
// sSheik := false ;
17750: LD_ADDR_EXP 93
17754: PUSH
17755: LD_INT 0
17757: ST_TO_ADDR
// sEarthquake := false ;
17758: LD_ADDR_EXP 95
17762: PUSH
17763: LD_INT 0
17765: ST_TO_ADDR
// sAI := false ;
17766: LD_ADDR_EXP 96
17770: PUSH
17771: LD_INT 0
17773: ST_TO_ADDR
// sCargo := false ;
17774: LD_ADDR_EXP 99
17778: PUSH
17779: LD_INT 0
17781: ST_TO_ADDR
// sDLaser := false ;
17782: LD_ADDR_EXP 100
17786: PUSH
17787: LD_INT 0
17789: ST_TO_ADDR
// sExchange := false ;
17790: LD_ADDR_EXP 101
17794: PUSH
17795: LD_INT 0
17797: ST_TO_ADDR
// sFac := false ;
17798: LD_ADDR_EXP 102
17802: PUSH
17803: LD_INT 0
17805: ST_TO_ADDR
// sPower := false ;
17806: LD_ADDR_EXP 103
17810: PUSH
17811: LD_INT 0
17813: ST_TO_ADDR
// sRandom := false ;
17814: LD_ADDR_EXP 104
17818: PUSH
17819: LD_INT 0
17821: ST_TO_ADDR
// sShield := false ;
17822: LD_ADDR_EXP 105
17826: PUSH
17827: LD_INT 0
17829: ST_TO_ADDR
// sTime := false ;
17830: LD_ADDR_EXP 106
17834: PUSH
17835: LD_INT 0
17837: ST_TO_ADDR
// sTools := false ;
17838: LD_ADDR_EXP 107
17842: PUSH
17843: LD_INT 0
17845: ST_TO_ADDR
// sSold := false ;
17846: LD_ADDR_EXP 72
17850: PUSH
17851: LD_INT 0
17853: ST_TO_ADDR
// sDiff := false ;
17854: LD_ADDR_EXP 73
17858: PUSH
17859: LD_INT 0
17861: ST_TO_ADDR
// sFog := false ;
17862: LD_ADDR_EXP 76
17866: PUSH
17867: LD_INT 0
17869: ST_TO_ADDR
// sReset := false ;
17870: LD_ADDR_EXP 77
17874: PUSH
17875: LD_INT 0
17877: ST_TO_ADDR
// sSun := false ;
17878: LD_ADDR_EXP 78
17882: PUSH
17883: LD_INT 0
17885: ST_TO_ADDR
// sTiger := false ;
17886: LD_ADDR_EXP 74
17890: PUSH
17891: LD_INT 0
17893: ST_TO_ADDR
// sBomb := false ;
17894: LD_ADDR_EXP 75
17898: PUSH
17899: LD_INT 0
17901: ST_TO_ADDR
// sWound := false ;
17902: LD_ADDR_EXP 83
17906: PUSH
17907: LD_INT 0
17909: ST_TO_ADDR
// sBetray := false ;
17910: LD_ADDR_EXP 87
17914: PUSH
17915: LD_INT 0
17917: ST_TO_ADDR
// sContamin := false ;
17918: LD_ADDR_EXP 88
17922: PUSH
17923: LD_INT 0
17925: ST_TO_ADDR
// sOil := false ;
17926: LD_ADDR_EXP 90
17930: PUSH
17931: LD_INT 0
17933: ST_TO_ADDR
// sStu := false ;
17934: LD_ADDR_EXP 94
17938: PUSH
17939: LD_INT 0
17941: ST_TO_ADDR
// sBazooka := false ;
17942: LD_ADDR_EXP 97
17946: PUSH
17947: LD_INT 0
17949: ST_TO_ADDR
// sMortar := false ;
17950: LD_ADDR_EXP 98
17954: PUSH
17955: LD_INT 0
17957: ST_TO_ADDR
// sRanger := false ;
17958: LD_ADDR_EXP 108
17962: PUSH
17963: LD_INT 0
17965: ST_TO_ADDR
// end ;
17966: LD_VAR 0 1
17970: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
17971: LD_INT 0
17973: PPUSH
17974: PPUSH
17975: PPUSH
17976: PPUSH
17977: PPUSH
// result := [ ] ;
17978: LD_ADDR_VAR 0 1
17982: PUSH
17983: EMPTY
17984: ST_TO_ADDR
// if campaign_id = 1 then
17985: LD_OWVAR 69
17989: PUSH
17990: LD_INT 1
17992: EQUAL
17993: IFFALSE 20931
// begin case mission_number of 1 :
17995: LD_OWVAR 70
17999: PUSH
18000: LD_INT 1
18002: DOUBLE
18003: EQUAL
18004: IFTRUE 18008
18006: GO 18072
18008: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
18009: LD_ADDR_VAR 0 1
18013: PUSH
18014: LD_INT 2
18016: PUSH
18017: LD_INT 4
18019: PUSH
18020: LD_INT 11
18022: PUSH
18023: LD_INT 12
18025: PUSH
18026: LD_INT 15
18028: PUSH
18029: LD_INT 16
18031: PUSH
18032: LD_INT 22
18034: PUSH
18035: LD_INT 23
18037: PUSH
18038: LD_INT 26
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 101
18054: PUSH
18055: LD_INT 102
18057: PUSH
18058: LD_INT 106
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: ST_TO_ADDR
18070: GO 20929
18072: LD_INT 2
18074: DOUBLE
18075: EQUAL
18076: IFTRUE 18080
18078: GO 18152
18080: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
18081: LD_ADDR_VAR 0 1
18085: PUSH
18086: LD_INT 2
18088: PUSH
18089: LD_INT 4
18091: PUSH
18092: LD_INT 11
18094: PUSH
18095: LD_INT 12
18097: PUSH
18098: LD_INT 15
18100: PUSH
18101: LD_INT 16
18103: PUSH
18104: LD_INT 22
18106: PUSH
18107: LD_INT 23
18109: PUSH
18110: LD_INT 26
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 101
18126: PUSH
18127: LD_INT 102
18129: PUSH
18130: LD_INT 105
18132: PUSH
18133: LD_INT 106
18135: PUSH
18136: LD_INT 108
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: ST_TO_ADDR
18150: GO 20929
18152: LD_INT 3
18154: DOUBLE
18155: EQUAL
18156: IFTRUE 18160
18158: GO 18236
18160: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
18161: LD_ADDR_VAR 0 1
18165: PUSH
18166: LD_INT 2
18168: PUSH
18169: LD_INT 4
18171: PUSH
18172: LD_INT 5
18174: PUSH
18175: LD_INT 11
18177: PUSH
18178: LD_INT 12
18180: PUSH
18181: LD_INT 15
18183: PUSH
18184: LD_INT 16
18186: PUSH
18187: LD_INT 22
18189: PUSH
18190: LD_INT 26
18192: PUSH
18193: LD_INT 36
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 101
18210: PUSH
18211: LD_INT 102
18213: PUSH
18214: LD_INT 105
18216: PUSH
18217: LD_INT 106
18219: PUSH
18220: LD_INT 108
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: ST_TO_ADDR
18234: GO 20929
18236: LD_INT 4
18238: DOUBLE
18239: EQUAL
18240: IFTRUE 18244
18242: GO 18328
18244: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
18245: LD_ADDR_VAR 0 1
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: LD_INT 4
18255: PUSH
18256: LD_INT 5
18258: PUSH
18259: LD_INT 8
18261: PUSH
18262: LD_INT 11
18264: PUSH
18265: LD_INT 12
18267: PUSH
18268: LD_INT 15
18270: PUSH
18271: LD_INT 16
18273: PUSH
18274: LD_INT 22
18276: PUSH
18277: LD_INT 23
18279: PUSH
18280: LD_INT 26
18282: PUSH
18283: LD_INT 36
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 101
18302: PUSH
18303: LD_INT 102
18305: PUSH
18306: LD_INT 105
18308: PUSH
18309: LD_INT 106
18311: PUSH
18312: LD_INT 108
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: ST_TO_ADDR
18326: GO 20929
18328: LD_INT 5
18330: DOUBLE
18331: EQUAL
18332: IFTRUE 18336
18334: GO 18436
18336: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
18337: LD_ADDR_VAR 0 1
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 4
18347: PUSH
18348: LD_INT 5
18350: PUSH
18351: LD_INT 6
18353: PUSH
18354: LD_INT 8
18356: PUSH
18357: LD_INT 11
18359: PUSH
18360: LD_INT 12
18362: PUSH
18363: LD_INT 15
18365: PUSH
18366: LD_INT 16
18368: PUSH
18369: LD_INT 22
18371: PUSH
18372: LD_INT 23
18374: PUSH
18375: LD_INT 25
18377: PUSH
18378: LD_INT 26
18380: PUSH
18381: LD_INT 36
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 101
18402: PUSH
18403: LD_INT 102
18405: PUSH
18406: LD_INT 105
18408: PUSH
18409: LD_INT 106
18411: PUSH
18412: LD_INT 108
18414: PUSH
18415: LD_INT 109
18417: PUSH
18418: LD_INT 112
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: ST_TO_ADDR
18434: GO 20929
18436: LD_INT 6
18438: DOUBLE
18439: EQUAL
18440: IFTRUE 18444
18442: GO 18564
18444: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
18445: LD_ADDR_VAR 0 1
18449: PUSH
18450: LD_INT 2
18452: PUSH
18453: LD_INT 4
18455: PUSH
18456: LD_INT 5
18458: PUSH
18459: LD_INT 6
18461: PUSH
18462: LD_INT 8
18464: PUSH
18465: LD_INT 11
18467: PUSH
18468: LD_INT 12
18470: PUSH
18471: LD_INT 15
18473: PUSH
18474: LD_INT 16
18476: PUSH
18477: LD_INT 20
18479: PUSH
18480: LD_INT 21
18482: PUSH
18483: LD_INT 22
18485: PUSH
18486: LD_INT 23
18488: PUSH
18489: LD_INT 25
18491: PUSH
18492: LD_INT 26
18494: PUSH
18495: LD_INT 30
18497: PUSH
18498: LD_INT 31
18500: PUSH
18501: LD_INT 32
18503: PUSH
18504: LD_INT 36
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 101
18530: PUSH
18531: LD_INT 102
18533: PUSH
18534: LD_INT 105
18536: PUSH
18537: LD_INT 106
18539: PUSH
18540: LD_INT 108
18542: PUSH
18543: LD_INT 109
18545: PUSH
18546: LD_INT 112
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: ST_TO_ADDR
18562: GO 20929
18564: LD_INT 7
18566: DOUBLE
18567: EQUAL
18568: IFTRUE 18572
18570: GO 18672
18572: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
18573: LD_ADDR_VAR 0 1
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: LD_INT 4
18583: PUSH
18584: LD_INT 5
18586: PUSH
18587: LD_INT 7
18589: PUSH
18590: LD_INT 11
18592: PUSH
18593: LD_INT 12
18595: PUSH
18596: LD_INT 15
18598: PUSH
18599: LD_INT 16
18601: PUSH
18602: LD_INT 20
18604: PUSH
18605: LD_INT 21
18607: PUSH
18608: LD_INT 22
18610: PUSH
18611: LD_INT 23
18613: PUSH
18614: LD_INT 25
18616: PUSH
18617: LD_INT 26
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 101
18638: PUSH
18639: LD_INT 102
18641: PUSH
18642: LD_INT 103
18644: PUSH
18645: LD_INT 105
18647: PUSH
18648: LD_INT 106
18650: PUSH
18651: LD_INT 108
18653: PUSH
18654: LD_INT 112
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: ST_TO_ADDR
18670: GO 20929
18672: LD_INT 8
18674: DOUBLE
18675: EQUAL
18676: IFTRUE 18680
18678: GO 18808
18680: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
18681: LD_ADDR_VAR 0 1
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: LD_INT 4
18691: PUSH
18692: LD_INT 5
18694: PUSH
18695: LD_INT 6
18697: PUSH
18698: LD_INT 7
18700: PUSH
18701: LD_INT 8
18703: PUSH
18704: LD_INT 11
18706: PUSH
18707: LD_INT 12
18709: PUSH
18710: LD_INT 15
18712: PUSH
18713: LD_INT 16
18715: PUSH
18716: LD_INT 20
18718: PUSH
18719: LD_INT 21
18721: PUSH
18722: LD_INT 22
18724: PUSH
18725: LD_INT 23
18727: PUSH
18728: LD_INT 25
18730: PUSH
18731: LD_INT 26
18733: PUSH
18734: LD_INT 30
18736: PUSH
18737: LD_INT 31
18739: PUSH
18740: LD_INT 32
18742: PUSH
18743: LD_INT 36
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 101
18770: PUSH
18771: LD_INT 102
18773: PUSH
18774: LD_INT 103
18776: PUSH
18777: LD_INT 105
18779: PUSH
18780: LD_INT 106
18782: PUSH
18783: LD_INT 108
18785: PUSH
18786: LD_INT 109
18788: PUSH
18789: LD_INT 112
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: ST_TO_ADDR
18806: GO 20929
18808: LD_INT 9
18810: DOUBLE
18811: EQUAL
18812: IFTRUE 18816
18814: GO 18952
18816: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
18817: LD_ADDR_VAR 0 1
18821: PUSH
18822: LD_INT 2
18824: PUSH
18825: LD_INT 4
18827: PUSH
18828: LD_INT 5
18830: PUSH
18831: LD_INT 6
18833: PUSH
18834: LD_INT 7
18836: PUSH
18837: LD_INT 8
18839: PUSH
18840: LD_INT 11
18842: PUSH
18843: LD_INT 12
18845: PUSH
18846: LD_INT 15
18848: PUSH
18849: LD_INT 16
18851: PUSH
18852: LD_INT 20
18854: PUSH
18855: LD_INT 21
18857: PUSH
18858: LD_INT 22
18860: PUSH
18861: LD_INT 23
18863: PUSH
18864: LD_INT 25
18866: PUSH
18867: LD_INT 26
18869: PUSH
18870: LD_INT 28
18872: PUSH
18873: LD_INT 30
18875: PUSH
18876: LD_INT 31
18878: PUSH
18879: LD_INT 32
18881: PUSH
18882: LD_INT 36
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 101
18910: PUSH
18911: LD_INT 102
18913: PUSH
18914: LD_INT 103
18916: PUSH
18917: LD_INT 105
18919: PUSH
18920: LD_INT 106
18922: PUSH
18923: LD_INT 108
18925: PUSH
18926: LD_INT 109
18928: PUSH
18929: LD_INT 112
18931: PUSH
18932: LD_INT 114
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: ST_TO_ADDR
18950: GO 20929
18952: LD_INT 10
18954: DOUBLE
18955: EQUAL
18956: IFTRUE 18960
18958: GO 19144
18960: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
18961: LD_ADDR_VAR 0 1
18965: PUSH
18966: LD_INT 2
18968: PUSH
18969: LD_INT 4
18971: PUSH
18972: LD_INT 5
18974: PUSH
18975: LD_INT 6
18977: PUSH
18978: LD_INT 7
18980: PUSH
18981: LD_INT 8
18983: PUSH
18984: LD_INT 9
18986: PUSH
18987: LD_INT 10
18989: PUSH
18990: LD_INT 11
18992: PUSH
18993: LD_INT 12
18995: PUSH
18996: LD_INT 13
18998: PUSH
18999: LD_INT 14
19001: PUSH
19002: LD_INT 15
19004: PUSH
19005: LD_INT 16
19007: PUSH
19008: LD_INT 17
19010: PUSH
19011: LD_INT 18
19013: PUSH
19014: LD_INT 19
19016: PUSH
19017: LD_INT 20
19019: PUSH
19020: LD_INT 21
19022: PUSH
19023: LD_INT 22
19025: PUSH
19026: LD_INT 23
19028: PUSH
19029: LD_INT 24
19031: PUSH
19032: LD_INT 25
19034: PUSH
19035: LD_INT 26
19037: PUSH
19038: LD_INT 28
19040: PUSH
19041: LD_INT 30
19043: PUSH
19044: LD_INT 31
19046: PUSH
19047: LD_INT 32
19049: PUSH
19050: LD_INT 36
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 101
19086: PUSH
19087: LD_INT 102
19089: PUSH
19090: LD_INT 103
19092: PUSH
19093: LD_INT 104
19095: PUSH
19096: LD_INT 105
19098: PUSH
19099: LD_INT 106
19101: PUSH
19102: LD_INT 107
19104: PUSH
19105: LD_INT 108
19107: PUSH
19108: LD_INT 109
19110: PUSH
19111: LD_INT 110
19113: PUSH
19114: LD_INT 111
19116: PUSH
19117: LD_INT 112
19119: PUSH
19120: LD_INT 114
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: ST_TO_ADDR
19142: GO 20929
19144: LD_INT 11
19146: DOUBLE
19147: EQUAL
19148: IFTRUE 19152
19150: GO 19344
19152: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
19153: LD_ADDR_VAR 0 1
19157: PUSH
19158: LD_INT 2
19160: PUSH
19161: LD_INT 3
19163: PUSH
19164: LD_INT 4
19166: PUSH
19167: LD_INT 5
19169: PUSH
19170: LD_INT 6
19172: PUSH
19173: LD_INT 7
19175: PUSH
19176: LD_INT 8
19178: PUSH
19179: LD_INT 9
19181: PUSH
19182: LD_INT 10
19184: PUSH
19185: LD_INT 11
19187: PUSH
19188: LD_INT 12
19190: PUSH
19191: LD_INT 13
19193: PUSH
19194: LD_INT 14
19196: PUSH
19197: LD_INT 15
19199: PUSH
19200: LD_INT 16
19202: PUSH
19203: LD_INT 17
19205: PUSH
19206: LD_INT 18
19208: PUSH
19209: LD_INT 19
19211: PUSH
19212: LD_INT 20
19214: PUSH
19215: LD_INT 21
19217: PUSH
19218: LD_INT 22
19220: PUSH
19221: LD_INT 23
19223: PUSH
19224: LD_INT 24
19226: PUSH
19227: LD_INT 25
19229: PUSH
19230: LD_INT 26
19232: PUSH
19233: LD_INT 28
19235: PUSH
19236: LD_INT 30
19238: PUSH
19239: LD_INT 31
19241: PUSH
19242: LD_INT 32
19244: PUSH
19245: LD_INT 34
19247: PUSH
19248: LD_INT 36
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 101
19286: PUSH
19287: LD_INT 102
19289: PUSH
19290: LD_INT 103
19292: PUSH
19293: LD_INT 104
19295: PUSH
19296: LD_INT 105
19298: PUSH
19299: LD_INT 106
19301: PUSH
19302: LD_INT 107
19304: PUSH
19305: LD_INT 108
19307: PUSH
19308: LD_INT 109
19310: PUSH
19311: LD_INT 110
19313: PUSH
19314: LD_INT 111
19316: PUSH
19317: LD_INT 112
19319: PUSH
19320: LD_INT 114
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: ST_TO_ADDR
19342: GO 20929
19344: LD_INT 12
19346: DOUBLE
19347: EQUAL
19348: IFTRUE 19352
19350: GO 19560
19352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
19353: LD_ADDR_VAR 0 1
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: LD_INT 3
19366: PUSH
19367: LD_INT 4
19369: PUSH
19370: LD_INT 5
19372: PUSH
19373: LD_INT 6
19375: PUSH
19376: LD_INT 7
19378: PUSH
19379: LD_INT 8
19381: PUSH
19382: LD_INT 9
19384: PUSH
19385: LD_INT 10
19387: PUSH
19388: LD_INT 11
19390: PUSH
19391: LD_INT 12
19393: PUSH
19394: LD_INT 13
19396: PUSH
19397: LD_INT 14
19399: PUSH
19400: LD_INT 15
19402: PUSH
19403: LD_INT 16
19405: PUSH
19406: LD_INT 17
19408: PUSH
19409: LD_INT 18
19411: PUSH
19412: LD_INT 19
19414: PUSH
19415: LD_INT 20
19417: PUSH
19418: LD_INT 21
19420: PUSH
19421: LD_INT 22
19423: PUSH
19424: LD_INT 23
19426: PUSH
19427: LD_INT 24
19429: PUSH
19430: LD_INT 25
19432: PUSH
19433: LD_INT 26
19435: PUSH
19436: LD_INT 27
19438: PUSH
19439: LD_INT 28
19441: PUSH
19442: LD_INT 30
19444: PUSH
19445: LD_INT 31
19447: PUSH
19448: LD_INT 32
19450: PUSH
19451: LD_INT 33
19453: PUSH
19454: LD_INT 34
19456: PUSH
19457: LD_INT 36
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 101
19498: PUSH
19499: LD_INT 102
19501: PUSH
19502: LD_INT 103
19504: PUSH
19505: LD_INT 104
19507: PUSH
19508: LD_INT 105
19510: PUSH
19511: LD_INT 106
19513: PUSH
19514: LD_INT 107
19516: PUSH
19517: LD_INT 108
19519: PUSH
19520: LD_INT 109
19522: PUSH
19523: LD_INT 110
19525: PUSH
19526: LD_INT 111
19528: PUSH
19529: LD_INT 112
19531: PUSH
19532: LD_INT 113
19534: PUSH
19535: LD_INT 114
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: ST_TO_ADDR
19558: GO 20929
19560: LD_INT 13
19562: DOUBLE
19563: EQUAL
19564: IFTRUE 19568
19566: GO 19764
19568: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
19569: LD_ADDR_VAR 0 1
19573: PUSH
19574: LD_INT 1
19576: PUSH
19577: LD_INT 2
19579: PUSH
19580: LD_INT 3
19582: PUSH
19583: LD_INT 4
19585: PUSH
19586: LD_INT 5
19588: PUSH
19589: LD_INT 8
19591: PUSH
19592: LD_INT 9
19594: PUSH
19595: LD_INT 10
19597: PUSH
19598: LD_INT 11
19600: PUSH
19601: LD_INT 12
19603: PUSH
19604: LD_INT 14
19606: PUSH
19607: LD_INT 15
19609: PUSH
19610: LD_INT 16
19612: PUSH
19613: LD_INT 17
19615: PUSH
19616: LD_INT 18
19618: PUSH
19619: LD_INT 19
19621: PUSH
19622: LD_INT 20
19624: PUSH
19625: LD_INT 21
19627: PUSH
19628: LD_INT 22
19630: PUSH
19631: LD_INT 23
19633: PUSH
19634: LD_INT 24
19636: PUSH
19637: LD_INT 25
19639: PUSH
19640: LD_INT 26
19642: PUSH
19643: LD_INT 27
19645: PUSH
19646: LD_INT 28
19648: PUSH
19649: LD_INT 30
19651: PUSH
19652: LD_INT 31
19654: PUSH
19655: LD_INT 32
19657: PUSH
19658: LD_INT 33
19660: PUSH
19661: LD_INT 34
19663: PUSH
19664: LD_INT 36
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 101
19702: PUSH
19703: LD_INT 102
19705: PUSH
19706: LD_INT 103
19708: PUSH
19709: LD_INT 104
19711: PUSH
19712: LD_INT 105
19714: PUSH
19715: LD_INT 106
19717: PUSH
19718: LD_INT 107
19720: PUSH
19721: LD_INT 108
19723: PUSH
19724: LD_INT 109
19726: PUSH
19727: LD_INT 110
19729: PUSH
19730: LD_INT 111
19732: PUSH
19733: LD_INT 112
19735: PUSH
19736: LD_INT 113
19738: PUSH
19739: LD_INT 114
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: ST_TO_ADDR
19762: GO 20929
19764: LD_INT 14
19766: DOUBLE
19767: EQUAL
19768: IFTRUE 19772
19770: GO 19984
19772: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
19773: LD_ADDR_VAR 0 1
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: LD_INT 3
19786: PUSH
19787: LD_INT 4
19789: PUSH
19790: LD_INT 5
19792: PUSH
19793: LD_INT 6
19795: PUSH
19796: LD_INT 7
19798: PUSH
19799: LD_INT 8
19801: PUSH
19802: LD_INT 9
19804: PUSH
19805: LD_INT 10
19807: PUSH
19808: LD_INT 11
19810: PUSH
19811: LD_INT 12
19813: PUSH
19814: LD_INT 13
19816: PUSH
19817: LD_INT 14
19819: PUSH
19820: LD_INT 15
19822: PUSH
19823: LD_INT 16
19825: PUSH
19826: LD_INT 17
19828: PUSH
19829: LD_INT 18
19831: PUSH
19832: LD_INT 19
19834: PUSH
19835: LD_INT 20
19837: PUSH
19838: LD_INT 21
19840: PUSH
19841: LD_INT 22
19843: PUSH
19844: LD_INT 23
19846: PUSH
19847: LD_INT 24
19849: PUSH
19850: LD_INT 25
19852: PUSH
19853: LD_INT 26
19855: PUSH
19856: LD_INT 27
19858: PUSH
19859: LD_INT 28
19861: PUSH
19862: LD_INT 29
19864: PUSH
19865: LD_INT 30
19867: PUSH
19868: LD_INT 31
19870: PUSH
19871: LD_INT 32
19873: PUSH
19874: LD_INT 33
19876: PUSH
19877: LD_INT 34
19879: PUSH
19880: LD_INT 36
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 101
19922: PUSH
19923: LD_INT 102
19925: PUSH
19926: LD_INT 103
19928: PUSH
19929: LD_INT 104
19931: PUSH
19932: LD_INT 105
19934: PUSH
19935: LD_INT 106
19937: PUSH
19938: LD_INT 107
19940: PUSH
19941: LD_INT 108
19943: PUSH
19944: LD_INT 109
19946: PUSH
19947: LD_INT 110
19949: PUSH
19950: LD_INT 111
19952: PUSH
19953: LD_INT 112
19955: PUSH
19956: LD_INT 113
19958: PUSH
19959: LD_INT 114
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: ST_TO_ADDR
19982: GO 20929
19984: LD_INT 15
19986: DOUBLE
19987: EQUAL
19988: IFTRUE 19992
19990: GO 20204
19992: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
19993: LD_ADDR_VAR 0 1
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: LD_INT 2
20003: PUSH
20004: LD_INT 3
20006: PUSH
20007: LD_INT 4
20009: PUSH
20010: LD_INT 5
20012: PUSH
20013: LD_INT 6
20015: PUSH
20016: LD_INT 7
20018: PUSH
20019: LD_INT 8
20021: PUSH
20022: LD_INT 9
20024: PUSH
20025: LD_INT 10
20027: PUSH
20028: LD_INT 11
20030: PUSH
20031: LD_INT 12
20033: PUSH
20034: LD_INT 13
20036: PUSH
20037: LD_INT 14
20039: PUSH
20040: LD_INT 15
20042: PUSH
20043: LD_INT 16
20045: PUSH
20046: LD_INT 17
20048: PUSH
20049: LD_INT 18
20051: PUSH
20052: LD_INT 19
20054: PUSH
20055: LD_INT 20
20057: PUSH
20058: LD_INT 21
20060: PUSH
20061: LD_INT 22
20063: PUSH
20064: LD_INT 23
20066: PUSH
20067: LD_INT 24
20069: PUSH
20070: LD_INT 25
20072: PUSH
20073: LD_INT 26
20075: PUSH
20076: LD_INT 27
20078: PUSH
20079: LD_INT 28
20081: PUSH
20082: LD_INT 29
20084: PUSH
20085: LD_INT 30
20087: PUSH
20088: LD_INT 31
20090: PUSH
20091: LD_INT 32
20093: PUSH
20094: LD_INT 33
20096: PUSH
20097: LD_INT 34
20099: PUSH
20100: LD_INT 36
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 101
20142: PUSH
20143: LD_INT 102
20145: PUSH
20146: LD_INT 103
20148: PUSH
20149: LD_INT 104
20151: PUSH
20152: LD_INT 105
20154: PUSH
20155: LD_INT 106
20157: PUSH
20158: LD_INT 107
20160: PUSH
20161: LD_INT 108
20163: PUSH
20164: LD_INT 109
20166: PUSH
20167: LD_INT 110
20169: PUSH
20170: LD_INT 111
20172: PUSH
20173: LD_INT 112
20175: PUSH
20176: LD_INT 113
20178: PUSH
20179: LD_INT 114
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: ST_TO_ADDR
20202: GO 20929
20204: LD_INT 16
20206: DOUBLE
20207: EQUAL
20208: IFTRUE 20212
20210: GO 20336
20212: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
20213: LD_ADDR_VAR 0 1
20217: PUSH
20218: LD_INT 2
20220: PUSH
20221: LD_INT 4
20223: PUSH
20224: LD_INT 5
20226: PUSH
20227: LD_INT 7
20229: PUSH
20230: LD_INT 11
20232: PUSH
20233: LD_INT 12
20235: PUSH
20236: LD_INT 15
20238: PUSH
20239: LD_INT 16
20241: PUSH
20242: LD_INT 20
20244: PUSH
20245: LD_INT 21
20247: PUSH
20248: LD_INT 22
20250: PUSH
20251: LD_INT 23
20253: PUSH
20254: LD_INT 25
20256: PUSH
20257: LD_INT 26
20259: PUSH
20260: LD_INT 30
20262: PUSH
20263: LD_INT 31
20265: PUSH
20266: LD_INT 32
20268: PUSH
20269: LD_INT 33
20271: PUSH
20272: LD_INT 34
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 101
20298: PUSH
20299: LD_INT 102
20301: PUSH
20302: LD_INT 103
20304: PUSH
20305: LD_INT 106
20307: PUSH
20308: LD_INT 108
20310: PUSH
20311: LD_INT 112
20313: PUSH
20314: LD_INT 113
20316: PUSH
20317: LD_INT 114
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: ST_TO_ADDR
20334: GO 20929
20336: LD_INT 17
20338: DOUBLE
20339: EQUAL
20340: IFTRUE 20344
20342: GO 20556
20344: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
20345: LD_ADDR_VAR 0 1
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: LD_INT 2
20355: PUSH
20356: LD_INT 3
20358: PUSH
20359: LD_INT 4
20361: PUSH
20362: LD_INT 5
20364: PUSH
20365: LD_INT 6
20367: PUSH
20368: LD_INT 7
20370: PUSH
20371: LD_INT 8
20373: PUSH
20374: LD_INT 9
20376: PUSH
20377: LD_INT 10
20379: PUSH
20380: LD_INT 11
20382: PUSH
20383: LD_INT 12
20385: PUSH
20386: LD_INT 13
20388: PUSH
20389: LD_INT 14
20391: PUSH
20392: LD_INT 15
20394: PUSH
20395: LD_INT 16
20397: PUSH
20398: LD_INT 17
20400: PUSH
20401: LD_INT 18
20403: PUSH
20404: LD_INT 19
20406: PUSH
20407: LD_INT 20
20409: PUSH
20410: LD_INT 21
20412: PUSH
20413: LD_INT 22
20415: PUSH
20416: LD_INT 23
20418: PUSH
20419: LD_INT 24
20421: PUSH
20422: LD_INT 25
20424: PUSH
20425: LD_INT 26
20427: PUSH
20428: LD_INT 27
20430: PUSH
20431: LD_INT 28
20433: PUSH
20434: LD_INT 29
20436: PUSH
20437: LD_INT 30
20439: PUSH
20440: LD_INT 31
20442: PUSH
20443: LD_INT 32
20445: PUSH
20446: LD_INT 33
20448: PUSH
20449: LD_INT 34
20451: PUSH
20452: LD_INT 36
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 101
20494: PUSH
20495: LD_INT 102
20497: PUSH
20498: LD_INT 103
20500: PUSH
20501: LD_INT 104
20503: PUSH
20504: LD_INT 105
20506: PUSH
20507: LD_INT 106
20509: PUSH
20510: LD_INT 107
20512: PUSH
20513: LD_INT 108
20515: PUSH
20516: LD_INT 109
20518: PUSH
20519: LD_INT 110
20521: PUSH
20522: LD_INT 111
20524: PUSH
20525: LD_INT 112
20527: PUSH
20528: LD_INT 113
20530: PUSH
20531: LD_INT 114
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: ST_TO_ADDR
20554: GO 20929
20556: LD_INT 18
20558: DOUBLE
20559: EQUAL
20560: IFTRUE 20564
20562: GO 20700
20564: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
20565: LD_ADDR_VAR 0 1
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: LD_INT 4
20575: PUSH
20576: LD_INT 5
20578: PUSH
20579: LD_INT 7
20581: PUSH
20582: LD_INT 11
20584: PUSH
20585: LD_INT 12
20587: PUSH
20588: LD_INT 15
20590: PUSH
20591: LD_INT 16
20593: PUSH
20594: LD_INT 20
20596: PUSH
20597: LD_INT 21
20599: PUSH
20600: LD_INT 22
20602: PUSH
20603: LD_INT 23
20605: PUSH
20606: LD_INT 25
20608: PUSH
20609: LD_INT 26
20611: PUSH
20612: LD_INT 30
20614: PUSH
20615: LD_INT 31
20617: PUSH
20618: LD_INT 32
20620: PUSH
20621: LD_INT 33
20623: PUSH
20624: LD_INT 34
20626: PUSH
20627: LD_INT 35
20629: PUSH
20630: LD_INT 36
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 101
20658: PUSH
20659: LD_INT 102
20661: PUSH
20662: LD_INT 103
20664: PUSH
20665: LD_INT 106
20667: PUSH
20668: LD_INT 108
20670: PUSH
20671: LD_INT 112
20673: PUSH
20674: LD_INT 113
20676: PUSH
20677: LD_INT 114
20679: PUSH
20680: LD_INT 115
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: ST_TO_ADDR
20698: GO 20929
20700: LD_INT 19
20702: DOUBLE
20703: EQUAL
20704: IFTRUE 20708
20706: GO 20928
20708: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
20709: LD_ADDR_VAR 0 1
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: LD_INT 2
20719: PUSH
20720: LD_INT 3
20722: PUSH
20723: LD_INT 4
20725: PUSH
20726: LD_INT 5
20728: PUSH
20729: LD_INT 6
20731: PUSH
20732: LD_INT 7
20734: PUSH
20735: LD_INT 8
20737: PUSH
20738: LD_INT 9
20740: PUSH
20741: LD_INT 10
20743: PUSH
20744: LD_INT 11
20746: PUSH
20747: LD_INT 12
20749: PUSH
20750: LD_INT 13
20752: PUSH
20753: LD_INT 14
20755: PUSH
20756: LD_INT 15
20758: PUSH
20759: LD_INT 16
20761: PUSH
20762: LD_INT 17
20764: PUSH
20765: LD_INT 18
20767: PUSH
20768: LD_INT 19
20770: PUSH
20771: LD_INT 20
20773: PUSH
20774: LD_INT 21
20776: PUSH
20777: LD_INT 22
20779: PUSH
20780: LD_INT 23
20782: PUSH
20783: LD_INT 24
20785: PUSH
20786: LD_INT 25
20788: PUSH
20789: LD_INT 26
20791: PUSH
20792: LD_INT 27
20794: PUSH
20795: LD_INT 28
20797: PUSH
20798: LD_INT 29
20800: PUSH
20801: LD_INT 30
20803: PUSH
20804: LD_INT 31
20806: PUSH
20807: LD_INT 32
20809: PUSH
20810: LD_INT 33
20812: PUSH
20813: LD_INT 34
20815: PUSH
20816: LD_INT 35
20818: PUSH
20819: LD_INT 36
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 101
20862: PUSH
20863: LD_INT 102
20865: PUSH
20866: LD_INT 103
20868: PUSH
20869: LD_INT 104
20871: PUSH
20872: LD_INT 105
20874: PUSH
20875: LD_INT 106
20877: PUSH
20878: LD_INT 107
20880: PUSH
20881: LD_INT 108
20883: PUSH
20884: LD_INT 109
20886: PUSH
20887: LD_INT 110
20889: PUSH
20890: LD_INT 111
20892: PUSH
20893: LD_INT 112
20895: PUSH
20896: LD_INT 113
20898: PUSH
20899: LD_INT 114
20901: PUSH
20902: LD_INT 115
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: ST_TO_ADDR
20926: GO 20929
20928: POP
// end else
20929: GO 21148
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
20931: LD_ADDR_VAR 0 1
20935: PUSH
20936: LD_INT 1
20938: PUSH
20939: LD_INT 2
20941: PUSH
20942: LD_INT 3
20944: PUSH
20945: LD_INT 4
20947: PUSH
20948: LD_INT 5
20950: PUSH
20951: LD_INT 6
20953: PUSH
20954: LD_INT 7
20956: PUSH
20957: LD_INT 8
20959: PUSH
20960: LD_INT 9
20962: PUSH
20963: LD_INT 10
20965: PUSH
20966: LD_INT 11
20968: PUSH
20969: LD_INT 12
20971: PUSH
20972: LD_INT 13
20974: PUSH
20975: LD_INT 14
20977: PUSH
20978: LD_INT 15
20980: PUSH
20981: LD_INT 16
20983: PUSH
20984: LD_INT 17
20986: PUSH
20987: LD_INT 18
20989: PUSH
20990: LD_INT 19
20992: PUSH
20993: LD_INT 20
20995: PUSH
20996: LD_INT 21
20998: PUSH
20999: LD_INT 22
21001: PUSH
21002: LD_INT 23
21004: PUSH
21005: LD_INT 24
21007: PUSH
21008: LD_INT 25
21010: PUSH
21011: LD_INT 26
21013: PUSH
21014: LD_INT 27
21016: PUSH
21017: LD_INT 28
21019: PUSH
21020: LD_INT 29
21022: PUSH
21023: LD_INT 30
21025: PUSH
21026: LD_INT 31
21028: PUSH
21029: LD_INT 32
21031: PUSH
21032: LD_INT 33
21034: PUSH
21035: LD_INT 34
21037: PUSH
21038: LD_INT 35
21040: PUSH
21041: LD_INT 36
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 101
21084: PUSH
21085: LD_INT 102
21087: PUSH
21088: LD_INT 103
21090: PUSH
21091: LD_INT 104
21093: PUSH
21094: LD_INT 105
21096: PUSH
21097: LD_INT 106
21099: PUSH
21100: LD_INT 107
21102: PUSH
21103: LD_INT 108
21105: PUSH
21106: LD_INT 109
21108: PUSH
21109: LD_INT 110
21111: PUSH
21112: LD_INT 111
21114: PUSH
21115: LD_INT 112
21117: PUSH
21118: LD_INT 113
21120: PUSH
21121: LD_INT 114
21123: PUSH
21124: LD_INT 115
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: ST_TO_ADDR
// if result then
21148: LD_VAR 0 1
21152: IFFALSE 21441
// begin normal :=  ;
21154: LD_ADDR_VAR 0 3
21158: PUSH
21159: LD_STRING 
21161: ST_TO_ADDR
// hardcore :=  ;
21162: LD_ADDR_VAR 0 4
21166: PUSH
21167: LD_STRING 
21169: ST_TO_ADDR
// for i = 1 to normalCounter do
21170: LD_ADDR_VAR 0 5
21174: PUSH
21175: DOUBLE
21176: LD_INT 1
21178: DEC
21179: ST_TO_ADDR
21180: LD_EXP 56
21184: PUSH
21185: FOR_TO
21186: IFFALSE 21287
// begin tmp := 0 ;
21188: LD_ADDR_VAR 0 2
21192: PUSH
21193: LD_STRING 0
21195: ST_TO_ADDR
// if result [ 1 ] then
21196: LD_VAR 0 1
21200: PUSH
21201: LD_INT 1
21203: ARRAY
21204: IFFALSE 21269
// if result [ 1 ] [ 1 ] = i then
21206: LD_VAR 0 1
21210: PUSH
21211: LD_INT 1
21213: ARRAY
21214: PUSH
21215: LD_INT 1
21217: ARRAY
21218: PUSH
21219: LD_VAR 0 5
21223: EQUAL
21224: IFFALSE 21269
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21226: LD_ADDR_VAR 0 1
21230: PUSH
21231: LD_VAR 0 1
21235: PPUSH
21236: LD_INT 1
21238: PPUSH
21239: LD_VAR 0 1
21243: PUSH
21244: LD_INT 1
21246: ARRAY
21247: PPUSH
21248: LD_INT 1
21250: PPUSH
21251: CALL_OW 3
21255: PPUSH
21256: CALL_OW 1
21260: ST_TO_ADDR
// tmp := 1 ;
21261: LD_ADDR_VAR 0 2
21265: PUSH
21266: LD_STRING 1
21268: ST_TO_ADDR
// end ; normal := normal & tmp ;
21269: LD_ADDR_VAR 0 3
21273: PUSH
21274: LD_VAR 0 3
21278: PUSH
21279: LD_VAR 0 2
21283: STR
21284: ST_TO_ADDR
// end ;
21285: GO 21185
21287: POP
21288: POP
// for i = 1 to hardcoreCounter do
21289: LD_ADDR_VAR 0 5
21293: PUSH
21294: DOUBLE
21295: LD_INT 1
21297: DEC
21298: ST_TO_ADDR
21299: LD_EXP 57
21303: PUSH
21304: FOR_TO
21305: IFFALSE 21410
// begin tmp := 0 ;
21307: LD_ADDR_VAR 0 2
21311: PUSH
21312: LD_STRING 0
21314: ST_TO_ADDR
// if result [ 2 ] then
21315: LD_VAR 0 1
21319: PUSH
21320: LD_INT 2
21322: ARRAY
21323: IFFALSE 21392
// if result [ 2 ] [ 1 ] = 100 + i then
21325: LD_VAR 0 1
21329: PUSH
21330: LD_INT 2
21332: ARRAY
21333: PUSH
21334: LD_INT 1
21336: ARRAY
21337: PUSH
21338: LD_INT 100
21340: PUSH
21341: LD_VAR 0 5
21345: PLUS
21346: EQUAL
21347: IFFALSE 21392
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21349: LD_ADDR_VAR 0 1
21353: PUSH
21354: LD_VAR 0 1
21358: PPUSH
21359: LD_INT 2
21361: PPUSH
21362: LD_VAR 0 1
21366: PUSH
21367: LD_INT 2
21369: ARRAY
21370: PPUSH
21371: LD_INT 1
21373: PPUSH
21374: CALL_OW 3
21378: PPUSH
21379: CALL_OW 1
21383: ST_TO_ADDR
// tmp := 1 ;
21384: LD_ADDR_VAR 0 2
21388: PUSH
21389: LD_STRING 1
21391: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21392: LD_ADDR_VAR 0 4
21396: PUSH
21397: LD_VAR 0 4
21401: PUSH
21402: LD_VAR 0 2
21406: STR
21407: ST_TO_ADDR
// end ;
21408: GO 21304
21410: POP
21411: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
21412: LD_STRING getStreamItemsFromMission("
21414: PUSH
21415: LD_VAR 0 3
21419: STR
21420: PUSH
21421: LD_STRING ","
21423: STR
21424: PUSH
21425: LD_VAR 0 4
21429: STR
21430: PUSH
21431: LD_STRING ")
21433: STR
21434: PPUSH
21435: CALL_OW 559
// end else
21439: GO 21448
// ToLua ( getStreamItemsFromMission("","") ) ;
21441: LD_STRING getStreamItemsFromMission("","")
21443: PPUSH
21444: CALL_OW 559
// end ;
21448: LD_VAR 0 1
21452: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21453: LD_EXP 55
21457: PUSH
21458: LD_EXP 60
21462: AND
21463: IFFALSE 21587
21465: GO 21467
21467: DISABLE
21468: LD_INT 0
21470: PPUSH
21471: PPUSH
// begin enable ;
21472: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21473: LD_ADDR_VAR 0 2
21477: PUSH
21478: LD_INT 22
21480: PUSH
21481: LD_OWVAR 2
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: LD_INT 34
21495: PUSH
21496: LD_INT 7
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 34
21505: PUSH
21506: LD_INT 45
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 34
21515: PUSH
21516: LD_INT 28
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 34
21525: PUSH
21526: LD_INT 47
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PPUSH
21544: CALL_OW 69
21548: ST_TO_ADDR
// if not tmp then
21549: LD_VAR 0 2
21553: NOT
21554: IFFALSE 21558
// exit ;
21556: GO 21587
// for i in tmp do
21558: LD_ADDR_VAR 0 1
21562: PUSH
21563: LD_VAR 0 2
21567: PUSH
21568: FOR_IN
21569: IFFALSE 21585
// begin SetLives ( i , 0 ) ;
21571: LD_VAR 0 1
21575: PPUSH
21576: LD_INT 0
21578: PPUSH
21579: CALL_OW 234
// end ;
21583: GO 21568
21585: POP
21586: POP
// end ;
21587: PPOPN 2
21589: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21590: LD_EXP 55
21594: PUSH
21595: LD_EXP 61
21599: AND
21600: IFFALSE 21684
21602: GO 21604
21604: DISABLE
21605: LD_INT 0
21607: PPUSH
21608: PPUSH
// begin enable ;
21609: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21610: LD_ADDR_VAR 0 2
21614: PUSH
21615: LD_INT 22
21617: PUSH
21618: LD_OWVAR 2
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 32
21629: PUSH
21630: LD_INT 3
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PPUSH
21641: CALL_OW 69
21645: ST_TO_ADDR
// if not tmp then
21646: LD_VAR 0 2
21650: NOT
21651: IFFALSE 21655
// exit ;
21653: GO 21684
// for i in tmp do
21655: LD_ADDR_VAR 0 1
21659: PUSH
21660: LD_VAR 0 2
21664: PUSH
21665: FOR_IN
21666: IFFALSE 21682
// begin SetLives ( i , 0 ) ;
21668: LD_VAR 0 1
21672: PPUSH
21673: LD_INT 0
21675: PPUSH
21676: CALL_OW 234
// end ;
21680: GO 21665
21682: POP
21683: POP
// end ;
21684: PPOPN 2
21686: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21687: LD_EXP 55
21691: PUSH
21692: LD_EXP 58
21696: AND
21697: IFFALSE 21790
21699: GO 21701
21701: DISABLE
21702: LD_INT 0
21704: PPUSH
// begin enable ;
21705: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21706: LD_ADDR_VAR 0 1
21710: PUSH
21711: LD_INT 22
21713: PUSH
21714: LD_OWVAR 2
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: LD_INT 25
21728: PUSH
21729: LD_INT 5
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 25
21738: PUSH
21739: LD_INT 9
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 25
21748: PUSH
21749: LD_INT 8
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PPUSH
21766: CALL_OW 69
21770: PUSH
21771: FOR_IN
21772: IFFALSE 21788
// begin SetClass ( i , 1 ) ;
21774: LD_VAR 0 1
21778: PPUSH
21779: LD_INT 1
21781: PPUSH
21782: CALL_OW 336
// end ;
21786: GO 21771
21788: POP
21789: POP
// end ;
21790: PPOPN 1
21792: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21793: LD_EXP 55
21797: PUSH
21798: LD_EXP 59
21802: AND
21803: PUSH
21804: LD_OWVAR 65
21808: PUSH
21809: LD_INT 7
21811: LESS
21812: AND
21813: IFFALSE 21827
21815: GO 21817
21817: DISABLE
// begin enable ;
21818: ENABLE
// game_speed := 7 ;
21819: LD_ADDR_OWVAR 65
21823: PUSH
21824: LD_INT 7
21826: ST_TO_ADDR
// end ;
21827: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21828: LD_EXP 55
21832: PUSH
21833: LD_EXP 62
21837: AND
21838: IFFALSE 22040
21840: GO 21842
21842: DISABLE
21843: LD_INT 0
21845: PPUSH
21846: PPUSH
21847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21848: LD_ADDR_VAR 0 3
21852: PUSH
21853: LD_INT 81
21855: PUSH
21856: LD_OWVAR 2
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 21
21867: PUSH
21868: LD_INT 1
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PPUSH
21879: CALL_OW 69
21883: ST_TO_ADDR
// if not tmp then
21884: LD_VAR 0 3
21888: NOT
21889: IFFALSE 21893
// exit ;
21891: GO 22040
// if tmp > 5 then
21893: LD_VAR 0 3
21897: PUSH
21898: LD_INT 5
21900: GREATER
21901: IFFALSE 21913
// k := 5 else
21903: LD_ADDR_VAR 0 2
21907: PUSH
21908: LD_INT 5
21910: ST_TO_ADDR
21911: GO 21923
// k := tmp ;
21913: LD_ADDR_VAR 0 2
21917: PUSH
21918: LD_VAR 0 3
21922: ST_TO_ADDR
// for i := 1 to k do
21923: LD_ADDR_VAR 0 1
21927: PUSH
21928: DOUBLE
21929: LD_INT 1
21931: DEC
21932: ST_TO_ADDR
21933: LD_VAR 0 2
21937: PUSH
21938: FOR_TO
21939: IFFALSE 22038
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21941: LD_VAR 0 3
21945: PUSH
21946: LD_VAR 0 1
21950: ARRAY
21951: PPUSH
21952: LD_VAR 0 1
21956: PUSH
21957: LD_INT 4
21959: MOD
21960: PUSH
21961: LD_INT 1
21963: PLUS
21964: PPUSH
21965: CALL_OW 259
21969: PUSH
21970: LD_INT 10
21972: LESS
21973: IFFALSE 22036
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21975: LD_VAR 0 3
21979: PUSH
21980: LD_VAR 0 1
21984: ARRAY
21985: PPUSH
21986: LD_VAR 0 1
21990: PUSH
21991: LD_INT 4
21993: MOD
21994: PUSH
21995: LD_INT 1
21997: PLUS
21998: PPUSH
21999: LD_VAR 0 3
22003: PUSH
22004: LD_VAR 0 1
22008: ARRAY
22009: PPUSH
22010: LD_VAR 0 1
22014: PUSH
22015: LD_INT 4
22017: MOD
22018: PUSH
22019: LD_INT 1
22021: PLUS
22022: PPUSH
22023: CALL_OW 259
22027: PUSH
22028: LD_INT 1
22030: PLUS
22031: PPUSH
22032: CALL_OW 237
22036: GO 21938
22038: POP
22039: POP
// end ;
22040: PPOPN 3
22042: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22043: LD_EXP 55
22047: PUSH
22048: LD_EXP 63
22052: AND
22053: IFFALSE 22073
22055: GO 22057
22057: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22058: LD_INT 4
22060: PPUSH
22061: LD_OWVAR 2
22065: PPUSH
22066: LD_INT 0
22068: PPUSH
22069: CALL_OW 324
22073: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22074: LD_EXP 55
22078: PUSH
22079: LD_EXP 92
22083: AND
22084: IFFALSE 22104
22086: GO 22088
22088: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22089: LD_INT 19
22091: PPUSH
22092: LD_OWVAR 2
22096: PPUSH
22097: LD_INT 0
22099: PPUSH
22100: CALL_OW 324
22104: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22105: LD_EXP 55
22109: PUSH
22110: LD_EXP 64
22114: AND
22115: IFFALSE 22217
22117: GO 22119
22119: DISABLE
22120: LD_INT 0
22122: PPUSH
22123: PPUSH
// begin enable ;
22124: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22125: LD_ADDR_VAR 0 2
22129: PUSH
22130: LD_INT 22
22132: PUSH
22133: LD_OWVAR 2
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: LD_INT 34
22147: PUSH
22148: LD_INT 11
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 34
22157: PUSH
22158: LD_INT 30
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: LIST
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PPUSH
22174: CALL_OW 69
22178: ST_TO_ADDR
// if not tmp then
22179: LD_VAR 0 2
22183: NOT
22184: IFFALSE 22188
// exit ;
22186: GO 22217
// for i in tmp do
22188: LD_ADDR_VAR 0 1
22192: PUSH
22193: LD_VAR 0 2
22197: PUSH
22198: FOR_IN
22199: IFFALSE 22215
// begin SetLives ( i , 0 ) ;
22201: LD_VAR 0 1
22205: PPUSH
22206: LD_INT 0
22208: PPUSH
22209: CALL_OW 234
// end ;
22213: GO 22198
22215: POP
22216: POP
// end ;
22217: PPOPN 2
22219: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22220: LD_EXP 55
22224: PUSH
22225: LD_EXP 65
22229: AND
22230: IFFALSE 22250
22232: GO 22234
22234: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22235: LD_INT 32
22237: PPUSH
22238: LD_OWVAR 2
22242: PPUSH
22243: LD_INT 0
22245: PPUSH
22246: CALL_OW 324
22250: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22251: LD_EXP 55
22255: PUSH
22256: LD_EXP 66
22260: AND
22261: IFFALSE 22442
22263: GO 22265
22265: DISABLE
22266: LD_INT 0
22268: PPUSH
22269: PPUSH
22270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22271: LD_ADDR_VAR 0 2
22275: PUSH
22276: LD_INT 22
22278: PUSH
22279: LD_OWVAR 2
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 33
22290: PUSH
22291: LD_INT 3
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PPUSH
22302: CALL_OW 69
22306: ST_TO_ADDR
// if not tmp then
22307: LD_VAR 0 2
22311: NOT
22312: IFFALSE 22316
// exit ;
22314: GO 22442
// side := 0 ;
22316: LD_ADDR_VAR 0 3
22320: PUSH
22321: LD_INT 0
22323: ST_TO_ADDR
// for i := 1 to 8 do
22324: LD_ADDR_VAR 0 1
22328: PUSH
22329: DOUBLE
22330: LD_INT 1
22332: DEC
22333: ST_TO_ADDR
22334: LD_INT 8
22336: PUSH
22337: FOR_TO
22338: IFFALSE 22386
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22340: LD_OWVAR 2
22344: PUSH
22345: LD_VAR 0 1
22349: NONEQUAL
22350: PUSH
22351: LD_OWVAR 2
22355: PPUSH
22356: LD_VAR 0 1
22360: PPUSH
22361: CALL_OW 81
22365: PUSH
22366: LD_INT 2
22368: EQUAL
22369: AND
22370: IFFALSE 22384
// begin side := i ;
22372: LD_ADDR_VAR 0 3
22376: PUSH
22377: LD_VAR 0 1
22381: ST_TO_ADDR
// break ;
22382: GO 22386
// end ;
22384: GO 22337
22386: POP
22387: POP
// if not side then
22388: LD_VAR 0 3
22392: NOT
22393: IFFALSE 22397
// exit ;
22395: GO 22442
// for i := 1 to tmp do
22397: LD_ADDR_VAR 0 1
22401: PUSH
22402: DOUBLE
22403: LD_INT 1
22405: DEC
22406: ST_TO_ADDR
22407: LD_VAR 0 2
22411: PUSH
22412: FOR_TO
22413: IFFALSE 22440
// if Prob ( 60 ) then
22415: LD_INT 60
22417: PPUSH
22418: CALL_OW 13
22422: IFFALSE 22438
// SetSide ( i , side ) ;
22424: LD_VAR 0 1
22428: PPUSH
22429: LD_VAR 0 3
22433: PPUSH
22434: CALL_OW 235
22438: GO 22412
22440: POP
22441: POP
// end ;
22442: PPOPN 3
22444: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22445: LD_EXP 55
22449: PUSH
22450: LD_EXP 68
22454: AND
22455: IFFALSE 22574
22457: GO 22459
22459: DISABLE
22460: LD_INT 0
22462: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22463: LD_ADDR_VAR 0 1
22467: PUSH
22468: LD_INT 22
22470: PUSH
22471: LD_OWVAR 2
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 21
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 3
22492: PUSH
22493: LD_INT 23
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: PPUSH
22512: CALL_OW 69
22516: PUSH
22517: FOR_IN
22518: IFFALSE 22572
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22520: LD_VAR 0 1
22524: PPUSH
22525: CALL_OW 257
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 2
22535: PUSH
22536: LD_INT 3
22538: PUSH
22539: LD_INT 4
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: IN
22548: IFFALSE 22570
// SetClass ( un , rand ( 1 , 4 ) ) ;
22550: LD_VAR 0 1
22554: PPUSH
22555: LD_INT 1
22557: PPUSH
22558: LD_INT 4
22560: PPUSH
22561: CALL_OW 12
22565: PPUSH
22566: CALL_OW 336
22570: GO 22517
22572: POP
22573: POP
// end ;
22574: PPOPN 1
22576: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22577: LD_EXP 55
22581: PUSH
22582: LD_EXP 67
22586: AND
22587: IFFALSE 22666
22589: GO 22591
22591: DISABLE
22592: LD_INT 0
22594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22595: LD_ADDR_VAR 0 1
22599: PUSH
22600: LD_INT 22
22602: PUSH
22603: LD_OWVAR 2
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 21
22614: PUSH
22615: LD_INT 3
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PPUSH
22626: CALL_OW 69
22630: ST_TO_ADDR
// if not tmp then
22631: LD_VAR 0 1
22635: NOT
22636: IFFALSE 22640
// exit ;
22638: GO 22666
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22640: LD_VAR 0 1
22644: PUSH
22645: LD_INT 1
22647: PPUSH
22648: LD_VAR 0 1
22652: PPUSH
22653: CALL_OW 12
22657: ARRAY
22658: PPUSH
22659: LD_INT 100
22661: PPUSH
22662: CALL_OW 234
// end ;
22666: PPOPN 1
22668: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22669: LD_EXP 55
22673: PUSH
22674: LD_EXP 69
22678: AND
22679: IFFALSE 22777
22681: GO 22683
22683: DISABLE
22684: LD_INT 0
22686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22687: LD_ADDR_VAR 0 1
22691: PUSH
22692: LD_INT 22
22694: PUSH
22695: LD_OWVAR 2
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 21
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PPUSH
22718: CALL_OW 69
22722: ST_TO_ADDR
// if not tmp then
22723: LD_VAR 0 1
22727: NOT
22728: IFFALSE 22732
// exit ;
22730: GO 22777
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22732: LD_VAR 0 1
22736: PUSH
22737: LD_INT 1
22739: PPUSH
22740: LD_VAR 0 1
22744: PPUSH
22745: CALL_OW 12
22749: ARRAY
22750: PPUSH
22751: LD_INT 1
22753: PPUSH
22754: LD_INT 4
22756: PPUSH
22757: CALL_OW 12
22761: PPUSH
22762: LD_INT 3000
22764: PPUSH
22765: LD_INT 9000
22767: PPUSH
22768: CALL_OW 12
22772: PPUSH
22773: CALL_OW 492
// end ;
22777: PPOPN 1
22779: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22780: LD_EXP 55
22784: PUSH
22785: LD_EXP 70
22789: AND
22790: IFFALSE 22810
22792: GO 22794
22794: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22795: LD_INT 1
22797: PPUSH
22798: LD_OWVAR 2
22802: PPUSH
22803: LD_INT 0
22805: PPUSH
22806: CALL_OW 324
22810: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22811: LD_EXP 55
22815: PUSH
22816: LD_EXP 71
22820: AND
22821: IFFALSE 22904
22823: GO 22825
22825: DISABLE
22826: LD_INT 0
22828: PPUSH
22829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22830: LD_ADDR_VAR 0 2
22834: PUSH
22835: LD_INT 22
22837: PUSH
22838: LD_OWVAR 2
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 21
22849: PUSH
22850: LD_INT 3
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 69
22865: ST_TO_ADDR
// if not tmp then
22866: LD_VAR 0 2
22870: NOT
22871: IFFALSE 22875
// exit ;
22873: GO 22904
// for i in tmp do
22875: LD_ADDR_VAR 0 1
22879: PUSH
22880: LD_VAR 0 2
22884: PUSH
22885: FOR_IN
22886: IFFALSE 22902
// SetBLevel ( i , 10 ) ;
22888: LD_VAR 0 1
22892: PPUSH
22893: LD_INT 10
22895: PPUSH
22896: CALL_OW 241
22900: GO 22885
22902: POP
22903: POP
// end ;
22904: PPOPN 2
22906: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22907: LD_EXP 55
22911: PUSH
22912: LD_EXP 72
22916: AND
22917: IFFALSE 23028
22919: GO 22921
22921: DISABLE
22922: LD_INT 0
22924: PPUSH
22925: PPUSH
22926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22927: LD_ADDR_VAR 0 3
22931: PUSH
22932: LD_INT 22
22934: PUSH
22935: LD_OWVAR 2
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 25
22946: PUSH
22947: LD_INT 1
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PPUSH
22958: CALL_OW 69
22962: ST_TO_ADDR
// if not tmp then
22963: LD_VAR 0 3
22967: NOT
22968: IFFALSE 22972
// exit ;
22970: GO 23028
// un := tmp [ rand ( 1 , tmp ) ] ;
22972: LD_ADDR_VAR 0 2
22976: PUSH
22977: LD_VAR 0 3
22981: PUSH
22982: LD_INT 1
22984: PPUSH
22985: LD_VAR 0 3
22989: PPUSH
22990: CALL_OW 12
22994: ARRAY
22995: ST_TO_ADDR
// if Crawls ( un ) then
22996: LD_VAR 0 2
23000: PPUSH
23001: CALL_OW 318
23005: IFFALSE 23016
// ComWalk ( un ) ;
23007: LD_VAR 0 2
23011: PPUSH
23012: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23016: LD_VAR 0 2
23020: PPUSH
23021: LD_INT 5
23023: PPUSH
23024: CALL_OW 336
// end ;
23028: PPOPN 3
23030: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
23031: LD_EXP 55
23035: PUSH
23036: LD_EXP 73
23040: AND
23041: PUSH
23042: LD_OWVAR 67
23046: PUSH
23047: LD_INT 3
23049: LESS
23050: AND
23051: IFFALSE 23070
23053: GO 23055
23055: DISABLE
// Difficulty := Difficulty + 1 ;
23056: LD_ADDR_OWVAR 67
23060: PUSH
23061: LD_OWVAR 67
23065: PUSH
23066: LD_INT 1
23068: PLUS
23069: ST_TO_ADDR
23070: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23071: LD_EXP 55
23075: PUSH
23076: LD_EXP 74
23080: AND
23081: IFFALSE 23184
23083: GO 23085
23085: DISABLE
23086: LD_INT 0
23088: PPUSH
// begin for i := 1 to 5 do
23089: LD_ADDR_VAR 0 1
23093: PUSH
23094: DOUBLE
23095: LD_INT 1
23097: DEC
23098: ST_TO_ADDR
23099: LD_INT 5
23101: PUSH
23102: FOR_TO
23103: IFFALSE 23182
// begin uc_nation := nation_nature ;
23105: LD_ADDR_OWVAR 21
23109: PUSH
23110: LD_INT 0
23112: ST_TO_ADDR
// uc_side := 0 ;
23113: LD_ADDR_OWVAR 20
23117: PUSH
23118: LD_INT 0
23120: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23121: LD_ADDR_OWVAR 29
23125: PUSH
23126: LD_INT 12
23128: PUSH
23129: LD_INT 12
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: ST_TO_ADDR
// hc_agressivity := 20 ;
23136: LD_ADDR_OWVAR 35
23140: PUSH
23141: LD_INT 20
23143: ST_TO_ADDR
// hc_class := class_tiger ;
23144: LD_ADDR_OWVAR 28
23148: PUSH
23149: LD_INT 14
23151: ST_TO_ADDR
// hc_gallery :=  ;
23152: LD_ADDR_OWVAR 33
23156: PUSH
23157: LD_STRING 
23159: ST_TO_ADDR
// hc_name :=  ;
23160: LD_ADDR_OWVAR 26
23164: PUSH
23165: LD_STRING 
23167: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23168: CALL_OW 44
23172: PPUSH
23173: LD_INT 0
23175: PPUSH
23176: CALL_OW 51
// end ;
23180: GO 23102
23182: POP
23183: POP
// end ;
23184: PPOPN 1
23186: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23187: LD_EXP 55
23191: PUSH
23192: LD_EXP 75
23196: AND
23197: IFFALSE 23206
23199: GO 23201
23201: DISABLE
// StreamSibBomb ;
23202: CALL 23207 0 0
23206: END
// export function StreamSibBomb ; var i , x , y ; begin
23207: LD_INT 0
23209: PPUSH
23210: PPUSH
23211: PPUSH
23212: PPUSH
// result := false ;
23213: LD_ADDR_VAR 0 1
23217: PUSH
23218: LD_INT 0
23220: ST_TO_ADDR
// for i := 1 to 16 do
23221: LD_ADDR_VAR 0 2
23225: PUSH
23226: DOUBLE
23227: LD_INT 1
23229: DEC
23230: ST_TO_ADDR
23231: LD_INT 16
23233: PUSH
23234: FOR_TO
23235: IFFALSE 23434
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23237: LD_ADDR_VAR 0 3
23241: PUSH
23242: LD_INT 10
23244: PUSH
23245: LD_INT 20
23247: PUSH
23248: LD_INT 30
23250: PUSH
23251: LD_INT 40
23253: PUSH
23254: LD_INT 50
23256: PUSH
23257: LD_INT 60
23259: PUSH
23260: LD_INT 70
23262: PUSH
23263: LD_INT 80
23265: PUSH
23266: LD_INT 90
23268: PUSH
23269: LD_INT 100
23271: PUSH
23272: LD_INT 110
23274: PUSH
23275: LD_INT 120
23277: PUSH
23278: LD_INT 130
23280: PUSH
23281: LD_INT 140
23283: PUSH
23284: LD_INT 150
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 1
23306: PPUSH
23307: LD_INT 15
23309: PPUSH
23310: CALL_OW 12
23314: ARRAY
23315: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23316: LD_ADDR_VAR 0 4
23320: PUSH
23321: LD_INT 10
23323: PUSH
23324: LD_INT 20
23326: PUSH
23327: LD_INT 30
23329: PUSH
23330: LD_INT 40
23332: PUSH
23333: LD_INT 50
23335: PUSH
23336: LD_INT 60
23338: PUSH
23339: LD_INT 70
23341: PUSH
23342: LD_INT 80
23344: PUSH
23345: LD_INT 90
23347: PUSH
23348: LD_INT 100
23350: PUSH
23351: LD_INT 110
23353: PUSH
23354: LD_INT 120
23356: PUSH
23357: LD_INT 130
23359: PUSH
23360: LD_INT 140
23362: PUSH
23363: LD_INT 150
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 1
23385: PPUSH
23386: LD_INT 15
23388: PPUSH
23389: CALL_OW 12
23393: ARRAY
23394: ST_TO_ADDR
// if ValidHex ( x , y ) then
23395: LD_VAR 0 3
23399: PPUSH
23400: LD_VAR 0 4
23404: PPUSH
23405: CALL_OW 488
23409: IFFALSE 23432
// begin result := [ x , y ] ;
23411: LD_ADDR_VAR 0 1
23415: PUSH
23416: LD_VAR 0 3
23420: PUSH
23421: LD_VAR 0 4
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: ST_TO_ADDR
// break ;
23430: GO 23434
// end ; end ;
23432: GO 23234
23434: POP
23435: POP
// if result then
23436: LD_VAR 0 1
23440: IFFALSE 23500
// begin ToLua ( playSibBomb() ) ;
23442: LD_STRING playSibBomb()
23444: PPUSH
23445: CALL_OW 559
// wait ( 0 0$14 ) ;
23449: LD_INT 490
23451: PPUSH
23452: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23456: LD_VAR 0 1
23460: PUSH
23461: LD_INT 1
23463: ARRAY
23464: PPUSH
23465: LD_VAR 0 1
23469: PUSH
23470: LD_INT 2
23472: ARRAY
23473: PPUSH
23474: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23478: LD_VAR 0 1
23482: PUSH
23483: LD_INT 1
23485: ARRAY
23486: PPUSH
23487: LD_VAR 0 1
23491: PUSH
23492: LD_INT 2
23494: ARRAY
23495: PPUSH
23496: CALL_OW 429
// end ; end ;
23500: LD_VAR 0 1
23504: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23505: LD_EXP 55
23509: PUSH
23510: LD_EXP 77
23514: AND
23515: IFFALSE 23527
23517: GO 23519
23519: DISABLE
// YouLost (  ) ;
23520: LD_STRING 
23522: PPUSH
23523: CALL_OW 104
23527: END
// every 0 0$1 trigger StreamModeActive and sFog do
23528: LD_EXP 55
23532: PUSH
23533: LD_EXP 76
23537: AND
23538: IFFALSE 23552
23540: GO 23542
23542: DISABLE
// FogOff ( your_side ) ;
23543: LD_OWVAR 2
23547: PPUSH
23548: CALL_OW 344
23552: END
// every 0 0$1 trigger StreamModeActive and sSun do
23553: LD_EXP 55
23557: PUSH
23558: LD_EXP 78
23562: AND
23563: IFFALSE 23591
23565: GO 23567
23567: DISABLE
// begin solar_recharge_percent := 0 ;
23568: LD_ADDR_OWVAR 79
23572: PUSH
23573: LD_INT 0
23575: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23576: LD_INT 10500
23578: PPUSH
23579: CALL_OW 67
// solar_recharge_percent := 100 ;
23583: LD_ADDR_OWVAR 79
23587: PUSH
23588: LD_INT 100
23590: ST_TO_ADDR
// end ;
23591: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23592: LD_EXP 55
23596: PUSH
23597: LD_EXP 79
23601: AND
23602: IFFALSE 23841
23604: GO 23606
23606: DISABLE
23607: LD_INT 0
23609: PPUSH
23610: PPUSH
23611: PPUSH
// begin tmp := [ ] ;
23612: LD_ADDR_VAR 0 3
23616: PUSH
23617: EMPTY
23618: ST_TO_ADDR
// for i := 1 to 6 do
23619: LD_ADDR_VAR 0 1
23623: PUSH
23624: DOUBLE
23625: LD_INT 1
23627: DEC
23628: ST_TO_ADDR
23629: LD_INT 6
23631: PUSH
23632: FOR_TO
23633: IFFALSE 23738
// begin uc_nation := nation_nature ;
23635: LD_ADDR_OWVAR 21
23639: PUSH
23640: LD_INT 0
23642: ST_TO_ADDR
// uc_side := 0 ;
23643: LD_ADDR_OWVAR 20
23647: PUSH
23648: LD_INT 0
23650: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23651: LD_ADDR_OWVAR 29
23655: PUSH
23656: LD_INT 12
23658: PUSH
23659: LD_INT 12
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: ST_TO_ADDR
// hc_agressivity := 20 ;
23666: LD_ADDR_OWVAR 35
23670: PUSH
23671: LD_INT 20
23673: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23674: LD_ADDR_OWVAR 28
23678: PUSH
23679: LD_INT 17
23681: ST_TO_ADDR
// hc_gallery :=  ;
23682: LD_ADDR_OWVAR 33
23686: PUSH
23687: LD_STRING 
23689: ST_TO_ADDR
// hc_name :=  ;
23690: LD_ADDR_OWVAR 26
23694: PUSH
23695: LD_STRING 
23697: ST_TO_ADDR
// un := CreateHuman ;
23698: LD_ADDR_VAR 0 2
23702: PUSH
23703: CALL_OW 44
23707: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23708: LD_VAR 0 2
23712: PPUSH
23713: LD_INT 1
23715: PPUSH
23716: CALL_OW 51
// tmp := tmp ^ un ;
23720: LD_ADDR_VAR 0 3
23724: PUSH
23725: LD_VAR 0 3
23729: PUSH
23730: LD_VAR 0 2
23734: ADD
23735: ST_TO_ADDR
// end ;
23736: GO 23632
23738: POP
23739: POP
// repeat wait ( 0 0$1 ) ;
23740: LD_INT 35
23742: PPUSH
23743: CALL_OW 67
// for un in tmp do
23747: LD_ADDR_VAR 0 2
23751: PUSH
23752: LD_VAR 0 3
23756: PUSH
23757: FOR_IN
23758: IFFALSE 23832
// begin if IsDead ( un ) then
23760: LD_VAR 0 2
23764: PPUSH
23765: CALL_OW 301
23769: IFFALSE 23789
// begin tmp := tmp diff un ;
23771: LD_ADDR_VAR 0 3
23775: PUSH
23776: LD_VAR 0 3
23780: PUSH
23781: LD_VAR 0 2
23785: DIFF
23786: ST_TO_ADDR
// continue ;
23787: GO 23757
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23789: LD_VAR 0 2
23793: PPUSH
23794: LD_INT 3
23796: PUSH
23797: LD_INT 22
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PPUSH
23811: CALL_OW 69
23815: PPUSH
23816: LD_VAR 0 2
23820: PPUSH
23821: CALL_OW 74
23825: PPUSH
23826: CALL_OW 115
// end ;
23830: GO 23757
23832: POP
23833: POP
// until not tmp ;
23834: LD_VAR 0 3
23838: NOT
23839: IFFALSE 23740
// end ;
23841: PPOPN 3
23843: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23844: LD_EXP 55
23848: PUSH
23849: LD_EXP 80
23853: AND
23854: IFFALSE 23908
23856: GO 23858
23858: DISABLE
// begin ToLua ( displayTroll(); ) ;
23859: LD_STRING displayTroll();
23861: PPUSH
23862: CALL_OW 559
// wait ( 3 3$00 ) ;
23866: LD_INT 6300
23868: PPUSH
23869: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23873: LD_STRING hideTroll();
23875: PPUSH
23876: CALL_OW 559
// wait ( 1 1$00 ) ;
23880: LD_INT 2100
23882: PPUSH
23883: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23887: LD_STRING displayTroll();
23889: PPUSH
23890: CALL_OW 559
// wait ( 1 1$00 ) ;
23894: LD_INT 2100
23896: PPUSH
23897: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23901: LD_STRING hideTroll();
23903: PPUSH
23904: CALL_OW 559
// end ;
23908: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23909: LD_EXP 55
23913: PUSH
23914: LD_EXP 81
23918: AND
23919: IFFALSE 23982
23921: GO 23923
23923: DISABLE
23924: LD_INT 0
23926: PPUSH
// begin p := 0 ;
23927: LD_ADDR_VAR 0 1
23931: PUSH
23932: LD_INT 0
23934: ST_TO_ADDR
// repeat game_speed := 1 ;
23935: LD_ADDR_OWVAR 65
23939: PUSH
23940: LD_INT 1
23942: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23943: LD_INT 35
23945: PPUSH
23946: CALL_OW 67
// p := p + 1 ;
23950: LD_ADDR_VAR 0 1
23954: PUSH
23955: LD_VAR 0 1
23959: PUSH
23960: LD_INT 1
23962: PLUS
23963: ST_TO_ADDR
// until p >= 60 ;
23964: LD_VAR 0 1
23968: PUSH
23969: LD_INT 60
23971: GREATEREQUAL
23972: IFFALSE 23935
// game_speed := 4 ;
23974: LD_ADDR_OWVAR 65
23978: PUSH
23979: LD_INT 4
23981: ST_TO_ADDR
// end ;
23982: PPOPN 1
23984: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23985: LD_EXP 55
23989: PUSH
23990: LD_EXP 82
23994: AND
23995: IFFALSE 24141
23997: GO 23999
23999: DISABLE
24000: LD_INT 0
24002: PPUSH
24003: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24004: LD_ADDR_VAR 0 1
24008: PUSH
24009: LD_INT 22
24011: PUSH
24012: LD_OWVAR 2
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: LD_INT 30
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 30
24036: PUSH
24037: LD_INT 1
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: LIST
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PPUSH
24053: CALL_OW 69
24057: ST_TO_ADDR
// if not depot then
24058: LD_VAR 0 1
24062: NOT
24063: IFFALSE 24067
// exit ;
24065: GO 24141
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24067: LD_ADDR_VAR 0 2
24071: PUSH
24072: LD_VAR 0 1
24076: PUSH
24077: LD_INT 1
24079: PPUSH
24080: LD_VAR 0 1
24084: PPUSH
24085: CALL_OW 12
24089: ARRAY
24090: PPUSH
24091: CALL_OW 274
24095: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24096: LD_VAR 0 2
24100: PPUSH
24101: LD_INT 1
24103: PPUSH
24104: LD_INT 0
24106: PPUSH
24107: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24111: LD_VAR 0 2
24115: PPUSH
24116: LD_INT 2
24118: PPUSH
24119: LD_INT 0
24121: PPUSH
24122: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24126: LD_VAR 0 2
24130: PPUSH
24131: LD_INT 3
24133: PPUSH
24134: LD_INT 0
24136: PPUSH
24137: CALL_OW 277
// end ;
24141: PPOPN 2
24143: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24144: LD_EXP 55
24148: PUSH
24149: LD_EXP 83
24153: AND
24154: IFFALSE 24251
24156: GO 24158
24158: DISABLE
24159: LD_INT 0
24161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24162: LD_ADDR_VAR 0 1
24166: PUSH
24167: LD_INT 22
24169: PUSH
24170: LD_OWVAR 2
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 21
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 3
24191: PUSH
24192: LD_INT 23
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: PPUSH
24211: CALL_OW 69
24215: ST_TO_ADDR
// if not tmp then
24216: LD_VAR 0 1
24220: NOT
24221: IFFALSE 24225
// exit ;
24223: GO 24251
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24225: LD_VAR 0 1
24229: PUSH
24230: LD_INT 1
24232: PPUSH
24233: LD_VAR 0 1
24237: PPUSH
24238: CALL_OW 12
24242: ARRAY
24243: PPUSH
24244: LD_INT 200
24246: PPUSH
24247: CALL_OW 234
// end ;
24251: PPOPN 1
24253: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24254: LD_EXP 55
24258: PUSH
24259: LD_EXP 84
24263: AND
24264: IFFALSE 24343
24266: GO 24268
24268: DISABLE
24269: LD_INT 0
24271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24272: LD_ADDR_VAR 0 1
24276: PUSH
24277: LD_INT 22
24279: PUSH
24280: LD_OWVAR 2
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 21
24291: PUSH
24292: LD_INT 2
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PPUSH
24303: CALL_OW 69
24307: ST_TO_ADDR
// if not tmp then
24308: LD_VAR 0 1
24312: NOT
24313: IFFALSE 24317
// exit ;
24315: GO 24343
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24317: LD_VAR 0 1
24321: PUSH
24322: LD_INT 1
24324: PPUSH
24325: LD_VAR 0 1
24329: PPUSH
24330: CALL_OW 12
24334: ARRAY
24335: PPUSH
24336: LD_INT 60
24338: PPUSH
24339: CALL_OW 234
// end ;
24343: PPOPN 1
24345: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24346: LD_EXP 55
24350: PUSH
24351: LD_EXP 85
24355: AND
24356: IFFALSE 24455
24358: GO 24360
24360: DISABLE
24361: LD_INT 0
24363: PPUSH
24364: PPUSH
// begin enable ;
24365: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24366: LD_ADDR_VAR 0 1
24370: PUSH
24371: LD_INT 22
24373: PUSH
24374: LD_OWVAR 2
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 61
24385: PUSH
24386: EMPTY
24387: LIST
24388: PUSH
24389: LD_INT 33
24391: PUSH
24392: LD_INT 2
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: LIST
24403: PPUSH
24404: CALL_OW 69
24408: ST_TO_ADDR
// if not tmp then
24409: LD_VAR 0 1
24413: NOT
24414: IFFALSE 24418
// exit ;
24416: GO 24455
// for i in tmp do
24418: LD_ADDR_VAR 0 2
24422: PUSH
24423: LD_VAR 0 1
24427: PUSH
24428: FOR_IN
24429: IFFALSE 24453
// if IsControledBy ( i ) then
24431: LD_VAR 0 2
24435: PPUSH
24436: CALL_OW 312
24440: IFFALSE 24451
// ComUnlink ( i ) ;
24442: LD_VAR 0 2
24446: PPUSH
24447: CALL_OW 136
24451: GO 24428
24453: POP
24454: POP
// end ;
24455: PPOPN 2
24457: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24458: LD_EXP 55
24462: PUSH
24463: LD_EXP 86
24467: AND
24468: IFFALSE 24608
24470: GO 24472
24472: DISABLE
24473: LD_INT 0
24475: PPUSH
24476: PPUSH
// begin ToLua ( displayPowell(); ) ;
24477: LD_STRING displayPowell();
24479: PPUSH
24480: CALL_OW 559
// uc_side := 0 ;
24484: LD_ADDR_OWVAR 20
24488: PUSH
24489: LD_INT 0
24491: ST_TO_ADDR
// uc_nation := 2 ;
24492: LD_ADDR_OWVAR 21
24496: PUSH
24497: LD_INT 2
24499: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24500: LD_ADDR_OWVAR 37
24504: PUSH
24505: LD_INT 14
24507: ST_TO_ADDR
// vc_engine := engine_siberite ;
24508: LD_ADDR_OWVAR 39
24512: PUSH
24513: LD_INT 3
24515: ST_TO_ADDR
// vc_control := control_apeman ;
24516: LD_ADDR_OWVAR 38
24520: PUSH
24521: LD_INT 5
24523: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24524: LD_ADDR_OWVAR 40
24528: PUSH
24529: LD_INT 29
24531: ST_TO_ADDR
// un := CreateVehicle ;
24532: LD_ADDR_VAR 0 2
24536: PUSH
24537: CALL_OW 45
24541: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24542: LD_VAR 0 2
24546: PPUSH
24547: LD_INT 1
24549: PPUSH
24550: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24554: LD_INT 35
24556: PPUSH
24557: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24561: LD_VAR 0 2
24565: PPUSH
24566: LD_INT 22
24568: PUSH
24569: LD_OWVAR 2
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PPUSH
24578: CALL_OW 69
24582: PPUSH
24583: LD_VAR 0 2
24587: PPUSH
24588: CALL_OW 74
24592: PPUSH
24593: CALL_OW 115
// until IsDead ( un ) ;
24597: LD_VAR 0 2
24601: PPUSH
24602: CALL_OW 301
24606: IFFALSE 24554
// end ;
24608: PPOPN 2
24610: END
// every 0 0$1 trigger StreamModeActive and sStu do
24611: LD_EXP 55
24615: PUSH
24616: LD_EXP 94
24620: AND
24621: IFFALSE 24637
24623: GO 24625
24625: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24626: LD_STRING displayStucuk();
24628: PPUSH
24629: CALL_OW 559
// ResetFog ;
24633: CALL_OW 335
// end ;
24637: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24638: LD_EXP 55
24642: PUSH
24643: LD_EXP 87
24647: AND
24648: IFFALSE 24789
24650: GO 24652
24652: DISABLE
24653: LD_INT 0
24655: PPUSH
24656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24657: LD_ADDR_VAR 0 2
24661: PUSH
24662: LD_INT 22
24664: PUSH
24665: LD_OWVAR 2
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 21
24676: PUSH
24677: LD_INT 1
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PPUSH
24688: CALL_OW 69
24692: ST_TO_ADDR
// if not tmp then
24693: LD_VAR 0 2
24697: NOT
24698: IFFALSE 24702
// exit ;
24700: GO 24789
// un := tmp [ rand ( 1 , tmp ) ] ;
24702: LD_ADDR_VAR 0 1
24706: PUSH
24707: LD_VAR 0 2
24711: PUSH
24712: LD_INT 1
24714: PPUSH
24715: LD_VAR 0 2
24719: PPUSH
24720: CALL_OW 12
24724: ARRAY
24725: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24726: LD_VAR 0 1
24730: PPUSH
24731: LD_INT 0
24733: PPUSH
24734: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: LD_OWVAR 3
24747: PUSH
24748: LD_VAR 0 1
24752: DIFF
24753: PPUSH
24754: LD_VAR 0 1
24758: PPUSH
24759: CALL_OW 74
24763: PPUSH
24764: CALL_OW 115
// wait ( 0 0$20 ) ;
24768: LD_INT 700
24770: PPUSH
24771: CALL_OW 67
// SetSide ( un , your_side ) ;
24775: LD_VAR 0 1
24779: PPUSH
24780: LD_OWVAR 2
24784: PPUSH
24785: CALL_OW 235
// end ;
24789: PPOPN 2
24791: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24792: LD_EXP 55
24796: PUSH
24797: LD_EXP 88
24801: AND
24802: IFFALSE 24908
24804: GO 24806
24806: DISABLE
24807: LD_INT 0
24809: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24810: LD_ADDR_VAR 0 1
24814: PUSH
24815: LD_INT 22
24817: PUSH
24818: LD_OWVAR 2
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: LD_INT 30
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 30
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: LIST
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PPUSH
24859: CALL_OW 69
24863: ST_TO_ADDR
// if not depot then
24864: LD_VAR 0 1
24868: NOT
24869: IFFALSE 24873
// exit ;
24871: GO 24908
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24873: LD_VAR 0 1
24877: PUSH
24878: LD_INT 1
24880: ARRAY
24881: PPUSH
24882: CALL_OW 250
24886: PPUSH
24887: LD_VAR 0 1
24891: PUSH
24892: LD_INT 1
24894: ARRAY
24895: PPUSH
24896: CALL_OW 251
24900: PPUSH
24901: LD_INT 70
24903: PPUSH
24904: CALL_OW 495
// end ;
24908: PPOPN 1
24910: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24911: LD_EXP 55
24915: PUSH
24916: LD_EXP 89
24920: AND
24921: IFFALSE 25132
24923: GO 24925
24925: DISABLE
24926: LD_INT 0
24928: PPUSH
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24933: LD_ADDR_VAR 0 5
24937: PUSH
24938: LD_INT 22
24940: PUSH
24941: LD_OWVAR 2
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 21
24952: PUSH
24953: LD_INT 1
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PPUSH
24964: CALL_OW 69
24968: ST_TO_ADDR
// if not tmp then
24969: LD_VAR 0 5
24973: NOT
24974: IFFALSE 24978
// exit ;
24976: GO 25132
// for i in tmp do
24978: LD_ADDR_VAR 0 1
24982: PUSH
24983: LD_VAR 0 5
24987: PUSH
24988: FOR_IN
24989: IFFALSE 25130
// begin d := rand ( 0 , 5 ) ;
24991: LD_ADDR_VAR 0 4
24995: PUSH
24996: LD_INT 0
24998: PPUSH
24999: LD_INT 5
25001: PPUSH
25002: CALL_OW 12
25006: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25007: LD_ADDR_VAR 0 2
25011: PUSH
25012: LD_VAR 0 1
25016: PPUSH
25017: CALL_OW 250
25021: PPUSH
25022: LD_VAR 0 4
25026: PPUSH
25027: LD_INT 3
25029: PPUSH
25030: LD_INT 12
25032: PPUSH
25033: CALL_OW 12
25037: PPUSH
25038: CALL_OW 272
25042: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25043: LD_ADDR_VAR 0 3
25047: PUSH
25048: LD_VAR 0 1
25052: PPUSH
25053: CALL_OW 251
25057: PPUSH
25058: LD_VAR 0 4
25062: PPUSH
25063: LD_INT 3
25065: PPUSH
25066: LD_INT 12
25068: PPUSH
25069: CALL_OW 12
25073: PPUSH
25074: CALL_OW 273
25078: ST_TO_ADDR
// if ValidHex ( x , y ) then
25079: LD_VAR 0 2
25083: PPUSH
25084: LD_VAR 0 3
25088: PPUSH
25089: CALL_OW 488
25093: IFFALSE 25128
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25095: LD_VAR 0 1
25099: PPUSH
25100: LD_VAR 0 2
25104: PPUSH
25105: LD_VAR 0 3
25109: PPUSH
25110: LD_INT 3
25112: PPUSH
25113: LD_INT 6
25115: PPUSH
25116: CALL_OW 12
25120: PPUSH
25121: LD_INT 1
25123: PPUSH
25124: CALL_OW 483
// end ;
25128: GO 24988
25130: POP
25131: POP
// end ;
25132: PPOPN 5
25134: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25135: LD_EXP 55
25139: PUSH
25140: LD_EXP 90
25144: AND
25145: IFFALSE 25239
25147: GO 25149
25149: DISABLE
25150: LD_INT 0
25152: PPUSH
25153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25154: LD_ADDR_VAR 0 2
25158: PUSH
25159: LD_INT 22
25161: PUSH
25162: LD_OWVAR 2
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 32
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 21
25183: PUSH
25184: LD_INT 2
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: PPUSH
25196: CALL_OW 69
25200: ST_TO_ADDR
// if not tmp then
25201: LD_VAR 0 2
25205: NOT
25206: IFFALSE 25210
// exit ;
25208: GO 25239
// for i in tmp do
25210: LD_ADDR_VAR 0 1
25214: PUSH
25215: LD_VAR 0 2
25219: PUSH
25220: FOR_IN
25221: IFFALSE 25237
// SetFuel ( i , 0 ) ;
25223: LD_VAR 0 1
25227: PPUSH
25228: LD_INT 0
25230: PPUSH
25231: CALL_OW 240
25235: GO 25220
25237: POP
25238: POP
// end ;
25239: PPOPN 2
25241: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25242: LD_EXP 55
25246: PUSH
25247: LD_EXP 91
25251: AND
25252: IFFALSE 25318
25254: GO 25256
25256: DISABLE
25257: LD_INT 0
25259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25260: LD_ADDR_VAR 0 1
25264: PUSH
25265: LD_INT 22
25267: PUSH
25268: LD_OWVAR 2
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 30
25279: PUSH
25280: LD_INT 29
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PPUSH
25291: CALL_OW 69
25295: ST_TO_ADDR
// if not tmp then
25296: LD_VAR 0 1
25300: NOT
25301: IFFALSE 25305
// exit ;
25303: GO 25318
// DestroyUnit ( tmp [ 1 ] ) ;
25305: LD_VAR 0 1
25309: PUSH
25310: LD_INT 1
25312: ARRAY
25313: PPUSH
25314: CALL_OW 65
// end ;
25318: PPOPN 1
25320: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25321: LD_EXP 55
25325: PUSH
25326: LD_EXP 93
25330: AND
25331: IFFALSE 25460
25333: GO 25335
25335: DISABLE
25336: LD_INT 0
25338: PPUSH
// begin uc_side := 0 ;
25339: LD_ADDR_OWVAR 20
25343: PUSH
25344: LD_INT 0
25346: ST_TO_ADDR
// uc_nation := nation_arabian ;
25347: LD_ADDR_OWVAR 21
25351: PUSH
25352: LD_INT 2
25354: ST_TO_ADDR
// hc_gallery :=  ;
25355: LD_ADDR_OWVAR 33
25359: PUSH
25360: LD_STRING 
25362: ST_TO_ADDR
// hc_name :=  ;
25363: LD_ADDR_OWVAR 26
25367: PUSH
25368: LD_STRING 
25370: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25371: LD_INT 1
25373: PPUSH
25374: LD_INT 11
25376: PPUSH
25377: LD_INT 10
25379: PPUSH
25380: CALL_OW 380
// un := CreateHuman ;
25384: LD_ADDR_VAR 0 1
25388: PUSH
25389: CALL_OW 44
25393: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25394: LD_VAR 0 1
25398: PPUSH
25399: LD_INT 1
25401: PPUSH
25402: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25406: LD_INT 35
25408: PPUSH
25409: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25413: LD_VAR 0 1
25417: PPUSH
25418: LD_INT 22
25420: PUSH
25421: LD_OWVAR 2
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PPUSH
25430: CALL_OW 69
25434: PPUSH
25435: LD_VAR 0 1
25439: PPUSH
25440: CALL_OW 74
25444: PPUSH
25445: CALL_OW 115
// until IsDead ( un ) ;
25449: LD_VAR 0 1
25453: PPUSH
25454: CALL_OW 301
25458: IFFALSE 25406
// end ;
25460: PPOPN 1
25462: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25463: LD_EXP 55
25467: PUSH
25468: LD_EXP 95
25472: AND
25473: IFFALSE 25485
25475: GO 25477
25477: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25478: LD_STRING earthquake(getX(game), 0, 32)
25480: PPUSH
25481: CALL_OW 559
25485: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25486: LD_EXP 55
25490: PUSH
25491: LD_EXP 96
25495: AND
25496: IFFALSE 25587
25498: GO 25500
25500: DISABLE
25501: LD_INT 0
25503: PPUSH
// begin enable ;
25504: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25505: LD_ADDR_VAR 0 1
25509: PUSH
25510: LD_INT 22
25512: PUSH
25513: LD_OWVAR 2
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 21
25524: PUSH
25525: LD_INT 2
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 33
25534: PUSH
25535: LD_INT 3
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: LIST
25546: PPUSH
25547: CALL_OW 69
25551: ST_TO_ADDR
// if not tmp then
25552: LD_VAR 0 1
25556: NOT
25557: IFFALSE 25561
// exit ;
25559: GO 25587
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25561: LD_VAR 0 1
25565: PUSH
25566: LD_INT 1
25568: PPUSH
25569: LD_VAR 0 1
25573: PPUSH
25574: CALL_OW 12
25578: ARRAY
25579: PPUSH
25580: LD_INT 1
25582: PPUSH
25583: CALL_OW 234
// end ;
25587: PPOPN 1
25589: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25590: LD_EXP 55
25594: PUSH
25595: LD_EXP 97
25599: AND
25600: IFFALSE 25741
25602: GO 25604
25604: DISABLE
25605: LD_INT 0
25607: PPUSH
25608: PPUSH
25609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25610: LD_ADDR_VAR 0 3
25614: PUSH
25615: LD_INT 22
25617: PUSH
25618: LD_OWVAR 2
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 25
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PPUSH
25641: CALL_OW 69
25645: ST_TO_ADDR
// if not tmp then
25646: LD_VAR 0 3
25650: NOT
25651: IFFALSE 25655
// exit ;
25653: GO 25741
// un := tmp [ rand ( 1 , tmp ) ] ;
25655: LD_ADDR_VAR 0 2
25659: PUSH
25660: LD_VAR 0 3
25664: PUSH
25665: LD_INT 1
25667: PPUSH
25668: LD_VAR 0 3
25672: PPUSH
25673: CALL_OW 12
25677: ARRAY
25678: ST_TO_ADDR
// if Crawls ( un ) then
25679: LD_VAR 0 2
25683: PPUSH
25684: CALL_OW 318
25688: IFFALSE 25699
// ComWalk ( un ) ;
25690: LD_VAR 0 2
25694: PPUSH
25695: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25699: LD_VAR 0 2
25703: PPUSH
25704: LD_INT 9
25706: PPUSH
25707: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25711: LD_INT 28
25713: PPUSH
25714: LD_OWVAR 2
25718: PPUSH
25719: LD_INT 2
25721: PPUSH
25722: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25726: LD_INT 29
25728: PPUSH
25729: LD_OWVAR 2
25733: PPUSH
25734: LD_INT 2
25736: PPUSH
25737: CALL_OW 322
// end ;
25741: PPOPN 3
25743: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25744: LD_EXP 55
25748: PUSH
25749: LD_EXP 98
25753: AND
25754: IFFALSE 25865
25756: GO 25758
25758: DISABLE
25759: LD_INT 0
25761: PPUSH
25762: PPUSH
25763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25764: LD_ADDR_VAR 0 3
25768: PUSH
25769: LD_INT 22
25771: PUSH
25772: LD_OWVAR 2
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 25
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PPUSH
25795: CALL_OW 69
25799: ST_TO_ADDR
// if not tmp then
25800: LD_VAR 0 3
25804: NOT
25805: IFFALSE 25809
// exit ;
25807: GO 25865
// un := tmp [ rand ( 1 , tmp ) ] ;
25809: LD_ADDR_VAR 0 2
25813: PUSH
25814: LD_VAR 0 3
25818: PUSH
25819: LD_INT 1
25821: PPUSH
25822: LD_VAR 0 3
25826: PPUSH
25827: CALL_OW 12
25831: ARRAY
25832: ST_TO_ADDR
// if Crawls ( un ) then
25833: LD_VAR 0 2
25837: PPUSH
25838: CALL_OW 318
25842: IFFALSE 25853
// ComWalk ( un ) ;
25844: LD_VAR 0 2
25848: PPUSH
25849: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25853: LD_VAR 0 2
25857: PPUSH
25858: LD_INT 8
25860: PPUSH
25861: CALL_OW 336
// end ;
25865: PPOPN 3
25867: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25868: LD_EXP 55
25872: PUSH
25873: LD_EXP 99
25877: AND
25878: IFFALSE 26022
25880: GO 25882
25882: DISABLE
25883: LD_INT 0
25885: PPUSH
25886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25887: LD_ADDR_VAR 0 2
25891: PUSH
25892: LD_INT 22
25894: PUSH
25895: LD_OWVAR 2
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 21
25906: PUSH
25907: LD_INT 2
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 2
25916: PUSH
25917: LD_INT 34
25919: PUSH
25920: LD_INT 12
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 34
25929: PUSH
25930: LD_INT 51
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 34
25939: PUSH
25940: LD_INT 32
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: LIST
25957: PPUSH
25958: CALL_OW 69
25962: ST_TO_ADDR
// if not tmp then
25963: LD_VAR 0 2
25967: NOT
25968: IFFALSE 25972
// exit ;
25970: GO 26022
// for i in tmp do
25972: LD_ADDR_VAR 0 1
25976: PUSH
25977: LD_VAR 0 2
25981: PUSH
25982: FOR_IN
25983: IFFALSE 26020
// if GetCargo ( i , mat_artifact ) = 0 then
25985: LD_VAR 0 1
25989: PPUSH
25990: LD_INT 4
25992: PPUSH
25993: CALL_OW 289
25997: PUSH
25998: LD_INT 0
26000: EQUAL
26001: IFFALSE 26018
// SetCargo ( i , mat_siberit , 100 ) ;
26003: LD_VAR 0 1
26007: PPUSH
26008: LD_INT 3
26010: PPUSH
26011: LD_INT 100
26013: PPUSH
26014: CALL_OW 290
26018: GO 25982
26020: POP
26021: POP
// end ;
26022: PPOPN 2
26024: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26025: LD_EXP 55
26029: PUSH
26030: LD_EXP 100
26034: AND
26035: IFFALSE 26218
26037: GO 26039
26039: DISABLE
26040: LD_INT 0
26042: PPUSH
26043: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26044: LD_ADDR_VAR 0 2
26048: PUSH
26049: LD_INT 22
26051: PUSH
26052: LD_OWVAR 2
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PPUSH
26061: CALL_OW 69
26065: ST_TO_ADDR
// if not tmp then
26066: LD_VAR 0 2
26070: NOT
26071: IFFALSE 26075
// exit ;
26073: GO 26218
// for i := 1 to 2 do
26075: LD_ADDR_VAR 0 1
26079: PUSH
26080: DOUBLE
26081: LD_INT 1
26083: DEC
26084: ST_TO_ADDR
26085: LD_INT 2
26087: PUSH
26088: FOR_TO
26089: IFFALSE 26216
// begin uc_side := your_side ;
26091: LD_ADDR_OWVAR 20
26095: PUSH
26096: LD_OWVAR 2
26100: ST_TO_ADDR
// uc_nation := nation_american ;
26101: LD_ADDR_OWVAR 21
26105: PUSH
26106: LD_INT 1
26108: ST_TO_ADDR
// vc_chassis := us_morphling ;
26109: LD_ADDR_OWVAR 37
26113: PUSH
26114: LD_INT 5
26116: ST_TO_ADDR
// vc_engine := engine_siberite ;
26117: LD_ADDR_OWVAR 39
26121: PUSH
26122: LD_INT 3
26124: ST_TO_ADDR
// vc_control := control_computer ;
26125: LD_ADDR_OWVAR 38
26129: PUSH
26130: LD_INT 3
26132: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26133: LD_ADDR_OWVAR 40
26137: PUSH
26138: LD_INT 10
26140: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26141: LD_VAR 0 2
26145: PUSH
26146: LD_INT 1
26148: ARRAY
26149: PPUSH
26150: CALL_OW 310
26154: NOT
26155: IFFALSE 26202
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26157: CALL_OW 45
26161: PPUSH
26162: LD_VAR 0 2
26166: PUSH
26167: LD_INT 1
26169: ARRAY
26170: PPUSH
26171: CALL_OW 250
26175: PPUSH
26176: LD_VAR 0 2
26180: PUSH
26181: LD_INT 1
26183: ARRAY
26184: PPUSH
26185: CALL_OW 251
26189: PPUSH
26190: LD_INT 12
26192: PPUSH
26193: LD_INT 1
26195: PPUSH
26196: CALL_OW 50
26200: GO 26214
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26202: CALL_OW 45
26206: PPUSH
26207: LD_INT 1
26209: PPUSH
26210: CALL_OW 51
// end ;
26214: GO 26088
26216: POP
26217: POP
// end ;
26218: PPOPN 2
26220: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26221: LD_EXP 55
26225: PUSH
26226: LD_EXP 101
26230: AND
26231: IFFALSE 26453
26233: GO 26235
26235: DISABLE
26236: LD_INT 0
26238: PPUSH
26239: PPUSH
26240: PPUSH
26241: PPUSH
26242: PPUSH
26243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26244: LD_ADDR_VAR 0 6
26248: PUSH
26249: LD_INT 22
26251: PUSH
26252: LD_OWVAR 2
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 21
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 3
26273: PUSH
26274: LD_INT 23
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: LIST
26292: PPUSH
26293: CALL_OW 69
26297: ST_TO_ADDR
// if not tmp then
26298: LD_VAR 0 6
26302: NOT
26303: IFFALSE 26307
// exit ;
26305: GO 26453
// s1 := rand ( 1 , 4 ) ;
26307: LD_ADDR_VAR 0 2
26311: PUSH
26312: LD_INT 1
26314: PPUSH
26315: LD_INT 4
26317: PPUSH
26318: CALL_OW 12
26322: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26323: LD_ADDR_VAR 0 4
26327: PUSH
26328: LD_VAR 0 6
26332: PUSH
26333: LD_INT 1
26335: ARRAY
26336: PPUSH
26337: LD_VAR 0 2
26341: PPUSH
26342: CALL_OW 259
26346: ST_TO_ADDR
// if s1 = 1 then
26347: LD_VAR 0 2
26351: PUSH
26352: LD_INT 1
26354: EQUAL
26355: IFFALSE 26375
// s2 := rand ( 2 , 4 ) else
26357: LD_ADDR_VAR 0 3
26361: PUSH
26362: LD_INT 2
26364: PPUSH
26365: LD_INT 4
26367: PPUSH
26368: CALL_OW 12
26372: ST_TO_ADDR
26373: GO 26383
// s2 := 1 ;
26375: LD_ADDR_VAR 0 3
26379: PUSH
26380: LD_INT 1
26382: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26383: LD_ADDR_VAR 0 5
26387: PUSH
26388: LD_VAR 0 6
26392: PUSH
26393: LD_INT 1
26395: ARRAY
26396: PPUSH
26397: LD_VAR 0 3
26401: PPUSH
26402: CALL_OW 259
26406: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26407: LD_VAR 0 6
26411: PUSH
26412: LD_INT 1
26414: ARRAY
26415: PPUSH
26416: LD_VAR 0 2
26420: PPUSH
26421: LD_VAR 0 5
26425: PPUSH
26426: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26430: LD_VAR 0 6
26434: PUSH
26435: LD_INT 1
26437: ARRAY
26438: PPUSH
26439: LD_VAR 0 3
26443: PPUSH
26444: LD_VAR 0 4
26448: PPUSH
26449: CALL_OW 237
// end ;
26453: PPOPN 6
26455: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26456: LD_EXP 55
26460: PUSH
26461: LD_EXP 102
26465: AND
26466: IFFALSE 26545
26468: GO 26470
26470: DISABLE
26471: LD_INT 0
26473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26474: LD_ADDR_VAR 0 1
26478: PUSH
26479: LD_INT 22
26481: PUSH
26482: LD_OWVAR 2
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 30
26493: PUSH
26494: LD_INT 3
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PPUSH
26505: CALL_OW 69
26509: ST_TO_ADDR
// if not tmp then
26510: LD_VAR 0 1
26514: NOT
26515: IFFALSE 26519
// exit ;
26517: GO 26545
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26519: LD_VAR 0 1
26523: PUSH
26524: LD_INT 1
26526: PPUSH
26527: LD_VAR 0 1
26531: PPUSH
26532: CALL_OW 12
26536: ARRAY
26537: PPUSH
26538: LD_INT 1
26540: PPUSH
26541: CALL_OW 234
// end ;
26545: PPOPN 1
26547: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26548: LD_EXP 55
26552: PUSH
26553: LD_EXP 103
26557: AND
26558: IFFALSE 26670
26560: GO 26562
26562: DISABLE
26563: LD_INT 0
26565: PPUSH
26566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26567: LD_ADDR_VAR 0 2
26571: PUSH
26572: LD_INT 22
26574: PUSH
26575: LD_OWVAR 2
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: LD_INT 30
26589: PUSH
26590: LD_INT 27
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 30
26599: PUSH
26600: LD_INT 26
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 30
26609: PUSH
26610: LD_INT 28
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PPUSH
26627: CALL_OW 69
26631: ST_TO_ADDR
// if not tmp then
26632: LD_VAR 0 2
26636: NOT
26637: IFFALSE 26641
// exit ;
26639: GO 26670
// for i in tmp do
26641: LD_ADDR_VAR 0 1
26645: PUSH
26646: LD_VAR 0 2
26650: PUSH
26651: FOR_IN
26652: IFFALSE 26668
// SetLives ( i , 1 ) ;
26654: LD_VAR 0 1
26658: PPUSH
26659: LD_INT 1
26661: PPUSH
26662: CALL_OW 234
26666: GO 26651
26668: POP
26669: POP
// end ;
26670: PPOPN 2
26672: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26673: LD_EXP 55
26677: PUSH
26678: LD_EXP 104
26682: AND
26683: IFFALSE 26957
26685: GO 26687
26687: DISABLE
26688: LD_INT 0
26690: PPUSH
26691: PPUSH
26692: PPUSH
// begin i := rand ( 1 , 7 ) ;
26693: LD_ADDR_VAR 0 1
26697: PUSH
26698: LD_INT 1
26700: PPUSH
26701: LD_INT 7
26703: PPUSH
26704: CALL_OW 12
26708: ST_TO_ADDR
// case i of 1 :
26709: LD_VAR 0 1
26713: PUSH
26714: LD_INT 1
26716: DOUBLE
26717: EQUAL
26718: IFTRUE 26722
26720: GO 26732
26722: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26723: LD_STRING earthquake(getX(game), 0, 32)
26725: PPUSH
26726: CALL_OW 559
26730: GO 26957
26732: LD_INT 2
26734: DOUBLE
26735: EQUAL
26736: IFTRUE 26740
26738: GO 26754
26740: POP
// begin ToLua ( displayStucuk(); ) ;
26741: LD_STRING displayStucuk();
26743: PPUSH
26744: CALL_OW 559
// ResetFog ;
26748: CALL_OW 335
// end ; 3 :
26752: GO 26957
26754: LD_INT 3
26756: DOUBLE
26757: EQUAL
26758: IFTRUE 26762
26760: GO 26866
26762: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26763: LD_ADDR_VAR 0 2
26767: PUSH
26768: LD_INT 22
26770: PUSH
26771: LD_OWVAR 2
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 25
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PPUSH
26794: CALL_OW 69
26798: ST_TO_ADDR
// if not tmp then
26799: LD_VAR 0 2
26803: NOT
26804: IFFALSE 26808
// exit ;
26806: GO 26957
// un := tmp [ rand ( 1 , tmp ) ] ;
26808: LD_ADDR_VAR 0 3
26812: PUSH
26813: LD_VAR 0 2
26817: PUSH
26818: LD_INT 1
26820: PPUSH
26821: LD_VAR 0 2
26825: PPUSH
26826: CALL_OW 12
26830: ARRAY
26831: ST_TO_ADDR
// if Crawls ( un ) then
26832: LD_VAR 0 3
26836: PPUSH
26837: CALL_OW 318
26841: IFFALSE 26852
// ComWalk ( un ) ;
26843: LD_VAR 0 3
26847: PPUSH
26848: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26852: LD_VAR 0 3
26856: PPUSH
26857: LD_INT 8
26859: PPUSH
26860: CALL_OW 336
// end ; 4 :
26864: GO 26957
26866: LD_INT 4
26868: DOUBLE
26869: EQUAL
26870: IFTRUE 26874
26872: GO 26935
26874: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26875: LD_ADDR_VAR 0 2
26879: PUSH
26880: LD_INT 22
26882: PUSH
26883: LD_OWVAR 2
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 30
26894: PUSH
26895: LD_INT 29
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PPUSH
26906: CALL_OW 69
26910: ST_TO_ADDR
// if not tmp then
26911: LD_VAR 0 2
26915: NOT
26916: IFFALSE 26920
// exit ;
26918: GO 26957
// DestroyUnit ( tmp [ 1 ] ) ;
26920: LD_VAR 0 2
26924: PUSH
26925: LD_INT 1
26927: ARRAY
26928: PPUSH
26929: CALL_OW 65
// end ; 5 .. 7 :
26933: GO 26957
26935: LD_INT 5
26937: DOUBLE
26938: GREATEREQUAL
26939: IFFALSE 26947
26941: LD_INT 7
26943: DOUBLE
26944: LESSEQUAL
26945: IFTRUE 26949
26947: GO 26956
26949: POP
// StreamSibBomb ; end ;
26950: CALL 23207 0 0
26954: GO 26957
26956: POP
// end ;
26957: PPOPN 3
26959: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26960: LD_EXP 55
26964: PUSH
26965: LD_EXP 105
26969: AND
26970: IFFALSE 27126
26972: GO 26974
26974: DISABLE
26975: LD_INT 0
26977: PPUSH
26978: PPUSH
26979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26980: LD_ADDR_VAR 0 2
26984: PUSH
26985: LD_INT 81
26987: PUSH
26988: LD_OWVAR 2
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 2
26999: PUSH
27000: LD_INT 21
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 21
27012: PUSH
27013: LD_INT 2
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: LIST
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PPUSH
27029: CALL_OW 69
27033: ST_TO_ADDR
// if not tmp then
27034: LD_VAR 0 2
27038: NOT
27039: IFFALSE 27043
// exit ;
27041: GO 27126
// p := 0 ;
27043: LD_ADDR_VAR 0 3
27047: PUSH
27048: LD_INT 0
27050: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27051: LD_INT 35
27053: PPUSH
27054: CALL_OW 67
// p := p + 1 ;
27058: LD_ADDR_VAR 0 3
27062: PUSH
27063: LD_VAR 0 3
27067: PUSH
27068: LD_INT 1
27070: PLUS
27071: ST_TO_ADDR
// for i in tmp do
27072: LD_ADDR_VAR 0 1
27076: PUSH
27077: LD_VAR 0 2
27081: PUSH
27082: FOR_IN
27083: IFFALSE 27114
// if GetLives ( i ) < 1000 then
27085: LD_VAR 0 1
27089: PPUSH
27090: CALL_OW 256
27094: PUSH
27095: LD_INT 1000
27097: LESS
27098: IFFALSE 27112
// SetLives ( i , 1000 ) ;
27100: LD_VAR 0 1
27104: PPUSH
27105: LD_INT 1000
27107: PPUSH
27108: CALL_OW 234
27112: GO 27082
27114: POP
27115: POP
// until p > 20 ;
27116: LD_VAR 0 3
27120: PUSH
27121: LD_INT 20
27123: GREATER
27124: IFFALSE 27051
// end ;
27126: PPOPN 3
27128: END
// every 0 0$1 trigger StreamModeActive and sTime do
27129: LD_EXP 55
27133: PUSH
27134: LD_EXP 106
27138: AND
27139: IFFALSE 27174
27141: GO 27143
27143: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27144: LD_INT 28
27146: PPUSH
27147: LD_OWVAR 2
27151: PPUSH
27152: LD_INT 2
27154: PPUSH
27155: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27159: LD_INT 30
27161: PPUSH
27162: LD_OWVAR 2
27166: PPUSH
27167: LD_INT 2
27169: PPUSH
27170: CALL_OW 322
// end ;
27174: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27175: LD_EXP 55
27179: PUSH
27180: LD_EXP 107
27184: AND
27185: IFFALSE 27306
27187: GO 27189
27189: DISABLE
27190: LD_INT 0
27192: PPUSH
27193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27194: LD_ADDR_VAR 0 2
27198: PUSH
27199: LD_INT 22
27201: PUSH
27202: LD_OWVAR 2
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 21
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 3
27223: PUSH
27224: LD_INT 23
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: PPUSH
27243: CALL_OW 69
27247: ST_TO_ADDR
// if not tmp then
27248: LD_VAR 0 2
27252: NOT
27253: IFFALSE 27257
// exit ;
27255: GO 27306
// for i in tmp do
27257: LD_ADDR_VAR 0 1
27261: PUSH
27262: LD_VAR 0 2
27266: PUSH
27267: FOR_IN
27268: IFFALSE 27304
// begin if Crawls ( i ) then
27270: LD_VAR 0 1
27274: PPUSH
27275: CALL_OW 318
27279: IFFALSE 27290
// ComWalk ( i ) ;
27281: LD_VAR 0 1
27285: PPUSH
27286: CALL_OW 138
// SetClass ( i , 2 ) ;
27290: LD_VAR 0 1
27294: PPUSH
27295: LD_INT 2
27297: PPUSH
27298: CALL_OW 336
// end ;
27302: GO 27267
27304: POP
27305: POP
// end ;
27306: PPOPN 2
27308: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27309: LD_EXP 55
27313: PUSH
27314: LD_EXP 108
27318: AND
27319: IFFALSE 27600
27321: GO 27323
27323: DISABLE
27324: LD_INT 0
27326: PPUSH
27327: PPUSH
27328: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27329: LD_OWVAR 2
27333: PPUSH
27334: LD_INT 9
27336: PPUSH
27337: LD_INT 1
27339: PPUSH
27340: LD_INT 1
27342: PPUSH
27343: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27347: LD_INT 9
27349: PPUSH
27350: LD_OWVAR 2
27354: PPUSH
27355: CALL_OW 343
// uc_side := 9 ;
27359: LD_ADDR_OWVAR 20
27363: PUSH
27364: LD_INT 9
27366: ST_TO_ADDR
// uc_nation := 2 ;
27367: LD_ADDR_OWVAR 21
27371: PUSH
27372: LD_INT 2
27374: ST_TO_ADDR
// hc_name := Dark Warrior ;
27375: LD_ADDR_OWVAR 26
27379: PUSH
27380: LD_STRING Dark Warrior
27382: ST_TO_ADDR
// hc_gallery :=  ;
27383: LD_ADDR_OWVAR 33
27387: PUSH
27388: LD_STRING 
27390: ST_TO_ADDR
// hc_noskilllimit := true ;
27391: LD_ADDR_OWVAR 76
27395: PUSH
27396: LD_INT 1
27398: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27399: LD_ADDR_OWVAR 31
27403: PUSH
27404: LD_INT 30
27406: PUSH
27407: LD_INT 30
27409: PUSH
27410: LD_INT 30
27412: PUSH
27413: LD_INT 30
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: ST_TO_ADDR
// un := CreateHuman ;
27422: LD_ADDR_VAR 0 3
27426: PUSH
27427: CALL_OW 44
27431: ST_TO_ADDR
// hc_noskilllimit := false ;
27432: LD_ADDR_OWVAR 76
27436: PUSH
27437: LD_INT 0
27439: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27440: LD_VAR 0 3
27444: PPUSH
27445: LD_INT 1
27447: PPUSH
27448: CALL_OW 51
// p := 0 ;
27452: LD_ADDR_VAR 0 2
27456: PUSH
27457: LD_INT 0
27459: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27460: LD_INT 35
27462: PPUSH
27463: CALL_OW 67
// p := p + 1 ;
27467: LD_ADDR_VAR 0 2
27471: PUSH
27472: LD_VAR 0 2
27476: PUSH
27477: LD_INT 1
27479: PLUS
27480: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27481: LD_VAR 0 3
27485: PPUSH
27486: CALL_OW 256
27490: PUSH
27491: LD_INT 1000
27493: LESS
27494: IFFALSE 27508
// SetLives ( un , 1000 ) ;
27496: LD_VAR 0 3
27500: PPUSH
27501: LD_INT 1000
27503: PPUSH
27504: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27508: LD_VAR 0 3
27512: PPUSH
27513: LD_INT 81
27515: PUSH
27516: LD_OWVAR 2
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 91
27527: PUSH
27528: LD_VAR 0 3
27532: PUSH
27533: LD_INT 30
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: LIST
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PPUSH
27545: CALL_OW 69
27549: PPUSH
27550: LD_VAR 0 3
27554: PPUSH
27555: CALL_OW 74
27559: PPUSH
27560: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
27564: LD_VAR 0 2
27568: PUSH
27569: LD_INT 60
27571: GREATER
27572: PUSH
27573: LD_VAR 0 3
27577: PPUSH
27578: CALL_OW 301
27582: OR
27583: IFFALSE 27460
// if un then
27585: LD_VAR 0 3
27589: IFFALSE 27600
// RemoveUnit ( un ) ;
27591: LD_VAR 0 3
27595: PPUSH
27596: CALL_OW 64
// end ;
27600: PPOPN 3
27602: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27603: LD_INT 0
27605: PPUSH
// case cmd of 301 :
27606: LD_VAR 0 1
27610: PUSH
27611: LD_INT 301
27613: DOUBLE
27614: EQUAL
27615: IFTRUE 27619
27617: GO 27651
27619: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27620: LD_VAR 0 6
27624: PPUSH
27625: LD_VAR 0 7
27629: PPUSH
27630: LD_VAR 0 8
27634: PPUSH
27635: LD_VAR 0 4
27639: PPUSH
27640: LD_VAR 0 5
27644: PPUSH
27645: CALL 28852 0 5
27649: GO 27772
27651: LD_INT 302
27653: DOUBLE
27654: EQUAL
27655: IFTRUE 27659
27657: GO 27696
27659: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27660: LD_VAR 0 6
27664: PPUSH
27665: LD_VAR 0 7
27669: PPUSH
27670: LD_VAR 0 8
27674: PPUSH
27675: LD_VAR 0 9
27679: PPUSH
27680: LD_VAR 0 4
27684: PPUSH
27685: LD_VAR 0 5
27689: PPUSH
27690: CALL 28943 0 6
27694: GO 27772
27696: LD_INT 303
27698: DOUBLE
27699: EQUAL
27700: IFTRUE 27704
27702: GO 27741
27704: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27705: LD_VAR 0 6
27709: PPUSH
27710: LD_VAR 0 7
27714: PPUSH
27715: LD_VAR 0 8
27719: PPUSH
27720: LD_VAR 0 9
27724: PPUSH
27725: LD_VAR 0 4
27729: PPUSH
27730: LD_VAR 0 5
27734: PPUSH
27735: CALL 27777 0 6
27739: GO 27772
27741: LD_INT 304
27743: DOUBLE
27744: EQUAL
27745: IFTRUE 27749
27747: GO 27771
27749: POP
// hHackTeleport ( unit , x , y ) ; end ;
27750: LD_VAR 0 2
27754: PPUSH
27755: LD_VAR 0 4
27759: PPUSH
27760: LD_VAR 0 5
27764: PPUSH
27765: CALL 29536 0 3
27769: GO 27772
27771: POP
// end ;
27772: LD_VAR 0 12
27776: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27777: LD_INT 0
27779: PPUSH
27780: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27781: LD_VAR 0 1
27785: PUSH
27786: LD_INT 1
27788: LESS
27789: PUSH
27790: LD_VAR 0 1
27794: PUSH
27795: LD_INT 3
27797: GREATER
27798: OR
27799: PUSH
27800: LD_VAR 0 5
27804: PPUSH
27805: LD_VAR 0 6
27809: PPUSH
27810: CALL_OW 428
27814: OR
27815: IFFALSE 27819
// exit ;
27817: GO 28539
// uc_side := your_side ;
27819: LD_ADDR_OWVAR 20
27823: PUSH
27824: LD_OWVAR 2
27828: ST_TO_ADDR
// uc_nation := nation ;
27829: LD_ADDR_OWVAR 21
27833: PUSH
27834: LD_VAR 0 1
27838: ST_TO_ADDR
// bc_level = 1 ;
27839: LD_ADDR_OWVAR 43
27843: PUSH
27844: LD_INT 1
27846: ST_TO_ADDR
// case btype of 1 :
27847: LD_VAR 0 2
27851: PUSH
27852: LD_INT 1
27854: DOUBLE
27855: EQUAL
27856: IFTRUE 27860
27858: GO 27871
27860: POP
// bc_type := b_depot ; 2 :
27861: LD_ADDR_OWVAR 42
27865: PUSH
27866: LD_INT 0
27868: ST_TO_ADDR
27869: GO 28483
27871: LD_INT 2
27873: DOUBLE
27874: EQUAL
27875: IFTRUE 27879
27877: GO 27890
27879: POP
// bc_type := b_warehouse ; 3 :
27880: LD_ADDR_OWVAR 42
27884: PUSH
27885: LD_INT 1
27887: ST_TO_ADDR
27888: GO 28483
27890: LD_INT 3
27892: DOUBLE
27893: EQUAL
27894: IFTRUE 27898
27896: GO 27909
27898: POP
// bc_type := b_lab ; 4 .. 9 :
27899: LD_ADDR_OWVAR 42
27903: PUSH
27904: LD_INT 6
27906: ST_TO_ADDR
27907: GO 28483
27909: LD_INT 4
27911: DOUBLE
27912: GREATEREQUAL
27913: IFFALSE 27921
27915: LD_INT 9
27917: DOUBLE
27918: LESSEQUAL
27919: IFTRUE 27923
27921: GO 27975
27923: POP
// begin bc_type := b_lab_half ;
27924: LD_ADDR_OWVAR 42
27928: PUSH
27929: LD_INT 7
27931: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27932: LD_ADDR_OWVAR 44
27936: PUSH
27937: LD_INT 10
27939: PUSH
27940: LD_INT 11
27942: PUSH
27943: LD_INT 12
27945: PUSH
27946: LD_INT 15
27948: PUSH
27949: LD_INT 14
27951: PUSH
27952: LD_INT 13
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: PUSH
27963: LD_VAR 0 2
27967: PUSH
27968: LD_INT 3
27970: MINUS
27971: ARRAY
27972: ST_TO_ADDR
// end ; 10 .. 13 :
27973: GO 28483
27975: LD_INT 10
27977: DOUBLE
27978: GREATEREQUAL
27979: IFFALSE 27987
27981: LD_INT 13
27983: DOUBLE
27984: LESSEQUAL
27985: IFTRUE 27989
27987: GO 28066
27989: POP
// begin bc_type := b_lab_full ;
27990: LD_ADDR_OWVAR 42
27994: PUSH
27995: LD_INT 8
27997: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27998: LD_ADDR_OWVAR 44
28002: PUSH
28003: LD_INT 10
28005: PUSH
28006: LD_INT 12
28008: PUSH
28009: LD_INT 14
28011: PUSH
28012: LD_INT 13
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: PUSH
28021: LD_VAR 0 2
28025: PUSH
28026: LD_INT 9
28028: MINUS
28029: ARRAY
28030: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28031: LD_ADDR_OWVAR 45
28035: PUSH
28036: LD_INT 11
28038: PUSH
28039: LD_INT 15
28041: PUSH
28042: LD_INT 12
28044: PUSH
28045: LD_INT 15
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: PUSH
28054: LD_VAR 0 2
28058: PUSH
28059: LD_INT 9
28061: MINUS
28062: ARRAY
28063: ST_TO_ADDR
// end ; 14 :
28064: GO 28483
28066: LD_INT 14
28068: DOUBLE
28069: EQUAL
28070: IFTRUE 28074
28072: GO 28085
28074: POP
// bc_type := b_workshop ; 15 :
28075: LD_ADDR_OWVAR 42
28079: PUSH
28080: LD_INT 2
28082: ST_TO_ADDR
28083: GO 28483
28085: LD_INT 15
28087: DOUBLE
28088: EQUAL
28089: IFTRUE 28093
28091: GO 28104
28093: POP
// bc_type := b_factory ; 16 :
28094: LD_ADDR_OWVAR 42
28098: PUSH
28099: LD_INT 3
28101: ST_TO_ADDR
28102: GO 28483
28104: LD_INT 16
28106: DOUBLE
28107: EQUAL
28108: IFTRUE 28112
28110: GO 28123
28112: POP
// bc_type := b_ext_gun ; 17 :
28113: LD_ADDR_OWVAR 42
28117: PUSH
28118: LD_INT 17
28120: ST_TO_ADDR
28121: GO 28483
28123: LD_INT 17
28125: DOUBLE
28126: EQUAL
28127: IFTRUE 28131
28129: GO 28159
28131: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28132: LD_ADDR_OWVAR 42
28136: PUSH
28137: LD_INT 19
28139: PUSH
28140: LD_INT 23
28142: PUSH
28143: LD_INT 19
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: LIST
28150: PUSH
28151: LD_VAR 0 1
28155: ARRAY
28156: ST_TO_ADDR
28157: GO 28483
28159: LD_INT 18
28161: DOUBLE
28162: EQUAL
28163: IFTRUE 28167
28165: GO 28178
28167: POP
// bc_type := b_ext_radar ; 19 :
28168: LD_ADDR_OWVAR 42
28172: PUSH
28173: LD_INT 20
28175: ST_TO_ADDR
28176: GO 28483
28178: LD_INT 19
28180: DOUBLE
28181: EQUAL
28182: IFTRUE 28186
28184: GO 28197
28186: POP
// bc_type := b_ext_radio ; 20 :
28187: LD_ADDR_OWVAR 42
28191: PUSH
28192: LD_INT 22
28194: ST_TO_ADDR
28195: GO 28483
28197: LD_INT 20
28199: DOUBLE
28200: EQUAL
28201: IFTRUE 28205
28203: GO 28216
28205: POP
// bc_type := b_ext_siberium ; 21 :
28206: LD_ADDR_OWVAR 42
28210: PUSH
28211: LD_INT 21
28213: ST_TO_ADDR
28214: GO 28483
28216: LD_INT 21
28218: DOUBLE
28219: EQUAL
28220: IFTRUE 28224
28222: GO 28235
28224: POP
// bc_type := b_ext_computer ; 22 :
28225: LD_ADDR_OWVAR 42
28229: PUSH
28230: LD_INT 24
28232: ST_TO_ADDR
28233: GO 28483
28235: LD_INT 22
28237: DOUBLE
28238: EQUAL
28239: IFTRUE 28243
28241: GO 28254
28243: POP
// bc_type := b_ext_track ; 23 :
28244: LD_ADDR_OWVAR 42
28248: PUSH
28249: LD_INT 16
28251: ST_TO_ADDR
28252: GO 28483
28254: LD_INT 23
28256: DOUBLE
28257: EQUAL
28258: IFTRUE 28262
28260: GO 28273
28262: POP
// bc_type := b_ext_laser ; 24 :
28263: LD_ADDR_OWVAR 42
28267: PUSH
28268: LD_INT 25
28270: ST_TO_ADDR
28271: GO 28483
28273: LD_INT 24
28275: DOUBLE
28276: EQUAL
28277: IFTRUE 28281
28279: GO 28292
28281: POP
// bc_type := b_control_tower ; 25 :
28282: LD_ADDR_OWVAR 42
28286: PUSH
28287: LD_INT 36
28289: ST_TO_ADDR
28290: GO 28483
28292: LD_INT 25
28294: DOUBLE
28295: EQUAL
28296: IFTRUE 28300
28298: GO 28311
28300: POP
// bc_type := b_breastwork ; 26 :
28301: LD_ADDR_OWVAR 42
28305: PUSH
28306: LD_INT 31
28308: ST_TO_ADDR
28309: GO 28483
28311: LD_INT 26
28313: DOUBLE
28314: EQUAL
28315: IFTRUE 28319
28317: GO 28330
28319: POP
// bc_type := b_bunker ; 27 :
28320: LD_ADDR_OWVAR 42
28324: PUSH
28325: LD_INT 32
28327: ST_TO_ADDR
28328: GO 28483
28330: LD_INT 27
28332: DOUBLE
28333: EQUAL
28334: IFTRUE 28338
28336: GO 28349
28338: POP
// bc_type := b_turret ; 28 :
28339: LD_ADDR_OWVAR 42
28343: PUSH
28344: LD_INT 33
28346: ST_TO_ADDR
28347: GO 28483
28349: LD_INT 28
28351: DOUBLE
28352: EQUAL
28353: IFTRUE 28357
28355: GO 28368
28357: POP
// bc_type := b_armoury ; 29 :
28358: LD_ADDR_OWVAR 42
28362: PUSH
28363: LD_INT 4
28365: ST_TO_ADDR
28366: GO 28483
28368: LD_INT 29
28370: DOUBLE
28371: EQUAL
28372: IFTRUE 28376
28374: GO 28387
28376: POP
// bc_type := b_barracks ; 30 :
28377: LD_ADDR_OWVAR 42
28381: PUSH
28382: LD_INT 5
28384: ST_TO_ADDR
28385: GO 28483
28387: LD_INT 30
28389: DOUBLE
28390: EQUAL
28391: IFTRUE 28395
28393: GO 28406
28395: POP
// bc_type := b_solar_power ; 31 :
28396: LD_ADDR_OWVAR 42
28400: PUSH
28401: LD_INT 27
28403: ST_TO_ADDR
28404: GO 28483
28406: LD_INT 31
28408: DOUBLE
28409: EQUAL
28410: IFTRUE 28414
28412: GO 28425
28414: POP
// bc_type := b_oil_power ; 32 :
28415: LD_ADDR_OWVAR 42
28419: PUSH
28420: LD_INT 26
28422: ST_TO_ADDR
28423: GO 28483
28425: LD_INT 32
28427: DOUBLE
28428: EQUAL
28429: IFTRUE 28433
28431: GO 28444
28433: POP
// bc_type := b_siberite_power ; 33 :
28434: LD_ADDR_OWVAR 42
28438: PUSH
28439: LD_INT 28
28441: ST_TO_ADDR
28442: GO 28483
28444: LD_INT 33
28446: DOUBLE
28447: EQUAL
28448: IFTRUE 28452
28450: GO 28463
28452: POP
// bc_type := b_oil_mine ; 34 :
28453: LD_ADDR_OWVAR 42
28457: PUSH
28458: LD_INT 29
28460: ST_TO_ADDR
28461: GO 28483
28463: LD_INT 34
28465: DOUBLE
28466: EQUAL
28467: IFTRUE 28471
28469: GO 28482
28471: POP
// bc_type := b_siberite_mine ; end ;
28472: LD_ADDR_OWVAR 42
28476: PUSH
28477: LD_INT 30
28479: ST_TO_ADDR
28480: GO 28483
28482: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28483: LD_ADDR_VAR 0 8
28487: PUSH
28488: LD_VAR 0 5
28492: PPUSH
28493: LD_VAR 0 6
28497: PPUSH
28498: LD_VAR 0 3
28502: PPUSH
28503: CALL_OW 47
28507: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28508: LD_OWVAR 42
28512: PUSH
28513: LD_INT 32
28515: PUSH
28516: LD_INT 33
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: IN
28523: IFFALSE 28539
// PlaceWeaponTurret ( b , weapon ) ;
28525: LD_VAR 0 8
28529: PPUSH
28530: LD_VAR 0 4
28534: PPUSH
28535: CALL_OW 431
// end ;
28539: LD_VAR 0 7
28543: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28544: LD_INT 0
28546: PPUSH
28547: PPUSH
28548: PPUSH
28549: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28550: LD_ADDR_VAR 0 4
28554: PUSH
28555: LD_INT 22
28557: PUSH
28558: LD_OWVAR 2
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 2
28569: PUSH
28570: LD_INT 30
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 30
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PPUSH
28599: CALL_OW 69
28603: ST_TO_ADDR
// if not tmp then
28604: LD_VAR 0 4
28608: NOT
28609: IFFALSE 28613
// exit ;
28611: GO 28672
// for i in tmp do
28613: LD_ADDR_VAR 0 2
28617: PUSH
28618: LD_VAR 0 4
28622: PUSH
28623: FOR_IN
28624: IFFALSE 28670
// for j = 1 to 3 do
28626: LD_ADDR_VAR 0 3
28630: PUSH
28631: DOUBLE
28632: LD_INT 1
28634: DEC
28635: ST_TO_ADDR
28636: LD_INT 3
28638: PUSH
28639: FOR_TO
28640: IFFALSE 28666
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28642: LD_VAR 0 2
28646: PPUSH
28647: CALL_OW 274
28651: PPUSH
28652: LD_VAR 0 3
28656: PPUSH
28657: LD_INT 99999
28659: PPUSH
28660: CALL_OW 277
28664: GO 28639
28666: POP
28667: POP
28668: GO 28623
28670: POP
28671: POP
// end ;
28672: LD_VAR 0 1
28676: RET
// export function hHackSetLevel10 ; var i , j ; begin
28677: LD_INT 0
28679: PPUSH
28680: PPUSH
28681: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28682: LD_ADDR_VAR 0 2
28686: PUSH
28687: LD_INT 21
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PPUSH
28697: CALL_OW 69
28701: PUSH
28702: FOR_IN
28703: IFFALSE 28755
// if IsSelected ( i ) then
28705: LD_VAR 0 2
28709: PPUSH
28710: CALL_OW 306
28714: IFFALSE 28753
// begin for j := 1 to 4 do
28716: LD_ADDR_VAR 0 3
28720: PUSH
28721: DOUBLE
28722: LD_INT 1
28724: DEC
28725: ST_TO_ADDR
28726: LD_INT 4
28728: PUSH
28729: FOR_TO
28730: IFFALSE 28751
// SetSkill ( i , j , 10 ) ;
28732: LD_VAR 0 2
28736: PPUSH
28737: LD_VAR 0 3
28741: PPUSH
28742: LD_INT 10
28744: PPUSH
28745: CALL_OW 237
28749: GO 28729
28751: POP
28752: POP
// end ;
28753: GO 28702
28755: POP
28756: POP
// end ;
28757: LD_VAR 0 1
28761: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28762: LD_INT 0
28764: PPUSH
28765: PPUSH
28766: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28767: LD_ADDR_VAR 0 2
28771: PUSH
28772: LD_INT 22
28774: PUSH
28775: LD_OWVAR 2
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 21
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PPUSH
28798: CALL_OW 69
28802: PUSH
28803: FOR_IN
28804: IFFALSE 28845
// begin for j := 1 to 4 do
28806: LD_ADDR_VAR 0 3
28810: PUSH
28811: DOUBLE
28812: LD_INT 1
28814: DEC
28815: ST_TO_ADDR
28816: LD_INT 4
28818: PUSH
28819: FOR_TO
28820: IFFALSE 28841
// SetSkill ( i , j , 10 ) ;
28822: LD_VAR 0 2
28826: PPUSH
28827: LD_VAR 0 3
28831: PPUSH
28832: LD_INT 10
28834: PPUSH
28835: CALL_OW 237
28839: GO 28819
28841: POP
28842: POP
// end ;
28843: GO 28803
28845: POP
28846: POP
// end ;
28847: LD_VAR 0 1
28851: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28852: LD_INT 0
28854: PPUSH
// uc_side := your_side ;
28855: LD_ADDR_OWVAR 20
28859: PUSH
28860: LD_OWVAR 2
28864: ST_TO_ADDR
// uc_nation := nation ;
28865: LD_ADDR_OWVAR 21
28869: PUSH
28870: LD_VAR 0 1
28874: ST_TO_ADDR
// InitHc ;
28875: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28879: LD_INT 0
28881: PPUSH
28882: LD_VAR 0 2
28886: PPUSH
28887: LD_VAR 0 3
28891: PPUSH
28892: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28896: LD_VAR 0 4
28900: PPUSH
28901: LD_VAR 0 5
28905: PPUSH
28906: CALL_OW 428
28910: PUSH
28911: LD_INT 0
28913: EQUAL
28914: IFFALSE 28938
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28916: CALL_OW 44
28920: PPUSH
28921: LD_VAR 0 4
28925: PPUSH
28926: LD_VAR 0 5
28930: PPUSH
28931: LD_INT 1
28933: PPUSH
28934: CALL_OW 48
// end ;
28938: LD_VAR 0 6
28942: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28943: LD_INT 0
28945: PPUSH
28946: PPUSH
// uc_side := your_side ;
28947: LD_ADDR_OWVAR 20
28951: PUSH
28952: LD_OWVAR 2
28956: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28957: LD_VAR 0 1
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: LD_INT 2
28967: PUSH
28968: LD_INT 3
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: LD_INT 5
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: IN
28984: IFFALSE 28996
// uc_nation := nation_american else
28986: LD_ADDR_OWVAR 21
28990: PUSH
28991: LD_INT 1
28993: ST_TO_ADDR
28994: GO 29039
// if chassis in [ 11 , 12 , 13 , 14 ] then
28996: LD_VAR 0 1
29000: PUSH
29001: LD_INT 11
29003: PUSH
29004: LD_INT 12
29006: PUSH
29007: LD_INT 13
29009: PUSH
29010: LD_INT 14
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: IN
29019: IFFALSE 29031
// uc_nation := nation_arabian else
29021: LD_ADDR_OWVAR 21
29025: PUSH
29026: LD_INT 2
29028: ST_TO_ADDR
29029: GO 29039
// uc_nation := nation_russian ;
29031: LD_ADDR_OWVAR 21
29035: PUSH
29036: LD_INT 3
29038: ST_TO_ADDR
// vc_chassis := chassis ;
29039: LD_ADDR_OWVAR 37
29043: PUSH
29044: LD_VAR 0 1
29048: ST_TO_ADDR
// vc_engine := engine ;
29049: LD_ADDR_OWVAR 39
29053: PUSH
29054: LD_VAR 0 2
29058: ST_TO_ADDR
// vc_control := control ;
29059: LD_ADDR_OWVAR 38
29063: PUSH
29064: LD_VAR 0 3
29068: ST_TO_ADDR
// vc_weapon := weapon ;
29069: LD_ADDR_OWVAR 40
29073: PUSH
29074: LD_VAR 0 4
29078: ST_TO_ADDR
// un := CreateVehicle ;
29079: LD_ADDR_VAR 0 8
29083: PUSH
29084: CALL_OW 45
29088: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29089: LD_VAR 0 8
29093: PPUSH
29094: LD_INT 0
29096: PPUSH
29097: LD_INT 5
29099: PPUSH
29100: CALL_OW 12
29104: PPUSH
29105: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29109: LD_VAR 0 8
29113: PPUSH
29114: LD_VAR 0 5
29118: PPUSH
29119: LD_VAR 0 6
29123: PPUSH
29124: LD_INT 1
29126: PPUSH
29127: CALL_OW 48
// end ;
29131: LD_VAR 0 7
29135: RET
// export hInvincible ; every 1 do
29136: GO 29138
29138: DISABLE
// hInvincible := [ ] ;
29139: LD_ADDR_EXP 109
29143: PUSH
29144: EMPTY
29145: ST_TO_ADDR
29146: END
// every 10 do var i ;
29147: GO 29149
29149: DISABLE
29150: LD_INT 0
29152: PPUSH
// begin enable ;
29153: ENABLE
// if not hInvincible then
29154: LD_EXP 109
29158: NOT
29159: IFFALSE 29163
// exit ;
29161: GO 29207
// for i in hInvincible do
29163: LD_ADDR_VAR 0 1
29167: PUSH
29168: LD_EXP 109
29172: PUSH
29173: FOR_IN
29174: IFFALSE 29205
// if GetLives ( i ) < 1000 then
29176: LD_VAR 0 1
29180: PPUSH
29181: CALL_OW 256
29185: PUSH
29186: LD_INT 1000
29188: LESS
29189: IFFALSE 29203
// SetLives ( i , 1000 ) ;
29191: LD_VAR 0 1
29195: PPUSH
29196: LD_INT 1000
29198: PPUSH
29199: CALL_OW 234
29203: GO 29173
29205: POP
29206: POP
// end ;
29207: PPOPN 1
29209: END
// export function hHackInvincible ; var i ; begin
29210: LD_INT 0
29212: PPUSH
29213: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29214: LD_ADDR_VAR 0 2
29218: PUSH
29219: LD_INT 2
29221: PUSH
29222: LD_INT 21
29224: PUSH
29225: LD_INT 1
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 21
29234: PUSH
29235: LD_INT 2
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: PPUSH
29247: CALL_OW 69
29251: PUSH
29252: FOR_IN
29253: IFFALSE 29314
// if IsSelected ( i ) then
29255: LD_VAR 0 2
29259: PPUSH
29260: CALL_OW 306
29264: IFFALSE 29312
// begin if i in hInvincible then
29266: LD_VAR 0 2
29270: PUSH
29271: LD_EXP 109
29275: IN
29276: IFFALSE 29296
// hInvincible := hInvincible diff i else
29278: LD_ADDR_EXP 109
29282: PUSH
29283: LD_EXP 109
29287: PUSH
29288: LD_VAR 0 2
29292: DIFF
29293: ST_TO_ADDR
29294: GO 29312
// hInvincible := hInvincible union i ;
29296: LD_ADDR_EXP 109
29300: PUSH
29301: LD_EXP 109
29305: PUSH
29306: LD_VAR 0 2
29310: UNION
29311: ST_TO_ADDR
// end ;
29312: GO 29252
29314: POP
29315: POP
// end ;
29316: LD_VAR 0 1
29320: RET
// export function hHackInvisible ; var i , j ; begin
29321: LD_INT 0
29323: PPUSH
29324: PPUSH
29325: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29326: LD_ADDR_VAR 0 2
29330: PUSH
29331: LD_INT 21
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PPUSH
29341: CALL_OW 69
29345: PUSH
29346: FOR_IN
29347: IFFALSE 29371
// if IsSelected ( i ) then
29349: LD_VAR 0 2
29353: PPUSH
29354: CALL_OW 306
29358: IFFALSE 29369
// ComForceInvisible ( i ) ;
29360: LD_VAR 0 2
29364: PPUSH
29365: CALL_OW 496
29369: GO 29346
29371: POP
29372: POP
// end ;
29373: LD_VAR 0 1
29377: RET
// export function hHackChangeYourSide ; begin
29378: LD_INT 0
29380: PPUSH
// if your_side = 8 then
29381: LD_OWVAR 2
29385: PUSH
29386: LD_INT 8
29388: EQUAL
29389: IFFALSE 29401
// your_side := 0 else
29391: LD_ADDR_OWVAR 2
29395: PUSH
29396: LD_INT 0
29398: ST_TO_ADDR
29399: GO 29415
// your_side := your_side + 1 ;
29401: LD_ADDR_OWVAR 2
29405: PUSH
29406: LD_OWVAR 2
29410: PUSH
29411: LD_INT 1
29413: PLUS
29414: ST_TO_ADDR
// end ;
29415: LD_VAR 0 1
29419: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29420: LD_INT 0
29422: PPUSH
29423: PPUSH
29424: PPUSH
// for i in all_units do
29425: LD_ADDR_VAR 0 2
29429: PUSH
29430: LD_OWVAR 3
29434: PUSH
29435: FOR_IN
29436: IFFALSE 29514
// if IsSelected ( i ) then
29438: LD_VAR 0 2
29442: PPUSH
29443: CALL_OW 306
29447: IFFALSE 29512
// begin j := GetSide ( i ) ;
29449: LD_ADDR_VAR 0 3
29453: PUSH
29454: LD_VAR 0 2
29458: PPUSH
29459: CALL_OW 255
29463: ST_TO_ADDR
// if j = 8 then
29464: LD_VAR 0 3
29468: PUSH
29469: LD_INT 8
29471: EQUAL
29472: IFFALSE 29484
// j := 0 else
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_INT 0
29481: ST_TO_ADDR
29482: GO 29498
// j := j + 1 ;
29484: LD_ADDR_VAR 0 3
29488: PUSH
29489: LD_VAR 0 3
29493: PUSH
29494: LD_INT 1
29496: PLUS
29497: ST_TO_ADDR
// SetSide ( i , j ) ;
29498: LD_VAR 0 2
29502: PPUSH
29503: LD_VAR 0 3
29507: PPUSH
29508: CALL_OW 235
// end ;
29512: GO 29435
29514: POP
29515: POP
// end ;
29516: LD_VAR 0 1
29520: RET
// export function hHackFog ; begin
29521: LD_INT 0
29523: PPUSH
// FogOff ( true ) ;
29524: LD_INT 1
29526: PPUSH
29527: CALL_OW 344
// end ;
29531: LD_VAR 0 1
29535: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29536: LD_INT 0
29538: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29539: LD_VAR 0 1
29543: PPUSH
29544: LD_VAR 0 2
29548: PPUSH
29549: LD_VAR 0 3
29553: PPUSH
29554: LD_INT 1
29556: PPUSH
29557: LD_INT 1
29559: PPUSH
29560: CALL_OW 483
// CenterOnXY ( x , y ) ;
29564: LD_VAR 0 2
29568: PPUSH
29569: LD_VAR 0 3
29573: PPUSH
29574: CALL_OW 84
// end ; end_of_file
29578: LD_VAR 0 4
29582: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
29583: LD_INT 0
29585: PPUSH
29586: PPUSH
29587: PPUSH
29588: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
29589: LD_VAR 0 1
29593: PPUSH
29594: CALL_OW 264
29598: PUSH
29599: LD_EXP 40
29603: EQUAL
29604: IFFALSE 29676
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29606: LD_INT 68
29608: PPUSH
29609: LD_VAR 0 1
29613: PPUSH
29614: CALL_OW 255
29618: PPUSH
29619: CALL_OW 321
29623: PUSH
29624: LD_INT 2
29626: EQUAL
29627: IFFALSE 29639
// eff := 70 else
29629: LD_ADDR_VAR 0 4
29633: PUSH
29634: LD_INT 70
29636: ST_TO_ADDR
29637: GO 29647
// eff := 30 ;
29639: LD_ADDR_VAR 0 4
29643: PUSH
29644: LD_INT 30
29646: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29647: LD_VAR 0 1
29651: PPUSH
29652: CALL_OW 250
29656: PPUSH
29657: LD_VAR 0 1
29661: PPUSH
29662: CALL_OW 251
29666: PPUSH
29667: LD_VAR 0 4
29671: PPUSH
29672: CALL_OW 495
// end ; end ;
29676: LD_VAR 0 2
29680: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29681: LD_INT 0
29683: PPUSH
// end ;
29684: LD_VAR 0 4
29688: RET
// export function SOS_Command ( cmd ) ; begin
29689: LD_INT 0
29691: PPUSH
// end ;
29692: LD_VAR 0 2
29696: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29697: LD_INT 0
29699: PPUSH
// if cmd = 121 then
29700: LD_VAR 0 1
29704: PUSH
29705: LD_INT 121
29707: EQUAL
29708: IFFALSE 29710
// end ;
29710: LD_VAR 0 6
29714: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29715: LD_INT 0
29717: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29718: LD_VAR 0 1
29722: PUSH
29723: LD_INT 250
29725: EQUAL
29726: PUSH
29727: LD_VAR 0 2
29731: PPUSH
29732: CALL_OW 264
29736: PUSH
29737: LD_EXP 43
29741: EQUAL
29742: AND
29743: IFFALSE 29764
// MinerPlaceMine ( unit , x , y ) ;
29745: LD_VAR 0 2
29749: PPUSH
29750: LD_VAR 0 4
29754: PPUSH
29755: LD_VAR 0 5
29759: PPUSH
29760: CALL 32113 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29764: LD_VAR 0 1
29768: PUSH
29769: LD_INT 251
29771: EQUAL
29772: PUSH
29773: LD_VAR 0 2
29777: PPUSH
29778: CALL_OW 264
29782: PUSH
29783: LD_EXP 43
29787: EQUAL
29788: AND
29789: IFFALSE 29810
// MinerDetonateMine ( unit , x , y ) ;
29791: LD_VAR 0 2
29795: PPUSH
29796: LD_VAR 0 4
29800: PPUSH
29801: LD_VAR 0 5
29805: PPUSH
29806: CALL 32390 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29810: LD_VAR 0 1
29814: PUSH
29815: LD_INT 252
29817: EQUAL
29818: PUSH
29819: LD_VAR 0 2
29823: PPUSH
29824: CALL_OW 264
29828: PUSH
29829: LD_EXP 43
29833: EQUAL
29834: AND
29835: IFFALSE 29856
// MinerCreateMinefield ( unit , x , y ) ;
29837: LD_VAR 0 2
29841: PPUSH
29842: LD_VAR 0 4
29846: PPUSH
29847: LD_VAR 0 5
29851: PPUSH
29852: CALL 32807 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29856: LD_VAR 0 1
29860: PUSH
29861: LD_INT 253
29863: EQUAL
29864: PUSH
29865: LD_VAR 0 2
29869: PPUSH
29870: CALL_OW 257
29874: PUSH
29875: LD_INT 5
29877: EQUAL
29878: AND
29879: IFFALSE 29900
// ComBinocular ( unit , x , y ) ;
29881: LD_VAR 0 2
29885: PPUSH
29886: LD_VAR 0 4
29890: PPUSH
29891: LD_VAR 0 5
29895: PPUSH
29896: CALL 33178 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29900: LD_VAR 0 1
29904: PUSH
29905: LD_INT 254
29907: EQUAL
29908: PUSH
29909: LD_VAR 0 2
29913: PPUSH
29914: CALL_OW 264
29918: PUSH
29919: LD_EXP 38
29923: EQUAL
29924: AND
29925: PUSH
29926: LD_VAR 0 3
29930: PPUSH
29931: CALL_OW 263
29935: PUSH
29936: LD_INT 3
29938: EQUAL
29939: AND
29940: IFFALSE 29956
// HackDestroyVehicle ( unit , selectedUnit ) ;
29942: LD_VAR 0 2
29946: PPUSH
29947: LD_VAR 0 3
29951: PPUSH
29952: CALL 31473 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29956: LD_VAR 0 1
29960: PUSH
29961: LD_INT 255
29963: EQUAL
29964: PUSH
29965: LD_VAR 0 2
29969: PPUSH
29970: CALL_OW 264
29974: PUSH
29975: LD_INT 14
29977: PUSH
29978: LD_INT 53
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: IN
29985: AND
29986: PUSH
29987: LD_VAR 0 4
29991: PPUSH
29992: LD_VAR 0 5
29996: PPUSH
29997: CALL_OW 488
30001: AND
30002: IFFALSE 30026
// CutTreeXYR ( unit , x , y , 12 ) ;
30004: LD_VAR 0 2
30008: PPUSH
30009: LD_VAR 0 4
30013: PPUSH
30014: LD_VAR 0 5
30018: PPUSH
30019: LD_INT 12
30021: PPUSH
30022: CALL 30039 0 4
// end ;
30026: LD_VAR 0 6
30030: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
30031: LD_INT 0
30033: PPUSH
// end ;
30034: LD_VAR 0 4
30038: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30039: LD_INT 0
30041: PPUSH
30042: PPUSH
30043: PPUSH
30044: PPUSH
30045: PPUSH
30046: PPUSH
30047: PPUSH
30048: PPUSH
30049: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30050: LD_VAR 0 1
30054: NOT
30055: PUSH
30056: LD_VAR 0 2
30060: PPUSH
30061: LD_VAR 0 3
30065: PPUSH
30066: CALL_OW 488
30070: NOT
30071: OR
30072: PUSH
30073: LD_VAR 0 4
30077: NOT
30078: OR
30079: IFFALSE 30083
// exit ;
30081: GO 30423
// list := [ ] ;
30083: LD_ADDR_VAR 0 13
30087: PUSH
30088: EMPTY
30089: ST_TO_ADDR
// if x - r < 0 then
30090: LD_VAR 0 2
30094: PUSH
30095: LD_VAR 0 4
30099: MINUS
30100: PUSH
30101: LD_INT 0
30103: LESS
30104: IFFALSE 30116
// min_x := 0 else
30106: LD_ADDR_VAR 0 7
30110: PUSH
30111: LD_INT 0
30113: ST_TO_ADDR
30114: GO 30132
// min_x := x - r ;
30116: LD_ADDR_VAR 0 7
30120: PUSH
30121: LD_VAR 0 2
30125: PUSH
30126: LD_VAR 0 4
30130: MINUS
30131: ST_TO_ADDR
// if y - r < 0 then
30132: LD_VAR 0 3
30136: PUSH
30137: LD_VAR 0 4
30141: MINUS
30142: PUSH
30143: LD_INT 0
30145: LESS
30146: IFFALSE 30158
// min_y := 0 else
30148: LD_ADDR_VAR 0 8
30152: PUSH
30153: LD_INT 0
30155: ST_TO_ADDR
30156: GO 30174
// min_y := y - r ;
30158: LD_ADDR_VAR 0 8
30162: PUSH
30163: LD_VAR 0 3
30167: PUSH
30168: LD_VAR 0 4
30172: MINUS
30173: ST_TO_ADDR
// max_x := x + r ;
30174: LD_ADDR_VAR 0 9
30178: PUSH
30179: LD_VAR 0 2
30183: PUSH
30184: LD_VAR 0 4
30188: PLUS
30189: ST_TO_ADDR
// max_y := y + r ;
30190: LD_ADDR_VAR 0 10
30194: PUSH
30195: LD_VAR 0 3
30199: PUSH
30200: LD_VAR 0 4
30204: PLUS
30205: ST_TO_ADDR
// for _x = min_x to max_x do
30206: LD_ADDR_VAR 0 11
30210: PUSH
30211: DOUBLE
30212: LD_VAR 0 7
30216: DEC
30217: ST_TO_ADDR
30218: LD_VAR 0 9
30222: PUSH
30223: FOR_TO
30224: IFFALSE 30341
// for _y = min_y to max_y do
30226: LD_ADDR_VAR 0 12
30230: PUSH
30231: DOUBLE
30232: LD_VAR 0 8
30236: DEC
30237: ST_TO_ADDR
30238: LD_VAR 0 10
30242: PUSH
30243: FOR_TO
30244: IFFALSE 30337
// begin if not ValidHex ( _x , _y ) then
30246: LD_VAR 0 11
30250: PPUSH
30251: LD_VAR 0 12
30255: PPUSH
30256: CALL_OW 488
30260: NOT
30261: IFFALSE 30265
// continue ;
30263: GO 30243
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30265: LD_VAR 0 11
30269: PPUSH
30270: LD_VAR 0 12
30274: PPUSH
30275: CALL_OW 351
30279: PUSH
30280: LD_VAR 0 11
30284: PPUSH
30285: LD_VAR 0 12
30289: PPUSH
30290: CALL_OW 554
30294: AND
30295: IFFALSE 30335
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30297: LD_ADDR_VAR 0 13
30301: PUSH
30302: LD_VAR 0 13
30306: PPUSH
30307: LD_VAR 0 13
30311: PUSH
30312: LD_INT 1
30314: PLUS
30315: PPUSH
30316: LD_VAR 0 11
30320: PUSH
30321: LD_VAR 0 12
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PPUSH
30330: CALL_OW 2
30334: ST_TO_ADDR
// end ;
30335: GO 30243
30337: POP
30338: POP
30339: GO 30223
30341: POP
30342: POP
// if not list then
30343: LD_VAR 0 13
30347: NOT
30348: IFFALSE 30352
// exit ;
30350: GO 30423
// for i in list do
30352: LD_ADDR_VAR 0 6
30356: PUSH
30357: LD_VAR 0 13
30361: PUSH
30362: FOR_IN
30363: IFFALSE 30421
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30365: LD_VAR 0 1
30369: PPUSH
30370: LD_STRING M
30372: PUSH
30373: LD_VAR 0 6
30377: PUSH
30378: LD_INT 1
30380: ARRAY
30381: PUSH
30382: LD_VAR 0 6
30386: PUSH
30387: LD_INT 2
30389: ARRAY
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: PPUSH
30415: CALL_OW 447
30419: GO 30362
30421: POP
30422: POP
// end ;
30423: LD_VAR 0 5
30427: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30428: LD_EXP 112
30432: NOT
30433: IFFALSE 30483
30435: GO 30437
30437: DISABLE
// begin initHack := true ;
30438: LD_ADDR_EXP 112
30442: PUSH
30443: LD_INT 1
30445: ST_TO_ADDR
// hackTanks := [ ] ;
30446: LD_ADDR_EXP 113
30450: PUSH
30451: EMPTY
30452: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30453: LD_ADDR_EXP 114
30457: PUSH
30458: EMPTY
30459: ST_TO_ADDR
// hackLimit := 3 ;
30460: LD_ADDR_EXP 115
30464: PUSH
30465: LD_INT 3
30467: ST_TO_ADDR
// hackDist := 12 ;
30468: LD_ADDR_EXP 116
30472: PUSH
30473: LD_INT 12
30475: ST_TO_ADDR
// hackCounter := [ ] ;
30476: LD_ADDR_EXP 117
30480: PUSH
30481: EMPTY
30482: ST_TO_ADDR
// end ;
30483: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30484: LD_EXP 112
30488: PUSH
30489: LD_INT 34
30491: PUSH
30492: LD_EXP 38
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PPUSH
30501: CALL_OW 69
30505: AND
30506: IFFALSE 30761
30508: GO 30510
30510: DISABLE
30511: LD_INT 0
30513: PPUSH
30514: PPUSH
// begin enable ;
30515: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30516: LD_ADDR_VAR 0 1
30520: PUSH
30521: LD_INT 34
30523: PUSH
30524: LD_EXP 38
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PPUSH
30533: CALL_OW 69
30537: PUSH
30538: FOR_IN
30539: IFFALSE 30759
// begin if not i in hackTanks then
30541: LD_VAR 0 1
30545: PUSH
30546: LD_EXP 113
30550: IN
30551: NOT
30552: IFFALSE 30635
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30554: LD_ADDR_EXP 113
30558: PUSH
30559: LD_EXP 113
30563: PPUSH
30564: LD_EXP 113
30568: PUSH
30569: LD_INT 1
30571: PLUS
30572: PPUSH
30573: LD_VAR 0 1
30577: PPUSH
30578: CALL_OW 1
30582: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30583: LD_ADDR_EXP 114
30587: PUSH
30588: LD_EXP 114
30592: PPUSH
30593: LD_EXP 114
30597: PUSH
30598: LD_INT 1
30600: PLUS
30601: PPUSH
30602: EMPTY
30603: PPUSH
30604: CALL_OW 1
30608: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30609: LD_ADDR_EXP 117
30613: PUSH
30614: LD_EXP 117
30618: PPUSH
30619: LD_EXP 117
30623: PUSH
30624: LD_INT 1
30626: PLUS
30627: PPUSH
30628: EMPTY
30629: PPUSH
30630: CALL_OW 1
30634: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30635: LD_VAR 0 1
30639: PPUSH
30640: CALL_OW 302
30644: NOT
30645: IFFALSE 30658
// begin HackUnlinkAll ( i ) ;
30647: LD_VAR 0 1
30651: PPUSH
30652: CALL 30764 0 1
// continue ;
30656: GO 30538
// end ; HackCheckCapturedStatus ( i ) ;
30658: LD_VAR 0 1
30662: PPUSH
30663: CALL 31207 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30667: LD_ADDR_VAR 0 2
30671: PUSH
30672: LD_INT 81
30674: PUSH
30675: LD_VAR 0 1
30679: PPUSH
30680: CALL_OW 255
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 33
30691: PUSH
30692: LD_INT 3
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 91
30701: PUSH
30702: LD_VAR 0 1
30706: PUSH
30707: LD_EXP 116
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 50
30719: PUSH
30720: EMPTY
30721: LIST
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: PPUSH
30729: CALL_OW 69
30733: ST_TO_ADDR
// if not tmp then
30734: LD_VAR 0 2
30738: NOT
30739: IFFALSE 30743
// continue ;
30741: GO 30538
// HackLink ( i , tmp ) ;
30743: LD_VAR 0 1
30747: PPUSH
30748: LD_VAR 0 2
30752: PPUSH
30753: CALL 30900 0 2
// end ;
30757: GO 30538
30759: POP
30760: POP
// end ;
30761: PPOPN 2
30763: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30764: LD_INT 0
30766: PPUSH
30767: PPUSH
30768: PPUSH
// if not hack in hackTanks then
30769: LD_VAR 0 1
30773: PUSH
30774: LD_EXP 113
30778: IN
30779: NOT
30780: IFFALSE 30784
// exit ;
30782: GO 30895
// index := GetElementIndex ( hackTanks , hack ) ;
30784: LD_ADDR_VAR 0 4
30788: PUSH
30789: LD_EXP 113
30793: PPUSH
30794: LD_VAR 0 1
30798: PPUSH
30799: CALL 38369 0 2
30803: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30804: LD_EXP 114
30808: PUSH
30809: LD_VAR 0 4
30813: ARRAY
30814: IFFALSE 30895
// begin for i in hackTanksCaptured [ index ] do
30816: LD_ADDR_VAR 0 3
30820: PUSH
30821: LD_EXP 114
30825: PUSH
30826: LD_VAR 0 4
30830: ARRAY
30831: PUSH
30832: FOR_IN
30833: IFFALSE 30859
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30835: LD_VAR 0 3
30839: PUSH
30840: LD_INT 1
30842: ARRAY
30843: PPUSH
30844: LD_VAR 0 3
30848: PUSH
30849: LD_INT 2
30851: ARRAY
30852: PPUSH
30853: CALL_OW 235
30857: GO 30832
30859: POP
30860: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30861: LD_ADDR_EXP 114
30865: PUSH
30866: LD_EXP 114
30870: PPUSH
30871: LD_VAR 0 4
30875: PPUSH
30876: EMPTY
30877: PPUSH
30878: CALL_OW 1
30882: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30883: LD_VAR 0 1
30887: PPUSH
30888: LD_INT 0
30890: PPUSH
30891: CALL_OW 505
// end ; end ;
30895: LD_VAR 0 2
30899: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30900: LD_INT 0
30902: PPUSH
30903: PPUSH
30904: PPUSH
// if not hack in hackTanks or not vehicles then
30905: LD_VAR 0 1
30909: PUSH
30910: LD_EXP 113
30914: IN
30915: NOT
30916: PUSH
30917: LD_VAR 0 2
30921: NOT
30922: OR
30923: IFFALSE 30927
// exit ;
30925: GO 31202
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30927: LD_ADDR_VAR 0 2
30931: PUSH
30932: LD_VAR 0 1
30936: PPUSH
30937: LD_VAR 0 2
30941: PPUSH
30942: LD_INT 1
30944: PPUSH
30945: LD_INT 1
30947: PPUSH
30948: CALL 39019 0 4
30952: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30953: LD_ADDR_VAR 0 5
30957: PUSH
30958: LD_EXP 113
30962: PPUSH
30963: LD_VAR 0 1
30967: PPUSH
30968: CALL 38369 0 2
30972: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30973: LD_EXP 114
30977: PUSH
30978: LD_VAR 0 5
30982: ARRAY
30983: PUSH
30984: LD_EXP 115
30988: LESS
30989: IFFALSE 31178
// begin for i := 1 to vehicles do
30991: LD_ADDR_VAR 0 4
30995: PUSH
30996: DOUBLE
30997: LD_INT 1
30999: DEC
31000: ST_TO_ADDR
31001: LD_VAR 0 2
31005: PUSH
31006: FOR_TO
31007: IFFALSE 31176
// begin if hackTanksCaptured [ index ] = hackLimit then
31009: LD_EXP 114
31013: PUSH
31014: LD_VAR 0 5
31018: ARRAY
31019: PUSH
31020: LD_EXP 115
31024: EQUAL
31025: IFFALSE 31029
// break ;
31027: GO 31176
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31029: LD_ADDR_EXP 117
31033: PUSH
31034: LD_EXP 117
31038: PPUSH
31039: LD_VAR 0 5
31043: PPUSH
31044: LD_EXP 117
31048: PUSH
31049: LD_VAR 0 5
31053: ARRAY
31054: PUSH
31055: LD_INT 1
31057: PLUS
31058: PPUSH
31059: CALL_OW 1
31063: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31064: LD_ADDR_EXP 114
31068: PUSH
31069: LD_EXP 114
31073: PPUSH
31074: LD_VAR 0 5
31078: PUSH
31079: LD_EXP 114
31083: PUSH
31084: LD_VAR 0 5
31088: ARRAY
31089: PUSH
31090: LD_INT 1
31092: PLUS
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PPUSH
31098: LD_VAR 0 2
31102: PUSH
31103: LD_VAR 0 4
31107: ARRAY
31108: PUSH
31109: LD_VAR 0 2
31113: PUSH
31114: LD_VAR 0 4
31118: ARRAY
31119: PPUSH
31120: CALL_OW 255
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PPUSH
31129: CALL 38584 0 3
31133: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31134: LD_VAR 0 2
31138: PUSH
31139: LD_VAR 0 4
31143: ARRAY
31144: PPUSH
31145: LD_VAR 0 1
31149: PPUSH
31150: CALL_OW 255
31154: PPUSH
31155: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31159: LD_VAR 0 2
31163: PUSH
31164: LD_VAR 0 4
31168: ARRAY
31169: PPUSH
31170: CALL_OW 141
// end ;
31174: GO 31006
31176: POP
31177: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31178: LD_VAR 0 1
31182: PPUSH
31183: LD_EXP 114
31187: PUSH
31188: LD_VAR 0 5
31192: ARRAY
31193: PUSH
31194: LD_INT 0
31196: PLUS
31197: PPUSH
31198: CALL_OW 505
// end ;
31202: LD_VAR 0 3
31206: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31207: LD_INT 0
31209: PPUSH
31210: PPUSH
31211: PPUSH
31212: PPUSH
// if not hack in hackTanks then
31213: LD_VAR 0 1
31217: PUSH
31218: LD_EXP 113
31222: IN
31223: NOT
31224: IFFALSE 31228
// exit ;
31226: GO 31468
// index := GetElementIndex ( hackTanks , hack ) ;
31228: LD_ADDR_VAR 0 4
31232: PUSH
31233: LD_EXP 113
31237: PPUSH
31238: LD_VAR 0 1
31242: PPUSH
31243: CALL 38369 0 2
31247: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31248: LD_ADDR_VAR 0 3
31252: PUSH
31253: DOUBLE
31254: LD_EXP 114
31258: PUSH
31259: LD_VAR 0 4
31263: ARRAY
31264: INC
31265: ST_TO_ADDR
31266: LD_INT 1
31268: PUSH
31269: FOR_DOWNTO
31270: IFFALSE 31442
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31272: LD_ADDR_VAR 0 5
31276: PUSH
31277: LD_EXP 114
31281: PUSH
31282: LD_VAR 0 4
31286: ARRAY
31287: PUSH
31288: LD_VAR 0 3
31292: ARRAY
31293: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31294: LD_VAR 0 5
31298: PUSH
31299: LD_INT 1
31301: ARRAY
31302: PPUSH
31303: CALL_OW 302
31307: NOT
31308: PUSH
31309: LD_VAR 0 5
31313: PUSH
31314: LD_INT 1
31316: ARRAY
31317: PPUSH
31318: CALL_OW 255
31322: PUSH
31323: LD_VAR 0 1
31327: PPUSH
31328: CALL_OW 255
31332: NONEQUAL
31333: OR
31334: IFFALSE 31440
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31336: LD_VAR 0 5
31340: PUSH
31341: LD_INT 1
31343: ARRAY
31344: PPUSH
31345: CALL_OW 305
31349: PUSH
31350: LD_VAR 0 5
31354: PUSH
31355: LD_INT 1
31357: ARRAY
31358: PPUSH
31359: CALL_OW 255
31363: PUSH
31364: LD_VAR 0 1
31368: PPUSH
31369: CALL_OW 255
31373: EQUAL
31374: AND
31375: IFFALSE 31399
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31377: LD_VAR 0 5
31381: PUSH
31382: LD_INT 1
31384: ARRAY
31385: PPUSH
31386: LD_VAR 0 5
31390: PUSH
31391: LD_INT 2
31393: ARRAY
31394: PPUSH
31395: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31399: LD_ADDR_EXP 114
31403: PUSH
31404: LD_EXP 114
31408: PPUSH
31409: LD_VAR 0 4
31413: PPUSH
31414: LD_EXP 114
31418: PUSH
31419: LD_VAR 0 4
31423: ARRAY
31424: PPUSH
31425: LD_VAR 0 3
31429: PPUSH
31430: CALL_OW 3
31434: PPUSH
31435: CALL_OW 1
31439: ST_TO_ADDR
// end ; end ;
31440: GO 31269
31442: POP
31443: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31444: LD_VAR 0 1
31448: PPUSH
31449: LD_EXP 114
31453: PUSH
31454: LD_VAR 0 4
31458: ARRAY
31459: PUSH
31460: LD_INT 0
31462: PLUS
31463: PPUSH
31464: CALL_OW 505
// end ;
31468: LD_VAR 0 2
31472: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31473: LD_INT 0
31475: PPUSH
31476: PPUSH
31477: PPUSH
31478: PPUSH
// if not hack in hackTanks then
31479: LD_VAR 0 1
31483: PUSH
31484: LD_EXP 113
31488: IN
31489: NOT
31490: IFFALSE 31494
// exit ;
31492: GO 31579
// index := GetElementIndex ( hackTanks , hack ) ;
31494: LD_ADDR_VAR 0 5
31498: PUSH
31499: LD_EXP 113
31503: PPUSH
31504: LD_VAR 0 1
31508: PPUSH
31509: CALL 38369 0 2
31513: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31514: LD_ADDR_VAR 0 4
31518: PUSH
31519: DOUBLE
31520: LD_INT 1
31522: DEC
31523: ST_TO_ADDR
31524: LD_EXP 114
31528: PUSH
31529: LD_VAR 0 5
31533: ARRAY
31534: PUSH
31535: FOR_TO
31536: IFFALSE 31577
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31538: LD_EXP 114
31542: PUSH
31543: LD_VAR 0 5
31547: ARRAY
31548: PUSH
31549: LD_VAR 0 4
31553: ARRAY
31554: PUSH
31555: LD_INT 1
31557: ARRAY
31558: PUSH
31559: LD_VAR 0 2
31563: EQUAL
31564: IFFALSE 31575
// KillUnit ( vehicle ) ;
31566: LD_VAR 0 2
31570: PPUSH
31571: CALL_OW 66
31575: GO 31535
31577: POP
31578: POP
// end ;
31579: LD_VAR 0 3
31583: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31584: LD_EXP 118
31588: NOT
31589: IFFALSE 31624
31591: GO 31593
31593: DISABLE
// begin initMiner := true ;
31594: LD_ADDR_EXP 118
31598: PUSH
31599: LD_INT 1
31601: ST_TO_ADDR
// minersList := [ ] ;
31602: LD_ADDR_EXP 119
31606: PUSH
31607: EMPTY
31608: ST_TO_ADDR
// minerMinesList := [ ] ;
31609: LD_ADDR_EXP 120
31613: PUSH
31614: EMPTY
31615: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31616: LD_ADDR_EXP 121
31620: PUSH
31621: LD_INT 5
31623: ST_TO_ADDR
// end ;
31624: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31625: LD_EXP 118
31629: PUSH
31630: LD_INT 34
31632: PUSH
31633: LD_EXP 43
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PPUSH
31642: CALL_OW 69
31646: AND
31647: IFFALSE 32110
31649: GO 31651
31651: DISABLE
31652: LD_INT 0
31654: PPUSH
31655: PPUSH
31656: PPUSH
31657: PPUSH
// begin enable ;
31658: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31659: LD_ADDR_VAR 0 1
31663: PUSH
31664: LD_INT 34
31666: PUSH
31667: LD_EXP 43
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PPUSH
31676: CALL_OW 69
31680: PUSH
31681: FOR_IN
31682: IFFALSE 31754
// begin if not i in minersList then
31684: LD_VAR 0 1
31688: PUSH
31689: LD_EXP 119
31693: IN
31694: NOT
31695: IFFALSE 31752
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31697: LD_ADDR_EXP 119
31701: PUSH
31702: LD_EXP 119
31706: PPUSH
31707: LD_EXP 119
31711: PUSH
31712: LD_INT 1
31714: PLUS
31715: PPUSH
31716: LD_VAR 0 1
31720: PPUSH
31721: CALL_OW 1
31725: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31726: LD_ADDR_EXP 120
31730: PUSH
31731: LD_EXP 120
31735: PPUSH
31736: LD_EXP 120
31740: PUSH
31741: LD_INT 1
31743: PLUS
31744: PPUSH
31745: EMPTY
31746: PPUSH
31747: CALL_OW 1
31751: ST_TO_ADDR
// end end ;
31752: GO 31681
31754: POP
31755: POP
// for i := minerMinesList downto 1 do
31756: LD_ADDR_VAR 0 1
31760: PUSH
31761: DOUBLE
31762: LD_EXP 120
31766: INC
31767: ST_TO_ADDR
31768: LD_INT 1
31770: PUSH
31771: FOR_DOWNTO
31772: IFFALSE 32108
// begin if IsLive ( minersList [ i ] ) then
31774: LD_EXP 119
31778: PUSH
31779: LD_VAR 0 1
31783: ARRAY
31784: PPUSH
31785: CALL_OW 300
31789: IFFALSE 31817
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31791: LD_EXP 119
31795: PUSH
31796: LD_VAR 0 1
31800: ARRAY
31801: PPUSH
31802: LD_EXP 120
31806: PUSH
31807: LD_VAR 0 1
31811: ARRAY
31812: PPUSH
31813: CALL_OW 505
// if not minerMinesList [ i ] then
31817: LD_EXP 120
31821: PUSH
31822: LD_VAR 0 1
31826: ARRAY
31827: NOT
31828: IFFALSE 31832
// continue ;
31830: GO 31771
// for j := minerMinesList [ i ] downto 1 do
31832: LD_ADDR_VAR 0 2
31836: PUSH
31837: DOUBLE
31838: LD_EXP 120
31842: PUSH
31843: LD_VAR 0 1
31847: ARRAY
31848: INC
31849: ST_TO_ADDR
31850: LD_INT 1
31852: PUSH
31853: FOR_DOWNTO
31854: IFFALSE 32104
// begin side := GetSide ( minersList [ i ] ) ;
31856: LD_ADDR_VAR 0 3
31860: PUSH
31861: LD_EXP 119
31865: PUSH
31866: LD_VAR 0 1
31870: ARRAY
31871: PPUSH
31872: CALL_OW 255
31876: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31877: LD_ADDR_VAR 0 4
31881: PUSH
31882: LD_EXP 120
31886: PUSH
31887: LD_VAR 0 1
31891: ARRAY
31892: PUSH
31893: LD_VAR 0 2
31897: ARRAY
31898: PUSH
31899: LD_INT 1
31901: ARRAY
31902: PPUSH
31903: LD_EXP 120
31907: PUSH
31908: LD_VAR 0 1
31912: ARRAY
31913: PUSH
31914: LD_VAR 0 2
31918: ARRAY
31919: PUSH
31920: LD_INT 2
31922: ARRAY
31923: PPUSH
31924: CALL_OW 428
31928: ST_TO_ADDR
// if not tmp then
31929: LD_VAR 0 4
31933: NOT
31934: IFFALSE 31938
// continue ;
31936: GO 31853
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31938: LD_VAR 0 4
31942: PUSH
31943: LD_INT 81
31945: PUSH
31946: LD_VAR 0 3
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PPUSH
31955: CALL_OW 69
31959: IN
31960: PUSH
31961: LD_EXP 120
31965: PUSH
31966: LD_VAR 0 1
31970: ARRAY
31971: PUSH
31972: LD_VAR 0 2
31976: ARRAY
31977: PUSH
31978: LD_INT 1
31980: ARRAY
31981: PPUSH
31982: LD_EXP 120
31986: PUSH
31987: LD_VAR 0 1
31991: ARRAY
31992: PUSH
31993: LD_VAR 0 2
31997: ARRAY
31998: PUSH
31999: LD_INT 2
32001: ARRAY
32002: PPUSH
32003: CALL_OW 458
32007: AND
32008: IFFALSE 32102
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32010: LD_EXP 120
32014: PUSH
32015: LD_VAR 0 1
32019: ARRAY
32020: PUSH
32021: LD_VAR 0 2
32025: ARRAY
32026: PUSH
32027: LD_INT 1
32029: ARRAY
32030: PPUSH
32031: LD_EXP 120
32035: PUSH
32036: LD_VAR 0 1
32040: ARRAY
32041: PUSH
32042: LD_VAR 0 2
32046: ARRAY
32047: PUSH
32048: LD_INT 2
32050: ARRAY
32051: PPUSH
32052: LD_VAR 0 3
32056: PPUSH
32057: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32061: LD_ADDR_EXP 120
32065: PUSH
32066: LD_EXP 120
32070: PPUSH
32071: LD_VAR 0 1
32075: PPUSH
32076: LD_EXP 120
32080: PUSH
32081: LD_VAR 0 1
32085: ARRAY
32086: PPUSH
32087: LD_VAR 0 2
32091: PPUSH
32092: CALL_OW 3
32096: PPUSH
32097: CALL_OW 1
32101: ST_TO_ADDR
// end ; end ;
32102: GO 31853
32104: POP
32105: POP
// end ;
32106: GO 31771
32108: POP
32109: POP
// end ;
32110: PPOPN 4
32112: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32113: LD_INT 0
32115: PPUSH
32116: PPUSH
// result := false ;
32117: LD_ADDR_VAR 0 4
32121: PUSH
32122: LD_INT 0
32124: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32125: LD_VAR 0 1
32129: PPUSH
32130: CALL_OW 264
32134: PUSH
32135: LD_EXP 43
32139: EQUAL
32140: NOT
32141: IFFALSE 32145
// exit ;
32143: GO 32385
// index := GetElementIndex ( minersList , unit ) ;
32145: LD_ADDR_VAR 0 5
32149: PUSH
32150: LD_EXP 119
32154: PPUSH
32155: LD_VAR 0 1
32159: PPUSH
32160: CALL 38369 0 2
32164: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32165: LD_EXP 120
32169: PUSH
32170: LD_VAR 0 5
32174: ARRAY
32175: PUSH
32176: LD_EXP 121
32180: GREATEREQUAL
32181: IFFALSE 32185
// exit ;
32183: GO 32385
// ComMoveXY ( unit , x , y ) ;
32185: LD_VAR 0 1
32189: PPUSH
32190: LD_VAR 0 2
32194: PPUSH
32195: LD_VAR 0 3
32199: PPUSH
32200: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32204: LD_INT 35
32206: PPUSH
32207: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32211: LD_VAR 0 1
32215: PPUSH
32216: LD_VAR 0 2
32220: PPUSH
32221: LD_VAR 0 3
32225: PPUSH
32226: CALL 69141 0 3
32230: NOT
32231: PUSH
32232: LD_VAR 0 1
32236: PPUSH
32237: CALL_OW 314
32241: AND
32242: IFFALSE 32246
// exit ;
32244: GO 32385
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32246: LD_VAR 0 2
32250: PPUSH
32251: LD_VAR 0 3
32255: PPUSH
32256: CALL_OW 428
32260: PUSH
32261: LD_VAR 0 1
32265: EQUAL
32266: PUSH
32267: LD_VAR 0 1
32271: PPUSH
32272: CALL_OW 314
32276: NOT
32277: AND
32278: IFFALSE 32204
// PlaySoundXY ( x , y , PlantMine ) ;
32280: LD_VAR 0 2
32284: PPUSH
32285: LD_VAR 0 3
32289: PPUSH
32290: LD_STRING PlantMine
32292: PPUSH
32293: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32297: LD_VAR 0 2
32301: PPUSH
32302: LD_VAR 0 3
32306: PPUSH
32307: LD_VAR 0 1
32311: PPUSH
32312: CALL_OW 255
32316: PPUSH
32317: LD_INT 0
32319: PPUSH
32320: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32324: LD_ADDR_EXP 120
32328: PUSH
32329: LD_EXP 120
32333: PPUSH
32334: LD_VAR 0 5
32338: PUSH
32339: LD_EXP 120
32343: PUSH
32344: LD_VAR 0 5
32348: ARRAY
32349: PUSH
32350: LD_INT 1
32352: PLUS
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PPUSH
32358: LD_VAR 0 2
32362: PUSH
32363: LD_VAR 0 3
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PPUSH
32372: CALL 38584 0 3
32376: ST_TO_ADDR
// result := true ;
32377: LD_ADDR_VAR 0 4
32381: PUSH
32382: LD_INT 1
32384: ST_TO_ADDR
// end ;
32385: LD_VAR 0 4
32389: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32390: LD_INT 0
32392: PPUSH
32393: PPUSH
32394: PPUSH
// if not unit in minersList then
32395: LD_VAR 0 1
32399: PUSH
32400: LD_EXP 119
32404: IN
32405: NOT
32406: IFFALSE 32410
// exit ;
32408: GO 32802
// index := GetElementIndex ( minersList , unit ) ;
32410: LD_ADDR_VAR 0 6
32414: PUSH
32415: LD_EXP 119
32419: PPUSH
32420: LD_VAR 0 1
32424: PPUSH
32425: CALL 38369 0 2
32429: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32430: LD_ADDR_VAR 0 5
32434: PUSH
32435: DOUBLE
32436: LD_EXP 120
32440: PUSH
32441: LD_VAR 0 6
32445: ARRAY
32446: INC
32447: ST_TO_ADDR
32448: LD_INT 1
32450: PUSH
32451: FOR_DOWNTO
32452: IFFALSE 32613
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32454: LD_EXP 120
32458: PUSH
32459: LD_VAR 0 6
32463: ARRAY
32464: PUSH
32465: LD_VAR 0 5
32469: ARRAY
32470: PUSH
32471: LD_INT 1
32473: ARRAY
32474: PUSH
32475: LD_VAR 0 2
32479: EQUAL
32480: PUSH
32481: LD_EXP 120
32485: PUSH
32486: LD_VAR 0 6
32490: ARRAY
32491: PUSH
32492: LD_VAR 0 5
32496: ARRAY
32497: PUSH
32498: LD_INT 2
32500: ARRAY
32501: PUSH
32502: LD_VAR 0 3
32506: EQUAL
32507: AND
32508: IFFALSE 32611
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32510: LD_EXP 120
32514: PUSH
32515: LD_VAR 0 6
32519: ARRAY
32520: PUSH
32521: LD_VAR 0 5
32525: ARRAY
32526: PUSH
32527: LD_INT 1
32529: ARRAY
32530: PPUSH
32531: LD_EXP 120
32535: PUSH
32536: LD_VAR 0 6
32540: ARRAY
32541: PUSH
32542: LD_VAR 0 5
32546: ARRAY
32547: PUSH
32548: LD_INT 2
32550: ARRAY
32551: PPUSH
32552: LD_VAR 0 1
32556: PPUSH
32557: CALL_OW 255
32561: PPUSH
32562: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32566: LD_ADDR_EXP 120
32570: PUSH
32571: LD_EXP 120
32575: PPUSH
32576: LD_VAR 0 6
32580: PPUSH
32581: LD_EXP 120
32585: PUSH
32586: LD_VAR 0 6
32590: ARRAY
32591: PPUSH
32592: LD_VAR 0 5
32596: PPUSH
32597: CALL_OW 3
32601: PPUSH
32602: CALL_OW 1
32606: ST_TO_ADDR
// exit ;
32607: POP
32608: POP
32609: GO 32802
// end ; end ;
32611: GO 32451
32613: POP
32614: POP
// for i := minerMinesList [ index ] downto 1 do
32615: LD_ADDR_VAR 0 5
32619: PUSH
32620: DOUBLE
32621: LD_EXP 120
32625: PUSH
32626: LD_VAR 0 6
32630: ARRAY
32631: INC
32632: ST_TO_ADDR
32633: LD_INT 1
32635: PUSH
32636: FOR_DOWNTO
32637: IFFALSE 32800
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32639: LD_EXP 120
32643: PUSH
32644: LD_VAR 0 6
32648: ARRAY
32649: PUSH
32650: LD_VAR 0 5
32654: ARRAY
32655: PUSH
32656: LD_INT 1
32658: ARRAY
32659: PPUSH
32660: LD_EXP 120
32664: PUSH
32665: LD_VAR 0 6
32669: ARRAY
32670: PUSH
32671: LD_VAR 0 5
32675: ARRAY
32676: PUSH
32677: LD_INT 2
32679: ARRAY
32680: PPUSH
32681: LD_VAR 0 2
32685: PPUSH
32686: LD_VAR 0 3
32690: PPUSH
32691: CALL_OW 298
32695: PUSH
32696: LD_INT 6
32698: LESS
32699: IFFALSE 32798
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32701: LD_EXP 120
32705: PUSH
32706: LD_VAR 0 6
32710: ARRAY
32711: PUSH
32712: LD_VAR 0 5
32716: ARRAY
32717: PUSH
32718: LD_INT 1
32720: ARRAY
32721: PPUSH
32722: LD_EXP 120
32726: PUSH
32727: LD_VAR 0 6
32731: ARRAY
32732: PUSH
32733: LD_VAR 0 5
32737: ARRAY
32738: PUSH
32739: LD_INT 2
32741: ARRAY
32742: PPUSH
32743: LD_VAR 0 1
32747: PPUSH
32748: CALL_OW 255
32752: PPUSH
32753: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32757: LD_ADDR_EXP 120
32761: PUSH
32762: LD_EXP 120
32766: PPUSH
32767: LD_VAR 0 6
32771: PPUSH
32772: LD_EXP 120
32776: PUSH
32777: LD_VAR 0 6
32781: ARRAY
32782: PPUSH
32783: LD_VAR 0 5
32787: PPUSH
32788: CALL_OW 3
32792: PPUSH
32793: CALL_OW 1
32797: ST_TO_ADDR
// end ; end ;
32798: GO 32636
32800: POP
32801: POP
// end ;
32802: LD_VAR 0 4
32806: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32807: LD_INT 0
32809: PPUSH
32810: PPUSH
32811: PPUSH
32812: PPUSH
32813: PPUSH
32814: PPUSH
32815: PPUSH
32816: PPUSH
32817: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32818: LD_VAR 0 1
32822: PPUSH
32823: CALL_OW 264
32827: PUSH
32828: LD_EXP 43
32832: EQUAL
32833: NOT
32834: PUSH
32835: LD_VAR 0 1
32839: PUSH
32840: LD_EXP 119
32844: IN
32845: NOT
32846: OR
32847: IFFALSE 32851
// exit ;
32849: GO 33173
// index := GetElementIndex ( minersList , unit ) ;
32851: LD_ADDR_VAR 0 6
32855: PUSH
32856: LD_EXP 119
32860: PPUSH
32861: LD_VAR 0 1
32865: PPUSH
32866: CALL 38369 0 2
32870: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32871: LD_ADDR_VAR 0 8
32875: PUSH
32876: LD_EXP 121
32880: PUSH
32881: LD_EXP 120
32885: PUSH
32886: LD_VAR 0 6
32890: ARRAY
32891: MINUS
32892: ST_TO_ADDR
// if not minesFreeAmount then
32893: LD_VAR 0 8
32897: NOT
32898: IFFALSE 32902
// exit ;
32900: GO 33173
// tmp := [ ] ;
32902: LD_ADDR_VAR 0 7
32906: PUSH
32907: EMPTY
32908: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32909: LD_ADDR_VAR 0 5
32913: PUSH
32914: DOUBLE
32915: LD_INT 1
32917: DEC
32918: ST_TO_ADDR
32919: LD_VAR 0 8
32923: PUSH
32924: FOR_TO
32925: IFFALSE 33120
// begin _d := rand ( 0 , 5 ) ;
32927: LD_ADDR_VAR 0 11
32931: PUSH
32932: LD_INT 0
32934: PPUSH
32935: LD_INT 5
32937: PPUSH
32938: CALL_OW 12
32942: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32943: LD_ADDR_VAR 0 12
32947: PUSH
32948: LD_INT 2
32950: PPUSH
32951: LD_INT 6
32953: PPUSH
32954: CALL_OW 12
32958: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32959: LD_ADDR_VAR 0 9
32963: PUSH
32964: LD_VAR 0 2
32968: PPUSH
32969: LD_VAR 0 11
32973: PPUSH
32974: LD_VAR 0 12
32978: PPUSH
32979: CALL_OW 272
32983: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32984: LD_ADDR_VAR 0 10
32988: PUSH
32989: LD_VAR 0 3
32993: PPUSH
32994: LD_VAR 0 11
32998: PPUSH
32999: LD_VAR 0 12
33003: PPUSH
33004: CALL_OW 273
33008: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33009: LD_VAR 0 9
33013: PPUSH
33014: LD_VAR 0 10
33018: PPUSH
33019: CALL_OW 488
33023: PUSH
33024: LD_VAR 0 9
33028: PUSH
33029: LD_VAR 0 10
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_VAR 0 7
33042: IN
33043: NOT
33044: AND
33045: PUSH
33046: LD_VAR 0 9
33050: PPUSH
33051: LD_VAR 0 10
33055: PPUSH
33056: CALL_OW 458
33060: NOT
33061: AND
33062: IFFALSE 33104
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33064: LD_ADDR_VAR 0 7
33068: PUSH
33069: LD_VAR 0 7
33073: PPUSH
33074: LD_VAR 0 7
33078: PUSH
33079: LD_INT 1
33081: PLUS
33082: PPUSH
33083: LD_VAR 0 9
33087: PUSH
33088: LD_VAR 0 10
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PPUSH
33097: CALL_OW 1
33101: ST_TO_ADDR
33102: GO 33118
// i := i - 1 ;
33104: LD_ADDR_VAR 0 5
33108: PUSH
33109: LD_VAR 0 5
33113: PUSH
33114: LD_INT 1
33116: MINUS
33117: ST_TO_ADDR
// end ;
33118: GO 32924
33120: POP
33121: POP
// for i in tmp do
33122: LD_ADDR_VAR 0 5
33126: PUSH
33127: LD_VAR 0 7
33131: PUSH
33132: FOR_IN
33133: IFFALSE 33171
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33135: LD_VAR 0 1
33139: PPUSH
33140: LD_VAR 0 5
33144: PUSH
33145: LD_INT 1
33147: ARRAY
33148: PPUSH
33149: LD_VAR 0 5
33153: PUSH
33154: LD_INT 2
33156: ARRAY
33157: PPUSH
33158: CALL 32113 0 3
33162: NOT
33163: IFFALSE 33169
// exit ;
33165: POP
33166: POP
33167: GO 33173
33169: GO 33132
33171: POP
33172: POP
// end ;
33173: LD_VAR 0 4
33177: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33178: LD_INT 0
33180: PPUSH
33181: PPUSH
33182: PPUSH
33183: PPUSH
33184: PPUSH
33185: PPUSH
33186: PPUSH
// if not GetClass ( unit ) = class_sniper then
33187: LD_VAR 0 1
33191: PPUSH
33192: CALL_OW 257
33196: PUSH
33197: LD_INT 5
33199: EQUAL
33200: NOT
33201: IFFALSE 33205
// exit ;
33203: GO 33593
// dist := 8 ;
33205: LD_ADDR_VAR 0 5
33209: PUSH
33210: LD_INT 8
33212: ST_TO_ADDR
// viewRange := 12 ;
33213: LD_ADDR_VAR 0 7
33217: PUSH
33218: LD_INT 12
33220: ST_TO_ADDR
// side := GetSide ( unit ) ;
33221: LD_ADDR_VAR 0 6
33225: PUSH
33226: LD_VAR 0 1
33230: PPUSH
33231: CALL_OW 255
33235: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33236: LD_INT 61
33238: PPUSH
33239: LD_VAR 0 6
33243: PPUSH
33244: CALL_OW 321
33248: PUSH
33249: LD_INT 2
33251: EQUAL
33252: IFFALSE 33262
// viewRange := 16 ;
33254: LD_ADDR_VAR 0 7
33258: PUSH
33259: LD_INT 16
33261: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33262: LD_VAR 0 1
33266: PPUSH
33267: LD_VAR 0 2
33271: PPUSH
33272: LD_VAR 0 3
33276: PPUSH
33277: CALL_OW 297
33281: PUSH
33282: LD_VAR 0 5
33286: GREATER
33287: IFFALSE 33366
// begin ComMoveXY ( unit , x , y ) ;
33289: LD_VAR 0 1
33293: PPUSH
33294: LD_VAR 0 2
33298: PPUSH
33299: LD_VAR 0 3
33303: PPUSH
33304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33308: LD_INT 35
33310: PPUSH
33311: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33315: LD_VAR 0 1
33319: PPUSH
33320: LD_VAR 0 2
33324: PPUSH
33325: LD_VAR 0 3
33329: PPUSH
33330: CALL 69141 0 3
33334: NOT
33335: IFFALSE 33339
// exit ;
33337: GO 33593
// until GetDistUnitXY ( unit , x , y ) < dist ;
33339: LD_VAR 0 1
33343: PPUSH
33344: LD_VAR 0 2
33348: PPUSH
33349: LD_VAR 0 3
33353: PPUSH
33354: CALL_OW 297
33358: PUSH
33359: LD_VAR 0 5
33363: LESS
33364: IFFALSE 33308
// end ; ComTurnXY ( unit , x , y ) ;
33366: LD_VAR 0 1
33370: PPUSH
33371: LD_VAR 0 2
33375: PPUSH
33376: LD_VAR 0 3
33380: PPUSH
33381: CALL_OW 118
// wait ( 5 ) ;
33385: LD_INT 5
33387: PPUSH
33388: CALL_OW 67
// _d := GetDir ( unit ) ;
33392: LD_ADDR_VAR 0 10
33396: PUSH
33397: LD_VAR 0 1
33401: PPUSH
33402: CALL_OW 254
33406: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33407: LD_ADDR_VAR 0 8
33411: PUSH
33412: LD_VAR 0 1
33416: PPUSH
33417: CALL_OW 250
33421: PPUSH
33422: LD_VAR 0 10
33426: PPUSH
33427: LD_VAR 0 5
33431: PPUSH
33432: CALL_OW 272
33436: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33437: LD_ADDR_VAR 0 9
33441: PUSH
33442: LD_VAR 0 1
33446: PPUSH
33447: CALL_OW 251
33451: PPUSH
33452: LD_VAR 0 10
33456: PPUSH
33457: LD_VAR 0 5
33461: PPUSH
33462: CALL_OW 273
33466: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33467: LD_VAR 0 8
33471: PPUSH
33472: LD_VAR 0 9
33476: PPUSH
33477: CALL_OW 488
33481: NOT
33482: IFFALSE 33486
// exit ;
33484: GO 33593
// ComAnimCustom ( unit , 1 ) ;
33486: LD_VAR 0 1
33490: PPUSH
33491: LD_INT 1
33493: PPUSH
33494: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33498: LD_VAR 0 8
33502: PPUSH
33503: LD_VAR 0 9
33507: PPUSH
33508: LD_VAR 0 6
33512: PPUSH
33513: LD_VAR 0 7
33517: PPUSH
33518: CALL_OW 330
// repeat wait ( 1 ) ;
33522: LD_INT 1
33524: PPUSH
33525: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
33529: LD_VAR 0 1
33533: PPUSH
33534: CALL_OW 316
33538: PUSH
33539: LD_VAR 0 1
33543: PPUSH
33544: CALL_OW 314
33548: OR
33549: PUSH
33550: LD_VAR 0 1
33554: PPUSH
33555: CALL_OW 302
33559: NOT
33560: OR
33561: PUSH
33562: LD_VAR 0 1
33566: PPUSH
33567: CALL_OW 301
33571: OR
33572: IFFALSE 33522
// RemoveSeeing ( _x , _y , side ) ;
33574: LD_VAR 0 8
33578: PPUSH
33579: LD_VAR 0 9
33583: PPUSH
33584: LD_VAR 0 6
33588: PPUSH
33589: CALL_OW 331
// end ; end_of_file
33593: LD_VAR 0 4
33597: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33598: LD_INT 0
33600: PPUSH
33601: PPUSH
// if exist_mode then
33602: LD_VAR 0 2
33606: IFFALSE 33631
// unit := CreateCharacter ( prefix & ident ) else
33608: LD_ADDR_VAR 0 5
33612: PUSH
33613: LD_VAR 0 3
33617: PUSH
33618: LD_VAR 0 1
33622: STR
33623: PPUSH
33624: CALL_OW 34
33628: ST_TO_ADDR
33629: GO 33646
// unit := NewCharacter ( ident ) ;
33631: LD_ADDR_VAR 0 5
33635: PUSH
33636: LD_VAR 0 1
33640: PPUSH
33641: CALL_OW 25
33645: ST_TO_ADDR
// result := unit ;
33646: LD_ADDR_VAR 0 4
33650: PUSH
33651: LD_VAR 0 5
33655: ST_TO_ADDR
// end ;
33656: LD_VAR 0 4
33660: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33661: LD_INT 0
33663: PPUSH
33664: PPUSH
// if not side or not nation then
33665: LD_VAR 0 1
33669: NOT
33670: PUSH
33671: LD_VAR 0 2
33675: NOT
33676: OR
33677: IFFALSE 33681
// exit ;
33679: GO 34449
// case nation of nation_american :
33681: LD_VAR 0 2
33685: PUSH
33686: LD_INT 1
33688: DOUBLE
33689: EQUAL
33690: IFTRUE 33694
33692: GO 33908
33694: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33695: LD_ADDR_VAR 0 4
33699: PUSH
33700: LD_INT 35
33702: PUSH
33703: LD_INT 45
33705: PUSH
33706: LD_INT 46
33708: PUSH
33709: LD_INT 47
33711: PUSH
33712: LD_INT 82
33714: PUSH
33715: LD_INT 83
33717: PUSH
33718: LD_INT 84
33720: PUSH
33721: LD_INT 85
33723: PUSH
33724: LD_INT 86
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: LD_INT 2
33732: PUSH
33733: LD_INT 6
33735: PUSH
33736: LD_INT 15
33738: PUSH
33739: LD_INT 16
33741: PUSH
33742: LD_INT 7
33744: PUSH
33745: LD_INT 12
33747: PUSH
33748: LD_INT 13
33750: PUSH
33751: LD_INT 10
33753: PUSH
33754: LD_INT 14
33756: PUSH
33757: LD_INT 20
33759: PUSH
33760: LD_INT 21
33762: PUSH
33763: LD_INT 22
33765: PUSH
33766: LD_INT 25
33768: PUSH
33769: LD_INT 32
33771: PUSH
33772: LD_INT 27
33774: PUSH
33775: LD_INT 36
33777: PUSH
33778: LD_INT 69
33780: PUSH
33781: LD_INT 39
33783: PUSH
33784: LD_INT 34
33786: PUSH
33787: LD_INT 40
33789: PUSH
33790: LD_INT 48
33792: PUSH
33793: LD_INT 49
33795: PUSH
33796: LD_INT 50
33798: PUSH
33799: LD_INT 51
33801: PUSH
33802: LD_INT 52
33804: PUSH
33805: LD_INT 53
33807: PUSH
33808: LD_INT 54
33810: PUSH
33811: LD_INT 55
33813: PUSH
33814: LD_INT 56
33816: PUSH
33817: LD_INT 57
33819: PUSH
33820: LD_INT 58
33822: PUSH
33823: LD_INT 59
33825: PUSH
33826: LD_INT 60
33828: PUSH
33829: LD_INT 61
33831: PUSH
33832: LD_INT 62
33834: PUSH
33835: LD_INT 80
33837: PUSH
33838: LD_INT 82
33840: PUSH
33841: LD_INT 83
33843: PUSH
33844: LD_INT 84
33846: PUSH
33847: LD_INT 85
33849: PUSH
33850: LD_INT 86
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: ST_TO_ADDR
33906: GO 34373
33908: LD_INT 2
33910: DOUBLE
33911: EQUAL
33912: IFTRUE 33916
33914: GO 34142
33916: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33917: LD_ADDR_VAR 0 4
33921: PUSH
33922: LD_INT 35
33924: PUSH
33925: LD_INT 45
33927: PUSH
33928: LD_INT 46
33930: PUSH
33931: LD_INT 47
33933: PUSH
33934: LD_INT 82
33936: PUSH
33937: LD_INT 83
33939: PUSH
33940: LD_INT 84
33942: PUSH
33943: LD_INT 85
33945: PUSH
33946: LD_INT 87
33948: PUSH
33949: LD_INT 70
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: LD_INT 11
33957: PUSH
33958: LD_INT 3
33960: PUSH
33961: LD_INT 4
33963: PUSH
33964: LD_INT 5
33966: PUSH
33967: LD_INT 6
33969: PUSH
33970: LD_INT 15
33972: PUSH
33973: LD_INT 18
33975: PUSH
33976: LD_INT 7
33978: PUSH
33979: LD_INT 17
33981: PUSH
33982: LD_INT 8
33984: PUSH
33985: LD_INT 20
33987: PUSH
33988: LD_INT 21
33990: PUSH
33991: LD_INT 22
33993: PUSH
33994: LD_INT 72
33996: PUSH
33997: LD_INT 26
33999: PUSH
34000: LD_INT 69
34002: PUSH
34003: LD_INT 39
34005: PUSH
34006: LD_INT 40
34008: PUSH
34009: LD_INT 41
34011: PUSH
34012: LD_INT 42
34014: PUSH
34015: LD_INT 43
34017: PUSH
34018: LD_INT 48
34020: PUSH
34021: LD_INT 49
34023: PUSH
34024: LD_INT 50
34026: PUSH
34027: LD_INT 51
34029: PUSH
34030: LD_INT 52
34032: PUSH
34033: LD_INT 53
34035: PUSH
34036: LD_INT 54
34038: PUSH
34039: LD_INT 55
34041: PUSH
34042: LD_INT 56
34044: PUSH
34045: LD_INT 60
34047: PUSH
34048: LD_INT 61
34050: PUSH
34051: LD_INT 62
34053: PUSH
34054: LD_INT 66
34056: PUSH
34057: LD_INT 67
34059: PUSH
34060: LD_INT 68
34062: PUSH
34063: LD_INT 81
34065: PUSH
34066: LD_INT 82
34068: PUSH
34069: LD_INT 83
34071: PUSH
34072: LD_INT 84
34074: PUSH
34075: LD_INT 85
34077: PUSH
34078: LD_INT 87
34080: PUSH
34081: LD_INT 88
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: ST_TO_ADDR
34140: GO 34373
34142: LD_INT 3
34144: DOUBLE
34145: EQUAL
34146: IFTRUE 34150
34148: GO 34372
34150: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34151: LD_ADDR_VAR 0 4
34155: PUSH
34156: LD_INT 46
34158: PUSH
34159: LD_INT 47
34161: PUSH
34162: LD_INT 1
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 82
34170: PUSH
34171: LD_INT 83
34173: PUSH
34174: LD_INT 84
34176: PUSH
34177: LD_INT 85
34179: PUSH
34180: LD_INT 86
34182: PUSH
34183: LD_INT 11
34185: PUSH
34186: LD_INT 9
34188: PUSH
34189: LD_INT 20
34191: PUSH
34192: LD_INT 19
34194: PUSH
34195: LD_INT 21
34197: PUSH
34198: LD_INT 24
34200: PUSH
34201: LD_INT 22
34203: PUSH
34204: LD_INT 25
34206: PUSH
34207: LD_INT 28
34209: PUSH
34210: LD_INT 29
34212: PUSH
34213: LD_INT 30
34215: PUSH
34216: LD_INT 31
34218: PUSH
34219: LD_INT 37
34221: PUSH
34222: LD_INT 38
34224: PUSH
34225: LD_INT 32
34227: PUSH
34228: LD_INT 27
34230: PUSH
34231: LD_INT 33
34233: PUSH
34234: LD_INT 69
34236: PUSH
34237: LD_INT 39
34239: PUSH
34240: LD_INT 34
34242: PUSH
34243: LD_INT 40
34245: PUSH
34246: LD_INT 71
34248: PUSH
34249: LD_INT 23
34251: PUSH
34252: LD_INT 44
34254: PUSH
34255: LD_INT 48
34257: PUSH
34258: LD_INT 49
34260: PUSH
34261: LD_INT 50
34263: PUSH
34264: LD_INT 51
34266: PUSH
34267: LD_INT 52
34269: PUSH
34270: LD_INT 53
34272: PUSH
34273: LD_INT 54
34275: PUSH
34276: LD_INT 55
34278: PUSH
34279: LD_INT 56
34281: PUSH
34282: LD_INT 57
34284: PUSH
34285: LD_INT 58
34287: PUSH
34288: LD_INT 59
34290: PUSH
34291: LD_INT 63
34293: PUSH
34294: LD_INT 64
34296: PUSH
34297: LD_INT 65
34299: PUSH
34300: LD_INT 82
34302: PUSH
34303: LD_INT 83
34305: PUSH
34306: LD_INT 84
34308: PUSH
34309: LD_INT 85
34311: PUSH
34312: LD_INT 86
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: ST_TO_ADDR
34370: GO 34373
34372: POP
// if state > - 1 and state < 3 then
34373: LD_VAR 0 3
34377: PUSH
34378: LD_INT 1
34380: NEG
34381: GREATER
34382: PUSH
34383: LD_VAR 0 3
34387: PUSH
34388: LD_INT 3
34390: LESS
34391: AND
34392: IFFALSE 34449
// for i in result do
34394: LD_ADDR_VAR 0 5
34398: PUSH
34399: LD_VAR 0 4
34403: PUSH
34404: FOR_IN
34405: IFFALSE 34447
// if GetTech ( i , side ) <> state then
34407: LD_VAR 0 5
34411: PPUSH
34412: LD_VAR 0 1
34416: PPUSH
34417: CALL_OW 321
34421: PUSH
34422: LD_VAR 0 3
34426: NONEQUAL
34427: IFFALSE 34445
// result := result diff i ;
34429: LD_ADDR_VAR 0 4
34433: PUSH
34434: LD_VAR 0 4
34438: PUSH
34439: LD_VAR 0 5
34443: DIFF
34444: ST_TO_ADDR
34445: GO 34404
34447: POP
34448: POP
// end ;
34449: LD_VAR 0 4
34453: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34454: LD_INT 0
34456: PPUSH
34457: PPUSH
34458: PPUSH
// result := true ;
34459: LD_ADDR_VAR 0 3
34463: PUSH
34464: LD_INT 1
34466: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34467: LD_ADDR_VAR 0 5
34471: PUSH
34472: LD_VAR 0 2
34476: PPUSH
34477: CALL_OW 480
34481: ST_TO_ADDR
// if not tmp then
34482: LD_VAR 0 5
34486: NOT
34487: IFFALSE 34491
// exit ;
34489: GO 34540
// for i in tmp do
34491: LD_ADDR_VAR 0 4
34495: PUSH
34496: LD_VAR 0 5
34500: PUSH
34501: FOR_IN
34502: IFFALSE 34538
// if GetTech ( i , side ) <> state_researched then
34504: LD_VAR 0 4
34508: PPUSH
34509: LD_VAR 0 1
34513: PPUSH
34514: CALL_OW 321
34518: PUSH
34519: LD_INT 2
34521: NONEQUAL
34522: IFFALSE 34536
// begin result := false ;
34524: LD_ADDR_VAR 0 3
34528: PUSH
34529: LD_INT 0
34531: ST_TO_ADDR
// exit ;
34532: POP
34533: POP
34534: GO 34540
// end ;
34536: GO 34501
34538: POP
34539: POP
// end ;
34540: LD_VAR 0 3
34544: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34545: LD_INT 0
34547: PPUSH
34548: PPUSH
34549: PPUSH
34550: PPUSH
34551: PPUSH
34552: PPUSH
34553: PPUSH
34554: PPUSH
34555: PPUSH
34556: PPUSH
34557: PPUSH
34558: PPUSH
34559: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34560: LD_VAR 0 1
34564: NOT
34565: PUSH
34566: LD_VAR 0 1
34570: PPUSH
34571: CALL_OW 257
34575: PUSH
34576: LD_INT 9
34578: NONEQUAL
34579: OR
34580: IFFALSE 34584
// exit ;
34582: GO 35157
// side := GetSide ( unit ) ;
34584: LD_ADDR_VAR 0 9
34588: PUSH
34589: LD_VAR 0 1
34593: PPUSH
34594: CALL_OW 255
34598: ST_TO_ADDR
// tech_space := tech_spacanom ;
34599: LD_ADDR_VAR 0 12
34603: PUSH
34604: LD_INT 29
34606: ST_TO_ADDR
// tech_time := tech_taurad ;
34607: LD_ADDR_VAR 0 13
34611: PUSH
34612: LD_INT 28
34614: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34615: LD_ADDR_VAR 0 11
34619: PUSH
34620: LD_VAR 0 1
34624: PPUSH
34625: CALL_OW 310
34629: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34630: LD_VAR 0 11
34634: PPUSH
34635: CALL_OW 247
34639: PUSH
34640: LD_INT 2
34642: EQUAL
34643: IFFALSE 34647
// exit ;
34645: GO 35157
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34647: LD_ADDR_VAR 0 8
34651: PUSH
34652: LD_INT 81
34654: PUSH
34655: LD_VAR 0 9
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 3
34666: PUSH
34667: LD_INT 21
34669: PUSH
34670: LD_INT 3
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PPUSH
34685: CALL_OW 69
34689: ST_TO_ADDR
// if not tmp then
34690: LD_VAR 0 8
34694: NOT
34695: IFFALSE 34699
// exit ;
34697: GO 35157
// if in_unit then
34699: LD_VAR 0 11
34703: IFFALSE 34727
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34705: LD_ADDR_VAR 0 10
34709: PUSH
34710: LD_VAR 0 8
34714: PPUSH
34715: LD_VAR 0 11
34719: PPUSH
34720: CALL_OW 74
34724: ST_TO_ADDR
34725: GO 34747
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34727: LD_ADDR_VAR 0 10
34731: PUSH
34732: LD_VAR 0 8
34736: PPUSH
34737: LD_VAR 0 1
34741: PPUSH
34742: CALL_OW 74
34746: ST_TO_ADDR
// if not enemy then
34747: LD_VAR 0 10
34751: NOT
34752: IFFALSE 34756
// exit ;
34754: GO 35157
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34756: LD_VAR 0 11
34760: PUSH
34761: LD_VAR 0 11
34765: PPUSH
34766: LD_VAR 0 10
34770: PPUSH
34771: CALL_OW 296
34775: PUSH
34776: LD_INT 13
34778: GREATER
34779: AND
34780: PUSH
34781: LD_VAR 0 1
34785: PPUSH
34786: LD_VAR 0 10
34790: PPUSH
34791: CALL_OW 296
34795: PUSH
34796: LD_INT 12
34798: GREATER
34799: OR
34800: IFFALSE 34804
// exit ;
34802: GO 35157
// missile := [ 1 ] ;
34804: LD_ADDR_VAR 0 14
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34815: LD_VAR 0 9
34819: PPUSH
34820: LD_VAR 0 12
34824: PPUSH
34825: CALL_OW 325
34829: IFFALSE 34858
// missile := Insert ( missile , missile + 1 , 2 ) ;
34831: LD_ADDR_VAR 0 14
34835: PUSH
34836: LD_VAR 0 14
34840: PPUSH
34841: LD_VAR 0 14
34845: PUSH
34846: LD_INT 1
34848: PLUS
34849: PPUSH
34850: LD_INT 2
34852: PPUSH
34853: CALL_OW 2
34857: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34858: LD_VAR 0 9
34862: PPUSH
34863: LD_VAR 0 13
34867: PPUSH
34868: CALL_OW 325
34872: PUSH
34873: LD_VAR 0 10
34877: PPUSH
34878: CALL_OW 255
34882: PPUSH
34883: LD_VAR 0 13
34887: PPUSH
34888: CALL_OW 325
34892: NOT
34893: AND
34894: IFFALSE 34923
// missile := Insert ( missile , missile + 1 , 3 ) ;
34896: LD_ADDR_VAR 0 14
34900: PUSH
34901: LD_VAR 0 14
34905: PPUSH
34906: LD_VAR 0 14
34910: PUSH
34911: LD_INT 1
34913: PLUS
34914: PPUSH
34915: LD_INT 3
34917: PPUSH
34918: CALL_OW 2
34922: ST_TO_ADDR
// if missile < 2 then
34923: LD_VAR 0 14
34927: PUSH
34928: LD_INT 2
34930: LESS
34931: IFFALSE 34935
// exit ;
34933: GO 35157
// x := GetX ( enemy ) ;
34935: LD_ADDR_VAR 0 4
34939: PUSH
34940: LD_VAR 0 10
34944: PPUSH
34945: CALL_OW 250
34949: ST_TO_ADDR
// y := GetY ( enemy ) ;
34950: LD_ADDR_VAR 0 5
34954: PUSH
34955: LD_VAR 0 10
34959: PPUSH
34960: CALL_OW 251
34964: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34965: LD_ADDR_VAR 0 6
34969: PUSH
34970: LD_VAR 0 4
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PPUSH
34979: LD_INT 1
34981: PPUSH
34982: CALL_OW 12
34986: PLUS
34987: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34988: LD_ADDR_VAR 0 7
34992: PUSH
34993: LD_VAR 0 5
34997: PUSH
34998: LD_INT 1
35000: NEG
35001: PPUSH
35002: LD_INT 1
35004: PPUSH
35005: CALL_OW 12
35009: PLUS
35010: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35011: LD_VAR 0 6
35015: PPUSH
35016: LD_VAR 0 7
35020: PPUSH
35021: CALL_OW 488
35025: NOT
35026: IFFALSE 35048
// begin _x := x ;
35028: LD_ADDR_VAR 0 6
35032: PUSH
35033: LD_VAR 0 4
35037: ST_TO_ADDR
// _y := y ;
35038: LD_ADDR_VAR 0 7
35042: PUSH
35043: LD_VAR 0 5
35047: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35048: LD_ADDR_VAR 0 3
35052: PUSH
35053: LD_INT 1
35055: PPUSH
35056: LD_VAR 0 14
35060: PPUSH
35061: CALL_OW 12
35065: ST_TO_ADDR
// case i of 1 :
35066: LD_VAR 0 3
35070: PUSH
35071: LD_INT 1
35073: DOUBLE
35074: EQUAL
35075: IFTRUE 35079
35077: GO 35096
35079: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35080: LD_VAR 0 1
35084: PPUSH
35085: LD_VAR 0 10
35089: PPUSH
35090: CALL_OW 115
35094: GO 35157
35096: LD_INT 2
35098: DOUBLE
35099: EQUAL
35100: IFTRUE 35104
35102: GO 35126
35104: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35105: LD_VAR 0 1
35109: PPUSH
35110: LD_VAR 0 6
35114: PPUSH
35115: LD_VAR 0 7
35119: PPUSH
35120: CALL_OW 153
35124: GO 35157
35126: LD_INT 3
35128: DOUBLE
35129: EQUAL
35130: IFTRUE 35134
35132: GO 35156
35134: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35135: LD_VAR 0 1
35139: PPUSH
35140: LD_VAR 0 6
35144: PPUSH
35145: LD_VAR 0 7
35149: PPUSH
35150: CALL_OW 154
35154: GO 35157
35156: POP
// end ;
35157: LD_VAR 0 2
35161: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35162: LD_INT 0
35164: PPUSH
35165: PPUSH
35166: PPUSH
35167: PPUSH
35168: PPUSH
35169: PPUSH
// if not unit or not building then
35170: LD_VAR 0 1
35174: NOT
35175: PUSH
35176: LD_VAR 0 2
35180: NOT
35181: OR
35182: IFFALSE 35186
// exit ;
35184: GO 35344
// x := GetX ( building ) ;
35186: LD_ADDR_VAR 0 5
35190: PUSH
35191: LD_VAR 0 2
35195: PPUSH
35196: CALL_OW 250
35200: ST_TO_ADDR
// y := GetY ( building ) ;
35201: LD_ADDR_VAR 0 6
35205: PUSH
35206: LD_VAR 0 2
35210: PPUSH
35211: CALL_OW 251
35215: ST_TO_ADDR
// for i = 0 to 5 do
35216: LD_ADDR_VAR 0 4
35220: PUSH
35221: DOUBLE
35222: LD_INT 0
35224: DEC
35225: ST_TO_ADDR
35226: LD_INT 5
35228: PUSH
35229: FOR_TO
35230: IFFALSE 35342
// begin _x := ShiftX ( x , i , 3 ) ;
35232: LD_ADDR_VAR 0 7
35236: PUSH
35237: LD_VAR 0 5
35241: PPUSH
35242: LD_VAR 0 4
35246: PPUSH
35247: LD_INT 3
35249: PPUSH
35250: CALL_OW 272
35254: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35255: LD_ADDR_VAR 0 8
35259: PUSH
35260: LD_VAR 0 6
35264: PPUSH
35265: LD_VAR 0 4
35269: PPUSH
35270: LD_INT 3
35272: PPUSH
35273: CALL_OW 273
35277: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35278: LD_VAR 0 7
35282: PPUSH
35283: LD_VAR 0 8
35287: PPUSH
35288: CALL_OW 488
35292: NOT
35293: IFFALSE 35297
// continue ;
35295: GO 35229
// if HexInfo ( _x , _y ) = 0 then
35297: LD_VAR 0 7
35301: PPUSH
35302: LD_VAR 0 8
35306: PPUSH
35307: CALL_OW 428
35311: PUSH
35312: LD_INT 0
35314: EQUAL
35315: IFFALSE 35340
// begin ComMoveXY ( unit , _x , _y ) ;
35317: LD_VAR 0 1
35321: PPUSH
35322: LD_VAR 0 7
35326: PPUSH
35327: LD_VAR 0 8
35331: PPUSH
35332: CALL_OW 111
// exit ;
35336: POP
35337: POP
35338: GO 35344
// end ; end ;
35340: GO 35229
35342: POP
35343: POP
// end ;
35344: LD_VAR 0 3
35348: RET
// export function ScanBase ( side , base_area ) ; begin
35349: LD_INT 0
35351: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35352: LD_ADDR_VAR 0 3
35356: PUSH
35357: LD_VAR 0 2
35361: PPUSH
35362: LD_INT 81
35364: PUSH
35365: LD_VAR 0 1
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PPUSH
35374: CALL_OW 70
35378: ST_TO_ADDR
// end ;
35379: LD_VAR 0 3
35383: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35384: LD_INT 0
35386: PPUSH
35387: PPUSH
35388: PPUSH
35389: PPUSH
// result := false ;
35390: LD_ADDR_VAR 0 2
35394: PUSH
35395: LD_INT 0
35397: ST_TO_ADDR
// side := GetSide ( unit ) ;
35398: LD_ADDR_VAR 0 3
35402: PUSH
35403: LD_VAR 0 1
35407: PPUSH
35408: CALL_OW 255
35412: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35413: LD_ADDR_VAR 0 4
35417: PUSH
35418: LD_VAR 0 1
35422: PPUSH
35423: CALL_OW 248
35427: ST_TO_ADDR
// case nat of 1 :
35428: LD_VAR 0 4
35432: PUSH
35433: LD_INT 1
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35441
35439: GO 35452
35441: POP
// tech := tech_lassight ; 2 :
35442: LD_ADDR_VAR 0 5
35446: PUSH
35447: LD_INT 12
35449: ST_TO_ADDR
35450: GO 35491
35452: LD_INT 2
35454: DOUBLE
35455: EQUAL
35456: IFTRUE 35460
35458: GO 35471
35460: POP
// tech := tech_mortar ; 3 :
35461: LD_ADDR_VAR 0 5
35465: PUSH
35466: LD_INT 41
35468: ST_TO_ADDR
35469: GO 35491
35471: LD_INT 3
35473: DOUBLE
35474: EQUAL
35475: IFTRUE 35479
35477: GO 35490
35479: POP
// tech := tech_bazooka ; end ;
35480: LD_ADDR_VAR 0 5
35484: PUSH
35485: LD_INT 44
35487: ST_TO_ADDR
35488: GO 35491
35490: POP
// if Researched ( side , tech ) then
35491: LD_VAR 0 3
35495: PPUSH
35496: LD_VAR 0 5
35500: PPUSH
35501: CALL_OW 325
35505: IFFALSE 35532
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35507: LD_ADDR_VAR 0 2
35511: PUSH
35512: LD_INT 5
35514: PUSH
35515: LD_INT 8
35517: PUSH
35518: LD_INT 9
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: PUSH
35526: LD_VAR 0 4
35530: ARRAY
35531: ST_TO_ADDR
// end ;
35532: LD_VAR 0 2
35536: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35537: LD_INT 0
35539: PPUSH
35540: PPUSH
35541: PPUSH
// if not mines then
35542: LD_VAR 0 2
35546: NOT
35547: IFFALSE 35551
// exit ;
35549: GO 35695
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35551: LD_ADDR_VAR 0 5
35555: PUSH
35556: LD_INT 81
35558: PUSH
35559: LD_VAR 0 1
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 3
35570: PUSH
35571: LD_INT 21
35573: PUSH
35574: LD_INT 3
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PPUSH
35589: CALL_OW 69
35593: ST_TO_ADDR
// for i in mines do
35594: LD_ADDR_VAR 0 4
35598: PUSH
35599: LD_VAR 0 2
35603: PUSH
35604: FOR_IN
35605: IFFALSE 35693
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35607: LD_VAR 0 4
35611: PUSH
35612: LD_INT 1
35614: ARRAY
35615: PPUSH
35616: LD_VAR 0 4
35620: PUSH
35621: LD_INT 2
35623: ARRAY
35624: PPUSH
35625: CALL_OW 458
35629: NOT
35630: IFFALSE 35634
// continue ;
35632: GO 35604
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35634: LD_VAR 0 4
35638: PUSH
35639: LD_INT 1
35641: ARRAY
35642: PPUSH
35643: LD_VAR 0 4
35647: PUSH
35648: LD_INT 2
35650: ARRAY
35651: PPUSH
35652: CALL_OW 428
35656: PUSH
35657: LD_VAR 0 5
35661: IN
35662: IFFALSE 35691
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35664: LD_VAR 0 4
35668: PUSH
35669: LD_INT 1
35671: ARRAY
35672: PPUSH
35673: LD_VAR 0 4
35677: PUSH
35678: LD_INT 2
35680: ARRAY
35681: PPUSH
35682: LD_VAR 0 1
35686: PPUSH
35687: CALL_OW 456
// end ;
35691: GO 35604
35693: POP
35694: POP
// end ;
35695: LD_VAR 0 3
35699: RET
// export function Count ( array ) ; var i ; begin
35700: LD_INT 0
35702: PPUSH
35703: PPUSH
// result := 0 ;
35704: LD_ADDR_VAR 0 2
35708: PUSH
35709: LD_INT 0
35711: ST_TO_ADDR
// for i in array do
35712: LD_ADDR_VAR 0 3
35716: PUSH
35717: LD_VAR 0 1
35721: PUSH
35722: FOR_IN
35723: IFFALSE 35747
// if i then
35725: LD_VAR 0 3
35729: IFFALSE 35745
// result := result + 1 ;
35731: LD_ADDR_VAR 0 2
35735: PUSH
35736: LD_VAR 0 2
35740: PUSH
35741: LD_INT 1
35743: PLUS
35744: ST_TO_ADDR
35745: GO 35722
35747: POP
35748: POP
// end ;
35749: LD_VAR 0 2
35753: RET
// export function IsEmpty ( building ) ; begin
35754: LD_INT 0
35756: PPUSH
// if not building then
35757: LD_VAR 0 1
35761: NOT
35762: IFFALSE 35766
// exit ;
35764: GO 35809
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35766: LD_ADDR_VAR 0 2
35770: PUSH
35771: LD_VAR 0 1
35775: PUSH
35776: LD_INT 22
35778: PUSH
35779: LD_VAR 0 1
35783: PPUSH
35784: CALL_OW 255
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 58
35795: PUSH
35796: EMPTY
35797: LIST
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PPUSH
35803: CALL_OW 69
35807: IN
35808: ST_TO_ADDR
// end ;
35809: LD_VAR 0 2
35813: RET
// export function IsNotFull ( building ) ; begin
35814: LD_INT 0
35816: PPUSH
// if not building then
35817: LD_VAR 0 1
35821: NOT
35822: IFFALSE 35826
// exit ;
35824: GO 35845
// result := UnitsInside ( building ) < 6 ;
35826: LD_ADDR_VAR 0 2
35830: PUSH
35831: LD_VAR 0 1
35835: PPUSH
35836: CALL_OW 313
35840: PUSH
35841: LD_INT 6
35843: LESS
35844: ST_TO_ADDR
// end ;
35845: LD_VAR 0 2
35849: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35850: LD_INT 0
35852: PPUSH
35853: PPUSH
35854: PPUSH
35855: PPUSH
// tmp := [ ] ;
35856: LD_ADDR_VAR 0 3
35860: PUSH
35861: EMPTY
35862: ST_TO_ADDR
// list := [ ] ;
35863: LD_ADDR_VAR 0 5
35867: PUSH
35868: EMPTY
35869: ST_TO_ADDR
// for i = 16 to 25 do
35870: LD_ADDR_VAR 0 4
35874: PUSH
35875: DOUBLE
35876: LD_INT 16
35878: DEC
35879: ST_TO_ADDR
35880: LD_INT 25
35882: PUSH
35883: FOR_TO
35884: IFFALSE 35957
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35886: LD_ADDR_VAR 0 3
35890: PUSH
35891: LD_VAR 0 3
35895: PUSH
35896: LD_INT 22
35898: PUSH
35899: LD_VAR 0 1
35903: PPUSH
35904: CALL_OW 255
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 91
35915: PUSH
35916: LD_VAR 0 1
35920: PUSH
35921: LD_INT 6
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 30
35931: PUSH
35932: LD_VAR 0 4
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: LIST
35945: PUSH
35946: EMPTY
35947: LIST
35948: PPUSH
35949: CALL_OW 69
35953: ADD
35954: ST_TO_ADDR
35955: GO 35883
35957: POP
35958: POP
// for i = 1 to tmp do
35959: LD_ADDR_VAR 0 4
35963: PUSH
35964: DOUBLE
35965: LD_INT 1
35967: DEC
35968: ST_TO_ADDR
35969: LD_VAR 0 3
35973: PUSH
35974: FOR_TO
35975: IFFALSE 36063
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35977: LD_ADDR_VAR 0 5
35981: PUSH
35982: LD_VAR 0 5
35986: PUSH
35987: LD_VAR 0 3
35991: PUSH
35992: LD_VAR 0 4
35996: ARRAY
35997: PPUSH
35998: CALL_OW 266
36002: PUSH
36003: LD_VAR 0 3
36007: PUSH
36008: LD_VAR 0 4
36012: ARRAY
36013: PPUSH
36014: CALL_OW 250
36018: PUSH
36019: LD_VAR 0 3
36023: PUSH
36024: LD_VAR 0 4
36028: ARRAY
36029: PPUSH
36030: CALL_OW 251
36034: PUSH
36035: LD_VAR 0 3
36039: PUSH
36040: LD_VAR 0 4
36044: ARRAY
36045: PPUSH
36046: CALL_OW 254
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: ADD
36060: ST_TO_ADDR
36061: GO 35974
36063: POP
36064: POP
// result := list ;
36065: LD_ADDR_VAR 0 2
36069: PUSH
36070: LD_VAR 0 5
36074: ST_TO_ADDR
// end ;
36075: LD_VAR 0 2
36079: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36080: LD_INT 0
36082: PPUSH
36083: PPUSH
36084: PPUSH
36085: PPUSH
36086: PPUSH
36087: PPUSH
36088: PPUSH
// if not factory then
36089: LD_VAR 0 1
36093: NOT
36094: IFFALSE 36098
// exit ;
36096: GO 36691
// if control = control_apeman then
36098: LD_VAR 0 4
36102: PUSH
36103: LD_INT 5
36105: EQUAL
36106: IFFALSE 36215
// begin tmp := UnitsInside ( factory ) ;
36108: LD_ADDR_VAR 0 8
36112: PUSH
36113: LD_VAR 0 1
36117: PPUSH
36118: CALL_OW 313
36122: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36123: LD_VAR 0 8
36127: PPUSH
36128: LD_INT 25
36130: PUSH
36131: LD_INT 12
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PPUSH
36138: CALL_OW 72
36142: NOT
36143: IFFALSE 36153
// control := control_manual ;
36145: LD_ADDR_VAR 0 4
36149: PUSH
36150: LD_INT 1
36152: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36153: LD_ADDR_VAR 0 8
36157: PUSH
36158: LD_VAR 0 1
36162: PPUSH
36163: CALL 35850 0 1
36167: ST_TO_ADDR
// if tmp then
36168: LD_VAR 0 8
36172: IFFALSE 36215
// begin for i in tmp do
36174: LD_ADDR_VAR 0 7
36178: PUSH
36179: LD_VAR 0 8
36183: PUSH
36184: FOR_IN
36185: IFFALSE 36213
// if i [ 1 ] = b_ext_radio then
36187: LD_VAR 0 7
36191: PUSH
36192: LD_INT 1
36194: ARRAY
36195: PUSH
36196: LD_INT 22
36198: EQUAL
36199: IFFALSE 36211
// begin control := control_remote ;
36201: LD_ADDR_VAR 0 4
36205: PUSH
36206: LD_INT 2
36208: ST_TO_ADDR
// break ;
36209: GO 36213
// end ;
36211: GO 36184
36213: POP
36214: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36215: LD_VAR 0 1
36219: PPUSH
36220: LD_VAR 0 2
36224: PPUSH
36225: LD_VAR 0 3
36229: PPUSH
36230: LD_VAR 0 4
36234: PPUSH
36235: LD_VAR 0 5
36239: PPUSH
36240: CALL_OW 448
36244: IFFALSE 36279
// begin result := [ chassis , engine , control , weapon ] ;
36246: LD_ADDR_VAR 0 6
36250: PUSH
36251: LD_VAR 0 2
36255: PUSH
36256: LD_VAR 0 3
36260: PUSH
36261: LD_VAR 0 4
36265: PUSH
36266: LD_VAR 0 5
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: ST_TO_ADDR
// exit ;
36277: GO 36691
// end ; _chassis := AvailableChassisList ( factory ) ;
36279: LD_ADDR_VAR 0 9
36283: PUSH
36284: LD_VAR 0 1
36288: PPUSH
36289: CALL_OW 475
36293: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36294: LD_ADDR_VAR 0 11
36298: PUSH
36299: LD_VAR 0 1
36303: PPUSH
36304: CALL_OW 476
36308: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36309: LD_ADDR_VAR 0 12
36313: PUSH
36314: LD_VAR 0 1
36318: PPUSH
36319: CALL_OW 477
36323: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36324: LD_ADDR_VAR 0 10
36328: PUSH
36329: LD_VAR 0 1
36333: PPUSH
36334: CALL_OW 478
36338: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36339: LD_VAR 0 9
36343: NOT
36344: PUSH
36345: LD_VAR 0 11
36349: NOT
36350: OR
36351: PUSH
36352: LD_VAR 0 12
36356: NOT
36357: OR
36358: PUSH
36359: LD_VAR 0 10
36363: NOT
36364: OR
36365: IFFALSE 36400
// begin result := [ chassis , engine , control , weapon ] ;
36367: LD_ADDR_VAR 0 6
36371: PUSH
36372: LD_VAR 0 2
36376: PUSH
36377: LD_VAR 0 3
36381: PUSH
36382: LD_VAR 0 4
36386: PUSH
36387: LD_VAR 0 5
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: ST_TO_ADDR
// exit ;
36398: GO 36691
// end ; if not chassis in _chassis then
36400: LD_VAR 0 2
36404: PUSH
36405: LD_VAR 0 9
36409: IN
36410: NOT
36411: IFFALSE 36437
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36413: LD_ADDR_VAR 0 2
36417: PUSH
36418: LD_VAR 0 9
36422: PUSH
36423: LD_INT 1
36425: PPUSH
36426: LD_VAR 0 9
36430: PPUSH
36431: CALL_OW 12
36435: ARRAY
36436: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36437: LD_VAR 0 2
36441: PPUSH
36442: LD_VAR 0 3
36446: PPUSH
36447: CALL 36696 0 2
36451: NOT
36452: IFFALSE 36511
// repeat engine := _engine [ 1 ] ;
36454: LD_ADDR_VAR 0 3
36458: PUSH
36459: LD_VAR 0 11
36463: PUSH
36464: LD_INT 1
36466: ARRAY
36467: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36468: LD_ADDR_VAR 0 11
36472: PUSH
36473: LD_VAR 0 11
36477: PPUSH
36478: LD_INT 1
36480: PPUSH
36481: CALL_OW 3
36485: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36486: LD_VAR 0 2
36490: PPUSH
36491: LD_VAR 0 3
36495: PPUSH
36496: CALL 36696 0 2
36500: PUSH
36501: LD_VAR 0 11
36505: PUSH
36506: EMPTY
36507: EQUAL
36508: OR
36509: IFFALSE 36454
// if not control in _control then
36511: LD_VAR 0 4
36515: PUSH
36516: LD_VAR 0 12
36520: IN
36521: NOT
36522: IFFALSE 36548
// control := _control [ rand ( 1 , _control ) ] ;
36524: LD_ADDR_VAR 0 4
36528: PUSH
36529: LD_VAR 0 12
36533: PUSH
36534: LD_INT 1
36536: PPUSH
36537: LD_VAR 0 12
36541: PPUSH
36542: CALL_OW 12
36546: ARRAY
36547: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36548: LD_VAR 0 2
36552: PPUSH
36553: LD_VAR 0 5
36557: PPUSH
36558: CALL 36916 0 2
36562: NOT
36563: IFFALSE 36622
// repeat weapon := _weapon [ 1 ] ;
36565: LD_ADDR_VAR 0 5
36569: PUSH
36570: LD_VAR 0 10
36574: PUSH
36575: LD_INT 1
36577: ARRAY
36578: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36579: LD_ADDR_VAR 0 10
36583: PUSH
36584: LD_VAR 0 10
36588: PPUSH
36589: LD_INT 1
36591: PPUSH
36592: CALL_OW 3
36596: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36597: LD_VAR 0 2
36601: PPUSH
36602: LD_VAR 0 5
36606: PPUSH
36607: CALL 36916 0 2
36611: PUSH
36612: LD_VAR 0 10
36616: PUSH
36617: EMPTY
36618: EQUAL
36619: OR
36620: IFFALSE 36565
// result := [ ] ;
36622: LD_ADDR_VAR 0 6
36626: PUSH
36627: EMPTY
36628: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36629: LD_VAR 0 1
36633: PPUSH
36634: LD_VAR 0 2
36638: PPUSH
36639: LD_VAR 0 3
36643: PPUSH
36644: LD_VAR 0 4
36648: PPUSH
36649: LD_VAR 0 5
36653: PPUSH
36654: CALL_OW 448
36658: IFFALSE 36691
// result := [ chassis , engine , control , weapon ] ;
36660: LD_ADDR_VAR 0 6
36664: PUSH
36665: LD_VAR 0 2
36669: PUSH
36670: LD_VAR 0 3
36674: PUSH
36675: LD_VAR 0 4
36679: PUSH
36680: LD_VAR 0 5
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: ST_TO_ADDR
// end ;
36691: LD_VAR 0 6
36695: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36696: LD_INT 0
36698: PPUSH
// if not chassis or not engine then
36699: LD_VAR 0 1
36703: NOT
36704: PUSH
36705: LD_VAR 0 2
36709: NOT
36710: OR
36711: IFFALSE 36715
// exit ;
36713: GO 36911
// case engine of engine_solar :
36715: LD_VAR 0 2
36719: PUSH
36720: LD_INT 2
36722: DOUBLE
36723: EQUAL
36724: IFTRUE 36728
36726: GO 36766
36728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36729: LD_ADDR_VAR 0 3
36733: PUSH
36734: LD_INT 11
36736: PUSH
36737: LD_INT 12
36739: PUSH
36740: LD_INT 13
36742: PUSH
36743: LD_INT 14
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: LD_INT 2
36751: PUSH
36752: LD_INT 3
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
36764: GO 36895
36766: LD_INT 1
36768: DOUBLE
36769: EQUAL
36770: IFTRUE 36774
36772: GO 36836
36774: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36775: LD_ADDR_VAR 0 3
36779: PUSH
36780: LD_INT 11
36782: PUSH
36783: LD_INT 12
36785: PUSH
36786: LD_INT 13
36788: PUSH
36789: LD_INT 14
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 2
36797: PUSH
36798: LD_INT 3
36800: PUSH
36801: LD_INT 4
36803: PUSH
36804: LD_INT 5
36806: PUSH
36807: LD_INT 21
36809: PUSH
36810: LD_INT 23
36812: PUSH
36813: LD_INT 22
36815: PUSH
36816: LD_INT 24
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: ST_TO_ADDR
36834: GO 36895
36836: LD_INT 3
36838: DOUBLE
36839: EQUAL
36840: IFTRUE 36844
36842: GO 36894
36844: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36845: LD_ADDR_VAR 0 3
36849: PUSH
36850: LD_INT 13
36852: PUSH
36853: LD_INT 14
36855: PUSH
36856: LD_INT 2
36858: PUSH
36859: LD_INT 3
36861: PUSH
36862: LD_INT 4
36864: PUSH
36865: LD_INT 5
36867: PUSH
36868: LD_INT 21
36870: PUSH
36871: LD_INT 22
36873: PUSH
36874: LD_INT 23
36876: PUSH
36877: LD_INT 24
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: ST_TO_ADDR
36892: GO 36895
36894: POP
// result := ( chassis in result ) ;
36895: LD_ADDR_VAR 0 3
36899: PUSH
36900: LD_VAR 0 1
36904: PUSH
36905: LD_VAR 0 3
36909: IN
36910: ST_TO_ADDR
// end ;
36911: LD_VAR 0 3
36915: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36916: LD_INT 0
36918: PPUSH
// if not chassis or not weapon then
36919: LD_VAR 0 1
36923: NOT
36924: PUSH
36925: LD_VAR 0 2
36929: NOT
36930: OR
36931: IFFALSE 36935
// exit ;
36933: GO 37997
// case weapon of us_machine_gun :
36935: LD_VAR 0 2
36939: PUSH
36940: LD_INT 2
36942: DOUBLE
36943: EQUAL
36944: IFTRUE 36948
36946: GO 36978
36948: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36949: LD_ADDR_VAR 0 3
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: LD_INT 3
36962: PUSH
36963: LD_INT 4
36965: PUSH
36966: LD_INT 5
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: ST_TO_ADDR
36976: GO 37981
36978: LD_INT 3
36980: DOUBLE
36981: EQUAL
36982: IFTRUE 36986
36984: GO 37016
36986: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36987: LD_ADDR_VAR 0 3
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: LD_INT 2
36997: PUSH
36998: LD_INT 3
37000: PUSH
37001: LD_INT 4
37003: PUSH
37004: LD_INT 5
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: ST_TO_ADDR
37014: GO 37981
37016: LD_INT 11
37018: DOUBLE
37019: EQUAL
37020: IFTRUE 37024
37022: GO 37054
37024: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37025: LD_ADDR_VAR 0 3
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: LD_INT 4
37041: PUSH
37042: LD_INT 5
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: ST_TO_ADDR
37052: GO 37981
37054: LD_INT 4
37056: DOUBLE
37057: EQUAL
37058: IFTRUE 37062
37060: GO 37088
37062: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37063: LD_ADDR_VAR 0 3
37067: PUSH
37068: LD_INT 2
37070: PUSH
37071: LD_INT 3
37073: PUSH
37074: LD_INT 4
37076: PUSH
37077: LD_INT 5
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: ST_TO_ADDR
37086: GO 37981
37088: LD_INT 5
37090: DOUBLE
37091: EQUAL
37092: IFTRUE 37096
37094: GO 37122
37096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37097: LD_ADDR_VAR 0 3
37101: PUSH
37102: LD_INT 2
37104: PUSH
37105: LD_INT 3
37107: PUSH
37108: LD_INT 4
37110: PUSH
37111: LD_INT 5
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: ST_TO_ADDR
37120: GO 37981
37122: LD_INT 9
37124: DOUBLE
37125: EQUAL
37126: IFTRUE 37130
37128: GO 37156
37130: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37131: LD_ADDR_VAR 0 3
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: LD_INT 3
37141: PUSH
37142: LD_INT 4
37144: PUSH
37145: LD_INT 5
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: ST_TO_ADDR
37154: GO 37981
37156: LD_INT 7
37158: DOUBLE
37159: EQUAL
37160: IFTRUE 37164
37162: GO 37190
37164: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37165: LD_ADDR_VAR 0 3
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: LD_INT 3
37175: PUSH
37176: LD_INT 4
37178: PUSH
37179: LD_INT 5
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: ST_TO_ADDR
37188: GO 37981
37190: LD_INT 12
37192: DOUBLE
37193: EQUAL
37194: IFTRUE 37198
37196: GO 37224
37198: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37199: LD_ADDR_VAR 0 3
37203: PUSH
37204: LD_INT 2
37206: PUSH
37207: LD_INT 3
37209: PUSH
37210: LD_INT 4
37212: PUSH
37213: LD_INT 5
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: ST_TO_ADDR
37222: GO 37981
37224: LD_INT 13
37226: DOUBLE
37227: EQUAL
37228: IFTRUE 37232
37230: GO 37258
37232: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37233: LD_ADDR_VAR 0 3
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: LD_INT 3
37243: PUSH
37244: LD_INT 4
37246: PUSH
37247: LD_INT 5
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: ST_TO_ADDR
37256: GO 37981
37258: LD_INT 14
37260: DOUBLE
37261: EQUAL
37262: IFTRUE 37266
37264: GO 37284
37266: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37267: LD_ADDR_VAR 0 3
37271: PUSH
37272: LD_INT 4
37274: PUSH
37275: LD_INT 5
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: ST_TO_ADDR
37282: GO 37981
37284: LD_INT 6
37286: DOUBLE
37287: EQUAL
37288: IFTRUE 37292
37290: GO 37310
37292: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37293: LD_ADDR_VAR 0 3
37297: PUSH
37298: LD_INT 4
37300: PUSH
37301: LD_INT 5
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: ST_TO_ADDR
37308: GO 37981
37310: LD_INT 10
37312: DOUBLE
37313: EQUAL
37314: IFTRUE 37318
37316: GO 37336
37318: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37319: LD_ADDR_VAR 0 3
37323: PUSH
37324: LD_INT 4
37326: PUSH
37327: LD_INT 5
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: ST_TO_ADDR
37334: GO 37981
37336: LD_INT 22
37338: DOUBLE
37339: EQUAL
37340: IFTRUE 37344
37342: GO 37370
37344: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37345: LD_ADDR_VAR 0 3
37349: PUSH
37350: LD_INT 11
37352: PUSH
37353: LD_INT 12
37355: PUSH
37356: LD_INT 13
37358: PUSH
37359: LD_INT 14
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: ST_TO_ADDR
37368: GO 37981
37370: LD_INT 23
37372: DOUBLE
37373: EQUAL
37374: IFTRUE 37378
37376: GO 37404
37378: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37379: LD_ADDR_VAR 0 3
37383: PUSH
37384: LD_INT 11
37386: PUSH
37387: LD_INT 12
37389: PUSH
37390: LD_INT 13
37392: PUSH
37393: LD_INT 14
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: ST_TO_ADDR
37402: GO 37981
37404: LD_INT 24
37406: DOUBLE
37407: EQUAL
37408: IFTRUE 37412
37410: GO 37438
37412: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37413: LD_ADDR_VAR 0 3
37417: PUSH
37418: LD_INT 11
37420: PUSH
37421: LD_INT 12
37423: PUSH
37424: LD_INT 13
37426: PUSH
37427: LD_INT 14
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: ST_TO_ADDR
37436: GO 37981
37438: LD_INT 30
37440: DOUBLE
37441: EQUAL
37442: IFTRUE 37446
37444: GO 37472
37446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37447: LD_ADDR_VAR 0 3
37451: PUSH
37452: LD_INT 11
37454: PUSH
37455: LD_INT 12
37457: PUSH
37458: LD_INT 13
37460: PUSH
37461: LD_INT 14
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: ST_TO_ADDR
37470: GO 37981
37472: LD_INT 25
37474: DOUBLE
37475: EQUAL
37476: IFTRUE 37480
37478: GO 37498
37480: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37481: LD_ADDR_VAR 0 3
37485: PUSH
37486: LD_INT 13
37488: PUSH
37489: LD_INT 14
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: ST_TO_ADDR
37496: GO 37981
37498: LD_INT 27
37500: DOUBLE
37501: EQUAL
37502: IFTRUE 37506
37504: GO 37524
37506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37507: LD_ADDR_VAR 0 3
37511: PUSH
37512: LD_INT 13
37514: PUSH
37515: LD_INT 14
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: ST_TO_ADDR
37522: GO 37981
37524: LD_EXP 41
37528: DOUBLE
37529: EQUAL
37530: IFTRUE 37534
37532: GO 37560
37534: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37535: LD_ADDR_VAR 0 3
37539: PUSH
37540: LD_INT 11
37542: PUSH
37543: LD_INT 12
37545: PUSH
37546: LD_INT 13
37548: PUSH
37549: LD_INT 14
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: ST_TO_ADDR
37558: GO 37981
37560: LD_INT 28
37562: DOUBLE
37563: EQUAL
37564: IFTRUE 37568
37566: GO 37586
37568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37569: LD_ADDR_VAR 0 3
37573: PUSH
37574: LD_INT 13
37576: PUSH
37577: LD_INT 14
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: ST_TO_ADDR
37584: GO 37981
37586: LD_INT 29
37588: DOUBLE
37589: EQUAL
37590: IFTRUE 37594
37592: GO 37612
37594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37595: LD_ADDR_VAR 0 3
37599: PUSH
37600: LD_INT 13
37602: PUSH
37603: LD_INT 14
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: ST_TO_ADDR
37610: GO 37981
37612: LD_INT 31
37614: DOUBLE
37615: EQUAL
37616: IFTRUE 37620
37618: GO 37638
37620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37621: LD_ADDR_VAR 0 3
37625: PUSH
37626: LD_INT 13
37628: PUSH
37629: LD_INT 14
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: ST_TO_ADDR
37636: GO 37981
37638: LD_INT 26
37640: DOUBLE
37641: EQUAL
37642: IFTRUE 37646
37644: GO 37664
37646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37647: LD_ADDR_VAR 0 3
37651: PUSH
37652: LD_INT 13
37654: PUSH
37655: LD_INT 14
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: ST_TO_ADDR
37662: GO 37981
37664: LD_INT 42
37666: DOUBLE
37667: EQUAL
37668: IFTRUE 37672
37670: GO 37698
37672: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37673: LD_ADDR_VAR 0 3
37677: PUSH
37678: LD_INT 21
37680: PUSH
37681: LD_INT 22
37683: PUSH
37684: LD_INT 23
37686: PUSH
37687: LD_INT 24
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: ST_TO_ADDR
37696: GO 37981
37698: LD_INT 43
37700: DOUBLE
37701: EQUAL
37702: IFTRUE 37706
37704: GO 37732
37706: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37707: LD_ADDR_VAR 0 3
37711: PUSH
37712: LD_INT 21
37714: PUSH
37715: LD_INT 22
37717: PUSH
37718: LD_INT 23
37720: PUSH
37721: LD_INT 24
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: ST_TO_ADDR
37730: GO 37981
37732: LD_INT 44
37734: DOUBLE
37735: EQUAL
37736: IFTRUE 37740
37738: GO 37766
37740: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37741: LD_ADDR_VAR 0 3
37745: PUSH
37746: LD_INT 21
37748: PUSH
37749: LD_INT 22
37751: PUSH
37752: LD_INT 23
37754: PUSH
37755: LD_INT 24
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: ST_TO_ADDR
37764: GO 37981
37766: LD_INT 45
37768: DOUBLE
37769: EQUAL
37770: IFTRUE 37774
37772: GO 37800
37774: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37775: LD_ADDR_VAR 0 3
37779: PUSH
37780: LD_INT 21
37782: PUSH
37783: LD_INT 22
37785: PUSH
37786: LD_INT 23
37788: PUSH
37789: LD_INT 24
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: ST_TO_ADDR
37798: GO 37981
37800: LD_INT 49
37802: DOUBLE
37803: EQUAL
37804: IFTRUE 37808
37806: GO 37834
37808: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37809: LD_ADDR_VAR 0 3
37813: PUSH
37814: LD_INT 21
37816: PUSH
37817: LD_INT 22
37819: PUSH
37820: LD_INT 23
37822: PUSH
37823: LD_INT 24
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: ST_TO_ADDR
37832: GO 37981
37834: LD_INT 51
37836: DOUBLE
37837: EQUAL
37838: IFTRUE 37842
37840: GO 37868
37842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37843: LD_ADDR_VAR 0 3
37847: PUSH
37848: LD_INT 21
37850: PUSH
37851: LD_INT 22
37853: PUSH
37854: LD_INT 23
37856: PUSH
37857: LD_INT 24
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: ST_TO_ADDR
37866: GO 37981
37868: LD_INT 52
37870: DOUBLE
37871: EQUAL
37872: IFTRUE 37876
37874: GO 37902
37876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37877: LD_ADDR_VAR 0 3
37881: PUSH
37882: LD_INT 21
37884: PUSH
37885: LD_INT 22
37887: PUSH
37888: LD_INT 23
37890: PUSH
37891: LD_INT 24
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: ST_TO_ADDR
37900: GO 37981
37902: LD_INT 53
37904: DOUBLE
37905: EQUAL
37906: IFTRUE 37910
37908: GO 37928
37910: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37911: LD_ADDR_VAR 0 3
37915: PUSH
37916: LD_INT 23
37918: PUSH
37919: LD_INT 24
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: ST_TO_ADDR
37926: GO 37981
37928: LD_INT 46
37930: DOUBLE
37931: EQUAL
37932: IFTRUE 37936
37934: GO 37954
37936: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37937: LD_ADDR_VAR 0 3
37941: PUSH
37942: LD_INT 23
37944: PUSH
37945: LD_INT 24
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: ST_TO_ADDR
37952: GO 37981
37954: LD_INT 47
37956: DOUBLE
37957: EQUAL
37958: IFTRUE 37962
37960: GO 37980
37962: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37963: LD_ADDR_VAR 0 3
37967: PUSH
37968: LD_INT 23
37970: PUSH
37971: LD_INT 24
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: ST_TO_ADDR
37978: GO 37981
37980: POP
// result := ( chassis in result ) ;
37981: LD_ADDR_VAR 0 3
37985: PUSH
37986: LD_VAR 0 1
37990: PUSH
37991: LD_VAR 0 3
37995: IN
37996: ST_TO_ADDR
// end ;
37997: LD_VAR 0 3
38001: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38002: LD_INT 0
38004: PPUSH
38005: PPUSH
38006: PPUSH
38007: PPUSH
38008: PPUSH
38009: PPUSH
38010: PPUSH
// result := array ;
38011: LD_ADDR_VAR 0 5
38015: PUSH
38016: LD_VAR 0 1
38020: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38021: LD_VAR 0 1
38025: NOT
38026: PUSH
38027: LD_VAR 0 2
38031: NOT
38032: OR
38033: PUSH
38034: LD_VAR 0 3
38038: NOT
38039: OR
38040: PUSH
38041: LD_VAR 0 2
38045: PUSH
38046: LD_VAR 0 1
38050: GREATER
38051: OR
38052: PUSH
38053: LD_VAR 0 3
38057: PUSH
38058: LD_VAR 0 1
38062: GREATER
38063: OR
38064: IFFALSE 38068
// exit ;
38066: GO 38364
// if direction then
38068: LD_VAR 0 4
38072: IFFALSE 38136
// begin d := 1 ;
38074: LD_ADDR_VAR 0 9
38078: PUSH
38079: LD_INT 1
38081: ST_TO_ADDR
// if i_from > i_to then
38082: LD_VAR 0 2
38086: PUSH
38087: LD_VAR 0 3
38091: GREATER
38092: IFFALSE 38118
// length := ( array - i_from ) + i_to else
38094: LD_ADDR_VAR 0 11
38098: PUSH
38099: LD_VAR 0 1
38103: PUSH
38104: LD_VAR 0 2
38108: MINUS
38109: PUSH
38110: LD_VAR 0 3
38114: PLUS
38115: ST_TO_ADDR
38116: GO 38134
// length := i_to - i_from ;
38118: LD_ADDR_VAR 0 11
38122: PUSH
38123: LD_VAR 0 3
38127: PUSH
38128: LD_VAR 0 2
38132: MINUS
38133: ST_TO_ADDR
// end else
38134: GO 38197
// begin d := - 1 ;
38136: LD_ADDR_VAR 0 9
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: ST_TO_ADDR
// if i_from > i_to then
38145: LD_VAR 0 2
38149: PUSH
38150: LD_VAR 0 3
38154: GREATER
38155: IFFALSE 38175
// length := i_from - i_to else
38157: LD_ADDR_VAR 0 11
38161: PUSH
38162: LD_VAR 0 2
38166: PUSH
38167: LD_VAR 0 3
38171: MINUS
38172: ST_TO_ADDR
38173: GO 38197
// length := ( array - i_to ) + i_from ;
38175: LD_ADDR_VAR 0 11
38179: PUSH
38180: LD_VAR 0 1
38184: PUSH
38185: LD_VAR 0 3
38189: MINUS
38190: PUSH
38191: LD_VAR 0 2
38195: PLUS
38196: ST_TO_ADDR
// end ; if not length then
38197: LD_VAR 0 11
38201: NOT
38202: IFFALSE 38206
// exit ;
38204: GO 38364
// tmp := array ;
38206: LD_ADDR_VAR 0 10
38210: PUSH
38211: LD_VAR 0 1
38215: ST_TO_ADDR
// for i = 1 to length do
38216: LD_ADDR_VAR 0 6
38220: PUSH
38221: DOUBLE
38222: LD_INT 1
38224: DEC
38225: ST_TO_ADDR
38226: LD_VAR 0 11
38230: PUSH
38231: FOR_TO
38232: IFFALSE 38352
// begin for j = 1 to array do
38234: LD_ADDR_VAR 0 7
38238: PUSH
38239: DOUBLE
38240: LD_INT 1
38242: DEC
38243: ST_TO_ADDR
38244: LD_VAR 0 1
38248: PUSH
38249: FOR_TO
38250: IFFALSE 38338
// begin k := j + d ;
38252: LD_ADDR_VAR 0 8
38256: PUSH
38257: LD_VAR 0 7
38261: PUSH
38262: LD_VAR 0 9
38266: PLUS
38267: ST_TO_ADDR
// if k > array then
38268: LD_VAR 0 8
38272: PUSH
38273: LD_VAR 0 1
38277: GREATER
38278: IFFALSE 38288
// k := 1 ;
38280: LD_ADDR_VAR 0 8
38284: PUSH
38285: LD_INT 1
38287: ST_TO_ADDR
// if not k then
38288: LD_VAR 0 8
38292: NOT
38293: IFFALSE 38305
// k := array ;
38295: LD_ADDR_VAR 0 8
38299: PUSH
38300: LD_VAR 0 1
38304: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38305: LD_ADDR_VAR 0 10
38309: PUSH
38310: LD_VAR 0 10
38314: PPUSH
38315: LD_VAR 0 8
38319: PPUSH
38320: LD_VAR 0 1
38324: PUSH
38325: LD_VAR 0 7
38329: ARRAY
38330: PPUSH
38331: CALL_OW 1
38335: ST_TO_ADDR
// end ;
38336: GO 38249
38338: POP
38339: POP
// array := tmp ;
38340: LD_ADDR_VAR 0 1
38344: PUSH
38345: LD_VAR 0 10
38349: ST_TO_ADDR
// end ;
38350: GO 38231
38352: POP
38353: POP
// result := array ;
38354: LD_ADDR_VAR 0 5
38358: PUSH
38359: LD_VAR 0 1
38363: ST_TO_ADDR
// end ;
38364: LD_VAR 0 5
38368: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38369: LD_INT 0
38371: PPUSH
38372: PPUSH
// result := 0 ;
38373: LD_ADDR_VAR 0 3
38377: PUSH
38378: LD_INT 0
38380: ST_TO_ADDR
// if not array or not value in array then
38381: LD_VAR 0 1
38385: NOT
38386: PUSH
38387: LD_VAR 0 2
38391: PUSH
38392: LD_VAR 0 1
38396: IN
38397: NOT
38398: OR
38399: IFFALSE 38403
// exit ;
38401: GO 38457
// for i = 1 to array do
38403: LD_ADDR_VAR 0 4
38407: PUSH
38408: DOUBLE
38409: LD_INT 1
38411: DEC
38412: ST_TO_ADDR
38413: LD_VAR 0 1
38417: PUSH
38418: FOR_TO
38419: IFFALSE 38455
// if value = array [ i ] then
38421: LD_VAR 0 2
38425: PUSH
38426: LD_VAR 0 1
38430: PUSH
38431: LD_VAR 0 4
38435: ARRAY
38436: EQUAL
38437: IFFALSE 38453
// begin result := i ;
38439: LD_ADDR_VAR 0 3
38443: PUSH
38444: LD_VAR 0 4
38448: ST_TO_ADDR
// exit ;
38449: POP
38450: POP
38451: GO 38457
// end ;
38453: GO 38418
38455: POP
38456: POP
// end ;
38457: LD_VAR 0 3
38461: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38462: LD_INT 0
38464: PPUSH
// vc_chassis := chassis ;
38465: LD_ADDR_OWVAR 37
38469: PUSH
38470: LD_VAR 0 1
38474: ST_TO_ADDR
// vc_engine := engine ;
38475: LD_ADDR_OWVAR 39
38479: PUSH
38480: LD_VAR 0 2
38484: ST_TO_ADDR
// vc_control := control ;
38485: LD_ADDR_OWVAR 38
38489: PUSH
38490: LD_VAR 0 3
38494: ST_TO_ADDR
// vc_weapon := weapon ;
38495: LD_ADDR_OWVAR 40
38499: PUSH
38500: LD_VAR 0 4
38504: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38505: LD_ADDR_OWVAR 41
38509: PUSH
38510: LD_VAR 0 5
38514: ST_TO_ADDR
// end ;
38515: LD_VAR 0 6
38519: RET
// export function WantPlant ( unit ) ; var task ; begin
38520: LD_INT 0
38522: PPUSH
38523: PPUSH
// result := false ;
38524: LD_ADDR_VAR 0 2
38528: PUSH
38529: LD_INT 0
38531: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38532: LD_ADDR_VAR 0 3
38536: PUSH
38537: LD_VAR 0 1
38541: PPUSH
38542: CALL_OW 437
38546: ST_TO_ADDR
// if task then
38547: LD_VAR 0 3
38551: IFFALSE 38579
// if task [ 1 ] [ 1 ] = p then
38553: LD_VAR 0 3
38557: PUSH
38558: LD_INT 1
38560: ARRAY
38561: PUSH
38562: LD_INT 1
38564: ARRAY
38565: PUSH
38566: LD_STRING p
38568: EQUAL
38569: IFFALSE 38579
// result := true ;
38571: LD_ADDR_VAR 0 2
38575: PUSH
38576: LD_INT 1
38578: ST_TO_ADDR
// end ;
38579: LD_VAR 0 2
38583: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38584: LD_INT 0
38586: PPUSH
38587: PPUSH
38588: PPUSH
38589: PPUSH
// if pos < 1 then
38590: LD_VAR 0 2
38594: PUSH
38595: LD_INT 1
38597: LESS
38598: IFFALSE 38602
// exit ;
38600: GO 38905
// if pos = 1 then
38602: LD_VAR 0 2
38606: PUSH
38607: LD_INT 1
38609: EQUAL
38610: IFFALSE 38643
// result := Replace ( arr , pos [ 1 ] , value ) else
38612: LD_ADDR_VAR 0 4
38616: PUSH
38617: LD_VAR 0 1
38621: PPUSH
38622: LD_VAR 0 2
38626: PUSH
38627: LD_INT 1
38629: ARRAY
38630: PPUSH
38631: LD_VAR 0 3
38635: PPUSH
38636: CALL_OW 1
38640: ST_TO_ADDR
38641: GO 38905
// begin tmp := arr ;
38643: LD_ADDR_VAR 0 6
38647: PUSH
38648: LD_VAR 0 1
38652: ST_TO_ADDR
// s_arr := [ tmp ] ;
38653: LD_ADDR_VAR 0 7
38657: PUSH
38658: LD_VAR 0 6
38662: PUSH
38663: EMPTY
38664: LIST
38665: ST_TO_ADDR
// for i = 1 to pos - 1 do
38666: LD_ADDR_VAR 0 5
38670: PUSH
38671: DOUBLE
38672: LD_INT 1
38674: DEC
38675: ST_TO_ADDR
38676: LD_VAR 0 2
38680: PUSH
38681: LD_INT 1
38683: MINUS
38684: PUSH
38685: FOR_TO
38686: IFFALSE 38731
// begin tmp := tmp [ pos [ i ] ] ;
38688: LD_ADDR_VAR 0 6
38692: PUSH
38693: LD_VAR 0 6
38697: PUSH
38698: LD_VAR 0 2
38702: PUSH
38703: LD_VAR 0 5
38707: ARRAY
38708: ARRAY
38709: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38710: LD_ADDR_VAR 0 7
38714: PUSH
38715: LD_VAR 0 7
38719: PUSH
38720: LD_VAR 0 6
38724: PUSH
38725: EMPTY
38726: LIST
38727: ADD
38728: ST_TO_ADDR
// end ;
38729: GO 38685
38731: POP
38732: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38733: LD_ADDR_VAR 0 6
38737: PUSH
38738: LD_VAR 0 6
38742: PPUSH
38743: LD_VAR 0 2
38747: PUSH
38748: LD_VAR 0 2
38752: ARRAY
38753: PPUSH
38754: LD_VAR 0 3
38758: PPUSH
38759: CALL_OW 1
38763: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38764: LD_ADDR_VAR 0 7
38768: PUSH
38769: LD_VAR 0 7
38773: PPUSH
38774: LD_VAR 0 7
38778: PPUSH
38779: LD_VAR 0 6
38783: PPUSH
38784: CALL_OW 1
38788: ST_TO_ADDR
// for i = s_arr downto 2 do
38789: LD_ADDR_VAR 0 5
38793: PUSH
38794: DOUBLE
38795: LD_VAR 0 7
38799: INC
38800: ST_TO_ADDR
38801: LD_INT 2
38803: PUSH
38804: FOR_DOWNTO
38805: IFFALSE 38889
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38807: LD_ADDR_VAR 0 6
38811: PUSH
38812: LD_VAR 0 7
38816: PUSH
38817: LD_VAR 0 5
38821: PUSH
38822: LD_INT 1
38824: MINUS
38825: ARRAY
38826: PPUSH
38827: LD_VAR 0 2
38831: PUSH
38832: LD_VAR 0 5
38836: PUSH
38837: LD_INT 1
38839: MINUS
38840: ARRAY
38841: PPUSH
38842: LD_VAR 0 7
38846: PUSH
38847: LD_VAR 0 5
38851: ARRAY
38852: PPUSH
38853: CALL_OW 1
38857: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38858: LD_ADDR_VAR 0 7
38862: PUSH
38863: LD_VAR 0 7
38867: PPUSH
38868: LD_VAR 0 5
38872: PUSH
38873: LD_INT 1
38875: MINUS
38876: PPUSH
38877: LD_VAR 0 6
38881: PPUSH
38882: CALL_OW 1
38886: ST_TO_ADDR
// end ;
38887: GO 38804
38889: POP
38890: POP
// result := s_arr [ 1 ] ;
38891: LD_ADDR_VAR 0 4
38895: PUSH
38896: LD_VAR 0 7
38900: PUSH
38901: LD_INT 1
38903: ARRAY
38904: ST_TO_ADDR
// end ; end ;
38905: LD_VAR 0 4
38909: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38910: LD_INT 0
38912: PPUSH
38913: PPUSH
// if not list then
38914: LD_VAR 0 1
38918: NOT
38919: IFFALSE 38923
// exit ;
38921: GO 39014
// i := list [ pos1 ] ;
38923: LD_ADDR_VAR 0 5
38927: PUSH
38928: LD_VAR 0 1
38932: PUSH
38933: LD_VAR 0 2
38937: ARRAY
38938: ST_TO_ADDR
// if not i then
38939: LD_VAR 0 5
38943: NOT
38944: IFFALSE 38948
// exit ;
38946: GO 39014
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38948: LD_ADDR_VAR 0 1
38952: PUSH
38953: LD_VAR 0 1
38957: PPUSH
38958: LD_VAR 0 2
38962: PPUSH
38963: LD_VAR 0 1
38967: PUSH
38968: LD_VAR 0 3
38972: ARRAY
38973: PPUSH
38974: CALL_OW 1
38978: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38979: LD_ADDR_VAR 0 1
38983: PUSH
38984: LD_VAR 0 1
38988: PPUSH
38989: LD_VAR 0 3
38993: PPUSH
38994: LD_VAR 0 5
38998: PPUSH
38999: CALL_OW 1
39003: ST_TO_ADDR
// result := list ;
39004: LD_ADDR_VAR 0 4
39008: PUSH
39009: LD_VAR 0 1
39013: ST_TO_ADDR
// end ;
39014: LD_VAR 0 4
39018: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39019: LD_INT 0
39021: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39022: LD_ADDR_VAR 0 5
39026: PUSH
39027: LD_VAR 0 1
39031: PPUSH
39032: CALL_OW 250
39036: PPUSH
39037: LD_VAR 0 1
39041: PPUSH
39042: CALL_OW 251
39046: PPUSH
39047: LD_VAR 0 2
39051: PPUSH
39052: LD_VAR 0 3
39056: PPUSH
39057: LD_VAR 0 4
39061: PPUSH
39062: CALL 39072 0 5
39066: ST_TO_ADDR
// end ;
39067: LD_VAR 0 5
39071: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39072: LD_INT 0
39074: PPUSH
39075: PPUSH
39076: PPUSH
39077: PPUSH
// if not list then
39078: LD_VAR 0 3
39082: NOT
39083: IFFALSE 39087
// exit ;
39085: GO 39475
// result := [ ] ;
39087: LD_ADDR_VAR 0 6
39091: PUSH
39092: EMPTY
39093: ST_TO_ADDR
// for i in list do
39094: LD_ADDR_VAR 0 7
39098: PUSH
39099: LD_VAR 0 3
39103: PUSH
39104: FOR_IN
39105: IFFALSE 39307
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39107: LD_ADDR_VAR 0 9
39111: PUSH
39112: LD_VAR 0 7
39116: PPUSH
39117: LD_VAR 0 1
39121: PPUSH
39122: LD_VAR 0 2
39126: PPUSH
39127: CALL_OW 297
39131: ST_TO_ADDR
// if not result then
39132: LD_VAR 0 6
39136: NOT
39137: IFFALSE 39163
// result := [ [ i , tmp ] ] else
39139: LD_ADDR_VAR 0 6
39143: PUSH
39144: LD_VAR 0 7
39148: PUSH
39149: LD_VAR 0 9
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: EMPTY
39159: LIST
39160: ST_TO_ADDR
39161: GO 39305
// begin if result [ result ] [ 2 ] < tmp then
39163: LD_VAR 0 6
39167: PUSH
39168: LD_VAR 0 6
39172: ARRAY
39173: PUSH
39174: LD_INT 2
39176: ARRAY
39177: PUSH
39178: LD_VAR 0 9
39182: LESS
39183: IFFALSE 39225
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39185: LD_ADDR_VAR 0 6
39189: PUSH
39190: LD_VAR 0 6
39194: PPUSH
39195: LD_VAR 0 6
39199: PUSH
39200: LD_INT 1
39202: PLUS
39203: PPUSH
39204: LD_VAR 0 7
39208: PUSH
39209: LD_VAR 0 9
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PPUSH
39218: CALL_OW 2
39222: ST_TO_ADDR
39223: GO 39305
// for j = 1 to result do
39225: LD_ADDR_VAR 0 8
39229: PUSH
39230: DOUBLE
39231: LD_INT 1
39233: DEC
39234: ST_TO_ADDR
39235: LD_VAR 0 6
39239: PUSH
39240: FOR_TO
39241: IFFALSE 39303
// begin if tmp < result [ j ] [ 2 ] then
39243: LD_VAR 0 9
39247: PUSH
39248: LD_VAR 0 6
39252: PUSH
39253: LD_VAR 0 8
39257: ARRAY
39258: PUSH
39259: LD_INT 2
39261: ARRAY
39262: LESS
39263: IFFALSE 39301
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39265: LD_ADDR_VAR 0 6
39269: PUSH
39270: LD_VAR 0 6
39274: PPUSH
39275: LD_VAR 0 8
39279: PPUSH
39280: LD_VAR 0 7
39284: PUSH
39285: LD_VAR 0 9
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PPUSH
39294: CALL_OW 2
39298: ST_TO_ADDR
// break ;
39299: GO 39303
// end ; end ;
39301: GO 39240
39303: POP
39304: POP
// end ; end ;
39305: GO 39104
39307: POP
39308: POP
// if result and not asc then
39309: LD_VAR 0 6
39313: PUSH
39314: LD_VAR 0 4
39318: NOT
39319: AND
39320: IFFALSE 39395
// begin tmp := result ;
39322: LD_ADDR_VAR 0 9
39326: PUSH
39327: LD_VAR 0 6
39331: ST_TO_ADDR
// for i = tmp downto 1 do
39332: LD_ADDR_VAR 0 7
39336: PUSH
39337: DOUBLE
39338: LD_VAR 0 9
39342: INC
39343: ST_TO_ADDR
39344: LD_INT 1
39346: PUSH
39347: FOR_DOWNTO
39348: IFFALSE 39393
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39350: LD_ADDR_VAR 0 6
39354: PUSH
39355: LD_VAR 0 6
39359: PPUSH
39360: LD_VAR 0 9
39364: PUSH
39365: LD_VAR 0 7
39369: MINUS
39370: PUSH
39371: LD_INT 1
39373: PLUS
39374: PPUSH
39375: LD_VAR 0 9
39379: PUSH
39380: LD_VAR 0 7
39384: ARRAY
39385: PPUSH
39386: CALL_OW 1
39390: ST_TO_ADDR
39391: GO 39347
39393: POP
39394: POP
// end ; tmp := [ ] ;
39395: LD_ADDR_VAR 0 9
39399: PUSH
39400: EMPTY
39401: ST_TO_ADDR
// if mode then
39402: LD_VAR 0 5
39406: IFFALSE 39475
// begin for i = 1 to result do
39408: LD_ADDR_VAR 0 7
39412: PUSH
39413: DOUBLE
39414: LD_INT 1
39416: DEC
39417: ST_TO_ADDR
39418: LD_VAR 0 6
39422: PUSH
39423: FOR_TO
39424: IFFALSE 39463
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39426: LD_ADDR_VAR 0 9
39430: PUSH
39431: LD_VAR 0 9
39435: PPUSH
39436: LD_VAR 0 7
39440: PPUSH
39441: LD_VAR 0 6
39445: PUSH
39446: LD_VAR 0 7
39450: ARRAY
39451: PUSH
39452: LD_INT 1
39454: ARRAY
39455: PPUSH
39456: CALL_OW 1
39460: ST_TO_ADDR
39461: GO 39423
39463: POP
39464: POP
// result := tmp ;
39465: LD_ADDR_VAR 0 6
39469: PUSH
39470: LD_VAR 0 9
39474: ST_TO_ADDR
// end ; end ;
39475: LD_VAR 0 6
39479: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39480: LD_INT 0
39482: PPUSH
39483: PPUSH
39484: PPUSH
39485: PPUSH
39486: PPUSH
39487: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39488: LD_ADDR_VAR 0 5
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: EMPTY
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: ST_TO_ADDR
// if not x or not y then
39510: LD_VAR 0 2
39514: NOT
39515: PUSH
39516: LD_VAR 0 3
39520: NOT
39521: OR
39522: IFFALSE 39526
// exit ;
39524: GO 41178
// if not range then
39526: LD_VAR 0 4
39530: NOT
39531: IFFALSE 39541
// range := 10 ;
39533: LD_ADDR_VAR 0 4
39537: PUSH
39538: LD_INT 10
39540: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39541: LD_ADDR_VAR 0 8
39545: PUSH
39546: LD_INT 81
39548: PUSH
39549: LD_VAR 0 1
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 92
39560: PUSH
39561: LD_VAR 0 2
39565: PUSH
39566: LD_VAR 0 3
39570: PUSH
39571: LD_VAR 0 4
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 3
39584: PUSH
39585: LD_INT 21
39587: PUSH
39588: LD_INT 3
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: PPUSH
39604: CALL_OW 69
39608: ST_TO_ADDR
// if not tmp then
39609: LD_VAR 0 8
39613: NOT
39614: IFFALSE 39618
// exit ;
39616: GO 41178
// for i in tmp do
39618: LD_ADDR_VAR 0 6
39622: PUSH
39623: LD_VAR 0 8
39627: PUSH
39628: FOR_IN
39629: IFFALSE 41153
// begin points := [ 0 , 0 , 0 ] ;
39631: LD_ADDR_VAR 0 9
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: LIST
39649: ST_TO_ADDR
// bpoints := 1 ;
39650: LD_ADDR_VAR 0 10
39654: PUSH
39655: LD_INT 1
39657: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39658: LD_VAR 0 6
39662: PPUSH
39663: CALL_OW 247
39667: PUSH
39668: LD_INT 1
39670: DOUBLE
39671: EQUAL
39672: IFTRUE 39676
39674: GO 40254
39676: POP
// begin if GetClass ( i ) = 1 then
39677: LD_VAR 0 6
39681: PPUSH
39682: CALL_OW 257
39686: PUSH
39687: LD_INT 1
39689: EQUAL
39690: IFFALSE 39711
// points := [ 10 , 5 , 3 ] ;
39692: LD_ADDR_VAR 0 9
39696: PUSH
39697: LD_INT 10
39699: PUSH
39700: LD_INT 5
39702: PUSH
39703: LD_INT 3
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: LIST
39710: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39711: LD_VAR 0 6
39715: PPUSH
39716: CALL_OW 257
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: LD_INT 4
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: IN
39735: IFFALSE 39756
// points := [ 3 , 2 , 1 ] ;
39737: LD_ADDR_VAR 0 9
39741: PUSH
39742: LD_INT 3
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: LIST
39755: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39756: LD_VAR 0 6
39760: PPUSH
39761: CALL_OW 257
39765: PUSH
39766: LD_INT 5
39768: EQUAL
39769: IFFALSE 39790
// points := [ 130 , 5 , 2 ] ;
39771: LD_ADDR_VAR 0 9
39775: PUSH
39776: LD_INT 130
39778: PUSH
39779: LD_INT 5
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39790: LD_VAR 0 6
39794: PPUSH
39795: CALL_OW 257
39799: PUSH
39800: LD_INT 8
39802: EQUAL
39803: IFFALSE 39824
// points := [ 35 , 35 , 30 ] ;
39805: LD_ADDR_VAR 0 9
39809: PUSH
39810: LD_INT 35
39812: PUSH
39813: LD_INT 35
39815: PUSH
39816: LD_INT 30
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: LIST
39823: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39824: LD_VAR 0 6
39828: PPUSH
39829: CALL_OW 257
39833: PUSH
39834: LD_INT 9
39836: EQUAL
39837: IFFALSE 39858
// points := [ 20 , 55 , 40 ] ;
39839: LD_ADDR_VAR 0 9
39843: PUSH
39844: LD_INT 20
39846: PUSH
39847: LD_INT 55
39849: PUSH
39850: LD_INT 40
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: LIST
39857: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39858: LD_VAR 0 6
39862: PPUSH
39863: CALL_OW 257
39867: PUSH
39868: LD_INT 12
39870: PUSH
39871: LD_INT 16
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: IN
39878: IFFALSE 39899
// points := [ 5 , 3 , 2 ] ;
39880: LD_ADDR_VAR 0 9
39884: PUSH
39885: LD_INT 5
39887: PUSH
39888: LD_INT 3
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: LIST
39898: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39899: LD_VAR 0 6
39903: PPUSH
39904: CALL_OW 257
39908: PUSH
39909: LD_INT 17
39911: EQUAL
39912: IFFALSE 39933
// points := [ 100 , 50 , 75 ] ;
39914: LD_ADDR_VAR 0 9
39918: PUSH
39919: LD_INT 100
39921: PUSH
39922: LD_INT 50
39924: PUSH
39925: LD_INT 75
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39933: LD_VAR 0 6
39937: PPUSH
39938: CALL_OW 257
39942: PUSH
39943: LD_INT 15
39945: EQUAL
39946: IFFALSE 39967
// points := [ 10 , 5 , 3 ] ;
39948: LD_ADDR_VAR 0 9
39952: PUSH
39953: LD_INT 10
39955: PUSH
39956: LD_INT 5
39958: PUSH
39959: LD_INT 3
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39967: LD_VAR 0 6
39971: PPUSH
39972: CALL_OW 257
39976: PUSH
39977: LD_INT 14
39979: EQUAL
39980: IFFALSE 40001
// points := [ 10 , 0 , 0 ] ;
39982: LD_ADDR_VAR 0 9
39986: PUSH
39987: LD_INT 10
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: LIST
40000: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40001: LD_VAR 0 6
40005: PPUSH
40006: CALL_OW 257
40010: PUSH
40011: LD_INT 11
40013: EQUAL
40014: IFFALSE 40035
// points := [ 30 , 10 , 5 ] ;
40016: LD_ADDR_VAR 0 9
40020: PUSH
40021: LD_INT 30
40023: PUSH
40024: LD_INT 10
40026: PUSH
40027: LD_INT 5
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: LIST
40034: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40035: LD_VAR 0 1
40039: PPUSH
40040: LD_INT 5
40042: PPUSH
40043: CALL_OW 321
40047: PUSH
40048: LD_INT 2
40050: EQUAL
40051: IFFALSE 40068
// bpoints := bpoints * 1.8 ;
40053: LD_ADDR_VAR 0 10
40057: PUSH
40058: LD_VAR 0 10
40062: PUSH
40063: LD_REAL  1.80000000000000E+0000
40066: MUL
40067: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40068: LD_VAR 0 6
40072: PPUSH
40073: CALL_OW 257
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: LD_INT 2
40083: PUSH
40084: LD_INT 3
40086: PUSH
40087: LD_INT 4
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: IN
40096: PUSH
40097: LD_VAR 0 1
40101: PPUSH
40102: LD_INT 51
40104: PPUSH
40105: CALL_OW 321
40109: PUSH
40110: LD_INT 2
40112: EQUAL
40113: AND
40114: IFFALSE 40131
// bpoints := bpoints * 1.2 ;
40116: LD_ADDR_VAR 0 10
40120: PUSH
40121: LD_VAR 0 10
40125: PUSH
40126: LD_REAL  1.20000000000000E+0000
40129: MUL
40130: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40131: LD_VAR 0 6
40135: PPUSH
40136: CALL_OW 257
40140: PUSH
40141: LD_INT 5
40143: PUSH
40144: LD_INT 7
40146: PUSH
40147: LD_INT 9
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: LIST
40154: IN
40155: PUSH
40156: LD_VAR 0 1
40160: PPUSH
40161: LD_INT 52
40163: PPUSH
40164: CALL_OW 321
40168: PUSH
40169: LD_INT 2
40171: EQUAL
40172: AND
40173: IFFALSE 40190
// bpoints := bpoints * 1.5 ;
40175: LD_ADDR_VAR 0 10
40179: PUSH
40180: LD_VAR 0 10
40184: PUSH
40185: LD_REAL  1.50000000000000E+0000
40188: MUL
40189: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40190: LD_VAR 0 1
40194: PPUSH
40195: LD_INT 66
40197: PPUSH
40198: CALL_OW 321
40202: PUSH
40203: LD_INT 2
40205: EQUAL
40206: IFFALSE 40223
// bpoints := bpoints * 1.1 ;
40208: LD_ADDR_VAR 0 10
40212: PUSH
40213: LD_VAR 0 10
40217: PUSH
40218: LD_REAL  1.10000000000000E+0000
40221: MUL
40222: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40223: LD_ADDR_VAR 0 10
40227: PUSH
40228: LD_VAR 0 10
40232: PUSH
40233: LD_VAR 0 6
40237: PPUSH
40238: LD_INT 1
40240: PPUSH
40241: CALL_OW 259
40245: PUSH
40246: LD_REAL  1.15000000000000E+0000
40249: MUL
40250: MUL
40251: ST_TO_ADDR
// end ; unit_vehicle :
40252: GO 41082
40254: LD_INT 2
40256: DOUBLE
40257: EQUAL
40258: IFTRUE 40262
40260: GO 41070
40262: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40263: LD_VAR 0 6
40267: PPUSH
40268: CALL_OW 264
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: LD_INT 42
40278: PUSH
40279: LD_INT 24
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: IN
40287: IFFALSE 40308
// points := [ 25 , 5 , 3 ] ;
40289: LD_ADDR_VAR 0 9
40293: PUSH
40294: LD_INT 25
40296: PUSH
40297: LD_INT 5
40299: PUSH
40300: LD_INT 3
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40308: LD_VAR 0 6
40312: PPUSH
40313: CALL_OW 264
40317: PUSH
40318: LD_INT 4
40320: PUSH
40321: LD_INT 43
40323: PUSH
40324: LD_INT 25
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: LIST
40331: IN
40332: IFFALSE 40353
// points := [ 40 , 15 , 5 ] ;
40334: LD_ADDR_VAR 0 9
40338: PUSH
40339: LD_INT 40
40341: PUSH
40342: LD_INT 15
40344: PUSH
40345: LD_INT 5
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: LIST
40352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40353: LD_VAR 0 6
40357: PPUSH
40358: CALL_OW 264
40362: PUSH
40363: LD_INT 3
40365: PUSH
40366: LD_INT 23
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: IN
40373: IFFALSE 40394
// points := [ 7 , 25 , 8 ] ;
40375: LD_ADDR_VAR 0 9
40379: PUSH
40380: LD_INT 7
40382: PUSH
40383: LD_INT 25
40385: PUSH
40386: LD_INT 8
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40394: LD_VAR 0 6
40398: PPUSH
40399: CALL_OW 264
40403: PUSH
40404: LD_INT 5
40406: PUSH
40407: LD_INT 27
40409: PUSH
40410: LD_INT 44
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: IN
40418: IFFALSE 40439
// points := [ 14 , 50 , 16 ] ;
40420: LD_ADDR_VAR 0 9
40424: PUSH
40425: LD_INT 14
40427: PUSH
40428: LD_INT 50
40430: PUSH
40431: LD_INT 16
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: LIST
40438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40439: LD_VAR 0 6
40443: PPUSH
40444: CALL_OW 264
40448: PUSH
40449: LD_INT 6
40451: PUSH
40452: LD_INT 46
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: IN
40459: IFFALSE 40480
// points := [ 32 , 120 , 70 ] ;
40461: LD_ADDR_VAR 0 9
40465: PUSH
40466: LD_INT 32
40468: PUSH
40469: LD_INT 120
40471: PUSH
40472: LD_INT 70
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: LIST
40479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40480: LD_VAR 0 6
40484: PPUSH
40485: CALL_OW 264
40489: PUSH
40490: LD_INT 7
40492: PUSH
40493: LD_INT 28
40495: PUSH
40496: LD_INT 45
40498: PUSH
40499: LD_EXP 41
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: IN
40510: IFFALSE 40531
// points := [ 35 , 20 , 45 ] ;
40512: LD_ADDR_VAR 0 9
40516: PUSH
40517: LD_INT 35
40519: PUSH
40520: LD_INT 20
40522: PUSH
40523: LD_INT 45
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: LIST
40530: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40531: LD_VAR 0 6
40535: PPUSH
40536: CALL_OW 264
40540: PUSH
40541: LD_INT 47
40543: PUSH
40544: EMPTY
40545: LIST
40546: IN
40547: IFFALSE 40568
// points := [ 67 , 45 , 75 ] ;
40549: LD_ADDR_VAR 0 9
40553: PUSH
40554: LD_INT 67
40556: PUSH
40557: LD_INT 45
40559: PUSH
40560: LD_INT 75
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40568: LD_VAR 0 6
40572: PPUSH
40573: CALL_OW 264
40577: PUSH
40578: LD_INT 26
40580: PUSH
40581: EMPTY
40582: LIST
40583: IN
40584: IFFALSE 40605
// points := [ 120 , 30 , 80 ] ;
40586: LD_ADDR_VAR 0 9
40590: PUSH
40591: LD_INT 120
40593: PUSH
40594: LD_INT 30
40596: PUSH
40597: LD_INT 80
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: LIST
40604: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40605: LD_VAR 0 6
40609: PPUSH
40610: CALL_OW 264
40614: PUSH
40615: LD_INT 22
40617: PUSH
40618: EMPTY
40619: LIST
40620: IN
40621: IFFALSE 40642
// points := [ 40 , 1 , 1 ] ;
40623: LD_ADDR_VAR 0 9
40627: PUSH
40628: LD_INT 40
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: LIST
40641: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40642: LD_VAR 0 6
40646: PPUSH
40647: CALL_OW 264
40651: PUSH
40652: LD_INT 29
40654: PUSH
40655: EMPTY
40656: LIST
40657: IN
40658: IFFALSE 40679
// points := [ 70 , 200 , 400 ] ;
40660: LD_ADDR_VAR 0 9
40664: PUSH
40665: LD_INT 70
40667: PUSH
40668: LD_INT 200
40670: PUSH
40671: LD_INT 400
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: LIST
40678: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40679: LD_VAR 0 6
40683: PPUSH
40684: CALL_OW 264
40688: PUSH
40689: LD_INT 14
40691: PUSH
40692: LD_INT 53
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: IN
40699: IFFALSE 40720
// points := [ 40 , 10 , 20 ] ;
40701: LD_ADDR_VAR 0 9
40705: PUSH
40706: LD_INT 40
40708: PUSH
40709: LD_INT 10
40711: PUSH
40712: LD_INT 20
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: LIST
40719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40720: LD_VAR 0 6
40724: PPUSH
40725: CALL_OW 264
40729: PUSH
40730: LD_INT 9
40732: PUSH
40733: EMPTY
40734: LIST
40735: IN
40736: IFFALSE 40757
// points := [ 5 , 70 , 20 ] ;
40738: LD_ADDR_VAR 0 9
40742: PUSH
40743: LD_INT 5
40745: PUSH
40746: LD_INT 70
40748: PUSH
40749: LD_INT 20
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: LIST
40756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40757: LD_VAR 0 6
40761: PPUSH
40762: CALL_OW 264
40766: PUSH
40767: LD_INT 10
40769: PUSH
40770: EMPTY
40771: LIST
40772: IN
40773: IFFALSE 40794
// points := [ 35 , 110 , 70 ] ;
40775: LD_ADDR_VAR 0 9
40779: PUSH
40780: LD_INT 35
40782: PUSH
40783: LD_INT 110
40785: PUSH
40786: LD_INT 70
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: LIST
40793: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40794: LD_VAR 0 6
40798: PPUSH
40799: CALL_OW 265
40803: PUSH
40804: LD_INT 25
40806: EQUAL
40807: IFFALSE 40828
// points := [ 80 , 65 , 100 ] ;
40809: LD_ADDR_VAR 0 9
40813: PUSH
40814: LD_INT 80
40816: PUSH
40817: LD_INT 65
40819: PUSH
40820: LD_INT 100
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40828: LD_VAR 0 6
40832: PPUSH
40833: CALL_OW 263
40837: PUSH
40838: LD_INT 1
40840: EQUAL
40841: IFFALSE 40876
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40843: LD_ADDR_VAR 0 10
40847: PUSH
40848: LD_VAR 0 10
40852: PUSH
40853: LD_VAR 0 6
40857: PPUSH
40858: CALL_OW 311
40862: PPUSH
40863: LD_INT 3
40865: PPUSH
40866: CALL_OW 259
40870: PUSH
40871: LD_INT 4
40873: MUL
40874: MUL
40875: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40876: LD_VAR 0 6
40880: PPUSH
40881: CALL_OW 263
40885: PUSH
40886: LD_INT 2
40888: EQUAL
40889: IFFALSE 40940
// begin j := IsControledBy ( i ) ;
40891: LD_ADDR_VAR 0 7
40895: PUSH
40896: LD_VAR 0 6
40900: PPUSH
40901: CALL_OW 312
40905: ST_TO_ADDR
// if j then
40906: LD_VAR 0 7
40910: IFFALSE 40940
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40912: LD_ADDR_VAR 0 10
40916: PUSH
40917: LD_VAR 0 10
40921: PUSH
40922: LD_VAR 0 7
40926: PPUSH
40927: LD_INT 3
40929: PPUSH
40930: CALL_OW 259
40934: PUSH
40935: LD_INT 3
40937: MUL
40938: MUL
40939: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40940: LD_VAR 0 6
40944: PPUSH
40945: CALL_OW 264
40949: PUSH
40950: LD_INT 5
40952: PUSH
40953: LD_INT 6
40955: PUSH
40956: LD_INT 46
40958: PUSH
40959: LD_INT 44
40961: PUSH
40962: LD_INT 47
40964: PUSH
40965: LD_INT 45
40967: PUSH
40968: LD_INT 28
40970: PUSH
40971: LD_INT 7
40973: PUSH
40974: LD_INT 27
40976: PUSH
40977: LD_INT 29
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: IN
40992: PUSH
40993: LD_VAR 0 1
40997: PPUSH
40998: LD_INT 52
41000: PPUSH
41001: CALL_OW 321
41005: PUSH
41006: LD_INT 2
41008: EQUAL
41009: AND
41010: IFFALSE 41027
// bpoints := bpoints * 1.2 ;
41012: LD_ADDR_VAR 0 10
41016: PUSH
41017: LD_VAR 0 10
41021: PUSH
41022: LD_REAL  1.20000000000000E+0000
41025: MUL
41026: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41027: LD_VAR 0 6
41031: PPUSH
41032: CALL_OW 264
41036: PUSH
41037: LD_INT 6
41039: PUSH
41040: LD_INT 46
41042: PUSH
41043: LD_INT 47
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: LIST
41050: IN
41051: IFFALSE 41068
// bpoints := bpoints * 1.2 ;
41053: LD_ADDR_VAR 0 10
41057: PUSH
41058: LD_VAR 0 10
41062: PUSH
41063: LD_REAL  1.20000000000000E+0000
41066: MUL
41067: ST_TO_ADDR
// end ; unit_building :
41068: GO 41082
41070: LD_INT 3
41072: DOUBLE
41073: EQUAL
41074: IFTRUE 41078
41076: GO 41081
41078: POP
// ; end ;
41079: GO 41082
41081: POP
// for j = 1 to 3 do
41082: LD_ADDR_VAR 0 7
41086: PUSH
41087: DOUBLE
41088: LD_INT 1
41090: DEC
41091: ST_TO_ADDR
41092: LD_INT 3
41094: PUSH
41095: FOR_TO
41096: IFFALSE 41149
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41098: LD_ADDR_VAR 0 5
41102: PUSH
41103: LD_VAR 0 5
41107: PPUSH
41108: LD_VAR 0 7
41112: PPUSH
41113: LD_VAR 0 5
41117: PUSH
41118: LD_VAR 0 7
41122: ARRAY
41123: PUSH
41124: LD_VAR 0 9
41128: PUSH
41129: LD_VAR 0 7
41133: ARRAY
41134: PUSH
41135: LD_VAR 0 10
41139: MUL
41140: PLUS
41141: PPUSH
41142: CALL_OW 1
41146: ST_TO_ADDR
41147: GO 41095
41149: POP
41150: POP
// end ;
41151: GO 39628
41153: POP
41154: POP
// result := Replace ( result , 4 , tmp ) ;
41155: LD_ADDR_VAR 0 5
41159: PUSH
41160: LD_VAR 0 5
41164: PPUSH
41165: LD_INT 4
41167: PPUSH
41168: LD_VAR 0 8
41172: PPUSH
41173: CALL_OW 1
41177: ST_TO_ADDR
// end ;
41178: LD_VAR 0 5
41182: RET
// export function DangerAtRange ( unit , range ) ; begin
41183: LD_INT 0
41185: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41186: LD_ADDR_VAR 0 3
41190: PUSH
41191: LD_VAR 0 1
41195: PPUSH
41196: CALL_OW 255
41200: PPUSH
41201: LD_VAR 0 1
41205: PPUSH
41206: CALL_OW 250
41210: PPUSH
41211: LD_VAR 0 1
41215: PPUSH
41216: CALL_OW 251
41220: PPUSH
41221: LD_VAR 0 2
41225: PPUSH
41226: CALL 39480 0 4
41230: ST_TO_ADDR
// end ;
41231: LD_VAR 0 3
41235: RET
// export function DangerInArea ( side , area ) ; begin
41236: LD_INT 0
41238: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41239: LD_ADDR_VAR 0 3
41243: PUSH
41244: LD_VAR 0 2
41248: PPUSH
41249: LD_INT 81
41251: PUSH
41252: LD_VAR 0 1
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PPUSH
41261: CALL_OW 70
41265: ST_TO_ADDR
// end ;
41266: LD_VAR 0 3
41270: RET
// export function IsExtension ( b ) ; begin
41271: LD_INT 0
41273: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41274: LD_ADDR_VAR 0 2
41278: PUSH
41279: LD_VAR 0 1
41283: PUSH
41284: LD_INT 23
41286: PUSH
41287: LD_INT 20
41289: PUSH
41290: LD_INT 22
41292: PUSH
41293: LD_INT 17
41295: PUSH
41296: LD_INT 24
41298: PUSH
41299: LD_INT 21
41301: PUSH
41302: LD_INT 19
41304: PUSH
41305: LD_INT 16
41307: PUSH
41308: LD_INT 25
41310: PUSH
41311: LD_INT 18
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: IN
41326: ST_TO_ADDR
// end ;
41327: LD_VAR 0 2
41331: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41332: LD_INT 0
41334: PPUSH
41335: PPUSH
41336: PPUSH
// result := [ ] ;
41337: LD_ADDR_VAR 0 4
41341: PUSH
41342: EMPTY
41343: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41344: LD_ADDR_VAR 0 5
41348: PUSH
41349: LD_VAR 0 2
41353: PPUSH
41354: LD_INT 21
41356: PUSH
41357: LD_INT 3
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PPUSH
41364: CALL_OW 70
41368: ST_TO_ADDR
// if not tmp then
41369: LD_VAR 0 5
41373: NOT
41374: IFFALSE 41378
// exit ;
41376: GO 41442
// if checkLink then
41378: LD_VAR 0 3
41382: IFFALSE 41432
// begin for i in tmp do
41384: LD_ADDR_VAR 0 6
41388: PUSH
41389: LD_VAR 0 5
41393: PUSH
41394: FOR_IN
41395: IFFALSE 41430
// if GetBase ( i ) <> base then
41397: LD_VAR 0 6
41401: PPUSH
41402: CALL_OW 274
41406: PUSH
41407: LD_VAR 0 1
41411: NONEQUAL
41412: IFFALSE 41428
// ComLinkToBase ( base , i ) ;
41414: LD_VAR 0 1
41418: PPUSH
41419: LD_VAR 0 6
41423: PPUSH
41424: CALL_OW 169
41428: GO 41394
41430: POP
41431: POP
// end ; result := tmp ;
41432: LD_ADDR_VAR 0 4
41436: PUSH
41437: LD_VAR 0 5
41441: ST_TO_ADDR
// end ;
41442: LD_VAR 0 4
41446: RET
// export function ComComplete ( units , b ) ; var i ; begin
41447: LD_INT 0
41449: PPUSH
41450: PPUSH
// if not units then
41451: LD_VAR 0 1
41455: NOT
41456: IFFALSE 41460
// exit ;
41458: GO 41550
// for i in units do
41460: LD_ADDR_VAR 0 4
41464: PUSH
41465: LD_VAR 0 1
41469: PUSH
41470: FOR_IN
41471: IFFALSE 41548
// if BuildingStatus ( b ) = bs_build then
41473: LD_VAR 0 2
41477: PPUSH
41478: CALL_OW 461
41482: PUSH
41483: LD_INT 1
41485: EQUAL
41486: IFFALSE 41546
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41488: LD_VAR 0 4
41492: PPUSH
41493: LD_STRING h
41495: PUSH
41496: LD_VAR 0 2
41500: PPUSH
41501: CALL_OW 250
41505: PUSH
41506: LD_VAR 0 2
41510: PPUSH
41511: CALL_OW 251
41515: PUSH
41516: LD_VAR 0 2
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: PUSH
41539: EMPTY
41540: LIST
41541: PPUSH
41542: CALL_OW 446
41546: GO 41470
41548: POP
41549: POP
// end ;
41550: LD_VAR 0 3
41554: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41555: LD_INT 0
41557: PPUSH
41558: PPUSH
41559: PPUSH
41560: PPUSH
41561: PPUSH
41562: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41563: LD_VAR 0 1
41567: NOT
41568: PUSH
41569: LD_VAR 0 1
41573: PPUSH
41574: CALL_OW 263
41578: PUSH
41579: LD_INT 2
41581: NONEQUAL
41582: OR
41583: IFFALSE 41587
// exit ;
41585: GO 41903
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41587: LD_ADDR_VAR 0 6
41591: PUSH
41592: LD_INT 22
41594: PUSH
41595: LD_VAR 0 1
41599: PPUSH
41600: CALL_OW 255
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: LD_INT 30
41614: PUSH
41615: LD_INT 36
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 34
41624: PUSH
41625: LD_INT 31
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: LIST
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PPUSH
41641: CALL_OW 69
41645: ST_TO_ADDR
// if not tmp then
41646: LD_VAR 0 6
41650: NOT
41651: IFFALSE 41655
// exit ;
41653: GO 41903
// result := [ ] ;
41655: LD_ADDR_VAR 0 2
41659: PUSH
41660: EMPTY
41661: ST_TO_ADDR
// for i in tmp do
41662: LD_ADDR_VAR 0 3
41666: PUSH
41667: LD_VAR 0 6
41671: PUSH
41672: FOR_IN
41673: IFFALSE 41744
// begin t := UnitsInside ( i ) ;
41675: LD_ADDR_VAR 0 4
41679: PUSH
41680: LD_VAR 0 3
41684: PPUSH
41685: CALL_OW 313
41689: ST_TO_ADDR
// if t then
41690: LD_VAR 0 4
41694: IFFALSE 41742
// for j in t do
41696: LD_ADDR_VAR 0 7
41700: PUSH
41701: LD_VAR 0 4
41705: PUSH
41706: FOR_IN
41707: IFFALSE 41740
// result := Replace ( result , result + 1 , j ) ;
41709: LD_ADDR_VAR 0 2
41713: PUSH
41714: LD_VAR 0 2
41718: PPUSH
41719: LD_VAR 0 2
41723: PUSH
41724: LD_INT 1
41726: PLUS
41727: PPUSH
41728: LD_VAR 0 7
41732: PPUSH
41733: CALL_OW 1
41737: ST_TO_ADDR
41738: GO 41706
41740: POP
41741: POP
// end ;
41742: GO 41672
41744: POP
41745: POP
// if not result then
41746: LD_VAR 0 2
41750: NOT
41751: IFFALSE 41755
// exit ;
41753: GO 41903
// mech := result [ 1 ] ;
41755: LD_ADDR_VAR 0 5
41759: PUSH
41760: LD_VAR 0 2
41764: PUSH
41765: LD_INT 1
41767: ARRAY
41768: ST_TO_ADDR
// if result > 1 then
41769: LD_VAR 0 2
41773: PUSH
41774: LD_INT 1
41776: GREATER
41777: IFFALSE 41889
// begin for i = 2 to result do
41779: LD_ADDR_VAR 0 3
41783: PUSH
41784: DOUBLE
41785: LD_INT 2
41787: DEC
41788: ST_TO_ADDR
41789: LD_VAR 0 2
41793: PUSH
41794: FOR_TO
41795: IFFALSE 41887
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41797: LD_ADDR_VAR 0 4
41801: PUSH
41802: LD_VAR 0 2
41806: PUSH
41807: LD_VAR 0 3
41811: ARRAY
41812: PPUSH
41813: LD_INT 3
41815: PPUSH
41816: CALL_OW 259
41820: PUSH
41821: LD_VAR 0 2
41825: PUSH
41826: LD_VAR 0 3
41830: ARRAY
41831: PPUSH
41832: CALL_OW 432
41836: MINUS
41837: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41838: LD_VAR 0 4
41842: PUSH
41843: LD_VAR 0 5
41847: PPUSH
41848: LD_INT 3
41850: PPUSH
41851: CALL_OW 259
41855: PUSH
41856: LD_VAR 0 5
41860: PPUSH
41861: CALL_OW 432
41865: MINUS
41866: GREATEREQUAL
41867: IFFALSE 41885
// mech := result [ i ] ;
41869: LD_ADDR_VAR 0 5
41873: PUSH
41874: LD_VAR 0 2
41878: PUSH
41879: LD_VAR 0 3
41883: ARRAY
41884: ST_TO_ADDR
// end ;
41885: GO 41794
41887: POP
41888: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41889: LD_VAR 0 1
41893: PPUSH
41894: LD_VAR 0 5
41898: PPUSH
41899: CALL_OW 135
// end ;
41903: LD_VAR 0 2
41907: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41908: LD_INT 0
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
41914: PPUSH
41915: PPUSH
41916: PPUSH
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
41921: PPUSH
41922: PPUSH
// result := [ ] ;
41923: LD_ADDR_VAR 0 7
41927: PUSH
41928: EMPTY
41929: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41930: LD_VAR 0 1
41934: PPUSH
41935: CALL_OW 266
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: IN
41950: NOT
41951: IFFALSE 41955
// exit ;
41953: GO 43589
// if name then
41955: LD_VAR 0 3
41959: IFFALSE 41975
// SetBName ( base_dep , name ) ;
41961: LD_VAR 0 1
41965: PPUSH
41966: LD_VAR 0 3
41970: PPUSH
41971: CALL_OW 500
// base := GetBase ( base_dep ) ;
41975: LD_ADDR_VAR 0 15
41979: PUSH
41980: LD_VAR 0 1
41984: PPUSH
41985: CALL_OW 274
41989: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41990: LD_ADDR_VAR 0 16
41994: PUSH
41995: LD_VAR 0 1
41999: PPUSH
42000: CALL_OW 255
42004: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42005: LD_ADDR_VAR 0 17
42009: PUSH
42010: LD_VAR 0 1
42014: PPUSH
42015: CALL_OW 248
42019: ST_TO_ADDR
// if sources then
42020: LD_VAR 0 5
42024: IFFALSE 42071
// for i = 1 to 3 do
42026: LD_ADDR_VAR 0 8
42030: PUSH
42031: DOUBLE
42032: LD_INT 1
42034: DEC
42035: ST_TO_ADDR
42036: LD_INT 3
42038: PUSH
42039: FOR_TO
42040: IFFALSE 42069
// AddResourceType ( base , i , sources [ i ] ) ;
42042: LD_VAR 0 15
42046: PPUSH
42047: LD_VAR 0 8
42051: PPUSH
42052: LD_VAR 0 5
42056: PUSH
42057: LD_VAR 0 8
42061: ARRAY
42062: PPUSH
42063: CALL_OW 276
42067: GO 42039
42069: POP
42070: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42071: LD_ADDR_VAR 0 18
42075: PUSH
42076: LD_VAR 0 15
42080: PPUSH
42081: LD_VAR 0 2
42085: PPUSH
42086: LD_INT 1
42088: PPUSH
42089: CALL 41332 0 3
42093: ST_TO_ADDR
// InitHc ;
42094: CALL_OW 19
// InitUc ;
42098: CALL_OW 18
// uc_side := side ;
42102: LD_ADDR_OWVAR 20
42106: PUSH
42107: LD_VAR 0 16
42111: ST_TO_ADDR
// uc_nation := nation ;
42112: LD_ADDR_OWVAR 21
42116: PUSH
42117: LD_VAR 0 17
42121: ST_TO_ADDR
// if buildings then
42122: LD_VAR 0 18
42126: IFFALSE 43448
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42128: LD_ADDR_VAR 0 19
42132: PUSH
42133: LD_VAR 0 18
42137: PPUSH
42138: LD_INT 2
42140: PUSH
42141: LD_INT 30
42143: PUSH
42144: LD_INT 29
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 30
42153: PUSH
42154: LD_INT 30
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: PPUSH
42166: CALL_OW 72
42170: ST_TO_ADDR
// if tmp then
42171: LD_VAR 0 19
42175: IFFALSE 42223
// for i in tmp do
42177: LD_ADDR_VAR 0 8
42181: PUSH
42182: LD_VAR 0 19
42186: PUSH
42187: FOR_IN
42188: IFFALSE 42221
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42190: LD_VAR 0 8
42194: PPUSH
42195: CALL_OW 250
42199: PPUSH
42200: LD_VAR 0 8
42204: PPUSH
42205: CALL_OW 251
42209: PPUSH
42210: LD_VAR 0 16
42214: PPUSH
42215: CALL_OW 441
42219: GO 42187
42221: POP
42222: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42223: LD_VAR 0 18
42227: PPUSH
42228: LD_INT 2
42230: PUSH
42231: LD_INT 30
42233: PUSH
42234: LD_INT 32
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 30
42243: PUSH
42244: LD_INT 33
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: LIST
42255: PPUSH
42256: CALL_OW 72
42260: IFFALSE 42348
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42262: LD_ADDR_VAR 0 8
42266: PUSH
42267: LD_VAR 0 18
42271: PPUSH
42272: LD_INT 2
42274: PUSH
42275: LD_INT 30
42277: PUSH
42278: LD_INT 32
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 30
42287: PUSH
42288: LD_INT 33
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: LIST
42299: PPUSH
42300: CALL_OW 72
42304: PUSH
42305: FOR_IN
42306: IFFALSE 42346
// begin if not GetBWeapon ( i ) then
42308: LD_VAR 0 8
42312: PPUSH
42313: CALL_OW 269
42317: NOT
42318: IFFALSE 42344
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42320: LD_VAR 0 8
42324: PPUSH
42325: LD_VAR 0 8
42329: PPUSH
42330: LD_VAR 0 2
42334: PPUSH
42335: CALL 43594 0 2
42339: PPUSH
42340: CALL_OW 431
// end ;
42344: GO 42305
42346: POP
42347: POP
// end ; for i = 1 to personel do
42348: LD_ADDR_VAR 0 8
42352: PUSH
42353: DOUBLE
42354: LD_INT 1
42356: DEC
42357: ST_TO_ADDR
42358: LD_VAR 0 6
42362: PUSH
42363: FOR_TO
42364: IFFALSE 43428
// begin if i > 4 then
42366: LD_VAR 0 8
42370: PUSH
42371: LD_INT 4
42373: GREATER
42374: IFFALSE 42378
// break ;
42376: GO 43428
// case i of 1 :
42378: LD_VAR 0 8
42382: PUSH
42383: LD_INT 1
42385: DOUBLE
42386: EQUAL
42387: IFTRUE 42391
42389: GO 42471
42391: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42392: LD_ADDR_VAR 0 12
42396: PUSH
42397: LD_VAR 0 18
42401: PPUSH
42402: LD_INT 22
42404: PUSH
42405: LD_VAR 0 16
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 58
42416: PUSH
42417: EMPTY
42418: LIST
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: LD_INT 30
42425: PUSH
42426: LD_INT 32
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 30
42435: PUSH
42436: LD_INT 4
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 30
42445: PUSH
42446: LD_INT 5
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: LIST
42463: PPUSH
42464: CALL_OW 72
42468: ST_TO_ADDR
42469: GO 42693
42471: LD_INT 2
42473: DOUBLE
42474: EQUAL
42475: IFTRUE 42479
42477: GO 42541
42479: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42480: LD_ADDR_VAR 0 12
42484: PUSH
42485: LD_VAR 0 18
42489: PPUSH
42490: LD_INT 22
42492: PUSH
42493: LD_VAR 0 16
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: LD_INT 30
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 30
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PPUSH
42534: CALL_OW 72
42538: ST_TO_ADDR
42539: GO 42693
42541: LD_INT 3
42543: DOUBLE
42544: EQUAL
42545: IFTRUE 42549
42547: GO 42611
42549: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42550: LD_ADDR_VAR 0 12
42554: PUSH
42555: LD_VAR 0 18
42559: PPUSH
42560: LD_INT 22
42562: PUSH
42563: LD_VAR 0 16
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 2
42574: PUSH
42575: LD_INT 30
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 30
42587: PUSH
42588: LD_INT 3
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PPUSH
42604: CALL_OW 72
42608: ST_TO_ADDR
42609: GO 42693
42611: LD_INT 4
42613: DOUBLE
42614: EQUAL
42615: IFTRUE 42619
42617: GO 42692
42619: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42620: LD_ADDR_VAR 0 12
42624: PUSH
42625: LD_VAR 0 18
42629: PPUSH
42630: LD_INT 22
42632: PUSH
42633: LD_VAR 0 16
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: LD_INT 30
42647: PUSH
42648: LD_INT 6
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 30
42657: PUSH
42658: LD_INT 7
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 30
42667: PUSH
42668: LD_INT 8
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PPUSH
42685: CALL_OW 72
42689: ST_TO_ADDR
42690: GO 42693
42692: POP
// if i = 1 then
42693: LD_VAR 0 8
42697: PUSH
42698: LD_INT 1
42700: EQUAL
42701: IFFALSE 42812
// begin tmp := [ ] ;
42703: LD_ADDR_VAR 0 19
42707: PUSH
42708: EMPTY
42709: ST_TO_ADDR
// for j in f do
42710: LD_ADDR_VAR 0 9
42714: PUSH
42715: LD_VAR 0 12
42719: PUSH
42720: FOR_IN
42721: IFFALSE 42794
// if GetBType ( j ) = b_bunker then
42723: LD_VAR 0 9
42727: PPUSH
42728: CALL_OW 266
42732: PUSH
42733: LD_INT 32
42735: EQUAL
42736: IFFALSE 42763
// tmp := Insert ( tmp , 1 , j ) else
42738: LD_ADDR_VAR 0 19
42742: PUSH
42743: LD_VAR 0 19
42747: PPUSH
42748: LD_INT 1
42750: PPUSH
42751: LD_VAR 0 9
42755: PPUSH
42756: CALL_OW 2
42760: ST_TO_ADDR
42761: GO 42792
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42763: LD_ADDR_VAR 0 19
42767: PUSH
42768: LD_VAR 0 19
42772: PPUSH
42773: LD_VAR 0 19
42777: PUSH
42778: LD_INT 1
42780: PLUS
42781: PPUSH
42782: LD_VAR 0 9
42786: PPUSH
42787: CALL_OW 2
42791: ST_TO_ADDR
42792: GO 42720
42794: POP
42795: POP
// if tmp then
42796: LD_VAR 0 19
42800: IFFALSE 42812
// f := tmp ;
42802: LD_ADDR_VAR 0 12
42806: PUSH
42807: LD_VAR 0 19
42811: ST_TO_ADDR
// end ; x := personel [ i ] ;
42812: LD_ADDR_VAR 0 13
42816: PUSH
42817: LD_VAR 0 6
42821: PUSH
42822: LD_VAR 0 8
42826: ARRAY
42827: ST_TO_ADDR
// if x = - 1 then
42828: LD_VAR 0 13
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: EQUAL
42837: IFFALSE 43046
// begin for j in f do
42839: LD_ADDR_VAR 0 9
42843: PUSH
42844: LD_VAR 0 12
42848: PUSH
42849: FOR_IN
42850: IFFALSE 43042
// repeat InitHc ;
42852: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42856: LD_VAR 0 9
42860: PPUSH
42861: CALL_OW 266
42865: PUSH
42866: LD_INT 5
42868: EQUAL
42869: IFFALSE 42939
// begin if UnitsInside ( j ) < 3 then
42871: LD_VAR 0 9
42875: PPUSH
42876: CALL_OW 313
42880: PUSH
42881: LD_INT 3
42883: LESS
42884: IFFALSE 42920
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42886: LD_INT 0
42888: PPUSH
42889: LD_INT 5
42891: PUSH
42892: LD_INT 8
42894: PUSH
42895: LD_INT 9
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: PUSH
42903: LD_VAR 0 17
42907: ARRAY
42908: PPUSH
42909: LD_VAR 0 4
42913: PPUSH
42914: CALL_OW 380
42918: GO 42937
// PrepareHuman ( false , i , skill ) ;
42920: LD_INT 0
42922: PPUSH
42923: LD_VAR 0 8
42927: PPUSH
42928: LD_VAR 0 4
42932: PPUSH
42933: CALL_OW 380
// end else
42937: GO 42956
// PrepareHuman ( false , i , skill ) ;
42939: LD_INT 0
42941: PPUSH
42942: LD_VAR 0 8
42946: PPUSH
42947: LD_VAR 0 4
42951: PPUSH
42952: CALL_OW 380
// un := CreateHuman ;
42956: LD_ADDR_VAR 0 14
42960: PUSH
42961: CALL_OW 44
42965: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42966: LD_ADDR_VAR 0 7
42970: PUSH
42971: LD_VAR 0 7
42975: PPUSH
42976: LD_INT 1
42978: PPUSH
42979: LD_VAR 0 14
42983: PPUSH
42984: CALL_OW 2
42988: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42989: LD_VAR 0 14
42993: PPUSH
42994: LD_VAR 0 9
42998: PPUSH
42999: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43003: LD_VAR 0 9
43007: PPUSH
43008: CALL_OW 313
43012: PUSH
43013: LD_INT 6
43015: EQUAL
43016: PUSH
43017: LD_VAR 0 9
43021: PPUSH
43022: CALL_OW 266
43026: PUSH
43027: LD_INT 32
43029: PUSH
43030: LD_INT 31
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: IN
43037: OR
43038: IFFALSE 42852
43040: GO 42849
43042: POP
43043: POP
// end else
43044: GO 43426
// for j = 1 to x do
43046: LD_ADDR_VAR 0 9
43050: PUSH
43051: DOUBLE
43052: LD_INT 1
43054: DEC
43055: ST_TO_ADDR
43056: LD_VAR 0 13
43060: PUSH
43061: FOR_TO
43062: IFFALSE 43424
// begin InitHc ;
43064: CALL_OW 19
// if not f then
43068: LD_VAR 0 12
43072: NOT
43073: IFFALSE 43162
// begin PrepareHuman ( false , i , skill ) ;
43075: LD_INT 0
43077: PPUSH
43078: LD_VAR 0 8
43082: PPUSH
43083: LD_VAR 0 4
43087: PPUSH
43088: CALL_OW 380
// un := CreateHuman ;
43092: LD_ADDR_VAR 0 14
43096: PUSH
43097: CALL_OW 44
43101: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43102: LD_ADDR_VAR 0 7
43106: PUSH
43107: LD_VAR 0 7
43111: PPUSH
43112: LD_INT 1
43114: PPUSH
43115: LD_VAR 0 14
43119: PPUSH
43120: CALL_OW 2
43124: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43125: LD_VAR 0 14
43129: PPUSH
43130: LD_VAR 0 1
43134: PPUSH
43135: CALL_OW 250
43139: PPUSH
43140: LD_VAR 0 1
43144: PPUSH
43145: CALL_OW 251
43149: PPUSH
43150: LD_INT 10
43152: PPUSH
43153: LD_INT 0
43155: PPUSH
43156: CALL_OW 50
// continue ;
43160: GO 43061
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43162: LD_VAR 0 12
43166: PUSH
43167: LD_INT 1
43169: ARRAY
43170: PPUSH
43171: CALL_OW 313
43175: PUSH
43176: LD_VAR 0 12
43180: PUSH
43181: LD_INT 1
43183: ARRAY
43184: PPUSH
43185: CALL_OW 266
43189: PUSH
43190: LD_INT 32
43192: PUSH
43193: LD_INT 31
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: IN
43200: AND
43201: PUSH
43202: LD_VAR 0 12
43206: PUSH
43207: LD_INT 1
43209: ARRAY
43210: PPUSH
43211: CALL_OW 313
43215: PUSH
43216: LD_INT 6
43218: EQUAL
43219: OR
43220: IFFALSE 43240
// f := Delete ( f , 1 ) ;
43222: LD_ADDR_VAR 0 12
43226: PUSH
43227: LD_VAR 0 12
43231: PPUSH
43232: LD_INT 1
43234: PPUSH
43235: CALL_OW 3
43239: ST_TO_ADDR
// if not f then
43240: LD_VAR 0 12
43244: NOT
43245: IFFALSE 43263
// begin x := x + 2 ;
43247: LD_ADDR_VAR 0 13
43251: PUSH
43252: LD_VAR 0 13
43256: PUSH
43257: LD_INT 2
43259: PLUS
43260: ST_TO_ADDR
// continue ;
43261: GO 43061
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43263: LD_VAR 0 12
43267: PUSH
43268: LD_INT 1
43270: ARRAY
43271: PPUSH
43272: CALL_OW 266
43276: PUSH
43277: LD_INT 5
43279: EQUAL
43280: IFFALSE 43354
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43282: LD_VAR 0 12
43286: PUSH
43287: LD_INT 1
43289: ARRAY
43290: PPUSH
43291: CALL_OW 313
43295: PUSH
43296: LD_INT 3
43298: LESS
43299: IFFALSE 43335
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43301: LD_INT 0
43303: PPUSH
43304: LD_INT 5
43306: PUSH
43307: LD_INT 8
43309: PUSH
43310: LD_INT 9
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: PUSH
43318: LD_VAR 0 17
43322: ARRAY
43323: PPUSH
43324: LD_VAR 0 4
43328: PPUSH
43329: CALL_OW 380
43333: GO 43352
// PrepareHuman ( false , i , skill ) ;
43335: LD_INT 0
43337: PPUSH
43338: LD_VAR 0 8
43342: PPUSH
43343: LD_VAR 0 4
43347: PPUSH
43348: CALL_OW 380
// end else
43352: GO 43371
// PrepareHuman ( false , i , skill ) ;
43354: LD_INT 0
43356: PPUSH
43357: LD_VAR 0 8
43361: PPUSH
43362: LD_VAR 0 4
43366: PPUSH
43367: CALL_OW 380
// un := CreateHuman ;
43371: LD_ADDR_VAR 0 14
43375: PUSH
43376: CALL_OW 44
43380: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43381: LD_ADDR_VAR 0 7
43385: PUSH
43386: LD_VAR 0 7
43390: PPUSH
43391: LD_INT 1
43393: PPUSH
43394: LD_VAR 0 14
43398: PPUSH
43399: CALL_OW 2
43403: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43404: LD_VAR 0 14
43408: PPUSH
43409: LD_VAR 0 12
43413: PUSH
43414: LD_INT 1
43416: ARRAY
43417: PPUSH
43418: CALL_OW 52
// end ;
43422: GO 43061
43424: POP
43425: POP
// end ;
43426: GO 42363
43428: POP
43429: POP
// result := result ^ buildings ;
43430: LD_ADDR_VAR 0 7
43434: PUSH
43435: LD_VAR 0 7
43439: PUSH
43440: LD_VAR 0 18
43444: ADD
43445: ST_TO_ADDR
// end else
43446: GO 43589
// begin for i = 1 to personel do
43448: LD_ADDR_VAR 0 8
43452: PUSH
43453: DOUBLE
43454: LD_INT 1
43456: DEC
43457: ST_TO_ADDR
43458: LD_VAR 0 6
43462: PUSH
43463: FOR_TO
43464: IFFALSE 43587
// begin if i > 4 then
43466: LD_VAR 0 8
43470: PUSH
43471: LD_INT 4
43473: GREATER
43474: IFFALSE 43478
// break ;
43476: GO 43587
// x := personel [ i ] ;
43478: LD_ADDR_VAR 0 13
43482: PUSH
43483: LD_VAR 0 6
43487: PUSH
43488: LD_VAR 0 8
43492: ARRAY
43493: ST_TO_ADDR
// if x = - 1 then
43494: LD_VAR 0 13
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: EQUAL
43503: IFFALSE 43507
// continue ;
43505: GO 43463
// PrepareHuman ( false , i , skill ) ;
43507: LD_INT 0
43509: PPUSH
43510: LD_VAR 0 8
43514: PPUSH
43515: LD_VAR 0 4
43519: PPUSH
43520: CALL_OW 380
// un := CreateHuman ;
43524: LD_ADDR_VAR 0 14
43528: PUSH
43529: CALL_OW 44
43533: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43534: LD_VAR 0 14
43538: PPUSH
43539: LD_VAR 0 1
43543: PPUSH
43544: CALL_OW 250
43548: PPUSH
43549: LD_VAR 0 1
43553: PPUSH
43554: CALL_OW 251
43558: PPUSH
43559: LD_INT 10
43561: PPUSH
43562: LD_INT 0
43564: PPUSH
43565: CALL_OW 50
// result := result ^ un ;
43569: LD_ADDR_VAR 0 7
43573: PUSH
43574: LD_VAR 0 7
43578: PUSH
43579: LD_VAR 0 14
43583: ADD
43584: ST_TO_ADDR
// end ;
43585: GO 43463
43587: POP
43588: POP
// end ; end ;
43589: LD_VAR 0 7
43593: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43594: LD_INT 0
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
43602: PPUSH
43603: PPUSH
43604: PPUSH
43605: PPUSH
43606: PPUSH
43607: PPUSH
43608: PPUSH
43609: PPUSH
43610: PPUSH
43611: PPUSH
// result := false ;
43612: LD_ADDR_VAR 0 3
43616: PUSH
43617: LD_INT 0
43619: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43620: LD_VAR 0 1
43624: NOT
43625: PUSH
43626: LD_VAR 0 1
43630: PPUSH
43631: CALL_OW 266
43635: PUSH
43636: LD_INT 32
43638: PUSH
43639: LD_INT 33
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: IN
43646: NOT
43647: OR
43648: IFFALSE 43652
// exit ;
43650: GO 44761
// nat := GetNation ( tower ) ;
43652: LD_ADDR_VAR 0 12
43656: PUSH
43657: LD_VAR 0 1
43661: PPUSH
43662: CALL_OW 248
43666: ST_TO_ADDR
// side := GetSide ( tower ) ;
43667: LD_ADDR_VAR 0 16
43671: PUSH
43672: LD_VAR 0 1
43676: PPUSH
43677: CALL_OW 255
43681: ST_TO_ADDR
// x := GetX ( tower ) ;
43682: LD_ADDR_VAR 0 10
43686: PUSH
43687: LD_VAR 0 1
43691: PPUSH
43692: CALL_OW 250
43696: ST_TO_ADDR
// y := GetY ( tower ) ;
43697: LD_ADDR_VAR 0 11
43701: PUSH
43702: LD_VAR 0 1
43706: PPUSH
43707: CALL_OW 251
43711: ST_TO_ADDR
// if not x or not y then
43712: LD_VAR 0 10
43716: NOT
43717: PUSH
43718: LD_VAR 0 11
43722: NOT
43723: OR
43724: IFFALSE 43728
// exit ;
43726: GO 44761
// weapon := 0 ;
43728: LD_ADDR_VAR 0 18
43732: PUSH
43733: LD_INT 0
43735: ST_TO_ADDR
// fac_list := [ ] ;
43736: LD_ADDR_VAR 0 17
43740: PUSH
43741: EMPTY
43742: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43743: LD_ADDR_VAR 0 6
43747: PUSH
43748: LD_VAR 0 1
43752: PPUSH
43753: CALL_OW 274
43757: PPUSH
43758: LD_VAR 0 2
43762: PPUSH
43763: LD_INT 0
43765: PPUSH
43766: CALL 41332 0 3
43770: PPUSH
43771: LD_INT 30
43773: PUSH
43774: LD_INT 3
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PPUSH
43781: CALL_OW 72
43785: ST_TO_ADDR
// if not factories then
43786: LD_VAR 0 6
43790: NOT
43791: IFFALSE 43795
// exit ;
43793: GO 44761
// for i in factories do
43795: LD_ADDR_VAR 0 8
43799: PUSH
43800: LD_VAR 0 6
43804: PUSH
43805: FOR_IN
43806: IFFALSE 43831
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43808: LD_ADDR_VAR 0 17
43812: PUSH
43813: LD_VAR 0 17
43817: PUSH
43818: LD_VAR 0 8
43822: PPUSH
43823: CALL_OW 478
43827: UNION
43828: ST_TO_ADDR
43829: GO 43805
43831: POP
43832: POP
// if not fac_list then
43833: LD_VAR 0 17
43837: NOT
43838: IFFALSE 43842
// exit ;
43840: GO 44761
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43842: LD_ADDR_VAR 0 5
43846: PUSH
43847: LD_INT 4
43849: PUSH
43850: LD_INT 5
43852: PUSH
43853: LD_INT 9
43855: PUSH
43856: LD_INT 10
43858: PUSH
43859: LD_INT 6
43861: PUSH
43862: LD_INT 7
43864: PUSH
43865: LD_INT 11
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 27
43879: PUSH
43880: LD_INT 28
43882: PUSH
43883: LD_INT 26
43885: PUSH
43886: LD_INT 30
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 43
43897: PUSH
43898: LD_INT 44
43900: PUSH
43901: LD_INT 46
43903: PUSH
43904: LD_INT 45
43906: PUSH
43907: LD_INT 47
43909: PUSH
43910: LD_INT 49
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: LIST
43925: PUSH
43926: LD_VAR 0 12
43930: ARRAY
43931: ST_TO_ADDR
// list := list isect fac_list ;
43932: LD_ADDR_VAR 0 5
43936: PUSH
43937: LD_VAR 0 5
43941: PUSH
43942: LD_VAR 0 17
43946: ISECT
43947: ST_TO_ADDR
// if not list then
43948: LD_VAR 0 5
43952: NOT
43953: IFFALSE 43957
// exit ;
43955: GO 44761
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43957: LD_VAR 0 12
43961: PUSH
43962: LD_INT 3
43964: EQUAL
43965: PUSH
43966: LD_INT 49
43968: PUSH
43969: LD_VAR 0 5
43973: IN
43974: AND
43975: PUSH
43976: LD_INT 31
43978: PPUSH
43979: LD_VAR 0 16
43983: PPUSH
43984: CALL_OW 321
43988: PUSH
43989: LD_INT 2
43991: EQUAL
43992: AND
43993: IFFALSE 44053
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43995: LD_INT 22
43997: PUSH
43998: LD_VAR 0 16
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 35
44009: PUSH
44010: LD_INT 49
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 91
44019: PUSH
44020: LD_VAR 0 1
44024: PUSH
44025: LD_INT 10
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: LIST
44037: PPUSH
44038: CALL_OW 69
44042: NOT
44043: IFFALSE 44053
// weapon := ru_time_lapser ;
44045: LD_ADDR_VAR 0 18
44049: PUSH
44050: LD_INT 49
44052: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44053: LD_VAR 0 12
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: IN
44068: PUSH
44069: LD_INT 11
44071: PUSH
44072: LD_VAR 0 5
44076: IN
44077: PUSH
44078: LD_INT 30
44080: PUSH
44081: LD_VAR 0 5
44085: IN
44086: OR
44087: AND
44088: PUSH
44089: LD_INT 6
44091: PPUSH
44092: LD_VAR 0 16
44096: PPUSH
44097: CALL_OW 321
44101: PUSH
44102: LD_INT 2
44104: EQUAL
44105: AND
44106: IFFALSE 44271
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44108: LD_INT 22
44110: PUSH
44111: LD_VAR 0 16
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: LD_INT 35
44125: PUSH
44126: LD_INT 11
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 35
44135: PUSH
44136: LD_INT 30
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 91
44150: PUSH
44151: LD_VAR 0 1
44155: PUSH
44156: LD_INT 18
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: LIST
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: PPUSH
44169: CALL_OW 69
44173: NOT
44174: PUSH
44175: LD_INT 22
44177: PUSH
44178: LD_VAR 0 16
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: LD_INT 30
44192: PUSH
44193: LD_INT 32
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 30
44202: PUSH
44203: LD_INT 33
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 91
44217: PUSH
44218: LD_VAR 0 1
44222: PUSH
44223: LD_INT 12
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: LIST
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: LIST
44235: PUSH
44236: EMPTY
44237: LIST
44238: PPUSH
44239: CALL_OW 69
44243: PUSH
44244: LD_INT 2
44246: GREATER
44247: AND
44248: IFFALSE 44271
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44250: LD_ADDR_VAR 0 18
44254: PUSH
44255: LD_INT 11
44257: PUSH
44258: LD_INT 30
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_VAR 0 12
44269: ARRAY
44270: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44271: LD_VAR 0 18
44275: NOT
44276: PUSH
44277: LD_INT 40
44279: PPUSH
44280: LD_VAR 0 16
44284: PPUSH
44285: CALL_OW 321
44289: PUSH
44290: LD_INT 2
44292: EQUAL
44293: AND
44294: PUSH
44295: LD_INT 7
44297: PUSH
44298: LD_VAR 0 5
44302: IN
44303: PUSH
44304: LD_INT 28
44306: PUSH
44307: LD_VAR 0 5
44311: IN
44312: OR
44313: PUSH
44314: LD_INT 45
44316: PUSH
44317: LD_VAR 0 5
44321: IN
44322: OR
44323: AND
44324: IFFALSE 44578
// begin hex := GetHexInfo ( x , y ) ;
44326: LD_ADDR_VAR 0 4
44330: PUSH
44331: LD_VAR 0 10
44335: PPUSH
44336: LD_VAR 0 11
44340: PPUSH
44341: CALL_OW 546
44345: ST_TO_ADDR
// if hex [ 1 ] then
44346: LD_VAR 0 4
44350: PUSH
44351: LD_INT 1
44353: ARRAY
44354: IFFALSE 44358
// exit ;
44356: GO 44761
// height := hex [ 2 ] ;
44358: LD_ADDR_VAR 0 15
44362: PUSH
44363: LD_VAR 0 4
44367: PUSH
44368: LD_INT 2
44370: ARRAY
44371: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44372: LD_ADDR_VAR 0 14
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: LD_INT 3
44385: PUSH
44386: LD_INT 5
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: ST_TO_ADDR
// for i in tmp do
44395: LD_ADDR_VAR 0 8
44399: PUSH
44400: LD_VAR 0 14
44404: PUSH
44405: FOR_IN
44406: IFFALSE 44576
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44408: LD_ADDR_VAR 0 9
44412: PUSH
44413: LD_VAR 0 10
44417: PPUSH
44418: LD_VAR 0 8
44422: PPUSH
44423: LD_INT 5
44425: PPUSH
44426: CALL_OW 272
44430: PUSH
44431: LD_VAR 0 11
44435: PPUSH
44436: LD_VAR 0 8
44440: PPUSH
44441: LD_INT 5
44443: PPUSH
44444: CALL_OW 273
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44453: LD_VAR 0 9
44457: PUSH
44458: LD_INT 1
44460: ARRAY
44461: PPUSH
44462: LD_VAR 0 9
44466: PUSH
44467: LD_INT 2
44469: ARRAY
44470: PPUSH
44471: CALL_OW 488
44475: IFFALSE 44574
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44477: LD_ADDR_VAR 0 4
44481: PUSH
44482: LD_VAR 0 9
44486: PUSH
44487: LD_INT 1
44489: ARRAY
44490: PPUSH
44491: LD_VAR 0 9
44495: PUSH
44496: LD_INT 2
44498: ARRAY
44499: PPUSH
44500: CALL_OW 546
44504: ST_TO_ADDR
// if hex [ 1 ] then
44505: LD_VAR 0 4
44509: PUSH
44510: LD_INT 1
44512: ARRAY
44513: IFFALSE 44517
// continue ;
44515: GO 44405
// h := hex [ 2 ] ;
44517: LD_ADDR_VAR 0 13
44521: PUSH
44522: LD_VAR 0 4
44526: PUSH
44527: LD_INT 2
44529: ARRAY
44530: ST_TO_ADDR
// if h + 7 < height then
44531: LD_VAR 0 13
44535: PUSH
44536: LD_INT 7
44538: PLUS
44539: PUSH
44540: LD_VAR 0 15
44544: LESS
44545: IFFALSE 44574
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44547: LD_ADDR_VAR 0 18
44551: PUSH
44552: LD_INT 7
44554: PUSH
44555: LD_INT 28
44557: PUSH
44558: LD_INT 45
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: PUSH
44566: LD_VAR 0 12
44570: ARRAY
44571: ST_TO_ADDR
// break ;
44572: GO 44576
// end ; end ; end ;
44574: GO 44405
44576: POP
44577: POP
// end ; if not weapon then
44578: LD_VAR 0 18
44582: NOT
44583: IFFALSE 44643
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44585: LD_ADDR_VAR 0 5
44589: PUSH
44590: LD_VAR 0 5
44594: PUSH
44595: LD_INT 11
44597: PUSH
44598: LD_INT 30
44600: PUSH
44601: LD_INT 49
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: DIFF
44609: ST_TO_ADDR
// if not list then
44610: LD_VAR 0 5
44614: NOT
44615: IFFALSE 44619
// exit ;
44617: GO 44761
// weapon := list [ rand ( 1 , list ) ] ;
44619: LD_ADDR_VAR 0 18
44623: PUSH
44624: LD_VAR 0 5
44628: PUSH
44629: LD_INT 1
44631: PPUSH
44632: LD_VAR 0 5
44636: PPUSH
44637: CALL_OW 12
44641: ARRAY
44642: ST_TO_ADDR
// end ; if weapon then
44643: LD_VAR 0 18
44647: IFFALSE 44761
// begin tmp := CostOfWeapon ( weapon ) ;
44649: LD_ADDR_VAR 0 14
44653: PUSH
44654: LD_VAR 0 18
44658: PPUSH
44659: CALL_OW 451
44663: ST_TO_ADDR
// j := GetBase ( tower ) ;
44664: LD_ADDR_VAR 0 9
44668: PUSH
44669: LD_VAR 0 1
44673: PPUSH
44674: CALL_OW 274
44678: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44679: LD_VAR 0 9
44683: PPUSH
44684: LD_INT 1
44686: PPUSH
44687: CALL_OW 275
44691: PUSH
44692: LD_VAR 0 14
44696: PUSH
44697: LD_INT 1
44699: ARRAY
44700: GREATEREQUAL
44701: PUSH
44702: LD_VAR 0 9
44706: PPUSH
44707: LD_INT 2
44709: PPUSH
44710: CALL_OW 275
44714: PUSH
44715: LD_VAR 0 14
44719: PUSH
44720: LD_INT 2
44722: ARRAY
44723: GREATEREQUAL
44724: AND
44725: PUSH
44726: LD_VAR 0 9
44730: PPUSH
44731: LD_INT 3
44733: PPUSH
44734: CALL_OW 275
44738: PUSH
44739: LD_VAR 0 14
44743: PUSH
44744: LD_INT 3
44746: ARRAY
44747: GREATEREQUAL
44748: AND
44749: IFFALSE 44761
// result := weapon ;
44751: LD_ADDR_VAR 0 3
44755: PUSH
44756: LD_VAR 0 18
44760: ST_TO_ADDR
// end ; end ;
44761: LD_VAR 0 3
44765: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44766: LD_INT 0
44768: PPUSH
44769: PPUSH
// result := true ;
44770: LD_ADDR_VAR 0 3
44774: PUSH
44775: LD_INT 1
44777: ST_TO_ADDR
// if array1 = array2 then
44778: LD_VAR 0 1
44782: PUSH
44783: LD_VAR 0 2
44787: EQUAL
44788: IFFALSE 44848
// begin for i = 1 to array1 do
44790: LD_ADDR_VAR 0 4
44794: PUSH
44795: DOUBLE
44796: LD_INT 1
44798: DEC
44799: ST_TO_ADDR
44800: LD_VAR 0 1
44804: PUSH
44805: FOR_TO
44806: IFFALSE 44844
// if array1 [ i ] <> array2 [ i ] then
44808: LD_VAR 0 1
44812: PUSH
44813: LD_VAR 0 4
44817: ARRAY
44818: PUSH
44819: LD_VAR 0 2
44823: PUSH
44824: LD_VAR 0 4
44828: ARRAY
44829: NONEQUAL
44830: IFFALSE 44842
// begin result := false ;
44832: LD_ADDR_VAR 0 3
44836: PUSH
44837: LD_INT 0
44839: ST_TO_ADDR
// break ;
44840: GO 44844
// end ;
44842: GO 44805
44844: POP
44845: POP
// end else
44846: GO 44856
// result := false ;
44848: LD_ADDR_VAR 0 3
44852: PUSH
44853: LD_INT 0
44855: ST_TO_ADDR
// end ;
44856: LD_VAR 0 3
44860: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44861: LD_INT 0
44863: PPUSH
44864: PPUSH
// if not array1 or not array2 then
44865: LD_VAR 0 1
44869: NOT
44870: PUSH
44871: LD_VAR 0 2
44875: NOT
44876: OR
44877: IFFALSE 44881
// exit ;
44879: GO 44945
// result := true ;
44881: LD_ADDR_VAR 0 3
44885: PUSH
44886: LD_INT 1
44888: ST_TO_ADDR
// for i = 1 to array1 do
44889: LD_ADDR_VAR 0 4
44893: PUSH
44894: DOUBLE
44895: LD_INT 1
44897: DEC
44898: ST_TO_ADDR
44899: LD_VAR 0 1
44903: PUSH
44904: FOR_TO
44905: IFFALSE 44943
// if array1 [ i ] <> array2 [ i ] then
44907: LD_VAR 0 1
44911: PUSH
44912: LD_VAR 0 4
44916: ARRAY
44917: PUSH
44918: LD_VAR 0 2
44922: PUSH
44923: LD_VAR 0 4
44927: ARRAY
44928: NONEQUAL
44929: IFFALSE 44941
// begin result := false ;
44931: LD_ADDR_VAR 0 3
44935: PUSH
44936: LD_INT 0
44938: ST_TO_ADDR
// break ;
44939: GO 44943
// end ;
44941: GO 44904
44943: POP
44944: POP
// end ;
44945: LD_VAR 0 3
44949: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44950: LD_INT 0
44952: PPUSH
44953: PPUSH
44954: PPUSH
// pom := GetBase ( fac ) ;
44955: LD_ADDR_VAR 0 5
44959: PUSH
44960: LD_VAR 0 1
44964: PPUSH
44965: CALL_OW 274
44969: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44970: LD_ADDR_VAR 0 4
44974: PUSH
44975: LD_VAR 0 2
44979: PUSH
44980: LD_INT 1
44982: ARRAY
44983: PPUSH
44984: LD_VAR 0 2
44988: PUSH
44989: LD_INT 2
44991: ARRAY
44992: PPUSH
44993: LD_VAR 0 2
44997: PUSH
44998: LD_INT 3
45000: ARRAY
45001: PPUSH
45002: LD_VAR 0 2
45006: PUSH
45007: LD_INT 4
45009: ARRAY
45010: PPUSH
45011: CALL_OW 449
45015: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45016: LD_ADDR_VAR 0 3
45020: PUSH
45021: LD_VAR 0 5
45025: PPUSH
45026: LD_INT 1
45028: PPUSH
45029: CALL_OW 275
45033: PUSH
45034: LD_VAR 0 4
45038: PUSH
45039: LD_INT 1
45041: ARRAY
45042: GREATEREQUAL
45043: PUSH
45044: LD_VAR 0 5
45048: PPUSH
45049: LD_INT 2
45051: PPUSH
45052: CALL_OW 275
45056: PUSH
45057: LD_VAR 0 4
45061: PUSH
45062: LD_INT 2
45064: ARRAY
45065: GREATEREQUAL
45066: AND
45067: PUSH
45068: LD_VAR 0 5
45072: PPUSH
45073: LD_INT 3
45075: PPUSH
45076: CALL_OW 275
45080: PUSH
45081: LD_VAR 0 4
45085: PUSH
45086: LD_INT 3
45088: ARRAY
45089: GREATEREQUAL
45090: AND
45091: ST_TO_ADDR
// end ;
45092: LD_VAR 0 3
45096: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45097: LD_INT 0
45099: PPUSH
45100: PPUSH
45101: PPUSH
45102: PPUSH
// pom := GetBase ( building ) ;
45103: LD_ADDR_VAR 0 3
45107: PUSH
45108: LD_VAR 0 1
45112: PPUSH
45113: CALL_OW 274
45117: ST_TO_ADDR
// if not pom then
45118: LD_VAR 0 3
45122: NOT
45123: IFFALSE 45127
// exit ;
45125: GO 45297
// btype := GetBType ( building ) ;
45127: LD_ADDR_VAR 0 5
45131: PUSH
45132: LD_VAR 0 1
45136: PPUSH
45137: CALL_OW 266
45141: ST_TO_ADDR
// if btype = b_armoury then
45142: LD_VAR 0 5
45146: PUSH
45147: LD_INT 4
45149: EQUAL
45150: IFFALSE 45160
// btype := b_barracks ;
45152: LD_ADDR_VAR 0 5
45156: PUSH
45157: LD_INT 5
45159: ST_TO_ADDR
// if btype = b_depot then
45160: LD_VAR 0 5
45164: PUSH
45165: LD_INT 0
45167: EQUAL
45168: IFFALSE 45178
// btype := b_warehouse ;
45170: LD_ADDR_VAR 0 5
45174: PUSH
45175: LD_INT 1
45177: ST_TO_ADDR
// if btype = b_workshop then
45178: LD_VAR 0 5
45182: PUSH
45183: LD_INT 2
45185: EQUAL
45186: IFFALSE 45196
// btype := b_factory ;
45188: LD_ADDR_VAR 0 5
45192: PUSH
45193: LD_INT 3
45195: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45196: LD_ADDR_VAR 0 4
45200: PUSH
45201: LD_VAR 0 5
45205: PPUSH
45206: LD_VAR 0 1
45210: PPUSH
45211: CALL_OW 248
45215: PPUSH
45216: CALL_OW 450
45220: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45221: LD_ADDR_VAR 0 2
45225: PUSH
45226: LD_VAR 0 3
45230: PPUSH
45231: LD_INT 1
45233: PPUSH
45234: CALL_OW 275
45238: PUSH
45239: LD_VAR 0 4
45243: PUSH
45244: LD_INT 1
45246: ARRAY
45247: GREATEREQUAL
45248: PUSH
45249: LD_VAR 0 3
45253: PPUSH
45254: LD_INT 2
45256: PPUSH
45257: CALL_OW 275
45261: PUSH
45262: LD_VAR 0 4
45266: PUSH
45267: LD_INT 2
45269: ARRAY
45270: GREATEREQUAL
45271: AND
45272: PUSH
45273: LD_VAR 0 3
45277: PPUSH
45278: LD_INT 3
45280: PPUSH
45281: CALL_OW 275
45285: PUSH
45286: LD_VAR 0 4
45290: PUSH
45291: LD_INT 3
45293: ARRAY
45294: GREATEREQUAL
45295: AND
45296: ST_TO_ADDR
// end ;
45297: LD_VAR 0 2
45301: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45302: LD_INT 0
45304: PPUSH
45305: PPUSH
45306: PPUSH
// pom := GetBase ( building ) ;
45307: LD_ADDR_VAR 0 4
45311: PUSH
45312: LD_VAR 0 1
45316: PPUSH
45317: CALL_OW 274
45321: ST_TO_ADDR
// if not pom then
45322: LD_VAR 0 4
45326: NOT
45327: IFFALSE 45331
// exit ;
45329: GO 45432
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45331: LD_ADDR_VAR 0 5
45335: PUSH
45336: LD_VAR 0 2
45340: PPUSH
45341: LD_VAR 0 1
45345: PPUSH
45346: CALL_OW 248
45350: PPUSH
45351: CALL_OW 450
45355: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45356: LD_ADDR_VAR 0 3
45360: PUSH
45361: LD_VAR 0 4
45365: PPUSH
45366: LD_INT 1
45368: PPUSH
45369: CALL_OW 275
45373: PUSH
45374: LD_VAR 0 5
45378: PUSH
45379: LD_INT 1
45381: ARRAY
45382: GREATEREQUAL
45383: PUSH
45384: LD_VAR 0 4
45388: PPUSH
45389: LD_INT 2
45391: PPUSH
45392: CALL_OW 275
45396: PUSH
45397: LD_VAR 0 5
45401: PUSH
45402: LD_INT 2
45404: ARRAY
45405: GREATEREQUAL
45406: AND
45407: PUSH
45408: LD_VAR 0 4
45412: PPUSH
45413: LD_INT 3
45415: PPUSH
45416: CALL_OW 275
45420: PUSH
45421: LD_VAR 0 5
45425: PUSH
45426: LD_INT 3
45428: ARRAY
45429: GREATEREQUAL
45430: AND
45431: ST_TO_ADDR
// end ;
45432: LD_VAR 0 3
45436: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45437: LD_INT 0
45439: PPUSH
45440: PPUSH
45441: PPUSH
45442: PPUSH
45443: PPUSH
45444: PPUSH
45445: PPUSH
45446: PPUSH
45447: PPUSH
45448: PPUSH
45449: PPUSH
// result := false ;
45450: LD_ADDR_VAR 0 8
45454: PUSH
45455: LD_INT 0
45457: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45458: LD_VAR 0 5
45462: NOT
45463: PUSH
45464: LD_VAR 0 1
45468: NOT
45469: OR
45470: PUSH
45471: LD_VAR 0 2
45475: NOT
45476: OR
45477: PUSH
45478: LD_VAR 0 3
45482: NOT
45483: OR
45484: IFFALSE 45488
// exit ;
45486: GO 46302
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45488: LD_ADDR_VAR 0 14
45492: PUSH
45493: LD_VAR 0 1
45497: PPUSH
45498: LD_VAR 0 2
45502: PPUSH
45503: LD_VAR 0 3
45507: PPUSH
45508: LD_VAR 0 4
45512: PPUSH
45513: LD_VAR 0 5
45517: PUSH
45518: LD_INT 1
45520: ARRAY
45521: PPUSH
45522: CALL_OW 248
45526: PPUSH
45527: LD_INT 0
45529: PPUSH
45530: CALL 47539 0 6
45534: ST_TO_ADDR
// if not hexes then
45535: LD_VAR 0 14
45539: NOT
45540: IFFALSE 45544
// exit ;
45542: GO 46302
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45544: LD_ADDR_VAR 0 17
45548: PUSH
45549: LD_VAR 0 5
45553: PPUSH
45554: LD_INT 22
45556: PUSH
45557: LD_VAR 0 13
45561: PPUSH
45562: CALL_OW 255
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: LD_INT 30
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 30
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PPUSH
45603: CALL_OW 72
45607: ST_TO_ADDR
// for i = 1 to hexes do
45608: LD_ADDR_VAR 0 9
45612: PUSH
45613: DOUBLE
45614: LD_INT 1
45616: DEC
45617: ST_TO_ADDR
45618: LD_VAR 0 14
45622: PUSH
45623: FOR_TO
45624: IFFALSE 46300
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45626: LD_ADDR_VAR 0 13
45630: PUSH
45631: LD_VAR 0 14
45635: PUSH
45636: LD_VAR 0 9
45640: ARRAY
45641: PUSH
45642: LD_INT 1
45644: ARRAY
45645: PPUSH
45646: LD_VAR 0 14
45650: PUSH
45651: LD_VAR 0 9
45655: ARRAY
45656: PUSH
45657: LD_INT 2
45659: ARRAY
45660: PPUSH
45661: CALL_OW 428
45665: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45666: LD_VAR 0 14
45670: PUSH
45671: LD_VAR 0 9
45675: ARRAY
45676: PUSH
45677: LD_INT 1
45679: ARRAY
45680: PPUSH
45681: LD_VAR 0 14
45685: PUSH
45686: LD_VAR 0 9
45690: ARRAY
45691: PUSH
45692: LD_INT 2
45694: ARRAY
45695: PPUSH
45696: CALL_OW 351
45700: PUSH
45701: LD_VAR 0 14
45705: PUSH
45706: LD_VAR 0 9
45710: ARRAY
45711: PUSH
45712: LD_INT 1
45714: ARRAY
45715: PPUSH
45716: LD_VAR 0 14
45720: PUSH
45721: LD_VAR 0 9
45725: ARRAY
45726: PUSH
45727: LD_INT 2
45729: ARRAY
45730: PPUSH
45731: CALL_OW 488
45735: NOT
45736: OR
45737: PUSH
45738: LD_VAR 0 13
45742: PPUSH
45743: CALL_OW 247
45747: PUSH
45748: LD_INT 3
45750: EQUAL
45751: OR
45752: IFFALSE 45758
// exit ;
45754: POP
45755: POP
45756: GO 46302
// if not tmp then
45758: LD_VAR 0 13
45762: NOT
45763: IFFALSE 45767
// continue ;
45765: GO 45623
// result := true ;
45767: LD_ADDR_VAR 0 8
45771: PUSH
45772: LD_INT 1
45774: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45775: LD_VAR 0 6
45779: PUSH
45780: LD_VAR 0 13
45784: PPUSH
45785: CALL_OW 247
45789: PUSH
45790: LD_INT 2
45792: EQUAL
45793: AND
45794: PUSH
45795: LD_VAR 0 13
45799: PPUSH
45800: CALL_OW 263
45804: PUSH
45805: LD_INT 1
45807: EQUAL
45808: AND
45809: IFFALSE 45973
// begin if IsDrivenBy ( tmp ) then
45811: LD_VAR 0 13
45815: PPUSH
45816: CALL_OW 311
45820: IFFALSE 45824
// continue ;
45822: GO 45623
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45824: LD_VAR 0 6
45828: PPUSH
45829: LD_INT 3
45831: PUSH
45832: LD_INT 60
45834: PUSH
45835: EMPTY
45836: LIST
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 3
45844: PUSH
45845: LD_INT 55
45847: PUSH
45848: EMPTY
45849: LIST
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PPUSH
45859: CALL_OW 72
45863: IFFALSE 45971
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45865: LD_ADDR_VAR 0 18
45869: PUSH
45870: LD_VAR 0 6
45874: PPUSH
45875: LD_INT 3
45877: PUSH
45878: LD_INT 60
45880: PUSH
45881: EMPTY
45882: LIST
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 3
45890: PUSH
45891: LD_INT 55
45893: PUSH
45894: EMPTY
45895: LIST
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PPUSH
45905: CALL_OW 72
45909: PUSH
45910: LD_INT 1
45912: ARRAY
45913: ST_TO_ADDR
// if IsInUnit ( driver ) then
45914: LD_VAR 0 18
45918: PPUSH
45919: CALL_OW 310
45923: IFFALSE 45934
// ComExit ( driver ) ;
45925: LD_VAR 0 18
45929: PPUSH
45930: CALL 70723 0 1
// AddComEnterUnit ( driver , tmp ) ;
45934: LD_VAR 0 18
45938: PPUSH
45939: LD_VAR 0 13
45943: PPUSH
45944: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45948: LD_VAR 0 18
45952: PPUSH
45953: LD_VAR 0 7
45957: PPUSH
45958: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45962: LD_VAR 0 18
45966: PPUSH
45967: CALL_OW 181
// end ; continue ;
45971: GO 45623
// end ; if not cleaners or not tmp in cleaners then
45973: LD_VAR 0 6
45977: NOT
45978: PUSH
45979: LD_VAR 0 13
45983: PUSH
45984: LD_VAR 0 6
45988: IN
45989: NOT
45990: OR
45991: IFFALSE 46298
// begin if dep then
45993: LD_VAR 0 17
45997: IFFALSE 46133
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45999: LD_ADDR_VAR 0 16
46003: PUSH
46004: LD_VAR 0 17
46008: PUSH
46009: LD_INT 1
46011: ARRAY
46012: PPUSH
46013: CALL_OW 250
46017: PPUSH
46018: LD_VAR 0 17
46022: PUSH
46023: LD_INT 1
46025: ARRAY
46026: PPUSH
46027: CALL_OW 254
46031: PPUSH
46032: LD_INT 5
46034: PPUSH
46035: CALL_OW 272
46039: PUSH
46040: LD_VAR 0 17
46044: PUSH
46045: LD_INT 1
46047: ARRAY
46048: PPUSH
46049: CALL_OW 251
46053: PPUSH
46054: LD_VAR 0 17
46058: PUSH
46059: LD_INT 1
46061: ARRAY
46062: PPUSH
46063: CALL_OW 254
46067: PPUSH
46068: LD_INT 5
46070: PPUSH
46071: CALL_OW 273
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46080: LD_VAR 0 16
46084: PUSH
46085: LD_INT 1
46087: ARRAY
46088: PPUSH
46089: LD_VAR 0 16
46093: PUSH
46094: LD_INT 2
46096: ARRAY
46097: PPUSH
46098: CALL_OW 488
46102: IFFALSE 46133
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46104: LD_VAR 0 13
46108: PPUSH
46109: LD_VAR 0 16
46113: PUSH
46114: LD_INT 1
46116: ARRAY
46117: PPUSH
46118: LD_VAR 0 16
46122: PUSH
46123: LD_INT 2
46125: ARRAY
46126: PPUSH
46127: CALL_OW 111
// continue ;
46131: GO 45623
// end ; end ; r := GetDir ( tmp ) ;
46133: LD_ADDR_VAR 0 15
46137: PUSH
46138: LD_VAR 0 13
46142: PPUSH
46143: CALL_OW 254
46147: ST_TO_ADDR
// if r = 5 then
46148: LD_VAR 0 15
46152: PUSH
46153: LD_INT 5
46155: EQUAL
46156: IFFALSE 46166
// r := 0 ;
46158: LD_ADDR_VAR 0 15
46162: PUSH
46163: LD_INT 0
46165: ST_TO_ADDR
// for j = r to 5 do
46166: LD_ADDR_VAR 0 10
46170: PUSH
46171: DOUBLE
46172: LD_VAR 0 15
46176: DEC
46177: ST_TO_ADDR
46178: LD_INT 5
46180: PUSH
46181: FOR_TO
46182: IFFALSE 46296
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46184: LD_ADDR_VAR 0 11
46188: PUSH
46189: LD_VAR 0 13
46193: PPUSH
46194: CALL_OW 250
46198: PPUSH
46199: LD_VAR 0 10
46203: PPUSH
46204: LD_INT 2
46206: PPUSH
46207: CALL_OW 272
46211: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46212: LD_ADDR_VAR 0 12
46216: PUSH
46217: LD_VAR 0 13
46221: PPUSH
46222: CALL_OW 251
46226: PPUSH
46227: LD_VAR 0 10
46231: PPUSH
46232: LD_INT 2
46234: PPUSH
46235: CALL_OW 273
46239: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46240: LD_VAR 0 11
46244: PPUSH
46245: LD_VAR 0 12
46249: PPUSH
46250: CALL_OW 488
46254: PUSH
46255: LD_VAR 0 11
46259: PPUSH
46260: LD_VAR 0 12
46264: PPUSH
46265: CALL_OW 428
46269: NOT
46270: AND
46271: IFFALSE 46294
// begin ComMoveXY ( tmp , _x , _y ) ;
46273: LD_VAR 0 13
46277: PPUSH
46278: LD_VAR 0 11
46282: PPUSH
46283: LD_VAR 0 12
46287: PPUSH
46288: CALL_OW 111
// break ;
46292: GO 46296
// end ; end ;
46294: GO 46181
46296: POP
46297: POP
// end ; end ;
46298: GO 45623
46300: POP
46301: POP
// end ;
46302: LD_VAR 0 8
46306: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46307: LD_INT 0
46309: PPUSH
// result := true ;
46310: LD_ADDR_VAR 0 3
46314: PUSH
46315: LD_INT 1
46317: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46318: LD_VAR 0 2
46322: PUSH
46323: LD_INT 24
46325: DOUBLE
46326: EQUAL
46327: IFTRUE 46337
46329: LD_INT 33
46331: DOUBLE
46332: EQUAL
46333: IFTRUE 46337
46335: GO 46362
46337: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46338: LD_ADDR_VAR 0 3
46342: PUSH
46343: LD_INT 32
46345: PPUSH
46346: LD_VAR 0 1
46350: PPUSH
46351: CALL_OW 321
46355: PUSH
46356: LD_INT 2
46358: EQUAL
46359: ST_TO_ADDR
46360: GO 46682
46362: LD_INT 20
46364: DOUBLE
46365: EQUAL
46366: IFTRUE 46370
46368: GO 46395
46370: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46371: LD_ADDR_VAR 0 3
46375: PUSH
46376: LD_INT 6
46378: PPUSH
46379: LD_VAR 0 1
46383: PPUSH
46384: CALL_OW 321
46388: PUSH
46389: LD_INT 2
46391: EQUAL
46392: ST_TO_ADDR
46393: GO 46682
46395: LD_INT 22
46397: DOUBLE
46398: EQUAL
46399: IFTRUE 46409
46401: LD_INT 36
46403: DOUBLE
46404: EQUAL
46405: IFTRUE 46409
46407: GO 46434
46409: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46410: LD_ADDR_VAR 0 3
46414: PUSH
46415: LD_INT 15
46417: PPUSH
46418: LD_VAR 0 1
46422: PPUSH
46423: CALL_OW 321
46427: PUSH
46428: LD_INT 2
46430: EQUAL
46431: ST_TO_ADDR
46432: GO 46682
46434: LD_INT 30
46436: DOUBLE
46437: EQUAL
46438: IFTRUE 46442
46440: GO 46467
46442: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46443: LD_ADDR_VAR 0 3
46447: PUSH
46448: LD_INT 20
46450: PPUSH
46451: LD_VAR 0 1
46455: PPUSH
46456: CALL_OW 321
46460: PUSH
46461: LD_INT 2
46463: EQUAL
46464: ST_TO_ADDR
46465: GO 46682
46467: LD_INT 28
46469: DOUBLE
46470: EQUAL
46471: IFTRUE 46481
46473: LD_INT 21
46475: DOUBLE
46476: EQUAL
46477: IFTRUE 46481
46479: GO 46506
46481: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46482: LD_ADDR_VAR 0 3
46486: PUSH
46487: LD_INT 21
46489: PPUSH
46490: LD_VAR 0 1
46494: PPUSH
46495: CALL_OW 321
46499: PUSH
46500: LD_INT 2
46502: EQUAL
46503: ST_TO_ADDR
46504: GO 46682
46506: LD_INT 16
46508: DOUBLE
46509: EQUAL
46510: IFTRUE 46514
46512: GO 46541
46514: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46515: LD_ADDR_VAR 0 3
46519: PUSH
46520: LD_EXP 48
46524: PPUSH
46525: LD_VAR 0 1
46529: PPUSH
46530: CALL_OW 321
46534: PUSH
46535: LD_INT 2
46537: EQUAL
46538: ST_TO_ADDR
46539: GO 46682
46541: LD_INT 19
46543: DOUBLE
46544: EQUAL
46545: IFTRUE 46555
46547: LD_INT 23
46549: DOUBLE
46550: EQUAL
46551: IFTRUE 46555
46553: GO 46582
46555: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46556: LD_ADDR_VAR 0 3
46560: PUSH
46561: LD_EXP 47
46565: PPUSH
46566: LD_VAR 0 1
46570: PPUSH
46571: CALL_OW 321
46575: PUSH
46576: LD_INT 2
46578: EQUAL
46579: ST_TO_ADDR
46580: GO 46682
46582: LD_INT 17
46584: DOUBLE
46585: EQUAL
46586: IFTRUE 46590
46588: GO 46615
46590: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46591: LD_ADDR_VAR 0 3
46595: PUSH
46596: LD_INT 39
46598: PPUSH
46599: LD_VAR 0 1
46603: PPUSH
46604: CALL_OW 321
46608: PUSH
46609: LD_INT 2
46611: EQUAL
46612: ST_TO_ADDR
46613: GO 46682
46615: LD_INT 18
46617: DOUBLE
46618: EQUAL
46619: IFTRUE 46623
46621: GO 46648
46623: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46624: LD_ADDR_VAR 0 3
46628: PUSH
46629: LD_INT 40
46631: PPUSH
46632: LD_VAR 0 1
46636: PPUSH
46637: CALL_OW 321
46641: PUSH
46642: LD_INT 2
46644: EQUAL
46645: ST_TO_ADDR
46646: GO 46682
46648: LD_INT 27
46650: DOUBLE
46651: EQUAL
46652: IFTRUE 46656
46654: GO 46681
46656: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46657: LD_ADDR_VAR 0 3
46661: PUSH
46662: LD_INT 35
46664: PPUSH
46665: LD_VAR 0 1
46669: PPUSH
46670: CALL_OW 321
46674: PUSH
46675: LD_INT 2
46677: EQUAL
46678: ST_TO_ADDR
46679: GO 46682
46681: POP
// end ;
46682: LD_VAR 0 3
46686: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46687: LD_INT 0
46689: PPUSH
46690: PPUSH
46691: PPUSH
46692: PPUSH
46693: PPUSH
46694: PPUSH
46695: PPUSH
46696: PPUSH
46697: PPUSH
46698: PPUSH
46699: PPUSH
// result := false ;
46700: LD_ADDR_VAR 0 6
46704: PUSH
46705: LD_INT 0
46707: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46708: LD_VAR 0 1
46712: NOT
46713: PUSH
46714: LD_VAR 0 1
46718: PPUSH
46719: CALL_OW 266
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: IN
46734: NOT
46735: OR
46736: PUSH
46737: LD_VAR 0 2
46741: NOT
46742: OR
46743: PUSH
46744: LD_VAR 0 5
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: LD_INT 3
46760: PUSH
46761: LD_INT 4
46763: PUSH
46764: LD_INT 5
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: IN
46775: NOT
46776: OR
46777: PUSH
46778: LD_VAR 0 3
46782: PPUSH
46783: LD_VAR 0 4
46787: PPUSH
46788: CALL_OW 488
46792: NOT
46793: OR
46794: IFFALSE 46798
// exit ;
46796: GO 47534
// side := GetSide ( depot ) ;
46798: LD_ADDR_VAR 0 9
46802: PUSH
46803: LD_VAR 0 1
46807: PPUSH
46808: CALL_OW 255
46812: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46813: LD_VAR 0 9
46817: PPUSH
46818: LD_VAR 0 2
46822: PPUSH
46823: CALL 46307 0 2
46827: NOT
46828: IFFALSE 46832
// exit ;
46830: GO 47534
// pom := GetBase ( depot ) ;
46832: LD_ADDR_VAR 0 10
46836: PUSH
46837: LD_VAR 0 1
46841: PPUSH
46842: CALL_OW 274
46846: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46847: LD_ADDR_VAR 0 11
46851: PUSH
46852: LD_VAR 0 2
46856: PPUSH
46857: LD_VAR 0 1
46861: PPUSH
46862: CALL_OW 248
46866: PPUSH
46867: CALL_OW 450
46871: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46872: LD_VAR 0 10
46876: PPUSH
46877: LD_INT 1
46879: PPUSH
46880: CALL_OW 275
46884: PUSH
46885: LD_VAR 0 11
46889: PUSH
46890: LD_INT 1
46892: ARRAY
46893: GREATEREQUAL
46894: PUSH
46895: LD_VAR 0 10
46899: PPUSH
46900: LD_INT 2
46902: PPUSH
46903: CALL_OW 275
46907: PUSH
46908: LD_VAR 0 11
46912: PUSH
46913: LD_INT 2
46915: ARRAY
46916: GREATEREQUAL
46917: AND
46918: PUSH
46919: LD_VAR 0 10
46923: PPUSH
46924: LD_INT 3
46926: PPUSH
46927: CALL_OW 275
46931: PUSH
46932: LD_VAR 0 11
46936: PUSH
46937: LD_INT 3
46939: ARRAY
46940: GREATEREQUAL
46941: AND
46942: NOT
46943: IFFALSE 46947
// exit ;
46945: GO 47534
// if GetBType ( depot ) = b_depot then
46947: LD_VAR 0 1
46951: PPUSH
46952: CALL_OW 266
46956: PUSH
46957: LD_INT 0
46959: EQUAL
46960: IFFALSE 46972
// dist := 28 else
46962: LD_ADDR_VAR 0 14
46966: PUSH
46967: LD_INT 28
46969: ST_TO_ADDR
46970: GO 46980
// dist := 36 ;
46972: LD_ADDR_VAR 0 14
46976: PUSH
46977: LD_INT 36
46979: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46980: LD_VAR 0 1
46984: PPUSH
46985: LD_VAR 0 3
46989: PPUSH
46990: LD_VAR 0 4
46994: PPUSH
46995: CALL_OW 297
46999: PUSH
47000: LD_VAR 0 14
47004: GREATER
47005: IFFALSE 47009
// exit ;
47007: GO 47534
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47009: LD_ADDR_VAR 0 12
47013: PUSH
47014: LD_VAR 0 2
47018: PPUSH
47019: LD_VAR 0 3
47023: PPUSH
47024: LD_VAR 0 4
47028: PPUSH
47029: LD_VAR 0 5
47033: PPUSH
47034: LD_VAR 0 1
47038: PPUSH
47039: CALL_OW 248
47043: PPUSH
47044: LD_INT 0
47046: PPUSH
47047: CALL 47539 0 6
47051: ST_TO_ADDR
// if not hexes then
47052: LD_VAR 0 12
47056: NOT
47057: IFFALSE 47061
// exit ;
47059: GO 47534
// hex := GetHexInfo ( x , y ) ;
47061: LD_ADDR_VAR 0 15
47065: PUSH
47066: LD_VAR 0 3
47070: PPUSH
47071: LD_VAR 0 4
47075: PPUSH
47076: CALL_OW 546
47080: ST_TO_ADDR
// if hex [ 1 ] then
47081: LD_VAR 0 15
47085: PUSH
47086: LD_INT 1
47088: ARRAY
47089: IFFALSE 47093
// exit ;
47091: GO 47534
// height := hex [ 2 ] ;
47093: LD_ADDR_VAR 0 13
47097: PUSH
47098: LD_VAR 0 15
47102: PUSH
47103: LD_INT 2
47105: ARRAY
47106: ST_TO_ADDR
// for i = 1 to hexes do
47107: LD_ADDR_VAR 0 7
47111: PUSH
47112: DOUBLE
47113: LD_INT 1
47115: DEC
47116: ST_TO_ADDR
47117: LD_VAR 0 12
47121: PUSH
47122: FOR_TO
47123: IFFALSE 47453
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47125: LD_VAR 0 12
47129: PUSH
47130: LD_VAR 0 7
47134: ARRAY
47135: PUSH
47136: LD_INT 1
47138: ARRAY
47139: PPUSH
47140: LD_VAR 0 12
47144: PUSH
47145: LD_VAR 0 7
47149: ARRAY
47150: PUSH
47151: LD_INT 2
47153: ARRAY
47154: PPUSH
47155: CALL_OW 488
47159: NOT
47160: PUSH
47161: LD_VAR 0 12
47165: PUSH
47166: LD_VAR 0 7
47170: ARRAY
47171: PUSH
47172: LD_INT 1
47174: ARRAY
47175: PPUSH
47176: LD_VAR 0 12
47180: PUSH
47181: LD_VAR 0 7
47185: ARRAY
47186: PUSH
47187: LD_INT 2
47189: ARRAY
47190: PPUSH
47191: CALL_OW 428
47195: PUSH
47196: LD_INT 0
47198: GREATER
47199: OR
47200: PUSH
47201: LD_VAR 0 12
47205: PUSH
47206: LD_VAR 0 7
47210: ARRAY
47211: PUSH
47212: LD_INT 1
47214: ARRAY
47215: PPUSH
47216: LD_VAR 0 12
47220: PUSH
47221: LD_VAR 0 7
47225: ARRAY
47226: PUSH
47227: LD_INT 2
47229: ARRAY
47230: PPUSH
47231: CALL_OW 351
47235: OR
47236: IFFALSE 47242
// exit ;
47238: POP
47239: POP
47240: GO 47534
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47242: LD_ADDR_VAR 0 8
47246: PUSH
47247: LD_VAR 0 12
47251: PUSH
47252: LD_VAR 0 7
47256: ARRAY
47257: PUSH
47258: LD_INT 1
47260: ARRAY
47261: PPUSH
47262: LD_VAR 0 12
47266: PUSH
47267: LD_VAR 0 7
47271: ARRAY
47272: PUSH
47273: LD_INT 2
47275: ARRAY
47276: PPUSH
47277: CALL_OW 546
47281: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47282: LD_VAR 0 8
47286: PUSH
47287: LD_INT 1
47289: ARRAY
47290: PUSH
47291: LD_VAR 0 8
47295: PUSH
47296: LD_INT 2
47298: ARRAY
47299: PUSH
47300: LD_VAR 0 13
47304: PUSH
47305: LD_INT 2
47307: PLUS
47308: GREATER
47309: OR
47310: PUSH
47311: LD_VAR 0 8
47315: PUSH
47316: LD_INT 2
47318: ARRAY
47319: PUSH
47320: LD_VAR 0 13
47324: PUSH
47325: LD_INT 2
47327: MINUS
47328: LESS
47329: OR
47330: PUSH
47331: LD_VAR 0 8
47335: PUSH
47336: LD_INT 3
47338: ARRAY
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 8
47345: PUSH
47346: LD_INT 9
47348: PUSH
47349: LD_INT 10
47351: PUSH
47352: LD_INT 11
47354: PUSH
47355: LD_INT 12
47357: PUSH
47358: LD_INT 13
47360: PUSH
47361: LD_INT 16
47363: PUSH
47364: LD_INT 17
47366: PUSH
47367: LD_INT 18
47369: PUSH
47370: LD_INT 19
47372: PUSH
47373: LD_INT 20
47375: PUSH
47376: LD_INT 21
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: IN
47394: NOT
47395: OR
47396: PUSH
47397: LD_VAR 0 8
47401: PUSH
47402: LD_INT 5
47404: ARRAY
47405: NOT
47406: OR
47407: PUSH
47408: LD_VAR 0 8
47412: PUSH
47413: LD_INT 6
47415: ARRAY
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 7
47425: PUSH
47426: LD_INT 9
47428: PUSH
47429: LD_INT 10
47431: PUSH
47432: LD_INT 11
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: IN
47443: NOT
47444: OR
47445: IFFALSE 47451
// exit ;
47447: POP
47448: POP
47449: GO 47534
// end ;
47451: GO 47122
47453: POP
47454: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47455: LD_VAR 0 9
47459: PPUSH
47460: LD_VAR 0 3
47464: PPUSH
47465: LD_VAR 0 4
47469: PPUSH
47470: LD_INT 20
47472: PPUSH
47473: CALL 39480 0 4
47477: PUSH
47478: LD_INT 4
47480: ARRAY
47481: IFFALSE 47485
// exit ;
47483: GO 47534
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47485: LD_VAR 0 2
47489: PUSH
47490: LD_INT 29
47492: PUSH
47493: LD_INT 30
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: IN
47500: PUSH
47501: LD_VAR 0 3
47505: PPUSH
47506: LD_VAR 0 4
47510: PPUSH
47511: LD_VAR 0 9
47515: PPUSH
47516: CALL_OW 440
47520: NOT
47521: AND
47522: IFFALSE 47526
// exit ;
47524: GO 47534
// result := true ;
47526: LD_ADDR_VAR 0 6
47530: PUSH
47531: LD_INT 1
47533: ST_TO_ADDR
// end ;
47534: LD_VAR 0 6
47538: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47539: LD_INT 0
47541: PPUSH
47542: PPUSH
47543: PPUSH
47544: PPUSH
47545: PPUSH
47546: PPUSH
47547: PPUSH
47548: PPUSH
47549: PPUSH
47550: PPUSH
47551: PPUSH
47552: PPUSH
47553: PPUSH
47554: PPUSH
47555: PPUSH
47556: PPUSH
47557: PPUSH
47558: PPUSH
47559: PPUSH
47560: PPUSH
47561: PPUSH
47562: PPUSH
47563: PPUSH
47564: PPUSH
47565: PPUSH
47566: PPUSH
47567: PPUSH
47568: PPUSH
47569: PPUSH
47570: PPUSH
47571: PPUSH
47572: PPUSH
47573: PPUSH
47574: PPUSH
47575: PPUSH
47576: PPUSH
47577: PPUSH
47578: PPUSH
47579: PPUSH
47580: PPUSH
47581: PPUSH
47582: PPUSH
47583: PPUSH
47584: PPUSH
47585: PPUSH
47586: PPUSH
47587: PPUSH
47588: PPUSH
47589: PPUSH
47590: PPUSH
47591: PPUSH
47592: PPUSH
47593: PPUSH
47594: PPUSH
47595: PPUSH
47596: PPUSH
47597: PPUSH
47598: PPUSH
// result = [ ] ;
47599: LD_ADDR_VAR 0 7
47603: PUSH
47604: EMPTY
47605: ST_TO_ADDR
// temp_list = [ ] ;
47606: LD_ADDR_VAR 0 9
47610: PUSH
47611: EMPTY
47612: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47613: LD_VAR 0 4
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: LD_INT 4
47632: PUSH
47633: LD_INT 5
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: IN
47644: NOT
47645: PUSH
47646: LD_VAR 0 1
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: IN
47661: PUSH
47662: LD_VAR 0 5
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: LD_INT 3
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: LIST
47680: IN
47681: NOT
47682: AND
47683: OR
47684: IFFALSE 47688
// exit ;
47686: GO 66079
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47688: LD_VAR 0 1
47692: PUSH
47693: LD_INT 6
47695: PUSH
47696: LD_INT 7
47698: PUSH
47699: LD_INT 8
47701: PUSH
47702: LD_INT 13
47704: PUSH
47705: LD_INT 12
47707: PUSH
47708: LD_INT 15
47710: PUSH
47711: LD_INT 11
47713: PUSH
47714: LD_INT 14
47716: PUSH
47717: LD_INT 10
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: IN
47731: IFFALSE 47741
// btype = b_lab ;
47733: LD_ADDR_VAR 0 1
47737: PUSH
47738: LD_INT 6
47740: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47741: LD_VAR 0 6
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: IN
47760: NOT
47761: PUSH
47762: LD_VAR 0 1
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: LD_INT 3
47778: PUSH
47779: LD_INT 6
47781: PUSH
47782: LD_INT 36
47784: PUSH
47785: LD_INT 4
47787: PUSH
47788: LD_INT 5
47790: PUSH
47791: LD_INT 31
47793: PUSH
47794: LD_INT 32
47796: PUSH
47797: LD_INT 33
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: IN
47813: NOT
47814: PUSH
47815: LD_VAR 0 6
47819: PUSH
47820: LD_INT 1
47822: EQUAL
47823: AND
47824: OR
47825: PUSH
47826: LD_VAR 0 1
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 3
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: IN
47841: NOT
47842: PUSH
47843: LD_VAR 0 6
47847: PUSH
47848: LD_INT 2
47850: EQUAL
47851: AND
47852: OR
47853: IFFALSE 47863
// mode = 0 ;
47855: LD_ADDR_VAR 0 6
47859: PUSH
47860: LD_INT 0
47862: ST_TO_ADDR
// case mode of 0 :
47863: LD_VAR 0 6
47867: PUSH
47868: LD_INT 0
47870: DOUBLE
47871: EQUAL
47872: IFTRUE 47876
47874: GO 59329
47876: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47877: LD_ADDR_VAR 0 11
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 3
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 3
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48070: LD_ADDR_VAR 0 12
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 3
48227: NEG
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 3
48238: NEG
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48266: LD_ADDR_VAR 0 13
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: LD_INT 2
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 3
48425: NEG
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: NEG
48438: PUSH
48439: LD_INT 3
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48465: LD_ADDR_VAR 0 14
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 3
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48661: LD_ADDR_VAR 0 15
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 3
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 3
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48854: LD_ADDR_VAR 0 16
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 2
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: LD_INT 2
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: LD_INT 3
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49047: LD_ADDR_VAR 0 17
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 2
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49277: LD_ADDR_VAR 0 18
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: NEG
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: NEG
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49507: LD_ADDR_VAR 0 19
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49737: LD_ADDR_VAR 0 20
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49967: LD_ADDR_VAR 0 21
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50197: LD_ADDR_VAR 0 22
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 2
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50427: LD_ADDR_VAR 0 23
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 3
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50707: LD_ADDR_VAR 0 24
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 3
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 3
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50983: LD_ADDR_VAR 0 25
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: NEG
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 3
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: LD_INT 3
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 3
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51257: LD_ADDR_VAR 0 26
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 2
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: LD_INT 2
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: LD_INT 3
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 3
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51533: LD_ADDR_VAR 0 27
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 2
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 3
51766: NEG
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 3
51778: NEG
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51813: LD_ADDR_VAR 0 28
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: NEG
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 2
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: NEG
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 3
52060: NEG
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52095: LD_ADDR_VAR 0 29
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: LD_INT 3
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: LD_INT 3
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 3
52339: NEG
52340: PUSH
52341: LD_INT 2
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52374: LD_ADDR_VAR 0 30
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 2
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 3
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 3
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52652: LD_ADDR_VAR 0 31
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 2
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: LD_INT 3
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 3
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 3
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52930: LD_ADDR_VAR 0 32
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 3
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: LD_INT 3
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 3
53173: NEG
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53208: LD_ADDR_VAR 0 33
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 2
53398: NEG
53399: PUSH
53400: LD_INT 3
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 3
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 3
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53487: LD_ADDR_VAR 0 34
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: NEG
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: LD_INT 3
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53767: LD_ADDR_VAR 0 35
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53879: LD_ADDR_VAR 0 36
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53991: LD_ADDR_VAR 0 37
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54103: LD_ADDR_VAR 0 38
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54215: LD_ADDR_VAR 0 39
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54327: LD_ADDR_VAR 0 40
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54439: LD_ADDR_VAR 0 41
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 3
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 3
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: PUSH
54693: LD_INT 3
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 3
54713: NEG
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 3
54724: NEG
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 3
54736: NEG
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 3
54748: NEG
54749: PUSH
54750: LD_INT 3
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54789: LD_ADDR_VAR 0 42
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: LD_INT 3
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 3
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_INT 3
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 3
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 3
55035: PUSH
55036: LD_INT 3
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 3
55098: NEG
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55139: LD_ADDR_VAR 0 43
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 3
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 3
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 3
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 3
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 3
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 3
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 2
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 3
55435: NEG
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 3
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55487: LD_ADDR_VAR 0 44
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: LD_INT 3
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 3
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 3
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 3
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 3
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: NEG
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 3
55772: NEG
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 3
55784: NEG
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: LD_INT 3
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55837: LD_ADDR_VAR 0 45
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 2
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 3
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 2
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 3
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 3
56083: PUSH
56084: LD_INT 3
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 3
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 3
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 3
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: LD_INT 2
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 3
56146: NEG
56147: PUSH
56148: LD_INT 3
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56187: LD_ADDR_VAR 0 46
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 3
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 3
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: LD_INT 3
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 3
56494: NEG
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56535: LD_ADDR_VAR 0 47
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 2
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 2
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56686: LD_ADDR_VAR 0 48
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56833: LD_ADDR_VAR 0 49
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56977: LD_ADDR_VAR 0 50
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 2
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: LD_INT 2
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: LD_INT 2
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57121: LD_ADDR_VAR 0 51
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 2
57233: NEG
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57268: LD_ADDR_VAR 0 52
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57419: LD_ADDR_VAR 0 53
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57649: LD_ADDR_VAR 0 54
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: LD_INT 2
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57879: LD_ADDR_VAR 0 55
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 2
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58109: LD_ADDR_VAR 0 56
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: NEG
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: NEG
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58339: LD_ADDR_VAR 0 57
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 2
58538: NEG
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58569: LD_ADDR_VAR 0 58
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 2
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58799: LD_ADDR_VAR 0 59
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58887: LD_ADDR_VAR 0 60
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58975: LD_ADDR_VAR 0 61
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59063: LD_ADDR_VAR 0 62
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59151: LD_ADDR_VAR 0 63
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59239: LD_ADDR_VAR 0 64
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 1
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: ST_TO_ADDR
// end ; 1 :
59327: GO 65224
59329: LD_INT 1
59331: DOUBLE
59332: EQUAL
59333: IFTRUE 59337
59335: GO 61960
59337: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59338: LD_ADDR_VAR 0 11
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: LD_INT 3
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59382: LD_ADDR_VAR 0 12
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 3
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 3
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59423: LD_ADDR_VAR 0 13
59427: PUSH
59428: LD_INT 3
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 3
59440: PUSH
59441: LD_INT 3
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: LIST
59462: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59463: LD_ADDR_VAR 0 14
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 3
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: LIST
59503: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59504: LD_ADDR_VAR 0 15
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: LIST
59547: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59548: LD_ADDR_VAR 0 16
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 3
59567: NEG
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: LD_INT 3
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: LIST
59593: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59594: LD_ADDR_VAR 0 17
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: LD_INT 3
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 3
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59638: LD_ADDR_VAR 0 18
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: LD_INT 1
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 3
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: LIST
59678: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59679: LD_ADDR_VAR 0 19
59683: PUSH
59684: LD_INT 3
59686: PUSH
59687: LD_INT 2
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: LD_INT 3
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: LD_INT 3
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: LIST
59718: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59719: LD_ADDR_VAR 0 20
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: LD_INT 3
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: LD_INT 2
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: LIST
59759: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59760: LD_ADDR_VAR 0 21
59764: PUSH
59765: LD_INT 2
59767: NEG
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 3
59778: NEG
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: NEG
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: LIST
59803: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59804: LD_ADDR_VAR 0 22
59808: PUSH
59809: LD_INT 2
59811: NEG
59812: PUSH
59813: LD_INT 3
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 3
59823: NEG
59824: PUSH
59825: LD_INT 2
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 3
59835: NEG
59836: PUSH
59837: LD_INT 3
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: LIST
59849: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59850: LD_ADDR_VAR 0 23
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: LD_INT 3
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 4
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 3
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59894: LD_ADDR_VAR 0 24
59898: PUSH
59899: LD_INT 3
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 3
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 4
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: LIST
59934: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59935: LD_ADDR_VAR 0 25
59939: PUSH
59940: LD_INT 3
59942: PUSH
59943: LD_INT 3
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 4
59952: PUSH
59953: LD_INT 3
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 3
59962: PUSH
59963: LD_INT 4
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: LIST
59974: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59975: LD_ADDR_VAR 0 26
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: LD_INT 3
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: LD_INT 4
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: LD_INT 3
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: LIST
60015: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60016: LD_ADDR_VAR 0 27
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 3
60034: NEG
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 4
60045: NEG
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: LIST
60059: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60060: LD_ADDR_VAR 0 28
60064: PUSH
60065: LD_INT 3
60067: NEG
60068: PUSH
60069: LD_INT 3
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 3
60079: NEG
60080: PUSH
60081: LD_INT 4
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 4
60091: NEG
60092: PUSH
60093: LD_INT 3
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: LIST
60105: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60106: LD_ADDR_VAR 0 29
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: LD_INT 3
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: LD_INT 4
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 4
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: LD_INT 5
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: LD_INT 5
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: LD_INT 4
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: NEG
60216: PUSH
60217: LD_INT 6
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 6
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: LD_INT 5
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60261: LD_ADDR_VAR 0 30
60265: PUSH
60266: LD_INT 2
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 3
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 3
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 4
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 4
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 4
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 5
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 5
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 5
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 6
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 6
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60404: LD_ADDR_VAR 0 31
60408: PUSH
60409: LD_INT 3
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: LD_INT 3
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: LD_INT 3
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 4
60441: PUSH
60442: LD_INT 3
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 4
60451: PUSH
60452: LD_INT 4
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: LD_INT 4
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 5
60471: PUSH
60472: LD_INT 4
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 5
60481: PUSH
60482: LD_INT 5
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 4
60491: PUSH
60492: LD_INT 5
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 6
60501: PUSH
60502: LD_INT 5
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 6
60511: PUSH
60512: LD_INT 6
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 5
60521: PUSH
60522: LD_INT 6
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60543: LD_ADDR_VAR 0 32
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 3
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 3
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 3
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: LD_INT 5
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 5
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: LD_INT 4
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: LD_INT 6
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 6
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 5
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60686: LD_ADDR_VAR 0 33
60690: PUSH
60691: LD_INT 2
60693: NEG
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 3
60704: NEG
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 3
60715: NEG
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 3
60727: NEG
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 4
60738: NEG
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 4
60749: NEG
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 4
60761: NEG
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 5
60772: NEG
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 5
60783: NEG
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 5
60795: NEG
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 6
60806: NEG
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 6
60817: NEG
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60841: LD_ADDR_VAR 0 34
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: LD_INT 3
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 3
60860: NEG
60861: PUSH
60862: LD_INT 2
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 3
60872: NEG
60873: PUSH
60874: LD_INT 3
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: LD_INT 4
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 4
60896: NEG
60897: PUSH
60898: LD_INT 3
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 4
60908: NEG
60909: PUSH
60910: LD_INT 4
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 4
60920: NEG
60921: PUSH
60922: LD_INT 5
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 5
60932: NEG
60933: PUSH
60934: LD_INT 4
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 5
60944: NEG
60945: PUSH
60946: LD_INT 5
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 5
60956: NEG
60957: PUSH
60958: LD_INT 6
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 6
60968: NEG
60969: PUSH
60970: LD_INT 5
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 6
60980: NEG
60981: PUSH
60982: LD_INT 6
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61004: LD_ADDR_VAR 0 41
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 2
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 3
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61048: LD_ADDR_VAR 0 42
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 3
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61089: LD_ADDR_VAR 0 43
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 3
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: LD_INT 3
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: LIST
61128: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61129: LD_ADDR_VAR 0 44
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: LD_INT 2
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: LD_INT 2
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: LIST
61169: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61170: LD_ADDR_VAR 0 45
61174: PUSH
61175: LD_INT 2
61177: NEG
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 3
61199: NEG
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61214: LD_ADDR_VAR 0 46
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 2
61233: NEG
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 3
61245: NEG
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: LIST
61259: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61260: LD_ADDR_VAR 0 47
61264: PUSH
61265: LD_INT 2
61267: NEG
61268: PUSH
61269: LD_INT 3
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61293: LD_ADDR_VAR 0 48
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: LD_INT 2
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61324: LD_ADDR_VAR 0 49
61328: PUSH
61329: LD_INT 3
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 3
61341: PUSH
61342: LD_INT 2
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61353: LD_ADDR_VAR 0 50
61357: PUSH
61358: LD_INT 2
61360: PUSH
61361: LD_INT 3
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 3
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61382: LD_ADDR_VAR 0 51
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61413: LD_ADDR_VAR 0 52
61417: PUSH
61418: LD_INT 3
61420: NEG
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 3
61432: NEG
61433: PUSH
61434: LD_INT 2
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61446: LD_ADDR_VAR 0 53
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: LD_INT 3
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 3
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: LD_INT 2
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61490: LD_ADDR_VAR 0 54
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 3
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 3
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: LIST
61530: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61531: LD_ADDR_VAR 0 55
61535: PUSH
61536: LD_INT 3
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 3
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: LD_INT 3
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: LIST
61570: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61571: LD_ADDR_VAR 0 56
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: LD_INT 3
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: NEG
61599: PUSH
61600: LD_INT 2
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: LIST
61611: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61612: LD_ADDR_VAR 0 57
61616: PUSH
61617: LD_INT 2
61619: NEG
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 3
61630: NEG
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 3
61641: NEG
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: LIST
61655: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61656: LD_ADDR_VAR 0 58
61660: PUSH
61661: LD_INT 2
61663: NEG
61664: PUSH
61665: LD_INT 3
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 3
61675: NEG
61676: PUSH
61677: LD_INT 2
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 3
61687: NEG
61688: PUSH
61689: LD_INT 3
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: LIST
61701: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61702: LD_ADDR_VAR 0 59
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 2
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 1
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61746: LD_ADDR_VAR 0 60
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: LIST
61786: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61787: LD_ADDR_VAR 0 61
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: LIST
61826: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61827: LD_ADDR_VAR 0 62
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: LD_INT 2
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61868: LD_ADDR_VAR 0 63
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: LIST
61911: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61912: LD_ADDR_VAR 0 64
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 2
61931: NEG
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: LIST
61957: ST_TO_ADDR
// end ; 2 :
61958: GO 65224
61960: LD_INT 2
61962: DOUBLE
61963: EQUAL
61964: IFTRUE 61968
61966: GO 65223
61968: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61969: LD_ADDR_VAR 0 29
61973: PUSH
61974: LD_INT 4
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 4
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 5
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 5
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 4
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 3
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: LD_INT 2
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 5
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 3
62069: PUSH
62070: LD_INT 3
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: LD_INT 2
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 4
62089: PUSH
62090: LD_INT 3
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 4
62099: PUSH
62100: LD_INT 4
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: LD_INT 4
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 2
62119: PUSH
62120: LD_INT 3
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: LD_INT 2
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 4
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: LD_INT 4
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 4
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: LD_INT 3
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: LD_INT 4
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: LD_INT 5
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: LD_INT 5
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: LD_INT 4
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: LD_INT 3
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 2
62231: PUSH
62232: LD_INT 5
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 2
62241: NEG
62242: PUSH
62243: LD_INT 3
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 3
62252: NEG
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 3
62263: NEG
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 2
62275: NEG
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 2
62286: NEG
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 3
62297: NEG
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 4
62308: NEG
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 4
62319: NEG
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 4
62331: NEG
62332: PUSH
62333: LD_INT 2
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 2
62343: NEG
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 4
62354: NEG
62355: PUSH
62356: LD_INT 4
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 4
62366: NEG
62367: PUSH
62368: LD_INT 5
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 3
62378: NEG
62379: PUSH
62380: LD_INT 4
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 3
62390: NEG
62391: PUSH
62392: LD_INT 3
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 4
62402: NEG
62403: PUSH
62404: LD_INT 3
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 5
62414: NEG
62415: PUSH
62416: LD_INT 4
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 5
62426: NEG
62427: PUSH
62428: LD_INT 5
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 3
62438: NEG
62439: PUSH
62440: LD_INT 5
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 5
62450: NEG
62451: PUSH
62452: LD_INT 3
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62507: LD_ADDR_VAR 0 30
62511: PUSH
62512: LD_INT 4
62514: PUSH
62515: LD_INT 4
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 4
62524: PUSH
62525: LD_INT 3
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 5
62534: PUSH
62535: LD_INT 4
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 5
62544: PUSH
62545: LD_INT 5
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 4
62554: PUSH
62555: LD_INT 5
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 3
62564: PUSH
62565: LD_INT 4
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 3
62574: PUSH
62575: LD_INT 3
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 5
62584: PUSH
62585: LD_INT 3
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 3
62594: PUSH
62595: LD_INT 5
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_INT 3
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 2
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: LD_INT 3
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: LD_INT 4
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 4
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: LD_INT 3
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: LD_INT 2
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: LD_INT 4
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 2
62686: NEG
62687: PUSH
62688: LD_INT 2
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 4
62697: NEG
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 4
62708: NEG
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 3
62720: NEG
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 3
62731: NEG
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 4
62742: NEG
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 5
62753: NEG
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 5
62764: NEG
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 5
62776: NEG
62777: PUSH
62778: LD_INT 2
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 3
62788: NEG
62789: PUSH
62790: LD_INT 2
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 3
62799: NEG
62800: PUSH
62801: LD_INT 3
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 3
62811: NEG
62812: PUSH
62813: LD_INT 4
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 2
62823: NEG
62824: PUSH
62825: LD_INT 3
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 2
62835: NEG
62836: PUSH
62837: LD_INT 2
62839: NEG
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 3
62847: NEG
62848: PUSH
62849: LD_INT 2
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 4
62859: NEG
62860: PUSH
62861: LD_INT 3
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 4
62871: NEG
62872: PUSH
62873: LD_INT 4
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: LD_INT 4
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 4
62895: NEG
62896: PUSH
62897: LD_INT 2
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: LD_INT 4
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: LD_INT 5
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 4
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: LD_INT 3
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: LD_INT 3
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 1
62962: NEG
62963: PUSH
62964: LD_INT 4
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: LD_INT 5
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 2
62986: PUSH
62987: LD_INT 3
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 2
62997: NEG
62998: PUSH
62999: LD_INT 5
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63054: LD_ADDR_VAR 0 31
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: LD_INT 4
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: LD_INT 3
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: LD_INT 4
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: LD_INT 5
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: LD_INT 5
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 4
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: LD_INT 3
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 2
63133: PUSH
63134: LD_INT 5
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 2
63143: NEG
63144: PUSH
63145: LD_INT 3
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 3
63154: NEG
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 3
63165: NEG
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 2
63177: NEG
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 2
63188: NEG
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 3
63199: NEG
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 4
63210: NEG
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 4
63221: NEG
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 4
63233: NEG
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 2
63245: NEG
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 4
63256: NEG
63257: PUSH
63258: LD_INT 4
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 4
63268: NEG
63269: PUSH
63270: LD_INT 5
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 3
63280: NEG
63281: PUSH
63282: LD_INT 4
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 3
63292: NEG
63293: PUSH
63294: LD_INT 3
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 4
63304: NEG
63305: PUSH
63306: LD_INT 3
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 5
63316: NEG
63317: PUSH
63318: LD_INT 4
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 5
63328: NEG
63329: PUSH
63330: LD_INT 5
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 3
63340: NEG
63341: PUSH
63342: LD_INT 5
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 5
63352: NEG
63353: PUSH
63354: LD_INT 3
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: LD_INT 3
63367: NEG
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: LD_INT 4
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: LD_INT 3
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: PUSH
63398: LD_INT 2
63400: NEG
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: LD_INT 2
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 3
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: PUSH
63433: LD_INT 4
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 2
63443: PUSH
63444: LD_INT 2
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: NEG
63455: PUSH
63456: LD_INT 4
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 4
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 4
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 5
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 5
63497: PUSH
63498: LD_INT 1
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 4
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 3
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 3
63538: PUSH
63539: LD_INT 2
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 5
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63604: LD_ADDR_VAR 0 32
63608: PUSH
63609: LD_INT 4
63611: NEG
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 4
63622: NEG
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 3
63634: NEG
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 3
63645: NEG
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 4
63656: NEG
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 5
63667: NEG
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 5
63678: NEG
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 5
63690: NEG
63691: PUSH
63692: LD_INT 2
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 3
63702: NEG
63703: PUSH
63704: LD_INT 2
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 3
63713: NEG
63714: PUSH
63715: LD_INT 3
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 3
63725: NEG
63726: PUSH
63727: LD_INT 4
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 2
63737: NEG
63738: PUSH
63739: LD_INT 3
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 3
63761: NEG
63762: PUSH
63763: LD_INT 2
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 4
63773: NEG
63774: PUSH
63775: LD_INT 3
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 4
63785: NEG
63786: PUSH
63787: LD_INT 4
63789: NEG
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 2
63797: NEG
63798: PUSH
63799: LD_INT 4
63801: NEG
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 4
63809: NEG
63810: PUSH
63811: LD_INT 2
63813: NEG
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: LD_INT 4
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: LD_INT 5
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: PUSH
63844: LD_INT 4
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: LD_INT 3
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: LD_INT 4
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: NEG
63889: PUSH
63890: LD_INT 5
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 2
63900: PUSH
63901: LD_INT 3
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 2
63911: NEG
63912: PUSH
63913: LD_INT 5
63915: NEG
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 3
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 3
63933: PUSH
63934: LD_INT 1
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 4
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 4
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 3
63964: PUSH
63965: LD_INT 1
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 2
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 2
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 2
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 4
64006: PUSH
64007: LD_INT 2
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 4
64016: PUSH
64017: LD_INT 4
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 4
64026: PUSH
64027: LD_INT 3
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 5
64036: PUSH
64037: LD_INT 4
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 5
64046: PUSH
64047: LD_INT 5
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 4
64056: PUSH
64057: LD_INT 5
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 3
64066: PUSH
64067: LD_INT 4
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 3
64076: PUSH
64077: LD_INT 3
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 5
64086: PUSH
64087: LD_INT 3
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 3
64096: PUSH
64097: LD_INT 5
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64151: LD_ADDR_VAR 0 33
64155: PUSH
64156: LD_INT 4
64158: NEG
64159: PUSH
64160: LD_INT 4
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 4
64170: NEG
64171: PUSH
64172: LD_INT 5
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 3
64182: NEG
64183: PUSH
64184: LD_INT 4
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 3
64194: NEG
64195: PUSH
64196: LD_INT 3
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 4
64206: NEG
64207: PUSH
64208: LD_INT 3
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 5
64218: NEG
64219: PUSH
64220: LD_INT 4
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 5
64230: NEG
64231: PUSH
64232: LD_INT 5
64234: NEG
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 3
64242: NEG
64243: PUSH
64244: LD_INT 5
64246: NEG
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 5
64254: NEG
64255: PUSH
64256: LD_INT 3
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: LD_INT 3
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: LD_INT 4
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: LD_INT 3
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: PUSH
64300: LD_INT 2
64302: NEG
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 2
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: NEG
64322: PUSH
64323: LD_INT 3
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: LD_INT 4
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: LD_INT 2
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 2
64356: NEG
64357: PUSH
64358: LD_INT 4
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 4
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 4
64378: PUSH
64379: LD_INT 1
64381: NEG
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 5
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 5
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 4
64409: PUSH
64410: LD_INT 1
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 3
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 3
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 3
64440: PUSH
64441: LD_INT 2
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 5
64451: PUSH
64452: LD_INT 2
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 3
64461: PUSH
64462: LD_INT 3
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 3
64471: PUSH
64472: LD_INT 2
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 4
64481: PUSH
64482: LD_INT 3
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 4
64491: PUSH
64492: LD_INT 4
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 3
64501: PUSH
64502: LD_INT 4
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 2
64511: PUSH
64512: LD_INT 3
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 2
64521: PUSH
64522: LD_INT 2
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 4
64531: PUSH
64532: LD_INT 2
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 2
64541: PUSH
64542: LD_INT 4
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: LD_INT 4
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: LD_INT 3
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: PUSH
64572: LD_INT 4
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: LD_INT 5
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: LD_INT 5
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: NEG
64602: PUSH
64603: LD_INT 4
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: NEG
64613: PUSH
64614: LD_INT 3
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 2
64623: PUSH
64624: LD_INT 5
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 2
64633: NEG
64634: PUSH
64635: LD_INT 3
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64689: LD_ADDR_VAR 0 34
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: LD_INT 4
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 0
64707: PUSH
64708: LD_INT 5
64710: NEG
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: LD_INT 4
64721: NEG
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 1
64729: PUSH
64730: LD_INT 3
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: LD_INT 3
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: LD_INT 4
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 1
64763: NEG
64764: PUSH
64765: LD_INT 5
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 2
64775: PUSH
64776: LD_INT 3
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 2
64786: NEG
64787: PUSH
64788: LD_INT 5
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 3
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 3
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 4
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 4
64829: PUSH
64830: LD_INT 1
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 3
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 2
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 2
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 2
64870: PUSH
64871: LD_INT 2
64873: NEG
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 4
64881: PUSH
64882: LD_INT 2
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 4
64891: PUSH
64892: LD_INT 4
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 4
64901: PUSH
64902: LD_INT 3
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 5
64911: PUSH
64912: LD_INT 4
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 5
64921: PUSH
64922: LD_INT 5
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 4
64931: PUSH
64932: LD_INT 5
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 3
64941: PUSH
64942: LD_INT 4
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 3
64951: PUSH
64952: LD_INT 3
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 5
64961: PUSH
64962: LD_INT 3
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 3
64971: PUSH
64972: LD_INT 5
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: LD_INT 3
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: LD_INT 3
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 1
65011: PUSH
65012: LD_INT 4
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 4
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: NEG
65032: PUSH
65033: LD_INT 3
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: LD_INT 2
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 2
65053: PUSH
65054: LD_INT 4
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 2
65063: NEG
65064: PUSH
65065: LD_INT 2
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 4
65074: NEG
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 4
65085: NEG
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 3
65097: NEG
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 3
65108: NEG
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 4
65119: NEG
65120: PUSH
65121: LD_INT 1
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 5
65130: NEG
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 5
65141: NEG
65142: PUSH
65143: LD_INT 1
65145: NEG
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 5
65153: NEG
65154: PUSH
65155: LD_INT 2
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 3
65165: NEG
65166: PUSH
65167: LD_INT 2
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: ST_TO_ADDR
// end ; end ;
65221: GO 65224
65223: POP
// case btype of b_depot , b_warehouse :
65224: LD_VAR 0 1
65228: PUSH
65229: LD_INT 0
65231: DOUBLE
65232: EQUAL
65233: IFTRUE 65243
65235: LD_INT 1
65237: DOUBLE
65238: EQUAL
65239: IFTRUE 65243
65241: GO 65444
65243: POP
// case nation of nation_american :
65244: LD_VAR 0 5
65248: PUSH
65249: LD_INT 1
65251: DOUBLE
65252: EQUAL
65253: IFTRUE 65257
65255: GO 65313
65257: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65258: LD_ADDR_VAR 0 9
65262: PUSH
65263: LD_VAR 0 11
65267: PUSH
65268: LD_VAR 0 12
65272: PUSH
65273: LD_VAR 0 13
65277: PUSH
65278: LD_VAR 0 14
65282: PUSH
65283: LD_VAR 0 15
65287: PUSH
65288: LD_VAR 0 16
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: PUSH
65301: LD_VAR 0 4
65305: PUSH
65306: LD_INT 1
65308: PLUS
65309: ARRAY
65310: ST_TO_ADDR
65311: GO 65442
65313: LD_INT 2
65315: DOUBLE
65316: EQUAL
65317: IFTRUE 65321
65319: GO 65377
65321: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65322: LD_ADDR_VAR 0 9
65326: PUSH
65327: LD_VAR 0 17
65331: PUSH
65332: LD_VAR 0 18
65336: PUSH
65337: LD_VAR 0 19
65341: PUSH
65342: LD_VAR 0 20
65346: PUSH
65347: LD_VAR 0 21
65351: PUSH
65352: LD_VAR 0 22
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: PUSH
65365: LD_VAR 0 4
65369: PUSH
65370: LD_INT 1
65372: PLUS
65373: ARRAY
65374: ST_TO_ADDR
65375: GO 65442
65377: LD_INT 3
65379: DOUBLE
65380: EQUAL
65381: IFTRUE 65385
65383: GO 65441
65385: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65386: LD_ADDR_VAR 0 9
65390: PUSH
65391: LD_VAR 0 23
65395: PUSH
65396: LD_VAR 0 24
65400: PUSH
65401: LD_VAR 0 25
65405: PUSH
65406: LD_VAR 0 26
65410: PUSH
65411: LD_VAR 0 27
65415: PUSH
65416: LD_VAR 0 28
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: PUSH
65429: LD_VAR 0 4
65433: PUSH
65434: LD_INT 1
65436: PLUS
65437: ARRAY
65438: ST_TO_ADDR
65439: GO 65442
65441: POP
65442: GO 65997
65444: LD_INT 2
65446: DOUBLE
65447: EQUAL
65448: IFTRUE 65458
65450: LD_INT 3
65452: DOUBLE
65453: EQUAL
65454: IFTRUE 65458
65456: GO 65514
65458: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65459: LD_ADDR_VAR 0 9
65463: PUSH
65464: LD_VAR 0 29
65468: PUSH
65469: LD_VAR 0 30
65473: PUSH
65474: LD_VAR 0 31
65478: PUSH
65479: LD_VAR 0 32
65483: PUSH
65484: LD_VAR 0 33
65488: PUSH
65489: LD_VAR 0 34
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: PUSH
65502: LD_VAR 0 4
65506: PUSH
65507: LD_INT 1
65509: PLUS
65510: ARRAY
65511: ST_TO_ADDR
65512: GO 65997
65514: LD_INT 16
65516: DOUBLE
65517: EQUAL
65518: IFTRUE 65576
65520: LD_INT 17
65522: DOUBLE
65523: EQUAL
65524: IFTRUE 65576
65526: LD_INT 18
65528: DOUBLE
65529: EQUAL
65530: IFTRUE 65576
65532: LD_INT 19
65534: DOUBLE
65535: EQUAL
65536: IFTRUE 65576
65538: LD_INT 22
65540: DOUBLE
65541: EQUAL
65542: IFTRUE 65576
65544: LD_INT 20
65546: DOUBLE
65547: EQUAL
65548: IFTRUE 65576
65550: LD_INT 21
65552: DOUBLE
65553: EQUAL
65554: IFTRUE 65576
65556: LD_INT 23
65558: DOUBLE
65559: EQUAL
65560: IFTRUE 65576
65562: LD_INT 24
65564: DOUBLE
65565: EQUAL
65566: IFTRUE 65576
65568: LD_INT 25
65570: DOUBLE
65571: EQUAL
65572: IFTRUE 65576
65574: GO 65632
65576: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65577: LD_ADDR_VAR 0 9
65581: PUSH
65582: LD_VAR 0 35
65586: PUSH
65587: LD_VAR 0 36
65591: PUSH
65592: LD_VAR 0 37
65596: PUSH
65597: LD_VAR 0 38
65601: PUSH
65602: LD_VAR 0 39
65606: PUSH
65607: LD_VAR 0 40
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: PUSH
65620: LD_VAR 0 4
65624: PUSH
65625: LD_INT 1
65627: PLUS
65628: ARRAY
65629: ST_TO_ADDR
65630: GO 65997
65632: LD_INT 6
65634: DOUBLE
65635: EQUAL
65636: IFTRUE 65688
65638: LD_INT 7
65640: DOUBLE
65641: EQUAL
65642: IFTRUE 65688
65644: LD_INT 8
65646: DOUBLE
65647: EQUAL
65648: IFTRUE 65688
65650: LD_INT 13
65652: DOUBLE
65653: EQUAL
65654: IFTRUE 65688
65656: LD_INT 12
65658: DOUBLE
65659: EQUAL
65660: IFTRUE 65688
65662: LD_INT 15
65664: DOUBLE
65665: EQUAL
65666: IFTRUE 65688
65668: LD_INT 11
65670: DOUBLE
65671: EQUAL
65672: IFTRUE 65688
65674: LD_INT 14
65676: DOUBLE
65677: EQUAL
65678: IFTRUE 65688
65680: LD_INT 10
65682: DOUBLE
65683: EQUAL
65684: IFTRUE 65688
65686: GO 65744
65688: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65689: LD_ADDR_VAR 0 9
65693: PUSH
65694: LD_VAR 0 41
65698: PUSH
65699: LD_VAR 0 42
65703: PUSH
65704: LD_VAR 0 43
65708: PUSH
65709: LD_VAR 0 44
65713: PUSH
65714: LD_VAR 0 45
65718: PUSH
65719: LD_VAR 0 46
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: PUSH
65732: LD_VAR 0 4
65736: PUSH
65737: LD_INT 1
65739: PLUS
65740: ARRAY
65741: ST_TO_ADDR
65742: GO 65997
65744: LD_INT 36
65746: DOUBLE
65747: EQUAL
65748: IFTRUE 65752
65750: GO 65808
65752: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65753: LD_ADDR_VAR 0 9
65757: PUSH
65758: LD_VAR 0 47
65762: PUSH
65763: LD_VAR 0 48
65767: PUSH
65768: LD_VAR 0 49
65772: PUSH
65773: LD_VAR 0 50
65777: PUSH
65778: LD_VAR 0 51
65782: PUSH
65783: LD_VAR 0 52
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: PUSH
65796: LD_VAR 0 4
65800: PUSH
65801: LD_INT 1
65803: PLUS
65804: ARRAY
65805: ST_TO_ADDR
65806: GO 65997
65808: LD_INT 4
65810: DOUBLE
65811: EQUAL
65812: IFTRUE 65834
65814: LD_INT 5
65816: DOUBLE
65817: EQUAL
65818: IFTRUE 65834
65820: LD_INT 34
65822: DOUBLE
65823: EQUAL
65824: IFTRUE 65834
65826: LD_INT 37
65828: DOUBLE
65829: EQUAL
65830: IFTRUE 65834
65832: GO 65890
65834: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65835: LD_ADDR_VAR 0 9
65839: PUSH
65840: LD_VAR 0 53
65844: PUSH
65845: LD_VAR 0 54
65849: PUSH
65850: LD_VAR 0 55
65854: PUSH
65855: LD_VAR 0 56
65859: PUSH
65860: LD_VAR 0 57
65864: PUSH
65865: LD_VAR 0 58
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: PUSH
65878: LD_VAR 0 4
65882: PUSH
65883: LD_INT 1
65885: PLUS
65886: ARRAY
65887: ST_TO_ADDR
65888: GO 65997
65890: LD_INT 31
65892: DOUBLE
65893: EQUAL
65894: IFTRUE 65940
65896: LD_INT 32
65898: DOUBLE
65899: EQUAL
65900: IFTRUE 65940
65902: LD_INT 33
65904: DOUBLE
65905: EQUAL
65906: IFTRUE 65940
65908: LD_INT 27
65910: DOUBLE
65911: EQUAL
65912: IFTRUE 65940
65914: LD_INT 26
65916: DOUBLE
65917: EQUAL
65918: IFTRUE 65940
65920: LD_INT 28
65922: DOUBLE
65923: EQUAL
65924: IFTRUE 65940
65926: LD_INT 29
65928: DOUBLE
65929: EQUAL
65930: IFTRUE 65940
65932: LD_INT 30
65934: DOUBLE
65935: EQUAL
65936: IFTRUE 65940
65938: GO 65996
65940: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65941: LD_ADDR_VAR 0 9
65945: PUSH
65946: LD_VAR 0 59
65950: PUSH
65951: LD_VAR 0 60
65955: PUSH
65956: LD_VAR 0 61
65960: PUSH
65961: LD_VAR 0 62
65965: PUSH
65966: LD_VAR 0 63
65970: PUSH
65971: LD_VAR 0 64
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: PUSH
65984: LD_VAR 0 4
65988: PUSH
65989: LD_INT 1
65991: PLUS
65992: ARRAY
65993: ST_TO_ADDR
65994: GO 65997
65996: POP
// temp_list2 = [ ] ;
65997: LD_ADDR_VAR 0 10
66001: PUSH
66002: EMPTY
66003: ST_TO_ADDR
// for i in temp_list do
66004: LD_ADDR_VAR 0 8
66008: PUSH
66009: LD_VAR 0 9
66013: PUSH
66014: FOR_IN
66015: IFFALSE 66067
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66017: LD_ADDR_VAR 0 10
66021: PUSH
66022: LD_VAR 0 10
66026: PUSH
66027: LD_VAR 0 8
66031: PUSH
66032: LD_INT 1
66034: ARRAY
66035: PUSH
66036: LD_VAR 0 2
66040: PLUS
66041: PUSH
66042: LD_VAR 0 8
66046: PUSH
66047: LD_INT 2
66049: ARRAY
66050: PUSH
66051: LD_VAR 0 3
66055: PLUS
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: EMPTY
66062: LIST
66063: ADD
66064: ST_TO_ADDR
66065: GO 66014
66067: POP
66068: POP
// result = temp_list2 ;
66069: LD_ADDR_VAR 0 7
66073: PUSH
66074: LD_VAR 0 10
66078: ST_TO_ADDR
// end ;
66079: LD_VAR 0 7
66083: RET
// export function EnemyInRange ( unit , dist ) ; begin
66084: LD_INT 0
66086: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66087: LD_ADDR_VAR 0 3
66091: PUSH
66092: LD_VAR 0 1
66096: PPUSH
66097: CALL_OW 255
66101: PPUSH
66102: LD_VAR 0 1
66106: PPUSH
66107: CALL_OW 250
66111: PPUSH
66112: LD_VAR 0 1
66116: PPUSH
66117: CALL_OW 251
66121: PPUSH
66122: LD_VAR 0 2
66126: PPUSH
66127: CALL 39480 0 4
66131: PUSH
66132: LD_INT 4
66134: ARRAY
66135: ST_TO_ADDR
// end ;
66136: LD_VAR 0 3
66140: RET
// export function PlayerSeeMe ( unit ) ; begin
66141: LD_INT 0
66143: PPUSH
// result := See ( your_side , unit ) ;
66144: LD_ADDR_VAR 0 2
66148: PUSH
66149: LD_OWVAR 2
66153: PPUSH
66154: LD_VAR 0 1
66158: PPUSH
66159: CALL_OW 292
66163: ST_TO_ADDR
// end ;
66164: LD_VAR 0 2
66168: RET
// export function ReverseDir ( unit ) ; begin
66169: LD_INT 0
66171: PPUSH
// if not unit then
66172: LD_VAR 0 1
66176: NOT
66177: IFFALSE 66181
// exit ;
66179: GO 66204
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66181: LD_ADDR_VAR 0 2
66185: PUSH
66186: LD_VAR 0 1
66190: PPUSH
66191: CALL_OW 254
66195: PUSH
66196: LD_INT 3
66198: PLUS
66199: PUSH
66200: LD_INT 6
66202: MOD
66203: ST_TO_ADDR
// end ;
66204: LD_VAR 0 2
66208: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66209: LD_INT 0
66211: PPUSH
66212: PPUSH
66213: PPUSH
66214: PPUSH
66215: PPUSH
// if not hexes then
66216: LD_VAR 0 2
66220: NOT
66221: IFFALSE 66225
// exit ;
66223: GO 66373
// dist := 9999 ;
66225: LD_ADDR_VAR 0 5
66229: PUSH
66230: LD_INT 9999
66232: ST_TO_ADDR
// for i = 1 to hexes do
66233: LD_ADDR_VAR 0 4
66237: PUSH
66238: DOUBLE
66239: LD_INT 1
66241: DEC
66242: ST_TO_ADDR
66243: LD_VAR 0 2
66247: PUSH
66248: FOR_TO
66249: IFFALSE 66361
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66251: LD_VAR 0 1
66255: PPUSH
66256: LD_VAR 0 2
66260: PUSH
66261: LD_VAR 0 4
66265: ARRAY
66266: PUSH
66267: LD_INT 1
66269: ARRAY
66270: PPUSH
66271: LD_VAR 0 2
66275: PUSH
66276: LD_VAR 0 4
66280: ARRAY
66281: PUSH
66282: LD_INT 2
66284: ARRAY
66285: PPUSH
66286: CALL_OW 297
66290: PUSH
66291: LD_VAR 0 5
66295: LESS
66296: IFFALSE 66359
// begin hex := hexes [ i ] ;
66298: LD_ADDR_VAR 0 7
66302: PUSH
66303: LD_VAR 0 2
66307: PUSH
66308: LD_VAR 0 4
66312: ARRAY
66313: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66314: LD_ADDR_VAR 0 5
66318: PUSH
66319: LD_VAR 0 1
66323: PPUSH
66324: LD_VAR 0 2
66328: PUSH
66329: LD_VAR 0 4
66333: ARRAY
66334: PUSH
66335: LD_INT 1
66337: ARRAY
66338: PPUSH
66339: LD_VAR 0 2
66343: PUSH
66344: LD_VAR 0 4
66348: ARRAY
66349: PUSH
66350: LD_INT 2
66352: ARRAY
66353: PPUSH
66354: CALL_OW 297
66358: ST_TO_ADDR
// end ; end ;
66359: GO 66248
66361: POP
66362: POP
// result := hex ;
66363: LD_ADDR_VAR 0 3
66367: PUSH
66368: LD_VAR 0 7
66372: ST_TO_ADDR
// end ;
66373: LD_VAR 0 3
66377: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66378: LD_INT 0
66380: PPUSH
66381: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66382: LD_VAR 0 1
66386: NOT
66387: PUSH
66388: LD_VAR 0 1
66392: PUSH
66393: LD_INT 21
66395: PUSH
66396: LD_INT 2
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 23
66405: PUSH
66406: LD_INT 2
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PPUSH
66417: CALL_OW 69
66421: IN
66422: NOT
66423: OR
66424: IFFALSE 66428
// exit ;
66426: GO 66475
// for i = 1 to 3 do
66428: LD_ADDR_VAR 0 3
66432: PUSH
66433: DOUBLE
66434: LD_INT 1
66436: DEC
66437: ST_TO_ADDR
66438: LD_INT 3
66440: PUSH
66441: FOR_TO
66442: IFFALSE 66473
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66444: LD_VAR 0 1
66448: PPUSH
66449: CALL_OW 250
66453: PPUSH
66454: LD_VAR 0 1
66458: PPUSH
66459: CALL_OW 251
66463: PPUSH
66464: LD_INT 1
66466: PPUSH
66467: CALL_OW 453
66471: GO 66441
66473: POP
66474: POP
// end ;
66475: LD_VAR 0 2
66479: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66480: LD_INT 0
66482: PPUSH
66483: PPUSH
66484: PPUSH
66485: PPUSH
66486: PPUSH
66487: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
66488: LD_VAR 0 1
66492: NOT
66493: PUSH
66494: LD_VAR 0 2
66498: NOT
66499: OR
66500: PUSH
66501: LD_VAR 0 1
66505: PPUSH
66506: CALL_OW 314
66510: OR
66511: IFFALSE 66515
// exit ;
66513: GO 66956
// x := GetX ( enemy_unit ) ;
66515: LD_ADDR_VAR 0 7
66519: PUSH
66520: LD_VAR 0 2
66524: PPUSH
66525: CALL_OW 250
66529: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66530: LD_ADDR_VAR 0 8
66534: PUSH
66535: LD_VAR 0 2
66539: PPUSH
66540: CALL_OW 251
66544: ST_TO_ADDR
// if not x or not y then
66545: LD_VAR 0 7
66549: NOT
66550: PUSH
66551: LD_VAR 0 8
66555: NOT
66556: OR
66557: IFFALSE 66561
// exit ;
66559: GO 66956
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66561: LD_ADDR_VAR 0 6
66565: PUSH
66566: LD_VAR 0 7
66570: PPUSH
66571: LD_INT 0
66573: PPUSH
66574: LD_INT 4
66576: PPUSH
66577: CALL_OW 272
66581: PUSH
66582: LD_VAR 0 8
66586: PPUSH
66587: LD_INT 0
66589: PPUSH
66590: LD_INT 4
66592: PPUSH
66593: CALL_OW 273
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_VAR 0 7
66606: PPUSH
66607: LD_INT 1
66609: PPUSH
66610: LD_INT 4
66612: PPUSH
66613: CALL_OW 272
66617: PUSH
66618: LD_VAR 0 8
66622: PPUSH
66623: LD_INT 1
66625: PPUSH
66626: LD_INT 4
66628: PPUSH
66629: CALL_OW 273
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_VAR 0 7
66642: PPUSH
66643: LD_INT 2
66645: PPUSH
66646: LD_INT 4
66648: PPUSH
66649: CALL_OW 272
66653: PUSH
66654: LD_VAR 0 8
66658: PPUSH
66659: LD_INT 2
66661: PPUSH
66662: LD_INT 4
66664: PPUSH
66665: CALL_OW 273
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_VAR 0 7
66678: PPUSH
66679: LD_INT 3
66681: PPUSH
66682: LD_INT 4
66684: PPUSH
66685: CALL_OW 272
66689: PUSH
66690: LD_VAR 0 8
66694: PPUSH
66695: LD_INT 3
66697: PPUSH
66698: LD_INT 4
66700: PPUSH
66701: CALL_OW 273
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_VAR 0 7
66714: PPUSH
66715: LD_INT 4
66717: PPUSH
66718: LD_INT 4
66720: PPUSH
66721: CALL_OW 272
66725: PUSH
66726: LD_VAR 0 8
66730: PPUSH
66731: LD_INT 4
66733: PPUSH
66734: LD_INT 4
66736: PPUSH
66737: CALL_OW 273
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_VAR 0 7
66750: PPUSH
66751: LD_INT 5
66753: PPUSH
66754: LD_INT 4
66756: PPUSH
66757: CALL_OW 272
66761: PUSH
66762: LD_VAR 0 8
66766: PPUSH
66767: LD_INT 5
66769: PPUSH
66770: LD_INT 4
66772: PPUSH
66773: CALL_OW 273
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: ST_TO_ADDR
// for i = tmp downto 1 do
66790: LD_ADDR_VAR 0 4
66794: PUSH
66795: DOUBLE
66796: LD_VAR 0 6
66800: INC
66801: ST_TO_ADDR
66802: LD_INT 1
66804: PUSH
66805: FOR_DOWNTO
66806: IFFALSE 66907
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66808: LD_VAR 0 6
66812: PUSH
66813: LD_VAR 0 4
66817: ARRAY
66818: PUSH
66819: LD_INT 1
66821: ARRAY
66822: PPUSH
66823: LD_VAR 0 6
66827: PUSH
66828: LD_VAR 0 4
66832: ARRAY
66833: PUSH
66834: LD_INT 2
66836: ARRAY
66837: PPUSH
66838: CALL_OW 488
66842: NOT
66843: PUSH
66844: LD_VAR 0 6
66848: PUSH
66849: LD_VAR 0 4
66853: ARRAY
66854: PUSH
66855: LD_INT 1
66857: ARRAY
66858: PPUSH
66859: LD_VAR 0 6
66863: PUSH
66864: LD_VAR 0 4
66868: ARRAY
66869: PUSH
66870: LD_INT 2
66872: ARRAY
66873: PPUSH
66874: CALL_OW 428
66878: PUSH
66879: LD_INT 0
66881: NONEQUAL
66882: OR
66883: IFFALSE 66905
// tmp := Delete ( tmp , i ) ;
66885: LD_ADDR_VAR 0 6
66889: PUSH
66890: LD_VAR 0 6
66894: PPUSH
66895: LD_VAR 0 4
66899: PPUSH
66900: CALL_OW 3
66904: ST_TO_ADDR
66905: GO 66805
66907: POP
66908: POP
// j := GetClosestHex ( unit , tmp ) ;
66909: LD_ADDR_VAR 0 5
66913: PUSH
66914: LD_VAR 0 1
66918: PPUSH
66919: LD_VAR 0 6
66923: PPUSH
66924: CALL 66209 0 2
66928: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66929: LD_VAR 0 1
66933: PPUSH
66934: LD_VAR 0 5
66938: PUSH
66939: LD_INT 1
66941: ARRAY
66942: PPUSH
66943: LD_VAR 0 5
66947: PUSH
66948: LD_INT 2
66950: ARRAY
66951: PPUSH
66952: CALL_OW 111
// end ;
66956: LD_VAR 0 3
66960: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66961: LD_INT 0
66963: PPUSH
66964: PPUSH
66965: PPUSH
// uc_side = 0 ;
66966: LD_ADDR_OWVAR 20
66970: PUSH
66971: LD_INT 0
66973: ST_TO_ADDR
// uc_nation = 0 ;
66974: LD_ADDR_OWVAR 21
66978: PUSH
66979: LD_INT 0
66981: ST_TO_ADDR
// InitHc_All ( ) ;
66982: CALL_OW 584
// InitVc ;
66986: CALL_OW 20
// if mastodonts then
66990: LD_VAR 0 6
66994: IFFALSE 67061
// for i = 1 to mastodonts do
66996: LD_ADDR_VAR 0 11
67000: PUSH
67001: DOUBLE
67002: LD_INT 1
67004: DEC
67005: ST_TO_ADDR
67006: LD_VAR 0 6
67010: PUSH
67011: FOR_TO
67012: IFFALSE 67059
// begin vc_chassis := 31 ;
67014: LD_ADDR_OWVAR 37
67018: PUSH
67019: LD_INT 31
67021: ST_TO_ADDR
// vc_control := control_rider ;
67022: LD_ADDR_OWVAR 38
67026: PUSH
67027: LD_INT 4
67029: ST_TO_ADDR
// animal := CreateVehicle ;
67030: LD_ADDR_VAR 0 12
67034: PUSH
67035: CALL_OW 45
67039: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67040: LD_VAR 0 12
67044: PPUSH
67045: LD_VAR 0 8
67049: PPUSH
67050: LD_INT 0
67052: PPUSH
67053: CALL 69249 0 3
// end ;
67057: GO 67011
67059: POP
67060: POP
// if horses then
67061: LD_VAR 0 5
67065: IFFALSE 67132
// for i = 1 to horses do
67067: LD_ADDR_VAR 0 11
67071: PUSH
67072: DOUBLE
67073: LD_INT 1
67075: DEC
67076: ST_TO_ADDR
67077: LD_VAR 0 5
67081: PUSH
67082: FOR_TO
67083: IFFALSE 67130
// begin hc_class := 21 ;
67085: LD_ADDR_OWVAR 28
67089: PUSH
67090: LD_INT 21
67092: ST_TO_ADDR
// hc_gallery :=  ;
67093: LD_ADDR_OWVAR 33
67097: PUSH
67098: LD_STRING 
67100: ST_TO_ADDR
// animal := CreateHuman ;
67101: LD_ADDR_VAR 0 12
67105: PUSH
67106: CALL_OW 44
67110: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67111: LD_VAR 0 12
67115: PPUSH
67116: LD_VAR 0 8
67120: PPUSH
67121: LD_INT 0
67123: PPUSH
67124: CALL 69249 0 3
// end ;
67128: GO 67082
67130: POP
67131: POP
// if birds then
67132: LD_VAR 0 1
67136: IFFALSE 67203
// for i = 1 to birds do
67138: LD_ADDR_VAR 0 11
67142: PUSH
67143: DOUBLE
67144: LD_INT 1
67146: DEC
67147: ST_TO_ADDR
67148: LD_VAR 0 1
67152: PUSH
67153: FOR_TO
67154: IFFALSE 67201
// begin hc_class = 18 ;
67156: LD_ADDR_OWVAR 28
67160: PUSH
67161: LD_INT 18
67163: ST_TO_ADDR
// hc_gallery =  ;
67164: LD_ADDR_OWVAR 33
67168: PUSH
67169: LD_STRING 
67171: ST_TO_ADDR
// animal := CreateHuman ;
67172: LD_ADDR_VAR 0 12
67176: PUSH
67177: CALL_OW 44
67181: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67182: LD_VAR 0 12
67186: PPUSH
67187: LD_VAR 0 8
67191: PPUSH
67192: LD_INT 0
67194: PPUSH
67195: CALL 69249 0 3
// end ;
67199: GO 67153
67201: POP
67202: POP
// if tigers then
67203: LD_VAR 0 2
67207: IFFALSE 67291
// for i = 1 to tigers do
67209: LD_ADDR_VAR 0 11
67213: PUSH
67214: DOUBLE
67215: LD_INT 1
67217: DEC
67218: ST_TO_ADDR
67219: LD_VAR 0 2
67223: PUSH
67224: FOR_TO
67225: IFFALSE 67289
// begin hc_class = class_tiger ;
67227: LD_ADDR_OWVAR 28
67231: PUSH
67232: LD_INT 14
67234: ST_TO_ADDR
// hc_gallery =  ;
67235: LD_ADDR_OWVAR 33
67239: PUSH
67240: LD_STRING 
67242: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67243: LD_ADDR_OWVAR 35
67247: PUSH
67248: LD_INT 7
67250: NEG
67251: PPUSH
67252: LD_INT 7
67254: PPUSH
67255: CALL_OW 12
67259: ST_TO_ADDR
// animal := CreateHuman ;
67260: LD_ADDR_VAR 0 12
67264: PUSH
67265: CALL_OW 44
67269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67270: LD_VAR 0 12
67274: PPUSH
67275: LD_VAR 0 8
67279: PPUSH
67280: LD_INT 0
67282: PPUSH
67283: CALL 69249 0 3
// end ;
67287: GO 67224
67289: POP
67290: POP
// if apemans then
67291: LD_VAR 0 3
67295: IFFALSE 67418
// for i = 1 to apemans do
67297: LD_ADDR_VAR 0 11
67301: PUSH
67302: DOUBLE
67303: LD_INT 1
67305: DEC
67306: ST_TO_ADDR
67307: LD_VAR 0 3
67311: PUSH
67312: FOR_TO
67313: IFFALSE 67416
// begin hc_class = class_apeman ;
67315: LD_ADDR_OWVAR 28
67319: PUSH
67320: LD_INT 12
67322: ST_TO_ADDR
// hc_gallery =  ;
67323: LD_ADDR_OWVAR 33
67327: PUSH
67328: LD_STRING 
67330: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67331: LD_ADDR_OWVAR 35
67335: PUSH
67336: LD_INT 2
67338: NEG
67339: PPUSH
67340: LD_INT 2
67342: PPUSH
67343: CALL_OW 12
67347: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67348: LD_ADDR_OWVAR 31
67352: PUSH
67353: LD_INT 1
67355: PPUSH
67356: LD_INT 3
67358: PPUSH
67359: CALL_OW 12
67363: PUSH
67364: LD_INT 1
67366: PPUSH
67367: LD_INT 3
67369: PPUSH
67370: CALL_OW 12
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: LD_INT 0
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: ST_TO_ADDR
// animal := CreateHuman ;
67387: LD_ADDR_VAR 0 12
67391: PUSH
67392: CALL_OW 44
67396: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67397: LD_VAR 0 12
67401: PPUSH
67402: LD_VAR 0 8
67406: PPUSH
67407: LD_INT 0
67409: PPUSH
67410: CALL 69249 0 3
// end ;
67414: GO 67312
67416: POP
67417: POP
// if enchidnas then
67418: LD_VAR 0 4
67422: IFFALSE 67489
// for i = 1 to enchidnas do
67424: LD_ADDR_VAR 0 11
67428: PUSH
67429: DOUBLE
67430: LD_INT 1
67432: DEC
67433: ST_TO_ADDR
67434: LD_VAR 0 4
67438: PUSH
67439: FOR_TO
67440: IFFALSE 67487
// begin hc_class = 13 ;
67442: LD_ADDR_OWVAR 28
67446: PUSH
67447: LD_INT 13
67449: ST_TO_ADDR
// hc_gallery =  ;
67450: LD_ADDR_OWVAR 33
67454: PUSH
67455: LD_STRING 
67457: ST_TO_ADDR
// animal := CreateHuman ;
67458: LD_ADDR_VAR 0 12
67462: PUSH
67463: CALL_OW 44
67467: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67468: LD_VAR 0 12
67472: PPUSH
67473: LD_VAR 0 8
67477: PPUSH
67478: LD_INT 0
67480: PPUSH
67481: CALL 69249 0 3
// end ;
67485: GO 67439
67487: POP
67488: POP
// if fishes then
67489: LD_VAR 0 7
67493: IFFALSE 67560
// for i = 1 to fishes do
67495: LD_ADDR_VAR 0 11
67499: PUSH
67500: DOUBLE
67501: LD_INT 1
67503: DEC
67504: ST_TO_ADDR
67505: LD_VAR 0 7
67509: PUSH
67510: FOR_TO
67511: IFFALSE 67558
// begin hc_class = 20 ;
67513: LD_ADDR_OWVAR 28
67517: PUSH
67518: LD_INT 20
67520: ST_TO_ADDR
// hc_gallery =  ;
67521: LD_ADDR_OWVAR 33
67525: PUSH
67526: LD_STRING 
67528: ST_TO_ADDR
// animal := CreateHuman ;
67529: LD_ADDR_VAR 0 12
67533: PUSH
67534: CALL_OW 44
67538: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67539: LD_VAR 0 12
67543: PPUSH
67544: LD_VAR 0 9
67548: PPUSH
67549: LD_INT 0
67551: PPUSH
67552: CALL 69249 0 3
// end ;
67556: GO 67510
67558: POP
67559: POP
// end ;
67560: LD_VAR 0 10
67564: RET
// export function WantHeal ( sci , unit ) ; begin
67565: LD_INT 0
67567: PPUSH
// if GetTaskList ( sci ) > 0 then
67568: LD_VAR 0 1
67572: PPUSH
67573: CALL_OW 437
67577: PUSH
67578: LD_INT 0
67580: GREATER
67581: IFFALSE 67651
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67583: LD_VAR 0 1
67587: PPUSH
67588: CALL_OW 437
67592: PUSH
67593: LD_INT 1
67595: ARRAY
67596: PUSH
67597: LD_INT 1
67599: ARRAY
67600: PUSH
67601: LD_STRING l
67603: EQUAL
67604: PUSH
67605: LD_VAR 0 1
67609: PPUSH
67610: CALL_OW 437
67614: PUSH
67615: LD_INT 1
67617: ARRAY
67618: PUSH
67619: LD_INT 4
67621: ARRAY
67622: PUSH
67623: LD_VAR 0 2
67627: EQUAL
67628: AND
67629: IFFALSE 67641
// result := true else
67631: LD_ADDR_VAR 0 3
67635: PUSH
67636: LD_INT 1
67638: ST_TO_ADDR
67639: GO 67649
// result := false ;
67641: LD_ADDR_VAR 0 3
67645: PUSH
67646: LD_INT 0
67648: ST_TO_ADDR
// end else
67649: GO 67659
// result := false ;
67651: LD_ADDR_VAR 0 3
67655: PUSH
67656: LD_INT 0
67658: ST_TO_ADDR
// end ;
67659: LD_VAR 0 3
67663: RET
// export function HealTarget ( sci ) ; begin
67664: LD_INT 0
67666: PPUSH
// if not sci then
67667: LD_VAR 0 1
67671: NOT
67672: IFFALSE 67676
// exit ;
67674: GO 67741
// result := 0 ;
67676: LD_ADDR_VAR 0 2
67680: PUSH
67681: LD_INT 0
67683: ST_TO_ADDR
// if GetTaskList ( sci ) then
67684: LD_VAR 0 1
67688: PPUSH
67689: CALL_OW 437
67693: IFFALSE 67741
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67695: LD_VAR 0 1
67699: PPUSH
67700: CALL_OW 437
67704: PUSH
67705: LD_INT 1
67707: ARRAY
67708: PUSH
67709: LD_INT 1
67711: ARRAY
67712: PUSH
67713: LD_STRING l
67715: EQUAL
67716: IFFALSE 67741
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67718: LD_ADDR_VAR 0 2
67722: PUSH
67723: LD_VAR 0 1
67727: PPUSH
67728: CALL_OW 437
67732: PUSH
67733: LD_INT 1
67735: ARRAY
67736: PUSH
67737: LD_INT 4
67739: ARRAY
67740: ST_TO_ADDR
// end ;
67741: LD_VAR 0 2
67745: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67746: LD_INT 0
67748: PPUSH
67749: PPUSH
67750: PPUSH
67751: PPUSH
// if not base_units then
67752: LD_VAR 0 1
67756: NOT
67757: IFFALSE 67761
// exit ;
67759: GO 67848
// result := false ;
67761: LD_ADDR_VAR 0 2
67765: PUSH
67766: LD_INT 0
67768: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67769: LD_ADDR_VAR 0 5
67773: PUSH
67774: LD_VAR 0 1
67778: PPUSH
67779: LD_INT 21
67781: PUSH
67782: LD_INT 3
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PPUSH
67789: CALL_OW 72
67793: ST_TO_ADDR
// if not tmp then
67794: LD_VAR 0 5
67798: NOT
67799: IFFALSE 67803
// exit ;
67801: GO 67848
// for i in tmp do
67803: LD_ADDR_VAR 0 3
67807: PUSH
67808: LD_VAR 0 5
67812: PUSH
67813: FOR_IN
67814: IFFALSE 67846
// begin result := EnemyInRange ( i , 22 ) ;
67816: LD_ADDR_VAR 0 2
67820: PUSH
67821: LD_VAR 0 3
67825: PPUSH
67826: LD_INT 22
67828: PPUSH
67829: CALL 66084 0 2
67833: ST_TO_ADDR
// if result then
67834: LD_VAR 0 2
67838: IFFALSE 67844
// exit ;
67840: POP
67841: POP
67842: GO 67848
// end ;
67844: GO 67813
67846: POP
67847: POP
// end ;
67848: LD_VAR 0 2
67852: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67853: LD_INT 0
67855: PPUSH
67856: PPUSH
// if not units then
67857: LD_VAR 0 1
67861: NOT
67862: IFFALSE 67866
// exit ;
67864: GO 67936
// result := [ ] ;
67866: LD_ADDR_VAR 0 3
67870: PUSH
67871: EMPTY
67872: ST_TO_ADDR
// for i in units do
67873: LD_ADDR_VAR 0 4
67877: PUSH
67878: LD_VAR 0 1
67882: PUSH
67883: FOR_IN
67884: IFFALSE 67934
// if GetTag ( i ) = tag then
67886: LD_VAR 0 4
67890: PPUSH
67891: CALL_OW 110
67895: PUSH
67896: LD_VAR 0 2
67900: EQUAL
67901: IFFALSE 67932
// result := Insert ( result , result + 1 , i ) ;
67903: LD_ADDR_VAR 0 3
67907: PUSH
67908: LD_VAR 0 3
67912: PPUSH
67913: LD_VAR 0 3
67917: PUSH
67918: LD_INT 1
67920: PLUS
67921: PPUSH
67922: LD_VAR 0 4
67926: PPUSH
67927: CALL_OW 2
67931: ST_TO_ADDR
67932: GO 67883
67934: POP
67935: POP
// end ;
67936: LD_VAR 0 3
67940: RET
// export function IsDriver ( un ) ; begin
67941: LD_INT 0
67943: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67944: LD_ADDR_VAR 0 2
67948: PUSH
67949: LD_VAR 0 1
67953: PUSH
67954: LD_INT 55
67956: PUSH
67957: EMPTY
67958: LIST
67959: PPUSH
67960: CALL_OW 69
67964: IN
67965: ST_TO_ADDR
// end ;
67966: LD_VAR 0 2
67970: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67971: LD_INT 0
67973: PPUSH
67974: PPUSH
// list := [ ] ;
67975: LD_ADDR_VAR 0 5
67979: PUSH
67980: EMPTY
67981: ST_TO_ADDR
// case d of 0 :
67982: LD_VAR 0 3
67986: PUSH
67987: LD_INT 0
67989: DOUBLE
67990: EQUAL
67991: IFTRUE 67995
67993: GO 68128
67995: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67996: LD_ADDR_VAR 0 5
68000: PUSH
68001: LD_VAR 0 1
68005: PUSH
68006: LD_INT 4
68008: MINUS
68009: PUSH
68010: LD_VAR 0 2
68014: PUSH
68015: LD_INT 4
68017: MINUS
68018: PUSH
68019: LD_INT 2
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: LIST
68026: PUSH
68027: LD_VAR 0 1
68031: PUSH
68032: LD_INT 3
68034: MINUS
68035: PUSH
68036: LD_VAR 0 2
68040: PUSH
68041: LD_INT 1
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: LIST
68048: PUSH
68049: LD_VAR 0 1
68053: PUSH
68054: LD_INT 4
68056: PLUS
68057: PUSH
68058: LD_VAR 0 2
68062: PUSH
68063: LD_INT 4
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: LIST
68070: PUSH
68071: LD_VAR 0 1
68075: PUSH
68076: LD_INT 3
68078: PLUS
68079: PUSH
68080: LD_VAR 0 2
68084: PUSH
68085: LD_INT 3
68087: PLUS
68088: PUSH
68089: LD_INT 5
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: LIST
68096: PUSH
68097: LD_VAR 0 1
68101: PUSH
68102: LD_VAR 0 2
68106: PUSH
68107: LD_INT 4
68109: PLUS
68110: PUSH
68111: LD_INT 0
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: LIST
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: ST_TO_ADDR
// end ; 1 :
68126: GO 68826
68128: LD_INT 1
68130: DOUBLE
68131: EQUAL
68132: IFTRUE 68136
68134: GO 68269
68136: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68137: LD_ADDR_VAR 0 5
68141: PUSH
68142: LD_VAR 0 1
68146: PUSH
68147: LD_VAR 0 2
68151: PUSH
68152: LD_INT 4
68154: MINUS
68155: PUSH
68156: LD_INT 3
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: LIST
68163: PUSH
68164: LD_VAR 0 1
68168: PUSH
68169: LD_INT 3
68171: MINUS
68172: PUSH
68173: LD_VAR 0 2
68177: PUSH
68178: LD_INT 3
68180: MINUS
68181: PUSH
68182: LD_INT 2
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: LIST
68189: PUSH
68190: LD_VAR 0 1
68194: PUSH
68195: LD_INT 4
68197: MINUS
68198: PUSH
68199: LD_VAR 0 2
68203: PUSH
68204: LD_INT 1
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: LIST
68211: PUSH
68212: LD_VAR 0 1
68216: PUSH
68217: LD_VAR 0 2
68221: PUSH
68222: LD_INT 3
68224: PLUS
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: LIST
68233: PUSH
68234: LD_VAR 0 1
68238: PUSH
68239: LD_INT 4
68241: PLUS
68242: PUSH
68243: LD_VAR 0 2
68247: PUSH
68248: LD_INT 4
68250: PLUS
68251: PUSH
68252: LD_INT 5
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: LIST
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: ST_TO_ADDR
// end ; 2 :
68267: GO 68826
68269: LD_INT 2
68271: DOUBLE
68272: EQUAL
68273: IFTRUE 68277
68275: GO 68406
68277: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68278: LD_ADDR_VAR 0 5
68282: PUSH
68283: LD_VAR 0 1
68287: PUSH
68288: LD_VAR 0 2
68292: PUSH
68293: LD_INT 3
68295: MINUS
68296: PUSH
68297: LD_INT 3
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: LIST
68304: PUSH
68305: LD_VAR 0 1
68309: PUSH
68310: LD_INT 4
68312: PLUS
68313: PUSH
68314: LD_VAR 0 2
68318: PUSH
68319: LD_INT 4
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: LIST
68326: PUSH
68327: LD_VAR 0 1
68331: PUSH
68332: LD_VAR 0 2
68336: PUSH
68337: LD_INT 4
68339: PLUS
68340: PUSH
68341: LD_INT 0
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: LIST
68348: PUSH
68349: LD_VAR 0 1
68353: PUSH
68354: LD_INT 3
68356: MINUS
68357: PUSH
68358: LD_VAR 0 2
68362: PUSH
68363: LD_INT 1
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: LIST
68370: PUSH
68371: LD_VAR 0 1
68375: PUSH
68376: LD_INT 4
68378: MINUS
68379: PUSH
68380: LD_VAR 0 2
68384: PUSH
68385: LD_INT 4
68387: MINUS
68388: PUSH
68389: LD_INT 2
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: LIST
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: ST_TO_ADDR
// end ; 3 :
68404: GO 68826
68406: LD_INT 3
68408: DOUBLE
68409: EQUAL
68410: IFTRUE 68414
68412: GO 68547
68414: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68415: LD_ADDR_VAR 0 5
68419: PUSH
68420: LD_VAR 0 1
68424: PUSH
68425: LD_INT 3
68427: PLUS
68428: PUSH
68429: LD_VAR 0 2
68433: PUSH
68434: LD_INT 4
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: LIST
68441: PUSH
68442: LD_VAR 0 1
68446: PUSH
68447: LD_INT 4
68449: PLUS
68450: PUSH
68451: LD_VAR 0 2
68455: PUSH
68456: LD_INT 4
68458: PLUS
68459: PUSH
68460: LD_INT 5
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: LIST
68467: PUSH
68468: LD_VAR 0 1
68472: PUSH
68473: LD_INT 4
68475: MINUS
68476: PUSH
68477: LD_VAR 0 2
68481: PUSH
68482: LD_INT 1
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: LIST
68489: PUSH
68490: LD_VAR 0 1
68494: PUSH
68495: LD_VAR 0 2
68499: PUSH
68500: LD_INT 4
68502: MINUS
68503: PUSH
68504: LD_INT 3
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: LIST
68511: PUSH
68512: LD_VAR 0 1
68516: PUSH
68517: LD_INT 3
68519: MINUS
68520: PUSH
68521: LD_VAR 0 2
68525: PUSH
68526: LD_INT 3
68528: MINUS
68529: PUSH
68530: LD_INT 2
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: LIST
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: ST_TO_ADDR
// end ; 4 :
68545: GO 68826
68547: LD_INT 4
68549: DOUBLE
68550: EQUAL
68551: IFTRUE 68555
68553: GO 68688
68555: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68556: LD_ADDR_VAR 0 5
68560: PUSH
68561: LD_VAR 0 1
68565: PUSH
68566: LD_VAR 0 2
68570: PUSH
68571: LD_INT 4
68573: PLUS
68574: PUSH
68575: LD_INT 0
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: LIST
68582: PUSH
68583: LD_VAR 0 1
68587: PUSH
68588: LD_INT 3
68590: PLUS
68591: PUSH
68592: LD_VAR 0 2
68596: PUSH
68597: LD_INT 3
68599: PLUS
68600: PUSH
68601: LD_INT 5
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: LIST
68608: PUSH
68609: LD_VAR 0 1
68613: PUSH
68614: LD_INT 4
68616: PLUS
68617: PUSH
68618: LD_VAR 0 2
68622: PUSH
68623: LD_INT 4
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: LIST
68630: PUSH
68631: LD_VAR 0 1
68635: PUSH
68636: LD_VAR 0 2
68640: PUSH
68641: LD_INT 3
68643: MINUS
68644: PUSH
68645: LD_INT 3
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: LIST
68652: PUSH
68653: LD_VAR 0 1
68657: PUSH
68658: LD_INT 4
68660: MINUS
68661: PUSH
68662: LD_VAR 0 2
68666: PUSH
68667: LD_INT 4
68669: MINUS
68670: PUSH
68671: LD_INT 2
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: LIST
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: ST_TO_ADDR
// end ; 5 :
68686: GO 68826
68688: LD_INT 5
68690: DOUBLE
68691: EQUAL
68692: IFTRUE 68696
68694: GO 68825
68696: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68697: LD_ADDR_VAR 0 5
68701: PUSH
68702: LD_VAR 0 1
68706: PUSH
68707: LD_INT 4
68709: MINUS
68710: PUSH
68711: LD_VAR 0 2
68715: PUSH
68716: LD_INT 1
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: LIST
68723: PUSH
68724: LD_VAR 0 1
68728: PUSH
68729: LD_VAR 0 2
68733: PUSH
68734: LD_INT 4
68736: MINUS
68737: PUSH
68738: LD_INT 3
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: LIST
68745: PUSH
68746: LD_VAR 0 1
68750: PUSH
68751: LD_INT 4
68753: PLUS
68754: PUSH
68755: LD_VAR 0 2
68759: PUSH
68760: LD_INT 4
68762: PLUS
68763: PUSH
68764: LD_INT 5
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: LIST
68771: PUSH
68772: LD_VAR 0 1
68776: PUSH
68777: LD_INT 3
68779: PLUS
68780: PUSH
68781: LD_VAR 0 2
68785: PUSH
68786: LD_INT 4
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: LIST
68793: PUSH
68794: LD_VAR 0 1
68798: PUSH
68799: LD_VAR 0 2
68803: PUSH
68804: LD_INT 3
68806: PLUS
68807: PUSH
68808: LD_INT 0
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: LIST
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: ST_TO_ADDR
// end ; end ;
68823: GO 68826
68825: POP
// result := list ;
68826: LD_ADDR_VAR 0 4
68830: PUSH
68831: LD_VAR 0 5
68835: ST_TO_ADDR
// end ;
68836: LD_VAR 0 4
68840: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68841: LD_INT 0
68843: PPUSH
68844: PPUSH
68845: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68846: LD_VAR 0 1
68850: NOT
68851: PUSH
68852: LD_VAR 0 2
68856: PUSH
68857: LD_INT 1
68859: PUSH
68860: LD_INT 2
68862: PUSH
68863: LD_INT 3
68865: PUSH
68866: LD_INT 4
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: IN
68875: NOT
68876: OR
68877: IFFALSE 68881
// exit ;
68879: GO 68973
// tmp := [ ] ;
68881: LD_ADDR_VAR 0 5
68885: PUSH
68886: EMPTY
68887: ST_TO_ADDR
// for i in units do
68888: LD_ADDR_VAR 0 4
68892: PUSH
68893: LD_VAR 0 1
68897: PUSH
68898: FOR_IN
68899: IFFALSE 68942
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68901: LD_ADDR_VAR 0 5
68905: PUSH
68906: LD_VAR 0 5
68910: PPUSH
68911: LD_VAR 0 5
68915: PUSH
68916: LD_INT 1
68918: PLUS
68919: PPUSH
68920: LD_VAR 0 4
68924: PPUSH
68925: LD_VAR 0 2
68929: PPUSH
68930: CALL_OW 259
68934: PPUSH
68935: CALL_OW 2
68939: ST_TO_ADDR
68940: GO 68898
68942: POP
68943: POP
// if not tmp then
68944: LD_VAR 0 5
68948: NOT
68949: IFFALSE 68953
// exit ;
68951: GO 68973
// result := SortListByListDesc ( units , tmp ) ;
68953: LD_ADDR_VAR 0 3
68957: PUSH
68958: LD_VAR 0 1
68962: PPUSH
68963: LD_VAR 0 5
68967: PPUSH
68968: CALL_OW 77
68972: ST_TO_ADDR
// end ;
68973: LD_VAR 0 3
68977: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68978: LD_INT 0
68980: PPUSH
68981: PPUSH
68982: PPUSH
// result := false ;
68983: LD_ADDR_VAR 0 3
68987: PUSH
68988: LD_INT 0
68990: ST_TO_ADDR
// x := GetX ( building ) ;
68991: LD_ADDR_VAR 0 4
68995: PUSH
68996: LD_VAR 0 2
69000: PPUSH
69001: CALL_OW 250
69005: ST_TO_ADDR
// y := GetY ( building ) ;
69006: LD_ADDR_VAR 0 5
69010: PUSH
69011: LD_VAR 0 2
69015: PPUSH
69016: CALL_OW 251
69020: ST_TO_ADDR
// if not building or not x or not y then
69021: LD_VAR 0 2
69025: NOT
69026: PUSH
69027: LD_VAR 0 4
69031: NOT
69032: OR
69033: PUSH
69034: LD_VAR 0 5
69038: NOT
69039: OR
69040: IFFALSE 69044
// exit ;
69042: GO 69136
// if GetTaskList ( unit ) then
69044: LD_VAR 0 1
69048: PPUSH
69049: CALL_OW 437
69053: IFFALSE 69136
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69055: LD_STRING e
69057: PUSH
69058: LD_VAR 0 1
69062: PPUSH
69063: CALL_OW 437
69067: PUSH
69068: LD_INT 1
69070: ARRAY
69071: PUSH
69072: LD_INT 1
69074: ARRAY
69075: EQUAL
69076: PUSH
69077: LD_VAR 0 4
69081: PUSH
69082: LD_VAR 0 1
69086: PPUSH
69087: CALL_OW 437
69091: PUSH
69092: LD_INT 1
69094: ARRAY
69095: PUSH
69096: LD_INT 2
69098: ARRAY
69099: EQUAL
69100: AND
69101: PUSH
69102: LD_VAR 0 5
69106: PUSH
69107: LD_VAR 0 1
69111: PPUSH
69112: CALL_OW 437
69116: PUSH
69117: LD_INT 1
69119: ARRAY
69120: PUSH
69121: LD_INT 3
69123: ARRAY
69124: EQUAL
69125: AND
69126: IFFALSE 69136
// result := true end ;
69128: LD_ADDR_VAR 0 3
69132: PUSH
69133: LD_INT 1
69135: ST_TO_ADDR
// end ;
69136: LD_VAR 0 3
69140: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69141: LD_INT 0
69143: PPUSH
// result := false ;
69144: LD_ADDR_VAR 0 4
69148: PUSH
69149: LD_INT 0
69151: ST_TO_ADDR
// if GetTaskList ( unit ) then
69152: LD_VAR 0 1
69156: PPUSH
69157: CALL_OW 437
69161: IFFALSE 69244
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69163: LD_STRING M
69165: PUSH
69166: LD_VAR 0 1
69170: PPUSH
69171: CALL_OW 437
69175: PUSH
69176: LD_INT 1
69178: ARRAY
69179: PUSH
69180: LD_INT 1
69182: ARRAY
69183: EQUAL
69184: PUSH
69185: LD_VAR 0 2
69189: PUSH
69190: LD_VAR 0 1
69194: PPUSH
69195: CALL_OW 437
69199: PUSH
69200: LD_INT 1
69202: ARRAY
69203: PUSH
69204: LD_INT 2
69206: ARRAY
69207: EQUAL
69208: AND
69209: PUSH
69210: LD_VAR 0 3
69214: PUSH
69215: LD_VAR 0 1
69219: PPUSH
69220: CALL_OW 437
69224: PUSH
69225: LD_INT 1
69227: ARRAY
69228: PUSH
69229: LD_INT 3
69231: ARRAY
69232: EQUAL
69233: AND
69234: IFFALSE 69244
// result := true ;
69236: LD_ADDR_VAR 0 4
69240: PUSH
69241: LD_INT 1
69243: ST_TO_ADDR
// end ; end ;
69244: LD_VAR 0 4
69248: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69249: LD_INT 0
69251: PPUSH
69252: PPUSH
69253: PPUSH
69254: PPUSH
// if not unit or not area then
69255: LD_VAR 0 1
69259: NOT
69260: PUSH
69261: LD_VAR 0 2
69265: NOT
69266: OR
69267: IFFALSE 69271
// exit ;
69269: GO 69435
// tmp := AreaToList ( area , i ) ;
69271: LD_ADDR_VAR 0 6
69275: PUSH
69276: LD_VAR 0 2
69280: PPUSH
69281: LD_VAR 0 5
69285: PPUSH
69286: CALL_OW 517
69290: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69291: LD_ADDR_VAR 0 5
69295: PUSH
69296: DOUBLE
69297: LD_INT 1
69299: DEC
69300: ST_TO_ADDR
69301: LD_VAR 0 6
69305: PUSH
69306: LD_INT 1
69308: ARRAY
69309: PUSH
69310: FOR_TO
69311: IFFALSE 69433
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69313: LD_ADDR_VAR 0 7
69317: PUSH
69318: LD_VAR 0 6
69322: PUSH
69323: LD_INT 1
69325: ARRAY
69326: PUSH
69327: LD_VAR 0 5
69331: ARRAY
69332: PUSH
69333: LD_VAR 0 6
69337: PUSH
69338: LD_INT 2
69340: ARRAY
69341: PUSH
69342: LD_VAR 0 5
69346: ARRAY
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69352: LD_VAR 0 7
69356: PUSH
69357: LD_INT 1
69359: ARRAY
69360: PPUSH
69361: LD_VAR 0 7
69365: PUSH
69366: LD_INT 2
69368: ARRAY
69369: PPUSH
69370: CALL_OW 428
69374: PUSH
69375: LD_INT 0
69377: EQUAL
69378: IFFALSE 69431
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69380: LD_VAR 0 1
69384: PPUSH
69385: LD_VAR 0 7
69389: PUSH
69390: LD_INT 1
69392: ARRAY
69393: PPUSH
69394: LD_VAR 0 7
69398: PUSH
69399: LD_INT 2
69401: ARRAY
69402: PPUSH
69403: LD_VAR 0 3
69407: PPUSH
69408: CALL_OW 48
// result := IsPlaced ( unit ) ;
69412: LD_ADDR_VAR 0 4
69416: PUSH
69417: LD_VAR 0 1
69421: PPUSH
69422: CALL_OW 305
69426: ST_TO_ADDR
// exit ;
69427: POP
69428: POP
69429: GO 69435
// end ; end ;
69431: GO 69310
69433: POP
69434: POP
// end ;
69435: LD_VAR 0 4
69439: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69440: LD_INT 0
69442: PPUSH
69443: PPUSH
69444: PPUSH
// if not side or side > 8 then
69445: LD_VAR 0 1
69449: NOT
69450: PUSH
69451: LD_VAR 0 1
69455: PUSH
69456: LD_INT 8
69458: GREATER
69459: OR
69460: IFFALSE 69464
// exit ;
69462: GO 69651
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69464: LD_ADDR_VAR 0 4
69468: PUSH
69469: LD_INT 22
69471: PUSH
69472: LD_VAR 0 1
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 21
69483: PUSH
69484: LD_INT 3
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PPUSH
69495: CALL_OW 69
69499: ST_TO_ADDR
// if not tmp then
69500: LD_VAR 0 4
69504: NOT
69505: IFFALSE 69509
// exit ;
69507: GO 69651
// enable_addtolog := true ;
69509: LD_ADDR_OWVAR 81
69513: PUSH
69514: LD_INT 1
69516: ST_TO_ADDR
// AddToLog ( [ ) ;
69517: LD_STRING [
69519: PPUSH
69520: CALL_OW 561
// for i in tmp do
69524: LD_ADDR_VAR 0 3
69528: PUSH
69529: LD_VAR 0 4
69533: PUSH
69534: FOR_IN
69535: IFFALSE 69642
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69537: LD_STRING [
69539: PUSH
69540: LD_VAR 0 3
69544: PPUSH
69545: CALL_OW 266
69549: STR
69550: PUSH
69551: LD_STRING , 
69553: STR
69554: PUSH
69555: LD_VAR 0 3
69559: PPUSH
69560: CALL_OW 250
69564: STR
69565: PUSH
69566: LD_STRING , 
69568: STR
69569: PUSH
69570: LD_VAR 0 3
69574: PPUSH
69575: CALL_OW 251
69579: STR
69580: PUSH
69581: LD_STRING , 
69583: STR
69584: PUSH
69585: LD_VAR 0 3
69589: PPUSH
69590: CALL_OW 254
69594: STR
69595: PUSH
69596: LD_STRING , 
69598: STR
69599: PUSH
69600: LD_VAR 0 3
69604: PPUSH
69605: LD_INT 1
69607: PPUSH
69608: CALL_OW 268
69612: STR
69613: PUSH
69614: LD_STRING , 
69616: STR
69617: PUSH
69618: LD_VAR 0 3
69622: PPUSH
69623: LD_INT 2
69625: PPUSH
69626: CALL_OW 268
69630: STR
69631: PUSH
69632: LD_STRING ],
69634: STR
69635: PPUSH
69636: CALL_OW 561
// end ;
69640: GO 69534
69642: POP
69643: POP
// AddToLog ( ]; ) ;
69644: LD_STRING ];
69646: PPUSH
69647: CALL_OW 561
// end ;
69651: LD_VAR 0 2
69655: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69656: LD_INT 0
69658: PPUSH
69659: PPUSH
69660: PPUSH
69661: PPUSH
69662: PPUSH
// if not area or not rate or not max then
69663: LD_VAR 0 1
69667: NOT
69668: PUSH
69669: LD_VAR 0 2
69673: NOT
69674: OR
69675: PUSH
69676: LD_VAR 0 4
69680: NOT
69681: OR
69682: IFFALSE 69686
// exit ;
69684: GO 69878
// while 1 do
69686: LD_INT 1
69688: IFFALSE 69878
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69690: LD_ADDR_VAR 0 9
69694: PUSH
69695: LD_VAR 0 1
69699: PPUSH
69700: LD_INT 1
69702: PPUSH
69703: CALL_OW 287
69707: PUSH
69708: LD_INT 10
69710: MUL
69711: ST_TO_ADDR
// r := rate / 10 ;
69712: LD_ADDR_VAR 0 7
69716: PUSH
69717: LD_VAR 0 2
69721: PUSH
69722: LD_INT 10
69724: DIVREAL
69725: ST_TO_ADDR
// time := 1 1$00 ;
69726: LD_ADDR_VAR 0 8
69730: PUSH
69731: LD_INT 2100
69733: ST_TO_ADDR
// if amount < min then
69734: LD_VAR 0 9
69738: PUSH
69739: LD_VAR 0 3
69743: LESS
69744: IFFALSE 69762
// r := r * 2 else
69746: LD_ADDR_VAR 0 7
69750: PUSH
69751: LD_VAR 0 7
69755: PUSH
69756: LD_INT 2
69758: MUL
69759: ST_TO_ADDR
69760: GO 69788
// if amount > max then
69762: LD_VAR 0 9
69766: PUSH
69767: LD_VAR 0 4
69771: GREATER
69772: IFFALSE 69788
// r := r / 2 ;
69774: LD_ADDR_VAR 0 7
69778: PUSH
69779: LD_VAR 0 7
69783: PUSH
69784: LD_INT 2
69786: DIVREAL
69787: ST_TO_ADDR
// time := time / r ;
69788: LD_ADDR_VAR 0 8
69792: PUSH
69793: LD_VAR 0 8
69797: PUSH
69798: LD_VAR 0 7
69802: DIVREAL
69803: ST_TO_ADDR
// if time < 0 then
69804: LD_VAR 0 8
69808: PUSH
69809: LD_INT 0
69811: LESS
69812: IFFALSE 69829
// time := time * - 1 ;
69814: LD_ADDR_VAR 0 8
69818: PUSH
69819: LD_VAR 0 8
69823: PUSH
69824: LD_INT 1
69826: NEG
69827: MUL
69828: ST_TO_ADDR
// wait ( time ) ;
69829: LD_VAR 0 8
69833: PPUSH
69834: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
69838: LD_INT 35
69840: PPUSH
69841: LD_INT 875
69843: PPUSH
69844: CALL_OW 12
69848: PPUSH
69849: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69853: LD_INT 1
69855: PPUSH
69856: LD_INT 5
69858: PPUSH
69859: CALL_OW 12
69863: PPUSH
69864: LD_VAR 0 1
69868: PPUSH
69869: LD_INT 1
69871: PPUSH
69872: CALL_OW 55
// end ;
69876: GO 69686
// end ;
69878: LD_VAR 0 5
69882: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69883: LD_INT 0
69885: PPUSH
69886: PPUSH
69887: PPUSH
69888: PPUSH
69889: PPUSH
69890: PPUSH
69891: PPUSH
69892: PPUSH
// if not turrets or not factories then
69893: LD_VAR 0 1
69897: NOT
69898: PUSH
69899: LD_VAR 0 2
69903: NOT
69904: OR
69905: IFFALSE 69909
// exit ;
69907: GO 70216
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69909: LD_ADDR_VAR 0 10
69913: PUSH
69914: LD_INT 5
69916: PUSH
69917: LD_INT 6
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 2
69926: PUSH
69927: LD_INT 4
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 3
69936: PUSH
69937: LD_INT 5
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 24
69951: PUSH
69952: LD_INT 25
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 23
69961: PUSH
69962: LD_INT 27
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 42
69975: PUSH
69976: LD_INT 43
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 44
69985: PUSH
69986: LD_INT 46
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 45
69995: PUSH
69996: LD_INT 47
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: LIST
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: LIST
70012: ST_TO_ADDR
// result := [ ] ;
70013: LD_ADDR_VAR 0 3
70017: PUSH
70018: EMPTY
70019: ST_TO_ADDR
// for i in turrets do
70020: LD_ADDR_VAR 0 4
70024: PUSH
70025: LD_VAR 0 1
70029: PUSH
70030: FOR_IN
70031: IFFALSE 70214
// begin nat := GetNation ( i ) ;
70033: LD_ADDR_VAR 0 7
70037: PUSH
70038: LD_VAR 0 4
70042: PPUSH
70043: CALL_OW 248
70047: ST_TO_ADDR
// weapon := 0 ;
70048: LD_ADDR_VAR 0 8
70052: PUSH
70053: LD_INT 0
70055: ST_TO_ADDR
// if not nat then
70056: LD_VAR 0 7
70060: NOT
70061: IFFALSE 70065
// continue ;
70063: GO 70030
// for j in list [ nat ] do
70065: LD_ADDR_VAR 0 5
70069: PUSH
70070: LD_VAR 0 10
70074: PUSH
70075: LD_VAR 0 7
70079: ARRAY
70080: PUSH
70081: FOR_IN
70082: IFFALSE 70123
// if GetBWeapon ( i ) = j [ 1 ] then
70084: LD_VAR 0 4
70088: PPUSH
70089: CALL_OW 269
70093: PUSH
70094: LD_VAR 0 5
70098: PUSH
70099: LD_INT 1
70101: ARRAY
70102: EQUAL
70103: IFFALSE 70121
// begin weapon := j [ 2 ] ;
70105: LD_ADDR_VAR 0 8
70109: PUSH
70110: LD_VAR 0 5
70114: PUSH
70115: LD_INT 2
70117: ARRAY
70118: ST_TO_ADDR
// break ;
70119: GO 70123
// end ;
70121: GO 70081
70123: POP
70124: POP
// if not weapon then
70125: LD_VAR 0 8
70129: NOT
70130: IFFALSE 70134
// continue ;
70132: GO 70030
// for k in factories do
70134: LD_ADDR_VAR 0 6
70138: PUSH
70139: LD_VAR 0 2
70143: PUSH
70144: FOR_IN
70145: IFFALSE 70210
// begin weapons := AvailableWeaponList ( k ) ;
70147: LD_ADDR_VAR 0 9
70151: PUSH
70152: LD_VAR 0 6
70156: PPUSH
70157: CALL_OW 478
70161: ST_TO_ADDR
// if not weapons then
70162: LD_VAR 0 9
70166: NOT
70167: IFFALSE 70171
// continue ;
70169: GO 70144
// if weapon in weapons then
70171: LD_VAR 0 8
70175: PUSH
70176: LD_VAR 0 9
70180: IN
70181: IFFALSE 70208
// begin result := [ i , weapon ] ;
70183: LD_ADDR_VAR 0 3
70187: PUSH
70188: LD_VAR 0 4
70192: PUSH
70193: LD_VAR 0 8
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: ST_TO_ADDR
// exit ;
70202: POP
70203: POP
70204: POP
70205: POP
70206: GO 70216
// end ; end ;
70208: GO 70144
70210: POP
70211: POP
// end ;
70212: GO 70030
70214: POP
70215: POP
// end ;
70216: LD_VAR 0 3
70220: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70221: LD_INT 0
70223: PPUSH
// if not side or side > 8 then
70224: LD_VAR 0 3
70228: NOT
70229: PUSH
70230: LD_VAR 0 3
70234: PUSH
70235: LD_INT 8
70237: GREATER
70238: OR
70239: IFFALSE 70243
// exit ;
70241: GO 70302
// if not range then
70243: LD_VAR 0 4
70247: NOT
70248: IFFALSE 70259
// range := - 12 ;
70250: LD_ADDR_VAR 0 4
70254: PUSH
70255: LD_INT 12
70257: NEG
70258: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70259: LD_VAR 0 1
70263: PPUSH
70264: LD_VAR 0 2
70268: PPUSH
70269: LD_VAR 0 3
70273: PPUSH
70274: LD_VAR 0 4
70278: PPUSH
70279: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70283: LD_VAR 0 1
70287: PPUSH
70288: LD_VAR 0 2
70292: PPUSH
70293: LD_VAR 0 3
70297: PPUSH
70298: CALL_OW 331
// end ;
70302: LD_VAR 0 5
70306: RET
// export function Video ( mode ) ; begin
70307: LD_INT 0
70309: PPUSH
// ingame_video = mode ;
70310: LD_ADDR_OWVAR 52
70314: PUSH
70315: LD_VAR 0 1
70319: ST_TO_ADDR
// interface_hidden = mode ;
70320: LD_ADDR_OWVAR 54
70324: PUSH
70325: LD_VAR 0 1
70329: ST_TO_ADDR
// end ;
70330: LD_VAR 0 2
70334: RET
// export function Join ( array , element ) ; begin
70335: LD_INT 0
70337: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70338: LD_ADDR_VAR 0 3
70342: PUSH
70343: LD_VAR 0 1
70347: PPUSH
70348: LD_VAR 0 1
70352: PUSH
70353: LD_INT 1
70355: PLUS
70356: PPUSH
70357: LD_VAR 0 2
70361: PPUSH
70362: CALL_OW 1
70366: ST_TO_ADDR
// end ;
70367: LD_VAR 0 3
70371: RET
// export function JoinUnion ( array , element ) ; begin
70372: LD_INT 0
70374: PPUSH
// result := array union element ;
70375: LD_ADDR_VAR 0 3
70379: PUSH
70380: LD_VAR 0 1
70384: PUSH
70385: LD_VAR 0 2
70389: UNION
70390: ST_TO_ADDR
// end ;
70391: LD_VAR 0 3
70395: RET
// export function GetBehemoths ( side ) ; begin
70396: LD_INT 0
70398: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70399: LD_ADDR_VAR 0 2
70403: PUSH
70404: LD_INT 22
70406: PUSH
70407: LD_VAR 0 1
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 31
70418: PUSH
70419: LD_INT 25
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PPUSH
70430: CALL_OW 69
70434: ST_TO_ADDR
// end ;
70435: LD_VAR 0 2
70439: RET
// export function Shuffle ( array ) ; var i , index ; begin
70440: LD_INT 0
70442: PPUSH
70443: PPUSH
70444: PPUSH
// result := [ ] ;
70445: LD_ADDR_VAR 0 2
70449: PUSH
70450: EMPTY
70451: ST_TO_ADDR
// if not array then
70452: LD_VAR 0 1
70456: NOT
70457: IFFALSE 70461
// exit ;
70459: GO 70560
// Randomize ;
70461: CALL_OW 10
// for i = array downto 1 do
70465: LD_ADDR_VAR 0 3
70469: PUSH
70470: DOUBLE
70471: LD_VAR 0 1
70475: INC
70476: ST_TO_ADDR
70477: LD_INT 1
70479: PUSH
70480: FOR_DOWNTO
70481: IFFALSE 70558
// begin index := rand ( 1 , array ) ;
70483: LD_ADDR_VAR 0 4
70487: PUSH
70488: LD_INT 1
70490: PPUSH
70491: LD_VAR 0 1
70495: PPUSH
70496: CALL_OW 12
70500: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70501: LD_ADDR_VAR 0 2
70505: PUSH
70506: LD_VAR 0 2
70510: PPUSH
70511: LD_VAR 0 2
70515: PUSH
70516: LD_INT 1
70518: PLUS
70519: PPUSH
70520: LD_VAR 0 1
70524: PUSH
70525: LD_VAR 0 4
70529: ARRAY
70530: PPUSH
70531: CALL_OW 2
70535: ST_TO_ADDR
// array := Delete ( array , index ) ;
70536: LD_ADDR_VAR 0 1
70540: PUSH
70541: LD_VAR 0 1
70545: PPUSH
70546: LD_VAR 0 4
70550: PPUSH
70551: CALL_OW 3
70555: ST_TO_ADDR
// end ;
70556: GO 70480
70558: POP
70559: POP
// end ;
70560: LD_VAR 0 2
70564: RET
// export function GetBaseMaterials ( base ) ; begin
70565: LD_INT 0
70567: PPUSH
// result := [ 0 , 0 , 0 ] ;
70568: LD_ADDR_VAR 0 2
70572: PUSH
70573: LD_INT 0
70575: PUSH
70576: LD_INT 0
70578: PUSH
70579: LD_INT 0
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: LIST
70586: ST_TO_ADDR
// if not base then
70587: LD_VAR 0 1
70591: NOT
70592: IFFALSE 70596
// exit ;
70594: GO 70645
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70596: LD_ADDR_VAR 0 2
70600: PUSH
70601: LD_VAR 0 1
70605: PPUSH
70606: LD_INT 1
70608: PPUSH
70609: CALL_OW 275
70613: PUSH
70614: LD_VAR 0 1
70618: PPUSH
70619: LD_INT 2
70621: PPUSH
70622: CALL_OW 275
70626: PUSH
70627: LD_VAR 0 1
70631: PPUSH
70632: LD_INT 3
70634: PPUSH
70635: CALL_OW 275
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: LIST
70644: ST_TO_ADDR
// end ;
70645: LD_VAR 0 2
70649: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70650: LD_INT 0
70652: PPUSH
70653: PPUSH
// result := array ;
70654: LD_ADDR_VAR 0 3
70658: PUSH
70659: LD_VAR 0 1
70663: ST_TO_ADDR
// if size > 0 then
70664: LD_VAR 0 2
70668: PUSH
70669: LD_INT 0
70671: GREATER
70672: IFFALSE 70718
// for i := array downto size do
70674: LD_ADDR_VAR 0 4
70678: PUSH
70679: DOUBLE
70680: LD_VAR 0 1
70684: INC
70685: ST_TO_ADDR
70686: LD_VAR 0 2
70690: PUSH
70691: FOR_DOWNTO
70692: IFFALSE 70716
// result := Delete ( result , result ) ;
70694: LD_ADDR_VAR 0 3
70698: PUSH
70699: LD_VAR 0 3
70703: PPUSH
70704: LD_VAR 0 3
70708: PPUSH
70709: CALL_OW 3
70713: ST_TO_ADDR
70714: GO 70691
70716: POP
70717: POP
// end ;
70718: LD_VAR 0 3
70722: RET
// export function ComExit ( unit ) ; var tmp ; begin
70723: LD_INT 0
70725: PPUSH
70726: PPUSH
// if not IsInUnit ( unit ) then
70727: LD_VAR 0 1
70731: PPUSH
70732: CALL_OW 310
70736: NOT
70737: IFFALSE 70741
// exit ;
70739: GO 70801
// tmp := IsInUnit ( unit ) ;
70741: LD_ADDR_VAR 0 3
70745: PUSH
70746: LD_VAR 0 1
70750: PPUSH
70751: CALL_OW 310
70755: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70756: LD_VAR 0 3
70760: PPUSH
70761: CALL_OW 247
70765: PUSH
70766: LD_INT 2
70768: EQUAL
70769: IFFALSE 70782
// ComExitVehicle ( unit ) else
70771: LD_VAR 0 1
70775: PPUSH
70776: CALL_OW 121
70780: GO 70791
// ComExitBuilding ( unit ) ;
70782: LD_VAR 0 1
70786: PPUSH
70787: CALL_OW 122
// result := tmp ;
70791: LD_ADDR_VAR 0 2
70795: PUSH
70796: LD_VAR 0 3
70800: ST_TO_ADDR
// end ;
70801: LD_VAR 0 2
70805: RET
// export function ComExitAll ( units ) ; var i ; begin
70806: LD_INT 0
70808: PPUSH
70809: PPUSH
// if not units then
70810: LD_VAR 0 1
70814: NOT
70815: IFFALSE 70819
// exit ;
70817: GO 70845
// for i in units do
70819: LD_ADDR_VAR 0 3
70823: PUSH
70824: LD_VAR 0 1
70828: PUSH
70829: FOR_IN
70830: IFFALSE 70843
// ComExit ( i ) ;
70832: LD_VAR 0 3
70836: PPUSH
70837: CALL 70723 0 1
70841: GO 70829
70843: POP
70844: POP
// end ;
70845: LD_VAR 0 2
70849: RET
// export function ResetHc ; begin
70850: LD_INT 0
70852: PPUSH
// InitHc ;
70853: CALL_OW 19
// hc_importance := 0 ;
70857: LD_ADDR_OWVAR 32
70861: PUSH
70862: LD_INT 0
70864: ST_TO_ADDR
// end ;
70865: LD_VAR 0 1
70869: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70870: LD_INT 0
70872: PPUSH
70873: PPUSH
70874: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70875: LD_ADDR_VAR 0 6
70879: PUSH
70880: LD_VAR 0 1
70884: PUSH
70885: LD_VAR 0 3
70889: PLUS
70890: PUSH
70891: LD_INT 2
70893: DIV
70894: ST_TO_ADDR
// if _x < 0 then
70895: LD_VAR 0 6
70899: PUSH
70900: LD_INT 0
70902: LESS
70903: IFFALSE 70920
// _x := _x * - 1 ;
70905: LD_ADDR_VAR 0 6
70909: PUSH
70910: LD_VAR 0 6
70914: PUSH
70915: LD_INT 1
70917: NEG
70918: MUL
70919: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70920: LD_ADDR_VAR 0 7
70924: PUSH
70925: LD_VAR 0 2
70929: PUSH
70930: LD_VAR 0 4
70934: PLUS
70935: PUSH
70936: LD_INT 2
70938: DIV
70939: ST_TO_ADDR
// if _y < 0 then
70940: LD_VAR 0 7
70944: PUSH
70945: LD_INT 0
70947: LESS
70948: IFFALSE 70965
// _y := _y * - 1 ;
70950: LD_ADDR_VAR 0 7
70954: PUSH
70955: LD_VAR 0 7
70959: PUSH
70960: LD_INT 1
70962: NEG
70963: MUL
70964: ST_TO_ADDR
// result := [ _x , _y ] ;
70965: LD_ADDR_VAR 0 5
70969: PUSH
70970: LD_VAR 0 6
70974: PUSH
70975: LD_VAR 0 7
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: ST_TO_ADDR
// end ;
70984: LD_VAR 0 5
70988: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70989: LD_INT 0
70991: PPUSH
70992: PPUSH
70993: PPUSH
70994: PPUSH
// task := GetTaskList ( unit ) ;
70995: LD_ADDR_VAR 0 7
70999: PUSH
71000: LD_VAR 0 1
71004: PPUSH
71005: CALL_OW 437
71009: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71010: LD_VAR 0 7
71014: NOT
71015: PUSH
71016: LD_VAR 0 1
71020: PPUSH
71021: LD_VAR 0 2
71025: PPUSH
71026: CALL_OW 308
71030: NOT
71031: AND
71032: IFFALSE 71036
// exit ;
71034: GO 71154
// if IsInArea ( unit , area ) then
71036: LD_VAR 0 1
71040: PPUSH
71041: LD_VAR 0 2
71045: PPUSH
71046: CALL_OW 308
71050: IFFALSE 71068
// begin ComMoveToArea ( unit , goAway ) ;
71052: LD_VAR 0 1
71056: PPUSH
71057: LD_VAR 0 3
71061: PPUSH
71062: CALL_OW 113
// exit ;
71066: GO 71154
// end ; if task [ 1 ] [ 1 ] <> M then
71068: LD_VAR 0 7
71072: PUSH
71073: LD_INT 1
71075: ARRAY
71076: PUSH
71077: LD_INT 1
71079: ARRAY
71080: PUSH
71081: LD_STRING M
71083: NONEQUAL
71084: IFFALSE 71088
// exit ;
71086: GO 71154
// x := task [ 1 ] [ 2 ] ;
71088: LD_ADDR_VAR 0 5
71092: PUSH
71093: LD_VAR 0 7
71097: PUSH
71098: LD_INT 1
71100: ARRAY
71101: PUSH
71102: LD_INT 2
71104: ARRAY
71105: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71106: LD_ADDR_VAR 0 6
71110: PUSH
71111: LD_VAR 0 7
71115: PUSH
71116: LD_INT 1
71118: ARRAY
71119: PUSH
71120: LD_INT 3
71122: ARRAY
71123: ST_TO_ADDR
// if InArea ( x , y , area ) then
71124: LD_VAR 0 5
71128: PPUSH
71129: LD_VAR 0 6
71133: PPUSH
71134: LD_VAR 0 2
71138: PPUSH
71139: CALL_OW 309
71143: IFFALSE 71154
// ComStop ( unit ) ;
71145: LD_VAR 0 1
71149: PPUSH
71150: CALL_OW 141
// end ;
71154: LD_VAR 0 4
71158: RET
// export function Abs ( value ) ; begin
71159: LD_INT 0
71161: PPUSH
// result := value ;
71162: LD_ADDR_VAR 0 2
71166: PUSH
71167: LD_VAR 0 1
71171: ST_TO_ADDR
// if value < 0 then
71172: LD_VAR 0 1
71176: PUSH
71177: LD_INT 0
71179: LESS
71180: IFFALSE 71197
// result := value * - 1 ;
71182: LD_ADDR_VAR 0 2
71186: PUSH
71187: LD_VAR 0 1
71191: PUSH
71192: LD_INT 1
71194: NEG
71195: MUL
71196: ST_TO_ADDR
// end ;
71197: LD_VAR 0 2
71201: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71202: LD_INT 0
71204: PPUSH
71205: PPUSH
71206: PPUSH
71207: PPUSH
71208: PPUSH
71209: PPUSH
71210: PPUSH
71211: PPUSH
// if not unit or not building then
71212: LD_VAR 0 1
71216: NOT
71217: PUSH
71218: LD_VAR 0 2
71222: NOT
71223: OR
71224: IFFALSE 71228
// exit ;
71226: GO 71454
// x := GetX ( building ) ;
71228: LD_ADDR_VAR 0 4
71232: PUSH
71233: LD_VAR 0 2
71237: PPUSH
71238: CALL_OW 250
71242: ST_TO_ADDR
// y := GetY ( building ) ;
71243: LD_ADDR_VAR 0 6
71247: PUSH
71248: LD_VAR 0 2
71252: PPUSH
71253: CALL_OW 251
71257: ST_TO_ADDR
// d := GetDir ( building ) ;
71258: LD_ADDR_VAR 0 8
71262: PUSH
71263: LD_VAR 0 2
71267: PPUSH
71268: CALL_OW 254
71272: ST_TO_ADDR
// r := 4 ;
71273: LD_ADDR_VAR 0 9
71277: PUSH
71278: LD_INT 4
71280: ST_TO_ADDR
// for i := 1 to 5 do
71281: LD_ADDR_VAR 0 10
71285: PUSH
71286: DOUBLE
71287: LD_INT 1
71289: DEC
71290: ST_TO_ADDR
71291: LD_INT 5
71293: PUSH
71294: FOR_TO
71295: IFFALSE 71452
// begin _x := ShiftX ( x , d , r + i ) ;
71297: LD_ADDR_VAR 0 5
71301: PUSH
71302: LD_VAR 0 4
71306: PPUSH
71307: LD_VAR 0 8
71311: PPUSH
71312: LD_VAR 0 9
71316: PUSH
71317: LD_VAR 0 10
71321: PLUS
71322: PPUSH
71323: CALL_OW 272
71327: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71328: LD_ADDR_VAR 0 7
71332: PUSH
71333: LD_VAR 0 6
71337: PPUSH
71338: LD_VAR 0 8
71342: PPUSH
71343: LD_VAR 0 9
71347: PUSH
71348: LD_VAR 0 10
71352: PLUS
71353: PPUSH
71354: CALL_OW 273
71358: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71359: LD_VAR 0 5
71363: PPUSH
71364: LD_VAR 0 7
71368: PPUSH
71369: CALL_OW 488
71373: PUSH
71374: LD_VAR 0 5
71378: PPUSH
71379: LD_VAR 0 7
71383: PPUSH
71384: CALL_OW 428
71388: PPUSH
71389: CALL_OW 247
71393: PUSH
71394: LD_INT 3
71396: PUSH
71397: LD_INT 2
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: IN
71404: NOT
71405: AND
71406: IFFALSE 71450
// begin ComMoveXY ( unit , _x , _y ) ;
71408: LD_VAR 0 1
71412: PPUSH
71413: LD_VAR 0 5
71417: PPUSH
71418: LD_VAR 0 7
71422: PPUSH
71423: CALL_OW 111
// result := [ _x , _y ] ;
71427: LD_ADDR_VAR 0 3
71431: PUSH
71432: LD_VAR 0 5
71436: PUSH
71437: LD_VAR 0 7
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: ST_TO_ADDR
// exit ;
71446: POP
71447: POP
71448: GO 71454
// end ; end ;
71450: GO 71294
71452: POP
71453: POP
// end ;
71454: LD_VAR 0 3
71458: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71459: LD_INT 0
71461: PPUSH
71462: PPUSH
71463: PPUSH
// result := 0 ;
71464: LD_ADDR_VAR 0 3
71468: PUSH
71469: LD_INT 0
71471: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71472: LD_VAR 0 1
71476: PUSH
71477: LD_INT 0
71479: LESS
71480: PUSH
71481: LD_VAR 0 1
71485: PUSH
71486: LD_INT 8
71488: GREATER
71489: OR
71490: PUSH
71491: LD_VAR 0 2
71495: PUSH
71496: LD_INT 0
71498: LESS
71499: OR
71500: PUSH
71501: LD_VAR 0 2
71505: PUSH
71506: LD_INT 8
71508: GREATER
71509: OR
71510: IFFALSE 71514
// exit ;
71512: GO 71589
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71514: LD_ADDR_VAR 0 4
71518: PUSH
71519: LD_INT 22
71521: PUSH
71522: LD_VAR 0 2
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PPUSH
71531: CALL_OW 69
71535: PUSH
71536: FOR_IN
71537: IFFALSE 71587
// begin un := UnitShoot ( i ) ;
71539: LD_ADDR_VAR 0 5
71543: PUSH
71544: LD_VAR 0 4
71548: PPUSH
71549: CALL_OW 504
71553: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71554: LD_VAR 0 5
71558: PPUSH
71559: CALL_OW 255
71563: PUSH
71564: LD_VAR 0 1
71568: EQUAL
71569: IFFALSE 71585
// begin result := un ;
71571: LD_ADDR_VAR 0 3
71575: PUSH
71576: LD_VAR 0 5
71580: ST_TO_ADDR
// exit ;
71581: POP
71582: POP
71583: GO 71589
// end ; end ;
71585: GO 71536
71587: POP
71588: POP
// end ;
71589: LD_VAR 0 3
71593: RET
// export function GetCargoBay ( units ) ; begin
71594: LD_INT 0
71596: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71597: LD_ADDR_VAR 0 2
71601: PUSH
71602: LD_VAR 0 1
71606: PPUSH
71607: LD_INT 2
71609: PUSH
71610: LD_INT 34
71612: PUSH
71613: LD_INT 12
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 34
71622: PUSH
71623: LD_INT 51
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 34
71632: PUSH
71633: LD_INT 32
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 34
71642: PUSH
71643: LD_EXP 37
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: PPUSH
71659: CALL_OW 72
71663: ST_TO_ADDR
// end ;
71664: LD_VAR 0 2
71668: RET
// export function Negate ( value ) ; begin
71669: LD_INT 0
71671: PPUSH
// result := not value ;
71672: LD_ADDR_VAR 0 2
71676: PUSH
71677: LD_VAR 0 1
71681: NOT
71682: ST_TO_ADDR
// end ;
71683: LD_VAR 0 2
71687: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
71688: LD_INT 0
71690: PPUSH
// if x1 = x2 then
71691: LD_VAR 0 1
71695: PUSH
71696: LD_VAR 0 3
71700: EQUAL
71701: IFFALSE 71735
// begin if y1 > y2 then
71703: LD_VAR 0 2
71707: PUSH
71708: LD_VAR 0 4
71712: GREATER
71713: IFFALSE 71725
// result := 0 else
71715: LD_ADDR_VAR 0 5
71719: PUSH
71720: LD_INT 0
71722: ST_TO_ADDR
71723: GO 71733
// result := 3 ;
71725: LD_ADDR_VAR 0 5
71729: PUSH
71730: LD_INT 3
71732: ST_TO_ADDR
// exit ;
71733: GO 71821
// end ; if y1 = y2 then
71735: LD_VAR 0 2
71739: PUSH
71740: LD_VAR 0 4
71744: EQUAL
71745: IFFALSE 71779
// begin if x1 > x2 then
71747: LD_VAR 0 1
71751: PUSH
71752: LD_VAR 0 3
71756: GREATER
71757: IFFALSE 71769
// result := 1 else
71759: LD_ADDR_VAR 0 5
71763: PUSH
71764: LD_INT 1
71766: ST_TO_ADDR
71767: GO 71777
// result := 4 ;
71769: LD_ADDR_VAR 0 5
71773: PUSH
71774: LD_INT 4
71776: ST_TO_ADDR
// exit ;
71777: GO 71821
// end ; if x1 > x2 and y1 > y2 then
71779: LD_VAR 0 1
71783: PUSH
71784: LD_VAR 0 3
71788: GREATER
71789: PUSH
71790: LD_VAR 0 2
71794: PUSH
71795: LD_VAR 0 4
71799: GREATER
71800: AND
71801: IFFALSE 71813
// result := 2 else
71803: LD_ADDR_VAR 0 5
71807: PUSH
71808: LD_INT 2
71810: ST_TO_ADDR
71811: GO 71821
// result := 5 ;
71813: LD_ADDR_VAR 0 5
71817: PUSH
71818: LD_INT 5
71820: ST_TO_ADDR
// end ;
71821: LD_VAR 0 5
71825: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71826: LD_INT 0
71828: PPUSH
71829: PPUSH
// if not driver or not IsInUnit ( driver ) then
71830: LD_VAR 0 1
71834: NOT
71835: PUSH
71836: LD_VAR 0 1
71840: PPUSH
71841: CALL_OW 310
71845: NOT
71846: OR
71847: IFFALSE 71851
// exit ;
71849: GO 71941
// vehicle := IsInUnit ( driver ) ;
71851: LD_ADDR_VAR 0 3
71855: PUSH
71856: LD_VAR 0 1
71860: PPUSH
71861: CALL_OW 310
71865: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71866: LD_VAR 0 1
71870: PPUSH
71871: LD_STRING \
71873: PUSH
71874: LD_INT 0
71876: PUSH
71877: LD_INT 0
71879: PUSH
71880: LD_INT 0
71882: PUSH
71883: LD_INT 0
71885: PUSH
71886: LD_INT 0
71888: PUSH
71889: LD_INT 0
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: PUSH
71901: LD_STRING E
71903: PUSH
71904: LD_INT 0
71906: PUSH
71907: LD_INT 0
71909: PUSH
71910: LD_VAR 0 3
71914: PUSH
71915: LD_INT 0
71917: PUSH
71918: LD_INT 0
71920: PUSH
71921: LD_INT 0
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PPUSH
71937: CALL_OW 446
// end ;
71941: LD_VAR 0 2
71945: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71946: LD_INT 0
71948: PPUSH
71949: PPUSH
// if not driver or not IsInUnit ( driver ) then
71950: LD_VAR 0 1
71954: NOT
71955: PUSH
71956: LD_VAR 0 1
71960: PPUSH
71961: CALL_OW 310
71965: NOT
71966: OR
71967: IFFALSE 71971
// exit ;
71969: GO 72061
// vehicle := IsInUnit ( driver ) ;
71971: LD_ADDR_VAR 0 3
71975: PUSH
71976: LD_VAR 0 1
71980: PPUSH
71981: CALL_OW 310
71985: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71986: LD_VAR 0 1
71990: PPUSH
71991: LD_STRING \
71993: PUSH
71994: LD_INT 0
71996: PUSH
71997: LD_INT 0
71999: PUSH
72000: LD_INT 0
72002: PUSH
72003: LD_INT 0
72005: PUSH
72006: LD_INT 0
72008: PUSH
72009: LD_INT 0
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: PUSH
72021: LD_STRING E
72023: PUSH
72024: LD_INT 0
72026: PUSH
72027: LD_INT 0
72029: PUSH
72030: LD_VAR 0 3
72034: PUSH
72035: LD_INT 0
72037: PUSH
72038: LD_INT 0
72040: PUSH
72041: LD_INT 0
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PPUSH
72057: CALL_OW 447
// end ;
72061: LD_VAR 0 2
72065: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72066: LD_INT 0
72068: PPUSH
72069: PPUSH
72070: PPUSH
// tmp := [ ] ;
72071: LD_ADDR_VAR 0 5
72075: PUSH
72076: EMPTY
72077: ST_TO_ADDR
// for i in units do
72078: LD_ADDR_VAR 0 4
72082: PUSH
72083: LD_VAR 0 1
72087: PUSH
72088: FOR_IN
72089: IFFALSE 72127
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72091: LD_ADDR_VAR 0 5
72095: PUSH
72096: LD_VAR 0 5
72100: PPUSH
72101: LD_VAR 0 5
72105: PUSH
72106: LD_INT 1
72108: PLUS
72109: PPUSH
72110: LD_VAR 0 4
72114: PPUSH
72115: CALL_OW 256
72119: PPUSH
72120: CALL_OW 2
72124: ST_TO_ADDR
72125: GO 72088
72127: POP
72128: POP
// if not tmp then
72129: LD_VAR 0 5
72133: NOT
72134: IFFALSE 72138
// exit ;
72136: GO 72186
// if asc then
72138: LD_VAR 0 2
72142: IFFALSE 72166
// result := SortListByListAsc ( units , tmp ) else
72144: LD_ADDR_VAR 0 3
72148: PUSH
72149: LD_VAR 0 1
72153: PPUSH
72154: LD_VAR 0 5
72158: PPUSH
72159: CALL_OW 76
72163: ST_TO_ADDR
72164: GO 72186
// result := SortListByListDesc ( units , tmp ) ;
72166: LD_ADDR_VAR 0 3
72170: PUSH
72171: LD_VAR 0 1
72175: PPUSH
72176: LD_VAR 0 5
72180: PPUSH
72181: CALL_OW 77
72185: ST_TO_ADDR
// end ;
72186: LD_VAR 0 3
72190: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72191: LD_INT 0
72193: PPUSH
72194: PPUSH
// task := GetTaskList ( mech ) ;
72195: LD_ADDR_VAR 0 4
72199: PUSH
72200: LD_VAR 0 1
72204: PPUSH
72205: CALL_OW 437
72209: ST_TO_ADDR
// if not task then
72210: LD_VAR 0 4
72214: NOT
72215: IFFALSE 72219
// exit ;
72217: GO 72261
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72219: LD_ADDR_VAR 0 3
72223: PUSH
72224: LD_VAR 0 4
72228: PUSH
72229: LD_INT 1
72231: ARRAY
72232: PUSH
72233: LD_INT 1
72235: ARRAY
72236: PUSH
72237: LD_STRING r
72239: EQUAL
72240: PUSH
72241: LD_VAR 0 4
72245: PUSH
72246: LD_INT 1
72248: ARRAY
72249: PUSH
72250: LD_INT 4
72252: ARRAY
72253: PUSH
72254: LD_VAR 0 2
72258: EQUAL
72259: AND
72260: ST_TO_ADDR
// end ;
72261: LD_VAR 0 3
72265: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72266: LD_INT 0
72268: PPUSH
// SetDir ( unit , d ) ;
72269: LD_VAR 0 1
72273: PPUSH
72274: LD_VAR 0 4
72278: PPUSH
72279: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72283: LD_VAR 0 1
72287: PPUSH
72288: LD_VAR 0 2
72292: PPUSH
72293: LD_VAR 0 3
72297: PPUSH
72298: LD_VAR 0 5
72302: PPUSH
72303: CALL_OW 48
// end ;
72307: LD_VAR 0 6
72311: RET
// export function ToNaturalNumber ( number ) ; begin
72312: LD_INT 0
72314: PPUSH
// result := number div 1 ;
72315: LD_ADDR_VAR 0 2
72319: PUSH
72320: LD_VAR 0 1
72324: PUSH
72325: LD_INT 1
72327: DIV
72328: ST_TO_ADDR
// if number < 0 then
72329: LD_VAR 0 1
72333: PUSH
72334: LD_INT 0
72336: LESS
72337: IFFALSE 72347
// result := 0 ;
72339: LD_ADDR_VAR 0 2
72343: PUSH
72344: LD_INT 0
72346: ST_TO_ADDR
// end ;
72347: LD_VAR 0 2
72351: RET
// export function SortByClass ( units , class ) ; var un ; begin
72352: LD_INT 0
72354: PPUSH
72355: PPUSH
// if not units or not class then
72356: LD_VAR 0 1
72360: NOT
72361: PUSH
72362: LD_VAR 0 2
72366: NOT
72367: OR
72368: IFFALSE 72372
// exit ;
72370: GO 72467
// result := [ ] ;
72372: LD_ADDR_VAR 0 3
72376: PUSH
72377: EMPTY
72378: ST_TO_ADDR
// for un in units do
72379: LD_ADDR_VAR 0 4
72383: PUSH
72384: LD_VAR 0 1
72388: PUSH
72389: FOR_IN
72390: IFFALSE 72465
// if GetClass ( un ) = class then
72392: LD_VAR 0 4
72396: PPUSH
72397: CALL_OW 257
72401: PUSH
72402: LD_VAR 0 2
72406: EQUAL
72407: IFFALSE 72434
// result := Insert ( result , 1 , un ) else
72409: LD_ADDR_VAR 0 3
72413: PUSH
72414: LD_VAR 0 3
72418: PPUSH
72419: LD_INT 1
72421: PPUSH
72422: LD_VAR 0 4
72426: PPUSH
72427: CALL_OW 2
72431: ST_TO_ADDR
72432: GO 72463
// result := Replace ( result , result + 1 , un ) ;
72434: LD_ADDR_VAR 0 3
72438: PUSH
72439: LD_VAR 0 3
72443: PPUSH
72444: LD_VAR 0 3
72448: PUSH
72449: LD_INT 1
72451: PLUS
72452: PPUSH
72453: LD_VAR 0 4
72457: PPUSH
72458: CALL_OW 1
72462: ST_TO_ADDR
72463: GO 72389
72465: POP
72466: POP
// end ; end_of_file
72467: LD_VAR 0 3
72471: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72472: LD_VAR 0 1
72476: PUSH
72477: LD_INT 200
72479: DOUBLE
72480: GREATEREQUAL
72481: IFFALSE 72489
72483: LD_INT 299
72485: DOUBLE
72486: LESSEQUAL
72487: IFTRUE 72491
72489: GO 72523
72491: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72492: LD_VAR 0 1
72496: PPUSH
72497: LD_VAR 0 2
72501: PPUSH
72502: LD_VAR 0 3
72506: PPUSH
72507: LD_VAR 0 4
72511: PPUSH
72512: LD_VAR 0 5
72516: PPUSH
72517: CALL 29715 0 5
72521: GO 72600
72523: LD_INT 300
72525: DOUBLE
72526: GREATEREQUAL
72527: IFFALSE 72535
72529: LD_INT 399
72531: DOUBLE
72532: LESSEQUAL
72533: IFTRUE 72537
72535: GO 72599
72537: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72538: LD_VAR 0 1
72542: PPUSH
72543: LD_VAR 0 2
72547: PPUSH
72548: LD_VAR 0 3
72552: PPUSH
72553: LD_VAR 0 4
72557: PPUSH
72558: LD_VAR 0 5
72562: PPUSH
72563: LD_VAR 0 6
72567: PPUSH
72568: LD_VAR 0 7
72572: PPUSH
72573: LD_VAR 0 8
72577: PPUSH
72578: LD_VAR 0 9
72582: PPUSH
72583: LD_VAR 0 10
72587: PPUSH
72588: LD_VAR 0 11
72592: PPUSH
72593: CALL 27603 0 11
72597: GO 72600
72599: POP
// end ;
72600: PPOPN 11
72602: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72603: LD_VAR 0 1
72607: PPUSH
72608: LD_VAR 0 2
72612: PPUSH
72613: LD_VAR 0 3
72617: PPUSH
72618: LD_VAR 0 4
72622: PPUSH
72623: LD_VAR 0 5
72627: PPUSH
72628: CALL 29697 0 5
// end ; end_of_file
72632: PPOPN 5
72634: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72635: LD_VAR 0 1
72639: PPUSH
72640: LD_VAR 0 2
72644: PPUSH
72645: LD_VAR 0 3
72649: PPUSH
72650: LD_VAR 0 4
72654: PPUSH
72655: LD_VAR 0 5
72659: PPUSH
72660: LD_VAR 0 6
72664: PPUSH
72665: CALL 16411 0 6
// end ;
72669: PPOPN 6
72671: END
