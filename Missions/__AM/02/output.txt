// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10516 0 0
// PrepareRussianCommander ;
  44: CALL 12050 0 0
// PrepareSouthBase ;
  48: CALL 12146 0 0
// PrepareNorthBase ;
  52: CALL 12484 0 0
// PrepareOtherRussians ;
  56: CALL 12879 0 0
// PrepareHeroes ;
  60: CALL 10837 0 0
// PrepareLisSquad ;
  64: CALL 11207 0 0
// PrepareOtherAmericans ;
  68: CALL 11520 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 586
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 586
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11662 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 586
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11888 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 15305 0 0
// RussianTrap ;
6346: CALL 10215 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 13071 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6724: LD_EXP 20
6728: PUSH
6729: LD_EXP 15
6733: PUSH
6734: LD_EXP 16
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: LD_INT 50
6745: PUSH
6746: EMPTY
6747: LIST
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 52
6761: PUSH
6762: EMPTY
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 72
6774: AND
6775: IFFALSE 7108
6777: GO 6779
6779: DISABLE
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
// begin enable ;
6786: ENABLE
// for i in [ cargo1 , cargo2 ] do
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 15
6796: PUSH
6797: LD_EXP 16
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: FOR_IN
6807: IFFALSE 7106
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: CALL_OW 250
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: CALL_OW 251
6833: PPUSH
6834: LD_INT 6
6836: PPUSH
6837: CALL 76560 0 3
6841: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6842: LD_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: CALL 77779 0 1
6856: PUSH
6857: LD_INT 4
6859: ARRAY
6860: PUSH
6861: LD_INT 60
6863: LESS
6864: AND
6865: IFFALSE 6904
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PUSH
6881: LD_INT 1
6883: ARRAY
6884: PPUSH
6885: LD_VAR 0 1
6889: PUSH
6890: LD_INT 1
6892: ARRAY
6893: PUSH
6894: LD_INT 2
6896: ARRAY
6897: PPUSH
6898: CALL_OW 117
6902: GO 7104
// if not IsInArea ( i , RemoveArea ) then
6904: LD_VAR 0 2
6908: PPUSH
6909: LD_INT 32
6911: PPUSH
6912: CALL_OW 308
6916: NOT
6917: IFFALSE 7065
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6919: LD_ADDR_VAR 0 3
6923: PUSH
6924: LD_VAR 0 2
6928: PPUSH
6929: CALL_OW 250
6933: PPUSH
6934: LD_INT 4
6936: PPUSH
6937: LD_INT 3
6939: PPUSH
6940: CALL_OW 272
6944: ST_TO_ADDR
// y := GetY ( i ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 2
6954: PPUSH
6955: CALL_OW 251
6959: ST_TO_ADDR
// if HexInfo ( x , y ) then
6960: LD_VAR 0 3
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 428
6974: IFFALSE 6997
// x := ShiftX ( x , 4 , 3 ) ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 4
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 272
6996: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 428
7011: PUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 488
7026: NOT
7027: OR
7028: IFFALSE 7044
// ComMoveToArea ( i , RemoveArea ) else
7030: LD_VAR 0 2
7034: PPUSH
7035: LD_INT 32
7037: PPUSH
7038: CALL_OW 113
7042: GO 7063
// ComMoveXY ( i , x , y ) ;
7044: LD_VAR 0 2
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 111
// end else
7063: GO 7104
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 311
7074: PPUSH
7075: CALL_OW 64
// RemoveUnit ( i ) ;
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7088: LD_ADDR_EXP 20
7092: PUSH
7093: LD_EXP 20
7097: PUSH
7098: LD_INT 1
7100: PLUS
7101: ST_TO_ADDR
// continue ;
7102: GO 6806
// end ; end ;
7104: GO 6806
7106: POP
7107: POP
// end ;
7108: PPOPN 4
7110: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7111: LD_EXP 20
7115: PUSH
7116: LD_INT 1
7118: GREATER
7119: IFFALSE 7368
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7127: LD_INT 4
7129: PPUSH
7130: LD_INT 1
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7140: LD_INT 31
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: LD_INT 1
7148: PPUSH
7149: CALL_OW 324
// Hint ( Bunker ) ;
7153: LD_STRING Bunker
7155: PPUSH
7156: CALL_OW 339
// if IsOK ( Jerry ) then
7160: LD_EXP 7
7164: PPUSH
7165: CALL_OW 302
7169: IFFALSE 7185
// Say ( Jerry , D5a-Sol1-1 ) else
7171: LD_EXP 7
7175: PPUSH
7176: LD_STRING D5a-Sol1-1
7178: PPUSH
7179: CALL_OW 88
7183: GO 7271
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7185: LD_ADDR_VAR 0 1
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 26
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: PUSH
7219: LD_EXP 1
7223: PUSH
7224: LD_EXP 2
7228: PUSH
7229: LD_EXP 3
7233: PUSH
7234: LD_EXP 5
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: DIFF
7245: ST_TO_ADDR
// if not speaker then
7246: LD_VAR 0 1
7250: NOT
7251: IFFALSE 7255
// exit ;
7253: GO 7368
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7255: LD_VAR 0 1
7259: PUSH
7260: LD_INT 1
7262: ARRAY
7263: PPUSH
7264: LD_STRING D5a-Sol1-1
7266: PPUSH
7267: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7271: LD_EXP 1
7275: PPUSH
7276: LD_STRING D5a-JMM-1
7278: PPUSH
7279: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7283: LD_INT 22
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 25
7298: PUSH
7299: LD_INT 2
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 70
7314: IFFALSE 7368
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7316: LD_INT 22
7318: PPUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 25
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: PUSH
7348: LD_INT 1
7350: ARRAY
7351: PPUSH
7352: LD_INT 31
7354: PPUSH
7355: LD_INT 44
7357: PPUSH
7358: LD_INT 13
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 145
// end ;
7368: PPOPN 1
7370: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 255
7378: PUSH
7379: LD_INT 3
7381: EQUAL
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: CALL_OW 256
7390: PUSH
7391: LD_INT 1000
7393: LESS
7394: AND
7395: PUSH
7396: LD_INT 10
7398: PPUSH
7399: CALL_OW 255
7403: PUSH
7404: LD_INT 3
7406: EQUAL
7407: PUSH
7408: LD_INT 10
7410: PPUSH
7411: CALL_OW 256
7415: PUSH
7416: LD_INT 1000
7418: LESS
7419: AND
7420: OR
7421: IFFALSE 7438
7423: GO 7425
7425: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D8-JMM-1
7433: PPUSH
7434: CALL_OW 88
7438: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7439: LD_EXP 8
7443: PPUSH
7444: CALL_OW 310
7448: PUSH
7449: LD_INT 1
7451: EQUAL
7452: PUSH
7453: LD_EXP 22
7457: PUSH
7458: LD_INT 3
7460: EQUAL
7461: NOT
7462: AND
7463: IFFALSE 7485
7465: GO 7467
7467: DISABLE
// begin enable ;
7468: ENABLE
// mikhailInBase = 1 ;
7469: LD_ADDR_EXP 22
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// mikhailStatus = 1 ;
7477: LD_ADDR_EXP 21
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// end ;
7485: END
// export function AskMikhail ; begin
7486: LD_INT 0
7488: PPUSH
// case Query ( QMikh2 ) of 1 :
7489: LD_STRING QMikh2
7491: PPUSH
7492: CALL_OW 97
7496: PUSH
7497: LD_INT 1
7499: DOUBLE
7500: EQUAL
7501: IFTRUE 7505
7503: GO 7572
7505: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7506: LD_INT 1
7508: PPUSH
7509: LD_INT 6
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_INT 1
7517: PPUSH
7518: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7522: LD_EXP 8
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7534: LD_EXP 8
7538: PPUSH
7539: CALL_OW 122
// wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7550: LD_EXP 8
7554: PPUSH
7555: LD_INT 17
7557: PPUSH
7558: CALL_OW 113
// mikhailInbase = 0 ;
7562: LD_ADDR_EXP 22
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// end ; 2 :
7570: GO 7813
7572: LD_INT 2
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7753
7580: POP
// begin mikhailInBase = 2 ;
7581: LD_ADDR_EXP 22
7585: PUSH
7586: LD_INT 2
7588: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7589: LD_EXP 8
7593: PPUSH
7594: LD_INT 6
7596: PPUSH
7597: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7601: LD_EXP 8
7605: PPUSH
7606: CALL_OW 122
// wait ( 0 0$1 ) ;
7610: LD_INT 35
7612: PPUSH
7613: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7617: LD_EXP 8
7621: PPUSH
7622: LD_EXP 8
7626: PPUSH
7627: CALL_OW 250
7631: PUSH
7632: LD_INT 2
7634: PLUS
7635: PPUSH
7636: LD_EXP 8
7640: PPUSH
7641: CALL_OW 251
7645: PUSH
7646: LD_INT 2
7648: PLUS
7649: PPUSH
7650: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7654: LD_EXP 8
7658: PPUSH
7659: LD_EXP 8
7663: PPUSH
7664: CALL_OW 250
7668: PUSH
7669: LD_INT 1
7671: PLUS
7672: PPUSH
7673: LD_EXP 8
7677: PPUSH
7678: CALL_OW 251
7682: PUSH
7683: LD_INT 2
7685: PLUS
7686: PPUSH
7687: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7691: LD_EXP 8
7695: PPUSH
7696: LD_EXP 8
7700: PPUSH
7701: CALL_OW 250
7705: PUSH
7706: LD_INT 2
7708: PLUS
7709: PPUSH
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 251
7719: PPUSH
7720: CALL_OW 171
// wait ( 0 0$5 ) ;
7724: LD_INT 175
7726: PPUSH
7727: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7731: LD_EXP 8
7735: PPUSH
7736: LD_INT 25
7738: PPUSH
7739: CALL_OW 113
// mikhailInBase = 4 ;
7743: LD_ADDR_EXP 22
7747: PUSH
7748: LD_INT 4
7750: ST_TO_ADDR
// end ; 3 :
7751: GO 7813
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7812
7761: POP
// begin SetSide ( Mikhail , 6 ) ;
7762: LD_EXP 8
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7774: LD_EXP 8
7778: PPUSH
7779: CALL_OW 122
// wait ( 0 0$1 ) ;
7783: LD_INT 35
7785: PPUSH
7786: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7790: LD_EXP 8
7794: PPUSH
7795: LD_INT 17
7797: PPUSH
7798: CALL_OW 113
// mikhailInbase = 3 ;
7802: LD_ADDR_EXP 22
7806: PUSH
7807: LD_INT 3
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7813
7812: POP
// end ;
7813: LD_VAR 0 1
7817: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7818: LD_EXP 8
7822: PPUSH
7823: LD_INT 25
7825: PPUSH
7826: CALL_OW 308
7830: PUSH
7831: LD_EXP 22
7835: PUSH
7836: LD_INT 4
7838: EQUAL
7839: AND
7840: IFFALSE 7944
7842: GO 7844
7844: DISABLE
// begin enable ;
7845: ENABLE
// mikhailInBase = 1 ;
7846: LD_ADDR_EXP 22
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// InGameOn ;
7854: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 6
7863: PPUSH
7864: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7868: LD_INT 35
7870: PPUSH
7871: CALL_OW 67
// if Carry ( Mikhail ) then
7875: LD_EXP 8
7879: PPUSH
7880: CALL_OW 281
7884: IFFALSE 7895
// ComUnload ( Mikhail ) ;
7886: LD_EXP 8
7890: PPUSH
7891: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7895: LD_EXP 8
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7907: LD_EXP 8
7911: PPUSH
7912: CALL_OW 310
7916: IFFALSE 7868
// SetSide ( dep1 , 1 ) ;
7918: LD_INT 1
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7928: LD_EXP 8
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: CALL_OW 235
// InGameOff ;
7940: CALL_OW 9
// end ;
7944: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7945: LD_EXP 8
7949: PPUSH
7950: CALL_OW 310
7954: PUSH
7955: LD_EXP 22
7959: PUSH
7960: LD_INT 3
7962: EQUAL
7963: NOT
7964: AND
7965: IFFALSE 8100
7967: GO 7969
7969: DISABLE
// begin enable ;
7970: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7971: LD_INT 22
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 91
7993: PUSH
7994: LD_EXP 8
7998: PPUSH
7999: CALL_OW 310
8003: PUSH
8004: LD_INT 10
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 69
8021: PUSH
8022: LD_INT 1
8024: EQUAL
8025: IFFALSE 8100
// begin mikhailStatus = 4 ;
8027: LD_ADDR_EXP 21
8031: PUSH
8032: LD_INT 4
8034: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8035: LD_INT 1
8037: PPUSH
8038: LD_INT 6
8040: PPUSH
8041: LD_INT 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8051: LD_EXP 8
8055: PPUSH
8056: LD_INT 6
8058: PPUSH
8059: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8063: LD_EXP 8
8067: PPUSH
8068: CALL_OW 122
// wait ( 0 0$1 ) ;
8072: LD_INT 35
8074: PPUSH
8075: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8079: LD_EXP 8
8083: PPUSH
8084: LD_INT 17
8086: PPUSH
8087: CALL_OW 113
// mikhailStatus = 3 ;
8091: LD_ADDR_EXP 21
8095: PUSH
8096: LD_INT 3
8098: ST_TO_ADDR
// disable ;
8099: DISABLE
// end ; end ;
8100: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8101: LD_EXP 1
8105: PPUSH
8106: LD_EXP 23
8110: PPUSH
8111: CALL_OW 296
8115: PUSH
8116: LD_INT 5
8118: LESS
8119: PUSH
8120: LD_EXP 21
8124: PUSH
8125: LD_INT 3
8127: EQUAL
8128: AND
8129: PUSH
8130: LD_EXP 22
8134: PUSH
8135: LD_INT 3
8137: EQUAL
8138: NOT
8139: AND
8140: IFFALSE 8371
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 26
8175: PUSH
8176: LD_INT 1
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: PUSH
8193: LD_EXP 1
8197: PUSH
8198: LD_EXP 5
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: DIFF
8207: ST_TO_ADDR
// if not tmp then
8208: LD_VAR 0 1
8212: NOT
8213: IFFALSE 8217
// exit ;
8215: GO 8371
// DialogueOn ;
8217: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8221: LD_EXP 1
8225: PPUSH
8226: LD_STRING D7-JMM-1
8228: PPUSH
8229: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8233: LD_VAR 0 1
8237: PUSH
8238: LD_INT 1
8240: ARRAY
8241: PPUSH
8242: LD_STRING D7-Sol1-1
8244: PPUSH
8245: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8249: LD_EXP 1
8253: PPUSH
8254: LD_STRING D7-JMM-2
8256: PPUSH
8257: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8261: LD_VAR 0 1
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PPUSH
8270: LD_STRING D7-Sol1-2
8272: PPUSH
8273: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8277: LD_EXP 1
8281: PPUSH
8282: LD_STRING D7-JMM-3
8284: PPUSH
8285: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8289: LD_VAR 0 1
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: LD_STRING D7-Sol1-3
8300: PPUSH
8301: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8305: LD_EXP 3
8309: PPUSH
8310: CALL_OW 302
8314: PUSH
8315: LD_EXP 4
8319: PPUSH
8320: CALL_OW 302
8324: AND
8325: IFFALSE 8367
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8327: LD_EXP 3
8331: PPUSH
8332: LD_STRING D7-Cyrus-3
8334: PPUSH
8335: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8339: LD_VAR 0 1
8343: PUSH
8344: LD_INT 1
8346: ARRAY
8347: PPUSH
8348: LD_STRING D7-Sol1-4
8350: PPUSH
8351: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8355: LD_EXP 4
8359: PPUSH
8360: LD_STRING D7-Lisa-4
8362: PPUSH
8363: CALL_OW 88
// end ; DialogueOff ;
8367: CALL_OW 7
// end ;
8371: PPOPN 1
8373: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8374: LD_EXP 8
8378: PPUSH
8379: CALL_OW 303
8383: PUSH
8384: LD_EXP 21
8388: PUSH
8389: LD_INT 3
8391: EQUAL
8392: AND
8393: IFFALSE 8407
8395: GO 8397
8397: DISABLE
// begin enable ;
8398: ENABLE
// mikhailStatus = 2 ;
8399: LD_ADDR_EXP 21
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// end ;
8407: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8408: LD_EXP 8
8412: PPUSH
8413: LD_INT 17
8415: PPUSH
8416: CALL_OW 308
8420: PUSH
8421: LD_EXP 8
8425: PPUSH
8426: CALL_OW 255
8430: PUSH
8431: LD_INT 6
8433: EQUAL
8434: AND
8435: IFFALSE 8468
8437: GO 8439
8439: DISABLE
// begin if not mikhailInBase = 3 then
8440: LD_EXP 22
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: NOT
8449: IFFALSE 8459
// mikhailStatus = 3 ;
8451: LD_ADDR_EXP 21
8455: PUSH
8456: LD_INT 3
8458: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8459: LD_EXP 8
8463: PPUSH
8464: CALL_OW 64
// end ;
8468: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8469: LD_EXP 21
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: PUSH
8478: LD_EXP 8
8482: PPUSH
8483: CALL_OW 255
8487: PUSH
8488: LD_INT 6
8490: EQUAL
8491: AND
8492: IFFALSE 8658
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
// begin enable ;
8501: ENABLE
// if IsOk ( Mikhail ) then
8502: LD_EXP 8
8506: PPUSH
8507: CALL_OW 302
8511: IFFALSE 8658
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8513: LD_ADDR_VAR 0 2
8517: PUSH
8518: LD_EXP 8
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 21
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PPUSH
8552: CALL 10407 0 2
8556: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_EXP 8
8566: PPUSH
8567: CALL_OW 296
8571: PUSH
8572: LD_INT 8
8574: LESS
8575: IFFALSE 8658
// begin if GetSex ( attacker ) = sex_male then
8577: LD_VAR 0 2
8581: PPUSH
8582: CALL_OW 258
8586: PUSH
8587: LD_INT 1
8589: EQUAL
8590: IFFALSE 8626
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-Sol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-Sol1-1a
8619: PPUSH
8620: CALL_OW 88
// end else
8624: GO 8658
// begin disable ;
8626: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_STRING D7a-FSol1-1
8634: PPUSH
8635: CALL_OW 88
// wait ( 0 0$2 ) ;
8639: LD_INT 70
8641: PPUSH
8642: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: LD_STRING D7a-FSol1-1a
8653: PPUSH
8654: CALL_OW 88
// end ; end ; end ; end ;
8658: PPOPN 2
8660: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8661: LD_EXP 27
8665: PUSH
8666: LD_INT 1
8668: EQUAL
8669: PUSH
8670: LD_INT 22
8672: PPUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PPUSH
8697: CALL_OW 70
8701: PUSH
8702: LD_INT 2
8704: GREATER
8705: AND
8706: PUSH
8707: LD_INT 22
8709: PPUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: LD_INT 21
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 59
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: PUSH
8753: LD_INT 0
8755: EQUAL
8756: AND
8757: IFFALSE 8772
8759: GO 8761
8761: DISABLE
// SetSide ( dep1 , 3 ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 3
8767: PPUSH
8768: CALL_OW 235
8772: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8773: LD_EXP 30
8777: PUSH
8778: LD_INT 1
8780: EQUAL
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 0
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 14
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: AND
8815: IFFALSE 8916
8817: GO 8819
8819: DISABLE
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_INT 22
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 21
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 23
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: PPUSH
8864: CALL_OW 69
8868: ST_TO_ADDR
// for i in tmp do
8869: LD_ADDR_VAR 0 1
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: FOR_IN
8880: IFFALSE 8907
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 4
8892: PPUSH
8893: CALL_OW 12
8897: PPUSH
8898: LD_INT 300
8900: PPUSH
8901: CALL_OW 492
8905: GO 8879
8907: POP
8908: POP
// SetAchievement ( ACH_TIGER ) ;
8909: LD_STRING ACH_TIGER
8911: PPUSH
8912: CALL_OW 543
// end ;
8916: PPOPN 2
8918: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 34
8931: PUSH
8932: LD_INT 51
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 2
8950: GREATEREQUAL
8951: IFFALSE 8963
8953: GO 8955
8955: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8956: LD_STRING ACH_CARGO
8958: PPUSH
8959: CALL_OW 543
8963: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8964: LD_INT 0
8966: PPUSH
8967: PPUSH
8968: PPUSH
// for i = 1 to count do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_VAR 0 6
8983: PUSH
8984: FOR_TO
8985: IFFALSE 9066
// begin uc_side = side ;
8987: LD_ADDR_OWVAR 20
8991: PUSH
8992: LD_VAR 0 1
8996: ST_TO_ADDR
// uc_nation = nation ;
8997: LD_ADDR_OWVAR 21
9001: PUSH
9002: LD_VAR 0 2
9006: ST_TO_ADDR
// hc_gallery =  ;
9007: LD_ADDR_OWVAR 33
9011: PUSH
9012: LD_STRING 
9014: ST_TO_ADDR
// hc_name =  ;
9015: LD_ADDR_OWVAR 26
9019: PUSH
9020: LD_STRING 
9022: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: LD_VAR 0 4
9035: PPUSH
9036: CALL_OW 380
// un = CreateHuman ;
9040: LD_ADDR_VAR 0 9
9044: PUSH
9045: CALL_OW 44
9049: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 52
// end ;
9064: GO 8984
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 7
9072: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
// uc_side := GetSide ( b ) ;
9078: LD_ADDR_OWVAR 20
9082: PUSH
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 255
9092: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9093: LD_ADDR_OWVAR 21
9097: PUSH
9098: LD_VAR 0 2
9102: PPUSH
9103: CALL_OW 248
9107: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9108: LD_INT 0
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 380
// un = CreateHuman ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: CALL_OW 44
9132: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9133: LD_ADDR_VAR 0 5
9137: PUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 254
9147: PUSH
9148: LD_INT 3
9150: MINUS
9151: ST_TO_ADDR
// if dir < 0 then
9152: LD_VAR 0 5
9156: PUSH
9157: LD_INT 0
9159: LESS
9160: IFFALSE 9176
// dir := 6 + dir ;
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_INT 6
9169: PUSH
9170: LD_VAR 0 5
9174: PLUS
9175: ST_TO_ADDR
// SetDir ( un , dir ) ;
9176: LD_VAR 0 4
9180: PPUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9190: LD_VAR 0 4
9194: PPUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 52
// end ;
9204: LD_VAR 0 3
9208: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 24
9244: PUSH
9245: LD_INT 1000
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_VAR 0 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 1000
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: PPUSH
9319: CALL_OW 70
9323: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9324: LD_VAR 0 5
9328: NOT
9329: PUSH
9330: LD_VAR 0 7
9334: NOT
9335: AND
9336: IFFALSE 9340
// exit ;
9338: GO 9536
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9340: LD_VAR 0 5
9344: NOT
9345: PUSH
9346: LD_VAR 0 7
9350: PPUSH
9351: LD_INT 3
9353: PUSH
9354: LD_INT 54
9356: PUSH
9357: EMPTY
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 72
9368: AND
9369: PUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: CALL_OW 302
9379: AND
9380: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 3
9389: PUSH
9390: LD_INT 54
9392: PUSH
9393: EMPTY
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: CALL_OW 72
9404: PPUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: CALL_OW 120
// if buildingsList then
9414: LD_VAR 0 5
9418: IFFALSE 9536
// begin for i in engineerOkList do
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_VAR 0 7
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9534
// if IsInUnit ( i ) then
9433: LD_VAR 0 6
9437: PPUSH
9438: CALL_OW 310
9442: IFFALSE 9455
// ComExitBuilding ( i ) else
9444: LD_VAR 0 6
9448: PPUSH
9449: CALL_OW 122
9453: GO 9532
// if GetLives ( i ) > 650 then
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 256
9464: PUSH
9465: LD_INT 650
9467: GREATER
9468: IFFALSE 9496
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_VAR 0 6
9484: PPUSH
9485: CALL_OW 74
9489: PPUSH
9490: CALL_OW 130
9494: GO 9532
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 56
9503: PPUSH
9504: LD_INT 10
9506: PPUSH
9507: CALL_OW 297
9511: PUSH
9512: LD_INT 8
9514: GREATER
9515: IFFALSE 9532
// ComMoveXY ( i , 56 , 10 ) ;
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 56
9524: PPUSH
9525: LD_INT 10
9527: PPUSH
9528: CALL_OW 111
9532: GO 9430
9534: POP
9535: POP
// end ; end ;
9536: LD_VAR 0 4
9540: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_VAR 0 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 25
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 24
9576: PUSH
9577: LD_INT 250
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9594: LD_ADDR_VAR 0 8
9598: PUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_INT 22
9606: PUSH
9607: LD_VAR 0 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 650
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 70
9652: ST_TO_ADDR
// if not damageUnits and not sciList then
9653: LD_VAR 0 8
9657: NOT
9658: PUSH
9659: LD_VAR 0 6
9663: NOT
9664: AND
9665: IFFALSE 9669
// exit ;
9667: GO 9808
// if damageUnits then
9669: LD_VAR 0 8
9673: IFFALSE 9752
// begin for i in sciList do
9675: LD_ADDR_VAR 0 7
9679: PUSH
9680: LD_VAR 0 6
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9748
// if IsInUnit ( i ) then
9688: LD_VAR 0 7
9692: PPUSH
9693: CALL_OW 310
9697: IFFALSE 9710
// ComExitBuilding ( i ) else
9699: LD_VAR 0 7
9703: PPUSH
9704: CALL_OW 122
9708: GO 9746
// if not HasTask ( i ) then
9710: LD_VAR 0 7
9714: PPUSH
9715: CALL_OW 314
9719: NOT
9720: IFFALSE 9746
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9722: LD_VAR 0 7
9726: PPUSH
9727: LD_VAR 0 8
9731: PPUSH
9732: LD_VAR 0 7
9736: PPUSH
9737: CALL_OW 74
9741: PPUSH
9742: CALL_OW 128
9746: GO 9685
9748: POP
9749: POP
// end else
9750: GO 9808
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9752: LD_VAR 0 6
9756: PPUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 54
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 72
9774: IFFALSE 9808
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9776: LD_VAR 0 6
9780: PPUSH
9781: LD_INT 3
9783: PUSH
9784: LD_INT 54
9786: PUSH
9787: EMPTY
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 72
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: CALL_OW 120
// end ;
9808: LD_VAR 0 5
9812: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
// if not defendersList then
9819: LD_VAR 0 3
9823: NOT
9824: IFFALSE 9828
// exit ;
9826: GO 10210
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9828: LD_ADDR_VAR 0 7
9832: PUSH
9833: LD_VAR 0 1
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 70
9886: ST_TO_ADDR
// if enemy then
9887: LD_VAR 0 7
9891: IFFALSE 10112
// begin for i in defendersList do
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 3
9902: PUSH
9903: FOR_IN
9904: IFFALSE 10108
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9906: LD_VAR 0 6
9910: PPUSH
9911: CALL_OW 310
9915: PUSH
9916: LD_VAR 0 6
9920: PPUSH
9921: CALL_OW 256
9925: PUSH
9926: LD_INT 500
9928: GREATER
9929: AND
9930: IFFALSE 9943
// ComExitBuilding ( i ) else
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 122
9941: GO 10106
// if GetLives ( i ) > 650 then
9943: LD_VAR 0 6
9947: PPUSH
9948: CALL_OW 256
9952: PUSH
9953: LD_INT 650
9955: GREATER
9956: IFFALSE 10009
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9958: LD_ADDR_VAR 0 8
9962: PUSH
9963: LD_VAR 0 7
9967: PPUSH
9968: LD_VAR 0 6
9972: PPUSH
9973: CALL_OW 74
9977: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9978: LD_VAR 0 6
9982: PPUSH
9983: LD_VAR 0 8
9987: PPUSH
9988: CALL_OW 250
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: CALL_OW 251
10002: PPUSH
10003: CALL_OW 114
// end else
10007: GO 10106
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10009: LD_INT 22
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 4
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: IFFALSE 10077
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10039: LD_VAR 0 6
10043: PPUSH
10044: LD_INT 56
10046: PPUSH
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 297
10054: PUSH
10055: LD_INT 8
10057: GREATER
10058: IFFALSE 10075
// ComMoveXY ( i , 56 , 10 ) ;
10060: LD_VAR 0 6
10064: PPUSH
10065: LD_INT 56
10067: PPUSH
10068: LD_INT 10
10070: PPUSH
10071: CALL_OW 111
// end else
10075: GO 10106
// if GetLives ( i ) <= 500 then
10077: LD_VAR 0 6
10081: PPUSH
10082: CALL_OW 256
10086: PUSH
10087: LD_INT 500
10089: LESSEQUAL
10090: IFFALSE 10106
// ComEnterUnit ( i , building ) ;
10092: LD_VAR 0 6
10096: PPUSH
10097: LD_VAR 0 4
10101: PPUSH
10102: CALL_OW 120
// end ;
10106: GO 9903
10108: POP
10109: POP
// end else
10110: GO 10210
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 56
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 60
10128: PUSH
10129: EMPTY
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 1000
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PPUSH
10151: CALL_OW 72
10155: IFFALSE 10210
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 56
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: EMPTY
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 1000
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 4
10205: PPUSH
10206: CALL_OW 120
// end ;
10210: LD_VAR 0 5
10214: RET
// export function RussianTrap ; var i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// if GetSide ( Brian ) = 4 then
10219: LD_EXP 6
10223: PPUSH
10224: CALL_OW 255
10228: PUSH
10229: LD_INT 4
10231: EQUAL
10232: IFFALSE 10255
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10234: LD_EXP 6
10238: PUSH
10239: LD_EXP 7
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: LD_INT 0
10250: PPUSH
10251: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 21
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10400
// begin ComExitBuilding ( i ) ;
10292: LD_VAR 0 2
10296: PPUSH
10297: CALL_OW 122
// wait ( 0 0$1 ) ;
10301: LD_INT 35
10303: PPUSH
10304: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10308: LD_VAR 0 2
10312: PPUSH
10313: LD_INT 120
10315: PPUSH
10316: LD_INT 56
10318: PPUSH
10319: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10323: LD_VAR 0 2
10327: PPUSH
10328: LD_INT 111
10330: PPUSH
10331: LD_INT 37
10333: PPUSH
10334: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10338: LD_INT 33
10340: PPUSH
10341: CALL_OW 255
10345: PUSH
10346: LD_INT 3
10348: EQUAL
10349: PUSH
10350: LD_INT 33
10352: PPUSH
10353: CALL_OW 302
10357: AND
10358: IFFALSE 10374
// AddComEnterUnit ( i , arm2 ) else
10360: LD_VAR 0 2
10364: PPUSH
10365: LD_INT 33
10367: PPUSH
10368: CALL_OW 180
10372: GO 10398
// begin AddComCrawl ( i ) ;
10374: LD_VAR 0 2
10378: PPUSH
10379: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_INT 109
10390: PPUSH
10391: LD_INT 30
10393: PPUSH
10394: CALL_OW 174
// end ; end ;
10398: GO 10289
10400: POP
10401: POP
// end ;
10402: LD_VAR 0 1
10406: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10407: LD_INT 0
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// nearestDist := 1000 ;
10414: LD_ADDR_VAR 0 4
10418: PUSH
10419: LD_INT 1000
10421: ST_TO_ADDR
// nearestUn := un ;
10422: LD_ADDR_VAR 0 5
10426: PUSH
10427: LD_VAR 0 1
10431: ST_TO_ADDR
// for sold in units do
10432: LD_ADDR_VAR 0 6
10436: PUSH
10437: LD_VAR 0 2
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10499
// begin dist := GetDistUnits ( un , sold ) ;
10445: LD_ADDR_VAR 0 7
10449: PUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_VAR 0 6
10459: PPUSH
10460: CALL_OW 296
10464: ST_TO_ADDR
// if dist < nearestDist then
10465: LD_VAR 0 7
10469: PUSH
10470: LD_VAR 0 4
10474: LESS
10475: IFFALSE 10497
// begin nearestUn := sold ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 6
10486: ST_TO_ADDR
// nearestDist := dist ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_VAR 0 7
10496: ST_TO_ADDR
// end ; end ;
10497: GO 10442
10499: POP
10500: POP
// result := NearestUn ;
10501: LD_ADDR_VAR 0 3
10505: PUSH
10506: LD_VAR 0 5
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function PrepareDifficulty ; begin
10516: LD_INT 0
10518: PPUSH
// if Difficulty = 1 then
10519: LD_OWVAR 67
10523: PUSH
10524: LD_INT 1
10526: EQUAL
10527: IFFALSE 10590
// begin RemoveUnit ( brw2 ) ;
10529: LD_INT 9
10531: PPUSH
10532: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10536: LD_INT 30
10538: PPUSH
10539: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10543: LD_INT 52
10545: PPUSH
10546: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10550: LD_INT 63
10552: PPUSH
10553: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10557: LD_INT 5
10559: PUSH
10560: LD_INT 4
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: LD_INT 60
10569: PPUSH
10570: CALL_OW 240
// RuSoldMinLevel = 0 ;
10574: LD_ADDR_EXP 13
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10582: LD_ADDR_EXP 14
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// end ; if Difficulty = 2 then
10590: LD_OWVAR 67
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: IFFALSE 10640
// begin RemoveUnit ( brw4 ) ;
10600: LD_INT 52
10602: PPUSH
10603: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10607: LD_INT 5
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: LD_INT 50
10619: PPUSH
10620: CALL_OW 240
// RuSoldMinLevel = 1 ;
10624: LD_ADDR_EXP 13
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10632: LD_ADDR_EXP 14
10636: PUSH
10637: LD_INT 2
10639: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10640: LD_OWVAR 67
10644: PUSH
10645: LD_INT 3
10647: GREATEREQUAL
10648: IFFALSE 10683
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10650: LD_INT 5
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: LD_INT 40
10662: PPUSH
10663: CALL_OW 240
// RuSoldMinLevel = 2 ;
10667: LD_ADDR_EXP 13
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10675: LD_ADDR_EXP 14
10679: PUSH
10680: LD_INT 3
10682: ST_TO_ADDR
// end ; end ;
10683: LD_VAR 0 1
10687: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
10692: PPUSH
// if not vehicles then
10693: LD_VAR 0 1
10697: NOT
10698: IFFALSE 10702
// exit ;
10700: GO 10832
// tmp := [ ] ;
10702: LD_ADDR_VAR 0 5
10706: PUSH
10707: EMPTY
10708: ST_TO_ADDR
// for i in vehicles do
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_VAR 0 1
10718: PUSH
10719: FOR_IN
10720: IFFALSE 10816
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_VAR 0 5
10731: PPUSH
10732: LD_VAR 0 5
10736: PUSH
10737: LD_INT 1
10739: PLUS
10740: PPUSH
10741: LD_VAR 0 4
10745: PPUSH
10746: CALL_OW 265
10750: PUSH
10751: LD_VAR 0 4
10755: PPUSH
10756: CALL_OW 262
10760: PUSH
10761: LD_VAR 0 4
10765: PPUSH
10766: CALL_OW 263
10770: PUSH
10771: LD_VAR 0 4
10775: PPUSH
10776: CALL_OW 264
10780: PUSH
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 261
10790: PUSH
10791: LD_VAR 0 4
10795: PPUSH
10796: CALL_OW 256
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 1
10813: ST_TO_ADDR
10814: GO 10719
10816: POP
10817: POP
// SaveVariable ( tmp , ident ) ;
10818: LD_VAR 0 5
10822: PPUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: CALL_OW 39
// end ; end_of_file
10832: LD_VAR 0 3
10836: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
10841: PPUSH
// prefix := 01_ ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_STRING 01_
10849: ST_TO_ADDR
// uc_side := 1 ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10858: LD_ADDR_EXP 1
10862: PUSH
10863: LD_STRING JMM
10865: PPUSH
10866: LD_EXP 34
10870: NOT
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: CALL 36746 0 3
10881: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10882: LD_ADDR_VAR 0 2
10886: PUSH
10887: LD_STRING 01_JMMLifePoints_1
10889: PPUSH
10890: LD_INT 1000
10892: PPUSH
10893: CALL_OW 30
10897: ST_TO_ADDR
// if plive < 250 then
10898: LD_VAR 0 2
10902: PUSH
10903: LD_INT 250
10905: LESS
10906: IFFALSE 10916
// plive := 300 ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 300
10915: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10916: LD_EXP 1
10920: PPUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10930: LD_ADDR_EXP 9
10934: PUSH
10935: LD_STRING Powell
10937: PPUSH
10938: CALL_OW 25
10942: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10943: LD_ADDR_EXP 2
10947: PUSH
10948: LD_STRING Bobby
10950: PPUSH
10951: LD_EXP 34
10955: NOT
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 36746 0 3
10966: ST_TO_ADDR
// if Bobby then
10967: LD_EXP 2
10971: IFFALSE 11021
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_STRING 01_BobbyLifePoints_1
10980: PPUSH
10981: LD_INT 1000
10983: PPUSH
10984: CALL_OW 30
10988: ST_TO_ADDR
// if plive < 250 then
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 250
10996: LESS
10997: IFFALSE 11007
// plive := 300 ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_INT 300
11006: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11007: LD_EXP 2
11011: PPUSH
11012: LD_VAR 0 2
11016: PPUSH
11017: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11021: LD_ADDR_EXP 3
11025: PUSH
11026: LD_STRING Cyrus
11028: PPUSH
11029: LD_EXP 34
11033: NOT
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: CALL 36746 0 3
11044: ST_TO_ADDR
// if Cyrus then
11045: LD_EXP 3
11049: IFFALSE 11099
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11051: LD_ADDR_VAR 0 2
11055: PUSH
11056: LD_STRING 01_CyrusLifePoints_1
11058: PPUSH
11059: LD_INT 1000
11061: PPUSH
11062: CALL_OW 30
11066: ST_TO_ADDR
// if plive < 250 then
11067: LD_VAR 0 2
11071: PUSH
11072: LD_INT 250
11074: LESS
11075: IFFALSE 11085
// plive := 300 ;
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_INT 300
11084: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11085: LD_EXP 3
11089: PPUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11099: LD_ADDR_EXP 5
11103: PUSH
11104: LD_STRING Khatam
11106: PPUSH
11107: CALL_OW 25
11111: ST_TO_ADDR
// uc_side := 4 ;
11112: LD_ADDR_OWVAR 20
11116: PUSH
11117: LD_INT 4
11119: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11120: LD_ADDR_EXP 4
11124: PUSH
11125: LD_STRING Lisa
11127: PPUSH
11128: CALL_OW 25
11132: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_INT 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11148: LD_EXP 2
11152: PPUSH
11153: LD_INT 3
11155: PPUSH
11156: LD_INT 0
11158: PPUSH
11159: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11163: LD_EXP 3
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: LD_INT 0
11173: PPUSH
11174: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11178: LD_EXP 4
11182: PPUSH
11183: LD_INT 5
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 49
// ComCrawl ( Lisa ) ;
11193: LD_EXP 4
11197: PPUSH
11198: CALL_OW 137
// end ;
11202: LD_VAR 0 1
11206: RET
// export function PrepareLisSquad ; var i , un ; begin
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
11211: PPUSH
// uc_side := 4 ;
11212: LD_ADDR_OWVAR 20
11216: PUSH
11217: LD_INT 4
11219: ST_TO_ADDR
// uc_nation := 1 ;
11220: LD_ADDR_OWVAR 21
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// hc_class := 2 ;
11228: LD_ADDR_OWVAR 28
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// hc_sex := sex_male ;
11236: LD_ADDR_OWVAR 27
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// hc_gallery :=  ;
11244: LD_ADDR_OWVAR 33
11248: PUSH
11249: LD_STRING 
11251: ST_TO_ADDR
// hc_name :=  ;
11252: LD_ADDR_OWVAR 26
11256: PUSH
11257: LD_STRING 
11259: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11260: LD_ADDR_OWVAR 30
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 0
11273: PUSH
11274: LD_INT 0
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11283: LD_ADDR_OWVAR 31
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// un := CreateHuman ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: CALL_OW 44
11315: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 6
11323: PPUSH
11324: LD_INT 0
11326: PPUSH
11327: CALL_OW 49
// hc_sex := sex_female ;
11331: LD_ADDR_OWVAR 27
11335: PUSH
11336: LD_INT 2
11338: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11339: LD_ADDR_OWVAR 30
11343: PUSH
11344: LD_INT 0
11346: PUSH
11347: LD_INT 0
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11362: LD_ADDR_OWVAR 31
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 0
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: ST_TO_ADDR
// un := CreateHuman ;
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 6
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 49
// if not Bobby and not Cyrus then
11410: LD_EXP 2
11414: NOT
11415: PUSH
11416: LD_EXP 3
11420: NOT
11421: AND
11422: IFFALSE 11511
// begin hc_class := 1 ;
11424: LD_ADDR_OWVAR 28
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// hc_sex := sex_male ;
11432: LD_ADDR_OWVAR 27
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11440: LD_ADDR_OWVAR 30
11444: PUSH
11445: LD_INT 2
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11463: LD_ADDR_OWVAR 31
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: ST_TO_ADDR
// un := CreateHuman ;
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: CALL_OW 44
11495: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 31
11503: PPUSH
11504: LD_INT 0
11506: PPUSH
11507: CALL_OW 49
// end ; InitHc ;
11511: CALL_OW 19
// end ;
11515: LD_VAR 0 1
11519: RET
// export function PrepareOtherAmericans ; begin
11520: LD_INT 0
11522: PPUSH
// uc_side := 4 ;
11523: LD_ADDR_OWVAR 20
11527: PUSH
11528: LD_INT 4
11530: ST_TO_ADDR
// uc_nation := 1 ;
11531: LD_ADDR_OWVAR 21
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// hc_gallery :=  ;
11539: LD_ADDR_OWVAR 33
11543: PUSH
11544: LD_STRING 
11546: ST_TO_ADDR
// hc_name := Tom Garvin ;
11547: LD_ADDR_OWVAR 26
11551: PUSH
11552: LD_STRING Tom Garvin
11554: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11555: LD_INT 1
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 380
// Brian := CreateHuman ;
11568: LD_ADDR_EXP 6
11572: PUSH
11573: CALL_OW 44
11577: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11578: LD_EXP 6
11582: PPUSH
11583: LD_INT 10
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 49
// hc_name := Jerry White ;
11593: LD_ADDR_OWVAR 26
11597: PUSH
11598: LD_STRING Jerry White
11600: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11601: LD_INT 1
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 380
// Jerry := CreateHuman ;
11614: LD_ADDR_EXP 7
11618: PUSH
11619: CALL_OW 44
11623: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11624: LD_EXP 7
11628: PPUSH
11629: LD_INT 10
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11639: LD_EXP 6
11643: PUSH
11644: LD_EXP 7
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 140
// end ;
11657: LD_VAR 0 1
11661: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11668: LD_ADDR_VAR 0 4
11672: PUSH
11673: LD_INT 16
11675: PPUSH
11676: LD_INT 0
11678: PPUSH
11679: CALL_OW 517
11683: ST_TO_ADDR
// for i = 1 to 6 do
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_INT 6
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11844
// begin uc_side := 4 ;
11700: LD_ADDR_OWVAR 20
11704: PUSH
11705: LD_INT 4
11707: ST_TO_ADDR
// uc_nation := 1 ;
11708: LD_ADDR_OWVAR 21
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// hc_gallery :=  ;
11716: LD_ADDR_OWVAR 33
11720: PUSH
11721: LD_STRING 
11723: ST_TO_ADDR
// hc_name :=  ;
11724: LD_ADDR_OWVAR 26
11728: PUSH
11729: LD_STRING 
11731: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11732: LD_INT 0
11734: PPUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: LD_INT 4
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_INT 3
11756: MOD
11757: PUSH
11758: LD_INT 1
11760: PLUS
11761: ARRAY
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 380
// un := CreateHuman ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: CALL_OW 44
11779: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 0
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: CALL_OW 12
11795: PPUSH
11796: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_VAR 0 4
11809: PUSH
11810: LD_INT 1
11812: ARRAY
11813: PUSH
11814: LD_VAR 0 2
11818: ARRAY
11819: PPUSH
11820: LD_VAR 0 4
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PUSH
11829: LD_VAR 0 2
11833: ARRAY
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 601
// end ;
11842: GO 11697
11844: POP
11845: POP
// DyingSold := CreateHuman ;
11846: LD_ADDR_EXP 35
11850: PUSH
11851: CALL_OW 44
11855: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11856: LD_EXP 35
11860: PPUSH
11861: LD_INT 16
11863: PPUSH
11864: LD_INT 0
11866: PPUSH
11867: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11871: LD_EXP 35
11875: PPUSH
11876: LD_INT 250
11878: PPUSH
11879: CALL_OW 234
// end ; end_of_file
11883: LD_VAR 0 1
11887: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 2
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: LD_INT 56
11935: PUSH
11936: EMPTY
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: PUSH
11951: LD_EXP 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: DIFF
11959: ST_TO_ADDR
// if not tmp then
11960: LD_VAR 0 2
11964: NOT
11965: IFFALSE 11969
// exit ;
11967: GO 12045
// uc_side = 6 ;
11969: LD_ADDR_OWVAR 20
11973: PUSH
11974: LD_INT 6
11976: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11977: LD_ADDR_EXP 8
11981: PUSH
11982: LD_STRING Mikhail
11984: PPUSH
11985: CALL_OW 25
11989: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11990: LD_EXP 8
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12002: LD_EXP 8
12006: PPUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: CALL_OW 250
12020: PPUSH
12021: LD_VAR 0 2
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 251
12034: PPUSH
12035: LD_INT 5
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 50
// end ;
12045: LD_VAR 0 1
12049: RET
// export function PrepareRussianCommander ; begin
12050: LD_INT 0
12052: PPUSH
// uc_side = 3 ;
12053: LD_ADDR_OWVAR 20
12057: PUSH
12058: LD_INT 3
12060: ST_TO_ADDR
// uc_nation = 3 ;
12061: LD_ADDR_OWVAR 21
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12069: LD_ADDR_EXP 19
12073: PUSH
12074: LD_STRING Natasza
12076: PPUSH
12077: CALL_OW 25
12081: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12082: LD_EXP 19
12086: PPUSH
12087: LD_INT 24
12089: PPUSH
12090: LD_INT 0
12092: PPUSH
12093: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12097: LD_EXP 19
12101: PPUSH
12102: LD_INT 56
12104: PPUSH
12105: LD_INT 16
12107: PPUSH
12108: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12112: LD_ADDR_EXP 24
12116: PUSH
12117: LD_EXP 24
12121: PPUSH
12122: LD_EXP 24
12126: PUSH
12127: LD_INT 1
12129: PLUS
12130: PPUSH
12131: LD_EXP 19
12135: PPUSH
12136: CALL_OW 1
12140: ST_TO_ADDR
// end ;
12141: LD_VAR 0 1
12145: RET
// export function PrepareSouthBase ; var i , un ; begin
12146: LD_INT 0
12148: PPUSH
12149: PPUSH
12150: PPUSH
// for i = 1 to 2 do
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_INT 2
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12274
// begin uc_side = 3 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 3
12174: ST_TO_ADDR
// uc_nation = 3 ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 3
12182: ST_TO_ADDR
// hc_gallery =  ;
12183: LD_ADDR_OWVAR 33
12187: PUSH
12188: LD_STRING 
12190: ST_TO_ADDR
// hc_name =  ;
12191: LD_ADDR_OWVAR 26
12195: PUSH
12196: LD_STRING 
12198: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12199: LD_INT 1
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: LD_EXP 13
12209: PPUSH
12210: LD_EXP 14
12214: PPUSH
12215: CALL_OW 12
12219: PPUSH
12220: CALL_OW 380
// hc_importance = 0 ;
12224: LD_ADDR_OWVAR 32
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// un = CreateHuman ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: CALL_OW 44
12241: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 11
12249: PPUSH
12250: LD_INT 0
12252: PPUSH
12253: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 111
12264: PPUSH
12265: LD_INT 38
12267: PPUSH
12268: CALL_OW 118
// end ;
12272: GO 12164
12274: POP
12275: POP
// for i = 1 to 2 do
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: DOUBLE
12282: LD_INT 1
12284: DEC
12285: ST_TO_ADDR
12286: LD_INT 2
12288: PUSH
12289: FOR_TO
12290: IFFALSE 12373
// begin uc_side = 3 ;
12292: LD_ADDR_OWVAR 20
12296: PUSH
12297: LD_INT 3
12299: ST_TO_ADDR
// uc_nation = 3 ;
12300: LD_ADDR_OWVAR 21
12304: PUSH
12305: LD_INT 3
12307: ST_TO_ADDR
// hc_gallery =  ;
12308: LD_ADDR_OWVAR 33
12312: PUSH
12313: LD_STRING 
12315: ST_TO_ADDR
// hc_name =  ;
12316: LD_ADDR_OWVAR 26
12320: PUSH
12321: LD_STRING 
12323: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12324: LD_INT 0
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_EXP 13
12334: PPUSH
12335: LD_EXP 14
12339: PPUSH
12340: CALL_OW 12
12344: PPUSH
12345: CALL_OW 380
// un = CreateHuman ;
12349: LD_ADDR_VAR 0 3
12353: PUSH
12354: CALL_OW 44
12358: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 52
// end ;
12371: GO 12289
12373: POP
12374: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12375: LD_INT 3
12377: PPUSH
12378: LD_INT 3
12380: PPUSH
12381: LD_INT 33
12383: PPUSH
12384: LD_EXP 13
12388: PPUSH
12389: LD_EXP 14
12393: PPUSH
12394: CALL_OW 12
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_INT 1
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_OWVAR 67
12424: ARRAY
12425: PPUSH
12426: CALL 8964 0 6
// for i in UnitsInside ( arm2 ) do
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: LD_INT 33
12437: PPUSH
12438: CALL_OW 313
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12477
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12446: LD_ADDR_EXP 25
12450: PUSH
12451: LD_EXP 25
12455: PPUSH
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: PPUSH
12465: LD_VAR 0 2
12469: PPUSH
12470: CALL_OW 1
12474: ST_TO_ADDR
12475: GO 12443
12477: POP
12478: POP
// end ;
12479: LD_VAR 0 1
12483: RET
// export function PrepareNorthBase ; var i , un ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
12488: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: DOUBLE
12495: LD_INT 1
12497: DEC
12498: ST_TO_ADDR
12499: LD_INT 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 3
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 3
12523: PPUSH
12524: LD_INT 4
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 4
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_OWVAR 67
12545: ARRAY
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12634
// begin uc_side = 3 ;
12550: LD_ADDR_OWVAR 20
12554: PUSH
12555: LD_INT 3
12557: ST_TO_ADDR
// uc_nation = 3 ;
12558: LD_ADDR_OWVAR 21
12562: PUSH
12563: LD_INT 3
12565: ST_TO_ADDR
// hc_gallery =  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12582: LD_INT 0
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_EXP 13
12592: PPUSH
12593: LD_EXP 14
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 380
// un = CreateHuman ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: CALL_OW 44
12616: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 14
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12547
12634: POP
12635: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 3
12641: PPUSH
12642: LD_INT 2
12644: PPUSH
12645: LD_EXP 13
12649: PPUSH
12650: LD_EXP 14
12654: PPUSH
12655: CALL_OW 12
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: LD_INT 2
12668: PPUSH
12669: CALL_OW 12
12673: PUSH
12674: LD_INT 1
12676: PPUSH
12677: LD_INT 3
12679: PPUSH
12680: CALL_OW 12
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 3
12690: PPUSH
12691: CALL_OW 12
12695: PUSH
12696: LD_INT 4
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_OWVAR 67
12709: ARRAY
12710: PPUSH
12711: CALL 8964 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12715: LD_INT 3
12717: PPUSH
12718: LD_INT 3
12720: PPUSH
12721: LD_INT 23
12723: PPUSH
12724: LD_EXP 13
12728: PPUSH
12729: LD_EXP 14
12733: PPUSH
12734: CALL_OW 12
12738: PPUSH
12739: LD_INT 4
12741: PPUSH
12742: LD_INT 0
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: LD_OWVAR 67
12764: ARRAY
12765: PPUSH
12766: CALL 8964 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12770: LD_INT 3
12772: PPUSH
12773: LD_INT 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: LD_EXP 13
12783: PPUSH
12784: LD_EXP 14
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: LD_INT 1
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_OWVAR 67
12819: ARRAY
12820: PPUSH
12821: CALL 8964 0 6
// for i in UnitsInside ( arm1 ) do
12825: LD_ADDR_VAR 0 2
12829: PUSH
12830: LD_INT 2
12832: PPUSH
12833: CALL_OW 313
12837: PUSH
12838: FOR_IN
12839: IFFALSE 12872
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12841: LD_ADDR_EXP 24
12845: PUSH
12846: LD_EXP 24
12850: PPUSH
12851: LD_EXP 24
12855: PUSH
12856: LD_INT 1
12858: PLUS
12859: PPUSH
12860: LD_VAR 0 2
12864: PPUSH
12865: CALL_OW 1
12869: ST_TO_ADDR
12870: GO 12838
12872: POP
12873: POP
// end ;
12874: LD_VAR 0 1
12878: RET
// export function PrepareOtherRussians ; var i , un ; begin
12879: LD_INT 0
12881: PPUSH
12882: PPUSH
12883: PPUSH
// for i = 1 to 2 do
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_INT 2
12896: PUSH
12897: FOR_TO
12898: IFFALSE 12999
// begin uc_side = 3 ;
12900: LD_ADDR_OWVAR 20
12904: PUSH
12905: LD_INT 3
12907: ST_TO_ADDR
// uc_nation = 3 ;
12908: LD_ADDR_OWVAR 21
12912: PUSH
12913: LD_INT 3
12915: ST_TO_ADDR
// hc_gallery =  ;
12916: LD_ADDR_OWVAR 33
12920: PUSH
12921: LD_STRING 
12923: ST_TO_ADDR
// hc_name =  ;
12924: LD_ADDR_OWVAR 26
12928: PUSH
12929: LD_STRING 
12931: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: LD_EXP 13
12942: PPUSH
12943: LD_EXP 14
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 380
// un = CreateHuman ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: CALL_OW 44
12966: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 9
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 80
12989: PPUSH
12990: LD_INT 73
12992: PPUSH
12993: CALL_OW 118
// end ;
12997: GO 12897
12999: POP
13000: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_INT 3
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 31
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: PUSH
13035: FOR_IN
13036: IFFALSE 13064
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13038: LD_EXP 13
13042: PPUSH
13043: LD_EXP 14
13047: PPUSH
13048: CALL_OW 12
13052: PPUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL 9073 0 2
13062: GO 13035
13064: POP
13065: POP
// end ;
13066: LD_VAR 0 1
13070: RET
// export function PrepareCargoBays ; begin
13071: LD_INT 0
13073: PPUSH
// uc_side = 3 ;
13074: LD_ADDR_OWVAR 20
13078: PUSH
13079: LD_INT 3
13081: ST_TO_ADDR
// uc_nation = 3 ;
13082: LD_ADDR_OWVAR 21
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// vc_engine = 1 ;
13090: LD_ADDR_OWVAR 39
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// vc_control = 1 ;
13098: LD_ADDR_OWVAR 38
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// vc_weapon = 51 ;
13106: LD_ADDR_OWVAR 40
13110: PUSH
13111: LD_INT 51
13113: ST_TO_ADDR
// vc_chassis = 22 ;
13114: LD_ADDR_OWVAR 37
13118: PUSH
13119: LD_INT 22
13121: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13122: LD_ADDR_EXP 15
13126: PUSH
13127: CALL_OW 45
13131: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13132: LD_ADDR_EXP 16
13136: PUSH
13137: CALL_OW 45
13141: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13142: LD_EXP 15
13146: PPUSH
13147: LD_INT 13
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13157: LD_EXP 16
13161: PPUSH
13162: LD_INT 13
13164: PPUSH
13165: LD_INT 0
13167: PPUSH
13168: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13172: LD_EXP 15
13176: PPUSH
13177: LD_INT 2
13179: PPUSH
13180: LD_INT 70
13182: PUSH
13183: LD_INT 50
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 20
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_OWVAR 67
13202: ARRAY
13203: PPUSH
13204: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13208: LD_EXP 16
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: LD_INT 70
13218: PUSH
13219: LD_INT 50
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 20
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: PUSH
13234: LD_OWVAR 67
13238: ARRAY
13239: PPUSH
13240: CALL_OW 291
// hc_gallery =  ;
13244: LD_ADDR_OWVAR 33
13248: PUSH
13249: LD_STRING 
13251: ST_TO_ADDR
// hc_name =  ;
13252: LD_ADDR_OWVAR 26
13256: PUSH
13257: LD_STRING 
13259: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13260: LD_INT 1
13262: PPUSH
13263: LD_INT 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 2
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: CALL_OW 380
// driver1 = CreateHuman ;
13281: LD_ADDR_EXP 17
13285: PUSH
13286: CALL_OW 44
13290: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13291: LD_EXP 17
13295: PPUSH
13296: LD_EXP 15
13300: PPUSH
13301: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13305: LD_ADDR_OWVAR 26
13309: PUSH
13310: LD_STRING Nikolai Andreyev
13312: ST_TO_ADDR
// driver2 = CreateHuman ;
13313: LD_ADDR_EXP 18
13317: PUSH
13318: CALL_OW 44
13322: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13323: LD_EXP 18
13327: PPUSH
13328: LD_EXP 16
13332: PPUSH
13333: CALL_OW 52
// end ;
13337: LD_VAR 0 1
13341: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
13349: PPUSH
// uc_side = 3 ;
13350: LD_ADDR_OWVAR 20
13354: PUSH
13355: LD_INT 3
13357: ST_TO_ADDR
// uc_nation = 3 ;
13358: LD_ADDR_OWVAR 21
13362: PUSH
13363: LD_INT 3
13365: ST_TO_ADDR
// for i := 1 to count do
13366: LD_ADDR_VAR 0 4
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_VAR 0 1
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13644
// begin vc_engine = 1 ;
13384: LD_ADDR_OWVAR 39
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// vc_control = 1 ;
13392: LD_ADDR_OWVAR 38
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13400: LD_ADDR_OWVAR 40
13404: PUSH
13405: LD_INT 42
13407: ST_TO_ADDR
// if Difficulty = 3 then
13408: LD_OWVAR 67
13412: PUSH
13413: LD_INT 3
13415: EQUAL
13416: IFFALSE 13445
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13418: LD_ADDR_OWVAR 40
13422: PUSH
13423: LD_INT 42
13425: PUSH
13426: LD_INT 43
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 2
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: ST_TO_ADDR
// if Difficulty = 4 then
13445: LD_OWVAR 67
13449: PUSH
13450: LD_INT 4
13452: EQUAL
13453: IFFALSE 13490
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13455: LD_ADDR_OWVAR 40
13459: PUSH
13460: LD_INT 42
13462: PUSH
13463: LD_INT 43
13465: PUSH
13466: LD_INT 43
13468: PUSH
13469: LD_INT 44
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 4
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13490: LD_ADDR_OWVAR 37
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 22
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_OWVAR 67
13517: ARRAY
13518: ST_TO_ADDR
// veh = CreateVehicle ;
13519: LD_ADDR_VAR 0 5
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13529: LD_VAR 0 5
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13546: LD_ADDR_EXP 26
13550: PUSH
13551: LD_EXP 26
13555: PUSH
13556: LD_VAR 0 5
13560: ADD
13561: ST_TO_ADDR
// hc_gallery =  ;
13562: LD_ADDR_OWVAR 33
13566: PUSH
13567: LD_STRING 
13569: ST_TO_ADDR
// hc_name =  ;
13570: LD_ADDR_OWVAR 26
13574: PUSH
13575: LD_STRING 
13577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13578: LD_INT 0
13580: PPUSH
13581: LD_INT 3
13583: PPUSH
13584: LD_EXP 13
13588: PPUSH
13589: LD_EXP 14
13593: PPUSH
13594: CALL_OW 12
13598: PPUSH
13599: CALL_OW 380
// un = CreateHuman ;
13603: LD_ADDR_VAR 0 6
13607: PUSH
13608: CALL_OW 44
13612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13613: LD_VAR 0 6
13617: PPUSH
13618: LD_VAR 0 5
13622: PPUSH
13623: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13627: LD_VAR 0 6
13631: PPUSH
13632: LD_INT 14
13634: PPUSH
13635: LD_INT 9
13637: PPUSH
13638: CALL_OW 111
// end ;
13642: GO 13381
13644: POP
13645: POP
// wait ( 0 0$1 ) ;
13646: LD_INT 35
13648: PPUSH
13649: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13653: LD_INT 0
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: LD_EXP 13
13663: PPUSH
13664: LD_EXP 14
13668: PPUSH
13669: CALL_OW 12
13673: PPUSH
13674: CALL_OW 380
// un = CreateHuman ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: CALL_OW 44
13687: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 2
13708: MUL
13709: PLUS
13710: PUSH
13711: FOR_TO
13712: IFFALSE 13804
// begin hc_gallery =  ;
13714: LD_ADDR_OWVAR 33
13718: PUSH
13719: LD_STRING 
13721: ST_TO_ADDR
// hc_name =  ;
13722: LD_ADDR_OWVAR 26
13726: PUSH
13727: LD_STRING 
13729: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13730: LD_INT 1
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: LD_EXP 13
13740: PPUSH
13741: LD_EXP 14
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 380
// un = CreateHuman ;
13755: LD_ADDR_VAR 0 6
13759: PUSH
13760: CALL_OW 44
13764: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13765: LD_VAR 0 6
13769: PPUSH
13770: LD_INT 9
13772: PPUSH
13773: LD_INT 13
13775: PPUSH
13776: LD_INT 4
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13786: LD_ADDR_EXP 26
13790: PUSH
13791: LD_EXP 26
13795: PUSH
13796: LD_VAR 0 6
13800: ADD
13801: ST_TO_ADDR
// end ;
13802: GO 13711
13804: POP
13805: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_INT 26
13813: PPUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 70
13853: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13854: LD_VAR 0 7
13858: PUSH
13859: LD_INT 1
13861: ARRAY
13862: PPUSH
13863: LD_STRING D9-Rus3-1
13865: PPUSH
13866: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13870: LD_VAR 0 7
13874: PUSH
13875: LD_INT 2
13877: ARRAY
13878: PPUSH
13879: LD_STRING D9-Russ-1
13881: PPUSH
13882: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13886: LD_EXP 26
13890: PPUSH
13891: LD_INT 31
13893: PPUSH
13894: LD_INT 13
13896: PPUSH
13897: CALL_OW 114
// wait ( 0 0$3 ) ;
13901: LD_INT 105
13903: PPUSH
13904: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13908: LD_INT 35
13910: PPUSH
13911: CALL_OW 67
// for i in attackGroup do
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_EXP 26
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14293
// begin if IsDead ( i ) then
13928: LD_VAR 0 4
13932: PPUSH
13933: CALL_OW 301
13937: IFFALSE 13957
// begin attackGroup := attackGroup diff i ;
13939: LD_ADDR_EXP 26
13943: PUSH
13944: LD_EXP 26
13948: PUSH
13949: LD_VAR 0 4
13953: DIFF
13954: ST_TO_ADDR
// continue ;
13955: GO 13925
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13957: LD_VAR 0 4
13961: PPUSH
13962: CALL_OW 314
13966: NOT
13967: PUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 110
13977: NOT
13978: AND
13979: IFFALSE 14015
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13981: LD_VAR 0 4
13985: PPUSH
13986: LD_INT 22
13988: PUSH
13989: LD_INT 1
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: CALL_OW 69
14000: PPUSH
14001: LD_VAR 0 4
14005: PPUSH
14006: CALL_OW 74
14010: PPUSH
14011: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14015: LD_VAR 0 4
14019: PPUSH
14020: CALL_OW 110
14024: NOT
14025: PUSH
14026: LD_VAR 0 4
14030: PPUSH
14031: CALL_OW 256
14035: PUSH
14036: LD_INT 650
14038: LESS
14039: AND
14040: PUSH
14041: LD_VAR 0 4
14045: PPUSH
14046: CALL_OW 247
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: AND
14055: IFFALSE 14084
// begin SetTag ( i , 1 ) ;
14057: LD_VAR 0 4
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14069: LD_VAR 0 4
14073: PPUSH
14074: LD_INT 20
14076: PPUSH
14077: LD_INT 8
14079: PPUSH
14080: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 110
14093: PUSH
14094: LD_INT 1
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: LD_INT 20
14105: PPUSH
14106: LD_INT 8
14108: PPUSH
14109: CALL_OW 297
14113: PUSH
14114: LD_INT 6
14116: LESS
14117: AND
14118: IFFALSE 14132
// SetTag ( i , 2 ) ;
14120: LD_VAR 0 4
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 109
// if GetTag ( i ) = 2 then
14132: LD_VAR 0 4
14136: PPUSH
14137: CALL_OW 110
14141: PUSH
14142: LD_INT 2
14144: EQUAL
14145: IFFALSE 14253
// begin if GetLives ( i ) = 1000 then
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 256
14156: PUSH
14157: LD_INT 1000
14159: EQUAL
14160: IFFALSE 14176
// SetTag ( i , 3 ) else
14162: LD_VAR 0 4
14166: PPUSH
14167: LD_INT 3
14169: PPUSH
14170: CALL_OW 109
14174: GO 14253
// if IsDrivenBy ( i ) then
14176: LD_VAR 0 4
14180: PPUSH
14181: CALL_OW 311
14185: IFFALSE 14253
// begin mech := IsDrivenBy ( i ) ;
14187: LD_ADDR_VAR 0 8
14191: PUSH
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 311
14201: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14202: LD_INT 1
14204: PPUSH
14205: LD_VAR 0 8
14209: PPUSH
14210: CALL_OW 292
14214: NOT
14215: PUSH
14216: LD_VAR 0 8
14220: PPUSH
14221: CALL_OW 256
14225: PUSH
14226: LD_INT 1000
14228: LESS
14229: AND
14230: IFFALSE 14244
// SetLives ( mech , 1000 ) ;
14232: LD_VAR 0 8
14236: PPUSH
14237: LD_INT 1000
14239: PPUSH
14240: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14244: LD_VAR 0 8
14248: PPUSH
14249: CALL 75914 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14253: LD_VAR 0 4
14257: PPUSH
14258: CALL_OW 110
14262: PUSH
14263: LD_INT 3
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 311
14276: AND
14277: IFFALSE 14291
// SetTag ( i , 0 ) ;
14279: LD_VAR 0 4
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 109
// end ;
14291: GO 13925
14293: POP
14294: POP
// until not attackGroup ;
14295: LD_EXP 26
14299: NOT
14300: IFFALSE 13908
// end ;
14302: LD_VAR 0 3
14306: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14307: LD_EXP 26
14311: PPUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 72
14326: IFFALSE 14394
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
// begin enable ;
14334: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_EXP 26
14344: PPUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 72
14359: PUSH
14360: FOR_IN
14361: IFFALSE 14392
// if GetFuel ( i ) < 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 261
14372: PUSH
14373: LD_INT 3
14375: LESS
14376: IFFALSE 14390
// SetFuel ( i , 3 ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 3
14385: PPUSH
14386: CALL_OW 240
14390: GO 14360
14392: POP
14393: POP
// end ; end_of_file
14394: PPOPN 1
14396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14397: LD_INT 22
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: IFFALSE 14444
14427: GO 14429
14429: DISABLE
// begin enable ;
14430: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14431: LD_INT 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: LD_INT 22
14439: PPUSH
14440: CALL 9209 0 3
// end ;
14444: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14445: LD_INT 22
14447: PUSH
14448: LD_INT 3
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: IFFALSE 14495
14475: GO 14477
14477: DISABLE
// begin enable ;
14478: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14479: LD_INT 3
14481: PPUSH
14482: LD_INT 20
14484: PPUSH
14485: LD_INT 22
14487: PPUSH
14488: LD_INT 23
14490: PPUSH
14491: CALL 9541 0 4
// end ;
14495: END
// every 0 0$1 trigger northBaseDefenders do
14496: LD_EXP 24
14500: IFFALSE 14524
14502: GO 14504
14504: DISABLE
// begin enable ;
14505: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14506: LD_INT 22
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_EXP 24
14516: PPUSH
14517: LD_INT 2
14519: PPUSH
14520: CALL 9813 0 4
// end ;
14524: END
// every 0 0$1 trigger southBaseDefenders do
14525: LD_EXP 25
14529: IFFALSE 14553
14531: GO 14533
14533: DISABLE
// begin enable ;
14534: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14535: LD_INT 23
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: LD_EXP 25
14545: PPUSH
14546: LD_INT 33
14548: PPUSH
14549: CALL 9813 0 4
// end ; end_of_file
14553: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL 32457 0 1
// if unit = JMM then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_EXP 1
14572: EQUAL
14573: IFFALSE 14582
// YouLost ( JMM ) ;
14575: LD_STRING JMM
14577: PPUSH
14578: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 266
14591: PUSH
14592: LD_INT 0
14594: EQUAL
14595: IFFALSE 14604
// YouLost ( DepotDestroyed ) ;
14597: LD_STRING DepotDestroyed
14599: PPUSH
14600: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 1
14616: EQUAL
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 247
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: AND
14632: IFFALSE 14648
// deadsCounter = deadsCounter + 1 ;
14634: LD_ADDR_EXP 31
14638: PUSH
14639: LD_EXP 31
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// end ;
14648: PPOPN 1
14650: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 255
14660: PUSH
14661: LD_INT 3
14663: EQUAL
14664: IFFALSE 14742
// begin ComMoveXY ( driver , 6 , 10 ) ;
14666: LD_VAR 0 1
14670: PPUSH
14671: LD_INT 6
14673: PPUSH
14674: LD_INT 10
14676: PPUSH
14677: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14681: LD_INT 35
14683: PPUSH
14684: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 6
14695: PPUSH
14696: LD_INT 10
14698: PPUSH
14699: CALL_OW 111
// if IsDead ( driver ) then
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 301
14712: IFFALSE 14716
// exit ;
14714: GO 14742
// until IsAt ( driver , 6 , 10 ) ;
14716: LD_VAR 0 1
14720: PPUSH
14721: LD_INT 6
14723: PPUSH
14724: LD_INT 10
14726: PPUSH
14727: CALL_OW 307
14731: IFFALSE 14681
// RemoveUnit ( driver ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 64
// end ; end ;
14742: PPOPN 4
14744: END
// on Command ( cmd ) do var i , j , tmp ;
14745: LD_INT 0
14747: PPUSH
14748: PPUSH
14749: PPUSH
// begin SOS_Command ( cmd ) ;
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL 32561 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14759: LD_ADDR_VAR 0 2
14763: PUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 1
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 69
14792: PUSH
14793: FOR_IN
14794: IFFALSE 14915
// begin if GetTaskList ( i ) then
14796: LD_VAR 0 2
14800: PPUSH
14801: CALL_OW 437
14805: IFFALSE 14913
// begin for j = 1 to GetTaskList ( i ) do
14807: LD_ADDR_VAR 0 3
14811: PUSH
14812: DOUBLE
14813: LD_INT 1
14815: DEC
14816: ST_TO_ADDR
14817: LD_VAR 0 2
14821: PPUSH
14822: CALL_OW 437
14826: PUSH
14827: FOR_TO
14828: IFFALSE 14911
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14830: LD_ADDR_VAR 0 4
14834: PUSH
14835: LD_VAR 0 2
14839: PPUSH
14840: CALL_OW 437
14844: PUSH
14845: LD_VAR 0 3
14849: ARRAY
14850: PUSH
14851: LD_INT 4
14853: ARRAY
14854: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14855: LD_VAR 0 4
14859: PPUSH
14860: CALL_OW 255
14864: PUSH
14865: LD_INT 3
14867: EQUAL
14868: PUSH
14869: LD_VAR 0 4
14873: PPUSH
14874: CALL_OW 247
14878: PUSH
14879: LD_INT 2
14881: EQUAL
14882: AND
14883: PUSH
14884: LD_VAR 0 4
14888: PPUSH
14889: CALL_OW 264
14893: PUSH
14894: LD_INT 51
14896: EQUAL
14897: AND
14898: IFFALSE 14909
// ComStop ( i ) ;
14900: LD_VAR 0 2
14904: PPUSH
14905: CALL_OW 141
// end ;
14909: GO 14827
14911: POP
14912: POP
// end ; end ;
14913: GO 14793
14915: POP
14916: POP
// end ;
14917: PPOPN 4
14919: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14920: LD_VAR 0 2
14924: PUSH
14925: LD_EXP 8
14929: EQUAL
14930: PUSH
14931: LD_EXP 21
14935: PUSH
14936: LD_INT 4
14938: NONEQUAL
14939: AND
14940: IFFALSE 15092
// begin if IsOk ( Mikhail ) then
14942: LD_EXP 8
14946: PPUSH
14947: CALL_OW 302
14951: IFFALSE 14959
// AskMikhail else
14953: CALL 7486 0 0
14957: GO 15092
// if IsOk ( llab1 ) then
14959: LD_INT 23
14961: PPUSH
14962: CALL_OW 302
14966: IFFALSE 15055
// begin InGameOn ;
14968: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14972: LD_EXP 8
14976: PPUSH
14977: LD_INT 6
14979: PPUSH
14980: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14984: LD_INT 23
14986: PPUSH
14987: LD_INT 6
14989: PPUSH
14990: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14994: LD_EXP 8
14998: PPUSH
14999: LD_INT 23
15001: PPUSH
15002: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15006: LD_INT 35
15008: PPUSH
15009: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15013: LD_EXP 8
15017: PPUSH
15018: CALL_OW 310
15022: PUSH
15023: LD_INT 23
15025: EQUAL
15026: PUSH
15027: LD_EXP 8
15031: PPUSH
15032: CALL_OW 301
15036: OR
15037: IFFALSE 15006
// SetSide ( llab1 , 1 ) ;
15039: LD_INT 23
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 235
// InGameOff ;
15049: CALL_OW 9
// end else
15053: GO 15092
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15055: LD_INT 3
15057: PPUSH
15058: LD_INT 6
15060: PPUSH
15061: LD_INT 2
15063: PPUSH
15064: LD_INT 1
15066: PPUSH
15067: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15071: LD_EXP 8
15075: PPUSH
15076: LD_INT 6
15078: PPUSH
15079: CALL_OW 235
// ComHold ( Mikhail ) ;
15083: LD_EXP 8
15087: PPUSH
15088: CALL_OW 140
// end ; end ; end ;
15092: PPOPN 2
15094: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15095: LD_VAR 0 1
15099: PPUSH
15100: LD_VAR 0 2
15104: PPUSH
15105: CALL 32577 0 2
// end ;
15109: PPOPN 2
15111: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15112: LD_EXP 8
15116: PPUSH
15117: CALL_OW 257
15121: PUSH
15122: LD_INT 3
15124: NONEQUAL
15125: IFFALSE 15143
15127: GO 15129
15129: DISABLE
// begin enable ;
15130: ENABLE
// SetClass ( Mikhail , 3 ) ;
15131: LD_EXP 8
15135: PPUSH
15136: LD_INT 3
15138: PPUSH
15139: CALL_OW 336
// end ; end_of_file
15143: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15144: LD_INT 22
15146: PUSH
15147: LD_INT 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 21
15156: PUSH
15157: LD_INT 1
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 25
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL_OW 69
15183: PUSH
15184: LD_INT 0
15186: EQUAL
15187: PUSH
15188: LD_INT 22
15190: PUSH
15191: LD_INT 4
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 21
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 25
15210: PUSH
15211: LD_INT 2
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: PPUSH
15223: CALL_OW 69
15227: PUSH
15228: LD_INT 0
15230: EQUAL
15231: AND
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: CALL_OW 255
15240: PUSH
15241: LD_INT 3
15243: EQUAL
15244: AND
15245: PUSH
15246: LD_INT 10
15248: PPUSH
15249: CALL_OW 255
15253: PUSH
15254: LD_INT 3
15256: EQUAL
15257: AND
15258: IFFALSE 15270
15260: GO 15262
15262: DISABLE
// YouLost ( Engineer ) ;
15263: LD_STRING Engineer
15265: PPUSH
15266: CALL_OW 104
15270: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15271: LD_INT 1
15273: PPUSH
15274: CALL_OW 255
15278: PUSH
15279: LD_INT 3
15281: EQUAL
15282: PUSH
15283: LD_EXP 27
15287: PUSH
15288: LD_INT 1
15290: EQUAL
15291: AND
15292: IFFALSE 15304
15294: GO 15296
15296: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15297: LD_STRING DepotCaptured
15299: PPUSH
15300: CALL_OW 104
15304: END
// export function PrepareTigers ; var i , un ; begin
15305: LD_INT 0
15307: PPUSH
15308: PPUSH
15309: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: DOUBLE
15316: LD_INT 1
15318: DEC
15319: ST_TO_ADDR
15320: LD_INT 2
15322: PUSH
15323: LD_INT 3
15325: PUSH
15326: LD_INT 4
15328: PUSH
15329: LD_INT 5
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: LD_OWVAR 67
15342: ARRAY
15343: PUSH
15344: FOR_TO
15345: IFFALSE 15460
// begin uc_side := 0 ;
15347: LD_ADDR_OWVAR 20
15351: PUSH
15352: LD_INT 0
15354: ST_TO_ADDR
// uc_nation := nation_nature ;
15355: LD_ADDR_OWVAR 21
15359: PUSH
15360: LD_INT 0
15362: ST_TO_ADDR
// hc_sex := sex_male ;
15363: LD_ADDR_OWVAR 27
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// hc_class := class_tiger ;
15371: LD_ADDR_OWVAR 28
15375: PUSH
15376: LD_INT 14
15378: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15379: LD_ADDR_OWVAR 31
15383: PUSH
15384: LD_EXP 14
15388: PUSH
15389: LD_INT 0
15391: PUSH
15392: LD_INT 0
15394: PUSH
15395: LD_INT 0
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15404: LD_ADDR_OWVAR 35
15408: PUSH
15409: LD_INT 30
15411: PUSH
15412: LD_INT 40
15414: PUSH
15415: LD_INT 45
15417: PUSH
15418: LD_INT 50
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: LD_OWVAR 67
15431: ARRAY
15432: ST_TO_ADDR
// un = CreateHuman ;
15433: LD_ADDR_VAR 0 3
15437: PUSH
15438: CALL_OW 44
15442: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15443: LD_VAR 0 3
15447: PPUSH
15448: LD_INT 27
15450: PPUSH
15451: LD_INT 0
15453: PPUSH
15454: CALL_OW 49
// end ;
15458: GO 15344
15460: POP
15461: POP
// end ; end_of_file
15462: LD_VAR 0 1
15466: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15467: LD_INT 1
15469: PPUSH
15470: CALL_OW 255
15474: PUSH
15475: LD_INT 1
15477: EQUAL
15478: PUSH
15479: LD_INT 10
15481: PPUSH
15482: CALL_OW 255
15486: PUSH
15487: LD_INT 1
15489: EQUAL
15490: AND
15491: PUSH
15492: LD_EXP 20
15496: PUSH
15497: LD_INT 1
15499: EQUAL
15500: AND
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_INT 3
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 21
15514: PUSH
15515: LD_INT 2
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 34
15524: PUSH
15525: LD_INT 51
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 3
15534: PUSH
15535: LD_INT 58
15537: PUSH
15538: EMPTY
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 69
15555: PUSH
15556: LD_INT 0
15558: EQUAL
15559: AND
15560: IFFALSE 15651
15562: GO 15564
15564: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15565: LD_INT 9450
15567: PUSH
15568: LD_INT 8400
15570: PUSH
15571: LD_INT 6300
15573: PUSH
15574: LD_INT 6300
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: PUSH
15583: LD_OWVAR 67
15587: ARRAY
15588: PPUSH
15589: CALL_OW 67
// if cargoEscape then
15593: LD_EXP 20
15597: IFFALSE 15651
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15599: LD_EXP 9
15603: PPUSH
15604: LD_STRING D6-Pow-1
15606: PPUSH
15607: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15611: LD_EXP 1
15615: PPUSH
15616: LD_STRING D6-JMM-1
15618: PPUSH
15619: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15623: LD_EXP 9
15627: PPUSH
15628: LD_STRING D6-Pow-2
15630: PPUSH
15631: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15635: LD_EXP 1
15639: PPUSH
15640: LD_STRING D6-JMM-2
15642: PPUSH
15643: CALL_OW 88
// FinishMission ;
15647: CALL 15867 0 0
// end ; end ;
15651: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15652: LD_INT 1
15654: PPUSH
15655: CALL_OW 255
15659: PUSH
15660: LD_INT 1
15662: EQUAL
15663: PUSH
15664: LD_INT 10
15666: PPUSH
15667: CALL_OW 255
15671: PUSH
15672: LD_INT 1
15674: EQUAL
15675: AND
15676: PUSH
15677: LD_EXP 20
15681: PUSH
15682: LD_INT 1
15684: GREATER
15685: AND
15686: IFFALSE 15761
15688: GO 15690
15690: DISABLE
15691: LD_INT 0
15693: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15694: LD_INT 11550
15696: PUSH
15697: LD_INT 10500
15699: PUSH
15700: LD_INT 9450
15702: PUSH
15703: LD_INT 8400
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: PUSH
15712: LD_OWVAR 67
15716: ARRAY
15717: PPUSH
15718: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15722: LD_INT 1
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: LD_INT 4
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: LD_OWVAR 67
15744: ARRAY
15745: PPUSH
15746: LD_INT 13
15748: PPUSH
15749: CALL 13342 0 2
// lastBattle = 1 ;
15753: LD_ADDR_EXP 27
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// end ;
15761: PPOPN 1
15763: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15764: LD_EXP 27
15768: PUSH
15769: LD_INT 1
15771: EQUAL
15772: PUSH
15773: LD_INT 26
15775: PPUSH
15776: LD_INT 22
15778: PUSH
15779: LD_INT 3
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PPUSH
15800: CALL_OW 70
15804: PUSH
15805: LD_INT 0
15807: EQUAL
15808: AND
15809: IFFALSE 15866
15811: GO 15813
15813: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15814: LD_EXP 9
15818: PPUSH
15819: LD_STRING D6-Pow-1
15821: PPUSH
15822: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15826: LD_EXP 1
15830: PPUSH
15831: LD_STRING D6-JMM-1
15833: PPUSH
15834: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15838: LD_EXP 9
15842: PPUSH
15843: LD_STRING D6-Pow-2
15845: PPUSH
15846: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15850: LD_EXP 1
15854: PPUSH
15855: LD_STRING D6-JMM-2
15857: PPUSH
15858: CALL_OW 88
// FinishMission ;
15862: CALL 15867 0 0
// end ;
15866: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15867: LD_INT 0
15869: PPUSH
15870: PPUSH
15871: PPUSH
15872: PPUSH
15873: PPUSH
// if tick <= 18 18$00 then
15874: LD_OWVAR 1
15878: PUSH
15879: LD_INT 37800
15881: LESSEQUAL
15882: IFFALSE 15891
// SetAchievement ( ACH_ASPEED_2 ) ;
15884: LD_STRING ACH_ASPEED_2
15886: PPUSH
15887: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15891: LD_ADDR_VAR 0 2
15895: PUSH
15896: LD_INT 22
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 21
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 24
15918: PUSH
15919: LD_INT 251
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: LIST
15930: PPUSH
15931: CALL_OW 69
15935: ST_TO_ADDR
// if tmp then
15936: LD_VAR 0 2
15940: IFFALSE 15954
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15942: LD_VAR 0 2
15946: PPUSH
15947: LD_STRING 02_tanks_1
15949: PPUSH
15950: CALL 10688 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15954: LD_EXP 21
15958: PUSH
15959: LD_INT 1
15961: EQUAL
15962: PUSH
15963: LD_EXP 8
15967: PPUSH
15968: CALL_OW 300
15972: AND
15973: IFFALSE 15987
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15975: LD_EXP 21
15979: PPUSH
15980: LD_STRING 02_mikhailStatus_1
15982: PPUSH
15983: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15987: LD_INT 1
15989: PPUSH
15990: CALL_OW 274
15994: PPUSH
15995: LD_INT 1
15997: PPUSH
15998: CALL_OW 275
16002: PPUSH
16003: LD_STRING 02_resources_4
16005: PPUSH
16006: CALL_OW 39
// m1 := false ;
16010: LD_ADDR_VAR 0 3
16014: PUSH
16015: LD_INT 0
16017: ST_TO_ADDR
// m2 := false ;
16018: LD_ADDR_VAR 0 4
16022: PUSH
16023: LD_INT 0
16025: ST_TO_ADDR
// m3 := false ;
16026: LD_ADDR_VAR 0 5
16030: PUSH
16031: LD_INT 0
16033: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 274
16041: PPUSH
16042: LD_INT 1
16044: PPUSH
16045: CALL_OW 275
16049: PUSH
16050: LD_INT 200
16052: GREATEREQUAL
16053: IFFALSE 16075
// begin AddMedal ( Cans , 1 ) ;
16055: LD_STRING Cans
16057: PPUSH
16058: LD_INT 1
16060: PPUSH
16061: CALL_OW 101
// m1 := true ;
16065: LD_ADDR_VAR 0 3
16069: PUSH
16070: LD_INT 1
16072: ST_TO_ADDR
// end else
16073: GO 16086
// begin AddMedal ( Cans , - 1 ) ;
16075: LD_STRING Cans
16077: PPUSH
16078: LD_INT 1
16080: NEG
16081: PPUSH
16082: CALL_OW 101
// end ; if deadsCounter < 2 then
16086: LD_EXP 31
16090: PUSH
16091: LD_INT 2
16093: LESS
16094: IFFALSE 16116
// begin AddMedal ( Deaths , 1 ) ;
16096: LD_STRING Deaths
16098: PPUSH
16099: LD_INT 1
16101: PPUSH
16102: CALL_OW 101
// m2 := true ;
16106: LD_ADDR_VAR 0 4
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// end else
16114: GO 16127
// begin AddMedal ( Deaths , - 1 ) ;
16116: LD_STRING Deaths
16118: PPUSH
16119: LD_INT 1
16121: NEG
16122: PPUSH
16123: CALL_OW 101
// end ; if mikhailStatus = 0 then
16127: LD_EXP 21
16131: PUSH
16132: LD_INT 0
16134: EQUAL
16135: IFFALSE 16148
// AddMedal ( Prisoner , - 1 ) ;
16137: LD_STRING Prisoner
16139: PPUSH
16140: LD_INT 1
16142: NEG
16143: PPUSH
16144: CALL_OW 101
// if mikhailStatus = 1 then
16148: LD_EXP 21
16152: PUSH
16153: LD_INT 1
16155: EQUAL
16156: IFFALSE 16176
// begin AddMedal ( Prisoner , 1 ) ;
16158: LD_STRING Prisoner
16160: PPUSH
16161: LD_INT 1
16163: PPUSH
16164: CALL_OW 101
// m3 := true ;
16168: LD_ADDR_VAR 0 5
16172: PUSH
16173: LD_INT 1
16175: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16176: LD_EXP 21
16180: PUSH
16181: LD_INT 2
16183: EQUAL
16184: IFFALSE 16204
// begin AddMedal ( Prisoner , 2 ) ;
16186: LD_STRING Prisoner
16188: PPUSH
16189: LD_INT 2
16191: PPUSH
16192: CALL_OW 101
// m3 := true ;
16196: LD_ADDR_VAR 0 5
16200: PUSH
16201: LD_INT 1
16203: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16204: LD_EXP 21
16208: PUSH
16209: LD_INT 3
16211: EQUAL
16212: IFFALSE 16225
// AddMedal ( Prisoner , - 2 ) ;
16214: LD_STRING Prisoner
16216: PPUSH
16217: LD_INT 2
16219: NEG
16220: PPUSH
16221: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16225: LD_OWVAR 67
16229: PUSH
16230: LD_INT 3
16232: GREATEREQUAL
16233: PUSH
16234: LD_VAR 0 3
16238: AND
16239: PUSH
16240: LD_VAR 0 4
16244: AND
16245: PUSH
16246: LD_VAR 0 5
16250: AND
16251: IFFALSE 16263
// SetAchievementEX ( ACH_AMER , 2 ) ;
16253: LD_STRING ACH_AMER
16255: PPUSH
16256: LD_INT 2
16258: PPUSH
16259: CALL_OW 564
// GiveMedals ( MAIN ) ;
16263: LD_STRING MAIN
16265: PPUSH
16266: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16270: LD_INT 22
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 23
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 21
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: LIST
16304: PPUSH
16305: CALL_OW 69
16309: PPUSH
16310: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16314: LD_EXP 1
16318: PPUSH
16319: LD_EXP 33
16323: PUSH
16324: LD_STRING JMM
16326: STR
16327: PPUSH
16328: CALL_OW 38
// if IsOK ( Bobby ) then
16332: LD_EXP 2
16336: PPUSH
16337: CALL_OW 302
16341: IFFALSE 16361
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16343: LD_EXP 2
16347: PPUSH
16348: LD_EXP 33
16352: PUSH
16353: LD_STRING Bobby
16355: STR
16356: PPUSH
16357: CALL_OW 38
// if IsOK ( Cyrus ) then
16361: LD_EXP 3
16365: PPUSH
16366: CALL_OW 302
16370: IFFALSE 16390
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16372: LD_EXP 3
16376: PPUSH
16377: LD_EXP 33
16381: PUSH
16382: LD_STRING Cyrus
16384: STR
16385: PPUSH
16386: CALL_OW 38
// if IsOK ( Lisa ) then
16390: LD_EXP 4
16394: PPUSH
16395: CALL_OW 302
16399: IFFALSE 16419
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16401: LD_EXP 4
16405: PPUSH
16406: LD_EXP 33
16410: PUSH
16411: LD_STRING Lisa
16413: STR
16414: PPUSH
16415: CALL_OW 38
// if IsOK ( Khatam ) then
16419: LD_EXP 5
16423: PPUSH
16424: CALL_OW 302
16428: IFFALSE 16448
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16430: LD_EXP 5
16434: PPUSH
16435: LD_EXP 33
16439: PUSH
16440: LD_STRING Khatam
16442: STR
16443: PPUSH
16444: CALL_OW 38
// if IsOK ( Brian ) then
16448: LD_EXP 6
16452: PPUSH
16453: CALL_OW 302
16457: IFFALSE 16477
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16459: LD_EXP 6
16463: PPUSH
16464: LD_EXP 33
16468: PUSH
16469: LD_STRING Brian
16471: STR
16472: PPUSH
16473: CALL_OW 38
// if IsOk ( Jerry ) then
16477: LD_EXP 7
16481: PPUSH
16482: CALL_OW 302
16486: IFFALSE 16506
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16488: LD_EXP 7
16492: PPUSH
16493: LD_EXP 33
16497: PUSH
16498: LD_STRING Jerry
16500: STR
16501: PPUSH
16502: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16506: LD_EXP 21
16510: PUSH
16511: LD_INT 1
16513: EQUAL
16514: PUSH
16515: LD_EXP 8
16519: PPUSH
16520: CALL_OW 255
16524: PUSH
16525: LD_INT 1
16527: EQUAL
16528: AND
16529: PUSH
16530: LD_EXP 8
16534: PPUSH
16535: CALL_OW 302
16539: AND
16540: IFFALSE 16560
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16542: LD_EXP 8
16546: PPUSH
16547: LD_EXP 33
16551: PUSH
16552: LD_STRING Mikhail
16554: STR
16555: PPUSH
16556: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16560: LD_INT 50
16562: PUSH
16563: EMPTY
16564: LIST
16565: PUSH
16566: LD_INT 22
16568: PUSH
16569: LD_INT 1
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 21
16578: PUSH
16579: LD_INT 1
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: PPUSH
16591: CALL_OW 69
16595: PUSH
16596: LD_EXP 1
16600: PUSH
16601: LD_EXP 2
16605: PUSH
16606: LD_EXP 3
16610: PUSH
16611: LD_EXP 4
16615: PUSH
16616: LD_EXP 5
16620: PUSH
16621: LD_EXP 6
16625: PUSH
16626: LD_EXP 7
16630: PUSH
16631: LD_EXP 8
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: DIFF
16646: PPUSH
16647: LD_STRING 02_other_survivors
16649: PPUSH
16650: CALL_OW 38
// YouWin ;
16654: CALL_OW 103
// end ; end_of_file end_of_file
16658: LD_VAR 0 1
16662: RET
// export globalGameSaveCounter ; every 0 0$1 do
16663: GO 16665
16665: DISABLE
// begin enable ;
16666: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16667: LD_STRING updateTimer(
16669: PUSH
16670: LD_OWVAR 1
16674: STR
16675: PUSH
16676: LD_STRING );
16678: STR
16679: PPUSH
16680: CALL_OW 559
// end ;
16684: END
// every 0 0$1 do
16685: GO 16687
16687: DISABLE
// begin globalGameSaveCounter := 0 ;
16688: LD_ADDR_EXP 36
16692: PUSH
16693: LD_INT 0
16695: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16696: LD_STRING setGameSaveCounter(0)
16698: PPUSH
16699: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16703: LD_STRING initStreamRollete();
16705: PPUSH
16706: CALL_OW 559
// InitStreamMode ;
16710: CALL 18036 0 0
// DefineStreamItems ( false ) ;
16714: LD_INT 0
16716: PPUSH
16717: CALL 18500 0 1
// end ;
16721: END
// export function SOS_MapStart ( ) ; begin
16722: LD_INT 0
16724: PPUSH
// if streamModeActive then
16725: LD_EXP 37
16729: IFFALSE 16738
// DefineStreamItems ( true ) ;
16731: LD_INT 1
16733: PPUSH
16734: CALL 18500 0 1
// UpdateLuaVariables ( ) ;
16738: CALL 16755 0 0
// UpdateFactoryWaypoints ( ) ;
16742: CALL 31361 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16746: CALL 31618 0 0
// end ;
16750: LD_VAR 0 1
16754: RET
// function UpdateLuaVariables ( ) ; begin
16755: LD_INT 0
16757: PPUSH
// if globalGameSaveCounter then
16758: LD_EXP 36
16762: IFFALSE 16796
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
16764: LD_ADDR_EXP 36
16768: PUSH
16769: LD_EXP 36
16773: PPUSH
16774: CALL 75575 0 1
16778: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16779: LD_STRING setGameSaveCounter(
16781: PUSH
16782: LD_EXP 36
16786: STR
16787: PUSH
16788: LD_STRING )
16790: STR
16791: PPUSH
16792: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
16796: LD_STRING setGameDifficulty(
16798: PUSH
16799: LD_OWVAR 67
16803: STR
16804: PUSH
16805: LD_STRING )
16807: STR
16808: PPUSH
16809: CALL_OW 559
// end ;
16813: LD_VAR 0 1
16817: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16818: LD_INT 0
16820: PPUSH
// if p2 = stream_mode then
16821: LD_VAR 0 2
16825: PUSH
16826: LD_INT 100
16828: EQUAL
16829: IFFALSE 17832
// begin if not StreamModeActive then
16831: LD_EXP 37
16835: NOT
16836: IFFALSE 16846
// StreamModeActive := true ;
16838: LD_ADDR_EXP 37
16842: PUSH
16843: LD_INT 1
16845: ST_TO_ADDR
// if p3 = 0 then
16846: LD_VAR 0 3
16850: PUSH
16851: LD_INT 0
16853: EQUAL
16854: IFFALSE 16860
// InitStreamMode ;
16856: CALL 18036 0 0
// if p3 = 1 then
16860: LD_VAR 0 3
16864: PUSH
16865: LD_INT 1
16867: EQUAL
16868: IFFALSE 16878
// sRocket := true ;
16870: LD_ADDR_EXP 42
16874: PUSH
16875: LD_INT 1
16877: ST_TO_ADDR
// if p3 = 2 then
16878: LD_VAR 0 3
16882: PUSH
16883: LD_INT 2
16885: EQUAL
16886: IFFALSE 16896
// sSpeed := true ;
16888: LD_ADDR_EXP 41
16892: PUSH
16893: LD_INT 1
16895: ST_TO_ADDR
// if p3 = 3 then
16896: LD_VAR 0 3
16900: PUSH
16901: LD_INT 3
16903: EQUAL
16904: IFFALSE 16914
// sEngine := true ;
16906: LD_ADDR_EXP 43
16910: PUSH
16911: LD_INT 1
16913: ST_TO_ADDR
// if p3 = 4 then
16914: LD_VAR 0 3
16918: PUSH
16919: LD_INT 4
16921: EQUAL
16922: IFFALSE 16932
// sSpec := true ;
16924: LD_ADDR_EXP 40
16928: PUSH
16929: LD_INT 1
16931: ST_TO_ADDR
// if p3 = 5 then
16932: LD_VAR 0 3
16936: PUSH
16937: LD_INT 5
16939: EQUAL
16940: IFFALSE 16950
// sLevel := true ;
16942: LD_ADDR_EXP 44
16946: PUSH
16947: LD_INT 1
16949: ST_TO_ADDR
// if p3 = 6 then
16950: LD_VAR 0 3
16954: PUSH
16955: LD_INT 6
16957: EQUAL
16958: IFFALSE 16968
// sArmoury := true ;
16960: LD_ADDR_EXP 45
16964: PUSH
16965: LD_INT 1
16967: ST_TO_ADDR
// if p3 = 7 then
16968: LD_VAR 0 3
16972: PUSH
16973: LD_INT 7
16975: EQUAL
16976: IFFALSE 16986
// sRadar := true ;
16978: LD_ADDR_EXP 46
16982: PUSH
16983: LD_INT 1
16985: ST_TO_ADDR
// if p3 = 8 then
16986: LD_VAR 0 3
16990: PUSH
16991: LD_INT 8
16993: EQUAL
16994: IFFALSE 17004
// sBunker := true ;
16996: LD_ADDR_EXP 47
17000: PUSH
17001: LD_INT 1
17003: ST_TO_ADDR
// if p3 = 9 then
17004: LD_VAR 0 3
17008: PUSH
17009: LD_INT 9
17011: EQUAL
17012: IFFALSE 17022
// sHack := true ;
17014: LD_ADDR_EXP 48
17018: PUSH
17019: LD_INT 1
17021: ST_TO_ADDR
// if p3 = 10 then
17022: LD_VAR 0 3
17026: PUSH
17027: LD_INT 10
17029: EQUAL
17030: IFFALSE 17040
// sFire := true ;
17032: LD_ADDR_EXP 49
17036: PUSH
17037: LD_INT 1
17039: ST_TO_ADDR
// if p3 = 11 then
17040: LD_VAR 0 3
17044: PUSH
17045: LD_INT 11
17047: EQUAL
17048: IFFALSE 17058
// sRefresh := true ;
17050: LD_ADDR_EXP 50
17054: PUSH
17055: LD_INT 1
17057: ST_TO_ADDR
// if p3 = 12 then
17058: LD_VAR 0 3
17062: PUSH
17063: LD_INT 12
17065: EQUAL
17066: IFFALSE 17076
// sExp := true ;
17068: LD_ADDR_EXP 51
17072: PUSH
17073: LD_INT 1
17075: ST_TO_ADDR
// if p3 = 13 then
17076: LD_VAR 0 3
17080: PUSH
17081: LD_INT 13
17083: EQUAL
17084: IFFALSE 17094
// sDepot := true ;
17086: LD_ADDR_EXP 52
17090: PUSH
17091: LD_INT 1
17093: ST_TO_ADDR
// if p3 = 14 then
17094: LD_VAR 0 3
17098: PUSH
17099: LD_INT 14
17101: EQUAL
17102: IFFALSE 17112
// sFlag := true ;
17104: LD_ADDR_EXP 53
17108: PUSH
17109: LD_INT 1
17111: ST_TO_ADDR
// if p3 = 15 then
17112: LD_VAR 0 3
17116: PUSH
17117: LD_INT 15
17119: EQUAL
17120: IFFALSE 17130
// sKamikadze := true ;
17122: LD_ADDR_EXP 61
17126: PUSH
17127: LD_INT 1
17129: ST_TO_ADDR
// if p3 = 16 then
17130: LD_VAR 0 3
17134: PUSH
17135: LD_INT 16
17137: EQUAL
17138: IFFALSE 17148
// sTroll := true ;
17140: LD_ADDR_EXP 62
17144: PUSH
17145: LD_INT 1
17147: ST_TO_ADDR
// if p3 = 17 then
17148: LD_VAR 0 3
17152: PUSH
17153: LD_INT 17
17155: EQUAL
17156: IFFALSE 17166
// sSlow := true ;
17158: LD_ADDR_EXP 63
17162: PUSH
17163: LD_INT 1
17165: ST_TO_ADDR
// if p3 = 18 then
17166: LD_VAR 0 3
17170: PUSH
17171: LD_INT 18
17173: EQUAL
17174: IFFALSE 17184
// sLack := true ;
17176: LD_ADDR_EXP 64
17180: PUSH
17181: LD_INT 1
17183: ST_TO_ADDR
// if p3 = 19 then
17184: LD_VAR 0 3
17188: PUSH
17189: LD_INT 19
17191: EQUAL
17192: IFFALSE 17202
// sTank := true ;
17194: LD_ADDR_EXP 66
17198: PUSH
17199: LD_INT 1
17201: ST_TO_ADDR
// if p3 = 20 then
17202: LD_VAR 0 3
17206: PUSH
17207: LD_INT 20
17209: EQUAL
17210: IFFALSE 17220
// sRemote := true ;
17212: LD_ADDR_EXP 67
17216: PUSH
17217: LD_INT 1
17219: ST_TO_ADDR
// if p3 = 21 then
17220: LD_VAR 0 3
17224: PUSH
17225: LD_INT 21
17227: EQUAL
17228: IFFALSE 17238
// sPowell := true ;
17230: LD_ADDR_EXP 68
17234: PUSH
17235: LD_INT 1
17237: ST_TO_ADDR
// if p3 = 22 then
17238: LD_VAR 0 3
17242: PUSH
17243: LD_INT 22
17245: EQUAL
17246: IFFALSE 17256
// sTeleport := true ;
17248: LD_ADDR_EXP 71
17252: PUSH
17253: LD_INT 1
17255: ST_TO_ADDR
// if p3 = 23 then
17256: LD_VAR 0 3
17260: PUSH
17261: LD_INT 23
17263: EQUAL
17264: IFFALSE 17274
// sOilTower := true ;
17266: LD_ADDR_EXP 73
17270: PUSH
17271: LD_INT 1
17273: ST_TO_ADDR
// if p3 = 24 then
17274: LD_VAR 0 3
17278: PUSH
17279: LD_INT 24
17281: EQUAL
17282: IFFALSE 17292
// sShovel := true ;
17284: LD_ADDR_EXP 74
17288: PUSH
17289: LD_INT 1
17291: ST_TO_ADDR
// if p3 = 25 then
17292: LD_VAR 0 3
17296: PUSH
17297: LD_INT 25
17299: EQUAL
17300: IFFALSE 17310
// sSheik := true ;
17302: LD_ADDR_EXP 75
17306: PUSH
17307: LD_INT 1
17309: ST_TO_ADDR
// if p3 = 26 then
17310: LD_VAR 0 3
17314: PUSH
17315: LD_INT 26
17317: EQUAL
17318: IFFALSE 17328
// sEarthquake := true ;
17320: LD_ADDR_EXP 77
17324: PUSH
17325: LD_INT 1
17327: ST_TO_ADDR
// if p3 = 27 then
17328: LD_VAR 0 3
17332: PUSH
17333: LD_INT 27
17335: EQUAL
17336: IFFALSE 17346
// sAI := true ;
17338: LD_ADDR_EXP 78
17342: PUSH
17343: LD_INT 1
17345: ST_TO_ADDR
// if p3 = 28 then
17346: LD_VAR 0 3
17350: PUSH
17351: LD_INT 28
17353: EQUAL
17354: IFFALSE 17364
// sCargo := true ;
17356: LD_ADDR_EXP 81
17360: PUSH
17361: LD_INT 1
17363: ST_TO_ADDR
// if p3 = 29 then
17364: LD_VAR 0 3
17368: PUSH
17369: LD_INT 29
17371: EQUAL
17372: IFFALSE 17382
// sDLaser := true ;
17374: LD_ADDR_EXP 82
17378: PUSH
17379: LD_INT 1
17381: ST_TO_ADDR
// if p3 = 30 then
17382: LD_VAR 0 3
17386: PUSH
17387: LD_INT 30
17389: EQUAL
17390: IFFALSE 17400
// sExchange := true ;
17392: LD_ADDR_EXP 83
17396: PUSH
17397: LD_INT 1
17399: ST_TO_ADDR
// if p3 = 31 then
17400: LD_VAR 0 3
17404: PUSH
17405: LD_INT 31
17407: EQUAL
17408: IFFALSE 17418
// sFac := true ;
17410: LD_ADDR_EXP 84
17414: PUSH
17415: LD_INT 1
17417: ST_TO_ADDR
// if p3 = 32 then
17418: LD_VAR 0 3
17422: PUSH
17423: LD_INT 32
17425: EQUAL
17426: IFFALSE 17436
// sPower := true ;
17428: LD_ADDR_EXP 85
17432: PUSH
17433: LD_INT 1
17435: ST_TO_ADDR
// if p3 = 33 then
17436: LD_VAR 0 3
17440: PUSH
17441: LD_INT 33
17443: EQUAL
17444: IFFALSE 17454
// sRandom := true ;
17446: LD_ADDR_EXP 86
17450: PUSH
17451: LD_INT 1
17453: ST_TO_ADDR
// if p3 = 34 then
17454: LD_VAR 0 3
17458: PUSH
17459: LD_INT 34
17461: EQUAL
17462: IFFALSE 17472
// sShield := true ;
17464: LD_ADDR_EXP 87
17468: PUSH
17469: LD_INT 1
17471: ST_TO_ADDR
// if p3 = 35 then
17472: LD_VAR 0 3
17476: PUSH
17477: LD_INT 35
17479: EQUAL
17480: IFFALSE 17490
// sTime := true ;
17482: LD_ADDR_EXP 88
17486: PUSH
17487: LD_INT 1
17489: ST_TO_ADDR
// if p3 = 36 then
17490: LD_VAR 0 3
17494: PUSH
17495: LD_INT 36
17497: EQUAL
17498: IFFALSE 17508
// sTools := true ;
17500: LD_ADDR_EXP 89
17504: PUSH
17505: LD_INT 1
17507: ST_TO_ADDR
// if p3 = 101 then
17508: LD_VAR 0 3
17512: PUSH
17513: LD_INT 101
17515: EQUAL
17516: IFFALSE 17526
// sSold := true ;
17518: LD_ADDR_EXP 54
17522: PUSH
17523: LD_INT 1
17525: ST_TO_ADDR
// if p3 = 102 then
17526: LD_VAR 0 3
17530: PUSH
17531: LD_INT 102
17533: EQUAL
17534: IFFALSE 17544
// sDiff := true ;
17536: LD_ADDR_EXP 55
17540: PUSH
17541: LD_INT 1
17543: ST_TO_ADDR
// if p3 = 103 then
17544: LD_VAR 0 3
17548: PUSH
17549: LD_INT 103
17551: EQUAL
17552: IFFALSE 17562
// sFog := true ;
17554: LD_ADDR_EXP 58
17558: PUSH
17559: LD_INT 1
17561: ST_TO_ADDR
// if p3 = 104 then
17562: LD_VAR 0 3
17566: PUSH
17567: LD_INT 104
17569: EQUAL
17570: IFFALSE 17580
// sReset := true ;
17572: LD_ADDR_EXP 59
17576: PUSH
17577: LD_INT 1
17579: ST_TO_ADDR
// if p3 = 105 then
17580: LD_VAR 0 3
17584: PUSH
17585: LD_INT 105
17587: EQUAL
17588: IFFALSE 17598
// sSun := true ;
17590: LD_ADDR_EXP 60
17594: PUSH
17595: LD_INT 1
17597: ST_TO_ADDR
// if p3 = 106 then
17598: LD_VAR 0 3
17602: PUSH
17603: LD_INT 106
17605: EQUAL
17606: IFFALSE 17616
// sTiger := true ;
17608: LD_ADDR_EXP 56
17612: PUSH
17613: LD_INT 1
17615: ST_TO_ADDR
// if p3 = 107 then
17616: LD_VAR 0 3
17620: PUSH
17621: LD_INT 107
17623: EQUAL
17624: IFFALSE 17634
// sBomb := true ;
17626: LD_ADDR_EXP 57
17630: PUSH
17631: LD_INT 1
17633: ST_TO_ADDR
// if p3 = 108 then
17634: LD_VAR 0 3
17638: PUSH
17639: LD_INT 108
17641: EQUAL
17642: IFFALSE 17652
// sWound := true ;
17644: LD_ADDR_EXP 65
17648: PUSH
17649: LD_INT 1
17651: ST_TO_ADDR
// if p3 = 109 then
17652: LD_VAR 0 3
17656: PUSH
17657: LD_INT 109
17659: EQUAL
17660: IFFALSE 17670
// sBetray := true ;
17662: LD_ADDR_EXP 69
17666: PUSH
17667: LD_INT 1
17669: ST_TO_ADDR
// if p3 = 110 then
17670: LD_VAR 0 3
17674: PUSH
17675: LD_INT 110
17677: EQUAL
17678: IFFALSE 17688
// sContamin := true ;
17680: LD_ADDR_EXP 70
17684: PUSH
17685: LD_INT 1
17687: ST_TO_ADDR
// if p3 = 111 then
17688: LD_VAR 0 3
17692: PUSH
17693: LD_INT 111
17695: EQUAL
17696: IFFALSE 17706
// sOil := true ;
17698: LD_ADDR_EXP 72
17702: PUSH
17703: LD_INT 1
17705: ST_TO_ADDR
// if p3 = 112 then
17706: LD_VAR 0 3
17710: PUSH
17711: LD_INT 112
17713: EQUAL
17714: IFFALSE 17724
// sStu := true ;
17716: LD_ADDR_EXP 76
17720: PUSH
17721: LD_INT 1
17723: ST_TO_ADDR
// if p3 = 113 then
17724: LD_VAR 0 3
17728: PUSH
17729: LD_INT 113
17731: EQUAL
17732: IFFALSE 17742
// sBazooka := true ;
17734: LD_ADDR_EXP 79
17738: PUSH
17739: LD_INT 1
17741: ST_TO_ADDR
// if p3 = 114 then
17742: LD_VAR 0 3
17746: PUSH
17747: LD_INT 114
17749: EQUAL
17750: IFFALSE 17760
// sMortar := true ;
17752: LD_ADDR_EXP 80
17756: PUSH
17757: LD_INT 1
17759: ST_TO_ADDR
// if p3 = 115 then
17760: LD_VAR 0 3
17764: PUSH
17765: LD_INT 115
17767: EQUAL
17768: IFFALSE 17778
// sRanger := true ;
17770: LD_ADDR_EXP 90
17774: PUSH
17775: LD_INT 1
17777: ST_TO_ADDR
// if p3 = 116 then
17778: LD_VAR 0 3
17782: PUSH
17783: LD_INT 116
17785: EQUAL
17786: IFFALSE 17796
// sComputer := true ;
17788: LD_ADDR_EXP 91
17792: PUSH
17793: LD_INT 1
17795: ST_TO_ADDR
// if p3 = 117 then
17796: LD_VAR 0 3
17800: PUSH
17801: LD_INT 117
17803: EQUAL
17804: IFFALSE 17814
// s30 := true ;
17806: LD_ADDR_EXP 92
17810: PUSH
17811: LD_INT 1
17813: ST_TO_ADDR
// if p3 = 118 then
17814: LD_VAR 0 3
17818: PUSH
17819: LD_INT 118
17821: EQUAL
17822: IFFALSE 17832
// s60 := true ;
17824: LD_ADDR_EXP 93
17828: PUSH
17829: LD_INT 1
17831: ST_TO_ADDR
// end ; if p2 = hack_mode then
17832: LD_VAR 0 2
17836: PUSH
17837: LD_INT 101
17839: EQUAL
17840: IFFALSE 17968
// begin case p3 of 1 :
17842: LD_VAR 0 3
17846: PUSH
17847: LD_INT 1
17849: DOUBLE
17850: EQUAL
17851: IFTRUE 17855
17853: GO 17862
17855: POP
// hHackUnlimitedResources ; 2 :
17856: CALL 30107 0 0
17860: GO 17968
17862: LD_INT 2
17864: DOUBLE
17865: EQUAL
17866: IFTRUE 17870
17868: GO 17877
17870: POP
// hHackSetLevel10 ; 3 :
17871: CALL 30240 0 0
17875: GO 17968
17877: LD_INT 3
17879: DOUBLE
17880: EQUAL
17881: IFTRUE 17885
17883: GO 17892
17885: POP
// hHackSetLevel10YourUnits ; 4 :
17886: CALL 30325 0 0
17890: GO 17968
17892: LD_INT 4
17894: DOUBLE
17895: EQUAL
17896: IFTRUE 17900
17898: GO 17907
17900: POP
// hHackInvincible ; 5 :
17901: CALL 30773 0 0
17905: GO 17968
17907: LD_INT 5
17909: DOUBLE
17910: EQUAL
17911: IFTRUE 17915
17913: GO 17922
17915: POP
// hHackInvisible ; 6 :
17916: CALL 30884 0 0
17920: GO 17968
17922: LD_INT 6
17924: DOUBLE
17925: EQUAL
17926: IFTRUE 17930
17928: GO 17937
17930: POP
// hHackChangeYourSide ; 7 :
17931: CALL 30941 0 0
17935: GO 17968
17937: LD_INT 7
17939: DOUBLE
17940: EQUAL
17941: IFTRUE 17945
17943: GO 17952
17945: POP
// hHackChangeUnitSide ; 8 :
17946: CALL 30983 0 0
17950: GO 17968
17952: LD_INT 8
17954: DOUBLE
17955: EQUAL
17956: IFTRUE 17960
17958: GO 17967
17960: POP
// hHackFog ; end ;
17961: CALL 31084 0 0
17965: GO 17968
17967: POP
// end ; if p2 = game_save_mode then
17968: LD_VAR 0 2
17972: PUSH
17973: LD_INT 102
17975: EQUAL
17976: IFFALSE 18031
// begin if p3 = 1 then
17978: LD_VAR 0 3
17982: PUSH
17983: LD_INT 1
17985: EQUAL
17986: IFFALSE 17998
// globalGameSaveCounter := p4 ;
17988: LD_ADDR_EXP 36
17992: PUSH
17993: LD_VAR 0 4
17997: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17998: LD_VAR 0 3
18002: PUSH
18003: LD_INT 2
18005: EQUAL
18006: PUSH
18007: LD_EXP 36
18011: AND
18012: IFFALSE 18031
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18014: LD_STRING setGameSaveCounter(
18016: PUSH
18017: LD_EXP 36
18021: STR
18022: PUSH
18023: LD_STRING )
18025: STR
18026: PPUSH
18027: CALL_OW 559
// end ; end ;
18031: LD_VAR 0 7
18035: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18036: LD_INT 0
18038: PPUSH
// streamModeActive := false ;
18039: LD_ADDR_EXP 37
18043: PUSH
18044: LD_INT 0
18046: ST_TO_ADDR
// normalCounter := 36 ;
18047: LD_ADDR_EXP 38
18051: PUSH
18052: LD_INT 36
18054: ST_TO_ADDR
// hardcoreCounter := 18 ;
18055: LD_ADDR_EXP 39
18059: PUSH
18060: LD_INT 18
18062: ST_TO_ADDR
// sRocket := false ;
18063: LD_ADDR_EXP 42
18067: PUSH
18068: LD_INT 0
18070: ST_TO_ADDR
// sSpeed := false ;
18071: LD_ADDR_EXP 41
18075: PUSH
18076: LD_INT 0
18078: ST_TO_ADDR
// sEngine := false ;
18079: LD_ADDR_EXP 43
18083: PUSH
18084: LD_INT 0
18086: ST_TO_ADDR
// sSpec := false ;
18087: LD_ADDR_EXP 40
18091: PUSH
18092: LD_INT 0
18094: ST_TO_ADDR
// sLevel := false ;
18095: LD_ADDR_EXP 44
18099: PUSH
18100: LD_INT 0
18102: ST_TO_ADDR
// sArmoury := false ;
18103: LD_ADDR_EXP 45
18107: PUSH
18108: LD_INT 0
18110: ST_TO_ADDR
// sRadar := false ;
18111: LD_ADDR_EXP 46
18115: PUSH
18116: LD_INT 0
18118: ST_TO_ADDR
// sBunker := false ;
18119: LD_ADDR_EXP 47
18123: PUSH
18124: LD_INT 0
18126: ST_TO_ADDR
// sHack := false ;
18127: LD_ADDR_EXP 48
18131: PUSH
18132: LD_INT 0
18134: ST_TO_ADDR
// sFire := false ;
18135: LD_ADDR_EXP 49
18139: PUSH
18140: LD_INT 0
18142: ST_TO_ADDR
// sRefresh := false ;
18143: LD_ADDR_EXP 50
18147: PUSH
18148: LD_INT 0
18150: ST_TO_ADDR
// sExp := false ;
18151: LD_ADDR_EXP 51
18155: PUSH
18156: LD_INT 0
18158: ST_TO_ADDR
// sDepot := false ;
18159: LD_ADDR_EXP 52
18163: PUSH
18164: LD_INT 0
18166: ST_TO_ADDR
// sFlag := false ;
18167: LD_ADDR_EXP 53
18171: PUSH
18172: LD_INT 0
18174: ST_TO_ADDR
// sKamikadze := false ;
18175: LD_ADDR_EXP 61
18179: PUSH
18180: LD_INT 0
18182: ST_TO_ADDR
// sTroll := false ;
18183: LD_ADDR_EXP 62
18187: PUSH
18188: LD_INT 0
18190: ST_TO_ADDR
// sSlow := false ;
18191: LD_ADDR_EXP 63
18195: PUSH
18196: LD_INT 0
18198: ST_TO_ADDR
// sLack := false ;
18199: LD_ADDR_EXP 64
18203: PUSH
18204: LD_INT 0
18206: ST_TO_ADDR
// sTank := false ;
18207: LD_ADDR_EXP 66
18211: PUSH
18212: LD_INT 0
18214: ST_TO_ADDR
// sRemote := false ;
18215: LD_ADDR_EXP 67
18219: PUSH
18220: LD_INT 0
18222: ST_TO_ADDR
// sPowell := false ;
18223: LD_ADDR_EXP 68
18227: PUSH
18228: LD_INT 0
18230: ST_TO_ADDR
// sTeleport := false ;
18231: LD_ADDR_EXP 71
18235: PUSH
18236: LD_INT 0
18238: ST_TO_ADDR
// sOilTower := false ;
18239: LD_ADDR_EXP 73
18243: PUSH
18244: LD_INT 0
18246: ST_TO_ADDR
// sShovel := false ;
18247: LD_ADDR_EXP 74
18251: PUSH
18252: LD_INT 0
18254: ST_TO_ADDR
// sSheik := false ;
18255: LD_ADDR_EXP 75
18259: PUSH
18260: LD_INT 0
18262: ST_TO_ADDR
// sEarthquake := false ;
18263: LD_ADDR_EXP 77
18267: PUSH
18268: LD_INT 0
18270: ST_TO_ADDR
// sAI := false ;
18271: LD_ADDR_EXP 78
18275: PUSH
18276: LD_INT 0
18278: ST_TO_ADDR
// sCargo := false ;
18279: LD_ADDR_EXP 81
18283: PUSH
18284: LD_INT 0
18286: ST_TO_ADDR
// sDLaser := false ;
18287: LD_ADDR_EXP 82
18291: PUSH
18292: LD_INT 0
18294: ST_TO_ADDR
// sExchange := false ;
18295: LD_ADDR_EXP 83
18299: PUSH
18300: LD_INT 0
18302: ST_TO_ADDR
// sFac := false ;
18303: LD_ADDR_EXP 84
18307: PUSH
18308: LD_INT 0
18310: ST_TO_ADDR
// sPower := false ;
18311: LD_ADDR_EXP 85
18315: PUSH
18316: LD_INT 0
18318: ST_TO_ADDR
// sRandom := false ;
18319: LD_ADDR_EXP 86
18323: PUSH
18324: LD_INT 0
18326: ST_TO_ADDR
// sShield := false ;
18327: LD_ADDR_EXP 87
18331: PUSH
18332: LD_INT 0
18334: ST_TO_ADDR
// sTime := false ;
18335: LD_ADDR_EXP 88
18339: PUSH
18340: LD_INT 0
18342: ST_TO_ADDR
// sTools := false ;
18343: LD_ADDR_EXP 89
18347: PUSH
18348: LD_INT 0
18350: ST_TO_ADDR
// sSold := false ;
18351: LD_ADDR_EXP 54
18355: PUSH
18356: LD_INT 0
18358: ST_TO_ADDR
// sDiff := false ;
18359: LD_ADDR_EXP 55
18363: PUSH
18364: LD_INT 0
18366: ST_TO_ADDR
// sFog := false ;
18367: LD_ADDR_EXP 58
18371: PUSH
18372: LD_INT 0
18374: ST_TO_ADDR
// sReset := false ;
18375: LD_ADDR_EXP 59
18379: PUSH
18380: LD_INT 0
18382: ST_TO_ADDR
// sSun := false ;
18383: LD_ADDR_EXP 60
18387: PUSH
18388: LD_INT 0
18390: ST_TO_ADDR
// sTiger := false ;
18391: LD_ADDR_EXP 56
18395: PUSH
18396: LD_INT 0
18398: ST_TO_ADDR
// sBomb := false ;
18399: LD_ADDR_EXP 57
18403: PUSH
18404: LD_INT 0
18406: ST_TO_ADDR
// sWound := false ;
18407: LD_ADDR_EXP 65
18411: PUSH
18412: LD_INT 0
18414: ST_TO_ADDR
// sBetray := false ;
18415: LD_ADDR_EXP 69
18419: PUSH
18420: LD_INT 0
18422: ST_TO_ADDR
// sContamin := false ;
18423: LD_ADDR_EXP 70
18427: PUSH
18428: LD_INT 0
18430: ST_TO_ADDR
// sOil := false ;
18431: LD_ADDR_EXP 72
18435: PUSH
18436: LD_INT 0
18438: ST_TO_ADDR
// sStu := false ;
18439: LD_ADDR_EXP 76
18443: PUSH
18444: LD_INT 0
18446: ST_TO_ADDR
// sBazooka := false ;
18447: LD_ADDR_EXP 79
18451: PUSH
18452: LD_INT 0
18454: ST_TO_ADDR
// sMortar := false ;
18455: LD_ADDR_EXP 80
18459: PUSH
18460: LD_INT 0
18462: ST_TO_ADDR
// sRanger := false ;
18463: LD_ADDR_EXP 90
18467: PUSH
18468: LD_INT 0
18470: ST_TO_ADDR
// sComputer := false ;
18471: LD_ADDR_EXP 91
18475: PUSH
18476: LD_INT 0
18478: ST_TO_ADDR
// s30 := false ;
18479: LD_ADDR_EXP 92
18483: PUSH
18484: LD_INT 0
18486: ST_TO_ADDR
// s60 := false ;
18487: LD_ADDR_EXP 93
18491: PUSH
18492: LD_INT 0
18494: ST_TO_ADDR
// end ;
18495: LD_VAR 0 1
18499: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18500: LD_INT 0
18502: PPUSH
18503: PPUSH
18504: PPUSH
18505: PPUSH
18506: PPUSH
18507: PPUSH
18508: PPUSH
// result := [ ] ;
18509: LD_ADDR_VAR 0 2
18513: PUSH
18514: EMPTY
18515: ST_TO_ADDR
// if campaign_id = 1 then
18516: LD_OWVAR 69
18520: PUSH
18521: LD_INT 1
18523: EQUAL
18524: IFFALSE 21690
// begin case mission_number of 1 :
18526: LD_OWVAR 70
18530: PUSH
18531: LD_INT 1
18533: DOUBLE
18534: EQUAL
18535: IFTRUE 18539
18537: GO 18615
18539: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18540: LD_ADDR_VAR 0 2
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: LD_INT 4
18550: PUSH
18551: LD_INT 11
18553: PUSH
18554: LD_INT 12
18556: PUSH
18557: LD_INT 15
18559: PUSH
18560: LD_INT 16
18562: PUSH
18563: LD_INT 22
18565: PUSH
18566: LD_INT 23
18568: PUSH
18569: LD_INT 26
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 101
18585: PUSH
18586: LD_INT 102
18588: PUSH
18589: LD_INT 106
18591: PUSH
18592: LD_INT 116
18594: PUSH
18595: LD_INT 117
18597: PUSH
18598: LD_INT 118
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: ST_TO_ADDR
18613: GO 21688
18615: LD_INT 2
18617: DOUBLE
18618: EQUAL
18619: IFTRUE 18623
18621: GO 18707
18623: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18624: LD_ADDR_VAR 0 2
18628: PUSH
18629: LD_INT 2
18631: PUSH
18632: LD_INT 4
18634: PUSH
18635: LD_INT 11
18637: PUSH
18638: LD_INT 12
18640: PUSH
18641: LD_INT 15
18643: PUSH
18644: LD_INT 16
18646: PUSH
18647: LD_INT 22
18649: PUSH
18650: LD_INT 23
18652: PUSH
18653: LD_INT 26
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 101
18669: PUSH
18670: LD_INT 102
18672: PUSH
18673: LD_INT 105
18675: PUSH
18676: LD_INT 106
18678: PUSH
18679: LD_INT 108
18681: PUSH
18682: LD_INT 116
18684: PUSH
18685: LD_INT 117
18687: PUSH
18688: LD_INT 118
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: ST_TO_ADDR
18705: GO 21688
18707: LD_INT 3
18709: DOUBLE
18710: EQUAL
18711: IFTRUE 18715
18713: GO 18803
18715: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18716: LD_ADDR_VAR 0 2
18720: PUSH
18721: LD_INT 2
18723: PUSH
18724: LD_INT 4
18726: PUSH
18727: LD_INT 5
18729: PUSH
18730: LD_INT 11
18732: PUSH
18733: LD_INT 12
18735: PUSH
18736: LD_INT 15
18738: PUSH
18739: LD_INT 16
18741: PUSH
18742: LD_INT 22
18744: PUSH
18745: LD_INT 26
18747: PUSH
18748: LD_INT 36
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 101
18765: PUSH
18766: LD_INT 102
18768: PUSH
18769: LD_INT 105
18771: PUSH
18772: LD_INT 106
18774: PUSH
18775: LD_INT 108
18777: PUSH
18778: LD_INT 116
18780: PUSH
18781: LD_INT 117
18783: PUSH
18784: LD_INT 118
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: ST_TO_ADDR
18801: GO 21688
18803: LD_INT 4
18805: DOUBLE
18806: EQUAL
18807: IFTRUE 18811
18809: GO 18907
18811: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18812: LD_ADDR_VAR 0 2
18816: PUSH
18817: LD_INT 2
18819: PUSH
18820: LD_INT 4
18822: PUSH
18823: LD_INT 5
18825: PUSH
18826: LD_INT 8
18828: PUSH
18829: LD_INT 11
18831: PUSH
18832: LD_INT 12
18834: PUSH
18835: LD_INT 15
18837: PUSH
18838: LD_INT 16
18840: PUSH
18841: LD_INT 22
18843: PUSH
18844: LD_INT 23
18846: PUSH
18847: LD_INT 26
18849: PUSH
18850: LD_INT 36
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 101
18869: PUSH
18870: LD_INT 102
18872: PUSH
18873: LD_INT 105
18875: PUSH
18876: LD_INT 106
18878: PUSH
18879: LD_INT 108
18881: PUSH
18882: LD_INT 116
18884: PUSH
18885: LD_INT 117
18887: PUSH
18888: LD_INT 118
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: ST_TO_ADDR
18905: GO 21688
18907: LD_INT 5
18909: DOUBLE
18910: EQUAL
18911: IFTRUE 18915
18913: GO 19027
18915: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18916: LD_ADDR_VAR 0 2
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: LD_INT 4
18926: PUSH
18927: LD_INT 5
18929: PUSH
18930: LD_INT 6
18932: PUSH
18933: LD_INT 8
18935: PUSH
18936: LD_INT 11
18938: PUSH
18939: LD_INT 12
18941: PUSH
18942: LD_INT 15
18944: PUSH
18945: LD_INT 16
18947: PUSH
18948: LD_INT 22
18950: PUSH
18951: LD_INT 23
18953: PUSH
18954: LD_INT 25
18956: PUSH
18957: LD_INT 26
18959: PUSH
18960: LD_INT 36
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 101
18981: PUSH
18982: LD_INT 102
18984: PUSH
18985: LD_INT 105
18987: PUSH
18988: LD_INT 106
18990: PUSH
18991: LD_INT 108
18993: PUSH
18994: LD_INT 109
18996: PUSH
18997: LD_INT 112
18999: PUSH
19000: LD_INT 116
19002: PUSH
19003: LD_INT 117
19005: PUSH
19006: LD_INT 118
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: ST_TO_ADDR
19025: GO 21688
19027: LD_INT 6
19029: DOUBLE
19030: EQUAL
19031: IFTRUE 19035
19033: GO 19167
19035: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19036: LD_ADDR_VAR 0 2
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: LD_INT 4
19046: PUSH
19047: LD_INT 5
19049: PUSH
19050: LD_INT 6
19052: PUSH
19053: LD_INT 8
19055: PUSH
19056: LD_INT 11
19058: PUSH
19059: LD_INT 12
19061: PUSH
19062: LD_INT 15
19064: PUSH
19065: LD_INT 16
19067: PUSH
19068: LD_INT 20
19070: PUSH
19071: LD_INT 21
19073: PUSH
19074: LD_INT 22
19076: PUSH
19077: LD_INT 23
19079: PUSH
19080: LD_INT 25
19082: PUSH
19083: LD_INT 26
19085: PUSH
19086: LD_INT 30
19088: PUSH
19089: LD_INT 31
19091: PUSH
19092: LD_INT 32
19094: PUSH
19095: LD_INT 36
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 101
19121: PUSH
19122: LD_INT 102
19124: PUSH
19125: LD_INT 105
19127: PUSH
19128: LD_INT 106
19130: PUSH
19131: LD_INT 108
19133: PUSH
19134: LD_INT 109
19136: PUSH
19137: LD_INT 112
19139: PUSH
19140: LD_INT 116
19142: PUSH
19143: LD_INT 117
19145: PUSH
19146: LD_INT 118
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: ST_TO_ADDR
19165: GO 21688
19167: LD_INT 7
19169: DOUBLE
19170: EQUAL
19171: IFTRUE 19175
19173: GO 19287
19175: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19176: LD_ADDR_VAR 0 2
19180: PUSH
19181: LD_INT 2
19183: PUSH
19184: LD_INT 4
19186: PUSH
19187: LD_INT 5
19189: PUSH
19190: LD_INT 7
19192: PUSH
19193: LD_INT 11
19195: PUSH
19196: LD_INT 12
19198: PUSH
19199: LD_INT 15
19201: PUSH
19202: LD_INT 16
19204: PUSH
19205: LD_INT 20
19207: PUSH
19208: LD_INT 21
19210: PUSH
19211: LD_INT 22
19213: PUSH
19214: LD_INT 23
19216: PUSH
19217: LD_INT 25
19219: PUSH
19220: LD_INT 26
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 101
19241: PUSH
19242: LD_INT 102
19244: PUSH
19245: LD_INT 103
19247: PUSH
19248: LD_INT 105
19250: PUSH
19251: LD_INT 106
19253: PUSH
19254: LD_INT 108
19256: PUSH
19257: LD_INT 112
19259: PUSH
19260: LD_INT 116
19262: PUSH
19263: LD_INT 117
19265: PUSH
19266: LD_INT 118
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: ST_TO_ADDR
19285: GO 21688
19287: LD_INT 8
19289: DOUBLE
19290: EQUAL
19291: IFTRUE 19295
19293: GO 19435
19295: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19296: LD_ADDR_VAR 0 2
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: LD_INT 4
19306: PUSH
19307: LD_INT 5
19309: PUSH
19310: LD_INT 6
19312: PUSH
19313: LD_INT 7
19315: PUSH
19316: LD_INT 8
19318: PUSH
19319: LD_INT 11
19321: PUSH
19322: LD_INT 12
19324: PUSH
19325: LD_INT 15
19327: PUSH
19328: LD_INT 16
19330: PUSH
19331: LD_INT 20
19333: PUSH
19334: LD_INT 21
19336: PUSH
19337: LD_INT 22
19339: PUSH
19340: LD_INT 23
19342: PUSH
19343: LD_INT 25
19345: PUSH
19346: LD_INT 26
19348: PUSH
19349: LD_INT 30
19351: PUSH
19352: LD_INT 31
19354: PUSH
19355: LD_INT 32
19357: PUSH
19358: LD_INT 36
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 101
19385: PUSH
19386: LD_INT 102
19388: PUSH
19389: LD_INT 103
19391: PUSH
19392: LD_INT 105
19394: PUSH
19395: LD_INT 106
19397: PUSH
19398: LD_INT 108
19400: PUSH
19401: LD_INT 109
19403: PUSH
19404: LD_INT 112
19406: PUSH
19407: LD_INT 116
19409: PUSH
19410: LD_INT 117
19412: PUSH
19413: LD_INT 118
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: ST_TO_ADDR
19433: GO 21688
19435: LD_INT 9
19437: DOUBLE
19438: EQUAL
19439: IFTRUE 19443
19441: GO 19591
19443: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19444: LD_ADDR_VAR 0 2
19448: PUSH
19449: LD_INT 2
19451: PUSH
19452: LD_INT 4
19454: PUSH
19455: LD_INT 5
19457: PUSH
19458: LD_INT 6
19460: PUSH
19461: LD_INT 7
19463: PUSH
19464: LD_INT 8
19466: PUSH
19467: LD_INT 11
19469: PUSH
19470: LD_INT 12
19472: PUSH
19473: LD_INT 15
19475: PUSH
19476: LD_INT 16
19478: PUSH
19479: LD_INT 20
19481: PUSH
19482: LD_INT 21
19484: PUSH
19485: LD_INT 22
19487: PUSH
19488: LD_INT 23
19490: PUSH
19491: LD_INT 25
19493: PUSH
19494: LD_INT 26
19496: PUSH
19497: LD_INT 28
19499: PUSH
19500: LD_INT 30
19502: PUSH
19503: LD_INT 31
19505: PUSH
19506: LD_INT 32
19508: PUSH
19509: LD_INT 36
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 101
19537: PUSH
19538: LD_INT 102
19540: PUSH
19541: LD_INT 103
19543: PUSH
19544: LD_INT 105
19546: PUSH
19547: LD_INT 106
19549: PUSH
19550: LD_INT 108
19552: PUSH
19553: LD_INT 109
19555: PUSH
19556: LD_INT 112
19558: PUSH
19559: LD_INT 114
19561: PUSH
19562: LD_INT 116
19564: PUSH
19565: LD_INT 117
19567: PUSH
19568: LD_INT 118
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: ST_TO_ADDR
19589: GO 21688
19591: LD_INT 10
19593: DOUBLE
19594: EQUAL
19595: IFTRUE 19599
19597: GO 19795
19599: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19600: LD_ADDR_VAR 0 2
19604: PUSH
19605: LD_INT 2
19607: PUSH
19608: LD_INT 4
19610: PUSH
19611: LD_INT 5
19613: PUSH
19614: LD_INT 6
19616: PUSH
19617: LD_INT 7
19619: PUSH
19620: LD_INT 8
19622: PUSH
19623: LD_INT 9
19625: PUSH
19626: LD_INT 10
19628: PUSH
19629: LD_INT 11
19631: PUSH
19632: LD_INT 12
19634: PUSH
19635: LD_INT 13
19637: PUSH
19638: LD_INT 14
19640: PUSH
19641: LD_INT 15
19643: PUSH
19644: LD_INT 16
19646: PUSH
19647: LD_INT 17
19649: PUSH
19650: LD_INT 18
19652: PUSH
19653: LD_INT 19
19655: PUSH
19656: LD_INT 20
19658: PUSH
19659: LD_INT 21
19661: PUSH
19662: LD_INT 22
19664: PUSH
19665: LD_INT 23
19667: PUSH
19668: LD_INT 24
19670: PUSH
19671: LD_INT 25
19673: PUSH
19674: LD_INT 26
19676: PUSH
19677: LD_INT 28
19679: PUSH
19680: LD_INT 30
19682: PUSH
19683: LD_INT 31
19685: PUSH
19686: LD_INT 32
19688: PUSH
19689: LD_INT 36
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 101
19725: PUSH
19726: LD_INT 102
19728: PUSH
19729: LD_INT 103
19731: PUSH
19732: LD_INT 104
19734: PUSH
19735: LD_INT 105
19737: PUSH
19738: LD_INT 106
19740: PUSH
19741: LD_INT 107
19743: PUSH
19744: LD_INT 108
19746: PUSH
19747: LD_INT 109
19749: PUSH
19750: LD_INT 110
19752: PUSH
19753: LD_INT 111
19755: PUSH
19756: LD_INT 112
19758: PUSH
19759: LD_INT 114
19761: PUSH
19762: LD_INT 116
19764: PUSH
19765: LD_INT 117
19767: PUSH
19768: LD_INT 118
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: ST_TO_ADDR
19793: GO 21688
19795: LD_INT 11
19797: DOUBLE
19798: EQUAL
19799: IFTRUE 19803
19801: GO 20007
19803: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19804: LD_ADDR_VAR 0 2
19808: PUSH
19809: LD_INT 2
19811: PUSH
19812: LD_INT 3
19814: PUSH
19815: LD_INT 4
19817: PUSH
19818: LD_INT 5
19820: PUSH
19821: LD_INT 6
19823: PUSH
19824: LD_INT 7
19826: PUSH
19827: LD_INT 8
19829: PUSH
19830: LD_INT 9
19832: PUSH
19833: LD_INT 10
19835: PUSH
19836: LD_INT 11
19838: PUSH
19839: LD_INT 12
19841: PUSH
19842: LD_INT 13
19844: PUSH
19845: LD_INT 14
19847: PUSH
19848: LD_INT 15
19850: PUSH
19851: LD_INT 16
19853: PUSH
19854: LD_INT 17
19856: PUSH
19857: LD_INT 18
19859: PUSH
19860: LD_INT 19
19862: PUSH
19863: LD_INT 20
19865: PUSH
19866: LD_INT 21
19868: PUSH
19869: LD_INT 22
19871: PUSH
19872: LD_INT 23
19874: PUSH
19875: LD_INT 24
19877: PUSH
19878: LD_INT 25
19880: PUSH
19881: LD_INT 26
19883: PUSH
19884: LD_INT 28
19886: PUSH
19887: LD_INT 30
19889: PUSH
19890: LD_INT 31
19892: PUSH
19893: LD_INT 32
19895: PUSH
19896: LD_INT 34
19898: PUSH
19899: LD_INT 36
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 101
19937: PUSH
19938: LD_INT 102
19940: PUSH
19941: LD_INT 103
19943: PUSH
19944: LD_INT 104
19946: PUSH
19947: LD_INT 105
19949: PUSH
19950: LD_INT 106
19952: PUSH
19953: LD_INT 107
19955: PUSH
19956: LD_INT 108
19958: PUSH
19959: LD_INT 109
19961: PUSH
19962: LD_INT 110
19964: PUSH
19965: LD_INT 111
19967: PUSH
19968: LD_INT 112
19970: PUSH
19971: LD_INT 114
19973: PUSH
19974: LD_INT 116
19976: PUSH
19977: LD_INT 117
19979: PUSH
19980: LD_INT 118
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: ST_TO_ADDR
20005: GO 21688
20007: LD_INT 12
20009: DOUBLE
20010: EQUAL
20011: IFTRUE 20015
20013: GO 20235
20015: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20016: LD_ADDR_VAR 0 2
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: LD_INT 2
20026: PUSH
20027: LD_INT 3
20029: PUSH
20030: LD_INT 4
20032: PUSH
20033: LD_INT 5
20035: PUSH
20036: LD_INT 6
20038: PUSH
20039: LD_INT 7
20041: PUSH
20042: LD_INT 8
20044: PUSH
20045: LD_INT 9
20047: PUSH
20048: LD_INT 10
20050: PUSH
20051: LD_INT 11
20053: PUSH
20054: LD_INT 12
20056: PUSH
20057: LD_INT 13
20059: PUSH
20060: LD_INT 14
20062: PUSH
20063: LD_INT 15
20065: PUSH
20066: LD_INT 16
20068: PUSH
20069: LD_INT 17
20071: PUSH
20072: LD_INT 18
20074: PUSH
20075: LD_INT 19
20077: PUSH
20078: LD_INT 20
20080: PUSH
20081: LD_INT 21
20083: PUSH
20084: LD_INT 22
20086: PUSH
20087: LD_INT 23
20089: PUSH
20090: LD_INT 24
20092: PUSH
20093: LD_INT 25
20095: PUSH
20096: LD_INT 26
20098: PUSH
20099: LD_INT 27
20101: PUSH
20102: LD_INT 28
20104: PUSH
20105: LD_INT 30
20107: PUSH
20108: LD_INT 31
20110: PUSH
20111: LD_INT 32
20113: PUSH
20114: LD_INT 33
20116: PUSH
20117: LD_INT 34
20119: PUSH
20120: LD_INT 36
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 101
20161: PUSH
20162: LD_INT 102
20164: PUSH
20165: LD_INT 103
20167: PUSH
20168: LD_INT 104
20170: PUSH
20171: LD_INT 105
20173: PUSH
20174: LD_INT 106
20176: PUSH
20177: LD_INT 107
20179: PUSH
20180: LD_INT 108
20182: PUSH
20183: LD_INT 109
20185: PUSH
20186: LD_INT 110
20188: PUSH
20189: LD_INT 111
20191: PUSH
20192: LD_INT 112
20194: PUSH
20195: LD_INT 113
20197: PUSH
20198: LD_INT 114
20200: PUSH
20201: LD_INT 116
20203: PUSH
20204: LD_INT 117
20206: PUSH
20207: LD_INT 118
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: ST_TO_ADDR
20233: GO 21688
20235: LD_INT 13
20237: DOUBLE
20238: EQUAL
20239: IFTRUE 20243
20241: GO 20451
20243: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20244: LD_ADDR_VAR 0 2
20248: PUSH
20249: LD_INT 1
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: LD_INT 3
20257: PUSH
20258: LD_INT 4
20260: PUSH
20261: LD_INT 5
20263: PUSH
20264: LD_INT 8
20266: PUSH
20267: LD_INT 9
20269: PUSH
20270: LD_INT 10
20272: PUSH
20273: LD_INT 11
20275: PUSH
20276: LD_INT 12
20278: PUSH
20279: LD_INT 14
20281: PUSH
20282: LD_INT 15
20284: PUSH
20285: LD_INT 16
20287: PUSH
20288: LD_INT 17
20290: PUSH
20291: LD_INT 18
20293: PUSH
20294: LD_INT 19
20296: PUSH
20297: LD_INT 20
20299: PUSH
20300: LD_INT 21
20302: PUSH
20303: LD_INT 22
20305: PUSH
20306: LD_INT 23
20308: PUSH
20309: LD_INT 24
20311: PUSH
20312: LD_INT 25
20314: PUSH
20315: LD_INT 26
20317: PUSH
20318: LD_INT 27
20320: PUSH
20321: LD_INT 28
20323: PUSH
20324: LD_INT 30
20326: PUSH
20327: LD_INT 31
20329: PUSH
20330: LD_INT 32
20332: PUSH
20333: LD_INT 33
20335: PUSH
20336: LD_INT 34
20338: PUSH
20339: LD_INT 36
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 101
20377: PUSH
20378: LD_INT 102
20380: PUSH
20381: LD_INT 103
20383: PUSH
20384: LD_INT 104
20386: PUSH
20387: LD_INT 105
20389: PUSH
20390: LD_INT 106
20392: PUSH
20393: LD_INT 107
20395: PUSH
20396: LD_INT 108
20398: PUSH
20399: LD_INT 109
20401: PUSH
20402: LD_INT 110
20404: PUSH
20405: LD_INT 111
20407: PUSH
20408: LD_INT 112
20410: PUSH
20411: LD_INT 113
20413: PUSH
20414: LD_INT 114
20416: PUSH
20417: LD_INT 116
20419: PUSH
20420: LD_INT 117
20422: PUSH
20423: LD_INT 118
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: ST_TO_ADDR
20449: GO 21688
20451: LD_INT 14
20453: DOUBLE
20454: EQUAL
20455: IFTRUE 20459
20457: GO 20683
20459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20460: LD_ADDR_VAR 0 2
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: LD_INT 2
20470: PUSH
20471: LD_INT 3
20473: PUSH
20474: LD_INT 4
20476: PUSH
20477: LD_INT 5
20479: PUSH
20480: LD_INT 6
20482: PUSH
20483: LD_INT 7
20485: PUSH
20486: LD_INT 8
20488: PUSH
20489: LD_INT 9
20491: PUSH
20492: LD_INT 10
20494: PUSH
20495: LD_INT 11
20497: PUSH
20498: LD_INT 12
20500: PUSH
20501: LD_INT 13
20503: PUSH
20504: LD_INT 14
20506: PUSH
20507: LD_INT 15
20509: PUSH
20510: LD_INT 16
20512: PUSH
20513: LD_INT 17
20515: PUSH
20516: LD_INT 18
20518: PUSH
20519: LD_INT 19
20521: PUSH
20522: LD_INT 20
20524: PUSH
20525: LD_INT 21
20527: PUSH
20528: LD_INT 22
20530: PUSH
20531: LD_INT 23
20533: PUSH
20534: LD_INT 24
20536: PUSH
20537: LD_INT 25
20539: PUSH
20540: LD_INT 26
20542: PUSH
20543: LD_INT 27
20545: PUSH
20546: LD_INT 28
20548: PUSH
20549: LD_INT 29
20551: PUSH
20552: LD_INT 30
20554: PUSH
20555: LD_INT 31
20557: PUSH
20558: LD_INT 32
20560: PUSH
20561: LD_INT 33
20563: PUSH
20564: LD_INT 34
20566: PUSH
20567: LD_INT 36
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 101
20609: PUSH
20610: LD_INT 102
20612: PUSH
20613: LD_INT 103
20615: PUSH
20616: LD_INT 104
20618: PUSH
20619: LD_INT 105
20621: PUSH
20622: LD_INT 106
20624: PUSH
20625: LD_INT 107
20627: PUSH
20628: LD_INT 108
20630: PUSH
20631: LD_INT 109
20633: PUSH
20634: LD_INT 110
20636: PUSH
20637: LD_INT 111
20639: PUSH
20640: LD_INT 112
20642: PUSH
20643: LD_INT 113
20645: PUSH
20646: LD_INT 114
20648: PUSH
20649: LD_INT 116
20651: PUSH
20652: LD_INT 117
20654: PUSH
20655: LD_INT 118
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: ST_TO_ADDR
20681: GO 21688
20683: LD_INT 15
20685: DOUBLE
20686: EQUAL
20687: IFTRUE 20691
20689: GO 20915
20691: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20692: LD_ADDR_VAR 0 2
20696: PUSH
20697: LD_INT 1
20699: PUSH
20700: LD_INT 2
20702: PUSH
20703: LD_INT 3
20705: PUSH
20706: LD_INT 4
20708: PUSH
20709: LD_INT 5
20711: PUSH
20712: LD_INT 6
20714: PUSH
20715: LD_INT 7
20717: PUSH
20718: LD_INT 8
20720: PUSH
20721: LD_INT 9
20723: PUSH
20724: LD_INT 10
20726: PUSH
20727: LD_INT 11
20729: PUSH
20730: LD_INT 12
20732: PUSH
20733: LD_INT 13
20735: PUSH
20736: LD_INT 14
20738: PUSH
20739: LD_INT 15
20741: PUSH
20742: LD_INT 16
20744: PUSH
20745: LD_INT 17
20747: PUSH
20748: LD_INT 18
20750: PUSH
20751: LD_INT 19
20753: PUSH
20754: LD_INT 20
20756: PUSH
20757: LD_INT 21
20759: PUSH
20760: LD_INT 22
20762: PUSH
20763: LD_INT 23
20765: PUSH
20766: LD_INT 24
20768: PUSH
20769: LD_INT 25
20771: PUSH
20772: LD_INT 26
20774: PUSH
20775: LD_INT 27
20777: PUSH
20778: LD_INT 28
20780: PUSH
20781: LD_INT 29
20783: PUSH
20784: LD_INT 30
20786: PUSH
20787: LD_INT 31
20789: PUSH
20790: LD_INT 32
20792: PUSH
20793: LD_INT 33
20795: PUSH
20796: LD_INT 34
20798: PUSH
20799: LD_INT 36
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 101
20841: PUSH
20842: LD_INT 102
20844: PUSH
20845: LD_INT 103
20847: PUSH
20848: LD_INT 104
20850: PUSH
20851: LD_INT 105
20853: PUSH
20854: LD_INT 106
20856: PUSH
20857: LD_INT 107
20859: PUSH
20860: LD_INT 108
20862: PUSH
20863: LD_INT 109
20865: PUSH
20866: LD_INT 110
20868: PUSH
20869: LD_INT 111
20871: PUSH
20872: LD_INT 112
20874: PUSH
20875: LD_INT 113
20877: PUSH
20878: LD_INT 114
20880: PUSH
20881: LD_INT 116
20883: PUSH
20884: LD_INT 117
20886: PUSH
20887: LD_INT 118
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: ST_TO_ADDR
20913: GO 21688
20915: LD_INT 16
20917: DOUBLE
20918: EQUAL
20919: IFTRUE 20923
20921: GO 21059
20923: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20924: LD_ADDR_VAR 0 2
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: LD_INT 4
20934: PUSH
20935: LD_INT 5
20937: PUSH
20938: LD_INT 7
20940: PUSH
20941: LD_INT 11
20943: PUSH
20944: LD_INT 12
20946: PUSH
20947: LD_INT 15
20949: PUSH
20950: LD_INT 16
20952: PUSH
20953: LD_INT 20
20955: PUSH
20956: LD_INT 21
20958: PUSH
20959: LD_INT 22
20961: PUSH
20962: LD_INT 23
20964: PUSH
20965: LD_INT 25
20967: PUSH
20968: LD_INT 26
20970: PUSH
20971: LD_INT 30
20973: PUSH
20974: LD_INT 31
20976: PUSH
20977: LD_INT 32
20979: PUSH
20980: LD_INT 33
20982: PUSH
20983: LD_INT 34
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 101
21009: PUSH
21010: LD_INT 102
21012: PUSH
21013: LD_INT 103
21015: PUSH
21016: LD_INT 106
21018: PUSH
21019: LD_INT 108
21021: PUSH
21022: LD_INT 112
21024: PUSH
21025: LD_INT 113
21027: PUSH
21028: LD_INT 114
21030: PUSH
21031: LD_INT 116
21033: PUSH
21034: LD_INT 117
21036: PUSH
21037: LD_INT 118
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: ST_TO_ADDR
21057: GO 21688
21059: LD_INT 17
21061: DOUBLE
21062: EQUAL
21063: IFTRUE 21067
21065: GO 21291
21067: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21068: LD_ADDR_VAR 0 2
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: LD_INT 2
21078: PUSH
21079: LD_INT 3
21081: PUSH
21082: LD_INT 4
21084: PUSH
21085: LD_INT 5
21087: PUSH
21088: LD_INT 6
21090: PUSH
21091: LD_INT 7
21093: PUSH
21094: LD_INT 8
21096: PUSH
21097: LD_INT 9
21099: PUSH
21100: LD_INT 10
21102: PUSH
21103: LD_INT 11
21105: PUSH
21106: LD_INT 12
21108: PUSH
21109: LD_INT 13
21111: PUSH
21112: LD_INT 14
21114: PUSH
21115: LD_INT 15
21117: PUSH
21118: LD_INT 16
21120: PUSH
21121: LD_INT 17
21123: PUSH
21124: LD_INT 18
21126: PUSH
21127: LD_INT 19
21129: PUSH
21130: LD_INT 20
21132: PUSH
21133: LD_INT 21
21135: PUSH
21136: LD_INT 22
21138: PUSH
21139: LD_INT 23
21141: PUSH
21142: LD_INT 24
21144: PUSH
21145: LD_INT 25
21147: PUSH
21148: LD_INT 26
21150: PUSH
21151: LD_INT 27
21153: PUSH
21154: LD_INT 28
21156: PUSH
21157: LD_INT 29
21159: PUSH
21160: LD_INT 30
21162: PUSH
21163: LD_INT 31
21165: PUSH
21166: LD_INT 32
21168: PUSH
21169: LD_INT 33
21171: PUSH
21172: LD_INT 34
21174: PUSH
21175: LD_INT 36
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 101
21217: PUSH
21218: LD_INT 102
21220: PUSH
21221: LD_INT 103
21223: PUSH
21224: LD_INT 104
21226: PUSH
21227: LD_INT 105
21229: PUSH
21230: LD_INT 106
21232: PUSH
21233: LD_INT 107
21235: PUSH
21236: LD_INT 108
21238: PUSH
21239: LD_INT 109
21241: PUSH
21242: LD_INT 110
21244: PUSH
21245: LD_INT 111
21247: PUSH
21248: LD_INT 112
21250: PUSH
21251: LD_INT 113
21253: PUSH
21254: LD_INT 114
21256: PUSH
21257: LD_INT 116
21259: PUSH
21260: LD_INT 117
21262: PUSH
21263: LD_INT 118
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: ST_TO_ADDR
21289: GO 21688
21291: LD_INT 18
21293: DOUBLE
21294: EQUAL
21295: IFTRUE 21299
21297: GO 21447
21299: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21300: LD_ADDR_VAR 0 2
21304: PUSH
21305: LD_INT 2
21307: PUSH
21308: LD_INT 4
21310: PUSH
21311: LD_INT 5
21313: PUSH
21314: LD_INT 7
21316: PUSH
21317: LD_INT 11
21319: PUSH
21320: LD_INT 12
21322: PUSH
21323: LD_INT 15
21325: PUSH
21326: LD_INT 16
21328: PUSH
21329: LD_INT 20
21331: PUSH
21332: LD_INT 21
21334: PUSH
21335: LD_INT 22
21337: PUSH
21338: LD_INT 23
21340: PUSH
21341: LD_INT 25
21343: PUSH
21344: LD_INT 26
21346: PUSH
21347: LD_INT 30
21349: PUSH
21350: LD_INT 31
21352: PUSH
21353: LD_INT 32
21355: PUSH
21356: LD_INT 33
21358: PUSH
21359: LD_INT 34
21361: PUSH
21362: LD_INT 35
21364: PUSH
21365: LD_INT 36
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 101
21393: PUSH
21394: LD_INT 102
21396: PUSH
21397: LD_INT 103
21399: PUSH
21400: LD_INT 106
21402: PUSH
21403: LD_INT 108
21405: PUSH
21406: LD_INT 112
21408: PUSH
21409: LD_INT 113
21411: PUSH
21412: LD_INT 114
21414: PUSH
21415: LD_INT 115
21417: PUSH
21418: LD_INT 116
21420: PUSH
21421: LD_INT 117
21423: PUSH
21424: LD_INT 118
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: ST_TO_ADDR
21445: GO 21688
21447: LD_INT 19
21449: DOUBLE
21450: EQUAL
21451: IFTRUE 21455
21453: GO 21687
21455: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21456: LD_ADDR_VAR 0 2
21460: PUSH
21461: LD_INT 1
21463: PUSH
21464: LD_INT 2
21466: PUSH
21467: LD_INT 3
21469: PUSH
21470: LD_INT 4
21472: PUSH
21473: LD_INT 5
21475: PUSH
21476: LD_INT 6
21478: PUSH
21479: LD_INT 7
21481: PUSH
21482: LD_INT 8
21484: PUSH
21485: LD_INT 9
21487: PUSH
21488: LD_INT 10
21490: PUSH
21491: LD_INT 11
21493: PUSH
21494: LD_INT 12
21496: PUSH
21497: LD_INT 13
21499: PUSH
21500: LD_INT 14
21502: PUSH
21503: LD_INT 15
21505: PUSH
21506: LD_INT 16
21508: PUSH
21509: LD_INT 17
21511: PUSH
21512: LD_INT 18
21514: PUSH
21515: LD_INT 19
21517: PUSH
21518: LD_INT 20
21520: PUSH
21521: LD_INT 21
21523: PUSH
21524: LD_INT 22
21526: PUSH
21527: LD_INT 23
21529: PUSH
21530: LD_INT 24
21532: PUSH
21533: LD_INT 25
21535: PUSH
21536: LD_INT 26
21538: PUSH
21539: LD_INT 27
21541: PUSH
21542: LD_INT 28
21544: PUSH
21545: LD_INT 29
21547: PUSH
21548: LD_INT 30
21550: PUSH
21551: LD_INT 31
21553: PUSH
21554: LD_INT 32
21556: PUSH
21557: LD_INT 33
21559: PUSH
21560: LD_INT 34
21562: PUSH
21563: LD_INT 35
21565: PUSH
21566: LD_INT 36
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 101
21609: PUSH
21610: LD_INT 102
21612: PUSH
21613: LD_INT 103
21615: PUSH
21616: LD_INT 104
21618: PUSH
21619: LD_INT 105
21621: PUSH
21622: LD_INT 106
21624: PUSH
21625: LD_INT 107
21627: PUSH
21628: LD_INT 108
21630: PUSH
21631: LD_INT 109
21633: PUSH
21634: LD_INT 110
21636: PUSH
21637: LD_INT 111
21639: PUSH
21640: LD_INT 112
21642: PUSH
21643: LD_INT 113
21645: PUSH
21646: LD_INT 114
21648: PUSH
21649: LD_INT 115
21651: PUSH
21652: LD_INT 116
21654: PUSH
21655: LD_INT 117
21657: PUSH
21658: LD_INT 118
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: ST_TO_ADDR
21685: GO 21688
21687: POP
// end else
21688: GO 21919
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21690: LD_ADDR_VAR 0 2
21694: PUSH
21695: LD_INT 1
21697: PUSH
21698: LD_INT 2
21700: PUSH
21701: LD_INT 3
21703: PUSH
21704: LD_INT 4
21706: PUSH
21707: LD_INT 5
21709: PUSH
21710: LD_INT 6
21712: PUSH
21713: LD_INT 7
21715: PUSH
21716: LD_INT 8
21718: PUSH
21719: LD_INT 9
21721: PUSH
21722: LD_INT 10
21724: PUSH
21725: LD_INT 11
21727: PUSH
21728: LD_INT 12
21730: PUSH
21731: LD_INT 13
21733: PUSH
21734: LD_INT 14
21736: PUSH
21737: LD_INT 15
21739: PUSH
21740: LD_INT 16
21742: PUSH
21743: LD_INT 17
21745: PUSH
21746: LD_INT 18
21748: PUSH
21749: LD_INT 19
21751: PUSH
21752: LD_INT 20
21754: PUSH
21755: LD_INT 21
21757: PUSH
21758: LD_INT 22
21760: PUSH
21761: LD_INT 23
21763: PUSH
21764: LD_INT 24
21766: PUSH
21767: LD_INT 25
21769: PUSH
21770: LD_INT 26
21772: PUSH
21773: LD_INT 27
21775: PUSH
21776: LD_INT 28
21778: PUSH
21779: LD_INT 29
21781: PUSH
21782: LD_INT 30
21784: PUSH
21785: LD_INT 31
21787: PUSH
21788: LD_INT 32
21790: PUSH
21791: LD_INT 33
21793: PUSH
21794: LD_INT 34
21796: PUSH
21797: LD_INT 35
21799: PUSH
21800: LD_INT 36
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 101
21843: PUSH
21844: LD_INT 102
21846: PUSH
21847: LD_INT 103
21849: PUSH
21850: LD_INT 104
21852: PUSH
21853: LD_INT 105
21855: PUSH
21856: LD_INT 106
21858: PUSH
21859: LD_INT 107
21861: PUSH
21862: LD_INT 108
21864: PUSH
21865: LD_INT 109
21867: PUSH
21868: LD_INT 110
21870: PUSH
21871: LD_INT 111
21873: PUSH
21874: LD_INT 112
21876: PUSH
21877: LD_INT 113
21879: PUSH
21880: LD_INT 114
21882: PUSH
21883: LD_INT 115
21885: PUSH
21886: LD_INT 116
21888: PUSH
21889: LD_INT 117
21891: PUSH
21892: LD_INT 118
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: ST_TO_ADDR
// if result then
21919: LD_VAR 0 2
21923: IFFALSE 22709
// begin normal :=  ;
21925: LD_ADDR_VAR 0 5
21929: PUSH
21930: LD_STRING 
21932: ST_TO_ADDR
// hardcore :=  ;
21933: LD_ADDR_VAR 0 6
21937: PUSH
21938: LD_STRING 
21940: ST_TO_ADDR
// active :=  ;
21941: LD_ADDR_VAR 0 7
21945: PUSH
21946: LD_STRING 
21948: ST_TO_ADDR
// for i = 1 to normalCounter do
21949: LD_ADDR_VAR 0 8
21953: PUSH
21954: DOUBLE
21955: LD_INT 1
21957: DEC
21958: ST_TO_ADDR
21959: LD_EXP 38
21963: PUSH
21964: FOR_TO
21965: IFFALSE 22066
// begin tmp := 0 ;
21967: LD_ADDR_VAR 0 3
21971: PUSH
21972: LD_STRING 0
21974: ST_TO_ADDR
// if result [ 1 ] then
21975: LD_VAR 0 2
21979: PUSH
21980: LD_INT 1
21982: ARRAY
21983: IFFALSE 22048
// if result [ 1 ] [ 1 ] = i then
21985: LD_VAR 0 2
21989: PUSH
21990: LD_INT 1
21992: ARRAY
21993: PUSH
21994: LD_INT 1
21996: ARRAY
21997: PUSH
21998: LD_VAR 0 8
22002: EQUAL
22003: IFFALSE 22048
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_VAR 0 2
22014: PPUSH
22015: LD_INT 1
22017: PPUSH
22018: LD_VAR 0 2
22022: PUSH
22023: LD_INT 1
22025: ARRAY
22026: PPUSH
22027: LD_INT 1
22029: PPUSH
22030: CALL_OW 3
22034: PPUSH
22035: CALL_OW 1
22039: ST_TO_ADDR
// tmp := 1 ;
22040: LD_ADDR_VAR 0 3
22044: PUSH
22045: LD_STRING 1
22047: ST_TO_ADDR
// end ; normal := normal & tmp ;
22048: LD_ADDR_VAR 0 5
22052: PUSH
22053: LD_VAR 0 5
22057: PUSH
22058: LD_VAR 0 3
22062: STR
22063: ST_TO_ADDR
// end ;
22064: GO 21964
22066: POP
22067: POP
// for i = 1 to hardcoreCounter do
22068: LD_ADDR_VAR 0 8
22072: PUSH
22073: DOUBLE
22074: LD_INT 1
22076: DEC
22077: ST_TO_ADDR
22078: LD_EXP 39
22082: PUSH
22083: FOR_TO
22084: IFFALSE 22189
// begin tmp := 0 ;
22086: LD_ADDR_VAR 0 3
22090: PUSH
22091: LD_STRING 0
22093: ST_TO_ADDR
// if result [ 2 ] then
22094: LD_VAR 0 2
22098: PUSH
22099: LD_INT 2
22101: ARRAY
22102: IFFALSE 22171
// if result [ 2 ] [ 1 ] = 100 + i then
22104: LD_VAR 0 2
22108: PUSH
22109: LD_INT 2
22111: ARRAY
22112: PUSH
22113: LD_INT 1
22115: ARRAY
22116: PUSH
22117: LD_INT 100
22119: PUSH
22120: LD_VAR 0 8
22124: PLUS
22125: EQUAL
22126: IFFALSE 22171
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22128: LD_ADDR_VAR 0 2
22132: PUSH
22133: LD_VAR 0 2
22137: PPUSH
22138: LD_INT 2
22140: PPUSH
22141: LD_VAR 0 2
22145: PUSH
22146: LD_INT 2
22148: ARRAY
22149: PPUSH
22150: LD_INT 1
22152: PPUSH
22153: CALL_OW 3
22157: PPUSH
22158: CALL_OW 1
22162: ST_TO_ADDR
// tmp := 1 ;
22163: LD_ADDR_VAR 0 3
22167: PUSH
22168: LD_STRING 1
22170: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22171: LD_ADDR_VAR 0 6
22175: PUSH
22176: LD_VAR 0 6
22180: PUSH
22181: LD_VAR 0 3
22185: STR
22186: ST_TO_ADDR
// end ;
22187: GO 22083
22189: POP
22190: POP
// if isGameLoad then
22191: LD_VAR 0 1
22195: IFFALSE 22670
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22197: LD_ADDR_VAR 0 4
22201: PUSH
22202: LD_EXP 42
22206: PUSH
22207: LD_EXP 41
22211: PUSH
22212: LD_EXP 43
22216: PUSH
22217: LD_EXP 40
22221: PUSH
22222: LD_EXP 44
22226: PUSH
22227: LD_EXP 45
22231: PUSH
22232: LD_EXP 46
22236: PUSH
22237: LD_EXP 47
22241: PUSH
22242: LD_EXP 48
22246: PUSH
22247: LD_EXP 49
22251: PUSH
22252: LD_EXP 50
22256: PUSH
22257: LD_EXP 51
22261: PUSH
22262: LD_EXP 52
22266: PUSH
22267: LD_EXP 53
22271: PUSH
22272: LD_EXP 61
22276: PUSH
22277: LD_EXP 62
22281: PUSH
22282: LD_EXP 63
22286: PUSH
22287: LD_EXP 64
22291: PUSH
22292: LD_EXP 66
22296: PUSH
22297: LD_EXP 67
22301: PUSH
22302: LD_EXP 68
22306: PUSH
22307: LD_EXP 71
22311: PUSH
22312: LD_EXP 73
22316: PUSH
22317: LD_EXP 74
22321: PUSH
22322: LD_EXP 75
22326: PUSH
22327: LD_EXP 77
22331: PUSH
22332: LD_EXP 78
22336: PUSH
22337: LD_EXP 81
22341: PUSH
22342: LD_EXP 82
22346: PUSH
22347: LD_EXP 83
22351: PUSH
22352: LD_EXP 84
22356: PUSH
22357: LD_EXP 85
22361: PUSH
22362: LD_EXP 86
22366: PUSH
22367: LD_EXP 87
22371: PUSH
22372: LD_EXP 88
22376: PUSH
22377: LD_EXP 89
22381: PUSH
22382: LD_EXP 54
22386: PUSH
22387: LD_EXP 55
22391: PUSH
22392: LD_EXP 58
22396: PUSH
22397: LD_EXP 59
22401: PUSH
22402: LD_EXP 60
22406: PUSH
22407: LD_EXP 56
22411: PUSH
22412: LD_EXP 57
22416: PUSH
22417: LD_EXP 65
22421: PUSH
22422: LD_EXP 69
22426: PUSH
22427: LD_EXP 70
22431: PUSH
22432: LD_EXP 72
22436: PUSH
22437: LD_EXP 76
22441: PUSH
22442: LD_EXP 79
22446: PUSH
22447: LD_EXP 80
22451: PUSH
22452: LD_EXP 90
22456: PUSH
22457: LD_EXP 91
22461: PUSH
22462: LD_EXP 92
22466: PUSH
22467: LD_EXP 93
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: ST_TO_ADDR
// tmp :=  ;
22528: LD_ADDR_VAR 0 3
22532: PUSH
22533: LD_STRING 
22535: ST_TO_ADDR
// for i = 1 to normalCounter do
22536: LD_ADDR_VAR 0 8
22540: PUSH
22541: DOUBLE
22542: LD_INT 1
22544: DEC
22545: ST_TO_ADDR
22546: LD_EXP 38
22550: PUSH
22551: FOR_TO
22552: IFFALSE 22588
// begin if flags [ i ] then
22554: LD_VAR 0 4
22558: PUSH
22559: LD_VAR 0 8
22563: ARRAY
22564: IFFALSE 22586
// tmp := tmp & i & ; ;
22566: LD_ADDR_VAR 0 3
22570: PUSH
22571: LD_VAR 0 3
22575: PUSH
22576: LD_VAR 0 8
22580: STR
22581: PUSH
22582: LD_STRING ;
22584: STR
22585: ST_TO_ADDR
// end ;
22586: GO 22551
22588: POP
22589: POP
// for i = 1 to hardcoreCounter do
22590: LD_ADDR_VAR 0 8
22594: PUSH
22595: DOUBLE
22596: LD_INT 1
22598: DEC
22599: ST_TO_ADDR
22600: LD_EXP 39
22604: PUSH
22605: FOR_TO
22606: IFFALSE 22652
// begin if flags [ normalCounter + i ] then
22608: LD_VAR 0 4
22612: PUSH
22613: LD_EXP 38
22617: PUSH
22618: LD_VAR 0 8
22622: PLUS
22623: ARRAY
22624: IFFALSE 22650
// tmp := tmp & ( 100 + i ) & ; ;
22626: LD_ADDR_VAR 0 3
22630: PUSH
22631: LD_VAR 0 3
22635: PUSH
22636: LD_INT 100
22638: PUSH
22639: LD_VAR 0 8
22643: PLUS
22644: STR
22645: PUSH
22646: LD_STRING ;
22648: STR
22649: ST_TO_ADDR
// end ;
22650: GO 22605
22652: POP
22653: POP
// if tmp then
22654: LD_VAR 0 3
22658: IFFALSE 22670
// active := tmp ;
22660: LD_ADDR_VAR 0 7
22664: PUSH
22665: LD_VAR 0 3
22669: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22670: LD_STRING getStreamItemsFromMission("
22672: PUSH
22673: LD_VAR 0 5
22677: STR
22678: PUSH
22679: LD_STRING ","
22681: STR
22682: PUSH
22683: LD_VAR 0 6
22687: STR
22688: PUSH
22689: LD_STRING ","
22691: STR
22692: PUSH
22693: LD_VAR 0 7
22697: STR
22698: PUSH
22699: LD_STRING ")
22701: STR
22702: PPUSH
22703: CALL_OW 559
// end else
22707: GO 22716
// ToLua ( getStreamItemsFromMission("","","") ) ;
22709: LD_STRING getStreamItemsFromMission("","","")
22711: PPUSH
22712: CALL_OW 559
// end ;
22716: LD_VAR 0 2
22720: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22721: LD_EXP 37
22725: PUSH
22726: LD_EXP 42
22730: AND
22731: IFFALSE 22855
22733: GO 22735
22735: DISABLE
22736: LD_INT 0
22738: PPUSH
22739: PPUSH
// begin enable ;
22740: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22741: LD_ADDR_VAR 0 2
22745: PUSH
22746: LD_INT 22
22748: PUSH
22749: LD_OWVAR 2
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 2
22760: PUSH
22761: LD_INT 34
22763: PUSH
22764: LD_INT 7
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 34
22773: PUSH
22774: LD_INT 45
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 34
22783: PUSH
22784: LD_INT 28
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 34
22793: PUSH
22794: LD_INT 47
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PPUSH
22812: CALL_OW 69
22816: ST_TO_ADDR
// if not tmp then
22817: LD_VAR 0 2
22821: NOT
22822: IFFALSE 22826
// exit ;
22824: GO 22855
// for i in tmp do
22826: LD_ADDR_VAR 0 1
22830: PUSH
22831: LD_VAR 0 2
22835: PUSH
22836: FOR_IN
22837: IFFALSE 22853
// begin SetLives ( i , 0 ) ;
22839: LD_VAR 0 1
22843: PPUSH
22844: LD_INT 0
22846: PPUSH
22847: CALL_OW 234
// end ;
22851: GO 22836
22853: POP
22854: POP
// end ;
22855: PPOPN 2
22857: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22858: LD_EXP 37
22862: PUSH
22863: LD_EXP 43
22867: AND
22868: IFFALSE 22952
22870: GO 22872
22872: DISABLE
22873: LD_INT 0
22875: PPUSH
22876: PPUSH
// begin enable ;
22877: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22878: LD_ADDR_VAR 0 2
22882: PUSH
22883: LD_INT 22
22885: PUSH
22886: LD_OWVAR 2
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 32
22897: PUSH
22898: LD_INT 3
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PPUSH
22909: CALL_OW 69
22913: ST_TO_ADDR
// if not tmp then
22914: LD_VAR 0 2
22918: NOT
22919: IFFALSE 22923
// exit ;
22921: GO 22952
// for i in tmp do
22923: LD_ADDR_VAR 0 1
22927: PUSH
22928: LD_VAR 0 2
22932: PUSH
22933: FOR_IN
22934: IFFALSE 22950
// begin SetLives ( i , 0 ) ;
22936: LD_VAR 0 1
22940: PPUSH
22941: LD_INT 0
22943: PPUSH
22944: CALL_OW 234
// end ;
22948: GO 22933
22950: POP
22951: POP
// end ;
22952: PPOPN 2
22954: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22955: LD_EXP 37
22959: PUSH
22960: LD_EXP 40
22964: AND
22965: IFFALSE 23058
22967: GO 22969
22969: DISABLE
22970: LD_INT 0
22972: PPUSH
// begin enable ;
22973: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22974: LD_ADDR_VAR 0 1
22978: PUSH
22979: LD_INT 22
22981: PUSH
22982: LD_OWVAR 2
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: LD_INT 25
22996: PUSH
22997: LD_INT 5
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 25
23006: PUSH
23007: LD_INT 9
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 25
23016: PUSH
23017: LD_INT 8
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PPUSH
23034: CALL_OW 69
23038: PUSH
23039: FOR_IN
23040: IFFALSE 23056
// begin SetClass ( i , 1 ) ;
23042: LD_VAR 0 1
23046: PPUSH
23047: LD_INT 1
23049: PPUSH
23050: CALL_OW 336
// end ;
23054: GO 23039
23056: POP
23057: POP
// end ;
23058: PPOPN 1
23060: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23061: LD_EXP 37
23065: PUSH
23066: LD_EXP 41
23070: AND
23071: PUSH
23072: LD_OWVAR 65
23076: PUSH
23077: LD_INT 7
23079: LESS
23080: AND
23081: IFFALSE 23095
23083: GO 23085
23085: DISABLE
// begin enable ;
23086: ENABLE
// game_speed := 7 ;
23087: LD_ADDR_OWVAR 65
23091: PUSH
23092: LD_INT 7
23094: ST_TO_ADDR
// end ;
23095: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23096: LD_EXP 37
23100: PUSH
23101: LD_EXP 44
23105: AND
23106: IFFALSE 23308
23108: GO 23110
23110: DISABLE
23111: LD_INT 0
23113: PPUSH
23114: PPUSH
23115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23116: LD_ADDR_VAR 0 3
23120: PUSH
23121: LD_INT 81
23123: PUSH
23124: LD_OWVAR 2
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 21
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PPUSH
23147: CALL_OW 69
23151: ST_TO_ADDR
// if not tmp then
23152: LD_VAR 0 3
23156: NOT
23157: IFFALSE 23161
// exit ;
23159: GO 23308
// if tmp > 5 then
23161: LD_VAR 0 3
23165: PUSH
23166: LD_INT 5
23168: GREATER
23169: IFFALSE 23181
// k := 5 else
23171: LD_ADDR_VAR 0 2
23175: PUSH
23176: LD_INT 5
23178: ST_TO_ADDR
23179: GO 23191
// k := tmp ;
23181: LD_ADDR_VAR 0 2
23185: PUSH
23186: LD_VAR 0 3
23190: ST_TO_ADDR
// for i := 1 to k do
23191: LD_ADDR_VAR 0 1
23195: PUSH
23196: DOUBLE
23197: LD_INT 1
23199: DEC
23200: ST_TO_ADDR
23201: LD_VAR 0 2
23205: PUSH
23206: FOR_TO
23207: IFFALSE 23306
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23209: LD_VAR 0 3
23213: PUSH
23214: LD_VAR 0 1
23218: ARRAY
23219: PPUSH
23220: LD_VAR 0 1
23224: PUSH
23225: LD_INT 4
23227: MOD
23228: PUSH
23229: LD_INT 1
23231: PLUS
23232: PPUSH
23233: CALL_OW 259
23237: PUSH
23238: LD_INT 10
23240: LESS
23241: IFFALSE 23304
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23243: LD_VAR 0 3
23247: PUSH
23248: LD_VAR 0 1
23252: ARRAY
23253: PPUSH
23254: LD_VAR 0 1
23258: PUSH
23259: LD_INT 4
23261: MOD
23262: PUSH
23263: LD_INT 1
23265: PLUS
23266: PPUSH
23267: LD_VAR 0 3
23271: PUSH
23272: LD_VAR 0 1
23276: ARRAY
23277: PPUSH
23278: LD_VAR 0 1
23282: PUSH
23283: LD_INT 4
23285: MOD
23286: PUSH
23287: LD_INT 1
23289: PLUS
23290: PPUSH
23291: CALL_OW 259
23295: PUSH
23296: LD_INT 1
23298: PLUS
23299: PPUSH
23300: CALL_OW 237
23304: GO 23206
23306: POP
23307: POP
// end ;
23308: PPOPN 3
23310: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23311: LD_EXP 37
23315: PUSH
23316: LD_EXP 45
23320: AND
23321: IFFALSE 23341
23323: GO 23325
23325: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23326: LD_INT 4
23328: PPUSH
23329: LD_OWVAR 2
23333: PPUSH
23334: LD_INT 0
23336: PPUSH
23337: CALL_OW 324
23341: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23342: LD_EXP 37
23346: PUSH
23347: LD_EXP 74
23351: AND
23352: IFFALSE 23372
23354: GO 23356
23356: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23357: LD_INT 19
23359: PPUSH
23360: LD_OWVAR 2
23364: PPUSH
23365: LD_INT 0
23367: PPUSH
23368: CALL_OW 324
23372: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23373: LD_EXP 37
23377: PUSH
23378: LD_EXP 46
23382: AND
23383: IFFALSE 23485
23385: GO 23387
23387: DISABLE
23388: LD_INT 0
23390: PPUSH
23391: PPUSH
// begin enable ;
23392: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23393: LD_ADDR_VAR 0 2
23397: PUSH
23398: LD_INT 22
23400: PUSH
23401: LD_OWVAR 2
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 2
23412: PUSH
23413: LD_INT 34
23415: PUSH
23416: LD_INT 11
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 34
23425: PUSH
23426: LD_INT 30
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: LIST
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PPUSH
23442: CALL_OW 69
23446: ST_TO_ADDR
// if not tmp then
23447: LD_VAR 0 2
23451: NOT
23452: IFFALSE 23456
// exit ;
23454: GO 23485
// for i in tmp do
23456: LD_ADDR_VAR 0 1
23460: PUSH
23461: LD_VAR 0 2
23465: PUSH
23466: FOR_IN
23467: IFFALSE 23483
// begin SetLives ( i , 0 ) ;
23469: LD_VAR 0 1
23473: PPUSH
23474: LD_INT 0
23476: PPUSH
23477: CALL_OW 234
// end ;
23481: GO 23466
23483: POP
23484: POP
// end ;
23485: PPOPN 2
23487: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23488: LD_EXP 37
23492: PUSH
23493: LD_EXP 47
23497: AND
23498: IFFALSE 23518
23500: GO 23502
23502: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23503: LD_INT 32
23505: PPUSH
23506: LD_OWVAR 2
23510: PPUSH
23511: LD_INT 0
23513: PPUSH
23514: CALL_OW 324
23518: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23519: LD_EXP 37
23523: PUSH
23524: LD_EXP 48
23528: AND
23529: IFFALSE 23710
23531: GO 23533
23533: DISABLE
23534: LD_INT 0
23536: PPUSH
23537: PPUSH
23538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23539: LD_ADDR_VAR 0 2
23543: PUSH
23544: LD_INT 22
23546: PUSH
23547: LD_OWVAR 2
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 33
23558: PUSH
23559: LD_INT 3
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PPUSH
23570: CALL_OW 69
23574: ST_TO_ADDR
// if not tmp then
23575: LD_VAR 0 2
23579: NOT
23580: IFFALSE 23584
// exit ;
23582: GO 23710
// side := 0 ;
23584: LD_ADDR_VAR 0 3
23588: PUSH
23589: LD_INT 0
23591: ST_TO_ADDR
// for i := 1 to 8 do
23592: LD_ADDR_VAR 0 1
23596: PUSH
23597: DOUBLE
23598: LD_INT 1
23600: DEC
23601: ST_TO_ADDR
23602: LD_INT 8
23604: PUSH
23605: FOR_TO
23606: IFFALSE 23654
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23608: LD_OWVAR 2
23612: PUSH
23613: LD_VAR 0 1
23617: NONEQUAL
23618: PUSH
23619: LD_OWVAR 2
23623: PPUSH
23624: LD_VAR 0 1
23628: PPUSH
23629: CALL_OW 81
23633: PUSH
23634: LD_INT 2
23636: EQUAL
23637: AND
23638: IFFALSE 23652
// begin side := i ;
23640: LD_ADDR_VAR 0 3
23644: PUSH
23645: LD_VAR 0 1
23649: ST_TO_ADDR
// break ;
23650: GO 23654
// end ;
23652: GO 23605
23654: POP
23655: POP
// if not side then
23656: LD_VAR 0 3
23660: NOT
23661: IFFALSE 23665
// exit ;
23663: GO 23710
// for i := 1 to tmp do
23665: LD_ADDR_VAR 0 1
23669: PUSH
23670: DOUBLE
23671: LD_INT 1
23673: DEC
23674: ST_TO_ADDR
23675: LD_VAR 0 2
23679: PUSH
23680: FOR_TO
23681: IFFALSE 23708
// if Prob ( 60 ) then
23683: LD_INT 60
23685: PPUSH
23686: CALL_OW 13
23690: IFFALSE 23706
// SetSide ( i , side ) ;
23692: LD_VAR 0 1
23696: PPUSH
23697: LD_VAR 0 3
23701: PPUSH
23702: CALL_OW 235
23706: GO 23680
23708: POP
23709: POP
// end ;
23710: PPOPN 3
23712: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23713: LD_EXP 37
23717: PUSH
23718: LD_EXP 50
23722: AND
23723: IFFALSE 23842
23725: GO 23727
23727: DISABLE
23728: LD_INT 0
23730: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23731: LD_ADDR_VAR 0 1
23735: PUSH
23736: LD_INT 22
23738: PUSH
23739: LD_OWVAR 2
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 21
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 3
23760: PUSH
23761: LD_INT 23
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: PPUSH
23780: CALL_OW 69
23784: PUSH
23785: FOR_IN
23786: IFFALSE 23840
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23788: LD_VAR 0 1
23792: PPUSH
23793: CALL_OW 257
23797: PUSH
23798: LD_INT 1
23800: PUSH
23801: LD_INT 2
23803: PUSH
23804: LD_INT 3
23806: PUSH
23807: LD_INT 4
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: IN
23816: IFFALSE 23838
// SetClass ( un , rand ( 1 , 4 ) ) ;
23818: LD_VAR 0 1
23822: PPUSH
23823: LD_INT 1
23825: PPUSH
23826: LD_INT 4
23828: PPUSH
23829: CALL_OW 12
23833: PPUSH
23834: CALL_OW 336
23838: GO 23785
23840: POP
23841: POP
// end ;
23842: PPOPN 1
23844: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23845: LD_EXP 37
23849: PUSH
23850: LD_EXP 49
23854: AND
23855: IFFALSE 23934
23857: GO 23859
23859: DISABLE
23860: LD_INT 0
23862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23863: LD_ADDR_VAR 0 1
23867: PUSH
23868: LD_INT 22
23870: PUSH
23871: LD_OWVAR 2
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 21
23882: PUSH
23883: LD_INT 3
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PPUSH
23894: CALL_OW 69
23898: ST_TO_ADDR
// if not tmp then
23899: LD_VAR 0 1
23903: NOT
23904: IFFALSE 23908
// exit ;
23906: GO 23934
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23908: LD_VAR 0 1
23912: PUSH
23913: LD_INT 1
23915: PPUSH
23916: LD_VAR 0 1
23920: PPUSH
23921: CALL_OW 12
23925: ARRAY
23926: PPUSH
23927: LD_INT 100
23929: PPUSH
23930: CALL_OW 234
// end ;
23934: PPOPN 1
23936: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23937: LD_EXP 37
23941: PUSH
23942: LD_EXP 51
23946: AND
23947: IFFALSE 24045
23949: GO 23951
23951: DISABLE
23952: LD_INT 0
23954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23955: LD_ADDR_VAR 0 1
23959: PUSH
23960: LD_INT 22
23962: PUSH
23963: LD_OWVAR 2
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 21
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PPUSH
23986: CALL_OW 69
23990: ST_TO_ADDR
// if not tmp then
23991: LD_VAR 0 1
23995: NOT
23996: IFFALSE 24000
// exit ;
23998: GO 24045
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24000: LD_VAR 0 1
24004: PUSH
24005: LD_INT 1
24007: PPUSH
24008: LD_VAR 0 1
24012: PPUSH
24013: CALL_OW 12
24017: ARRAY
24018: PPUSH
24019: LD_INT 1
24021: PPUSH
24022: LD_INT 4
24024: PPUSH
24025: CALL_OW 12
24029: PPUSH
24030: LD_INT 3000
24032: PPUSH
24033: LD_INT 9000
24035: PPUSH
24036: CALL_OW 12
24040: PPUSH
24041: CALL_OW 492
// end ;
24045: PPOPN 1
24047: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24048: LD_EXP 37
24052: PUSH
24053: LD_EXP 52
24057: AND
24058: IFFALSE 24078
24060: GO 24062
24062: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24063: LD_INT 1
24065: PPUSH
24066: LD_OWVAR 2
24070: PPUSH
24071: LD_INT 0
24073: PPUSH
24074: CALL_OW 324
24078: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24079: LD_EXP 37
24083: PUSH
24084: LD_EXP 53
24088: AND
24089: IFFALSE 24172
24091: GO 24093
24093: DISABLE
24094: LD_INT 0
24096: PPUSH
24097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24098: LD_ADDR_VAR 0 2
24102: PUSH
24103: LD_INT 22
24105: PUSH
24106: LD_OWVAR 2
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 21
24117: PUSH
24118: LD_INT 3
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PPUSH
24129: CALL_OW 69
24133: ST_TO_ADDR
// if not tmp then
24134: LD_VAR 0 2
24138: NOT
24139: IFFALSE 24143
// exit ;
24141: GO 24172
// for i in tmp do
24143: LD_ADDR_VAR 0 1
24147: PUSH
24148: LD_VAR 0 2
24152: PUSH
24153: FOR_IN
24154: IFFALSE 24170
// SetBLevel ( i , 10 ) ;
24156: LD_VAR 0 1
24160: PPUSH
24161: LD_INT 10
24163: PPUSH
24164: CALL_OW 241
24168: GO 24153
24170: POP
24171: POP
// end ;
24172: PPOPN 2
24174: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24175: LD_EXP 37
24179: PUSH
24180: LD_EXP 54
24184: AND
24185: IFFALSE 24296
24187: GO 24189
24189: DISABLE
24190: LD_INT 0
24192: PPUSH
24193: PPUSH
24194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24195: LD_ADDR_VAR 0 3
24199: PUSH
24200: LD_INT 22
24202: PUSH
24203: LD_OWVAR 2
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 25
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PPUSH
24226: CALL_OW 69
24230: ST_TO_ADDR
// if not tmp then
24231: LD_VAR 0 3
24235: NOT
24236: IFFALSE 24240
// exit ;
24238: GO 24296
// un := tmp [ rand ( 1 , tmp ) ] ;
24240: LD_ADDR_VAR 0 2
24244: PUSH
24245: LD_VAR 0 3
24249: PUSH
24250: LD_INT 1
24252: PPUSH
24253: LD_VAR 0 3
24257: PPUSH
24258: CALL_OW 12
24262: ARRAY
24263: ST_TO_ADDR
// if Crawls ( un ) then
24264: LD_VAR 0 2
24268: PPUSH
24269: CALL_OW 318
24273: IFFALSE 24284
// ComWalk ( un ) ;
24275: LD_VAR 0 2
24279: PPUSH
24280: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24284: LD_VAR 0 2
24288: PPUSH
24289: LD_INT 5
24291: PPUSH
24292: CALL_OW 336
// end ;
24296: PPOPN 3
24298: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24299: LD_EXP 37
24303: PUSH
24304: LD_EXP 55
24308: AND
24309: PUSH
24310: LD_OWVAR 67
24314: PUSH
24315: LD_INT 4
24317: LESS
24318: AND
24319: IFFALSE 24338
24321: GO 24323
24323: DISABLE
// begin Difficulty := Difficulty + 1 ;
24324: LD_ADDR_OWVAR 67
24328: PUSH
24329: LD_OWVAR 67
24333: PUSH
24334: LD_INT 1
24336: PLUS
24337: ST_TO_ADDR
// end ;
24338: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24339: LD_EXP 37
24343: PUSH
24344: LD_EXP 56
24348: AND
24349: IFFALSE 24452
24351: GO 24353
24353: DISABLE
24354: LD_INT 0
24356: PPUSH
// begin for i := 1 to 5 do
24357: LD_ADDR_VAR 0 1
24361: PUSH
24362: DOUBLE
24363: LD_INT 1
24365: DEC
24366: ST_TO_ADDR
24367: LD_INT 5
24369: PUSH
24370: FOR_TO
24371: IFFALSE 24450
// begin uc_nation := nation_nature ;
24373: LD_ADDR_OWVAR 21
24377: PUSH
24378: LD_INT 0
24380: ST_TO_ADDR
// uc_side := 0 ;
24381: LD_ADDR_OWVAR 20
24385: PUSH
24386: LD_INT 0
24388: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24389: LD_ADDR_OWVAR 29
24393: PUSH
24394: LD_INT 12
24396: PUSH
24397: LD_INT 12
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: ST_TO_ADDR
// hc_agressivity := 20 ;
24404: LD_ADDR_OWVAR 35
24408: PUSH
24409: LD_INT 20
24411: ST_TO_ADDR
// hc_class := class_tiger ;
24412: LD_ADDR_OWVAR 28
24416: PUSH
24417: LD_INT 14
24419: ST_TO_ADDR
// hc_gallery :=  ;
24420: LD_ADDR_OWVAR 33
24424: PUSH
24425: LD_STRING 
24427: ST_TO_ADDR
// hc_name :=  ;
24428: LD_ADDR_OWVAR 26
24432: PUSH
24433: LD_STRING 
24435: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24436: CALL_OW 44
24440: PPUSH
24441: LD_INT 0
24443: PPUSH
24444: CALL_OW 51
// end ;
24448: GO 24370
24450: POP
24451: POP
// end ;
24452: PPOPN 1
24454: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24455: LD_EXP 37
24459: PUSH
24460: LD_EXP 57
24464: AND
24465: IFFALSE 24474
24467: GO 24469
24469: DISABLE
// StreamSibBomb ;
24470: CALL 24475 0 0
24474: END
// export function StreamSibBomb ; var i , x , y ; begin
24475: LD_INT 0
24477: PPUSH
24478: PPUSH
24479: PPUSH
24480: PPUSH
// result := false ;
24481: LD_ADDR_VAR 0 1
24485: PUSH
24486: LD_INT 0
24488: ST_TO_ADDR
// for i := 1 to 16 do
24489: LD_ADDR_VAR 0 2
24493: PUSH
24494: DOUBLE
24495: LD_INT 1
24497: DEC
24498: ST_TO_ADDR
24499: LD_INT 16
24501: PUSH
24502: FOR_TO
24503: IFFALSE 24702
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24505: LD_ADDR_VAR 0 3
24509: PUSH
24510: LD_INT 10
24512: PUSH
24513: LD_INT 20
24515: PUSH
24516: LD_INT 30
24518: PUSH
24519: LD_INT 40
24521: PUSH
24522: LD_INT 50
24524: PUSH
24525: LD_INT 60
24527: PUSH
24528: LD_INT 70
24530: PUSH
24531: LD_INT 80
24533: PUSH
24534: LD_INT 90
24536: PUSH
24537: LD_INT 100
24539: PUSH
24540: LD_INT 110
24542: PUSH
24543: LD_INT 120
24545: PUSH
24546: LD_INT 130
24548: PUSH
24549: LD_INT 140
24551: PUSH
24552: LD_INT 150
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 1
24574: PPUSH
24575: LD_INT 15
24577: PPUSH
24578: CALL_OW 12
24582: ARRAY
24583: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24584: LD_ADDR_VAR 0 4
24588: PUSH
24589: LD_INT 10
24591: PUSH
24592: LD_INT 20
24594: PUSH
24595: LD_INT 30
24597: PUSH
24598: LD_INT 40
24600: PUSH
24601: LD_INT 50
24603: PUSH
24604: LD_INT 60
24606: PUSH
24607: LD_INT 70
24609: PUSH
24610: LD_INT 80
24612: PUSH
24613: LD_INT 90
24615: PUSH
24616: LD_INT 100
24618: PUSH
24619: LD_INT 110
24621: PUSH
24622: LD_INT 120
24624: PUSH
24625: LD_INT 130
24627: PUSH
24628: LD_INT 140
24630: PUSH
24631: LD_INT 150
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: PPUSH
24654: LD_INT 15
24656: PPUSH
24657: CALL_OW 12
24661: ARRAY
24662: ST_TO_ADDR
// if ValidHex ( x , y ) then
24663: LD_VAR 0 3
24667: PPUSH
24668: LD_VAR 0 4
24672: PPUSH
24673: CALL_OW 488
24677: IFFALSE 24700
// begin result := [ x , y ] ;
24679: LD_ADDR_VAR 0 1
24683: PUSH
24684: LD_VAR 0 3
24688: PUSH
24689: LD_VAR 0 4
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: ST_TO_ADDR
// break ;
24698: GO 24702
// end ; end ;
24700: GO 24502
24702: POP
24703: POP
// if result then
24704: LD_VAR 0 1
24708: IFFALSE 24768
// begin ToLua ( playSibBomb() ) ;
24710: LD_STRING playSibBomb()
24712: PPUSH
24713: CALL_OW 559
// wait ( 0 0$14 ) ;
24717: LD_INT 490
24719: PPUSH
24720: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24724: LD_VAR 0 1
24728: PUSH
24729: LD_INT 1
24731: ARRAY
24732: PPUSH
24733: LD_VAR 0 1
24737: PUSH
24738: LD_INT 2
24740: ARRAY
24741: PPUSH
24742: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24746: LD_VAR 0 1
24750: PUSH
24751: LD_INT 1
24753: ARRAY
24754: PPUSH
24755: LD_VAR 0 1
24759: PUSH
24760: LD_INT 2
24762: ARRAY
24763: PPUSH
24764: CALL_OW 429
// end ; end ;
24768: LD_VAR 0 1
24772: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24773: LD_EXP 37
24777: PUSH
24778: LD_EXP 59
24782: AND
24783: IFFALSE 24795
24785: GO 24787
24787: DISABLE
// YouLost (  ) ;
24788: LD_STRING 
24790: PPUSH
24791: CALL_OW 104
24795: END
// every 0 0$1 trigger StreamModeActive and sFog do
24796: LD_EXP 37
24800: PUSH
24801: LD_EXP 58
24805: AND
24806: IFFALSE 24820
24808: GO 24810
24810: DISABLE
// FogOff ( your_side ) ;
24811: LD_OWVAR 2
24815: PPUSH
24816: CALL_OW 344
24820: END
// every 0 0$1 trigger StreamModeActive and sSun do
24821: LD_EXP 37
24825: PUSH
24826: LD_EXP 60
24830: AND
24831: IFFALSE 24859
24833: GO 24835
24835: DISABLE
// begin solar_recharge_percent := 0 ;
24836: LD_ADDR_OWVAR 79
24840: PUSH
24841: LD_INT 0
24843: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24844: LD_INT 10500
24846: PPUSH
24847: CALL_OW 67
// solar_recharge_percent := 100 ;
24851: LD_ADDR_OWVAR 79
24855: PUSH
24856: LD_INT 100
24858: ST_TO_ADDR
// end ;
24859: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24860: LD_EXP 37
24864: PUSH
24865: LD_EXP 61
24869: AND
24870: IFFALSE 25109
24872: GO 24874
24874: DISABLE
24875: LD_INT 0
24877: PPUSH
24878: PPUSH
24879: PPUSH
// begin tmp := [ ] ;
24880: LD_ADDR_VAR 0 3
24884: PUSH
24885: EMPTY
24886: ST_TO_ADDR
// for i := 1 to 6 do
24887: LD_ADDR_VAR 0 1
24891: PUSH
24892: DOUBLE
24893: LD_INT 1
24895: DEC
24896: ST_TO_ADDR
24897: LD_INT 6
24899: PUSH
24900: FOR_TO
24901: IFFALSE 25006
// begin uc_nation := nation_nature ;
24903: LD_ADDR_OWVAR 21
24907: PUSH
24908: LD_INT 0
24910: ST_TO_ADDR
// uc_side := 0 ;
24911: LD_ADDR_OWVAR 20
24915: PUSH
24916: LD_INT 0
24918: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24919: LD_ADDR_OWVAR 29
24923: PUSH
24924: LD_INT 12
24926: PUSH
24927: LD_INT 12
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: ST_TO_ADDR
// hc_agressivity := 20 ;
24934: LD_ADDR_OWVAR 35
24938: PUSH
24939: LD_INT 20
24941: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24942: LD_ADDR_OWVAR 28
24946: PUSH
24947: LD_INT 17
24949: ST_TO_ADDR
// hc_gallery :=  ;
24950: LD_ADDR_OWVAR 33
24954: PUSH
24955: LD_STRING 
24957: ST_TO_ADDR
// hc_name :=  ;
24958: LD_ADDR_OWVAR 26
24962: PUSH
24963: LD_STRING 
24965: ST_TO_ADDR
// un := CreateHuman ;
24966: LD_ADDR_VAR 0 2
24970: PUSH
24971: CALL_OW 44
24975: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24976: LD_VAR 0 2
24980: PPUSH
24981: LD_INT 1
24983: PPUSH
24984: CALL_OW 51
// tmp := tmp ^ un ;
24988: LD_ADDR_VAR 0 3
24992: PUSH
24993: LD_VAR 0 3
24997: PUSH
24998: LD_VAR 0 2
25002: ADD
25003: ST_TO_ADDR
// end ;
25004: GO 24900
25006: POP
25007: POP
// repeat wait ( 0 0$1 ) ;
25008: LD_INT 35
25010: PPUSH
25011: CALL_OW 67
// for un in tmp do
25015: LD_ADDR_VAR 0 2
25019: PUSH
25020: LD_VAR 0 3
25024: PUSH
25025: FOR_IN
25026: IFFALSE 25100
// begin if IsDead ( un ) then
25028: LD_VAR 0 2
25032: PPUSH
25033: CALL_OW 301
25037: IFFALSE 25057
// begin tmp := tmp diff un ;
25039: LD_ADDR_VAR 0 3
25043: PUSH
25044: LD_VAR 0 3
25048: PUSH
25049: LD_VAR 0 2
25053: DIFF
25054: ST_TO_ADDR
// continue ;
25055: GO 25025
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25057: LD_VAR 0 2
25061: PPUSH
25062: LD_INT 3
25064: PUSH
25065: LD_INT 22
25067: PUSH
25068: LD_INT 0
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PPUSH
25079: CALL_OW 69
25083: PPUSH
25084: LD_VAR 0 2
25088: PPUSH
25089: CALL_OW 74
25093: PPUSH
25094: CALL_OW 115
// end ;
25098: GO 25025
25100: POP
25101: POP
// until not tmp ;
25102: LD_VAR 0 3
25106: NOT
25107: IFFALSE 25008
// end ;
25109: PPOPN 3
25111: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25112: LD_EXP 37
25116: PUSH
25117: LD_EXP 62
25121: AND
25122: IFFALSE 25176
25124: GO 25126
25126: DISABLE
// begin ToLua ( displayTroll(); ) ;
25127: LD_STRING displayTroll();
25129: PPUSH
25130: CALL_OW 559
// wait ( 3 3$00 ) ;
25134: LD_INT 6300
25136: PPUSH
25137: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25141: LD_STRING hideTroll();
25143: PPUSH
25144: CALL_OW 559
// wait ( 1 1$00 ) ;
25148: LD_INT 2100
25150: PPUSH
25151: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25155: LD_STRING displayTroll();
25157: PPUSH
25158: CALL_OW 559
// wait ( 1 1$00 ) ;
25162: LD_INT 2100
25164: PPUSH
25165: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25169: LD_STRING hideTroll();
25171: PPUSH
25172: CALL_OW 559
// end ;
25176: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25177: LD_EXP 37
25181: PUSH
25182: LD_EXP 63
25186: AND
25187: IFFALSE 25250
25189: GO 25191
25191: DISABLE
25192: LD_INT 0
25194: PPUSH
// begin p := 0 ;
25195: LD_ADDR_VAR 0 1
25199: PUSH
25200: LD_INT 0
25202: ST_TO_ADDR
// repeat game_speed := 1 ;
25203: LD_ADDR_OWVAR 65
25207: PUSH
25208: LD_INT 1
25210: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25211: LD_INT 35
25213: PPUSH
25214: CALL_OW 67
// p := p + 1 ;
25218: LD_ADDR_VAR 0 1
25222: PUSH
25223: LD_VAR 0 1
25227: PUSH
25228: LD_INT 1
25230: PLUS
25231: ST_TO_ADDR
// until p >= 60 ;
25232: LD_VAR 0 1
25236: PUSH
25237: LD_INT 60
25239: GREATEREQUAL
25240: IFFALSE 25203
// game_speed := 4 ;
25242: LD_ADDR_OWVAR 65
25246: PUSH
25247: LD_INT 4
25249: ST_TO_ADDR
// end ;
25250: PPOPN 1
25252: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25253: LD_EXP 37
25257: PUSH
25258: LD_EXP 64
25262: AND
25263: IFFALSE 25409
25265: GO 25267
25267: DISABLE
25268: LD_INT 0
25270: PPUSH
25271: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25272: LD_ADDR_VAR 0 1
25276: PUSH
25277: LD_INT 22
25279: PUSH
25280: LD_OWVAR 2
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 2
25291: PUSH
25292: LD_INT 30
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 30
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PPUSH
25321: CALL_OW 69
25325: ST_TO_ADDR
// if not depot then
25326: LD_VAR 0 1
25330: NOT
25331: IFFALSE 25335
// exit ;
25333: GO 25409
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25335: LD_ADDR_VAR 0 2
25339: PUSH
25340: LD_VAR 0 1
25344: PUSH
25345: LD_INT 1
25347: PPUSH
25348: LD_VAR 0 1
25352: PPUSH
25353: CALL_OW 12
25357: ARRAY
25358: PPUSH
25359: CALL_OW 274
25363: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25364: LD_VAR 0 2
25368: PPUSH
25369: LD_INT 1
25371: PPUSH
25372: LD_INT 0
25374: PPUSH
25375: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25379: LD_VAR 0 2
25383: PPUSH
25384: LD_INT 2
25386: PPUSH
25387: LD_INT 0
25389: PPUSH
25390: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25394: LD_VAR 0 2
25398: PPUSH
25399: LD_INT 3
25401: PPUSH
25402: LD_INT 0
25404: PPUSH
25405: CALL_OW 277
// end ;
25409: PPOPN 2
25411: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25412: LD_EXP 37
25416: PUSH
25417: LD_EXP 65
25421: AND
25422: IFFALSE 25519
25424: GO 25426
25426: DISABLE
25427: LD_INT 0
25429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25430: LD_ADDR_VAR 0 1
25434: PUSH
25435: LD_INT 22
25437: PUSH
25438: LD_OWVAR 2
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 21
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 3
25459: PUSH
25460: LD_INT 23
25462: PUSH
25463: LD_INT 0
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: LIST
25478: PPUSH
25479: CALL_OW 69
25483: ST_TO_ADDR
// if not tmp then
25484: LD_VAR 0 1
25488: NOT
25489: IFFALSE 25493
// exit ;
25491: GO 25519
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25493: LD_VAR 0 1
25497: PUSH
25498: LD_INT 1
25500: PPUSH
25501: LD_VAR 0 1
25505: PPUSH
25506: CALL_OW 12
25510: ARRAY
25511: PPUSH
25512: LD_INT 200
25514: PPUSH
25515: CALL_OW 234
// end ;
25519: PPOPN 1
25521: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25522: LD_EXP 37
25526: PUSH
25527: LD_EXP 66
25531: AND
25532: IFFALSE 25611
25534: GO 25536
25536: DISABLE
25537: LD_INT 0
25539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25540: LD_ADDR_VAR 0 1
25544: PUSH
25545: LD_INT 22
25547: PUSH
25548: LD_OWVAR 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 21
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PPUSH
25571: CALL_OW 69
25575: ST_TO_ADDR
// if not tmp then
25576: LD_VAR 0 1
25580: NOT
25581: IFFALSE 25585
// exit ;
25583: GO 25611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25585: LD_VAR 0 1
25589: PUSH
25590: LD_INT 1
25592: PPUSH
25593: LD_VAR 0 1
25597: PPUSH
25598: CALL_OW 12
25602: ARRAY
25603: PPUSH
25604: LD_INT 60
25606: PPUSH
25607: CALL_OW 234
// end ;
25611: PPOPN 1
25613: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25614: LD_EXP 37
25618: PUSH
25619: LD_EXP 67
25623: AND
25624: IFFALSE 25723
25626: GO 25628
25628: DISABLE
25629: LD_INT 0
25631: PPUSH
25632: PPUSH
// begin enable ;
25633: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25634: LD_ADDR_VAR 0 1
25638: PUSH
25639: LD_INT 22
25641: PUSH
25642: LD_OWVAR 2
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 61
25653: PUSH
25654: EMPTY
25655: LIST
25656: PUSH
25657: LD_INT 33
25659: PUSH
25660: LD_INT 2
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: LIST
25671: PPUSH
25672: CALL_OW 69
25676: ST_TO_ADDR
// if not tmp then
25677: LD_VAR 0 1
25681: NOT
25682: IFFALSE 25686
// exit ;
25684: GO 25723
// for i in tmp do
25686: LD_ADDR_VAR 0 2
25690: PUSH
25691: LD_VAR 0 1
25695: PUSH
25696: FOR_IN
25697: IFFALSE 25721
// if IsControledBy ( i ) then
25699: LD_VAR 0 2
25703: PPUSH
25704: CALL_OW 312
25708: IFFALSE 25719
// ComUnlink ( i ) ;
25710: LD_VAR 0 2
25714: PPUSH
25715: CALL_OW 136
25719: GO 25696
25721: POP
25722: POP
// end ;
25723: PPOPN 2
25725: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25726: LD_EXP 37
25730: PUSH
25731: LD_EXP 68
25735: AND
25736: IFFALSE 25876
25738: GO 25740
25740: DISABLE
25741: LD_INT 0
25743: PPUSH
25744: PPUSH
// begin ToLua ( displayPowell(); ) ;
25745: LD_STRING displayPowell();
25747: PPUSH
25748: CALL_OW 559
// uc_side := 0 ;
25752: LD_ADDR_OWVAR 20
25756: PUSH
25757: LD_INT 0
25759: ST_TO_ADDR
// uc_nation := 2 ;
25760: LD_ADDR_OWVAR 21
25764: PUSH
25765: LD_INT 2
25767: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25768: LD_ADDR_OWVAR 37
25772: PUSH
25773: LD_INT 14
25775: ST_TO_ADDR
// vc_engine := engine_siberite ;
25776: LD_ADDR_OWVAR 39
25780: PUSH
25781: LD_INT 3
25783: ST_TO_ADDR
// vc_control := control_apeman ;
25784: LD_ADDR_OWVAR 38
25788: PUSH
25789: LD_INT 5
25791: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25792: LD_ADDR_OWVAR 40
25796: PUSH
25797: LD_INT 29
25799: ST_TO_ADDR
// un := CreateVehicle ;
25800: LD_ADDR_VAR 0 2
25804: PUSH
25805: CALL_OW 45
25809: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25810: LD_VAR 0 2
25814: PPUSH
25815: LD_INT 1
25817: PPUSH
25818: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25822: LD_INT 35
25824: PPUSH
25825: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25829: LD_VAR 0 2
25833: PPUSH
25834: LD_INT 22
25836: PUSH
25837: LD_OWVAR 2
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PPUSH
25846: CALL_OW 69
25850: PPUSH
25851: LD_VAR 0 2
25855: PPUSH
25856: CALL_OW 74
25860: PPUSH
25861: CALL_OW 115
// until IsDead ( un ) ;
25865: LD_VAR 0 2
25869: PPUSH
25870: CALL_OW 301
25874: IFFALSE 25822
// end ;
25876: PPOPN 2
25878: END
// every 0 0$1 trigger StreamModeActive and sStu do
25879: LD_EXP 37
25883: PUSH
25884: LD_EXP 76
25888: AND
25889: IFFALSE 25905
25891: GO 25893
25893: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25894: LD_STRING displayStucuk();
25896: PPUSH
25897: CALL_OW 559
// ResetFog ;
25901: CALL_OW 335
// end ;
25905: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25906: LD_EXP 37
25910: PUSH
25911: LD_EXP 69
25915: AND
25916: IFFALSE 26057
25918: GO 25920
25920: DISABLE
25921: LD_INT 0
25923: PPUSH
25924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25925: LD_ADDR_VAR 0 2
25929: PUSH
25930: LD_INT 22
25932: PUSH
25933: LD_OWVAR 2
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 21
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PPUSH
25956: CALL_OW 69
25960: ST_TO_ADDR
// if not tmp then
25961: LD_VAR 0 2
25965: NOT
25966: IFFALSE 25970
// exit ;
25968: GO 26057
// un := tmp [ rand ( 1 , tmp ) ] ;
25970: LD_ADDR_VAR 0 1
25974: PUSH
25975: LD_VAR 0 2
25979: PUSH
25980: LD_INT 1
25982: PPUSH
25983: LD_VAR 0 2
25987: PPUSH
25988: CALL_OW 12
25992: ARRAY
25993: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25994: LD_VAR 0 1
25998: PPUSH
25999: LD_INT 0
26001: PPUSH
26002: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26006: LD_VAR 0 1
26010: PPUSH
26011: LD_OWVAR 3
26015: PUSH
26016: LD_VAR 0 1
26020: DIFF
26021: PPUSH
26022: LD_VAR 0 1
26026: PPUSH
26027: CALL_OW 74
26031: PPUSH
26032: CALL_OW 115
// wait ( 0 0$20 ) ;
26036: LD_INT 700
26038: PPUSH
26039: CALL_OW 67
// SetSide ( un , your_side ) ;
26043: LD_VAR 0 1
26047: PPUSH
26048: LD_OWVAR 2
26052: PPUSH
26053: CALL_OW 235
// end ;
26057: PPOPN 2
26059: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26060: LD_EXP 37
26064: PUSH
26065: LD_EXP 70
26069: AND
26070: IFFALSE 26176
26072: GO 26074
26074: DISABLE
26075: LD_INT 0
26077: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26078: LD_ADDR_VAR 0 1
26082: PUSH
26083: LD_INT 22
26085: PUSH
26086: LD_OWVAR 2
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 2
26097: PUSH
26098: LD_INT 30
26100: PUSH
26101: LD_INT 0
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 30
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: LIST
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PPUSH
26127: CALL_OW 69
26131: ST_TO_ADDR
// if not depot then
26132: LD_VAR 0 1
26136: NOT
26137: IFFALSE 26141
// exit ;
26139: GO 26176
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26141: LD_VAR 0 1
26145: PUSH
26146: LD_INT 1
26148: ARRAY
26149: PPUSH
26150: CALL_OW 250
26154: PPUSH
26155: LD_VAR 0 1
26159: PUSH
26160: LD_INT 1
26162: ARRAY
26163: PPUSH
26164: CALL_OW 251
26168: PPUSH
26169: LD_INT 70
26171: PPUSH
26172: CALL_OW 495
// end ;
26176: PPOPN 1
26178: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26179: LD_EXP 37
26183: PUSH
26184: LD_EXP 71
26188: AND
26189: IFFALSE 26400
26191: GO 26193
26193: DISABLE
26194: LD_INT 0
26196: PPUSH
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26201: LD_ADDR_VAR 0 5
26205: PUSH
26206: LD_INT 22
26208: PUSH
26209: LD_OWVAR 2
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 21
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PPUSH
26232: CALL_OW 69
26236: ST_TO_ADDR
// if not tmp then
26237: LD_VAR 0 5
26241: NOT
26242: IFFALSE 26246
// exit ;
26244: GO 26400
// for i in tmp do
26246: LD_ADDR_VAR 0 1
26250: PUSH
26251: LD_VAR 0 5
26255: PUSH
26256: FOR_IN
26257: IFFALSE 26398
// begin d := rand ( 0 , 5 ) ;
26259: LD_ADDR_VAR 0 4
26263: PUSH
26264: LD_INT 0
26266: PPUSH
26267: LD_INT 5
26269: PPUSH
26270: CALL_OW 12
26274: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26275: LD_ADDR_VAR 0 2
26279: PUSH
26280: LD_VAR 0 1
26284: PPUSH
26285: CALL_OW 250
26289: PPUSH
26290: LD_VAR 0 4
26294: PPUSH
26295: LD_INT 3
26297: PPUSH
26298: LD_INT 12
26300: PPUSH
26301: CALL_OW 12
26305: PPUSH
26306: CALL_OW 272
26310: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26311: LD_ADDR_VAR 0 3
26315: PUSH
26316: LD_VAR 0 1
26320: PPUSH
26321: CALL_OW 251
26325: PPUSH
26326: LD_VAR 0 4
26330: PPUSH
26331: LD_INT 3
26333: PPUSH
26334: LD_INT 12
26336: PPUSH
26337: CALL_OW 12
26341: PPUSH
26342: CALL_OW 273
26346: ST_TO_ADDR
// if ValidHex ( x , y ) then
26347: LD_VAR 0 2
26351: PPUSH
26352: LD_VAR 0 3
26356: PPUSH
26357: CALL_OW 488
26361: IFFALSE 26396
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26363: LD_VAR 0 1
26367: PPUSH
26368: LD_VAR 0 2
26372: PPUSH
26373: LD_VAR 0 3
26377: PPUSH
26378: LD_INT 3
26380: PPUSH
26381: LD_INT 6
26383: PPUSH
26384: CALL_OW 12
26388: PPUSH
26389: LD_INT 1
26391: PPUSH
26392: CALL_OW 483
// end ;
26396: GO 26256
26398: POP
26399: POP
// end ;
26400: PPOPN 5
26402: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26403: LD_EXP 37
26407: PUSH
26408: LD_EXP 72
26412: AND
26413: IFFALSE 26507
26415: GO 26417
26417: DISABLE
26418: LD_INT 0
26420: PPUSH
26421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26422: LD_ADDR_VAR 0 2
26426: PUSH
26427: LD_INT 22
26429: PUSH
26430: LD_OWVAR 2
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 32
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 21
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: LIST
26463: PPUSH
26464: CALL_OW 69
26468: ST_TO_ADDR
// if not tmp then
26469: LD_VAR 0 2
26473: NOT
26474: IFFALSE 26478
// exit ;
26476: GO 26507
// for i in tmp do
26478: LD_ADDR_VAR 0 1
26482: PUSH
26483: LD_VAR 0 2
26487: PUSH
26488: FOR_IN
26489: IFFALSE 26505
// SetFuel ( i , 0 ) ;
26491: LD_VAR 0 1
26495: PPUSH
26496: LD_INT 0
26498: PPUSH
26499: CALL_OW 240
26503: GO 26488
26505: POP
26506: POP
// end ;
26507: PPOPN 2
26509: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26510: LD_EXP 37
26514: PUSH
26515: LD_EXP 73
26519: AND
26520: IFFALSE 26586
26522: GO 26524
26524: DISABLE
26525: LD_INT 0
26527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26528: LD_ADDR_VAR 0 1
26532: PUSH
26533: LD_INT 22
26535: PUSH
26536: LD_OWVAR 2
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 30
26547: PUSH
26548: LD_INT 29
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PPUSH
26559: CALL_OW 69
26563: ST_TO_ADDR
// if not tmp then
26564: LD_VAR 0 1
26568: NOT
26569: IFFALSE 26573
// exit ;
26571: GO 26586
// DestroyUnit ( tmp [ 1 ] ) ;
26573: LD_VAR 0 1
26577: PUSH
26578: LD_INT 1
26580: ARRAY
26581: PPUSH
26582: CALL_OW 65
// end ;
26586: PPOPN 1
26588: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26589: LD_EXP 37
26593: PUSH
26594: LD_EXP 75
26598: AND
26599: IFFALSE 26728
26601: GO 26603
26603: DISABLE
26604: LD_INT 0
26606: PPUSH
// begin uc_side := 0 ;
26607: LD_ADDR_OWVAR 20
26611: PUSH
26612: LD_INT 0
26614: ST_TO_ADDR
// uc_nation := nation_arabian ;
26615: LD_ADDR_OWVAR 21
26619: PUSH
26620: LD_INT 2
26622: ST_TO_ADDR
// hc_gallery :=  ;
26623: LD_ADDR_OWVAR 33
26627: PUSH
26628: LD_STRING 
26630: ST_TO_ADDR
// hc_name :=  ;
26631: LD_ADDR_OWVAR 26
26635: PUSH
26636: LD_STRING 
26638: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26639: LD_INT 1
26641: PPUSH
26642: LD_INT 11
26644: PPUSH
26645: LD_INT 10
26647: PPUSH
26648: CALL_OW 380
// un := CreateHuman ;
26652: LD_ADDR_VAR 0 1
26656: PUSH
26657: CALL_OW 44
26661: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26662: LD_VAR 0 1
26666: PPUSH
26667: LD_INT 1
26669: PPUSH
26670: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26674: LD_INT 35
26676: PPUSH
26677: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26681: LD_VAR 0 1
26685: PPUSH
26686: LD_INT 22
26688: PUSH
26689: LD_OWVAR 2
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PPUSH
26698: CALL_OW 69
26702: PPUSH
26703: LD_VAR 0 1
26707: PPUSH
26708: CALL_OW 74
26712: PPUSH
26713: CALL_OW 115
// until IsDead ( un ) ;
26717: LD_VAR 0 1
26721: PPUSH
26722: CALL_OW 301
26726: IFFALSE 26674
// end ;
26728: PPOPN 1
26730: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26731: LD_EXP 37
26735: PUSH
26736: LD_EXP 77
26740: AND
26741: IFFALSE 26753
26743: GO 26745
26745: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26746: LD_STRING earthquake(getX(game), 0, 32)
26748: PPUSH
26749: CALL_OW 559
26753: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26754: LD_EXP 37
26758: PUSH
26759: LD_EXP 78
26763: AND
26764: IFFALSE 26855
26766: GO 26768
26768: DISABLE
26769: LD_INT 0
26771: PPUSH
// begin enable ;
26772: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26773: LD_ADDR_VAR 0 1
26777: PUSH
26778: LD_INT 22
26780: PUSH
26781: LD_OWVAR 2
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 21
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 33
26802: PUSH
26803: LD_INT 3
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: LIST
26814: PPUSH
26815: CALL_OW 69
26819: ST_TO_ADDR
// if not tmp then
26820: LD_VAR 0 1
26824: NOT
26825: IFFALSE 26829
// exit ;
26827: GO 26855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26829: LD_VAR 0 1
26833: PUSH
26834: LD_INT 1
26836: PPUSH
26837: LD_VAR 0 1
26841: PPUSH
26842: CALL_OW 12
26846: ARRAY
26847: PPUSH
26848: LD_INT 1
26850: PPUSH
26851: CALL_OW 234
// end ;
26855: PPOPN 1
26857: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26858: LD_EXP 37
26862: PUSH
26863: LD_EXP 79
26867: AND
26868: IFFALSE 27009
26870: GO 26872
26872: DISABLE
26873: LD_INT 0
26875: PPUSH
26876: PPUSH
26877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26878: LD_ADDR_VAR 0 3
26882: PUSH
26883: LD_INT 22
26885: PUSH
26886: LD_OWVAR 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 25
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PPUSH
26909: CALL_OW 69
26913: ST_TO_ADDR
// if not tmp then
26914: LD_VAR 0 3
26918: NOT
26919: IFFALSE 26923
// exit ;
26921: GO 27009
// un := tmp [ rand ( 1 , tmp ) ] ;
26923: LD_ADDR_VAR 0 2
26927: PUSH
26928: LD_VAR 0 3
26932: PUSH
26933: LD_INT 1
26935: PPUSH
26936: LD_VAR 0 3
26940: PPUSH
26941: CALL_OW 12
26945: ARRAY
26946: ST_TO_ADDR
// if Crawls ( un ) then
26947: LD_VAR 0 2
26951: PPUSH
26952: CALL_OW 318
26956: IFFALSE 26967
// ComWalk ( un ) ;
26958: LD_VAR 0 2
26962: PPUSH
26963: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26967: LD_VAR 0 2
26971: PPUSH
26972: LD_INT 9
26974: PPUSH
26975: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26979: LD_INT 28
26981: PPUSH
26982: LD_OWVAR 2
26986: PPUSH
26987: LD_INT 2
26989: PPUSH
26990: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26994: LD_INT 29
26996: PPUSH
26997: LD_OWVAR 2
27001: PPUSH
27002: LD_INT 2
27004: PPUSH
27005: CALL_OW 322
// end ;
27009: PPOPN 3
27011: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27012: LD_EXP 37
27016: PUSH
27017: LD_EXP 80
27021: AND
27022: IFFALSE 27133
27024: GO 27026
27026: DISABLE
27027: LD_INT 0
27029: PPUSH
27030: PPUSH
27031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27032: LD_ADDR_VAR 0 3
27036: PUSH
27037: LD_INT 22
27039: PUSH
27040: LD_OWVAR 2
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 25
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PPUSH
27063: CALL_OW 69
27067: ST_TO_ADDR
// if not tmp then
27068: LD_VAR 0 3
27072: NOT
27073: IFFALSE 27077
// exit ;
27075: GO 27133
// un := tmp [ rand ( 1 , tmp ) ] ;
27077: LD_ADDR_VAR 0 2
27081: PUSH
27082: LD_VAR 0 3
27086: PUSH
27087: LD_INT 1
27089: PPUSH
27090: LD_VAR 0 3
27094: PPUSH
27095: CALL_OW 12
27099: ARRAY
27100: ST_TO_ADDR
// if Crawls ( un ) then
27101: LD_VAR 0 2
27105: PPUSH
27106: CALL_OW 318
27110: IFFALSE 27121
// ComWalk ( un ) ;
27112: LD_VAR 0 2
27116: PPUSH
27117: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27121: LD_VAR 0 2
27125: PPUSH
27126: LD_INT 8
27128: PPUSH
27129: CALL_OW 336
// end ;
27133: PPOPN 3
27135: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27136: LD_EXP 37
27140: PUSH
27141: LD_EXP 81
27145: AND
27146: IFFALSE 27290
27148: GO 27150
27150: DISABLE
27151: LD_INT 0
27153: PPUSH
27154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27155: LD_ADDR_VAR 0 2
27159: PUSH
27160: LD_INT 22
27162: PUSH
27163: LD_OWVAR 2
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 21
27174: PUSH
27175: LD_INT 2
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 2
27184: PUSH
27185: LD_INT 34
27187: PUSH
27188: LD_INT 12
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 34
27197: PUSH
27198: LD_INT 51
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 34
27207: PUSH
27208: LD_INT 32
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: PPUSH
27226: CALL_OW 69
27230: ST_TO_ADDR
// if not tmp then
27231: LD_VAR 0 2
27235: NOT
27236: IFFALSE 27240
// exit ;
27238: GO 27290
// for i in tmp do
27240: LD_ADDR_VAR 0 1
27244: PUSH
27245: LD_VAR 0 2
27249: PUSH
27250: FOR_IN
27251: IFFALSE 27288
// if GetCargo ( i , mat_artifact ) = 0 then
27253: LD_VAR 0 1
27257: PPUSH
27258: LD_INT 4
27260: PPUSH
27261: CALL_OW 289
27265: PUSH
27266: LD_INT 0
27268: EQUAL
27269: IFFALSE 27286
// SetCargo ( i , mat_siberit , 100 ) ;
27271: LD_VAR 0 1
27275: PPUSH
27276: LD_INT 3
27278: PPUSH
27279: LD_INT 100
27281: PPUSH
27282: CALL_OW 290
27286: GO 27250
27288: POP
27289: POP
// end ;
27290: PPOPN 2
27292: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27293: LD_EXP 37
27297: PUSH
27298: LD_EXP 82
27302: AND
27303: IFFALSE 27486
27305: GO 27307
27307: DISABLE
27308: LD_INT 0
27310: PPUSH
27311: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27312: LD_ADDR_VAR 0 2
27316: PUSH
27317: LD_INT 22
27319: PUSH
27320: LD_OWVAR 2
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PPUSH
27329: CALL_OW 69
27333: ST_TO_ADDR
// if not tmp then
27334: LD_VAR 0 2
27338: NOT
27339: IFFALSE 27343
// exit ;
27341: GO 27486
// for i := 1 to 2 do
27343: LD_ADDR_VAR 0 1
27347: PUSH
27348: DOUBLE
27349: LD_INT 1
27351: DEC
27352: ST_TO_ADDR
27353: LD_INT 2
27355: PUSH
27356: FOR_TO
27357: IFFALSE 27484
// begin uc_side := your_side ;
27359: LD_ADDR_OWVAR 20
27363: PUSH
27364: LD_OWVAR 2
27368: ST_TO_ADDR
// uc_nation := nation_american ;
27369: LD_ADDR_OWVAR 21
27373: PUSH
27374: LD_INT 1
27376: ST_TO_ADDR
// vc_chassis := us_morphling ;
27377: LD_ADDR_OWVAR 37
27381: PUSH
27382: LD_INT 5
27384: ST_TO_ADDR
// vc_engine := engine_siberite ;
27385: LD_ADDR_OWVAR 39
27389: PUSH
27390: LD_INT 3
27392: ST_TO_ADDR
// vc_control := control_computer ;
27393: LD_ADDR_OWVAR 38
27397: PUSH
27398: LD_INT 3
27400: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27401: LD_ADDR_OWVAR 40
27405: PUSH
27406: LD_INT 10
27408: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27409: LD_VAR 0 2
27413: PUSH
27414: LD_INT 1
27416: ARRAY
27417: PPUSH
27418: CALL_OW 310
27422: NOT
27423: IFFALSE 27470
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27425: CALL_OW 45
27429: PPUSH
27430: LD_VAR 0 2
27434: PUSH
27435: LD_INT 1
27437: ARRAY
27438: PPUSH
27439: CALL_OW 250
27443: PPUSH
27444: LD_VAR 0 2
27448: PUSH
27449: LD_INT 1
27451: ARRAY
27452: PPUSH
27453: CALL_OW 251
27457: PPUSH
27458: LD_INT 12
27460: PPUSH
27461: LD_INT 1
27463: PPUSH
27464: CALL_OW 50
27468: GO 27482
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27470: CALL_OW 45
27474: PPUSH
27475: LD_INT 1
27477: PPUSH
27478: CALL_OW 51
// end ;
27482: GO 27356
27484: POP
27485: POP
// end ;
27486: PPOPN 2
27488: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27489: LD_EXP 37
27493: PUSH
27494: LD_EXP 83
27498: AND
27499: IFFALSE 27721
27501: GO 27503
27503: DISABLE
27504: LD_INT 0
27506: PPUSH
27507: PPUSH
27508: PPUSH
27509: PPUSH
27510: PPUSH
27511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27512: LD_ADDR_VAR 0 6
27516: PUSH
27517: LD_INT 22
27519: PUSH
27520: LD_OWVAR 2
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 21
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 3
27541: PUSH
27542: LD_INT 23
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: PPUSH
27561: CALL_OW 69
27565: ST_TO_ADDR
// if not tmp then
27566: LD_VAR 0 6
27570: NOT
27571: IFFALSE 27575
// exit ;
27573: GO 27721
// s1 := rand ( 1 , 4 ) ;
27575: LD_ADDR_VAR 0 2
27579: PUSH
27580: LD_INT 1
27582: PPUSH
27583: LD_INT 4
27585: PPUSH
27586: CALL_OW 12
27590: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27591: LD_ADDR_VAR 0 4
27595: PUSH
27596: LD_VAR 0 6
27600: PUSH
27601: LD_INT 1
27603: ARRAY
27604: PPUSH
27605: LD_VAR 0 2
27609: PPUSH
27610: CALL_OW 259
27614: ST_TO_ADDR
// if s1 = 1 then
27615: LD_VAR 0 2
27619: PUSH
27620: LD_INT 1
27622: EQUAL
27623: IFFALSE 27643
// s2 := rand ( 2 , 4 ) else
27625: LD_ADDR_VAR 0 3
27629: PUSH
27630: LD_INT 2
27632: PPUSH
27633: LD_INT 4
27635: PPUSH
27636: CALL_OW 12
27640: ST_TO_ADDR
27641: GO 27651
// s2 := 1 ;
27643: LD_ADDR_VAR 0 3
27647: PUSH
27648: LD_INT 1
27650: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27651: LD_ADDR_VAR 0 5
27655: PUSH
27656: LD_VAR 0 6
27660: PUSH
27661: LD_INT 1
27663: ARRAY
27664: PPUSH
27665: LD_VAR 0 3
27669: PPUSH
27670: CALL_OW 259
27674: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27675: LD_VAR 0 6
27679: PUSH
27680: LD_INT 1
27682: ARRAY
27683: PPUSH
27684: LD_VAR 0 2
27688: PPUSH
27689: LD_VAR 0 5
27693: PPUSH
27694: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27698: LD_VAR 0 6
27702: PUSH
27703: LD_INT 1
27705: ARRAY
27706: PPUSH
27707: LD_VAR 0 3
27711: PPUSH
27712: LD_VAR 0 4
27716: PPUSH
27717: CALL_OW 237
// end ;
27721: PPOPN 6
27723: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27724: LD_EXP 37
27728: PUSH
27729: LD_EXP 84
27733: AND
27734: IFFALSE 27813
27736: GO 27738
27738: DISABLE
27739: LD_INT 0
27741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27742: LD_ADDR_VAR 0 1
27746: PUSH
27747: LD_INT 22
27749: PUSH
27750: LD_OWVAR 2
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 30
27761: PUSH
27762: LD_INT 3
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PPUSH
27773: CALL_OW 69
27777: ST_TO_ADDR
// if not tmp then
27778: LD_VAR 0 1
27782: NOT
27783: IFFALSE 27787
// exit ;
27785: GO 27813
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27787: LD_VAR 0 1
27791: PUSH
27792: LD_INT 1
27794: PPUSH
27795: LD_VAR 0 1
27799: PPUSH
27800: CALL_OW 12
27804: ARRAY
27805: PPUSH
27806: LD_INT 1
27808: PPUSH
27809: CALL_OW 234
// end ;
27813: PPOPN 1
27815: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27816: LD_EXP 37
27820: PUSH
27821: LD_EXP 85
27825: AND
27826: IFFALSE 27938
27828: GO 27830
27830: DISABLE
27831: LD_INT 0
27833: PPUSH
27834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27835: LD_ADDR_VAR 0 2
27839: PUSH
27840: LD_INT 22
27842: PUSH
27843: LD_OWVAR 2
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: LD_INT 30
27857: PUSH
27858: LD_INT 27
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 30
27867: PUSH
27868: LD_INT 26
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 30
27877: PUSH
27878: LD_INT 28
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PPUSH
27895: CALL_OW 69
27899: ST_TO_ADDR
// if not tmp then
27900: LD_VAR 0 2
27904: NOT
27905: IFFALSE 27909
// exit ;
27907: GO 27938
// for i in tmp do
27909: LD_ADDR_VAR 0 1
27913: PUSH
27914: LD_VAR 0 2
27918: PUSH
27919: FOR_IN
27920: IFFALSE 27936
// SetLives ( i , 1 ) ;
27922: LD_VAR 0 1
27926: PPUSH
27927: LD_INT 1
27929: PPUSH
27930: CALL_OW 234
27934: GO 27919
27936: POP
27937: POP
// end ;
27938: PPOPN 2
27940: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27941: LD_EXP 37
27945: PUSH
27946: LD_EXP 86
27950: AND
27951: IFFALSE 28238
27953: GO 27955
27955: DISABLE
27956: LD_INT 0
27958: PPUSH
27959: PPUSH
27960: PPUSH
// begin i := rand ( 1 , 7 ) ;
27961: LD_ADDR_VAR 0 1
27965: PUSH
27966: LD_INT 1
27968: PPUSH
27969: LD_INT 7
27971: PPUSH
27972: CALL_OW 12
27976: ST_TO_ADDR
// case i of 1 :
27977: LD_VAR 0 1
27981: PUSH
27982: LD_INT 1
27984: DOUBLE
27985: EQUAL
27986: IFTRUE 27990
27988: GO 28000
27990: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27991: LD_STRING earthquake(getX(game), 0, 32)
27993: PPUSH
27994: CALL_OW 559
27998: GO 28238
28000: LD_INT 2
28002: DOUBLE
28003: EQUAL
28004: IFTRUE 28008
28006: GO 28022
28008: POP
// begin ToLua ( displayStucuk(); ) ;
28009: LD_STRING displayStucuk();
28011: PPUSH
28012: CALL_OW 559
// ResetFog ;
28016: CALL_OW 335
// end ; 3 :
28020: GO 28238
28022: LD_INT 3
28024: DOUBLE
28025: EQUAL
28026: IFTRUE 28030
28028: GO 28134
28030: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28031: LD_ADDR_VAR 0 2
28035: PUSH
28036: LD_INT 22
28038: PUSH
28039: LD_OWVAR 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 25
28050: PUSH
28051: LD_INT 1
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PPUSH
28062: CALL_OW 69
28066: ST_TO_ADDR
// if not tmp then
28067: LD_VAR 0 2
28071: NOT
28072: IFFALSE 28076
// exit ;
28074: GO 28238
// un := tmp [ rand ( 1 , tmp ) ] ;
28076: LD_ADDR_VAR 0 3
28080: PUSH
28081: LD_VAR 0 2
28085: PUSH
28086: LD_INT 1
28088: PPUSH
28089: LD_VAR 0 2
28093: PPUSH
28094: CALL_OW 12
28098: ARRAY
28099: ST_TO_ADDR
// if Crawls ( un ) then
28100: LD_VAR 0 3
28104: PPUSH
28105: CALL_OW 318
28109: IFFALSE 28120
// ComWalk ( un ) ;
28111: LD_VAR 0 3
28115: PPUSH
28116: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28120: LD_VAR 0 3
28124: PPUSH
28125: LD_INT 8
28127: PPUSH
28128: CALL_OW 336
// end ; 4 :
28132: GO 28238
28134: LD_INT 4
28136: DOUBLE
28137: EQUAL
28138: IFTRUE 28142
28140: GO 28216
28142: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28143: LD_ADDR_VAR 0 2
28147: PUSH
28148: LD_INT 22
28150: PUSH
28151: LD_OWVAR 2
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 30
28162: PUSH
28163: LD_INT 29
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PPUSH
28174: CALL_OW 69
28178: ST_TO_ADDR
// if not tmp then
28179: LD_VAR 0 2
28183: NOT
28184: IFFALSE 28188
// exit ;
28186: GO 28238
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28188: LD_VAR 0 2
28192: PUSH
28193: LD_INT 1
28195: ARRAY
28196: PPUSH
28197: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28201: LD_VAR 0 2
28205: PUSH
28206: LD_INT 1
28208: ARRAY
28209: PPUSH
28210: CALL_OW 65
// end ; 5 .. 7 :
28214: GO 28238
28216: LD_INT 5
28218: DOUBLE
28219: GREATEREQUAL
28220: IFFALSE 28228
28222: LD_INT 7
28224: DOUBLE
28225: LESSEQUAL
28226: IFTRUE 28230
28228: GO 28237
28230: POP
// StreamSibBomb ; end ;
28231: CALL 24475 0 0
28235: GO 28238
28237: POP
// end ;
28238: PPOPN 3
28240: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28241: LD_EXP 37
28245: PUSH
28246: LD_EXP 87
28250: AND
28251: IFFALSE 28407
28253: GO 28255
28255: DISABLE
28256: LD_INT 0
28258: PPUSH
28259: PPUSH
28260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28261: LD_ADDR_VAR 0 2
28265: PUSH
28266: LD_INT 81
28268: PUSH
28269: LD_OWVAR 2
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 2
28280: PUSH
28281: LD_INT 21
28283: PUSH
28284: LD_INT 1
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 21
28293: PUSH
28294: LD_INT 2
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: LIST
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PPUSH
28310: CALL_OW 69
28314: ST_TO_ADDR
// if not tmp then
28315: LD_VAR 0 2
28319: NOT
28320: IFFALSE 28324
// exit ;
28322: GO 28407
// p := 0 ;
28324: LD_ADDR_VAR 0 3
28328: PUSH
28329: LD_INT 0
28331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28332: LD_INT 35
28334: PPUSH
28335: CALL_OW 67
// p := p + 1 ;
28339: LD_ADDR_VAR 0 3
28343: PUSH
28344: LD_VAR 0 3
28348: PUSH
28349: LD_INT 1
28351: PLUS
28352: ST_TO_ADDR
// for i in tmp do
28353: LD_ADDR_VAR 0 1
28357: PUSH
28358: LD_VAR 0 2
28362: PUSH
28363: FOR_IN
28364: IFFALSE 28395
// if GetLives ( i ) < 1000 then
28366: LD_VAR 0 1
28370: PPUSH
28371: CALL_OW 256
28375: PUSH
28376: LD_INT 1000
28378: LESS
28379: IFFALSE 28393
// SetLives ( i , 1000 ) ;
28381: LD_VAR 0 1
28385: PPUSH
28386: LD_INT 1000
28388: PPUSH
28389: CALL_OW 234
28393: GO 28363
28395: POP
28396: POP
// until p > 20 ;
28397: LD_VAR 0 3
28401: PUSH
28402: LD_INT 20
28404: GREATER
28405: IFFALSE 28332
// end ;
28407: PPOPN 3
28409: END
// every 0 0$1 trigger StreamModeActive and sTime do
28410: LD_EXP 37
28414: PUSH
28415: LD_EXP 88
28419: AND
28420: IFFALSE 28455
28422: GO 28424
28424: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28425: LD_INT 28
28427: PPUSH
28428: LD_OWVAR 2
28432: PPUSH
28433: LD_INT 2
28435: PPUSH
28436: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28440: LD_INT 30
28442: PPUSH
28443: LD_OWVAR 2
28447: PPUSH
28448: LD_INT 2
28450: PPUSH
28451: CALL_OW 322
// end ;
28455: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28456: LD_EXP 37
28460: PUSH
28461: LD_EXP 89
28465: AND
28466: IFFALSE 28587
28468: GO 28470
28470: DISABLE
28471: LD_INT 0
28473: PPUSH
28474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28475: LD_ADDR_VAR 0 2
28479: PUSH
28480: LD_INT 22
28482: PUSH
28483: LD_OWVAR 2
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 21
28494: PUSH
28495: LD_INT 1
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 3
28504: PUSH
28505: LD_INT 23
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: LIST
28523: PPUSH
28524: CALL_OW 69
28528: ST_TO_ADDR
// if not tmp then
28529: LD_VAR 0 2
28533: NOT
28534: IFFALSE 28538
// exit ;
28536: GO 28587
// for i in tmp do
28538: LD_ADDR_VAR 0 1
28542: PUSH
28543: LD_VAR 0 2
28547: PUSH
28548: FOR_IN
28549: IFFALSE 28585
// begin if Crawls ( i ) then
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL_OW 318
28560: IFFALSE 28571
// ComWalk ( i ) ;
28562: LD_VAR 0 1
28566: PPUSH
28567: CALL_OW 138
// SetClass ( i , 2 ) ;
28571: LD_VAR 0 1
28575: PPUSH
28576: LD_INT 2
28578: PPUSH
28579: CALL_OW 336
// end ;
28583: GO 28548
28585: POP
28586: POP
// end ;
28587: PPOPN 2
28589: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28590: LD_EXP 37
28594: PUSH
28595: LD_EXP 90
28599: AND
28600: IFFALSE 28888
28602: GO 28604
28604: DISABLE
28605: LD_INT 0
28607: PPUSH
28608: PPUSH
28609: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28610: LD_OWVAR 2
28614: PPUSH
28615: LD_INT 9
28617: PPUSH
28618: LD_INT 1
28620: PPUSH
28621: LD_INT 1
28623: PPUSH
28624: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28628: LD_INT 9
28630: PPUSH
28631: LD_OWVAR 2
28635: PPUSH
28636: CALL_OW 343
// uc_side := 9 ;
28640: LD_ADDR_OWVAR 20
28644: PUSH
28645: LD_INT 9
28647: ST_TO_ADDR
// uc_nation := 2 ;
28648: LD_ADDR_OWVAR 21
28652: PUSH
28653: LD_INT 2
28655: ST_TO_ADDR
// hc_name := Dark Warrior ;
28656: LD_ADDR_OWVAR 26
28660: PUSH
28661: LD_STRING Dark Warrior
28663: ST_TO_ADDR
// hc_gallery :=  ;
28664: LD_ADDR_OWVAR 33
28668: PUSH
28669: LD_STRING 
28671: ST_TO_ADDR
// hc_noskilllimit := true ;
28672: LD_ADDR_OWVAR 76
28676: PUSH
28677: LD_INT 1
28679: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28680: LD_ADDR_OWVAR 31
28684: PUSH
28685: LD_INT 30
28687: PUSH
28688: LD_INT 30
28690: PUSH
28691: LD_INT 30
28693: PUSH
28694: LD_INT 30
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: ST_TO_ADDR
// un := CreateHuman ;
28703: LD_ADDR_VAR 0 3
28707: PUSH
28708: CALL_OW 44
28712: ST_TO_ADDR
// hc_noskilllimit := false ;
28713: LD_ADDR_OWVAR 76
28717: PUSH
28718: LD_INT 0
28720: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28721: LD_VAR 0 3
28725: PPUSH
28726: LD_INT 1
28728: PPUSH
28729: CALL_OW 51
// ToLua ( playRanger() ) ;
28733: LD_STRING playRanger()
28735: PPUSH
28736: CALL_OW 559
// p := 0 ;
28740: LD_ADDR_VAR 0 2
28744: PUSH
28745: LD_INT 0
28747: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28748: LD_INT 35
28750: PPUSH
28751: CALL_OW 67
// p := p + 1 ;
28755: LD_ADDR_VAR 0 2
28759: PUSH
28760: LD_VAR 0 2
28764: PUSH
28765: LD_INT 1
28767: PLUS
28768: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28769: LD_VAR 0 3
28773: PPUSH
28774: CALL_OW 256
28778: PUSH
28779: LD_INT 1000
28781: LESS
28782: IFFALSE 28796
// SetLives ( un , 1000 ) ;
28784: LD_VAR 0 3
28788: PPUSH
28789: LD_INT 1000
28791: PPUSH
28792: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28796: LD_VAR 0 3
28800: PPUSH
28801: LD_INT 81
28803: PUSH
28804: LD_OWVAR 2
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 91
28815: PUSH
28816: LD_VAR 0 3
28820: PUSH
28821: LD_INT 30
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: LIST
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PPUSH
28833: CALL_OW 69
28837: PPUSH
28838: LD_VAR 0 3
28842: PPUSH
28843: CALL_OW 74
28847: PPUSH
28848: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28852: LD_VAR 0 2
28856: PUSH
28857: LD_INT 80
28859: GREATER
28860: PUSH
28861: LD_VAR 0 3
28865: PPUSH
28866: CALL_OW 301
28870: OR
28871: IFFALSE 28748
// if un then
28873: LD_VAR 0 3
28877: IFFALSE 28888
// RemoveUnit ( un ) ;
28879: LD_VAR 0 3
28883: PPUSH
28884: CALL_OW 64
// end ;
28888: PPOPN 3
28890: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28891: LD_EXP 91
28895: IFFALSE 29011
28897: GO 28899
28899: DISABLE
28900: LD_INT 0
28902: PPUSH
28903: PPUSH
28904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28905: LD_ADDR_VAR 0 2
28909: PUSH
28910: LD_INT 81
28912: PUSH
28913: LD_OWVAR 2
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 21
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PPUSH
28936: CALL_OW 69
28940: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28941: LD_STRING playComputer()
28943: PPUSH
28944: CALL_OW 559
// if not tmp then
28948: LD_VAR 0 2
28952: NOT
28953: IFFALSE 28957
// exit ;
28955: GO 29011
// for i in tmp do
28957: LD_ADDR_VAR 0 1
28961: PUSH
28962: LD_VAR 0 2
28966: PUSH
28967: FOR_IN
28968: IFFALSE 29009
// for j := 1 to 4 do
28970: LD_ADDR_VAR 0 3
28974: PUSH
28975: DOUBLE
28976: LD_INT 1
28978: DEC
28979: ST_TO_ADDR
28980: LD_INT 4
28982: PUSH
28983: FOR_TO
28984: IFFALSE 29005
// SetSkill ( i , j , 10 ) ;
28986: LD_VAR 0 1
28990: PPUSH
28991: LD_VAR 0 3
28995: PPUSH
28996: LD_INT 10
28998: PPUSH
28999: CALL_OW 237
29003: GO 28983
29005: POP
29006: POP
29007: GO 28967
29009: POP
29010: POP
// end ;
29011: PPOPN 3
29013: END
// every 0 0$1 trigger s30 do var i , tmp ;
29014: LD_EXP 92
29018: IFFALSE 29087
29020: GO 29022
29022: DISABLE
29023: LD_INT 0
29025: PPUSH
29026: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29027: LD_ADDR_VAR 0 2
29031: PUSH
29032: LD_INT 22
29034: PUSH
29035: LD_OWVAR 2
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PPUSH
29044: CALL_OW 69
29048: ST_TO_ADDR
// if not tmp then
29049: LD_VAR 0 2
29053: NOT
29054: IFFALSE 29058
// exit ;
29056: GO 29087
// for i in tmp do
29058: LD_ADDR_VAR 0 1
29062: PUSH
29063: LD_VAR 0 2
29067: PUSH
29068: FOR_IN
29069: IFFALSE 29085
// SetLives ( i , 300 ) ;
29071: LD_VAR 0 1
29075: PPUSH
29076: LD_INT 300
29078: PPUSH
29079: CALL_OW 234
29083: GO 29068
29085: POP
29086: POP
// end ;
29087: PPOPN 2
29089: END
// every 0 0$1 trigger s60 do var i , tmp ;
29090: LD_EXP 93
29094: IFFALSE 29163
29096: GO 29098
29098: DISABLE
29099: LD_INT 0
29101: PPUSH
29102: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29103: LD_ADDR_VAR 0 2
29107: PUSH
29108: LD_INT 22
29110: PUSH
29111: LD_OWVAR 2
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PPUSH
29120: CALL_OW 69
29124: ST_TO_ADDR
// if not tmp then
29125: LD_VAR 0 2
29129: NOT
29130: IFFALSE 29134
// exit ;
29132: GO 29163
// for i in tmp do
29134: LD_ADDR_VAR 0 1
29138: PUSH
29139: LD_VAR 0 2
29143: PUSH
29144: FOR_IN
29145: IFFALSE 29161
// SetLives ( i , 600 ) ;
29147: LD_VAR 0 1
29151: PPUSH
29152: LD_INT 600
29154: PPUSH
29155: CALL_OW 234
29159: GO 29144
29161: POP
29162: POP
// end ;
29163: PPOPN 2
29165: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29166: LD_INT 0
29168: PPUSH
// case cmd of 301 :
29169: LD_VAR 0 1
29173: PUSH
29174: LD_INT 301
29176: DOUBLE
29177: EQUAL
29178: IFTRUE 29182
29180: GO 29214
29182: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29183: LD_VAR 0 6
29187: PPUSH
29188: LD_VAR 0 7
29192: PPUSH
29193: LD_VAR 0 8
29197: PPUSH
29198: LD_VAR 0 4
29202: PPUSH
29203: LD_VAR 0 5
29207: PPUSH
29208: CALL 30415 0 5
29212: GO 29335
29214: LD_INT 302
29216: DOUBLE
29217: EQUAL
29218: IFTRUE 29222
29220: GO 29259
29222: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29223: LD_VAR 0 6
29227: PPUSH
29228: LD_VAR 0 7
29232: PPUSH
29233: LD_VAR 0 8
29237: PPUSH
29238: LD_VAR 0 9
29242: PPUSH
29243: LD_VAR 0 4
29247: PPUSH
29248: LD_VAR 0 5
29252: PPUSH
29253: CALL 30506 0 6
29257: GO 29335
29259: LD_INT 303
29261: DOUBLE
29262: EQUAL
29263: IFTRUE 29267
29265: GO 29304
29267: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29268: LD_VAR 0 6
29272: PPUSH
29273: LD_VAR 0 7
29277: PPUSH
29278: LD_VAR 0 8
29282: PPUSH
29283: LD_VAR 0 9
29287: PPUSH
29288: LD_VAR 0 4
29292: PPUSH
29293: LD_VAR 0 5
29297: PPUSH
29298: CALL 29340 0 6
29302: GO 29335
29304: LD_INT 304
29306: DOUBLE
29307: EQUAL
29308: IFTRUE 29312
29310: GO 29334
29312: POP
// hHackTeleport ( unit , x , y ) ; end ;
29313: LD_VAR 0 2
29317: PPUSH
29318: LD_VAR 0 4
29322: PPUSH
29323: LD_VAR 0 5
29327: PPUSH
29328: CALL 31099 0 3
29332: GO 29335
29334: POP
// end ;
29335: LD_VAR 0 12
29339: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29340: LD_INT 0
29342: PPUSH
29343: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29344: LD_VAR 0 1
29348: PUSH
29349: LD_INT 1
29351: LESS
29352: PUSH
29353: LD_VAR 0 1
29357: PUSH
29358: LD_INT 3
29360: GREATER
29361: OR
29362: PUSH
29363: LD_VAR 0 5
29367: PPUSH
29368: LD_VAR 0 6
29372: PPUSH
29373: CALL_OW 428
29377: OR
29378: IFFALSE 29382
// exit ;
29380: GO 30102
// uc_side := your_side ;
29382: LD_ADDR_OWVAR 20
29386: PUSH
29387: LD_OWVAR 2
29391: ST_TO_ADDR
// uc_nation := nation ;
29392: LD_ADDR_OWVAR 21
29396: PUSH
29397: LD_VAR 0 1
29401: ST_TO_ADDR
// bc_level = 1 ;
29402: LD_ADDR_OWVAR 43
29406: PUSH
29407: LD_INT 1
29409: ST_TO_ADDR
// case btype of 1 :
29410: LD_VAR 0 2
29414: PUSH
29415: LD_INT 1
29417: DOUBLE
29418: EQUAL
29419: IFTRUE 29423
29421: GO 29434
29423: POP
// bc_type := b_depot ; 2 :
29424: LD_ADDR_OWVAR 42
29428: PUSH
29429: LD_INT 0
29431: ST_TO_ADDR
29432: GO 30046
29434: LD_INT 2
29436: DOUBLE
29437: EQUAL
29438: IFTRUE 29442
29440: GO 29453
29442: POP
// bc_type := b_warehouse ; 3 :
29443: LD_ADDR_OWVAR 42
29447: PUSH
29448: LD_INT 1
29450: ST_TO_ADDR
29451: GO 30046
29453: LD_INT 3
29455: DOUBLE
29456: EQUAL
29457: IFTRUE 29461
29459: GO 29472
29461: POP
// bc_type := b_lab ; 4 .. 9 :
29462: LD_ADDR_OWVAR 42
29466: PUSH
29467: LD_INT 6
29469: ST_TO_ADDR
29470: GO 30046
29472: LD_INT 4
29474: DOUBLE
29475: GREATEREQUAL
29476: IFFALSE 29484
29478: LD_INT 9
29480: DOUBLE
29481: LESSEQUAL
29482: IFTRUE 29486
29484: GO 29538
29486: POP
// begin bc_type := b_lab_half ;
29487: LD_ADDR_OWVAR 42
29491: PUSH
29492: LD_INT 7
29494: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29495: LD_ADDR_OWVAR 44
29499: PUSH
29500: LD_INT 10
29502: PUSH
29503: LD_INT 11
29505: PUSH
29506: LD_INT 12
29508: PUSH
29509: LD_INT 15
29511: PUSH
29512: LD_INT 14
29514: PUSH
29515: LD_INT 13
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: PUSH
29526: LD_VAR 0 2
29530: PUSH
29531: LD_INT 3
29533: MINUS
29534: ARRAY
29535: ST_TO_ADDR
// end ; 10 .. 13 :
29536: GO 30046
29538: LD_INT 10
29540: DOUBLE
29541: GREATEREQUAL
29542: IFFALSE 29550
29544: LD_INT 13
29546: DOUBLE
29547: LESSEQUAL
29548: IFTRUE 29552
29550: GO 29629
29552: POP
// begin bc_type := b_lab_full ;
29553: LD_ADDR_OWVAR 42
29557: PUSH
29558: LD_INT 8
29560: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29561: LD_ADDR_OWVAR 44
29565: PUSH
29566: LD_INT 10
29568: PUSH
29569: LD_INT 12
29571: PUSH
29572: LD_INT 14
29574: PUSH
29575: LD_INT 13
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: PUSH
29584: LD_VAR 0 2
29588: PUSH
29589: LD_INT 9
29591: MINUS
29592: ARRAY
29593: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29594: LD_ADDR_OWVAR 45
29598: PUSH
29599: LD_INT 11
29601: PUSH
29602: LD_INT 15
29604: PUSH
29605: LD_INT 12
29607: PUSH
29608: LD_INT 15
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: PUSH
29617: LD_VAR 0 2
29621: PUSH
29622: LD_INT 9
29624: MINUS
29625: ARRAY
29626: ST_TO_ADDR
// end ; 14 :
29627: GO 30046
29629: LD_INT 14
29631: DOUBLE
29632: EQUAL
29633: IFTRUE 29637
29635: GO 29648
29637: POP
// bc_type := b_workshop ; 15 :
29638: LD_ADDR_OWVAR 42
29642: PUSH
29643: LD_INT 2
29645: ST_TO_ADDR
29646: GO 30046
29648: LD_INT 15
29650: DOUBLE
29651: EQUAL
29652: IFTRUE 29656
29654: GO 29667
29656: POP
// bc_type := b_factory ; 16 :
29657: LD_ADDR_OWVAR 42
29661: PUSH
29662: LD_INT 3
29664: ST_TO_ADDR
29665: GO 30046
29667: LD_INT 16
29669: DOUBLE
29670: EQUAL
29671: IFTRUE 29675
29673: GO 29686
29675: POP
// bc_type := b_ext_gun ; 17 :
29676: LD_ADDR_OWVAR 42
29680: PUSH
29681: LD_INT 17
29683: ST_TO_ADDR
29684: GO 30046
29686: LD_INT 17
29688: DOUBLE
29689: EQUAL
29690: IFTRUE 29694
29692: GO 29722
29694: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29695: LD_ADDR_OWVAR 42
29699: PUSH
29700: LD_INT 19
29702: PUSH
29703: LD_INT 23
29705: PUSH
29706: LD_INT 19
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: PUSH
29714: LD_VAR 0 1
29718: ARRAY
29719: ST_TO_ADDR
29720: GO 30046
29722: LD_INT 18
29724: DOUBLE
29725: EQUAL
29726: IFTRUE 29730
29728: GO 29741
29730: POP
// bc_type := b_ext_radar ; 19 :
29731: LD_ADDR_OWVAR 42
29735: PUSH
29736: LD_INT 20
29738: ST_TO_ADDR
29739: GO 30046
29741: LD_INT 19
29743: DOUBLE
29744: EQUAL
29745: IFTRUE 29749
29747: GO 29760
29749: POP
// bc_type := b_ext_radio ; 20 :
29750: LD_ADDR_OWVAR 42
29754: PUSH
29755: LD_INT 22
29757: ST_TO_ADDR
29758: GO 30046
29760: LD_INT 20
29762: DOUBLE
29763: EQUAL
29764: IFTRUE 29768
29766: GO 29779
29768: POP
// bc_type := b_ext_siberium ; 21 :
29769: LD_ADDR_OWVAR 42
29773: PUSH
29774: LD_INT 21
29776: ST_TO_ADDR
29777: GO 30046
29779: LD_INT 21
29781: DOUBLE
29782: EQUAL
29783: IFTRUE 29787
29785: GO 29798
29787: POP
// bc_type := b_ext_computer ; 22 :
29788: LD_ADDR_OWVAR 42
29792: PUSH
29793: LD_INT 24
29795: ST_TO_ADDR
29796: GO 30046
29798: LD_INT 22
29800: DOUBLE
29801: EQUAL
29802: IFTRUE 29806
29804: GO 29817
29806: POP
// bc_type := b_ext_track ; 23 :
29807: LD_ADDR_OWVAR 42
29811: PUSH
29812: LD_INT 16
29814: ST_TO_ADDR
29815: GO 30046
29817: LD_INT 23
29819: DOUBLE
29820: EQUAL
29821: IFTRUE 29825
29823: GO 29836
29825: POP
// bc_type := b_ext_laser ; 24 :
29826: LD_ADDR_OWVAR 42
29830: PUSH
29831: LD_INT 25
29833: ST_TO_ADDR
29834: GO 30046
29836: LD_INT 24
29838: DOUBLE
29839: EQUAL
29840: IFTRUE 29844
29842: GO 29855
29844: POP
// bc_type := b_control_tower ; 25 :
29845: LD_ADDR_OWVAR 42
29849: PUSH
29850: LD_INT 36
29852: ST_TO_ADDR
29853: GO 30046
29855: LD_INT 25
29857: DOUBLE
29858: EQUAL
29859: IFTRUE 29863
29861: GO 29874
29863: POP
// bc_type := b_breastwork ; 26 :
29864: LD_ADDR_OWVAR 42
29868: PUSH
29869: LD_INT 31
29871: ST_TO_ADDR
29872: GO 30046
29874: LD_INT 26
29876: DOUBLE
29877: EQUAL
29878: IFTRUE 29882
29880: GO 29893
29882: POP
// bc_type := b_bunker ; 27 :
29883: LD_ADDR_OWVAR 42
29887: PUSH
29888: LD_INT 32
29890: ST_TO_ADDR
29891: GO 30046
29893: LD_INT 27
29895: DOUBLE
29896: EQUAL
29897: IFTRUE 29901
29899: GO 29912
29901: POP
// bc_type := b_turret ; 28 :
29902: LD_ADDR_OWVAR 42
29906: PUSH
29907: LD_INT 33
29909: ST_TO_ADDR
29910: GO 30046
29912: LD_INT 28
29914: DOUBLE
29915: EQUAL
29916: IFTRUE 29920
29918: GO 29931
29920: POP
// bc_type := b_armoury ; 29 :
29921: LD_ADDR_OWVAR 42
29925: PUSH
29926: LD_INT 4
29928: ST_TO_ADDR
29929: GO 30046
29931: LD_INT 29
29933: DOUBLE
29934: EQUAL
29935: IFTRUE 29939
29937: GO 29950
29939: POP
// bc_type := b_barracks ; 30 :
29940: LD_ADDR_OWVAR 42
29944: PUSH
29945: LD_INT 5
29947: ST_TO_ADDR
29948: GO 30046
29950: LD_INT 30
29952: DOUBLE
29953: EQUAL
29954: IFTRUE 29958
29956: GO 29969
29958: POP
// bc_type := b_solar_power ; 31 :
29959: LD_ADDR_OWVAR 42
29963: PUSH
29964: LD_INT 27
29966: ST_TO_ADDR
29967: GO 30046
29969: LD_INT 31
29971: DOUBLE
29972: EQUAL
29973: IFTRUE 29977
29975: GO 29988
29977: POP
// bc_type := b_oil_power ; 32 :
29978: LD_ADDR_OWVAR 42
29982: PUSH
29983: LD_INT 26
29985: ST_TO_ADDR
29986: GO 30046
29988: LD_INT 32
29990: DOUBLE
29991: EQUAL
29992: IFTRUE 29996
29994: GO 30007
29996: POP
// bc_type := b_siberite_power ; 33 :
29997: LD_ADDR_OWVAR 42
30001: PUSH
30002: LD_INT 28
30004: ST_TO_ADDR
30005: GO 30046
30007: LD_INT 33
30009: DOUBLE
30010: EQUAL
30011: IFTRUE 30015
30013: GO 30026
30015: POP
// bc_type := b_oil_mine ; 34 :
30016: LD_ADDR_OWVAR 42
30020: PUSH
30021: LD_INT 29
30023: ST_TO_ADDR
30024: GO 30046
30026: LD_INT 34
30028: DOUBLE
30029: EQUAL
30030: IFTRUE 30034
30032: GO 30045
30034: POP
// bc_type := b_siberite_mine ; end ;
30035: LD_ADDR_OWVAR 42
30039: PUSH
30040: LD_INT 30
30042: ST_TO_ADDR
30043: GO 30046
30045: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30046: LD_ADDR_VAR 0 8
30050: PUSH
30051: LD_VAR 0 5
30055: PPUSH
30056: LD_VAR 0 6
30060: PPUSH
30061: LD_VAR 0 3
30065: PPUSH
30066: CALL_OW 47
30070: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30071: LD_OWVAR 42
30075: PUSH
30076: LD_INT 32
30078: PUSH
30079: LD_INT 33
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: IN
30086: IFFALSE 30102
// PlaceWeaponTurret ( b , weapon ) ;
30088: LD_VAR 0 8
30092: PPUSH
30093: LD_VAR 0 4
30097: PPUSH
30098: CALL_OW 431
// end ;
30102: LD_VAR 0 7
30106: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30107: LD_INT 0
30109: PPUSH
30110: PPUSH
30111: PPUSH
30112: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30113: LD_ADDR_VAR 0 4
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_OWVAR 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 2
30132: PUSH
30133: LD_INT 30
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 30
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: LIST
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PPUSH
30162: CALL_OW 69
30166: ST_TO_ADDR
// if not tmp then
30167: LD_VAR 0 4
30171: NOT
30172: IFFALSE 30176
// exit ;
30174: GO 30235
// for i in tmp do
30176: LD_ADDR_VAR 0 2
30180: PUSH
30181: LD_VAR 0 4
30185: PUSH
30186: FOR_IN
30187: IFFALSE 30233
// for j = 1 to 3 do
30189: LD_ADDR_VAR 0 3
30193: PUSH
30194: DOUBLE
30195: LD_INT 1
30197: DEC
30198: ST_TO_ADDR
30199: LD_INT 3
30201: PUSH
30202: FOR_TO
30203: IFFALSE 30229
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30205: LD_VAR 0 2
30209: PPUSH
30210: CALL_OW 274
30214: PPUSH
30215: LD_VAR 0 3
30219: PPUSH
30220: LD_INT 99999
30222: PPUSH
30223: CALL_OW 277
30227: GO 30202
30229: POP
30230: POP
30231: GO 30186
30233: POP
30234: POP
// end ;
30235: LD_VAR 0 1
30239: RET
// export function hHackSetLevel10 ; var i , j ; begin
30240: LD_INT 0
30242: PPUSH
30243: PPUSH
30244: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30245: LD_ADDR_VAR 0 2
30249: PUSH
30250: LD_INT 21
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PPUSH
30260: CALL_OW 69
30264: PUSH
30265: FOR_IN
30266: IFFALSE 30318
// if IsSelected ( i ) then
30268: LD_VAR 0 2
30272: PPUSH
30273: CALL_OW 306
30277: IFFALSE 30316
// begin for j := 1 to 4 do
30279: LD_ADDR_VAR 0 3
30283: PUSH
30284: DOUBLE
30285: LD_INT 1
30287: DEC
30288: ST_TO_ADDR
30289: LD_INT 4
30291: PUSH
30292: FOR_TO
30293: IFFALSE 30314
// SetSkill ( i , j , 10 ) ;
30295: LD_VAR 0 2
30299: PPUSH
30300: LD_VAR 0 3
30304: PPUSH
30305: LD_INT 10
30307: PPUSH
30308: CALL_OW 237
30312: GO 30292
30314: POP
30315: POP
// end ;
30316: GO 30265
30318: POP
30319: POP
// end ;
30320: LD_VAR 0 1
30324: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30325: LD_INT 0
30327: PPUSH
30328: PPUSH
30329: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30330: LD_ADDR_VAR 0 2
30334: PUSH
30335: LD_INT 22
30337: PUSH
30338: LD_OWVAR 2
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 21
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PPUSH
30361: CALL_OW 69
30365: PUSH
30366: FOR_IN
30367: IFFALSE 30408
// begin for j := 1 to 4 do
30369: LD_ADDR_VAR 0 3
30373: PUSH
30374: DOUBLE
30375: LD_INT 1
30377: DEC
30378: ST_TO_ADDR
30379: LD_INT 4
30381: PUSH
30382: FOR_TO
30383: IFFALSE 30404
// SetSkill ( i , j , 10 ) ;
30385: LD_VAR 0 2
30389: PPUSH
30390: LD_VAR 0 3
30394: PPUSH
30395: LD_INT 10
30397: PPUSH
30398: CALL_OW 237
30402: GO 30382
30404: POP
30405: POP
// end ;
30406: GO 30366
30408: POP
30409: POP
// end ;
30410: LD_VAR 0 1
30414: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30415: LD_INT 0
30417: PPUSH
// uc_side := your_side ;
30418: LD_ADDR_OWVAR 20
30422: PUSH
30423: LD_OWVAR 2
30427: ST_TO_ADDR
// uc_nation := nation ;
30428: LD_ADDR_OWVAR 21
30432: PUSH
30433: LD_VAR 0 1
30437: ST_TO_ADDR
// InitHc ;
30438: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30442: LD_INT 0
30444: PPUSH
30445: LD_VAR 0 2
30449: PPUSH
30450: LD_VAR 0 3
30454: PPUSH
30455: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30459: LD_VAR 0 4
30463: PPUSH
30464: LD_VAR 0 5
30468: PPUSH
30469: CALL_OW 428
30473: PUSH
30474: LD_INT 0
30476: EQUAL
30477: IFFALSE 30501
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30479: CALL_OW 44
30483: PPUSH
30484: LD_VAR 0 4
30488: PPUSH
30489: LD_VAR 0 5
30493: PPUSH
30494: LD_INT 1
30496: PPUSH
30497: CALL_OW 48
// end ;
30501: LD_VAR 0 6
30505: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30506: LD_INT 0
30508: PPUSH
30509: PPUSH
// uc_side := your_side ;
30510: LD_ADDR_OWVAR 20
30514: PUSH
30515: LD_OWVAR 2
30519: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30520: LD_VAR 0 1
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: LD_INT 2
30530: PUSH
30531: LD_INT 3
30533: PUSH
30534: LD_INT 4
30536: PUSH
30537: LD_INT 5
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: IN
30547: IFFALSE 30559
// uc_nation := nation_american else
30549: LD_ADDR_OWVAR 21
30553: PUSH
30554: LD_INT 1
30556: ST_TO_ADDR
30557: GO 30602
// if chassis in [ 11 , 12 , 13 , 14 ] then
30559: LD_VAR 0 1
30563: PUSH
30564: LD_INT 11
30566: PUSH
30567: LD_INT 12
30569: PUSH
30570: LD_INT 13
30572: PUSH
30573: LD_INT 14
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: IN
30582: IFFALSE 30594
// uc_nation := nation_arabian else
30584: LD_ADDR_OWVAR 21
30588: PUSH
30589: LD_INT 2
30591: ST_TO_ADDR
30592: GO 30602
// uc_nation := nation_russian ;
30594: LD_ADDR_OWVAR 21
30598: PUSH
30599: LD_INT 3
30601: ST_TO_ADDR
// vc_chassis := chassis ;
30602: LD_ADDR_OWVAR 37
30606: PUSH
30607: LD_VAR 0 1
30611: ST_TO_ADDR
// vc_engine := engine ;
30612: LD_ADDR_OWVAR 39
30616: PUSH
30617: LD_VAR 0 2
30621: ST_TO_ADDR
// vc_control := control ;
30622: LD_ADDR_OWVAR 38
30626: PUSH
30627: LD_VAR 0 3
30631: ST_TO_ADDR
// vc_weapon := weapon ;
30632: LD_ADDR_OWVAR 40
30636: PUSH
30637: LD_VAR 0 4
30641: ST_TO_ADDR
// un := CreateVehicle ;
30642: LD_ADDR_VAR 0 8
30646: PUSH
30647: CALL_OW 45
30651: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30652: LD_VAR 0 8
30656: PPUSH
30657: LD_INT 0
30659: PPUSH
30660: LD_INT 5
30662: PPUSH
30663: CALL_OW 12
30667: PPUSH
30668: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30672: LD_VAR 0 8
30676: PPUSH
30677: LD_VAR 0 5
30681: PPUSH
30682: LD_VAR 0 6
30686: PPUSH
30687: LD_INT 1
30689: PPUSH
30690: CALL_OW 48
// end ;
30694: LD_VAR 0 7
30698: RET
// export hInvincible ; every 1 do
30699: GO 30701
30701: DISABLE
// hInvincible := [ ] ;
30702: LD_ADDR_EXP 94
30706: PUSH
30707: EMPTY
30708: ST_TO_ADDR
30709: END
// every 10 do var i ;
30710: GO 30712
30712: DISABLE
30713: LD_INT 0
30715: PPUSH
// begin enable ;
30716: ENABLE
// if not hInvincible then
30717: LD_EXP 94
30721: NOT
30722: IFFALSE 30726
// exit ;
30724: GO 30770
// for i in hInvincible do
30726: LD_ADDR_VAR 0 1
30730: PUSH
30731: LD_EXP 94
30735: PUSH
30736: FOR_IN
30737: IFFALSE 30768
// if GetLives ( i ) < 1000 then
30739: LD_VAR 0 1
30743: PPUSH
30744: CALL_OW 256
30748: PUSH
30749: LD_INT 1000
30751: LESS
30752: IFFALSE 30766
// SetLives ( i , 1000 ) ;
30754: LD_VAR 0 1
30758: PPUSH
30759: LD_INT 1000
30761: PPUSH
30762: CALL_OW 234
30766: GO 30736
30768: POP
30769: POP
// end ;
30770: PPOPN 1
30772: END
// export function hHackInvincible ; var i ; begin
30773: LD_INT 0
30775: PPUSH
30776: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30777: LD_ADDR_VAR 0 2
30781: PUSH
30782: LD_INT 2
30784: PUSH
30785: LD_INT 21
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 21
30797: PUSH
30798: LD_INT 2
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: LIST
30809: PPUSH
30810: CALL_OW 69
30814: PUSH
30815: FOR_IN
30816: IFFALSE 30877
// if IsSelected ( i ) then
30818: LD_VAR 0 2
30822: PPUSH
30823: CALL_OW 306
30827: IFFALSE 30875
// begin if i in hInvincible then
30829: LD_VAR 0 2
30833: PUSH
30834: LD_EXP 94
30838: IN
30839: IFFALSE 30859
// hInvincible := hInvincible diff i else
30841: LD_ADDR_EXP 94
30845: PUSH
30846: LD_EXP 94
30850: PUSH
30851: LD_VAR 0 2
30855: DIFF
30856: ST_TO_ADDR
30857: GO 30875
// hInvincible := hInvincible union i ;
30859: LD_ADDR_EXP 94
30863: PUSH
30864: LD_EXP 94
30868: PUSH
30869: LD_VAR 0 2
30873: UNION
30874: ST_TO_ADDR
// end ;
30875: GO 30815
30877: POP
30878: POP
// end ;
30879: LD_VAR 0 1
30883: RET
// export function hHackInvisible ; var i , j ; begin
30884: LD_INT 0
30886: PPUSH
30887: PPUSH
30888: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30889: LD_ADDR_VAR 0 2
30893: PUSH
30894: LD_INT 21
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PPUSH
30904: CALL_OW 69
30908: PUSH
30909: FOR_IN
30910: IFFALSE 30934
// if IsSelected ( i ) then
30912: LD_VAR 0 2
30916: PPUSH
30917: CALL_OW 306
30921: IFFALSE 30932
// ComForceInvisible ( i ) ;
30923: LD_VAR 0 2
30927: PPUSH
30928: CALL_OW 496
30932: GO 30909
30934: POP
30935: POP
// end ;
30936: LD_VAR 0 1
30940: RET
// export function hHackChangeYourSide ; begin
30941: LD_INT 0
30943: PPUSH
// if your_side = 8 then
30944: LD_OWVAR 2
30948: PUSH
30949: LD_INT 8
30951: EQUAL
30952: IFFALSE 30964
// your_side := 0 else
30954: LD_ADDR_OWVAR 2
30958: PUSH
30959: LD_INT 0
30961: ST_TO_ADDR
30962: GO 30978
// your_side := your_side + 1 ;
30964: LD_ADDR_OWVAR 2
30968: PUSH
30969: LD_OWVAR 2
30973: PUSH
30974: LD_INT 1
30976: PLUS
30977: ST_TO_ADDR
// end ;
30978: LD_VAR 0 1
30982: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30983: LD_INT 0
30985: PPUSH
30986: PPUSH
30987: PPUSH
// for i in all_units do
30988: LD_ADDR_VAR 0 2
30992: PUSH
30993: LD_OWVAR 3
30997: PUSH
30998: FOR_IN
30999: IFFALSE 31077
// if IsSelected ( i ) then
31001: LD_VAR 0 2
31005: PPUSH
31006: CALL_OW 306
31010: IFFALSE 31075
// begin j := GetSide ( i ) ;
31012: LD_ADDR_VAR 0 3
31016: PUSH
31017: LD_VAR 0 2
31021: PPUSH
31022: CALL_OW 255
31026: ST_TO_ADDR
// if j = 8 then
31027: LD_VAR 0 3
31031: PUSH
31032: LD_INT 8
31034: EQUAL
31035: IFFALSE 31047
// j := 0 else
31037: LD_ADDR_VAR 0 3
31041: PUSH
31042: LD_INT 0
31044: ST_TO_ADDR
31045: GO 31061
// j := j + 1 ;
31047: LD_ADDR_VAR 0 3
31051: PUSH
31052: LD_VAR 0 3
31056: PUSH
31057: LD_INT 1
31059: PLUS
31060: ST_TO_ADDR
// SetSide ( i , j ) ;
31061: LD_VAR 0 2
31065: PPUSH
31066: LD_VAR 0 3
31070: PPUSH
31071: CALL_OW 235
// end ;
31075: GO 30998
31077: POP
31078: POP
// end ;
31079: LD_VAR 0 1
31083: RET
// export function hHackFog ; begin
31084: LD_INT 0
31086: PPUSH
// FogOff ( true ) ;
31087: LD_INT 1
31089: PPUSH
31090: CALL_OW 344
// end ;
31094: LD_VAR 0 1
31098: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31099: LD_INT 0
31101: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31102: LD_VAR 0 1
31106: PPUSH
31107: LD_VAR 0 2
31111: PPUSH
31112: LD_VAR 0 3
31116: PPUSH
31117: LD_INT 1
31119: PPUSH
31120: LD_INT 1
31122: PPUSH
31123: CALL_OW 483
// CenterOnXY ( x , y ) ;
31127: LD_VAR 0 2
31131: PPUSH
31132: LD_VAR 0 3
31136: PPUSH
31137: CALL_OW 84
// end ;
31141: LD_VAR 0 4
31145: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31146: LD_INT 0
31148: PPUSH
31149: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31150: LD_VAR 0 1
31154: NOT
31155: PUSH
31156: LD_VAR 0 2
31160: PPUSH
31161: LD_VAR 0 3
31165: PPUSH
31166: CALL_OW 488
31170: NOT
31171: OR
31172: PUSH
31173: LD_VAR 0 1
31177: PPUSH
31178: CALL_OW 266
31182: PUSH
31183: LD_INT 3
31185: NONEQUAL
31186: PUSH
31187: LD_VAR 0 1
31191: PPUSH
31192: CALL_OW 247
31196: PUSH
31197: LD_INT 1
31199: EQUAL
31200: NOT
31201: AND
31202: OR
31203: IFFALSE 31207
// exit ;
31205: GO 31356
// if GetType ( factory ) = unit_human then
31207: LD_VAR 0 1
31211: PPUSH
31212: CALL_OW 247
31216: PUSH
31217: LD_INT 1
31219: EQUAL
31220: IFFALSE 31237
// factory := IsInUnit ( factory ) ;
31222: LD_ADDR_VAR 0 1
31226: PUSH
31227: LD_VAR 0 1
31231: PPUSH
31232: CALL_OW 310
31236: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31237: LD_VAR 0 1
31241: PPUSH
31242: CALL_OW 266
31246: PUSH
31247: LD_INT 3
31249: NONEQUAL
31250: IFFALSE 31254
// exit ;
31252: GO 31356
// if HexInfo ( x , y ) = factory then
31254: LD_VAR 0 2
31258: PPUSH
31259: LD_VAR 0 3
31263: PPUSH
31264: CALL_OW 428
31268: PUSH
31269: LD_VAR 0 1
31273: EQUAL
31274: IFFALSE 31301
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31276: LD_ADDR_EXP 95
31280: PUSH
31281: LD_EXP 95
31285: PPUSH
31286: LD_VAR 0 1
31290: PPUSH
31291: LD_INT 0
31293: PPUSH
31294: CALL_OW 1
31298: ST_TO_ADDR
31299: GO 31352
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31301: LD_ADDR_EXP 95
31305: PUSH
31306: LD_EXP 95
31310: PPUSH
31311: LD_VAR 0 1
31315: PPUSH
31316: LD_VAR 0 1
31320: PPUSH
31321: CALL_OW 255
31325: PUSH
31326: LD_VAR 0 1
31330: PUSH
31331: LD_VAR 0 2
31335: PUSH
31336: LD_VAR 0 3
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: PPUSH
31347: CALL_OW 1
31351: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31352: CALL 31361 0 0
// end ;
31356: LD_VAR 0 4
31360: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31361: LD_INT 0
31363: PPUSH
31364: PPUSH
31365: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31366: LD_STRING resetFactoryWaypoint();
31368: PPUSH
31369: CALL_OW 559
// if factoryWaypoints then
31373: LD_EXP 95
31377: IFFALSE 31503
// begin list := PrepareArray ( factoryWaypoints ) ;
31379: LD_ADDR_VAR 0 3
31383: PUSH
31384: LD_EXP 95
31388: PPUSH
31389: CALL 77972 0 1
31393: ST_TO_ADDR
// for i := 1 to list do
31394: LD_ADDR_VAR 0 2
31398: PUSH
31399: DOUBLE
31400: LD_INT 1
31402: DEC
31403: ST_TO_ADDR
31404: LD_VAR 0 3
31408: PUSH
31409: FOR_TO
31410: IFFALSE 31501
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31412: LD_STRING setFactoryWaypointXY(
31414: PUSH
31415: LD_VAR 0 3
31419: PUSH
31420: LD_VAR 0 2
31424: ARRAY
31425: PUSH
31426: LD_INT 1
31428: ARRAY
31429: STR
31430: PUSH
31431: LD_STRING ,
31433: STR
31434: PUSH
31435: LD_VAR 0 3
31439: PUSH
31440: LD_VAR 0 2
31444: ARRAY
31445: PUSH
31446: LD_INT 2
31448: ARRAY
31449: STR
31450: PUSH
31451: LD_STRING ,
31453: STR
31454: PUSH
31455: LD_VAR 0 3
31459: PUSH
31460: LD_VAR 0 2
31464: ARRAY
31465: PUSH
31466: LD_INT 3
31468: ARRAY
31469: STR
31470: PUSH
31471: LD_STRING ,
31473: STR
31474: PUSH
31475: LD_VAR 0 3
31479: PUSH
31480: LD_VAR 0 2
31484: ARRAY
31485: PUSH
31486: LD_INT 4
31488: ARRAY
31489: STR
31490: PUSH
31491: LD_STRING )
31493: STR
31494: PPUSH
31495: CALL_OW 559
31499: GO 31409
31501: POP
31502: POP
// end ; end ;
31503: LD_VAR 0 1
31507: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31508: LD_INT 0
31510: PPUSH
// if HexInfo ( x , y ) = warehouse then
31511: LD_VAR 0 2
31515: PPUSH
31516: LD_VAR 0 3
31520: PPUSH
31521: CALL_OW 428
31525: PUSH
31526: LD_VAR 0 1
31530: EQUAL
31531: IFFALSE 31558
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31533: LD_ADDR_EXP 96
31537: PUSH
31538: LD_EXP 96
31542: PPUSH
31543: LD_VAR 0 1
31547: PPUSH
31548: LD_INT 0
31550: PPUSH
31551: CALL_OW 1
31555: ST_TO_ADDR
31556: GO 31609
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31558: LD_ADDR_EXP 96
31562: PUSH
31563: LD_EXP 96
31567: PPUSH
31568: LD_VAR 0 1
31572: PPUSH
31573: LD_VAR 0 1
31577: PPUSH
31578: CALL_OW 255
31582: PUSH
31583: LD_VAR 0 1
31587: PUSH
31588: LD_VAR 0 2
31592: PUSH
31593: LD_VAR 0 3
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: PPUSH
31604: CALL_OW 1
31608: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31609: CALL 31618 0 0
// end ;
31613: LD_VAR 0 4
31617: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31618: LD_INT 0
31620: PPUSH
31621: PPUSH
31622: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31623: LD_STRING resetWarehouseGatheringPoints();
31625: PPUSH
31626: CALL_OW 559
// if warehouseGatheringPoints then
31630: LD_EXP 96
31634: IFFALSE 31760
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31636: LD_ADDR_VAR 0 3
31640: PUSH
31641: LD_EXP 96
31645: PPUSH
31646: CALL 77972 0 1
31650: ST_TO_ADDR
// for i := 1 to list do
31651: LD_ADDR_VAR 0 2
31655: PUSH
31656: DOUBLE
31657: LD_INT 1
31659: DEC
31660: ST_TO_ADDR
31661: LD_VAR 0 3
31665: PUSH
31666: FOR_TO
31667: IFFALSE 31758
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31669: LD_STRING setWarehouseGatheringPointXY(
31671: PUSH
31672: LD_VAR 0 3
31676: PUSH
31677: LD_VAR 0 2
31681: ARRAY
31682: PUSH
31683: LD_INT 1
31685: ARRAY
31686: STR
31687: PUSH
31688: LD_STRING ,
31690: STR
31691: PUSH
31692: LD_VAR 0 3
31696: PUSH
31697: LD_VAR 0 2
31701: ARRAY
31702: PUSH
31703: LD_INT 2
31705: ARRAY
31706: STR
31707: PUSH
31708: LD_STRING ,
31710: STR
31711: PUSH
31712: LD_VAR 0 3
31716: PUSH
31717: LD_VAR 0 2
31721: ARRAY
31722: PUSH
31723: LD_INT 3
31725: ARRAY
31726: STR
31727: PUSH
31728: LD_STRING ,
31730: STR
31731: PUSH
31732: LD_VAR 0 3
31736: PUSH
31737: LD_VAR 0 2
31741: ARRAY
31742: PUSH
31743: LD_INT 4
31745: ARRAY
31746: STR
31747: PUSH
31748: LD_STRING )
31750: STR
31751: PPUSH
31752: CALL_OW 559
31756: GO 31666
31758: POP
31759: POP
// end ; end ;
31760: LD_VAR 0 1
31764: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31765: LD_EXP 96
31769: IFFALSE 32454
31771: GO 31773
31773: DISABLE
31774: LD_INT 0
31776: PPUSH
31777: PPUSH
31778: PPUSH
31779: PPUSH
31780: PPUSH
31781: PPUSH
31782: PPUSH
31783: PPUSH
31784: PPUSH
// begin enable ;
31785: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31786: LD_ADDR_VAR 0 3
31790: PUSH
31791: LD_EXP 96
31795: PPUSH
31796: CALL 77972 0 1
31800: ST_TO_ADDR
// if not list then
31801: LD_VAR 0 3
31805: NOT
31806: IFFALSE 31810
// exit ;
31808: GO 32454
// for i := 1 to list do
31810: LD_ADDR_VAR 0 1
31814: PUSH
31815: DOUBLE
31816: LD_INT 1
31818: DEC
31819: ST_TO_ADDR
31820: LD_VAR 0 3
31824: PUSH
31825: FOR_TO
31826: IFFALSE 32452
// begin depot := list [ i ] [ 2 ] ;
31828: LD_ADDR_VAR 0 8
31832: PUSH
31833: LD_VAR 0 3
31837: PUSH
31838: LD_VAR 0 1
31842: ARRAY
31843: PUSH
31844: LD_INT 2
31846: ARRAY
31847: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31848: LD_ADDR_VAR 0 5
31852: PUSH
31853: LD_VAR 0 3
31857: PUSH
31858: LD_VAR 0 1
31862: ARRAY
31863: PUSH
31864: LD_INT 1
31866: ARRAY
31867: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31868: LD_VAR 0 8
31872: PPUSH
31873: CALL_OW 301
31877: PUSH
31878: LD_VAR 0 5
31882: PUSH
31883: LD_VAR 0 8
31887: PPUSH
31888: CALL_OW 255
31892: NONEQUAL
31893: OR
31894: IFFALSE 31923
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31896: LD_ADDR_EXP 96
31900: PUSH
31901: LD_EXP 96
31905: PPUSH
31906: LD_VAR 0 8
31910: PPUSH
31911: LD_INT 0
31913: PPUSH
31914: CALL_OW 1
31918: ST_TO_ADDR
// exit ;
31919: POP
31920: POP
31921: GO 32454
// end ; x := list [ i ] [ 3 ] ;
31923: LD_ADDR_VAR 0 6
31927: PUSH
31928: LD_VAR 0 3
31932: PUSH
31933: LD_VAR 0 1
31937: ARRAY
31938: PUSH
31939: LD_INT 3
31941: ARRAY
31942: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31943: LD_ADDR_VAR 0 7
31947: PUSH
31948: LD_VAR 0 3
31952: PUSH
31953: LD_VAR 0 1
31957: ARRAY
31958: PUSH
31959: LD_INT 4
31961: ARRAY
31962: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31963: LD_ADDR_VAR 0 9
31967: PUSH
31968: LD_VAR 0 6
31972: PPUSH
31973: LD_VAR 0 7
31977: PPUSH
31978: LD_INT 16
31980: PPUSH
31981: CALL 76560 0 3
31985: ST_TO_ADDR
// if not cratesNearbyPoint then
31986: LD_VAR 0 9
31990: NOT
31991: IFFALSE 31997
// exit ;
31993: POP
31994: POP
31995: GO 32454
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31997: LD_ADDR_VAR 0 4
32001: PUSH
32002: LD_INT 22
32004: PUSH
32005: LD_VAR 0 5
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: LD_INT 60
32019: PUSH
32020: EMPTY
32021: LIST
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 91
32029: PUSH
32030: LD_VAR 0 8
32034: PUSH
32035: LD_INT 6
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: LD_INT 25
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 25
32058: PUSH
32059: LD_INT 16
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: LIST
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: PPUSH
32077: CALL_OW 69
32081: PUSH
32082: LD_VAR 0 8
32086: PPUSH
32087: CALL_OW 313
32091: PPUSH
32092: LD_INT 3
32094: PUSH
32095: LD_INT 60
32097: PUSH
32098: EMPTY
32099: LIST
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 2
32107: PUSH
32108: LD_INT 25
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 25
32120: PUSH
32121: LD_INT 16
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PPUSH
32137: CALL_OW 72
32141: UNION
32142: ST_TO_ADDR
// if tmp then
32143: LD_VAR 0 4
32147: IFFALSE 32227
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32149: LD_ADDR_VAR 0 4
32153: PUSH
32154: LD_VAR 0 4
32158: PPUSH
32159: LD_INT 3
32161: PPUSH
32162: CALL 74529 0 2
32166: ST_TO_ADDR
// for j in tmp do
32167: LD_ADDR_VAR 0 2
32171: PUSH
32172: LD_VAR 0 4
32176: PUSH
32177: FOR_IN
32178: IFFALSE 32221
// begin if IsInUnit ( j ) then
32180: LD_VAR 0 2
32184: PPUSH
32185: CALL_OW 310
32189: IFFALSE 32200
// ComExit ( j ) ;
32191: LD_VAR 0 2
32195: PPUSH
32196: CALL 74612 0 1
// AddComCollect ( j , x , y ) ;
32200: LD_VAR 0 2
32204: PPUSH
32205: LD_VAR 0 6
32209: PPUSH
32210: LD_VAR 0 7
32214: PPUSH
32215: CALL_OW 177
// end ;
32219: GO 32177
32221: POP
32222: POP
// exit ;
32223: POP
32224: POP
32225: GO 32454
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32227: LD_ADDR_VAR 0 4
32231: PUSH
32232: LD_INT 22
32234: PUSH
32235: LD_VAR 0 5
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 91
32246: PUSH
32247: LD_VAR 0 8
32251: PUSH
32252: LD_INT 8
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 2
32262: PUSH
32263: LD_INT 34
32265: PUSH
32266: LD_INT 12
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 34
32275: PUSH
32276: LD_INT 51
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 34
32285: PUSH
32286: LD_INT 32
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 34
32295: PUSH
32296: LD_INT 89
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: LIST
32314: PPUSH
32315: CALL_OW 69
32319: ST_TO_ADDR
// if tmp then
32320: LD_VAR 0 4
32324: IFFALSE 32450
// begin for j in tmp do
32326: LD_ADDR_VAR 0 2
32330: PUSH
32331: LD_VAR 0 4
32335: PUSH
32336: FOR_IN
32337: IFFALSE 32448
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32339: LD_VAR 0 2
32343: PPUSH
32344: CALL_OW 262
32348: PUSH
32349: LD_INT 3
32351: EQUAL
32352: PUSH
32353: LD_VAR 0 2
32357: PPUSH
32358: CALL_OW 261
32362: PUSH
32363: LD_INT 20
32365: GREATER
32366: OR
32367: PUSH
32368: LD_VAR 0 2
32372: PPUSH
32373: CALL_OW 314
32377: NOT
32378: AND
32379: PUSH
32380: LD_VAR 0 2
32384: PPUSH
32385: CALL_OW 263
32389: PUSH
32390: LD_INT 1
32392: NONEQUAL
32393: PUSH
32394: LD_VAR 0 2
32398: PPUSH
32399: CALL_OW 311
32403: OR
32404: AND
32405: IFFALSE 32446
// begin ComCollect ( j , x , y ) ;
32407: LD_VAR 0 2
32411: PPUSH
32412: LD_VAR 0 6
32416: PPUSH
32417: LD_VAR 0 7
32421: PPUSH
32422: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32426: LD_VAR 0 2
32430: PPUSH
32431: LD_VAR 0 8
32435: PPUSH
32436: CALL_OW 172
// exit ;
32440: POP
32441: POP
32442: POP
32443: POP
32444: GO 32454
// end ;
32446: GO 32336
32448: POP
32449: POP
// end ; end ;
32450: GO 31825
32452: POP
32453: POP
// end ; end_of_file
32454: PPOPN 9
32456: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32457: LD_INT 0
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32463: LD_VAR 0 1
32467: PPUSH
32468: CALL_OW 264
32472: PUSH
32473: LD_INT 91
32475: EQUAL
32476: IFFALSE 32548
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32478: LD_INT 68
32480: PPUSH
32481: LD_VAR 0 1
32485: PPUSH
32486: CALL_OW 255
32490: PPUSH
32491: CALL_OW 321
32495: PUSH
32496: LD_INT 2
32498: EQUAL
32499: IFFALSE 32511
// eff := 70 else
32501: LD_ADDR_VAR 0 4
32505: PUSH
32506: LD_INT 70
32508: ST_TO_ADDR
32509: GO 32519
// eff := 30 ;
32511: LD_ADDR_VAR 0 4
32515: PUSH
32516: LD_INT 30
32518: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32519: LD_VAR 0 1
32523: PPUSH
32524: CALL_OW 250
32528: PPUSH
32529: LD_VAR 0 1
32533: PPUSH
32534: CALL_OW 251
32538: PPUSH
32539: LD_VAR 0 4
32543: PPUSH
32544: CALL_OW 495
// end ; end ;
32548: LD_VAR 0 2
32552: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32553: LD_INT 0
32555: PPUSH
// end ;
32556: LD_VAR 0 4
32560: RET
// export function SOS_Command ( cmd ) ; begin
32561: LD_INT 0
32563: PPUSH
// end ;
32564: LD_VAR 0 2
32568: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32569: LD_INT 0
32571: PPUSH
// end ;
32572: LD_VAR 0 6
32576: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32577: LD_INT 0
32579: PPUSH
32580: PPUSH
// if not vehicle or not factory then
32581: LD_VAR 0 1
32585: NOT
32586: PUSH
32587: LD_VAR 0 2
32591: NOT
32592: OR
32593: IFFALSE 32597
// exit ;
32595: GO 32828
// if factoryWaypoints >= factory then
32597: LD_EXP 95
32601: PUSH
32602: LD_VAR 0 2
32606: GREATEREQUAL
32607: IFFALSE 32828
// if factoryWaypoints [ factory ] then
32609: LD_EXP 95
32613: PUSH
32614: LD_VAR 0 2
32618: ARRAY
32619: IFFALSE 32828
// begin if GetControl ( vehicle ) = control_manual then
32621: LD_VAR 0 1
32625: PPUSH
32626: CALL_OW 263
32630: PUSH
32631: LD_INT 1
32633: EQUAL
32634: IFFALSE 32715
// begin driver := IsDrivenBy ( vehicle ) ;
32636: LD_ADDR_VAR 0 4
32640: PUSH
32641: LD_VAR 0 1
32645: PPUSH
32646: CALL_OW 311
32650: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32651: LD_VAR 0 4
32655: PPUSH
32656: LD_EXP 95
32660: PUSH
32661: LD_VAR 0 2
32665: ARRAY
32666: PUSH
32667: LD_INT 3
32669: ARRAY
32670: PPUSH
32671: LD_EXP 95
32675: PUSH
32676: LD_VAR 0 2
32680: ARRAY
32681: PUSH
32682: LD_INT 4
32684: ARRAY
32685: PPUSH
32686: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32690: LD_VAR 0 4
32694: PPUSH
32695: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32699: LD_VAR 0 4
32703: PPUSH
32704: LD_VAR 0 2
32708: PPUSH
32709: CALL_OW 180
// end else
32713: GO 32828
// if GetControl ( vehicle ) = control_remote then
32715: LD_VAR 0 1
32719: PPUSH
32720: CALL_OW 263
32724: PUSH
32725: LD_INT 2
32727: EQUAL
32728: IFFALSE 32789
// begin wait ( 0 0$2 ) ;
32730: LD_INT 70
32732: PPUSH
32733: CALL_OW 67
// if Connect ( vehicle ) then
32737: LD_VAR 0 1
32741: PPUSH
32742: CALL 44852 0 1
32746: IFFALSE 32787
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32748: LD_VAR 0 1
32752: PPUSH
32753: LD_EXP 95
32757: PUSH
32758: LD_VAR 0 2
32762: ARRAY
32763: PUSH
32764: LD_INT 3
32766: ARRAY
32767: PPUSH
32768: LD_EXP 95
32772: PUSH
32773: LD_VAR 0 2
32777: ARRAY
32778: PUSH
32779: LD_INT 4
32781: ARRAY
32782: PPUSH
32783: CALL_OW 171
// end else
32787: GO 32828
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32789: LD_VAR 0 1
32793: PPUSH
32794: LD_EXP 95
32798: PUSH
32799: LD_VAR 0 2
32803: ARRAY
32804: PUSH
32805: LD_INT 3
32807: ARRAY
32808: PPUSH
32809: LD_EXP 95
32813: PUSH
32814: LD_VAR 0 2
32818: ARRAY
32819: PUSH
32820: LD_INT 4
32822: ARRAY
32823: PPUSH
32824: CALL_OW 171
// end ; end ;
32828: LD_VAR 0 3
32832: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32833: LD_INT 0
32835: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32836: LD_VAR 0 1
32840: PUSH
32841: LD_INT 250
32843: EQUAL
32844: PUSH
32845: LD_VAR 0 2
32849: PPUSH
32850: CALL_OW 264
32854: PUSH
32855: LD_INT 81
32857: EQUAL
32858: AND
32859: IFFALSE 32880
// MinerPlaceMine ( unit , x , y ) ;
32861: LD_VAR 0 2
32865: PPUSH
32866: LD_VAR 0 4
32870: PPUSH
32871: LD_VAR 0 5
32875: PPUSH
32876: CALL 35265 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32880: LD_VAR 0 1
32884: PUSH
32885: LD_INT 251
32887: EQUAL
32888: PUSH
32889: LD_VAR 0 2
32893: PPUSH
32894: CALL_OW 264
32898: PUSH
32899: LD_INT 81
32901: EQUAL
32902: AND
32903: IFFALSE 32924
// MinerDetonateMine ( unit , x , y ) ;
32905: LD_VAR 0 2
32909: PPUSH
32910: LD_VAR 0 4
32914: PPUSH
32915: LD_VAR 0 5
32919: PPUSH
32920: CALL 35540 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32924: LD_VAR 0 1
32928: PUSH
32929: LD_INT 252
32931: EQUAL
32932: PUSH
32933: LD_VAR 0 2
32937: PPUSH
32938: CALL_OW 264
32942: PUSH
32943: LD_INT 81
32945: EQUAL
32946: AND
32947: IFFALSE 32968
// MinerCreateMinefield ( unit , x , y ) ;
32949: LD_VAR 0 2
32953: PPUSH
32954: LD_VAR 0 4
32958: PPUSH
32959: LD_VAR 0 5
32963: PPUSH
32964: CALL 35957 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32968: LD_VAR 0 1
32972: PUSH
32973: LD_INT 253
32975: EQUAL
32976: PUSH
32977: LD_VAR 0 2
32981: PPUSH
32982: CALL_OW 257
32986: PUSH
32987: LD_INT 5
32989: EQUAL
32990: AND
32991: IFFALSE 33012
// ComBinocular ( unit , x , y ) ;
32993: LD_VAR 0 2
32997: PPUSH
32998: LD_VAR 0 4
33002: PPUSH
33003: LD_VAR 0 5
33007: PPUSH
33008: CALL 36326 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33012: LD_VAR 0 1
33016: PUSH
33017: LD_INT 254
33019: EQUAL
33020: PUSH
33021: LD_VAR 0 2
33025: PPUSH
33026: CALL_OW 264
33030: PUSH
33031: LD_INT 99
33033: EQUAL
33034: AND
33035: PUSH
33036: LD_VAR 0 3
33040: PPUSH
33041: CALL_OW 263
33045: PUSH
33046: LD_INT 3
33048: EQUAL
33049: AND
33050: IFFALSE 33066
// HackDestroyVehicle ( unit , selectedUnit ) ;
33052: LD_VAR 0 2
33056: PPUSH
33057: LD_VAR 0 3
33061: PPUSH
33062: CALL 34629 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33066: LD_VAR 0 1
33070: PUSH
33071: LD_INT 255
33073: EQUAL
33074: PUSH
33075: LD_VAR 0 2
33079: PPUSH
33080: CALL_OW 264
33084: PUSH
33085: LD_INT 14
33087: PUSH
33088: LD_INT 53
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: IN
33095: AND
33096: PUSH
33097: LD_VAR 0 4
33101: PPUSH
33102: LD_VAR 0 5
33106: PPUSH
33107: CALL_OW 488
33111: AND
33112: IFFALSE 33136
// CutTreeXYR ( unit , x , y , 12 ) ;
33114: LD_VAR 0 2
33118: PPUSH
33119: LD_VAR 0 4
33123: PPUSH
33124: LD_VAR 0 5
33128: PPUSH
33129: LD_INT 12
33131: PPUSH
33132: CALL 33199 0 4
// if cmd = 256 then
33136: LD_VAR 0 1
33140: PUSH
33141: LD_INT 256
33143: EQUAL
33144: IFFALSE 33165
// SetFactoryWaypoint ( unit , x , y ) ;
33146: LD_VAR 0 2
33150: PPUSH
33151: LD_VAR 0 4
33155: PPUSH
33156: LD_VAR 0 5
33160: PPUSH
33161: CALL 31146 0 3
// if cmd = 257 then
33165: LD_VAR 0 1
33169: PUSH
33170: LD_INT 257
33172: EQUAL
33173: IFFALSE 33194
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33175: LD_VAR 0 2
33179: PPUSH
33180: LD_VAR 0 4
33184: PPUSH
33185: LD_VAR 0 5
33189: PPUSH
33190: CALL 31508 0 3
// end ;
33194: LD_VAR 0 6
33198: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33199: LD_INT 0
33201: PPUSH
33202: PPUSH
33203: PPUSH
33204: PPUSH
33205: PPUSH
33206: PPUSH
33207: PPUSH
33208: PPUSH
33209: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33210: LD_VAR 0 1
33214: NOT
33215: PUSH
33216: LD_VAR 0 2
33220: PPUSH
33221: LD_VAR 0 3
33225: PPUSH
33226: CALL_OW 488
33230: NOT
33231: OR
33232: PUSH
33233: LD_VAR 0 4
33237: NOT
33238: OR
33239: IFFALSE 33243
// exit ;
33241: GO 33583
// list := [ ] ;
33243: LD_ADDR_VAR 0 13
33247: PUSH
33248: EMPTY
33249: ST_TO_ADDR
// if x - r < 0 then
33250: LD_VAR 0 2
33254: PUSH
33255: LD_VAR 0 4
33259: MINUS
33260: PUSH
33261: LD_INT 0
33263: LESS
33264: IFFALSE 33276
// min_x := 0 else
33266: LD_ADDR_VAR 0 7
33270: PUSH
33271: LD_INT 0
33273: ST_TO_ADDR
33274: GO 33292
// min_x := x - r ;
33276: LD_ADDR_VAR 0 7
33280: PUSH
33281: LD_VAR 0 2
33285: PUSH
33286: LD_VAR 0 4
33290: MINUS
33291: ST_TO_ADDR
// if y - r < 0 then
33292: LD_VAR 0 3
33296: PUSH
33297: LD_VAR 0 4
33301: MINUS
33302: PUSH
33303: LD_INT 0
33305: LESS
33306: IFFALSE 33318
// min_y := 0 else
33308: LD_ADDR_VAR 0 8
33312: PUSH
33313: LD_INT 0
33315: ST_TO_ADDR
33316: GO 33334
// min_y := y - r ;
33318: LD_ADDR_VAR 0 8
33322: PUSH
33323: LD_VAR 0 3
33327: PUSH
33328: LD_VAR 0 4
33332: MINUS
33333: ST_TO_ADDR
// max_x := x + r ;
33334: LD_ADDR_VAR 0 9
33338: PUSH
33339: LD_VAR 0 2
33343: PUSH
33344: LD_VAR 0 4
33348: PLUS
33349: ST_TO_ADDR
// max_y := y + r ;
33350: LD_ADDR_VAR 0 10
33354: PUSH
33355: LD_VAR 0 3
33359: PUSH
33360: LD_VAR 0 4
33364: PLUS
33365: ST_TO_ADDR
// for _x = min_x to max_x do
33366: LD_ADDR_VAR 0 11
33370: PUSH
33371: DOUBLE
33372: LD_VAR 0 7
33376: DEC
33377: ST_TO_ADDR
33378: LD_VAR 0 9
33382: PUSH
33383: FOR_TO
33384: IFFALSE 33501
// for _y = min_y to max_y do
33386: LD_ADDR_VAR 0 12
33390: PUSH
33391: DOUBLE
33392: LD_VAR 0 8
33396: DEC
33397: ST_TO_ADDR
33398: LD_VAR 0 10
33402: PUSH
33403: FOR_TO
33404: IFFALSE 33497
// begin if not ValidHex ( _x , _y ) then
33406: LD_VAR 0 11
33410: PPUSH
33411: LD_VAR 0 12
33415: PPUSH
33416: CALL_OW 488
33420: NOT
33421: IFFALSE 33425
// continue ;
33423: GO 33403
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33425: LD_VAR 0 11
33429: PPUSH
33430: LD_VAR 0 12
33434: PPUSH
33435: CALL_OW 351
33439: PUSH
33440: LD_VAR 0 11
33444: PPUSH
33445: LD_VAR 0 12
33449: PPUSH
33450: CALL_OW 554
33454: AND
33455: IFFALSE 33495
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33457: LD_ADDR_VAR 0 13
33461: PUSH
33462: LD_VAR 0 13
33466: PPUSH
33467: LD_VAR 0 13
33471: PUSH
33472: LD_INT 1
33474: PLUS
33475: PPUSH
33476: LD_VAR 0 11
33480: PUSH
33481: LD_VAR 0 12
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PPUSH
33490: CALL_OW 2
33494: ST_TO_ADDR
// end ;
33495: GO 33403
33497: POP
33498: POP
33499: GO 33383
33501: POP
33502: POP
// if not list then
33503: LD_VAR 0 13
33507: NOT
33508: IFFALSE 33512
// exit ;
33510: GO 33583
// for i in list do
33512: LD_ADDR_VAR 0 6
33516: PUSH
33517: LD_VAR 0 13
33521: PUSH
33522: FOR_IN
33523: IFFALSE 33581
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33525: LD_VAR 0 1
33529: PPUSH
33530: LD_STRING M
33532: PUSH
33533: LD_VAR 0 6
33537: PUSH
33538: LD_INT 1
33540: ARRAY
33541: PUSH
33542: LD_VAR 0 6
33546: PUSH
33547: LD_INT 2
33549: ARRAY
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: PUSH
33572: EMPTY
33573: LIST
33574: PPUSH
33575: CALL_OW 447
33579: GO 33522
33581: POP
33582: POP
// end ;
33583: LD_VAR 0 5
33587: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33588: LD_EXP 98
33592: NOT
33593: IFFALSE 33643
33595: GO 33597
33597: DISABLE
// begin initHack := true ;
33598: LD_ADDR_EXP 98
33602: PUSH
33603: LD_INT 1
33605: ST_TO_ADDR
// hackTanks := [ ] ;
33606: LD_ADDR_EXP 99
33610: PUSH
33611: EMPTY
33612: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33613: LD_ADDR_EXP 100
33617: PUSH
33618: EMPTY
33619: ST_TO_ADDR
// hackLimit := 3 ;
33620: LD_ADDR_EXP 101
33624: PUSH
33625: LD_INT 3
33627: ST_TO_ADDR
// hackDist := 12 ;
33628: LD_ADDR_EXP 102
33632: PUSH
33633: LD_INT 12
33635: ST_TO_ADDR
// hackCounter := [ ] ;
33636: LD_ADDR_EXP 103
33640: PUSH
33641: EMPTY
33642: ST_TO_ADDR
// end ;
33643: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33644: LD_EXP 98
33648: PUSH
33649: LD_INT 34
33651: PUSH
33652: LD_INT 99
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PPUSH
33659: CALL_OW 69
33663: AND
33664: IFFALSE 33917
33666: GO 33668
33668: DISABLE
33669: LD_INT 0
33671: PPUSH
33672: PPUSH
// begin enable ;
33673: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33674: LD_ADDR_VAR 0 1
33678: PUSH
33679: LD_INT 34
33681: PUSH
33682: LD_INT 99
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PPUSH
33689: CALL_OW 69
33693: PUSH
33694: FOR_IN
33695: IFFALSE 33915
// begin if not i in hackTanks then
33697: LD_VAR 0 1
33701: PUSH
33702: LD_EXP 99
33706: IN
33707: NOT
33708: IFFALSE 33791
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33710: LD_ADDR_EXP 99
33714: PUSH
33715: LD_EXP 99
33719: PPUSH
33720: LD_EXP 99
33724: PUSH
33725: LD_INT 1
33727: PLUS
33728: PPUSH
33729: LD_VAR 0 1
33733: PPUSH
33734: CALL_OW 1
33738: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33739: LD_ADDR_EXP 100
33743: PUSH
33744: LD_EXP 100
33748: PPUSH
33749: LD_EXP 100
33753: PUSH
33754: LD_INT 1
33756: PLUS
33757: PPUSH
33758: EMPTY
33759: PPUSH
33760: CALL_OW 1
33764: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33765: LD_ADDR_EXP 103
33769: PUSH
33770: LD_EXP 103
33774: PPUSH
33775: LD_EXP 103
33779: PUSH
33780: LD_INT 1
33782: PLUS
33783: PPUSH
33784: EMPTY
33785: PPUSH
33786: CALL_OW 1
33790: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33791: LD_VAR 0 1
33795: PPUSH
33796: CALL_OW 302
33800: NOT
33801: IFFALSE 33814
// begin HackUnlinkAll ( i ) ;
33803: LD_VAR 0 1
33807: PPUSH
33808: CALL 33920 0 1
// continue ;
33812: GO 33694
// end ; HackCheckCapturedStatus ( i ) ;
33814: LD_VAR 0 1
33818: PPUSH
33819: CALL 34363 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33823: LD_ADDR_VAR 0 2
33827: PUSH
33828: LD_INT 81
33830: PUSH
33831: LD_VAR 0 1
33835: PPUSH
33836: CALL_OW 255
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 33
33847: PUSH
33848: LD_INT 3
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 91
33857: PUSH
33858: LD_VAR 0 1
33862: PUSH
33863: LD_EXP 102
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 50
33875: PUSH
33876: EMPTY
33877: LIST
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: PPUSH
33885: CALL_OW 69
33889: ST_TO_ADDR
// if not tmp then
33890: LD_VAR 0 2
33894: NOT
33895: IFFALSE 33899
// continue ;
33897: GO 33694
// HackLink ( i , tmp ) ;
33899: LD_VAR 0 1
33903: PPUSH
33904: LD_VAR 0 2
33908: PPUSH
33909: CALL 34056 0 2
// end ;
33913: GO 33694
33915: POP
33916: POP
// end ;
33917: PPOPN 2
33919: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33920: LD_INT 0
33922: PPUSH
33923: PPUSH
33924: PPUSH
// if not hack in hackTanks then
33925: LD_VAR 0 1
33929: PUSH
33930: LD_EXP 99
33934: IN
33935: NOT
33936: IFFALSE 33940
// exit ;
33938: GO 34051
// index := GetElementIndex ( hackTanks , hack ) ;
33940: LD_ADDR_VAR 0 4
33944: PUSH
33945: LD_EXP 99
33949: PPUSH
33950: LD_VAR 0 1
33954: PPUSH
33955: CALL 41668 0 2
33959: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33960: LD_EXP 100
33964: PUSH
33965: LD_VAR 0 4
33969: ARRAY
33970: IFFALSE 34051
// begin for i in hackTanksCaptured [ index ] do
33972: LD_ADDR_VAR 0 3
33976: PUSH
33977: LD_EXP 100
33981: PUSH
33982: LD_VAR 0 4
33986: ARRAY
33987: PUSH
33988: FOR_IN
33989: IFFALSE 34015
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33991: LD_VAR 0 3
33995: PUSH
33996: LD_INT 1
33998: ARRAY
33999: PPUSH
34000: LD_VAR 0 3
34004: PUSH
34005: LD_INT 2
34007: ARRAY
34008: PPUSH
34009: CALL_OW 235
34013: GO 33988
34015: POP
34016: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34017: LD_ADDR_EXP 100
34021: PUSH
34022: LD_EXP 100
34026: PPUSH
34027: LD_VAR 0 4
34031: PPUSH
34032: EMPTY
34033: PPUSH
34034: CALL_OW 1
34038: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34039: LD_VAR 0 1
34043: PPUSH
34044: LD_INT 0
34046: PPUSH
34047: CALL_OW 505
// end ; end ;
34051: LD_VAR 0 2
34055: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34056: LD_INT 0
34058: PPUSH
34059: PPUSH
34060: PPUSH
// if not hack in hackTanks or not vehicles then
34061: LD_VAR 0 1
34065: PUSH
34066: LD_EXP 99
34070: IN
34071: NOT
34072: PUSH
34073: LD_VAR 0 2
34077: NOT
34078: OR
34079: IFFALSE 34083
// exit ;
34081: GO 34358
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34083: LD_ADDR_VAR 0 2
34087: PUSH
34088: LD_VAR 0 1
34092: PPUSH
34093: LD_VAR 0 2
34097: PPUSH
34098: LD_INT 1
34100: PPUSH
34101: LD_INT 1
34103: PPUSH
34104: CALL 42318 0 4
34108: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34109: LD_ADDR_VAR 0 5
34113: PUSH
34114: LD_EXP 99
34118: PPUSH
34119: LD_VAR 0 1
34123: PPUSH
34124: CALL 41668 0 2
34128: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34129: LD_EXP 100
34133: PUSH
34134: LD_VAR 0 5
34138: ARRAY
34139: PUSH
34140: LD_EXP 101
34144: LESS
34145: IFFALSE 34334
// begin for i := 1 to vehicles do
34147: LD_ADDR_VAR 0 4
34151: PUSH
34152: DOUBLE
34153: LD_INT 1
34155: DEC
34156: ST_TO_ADDR
34157: LD_VAR 0 2
34161: PUSH
34162: FOR_TO
34163: IFFALSE 34332
// begin if hackTanksCaptured [ index ] = hackLimit then
34165: LD_EXP 100
34169: PUSH
34170: LD_VAR 0 5
34174: ARRAY
34175: PUSH
34176: LD_EXP 101
34180: EQUAL
34181: IFFALSE 34185
// break ;
34183: GO 34332
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34185: LD_ADDR_EXP 103
34189: PUSH
34190: LD_EXP 103
34194: PPUSH
34195: LD_VAR 0 5
34199: PPUSH
34200: LD_EXP 103
34204: PUSH
34205: LD_VAR 0 5
34209: ARRAY
34210: PUSH
34211: LD_INT 1
34213: PLUS
34214: PPUSH
34215: CALL_OW 1
34219: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34220: LD_ADDR_EXP 100
34224: PUSH
34225: LD_EXP 100
34229: PPUSH
34230: LD_VAR 0 5
34234: PUSH
34235: LD_EXP 100
34239: PUSH
34240: LD_VAR 0 5
34244: ARRAY
34245: PUSH
34246: LD_INT 1
34248: PLUS
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PPUSH
34254: LD_VAR 0 2
34258: PUSH
34259: LD_VAR 0 4
34263: ARRAY
34264: PUSH
34265: LD_VAR 0 2
34269: PUSH
34270: LD_VAR 0 4
34274: ARRAY
34275: PPUSH
34276: CALL_OW 255
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PPUSH
34285: CALL 41883 0 3
34289: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34290: LD_VAR 0 2
34294: PUSH
34295: LD_VAR 0 4
34299: ARRAY
34300: PPUSH
34301: LD_VAR 0 1
34305: PPUSH
34306: CALL_OW 255
34310: PPUSH
34311: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34315: LD_VAR 0 2
34319: PUSH
34320: LD_VAR 0 4
34324: ARRAY
34325: PPUSH
34326: CALL_OW 141
// end ;
34330: GO 34162
34332: POP
34333: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34334: LD_VAR 0 1
34338: PPUSH
34339: LD_EXP 100
34343: PUSH
34344: LD_VAR 0 5
34348: ARRAY
34349: PUSH
34350: LD_INT 0
34352: PLUS
34353: PPUSH
34354: CALL_OW 505
// end ;
34358: LD_VAR 0 3
34362: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34363: LD_INT 0
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
// if not hack in hackTanks then
34369: LD_VAR 0 1
34373: PUSH
34374: LD_EXP 99
34378: IN
34379: NOT
34380: IFFALSE 34384
// exit ;
34382: GO 34624
// index := GetElementIndex ( hackTanks , hack ) ;
34384: LD_ADDR_VAR 0 4
34388: PUSH
34389: LD_EXP 99
34393: PPUSH
34394: LD_VAR 0 1
34398: PPUSH
34399: CALL 41668 0 2
34403: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34404: LD_ADDR_VAR 0 3
34408: PUSH
34409: DOUBLE
34410: LD_EXP 100
34414: PUSH
34415: LD_VAR 0 4
34419: ARRAY
34420: INC
34421: ST_TO_ADDR
34422: LD_INT 1
34424: PUSH
34425: FOR_DOWNTO
34426: IFFALSE 34598
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34428: LD_ADDR_VAR 0 5
34432: PUSH
34433: LD_EXP 100
34437: PUSH
34438: LD_VAR 0 4
34442: ARRAY
34443: PUSH
34444: LD_VAR 0 3
34448: ARRAY
34449: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34450: LD_VAR 0 5
34454: PUSH
34455: LD_INT 1
34457: ARRAY
34458: PPUSH
34459: CALL_OW 302
34463: NOT
34464: PUSH
34465: LD_VAR 0 5
34469: PUSH
34470: LD_INT 1
34472: ARRAY
34473: PPUSH
34474: CALL_OW 255
34478: PUSH
34479: LD_VAR 0 1
34483: PPUSH
34484: CALL_OW 255
34488: NONEQUAL
34489: OR
34490: IFFALSE 34596
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34492: LD_VAR 0 5
34496: PUSH
34497: LD_INT 1
34499: ARRAY
34500: PPUSH
34501: CALL_OW 305
34505: PUSH
34506: LD_VAR 0 5
34510: PUSH
34511: LD_INT 1
34513: ARRAY
34514: PPUSH
34515: CALL_OW 255
34519: PUSH
34520: LD_VAR 0 1
34524: PPUSH
34525: CALL_OW 255
34529: EQUAL
34530: AND
34531: IFFALSE 34555
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34533: LD_VAR 0 5
34537: PUSH
34538: LD_INT 1
34540: ARRAY
34541: PPUSH
34542: LD_VAR 0 5
34546: PUSH
34547: LD_INT 2
34549: ARRAY
34550: PPUSH
34551: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34555: LD_ADDR_EXP 100
34559: PUSH
34560: LD_EXP 100
34564: PPUSH
34565: LD_VAR 0 4
34569: PPUSH
34570: LD_EXP 100
34574: PUSH
34575: LD_VAR 0 4
34579: ARRAY
34580: PPUSH
34581: LD_VAR 0 3
34585: PPUSH
34586: CALL_OW 3
34590: PPUSH
34591: CALL_OW 1
34595: ST_TO_ADDR
// end ; end ;
34596: GO 34425
34598: POP
34599: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34600: LD_VAR 0 1
34604: PPUSH
34605: LD_EXP 100
34609: PUSH
34610: LD_VAR 0 4
34614: ARRAY
34615: PUSH
34616: LD_INT 0
34618: PLUS
34619: PPUSH
34620: CALL_OW 505
// end ;
34624: LD_VAR 0 2
34628: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34629: LD_INT 0
34631: PPUSH
34632: PPUSH
34633: PPUSH
34634: PPUSH
// if not hack in hackTanks then
34635: LD_VAR 0 1
34639: PUSH
34640: LD_EXP 99
34644: IN
34645: NOT
34646: IFFALSE 34650
// exit ;
34648: GO 34735
// index := GetElementIndex ( hackTanks , hack ) ;
34650: LD_ADDR_VAR 0 5
34654: PUSH
34655: LD_EXP 99
34659: PPUSH
34660: LD_VAR 0 1
34664: PPUSH
34665: CALL 41668 0 2
34669: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34670: LD_ADDR_VAR 0 4
34674: PUSH
34675: DOUBLE
34676: LD_INT 1
34678: DEC
34679: ST_TO_ADDR
34680: LD_EXP 100
34684: PUSH
34685: LD_VAR 0 5
34689: ARRAY
34690: PUSH
34691: FOR_TO
34692: IFFALSE 34733
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34694: LD_EXP 100
34698: PUSH
34699: LD_VAR 0 5
34703: ARRAY
34704: PUSH
34705: LD_VAR 0 4
34709: ARRAY
34710: PUSH
34711: LD_INT 1
34713: ARRAY
34714: PUSH
34715: LD_VAR 0 2
34719: EQUAL
34720: IFFALSE 34731
// KillUnit ( vehicle ) ;
34722: LD_VAR 0 2
34726: PPUSH
34727: CALL_OW 66
34731: GO 34691
34733: POP
34734: POP
// end ;
34735: LD_VAR 0 3
34739: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34740: LD_EXP 104
34744: NOT
34745: IFFALSE 34780
34747: GO 34749
34749: DISABLE
// begin initMiner := true ;
34750: LD_ADDR_EXP 104
34754: PUSH
34755: LD_INT 1
34757: ST_TO_ADDR
// minersList := [ ] ;
34758: LD_ADDR_EXP 105
34762: PUSH
34763: EMPTY
34764: ST_TO_ADDR
// minerMinesList := [ ] ;
34765: LD_ADDR_EXP 106
34769: PUSH
34770: EMPTY
34771: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34772: LD_ADDR_EXP 107
34776: PUSH
34777: LD_INT 5
34779: ST_TO_ADDR
// end ;
34780: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34781: LD_EXP 104
34785: PUSH
34786: LD_INT 34
34788: PUSH
34789: LD_INT 81
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PPUSH
34796: CALL_OW 69
34800: AND
34801: IFFALSE 35262
34803: GO 34805
34805: DISABLE
34806: LD_INT 0
34808: PPUSH
34809: PPUSH
34810: PPUSH
34811: PPUSH
// begin enable ;
34812: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34813: LD_ADDR_VAR 0 1
34817: PUSH
34818: LD_INT 34
34820: PUSH
34821: LD_INT 81
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PPUSH
34828: CALL_OW 69
34832: PUSH
34833: FOR_IN
34834: IFFALSE 34906
// begin if not i in minersList then
34836: LD_VAR 0 1
34840: PUSH
34841: LD_EXP 105
34845: IN
34846: NOT
34847: IFFALSE 34904
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34849: LD_ADDR_EXP 105
34853: PUSH
34854: LD_EXP 105
34858: PPUSH
34859: LD_EXP 105
34863: PUSH
34864: LD_INT 1
34866: PLUS
34867: PPUSH
34868: LD_VAR 0 1
34872: PPUSH
34873: CALL_OW 1
34877: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34878: LD_ADDR_EXP 106
34882: PUSH
34883: LD_EXP 106
34887: PPUSH
34888: LD_EXP 106
34892: PUSH
34893: LD_INT 1
34895: PLUS
34896: PPUSH
34897: EMPTY
34898: PPUSH
34899: CALL_OW 1
34903: ST_TO_ADDR
// end end ;
34904: GO 34833
34906: POP
34907: POP
// for i := minerMinesList downto 1 do
34908: LD_ADDR_VAR 0 1
34912: PUSH
34913: DOUBLE
34914: LD_EXP 106
34918: INC
34919: ST_TO_ADDR
34920: LD_INT 1
34922: PUSH
34923: FOR_DOWNTO
34924: IFFALSE 35260
// begin if IsLive ( minersList [ i ] ) then
34926: LD_EXP 105
34930: PUSH
34931: LD_VAR 0 1
34935: ARRAY
34936: PPUSH
34937: CALL_OW 300
34941: IFFALSE 34969
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34943: LD_EXP 105
34947: PUSH
34948: LD_VAR 0 1
34952: ARRAY
34953: PPUSH
34954: LD_EXP 106
34958: PUSH
34959: LD_VAR 0 1
34963: ARRAY
34964: PPUSH
34965: CALL_OW 505
// if not minerMinesList [ i ] then
34969: LD_EXP 106
34973: PUSH
34974: LD_VAR 0 1
34978: ARRAY
34979: NOT
34980: IFFALSE 34984
// continue ;
34982: GO 34923
// for j := minerMinesList [ i ] downto 1 do
34984: LD_ADDR_VAR 0 2
34988: PUSH
34989: DOUBLE
34990: LD_EXP 106
34994: PUSH
34995: LD_VAR 0 1
34999: ARRAY
35000: INC
35001: ST_TO_ADDR
35002: LD_INT 1
35004: PUSH
35005: FOR_DOWNTO
35006: IFFALSE 35256
// begin side := GetSide ( minersList [ i ] ) ;
35008: LD_ADDR_VAR 0 3
35012: PUSH
35013: LD_EXP 105
35017: PUSH
35018: LD_VAR 0 1
35022: ARRAY
35023: PPUSH
35024: CALL_OW 255
35028: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35029: LD_ADDR_VAR 0 4
35033: PUSH
35034: LD_EXP 106
35038: PUSH
35039: LD_VAR 0 1
35043: ARRAY
35044: PUSH
35045: LD_VAR 0 2
35049: ARRAY
35050: PUSH
35051: LD_INT 1
35053: ARRAY
35054: PPUSH
35055: LD_EXP 106
35059: PUSH
35060: LD_VAR 0 1
35064: ARRAY
35065: PUSH
35066: LD_VAR 0 2
35070: ARRAY
35071: PUSH
35072: LD_INT 2
35074: ARRAY
35075: PPUSH
35076: CALL_OW 428
35080: ST_TO_ADDR
// if not tmp then
35081: LD_VAR 0 4
35085: NOT
35086: IFFALSE 35090
// continue ;
35088: GO 35005
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35090: LD_VAR 0 4
35094: PUSH
35095: LD_INT 81
35097: PUSH
35098: LD_VAR 0 3
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PPUSH
35107: CALL_OW 69
35111: IN
35112: PUSH
35113: LD_EXP 106
35117: PUSH
35118: LD_VAR 0 1
35122: ARRAY
35123: PUSH
35124: LD_VAR 0 2
35128: ARRAY
35129: PUSH
35130: LD_INT 1
35132: ARRAY
35133: PPUSH
35134: LD_EXP 106
35138: PUSH
35139: LD_VAR 0 1
35143: ARRAY
35144: PUSH
35145: LD_VAR 0 2
35149: ARRAY
35150: PUSH
35151: LD_INT 2
35153: ARRAY
35154: PPUSH
35155: CALL_OW 458
35159: AND
35160: IFFALSE 35254
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35162: LD_EXP 106
35166: PUSH
35167: LD_VAR 0 1
35171: ARRAY
35172: PUSH
35173: LD_VAR 0 2
35177: ARRAY
35178: PUSH
35179: LD_INT 1
35181: ARRAY
35182: PPUSH
35183: LD_EXP 106
35187: PUSH
35188: LD_VAR 0 1
35192: ARRAY
35193: PUSH
35194: LD_VAR 0 2
35198: ARRAY
35199: PUSH
35200: LD_INT 2
35202: ARRAY
35203: PPUSH
35204: LD_VAR 0 3
35208: PPUSH
35209: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35213: LD_ADDR_EXP 106
35217: PUSH
35218: LD_EXP 106
35222: PPUSH
35223: LD_VAR 0 1
35227: PPUSH
35228: LD_EXP 106
35232: PUSH
35233: LD_VAR 0 1
35237: ARRAY
35238: PPUSH
35239: LD_VAR 0 2
35243: PPUSH
35244: CALL_OW 3
35248: PPUSH
35249: CALL_OW 1
35253: ST_TO_ADDR
// end ; end ;
35254: GO 35005
35256: POP
35257: POP
// end ;
35258: GO 34923
35260: POP
35261: POP
// end ;
35262: PPOPN 4
35264: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35265: LD_INT 0
35267: PPUSH
35268: PPUSH
// result := false ;
35269: LD_ADDR_VAR 0 4
35273: PUSH
35274: LD_INT 0
35276: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35277: LD_VAR 0 1
35281: PPUSH
35282: CALL_OW 264
35286: PUSH
35287: LD_INT 81
35289: EQUAL
35290: NOT
35291: IFFALSE 35295
// exit ;
35293: GO 35535
// index := GetElementIndex ( minersList , unit ) ;
35295: LD_ADDR_VAR 0 5
35299: PUSH
35300: LD_EXP 105
35304: PPUSH
35305: LD_VAR 0 1
35309: PPUSH
35310: CALL 41668 0 2
35314: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35315: LD_EXP 106
35319: PUSH
35320: LD_VAR 0 5
35324: ARRAY
35325: PUSH
35326: LD_EXP 107
35330: GREATEREQUAL
35331: IFFALSE 35335
// exit ;
35333: GO 35535
// ComMoveXY ( unit , x , y ) ;
35335: LD_VAR 0 1
35339: PPUSH
35340: LD_VAR 0 2
35344: PPUSH
35345: LD_VAR 0 3
35349: PPUSH
35350: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35354: LD_INT 35
35356: PPUSH
35357: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35361: LD_VAR 0 1
35365: PPUSH
35366: LD_VAR 0 2
35370: PPUSH
35371: LD_VAR 0 3
35375: PPUSH
35376: CALL 73023 0 3
35380: NOT
35381: PUSH
35382: LD_VAR 0 1
35386: PPUSH
35387: CALL_OW 314
35391: AND
35392: IFFALSE 35396
// exit ;
35394: GO 35535
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35396: LD_VAR 0 2
35400: PPUSH
35401: LD_VAR 0 3
35405: PPUSH
35406: CALL_OW 428
35410: PUSH
35411: LD_VAR 0 1
35415: EQUAL
35416: PUSH
35417: LD_VAR 0 1
35421: PPUSH
35422: CALL_OW 314
35426: NOT
35427: AND
35428: IFFALSE 35354
// PlaySoundXY ( x , y , PlantMine ) ;
35430: LD_VAR 0 2
35434: PPUSH
35435: LD_VAR 0 3
35439: PPUSH
35440: LD_STRING PlantMine
35442: PPUSH
35443: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35447: LD_VAR 0 2
35451: PPUSH
35452: LD_VAR 0 3
35456: PPUSH
35457: LD_VAR 0 1
35461: PPUSH
35462: CALL_OW 255
35466: PPUSH
35467: LD_INT 0
35469: PPUSH
35470: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35474: LD_ADDR_EXP 106
35478: PUSH
35479: LD_EXP 106
35483: PPUSH
35484: LD_VAR 0 5
35488: PUSH
35489: LD_EXP 106
35493: PUSH
35494: LD_VAR 0 5
35498: ARRAY
35499: PUSH
35500: LD_INT 1
35502: PLUS
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PPUSH
35508: LD_VAR 0 2
35512: PUSH
35513: LD_VAR 0 3
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PPUSH
35522: CALL 41883 0 3
35526: ST_TO_ADDR
// result := true ;
35527: LD_ADDR_VAR 0 4
35531: PUSH
35532: LD_INT 1
35534: ST_TO_ADDR
// end ;
35535: LD_VAR 0 4
35539: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35540: LD_INT 0
35542: PPUSH
35543: PPUSH
35544: PPUSH
// if not unit in minersList then
35545: LD_VAR 0 1
35549: PUSH
35550: LD_EXP 105
35554: IN
35555: NOT
35556: IFFALSE 35560
// exit ;
35558: GO 35952
// index := GetElementIndex ( minersList , unit ) ;
35560: LD_ADDR_VAR 0 6
35564: PUSH
35565: LD_EXP 105
35569: PPUSH
35570: LD_VAR 0 1
35574: PPUSH
35575: CALL 41668 0 2
35579: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35580: LD_ADDR_VAR 0 5
35584: PUSH
35585: DOUBLE
35586: LD_EXP 106
35590: PUSH
35591: LD_VAR 0 6
35595: ARRAY
35596: INC
35597: ST_TO_ADDR
35598: LD_INT 1
35600: PUSH
35601: FOR_DOWNTO
35602: IFFALSE 35763
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35604: LD_EXP 106
35608: PUSH
35609: LD_VAR 0 6
35613: ARRAY
35614: PUSH
35615: LD_VAR 0 5
35619: ARRAY
35620: PUSH
35621: LD_INT 1
35623: ARRAY
35624: PUSH
35625: LD_VAR 0 2
35629: EQUAL
35630: PUSH
35631: LD_EXP 106
35635: PUSH
35636: LD_VAR 0 6
35640: ARRAY
35641: PUSH
35642: LD_VAR 0 5
35646: ARRAY
35647: PUSH
35648: LD_INT 2
35650: ARRAY
35651: PUSH
35652: LD_VAR 0 3
35656: EQUAL
35657: AND
35658: IFFALSE 35761
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35660: LD_EXP 106
35664: PUSH
35665: LD_VAR 0 6
35669: ARRAY
35670: PUSH
35671: LD_VAR 0 5
35675: ARRAY
35676: PUSH
35677: LD_INT 1
35679: ARRAY
35680: PPUSH
35681: LD_EXP 106
35685: PUSH
35686: LD_VAR 0 6
35690: ARRAY
35691: PUSH
35692: LD_VAR 0 5
35696: ARRAY
35697: PUSH
35698: LD_INT 2
35700: ARRAY
35701: PPUSH
35702: LD_VAR 0 1
35706: PPUSH
35707: CALL_OW 255
35711: PPUSH
35712: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35716: LD_ADDR_EXP 106
35720: PUSH
35721: LD_EXP 106
35725: PPUSH
35726: LD_VAR 0 6
35730: PPUSH
35731: LD_EXP 106
35735: PUSH
35736: LD_VAR 0 6
35740: ARRAY
35741: PPUSH
35742: LD_VAR 0 5
35746: PPUSH
35747: CALL_OW 3
35751: PPUSH
35752: CALL_OW 1
35756: ST_TO_ADDR
// exit ;
35757: POP
35758: POP
35759: GO 35952
// end ; end ;
35761: GO 35601
35763: POP
35764: POP
// for i := minerMinesList [ index ] downto 1 do
35765: LD_ADDR_VAR 0 5
35769: PUSH
35770: DOUBLE
35771: LD_EXP 106
35775: PUSH
35776: LD_VAR 0 6
35780: ARRAY
35781: INC
35782: ST_TO_ADDR
35783: LD_INT 1
35785: PUSH
35786: FOR_DOWNTO
35787: IFFALSE 35950
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35789: LD_EXP 106
35793: PUSH
35794: LD_VAR 0 6
35798: ARRAY
35799: PUSH
35800: LD_VAR 0 5
35804: ARRAY
35805: PUSH
35806: LD_INT 1
35808: ARRAY
35809: PPUSH
35810: LD_EXP 106
35814: PUSH
35815: LD_VAR 0 6
35819: ARRAY
35820: PUSH
35821: LD_VAR 0 5
35825: ARRAY
35826: PUSH
35827: LD_INT 2
35829: ARRAY
35830: PPUSH
35831: LD_VAR 0 2
35835: PPUSH
35836: LD_VAR 0 3
35840: PPUSH
35841: CALL_OW 298
35845: PUSH
35846: LD_INT 6
35848: LESS
35849: IFFALSE 35948
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35851: LD_EXP 106
35855: PUSH
35856: LD_VAR 0 6
35860: ARRAY
35861: PUSH
35862: LD_VAR 0 5
35866: ARRAY
35867: PUSH
35868: LD_INT 1
35870: ARRAY
35871: PPUSH
35872: LD_EXP 106
35876: PUSH
35877: LD_VAR 0 6
35881: ARRAY
35882: PUSH
35883: LD_VAR 0 5
35887: ARRAY
35888: PUSH
35889: LD_INT 2
35891: ARRAY
35892: PPUSH
35893: LD_VAR 0 1
35897: PPUSH
35898: CALL_OW 255
35902: PPUSH
35903: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35907: LD_ADDR_EXP 106
35911: PUSH
35912: LD_EXP 106
35916: PPUSH
35917: LD_VAR 0 6
35921: PPUSH
35922: LD_EXP 106
35926: PUSH
35927: LD_VAR 0 6
35931: ARRAY
35932: PPUSH
35933: LD_VAR 0 5
35937: PPUSH
35938: CALL_OW 3
35942: PPUSH
35943: CALL_OW 1
35947: ST_TO_ADDR
// end ; end ;
35948: GO 35786
35950: POP
35951: POP
// end ;
35952: LD_VAR 0 4
35956: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35957: LD_INT 0
35959: PPUSH
35960: PPUSH
35961: PPUSH
35962: PPUSH
35963: PPUSH
35964: PPUSH
35965: PPUSH
35966: PPUSH
35967: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35968: LD_VAR 0 1
35972: PPUSH
35973: CALL_OW 264
35977: PUSH
35978: LD_INT 81
35980: EQUAL
35981: NOT
35982: PUSH
35983: LD_VAR 0 1
35987: PUSH
35988: LD_EXP 105
35992: IN
35993: NOT
35994: OR
35995: IFFALSE 35999
// exit ;
35997: GO 36321
// index := GetElementIndex ( minersList , unit ) ;
35999: LD_ADDR_VAR 0 6
36003: PUSH
36004: LD_EXP 105
36008: PPUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: CALL 41668 0 2
36018: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36019: LD_ADDR_VAR 0 8
36023: PUSH
36024: LD_EXP 107
36028: PUSH
36029: LD_EXP 106
36033: PUSH
36034: LD_VAR 0 6
36038: ARRAY
36039: MINUS
36040: ST_TO_ADDR
// if not minesFreeAmount then
36041: LD_VAR 0 8
36045: NOT
36046: IFFALSE 36050
// exit ;
36048: GO 36321
// tmp := [ ] ;
36050: LD_ADDR_VAR 0 7
36054: PUSH
36055: EMPTY
36056: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36057: LD_ADDR_VAR 0 5
36061: PUSH
36062: DOUBLE
36063: LD_INT 1
36065: DEC
36066: ST_TO_ADDR
36067: LD_VAR 0 8
36071: PUSH
36072: FOR_TO
36073: IFFALSE 36268
// begin _d := rand ( 0 , 5 ) ;
36075: LD_ADDR_VAR 0 11
36079: PUSH
36080: LD_INT 0
36082: PPUSH
36083: LD_INT 5
36085: PPUSH
36086: CALL_OW 12
36090: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36091: LD_ADDR_VAR 0 12
36095: PUSH
36096: LD_INT 2
36098: PPUSH
36099: LD_INT 6
36101: PPUSH
36102: CALL_OW 12
36106: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36107: LD_ADDR_VAR 0 9
36111: PUSH
36112: LD_VAR 0 2
36116: PPUSH
36117: LD_VAR 0 11
36121: PPUSH
36122: LD_VAR 0 12
36126: PPUSH
36127: CALL_OW 272
36131: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36132: LD_ADDR_VAR 0 10
36136: PUSH
36137: LD_VAR 0 3
36141: PPUSH
36142: LD_VAR 0 11
36146: PPUSH
36147: LD_VAR 0 12
36151: PPUSH
36152: CALL_OW 273
36156: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36157: LD_VAR 0 9
36161: PPUSH
36162: LD_VAR 0 10
36166: PPUSH
36167: CALL_OW 488
36171: PUSH
36172: LD_VAR 0 9
36176: PUSH
36177: LD_VAR 0 10
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_VAR 0 7
36190: IN
36191: NOT
36192: AND
36193: PUSH
36194: LD_VAR 0 9
36198: PPUSH
36199: LD_VAR 0 10
36203: PPUSH
36204: CALL_OW 458
36208: NOT
36209: AND
36210: IFFALSE 36252
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36212: LD_ADDR_VAR 0 7
36216: PUSH
36217: LD_VAR 0 7
36221: PPUSH
36222: LD_VAR 0 7
36226: PUSH
36227: LD_INT 1
36229: PLUS
36230: PPUSH
36231: LD_VAR 0 9
36235: PUSH
36236: LD_VAR 0 10
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PPUSH
36245: CALL_OW 1
36249: ST_TO_ADDR
36250: GO 36266
// i := i - 1 ;
36252: LD_ADDR_VAR 0 5
36256: PUSH
36257: LD_VAR 0 5
36261: PUSH
36262: LD_INT 1
36264: MINUS
36265: ST_TO_ADDR
// end ;
36266: GO 36072
36268: POP
36269: POP
// for i in tmp do
36270: LD_ADDR_VAR 0 5
36274: PUSH
36275: LD_VAR 0 7
36279: PUSH
36280: FOR_IN
36281: IFFALSE 36319
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36283: LD_VAR 0 1
36287: PPUSH
36288: LD_VAR 0 5
36292: PUSH
36293: LD_INT 1
36295: ARRAY
36296: PPUSH
36297: LD_VAR 0 5
36301: PUSH
36302: LD_INT 2
36304: ARRAY
36305: PPUSH
36306: CALL 35265 0 3
36310: NOT
36311: IFFALSE 36317
// exit ;
36313: POP
36314: POP
36315: GO 36321
36317: GO 36280
36319: POP
36320: POP
// end ;
36321: LD_VAR 0 4
36325: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36326: LD_INT 0
36328: PPUSH
36329: PPUSH
36330: PPUSH
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
// if not GetClass ( unit ) = class_sniper then
36335: LD_VAR 0 1
36339: PPUSH
36340: CALL_OW 257
36344: PUSH
36345: LD_INT 5
36347: EQUAL
36348: NOT
36349: IFFALSE 36353
// exit ;
36351: GO 36741
// dist := 8 ;
36353: LD_ADDR_VAR 0 5
36357: PUSH
36358: LD_INT 8
36360: ST_TO_ADDR
// viewRange := 12 ;
36361: LD_ADDR_VAR 0 7
36365: PUSH
36366: LD_INT 12
36368: ST_TO_ADDR
// side := GetSide ( unit ) ;
36369: LD_ADDR_VAR 0 6
36373: PUSH
36374: LD_VAR 0 1
36378: PPUSH
36379: CALL_OW 255
36383: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36384: LD_INT 61
36386: PPUSH
36387: LD_VAR 0 6
36391: PPUSH
36392: CALL_OW 321
36396: PUSH
36397: LD_INT 2
36399: EQUAL
36400: IFFALSE 36410
// viewRange := 16 ;
36402: LD_ADDR_VAR 0 7
36406: PUSH
36407: LD_INT 16
36409: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36410: LD_VAR 0 1
36414: PPUSH
36415: LD_VAR 0 2
36419: PPUSH
36420: LD_VAR 0 3
36424: PPUSH
36425: CALL_OW 297
36429: PUSH
36430: LD_VAR 0 5
36434: GREATER
36435: IFFALSE 36514
// begin ComMoveXY ( unit , x , y ) ;
36437: LD_VAR 0 1
36441: PPUSH
36442: LD_VAR 0 2
36446: PPUSH
36447: LD_VAR 0 3
36451: PPUSH
36452: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36456: LD_INT 35
36458: PPUSH
36459: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36463: LD_VAR 0 1
36467: PPUSH
36468: LD_VAR 0 2
36472: PPUSH
36473: LD_VAR 0 3
36477: PPUSH
36478: CALL 73023 0 3
36482: NOT
36483: IFFALSE 36487
// exit ;
36485: GO 36741
// until GetDistUnitXY ( unit , x , y ) < dist ;
36487: LD_VAR 0 1
36491: PPUSH
36492: LD_VAR 0 2
36496: PPUSH
36497: LD_VAR 0 3
36501: PPUSH
36502: CALL_OW 297
36506: PUSH
36507: LD_VAR 0 5
36511: LESS
36512: IFFALSE 36456
// end ; ComTurnXY ( unit , x , y ) ;
36514: LD_VAR 0 1
36518: PPUSH
36519: LD_VAR 0 2
36523: PPUSH
36524: LD_VAR 0 3
36528: PPUSH
36529: CALL_OW 118
// wait ( 5 ) ;
36533: LD_INT 5
36535: PPUSH
36536: CALL_OW 67
// _d := GetDir ( unit ) ;
36540: LD_ADDR_VAR 0 10
36544: PUSH
36545: LD_VAR 0 1
36549: PPUSH
36550: CALL_OW 254
36554: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36555: LD_ADDR_VAR 0 8
36559: PUSH
36560: LD_VAR 0 1
36564: PPUSH
36565: CALL_OW 250
36569: PPUSH
36570: LD_VAR 0 10
36574: PPUSH
36575: LD_VAR 0 5
36579: PPUSH
36580: CALL_OW 272
36584: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36585: LD_ADDR_VAR 0 9
36589: PUSH
36590: LD_VAR 0 1
36594: PPUSH
36595: CALL_OW 251
36599: PPUSH
36600: LD_VAR 0 10
36604: PPUSH
36605: LD_VAR 0 5
36609: PPUSH
36610: CALL_OW 273
36614: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36615: LD_VAR 0 8
36619: PPUSH
36620: LD_VAR 0 9
36624: PPUSH
36625: CALL_OW 488
36629: NOT
36630: IFFALSE 36634
// exit ;
36632: GO 36741
// ComAnimCustom ( unit , 1 ) ;
36634: LD_VAR 0 1
36638: PPUSH
36639: LD_INT 1
36641: PPUSH
36642: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36646: LD_VAR 0 8
36650: PPUSH
36651: LD_VAR 0 9
36655: PPUSH
36656: LD_VAR 0 6
36660: PPUSH
36661: LD_VAR 0 7
36665: PPUSH
36666: CALL_OW 330
// repeat wait ( 1 ) ;
36670: LD_INT 1
36672: PPUSH
36673: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36677: LD_VAR 0 1
36681: PPUSH
36682: CALL_OW 316
36686: PUSH
36687: LD_VAR 0 1
36691: PPUSH
36692: CALL_OW 314
36696: OR
36697: PUSH
36698: LD_VAR 0 1
36702: PPUSH
36703: CALL_OW 302
36707: NOT
36708: OR
36709: PUSH
36710: LD_VAR 0 1
36714: PPUSH
36715: CALL_OW 301
36719: OR
36720: IFFALSE 36670
// RemoveSeeing ( _x , _y , side ) ;
36722: LD_VAR 0 8
36726: PPUSH
36727: LD_VAR 0 9
36731: PPUSH
36732: LD_VAR 0 6
36736: PPUSH
36737: CALL_OW 331
// end ; end_of_file
36741: LD_VAR 0 4
36745: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36746: LD_INT 0
36748: PPUSH
36749: PPUSH
// if exist_mode then
36750: LD_VAR 0 2
36754: IFFALSE 36779
// unit := CreateCharacter ( prefix & ident ) else
36756: LD_ADDR_VAR 0 5
36760: PUSH
36761: LD_VAR 0 3
36765: PUSH
36766: LD_VAR 0 1
36770: STR
36771: PPUSH
36772: CALL_OW 34
36776: ST_TO_ADDR
36777: GO 36794
// unit := NewCharacter ( ident ) ;
36779: LD_ADDR_VAR 0 5
36783: PUSH
36784: LD_VAR 0 1
36788: PPUSH
36789: CALL_OW 25
36793: ST_TO_ADDR
// result := unit ;
36794: LD_ADDR_VAR 0 4
36798: PUSH
36799: LD_VAR 0 5
36803: ST_TO_ADDR
// end ;
36804: LD_VAR 0 4
36808: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36809: LD_INT 0
36811: PPUSH
36812: PPUSH
// if not side or not nation then
36813: LD_VAR 0 1
36817: NOT
36818: PUSH
36819: LD_VAR 0 2
36823: NOT
36824: OR
36825: IFFALSE 36829
// exit ;
36827: GO 37597
// case nation of nation_american :
36829: LD_VAR 0 2
36833: PUSH
36834: LD_INT 1
36836: DOUBLE
36837: EQUAL
36838: IFTRUE 36842
36840: GO 37056
36842: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36843: LD_ADDR_VAR 0 4
36847: PUSH
36848: LD_INT 35
36850: PUSH
36851: LD_INT 45
36853: PUSH
36854: LD_INT 46
36856: PUSH
36857: LD_INT 47
36859: PUSH
36860: LD_INT 82
36862: PUSH
36863: LD_INT 83
36865: PUSH
36866: LD_INT 84
36868: PUSH
36869: LD_INT 85
36871: PUSH
36872: LD_INT 86
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: LD_INT 6
36883: PUSH
36884: LD_INT 15
36886: PUSH
36887: LD_INT 16
36889: PUSH
36890: LD_INT 7
36892: PUSH
36893: LD_INT 12
36895: PUSH
36896: LD_INT 13
36898: PUSH
36899: LD_INT 10
36901: PUSH
36902: LD_INT 14
36904: PUSH
36905: LD_INT 20
36907: PUSH
36908: LD_INT 21
36910: PUSH
36911: LD_INT 22
36913: PUSH
36914: LD_INT 25
36916: PUSH
36917: LD_INT 32
36919: PUSH
36920: LD_INT 27
36922: PUSH
36923: LD_INT 36
36925: PUSH
36926: LD_INT 69
36928: PUSH
36929: LD_INT 39
36931: PUSH
36932: LD_INT 34
36934: PUSH
36935: LD_INT 40
36937: PUSH
36938: LD_INT 48
36940: PUSH
36941: LD_INT 49
36943: PUSH
36944: LD_INT 50
36946: PUSH
36947: LD_INT 51
36949: PUSH
36950: LD_INT 52
36952: PUSH
36953: LD_INT 53
36955: PUSH
36956: LD_INT 54
36958: PUSH
36959: LD_INT 55
36961: PUSH
36962: LD_INT 56
36964: PUSH
36965: LD_INT 57
36967: PUSH
36968: LD_INT 58
36970: PUSH
36971: LD_INT 59
36973: PUSH
36974: LD_INT 60
36976: PUSH
36977: LD_INT 61
36979: PUSH
36980: LD_INT 62
36982: PUSH
36983: LD_INT 80
36985: PUSH
36986: LD_INT 82
36988: PUSH
36989: LD_INT 83
36991: PUSH
36992: LD_INT 84
36994: PUSH
36995: LD_INT 85
36997: PUSH
36998: LD_INT 86
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: ST_TO_ADDR
37054: GO 37521
37056: LD_INT 2
37058: DOUBLE
37059: EQUAL
37060: IFTRUE 37064
37062: GO 37290
37064: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37065: LD_ADDR_VAR 0 4
37069: PUSH
37070: LD_INT 35
37072: PUSH
37073: LD_INT 45
37075: PUSH
37076: LD_INT 46
37078: PUSH
37079: LD_INT 47
37081: PUSH
37082: LD_INT 82
37084: PUSH
37085: LD_INT 83
37087: PUSH
37088: LD_INT 84
37090: PUSH
37091: LD_INT 85
37093: PUSH
37094: LD_INT 87
37096: PUSH
37097: LD_INT 70
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: LD_INT 11
37105: PUSH
37106: LD_INT 3
37108: PUSH
37109: LD_INT 4
37111: PUSH
37112: LD_INT 5
37114: PUSH
37115: LD_INT 6
37117: PUSH
37118: LD_INT 15
37120: PUSH
37121: LD_INT 18
37123: PUSH
37124: LD_INT 7
37126: PUSH
37127: LD_INT 17
37129: PUSH
37130: LD_INT 8
37132: PUSH
37133: LD_INT 20
37135: PUSH
37136: LD_INT 21
37138: PUSH
37139: LD_INT 22
37141: PUSH
37142: LD_INT 72
37144: PUSH
37145: LD_INT 26
37147: PUSH
37148: LD_INT 69
37150: PUSH
37151: LD_INT 39
37153: PUSH
37154: LD_INT 40
37156: PUSH
37157: LD_INT 41
37159: PUSH
37160: LD_INT 42
37162: PUSH
37163: LD_INT 43
37165: PUSH
37166: LD_INT 48
37168: PUSH
37169: LD_INT 49
37171: PUSH
37172: LD_INT 50
37174: PUSH
37175: LD_INT 51
37177: PUSH
37178: LD_INT 52
37180: PUSH
37181: LD_INT 53
37183: PUSH
37184: LD_INT 54
37186: PUSH
37187: LD_INT 55
37189: PUSH
37190: LD_INT 56
37192: PUSH
37193: LD_INT 60
37195: PUSH
37196: LD_INT 61
37198: PUSH
37199: LD_INT 62
37201: PUSH
37202: LD_INT 66
37204: PUSH
37205: LD_INT 67
37207: PUSH
37208: LD_INT 68
37210: PUSH
37211: LD_INT 81
37213: PUSH
37214: LD_INT 82
37216: PUSH
37217: LD_INT 83
37219: PUSH
37220: LD_INT 84
37222: PUSH
37223: LD_INT 85
37225: PUSH
37226: LD_INT 87
37228: PUSH
37229: LD_INT 88
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: ST_TO_ADDR
37288: GO 37521
37290: LD_INT 3
37292: DOUBLE
37293: EQUAL
37294: IFTRUE 37298
37296: GO 37520
37298: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37299: LD_ADDR_VAR 0 4
37303: PUSH
37304: LD_INT 46
37306: PUSH
37307: LD_INT 47
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: LD_INT 82
37318: PUSH
37319: LD_INT 83
37321: PUSH
37322: LD_INT 84
37324: PUSH
37325: LD_INT 85
37327: PUSH
37328: LD_INT 86
37330: PUSH
37331: LD_INT 11
37333: PUSH
37334: LD_INT 9
37336: PUSH
37337: LD_INT 20
37339: PUSH
37340: LD_INT 19
37342: PUSH
37343: LD_INT 21
37345: PUSH
37346: LD_INT 24
37348: PUSH
37349: LD_INT 22
37351: PUSH
37352: LD_INT 25
37354: PUSH
37355: LD_INT 28
37357: PUSH
37358: LD_INT 29
37360: PUSH
37361: LD_INT 30
37363: PUSH
37364: LD_INT 31
37366: PUSH
37367: LD_INT 37
37369: PUSH
37370: LD_INT 38
37372: PUSH
37373: LD_INT 32
37375: PUSH
37376: LD_INT 27
37378: PUSH
37379: LD_INT 33
37381: PUSH
37382: LD_INT 69
37384: PUSH
37385: LD_INT 39
37387: PUSH
37388: LD_INT 34
37390: PUSH
37391: LD_INT 40
37393: PUSH
37394: LD_INT 71
37396: PUSH
37397: LD_INT 23
37399: PUSH
37400: LD_INT 44
37402: PUSH
37403: LD_INT 48
37405: PUSH
37406: LD_INT 49
37408: PUSH
37409: LD_INT 50
37411: PUSH
37412: LD_INT 51
37414: PUSH
37415: LD_INT 52
37417: PUSH
37418: LD_INT 53
37420: PUSH
37421: LD_INT 54
37423: PUSH
37424: LD_INT 55
37426: PUSH
37427: LD_INT 56
37429: PUSH
37430: LD_INT 57
37432: PUSH
37433: LD_INT 58
37435: PUSH
37436: LD_INT 59
37438: PUSH
37439: LD_INT 63
37441: PUSH
37442: LD_INT 64
37444: PUSH
37445: LD_INT 65
37447: PUSH
37448: LD_INT 82
37450: PUSH
37451: LD_INT 83
37453: PUSH
37454: LD_INT 84
37456: PUSH
37457: LD_INT 85
37459: PUSH
37460: LD_INT 86
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: ST_TO_ADDR
37518: GO 37521
37520: POP
// if state > - 1 and state < 3 then
37521: LD_VAR 0 3
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: GREATER
37530: PUSH
37531: LD_VAR 0 3
37535: PUSH
37536: LD_INT 3
37538: LESS
37539: AND
37540: IFFALSE 37597
// for i in result do
37542: LD_ADDR_VAR 0 5
37546: PUSH
37547: LD_VAR 0 4
37551: PUSH
37552: FOR_IN
37553: IFFALSE 37595
// if GetTech ( i , side ) <> state then
37555: LD_VAR 0 5
37559: PPUSH
37560: LD_VAR 0 1
37564: PPUSH
37565: CALL_OW 321
37569: PUSH
37570: LD_VAR 0 3
37574: NONEQUAL
37575: IFFALSE 37593
// result := result diff i ;
37577: LD_ADDR_VAR 0 4
37581: PUSH
37582: LD_VAR 0 4
37586: PUSH
37587: LD_VAR 0 5
37591: DIFF
37592: ST_TO_ADDR
37593: GO 37552
37595: POP
37596: POP
// end ;
37597: LD_VAR 0 4
37601: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37602: LD_INT 0
37604: PPUSH
37605: PPUSH
37606: PPUSH
// result := true ;
37607: LD_ADDR_VAR 0 3
37611: PUSH
37612: LD_INT 1
37614: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37615: LD_ADDR_VAR 0 5
37619: PUSH
37620: LD_VAR 0 2
37624: PPUSH
37625: CALL_OW 480
37629: ST_TO_ADDR
// if not tmp then
37630: LD_VAR 0 5
37634: NOT
37635: IFFALSE 37639
// exit ;
37637: GO 37688
// for i in tmp do
37639: LD_ADDR_VAR 0 4
37643: PUSH
37644: LD_VAR 0 5
37648: PUSH
37649: FOR_IN
37650: IFFALSE 37686
// if GetTech ( i , side ) <> state_researched then
37652: LD_VAR 0 4
37656: PPUSH
37657: LD_VAR 0 1
37661: PPUSH
37662: CALL_OW 321
37666: PUSH
37667: LD_INT 2
37669: NONEQUAL
37670: IFFALSE 37684
// begin result := false ;
37672: LD_ADDR_VAR 0 3
37676: PUSH
37677: LD_INT 0
37679: ST_TO_ADDR
// exit ;
37680: POP
37681: POP
37682: GO 37688
// end ;
37684: GO 37649
37686: POP
37687: POP
// end ;
37688: LD_VAR 0 3
37692: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37693: LD_INT 0
37695: PPUSH
37696: PPUSH
37697: PPUSH
37698: PPUSH
37699: PPUSH
37700: PPUSH
37701: PPUSH
37702: PPUSH
37703: PPUSH
37704: PPUSH
37705: PPUSH
37706: PPUSH
37707: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37708: LD_VAR 0 1
37712: NOT
37713: PUSH
37714: LD_VAR 0 1
37718: PPUSH
37719: CALL_OW 257
37723: PUSH
37724: LD_INT 9
37726: NONEQUAL
37727: OR
37728: IFFALSE 37732
// exit ;
37730: GO 38305
// side := GetSide ( unit ) ;
37732: LD_ADDR_VAR 0 9
37736: PUSH
37737: LD_VAR 0 1
37741: PPUSH
37742: CALL_OW 255
37746: ST_TO_ADDR
// tech_space := tech_spacanom ;
37747: LD_ADDR_VAR 0 12
37751: PUSH
37752: LD_INT 29
37754: ST_TO_ADDR
// tech_time := tech_taurad ;
37755: LD_ADDR_VAR 0 13
37759: PUSH
37760: LD_INT 28
37762: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37763: LD_ADDR_VAR 0 11
37767: PUSH
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 310
37777: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37778: LD_VAR 0 11
37782: PPUSH
37783: CALL_OW 247
37787: PUSH
37788: LD_INT 2
37790: EQUAL
37791: IFFALSE 37795
// exit ;
37793: GO 38305
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37795: LD_ADDR_VAR 0 8
37799: PUSH
37800: LD_INT 81
37802: PUSH
37803: LD_VAR 0 9
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 3
37814: PUSH
37815: LD_INT 21
37817: PUSH
37818: LD_INT 3
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PPUSH
37833: CALL_OW 69
37837: ST_TO_ADDR
// if not tmp then
37838: LD_VAR 0 8
37842: NOT
37843: IFFALSE 37847
// exit ;
37845: GO 38305
// if in_unit then
37847: LD_VAR 0 11
37851: IFFALSE 37875
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37853: LD_ADDR_VAR 0 10
37857: PUSH
37858: LD_VAR 0 8
37862: PPUSH
37863: LD_VAR 0 11
37867: PPUSH
37868: CALL_OW 74
37872: ST_TO_ADDR
37873: GO 37895
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37875: LD_ADDR_VAR 0 10
37879: PUSH
37880: LD_VAR 0 8
37884: PPUSH
37885: LD_VAR 0 1
37889: PPUSH
37890: CALL_OW 74
37894: ST_TO_ADDR
// if not enemy then
37895: LD_VAR 0 10
37899: NOT
37900: IFFALSE 37904
// exit ;
37902: GO 38305
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37904: LD_VAR 0 11
37908: PUSH
37909: LD_VAR 0 11
37913: PPUSH
37914: LD_VAR 0 10
37918: PPUSH
37919: CALL_OW 296
37923: PUSH
37924: LD_INT 13
37926: GREATER
37927: AND
37928: PUSH
37929: LD_VAR 0 1
37933: PPUSH
37934: LD_VAR 0 10
37938: PPUSH
37939: CALL_OW 296
37943: PUSH
37944: LD_INT 12
37946: GREATER
37947: OR
37948: IFFALSE 37952
// exit ;
37950: GO 38305
// missile := [ 1 ] ;
37952: LD_ADDR_VAR 0 14
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: EMPTY
37961: LIST
37962: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37963: LD_VAR 0 9
37967: PPUSH
37968: LD_VAR 0 12
37972: PPUSH
37973: CALL_OW 325
37977: IFFALSE 38006
// missile := Replace ( missile , missile + 1 , 2 ) ;
37979: LD_ADDR_VAR 0 14
37983: PUSH
37984: LD_VAR 0 14
37988: PPUSH
37989: LD_VAR 0 14
37993: PUSH
37994: LD_INT 1
37996: PLUS
37997: PPUSH
37998: LD_INT 2
38000: PPUSH
38001: CALL_OW 1
38005: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38006: LD_VAR 0 9
38010: PPUSH
38011: LD_VAR 0 13
38015: PPUSH
38016: CALL_OW 325
38020: PUSH
38021: LD_VAR 0 10
38025: PPUSH
38026: CALL_OW 255
38030: PPUSH
38031: LD_VAR 0 13
38035: PPUSH
38036: CALL_OW 325
38040: NOT
38041: AND
38042: IFFALSE 38071
// missile := Replace ( missile , missile + 1 , 3 ) ;
38044: LD_ADDR_VAR 0 14
38048: PUSH
38049: LD_VAR 0 14
38053: PPUSH
38054: LD_VAR 0 14
38058: PUSH
38059: LD_INT 1
38061: PLUS
38062: PPUSH
38063: LD_INT 3
38065: PPUSH
38066: CALL_OW 1
38070: ST_TO_ADDR
// if missile < 2 then
38071: LD_VAR 0 14
38075: PUSH
38076: LD_INT 2
38078: LESS
38079: IFFALSE 38083
// exit ;
38081: GO 38305
// x := GetX ( enemy ) ;
38083: LD_ADDR_VAR 0 4
38087: PUSH
38088: LD_VAR 0 10
38092: PPUSH
38093: CALL_OW 250
38097: ST_TO_ADDR
// y := GetY ( enemy ) ;
38098: LD_ADDR_VAR 0 5
38102: PUSH
38103: LD_VAR 0 10
38107: PPUSH
38108: CALL_OW 251
38112: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38113: LD_ADDR_VAR 0 6
38117: PUSH
38118: LD_VAR 0 4
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PPUSH
38127: LD_INT 1
38129: PPUSH
38130: CALL_OW 12
38134: PLUS
38135: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38136: LD_ADDR_VAR 0 7
38140: PUSH
38141: LD_VAR 0 5
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PPUSH
38150: LD_INT 1
38152: PPUSH
38153: CALL_OW 12
38157: PLUS
38158: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38159: LD_VAR 0 6
38163: PPUSH
38164: LD_VAR 0 7
38168: PPUSH
38169: CALL_OW 488
38173: NOT
38174: IFFALSE 38196
// begin _x := x ;
38176: LD_ADDR_VAR 0 6
38180: PUSH
38181: LD_VAR 0 4
38185: ST_TO_ADDR
// _y := y ;
38186: LD_ADDR_VAR 0 7
38190: PUSH
38191: LD_VAR 0 5
38195: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38196: LD_ADDR_VAR 0 3
38200: PUSH
38201: LD_INT 1
38203: PPUSH
38204: LD_VAR 0 14
38208: PPUSH
38209: CALL_OW 12
38213: ST_TO_ADDR
// case i of 1 :
38214: LD_VAR 0 3
38218: PUSH
38219: LD_INT 1
38221: DOUBLE
38222: EQUAL
38223: IFTRUE 38227
38225: GO 38244
38227: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38228: LD_VAR 0 1
38232: PPUSH
38233: LD_VAR 0 10
38237: PPUSH
38238: CALL_OW 115
38242: GO 38305
38244: LD_INT 2
38246: DOUBLE
38247: EQUAL
38248: IFTRUE 38252
38250: GO 38274
38252: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38253: LD_VAR 0 1
38257: PPUSH
38258: LD_VAR 0 6
38262: PPUSH
38263: LD_VAR 0 7
38267: PPUSH
38268: CALL_OW 153
38272: GO 38305
38274: LD_INT 3
38276: DOUBLE
38277: EQUAL
38278: IFTRUE 38282
38280: GO 38304
38282: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38283: LD_VAR 0 1
38287: PPUSH
38288: LD_VAR 0 6
38292: PPUSH
38293: LD_VAR 0 7
38297: PPUSH
38298: CALL_OW 154
38302: GO 38305
38304: POP
// end ;
38305: LD_VAR 0 2
38309: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38310: LD_INT 0
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
38316: PPUSH
38317: PPUSH
// if not unit or not building then
38318: LD_VAR 0 1
38322: NOT
38323: PUSH
38324: LD_VAR 0 2
38328: NOT
38329: OR
38330: IFFALSE 38334
// exit ;
38332: GO 38492
// x := GetX ( building ) ;
38334: LD_ADDR_VAR 0 5
38338: PUSH
38339: LD_VAR 0 2
38343: PPUSH
38344: CALL_OW 250
38348: ST_TO_ADDR
// y := GetY ( building ) ;
38349: LD_ADDR_VAR 0 6
38353: PUSH
38354: LD_VAR 0 2
38358: PPUSH
38359: CALL_OW 251
38363: ST_TO_ADDR
// for i = 0 to 5 do
38364: LD_ADDR_VAR 0 4
38368: PUSH
38369: DOUBLE
38370: LD_INT 0
38372: DEC
38373: ST_TO_ADDR
38374: LD_INT 5
38376: PUSH
38377: FOR_TO
38378: IFFALSE 38490
// begin _x := ShiftX ( x , i , 3 ) ;
38380: LD_ADDR_VAR 0 7
38384: PUSH
38385: LD_VAR 0 5
38389: PPUSH
38390: LD_VAR 0 4
38394: PPUSH
38395: LD_INT 3
38397: PPUSH
38398: CALL_OW 272
38402: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38403: LD_ADDR_VAR 0 8
38407: PUSH
38408: LD_VAR 0 6
38412: PPUSH
38413: LD_VAR 0 4
38417: PPUSH
38418: LD_INT 3
38420: PPUSH
38421: CALL_OW 273
38425: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38426: LD_VAR 0 7
38430: PPUSH
38431: LD_VAR 0 8
38435: PPUSH
38436: CALL_OW 488
38440: NOT
38441: IFFALSE 38445
// continue ;
38443: GO 38377
// if HexInfo ( _x , _y ) = 0 then
38445: LD_VAR 0 7
38449: PPUSH
38450: LD_VAR 0 8
38454: PPUSH
38455: CALL_OW 428
38459: PUSH
38460: LD_INT 0
38462: EQUAL
38463: IFFALSE 38488
// begin ComMoveXY ( unit , _x , _y ) ;
38465: LD_VAR 0 1
38469: PPUSH
38470: LD_VAR 0 7
38474: PPUSH
38475: LD_VAR 0 8
38479: PPUSH
38480: CALL_OW 111
// exit ;
38484: POP
38485: POP
38486: GO 38492
// end ; end ;
38488: GO 38377
38490: POP
38491: POP
// end ;
38492: LD_VAR 0 3
38496: RET
// export function ScanBase ( side , base_area ) ; begin
38497: LD_INT 0
38499: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38500: LD_ADDR_VAR 0 3
38504: PUSH
38505: LD_VAR 0 2
38509: PPUSH
38510: LD_INT 81
38512: PUSH
38513: LD_VAR 0 1
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PPUSH
38522: CALL_OW 70
38526: ST_TO_ADDR
// end ;
38527: LD_VAR 0 3
38531: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38532: LD_INT 0
38534: PPUSH
38535: PPUSH
38536: PPUSH
38537: PPUSH
// result := false ;
38538: LD_ADDR_VAR 0 2
38542: PUSH
38543: LD_INT 0
38545: ST_TO_ADDR
// side := GetSide ( unit ) ;
38546: LD_ADDR_VAR 0 3
38550: PUSH
38551: LD_VAR 0 1
38555: PPUSH
38556: CALL_OW 255
38560: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38561: LD_ADDR_VAR 0 4
38565: PUSH
38566: LD_VAR 0 1
38570: PPUSH
38571: CALL_OW 248
38575: ST_TO_ADDR
// case nat of 1 :
38576: LD_VAR 0 4
38580: PUSH
38581: LD_INT 1
38583: DOUBLE
38584: EQUAL
38585: IFTRUE 38589
38587: GO 38600
38589: POP
// tech := tech_lassight ; 2 :
38590: LD_ADDR_VAR 0 5
38594: PUSH
38595: LD_INT 12
38597: ST_TO_ADDR
38598: GO 38639
38600: LD_INT 2
38602: DOUBLE
38603: EQUAL
38604: IFTRUE 38608
38606: GO 38619
38608: POP
// tech := tech_mortar ; 3 :
38609: LD_ADDR_VAR 0 5
38613: PUSH
38614: LD_INT 41
38616: ST_TO_ADDR
38617: GO 38639
38619: LD_INT 3
38621: DOUBLE
38622: EQUAL
38623: IFTRUE 38627
38625: GO 38638
38627: POP
// tech := tech_bazooka ; end ;
38628: LD_ADDR_VAR 0 5
38632: PUSH
38633: LD_INT 44
38635: ST_TO_ADDR
38636: GO 38639
38638: POP
// if Researched ( side , tech ) then
38639: LD_VAR 0 3
38643: PPUSH
38644: LD_VAR 0 5
38648: PPUSH
38649: CALL_OW 325
38653: IFFALSE 38680
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38655: LD_ADDR_VAR 0 2
38659: PUSH
38660: LD_INT 5
38662: PUSH
38663: LD_INT 8
38665: PUSH
38666: LD_INT 9
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: PUSH
38674: LD_VAR 0 4
38678: ARRAY
38679: ST_TO_ADDR
// end ;
38680: LD_VAR 0 2
38684: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38685: LD_INT 0
38687: PPUSH
38688: PPUSH
38689: PPUSH
// if not mines then
38690: LD_VAR 0 2
38694: NOT
38695: IFFALSE 38699
// exit ;
38697: GO 38843
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38699: LD_ADDR_VAR 0 5
38703: PUSH
38704: LD_INT 81
38706: PUSH
38707: LD_VAR 0 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 3
38718: PUSH
38719: LD_INT 21
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PPUSH
38737: CALL_OW 69
38741: ST_TO_ADDR
// for i in mines do
38742: LD_ADDR_VAR 0 4
38746: PUSH
38747: LD_VAR 0 2
38751: PUSH
38752: FOR_IN
38753: IFFALSE 38841
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38755: LD_VAR 0 4
38759: PUSH
38760: LD_INT 1
38762: ARRAY
38763: PPUSH
38764: LD_VAR 0 4
38768: PUSH
38769: LD_INT 2
38771: ARRAY
38772: PPUSH
38773: CALL_OW 458
38777: NOT
38778: IFFALSE 38782
// continue ;
38780: GO 38752
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38782: LD_VAR 0 4
38786: PUSH
38787: LD_INT 1
38789: ARRAY
38790: PPUSH
38791: LD_VAR 0 4
38795: PUSH
38796: LD_INT 2
38798: ARRAY
38799: PPUSH
38800: CALL_OW 428
38804: PUSH
38805: LD_VAR 0 5
38809: IN
38810: IFFALSE 38839
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38812: LD_VAR 0 4
38816: PUSH
38817: LD_INT 1
38819: ARRAY
38820: PPUSH
38821: LD_VAR 0 4
38825: PUSH
38826: LD_INT 2
38828: ARRAY
38829: PPUSH
38830: LD_VAR 0 1
38834: PPUSH
38835: CALL_OW 456
// end ;
38839: GO 38752
38841: POP
38842: POP
// end ;
38843: LD_VAR 0 3
38847: RET
// export function Count ( array ) ; var i ; begin
38848: LD_INT 0
38850: PPUSH
38851: PPUSH
// result := 0 ;
38852: LD_ADDR_VAR 0 2
38856: PUSH
38857: LD_INT 0
38859: ST_TO_ADDR
// for i in array do
38860: LD_ADDR_VAR 0 3
38864: PUSH
38865: LD_VAR 0 1
38869: PUSH
38870: FOR_IN
38871: IFFALSE 38895
// if i then
38873: LD_VAR 0 3
38877: IFFALSE 38893
// result := result + 1 ;
38879: LD_ADDR_VAR 0 2
38883: PUSH
38884: LD_VAR 0 2
38888: PUSH
38889: LD_INT 1
38891: PLUS
38892: ST_TO_ADDR
38893: GO 38870
38895: POP
38896: POP
// end ;
38897: LD_VAR 0 2
38901: RET
// export function IsEmpty ( building ) ; begin
38902: LD_INT 0
38904: PPUSH
// if not building then
38905: LD_VAR 0 1
38909: NOT
38910: IFFALSE 38914
// exit ;
38912: GO 38957
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38914: LD_ADDR_VAR 0 2
38918: PUSH
38919: LD_VAR 0 1
38923: PUSH
38924: LD_INT 22
38926: PUSH
38927: LD_VAR 0 1
38931: PPUSH
38932: CALL_OW 255
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 58
38943: PUSH
38944: EMPTY
38945: LIST
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PPUSH
38951: CALL_OW 69
38955: IN
38956: ST_TO_ADDR
// end ;
38957: LD_VAR 0 2
38961: RET
// export function IsNotFull ( building ) ; var places ; begin
38962: LD_INT 0
38964: PPUSH
38965: PPUSH
// if not building then
38966: LD_VAR 0 1
38970: NOT
38971: IFFALSE 38975
// exit ;
38973: GO 39146
// result := false ;
38975: LD_ADDR_VAR 0 2
38979: PUSH
38980: LD_INT 0
38982: ST_TO_ADDR
// places := 0 ;
38983: LD_ADDR_VAR 0 3
38987: PUSH
38988: LD_INT 0
38990: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
38991: LD_VAR 0 1
38995: PPUSH
38996: CALL_OW 266
39000: PUSH
39001: LD_INT 0
39003: DOUBLE
39004: EQUAL
39005: IFTRUE 39063
39007: LD_INT 1
39009: DOUBLE
39010: EQUAL
39011: IFTRUE 39063
39013: LD_INT 6
39015: DOUBLE
39016: EQUAL
39017: IFTRUE 39063
39019: LD_INT 7
39021: DOUBLE
39022: EQUAL
39023: IFTRUE 39063
39025: LD_INT 8
39027: DOUBLE
39028: EQUAL
39029: IFTRUE 39063
39031: LD_INT 4
39033: DOUBLE
39034: EQUAL
39035: IFTRUE 39063
39037: LD_INT 5
39039: DOUBLE
39040: EQUAL
39041: IFTRUE 39063
39043: LD_INT 2
39045: DOUBLE
39046: EQUAL
39047: IFTRUE 39063
39049: LD_INT 3
39051: DOUBLE
39052: EQUAL
39053: IFTRUE 39063
39055: LD_INT 35
39057: DOUBLE
39058: EQUAL
39059: IFTRUE 39063
39061: GO 39074
39063: POP
// places := 6 ; b_bunker , b_breastwork :
39064: LD_ADDR_VAR 0 3
39068: PUSH
39069: LD_INT 6
39071: ST_TO_ADDR
39072: GO 39119
39074: LD_INT 32
39076: DOUBLE
39077: EQUAL
39078: IFTRUE 39088
39080: LD_INT 31
39082: DOUBLE
39083: EQUAL
39084: IFTRUE 39088
39086: GO 39099
39088: POP
// places := 1 ; b_control_tower :
39089: LD_ADDR_VAR 0 3
39093: PUSH
39094: LD_INT 1
39096: ST_TO_ADDR
39097: GO 39119
39099: LD_INT 36
39101: DOUBLE
39102: EQUAL
39103: IFTRUE 39107
39105: GO 39118
39107: POP
// places := 3 ; end ;
39108: LD_ADDR_VAR 0 3
39112: PUSH
39113: LD_INT 3
39115: ST_TO_ADDR
39116: GO 39119
39118: POP
// if places then
39119: LD_VAR 0 3
39123: IFFALSE 39146
// result := UnitsInside ( building ) < places ;
39125: LD_ADDR_VAR 0 2
39129: PUSH
39130: LD_VAR 0 1
39134: PPUSH
39135: CALL_OW 313
39139: PUSH
39140: LD_VAR 0 3
39144: LESS
39145: ST_TO_ADDR
// end ;
39146: LD_VAR 0 2
39150: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39151: LD_INT 0
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
// tmp := [ ] ;
39157: LD_ADDR_VAR 0 3
39161: PUSH
39162: EMPTY
39163: ST_TO_ADDR
// list := [ ] ;
39164: LD_ADDR_VAR 0 5
39168: PUSH
39169: EMPTY
39170: ST_TO_ADDR
// for i = 16 to 25 do
39171: LD_ADDR_VAR 0 4
39175: PUSH
39176: DOUBLE
39177: LD_INT 16
39179: DEC
39180: ST_TO_ADDR
39181: LD_INT 25
39183: PUSH
39184: FOR_TO
39185: IFFALSE 39258
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39187: LD_ADDR_VAR 0 3
39191: PUSH
39192: LD_VAR 0 3
39196: PUSH
39197: LD_INT 22
39199: PUSH
39200: LD_VAR 0 1
39204: PPUSH
39205: CALL_OW 255
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 91
39216: PUSH
39217: LD_VAR 0 1
39221: PUSH
39222: LD_INT 6
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 30
39232: PUSH
39233: LD_VAR 0 4
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: LIST
39246: PUSH
39247: EMPTY
39248: LIST
39249: PPUSH
39250: CALL_OW 69
39254: ADD
39255: ST_TO_ADDR
39256: GO 39184
39258: POP
39259: POP
// for i = 1 to tmp do
39260: LD_ADDR_VAR 0 4
39264: PUSH
39265: DOUBLE
39266: LD_INT 1
39268: DEC
39269: ST_TO_ADDR
39270: LD_VAR 0 3
39274: PUSH
39275: FOR_TO
39276: IFFALSE 39364
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39278: LD_ADDR_VAR 0 5
39282: PUSH
39283: LD_VAR 0 5
39287: PUSH
39288: LD_VAR 0 3
39292: PUSH
39293: LD_VAR 0 4
39297: ARRAY
39298: PPUSH
39299: CALL_OW 266
39303: PUSH
39304: LD_VAR 0 3
39308: PUSH
39309: LD_VAR 0 4
39313: ARRAY
39314: PPUSH
39315: CALL_OW 250
39319: PUSH
39320: LD_VAR 0 3
39324: PUSH
39325: LD_VAR 0 4
39329: ARRAY
39330: PPUSH
39331: CALL_OW 251
39335: PUSH
39336: LD_VAR 0 3
39340: PUSH
39341: LD_VAR 0 4
39345: ARRAY
39346: PPUSH
39347: CALL_OW 254
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: PUSH
39358: EMPTY
39359: LIST
39360: ADD
39361: ST_TO_ADDR
39362: GO 39275
39364: POP
39365: POP
// result := list ;
39366: LD_ADDR_VAR 0 2
39370: PUSH
39371: LD_VAR 0 5
39375: ST_TO_ADDR
// end ;
39376: LD_VAR 0 2
39380: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39381: LD_INT 0
39383: PPUSH
39384: PPUSH
39385: PPUSH
39386: PPUSH
39387: PPUSH
39388: PPUSH
39389: PPUSH
// if not factory then
39390: LD_VAR 0 1
39394: NOT
39395: IFFALSE 39399
// exit ;
39397: GO 39992
// if control = control_apeman then
39399: LD_VAR 0 4
39403: PUSH
39404: LD_INT 5
39406: EQUAL
39407: IFFALSE 39516
// begin tmp := UnitsInside ( factory ) ;
39409: LD_ADDR_VAR 0 8
39413: PUSH
39414: LD_VAR 0 1
39418: PPUSH
39419: CALL_OW 313
39423: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39424: LD_VAR 0 8
39428: PPUSH
39429: LD_INT 25
39431: PUSH
39432: LD_INT 12
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PPUSH
39439: CALL_OW 72
39443: NOT
39444: IFFALSE 39454
// control := control_manual ;
39446: LD_ADDR_VAR 0 4
39450: PUSH
39451: LD_INT 1
39453: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39454: LD_ADDR_VAR 0 8
39458: PUSH
39459: LD_VAR 0 1
39463: PPUSH
39464: CALL 39151 0 1
39468: ST_TO_ADDR
// if tmp then
39469: LD_VAR 0 8
39473: IFFALSE 39516
// begin for i in tmp do
39475: LD_ADDR_VAR 0 7
39479: PUSH
39480: LD_VAR 0 8
39484: PUSH
39485: FOR_IN
39486: IFFALSE 39514
// if i [ 1 ] = b_ext_radio then
39488: LD_VAR 0 7
39492: PUSH
39493: LD_INT 1
39495: ARRAY
39496: PUSH
39497: LD_INT 22
39499: EQUAL
39500: IFFALSE 39512
// begin control := control_remote ;
39502: LD_ADDR_VAR 0 4
39506: PUSH
39507: LD_INT 2
39509: ST_TO_ADDR
// break ;
39510: GO 39514
// end ;
39512: GO 39485
39514: POP
39515: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39516: LD_VAR 0 1
39520: PPUSH
39521: LD_VAR 0 2
39525: PPUSH
39526: LD_VAR 0 3
39530: PPUSH
39531: LD_VAR 0 4
39535: PPUSH
39536: LD_VAR 0 5
39540: PPUSH
39541: CALL_OW 448
39545: IFFALSE 39580
// begin result := [ chassis , engine , control , weapon ] ;
39547: LD_ADDR_VAR 0 6
39551: PUSH
39552: LD_VAR 0 2
39556: PUSH
39557: LD_VAR 0 3
39561: PUSH
39562: LD_VAR 0 4
39566: PUSH
39567: LD_VAR 0 5
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: ST_TO_ADDR
// exit ;
39578: GO 39992
// end ; _chassis := AvailableChassisList ( factory ) ;
39580: LD_ADDR_VAR 0 9
39584: PUSH
39585: LD_VAR 0 1
39589: PPUSH
39590: CALL_OW 475
39594: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39595: LD_ADDR_VAR 0 11
39599: PUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: CALL_OW 476
39609: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39610: LD_ADDR_VAR 0 12
39614: PUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 477
39624: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39625: LD_ADDR_VAR 0 10
39629: PUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: CALL_OW 478
39639: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39640: LD_VAR 0 9
39644: NOT
39645: PUSH
39646: LD_VAR 0 11
39650: NOT
39651: OR
39652: PUSH
39653: LD_VAR 0 12
39657: NOT
39658: OR
39659: PUSH
39660: LD_VAR 0 10
39664: NOT
39665: OR
39666: IFFALSE 39701
// begin result := [ chassis , engine , control , weapon ] ;
39668: LD_ADDR_VAR 0 6
39672: PUSH
39673: LD_VAR 0 2
39677: PUSH
39678: LD_VAR 0 3
39682: PUSH
39683: LD_VAR 0 4
39687: PUSH
39688: LD_VAR 0 5
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: ST_TO_ADDR
// exit ;
39699: GO 39992
// end ; if not chassis in _chassis then
39701: LD_VAR 0 2
39705: PUSH
39706: LD_VAR 0 9
39710: IN
39711: NOT
39712: IFFALSE 39738
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39714: LD_ADDR_VAR 0 2
39718: PUSH
39719: LD_VAR 0 9
39723: PUSH
39724: LD_INT 1
39726: PPUSH
39727: LD_VAR 0 9
39731: PPUSH
39732: CALL_OW 12
39736: ARRAY
39737: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39738: LD_VAR 0 2
39742: PPUSH
39743: LD_VAR 0 3
39747: PPUSH
39748: CALL 39997 0 2
39752: NOT
39753: IFFALSE 39812
// repeat engine := _engine [ 1 ] ;
39755: LD_ADDR_VAR 0 3
39759: PUSH
39760: LD_VAR 0 11
39764: PUSH
39765: LD_INT 1
39767: ARRAY
39768: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39769: LD_ADDR_VAR 0 11
39773: PUSH
39774: LD_VAR 0 11
39778: PPUSH
39779: LD_INT 1
39781: PPUSH
39782: CALL_OW 3
39786: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39787: LD_VAR 0 2
39791: PPUSH
39792: LD_VAR 0 3
39796: PPUSH
39797: CALL 39997 0 2
39801: PUSH
39802: LD_VAR 0 11
39806: PUSH
39807: EMPTY
39808: EQUAL
39809: OR
39810: IFFALSE 39755
// if not control in _control then
39812: LD_VAR 0 4
39816: PUSH
39817: LD_VAR 0 12
39821: IN
39822: NOT
39823: IFFALSE 39849
// control := _control [ rand ( 1 , _control ) ] ;
39825: LD_ADDR_VAR 0 4
39829: PUSH
39830: LD_VAR 0 12
39834: PUSH
39835: LD_INT 1
39837: PPUSH
39838: LD_VAR 0 12
39842: PPUSH
39843: CALL_OW 12
39847: ARRAY
39848: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39849: LD_VAR 0 2
39853: PPUSH
39854: LD_VAR 0 5
39858: PPUSH
39859: CALL 40217 0 2
39863: NOT
39864: IFFALSE 39923
// repeat weapon := _weapon [ 1 ] ;
39866: LD_ADDR_VAR 0 5
39870: PUSH
39871: LD_VAR 0 10
39875: PUSH
39876: LD_INT 1
39878: ARRAY
39879: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39880: LD_ADDR_VAR 0 10
39884: PUSH
39885: LD_VAR 0 10
39889: PPUSH
39890: LD_INT 1
39892: PPUSH
39893: CALL_OW 3
39897: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39898: LD_VAR 0 2
39902: PPUSH
39903: LD_VAR 0 5
39907: PPUSH
39908: CALL 40217 0 2
39912: PUSH
39913: LD_VAR 0 10
39917: PUSH
39918: EMPTY
39919: EQUAL
39920: OR
39921: IFFALSE 39866
// result := [ ] ;
39923: LD_ADDR_VAR 0 6
39927: PUSH
39928: EMPTY
39929: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39930: LD_VAR 0 1
39934: PPUSH
39935: LD_VAR 0 2
39939: PPUSH
39940: LD_VAR 0 3
39944: PPUSH
39945: LD_VAR 0 4
39949: PPUSH
39950: LD_VAR 0 5
39954: PPUSH
39955: CALL_OW 448
39959: IFFALSE 39992
// result := [ chassis , engine , control , weapon ] ;
39961: LD_ADDR_VAR 0 6
39965: PUSH
39966: LD_VAR 0 2
39970: PUSH
39971: LD_VAR 0 3
39975: PUSH
39976: LD_VAR 0 4
39980: PUSH
39981: LD_VAR 0 5
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: ST_TO_ADDR
// end ;
39992: LD_VAR 0 6
39996: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39997: LD_INT 0
39999: PPUSH
// if not chassis or not engine then
40000: LD_VAR 0 1
40004: NOT
40005: PUSH
40006: LD_VAR 0 2
40010: NOT
40011: OR
40012: IFFALSE 40016
// exit ;
40014: GO 40212
// case engine of engine_solar :
40016: LD_VAR 0 2
40020: PUSH
40021: LD_INT 2
40023: DOUBLE
40024: EQUAL
40025: IFTRUE 40029
40027: GO 40067
40029: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40030: LD_ADDR_VAR 0 3
40034: PUSH
40035: LD_INT 11
40037: PUSH
40038: LD_INT 12
40040: PUSH
40041: LD_INT 13
40043: PUSH
40044: LD_INT 14
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: LD_INT 3
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: ST_TO_ADDR
40065: GO 40196
40067: LD_INT 1
40069: DOUBLE
40070: EQUAL
40071: IFTRUE 40075
40073: GO 40137
40075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40076: LD_ADDR_VAR 0 3
40080: PUSH
40081: LD_INT 11
40083: PUSH
40084: LD_INT 12
40086: PUSH
40087: LD_INT 13
40089: PUSH
40090: LD_INT 14
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: LD_INT 2
40098: PUSH
40099: LD_INT 3
40101: PUSH
40102: LD_INT 4
40104: PUSH
40105: LD_INT 5
40107: PUSH
40108: LD_INT 21
40110: PUSH
40111: LD_INT 23
40113: PUSH
40114: LD_INT 22
40116: PUSH
40117: LD_INT 24
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: ST_TO_ADDR
40135: GO 40196
40137: LD_INT 3
40139: DOUBLE
40140: EQUAL
40141: IFTRUE 40145
40143: GO 40195
40145: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40146: LD_ADDR_VAR 0 3
40150: PUSH
40151: LD_INT 13
40153: PUSH
40154: LD_INT 14
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: LD_INT 3
40162: PUSH
40163: LD_INT 4
40165: PUSH
40166: LD_INT 5
40168: PUSH
40169: LD_INT 21
40171: PUSH
40172: LD_INT 22
40174: PUSH
40175: LD_INT 23
40177: PUSH
40178: LD_INT 24
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: ST_TO_ADDR
40193: GO 40196
40195: POP
// result := ( chassis in result ) ;
40196: LD_ADDR_VAR 0 3
40200: PUSH
40201: LD_VAR 0 1
40205: PUSH
40206: LD_VAR 0 3
40210: IN
40211: ST_TO_ADDR
// end ;
40212: LD_VAR 0 3
40216: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40217: LD_INT 0
40219: PPUSH
// if not chassis or not weapon then
40220: LD_VAR 0 1
40224: NOT
40225: PUSH
40226: LD_VAR 0 2
40230: NOT
40231: OR
40232: IFFALSE 40236
// exit ;
40234: GO 41296
// case weapon of us_machine_gun :
40236: LD_VAR 0 2
40240: PUSH
40241: LD_INT 2
40243: DOUBLE
40244: EQUAL
40245: IFTRUE 40249
40247: GO 40279
40249: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40250: LD_ADDR_VAR 0 3
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: LD_INT 3
40263: PUSH
40264: LD_INT 4
40266: PUSH
40267: LD_INT 5
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: ST_TO_ADDR
40277: GO 41280
40279: LD_INT 3
40281: DOUBLE
40282: EQUAL
40283: IFTRUE 40287
40285: GO 40317
40287: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40288: LD_ADDR_VAR 0 3
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: LD_INT 3
40301: PUSH
40302: LD_INT 4
40304: PUSH
40305: LD_INT 5
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: ST_TO_ADDR
40315: GO 41280
40317: LD_INT 11
40319: DOUBLE
40320: EQUAL
40321: IFTRUE 40325
40323: GO 40355
40325: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40326: LD_ADDR_VAR 0 3
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 2
40336: PUSH
40337: LD_INT 3
40339: PUSH
40340: LD_INT 4
40342: PUSH
40343: LD_INT 5
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: ST_TO_ADDR
40353: GO 41280
40355: LD_INT 4
40357: DOUBLE
40358: EQUAL
40359: IFTRUE 40363
40361: GO 40389
40363: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40364: LD_ADDR_VAR 0 3
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 3
40374: PUSH
40375: LD_INT 4
40377: PUSH
40378: LD_INT 5
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: ST_TO_ADDR
40387: GO 41280
40389: LD_INT 5
40391: DOUBLE
40392: EQUAL
40393: IFTRUE 40397
40395: GO 40423
40397: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40398: LD_ADDR_VAR 0 3
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: LD_INT 4
40411: PUSH
40412: LD_INT 5
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
40421: GO 41280
40423: LD_INT 9
40425: DOUBLE
40426: EQUAL
40427: IFTRUE 40431
40429: GO 40457
40431: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40432: LD_ADDR_VAR 0 3
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: LD_INT 3
40442: PUSH
40443: LD_INT 4
40445: PUSH
40446: LD_INT 5
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: ST_TO_ADDR
40455: GO 41280
40457: LD_INT 7
40459: DOUBLE
40460: EQUAL
40461: IFTRUE 40465
40463: GO 40491
40465: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40466: LD_ADDR_VAR 0 3
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: LD_INT 3
40476: PUSH
40477: LD_INT 4
40479: PUSH
40480: LD_INT 5
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: ST_TO_ADDR
40489: GO 41280
40491: LD_INT 12
40493: DOUBLE
40494: EQUAL
40495: IFTRUE 40499
40497: GO 40525
40499: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40500: LD_ADDR_VAR 0 3
40504: PUSH
40505: LD_INT 2
40507: PUSH
40508: LD_INT 3
40510: PUSH
40511: LD_INT 4
40513: PUSH
40514: LD_INT 5
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: ST_TO_ADDR
40523: GO 41280
40525: LD_INT 13
40527: DOUBLE
40528: EQUAL
40529: IFTRUE 40533
40531: GO 40559
40533: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40534: LD_ADDR_VAR 0 3
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: LD_INT 3
40544: PUSH
40545: LD_INT 4
40547: PUSH
40548: LD_INT 5
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: ST_TO_ADDR
40557: GO 41280
40559: LD_INT 14
40561: DOUBLE
40562: EQUAL
40563: IFTRUE 40567
40565: GO 40585
40567: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40568: LD_ADDR_VAR 0 3
40572: PUSH
40573: LD_INT 4
40575: PUSH
40576: LD_INT 5
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: ST_TO_ADDR
40583: GO 41280
40585: LD_INT 6
40587: DOUBLE
40588: EQUAL
40589: IFTRUE 40593
40591: GO 40611
40593: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40594: LD_ADDR_VAR 0 3
40598: PUSH
40599: LD_INT 4
40601: PUSH
40602: LD_INT 5
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: ST_TO_ADDR
40609: GO 41280
40611: LD_INT 10
40613: DOUBLE
40614: EQUAL
40615: IFTRUE 40619
40617: GO 40637
40619: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40620: LD_ADDR_VAR 0 3
40624: PUSH
40625: LD_INT 4
40627: PUSH
40628: LD_INT 5
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: ST_TO_ADDR
40635: GO 41280
40637: LD_INT 22
40639: DOUBLE
40640: EQUAL
40641: IFTRUE 40645
40643: GO 40671
40645: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40646: LD_ADDR_VAR 0 3
40650: PUSH
40651: LD_INT 11
40653: PUSH
40654: LD_INT 12
40656: PUSH
40657: LD_INT 13
40659: PUSH
40660: LD_INT 14
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: ST_TO_ADDR
40669: GO 41280
40671: LD_INT 23
40673: DOUBLE
40674: EQUAL
40675: IFTRUE 40679
40677: GO 40705
40679: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40680: LD_ADDR_VAR 0 3
40684: PUSH
40685: LD_INT 11
40687: PUSH
40688: LD_INT 12
40690: PUSH
40691: LD_INT 13
40693: PUSH
40694: LD_INT 14
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: ST_TO_ADDR
40703: GO 41280
40705: LD_INT 24
40707: DOUBLE
40708: EQUAL
40709: IFTRUE 40713
40711: GO 40739
40713: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40714: LD_ADDR_VAR 0 3
40718: PUSH
40719: LD_INT 11
40721: PUSH
40722: LD_INT 12
40724: PUSH
40725: LD_INT 13
40727: PUSH
40728: LD_INT 14
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: ST_TO_ADDR
40737: GO 41280
40739: LD_INT 30
40741: DOUBLE
40742: EQUAL
40743: IFTRUE 40747
40745: GO 40773
40747: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40748: LD_ADDR_VAR 0 3
40752: PUSH
40753: LD_INT 11
40755: PUSH
40756: LD_INT 12
40758: PUSH
40759: LD_INT 13
40761: PUSH
40762: LD_INT 14
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: ST_TO_ADDR
40771: GO 41280
40773: LD_INT 25
40775: DOUBLE
40776: EQUAL
40777: IFTRUE 40781
40779: GO 40799
40781: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40782: LD_ADDR_VAR 0 3
40786: PUSH
40787: LD_INT 13
40789: PUSH
40790: LD_INT 14
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: ST_TO_ADDR
40797: GO 41280
40799: LD_INT 27
40801: DOUBLE
40802: EQUAL
40803: IFTRUE 40807
40805: GO 40825
40807: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40808: LD_ADDR_VAR 0 3
40812: PUSH
40813: LD_INT 13
40815: PUSH
40816: LD_INT 14
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: ST_TO_ADDR
40823: GO 41280
40825: LD_INT 92
40827: DOUBLE
40828: EQUAL
40829: IFTRUE 40833
40831: GO 40859
40833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40834: LD_ADDR_VAR 0 3
40838: PUSH
40839: LD_INT 11
40841: PUSH
40842: LD_INT 12
40844: PUSH
40845: LD_INT 13
40847: PUSH
40848: LD_INT 14
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: ST_TO_ADDR
40857: GO 41280
40859: LD_INT 28
40861: DOUBLE
40862: EQUAL
40863: IFTRUE 40867
40865: GO 40885
40867: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40868: LD_ADDR_VAR 0 3
40872: PUSH
40873: LD_INT 13
40875: PUSH
40876: LD_INT 14
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: ST_TO_ADDR
40883: GO 41280
40885: LD_INT 29
40887: DOUBLE
40888: EQUAL
40889: IFTRUE 40893
40891: GO 40911
40893: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40894: LD_ADDR_VAR 0 3
40898: PUSH
40899: LD_INT 13
40901: PUSH
40902: LD_INT 14
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: ST_TO_ADDR
40909: GO 41280
40911: LD_INT 31
40913: DOUBLE
40914: EQUAL
40915: IFTRUE 40919
40917: GO 40937
40919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40920: LD_ADDR_VAR 0 3
40924: PUSH
40925: LD_INT 13
40927: PUSH
40928: LD_INT 14
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: ST_TO_ADDR
40935: GO 41280
40937: LD_INT 26
40939: DOUBLE
40940: EQUAL
40941: IFTRUE 40945
40943: GO 40963
40945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40946: LD_ADDR_VAR 0 3
40950: PUSH
40951: LD_INT 13
40953: PUSH
40954: LD_INT 14
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: ST_TO_ADDR
40961: GO 41280
40963: LD_INT 42
40965: DOUBLE
40966: EQUAL
40967: IFTRUE 40971
40969: GO 40997
40971: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40972: LD_ADDR_VAR 0 3
40976: PUSH
40977: LD_INT 21
40979: PUSH
40980: LD_INT 22
40982: PUSH
40983: LD_INT 23
40985: PUSH
40986: LD_INT 24
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: ST_TO_ADDR
40995: GO 41280
40997: LD_INT 43
40999: DOUBLE
41000: EQUAL
41001: IFTRUE 41005
41003: GO 41031
41005: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41006: LD_ADDR_VAR 0 3
41010: PUSH
41011: LD_INT 21
41013: PUSH
41014: LD_INT 22
41016: PUSH
41017: LD_INT 23
41019: PUSH
41020: LD_INT 24
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: ST_TO_ADDR
41029: GO 41280
41031: LD_INT 44
41033: DOUBLE
41034: EQUAL
41035: IFTRUE 41039
41037: GO 41065
41039: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41040: LD_ADDR_VAR 0 3
41044: PUSH
41045: LD_INT 21
41047: PUSH
41048: LD_INT 22
41050: PUSH
41051: LD_INT 23
41053: PUSH
41054: LD_INT 24
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: ST_TO_ADDR
41063: GO 41280
41065: LD_INT 45
41067: DOUBLE
41068: EQUAL
41069: IFTRUE 41073
41071: GO 41099
41073: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41074: LD_ADDR_VAR 0 3
41078: PUSH
41079: LD_INT 21
41081: PUSH
41082: LD_INT 22
41084: PUSH
41085: LD_INT 23
41087: PUSH
41088: LD_INT 24
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: ST_TO_ADDR
41097: GO 41280
41099: LD_INT 49
41101: DOUBLE
41102: EQUAL
41103: IFTRUE 41107
41105: GO 41133
41107: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41108: LD_ADDR_VAR 0 3
41112: PUSH
41113: LD_INT 21
41115: PUSH
41116: LD_INT 22
41118: PUSH
41119: LD_INT 23
41121: PUSH
41122: LD_INT 24
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: ST_TO_ADDR
41131: GO 41280
41133: LD_INT 51
41135: DOUBLE
41136: EQUAL
41137: IFTRUE 41141
41139: GO 41167
41141: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41142: LD_ADDR_VAR 0 3
41146: PUSH
41147: LD_INT 21
41149: PUSH
41150: LD_INT 22
41152: PUSH
41153: LD_INT 23
41155: PUSH
41156: LD_INT 24
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: ST_TO_ADDR
41165: GO 41280
41167: LD_INT 52
41169: DOUBLE
41170: EQUAL
41171: IFTRUE 41175
41173: GO 41201
41175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41176: LD_ADDR_VAR 0 3
41180: PUSH
41181: LD_INT 21
41183: PUSH
41184: LD_INT 22
41186: PUSH
41187: LD_INT 23
41189: PUSH
41190: LD_INT 24
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: ST_TO_ADDR
41199: GO 41280
41201: LD_INT 53
41203: DOUBLE
41204: EQUAL
41205: IFTRUE 41209
41207: GO 41227
41209: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41210: LD_ADDR_VAR 0 3
41214: PUSH
41215: LD_INT 23
41217: PUSH
41218: LD_INT 24
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: ST_TO_ADDR
41225: GO 41280
41227: LD_INT 46
41229: DOUBLE
41230: EQUAL
41231: IFTRUE 41235
41233: GO 41253
41235: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41236: LD_ADDR_VAR 0 3
41240: PUSH
41241: LD_INT 23
41243: PUSH
41244: LD_INT 24
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: ST_TO_ADDR
41251: GO 41280
41253: LD_INT 47
41255: DOUBLE
41256: EQUAL
41257: IFTRUE 41261
41259: GO 41279
41261: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41262: LD_ADDR_VAR 0 3
41266: PUSH
41267: LD_INT 23
41269: PUSH
41270: LD_INT 24
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: ST_TO_ADDR
41277: GO 41280
41279: POP
// result := ( chassis in result ) ;
41280: LD_ADDR_VAR 0 3
41284: PUSH
41285: LD_VAR 0 1
41289: PUSH
41290: LD_VAR 0 3
41294: IN
41295: ST_TO_ADDR
// end ;
41296: LD_VAR 0 3
41300: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41301: LD_INT 0
41303: PPUSH
41304: PPUSH
41305: PPUSH
41306: PPUSH
41307: PPUSH
41308: PPUSH
41309: PPUSH
// result := array ;
41310: LD_ADDR_VAR 0 5
41314: PUSH
41315: LD_VAR 0 1
41319: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41320: LD_VAR 0 1
41324: NOT
41325: PUSH
41326: LD_VAR 0 2
41330: NOT
41331: OR
41332: PUSH
41333: LD_VAR 0 3
41337: NOT
41338: OR
41339: PUSH
41340: LD_VAR 0 2
41344: PUSH
41345: LD_VAR 0 1
41349: GREATER
41350: OR
41351: PUSH
41352: LD_VAR 0 3
41356: PUSH
41357: LD_VAR 0 1
41361: GREATER
41362: OR
41363: IFFALSE 41367
// exit ;
41365: GO 41663
// if direction then
41367: LD_VAR 0 4
41371: IFFALSE 41435
// begin d := 1 ;
41373: LD_ADDR_VAR 0 9
41377: PUSH
41378: LD_INT 1
41380: ST_TO_ADDR
// if i_from > i_to then
41381: LD_VAR 0 2
41385: PUSH
41386: LD_VAR 0 3
41390: GREATER
41391: IFFALSE 41417
// length := ( array - i_from ) + i_to else
41393: LD_ADDR_VAR 0 11
41397: PUSH
41398: LD_VAR 0 1
41402: PUSH
41403: LD_VAR 0 2
41407: MINUS
41408: PUSH
41409: LD_VAR 0 3
41413: PLUS
41414: ST_TO_ADDR
41415: GO 41433
// length := i_to - i_from ;
41417: LD_ADDR_VAR 0 11
41421: PUSH
41422: LD_VAR 0 3
41426: PUSH
41427: LD_VAR 0 2
41431: MINUS
41432: ST_TO_ADDR
// end else
41433: GO 41496
// begin d := - 1 ;
41435: LD_ADDR_VAR 0 9
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: ST_TO_ADDR
// if i_from > i_to then
41444: LD_VAR 0 2
41448: PUSH
41449: LD_VAR 0 3
41453: GREATER
41454: IFFALSE 41474
// length := i_from - i_to else
41456: LD_ADDR_VAR 0 11
41460: PUSH
41461: LD_VAR 0 2
41465: PUSH
41466: LD_VAR 0 3
41470: MINUS
41471: ST_TO_ADDR
41472: GO 41496
// length := ( array - i_to ) + i_from ;
41474: LD_ADDR_VAR 0 11
41478: PUSH
41479: LD_VAR 0 1
41483: PUSH
41484: LD_VAR 0 3
41488: MINUS
41489: PUSH
41490: LD_VAR 0 2
41494: PLUS
41495: ST_TO_ADDR
// end ; if not length then
41496: LD_VAR 0 11
41500: NOT
41501: IFFALSE 41505
// exit ;
41503: GO 41663
// tmp := array ;
41505: LD_ADDR_VAR 0 10
41509: PUSH
41510: LD_VAR 0 1
41514: ST_TO_ADDR
// for i = 1 to length do
41515: LD_ADDR_VAR 0 6
41519: PUSH
41520: DOUBLE
41521: LD_INT 1
41523: DEC
41524: ST_TO_ADDR
41525: LD_VAR 0 11
41529: PUSH
41530: FOR_TO
41531: IFFALSE 41651
// begin for j = 1 to array do
41533: LD_ADDR_VAR 0 7
41537: PUSH
41538: DOUBLE
41539: LD_INT 1
41541: DEC
41542: ST_TO_ADDR
41543: LD_VAR 0 1
41547: PUSH
41548: FOR_TO
41549: IFFALSE 41637
// begin k := j + d ;
41551: LD_ADDR_VAR 0 8
41555: PUSH
41556: LD_VAR 0 7
41560: PUSH
41561: LD_VAR 0 9
41565: PLUS
41566: ST_TO_ADDR
// if k > array then
41567: LD_VAR 0 8
41571: PUSH
41572: LD_VAR 0 1
41576: GREATER
41577: IFFALSE 41587
// k := 1 ;
41579: LD_ADDR_VAR 0 8
41583: PUSH
41584: LD_INT 1
41586: ST_TO_ADDR
// if not k then
41587: LD_VAR 0 8
41591: NOT
41592: IFFALSE 41604
// k := array ;
41594: LD_ADDR_VAR 0 8
41598: PUSH
41599: LD_VAR 0 1
41603: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41604: LD_ADDR_VAR 0 10
41608: PUSH
41609: LD_VAR 0 10
41613: PPUSH
41614: LD_VAR 0 8
41618: PPUSH
41619: LD_VAR 0 1
41623: PUSH
41624: LD_VAR 0 7
41628: ARRAY
41629: PPUSH
41630: CALL_OW 1
41634: ST_TO_ADDR
// end ;
41635: GO 41548
41637: POP
41638: POP
// array := tmp ;
41639: LD_ADDR_VAR 0 1
41643: PUSH
41644: LD_VAR 0 10
41648: ST_TO_ADDR
// end ;
41649: GO 41530
41651: POP
41652: POP
// result := array ;
41653: LD_ADDR_VAR 0 5
41657: PUSH
41658: LD_VAR 0 1
41662: ST_TO_ADDR
// end ;
41663: LD_VAR 0 5
41667: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41668: LD_INT 0
41670: PPUSH
41671: PPUSH
// result := 0 ;
41672: LD_ADDR_VAR 0 3
41676: PUSH
41677: LD_INT 0
41679: ST_TO_ADDR
// if not array or not value in array then
41680: LD_VAR 0 1
41684: NOT
41685: PUSH
41686: LD_VAR 0 2
41690: PUSH
41691: LD_VAR 0 1
41695: IN
41696: NOT
41697: OR
41698: IFFALSE 41702
// exit ;
41700: GO 41756
// for i = 1 to array do
41702: LD_ADDR_VAR 0 4
41706: PUSH
41707: DOUBLE
41708: LD_INT 1
41710: DEC
41711: ST_TO_ADDR
41712: LD_VAR 0 1
41716: PUSH
41717: FOR_TO
41718: IFFALSE 41754
// if value = array [ i ] then
41720: LD_VAR 0 2
41724: PUSH
41725: LD_VAR 0 1
41729: PUSH
41730: LD_VAR 0 4
41734: ARRAY
41735: EQUAL
41736: IFFALSE 41752
// begin result := i ;
41738: LD_ADDR_VAR 0 3
41742: PUSH
41743: LD_VAR 0 4
41747: ST_TO_ADDR
// exit ;
41748: POP
41749: POP
41750: GO 41756
// end ;
41752: GO 41717
41754: POP
41755: POP
// end ;
41756: LD_VAR 0 3
41760: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41761: LD_INT 0
41763: PPUSH
// vc_chassis := chassis ;
41764: LD_ADDR_OWVAR 37
41768: PUSH
41769: LD_VAR 0 1
41773: ST_TO_ADDR
// vc_engine := engine ;
41774: LD_ADDR_OWVAR 39
41778: PUSH
41779: LD_VAR 0 2
41783: ST_TO_ADDR
// vc_control := control ;
41784: LD_ADDR_OWVAR 38
41788: PUSH
41789: LD_VAR 0 3
41793: ST_TO_ADDR
// vc_weapon := weapon ;
41794: LD_ADDR_OWVAR 40
41798: PUSH
41799: LD_VAR 0 4
41803: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41804: LD_ADDR_OWVAR 41
41808: PUSH
41809: LD_VAR 0 5
41813: ST_TO_ADDR
// end ;
41814: LD_VAR 0 6
41818: RET
// export function WantPlant ( unit ) ; var task ; begin
41819: LD_INT 0
41821: PPUSH
41822: PPUSH
// result := false ;
41823: LD_ADDR_VAR 0 2
41827: PUSH
41828: LD_INT 0
41830: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41831: LD_ADDR_VAR 0 3
41835: PUSH
41836: LD_VAR 0 1
41840: PPUSH
41841: CALL_OW 437
41845: ST_TO_ADDR
// if task then
41846: LD_VAR 0 3
41850: IFFALSE 41878
// if task [ 1 ] [ 1 ] = p then
41852: LD_VAR 0 3
41856: PUSH
41857: LD_INT 1
41859: ARRAY
41860: PUSH
41861: LD_INT 1
41863: ARRAY
41864: PUSH
41865: LD_STRING p
41867: EQUAL
41868: IFFALSE 41878
// result := true ;
41870: LD_ADDR_VAR 0 2
41874: PUSH
41875: LD_INT 1
41877: ST_TO_ADDR
// end ;
41878: LD_VAR 0 2
41882: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41883: LD_INT 0
41885: PPUSH
41886: PPUSH
41887: PPUSH
41888: PPUSH
// if pos < 1 then
41889: LD_VAR 0 2
41893: PUSH
41894: LD_INT 1
41896: LESS
41897: IFFALSE 41901
// exit ;
41899: GO 42204
// if pos = 1 then
41901: LD_VAR 0 2
41905: PUSH
41906: LD_INT 1
41908: EQUAL
41909: IFFALSE 41942
// result := Replace ( arr , pos [ 1 ] , value ) else
41911: LD_ADDR_VAR 0 4
41915: PUSH
41916: LD_VAR 0 1
41920: PPUSH
41921: LD_VAR 0 2
41925: PUSH
41926: LD_INT 1
41928: ARRAY
41929: PPUSH
41930: LD_VAR 0 3
41934: PPUSH
41935: CALL_OW 1
41939: ST_TO_ADDR
41940: GO 42204
// begin tmp := arr ;
41942: LD_ADDR_VAR 0 6
41946: PUSH
41947: LD_VAR 0 1
41951: ST_TO_ADDR
// s_arr := [ tmp ] ;
41952: LD_ADDR_VAR 0 7
41956: PUSH
41957: LD_VAR 0 6
41961: PUSH
41962: EMPTY
41963: LIST
41964: ST_TO_ADDR
// for i = 1 to pos - 1 do
41965: LD_ADDR_VAR 0 5
41969: PUSH
41970: DOUBLE
41971: LD_INT 1
41973: DEC
41974: ST_TO_ADDR
41975: LD_VAR 0 2
41979: PUSH
41980: LD_INT 1
41982: MINUS
41983: PUSH
41984: FOR_TO
41985: IFFALSE 42030
// begin tmp := tmp [ pos [ i ] ] ;
41987: LD_ADDR_VAR 0 6
41991: PUSH
41992: LD_VAR 0 6
41996: PUSH
41997: LD_VAR 0 2
42001: PUSH
42002: LD_VAR 0 5
42006: ARRAY
42007: ARRAY
42008: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42009: LD_ADDR_VAR 0 7
42013: PUSH
42014: LD_VAR 0 7
42018: PUSH
42019: LD_VAR 0 6
42023: PUSH
42024: EMPTY
42025: LIST
42026: ADD
42027: ST_TO_ADDR
// end ;
42028: GO 41984
42030: POP
42031: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42032: LD_ADDR_VAR 0 6
42036: PUSH
42037: LD_VAR 0 6
42041: PPUSH
42042: LD_VAR 0 2
42046: PUSH
42047: LD_VAR 0 2
42051: ARRAY
42052: PPUSH
42053: LD_VAR 0 3
42057: PPUSH
42058: CALL_OW 1
42062: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42063: LD_ADDR_VAR 0 7
42067: PUSH
42068: LD_VAR 0 7
42072: PPUSH
42073: LD_VAR 0 7
42077: PPUSH
42078: LD_VAR 0 6
42082: PPUSH
42083: CALL_OW 1
42087: ST_TO_ADDR
// for i = s_arr downto 2 do
42088: LD_ADDR_VAR 0 5
42092: PUSH
42093: DOUBLE
42094: LD_VAR 0 7
42098: INC
42099: ST_TO_ADDR
42100: LD_INT 2
42102: PUSH
42103: FOR_DOWNTO
42104: IFFALSE 42188
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42106: LD_ADDR_VAR 0 6
42110: PUSH
42111: LD_VAR 0 7
42115: PUSH
42116: LD_VAR 0 5
42120: PUSH
42121: LD_INT 1
42123: MINUS
42124: ARRAY
42125: PPUSH
42126: LD_VAR 0 2
42130: PUSH
42131: LD_VAR 0 5
42135: PUSH
42136: LD_INT 1
42138: MINUS
42139: ARRAY
42140: PPUSH
42141: LD_VAR 0 7
42145: PUSH
42146: LD_VAR 0 5
42150: ARRAY
42151: PPUSH
42152: CALL_OW 1
42156: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42157: LD_ADDR_VAR 0 7
42161: PUSH
42162: LD_VAR 0 7
42166: PPUSH
42167: LD_VAR 0 5
42171: PUSH
42172: LD_INT 1
42174: MINUS
42175: PPUSH
42176: LD_VAR 0 6
42180: PPUSH
42181: CALL_OW 1
42185: ST_TO_ADDR
// end ;
42186: GO 42103
42188: POP
42189: POP
// result := s_arr [ 1 ] ;
42190: LD_ADDR_VAR 0 4
42194: PUSH
42195: LD_VAR 0 7
42199: PUSH
42200: LD_INT 1
42202: ARRAY
42203: ST_TO_ADDR
// end ; end ;
42204: LD_VAR 0 4
42208: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42209: LD_INT 0
42211: PPUSH
42212: PPUSH
// if not list then
42213: LD_VAR 0 1
42217: NOT
42218: IFFALSE 42222
// exit ;
42220: GO 42313
// i := list [ pos1 ] ;
42222: LD_ADDR_VAR 0 5
42226: PUSH
42227: LD_VAR 0 1
42231: PUSH
42232: LD_VAR 0 2
42236: ARRAY
42237: ST_TO_ADDR
// if not i then
42238: LD_VAR 0 5
42242: NOT
42243: IFFALSE 42247
// exit ;
42245: GO 42313
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42247: LD_ADDR_VAR 0 1
42251: PUSH
42252: LD_VAR 0 1
42256: PPUSH
42257: LD_VAR 0 2
42261: PPUSH
42262: LD_VAR 0 1
42266: PUSH
42267: LD_VAR 0 3
42271: ARRAY
42272: PPUSH
42273: CALL_OW 1
42277: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42278: LD_ADDR_VAR 0 1
42282: PUSH
42283: LD_VAR 0 1
42287: PPUSH
42288: LD_VAR 0 3
42292: PPUSH
42293: LD_VAR 0 5
42297: PPUSH
42298: CALL_OW 1
42302: ST_TO_ADDR
// result := list ;
42303: LD_ADDR_VAR 0 4
42307: PUSH
42308: LD_VAR 0 1
42312: ST_TO_ADDR
// end ;
42313: LD_VAR 0 4
42317: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42318: LD_INT 0
42320: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42321: LD_ADDR_VAR 0 5
42325: PUSH
42326: LD_VAR 0 1
42330: PPUSH
42331: CALL_OW 250
42335: PPUSH
42336: LD_VAR 0 1
42340: PPUSH
42341: CALL_OW 251
42345: PPUSH
42346: LD_VAR 0 2
42350: PPUSH
42351: LD_VAR 0 3
42355: PPUSH
42356: LD_VAR 0 4
42360: PPUSH
42361: CALL 42371 0 5
42365: ST_TO_ADDR
// end ;
42366: LD_VAR 0 5
42370: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42371: LD_INT 0
42373: PPUSH
42374: PPUSH
42375: PPUSH
42376: PPUSH
// if not list then
42377: LD_VAR 0 3
42381: NOT
42382: IFFALSE 42386
// exit ;
42384: GO 42774
// result := [ ] ;
42386: LD_ADDR_VAR 0 6
42390: PUSH
42391: EMPTY
42392: ST_TO_ADDR
// for i in list do
42393: LD_ADDR_VAR 0 7
42397: PUSH
42398: LD_VAR 0 3
42402: PUSH
42403: FOR_IN
42404: IFFALSE 42606
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42406: LD_ADDR_VAR 0 9
42410: PUSH
42411: LD_VAR 0 7
42415: PPUSH
42416: LD_VAR 0 1
42420: PPUSH
42421: LD_VAR 0 2
42425: PPUSH
42426: CALL_OW 297
42430: ST_TO_ADDR
// if not result then
42431: LD_VAR 0 6
42435: NOT
42436: IFFALSE 42462
// result := [ [ i , tmp ] ] else
42438: LD_ADDR_VAR 0 6
42442: PUSH
42443: LD_VAR 0 7
42447: PUSH
42448: LD_VAR 0 9
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: EMPTY
42458: LIST
42459: ST_TO_ADDR
42460: GO 42604
// begin if result [ result ] [ 2 ] < tmp then
42462: LD_VAR 0 6
42466: PUSH
42467: LD_VAR 0 6
42471: ARRAY
42472: PUSH
42473: LD_INT 2
42475: ARRAY
42476: PUSH
42477: LD_VAR 0 9
42481: LESS
42482: IFFALSE 42524
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42484: LD_ADDR_VAR 0 6
42488: PUSH
42489: LD_VAR 0 6
42493: PPUSH
42494: LD_VAR 0 6
42498: PUSH
42499: LD_INT 1
42501: PLUS
42502: PPUSH
42503: LD_VAR 0 7
42507: PUSH
42508: LD_VAR 0 9
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PPUSH
42517: CALL_OW 2
42521: ST_TO_ADDR
42522: GO 42604
// for j = 1 to result do
42524: LD_ADDR_VAR 0 8
42528: PUSH
42529: DOUBLE
42530: LD_INT 1
42532: DEC
42533: ST_TO_ADDR
42534: LD_VAR 0 6
42538: PUSH
42539: FOR_TO
42540: IFFALSE 42602
// begin if tmp < result [ j ] [ 2 ] then
42542: LD_VAR 0 9
42546: PUSH
42547: LD_VAR 0 6
42551: PUSH
42552: LD_VAR 0 8
42556: ARRAY
42557: PUSH
42558: LD_INT 2
42560: ARRAY
42561: LESS
42562: IFFALSE 42600
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42564: LD_ADDR_VAR 0 6
42568: PUSH
42569: LD_VAR 0 6
42573: PPUSH
42574: LD_VAR 0 8
42578: PPUSH
42579: LD_VAR 0 7
42583: PUSH
42584: LD_VAR 0 9
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PPUSH
42593: CALL_OW 2
42597: ST_TO_ADDR
// break ;
42598: GO 42602
// end ; end ;
42600: GO 42539
42602: POP
42603: POP
// end ; end ;
42604: GO 42403
42606: POP
42607: POP
// if result and not asc then
42608: LD_VAR 0 6
42612: PUSH
42613: LD_VAR 0 4
42617: NOT
42618: AND
42619: IFFALSE 42694
// begin tmp := result ;
42621: LD_ADDR_VAR 0 9
42625: PUSH
42626: LD_VAR 0 6
42630: ST_TO_ADDR
// for i = tmp downto 1 do
42631: LD_ADDR_VAR 0 7
42635: PUSH
42636: DOUBLE
42637: LD_VAR 0 9
42641: INC
42642: ST_TO_ADDR
42643: LD_INT 1
42645: PUSH
42646: FOR_DOWNTO
42647: IFFALSE 42692
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42649: LD_ADDR_VAR 0 6
42653: PUSH
42654: LD_VAR 0 6
42658: PPUSH
42659: LD_VAR 0 9
42663: PUSH
42664: LD_VAR 0 7
42668: MINUS
42669: PUSH
42670: LD_INT 1
42672: PLUS
42673: PPUSH
42674: LD_VAR 0 9
42678: PUSH
42679: LD_VAR 0 7
42683: ARRAY
42684: PPUSH
42685: CALL_OW 1
42689: ST_TO_ADDR
42690: GO 42646
42692: POP
42693: POP
// end ; tmp := [ ] ;
42694: LD_ADDR_VAR 0 9
42698: PUSH
42699: EMPTY
42700: ST_TO_ADDR
// if mode then
42701: LD_VAR 0 5
42705: IFFALSE 42774
// begin for i = 1 to result do
42707: LD_ADDR_VAR 0 7
42711: PUSH
42712: DOUBLE
42713: LD_INT 1
42715: DEC
42716: ST_TO_ADDR
42717: LD_VAR 0 6
42721: PUSH
42722: FOR_TO
42723: IFFALSE 42762
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42725: LD_ADDR_VAR 0 9
42729: PUSH
42730: LD_VAR 0 9
42734: PPUSH
42735: LD_VAR 0 7
42739: PPUSH
42740: LD_VAR 0 6
42744: PUSH
42745: LD_VAR 0 7
42749: ARRAY
42750: PUSH
42751: LD_INT 1
42753: ARRAY
42754: PPUSH
42755: CALL_OW 1
42759: ST_TO_ADDR
42760: GO 42722
42762: POP
42763: POP
// result := tmp ;
42764: LD_ADDR_VAR 0 6
42768: PUSH
42769: LD_VAR 0 9
42773: ST_TO_ADDR
// end ; end ;
42774: LD_VAR 0 6
42778: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42779: LD_INT 0
42781: PPUSH
42782: PPUSH
42783: PPUSH
42784: PPUSH
42785: PPUSH
42786: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42787: LD_ADDR_VAR 0 5
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: ST_TO_ADDR
// if not x or not y then
42809: LD_VAR 0 2
42813: NOT
42814: PUSH
42815: LD_VAR 0 3
42819: NOT
42820: OR
42821: IFFALSE 42825
// exit ;
42823: GO 44475
// if not range then
42825: LD_VAR 0 4
42829: NOT
42830: IFFALSE 42840
// range := 10 ;
42832: LD_ADDR_VAR 0 4
42836: PUSH
42837: LD_INT 10
42839: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42840: LD_ADDR_VAR 0 8
42844: PUSH
42845: LD_INT 81
42847: PUSH
42848: LD_VAR 0 1
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 92
42859: PUSH
42860: LD_VAR 0 2
42864: PUSH
42865: LD_VAR 0 3
42869: PUSH
42870: LD_VAR 0 4
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 3
42883: PUSH
42884: LD_INT 21
42886: PUSH
42887: LD_INT 3
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: PPUSH
42903: CALL_OW 69
42907: ST_TO_ADDR
// if not tmp then
42908: LD_VAR 0 8
42912: NOT
42913: IFFALSE 42917
// exit ;
42915: GO 44475
// for i in tmp do
42917: LD_ADDR_VAR 0 6
42921: PUSH
42922: LD_VAR 0 8
42926: PUSH
42927: FOR_IN
42928: IFFALSE 44450
// begin points := [ 0 , 0 , 0 ] ;
42930: LD_ADDR_VAR 0 9
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
// bpoints := 1 ;
42949: LD_ADDR_VAR 0 10
42953: PUSH
42954: LD_INT 1
42956: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42957: LD_VAR 0 6
42961: PPUSH
42962: CALL_OW 247
42966: PUSH
42967: LD_INT 1
42969: DOUBLE
42970: EQUAL
42971: IFTRUE 42975
42973: GO 43553
42975: POP
// begin if GetClass ( i ) = 1 then
42976: LD_VAR 0 6
42980: PPUSH
42981: CALL_OW 257
42985: PUSH
42986: LD_INT 1
42988: EQUAL
42989: IFFALSE 43010
// points := [ 10 , 5 , 3 ] ;
42991: LD_ADDR_VAR 0 9
42995: PUSH
42996: LD_INT 10
42998: PUSH
42999: LD_INT 5
43001: PUSH
43002: LD_INT 3
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: LIST
43009: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43010: LD_VAR 0 6
43014: PPUSH
43015: CALL_OW 257
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: LD_INT 3
43025: PUSH
43026: LD_INT 4
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: IN
43034: IFFALSE 43055
// points := [ 3 , 2 , 1 ] ;
43036: LD_ADDR_VAR 0 9
43040: PUSH
43041: LD_INT 3
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: LIST
43054: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43055: LD_VAR 0 6
43059: PPUSH
43060: CALL_OW 257
43064: PUSH
43065: LD_INT 5
43067: EQUAL
43068: IFFALSE 43089
// points := [ 130 , 5 , 2 ] ;
43070: LD_ADDR_VAR 0 9
43074: PUSH
43075: LD_INT 130
43077: PUSH
43078: LD_INT 5
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: LIST
43088: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43089: LD_VAR 0 6
43093: PPUSH
43094: CALL_OW 257
43098: PUSH
43099: LD_INT 8
43101: EQUAL
43102: IFFALSE 43123
// points := [ 35 , 35 , 30 ] ;
43104: LD_ADDR_VAR 0 9
43108: PUSH
43109: LD_INT 35
43111: PUSH
43112: LD_INT 35
43114: PUSH
43115: LD_INT 30
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43123: LD_VAR 0 6
43127: PPUSH
43128: CALL_OW 257
43132: PUSH
43133: LD_INT 9
43135: EQUAL
43136: IFFALSE 43157
// points := [ 20 , 55 , 40 ] ;
43138: LD_ADDR_VAR 0 9
43142: PUSH
43143: LD_INT 20
43145: PUSH
43146: LD_INT 55
43148: PUSH
43149: LD_INT 40
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: LIST
43156: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43157: LD_VAR 0 6
43161: PPUSH
43162: CALL_OW 257
43166: PUSH
43167: LD_INT 12
43169: PUSH
43170: LD_INT 16
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: IN
43177: IFFALSE 43198
// points := [ 5 , 3 , 2 ] ;
43179: LD_ADDR_VAR 0 9
43183: PUSH
43184: LD_INT 5
43186: PUSH
43187: LD_INT 3
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: LIST
43197: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43198: LD_VAR 0 6
43202: PPUSH
43203: CALL_OW 257
43207: PUSH
43208: LD_INT 17
43210: EQUAL
43211: IFFALSE 43232
// points := [ 100 , 50 , 75 ] ;
43213: LD_ADDR_VAR 0 9
43217: PUSH
43218: LD_INT 100
43220: PUSH
43221: LD_INT 50
43223: PUSH
43224: LD_INT 75
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: LIST
43231: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43232: LD_VAR 0 6
43236: PPUSH
43237: CALL_OW 257
43241: PUSH
43242: LD_INT 15
43244: EQUAL
43245: IFFALSE 43266
// points := [ 10 , 5 , 3 ] ;
43247: LD_ADDR_VAR 0 9
43251: PUSH
43252: LD_INT 10
43254: PUSH
43255: LD_INT 5
43257: PUSH
43258: LD_INT 3
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43266: LD_VAR 0 6
43270: PPUSH
43271: CALL_OW 257
43275: PUSH
43276: LD_INT 14
43278: EQUAL
43279: IFFALSE 43300
// points := [ 10 , 0 , 0 ] ;
43281: LD_ADDR_VAR 0 9
43285: PUSH
43286: LD_INT 10
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43300: LD_VAR 0 6
43304: PPUSH
43305: CALL_OW 257
43309: PUSH
43310: LD_INT 11
43312: EQUAL
43313: IFFALSE 43334
// points := [ 30 , 10 , 5 ] ;
43315: LD_ADDR_VAR 0 9
43319: PUSH
43320: LD_INT 30
43322: PUSH
43323: LD_INT 10
43325: PUSH
43326: LD_INT 5
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43334: LD_VAR 0 1
43338: PPUSH
43339: LD_INT 5
43341: PPUSH
43342: CALL_OW 321
43346: PUSH
43347: LD_INT 2
43349: EQUAL
43350: IFFALSE 43367
// bpoints := bpoints * 1.8 ;
43352: LD_ADDR_VAR 0 10
43356: PUSH
43357: LD_VAR 0 10
43361: PUSH
43362: LD_REAL  1.80000000000000E+0000
43365: MUL
43366: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43367: LD_VAR 0 6
43371: PPUSH
43372: CALL_OW 257
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: LD_INT 3
43385: PUSH
43386: LD_INT 4
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: IN
43395: PUSH
43396: LD_VAR 0 1
43400: PPUSH
43401: LD_INT 51
43403: PPUSH
43404: CALL_OW 321
43408: PUSH
43409: LD_INT 2
43411: EQUAL
43412: AND
43413: IFFALSE 43430
// bpoints := bpoints * 1.2 ;
43415: LD_ADDR_VAR 0 10
43419: PUSH
43420: LD_VAR 0 10
43424: PUSH
43425: LD_REAL  1.20000000000000E+0000
43428: MUL
43429: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43430: LD_VAR 0 6
43434: PPUSH
43435: CALL_OW 257
43439: PUSH
43440: LD_INT 5
43442: PUSH
43443: LD_INT 7
43445: PUSH
43446: LD_INT 9
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: IN
43454: PUSH
43455: LD_VAR 0 1
43459: PPUSH
43460: LD_INT 52
43462: PPUSH
43463: CALL_OW 321
43467: PUSH
43468: LD_INT 2
43470: EQUAL
43471: AND
43472: IFFALSE 43489
// bpoints := bpoints * 1.5 ;
43474: LD_ADDR_VAR 0 10
43478: PUSH
43479: LD_VAR 0 10
43483: PUSH
43484: LD_REAL  1.50000000000000E+0000
43487: MUL
43488: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43489: LD_VAR 0 1
43493: PPUSH
43494: LD_INT 66
43496: PPUSH
43497: CALL_OW 321
43501: PUSH
43502: LD_INT 2
43504: EQUAL
43505: IFFALSE 43522
// bpoints := bpoints * 1.1 ;
43507: LD_ADDR_VAR 0 10
43511: PUSH
43512: LD_VAR 0 10
43516: PUSH
43517: LD_REAL  1.10000000000000E+0000
43520: MUL
43521: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43522: LD_ADDR_VAR 0 10
43526: PUSH
43527: LD_VAR 0 10
43531: PUSH
43532: LD_VAR 0 6
43536: PPUSH
43537: LD_INT 1
43539: PPUSH
43540: CALL_OW 259
43544: PUSH
43545: LD_REAL  1.15000000000000E+0000
43548: MUL
43549: MUL
43550: ST_TO_ADDR
// end ; unit_vehicle :
43551: GO 44379
43553: LD_INT 2
43555: DOUBLE
43556: EQUAL
43557: IFTRUE 43561
43559: GO 44367
43561: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43562: LD_VAR 0 6
43566: PPUSH
43567: CALL_OW 264
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: LD_INT 42
43577: PUSH
43578: LD_INT 24
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: IN
43586: IFFALSE 43607
// points := [ 25 , 5 , 3 ] ;
43588: LD_ADDR_VAR 0 9
43592: PUSH
43593: LD_INT 25
43595: PUSH
43596: LD_INT 5
43598: PUSH
43599: LD_INT 3
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: LIST
43606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43607: LD_VAR 0 6
43611: PPUSH
43612: CALL_OW 264
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: LD_INT 43
43622: PUSH
43623: LD_INT 25
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: IN
43631: IFFALSE 43652
// points := [ 40 , 15 , 5 ] ;
43633: LD_ADDR_VAR 0 9
43637: PUSH
43638: LD_INT 40
43640: PUSH
43641: LD_INT 15
43643: PUSH
43644: LD_INT 5
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43652: LD_VAR 0 6
43656: PPUSH
43657: CALL_OW 264
43661: PUSH
43662: LD_INT 3
43664: PUSH
43665: LD_INT 23
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: IN
43672: IFFALSE 43693
// points := [ 7 , 25 , 8 ] ;
43674: LD_ADDR_VAR 0 9
43678: PUSH
43679: LD_INT 7
43681: PUSH
43682: LD_INT 25
43684: PUSH
43685: LD_INT 8
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: LIST
43692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43693: LD_VAR 0 6
43697: PPUSH
43698: CALL_OW 264
43702: PUSH
43703: LD_INT 5
43705: PUSH
43706: LD_INT 27
43708: PUSH
43709: LD_INT 44
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: IN
43717: IFFALSE 43738
// points := [ 14 , 50 , 16 ] ;
43719: LD_ADDR_VAR 0 9
43723: PUSH
43724: LD_INT 14
43726: PUSH
43727: LD_INT 50
43729: PUSH
43730: LD_INT 16
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43738: LD_VAR 0 6
43742: PPUSH
43743: CALL_OW 264
43747: PUSH
43748: LD_INT 6
43750: PUSH
43751: LD_INT 46
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: IN
43758: IFFALSE 43779
// points := [ 32 , 120 , 70 ] ;
43760: LD_ADDR_VAR 0 9
43764: PUSH
43765: LD_INT 32
43767: PUSH
43768: LD_INT 120
43770: PUSH
43771: LD_INT 70
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: LIST
43778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43779: LD_VAR 0 6
43783: PPUSH
43784: CALL_OW 264
43788: PUSH
43789: LD_INT 7
43791: PUSH
43792: LD_INT 28
43794: PUSH
43795: LD_INT 45
43797: PUSH
43798: LD_INT 92
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: IN
43807: IFFALSE 43828
// points := [ 35 , 20 , 45 ] ;
43809: LD_ADDR_VAR 0 9
43813: PUSH
43814: LD_INT 35
43816: PUSH
43817: LD_INT 20
43819: PUSH
43820: LD_INT 45
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43828: LD_VAR 0 6
43832: PPUSH
43833: CALL_OW 264
43837: PUSH
43838: LD_INT 47
43840: PUSH
43841: EMPTY
43842: LIST
43843: IN
43844: IFFALSE 43865
// points := [ 67 , 45 , 75 ] ;
43846: LD_ADDR_VAR 0 9
43850: PUSH
43851: LD_INT 67
43853: PUSH
43854: LD_INT 45
43856: PUSH
43857: LD_INT 75
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: LIST
43864: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43865: LD_VAR 0 6
43869: PPUSH
43870: CALL_OW 264
43874: PUSH
43875: LD_INT 26
43877: PUSH
43878: EMPTY
43879: LIST
43880: IN
43881: IFFALSE 43902
// points := [ 120 , 30 , 80 ] ;
43883: LD_ADDR_VAR 0 9
43887: PUSH
43888: LD_INT 120
43890: PUSH
43891: LD_INT 30
43893: PUSH
43894: LD_INT 80
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: LIST
43901: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43902: LD_VAR 0 6
43906: PPUSH
43907: CALL_OW 264
43911: PUSH
43912: LD_INT 22
43914: PUSH
43915: EMPTY
43916: LIST
43917: IN
43918: IFFALSE 43939
// points := [ 40 , 1 , 1 ] ;
43920: LD_ADDR_VAR 0 9
43924: PUSH
43925: LD_INT 40
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43939: LD_VAR 0 6
43943: PPUSH
43944: CALL_OW 264
43948: PUSH
43949: LD_INT 29
43951: PUSH
43952: EMPTY
43953: LIST
43954: IN
43955: IFFALSE 43976
// points := [ 70 , 200 , 400 ] ;
43957: LD_ADDR_VAR 0 9
43961: PUSH
43962: LD_INT 70
43964: PUSH
43965: LD_INT 200
43967: PUSH
43968: LD_INT 400
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43976: LD_VAR 0 6
43980: PPUSH
43981: CALL_OW 264
43985: PUSH
43986: LD_INT 14
43988: PUSH
43989: LD_INT 53
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: IN
43996: IFFALSE 44017
// points := [ 40 , 10 , 20 ] ;
43998: LD_ADDR_VAR 0 9
44002: PUSH
44003: LD_INT 40
44005: PUSH
44006: LD_INT 10
44008: PUSH
44009: LD_INT 20
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: LIST
44016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44017: LD_VAR 0 6
44021: PPUSH
44022: CALL_OW 264
44026: PUSH
44027: LD_INT 9
44029: PUSH
44030: EMPTY
44031: LIST
44032: IN
44033: IFFALSE 44054
// points := [ 5 , 70 , 20 ] ;
44035: LD_ADDR_VAR 0 9
44039: PUSH
44040: LD_INT 5
44042: PUSH
44043: LD_INT 70
44045: PUSH
44046: LD_INT 20
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44054: LD_VAR 0 6
44058: PPUSH
44059: CALL_OW 264
44063: PUSH
44064: LD_INT 10
44066: PUSH
44067: EMPTY
44068: LIST
44069: IN
44070: IFFALSE 44091
// points := [ 35 , 110 , 70 ] ;
44072: LD_ADDR_VAR 0 9
44076: PUSH
44077: LD_INT 35
44079: PUSH
44080: LD_INT 110
44082: PUSH
44083: LD_INT 70
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44091: LD_VAR 0 6
44095: PPUSH
44096: CALL_OW 265
44100: PUSH
44101: LD_INT 25
44103: EQUAL
44104: IFFALSE 44125
// points := [ 80 , 65 , 100 ] ;
44106: LD_ADDR_VAR 0 9
44110: PUSH
44111: LD_INT 80
44113: PUSH
44114: LD_INT 65
44116: PUSH
44117: LD_INT 100
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44125: LD_VAR 0 6
44129: PPUSH
44130: CALL_OW 263
44134: PUSH
44135: LD_INT 1
44137: EQUAL
44138: IFFALSE 44173
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44140: LD_ADDR_VAR 0 10
44144: PUSH
44145: LD_VAR 0 10
44149: PUSH
44150: LD_VAR 0 6
44154: PPUSH
44155: CALL_OW 311
44159: PPUSH
44160: LD_INT 3
44162: PPUSH
44163: CALL_OW 259
44167: PUSH
44168: LD_INT 4
44170: MUL
44171: MUL
44172: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44173: LD_VAR 0 6
44177: PPUSH
44178: CALL_OW 263
44182: PUSH
44183: LD_INT 2
44185: EQUAL
44186: IFFALSE 44237
// begin j := IsControledBy ( i ) ;
44188: LD_ADDR_VAR 0 7
44192: PUSH
44193: LD_VAR 0 6
44197: PPUSH
44198: CALL_OW 312
44202: ST_TO_ADDR
// if j then
44203: LD_VAR 0 7
44207: IFFALSE 44237
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44209: LD_ADDR_VAR 0 10
44213: PUSH
44214: LD_VAR 0 10
44218: PUSH
44219: LD_VAR 0 7
44223: PPUSH
44224: LD_INT 3
44226: PPUSH
44227: CALL_OW 259
44231: PUSH
44232: LD_INT 3
44234: MUL
44235: MUL
44236: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44237: LD_VAR 0 6
44241: PPUSH
44242: CALL_OW 264
44246: PUSH
44247: LD_INT 5
44249: PUSH
44250: LD_INT 6
44252: PUSH
44253: LD_INT 46
44255: PUSH
44256: LD_INT 44
44258: PUSH
44259: LD_INT 47
44261: PUSH
44262: LD_INT 45
44264: PUSH
44265: LD_INT 28
44267: PUSH
44268: LD_INT 7
44270: PUSH
44271: LD_INT 27
44273: PUSH
44274: LD_INT 29
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: IN
44289: PUSH
44290: LD_VAR 0 1
44294: PPUSH
44295: LD_INT 52
44297: PPUSH
44298: CALL_OW 321
44302: PUSH
44303: LD_INT 2
44305: EQUAL
44306: AND
44307: IFFALSE 44324
// bpoints := bpoints * 1.2 ;
44309: LD_ADDR_VAR 0 10
44313: PUSH
44314: LD_VAR 0 10
44318: PUSH
44319: LD_REAL  1.20000000000000E+0000
44322: MUL
44323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44324: LD_VAR 0 6
44328: PPUSH
44329: CALL_OW 264
44333: PUSH
44334: LD_INT 6
44336: PUSH
44337: LD_INT 46
44339: PUSH
44340: LD_INT 47
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: IN
44348: IFFALSE 44365
// bpoints := bpoints * 1.2 ;
44350: LD_ADDR_VAR 0 10
44354: PUSH
44355: LD_VAR 0 10
44359: PUSH
44360: LD_REAL  1.20000000000000E+0000
44363: MUL
44364: ST_TO_ADDR
// end ; unit_building :
44365: GO 44379
44367: LD_INT 3
44369: DOUBLE
44370: EQUAL
44371: IFTRUE 44375
44373: GO 44378
44375: POP
// ; end ;
44376: GO 44379
44378: POP
// for j = 1 to 3 do
44379: LD_ADDR_VAR 0 7
44383: PUSH
44384: DOUBLE
44385: LD_INT 1
44387: DEC
44388: ST_TO_ADDR
44389: LD_INT 3
44391: PUSH
44392: FOR_TO
44393: IFFALSE 44446
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44395: LD_ADDR_VAR 0 5
44399: PUSH
44400: LD_VAR 0 5
44404: PPUSH
44405: LD_VAR 0 7
44409: PPUSH
44410: LD_VAR 0 5
44414: PUSH
44415: LD_VAR 0 7
44419: ARRAY
44420: PUSH
44421: LD_VAR 0 9
44425: PUSH
44426: LD_VAR 0 7
44430: ARRAY
44431: PUSH
44432: LD_VAR 0 10
44436: MUL
44437: PLUS
44438: PPUSH
44439: CALL_OW 1
44443: ST_TO_ADDR
44444: GO 44392
44446: POP
44447: POP
// end ;
44448: GO 42927
44450: POP
44451: POP
// result := Replace ( result , 4 , tmp ) ;
44452: LD_ADDR_VAR 0 5
44456: PUSH
44457: LD_VAR 0 5
44461: PPUSH
44462: LD_INT 4
44464: PPUSH
44465: LD_VAR 0 8
44469: PPUSH
44470: CALL_OW 1
44474: ST_TO_ADDR
// end ;
44475: LD_VAR 0 5
44479: RET
// export function DangerAtRange ( unit , range ) ; begin
44480: LD_INT 0
44482: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44483: LD_ADDR_VAR 0 3
44487: PUSH
44488: LD_VAR 0 1
44492: PPUSH
44493: CALL_OW 255
44497: PPUSH
44498: LD_VAR 0 1
44502: PPUSH
44503: CALL_OW 250
44507: PPUSH
44508: LD_VAR 0 1
44512: PPUSH
44513: CALL_OW 251
44517: PPUSH
44518: LD_VAR 0 2
44522: PPUSH
44523: CALL 42779 0 4
44527: ST_TO_ADDR
// end ;
44528: LD_VAR 0 3
44532: RET
// export function DangerInArea ( side , area ) ; begin
44533: LD_INT 0
44535: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44536: LD_ADDR_VAR 0 3
44540: PUSH
44541: LD_VAR 0 2
44545: PPUSH
44546: LD_INT 81
44548: PUSH
44549: LD_VAR 0 1
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PPUSH
44558: CALL_OW 70
44562: ST_TO_ADDR
// end ;
44563: LD_VAR 0 3
44567: RET
// export function IsExtension ( b ) ; begin
44568: LD_INT 0
44570: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44571: LD_ADDR_VAR 0 2
44575: PUSH
44576: LD_VAR 0 1
44580: PUSH
44581: LD_INT 23
44583: PUSH
44584: LD_INT 20
44586: PUSH
44587: LD_INT 22
44589: PUSH
44590: LD_INT 17
44592: PUSH
44593: LD_INT 24
44595: PUSH
44596: LD_INT 21
44598: PUSH
44599: LD_INT 19
44601: PUSH
44602: LD_INT 16
44604: PUSH
44605: LD_INT 25
44607: PUSH
44608: LD_INT 18
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: IN
44623: ST_TO_ADDR
// end ;
44624: LD_VAR 0 2
44628: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44629: LD_INT 0
44631: PPUSH
44632: PPUSH
44633: PPUSH
// result := [ ] ;
44634: LD_ADDR_VAR 0 4
44638: PUSH
44639: EMPTY
44640: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44641: LD_ADDR_VAR 0 5
44645: PUSH
44646: LD_VAR 0 2
44650: PPUSH
44651: LD_INT 21
44653: PUSH
44654: LD_INT 3
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PPUSH
44661: CALL_OW 70
44665: ST_TO_ADDR
// if not tmp then
44666: LD_VAR 0 5
44670: NOT
44671: IFFALSE 44675
// exit ;
44673: GO 44739
// if checkLink then
44675: LD_VAR 0 3
44679: IFFALSE 44729
// begin for i in tmp do
44681: LD_ADDR_VAR 0 6
44685: PUSH
44686: LD_VAR 0 5
44690: PUSH
44691: FOR_IN
44692: IFFALSE 44727
// if GetBase ( i ) <> base then
44694: LD_VAR 0 6
44698: PPUSH
44699: CALL_OW 274
44703: PUSH
44704: LD_VAR 0 1
44708: NONEQUAL
44709: IFFALSE 44725
// ComLinkToBase ( base , i ) ;
44711: LD_VAR 0 1
44715: PPUSH
44716: LD_VAR 0 6
44720: PPUSH
44721: CALL_OW 169
44725: GO 44691
44727: POP
44728: POP
// end ; result := tmp ;
44729: LD_ADDR_VAR 0 4
44733: PUSH
44734: LD_VAR 0 5
44738: ST_TO_ADDR
// end ;
44739: LD_VAR 0 4
44743: RET
// export function ComComplete ( units , b ) ; var i ; begin
44744: LD_INT 0
44746: PPUSH
44747: PPUSH
// if not units then
44748: LD_VAR 0 1
44752: NOT
44753: IFFALSE 44757
// exit ;
44755: GO 44847
// for i in units do
44757: LD_ADDR_VAR 0 4
44761: PUSH
44762: LD_VAR 0 1
44766: PUSH
44767: FOR_IN
44768: IFFALSE 44845
// if BuildingStatus ( b ) = bs_build then
44770: LD_VAR 0 2
44774: PPUSH
44775: CALL_OW 461
44779: PUSH
44780: LD_INT 1
44782: EQUAL
44783: IFFALSE 44843
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44785: LD_VAR 0 4
44789: PPUSH
44790: LD_STRING h
44792: PUSH
44793: LD_VAR 0 2
44797: PPUSH
44798: CALL_OW 250
44802: PUSH
44803: LD_VAR 0 2
44807: PPUSH
44808: CALL_OW 251
44812: PUSH
44813: LD_VAR 0 2
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: PUSH
44836: EMPTY
44837: LIST
44838: PPUSH
44839: CALL_OW 446
44843: GO 44767
44845: POP
44846: POP
// end ;
44847: LD_VAR 0 3
44851: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44852: LD_INT 0
44854: PPUSH
44855: PPUSH
44856: PPUSH
44857: PPUSH
44858: PPUSH
44859: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44860: LD_VAR 0 1
44864: NOT
44865: PUSH
44866: LD_VAR 0 1
44870: PPUSH
44871: CALL_OW 263
44875: PUSH
44876: LD_INT 2
44878: NONEQUAL
44879: OR
44880: IFFALSE 44884
// exit ;
44882: GO 45200
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44884: LD_ADDR_VAR 0 6
44888: PUSH
44889: LD_INT 22
44891: PUSH
44892: LD_VAR 0 1
44896: PPUSH
44897: CALL_OW 255
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 30
44911: PUSH
44912: LD_INT 36
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 34
44921: PUSH
44922: LD_INT 31
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: LIST
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PPUSH
44938: CALL_OW 69
44942: ST_TO_ADDR
// if not tmp then
44943: LD_VAR 0 6
44947: NOT
44948: IFFALSE 44952
// exit ;
44950: GO 45200
// result := [ ] ;
44952: LD_ADDR_VAR 0 2
44956: PUSH
44957: EMPTY
44958: ST_TO_ADDR
// for i in tmp do
44959: LD_ADDR_VAR 0 3
44963: PUSH
44964: LD_VAR 0 6
44968: PUSH
44969: FOR_IN
44970: IFFALSE 45041
// begin t := UnitsInside ( i ) ;
44972: LD_ADDR_VAR 0 4
44976: PUSH
44977: LD_VAR 0 3
44981: PPUSH
44982: CALL_OW 313
44986: ST_TO_ADDR
// if t then
44987: LD_VAR 0 4
44991: IFFALSE 45039
// for j in t do
44993: LD_ADDR_VAR 0 7
44997: PUSH
44998: LD_VAR 0 4
45002: PUSH
45003: FOR_IN
45004: IFFALSE 45037
// result := Replace ( result , result + 1 , j ) ;
45006: LD_ADDR_VAR 0 2
45010: PUSH
45011: LD_VAR 0 2
45015: PPUSH
45016: LD_VAR 0 2
45020: PUSH
45021: LD_INT 1
45023: PLUS
45024: PPUSH
45025: LD_VAR 0 7
45029: PPUSH
45030: CALL_OW 1
45034: ST_TO_ADDR
45035: GO 45003
45037: POP
45038: POP
// end ;
45039: GO 44969
45041: POP
45042: POP
// if not result then
45043: LD_VAR 0 2
45047: NOT
45048: IFFALSE 45052
// exit ;
45050: GO 45200
// mech := result [ 1 ] ;
45052: LD_ADDR_VAR 0 5
45056: PUSH
45057: LD_VAR 0 2
45061: PUSH
45062: LD_INT 1
45064: ARRAY
45065: ST_TO_ADDR
// if result > 1 then
45066: LD_VAR 0 2
45070: PUSH
45071: LD_INT 1
45073: GREATER
45074: IFFALSE 45186
// begin for i = 2 to result do
45076: LD_ADDR_VAR 0 3
45080: PUSH
45081: DOUBLE
45082: LD_INT 2
45084: DEC
45085: ST_TO_ADDR
45086: LD_VAR 0 2
45090: PUSH
45091: FOR_TO
45092: IFFALSE 45184
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45094: LD_ADDR_VAR 0 4
45098: PUSH
45099: LD_VAR 0 2
45103: PUSH
45104: LD_VAR 0 3
45108: ARRAY
45109: PPUSH
45110: LD_INT 3
45112: PPUSH
45113: CALL_OW 259
45117: PUSH
45118: LD_VAR 0 2
45122: PUSH
45123: LD_VAR 0 3
45127: ARRAY
45128: PPUSH
45129: CALL_OW 432
45133: MINUS
45134: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45135: LD_VAR 0 4
45139: PUSH
45140: LD_VAR 0 5
45144: PPUSH
45145: LD_INT 3
45147: PPUSH
45148: CALL_OW 259
45152: PUSH
45153: LD_VAR 0 5
45157: PPUSH
45158: CALL_OW 432
45162: MINUS
45163: GREATEREQUAL
45164: IFFALSE 45182
// mech := result [ i ] ;
45166: LD_ADDR_VAR 0 5
45170: PUSH
45171: LD_VAR 0 2
45175: PUSH
45176: LD_VAR 0 3
45180: ARRAY
45181: ST_TO_ADDR
// end ;
45182: GO 45091
45184: POP
45185: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45186: LD_VAR 0 1
45190: PPUSH
45191: LD_VAR 0 5
45195: PPUSH
45196: CALL_OW 135
// end ;
45200: LD_VAR 0 2
45204: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45205: LD_INT 0
45207: PPUSH
45208: PPUSH
45209: PPUSH
45210: PPUSH
45211: PPUSH
45212: PPUSH
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
// result := [ ] ;
45220: LD_ADDR_VAR 0 7
45224: PUSH
45225: EMPTY
45226: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45227: LD_VAR 0 1
45231: PPUSH
45232: CALL_OW 266
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: IN
45247: NOT
45248: IFFALSE 45252
// exit ;
45250: GO 46886
// if name then
45252: LD_VAR 0 3
45256: IFFALSE 45272
// SetBName ( base_dep , name ) ;
45258: LD_VAR 0 1
45262: PPUSH
45263: LD_VAR 0 3
45267: PPUSH
45268: CALL_OW 500
// base := GetBase ( base_dep ) ;
45272: LD_ADDR_VAR 0 15
45276: PUSH
45277: LD_VAR 0 1
45281: PPUSH
45282: CALL_OW 274
45286: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45287: LD_ADDR_VAR 0 16
45291: PUSH
45292: LD_VAR 0 1
45296: PPUSH
45297: CALL_OW 255
45301: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45302: LD_ADDR_VAR 0 17
45306: PUSH
45307: LD_VAR 0 1
45311: PPUSH
45312: CALL_OW 248
45316: ST_TO_ADDR
// if sources then
45317: LD_VAR 0 5
45321: IFFALSE 45368
// for i = 1 to 3 do
45323: LD_ADDR_VAR 0 8
45327: PUSH
45328: DOUBLE
45329: LD_INT 1
45331: DEC
45332: ST_TO_ADDR
45333: LD_INT 3
45335: PUSH
45336: FOR_TO
45337: IFFALSE 45366
// AddResourceType ( base , i , sources [ i ] ) ;
45339: LD_VAR 0 15
45343: PPUSH
45344: LD_VAR 0 8
45348: PPUSH
45349: LD_VAR 0 5
45353: PUSH
45354: LD_VAR 0 8
45358: ARRAY
45359: PPUSH
45360: CALL_OW 276
45364: GO 45336
45366: POP
45367: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45368: LD_ADDR_VAR 0 18
45372: PUSH
45373: LD_VAR 0 15
45377: PPUSH
45378: LD_VAR 0 2
45382: PPUSH
45383: LD_INT 1
45385: PPUSH
45386: CALL 44629 0 3
45390: ST_TO_ADDR
// InitHc ;
45391: CALL_OW 19
// InitUc ;
45395: CALL_OW 18
// uc_side := side ;
45399: LD_ADDR_OWVAR 20
45403: PUSH
45404: LD_VAR 0 16
45408: ST_TO_ADDR
// uc_nation := nation ;
45409: LD_ADDR_OWVAR 21
45413: PUSH
45414: LD_VAR 0 17
45418: ST_TO_ADDR
// if buildings then
45419: LD_VAR 0 18
45423: IFFALSE 46745
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45425: LD_ADDR_VAR 0 19
45429: PUSH
45430: LD_VAR 0 18
45434: PPUSH
45435: LD_INT 2
45437: PUSH
45438: LD_INT 30
45440: PUSH
45441: LD_INT 29
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 30
45450: PUSH
45451: LD_INT 30
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: LIST
45462: PPUSH
45463: CALL_OW 72
45467: ST_TO_ADDR
// if tmp then
45468: LD_VAR 0 19
45472: IFFALSE 45520
// for i in tmp do
45474: LD_ADDR_VAR 0 8
45478: PUSH
45479: LD_VAR 0 19
45483: PUSH
45484: FOR_IN
45485: IFFALSE 45518
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45487: LD_VAR 0 8
45491: PPUSH
45492: CALL_OW 250
45496: PPUSH
45497: LD_VAR 0 8
45501: PPUSH
45502: CALL_OW 251
45506: PPUSH
45507: LD_VAR 0 16
45511: PPUSH
45512: CALL_OW 441
45516: GO 45484
45518: POP
45519: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45520: LD_VAR 0 18
45524: PPUSH
45525: LD_INT 2
45527: PUSH
45528: LD_INT 30
45530: PUSH
45531: LD_INT 32
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 30
45540: PUSH
45541: LD_INT 33
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: LIST
45552: PPUSH
45553: CALL_OW 72
45557: IFFALSE 45645
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45559: LD_ADDR_VAR 0 8
45563: PUSH
45564: LD_VAR 0 18
45568: PPUSH
45569: LD_INT 2
45571: PUSH
45572: LD_INT 30
45574: PUSH
45575: LD_INT 32
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 30
45584: PUSH
45585: LD_INT 33
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: PPUSH
45597: CALL_OW 72
45601: PUSH
45602: FOR_IN
45603: IFFALSE 45643
// begin if not GetBWeapon ( i ) then
45605: LD_VAR 0 8
45609: PPUSH
45610: CALL_OW 269
45614: NOT
45615: IFFALSE 45641
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45617: LD_VAR 0 8
45621: PPUSH
45622: LD_VAR 0 8
45626: PPUSH
45627: LD_VAR 0 2
45631: PPUSH
45632: CALL 46891 0 2
45636: PPUSH
45637: CALL_OW 431
// end ;
45641: GO 45602
45643: POP
45644: POP
// end ; for i = 1 to personel do
45645: LD_ADDR_VAR 0 8
45649: PUSH
45650: DOUBLE
45651: LD_INT 1
45653: DEC
45654: ST_TO_ADDR
45655: LD_VAR 0 6
45659: PUSH
45660: FOR_TO
45661: IFFALSE 46725
// begin if i > 4 then
45663: LD_VAR 0 8
45667: PUSH
45668: LD_INT 4
45670: GREATER
45671: IFFALSE 45675
// break ;
45673: GO 46725
// case i of 1 :
45675: LD_VAR 0 8
45679: PUSH
45680: LD_INT 1
45682: DOUBLE
45683: EQUAL
45684: IFTRUE 45688
45686: GO 45768
45688: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45689: LD_ADDR_VAR 0 12
45693: PUSH
45694: LD_VAR 0 18
45698: PPUSH
45699: LD_INT 22
45701: PUSH
45702: LD_VAR 0 16
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 58
45713: PUSH
45714: EMPTY
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 30
45722: PUSH
45723: LD_INT 32
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 30
45732: PUSH
45733: LD_INT 4
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 30
45742: PUSH
45743: LD_INT 5
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: PPUSH
45761: CALL_OW 72
45765: ST_TO_ADDR
45766: GO 45990
45768: LD_INT 2
45770: DOUBLE
45771: EQUAL
45772: IFTRUE 45776
45774: GO 45838
45776: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45777: LD_ADDR_VAR 0 12
45781: PUSH
45782: LD_VAR 0 18
45786: PPUSH
45787: LD_INT 22
45789: PUSH
45790: LD_VAR 0 16
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: LD_INT 30
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 30
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: LIST
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PPUSH
45831: CALL_OW 72
45835: ST_TO_ADDR
45836: GO 45990
45838: LD_INT 3
45840: DOUBLE
45841: EQUAL
45842: IFTRUE 45846
45844: GO 45908
45846: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45847: LD_ADDR_VAR 0 12
45851: PUSH
45852: LD_VAR 0 18
45856: PPUSH
45857: LD_INT 22
45859: PUSH
45860: LD_VAR 0 16
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: LD_INT 30
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 30
45884: PUSH
45885: LD_INT 3
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: LIST
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PPUSH
45901: CALL_OW 72
45905: ST_TO_ADDR
45906: GO 45990
45908: LD_INT 4
45910: DOUBLE
45911: EQUAL
45912: IFTRUE 45916
45914: GO 45989
45916: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45917: LD_ADDR_VAR 0 12
45921: PUSH
45922: LD_VAR 0 18
45926: PPUSH
45927: LD_INT 22
45929: PUSH
45930: LD_VAR 0 16
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: LD_INT 30
45944: PUSH
45945: LD_INT 6
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 30
45954: PUSH
45955: LD_INT 7
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 30
45964: PUSH
45965: LD_INT 8
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PPUSH
45982: CALL_OW 72
45986: ST_TO_ADDR
45987: GO 45990
45989: POP
// if i = 1 then
45990: LD_VAR 0 8
45994: PUSH
45995: LD_INT 1
45997: EQUAL
45998: IFFALSE 46109
// begin tmp := [ ] ;
46000: LD_ADDR_VAR 0 19
46004: PUSH
46005: EMPTY
46006: ST_TO_ADDR
// for j in f do
46007: LD_ADDR_VAR 0 9
46011: PUSH
46012: LD_VAR 0 12
46016: PUSH
46017: FOR_IN
46018: IFFALSE 46091
// if GetBType ( j ) = b_bunker then
46020: LD_VAR 0 9
46024: PPUSH
46025: CALL_OW 266
46029: PUSH
46030: LD_INT 32
46032: EQUAL
46033: IFFALSE 46060
// tmp := Insert ( tmp , 1 , j ) else
46035: LD_ADDR_VAR 0 19
46039: PUSH
46040: LD_VAR 0 19
46044: PPUSH
46045: LD_INT 1
46047: PPUSH
46048: LD_VAR 0 9
46052: PPUSH
46053: CALL_OW 2
46057: ST_TO_ADDR
46058: GO 46089
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46060: LD_ADDR_VAR 0 19
46064: PUSH
46065: LD_VAR 0 19
46069: PPUSH
46070: LD_VAR 0 19
46074: PUSH
46075: LD_INT 1
46077: PLUS
46078: PPUSH
46079: LD_VAR 0 9
46083: PPUSH
46084: CALL_OW 2
46088: ST_TO_ADDR
46089: GO 46017
46091: POP
46092: POP
// if tmp then
46093: LD_VAR 0 19
46097: IFFALSE 46109
// f := tmp ;
46099: LD_ADDR_VAR 0 12
46103: PUSH
46104: LD_VAR 0 19
46108: ST_TO_ADDR
// end ; x := personel [ i ] ;
46109: LD_ADDR_VAR 0 13
46113: PUSH
46114: LD_VAR 0 6
46118: PUSH
46119: LD_VAR 0 8
46123: ARRAY
46124: ST_TO_ADDR
// if x = - 1 then
46125: LD_VAR 0 13
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: EQUAL
46134: IFFALSE 46343
// begin for j in f do
46136: LD_ADDR_VAR 0 9
46140: PUSH
46141: LD_VAR 0 12
46145: PUSH
46146: FOR_IN
46147: IFFALSE 46339
// repeat InitHc ;
46149: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46153: LD_VAR 0 9
46157: PPUSH
46158: CALL_OW 266
46162: PUSH
46163: LD_INT 5
46165: EQUAL
46166: IFFALSE 46236
// begin if UnitsInside ( j ) < 3 then
46168: LD_VAR 0 9
46172: PPUSH
46173: CALL_OW 313
46177: PUSH
46178: LD_INT 3
46180: LESS
46181: IFFALSE 46217
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46183: LD_INT 0
46185: PPUSH
46186: LD_INT 5
46188: PUSH
46189: LD_INT 8
46191: PUSH
46192: LD_INT 9
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: PUSH
46200: LD_VAR 0 17
46204: ARRAY
46205: PPUSH
46206: LD_VAR 0 4
46210: PPUSH
46211: CALL_OW 380
46215: GO 46234
// PrepareHuman ( false , i , skill ) ;
46217: LD_INT 0
46219: PPUSH
46220: LD_VAR 0 8
46224: PPUSH
46225: LD_VAR 0 4
46229: PPUSH
46230: CALL_OW 380
// end else
46234: GO 46253
// PrepareHuman ( false , i , skill ) ;
46236: LD_INT 0
46238: PPUSH
46239: LD_VAR 0 8
46243: PPUSH
46244: LD_VAR 0 4
46248: PPUSH
46249: CALL_OW 380
// un := CreateHuman ;
46253: LD_ADDR_VAR 0 14
46257: PUSH
46258: CALL_OW 44
46262: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46263: LD_ADDR_VAR 0 7
46267: PUSH
46268: LD_VAR 0 7
46272: PPUSH
46273: LD_INT 1
46275: PPUSH
46276: LD_VAR 0 14
46280: PPUSH
46281: CALL_OW 2
46285: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46286: LD_VAR 0 14
46290: PPUSH
46291: LD_VAR 0 9
46295: PPUSH
46296: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46300: LD_VAR 0 9
46304: PPUSH
46305: CALL_OW 313
46309: PUSH
46310: LD_INT 6
46312: EQUAL
46313: PUSH
46314: LD_VAR 0 9
46318: PPUSH
46319: CALL_OW 266
46323: PUSH
46324: LD_INT 32
46326: PUSH
46327: LD_INT 31
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: IN
46334: OR
46335: IFFALSE 46149
46337: GO 46146
46339: POP
46340: POP
// end else
46341: GO 46723
// for j = 1 to x do
46343: LD_ADDR_VAR 0 9
46347: PUSH
46348: DOUBLE
46349: LD_INT 1
46351: DEC
46352: ST_TO_ADDR
46353: LD_VAR 0 13
46357: PUSH
46358: FOR_TO
46359: IFFALSE 46721
// begin InitHc ;
46361: CALL_OW 19
// if not f then
46365: LD_VAR 0 12
46369: NOT
46370: IFFALSE 46459
// begin PrepareHuman ( false , i , skill ) ;
46372: LD_INT 0
46374: PPUSH
46375: LD_VAR 0 8
46379: PPUSH
46380: LD_VAR 0 4
46384: PPUSH
46385: CALL_OW 380
// un := CreateHuman ;
46389: LD_ADDR_VAR 0 14
46393: PUSH
46394: CALL_OW 44
46398: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46399: LD_ADDR_VAR 0 7
46403: PUSH
46404: LD_VAR 0 7
46408: PPUSH
46409: LD_INT 1
46411: PPUSH
46412: LD_VAR 0 14
46416: PPUSH
46417: CALL_OW 2
46421: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46422: LD_VAR 0 14
46426: PPUSH
46427: LD_VAR 0 1
46431: PPUSH
46432: CALL_OW 250
46436: PPUSH
46437: LD_VAR 0 1
46441: PPUSH
46442: CALL_OW 251
46446: PPUSH
46447: LD_INT 10
46449: PPUSH
46450: LD_INT 0
46452: PPUSH
46453: CALL_OW 50
// continue ;
46457: GO 46358
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46459: LD_VAR 0 12
46463: PUSH
46464: LD_INT 1
46466: ARRAY
46467: PPUSH
46468: CALL_OW 313
46472: PUSH
46473: LD_VAR 0 12
46477: PUSH
46478: LD_INT 1
46480: ARRAY
46481: PPUSH
46482: CALL_OW 266
46486: PUSH
46487: LD_INT 32
46489: PUSH
46490: LD_INT 31
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: IN
46497: AND
46498: PUSH
46499: LD_VAR 0 12
46503: PUSH
46504: LD_INT 1
46506: ARRAY
46507: PPUSH
46508: CALL_OW 313
46512: PUSH
46513: LD_INT 6
46515: EQUAL
46516: OR
46517: IFFALSE 46537
// f := Delete ( f , 1 ) ;
46519: LD_ADDR_VAR 0 12
46523: PUSH
46524: LD_VAR 0 12
46528: PPUSH
46529: LD_INT 1
46531: PPUSH
46532: CALL_OW 3
46536: ST_TO_ADDR
// if not f then
46537: LD_VAR 0 12
46541: NOT
46542: IFFALSE 46560
// begin x := x + 2 ;
46544: LD_ADDR_VAR 0 13
46548: PUSH
46549: LD_VAR 0 13
46553: PUSH
46554: LD_INT 2
46556: PLUS
46557: ST_TO_ADDR
// continue ;
46558: GO 46358
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46560: LD_VAR 0 12
46564: PUSH
46565: LD_INT 1
46567: ARRAY
46568: PPUSH
46569: CALL_OW 266
46573: PUSH
46574: LD_INT 5
46576: EQUAL
46577: IFFALSE 46651
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46579: LD_VAR 0 12
46583: PUSH
46584: LD_INT 1
46586: ARRAY
46587: PPUSH
46588: CALL_OW 313
46592: PUSH
46593: LD_INT 3
46595: LESS
46596: IFFALSE 46632
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46598: LD_INT 0
46600: PPUSH
46601: LD_INT 5
46603: PUSH
46604: LD_INT 8
46606: PUSH
46607: LD_INT 9
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: PUSH
46615: LD_VAR 0 17
46619: ARRAY
46620: PPUSH
46621: LD_VAR 0 4
46625: PPUSH
46626: CALL_OW 380
46630: GO 46649
// PrepareHuman ( false , i , skill ) ;
46632: LD_INT 0
46634: PPUSH
46635: LD_VAR 0 8
46639: PPUSH
46640: LD_VAR 0 4
46644: PPUSH
46645: CALL_OW 380
// end else
46649: GO 46668
// PrepareHuman ( false , i , skill ) ;
46651: LD_INT 0
46653: PPUSH
46654: LD_VAR 0 8
46658: PPUSH
46659: LD_VAR 0 4
46663: PPUSH
46664: CALL_OW 380
// un := CreateHuman ;
46668: LD_ADDR_VAR 0 14
46672: PUSH
46673: CALL_OW 44
46677: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46678: LD_ADDR_VAR 0 7
46682: PUSH
46683: LD_VAR 0 7
46687: PPUSH
46688: LD_INT 1
46690: PPUSH
46691: LD_VAR 0 14
46695: PPUSH
46696: CALL_OW 2
46700: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46701: LD_VAR 0 14
46705: PPUSH
46706: LD_VAR 0 12
46710: PUSH
46711: LD_INT 1
46713: ARRAY
46714: PPUSH
46715: CALL_OW 52
// end ;
46719: GO 46358
46721: POP
46722: POP
// end ;
46723: GO 45660
46725: POP
46726: POP
// result := result ^ buildings ;
46727: LD_ADDR_VAR 0 7
46731: PUSH
46732: LD_VAR 0 7
46736: PUSH
46737: LD_VAR 0 18
46741: ADD
46742: ST_TO_ADDR
// end else
46743: GO 46886
// begin for i = 1 to personel do
46745: LD_ADDR_VAR 0 8
46749: PUSH
46750: DOUBLE
46751: LD_INT 1
46753: DEC
46754: ST_TO_ADDR
46755: LD_VAR 0 6
46759: PUSH
46760: FOR_TO
46761: IFFALSE 46884
// begin if i > 4 then
46763: LD_VAR 0 8
46767: PUSH
46768: LD_INT 4
46770: GREATER
46771: IFFALSE 46775
// break ;
46773: GO 46884
// x := personel [ i ] ;
46775: LD_ADDR_VAR 0 13
46779: PUSH
46780: LD_VAR 0 6
46784: PUSH
46785: LD_VAR 0 8
46789: ARRAY
46790: ST_TO_ADDR
// if x = - 1 then
46791: LD_VAR 0 13
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: EQUAL
46800: IFFALSE 46804
// continue ;
46802: GO 46760
// PrepareHuman ( false , i , skill ) ;
46804: LD_INT 0
46806: PPUSH
46807: LD_VAR 0 8
46811: PPUSH
46812: LD_VAR 0 4
46816: PPUSH
46817: CALL_OW 380
// un := CreateHuman ;
46821: LD_ADDR_VAR 0 14
46825: PUSH
46826: CALL_OW 44
46830: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46831: LD_VAR 0 14
46835: PPUSH
46836: LD_VAR 0 1
46840: PPUSH
46841: CALL_OW 250
46845: PPUSH
46846: LD_VAR 0 1
46850: PPUSH
46851: CALL_OW 251
46855: PPUSH
46856: LD_INT 10
46858: PPUSH
46859: LD_INT 0
46861: PPUSH
46862: CALL_OW 50
// result := result ^ un ;
46866: LD_ADDR_VAR 0 7
46870: PUSH
46871: LD_VAR 0 7
46875: PUSH
46876: LD_VAR 0 14
46880: ADD
46881: ST_TO_ADDR
// end ;
46882: GO 46760
46884: POP
46885: POP
// end ; end ;
46886: LD_VAR 0 7
46890: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46891: LD_INT 0
46893: PPUSH
46894: PPUSH
46895: PPUSH
46896: PPUSH
46897: PPUSH
46898: PPUSH
46899: PPUSH
46900: PPUSH
46901: PPUSH
46902: PPUSH
46903: PPUSH
46904: PPUSH
46905: PPUSH
46906: PPUSH
46907: PPUSH
46908: PPUSH
// result := false ;
46909: LD_ADDR_VAR 0 3
46913: PUSH
46914: LD_INT 0
46916: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46917: LD_VAR 0 1
46921: NOT
46922: PUSH
46923: LD_VAR 0 1
46927: PPUSH
46928: CALL_OW 266
46932: PUSH
46933: LD_INT 32
46935: PUSH
46936: LD_INT 33
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: IN
46943: NOT
46944: OR
46945: IFFALSE 46949
// exit ;
46947: GO 48058
// nat := GetNation ( tower ) ;
46949: LD_ADDR_VAR 0 12
46953: PUSH
46954: LD_VAR 0 1
46958: PPUSH
46959: CALL_OW 248
46963: ST_TO_ADDR
// side := GetSide ( tower ) ;
46964: LD_ADDR_VAR 0 16
46968: PUSH
46969: LD_VAR 0 1
46973: PPUSH
46974: CALL_OW 255
46978: ST_TO_ADDR
// x := GetX ( tower ) ;
46979: LD_ADDR_VAR 0 10
46983: PUSH
46984: LD_VAR 0 1
46988: PPUSH
46989: CALL_OW 250
46993: ST_TO_ADDR
// y := GetY ( tower ) ;
46994: LD_ADDR_VAR 0 11
46998: PUSH
46999: LD_VAR 0 1
47003: PPUSH
47004: CALL_OW 251
47008: ST_TO_ADDR
// if not x or not y then
47009: LD_VAR 0 10
47013: NOT
47014: PUSH
47015: LD_VAR 0 11
47019: NOT
47020: OR
47021: IFFALSE 47025
// exit ;
47023: GO 48058
// weapon := 0 ;
47025: LD_ADDR_VAR 0 18
47029: PUSH
47030: LD_INT 0
47032: ST_TO_ADDR
// fac_list := [ ] ;
47033: LD_ADDR_VAR 0 17
47037: PUSH
47038: EMPTY
47039: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47040: LD_ADDR_VAR 0 6
47044: PUSH
47045: LD_VAR 0 1
47049: PPUSH
47050: CALL_OW 274
47054: PPUSH
47055: LD_VAR 0 2
47059: PPUSH
47060: LD_INT 0
47062: PPUSH
47063: CALL 44629 0 3
47067: PPUSH
47068: LD_INT 30
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PPUSH
47078: CALL_OW 72
47082: ST_TO_ADDR
// if not factories then
47083: LD_VAR 0 6
47087: NOT
47088: IFFALSE 47092
// exit ;
47090: GO 48058
// for i in factories do
47092: LD_ADDR_VAR 0 8
47096: PUSH
47097: LD_VAR 0 6
47101: PUSH
47102: FOR_IN
47103: IFFALSE 47128
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47105: LD_ADDR_VAR 0 17
47109: PUSH
47110: LD_VAR 0 17
47114: PUSH
47115: LD_VAR 0 8
47119: PPUSH
47120: CALL_OW 478
47124: UNION
47125: ST_TO_ADDR
47126: GO 47102
47128: POP
47129: POP
// if not fac_list then
47130: LD_VAR 0 17
47134: NOT
47135: IFFALSE 47139
// exit ;
47137: GO 48058
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47139: LD_ADDR_VAR 0 5
47143: PUSH
47144: LD_INT 4
47146: PUSH
47147: LD_INT 5
47149: PUSH
47150: LD_INT 9
47152: PUSH
47153: LD_INT 10
47155: PUSH
47156: LD_INT 6
47158: PUSH
47159: LD_INT 7
47161: PUSH
47162: LD_INT 11
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 27
47176: PUSH
47177: LD_INT 28
47179: PUSH
47180: LD_INT 26
47182: PUSH
47183: LD_INT 30
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 43
47194: PUSH
47195: LD_INT 44
47197: PUSH
47198: LD_INT 46
47200: PUSH
47201: LD_INT 45
47203: PUSH
47204: LD_INT 47
47206: PUSH
47207: LD_INT 49
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: LIST
47222: PUSH
47223: LD_VAR 0 12
47227: ARRAY
47228: ST_TO_ADDR
// list := list isect fac_list ;
47229: LD_ADDR_VAR 0 5
47233: PUSH
47234: LD_VAR 0 5
47238: PUSH
47239: LD_VAR 0 17
47243: ISECT
47244: ST_TO_ADDR
// if not list then
47245: LD_VAR 0 5
47249: NOT
47250: IFFALSE 47254
// exit ;
47252: GO 48058
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47254: LD_VAR 0 12
47258: PUSH
47259: LD_INT 3
47261: EQUAL
47262: PUSH
47263: LD_INT 49
47265: PUSH
47266: LD_VAR 0 5
47270: IN
47271: AND
47272: PUSH
47273: LD_INT 31
47275: PPUSH
47276: LD_VAR 0 16
47280: PPUSH
47281: CALL_OW 321
47285: PUSH
47286: LD_INT 2
47288: EQUAL
47289: AND
47290: IFFALSE 47350
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47292: LD_INT 22
47294: PUSH
47295: LD_VAR 0 16
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 35
47306: PUSH
47307: LD_INT 49
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 91
47316: PUSH
47317: LD_VAR 0 1
47321: PUSH
47322: LD_INT 10
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: PPUSH
47335: CALL_OW 69
47339: NOT
47340: IFFALSE 47350
// weapon := ru_time_lapser ;
47342: LD_ADDR_VAR 0 18
47346: PUSH
47347: LD_INT 49
47349: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47350: LD_VAR 0 12
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: IN
47365: PUSH
47366: LD_INT 11
47368: PUSH
47369: LD_VAR 0 5
47373: IN
47374: PUSH
47375: LD_INT 30
47377: PUSH
47378: LD_VAR 0 5
47382: IN
47383: OR
47384: AND
47385: PUSH
47386: LD_INT 6
47388: PPUSH
47389: LD_VAR 0 16
47393: PPUSH
47394: CALL_OW 321
47398: PUSH
47399: LD_INT 2
47401: EQUAL
47402: AND
47403: IFFALSE 47568
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47405: LD_INT 22
47407: PUSH
47408: LD_VAR 0 16
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: LD_INT 35
47422: PUSH
47423: LD_INT 11
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 35
47432: PUSH
47433: LD_INT 30
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 91
47447: PUSH
47448: LD_VAR 0 1
47452: PUSH
47453: LD_INT 18
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: PPUSH
47466: CALL_OW 69
47470: NOT
47471: PUSH
47472: LD_INT 22
47474: PUSH
47475: LD_VAR 0 16
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: PUSH
47487: LD_INT 30
47489: PUSH
47490: LD_INT 32
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 30
47499: PUSH
47500: LD_INT 33
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 91
47514: PUSH
47515: LD_VAR 0 1
47519: PUSH
47520: LD_INT 12
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: LIST
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: PUSH
47533: EMPTY
47534: LIST
47535: PPUSH
47536: CALL_OW 69
47540: PUSH
47541: LD_INT 2
47543: GREATER
47544: AND
47545: IFFALSE 47568
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47547: LD_ADDR_VAR 0 18
47551: PUSH
47552: LD_INT 11
47554: PUSH
47555: LD_INT 30
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_VAR 0 12
47566: ARRAY
47567: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47568: LD_VAR 0 18
47572: NOT
47573: PUSH
47574: LD_INT 40
47576: PPUSH
47577: LD_VAR 0 16
47581: PPUSH
47582: CALL_OW 321
47586: PUSH
47587: LD_INT 2
47589: EQUAL
47590: AND
47591: PUSH
47592: LD_INT 7
47594: PUSH
47595: LD_VAR 0 5
47599: IN
47600: PUSH
47601: LD_INT 28
47603: PUSH
47604: LD_VAR 0 5
47608: IN
47609: OR
47610: PUSH
47611: LD_INT 45
47613: PUSH
47614: LD_VAR 0 5
47618: IN
47619: OR
47620: AND
47621: IFFALSE 47875
// begin hex := GetHexInfo ( x , y ) ;
47623: LD_ADDR_VAR 0 4
47627: PUSH
47628: LD_VAR 0 10
47632: PPUSH
47633: LD_VAR 0 11
47637: PPUSH
47638: CALL_OW 546
47642: ST_TO_ADDR
// if hex [ 1 ] then
47643: LD_VAR 0 4
47647: PUSH
47648: LD_INT 1
47650: ARRAY
47651: IFFALSE 47655
// exit ;
47653: GO 48058
// height := hex [ 2 ] ;
47655: LD_ADDR_VAR 0 15
47659: PUSH
47660: LD_VAR 0 4
47664: PUSH
47665: LD_INT 2
47667: ARRAY
47668: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47669: LD_ADDR_VAR 0 14
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: LD_INT 3
47682: PUSH
47683: LD_INT 5
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: ST_TO_ADDR
// for i in tmp do
47692: LD_ADDR_VAR 0 8
47696: PUSH
47697: LD_VAR 0 14
47701: PUSH
47702: FOR_IN
47703: IFFALSE 47873
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47705: LD_ADDR_VAR 0 9
47709: PUSH
47710: LD_VAR 0 10
47714: PPUSH
47715: LD_VAR 0 8
47719: PPUSH
47720: LD_INT 5
47722: PPUSH
47723: CALL_OW 272
47727: PUSH
47728: LD_VAR 0 11
47732: PPUSH
47733: LD_VAR 0 8
47737: PPUSH
47738: LD_INT 5
47740: PPUSH
47741: CALL_OW 273
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47750: LD_VAR 0 9
47754: PUSH
47755: LD_INT 1
47757: ARRAY
47758: PPUSH
47759: LD_VAR 0 9
47763: PUSH
47764: LD_INT 2
47766: ARRAY
47767: PPUSH
47768: CALL_OW 488
47772: IFFALSE 47871
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47774: LD_ADDR_VAR 0 4
47778: PUSH
47779: LD_VAR 0 9
47783: PUSH
47784: LD_INT 1
47786: ARRAY
47787: PPUSH
47788: LD_VAR 0 9
47792: PUSH
47793: LD_INT 2
47795: ARRAY
47796: PPUSH
47797: CALL_OW 546
47801: ST_TO_ADDR
// if hex [ 1 ] then
47802: LD_VAR 0 4
47806: PUSH
47807: LD_INT 1
47809: ARRAY
47810: IFFALSE 47814
// continue ;
47812: GO 47702
// h := hex [ 2 ] ;
47814: LD_ADDR_VAR 0 13
47818: PUSH
47819: LD_VAR 0 4
47823: PUSH
47824: LD_INT 2
47826: ARRAY
47827: ST_TO_ADDR
// if h + 7 < height then
47828: LD_VAR 0 13
47832: PUSH
47833: LD_INT 7
47835: PLUS
47836: PUSH
47837: LD_VAR 0 15
47841: LESS
47842: IFFALSE 47871
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47844: LD_ADDR_VAR 0 18
47848: PUSH
47849: LD_INT 7
47851: PUSH
47852: LD_INT 28
47854: PUSH
47855: LD_INT 45
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: PUSH
47863: LD_VAR 0 12
47867: ARRAY
47868: ST_TO_ADDR
// break ;
47869: GO 47873
// end ; end ; end ;
47871: GO 47702
47873: POP
47874: POP
// end ; if not weapon then
47875: LD_VAR 0 18
47879: NOT
47880: IFFALSE 47940
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47882: LD_ADDR_VAR 0 5
47886: PUSH
47887: LD_VAR 0 5
47891: PUSH
47892: LD_INT 11
47894: PUSH
47895: LD_INT 30
47897: PUSH
47898: LD_INT 49
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: LIST
47905: DIFF
47906: ST_TO_ADDR
// if not list then
47907: LD_VAR 0 5
47911: NOT
47912: IFFALSE 47916
// exit ;
47914: GO 48058
// weapon := list [ rand ( 1 , list ) ] ;
47916: LD_ADDR_VAR 0 18
47920: PUSH
47921: LD_VAR 0 5
47925: PUSH
47926: LD_INT 1
47928: PPUSH
47929: LD_VAR 0 5
47933: PPUSH
47934: CALL_OW 12
47938: ARRAY
47939: ST_TO_ADDR
// end ; if weapon then
47940: LD_VAR 0 18
47944: IFFALSE 48058
// begin tmp := CostOfWeapon ( weapon ) ;
47946: LD_ADDR_VAR 0 14
47950: PUSH
47951: LD_VAR 0 18
47955: PPUSH
47956: CALL_OW 451
47960: ST_TO_ADDR
// j := GetBase ( tower ) ;
47961: LD_ADDR_VAR 0 9
47965: PUSH
47966: LD_VAR 0 1
47970: PPUSH
47971: CALL_OW 274
47975: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47976: LD_VAR 0 9
47980: PPUSH
47981: LD_INT 1
47983: PPUSH
47984: CALL_OW 275
47988: PUSH
47989: LD_VAR 0 14
47993: PUSH
47994: LD_INT 1
47996: ARRAY
47997: GREATEREQUAL
47998: PUSH
47999: LD_VAR 0 9
48003: PPUSH
48004: LD_INT 2
48006: PPUSH
48007: CALL_OW 275
48011: PUSH
48012: LD_VAR 0 14
48016: PUSH
48017: LD_INT 2
48019: ARRAY
48020: GREATEREQUAL
48021: AND
48022: PUSH
48023: LD_VAR 0 9
48027: PPUSH
48028: LD_INT 3
48030: PPUSH
48031: CALL_OW 275
48035: PUSH
48036: LD_VAR 0 14
48040: PUSH
48041: LD_INT 3
48043: ARRAY
48044: GREATEREQUAL
48045: AND
48046: IFFALSE 48058
// result := weapon ;
48048: LD_ADDR_VAR 0 3
48052: PUSH
48053: LD_VAR 0 18
48057: ST_TO_ADDR
// end ; end ;
48058: LD_VAR 0 3
48062: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48063: LD_INT 0
48065: PPUSH
48066: PPUSH
// result := true ;
48067: LD_ADDR_VAR 0 3
48071: PUSH
48072: LD_INT 1
48074: ST_TO_ADDR
// if array1 = array2 then
48075: LD_VAR 0 1
48079: PUSH
48080: LD_VAR 0 2
48084: EQUAL
48085: IFFALSE 48145
// begin for i = 1 to array1 do
48087: LD_ADDR_VAR 0 4
48091: PUSH
48092: DOUBLE
48093: LD_INT 1
48095: DEC
48096: ST_TO_ADDR
48097: LD_VAR 0 1
48101: PUSH
48102: FOR_TO
48103: IFFALSE 48141
// if array1 [ i ] <> array2 [ i ] then
48105: LD_VAR 0 1
48109: PUSH
48110: LD_VAR 0 4
48114: ARRAY
48115: PUSH
48116: LD_VAR 0 2
48120: PUSH
48121: LD_VAR 0 4
48125: ARRAY
48126: NONEQUAL
48127: IFFALSE 48139
// begin result := false ;
48129: LD_ADDR_VAR 0 3
48133: PUSH
48134: LD_INT 0
48136: ST_TO_ADDR
// break ;
48137: GO 48141
// end ;
48139: GO 48102
48141: POP
48142: POP
// end else
48143: GO 48153
// result := false ;
48145: LD_ADDR_VAR 0 3
48149: PUSH
48150: LD_INT 0
48152: ST_TO_ADDR
// end ;
48153: LD_VAR 0 3
48157: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48158: LD_INT 0
48160: PPUSH
48161: PPUSH
// if not array1 or not array2 then
48162: LD_VAR 0 1
48166: NOT
48167: PUSH
48168: LD_VAR 0 2
48172: NOT
48173: OR
48174: IFFALSE 48178
// exit ;
48176: GO 48242
// result := true ;
48178: LD_ADDR_VAR 0 3
48182: PUSH
48183: LD_INT 1
48185: ST_TO_ADDR
// for i = 1 to array1 do
48186: LD_ADDR_VAR 0 4
48190: PUSH
48191: DOUBLE
48192: LD_INT 1
48194: DEC
48195: ST_TO_ADDR
48196: LD_VAR 0 1
48200: PUSH
48201: FOR_TO
48202: IFFALSE 48240
// if array1 [ i ] <> array2 [ i ] then
48204: LD_VAR 0 1
48208: PUSH
48209: LD_VAR 0 4
48213: ARRAY
48214: PUSH
48215: LD_VAR 0 2
48219: PUSH
48220: LD_VAR 0 4
48224: ARRAY
48225: NONEQUAL
48226: IFFALSE 48238
// begin result := false ;
48228: LD_ADDR_VAR 0 3
48232: PUSH
48233: LD_INT 0
48235: ST_TO_ADDR
// break ;
48236: GO 48240
// end ;
48238: GO 48201
48240: POP
48241: POP
// end ;
48242: LD_VAR 0 3
48246: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48247: LD_INT 0
48249: PPUSH
48250: PPUSH
48251: PPUSH
// pom := GetBase ( fac ) ;
48252: LD_ADDR_VAR 0 5
48256: PUSH
48257: LD_VAR 0 1
48261: PPUSH
48262: CALL_OW 274
48266: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48267: LD_ADDR_VAR 0 4
48271: PUSH
48272: LD_VAR 0 2
48276: PUSH
48277: LD_INT 1
48279: ARRAY
48280: PPUSH
48281: LD_VAR 0 2
48285: PUSH
48286: LD_INT 2
48288: ARRAY
48289: PPUSH
48290: LD_VAR 0 2
48294: PUSH
48295: LD_INT 3
48297: ARRAY
48298: PPUSH
48299: LD_VAR 0 2
48303: PUSH
48304: LD_INT 4
48306: ARRAY
48307: PPUSH
48308: CALL_OW 449
48312: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48313: LD_ADDR_VAR 0 3
48317: PUSH
48318: LD_VAR 0 5
48322: PPUSH
48323: LD_INT 1
48325: PPUSH
48326: CALL_OW 275
48330: PUSH
48331: LD_VAR 0 4
48335: PUSH
48336: LD_INT 1
48338: ARRAY
48339: GREATEREQUAL
48340: PUSH
48341: LD_VAR 0 5
48345: PPUSH
48346: LD_INT 2
48348: PPUSH
48349: CALL_OW 275
48353: PUSH
48354: LD_VAR 0 4
48358: PUSH
48359: LD_INT 2
48361: ARRAY
48362: GREATEREQUAL
48363: AND
48364: PUSH
48365: LD_VAR 0 5
48369: PPUSH
48370: LD_INT 3
48372: PPUSH
48373: CALL_OW 275
48377: PUSH
48378: LD_VAR 0 4
48382: PUSH
48383: LD_INT 3
48385: ARRAY
48386: GREATEREQUAL
48387: AND
48388: ST_TO_ADDR
// end ;
48389: LD_VAR 0 3
48393: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48394: LD_INT 0
48396: PPUSH
48397: PPUSH
48398: PPUSH
48399: PPUSH
// pom := GetBase ( building ) ;
48400: LD_ADDR_VAR 0 3
48404: PUSH
48405: LD_VAR 0 1
48409: PPUSH
48410: CALL_OW 274
48414: ST_TO_ADDR
// if not pom then
48415: LD_VAR 0 3
48419: NOT
48420: IFFALSE 48424
// exit ;
48422: GO 48594
// btype := GetBType ( building ) ;
48424: LD_ADDR_VAR 0 5
48428: PUSH
48429: LD_VAR 0 1
48433: PPUSH
48434: CALL_OW 266
48438: ST_TO_ADDR
// if btype = b_armoury then
48439: LD_VAR 0 5
48443: PUSH
48444: LD_INT 4
48446: EQUAL
48447: IFFALSE 48457
// btype := b_barracks ;
48449: LD_ADDR_VAR 0 5
48453: PUSH
48454: LD_INT 5
48456: ST_TO_ADDR
// if btype = b_depot then
48457: LD_VAR 0 5
48461: PUSH
48462: LD_INT 0
48464: EQUAL
48465: IFFALSE 48475
// btype := b_warehouse ;
48467: LD_ADDR_VAR 0 5
48471: PUSH
48472: LD_INT 1
48474: ST_TO_ADDR
// if btype = b_workshop then
48475: LD_VAR 0 5
48479: PUSH
48480: LD_INT 2
48482: EQUAL
48483: IFFALSE 48493
// btype := b_factory ;
48485: LD_ADDR_VAR 0 5
48489: PUSH
48490: LD_INT 3
48492: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48493: LD_ADDR_VAR 0 4
48497: PUSH
48498: LD_VAR 0 5
48502: PPUSH
48503: LD_VAR 0 1
48507: PPUSH
48508: CALL_OW 248
48512: PPUSH
48513: CALL_OW 450
48517: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48518: LD_ADDR_VAR 0 2
48522: PUSH
48523: LD_VAR 0 3
48527: PPUSH
48528: LD_INT 1
48530: PPUSH
48531: CALL_OW 275
48535: PUSH
48536: LD_VAR 0 4
48540: PUSH
48541: LD_INT 1
48543: ARRAY
48544: GREATEREQUAL
48545: PUSH
48546: LD_VAR 0 3
48550: PPUSH
48551: LD_INT 2
48553: PPUSH
48554: CALL_OW 275
48558: PUSH
48559: LD_VAR 0 4
48563: PUSH
48564: LD_INT 2
48566: ARRAY
48567: GREATEREQUAL
48568: AND
48569: PUSH
48570: LD_VAR 0 3
48574: PPUSH
48575: LD_INT 3
48577: PPUSH
48578: CALL_OW 275
48582: PUSH
48583: LD_VAR 0 4
48587: PUSH
48588: LD_INT 3
48590: ARRAY
48591: GREATEREQUAL
48592: AND
48593: ST_TO_ADDR
// end ;
48594: LD_VAR 0 2
48598: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48599: LD_INT 0
48601: PPUSH
48602: PPUSH
48603: PPUSH
// pom := GetBase ( building ) ;
48604: LD_ADDR_VAR 0 4
48608: PUSH
48609: LD_VAR 0 1
48613: PPUSH
48614: CALL_OW 274
48618: ST_TO_ADDR
// if not pom then
48619: LD_VAR 0 4
48623: NOT
48624: IFFALSE 48628
// exit ;
48626: GO 48729
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48628: LD_ADDR_VAR 0 5
48632: PUSH
48633: LD_VAR 0 2
48637: PPUSH
48638: LD_VAR 0 1
48642: PPUSH
48643: CALL_OW 248
48647: PPUSH
48648: CALL_OW 450
48652: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48653: LD_ADDR_VAR 0 3
48657: PUSH
48658: LD_VAR 0 4
48662: PPUSH
48663: LD_INT 1
48665: PPUSH
48666: CALL_OW 275
48670: PUSH
48671: LD_VAR 0 5
48675: PUSH
48676: LD_INT 1
48678: ARRAY
48679: GREATEREQUAL
48680: PUSH
48681: LD_VAR 0 4
48685: PPUSH
48686: LD_INT 2
48688: PPUSH
48689: CALL_OW 275
48693: PUSH
48694: LD_VAR 0 5
48698: PUSH
48699: LD_INT 2
48701: ARRAY
48702: GREATEREQUAL
48703: AND
48704: PUSH
48705: LD_VAR 0 4
48709: PPUSH
48710: LD_INT 3
48712: PPUSH
48713: CALL_OW 275
48717: PUSH
48718: LD_VAR 0 5
48722: PUSH
48723: LD_INT 3
48725: ARRAY
48726: GREATEREQUAL
48727: AND
48728: ST_TO_ADDR
// end ;
48729: LD_VAR 0 3
48733: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48734: LD_INT 0
48736: PPUSH
48737: PPUSH
48738: PPUSH
48739: PPUSH
48740: PPUSH
48741: PPUSH
48742: PPUSH
48743: PPUSH
48744: PPUSH
48745: PPUSH
48746: PPUSH
// result := false ;
48747: LD_ADDR_VAR 0 8
48751: PUSH
48752: LD_INT 0
48754: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48755: LD_VAR 0 5
48759: NOT
48760: PUSH
48761: LD_VAR 0 1
48765: NOT
48766: OR
48767: PUSH
48768: LD_VAR 0 2
48772: NOT
48773: OR
48774: PUSH
48775: LD_VAR 0 3
48779: NOT
48780: OR
48781: IFFALSE 48785
// exit ;
48783: GO 49599
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48785: LD_ADDR_VAR 0 14
48789: PUSH
48790: LD_VAR 0 1
48794: PPUSH
48795: LD_VAR 0 2
48799: PPUSH
48800: LD_VAR 0 3
48804: PPUSH
48805: LD_VAR 0 4
48809: PPUSH
48810: LD_VAR 0 5
48814: PUSH
48815: LD_INT 1
48817: ARRAY
48818: PPUSH
48819: CALL_OW 248
48823: PPUSH
48824: LD_INT 0
48826: PPUSH
48827: CALL 50832 0 6
48831: ST_TO_ADDR
// if not hexes then
48832: LD_VAR 0 14
48836: NOT
48837: IFFALSE 48841
// exit ;
48839: GO 49599
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48841: LD_ADDR_VAR 0 17
48845: PUSH
48846: LD_VAR 0 5
48850: PPUSH
48851: LD_INT 22
48853: PUSH
48854: LD_VAR 0 13
48858: PPUSH
48859: CALL_OW 255
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: LD_INT 30
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 30
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PPUSH
48900: CALL_OW 72
48904: ST_TO_ADDR
// for i = 1 to hexes do
48905: LD_ADDR_VAR 0 9
48909: PUSH
48910: DOUBLE
48911: LD_INT 1
48913: DEC
48914: ST_TO_ADDR
48915: LD_VAR 0 14
48919: PUSH
48920: FOR_TO
48921: IFFALSE 49597
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48923: LD_ADDR_VAR 0 13
48927: PUSH
48928: LD_VAR 0 14
48932: PUSH
48933: LD_VAR 0 9
48937: ARRAY
48938: PUSH
48939: LD_INT 1
48941: ARRAY
48942: PPUSH
48943: LD_VAR 0 14
48947: PUSH
48948: LD_VAR 0 9
48952: ARRAY
48953: PUSH
48954: LD_INT 2
48956: ARRAY
48957: PPUSH
48958: CALL_OW 428
48962: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48963: LD_VAR 0 14
48967: PUSH
48968: LD_VAR 0 9
48972: ARRAY
48973: PUSH
48974: LD_INT 1
48976: ARRAY
48977: PPUSH
48978: LD_VAR 0 14
48982: PUSH
48983: LD_VAR 0 9
48987: ARRAY
48988: PUSH
48989: LD_INT 2
48991: ARRAY
48992: PPUSH
48993: CALL_OW 351
48997: PUSH
48998: LD_VAR 0 14
49002: PUSH
49003: LD_VAR 0 9
49007: ARRAY
49008: PUSH
49009: LD_INT 1
49011: ARRAY
49012: PPUSH
49013: LD_VAR 0 14
49017: PUSH
49018: LD_VAR 0 9
49022: ARRAY
49023: PUSH
49024: LD_INT 2
49026: ARRAY
49027: PPUSH
49028: CALL_OW 488
49032: NOT
49033: OR
49034: PUSH
49035: LD_VAR 0 13
49039: PPUSH
49040: CALL_OW 247
49044: PUSH
49045: LD_INT 3
49047: EQUAL
49048: OR
49049: IFFALSE 49055
// exit ;
49051: POP
49052: POP
49053: GO 49599
// if not tmp then
49055: LD_VAR 0 13
49059: NOT
49060: IFFALSE 49064
// continue ;
49062: GO 48920
// result := true ;
49064: LD_ADDR_VAR 0 8
49068: PUSH
49069: LD_INT 1
49071: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49072: LD_VAR 0 6
49076: PUSH
49077: LD_VAR 0 13
49081: PPUSH
49082: CALL_OW 247
49086: PUSH
49087: LD_INT 2
49089: EQUAL
49090: AND
49091: PUSH
49092: LD_VAR 0 13
49096: PPUSH
49097: CALL_OW 263
49101: PUSH
49102: LD_INT 1
49104: EQUAL
49105: AND
49106: IFFALSE 49270
// begin if IsDrivenBy ( tmp ) then
49108: LD_VAR 0 13
49112: PPUSH
49113: CALL_OW 311
49117: IFFALSE 49121
// continue ;
49119: GO 48920
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49121: LD_VAR 0 6
49125: PPUSH
49126: LD_INT 3
49128: PUSH
49129: LD_INT 60
49131: PUSH
49132: EMPTY
49133: LIST
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 3
49141: PUSH
49142: LD_INT 55
49144: PUSH
49145: EMPTY
49146: LIST
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PPUSH
49156: CALL_OW 72
49160: IFFALSE 49268
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49162: LD_ADDR_VAR 0 18
49166: PUSH
49167: LD_VAR 0 6
49171: PPUSH
49172: LD_INT 3
49174: PUSH
49175: LD_INT 60
49177: PUSH
49178: EMPTY
49179: LIST
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: LD_INT 55
49190: PUSH
49191: EMPTY
49192: LIST
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PPUSH
49202: CALL_OW 72
49206: PUSH
49207: LD_INT 1
49209: ARRAY
49210: ST_TO_ADDR
// if IsInUnit ( driver ) then
49211: LD_VAR 0 18
49215: PPUSH
49216: CALL_OW 310
49220: IFFALSE 49231
// ComExit ( driver ) ;
49222: LD_VAR 0 18
49226: PPUSH
49227: CALL 74612 0 1
// AddComEnterUnit ( driver , tmp ) ;
49231: LD_VAR 0 18
49235: PPUSH
49236: LD_VAR 0 13
49240: PPUSH
49241: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49245: LD_VAR 0 18
49249: PPUSH
49250: LD_VAR 0 7
49254: PPUSH
49255: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49259: LD_VAR 0 18
49263: PPUSH
49264: CALL_OW 181
// end ; continue ;
49268: GO 48920
// end ; if not cleaners or not tmp in cleaners then
49270: LD_VAR 0 6
49274: NOT
49275: PUSH
49276: LD_VAR 0 13
49280: PUSH
49281: LD_VAR 0 6
49285: IN
49286: NOT
49287: OR
49288: IFFALSE 49595
// begin if dep then
49290: LD_VAR 0 17
49294: IFFALSE 49430
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49296: LD_ADDR_VAR 0 16
49300: PUSH
49301: LD_VAR 0 17
49305: PUSH
49306: LD_INT 1
49308: ARRAY
49309: PPUSH
49310: CALL_OW 250
49314: PPUSH
49315: LD_VAR 0 17
49319: PUSH
49320: LD_INT 1
49322: ARRAY
49323: PPUSH
49324: CALL_OW 254
49328: PPUSH
49329: LD_INT 5
49331: PPUSH
49332: CALL_OW 272
49336: PUSH
49337: LD_VAR 0 17
49341: PUSH
49342: LD_INT 1
49344: ARRAY
49345: PPUSH
49346: CALL_OW 251
49350: PPUSH
49351: LD_VAR 0 17
49355: PUSH
49356: LD_INT 1
49358: ARRAY
49359: PPUSH
49360: CALL_OW 254
49364: PPUSH
49365: LD_INT 5
49367: PPUSH
49368: CALL_OW 273
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49377: LD_VAR 0 16
49381: PUSH
49382: LD_INT 1
49384: ARRAY
49385: PPUSH
49386: LD_VAR 0 16
49390: PUSH
49391: LD_INT 2
49393: ARRAY
49394: PPUSH
49395: CALL_OW 488
49399: IFFALSE 49430
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49401: LD_VAR 0 13
49405: PPUSH
49406: LD_VAR 0 16
49410: PUSH
49411: LD_INT 1
49413: ARRAY
49414: PPUSH
49415: LD_VAR 0 16
49419: PUSH
49420: LD_INT 2
49422: ARRAY
49423: PPUSH
49424: CALL_OW 111
// continue ;
49428: GO 48920
// end ; end ; r := GetDir ( tmp ) ;
49430: LD_ADDR_VAR 0 15
49434: PUSH
49435: LD_VAR 0 13
49439: PPUSH
49440: CALL_OW 254
49444: ST_TO_ADDR
// if r = 5 then
49445: LD_VAR 0 15
49449: PUSH
49450: LD_INT 5
49452: EQUAL
49453: IFFALSE 49463
// r := 0 ;
49455: LD_ADDR_VAR 0 15
49459: PUSH
49460: LD_INT 0
49462: ST_TO_ADDR
// for j = r to 5 do
49463: LD_ADDR_VAR 0 10
49467: PUSH
49468: DOUBLE
49469: LD_VAR 0 15
49473: DEC
49474: ST_TO_ADDR
49475: LD_INT 5
49477: PUSH
49478: FOR_TO
49479: IFFALSE 49593
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49481: LD_ADDR_VAR 0 11
49485: PUSH
49486: LD_VAR 0 13
49490: PPUSH
49491: CALL_OW 250
49495: PPUSH
49496: LD_VAR 0 10
49500: PPUSH
49501: LD_INT 2
49503: PPUSH
49504: CALL_OW 272
49508: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49509: LD_ADDR_VAR 0 12
49513: PUSH
49514: LD_VAR 0 13
49518: PPUSH
49519: CALL_OW 251
49523: PPUSH
49524: LD_VAR 0 10
49528: PPUSH
49529: LD_INT 2
49531: PPUSH
49532: CALL_OW 273
49536: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49537: LD_VAR 0 11
49541: PPUSH
49542: LD_VAR 0 12
49546: PPUSH
49547: CALL_OW 488
49551: PUSH
49552: LD_VAR 0 11
49556: PPUSH
49557: LD_VAR 0 12
49561: PPUSH
49562: CALL_OW 428
49566: NOT
49567: AND
49568: IFFALSE 49591
// begin ComMoveXY ( tmp , _x , _y ) ;
49570: LD_VAR 0 13
49574: PPUSH
49575: LD_VAR 0 11
49579: PPUSH
49580: LD_VAR 0 12
49584: PPUSH
49585: CALL_OW 111
// break ;
49589: GO 49593
// end ; end ;
49591: GO 49478
49593: POP
49594: POP
// end ; end ;
49595: GO 48920
49597: POP
49598: POP
// end ;
49599: LD_VAR 0 8
49603: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49604: LD_INT 0
49606: PPUSH
// result := true ;
49607: LD_ADDR_VAR 0 3
49611: PUSH
49612: LD_INT 1
49614: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49615: LD_VAR 0 2
49619: PUSH
49620: LD_INT 24
49622: DOUBLE
49623: EQUAL
49624: IFTRUE 49634
49626: LD_INT 33
49628: DOUBLE
49629: EQUAL
49630: IFTRUE 49634
49632: GO 49659
49634: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49635: LD_ADDR_VAR 0 3
49639: PUSH
49640: LD_INT 32
49642: PPUSH
49643: LD_VAR 0 1
49647: PPUSH
49648: CALL_OW 321
49652: PUSH
49653: LD_INT 2
49655: EQUAL
49656: ST_TO_ADDR
49657: GO 49975
49659: LD_INT 20
49661: DOUBLE
49662: EQUAL
49663: IFTRUE 49667
49665: GO 49692
49667: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49668: LD_ADDR_VAR 0 3
49672: PUSH
49673: LD_INT 6
49675: PPUSH
49676: LD_VAR 0 1
49680: PPUSH
49681: CALL_OW 321
49685: PUSH
49686: LD_INT 2
49688: EQUAL
49689: ST_TO_ADDR
49690: GO 49975
49692: LD_INT 22
49694: DOUBLE
49695: EQUAL
49696: IFTRUE 49706
49698: LD_INT 36
49700: DOUBLE
49701: EQUAL
49702: IFTRUE 49706
49704: GO 49731
49706: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49707: LD_ADDR_VAR 0 3
49711: PUSH
49712: LD_INT 15
49714: PPUSH
49715: LD_VAR 0 1
49719: PPUSH
49720: CALL_OW 321
49724: PUSH
49725: LD_INT 2
49727: EQUAL
49728: ST_TO_ADDR
49729: GO 49975
49731: LD_INT 30
49733: DOUBLE
49734: EQUAL
49735: IFTRUE 49739
49737: GO 49764
49739: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49740: LD_ADDR_VAR 0 3
49744: PUSH
49745: LD_INT 20
49747: PPUSH
49748: LD_VAR 0 1
49752: PPUSH
49753: CALL_OW 321
49757: PUSH
49758: LD_INT 2
49760: EQUAL
49761: ST_TO_ADDR
49762: GO 49975
49764: LD_INT 28
49766: DOUBLE
49767: EQUAL
49768: IFTRUE 49778
49770: LD_INT 21
49772: DOUBLE
49773: EQUAL
49774: IFTRUE 49778
49776: GO 49803
49778: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49779: LD_ADDR_VAR 0 3
49783: PUSH
49784: LD_INT 21
49786: PPUSH
49787: LD_VAR 0 1
49791: PPUSH
49792: CALL_OW 321
49796: PUSH
49797: LD_INT 2
49799: EQUAL
49800: ST_TO_ADDR
49801: GO 49975
49803: LD_INT 16
49805: DOUBLE
49806: EQUAL
49807: IFTRUE 49811
49809: GO 49836
49811: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49812: LD_ADDR_VAR 0 3
49816: PUSH
49817: LD_INT 84
49819: PPUSH
49820: LD_VAR 0 1
49824: PPUSH
49825: CALL_OW 321
49829: PUSH
49830: LD_INT 2
49832: EQUAL
49833: ST_TO_ADDR
49834: GO 49975
49836: LD_INT 19
49838: DOUBLE
49839: EQUAL
49840: IFTRUE 49850
49842: LD_INT 23
49844: DOUBLE
49845: EQUAL
49846: IFTRUE 49850
49848: GO 49875
49850: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49851: LD_ADDR_VAR 0 3
49855: PUSH
49856: LD_INT 83
49858: PPUSH
49859: LD_VAR 0 1
49863: PPUSH
49864: CALL_OW 321
49868: PUSH
49869: LD_INT 2
49871: EQUAL
49872: ST_TO_ADDR
49873: GO 49975
49875: LD_INT 17
49877: DOUBLE
49878: EQUAL
49879: IFTRUE 49883
49881: GO 49908
49883: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49884: LD_ADDR_VAR 0 3
49888: PUSH
49889: LD_INT 39
49891: PPUSH
49892: LD_VAR 0 1
49896: PPUSH
49897: CALL_OW 321
49901: PUSH
49902: LD_INT 2
49904: EQUAL
49905: ST_TO_ADDR
49906: GO 49975
49908: LD_INT 18
49910: DOUBLE
49911: EQUAL
49912: IFTRUE 49916
49914: GO 49941
49916: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49917: LD_ADDR_VAR 0 3
49921: PUSH
49922: LD_INT 40
49924: PPUSH
49925: LD_VAR 0 1
49929: PPUSH
49930: CALL_OW 321
49934: PUSH
49935: LD_INT 2
49937: EQUAL
49938: ST_TO_ADDR
49939: GO 49975
49941: LD_INT 27
49943: DOUBLE
49944: EQUAL
49945: IFTRUE 49949
49947: GO 49974
49949: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49950: LD_ADDR_VAR 0 3
49954: PUSH
49955: LD_INT 35
49957: PPUSH
49958: LD_VAR 0 1
49962: PPUSH
49963: CALL_OW 321
49967: PUSH
49968: LD_INT 2
49970: EQUAL
49971: ST_TO_ADDR
49972: GO 49975
49974: POP
// end ;
49975: LD_VAR 0 3
49979: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49980: LD_INT 0
49982: PPUSH
49983: PPUSH
49984: PPUSH
49985: PPUSH
49986: PPUSH
49987: PPUSH
49988: PPUSH
49989: PPUSH
49990: PPUSH
49991: PPUSH
49992: PPUSH
// result := false ;
49993: LD_ADDR_VAR 0 6
49997: PUSH
49998: LD_INT 0
50000: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50001: LD_VAR 0 1
50005: NOT
50006: PUSH
50007: LD_VAR 0 1
50011: PPUSH
50012: CALL_OW 266
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: IN
50027: NOT
50028: OR
50029: PUSH
50030: LD_VAR 0 2
50034: NOT
50035: OR
50036: PUSH
50037: LD_VAR 0 5
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: LD_INT 3
50053: PUSH
50054: LD_INT 4
50056: PUSH
50057: LD_INT 5
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: IN
50068: NOT
50069: OR
50070: PUSH
50071: LD_VAR 0 3
50075: PPUSH
50076: LD_VAR 0 4
50080: PPUSH
50081: CALL_OW 488
50085: NOT
50086: OR
50087: IFFALSE 50091
// exit ;
50089: GO 50827
// side := GetSide ( depot ) ;
50091: LD_ADDR_VAR 0 9
50095: PUSH
50096: LD_VAR 0 1
50100: PPUSH
50101: CALL_OW 255
50105: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50106: LD_VAR 0 9
50110: PPUSH
50111: LD_VAR 0 2
50115: PPUSH
50116: CALL 49604 0 2
50120: NOT
50121: IFFALSE 50125
// exit ;
50123: GO 50827
// pom := GetBase ( depot ) ;
50125: LD_ADDR_VAR 0 10
50129: PUSH
50130: LD_VAR 0 1
50134: PPUSH
50135: CALL_OW 274
50139: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50140: LD_ADDR_VAR 0 11
50144: PUSH
50145: LD_VAR 0 2
50149: PPUSH
50150: LD_VAR 0 1
50154: PPUSH
50155: CALL_OW 248
50159: PPUSH
50160: CALL_OW 450
50164: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50165: LD_VAR 0 10
50169: PPUSH
50170: LD_INT 1
50172: PPUSH
50173: CALL_OW 275
50177: PUSH
50178: LD_VAR 0 11
50182: PUSH
50183: LD_INT 1
50185: ARRAY
50186: GREATEREQUAL
50187: PUSH
50188: LD_VAR 0 10
50192: PPUSH
50193: LD_INT 2
50195: PPUSH
50196: CALL_OW 275
50200: PUSH
50201: LD_VAR 0 11
50205: PUSH
50206: LD_INT 2
50208: ARRAY
50209: GREATEREQUAL
50210: AND
50211: PUSH
50212: LD_VAR 0 10
50216: PPUSH
50217: LD_INT 3
50219: PPUSH
50220: CALL_OW 275
50224: PUSH
50225: LD_VAR 0 11
50229: PUSH
50230: LD_INT 3
50232: ARRAY
50233: GREATEREQUAL
50234: AND
50235: NOT
50236: IFFALSE 50240
// exit ;
50238: GO 50827
// if GetBType ( depot ) = b_depot then
50240: LD_VAR 0 1
50244: PPUSH
50245: CALL_OW 266
50249: PUSH
50250: LD_INT 0
50252: EQUAL
50253: IFFALSE 50265
// dist := 28 else
50255: LD_ADDR_VAR 0 14
50259: PUSH
50260: LD_INT 28
50262: ST_TO_ADDR
50263: GO 50273
// dist := 36 ;
50265: LD_ADDR_VAR 0 14
50269: PUSH
50270: LD_INT 36
50272: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50273: LD_VAR 0 1
50277: PPUSH
50278: LD_VAR 0 3
50282: PPUSH
50283: LD_VAR 0 4
50287: PPUSH
50288: CALL_OW 297
50292: PUSH
50293: LD_VAR 0 14
50297: GREATER
50298: IFFALSE 50302
// exit ;
50300: GO 50827
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50302: LD_ADDR_VAR 0 12
50306: PUSH
50307: LD_VAR 0 2
50311: PPUSH
50312: LD_VAR 0 3
50316: PPUSH
50317: LD_VAR 0 4
50321: PPUSH
50322: LD_VAR 0 5
50326: PPUSH
50327: LD_VAR 0 1
50331: PPUSH
50332: CALL_OW 248
50336: PPUSH
50337: LD_INT 0
50339: PPUSH
50340: CALL 50832 0 6
50344: ST_TO_ADDR
// if not hexes then
50345: LD_VAR 0 12
50349: NOT
50350: IFFALSE 50354
// exit ;
50352: GO 50827
// hex := GetHexInfo ( x , y ) ;
50354: LD_ADDR_VAR 0 15
50358: PUSH
50359: LD_VAR 0 3
50363: PPUSH
50364: LD_VAR 0 4
50368: PPUSH
50369: CALL_OW 546
50373: ST_TO_ADDR
// if hex [ 1 ] then
50374: LD_VAR 0 15
50378: PUSH
50379: LD_INT 1
50381: ARRAY
50382: IFFALSE 50386
// exit ;
50384: GO 50827
// height := hex [ 2 ] ;
50386: LD_ADDR_VAR 0 13
50390: PUSH
50391: LD_VAR 0 15
50395: PUSH
50396: LD_INT 2
50398: ARRAY
50399: ST_TO_ADDR
// for i = 1 to hexes do
50400: LD_ADDR_VAR 0 7
50404: PUSH
50405: DOUBLE
50406: LD_INT 1
50408: DEC
50409: ST_TO_ADDR
50410: LD_VAR 0 12
50414: PUSH
50415: FOR_TO
50416: IFFALSE 50746
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50418: LD_VAR 0 12
50422: PUSH
50423: LD_VAR 0 7
50427: ARRAY
50428: PUSH
50429: LD_INT 1
50431: ARRAY
50432: PPUSH
50433: LD_VAR 0 12
50437: PUSH
50438: LD_VAR 0 7
50442: ARRAY
50443: PUSH
50444: LD_INT 2
50446: ARRAY
50447: PPUSH
50448: CALL_OW 488
50452: NOT
50453: PUSH
50454: LD_VAR 0 12
50458: PUSH
50459: LD_VAR 0 7
50463: ARRAY
50464: PUSH
50465: LD_INT 1
50467: ARRAY
50468: PPUSH
50469: LD_VAR 0 12
50473: PUSH
50474: LD_VAR 0 7
50478: ARRAY
50479: PUSH
50480: LD_INT 2
50482: ARRAY
50483: PPUSH
50484: CALL_OW 428
50488: PUSH
50489: LD_INT 0
50491: GREATER
50492: OR
50493: PUSH
50494: LD_VAR 0 12
50498: PUSH
50499: LD_VAR 0 7
50503: ARRAY
50504: PUSH
50505: LD_INT 1
50507: ARRAY
50508: PPUSH
50509: LD_VAR 0 12
50513: PUSH
50514: LD_VAR 0 7
50518: ARRAY
50519: PUSH
50520: LD_INT 2
50522: ARRAY
50523: PPUSH
50524: CALL_OW 351
50528: OR
50529: IFFALSE 50535
// exit ;
50531: POP
50532: POP
50533: GO 50827
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50535: LD_ADDR_VAR 0 8
50539: PUSH
50540: LD_VAR 0 12
50544: PUSH
50545: LD_VAR 0 7
50549: ARRAY
50550: PUSH
50551: LD_INT 1
50553: ARRAY
50554: PPUSH
50555: LD_VAR 0 12
50559: PUSH
50560: LD_VAR 0 7
50564: ARRAY
50565: PUSH
50566: LD_INT 2
50568: ARRAY
50569: PPUSH
50570: CALL_OW 546
50574: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50575: LD_VAR 0 8
50579: PUSH
50580: LD_INT 1
50582: ARRAY
50583: PUSH
50584: LD_VAR 0 8
50588: PUSH
50589: LD_INT 2
50591: ARRAY
50592: PUSH
50593: LD_VAR 0 13
50597: PUSH
50598: LD_INT 2
50600: PLUS
50601: GREATER
50602: OR
50603: PUSH
50604: LD_VAR 0 8
50608: PUSH
50609: LD_INT 2
50611: ARRAY
50612: PUSH
50613: LD_VAR 0 13
50617: PUSH
50618: LD_INT 2
50620: MINUS
50621: LESS
50622: OR
50623: PUSH
50624: LD_VAR 0 8
50628: PUSH
50629: LD_INT 3
50631: ARRAY
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 8
50638: PUSH
50639: LD_INT 9
50641: PUSH
50642: LD_INT 10
50644: PUSH
50645: LD_INT 11
50647: PUSH
50648: LD_INT 12
50650: PUSH
50651: LD_INT 13
50653: PUSH
50654: LD_INT 16
50656: PUSH
50657: LD_INT 17
50659: PUSH
50660: LD_INT 18
50662: PUSH
50663: LD_INT 19
50665: PUSH
50666: LD_INT 20
50668: PUSH
50669: LD_INT 21
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: IN
50687: NOT
50688: OR
50689: PUSH
50690: LD_VAR 0 8
50694: PUSH
50695: LD_INT 5
50697: ARRAY
50698: NOT
50699: OR
50700: PUSH
50701: LD_VAR 0 8
50705: PUSH
50706: LD_INT 6
50708: ARRAY
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: LD_INT 7
50718: PUSH
50719: LD_INT 9
50721: PUSH
50722: LD_INT 10
50724: PUSH
50725: LD_INT 11
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: IN
50736: NOT
50737: OR
50738: IFFALSE 50744
// exit ;
50740: POP
50741: POP
50742: GO 50827
// end ;
50744: GO 50415
50746: POP
50747: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50748: LD_VAR 0 9
50752: PPUSH
50753: LD_VAR 0 3
50757: PPUSH
50758: LD_VAR 0 4
50762: PPUSH
50763: LD_INT 20
50765: PPUSH
50766: CALL 42779 0 4
50770: PUSH
50771: LD_INT 4
50773: ARRAY
50774: IFFALSE 50778
// exit ;
50776: GO 50827
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50778: LD_VAR 0 2
50782: PUSH
50783: LD_INT 29
50785: PUSH
50786: LD_INT 30
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: IN
50793: PUSH
50794: LD_VAR 0 3
50798: PPUSH
50799: LD_VAR 0 4
50803: PPUSH
50804: LD_VAR 0 9
50808: PPUSH
50809: CALL_OW 440
50813: NOT
50814: AND
50815: IFFALSE 50819
// exit ;
50817: GO 50827
// result := true ;
50819: LD_ADDR_VAR 0 6
50823: PUSH
50824: LD_INT 1
50826: ST_TO_ADDR
// end ;
50827: LD_VAR 0 6
50831: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50832: LD_INT 0
50834: PPUSH
50835: PPUSH
50836: PPUSH
50837: PPUSH
50838: PPUSH
50839: PPUSH
50840: PPUSH
50841: PPUSH
50842: PPUSH
50843: PPUSH
50844: PPUSH
50845: PPUSH
50846: PPUSH
50847: PPUSH
50848: PPUSH
50849: PPUSH
50850: PPUSH
50851: PPUSH
50852: PPUSH
50853: PPUSH
50854: PPUSH
50855: PPUSH
50856: PPUSH
50857: PPUSH
50858: PPUSH
50859: PPUSH
50860: PPUSH
50861: PPUSH
50862: PPUSH
50863: PPUSH
50864: PPUSH
50865: PPUSH
50866: PPUSH
50867: PPUSH
50868: PPUSH
50869: PPUSH
50870: PPUSH
50871: PPUSH
50872: PPUSH
50873: PPUSH
50874: PPUSH
50875: PPUSH
50876: PPUSH
50877: PPUSH
50878: PPUSH
50879: PPUSH
50880: PPUSH
50881: PPUSH
50882: PPUSH
50883: PPUSH
50884: PPUSH
50885: PPUSH
50886: PPUSH
50887: PPUSH
50888: PPUSH
50889: PPUSH
50890: PPUSH
50891: PPUSH
// result = [ ] ;
50892: LD_ADDR_VAR 0 7
50896: PUSH
50897: EMPTY
50898: ST_TO_ADDR
// temp_list = [ ] ;
50899: LD_ADDR_VAR 0 9
50903: PUSH
50904: EMPTY
50905: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50906: LD_VAR 0 4
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: LD_INT 3
50922: PUSH
50923: LD_INT 4
50925: PUSH
50926: LD_INT 5
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: IN
50937: NOT
50938: PUSH
50939: LD_VAR 0 1
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: IN
50954: PUSH
50955: LD_VAR 0 5
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: LD_INT 3
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: LIST
50973: IN
50974: NOT
50975: AND
50976: OR
50977: IFFALSE 50981
// exit ;
50979: GO 69372
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50981: LD_VAR 0 1
50985: PUSH
50986: LD_INT 6
50988: PUSH
50989: LD_INT 7
50991: PUSH
50992: LD_INT 8
50994: PUSH
50995: LD_INT 13
50997: PUSH
50998: LD_INT 12
51000: PUSH
51001: LD_INT 15
51003: PUSH
51004: LD_INT 11
51006: PUSH
51007: LD_INT 14
51009: PUSH
51010: LD_INT 10
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: IN
51024: IFFALSE 51034
// btype = b_lab ;
51026: LD_ADDR_VAR 0 1
51030: PUSH
51031: LD_INT 6
51033: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51034: LD_VAR 0 6
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: LIST
51052: IN
51053: NOT
51054: PUSH
51055: LD_VAR 0 1
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: LD_INT 3
51071: PUSH
51072: LD_INT 6
51074: PUSH
51075: LD_INT 36
51077: PUSH
51078: LD_INT 4
51080: PUSH
51081: LD_INT 5
51083: PUSH
51084: LD_INT 31
51086: PUSH
51087: LD_INT 32
51089: PUSH
51090: LD_INT 33
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: IN
51106: NOT
51107: PUSH
51108: LD_VAR 0 6
51112: PUSH
51113: LD_INT 1
51115: EQUAL
51116: AND
51117: OR
51118: PUSH
51119: LD_VAR 0 1
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: IN
51134: NOT
51135: PUSH
51136: LD_VAR 0 6
51140: PUSH
51141: LD_INT 2
51143: EQUAL
51144: AND
51145: OR
51146: IFFALSE 51156
// mode = 0 ;
51148: LD_ADDR_VAR 0 6
51152: PUSH
51153: LD_INT 0
51155: ST_TO_ADDR
// case mode of 0 :
51156: LD_VAR 0 6
51160: PUSH
51161: LD_INT 0
51163: DOUBLE
51164: EQUAL
51165: IFTRUE 51169
51167: GO 62622
51169: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51170: LD_ADDR_VAR 0 11
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51363: LD_ADDR_VAR 0 12
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 3
51520: NEG
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 3
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51559: LD_ADDR_VAR 0 13
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 3
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 3
51718: NEG
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 3
51730: NEG
51731: PUSH
51732: LD_INT 3
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51758: LD_ADDR_VAR 0 14
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 3
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 3
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51954: LD_ADDR_VAR 0 15
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52147: LD_ADDR_VAR 0 16
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: LD_INT 3
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: LD_INT 3
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52340: LD_ADDR_VAR 0 17
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: LD_INT 2
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52570: LD_ADDR_VAR 0 18
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 2
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52800: LD_ADDR_VAR 0 19
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53030: LD_ADDR_VAR 0 20
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53260: LD_ADDR_VAR 0 21
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53490: LD_ADDR_VAR 0 22
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: NEG
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53720: LD_ADDR_VAR 0 23
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: LD_INT 2
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: LD_INT 3
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 3
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54000: LD_ADDR_VAR 0 24
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 3
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54276: LD_ADDR_VAR 0 25
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: LD_INT 2
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 2
54452: NEG
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 3
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 3
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: LD_INT 3
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 3
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54550: LD_ADDR_VAR 0 26
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: LD_INT 2
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 3
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 3
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54826: LD_ADDR_VAR 0 27
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 2
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 3
55059: NEG
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55106: LD_ADDR_VAR 0 28
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 3
55353: NEG
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55388: LD_ADDR_VAR 0 29
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: LD_INT 3
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 3
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 3
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 3
55632: NEG
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55667: LD_ADDR_VAR 0 30
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 3
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 3
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: LD_INT 3
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 3
55910: NEG
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55945: LD_ADDR_VAR 0 31
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: LD_INT 3
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 3
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: LD_INT 3
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 3
56188: NEG
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56223: LD_ADDR_VAR 0 32
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: LD_INT 2
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: LD_INT 3
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 3
56435: PUSH
56436: LD_INT 2
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: LD_INT 3
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 3
56466: NEG
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56501: LD_ADDR_VAR 0 33
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: LD_INT 2
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: LD_INT 3
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 3
56745: NEG
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56780: LD_ADDR_VAR 0 34
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: LD_INT 3
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 3
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: LD_INT 3
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 3
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57060: LD_ADDR_VAR 0 35
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57172: LD_ADDR_VAR 0 36
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57284: LD_ADDR_VAR 0 37
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57396: LD_ADDR_VAR 0 38
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57508: LD_ADDR_VAR 0 39
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: LD_INT 2
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57620: LD_ADDR_VAR 0 40
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57732: LD_ADDR_VAR 0 41
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: LD_INT 3
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 3
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 3
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 3
57975: PUSH
57976: LD_INT 3
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: LD_INT 3
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 3
58006: NEG
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 3
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 3
58029: NEG
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 3
58041: NEG
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58082: LD_ADDR_VAR 0 42
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 2
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: LD_INT 2
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: LD_INT 2
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: LD_INT 3
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 3
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: LD_INT 2
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 3
58328: PUSH
58329: LD_INT 3
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 3
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: NEG
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 3
58391: NEG
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58432: LD_ADDR_VAR 0 43
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 2
58609: NEG
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: LD_INT 3
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 3
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 3
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 3
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: LD_INT 3
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 3
58728: NEG
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 3
58739: NEG
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58780: LD_ADDR_VAR 0 44
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 1
58849: NEG
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 2
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: LD_INT 2
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: LD_INT 2
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: NEG
58971: PUSH
58972: LD_INT 3
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 3
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 3
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 3
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: NEG
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 3
59065: NEG
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: LD_INT 2
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 3
59089: NEG
59090: PUSH
59091: LD_INT 3
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59130: LD_ADDR_VAR 0 45
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 2
59296: NEG
59297: PUSH
59298: LD_INT 1
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: LD_INT 3
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: LD_INT 3
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 3
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: LD_INT 2
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: PUSH
59377: LD_INT 3
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: LD_INT 3
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 3
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 3
59427: NEG
59428: PUSH
59429: LD_INT 2
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 3
59439: NEG
59440: PUSH
59441: LD_INT 3
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59480: LD_ADDR_VAR 0 46
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 2
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 2
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: NEG
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 3
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: LD_INT 3
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: LD_INT 2
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 3
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 3
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 3
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: NEG
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 3
59787: NEG
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59828: LD_ADDR_VAR 0 47
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: LD_INT 2
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59979: LD_ADDR_VAR 0 48
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60126: LD_ADDR_VAR 0 49
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 2
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60270: LD_ADDR_VAR 0 50
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60414: LD_ADDR_VAR 0 51
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 2
60526: NEG
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: NEG
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60561: LD_ADDR_VAR 0 52
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: LD_INT 2
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60712: LD_ADDR_VAR 0 53
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: LD_INT 0
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: LD_INT 2
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: LD_INT 2
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 2
60888: NEG
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 2
60911: NEG
60912: PUSH
60913: LD_INT 2
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60942: LD_ADDR_VAR 0 54
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: LD_INT 2
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: LD_INT 2
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: LD_INT 2
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 2
61129: NEG
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 2
61141: NEG
61142: PUSH
61143: LD_INT 2
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61172: LD_ADDR_VAR 0 55
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: LD_INT 1
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: LD_INT 1
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: LD_INT 2
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 2
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: LD_INT 2
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 2
61359: NEG
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PUSH
61373: LD_INT 2
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61402: LD_ADDR_VAR 0 56
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 2
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: LD_INT 2
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: LD_INT 2
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: NEG
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: NEG
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61632: LD_ADDR_VAR 0 57
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: LD_INT 1
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 2
61767: PUSH
61768: LD_INT 2
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 2
61808: NEG
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 2
61819: NEG
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: LD_INT 2
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61862: LD_ADDR_VAR 0 58
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 1
61920: NEG
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 2
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 2
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: LD_INT 2
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 2
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 2
62038: NEG
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62092: LD_ADDR_VAR 0 59
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: NEG
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62180: LD_ADDR_VAR 0 60
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62268: LD_ADDR_VAR 0 61
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 1
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62356: LD_ADDR_VAR 0 62
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 1
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62444: LD_ADDR_VAR 0 63
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: LD_INT 1
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: LD_INT 0
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: NEG
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: NEG
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62532: LD_ADDR_VAR 0 64
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 1
62601: NEG
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: ST_TO_ADDR
// end ; 1 :
62620: GO 68517
62622: LD_INT 1
62624: DOUBLE
62625: EQUAL
62626: IFTRUE 62630
62628: GO 65253
62630: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62631: LD_ADDR_VAR 0 11
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: PUSH
62640: LD_INT 3
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: LD_INT 3
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: LIST
62674: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62675: LD_ADDR_VAR 0 12
62679: PUSH
62680: LD_INT 2
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 3
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 3
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: LIST
62715: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62716: LD_ADDR_VAR 0 13
62720: PUSH
62721: LD_INT 3
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 3
62733: PUSH
62734: LD_INT 3
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: LD_INT 3
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62756: LD_ADDR_VAR 0 14
62760: PUSH
62761: LD_INT 1
62763: PUSH
62764: LD_INT 3
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: LD_INT 3
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: LIST
62796: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62797: LD_ADDR_VAR 0 15
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 3
62815: NEG
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 3
62826: NEG
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: LIST
62840: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62841: LD_ADDR_VAR 0 16
62845: PUSH
62846: LD_INT 2
62848: NEG
62849: PUSH
62850: LD_INT 3
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 3
62860: NEG
62861: PUSH
62862: LD_INT 2
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 3
62872: NEG
62873: PUSH
62874: LD_INT 3
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: LIST
62886: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62887: LD_ADDR_VAR 0 17
62891: PUSH
62892: LD_INT 1
62894: NEG
62895: PUSH
62896: LD_INT 3
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: LD_INT 3
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: LD_INT 2
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: LIST
62930: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62931: LD_ADDR_VAR 0 18
62935: PUSH
62936: LD_INT 2
62938: PUSH
62939: LD_INT 1
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 3
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: LIST
62971: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62972: LD_ADDR_VAR 0 19
62976: PUSH
62977: LD_INT 3
62979: PUSH
62980: LD_INT 2
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 3
62989: PUSH
62990: LD_INT 3
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 2
62999: PUSH
63000: LD_INT 3
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63012: LD_ADDR_VAR 0 20
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: LD_INT 3
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 3
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: LD_INT 2
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: LIST
63052: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63053: LD_ADDR_VAR 0 21
63057: PUSH
63058: LD_INT 2
63060: NEG
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 3
63071: NEG
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 3
63082: NEG
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: LIST
63096: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63097: LD_ADDR_VAR 0 22
63101: PUSH
63102: LD_INT 2
63104: NEG
63105: PUSH
63106: LD_INT 3
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 3
63116: NEG
63117: PUSH
63118: LD_INT 2
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 3
63128: NEG
63129: PUSH
63130: LD_INT 3
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: LIST
63142: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63143: LD_ADDR_VAR 0 23
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: LD_INT 3
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 4
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: PUSH
63174: LD_INT 3
63176: NEG
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: LIST
63186: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63187: LD_ADDR_VAR 0 24
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: PUSH
63205: LD_INT 1
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 4
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: LIST
63227: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63228: LD_ADDR_VAR 0 25
63232: PUSH
63233: LD_INT 3
63235: PUSH
63236: LD_INT 3
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 4
63245: PUSH
63246: LD_INT 3
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 3
63255: PUSH
63256: LD_INT 4
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: LIST
63267: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63268: LD_ADDR_VAR 0 26
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: LD_INT 3
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: PUSH
63286: LD_INT 4
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: LD_INT 3
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: LIST
63308: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63309: LD_ADDR_VAR 0 27
63313: PUSH
63314: LD_INT 3
63316: NEG
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 3
63327: NEG
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 4
63338: NEG
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: LIST
63352: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63353: LD_ADDR_VAR 0 28
63357: PUSH
63358: LD_INT 3
63360: NEG
63361: PUSH
63362: LD_INT 3
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: LD_INT 4
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 4
63384: NEG
63385: PUSH
63386: LD_INT 3
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63399: LD_ADDR_VAR 0 29
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: LD_INT 3
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 3
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: LD_INT 2
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: LD_INT 4
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 4
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: LD_INT 3
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: LD_INT 5
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: LD_INT 5
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: LD_INT 4
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: LD_INT 6
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 6
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: PUSH
63532: LD_INT 5
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63554: LD_ADDR_VAR 0 30
63558: PUSH
63559: LD_INT 2
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 3
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 3
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 3
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 4
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 4
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 5
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 5
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 5
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 6
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 6
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63697: LD_ADDR_VAR 0 31
63701: PUSH
63702: LD_INT 3
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 3
63714: PUSH
63715: LD_INT 3
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 2
63724: PUSH
63725: LD_INT 3
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 4
63734: PUSH
63735: LD_INT 3
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 4
63744: PUSH
63745: LD_INT 4
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 3
63754: PUSH
63755: LD_INT 4
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 5
63764: PUSH
63765: LD_INT 4
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 5
63774: PUSH
63775: LD_INT 5
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 4
63784: PUSH
63785: LD_INT 5
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 6
63794: PUSH
63795: LD_INT 5
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 6
63804: PUSH
63805: LD_INT 6
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 5
63814: PUSH
63815: LD_INT 6
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63836: LD_ADDR_VAR 0 32
63840: PUSH
63841: LD_INT 1
63843: PUSH
63844: LD_INT 3
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: LD_INT 3
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 1
63874: PUSH
63875: LD_INT 4
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: LD_INT 4
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: LD_INT 3
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: LD_INT 5
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: LD_INT 5
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: LD_INT 4
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 1
63936: PUSH
63937: LD_INT 6
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: LD_INT 6
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 1
63956: NEG
63957: PUSH
63958: LD_INT 5
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63979: LD_ADDR_VAR 0 33
63983: PUSH
63984: LD_INT 2
63986: NEG
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 3
63997: NEG
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 3
64008: NEG
64009: PUSH
64010: LD_INT 1
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 3
64020: NEG
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 4
64031: NEG
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 4
64042: NEG
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 4
64054: NEG
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 5
64065: NEG
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 5
64076: NEG
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 5
64088: NEG
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 6
64099: NEG
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 6
64110: NEG
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64134: LD_ADDR_VAR 0 34
64138: PUSH
64139: LD_INT 2
64141: NEG
64142: PUSH
64143: LD_INT 3
64145: NEG
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 3
64153: NEG
64154: PUSH
64155: LD_INT 2
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 3
64165: NEG
64166: PUSH
64167: LD_INT 3
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 3
64177: NEG
64178: PUSH
64179: LD_INT 4
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 4
64189: NEG
64190: PUSH
64191: LD_INT 3
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 4
64201: NEG
64202: PUSH
64203: LD_INT 4
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 4
64213: NEG
64214: PUSH
64215: LD_INT 5
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 5
64225: NEG
64226: PUSH
64227: LD_INT 4
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 5
64237: NEG
64238: PUSH
64239: LD_INT 5
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 5
64249: NEG
64250: PUSH
64251: LD_INT 6
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 6
64261: NEG
64262: PUSH
64263: LD_INT 5
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 6
64273: NEG
64274: PUSH
64275: LD_INT 6
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64297: LD_ADDR_VAR 0 41
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: LD_INT 2
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: LD_INT 3
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: LD_INT 2
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: LIST
64340: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64341: LD_ADDR_VAR 0 42
64345: PUSH
64346: LD_INT 2
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 2
64358: PUSH
64359: LD_INT 1
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 3
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: LIST
64381: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64382: LD_ADDR_VAR 0 43
64386: PUSH
64387: LD_INT 2
64389: PUSH
64390: LD_INT 2
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 3
64399: PUSH
64400: LD_INT 2
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 2
64409: PUSH
64410: LD_INT 3
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: LIST
64421: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64422: LD_ADDR_VAR 0 44
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 2
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: LD_INT 3
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: NEG
64450: PUSH
64451: LD_INT 2
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: LIST
64462: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64463: LD_ADDR_VAR 0 45
64467: PUSH
64468: LD_INT 2
64470: NEG
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 2
64481: NEG
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 3
64492: NEG
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: LIST
64506: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64507: LD_ADDR_VAR 0 46
64511: PUSH
64512: LD_INT 2
64514: NEG
64515: PUSH
64516: LD_INT 2
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 2
64526: NEG
64527: PUSH
64528: LD_INT 3
64530: NEG
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 3
64538: NEG
64539: PUSH
64540: LD_INT 2
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64553: LD_ADDR_VAR 0 47
64557: PUSH
64558: LD_INT 2
64560: NEG
64561: PUSH
64562: LD_INT 3
64564: NEG
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: LD_INT 3
64576: NEG
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64586: LD_ADDR_VAR 0 48
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: LD_INT 2
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 2
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64617: LD_ADDR_VAR 0 49
64621: PUSH
64622: LD_INT 3
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 3
64634: PUSH
64635: LD_INT 2
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64646: LD_ADDR_VAR 0 50
64650: PUSH
64651: LD_INT 2
64653: PUSH
64654: LD_INT 3
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: LD_INT 3
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64675: LD_ADDR_VAR 0 51
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: LD_INT 2
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 2
64693: NEG
64694: PUSH
64695: LD_INT 1
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64706: LD_ADDR_VAR 0 52
64710: PUSH
64711: LD_INT 3
64713: NEG
64714: PUSH
64715: LD_INT 1
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 3
64725: NEG
64726: PUSH
64727: LD_INT 2
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64739: LD_ADDR_VAR 0 53
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: LD_INT 3
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: LD_INT 3
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: LD_INT 2
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: LIST
64782: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64783: LD_ADDR_VAR 0 54
64787: PUSH
64788: LD_INT 2
64790: PUSH
64791: LD_INT 1
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 3
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 3
64811: PUSH
64812: LD_INT 1
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: LIST
64823: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64824: LD_ADDR_VAR 0 55
64828: PUSH
64829: LD_INT 3
64831: PUSH
64832: LD_INT 2
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: LD_INT 3
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: LD_INT 3
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64864: LD_ADDR_VAR 0 56
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: LD_INT 3
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 0
64881: PUSH
64882: LD_INT 3
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: LD_INT 2
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: LIST
64904: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64905: LD_ADDR_VAR 0 57
64909: PUSH
64910: LD_INT 2
64912: NEG
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 3
64923: NEG
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 3
64934: NEG
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: LIST
64948: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64949: LD_ADDR_VAR 0 58
64953: PUSH
64954: LD_INT 2
64956: NEG
64957: PUSH
64958: LD_INT 3
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 3
64968: NEG
64969: PUSH
64970: LD_INT 2
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 3
64980: NEG
64981: PUSH
64982: LD_INT 3
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: LIST
64994: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64995: LD_ADDR_VAR 0 59
64999: PUSH
65000: LD_INT 1
65002: NEG
65003: PUSH
65004: LD_INT 2
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 2
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: LD_INT 1
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: LIST
65038: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65039: LD_ADDR_VAR 0 60
65043: PUSH
65044: LD_INT 1
65046: PUSH
65047: LD_INT 1
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 2
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 2
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: LIST
65079: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65080: LD_ADDR_VAR 0 61
65084: PUSH
65085: LD_INT 2
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 2
65097: PUSH
65098: LD_INT 2
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65120: LD_ADDR_VAR 0 62
65124: PUSH
65125: LD_INT 1
65127: PUSH
65128: LD_INT 2
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 0
65137: PUSH
65138: LD_INT 2
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 1
65147: NEG
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: LIST
65160: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65161: LD_ADDR_VAR 0 63
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: LD_INT 1
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 2
65179: NEG
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PUSH
65192: LD_INT 1
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65205: LD_ADDR_VAR 0 64
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: LD_INT 2
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 2
65224: NEG
65225: PUSH
65226: LD_INT 1
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 2
65236: NEG
65237: PUSH
65238: LD_INT 2
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: LIST
65250: ST_TO_ADDR
// end ; 2 :
65251: GO 68517
65253: LD_INT 2
65255: DOUBLE
65256: EQUAL
65257: IFTRUE 65261
65259: GO 68516
65261: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65262: LD_ADDR_VAR 0 29
65266: PUSH
65267: LD_INT 4
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 4
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 5
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 5
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 4
65310: PUSH
65311: LD_INT 1
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 3
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 3
65341: PUSH
65342: LD_INT 2
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 5
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 3
65362: PUSH
65363: LD_INT 3
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 3
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 4
65382: PUSH
65383: LD_INT 3
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 4
65392: PUSH
65393: LD_INT 4
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 3
65402: PUSH
65403: LD_INT 4
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 2
65412: PUSH
65413: LD_INT 3
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 2
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 4
65432: PUSH
65433: LD_INT 2
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 2
65442: PUSH
65443: LD_INT 4
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 0
65452: PUSH
65453: LD_INT 4
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: LD_INT 3
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: LD_INT 4
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 1
65482: PUSH
65483: LD_INT 5
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 0
65492: PUSH
65493: LD_INT 5
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 1
65502: NEG
65503: PUSH
65504: LD_INT 4
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: LD_INT 3
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 2
65524: PUSH
65525: LD_INT 5
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 2
65534: NEG
65535: PUSH
65536: LD_INT 3
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 3
65545: NEG
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 3
65556: NEG
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 2
65568: NEG
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 2
65579: NEG
65580: PUSH
65581: LD_INT 1
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 3
65590: NEG
65591: PUSH
65592: LD_INT 1
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 4
65601: NEG
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 4
65612: NEG
65613: PUSH
65614: LD_INT 1
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 4
65624: NEG
65625: PUSH
65626: LD_INT 2
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 2
65636: NEG
65637: PUSH
65638: LD_INT 2
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 4
65647: NEG
65648: PUSH
65649: LD_INT 4
65651: NEG
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 4
65659: NEG
65660: PUSH
65661: LD_INT 5
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 3
65671: NEG
65672: PUSH
65673: LD_INT 4
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 3
65683: NEG
65684: PUSH
65685: LD_INT 3
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 4
65695: NEG
65696: PUSH
65697: LD_INT 3
65699: NEG
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 5
65707: NEG
65708: PUSH
65709: LD_INT 4
65711: NEG
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 5
65719: NEG
65720: PUSH
65721: LD_INT 5
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 3
65731: NEG
65732: PUSH
65733: LD_INT 5
65735: NEG
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 5
65743: NEG
65744: PUSH
65745: LD_INT 3
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65800: LD_ADDR_VAR 0 30
65804: PUSH
65805: LD_INT 4
65807: PUSH
65808: LD_INT 4
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 4
65817: PUSH
65818: LD_INT 3
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 5
65827: PUSH
65828: LD_INT 4
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 5
65837: PUSH
65838: LD_INT 5
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 4
65847: PUSH
65848: LD_INT 5
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 3
65857: PUSH
65858: LD_INT 4
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 3
65867: PUSH
65868: LD_INT 3
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 5
65877: PUSH
65878: LD_INT 3
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: LD_INT 5
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: LD_INT 3
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: LD_INT 2
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 1
65917: PUSH
65918: LD_INT 3
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 1
65927: PUSH
65928: LD_INT 4
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 0
65937: PUSH
65938: LD_INT 4
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 1
65947: NEG
65948: PUSH
65949: LD_INT 3
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 1
65958: NEG
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 2
65969: PUSH
65970: LD_INT 4
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 2
65979: NEG
65980: PUSH
65981: LD_INT 2
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 4
65990: NEG
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 4
66001: NEG
66002: PUSH
66003: LD_INT 1
66005: NEG
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 3
66013: NEG
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 3
66024: NEG
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 4
66035: NEG
66036: PUSH
66037: LD_INT 1
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 5
66046: NEG
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 5
66057: NEG
66058: PUSH
66059: LD_INT 1
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 5
66069: NEG
66070: PUSH
66071: LD_INT 2
66073: NEG
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 3
66081: NEG
66082: PUSH
66083: LD_INT 2
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 3
66092: NEG
66093: PUSH
66094: LD_INT 3
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 3
66104: NEG
66105: PUSH
66106: LD_INT 4
66108: NEG
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 2
66116: NEG
66117: PUSH
66118: LD_INT 3
66120: NEG
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 2
66128: NEG
66129: PUSH
66130: LD_INT 2
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 3
66140: NEG
66141: PUSH
66142: LD_INT 2
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 4
66152: NEG
66153: PUSH
66154: LD_INT 3
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 4
66164: NEG
66165: PUSH
66166: LD_INT 4
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 2
66176: NEG
66177: PUSH
66178: LD_INT 4
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 4
66188: NEG
66189: PUSH
66190: LD_INT 2
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: LD_INT 4
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 5
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: PUSH
66223: LD_INT 4
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: PUSH
66234: LD_INT 3
66236: NEG
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 0
66244: PUSH
66245: LD_INT 3
66247: NEG
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 1
66255: NEG
66256: PUSH
66257: LD_INT 4
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: LD_INT 5
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 2
66279: PUSH
66280: LD_INT 3
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 2
66290: NEG
66291: PUSH
66292: LD_INT 5
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66347: LD_ADDR_VAR 0 31
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: LD_INT 4
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 0
66364: PUSH
66365: LD_INT 3
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 1
66374: PUSH
66375: LD_INT 4
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 1
66384: PUSH
66385: LD_INT 5
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 0
66394: PUSH
66395: LD_INT 5
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 1
66404: NEG
66405: PUSH
66406: LD_INT 4
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 1
66415: NEG
66416: PUSH
66417: LD_INT 3
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 2
66426: PUSH
66427: LD_INT 5
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 2
66436: NEG
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 3
66447: NEG
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 3
66458: NEG
66459: PUSH
66460: LD_INT 1
66462: NEG
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 2
66470: NEG
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 3
66492: NEG
66493: PUSH
66494: LD_INT 1
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 4
66503: NEG
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 4
66514: NEG
66515: PUSH
66516: LD_INT 1
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 4
66526: NEG
66527: PUSH
66528: LD_INT 2
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 2
66538: NEG
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 4
66549: NEG
66550: PUSH
66551: LD_INT 4
66553: NEG
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 4
66561: NEG
66562: PUSH
66563: LD_INT 5
66565: NEG
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 3
66573: NEG
66574: PUSH
66575: LD_INT 4
66577: NEG
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 3
66585: NEG
66586: PUSH
66587: LD_INT 3
66589: NEG
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 4
66597: NEG
66598: PUSH
66599: LD_INT 3
66601: NEG
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 5
66609: NEG
66610: PUSH
66611: LD_INT 4
66613: NEG
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 5
66621: NEG
66622: PUSH
66623: LD_INT 5
66625: NEG
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 3
66633: NEG
66634: PUSH
66635: LD_INT 5
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 5
66645: NEG
66646: PUSH
66647: LD_INT 3
66649: NEG
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: LD_INT 3
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 0
66668: PUSH
66669: LD_INT 4
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 1
66679: PUSH
66680: LD_INT 3
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 1
66690: PUSH
66691: LD_INT 2
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 0
66701: PUSH
66702: LD_INT 2
66704: NEG
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: LD_INT 3
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: NEG
66725: PUSH
66726: LD_INT 4
66728: NEG
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 2
66736: PUSH
66737: LD_INT 2
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 2
66747: NEG
66748: PUSH
66749: LD_INT 4
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 4
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 4
66769: PUSH
66770: LD_INT 1
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 5
66780: PUSH
66781: LD_INT 0
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 5
66790: PUSH
66791: LD_INT 1
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 4
66800: PUSH
66801: LD_INT 1
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 3
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 3
66820: PUSH
66821: LD_INT 1
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 3
66831: PUSH
66832: LD_INT 2
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 5
66842: PUSH
66843: LD_INT 2
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66897: LD_ADDR_VAR 0 32
66901: PUSH
66902: LD_INT 4
66904: NEG
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 4
66915: NEG
66916: PUSH
66917: LD_INT 1
66919: NEG
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 3
66927: NEG
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 3
66938: NEG
66939: PUSH
66940: LD_INT 1
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 4
66949: NEG
66950: PUSH
66951: LD_INT 1
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 5
66960: NEG
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 5
66971: NEG
66972: PUSH
66973: LD_INT 1
66975: NEG
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 5
66983: NEG
66984: PUSH
66985: LD_INT 2
66987: NEG
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 3
66995: NEG
66996: PUSH
66997: LD_INT 2
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 3
67006: NEG
67007: PUSH
67008: LD_INT 3
67010: NEG
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 3
67018: NEG
67019: PUSH
67020: LD_INT 4
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 2
67030: NEG
67031: PUSH
67032: LD_INT 3
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 2
67042: NEG
67043: PUSH
67044: LD_INT 2
67046: NEG
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 3
67054: NEG
67055: PUSH
67056: LD_INT 2
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 4
67066: NEG
67067: PUSH
67068: LD_INT 3
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 4
67078: NEG
67079: PUSH
67080: LD_INT 4
67082: NEG
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 2
67090: NEG
67091: PUSH
67092: LD_INT 4
67094: NEG
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 4
67102: NEG
67103: PUSH
67104: LD_INT 2
67106: NEG
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 0
67114: PUSH
67115: LD_INT 4
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: LD_INT 5
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: LD_INT 4
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: LD_INT 3
67150: NEG
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 0
67158: PUSH
67159: LD_INT 3
67161: NEG
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 1
67169: NEG
67170: PUSH
67171: LD_INT 4
67173: NEG
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 1
67181: NEG
67182: PUSH
67183: LD_INT 5
67185: NEG
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: LD_INT 3
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 2
67204: NEG
67205: PUSH
67206: LD_INT 5
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 3
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 3
67226: PUSH
67227: LD_INT 1
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 4
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 4
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 3
67257: PUSH
67258: LD_INT 1
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 2
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 2
67277: PUSH
67278: LD_INT 1
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 2
67288: PUSH
67289: LD_INT 2
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 4
67299: PUSH
67300: LD_INT 2
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 4
67309: PUSH
67310: LD_INT 4
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 4
67319: PUSH
67320: LD_INT 3
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 5
67329: PUSH
67330: LD_INT 4
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 5
67339: PUSH
67340: LD_INT 5
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 4
67349: PUSH
67350: LD_INT 5
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 3
67359: PUSH
67360: LD_INT 4
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: LD_INT 3
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 5
67379: PUSH
67380: LD_INT 3
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 3
67389: PUSH
67390: LD_INT 5
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67444: LD_ADDR_VAR 0 33
67448: PUSH
67449: LD_INT 4
67451: NEG
67452: PUSH
67453: LD_INT 4
67455: NEG
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 4
67463: NEG
67464: PUSH
67465: LD_INT 5
67467: NEG
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 3
67475: NEG
67476: PUSH
67477: LD_INT 4
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 3
67487: NEG
67488: PUSH
67489: LD_INT 3
67491: NEG
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 4
67499: NEG
67500: PUSH
67501: LD_INT 3
67503: NEG
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 5
67511: NEG
67512: PUSH
67513: LD_INT 4
67515: NEG
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 5
67523: NEG
67524: PUSH
67525: LD_INT 5
67527: NEG
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 3
67535: NEG
67536: PUSH
67537: LD_INT 5
67539: NEG
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 5
67547: NEG
67548: PUSH
67549: LD_INT 3
67551: NEG
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: LD_INT 3
67562: NEG
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: LD_INT 4
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 1
67581: PUSH
67582: LD_INT 3
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 1
67592: PUSH
67593: LD_INT 2
67595: NEG
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_INT 2
67606: NEG
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 1
67614: NEG
67615: PUSH
67616: LD_INT 3
67618: NEG
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 1
67626: NEG
67627: PUSH
67628: LD_INT 4
67630: NEG
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 2
67638: PUSH
67639: LD_INT 2
67641: NEG
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 2
67649: NEG
67650: PUSH
67651: LD_INT 4
67653: NEG
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 4
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 4
67671: PUSH
67672: LD_INT 1
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 5
67682: PUSH
67683: LD_INT 0
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 5
67692: PUSH
67693: LD_INT 1
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 4
67702: PUSH
67703: LD_INT 1
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 3
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 3
67722: PUSH
67723: LD_INT 1
67725: NEG
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 3
67733: PUSH
67734: LD_INT 2
67736: NEG
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 5
67744: PUSH
67745: LD_INT 2
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 3
67754: PUSH
67755: LD_INT 3
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 3
67764: PUSH
67765: LD_INT 2
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 4
67774: PUSH
67775: LD_INT 3
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 4
67784: PUSH
67785: LD_INT 4
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 3
67794: PUSH
67795: LD_INT 4
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 2
67804: PUSH
67805: LD_INT 3
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 2
67814: PUSH
67815: LD_INT 2
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 4
67824: PUSH
67825: LD_INT 2
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 2
67834: PUSH
67835: LD_INT 4
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 0
67844: PUSH
67845: LD_INT 4
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 0
67854: PUSH
67855: LD_INT 3
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: LD_INT 4
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 1
67874: PUSH
67875: LD_INT 5
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 0
67884: PUSH
67885: LD_INT 5
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: LD_INT 4
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 1
67905: NEG
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 2
67916: PUSH
67917: LD_INT 5
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 2
67926: NEG
67927: PUSH
67928: LD_INT 3
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67982: LD_ADDR_VAR 0 34
67986: PUSH
67987: LD_INT 0
67989: PUSH
67990: LD_INT 4
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 0
68000: PUSH
68001: LD_INT 5
68003: NEG
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 1
68011: PUSH
68012: LD_INT 4
68014: NEG
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 1
68022: PUSH
68023: LD_INT 3
68025: NEG
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 0
68033: PUSH
68034: LD_INT 3
68036: NEG
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 1
68044: NEG
68045: PUSH
68046: LD_INT 4
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 1
68056: NEG
68057: PUSH
68058: LD_INT 5
68060: NEG
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 2
68068: PUSH
68069: LD_INT 3
68071: NEG
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 2
68079: NEG
68080: PUSH
68081: LD_INT 5
68083: NEG
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 3
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 3
68101: PUSH
68102: LD_INT 1
68104: NEG
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 4
68112: PUSH
68113: LD_INT 0
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 4
68122: PUSH
68123: LD_INT 1
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 3
68132: PUSH
68133: LD_INT 1
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 2
68142: PUSH
68143: LD_INT 0
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 2
68152: PUSH
68153: LD_INT 1
68155: NEG
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 2
68163: PUSH
68164: LD_INT 2
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 4
68174: PUSH
68175: LD_INT 2
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 4
68184: PUSH
68185: LD_INT 4
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 4
68194: PUSH
68195: LD_INT 3
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 5
68204: PUSH
68205: LD_INT 4
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 5
68214: PUSH
68215: LD_INT 5
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 4
68224: PUSH
68225: LD_INT 5
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 3
68234: PUSH
68235: LD_INT 4
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 3
68244: PUSH
68245: LD_INT 3
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 5
68254: PUSH
68255: LD_INT 3
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 3
68264: PUSH
68265: LD_INT 5
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: LD_INT 3
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 0
68284: PUSH
68285: LD_INT 2
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 1
68294: PUSH
68295: LD_INT 3
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 1
68304: PUSH
68305: LD_INT 4
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 0
68314: PUSH
68315: LD_INT 4
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 1
68324: NEG
68325: PUSH
68326: LD_INT 3
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 1
68335: NEG
68336: PUSH
68337: LD_INT 2
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 2
68346: PUSH
68347: LD_INT 4
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 2
68356: NEG
68357: PUSH
68358: LD_INT 2
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 4
68367: NEG
68368: PUSH
68369: LD_INT 0
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 4
68378: NEG
68379: PUSH
68380: LD_INT 1
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 3
68390: NEG
68391: PUSH
68392: LD_INT 0
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 3
68401: NEG
68402: PUSH
68403: LD_INT 1
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 4
68412: NEG
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 5
68423: NEG
68424: PUSH
68425: LD_INT 0
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 5
68434: NEG
68435: PUSH
68436: LD_INT 1
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 5
68446: NEG
68447: PUSH
68448: LD_INT 2
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 3
68458: NEG
68459: PUSH
68460: LD_INT 2
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: ST_TO_ADDR
// end ; end ;
68514: GO 68517
68516: POP
// case btype of b_depot , b_warehouse :
68517: LD_VAR 0 1
68521: PUSH
68522: LD_INT 0
68524: DOUBLE
68525: EQUAL
68526: IFTRUE 68536
68528: LD_INT 1
68530: DOUBLE
68531: EQUAL
68532: IFTRUE 68536
68534: GO 68737
68536: POP
// case nation of nation_american :
68537: LD_VAR 0 5
68541: PUSH
68542: LD_INT 1
68544: DOUBLE
68545: EQUAL
68546: IFTRUE 68550
68548: GO 68606
68550: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68551: LD_ADDR_VAR 0 9
68555: PUSH
68556: LD_VAR 0 11
68560: PUSH
68561: LD_VAR 0 12
68565: PUSH
68566: LD_VAR 0 13
68570: PUSH
68571: LD_VAR 0 14
68575: PUSH
68576: LD_VAR 0 15
68580: PUSH
68581: LD_VAR 0 16
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: PUSH
68594: LD_VAR 0 4
68598: PUSH
68599: LD_INT 1
68601: PLUS
68602: ARRAY
68603: ST_TO_ADDR
68604: GO 68735
68606: LD_INT 2
68608: DOUBLE
68609: EQUAL
68610: IFTRUE 68614
68612: GO 68670
68614: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68615: LD_ADDR_VAR 0 9
68619: PUSH
68620: LD_VAR 0 17
68624: PUSH
68625: LD_VAR 0 18
68629: PUSH
68630: LD_VAR 0 19
68634: PUSH
68635: LD_VAR 0 20
68639: PUSH
68640: LD_VAR 0 21
68644: PUSH
68645: LD_VAR 0 22
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: PUSH
68658: LD_VAR 0 4
68662: PUSH
68663: LD_INT 1
68665: PLUS
68666: ARRAY
68667: ST_TO_ADDR
68668: GO 68735
68670: LD_INT 3
68672: DOUBLE
68673: EQUAL
68674: IFTRUE 68678
68676: GO 68734
68678: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68679: LD_ADDR_VAR 0 9
68683: PUSH
68684: LD_VAR 0 23
68688: PUSH
68689: LD_VAR 0 24
68693: PUSH
68694: LD_VAR 0 25
68698: PUSH
68699: LD_VAR 0 26
68703: PUSH
68704: LD_VAR 0 27
68708: PUSH
68709: LD_VAR 0 28
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: PUSH
68722: LD_VAR 0 4
68726: PUSH
68727: LD_INT 1
68729: PLUS
68730: ARRAY
68731: ST_TO_ADDR
68732: GO 68735
68734: POP
68735: GO 69290
68737: LD_INT 2
68739: DOUBLE
68740: EQUAL
68741: IFTRUE 68751
68743: LD_INT 3
68745: DOUBLE
68746: EQUAL
68747: IFTRUE 68751
68749: GO 68807
68751: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68752: LD_ADDR_VAR 0 9
68756: PUSH
68757: LD_VAR 0 29
68761: PUSH
68762: LD_VAR 0 30
68766: PUSH
68767: LD_VAR 0 31
68771: PUSH
68772: LD_VAR 0 32
68776: PUSH
68777: LD_VAR 0 33
68781: PUSH
68782: LD_VAR 0 34
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: PUSH
68795: LD_VAR 0 4
68799: PUSH
68800: LD_INT 1
68802: PLUS
68803: ARRAY
68804: ST_TO_ADDR
68805: GO 69290
68807: LD_INT 16
68809: DOUBLE
68810: EQUAL
68811: IFTRUE 68869
68813: LD_INT 17
68815: DOUBLE
68816: EQUAL
68817: IFTRUE 68869
68819: LD_INT 18
68821: DOUBLE
68822: EQUAL
68823: IFTRUE 68869
68825: LD_INT 19
68827: DOUBLE
68828: EQUAL
68829: IFTRUE 68869
68831: LD_INT 22
68833: DOUBLE
68834: EQUAL
68835: IFTRUE 68869
68837: LD_INT 20
68839: DOUBLE
68840: EQUAL
68841: IFTRUE 68869
68843: LD_INT 21
68845: DOUBLE
68846: EQUAL
68847: IFTRUE 68869
68849: LD_INT 23
68851: DOUBLE
68852: EQUAL
68853: IFTRUE 68869
68855: LD_INT 24
68857: DOUBLE
68858: EQUAL
68859: IFTRUE 68869
68861: LD_INT 25
68863: DOUBLE
68864: EQUAL
68865: IFTRUE 68869
68867: GO 68925
68869: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68870: LD_ADDR_VAR 0 9
68874: PUSH
68875: LD_VAR 0 35
68879: PUSH
68880: LD_VAR 0 36
68884: PUSH
68885: LD_VAR 0 37
68889: PUSH
68890: LD_VAR 0 38
68894: PUSH
68895: LD_VAR 0 39
68899: PUSH
68900: LD_VAR 0 40
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: PUSH
68913: LD_VAR 0 4
68917: PUSH
68918: LD_INT 1
68920: PLUS
68921: ARRAY
68922: ST_TO_ADDR
68923: GO 69290
68925: LD_INT 6
68927: DOUBLE
68928: EQUAL
68929: IFTRUE 68981
68931: LD_INT 7
68933: DOUBLE
68934: EQUAL
68935: IFTRUE 68981
68937: LD_INT 8
68939: DOUBLE
68940: EQUAL
68941: IFTRUE 68981
68943: LD_INT 13
68945: DOUBLE
68946: EQUAL
68947: IFTRUE 68981
68949: LD_INT 12
68951: DOUBLE
68952: EQUAL
68953: IFTRUE 68981
68955: LD_INT 15
68957: DOUBLE
68958: EQUAL
68959: IFTRUE 68981
68961: LD_INT 11
68963: DOUBLE
68964: EQUAL
68965: IFTRUE 68981
68967: LD_INT 14
68969: DOUBLE
68970: EQUAL
68971: IFTRUE 68981
68973: LD_INT 10
68975: DOUBLE
68976: EQUAL
68977: IFTRUE 68981
68979: GO 69037
68981: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68982: LD_ADDR_VAR 0 9
68986: PUSH
68987: LD_VAR 0 41
68991: PUSH
68992: LD_VAR 0 42
68996: PUSH
68997: LD_VAR 0 43
69001: PUSH
69002: LD_VAR 0 44
69006: PUSH
69007: LD_VAR 0 45
69011: PUSH
69012: LD_VAR 0 46
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: PUSH
69025: LD_VAR 0 4
69029: PUSH
69030: LD_INT 1
69032: PLUS
69033: ARRAY
69034: ST_TO_ADDR
69035: GO 69290
69037: LD_INT 36
69039: DOUBLE
69040: EQUAL
69041: IFTRUE 69045
69043: GO 69101
69045: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69046: LD_ADDR_VAR 0 9
69050: PUSH
69051: LD_VAR 0 47
69055: PUSH
69056: LD_VAR 0 48
69060: PUSH
69061: LD_VAR 0 49
69065: PUSH
69066: LD_VAR 0 50
69070: PUSH
69071: LD_VAR 0 51
69075: PUSH
69076: LD_VAR 0 52
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: PUSH
69089: LD_VAR 0 4
69093: PUSH
69094: LD_INT 1
69096: PLUS
69097: ARRAY
69098: ST_TO_ADDR
69099: GO 69290
69101: LD_INT 4
69103: DOUBLE
69104: EQUAL
69105: IFTRUE 69127
69107: LD_INT 5
69109: DOUBLE
69110: EQUAL
69111: IFTRUE 69127
69113: LD_INT 34
69115: DOUBLE
69116: EQUAL
69117: IFTRUE 69127
69119: LD_INT 37
69121: DOUBLE
69122: EQUAL
69123: IFTRUE 69127
69125: GO 69183
69127: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69128: LD_ADDR_VAR 0 9
69132: PUSH
69133: LD_VAR 0 53
69137: PUSH
69138: LD_VAR 0 54
69142: PUSH
69143: LD_VAR 0 55
69147: PUSH
69148: LD_VAR 0 56
69152: PUSH
69153: LD_VAR 0 57
69157: PUSH
69158: LD_VAR 0 58
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: PUSH
69171: LD_VAR 0 4
69175: PUSH
69176: LD_INT 1
69178: PLUS
69179: ARRAY
69180: ST_TO_ADDR
69181: GO 69290
69183: LD_INT 31
69185: DOUBLE
69186: EQUAL
69187: IFTRUE 69233
69189: LD_INT 32
69191: DOUBLE
69192: EQUAL
69193: IFTRUE 69233
69195: LD_INT 33
69197: DOUBLE
69198: EQUAL
69199: IFTRUE 69233
69201: LD_INT 27
69203: DOUBLE
69204: EQUAL
69205: IFTRUE 69233
69207: LD_INT 26
69209: DOUBLE
69210: EQUAL
69211: IFTRUE 69233
69213: LD_INT 28
69215: DOUBLE
69216: EQUAL
69217: IFTRUE 69233
69219: LD_INT 29
69221: DOUBLE
69222: EQUAL
69223: IFTRUE 69233
69225: LD_INT 30
69227: DOUBLE
69228: EQUAL
69229: IFTRUE 69233
69231: GO 69289
69233: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69234: LD_ADDR_VAR 0 9
69238: PUSH
69239: LD_VAR 0 59
69243: PUSH
69244: LD_VAR 0 60
69248: PUSH
69249: LD_VAR 0 61
69253: PUSH
69254: LD_VAR 0 62
69258: PUSH
69259: LD_VAR 0 63
69263: PUSH
69264: LD_VAR 0 64
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: PUSH
69277: LD_VAR 0 4
69281: PUSH
69282: LD_INT 1
69284: PLUS
69285: ARRAY
69286: ST_TO_ADDR
69287: GO 69290
69289: POP
// temp_list2 = [ ] ;
69290: LD_ADDR_VAR 0 10
69294: PUSH
69295: EMPTY
69296: ST_TO_ADDR
// for i in temp_list do
69297: LD_ADDR_VAR 0 8
69301: PUSH
69302: LD_VAR 0 9
69306: PUSH
69307: FOR_IN
69308: IFFALSE 69360
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69310: LD_ADDR_VAR 0 10
69314: PUSH
69315: LD_VAR 0 10
69319: PUSH
69320: LD_VAR 0 8
69324: PUSH
69325: LD_INT 1
69327: ARRAY
69328: PUSH
69329: LD_VAR 0 2
69333: PLUS
69334: PUSH
69335: LD_VAR 0 8
69339: PUSH
69340: LD_INT 2
69342: ARRAY
69343: PUSH
69344: LD_VAR 0 3
69348: PLUS
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: EMPTY
69355: LIST
69356: ADD
69357: ST_TO_ADDR
69358: GO 69307
69360: POP
69361: POP
// result = temp_list2 ;
69362: LD_ADDR_VAR 0 7
69366: PUSH
69367: LD_VAR 0 10
69371: ST_TO_ADDR
// end ;
69372: LD_VAR 0 7
69376: RET
// export function EnemyInRange ( unit , dist ) ; begin
69377: LD_INT 0
69379: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69380: LD_ADDR_VAR 0 3
69384: PUSH
69385: LD_VAR 0 1
69389: PPUSH
69390: CALL_OW 255
69394: PPUSH
69395: LD_VAR 0 1
69399: PPUSH
69400: CALL_OW 250
69404: PPUSH
69405: LD_VAR 0 1
69409: PPUSH
69410: CALL_OW 251
69414: PPUSH
69415: LD_VAR 0 2
69419: PPUSH
69420: CALL 42779 0 4
69424: PUSH
69425: LD_INT 4
69427: ARRAY
69428: ST_TO_ADDR
// end ;
69429: LD_VAR 0 3
69433: RET
// export function PlayerSeeMe ( unit ) ; begin
69434: LD_INT 0
69436: PPUSH
// result := See ( your_side , unit ) ;
69437: LD_ADDR_VAR 0 2
69441: PUSH
69442: LD_OWVAR 2
69446: PPUSH
69447: LD_VAR 0 1
69451: PPUSH
69452: CALL_OW 292
69456: ST_TO_ADDR
// end ;
69457: LD_VAR 0 2
69461: RET
// export function ReverseDir ( unit ) ; begin
69462: LD_INT 0
69464: PPUSH
// if not unit then
69465: LD_VAR 0 1
69469: NOT
69470: IFFALSE 69474
// exit ;
69472: GO 69497
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69474: LD_ADDR_VAR 0 2
69478: PUSH
69479: LD_VAR 0 1
69483: PPUSH
69484: CALL_OW 254
69488: PUSH
69489: LD_INT 3
69491: PLUS
69492: PUSH
69493: LD_INT 6
69495: MOD
69496: ST_TO_ADDR
// end ;
69497: LD_VAR 0 2
69501: RET
// export function ReverseArray ( array ) ; var i ; begin
69502: LD_INT 0
69504: PPUSH
69505: PPUSH
// if not array then
69506: LD_VAR 0 1
69510: NOT
69511: IFFALSE 69515
// exit ;
69513: GO 69570
// result := [ ] ;
69515: LD_ADDR_VAR 0 2
69519: PUSH
69520: EMPTY
69521: ST_TO_ADDR
// for i := array downto 1 do
69522: LD_ADDR_VAR 0 3
69526: PUSH
69527: DOUBLE
69528: LD_VAR 0 1
69532: INC
69533: ST_TO_ADDR
69534: LD_INT 1
69536: PUSH
69537: FOR_DOWNTO
69538: IFFALSE 69568
// result := Join ( result , array [ i ] ) ;
69540: LD_ADDR_VAR 0 2
69544: PUSH
69545: LD_VAR 0 2
69549: PPUSH
69550: LD_VAR 0 1
69554: PUSH
69555: LD_VAR 0 3
69559: ARRAY
69560: PPUSH
69561: CALL 74214 0 2
69565: ST_TO_ADDR
69566: GO 69537
69568: POP
69569: POP
// end ;
69570: LD_VAR 0 2
69574: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69575: LD_INT 0
69577: PPUSH
69578: PPUSH
69579: PPUSH
69580: PPUSH
69581: PPUSH
69582: PPUSH
// if not unit or not hexes then
69583: LD_VAR 0 1
69587: NOT
69588: PUSH
69589: LD_VAR 0 2
69593: NOT
69594: OR
69595: IFFALSE 69599
// exit ;
69597: GO 69722
// dist := 9999 ;
69599: LD_ADDR_VAR 0 5
69603: PUSH
69604: LD_INT 9999
69606: ST_TO_ADDR
// for i = 1 to hexes do
69607: LD_ADDR_VAR 0 4
69611: PUSH
69612: DOUBLE
69613: LD_INT 1
69615: DEC
69616: ST_TO_ADDR
69617: LD_VAR 0 2
69621: PUSH
69622: FOR_TO
69623: IFFALSE 69710
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69625: LD_ADDR_VAR 0 6
69629: PUSH
69630: LD_VAR 0 1
69634: PPUSH
69635: LD_VAR 0 2
69639: PUSH
69640: LD_VAR 0 4
69644: ARRAY
69645: PUSH
69646: LD_INT 1
69648: ARRAY
69649: PPUSH
69650: LD_VAR 0 2
69654: PUSH
69655: LD_VAR 0 4
69659: ARRAY
69660: PUSH
69661: LD_INT 2
69663: ARRAY
69664: PPUSH
69665: CALL_OW 297
69669: ST_TO_ADDR
// if tdist < dist then
69670: LD_VAR 0 6
69674: PUSH
69675: LD_VAR 0 5
69679: LESS
69680: IFFALSE 69708
// begin hex := hexes [ i ] ;
69682: LD_ADDR_VAR 0 8
69686: PUSH
69687: LD_VAR 0 2
69691: PUSH
69692: LD_VAR 0 4
69696: ARRAY
69697: ST_TO_ADDR
// dist := tdist ;
69698: LD_ADDR_VAR 0 5
69702: PUSH
69703: LD_VAR 0 6
69707: ST_TO_ADDR
// end ; end ;
69708: GO 69622
69710: POP
69711: POP
// result := hex ;
69712: LD_ADDR_VAR 0 3
69716: PUSH
69717: LD_VAR 0 8
69721: ST_TO_ADDR
// end ;
69722: LD_VAR 0 3
69726: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69727: LD_INT 0
69729: PPUSH
69730: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69731: LD_VAR 0 1
69735: NOT
69736: PUSH
69737: LD_VAR 0 1
69741: PUSH
69742: LD_INT 21
69744: PUSH
69745: LD_INT 2
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 23
69754: PUSH
69755: LD_INT 2
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PPUSH
69766: CALL_OW 69
69770: IN
69771: NOT
69772: OR
69773: IFFALSE 69777
// exit ;
69775: GO 69824
// for i = 1 to 3 do
69777: LD_ADDR_VAR 0 3
69781: PUSH
69782: DOUBLE
69783: LD_INT 1
69785: DEC
69786: ST_TO_ADDR
69787: LD_INT 3
69789: PUSH
69790: FOR_TO
69791: IFFALSE 69822
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69793: LD_VAR 0 1
69797: PPUSH
69798: CALL_OW 250
69802: PPUSH
69803: LD_VAR 0 1
69807: PPUSH
69808: CALL_OW 251
69812: PPUSH
69813: LD_INT 1
69815: PPUSH
69816: CALL_OW 453
69820: GO 69790
69822: POP
69823: POP
// end ;
69824: LD_VAR 0 2
69828: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69829: LD_INT 0
69831: PPUSH
69832: PPUSH
69833: PPUSH
69834: PPUSH
69835: PPUSH
69836: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69837: LD_VAR 0 1
69841: NOT
69842: PUSH
69843: LD_VAR 0 2
69847: NOT
69848: OR
69849: PUSH
69850: LD_VAR 0 1
69854: PPUSH
69855: CALL_OW 314
69859: OR
69860: IFFALSE 69864
// exit ;
69862: GO 70331
// if GetLives ( i ) < 250 then
69864: LD_VAR 0 4
69868: PPUSH
69869: CALL_OW 256
69873: PUSH
69874: LD_INT 250
69876: LESS
69877: IFFALSE 69890
// begin ComAutodestruct ( i ) ;
69879: LD_VAR 0 4
69883: PPUSH
69884: CALL 69727 0 1
// exit ;
69888: GO 70331
// end ; x := GetX ( enemy_unit ) ;
69890: LD_ADDR_VAR 0 7
69894: PUSH
69895: LD_VAR 0 2
69899: PPUSH
69900: CALL_OW 250
69904: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69905: LD_ADDR_VAR 0 8
69909: PUSH
69910: LD_VAR 0 2
69914: PPUSH
69915: CALL_OW 251
69919: ST_TO_ADDR
// if not x or not y then
69920: LD_VAR 0 7
69924: NOT
69925: PUSH
69926: LD_VAR 0 8
69930: NOT
69931: OR
69932: IFFALSE 69936
// exit ;
69934: GO 70331
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69936: LD_ADDR_VAR 0 6
69940: PUSH
69941: LD_VAR 0 7
69945: PPUSH
69946: LD_INT 0
69948: PPUSH
69949: LD_INT 4
69951: PPUSH
69952: CALL_OW 272
69956: PUSH
69957: LD_VAR 0 8
69961: PPUSH
69962: LD_INT 0
69964: PPUSH
69965: LD_INT 4
69967: PPUSH
69968: CALL_OW 273
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_VAR 0 7
69981: PPUSH
69982: LD_INT 1
69984: PPUSH
69985: LD_INT 4
69987: PPUSH
69988: CALL_OW 272
69992: PUSH
69993: LD_VAR 0 8
69997: PPUSH
69998: LD_INT 1
70000: PPUSH
70001: LD_INT 4
70003: PPUSH
70004: CALL_OW 273
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_VAR 0 7
70017: PPUSH
70018: LD_INT 2
70020: PPUSH
70021: LD_INT 4
70023: PPUSH
70024: CALL_OW 272
70028: PUSH
70029: LD_VAR 0 8
70033: PPUSH
70034: LD_INT 2
70036: PPUSH
70037: LD_INT 4
70039: PPUSH
70040: CALL_OW 273
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_VAR 0 7
70053: PPUSH
70054: LD_INT 3
70056: PPUSH
70057: LD_INT 4
70059: PPUSH
70060: CALL_OW 272
70064: PUSH
70065: LD_VAR 0 8
70069: PPUSH
70070: LD_INT 3
70072: PPUSH
70073: LD_INT 4
70075: PPUSH
70076: CALL_OW 273
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_VAR 0 7
70089: PPUSH
70090: LD_INT 4
70092: PPUSH
70093: LD_INT 4
70095: PPUSH
70096: CALL_OW 272
70100: PUSH
70101: LD_VAR 0 8
70105: PPUSH
70106: LD_INT 4
70108: PPUSH
70109: LD_INT 4
70111: PPUSH
70112: CALL_OW 273
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_VAR 0 7
70125: PPUSH
70126: LD_INT 5
70128: PPUSH
70129: LD_INT 4
70131: PPUSH
70132: CALL_OW 272
70136: PUSH
70137: LD_VAR 0 8
70141: PPUSH
70142: LD_INT 5
70144: PPUSH
70145: LD_INT 4
70147: PPUSH
70148: CALL_OW 273
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: ST_TO_ADDR
// for i = tmp downto 1 do
70165: LD_ADDR_VAR 0 4
70169: PUSH
70170: DOUBLE
70171: LD_VAR 0 6
70175: INC
70176: ST_TO_ADDR
70177: LD_INT 1
70179: PUSH
70180: FOR_DOWNTO
70181: IFFALSE 70282
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70183: LD_VAR 0 6
70187: PUSH
70188: LD_VAR 0 4
70192: ARRAY
70193: PUSH
70194: LD_INT 1
70196: ARRAY
70197: PPUSH
70198: LD_VAR 0 6
70202: PUSH
70203: LD_VAR 0 4
70207: ARRAY
70208: PUSH
70209: LD_INT 2
70211: ARRAY
70212: PPUSH
70213: CALL_OW 488
70217: NOT
70218: PUSH
70219: LD_VAR 0 6
70223: PUSH
70224: LD_VAR 0 4
70228: ARRAY
70229: PUSH
70230: LD_INT 1
70232: ARRAY
70233: PPUSH
70234: LD_VAR 0 6
70238: PUSH
70239: LD_VAR 0 4
70243: ARRAY
70244: PUSH
70245: LD_INT 2
70247: ARRAY
70248: PPUSH
70249: CALL_OW 428
70253: PUSH
70254: LD_INT 0
70256: NONEQUAL
70257: OR
70258: IFFALSE 70280
// tmp := Delete ( tmp , i ) ;
70260: LD_ADDR_VAR 0 6
70264: PUSH
70265: LD_VAR 0 6
70269: PPUSH
70270: LD_VAR 0 4
70274: PPUSH
70275: CALL_OW 3
70279: ST_TO_ADDR
70280: GO 70180
70282: POP
70283: POP
// j := GetClosestHex ( unit , tmp ) ;
70284: LD_ADDR_VAR 0 5
70288: PUSH
70289: LD_VAR 0 1
70293: PPUSH
70294: LD_VAR 0 6
70298: PPUSH
70299: CALL 69575 0 2
70303: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70304: LD_VAR 0 1
70308: PPUSH
70309: LD_VAR 0 5
70313: PUSH
70314: LD_INT 1
70316: ARRAY
70317: PPUSH
70318: LD_VAR 0 5
70322: PUSH
70323: LD_INT 2
70325: ARRAY
70326: PPUSH
70327: CALL_OW 111
// end ;
70331: LD_VAR 0 3
70335: RET
// export function PrepareApemanSoldier ( ) ; begin
70336: LD_INT 0
70338: PPUSH
// uc_nation := 0 ;
70339: LD_ADDR_OWVAR 21
70343: PUSH
70344: LD_INT 0
70346: ST_TO_ADDR
// hc_sex := sex_male ;
70347: LD_ADDR_OWVAR 27
70351: PUSH
70352: LD_INT 1
70354: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70355: LD_ADDR_OWVAR 28
70359: PUSH
70360: LD_INT 15
70362: ST_TO_ADDR
// hc_gallery :=  ;
70363: LD_ADDR_OWVAR 33
70367: PUSH
70368: LD_STRING 
70370: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70371: LD_ADDR_OWVAR 31
70375: PUSH
70376: LD_INT 0
70378: PPUSH
70379: LD_INT 3
70381: PPUSH
70382: CALL_OW 12
70386: PUSH
70387: LD_INT 0
70389: PPUSH
70390: LD_INT 3
70392: PPUSH
70393: CALL_OW 12
70397: PUSH
70398: LD_INT 0
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: ST_TO_ADDR
// end ;
70410: LD_VAR 0 1
70414: RET
// export function PrepareApemanEngineer ( ) ; begin
70415: LD_INT 0
70417: PPUSH
// uc_nation := 0 ;
70418: LD_ADDR_OWVAR 21
70422: PUSH
70423: LD_INT 0
70425: ST_TO_ADDR
// hc_sex := sex_male ;
70426: LD_ADDR_OWVAR 27
70430: PUSH
70431: LD_INT 1
70433: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70434: LD_ADDR_OWVAR 28
70438: PUSH
70439: LD_INT 16
70441: ST_TO_ADDR
// hc_gallery :=  ;
70442: LD_ADDR_OWVAR 33
70446: PUSH
70447: LD_STRING 
70449: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70450: LD_ADDR_OWVAR 31
70454: PUSH
70455: LD_INT 0
70457: PPUSH
70458: LD_INT 3
70460: PPUSH
70461: CALL_OW 12
70465: PUSH
70466: LD_INT 0
70468: PPUSH
70469: LD_INT 3
70471: PPUSH
70472: CALL_OW 12
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: ST_TO_ADDR
// end ;
70489: LD_VAR 0 1
70493: RET
// export function PrepareApeman ( agressivity ) ; begin
70494: LD_INT 0
70496: PPUSH
// uc_side := 0 ;
70497: LD_ADDR_OWVAR 20
70501: PUSH
70502: LD_INT 0
70504: ST_TO_ADDR
// uc_nation := 0 ;
70505: LD_ADDR_OWVAR 21
70509: PUSH
70510: LD_INT 0
70512: ST_TO_ADDR
// hc_sex := sex_male ;
70513: LD_ADDR_OWVAR 27
70517: PUSH
70518: LD_INT 1
70520: ST_TO_ADDR
// hc_class := class_apeman ;
70521: LD_ADDR_OWVAR 28
70525: PUSH
70526: LD_INT 12
70528: ST_TO_ADDR
// hc_gallery :=  ;
70529: LD_ADDR_OWVAR 33
70533: PUSH
70534: LD_STRING 
70536: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70537: LD_ADDR_OWVAR 35
70541: PUSH
70542: LD_VAR 0 1
70546: NEG
70547: PPUSH
70548: LD_VAR 0 1
70552: PPUSH
70553: CALL_OW 12
70557: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70558: LD_ADDR_OWVAR 31
70562: PUSH
70563: LD_INT 0
70565: PPUSH
70566: LD_INT 3
70568: PPUSH
70569: CALL_OW 12
70573: PUSH
70574: LD_INT 0
70576: PPUSH
70577: LD_INT 3
70579: PPUSH
70580: CALL_OW 12
70584: PUSH
70585: LD_INT 0
70587: PUSH
70588: LD_INT 0
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: ST_TO_ADDR
// end ;
70597: LD_VAR 0 2
70601: RET
// export function PrepareTiger ( agressivity ) ; begin
70602: LD_INT 0
70604: PPUSH
// uc_side := 0 ;
70605: LD_ADDR_OWVAR 20
70609: PUSH
70610: LD_INT 0
70612: ST_TO_ADDR
// uc_nation := 0 ;
70613: LD_ADDR_OWVAR 21
70617: PUSH
70618: LD_INT 0
70620: ST_TO_ADDR
// hc_class := class_tiger ;
70621: LD_ADDR_OWVAR 28
70625: PUSH
70626: LD_INT 14
70628: ST_TO_ADDR
// hc_gallery :=  ;
70629: LD_ADDR_OWVAR 33
70633: PUSH
70634: LD_STRING 
70636: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70637: LD_ADDR_OWVAR 35
70641: PUSH
70642: LD_VAR 0 1
70646: NEG
70647: PPUSH
70648: LD_VAR 0 1
70652: PPUSH
70653: CALL_OW 12
70657: ST_TO_ADDR
// end ;
70658: LD_VAR 0 2
70662: RET
// export function PrepareEnchidna ( ) ; begin
70663: LD_INT 0
70665: PPUSH
// uc_side := 0 ;
70666: LD_ADDR_OWVAR 20
70670: PUSH
70671: LD_INT 0
70673: ST_TO_ADDR
// uc_nation := 0 ;
70674: LD_ADDR_OWVAR 21
70678: PUSH
70679: LD_INT 0
70681: ST_TO_ADDR
// hc_class := class_baggie ;
70682: LD_ADDR_OWVAR 28
70686: PUSH
70687: LD_INT 13
70689: ST_TO_ADDR
// hc_gallery :=  ;
70690: LD_ADDR_OWVAR 33
70694: PUSH
70695: LD_STRING 
70697: ST_TO_ADDR
// end ;
70698: LD_VAR 0 1
70702: RET
// export function PrepareFrog ( ) ; begin
70703: LD_INT 0
70705: PPUSH
// uc_side := 0 ;
70706: LD_ADDR_OWVAR 20
70710: PUSH
70711: LD_INT 0
70713: ST_TO_ADDR
// uc_nation := 0 ;
70714: LD_ADDR_OWVAR 21
70718: PUSH
70719: LD_INT 0
70721: ST_TO_ADDR
// hc_class := class_frog ;
70722: LD_ADDR_OWVAR 28
70726: PUSH
70727: LD_INT 19
70729: ST_TO_ADDR
// hc_gallery :=  ;
70730: LD_ADDR_OWVAR 33
70734: PUSH
70735: LD_STRING 
70737: ST_TO_ADDR
// end ;
70738: LD_VAR 0 1
70742: RET
// export function PrepareFish ( ) ; begin
70743: LD_INT 0
70745: PPUSH
// uc_side := 0 ;
70746: LD_ADDR_OWVAR 20
70750: PUSH
70751: LD_INT 0
70753: ST_TO_ADDR
// uc_nation := 0 ;
70754: LD_ADDR_OWVAR 21
70758: PUSH
70759: LD_INT 0
70761: ST_TO_ADDR
// hc_class := class_fish ;
70762: LD_ADDR_OWVAR 28
70766: PUSH
70767: LD_INT 20
70769: ST_TO_ADDR
// hc_gallery :=  ;
70770: LD_ADDR_OWVAR 33
70774: PUSH
70775: LD_STRING 
70777: ST_TO_ADDR
// end ;
70778: LD_VAR 0 1
70782: RET
// export function PrepareBird ( ) ; begin
70783: LD_INT 0
70785: PPUSH
// uc_side := 0 ;
70786: LD_ADDR_OWVAR 20
70790: PUSH
70791: LD_INT 0
70793: ST_TO_ADDR
// uc_nation := 0 ;
70794: LD_ADDR_OWVAR 21
70798: PUSH
70799: LD_INT 0
70801: ST_TO_ADDR
// hc_class := class_phororhacos ;
70802: LD_ADDR_OWVAR 28
70806: PUSH
70807: LD_INT 18
70809: ST_TO_ADDR
// hc_gallery :=  ;
70810: LD_ADDR_OWVAR 33
70814: PUSH
70815: LD_STRING 
70817: ST_TO_ADDR
// end ;
70818: LD_VAR 0 1
70822: RET
// export function PrepareHorse ( ) ; begin
70823: LD_INT 0
70825: PPUSH
// uc_side := 0 ;
70826: LD_ADDR_OWVAR 20
70830: PUSH
70831: LD_INT 0
70833: ST_TO_ADDR
// uc_nation := 0 ;
70834: LD_ADDR_OWVAR 21
70838: PUSH
70839: LD_INT 0
70841: ST_TO_ADDR
// hc_class := class_horse ;
70842: LD_ADDR_OWVAR 28
70846: PUSH
70847: LD_INT 21
70849: ST_TO_ADDR
// hc_gallery :=  ;
70850: LD_ADDR_OWVAR 33
70854: PUSH
70855: LD_STRING 
70857: ST_TO_ADDR
// end ;
70858: LD_VAR 0 1
70862: RET
// export function PrepareMastodont ( ) ; begin
70863: LD_INT 0
70865: PPUSH
// uc_side := 0 ;
70866: LD_ADDR_OWVAR 20
70870: PUSH
70871: LD_INT 0
70873: ST_TO_ADDR
// uc_nation := 0 ;
70874: LD_ADDR_OWVAR 21
70878: PUSH
70879: LD_INT 0
70881: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70882: LD_ADDR_OWVAR 37
70886: PUSH
70887: LD_INT 31
70889: ST_TO_ADDR
// vc_control := control_rider ;
70890: LD_ADDR_OWVAR 38
70894: PUSH
70895: LD_INT 4
70897: ST_TO_ADDR
// end ;
70898: LD_VAR 0 1
70902: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70903: LD_INT 0
70905: PPUSH
70906: PPUSH
70907: PPUSH
// uc_side = 0 ;
70908: LD_ADDR_OWVAR 20
70912: PUSH
70913: LD_INT 0
70915: ST_TO_ADDR
// uc_nation = 0 ;
70916: LD_ADDR_OWVAR 21
70920: PUSH
70921: LD_INT 0
70923: ST_TO_ADDR
// InitHc_All ( ) ;
70924: CALL_OW 584
// InitVc ;
70928: CALL_OW 20
// if mastodonts then
70932: LD_VAR 0 6
70936: IFFALSE 71003
// for i = 1 to mastodonts do
70938: LD_ADDR_VAR 0 11
70942: PUSH
70943: DOUBLE
70944: LD_INT 1
70946: DEC
70947: ST_TO_ADDR
70948: LD_VAR 0 6
70952: PUSH
70953: FOR_TO
70954: IFFALSE 71001
// begin vc_chassis := 31 ;
70956: LD_ADDR_OWVAR 37
70960: PUSH
70961: LD_INT 31
70963: ST_TO_ADDR
// vc_control := control_rider ;
70964: LD_ADDR_OWVAR 38
70968: PUSH
70969: LD_INT 4
70971: ST_TO_ADDR
// animal := CreateVehicle ;
70972: LD_ADDR_VAR 0 12
70976: PUSH
70977: CALL_OW 45
70981: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70982: LD_VAR 0 12
70986: PPUSH
70987: LD_VAR 0 8
70991: PPUSH
70992: LD_INT 0
70994: PPUSH
70995: CALL 73131 0 3
// end ;
70999: GO 70953
71001: POP
71002: POP
// if horses then
71003: LD_VAR 0 5
71007: IFFALSE 71074
// for i = 1 to horses do
71009: LD_ADDR_VAR 0 11
71013: PUSH
71014: DOUBLE
71015: LD_INT 1
71017: DEC
71018: ST_TO_ADDR
71019: LD_VAR 0 5
71023: PUSH
71024: FOR_TO
71025: IFFALSE 71072
// begin hc_class := 21 ;
71027: LD_ADDR_OWVAR 28
71031: PUSH
71032: LD_INT 21
71034: ST_TO_ADDR
// hc_gallery :=  ;
71035: LD_ADDR_OWVAR 33
71039: PUSH
71040: LD_STRING 
71042: ST_TO_ADDR
// animal := CreateHuman ;
71043: LD_ADDR_VAR 0 12
71047: PUSH
71048: CALL_OW 44
71052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71053: LD_VAR 0 12
71057: PPUSH
71058: LD_VAR 0 8
71062: PPUSH
71063: LD_INT 0
71065: PPUSH
71066: CALL 73131 0 3
// end ;
71070: GO 71024
71072: POP
71073: POP
// if birds then
71074: LD_VAR 0 1
71078: IFFALSE 71145
// for i = 1 to birds do
71080: LD_ADDR_VAR 0 11
71084: PUSH
71085: DOUBLE
71086: LD_INT 1
71088: DEC
71089: ST_TO_ADDR
71090: LD_VAR 0 1
71094: PUSH
71095: FOR_TO
71096: IFFALSE 71143
// begin hc_class = 18 ;
71098: LD_ADDR_OWVAR 28
71102: PUSH
71103: LD_INT 18
71105: ST_TO_ADDR
// hc_gallery =  ;
71106: LD_ADDR_OWVAR 33
71110: PUSH
71111: LD_STRING 
71113: ST_TO_ADDR
// animal := CreateHuman ;
71114: LD_ADDR_VAR 0 12
71118: PUSH
71119: CALL_OW 44
71123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71124: LD_VAR 0 12
71128: PPUSH
71129: LD_VAR 0 8
71133: PPUSH
71134: LD_INT 0
71136: PPUSH
71137: CALL 73131 0 3
// end ;
71141: GO 71095
71143: POP
71144: POP
// if tigers then
71145: LD_VAR 0 2
71149: IFFALSE 71233
// for i = 1 to tigers do
71151: LD_ADDR_VAR 0 11
71155: PUSH
71156: DOUBLE
71157: LD_INT 1
71159: DEC
71160: ST_TO_ADDR
71161: LD_VAR 0 2
71165: PUSH
71166: FOR_TO
71167: IFFALSE 71231
// begin hc_class = class_tiger ;
71169: LD_ADDR_OWVAR 28
71173: PUSH
71174: LD_INT 14
71176: ST_TO_ADDR
// hc_gallery =  ;
71177: LD_ADDR_OWVAR 33
71181: PUSH
71182: LD_STRING 
71184: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71185: LD_ADDR_OWVAR 35
71189: PUSH
71190: LD_INT 7
71192: NEG
71193: PPUSH
71194: LD_INT 7
71196: PPUSH
71197: CALL_OW 12
71201: ST_TO_ADDR
// animal := CreateHuman ;
71202: LD_ADDR_VAR 0 12
71206: PUSH
71207: CALL_OW 44
71211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71212: LD_VAR 0 12
71216: PPUSH
71217: LD_VAR 0 8
71221: PPUSH
71222: LD_INT 0
71224: PPUSH
71225: CALL 73131 0 3
// end ;
71229: GO 71166
71231: POP
71232: POP
// if apemans then
71233: LD_VAR 0 3
71237: IFFALSE 71360
// for i = 1 to apemans do
71239: LD_ADDR_VAR 0 11
71243: PUSH
71244: DOUBLE
71245: LD_INT 1
71247: DEC
71248: ST_TO_ADDR
71249: LD_VAR 0 3
71253: PUSH
71254: FOR_TO
71255: IFFALSE 71358
// begin hc_class = class_apeman ;
71257: LD_ADDR_OWVAR 28
71261: PUSH
71262: LD_INT 12
71264: ST_TO_ADDR
// hc_gallery =  ;
71265: LD_ADDR_OWVAR 33
71269: PUSH
71270: LD_STRING 
71272: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71273: LD_ADDR_OWVAR 35
71277: PUSH
71278: LD_INT 2
71280: NEG
71281: PPUSH
71282: LD_INT 2
71284: PPUSH
71285: CALL_OW 12
71289: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71290: LD_ADDR_OWVAR 31
71294: PUSH
71295: LD_INT 1
71297: PPUSH
71298: LD_INT 3
71300: PPUSH
71301: CALL_OW 12
71305: PUSH
71306: LD_INT 1
71308: PPUSH
71309: LD_INT 3
71311: PPUSH
71312: CALL_OW 12
71316: PUSH
71317: LD_INT 0
71319: PUSH
71320: LD_INT 0
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: ST_TO_ADDR
// animal := CreateHuman ;
71329: LD_ADDR_VAR 0 12
71333: PUSH
71334: CALL_OW 44
71338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71339: LD_VAR 0 12
71343: PPUSH
71344: LD_VAR 0 8
71348: PPUSH
71349: LD_INT 0
71351: PPUSH
71352: CALL 73131 0 3
// end ;
71356: GO 71254
71358: POP
71359: POP
// if enchidnas then
71360: LD_VAR 0 4
71364: IFFALSE 71431
// for i = 1 to enchidnas do
71366: LD_ADDR_VAR 0 11
71370: PUSH
71371: DOUBLE
71372: LD_INT 1
71374: DEC
71375: ST_TO_ADDR
71376: LD_VAR 0 4
71380: PUSH
71381: FOR_TO
71382: IFFALSE 71429
// begin hc_class = 13 ;
71384: LD_ADDR_OWVAR 28
71388: PUSH
71389: LD_INT 13
71391: ST_TO_ADDR
// hc_gallery =  ;
71392: LD_ADDR_OWVAR 33
71396: PUSH
71397: LD_STRING 
71399: ST_TO_ADDR
// animal := CreateHuman ;
71400: LD_ADDR_VAR 0 12
71404: PUSH
71405: CALL_OW 44
71409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71410: LD_VAR 0 12
71414: PPUSH
71415: LD_VAR 0 8
71419: PPUSH
71420: LD_INT 0
71422: PPUSH
71423: CALL 73131 0 3
// end ;
71427: GO 71381
71429: POP
71430: POP
// if fishes then
71431: LD_VAR 0 7
71435: IFFALSE 71502
// for i = 1 to fishes do
71437: LD_ADDR_VAR 0 11
71441: PUSH
71442: DOUBLE
71443: LD_INT 1
71445: DEC
71446: ST_TO_ADDR
71447: LD_VAR 0 7
71451: PUSH
71452: FOR_TO
71453: IFFALSE 71500
// begin hc_class = 20 ;
71455: LD_ADDR_OWVAR 28
71459: PUSH
71460: LD_INT 20
71462: ST_TO_ADDR
// hc_gallery =  ;
71463: LD_ADDR_OWVAR 33
71467: PUSH
71468: LD_STRING 
71470: ST_TO_ADDR
// animal := CreateHuman ;
71471: LD_ADDR_VAR 0 12
71475: PUSH
71476: CALL_OW 44
71480: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71481: LD_VAR 0 12
71485: PPUSH
71486: LD_VAR 0 9
71490: PPUSH
71491: LD_INT 0
71493: PPUSH
71494: CALL 73131 0 3
// end ;
71498: GO 71452
71500: POP
71501: POP
// end ;
71502: LD_VAR 0 10
71506: RET
// export function WantHeal ( sci , unit ) ; begin
71507: LD_INT 0
71509: PPUSH
// if GetTaskList ( sci ) > 0 then
71510: LD_VAR 0 1
71514: PPUSH
71515: CALL_OW 437
71519: PUSH
71520: LD_INT 0
71522: GREATER
71523: IFFALSE 71593
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71525: LD_VAR 0 1
71529: PPUSH
71530: CALL_OW 437
71534: PUSH
71535: LD_INT 1
71537: ARRAY
71538: PUSH
71539: LD_INT 1
71541: ARRAY
71542: PUSH
71543: LD_STRING l
71545: EQUAL
71546: PUSH
71547: LD_VAR 0 1
71551: PPUSH
71552: CALL_OW 437
71556: PUSH
71557: LD_INT 1
71559: ARRAY
71560: PUSH
71561: LD_INT 4
71563: ARRAY
71564: PUSH
71565: LD_VAR 0 2
71569: EQUAL
71570: AND
71571: IFFALSE 71583
// result := true else
71573: LD_ADDR_VAR 0 3
71577: PUSH
71578: LD_INT 1
71580: ST_TO_ADDR
71581: GO 71591
// result := false ;
71583: LD_ADDR_VAR 0 3
71587: PUSH
71588: LD_INT 0
71590: ST_TO_ADDR
// end else
71591: GO 71601
// result := false ;
71593: LD_ADDR_VAR 0 3
71597: PUSH
71598: LD_INT 0
71600: ST_TO_ADDR
// end ;
71601: LD_VAR 0 3
71605: RET
// export function HealTarget ( sci ) ; begin
71606: LD_INT 0
71608: PPUSH
// if not sci then
71609: LD_VAR 0 1
71613: NOT
71614: IFFALSE 71618
// exit ;
71616: GO 71683
// result := 0 ;
71618: LD_ADDR_VAR 0 2
71622: PUSH
71623: LD_INT 0
71625: ST_TO_ADDR
// if GetTaskList ( sci ) then
71626: LD_VAR 0 1
71630: PPUSH
71631: CALL_OW 437
71635: IFFALSE 71683
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71637: LD_VAR 0 1
71641: PPUSH
71642: CALL_OW 437
71646: PUSH
71647: LD_INT 1
71649: ARRAY
71650: PUSH
71651: LD_INT 1
71653: ARRAY
71654: PUSH
71655: LD_STRING l
71657: EQUAL
71658: IFFALSE 71683
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71660: LD_ADDR_VAR 0 2
71664: PUSH
71665: LD_VAR 0 1
71669: PPUSH
71670: CALL_OW 437
71674: PUSH
71675: LD_INT 1
71677: ARRAY
71678: PUSH
71679: LD_INT 4
71681: ARRAY
71682: ST_TO_ADDR
// end ;
71683: LD_VAR 0 2
71687: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71688: LD_INT 0
71690: PPUSH
71691: PPUSH
71692: PPUSH
71693: PPUSH
// if not base_units then
71694: LD_VAR 0 1
71698: NOT
71699: IFFALSE 71703
// exit ;
71701: GO 71790
// result := false ;
71703: LD_ADDR_VAR 0 2
71707: PUSH
71708: LD_INT 0
71710: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71711: LD_ADDR_VAR 0 5
71715: PUSH
71716: LD_VAR 0 1
71720: PPUSH
71721: LD_INT 21
71723: PUSH
71724: LD_INT 3
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PPUSH
71731: CALL_OW 72
71735: ST_TO_ADDR
// if not tmp then
71736: LD_VAR 0 5
71740: NOT
71741: IFFALSE 71745
// exit ;
71743: GO 71790
// for i in tmp do
71745: LD_ADDR_VAR 0 3
71749: PUSH
71750: LD_VAR 0 5
71754: PUSH
71755: FOR_IN
71756: IFFALSE 71788
// begin result := EnemyInRange ( i , 22 ) ;
71758: LD_ADDR_VAR 0 2
71762: PUSH
71763: LD_VAR 0 3
71767: PPUSH
71768: LD_INT 22
71770: PPUSH
71771: CALL 69377 0 2
71775: ST_TO_ADDR
// if result then
71776: LD_VAR 0 2
71780: IFFALSE 71786
// exit ;
71782: POP
71783: POP
71784: GO 71790
// end ;
71786: GO 71755
71788: POP
71789: POP
// end ;
71790: LD_VAR 0 2
71794: RET
// export function FilterByTag ( units , tag ) ; begin
71795: LD_INT 0
71797: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71798: LD_ADDR_VAR 0 3
71802: PUSH
71803: LD_VAR 0 1
71807: PPUSH
71808: LD_INT 120
71810: PUSH
71811: LD_VAR 0 2
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PPUSH
71820: CALL_OW 72
71824: ST_TO_ADDR
// end ;
71825: LD_VAR 0 3
71829: RET
// export function IsDriver ( un ) ; begin
71830: LD_INT 0
71832: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71833: LD_ADDR_VAR 0 2
71837: PUSH
71838: LD_VAR 0 1
71842: PUSH
71843: LD_INT 55
71845: PUSH
71846: EMPTY
71847: LIST
71848: PPUSH
71849: CALL_OW 69
71853: IN
71854: ST_TO_ADDR
// end ;
71855: LD_VAR 0 2
71859: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71860: LD_INT 0
71862: PPUSH
71863: PPUSH
// list := [ ] ;
71864: LD_ADDR_VAR 0 5
71868: PUSH
71869: EMPTY
71870: ST_TO_ADDR
// case d of 0 :
71871: LD_VAR 0 3
71875: PUSH
71876: LD_INT 0
71878: DOUBLE
71879: EQUAL
71880: IFTRUE 71884
71882: GO 72017
71884: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71885: LD_ADDR_VAR 0 5
71889: PUSH
71890: LD_VAR 0 1
71894: PUSH
71895: LD_INT 4
71897: MINUS
71898: PUSH
71899: LD_VAR 0 2
71903: PUSH
71904: LD_INT 4
71906: MINUS
71907: PUSH
71908: LD_INT 2
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: LIST
71915: PUSH
71916: LD_VAR 0 1
71920: PUSH
71921: LD_INT 3
71923: MINUS
71924: PUSH
71925: LD_VAR 0 2
71929: PUSH
71930: LD_INT 1
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: LIST
71937: PUSH
71938: LD_VAR 0 1
71942: PUSH
71943: LD_INT 4
71945: PLUS
71946: PUSH
71947: LD_VAR 0 2
71951: PUSH
71952: LD_INT 4
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: LIST
71959: PUSH
71960: LD_VAR 0 1
71964: PUSH
71965: LD_INT 3
71967: PLUS
71968: PUSH
71969: LD_VAR 0 2
71973: PUSH
71974: LD_INT 3
71976: PLUS
71977: PUSH
71978: LD_INT 5
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: LIST
71985: PUSH
71986: LD_VAR 0 1
71990: PUSH
71991: LD_VAR 0 2
71995: PUSH
71996: LD_INT 4
71998: PLUS
71999: PUSH
72000: LD_INT 0
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: LIST
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: ST_TO_ADDR
// end ; 1 :
72015: GO 72715
72017: LD_INT 1
72019: DOUBLE
72020: EQUAL
72021: IFTRUE 72025
72023: GO 72158
72025: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72026: LD_ADDR_VAR 0 5
72030: PUSH
72031: LD_VAR 0 1
72035: PUSH
72036: LD_VAR 0 2
72040: PUSH
72041: LD_INT 4
72043: MINUS
72044: PUSH
72045: LD_INT 3
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: LIST
72052: PUSH
72053: LD_VAR 0 1
72057: PUSH
72058: LD_INT 3
72060: MINUS
72061: PUSH
72062: LD_VAR 0 2
72066: PUSH
72067: LD_INT 3
72069: MINUS
72070: PUSH
72071: LD_INT 2
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: LIST
72078: PUSH
72079: LD_VAR 0 1
72083: PUSH
72084: LD_INT 4
72086: MINUS
72087: PUSH
72088: LD_VAR 0 2
72092: PUSH
72093: LD_INT 1
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: LIST
72100: PUSH
72101: LD_VAR 0 1
72105: PUSH
72106: LD_VAR 0 2
72110: PUSH
72111: LD_INT 3
72113: PLUS
72114: PUSH
72115: LD_INT 0
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: LIST
72122: PUSH
72123: LD_VAR 0 1
72127: PUSH
72128: LD_INT 4
72130: PLUS
72131: PUSH
72132: LD_VAR 0 2
72136: PUSH
72137: LD_INT 4
72139: PLUS
72140: PUSH
72141: LD_INT 5
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: LIST
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: ST_TO_ADDR
// end ; 2 :
72156: GO 72715
72158: LD_INT 2
72160: DOUBLE
72161: EQUAL
72162: IFTRUE 72166
72164: GO 72295
72166: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72167: LD_ADDR_VAR 0 5
72171: PUSH
72172: LD_VAR 0 1
72176: PUSH
72177: LD_VAR 0 2
72181: PUSH
72182: LD_INT 3
72184: MINUS
72185: PUSH
72186: LD_INT 3
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: LIST
72193: PUSH
72194: LD_VAR 0 1
72198: PUSH
72199: LD_INT 4
72201: PLUS
72202: PUSH
72203: LD_VAR 0 2
72207: PUSH
72208: LD_INT 4
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: LIST
72215: PUSH
72216: LD_VAR 0 1
72220: PUSH
72221: LD_VAR 0 2
72225: PUSH
72226: LD_INT 4
72228: PLUS
72229: PUSH
72230: LD_INT 0
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: LIST
72237: PUSH
72238: LD_VAR 0 1
72242: PUSH
72243: LD_INT 3
72245: MINUS
72246: PUSH
72247: LD_VAR 0 2
72251: PUSH
72252: LD_INT 1
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: LIST
72259: PUSH
72260: LD_VAR 0 1
72264: PUSH
72265: LD_INT 4
72267: MINUS
72268: PUSH
72269: LD_VAR 0 2
72273: PUSH
72274: LD_INT 4
72276: MINUS
72277: PUSH
72278: LD_INT 2
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: LIST
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: ST_TO_ADDR
// end ; 3 :
72293: GO 72715
72295: LD_INT 3
72297: DOUBLE
72298: EQUAL
72299: IFTRUE 72303
72301: GO 72436
72303: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72304: LD_ADDR_VAR 0 5
72308: PUSH
72309: LD_VAR 0 1
72313: PUSH
72314: LD_INT 3
72316: PLUS
72317: PUSH
72318: LD_VAR 0 2
72322: PUSH
72323: LD_INT 4
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: LIST
72330: PUSH
72331: LD_VAR 0 1
72335: PUSH
72336: LD_INT 4
72338: PLUS
72339: PUSH
72340: LD_VAR 0 2
72344: PUSH
72345: LD_INT 4
72347: PLUS
72348: PUSH
72349: LD_INT 5
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: LIST
72356: PUSH
72357: LD_VAR 0 1
72361: PUSH
72362: LD_INT 4
72364: MINUS
72365: PUSH
72366: LD_VAR 0 2
72370: PUSH
72371: LD_INT 1
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: LIST
72378: PUSH
72379: LD_VAR 0 1
72383: PUSH
72384: LD_VAR 0 2
72388: PUSH
72389: LD_INT 4
72391: MINUS
72392: PUSH
72393: LD_INT 3
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: LIST
72400: PUSH
72401: LD_VAR 0 1
72405: PUSH
72406: LD_INT 3
72408: MINUS
72409: PUSH
72410: LD_VAR 0 2
72414: PUSH
72415: LD_INT 3
72417: MINUS
72418: PUSH
72419: LD_INT 2
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: LIST
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: ST_TO_ADDR
// end ; 4 :
72434: GO 72715
72436: LD_INT 4
72438: DOUBLE
72439: EQUAL
72440: IFTRUE 72444
72442: GO 72577
72444: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72445: LD_ADDR_VAR 0 5
72449: PUSH
72450: LD_VAR 0 1
72454: PUSH
72455: LD_VAR 0 2
72459: PUSH
72460: LD_INT 4
72462: PLUS
72463: PUSH
72464: LD_INT 0
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: LIST
72471: PUSH
72472: LD_VAR 0 1
72476: PUSH
72477: LD_INT 3
72479: PLUS
72480: PUSH
72481: LD_VAR 0 2
72485: PUSH
72486: LD_INT 3
72488: PLUS
72489: PUSH
72490: LD_INT 5
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: LIST
72497: PUSH
72498: LD_VAR 0 1
72502: PUSH
72503: LD_INT 4
72505: PLUS
72506: PUSH
72507: LD_VAR 0 2
72511: PUSH
72512: LD_INT 4
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: LIST
72519: PUSH
72520: LD_VAR 0 1
72524: PUSH
72525: LD_VAR 0 2
72529: PUSH
72530: LD_INT 3
72532: MINUS
72533: PUSH
72534: LD_INT 3
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: LIST
72541: PUSH
72542: LD_VAR 0 1
72546: PUSH
72547: LD_INT 4
72549: MINUS
72550: PUSH
72551: LD_VAR 0 2
72555: PUSH
72556: LD_INT 4
72558: MINUS
72559: PUSH
72560: LD_INT 2
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: LIST
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: ST_TO_ADDR
// end ; 5 :
72575: GO 72715
72577: LD_INT 5
72579: DOUBLE
72580: EQUAL
72581: IFTRUE 72585
72583: GO 72714
72585: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72586: LD_ADDR_VAR 0 5
72590: PUSH
72591: LD_VAR 0 1
72595: PUSH
72596: LD_INT 4
72598: MINUS
72599: PUSH
72600: LD_VAR 0 2
72604: PUSH
72605: LD_INT 1
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: LIST
72612: PUSH
72613: LD_VAR 0 1
72617: PUSH
72618: LD_VAR 0 2
72622: PUSH
72623: LD_INT 4
72625: MINUS
72626: PUSH
72627: LD_INT 3
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: LIST
72634: PUSH
72635: LD_VAR 0 1
72639: PUSH
72640: LD_INT 4
72642: PLUS
72643: PUSH
72644: LD_VAR 0 2
72648: PUSH
72649: LD_INT 4
72651: PLUS
72652: PUSH
72653: LD_INT 5
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: LIST
72660: PUSH
72661: LD_VAR 0 1
72665: PUSH
72666: LD_INT 3
72668: PLUS
72669: PUSH
72670: LD_VAR 0 2
72674: PUSH
72675: LD_INT 4
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: LIST
72682: PUSH
72683: LD_VAR 0 1
72687: PUSH
72688: LD_VAR 0 2
72692: PUSH
72693: LD_INT 3
72695: PLUS
72696: PUSH
72697: LD_INT 0
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: LIST
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: ST_TO_ADDR
// end ; end ;
72712: GO 72715
72714: POP
// result := list ;
72715: LD_ADDR_VAR 0 4
72719: PUSH
72720: LD_VAR 0 5
72724: ST_TO_ADDR
// end ;
72725: LD_VAR 0 4
72729: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72730: LD_INT 0
72732: PPUSH
72733: PPUSH
72734: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72735: LD_VAR 0 1
72739: NOT
72740: PUSH
72741: LD_VAR 0 2
72745: PUSH
72746: LD_INT 1
72748: PUSH
72749: LD_INT 2
72751: PUSH
72752: LD_INT 3
72754: PUSH
72755: LD_INT 4
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: IN
72764: NOT
72765: OR
72766: IFFALSE 72770
// exit ;
72768: GO 72853
// tmp := [ ] ;
72770: LD_ADDR_VAR 0 5
72774: PUSH
72775: EMPTY
72776: ST_TO_ADDR
// for i in units do
72777: LD_ADDR_VAR 0 4
72781: PUSH
72782: LD_VAR 0 1
72786: PUSH
72787: FOR_IN
72788: IFFALSE 72822
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72790: LD_ADDR_VAR 0 5
72794: PUSH
72795: LD_VAR 0 5
72799: PPUSH
72800: LD_VAR 0 4
72804: PPUSH
72805: LD_VAR 0 2
72809: PPUSH
72810: CALL_OW 259
72814: PPUSH
72815: CALL 74214 0 2
72819: ST_TO_ADDR
72820: GO 72787
72822: POP
72823: POP
// if not tmp then
72824: LD_VAR 0 5
72828: NOT
72829: IFFALSE 72833
// exit ;
72831: GO 72853
// result := SortListByListDesc ( units , tmp ) ;
72833: LD_ADDR_VAR 0 3
72837: PUSH
72838: LD_VAR 0 1
72842: PPUSH
72843: LD_VAR 0 5
72847: PPUSH
72848: CALL_OW 77
72852: ST_TO_ADDR
// end ;
72853: LD_VAR 0 3
72857: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72858: LD_INT 0
72860: PPUSH
72861: PPUSH
72862: PPUSH
// result := false ;
72863: LD_ADDR_VAR 0 3
72867: PUSH
72868: LD_INT 0
72870: ST_TO_ADDR
// if not building then
72871: LD_VAR 0 2
72875: NOT
72876: IFFALSE 72880
// exit ;
72878: GO 73018
// x := GetX ( building ) ;
72880: LD_ADDR_VAR 0 4
72884: PUSH
72885: LD_VAR 0 2
72889: PPUSH
72890: CALL_OW 250
72894: ST_TO_ADDR
// y := GetY ( building ) ;
72895: LD_ADDR_VAR 0 5
72899: PUSH
72900: LD_VAR 0 2
72904: PPUSH
72905: CALL_OW 251
72909: ST_TO_ADDR
// if not x or not y then
72910: LD_VAR 0 4
72914: NOT
72915: PUSH
72916: LD_VAR 0 5
72920: NOT
72921: OR
72922: IFFALSE 72926
// exit ;
72924: GO 73018
// if GetTaskList ( unit ) then
72926: LD_VAR 0 1
72930: PPUSH
72931: CALL_OW 437
72935: IFFALSE 73018
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72937: LD_STRING e
72939: PUSH
72940: LD_VAR 0 1
72944: PPUSH
72945: CALL_OW 437
72949: PUSH
72950: LD_INT 1
72952: ARRAY
72953: PUSH
72954: LD_INT 1
72956: ARRAY
72957: EQUAL
72958: PUSH
72959: LD_VAR 0 4
72963: PUSH
72964: LD_VAR 0 1
72968: PPUSH
72969: CALL_OW 437
72973: PUSH
72974: LD_INT 1
72976: ARRAY
72977: PUSH
72978: LD_INT 2
72980: ARRAY
72981: EQUAL
72982: AND
72983: PUSH
72984: LD_VAR 0 5
72988: PUSH
72989: LD_VAR 0 1
72993: PPUSH
72994: CALL_OW 437
72998: PUSH
72999: LD_INT 1
73001: ARRAY
73002: PUSH
73003: LD_INT 3
73005: ARRAY
73006: EQUAL
73007: AND
73008: IFFALSE 73018
// result := true end ;
73010: LD_ADDR_VAR 0 3
73014: PUSH
73015: LD_INT 1
73017: ST_TO_ADDR
// end ;
73018: LD_VAR 0 3
73022: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73023: LD_INT 0
73025: PPUSH
// result := false ;
73026: LD_ADDR_VAR 0 4
73030: PUSH
73031: LD_INT 0
73033: ST_TO_ADDR
// if GetTaskList ( unit ) then
73034: LD_VAR 0 1
73038: PPUSH
73039: CALL_OW 437
73043: IFFALSE 73126
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73045: LD_STRING M
73047: PUSH
73048: LD_VAR 0 1
73052: PPUSH
73053: CALL_OW 437
73057: PUSH
73058: LD_INT 1
73060: ARRAY
73061: PUSH
73062: LD_INT 1
73064: ARRAY
73065: EQUAL
73066: PUSH
73067: LD_VAR 0 2
73071: PUSH
73072: LD_VAR 0 1
73076: PPUSH
73077: CALL_OW 437
73081: PUSH
73082: LD_INT 1
73084: ARRAY
73085: PUSH
73086: LD_INT 2
73088: ARRAY
73089: EQUAL
73090: AND
73091: PUSH
73092: LD_VAR 0 3
73096: PUSH
73097: LD_VAR 0 1
73101: PPUSH
73102: CALL_OW 437
73106: PUSH
73107: LD_INT 1
73109: ARRAY
73110: PUSH
73111: LD_INT 3
73113: ARRAY
73114: EQUAL
73115: AND
73116: IFFALSE 73126
// result := true ;
73118: LD_ADDR_VAR 0 4
73122: PUSH
73123: LD_INT 1
73125: ST_TO_ADDR
// end ; end ;
73126: LD_VAR 0 4
73130: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73131: LD_INT 0
73133: PPUSH
73134: PPUSH
73135: PPUSH
73136: PPUSH
// if not unit or not area then
73137: LD_VAR 0 1
73141: NOT
73142: PUSH
73143: LD_VAR 0 2
73147: NOT
73148: OR
73149: IFFALSE 73153
// exit ;
73151: GO 73317
// tmp := AreaToList ( area , i ) ;
73153: LD_ADDR_VAR 0 6
73157: PUSH
73158: LD_VAR 0 2
73162: PPUSH
73163: LD_VAR 0 5
73167: PPUSH
73168: CALL_OW 517
73172: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73173: LD_ADDR_VAR 0 5
73177: PUSH
73178: DOUBLE
73179: LD_INT 1
73181: DEC
73182: ST_TO_ADDR
73183: LD_VAR 0 6
73187: PUSH
73188: LD_INT 1
73190: ARRAY
73191: PUSH
73192: FOR_TO
73193: IFFALSE 73315
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73195: LD_ADDR_VAR 0 7
73199: PUSH
73200: LD_VAR 0 6
73204: PUSH
73205: LD_INT 1
73207: ARRAY
73208: PUSH
73209: LD_VAR 0 5
73213: ARRAY
73214: PUSH
73215: LD_VAR 0 6
73219: PUSH
73220: LD_INT 2
73222: ARRAY
73223: PUSH
73224: LD_VAR 0 5
73228: ARRAY
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73234: LD_VAR 0 7
73238: PUSH
73239: LD_INT 1
73241: ARRAY
73242: PPUSH
73243: LD_VAR 0 7
73247: PUSH
73248: LD_INT 2
73250: ARRAY
73251: PPUSH
73252: CALL_OW 428
73256: PUSH
73257: LD_INT 0
73259: EQUAL
73260: IFFALSE 73313
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73262: LD_VAR 0 1
73266: PPUSH
73267: LD_VAR 0 7
73271: PUSH
73272: LD_INT 1
73274: ARRAY
73275: PPUSH
73276: LD_VAR 0 7
73280: PUSH
73281: LD_INT 2
73283: ARRAY
73284: PPUSH
73285: LD_VAR 0 3
73289: PPUSH
73290: CALL_OW 48
// result := IsPlaced ( unit ) ;
73294: LD_ADDR_VAR 0 4
73298: PUSH
73299: LD_VAR 0 1
73303: PPUSH
73304: CALL_OW 305
73308: ST_TO_ADDR
// exit ;
73309: POP
73310: POP
73311: GO 73317
// end ; end ;
73313: GO 73192
73315: POP
73316: POP
// end ;
73317: LD_VAR 0 4
73321: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73322: LD_INT 0
73324: PPUSH
73325: PPUSH
73326: PPUSH
// if not side or side > 8 then
73327: LD_VAR 0 1
73331: NOT
73332: PUSH
73333: LD_VAR 0 1
73337: PUSH
73338: LD_INT 8
73340: GREATER
73341: OR
73342: IFFALSE 73346
// exit ;
73344: GO 73533
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73346: LD_ADDR_VAR 0 4
73350: PUSH
73351: LD_INT 22
73353: PUSH
73354: LD_VAR 0 1
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: PUSH
73363: LD_INT 21
73365: PUSH
73366: LD_INT 3
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: PPUSH
73377: CALL_OW 69
73381: ST_TO_ADDR
// if not tmp then
73382: LD_VAR 0 4
73386: NOT
73387: IFFALSE 73391
// exit ;
73389: GO 73533
// enable_addtolog := true ;
73391: LD_ADDR_OWVAR 81
73395: PUSH
73396: LD_INT 1
73398: ST_TO_ADDR
// AddToLog ( [ ) ;
73399: LD_STRING [
73401: PPUSH
73402: CALL_OW 561
// for i in tmp do
73406: LD_ADDR_VAR 0 3
73410: PUSH
73411: LD_VAR 0 4
73415: PUSH
73416: FOR_IN
73417: IFFALSE 73524
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73419: LD_STRING [
73421: PUSH
73422: LD_VAR 0 3
73426: PPUSH
73427: CALL_OW 266
73431: STR
73432: PUSH
73433: LD_STRING , 
73435: STR
73436: PUSH
73437: LD_VAR 0 3
73441: PPUSH
73442: CALL_OW 250
73446: STR
73447: PUSH
73448: LD_STRING , 
73450: STR
73451: PUSH
73452: LD_VAR 0 3
73456: PPUSH
73457: CALL_OW 251
73461: STR
73462: PUSH
73463: LD_STRING , 
73465: STR
73466: PUSH
73467: LD_VAR 0 3
73471: PPUSH
73472: CALL_OW 254
73476: STR
73477: PUSH
73478: LD_STRING , 
73480: STR
73481: PUSH
73482: LD_VAR 0 3
73486: PPUSH
73487: LD_INT 1
73489: PPUSH
73490: CALL_OW 268
73494: STR
73495: PUSH
73496: LD_STRING , 
73498: STR
73499: PUSH
73500: LD_VAR 0 3
73504: PPUSH
73505: LD_INT 2
73507: PPUSH
73508: CALL_OW 268
73512: STR
73513: PUSH
73514: LD_STRING ],
73516: STR
73517: PPUSH
73518: CALL_OW 561
// end ;
73522: GO 73416
73524: POP
73525: POP
// AddToLog ( ]; ) ;
73526: LD_STRING ];
73528: PPUSH
73529: CALL_OW 561
// end ;
73533: LD_VAR 0 2
73537: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73538: LD_INT 0
73540: PPUSH
73541: PPUSH
73542: PPUSH
73543: PPUSH
73544: PPUSH
// if not area or not rate or not max then
73545: LD_VAR 0 1
73549: NOT
73550: PUSH
73551: LD_VAR 0 2
73555: NOT
73556: OR
73557: PUSH
73558: LD_VAR 0 4
73562: NOT
73563: OR
73564: IFFALSE 73568
// exit ;
73566: GO 73757
// while 1 do
73568: LD_INT 1
73570: IFFALSE 73757
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73572: LD_ADDR_VAR 0 9
73576: PUSH
73577: LD_VAR 0 1
73581: PPUSH
73582: LD_INT 1
73584: PPUSH
73585: CALL_OW 287
73589: PUSH
73590: LD_INT 10
73592: MUL
73593: ST_TO_ADDR
// r := rate / 10 ;
73594: LD_ADDR_VAR 0 7
73598: PUSH
73599: LD_VAR 0 2
73603: PUSH
73604: LD_INT 10
73606: DIVREAL
73607: ST_TO_ADDR
// time := 1 1$00 ;
73608: LD_ADDR_VAR 0 8
73612: PUSH
73613: LD_INT 2100
73615: ST_TO_ADDR
// if amount < min then
73616: LD_VAR 0 9
73620: PUSH
73621: LD_VAR 0 3
73625: LESS
73626: IFFALSE 73644
// r := r * 2 else
73628: LD_ADDR_VAR 0 7
73632: PUSH
73633: LD_VAR 0 7
73637: PUSH
73638: LD_INT 2
73640: MUL
73641: ST_TO_ADDR
73642: GO 73670
// if amount > max then
73644: LD_VAR 0 9
73648: PUSH
73649: LD_VAR 0 4
73653: GREATER
73654: IFFALSE 73670
// r := r / 2 ;
73656: LD_ADDR_VAR 0 7
73660: PUSH
73661: LD_VAR 0 7
73665: PUSH
73666: LD_INT 2
73668: DIVREAL
73669: ST_TO_ADDR
// time := time / r ;
73670: LD_ADDR_VAR 0 8
73674: PUSH
73675: LD_VAR 0 8
73679: PUSH
73680: LD_VAR 0 7
73684: DIVREAL
73685: ST_TO_ADDR
// if time < 0 then
73686: LD_VAR 0 8
73690: PUSH
73691: LD_INT 0
73693: LESS
73694: IFFALSE 73711
// time := time * - 1 ;
73696: LD_ADDR_VAR 0 8
73700: PUSH
73701: LD_VAR 0 8
73705: PUSH
73706: LD_INT 1
73708: NEG
73709: MUL
73710: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73711: LD_VAR 0 8
73715: PUSH
73716: LD_INT 35
73718: PPUSH
73719: LD_INT 875
73721: PPUSH
73722: CALL_OW 12
73726: PLUS
73727: PPUSH
73728: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73732: LD_INT 1
73734: PPUSH
73735: LD_INT 5
73737: PPUSH
73738: CALL_OW 12
73742: PPUSH
73743: LD_VAR 0 1
73747: PPUSH
73748: LD_INT 1
73750: PPUSH
73751: CALL_OW 55
// end ;
73755: GO 73568
// end ;
73757: LD_VAR 0 5
73761: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73762: LD_INT 0
73764: PPUSH
73765: PPUSH
73766: PPUSH
73767: PPUSH
73768: PPUSH
73769: PPUSH
73770: PPUSH
73771: PPUSH
// if not turrets or not factories then
73772: LD_VAR 0 1
73776: NOT
73777: PUSH
73778: LD_VAR 0 2
73782: NOT
73783: OR
73784: IFFALSE 73788
// exit ;
73786: GO 74095
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73788: LD_ADDR_VAR 0 10
73792: PUSH
73793: LD_INT 5
73795: PUSH
73796: LD_INT 6
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: LD_INT 2
73805: PUSH
73806: LD_INT 4
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PUSH
73813: LD_INT 3
73815: PUSH
73816: LD_INT 5
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: LIST
73827: PUSH
73828: LD_INT 24
73830: PUSH
73831: LD_INT 25
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 23
73840: PUSH
73841: LD_INT 27
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: PUSH
73852: LD_INT 42
73854: PUSH
73855: LD_INT 43
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: PUSH
73862: LD_INT 44
73864: PUSH
73865: LD_INT 46
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_INT 45
73874: PUSH
73875: LD_INT 47
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: LIST
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: LIST
73891: ST_TO_ADDR
// result := [ ] ;
73892: LD_ADDR_VAR 0 3
73896: PUSH
73897: EMPTY
73898: ST_TO_ADDR
// for i in turrets do
73899: LD_ADDR_VAR 0 4
73903: PUSH
73904: LD_VAR 0 1
73908: PUSH
73909: FOR_IN
73910: IFFALSE 74093
// begin nat := GetNation ( i ) ;
73912: LD_ADDR_VAR 0 7
73916: PUSH
73917: LD_VAR 0 4
73921: PPUSH
73922: CALL_OW 248
73926: ST_TO_ADDR
// weapon := 0 ;
73927: LD_ADDR_VAR 0 8
73931: PUSH
73932: LD_INT 0
73934: ST_TO_ADDR
// if not nat then
73935: LD_VAR 0 7
73939: NOT
73940: IFFALSE 73944
// continue ;
73942: GO 73909
// for j in list [ nat ] do
73944: LD_ADDR_VAR 0 5
73948: PUSH
73949: LD_VAR 0 10
73953: PUSH
73954: LD_VAR 0 7
73958: ARRAY
73959: PUSH
73960: FOR_IN
73961: IFFALSE 74002
// if GetBWeapon ( i ) = j [ 1 ] then
73963: LD_VAR 0 4
73967: PPUSH
73968: CALL_OW 269
73972: PUSH
73973: LD_VAR 0 5
73977: PUSH
73978: LD_INT 1
73980: ARRAY
73981: EQUAL
73982: IFFALSE 74000
// begin weapon := j [ 2 ] ;
73984: LD_ADDR_VAR 0 8
73988: PUSH
73989: LD_VAR 0 5
73993: PUSH
73994: LD_INT 2
73996: ARRAY
73997: ST_TO_ADDR
// break ;
73998: GO 74002
// end ;
74000: GO 73960
74002: POP
74003: POP
// if not weapon then
74004: LD_VAR 0 8
74008: NOT
74009: IFFALSE 74013
// continue ;
74011: GO 73909
// for k in factories do
74013: LD_ADDR_VAR 0 6
74017: PUSH
74018: LD_VAR 0 2
74022: PUSH
74023: FOR_IN
74024: IFFALSE 74089
// begin weapons := AvailableWeaponList ( k ) ;
74026: LD_ADDR_VAR 0 9
74030: PUSH
74031: LD_VAR 0 6
74035: PPUSH
74036: CALL_OW 478
74040: ST_TO_ADDR
// if not weapons then
74041: LD_VAR 0 9
74045: NOT
74046: IFFALSE 74050
// continue ;
74048: GO 74023
// if weapon in weapons then
74050: LD_VAR 0 8
74054: PUSH
74055: LD_VAR 0 9
74059: IN
74060: IFFALSE 74087
// begin result := [ i , weapon ] ;
74062: LD_ADDR_VAR 0 3
74066: PUSH
74067: LD_VAR 0 4
74071: PUSH
74072: LD_VAR 0 8
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: ST_TO_ADDR
// exit ;
74081: POP
74082: POP
74083: POP
74084: POP
74085: GO 74095
// end ; end ;
74087: GO 74023
74089: POP
74090: POP
// end ;
74091: GO 73909
74093: POP
74094: POP
// end ;
74095: LD_VAR 0 3
74099: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74100: LD_INT 0
74102: PPUSH
// if not side or side > 8 then
74103: LD_VAR 0 3
74107: NOT
74108: PUSH
74109: LD_VAR 0 3
74113: PUSH
74114: LD_INT 8
74116: GREATER
74117: OR
74118: IFFALSE 74122
// exit ;
74120: GO 74181
// if not range then
74122: LD_VAR 0 4
74126: NOT
74127: IFFALSE 74138
// range := - 12 ;
74129: LD_ADDR_VAR 0 4
74133: PUSH
74134: LD_INT 12
74136: NEG
74137: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74138: LD_VAR 0 1
74142: PPUSH
74143: LD_VAR 0 2
74147: PPUSH
74148: LD_VAR 0 3
74152: PPUSH
74153: LD_VAR 0 4
74157: PPUSH
74158: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74162: LD_VAR 0 1
74166: PPUSH
74167: LD_VAR 0 2
74171: PPUSH
74172: LD_VAR 0 3
74176: PPUSH
74177: CALL_OW 331
// end ;
74181: LD_VAR 0 5
74185: RET
// export function Video ( mode ) ; begin
74186: LD_INT 0
74188: PPUSH
// ingame_video = mode ;
74189: LD_ADDR_OWVAR 52
74193: PUSH
74194: LD_VAR 0 1
74198: ST_TO_ADDR
// interface_hidden = mode ;
74199: LD_ADDR_OWVAR 54
74203: PUSH
74204: LD_VAR 0 1
74208: ST_TO_ADDR
// end ;
74209: LD_VAR 0 2
74213: RET
// export function Join ( array , element ) ; begin
74214: LD_INT 0
74216: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74217: LD_ADDR_VAR 0 3
74221: PUSH
74222: LD_VAR 0 1
74226: PPUSH
74227: LD_VAR 0 1
74231: PUSH
74232: LD_INT 1
74234: PLUS
74235: PPUSH
74236: LD_VAR 0 2
74240: PPUSH
74241: CALL_OW 1
74245: ST_TO_ADDR
// end ;
74246: LD_VAR 0 3
74250: RET
// export function JoinUnion ( array , element ) ; begin
74251: LD_INT 0
74253: PPUSH
// result := array union element ;
74254: LD_ADDR_VAR 0 3
74258: PUSH
74259: LD_VAR 0 1
74263: PUSH
74264: LD_VAR 0 2
74268: UNION
74269: ST_TO_ADDR
// end ;
74270: LD_VAR 0 3
74274: RET
// export function GetBehemoths ( side ) ; begin
74275: LD_INT 0
74277: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74278: LD_ADDR_VAR 0 2
74282: PUSH
74283: LD_INT 22
74285: PUSH
74286: LD_VAR 0 1
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: PUSH
74295: LD_INT 31
74297: PUSH
74298: LD_INT 25
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PPUSH
74309: CALL_OW 69
74313: ST_TO_ADDR
// end ;
74314: LD_VAR 0 2
74318: RET
// export function Shuffle ( array ) ; var i , index ; begin
74319: LD_INT 0
74321: PPUSH
74322: PPUSH
74323: PPUSH
// result := [ ] ;
74324: LD_ADDR_VAR 0 2
74328: PUSH
74329: EMPTY
74330: ST_TO_ADDR
// if not array then
74331: LD_VAR 0 1
74335: NOT
74336: IFFALSE 74340
// exit ;
74338: GO 74439
// Randomize ;
74340: CALL_OW 10
// for i = array downto 1 do
74344: LD_ADDR_VAR 0 3
74348: PUSH
74349: DOUBLE
74350: LD_VAR 0 1
74354: INC
74355: ST_TO_ADDR
74356: LD_INT 1
74358: PUSH
74359: FOR_DOWNTO
74360: IFFALSE 74437
// begin index := rand ( 1 , array ) ;
74362: LD_ADDR_VAR 0 4
74366: PUSH
74367: LD_INT 1
74369: PPUSH
74370: LD_VAR 0 1
74374: PPUSH
74375: CALL_OW 12
74379: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74380: LD_ADDR_VAR 0 2
74384: PUSH
74385: LD_VAR 0 2
74389: PPUSH
74390: LD_VAR 0 2
74394: PUSH
74395: LD_INT 1
74397: PLUS
74398: PPUSH
74399: LD_VAR 0 1
74403: PUSH
74404: LD_VAR 0 4
74408: ARRAY
74409: PPUSH
74410: CALL_OW 2
74414: ST_TO_ADDR
// array := Delete ( array , index ) ;
74415: LD_ADDR_VAR 0 1
74419: PUSH
74420: LD_VAR 0 1
74424: PPUSH
74425: LD_VAR 0 4
74429: PPUSH
74430: CALL_OW 3
74434: ST_TO_ADDR
// end ;
74435: GO 74359
74437: POP
74438: POP
// end ;
74439: LD_VAR 0 2
74443: RET
// export function GetBaseMaterials ( base ) ; begin
74444: LD_INT 0
74446: PPUSH
// result := [ 0 , 0 , 0 ] ;
74447: LD_ADDR_VAR 0 2
74451: PUSH
74452: LD_INT 0
74454: PUSH
74455: LD_INT 0
74457: PUSH
74458: LD_INT 0
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: LIST
74465: ST_TO_ADDR
// if not base then
74466: LD_VAR 0 1
74470: NOT
74471: IFFALSE 74475
// exit ;
74473: GO 74524
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74475: LD_ADDR_VAR 0 2
74479: PUSH
74480: LD_VAR 0 1
74484: PPUSH
74485: LD_INT 1
74487: PPUSH
74488: CALL_OW 275
74492: PUSH
74493: LD_VAR 0 1
74497: PPUSH
74498: LD_INT 2
74500: PPUSH
74501: CALL_OW 275
74505: PUSH
74506: LD_VAR 0 1
74510: PPUSH
74511: LD_INT 3
74513: PPUSH
74514: CALL_OW 275
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: LIST
74523: ST_TO_ADDR
// end ;
74524: LD_VAR 0 2
74528: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74529: LD_INT 0
74531: PPUSH
74532: PPUSH
// result := array ;
74533: LD_ADDR_VAR 0 3
74537: PUSH
74538: LD_VAR 0 1
74542: ST_TO_ADDR
// if size >= result then
74543: LD_VAR 0 2
74547: PUSH
74548: LD_VAR 0 3
74552: GREATEREQUAL
74553: IFFALSE 74557
// exit ;
74555: GO 74607
// if size then
74557: LD_VAR 0 2
74561: IFFALSE 74607
// for i := array downto size do
74563: LD_ADDR_VAR 0 4
74567: PUSH
74568: DOUBLE
74569: LD_VAR 0 1
74573: INC
74574: ST_TO_ADDR
74575: LD_VAR 0 2
74579: PUSH
74580: FOR_DOWNTO
74581: IFFALSE 74605
// result := Delete ( result , result ) ;
74583: LD_ADDR_VAR 0 3
74587: PUSH
74588: LD_VAR 0 3
74592: PPUSH
74593: LD_VAR 0 3
74597: PPUSH
74598: CALL_OW 3
74602: ST_TO_ADDR
74603: GO 74580
74605: POP
74606: POP
// end ;
74607: LD_VAR 0 3
74611: RET
// export function ComExit ( unit ) ; var tmp ; begin
74612: LD_INT 0
74614: PPUSH
74615: PPUSH
// if not IsInUnit ( unit ) then
74616: LD_VAR 0 1
74620: PPUSH
74621: CALL_OW 310
74625: NOT
74626: IFFALSE 74630
// exit ;
74628: GO 74690
// tmp := IsInUnit ( unit ) ;
74630: LD_ADDR_VAR 0 3
74634: PUSH
74635: LD_VAR 0 1
74639: PPUSH
74640: CALL_OW 310
74644: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74645: LD_VAR 0 3
74649: PPUSH
74650: CALL_OW 247
74654: PUSH
74655: LD_INT 2
74657: EQUAL
74658: IFFALSE 74671
// ComExitVehicle ( unit ) else
74660: LD_VAR 0 1
74664: PPUSH
74665: CALL_OW 121
74669: GO 74680
// ComExitBuilding ( unit ) ;
74671: LD_VAR 0 1
74675: PPUSH
74676: CALL_OW 122
// result := tmp ;
74680: LD_ADDR_VAR 0 2
74684: PUSH
74685: LD_VAR 0 3
74689: ST_TO_ADDR
// end ;
74690: LD_VAR 0 2
74694: RET
// export function ComExitAll ( units ) ; var i ; begin
74695: LD_INT 0
74697: PPUSH
74698: PPUSH
// if not units then
74699: LD_VAR 0 1
74703: NOT
74704: IFFALSE 74708
// exit ;
74706: GO 74734
// for i in units do
74708: LD_ADDR_VAR 0 3
74712: PUSH
74713: LD_VAR 0 1
74717: PUSH
74718: FOR_IN
74719: IFFALSE 74732
// ComExit ( i ) ;
74721: LD_VAR 0 3
74725: PPUSH
74726: CALL 74612 0 1
74730: GO 74718
74732: POP
74733: POP
// end ;
74734: LD_VAR 0 2
74738: RET
// export function ResetHc ; begin
74739: LD_INT 0
74741: PPUSH
// InitHc ;
74742: CALL_OW 19
// hc_importance := 0 ;
74746: LD_ADDR_OWVAR 32
74750: PUSH
74751: LD_INT 0
74753: ST_TO_ADDR
// end ;
74754: LD_VAR 0 1
74758: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74759: LD_INT 0
74761: PPUSH
74762: PPUSH
74763: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74764: LD_ADDR_VAR 0 6
74768: PUSH
74769: LD_VAR 0 1
74773: PUSH
74774: LD_VAR 0 3
74778: PLUS
74779: PUSH
74780: LD_INT 2
74782: DIV
74783: ST_TO_ADDR
// if _x < 0 then
74784: LD_VAR 0 6
74788: PUSH
74789: LD_INT 0
74791: LESS
74792: IFFALSE 74809
// _x := _x * - 1 ;
74794: LD_ADDR_VAR 0 6
74798: PUSH
74799: LD_VAR 0 6
74803: PUSH
74804: LD_INT 1
74806: NEG
74807: MUL
74808: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74809: LD_ADDR_VAR 0 7
74813: PUSH
74814: LD_VAR 0 2
74818: PUSH
74819: LD_VAR 0 4
74823: PLUS
74824: PUSH
74825: LD_INT 2
74827: DIV
74828: ST_TO_ADDR
// if _y < 0 then
74829: LD_VAR 0 7
74833: PUSH
74834: LD_INT 0
74836: LESS
74837: IFFALSE 74854
// _y := _y * - 1 ;
74839: LD_ADDR_VAR 0 7
74843: PUSH
74844: LD_VAR 0 7
74848: PUSH
74849: LD_INT 1
74851: NEG
74852: MUL
74853: ST_TO_ADDR
// result := [ _x , _y ] ;
74854: LD_ADDR_VAR 0 5
74858: PUSH
74859: LD_VAR 0 6
74863: PUSH
74864: LD_VAR 0 7
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: ST_TO_ADDR
// end ;
74873: LD_VAR 0 5
74877: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74878: LD_INT 0
74880: PPUSH
74881: PPUSH
74882: PPUSH
74883: PPUSH
// task := GetTaskList ( unit ) ;
74884: LD_ADDR_VAR 0 7
74888: PUSH
74889: LD_VAR 0 1
74893: PPUSH
74894: CALL_OW 437
74898: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74899: LD_VAR 0 7
74903: NOT
74904: PUSH
74905: LD_VAR 0 1
74909: PPUSH
74910: LD_VAR 0 2
74914: PPUSH
74915: CALL_OW 308
74919: NOT
74920: AND
74921: IFFALSE 74925
// exit ;
74923: GO 75043
// if IsInArea ( unit , area ) then
74925: LD_VAR 0 1
74929: PPUSH
74930: LD_VAR 0 2
74934: PPUSH
74935: CALL_OW 308
74939: IFFALSE 74957
// begin ComMoveToArea ( unit , goAway ) ;
74941: LD_VAR 0 1
74945: PPUSH
74946: LD_VAR 0 3
74950: PPUSH
74951: CALL_OW 113
// exit ;
74955: GO 75043
// end ; if task [ 1 ] [ 1 ] <> M then
74957: LD_VAR 0 7
74961: PUSH
74962: LD_INT 1
74964: ARRAY
74965: PUSH
74966: LD_INT 1
74968: ARRAY
74969: PUSH
74970: LD_STRING M
74972: NONEQUAL
74973: IFFALSE 74977
// exit ;
74975: GO 75043
// x := task [ 1 ] [ 2 ] ;
74977: LD_ADDR_VAR 0 5
74981: PUSH
74982: LD_VAR 0 7
74986: PUSH
74987: LD_INT 1
74989: ARRAY
74990: PUSH
74991: LD_INT 2
74993: ARRAY
74994: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74995: LD_ADDR_VAR 0 6
74999: PUSH
75000: LD_VAR 0 7
75004: PUSH
75005: LD_INT 1
75007: ARRAY
75008: PUSH
75009: LD_INT 3
75011: ARRAY
75012: ST_TO_ADDR
// if InArea ( x , y , area ) then
75013: LD_VAR 0 5
75017: PPUSH
75018: LD_VAR 0 6
75022: PPUSH
75023: LD_VAR 0 2
75027: PPUSH
75028: CALL_OW 309
75032: IFFALSE 75043
// ComStop ( unit ) ;
75034: LD_VAR 0 1
75038: PPUSH
75039: CALL_OW 141
// end ;
75043: LD_VAR 0 4
75047: RET
// export function Abs ( value ) ; begin
75048: LD_INT 0
75050: PPUSH
// result := value ;
75051: LD_ADDR_VAR 0 2
75055: PUSH
75056: LD_VAR 0 1
75060: ST_TO_ADDR
// if value < 0 then
75061: LD_VAR 0 1
75065: PUSH
75066: LD_INT 0
75068: LESS
75069: IFFALSE 75086
// result := value * - 1 ;
75071: LD_ADDR_VAR 0 2
75075: PUSH
75076: LD_VAR 0 1
75080: PUSH
75081: LD_INT 1
75083: NEG
75084: MUL
75085: ST_TO_ADDR
// end ;
75086: LD_VAR 0 2
75090: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75091: LD_INT 0
75093: PPUSH
75094: PPUSH
75095: PPUSH
75096: PPUSH
75097: PPUSH
75098: PPUSH
75099: PPUSH
75100: PPUSH
// if not unit or not building then
75101: LD_VAR 0 1
75105: NOT
75106: PUSH
75107: LD_VAR 0 2
75111: NOT
75112: OR
75113: IFFALSE 75117
// exit ;
75115: GO 75343
// x := GetX ( building ) ;
75117: LD_ADDR_VAR 0 4
75121: PUSH
75122: LD_VAR 0 2
75126: PPUSH
75127: CALL_OW 250
75131: ST_TO_ADDR
// y := GetY ( building ) ;
75132: LD_ADDR_VAR 0 6
75136: PUSH
75137: LD_VAR 0 2
75141: PPUSH
75142: CALL_OW 251
75146: ST_TO_ADDR
// d := GetDir ( building ) ;
75147: LD_ADDR_VAR 0 8
75151: PUSH
75152: LD_VAR 0 2
75156: PPUSH
75157: CALL_OW 254
75161: ST_TO_ADDR
// r := 4 ;
75162: LD_ADDR_VAR 0 9
75166: PUSH
75167: LD_INT 4
75169: ST_TO_ADDR
// for i := 1 to 5 do
75170: LD_ADDR_VAR 0 10
75174: PUSH
75175: DOUBLE
75176: LD_INT 1
75178: DEC
75179: ST_TO_ADDR
75180: LD_INT 5
75182: PUSH
75183: FOR_TO
75184: IFFALSE 75341
// begin _x := ShiftX ( x , d , r + i ) ;
75186: LD_ADDR_VAR 0 5
75190: PUSH
75191: LD_VAR 0 4
75195: PPUSH
75196: LD_VAR 0 8
75200: PPUSH
75201: LD_VAR 0 9
75205: PUSH
75206: LD_VAR 0 10
75210: PLUS
75211: PPUSH
75212: CALL_OW 272
75216: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75217: LD_ADDR_VAR 0 7
75221: PUSH
75222: LD_VAR 0 6
75226: PPUSH
75227: LD_VAR 0 8
75231: PPUSH
75232: LD_VAR 0 9
75236: PUSH
75237: LD_VAR 0 10
75241: PLUS
75242: PPUSH
75243: CALL_OW 273
75247: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75248: LD_VAR 0 5
75252: PPUSH
75253: LD_VAR 0 7
75257: PPUSH
75258: CALL_OW 488
75262: PUSH
75263: LD_VAR 0 5
75267: PPUSH
75268: LD_VAR 0 7
75272: PPUSH
75273: CALL_OW 428
75277: PPUSH
75278: CALL_OW 247
75282: PUSH
75283: LD_INT 3
75285: PUSH
75286: LD_INT 2
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: IN
75293: NOT
75294: AND
75295: IFFALSE 75339
// begin ComMoveXY ( unit , _x , _y ) ;
75297: LD_VAR 0 1
75301: PPUSH
75302: LD_VAR 0 5
75306: PPUSH
75307: LD_VAR 0 7
75311: PPUSH
75312: CALL_OW 111
// result := [ _x , _y ] ;
75316: LD_ADDR_VAR 0 3
75320: PUSH
75321: LD_VAR 0 5
75325: PUSH
75326: LD_VAR 0 7
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: ST_TO_ADDR
// exit ;
75335: POP
75336: POP
75337: GO 75343
// end ; end ;
75339: GO 75183
75341: POP
75342: POP
// end ;
75343: LD_VAR 0 3
75347: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75348: LD_INT 0
75350: PPUSH
75351: PPUSH
75352: PPUSH
// result := 0 ;
75353: LD_ADDR_VAR 0 3
75357: PUSH
75358: LD_INT 0
75360: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75361: LD_VAR 0 1
75365: PUSH
75366: LD_INT 0
75368: LESS
75369: PUSH
75370: LD_VAR 0 1
75374: PUSH
75375: LD_INT 8
75377: GREATER
75378: OR
75379: PUSH
75380: LD_VAR 0 2
75384: PUSH
75385: LD_INT 0
75387: LESS
75388: OR
75389: PUSH
75390: LD_VAR 0 2
75394: PUSH
75395: LD_INT 8
75397: GREATER
75398: OR
75399: IFFALSE 75403
// exit ;
75401: GO 75478
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75403: LD_ADDR_VAR 0 4
75407: PUSH
75408: LD_INT 22
75410: PUSH
75411: LD_VAR 0 2
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: PPUSH
75420: CALL_OW 69
75424: PUSH
75425: FOR_IN
75426: IFFALSE 75476
// begin un := UnitShoot ( i ) ;
75428: LD_ADDR_VAR 0 5
75432: PUSH
75433: LD_VAR 0 4
75437: PPUSH
75438: CALL_OW 504
75442: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75443: LD_VAR 0 5
75447: PPUSH
75448: CALL_OW 255
75452: PUSH
75453: LD_VAR 0 1
75457: EQUAL
75458: IFFALSE 75474
// begin result := un ;
75460: LD_ADDR_VAR 0 3
75464: PUSH
75465: LD_VAR 0 5
75469: ST_TO_ADDR
// exit ;
75470: POP
75471: POP
75472: GO 75478
// end ; end ;
75474: GO 75425
75476: POP
75477: POP
// end ;
75478: LD_VAR 0 3
75482: RET
// export function GetCargoBay ( units ) ; begin
75483: LD_INT 0
75485: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75486: LD_ADDR_VAR 0 2
75490: PUSH
75491: LD_VAR 0 1
75495: PPUSH
75496: LD_INT 2
75498: PUSH
75499: LD_INT 34
75501: PUSH
75502: LD_INT 12
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: PUSH
75509: LD_INT 34
75511: PUSH
75512: LD_INT 51
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: PUSH
75519: LD_INT 34
75521: PUSH
75522: LD_INT 32
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: PUSH
75529: LD_INT 34
75531: PUSH
75532: LD_INT 89
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: PPUSH
75546: CALL_OW 72
75550: ST_TO_ADDR
// end ;
75551: LD_VAR 0 2
75555: RET
// export function Negate ( value ) ; begin
75556: LD_INT 0
75558: PPUSH
// result := not value ;
75559: LD_ADDR_VAR 0 2
75563: PUSH
75564: LD_VAR 0 1
75568: NOT
75569: ST_TO_ADDR
// end ;
75570: LD_VAR 0 2
75574: RET
// export function Inc ( value ) ; begin
75575: LD_INT 0
75577: PPUSH
// result := value + 1 ;
75578: LD_ADDR_VAR 0 2
75582: PUSH
75583: LD_VAR 0 1
75587: PUSH
75588: LD_INT 1
75590: PLUS
75591: ST_TO_ADDR
// end ;
75592: LD_VAR 0 2
75596: RET
// export function Dec ( value ) ; begin
75597: LD_INT 0
75599: PPUSH
// result := value - 1 ;
75600: LD_ADDR_VAR 0 2
75604: PUSH
75605: LD_VAR 0 1
75609: PUSH
75610: LD_INT 1
75612: MINUS
75613: ST_TO_ADDR
// end ;
75614: LD_VAR 0 2
75618: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75619: LD_INT 0
75621: PPUSH
75622: PPUSH
75623: PPUSH
75624: PPUSH
75625: PPUSH
75626: PPUSH
75627: PPUSH
75628: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75629: LD_VAR 0 1
75633: PPUSH
75634: LD_VAR 0 2
75638: PPUSH
75639: CALL_OW 488
75643: NOT
75644: PUSH
75645: LD_VAR 0 3
75649: PPUSH
75650: LD_VAR 0 4
75654: PPUSH
75655: CALL_OW 488
75659: NOT
75660: OR
75661: IFFALSE 75674
// begin result := - 1 ;
75663: LD_ADDR_VAR 0 5
75667: PUSH
75668: LD_INT 1
75670: NEG
75671: ST_TO_ADDR
// exit ;
75672: GO 75909
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75674: LD_ADDR_VAR 0 12
75678: PUSH
75679: LD_VAR 0 1
75683: PPUSH
75684: LD_VAR 0 2
75688: PPUSH
75689: LD_VAR 0 3
75693: PPUSH
75694: LD_VAR 0 4
75698: PPUSH
75699: CALL 74759 0 4
75703: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75704: LD_ADDR_VAR 0 11
75708: PUSH
75709: LD_VAR 0 1
75713: PPUSH
75714: LD_VAR 0 2
75718: PPUSH
75719: LD_VAR 0 12
75723: PUSH
75724: LD_INT 1
75726: ARRAY
75727: PPUSH
75728: LD_VAR 0 12
75732: PUSH
75733: LD_INT 2
75735: ARRAY
75736: PPUSH
75737: CALL_OW 298
75741: ST_TO_ADDR
// distance := 9999 ;
75742: LD_ADDR_VAR 0 10
75746: PUSH
75747: LD_INT 9999
75749: ST_TO_ADDR
// for i := 0 to 5 do
75750: LD_ADDR_VAR 0 6
75754: PUSH
75755: DOUBLE
75756: LD_INT 0
75758: DEC
75759: ST_TO_ADDR
75760: LD_INT 5
75762: PUSH
75763: FOR_TO
75764: IFFALSE 75907
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75766: LD_ADDR_VAR 0 7
75770: PUSH
75771: LD_VAR 0 1
75775: PPUSH
75776: LD_VAR 0 6
75780: PPUSH
75781: LD_VAR 0 11
75785: PPUSH
75786: CALL_OW 272
75790: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75791: LD_ADDR_VAR 0 8
75795: PUSH
75796: LD_VAR 0 2
75800: PPUSH
75801: LD_VAR 0 6
75805: PPUSH
75806: LD_VAR 0 11
75810: PPUSH
75811: CALL_OW 273
75815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75816: LD_VAR 0 7
75820: PPUSH
75821: LD_VAR 0 8
75825: PPUSH
75826: CALL_OW 488
75830: NOT
75831: IFFALSE 75835
// continue ;
75833: GO 75763
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75835: LD_ADDR_VAR 0 9
75839: PUSH
75840: LD_VAR 0 12
75844: PUSH
75845: LD_INT 1
75847: ARRAY
75848: PPUSH
75849: LD_VAR 0 12
75853: PUSH
75854: LD_INT 2
75856: ARRAY
75857: PPUSH
75858: LD_VAR 0 7
75862: PPUSH
75863: LD_VAR 0 8
75867: PPUSH
75868: CALL_OW 298
75872: ST_TO_ADDR
// if tmp < distance then
75873: LD_VAR 0 9
75877: PUSH
75878: LD_VAR 0 10
75882: LESS
75883: IFFALSE 75905
// begin result := i ;
75885: LD_ADDR_VAR 0 5
75889: PUSH
75890: LD_VAR 0 6
75894: ST_TO_ADDR
// distance := tmp ;
75895: LD_ADDR_VAR 0 10
75899: PUSH
75900: LD_VAR 0 9
75904: ST_TO_ADDR
// end ; end ;
75905: GO 75763
75907: POP
75908: POP
// end ;
75909: LD_VAR 0 5
75913: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75914: LD_INT 0
75916: PPUSH
75917: PPUSH
// if not driver or not IsInUnit ( driver ) then
75918: LD_VAR 0 1
75922: NOT
75923: PUSH
75924: LD_VAR 0 1
75928: PPUSH
75929: CALL_OW 310
75933: NOT
75934: OR
75935: IFFALSE 75939
// exit ;
75937: GO 76029
// vehicle := IsInUnit ( driver ) ;
75939: LD_ADDR_VAR 0 3
75943: PUSH
75944: LD_VAR 0 1
75948: PPUSH
75949: CALL_OW 310
75953: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75954: LD_VAR 0 1
75958: PPUSH
75959: LD_STRING \
75961: PUSH
75962: LD_INT 0
75964: PUSH
75965: LD_INT 0
75967: PUSH
75968: LD_INT 0
75970: PUSH
75971: LD_INT 0
75973: PUSH
75974: LD_INT 0
75976: PUSH
75977: LD_INT 0
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: PUSH
75989: LD_STRING E
75991: PUSH
75992: LD_INT 0
75994: PUSH
75995: LD_INT 0
75997: PUSH
75998: LD_VAR 0 3
76002: PUSH
76003: LD_INT 0
76005: PUSH
76006: LD_INT 0
76008: PUSH
76009: LD_INT 0
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: PPUSH
76025: CALL_OW 446
// end ;
76029: LD_VAR 0 2
76033: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76034: LD_INT 0
76036: PPUSH
76037: PPUSH
// if not driver or not IsInUnit ( driver ) then
76038: LD_VAR 0 1
76042: NOT
76043: PUSH
76044: LD_VAR 0 1
76048: PPUSH
76049: CALL_OW 310
76053: NOT
76054: OR
76055: IFFALSE 76059
// exit ;
76057: GO 76149
// vehicle := IsInUnit ( driver ) ;
76059: LD_ADDR_VAR 0 3
76063: PUSH
76064: LD_VAR 0 1
76068: PPUSH
76069: CALL_OW 310
76073: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76074: LD_VAR 0 1
76078: PPUSH
76079: LD_STRING \
76081: PUSH
76082: LD_INT 0
76084: PUSH
76085: LD_INT 0
76087: PUSH
76088: LD_INT 0
76090: PUSH
76091: LD_INT 0
76093: PUSH
76094: LD_INT 0
76096: PUSH
76097: LD_INT 0
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: LIST
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: PUSH
76109: LD_STRING E
76111: PUSH
76112: LD_INT 0
76114: PUSH
76115: LD_INT 0
76117: PUSH
76118: LD_VAR 0 3
76122: PUSH
76123: LD_INT 0
76125: PUSH
76126: LD_INT 0
76128: PUSH
76129: LD_INT 0
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: LIST
76136: LIST
76137: LIST
76138: LIST
76139: LIST
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: PPUSH
76145: CALL_OW 447
// end ;
76149: LD_VAR 0 2
76153: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76154: LD_INT 0
76156: PPUSH
76157: PPUSH
76158: PPUSH
// tmp := [ ] ;
76159: LD_ADDR_VAR 0 5
76163: PUSH
76164: EMPTY
76165: ST_TO_ADDR
// for i in units do
76166: LD_ADDR_VAR 0 4
76170: PUSH
76171: LD_VAR 0 1
76175: PUSH
76176: FOR_IN
76177: IFFALSE 76215
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76179: LD_ADDR_VAR 0 5
76183: PUSH
76184: LD_VAR 0 5
76188: PPUSH
76189: LD_VAR 0 5
76193: PUSH
76194: LD_INT 1
76196: PLUS
76197: PPUSH
76198: LD_VAR 0 4
76202: PPUSH
76203: CALL_OW 256
76207: PPUSH
76208: CALL_OW 2
76212: ST_TO_ADDR
76213: GO 76176
76215: POP
76216: POP
// if not tmp then
76217: LD_VAR 0 5
76221: NOT
76222: IFFALSE 76226
// exit ;
76224: GO 76274
// if asc then
76226: LD_VAR 0 2
76230: IFFALSE 76254
// result := SortListByListAsc ( units , tmp ) else
76232: LD_ADDR_VAR 0 3
76236: PUSH
76237: LD_VAR 0 1
76241: PPUSH
76242: LD_VAR 0 5
76246: PPUSH
76247: CALL_OW 76
76251: ST_TO_ADDR
76252: GO 76274
// result := SortListByListDesc ( units , tmp ) ;
76254: LD_ADDR_VAR 0 3
76258: PUSH
76259: LD_VAR 0 1
76263: PPUSH
76264: LD_VAR 0 5
76268: PPUSH
76269: CALL_OW 77
76273: ST_TO_ADDR
// end ;
76274: LD_VAR 0 3
76278: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76279: LD_INT 0
76281: PPUSH
76282: PPUSH
// task := GetTaskList ( mech ) ;
76283: LD_ADDR_VAR 0 4
76287: PUSH
76288: LD_VAR 0 1
76292: PPUSH
76293: CALL_OW 437
76297: ST_TO_ADDR
// if not task then
76298: LD_VAR 0 4
76302: NOT
76303: IFFALSE 76307
// exit ;
76305: GO 76349
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76307: LD_ADDR_VAR 0 3
76311: PUSH
76312: LD_VAR 0 4
76316: PUSH
76317: LD_INT 1
76319: ARRAY
76320: PUSH
76321: LD_INT 1
76323: ARRAY
76324: PUSH
76325: LD_STRING r
76327: EQUAL
76328: PUSH
76329: LD_VAR 0 4
76333: PUSH
76334: LD_INT 1
76336: ARRAY
76337: PUSH
76338: LD_INT 4
76340: ARRAY
76341: PUSH
76342: LD_VAR 0 2
76346: EQUAL
76347: AND
76348: ST_TO_ADDR
// end ;
76349: LD_VAR 0 3
76353: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76354: LD_INT 0
76356: PPUSH
// SetDir ( unit , d ) ;
76357: LD_VAR 0 1
76361: PPUSH
76362: LD_VAR 0 4
76366: PPUSH
76367: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76371: LD_VAR 0 1
76375: PPUSH
76376: LD_VAR 0 2
76380: PPUSH
76381: LD_VAR 0 3
76385: PPUSH
76386: LD_VAR 0 5
76390: PPUSH
76391: CALL_OW 48
// end ;
76395: LD_VAR 0 6
76399: RET
// export function ToNaturalNumber ( number ) ; begin
76400: LD_INT 0
76402: PPUSH
// result := number div 1 ;
76403: LD_ADDR_VAR 0 2
76407: PUSH
76408: LD_VAR 0 1
76412: PUSH
76413: LD_INT 1
76415: DIV
76416: ST_TO_ADDR
// if number < 0 then
76417: LD_VAR 0 1
76421: PUSH
76422: LD_INT 0
76424: LESS
76425: IFFALSE 76435
// result := 0 ;
76427: LD_ADDR_VAR 0 2
76431: PUSH
76432: LD_INT 0
76434: ST_TO_ADDR
// end ;
76435: LD_VAR 0 2
76439: RET
// export function SortByClass ( units , class ) ; var un ; begin
76440: LD_INT 0
76442: PPUSH
76443: PPUSH
// if not units or not class then
76444: LD_VAR 0 1
76448: NOT
76449: PUSH
76450: LD_VAR 0 2
76454: NOT
76455: OR
76456: IFFALSE 76460
// exit ;
76458: GO 76555
// result := [ ] ;
76460: LD_ADDR_VAR 0 3
76464: PUSH
76465: EMPTY
76466: ST_TO_ADDR
// for un in units do
76467: LD_ADDR_VAR 0 4
76471: PUSH
76472: LD_VAR 0 1
76476: PUSH
76477: FOR_IN
76478: IFFALSE 76553
// if GetClass ( un ) = class then
76480: LD_VAR 0 4
76484: PPUSH
76485: CALL_OW 257
76489: PUSH
76490: LD_VAR 0 2
76494: EQUAL
76495: IFFALSE 76522
// result := Insert ( result , 1 , un ) else
76497: LD_ADDR_VAR 0 3
76501: PUSH
76502: LD_VAR 0 3
76506: PPUSH
76507: LD_INT 1
76509: PPUSH
76510: LD_VAR 0 4
76514: PPUSH
76515: CALL_OW 2
76519: ST_TO_ADDR
76520: GO 76551
// result := Replace ( result , result + 1 , un ) ;
76522: LD_ADDR_VAR 0 3
76526: PUSH
76527: LD_VAR 0 3
76531: PPUSH
76532: LD_VAR 0 3
76536: PUSH
76537: LD_INT 1
76539: PLUS
76540: PPUSH
76541: LD_VAR 0 4
76545: PPUSH
76546: CALL_OW 1
76550: ST_TO_ADDR
76551: GO 76477
76553: POP
76554: POP
// end ;
76555: LD_VAR 0 3
76559: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76560: LD_INT 0
76562: PPUSH
76563: PPUSH
76564: PPUSH
76565: PPUSH
76566: PPUSH
76567: PPUSH
76568: PPUSH
// result := [ ] ;
76569: LD_ADDR_VAR 0 4
76573: PUSH
76574: EMPTY
76575: ST_TO_ADDR
// if x - r < 0 then
76576: LD_VAR 0 1
76580: PUSH
76581: LD_VAR 0 3
76585: MINUS
76586: PUSH
76587: LD_INT 0
76589: LESS
76590: IFFALSE 76602
// min_x := 0 else
76592: LD_ADDR_VAR 0 8
76596: PUSH
76597: LD_INT 0
76599: ST_TO_ADDR
76600: GO 76618
// min_x := x - r ;
76602: LD_ADDR_VAR 0 8
76606: PUSH
76607: LD_VAR 0 1
76611: PUSH
76612: LD_VAR 0 3
76616: MINUS
76617: ST_TO_ADDR
// if y - r < 0 then
76618: LD_VAR 0 2
76622: PUSH
76623: LD_VAR 0 3
76627: MINUS
76628: PUSH
76629: LD_INT 0
76631: LESS
76632: IFFALSE 76644
// min_y := 0 else
76634: LD_ADDR_VAR 0 7
76638: PUSH
76639: LD_INT 0
76641: ST_TO_ADDR
76642: GO 76660
// min_y := y - r ;
76644: LD_ADDR_VAR 0 7
76648: PUSH
76649: LD_VAR 0 2
76653: PUSH
76654: LD_VAR 0 3
76658: MINUS
76659: ST_TO_ADDR
// max_x := x + r ;
76660: LD_ADDR_VAR 0 9
76664: PUSH
76665: LD_VAR 0 1
76669: PUSH
76670: LD_VAR 0 3
76674: PLUS
76675: ST_TO_ADDR
// max_y := y + r ;
76676: LD_ADDR_VAR 0 10
76680: PUSH
76681: LD_VAR 0 2
76685: PUSH
76686: LD_VAR 0 3
76690: PLUS
76691: ST_TO_ADDR
// for _x = min_x to max_x do
76692: LD_ADDR_VAR 0 5
76696: PUSH
76697: DOUBLE
76698: LD_VAR 0 8
76702: DEC
76703: ST_TO_ADDR
76704: LD_VAR 0 9
76708: PUSH
76709: FOR_TO
76710: IFFALSE 76811
// for _y = min_y to max_y do
76712: LD_ADDR_VAR 0 6
76716: PUSH
76717: DOUBLE
76718: LD_VAR 0 7
76722: DEC
76723: ST_TO_ADDR
76724: LD_VAR 0 10
76728: PUSH
76729: FOR_TO
76730: IFFALSE 76807
// begin if not ValidHex ( _x , _y ) then
76732: LD_VAR 0 5
76736: PPUSH
76737: LD_VAR 0 6
76741: PPUSH
76742: CALL_OW 488
76746: NOT
76747: IFFALSE 76751
// continue ;
76749: GO 76729
// if GetResourceTypeXY ( _x , _y ) then
76751: LD_VAR 0 5
76755: PPUSH
76756: LD_VAR 0 6
76760: PPUSH
76761: CALL_OW 283
76765: IFFALSE 76805
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76767: LD_ADDR_VAR 0 4
76771: PUSH
76772: LD_VAR 0 4
76776: PPUSH
76777: LD_VAR 0 4
76781: PUSH
76782: LD_INT 1
76784: PLUS
76785: PPUSH
76786: LD_VAR 0 5
76790: PUSH
76791: LD_VAR 0 6
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PPUSH
76800: CALL_OW 1
76804: ST_TO_ADDR
// end ;
76805: GO 76729
76807: POP
76808: POP
76809: GO 76709
76811: POP
76812: POP
// end ;
76813: LD_VAR 0 4
76817: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76818: LD_INT 0
76820: PPUSH
76821: PPUSH
76822: PPUSH
76823: PPUSH
76824: PPUSH
76825: PPUSH
76826: PPUSH
76827: PPUSH
// if not units then
76828: LD_VAR 0 1
76832: NOT
76833: IFFALSE 76837
// exit ;
76835: GO 77361
// result := UnitFilter ( units , [ f_ok ] ) ;
76837: LD_ADDR_VAR 0 3
76841: PUSH
76842: LD_VAR 0 1
76846: PPUSH
76847: LD_INT 50
76849: PUSH
76850: EMPTY
76851: LIST
76852: PPUSH
76853: CALL_OW 72
76857: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76858: LD_ADDR_VAR 0 8
76862: PUSH
76863: LD_VAR 0 1
76867: PUSH
76868: LD_INT 1
76870: ARRAY
76871: PPUSH
76872: CALL_OW 255
76876: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76877: LD_ADDR_VAR 0 10
76881: PUSH
76882: LD_INT 29
76884: PUSH
76885: LD_INT 91
76887: PUSH
76888: LD_INT 49
76890: PUSH
76891: EMPTY
76892: LIST
76893: LIST
76894: LIST
76895: ST_TO_ADDR
// if not result then
76896: LD_VAR 0 3
76900: NOT
76901: IFFALSE 76905
// exit ;
76903: GO 77361
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76905: LD_ADDR_VAR 0 5
76909: PUSH
76910: LD_INT 81
76912: PUSH
76913: LD_VAR 0 8
76917: PUSH
76918: EMPTY
76919: LIST
76920: LIST
76921: PPUSH
76922: CALL_OW 69
76926: ST_TO_ADDR
// for i in result do
76927: LD_ADDR_VAR 0 4
76931: PUSH
76932: LD_VAR 0 3
76936: PUSH
76937: FOR_IN
76938: IFFALSE 77359
// begin tag := GetTag ( i ) + 1 ;
76940: LD_ADDR_VAR 0 9
76944: PUSH
76945: LD_VAR 0 4
76949: PPUSH
76950: CALL_OW 110
76954: PUSH
76955: LD_INT 1
76957: PLUS
76958: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76959: LD_ADDR_VAR 0 7
76963: PUSH
76964: LD_VAR 0 4
76968: PPUSH
76969: CALL_OW 250
76973: PPUSH
76974: LD_VAR 0 4
76978: PPUSH
76979: CALL_OW 251
76983: PPUSH
76984: LD_INT 6
76986: PPUSH
76987: CALL 76560 0 3
76991: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76992: LD_VAR 0 4
76996: PPUSH
76997: CALL_OW 247
77001: PUSH
77002: LD_INT 2
77004: EQUAL
77005: PUSH
77006: LD_VAR 0 7
77010: AND
77011: PUSH
77012: LD_VAR 0 4
77016: PPUSH
77017: CALL_OW 264
77021: PUSH
77022: LD_VAR 0 10
77026: IN
77027: NOT
77028: AND
77029: IFFALSE 77068
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77031: LD_VAR 0 4
77035: PPUSH
77036: LD_VAR 0 7
77040: PUSH
77041: LD_INT 1
77043: ARRAY
77044: PUSH
77045: LD_INT 1
77047: ARRAY
77048: PPUSH
77049: LD_VAR 0 7
77053: PUSH
77054: LD_INT 1
77056: ARRAY
77057: PUSH
77058: LD_INT 2
77060: ARRAY
77061: PPUSH
77062: CALL_OW 116
77066: GO 77357
// if path > tag then
77068: LD_VAR 0 2
77072: PUSH
77073: LD_VAR 0 9
77077: GREATER
77078: IFFALSE 77286
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
77080: LD_ADDR_VAR 0 6
77084: PUSH
77085: LD_VAR 0 5
77089: PPUSH
77090: LD_INT 91
77092: PUSH
77093: LD_VAR 0 4
77097: PUSH
77098: LD_INT 8
77100: PUSH
77101: EMPTY
77102: LIST
77103: LIST
77104: LIST
77105: PPUSH
77106: CALL_OW 72
77110: ST_TO_ADDR
// if nearEnemy then
77111: LD_VAR 0 6
77115: IFFALSE 77184
// begin if GetWeapon ( i ) = ru_time_lapser then
77117: LD_VAR 0 4
77121: PPUSH
77122: CALL_OW 264
77126: PUSH
77127: LD_INT 49
77129: EQUAL
77130: IFFALSE 77158
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77132: LD_VAR 0 4
77136: PPUSH
77137: LD_VAR 0 6
77141: PPUSH
77142: LD_VAR 0 4
77146: PPUSH
77147: CALL_OW 74
77151: PPUSH
77152: CALL_OW 112
77156: GO 77182
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77158: LD_VAR 0 4
77162: PPUSH
77163: LD_VAR 0 6
77167: PPUSH
77168: LD_VAR 0 4
77172: PPUSH
77173: CALL_OW 74
77177: PPUSH
77178: CALL_OW 115
// end else
77182: GO 77284
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77184: LD_VAR 0 4
77188: PPUSH
77189: LD_VAR 0 2
77193: PUSH
77194: LD_VAR 0 9
77198: ARRAY
77199: PUSH
77200: LD_INT 1
77202: ARRAY
77203: PPUSH
77204: LD_VAR 0 2
77208: PUSH
77209: LD_VAR 0 9
77213: ARRAY
77214: PUSH
77215: LD_INT 2
77217: ARRAY
77218: PPUSH
77219: CALL_OW 297
77223: PUSH
77224: LD_INT 6
77226: GREATER
77227: IFFALSE 77270
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77229: LD_VAR 0 4
77233: PPUSH
77234: LD_VAR 0 2
77238: PUSH
77239: LD_VAR 0 9
77243: ARRAY
77244: PUSH
77245: LD_INT 1
77247: ARRAY
77248: PPUSH
77249: LD_VAR 0 2
77253: PUSH
77254: LD_VAR 0 9
77258: ARRAY
77259: PUSH
77260: LD_INT 2
77262: ARRAY
77263: PPUSH
77264: CALL_OW 114
77268: GO 77284
// SetTag ( i , tag ) ;
77270: LD_VAR 0 4
77274: PPUSH
77275: LD_VAR 0 9
77279: PPUSH
77280: CALL_OW 109
// end else
77284: GO 77357
// if enemy then
77286: LD_VAR 0 5
77290: IFFALSE 77357
// begin if GetWeapon ( i ) = ru_time_lapser then
77292: LD_VAR 0 4
77296: PPUSH
77297: CALL_OW 264
77301: PUSH
77302: LD_INT 49
77304: EQUAL
77305: IFFALSE 77333
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77307: LD_VAR 0 4
77311: PPUSH
77312: LD_VAR 0 5
77316: PPUSH
77317: LD_VAR 0 4
77321: PPUSH
77322: CALL_OW 74
77326: PPUSH
77327: CALL_OW 112
77331: GO 77357
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77333: LD_VAR 0 4
77337: PPUSH
77338: LD_VAR 0 5
77342: PPUSH
77343: LD_VAR 0 4
77347: PPUSH
77348: CALL_OW 74
77352: PPUSH
77353: CALL_OW 115
// end ; end ;
77357: GO 76937
77359: POP
77360: POP
// end ;
77361: LD_VAR 0 3
77365: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77366: LD_INT 0
77368: PPUSH
77369: PPUSH
77370: PPUSH
// if not unit or IsInUnit ( unit ) then
77371: LD_VAR 0 1
77375: NOT
77376: PUSH
77377: LD_VAR 0 1
77381: PPUSH
77382: CALL_OW 310
77386: OR
77387: IFFALSE 77391
// exit ;
77389: GO 77482
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77391: LD_ADDR_VAR 0 4
77395: PUSH
77396: LD_VAR 0 1
77400: PPUSH
77401: CALL_OW 250
77405: PPUSH
77406: LD_VAR 0 2
77410: PPUSH
77411: LD_INT 1
77413: PPUSH
77414: CALL_OW 272
77418: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77419: LD_ADDR_VAR 0 5
77423: PUSH
77424: LD_VAR 0 1
77428: PPUSH
77429: CALL_OW 251
77433: PPUSH
77434: LD_VAR 0 2
77438: PPUSH
77439: LD_INT 1
77441: PPUSH
77442: CALL_OW 273
77446: ST_TO_ADDR
// if ValidHex ( x , y ) then
77447: LD_VAR 0 4
77451: PPUSH
77452: LD_VAR 0 5
77456: PPUSH
77457: CALL_OW 488
77461: IFFALSE 77482
// ComTurnXY ( unit , x , y ) ;
77463: LD_VAR 0 1
77467: PPUSH
77468: LD_VAR 0 4
77472: PPUSH
77473: LD_VAR 0 5
77477: PPUSH
77478: CALL_OW 118
// end ;
77482: LD_VAR 0 3
77486: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77487: LD_INT 0
77489: PPUSH
77490: PPUSH
// result := false ;
77491: LD_ADDR_VAR 0 3
77495: PUSH
77496: LD_INT 0
77498: ST_TO_ADDR
// if not units then
77499: LD_VAR 0 2
77503: NOT
77504: IFFALSE 77508
// exit ;
77506: GO 77553
// for i in units do
77508: LD_ADDR_VAR 0 4
77512: PUSH
77513: LD_VAR 0 2
77517: PUSH
77518: FOR_IN
77519: IFFALSE 77551
// if See ( side , i ) then
77521: LD_VAR 0 1
77525: PPUSH
77526: LD_VAR 0 4
77530: PPUSH
77531: CALL_OW 292
77535: IFFALSE 77549
// begin result := true ;
77537: LD_ADDR_VAR 0 3
77541: PUSH
77542: LD_INT 1
77544: ST_TO_ADDR
// exit ;
77545: POP
77546: POP
77547: GO 77553
// end ;
77549: GO 77518
77551: POP
77552: POP
// end ;
77553: LD_VAR 0 3
77557: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77558: LD_INT 0
77560: PPUSH
77561: PPUSH
77562: PPUSH
77563: PPUSH
// if not unit or not points then
77564: LD_VAR 0 1
77568: NOT
77569: PUSH
77570: LD_VAR 0 2
77574: NOT
77575: OR
77576: IFFALSE 77580
// exit ;
77578: GO 77670
// dist := 99999 ;
77580: LD_ADDR_VAR 0 5
77584: PUSH
77585: LD_INT 99999
77587: ST_TO_ADDR
// for i in points do
77588: LD_ADDR_VAR 0 4
77592: PUSH
77593: LD_VAR 0 2
77597: PUSH
77598: FOR_IN
77599: IFFALSE 77668
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77601: LD_ADDR_VAR 0 6
77605: PUSH
77606: LD_VAR 0 1
77610: PPUSH
77611: LD_VAR 0 4
77615: PUSH
77616: LD_INT 1
77618: ARRAY
77619: PPUSH
77620: LD_VAR 0 4
77624: PUSH
77625: LD_INT 2
77627: ARRAY
77628: PPUSH
77629: CALL_OW 297
77633: ST_TO_ADDR
// if tmpDist < dist then
77634: LD_VAR 0 6
77638: PUSH
77639: LD_VAR 0 5
77643: LESS
77644: IFFALSE 77666
// begin result := i ;
77646: LD_ADDR_VAR 0 3
77650: PUSH
77651: LD_VAR 0 4
77655: ST_TO_ADDR
// dist := tmpDist ;
77656: LD_ADDR_VAR 0 5
77660: PUSH
77661: LD_VAR 0 6
77665: ST_TO_ADDR
// end ; end ;
77666: GO 77598
77668: POP
77669: POP
// end ;
77670: LD_VAR 0 3
77674: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77675: LD_INT 0
77677: PPUSH
// uc_side := side ;
77678: LD_ADDR_OWVAR 20
77682: PUSH
77683: LD_VAR 0 1
77687: ST_TO_ADDR
// uc_nation := 3 ;
77688: LD_ADDR_OWVAR 21
77692: PUSH
77693: LD_INT 3
77695: ST_TO_ADDR
// vc_chassis := 25 ;
77696: LD_ADDR_OWVAR 37
77700: PUSH
77701: LD_INT 25
77703: ST_TO_ADDR
// vc_engine := engine_siberite ;
77704: LD_ADDR_OWVAR 39
77708: PUSH
77709: LD_INT 3
77711: ST_TO_ADDR
// vc_control := control_computer ;
77712: LD_ADDR_OWVAR 38
77716: PUSH
77717: LD_INT 3
77719: ST_TO_ADDR
// vc_weapon := 59 ;
77720: LD_ADDR_OWVAR 40
77724: PUSH
77725: LD_INT 59
77727: ST_TO_ADDR
// result := CreateVehicle ;
77728: LD_ADDR_VAR 0 5
77732: PUSH
77733: CALL_OW 45
77737: ST_TO_ADDR
// SetDir ( result , d ) ;
77738: LD_VAR 0 5
77742: PPUSH
77743: LD_VAR 0 4
77747: PPUSH
77748: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77752: LD_VAR 0 5
77756: PPUSH
77757: LD_VAR 0 2
77761: PPUSH
77762: LD_VAR 0 3
77766: PPUSH
77767: LD_INT 0
77769: PPUSH
77770: CALL_OW 48
// end ;
77774: LD_VAR 0 5
77778: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77779: LD_INT 0
77781: PPUSH
77782: PPUSH
77783: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77784: LD_ADDR_VAR 0 2
77788: PUSH
77789: LD_INT 0
77791: PUSH
77792: LD_INT 0
77794: PUSH
77795: LD_INT 0
77797: PUSH
77798: LD_INT 0
77800: PUSH
77801: EMPTY
77802: LIST
77803: LIST
77804: LIST
77805: LIST
77806: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77807: LD_VAR 0 1
77811: NOT
77812: PUSH
77813: LD_VAR 0 1
77817: PPUSH
77818: CALL_OW 264
77822: PUSH
77823: LD_INT 12
77825: PUSH
77826: LD_INT 51
77828: PUSH
77829: LD_INT 32
77831: PUSH
77832: LD_INT 89
77834: PUSH
77835: EMPTY
77836: LIST
77837: LIST
77838: LIST
77839: LIST
77840: IN
77841: NOT
77842: OR
77843: IFFALSE 77847
// exit ;
77845: GO 77945
// for i := 1 to 3 do
77847: LD_ADDR_VAR 0 3
77851: PUSH
77852: DOUBLE
77853: LD_INT 1
77855: DEC
77856: ST_TO_ADDR
77857: LD_INT 3
77859: PUSH
77860: FOR_TO
77861: IFFALSE 77943
// begin tmp := GetCargo ( cargo , i ) ;
77863: LD_ADDR_VAR 0 4
77867: PUSH
77868: LD_VAR 0 1
77872: PPUSH
77873: LD_VAR 0 3
77877: PPUSH
77878: CALL_OW 289
77882: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77883: LD_ADDR_VAR 0 2
77887: PUSH
77888: LD_VAR 0 2
77892: PPUSH
77893: LD_VAR 0 3
77897: PPUSH
77898: LD_VAR 0 4
77902: PPUSH
77903: CALL_OW 1
77907: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77908: LD_ADDR_VAR 0 2
77912: PUSH
77913: LD_VAR 0 2
77917: PPUSH
77918: LD_INT 4
77920: PPUSH
77921: LD_VAR 0 2
77925: PUSH
77926: LD_INT 4
77928: ARRAY
77929: PUSH
77930: LD_VAR 0 4
77934: PLUS
77935: PPUSH
77936: CALL_OW 1
77940: ST_TO_ADDR
// end ;
77941: GO 77860
77943: POP
77944: POP
// end ;
77945: LD_VAR 0 2
77949: RET
// export function Length ( array ) ; begin
77950: LD_INT 0
77952: PPUSH
// result := array + 0 ;
77953: LD_ADDR_VAR 0 2
77957: PUSH
77958: LD_VAR 0 1
77962: PUSH
77963: LD_INT 0
77965: PLUS
77966: ST_TO_ADDR
// end ;
77967: LD_VAR 0 2
77971: RET
// export function PrepareArray ( array ) ; begin
77972: LD_INT 0
77974: PPUSH
// result := array diff 0 ;
77975: LD_ADDR_VAR 0 2
77979: PUSH
77980: LD_VAR 0 1
77984: PUSH
77985: LD_INT 0
77987: DIFF
77988: ST_TO_ADDR
// if not result [ 1 ] then
77989: LD_VAR 0 2
77993: PUSH
77994: LD_INT 1
77996: ARRAY
77997: NOT
77998: IFFALSE 78018
// result := Delete ( result , 1 ) ;
78000: LD_ADDR_VAR 0 2
78004: PUSH
78005: LD_VAR 0 2
78009: PPUSH
78010: LD_INT 1
78012: PPUSH
78013: CALL_OW 3
78017: ST_TO_ADDR
// end ;
78018: LD_VAR 0 2
78022: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
78023: LD_INT 0
78025: PPUSH
78026: PPUSH
78027: PPUSH
78028: PPUSH
// sibRocketRange := 25 ;
78029: LD_ADDR_VAR 0 6
78033: PUSH
78034: LD_INT 25
78036: ST_TO_ADDR
// result := false ;
78037: LD_ADDR_VAR 0 4
78041: PUSH
78042: LD_INT 0
78044: ST_TO_ADDR
// for i := 0 to 5 do
78045: LD_ADDR_VAR 0 5
78049: PUSH
78050: DOUBLE
78051: LD_INT 0
78053: DEC
78054: ST_TO_ADDR
78055: LD_INT 5
78057: PUSH
78058: FOR_TO
78059: IFFALSE 78126
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
78061: LD_VAR 0 1
78065: PPUSH
78066: LD_VAR 0 5
78070: PPUSH
78071: LD_VAR 0 6
78075: PPUSH
78076: CALL_OW 272
78080: PPUSH
78081: LD_VAR 0 2
78085: PPUSH
78086: LD_VAR 0 5
78090: PPUSH
78091: LD_VAR 0 6
78095: PPUSH
78096: CALL_OW 273
78100: PPUSH
78101: LD_VAR 0 3
78105: PPUSH
78106: CALL_OW 309
78110: IFFALSE 78124
// begin result := true ;
78112: LD_ADDR_VAR 0 4
78116: PUSH
78117: LD_INT 1
78119: ST_TO_ADDR
// exit ;
78120: POP
78121: POP
78122: GO 78128
// end ;
78124: GO 78058
78126: POP
78127: POP
// end ;
78128: LD_VAR 0 4
78132: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78133: LD_INT 0
78135: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78136: LD_VAR 0 1
78140: PPUSH
78141: LD_VAR 0 2
78145: PPUSH
78146: LD_INT 0
78148: PPUSH
78149: LD_INT 0
78151: PPUSH
78152: LD_INT 1
78154: PPUSH
78155: LD_INT 0
78157: PPUSH
78158: CALL_OW 587
// end ; end_of_file
78162: LD_VAR 0 3
78166: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78167: LD_VAR 0 1
78171: PUSH
78172: LD_INT 200
78174: DOUBLE
78175: GREATEREQUAL
78176: IFFALSE 78184
78178: LD_INT 299
78180: DOUBLE
78181: LESSEQUAL
78182: IFTRUE 78186
78184: GO 78218
78186: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78187: LD_VAR 0 1
78191: PPUSH
78192: LD_VAR 0 2
78196: PPUSH
78197: LD_VAR 0 3
78201: PPUSH
78202: LD_VAR 0 4
78206: PPUSH
78207: LD_VAR 0 5
78211: PPUSH
78212: CALL 32833 0 5
78216: GO 78295
78218: LD_INT 300
78220: DOUBLE
78221: GREATEREQUAL
78222: IFFALSE 78230
78224: LD_INT 399
78226: DOUBLE
78227: LESSEQUAL
78228: IFTRUE 78232
78230: GO 78294
78232: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78233: LD_VAR 0 1
78237: PPUSH
78238: LD_VAR 0 2
78242: PPUSH
78243: LD_VAR 0 3
78247: PPUSH
78248: LD_VAR 0 4
78252: PPUSH
78253: LD_VAR 0 5
78257: PPUSH
78258: LD_VAR 0 6
78262: PPUSH
78263: LD_VAR 0 7
78267: PPUSH
78268: LD_VAR 0 8
78272: PPUSH
78273: LD_VAR 0 9
78277: PPUSH
78278: LD_VAR 0 10
78282: PPUSH
78283: LD_VAR 0 11
78287: PPUSH
78288: CALL 29166 0 11
78292: GO 78295
78294: POP
// end ;
78295: PPOPN 11
78297: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78298: LD_VAR 0 1
78302: PPUSH
78303: LD_VAR 0 2
78307: PPUSH
78308: LD_VAR 0 3
78312: PPUSH
78313: LD_VAR 0 4
78317: PPUSH
78318: LD_VAR 0 5
78322: PPUSH
78323: CALL 32569 0 5
// end ; end_of_file
78327: PPOPN 5
78329: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78330: LD_VAR 0 1
78334: PPUSH
78335: LD_VAR 0 2
78339: PPUSH
78340: LD_VAR 0 3
78344: PPUSH
78345: LD_VAR 0 4
78349: PPUSH
78350: LD_VAR 0 5
78354: PPUSH
78355: LD_VAR 0 6
78359: PPUSH
78360: CALL 16818 0 6
// end ;
78364: PPOPN 6
78366: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78367: LD_INT 0
78369: PPUSH
// begin if not units then
78370: LD_VAR 0 1
78374: NOT
78375: IFFALSE 78379
// exit ;
78377: GO 78379
// end ;
78379: PPOPN 7
78381: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78382: CALL 16722 0 0
// end ;
78386: PPOPN 1
78388: END
