// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix ; starting begin mission_prefix := 02_ ;
   0: LD_ADDR_EXP 33
   4: PUSH
   5: LD_STRING 02_
   7: ST_TO_ADDR
// RuSoldMinLevel = 0 ;
   8: LD_ADDR_EXP 13
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// RuSoldMaxLevel = 0 ;
  16: LD_ADDR_EXP 14
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// hpJMM = 0 ;
  24: LD_ADDR_EXP 10
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// hpBobby = 0 ;
  32: LD_ADDR_EXP 11
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// hpCyrus = 0 ;
  40: LD_ADDR_EXP 12
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// cargoEscape = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// mikhailStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// mikhailInBase = 0 ;
  64: LD_ADDR_EXP 22
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// mikhailDepot = 0 ;
  72: LD_ADDR_EXP 23
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// tigersRespawn = 0 ;
  80: LD_ADDR_EXP 30
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// cargoRespawn = 0 ;
  88: LD_ADDR_EXP 28
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// cargoSee = 0 ;
  96: LD_ADDR_EXP 29
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// lastBattle = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// deadsCounter = 0 ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// spotCorpses = 0 ;
 120: LD_ADDR_EXP 32
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// southBaseDefenders = [ ] ;
 128: LD_ADDR_EXP 25
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// northBaseDefenders = [ ] ;
 135: LD_ADDR_EXP 24
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// attackGroup = [ ] ;
 142: LD_ADDR_EXP 26
 146: PUSH
 147: EMPTY
 148: ST_TO_ADDR
// RandomizeAll ;
 149: CALL_OW 11
// InGameOn ;
 153: CALL_OW 8
// Resetfog ;
 157: CALL_OW 335
// AnimateTrees ( true ) ;
 161: LD_INT 1
 163: PPUSH
 164: CALL_OW 573
// PrepareDifficulty ;
 168: CALL 10386 0 0
// PrepareRussianCommander ;
 172: CALL 11842 0 0
// PrepareSouthBase ;
 176: CALL 11925 0 0
// PrepareNorthBase ;
 180: CALL 12264 0 0
// PrepareOtherRussians ;
 184: CALL 12630 0 0
// PrepareHeroes ;
 188: CALL 10701 0 0
// PrepareLisSquad ;
 192: CALL 11029 0 0
// PrepareOtherAmericans ;
 196: CALL 11374 0 0
// end ; end_of_file
 200: END
// every 1 do var tmp ;
 201: GO 203
 203: DISABLE
 204: LD_INT 0
 206: PPUSH
// begin CenterNowOnUnits ( JMM ) ;
 207: LD_EXP 1
 211: PPUSH
 212: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 216: LD_ADDR_VAR 0 1
 220: PUSH
 221: LD_INT 22
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 21
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: PUSH
 250: LD_EXP 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: DIFF
 258: ST_TO_ADDR
// if Cyrus and Bobby then
 259: LD_EXP 3
 263: PUSH
 264: LD_EXP 2
 268: AND
 269: IFFALSE 599
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 271: LD_EXP 3
 275: PPUSH
 276: LD_INT 43
 278: PPUSH
 279: LD_INT 72
 281: PPUSH
 282: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_INT 44
 293: PPUSH
 294: LD_INT 70
 296: PPUSH
 297: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 301: LD_EXP 1
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: LD_INT 73
 311: PPUSH
 312: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 316: LD_EXP 3
 320: PPUSH
 321: LD_STRING D1a-Cyrus-1
 323: PPUSH
 324: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_STRING D1a-JMM-1
 335: PPUSH
 336: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 340: LD_EXP 3
 344: PPUSH
 345: LD_INT 37
 347: PPUSH
 348: LD_INT 66
 350: PPUSH
 351: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 355: LD_EXP 2
 359: PPUSH
 360: LD_INT 41
 362: PPUSH
 363: LD_INT 67
 365: PPUSH
 366: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 370: LD_EXP 1
 374: PPUSH
 375: LD_INT 38
 377: PPUSH
 378: LD_INT 64
 380: PPUSH
 381: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 385: LD_EXP 2
 389: PPUSH
 390: LD_STRING D1a-Bobby-2
 392: PPUSH
 393: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 397: LD_EXP 3
 401: PPUSH
 402: LD_INT 35
 404: PPUSH
 405: LD_INT 62
 407: PPUSH
 408: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 412: LD_EXP 2
 416: PPUSH
 417: LD_INT 32
 419: PPUSH
 420: LD_INT 60
 422: PPUSH
 423: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 35
 434: PPUSH
 435: LD_INT 60
 437: PPUSH
 438: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 442: LD_EXP 1
 446: PPUSH
 447: LD_STRING D1a-JMM-2
 449: PPUSH
 450: CALL_OW 88
// ComWalk ( Lisa ) ;
 454: LD_EXP 4
 458: PPUSH
 459: CALL_OW 138
// wait ( 0 0$1 ) ;
 463: LD_INT 35
 465: PPUSH
 466: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 470: LD_EXP 4
 474: PPUSH
 475: LD_EXP 1
 479: PPUSH
 480: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 484: LD_EXP 1
 488: PUSH
 489: LD_EXP 3
 493: PUSH
 494: LD_EXP 2
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: PPUSH
 504: LD_EXP 4
 508: PPUSH
 509: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 513: LD_VAR 0 1
 517: PUSH
 518: LD_INT 1
 520: ARRAY
 521: PPUSH
 522: LD_INT 33
 524: PPUSH
 525: LD_INT 55
 527: PPUSH
 528: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 532: LD_VAR 0 1
 536: PUSH
 537: LD_INT 2
 539: ARRAY
 540: PPUSH
 541: LD_INT 30
 543: PPUSH
 544: LD_INT 54
 546: PPUSH
 547: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 551: LD_VAR 0 1
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_EXP 1
 564: PPUSH
 565: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 569: LD_VAR 0 1
 573: PUSH
 574: LD_INT 2
 576: ARRAY
 577: PPUSH
 578: LD_EXP 1
 582: PPUSH
 583: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 587: LD_EXP 4
 591: PPUSH
 592: LD_STRING D1a-Lisa-2
 594: PPUSH
 595: CALL_OW 88
// end ; if Cyrus and not Bobby then
 599: LD_EXP 3
 603: PUSH
 604: LD_EXP 2
 608: NOT
 609: AND
 610: IFFALSE 815
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 612: LD_EXP 3
 616: PPUSH
 617: LD_INT 43
 619: PPUSH
 620: LD_INT 72
 622: PPUSH
 623: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 46
 634: PPUSH
 635: LD_INT 73
 637: PPUSH
 638: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 642: LD_EXP 3
 646: PPUSH
 647: LD_STRING D1a-Cyrus-1
 649: PPUSH
 650: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 654: LD_EXP 1
 658: PPUSH
 659: LD_STRING D1a-JMM-1
 661: PPUSH
 662: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 666: LD_EXP 3
 670: PPUSH
 671: LD_INT 37
 673: PPUSH
 674: LD_INT 66
 676: PPUSH
 677: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 681: LD_EXP 1
 685: PPUSH
 686: LD_INT 38
 688: PPUSH
 689: LD_INT 64
 691: PPUSH
 692: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 696: LD_EXP 3
 700: PPUSH
 701: LD_STRING D1a-Cyrus-2
 703: PPUSH
 704: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 708: LD_EXP 3
 712: PPUSH
 713: LD_INT 35
 715: PPUSH
 716: LD_INT 62
 718: PPUSH
 719: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 723: LD_EXP 1
 727: PPUSH
 728: LD_INT 35
 730: PPUSH
 731: LD_INT 60
 733: PPUSH
 734: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_STRING D1a-JMM-2
 745: PPUSH
 746: CALL_OW 88
// ComWalk ( Lisa ) ;
 750: LD_EXP 4
 754: PPUSH
 755: CALL_OW 138
// wait ( 0 0$1 ) ;
 759: LD_INT 35
 761: PPUSH
 762: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 766: LD_EXP 4
 770: PPUSH
 771: LD_EXP 1
 775: PPUSH
 776: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_STRING D1a-Lisa-2
 787: PPUSH
 788: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 792: LD_EXP 1
 796: PUSH
 797: LD_EXP 3
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PPUSH
 806: LD_EXP 4
 810: PPUSH
 811: CALL_OW 119
// end ; if not Cyrus and Bobby then
 815: LD_EXP 3
 819: NOT
 820: PUSH
 821: LD_EXP 2
 825: AND
 826: IFFALSE 1105
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_INT 44
 835: PPUSH
 836: LD_INT 70
 838: PPUSH
 839: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 46
 850: PPUSH
 851: LD_INT 73
 853: PPUSH
 854: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 858: LD_EXP 2
 862: PPUSH
 863: LD_STRING D1a-Bobby-1
 865: PPUSH
 866: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 870: LD_EXP 1
 874: PPUSH
 875: LD_STRING D1a-JMM-1
 877: PPUSH
 878: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 37
 889: PPUSH
 890: LD_INT 66
 892: PPUSH
 893: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_INT 38
 904: PPUSH
 905: LD_INT 64
 907: PPUSH
 908: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 912: LD_EXP 2
 916: PPUSH
 917: LD_STRING D1a-Bobby-2
 919: PPUSH
 920: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 924: LD_EXP 2
 928: PPUSH
 929: LD_INT 35
 931: PPUSH
 932: LD_INT 62
 934: PPUSH
 935: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 939: LD_EXP 1
 943: PPUSH
 944: LD_INT 35
 946: PPUSH
 947: LD_INT 60
 949: PPUSH
 950: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_STRING D1a-JMM-2
 961: PPUSH
 962: CALL_OW 88
// ComWalk ( Lisa ) ;
 966: LD_EXP 4
 970: PPUSH
 971: CALL_OW 138
// wait ( 0 0$1 ) ;
 975: LD_INT 35
 977: PPUSH
 978: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 982: LD_EXP 4
 986: PPUSH
 987: LD_EXP 1
 991: PPUSH
 992: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 996: LD_EXP 1
1000: PUSH
1001: LD_EXP 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: LD_EXP 4
1014: PPUSH
1015: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1019: LD_VAR 0 1
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_INT 33
1030: PPUSH
1031: LD_INT 55
1033: PPUSH
1034: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1038: LD_VAR 0 1
1042: PUSH
1043: LD_INT 2
1045: ARRAY
1046: PPUSH
1047: LD_INT 30
1049: PPUSH
1050: LD_INT 54
1052: PPUSH
1053: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1057: LD_VAR 0 1
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_EXP 1
1070: PPUSH
1071: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1075: LD_VAR 0 1
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: LD_EXP 1
1088: PPUSH
1089: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1093: LD_EXP 4
1097: PPUSH
1098: LD_STRING D1a-Lisa-2
1100: PPUSH
1101: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1105: LD_EXP 3
1109: NOT
1110: PUSH
1111: LD_EXP 2
1115: NOT
1116: AND
1117: IFFALSE 1331
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1119: LD_EXP 1
1123: PPUSH
1124: LD_INT 37
1126: PPUSH
1127: LD_INT 66
1129: PPUSH
1130: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_STRING D1b-JMM-1
1141: PPUSH
1142: CALL_OW 88
// ComCrawl ( JMM ) ;
1146: LD_EXP 1
1150: PPUSH
1151: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1155: LD_EXP 1
1159: PPUSH
1160: LD_INT 35
1162: PPUSH
1163: LD_INT 60
1165: PPUSH
1166: CALL_OW 171
// wait ( 0 0$8 ) ;
1170: LD_INT 280
1172: PPUSH
1173: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_STRING D1b-JMM-1a
1184: PPUSH
1185: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1189: LD_EXP 1
1193: PUSH
1194: LD_EXP 4
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 138
// wait ( 0 0$1 ) ;
1207: LD_INT 35
1209: PPUSH
1210: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1214: LD_EXP 4
1218: PPUSH
1219: LD_EXP 1
1223: PPUSH
1224: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1228: LD_EXP 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: PPUSH
1236: LD_EXP 4
1240: PPUSH
1241: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1245: LD_VAR 0 1
1249: PUSH
1250: LD_INT 1
1252: ARRAY
1253: PPUSH
1254: LD_INT 33
1256: PPUSH
1257: LD_INT 55
1259: PPUSH
1260: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: ARRAY
1272: PPUSH
1273: LD_INT 30
1275: PPUSH
1276: LD_INT 54
1278: PPUSH
1279: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1283: LD_VAR 0 1
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_EXP 1
1296: PPUSH
1297: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1301: LD_VAR 0 1
1305: PUSH
1306: LD_INT 2
1308: ARRAY
1309: PPUSH
1310: LD_EXP 1
1314: PPUSH
1315: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1319: LD_EXP 4
1323: PPUSH
1324: LD_STRING D1b-Lisa-1
1326: PPUSH
1327: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1331: LD_EXP 1
1335: PPUSH
1336: LD_STRING D1-JMM-1
1338: PPUSH
1339: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1343: LD_EXP 4
1347: PPUSH
1348: LD_STRING D1-Lisa-1
1350: PPUSH
1351: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1355: LD_EXP 1
1359: PPUSH
1360: LD_STRING D1-JMM-2
1362: PPUSH
1363: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1367: LD_EXP 9
1371: PPUSH
1372: LD_STRING D1-Pow-2
1374: PPUSH
1375: CALL_OW 94
// if Cyrus then
1379: LD_EXP 3
1383: IFFALSE 1409
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1385: LD_EXP 3
1389: PPUSH
1390: LD_STRING D1-Cyrus-2
1392: PPUSH
1393: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1397: LD_EXP 1
1401: PPUSH
1402: LD_STRING D1-JMM-3
1404: PPUSH
1405: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1409: LD_EXP 9
1413: PPUSH
1414: LD_STRING D1-Pow-3
1416: PPUSH
1417: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1421: LD_EXP 1
1425: PPUSH
1426: LD_STRING D1-JMM-4
1428: PPUSH
1429: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_STRING D1-Pow-4
1440: PPUSH
1441: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_STRING D1-Pow-4a
1452: PPUSH
1453: CALL_OW 94
// if Cyrus then
1457: LD_EXP 3
1461: IFFALSE 1475
// Say ( Cyrus , D1-Cyrus-4 ) ;
1463: LD_EXP 3
1467: PPUSH
1468: LD_STRING D1-Cyrus-4
1470: PPUSH
1471: CALL_OW 88
// if Bobby then
1475: LD_EXP 2
1479: IFFALSE 1517
// begin Say ( Bobby , D1-Bobby-4 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1-Bobby-4
1488: PPUSH
1489: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1493: LD_EXP 4
1497: PPUSH
1498: LD_STRING D1-Lisa-4
1500: PPUSH
1501: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1505: LD_EXP 1
1509: PPUSH
1510: LD_STRING D1-JMM-5
1512: PPUSH
1513: CALL_OW 88
// end ; InGameOff ;
1517: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1521: LD_INT 22
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PPUSH
1531: CALL_OW 69
1535: PUSH
1536: LD_EXP 6
1540: PUSH
1541: LD_EXP 7
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: DIFF
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1558: LD_STRING M1
1560: PPUSH
1561: CALL_OW 337
// SaveForQuickRestart ;
1565: CALL_OW 22
// end ;
1569: PPOPN 1
1571: END
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1572: LD_INT 7
1574: PPUSH
1575: LD_INT 22
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PPUSH
1585: CALL_OW 70
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: IFFALSE 2010
1595: GO 1597
1597: DISABLE
// begin InGameOn ;
1598: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1602: LD_INT 22
1604: PUSH
1605: LD_INT 1
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 21
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PPUSH
1626: CALL_OW 69
1630: PPUSH
1631: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1635: LD_INT 24
1637: PPUSH
1638: LD_INT 32
1640: PPUSH
1641: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1645: LD_EXP 5
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1660: LD_EXP 5
1664: PPUSH
1665: LD_INT 4
1667: PPUSH
1668: CALL_OW 336
// wait ( 0 0$1 ) ;
1672: LD_INT 35
1674: PPUSH
1675: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1679: LD_EXP 5
1683: PPUSH
1684: LD_INT 27
1686: PPUSH
1687: LD_INT 38
1689: PPUSH
1690: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1694: LD_EXP 5
1698: PPUSH
1699: LD_EXP 1
1703: PPUSH
1704: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1708: LD_INT 22
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 21
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PPUSH
1732: CALL_OW 69
1736: PUSH
1737: LD_EXP 5
1741: PUSH
1742: EMPTY
1743: LIST
1744: DIFF
1745: PPUSH
1746: LD_EXP 5
1750: PPUSH
1751: CALL_OW 119
// wait ( 0 0$1 ) ;
1755: LD_INT 35
1757: PPUSH
1758: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1762: LD_EXP 5
1766: PPUSH
1767: LD_STRING D2a-Khat-1
1769: PPUSH
1770: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING D2a-JMM-1
1781: PPUSH
1782: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1786: LD_EXP 5
1790: PPUSH
1791: LD_STRING D2a-Khat-2
1793: PPUSH
1794: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_STRING D2a-JMM-2
1805: PPUSH
1806: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING D2a-Khat-3
1817: PPUSH
1818: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1822: LD_EXP 1
1826: PPUSH
1827: LD_STRING D2a-JMM-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1834: LD_EXP 5
1838: PPUSH
1839: LD_STRING D2a-Khat-4
1841: PPUSH
1842: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1846: LD_EXP 1
1850: PPUSH
1851: LD_STRING D2a-JMM-4
1853: PPUSH
1854: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1858: LD_EXP 5
1862: PPUSH
1863: LD_STRING D2a-Khat-5
1865: PPUSH
1866: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D2a-JMM-5
1877: PPUSH
1878: CALL_OW 88
// InGameOff ;
1882: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) > 0 then
1886: LD_INT 22
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 800
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PPUSH
1928: CALL_OW 69
1932: PUSH
1933: LD_INT 0
1935: GREATER
1936: IFFALSE 2010
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1938: LD_EXP 5
1942: PPUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 21
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 3
1965: PUSH
1966: LD_INT 24
1968: PUSH
1969: LD_INT 1000
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PPUSH
1985: CALL_OW 69
1989: PUSH
1990: LD_INT 1
1992: ARRAY
1993: PPUSH
1994: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
1998: LD_EXP 5
2002: PPUSH
2003: LD_STRING D2b-Khat-1
2005: PPUSH
2006: CALL_OW 88
// end ; end ;
2010: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) > 0 do var i , distanceTab , min , tmp , p ;
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 22
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 70
2028: PUSH
2029: LD_INT 0
2031: GREATER
2032: IFFALSE 3229
2034: GO 2036
2036: DISABLE
2037: LD_INT 0
2039: PPUSH
2040: PPUSH
2041: PPUSH
2042: PPUSH
2043: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2044: LD_ADDR_VAR 0 2
2048: PUSH
2049: LD_INT 999
2051: PUSH
2052: LD_INT 999
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: LD_INT 22
2069: PUSH
2070: LD_INT 1
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 21
2079: PUSH
2080: LD_INT 1
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PPUSH
2091: CALL_OW 69
2095: PUSH
2096: LD_EXP 1
2100: PUSH
2101: LD_EXP 2
2105: PUSH
2106: LD_EXP 3
2110: PUSH
2111: LD_EXP 4
2115: PUSH
2116: LD_EXP 5
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: DIFF
2128: ST_TO_ADDR
// PrepareDeadSoldiers ;
2129: CALL 11532 0 0
// spotCorpses = 1 ;
2133: LD_ADDR_EXP 32
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2141: LD_INT 70
2143: PPUSH
2144: CALL_OW 67
// InGameOn ;
2148: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2152: LD_INT 23
2154: PPUSH
2155: LD_INT 12
2157: PPUSH
2158: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2162: LD_ADDR_VAR 0 3
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PUSH
2176: LD_INT 2
2178: ARRAY
2179: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_INT 22
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 21
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PPUSH
2209: CALL_OW 69
2213: PUSH
2214: LD_EXP 1
2218: PUSH
2219: LD_EXP 5
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: DIFF
2228: PUSH
2229: FOR_IN
2230: IFFALSE 2281
// if IsOK ( i ) then
2232: LD_VAR 0 1
2236: PPUSH
2237: CALL_OW 302
2241: IFFALSE 2279
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_VAR 0 2
2252: PUSH
2253: LD_VAR 0 1
2257: PUSH
2258: LD_VAR 0 1
2262: PPUSH
2263: LD_INT 16
2265: PPUSH
2266: CALL_OW 299
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: ADD
2278: ST_TO_ADDR
2279: GO 2229
2281: POP
2282: POP
// for i = 2 to distanceTab do
2283: LD_ADDR_VAR 0 1
2287: PUSH
2288: DOUBLE
2289: LD_INT 2
2291: DEC
2292: ST_TO_ADDR
2293: LD_VAR 0 2
2297: PUSH
2298: FOR_TO
2299: IFFALSE 2345
// if distanceTab [ i ] [ 2 ] < min then
2301: LD_VAR 0 2
2305: PUSH
2306: LD_VAR 0 1
2310: ARRAY
2311: PUSH
2312: LD_INT 2
2314: ARRAY
2315: PUSH
2316: LD_VAR 0 3
2320: LESS
2321: IFFALSE 2343
// min = distanceTab [ i ] [ 2 ] ;
2323: LD_ADDR_VAR 0 3
2327: PUSH
2328: LD_VAR 0 2
2332: PUSH
2333: LD_VAR 0 1
2337: ARRAY
2338: PUSH
2339: LD_INT 2
2341: ARRAY
2342: ST_TO_ADDR
2343: GO 2298
2345: POP
2346: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2347: LD_ADDR_VAR 0 1
2351: PUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 21
2364: PUSH
2365: LD_INT 1
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_EXP 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: DIFF
2389: PUSH
2390: FOR_IN
2391: IFFALSE 2461
// begin ComMoveToArea ( i , DeadCutscene ) ;
2393: LD_VAR 0 1
2397: PPUSH
2398: LD_INT 28
2400: PPUSH
2401: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2405: LD_EXP 1
2409: PPUSH
2410: LD_INT 30
2412: PPUSH
2413: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2417: LD_VAR 0 1
2421: PPUSH
2422: LD_INT 23
2424: PPUSH
2425: LD_INT 11
2427: PPUSH
2428: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2432: LD_EXP 1
2436: PPUSH
2437: LD_INT 23
2439: PPUSH
2440: LD_INT 11
2442: PPUSH
2443: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2447: LD_EXP 34
2451: PPUSH
2452: LD_INT 250
2454: PPUSH
2455: CALL_OW 234
// end ;
2459: GO 2390
2461: POP
2462: POP
// for i = 2 to distanceTab do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: DOUBLE
2469: LD_INT 2
2471: DEC
2472: ST_TO_ADDR
2473: LD_VAR 0 2
2477: PUSH
2478: FOR_TO
2479: IFFALSE 2865
// begin if distanceTab [ i ] [ 2 ] = min then
2481: LD_VAR 0 2
2485: PUSH
2486: LD_VAR 0 1
2490: ARRAY
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PUSH
2496: LD_VAR 0 3
2500: EQUAL
2501: IFFALSE 2863
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2503: LD_VAR 0 2
2507: PUSH
2508: LD_VAR 0 1
2512: ARRAY
2513: PUSH
2514: LD_INT 1
2516: ARRAY
2517: PUSH
2518: LD_EXP 2
2522: EQUAL
2523: IFFALSE 2537
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2525: LD_EXP 2
2529: PPUSH
2530: LD_STRING DCorpses-Bobby-1
2532: PPUSH
2533: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2537: LD_VAR 0 2
2541: PUSH
2542: LD_VAR 0 1
2546: ARRAY
2547: PUSH
2548: LD_INT 1
2550: ARRAY
2551: PUSH
2552: LD_EXP 3
2556: EQUAL
2557: IFFALSE 2571
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2559: LD_EXP 3
2563: PPUSH
2564: LD_STRING DCorpses-Cyrus-1
2566: PPUSH
2567: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2571: LD_VAR 0 2
2575: PUSH
2576: LD_VAR 0 1
2580: ARRAY
2581: PUSH
2582: LD_INT 1
2584: ARRAY
2585: PUSH
2586: LD_EXP 4
2590: EQUAL
2591: IFFALSE 2605
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2593: LD_EXP 4
2597: PPUSH
2598: LD_STRING DCorpses-Lisa-1
2600: PPUSH
2601: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 4
2624: PUSH
2625: LD_INT 1
2627: ARRAY
2628: EQUAL
2629: PUSH
2630: LD_VAR 0 4
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: CALL_OW 258
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: AND
2648: IFFALSE 2666
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2650: LD_VAR 0 4
2654: PUSH
2655: LD_INT 1
2657: ARRAY
2658: PPUSH
2659: LD_STRING DCorpses-Sol1-1
2661: PPUSH
2662: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2666: LD_VAR 0 2
2670: PUSH
2671: LD_VAR 0 1
2675: ARRAY
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: PUSH
2681: LD_VAR 0 4
2685: PUSH
2686: LD_INT 1
2688: ARRAY
2689: EQUAL
2690: PUSH
2691: LD_VAR 0 4
2695: PUSH
2696: LD_INT 1
2698: ARRAY
2699: PPUSH
2700: CALL_OW 258
2704: PUSH
2705: LD_INT 2
2707: EQUAL
2708: AND
2709: IFFALSE 2727
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2711: LD_VAR 0 4
2715: PUSH
2716: LD_INT 1
2718: ARRAY
2719: PPUSH
2720: LD_STRING DCorpses-FSol1-1
2722: PPUSH
2723: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_VAR 0 1
2736: ARRAY
2737: PUSH
2738: LD_INT 1
2740: ARRAY
2741: PUSH
2742: LD_VAR 0 4
2746: PUSH
2747: LD_INT 2
2749: ARRAY
2750: EQUAL
2751: PUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 2
2759: ARRAY
2760: PPUSH
2761: CALL_OW 258
2765: PUSH
2766: LD_INT 1
2768: EQUAL
2769: AND
2770: IFFALSE 2788
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2772: LD_VAR 0 4
2776: PUSH
2777: LD_INT 2
2779: ARRAY
2780: PPUSH
2781: LD_STRING DCorpses-Sol1-1
2783: PPUSH
2784: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2788: LD_VAR 0 2
2792: PUSH
2793: LD_VAR 0 1
2797: ARRAY
2798: PUSH
2799: LD_INT 1
2801: ARRAY
2802: PUSH
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 2
2810: ARRAY
2811: EQUAL
2812: PUSH
2813: LD_VAR 0 4
2817: PUSH
2818: LD_INT 2
2820: ARRAY
2821: PPUSH
2822: CALL_OW 258
2826: PUSH
2827: LD_INT 2
2829: EQUAL
2830: AND
2831: IFFALSE 2849
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2833: LD_VAR 0 4
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_STRING DCorpses-FSol1-1
2844: PPUSH
2845: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2849: LD_EXP 34
2853: PPUSH
2854: LD_INT 150
2856: PPUSH
2857: CALL_OW 234
// break ;
2861: GO 2865
// end ; end ;
2863: GO 2478
2865: POP
2866: POP
// p := 0 ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_INT 0
2874: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2875: LD_INT 35
2877: PPUSH
2878: CALL_OW 67
// p := p + 1 ;
2882: LD_ADDR_VAR 0 5
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2896: LD_ADDR_VAR 0 1
2900: PUSH
2901: LD_INT 22
2903: PUSH
2904: LD_INT 1
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 21
2913: PUSH
2914: LD_INT 1
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PPUSH
2925: CALL_OW 69
2929: PUSH
2930: LD_EXP 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: DIFF
2938: PUSH
2939: FOR_IN
2940: IFFALSE 3010
// begin ComMoveToArea ( i , DeadCutscene ) ;
2942: LD_VAR 0 1
2946: PPUSH
2947: LD_INT 28
2949: PPUSH
2950: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2954: LD_EXP 1
2958: PPUSH
2959: LD_INT 30
2961: PPUSH
2962: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2966: LD_VAR 0 1
2970: PPUSH
2971: LD_INT 23
2973: PPUSH
2974: LD_INT 11
2976: PPUSH
2977: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2981: LD_EXP 1
2985: PPUSH
2986: LD_INT 23
2988: PPUSH
2989: LD_INT 11
2991: PPUSH
2992: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2996: LD_EXP 34
3000: PPUSH
3001: LD_INT 250
3003: PPUSH
3004: CALL_OW 234
// end ;
3008: GO 2939
3010: POP
3011: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3012: LD_EXP 1
3016: PPUSH
3017: LD_INT 30
3019: PPUSH
3020: CALL_OW 308
3024: PUSH
3025: LD_VAR 0 5
3029: PUSH
3030: LD_INT 16
3032: GREATEREQUAL
3033: OR
3034: IFFALSE 2875
// wait ( 0 0$1 ) ;
3036: LD_INT 35
3038: PPUSH
3039: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3043: LD_EXP 1
3047: PPUSH
3048: LD_STRING DCorpses-JMM-1
3050: PPUSH
3051: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3055: LD_EXP 34
3059: PPUSH
3060: LD_INT 100
3062: PPUSH
3063: CALL_OW 234
// if IsOK ( Khatam ) then
3067: LD_EXP 5
3071: PPUSH
3072: CALL_OW 302
3076: IFFALSE 3213
// begin repeat wait ( 0 0$1 ) ;
3078: LD_INT 35
3080: PPUSH
3081: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3085: LD_EXP 5
3089: PPUSH
3090: LD_EXP 34
3094: PPUSH
3095: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3099: LD_EXP 5
3103: PPUSH
3104: LD_EXP 34
3108: PPUSH
3109: CALL_OW 296
3113: PUSH
3114: LD_INT 2
3116: LESS
3117: IFFALSE 3078
// spotCorpses = 0 ;
3119: LD_ADDR_EXP 32
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3127: LD_EXP 34
3131: PPUSH
3132: LD_INT 10
3134: PPUSH
3135: CALL_OW 234
// wait ( 0 0$3 ) ;
3139: LD_INT 105
3141: PPUSH
3142: CALL_OW 67
// KillUnit ( DyingSold ) ;
3146: LD_EXP 34
3150: PPUSH
3151: CALL_OW 66
// wait ( 0 0$1 ) ;
3155: LD_INT 35
3157: PPUSH
3158: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3162: LD_EXP 1
3166: PUSH
3167: LD_EXP 5
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3180: LD_EXP 5
3184: PPUSH
3185: LD_EXP 1
3189: PPUSH
3190: CALL_OW 119
// wait ( 0 0$1 ) ;
3194: LD_INT 35
3196: PPUSH
3197: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3201: LD_EXP 5
3205: PPUSH
3206: LD_STRING DCorpses-Khat-1
3208: PPUSH
3209: CALL_OW 88
// end ; InGameOff ;
3213: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3217: LD_EXP 1
3221: PPUSH
3222: LD_STRING DCorpses-JMM-2
3224: PPUSH
3225: CALL_OW 88
// end ;
3229: PPOPN 5
3231: END
// every 0 0$1 trigger spotCorpses = 1 do
3232: LD_EXP 32
3236: PUSH
3237: LD_INT 1
3239: EQUAL
3240: IFFALSE 3258
3242: GO 3244
3244: DISABLE
// begin enable ;
3245: ENABLE
// SetLives ( DyingSold , 10 ) ;
3246: LD_EXP 34
3250: PPUSH
3251: LD_INT 10
3253: PPUSH
3254: CALL_OW 234
// end ;
3258: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) > 0 or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3259: LD_INT 8
3261: PPUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 1
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 70
3276: PUSH
3277: LD_INT 0
3279: GREATER
3280: PUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 1
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_EXP 7
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: LD_EXP 7
3310: PPUSH
3311: CALL_OW 296
3315: PUSH
3316: LD_INT 13
3318: LESS
3319: OR
3320: IFFALSE 3517
3322: GO 3324
3324: DISABLE
3325: LD_INT 0
3327: PPUSH
// begin InGameOn ;
3328: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3332: LD_EXP 7
3336: PPUSH
3337: LD_INT 250
3339: PPUSH
3340: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 ] [ Difficulty ] ) ;
3344: LD_EXP 6
3348: PPUSH
3349: LD_INT 1000
3351: PUSH
3352: LD_INT 800
3354: PUSH
3355: LD_INT 750
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_OWVAR 67
3367: ARRAY
3368: PPUSH
3369: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3373: LD_INT 3
3375: PPUSH
3376: LD_INT 4
3378: PPUSH
3379: LD_INT 2
3381: PPUSH
3382: LD_INT 1
3384: PPUSH
3385: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3389: LD_EXP 6
3393: PUSH
3394: LD_EXP 7
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) do
3407: LD_ADDR_VAR 0 1
3411: PUSH
3412: LD_INT 9
3414: PPUSH
3415: LD_INT 22
3417: PUSH
3418: LD_INT 3
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: PPUSH
3425: CALL_OW 70
3429: PUSH
3430: FOR_IN
3431: IFFALSE 3444
// ComFree ( i ) ;
3433: LD_VAR 0 1
3437: PPUSH
3438: CALL_OW 139
3442: GO 3430
3444: POP
3445: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3446: LD_ADDR_VAR 0 1
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: FOR_IN
3467: IFFALSE 3480
// ComFree ( i ) ;
3469: LD_VAR 0 1
3473: PPUSH
3474: CALL_OW 139
3478: GO 3466
3480: POP
3481: POP
// wait ( 0 0$1 ) ;
3482: LD_INT 35
3484: PPUSH
3485: CALL_OW 67
// InGameOff ;
3489: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3493: LD_EXP 6
3497: PPUSH
3498: LD_STRING DF-Sol1-1
3500: PPUSH
3501: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3505: LD_EXP 1
3509: PPUSH
3510: LD_STRING DF-JMM-1
3512: PPUSH
3513: CALL_OW 88
// end ;
3517: PPOPN 1
3519: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3520: LD_INT 19
3522: PPUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PPUSH
3533: CALL_OW 70
3537: PUSH
3538: LD_INT 0
3540: EQUAL
3541: IFFALSE 3650
3543: GO 3545
3545: DISABLE
// begin if not IsDead ( Brian ) then
3546: LD_EXP 6
3550: PPUSH
3551: CALL_OW 301
3555: NOT
3556: IFFALSE 3570
// SetSide ( Brian , 1 ) ;
3558: LD_EXP 6
3562: PPUSH
3563: LD_INT 1
3565: PPUSH
3566: CALL_OW 235
// if not IsDead ( Jerry ) then
3570: LD_EXP 7
3574: PPUSH
3575: CALL_OW 301
3579: NOT
3580: IFFALSE 3594
// SetSide ( Jerry , 1 ) ;
3582: LD_EXP 7
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3594: LD_INT 22
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 25
3606: PUSH
3607: LD_INT 4
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: IFFALSE 3638
// Say ( JMM , DFa-JMM-1 ) else
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING DFa-JMM-1
3631: PPUSH
3632: CALL_OW 88
3636: GO 3650
// Say ( JMM , DFa-JMM-1a ) ;
3638: LD_EXP 1
3642: PPUSH
3643: LD_STRING DFa-JMM-1a
3645: PPUSH
3646: CALL_OW 88
// end ;
3650: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3651: LD_INT 19
3653: PPUSH
3654: LD_INT 22
3656: PUSH
3657: LD_INT 3
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PPUSH
3664: CALL_OW 70
3668: PUSH
3669: LD_INT 0
3671: EQUAL
3672: PUSH
3673: LD_EXP 6
3677: PPUSH
3678: CALL_OW 302
3682: NOT
3683: AND
3684: IFFALSE 3770
3686: GO 3688
3688: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3689: LD_INT 35
3691: PPUSH
3692: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3696: LD_EXP 6
3700: PPUSH
3701: CALL_OW 256
3705: PUSH
3706: LD_INT 250
3708: GREATER
3709: IFFALSE 3689
// Say ( Brian , DFb-Sol1-1 ) ;
3711: LD_EXP 6
3715: PPUSH
3716: LD_STRING DFb-Sol1-1
3718: PPUSH
3719: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3723: LD_EXP 6
3727: PPUSH
3728: LD_INT 78
3730: PPUSH
3731: LD_INT 74
3733: PPUSH
3734: CALL_OW 111
// if IsDead ( Jerry ) then
3738: LD_EXP 7
3742: PPUSH
3743: CALL_OW 301
3747: IFFALSE 3763
// Say ( Brian , DFb-Sol1-1a ) else
3749: LD_EXP 6
3753: PPUSH
3754: LD_STRING DFb-Sol1-1a
3756: PPUSH
3757: CALL_OW 88
3761: GO 3770
// SetAchievement ( ACH_JERRY ) ;
3763: LD_STRING ACH_JERRY
3765: PPUSH
3766: CALL_OW 543
// end ;
3770: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3771: LD_INT 22
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 21
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PPUSH
3795: CALL_OW 69
3799: PUSH
3800: LD_INT 0
3802: EQUAL
3803: IFFALSE 3891
3805: GO 3807
3807: DISABLE
3808: LD_INT 0
3810: PPUSH
// begin enable ;
3811: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: LD_INT 22
3819: PUSH
3820: LD_INT 3
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 21
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 30
3839: PUSH
3840: LD_INT 31
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PPUSH
3852: CALL_OW 69
3856: PUSH
3857: FOR_IN
3858: IFFALSE 3889
// begin if See ( 1 , i ) then
3860: LD_INT 1
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: CALL_OW 292
3872: IFFALSE 3887
// begin disable ;
3874: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3875: LD_EXP 1
3879: PPUSH
3880: LD_STRING DX1-JMM-1
3882: PPUSH
3883: CALL_OW 88
// end ; end ;
3887: GO 3857
3889: POP
3890: POP
// end ;
3891: PPOPN 1
3893: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 11
3899: PPUSH
3900: CALL_OW 294
3904: IFFALSE 4163
3906: GO 3908
3908: DISABLE
3909: LD_INT 0
3911: PPUSH
3912: PPUSH
3913: PPUSH
// begin DialogueOn ;
3914: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3918: LD_INT 11
3920: PPUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: PPUSH
3945: CALL_OW 70
3949: PUSH
3950: LD_INT 1
3952: ARRAY
3953: PPUSH
3954: LD_STRING DX3-Rus1-1
3956: PPUSH
3957: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING DX3-JMM-1
3968: PPUSH
3969: CALL_OW 88
// DialogueOff ;
3973: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
3977: LD_ADDR_VAR 0 1
3981: PUSH
3982: LD_INT 11
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 25
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 70
4013: PUSH
4014: FOR_IN
4015: IFFALSE 4035
// southBaseDefenders = southBaseDefenders ^ i ;
4017: LD_ADDR_EXP 25
4021: PUSH
4022: LD_EXP 25
4026: PUSH
4027: LD_VAR 0 1
4031: ADD
4032: ST_TO_ADDR
4033: GO 4014
4035: POP
4036: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 ] [ Difficulty ] ) ;
4037: LD_INT 175
4039: PUSH
4040: LD_INT 140
4042: PUSH
4043: LD_INT 105
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_OWVAR 67
4055: ARRAY
4056: PPUSH
4057: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 21
4078: PUSH
4079: LD_INT 1
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 25
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: PPUSH
4101: CALL_OW 69
4105: ST_TO_ADDR
// if not mech then
4106: LD_VAR 0 3
4110: NOT
4111: IFFALSE 4115
// exit ;
4113: GO 4163
// ComExitBuilding ( mech ) ;
4115: LD_VAR 0 3
4119: PPUSH
4120: CALL_OW 122
// wait ( 0 0$1 ) ;
4124: LD_INT 35
4126: PPUSH
4127: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4131: LD_VAR 0 3
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: LD_INT 5
4142: PPUSH
4143: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4147: LD_VAR 0 3
4151: PUSH
4152: LD_INT 2
4154: ARRAY
4155: PPUSH
4156: LD_INT 4
4158: PPUSH
4159: CALL_OW 180
// end ;
4163: PPOPN 3
4165: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 5
4171: PPUSH
4172: CALL_OW 292
4176: PUSH
4177: LD_INT 1
4179: PPUSH
4180: LD_INT 4
4182: PPUSH
4183: CALL_OW 292
4187: OR
4188: IFFALSE 4272
4190: GO 4192
4192: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4193: LD_INT 5
4195: PUSH
4196: LD_INT 4
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PPUSH
4203: CALL_OW 85
// if IsOK ( Bobby ) then
4207: LD_EXP 2
4211: PPUSH
4212: CALL_OW 302
4216: IFFALSE 4252
// begin DialogueOn ;
4218: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4222: LD_EXP 2
4226: PPUSH
4227: LD_STRING DX2-Bobby-1
4229: PPUSH
4230: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4234: LD_EXP 1
4238: PPUSH
4239: LD_STRING DX2-JMM-1a
4241: PPUSH
4242: CALL_OW 88
// DialogueOff ;
4246: CALL_OW 7
// end else
4250: GO 4272
// begin DialogueOn ;
4252: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4256: LD_EXP 1
4260: PPUSH
4261: LD_STRING DX2-JMM-1
4263: PPUSH
4264: CALL_OW 88
// DialogueOff ;
4268: CALL_OW 7
// end ; end ;
4272: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4273: LD_INT 22
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: LD_INT 23
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 21
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 34
4305: PUSH
4306: LD_INT 42
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: IFFALSE 4744
4325: GO 4327
4327: DISABLE
4328: LD_INT 0
4330: PPUSH
4331: PPUSH
4332: PPUSH
4333: PPUSH
4334: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4335: LD_ADDR_VAR 0 1
4339: PUSH
4340: LD_INT 22
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 23
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 21
4362: PUSH
4363: LD_INT 2
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 34
4372: PUSH
4373: LD_INT 42
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PPUSH
4386: CALL_OW 69
4390: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: LD_INT 22
4398: PUSH
4399: LD_INT 1
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 21
4408: PUSH
4409: LD_INT 1
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 26
4418: PUSH
4419: LD_INT 1
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_EXP 1
4440: PUSH
4441: LD_EXP 3
4445: PUSH
4446: LD_EXP 2
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: DIFF
4456: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4457: LD_ADDR_VAR 0 4
4461: PUSH
4462: LD_INT 22
4464: PUSH
4465: LD_INT 1
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 26
4484: PUSH
4485: LD_INT 2
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PUSH
4502: LD_EXP 4
4506: PUSH
4507: EMPTY
4508: LIST
4509: DIFF
4510: ST_TO_ADDR
// if not tmp then
4511: LD_VAR 0 1
4515: NOT
4516: IFFALSE 4520
// exit ;
4518: GO 4744
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4520: LD_ADDR_VAR 0 2
4524: PUSH
4525: LD_VAR 0 1
4529: PUSH
4530: LD_INT 1
4532: ARRAY
4533: PPUSH
4534: CALL_OW 311
4538: ST_TO_ADDR
// if not speaker then
4539: LD_VAR 0 2
4543: NOT
4544: IFFALSE 4548
// exit ;
4546: GO 4744
// DialogueOn ;
4548: CALL_OW 6
// if speaker = JMM then
4552: LD_VAR 0 2
4556: PUSH
4557: LD_EXP 1
4561: EQUAL
4562: IFFALSE 4596
// begin if Lisa then
4564: LD_EXP 4
4568: IFFALSE 4582
// Say ( Lisa , DX2b-Lisa-1 ) ;
4570: LD_EXP 4
4574: PPUSH
4575: LD_STRING DX2b-Lisa-1
4577: PPUSH
4578: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4582: LD_EXP 1
4586: PPUSH
4587: LD_STRING DX2b-JMM-1
4589: PPUSH
4590: CALL_OW 88
// end else
4594: GO 4740
// begin Say ( JMM , DX2a-JMM-1 ) ;
4596: LD_EXP 1
4600: PPUSH
4601: LD_STRING DX2a-JMM-1
4603: PPUSH
4604: CALL_OW 88
// if speaker = Bobby then
4608: LD_VAR 0 2
4612: PUSH
4613: LD_EXP 2
4617: EQUAL
4618: IFFALSE 4632
// Say ( Bobby , DX2a-Bobby-1 ) ;
4620: LD_EXP 2
4624: PPUSH
4625: LD_STRING DX2a-Bobby-1
4627: PPUSH
4628: CALL_OW 88
// if speaker = Cyrus then
4632: LD_VAR 0 2
4636: PUSH
4637: LD_EXP 3
4641: EQUAL
4642: IFFALSE 4656
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4644: LD_EXP 3
4648: PPUSH
4649: LD_STRING DX2a-Cyrus-1
4651: PPUSH
4652: CALL_OW 88
// if speaker = Lisa then
4656: LD_VAR 0 2
4660: PUSH
4661: LD_EXP 4
4665: EQUAL
4666: IFFALSE 4680
// Say ( Lisa , DX2a-Lisa-1 ) ;
4668: LD_EXP 4
4672: PPUSH
4673: LD_STRING DX2a-Lisa-1
4675: PPUSH
4676: CALL_OW 88
// if speaker in temp1 then
4680: LD_VAR 0 2
4684: PUSH
4685: LD_VAR 0 3
4689: IN
4690: IFFALSE 4704
// Say ( speaker , DX2a-Sol1-1 ) ;
4692: LD_VAR 0 2
4696: PPUSH
4697: LD_STRING DX2a-Sol1-1
4699: PPUSH
4700: CALL_OW 88
// if speaker in temp2 then
4704: LD_VAR 0 2
4708: PUSH
4709: LD_VAR 0 4
4713: IN
4714: IFFALSE 4728
// Say ( speaker , DX2a-FSol1-1 ) ;
4716: LD_VAR 0 2
4720: PPUSH
4721: LD_STRING DX2a-FSol1-1
4723: PPUSH
4724: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4728: LD_EXP 1
4732: PPUSH
4733: LD_STRING DX2a-JMM-2
4735: PPUSH
4736: CALL_OW 88
// end ; DialogueOff ;
4740: CALL_OW 7
// end ;
4744: PPOPN 5
4746: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4747: LD_INT 1
4749: PPUSH
4750: CALL_OW 255
4754: PUSH
4755: LD_INT 1
4757: EQUAL
4758: PUSH
4759: LD_INT 10
4761: PPUSH
4762: CALL_OW 255
4766: PUSH
4767: LD_INT 1
4769: EQUAL
4770: OR
4771: IFFALSE 4831
4773: GO 4775
4775: DISABLE
// begin DialogueOn ;
4776: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4780: LD_EXP 1
4784: PPUSH
4785: LD_STRING D3-JMM-1
4787: PPUSH
4788: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4792: LD_EXP 9
4796: PPUSH
4797: LD_STRING D3-Pow-1
4799: PPUSH
4800: CALL_OW 94
// if IsOK ( Cyrus ) then
4804: LD_EXP 3
4808: PPUSH
4809: CALL_OW 302
4813: IFFALSE 4827
// Say ( Cyrus , D3-Cyrus-1 ) ;
4815: LD_EXP 3
4819: PPUSH
4820: LD_STRING D3-Cyrus-1
4822: PPUSH
4823: CALL_OW 88
// DialogueOff ;
4827: CALL_OW 7
// end ;
4831: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4832: LD_INT 1
4834: PPUSH
4835: CALL_OW 255
4839: PUSH
4840: LD_INT 1
4842: EQUAL
4843: PUSH
4844: LD_INT 10
4846: PPUSH
4847: CALL_OW 255
4851: PUSH
4852: LD_INT 1
4854: EQUAL
4855: AND
4856: IFFALSE 6246
4858: GO 4860
4860: DISABLE
4861: LD_INT 0
4863: PPUSH
4864: PPUSH
4865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4866: LD_ADDR_VAR 0 2
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 21
4883: PUSH
4884: LD_INT 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PPUSH
4895: CALL_OW 69
4899: ST_TO_ADDR
// if tmp then
4900: LD_VAR 0 2
4904: IFFALSE 4965
// begin for i in tmp do
4906: LD_ADDR_VAR 0 3
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: FOR_IN
4917: IFFALSE 4963
// begin if IsInUnit ( i ) then
4919: LD_VAR 0 3
4923: PPUSH
4924: CALL_OW 310
4928: IFFALSE 4939
// ComExitBuilding ( i ) ;
4930: LD_VAR 0 3
4934: PPUSH
4935: CALL_OW 122
// wait ( 0 0$1 ) ;
4939: LD_INT 35
4941: PPUSH
4942: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4946: LD_VAR 0 3
4950: PPUSH
4951: LD_INT 54
4953: PPUSH
4954: LD_INT 17
4956: PPUSH
4957: CALL_OW 174
// end ;
4961: GO 4916
4963: POP
4964: POP
// end ; wait ( 0 0$03 ) ;
4965: LD_INT 105
4967: PPUSH
4968: CALL_OW 67
// DialogueOn ;
4972: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
4976: LD_EXP 1
4980: PPUSH
4981: LD_STRING D3a-JMM-1
4983: PPUSH
4984: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
4988: LD_EXP 9
4992: PPUSH
4993: LD_STRING D3a-Pow-1
4995: PPUSH
4996: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5000: LD_EXP 1
5004: PPUSH
5005: LD_STRING D3a-JMM-2
5007: PPUSH
5008: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5012: LD_EXP 9
5016: PPUSH
5017: LD_STRING D3a-Pow-2
5019: PPUSH
5020: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5024: LD_EXP 1
5028: PPUSH
5029: LD_STRING D3a-JMM-3
5031: PPUSH
5032: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5036: LD_EXP 9
5040: PPUSH
5041: LD_STRING D3a-Pow-3
5043: PPUSH
5044: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5048: LD_EXP 1
5052: PPUSH
5053: LD_STRING D3a-JMM-4
5055: PPUSH
5056: CALL_OW 88
// DialogueOff ;
5060: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5064: LD_STRING M2
5066: PPUSH
5067: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5071: LD_EXP 1
5075: PPUSH
5076: LD_STRING D3b-JMM-1
5078: PPUSH
5079: CALL_OW 88
// Hint ( Depot2 ) ;
5083: LD_STRING Depot2
5085: PPUSH
5086: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5090: LD_INT 35
5092: PPUSH
5093: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5097: LD_INT 22
5099: PPUSH
5100: LD_INT 22
5102: PUSH
5103: LD_INT 1
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 25
5112: PUSH
5113: LD_INT 2
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PPUSH
5124: CALL_OW 70
5128: PUSH
5129: LD_INT 22
5131: PUSH
5132: LD_INT 3
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PPUSH
5153: CALL_OW 69
5157: NOT
5158: AND
5159: IFFALSE 5090
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5161: LD_ADDR_VAR 0 1
5165: PUSH
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 23
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 25
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 50
5198: PUSH
5199: EMPTY
5200: LIST
5201: PUSH
5202: LD_INT 56
5204: PUSH
5205: EMPTY
5206: LIST
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: PPUSH
5215: CALL_OW 69
5219: PUSH
5220: LD_EXP 1
5224: PUSH
5225: LD_EXP 5
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: DIFF
5234: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5235: LD_INT 35
5237: PPUSH
5238: CALL_OW 67
// until temp > 0 ;
5242: LD_VAR 0 1
5246: PUSH
5247: LD_INT 0
5249: GREATER
5250: IFFALSE 5161
// wait ( 0 0$5 ) ;
5252: LD_INT 175
5254: PPUSH
5255: CALL_OW 67
// PrepareRussianHeroes ;
5259: CALL 11689 0 0
// InGameOn ;
5263: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5267: LD_EXP 8
5271: PPUSH
5272: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5276: LD_EXP 1
5280: PUSH
5281: LD_VAR 0 1
5285: PUSH
5286: LD_INT 1
5288: ARRAY
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PPUSH
5294: LD_EXP 8
5298: PPUSH
5299: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5303: LD_EXP 8
5307: PPUSH
5308: LD_VAR 0 1
5312: PUSH
5313: LD_INT 1
5315: ARRAY
5316: PPUSH
5317: CALL_OW 119
// Wait ( 0 0$02 ) ;
5321: LD_INT 70
5323: PPUSH
5324: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5328: LD_EXP 8
5332: PPUSH
5333: LD_STRING D4-Mikh-1
5335: PPUSH
5336: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5340: LD_VAR 0 1
5344: PUSH
5345: LD_INT 1
5347: ARRAY
5348: PPUSH
5349: CALL_OW 258
5353: PUSH
5354: LD_INT 1
5356: EQUAL
5357: IFFALSE 5375
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5359: LD_VAR 0 1
5363: PUSH
5364: LD_INT 1
5366: ARRAY
5367: PPUSH
5368: LD_STRING D4-Sol1-1
5370: PPUSH
5371: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5375: LD_VAR 0 1
5379: PUSH
5380: LD_INT 1
5382: ARRAY
5383: PPUSH
5384: CALL_OW 258
5388: PUSH
5389: LD_INT 2
5391: EQUAL
5392: IFFALSE 5410
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5394: LD_VAR 0 1
5398: PUSH
5399: LD_INT 1
5401: ARRAY
5402: PPUSH
5403: LD_STRING D4-FSol1-1
5405: PPUSH
5406: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5410: LD_EXP 8
5414: PPUSH
5415: LD_STRING D4-Mikh-2
5417: PPUSH
5418: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5422: LD_VAR 0 1
5426: PUSH
5427: LD_INT 1
5429: ARRAY
5430: PPUSH
5431: CALL_OW 258
5435: PUSH
5436: LD_INT 1
5438: EQUAL
5439: IFFALSE 5457
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5441: LD_VAR 0 1
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: LD_STRING D4-Sol1-2
5452: PPUSH
5453: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5457: LD_VAR 0 1
5461: PUSH
5462: LD_INT 1
5464: ARRAY
5465: PPUSH
5466: CALL_OW 258
5470: PUSH
5471: LD_INT 2
5473: EQUAL
5474: IFFALSE 5492
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5476: LD_VAR 0 1
5480: PUSH
5481: LD_INT 1
5483: ARRAY
5484: PPUSH
5485: LD_STRING D4-FSol1-2
5487: PPUSH
5488: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5492: LD_EXP 8
5496: PPUSH
5497: LD_STRING D4-Mikh-3
5499: PPUSH
5500: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5504: LD_VAR 0 1
5508: PUSH
5509: LD_INT 1
5511: ARRAY
5512: PPUSH
5513: CALL_OW 258
5517: PUSH
5518: LD_INT 1
5520: EQUAL
5521: IFFALSE 5539
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5523: LD_VAR 0 1
5527: PUSH
5528: LD_INT 1
5530: ARRAY
5531: PPUSH
5532: LD_STRING D4-Sol1-3
5534: PPUSH
5535: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5539: LD_VAR 0 1
5543: PUSH
5544: LD_INT 1
5546: ARRAY
5547: PPUSH
5548: CALL_OW 258
5552: PUSH
5553: LD_INT 2
5555: EQUAL
5556: IFFALSE 5574
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5558: LD_VAR 0 1
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_STRING D4-FSol1-3
5569: PPUSH
5570: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5574: LD_EXP 8
5578: PPUSH
5579: LD_STRING D4-Mikh-4
5581: PPUSH
5582: CALL_OW 88
// case query ( Qs1 ) of 1 :
5586: LD_STRING Qs1
5588: PPUSH
5589: CALL_OW 97
5593: PUSH
5594: LD_INT 1
5596: DOUBLE
5597: EQUAL
5598: IFTRUE 5602
5600: GO 5637
5602: POP
// begin InGameOff ;
5603: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5607: LD_INT 1
5609: PPUSH
5610: LD_INT 6
5612: PPUSH
5613: LD_INT 2
5615: PPUSH
5616: LD_INT 1
5618: PPUSH
5619: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5623: LD_EXP 8
5627: PPUSH
5628: LD_INT 17
5630: PPUSH
5631: CALL_OW 113
// end ; 2 :
5635: GO 6230
5637: LD_INT 2
5639: DOUBLE
5640: EQUAL
5641: IFTRUE 5645
5643: GO 6195
5645: POP
// begin repeat wait ( 0 0$1 ) ;
5646: LD_INT 35
5648: PPUSH
5649: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5653: LD_VAR 0 1
5657: PUSH
5658: LD_INT 1
5660: ARRAY
5661: PPUSH
5662: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5666: LD_VAR 0 1
5670: PUSH
5671: LD_INT 1
5673: ARRAY
5674: PPUSH
5675: LD_EXP 1
5679: PPUSH
5680: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5684: LD_EXP 8
5688: PPUSH
5689: LD_EXP 1
5693: PPUSH
5694: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5698: LD_EXP 1
5702: PPUSH
5703: LD_EXP 8
5707: PPUSH
5708: CALL_OW 296
5712: PUSH
5713: LD_INT 5
5715: LESS
5716: IFFALSE 5646
// ComTurnUnit ( Mikhail , JMM ) ;
5718: LD_EXP 8
5722: PPUSH
5723: LD_EXP 1
5727: PPUSH
5728: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5732: LD_EXP 1
5736: PPUSH
5737: LD_STRING D4b-JMM-1
5739: PPUSH
5740: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5744: LD_EXP 8
5748: PPUSH
5749: LD_STRING D4b-Mikh-1
5751: PPUSH
5752: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5756: LD_EXP 1
5760: PPUSH
5761: LD_STRING D4b-JMM-2
5763: PPUSH
5764: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5768: LD_EXP 8
5772: PPUSH
5773: LD_STRING D4b-Mikh-2
5775: PPUSH
5776: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5780: LD_EXP 1
5784: PPUSH
5785: LD_STRING D4b-JMM-3
5787: PPUSH
5788: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5792: LD_EXP 8
5796: PPUSH
5797: LD_STRING D4b-Mikh-3
5799: PPUSH
5800: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5804: LD_EXP 1
5808: PPUSH
5809: LD_STRING D4b-JMM-4
5811: PPUSH
5812: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5816: LD_EXP 8
5820: PPUSH
5821: LD_STRING D4b-Mikh-4
5823: PPUSH
5824: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5828: LD_EXP 1
5832: PPUSH
5833: LD_STRING D4b-JMM-5
5835: PPUSH
5836: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5840: LD_EXP 8
5844: PPUSH
5845: LD_STRING D4b-Mikh-5
5847: PPUSH
5848: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5852: LD_EXP 1
5856: PPUSH
5857: LD_STRING D4b-JMM-6
5859: PPUSH
5860: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5864: LD_EXP 8
5868: PPUSH
5869: LD_STRING D4b-Mikh-6
5871: PPUSH
5872: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5876: LD_EXP 1
5880: PPUSH
5881: LD_STRING D4b-JMM-7
5883: PPUSH
5884: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5888: LD_EXP 8
5892: PPUSH
5893: LD_STRING D4b-Mikh-7
5895: PPUSH
5896: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5900: LD_VAR 0 1
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PPUSH
5909: CALL_OW 258
5913: PUSH
5914: LD_INT 1
5916: EQUAL
5917: IFFALSE 5935
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5919: LD_VAR 0 1
5923: PUSH
5924: LD_INT 1
5926: ARRAY
5927: PPUSH
5928: LD_STRING D4b-Sol1-7
5930: PPUSH
5931: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5935: LD_VAR 0 1
5939: PUSH
5940: LD_INT 1
5942: ARRAY
5943: PPUSH
5944: CALL_OW 258
5948: PUSH
5949: LD_INT 2
5951: EQUAL
5952: IFFALSE 5970
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
5954: LD_VAR 0 1
5958: PUSH
5959: LD_INT 1
5961: ARRAY
5962: PPUSH
5963: LD_STRING D4b-FSol1-7
5965: PPUSH
5966: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
5970: LD_EXP 1
5974: PPUSH
5975: LD_STRING D4b-JMM-8
5977: PPUSH
5978: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5982: LD_VAR 0 1
5986: PUSH
5987: LD_INT 1
5989: ARRAY
5990: PPUSH
5991: CALL_OW 258
5995: PUSH
5996: LD_INT 1
5998: EQUAL
5999: IFFALSE 6017
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6001: LD_VAR 0 1
6005: PUSH
6006: LD_INT 1
6008: ARRAY
6009: PPUSH
6010: LD_STRING D4b-Sol1-8
6012: PPUSH
6013: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6017: LD_VAR 0 1
6021: PUSH
6022: LD_INT 1
6024: ARRAY
6025: PPUSH
6026: CALL_OW 258
6030: PUSH
6031: LD_INT 2
6033: EQUAL
6034: IFFALSE 6052
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6036: LD_VAR 0 1
6040: PUSH
6041: LD_INT 1
6043: ARRAY
6044: PPUSH
6045: LD_STRING D4b-FSol1-8
6047: PPUSH
6048: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6052: LD_EXP 1
6056: PPUSH
6057: LD_STRING D4b-JMM-9
6059: PPUSH
6060: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6064: LD_EXP 8
6068: PPUSH
6069: LD_INT 1
6071: PPUSH
6072: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6076: LD_ADDR_VAR 0 3
6080: PUSH
6081: LD_INT 22
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PUSH
6091: EMPTY
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: PUSH
6099: FOR_IN
6100: IFFALSE 6113
// ComFree ( i ) ;
6102: LD_VAR 0 3
6106: PPUSH
6107: CALL_OW 139
6111: GO 6099
6113: POP
6114: POP
// repeat wait ( 0 0$1 ) ;
6115: LD_INT 35
6117: PPUSH
6118: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6122: LD_EXP 8
6126: PPUSH
6127: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6131: LD_EXP 8
6135: PUSH
6136: LD_VAR 0 1
6140: PUSH
6141: LD_INT 1
6143: ARRAY
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: LD_INT 1
6151: PPUSH
6152: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6156: LD_EXP 8
6160: PPUSH
6161: CALL_OW 310
6165: IFFALSE 6115
// mikhailDepot = IsInUnit ( Mikhail ) ;
6167: LD_ADDR_EXP 23
6171: PUSH
6172: LD_EXP 8
6176: PPUSH
6177: CALL_OW 310
6181: ST_TO_ADDR
// InGameOff ;
6182: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6186: LD_STRING M3
6188: PPUSH
6189: CALL_OW 337
// end ; 3 :
6193: GO 6230
6195: LD_INT 3
6197: DOUBLE
6198: EQUAL
6199: IFTRUE 6203
6201: GO 6229
6203: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6204: LD_EXP 8
6208: PPUSH
6209: LD_INT 17
6211: PPUSH
6212: CALL_OW 113
// wait ( 0 0$3 ) ;
6216: LD_INT 105
6218: PPUSH
6219: CALL_OW 67
// InGameOff ;
6223: CALL_OW 9
// end ; end ;
6227: GO 6230
6229: POP
// PrepareTigers ;
6230: CALL 14539 0 0
// RussianTrap ;
6234: CALL 10085 0 0
// tigersRespawn = 1 ;
6238: LD_ADDR_EXP 30
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// end ;
6246: PPOPN 3
6248: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6249: LD_INT 1
6251: PPUSH
6252: CALL_OW 255
6256: PUSH
6257: LD_INT 1
6259: EQUAL
6260: PUSH
6261: LD_INT 10
6263: PPUSH
6264: CALL_OW 255
6268: PUSH
6269: LD_INT 1
6271: EQUAL
6272: AND
6273: PUSH
6274: LD_INT 1
6276: PPUSH
6277: CALL_OW 274
6281: PPUSH
6282: LD_INT 1
6284: PPUSH
6285: CALL_OW 275
6289: PUSH
6290: LD_INT 100
6292: GREATEREQUAL
6293: AND
6294: IFFALSE 6443
6296: GO 6298
6298: DISABLE
6299: LD_INT 0
6301: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6302: LD_INT 2100
6304: PPUSH
6305: LD_INT 4200
6307: PPUSH
6308: CALL_OW 12
6312: PUSH
6313: LD_INT 1050
6315: PLUS
6316: PPUSH
6317: CALL_OW 67
// PrepareCargoBays ;
6321: CALL 12822 0 0
// cargoRespawn = 1 ;
6325: LD_ADDR_EXP 28
6329: PUSH
6330: LD_INT 1
6332: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_EXP 15
6342: PUSH
6343: LD_EXP 16
6347: PUSH
6348: LD_EXP 17
6352: PUSH
6353: LD_EXP 18
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6364: LD_VAR 0 1
6368: PPUSH
6369: LD_INT 17
6371: PPUSH
6372: LD_INT 10
6374: PPUSH
6375: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6379: LD_VAR 0 1
6383: PPUSH
6384: LD_INT 36
6386: PPUSH
6387: LD_INT 13
6389: PPUSH
6390: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6394: LD_VAR 0 1
6398: PPUSH
6399: LD_INT 40
6401: PPUSH
6402: LD_INT 20
6404: PPUSH
6405: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6409: LD_VAR 0 1
6413: PPUSH
6414: LD_INT 53
6416: PPUSH
6417: LD_INT 16
6419: PPUSH
6420: CALL_OW 171
// wait ( 0 0$5 ) ;
6424: LD_INT 175
6426: PPUSH
6427: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6431: LD_EXP 17
6435: PPUSH
6436: LD_STRING D5-Rus2-1
6438: PPUSH
6439: CALL_OW 88
// end ;
6443: PPOPN 1
6445: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6446: LD_EXP 28
6450: PUSH
6451: LD_INT 1
6453: EQUAL
6454: IFFALSE 6609
6456: GO 6458
6458: DISABLE
6459: LD_INT 0
6461: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6462: LD_ADDR_VAR 0 1
6466: PUSH
6467: LD_INT 22
6469: PUSH
6470: LD_INT 3
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 21
6479: PUSH
6480: LD_INT 2
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 34
6489: PUSH
6490: LD_INT 51
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: PPUSH
6502: CALL_OW 69
6506: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6507: LD_INT 105
6509: PPUSH
6510: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6514: LD_VAR 0 1
6518: PPUSH
6519: LD_INT 3
6521: PUSH
6522: LD_INT 60
6524: PUSH
6525: EMPTY
6526: LIST
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 72
6536: PUSH
6537: LD_VAR 0 1
6541: PPUSH
6542: LD_INT 3
6544: PUSH
6545: LD_INT 24
6547: PUSH
6548: LD_INT 980
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 72
6563: OR
6564: IFFALSE 6507
// ComMoveXY ( cargos , 7 , 9 ) ;
6566: LD_VAR 0 1
6570: PPUSH
6571: LD_INT 7
6573: PPUSH
6574: LD_INT 9
6576: PPUSH
6577: CALL_OW 111
// cargoSee = 1 ;
6581: LD_ADDR_EXP 29
6585: PUSH
6586: LD_INT 1
6588: ST_TO_ADDR
// cargoEscape = 1 ;
6589: LD_ADDR_EXP 20
6593: PUSH
6594: LD_INT 1
6596: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6597: LD_EXP 17
6601: PPUSH
6602: LD_STRING D5-Rus2-1a
6604: PPUSH
6605: CALL_OW 88
// end ;
6609: PPOPN 1
6611: END
// every 0 0$1 trigger cargoEscape > 0 do
6612: LD_EXP 20
6616: PUSH
6617: LD_INT 0
6619: GREATER
6620: IFFALSE 6767
6622: GO 6624
6624: DISABLE
// begin enable ;
6625: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6626: LD_EXP 15
6630: PUSH
6631: LD_EXP 16
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: PPUSH
6640: LD_INT 13
6642: PPUSH
6643: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6647: LD_EXP 15
6651: PPUSH
6652: LD_INT 13
6654: PPUSH
6655: CALL_OW 308
6659: PUSH
6660: LD_EXP 17
6664: PPUSH
6665: LD_INT 13
6667: PPUSH
6668: CALL_OW 308
6672: OR
6673: IFFALSE 6707
// begin RemoveUnit ( cargo1 ) ;
6675: LD_EXP 15
6679: PPUSH
6680: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6684: LD_EXP 17
6688: PPUSH
6689: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6693: LD_ADDR_EXP 20
6697: PUSH
6698: LD_EXP 20
6702: PUSH
6703: LD_INT 1
6705: PLUS
6706: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6707: LD_EXP 16
6711: PPUSH
6712: LD_INT 13
6714: PPUSH
6715: CALL_OW 308
6719: PUSH
6720: LD_EXP 18
6724: PPUSH
6725: LD_INT 13
6727: PPUSH
6728: CALL_OW 308
6732: OR
6733: IFFALSE 6767
// begin RemoveUnit ( cargo2 ) ;
6735: LD_EXP 16
6739: PPUSH
6740: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6744: LD_EXP 18
6748: PPUSH
6749: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6753: LD_ADDR_EXP 20
6757: PUSH
6758: LD_EXP 20
6762: PUSH
6763: LD_INT 1
6765: PLUS
6766: ST_TO_ADDR
// end ; end ;
6767: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6768: LD_EXP 20
6772: PUSH
6773: LD_INT 1
6775: GREATER
6776: IFFALSE 7025
6778: GO 6780
6780: DISABLE
6781: LD_INT 0
6783: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6784: LD_INT 4
6786: PPUSH
6787: LD_INT 1
6789: PPUSH
6790: LD_INT 1
6792: PPUSH
6793: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6797: LD_INT 31
6799: PPUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_INT 1
6805: PPUSH
6806: CALL_OW 324
// Hint ( Bunker ) ;
6810: LD_STRING Bunker
6812: PPUSH
6813: CALL_OW 339
// if IsOK ( Jerry ) then
6817: LD_EXP 7
6821: PPUSH
6822: CALL_OW 302
6826: IFFALSE 6842
// Say ( Jerry , D5a-Sol1-1 ) else
6828: LD_EXP 7
6832: PPUSH
6833: LD_STRING D5a-Sol1-1
6835: PPUSH
6836: CALL_OW 88
6840: GO 6928
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6842: LD_ADDR_VAR 0 1
6846: PUSH
6847: LD_INT 22
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 26
6859: PUSH
6860: LD_INT 1
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 69
6875: PUSH
6876: LD_EXP 1
6880: PUSH
6881: LD_EXP 2
6885: PUSH
6886: LD_EXP 3
6890: PUSH
6891: LD_EXP 5
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: DIFF
6902: ST_TO_ADDR
// if not speaker then
6903: LD_VAR 0 1
6907: NOT
6908: IFFALSE 6912
// exit ;
6910: GO 7025
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
6912: LD_VAR 0 1
6916: PUSH
6917: LD_INT 1
6919: ARRAY
6920: PPUSH
6921: LD_STRING D5a-Sol1-1
6923: PPUSH
6924: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
6928: LD_EXP 1
6932: PPUSH
6933: LD_STRING D5a-JMM-1
6935: PPUSH
6936: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
6940: LD_INT 22
6942: PPUSH
6943: LD_INT 22
6945: PUSH
6946: LD_INT 1
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 25
6955: PUSH
6956: LD_INT 2
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PPUSH
6967: CALL_OW 70
6971: IFFALSE 7025
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
6973: LD_INT 22
6975: PPUSH
6976: LD_INT 22
6978: PUSH
6979: LD_INT 1
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 25
6988: PUSH
6989: LD_INT 2
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PPUSH
7000: CALL_OW 70
7004: PUSH
7005: LD_INT 1
7007: ARRAY
7008: PPUSH
7009: LD_INT 31
7011: PPUSH
7012: LD_INT 44
7014: PPUSH
7015: LD_INT 13
7017: PPUSH
7018: LD_INT 1
7020: PPUSH
7021: CALL_OW 145
// end ;
7025: PPOPN 1
7027: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7028: LD_INT 1
7030: PPUSH
7031: CALL_OW 255
7035: PUSH
7036: LD_INT 3
7038: EQUAL
7039: PUSH
7040: LD_INT 1
7042: PPUSH
7043: CALL_OW 256
7047: PUSH
7048: LD_INT 1000
7050: LESS
7051: AND
7052: PUSH
7053: LD_INT 10
7055: PPUSH
7056: CALL_OW 255
7060: PUSH
7061: LD_INT 3
7063: EQUAL
7064: PUSH
7065: LD_INT 10
7067: PPUSH
7068: CALL_OW 256
7072: PUSH
7073: LD_INT 1000
7075: LESS
7076: AND
7077: OR
7078: IFFALSE 7095
7080: GO 7082
7082: DISABLE
// begin Say ( JMM , D8-JMM-1 ) ;
7083: LD_EXP 1
7087: PPUSH
7088: LD_STRING D8-JMM-1
7090: PPUSH
7091: CALL_OW 88
// end ;
7095: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7096: LD_EXP 8
7100: PPUSH
7101: CALL_OW 310
7105: PUSH
7106: LD_INT 1
7108: EQUAL
7109: PUSH
7110: LD_EXP 22
7114: PUSH
7115: LD_INT 3
7117: EQUAL
7118: NOT
7119: AND
7120: IFFALSE 7142
7122: GO 7124
7124: DISABLE
// begin mikhailInBase = 1 ;
7125: LD_ADDR_EXP 22
7129: PUSH
7130: LD_INT 1
7132: ST_TO_ADDR
// mikhailStatus = 1 ;
7133: LD_ADDR_EXP 21
7137: PUSH
7138: LD_INT 1
7140: ST_TO_ADDR
// enable ;
7141: ENABLE
// end ;
7142: END
// export function AskMikhail ; begin
7143: LD_INT 0
7145: PPUSH
// case query ( QMikh2 ) of 1 :
7146: LD_STRING QMikh2
7148: PPUSH
7149: CALL_OW 97
7153: PUSH
7154: LD_INT 1
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7229
7162: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7163: LD_INT 1
7165: PPUSH
7166: LD_INT 6
7168: PPUSH
7169: LD_INT 2
7171: PPUSH
7172: LD_INT 1
7174: PPUSH
7175: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7179: LD_EXP 8
7183: PPUSH
7184: LD_INT 6
7186: PPUSH
7187: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7191: LD_EXP 8
7195: PPUSH
7196: CALL_OW 122
// wait ( 0 0$1 ) ;
7200: LD_INT 35
7202: PPUSH
7203: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7207: LD_EXP 8
7211: PPUSH
7212: LD_INT 17
7214: PPUSH
7215: CALL_OW 113
// mikhailInbase = 0 ;
7219: LD_ADDR_EXP 22
7223: PUSH
7224: LD_INT 0
7226: ST_TO_ADDR
// end ; 2 :
7227: GO 7470
7229: LD_INT 2
7231: DOUBLE
7232: EQUAL
7233: IFTRUE 7237
7235: GO 7410
7237: POP
// begin mikhailInBase = 2 ;
7238: LD_ADDR_EXP 22
7242: PUSH
7243: LD_INT 2
7245: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7246: LD_EXP 8
7250: PPUSH
7251: LD_INT 6
7253: PPUSH
7254: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7258: LD_EXP 8
7262: PPUSH
7263: CALL_OW 122
// wait ( 0 0$1 ) ;
7267: LD_INT 35
7269: PPUSH
7270: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7274: LD_EXP 8
7278: PPUSH
7279: LD_EXP 8
7283: PPUSH
7284: CALL_OW 250
7288: PUSH
7289: LD_INT 2
7291: PLUS
7292: PPUSH
7293: LD_EXP 8
7297: PPUSH
7298: CALL_OW 251
7302: PUSH
7303: LD_INT 2
7305: PLUS
7306: PPUSH
7307: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7311: LD_EXP 8
7315: PPUSH
7316: LD_EXP 8
7320: PPUSH
7321: CALL_OW 250
7325: PUSH
7326: LD_INT 1
7328: PLUS
7329: PPUSH
7330: LD_EXP 8
7334: PPUSH
7335: CALL_OW 251
7339: PUSH
7340: LD_INT 2
7342: PLUS
7343: PPUSH
7344: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7348: LD_EXP 8
7352: PPUSH
7353: LD_EXP 8
7357: PPUSH
7358: CALL_OW 250
7362: PUSH
7363: LD_INT 2
7365: PLUS
7366: PPUSH
7367: LD_EXP 8
7371: PPUSH
7372: CALL_OW 251
7376: PPUSH
7377: CALL_OW 171
// wait ( 0 0$5 ) ;
7381: LD_INT 175
7383: PPUSH
7384: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7388: LD_EXP 8
7392: PPUSH
7393: LD_INT 25
7395: PPUSH
7396: CALL_OW 113
// mikhailInBase = 4 ;
7400: LD_ADDR_EXP 22
7404: PUSH
7405: LD_INT 4
7407: ST_TO_ADDR
// end ; 3 :
7408: GO 7470
7410: LD_INT 3
7412: DOUBLE
7413: EQUAL
7414: IFTRUE 7418
7416: GO 7469
7418: POP
// begin SetSide ( Mikhail , 6 ) ;
7419: LD_EXP 8
7423: PPUSH
7424: LD_INT 6
7426: PPUSH
7427: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7431: LD_EXP 8
7435: PPUSH
7436: CALL_OW 122
// wait ( 0 0$1 ) ;
7440: LD_INT 35
7442: PPUSH
7443: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7447: LD_EXP 8
7451: PPUSH
7452: LD_INT 17
7454: PPUSH
7455: CALL_OW 113
// mikhailInbase = 3 ;
7459: LD_ADDR_EXP 22
7463: PUSH
7464: LD_INT 3
7466: ST_TO_ADDR
// end ; end ;
7467: GO 7470
7469: POP
// end ;
7470: LD_VAR 0 1
7474: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7475: LD_EXP 8
7479: PPUSH
7480: LD_INT 25
7482: PPUSH
7483: CALL_OW 308
7487: PUSH
7488: LD_EXP 22
7492: PUSH
7493: LD_INT 4
7495: EQUAL
7496: AND
7497: IFFALSE 7601
7499: GO 7501
7501: DISABLE
// begin enable ;
7502: ENABLE
// mikhailInBase = 1 ;
7503: LD_ADDR_EXP 22
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// InGameOn ;
7511: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7515: LD_INT 1
7517: PPUSH
7518: LD_INT 6
7520: PPUSH
7521: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7525: LD_INT 35
7527: PPUSH
7528: CALL_OW 67
// if Carry ( Mikhail ) then
7532: LD_EXP 8
7536: PPUSH
7537: CALL_OW 281
7541: IFFALSE 7552
// ComUnload ( Mikhail ) ;
7543: LD_EXP 8
7547: PPUSH
7548: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7552: LD_EXP 8
7556: PPUSH
7557: LD_INT 1
7559: PPUSH
7560: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7564: LD_EXP 8
7568: PPUSH
7569: CALL_OW 310
7573: IFFALSE 7525
// SetSide ( dep1 , 1 ) ;
7575: LD_INT 1
7577: PPUSH
7578: LD_INT 1
7580: PPUSH
7581: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7585: LD_EXP 8
7589: PPUSH
7590: LD_INT 1
7592: PPUSH
7593: CALL_OW 235
// InGameOff ;
7597: CALL_OW 9
// end ;
7601: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7602: LD_EXP 8
7606: PPUSH
7607: CALL_OW 310
7611: PUSH
7612: LD_EXP 22
7616: PUSH
7617: LD_INT 3
7619: EQUAL
7620: NOT
7621: AND
7622: IFFALSE 7757
7624: GO 7626
7626: DISABLE
// begin enable ;
7627: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7628: LD_INT 22
7630: PUSH
7631: LD_INT 1
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 21
7640: PUSH
7641: LD_INT 1
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 91
7650: PUSH
7651: LD_EXP 8
7655: PPUSH
7656: CALL_OW 310
7660: PUSH
7661: LD_INT 10
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: PPUSH
7674: CALL_OW 69
7678: PUSH
7679: LD_INT 1
7681: EQUAL
7682: IFFALSE 7757
// begin mikhailStatus = 4 ;
7684: LD_ADDR_EXP 21
7688: PUSH
7689: LD_INT 4
7691: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7692: LD_INT 1
7694: PPUSH
7695: LD_INT 6
7697: PPUSH
7698: LD_INT 2
7700: PPUSH
7701: LD_INT 1
7703: PPUSH
7704: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7708: LD_EXP 8
7712: PPUSH
7713: LD_INT 6
7715: PPUSH
7716: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7720: LD_EXP 8
7724: PPUSH
7725: CALL_OW 122
// wait ( 0 0$1 ) ;
7729: LD_INT 35
7731: PPUSH
7732: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7736: LD_EXP 8
7740: PPUSH
7741: LD_INT 17
7743: PPUSH
7744: CALL_OW 113
// mikhailStatus = 3 ;
7748: LD_ADDR_EXP 21
7752: PUSH
7753: LD_INT 3
7755: ST_TO_ADDR
// disable ;
7756: DISABLE
// end ; end ;
7757: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7758: LD_EXP 1
7762: PPUSH
7763: LD_EXP 23
7767: PPUSH
7768: CALL_OW 296
7772: PUSH
7773: LD_INT 5
7775: LESS
7776: PUSH
7777: LD_EXP 21
7781: PUSH
7782: LD_INT 3
7784: EQUAL
7785: AND
7786: PUSH
7787: LD_EXP 22
7791: PUSH
7792: LD_INT 3
7794: EQUAL
7795: NOT
7796: AND
7797: IFFALSE 8019
7799: GO 7801
7801: DISABLE
7802: LD_INT 0
7804: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7805: LD_ADDR_VAR 0 1
7809: PUSH
7810: LD_INT 22
7812: PUSH
7813: LD_INT 1
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 21
7822: PUSH
7823: LD_INT 1
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 26
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: LIST
7844: PPUSH
7845: CALL_OW 69
7849: PUSH
7850: LD_EXP 1
7854: PUSH
7855: LD_EXP 5
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: DIFF
7864: ST_TO_ADDR
// DialogueOn ;
7865: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7869: LD_EXP 1
7873: PPUSH
7874: LD_STRING D7-JMM-1
7876: PPUSH
7877: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7881: LD_VAR 0 1
7885: PUSH
7886: LD_INT 1
7888: ARRAY
7889: PPUSH
7890: LD_STRING D7-Sol1-1
7892: PPUSH
7893: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7897: LD_EXP 1
7901: PPUSH
7902: LD_STRING D7-JMM-2
7904: PPUSH
7905: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
7909: LD_VAR 0 1
7913: PUSH
7914: LD_INT 1
7916: ARRAY
7917: PPUSH
7918: LD_STRING D7-Sol1-2
7920: PPUSH
7921: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
7925: LD_EXP 1
7929: PPUSH
7930: LD_STRING D7-JMM-3
7932: PPUSH
7933: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
7937: LD_VAR 0 1
7941: PUSH
7942: LD_INT 1
7944: ARRAY
7945: PPUSH
7946: LD_STRING D7-Sol1-3
7948: PPUSH
7949: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
7953: LD_EXP 3
7957: PPUSH
7958: CALL_OW 302
7962: PUSH
7963: LD_EXP 4
7967: PPUSH
7968: CALL_OW 302
7972: AND
7973: IFFALSE 8015
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
7975: LD_EXP 3
7979: PPUSH
7980: LD_STRING D7-Cyrus-3
7982: PPUSH
7983: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
7987: LD_VAR 0 1
7991: PUSH
7992: LD_INT 1
7994: ARRAY
7995: PPUSH
7996: LD_STRING D7-Sol1-4
7998: PPUSH
7999: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8003: LD_EXP 4
8007: PPUSH
8008: LD_STRING D7-Lisa-4
8010: PPUSH
8011: CALL_OW 88
// end ; DialogueOff ;
8015: CALL_OW 7
// end ;
8019: PPOPN 1
8021: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8022: LD_EXP 8
8026: PPUSH
8027: CALL_OW 303
8031: PUSH
8032: LD_EXP 21
8036: PUSH
8037: LD_INT 3
8039: EQUAL
8040: AND
8041: IFFALSE 8055
8043: GO 8045
8045: DISABLE
// begin enable ;
8046: ENABLE
// mikhailStatus = 2 ;
8047: LD_ADDR_EXP 21
8051: PUSH
8052: LD_INT 2
8054: ST_TO_ADDR
// end ;
8055: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8056: LD_EXP 8
8060: PPUSH
8061: LD_INT 17
8063: PPUSH
8064: CALL_OW 308
8068: PUSH
8069: LD_EXP 8
8073: PPUSH
8074: CALL_OW 255
8078: PUSH
8079: LD_INT 6
8081: EQUAL
8082: AND
8083: IFFALSE 8116
8085: GO 8087
8087: DISABLE
// begin if not mikhailInBase = 3 then
8088: LD_EXP 22
8092: PUSH
8093: LD_INT 3
8095: EQUAL
8096: NOT
8097: IFFALSE 8107
// mikhailStatus = 3 ;
8099: LD_ADDR_EXP 21
8103: PUSH
8104: LD_INT 3
8106: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8107: LD_EXP 8
8111: PPUSH
8112: CALL_OW 64
// end ;
8116: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8117: LD_EXP 21
8121: PUSH
8122: LD_INT 3
8124: EQUAL
8125: PUSH
8126: LD_EXP 8
8130: PPUSH
8131: CALL_OW 255
8135: PUSH
8136: LD_INT 6
8138: EQUAL
8139: AND
8140: IFFALSE 8306
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
8148: PPUSH
// begin enable ;
8149: ENABLE
// if IsOk ( Mikhail ) then
8150: LD_EXP 8
8154: PPUSH
8155: CALL_OW 302
8159: IFFALSE 8306
// begin attacker = Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8161: LD_ADDR_VAR 0 2
8165: PUSH
8166: LD_EXP 8
8170: PPUSH
8171: LD_INT 22
8173: PUSH
8174: LD_INT 1
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 21
8183: PUSH
8184: LD_INT 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 69
8199: PPUSH
8200: CALL 10277 0 2
8204: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_EXP 8
8214: PPUSH
8215: CALL_OW 296
8219: PUSH
8220: LD_INT 8
8222: LESS
8223: IFFALSE 8306
// begin if GetSex ( attacker ) = sex_male then
8225: LD_VAR 0 2
8229: PPUSH
8230: CALL_OW 258
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: IFFALSE 8274
// begin disable ;
8240: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8241: LD_VAR 0 2
8245: PPUSH
8246: LD_STRING D7a-Sol1-1
8248: PPUSH
8249: CALL_OW 88
// wait ( 0 0$2 ) ;
8253: LD_INT 70
8255: PPUSH
8256: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8260: LD_VAR 0 2
8264: PPUSH
8265: LD_STRING D7a-Sol1-1a
8267: PPUSH
8268: CALL_OW 88
// end else
8272: GO 8306
// begin disable ;
8274: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8275: LD_VAR 0 2
8279: PPUSH
8280: LD_STRING D7a-FSol1-1
8282: PPUSH
8283: CALL_OW 88
// wait ( 0 0$2 ) ;
8287: LD_INT 70
8289: PPUSH
8290: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8294: LD_VAR 0 2
8298: PPUSH
8299: LD_STRING D7a-FSol1-1a
8301: PPUSH
8302: CALL_OW 88
// end ; end ; end ; end ;
8306: PPOPN 2
8308: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8309: LD_EXP 27
8313: PUSH
8314: LD_INT 1
8316: EQUAL
8317: PUSH
8318: LD_INT 22
8320: PPUSH
8321: LD_INT 22
8323: PUSH
8324: LD_INT 3
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: LD_INT 21
8333: PUSH
8334: LD_INT 1
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PPUSH
8345: CALL_OW 70
8349: PUSH
8350: LD_INT 2
8352: GREATER
8353: AND
8354: PUSH
8355: LD_INT 22
8357: PPUSH
8358: LD_INT 22
8360: PUSH
8361: LD_INT 1
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: LD_INT 2
8370: PUSH
8371: LD_INT 21
8373: PUSH
8374: LD_INT 1
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PUSH
8381: LD_INT 59
8383: PUSH
8384: EMPTY
8385: LIST
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: LIST
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PPUSH
8396: CALL_OW 70
8400: PUSH
8401: LD_INT 0
8403: EQUAL
8404: AND
8405: IFFALSE 8420
8407: GO 8409
8409: DISABLE
// begin SetSide ( dep1 , 3 ) ;
8410: LD_INT 1
8412: PPUSH
8413: LD_INT 3
8415: PPUSH
8416: CALL_OW 235
// end ;
8420: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8421: LD_EXP 30
8425: PUSH
8426: LD_INT 1
8428: EQUAL
8429: PUSH
8430: LD_INT 22
8432: PUSH
8433: LD_INT 0
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: PUSH
8440: LD_INT 25
8442: PUSH
8443: LD_INT 14
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PPUSH
8454: CALL_OW 69
8458: PUSH
8459: LD_INT 0
8461: EQUAL
8462: AND
8463: IFFALSE 8564
8465: GO 8467
8467: DISABLE
8468: LD_INT 0
8470: PPUSH
8471: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8472: LD_ADDR_VAR 0 2
8476: PUSH
8477: LD_INT 22
8479: PUSH
8480: LD_INT 1
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: LD_INT 21
8489: PUSH
8490: LD_INT 1
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 23
8499: PUSH
8500: LD_INT 1
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: LIST
8511: PPUSH
8512: CALL_OW 69
8516: ST_TO_ADDR
// for i in tmp do
8517: LD_ADDR_VAR 0 1
8521: PUSH
8522: LD_VAR 0 2
8526: PUSH
8527: FOR_IN
8528: IFFALSE 8555
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8530: LD_VAR 0 1
8534: PPUSH
8535: LD_INT 1
8537: PPUSH
8538: LD_INT 4
8540: PPUSH
8541: CALL_OW 12
8545: PPUSH
8546: LD_INT 300
8548: PPUSH
8549: CALL_OW 492
8553: GO 8527
8555: POP
8556: POP
// SetAchievement ( ACH_TIGER ) ;
8557: LD_STRING ACH_TIGER
8559: PPUSH
8560: CALL_OW 543
// end ;
8564: PPOPN 2
8566: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8567: LD_INT 22
8569: PUSH
8570: LD_INT 1
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 34
8579: PUSH
8580: LD_INT 51
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PPUSH
8591: CALL_OW 69
8595: PUSH
8596: LD_INT 2
8598: GREATEREQUAL
8599: IFFALSE 8611
8601: GO 8603
8603: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8604: LD_STRING ACH_CARGO
8606: PPUSH
8607: CALL_OW 543
8611: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
8612: LD_INT 0
8614: PPUSH
8615: PPUSH
8616: PPUSH
8617: PPUSH
// for i = 1 to count do
8618: LD_ADDR_VAR 0 8
8622: PUSH
8623: DOUBLE
8624: LD_INT 1
8626: DEC
8627: ST_TO_ADDR
8628: LD_VAR 0 6
8632: PUSH
8633: FOR_TO
8634: IFFALSE 8715
// begin uc_side = side ;
8636: LD_ADDR_OWVAR 20
8640: PUSH
8641: LD_VAR 0 1
8645: ST_TO_ADDR
// uc_nation = nation ;
8646: LD_ADDR_OWVAR 21
8650: PUSH
8651: LD_VAR 0 2
8655: ST_TO_ADDR
// hc_gallery =  ;
8656: LD_ADDR_OWVAR 33
8660: PUSH
8661: LD_STRING 
8663: ST_TO_ADDR
// hc_name =  ;
8664: LD_ADDR_OWVAR 26
8668: PUSH
8669: LD_STRING 
8671: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8672: LD_INT 0
8674: PPUSH
8675: LD_VAR 0 5
8679: PPUSH
8680: LD_VAR 0 4
8684: PPUSH
8685: CALL_OW 380
// un = CreateHuman ;
8689: LD_ADDR_VAR 0 10
8693: PUSH
8694: CALL_OW 44
8698: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8699: LD_VAR 0 10
8703: PPUSH
8704: LD_VAR 0 3
8708: PPUSH
8709: CALL_OW 52
// end ;
8713: GO 8633
8715: POP
8716: POP
// end ;
8717: LD_VAR 0 7
8721: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8722: LD_INT 0
8724: PPUSH
8725: PPUSH
8726: PPUSH
// uc_side := GetSide ( b ) ;
8727: LD_ADDR_OWVAR 20
8731: PUSH
8732: LD_VAR 0 2
8736: PPUSH
8737: CALL_OW 255
8741: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8742: LD_ADDR_OWVAR 21
8746: PUSH
8747: LD_VAR 0 2
8751: PPUSH
8752: CALL_OW 248
8756: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8757: LD_INT 0
8759: PPUSH
8760: LD_INT 1
8762: PPUSH
8763: LD_VAR 0 1
8767: PPUSH
8768: CALL_OW 380
// un = CreateHuman ;
8772: LD_ADDR_VAR 0 4
8776: PUSH
8777: CALL_OW 44
8781: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8782: LD_ADDR_VAR 0 5
8786: PUSH
8787: LD_VAR 0 2
8791: PPUSH
8792: CALL_OW 254
8796: PUSH
8797: LD_INT 3
8799: MINUS
8800: ST_TO_ADDR
// if dir < 0 then
8801: LD_VAR 0 5
8805: PUSH
8806: LD_INT 0
8808: LESS
8809: IFFALSE 8825
// dir := 6 + dir ;
8811: LD_ADDR_VAR 0 5
8815: PUSH
8816: LD_INT 6
8818: PUSH
8819: LD_VAR 0 5
8823: PLUS
8824: ST_TO_ADDR
// SetDir ( un , dir ) ;
8825: LD_VAR 0 4
8829: PPUSH
8830: LD_VAR 0 5
8834: PPUSH
8835: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8839: LD_VAR 0 4
8843: PPUSH
8844: LD_VAR 0 2
8848: PPUSH
8849: CALL_OW 52
// end ;
8853: LD_VAR 0 3
8857: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOk_list , j ; begin
8858: LD_INT 0
8860: PPUSH
8861: PPUSH
8862: PPUSH
8863: PPUSH
8864: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8865: LD_ADDR_VAR 0 7
8869: PUSH
8870: LD_INT 22
8872: PUSH
8873: LD_VAR 0 1
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 25
8884: PUSH
8885: LD_INT 2
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 24
8894: PUSH
8895: LD_INT 1000
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 69
8911: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8912: LD_ADDR_VAR 0 5
8916: PUSH
8917: LD_VAR 0 3
8921: PPUSH
8922: LD_INT 22
8924: PUSH
8925: LD_VAR 0 1
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: PUSH
8934: LD_INT 21
8936: PUSH
8937: LD_INT 3
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 3
8946: PUSH
8947: LD_INT 24
8949: PUSH
8950: LD_INT 1000
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: PPUSH
8969: CALL_OW 70
8973: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
8974: LD_VAR 0 5
8978: PUSH
8979: LD_INT 0
8981: GREATER
8982: PUSH
8983: LD_VAR 0 7
8987: PUSH
8988: LD_INT 0
8990: GREATER
8991: AND
8992: IFFALSE 9058
// begin for i in engineerOk_list do
8994: LD_ADDR_VAR 0 6
8998: PUSH
8999: LD_VAR 0 7
9003: PUSH
9004: FOR_IN
9005: IFFALSE 9056
// begin for j in buildings_list do
9007: LD_ADDR_VAR 0 8
9011: PUSH
9012: LD_VAR 0 5
9016: PUSH
9017: FOR_IN
9018: IFFALSE 9052
// begin AddComExitBuilding ( i ) ;
9020: LD_VAR 0 6
9024: PPUSH
9025: CALL_OW 182
// wait ( 0 0$1 ) ;
9029: LD_INT 35
9031: PPUSH
9032: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
9036: LD_VAR 0 6
9040: PPUSH
9041: LD_VAR 0 8
9045: PPUSH
9046: CALL_OW 190
// end ;
9050: GO 9017
9052: POP
9053: POP
// end ;
9054: GO 9004
9056: POP
9057: POP
// end ; if buildings_list = 0 then
9058: LD_VAR 0 5
9062: PUSH
9063: LD_INT 0
9065: EQUAL
9066: IFFALSE 9099
// begin for i in engineerOK_list do
9068: LD_ADDR_VAR 0 6
9072: PUSH
9073: LD_VAR 0 7
9077: PUSH
9078: FOR_IN
9079: IFFALSE 9097
// begin ComEnterUnit ( i , building ) ;
9081: LD_VAR 0 6
9085: PPUSH
9086: LD_VAR 0 2
9090: PPUSH
9091: CALL_OW 120
// end ;
9095: GO 9078
9097: POP
9098: POP
// end ; end ;
9099: LD_VAR 0 4
9103: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
9104: LD_INT 0
9106: PPUSH
9107: PPUSH
9108: PPUSH
9109: PPUSH
9110: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9111: LD_ADDR_VAR 0 6
9115: PUSH
9116: LD_INT 22
9118: PUSH
9119: LD_VAR 0 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 25
9130: PUSH
9131: LD_INT 4
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 24
9140: PUSH
9141: LD_INT 250
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: PPUSH
9153: CALL_OW 69
9157: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9158: LD_ADDR_VAR 0 9
9162: PUSH
9163: LD_VAR 0 3
9167: PPUSH
9168: LD_INT 22
9170: PUSH
9171: LD_VAR 0 1
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PUSH
9180: LD_INT 21
9182: PUSH
9183: LD_INT 1
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PUSH
9190: LD_INT 3
9192: PUSH
9193: LD_INT 24
9195: PUSH
9196: LD_INT 650
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: PPUSH
9212: CALL_OW 70
9216: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
9217: LD_VAR 0 9
9221: PUSH
9222: LD_INT 0
9224: GREATER
9225: PUSH
9226: LD_VAR 0 6
9230: PUSH
9231: LD_INT 0
9233: GREATER
9234: AND
9235: IFFALSE 9362
// begin for i = 1 to damageUnits do
9237: LD_ADDR_VAR 0 7
9241: PUSH
9242: DOUBLE
9243: LD_INT 1
9245: DEC
9246: ST_TO_ADDR
9247: LD_VAR 0 9
9251: PUSH
9252: FOR_TO
9253: IFFALSE 9277
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
9255: LD_VAR 0 9
9259: PUSH
9260: LD_VAR 0 7
9264: ARRAY
9265: PPUSH
9266: LD_VAR 0 2
9270: PPUSH
9271: CALL_OW 113
9275: GO 9252
9277: POP
9278: POP
// for i in sci_list do
9279: LD_ADDR_VAR 0 7
9283: PUSH
9284: LD_VAR 0 6
9288: PUSH
9289: FOR_IN
9290: IFFALSE 9358
// begin ComExitBuilding ( i ) ;
9292: LD_VAR 0 7
9296: PPUSH
9297: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
9301: LD_ADDR_VAR 0 8
9305: PUSH
9306: LD_VAR 0 2
9310: PPUSH
9311: LD_INT 22
9313: PUSH
9314: LD_VAR 0 1
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PPUSH
9323: CALL_OW 70
9327: PUSH
9328: FOR_IN
9329: IFFALSE 9354
// begin AddComHeal ( i , j ) ;
9331: LD_VAR 0 7
9335: PPUSH
9336: LD_VAR 0 8
9340: PPUSH
9341: CALL_OW 188
// wait ( 1 1$0 ) ;
9345: LD_INT 2100
9347: PPUSH
9348: CALL_OW 67
// end ;
9352: GO 9328
9354: POP
9355: POP
// end ;
9356: GO 9289
9358: POP
9359: POP
// end else
9360: GO 9376
// begin AddComEnterUnit ( sci_list , build ) ;
9362: LD_VAR 0 6
9366: PPUSH
9367: LD_VAR 0 4
9371: PPUSH
9372: CALL_OW 180
// end ; end ;
9376: LD_VAR 0 5
9380: RET
// export function RepairVehicle ( side , repairArea , area ) ; var i , j , vehicleOK_list , damageVehicle_list , emptyVehicle_list , mechanicInside_list , mechanicOutside_list ; begin
9381: LD_INT 0
9383: PPUSH
9384: PPUSH
9385: PPUSH
9386: PPUSH
9387: PPUSH
9388: PPUSH
9389: PPUSH
9390: PPUSH
// vehicleOK_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 550 ] , [ f_weapon , 46 ] ] ) ;
9391: LD_ADDR_VAR 0 7
9395: PUSH
9396: LD_VAR 0 3
9400: PPUSH
9401: LD_INT 22
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 21
9415: PUSH
9416: LD_INT 2
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 24
9425: PUSH
9426: LD_INT 550
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 34
9435: PUSH
9436: LD_INT 46
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: PPUSH
9449: CALL_OW 70
9453: ST_TO_ADDR
// damageVehicle_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_not , [ f_lives , 550 ] ] ] ) ;
9454: LD_ADDR_VAR 0 8
9458: PUSH
9459: LD_VAR 0 3
9463: PPUSH
9464: LD_INT 22
9466: PUSH
9467: LD_VAR 0 1
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PUSH
9476: LD_INT 21
9478: PUSH
9479: LD_INT 2
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 34
9488: PUSH
9489: LD_INT 46
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: LD_INT 3
9498: PUSH
9499: LD_INT 24
9501: PUSH
9502: LD_INT 550
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: PPUSH
9519: CALL_OW 70
9523: ST_TO_ADDR
// emptyVehicle_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 46 ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9524: LD_ADDR_VAR 0 9
9528: PUSH
9529: LD_VAR 0 2
9533: PPUSH
9534: LD_INT 22
9536: PUSH
9537: LD_VAR 0 1
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 21
9548: PUSH
9549: LD_INT 2
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: LD_INT 34
9558: PUSH
9559: LD_INT 46
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: LD_INT 24
9568: PUSH
9569: LD_INT 1000
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 58
9578: PUSH
9579: EMPTY
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 70
9593: ST_TO_ADDR
// for i in damageVehicle_list do
9594: LD_ADDR_VAR 0 5
9598: PUSH
9599: LD_VAR 0 8
9603: PUSH
9604: FOR_IN
9605: IFFALSE 9624
// mechanicInside_list = UnitsInside ( i ) ;
9607: LD_ADDR_VAR 0 10
9611: PUSH
9612: LD_VAR 0 5
9616: PPUSH
9617: CALL_OW 313
9621: ST_TO_ADDR
9622: GO 9604
9624: POP
9625: POP
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9626: LD_ADDR_VAR 0 11
9630: PUSH
9631: LD_VAR 0 2
9635: PPUSH
9636: LD_INT 22
9638: PUSH
9639: LD_VAR 0 1
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 25
9650: PUSH
9651: LD_INT 3
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 70
9666: ST_TO_ADDR
// if damageVehicle_list > 0 then
9667: LD_VAR 0 8
9671: PUSH
9672: LD_INT 0
9674: GREATER
9675: IFFALSE 9748
// begin for i in damageVehicle_list do
9677: LD_ADDR_VAR 0 5
9681: PUSH
9682: LD_VAR 0 8
9686: PUSH
9687: FOR_IN
9688: IFFALSE 9746
// begin for j in mechanicInside_list do
9690: LD_ADDR_VAR 0 6
9694: PUSH
9695: LD_VAR 0 10
9699: PUSH
9700: FOR_IN
9701: IFFALSE 9742
// begin ComMoveToArea ( damageVehicle_list , repairArea ) ;
9703: LD_VAR 0 8
9707: PPUSH
9708: LD_VAR 0 2
9712: PPUSH
9713: CALL_OW 113
// AddComExitVehicle ( j ) ;
9717: LD_VAR 0 6
9721: PPUSH
9722: CALL_OW 181
// AddComRepairVehicle ( j , i ) ;
9726: LD_VAR 0 6
9730: PPUSH
9731: LD_VAR 0 5
9735: PPUSH
9736: CALL_OW 189
// end ;
9740: GO 9700
9742: POP
9743: POP
// end ;
9744: GO 9687
9746: POP
9747: POP
// end ; if emptyVehicle_list > 0 then
9748: LD_VAR 0 9
9752: PUSH
9753: LD_INT 0
9755: GREATER
9756: IFFALSE 9806
// begin for i in emptyVehicle_list do
9758: LD_ADDR_VAR 0 5
9762: PUSH
9763: LD_VAR 0 9
9767: PUSH
9768: FOR_IN
9769: IFFALSE 9804
// begin for j in mechanicOutside_list do
9771: LD_ADDR_VAR 0 6
9775: PUSH
9776: LD_VAR 0 11
9780: PUSH
9781: FOR_IN
9782: IFFALSE 9800
// begin AddComEnterUnit ( j , i ) ;
9784: LD_VAR 0 6
9788: PPUSH
9789: LD_VAR 0 5
9793: PPUSH
9794: CALL_OW 180
// end ;
9798: GO 9781
9800: POP
9801: POP
// end ;
9802: GO 9768
9804: POP
9805: POP
// end ; if VehicleOK_list > 0 then
9806: LD_VAR 0 7
9810: PUSH
9811: LD_INT 0
9813: GREATER
9814: IFFALSE 9848
// begin for i in VehicleOK_list do
9816: LD_ADDR_VAR 0 5
9820: PUSH
9821: LD_VAR 0 7
9825: PUSH
9826: FOR_IN
9827: IFFALSE 9846
// ComAgressiveMove ( i , 110 , 29 ) ;
9829: LD_VAR 0 5
9833: PPUSH
9834: LD_INT 110
9836: PPUSH
9837: LD_INT 29
9839: PPUSH
9840: CALL_OW 114
9844: GO 9826
9846: POP
9847: POP
// end ; end ;
9848: LD_VAR 0 4
9852: RET
// export function DefendBases ( area , enemySide , defendersList , build , count ) ; var i , j ; begin
9853: LD_INT 0
9855: PPUSH
9856: PPUSH
9857: PPUSH
// if FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) > count then
9858: LD_VAR 0 1
9862: PPUSH
9863: LD_INT 22
9865: PUSH
9866: LD_VAR 0 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: LD_INT 21
9880: PUSH
9881: LD_INT 2
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 1
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PPUSH
9907: CALL_OW 70
9911: PUSH
9912: LD_VAR 0 5
9916: GREATER
9917: IFFALSE 10049
// begin for i in defendersList do
9919: LD_ADDR_VAR 0 7
9923: PUSH
9924: LD_VAR 0 3
9928: PUSH
9929: FOR_IN
9930: IFFALSE 10045
// begin AddComExitBuilding ( i ) ;
9932: LD_VAR 0 7
9936: PPUSH
9937: CALL_OW 182
// wait ( 0 0$1 ) ;
9941: LD_INT 35
9943: PPUSH
9944: CALL_OW 67
// for j in FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) do
9948: LD_ADDR_VAR 0 8
9952: PUSH
9953: LD_VAR 0 1
9957: PPUSH
9958: LD_INT 22
9960: PUSH
9961: LD_VAR 0 2
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 2
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 1
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 70
10006: PUSH
10007: FOR_IN
10008: IFFALSE 10041
// AddComAgressiveMove ( i , GetX ( j ) , GetY ( j ) ) ;
10010: LD_VAR 0 7
10014: PPUSH
10015: LD_VAR 0 8
10019: PPUSH
10020: CALL_OW 250
10024: PPUSH
10025: LD_VAR 0 8
10029: PPUSH
10030: CALL_OW 251
10034: PPUSH
10035: CALL_OW 174
10039: GO 10007
10041: POP
10042: POP
// end ;
10043: GO 9929
10045: POP
10046: POP
// end else
10047: GO 10080
// begin for i in defendersList do
10049: LD_ADDR_VAR 0 7
10053: PUSH
10054: LD_VAR 0 3
10058: PUSH
10059: FOR_IN
10060: IFFALSE 10078
// ComEnterUnit ( i , build ) ;
10062: LD_VAR 0 7
10066: PPUSH
10067: LD_VAR 0 4
10071: PPUSH
10072: CALL_OW 120
10076: GO 10059
10078: POP
10079: POP
// end ; end ;
10080: LD_VAR 0 6
10084: RET
// export function RussianTrap ; var i ; begin
10085: LD_INT 0
10087: PPUSH
10088: PPUSH
// if GetSide ( Brian ) = 4 then
10089: LD_EXP 6
10093: PPUSH
10094: CALL_OW 255
10098: PUSH
10099: LD_INT 4
10101: EQUAL
10102: IFFALSE 10125
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10104: LD_EXP 6
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PPUSH
10118: LD_INT 0
10120: PPUSH
10121: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10125: LD_ADDR_VAR 0 2
10129: PUSH
10130: LD_INT 22
10132: PUSH
10133: LD_INT 3
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: LD_INT 21
10142: PUSH
10143: LD_INT 1
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PPUSH
10154: CALL_OW 69
10158: PUSH
10159: FOR_IN
10160: IFFALSE 10270
// begin ComExitBuilding ( i ) ;
10162: LD_VAR 0 2
10166: PPUSH
10167: CALL_OW 122
// wait ( 0 0$1 ) ;
10171: LD_INT 35
10173: PPUSH
10174: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10178: LD_VAR 0 2
10182: PPUSH
10183: LD_INT 120
10185: PPUSH
10186: LD_INT 56
10188: PPUSH
10189: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10193: LD_VAR 0 2
10197: PPUSH
10198: LD_INT 111
10200: PPUSH
10201: LD_INT 37
10203: PPUSH
10204: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10208: LD_INT 33
10210: PPUSH
10211: CALL_OW 255
10215: PUSH
10216: LD_INT 3
10218: EQUAL
10219: PUSH
10220: LD_INT 33
10222: PPUSH
10223: CALL_OW 302
10227: AND
10228: IFFALSE 10244
// begin AddComEnterUnit ( i , arm2 ) ;
10230: LD_VAR 0 2
10234: PPUSH
10235: LD_INT 33
10237: PPUSH
10238: CALL_OW 180
// end else
10242: GO 10268
// begin AddComCrawl ( i ) ;
10244: LD_VAR 0 2
10248: PPUSH
10249: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10253: LD_VAR 0 2
10257: PPUSH
10258: LD_INT 109
10260: PPUSH
10261: LD_INT 30
10263: PPUSH
10264: CALL_OW 174
// end ; end ;
10268: GO 10159
10270: POP
10271: POP
// end ;
10272: LD_VAR 0 1
10276: RET
// export function Nearest ( un , units ) ; var nearest_dist , nearest_un , sold , dist ; begin
10277: LD_INT 0
10279: PPUSH
10280: PPUSH
10281: PPUSH
10282: PPUSH
10283: PPUSH
// nearest_dist = 1000 ;
10284: LD_ADDR_VAR 0 4
10288: PUSH
10289: LD_INT 1000
10291: ST_TO_ADDR
// nearest_un = un ;
10292: LD_ADDR_VAR 0 5
10296: PUSH
10297: LD_VAR 0 1
10301: ST_TO_ADDR
// for sold in units do
10302: LD_ADDR_VAR 0 6
10306: PUSH
10307: LD_VAR 0 2
10311: PUSH
10312: FOR_IN
10313: IFFALSE 10369
// begin dist = GetDistUnits ( un , sold ) ;
10315: LD_ADDR_VAR 0 7
10319: PUSH
10320: LD_VAR 0 1
10324: PPUSH
10325: LD_VAR 0 6
10329: PPUSH
10330: CALL_OW 296
10334: ST_TO_ADDR
// if dist < nearest_dist then
10335: LD_VAR 0 7
10339: PUSH
10340: LD_VAR 0 4
10344: LESS
10345: IFFALSE 10367
// begin nearest_un = sold ;
10347: LD_ADDR_VAR 0 5
10351: PUSH
10352: LD_VAR 0 6
10356: ST_TO_ADDR
// nearest_dist = dist ;
10357: LD_ADDR_VAR 0 4
10361: PUSH
10362: LD_VAR 0 7
10366: ST_TO_ADDR
// end ; end ;
10367: GO 10312
10369: POP
10370: POP
// result := nearest_un ;
10371: LD_ADDR_VAR 0 3
10375: PUSH
10376: LD_VAR 0 5
10380: ST_TO_ADDR
// end ;
10381: LD_VAR 0 3
10385: RET
// export function PrepareDifficulty ; begin
10386: LD_INT 0
10388: PPUSH
// if Difficulty = 1 then
10389: LD_OWVAR 67
10393: PUSH
10394: LD_INT 1
10396: EQUAL
10397: IFFALSE 10460
// begin RemoveUnit ( brw2 ) ;
10399: LD_INT 9
10401: PPUSH
10402: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10406: LD_INT 30
10408: PPUSH
10409: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10413: LD_INT 52
10415: PPUSH
10416: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10420: LD_INT 63
10422: PPUSH
10423: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10427: LD_INT 5
10429: PUSH
10430: LD_INT 4
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PPUSH
10437: LD_INT 60
10439: PPUSH
10440: CALL_OW 240
// RuSoldMinLevel = 0 ;
10444: LD_ADDR_EXP 13
10448: PUSH
10449: LD_INT 0
10451: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10452: LD_ADDR_EXP 14
10456: PUSH
10457: LD_INT 1
10459: ST_TO_ADDR
// end ; if Difficulty = 2 then
10460: LD_OWVAR 67
10464: PUSH
10465: LD_INT 2
10467: EQUAL
10468: IFFALSE 10510
// begin RemoveUnit ( brw4 ) ;
10470: LD_INT 52
10472: PPUSH
10473: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10477: LD_INT 5
10479: PUSH
10480: LD_INT 4
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PPUSH
10487: LD_INT 50
10489: PPUSH
10490: CALL_OW 240
// RuSoldMinLevel = 1 ;
10494: LD_ADDR_EXP 13
10498: PUSH
10499: LD_INT 1
10501: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10502: LD_ADDR_EXP 14
10506: PUSH
10507: LD_INT 2
10509: ST_TO_ADDR
// end ; if Difficulty = 3 then
10510: LD_OWVAR 67
10514: PUSH
10515: LD_INT 3
10517: EQUAL
10518: IFFALSE 10553
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10520: LD_INT 5
10522: PUSH
10523: LD_INT 4
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PPUSH
10530: LD_INT 40
10532: PPUSH
10533: CALL_OW 240
// RuSoldMinLevel = 2 ;
10537: LD_ADDR_EXP 13
10541: PUSH
10542: LD_INT 2
10544: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10545: LD_ADDR_EXP 14
10549: PUSH
10550: LD_INT 3
10552: ST_TO_ADDR
// end ; end ;
10553: LD_VAR 0 1
10557: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10558: LD_INT 0
10560: PPUSH
10561: PPUSH
10562: PPUSH
// tmp = [ ] ;
10563: LD_ADDR_VAR 0 5
10567: PUSH
10568: EMPTY
10569: ST_TO_ADDR
// if not vehicles then
10570: LD_VAR 0 1
10574: NOT
10575: IFFALSE 10579
// exit ;
10577: GO 10696
// for i in vehicles do
10579: LD_ADDR_VAR 0 4
10583: PUSH
10584: LD_VAR 0 1
10588: PUSH
10589: FOR_IN
10590: IFFALSE 10680
// begin tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10592: LD_ADDR_VAR 0 5
10596: PUSH
10597: LD_VAR 0 5
10601: PPUSH
10602: LD_INT 1
10604: PPUSH
10605: LD_VAR 0 4
10609: PPUSH
10610: CALL_OW 265
10614: PUSH
10615: LD_VAR 0 4
10619: PPUSH
10620: CALL_OW 262
10624: PUSH
10625: LD_VAR 0 4
10629: PPUSH
10630: CALL_OW 263
10634: PUSH
10635: LD_VAR 0 4
10639: PPUSH
10640: CALL_OW 264
10644: PUSH
10645: LD_VAR 0 4
10649: PPUSH
10650: CALL_OW 261
10654: PUSH
10655: LD_VAR 0 4
10659: PPUSH
10660: CALL_OW 256
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 2
10677: ST_TO_ADDR
// end ;
10678: GO 10589
10680: POP
10681: POP
// SaveVariable ( tmp , ident ) ;
10682: LD_VAR 0 5
10686: PPUSH
10687: LD_VAR 0 2
10691: PPUSH
10692: CALL_OW 39
// end ; end_of_file
10696: LD_VAR 0 3
10700: RET
// export function PrepareHeroes ; var plive ; begin
10701: LD_INT 0
10703: PPUSH
10704: PPUSH
// uc_side = 1 ;
10705: LD_ADDR_OWVAR 20
10709: PUSH
10710: LD_INT 1
10712: ST_TO_ADDR
// JMM = CreateCharacter ( 01_JMM ) ;
10713: LD_ADDR_EXP 1
10717: PUSH
10718: LD_STRING 01_JMM
10720: PPUSH
10721: CALL_OW 34
10725: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10726: LD_ADDR_VAR 0 2
10730: PUSH
10731: LD_STRING 01_JMMLifePoints_1
10733: PPUSH
10734: LD_INT 1000
10736: PPUSH
10737: CALL_OW 30
10741: ST_TO_ADDR
// if plive < 250 then
10742: LD_VAR 0 2
10746: PUSH
10747: LD_INT 250
10749: LESS
10750: IFFALSE 10760
// plive := 300 ;
10752: LD_ADDR_VAR 0 2
10756: PUSH
10757: LD_INT 300
10759: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10760: LD_EXP 1
10764: PPUSH
10765: LD_VAR 0 2
10769: PPUSH
10770: CALL_OW 234
// Powell = NewCharacter ( Powell ) ;
10774: LD_ADDR_EXP 9
10778: PUSH
10779: LD_STRING Powell
10781: PPUSH
10782: CALL_OW 25
10786: ST_TO_ADDR
// Bobby = CreateCharacter ( 01_Bobby ) ;
10787: LD_ADDR_EXP 2
10791: PUSH
10792: LD_STRING 01_Bobby
10794: PPUSH
10795: CALL_OW 34
10799: ST_TO_ADDR
// if Bobby then
10800: LD_EXP 2
10804: IFFALSE 10854
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10806: LD_ADDR_VAR 0 2
10810: PUSH
10811: LD_STRING 01_BobbyLifePoints_1
10813: PPUSH
10814: LD_INT 1000
10816: PPUSH
10817: CALL_OW 30
10821: ST_TO_ADDR
// if plive < 250 then
10822: LD_VAR 0 2
10826: PUSH
10827: LD_INT 250
10829: LESS
10830: IFFALSE 10840
// plive := 300 ;
10832: LD_ADDR_VAR 0 2
10836: PUSH
10837: LD_INT 300
10839: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10840: LD_EXP 2
10844: PPUSH
10845: LD_VAR 0 2
10849: PPUSH
10850: CALL_OW 234
// end ; Cyrus = CreateCharacter ( 01_Cyrus ) ;
10854: LD_ADDR_EXP 3
10858: PUSH
10859: LD_STRING 01_Cyrus
10861: PPUSH
10862: CALL_OW 34
10866: ST_TO_ADDR
// if Cyrus then
10867: LD_EXP 3
10871: IFFALSE 10921
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10873: LD_ADDR_VAR 0 2
10877: PUSH
10878: LD_STRING 01_CyrusLifePoints_1
10880: PPUSH
10881: LD_INT 1000
10883: PPUSH
10884: CALL_OW 30
10888: ST_TO_ADDR
// if plive < 250 then
10889: LD_VAR 0 2
10893: PUSH
10894: LD_INT 250
10896: LESS
10897: IFFALSE 10907
// plive := 300 ;
10899: LD_ADDR_VAR 0 2
10903: PUSH
10904: LD_INT 300
10906: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10907: LD_EXP 3
10911: PPUSH
10912: LD_VAR 0 2
10916: PPUSH
10917: CALL_OW 234
// end ; Khatam = NewCharacter ( Khatam ) ;
10921: LD_ADDR_EXP 5
10925: PUSH
10926: LD_STRING Khatam
10928: PPUSH
10929: CALL_OW 25
10933: ST_TO_ADDR
// uc_side = 4 ;
10934: LD_ADDR_OWVAR 20
10938: PUSH
10939: LD_INT 4
10941: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10942: LD_ADDR_EXP 4
10946: PUSH
10947: LD_STRING Lisa
10949: PPUSH
10950: CALL_OW 25
10954: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10955: LD_EXP 1
10959: PPUSH
10960: LD_INT 3
10962: PPUSH
10963: LD_INT 0
10965: PPUSH
10966: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10970: LD_EXP 2
10974: PPUSH
10975: LD_INT 3
10977: PPUSH
10978: LD_INT 0
10980: PPUSH
10981: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10985: LD_EXP 3
10989: PPUSH
10990: LD_INT 3
10992: PPUSH
10993: LD_INT 0
10995: PPUSH
10996: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11000: LD_EXP 4
11004: PPUSH
11005: LD_INT 5
11007: PPUSH
11008: LD_INT 0
11010: PPUSH
11011: CALL_OW 49
// ComCrawl ( Lisa ) ;
11015: LD_EXP 4
11019: PPUSH
11020: CALL_OW 137
// end ;
11024: LD_VAR 0 1
11028: RET
// export function PrepareLisSquad ; var i , un ; begin
11029: LD_INT 0
11031: PPUSH
11032: PPUSH
11033: PPUSH
// uc_side = 4 ;
11034: LD_ADDR_OWVAR 20
11038: PUSH
11039: LD_INT 4
11041: ST_TO_ADDR
// uc_nation = 1 ;
11042: LD_ADDR_OWVAR 21
11046: PUSH
11047: LD_INT 1
11049: ST_TO_ADDR
// hc_class := 2 ;
11050: LD_ADDR_OWVAR 28
11054: PUSH
11055: LD_INT 2
11057: ST_TO_ADDR
// hc_sex := sex_male ;
11058: LD_ADDR_OWVAR 27
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// hc_gallery :=  ;
11066: LD_ADDR_OWVAR 33
11070: PUSH
11071: LD_STRING 
11073: ST_TO_ADDR
// hc_name :=  ;
11074: LD_ADDR_OWVAR 26
11078: PUSH
11079: LD_STRING 
11081: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11082: LD_ADDR_OWVAR 30
11086: PUSH
11087: LD_INT 0
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: LD_INT 0
11095: PUSH
11096: LD_INT 0
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11105: LD_ADDR_OWVAR 31
11109: PUSH
11110: LD_INT 1
11112: PUSH
11113: LD_INT 2
11115: PUSH
11116: LD_INT 0
11118: PUSH
11119: LD_INT 0
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: ST_TO_ADDR
// un := CreateHuman ;
11128: LD_ADDR_VAR 0 3
11132: PUSH
11133: CALL_OW 44
11137: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 6
11145: PPUSH
11146: LD_INT 0
11148: PPUSH
11149: CALL_OW 49
// hc_sex := sex_female ;
11153: LD_ADDR_OWVAR 27
11157: PUSH
11158: LD_INT 2
11160: ST_TO_ADDR
// hc_gallery :=  ;
11161: LD_ADDR_OWVAR 33
11165: PUSH
11166: LD_STRING 
11168: ST_TO_ADDR
// hc_name :=  ;
11169: LD_ADDR_OWVAR 26
11173: PUSH
11174: LD_STRING 
11176: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11177: LD_ADDR_OWVAR 30
11181: PUSH
11182: LD_INT 0
11184: PUSH
11185: LD_INT 0
11187: PUSH
11188: LD_INT 0
11190: PUSH
11191: LD_INT 1
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11200: LD_ADDR_OWVAR 31
11204: PUSH
11205: LD_INT 0
11207: PUSH
11208: LD_INT 1
11210: PUSH
11211: LD_INT 0
11213: PUSH
11214: LD_INT 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: ST_TO_ADDR
// un := CreateHuman ;
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: CALL_OW 44
11232: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11233: LD_VAR 0 3
11237: PPUSH
11238: LD_INT 6
11240: PPUSH
11241: LD_INT 0
11243: PPUSH
11244: CALL_OW 49
// if not Bobby and not Cyrus then
11248: LD_EXP 2
11252: NOT
11253: PUSH
11254: LD_EXP 3
11258: NOT
11259: AND
11260: IFFALSE 11365
// begin hc_class := 1 ;
11262: LD_ADDR_OWVAR 28
11266: PUSH
11267: LD_INT 1
11269: ST_TO_ADDR
// hc_sex := sex_male ;
11270: LD_ADDR_OWVAR 27
11274: PUSH
11275: LD_INT 1
11277: ST_TO_ADDR
// hc_gallery :=  ;
11278: LD_ADDR_OWVAR 33
11282: PUSH
11283: LD_STRING 
11285: ST_TO_ADDR
// hc_name :=  ;
11286: LD_ADDR_OWVAR 26
11290: PUSH
11291: LD_STRING 
11293: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11294: LD_ADDR_OWVAR 30
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: LD_INT 3
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: LD_INT 0
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11317: LD_ADDR_OWVAR 31
11321: PUSH
11322: LD_INT 2
11324: PUSH
11325: LD_INT 3
11327: PUSH
11328: LD_INT 1
11330: PUSH
11331: LD_INT 0
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: ST_TO_ADDR
// un := CreateHuman ;
11340: LD_ADDR_VAR 0 3
11344: PUSH
11345: CALL_OW 44
11349: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11350: LD_VAR 0 3
11354: PPUSH
11355: LD_INT 31
11357: PPUSH
11358: LD_INT 0
11360: PPUSH
11361: CALL_OW 49
// end ; InitHc ;
11365: CALL_OW 19
// end ;
11369: LD_VAR 0 1
11373: RET
// export function PrepareOtherAmericans ; begin
11374: LD_INT 0
11376: PPUSH
// uc_side = 4 ;
11377: LD_ADDR_OWVAR 20
11381: PUSH
11382: LD_INT 4
11384: ST_TO_ADDR
// uc_nation = 1 ;
11385: LD_ADDR_OWVAR 21
11389: PUSH
11390: LD_INT 1
11392: ST_TO_ADDR
// hc_gallery =  ;
11393: LD_ADDR_OWVAR 33
11397: PUSH
11398: LD_STRING 
11400: ST_TO_ADDR
// hc_name = Tom Garvin ;
11401: LD_ADDR_OWVAR 26
11405: PUSH
11406: LD_STRING Tom Garvin
11408: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( 1 , 2 ) ) ;
11409: LD_INT 1
11411: PPUSH
11412: LD_INT 1
11414: PPUSH
11415: LD_INT 1
11417: PPUSH
11418: LD_INT 2
11420: PPUSH
11421: CALL_OW 12
11425: PPUSH
11426: CALL_OW 380
// Brian = CreateHuman ;
11430: LD_ADDR_EXP 6
11434: PUSH
11435: CALL_OW 44
11439: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11440: LD_EXP 6
11444: PPUSH
11445: LD_INT 10
11447: PPUSH
11448: LD_INT 0
11450: PPUSH
11451: CALL_OW 49
// hc_name = Jerry White ;
11455: LD_ADDR_OWVAR 26
11459: PUSH
11460: LD_STRING Jerry White
11462: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
11463: LD_INT 1
11465: PPUSH
11466: LD_INT 3
11468: PPUSH
11469: LD_INT 1
11471: PPUSH
11472: LD_INT 2
11474: PPUSH
11475: CALL_OW 12
11479: PPUSH
11480: CALL_OW 380
// Jerry = CreateHuman ;
11484: LD_ADDR_EXP 7
11488: PUSH
11489: CALL_OW 44
11493: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11494: LD_EXP 7
11498: PPUSH
11499: LD_INT 10
11501: PPUSH
11502: LD_INT 0
11504: PPUSH
11505: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11509: LD_EXP 6
11513: PUSH
11514: LD_EXP 7
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PPUSH
11523: CALL_OW 140
// end ;
11527: LD_VAR 0 1
11531: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11532: LD_INT 0
11534: PPUSH
11535: PPUSH
11536: PPUSH
// for i = 1 to 6 do
11537: LD_ADDR_VAR 0 2
11541: PUSH
11542: DOUBLE
11543: LD_INT 1
11545: DEC
11546: ST_TO_ADDR
11547: LD_INT 6
11549: PUSH
11550: FOR_TO
11551: IFFALSE 11645
// begin uc_side = 4 ;
11553: LD_ADDR_OWVAR 20
11557: PUSH
11558: LD_INT 4
11560: ST_TO_ADDR
// uc_nation = 1 ;
11561: LD_ADDR_OWVAR 21
11565: PUSH
11566: LD_INT 1
11568: ST_TO_ADDR
// hc_gallery =  ;
11569: LD_ADDR_OWVAR 33
11573: PUSH
11574: LD_STRING 
11576: ST_TO_ADDR
// hc_name =  ;
11577: LD_ADDR_OWVAR 26
11581: PUSH
11582: LD_STRING 
11584: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11585: LD_INT 0
11587: PPUSH
11588: LD_INT 1
11590: PPUSH
11591: LD_INT 4
11593: PPUSH
11594: CALL_OW 12
11598: PPUSH
11599: LD_INT 1
11601: PPUSH
11602: CALL_OW 380
// un = CreateHuman ;
11606: LD_ADDR_VAR 0 3
11610: PUSH
11611: CALL_OW 44
11615: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 16
11623: PPUSH
11624: LD_INT 0
11626: PPUSH
11627: CALL_OW 49
// SetLives ( un , 1 ) ;
11631: LD_VAR 0 3
11635: PPUSH
11636: LD_INT 1
11638: PPUSH
11639: CALL_OW 234
// end ;
11643: GO 11550
11645: POP
11646: POP
// DyingSold = CreateHuman ;
11647: LD_ADDR_EXP 34
11651: PUSH
11652: CALL_OW 44
11656: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11657: LD_EXP 34
11661: PPUSH
11662: LD_INT 16
11664: PPUSH
11665: LD_INT 0
11667: PPUSH
11668: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11672: LD_EXP 34
11676: PPUSH
11677: LD_INT 250
11679: PPUSH
11680: CALL_OW 234
// end ; end_of_file
11684: LD_VAR 0 1
11688: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11689: LD_INT 0
11691: PPUSH
11692: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11693: LD_ADDR_VAR 0 2
11697: PUSH
11698: LD_INT 22
11700: PUSH
11701: LD_INT 1
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 23
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: LD_INT 25
11720: PUSH
11721: LD_INT 2
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: LD_INT 50
11730: PUSH
11731: EMPTY
11732: LIST
11733: PUSH
11734: LD_INT 56
11736: PUSH
11737: EMPTY
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: PPUSH
11747: CALL_OW 69
11751: PUSH
11752: LD_EXP 1
11756: PUSH
11757: EMPTY
11758: LIST
11759: DIFF
11760: ST_TO_ADDR
// uc_side = 6 ;
11761: LD_ADDR_OWVAR 20
11765: PUSH
11766: LD_INT 6
11768: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11769: LD_ADDR_EXP 8
11773: PUSH
11774: LD_STRING Mikhail
11776: PPUSH
11777: CALL_OW 25
11781: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11782: LD_EXP 8
11786: PPUSH
11787: LD_INT 3
11789: PPUSH
11790: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11794: LD_EXP 8
11798: PPUSH
11799: LD_VAR 0 2
11803: PUSH
11804: LD_INT 1
11806: ARRAY
11807: PPUSH
11808: CALL_OW 250
11812: PPUSH
11813: LD_VAR 0 2
11817: PUSH
11818: LD_INT 1
11820: ARRAY
11821: PPUSH
11822: CALL_OW 251
11826: PPUSH
11827: LD_INT 5
11829: PPUSH
11830: LD_INT 1
11832: PPUSH
11833: CALL_OW 50
// end ;
11837: LD_VAR 0 1
11841: RET
// export function PrepareRussianCommander ; begin
11842: LD_INT 0
11844: PPUSH
// uc_side = 3 ;
11845: LD_ADDR_OWVAR 20
11849: PUSH
11850: LD_INT 3
11852: ST_TO_ADDR
// uc_nation = 3 ;
11853: LD_ADDR_OWVAR 21
11857: PUSH
11858: LD_INT 3
11860: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11861: LD_ADDR_EXP 19
11865: PUSH
11866: LD_STRING Natasza
11868: PPUSH
11869: CALL_OW 25
11873: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11874: LD_EXP 19
11878: PPUSH
11879: LD_INT 24
11881: PPUSH
11882: LD_INT 0
11884: PPUSH
11885: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11889: LD_EXP 19
11893: PPUSH
11894: LD_INT 56
11896: PPUSH
11897: LD_INT 16
11899: PPUSH
11900: CALL_OW 118
// northBaseDefenders = northBaseDefenders ^ Natasza ;
11904: LD_ADDR_EXP 24
11908: PUSH
11909: LD_EXP 24
11913: PUSH
11914: LD_EXP 19
11918: ADD
11919: ST_TO_ADDR
// end ;
11920: LD_VAR 0 1
11924: RET
// export function PrepareSouthBase ; var i , un ; begin
11925: LD_INT 0
11927: PPUSH
11928: PPUSH
11929: PPUSH
// for i = 1 to 2 do
11930: LD_ADDR_VAR 0 2
11934: PUSH
11935: DOUBLE
11936: LD_INT 1
11938: DEC
11939: ST_TO_ADDR
11940: LD_INT 2
11942: PUSH
11943: FOR_TO
11944: IFFALSE 12053
// begin uc_side = 3 ;
11946: LD_ADDR_OWVAR 20
11950: PUSH
11951: LD_INT 3
11953: ST_TO_ADDR
// uc_nation = 3 ;
11954: LD_ADDR_OWVAR 21
11958: PUSH
11959: LD_INT 3
11961: ST_TO_ADDR
// hc_gallery =  ;
11962: LD_ADDR_OWVAR 33
11966: PUSH
11967: LD_STRING 
11969: ST_TO_ADDR
// hc_name =  ;
11970: LD_ADDR_OWVAR 26
11974: PUSH
11975: LD_STRING 
11977: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11978: LD_INT 1
11980: PPUSH
11981: LD_INT 1
11983: PPUSH
11984: LD_EXP 13
11988: PPUSH
11989: LD_EXP 14
11993: PPUSH
11994: CALL_OW 12
11998: PPUSH
11999: CALL_OW 380
// hc_importance = 0 ;
12003: LD_ADDR_OWVAR 32
12007: PUSH
12008: LD_INT 0
12010: ST_TO_ADDR
// un = CreateHuman ;
12011: LD_ADDR_VAR 0 3
12015: PUSH
12016: CALL_OW 44
12020: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12021: LD_VAR 0 3
12025: PPUSH
12026: LD_INT 11
12028: PPUSH
12029: LD_INT 0
12031: PPUSH
12032: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12036: LD_VAR 0 3
12040: PPUSH
12041: LD_INT 111
12043: PPUSH
12044: LD_INT 38
12046: PPUSH
12047: CALL_OW 118
// end ;
12051: GO 11943
12053: POP
12054: POP
// for i = 1 to Difficulty do
12055: LD_ADDR_VAR 0 2
12059: PUSH
12060: DOUBLE
12061: LD_INT 1
12063: DEC
12064: ST_TO_ADDR
12065: LD_OWVAR 67
12069: PUSH
12070: FOR_TO
12071: IFFALSE 12154
// begin uc_side = 3 ;
12073: LD_ADDR_OWVAR 20
12077: PUSH
12078: LD_INT 3
12080: ST_TO_ADDR
// uc_nation = 3 ;
12081: LD_ADDR_OWVAR 21
12085: PUSH
12086: LD_INT 3
12088: ST_TO_ADDR
// hc_gallery =  ;
12089: LD_ADDR_OWVAR 33
12093: PUSH
12094: LD_STRING 
12096: ST_TO_ADDR
// hc_name =  ;
12097: LD_ADDR_OWVAR 26
12101: PUSH
12102: LD_STRING 
12104: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12105: LD_INT 0
12107: PPUSH
12108: LD_INT 3
12110: PPUSH
12111: LD_EXP 13
12115: PPUSH
12116: LD_EXP 14
12120: PPUSH
12121: CALL_OW 12
12125: PPUSH
12126: CALL_OW 380
// un = CreateHuman ;
12130: LD_ADDR_VAR 0 3
12134: PUSH
12135: CALL_OW 44
12139: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12140: LD_VAR 0 3
12144: PPUSH
12145: LD_INT 10
12147: PPUSH
12148: CALL_OW 52
// end ;
12152: GO 12070
12154: POP
12155: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , rand ( 1 , 2 ) , rand ( 1 , 2 ) ] [ Difficulty ] ) ;
12156: LD_INT 3
12158: PPUSH
12159: LD_INT 3
12161: PPUSH
12162: LD_INT 33
12164: PPUSH
12165: LD_EXP 13
12169: PPUSH
12170: LD_EXP 14
12174: PPUSH
12175: CALL_OW 12
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 1
12185: PUSH
12186: LD_INT 1
12188: PPUSH
12189: LD_INT 2
12191: PPUSH
12192: CALL_OW 12
12196: PUSH
12197: LD_INT 1
12199: PPUSH
12200: LD_INT 2
12202: PPUSH
12203: CALL_OW 12
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: LIST
12212: PUSH
12213: LD_OWVAR 67
12217: ARRAY
12218: PPUSH
12219: CALL 8612 0 6
// for i in UnitsInside ( arm2 ) do
12223: LD_ADDR_VAR 0 2
12227: PUSH
12228: LD_INT 33
12230: PPUSH
12231: CALL_OW 313
12235: PUSH
12236: FOR_IN
12237: IFFALSE 12257
// southBaseDefenders = southBaseDefenders ^ i ;
12239: LD_ADDR_EXP 25
12243: PUSH
12244: LD_EXP 25
12248: PUSH
12249: LD_VAR 0 2
12253: ADD
12254: ST_TO_ADDR
12255: GO 12236
12257: POP
12258: POP
// end ;
12259: LD_VAR 0 1
12263: RET
// export function PrepareNorthBase ; var i , un ; begin
12264: LD_INT 0
12266: PPUSH
12267: PPUSH
12268: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) ] [ Difficulty ] do
12269: LD_ADDR_VAR 0 2
12273: PUSH
12274: DOUBLE
12275: LD_INT 1
12277: DEC
12278: ST_TO_ADDR
12279: LD_INT 1
12281: PPUSH
12282: LD_INT 2
12284: PPUSH
12285: CALL_OW 12
12289: PUSH
12290: LD_INT 2
12292: PPUSH
12293: LD_INT 3
12295: PPUSH
12296: CALL_OW 12
12300: PUSH
12301: LD_INT 3
12303: PPUSH
12304: LD_INT 4
12306: PPUSH
12307: CALL_OW 12
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: LD_OWVAR 67
12321: ARRAY
12322: PUSH
12323: FOR_TO
12324: IFFALSE 12410
// begin uc_side = 3 ;
12326: LD_ADDR_OWVAR 20
12330: PUSH
12331: LD_INT 3
12333: ST_TO_ADDR
// uc_nation = 3 ;
12334: LD_ADDR_OWVAR 21
12338: PUSH
12339: LD_INT 3
12341: ST_TO_ADDR
// hc_gallery =  ;
12342: LD_ADDR_OWVAR 33
12346: PUSH
12347: LD_STRING 
12349: ST_TO_ADDR
// hc_name =  ;
12350: LD_ADDR_OWVAR 26
12354: PUSH
12355: LD_STRING 
12357: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12358: LD_INT 0
12360: PPUSH
12361: LD_INT 1
12363: PPUSH
12364: LD_EXP 13
12368: PPUSH
12369: LD_EXP 14
12373: PPUSH
12374: CALL_OW 12
12378: PPUSH
12379: CALL_OW 380
// un = CreateHuman ;
12383: LD_ADDR_VAR 0 3
12387: PUSH
12388: CALL_OW 44
12392: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12393: LD_VAR 0 3
12397: PPUSH
12398: LD_INT 14
12400: PPUSH
12401: LD_INT 0
12403: PPUSH
12404: CALL_OW 49
// end ;
12408: GO 12323
12410: POP
12411: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) ] [ Difficulty ] ) ;
12412: LD_INT 3
12414: PPUSH
12415: LD_INT 3
12417: PPUSH
12418: LD_INT 2
12420: PPUSH
12421: LD_EXP 13
12425: PPUSH
12426: LD_EXP 14
12430: PPUSH
12431: CALL_OW 12
12435: PPUSH
12436: LD_INT 1
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: LD_INT 2
12444: PPUSH
12445: CALL_OW 12
12449: PUSH
12450: LD_INT 1
12452: PPUSH
12453: LD_INT 3
12455: PPUSH
12456: CALL_OW 12
12460: PUSH
12461: LD_INT 1
12463: PPUSH
12464: LD_INT 3
12466: PPUSH
12467: CALL_OW 12
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: LIST
12476: PUSH
12477: LD_OWVAR 67
12481: ARRAY
12482: PPUSH
12483: CALL 8612 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
12487: LD_INT 3
12489: PPUSH
12490: LD_INT 3
12492: PPUSH
12493: LD_INT 23
12495: PPUSH
12496: LD_EXP 13
12500: PPUSH
12501: LD_EXP 14
12505: PPUSH
12506: CALL_OW 12
12510: PPUSH
12511: LD_INT 4
12513: PPUSH
12514: LD_INT 0
12516: PUSH
12517: LD_INT 1
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: PUSH
12528: LD_OWVAR 67
12532: ARRAY
12533: PPUSH
12534: CALL 8612 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
12538: LD_INT 3
12540: PPUSH
12541: LD_INT 3
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: LD_EXP 13
12551: PPUSH
12552: LD_EXP 14
12556: PPUSH
12557: CALL_OW 12
12561: PPUSH
12562: LD_INT 2
12564: PPUSH
12565: LD_INT 1
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 2
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: PUSH
12579: LD_OWVAR 67
12583: ARRAY
12584: PPUSH
12585: CALL 8612 0 6
// for i in UnitsInside ( arm1 ) do
12589: LD_ADDR_VAR 0 2
12593: PUSH
12594: LD_INT 2
12596: PPUSH
12597: CALL_OW 313
12601: PUSH
12602: FOR_IN
12603: IFFALSE 12623
// northBaseDefenders = northBaseDefenders ^ i ;
12605: LD_ADDR_EXP 24
12609: PUSH
12610: LD_EXP 24
12614: PUSH
12615: LD_VAR 0 2
12619: ADD
12620: ST_TO_ADDR
12621: GO 12602
12623: POP
12624: POP
// end ;
12625: LD_VAR 0 1
12629: RET
// export function PrepareOtherRussians ; var i , un ; begin
12630: LD_INT 0
12632: PPUSH
12633: PPUSH
12634: PPUSH
// for i = 1 to 2 do
12635: LD_ADDR_VAR 0 2
12639: PUSH
12640: DOUBLE
12641: LD_INT 1
12643: DEC
12644: ST_TO_ADDR
12645: LD_INT 2
12647: PUSH
12648: FOR_TO
12649: IFFALSE 12750
// begin uc_side = 3 ;
12651: LD_ADDR_OWVAR 20
12655: PUSH
12656: LD_INT 3
12658: ST_TO_ADDR
// uc_nation = 3 ;
12659: LD_ADDR_OWVAR 21
12663: PUSH
12664: LD_INT 3
12666: ST_TO_ADDR
// hc_gallery =  ;
12667: LD_ADDR_OWVAR 33
12671: PUSH
12672: LD_STRING 
12674: ST_TO_ADDR
// hc_name =  ;
12675: LD_ADDR_OWVAR 26
12679: PUSH
12680: LD_STRING 
12682: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12683: LD_INT 0
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: LD_EXP 13
12693: PPUSH
12694: LD_EXP 14
12698: PPUSH
12699: CALL_OW 12
12703: PPUSH
12704: CALL_OW 380
// un = CreateHuman ;
12708: LD_ADDR_VAR 0 3
12712: PUSH
12713: CALL_OW 44
12717: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12718: LD_VAR 0 3
12722: PPUSH
12723: LD_INT 9
12725: PPUSH
12726: LD_INT 0
12728: PPUSH
12729: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12733: LD_VAR 0 3
12737: PPUSH
12738: LD_INT 80
12740: PPUSH
12741: LD_INT 73
12743: PPUSH
12744: CALL_OW 118
// end ;
12748: GO 12648
12750: POP
12751: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12752: LD_ADDR_VAR 0 2
12756: PUSH
12757: LD_INT 22
12759: PUSH
12760: LD_INT 3
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 30
12769: PUSH
12770: LD_INT 31
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PPUSH
12781: CALL_OW 69
12785: PUSH
12786: FOR_IN
12787: IFFALSE 12815
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12789: LD_EXP 13
12793: PPUSH
12794: LD_EXP 14
12798: PPUSH
12799: CALL_OW 12
12803: PPUSH
12804: LD_VAR 0 2
12808: PPUSH
12809: CALL 8722 0 2
12813: GO 12786
12815: POP
12816: POP
// end ;
12817: LD_VAR 0 1
12821: RET
// export function PrepareCargoBays ; begin
12822: LD_INT 0
12824: PPUSH
// uc_side = 3 ;
12825: LD_ADDR_OWVAR 20
12829: PUSH
12830: LD_INT 3
12832: ST_TO_ADDR
// uc_nation = 3 ;
12833: LD_ADDR_OWVAR 21
12837: PUSH
12838: LD_INT 3
12840: ST_TO_ADDR
// vc_engine = 1 ;
12841: LD_ADDR_OWVAR 39
12845: PUSH
12846: LD_INT 1
12848: ST_TO_ADDR
// vc_control = 1 ;
12849: LD_ADDR_OWVAR 38
12853: PUSH
12854: LD_INT 1
12856: ST_TO_ADDR
// vc_weapon = 51 ;
12857: LD_ADDR_OWVAR 40
12861: PUSH
12862: LD_INT 51
12864: ST_TO_ADDR
// vc_chassis = 22 ;
12865: LD_ADDR_OWVAR 37
12869: PUSH
12870: LD_INT 22
12872: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12873: LD_ADDR_EXP 15
12877: PUSH
12878: CALL_OW 45
12882: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12883: LD_ADDR_EXP 16
12887: PUSH
12888: CALL_OW 45
12892: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12893: LD_EXP 15
12897: PPUSH
12898: LD_INT 13
12900: PPUSH
12901: LD_INT 0
12903: PPUSH
12904: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12908: LD_EXP 16
12912: PPUSH
12913: LD_INT 13
12915: PPUSH
12916: LD_INT 0
12918: PPUSH
12919: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12923: LD_EXP 15
12927: PPUSH
12928: LD_INT 2
12930: PPUSH
12931: LD_INT 70
12933: PUSH
12934: LD_INT 50
12936: PUSH
12937: LD_INT 30
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: PUSH
12945: LD_OWVAR 67
12949: ARRAY
12950: PPUSH
12951: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 ] [ Difficulty ] ) ;
12955: LD_EXP 16
12959: PPUSH
12960: LD_INT 2
12962: PPUSH
12963: LD_INT 70
12965: PUSH
12966: LD_INT 50
12968: PUSH
12969: LD_INT 30
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: PUSH
12977: LD_OWVAR 67
12981: ARRAY
12982: PPUSH
12983: CALL_OW 291
// hc_gallery =  ;
12987: LD_ADDR_OWVAR 33
12991: PUSH
12992: LD_STRING 
12994: ST_TO_ADDR
// hc_name =  ;
12995: LD_ADDR_OWVAR 26
12999: PUSH
13000: LD_STRING 
13002: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13003: LD_INT 1
13005: PPUSH
13006: LD_INT 3
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: LD_INT 2
13014: PPUSH
13015: CALL_OW 12
13019: PPUSH
13020: CALL_OW 380
// driver1 = CreateHuman ;
13024: LD_ADDR_EXP 17
13028: PUSH
13029: CALL_OW 44
13033: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13034: LD_EXP 17
13038: PPUSH
13039: LD_EXP 15
13043: PPUSH
13044: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13048: LD_ADDR_OWVAR 26
13052: PUSH
13053: LD_STRING Nikolai Andreyev
13055: ST_TO_ADDR
// driver2 = CreateHuman ;
13056: LD_ADDR_EXP 18
13060: PUSH
13061: CALL_OW 44
13065: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13066: LD_EXP 18
13070: PPUSH
13071: LD_EXP 16
13075: PPUSH
13076: CALL_OW 52
// end ;
13080: LD_VAR 0 1
13084: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , target1 , target2 ; begin
13085: LD_INT 0
13087: PPUSH
13088: PPUSH
13089: PPUSH
13090: PPUSH
13091: PPUSH
13092: PPUSH
13093: PPUSH
// uc_side = 3 ;
13094: LD_ADDR_OWVAR 20
13098: PUSH
13099: LD_INT 3
13101: ST_TO_ADDR
// uc_nation = 3 ;
13102: LD_ADDR_OWVAR 21
13106: PUSH
13107: LD_INT 3
13109: ST_TO_ADDR
// for i := 1 to count + rand ( 1 , 3 ) do
13110: LD_ADDR_VAR 0 4
13114: PUSH
13115: DOUBLE
13116: LD_INT 1
13118: DEC
13119: ST_TO_ADDR
13120: LD_VAR 0 1
13124: PUSH
13125: LD_INT 1
13127: PPUSH
13128: LD_INT 3
13130: PPUSH
13131: CALL_OW 12
13135: PLUS
13136: PUSH
13137: FOR_TO
13138: IFFALSE 13315
// begin vc_engine = 1 ;
13140: LD_ADDR_OWVAR 39
13144: PUSH
13145: LD_INT 1
13147: ST_TO_ADDR
// vc_control = 1 ;
13148: LD_ADDR_OWVAR 38
13152: PUSH
13153: LD_INT 1
13155: ST_TO_ADDR
// vc_weapon = 42 ;
13156: LD_ADDR_OWVAR 40
13160: PUSH
13161: LD_INT 42
13163: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
13164: LD_ADDR_OWVAR 37
13168: PUSH
13169: LD_INT 21
13171: PUSH
13172: LD_INT 22
13174: PUSH
13175: LD_INT 22
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: LIST
13182: PUSH
13183: LD_OWVAR 67
13187: ARRAY
13188: ST_TO_ADDR
// veh = CreateVehicle ;
13189: LD_ADDR_VAR 0 5
13193: PUSH
13194: CALL_OW 45
13198: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13199: LD_VAR 0 5
13203: PPUSH
13204: LD_VAR 0 2
13208: PPUSH
13209: LD_INT 0
13211: PPUSH
13212: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13216: LD_ADDR_EXP 26
13220: PUSH
13221: LD_EXP 26
13225: PUSH
13226: LD_VAR 0 5
13230: ADD
13231: ST_TO_ADDR
// hc_gallery =  ;
13232: LD_ADDR_OWVAR 33
13236: PUSH
13237: LD_STRING 
13239: ST_TO_ADDR
// hc_name =  ;
13240: LD_ADDR_OWVAR 26
13244: PUSH
13245: LD_STRING 
13247: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13248: LD_INT 0
13250: PPUSH
13251: LD_INT 3
13253: PPUSH
13254: LD_EXP 13
13258: PPUSH
13259: LD_EXP 14
13263: PPUSH
13264: CALL_OW 12
13268: PPUSH
13269: CALL_OW 380
// un = CreateHuman ;
13273: LD_ADDR_VAR 0 6
13277: PUSH
13278: CALL_OW 44
13282: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13283: LD_VAR 0 6
13287: PPUSH
13288: LD_VAR 0 5
13292: PPUSH
13293: CALL_OW 52
// attackGroup = attackGroup ^ un ;
13297: LD_ADDR_EXP 26
13301: PUSH
13302: LD_EXP 26
13306: PUSH
13307: LD_VAR 0 6
13311: ADD
13312: ST_TO_ADDR
// end ;
13313: GO 13137
13315: POP
13316: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13317: LD_INT 0
13319: PPUSH
13320: LD_INT 2
13322: PPUSH
13323: LD_EXP 13
13327: PPUSH
13328: LD_EXP 14
13332: PPUSH
13333: CALL_OW 12
13337: PPUSH
13338: CALL_OW 380
// un = CreateHuman ;
13342: LD_ADDR_VAR 0 6
13346: PUSH
13347: CALL_OW 44
13351: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13352: LD_ADDR_VAR 0 4
13356: PUSH
13357: DOUBLE
13358: LD_INT 1
13360: DEC
13361: ST_TO_ADDR
13362: LD_VAR 0 1
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: LD_INT 2
13372: MUL
13373: PLUS
13374: PUSH
13375: FOR_TO
13376: IFFALSE 13464
// begin hc_gallery =  ;
13378: LD_ADDR_OWVAR 33
13382: PUSH
13383: LD_STRING 
13385: ST_TO_ADDR
// hc_name =  ;
13386: LD_ADDR_OWVAR 26
13390: PUSH
13391: LD_STRING 
13393: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13394: LD_INT 1
13396: PPUSH
13397: LD_INT 1
13399: PPUSH
13400: LD_EXP 13
13404: PPUSH
13405: LD_EXP 14
13409: PPUSH
13410: CALL_OW 12
13414: PPUSH
13415: CALL_OW 380
// un = CreateHuman ;
13419: LD_ADDR_VAR 0 6
13423: PUSH
13424: CALL_OW 44
13428: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
13429: LD_VAR 0 6
13433: PPUSH
13434: LD_VAR 0 2
13438: PPUSH
13439: LD_INT 0
13441: PPUSH
13442: CALL_OW 49
// attackGroup = attackGroup ^ un ;
13446: LD_ADDR_EXP 26
13450: PUSH
13451: LD_EXP 26
13455: PUSH
13456: LD_VAR 0 6
13460: ADD
13461: ST_TO_ADDR
// end ;
13462: GO 13375
13464: POP
13465: POP
// tmp = FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13466: LD_ADDR_VAR 0 7
13470: PUSH
13471: LD_INT 26
13473: PPUSH
13474: LD_INT 22
13476: PUSH
13477: LD_INT 3
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 21
13486: PUSH
13487: LD_INT 1
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 26
13496: PUSH
13497: LD_INT 1
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: PPUSH
13509: CALL_OW 70
13513: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13514: LD_VAR 0 7
13518: PUSH
13519: LD_INT 1
13521: ARRAY
13522: PPUSH
13523: LD_STRING D9-Rus3-1
13525: PPUSH
13526: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13530: LD_VAR 0 7
13534: PUSH
13535: LD_INT 2
13537: ARRAY
13538: PPUSH
13539: LD_STRING D9-Russ-1
13541: PPUSH
13542: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
13546: LD_INT 35
13548: PPUSH
13549: CALL_OW 67
// for i in FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] ] ) do
13553: LD_ADDR_VAR 0 4
13557: PUSH
13558: LD_INT 26
13560: PPUSH
13561: LD_INT 22
13563: PUSH
13564: LD_INT 3
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: PPUSH
13574: CALL_OW 70
13578: PUSH
13579: FOR_IN
13580: IFFALSE 13752
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
13582: LD_ADDR_VAR 0 8
13586: PUSH
13587: LD_INT 22
13589: PUSH
13590: LD_INT 1
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PPUSH
13597: CALL_OW 69
13601: PPUSH
13602: LD_VAR 0 4
13606: PPUSH
13607: CALL_OW 74
13611: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13612: LD_ADDR_VAR 0 9
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_INT 1
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 2
13629: PUSH
13630: LD_INT 59
13632: PUSH
13633: EMPTY
13634: LIST
13635: PUSH
13636: LD_INT 21
13638: PUSH
13639: LD_INT 1
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 21
13648: PUSH
13649: LD_INT 2
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: PPUSH
13669: CALL_OW 69
13673: PPUSH
13674: LD_VAR 0 4
13678: PPUSH
13679: CALL_OW 74
13683: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13684: LD_VAR 0 4
13688: PPUSH
13689: LD_VAR 0 8
13693: PPUSH
13694: CALL_OW 296
13698: PUSH
13699: LD_INT 8
13701: PLUS
13702: PUSH
13703: LD_VAR 0 4
13707: PPUSH
13708: LD_VAR 0 9
13712: PPUSH
13713: CALL_OW 296
13717: LESS
13718: IFFALSE 13736
// begin ComAttackUnit ( i , target1 ) ;
13720: LD_VAR 0 4
13724: PPUSH
13725: LD_VAR 0 8
13729: PPUSH
13730: CALL_OW 115
// end else
13734: GO 13750
// begin ComAttackUnit ( i , target2 ) ;
13736: LD_VAR 0 4
13740: PPUSH
13741: LD_VAR 0 9
13745: PPUSH
13746: CALL_OW 115
// end ; end ;
13750: GO 13579
13752: POP
13753: POP
// until FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ) = 0 ;
13754: LD_INT 26
13756: PPUSH
13757: LD_INT 22
13759: PUSH
13760: LD_INT 3
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 2
13769: PUSH
13770: LD_INT 21
13772: PUSH
13773: LD_INT 1
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 21
13782: PUSH
13783: LD_INT 2
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 59
13792: PUSH
13793: EMPTY
13794: LIST
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 70
13810: PUSH
13811: LD_INT 0
13813: EQUAL
13814: IFFALSE 13546
// end ; end_of_file
13816: LD_VAR 0 3
13820: RET
// every 0 0$1 do
13821: GO 13823
13823: DISABLE
// begin enable ;
13824: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
13825: LD_INT 3
13827: PPUSH
13828: LD_INT 1
13830: PPUSH
13831: LD_INT 22
13833: PPUSH
13834: CALL 8858 0 3
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
13838: LD_INT 3
13840: PPUSH
13841: LD_INT 20
13843: PPUSH
13844: LD_INT 22
13846: PPUSH
13847: LD_INT 23
13849: PPUSH
13850: CALL 9104 0 4
// RepairVehicle ( 3 , SouthBaseRepairArea , SouthBase ) ;
13854: LD_INT 3
13856: PPUSH
13857: LD_INT 21
13859: PPUSH
13860: LD_INT 23
13862: PPUSH
13863: CALL 9381 0 3
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 , 3 ) ;
13867: LD_INT 22
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: LD_EXP 24
13877: PPUSH
13878: LD_INT 2
13880: PPUSH
13881: LD_INT 3
13883: PPUSH
13884: CALL 9853 0 5
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 , 1 ) ;
13888: LD_INT 23
13890: PPUSH
13891: LD_INT 1
13893: PPUSH
13894: LD_EXP 25
13898: PPUSH
13899: LD_INT 33
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: CALL 9853 0 5
// end ; end_of_file
13909: END
// on UnitDestroyed ( unit ) do begin if GetBType ( unit ) = b_depot then
13910: LD_VAR 0 1
13914: PPUSH
13915: CALL_OW 266
13919: PUSH
13920: LD_INT 0
13922: EQUAL
13923: IFFALSE 13932
// YouLost ( DepotDestroyed ) ;
13925: LD_STRING DepotDestroyed
13927: PPUSH
13928: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13932: LD_VAR 0 1
13936: PPUSH
13937: CALL_OW 255
13941: PUSH
13942: LD_INT 1
13944: EQUAL
13945: PUSH
13946: LD_VAR 0 1
13950: PPUSH
13951: CALL_OW 247
13955: PUSH
13956: LD_INT 1
13958: EQUAL
13959: AND
13960: IFFALSE 13976
// deadsCounter = deadsCounter + 1 ;
13962: LD_ADDR_EXP 31
13966: PUSH
13967: LD_EXP 31
13971: PUSH
13972: LD_INT 1
13974: PLUS
13975: ST_TO_ADDR
// end ;
13976: PPOPN 1
13978: END
// on Command ( comandid ) do var i , j , tmp ;
13979: LD_INT 0
13981: PPUSH
13982: PPUSH
13983: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
13984: LD_ADDR_VAR 0 2
13988: PUSH
13989: LD_INT 22
13991: PUSH
13992: LD_INT 1
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 21
14001: PUSH
14002: LD_INT 2
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PPUSH
14013: CALL_OW 69
14017: PUSH
14018: FOR_IN
14019: IFFALSE 14144
// begin if GetTaskList ( i ) > 0 then
14021: LD_VAR 0 2
14025: PPUSH
14026: CALL_OW 437
14030: PUSH
14031: LD_INT 0
14033: GREATER
14034: IFFALSE 14142
// begin for j = 1 to GetTaskList ( i ) do
14036: LD_ADDR_VAR 0 3
14040: PUSH
14041: DOUBLE
14042: LD_INT 1
14044: DEC
14045: ST_TO_ADDR
14046: LD_VAR 0 2
14050: PPUSH
14051: CALL_OW 437
14055: PUSH
14056: FOR_TO
14057: IFFALSE 14140
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14059: LD_ADDR_VAR 0 4
14063: PUSH
14064: LD_VAR 0 2
14068: PPUSH
14069: CALL_OW 437
14073: PUSH
14074: LD_VAR 0 3
14078: ARRAY
14079: PUSH
14080: LD_INT 4
14082: ARRAY
14083: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14084: LD_VAR 0 4
14088: PPUSH
14089: CALL_OW 255
14093: PUSH
14094: LD_INT 3
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 4
14102: PPUSH
14103: CALL_OW 247
14107: PUSH
14108: LD_INT 2
14110: EQUAL
14111: AND
14112: PUSH
14113: LD_VAR 0 4
14117: PPUSH
14118: CALL_OW 264
14122: PUSH
14123: LD_INT 51
14125: EQUAL
14126: AND
14127: IFFALSE 14138
// ComStop ( i ) ;
14129: LD_VAR 0 2
14133: PPUSH
14134: CALL_OW 141
// end ;
14138: GO 14056
14140: POP
14141: POP
// end ; end ;
14142: GO 14018
14144: POP
14145: POP
// end ;
14146: PPOPN 4
14148: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14149: LD_VAR 0 2
14153: PUSH
14154: LD_EXP 8
14158: EQUAL
14159: PUSH
14160: LD_EXP 21
14164: PUSH
14165: LD_INT 4
14167: NONEQUAL
14168: AND
14169: IFFALSE 14321
// begin if IsOk ( Mikhail ) then
14171: LD_EXP 8
14175: PPUSH
14176: CALL_OW 302
14180: IFFALSE 14188
// AskMikhail else
14182: CALL 7143 0 0
14186: GO 14321
// if IsOk ( llab1 ) then
14188: LD_INT 23
14190: PPUSH
14191: CALL_OW 302
14195: IFFALSE 14284
// begin InGameOn ;
14197: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14201: LD_EXP 8
14205: PPUSH
14206: LD_INT 6
14208: PPUSH
14209: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14213: LD_INT 23
14215: PPUSH
14216: LD_INT 6
14218: PPUSH
14219: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14223: LD_EXP 8
14227: PPUSH
14228: LD_INT 23
14230: PPUSH
14231: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14235: LD_INT 35
14237: PPUSH
14238: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14242: LD_EXP 8
14246: PPUSH
14247: CALL_OW 310
14251: PUSH
14252: LD_INT 23
14254: EQUAL
14255: PUSH
14256: LD_EXP 8
14260: PPUSH
14261: CALL_OW 301
14265: OR
14266: IFFALSE 14235
// SetSide ( llab1 , 1 ) ;
14268: LD_INT 23
14270: PPUSH
14271: LD_INT 1
14273: PPUSH
14274: CALL_OW 235
// InGameOff ;
14278: CALL_OW 9
// end else
14282: GO 14321
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14284: LD_INT 3
14286: PPUSH
14287: LD_INT 6
14289: PPUSH
14290: LD_INT 2
14292: PPUSH
14293: LD_INT 1
14295: PPUSH
14296: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14300: LD_EXP 8
14304: PPUSH
14305: LD_INT 6
14307: PPUSH
14308: CALL_OW 235
// ComHold ( Mikhail ) ;
14312: LD_EXP 8
14316: PPUSH
14317: CALL_OW 140
// end ; end ; end ;
14321: PPOPN 2
14323: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14324: LD_EXP 8
14328: PPUSH
14329: CALL_OW 257
14333: PUSH
14334: LD_INT 3
14336: NONEQUAL
14337: IFFALSE 14355
14339: GO 14341
14341: DISABLE
// begin enable ;
14342: ENABLE
// SetClass ( Mikhail , 3 ) ;
14343: LD_EXP 8
14347: PPUSH
14348: LD_INT 3
14350: PPUSH
14351: CALL_OW 336
// end ; end_of_file
14355: END
// every 0 0$1 trigger IsDead ( JMM ) do
14356: LD_EXP 1
14360: PPUSH
14361: CALL_OW 301
14365: IFFALSE 14377
14367: GO 14369
14369: DISABLE
// YouLost ( JMM ) ;
14370: LD_STRING JMM
14372: PPUSH
14373: CALL_OW 104
14377: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14378: LD_INT 22
14380: PUSH
14381: LD_INT 1
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 21
14390: PUSH
14391: LD_INT 1
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 25
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: LIST
14412: PPUSH
14413: CALL_OW 69
14417: PUSH
14418: LD_INT 0
14420: EQUAL
14421: PUSH
14422: LD_INT 22
14424: PUSH
14425: LD_INT 4
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 1
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 25
14444: PUSH
14445: LD_INT 2
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: LIST
14456: PPUSH
14457: CALL_OW 69
14461: PUSH
14462: LD_INT 0
14464: EQUAL
14465: AND
14466: PUSH
14467: LD_INT 1
14469: PPUSH
14470: CALL_OW 255
14474: PUSH
14475: LD_INT 3
14477: EQUAL
14478: AND
14479: PUSH
14480: LD_INT 10
14482: PPUSH
14483: CALL_OW 255
14487: PUSH
14488: LD_INT 3
14490: EQUAL
14491: AND
14492: IFFALSE 14504
14494: GO 14496
14496: DISABLE
// YouLost ( Engineer ) ;
14497: LD_STRING Engineer
14499: PPUSH
14500: CALL_OW 104
14504: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14505: LD_INT 1
14507: PPUSH
14508: CALL_OW 255
14512: PUSH
14513: LD_INT 3
14515: EQUAL
14516: PUSH
14517: LD_EXP 27
14521: PUSH
14522: LD_INT 1
14524: EQUAL
14525: AND
14526: IFFALSE 14538
14528: GO 14530
14530: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14531: LD_STRING DepotCaptured
14533: PPUSH
14534: CALL_OW 104
14538: END
// export function PrepareTigers ; var i , un ; begin
14539: LD_INT 0
14541: PPUSH
14542: PPUSH
14543: PPUSH
// for i = 1 to Difficulty do
14544: LD_ADDR_VAR 0 2
14548: PUSH
14549: DOUBLE
14550: LD_INT 1
14552: DEC
14553: ST_TO_ADDR
14554: LD_OWVAR 67
14558: PUSH
14559: FOR_TO
14560: IFFALSE 14695
// begin hc_sex = sex_male ;
14562: LD_ADDR_OWVAR 27
14566: PUSH
14567: LD_INT 1
14569: ST_TO_ADDR
// uc_side = 0 ;
14570: LD_ADDR_OWVAR 20
14574: PUSH
14575: LD_INT 0
14577: ST_TO_ADDR
// uc_nation = nation_nature ;
14578: LD_ADDR_OWVAR 21
14582: PUSH
14583: LD_INT 0
14585: ST_TO_ADDR
// hc_class = class_tiger ;
14586: LD_ADDR_OWVAR 28
14590: PUSH
14591: LD_INT 14
14593: ST_TO_ADDR
// hc_skills = [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14594: LD_ADDR_OWVAR 31
14598: PUSH
14599: LD_EXP 14
14603: PUSH
14604: LD_INT 0
14606: PUSH
14607: LD_INT 0
14609: PUSH
14610: LD_INT 0
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
14619: LD_ADDR_OWVAR 35
14623: PUSH
14624: LD_INT 30
14626: PPUSH
14627: LD_INT 40
14629: PPUSH
14630: CALL_OW 12
14634: PUSH
14635: LD_INT 40
14637: PPUSH
14638: LD_INT 50
14640: PPUSH
14641: CALL_OW 12
14645: PUSH
14646: LD_INT 50
14648: PPUSH
14649: LD_INT 60
14651: PPUSH
14652: CALL_OW 12
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: LIST
14661: PUSH
14662: LD_OWVAR 67
14666: ARRAY
14667: ST_TO_ADDR
// un = CreateHuman ;
14668: LD_ADDR_VAR 0 3
14672: PUSH
14673: CALL_OW 44
14677: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 27
14685: PPUSH
14686: LD_INT 0
14688: PPUSH
14689: CALL_OW 49
// end ;
14693: GO 14559
14695: POP
14696: POP
// end ; end_of_file
14697: LD_VAR 0 1
14701: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
14702: LD_INT 1
14704: PPUSH
14705: CALL_OW 255
14709: PUSH
14710: LD_INT 1
14712: EQUAL
14713: PUSH
14714: LD_INT 10
14716: PPUSH
14717: CALL_OW 255
14721: PUSH
14722: LD_INT 1
14724: EQUAL
14725: AND
14726: PUSH
14727: LD_EXP 20
14731: PUSH
14732: LD_INT 1
14734: EQUAL
14735: AND
14736: PUSH
14737: LD_INT 22
14739: PUSH
14740: LD_INT 3
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 21
14749: PUSH
14750: LD_INT 2
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 34
14759: PUSH
14760: LD_INT 51
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 3
14769: PUSH
14770: LD_INT 58
14772: PUSH
14773: EMPTY
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 69
14790: PUSH
14791: LD_INT 0
14793: EQUAL
14794: AND
14795: IFFALSE 14886
14797: GO 14799
14799: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 ] [ Difficulty ] ) ;
14800: LD_INT 9450
14802: PUSH
14803: LD_INT 8400
14805: PUSH
14806: LD_INT 6300
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: LIST
14813: PUSH
14814: LD_OWVAR 67
14818: ARRAY
14819: PPUSH
14820: CALL_OW 67
// if cargoEscape = 1 then
14824: LD_EXP 20
14828: PUSH
14829: LD_INT 1
14831: EQUAL
14832: IFFALSE 14886
// begin SayRadio ( Powell , D6-Pow-1 ) ;
14834: LD_EXP 9
14838: PPUSH
14839: LD_STRING D6-Pow-1
14841: PPUSH
14842: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
14846: LD_EXP 1
14850: PPUSH
14851: LD_STRING D6-JMM-1
14853: PPUSH
14854: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
14858: LD_EXP 9
14862: PPUSH
14863: LD_STRING D6-Pow-2
14865: PPUSH
14866: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
14870: LD_EXP 1
14874: PPUSH
14875: LD_STRING D6-JMM-2
14877: PPUSH
14878: CALL_OW 88
// FinishMission ;
14882: CALL 15094 0 0
// end ; end ;
14886: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 255
14894: PUSH
14895: LD_INT 1
14897: EQUAL
14898: PUSH
14899: LD_INT 10
14901: PPUSH
14902: CALL_OW 255
14906: PUSH
14907: LD_INT 1
14909: EQUAL
14910: AND
14911: PUSH
14912: LD_EXP 20
14916: PUSH
14917: LD_INT 1
14919: GREATER
14920: AND
14921: IFFALSE 14988
14923: GO 14925
14925: DISABLE
14926: LD_INT 0
14928: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 ] [ Difficulty ] ) ;
14929: LD_INT 11550
14931: PUSH
14932: LD_INT 10500
14934: PUSH
14935: LD_INT 9450
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: LD_OWVAR 67
14947: ARRAY
14948: PPUSH
14949: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 ] [ Difficulty ] , RussianAttack ) ;
14953: LD_INT 1
14955: PUSH
14956: LD_INT 2
14958: PUSH
14959: LD_INT 3
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: PUSH
14967: LD_OWVAR 67
14971: ARRAY
14972: PPUSH
14973: LD_INT 13
14975: PPUSH
14976: CALL 13085 0 2
// lastBattle = 1 ;
14980: LD_ADDR_EXP 27
14984: PUSH
14985: LD_INT 1
14987: ST_TO_ADDR
// end ;
14988: PPOPN 1
14990: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14991: LD_EXP 27
14995: PUSH
14996: LD_INT 1
14998: EQUAL
14999: PUSH
15000: LD_INT 26
15002: PPUSH
15003: LD_INT 22
15005: PUSH
15006: LD_INT 3
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 21
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 70
15031: PUSH
15032: LD_INT 0
15034: EQUAL
15035: AND
15036: IFFALSE 15093
15038: GO 15040
15040: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15041: LD_EXP 9
15045: PPUSH
15046: LD_STRING D6-Pow-1
15048: PPUSH
15049: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15053: LD_EXP 1
15057: PPUSH
15058: LD_STRING D6-JMM-1
15060: PPUSH
15061: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15065: LD_EXP 9
15069: PPUSH
15070: LD_STRING D6-Pow-2
15072: PPUSH
15073: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15077: LD_EXP 1
15081: PPUSH
15082: LD_STRING D6-JMM-2
15084: PPUSH
15085: CALL_OW 88
// FinishMission ;
15089: CALL 15094 0 0
// end ;
15093: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15094: LD_INT 0
15096: PPUSH
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
// if tick <= 18 18$00 then
15101: LD_OWVAR 1
15105: PUSH
15106: LD_INT 37800
15108: LESSEQUAL
15109: IFFALSE 15118
// SetAchievement ( ACH_ASPEED_2 ) ;
15111: LD_STRING ACH_ASPEED_2
15113: PPUSH
15114: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15118: LD_ADDR_VAR 0 2
15122: PUSH
15123: LD_INT 22
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 21
15135: PUSH
15136: LD_INT 2
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 24
15145: PUSH
15146: LD_INT 251
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: ST_TO_ADDR
// if tmp then
15163: LD_VAR 0 2
15167: IFFALSE 15181
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15169: LD_VAR 0 2
15173: PPUSH
15174: LD_STRING 02_tanks_1
15176: PPUSH
15177: CALL 10558 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15181: LD_EXP 21
15185: PUSH
15186: LD_INT 1
15188: EQUAL
15189: PUSH
15190: LD_EXP 8
15194: PPUSH
15195: CALL_OW 300
15199: AND
15200: IFFALSE 15214
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15202: LD_EXP 21
15206: PPUSH
15207: LD_STRING 02_mikhailStatus_1
15209: PPUSH
15210: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15214: LD_INT 1
15216: PPUSH
15217: CALL_OW 274
15221: PPUSH
15222: LD_INT 1
15224: PPUSH
15225: CALL_OW 275
15229: PPUSH
15230: LD_STRING 02_resources_4
15232: PPUSH
15233: CALL_OW 39
// m1 := false ;
15237: LD_ADDR_VAR 0 3
15241: PUSH
15242: LD_INT 0
15244: ST_TO_ADDR
// m2 := false ;
15245: LD_ADDR_VAR 0 4
15249: PUSH
15250: LD_INT 0
15252: ST_TO_ADDR
// m3 := false ;
15253: LD_ADDR_VAR 0 5
15257: PUSH
15258: LD_INT 0
15260: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15261: LD_INT 1
15263: PPUSH
15264: CALL_OW 274
15268: PPUSH
15269: LD_INT 1
15271: PPUSH
15272: CALL_OW 275
15276: PUSH
15277: LD_INT 200
15279: GREATEREQUAL
15280: IFFALSE 15302
// begin AddMedal ( Cans , 1 ) ;
15282: LD_STRING Cans
15284: PPUSH
15285: LD_INT 1
15287: PPUSH
15288: CALL_OW 101
// m1 := true ;
15292: LD_ADDR_VAR 0 3
15296: PUSH
15297: LD_INT 1
15299: ST_TO_ADDR
// end else
15300: GO 15313
// begin AddMedal ( Cans , - 1 ) ;
15302: LD_STRING Cans
15304: PPUSH
15305: LD_INT 1
15307: NEG
15308: PPUSH
15309: CALL_OW 101
// end ; if deadsCounter < 2 then
15313: LD_EXP 31
15317: PUSH
15318: LD_INT 2
15320: LESS
15321: IFFALSE 15343
// begin AddMedal ( Deaths , 1 ) ;
15323: LD_STRING Deaths
15325: PPUSH
15326: LD_INT 1
15328: PPUSH
15329: CALL_OW 101
// m2 := true ;
15333: LD_ADDR_VAR 0 4
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// end else
15341: GO 15354
// begin AddMedal ( Deaths , - 1 ) ;
15343: LD_STRING Deaths
15345: PPUSH
15346: LD_INT 1
15348: NEG
15349: PPUSH
15350: CALL_OW 101
// end ; if mikhailStatus = 0 then
15354: LD_EXP 21
15358: PUSH
15359: LD_INT 0
15361: EQUAL
15362: IFFALSE 15375
// AddMedal ( Prisoner , - 1 ) ;
15364: LD_STRING Prisoner
15366: PPUSH
15367: LD_INT 1
15369: NEG
15370: PPUSH
15371: CALL_OW 101
// if mikhailStatus = 1 then
15375: LD_EXP 21
15379: PUSH
15380: LD_INT 1
15382: EQUAL
15383: IFFALSE 15403
// begin AddMedal ( Prisoner , 1 ) ;
15385: LD_STRING Prisoner
15387: PPUSH
15388: LD_INT 1
15390: PPUSH
15391: CALL_OW 101
// m3 := true ;
15395: LD_ADDR_VAR 0 5
15399: PUSH
15400: LD_INT 1
15402: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15403: LD_EXP 21
15407: PUSH
15408: LD_INT 2
15410: EQUAL
15411: IFFALSE 15431
// begin AddMedal ( Prisoner , 2 ) ;
15413: LD_STRING Prisoner
15415: PPUSH
15416: LD_INT 2
15418: PPUSH
15419: CALL_OW 101
// m3 := true ;
15423: LD_ADDR_VAR 0 5
15427: PUSH
15428: LD_INT 1
15430: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15431: LD_EXP 21
15435: PUSH
15436: LD_INT 3
15438: EQUAL
15439: IFFALSE 15452
// AddMedal ( Prisoner , - 2 ) ;
15441: LD_STRING Prisoner
15443: PPUSH
15444: LD_INT 2
15446: NEG
15447: PPUSH
15448: CALL_OW 101
// if Difficulty = 3 and m1 and m2 and m3 then
15452: LD_OWVAR 67
15456: PUSH
15457: LD_INT 3
15459: EQUAL
15460: PUSH
15461: LD_VAR 0 3
15465: AND
15466: PUSH
15467: LD_VAR 0 4
15471: AND
15472: PUSH
15473: LD_VAR 0 5
15477: AND
15478: IFFALSE 15490
// SetAchievementEX ( ACH_AMER , 2 ) ;
15480: LD_STRING ACH_AMER
15482: PPUSH
15483: LD_INT 2
15485: PPUSH
15486: CALL_OW 564
// GiveMedals ( MAIN ) ;
15490: LD_STRING MAIN
15492: PPUSH
15493: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15497: LD_INT 22
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 23
15509: PUSH
15510: LD_INT 1
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 21
15519: PUSH
15520: LD_INT 1
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: PPUSH
15537: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15541: LD_EXP 1
15545: PPUSH
15546: LD_EXP 33
15550: PUSH
15551: LD_STRING JMM
15553: STR
15554: PPUSH
15555: CALL_OW 38
// if IsOK ( Bobby ) then
15559: LD_EXP 2
15563: PPUSH
15564: CALL_OW 302
15568: IFFALSE 15588
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15570: LD_EXP 2
15574: PPUSH
15575: LD_EXP 33
15579: PUSH
15580: LD_STRING Bobby
15582: STR
15583: PPUSH
15584: CALL_OW 38
// if IsOK ( Cyrus ) then
15588: LD_EXP 3
15592: PPUSH
15593: CALL_OW 302
15597: IFFALSE 15617
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15599: LD_EXP 3
15603: PPUSH
15604: LD_EXP 33
15608: PUSH
15609: LD_STRING Cyrus
15611: STR
15612: PPUSH
15613: CALL_OW 38
// if IsOK ( Lisa ) then
15617: LD_EXP 4
15621: PPUSH
15622: CALL_OW 302
15626: IFFALSE 15646
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15628: LD_EXP 4
15632: PPUSH
15633: LD_EXP 33
15637: PUSH
15638: LD_STRING Lisa
15640: STR
15641: PPUSH
15642: CALL_OW 38
// if IsOK ( Khatam ) then
15646: LD_EXP 5
15650: PPUSH
15651: CALL_OW 302
15655: IFFALSE 15675
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
15657: LD_EXP 5
15661: PPUSH
15662: LD_EXP 33
15666: PUSH
15667: LD_STRING Khatam
15669: STR
15670: PPUSH
15671: CALL_OW 38
// if IsOK ( Brian ) then
15675: LD_EXP 6
15679: PPUSH
15680: CALL_OW 302
15684: IFFALSE 15704
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
15686: LD_EXP 6
15690: PPUSH
15691: LD_EXP 33
15695: PUSH
15696: LD_STRING Brian
15698: STR
15699: PPUSH
15700: CALL_OW 38
// if IsOk ( Jerry ) then
15704: LD_EXP 7
15708: PPUSH
15709: CALL_OW 302
15713: IFFALSE 15733
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
15715: LD_EXP 7
15719: PPUSH
15720: LD_EXP 33
15724: PUSH
15725: LD_STRING Jerry
15727: STR
15728: PPUSH
15729: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
15733: LD_EXP 21
15737: PUSH
15738: LD_INT 1
15740: EQUAL
15741: PUSH
15742: LD_EXP 8
15746: PPUSH
15747: CALL_OW 255
15751: PUSH
15752: LD_INT 1
15754: EQUAL
15755: AND
15756: PUSH
15757: LD_EXP 8
15761: PPUSH
15762: CALL_OW 302
15766: AND
15767: IFFALSE 15787
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
15769: LD_EXP 8
15773: PPUSH
15774: LD_EXP 33
15778: PUSH
15779: LD_STRING Mikhail
15781: STR
15782: PPUSH
15783: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
15787: LD_INT 50
15789: PUSH
15790: EMPTY
15791: LIST
15792: PUSH
15793: LD_INT 22
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 21
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: LIST
15817: PPUSH
15818: CALL_OW 69
15822: PUSH
15823: LD_EXP 1
15827: PUSH
15828: LD_EXP 2
15832: PUSH
15833: LD_EXP 3
15837: PUSH
15838: LD_EXP 4
15842: PUSH
15843: LD_EXP 5
15847: PUSH
15848: LD_EXP 6
15852: PUSH
15853: LD_EXP 7
15857: PUSH
15858: LD_EXP 8
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: DIFF
15873: PPUSH
15874: LD_STRING 02_other_survivors
15876: PPUSH
15877: CALL_OW 38
// YouWin ;
15881: CALL_OW 103
// end ; end_of_file
15885: LD_VAR 0 1
15889: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
15890: LD_INT 0
15892: PPUSH
// ar_miner := 81 ;
15893: LD_ADDR_EXP 42
15897: PUSH
15898: LD_INT 81
15900: ST_TO_ADDR
// ar_crane := 88 ;
15901: LD_ADDR_EXP 41
15905: PUSH
15906: LD_INT 88
15908: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15909: LD_ADDR_EXP 36
15913: PUSH
15914: LD_INT 89
15916: ST_TO_ADDR
// us_hack := 99 ;
15917: LD_ADDR_EXP 37
15921: PUSH
15922: LD_INT 99
15924: ST_TO_ADDR
// us_artillery := 97 ;
15925: LD_ADDR_EXP 38
15929: PUSH
15930: LD_INT 97
15932: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15933: LD_ADDR_EXP 39
15937: PUSH
15938: LD_INT 91
15940: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15941: LD_ADDR_EXP 40
15945: PUSH
15946: LD_INT 92
15948: ST_TO_ADDR
// ru_radar := 98 ;
15949: LD_ADDR_EXP 35
15953: PUSH
15954: LD_INT 98
15956: ST_TO_ADDR
// tech_Artillery := 80 ;
15957: LD_ADDR_EXP 43
15961: PUSH
15962: LD_INT 80
15964: ST_TO_ADDR
// tech_RadMat := 81 ;
15965: LD_ADDR_EXP 44
15969: PUSH
15970: LD_INT 81
15972: ST_TO_ADDR
// tech_BasicTools := 82 ;
15973: LD_ADDR_EXP 45
15977: PUSH
15978: LD_INT 82
15980: ST_TO_ADDR
// tech_Cargo := 83 ;
15981: LD_ADDR_EXP 46
15985: PUSH
15986: LD_INT 83
15988: ST_TO_ADDR
// tech_Track := 84 ;
15989: LD_ADDR_EXP 47
15993: PUSH
15994: LD_INT 84
15996: ST_TO_ADDR
// tech_Crane := 85 ;
15997: LD_ADDR_EXP 48
16001: PUSH
16002: LD_INT 85
16004: ST_TO_ADDR
// tech_Bulldozer := 86 ;
16005: LD_ADDR_EXP 49
16009: PUSH
16010: LD_INT 86
16012: ST_TO_ADDR
// tech_Hovercraft := 87 ;
16013: LD_ADDR_EXP 50
16017: PUSH
16018: LD_INT 87
16020: ST_TO_ADDR
// class_mastodont := 31 ;
16021: LD_ADDR_EXP 51
16025: PUSH
16026: LD_INT 31
16028: ST_TO_ADDR
// class_horse := 21 ;
16029: LD_ADDR_EXP 52
16033: PUSH
16034: LD_INT 21
16036: ST_TO_ADDR
// end ;
16037: LD_VAR 0 1
16041: RET
// every 1 do
16042: GO 16044
16044: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
16045: CALL 15890 0 0
16049: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16050: LD_INT 0
16052: PPUSH
// if p2 = 100 then
16053: LD_VAR 0 2
16057: PUSH
16058: LD_INT 100
16060: EQUAL
16061: IFFALSE 17010
// begin if not StreamModeActive then
16063: LD_EXP 53
16067: NOT
16068: IFFALSE 16078
// StreamModeActive := true ;
16070: LD_ADDR_EXP 53
16074: PUSH
16075: LD_INT 1
16077: ST_TO_ADDR
// if p3 = 0 then
16078: LD_VAR 0 3
16082: PUSH
16083: LD_INT 0
16085: EQUAL
16086: IFFALSE 16092
// InitStreamMode ;
16088: CALL 17170 0 0
// if p3 = 1 then
16092: LD_VAR 0 3
16096: PUSH
16097: LD_INT 1
16099: EQUAL
16100: IFFALSE 16110
// sRocket := true ;
16102: LD_ADDR_EXP 58
16106: PUSH
16107: LD_INT 1
16109: ST_TO_ADDR
// if p3 = 2 then
16110: LD_VAR 0 3
16114: PUSH
16115: LD_INT 2
16117: EQUAL
16118: IFFALSE 16128
// sSpeed := true ;
16120: LD_ADDR_EXP 57
16124: PUSH
16125: LD_INT 1
16127: ST_TO_ADDR
// if p3 = 3 then
16128: LD_VAR 0 3
16132: PUSH
16133: LD_INT 3
16135: EQUAL
16136: IFFALSE 16146
// sEngine := true ;
16138: LD_ADDR_EXP 59
16142: PUSH
16143: LD_INT 1
16145: ST_TO_ADDR
// if p3 = 4 then
16146: LD_VAR 0 3
16150: PUSH
16151: LD_INT 4
16153: EQUAL
16154: IFFALSE 16164
// sSpec := true ;
16156: LD_ADDR_EXP 56
16160: PUSH
16161: LD_INT 1
16163: ST_TO_ADDR
// if p3 = 5 then
16164: LD_VAR 0 3
16168: PUSH
16169: LD_INT 5
16171: EQUAL
16172: IFFALSE 16182
// sLevel := true ;
16174: LD_ADDR_EXP 60
16178: PUSH
16179: LD_INT 1
16181: ST_TO_ADDR
// if p3 = 6 then
16182: LD_VAR 0 3
16186: PUSH
16187: LD_INT 6
16189: EQUAL
16190: IFFALSE 16200
// sArmoury := true ;
16192: LD_ADDR_EXP 61
16196: PUSH
16197: LD_INT 1
16199: ST_TO_ADDR
// if p3 = 7 then
16200: LD_VAR 0 3
16204: PUSH
16205: LD_INT 7
16207: EQUAL
16208: IFFALSE 16218
// sRadar := true ;
16210: LD_ADDR_EXP 62
16214: PUSH
16215: LD_INT 1
16217: ST_TO_ADDR
// if p3 = 8 then
16218: LD_VAR 0 3
16222: PUSH
16223: LD_INT 8
16225: EQUAL
16226: IFFALSE 16236
// sBunker := true ;
16228: LD_ADDR_EXP 63
16232: PUSH
16233: LD_INT 1
16235: ST_TO_ADDR
// if p3 = 9 then
16236: LD_VAR 0 3
16240: PUSH
16241: LD_INT 9
16243: EQUAL
16244: IFFALSE 16254
// sHack := true ;
16246: LD_ADDR_EXP 64
16250: PUSH
16251: LD_INT 1
16253: ST_TO_ADDR
// if p3 = 10 then
16254: LD_VAR 0 3
16258: PUSH
16259: LD_INT 10
16261: EQUAL
16262: IFFALSE 16272
// sFire := true ;
16264: LD_ADDR_EXP 65
16268: PUSH
16269: LD_INT 1
16271: ST_TO_ADDR
// if p3 = 11 then
16272: LD_VAR 0 3
16276: PUSH
16277: LD_INT 11
16279: EQUAL
16280: IFFALSE 16290
// sRefresh := true ;
16282: LD_ADDR_EXP 66
16286: PUSH
16287: LD_INT 1
16289: ST_TO_ADDR
// if p3 = 12 then
16290: LD_VAR 0 3
16294: PUSH
16295: LD_INT 12
16297: EQUAL
16298: IFFALSE 16308
// sExp := true ;
16300: LD_ADDR_EXP 67
16304: PUSH
16305: LD_INT 1
16307: ST_TO_ADDR
// if p3 = 13 then
16308: LD_VAR 0 3
16312: PUSH
16313: LD_INT 13
16315: EQUAL
16316: IFFALSE 16326
// sDepot := true ;
16318: LD_ADDR_EXP 68
16322: PUSH
16323: LD_INT 1
16325: ST_TO_ADDR
// if p3 = 14 then
16326: LD_VAR 0 3
16330: PUSH
16331: LD_INT 14
16333: EQUAL
16334: IFFALSE 16344
// sFlag := true ;
16336: LD_ADDR_EXP 69
16340: PUSH
16341: LD_INT 1
16343: ST_TO_ADDR
// if p3 = 15 then
16344: LD_VAR 0 3
16348: PUSH
16349: LD_INT 15
16351: EQUAL
16352: IFFALSE 16362
// sKamikadze := true ;
16354: LD_ADDR_EXP 77
16358: PUSH
16359: LD_INT 1
16361: ST_TO_ADDR
// if p3 = 16 then
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 16
16369: EQUAL
16370: IFFALSE 16380
// sTroll := true ;
16372: LD_ADDR_EXP 78
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// if p3 = 17 then
16380: LD_VAR 0 3
16384: PUSH
16385: LD_INT 17
16387: EQUAL
16388: IFFALSE 16398
// sSlow := true ;
16390: LD_ADDR_EXP 79
16394: PUSH
16395: LD_INT 1
16397: ST_TO_ADDR
// if p3 = 18 then
16398: LD_VAR 0 3
16402: PUSH
16403: LD_INT 18
16405: EQUAL
16406: IFFALSE 16416
// sLack := true ;
16408: LD_ADDR_EXP 80
16412: PUSH
16413: LD_INT 1
16415: ST_TO_ADDR
// if p3 = 19 then
16416: LD_VAR 0 3
16420: PUSH
16421: LD_INT 19
16423: EQUAL
16424: IFFALSE 16434
// sTank := true ;
16426: LD_ADDR_EXP 82
16430: PUSH
16431: LD_INT 1
16433: ST_TO_ADDR
// if p3 = 20 then
16434: LD_VAR 0 3
16438: PUSH
16439: LD_INT 20
16441: EQUAL
16442: IFFALSE 16452
// sRemote := true ;
16444: LD_ADDR_EXP 83
16448: PUSH
16449: LD_INT 1
16451: ST_TO_ADDR
// if p3 = 21 then
16452: LD_VAR 0 3
16456: PUSH
16457: LD_INT 21
16459: EQUAL
16460: IFFALSE 16470
// sPowell := true ;
16462: LD_ADDR_EXP 84
16466: PUSH
16467: LD_INT 1
16469: ST_TO_ADDR
// if p3 = 22 then
16470: LD_VAR 0 3
16474: PUSH
16475: LD_INT 22
16477: EQUAL
16478: IFFALSE 16488
// sTeleport := true ;
16480: LD_ADDR_EXP 87
16484: PUSH
16485: LD_INT 1
16487: ST_TO_ADDR
// if p3 = 23 then
16488: LD_VAR 0 3
16492: PUSH
16493: LD_INT 23
16495: EQUAL
16496: IFFALSE 16506
// sOilTower := true ;
16498: LD_ADDR_EXP 89
16502: PUSH
16503: LD_INT 1
16505: ST_TO_ADDR
// if p3 = 24 then
16506: LD_VAR 0 3
16510: PUSH
16511: LD_INT 24
16513: EQUAL
16514: IFFALSE 16524
// sShovel := true ;
16516: LD_ADDR_EXP 90
16520: PUSH
16521: LD_INT 1
16523: ST_TO_ADDR
// if p3 = 25 then
16524: LD_VAR 0 3
16528: PUSH
16529: LD_INT 25
16531: EQUAL
16532: IFFALSE 16542
// sSheik := true ;
16534: LD_ADDR_EXP 91
16538: PUSH
16539: LD_INT 1
16541: ST_TO_ADDR
// if p3 = 26 then
16542: LD_VAR 0 3
16546: PUSH
16547: LD_INT 26
16549: EQUAL
16550: IFFALSE 16560
// sEarthquake := true ;
16552: LD_ADDR_EXP 93
16556: PUSH
16557: LD_INT 1
16559: ST_TO_ADDR
// if p3 = 27 then
16560: LD_VAR 0 3
16564: PUSH
16565: LD_INT 27
16567: EQUAL
16568: IFFALSE 16578
// sAI := true ;
16570: LD_ADDR_EXP 94
16574: PUSH
16575: LD_INT 1
16577: ST_TO_ADDR
// if p3 = 28 then
16578: LD_VAR 0 3
16582: PUSH
16583: LD_INT 28
16585: EQUAL
16586: IFFALSE 16596
// sCargo := true ;
16588: LD_ADDR_EXP 97
16592: PUSH
16593: LD_INT 1
16595: ST_TO_ADDR
// if p3 = 29 then
16596: LD_VAR 0 3
16600: PUSH
16601: LD_INT 29
16603: EQUAL
16604: IFFALSE 16614
// sDLaser := true ;
16606: LD_ADDR_EXP 98
16610: PUSH
16611: LD_INT 1
16613: ST_TO_ADDR
// if p3 = 30 then
16614: LD_VAR 0 3
16618: PUSH
16619: LD_INT 30
16621: EQUAL
16622: IFFALSE 16632
// sExchange := true ;
16624: LD_ADDR_EXP 99
16628: PUSH
16629: LD_INT 1
16631: ST_TO_ADDR
// if p3 = 31 then
16632: LD_VAR 0 3
16636: PUSH
16637: LD_INT 31
16639: EQUAL
16640: IFFALSE 16650
// sFac := true ;
16642: LD_ADDR_EXP 100
16646: PUSH
16647: LD_INT 1
16649: ST_TO_ADDR
// if p3 = 32 then
16650: LD_VAR 0 3
16654: PUSH
16655: LD_INT 32
16657: EQUAL
16658: IFFALSE 16668
// sPower := true ;
16660: LD_ADDR_EXP 101
16664: PUSH
16665: LD_INT 1
16667: ST_TO_ADDR
// if p3 = 33 then
16668: LD_VAR 0 3
16672: PUSH
16673: LD_INT 33
16675: EQUAL
16676: IFFALSE 16686
// sRandom := true ;
16678: LD_ADDR_EXP 102
16682: PUSH
16683: LD_INT 1
16685: ST_TO_ADDR
// if p3 = 34 then
16686: LD_VAR 0 3
16690: PUSH
16691: LD_INT 34
16693: EQUAL
16694: IFFALSE 16704
// sShield := true ;
16696: LD_ADDR_EXP 103
16700: PUSH
16701: LD_INT 1
16703: ST_TO_ADDR
// if p3 = 35 then
16704: LD_VAR 0 3
16708: PUSH
16709: LD_INT 35
16711: EQUAL
16712: IFFALSE 16722
// sTime := true ;
16714: LD_ADDR_EXP 104
16718: PUSH
16719: LD_INT 1
16721: ST_TO_ADDR
// if p3 = 36 then
16722: LD_VAR 0 3
16726: PUSH
16727: LD_INT 36
16729: EQUAL
16730: IFFALSE 16740
// sTools := true ;
16732: LD_ADDR_EXP 105
16736: PUSH
16737: LD_INT 1
16739: ST_TO_ADDR
// if p3 = 101 then
16740: LD_VAR 0 3
16744: PUSH
16745: LD_INT 101
16747: EQUAL
16748: IFFALSE 16758
// sSold := true ;
16750: LD_ADDR_EXP 70
16754: PUSH
16755: LD_INT 1
16757: ST_TO_ADDR
// if p3 = 102 then
16758: LD_VAR 0 3
16762: PUSH
16763: LD_INT 102
16765: EQUAL
16766: IFFALSE 16776
// sDiff := true ;
16768: LD_ADDR_EXP 71
16772: PUSH
16773: LD_INT 1
16775: ST_TO_ADDR
// if p3 = 103 then
16776: LD_VAR 0 3
16780: PUSH
16781: LD_INT 103
16783: EQUAL
16784: IFFALSE 16794
// sFog := true ;
16786: LD_ADDR_EXP 74
16790: PUSH
16791: LD_INT 1
16793: ST_TO_ADDR
// if p3 = 104 then
16794: LD_VAR 0 3
16798: PUSH
16799: LD_INT 104
16801: EQUAL
16802: IFFALSE 16812
// sReset := true ;
16804: LD_ADDR_EXP 75
16808: PUSH
16809: LD_INT 1
16811: ST_TO_ADDR
// if p3 = 105 then
16812: LD_VAR 0 3
16816: PUSH
16817: LD_INT 105
16819: EQUAL
16820: IFFALSE 16830
// sSun := true ;
16822: LD_ADDR_EXP 76
16826: PUSH
16827: LD_INT 1
16829: ST_TO_ADDR
// if p3 = 106 then
16830: LD_VAR 0 3
16834: PUSH
16835: LD_INT 106
16837: EQUAL
16838: IFFALSE 16848
// sTiger := true ;
16840: LD_ADDR_EXP 72
16844: PUSH
16845: LD_INT 1
16847: ST_TO_ADDR
// if p3 = 107 then
16848: LD_VAR 0 3
16852: PUSH
16853: LD_INT 107
16855: EQUAL
16856: IFFALSE 16866
// sBomb := true ;
16858: LD_ADDR_EXP 73
16862: PUSH
16863: LD_INT 1
16865: ST_TO_ADDR
// if p3 = 108 then
16866: LD_VAR 0 3
16870: PUSH
16871: LD_INT 108
16873: EQUAL
16874: IFFALSE 16884
// sWound := true ;
16876: LD_ADDR_EXP 81
16880: PUSH
16881: LD_INT 1
16883: ST_TO_ADDR
// if p3 = 109 then
16884: LD_VAR 0 3
16888: PUSH
16889: LD_INT 109
16891: EQUAL
16892: IFFALSE 16902
// sBetray := true ;
16894: LD_ADDR_EXP 85
16898: PUSH
16899: LD_INT 1
16901: ST_TO_ADDR
// if p3 = 110 then
16902: LD_VAR 0 3
16906: PUSH
16907: LD_INT 110
16909: EQUAL
16910: IFFALSE 16920
// sContamin := true ;
16912: LD_ADDR_EXP 86
16916: PUSH
16917: LD_INT 1
16919: ST_TO_ADDR
// if p3 = 111 then
16920: LD_VAR 0 3
16924: PUSH
16925: LD_INT 111
16927: EQUAL
16928: IFFALSE 16938
// sOil := true ;
16930: LD_ADDR_EXP 88
16934: PUSH
16935: LD_INT 1
16937: ST_TO_ADDR
// if p3 = 112 then
16938: LD_VAR 0 3
16942: PUSH
16943: LD_INT 112
16945: EQUAL
16946: IFFALSE 16956
// sStu := true ;
16948: LD_ADDR_EXP 92
16952: PUSH
16953: LD_INT 1
16955: ST_TO_ADDR
// if p3 = 113 then
16956: LD_VAR 0 3
16960: PUSH
16961: LD_INT 113
16963: EQUAL
16964: IFFALSE 16974
// sBazooka := true ;
16966: LD_ADDR_EXP 95
16970: PUSH
16971: LD_INT 1
16973: ST_TO_ADDR
// if p3 = 114 then
16974: LD_VAR 0 3
16978: PUSH
16979: LD_INT 114
16981: EQUAL
16982: IFFALSE 16992
// sMortar := true ;
16984: LD_ADDR_EXP 96
16988: PUSH
16989: LD_INT 1
16991: ST_TO_ADDR
// if p3 = 115 then
16992: LD_VAR 0 3
16996: PUSH
16997: LD_INT 115
16999: EQUAL
17000: IFFALSE 17010
// sRanger := true ;
17002: LD_ADDR_EXP 106
17006: PUSH
17007: LD_INT 1
17009: ST_TO_ADDR
// end ; if p2 = 101 then
17010: LD_VAR 0 2
17014: PUSH
17015: LD_INT 101
17017: EQUAL
17018: IFFALSE 17146
// begin case p3 of 1 :
17020: LD_VAR 0 3
17024: PUSH
17025: LD_INT 1
17027: DOUBLE
17028: EQUAL
17029: IFTRUE 17033
17031: GO 17040
17033: POP
// hHackUnlimitedResources ; 2 :
17034: CALL 28183 0 0
17038: GO 17146
17040: LD_INT 2
17042: DOUBLE
17043: EQUAL
17044: IFTRUE 17048
17046: GO 17055
17048: POP
// hHackSetLevel10 ; 3 :
17049: CALL 28316 0 0
17053: GO 17146
17055: LD_INT 3
17057: DOUBLE
17058: EQUAL
17059: IFTRUE 17063
17061: GO 17070
17063: POP
// hHackSetLevel10YourUnits ; 4 :
17064: CALL 28401 0 0
17068: GO 17146
17070: LD_INT 4
17072: DOUBLE
17073: EQUAL
17074: IFTRUE 17078
17076: GO 17085
17078: POP
// hHackInvincible ; 5 :
17079: CALL 28849 0 0
17083: GO 17146
17085: LD_INT 5
17087: DOUBLE
17088: EQUAL
17089: IFTRUE 17093
17091: GO 17100
17093: POP
// hHackInvisible ; 6 :
17094: CALL 28960 0 0
17098: GO 17146
17100: LD_INT 6
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 17115
17108: POP
// hHackChangeYourSide ; 7 :
17109: CALL 29017 0 0
17113: GO 17146
17115: LD_INT 7
17117: DOUBLE
17118: EQUAL
17119: IFTRUE 17123
17121: GO 17130
17123: POP
// hHackChangeUnitSide ; 8 :
17124: CALL 29059 0 0
17128: GO 17146
17130: LD_INT 8
17132: DOUBLE
17133: EQUAL
17134: IFTRUE 17138
17136: GO 17145
17138: POP
// hHackFog ; end ;
17139: CALL 29160 0 0
17143: GO 17146
17145: POP
// end ; end ;
17146: LD_VAR 0 7
17150: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
17151: GO 17153
17153: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17154: LD_STRING initStreamRollete();
17156: PPUSH
17157: CALL_OW 559
// InitStreamMode ;
17161: CALL 17170 0 0
// DefineStreamItems ( ) ;
17165: CALL 17610 0 0
// end ;
17169: END
// function InitStreamMode ; begin
17170: LD_INT 0
17172: PPUSH
// streamModeActive := false ;
17173: LD_ADDR_EXP 53
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// normalCounter := 36 ;
17181: LD_ADDR_EXP 54
17185: PUSH
17186: LD_INT 36
17188: ST_TO_ADDR
// hardcoreCounter := 16 ;
17189: LD_ADDR_EXP 55
17193: PUSH
17194: LD_INT 16
17196: ST_TO_ADDR
// sRocket := false ;
17197: LD_ADDR_EXP 58
17201: PUSH
17202: LD_INT 0
17204: ST_TO_ADDR
// sSpeed := false ;
17205: LD_ADDR_EXP 57
17209: PUSH
17210: LD_INT 0
17212: ST_TO_ADDR
// sEngine := false ;
17213: LD_ADDR_EXP 59
17217: PUSH
17218: LD_INT 0
17220: ST_TO_ADDR
// sSpec := false ;
17221: LD_ADDR_EXP 56
17225: PUSH
17226: LD_INT 0
17228: ST_TO_ADDR
// sLevel := false ;
17229: LD_ADDR_EXP 60
17233: PUSH
17234: LD_INT 0
17236: ST_TO_ADDR
// sArmoury := false ;
17237: LD_ADDR_EXP 61
17241: PUSH
17242: LD_INT 0
17244: ST_TO_ADDR
// sRadar := false ;
17245: LD_ADDR_EXP 62
17249: PUSH
17250: LD_INT 0
17252: ST_TO_ADDR
// sBunker := false ;
17253: LD_ADDR_EXP 63
17257: PUSH
17258: LD_INT 0
17260: ST_TO_ADDR
// sHack := false ;
17261: LD_ADDR_EXP 64
17265: PUSH
17266: LD_INT 0
17268: ST_TO_ADDR
// sFire := false ;
17269: LD_ADDR_EXP 65
17273: PUSH
17274: LD_INT 0
17276: ST_TO_ADDR
// sRefresh := false ;
17277: LD_ADDR_EXP 66
17281: PUSH
17282: LD_INT 0
17284: ST_TO_ADDR
// sExp := false ;
17285: LD_ADDR_EXP 67
17289: PUSH
17290: LD_INT 0
17292: ST_TO_ADDR
// sDepot := false ;
17293: LD_ADDR_EXP 68
17297: PUSH
17298: LD_INT 0
17300: ST_TO_ADDR
// sFlag := false ;
17301: LD_ADDR_EXP 69
17305: PUSH
17306: LD_INT 0
17308: ST_TO_ADDR
// sKamikadze := false ;
17309: LD_ADDR_EXP 77
17313: PUSH
17314: LD_INT 0
17316: ST_TO_ADDR
// sTroll := false ;
17317: LD_ADDR_EXP 78
17321: PUSH
17322: LD_INT 0
17324: ST_TO_ADDR
// sSlow := false ;
17325: LD_ADDR_EXP 79
17329: PUSH
17330: LD_INT 0
17332: ST_TO_ADDR
// sLack := false ;
17333: LD_ADDR_EXP 80
17337: PUSH
17338: LD_INT 0
17340: ST_TO_ADDR
// sTank := false ;
17341: LD_ADDR_EXP 82
17345: PUSH
17346: LD_INT 0
17348: ST_TO_ADDR
// sRemote := false ;
17349: LD_ADDR_EXP 83
17353: PUSH
17354: LD_INT 0
17356: ST_TO_ADDR
// sPowell := false ;
17357: LD_ADDR_EXP 84
17361: PUSH
17362: LD_INT 0
17364: ST_TO_ADDR
// sTeleport := false ;
17365: LD_ADDR_EXP 87
17369: PUSH
17370: LD_INT 0
17372: ST_TO_ADDR
// sOilTower := false ;
17373: LD_ADDR_EXP 89
17377: PUSH
17378: LD_INT 0
17380: ST_TO_ADDR
// sShovel := false ;
17381: LD_ADDR_EXP 90
17385: PUSH
17386: LD_INT 0
17388: ST_TO_ADDR
// sSheik := false ;
17389: LD_ADDR_EXP 91
17393: PUSH
17394: LD_INT 0
17396: ST_TO_ADDR
// sEarthquake := false ;
17397: LD_ADDR_EXP 93
17401: PUSH
17402: LD_INT 0
17404: ST_TO_ADDR
// sAI := false ;
17405: LD_ADDR_EXP 94
17409: PUSH
17410: LD_INT 0
17412: ST_TO_ADDR
// sCargo := false ;
17413: LD_ADDR_EXP 97
17417: PUSH
17418: LD_INT 0
17420: ST_TO_ADDR
// sDLaser := false ;
17421: LD_ADDR_EXP 98
17425: PUSH
17426: LD_INT 0
17428: ST_TO_ADDR
// sExchange := false ;
17429: LD_ADDR_EXP 99
17433: PUSH
17434: LD_INT 0
17436: ST_TO_ADDR
// sFac := false ;
17437: LD_ADDR_EXP 100
17441: PUSH
17442: LD_INT 0
17444: ST_TO_ADDR
// sPower := false ;
17445: LD_ADDR_EXP 101
17449: PUSH
17450: LD_INT 0
17452: ST_TO_ADDR
// sRandom := false ;
17453: LD_ADDR_EXP 102
17457: PUSH
17458: LD_INT 0
17460: ST_TO_ADDR
// sShield := false ;
17461: LD_ADDR_EXP 103
17465: PUSH
17466: LD_INT 0
17468: ST_TO_ADDR
// sTime := false ;
17469: LD_ADDR_EXP 104
17473: PUSH
17474: LD_INT 0
17476: ST_TO_ADDR
// sTools := false ;
17477: LD_ADDR_EXP 105
17481: PUSH
17482: LD_INT 0
17484: ST_TO_ADDR
// sSold := false ;
17485: LD_ADDR_EXP 70
17489: PUSH
17490: LD_INT 0
17492: ST_TO_ADDR
// sDiff := false ;
17493: LD_ADDR_EXP 71
17497: PUSH
17498: LD_INT 0
17500: ST_TO_ADDR
// sFog := false ;
17501: LD_ADDR_EXP 74
17505: PUSH
17506: LD_INT 0
17508: ST_TO_ADDR
// sReset := false ;
17509: LD_ADDR_EXP 75
17513: PUSH
17514: LD_INT 0
17516: ST_TO_ADDR
// sSun := false ;
17517: LD_ADDR_EXP 76
17521: PUSH
17522: LD_INT 0
17524: ST_TO_ADDR
// sTiger := false ;
17525: LD_ADDR_EXP 72
17529: PUSH
17530: LD_INT 0
17532: ST_TO_ADDR
// sBomb := false ;
17533: LD_ADDR_EXP 73
17537: PUSH
17538: LD_INT 0
17540: ST_TO_ADDR
// sWound := false ;
17541: LD_ADDR_EXP 81
17545: PUSH
17546: LD_INT 0
17548: ST_TO_ADDR
// sBetray := false ;
17549: LD_ADDR_EXP 85
17553: PUSH
17554: LD_INT 0
17556: ST_TO_ADDR
// sContamin := false ;
17557: LD_ADDR_EXP 86
17561: PUSH
17562: LD_INT 0
17564: ST_TO_ADDR
// sOil := false ;
17565: LD_ADDR_EXP 88
17569: PUSH
17570: LD_INT 0
17572: ST_TO_ADDR
// sStu := false ;
17573: LD_ADDR_EXP 92
17577: PUSH
17578: LD_INT 0
17580: ST_TO_ADDR
// sBazooka := false ;
17581: LD_ADDR_EXP 95
17585: PUSH
17586: LD_INT 0
17588: ST_TO_ADDR
// sMortar := false ;
17589: LD_ADDR_EXP 96
17593: PUSH
17594: LD_INT 0
17596: ST_TO_ADDR
// sRanger := false ;
17597: LD_ADDR_EXP 106
17601: PUSH
17602: LD_INT 0
17604: ST_TO_ADDR
// end ;
17605: LD_VAR 0 1
17609: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
17610: LD_INT 0
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
// result := [ ] ;
17617: LD_ADDR_VAR 0 1
17621: PUSH
17622: EMPTY
17623: ST_TO_ADDR
// if campaign_id = 1 then
17624: LD_OWVAR 69
17628: PUSH
17629: LD_INT 1
17631: EQUAL
17632: IFFALSE 20570
// begin case mission_number of 1 :
17634: LD_OWVAR 70
17638: PUSH
17639: LD_INT 1
17641: DOUBLE
17642: EQUAL
17643: IFTRUE 17647
17645: GO 17711
17647: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
17648: LD_ADDR_VAR 0 1
17652: PUSH
17653: LD_INT 2
17655: PUSH
17656: LD_INT 4
17658: PUSH
17659: LD_INT 11
17661: PUSH
17662: LD_INT 12
17664: PUSH
17665: LD_INT 15
17667: PUSH
17668: LD_INT 16
17670: PUSH
17671: LD_INT 22
17673: PUSH
17674: LD_INT 23
17676: PUSH
17677: LD_INT 26
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 101
17693: PUSH
17694: LD_INT 102
17696: PUSH
17697: LD_INT 106
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: LIST
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: ST_TO_ADDR
17709: GO 20568
17711: LD_INT 2
17713: DOUBLE
17714: EQUAL
17715: IFTRUE 17719
17717: GO 17791
17719: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
17720: LD_ADDR_VAR 0 1
17724: PUSH
17725: LD_INT 2
17727: PUSH
17728: LD_INT 4
17730: PUSH
17731: LD_INT 11
17733: PUSH
17734: LD_INT 12
17736: PUSH
17737: LD_INT 15
17739: PUSH
17740: LD_INT 16
17742: PUSH
17743: LD_INT 22
17745: PUSH
17746: LD_INT 23
17748: PUSH
17749: LD_INT 26
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: PUSH
17763: LD_INT 101
17765: PUSH
17766: LD_INT 102
17768: PUSH
17769: LD_INT 105
17771: PUSH
17772: LD_INT 106
17774: PUSH
17775: LD_INT 108
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: ST_TO_ADDR
17789: GO 20568
17791: LD_INT 3
17793: DOUBLE
17794: EQUAL
17795: IFTRUE 17799
17797: GO 17875
17799: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
17800: LD_ADDR_VAR 0 1
17804: PUSH
17805: LD_INT 2
17807: PUSH
17808: LD_INT 4
17810: PUSH
17811: LD_INT 5
17813: PUSH
17814: LD_INT 11
17816: PUSH
17817: LD_INT 12
17819: PUSH
17820: LD_INT 15
17822: PUSH
17823: LD_INT 16
17825: PUSH
17826: LD_INT 22
17828: PUSH
17829: LD_INT 26
17831: PUSH
17832: LD_INT 36
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 101
17849: PUSH
17850: LD_INT 102
17852: PUSH
17853: LD_INT 105
17855: PUSH
17856: LD_INT 106
17858: PUSH
17859: LD_INT 108
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: ST_TO_ADDR
17873: GO 20568
17875: LD_INT 4
17877: DOUBLE
17878: EQUAL
17879: IFTRUE 17883
17881: GO 17967
17883: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
17884: LD_ADDR_VAR 0 1
17888: PUSH
17889: LD_INT 2
17891: PUSH
17892: LD_INT 4
17894: PUSH
17895: LD_INT 5
17897: PUSH
17898: LD_INT 8
17900: PUSH
17901: LD_INT 11
17903: PUSH
17904: LD_INT 12
17906: PUSH
17907: LD_INT 15
17909: PUSH
17910: LD_INT 16
17912: PUSH
17913: LD_INT 22
17915: PUSH
17916: LD_INT 23
17918: PUSH
17919: LD_INT 26
17921: PUSH
17922: LD_INT 36
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 101
17941: PUSH
17942: LD_INT 102
17944: PUSH
17945: LD_INT 105
17947: PUSH
17948: LD_INT 106
17950: PUSH
17951: LD_INT 108
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: ST_TO_ADDR
17965: GO 20568
17967: LD_INT 5
17969: DOUBLE
17970: EQUAL
17971: IFTRUE 17975
17973: GO 18075
17975: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17976: LD_ADDR_VAR 0 1
17980: PUSH
17981: LD_INT 2
17983: PUSH
17984: LD_INT 4
17986: PUSH
17987: LD_INT 5
17989: PUSH
17990: LD_INT 6
17992: PUSH
17993: LD_INT 8
17995: PUSH
17996: LD_INT 11
17998: PUSH
17999: LD_INT 12
18001: PUSH
18002: LD_INT 15
18004: PUSH
18005: LD_INT 16
18007: PUSH
18008: LD_INT 22
18010: PUSH
18011: LD_INT 23
18013: PUSH
18014: LD_INT 25
18016: PUSH
18017: LD_INT 26
18019: PUSH
18020: LD_INT 36
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 101
18041: PUSH
18042: LD_INT 102
18044: PUSH
18045: LD_INT 105
18047: PUSH
18048: LD_INT 106
18050: PUSH
18051: LD_INT 108
18053: PUSH
18054: LD_INT 109
18056: PUSH
18057: LD_INT 112
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: ST_TO_ADDR
18073: GO 20568
18075: LD_INT 6
18077: DOUBLE
18078: EQUAL
18079: IFTRUE 18083
18081: GO 18203
18083: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
18084: LD_ADDR_VAR 0 1
18088: PUSH
18089: LD_INT 2
18091: PUSH
18092: LD_INT 4
18094: PUSH
18095: LD_INT 5
18097: PUSH
18098: LD_INT 6
18100: PUSH
18101: LD_INT 8
18103: PUSH
18104: LD_INT 11
18106: PUSH
18107: LD_INT 12
18109: PUSH
18110: LD_INT 15
18112: PUSH
18113: LD_INT 16
18115: PUSH
18116: LD_INT 20
18118: PUSH
18119: LD_INT 21
18121: PUSH
18122: LD_INT 22
18124: PUSH
18125: LD_INT 23
18127: PUSH
18128: LD_INT 25
18130: PUSH
18131: LD_INT 26
18133: PUSH
18134: LD_INT 30
18136: PUSH
18137: LD_INT 31
18139: PUSH
18140: LD_INT 32
18142: PUSH
18143: LD_INT 36
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 101
18169: PUSH
18170: LD_INT 102
18172: PUSH
18173: LD_INT 105
18175: PUSH
18176: LD_INT 106
18178: PUSH
18179: LD_INT 108
18181: PUSH
18182: LD_INT 109
18184: PUSH
18185: LD_INT 112
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: ST_TO_ADDR
18201: GO 20568
18203: LD_INT 7
18205: DOUBLE
18206: EQUAL
18207: IFTRUE 18211
18209: GO 18311
18211: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
18212: LD_ADDR_VAR 0 1
18216: PUSH
18217: LD_INT 2
18219: PUSH
18220: LD_INT 4
18222: PUSH
18223: LD_INT 5
18225: PUSH
18226: LD_INT 7
18228: PUSH
18229: LD_INT 11
18231: PUSH
18232: LD_INT 12
18234: PUSH
18235: LD_INT 15
18237: PUSH
18238: LD_INT 16
18240: PUSH
18241: LD_INT 20
18243: PUSH
18244: LD_INT 21
18246: PUSH
18247: LD_INT 22
18249: PUSH
18250: LD_INT 23
18252: PUSH
18253: LD_INT 25
18255: PUSH
18256: LD_INT 26
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 101
18277: PUSH
18278: LD_INT 102
18280: PUSH
18281: LD_INT 103
18283: PUSH
18284: LD_INT 105
18286: PUSH
18287: LD_INT 106
18289: PUSH
18290: LD_INT 108
18292: PUSH
18293: LD_INT 112
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: ST_TO_ADDR
18309: GO 20568
18311: LD_INT 8
18313: DOUBLE
18314: EQUAL
18315: IFTRUE 18319
18317: GO 18447
18319: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
18320: LD_ADDR_VAR 0 1
18324: PUSH
18325: LD_INT 2
18327: PUSH
18328: LD_INT 4
18330: PUSH
18331: LD_INT 5
18333: PUSH
18334: LD_INT 6
18336: PUSH
18337: LD_INT 7
18339: PUSH
18340: LD_INT 8
18342: PUSH
18343: LD_INT 11
18345: PUSH
18346: LD_INT 12
18348: PUSH
18349: LD_INT 15
18351: PUSH
18352: LD_INT 16
18354: PUSH
18355: LD_INT 20
18357: PUSH
18358: LD_INT 21
18360: PUSH
18361: LD_INT 22
18363: PUSH
18364: LD_INT 23
18366: PUSH
18367: LD_INT 25
18369: PUSH
18370: LD_INT 26
18372: PUSH
18373: LD_INT 30
18375: PUSH
18376: LD_INT 31
18378: PUSH
18379: LD_INT 32
18381: PUSH
18382: LD_INT 36
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 101
18409: PUSH
18410: LD_INT 102
18412: PUSH
18413: LD_INT 103
18415: PUSH
18416: LD_INT 105
18418: PUSH
18419: LD_INT 106
18421: PUSH
18422: LD_INT 108
18424: PUSH
18425: LD_INT 109
18427: PUSH
18428: LD_INT 112
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: ST_TO_ADDR
18445: GO 20568
18447: LD_INT 9
18449: DOUBLE
18450: EQUAL
18451: IFTRUE 18455
18453: GO 18591
18455: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
18456: LD_ADDR_VAR 0 1
18460: PUSH
18461: LD_INT 2
18463: PUSH
18464: LD_INT 4
18466: PUSH
18467: LD_INT 5
18469: PUSH
18470: LD_INT 6
18472: PUSH
18473: LD_INT 7
18475: PUSH
18476: LD_INT 8
18478: PUSH
18479: LD_INT 11
18481: PUSH
18482: LD_INT 12
18484: PUSH
18485: LD_INT 15
18487: PUSH
18488: LD_INT 16
18490: PUSH
18491: LD_INT 20
18493: PUSH
18494: LD_INT 21
18496: PUSH
18497: LD_INT 22
18499: PUSH
18500: LD_INT 23
18502: PUSH
18503: LD_INT 25
18505: PUSH
18506: LD_INT 26
18508: PUSH
18509: LD_INT 28
18511: PUSH
18512: LD_INT 30
18514: PUSH
18515: LD_INT 31
18517: PUSH
18518: LD_INT 32
18520: PUSH
18521: LD_INT 36
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 101
18549: PUSH
18550: LD_INT 102
18552: PUSH
18553: LD_INT 103
18555: PUSH
18556: LD_INT 105
18558: PUSH
18559: LD_INT 106
18561: PUSH
18562: LD_INT 108
18564: PUSH
18565: LD_INT 109
18567: PUSH
18568: LD_INT 112
18570: PUSH
18571: LD_INT 114
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: ST_TO_ADDR
18589: GO 20568
18591: LD_INT 10
18593: DOUBLE
18594: EQUAL
18595: IFTRUE 18599
18597: GO 18783
18599: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
18600: LD_ADDR_VAR 0 1
18604: PUSH
18605: LD_INT 2
18607: PUSH
18608: LD_INT 4
18610: PUSH
18611: LD_INT 5
18613: PUSH
18614: LD_INT 6
18616: PUSH
18617: LD_INT 7
18619: PUSH
18620: LD_INT 8
18622: PUSH
18623: LD_INT 9
18625: PUSH
18626: LD_INT 10
18628: PUSH
18629: LD_INT 11
18631: PUSH
18632: LD_INT 12
18634: PUSH
18635: LD_INT 13
18637: PUSH
18638: LD_INT 14
18640: PUSH
18641: LD_INT 15
18643: PUSH
18644: LD_INT 16
18646: PUSH
18647: LD_INT 17
18649: PUSH
18650: LD_INT 18
18652: PUSH
18653: LD_INT 19
18655: PUSH
18656: LD_INT 20
18658: PUSH
18659: LD_INT 21
18661: PUSH
18662: LD_INT 22
18664: PUSH
18665: LD_INT 23
18667: PUSH
18668: LD_INT 24
18670: PUSH
18671: LD_INT 25
18673: PUSH
18674: LD_INT 26
18676: PUSH
18677: LD_INT 28
18679: PUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 31
18685: PUSH
18686: LD_INT 32
18688: PUSH
18689: LD_INT 36
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 101
18725: PUSH
18726: LD_INT 102
18728: PUSH
18729: LD_INT 103
18731: PUSH
18732: LD_INT 104
18734: PUSH
18735: LD_INT 105
18737: PUSH
18738: LD_INT 106
18740: PUSH
18741: LD_INT 107
18743: PUSH
18744: LD_INT 108
18746: PUSH
18747: LD_INT 109
18749: PUSH
18750: LD_INT 110
18752: PUSH
18753: LD_INT 111
18755: PUSH
18756: LD_INT 112
18758: PUSH
18759: LD_INT 114
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: ST_TO_ADDR
18781: GO 20568
18783: LD_INT 11
18785: DOUBLE
18786: EQUAL
18787: IFTRUE 18791
18789: GO 18983
18791: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
18792: LD_ADDR_VAR 0 1
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: LD_INT 3
18802: PUSH
18803: LD_INT 4
18805: PUSH
18806: LD_INT 5
18808: PUSH
18809: LD_INT 6
18811: PUSH
18812: LD_INT 7
18814: PUSH
18815: LD_INT 8
18817: PUSH
18818: LD_INT 9
18820: PUSH
18821: LD_INT 10
18823: PUSH
18824: LD_INT 11
18826: PUSH
18827: LD_INT 12
18829: PUSH
18830: LD_INT 13
18832: PUSH
18833: LD_INT 14
18835: PUSH
18836: LD_INT 15
18838: PUSH
18839: LD_INT 16
18841: PUSH
18842: LD_INT 17
18844: PUSH
18845: LD_INT 18
18847: PUSH
18848: LD_INT 19
18850: PUSH
18851: LD_INT 20
18853: PUSH
18854: LD_INT 21
18856: PUSH
18857: LD_INT 22
18859: PUSH
18860: LD_INT 23
18862: PUSH
18863: LD_INT 24
18865: PUSH
18866: LD_INT 25
18868: PUSH
18869: LD_INT 26
18871: PUSH
18872: LD_INT 28
18874: PUSH
18875: LD_INT 30
18877: PUSH
18878: LD_INT 31
18880: PUSH
18881: LD_INT 32
18883: PUSH
18884: LD_INT 34
18886: PUSH
18887: LD_INT 36
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 101
18925: PUSH
18926: LD_INT 102
18928: PUSH
18929: LD_INT 103
18931: PUSH
18932: LD_INT 104
18934: PUSH
18935: LD_INT 105
18937: PUSH
18938: LD_INT 106
18940: PUSH
18941: LD_INT 107
18943: PUSH
18944: LD_INT 108
18946: PUSH
18947: LD_INT 109
18949: PUSH
18950: LD_INT 110
18952: PUSH
18953: LD_INT 111
18955: PUSH
18956: LD_INT 112
18958: PUSH
18959: LD_INT 114
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: ST_TO_ADDR
18981: GO 20568
18983: LD_INT 12
18985: DOUBLE
18986: EQUAL
18987: IFTRUE 18991
18989: GO 19199
18991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18992: LD_ADDR_VAR 0 1
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: LD_INT 3
19005: PUSH
19006: LD_INT 4
19008: PUSH
19009: LD_INT 5
19011: PUSH
19012: LD_INT 6
19014: PUSH
19015: LD_INT 7
19017: PUSH
19018: LD_INT 8
19020: PUSH
19021: LD_INT 9
19023: PUSH
19024: LD_INT 10
19026: PUSH
19027: LD_INT 11
19029: PUSH
19030: LD_INT 12
19032: PUSH
19033: LD_INT 13
19035: PUSH
19036: LD_INT 14
19038: PUSH
19039: LD_INT 15
19041: PUSH
19042: LD_INT 16
19044: PUSH
19045: LD_INT 17
19047: PUSH
19048: LD_INT 18
19050: PUSH
19051: LD_INT 19
19053: PUSH
19054: LD_INT 20
19056: PUSH
19057: LD_INT 21
19059: PUSH
19060: LD_INT 22
19062: PUSH
19063: LD_INT 23
19065: PUSH
19066: LD_INT 24
19068: PUSH
19069: LD_INT 25
19071: PUSH
19072: LD_INT 26
19074: PUSH
19075: LD_INT 27
19077: PUSH
19078: LD_INT 28
19080: PUSH
19081: LD_INT 30
19083: PUSH
19084: LD_INT 31
19086: PUSH
19087: LD_INT 32
19089: PUSH
19090: LD_INT 33
19092: PUSH
19093: LD_INT 34
19095: PUSH
19096: LD_INT 36
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 101
19137: PUSH
19138: LD_INT 102
19140: PUSH
19141: LD_INT 103
19143: PUSH
19144: LD_INT 104
19146: PUSH
19147: LD_INT 105
19149: PUSH
19150: LD_INT 106
19152: PUSH
19153: LD_INT 107
19155: PUSH
19156: LD_INT 108
19158: PUSH
19159: LD_INT 109
19161: PUSH
19162: LD_INT 110
19164: PUSH
19165: LD_INT 111
19167: PUSH
19168: LD_INT 112
19170: PUSH
19171: LD_INT 113
19173: PUSH
19174: LD_INT 114
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: ST_TO_ADDR
19197: GO 20568
19199: LD_INT 13
19201: DOUBLE
19202: EQUAL
19203: IFTRUE 19207
19205: GO 19403
19207: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
19208: LD_ADDR_VAR 0 1
19212: PUSH
19213: LD_INT 1
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: LD_INT 3
19221: PUSH
19222: LD_INT 4
19224: PUSH
19225: LD_INT 5
19227: PUSH
19228: LD_INT 8
19230: PUSH
19231: LD_INT 9
19233: PUSH
19234: LD_INT 10
19236: PUSH
19237: LD_INT 11
19239: PUSH
19240: LD_INT 12
19242: PUSH
19243: LD_INT 14
19245: PUSH
19246: LD_INT 15
19248: PUSH
19249: LD_INT 16
19251: PUSH
19252: LD_INT 17
19254: PUSH
19255: LD_INT 18
19257: PUSH
19258: LD_INT 19
19260: PUSH
19261: LD_INT 20
19263: PUSH
19264: LD_INT 21
19266: PUSH
19267: LD_INT 22
19269: PUSH
19270: LD_INT 23
19272: PUSH
19273: LD_INT 24
19275: PUSH
19276: LD_INT 25
19278: PUSH
19279: LD_INT 26
19281: PUSH
19282: LD_INT 27
19284: PUSH
19285: LD_INT 28
19287: PUSH
19288: LD_INT 30
19290: PUSH
19291: LD_INT 31
19293: PUSH
19294: LD_INT 32
19296: PUSH
19297: LD_INT 33
19299: PUSH
19300: LD_INT 34
19302: PUSH
19303: LD_INT 36
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 101
19341: PUSH
19342: LD_INT 102
19344: PUSH
19345: LD_INT 103
19347: PUSH
19348: LD_INT 104
19350: PUSH
19351: LD_INT 105
19353: PUSH
19354: LD_INT 106
19356: PUSH
19357: LD_INT 107
19359: PUSH
19360: LD_INT 108
19362: PUSH
19363: LD_INT 109
19365: PUSH
19366: LD_INT 110
19368: PUSH
19369: LD_INT 111
19371: PUSH
19372: LD_INT 112
19374: PUSH
19375: LD_INT 113
19377: PUSH
19378: LD_INT 114
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: ST_TO_ADDR
19401: GO 20568
19403: LD_INT 14
19405: DOUBLE
19406: EQUAL
19407: IFTRUE 19411
19409: GO 19623
19411: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
19412: LD_ADDR_VAR 0 1
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: LD_INT 2
19422: PUSH
19423: LD_INT 3
19425: PUSH
19426: LD_INT 4
19428: PUSH
19429: LD_INT 5
19431: PUSH
19432: LD_INT 6
19434: PUSH
19435: LD_INT 7
19437: PUSH
19438: LD_INT 8
19440: PUSH
19441: LD_INT 9
19443: PUSH
19444: LD_INT 10
19446: PUSH
19447: LD_INT 11
19449: PUSH
19450: LD_INT 12
19452: PUSH
19453: LD_INT 13
19455: PUSH
19456: LD_INT 14
19458: PUSH
19459: LD_INT 15
19461: PUSH
19462: LD_INT 16
19464: PUSH
19465: LD_INT 17
19467: PUSH
19468: LD_INT 18
19470: PUSH
19471: LD_INT 19
19473: PUSH
19474: LD_INT 20
19476: PUSH
19477: LD_INT 21
19479: PUSH
19480: LD_INT 22
19482: PUSH
19483: LD_INT 23
19485: PUSH
19486: LD_INT 24
19488: PUSH
19489: LD_INT 25
19491: PUSH
19492: LD_INT 26
19494: PUSH
19495: LD_INT 27
19497: PUSH
19498: LD_INT 28
19500: PUSH
19501: LD_INT 29
19503: PUSH
19504: LD_INT 30
19506: PUSH
19507: LD_INT 31
19509: PUSH
19510: LD_INT 32
19512: PUSH
19513: LD_INT 33
19515: PUSH
19516: LD_INT 34
19518: PUSH
19519: LD_INT 36
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 101
19561: PUSH
19562: LD_INT 102
19564: PUSH
19565: LD_INT 103
19567: PUSH
19568: LD_INT 104
19570: PUSH
19571: LD_INT 105
19573: PUSH
19574: LD_INT 106
19576: PUSH
19577: LD_INT 107
19579: PUSH
19580: LD_INT 108
19582: PUSH
19583: LD_INT 109
19585: PUSH
19586: LD_INT 110
19588: PUSH
19589: LD_INT 111
19591: PUSH
19592: LD_INT 112
19594: PUSH
19595: LD_INT 113
19597: PUSH
19598: LD_INT 114
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: ST_TO_ADDR
19621: GO 20568
19623: LD_INT 15
19625: DOUBLE
19626: EQUAL
19627: IFTRUE 19631
19629: GO 19843
19631: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
19632: LD_ADDR_VAR 0 1
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: LD_INT 3
19645: PUSH
19646: LD_INT 4
19648: PUSH
19649: LD_INT 5
19651: PUSH
19652: LD_INT 6
19654: PUSH
19655: LD_INT 7
19657: PUSH
19658: LD_INT 8
19660: PUSH
19661: LD_INT 9
19663: PUSH
19664: LD_INT 10
19666: PUSH
19667: LD_INT 11
19669: PUSH
19670: LD_INT 12
19672: PUSH
19673: LD_INT 13
19675: PUSH
19676: LD_INT 14
19678: PUSH
19679: LD_INT 15
19681: PUSH
19682: LD_INT 16
19684: PUSH
19685: LD_INT 17
19687: PUSH
19688: LD_INT 18
19690: PUSH
19691: LD_INT 19
19693: PUSH
19694: LD_INT 20
19696: PUSH
19697: LD_INT 21
19699: PUSH
19700: LD_INT 22
19702: PUSH
19703: LD_INT 23
19705: PUSH
19706: LD_INT 24
19708: PUSH
19709: LD_INT 25
19711: PUSH
19712: LD_INT 26
19714: PUSH
19715: LD_INT 27
19717: PUSH
19718: LD_INT 28
19720: PUSH
19721: LD_INT 29
19723: PUSH
19724: LD_INT 30
19726: PUSH
19727: LD_INT 31
19729: PUSH
19730: LD_INT 32
19732: PUSH
19733: LD_INT 33
19735: PUSH
19736: LD_INT 34
19738: PUSH
19739: LD_INT 36
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 101
19781: PUSH
19782: LD_INT 102
19784: PUSH
19785: LD_INT 103
19787: PUSH
19788: LD_INT 104
19790: PUSH
19791: LD_INT 105
19793: PUSH
19794: LD_INT 106
19796: PUSH
19797: LD_INT 107
19799: PUSH
19800: LD_INT 108
19802: PUSH
19803: LD_INT 109
19805: PUSH
19806: LD_INT 110
19808: PUSH
19809: LD_INT 111
19811: PUSH
19812: LD_INT 112
19814: PUSH
19815: LD_INT 113
19817: PUSH
19818: LD_INT 114
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: ST_TO_ADDR
19841: GO 20568
19843: LD_INT 16
19845: DOUBLE
19846: EQUAL
19847: IFTRUE 19851
19849: GO 19975
19851: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
19852: LD_ADDR_VAR 0 1
19856: PUSH
19857: LD_INT 2
19859: PUSH
19860: LD_INT 4
19862: PUSH
19863: LD_INT 5
19865: PUSH
19866: LD_INT 7
19868: PUSH
19869: LD_INT 11
19871: PUSH
19872: LD_INT 12
19874: PUSH
19875: LD_INT 15
19877: PUSH
19878: LD_INT 16
19880: PUSH
19881: LD_INT 20
19883: PUSH
19884: LD_INT 21
19886: PUSH
19887: LD_INT 22
19889: PUSH
19890: LD_INT 23
19892: PUSH
19893: LD_INT 25
19895: PUSH
19896: LD_INT 26
19898: PUSH
19899: LD_INT 30
19901: PUSH
19902: LD_INT 31
19904: PUSH
19905: LD_INT 32
19907: PUSH
19908: LD_INT 33
19910: PUSH
19911: LD_INT 34
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 101
19937: PUSH
19938: LD_INT 102
19940: PUSH
19941: LD_INT 103
19943: PUSH
19944: LD_INT 106
19946: PUSH
19947: LD_INT 108
19949: PUSH
19950: LD_INT 112
19952: PUSH
19953: LD_INT 113
19955: PUSH
19956: LD_INT 114
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: ST_TO_ADDR
19973: GO 20568
19975: LD_INT 17
19977: DOUBLE
19978: EQUAL
19979: IFTRUE 19983
19981: GO 20195
19983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19984: LD_ADDR_VAR 0 1
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: LD_INT 2
19994: PUSH
19995: LD_INT 3
19997: PUSH
19998: LD_INT 4
20000: PUSH
20001: LD_INT 5
20003: PUSH
20004: LD_INT 6
20006: PUSH
20007: LD_INT 7
20009: PUSH
20010: LD_INT 8
20012: PUSH
20013: LD_INT 9
20015: PUSH
20016: LD_INT 10
20018: PUSH
20019: LD_INT 11
20021: PUSH
20022: LD_INT 12
20024: PUSH
20025: LD_INT 13
20027: PUSH
20028: LD_INT 14
20030: PUSH
20031: LD_INT 15
20033: PUSH
20034: LD_INT 16
20036: PUSH
20037: LD_INT 17
20039: PUSH
20040: LD_INT 18
20042: PUSH
20043: LD_INT 19
20045: PUSH
20046: LD_INT 20
20048: PUSH
20049: LD_INT 21
20051: PUSH
20052: LD_INT 22
20054: PUSH
20055: LD_INT 23
20057: PUSH
20058: LD_INT 24
20060: PUSH
20061: LD_INT 25
20063: PUSH
20064: LD_INT 26
20066: PUSH
20067: LD_INT 27
20069: PUSH
20070: LD_INT 28
20072: PUSH
20073: LD_INT 29
20075: PUSH
20076: LD_INT 30
20078: PUSH
20079: LD_INT 31
20081: PUSH
20082: LD_INT 32
20084: PUSH
20085: LD_INT 33
20087: PUSH
20088: LD_INT 34
20090: PUSH
20091: LD_INT 36
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 101
20133: PUSH
20134: LD_INT 102
20136: PUSH
20137: LD_INT 103
20139: PUSH
20140: LD_INT 104
20142: PUSH
20143: LD_INT 105
20145: PUSH
20146: LD_INT 106
20148: PUSH
20149: LD_INT 107
20151: PUSH
20152: LD_INT 108
20154: PUSH
20155: LD_INT 109
20157: PUSH
20158: LD_INT 110
20160: PUSH
20161: LD_INT 111
20163: PUSH
20164: LD_INT 112
20166: PUSH
20167: LD_INT 113
20169: PUSH
20170: LD_INT 114
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: ST_TO_ADDR
20193: GO 20568
20195: LD_INT 18
20197: DOUBLE
20198: EQUAL
20199: IFTRUE 20203
20201: GO 20339
20203: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
20204: LD_ADDR_VAR 0 1
20208: PUSH
20209: LD_INT 2
20211: PUSH
20212: LD_INT 4
20214: PUSH
20215: LD_INT 5
20217: PUSH
20218: LD_INT 7
20220: PUSH
20221: LD_INT 11
20223: PUSH
20224: LD_INT 12
20226: PUSH
20227: LD_INT 15
20229: PUSH
20230: LD_INT 16
20232: PUSH
20233: LD_INT 20
20235: PUSH
20236: LD_INT 21
20238: PUSH
20239: LD_INT 22
20241: PUSH
20242: LD_INT 23
20244: PUSH
20245: LD_INT 25
20247: PUSH
20248: LD_INT 26
20250: PUSH
20251: LD_INT 30
20253: PUSH
20254: LD_INT 31
20256: PUSH
20257: LD_INT 32
20259: PUSH
20260: LD_INT 33
20262: PUSH
20263: LD_INT 34
20265: PUSH
20266: LD_INT 35
20268: PUSH
20269: LD_INT 36
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 101
20297: PUSH
20298: LD_INT 102
20300: PUSH
20301: LD_INT 103
20303: PUSH
20304: LD_INT 106
20306: PUSH
20307: LD_INT 108
20309: PUSH
20310: LD_INT 112
20312: PUSH
20313: LD_INT 113
20315: PUSH
20316: LD_INT 114
20318: PUSH
20319: LD_INT 115
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: ST_TO_ADDR
20337: GO 20568
20339: LD_INT 19
20341: DOUBLE
20342: EQUAL
20343: IFTRUE 20347
20345: GO 20567
20347: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
20348: LD_ADDR_VAR 0 1
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: LD_INT 2
20358: PUSH
20359: LD_INT 3
20361: PUSH
20362: LD_INT 4
20364: PUSH
20365: LD_INT 5
20367: PUSH
20368: LD_INT 6
20370: PUSH
20371: LD_INT 7
20373: PUSH
20374: LD_INT 8
20376: PUSH
20377: LD_INT 9
20379: PUSH
20380: LD_INT 10
20382: PUSH
20383: LD_INT 11
20385: PUSH
20386: LD_INT 12
20388: PUSH
20389: LD_INT 13
20391: PUSH
20392: LD_INT 14
20394: PUSH
20395: LD_INT 15
20397: PUSH
20398: LD_INT 16
20400: PUSH
20401: LD_INT 17
20403: PUSH
20404: LD_INT 18
20406: PUSH
20407: LD_INT 19
20409: PUSH
20410: LD_INT 20
20412: PUSH
20413: LD_INT 21
20415: PUSH
20416: LD_INT 22
20418: PUSH
20419: LD_INT 23
20421: PUSH
20422: LD_INT 24
20424: PUSH
20425: LD_INT 25
20427: PUSH
20428: LD_INT 26
20430: PUSH
20431: LD_INT 27
20433: PUSH
20434: LD_INT 28
20436: PUSH
20437: LD_INT 29
20439: PUSH
20440: LD_INT 30
20442: PUSH
20443: LD_INT 31
20445: PUSH
20446: LD_INT 32
20448: PUSH
20449: LD_INT 33
20451: PUSH
20452: LD_INT 34
20454: PUSH
20455: LD_INT 35
20457: PUSH
20458: LD_INT 36
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 101
20501: PUSH
20502: LD_INT 102
20504: PUSH
20505: LD_INT 103
20507: PUSH
20508: LD_INT 104
20510: PUSH
20511: LD_INT 105
20513: PUSH
20514: LD_INT 106
20516: PUSH
20517: LD_INT 107
20519: PUSH
20520: LD_INT 108
20522: PUSH
20523: LD_INT 109
20525: PUSH
20526: LD_INT 110
20528: PUSH
20529: LD_INT 111
20531: PUSH
20532: LD_INT 112
20534: PUSH
20535: LD_INT 113
20537: PUSH
20538: LD_INT 114
20540: PUSH
20541: LD_INT 115
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: ST_TO_ADDR
20565: GO 20568
20567: POP
// end else
20568: GO 20787
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
20570: LD_ADDR_VAR 0 1
20574: PUSH
20575: LD_INT 1
20577: PUSH
20578: LD_INT 2
20580: PUSH
20581: LD_INT 3
20583: PUSH
20584: LD_INT 4
20586: PUSH
20587: LD_INT 5
20589: PUSH
20590: LD_INT 6
20592: PUSH
20593: LD_INT 7
20595: PUSH
20596: LD_INT 8
20598: PUSH
20599: LD_INT 9
20601: PUSH
20602: LD_INT 10
20604: PUSH
20605: LD_INT 11
20607: PUSH
20608: LD_INT 12
20610: PUSH
20611: LD_INT 13
20613: PUSH
20614: LD_INT 14
20616: PUSH
20617: LD_INT 15
20619: PUSH
20620: LD_INT 16
20622: PUSH
20623: LD_INT 17
20625: PUSH
20626: LD_INT 18
20628: PUSH
20629: LD_INT 19
20631: PUSH
20632: LD_INT 20
20634: PUSH
20635: LD_INT 21
20637: PUSH
20638: LD_INT 22
20640: PUSH
20641: LD_INT 23
20643: PUSH
20644: LD_INT 24
20646: PUSH
20647: LD_INT 25
20649: PUSH
20650: LD_INT 26
20652: PUSH
20653: LD_INT 27
20655: PUSH
20656: LD_INT 28
20658: PUSH
20659: LD_INT 29
20661: PUSH
20662: LD_INT 30
20664: PUSH
20665: LD_INT 31
20667: PUSH
20668: LD_INT 32
20670: PUSH
20671: LD_INT 33
20673: PUSH
20674: LD_INT 34
20676: PUSH
20677: LD_INT 35
20679: PUSH
20680: LD_INT 36
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 101
20723: PUSH
20724: LD_INT 102
20726: PUSH
20727: LD_INT 103
20729: PUSH
20730: LD_INT 104
20732: PUSH
20733: LD_INT 105
20735: PUSH
20736: LD_INT 106
20738: PUSH
20739: LD_INT 107
20741: PUSH
20742: LD_INT 108
20744: PUSH
20745: LD_INT 109
20747: PUSH
20748: LD_INT 110
20750: PUSH
20751: LD_INT 111
20753: PUSH
20754: LD_INT 112
20756: PUSH
20757: LD_INT 113
20759: PUSH
20760: LD_INT 114
20762: PUSH
20763: LD_INT 115
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: ST_TO_ADDR
// if result then
20787: LD_VAR 0 1
20791: IFFALSE 21080
// begin normal :=  ;
20793: LD_ADDR_VAR 0 3
20797: PUSH
20798: LD_STRING 
20800: ST_TO_ADDR
// hardcore :=  ;
20801: LD_ADDR_VAR 0 4
20805: PUSH
20806: LD_STRING 
20808: ST_TO_ADDR
// for i = 1 to normalCounter do
20809: LD_ADDR_VAR 0 5
20813: PUSH
20814: DOUBLE
20815: LD_INT 1
20817: DEC
20818: ST_TO_ADDR
20819: LD_EXP 54
20823: PUSH
20824: FOR_TO
20825: IFFALSE 20926
// begin tmp := 0 ;
20827: LD_ADDR_VAR 0 2
20831: PUSH
20832: LD_STRING 0
20834: ST_TO_ADDR
// if result [ 1 ] then
20835: LD_VAR 0 1
20839: PUSH
20840: LD_INT 1
20842: ARRAY
20843: IFFALSE 20908
// if result [ 1 ] [ 1 ] = i then
20845: LD_VAR 0 1
20849: PUSH
20850: LD_INT 1
20852: ARRAY
20853: PUSH
20854: LD_INT 1
20856: ARRAY
20857: PUSH
20858: LD_VAR 0 5
20862: EQUAL
20863: IFFALSE 20908
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20865: LD_ADDR_VAR 0 1
20869: PUSH
20870: LD_VAR 0 1
20874: PPUSH
20875: LD_INT 1
20877: PPUSH
20878: LD_VAR 0 1
20882: PUSH
20883: LD_INT 1
20885: ARRAY
20886: PPUSH
20887: LD_INT 1
20889: PPUSH
20890: CALL_OW 3
20894: PPUSH
20895: CALL_OW 1
20899: ST_TO_ADDR
// tmp := 1 ;
20900: LD_ADDR_VAR 0 2
20904: PUSH
20905: LD_STRING 1
20907: ST_TO_ADDR
// end ; normal := normal & tmp ;
20908: LD_ADDR_VAR 0 3
20912: PUSH
20913: LD_VAR 0 3
20917: PUSH
20918: LD_VAR 0 2
20922: STR
20923: ST_TO_ADDR
// end ;
20924: GO 20824
20926: POP
20927: POP
// for i = 1 to hardcoreCounter do
20928: LD_ADDR_VAR 0 5
20932: PUSH
20933: DOUBLE
20934: LD_INT 1
20936: DEC
20937: ST_TO_ADDR
20938: LD_EXP 55
20942: PUSH
20943: FOR_TO
20944: IFFALSE 21049
// begin tmp := 0 ;
20946: LD_ADDR_VAR 0 2
20950: PUSH
20951: LD_STRING 0
20953: ST_TO_ADDR
// if result [ 2 ] then
20954: LD_VAR 0 1
20958: PUSH
20959: LD_INT 2
20961: ARRAY
20962: IFFALSE 21031
// if result [ 2 ] [ 1 ] = 100 + i then
20964: LD_VAR 0 1
20968: PUSH
20969: LD_INT 2
20971: ARRAY
20972: PUSH
20973: LD_INT 1
20975: ARRAY
20976: PUSH
20977: LD_INT 100
20979: PUSH
20980: LD_VAR 0 5
20984: PLUS
20985: EQUAL
20986: IFFALSE 21031
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20988: LD_ADDR_VAR 0 1
20992: PUSH
20993: LD_VAR 0 1
20997: PPUSH
20998: LD_INT 2
21000: PPUSH
21001: LD_VAR 0 1
21005: PUSH
21006: LD_INT 2
21008: ARRAY
21009: PPUSH
21010: LD_INT 1
21012: PPUSH
21013: CALL_OW 3
21017: PPUSH
21018: CALL_OW 1
21022: ST_TO_ADDR
// tmp := 1 ;
21023: LD_ADDR_VAR 0 2
21027: PUSH
21028: LD_STRING 1
21030: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21031: LD_ADDR_VAR 0 4
21035: PUSH
21036: LD_VAR 0 4
21040: PUSH
21041: LD_VAR 0 2
21045: STR
21046: ST_TO_ADDR
// end ;
21047: GO 20943
21049: POP
21050: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
21051: LD_STRING getStreamItemsFromMission("
21053: PUSH
21054: LD_VAR 0 3
21058: STR
21059: PUSH
21060: LD_STRING ","
21062: STR
21063: PUSH
21064: LD_VAR 0 4
21068: STR
21069: PUSH
21070: LD_STRING ")
21072: STR
21073: PPUSH
21074: CALL_OW 559
// end else
21078: GO 21087
// ToLua ( getStreamItemsFromMission("","") ) ;
21080: LD_STRING getStreamItemsFromMission("","")
21082: PPUSH
21083: CALL_OW 559
// end ;
21087: LD_VAR 0 1
21091: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21092: LD_EXP 53
21096: PUSH
21097: LD_EXP 58
21101: AND
21102: IFFALSE 21226
21104: GO 21106
21106: DISABLE
21107: LD_INT 0
21109: PPUSH
21110: PPUSH
// begin enable ;
21111: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21112: LD_ADDR_VAR 0 2
21116: PUSH
21117: LD_INT 22
21119: PUSH
21120: LD_OWVAR 2
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 2
21131: PUSH
21132: LD_INT 34
21134: PUSH
21135: LD_INT 7
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 34
21144: PUSH
21145: LD_INT 45
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 34
21154: PUSH
21155: LD_INT 28
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 34
21164: PUSH
21165: LD_INT 47
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PPUSH
21183: CALL_OW 69
21187: ST_TO_ADDR
// if not tmp then
21188: LD_VAR 0 2
21192: NOT
21193: IFFALSE 21197
// exit ;
21195: GO 21226
// for i in tmp do
21197: LD_ADDR_VAR 0 1
21201: PUSH
21202: LD_VAR 0 2
21206: PUSH
21207: FOR_IN
21208: IFFALSE 21224
// begin SetLives ( i , 0 ) ;
21210: LD_VAR 0 1
21214: PPUSH
21215: LD_INT 0
21217: PPUSH
21218: CALL_OW 234
// end ;
21222: GO 21207
21224: POP
21225: POP
// end ;
21226: PPOPN 2
21228: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21229: LD_EXP 53
21233: PUSH
21234: LD_EXP 59
21238: AND
21239: IFFALSE 21323
21241: GO 21243
21243: DISABLE
21244: LD_INT 0
21246: PPUSH
21247: PPUSH
// begin enable ;
21248: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21249: LD_ADDR_VAR 0 2
21253: PUSH
21254: LD_INT 22
21256: PUSH
21257: LD_OWVAR 2
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 32
21268: PUSH
21269: LD_INT 3
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PPUSH
21280: CALL_OW 69
21284: ST_TO_ADDR
// if not tmp then
21285: LD_VAR 0 2
21289: NOT
21290: IFFALSE 21294
// exit ;
21292: GO 21323
// for i in tmp do
21294: LD_ADDR_VAR 0 1
21298: PUSH
21299: LD_VAR 0 2
21303: PUSH
21304: FOR_IN
21305: IFFALSE 21321
// begin SetLives ( i , 0 ) ;
21307: LD_VAR 0 1
21311: PPUSH
21312: LD_INT 0
21314: PPUSH
21315: CALL_OW 234
// end ;
21319: GO 21304
21321: POP
21322: POP
// end ;
21323: PPOPN 2
21325: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21326: LD_EXP 53
21330: PUSH
21331: LD_EXP 56
21335: AND
21336: IFFALSE 21429
21338: GO 21340
21340: DISABLE
21341: LD_INT 0
21343: PPUSH
// begin enable ;
21344: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21345: LD_ADDR_VAR 0 1
21349: PUSH
21350: LD_INT 22
21352: PUSH
21353: LD_OWVAR 2
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 2
21364: PUSH
21365: LD_INT 25
21367: PUSH
21368: LD_INT 5
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 25
21377: PUSH
21378: LD_INT 9
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 25
21387: PUSH
21388: LD_INT 8
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PPUSH
21405: CALL_OW 69
21409: PUSH
21410: FOR_IN
21411: IFFALSE 21427
// begin SetClass ( i , 1 ) ;
21413: LD_VAR 0 1
21417: PPUSH
21418: LD_INT 1
21420: PPUSH
21421: CALL_OW 336
// end ;
21425: GO 21410
21427: POP
21428: POP
// end ;
21429: PPOPN 1
21431: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21432: LD_EXP 53
21436: PUSH
21437: LD_EXP 57
21441: AND
21442: PUSH
21443: LD_OWVAR 65
21447: PUSH
21448: LD_INT 7
21450: LESS
21451: AND
21452: IFFALSE 21466
21454: GO 21456
21456: DISABLE
// begin enable ;
21457: ENABLE
// game_speed := 7 ;
21458: LD_ADDR_OWVAR 65
21462: PUSH
21463: LD_INT 7
21465: ST_TO_ADDR
// end ;
21466: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21467: LD_EXP 53
21471: PUSH
21472: LD_EXP 60
21476: AND
21477: IFFALSE 21679
21479: GO 21481
21481: DISABLE
21482: LD_INT 0
21484: PPUSH
21485: PPUSH
21486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21487: LD_ADDR_VAR 0 3
21491: PUSH
21492: LD_INT 81
21494: PUSH
21495: LD_OWVAR 2
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 21
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PPUSH
21518: CALL_OW 69
21522: ST_TO_ADDR
// if not tmp then
21523: LD_VAR 0 3
21527: NOT
21528: IFFALSE 21532
// exit ;
21530: GO 21679
// if tmp > 5 then
21532: LD_VAR 0 3
21536: PUSH
21537: LD_INT 5
21539: GREATER
21540: IFFALSE 21552
// k := 5 else
21542: LD_ADDR_VAR 0 2
21546: PUSH
21547: LD_INT 5
21549: ST_TO_ADDR
21550: GO 21562
// k := tmp ;
21552: LD_ADDR_VAR 0 2
21556: PUSH
21557: LD_VAR 0 3
21561: ST_TO_ADDR
// for i := 1 to k do
21562: LD_ADDR_VAR 0 1
21566: PUSH
21567: DOUBLE
21568: LD_INT 1
21570: DEC
21571: ST_TO_ADDR
21572: LD_VAR 0 2
21576: PUSH
21577: FOR_TO
21578: IFFALSE 21677
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21580: LD_VAR 0 3
21584: PUSH
21585: LD_VAR 0 1
21589: ARRAY
21590: PPUSH
21591: LD_VAR 0 1
21595: PUSH
21596: LD_INT 4
21598: MOD
21599: PUSH
21600: LD_INT 1
21602: PLUS
21603: PPUSH
21604: CALL_OW 259
21608: PUSH
21609: LD_INT 10
21611: LESS
21612: IFFALSE 21675
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21614: LD_VAR 0 3
21618: PUSH
21619: LD_VAR 0 1
21623: ARRAY
21624: PPUSH
21625: LD_VAR 0 1
21629: PUSH
21630: LD_INT 4
21632: MOD
21633: PUSH
21634: LD_INT 1
21636: PLUS
21637: PPUSH
21638: LD_VAR 0 3
21642: PUSH
21643: LD_VAR 0 1
21647: ARRAY
21648: PPUSH
21649: LD_VAR 0 1
21653: PUSH
21654: LD_INT 4
21656: MOD
21657: PUSH
21658: LD_INT 1
21660: PLUS
21661: PPUSH
21662: CALL_OW 259
21666: PUSH
21667: LD_INT 1
21669: PLUS
21670: PPUSH
21671: CALL_OW 237
21675: GO 21577
21677: POP
21678: POP
// end ;
21679: PPOPN 3
21681: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21682: LD_EXP 53
21686: PUSH
21687: LD_EXP 61
21691: AND
21692: IFFALSE 21712
21694: GO 21696
21696: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21697: LD_INT 4
21699: PPUSH
21700: LD_OWVAR 2
21704: PPUSH
21705: LD_INT 0
21707: PPUSH
21708: CALL_OW 324
21712: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21713: LD_EXP 53
21717: PUSH
21718: LD_EXP 90
21722: AND
21723: IFFALSE 21743
21725: GO 21727
21727: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21728: LD_INT 19
21730: PPUSH
21731: LD_OWVAR 2
21735: PPUSH
21736: LD_INT 0
21738: PPUSH
21739: CALL_OW 324
21743: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21744: LD_EXP 53
21748: PUSH
21749: LD_EXP 62
21753: AND
21754: IFFALSE 21856
21756: GO 21758
21758: DISABLE
21759: LD_INT 0
21761: PPUSH
21762: PPUSH
// begin enable ;
21763: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21764: LD_ADDR_VAR 0 2
21768: PUSH
21769: LD_INT 22
21771: PUSH
21772: LD_OWVAR 2
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 2
21783: PUSH
21784: LD_INT 34
21786: PUSH
21787: LD_INT 11
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 34
21796: PUSH
21797: LD_INT 30
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PPUSH
21813: CALL_OW 69
21817: ST_TO_ADDR
// if not tmp then
21818: LD_VAR 0 2
21822: NOT
21823: IFFALSE 21827
// exit ;
21825: GO 21856
// for i in tmp do
21827: LD_ADDR_VAR 0 1
21831: PUSH
21832: LD_VAR 0 2
21836: PUSH
21837: FOR_IN
21838: IFFALSE 21854
// begin SetLives ( i , 0 ) ;
21840: LD_VAR 0 1
21844: PPUSH
21845: LD_INT 0
21847: PPUSH
21848: CALL_OW 234
// end ;
21852: GO 21837
21854: POP
21855: POP
// end ;
21856: PPOPN 2
21858: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21859: LD_EXP 53
21863: PUSH
21864: LD_EXP 63
21868: AND
21869: IFFALSE 21889
21871: GO 21873
21873: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21874: LD_INT 32
21876: PPUSH
21877: LD_OWVAR 2
21881: PPUSH
21882: LD_INT 0
21884: PPUSH
21885: CALL_OW 324
21889: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21890: LD_EXP 53
21894: PUSH
21895: LD_EXP 64
21899: AND
21900: IFFALSE 22081
21902: GO 21904
21904: DISABLE
21905: LD_INT 0
21907: PPUSH
21908: PPUSH
21909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21910: LD_ADDR_VAR 0 2
21914: PUSH
21915: LD_INT 22
21917: PUSH
21918: LD_OWVAR 2
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 33
21929: PUSH
21930: LD_INT 3
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PPUSH
21941: CALL_OW 69
21945: ST_TO_ADDR
// if not tmp then
21946: LD_VAR 0 2
21950: NOT
21951: IFFALSE 21955
// exit ;
21953: GO 22081
// side := 0 ;
21955: LD_ADDR_VAR 0 3
21959: PUSH
21960: LD_INT 0
21962: ST_TO_ADDR
// for i := 1 to 8 do
21963: LD_ADDR_VAR 0 1
21967: PUSH
21968: DOUBLE
21969: LD_INT 1
21971: DEC
21972: ST_TO_ADDR
21973: LD_INT 8
21975: PUSH
21976: FOR_TO
21977: IFFALSE 22025
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21979: LD_OWVAR 2
21983: PUSH
21984: LD_VAR 0 1
21988: NONEQUAL
21989: PUSH
21990: LD_OWVAR 2
21994: PPUSH
21995: LD_VAR 0 1
21999: PPUSH
22000: CALL_OW 81
22004: PUSH
22005: LD_INT 2
22007: EQUAL
22008: AND
22009: IFFALSE 22023
// begin side := i ;
22011: LD_ADDR_VAR 0 3
22015: PUSH
22016: LD_VAR 0 1
22020: ST_TO_ADDR
// break ;
22021: GO 22025
// end ;
22023: GO 21976
22025: POP
22026: POP
// if not side then
22027: LD_VAR 0 3
22031: NOT
22032: IFFALSE 22036
// exit ;
22034: GO 22081
// for i := 1 to tmp do
22036: LD_ADDR_VAR 0 1
22040: PUSH
22041: DOUBLE
22042: LD_INT 1
22044: DEC
22045: ST_TO_ADDR
22046: LD_VAR 0 2
22050: PUSH
22051: FOR_TO
22052: IFFALSE 22079
// if Prob ( 60 ) then
22054: LD_INT 60
22056: PPUSH
22057: CALL_OW 13
22061: IFFALSE 22077
// SetSide ( i , side ) ;
22063: LD_VAR 0 1
22067: PPUSH
22068: LD_VAR 0 3
22072: PPUSH
22073: CALL_OW 235
22077: GO 22051
22079: POP
22080: POP
// end ;
22081: PPOPN 3
22083: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22084: LD_EXP 53
22088: PUSH
22089: LD_EXP 66
22093: AND
22094: IFFALSE 22213
22096: GO 22098
22098: DISABLE
22099: LD_INT 0
22101: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22102: LD_ADDR_VAR 0 1
22106: PUSH
22107: LD_INT 22
22109: PUSH
22110: LD_OWVAR 2
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 21
22121: PUSH
22122: LD_INT 1
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 3
22131: PUSH
22132: LD_INT 23
22134: PUSH
22135: LD_INT 0
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: PPUSH
22151: CALL_OW 69
22155: PUSH
22156: FOR_IN
22157: IFFALSE 22211
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22159: LD_VAR 0 1
22163: PPUSH
22164: CALL_OW 257
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: LD_INT 3
22177: PUSH
22178: LD_INT 4
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: IN
22187: IFFALSE 22209
// SetClass ( un , rand ( 1 , 4 ) ) ;
22189: LD_VAR 0 1
22193: PPUSH
22194: LD_INT 1
22196: PPUSH
22197: LD_INT 4
22199: PPUSH
22200: CALL_OW 12
22204: PPUSH
22205: CALL_OW 336
22209: GO 22156
22211: POP
22212: POP
// end ;
22213: PPOPN 1
22215: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22216: LD_EXP 53
22220: PUSH
22221: LD_EXP 65
22225: AND
22226: IFFALSE 22305
22228: GO 22230
22230: DISABLE
22231: LD_INT 0
22233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22234: LD_ADDR_VAR 0 1
22238: PUSH
22239: LD_INT 22
22241: PUSH
22242: LD_OWVAR 2
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 21
22253: PUSH
22254: LD_INT 3
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PPUSH
22265: CALL_OW 69
22269: ST_TO_ADDR
// if not tmp then
22270: LD_VAR 0 1
22274: NOT
22275: IFFALSE 22279
// exit ;
22277: GO 22305
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22279: LD_VAR 0 1
22283: PUSH
22284: LD_INT 1
22286: PPUSH
22287: LD_VAR 0 1
22291: PPUSH
22292: CALL_OW 12
22296: ARRAY
22297: PPUSH
22298: LD_INT 100
22300: PPUSH
22301: CALL_OW 234
// end ;
22305: PPOPN 1
22307: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22308: LD_EXP 53
22312: PUSH
22313: LD_EXP 67
22317: AND
22318: IFFALSE 22416
22320: GO 22322
22322: DISABLE
22323: LD_INT 0
22325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22326: LD_ADDR_VAR 0 1
22330: PUSH
22331: LD_INT 22
22333: PUSH
22334: LD_OWVAR 2
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 21
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PPUSH
22357: CALL_OW 69
22361: ST_TO_ADDR
// if not tmp then
22362: LD_VAR 0 1
22366: NOT
22367: IFFALSE 22371
// exit ;
22369: GO 22416
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22371: LD_VAR 0 1
22375: PUSH
22376: LD_INT 1
22378: PPUSH
22379: LD_VAR 0 1
22383: PPUSH
22384: CALL_OW 12
22388: ARRAY
22389: PPUSH
22390: LD_INT 1
22392: PPUSH
22393: LD_INT 4
22395: PPUSH
22396: CALL_OW 12
22400: PPUSH
22401: LD_INT 3000
22403: PPUSH
22404: LD_INT 9000
22406: PPUSH
22407: CALL_OW 12
22411: PPUSH
22412: CALL_OW 492
// end ;
22416: PPOPN 1
22418: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22419: LD_EXP 53
22423: PUSH
22424: LD_EXP 68
22428: AND
22429: IFFALSE 22449
22431: GO 22433
22433: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22434: LD_INT 1
22436: PPUSH
22437: LD_OWVAR 2
22441: PPUSH
22442: LD_INT 0
22444: PPUSH
22445: CALL_OW 324
22449: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22450: LD_EXP 53
22454: PUSH
22455: LD_EXP 69
22459: AND
22460: IFFALSE 22543
22462: GO 22464
22464: DISABLE
22465: LD_INT 0
22467: PPUSH
22468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22469: LD_ADDR_VAR 0 2
22473: PUSH
22474: LD_INT 22
22476: PUSH
22477: LD_OWVAR 2
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 21
22488: PUSH
22489: LD_INT 3
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PPUSH
22500: CALL_OW 69
22504: ST_TO_ADDR
// if not tmp then
22505: LD_VAR 0 2
22509: NOT
22510: IFFALSE 22514
// exit ;
22512: GO 22543
// for i in tmp do
22514: LD_ADDR_VAR 0 1
22518: PUSH
22519: LD_VAR 0 2
22523: PUSH
22524: FOR_IN
22525: IFFALSE 22541
// SetBLevel ( i , 10 ) ;
22527: LD_VAR 0 1
22531: PPUSH
22532: LD_INT 10
22534: PPUSH
22535: CALL_OW 241
22539: GO 22524
22541: POP
22542: POP
// end ;
22543: PPOPN 2
22545: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22546: LD_EXP 53
22550: PUSH
22551: LD_EXP 70
22555: AND
22556: IFFALSE 22667
22558: GO 22560
22560: DISABLE
22561: LD_INT 0
22563: PPUSH
22564: PPUSH
22565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22566: LD_ADDR_VAR 0 3
22570: PUSH
22571: LD_INT 22
22573: PUSH
22574: LD_OWVAR 2
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 25
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PPUSH
22597: CALL_OW 69
22601: ST_TO_ADDR
// if not tmp then
22602: LD_VAR 0 3
22606: NOT
22607: IFFALSE 22611
// exit ;
22609: GO 22667
// un := tmp [ rand ( 1 , tmp ) ] ;
22611: LD_ADDR_VAR 0 2
22615: PUSH
22616: LD_VAR 0 3
22620: PUSH
22621: LD_INT 1
22623: PPUSH
22624: LD_VAR 0 3
22628: PPUSH
22629: CALL_OW 12
22633: ARRAY
22634: ST_TO_ADDR
// if Crawls ( un ) then
22635: LD_VAR 0 2
22639: PPUSH
22640: CALL_OW 318
22644: IFFALSE 22655
// ComWalk ( un ) ;
22646: LD_VAR 0 2
22650: PPUSH
22651: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22655: LD_VAR 0 2
22659: PPUSH
22660: LD_INT 5
22662: PPUSH
22663: CALL_OW 336
// end ;
22667: PPOPN 3
22669: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
22670: LD_EXP 53
22674: PUSH
22675: LD_EXP 71
22679: AND
22680: PUSH
22681: LD_OWVAR 67
22685: PUSH
22686: LD_INT 3
22688: LESS
22689: AND
22690: IFFALSE 22709
22692: GO 22694
22694: DISABLE
// Difficulty := Difficulty + 1 ;
22695: LD_ADDR_OWVAR 67
22699: PUSH
22700: LD_OWVAR 67
22704: PUSH
22705: LD_INT 1
22707: PLUS
22708: ST_TO_ADDR
22709: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22710: LD_EXP 53
22714: PUSH
22715: LD_EXP 72
22719: AND
22720: IFFALSE 22823
22722: GO 22724
22724: DISABLE
22725: LD_INT 0
22727: PPUSH
// begin for i := 1 to 5 do
22728: LD_ADDR_VAR 0 1
22732: PUSH
22733: DOUBLE
22734: LD_INT 1
22736: DEC
22737: ST_TO_ADDR
22738: LD_INT 5
22740: PUSH
22741: FOR_TO
22742: IFFALSE 22821
// begin uc_nation := nation_nature ;
22744: LD_ADDR_OWVAR 21
22748: PUSH
22749: LD_INT 0
22751: ST_TO_ADDR
// uc_side := 0 ;
22752: LD_ADDR_OWVAR 20
22756: PUSH
22757: LD_INT 0
22759: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22760: LD_ADDR_OWVAR 29
22764: PUSH
22765: LD_INT 12
22767: PUSH
22768: LD_INT 12
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: ST_TO_ADDR
// hc_agressivity := 20 ;
22775: LD_ADDR_OWVAR 35
22779: PUSH
22780: LD_INT 20
22782: ST_TO_ADDR
// hc_class := class_tiger ;
22783: LD_ADDR_OWVAR 28
22787: PUSH
22788: LD_INT 14
22790: ST_TO_ADDR
// hc_gallery :=  ;
22791: LD_ADDR_OWVAR 33
22795: PUSH
22796: LD_STRING 
22798: ST_TO_ADDR
// hc_name :=  ;
22799: LD_ADDR_OWVAR 26
22803: PUSH
22804: LD_STRING 
22806: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22807: CALL_OW 44
22811: PPUSH
22812: LD_INT 0
22814: PPUSH
22815: CALL_OW 51
// end ;
22819: GO 22741
22821: POP
22822: POP
// end ;
22823: PPOPN 1
22825: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22826: LD_EXP 53
22830: PUSH
22831: LD_EXP 73
22835: AND
22836: IFFALSE 22845
22838: GO 22840
22840: DISABLE
// StreamSibBomb ;
22841: CALL 22846 0 0
22845: END
// export function StreamSibBomb ; var i , x , y ; begin
22846: LD_INT 0
22848: PPUSH
22849: PPUSH
22850: PPUSH
22851: PPUSH
// result := false ;
22852: LD_ADDR_VAR 0 1
22856: PUSH
22857: LD_INT 0
22859: ST_TO_ADDR
// for i := 1 to 16 do
22860: LD_ADDR_VAR 0 2
22864: PUSH
22865: DOUBLE
22866: LD_INT 1
22868: DEC
22869: ST_TO_ADDR
22870: LD_INT 16
22872: PUSH
22873: FOR_TO
22874: IFFALSE 23073
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22876: LD_ADDR_VAR 0 3
22880: PUSH
22881: LD_INT 10
22883: PUSH
22884: LD_INT 20
22886: PUSH
22887: LD_INT 30
22889: PUSH
22890: LD_INT 40
22892: PUSH
22893: LD_INT 50
22895: PUSH
22896: LD_INT 60
22898: PUSH
22899: LD_INT 70
22901: PUSH
22902: LD_INT 80
22904: PUSH
22905: LD_INT 90
22907: PUSH
22908: LD_INT 100
22910: PUSH
22911: LD_INT 110
22913: PUSH
22914: LD_INT 120
22916: PUSH
22917: LD_INT 130
22919: PUSH
22920: LD_INT 140
22922: PUSH
22923: LD_INT 150
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 1
22945: PPUSH
22946: LD_INT 15
22948: PPUSH
22949: CALL_OW 12
22953: ARRAY
22954: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22955: LD_ADDR_VAR 0 4
22959: PUSH
22960: LD_INT 10
22962: PUSH
22963: LD_INT 20
22965: PUSH
22966: LD_INT 30
22968: PUSH
22969: LD_INT 40
22971: PUSH
22972: LD_INT 50
22974: PUSH
22975: LD_INT 60
22977: PUSH
22978: LD_INT 70
22980: PUSH
22981: LD_INT 80
22983: PUSH
22984: LD_INT 90
22986: PUSH
22987: LD_INT 100
22989: PUSH
22990: LD_INT 110
22992: PUSH
22993: LD_INT 120
22995: PUSH
22996: LD_INT 130
22998: PUSH
22999: LD_INT 140
23001: PUSH
23002: LD_INT 150
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: PPUSH
23025: LD_INT 15
23027: PPUSH
23028: CALL_OW 12
23032: ARRAY
23033: ST_TO_ADDR
// if ValidHex ( x , y ) then
23034: LD_VAR 0 3
23038: PPUSH
23039: LD_VAR 0 4
23043: PPUSH
23044: CALL_OW 488
23048: IFFALSE 23071
// begin result := [ x , y ] ;
23050: LD_ADDR_VAR 0 1
23054: PUSH
23055: LD_VAR 0 3
23059: PUSH
23060: LD_VAR 0 4
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: ST_TO_ADDR
// break ;
23069: GO 23073
// end ; end ;
23071: GO 22873
23073: POP
23074: POP
// if result then
23075: LD_VAR 0 1
23079: IFFALSE 23139
// begin ToLua ( playSibBomb() ) ;
23081: LD_STRING playSibBomb()
23083: PPUSH
23084: CALL_OW 559
// wait ( 0 0$14 ) ;
23088: LD_INT 490
23090: PPUSH
23091: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23095: LD_VAR 0 1
23099: PUSH
23100: LD_INT 1
23102: ARRAY
23103: PPUSH
23104: LD_VAR 0 1
23108: PUSH
23109: LD_INT 2
23111: ARRAY
23112: PPUSH
23113: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23117: LD_VAR 0 1
23121: PUSH
23122: LD_INT 1
23124: ARRAY
23125: PPUSH
23126: LD_VAR 0 1
23130: PUSH
23131: LD_INT 2
23133: ARRAY
23134: PPUSH
23135: CALL_OW 429
// end ; end ;
23139: LD_VAR 0 1
23143: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23144: LD_EXP 53
23148: PUSH
23149: LD_EXP 75
23153: AND
23154: IFFALSE 23166
23156: GO 23158
23158: DISABLE
// YouLost (  ) ;
23159: LD_STRING 
23161: PPUSH
23162: CALL_OW 104
23166: END
// every 0 0$1 trigger StreamModeActive and sFog do
23167: LD_EXP 53
23171: PUSH
23172: LD_EXP 74
23176: AND
23177: IFFALSE 23191
23179: GO 23181
23181: DISABLE
// FogOff ( your_side ) ;
23182: LD_OWVAR 2
23186: PPUSH
23187: CALL_OW 344
23191: END
// every 0 0$1 trigger StreamModeActive and sSun do
23192: LD_EXP 53
23196: PUSH
23197: LD_EXP 76
23201: AND
23202: IFFALSE 23230
23204: GO 23206
23206: DISABLE
// begin solar_recharge_percent := 0 ;
23207: LD_ADDR_OWVAR 79
23211: PUSH
23212: LD_INT 0
23214: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23215: LD_INT 10500
23217: PPUSH
23218: CALL_OW 67
// solar_recharge_percent := 100 ;
23222: LD_ADDR_OWVAR 79
23226: PUSH
23227: LD_INT 100
23229: ST_TO_ADDR
// end ;
23230: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23231: LD_EXP 53
23235: PUSH
23236: LD_EXP 77
23240: AND
23241: IFFALSE 23480
23243: GO 23245
23245: DISABLE
23246: LD_INT 0
23248: PPUSH
23249: PPUSH
23250: PPUSH
// begin tmp := [ ] ;
23251: LD_ADDR_VAR 0 3
23255: PUSH
23256: EMPTY
23257: ST_TO_ADDR
// for i := 1 to 6 do
23258: LD_ADDR_VAR 0 1
23262: PUSH
23263: DOUBLE
23264: LD_INT 1
23266: DEC
23267: ST_TO_ADDR
23268: LD_INT 6
23270: PUSH
23271: FOR_TO
23272: IFFALSE 23377
// begin uc_nation := nation_nature ;
23274: LD_ADDR_OWVAR 21
23278: PUSH
23279: LD_INT 0
23281: ST_TO_ADDR
// uc_side := 0 ;
23282: LD_ADDR_OWVAR 20
23286: PUSH
23287: LD_INT 0
23289: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23290: LD_ADDR_OWVAR 29
23294: PUSH
23295: LD_INT 12
23297: PUSH
23298: LD_INT 12
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: ST_TO_ADDR
// hc_agressivity := 20 ;
23305: LD_ADDR_OWVAR 35
23309: PUSH
23310: LD_INT 20
23312: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23313: LD_ADDR_OWVAR 28
23317: PUSH
23318: LD_INT 17
23320: ST_TO_ADDR
// hc_gallery :=  ;
23321: LD_ADDR_OWVAR 33
23325: PUSH
23326: LD_STRING 
23328: ST_TO_ADDR
// hc_name :=  ;
23329: LD_ADDR_OWVAR 26
23333: PUSH
23334: LD_STRING 
23336: ST_TO_ADDR
// un := CreateHuman ;
23337: LD_ADDR_VAR 0 2
23341: PUSH
23342: CALL_OW 44
23346: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23347: LD_VAR 0 2
23351: PPUSH
23352: LD_INT 1
23354: PPUSH
23355: CALL_OW 51
// tmp := tmp ^ un ;
23359: LD_ADDR_VAR 0 3
23363: PUSH
23364: LD_VAR 0 3
23368: PUSH
23369: LD_VAR 0 2
23373: ADD
23374: ST_TO_ADDR
// end ;
23375: GO 23271
23377: POP
23378: POP
// repeat wait ( 0 0$1 ) ;
23379: LD_INT 35
23381: PPUSH
23382: CALL_OW 67
// for un in tmp do
23386: LD_ADDR_VAR 0 2
23390: PUSH
23391: LD_VAR 0 3
23395: PUSH
23396: FOR_IN
23397: IFFALSE 23471
// begin if IsDead ( un ) then
23399: LD_VAR 0 2
23403: PPUSH
23404: CALL_OW 301
23408: IFFALSE 23428
// begin tmp := tmp diff un ;
23410: LD_ADDR_VAR 0 3
23414: PUSH
23415: LD_VAR 0 3
23419: PUSH
23420: LD_VAR 0 2
23424: DIFF
23425: ST_TO_ADDR
// continue ;
23426: GO 23396
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23428: LD_VAR 0 2
23432: PPUSH
23433: LD_INT 3
23435: PUSH
23436: LD_INT 22
23438: PUSH
23439: LD_INT 0
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PPUSH
23450: CALL_OW 69
23454: PPUSH
23455: LD_VAR 0 2
23459: PPUSH
23460: CALL_OW 74
23464: PPUSH
23465: CALL_OW 115
// end ;
23469: GO 23396
23471: POP
23472: POP
// until not tmp ;
23473: LD_VAR 0 3
23477: NOT
23478: IFFALSE 23379
// end ;
23480: PPOPN 3
23482: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23483: LD_EXP 53
23487: PUSH
23488: LD_EXP 78
23492: AND
23493: IFFALSE 23547
23495: GO 23497
23497: DISABLE
// begin ToLua ( displayTroll(); ) ;
23498: LD_STRING displayTroll();
23500: PPUSH
23501: CALL_OW 559
// wait ( 3 3$00 ) ;
23505: LD_INT 6300
23507: PPUSH
23508: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23512: LD_STRING hideTroll();
23514: PPUSH
23515: CALL_OW 559
// wait ( 1 1$00 ) ;
23519: LD_INT 2100
23521: PPUSH
23522: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23526: LD_STRING displayTroll();
23528: PPUSH
23529: CALL_OW 559
// wait ( 1 1$00 ) ;
23533: LD_INT 2100
23535: PPUSH
23536: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23540: LD_STRING hideTroll();
23542: PPUSH
23543: CALL_OW 559
// end ;
23547: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23548: LD_EXP 53
23552: PUSH
23553: LD_EXP 79
23557: AND
23558: IFFALSE 23621
23560: GO 23562
23562: DISABLE
23563: LD_INT 0
23565: PPUSH
// begin p := 0 ;
23566: LD_ADDR_VAR 0 1
23570: PUSH
23571: LD_INT 0
23573: ST_TO_ADDR
// repeat game_speed := 1 ;
23574: LD_ADDR_OWVAR 65
23578: PUSH
23579: LD_INT 1
23581: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23582: LD_INT 35
23584: PPUSH
23585: CALL_OW 67
// p := p + 1 ;
23589: LD_ADDR_VAR 0 1
23593: PUSH
23594: LD_VAR 0 1
23598: PUSH
23599: LD_INT 1
23601: PLUS
23602: ST_TO_ADDR
// until p >= 60 ;
23603: LD_VAR 0 1
23607: PUSH
23608: LD_INT 60
23610: GREATEREQUAL
23611: IFFALSE 23574
// game_speed := 4 ;
23613: LD_ADDR_OWVAR 65
23617: PUSH
23618: LD_INT 4
23620: ST_TO_ADDR
// end ;
23621: PPOPN 1
23623: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23624: LD_EXP 53
23628: PUSH
23629: LD_EXP 80
23633: AND
23634: IFFALSE 23780
23636: GO 23638
23638: DISABLE
23639: LD_INT 0
23641: PPUSH
23642: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23643: LD_ADDR_VAR 0 1
23647: PUSH
23648: LD_INT 22
23650: PUSH
23651: LD_OWVAR 2
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: LD_INT 30
23665: PUSH
23666: LD_INT 0
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 30
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: LIST
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PPUSH
23692: CALL_OW 69
23696: ST_TO_ADDR
// if not depot then
23697: LD_VAR 0 1
23701: NOT
23702: IFFALSE 23706
// exit ;
23704: GO 23780
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23706: LD_ADDR_VAR 0 2
23710: PUSH
23711: LD_VAR 0 1
23715: PUSH
23716: LD_INT 1
23718: PPUSH
23719: LD_VAR 0 1
23723: PPUSH
23724: CALL_OW 12
23728: ARRAY
23729: PPUSH
23730: CALL_OW 274
23734: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23735: LD_VAR 0 2
23739: PPUSH
23740: LD_INT 1
23742: PPUSH
23743: LD_INT 0
23745: PPUSH
23746: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23750: LD_VAR 0 2
23754: PPUSH
23755: LD_INT 2
23757: PPUSH
23758: LD_INT 0
23760: PPUSH
23761: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23765: LD_VAR 0 2
23769: PPUSH
23770: LD_INT 3
23772: PPUSH
23773: LD_INT 0
23775: PPUSH
23776: CALL_OW 277
// end ;
23780: PPOPN 2
23782: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23783: LD_EXP 53
23787: PUSH
23788: LD_EXP 81
23792: AND
23793: IFFALSE 23890
23795: GO 23797
23797: DISABLE
23798: LD_INT 0
23800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23801: LD_ADDR_VAR 0 1
23805: PUSH
23806: LD_INT 22
23808: PUSH
23809: LD_OWVAR 2
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 21
23820: PUSH
23821: LD_INT 1
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 3
23830: PUSH
23831: LD_INT 23
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: PPUSH
23850: CALL_OW 69
23854: ST_TO_ADDR
// if not tmp then
23855: LD_VAR 0 1
23859: NOT
23860: IFFALSE 23864
// exit ;
23862: GO 23890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23864: LD_VAR 0 1
23868: PUSH
23869: LD_INT 1
23871: PPUSH
23872: LD_VAR 0 1
23876: PPUSH
23877: CALL_OW 12
23881: ARRAY
23882: PPUSH
23883: LD_INT 200
23885: PPUSH
23886: CALL_OW 234
// end ;
23890: PPOPN 1
23892: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23893: LD_EXP 53
23897: PUSH
23898: LD_EXP 82
23902: AND
23903: IFFALSE 23982
23905: GO 23907
23907: DISABLE
23908: LD_INT 0
23910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23911: LD_ADDR_VAR 0 1
23915: PUSH
23916: LD_INT 22
23918: PUSH
23919: LD_OWVAR 2
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 21
23930: PUSH
23931: LD_INT 2
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PPUSH
23942: CALL_OW 69
23946: ST_TO_ADDR
// if not tmp then
23947: LD_VAR 0 1
23951: NOT
23952: IFFALSE 23956
// exit ;
23954: GO 23982
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23956: LD_VAR 0 1
23960: PUSH
23961: LD_INT 1
23963: PPUSH
23964: LD_VAR 0 1
23968: PPUSH
23969: CALL_OW 12
23973: ARRAY
23974: PPUSH
23975: LD_INT 60
23977: PPUSH
23978: CALL_OW 234
// end ;
23982: PPOPN 1
23984: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23985: LD_EXP 53
23989: PUSH
23990: LD_EXP 83
23994: AND
23995: IFFALSE 24094
23997: GO 23999
23999: DISABLE
24000: LD_INT 0
24002: PPUSH
24003: PPUSH
// begin enable ;
24004: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24005: LD_ADDR_VAR 0 1
24009: PUSH
24010: LD_INT 22
24012: PUSH
24013: LD_OWVAR 2
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 61
24024: PUSH
24025: EMPTY
24026: LIST
24027: PUSH
24028: LD_INT 33
24030: PUSH
24031: LD_INT 2
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: LIST
24042: PPUSH
24043: CALL_OW 69
24047: ST_TO_ADDR
// if not tmp then
24048: LD_VAR 0 1
24052: NOT
24053: IFFALSE 24057
// exit ;
24055: GO 24094
// for i in tmp do
24057: LD_ADDR_VAR 0 2
24061: PUSH
24062: LD_VAR 0 1
24066: PUSH
24067: FOR_IN
24068: IFFALSE 24092
// if IsControledBy ( i ) then
24070: LD_VAR 0 2
24074: PPUSH
24075: CALL_OW 312
24079: IFFALSE 24090
// ComUnlink ( i ) ;
24081: LD_VAR 0 2
24085: PPUSH
24086: CALL_OW 136
24090: GO 24067
24092: POP
24093: POP
// end ;
24094: PPOPN 2
24096: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24097: LD_EXP 53
24101: PUSH
24102: LD_EXP 84
24106: AND
24107: IFFALSE 24247
24109: GO 24111
24111: DISABLE
24112: LD_INT 0
24114: PPUSH
24115: PPUSH
// begin ToLua ( displayPowell(); ) ;
24116: LD_STRING displayPowell();
24118: PPUSH
24119: CALL_OW 559
// uc_side := 0 ;
24123: LD_ADDR_OWVAR 20
24127: PUSH
24128: LD_INT 0
24130: ST_TO_ADDR
// uc_nation := 2 ;
24131: LD_ADDR_OWVAR 21
24135: PUSH
24136: LD_INT 2
24138: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24139: LD_ADDR_OWVAR 37
24143: PUSH
24144: LD_INT 14
24146: ST_TO_ADDR
// vc_engine := engine_siberite ;
24147: LD_ADDR_OWVAR 39
24151: PUSH
24152: LD_INT 3
24154: ST_TO_ADDR
// vc_control := control_apeman ;
24155: LD_ADDR_OWVAR 38
24159: PUSH
24160: LD_INT 5
24162: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24163: LD_ADDR_OWVAR 40
24167: PUSH
24168: LD_INT 29
24170: ST_TO_ADDR
// un := CreateVehicle ;
24171: LD_ADDR_VAR 0 2
24175: PUSH
24176: CALL_OW 45
24180: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24181: LD_VAR 0 2
24185: PPUSH
24186: LD_INT 1
24188: PPUSH
24189: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24193: LD_INT 35
24195: PPUSH
24196: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24200: LD_VAR 0 2
24204: PPUSH
24205: LD_INT 22
24207: PUSH
24208: LD_OWVAR 2
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PPUSH
24217: CALL_OW 69
24221: PPUSH
24222: LD_VAR 0 2
24226: PPUSH
24227: CALL_OW 74
24231: PPUSH
24232: CALL_OW 115
// until IsDead ( un ) ;
24236: LD_VAR 0 2
24240: PPUSH
24241: CALL_OW 301
24245: IFFALSE 24193
// end ;
24247: PPOPN 2
24249: END
// every 0 0$1 trigger StreamModeActive and sStu do
24250: LD_EXP 53
24254: PUSH
24255: LD_EXP 92
24259: AND
24260: IFFALSE 24276
24262: GO 24264
24264: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24265: LD_STRING displayStucuk();
24267: PPUSH
24268: CALL_OW 559
// ResetFog ;
24272: CALL_OW 335
// end ;
24276: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24277: LD_EXP 53
24281: PUSH
24282: LD_EXP 85
24286: AND
24287: IFFALSE 24428
24289: GO 24291
24291: DISABLE
24292: LD_INT 0
24294: PPUSH
24295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24296: LD_ADDR_VAR 0 2
24300: PUSH
24301: LD_INT 22
24303: PUSH
24304: LD_OWVAR 2
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 21
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PPUSH
24327: CALL_OW 69
24331: ST_TO_ADDR
// if not tmp then
24332: LD_VAR 0 2
24336: NOT
24337: IFFALSE 24341
// exit ;
24339: GO 24428
// un := tmp [ rand ( 1 , tmp ) ] ;
24341: LD_ADDR_VAR 0 1
24345: PUSH
24346: LD_VAR 0 2
24350: PUSH
24351: LD_INT 1
24353: PPUSH
24354: LD_VAR 0 2
24358: PPUSH
24359: CALL_OW 12
24363: ARRAY
24364: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24365: LD_VAR 0 1
24369: PPUSH
24370: LD_INT 0
24372: PPUSH
24373: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24377: LD_VAR 0 1
24381: PPUSH
24382: LD_OWVAR 3
24386: PUSH
24387: LD_VAR 0 1
24391: DIFF
24392: PPUSH
24393: LD_VAR 0 1
24397: PPUSH
24398: CALL_OW 74
24402: PPUSH
24403: CALL_OW 115
// wait ( 0 0$20 ) ;
24407: LD_INT 700
24409: PPUSH
24410: CALL_OW 67
// SetSide ( un , your_side ) ;
24414: LD_VAR 0 1
24418: PPUSH
24419: LD_OWVAR 2
24423: PPUSH
24424: CALL_OW 235
// end ;
24428: PPOPN 2
24430: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24431: LD_EXP 53
24435: PUSH
24436: LD_EXP 86
24440: AND
24441: IFFALSE 24547
24443: GO 24445
24445: DISABLE
24446: LD_INT 0
24448: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24449: LD_ADDR_VAR 0 1
24453: PUSH
24454: LD_INT 22
24456: PUSH
24457: LD_OWVAR 2
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 2
24468: PUSH
24469: LD_INT 30
24471: PUSH
24472: LD_INT 0
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 30
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PPUSH
24498: CALL_OW 69
24502: ST_TO_ADDR
// if not depot then
24503: LD_VAR 0 1
24507: NOT
24508: IFFALSE 24512
// exit ;
24510: GO 24547
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24512: LD_VAR 0 1
24516: PUSH
24517: LD_INT 1
24519: ARRAY
24520: PPUSH
24521: CALL_OW 250
24525: PPUSH
24526: LD_VAR 0 1
24530: PUSH
24531: LD_INT 1
24533: ARRAY
24534: PPUSH
24535: CALL_OW 251
24539: PPUSH
24540: LD_INT 70
24542: PPUSH
24543: CALL_OW 495
// end ;
24547: PPOPN 1
24549: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24550: LD_EXP 53
24554: PUSH
24555: LD_EXP 87
24559: AND
24560: IFFALSE 24771
24562: GO 24564
24564: DISABLE
24565: LD_INT 0
24567: PPUSH
24568: PPUSH
24569: PPUSH
24570: PPUSH
24571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24572: LD_ADDR_VAR 0 5
24576: PUSH
24577: LD_INT 22
24579: PUSH
24580: LD_OWVAR 2
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 21
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PPUSH
24603: CALL_OW 69
24607: ST_TO_ADDR
// if not tmp then
24608: LD_VAR 0 5
24612: NOT
24613: IFFALSE 24617
// exit ;
24615: GO 24771
// for i in tmp do
24617: LD_ADDR_VAR 0 1
24621: PUSH
24622: LD_VAR 0 5
24626: PUSH
24627: FOR_IN
24628: IFFALSE 24769
// begin d := rand ( 0 , 5 ) ;
24630: LD_ADDR_VAR 0 4
24634: PUSH
24635: LD_INT 0
24637: PPUSH
24638: LD_INT 5
24640: PPUSH
24641: CALL_OW 12
24645: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24646: LD_ADDR_VAR 0 2
24650: PUSH
24651: LD_VAR 0 1
24655: PPUSH
24656: CALL_OW 250
24660: PPUSH
24661: LD_VAR 0 4
24665: PPUSH
24666: LD_INT 3
24668: PPUSH
24669: LD_INT 12
24671: PPUSH
24672: CALL_OW 12
24676: PPUSH
24677: CALL_OW 272
24681: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24682: LD_ADDR_VAR 0 3
24686: PUSH
24687: LD_VAR 0 1
24691: PPUSH
24692: CALL_OW 251
24696: PPUSH
24697: LD_VAR 0 4
24701: PPUSH
24702: LD_INT 3
24704: PPUSH
24705: LD_INT 12
24707: PPUSH
24708: CALL_OW 12
24712: PPUSH
24713: CALL_OW 273
24717: ST_TO_ADDR
// if ValidHex ( x , y ) then
24718: LD_VAR 0 2
24722: PPUSH
24723: LD_VAR 0 3
24727: PPUSH
24728: CALL_OW 488
24732: IFFALSE 24767
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24734: LD_VAR 0 1
24738: PPUSH
24739: LD_VAR 0 2
24743: PPUSH
24744: LD_VAR 0 3
24748: PPUSH
24749: LD_INT 3
24751: PPUSH
24752: LD_INT 6
24754: PPUSH
24755: CALL_OW 12
24759: PPUSH
24760: LD_INT 1
24762: PPUSH
24763: CALL_OW 483
// end ;
24767: GO 24627
24769: POP
24770: POP
// end ;
24771: PPOPN 5
24773: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24774: LD_EXP 53
24778: PUSH
24779: LD_EXP 88
24783: AND
24784: IFFALSE 24878
24786: GO 24788
24788: DISABLE
24789: LD_INT 0
24791: PPUSH
24792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24793: LD_ADDR_VAR 0 2
24797: PUSH
24798: LD_INT 22
24800: PUSH
24801: LD_OWVAR 2
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 32
24812: PUSH
24813: LD_INT 1
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 21
24822: PUSH
24823: LD_INT 2
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: LIST
24834: PPUSH
24835: CALL_OW 69
24839: ST_TO_ADDR
// if not tmp then
24840: LD_VAR 0 2
24844: NOT
24845: IFFALSE 24849
// exit ;
24847: GO 24878
// for i in tmp do
24849: LD_ADDR_VAR 0 1
24853: PUSH
24854: LD_VAR 0 2
24858: PUSH
24859: FOR_IN
24860: IFFALSE 24876
// SetFuel ( i , 0 ) ;
24862: LD_VAR 0 1
24866: PPUSH
24867: LD_INT 0
24869: PPUSH
24870: CALL_OW 240
24874: GO 24859
24876: POP
24877: POP
// end ;
24878: PPOPN 2
24880: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24881: LD_EXP 53
24885: PUSH
24886: LD_EXP 89
24890: AND
24891: IFFALSE 24957
24893: GO 24895
24895: DISABLE
24896: LD_INT 0
24898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24899: LD_ADDR_VAR 0 1
24903: PUSH
24904: LD_INT 22
24906: PUSH
24907: LD_OWVAR 2
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 30
24918: PUSH
24919: LD_INT 29
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PPUSH
24930: CALL_OW 69
24934: ST_TO_ADDR
// if not tmp then
24935: LD_VAR 0 1
24939: NOT
24940: IFFALSE 24944
// exit ;
24942: GO 24957
// DestroyUnit ( tmp [ 1 ] ) ;
24944: LD_VAR 0 1
24948: PUSH
24949: LD_INT 1
24951: ARRAY
24952: PPUSH
24953: CALL_OW 65
// end ;
24957: PPOPN 1
24959: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24960: LD_EXP 53
24964: PUSH
24965: LD_EXP 91
24969: AND
24970: IFFALSE 25099
24972: GO 24974
24974: DISABLE
24975: LD_INT 0
24977: PPUSH
// begin uc_side := 0 ;
24978: LD_ADDR_OWVAR 20
24982: PUSH
24983: LD_INT 0
24985: ST_TO_ADDR
// uc_nation := nation_arabian ;
24986: LD_ADDR_OWVAR 21
24990: PUSH
24991: LD_INT 2
24993: ST_TO_ADDR
// hc_gallery :=  ;
24994: LD_ADDR_OWVAR 33
24998: PUSH
24999: LD_STRING 
25001: ST_TO_ADDR
// hc_name :=  ;
25002: LD_ADDR_OWVAR 26
25006: PUSH
25007: LD_STRING 
25009: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25010: LD_INT 1
25012: PPUSH
25013: LD_INT 11
25015: PPUSH
25016: LD_INT 10
25018: PPUSH
25019: CALL_OW 380
// un := CreateHuman ;
25023: LD_ADDR_VAR 0 1
25027: PUSH
25028: CALL_OW 44
25032: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25033: LD_VAR 0 1
25037: PPUSH
25038: LD_INT 1
25040: PPUSH
25041: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25045: LD_INT 35
25047: PPUSH
25048: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25052: LD_VAR 0 1
25056: PPUSH
25057: LD_INT 22
25059: PUSH
25060: LD_OWVAR 2
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PPUSH
25069: CALL_OW 69
25073: PPUSH
25074: LD_VAR 0 1
25078: PPUSH
25079: CALL_OW 74
25083: PPUSH
25084: CALL_OW 115
// until IsDead ( un ) ;
25088: LD_VAR 0 1
25092: PPUSH
25093: CALL_OW 301
25097: IFFALSE 25045
// end ;
25099: PPOPN 1
25101: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25102: LD_EXP 53
25106: PUSH
25107: LD_EXP 93
25111: AND
25112: IFFALSE 25124
25114: GO 25116
25116: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25117: LD_STRING earthquake(getX(game), 0, 32)
25119: PPUSH
25120: CALL_OW 559
25124: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25125: LD_EXP 53
25129: PUSH
25130: LD_EXP 94
25134: AND
25135: IFFALSE 25226
25137: GO 25139
25139: DISABLE
25140: LD_INT 0
25142: PPUSH
// begin enable ;
25143: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25144: LD_ADDR_VAR 0 1
25148: PUSH
25149: LD_INT 22
25151: PUSH
25152: LD_OWVAR 2
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 21
25163: PUSH
25164: LD_INT 2
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 33
25173: PUSH
25174: LD_INT 3
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: LIST
25185: PPUSH
25186: CALL_OW 69
25190: ST_TO_ADDR
// if not tmp then
25191: LD_VAR 0 1
25195: NOT
25196: IFFALSE 25200
// exit ;
25198: GO 25226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25200: LD_VAR 0 1
25204: PUSH
25205: LD_INT 1
25207: PPUSH
25208: LD_VAR 0 1
25212: PPUSH
25213: CALL_OW 12
25217: ARRAY
25218: PPUSH
25219: LD_INT 1
25221: PPUSH
25222: CALL_OW 234
// end ;
25226: PPOPN 1
25228: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25229: LD_EXP 53
25233: PUSH
25234: LD_EXP 95
25238: AND
25239: IFFALSE 25380
25241: GO 25243
25243: DISABLE
25244: LD_INT 0
25246: PPUSH
25247: PPUSH
25248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25249: LD_ADDR_VAR 0 3
25253: PUSH
25254: LD_INT 22
25256: PUSH
25257: LD_OWVAR 2
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 25
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PPUSH
25280: CALL_OW 69
25284: ST_TO_ADDR
// if not tmp then
25285: LD_VAR 0 3
25289: NOT
25290: IFFALSE 25294
// exit ;
25292: GO 25380
// un := tmp [ rand ( 1 , tmp ) ] ;
25294: LD_ADDR_VAR 0 2
25298: PUSH
25299: LD_VAR 0 3
25303: PUSH
25304: LD_INT 1
25306: PPUSH
25307: LD_VAR 0 3
25311: PPUSH
25312: CALL_OW 12
25316: ARRAY
25317: ST_TO_ADDR
// if Crawls ( un ) then
25318: LD_VAR 0 2
25322: PPUSH
25323: CALL_OW 318
25327: IFFALSE 25338
// ComWalk ( un ) ;
25329: LD_VAR 0 2
25333: PPUSH
25334: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25338: LD_VAR 0 2
25342: PPUSH
25343: LD_INT 9
25345: PPUSH
25346: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25350: LD_INT 28
25352: PPUSH
25353: LD_OWVAR 2
25357: PPUSH
25358: LD_INT 2
25360: PPUSH
25361: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25365: LD_INT 29
25367: PPUSH
25368: LD_OWVAR 2
25372: PPUSH
25373: LD_INT 2
25375: PPUSH
25376: CALL_OW 322
// end ;
25380: PPOPN 3
25382: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25383: LD_EXP 53
25387: PUSH
25388: LD_EXP 96
25392: AND
25393: IFFALSE 25504
25395: GO 25397
25397: DISABLE
25398: LD_INT 0
25400: PPUSH
25401: PPUSH
25402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25403: LD_ADDR_VAR 0 3
25407: PUSH
25408: LD_INT 22
25410: PUSH
25411: LD_OWVAR 2
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 25
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PPUSH
25434: CALL_OW 69
25438: ST_TO_ADDR
// if not tmp then
25439: LD_VAR 0 3
25443: NOT
25444: IFFALSE 25448
// exit ;
25446: GO 25504
// un := tmp [ rand ( 1 , tmp ) ] ;
25448: LD_ADDR_VAR 0 2
25452: PUSH
25453: LD_VAR 0 3
25457: PUSH
25458: LD_INT 1
25460: PPUSH
25461: LD_VAR 0 3
25465: PPUSH
25466: CALL_OW 12
25470: ARRAY
25471: ST_TO_ADDR
// if Crawls ( un ) then
25472: LD_VAR 0 2
25476: PPUSH
25477: CALL_OW 318
25481: IFFALSE 25492
// ComWalk ( un ) ;
25483: LD_VAR 0 2
25487: PPUSH
25488: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25492: LD_VAR 0 2
25496: PPUSH
25497: LD_INT 8
25499: PPUSH
25500: CALL_OW 336
// end ;
25504: PPOPN 3
25506: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25507: LD_EXP 53
25511: PUSH
25512: LD_EXP 97
25516: AND
25517: IFFALSE 25661
25519: GO 25521
25521: DISABLE
25522: LD_INT 0
25524: PPUSH
25525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25526: LD_ADDR_VAR 0 2
25530: PUSH
25531: LD_INT 22
25533: PUSH
25534: LD_OWVAR 2
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 21
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: LD_INT 34
25558: PUSH
25559: LD_INT 12
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 34
25568: PUSH
25569: LD_INT 51
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 34
25578: PUSH
25579: LD_INT 32
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: LIST
25596: PPUSH
25597: CALL_OW 69
25601: ST_TO_ADDR
// if not tmp then
25602: LD_VAR 0 2
25606: NOT
25607: IFFALSE 25611
// exit ;
25609: GO 25661
// for i in tmp do
25611: LD_ADDR_VAR 0 1
25615: PUSH
25616: LD_VAR 0 2
25620: PUSH
25621: FOR_IN
25622: IFFALSE 25659
// if GetCargo ( i , mat_artifact ) = 0 then
25624: LD_VAR 0 1
25628: PPUSH
25629: LD_INT 4
25631: PPUSH
25632: CALL_OW 289
25636: PUSH
25637: LD_INT 0
25639: EQUAL
25640: IFFALSE 25657
// SetCargo ( i , mat_siberit , 100 ) ;
25642: LD_VAR 0 1
25646: PPUSH
25647: LD_INT 3
25649: PPUSH
25650: LD_INT 100
25652: PPUSH
25653: CALL_OW 290
25657: GO 25621
25659: POP
25660: POP
// end ;
25661: PPOPN 2
25663: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25664: LD_EXP 53
25668: PUSH
25669: LD_EXP 98
25673: AND
25674: IFFALSE 25857
25676: GO 25678
25678: DISABLE
25679: LD_INT 0
25681: PPUSH
25682: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25683: LD_ADDR_VAR 0 2
25687: PUSH
25688: LD_INT 22
25690: PUSH
25691: LD_OWVAR 2
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PPUSH
25700: CALL_OW 69
25704: ST_TO_ADDR
// if not tmp then
25705: LD_VAR 0 2
25709: NOT
25710: IFFALSE 25714
// exit ;
25712: GO 25857
// for i := 1 to 2 do
25714: LD_ADDR_VAR 0 1
25718: PUSH
25719: DOUBLE
25720: LD_INT 1
25722: DEC
25723: ST_TO_ADDR
25724: LD_INT 2
25726: PUSH
25727: FOR_TO
25728: IFFALSE 25855
// begin uc_side := your_side ;
25730: LD_ADDR_OWVAR 20
25734: PUSH
25735: LD_OWVAR 2
25739: ST_TO_ADDR
// uc_nation := nation_american ;
25740: LD_ADDR_OWVAR 21
25744: PUSH
25745: LD_INT 1
25747: ST_TO_ADDR
// vc_chassis := us_morphling ;
25748: LD_ADDR_OWVAR 37
25752: PUSH
25753: LD_INT 5
25755: ST_TO_ADDR
// vc_engine := engine_siberite ;
25756: LD_ADDR_OWVAR 39
25760: PUSH
25761: LD_INT 3
25763: ST_TO_ADDR
// vc_control := control_computer ;
25764: LD_ADDR_OWVAR 38
25768: PUSH
25769: LD_INT 3
25771: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25772: LD_ADDR_OWVAR 40
25776: PUSH
25777: LD_INT 10
25779: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25780: LD_VAR 0 2
25784: PUSH
25785: LD_INT 1
25787: ARRAY
25788: PPUSH
25789: CALL_OW 310
25793: NOT
25794: IFFALSE 25841
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25796: CALL_OW 45
25800: PPUSH
25801: LD_VAR 0 2
25805: PUSH
25806: LD_INT 1
25808: ARRAY
25809: PPUSH
25810: CALL_OW 250
25814: PPUSH
25815: LD_VAR 0 2
25819: PUSH
25820: LD_INT 1
25822: ARRAY
25823: PPUSH
25824: CALL_OW 251
25828: PPUSH
25829: LD_INT 12
25831: PPUSH
25832: LD_INT 1
25834: PPUSH
25835: CALL_OW 50
25839: GO 25853
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25841: CALL_OW 45
25845: PPUSH
25846: LD_INT 1
25848: PPUSH
25849: CALL_OW 51
// end ;
25853: GO 25727
25855: POP
25856: POP
// end ;
25857: PPOPN 2
25859: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25860: LD_EXP 53
25864: PUSH
25865: LD_EXP 99
25869: AND
25870: IFFALSE 26092
25872: GO 25874
25874: DISABLE
25875: LD_INT 0
25877: PPUSH
25878: PPUSH
25879: PPUSH
25880: PPUSH
25881: PPUSH
25882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25883: LD_ADDR_VAR 0 6
25887: PUSH
25888: LD_INT 22
25890: PUSH
25891: LD_OWVAR 2
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 21
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 3
25912: PUSH
25913: LD_INT 23
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: LIST
25931: PPUSH
25932: CALL_OW 69
25936: ST_TO_ADDR
// if not tmp then
25937: LD_VAR 0 6
25941: NOT
25942: IFFALSE 25946
// exit ;
25944: GO 26092
// s1 := rand ( 1 , 4 ) ;
25946: LD_ADDR_VAR 0 2
25950: PUSH
25951: LD_INT 1
25953: PPUSH
25954: LD_INT 4
25956: PPUSH
25957: CALL_OW 12
25961: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25962: LD_ADDR_VAR 0 4
25966: PUSH
25967: LD_VAR 0 6
25971: PUSH
25972: LD_INT 1
25974: ARRAY
25975: PPUSH
25976: LD_VAR 0 2
25980: PPUSH
25981: CALL_OW 259
25985: ST_TO_ADDR
// if s1 = 1 then
25986: LD_VAR 0 2
25990: PUSH
25991: LD_INT 1
25993: EQUAL
25994: IFFALSE 26014
// s2 := rand ( 2 , 4 ) else
25996: LD_ADDR_VAR 0 3
26000: PUSH
26001: LD_INT 2
26003: PPUSH
26004: LD_INT 4
26006: PPUSH
26007: CALL_OW 12
26011: ST_TO_ADDR
26012: GO 26022
// s2 := 1 ;
26014: LD_ADDR_VAR 0 3
26018: PUSH
26019: LD_INT 1
26021: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26022: LD_ADDR_VAR 0 5
26026: PUSH
26027: LD_VAR 0 6
26031: PUSH
26032: LD_INT 1
26034: ARRAY
26035: PPUSH
26036: LD_VAR 0 3
26040: PPUSH
26041: CALL_OW 259
26045: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26046: LD_VAR 0 6
26050: PUSH
26051: LD_INT 1
26053: ARRAY
26054: PPUSH
26055: LD_VAR 0 2
26059: PPUSH
26060: LD_VAR 0 5
26064: PPUSH
26065: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26069: LD_VAR 0 6
26073: PUSH
26074: LD_INT 1
26076: ARRAY
26077: PPUSH
26078: LD_VAR 0 3
26082: PPUSH
26083: LD_VAR 0 4
26087: PPUSH
26088: CALL_OW 237
// end ;
26092: PPOPN 6
26094: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26095: LD_EXP 53
26099: PUSH
26100: LD_EXP 100
26104: AND
26105: IFFALSE 26184
26107: GO 26109
26109: DISABLE
26110: LD_INT 0
26112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26113: LD_ADDR_VAR 0 1
26117: PUSH
26118: LD_INT 22
26120: PUSH
26121: LD_OWVAR 2
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 30
26132: PUSH
26133: LD_INT 3
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PPUSH
26144: CALL_OW 69
26148: ST_TO_ADDR
// if not tmp then
26149: LD_VAR 0 1
26153: NOT
26154: IFFALSE 26158
// exit ;
26156: GO 26184
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26158: LD_VAR 0 1
26162: PUSH
26163: LD_INT 1
26165: PPUSH
26166: LD_VAR 0 1
26170: PPUSH
26171: CALL_OW 12
26175: ARRAY
26176: PPUSH
26177: LD_INT 1
26179: PPUSH
26180: CALL_OW 234
// end ;
26184: PPOPN 1
26186: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26187: LD_EXP 53
26191: PUSH
26192: LD_EXP 101
26196: AND
26197: IFFALSE 26309
26199: GO 26201
26201: DISABLE
26202: LD_INT 0
26204: PPUSH
26205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26206: LD_ADDR_VAR 0 2
26210: PUSH
26211: LD_INT 22
26213: PUSH
26214: LD_OWVAR 2
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: LD_INT 30
26228: PUSH
26229: LD_INT 27
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 30
26238: PUSH
26239: LD_INT 26
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 30
26248: PUSH
26249: LD_INT 28
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PPUSH
26266: CALL_OW 69
26270: ST_TO_ADDR
// if not tmp then
26271: LD_VAR 0 2
26275: NOT
26276: IFFALSE 26280
// exit ;
26278: GO 26309
// for i in tmp do
26280: LD_ADDR_VAR 0 1
26284: PUSH
26285: LD_VAR 0 2
26289: PUSH
26290: FOR_IN
26291: IFFALSE 26307
// SetLives ( i , 1 ) ;
26293: LD_VAR 0 1
26297: PPUSH
26298: LD_INT 1
26300: PPUSH
26301: CALL_OW 234
26305: GO 26290
26307: POP
26308: POP
// end ;
26309: PPOPN 2
26311: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26312: LD_EXP 53
26316: PUSH
26317: LD_EXP 102
26321: AND
26322: IFFALSE 26596
26324: GO 26326
26326: DISABLE
26327: LD_INT 0
26329: PPUSH
26330: PPUSH
26331: PPUSH
// begin i := rand ( 1 , 7 ) ;
26332: LD_ADDR_VAR 0 1
26336: PUSH
26337: LD_INT 1
26339: PPUSH
26340: LD_INT 7
26342: PPUSH
26343: CALL_OW 12
26347: ST_TO_ADDR
// case i of 1 :
26348: LD_VAR 0 1
26352: PUSH
26353: LD_INT 1
26355: DOUBLE
26356: EQUAL
26357: IFTRUE 26361
26359: GO 26371
26361: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26362: LD_STRING earthquake(getX(game), 0, 32)
26364: PPUSH
26365: CALL_OW 559
26369: GO 26596
26371: LD_INT 2
26373: DOUBLE
26374: EQUAL
26375: IFTRUE 26379
26377: GO 26393
26379: POP
// begin ToLua ( displayStucuk(); ) ;
26380: LD_STRING displayStucuk();
26382: PPUSH
26383: CALL_OW 559
// ResetFog ;
26387: CALL_OW 335
// end ; 3 :
26391: GO 26596
26393: LD_INT 3
26395: DOUBLE
26396: EQUAL
26397: IFTRUE 26401
26399: GO 26505
26401: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26402: LD_ADDR_VAR 0 2
26406: PUSH
26407: LD_INT 22
26409: PUSH
26410: LD_OWVAR 2
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 25
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PPUSH
26433: CALL_OW 69
26437: ST_TO_ADDR
// if not tmp then
26438: LD_VAR 0 2
26442: NOT
26443: IFFALSE 26447
// exit ;
26445: GO 26596
// un := tmp [ rand ( 1 , tmp ) ] ;
26447: LD_ADDR_VAR 0 3
26451: PUSH
26452: LD_VAR 0 2
26456: PUSH
26457: LD_INT 1
26459: PPUSH
26460: LD_VAR 0 2
26464: PPUSH
26465: CALL_OW 12
26469: ARRAY
26470: ST_TO_ADDR
// if Crawls ( un ) then
26471: LD_VAR 0 3
26475: PPUSH
26476: CALL_OW 318
26480: IFFALSE 26491
// ComWalk ( un ) ;
26482: LD_VAR 0 3
26486: PPUSH
26487: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26491: LD_VAR 0 3
26495: PPUSH
26496: LD_INT 8
26498: PPUSH
26499: CALL_OW 336
// end ; 4 :
26503: GO 26596
26505: LD_INT 4
26507: DOUBLE
26508: EQUAL
26509: IFTRUE 26513
26511: GO 26574
26513: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26514: LD_ADDR_VAR 0 2
26518: PUSH
26519: LD_INT 22
26521: PUSH
26522: LD_OWVAR 2
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 30
26533: PUSH
26534: LD_INT 29
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PPUSH
26545: CALL_OW 69
26549: ST_TO_ADDR
// if not tmp then
26550: LD_VAR 0 2
26554: NOT
26555: IFFALSE 26559
// exit ;
26557: GO 26596
// DestroyUnit ( tmp [ 1 ] ) ;
26559: LD_VAR 0 2
26563: PUSH
26564: LD_INT 1
26566: ARRAY
26567: PPUSH
26568: CALL_OW 65
// end ; 5 .. 7 :
26572: GO 26596
26574: LD_INT 5
26576: DOUBLE
26577: GREATEREQUAL
26578: IFFALSE 26586
26580: LD_INT 7
26582: DOUBLE
26583: LESSEQUAL
26584: IFTRUE 26588
26586: GO 26595
26588: POP
// StreamSibBomb ; end ;
26589: CALL 22846 0 0
26593: GO 26596
26595: POP
// end ;
26596: PPOPN 3
26598: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26599: LD_EXP 53
26603: PUSH
26604: LD_EXP 103
26608: AND
26609: IFFALSE 26765
26611: GO 26613
26613: DISABLE
26614: LD_INT 0
26616: PPUSH
26617: PPUSH
26618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26619: LD_ADDR_VAR 0 2
26623: PUSH
26624: LD_INT 81
26626: PUSH
26627: LD_OWVAR 2
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 2
26638: PUSH
26639: LD_INT 21
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 21
26651: PUSH
26652: LD_INT 2
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PPUSH
26668: CALL_OW 69
26672: ST_TO_ADDR
// if not tmp then
26673: LD_VAR 0 2
26677: NOT
26678: IFFALSE 26682
// exit ;
26680: GO 26765
// p := 0 ;
26682: LD_ADDR_VAR 0 3
26686: PUSH
26687: LD_INT 0
26689: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26690: LD_INT 35
26692: PPUSH
26693: CALL_OW 67
// p := p + 1 ;
26697: LD_ADDR_VAR 0 3
26701: PUSH
26702: LD_VAR 0 3
26706: PUSH
26707: LD_INT 1
26709: PLUS
26710: ST_TO_ADDR
// for i in tmp do
26711: LD_ADDR_VAR 0 1
26715: PUSH
26716: LD_VAR 0 2
26720: PUSH
26721: FOR_IN
26722: IFFALSE 26753
// if GetLives ( i ) < 1000 then
26724: LD_VAR 0 1
26728: PPUSH
26729: CALL_OW 256
26733: PUSH
26734: LD_INT 1000
26736: LESS
26737: IFFALSE 26751
// SetLives ( i , 1000 ) ;
26739: LD_VAR 0 1
26743: PPUSH
26744: LD_INT 1000
26746: PPUSH
26747: CALL_OW 234
26751: GO 26721
26753: POP
26754: POP
// until p > 20 ;
26755: LD_VAR 0 3
26759: PUSH
26760: LD_INT 20
26762: GREATER
26763: IFFALSE 26690
// end ;
26765: PPOPN 3
26767: END
// every 0 0$1 trigger StreamModeActive and sTime do
26768: LD_EXP 53
26772: PUSH
26773: LD_EXP 104
26777: AND
26778: IFFALSE 26813
26780: GO 26782
26782: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26783: LD_INT 28
26785: PPUSH
26786: LD_OWVAR 2
26790: PPUSH
26791: LD_INT 2
26793: PPUSH
26794: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26798: LD_INT 30
26800: PPUSH
26801: LD_OWVAR 2
26805: PPUSH
26806: LD_INT 2
26808: PPUSH
26809: CALL_OW 322
// end ;
26813: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26814: LD_EXP 53
26818: PUSH
26819: LD_EXP 105
26823: AND
26824: IFFALSE 26945
26826: GO 26828
26828: DISABLE
26829: LD_INT 0
26831: PPUSH
26832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26833: LD_ADDR_VAR 0 2
26837: PUSH
26838: LD_INT 22
26840: PUSH
26841: LD_OWVAR 2
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 21
26852: PUSH
26853: LD_INT 1
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 3
26862: PUSH
26863: LD_INT 23
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: LIST
26881: PPUSH
26882: CALL_OW 69
26886: ST_TO_ADDR
// if not tmp then
26887: LD_VAR 0 2
26891: NOT
26892: IFFALSE 26896
// exit ;
26894: GO 26945
// for i in tmp do
26896: LD_ADDR_VAR 0 1
26900: PUSH
26901: LD_VAR 0 2
26905: PUSH
26906: FOR_IN
26907: IFFALSE 26943
// begin if Crawls ( i ) then
26909: LD_VAR 0 1
26913: PPUSH
26914: CALL_OW 318
26918: IFFALSE 26929
// ComWalk ( i ) ;
26920: LD_VAR 0 1
26924: PPUSH
26925: CALL_OW 138
// SetClass ( i , 2 ) ;
26929: LD_VAR 0 1
26933: PPUSH
26934: LD_INT 2
26936: PPUSH
26937: CALL_OW 336
// end ;
26941: GO 26906
26943: POP
26944: POP
// end ;
26945: PPOPN 2
26947: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26948: LD_EXP 53
26952: PUSH
26953: LD_EXP 106
26957: AND
26958: IFFALSE 27239
26960: GO 26962
26962: DISABLE
26963: LD_INT 0
26965: PPUSH
26966: PPUSH
26967: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26968: LD_OWVAR 2
26972: PPUSH
26973: LD_INT 9
26975: PPUSH
26976: LD_INT 1
26978: PPUSH
26979: LD_INT 1
26981: PPUSH
26982: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26986: LD_INT 9
26988: PPUSH
26989: LD_OWVAR 2
26993: PPUSH
26994: CALL_OW 343
// uc_side := 9 ;
26998: LD_ADDR_OWVAR 20
27002: PUSH
27003: LD_INT 9
27005: ST_TO_ADDR
// uc_nation := 2 ;
27006: LD_ADDR_OWVAR 21
27010: PUSH
27011: LD_INT 2
27013: ST_TO_ADDR
// hc_name := Dark Warrior ;
27014: LD_ADDR_OWVAR 26
27018: PUSH
27019: LD_STRING Dark Warrior
27021: ST_TO_ADDR
// hc_gallery :=  ;
27022: LD_ADDR_OWVAR 33
27026: PUSH
27027: LD_STRING 
27029: ST_TO_ADDR
// hc_noskilllimit := true ;
27030: LD_ADDR_OWVAR 76
27034: PUSH
27035: LD_INT 1
27037: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27038: LD_ADDR_OWVAR 31
27042: PUSH
27043: LD_INT 30
27045: PUSH
27046: LD_INT 30
27048: PUSH
27049: LD_INT 30
27051: PUSH
27052: LD_INT 30
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: ST_TO_ADDR
// un := CreateHuman ;
27061: LD_ADDR_VAR 0 3
27065: PUSH
27066: CALL_OW 44
27070: ST_TO_ADDR
// hc_noskilllimit := false ;
27071: LD_ADDR_OWVAR 76
27075: PUSH
27076: LD_INT 0
27078: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27079: LD_VAR 0 3
27083: PPUSH
27084: LD_INT 1
27086: PPUSH
27087: CALL_OW 51
// p := 0 ;
27091: LD_ADDR_VAR 0 2
27095: PUSH
27096: LD_INT 0
27098: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27099: LD_INT 35
27101: PPUSH
27102: CALL_OW 67
// p := p + 1 ;
27106: LD_ADDR_VAR 0 2
27110: PUSH
27111: LD_VAR 0 2
27115: PUSH
27116: LD_INT 1
27118: PLUS
27119: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27120: LD_VAR 0 3
27124: PPUSH
27125: CALL_OW 256
27129: PUSH
27130: LD_INT 1000
27132: LESS
27133: IFFALSE 27147
// SetLives ( un , 1000 ) ;
27135: LD_VAR 0 3
27139: PPUSH
27140: LD_INT 1000
27142: PPUSH
27143: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27147: LD_VAR 0 3
27151: PPUSH
27152: LD_INT 81
27154: PUSH
27155: LD_OWVAR 2
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 91
27166: PUSH
27167: LD_VAR 0 3
27171: PUSH
27172: LD_INT 30
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: LIST
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PPUSH
27184: CALL_OW 69
27188: PPUSH
27189: LD_VAR 0 3
27193: PPUSH
27194: CALL_OW 74
27198: PPUSH
27199: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
27203: LD_VAR 0 2
27207: PUSH
27208: LD_INT 60
27210: GREATER
27211: PUSH
27212: LD_VAR 0 3
27216: PPUSH
27217: CALL_OW 301
27221: OR
27222: IFFALSE 27099
// if un then
27224: LD_VAR 0 3
27228: IFFALSE 27239
// RemoveUnit ( un ) ;
27230: LD_VAR 0 3
27234: PPUSH
27235: CALL_OW 64
// end ;
27239: PPOPN 3
27241: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27242: LD_INT 0
27244: PPUSH
// case cmd of 301 :
27245: LD_VAR 0 1
27249: PUSH
27250: LD_INT 301
27252: DOUBLE
27253: EQUAL
27254: IFTRUE 27258
27256: GO 27290
27258: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27259: LD_VAR 0 6
27263: PPUSH
27264: LD_VAR 0 7
27268: PPUSH
27269: LD_VAR 0 8
27273: PPUSH
27274: LD_VAR 0 4
27278: PPUSH
27279: LD_VAR 0 5
27283: PPUSH
27284: CALL 28491 0 5
27288: GO 27411
27290: LD_INT 302
27292: DOUBLE
27293: EQUAL
27294: IFTRUE 27298
27296: GO 27335
27298: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27299: LD_VAR 0 6
27303: PPUSH
27304: LD_VAR 0 7
27308: PPUSH
27309: LD_VAR 0 8
27313: PPUSH
27314: LD_VAR 0 9
27318: PPUSH
27319: LD_VAR 0 4
27323: PPUSH
27324: LD_VAR 0 5
27328: PPUSH
27329: CALL 28582 0 6
27333: GO 27411
27335: LD_INT 303
27337: DOUBLE
27338: EQUAL
27339: IFTRUE 27343
27341: GO 27380
27343: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27344: LD_VAR 0 6
27348: PPUSH
27349: LD_VAR 0 7
27353: PPUSH
27354: LD_VAR 0 8
27358: PPUSH
27359: LD_VAR 0 9
27363: PPUSH
27364: LD_VAR 0 4
27368: PPUSH
27369: LD_VAR 0 5
27373: PPUSH
27374: CALL 27416 0 6
27378: GO 27411
27380: LD_INT 304
27382: DOUBLE
27383: EQUAL
27384: IFTRUE 27388
27386: GO 27410
27388: POP
// hHackTeleport ( unit , x , y ) ; end ;
27389: LD_VAR 0 2
27393: PPUSH
27394: LD_VAR 0 4
27398: PPUSH
27399: LD_VAR 0 5
27403: PPUSH
27404: CALL 29175 0 3
27408: GO 27411
27410: POP
// end ;
27411: LD_VAR 0 12
27415: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27416: LD_INT 0
27418: PPUSH
27419: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27420: LD_VAR 0 1
27424: PUSH
27425: LD_INT 1
27427: LESS
27428: PUSH
27429: LD_VAR 0 1
27433: PUSH
27434: LD_INT 3
27436: GREATER
27437: OR
27438: PUSH
27439: LD_VAR 0 5
27443: PPUSH
27444: LD_VAR 0 6
27448: PPUSH
27449: CALL_OW 428
27453: OR
27454: IFFALSE 27458
// exit ;
27456: GO 28178
// uc_side := your_side ;
27458: LD_ADDR_OWVAR 20
27462: PUSH
27463: LD_OWVAR 2
27467: ST_TO_ADDR
// uc_nation := nation ;
27468: LD_ADDR_OWVAR 21
27472: PUSH
27473: LD_VAR 0 1
27477: ST_TO_ADDR
// bc_level = 1 ;
27478: LD_ADDR_OWVAR 43
27482: PUSH
27483: LD_INT 1
27485: ST_TO_ADDR
// case btype of 1 :
27486: LD_VAR 0 2
27490: PUSH
27491: LD_INT 1
27493: DOUBLE
27494: EQUAL
27495: IFTRUE 27499
27497: GO 27510
27499: POP
// bc_type := b_depot ; 2 :
27500: LD_ADDR_OWVAR 42
27504: PUSH
27505: LD_INT 0
27507: ST_TO_ADDR
27508: GO 28122
27510: LD_INT 2
27512: DOUBLE
27513: EQUAL
27514: IFTRUE 27518
27516: GO 27529
27518: POP
// bc_type := b_warehouse ; 3 :
27519: LD_ADDR_OWVAR 42
27523: PUSH
27524: LD_INT 1
27526: ST_TO_ADDR
27527: GO 28122
27529: LD_INT 3
27531: DOUBLE
27532: EQUAL
27533: IFTRUE 27537
27535: GO 27548
27537: POP
// bc_type := b_lab ; 4 .. 9 :
27538: LD_ADDR_OWVAR 42
27542: PUSH
27543: LD_INT 6
27545: ST_TO_ADDR
27546: GO 28122
27548: LD_INT 4
27550: DOUBLE
27551: GREATEREQUAL
27552: IFFALSE 27560
27554: LD_INT 9
27556: DOUBLE
27557: LESSEQUAL
27558: IFTRUE 27562
27560: GO 27614
27562: POP
// begin bc_type := b_lab_half ;
27563: LD_ADDR_OWVAR 42
27567: PUSH
27568: LD_INT 7
27570: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27571: LD_ADDR_OWVAR 44
27575: PUSH
27576: LD_INT 10
27578: PUSH
27579: LD_INT 11
27581: PUSH
27582: LD_INT 12
27584: PUSH
27585: LD_INT 15
27587: PUSH
27588: LD_INT 14
27590: PUSH
27591: LD_INT 13
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: PUSH
27602: LD_VAR 0 2
27606: PUSH
27607: LD_INT 3
27609: MINUS
27610: ARRAY
27611: ST_TO_ADDR
// end ; 10 .. 13 :
27612: GO 28122
27614: LD_INT 10
27616: DOUBLE
27617: GREATEREQUAL
27618: IFFALSE 27626
27620: LD_INT 13
27622: DOUBLE
27623: LESSEQUAL
27624: IFTRUE 27628
27626: GO 27705
27628: POP
// begin bc_type := b_lab_full ;
27629: LD_ADDR_OWVAR 42
27633: PUSH
27634: LD_INT 8
27636: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27637: LD_ADDR_OWVAR 44
27641: PUSH
27642: LD_INT 10
27644: PUSH
27645: LD_INT 12
27647: PUSH
27648: LD_INT 14
27650: PUSH
27651: LD_INT 13
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: PUSH
27660: LD_VAR 0 2
27664: PUSH
27665: LD_INT 9
27667: MINUS
27668: ARRAY
27669: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27670: LD_ADDR_OWVAR 45
27674: PUSH
27675: LD_INT 11
27677: PUSH
27678: LD_INT 15
27680: PUSH
27681: LD_INT 12
27683: PUSH
27684: LD_INT 15
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: PUSH
27693: LD_VAR 0 2
27697: PUSH
27698: LD_INT 9
27700: MINUS
27701: ARRAY
27702: ST_TO_ADDR
// end ; 14 :
27703: GO 28122
27705: LD_INT 14
27707: DOUBLE
27708: EQUAL
27709: IFTRUE 27713
27711: GO 27724
27713: POP
// bc_type := b_workshop ; 15 :
27714: LD_ADDR_OWVAR 42
27718: PUSH
27719: LD_INT 2
27721: ST_TO_ADDR
27722: GO 28122
27724: LD_INT 15
27726: DOUBLE
27727: EQUAL
27728: IFTRUE 27732
27730: GO 27743
27732: POP
// bc_type := b_factory ; 16 :
27733: LD_ADDR_OWVAR 42
27737: PUSH
27738: LD_INT 3
27740: ST_TO_ADDR
27741: GO 28122
27743: LD_INT 16
27745: DOUBLE
27746: EQUAL
27747: IFTRUE 27751
27749: GO 27762
27751: POP
// bc_type := b_ext_gun ; 17 :
27752: LD_ADDR_OWVAR 42
27756: PUSH
27757: LD_INT 17
27759: ST_TO_ADDR
27760: GO 28122
27762: LD_INT 17
27764: DOUBLE
27765: EQUAL
27766: IFTRUE 27770
27768: GO 27798
27770: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27771: LD_ADDR_OWVAR 42
27775: PUSH
27776: LD_INT 19
27778: PUSH
27779: LD_INT 23
27781: PUSH
27782: LD_INT 19
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: PUSH
27790: LD_VAR 0 1
27794: ARRAY
27795: ST_TO_ADDR
27796: GO 28122
27798: LD_INT 18
27800: DOUBLE
27801: EQUAL
27802: IFTRUE 27806
27804: GO 27817
27806: POP
// bc_type := b_ext_radar ; 19 :
27807: LD_ADDR_OWVAR 42
27811: PUSH
27812: LD_INT 20
27814: ST_TO_ADDR
27815: GO 28122
27817: LD_INT 19
27819: DOUBLE
27820: EQUAL
27821: IFTRUE 27825
27823: GO 27836
27825: POP
// bc_type := b_ext_radio ; 20 :
27826: LD_ADDR_OWVAR 42
27830: PUSH
27831: LD_INT 22
27833: ST_TO_ADDR
27834: GO 28122
27836: LD_INT 20
27838: DOUBLE
27839: EQUAL
27840: IFTRUE 27844
27842: GO 27855
27844: POP
// bc_type := b_ext_siberium ; 21 :
27845: LD_ADDR_OWVAR 42
27849: PUSH
27850: LD_INT 21
27852: ST_TO_ADDR
27853: GO 28122
27855: LD_INT 21
27857: DOUBLE
27858: EQUAL
27859: IFTRUE 27863
27861: GO 27874
27863: POP
// bc_type := b_ext_computer ; 22 :
27864: LD_ADDR_OWVAR 42
27868: PUSH
27869: LD_INT 24
27871: ST_TO_ADDR
27872: GO 28122
27874: LD_INT 22
27876: DOUBLE
27877: EQUAL
27878: IFTRUE 27882
27880: GO 27893
27882: POP
// bc_type := b_ext_track ; 23 :
27883: LD_ADDR_OWVAR 42
27887: PUSH
27888: LD_INT 16
27890: ST_TO_ADDR
27891: GO 28122
27893: LD_INT 23
27895: DOUBLE
27896: EQUAL
27897: IFTRUE 27901
27899: GO 27912
27901: POP
// bc_type := b_ext_laser ; 24 :
27902: LD_ADDR_OWVAR 42
27906: PUSH
27907: LD_INT 25
27909: ST_TO_ADDR
27910: GO 28122
27912: LD_INT 24
27914: DOUBLE
27915: EQUAL
27916: IFTRUE 27920
27918: GO 27931
27920: POP
// bc_type := b_control_tower ; 25 :
27921: LD_ADDR_OWVAR 42
27925: PUSH
27926: LD_INT 36
27928: ST_TO_ADDR
27929: GO 28122
27931: LD_INT 25
27933: DOUBLE
27934: EQUAL
27935: IFTRUE 27939
27937: GO 27950
27939: POP
// bc_type := b_breastwork ; 26 :
27940: LD_ADDR_OWVAR 42
27944: PUSH
27945: LD_INT 31
27947: ST_TO_ADDR
27948: GO 28122
27950: LD_INT 26
27952: DOUBLE
27953: EQUAL
27954: IFTRUE 27958
27956: GO 27969
27958: POP
// bc_type := b_bunker ; 27 :
27959: LD_ADDR_OWVAR 42
27963: PUSH
27964: LD_INT 32
27966: ST_TO_ADDR
27967: GO 28122
27969: LD_INT 27
27971: DOUBLE
27972: EQUAL
27973: IFTRUE 27977
27975: GO 27988
27977: POP
// bc_type := b_turret ; 28 :
27978: LD_ADDR_OWVAR 42
27982: PUSH
27983: LD_INT 33
27985: ST_TO_ADDR
27986: GO 28122
27988: LD_INT 28
27990: DOUBLE
27991: EQUAL
27992: IFTRUE 27996
27994: GO 28007
27996: POP
// bc_type := b_armoury ; 29 :
27997: LD_ADDR_OWVAR 42
28001: PUSH
28002: LD_INT 4
28004: ST_TO_ADDR
28005: GO 28122
28007: LD_INT 29
28009: DOUBLE
28010: EQUAL
28011: IFTRUE 28015
28013: GO 28026
28015: POP
// bc_type := b_barracks ; 30 :
28016: LD_ADDR_OWVAR 42
28020: PUSH
28021: LD_INT 5
28023: ST_TO_ADDR
28024: GO 28122
28026: LD_INT 30
28028: DOUBLE
28029: EQUAL
28030: IFTRUE 28034
28032: GO 28045
28034: POP
// bc_type := b_solar_power ; 31 :
28035: LD_ADDR_OWVAR 42
28039: PUSH
28040: LD_INT 27
28042: ST_TO_ADDR
28043: GO 28122
28045: LD_INT 31
28047: DOUBLE
28048: EQUAL
28049: IFTRUE 28053
28051: GO 28064
28053: POP
// bc_type := b_oil_power ; 32 :
28054: LD_ADDR_OWVAR 42
28058: PUSH
28059: LD_INT 26
28061: ST_TO_ADDR
28062: GO 28122
28064: LD_INT 32
28066: DOUBLE
28067: EQUAL
28068: IFTRUE 28072
28070: GO 28083
28072: POP
// bc_type := b_siberite_power ; 33 :
28073: LD_ADDR_OWVAR 42
28077: PUSH
28078: LD_INT 28
28080: ST_TO_ADDR
28081: GO 28122
28083: LD_INT 33
28085: DOUBLE
28086: EQUAL
28087: IFTRUE 28091
28089: GO 28102
28091: POP
// bc_type := b_oil_mine ; 34 :
28092: LD_ADDR_OWVAR 42
28096: PUSH
28097: LD_INT 29
28099: ST_TO_ADDR
28100: GO 28122
28102: LD_INT 34
28104: DOUBLE
28105: EQUAL
28106: IFTRUE 28110
28108: GO 28121
28110: POP
// bc_type := b_siberite_mine ; end ;
28111: LD_ADDR_OWVAR 42
28115: PUSH
28116: LD_INT 30
28118: ST_TO_ADDR
28119: GO 28122
28121: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28122: LD_ADDR_VAR 0 8
28126: PUSH
28127: LD_VAR 0 5
28131: PPUSH
28132: LD_VAR 0 6
28136: PPUSH
28137: LD_VAR 0 3
28141: PPUSH
28142: CALL_OW 47
28146: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28147: LD_OWVAR 42
28151: PUSH
28152: LD_INT 32
28154: PUSH
28155: LD_INT 33
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: IN
28162: IFFALSE 28178
// PlaceWeaponTurret ( b , weapon ) ;
28164: LD_VAR 0 8
28168: PPUSH
28169: LD_VAR 0 4
28173: PPUSH
28174: CALL_OW 431
// end ;
28178: LD_VAR 0 7
28182: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28183: LD_INT 0
28185: PPUSH
28186: PPUSH
28187: PPUSH
28188: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28189: LD_ADDR_VAR 0 4
28193: PUSH
28194: LD_INT 22
28196: PUSH
28197: LD_OWVAR 2
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: LD_INT 30
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 30
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: LIST
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PPUSH
28238: CALL_OW 69
28242: ST_TO_ADDR
// if not tmp then
28243: LD_VAR 0 4
28247: NOT
28248: IFFALSE 28252
// exit ;
28250: GO 28311
// for i in tmp do
28252: LD_ADDR_VAR 0 2
28256: PUSH
28257: LD_VAR 0 4
28261: PUSH
28262: FOR_IN
28263: IFFALSE 28309
// for j = 1 to 3 do
28265: LD_ADDR_VAR 0 3
28269: PUSH
28270: DOUBLE
28271: LD_INT 1
28273: DEC
28274: ST_TO_ADDR
28275: LD_INT 3
28277: PUSH
28278: FOR_TO
28279: IFFALSE 28305
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28281: LD_VAR 0 2
28285: PPUSH
28286: CALL_OW 274
28290: PPUSH
28291: LD_VAR 0 3
28295: PPUSH
28296: LD_INT 99999
28298: PPUSH
28299: CALL_OW 277
28303: GO 28278
28305: POP
28306: POP
28307: GO 28262
28309: POP
28310: POP
// end ;
28311: LD_VAR 0 1
28315: RET
// export function hHackSetLevel10 ; var i , j ; begin
28316: LD_INT 0
28318: PPUSH
28319: PPUSH
28320: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28321: LD_ADDR_VAR 0 2
28325: PUSH
28326: LD_INT 21
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PPUSH
28336: CALL_OW 69
28340: PUSH
28341: FOR_IN
28342: IFFALSE 28394
// if IsSelected ( i ) then
28344: LD_VAR 0 2
28348: PPUSH
28349: CALL_OW 306
28353: IFFALSE 28392
// begin for j := 1 to 4 do
28355: LD_ADDR_VAR 0 3
28359: PUSH
28360: DOUBLE
28361: LD_INT 1
28363: DEC
28364: ST_TO_ADDR
28365: LD_INT 4
28367: PUSH
28368: FOR_TO
28369: IFFALSE 28390
// SetSkill ( i , j , 10 ) ;
28371: LD_VAR 0 2
28375: PPUSH
28376: LD_VAR 0 3
28380: PPUSH
28381: LD_INT 10
28383: PPUSH
28384: CALL_OW 237
28388: GO 28368
28390: POP
28391: POP
// end ;
28392: GO 28341
28394: POP
28395: POP
// end ;
28396: LD_VAR 0 1
28400: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28401: LD_INT 0
28403: PPUSH
28404: PPUSH
28405: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28406: LD_ADDR_VAR 0 2
28410: PUSH
28411: LD_INT 22
28413: PUSH
28414: LD_OWVAR 2
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 21
28425: PUSH
28426: LD_INT 1
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PPUSH
28437: CALL_OW 69
28441: PUSH
28442: FOR_IN
28443: IFFALSE 28484
// begin for j := 1 to 4 do
28445: LD_ADDR_VAR 0 3
28449: PUSH
28450: DOUBLE
28451: LD_INT 1
28453: DEC
28454: ST_TO_ADDR
28455: LD_INT 4
28457: PUSH
28458: FOR_TO
28459: IFFALSE 28480
// SetSkill ( i , j , 10 ) ;
28461: LD_VAR 0 2
28465: PPUSH
28466: LD_VAR 0 3
28470: PPUSH
28471: LD_INT 10
28473: PPUSH
28474: CALL_OW 237
28478: GO 28458
28480: POP
28481: POP
// end ;
28482: GO 28442
28484: POP
28485: POP
// end ;
28486: LD_VAR 0 1
28490: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28491: LD_INT 0
28493: PPUSH
// uc_side := your_side ;
28494: LD_ADDR_OWVAR 20
28498: PUSH
28499: LD_OWVAR 2
28503: ST_TO_ADDR
// uc_nation := nation ;
28504: LD_ADDR_OWVAR 21
28508: PUSH
28509: LD_VAR 0 1
28513: ST_TO_ADDR
// InitHc ;
28514: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28518: LD_INT 0
28520: PPUSH
28521: LD_VAR 0 2
28525: PPUSH
28526: LD_VAR 0 3
28530: PPUSH
28531: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28535: LD_VAR 0 4
28539: PPUSH
28540: LD_VAR 0 5
28544: PPUSH
28545: CALL_OW 428
28549: PUSH
28550: LD_INT 0
28552: EQUAL
28553: IFFALSE 28577
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28555: CALL_OW 44
28559: PPUSH
28560: LD_VAR 0 4
28564: PPUSH
28565: LD_VAR 0 5
28569: PPUSH
28570: LD_INT 1
28572: PPUSH
28573: CALL_OW 48
// end ;
28577: LD_VAR 0 6
28581: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28582: LD_INT 0
28584: PPUSH
28585: PPUSH
// uc_side := your_side ;
28586: LD_ADDR_OWVAR 20
28590: PUSH
28591: LD_OWVAR 2
28595: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28596: LD_VAR 0 1
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: LD_INT 3
28609: PUSH
28610: LD_INT 4
28612: PUSH
28613: LD_INT 5
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: IN
28623: IFFALSE 28635
// uc_nation := nation_american else
28625: LD_ADDR_OWVAR 21
28629: PUSH
28630: LD_INT 1
28632: ST_TO_ADDR
28633: GO 28678
// if chassis in [ 11 , 12 , 13 , 14 ] then
28635: LD_VAR 0 1
28639: PUSH
28640: LD_INT 11
28642: PUSH
28643: LD_INT 12
28645: PUSH
28646: LD_INT 13
28648: PUSH
28649: LD_INT 14
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: IN
28658: IFFALSE 28670
// uc_nation := nation_arabian else
28660: LD_ADDR_OWVAR 21
28664: PUSH
28665: LD_INT 2
28667: ST_TO_ADDR
28668: GO 28678
// uc_nation := nation_russian ;
28670: LD_ADDR_OWVAR 21
28674: PUSH
28675: LD_INT 3
28677: ST_TO_ADDR
// vc_chassis := chassis ;
28678: LD_ADDR_OWVAR 37
28682: PUSH
28683: LD_VAR 0 1
28687: ST_TO_ADDR
// vc_engine := engine ;
28688: LD_ADDR_OWVAR 39
28692: PUSH
28693: LD_VAR 0 2
28697: ST_TO_ADDR
// vc_control := control ;
28698: LD_ADDR_OWVAR 38
28702: PUSH
28703: LD_VAR 0 3
28707: ST_TO_ADDR
// vc_weapon := weapon ;
28708: LD_ADDR_OWVAR 40
28712: PUSH
28713: LD_VAR 0 4
28717: ST_TO_ADDR
// un := CreateVehicle ;
28718: LD_ADDR_VAR 0 8
28722: PUSH
28723: CALL_OW 45
28727: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28728: LD_VAR 0 8
28732: PPUSH
28733: LD_INT 0
28735: PPUSH
28736: LD_INT 5
28738: PPUSH
28739: CALL_OW 12
28743: PPUSH
28744: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28748: LD_VAR 0 8
28752: PPUSH
28753: LD_VAR 0 5
28757: PPUSH
28758: LD_VAR 0 6
28762: PPUSH
28763: LD_INT 1
28765: PPUSH
28766: CALL_OW 48
// end ;
28770: LD_VAR 0 7
28774: RET
// export hInvincible ; every 1 do
28775: GO 28777
28777: DISABLE
// hInvincible := [ ] ;
28778: LD_ADDR_EXP 107
28782: PUSH
28783: EMPTY
28784: ST_TO_ADDR
28785: END
// every 10 do var i ;
28786: GO 28788
28788: DISABLE
28789: LD_INT 0
28791: PPUSH
// begin enable ;
28792: ENABLE
// if not hInvincible then
28793: LD_EXP 107
28797: NOT
28798: IFFALSE 28802
// exit ;
28800: GO 28846
// for i in hInvincible do
28802: LD_ADDR_VAR 0 1
28806: PUSH
28807: LD_EXP 107
28811: PUSH
28812: FOR_IN
28813: IFFALSE 28844
// if GetLives ( i ) < 1000 then
28815: LD_VAR 0 1
28819: PPUSH
28820: CALL_OW 256
28824: PUSH
28825: LD_INT 1000
28827: LESS
28828: IFFALSE 28842
// SetLives ( i , 1000 ) ;
28830: LD_VAR 0 1
28834: PPUSH
28835: LD_INT 1000
28837: PPUSH
28838: CALL_OW 234
28842: GO 28812
28844: POP
28845: POP
// end ;
28846: PPOPN 1
28848: END
// export function hHackInvincible ; var i ; begin
28849: LD_INT 0
28851: PPUSH
28852: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28853: LD_ADDR_VAR 0 2
28857: PUSH
28858: LD_INT 2
28860: PUSH
28861: LD_INT 21
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 21
28873: PUSH
28874: LD_INT 2
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: PPUSH
28886: CALL_OW 69
28890: PUSH
28891: FOR_IN
28892: IFFALSE 28953
// if IsSelected ( i ) then
28894: LD_VAR 0 2
28898: PPUSH
28899: CALL_OW 306
28903: IFFALSE 28951
// begin if i in hInvincible then
28905: LD_VAR 0 2
28909: PUSH
28910: LD_EXP 107
28914: IN
28915: IFFALSE 28935
// hInvincible := hInvincible diff i else
28917: LD_ADDR_EXP 107
28921: PUSH
28922: LD_EXP 107
28926: PUSH
28927: LD_VAR 0 2
28931: DIFF
28932: ST_TO_ADDR
28933: GO 28951
// hInvincible := hInvincible union i ;
28935: LD_ADDR_EXP 107
28939: PUSH
28940: LD_EXP 107
28944: PUSH
28945: LD_VAR 0 2
28949: UNION
28950: ST_TO_ADDR
// end ;
28951: GO 28891
28953: POP
28954: POP
// end ;
28955: LD_VAR 0 1
28959: RET
// export function hHackInvisible ; var i , j ; begin
28960: LD_INT 0
28962: PPUSH
28963: PPUSH
28964: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28965: LD_ADDR_VAR 0 2
28969: PUSH
28970: LD_INT 21
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PPUSH
28980: CALL_OW 69
28984: PUSH
28985: FOR_IN
28986: IFFALSE 29010
// if IsSelected ( i ) then
28988: LD_VAR 0 2
28992: PPUSH
28993: CALL_OW 306
28997: IFFALSE 29008
// ComForceInvisible ( i ) ;
28999: LD_VAR 0 2
29003: PPUSH
29004: CALL_OW 496
29008: GO 28985
29010: POP
29011: POP
// end ;
29012: LD_VAR 0 1
29016: RET
// export function hHackChangeYourSide ; begin
29017: LD_INT 0
29019: PPUSH
// if your_side = 8 then
29020: LD_OWVAR 2
29024: PUSH
29025: LD_INT 8
29027: EQUAL
29028: IFFALSE 29040
// your_side := 0 else
29030: LD_ADDR_OWVAR 2
29034: PUSH
29035: LD_INT 0
29037: ST_TO_ADDR
29038: GO 29054
// your_side := your_side + 1 ;
29040: LD_ADDR_OWVAR 2
29044: PUSH
29045: LD_OWVAR 2
29049: PUSH
29050: LD_INT 1
29052: PLUS
29053: ST_TO_ADDR
// end ;
29054: LD_VAR 0 1
29058: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29059: LD_INT 0
29061: PPUSH
29062: PPUSH
29063: PPUSH
// for i in all_units do
29064: LD_ADDR_VAR 0 2
29068: PUSH
29069: LD_OWVAR 3
29073: PUSH
29074: FOR_IN
29075: IFFALSE 29153
// if IsSelected ( i ) then
29077: LD_VAR 0 2
29081: PPUSH
29082: CALL_OW 306
29086: IFFALSE 29151
// begin j := GetSide ( i ) ;
29088: LD_ADDR_VAR 0 3
29092: PUSH
29093: LD_VAR 0 2
29097: PPUSH
29098: CALL_OW 255
29102: ST_TO_ADDR
// if j = 8 then
29103: LD_VAR 0 3
29107: PUSH
29108: LD_INT 8
29110: EQUAL
29111: IFFALSE 29123
// j := 0 else
29113: LD_ADDR_VAR 0 3
29117: PUSH
29118: LD_INT 0
29120: ST_TO_ADDR
29121: GO 29137
// j := j + 1 ;
29123: LD_ADDR_VAR 0 3
29127: PUSH
29128: LD_VAR 0 3
29132: PUSH
29133: LD_INT 1
29135: PLUS
29136: ST_TO_ADDR
// SetSide ( i , j ) ;
29137: LD_VAR 0 2
29141: PPUSH
29142: LD_VAR 0 3
29146: PPUSH
29147: CALL_OW 235
// end ;
29151: GO 29074
29153: POP
29154: POP
// end ;
29155: LD_VAR 0 1
29159: RET
// export function hHackFog ; begin
29160: LD_INT 0
29162: PPUSH
// FogOff ( true ) ;
29163: LD_INT 1
29165: PPUSH
29166: CALL_OW 344
// end ;
29170: LD_VAR 0 1
29174: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29175: LD_INT 0
29177: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29178: LD_VAR 0 1
29182: PPUSH
29183: LD_VAR 0 2
29187: PPUSH
29188: LD_VAR 0 3
29192: PPUSH
29193: LD_INT 1
29195: PPUSH
29196: LD_INT 1
29198: PPUSH
29199: CALL_OW 483
// CenterOnXY ( x , y ) ;
29203: LD_VAR 0 2
29207: PPUSH
29208: LD_VAR 0 3
29212: PPUSH
29213: CALL_OW 84
// end ; end_of_file
29217: LD_VAR 0 4
29221: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
29222: LD_INT 0
29224: PPUSH
29225: PPUSH
29226: PPUSH
29227: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
29228: LD_VAR 0 1
29232: PPUSH
29233: CALL_OW 264
29237: PUSH
29238: LD_EXP 39
29242: EQUAL
29243: IFFALSE 29315
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29245: LD_INT 68
29247: PPUSH
29248: LD_VAR 0 1
29252: PPUSH
29253: CALL_OW 255
29257: PPUSH
29258: CALL_OW 321
29262: PUSH
29263: LD_INT 2
29265: EQUAL
29266: IFFALSE 29278
// eff := 70 else
29268: LD_ADDR_VAR 0 4
29272: PUSH
29273: LD_INT 70
29275: ST_TO_ADDR
29276: GO 29286
// eff := 30 ;
29278: LD_ADDR_VAR 0 4
29282: PUSH
29283: LD_INT 30
29285: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29286: LD_VAR 0 1
29290: PPUSH
29291: CALL_OW 250
29295: PPUSH
29296: LD_VAR 0 1
29300: PPUSH
29301: CALL_OW 251
29305: PPUSH
29306: LD_VAR 0 4
29310: PPUSH
29311: CALL_OW 495
// end ; end ;
29315: LD_VAR 0 2
29319: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29320: LD_INT 0
29322: PPUSH
// end ;
29323: LD_VAR 0 4
29327: RET
// export function SOS_Command ( cmd ) ; begin
29328: LD_INT 0
29330: PPUSH
// end ;
29331: LD_VAR 0 2
29335: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29336: LD_INT 0
29338: PPUSH
// if cmd = 121 then
29339: LD_VAR 0 1
29343: PUSH
29344: LD_INT 121
29346: EQUAL
29347: IFFALSE 29349
// end ;
29349: LD_VAR 0 6
29353: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29354: LD_INT 0
29356: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29357: LD_VAR 0 1
29361: PUSH
29362: LD_INT 250
29364: EQUAL
29365: PUSH
29366: LD_VAR 0 2
29370: PPUSH
29371: CALL_OW 264
29375: PUSH
29376: LD_EXP 42
29380: EQUAL
29381: AND
29382: IFFALSE 29403
// MinerPlaceMine ( unit , x , y ) ;
29384: LD_VAR 0 2
29388: PPUSH
29389: LD_VAR 0 4
29393: PPUSH
29394: LD_VAR 0 5
29398: PPUSH
29399: CALL 31752 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29403: LD_VAR 0 1
29407: PUSH
29408: LD_INT 251
29410: EQUAL
29411: PUSH
29412: LD_VAR 0 2
29416: PPUSH
29417: CALL_OW 264
29421: PUSH
29422: LD_EXP 42
29426: EQUAL
29427: AND
29428: IFFALSE 29449
// MinerDetonateMine ( unit , x , y ) ;
29430: LD_VAR 0 2
29434: PPUSH
29435: LD_VAR 0 4
29439: PPUSH
29440: LD_VAR 0 5
29444: PPUSH
29445: CALL 32029 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29449: LD_VAR 0 1
29453: PUSH
29454: LD_INT 252
29456: EQUAL
29457: PUSH
29458: LD_VAR 0 2
29462: PPUSH
29463: CALL_OW 264
29467: PUSH
29468: LD_EXP 42
29472: EQUAL
29473: AND
29474: IFFALSE 29495
// MinerCreateMinefield ( unit , x , y ) ;
29476: LD_VAR 0 2
29480: PPUSH
29481: LD_VAR 0 4
29485: PPUSH
29486: LD_VAR 0 5
29490: PPUSH
29491: CALL 32446 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29495: LD_VAR 0 1
29499: PUSH
29500: LD_INT 253
29502: EQUAL
29503: PUSH
29504: LD_VAR 0 2
29508: PPUSH
29509: CALL_OW 257
29513: PUSH
29514: LD_INT 5
29516: EQUAL
29517: AND
29518: IFFALSE 29539
// ComBinocular ( unit , x , y ) ;
29520: LD_VAR 0 2
29524: PPUSH
29525: LD_VAR 0 4
29529: PPUSH
29530: LD_VAR 0 5
29534: PPUSH
29535: CALL 32817 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29539: LD_VAR 0 1
29543: PUSH
29544: LD_INT 254
29546: EQUAL
29547: PUSH
29548: LD_VAR 0 2
29552: PPUSH
29553: CALL_OW 264
29557: PUSH
29558: LD_EXP 37
29562: EQUAL
29563: AND
29564: PUSH
29565: LD_VAR 0 3
29569: PPUSH
29570: CALL_OW 263
29574: PUSH
29575: LD_INT 3
29577: EQUAL
29578: AND
29579: IFFALSE 29595
// HackDestroyVehicle ( unit , selectedUnit ) ;
29581: LD_VAR 0 2
29585: PPUSH
29586: LD_VAR 0 3
29590: PPUSH
29591: CALL 31112 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29595: LD_VAR 0 1
29599: PUSH
29600: LD_INT 255
29602: EQUAL
29603: PUSH
29604: LD_VAR 0 2
29608: PPUSH
29609: CALL_OW 264
29613: PUSH
29614: LD_INT 14
29616: PUSH
29617: LD_INT 53
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: IN
29624: AND
29625: PUSH
29626: LD_VAR 0 4
29630: PPUSH
29631: LD_VAR 0 5
29635: PPUSH
29636: CALL_OW 488
29640: AND
29641: IFFALSE 29665
// CutTreeXYR ( unit , x , y , 12 ) ;
29643: LD_VAR 0 2
29647: PPUSH
29648: LD_VAR 0 4
29652: PPUSH
29653: LD_VAR 0 5
29657: PPUSH
29658: LD_INT 12
29660: PPUSH
29661: CALL 29678 0 4
// end ;
29665: LD_VAR 0 6
29669: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
29670: LD_INT 0
29672: PPUSH
// end ;
29673: LD_VAR 0 4
29677: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29678: LD_INT 0
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
29685: PPUSH
29686: PPUSH
29687: PPUSH
29688: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29689: LD_VAR 0 1
29693: NOT
29694: PUSH
29695: LD_VAR 0 2
29699: PPUSH
29700: LD_VAR 0 3
29704: PPUSH
29705: CALL_OW 488
29709: NOT
29710: OR
29711: PUSH
29712: LD_VAR 0 4
29716: NOT
29717: OR
29718: IFFALSE 29722
// exit ;
29720: GO 30062
// list := [ ] ;
29722: LD_ADDR_VAR 0 13
29726: PUSH
29727: EMPTY
29728: ST_TO_ADDR
// if x - r < 0 then
29729: LD_VAR 0 2
29733: PUSH
29734: LD_VAR 0 4
29738: MINUS
29739: PUSH
29740: LD_INT 0
29742: LESS
29743: IFFALSE 29755
// min_x := 0 else
29745: LD_ADDR_VAR 0 7
29749: PUSH
29750: LD_INT 0
29752: ST_TO_ADDR
29753: GO 29771
// min_x := x - r ;
29755: LD_ADDR_VAR 0 7
29759: PUSH
29760: LD_VAR 0 2
29764: PUSH
29765: LD_VAR 0 4
29769: MINUS
29770: ST_TO_ADDR
// if y - r < 0 then
29771: LD_VAR 0 3
29775: PUSH
29776: LD_VAR 0 4
29780: MINUS
29781: PUSH
29782: LD_INT 0
29784: LESS
29785: IFFALSE 29797
// min_y := 0 else
29787: LD_ADDR_VAR 0 8
29791: PUSH
29792: LD_INT 0
29794: ST_TO_ADDR
29795: GO 29813
// min_y := y - r ;
29797: LD_ADDR_VAR 0 8
29801: PUSH
29802: LD_VAR 0 3
29806: PUSH
29807: LD_VAR 0 4
29811: MINUS
29812: ST_TO_ADDR
// max_x := x + r ;
29813: LD_ADDR_VAR 0 9
29817: PUSH
29818: LD_VAR 0 2
29822: PUSH
29823: LD_VAR 0 4
29827: PLUS
29828: ST_TO_ADDR
// max_y := y + r ;
29829: LD_ADDR_VAR 0 10
29833: PUSH
29834: LD_VAR 0 3
29838: PUSH
29839: LD_VAR 0 4
29843: PLUS
29844: ST_TO_ADDR
// for _x = min_x to max_x do
29845: LD_ADDR_VAR 0 11
29849: PUSH
29850: DOUBLE
29851: LD_VAR 0 7
29855: DEC
29856: ST_TO_ADDR
29857: LD_VAR 0 9
29861: PUSH
29862: FOR_TO
29863: IFFALSE 29980
// for _y = min_y to max_y do
29865: LD_ADDR_VAR 0 12
29869: PUSH
29870: DOUBLE
29871: LD_VAR 0 8
29875: DEC
29876: ST_TO_ADDR
29877: LD_VAR 0 10
29881: PUSH
29882: FOR_TO
29883: IFFALSE 29976
// begin if not ValidHex ( _x , _y ) then
29885: LD_VAR 0 11
29889: PPUSH
29890: LD_VAR 0 12
29894: PPUSH
29895: CALL_OW 488
29899: NOT
29900: IFFALSE 29904
// continue ;
29902: GO 29882
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29904: LD_VAR 0 11
29908: PPUSH
29909: LD_VAR 0 12
29913: PPUSH
29914: CALL_OW 351
29918: PUSH
29919: LD_VAR 0 11
29923: PPUSH
29924: LD_VAR 0 12
29928: PPUSH
29929: CALL_OW 554
29933: AND
29934: IFFALSE 29974
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29936: LD_ADDR_VAR 0 13
29940: PUSH
29941: LD_VAR 0 13
29945: PPUSH
29946: LD_VAR 0 13
29950: PUSH
29951: LD_INT 1
29953: PLUS
29954: PPUSH
29955: LD_VAR 0 11
29959: PUSH
29960: LD_VAR 0 12
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PPUSH
29969: CALL_OW 2
29973: ST_TO_ADDR
// end ;
29974: GO 29882
29976: POP
29977: POP
29978: GO 29862
29980: POP
29981: POP
// if not list then
29982: LD_VAR 0 13
29986: NOT
29987: IFFALSE 29991
// exit ;
29989: GO 30062
// for i in list do
29991: LD_ADDR_VAR 0 6
29995: PUSH
29996: LD_VAR 0 13
30000: PUSH
30001: FOR_IN
30002: IFFALSE 30060
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30004: LD_VAR 0 1
30008: PPUSH
30009: LD_STRING M
30011: PUSH
30012: LD_VAR 0 6
30016: PUSH
30017: LD_INT 1
30019: ARRAY
30020: PUSH
30021: LD_VAR 0 6
30025: PUSH
30026: LD_INT 2
30028: ARRAY
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: PUSH
30051: EMPTY
30052: LIST
30053: PPUSH
30054: CALL_OW 447
30058: GO 30001
30060: POP
30061: POP
// end ;
30062: LD_VAR 0 5
30066: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30067: LD_EXP 110
30071: NOT
30072: IFFALSE 30122
30074: GO 30076
30076: DISABLE
// begin initHack := true ;
30077: LD_ADDR_EXP 110
30081: PUSH
30082: LD_INT 1
30084: ST_TO_ADDR
// hackTanks := [ ] ;
30085: LD_ADDR_EXP 111
30089: PUSH
30090: EMPTY
30091: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30092: LD_ADDR_EXP 112
30096: PUSH
30097: EMPTY
30098: ST_TO_ADDR
// hackLimit := 3 ;
30099: LD_ADDR_EXP 113
30103: PUSH
30104: LD_INT 3
30106: ST_TO_ADDR
// hackDist := 12 ;
30107: LD_ADDR_EXP 114
30111: PUSH
30112: LD_INT 12
30114: ST_TO_ADDR
// hackCounter := [ ] ;
30115: LD_ADDR_EXP 115
30119: PUSH
30120: EMPTY
30121: ST_TO_ADDR
// end ;
30122: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30123: LD_EXP 110
30127: PUSH
30128: LD_INT 34
30130: PUSH
30131: LD_EXP 37
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PPUSH
30140: CALL_OW 69
30144: AND
30145: IFFALSE 30400
30147: GO 30149
30149: DISABLE
30150: LD_INT 0
30152: PPUSH
30153: PPUSH
// begin enable ;
30154: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30155: LD_ADDR_VAR 0 1
30159: PUSH
30160: LD_INT 34
30162: PUSH
30163: LD_EXP 37
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PPUSH
30172: CALL_OW 69
30176: PUSH
30177: FOR_IN
30178: IFFALSE 30398
// begin if not i in hackTanks then
30180: LD_VAR 0 1
30184: PUSH
30185: LD_EXP 111
30189: IN
30190: NOT
30191: IFFALSE 30274
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30193: LD_ADDR_EXP 111
30197: PUSH
30198: LD_EXP 111
30202: PPUSH
30203: LD_EXP 111
30207: PUSH
30208: LD_INT 1
30210: PLUS
30211: PPUSH
30212: LD_VAR 0 1
30216: PPUSH
30217: CALL_OW 1
30221: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30222: LD_ADDR_EXP 112
30226: PUSH
30227: LD_EXP 112
30231: PPUSH
30232: LD_EXP 112
30236: PUSH
30237: LD_INT 1
30239: PLUS
30240: PPUSH
30241: EMPTY
30242: PPUSH
30243: CALL_OW 1
30247: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30248: LD_ADDR_EXP 115
30252: PUSH
30253: LD_EXP 115
30257: PPUSH
30258: LD_EXP 115
30262: PUSH
30263: LD_INT 1
30265: PLUS
30266: PPUSH
30267: EMPTY
30268: PPUSH
30269: CALL_OW 1
30273: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30274: LD_VAR 0 1
30278: PPUSH
30279: CALL_OW 302
30283: NOT
30284: IFFALSE 30297
// begin HackUnlinkAll ( i ) ;
30286: LD_VAR 0 1
30290: PPUSH
30291: CALL 30403 0 1
// continue ;
30295: GO 30177
// end ; HackCheckCapturedStatus ( i ) ;
30297: LD_VAR 0 1
30301: PPUSH
30302: CALL 30846 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30306: LD_ADDR_VAR 0 2
30310: PUSH
30311: LD_INT 81
30313: PUSH
30314: LD_VAR 0 1
30318: PPUSH
30319: CALL_OW 255
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 33
30330: PUSH
30331: LD_INT 3
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 91
30340: PUSH
30341: LD_VAR 0 1
30345: PUSH
30346: LD_EXP 114
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 50
30358: PUSH
30359: EMPTY
30360: LIST
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: PPUSH
30368: CALL_OW 69
30372: ST_TO_ADDR
// if not tmp then
30373: LD_VAR 0 2
30377: NOT
30378: IFFALSE 30382
// continue ;
30380: GO 30177
// HackLink ( i , tmp ) ;
30382: LD_VAR 0 1
30386: PPUSH
30387: LD_VAR 0 2
30391: PPUSH
30392: CALL 30539 0 2
// end ;
30396: GO 30177
30398: POP
30399: POP
// end ;
30400: PPOPN 2
30402: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30403: LD_INT 0
30405: PPUSH
30406: PPUSH
30407: PPUSH
// if not hack in hackTanks then
30408: LD_VAR 0 1
30412: PUSH
30413: LD_EXP 111
30417: IN
30418: NOT
30419: IFFALSE 30423
// exit ;
30421: GO 30534
// index := GetElementIndex ( hackTanks , hack ) ;
30423: LD_ADDR_VAR 0 4
30427: PUSH
30428: LD_EXP 111
30432: PPUSH
30433: LD_VAR 0 1
30437: PPUSH
30438: CALL 37968 0 2
30442: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30443: LD_EXP 112
30447: PUSH
30448: LD_VAR 0 4
30452: ARRAY
30453: IFFALSE 30534
// begin for i in hackTanksCaptured [ index ] do
30455: LD_ADDR_VAR 0 3
30459: PUSH
30460: LD_EXP 112
30464: PUSH
30465: LD_VAR 0 4
30469: ARRAY
30470: PUSH
30471: FOR_IN
30472: IFFALSE 30498
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30474: LD_VAR 0 3
30478: PUSH
30479: LD_INT 1
30481: ARRAY
30482: PPUSH
30483: LD_VAR 0 3
30487: PUSH
30488: LD_INT 2
30490: ARRAY
30491: PPUSH
30492: CALL_OW 235
30496: GO 30471
30498: POP
30499: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30500: LD_ADDR_EXP 112
30504: PUSH
30505: LD_EXP 112
30509: PPUSH
30510: LD_VAR 0 4
30514: PPUSH
30515: EMPTY
30516: PPUSH
30517: CALL_OW 1
30521: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30522: LD_VAR 0 1
30526: PPUSH
30527: LD_INT 0
30529: PPUSH
30530: CALL_OW 505
// end ; end ;
30534: LD_VAR 0 2
30538: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30539: LD_INT 0
30541: PPUSH
30542: PPUSH
30543: PPUSH
// if not hack in hackTanks or not vehicles then
30544: LD_VAR 0 1
30548: PUSH
30549: LD_EXP 111
30553: IN
30554: NOT
30555: PUSH
30556: LD_VAR 0 2
30560: NOT
30561: OR
30562: IFFALSE 30566
// exit ;
30564: GO 30841
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30566: LD_ADDR_VAR 0 2
30570: PUSH
30571: LD_VAR 0 1
30575: PPUSH
30576: LD_VAR 0 2
30580: PPUSH
30581: LD_INT 1
30583: PPUSH
30584: LD_INT 1
30586: PPUSH
30587: CALL 38618 0 4
30591: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30592: LD_ADDR_VAR 0 5
30596: PUSH
30597: LD_EXP 111
30601: PPUSH
30602: LD_VAR 0 1
30606: PPUSH
30607: CALL 37968 0 2
30611: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30612: LD_EXP 112
30616: PUSH
30617: LD_VAR 0 5
30621: ARRAY
30622: PUSH
30623: LD_EXP 113
30627: LESS
30628: IFFALSE 30817
// begin for i := 1 to vehicles do
30630: LD_ADDR_VAR 0 4
30634: PUSH
30635: DOUBLE
30636: LD_INT 1
30638: DEC
30639: ST_TO_ADDR
30640: LD_VAR 0 2
30644: PUSH
30645: FOR_TO
30646: IFFALSE 30815
// begin if hackTanksCaptured [ index ] = hackLimit then
30648: LD_EXP 112
30652: PUSH
30653: LD_VAR 0 5
30657: ARRAY
30658: PUSH
30659: LD_EXP 113
30663: EQUAL
30664: IFFALSE 30668
// break ;
30666: GO 30815
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30668: LD_ADDR_EXP 115
30672: PUSH
30673: LD_EXP 115
30677: PPUSH
30678: LD_VAR 0 5
30682: PPUSH
30683: LD_EXP 115
30687: PUSH
30688: LD_VAR 0 5
30692: ARRAY
30693: PUSH
30694: LD_INT 1
30696: PLUS
30697: PPUSH
30698: CALL_OW 1
30702: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30703: LD_ADDR_EXP 112
30707: PUSH
30708: LD_EXP 112
30712: PPUSH
30713: LD_VAR 0 5
30717: PUSH
30718: LD_EXP 112
30722: PUSH
30723: LD_VAR 0 5
30727: ARRAY
30728: PUSH
30729: LD_INT 1
30731: PLUS
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PPUSH
30737: LD_VAR 0 2
30741: PUSH
30742: LD_VAR 0 4
30746: ARRAY
30747: PUSH
30748: LD_VAR 0 2
30752: PUSH
30753: LD_VAR 0 4
30757: ARRAY
30758: PPUSH
30759: CALL_OW 255
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PPUSH
30768: CALL 38183 0 3
30772: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30773: LD_VAR 0 2
30777: PUSH
30778: LD_VAR 0 4
30782: ARRAY
30783: PPUSH
30784: LD_VAR 0 1
30788: PPUSH
30789: CALL_OW 255
30793: PPUSH
30794: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30798: LD_VAR 0 2
30802: PUSH
30803: LD_VAR 0 4
30807: ARRAY
30808: PPUSH
30809: CALL_OW 141
// end ;
30813: GO 30645
30815: POP
30816: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30817: LD_VAR 0 1
30821: PPUSH
30822: LD_EXP 112
30826: PUSH
30827: LD_VAR 0 5
30831: ARRAY
30832: PUSH
30833: LD_INT 0
30835: PLUS
30836: PPUSH
30837: CALL_OW 505
// end ;
30841: LD_VAR 0 3
30845: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30846: LD_INT 0
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
// if not hack in hackTanks then
30852: LD_VAR 0 1
30856: PUSH
30857: LD_EXP 111
30861: IN
30862: NOT
30863: IFFALSE 30867
// exit ;
30865: GO 31107
// index := GetElementIndex ( hackTanks , hack ) ;
30867: LD_ADDR_VAR 0 4
30871: PUSH
30872: LD_EXP 111
30876: PPUSH
30877: LD_VAR 0 1
30881: PPUSH
30882: CALL 37968 0 2
30886: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30887: LD_ADDR_VAR 0 3
30891: PUSH
30892: DOUBLE
30893: LD_EXP 112
30897: PUSH
30898: LD_VAR 0 4
30902: ARRAY
30903: INC
30904: ST_TO_ADDR
30905: LD_INT 1
30907: PUSH
30908: FOR_DOWNTO
30909: IFFALSE 31081
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30911: LD_ADDR_VAR 0 5
30915: PUSH
30916: LD_EXP 112
30920: PUSH
30921: LD_VAR 0 4
30925: ARRAY
30926: PUSH
30927: LD_VAR 0 3
30931: ARRAY
30932: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30933: LD_VAR 0 5
30937: PUSH
30938: LD_INT 1
30940: ARRAY
30941: PPUSH
30942: CALL_OW 302
30946: NOT
30947: PUSH
30948: LD_VAR 0 5
30952: PUSH
30953: LD_INT 1
30955: ARRAY
30956: PPUSH
30957: CALL_OW 255
30961: PUSH
30962: LD_VAR 0 1
30966: PPUSH
30967: CALL_OW 255
30971: NONEQUAL
30972: OR
30973: IFFALSE 31079
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30975: LD_VAR 0 5
30979: PUSH
30980: LD_INT 1
30982: ARRAY
30983: PPUSH
30984: CALL_OW 305
30988: PUSH
30989: LD_VAR 0 5
30993: PUSH
30994: LD_INT 1
30996: ARRAY
30997: PPUSH
30998: CALL_OW 255
31002: PUSH
31003: LD_VAR 0 1
31007: PPUSH
31008: CALL_OW 255
31012: EQUAL
31013: AND
31014: IFFALSE 31038
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31016: LD_VAR 0 5
31020: PUSH
31021: LD_INT 1
31023: ARRAY
31024: PPUSH
31025: LD_VAR 0 5
31029: PUSH
31030: LD_INT 2
31032: ARRAY
31033: PPUSH
31034: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31038: LD_ADDR_EXP 112
31042: PUSH
31043: LD_EXP 112
31047: PPUSH
31048: LD_VAR 0 4
31052: PPUSH
31053: LD_EXP 112
31057: PUSH
31058: LD_VAR 0 4
31062: ARRAY
31063: PPUSH
31064: LD_VAR 0 3
31068: PPUSH
31069: CALL_OW 3
31073: PPUSH
31074: CALL_OW 1
31078: ST_TO_ADDR
// end ; end ;
31079: GO 30908
31081: POP
31082: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31083: LD_VAR 0 1
31087: PPUSH
31088: LD_EXP 112
31092: PUSH
31093: LD_VAR 0 4
31097: ARRAY
31098: PUSH
31099: LD_INT 0
31101: PLUS
31102: PPUSH
31103: CALL_OW 505
// end ;
31107: LD_VAR 0 2
31111: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31112: LD_INT 0
31114: PPUSH
31115: PPUSH
31116: PPUSH
31117: PPUSH
// if not hack in hackTanks then
31118: LD_VAR 0 1
31122: PUSH
31123: LD_EXP 111
31127: IN
31128: NOT
31129: IFFALSE 31133
// exit ;
31131: GO 31218
// index := GetElementIndex ( hackTanks , hack ) ;
31133: LD_ADDR_VAR 0 5
31137: PUSH
31138: LD_EXP 111
31142: PPUSH
31143: LD_VAR 0 1
31147: PPUSH
31148: CALL 37968 0 2
31152: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31153: LD_ADDR_VAR 0 4
31157: PUSH
31158: DOUBLE
31159: LD_INT 1
31161: DEC
31162: ST_TO_ADDR
31163: LD_EXP 112
31167: PUSH
31168: LD_VAR 0 5
31172: ARRAY
31173: PUSH
31174: FOR_TO
31175: IFFALSE 31216
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31177: LD_EXP 112
31181: PUSH
31182: LD_VAR 0 5
31186: ARRAY
31187: PUSH
31188: LD_VAR 0 4
31192: ARRAY
31193: PUSH
31194: LD_INT 1
31196: ARRAY
31197: PUSH
31198: LD_VAR 0 2
31202: EQUAL
31203: IFFALSE 31214
// KillUnit ( vehicle ) ;
31205: LD_VAR 0 2
31209: PPUSH
31210: CALL_OW 66
31214: GO 31174
31216: POP
31217: POP
// end ;
31218: LD_VAR 0 3
31222: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31223: LD_EXP 116
31227: NOT
31228: IFFALSE 31263
31230: GO 31232
31232: DISABLE
// begin initMiner := true ;
31233: LD_ADDR_EXP 116
31237: PUSH
31238: LD_INT 1
31240: ST_TO_ADDR
// minersList := [ ] ;
31241: LD_ADDR_EXP 117
31245: PUSH
31246: EMPTY
31247: ST_TO_ADDR
// minerMinesList := [ ] ;
31248: LD_ADDR_EXP 118
31252: PUSH
31253: EMPTY
31254: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31255: LD_ADDR_EXP 119
31259: PUSH
31260: LD_INT 5
31262: ST_TO_ADDR
// end ;
31263: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31264: LD_EXP 116
31268: PUSH
31269: LD_INT 34
31271: PUSH
31272: LD_EXP 42
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PPUSH
31281: CALL_OW 69
31285: AND
31286: IFFALSE 31749
31288: GO 31290
31290: DISABLE
31291: LD_INT 0
31293: PPUSH
31294: PPUSH
31295: PPUSH
31296: PPUSH
// begin enable ;
31297: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31298: LD_ADDR_VAR 0 1
31302: PUSH
31303: LD_INT 34
31305: PUSH
31306: LD_EXP 42
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PPUSH
31315: CALL_OW 69
31319: PUSH
31320: FOR_IN
31321: IFFALSE 31393
// begin if not i in minersList then
31323: LD_VAR 0 1
31327: PUSH
31328: LD_EXP 117
31332: IN
31333: NOT
31334: IFFALSE 31391
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31336: LD_ADDR_EXP 117
31340: PUSH
31341: LD_EXP 117
31345: PPUSH
31346: LD_EXP 117
31350: PUSH
31351: LD_INT 1
31353: PLUS
31354: PPUSH
31355: LD_VAR 0 1
31359: PPUSH
31360: CALL_OW 1
31364: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31365: LD_ADDR_EXP 118
31369: PUSH
31370: LD_EXP 118
31374: PPUSH
31375: LD_EXP 118
31379: PUSH
31380: LD_INT 1
31382: PLUS
31383: PPUSH
31384: EMPTY
31385: PPUSH
31386: CALL_OW 1
31390: ST_TO_ADDR
// end end ;
31391: GO 31320
31393: POP
31394: POP
// for i := minerMinesList downto 1 do
31395: LD_ADDR_VAR 0 1
31399: PUSH
31400: DOUBLE
31401: LD_EXP 118
31405: INC
31406: ST_TO_ADDR
31407: LD_INT 1
31409: PUSH
31410: FOR_DOWNTO
31411: IFFALSE 31747
// begin if IsLive ( minersList [ i ] ) then
31413: LD_EXP 117
31417: PUSH
31418: LD_VAR 0 1
31422: ARRAY
31423: PPUSH
31424: CALL_OW 300
31428: IFFALSE 31456
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31430: LD_EXP 117
31434: PUSH
31435: LD_VAR 0 1
31439: ARRAY
31440: PPUSH
31441: LD_EXP 118
31445: PUSH
31446: LD_VAR 0 1
31450: ARRAY
31451: PPUSH
31452: CALL_OW 505
// if not minerMinesList [ i ] then
31456: LD_EXP 118
31460: PUSH
31461: LD_VAR 0 1
31465: ARRAY
31466: NOT
31467: IFFALSE 31471
// continue ;
31469: GO 31410
// for j := minerMinesList [ i ] downto 1 do
31471: LD_ADDR_VAR 0 2
31475: PUSH
31476: DOUBLE
31477: LD_EXP 118
31481: PUSH
31482: LD_VAR 0 1
31486: ARRAY
31487: INC
31488: ST_TO_ADDR
31489: LD_INT 1
31491: PUSH
31492: FOR_DOWNTO
31493: IFFALSE 31743
// begin side := GetSide ( minersList [ i ] ) ;
31495: LD_ADDR_VAR 0 3
31499: PUSH
31500: LD_EXP 117
31504: PUSH
31505: LD_VAR 0 1
31509: ARRAY
31510: PPUSH
31511: CALL_OW 255
31515: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31516: LD_ADDR_VAR 0 4
31520: PUSH
31521: LD_EXP 118
31525: PUSH
31526: LD_VAR 0 1
31530: ARRAY
31531: PUSH
31532: LD_VAR 0 2
31536: ARRAY
31537: PUSH
31538: LD_INT 1
31540: ARRAY
31541: PPUSH
31542: LD_EXP 118
31546: PUSH
31547: LD_VAR 0 1
31551: ARRAY
31552: PUSH
31553: LD_VAR 0 2
31557: ARRAY
31558: PUSH
31559: LD_INT 2
31561: ARRAY
31562: PPUSH
31563: CALL_OW 428
31567: ST_TO_ADDR
// if not tmp then
31568: LD_VAR 0 4
31572: NOT
31573: IFFALSE 31577
// continue ;
31575: GO 31492
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31577: LD_VAR 0 4
31581: PUSH
31582: LD_INT 81
31584: PUSH
31585: LD_VAR 0 3
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PPUSH
31594: CALL_OW 69
31598: IN
31599: PUSH
31600: LD_EXP 118
31604: PUSH
31605: LD_VAR 0 1
31609: ARRAY
31610: PUSH
31611: LD_VAR 0 2
31615: ARRAY
31616: PUSH
31617: LD_INT 1
31619: ARRAY
31620: PPUSH
31621: LD_EXP 118
31625: PUSH
31626: LD_VAR 0 1
31630: ARRAY
31631: PUSH
31632: LD_VAR 0 2
31636: ARRAY
31637: PUSH
31638: LD_INT 2
31640: ARRAY
31641: PPUSH
31642: CALL_OW 458
31646: AND
31647: IFFALSE 31741
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31649: LD_EXP 118
31653: PUSH
31654: LD_VAR 0 1
31658: ARRAY
31659: PUSH
31660: LD_VAR 0 2
31664: ARRAY
31665: PUSH
31666: LD_INT 1
31668: ARRAY
31669: PPUSH
31670: LD_EXP 118
31674: PUSH
31675: LD_VAR 0 1
31679: ARRAY
31680: PUSH
31681: LD_VAR 0 2
31685: ARRAY
31686: PUSH
31687: LD_INT 2
31689: ARRAY
31690: PPUSH
31691: LD_VAR 0 3
31695: PPUSH
31696: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31700: LD_ADDR_EXP 118
31704: PUSH
31705: LD_EXP 118
31709: PPUSH
31710: LD_VAR 0 1
31714: PPUSH
31715: LD_EXP 118
31719: PUSH
31720: LD_VAR 0 1
31724: ARRAY
31725: PPUSH
31726: LD_VAR 0 2
31730: PPUSH
31731: CALL_OW 3
31735: PPUSH
31736: CALL_OW 1
31740: ST_TO_ADDR
// end ; end ;
31741: GO 31492
31743: POP
31744: POP
// end ;
31745: GO 31410
31747: POP
31748: POP
// end ;
31749: PPOPN 4
31751: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31752: LD_INT 0
31754: PPUSH
31755: PPUSH
// result := false ;
31756: LD_ADDR_VAR 0 4
31760: PUSH
31761: LD_INT 0
31763: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31764: LD_VAR 0 1
31768: PPUSH
31769: CALL_OW 264
31773: PUSH
31774: LD_EXP 42
31778: EQUAL
31779: NOT
31780: IFFALSE 31784
// exit ;
31782: GO 32024
// index := GetElementIndex ( minersList , unit ) ;
31784: LD_ADDR_VAR 0 5
31788: PUSH
31789: LD_EXP 117
31793: PPUSH
31794: LD_VAR 0 1
31798: PPUSH
31799: CALL 37968 0 2
31803: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31804: LD_EXP 118
31808: PUSH
31809: LD_VAR 0 5
31813: ARRAY
31814: PUSH
31815: LD_EXP 119
31819: GREATEREQUAL
31820: IFFALSE 31824
// exit ;
31822: GO 32024
// ComMoveXY ( unit , x , y ) ;
31824: LD_VAR 0 1
31828: PPUSH
31829: LD_VAR 0 2
31833: PPUSH
31834: LD_VAR 0 3
31838: PPUSH
31839: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31843: LD_INT 35
31845: PPUSH
31846: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31850: LD_VAR 0 1
31854: PPUSH
31855: LD_VAR 0 2
31859: PPUSH
31860: LD_VAR 0 3
31864: PPUSH
31865: CALL 68365 0 3
31869: NOT
31870: PUSH
31871: LD_VAR 0 1
31875: PPUSH
31876: CALL_OW 314
31880: AND
31881: IFFALSE 31885
// exit ;
31883: GO 32024
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31885: LD_VAR 0 2
31889: PPUSH
31890: LD_VAR 0 3
31894: PPUSH
31895: CALL_OW 428
31899: PUSH
31900: LD_VAR 0 1
31904: EQUAL
31905: PUSH
31906: LD_VAR 0 1
31910: PPUSH
31911: CALL_OW 314
31915: NOT
31916: AND
31917: IFFALSE 31843
// PlaySoundXY ( x , y , PlantMine ) ;
31919: LD_VAR 0 2
31923: PPUSH
31924: LD_VAR 0 3
31928: PPUSH
31929: LD_STRING PlantMine
31931: PPUSH
31932: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31936: LD_VAR 0 2
31940: PPUSH
31941: LD_VAR 0 3
31945: PPUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: CALL_OW 255
31955: PPUSH
31956: LD_INT 0
31958: PPUSH
31959: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31963: LD_ADDR_EXP 118
31967: PUSH
31968: LD_EXP 118
31972: PPUSH
31973: LD_VAR 0 5
31977: PUSH
31978: LD_EXP 118
31982: PUSH
31983: LD_VAR 0 5
31987: ARRAY
31988: PUSH
31989: LD_INT 1
31991: PLUS
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PPUSH
31997: LD_VAR 0 2
32001: PUSH
32002: LD_VAR 0 3
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PPUSH
32011: CALL 38183 0 3
32015: ST_TO_ADDR
// result := true ;
32016: LD_ADDR_VAR 0 4
32020: PUSH
32021: LD_INT 1
32023: ST_TO_ADDR
// end ;
32024: LD_VAR 0 4
32028: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32029: LD_INT 0
32031: PPUSH
32032: PPUSH
32033: PPUSH
// if not unit in minersList then
32034: LD_VAR 0 1
32038: PUSH
32039: LD_EXP 117
32043: IN
32044: NOT
32045: IFFALSE 32049
// exit ;
32047: GO 32441
// index := GetElementIndex ( minersList , unit ) ;
32049: LD_ADDR_VAR 0 6
32053: PUSH
32054: LD_EXP 117
32058: PPUSH
32059: LD_VAR 0 1
32063: PPUSH
32064: CALL 37968 0 2
32068: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32069: LD_ADDR_VAR 0 5
32073: PUSH
32074: DOUBLE
32075: LD_EXP 118
32079: PUSH
32080: LD_VAR 0 6
32084: ARRAY
32085: INC
32086: ST_TO_ADDR
32087: LD_INT 1
32089: PUSH
32090: FOR_DOWNTO
32091: IFFALSE 32252
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32093: LD_EXP 118
32097: PUSH
32098: LD_VAR 0 6
32102: ARRAY
32103: PUSH
32104: LD_VAR 0 5
32108: ARRAY
32109: PUSH
32110: LD_INT 1
32112: ARRAY
32113: PUSH
32114: LD_VAR 0 2
32118: EQUAL
32119: PUSH
32120: LD_EXP 118
32124: PUSH
32125: LD_VAR 0 6
32129: ARRAY
32130: PUSH
32131: LD_VAR 0 5
32135: ARRAY
32136: PUSH
32137: LD_INT 2
32139: ARRAY
32140: PUSH
32141: LD_VAR 0 3
32145: EQUAL
32146: AND
32147: IFFALSE 32250
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32149: LD_EXP 118
32153: PUSH
32154: LD_VAR 0 6
32158: ARRAY
32159: PUSH
32160: LD_VAR 0 5
32164: ARRAY
32165: PUSH
32166: LD_INT 1
32168: ARRAY
32169: PPUSH
32170: LD_EXP 118
32174: PUSH
32175: LD_VAR 0 6
32179: ARRAY
32180: PUSH
32181: LD_VAR 0 5
32185: ARRAY
32186: PUSH
32187: LD_INT 2
32189: ARRAY
32190: PPUSH
32191: LD_VAR 0 1
32195: PPUSH
32196: CALL_OW 255
32200: PPUSH
32201: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32205: LD_ADDR_EXP 118
32209: PUSH
32210: LD_EXP 118
32214: PPUSH
32215: LD_VAR 0 6
32219: PPUSH
32220: LD_EXP 118
32224: PUSH
32225: LD_VAR 0 6
32229: ARRAY
32230: PPUSH
32231: LD_VAR 0 5
32235: PPUSH
32236: CALL_OW 3
32240: PPUSH
32241: CALL_OW 1
32245: ST_TO_ADDR
// exit ;
32246: POP
32247: POP
32248: GO 32441
// end ; end ;
32250: GO 32090
32252: POP
32253: POP
// for i := minerMinesList [ index ] downto 1 do
32254: LD_ADDR_VAR 0 5
32258: PUSH
32259: DOUBLE
32260: LD_EXP 118
32264: PUSH
32265: LD_VAR 0 6
32269: ARRAY
32270: INC
32271: ST_TO_ADDR
32272: LD_INT 1
32274: PUSH
32275: FOR_DOWNTO
32276: IFFALSE 32439
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32278: LD_EXP 118
32282: PUSH
32283: LD_VAR 0 6
32287: ARRAY
32288: PUSH
32289: LD_VAR 0 5
32293: ARRAY
32294: PUSH
32295: LD_INT 1
32297: ARRAY
32298: PPUSH
32299: LD_EXP 118
32303: PUSH
32304: LD_VAR 0 6
32308: ARRAY
32309: PUSH
32310: LD_VAR 0 5
32314: ARRAY
32315: PUSH
32316: LD_INT 2
32318: ARRAY
32319: PPUSH
32320: LD_VAR 0 2
32324: PPUSH
32325: LD_VAR 0 3
32329: PPUSH
32330: CALL_OW 298
32334: PUSH
32335: LD_INT 6
32337: LESS
32338: IFFALSE 32437
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32340: LD_EXP 118
32344: PUSH
32345: LD_VAR 0 6
32349: ARRAY
32350: PUSH
32351: LD_VAR 0 5
32355: ARRAY
32356: PUSH
32357: LD_INT 1
32359: ARRAY
32360: PPUSH
32361: LD_EXP 118
32365: PUSH
32366: LD_VAR 0 6
32370: ARRAY
32371: PUSH
32372: LD_VAR 0 5
32376: ARRAY
32377: PUSH
32378: LD_INT 2
32380: ARRAY
32381: PPUSH
32382: LD_VAR 0 1
32386: PPUSH
32387: CALL_OW 255
32391: PPUSH
32392: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32396: LD_ADDR_EXP 118
32400: PUSH
32401: LD_EXP 118
32405: PPUSH
32406: LD_VAR 0 6
32410: PPUSH
32411: LD_EXP 118
32415: PUSH
32416: LD_VAR 0 6
32420: ARRAY
32421: PPUSH
32422: LD_VAR 0 5
32426: PPUSH
32427: CALL_OW 3
32431: PPUSH
32432: CALL_OW 1
32436: ST_TO_ADDR
// end ; end ;
32437: GO 32275
32439: POP
32440: POP
// end ;
32441: LD_VAR 0 4
32445: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32446: LD_INT 0
32448: PPUSH
32449: PPUSH
32450: PPUSH
32451: PPUSH
32452: PPUSH
32453: PPUSH
32454: PPUSH
32455: PPUSH
32456: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32457: LD_VAR 0 1
32461: PPUSH
32462: CALL_OW 264
32466: PUSH
32467: LD_EXP 42
32471: EQUAL
32472: NOT
32473: PUSH
32474: LD_VAR 0 1
32478: PUSH
32479: LD_EXP 117
32483: IN
32484: NOT
32485: OR
32486: IFFALSE 32490
// exit ;
32488: GO 32812
// index := GetElementIndex ( minersList , unit ) ;
32490: LD_ADDR_VAR 0 6
32494: PUSH
32495: LD_EXP 117
32499: PPUSH
32500: LD_VAR 0 1
32504: PPUSH
32505: CALL 37968 0 2
32509: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32510: LD_ADDR_VAR 0 8
32514: PUSH
32515: LD_EXP 119
32519: PUSH
32520: LD_EXP 118
32524: PUSH
32525: LD_VAR 0 6
32529: ARRAY
32530: MINUS
32531: ST_TO_ADDR
// if not minesFreeAmount then
32532: LD_VAR 0 8
32536: NOT
32537: IFFALSE 32541
// exit ;
32539: GO 32812
// tmp := [ ] ;
32541: LD_ADDR_VAR 0 7
32545: PUSH
32546: EMPTY
32547: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32548: LD_ADDR_VAR 0 5
32552: PUSH
32553: DOUBLE
32554: LD_INT 1
32556: DEC
32557: ST_TO_ADDR
32558: LD_VAR 0 8
32562: PUSH
32563: FOR_TO
32564: IFFALSE 32759
// begin _d := rand ( 0 , 5 ) ;
32566: LD_ADDR_VAR 0 11
32570: PUSH
32571: LD_INT 0
32573: PPUSH
32574: LD_INT 5
32576: PPUSH
32577: CALL_OW 12
32581: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32582: LD_ADDR_VAR 0 12
32586: PUSH
32587: LD_INT 2
32589: PPUSH
32590: LD_INT 6
32592: PPUSH
32593: CALL_OW 12
32597: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32598: LD_ADDR_VAR 0 9
32602: PUSH
32603: LD_VAR 0 2
32607: PPUSH
32608: LD_VAR 0 11
32612: PPUSH
32613: LD_VAR 0 12
32617: PPUSH
32618: CALL_OW 272
32622: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32623: LD_ADDR_VAR 0 10
32627: PUSH
32628: LD_VAR 0 3
32632: PPUSH
32633: LD_VAR 0 11
32637: PPUSH
32638: LD_VAR 0 12
32642: PPUSH
32643: CALL_OW 273
32647: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32648: LD_VAR 0 9
32652: PPUSH
32653: LD_VAR 0 10
32657: PPUSH
32658: CALL_OW 488
32662: PUSH
32663: LD_VAR 0 9
32667: PUSH
32668: LD_VAR 0 10
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_VAR 0 7
32681: IN
32682: NOT
32683: AND
32684: PUSH
32685: LD_VAR 0 9
32689: PPUSH
32690: LD_VAR 0 10
32694: PPUSH
32695: CALL_OW 458
32699: NOT
32700: AND
32701: IFFALSE 32743
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32703: LD_ADDR_VAR 0 7
32707: PUSH
32708: LD_VAR 0 7
32712: PPUSH
32713: LD_VAR 0 7
32717: PUSH
32718: LD_INT 1
32720: PLUS
32721: PPUSH
32722: LD_VAR 0 9
32726: PUSH
32727: LD_VAR 0 10
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PPUSH
32736: CALL_OW 1
32740: ST_TO_ADDR
32741: GO 32757
// i := i - 1 ;
32743: LD_ADDR_VAR 0 5
32747: PUSH
32748: LD_VAR 0 5
32752: PUSH
32753: LD_INT 1
32755: MINUS
32756: ST_TO_ADDR
// end ;
32757: GO 32563
32759: POP
32760: POP
// for i in tmp do
32761: LD_ADDR_VAR 0 5
32765: PUSH
32766: LD_VAR 0 7
32770: PUSH
32771: FOR_IN
32772: IFFALSE 32810
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32774: LD_VAR 0 1
32778: PPUSH
32779: LD_VAR 0 5
32783: PUSH
32784: LD_INT 1
32786: ARRAY
32787: PPUSH
32788: LD_VAR 0 5
32792: PUSH
32793: LD_INT 2
32795: ARRAY
32796: PPUSH
32797: CALL 31752 0 3
32801: NOT
32802: IFFALSE 32808
// exit ;
32804: POP
32805: POP
32806: GO 32812
32808: GO 32771
32810: POP
32811: POP
// end ;
32812: LD_VAR 0 4
32816: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32817: LD_INT 0
32819: PPUSH
32820: PPUSH
32821: PPUSH
32822: PPUSH
32823: PPUSH
32824: PPUSH
32825: PPUSH
// if not GetClass ( unit ) = class_sniper then
32826: LD_VAR 0 1
32830: PPUSH
32831: CALL_OW 257
32835: PUSH
32836: LD_INT 5
32838: EQUAL
32839: NOT
32840: IFFALSE 32844
// exit ;
32842: GO 33232
// dist := 8 ;
32844: LD_ADDR_VAR 0 5
32848: PUSH
32849: LD_INT 8
32851: ST_TO_ADDR
// viewRange := 12 ;
32852: LD_ADDR_VAR 0 7
32856: PUSH
32857: LD_INT 12
32859: ST_TO_ADDR
// side := GetSide ( unit ) ;
32860: LD_ADDR_VAR 0 6
32864: PUSH
32865: LD_VAR 0 1
32869: PPUSH
32870: CALL_OW 255
32874: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32875: LD_INT 61
32877: PPUSH
32878: LD_VAR 0 6
32882: PPUSH
32883: CALL_OW 321
32887: PUSH
32888: LD_INT 2
32890: EQUAL
32891: IFFALSE 32901
// viewRange := 16 ;
32893: LD_ADDR_VAR 0 7
32897: PUSH
32898: LD_INT 16
32900: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32901: LD_VAR 0 1
32905: PPUSH
32906: LD_VAR 0 2
32910: PPUSH
32911: LD_VAR 0 3
32915: PPUSH
32916: CALL_OW 297
32920: PUSH
32921: LD_VAR 0 5
32925: GREATER
32926: IFFALSE 33005
// begin ComMoveXY ( unit , x , y ) ;
32928: LD_VAR 0 1
32932: PPUSH
32933: LD_VAR 0 2
32937: PPUSH
32938: LD_VAR 0 3
32942: PPUSH
32943: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32947: LD_INT 35
32949: PPUSH
32950: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32954: LD_VAR 0 1
32958: PPUSH
32959: LD_VAR 0 2
32963: PPUSH
32964: LD_VAR 0 3
32968: PPUSH
32969: CALL 68365 0 3
32973: NOT
32974: IFFALSE 32978
// exit ;
32976: GO 33232
// until GetDistUnitXY ( unit , x , y ) < dist ;
32978: LD_VAR 0 1
32982: PPUSH
32983: LD_VAR 0 2
32987: PPUSH
32988: LD_VAR 0 3
32992: PPUSH
32993: CALL_OW 297
32997: PUSH
32998: LD_VAR 0 5
33002: LESS
33003: IFFALSE 32947
// end ; ComTurnXY ( unit , x , y ) ;
33005: LD_VAR 0 1
33009: PPUSH
33010: LD_VAR 0 2
33014: PPUSH
33015: LD_VAR 0 3
33019: PPUSH
33020: CALL_OW 118
// wait ( 5 ) ;
33024: LD_INT 5
33026: PPUSH
33027: CALL_OW 67
// _d := GetDir ( unit ) ;
33031: LD_ADDR_VAR 0 10
33035: PUSH
33036: LD_VAR 0 1
33040: PPUSH
33041: CALL_OW 254
33045: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33046: LD_ADDR_VAR 0 8
33050: PUSH
33051: LD_VAR 0 1
33055: PPUSH
33056: CALL_OW 250
33060: PPUSH
33061: LD_VAR 0 10
33065: PPUSH
33066: LD_VAR 0 5
33070: PPUSH
33071: CALL_OW 272
33075: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33076: LD_ADDR_VAR 0 9
33080: PUSH
33081: LD_VAR 0 1
33085: PPUSH
33086: CALL_OW 251
33090: PPUSH
33091: LD_VAR 0 10
33095: PPUSH
33096: LD_VAR 0 5
33100: PPUSH
33101: CALL_OW 273
33105: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33106: LD_VAR 0 8
33110: PPUSH
33111: LD_VAR 0 9
33115: PPUSH
33116: CALL_OW 488
33120: NOT
33121: IFFALSE 33125
// exit ;
33123: GO 33232
// ComAnimCustom ( unit , 1 ) ;
33125: LD_VAR 0 1
33129: PPUSH
33130: LD_INT 1
33132: PPUSH
33133: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33137: LD_VAR 0 8
33141: PPUSH
33142: LD_VAR 0 9
33146: PPUSH
33147: LD_VAR 0 6
33151: PPUSH
33152: LD_VAR 0 7
33156: PPUSH
33157: CALL_OW 330
// repeat wait ( 1 ) ;
33161: LD_INT 1
33163: PPUSH
33164: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
33168: LD_VAR 0 1
33172: PPUSH
33173: CALL_OW 316
33177: PUSH
33178: LD_VAR 0 1
33182: PPUSH
33183: CALL_OW 314
33187: OR
33188: PUSH
33189: LD_VAR 0 1
33193: PPUSH
33194: CALL_OW 302
33198: NOT
33199: OR
33200: PUSH
33201: LD_VAR 0 1
33205: PPUSH
33206: CALL_OW 301
33210: OR
33211: IFFALSE 33161
// RemoveSeeing ( _x , _y , side ) ;
33213: LD_VAR 0 8
33217: PPUSH
33218: LD_VAR 0 9
33222: PPUSH
33223: LD_VAR 0 6
33227: PPUSH
33228: CALL_OW 331
// end ; end_of_file
33232: LD_VAR 0 4
33236: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33237: LD_INT 0
33239: PPUSH
33240: PPUSH
// if exist_mode then
33241: LD_VAR 0 2
33245: IFFALSE 33270
// unit := CreateCharacter ( prefix & ident ) else
33247: LD_ADDR_VAR 0 5
33251: PUSH
33252: LD_VAR 0 3
33256: PUSH
33257: LD_VAR 0 1
33261: STR
33262: PPUSH
33263: CALL_OW 34
33267: ST_TO_ADDR
33268: GO 33285
// unit := NewCharacter ( ident ) ;
33270: LD_ADDR_VAR 0 5
33274: PUSH
33275: LD_VAR 0 1
33279: PPUSH
33280: CALL_OW 25
33284: ST_TO_ADDR
// result := unit ;
33285: LD_ADDR_VAR 0 4
33289: PUSH
33290: LD_VAR 0 5
33294: ST_TO_ADDR
// end ;
33295: LD_VAR 0 4
33299: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33300: LD_INT 0
33302: PPUSH
33303: PPUSH
// if not side or not nation then
33304: LD_VAR 0 1
33308: NOT
33309: PUSH
33310: LD_VAR 0 2
33314: NOT
33315: OR
33316: IFFALSE 33320
// exit ;
33318: GO 34084
// case nation of nation_american :
33320: LD_VAR 0 2
33324: PUSH
33325: LD_INT 1
33327: DOUBLE
33328: EQUAL
33329: IFTRUE 33333
33331: GO 33547
33333: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33334: LD_ADDR_VAR 0 4
33338: PUSH
33339: LD_INT 35
33341: PUSH
33342: LD_INT 45
33344: PUSH
33345: LD_INT 46
33347: PUSH
33348: LD_INT 47
33350: PUSH
33351: LD_INT 82
33353: PUSH
33354: LD_INT 83
33356: PUSH
33357: LD_INT 84
33359: PUSH
33360: LD_INT 85
33362: PUSH
33363: LD_INT 86
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 6
33374: PUSH
33375: LD_INT 15
33377: PUSH
33378: LD_INT 16
33380: PUSH
33381: LD_INT 7
33383: PUSH
33384: LD_INT 12
33386: PUSH
33387: LD_INT 13
33389: PUSH
33390: LD_INT 10
33392: PUSH
33393: LD_INT 14
33395: PUSH
33396: LD_INT 20
33398: PUSH
33399: LD_INT 21
33401: PUSH
33402: LD_INT 22
33404: PUSH
33405: LD_INT 25
33407: PUSH
33408: LD_INT 32
33410: PUSH
33411: LD_INT 27
33413: PUSH
33414: LD_INT 36
33416: PUSH
33417: LD_INT 69
33419: PUSH
33420: LD_INT 39
33422: PUSH
33423: LD_INT 34
33425: PUSH
33426: LD_INT 40
33428: PUSH
33429: LD_INT 48
33431: PUSH
33432: LD_INT 49
33434: PUSH
33435: LD_INT 50
33437: PUSH
33438: LD_INT 51
33440: PUSH
33441: LD_INT 52
33443: PUSH
33444: LD_INT 53
33446: PUSH
33447: LD_INT 54
33449: PUSH
33450: LD_INT 55
33452: PUSH
33453: LD_INT 56
33455: PUSH
33456: LD_INT 57
33458: PUSH
33459: LD_INT 58
33461: PUSH
33462: LD_INT 59
33464: PUSH
33465: LD_INT 60
33467: PUSH
33468: LD_INT 61
33470: PUSH
33471: LD_INT 62
33473: PUSH
33474: LD_INT 80
33476: PUSH
33477: LD_INT 82
33479: PUSH
33480: LD_INT 83
33482: PUSH
33483: LD_INT 84
33485: PUSH
33486: LD_INT 85
33488: PUSH
33489: LD_INT 86
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: ST_TO_ADDR
33545: GO 34008
33547: LD_INT 2
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33555
33553: GO 33777
33555: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
33556: LD_ADDR_VAR 0 4
33560: PUSH
33561: LD_INT 35
33563: PUSH
33564: LD_INT 45
33566: PUSH
33567: LD_INT 46
33569: PUSH
33570: LD_INT 47
33572: PUSH
33573: LD_INT 82
33575: PUSH
33576: LD_INT 83
33578: PUSH
33579: LD_INT 84
33581: PUSH
33582: LD_INT 85
33584: PUSH
33585: LD_INT 87
33587: PUSH
33588: LD_INT 70
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: LD_INT 11
33596: PUSH
33597: LD_INT 3
33599: PUSH
33600: LD_INT 4
33602: PUSH
33603: LD_INT 5
33605: PUSH
33606: LD_INT 6
33608: PUSH
33609: LD_INT 15
33611: PUSH
33612: LD_INT 18
33614: PUSH
33615: LD_INT 7
33617: PUSH
33618: LD_INT 17
33620: PUSH
33621: LD_INT 8
33623: PUSH
33624: LD_INT 20
33626: PUSH
33627: LD_INT 21
33629: PUSH
33630: LD_INT 22
33632: PUSH
33633: LD_INT 72
33635: PUSH
33636: LD_INT 26
33638: PUSH
33639: LD_INT 69
33641: PUSH
33642: LD_INT 39
33644: PUSH
33645: LD_INT 40
33647: PUSH
33648: LD_INT 41
33650: PUSH
33651: LD_INT 42
33653: PUSH
33654: LD_INT 43
33656: PUSH
33657: LD_INT 48
33659: PUSH
33660: LD_INT 49
33662: PUSH
33663: LD_INT 50
33665: PUSH
33666: LD_INT 51
33668: PUSH
33669: LD_INT 52
33671: PUSH
33672: LD_INT 53
33674: PUSH
33675: LD_INT 54
33677: PUSH
33678: LD_INT 55
33680: PUSH
33681: LD_INT 56
33683: PUSH
33684: LD_INT 60
33686: PUSH
33687: LD_INT 61
33689: PUSH
33690: LD_INT 62
33692: PUSH
33693: LD_INT 66
33695: PUSH
33696: LD_INT 67
33698: PUSH
33699: LD_INT 68
33701: PUSH
33702: LD_INT 81
33704: PUSH
33705: LD_INT 82
33707: PUSH
33708: LD_INT 83
33710: PUSH
33711: LD_INT 84
33713: PUSH
33714: LD_INT 85
33716: PUSH
33717: LD_INT 87
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: ST_TO_ADDR
33775: GO 34008
33777: LD_INT 3
33779: DOUBLE
33780: EQUAL
33781: IFTRUE 33785
33783: GO 34007
33785: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33786: LD_ADDR_VAR 0 4
33790: PUSH
33791: LD_INT 46
33793: PUSH
33794: LD_INT 47
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: LD_INT 2
33802: PUSH
33803: LD_INT 82
33805: PUSH
33806: LD_INT 83
33808: PUSH
33809: LD_INT 84
33811: PUSH
33812: LD_INT 85
33814: PUSH
33815: LD_INT 86
33817: PUSH
33818: LD_INT 11
33820: PUSH
33821: LD_INT 9
33823: PUSH
33824: LD_INT 20
33826: PUSH
33827: LD_INT 19
33829: PUSH
33830: LD_INT 21
33832: PUSH
33833: LD_INT 24
33835: PUSH
33836: LD_INT 22
33838: PUSH
33839: LD_INT 25
33841: PUSH
33842: LD_INT 28
33844: PUSH
33845: LD_INT 29
33847: PUSH
33848: LD_INT 30
33850: PUSH
33851: LD_INT 31
33853: PUSH
33854: LD_INT 37
33856: PUSH
33857: LD_INT 38
33859: PUSH
33860: LD_INT 32
33862: PUSH
33863: LD_INT 27
33865: PUSH
33866: LD_INT 33
33868: PUSH
33869: LD_INT 69
33871: PUSH
33872: LD_INT 39
33874: PUSH
33875: LD_INT 34
33877: PUSH
33878: LD_INT 40
33880: PUSH
33881: LD_INT 71
33883: PUSH
33884: LD_INT 23
33886: PUSH
33887: LD_INT 44
33889: PUSH
33890: LD_INT 48
33892: PUSH
33893: LD_INT 49
33895: PUSH
33896: LD_INT 50
33898: PUSH
33899: LD_INT 51
33901: PUSH
33902: LD_INT 52
33904: PUSH
33905: LD_INT 53
33907: PUSH
33908: LD_INT 54
33910: PUSH
33911: LD_INT 55
33913: PUSH
33914: LD_INT 56
33916: PUSH
33917: LD_INT 57
33919: PUSH
33920: LD_INT 58
33922: PUSH
33923: LD_INT 59
33925: PUSH
33926: LD_INT 63
33928: PUSH
33929: LD_INT 64
33931: PUSH
33932: LD_INT 65
33934: PUSH
33935: LD_INT 82
33937: PUSH
33938: LD_INT 83
33940: PUSH
33941: LD_INT 84
33943: PUSH
33944: LD_INT 85
33946: PUSH
33947: LD_INT 86
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: ST_TO_ADDR
34005: GO 34008
34007: POP
// if state > - 1 and state < 3 then
34008: LD_VAR 0 3
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: GREATER
34017: PUSH
34018: LD_VAR 0 3
34022: PUSH
34023: LD_INT 3
34025: LESS
34026: AND
34027: IFFALSE 34084
// for i in result do
34029: LD_ADDR_VAR 0 5
34033: PUSH
34034: LD_VAR 0 4
34038: PUSH
34039: FOR_IN
34040: IFFALSE 34082
// if GetTech ( i , side ) <> state then
34042: LD_VAR 0 5
34046: PPUSH
34047: LD_VAR 0 1
34051: PPUSH
34052: CALL_OW 321
34056: PUSH
34057: LD_VAR 0 3
34061: NONEQUAL
34062: IFFALSE 34080
// result := result diff i ;
34064: LD_ADDR_VAR 0 4
34068: PUSH
34069: LD_VAR 0 4
34073: PUSH
34074: LD_VAR 0 5
34078: DIFF
34079: ST_TO_ADDR
34080: GO 34039
34082: POP
34083: POP
// end ;
34084: LD_VAR 0 4
34088: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34089: LD_INT 0
34091: PPUSH
34092: PPUSH
34093: PPUSH
// result := true ;
34094: LD_ADDR_VAR 0 3
34098: PUSH
34099: LD_INT 1
34101: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34102: LD_ADDR_VAR 0 5
34106: PUSH
34107: LD_VAR 0 2
34111: PPUSH
34112: CALL_OW 480
34116: ST_TO_ADDR
// if not tmp then
34117: LD_VAR 0 5
34121: NOT
34122: IFFALSE 34126
// exit ;
34124: GO 34175
// for i in tmp do
34126: LD_ADDR_VAR 0 4
34130: PUSH
34131: LD_VAR 0 5
34135: PUSH
34136: FOR_IN
34137: IFFALSE 34173
// if GetTech ( i , side ) <> state_researched then
34139: LD_VAR 0 4
34143: PPUSH
34144: LD_VAR 0 1
34148: PPUSH
34149: CALL_OW 321
34153: PUSH
34154: LD_INT 2
34156: NONEQUAL
34157: IFFALSE 34171
// begin result := false ;
34159: LD_ADDR_VAR 0 3
34163: PUSH
34164: LD_INT 0
34166: ST_TO_ADDR
// exit ;
34167: POP
34168: POP
34169: GO 34175
// end ;
34171: GO 34136
34173: POP
34174: POP
// end ;
34175: LD_VAR 0 3
34179: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34180: LD_INT 0
34182: PPUSH
34183: PPUSH
34184: PPUSH
34185: PPUSH
34186: PPUSH
34187: PPUSH
34188: PPUSH
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
34193: PPUSH
34194: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34195: LD_VAR 0 1
34199: NOT
34200: PUSH
34201: LD_VAR 0 1
34205: PPUSH
34206: CALL_OW 257
34210: PUSH
34211: LD_INT 9
34213: NONEQUAL
34214: OR
34215: IFFALSE 34219
// exit ;
34217: GO 34792
// side := GetSide ( unit ) ;
34219: LD_ADDR_VAR 0 9
34223: PUSH
34224: LD_VAR 0 1
34228: PPUSH
34229: CALL_OW 255
34233: ST_TO_ADDR
// tech_space := tech_spacanom ;
34234: LD_ADDR_VAR 0 12
34238: PUSH
34239: LD_INT 29
34241: ST_TO_ADDR
// tech_time := tech_taurad ;
34242: LD_ADDR_VAR 0 13
34246: PUSH
34247: LD_INT 28
34249: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34250: LD_ADDR_VAR 0 11
34254: PUSH
34255: LD_VAR 0 1
34259: PPUSH
34260: CALL_OW 310
34264: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34265: LD_VAR 0 11
34269: PPUSH
34270: CALL_OW 247
34274: PUSH
34275: LD_INT 2
34277: EQUAL
34278: IFFALSE 34282
// exit ;
34280: GO 34792
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34282: LD_ADDR_VAR 0 8
34286: PUSH
34287: LD_INT 81
34289: PUSH
34290: LD_VAR 0 9
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 3
34301: PUSH
34302: LD_INT 21
34304: PUSH
34305: LD_INT 3
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PPUSH
34320: CALL_OW 69
34324: ST_TO_ADDR
// if not tmp then
34325: LD_VAR 0 8
34329: NOT
34330: IFFALSE 34334
// exit ;
34332: GO 34792
// if in_unit then
34334: LD_VAR 0 11
34338: IFFALSE 34362
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34340: LD_ADDR_VAR 0 10
34344: PUSH
34345: LD_VAR 0 8
34349: PPUSH
34350: LD_VAR 0 11
34354: PPUSH
34355: CALL_OW 74
34359: ST_TO_ADDR
34360: GO 34382
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34362: LD_ADDR_VAR 0 10
34366: PUSH
34367: LD_VAR 0 8
34371: PPUSH
34372: LD_VAR 0 1
34376: PPUSH
34377: CALL_OW 74
34381: ST_TO_ADDR
// if not enemy then
34382: LD_VAR 0 10
34386: NOT
34387: IFFALSE 34391
// exit ;
34389: GO 34792
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34391: LD_VAR 0 11
34395: PUSH
34396: LD_VAR 0 11
34400: PPUSH
34401: LD_VAR 0 10
34405: PPUSH
34406: CALL_OW 296
34410: PUSH
34411: LD_INT 13
34413: GREATER
34414: AND
34415: PUSH
34416: LD_VAR 0 1
34420: PPUSH
34421: LD_VAR 0 10
34425: PPUSH
34426: CALL_OW 296
34430: PUSH
34431: LD_INT 12
34433: GREATER
34434: OR
34435: IFFALSE 34439
// exit ;
34437: GO 34792
// missile := [ 1 ] ;
34439: LD_ADDR_VAR 0 14
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: EMPTY
34448: LIST
34449: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34450: LD_VAR 0 9
34454: PPUSH
34455: LD_VAR 0 12
34459: PPUSH
34460: CALL_OW 325
34464: IFFALSE 34493
// missile := Insert ( missile , missile + 1 , 2 ) ;
34466: LD_ADDR_VAR 0 14
34470: PUSH
34471: LD_VAR 0 14
34475: PPUSH
34476: LD_VAR 0 14
34480: PUSH
34481: LD_INT 1
34483: PLUS
34484: PPUSH
34485: LD_INT 2
34487: PPUSH
34488: CALL_OW 2
34492: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34493: LD_VAR 0 9
34497: PPUSH
34498: LD_VAR 0 13
34502: PPUSH
34503: CALL_OW 325
34507: PUSH
34508: LD_VAR 0 10
34512: PPUSH
34513: CALL_OW 255
34517: PPUSH
34518: LD_VAR 0 13
34522: PPUSH
34523: CALL_OW 325
34527: NOT
34528: AND
34529: IFFALSE 34558
// missile := Insert ( missile , missile + 1 , 3 ) ;
34531: LD_ADDR_VAR 0 14
34535: PUSH
34536: LD_VAR 0 14
34540: PPUSH
34541: LD_VAR 0 14
34545: PUSH
34546: LD_INT 1
34548: PLUS
34549: PPUSH
34550: LD_INT 3
34552: PPUSH
34553: CALL_OW 2
34557: ST_TO_ADDR
// if missile < 2 then
34558: LD_VAR 0 14
34562: PUSH
34563: LD_INT 2
34565: LESS
34566: IFFALSE 34570
// exit ;
34568: GO 34792
// x := GetX ( enemy ) ;
34570: LD_ADDR_VAR 0 4
34574: PUSH
34575: LD_VAR 0 10
34579: PPUSH
34580: CALL_OW 250
34584: ST_TO_ADDR
// y := GetY ( enemy ) ;
34585: LD_ADDR_VAR 0 5
34589: PUSH
34590: LD_VAR 0 10
34594: PPUSH
34595: CALL_OW 251
34599: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34600: LD_ADDR_VAR 0 6
34604: PUSH
34605: LD_VAR 0 4
34609: PUSH
34610: LD_INT 1
34612: NEG
34613: PPUSH
34614: LD_INT 1
34616: PPUSH
34617: CALL_OW 12
34621: PLUS
34622: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34623: LD_ADDR_VAR 0 7
34627: PUSH
34628: LD_VAR 0 5
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PPUSH
34637: LD_INT 1
34639: PPUSH
34640: CALL_OW 12
34644: PLUS
34645: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34646: LD_VAR 0 6
34650: PPUSH
34651: LD_VAR 0 7
34655: PPUSH
34656: CALL_OW 488
34660: NOT
34661: IFFALSE 34683
// begin _x := x ;
34663: LD_ADDR_VAR 0 6
34667: PUSH
34668: LD_VAR 0 4
34672: ST_TO_ADDR
// _y := y ;
34673: LD_ADDR_VAR 0 7
34677: PUSH
34678: LD_VAR 0 5
34682: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34683: LD_ADDR_VAR 0 3
34687: PUSH
34688: LD_INT 1
34690: PPUSH
34691: LD_VAR 0 14
34695: PPUSH
34696: CALL_OW 12
34700: ST_TO_ADDR
// case i of 1 :
34701: LD_VAR 0 3
34705: PUSH
34706: LD_INT 1
34708: DOUBLE
34709: EQUAL
34710: IFTRUE 34714
34712: GO 34731
34714: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34715: LD_VAR 0 1
34719: PPUSH
34720: LD_VAR 0 10
34724: PPUSH
34725: CALL_OW 115
34729: GO 34792
34731: LD_INT 2
34733: DOUBLE
34734: EQUAL
34735: IFTRUE 34739
34737: GO 34761
34739: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34740: LD_VAR 0 1
34744: PPUSH
34745: LD_VAR 0 6
34749: PPUSH
34750: LD_VAR 0 7
34754: PPUSH
34755: CALL_OW 153
34759: GO 34792
34761: LD_INT 3
34763: DOUBLE
34764: EQUAL
34765: IFTRUE 34769
34767: GO 34791
34769: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34770: LD_VAR 0 1
34774: PPUSH
34775: LD_VAR 0 6
34779: PPUSH
34780: LD_VAR 0 7
34784: PPUSH
34785: CALL_OW 154
34789: GO 34792
34791: POP
// end ;
34792: LD_VAR 0 2
34796: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34797: LD_INT 0
34799: PPUSH
34800: PPUSH
34801: PPUSH
34802: PPUSH
34803: PPUSH
34804: PPUSH
// if not unit or not building then
34805: LD_VAR 0 1
34809: NOT
34810: PUSH
34811: LD_VAR 0 2
34815: NOT
34816: OR
34817: IFFALSE 34821
// exit ;
34819: GO 34979
// x := GetX ( building ) ;
34821: LD_ADDR_VAR 0 5
34825: PUSH
34826: LD_VAR 0 2
34830: PPUSH
34831: CALL_OW 250
34835: ST_TO_ADDR
// y := GetY ( building ) ;
34836: LD_ADDR_VAR 0 6
34840: PUSH
34841: LD_VAR 0 2
34845: PPUSH
34846: CALL_OW 251
34850: ST_TO_ADDR
// for i = 0 to 5 do
34851: LD_ADDR_VAR 0 4
34855: PUSH
34856: DOUBLE
34857: LD_INT 0
34859: DEC
34860: ST_TO_ADDR
34861: LD_INT 5
34863: PUSH
34864: FOR_TO
34865: IFFALSE 34977
// begin _x := ShiftX ( x , i , 3 ) ;
34867: LD_ADDR_VAR 0 7
34871: PUSH
34872: LD_VAR 0 5
34876: PPUSH
34877: LD_VAR 0 4
34881: PPUSH
34882: LD_INT 3
34884: PPUSH
34885: CALL_OW 272
34889: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34890: LD_ADDR_VAR 0 8
34894: PUSH
34895: LD_VAR 0 6
34899: PPUSH
34900: LD_VAR 0 4
34904: PPUSH
34905: LD_INT 3
34907: PPUSH
34908: CALL_OW 273
34912: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34913: LD_VAR 0 7
34917: PPUSH
34918: LD_VAR 0 8
34922: PPUSH
34923: CALL_OW 488
34927: NOT
34928: IFFALSE 34932
// continue ;
34930: GO 34864
// if HexInfo ( _x , _y ) = 0 then
34932: LD_VAR 0 7
34936: PPUSH
34937: LD_VAR 0 8
34941: PPUSH
34942: CALL_OW 428
34946: PUSH
34947: LD_INT 0
34949: EQUAL
34950: IFFALSE 34975
// begin ComMoveXY ( unit , _x , _y ) ;
34952: LD_VAR 0 1
34956: PPUSH
34957: LD_VAR 0 7
34961: PPUSH
34962: LD_VAR 0 8
34966: PPUSH
34967: CALL_OW 111
// exit ;
34971: POP
34972: POP
34973: GO 34979
// end ; end ;
34975: GO 34864
34977: POP
34978: POP
// end ;
34979: LD_VAR 0 3
34983: RET
// export function ScanBase ( side , base_area ) ; begin
34984: LD_INT 0
34986: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34987: LD_ADDR_VAR 0 3
34991: PUSH
34992: LD_VAR 0 2
34996: PPUSH
34997: LD_INT 81
34999: PUSH
35000: LD_VAR 0 1
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PPUSH
35009: CALL_OW 70
35013: ST_TO_ADDR
// end ;
35014: LD_VAR 0 3
35018: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35019: LD_INT 0
35021: PPUSH
35022: PPUSH
35023: PPUSH
35024: PPUSH
// result := false ;
35025: LD_ADDR_VAR 0 2
35029: PUSH
35030: LD_INT 0
35032: ST_TO_ADDR
// side := GetSide ( unit ) ;
35033: LD_ADDR_VAR 0 3
35037: PUSH
35038: LD_VAR 0 1
35042: PPUSH
35043: CALL_OW 255
35047: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35048: LD_ADDR_VAR 0 4
35052: PUSH
35053: LD_VAR 0 1
35057: PPUSH
35058: CALL_OW 248
35062: ST_TO_ADDR
// case nat of 1 :
35063: LD_VAR 0 4
35067: PUSH
35068: LD_INT 1
35070: DOUBLE
35071: EQUAL
35072: IFTRUE 35076
35074: GO 35087
35076: POP
// tech := tech_lassight ; 2 :
35077: LD_ADDR_VAR 0 5
35081: PUSH
35082: LD_INT 12
35084: ST_TO_ADDR
35085: GO 35126
35087: LD_INT 2
35089: DOUBLE
35090: EQUAL
35091: IFTRUE 35095
35093: GO 35106
35095: POP
// tech := tech_mortar ; 3 :
35096: LD_ADDR_VAR 0 5
35100: PUSH
35101: LD_INT 41
35103: ST_TO_ADDR
35104: GO 35126
35106: LD_INT 3
35108: DOUBLE
35109: EQUAL
35110: IFTRUE 35114
35112: GO 35125
35114: POP
// tech := tech_bazooka ; end ;
35115: LD_ADDR_VAR 0 5
35119: PUSH
35120: LD_INT 44
35122: ST_TO_ADDR
35123: GO 35126
35125: POP
// if Researched ( side , tech ) then
35126: LD_VAR 0 3
35130: PPUSH
35131: LD_VAR 0 5
35135: PPUSH
35136: CALL_OW 325
35140: IFFALSE 35167
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35142: LD_ADDR_VAR 0 2
35146: PUSH
35147: LD_INT 5
35149: PUSH
35150: LD_INT 8
35152: PUSH
35153: LD_INT 9
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: PUSH
35161: LD_VAR 0 4
35165: ARRAY
35166: ST_TO_ADDR
// end ;
35167: LD_VAR 0 2
35171: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35172: LD_INT 0
35174: PPUSH
35175: PPUSH
35176: PPUSH
// if not mines then
35177: LD_VAR 0 2
35181: NOT
35182: IFFALSE 35186
// exit ;
35184: GO 35330
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35186: LD_ADDR_VAR 0 5
35190: PUSH
35191: LD_INT 81
35193: PUSH
35194: LD_VAR 0 1
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 3
35205: PUSH
35206: LD_INT 21
35208: PUSH
35209: LD_INT 3
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PPUSH
35224: CALL_OW 69
35228: ST_TO_ADDR
// for i in mines do
35229: LD_ADDR_VAR 0 4
35233: PUSH
35234: LD_VAR 0 2
35238: PUSH
35239: FOR_IN
35240: IFFALSE 35328
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35242: LD_VAR 0 4
35246: PUSH
35247: LD_INT 1
35249: ARRAY
35250: PPUSH
35251: LD_VAR 0 4
35255: PUSH
35256: LD_INT 2
35258: ARRAY
35259: PPUSH
35260: CALL_OW 458
35264: NOT
35265: IFFALSE 35269
// continue ;
35267: GO 35239
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35269: LD_VAR 0 4
35273: PUSH
35274: LD_INT 1
35276: ARRAY
35277: PPUSH
35278: LD_VAR 0 4
35282: PUSH
35283: LD_INT 2
35285: ARRAY
35286: PPUSH
35287: CALL_OW 428
35291: PUSH
35292: LD_VAR 0 5
35296: IN
35297: IFFALSE 35326
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35299: LD_VAR 0 4
35303: PUSH
35304: LD_INT 1
35306: ARRAY
35307: PPUSH
35308: LD_VAR 0 4
35312: PUSH
35313: LD_INT 2
35315: ARRAY
35316: PPUSH
35317: LD_VAR 0 1
35321: PPUSH
35322: CALL_OW 456
// end ;
35326: GO 35239
35328: POP
35329: POP
// end ;
35330: LD_VAR 0 3
35334: RET
// export function Count ( array ) ; var i ; begin
35335: LD_INT 0
35337: PPUSH
35338: PPUSH
// result := 0 ;
35339: LD_ADDR_VAR 0 2
35343: PUSH
35344: LD_INT 0
35346: ST_TO_ADDR
// for i in array do
35347: LD_ADDR_VAR 0 3
35351: PUSH
35352: LD_VAR 0 1
35356: PUSH
35357: FOR_IN
35358: IFFALSE 35382
// if i then
35360: LD_VAR 0 3
35364: IFFALSE 35380
// result := result + 1 ;
35366: LD_ADDR_VAR 0 2
35370: PUSH
35371: LD_VAR 0 2
35375: PUSH
35376: LD_INT 1
35378: PLUS
35379: ST_TO_ADDR
35380: GO 35357
35382: POP
35383: POP
// end ;
35384: LD_VAR 0 2
35388: RET
// export function IsEmpty ( building ) ; begin
35389: LD_INT 0
35391: PPUSH
// if not building then
35392: LD_VAR 0 1
35396: NOT
35397: IFFALSE 35401
// exit ;
35399: GO 35444
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35401: LD_ADDR_VAR 0 2
35405: PUSH
35406: LD_VAR 0 1
35410: PUSH
35411: LD_INT 22
35413: PUSH
35414: LD_VAR 0 1
35418: PPUSH
35419: CALL_OW 255
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 58
35430: PUSH
35431: EMPTY
35432: LIST
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PPUSH
35438: CALL_OW 69
35442: IN
35443: ST_TO_ADDR
// end ;
35444: LD_VAR 0 2
35448: RET
// export function IsNotFull ( building ) ; begin
35449: LD_INT 0
35451: PPUSH
// if not building then
35452: LD_VAR 0 1
35456: NOT
35457: IFFALSE 35461
// exit ;
35459: GO 35480
// result := UnitsInside ( building ) < 6 ;
35461: LD_ADDR_VAR 0 2
35465: PUSH
35466: LD_VAR 0 1
35470: PPUSH
35471: CALL_OW 313
35475: PUSH
35476: LD_INT 6
35478: LESS
35479: ST_TO_ADDR
// end ;
35480: LD_VAR 0 2
35484: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35485: LD_INT 0
35487: PPUSH
35488: PPUSH
35489: PPUSH
35490: PPUSH
// tmp := [ ] ;
35491: LD_ADDR_VAR 0 3
35495: PUSH
35496: EMPTY
35497: ST_TO_ADDR
// list := [ ] ;
35498: LD_ADDR_VAR 0 5
35502: PUSH
35503: EMPTY
35504: ST_TO_ADDR
// for i = 16 to 25 do
35505: LD_ADDR_VAR 0 4
35509: PUSH
35510: DOUBLE
35511: LD_INT 16
35513: DEC
35514: ST_TO_ADDR
35515: LD_INT 25
35517: PUSH
35518: FOR_TO
35519: IFFALSE 35592
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35521: LD_ADDR_VAR 0 3
35525: PUSH
35526: LD_VAR 0 3
35530: PUSH
35531: LD_INT 22
35533: PUSH
35534: LD_VAR 0 1
35538: PPUSH
35539: CALL_OW 255
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 91
35550: PUSH
35551: LD_VAR 0 1
35555: PUSH
35556: LD_INT 6
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 30
35566: PUSH
35567: LD_VAR 0 4
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: LIST
35580: PUSH
35581: EMPTY
35582: LIST
35583: PPUSH
35584: CALL_OW 69
35588: ADD
35589: ST_TO_ADDR
35590: GO 35518
35592: POP
35593: POP
// for i = 1 to tmp do
35594: LD_ADDR_VAR 0 4
35598: PUSH
35599: DOUBLE
35600: LD_INT 1
35602: DEC
35603: ST_TO_ADDR
35604: LD_VAR 0 3
35608: PUSH
35609: FOR_TO
35610: IFFALSE 35698
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35612: LD_ADDR_VAR 0 5
35616: PUSH
35617: LD_VAR 0 5
35621: PUSH
35622: LD_VAR 0 3
35626: PUSH
35627: LD_VAR 0 4
35631: ARRAY
35632: PPUSH
35633: CALL_OW 266
35637: PUSH
35638: LD_VAR 0 3
35642: PUSH
35643: LD_VAR 0 4
35647: ARRAY
35648: PPUSH
35649: CALL_OW 250
35653: PUSH
35654: LD_VAR 0 3
35658: PUSH
35659: LD_VAR 0 4
35663: ARRAY
35664: PPUSH
35665: CALL_OW 251
35669: PUSH
35670: LD_VAR 0 3
35674: PUSH
35675: LD_VAR 0 4
35679: ARRAY
35680: PPUSH
35681: CALL_OW 254
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: PUSH
35692: EMPTY
35693: LIST
35694: ADD
35695: ST_TO_ADDR
35696: GO 35609
35698: POP
35699: POP
// result := list ;
35700: LD_ADDR_VAR 0 2
35704: PUSH
35705: LD_VAR 0 5
35709: ST_TO_ADDR
// end ;
35710: LD_VAR 0 2
35714: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35715: LD_INT 0
35717: PPUSH
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
// if not factory then
35724: LD_VAR 0 1
35728: NOT
35729: IFFALSE 35733
// exit ;
35731: GO 36326
// if control = control_apeman then
35733: LD_VAR 0 4
35737: PUSH
35738: LD_INT 5
35740: EQUAL
35741: IFFALSE 35850
// begin tmp := UnitsInside ( factory ) ;
35743: LD_ADDR_VAR 0 8
35747: PUSH
35748: LD_VAR 0 1
35752: PPUSH
35753: CALL_OW 313
35757: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35758: LD_VAR 0 8
35762: PPUSH
35763: LD_INT 25
35765: PUSH
35766: LD_INT 12
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PPUSH
35773: CALL_OW 72
35777: NOT
35778: IFFALSE 35788
// control := control_manual ;
35780: LD_ADDR_VAR 0 4
35784: PUSH
35785: LD_INT 1
35787: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35788: LD_ADDR_VAR 0 8
35792: PUSH
35793: LD_VAR 0 1
35797: PPUSH
35798: CALL 35485 0 1
35802: ST_TO_ADDR
// if tmp then
35803: LD_VAR 0 8
35807: IFFALSE 35850
// begin for i in tmp do
35809: LD_ADDR_VAR 0 7
35813: PUSH
35814: LD_VAR 0 8
35818: PUSH
35819: FOR_IN
35820: IFFALSE 35848
// if i [ 1 ] = b_ext_radio then
35822: LD_VAR 0 7
35826: PUSH
35827: LD_INT 1
35829: ARRAY
35830: PUSH
35831: LD_INT 22
35833: EQUAL
35834: IFFALSE 35846
// begin control := control_remote ;
35836: LD_ADDR_VAR 0 4
35840: PUSH
35841: LD_INT 2
35843: ST_TO_ADDR
// break ;
35844: GO 35848
// end ;
35846: GO 35819
35848: POP
35849: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35850: LD_VAR 0 1
35854: PPUSH
35855: LD_VAR 0 2
35859: PPUSH
35860: LD_VAR 0 3
35864: PPUSH
35865: LD_VAR 0 4
35869: PPUSH
35870: LD_VAR 0 5
35874: PPUSH
35875: CALL_OW 448
35879: IFFALSE 35914
// begin result := [ chassis , engine , control , weapon ] ;
35881: LD_ADDR_VAR 0 6
35885: PUSH
35886: LD_VAR 0 2
35890: PUSH
35891: LD_VAR 0 3
35895: PUSH
35896: LD_VAR 0 4
35900: PUSH
35901: LD_VAR 0 5
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: ST_TO_ADDR
// exit ;
35912: GO 36326
// end ; _chassis := AvailableChassisList ( factory ) ;
35914: LD_ADDR_VAR 0 9
35918: PUSH
35919: LD_VAR 0 1
35923: PPUSH
35924: CALL_OW 475
35928: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35929: LD_ADDR_VAR 0 11
35933: PUSH
35934: LD_VAR 0 1
35938: PPUSH
35939: CALL_OW 476
35943: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35944: LD_ADDR_VAR 0 12
35948: PUSH
35949: LD_VAR 0 1
35953: PPUSH
35954: CALL_OW 477
35958: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35959: LD_ADDR_VAR 0 10
35963: PUSH
35964: LD_VAR 0 1
35968: PPUSH
35969: CALL_OW 478
35973: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35974: LD_VAR 0 9
35978: NOT
35979: PUSH
35980: LD_VAR 0 11
35984: NOT
35985: OR
35986: PUSH
35987: LD_VAR 0 12
35991: NOT
35992: OR
35993: PUSH
35994: LD_VAR 0 10
35998: NOT
35999: OR
36000: IFFALSE 36035
// begin result := [ chassis , engine , control , weapon ] ;
36002: LD_ADDR_VAR 0 6
36006: PUSH
36007: LD_VAR 0 2
36011: PUSH
36012: LD_VAR 0 3
36016: PUSH
36017: LD_VAR 0 4
36021: PUSH
36022: LD_VAR 0 5
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: ST_TO_ADDR
// exit ;
36033: GO 36326
// end ; if not chassis in _chassis then
36035: LD_VAR 0 2
36039: PUSH
36040: LD_VAR 0 9
36044: IN
36045: NOT
36046: IFFALSE 36072
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36048: LD_ADDR_VAR 0 2
36052: PUSH
36053: LD_VAR 0 9
36057: PUSH
36058: LD_INT 1
36060: PPUSH
36061: LD_VAR 0 9
36065: PPUSH
36066: CALL_OW 12
36070: ARRAY
36071: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36072: LD_VAR 0 2
36076: PPUSH
36077: LD_VAR 0 3
36081: PPUSH
36082: CALL 36331 0 2
36086: NOT
36087: IFFALSE 36146
// repeat engine := _engine [ 1 ] ;
36089: LD_ADDR_VAR 0 3
36093: PUSH
36094: LD_VAR 0 11
36098: PUSH
36099: LD_INT 1
36101: ARRAY
36102: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36103: LD_ADDR_VAR 0 11
36107: PUSH
36108: LD_VAR 0 11
36112: PPUSH
36113: LD_INT 1
36115: PPUSH
36116: CALL_OW 3
36120: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36121: LD_VAR 0 2
36125: PPUSH
36126: LD_VAR 0 3
36130: PPUSH
36131: CALL 36331 0 2
36135: PUSH
36136: LD_VAR 0 11
36140: PUSH
36141: EMPTY
36142: EQUAL
36143: OR
36144: IFFALSE 36089
// if not control in _control then
36146: LD_VAR 0 4
36150: PUSH
36151: LD_VAR 0 12
36155: IN
36156: NOT
36157: IFFALSE 36183
// control := _control [ rand ( 1 , _control ) ] ;
36159: LD_ADDR_VAR 0 4
36163: PUSH
36164: LD_VAR 0 12
36168: PUSH
36169: LD_INT 1
36171: PPUSH
36172: LD_VAR 0 12
36176: PPUSH
36177: CALL_OW 12
36181: ARRAY
36182: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36183: LD_VAR 0 2
36187: PPUSH
36188: LD_VAR 0 5
36192: PPUSH
36193: CALL 36551 0 2
36197: NOT
36198: IFFALSE 36257
// repeat weapon := _weapon [ 1 ] ;
36200: LD_ADDR_VAR 0 5
36204: PUSH
36205: LD_VAR 0 10
36209: PUSH
36210: LD_INT 1
36212: ARRAY
36213: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36214: LD_ADDR_VAR 0 10
36218: PUSH
36219: LD_VAR 0 10
36223: PPUSH
36224: LD_INT 1
36226: PPUSH
36227: CALL_OW 3
36231: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36232: LD_VAR 0 2
36236: PPUSH
36237: LD_VAR 0 5
36241: PPUSH
36242: CALL 36551 0 2
36246: PUSH
36247: LD_VAR 0 10
36251: PUSH
36252: EMPTY
36253: EQUAL
36254: OR
36255: IFFALSE 36200
// result := [ ] ;
36257: LD_ADDR_VAR 0 6
36261: PUSH
36262: EMPTY
36263: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36264: LD_VAR 0 1
36268: PPUSH
36269: LD_VAR 0 2
36273: PPUSH
36274: LD_VAR 0 3
36278: PPUSH
36279: LD_VAR 0 4
36283: PPUSH
36284: LD_VAR 0 5
36288: PPUSH
36289: CALL_OW 448
36293: IFFALSE 36326
// result := [ chassis , engine , control , weapon ] ;
36295: LD_ADDR_VAR 0 6
36299: PUSH
36300: LD_VAR 0 2
36304: PUSH
36305: LD_VAR 0 3
36309: PUSH
36310: LD_VAR 0 4
36314: PUSH
36315: LD_VAR 0 5
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: ST_TO_ADDR
// end ;
36326: LD_VAR 0 6
36330: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36331: LD_INT 0
36333: PPUSH
// if not chassis or not engine then
36334: LD_VAR 0 1
36338: NOT
36339: PUSH
36340: LD_VAR 0 2
36344: NOT
36345: OR
36346: IFFALSE 36350
// exit ;
36348: GO 36546
// case engine of engine_solar :
36350: LD_VAR 0 2
36354: PUSH
36355: LD_INT 2
36357: DOUBLE
36358: EQUAL
36359: IFTRUE 36363
36361: GO 36401
36363: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36364: LD_ADDR_VAR 0 3
36368: PUSH
36369: LD_INT 11
36371: PUSH
36372: LD_INT 12
36374: PUSH
36375: LD_INT 13
36377: PUSH
36378: LD_INT 14
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: LD_INT 2
36386: PUSH
36387: LD_INT 3
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: ST_TO_ADDR
36399: GO 36530
36401: LD_INT 1
36403: DOUBLE
36404: EQUAL
36405: IFTRUE 36409
36407: GO 36471
36409: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36410: LD_ADDR_VAR 0 3
36414: PUSH
36415: LD_INT 11
36417: PUSH
36418: LD_INT 12
36420: PUSH
36421: LD_INT 13
36423: PUSH
36424: LD_INT 14
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: LD_INT 2
36432: PUSH
36433: LD_INT 3
36435: PUSH
36436: LD_INT 4
36438: PUSH
36439: LD_INT 5
36441: PUSH
36442: LD_INT 21
36444: PUSH
36445: LD_INT 23
36447: PUSH
36448: LD_INT 22
36450: PUSH
36451: LD_INT 24
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: ST_TO_ADDR
36469: GO 36530
36471: LD_INT 3
36473: DOUBLE
36474: EQUAL
36475: IFTRUE 36479
36477: GO 36529
36479: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36480: LD_ADDR_VAR 0 3
36484: PUSH
36485: LD_INT 13
36487: PUSH
36488: LD_INT 14
36490: PUSH
36491: LD_INT 2
36493: PUSH
36494: LD_INT 3
36496: PUSH
36497: LD_INT 4
36499: PUSH
36500: LD_INT 5
36502: PUSH
36503: LD_INT 21
36505: PUSH
36506: LD_INT 22
36508: PUSH
36509: LD_INT 23
36511: PUSH
36512: LD_INT 24
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: ST_TO_ADDR
36527: GO 36530
36529: POP
// result := ( chassis in result ) ;
36530: LD_ADDR_VAR 0 3
36534: PUSH
36535: LD_VAR 0 1
36539: PUSH
36540: LD_VAR 0 3
36544: IN
36545: ST_TO_ADDR
// end ;
36546: LD_VAR 0 3
36550: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36551: LD_INT 0
36553: PPUSH
// if not chassis or not weapon then
36554: LD_VAR 0 1
36558: NOT
36559: PUSH
36560: LD_VAR 0 2
36564: NOT
36565: OR
36566: IFFALSE 36570
// exit ;
36568: GO 37596
// case weapon of us_machine_gun :
36570: LD_VAR 0 2
36574: PUSH
36575: LD_INT 2
36577: DOUBLE
36578: EQUAL
36579: IFTRUE 36583
36581: GO 36613
36583: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36584: LD_ADDR_VAR 0 3
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: LD_INT 2
36594: PUSH
36595: LD_INT 3
36597: PUSH
36598: LD_INT 4
36600: PUSH
36601: LD_INT 5
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: ST_TO_ADDR
36611: GO 37580
36613: LD_INT 3
36615: DOUBLE
36616: EQUAL
36617: IFTRUE 36621
36619: GO 36651
36621: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36622: LD_ADDR_VAR 0 3
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: LD_INT 2
36632: PUSH
36633: LD_INT 3
36635: PUSH
36636: LD_INT 4
36638: PUSH
36639: LD_INT 5
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: ST_TO_ADDR
36649: GO 37580
36651: LD_INT 11
36653: DOUBLE
36654: EQUAL
36655: IFTRUE 36659
36657: GO 36689
36659: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36660: LD_ADDR_VAR 0 3
36664: PUSH
36665: LD_INT 1
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: LD_INT 3
36673: PUSH
36674: LD_INT 4
36676: PUSH
36677: LD_INT 5
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: ST_TO_ADDR
36687: GO 37580
36689: LD_INT 4
36691: DOUBLE
36692: EQUAL
36693: IFTRUE 36697
36695: GO 36723
36697: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36698: LD_ADDR_VAR 0 3
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: LD_INT 3
36708: PUSH
36709: LD_INT 4
36711: PUSH
36712: LD_INT 5
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: ST_TO_ADDR
36721: GO 37580
36723: LD_INT 5
36725: DOUBLE
36726: EQUAL
36727: IFTRUE 36731
36729: GO 36757
36731: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36732: LD_ADDR_VAR 0 3
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: LD_INT 3
36742: PUSH
36743: LD_INT 4
36745: PUSH
36746: LD_INT 5
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
36755: GO 37580
36757: LD_INT 9
36759: DOUBLE
36760: EQUAL
36761: IFTRUE 36765
36763: GO 36791
36765: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36766: LD_ADDR_VAR 0 3
36770: PUSH
36771: LD_INT 2
36773: PUSH
36774: LD_INT 3
36776: PUSH
36777: LD_INT 4
36779: PUSH
36780: LD_INT 5
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: ST_TO_ADDR
36789: GO 37580
36791: LD_INT 7
36793: DOUBLE
36794: EQUAL
36795: IFTRUE 36799
36797: GO 36825
36799: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36800: LD_ADDR_VAR 0 3
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: LD_INT 3
36810: PUSH
36811: LD_INT 4
36813: PUSH
36814: LD_INT 5
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: ST_TO_ADDR
36823: GO 37580
36825: LD_INT 12
36827: DOUBLE
36828: EQUAL
36829: IFTRUE 36833
36831: GO 36859
36833: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36834: LD_ADDR_VAR 0 3
36838: PUSH
36839: LD_INT 2
36841: PUSH
36842: LD_INT 3
36844: PUSH
36845: LD_INT 4
36847: PUSH
36848: LD_INT 5
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: ST_TO_ADDR
36857: GO 37580
36859: LD_INT 13
36861: DOUBLE
36862: EQUAL
36863: IFTRUE 36867
36865: GO 36893
36867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36868: LD_ADDR_VAR 0 3
36872: PUSH
36873: LD_INT 2
36875: PUSH
36876: LD_INT 3
36878: PUSH
36879: LD_INT 4
36881: PUSH
36882: LD_INT 5
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
36891: GO 37580
36893: LD_INT 14
36895: DOUBLE
36896: EQUAL
36897: IFTRUE 36901
36899: GO 36919
36901: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36902: LD_ADDR_VAR 0 3
36906: PUSH
36907: LD_INT 4
36909: PUSH
36910: LD_INT 5
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: ST_TO_ADDR
36917: GO 37580
36919: LD_INT 6
36921: DOUBLE
36922: EQUAL
36923: IFTRUE 36927
36925: GO 36945
36927: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36928: LD_ADDR_VAR 0 3
36932: PUSH
36933: LD_INT 4
36935: PUSH
36936: LD_INT 5
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: ST_TO_ADDR
36943: GO 37580
36945: LD_INT 10
36947: DOUBLE
36948: EQUAL
36949: IFTRUE 36953
36951: GO 36971
36953: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36954: LD_ADDR_VAR 0 3
36958: PUSH
36959: LD_INT 4
36961: PUSH
36962: LD_INT 5
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: ST_TO_ADDR
36969: GO 37580
36971: LD_INT 22
36973: DOUBLE
36974: EQUAL
36975: IFTRUE 36979
36977: GO 37005
36979: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36980: LD_ADDR_VAR 0 3
36984: PUSH
36985: LD_INT 11
36987: PUSH
36988: LD_INT 12
36990: PUSH
36991: LD_INT 13
36993: PUSH
36994: LD_INT 14
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: ST_TO_ADDR
37003: GO 37580
37005: LD_INT 23
37007: DOUBLE
37008: EQUAL
37009: IFTRUE 37013
37011: GO 37039
37013: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37014: LD_ADDR_VAR 0 3
37018: PUSH
37019: LD_INT 11
37021: PUSH
37022: LD_INT 12
37024: PUSH
37025: LD_INT 13
37027: PUSH
37028: LD_INT 14
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: ST_TO_ADDR
37037: GO 37580
37039: LD_INT 24
37041: DOUBLE
37042: EQUAL
37043: IFTRUE 37047
37045: GO 37073
37047: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37048: LD_ADDR_VAR 0 3
37052: PUSH
37053: LD_INT 11
37055: PUSH
37056: LD_INT 12
37058: PUSH
37059: LD_INT 13
37061: PUSH
37062: LD_INT 14
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: ST_TO_ADDR
37071: GO 37580
37073: LD_INT 30
37075: DOUBLE
37076: EQUAL
37077: IFTRUE 37081
37079: GO 37107
37081: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37082: LD_ADDR_VAR 0 3
37086: PUSH
37087: LD_INT 11
37089: PUSH
37090: LD_INT 12
37092: PUSH
37093: LD_INT 13
37095: PUSH
37096: LD_INT 14
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: ST_TO_ADDR
37105: GO 37580
37107: LD_INT 25
37109: DOUBLE
37110: EQUAL
37111: IFTRUE 37115
37113: GO 37133
37115: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37116: LD_ADDR_VAR 0 3
37120: PUSH
37121: LD_INT 13
37123: PUSH
37124: LD_INT 14
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: ST_TO_ADDR
37131: GO 37580
37133: LD_INT 27
37135: DOUBLE
37136: EQUAL
37137: IFTRUE 37141
37139: GO 37159
37141: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37142: LD_ADDR_VAR 0 3
37146: PUSH
37147: LD_INT 13
37149: PUSH
37150: LD_INT 14
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: ST_TO_ADDR
37157: GO 37580
37159: LD_INT 28
37161: DOUBLE
37162: EQUAL
37163: IFTRUE 37167
37165: GO 37185
37167: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37168: LD_ADDR_VAR 0 3
37172: PUSH
37173: LD_INT 13
37175: PUSH
37176: LD_INT 14
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: ST_TO_ADDR
37183: GO 37580
37185: LD_INT 29
37187: DOUBLE
37188: EQUAL
37189: IFTRUE 37193
37191: GO 37211
37193: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37194: LD_ADDR_VAR 0 3
37198: PUSH
37199: LD_INT 13
37201: PUSH
37202: LD_INT 14
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: ST_TO_ADDR
37209: GO 37580
37211: LD_INT 31
37213: DOUBLE
37214: EQUAL
37215: IFTRUE 37219
37217: GO 37237
37219: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37220: LD_ADDR_VAR 0 3
37224: PUSH
37225: LD_INT 13
37227: PUSH
37228: LD_INT 14
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: ST_TO_ADDR
37235: GO 37580
37237: LD_INT 26
37239: DOUBLE
37240: EQUAL
37241: IFTRUE 37245
37243: GO 37263
37245: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37246: LD_ADDR_VAR 0 3
37250: PUSH
37251: LD_INT 13
37253: PUSH
37254: LD_INT 14
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: ST_TO_ADDR
37261: GO 37580
37263: LD_INT 42
37265: DOUBLE
37266: EQUAL
37267: IFTRUE 37271
37269: GO 37297
37271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37272: LD_ADDR_VAR 0 3
37276: PUSH
37277: LD_INT 21
37279: PUSH
37280: LD_INT 22
37282: PUSH
37283: LD_INT 23
37285: PUSH
37286: LD_INT 24
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: ST_TO_ADDR
37295: GO 37580
37297: LD_INT 43
37299: DOUBLE
37300: EQUAL
37301: IFTRUE 37305
37303: GO 37331
37305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37306: LD_ADDR_VAR 0 3
37310: PUSH
37311: LD_INT 21
37313: PUSH
37314: LD_INT 22
37316: PUSH
37317: LD_INT 23
37319: PUSH
37320: LD_INT 24
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: ST_TO_ADDR
37329: GO 37580
37331: LD_INT 44
37333: DOUBLE
37334: EQUAL
37335: IFTRUE 37339
37337: GO 37365
37339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37340: LD_ADDR_VAR 0 3
37344: PUSH
37345: LD_INT 21
37347: PUSH
37348: LD_INT 22
37350: PUSH
37351: LD_INT 23
37353: PUSH
37354: LD_INT 24
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: ST_TO_ADDR
37363: GO 37580
37365: LD_INT 45
37367: DOUBLE
37368: EQUAL
37369: IFTRUE 37373
37371: GO 37399
37373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37374: LD_ADDR_VAR 0 3
37378: PUSH
37379: LD_INT 21
37381: PUSH
37382: LD_INT 22
37384: PUSH
37385: LD_INT 23
37387: PUSH
37388: LD_INT 24
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: ST_TO_ADDR
37397: GO 37580
37399: LD_INT 49
37401: DOUBLE
37402: EQUAL
37403: IFTRUE 37407
37405: GO 37433
37407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37408: LD_ADDR_VAR 0 3
37412: PUSH
37413: LD_INT 21
37415: PUSH
37416: LD_INT 22
37418: PUSH
37419: LD_INT 23
37421: PUSH
37422: LD_INT 24
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: ST_TO_ADDR
37431: GO 37580
37433: LD_INT 51
37435: DOUBLE
37436: EQUAL
37437: IFTRUE 37441
37439: GO 37467
37441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37442: LD_ADDR_VAR 0 3
37446: PUSH
37447: LD_INT 21
37449: PUSH
37450: LD_INT 22
37452: PUSH
37453: LD_INT 23
37455: PUSH
37456: LD_INT 24
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: ST_TO_ADDR
37465: GO 37580
37467: LD_INT 52
37469: DOUBLE
37470: EQUAL
37471: IFTRUE 37475
37473: GO 37501
37475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37476: LD_ADDR_VAR 0 3
37480: PUSH
37481: LD_INT 21
37483: PUSH
37484: LD_INT 22
37486: PUSH
37487: LD_INT 23
37489: PUSH
37490: LD_INT 24
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: ST_TO_ADDR
37499: GO 37580
37501: LD_INT 53
37503: DOUBLE
37504: EQUAL
37505: IFTRUE 37509
37507: GO 37527
37509: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37510: LD_ADDR_VAR 0 3
37514: PUSH
37515: LD_INT 23
37517: PUSH
37518: LD_INT 24
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: ST_TO_ADDR
37525: GO 37580
37527: LD_INT 46
37529: DOUBLE
37530: EQUAL
37531: IFTRUE 37535
37533: GO 37553
37535: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37536: LD_ADDR_VAR 0 3
37540: PUSH
37541: LD_INT 23
37543: PUSH
37544: LD_INT 24
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: ST_TO_ADDR
37551: GO 37580
37553: LD_INT 47
37555: DOUBLE
37556: EQUAL
37557: IFTRUE 37561
37559: GO 37579
37561: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37562: LD_ADDR_VAR 0 3
37566: PUSH
37567: LD_INT 23
37569: PUSH
37570: LD_INT 24
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: ST_TO_ADDR
37577: GO 37580
37579: POP
// result := ( chassis in result ) ;
37580: LD_ADDR_VAR 0 3
37584: PUSH
37585: LD_VAR 0 1
37589: PUSH
37590: LD_VAR 0 3
37594: IN
37595: ST_TO_ADDR
// end ;
37596: LD_VAR 0 3
37600: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37601: LD_INT 0
37603: PPUSH
37604: PPUSH
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
37609: PPUSH
// result := array ;
37610: LD_ADDR_VAR 0 5
37614: PUSH
37615: LD_VAR 0 1
37619: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37620: LD_VAR 0 1
37624: NOT
37625: PUSH
37626: LD_VAR 0 2
37630: NOT
37631: OR
37632: PUSH
37633: LD_VAR 0 3
37637: NOT
37638: OR
37639: PUSH
37640: LD_VAR 0 2
37644: PUSH
37645: LD_VAR 0 1
37649: GREATER
37650: OR
37651: PUSH
37652: LD_VAR 0 3
37656: PUSH
37657: LD_VAR 0 1
37661: GREATER
37662: OR
37663: IFFALSE 37667
// exit ;
37665: GO 37963
// if direction then
37667: LD_VAR 0 4
37671: IFFALSE 37735
// begin d := 1 ;
37673: LD_ADDR_VAR 0 9
37677: PUSH
37678: LD_INT 1
37680: ST_TO_ADDR
// if i_from > i_to then
37681: LD_VAR 0 2
37685: PUSH
37686: LD_VAR 0 3
37690: GREATER
37691: IFFALSE 37717
// length := ( array - i_from ) + i_to else
37693: LD_ADDR_VAR 0 11
37697: PUSH
37698: LD_VAR 0 1
37702: PUSH
37703: LD_VAR 0 2
37707: MINUS
37708: PUSH
37709: LD_VAR 0 3
37713: PLUS
37714: ST_TO_ADDR
37715: GO 37733
// length := i_to - i_from ;
37717: LD_ADDR_VAR 0 11
37721: PUSH
37722: LD_VAR 0 3
37726: PUSH
37727: LD_VAR 0 2
37731: MINUS
37732: ST_TO_ADDR
// end else
37733: GO 37796
// begin d := - 1 ;
37735: LD_ADDR_VAR 0 9
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: ST_TO_ADDR
// if i_from > i_to then
37744: LD_VAR 0 2
37748: PUSH
37749: LD_VAR 0 3
37753: GREATER
37754: IFFALSE 37774
// length := i_from - i_to else
37756: LD_ADDR_VAR 0 11
37760: PUSH
37761: LD_VAR 0 2
37765: PUSH
37766: LD_VAR 0 3
37770: MINUS
37771: ST_TO_ADDR
37772: GO 37796
// length := ( array - i_to ) + i_from ;
37774: LD_ADDR_VAR 0 11
37778: PUSH
37779: LD_VAR 0 1
37783: PUSH
37784: LD_VAR 0 3
37788: MINUS
37789: PUSH
37790: LD_VAR 0 2
37794: PLUS
37795: ST_TO_ADDR
// end ; if not length then
37796: LD_VAR 0 11
37800: NOT
37801: IFFALSE 37805
// exit ;
37803: GO 37963
// tmp := array ;
37805: LD_ADDR_VAR 0 10
37809: PUSH
37810: LD_VAR 0 1
37814: ST_TO_ADDR
// for i = 1 to length do
37815: LD_ADDR_VAR 0 6
37819: PUSH
37820: DOUBLE
37821: LD_INT 1
37823: DEC
37824: ST_TO_ADDR
37825: LD_VAR 0 11
37829: PUSH
37830: FOR_TO
37831: IFFALSE 37951
// begin for j = 1 to array do
37833: LD_ADDR_VAR 0 7
37837: PUSH
37838: DOUBLE
37839: LD_INT 1
37841: DEC
37842: ST_TO_ADDR
37843: LD_VAR 0 1
37847: PUSH
37848: FOR_TO
37849: IFFALSE 37937
// begin k := j + d ;
37851: LD_ADDR_VAR 0 8
37855: PUSH
37856: LD_VAR 0 7
37860: PUSH
37861: LD_VAR 0 9
37865: PLUS
37866: ST_TO_ADDR
// if k > array then
37867: LD_VAR 0 8
37871: PUSH
37872: LD_VAR 0 1
37876: GREATER
37877: IFFALSE 37887
// k := 1 ;
37879: LD_ADDR_VAR 0 8
37883: PUSH
37884: LD_INT 1
37886: ST_TO_ADDR
// if not k then
37887: LD_VAR 0 8
37891: NOT
37892: IFFALSE 37904
// k := array ;
37894: LD_ADDR_VAR 0 8
37898: PUSH
37899: LD_VAR 0 1
37903: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37904: LD_ADDR_VAR 0 10
37908: PUSH
37909: LD_VAR 0 10
37913: PPUSH
37914: LD_VAR 0 8
37918: PPUSH
37919: LD_VAR 0 1
37923: PUSH
37924: LD_VAR 0 7
37928: ARRAY
37929: PPUSH
37930: CALL_OW 1
37934: ST_TO_ADDR
// end ;
37935: GO 37848
37937: POP
37938: POP
// array := tmp ;
37939: LD_ADDR_VAR 0 1
37943: PUSH
37944: LD_VAR 0 10
37948: ST_TO_ADDR
// end ;
37949: GO 37830
37951: POP
37952: POP
// result := array ;
37953: LD_ADDR_VAR 0 5
37957: PUSH
37958: LD_VAR 0 1
37962: ST_TO_ADDR
// end ;
37963: LD_VAR 0 5
37967: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37968: LD_INT 0
37970: PPUSH
37971: PPUSH
// result := 0 ;
37972: LD_ADDR_VAR 0 3
37976: PUSH
37977: LD_INT 0
37979: ST_TO_ADDR
// if not array or not value in array then
37980: LD_VAR 0 1
37984: NOT
37985: PUSH
37986: LD_VAR 0 2
37990: PUSH
37991: LD_VAR 0 1
37995: IN
37996: NOT
37997: OR
37998: IFFALSE 38002
// exit ;
38000: GO 38056
// for i = 1 to array do
38002: LD_ADDR_VAR 0 4
38006: PUSH
38007: DOUBLE
38008: LD_INT 1
38010: DEC
38011: ST_TO_ADDR
38012: LD_VAR 0 1
38016: PUSH
38017: FOR_TO
38018: IFFALSE 38054
// if value = array [ i ] then
38020: LD_VAR 0 2
38024: PUSH
38025: LD_VAR 0 1
38029: PUSH
38030: LD_VAR 0 4
38034: ARRAY
38035: EQUAL
38036: IFFALSE 38052
// begin result := i ;
38038: LD_ADDR_VAR 0 3
38042: PUSH
38043: LD_VAR 0 4
38047: ST_TO_ADDR
// exit ;
38048: POP
38049: POP
38050: GO 38056
// end ;
38052: GO 38017
38054: POP
38055: POP
// end ;
38056: LD_VAR 0 3
38060: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38061: LD_INT 0
38063: PPUSH
// vc_chassis := chassis ;
38064: LD_ADDR_OWVAR 37
38068: PUSH
38069: LD_VAR 0 1
38073: ST_TO_ADDR
// vc_engine := engine ;
38074: LD_ADDR_OWVAR 39
38078: PUSH
38079: LD_VAR 0 2
38083: ST_TO_ADDR
// vc_control := control ;
38084: LD_ADDR_OWVAR 38
38088: PUSH
38089: LD_VAR 0 3
38093: ST_TO_ADDR
// vc_weapon := weapon ;
38094: LD_ADDR_OWVAR 40
38098: PUSH
38099: LD_VAR 0 4
38103: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38104: LD_ADDR_OWVAR 41
38108: PUSH
38109: LD_VAR 0 5
38113: ST_TO_ADDR
// end ;
38114: LD_VAR 0 6
38118: RET
// export function WantPlant ( unit ) ; var task ; begin
38119: LD_INT 0
38121: PPUSH
38122: PPUSH
// result := false ;
38123: LD_ADDR_VAR 0 2
38127: PUSH
38128: LD_INT 0
38130: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38131: LD_ADDR_VAR 0 3
38135: PUSH
38136: LD_VAR 0 1
38140: PPUSH
38141: CALL_OW 437
38145: ST_TO_ADDR
// if task then
38146: LD_VAR 0 3
38150: IFFALSE 38178
// if task [ 1 ] [ 1 ] = p then
38152: LD_VAR 0 3
38156: PUSH
38157: LD_INT 1
38159: ARRAY
38160: PUSH
38161: LD_INT 1
38163: ARRAY
38164: PUSH
38165: LD_STRING p
38167: EQUAL
38168: IFFALSE 38178
// result := true ;
38170: LD_ADDR_VAR 0 2
38174: PUSH
38175: LD_INT 1
38177: ST_TO_ADDR
// end ;
38178: LD_VAR 0 2
38182: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38183: LD_INT 0
38185: PPUSH
38186: PPUSH
38187: PPUSH
38188: PPUSH
// if pos < 1 then
38189: LD_VAR 0 2
38193: PUSH
38194: LD_INT 1
38196: LESS
38197: IFFALSE 38201
// exit ;
38199: GO 38504
// if pos = 1 then
38201: LD_VAR 0 2
38205: PUSH
38206: LD_INT 1
38208: EQUAL
38209: IFFALSE 38242
// result := Replace ( arr , pos [ 1 ] , value ) else
38211: LD_ADDR_VAR 0 4
38215: PUSH
38216: LD_VAR 0 1
38220: PPUSH
38221: LD_VAR 0 2
38225: PUSH
38226: LD_INT 1
38228: ARRAY
38229: PPUSH
38230: LD_VAR 0 3
38234: PPUSH
38235: CALL_OW 1
38239: ST_TO_ADDR
38240: GO 38504
// begin tmp := arr ;
38242: LD_ADDR_VAR 0 6
38246: PUSH
38247: LD_VAR 0 1
38251: ST_TO_ADDR
// s_arr := [ tmp ] ;
38252: LD_ADDR_VAR 0 7
38256: PUSH
38257: LD_VAR 0 6
38261: PUSH
38262: EMPTY
38263: LIST
38264: ST_TO_ADDR
// for i = 1 to pos - 1 do
38265: LD_ADDR_VAR 0 5
38269: PUSH
38270: DOUBLE
38271: LD_INT 1
38273: DEC
38274: ST_TO_ADDR
38275: LD_VAR 0 2
38279: PUSH
38280: LD_INT 1
38282: MINUS
38283: PUSH
38284: FOR_TO
38285: IFFALSE 38330
// begin tmp := tmp [ pos [ i ] ] ;
38287: LD_ADDR_VAR 0 6
38291: PUSH
38292: LD_VAR 0 6
38296: PUSH
38297: LD_VAR 0 2
38301: PUSH
38302: LD_VAR 0 5
38306: ARRAY
38307: ARRAY
38308: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38309: LD_ADDR_VAR 0 7
38313: PUSH
38314: LD_VAR 0 7
38318: PUSH
38319: LD_VAR 0 6
38323: PUSH
38324: EMPTY
38325: LIST
38326: ADD
38327: ST_TO_ADDR
// end ;
38328: GO 38284
38330: POP
38331: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38332: LD_ADDR_VAR 0 6
38336: PUSH
38337: LD_VAR 0 6
38341: PPUSH
38342: LD_VAR 0 2
38346: PUSH
38347: LD_VAR 0 2
38351: ARRAY
38352: PPUSH
38353: LD_VAR 0 3
38357: PPUSH
38358: CALL_OW 1
38362: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38363: LD_ADDR_VAR 0 7
38367: PUSH
38368: LD_VAR 0 7
38372: PPUSH
38373: LD_VAR 0 7
38377: PPUSH
38378: LD_VAR 0 6
38382: PPUSH
38383: CALL_OW 1
38387: ST_TO_ADDR
// for i = s_arr downto 2 do
38388: LD_ADDR_VAR 0 5
38392: PUSH
38393: DOUBLE
38394: LD_VAR 0 7
38398: INC
38399: ST_TO_ADDR
38400: LD_INT 2
38402: PUSH
38403: FOR_DOWNTO
38404: IFFALSE 38488
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38406: LD_ADDR_VAR 0 6
38410: PUSH
38411: LD_VAR 0 7
38415: PUSH
38416: LD_VAR 0 5
38420: PUSH
38421: LD_INT 1
38423: MINUS
38424: ARRAY
38425: PPUSH
38426: LD_VAR 0 2
38430: PUSH
38431: LD_VAR 0 5
38435: PUSH
38436: LD_INT 1
38438: MINUS
38439: ARRAY
38440: PPUSH
38441: LD_VAR 0 7
38445: PUSH
38446: LD_VAR 0 5
38450: ARRAY
38451: PPUSH
38452: CALL_OW 1
38456: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38457: LD_ADDR_VAR 0 7
38461: PUSH
38462: LD_VAR 0 7
38466: PPUSH
38467: LD_VAR 0 5
38471: PUSH
38472: LD_INT 1
38474: MINUS
38475: PPUSH
38476: LD_VAR 0 6
38480: PPUSH
38481: CALL_OW 1
38485: ST_TO_ADDR
// end ;
38486: GO 38403
38488: POP
38489: POP
// result := s_arr [ 1 ] ;
38490: LD_ADDR_VAR 0 4
38494: PUSH
38495: LD_VAR 0 7
38499: PUSH
38500: LD_INT 1
38502: ARRAY
38503: ST_TO_ADDR
// end ; end ;
38504: LD_VAR 0 4
38508: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38509: LD_INT 0
38511: PPUSH
38512: PPUSH
// if not list then
38513: LD_VAR 0 1
38517: NOT
38518: IFFALSE 38522
// exit ;
38520: GO 38613
// i := list [ pos1 ] ;
38522: LD_ADDR_VAR 0 5
38526: PUSH
38527: LD_VAR 0 1
38531: PUSH
38532: LD_VAR 0 2
38536: ARRAY
38537: ST_TO_ADDR
// if not i then
38538: LD_VAR 0 5
38542: NOT
38543: IFFALSE 38547
// exit ;
38545: GO 38613
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38547: LD_ADDR_VAR 0 1
38551: PUSH
38552: LD_VAR 0 1
38556: PPUSH
38557: LD_VAR 0 2
38561: PPUSH
38562: LD_VAR 0 1
38566: PUSH
38567: LD_VAR 0 3
38571: ARRAY
38572: PPUSH
38573: CALL_OW 1
38577: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38578: LD_ADDR_VAR 0 1
38582: PUSH
38583: LD_VAR 0 1
38587: PPUSH
38588: LD_VAR 0 3
38592: PPUSH
38593: LD_VAR 0 5
38597: PPUSH
38598: CALL_OW 1
38602: ST_TO_ADDR
// result := list ;
38603: LD_ADDR_VAR 0 4
38607: PUSH
38608: LD_VAR 0 1
38612: ST_TO_ADDR
// end ;
38613: LD_VAR 0 4
38617: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38618: LD_INT 0
38620: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38621: LD_ADDR_VAR 0 5
38625: PUSH
38626: LD_VAR 0 1
38630: PPUSH
38631: CALL_OW 250
38635: PPUSH
38636: LD_VAR 0 1
38640: PPUSH
38641: CALL_OW 251
38645: PPUSH
38646: LD_VAR 0 2
38650: PPUSH
38651: LD_VAR 0 3
38655: PPUSH
38656: LD_VAR 0 4
38660: PPUSH
38661: CALL 38671 0 5
38665: ST_TO_ADDR
// end ;
38666: LD_VAR 0 5
38670: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38671: LD_INT 0
38673: PPUSH
38674: PPUSH
38675: PPUSH
38676: PPUSH
// if not list then
38677: LD_VAR 0 3
38681: NOT
38682: IFFALSE 38686
// exit ;
38684: GO 39074
// result := [ ] ;
38686: LD_ADDR_VAR 0 6
38690: PUSH
38691: EMPTY
38692: ST_TO_ADDR
// for i in list do
38693: LD_ADDR_VAR 0 7
38697: PUSH
38698: LD_VAR 0 3
38702: PUSH
38703: FOR_IN
38704: IFFALSE 38906
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38706: LD_ADDR_VAR 0 9
38710: PUSH
38711: LD_VAR 0 7
38715: PPUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: LD_VAR 0 2
38725: PPUSH
38726: CALL_OW 297
38730: ST_TO_ADDR
// if not result then
38731: LD_VAR 0 6
38735: NOT
38736: IFFALSE 38762
// result := [ [ i , tmp ] ] else
38738: LD_ADDR_VAR 0 6
38742: PUSH
38743: LD_VAR 0 7
38747: PUSH
38748: LD_VAR 0 9
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: EMPTY
38758: LIST
38759: ST_TO_ADDR
38760: GO 38904
// begin if result [ result ] [ 2 ] < tmp then
38762: LD_VAR 0 6
38766: PUSH
38767: LD_VAR 0 6
38771: ARRAY
38772: PUSH
38773: LD_INT 2
38775: ARRAY
38776: PUSH
38777: LD_VAR 0 9
38781: LESS
38782: IFFALSE 38824
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38784: LD_ADDR_VAR 0 6
38788: PUSH
38789: LD_VAR 0 6
38793: PPUSH
38794: LD_VAR 0 6
38798: PUSH
38799: LD_INT 1
38801: PLUS
38802: PPUSH
38803: LD_VAR 0 7
38807: PUSH
38808: LD_VAR 0 9
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PPUSH
38817: CALL_OW 2
38821: ST_TO_ADDR
38822: GO 38904
// for j = 1 to result do
38824: LD_ADDR_VAR 0 8
38828: PUSH
38829: DOUBLE
38830: LD_INT 1
38832: DEC
38833: ST_TO_ADDR
38834: LD_VAR 0 6
38838: PUSH
38839: FOR_TO
38840: IFFALSE 38902
// begin if tmp < result [ j ] [ 2 ] then
38842: LD_VAR 0 9
38846: PUSH
38847: LD_VAR 0 6
38851: PUSH
38852: LD_VAR 0 8
38856: ARRAY
38857: PUSH
38858: LD_INT 2
38860: ARRAY
38861: LESS
38862: IFFALSE 38900
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38864: LD_ADDR_VAR 0 6
38868: PUSH
38869: LD_VAR 0 6
38873: PPUSH
38874: LD_VAR 0 8
38878: PPUSH
38879: LD_VAR 0 7
38883: PUSH
38884: LD_VAR 0 9
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PPUSH
38893: CALL_OW 2
38897: ST_TO_ADDR
// break ;
38898: GO 38902
// end ; end ;
38900: GO 38839
38902: POP
38903: POP
// end ; end ;
38904: GO 38703
38906: POP
38907: POP
// if result and not asc then
38908: LD_VAR 0 6
38912: PUSH
38913: LD_VAR 0 4
38917: NOT
38918: AND
38919: IFFALSE 38994
// begin tmp := result ;
38921: LD_ADDR_VAR 0 9
38925: PUSH
38926: LD_VAR 0 6
38930: ST_TO_ADDR
// for i = tmp downto 1 do
38931: LD_ADDR_VAR 0 7
38935: PUSH
38936: DOUBLE
38937: LD_VAR 0 9
38941: INC
38942: ST_TO_ADDR
38943: LD_INT 1
38945: PUSH
38946: FOR_DOWNTO
38947: IFFALSE 38992
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38949: LD_ADDR_VAR 0 6
38953: PUSH
38954: LD_VAR 0 6
38958: PPUSH
38959: LD_VAR 0 9
38963: PUSH
38964: LD_VAR 0 7
38968: MINUS
38969: PUSH
38970: LD_INT 1
38972: PLUS
38973: PPUSH
38974: LD_VAR 0 9
38978: PUSH
38979: LD_VAR 0 7
38983: ARRAY
38984: PPUSH
38985: CALL_OW 1
38989: ST_TO_ADDR
38990: GO 38946
38992: POP
38993: POP
// end ; tmp := [ ] ;
38994: LD_ADDR_VAR 0 9
38998: PUSH
38999: EMPTY
39000: ST_TO_ADDR
// if mode then
39001: LD_VAR 0 5
39005: IFFALSE 39074
// begin for i = 1 to result do
39007: LD_ADDR_VAR 0 7
39011: PUSH
39012: DOUBLE
39013: LD_INT 1
39015: DEC
39016: ST_TO_ADDR
39017: LD_VAR 0 6
39021: PUSH
39022: FOR_TO
39023: IFFALSE 39062
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39025: LD_ADDR_VAR 0 9
39029: PUSH
39030: LD_VAR 0 9
39034: PPUSH
39035: LD_VAR 0 7
39039: PPUSH
39040: LD_VAR 0 6
39044: PUSH
39045: LD_VAR 0 7
39049: ARRAY
39050: PUSH
39051: LD_INT 1
39053: ARRAY
39054: PPUSH
39055: CALL_OW 1
39059: ST_TO_ADDR
39060: GO 39022
39062: POP
39063: POP
// result := tmp ;
39064: LD_ADDR_VAR 0 6
39068: PUSH
39069: LD_VAR 0 9
39073: ST_TO_ADDR
// end ; end ;
39074: LD_VAR 0 6
39078: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39079: LD_INT 0
39081: PPUSH
39082: PPUSH
39083: PPUSH
39084: PPUSH
39085: PPUSH
39086: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39087: LD_ADDR_VAR 0 5
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: EMPTY
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: ST_TO_ADDR
// if not x or not y then
39109: LD_VAR 0 2
39113: NOT
39114: PUSH
39115: LD_VAR 0 3
39119: NOT
39120: OR
39121: IFFALSE 39125
// exit ;
39123: GO 40771
// if not range then
39125: LD_VAR 0 4
39129: NOT
39130: IFFALSE 39140
// range := 10 ;
39132: LD_ADDR_VAR 0 4
39136: PUSH
39137: LD_INT 10
39139: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39140: LD_ADDR_VAR 0 8
39144: PUSH
39145: LD_INT 81
39147: PUSH
39148: LD_VAR 0 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 92
39159: PUSH
39160: LD_VAR 0 2
39164: PUSH
39165: LD_VAR 0 3
39169: PUSH
39170: LD_VAR 0 4
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 3
39183: PUSH
39184: LD_INT 21
39186: PUSH
39187: LD_INT 3
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: PPUSH
39203: CALL_OW 69
39207: ST_TO_ADDR
// if not tmp then
39208: LD_VAR 0 8
39212: NOT
39213: IFFALSE 39217
// exit ;
39215: GO 40771
// for i in tmp do
39217: LD_ADDR_VAR 0 6
39221: PUSH
39222: LD_VAR 0 8
39226: PUSH
39227: FOR_IN
39228: IFFALSE 40746
// begin points := [ 0 , 0 , 0 ] ;
39230: LD_ADDR_VAR 0 9
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: ST_TO_ADDR
// bpoints := 1 ;
39249: LD_ADDR_VAR 0 10
39253: PUSH
39254: LD_INT 1
39256: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39257: LD_VAR 0 6
39261: PPUSH
39262: CALL_OW 247
39266: PUSH
39267: LD_INT 1
39269: DOUBLE
39270: EQUAL
39271: IFTRUE 39275
39273: GO 39853
39275: POP
// begin if GetClass ( i ) = 1 then
39276: LD_VAR 0 6
39280: PPUSH
39281: CALL_OW 257
39285: PUSH
39286: LD_INT 1
39288: EQUAL
39289: IFFALSE 39310
// points := [ 10 , 5 , 3 ] ;
39291: LD_ADDR_VAR 0 9
39295: PUSH
39296: LD_INT 10
39298: PUSH
39299: LD_INT 5
39301: PUSH
39302: LD_INT 3
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: LIST
39309: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39310: LD_VAR 0 6
39314: PPUSH
39315: CALL_OW 257
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: LD_INT 3
39325: PUSH
39326: LD_INT 4
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: LIST
39333: IN
39334: IFFALSE 39355
// points := [ 3 , 2 , 1 ] ;
39336: LD_ADDR_VAR 0 9
39340: PUSH
39341: LD_INT 3
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39355: LD_VAR 0 6
39359: PPUSH
39360: CALL_OW 257
39364: PUSH
39365: LD_INT 5
39367: EQUAL
39368: IFFALSE 39389
// points := [ 130 , 5 , 2 ] ;
39370: LD_ADDR_VAR 0 9
39374: PUSH
39375: LD_INT 130
39377: PUSH
39378: LD_INT 5
39380: PUSH
39381: LD_INT 2
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: LIST
39388: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39389: LD_VAR 0 6
39393: PPUSH
39394: CALL_OW 257
39398: PUSH
39399: LD_INT 8
39401: EQUAL
39402: IFFALSE 39423
// points := [ 35 , 35 , 30 ] ;
39404: LD_ADDR_VAR 0 9
39408: PUSH
39409: LD_INT 35
39411: PUSH
39412: LD_INT 35
39414: PUSH
39415: LD_INT 30
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: LIST
39422: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39423: LD_VAR 0 6
39427: PPUSH
39428: CALL_OW 257
39432: PUSH
39433: LD_INT 9
39435: EQUAL
39436: IFFALSE 39457
// points := [ 20 , 55 , 40 ] ;
39438: LD_ADDR_VAR 0 9
39442: PUSH
39443: LD_INT 20
39445: PUSH
39446: LD_INT 55
39448: PUSH
39449: LD_INT 40
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: LIST
39456: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39457: LD_VAR 0 6
39461: PPUSH
39462: CALL_OW 257
39466: PUSH
39467: LD_INT 12
39469: PUSH
39470: LD_INT 16
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: IN
39477: IFFALSE 39498
// points := [ 5 , 3 , 2 ] ;
39479: LD_ADDR_VAR 0 9
39483: PUSH
39484: LD_INT 5
39486: PUSH
39487: LD_INT 3
39489: PUSH
39490: LD_INT 2
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39498: LD_VAR 0 6
39502: PPUSH
39503: CALL_OW 257
39507: PUSH
39508: LD_INT 17
39510: EQUAL
39511: IFFALSE 39532
// points := [ 100 , 50 , 75 ] ;
39513: LD_ADDR_VAR 0 9
39517: PUSH
39518: LD_INT 100
39520: PUSH
39521: LD_INT 50
39523: PUSH
39524: LD_INT 75
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39532: LD_VAR 0 6
39536: PPUSH
39537: CALL_OW 257
39541: PUSH
39542: LD_INT 15
39544: EQUAL
39545: IFFALSE 39566
// points := [ 10 , 5 , 3 ] ;
39547: LD_ADDR_VAR 0 9
39551: PUSH
39552: LD_INT 10
39554: PUSH
39555: LD_INT 5
39557: PUSH
39558: LD_INT 3
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: LIST
39565: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39566: LD_VAR 0 6
39570: PPUSH
39571: CALL_OW 257
39575: PUSH
39576: LD_INT 14
39578: EQUAL
39579: IFFALSE 39600
// points := [ 10 , 0 , 0 ] ;
39581: LD_ADDR_VAR 0 9
39585: PUSH
39586: LD_INT 10
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: LIST
39599: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39600: LD_VAR 0 6
39604: PPUSH
39605: CALL_OW 257
39609: PUSH
39610: LD_INT 11
39612: EQUAL
39613: IFFALSE 39634
// points := [ 30 , 10 , 5 ] ;
39615: LD_ADDR_VAR 0 9
39619: PUSH
39620: LD_INT 30
39622: PUSH
39623: LD_INT 10
39625: PUSH
39626: LD_INT 5
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: LIST
39633: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39634: LD_VAR 0 1
39638: PPUSH
39639: LD_INT 5
39641: PPUSH
39642: CALL_OW 321
39646: PUSH
39647: LD_INT 2
39649: EQUAL
39650: IFFALSE 39667
// bpoints := bpoints * 1.8 ;
39652: LD_ADDR_VAR 0 10
39656: PUSH
39657: LD_VAR 0 10
39661: PUSH
39662: LD_REAL  1.80000000000000E+0000
39665: MUL
39666: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39667: LD_VAR 0 6
39671: PPUSH
39672: CALL_OW 257
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 3
39685: PUSH
39686: LD_INT 4
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: IN
39695: PUSH
39696: LD_VAR 0 1
39700: PPUSH
39701: LD_INT 51
39703: PPUSH
39704: CALL_OW 321
39708: PUSH
39709: LD_INT 2
39711: EQUAL
39712: AND
39713: IFFALSE 39730
// bpoints := bpoints * 1.2 ;
39715: LD_ADDR_VAR 0 10
39719: PUSH
39720: LD_VAR 0 10
39724: PUSH
39725: LD_REAL  1.20000000000000E+0000
39728: MUL
39729: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39730: LD_VAR 0 6
39734: PPUSH
39735: CALL_OW 257
39739: PUSH
39740: LD_INT 5
39742: PUSH
39743: LD_INT 7
39745: PUSH
39746: LD_INT 9
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: LIST
39753: IN
39754: PUSH
39755: LD_VAR 0 1
39759: PPUSH
39760: LD_INT 52
39762: PPUSH
39763: CALL_OW 321
39767: PUSH
39768: LD_INT 2
39770: EQUAL
39771: AND
39772: IFFALSE 39789
// bpoints := bpoints * 1.5 ;
39774: LD_ADDR_VAR 0 10
39778: PUSH
39779: LD_VAR 0 10
39783: PUSH
39784: LD_REAL  1.50000000000000E+0000
39787: MUL
39788: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39789: LD_VAR 0 1
39793: PPUSH
39794: LD_INT 66
39796: PPUSH
39797: CALL_OW 321
39801: PUSH
39802: LD_INT 2
39804: EQUAL
39805: IFFALSE 39822
// bpoints := bpoints * 1.1 ;
39807: LD_ADDR_VAR 0 10
39811: PUSH
39812: LD_VAR 0 10
39816: PUSH
39817: LD_REAL  1.10000000000000E+0000
39820: MUL
39821: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39822: LD_ADDR_VAR 0 10
39826: PUSH
39827: LD_VAR 0 10
39831: PUSH
39832: LD_VAR 0 6
39836: PPUSH
39837: LD_INT 1
39839: PPUSH
39840: CALL_OW 259
39844: PUSH
39845: LD_REAL  1.15000000000000E+0000
39848: MUL
39849: MUL
39850: ST_TO_ADDR
// end ; unit_vehicle :
39851: GO 40675
39853: LD_INT 2
39855: DOUBLE
39856: EQUAL
39857: IFTRUE 39861
39859: GO 40663
39861: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39862: LD_VAR 0 6
39866: PPUSH
39867: CALL_OW 264
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: LD_INT 42
39877: PUSH
39878: LD_INT 24
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: LIST
39885: IN
39886: IFFALSE 39907
// points := [ 25 , 5 , 3 ] ;
39888: LD_ADDR_VAR 0 9
39892: PUSH
39893: LD_INT 25
39895: PUSH
39896: LD_INT 5
39898: PUSH
39899: LD_INT 3
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: LIST
39906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39907: LD_VAR 0 6
39911: PPUSH
39912: CALL_OW 264
39916: PUSH
39917: LD_INT 4
39919: PUSH
39920: LD_INT 43
39922: PUSH
39923: LD_INT 25
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: LIST
39930: IN
39931: IFFALSE 39952
// points := [ 40 , 15 , 5 ] ;
39933: LD_ADDR_VAR 0 9
39937: PUSH
39938: LD_INT 40
39940: PUSH
39941: LD_INT 15
39943: PUSH
39944: LD_INT 5
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: LIST
39951: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39952: LD_VAR 0 6
39956: PPUSH
39957: CALL_OW 264
39961: PUSH
39962: LD_INT 3
39964: PUSH
39965: LD_INT 23
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: IN
39972: IFFALSE 39993
// points := [ 7 , 25 , 8 ] ;
39974: LD_ADDR_VAR 0 9
39978: PUSH
39979: LD_INT 7
39981: PUSH
39982: LD_INT 25
39984: PUSH
39985: LD_INT 8
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39993: LD_VAR 0 6
39997: PPUSH
39998: CALL_OW 264
40002: PUSH
40003: LD_INT 5
40005: PUSH
40006: LD_INT 27
40008: PUSH
40009: LD_INT 44
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: LIST
40016: IN
40017: IFFALSE 40038
// points := [ 14 , 50 , 16 ] ;
40019: LD_ADDR_VAR 0 9
40023: PUSH
40024: LD_INT 14
40026: PUSH
40027: LD_INT 50
40029: PUSH
40030: LD_INT 16
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: LIST
40037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40038: LD_VAR 0 6
40042: PPUSH
40043: CALL_OW 264
40047: PUSH
40048: LD_INT 6
40050: PUSH
40051: LD_INT 46
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: IN
40058: IFFALSE 40079
// points := [ 32 , 120 , 70 ] ;
40060: LD_ADDR_VAR 0 9
40064: PUSH
40065: LD_INT 32
40067: PUSH
40068: LD_INT 120
40070: PUSH
40071: LD_INT 70
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
40079: LD_VAR 0 6
40083: PPUSH
40084: CALL_OW 264
40088: PUSH
40089: LD_INT 7
40091: PUSH
40092: LD_INT 28
40094: PUSH
40095: LD_INT 45
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: LIST
40102: IN
40103: IFFALSE 40124
// points := [ 35 , 20 , 45 ] ;
40105: LD_ADDR_VAR 0 9
40109: PUSH
40110: LD_INT 35
40112: PUSH
40113: LD_INT 20
40115: PUSH
40116: LD_INT 45
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: LIST
40123: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40124: LD_VAR 0 6
40128: PPUSH
40129: CALL_OW 264
40133: PUSH
40134: LD_INT 47
40136: PUSH
40137: EMPTY
40138: LIST
40139: IN
40140: IFFALSE 40161
// points := [ 67 , 45 , 75 ] ;
40142: LD_ADDR_VAR 0 9
40146: PUSH
40147: LD_INT 67
40149: PUSH
40150: LD_INT 45
40152: PUSH
40153: LD_INT 75
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40161: LD_VAR 0 6
40165: PPUSH
40166: CALL_OW 264
40170: PUSH
40171: LD_INT 26
40173: PUSH
40174: EMPTY
40175: LIST
40176: IN
40177: IFFALSE 40198
// points := [ 120 , 30 , 80 ] ;
40179: LD_ADDR_VAR 0 9
40183: PUSH
40184: LD_INT 120
40186: PUSH
40187: LD_INT 30
40189: PUSH
40190: LD_INT 80
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: LIST
40197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40198: LD_VAR 0 6
40202: PPUSH
40203: CALL_OW 264
40207: PUSH
40208: LD_INT 22
40210: PUSH
40211: EMPTY
40212: LIST
40213: IN
40214: IFFALSE 40235
// points := [ 40 , 1 , 1 ] ;
40216: LD_ADDR_VAR 0 9
40220: PUSH
40221: LD_INT 40
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: LIST
40234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40235: LD_VAR 0 6
40239: PPUSH
40240: CALL_OW 264
40244: PUSH
40245: LD_INT 29
40247: PUSH
40248: EMPTY
40249: LIST
40250: IN
40251: IFFALSE 40272
// points := [ 70 , 200 , 400 ] ;
40253: LD_ADDR_VAR 0 9
40257: PUSH
40258: LD_INT 70
40260: PUSH
40261: LD_INT 200
40263: PUSH
40264: LD_INT 400
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40272: LD_VAR 0 6
40276: PPUSH
40277: CALL_OW 264
40281: PUSH
40282: LD_INT 14
40284: PUSH
40285: LD_INT 53
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: IN
40292: IFFALSE 40313
// points := [ 40 , 10 , 20 ] ;
40294: LD_ADDR_VAR 0 9
40298: PUSH
40299: LD_INT 40
40301: PUSH
40302: LD_INT 10
40304: PUSH
40305: LD_INT 20
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40313: LD_VAR 0 6
40317: PPUSH
40318: CALL_OW 264
40322: PUSH
40323: LD_INT 9
40325: PUSH
40326: EMPTY
40327: LIST
40328: IN
40329: IFFALSE 40350
// points := [ 5 , 70 , 20 ] ;
40331: LD_ADDR_VAR 0 9
40335: PUSH
40336: LD_INT 5
40338: PUSH
40339: LD_INT 70
40341: PUSH
40342: LD_INT 20
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40350: LD_VAR 0 6
40354: PPUSH
40355: CALL_OW 264
40359: PUSH
40360: LD_INT 10
40362: PUSH
40363: EMPTY
40364: LIST
40365: IN
40366: IFFALSE 40387
// points := [ 35 , 110 , 70 ] ;
40368: LD_ADDR_VAR 0 9
40372: PUSH
40373: LD_INT 35
40375: PUSH
40376: LD_INT 110
40378: PUSH
40379: LD_INT 70
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: LIST
40386: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40387: LD_VAR 0 6
40391: PPUSH
40392: CALL_OW 265
40396: PUSH
40397: LD_INT 25
40399: EQUAL
40400: IFFALSE 40421
// points := [ 80 , 65 , 100 ] ;
40402: LD_ADDR_VAR 0 9
40406: PUSH
40407: LD_INT 80
40409: PUSH
40410: LD_INT 65
40412: PUSH
40413: LD_INT 100
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40421: LD_VAR 0 6
40425: PPUSH
40426: CALL_OW 263
40430: PUSH
40431: LD_INT 1
40433: EQUAL
40434: IFFALSE 40469
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40436: LD_ADDR_VAR 0 10
40440: PUSH
40441: LD_VAR 0 10
40445: PUSH
40446: LD_VAR 0 6
40450: PPUSH
40451: CALL_OW 311
40455: PPUSH
40456: LD_INT 3
40458: PPUSH
40459: CALL_OW 259
40463: PUSH
40464: LD_INT 4
40466: MUL
40467: MUL
40468: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40469: LD_VAR 0 6
40473: PPUSH
40474: CALL_OW 263
40478: PUSH
40479: LD_INT 2
40481: EQUAL
40482: IFFALSE 40533
// begin j := IsControledBy ( i ) ;
40484: LD_ADDR_VAR 0 7
40488: PUSH
40489: LD_VAR 0 6
40493: PPUSH
40494: CALL_OW 312
40498: ST_TO_ADDR
// if j then
40499: LD_VAR 0 7
40503: IFFALSE 40533
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40505: LD_ADDR_VAR 0 10
40509: PUSH
40510: LD_VAR 0 10
40514: PUSH
40515: LD_VAR 0 7
40519: PPUSH
40520: LD_INT 3
40522: PPUSH
40523: CALL_OW 259
40527: PUSH
40528: LD_INT 3
40530: MUL
40531: MUL
40532: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40533: LD_VAR 0 6
40537: PPUSH
40538: CALL_OW 264
40542: PUSH
40543: LD_INT 5
40545: PUSH
40546: LD_INT 6
40548: PUSH
40549: LD_INT 46
40551: PUSH
40552: LD_INT 44
40554: PUSH
40555: LD_INT 47
40557: PUSH
40558: LD_INT 45
40560: PUSH
40561: LD_INT 28
40563: PUSH
40564: LD_INT 7
40566: PUSH
40567: LD_INT 27
40569: PUSH
40570: LD_INT 29
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: IN
40585: PUSH
40586: LD_VAR 0 1
40590: PPUSH
40591: LD_INT 52
40593: PPUSH
40594: CALL_OW 321
40598: PUSH
40599: LD_INT 2
40601: EQUAL
40602: AND
40603: IFFALSE 40620
// bpoints := bpoints * 1.2 ;
40605: LD_ADDR_VAR 0 10
40609: PUSH
40610: LD_VAR 0 10
40614: PUSH
40615: LD_REAL  1.20000000000000E+0000
40618: MUL
40619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40620: LD_VAR 0 6
40624: PPUSH
40625: CALL_OW 264
40629: PUSH
40630: LD_INT 6
40632: PUSH
40633: LD_INT 46
40635: PUSH
40636: LD_INT 47
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: LIST
40643: IN
40644: IFFALSE 40661
// bpoints := bpoints * 1.2 ;
40646: LD_ADDR_VAR 0 10
40650: PUSH
40651: LD_VAR 0 10
40655: PUSH
40656: LD_REAL  1.20000000000000E+0000
40659: MUL
40660: ST_TO_ADDR
// end ; unit_building :
40661: GO 40675
40663: LD_INT 3
40665: DOUBLE
40666: EQUAL
40667: IFTRUE 40671
40669: GO 40674
40671: POP
// ; end ;
40672: GO 40675
40674: POP
// for j = 1 to 3 do
40675: LD_ADDR_VAR 0 7
40679: PUSH
40680: DOUBLE
40681: LD_INT 1
40683: DEC
40684: ST_TO_ADDR
40685: LD_INT 3
40687: PUSH
40688: FOR_TO
40689: IFFALSE 40742
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40691: LD_ADDR_VAR 0 5
40695: PUSH
40696: LD_VAR 0 5
40700: PPUSH
40701: LD_VAR 0 7
40705: PPUSH
40706: LD_VAR 0 5
40710: PUSH
40711: LD_VAR 0 7
40715: ARRAY
40716: PUSH
40717: LD_VAR 0 9
40721: PUSH
40722: LD_VAR 0 7
40726: ARRAY
40727: PUSH
40728: LD_VAR 0 10
40732: MUL
40733: PLUS
40734: PPUSH
40735: CALL_OW 1
40739: ST_TO_ADDR
40740: GO 40688
40742: POP
40743: POP
// end ;
40744: GO 39227
40746: POP
40747: POP
// result := Replace ( result , 4 , tmp ) ;
40748: LD_ADDR_VAR 0 5
40752: PUSH
40753: LD_VAR 0 5
40757: PPUSH
40758: LD_INT 4
40760: PPUSH
40761: LD_VAR 0 8
40765: PPUSH
40766: CALL_OW 1
40770: ST_TO_ADDR
// end ;
40771: LD_VAR 0 5
40775: RET
// export function DangerAtRange ( unit , range ) ; begin
40776: LD_INT 0
40778: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40779: LD_ADDR_VAR 0 3
40783: PUSH
40784: LD_VAR 0 1
40788: PPUSH
40789: CALL_OW 255
40793: PPUSH
40794: LD_VAR 0 1
40798: PPUSH
40799: CALL_OW 250
40803: PPUSH
40804: LD_VAR 0 1
40808: PPUSH
40809: CALL_OW 251
40813: PPUSH
40814: LD_VAR 0 2
40818: PPUSH
40819: CALL 39079 0 4
40823: ST_TO_ADDR
// end ;
40824: LD_VAR 0 3
40828: RET
// export function DangerInArea ( side , area ) ; begin
40829: LD_INT 0
40831: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40832: LD_ADDR_VAR 0 3
40836: PUSH
40837: LD_VAR 0 2
40841: PPUSH
40842: LD_INT 81
40844: PUSH
40845: LD_VAR 0 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PPUSH
40854: CALL_OW 70
40858: ST_TO_ADDR
// end ;
40859: LD_VAR 0 3
40863: RET
// export function IsExtension ( b ) ; begin
40864: LD_INT 0
40866: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40867: LD_ADDR_VAR 0 2
40871: PUSH
40872: LD_VAR 0 1
40876: PUSH
40877: LD_INT 23
40879: PUSH
40880: LD_INT 20
40882: PUSH
40883: LD_INT 22
40885: PUSH
40886: LD_INT 17
40888: PUSH
40889: LD_INT 24
40891: PUSH
40892: LD_INT 21
40894: PUSH
40895: LD_INT 19
40897: PUSH
40898: LD_INT 16
40900: PUSH
40901: LD_INT 25
40903: PUSH
40904: LD_INT 18
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: IN
40919: ST_TO_ADDR
// end ;
40920: LD_VAR 0 2
40924: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40925: LD_INT 0
40927: PPUSH
40928: PPUSH
40929: PPUSH
// result := [ ] ;
40930: LD_ADDR_VAR 0 4
40934: PUSH
40935: EMPTY
40936: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40937: LD_ADDR_VAR 0 5
40941: PUSH
40942: LD_VAR 0 2
40946: PPUSH
40947: LD_INT 21
40949: PUSH
40950: LD_INT 3
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PPUSH
40957: CALL_OW 70
40961: ST_TO_ADDR
// if not tmp then
40962: LD_VAR 0 5
40966: NOT
40967: IFFALSE 40971
// exit ;
40969: GO 41035
// if checkLink then
40971: LD_VAR 0 3
40975: IFFALSE 41025
// begin for i in tmp do
40977: LD_ADDR_VAR 0 6
40981: PUSH
40982: LD_VAR 0 5
40986: PUSH
40987: FOR_IN
40988: IFFALSE 41023
// if GetBase ( i ) <> base then
40990: LD_VAR 0 6
40994: PPUSH
40995: CALL_OW 274
40999: PUSH
41000: LD_VAR 0 1
41004: NONEQUAL
41005: IFFALSE 41021
// ComLinkToBase ( base , i ) ;
41007: LD_VAR 0 1
41011: PPUSH
41012: LD_VAR 0 6
41016: PPUSH
41017: CALL_OW 169
41021: GO 40987
41023: POP
41024: POP
// end ; result := tmp ;
41025: LD_ADDR_VAR 0 4
41029: PUSH
41030: LD_VAR 0 5
41034: ST_TO_ADDR
// end ;
41035: LD_VAR 0 4
41039: RET
// export function ComComplete ( units , b ) ; var i ; begin
41040: LD_INT 0
41042: PPUSH
41043: PPUSH
// if not units then
41044: LD_VAR 0 1
41048: NOT
41049: IFFALSE 41053
// exit ;
41051: GO 41143
// for i in units do
41053: LD_ADDR_VAR 0 4
41057: PUSH
41058: LD_VAR 0 1
41062: PUSH
41063: FOR_IN
41064: IFFALSE 41141
// if BuildingStatus ( b ) = bs_build then
41066: LD_VAR 0 2
41070: PPUSH
41071: CALL_OW 461
41075: PUSH
41076: LD_INT 1
41078: EQUAL
41079: IFFALSE 41139
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41081: LD_VAR 0 4
41085: PPUSH
41086: LD_STRING h
41088: PUSH
41089: LD_VAR 0 2
41093: PPUSH
41094: CALL_OW 250
41098: PUSH
41099: LD_VAR 0 2
41103: PPUSH
41104: CALL_OW 251
41108: PUSH
41109: LD_VAR 0 2
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: PUSH
41132: EMPTY
41133: LIST
41134: PPUSH
41135: CALL_OW 446
41139: GO 41063
41141: POP
41142: POP
// end ;
41143: LD_VAR 0 3
41147: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41148: LD_INT 0
41150: PPUSH
41151: PPUSH
41152: PPUSH
41153: PPUSH
41154: PPUSH
41155: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
41156: LD_VAR 0 1
41160: NOT
41161: PUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL_OW 263
41171: PUSH
41172: LD_INT 2
41174: EQUAL
41175: NOT
41176: OR
41177: IFFALSE 41181
// exit ;
41179: GO 41497
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41181: LD_ADDR_VAR 0 6
41185: PUSH
41186: LD_INT 22
41188: PUSH
41189: LD_VAR 0 1
41193: PPUSH
41194: CALL_OW 255
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: LD_INT 30
41208: PUSH
41209: LD_INT 36
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 34
41218: PUSH
41219: LD_INT 31
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: LIST
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PPUSH
41235: CALL_OW 69
41239: ST_TO_ADDR
// if not tmp then
41240: LD_VAR 0 6
41244: NOT
41245: IFFALSE 41249
// exit ;
41247: GO 41497
// result := [ ] ;
41249: LD_ADDR_VAR 0 2
41253: PUSH
41254: EMPTY
41255: ST_TO_ADDR
// for i in tmp do
41256: LD_ADDR_VAR 0 3
41260: PUSH
41261: LD_VAR 0 6
41265: PUSH
41266: FOR_IN
41267: IFFALSE 41338
// begin t := UnitsInside ( i ) ;
41269: LD_ADDR_VAR 0 4
41273: PUSH
41274: LD_VAR 0 3
41278: PPUSH
41279: CALL_OW 313
41283: ST_TO_ADDR
// if t then
41284: LD_VAR 0 4
41288: IFFALSE 41336
// for j in t do
41290: LD_ADDR_VAR 0 7
41294: PUSH
41295: LD_VAR 0 4
41299: PUSH
41300: FOR_IN
41301: IFFALSE 41334
// result := Insert ( result , result + 1 , j ) ;
41303: LD_ADDR_VAR 0 2
41307: PUSH
41308: LD_VAR 0 2
41312: PPUSH
41313: LD_VAR 0 2
41317: PUSH
41318: LD_INT 1
41320: PLUS
41321: PPUSH
41322: LD_VAR 0 7
41326: PPUSH
41327: CALL_OW 2
41331: ST_TO_ADDR
41332: GO 41300
41334: POP
41335: POP
// end ;
41336: GO 41266
41338: POP
41339: POP
// if not result then
41340: LD_VAR 0 2
41344: NOT
41345: IFFALSE 41349
// exit ;
41347: GO 41497
// mech := result [ 1 ] ;
41349: LD_ADDR_VAR 0 5
41353: PUSH
41354: LD_VAR 0 2
41358: PUSH
41359: LD_INT 1
41361: ARRAY
41362: ST_TO_ADDR
// if result > 1 then
41363: LD_VAR 0 2
41367: PUSH
41368: LD_INT 1
41370: GREATER
41371: IFFALSE 41483
// for i = 2 to result do
41373: LD_ADDR_VAR 0 3
41377: PUSH
41378: DOUBLE
41379: LD_INT 2
41381: DEC
41382: ST_TO_ADDR
41383: LD_VAR 0 2
41387: PUSH
41388: FOR_TO
41389: IFFALSE 41481
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41391: LD_ADDR_VAR 0 4
41395: PUSH
41396: LD_VAR 0 2
41400: PUSH
41401: LD_VAR 0 3
41405: ARRAY
41406: PPUSH
41407: LD_INT 3
41409: PPUSH
41410: CALL_OW 259
41414: PUSH
41415: LD_VAR 0 2
41419: PUSH
41420: LD_VAR 0 3
41424: ARRAY
41425: PPUSH
41426: CALL_OW 432
41430: MINUS
41431: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41432: LD_VAR 0 4
41436: PUSH
41437: LD_VAR 0 5
41441: PPUSH
41442: LD_INT 3
41444: PPUSH
41445: CALL_OW 259
41449: PUSH
41450: LD_VAR 0 5
41454: PPUSH
41455: CALL_OW 432
41459: MINUS
41460: GREATEREQUAL
41461: IFFALSE 41479
// mech := result [ i ] ;
41463: LD_ADDR_VAR 0 5
41467: PUSH
41468: LD_VAR 0 2
41472: PUSH
41473: LD_VAR 0 3
41477: ARRAY
41478: ST_TO_ADDR
// end ;
41479: GO 41388
41481: POP
41482: POP
// ComLinkTo ( vehicle , mech ) ;
41483: LD_VAR 0 1
41487: PPUSH
41488: LD_VAR 0 5
41492: PPUSH
41493: CALL_OW 135
// end ;
41497: LD_VAR 0 2
41501: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41502: LD_INT 0
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
41513: PPUSH
41514: PPUSH
41515: PPUSH
41516: PPUSH
// result := [ ] ;
41517: LD_ADDR_VAR 0 7
41521: PUSH
41522: EMPTY
41523: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41524: LD_VAR 0 1
41528: PPUSH
41529: CALL_OW 266
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: IN
41544: NOT
41545: IFFALSE 41549
// exit ;
41547: GO 43183
// if name then
41549: LD_VAR 0 3
41553: IFFALSE 41569
// SetBName ( base_dep , name ) ;
41555: LD_VAR 0 1
41559: PPUSH
41560: LD_VAR 0 3
41564: PPUSH
41565: CALL_OW 500
// base := GetBase ( base_dep ) ;
41569: LD_ADDR_VAR 0 15
41573: PUSH
41574: LD_VAR 0 1
41578: PPUSH
41579: CALL_OW 274
41583: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41584: LD_ADDR_VAR 0 16
41588: PUSH
41589: LD_VAR 0 1
41593: PPUSH
41594: CALL_OW 255
41598: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41599: LD_ADDR_VAR 0 17
41603: PUSH
41604: LD_VAR 0 1
41608: PPUSH
41609: CALL_OW 248
41613: ST_TO_ADDR
// if sources then
41614: LD_VAR 0 5
41618: IFFALSE 41665
// for i = 1 to 3 do
41620: LD_ADDR_VAR 0 8
41624: PUSH
41625: DOUBLE
41626: LD_INT 1
41628: DEC
41629: ST_TO_ADDR
41630: LD_INT 3
41632: PUSH
41633: FOR_TO
41634: IFFALSE 41663
// AddResourceType ( base , i , sources [ i ] ) ;
41636: LD_VAR 0 15
41640: PPUSH
41641: LD_VAR 0 8
41645: PPUSH
41646: LD_VAR 0 5
41650: PUSH
41651: LD_VAR 0 8
41655: ARRAY
41656: PPUSH
41657: CALL_OW 276
41661: GO 41633
41663: POP
41664: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41665: LD_ADDR_VAR 0 18
41669: PUSH
41670: LD_VAR 0 15
41674: PPUSH
41675: LD_VAR 0 2
41679: PPUSH
41680: LD_INT 1
41682: PPUSH
41683: CALL 40925 0 3
41687: ST_TO_ADDR
// InitHc ;
41688: CALL_OW 19
// InitUc ;
41692: CALL_OW 18
// uc_side := side ;
41696: LD_ADDR_OWVAR 20
41700: PUSH
41701: LD_VAR 0 16
41705: ST_TO_ADDR
// uc_nation := nation ;
41706: LD_ADDR_OWVAR 21
41710: PUSH
41711: LD_VAR 0 17
41715: ST_TO_ADDR
// if buildings then
41716: LD_VAR 0 18
41720: IFFALSE 43042
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41722: LD_ADDR_VAR 0 19
41726: PUSH
41727: LD_VAR 0 18
41731: PPUSH
41732: LD_INT 2
41734: PUSH
41735: LD_INT 30
41737: PUSH
41738: LD_INT 29
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 30
41747: PUSH
41748: LD_INT 30
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: LIST
41759: PPUSH
41760: CALL_OW 72
41764: ST_TO_ADDR
// if tmp then
41765: LD_VAR 0 19
41769: IFFALSE 41817
// for i in tmp do
41771: LD_ADDR_VAR 0 8
41775: PUSH
41776: LD_VAR 0 19
41780: PUSH
41781: FOR_IN
41782: IFFALSE 41815
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41784: LD_VAR 0 8
41788: PPUSH
41789: CALL_OW 250
41793: PPUSH
41794: LD_VAR 0 8
41798: PPUSH
41799: CALL_OW 251
41803: PPUSH
41804: LD_VAR 0 16
41808: PPUSH
41809: CALL_OW 441
41813: GO 41781
41815: POP
41816: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41817: LD_VAR 0 18
41821: PPUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 30
41827: PUSH
41828: LD_INT 32
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 30
41837: PUSH
41838: LD_INT 33
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: LIST
41849: PPUSH
41850: CALL_OW 72
41854: IFFALSE 41942
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41856: LD_ADDR_VAR 0 8
41860: PUSH
41861: LD_VAR 0 18
41865: PPUSH
41866: LD_INT 2
41868: PUSH
41869: LD_INT 30
41871: PUSH
41872: LD_INT 32
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 30
41881: PUSH
41882: LD_INT 33
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: LIST
41893: PPUSH
41894: CALL_OW 72
41898: PUSH
41899: FOR_IN
41900: IFFALSE 41940
// begin if not GetBWeapon ( i ) then
41902: LD_VAR 0 8
41906: PPUSH
41907: CALL_OW 269
41911: NOT
41912: IFFALSE 41938
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41914: LD_VAR 0 8
41918: PPUSH
41919: LD_VAR 0 8
41923: PPUSH
41924: LD_VAR 0 2
41928: PPUSH
41929: CALL 43188 0 2
41933: PPUSH
41934: CALL_OW 431
// end ;
41938: GO 41899
41940: POP
41941: POP
// end ; for i = 1 to personel do
41942: LD_ADDR_VAR 0 8
41946: PUSH
41947: DOUBLE
41948: LD_INT 1
41950: DEC
41951: ST_TO_ADDR
41952: LD_VAR 0 6
41956: PUSH
41957: FOR_TO
41958: IFFALSE 43022
// begin if i > 4 then
41960: LD_VAR 0 8
41964: PUSH
41965: LD_INT 4
41967: GREATER
41968: IFFALSE 41972
// break ;
41970: GO 43022
// case i of 1 :
41972: LD_VAR 0 8
41976: PUSH
41977: LD_INT 1
41979: DOUBLE
41980: EQUAL
41981: IFTRUE 41985
41983: GO 42065
41985: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41986: LD_ADDR_VAR 0 12
41990: PUSH
41991: LD_VAR 0 18
41995: PPUSH
41996: LD_INT 22
41998: PUSH
41999: LD_VAR 0 16
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 58
42010: PUSH
42011: EMPTY
42012: LIST
42013: PUSH
42014: LD_INT 2
42016: PUSH
42017: LD_INT 30
42019: PUSH
42020: LD_INT 32
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 30
42029: PUSH
42030: LD_INT 4
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 30
42039: PUSH
42040: LD_INT 5
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: LIST
42057: PPUSH
42058: CALL_OW 72
42062: ST_TO_ADDR
42063: GO 42287
42065: LD_INT 2
42067: DOUBLE
42068: EQUAL
42069: IFTRUE 42073
42071: GO 42135
42073: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42074: LD_ADDR_VAR 0 12
42078: PUSH
42079: LD_VAR 0 18
42083: PPUSH
42084: LD_INT 22
42086: PUSH
42087: LD_VAR 0 16
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: LD_INT 30
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 30
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: LIST
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PPUSH
42128: CALL_OW 72
42132: ST_TO_ADDR
42133: GO 42287
42135: LD_INT 3
42137: DOUBLE
42138: EQUAL
42139: IFTRUE 42143
42141: GO 42205
42143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42144: LD_ADDR_VAR 0 12
42148: PUSH
42149: LD_VAR 0 18
42153: PPUSH
42154: LD_INT 22
42156: PUSH
42157: LD_VAR 0 16
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 2
42168: PUSH
42169: LD_INT 30
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 30
42181: PUSH
42182: LD_INT 3
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: LIST
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PPUSH
42198: CALL_OW 72
42202: ST_TO_ADDR
42203: GO 42287
42205: LD_INT 4
42207: DOUBLE
42208: EQUAL
42209: IFTRUE 42213
42211: GO 42286
42213: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42214: LD_ADDR_VAR 0 12
42218: PUSH
42219: LD_VAR 0 18
42223: PPUSH
42224: LD_INT 22
42226: PUSH
42227: LD_VAR 0 16
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: LD_INT 30
42241: PUSH
42242: LD_INT 6
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 30
42251: PUSH
42252: LD_INT 7
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 30
42261: PUSH
42262: LD_INT 8
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PPUSH
42279: CALL_OW 72
42283: ST_TO_ADDR
42284: GO 42287
42286: POP
// if i = 1 then
42287: LD_VAR 0 8
42291: PUSH
42292: LD_INT 1
42294: EQUAL
42295: IFFALSE 42406
// begin tmp := [ ] ;
42297: LD_ADDR_VAR 0 19
42301: PUSH
42302: EMPTY
42303: ST_TO_ADDR
// for j in f do
42304: LD_ADDR_VAR 0 9
42308: PUSH
42309: LD_VAR 0 12
42313: PUSH
42314: FOR_IN
42315: IFFALSE 42388
// if GetBType ( j ) = b_bunker then
42317: LD_VAR 0 9
42321: PPUSH
42322: CALL_OW 266
42326: PUSH
42327: LD_INT 32
42329: EQUAL
42330: IFFALSE 42357
// tmp := Insert ( tmp , 1 , j ) else
42332: LD_ADDR_VAR 0 19
42336: PUSH
42337: LD_VAR 0 19
42341: PPUSH
42342: LD_INT 1
42344: PPUSH
42345: LD_VAR 0 9
42349: PPUSH
42350: CALL_OW 2
42354: ST_TO_ADDR
42355: GO 42386
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42357: LD_ADDR_VAR 0 19
42361: PUSH
42362: LD_VAR 0 19
42366: PPUSH
42367: LD_VAR 0 19
42371: PUSH
42372: LD_INT 1
42374: PLUS
42375: PPUSH
42376: LD_VAR 0 9
42380: PPUSH
42381: CALL_OW 2
42385: ST_TO_ADDR
42386: GO 42314
42388: POP
42389: POP
// if tmp then
42390: LD_VAR 0 19
42394: IFFALSE 42406
// f := tmp ;
42396: LD_ADDR_VAR 0 12
42400: PUSH
42401: LD_VAR 0 19
42405: ST_TO_ADDR
// end ; x := personel [ i ] ;
42406: LD_ADDR_VAR 0 13
42410: PUSH
42411: LD_VAR 0 6
42415: PUSH
42416: LD_VAR 0 8
42420: ARRAY
42421: ST_TO_ADDR
// if x = - 1 then
42422: LD_VAR 0 13
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: EQUAL
42431: IFFALSE 42640
// begin for j in f do
42433: LD_ADDR_VAR 0 9
42437: PUSH
42438: LD_VAR 0 12
42442: PUSH
42443: FOR_IN
42444: IFFALSE 42636
// repeat InitHc ;
42446: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42450: LD_VAR 0 9
42454: PPUSH
42455: CALL_OW 266
42459: PUSH
42460: LD_INT 5
42462: EQUAL
42463: IFFALSE 42533
// begin if UnitsInside ( j ) < 3 then
42465: LD_VAR 0 9
42469: PPUSH
42470: CALL_OW 313
42474: PUSH
42475: LD_INT 3
42477: LESS
42478: IFFALSE 42514
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42480: LD_INT 0
42482: PPUSH
42483: LD_INT 5
42485: PUSH
42486: LD_INT 8
42488: PUSH
42489: LD_INT 9
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: PUSH
42497: LD_VAR 0 17
42501: ARRAY
42502: PPUSH
42503: LD_VAR 0 4
42507: PPUSH
42508: CALL_OW 380
42512: GO 42531
// PrepareHuman ( false , i , skill ) ;
42514: LD_INT 0
42516: PPUSH
42517: LD_VAR 0 8
42521: PPUSH
42522: LD_VAR 0 4
42526: PPUSH
42527: CALL_OW 380
// end else
42531: GO 42550
// PrepareHuman ( false , i , skill ) ;
42533: LD_INT 0
42535: PPUSH
42536: LD_VAR 0 8
42540: PPUSH
42541: LD_VAR 0 4
42545: PPUSH
42546: CALL_OW 380
// un := CreateHuman ;
42550: LD_ADDR_VAR 0 14
42554: PUSH
42555: CALL_OW 44
42559: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42560: LD_ADDR_VAR 0 7
42564: PUSH
42565: LD_VAR 0 7
42569: PPUSH
42570: LD_INT 1
42572: PPUSH
42573: LD_VAR 0 14
42577: PPUSH
42578: CALL_OW 2
42582: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42583: LD_VAR 0 14
42587: PPUSH
42588: LD_VAR 0 9
42592: PPUSH
42593: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42597: LD_VAR 0 9
42601: PPUSH
42602: CALL_OW 313
42606: PUSH
42607: LD_INT 6
42609: EQUAL
42610: PUSH
42611: LD_VAR 0 9
42615: PPUSH
42616: CALL_OW 266
42620: PUSH
42621: LD_INT 32
42623: PUSH
42624: LD_INT 31
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: IN
42631: OR
42632: IFFALSE 42446
42634: GO 42443
42636: POP
42637: POP
// end else
42638: GO 43020
// for j = 1 to x do
42640: LD_ADDR_VAR 0 9
42644: PUSH
42645: DOUBLE
42646: LD_INT 1
42648: DEC
42649: ST_TO_ADDR
42650: LD_VAR 0 13
42654: PUSH
42655: FOR_TO
42656: IFFALSE 43018
// begin InitHc ;
42658: CALL_OW 19
// if not f then
42662: LD_VAR 0 12
42666: NOT
42667: IFFALSE 42756
// begin PrepareHuman ( false , i , skill ) ;
42669: LD_INT 0
42671: PPUSH
42672: LD_VAR 0 8
42676: PPUSH
42677: LD_VAR 0 4
42681: PPUSH
42682: CALL_OW 380
// un := CreateHuman ;
42686: LD_ADDR_VAR 0 14
42690: PUSH
42691: CALL_OW 44
42695: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42696: LD_ADDR_VAR 0 7
42700: PUSH
42701: LD_VAR 0 7
42705: PPUSH
42706: LD_INT 1
42708: PPUSH
42709: LD_VAR 0 14
42713: PPUSH
42714: CALL_OW 2
42718: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42719: LD_VAR 0 14
42723: PPUSH
42724: LD_VAR 0 1
42728: PPUSH
42729: CALL_OW 250
42733: PPUSH
42734: LD_VAR 0 1
42738: PPUSH
42739: CALL_OW 251
42743: PPUSH
42744: LD_INT 10
42746: PPUSH
42747: LD_INT 0
42749: PPUSH
42750: CALL_OW 50
// continue ;
42754: GO 42655
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42756: LD_VAR 0 12
42760: PUSH
42761: LD_INT 1
42763: ARRAY
42764: PPUSH
42765: CALL_OW 313
42769: PUSH
42770: LD_VAR 0 12
42774: PUSH
42775: LD_INT 1
42777: ARRAY
42778: PPUSH
42779: CALL_OW 266
42783: PUSH
42784: LD_INT 32
42786: PUSH
42787: LD_INT 31
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: IN
42794: AND
42795: PUSH
42796: LD_VAR 0 12
42800: PUSH
42801: LD_INT 1
42803: ARRAY
42804: PPUSH
42805: CALL_OW 313
42809: PUSH
42810: LD_INT 6
42812: EQUAL
42813: OR
42814: IFFALSE 42834
// f := Delete ( f , 1 ) ;
42816: LD_ADDR_VAR 0 12
42820: PUSH
42821: LD_VAR 0 12
42825: PPUSH
42826: LD_INT 1
42828: PPUSH
42829: CALL_OW 3
42833: ST_TO_ADDR
// if not f then
42834: LD_VAR 0 12
42838: NOT
42839: IFFALSE 42857
// begin x := x + 2 ;
42841: LD_ADDR_VAR 0 13
42845: PUSH
42846: LD_VAR 0 13
42850: PUSH
42851: LD_INT 2
42853: PLUS
42854: ST_TO_ADDR
// continue ;
42855: GO 42655
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42857: LD_VAR 0 12
42861: PUSH
42862: LD_INT 1
42864: ARRAY
42865: PPUSH
42866: CALL_OW 266
42870: PUSH
42871: LD_INT 5
42873: EQUAL
42874: IFFALSE 42948
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42876: LD_VAR 0 12
42880: PUSH
42881: LD_INT 1
42883: ARRAY
42884: PPUSH
42885: CALL_OW 313
42889: PUSH
42890: LD_INT 3
42892: LESS
42893: IFFALSE 42929
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42895: LD_INT 0
42897: PPUSH
42898: LD_INT 5
42900: PUSH
42901: LD_INT 8
42903: PUSH
42904: LD_INT 9
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: PUSH
42912: LD_VAR 0 17
42916: ARRAY
42917: PPUSH
42918: LD_VAR 0 4
42922: PPUSH
42923: CALL_OW 380
42927: GO 42946
// PrepareHuman ( false , i , skill ) ;
42929: LD_INT 0
42931: PPUSH
42932: LD_VAR 0 8
42936: PPUSH
42937: LD_VAR 0 4
42941: PPUSH
42942: CALL_OW 380
// end else
42946: GO 42965
// PrepareHuman ( false , i , skill ) ;
42948: LD_INT 0
42950: PPUSH
42951: LD_VAR 0 8
42955: PPUSH
42956: LD_VAR 0 4
42960: PPUSH
42961: CALL_OW 380
// un := CreateHuman ;
42965: LD_ADDR_VAR 0 14
42969: PUSH
42970: CALL_OW 44
42974: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42975: LD_ADDR_VAR 0 7
42979: PUSH
42980: LD_VAR 0 7
42984: PPUSH
42985: LD_INT 1
42987: PPUSH
42988: LD_VAR 0 14
42992: PPUSH
42993: CALL_OW 2
42997: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42998: LD_VAR 0 14
43002: PPUSH
43003: LD_VAR 0 12
43007: PUSH
43008: LD_INT 1
43010: ARRAY
43011: PPUSH
43012: CALL_OW 52
// end ;
43016: GO 42655
43018: POP
43019: POP
// end ;
43020: GO 41957
43022: POP
43023: POP
// result := result ^ buildings ;
43024: LD_ADDR_VAR 0 7
43028: PUSH
43029: LD_VAR 0 7
43033: PUSH
43034: LD_VAR 0 18
43038: ADD
43039: ST_TO_ADDR
// end else
43040: GO 43183
// begin for i = 1 to personel do
43042: LD_ADDR_VAR 0 8
43046: PUSH
43047: DOUBLE
43048: LD_INT 1
43050: DEC
43051: ST_TO_ADDR
43052: LD_VAR 0 6
43056: PUSH
43057: FOR_TO
43058: IFFALSE 43181
// begin if i > 4 then
43060: LD_VAR 0 8
43064: PUSH
43065: LD_INT 4
43067: GREATER
43068: IFFALSE 43072
// break ;
43070: GO 43181
// x := personel [ i ] ;
43072: LD_ADDR_VAR 0 13
43076: PUSH
43077: LD_VAR 0 6
43081: PUSH
43082: LD_VAR 0 8
43086: ARRAY
43087: ST_TO_ADDR
// if x = - 1 then
43088: LD_VAR 0 13
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: EQUAL
43097: IFFALSE 43101
// continue ;
43099: GO 43057
// PrepareHuman ( false , i , skill ) ;
43101: LD_INT 0
43103: PPUSH
43104: LD_VAR 0 8
43108: PPUSH
43109: LD_VAR 0 4
43113: PPUSH
43114: CALL_OW 380
// un := CreateHuman ;
43118: LD_ADDR_VAR 0 14
43122: PUSH
43123: CALL_OW 44
43127: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43128: LD_VAR 0 14
43132: PPUSH
43133: LD_VAR 0 1
43137: PPUSH
43138: CALL_OW 250
43142: PPUSH
43143: LD_VAR 0 1
43147: PPUSH
43148: CALL_OW 251
43152: PPUSH
43153: LD_INT 10
43155: PPUSH
43156: LD_INT 0
43158: PPUSH
43159: CALL_OW 50
// result := result ^ un ;
43163: LD_ADDR_VAR 0 7
43167: PUSH
43168: LD_VAR 0 7
43172: PUSH
43173: LD_VAR 0 14
43177: ADD
43178: ST_TO_ADDR
// end ;
43179: GO 43057
43181: POP
43182: POP
// end ; end ;
43183: LD_VAR 0 7
43187: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43188: LD_INT 0
43190: PPUSH
43191: PPUSH
43192: PPUSH
43193: PPUSH
43194: PPUSH
43195: PPUSH
43196: PPUSH
43197: PPUSH
43198: PPUSH
43199: PPUSH
43200: PPUSH
43201: PPUSH
43202: PPUSH
43203: PPUSH
43204: PPUSH
43205: PPUSH
// result := false ;
43206: LD_ADDR_VAR 0 3
43210: PUSH
43211: LD_INT 0
43213: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43214: LD_VAR 0 1
43218: NOT
43219: PUSH
43220: LD_VAR 0 1
43224: PPUSH
43225: CALL_OW 266
43229: PUSH
43230: LD_INT 32
43232: PUSH
43233: LD_INT 33
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: IN
43240: NOT
43241: OR
43242: IFFALSE 43246
// exit ;
43244: GO 44385
// nat := GetNation ( tower ) ;
43246: LD_ADDR_VAR 0 12
43250: PUSH
43251: LD_VAR 0 1
43255: PPUSH
43256: CALL_OW 248
43260: ST_TO_ADDR
// side := GetSide ( tower ) ;
43261: LD_ADDR_VAR 0 16
43265: PUSH
43266: LD_VAR 0 1
43270: PPUSH
43271: CALL_OW 255
43275: ST_TO_ADDR
// x := GetX ( tower ) ;
43276: LD_ADDR_VAR 0 10
43280: PUSH
43281: LD_VAR 0 1
43285: PPUSH
43286: CALL_OW 250
43290: ST_TO_ADDR
// y := GetY ( tower ) ;
43291: LD_ADDR_VAR 0 11
43295: PUSH
43296: LD_VAR 0 1
43300: PPUSH
43301: CALL_OW 251
43305: ST_TO_ADDR
// if not x or not y then
43306: LD_VAR 0 10
43310: NOT
43311: PUSH
43312: LD_VAR 0 11
43316: NOT
43317: OR
43318: IFFALSE 43322
// exit ;
43320: GO 44385
// weapon := 0 ;
43322: LD_ADDR_VAR 0 18
43326: PUSH
43327: LD_INT 0
43329: ST_TO_ADDR
// fac_list := [ ] ;
43330: LD_ADDR_VAR 0 17
43334: PUSH
43335: EMPTY
43336: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43337: LD_ADDR_VAR 0 6
43341: PUSH
43342: LD_VAR 0 1
43346: PPUSH
43347: CALL_OW 274
43351: PPUSH
43352: LD_VAR 0 2
43356: PPUSH
43357: LD_INT 0
43359: PPUSH
43360: CALL 40925 0 3
43364: PPUSH
43365: LD_INT 30
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PPUSH
43375: CALL_OW 72
43379: ST_TO_ADDR
// if not factories then
43380: LD_VAR 0 6
43384: NOT
43385: IFFALSE 43389
// exit ;
43387: GO 44385
// for i in factories do
43389: LD_ADDR_VAR 0 8
43393: PUSH
43394: LD_VAR 0 6
43398: PUSH
43399: FOR_IN
43400: IFFALSE 43425
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43402: LD_ADDR_VAR 0 17
43406: PUSH
43407: LD_VAR 0 17
43411: PUSH
43412: LD_VAR 0 8
43416: PPUSH
43417: CALL_OW 478
43421: UNION
43422: ST_TO_ADDR
43423: GO 43399
43425: POP
43426: POP
// if not fac_list then
43427: LD_VAR 0 17
43431: NOT
43432: IFFALSE 43436
// exit ;
43434: GO 44385
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43436: LD_ADDR_VAR 0 5
43440: PUSH
43441: LD_INT 4
43443: PUSH
43444: LD_INT 5
43446: PUSH
43447: LD_INT 9
43449: PUSH
43450: LD_INT 10
43452: PUSH
43453: LD_INT 6
43455: PUSH
43456: LD_INT 7
43458: PUSH
43459: LD_INT 11
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 27
43473: PUSH
43474: LD_INT 28
43476: PUSH
43477: LD_INT 26
43479: PUSH
43480: LD_INT 30
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 43
43491: PUSH
43492: LD_INT 44
43494: PUSH
43495: LD_INT 46
43497: PUSH
43498: LD_INT 45
43500: PUSH
43501: LD_INT 47
43503: PUSH
43504: LD_INT 49
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: LIST
43519: PUSH
43520: LD_VAR 0 12
43524: ARRAY
43525: ST_TO_ADDR
// for i in list do
43526: LD_ADDR_VAR 0 8
43530: PUSH
43531: LD_VAR 0 5
43535: PUSH
43536: FOR_IN
43537: IFFALSE 43570
// if not i in fac_list then
43539: LD_VAR 0 8
43543: PUSH
43544: LD_VAR 0 17
43548: IN
43549: NOT
43550: IFFALSE 43568
// list := list diff i ;
43552: LD_ADDR_VAR 0 5
43556: PUSH
43557: LD_VAR 0 5
43561: PUSH
43562: LD_VAR 0 8
43566: DIFF
43567: ST_TO_ADDR
43568: GO 43536
43570: POP
43571: POP
// if not list then
43572: LD_VAR 0 5
43576: NOT
43577: IFFALSE 43581
// exit ;
43579: GO 44385
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43581: LD_VAR 0 12
43585: PUSH
43586: LD_INT 3
43588: EQUAL
43589: PUSH
43590: LD_INT 49
43592: PUSH
43593: LD_VAR 0 5
43597: IN
43598: AND
43599: PUSH
43600: LD_INT 31
43602: PPUSH
43603: LD_VAR 0 16
43607: PPUSH
43608: CALL_OW 321
43612: PUSH
43613: LD_INT 2
43615: EQUAL
43616: AND
43617: IFFALSE 43677
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43619: LD_INT 22
43621: PUSH
43622: LD_VAR 0 16
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 35
43633: PUSH
43634: LD_INT 49
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 91
43643: PUSH
43644: LD_VAR 0 1
43648: PUSH
43649: LD_INT 10
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: LIST
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: PPUSH
43662: CALL_OW 69
43666: NOT
43667: IFFALSE 43677
// weapon := ru_time_lapser ;
43669: LD_ADDR_VAR 0 18
43673: PUSH
43674: LD_INT 49
43676: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43677: LD_VAR 0 12
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: IN
43692: PUSH
43693: LD_INT 11
43695: PUSH
43696: LD_VAR 0 5
43700: IN
43701: PUSH
43702: LD_INT 30
43704: PUSH
43705: LD_VAR 0 5
43709: IN
43710: OR
43711: AND
43712: PUSH
43713: LD_INT 6
43715: PPUSH
43716: LD_VAR 0 16
43720: PPUSH
43721: CALL_OW 321
43725: PUSH
43726: LD_INT 2
43728: EQUAL
43729: AND
43730: IFFALSE 43895
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43732: LD_INT 22
43734: PUSH
43735: LD_VAR 0 16
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: LD_INT 35
43749: PUSH
43750: LD_INT 11
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 35
43759: PUSH
43760: LD_INT 30
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 91
43774: PUSH
43775: LD_VAR 0 1
43779: PUSH
43780: LD_INT 18
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: LIST
43792: PPUSH
43793: CALL_OW 69
43797: NOT
43798: PUSH
43799: LD_INT 22
43801: PUSH
43802: LD_VAR 0 16
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 30
43816: PUSH
43817: LD_INT 32
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 30
43826: PUSH
43827: LD_INT 33
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 91
43841: PUSH
43842: LD_VAR 0 1
43846: PUSH
43847: LD_INT 12
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: LIST
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: LIST
43859: PUSH
43860: EMPTY
43861: LIST
43862: PPUSH
43863: CALL_OW 69
43867: PUSH
43868: LD_INT 2
43870: GREATER
43871: AND
43872: IFFALSE 43895
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43874: LD_ADDR_VAR 0 18
43878: PUSH
43879: LD_INT 11
43881: PUSH
43882: LD_INT 30
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_VAR 0 12
43893: ARRAY
43894: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43895: LD_VAR 0 18
43899: NOT
43900: PUSH
43901: LD_INT 40
43903: PPUSH
43904: LD_VAR 0 16
43908: PPUSH
43909: CALL_OW 321
43913: PUSH
43914: LD_INT 2
43916: EQUAL
43917: AND
43918: PUSH
43919: LD_INT 7
43921: PUSH
43922: LD_VAR 0 5
43926: IN
43927: PUSH
43928: LD_INT 28
43930: PUSH
43931: LD_VAR 0 5
43935: IN
43936: OR
43937: PUSH
43938: LD_INT 45
43940: PUSH
43941: LD_VAR 0 5
43945: IN
43946: OR
43947: AND
43948: IFFALSE 44202
// begin hex := GetHexInfo ( x , y ) ;
43950: LD_ADDR_VAR 0 4
43954: PUSH
43955: LD_VAR 0 10
43959: PPUSH
43960: LD_VAR 0 11
43964: PPUSH
43965: CALL_OW 546
43969: ST_TO_ADDR
// if hex [ 1 ] then
43970: LD_VAR 0 4
43974: PUSH
43975: LD_INT 1
43977: ARRAY
43978: IFFALSE 43982
// exit ;
43980: GO 44385
// height := hex [ 2 ] ;
43982: LD_ADDR_VAR 0 15
43986: PUSH
43987: LD_VAR 0 4
43991: PUSH
43992: LD_INT 2
43994: ARRAY
43995: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43996: LD_ADDR_VAR 0 14
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: LD_INT 3
44009: PUSH
44010: LD_INT 5
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: ST_TO_ADDR
// for i in tmp do
44019: LD_ADDR_VAR 0 8
44023: PUSH
44024: LD_VAR 0 14
44028: PUSH
44029: FOR_IN
44030: IFFALSE 44200
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44032: LD_ADDR_VAR 0 9
44036: PUSH
44037: LD_VAR 0 10
44041: PPUSH
44042: LD_VAR 0 8
44046: PPUSH
44047: LD_INT 5
44049: PPUSH
44050: CALL_OW 272
44054: PUSH
44055: LD_VAR 0 11
44059: PPUSH
44060: LD_VAR 0 8
44064: PPUSH
44065: LD_INT 5
44067: PPUSH
44068: CALL_OW 273
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44077: LD_VAR 0 9
44081: PUSH
44082: LD_INT 1
44084: ARRAY
44085: PPUSH
44086: LD_VAR 0 9
44090: PUSH
44091: LD_INT 2
44093: ARRAY
44094: PPUSH
44095: CALL_OW 488
44099: IFFALSE 44198
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44101: LD_ADDR_VAR 0 4
44105: PUSH
44106: LD_VAR 0 9
44110: PUSH
44111: LD_INT 1
44113: ARRAY
44114: PPUSH
44115: LD_VAR 0 9
44119: PUSH
44120: LD_INT 2
44122: ARRAY
44123: PPUSH
44124: CALL_OW 546
44128: ST_TO_ADDR
// if hex [ 1 ] then
44129: LD_VAR 0 4
44133: PUSH
44134: LD_INT 1
44136: ARRAY
44137: IFFALSE 44141
// continue ;
44139: GO 44029
// h := hex [ 2 ] ;
44141: LD_ADDR_VAR 0 13
44145: PUSH
44146: LD_VAR 0 4
44150: PUSH
44151: LD_INT 2
44153: ARRAY
44154: ST_TO_ADDR
// if h + 7 < height then
44155: LD_VAR 0 13
44159: PUSH
44160: LD_INT 7
44162: PLUS
44163: PUSH
44164: LD_VAR 0 15
44168: LESS
44169: IFFALSE 44198
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44171: LD_ADDR_VAR 0 18
44175: PUSH
44176: LD_INT 7
44178: PUSH
44179: LD_INT 28
44181: PUSH
44182: LD_INT 45
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: PUSH
44190: LD_VAR 0 12
44194: ARRAY
44195: ST_TO_ADDR
// break ;
44196: GO 44200
// end ; end ; end ;
44198: GO 44029
44200: POP
44201: POP
// end ; if not weapon then
44202: LD_VAR 0 18
44206: NOT
44207: IFFALSE 44267
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44209: LD_ADDR_VAR 0 5
44213: PUSH
44214: LD_VAR 0 5
44218: PUSH
44219: LD_INT 11
44221: PUSH
44222: LD_INT 30
44224: PUSH
44225: LD_INT 49
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: DIFF
44233: ST_TO_ADDR
// if not list then
44234: LD_VAR 0 5
44238: NOT
44239: IFFALSE 44243
// exit ;
44241: GO 44385
// weapon := list [ rand ( 1 , list ) ] ;
44243: LD_ADDR_VAR 0 18
44247: PUSH
44248: LD_VAR 0 5
44252: PUSH
44253: LD_INT 1
44255: PPUSH
44256: LD_VAR 0 5
44260: PPUSH
44261: CALL_OW 12
44265: ARRAY
44266: ST_TO_ADDR
// end ; if weapon then
44267: LD_VAR 0 18
44271: IFFALSE 44385
// begin tmp := CostOfWeapon ( weapon ) ;
44273: LD_ADDR_VAR 0 14
44277: PUSH
44278: LD_VAR 0 18
44282: PPUSH
44283: CALL_OW 451
44287: ST_TO_ADDR
// j := GetBase ( tower ) ;
44288: LD_ADDR_VAR 0 9
44292: PUSH
44293: LD_VAR 0 1
44297: PPUSH
44298: CALL_OW 274
44302: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44303: LD_VAR 0 9
44307: PPUSH
44308: LD_INT 1
44310: PPUSH
44311: CALL_OW 275
44315: PUSH
44316: LD_VAR 0 14
44320: PUSH
44321: LD_INT 1
44323: ARRAY
44324: GREATEREQUAL
44325: PUSH
44326: LD_VAR 0 9
44330: PPUSH
44331: LD_INT 2
44333: PPUSH
44334: CALL_OW 275
44338: PUSH
44339: LD_VAR 0 14
44343: PUSH
44344: LD_INT 2
44346: ARRAY
44347: GREATEREQUAL
44348: AND
44349: PUSH
44350: LD_VAR 0 9
44354: PPUSH
44355: LD_INT 3
44357: PPUSH
44358: CALL_OW 275
44362: PUSH
44363: LD_VAR 0 14
44367: PUSH
44368: LD_INT 3
44370: ARRAY
44371: GREATEREQUAL
44372: AND
44373: IFFALSE 44385
// result := weapon ;
44375: LD_ADDR_VAR 0 3
44379: PUSH
44380: LD_VAR 0 18
44384: ST_TO_ADDR
// end ; end ;
44385: LD_VAR 0 3
44389: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44390: LD_INT 0
44392: PPUSH
44393: PPUSH
// result := true ;
44394: LD_ADDR_VAR 0 3
44398: PUSH
44399: LD_INT 1
44401: ST_TO_ADDR
// if array1 = array2 then
44402: LD_VAR 0 1
44406: PUSH
44407: LD_VAR 0 2
44411: EQUAL
44412: IFFALSE 44472
// begin for i = 1 to array1 do
44414: LD_ADDR_VAR 0 4
44418: PUSH
44419: DOUBLE
44420: LD_INT 1
44422: DEC
44423: ST_TO_ADDR
44424: LD_VAR 0 1
44428: PUSH
44429: FOR_TO
44430: IFFALSE 44468
// if array1 [ i ] <> array2 [ i ] then
44432: LD_VAR 0 1
44436: PUSH
44437: LD_VAR 0 4
44441: ARRAY
44442: PUSH
44443: LD_VAR 0 2
44447: PUSH
44448: LD_VAR 0 4
44452: ARRAY
44453: NONEQUAL
44454: IFFALSE 44466
// begin result := false ;
44456: LD_ADDR_VAR 0 3
44460: PUSH
44461: LD_INT 0
44463: ST_TO_ADDR
// break ;
44464: GO 44468
// end ;
44466: GO 44429
44468: POP
44469: POP
// end else
44470: GO 44480
// result := false ;
44472: LD_ADDR_VAR 0 3
44476: PUSH
44477: LD_INT 0
44479: ST_TO_ADDR
// end ;
44480: LD_VAR 0 3
44484: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44485: LD_INT 0
44487: PPUSH
44488: PPUSH
// if not array1 or not array2 then
44489: LD_VAR 0 1
44493: NOT
44494: PUSH
44495: LD_VAR 0 2
44499: NOT
44500: OR
44501: IFFALSE 44505
// exit ;
44503: GO 44569
// result := true ;
44505: LD_ADDR_VAR 0 3
44509: PUSH
44510: LD_INT 1
44512: ST_TO_ADDR
// for i = 1 to array1 do
44513: LD_ADDR_VAR 0 4
44517: PUSH
44518: DOUBLE
44519: LD_INT 1
44521: DEC
44522: ST_TO_ADDR
44523: LD_VAR 0 1
44527: PUSH
44528: FOR_TO
44529: IFFALSE 44567
// if array1 [ i ] <> array2 [ i ] then
44531: LD_VAR 0 1
44535: PUSH
44536: LD_VAR 0 4
44540: ARRAY
44541: PUSH
44542: LD_VAR 0 2
44546: PUSH
44547: LD_VAR 0 4
44551: ARRAY
44552: NONEQUAL
44553: IFFALSE 44565
// begin result := false ;
44555: LD_ADDR_VAR 0 3
44559: PUSH
44560: LD_INT 0
44562: ST_TO_ADDR
// break ;
44563: GO 44567
// end ;
44565: GO 44528
44567: POP
44568: POP
// end ;
44569: LD_VAR 0 3
44573: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44574: LD_INT 0
44576: PPUSH
44577: PPUSH
44578: PPUSH
// pom := GetBase ( fac ) ;
44579: LD_ADDR_VAR 0 5
44583: PUSH
44584: LD_VAR 0 1
44588: PPUSH
44589: CALL_OW 274
44593: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44594: LD_ADDR_VAR 0 4
44598: PUSH
44599: LD_VAR 0 2
44603: PUSH
44604: LD_INT 1
44606: ARRAY
44607: PPUSH
44608: LD_VAR 0 2
44612: PUSH
44613: LD_INT 2
44615: ARRAY
44616: PPUSH
44617: LD_VAR 0 2
44621: PUSH
44622: LD_INT 3
44624: ARRAY
44625: PPUSH
44626: LD_VAR 0 2
44630: PUSH
44631: LD_INT 4
44633: ARRAY
44634: PPUSH
44635: CALL_OW 449
44639: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44640: LD_ADDR_VAR 0 3
44644: PUSH
44645: LD_VAR 0 5
44649: PPUSH
44650: LD_INT 1
44652: PPUSH
44653: CALL_OW 275
44657: PUSH
44658: LD_VAR 0 4
44662: PUSH
44663: LD_INT 1
44665: ARRAY
44666: GREATEREQUAL
44667: PUSH
44668: LD_VAR 0 5
44672: PPUSH
44673: LD_INT 2
44675: PPUSH
44676: CALL_OW 275
44680: PUSH
44681: LD_VAR 0 4
44685: PUSH
44686: LD_INT 2
44688: ARRAY
44689: GREATEREQUAL
44690: AND
44691: PUSH
44692: LD_VAR 0 5
44696: PPUSH
44697: LD_INT 3
44699: PPUSH
44700: CALL_OW 275
44704: PUSH
44705: LD_VAR 0 4
44709: PUSH
44710: LD_INT 3
44712: ARRAY
44713: GREATEREQUAL
44714: AND
44715: ST_TO_ADDR
// end ;
44716: LD_VAR 0 3
44720: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44721: LD_INT 0
44723: PPUSH
44724: PPUSH
44725: PPUSH
44726: PPUSH
// pom := GetBase ( building ) ;
44727: LD_ADDR_VAR 0 3
44731: PUSH
44732: LD_VAR 0 1
44736: PPUSH
44737: CALL_OW 274
44741: ST_TO_ADDR
// if not pom then
44742: LD_VAR 0 3
44746: NOT
44747: IFFALSE 44751
// exit ;
44749: GO 44921
// btype := GetBType ( building ) ;
44751: LD_ADDR_VAR 0 5
44755: PUSH
44756: LD_VAR 0 1
44760: PPUSH
44761: CALL_OW 266
44765: ST_TO_ADDR
// if btype = b_armoury then
44766: LD_VAR 0 5
44770: PUSH
44771: LD_INT 4
44773: EQUAL
44774: IFFALSE 44784
// btype := b_barracks ;
44776: LD_ADDR_VAR 0 5
44780: PUSH
44781: LD_INT 5
44783: ST_TO_ADDR
// if btype = b_depot then
44784: LD_VAR 0 5
44788: PUSH
44789: LD_INT 0
44791: EQUAL
44792: IFFALSE 44802
// btype := b_warehouse ;
44794: LD_ADDR_VAR 0 5
44798: PUSH
44799: LD_INT 1
44801: ST_TO_ADDR
// if btype = b_workshop then
44802: LD_VAR 0 5
44806: PUSH
44807: LD_INT 2
44809: EQUAL
44810: IFFALSE 44820
// btype := b_factory ;
44812: LD_ADDR_VAR 0 5
44816: PUSH
44817: LD_INT 3
44819: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44820: LD_ADDR_VAR 0 4
44824: PUSH
44825: LD_VAR 0 5
44829: PPUSH
44830: LD_VAR 0 1
44834: PPUSH
44835: CALL_OW 248
44839: PPUSH
44840: CALL_OW 450
44844: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44845: LD_ADDR_VAR 0 2
44849: PUSH
44850: LD_VAR 0 3
44854: PPUSH
44855: LD_INT 1
44857: PPUSH
44858: CALL_OW 275
44862: PUSH
44863: LD_VAR 0 4
44867: PUSH
44868: LD_INT 1
44870: ARRAY
44871: GREATEREQUAL
44872: PUSH
44873: LD_VAR 0 3
44877: PPUSH
44878: LD_INT 2
44880: PPUSH
44881: CALL_OW 275
44885: PUSH
44886: LD_VAR 0 4
44890: PUSH
44891: LD_INT 2
44893: ARRAY
44894: GREATEREQUAL
44895: AND
44896: PUSH
44897: LD_VAR 0 3
44901: PPUSH
44902: LD_INT 3
44904: PPUSH
44905: CALL_OW 275
44909: PUSH
44910: LD_VAR 0 4
44914: PUSH
44915: LD_INT 3
44917: ARRAY
44918: GREATEREQUAL
44919: AND
44920: ST_TO_ADDR
// end ;
44921: LD_VAR 0 2
44925: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44926: LD_INT 0
44928: PPUSH
44929: PPUSH
44930: PPUSH
// pom := GetBase ( building ) ;
44931: LD_ADDR_VAR 0 4
44935: PUSH
44936: LD_VAR 0 1
44940: PPUSH
44941: CALL_OW 274
44945: ST_TO_ADDR
// if not pom then
44946: LD_VAR 0 4
44950: NOT
44951: IFFALSE 44955
// exit ;
44953: GO 45056
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44955: LD_ADDR_VAR 0 5
44959: PUSH
44960: LD_VAR 0 2
44964: PPUSH
44965: LD_VAR 0 1
44969: PPUSH
44970: CALL_OW 248
44974: PPUSH
44975: CALL_OW 450
44979: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44980: LD_ADDR_VAR 0 3
44984: PUSH
44985: LD_VAR 0 4
44989: PPUSH
44990: LD_INT 1
44992: PPUSH
44993: CALL_OW 275
44997: PUSH
44998: LD_VAR 0 5
45002: PUSH
45003: LD_INT 1
45005: ARRAY
45006: GREATEREQUAL
45007: PUSH
45008: LD_VAR 0 4
45012: PPUSH
45013: LD_INT 2
45015: PPUSH
45016: CALL_OW 275
45020: PUSH
45021: LD_VAR 0 5
45025: PUSH
45026: LD_INT 2
45028: ARRAY
45029: GREATEREQUAL
45030: AND
45031: PUSH
45032: LD_VAR 0 4
45036: PPUSH
45037: LD_INT 3
45039: PPUSH
45040: CALL_OW 275
45044: PUSH
45045: LD_VAR 0 5
45049: PUSH
45050: LD_INT 3
45052: ARRAY
45053: GREATEREQUAL
45054: AND
45055: ST_TO_ADDR
// end ;
45056: LD_VAR 0 3
45060: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45061: LD_INT 0
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
45073: PPUSH
// result := false ;
45074: LD_ADDR_VAR 0 8
45078: PUSH
45079: LD_INT 0
45081: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45082: LD_VAR 0 5
45086: NOT
45087: PUSH
45088: LD_VAR 0 1
45092: NOT
45093: OR
45094: PUSH
45095: LD_VAR 0 2
45099: NOT
45100: OR
45101: PUSH
45102: LD_VAR 0 3
45106: NOT
45107: OR
45108: IFFALSE 45112
// exit ;
45110: GO 45926
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45112: LD_ADDR_VAR 0 14
45116: PUSH
45117: LD_VAR 0 1
45121: PPUSH
45122: LD_VAR 0 2
45126: PPUSH
45127: LD_VAR 0 3
45131: PPUSH
45132: LD_VAR 0 4
45136: PPUSH
45137: LD_VAR 0 5
45141: PUSH
45142: LD_INT 1
45144: ARRAY
45145: PPUSH
45146: CALL_OW 248
45150: PPUSH
45151: LD_INT 0
45153: PPUSH
45154: CALL 46763 0 6
45158: ST_TO_ADDR
// if not hexes then
45159: LD_VAR 0 14
45163: NOT
45164: IFFALSE 45168
// exit ;
45166: GO 45926
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45168: LD_ADDR_VAR 0 17
45172: PUSH
45173: LD_VAR 0 5
45177: PPUSH
45178: LD_INT 22
45180: PUSH
45181: LD_VAR 0 13
45185: PPUSH
45186: CALL_OW 255
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: LD_INT 30
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 30
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: LIST
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PPUSH
45227: CALL_OW 72
45231: ST_TO_ADDR
// for i = 1 to hexes do
45232: LD_ADDR_VAR 0 9
45236: PUSH
45237: DOUBLE
45238: LD_INT 1
45240: DEC
45241: ST_TO_ADDR
45242: LD_VAR 0 14
45246: PUSH
45247: FOR_TO
45248: IFFALSE 45924
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45250: LD_ADDR_VAR 0 13
45254: PUSH
45255: LD_VAR 0 14
45259: PUSH
45260: LD_VAR 0 9
45264: ARRAY
45265: PUSH
45266: LD_INT 1
45268: ARRAY
45269: PPUSH
45270: LD_VAR 0 14
45274: PUSH
45275: LD_VAR 0 9
45279: ARRAY
45280: PUSH
45281: LD_INT 2
45283: ARRAY
45284: PPUSH
45285: CALL_OW 428
45289: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45290: LD_VAR 0 14
45294: PUSH
45295: LD_VAR 0 9
45299: ARRAY
45300: PUSH
45301: LD_INT 1
45303: ARRAY
45304: PPUSH
45305: LD_VAR 0 14
45309: PUSH
45310: LD_VAR 0 9
45314: ARRAY
45315: PUSH
45316: LD_INT 2
45318: ARRAY
45319: PPUSH
45320: CALL_OW 351
45324: PUSH
45325: LD_VAR 0 14
45329: PUSH
45330: LD_VAR 0 9
45334: ARRAY
45335: PUSH
45336: LD_INT 1
45338: ARRAY
45339: PPUSH
45340: LD_VAR 0 14
45344: PUSH
45345: LD_VAR 0 9
45349: ARRAY
45350: PUSH
45351: LD_INT 2
45353: ARRAY
45354: PPUSH
45355: CALL_OW 488
45359: NOT
45360: OR
45361: PUSH
45362: LD_VAR 0 13
45366: PPUSH
45367: CALL_OW 247
45371: PUSH
45372: LD_INT 3
45374: EQUAL
45375: OR
45376: IFFALSE 45382
// exit ;
45378: POP
45379: POP
45380: GO 45926
// if not tmp then
45382: LD_VAR 0 13
45386: NOT
45387: IFFALSE 45391
// continue ;
45389: GO 45247
// result := true ;
45391: LD_ADDR_VAR 0 8
45395: PUSH
45396: LD_INT 1
45398: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45399: LD_VAR 0 6
45403: PUSH
45404: LD_VAR 0 13
45408: PPUSH
45409: CALL_OW 247
45413: PUSH
45414: LD_INT 2
45416: EQUAL
45417: AND
45418: PUSH
45419: LD_VAR 0 13
45423: PPUSH
45424: CALL_OW 263
45428: PUSH
45429: LD_INT 1
45431: EQUAL
45432: AND
45433: IFFALSE 45597
// begin if IsDrivenBy ( tmp ) then
45435: LD_VAR 0 13
45439: PPUSH
45440: CALL_OW 311
45444: IFFALSE 45448
// continue ;
45446: GO 45247
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45448: LD_VAR 0 6
45452: PPUSH
45453: LD_INT 3
45455: PUSH
45456: LD_INT 60
45458: PUSH
45459: EMPTY
45460: LIST
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: LD_INT 55
45471: PUSH
45472: EMPTY
45473: LIST
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PPUSH
45483: CALL_OW 72
45487: IFFALSE 45595
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45489: LD_ADDR_VAR 0 18
45493: PUSH
45494: LD_VAR 0 6
45498: PPUSH
45499: LD_INT 3
45501: PUSH
45502: LD_INT 60
45504: PUSH
45505: EMPTY
45506: LIST
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 3
45514: PUSH
45515: LD_INT 55
45517: PUSH
45518: EMPTY
45519: LIST
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PPUSH
45529: CALL_OW 72
45533: PUSH
45534: LD_INT 1
45536: ARRAY
45537: ST_TO_ADDR
// if IsInUnit ( driver ) then
45538: LD_VAR 0 18
45542: PPUSH
45543: CALL_OW 310
45547: IFFALSE 45558
// ComExit ( driver ) ;
45549: LD_VAR 0 18
45553: PPUSH
45554: CALL 69947 0 1
// AddComEnterUnit ( driver , tmp ) ;
45558: LD_VAR 0 18
45562: PPUSH
45563: LD_VAR 0 13
45567: PPUSH
45568: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45572: LD_VAR 0 18
45576: PPUSH
45577: LD_VAR 0 7
45581: PPUSH
45582: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45586: LD_VAR 0 18
45590: PPUSH
45591: CALL_OW 181
// end ; continue ;
45595: GO 45247
// end ; if not cleaners or not tmp in cleaners then
45597: LD_VAR 0 6
45601: NOT
45602: PUSH
45603: LD_VAR 0 13
45607: PUSH
45608: LD_VAR 0 6
45612: IN
45613: NOT
45614: OR
45615: IFFALSE 45922
// begin if dep then
45617: LD_VAR 0 17
45621: IFFALSE 45757
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45623: LD_ADDR_VAR 0 16
45627: PUSH
45628: LD_VAR 0 17
45632: PUSH
45633: LD_INT 1
45635: ARRAY
45636: PPUSH
45637: CALL_OW 250
45641: PPUSH
45642: LD_VAR 0 17
45646: PUSH
45647: LD_INT 1
45649: ARRAY
45650: PPUSH
45651: CALL_OW 254
45655: PPUSH
45656: LD_INT 5
45658: PPUSH
45659: CALL_OW 272
45663: PUSH
45664: LD_VAR 0 17
45668: PUSH
45669: LD_INT 1
45671: ARRAY
45672: PPUSH
45673: CALL_OW 251
45677: PPUSH
45678: LD_VAR 0 17
45682: PUSH
45683: LD_INT 1
45685: ARRAY
45686: PPUSH
45687: CALL_OW 254
45691: PPUSH
45692: LD_INT 5
45694: PPUSH
45695: CALL_OW 273
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45704: LD_VAR 0 16
45708: PUSH
45709: LD_INT 1
45711: ARRAY
45712: PPUSH
45713: LD_VAR 0 16
45717: PUSH
45718: LD_INT 2
45720: ARRAY
45721: PPUSH
45722: CALL_OW 488
45726: IFFALSE 45757
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45728: LD_VAR 0 13
45732: PPUSH
45733: LD_VAR 0 16
45737: PUSH
45738: LD_INT 1
45740: ARRAY
45741: PPUSH
45742: LD_VAR 0 16
45746: PUSH
45747: LD_INT 2
45749: ARRAY
45750: PPUSH
45751: CALL_OW 111
// continue ;
45755: GO 45247
// end ; end ; r := GetDir ( tmp ) ;
45757: LD_ADDR_VAR 0 15
45761: PUSH
45762: LD_VAR 0 13
45766: PPUSH
45767: CALL_OW 254
45771: ST_TO_ADDR
// if r = 5 then
45772: LD_VAR 0 15
45776: PUSH
45777: LD_INT 5
45779: EQUAL
45780: IFFALSE 45790
// r := 0 ;
45782: LD_ADDR_VAR 0 15
45786: PUSH
45787: LD_INT 0
45789: ST_TO_ADDR
// for j = r to 5 do
45790: LD_ADDR_VAR 0 10
45794: PUSH
45795: DOUBLE
45796: LD_VAR 0 15
45800: DEC
45801: ST_TO_ADDR
45802: LD_INT 5
45804: PUSH
45805: FOR_TO
45806: IFFALSE 45920
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45808: LD_ADDR_VAR 0 11
45812: PUSH
45813: LD_VAR 0 13
45817: PPUSH
45818: CALL_OW 250
45822: PPUSH
45823: LD_VAR 0 10
45827: PPUSH
45828: LD_INT 2
45830: PPUSH
45831: CALL_OW 272
45835: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45836: LD_ADDR_VAR 0 12
45840: PUSH
45841: LD_VAR 0 13
45845: PPUSH
45846: CALL_OW 251
45850: PPUSH
45851: LD_VAR 0 10
45855: PPUSH
45856: LD_INT 2
45858: PPUSH
45859: CALL_OW 273
45863: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45864: LD_VAR 0 11
45868: PPUSH
45869: LD_VAR 0 12
45873: PPUSH
45874: CALL_OW 488
45878: PUSH
45879: LD_VAR 0 11
45883: PPUSH
45884: LD_VAR 0 12
45888: PPUSH
45889: CALL_OW 428
45893: NOT
45894: AND
45895: IFFALSE 45918
// begin ComMoveXY ( tmp , _x , _y ) ;
45897: LD_VAR 0 13
45901: PPUSH
45902: LD_VAR 0 11
45906: PPUSH
45907: LD_VAR 0 12
45911: PPUSH
45912: CALL_OW 111
// break ;
45916: GO 45920
// end ; end ;
45918: GO 45805
45920: POP
45921: POP
// end ; end ;
45922: GO 45247
45924: POP
45925: POP
// end ;
45926: LD_VAR 0 8
45930: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
45931: LD_INT 0
45933: PPUSH
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
45938: PPUSH
45939: PPUSH
45940: PPUSH
45941: PPUSH
45942: PPUSH
// result := false ;
45943: LD_ADDR_VAR 0 6
45947: PUSH
45948: LD_INT 0
45950: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45951: LD_VAR 0 1
45955: NOT
45956: PUSH
45957: LD_VAR 0 1
45961: PPUSH
45962: CALL_OW 266
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: IN
45977: NOT
45978: OR
45979: PUSH
45980: LD_VAR 0 2
45984: NOT
45985: OR
45986: PUSH
45987: LD_VAR 0 5
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: LD_INT 4
46006: PUSH
46007: LD_INT 5
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: IN
46018: NOT
46019: OR
46020: PUSH
46021: LD_VAR 0 3
46025: PPUSH
46026: LD_VAR 0 4
46030: PPUSH
46031: CALL_OW 488
46035: NOT
46036: OR
46037: IFFALSE 46041
// exit ;
46039: GO 46758
// pom := GetBase ( depot ) ;
46041: LD_ADDR_VAR 0 10
46045: PUSH
46046: LD_VAR 0 1
46050: PPUSH
46051: CALL_OW 274
46055: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46056: LD_ADDR_VAR 0 11
46060: PUSH
46061: LD_VAR 0 2
46065: PPUSH
46066: LD_VAR 0 1
46070: PPUSH
46071: CALL_OW 248
46075: PPUSH
46076: CALL_OW 450
46080: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46081: LD_VAR 0 10
46085: PPUSH
46086: LD_INT 1
46088: PPUSH
46089: CALL_OW 275
46093: PUSH
46094: LD_VAR 0 11
46098: PUSH
46099: LD_INT 1
46101: ARRAY
46102: GREATEREQUAL
46103: PUSH
46104: LD_VAR 0 10
46108: PPUSH
46109: LD_INT 2
46111: PPUSH
46112: CALL_OW 275
46116: PUSH
46117: LD_VAR 0 11
46121: PUSH
46122: LD_INT 2
46124: ARRAY
46125: GREATEREQUAL
46126: AND
46127: PUSH
46128: LD_VAR 0 10
46132: PPUSH
46133: LD_INT 3
46135: PPUSH
46136: CALL_OW 275
46140: PUSH
46141: LD_VAR 0 11
46145: PUSH
46146: LD_INT 3
46148: ARRAY
46149: GREATEREQUAL
46150: AND
46151: NOT
46152: IFFALSE 46156
// exit ;
46154: GO 46758
// if GetBType ( depot ) = b_depot then
46156: LD_VAR 0 1
46160: PPUSH
46161: CALL_OW 266
46165: PUSH
46166: LD_INT 0
46168: EQUAL
46169: IFFALSE 46181
// dist := 28 else
46171: LD_ADDR_VAR 0 14
46175: PUSH
46176: LD_INT 28
46178: ST_TO_ADDR
46179: GO 46189
// dist := 36 ;
46181: LD_ADDR_VAR 0 14
46185: PUSH
46186: LD_INT 36
46188: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46189: LD_VAR 0 1
46193: PPUSH
46194: LD_VAR 0 3
46198: PPUSH
46199: LD_VAR 0 4
46203: PPUSH
46204: CALL_OW 297
46208: PUSH
46209: LD_VAR 0 14
46213: GREATER
46214: IFFALSE 46218
// exit ;
46216: GO 46758
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46218: LD_ADDR_VAR 0 12
46222: PUSH
46223: LD_VAR 0 2
46227: PPUSH
46228: LD_VAR 0 3
46232: PPUSH
46233: LD_VAR 0 4
46237: PPUSH
46238: LD_VAR 0 5
46242: PPUSH
46243: LD_VAR 0 1
46247: PPUSH
46248: CALL_OW 248
46252: PPUSH
46253: LD_INT 0
46255: PPUSH
46256: CALL 46763 0 6
46260: ST_TO_ADDR
// if not hexes then
46261: LD_VAR 0 12
46265: NOT
46266: IFFALSE 46270
// exit ;
46268: GO 46758
// hex := GetHexInfo ( x , y ) ;
46270: LD_ADDR_VAR 0 15
46274: PUSH
46275: LD_VAR 0 3
46279: PPUSH
46280: LD_VAR 0 4
46284: PPUSH
46285: CALL_OW 546
46289: ST_TO_ADDR
// if hex [ 1 ] then
46290: LD_VAR 0 15
46294: PUSH
46295: LD_INT 1
46297: ARRAY
46298: IFFALSE 46302
// exit ;
46300: GO 46758
// height := hex [ 2 ] ;
46302: LD_ADDR_VAR 0 13
46306: PUSH
46307: LD_VAR 0 15
46311: PUSH
46312: LD_INT 2
46314: ARRAY
46315: ST_TO_ADDR
// for i = 1 to hexes do
46316: LD_ADDR_VAR 0 7
46320: PUSH
46321: DOUBLE
46322: LD_INT 1
46324: DEC
46325: ST_TO_ADDR
46326: LD_VAR 0 12
46330: PUSH
46331: FOR_TO
46332: IFFALSE 46662
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46334: LD_VAR 0 12
46338: PUSH
46339: LD_VAR 0 7
46343: ARRAY
46344: PUSH
46345: LD_INT 1
46347: ARRAY
46348: PPUSH
46349: LD_VAR 0 12
46353: PUSH
46354: LD_VAR 0 7
46358: ARRAY
46359: PUSH
46360: LD_INT 2
46362: ARRAY
46363: PPUSH
46364: CALL_OW 488
46368: NOT
46369: PUSH
46370: LD_VAR 0 12
46374: PUSH
46375: LD_VAR 0 7
46379: ARRAY
46380: PUSH
46381: LD_INT 1
46383: ARRAY
46384: PPUSH
46385: LD_VAR 0 12
46389: PUSH
46390: LD_VAR 0 7
46394: ARRAY
46395: PUSH
46396: LD_INT 2
46398: ARRAY
46399: PPUSH
46400: CALL_OW 428
46404: PUSH
46405: LD_INT 0
46407: GREATER
46408: OR
46409: PUSH
46410: LD_VAR 0 12
46414: PUSH
46415: LD_VAR 0 7
46419: ARRAY
46420: PUSH
46421: LD_INT 1
46423: ARRAY
46424: PPUSH
46425: LD_VAR 0 12
46429: PUSH
46430: LD_VAR 0 7
46434: ARRAY
46435: PUSH
46436: LD_INT 2
46438: ARRAY
46439: PPUSH
46440: CALL_OW 351
46444: OR
46445: IFFALSE 46451
// exit ;
46447: POP
46448: POP
46449: GO 46758
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46451: LD_ADDR_VAR 0 8
46455: PUSH
46456: LD_VAR 0 12
46460: PUSH
46461: LD_VAR 0 7
46465: ARRAY
46466: PUSH
46467: LD_INT 1
46469: ARRAY
46470: PPUSH
46471: LD_VAR 0 12
46475: PUSH
46476: LD_VAR 0 7
46480: ARRAY
46481: PUSH
46482: LD_INT 2
46484: ARRAY
46485: PPUSH
46486: CALL_OW 546
46490: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46491: LD_VAR 0 8
46495: PUSH
46496: LD_INT 1
46498: ARRAY
46499: PUSH
46500: LD_VAR 0 8
46504: PUSH
46505: LD_INT 2
46507: ARRAY
46508: PUSH
46509: LD_VAR 0 13
46513: PUSH
46514: LD_INT 2
46516: PLUS
46517: GREATER
46518: OR
46519: PUSH
46520: LD_VAR 0 8
46524: PUSH
46525: LD_INT 2
46527: ARRAY
46528: PUSH
46529: LD_VAR 0 13
46533: PUSH
46534: LD_INT 2
46536: MINUS
46537: LESS
46538: OR
46539: PUSH
46540: LD_VAR 0 8
46544: PUSH
46545: LD_INT 3
46547: ARRAY
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 8
46554: PUSH
46555: LD_INT 9
46557: PUSH
46558: LD_INT 10
46560: PUSH
46561: LD_INT 11
46563: PUSH
46564: LD_INT 12
46566: PUSH
46567: LD_INT 13
46569: PUSH
46570: LD_INT 16
46572: PUSH
46573: LD_INT 17
46575: PUSH
46576: LD_INT 18
46578: PUSH
46579: LD_INT 19
46581: PUSH
46582: LD_INT 20
46584: PUSH
46585: LD_INT 21
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: IN
46603: NOT
46604: OR
46605: PUSH
46606: LD_VAR 0 8
46610: PUSH
46611: LD_INT 5
46613: ARRAY
46614: NOT
46615: OR
46616: PUSH
46617: LD_VAR 0 8
46621: PUSH
46622: LD_INT 6
46624: ARRAY
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: LD_INT 7
46634: PUSH
46635: LD_INT 9
46637: PUSH
46638: LD_INT 10
46640: PUSH
46641: LD_INT 11
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: IN
46652: NOT
46653: OR
46654: IFFALSE 46660
// exit ;
46656: POP
46657: POP
46658: GO 46758
// end ;
46660: GO 46331
46662: POP
46663: POP
// side := GetSide ( depot ) ;
46664: LD_ADDR_VAR 0 9
46668: PUSH
46669: LD_VAR 0 1
46673: PPUSH
46674: CALL_OW 255
46678: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46679: LD_VAR 0 9
46683: PPUSH
46684: LD_VAR 0 3
46688: PPUSH
46689: LD_VAR 0 4
46693: PPUSH
46694: LD_INT 20
46696: PPUSH
46697: CALL 39079 0 4
46701: PUSH
46702: LD_INT 4
46704: ARRAY
46705: IFFALSE 46709
// exit ;
46707: GO 46758
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46709: LD_VAR 0 2
46713: PUSH
46714: LD_INT 29
46716: PUSH
46717: LD_INT 30
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: IN
46724: PUSH
46725: LD_VAR 0 3
46729: PPUSH
46730: LD_VAR 0 4
46734: PPUSH
46735: LD_VAR 0 9
46739: PPUSH
46740: CALL_OW 440
46744: NOT
46745: AND
46746: IFFALSE 46750
// exit ;
46748: GO 46758
// result := true ;
46750: LD_ADDR_VAR 0 6
46754: PUSH
46755: LD_INT 1
46757: ST_TO_ADDR
// end ;
46758: LD_VAR 0 6
46762: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46763: LD_INT 0
46765: PPUSH
46766: PPUSH
46767: PPUSH
46768: PPUSH
46769: PPUSH
46770: PPUSH
46771: PPUSH
46772: PPUSH
46773: PPUSH
46774: PPUSH
46775: PPUSH
46776: PPUSH
46777: PPUSH
46778: PPUSH
46779: PPUSH
46780: PPUSH
46781: PPUSH
46782: PPUSH
46783: PPUSH
46784: PPUSH
46785: PPUSH
46786: PPUSH
46787: PPUSH
46788: PPUSH
46789: PPUSH
46790: PPUSH
46791: PPUSH
46792: PPUSH
46793: PPUSH
46794: PPUSH
46795: PPUSH
46796: PPUSH
46797: PPUSH
46798: PPUSH
46799: PPUSH
46800: PPUSH
46801: PPUSH
46802: PPUSH
46803: PPUSH
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
46811: PPUSH
46812: PPUSH
46813: PPUSH
46814: PPUSH
46815: PPUSH
46816: PPUSH
46817: PPUSH
46818: PPUSH
46819: PPUSH
46820: PPUSH
46821: PPUSH
46822: PPUSH
// result = [ ] ;
46823: LD_ADDR_VAR 0 7
46827: PUSH
46828: EMPTY
46829: ST_TO_ADDR
// temp_list = [ ] ;
46830: LD_ADDR_VAR 0 9
46834: PUSH
46835: EMPTY
46836: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46837: LD_VAR 0 4
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: LD_INT 3
46853: PUSH
46854: LD_INT 4
46856: PUSH
46857: LD_INT 5
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: IN
46868: NOT
46869: PUSH
46870: LD_VAR 0 1
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: IN
46885: PUSH
46886: LD_VAR 0 5
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: LD_INT 3
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: LIST
46904: IN
46905: NOT
46906: AND
46907: OR
46908: IFFALSE 46912
// exit ;
46910: GO 65303
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46912: LD_VAR 0 1
46916: PUSH
46917: LD_INT 6
46919: PUSH
46920: LD_INT 7
46922: PUSH
46923: LD_INT 8
46925: PUSH
46926: LD_INT 13
46928: PUSH
46929: LD_INT 12
46931: PUSH
46932: LD_INT 15
46934: PUSH
46935: LD_INT 11
46937: PUSH
46938: LD_INT 14
46940: PUSH
46941: LD_INT 10
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: IN
46955: IFFALSE 46965
// btype = b_lab ;
46957: LD_ADDR_VAR 0 1
46961: PUSH
46962: LD_INT 6
46964: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46965: LD_VAR 0 6
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: IN
46984: NOT
46985: PUSH
46986: LD_VAR 0 1
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 2
46999: PUSH
47000: LD_INT 3
47002: PUSH
47003: LD_INT 6
47005: PUSH
47006: LD_INT 36
47008: PUSH
47009: LD_INT 4
47011: PUSH
47012: LD_INT 5
47014: PUSH
47015: LD_INT 31
47017: PUSH
47018: LD_INT 32
47020: PUSH
47021: LD_INT 33
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: IN
47037: NOT
47038: PUSH
47039: LD_VAR 0 6
47043: PUSH
47044: LD_INT 1
47046: EQUAL
47047: AND
47048: OR
47049: PUSH
47050: LD_VAR 0 1
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: IN
47065: NOT
47066: PUSH
47067: LD_VAR 0 6
47071: PUSH
47072: LD_INT 2
47074: EQUAL
47075: AND
47076: OR
47077: IFFALSE 47087
// mode = 0 ;
47079: LD_ADDR_VAR 0 6
47083: PUSH
47084: LD_INT 0
47086: ST_TO_ADDR
// case mode of 0 :
47087: LD_VAR 0 6
47091: PUSH
47092: LD_INT 0
47094: DOUBLE
47095: EQUAL
47096: IFTRUE 47100
47098: GO 58553
47100: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47101: LD_ADDR_VAR 0 11
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: LD_INT 2
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 3
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 3
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47294: LD_ADDR_VAR 0 12
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 3
47451: NEG
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 3
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47490: LD_ADDR_VAR 0 13
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: LD_INT 2
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 3
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 3
47649: NEG
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 3
47661: NEG
47662: PUSH
47663: LD_INT 3
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47689: LD_ADDR_VAR 0 14
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 3
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 3
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47885: LD_ADDR_VAR 0 15
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 3
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 3
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48078: LD_ADDR_VAR 0 16
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: NEG
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 3
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 3
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: LD_INT 3
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48271: LD_ADDR_VAR 0 17
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48501: LD_ADDR_VAR 0 18
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48731: LD_ADDR_VAR 0 19
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: LD_INT 2
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: NEG
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: LD_INT 2
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48961: LD_ADDR_VAR 0 20
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: NEG
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: LD_INT 2
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: NEG
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49191: LD_ADDR_VAR 0 21
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 2
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49421: LD_ADDR_VAR 0 22
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49651: LD_ADDR_VAR 0 23
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: LD_INT 3
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49931: LD_ADDR_VAR 0 24
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50207: LD_ADDR_VAR 0 25
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 2
50383: NEG
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 3
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 3
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: LD_INT 3
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 3
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50481: LD_ADDR_VAR 0 26
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 3
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50757: LD_ADDR_VAR 0 27
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: LD_INT 2
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: NEG
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 3
50990: NEG
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 3
51002: NEG
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51037: LD_ADDR_VAR 0 28
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: LD_INT 2
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 3
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 3
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 3
51272: NEG
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 3
51284: NEG
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51319: LD_ADDR_VAR 0 29
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: LD_INT 3
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 3
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 3
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 3
51563: NEG
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51598: LD_ADDR_VAR 0 30
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 3
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 3
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51876: LD_ADDR_VAR 0 31
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: LD_INT 3
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 3
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 3
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 3
52119: NEG
52120: PUSH
52121: LD_INT 2
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52154: LD_ADDR_VAR 0 32
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 2
52320: NEG
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: LD_INT 3
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 2
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 3
52397: NEG
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52432: LD_ADDR_VAR 0 33
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 2
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: NEG
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 3
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 3
52676: NEG
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52711: LD_ADDR_VAR 0 34
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 3
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52991: LD_ADDR_VAR 0 35
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53103: LD_ADDR_VAR 0 36
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53215: LD_ADDR_VAR 0 37
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53327: LD_ADDR_VAR 0 38
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53439: LD_ADDR_VAR 0 39
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53551: LD_ADDR_VAR 0 40
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53663: LD_ADDR_VAR 0 41
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 3
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 3
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 3
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 3
53906: PUSH
53907: LD_INT 3
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: LD_INT 3
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 3
53937: NEG
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 3
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 3
53972: NEG
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54013: LD_ADDR_VAR 0 42
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 2
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 2
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 2
54191: NEG
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: LD_INT 3
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: LD_INT 3
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 3
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 3
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 3
54259: PUSH
54260: LD_INT 3
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: LD_INT 3
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: LD_INT 3
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 3
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 3
54310: NEG
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 3
54322: NEG
54323: PUSH
54324: LD_INT 3
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54363: LD_ADDR_VAR 0 43
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: LD_INT 2
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: LD_INT 3
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 3
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 3
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 3
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54711: LD_ADDR_VAR 0 44
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 3
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 3
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 3
54954: PUSH
54955: LD_INT 3
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: LD_INT 3
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 3
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: NEG
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 3
55020: NEG
55021: PUSH
55022: LD_INT 3
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55061: LD_ADDR_VAR 0 45
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: LD_INT 3
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: LD_INT 3
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 3
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 3
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: LD_INT 3
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 3
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 3
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: NEG
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 3
55370: NEG
55371: PUSH
55372: LD_INT 3
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55411: LD_ADDR_VAR 0 46
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 3
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 3
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 3
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 3
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 3
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 3
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 3
55707: NEG
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 3
55718: NEG
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55759: LD_ADDR_VAR 0 47
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 2
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55910: LD_ADDR_VAR 0 48
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56057: LD_ADDR_VAR 0 49
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 2
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56201: LD_ADDR_VAR 0 50
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 2
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56345: LD_ADDR_VAR 0 51
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56492: LD_ADDR_VAR 0 52
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 2
56607: NEG
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56643: LD_ADDR_VAR 0 53
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56873: LD_ADDR_VAR 0 54
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57103: LD_ADDR_VAR 0 55
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: LD_INT 2
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 2
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 2
57279: NEG
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57333: LD_ADDR_VAR 0 56
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: LD_INT 2
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 2
57509: NEG
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57563: LD_ADDR_VAR 0 57
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 2
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 2
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 2
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: NEG
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 2
57762: NEG
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57793: LD_ADDR_VAR 0 58
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: LD_INT 2
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 2
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58023: LD_ADDR_VAR 0 59
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: LD_INT 1
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58111: LD_ADDR_VAR 0 60
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58199: LD_ADDR_VAR 0 61
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58287: LD_ADDR_VAR 0 62
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58375: LD_ADDR_VAR 0 63
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58463: LD_ADDR_VAR 0 64
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// end ; 1 :
58551: GO 64448
58553: LD_INT 1
58555: DOUBLE
58556: EQUAL
58557: IFTRUE 58561
58559: GO 61184
58561: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58562: LD_ADDR_VAR 0 11
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: LIST
58605: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58606: LD_ADDR_VAR 0 12
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 3
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 3
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: LIST
58646: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58647: LD_ADDR_VAR 0 13
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: LD_INT 3
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: LD_INT 3
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58687: LD_ADDR_VAR 0 14
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 3
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 3
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: LIST
58727: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58728: LD_ADDR_VAR 0 15
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 3
58757: NEG
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58772: LD_ADDR_VAR 0 16
58776: PUSH
58777: LD_INT 2
58779: NEG
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: NEG
58792: PUSH
58793: LD_INT 2
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 3
58803: NEG
58804: PUSH
58805: LD_INT 3
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: LIST
58817: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58818: LD_ADDR_VAR 0 17
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: LD_INT 3
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: LD_INT 3
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: LIST
58861: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58862: LD_ADDR_VAR 0 18
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: LIST
58902: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58903: LD_ADDR_VAR 0 19
58907: PUSH
58908: LD_INT 3
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: LIST
58942: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58943: LD_ADDR_VAR 0 20
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 3
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58984: LD_ADDR_VAR 0 21
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 3
59013: NEG
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: LIST
59027: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59028: LD_ADDR_VAR 0 22
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: LD_INT 3
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 3
59047: NEG
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 3
59059: NEG
59060: PUSH
59061: LD_INT 3
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: LIST
59073: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59074: LD_ADDR_VAR 0 23
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: LD_INT 3
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: LD_INT 4
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 3
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: LIST
59117: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59118: LD_ADDR_VAR 0 24
59122: PUSH
59123: LD_INT 3
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 3
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 4
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59159: LD_ADDR_VAR 0 25
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 4
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: LD_INT 4
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: LIST
59198: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59199: LD_ADDR_VAR 0 26
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 3
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: LD_INT 4
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: LIST
59239: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59240: LD_ADDR_VAR 0 27
59244: PUSH
59245: LD_INT 3
59247: NEG
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 4
59269: NEG
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59284: LD_ADDR_VAR 0 28
59288: PUSH
59289: LD_INT 3
59291: NEG
59292: PUSH
59293: LD_INT 3
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 3
59303: NEG
59304: PUSH
59305: LD_INT 4
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 4
59315: NEG
59316: PUSH
59317: LD_INT 3
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: LIST
59329: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59330: LD_ADDR_VAR 0 29
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: LD_INT 3
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: LD_INT 3
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: LD_INT 4
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 4
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 3
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: LD_INT 5
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 5
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 4
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: LD_INT 6
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 6
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 5
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59485: LD_ADDR_VAR 0 30
59489: PUSH
59490: LD_INT 2
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 3
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 3
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 3
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 4
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 4
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 4
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 5
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 5
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 5
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 6
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 6
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59628: LD_ADDR_VAR 0 31
59632: PUSH
59633: LD_INT 3
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 3
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 4
59665: PUSH
59666: LD_INT 3
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 3
59685: PUSH
59686: LD_INT 4
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 5
59695: PUSH
59696: LD_INT 4
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 5
59705: PUSH
59706: LD_INT 5
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 4
59715: PUSH
59716: LD_INT 5
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 6
59725: PUSH
59726: LD_INT 5
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 6
59735: PUSH
59736: LD_INT 6
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 5
59745: PUSH
59746: LD_INT 6
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59767: LD_ADDR_VAR 0 32
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 3
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 3
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 4
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: LD_INT 4
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: LD_INT 3
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: LD_INT 5
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: LD_INT 5
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: LD_INT 4
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: LD_INT 6
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 6
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: LD_INT 5
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59910: LD_ADDR_VAR 0 33
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: NEG
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 3
59939: NEG
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 3
59951: NEG
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 4
59962: NEG
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 4
59973: NEG
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 4
59985: NEG
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 5
59996: NEG
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 5
60007: NEG
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 5
60019: NEG
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 6
60030: NEG
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 6
60041: NEG
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60065: LD_ADDR_VAR 0 34
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: LD_INT 3
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 3
60084: NEG
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 3
60096: NEG
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 3
60108: NEG
60109: PUSH
60110: LD_INT 4
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 4
60120: NEG
60121: PUSH
60122: LD_INT 3
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 4
60132: NEG
60133: PUSH
60134: LD_INT 4
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 4
60144: NEG
60145: PUSH
60146: LD_INT 5
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 5
60156: NEG
60157: PUSH
60158: LD_INT 4
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 5
60168: NEG
60169: PUSH
60170: LD_INT 5
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 5
60180: NEG
60181: PUSH
60182: LD_INT 6
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 6
60192: NEG
60193: PUSH
60194: LD_INT 5
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 6
60204: NEG
60205: PUSH
60206: LD_INT 6
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60228: LD_ADDR_VAR 0 41
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: LD_INT 2
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: LD_INT 3
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: LIST
60271: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60272: LD_ADDR_VAR 0 42
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: LIST
60312: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60313: LD_ADDR_VAR 0 43
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: LD_INT 2
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 3
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60353: LD_ADDR_VAR 0 44
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: LD_INT 2
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: LD_INT 3
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 1
60380: NEG
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: LIST
60393: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60394: LD_ADDR_VAR 0 45
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: LIST
60437: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60438: LD_ADDR_VAR 0 46
60442: PUSH
60443: LD_INT 2
60445: NEG
60446: PUSH
60447: LD_INT 2
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 2
60457: NEG
60458: PUSH
60459: LD_INT 3
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: NEG
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: LIST
60483: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60484: LD_ADDR_VAR 0 47
60488: PUSH
60489: LD_INT 2
60491: NEG
60492: PUSH
60493: LD_INT 3
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: LD_INT 3
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60517: LD_ADDR_VAR 0 48
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: LD_INT 2
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60548: LD_ADDR_VAR 0 49
60552: PUSH
60553: LD_INT 3
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 3
60565: PUSH
60566: LD_INT 2
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60577: LD_ADDR_VAR 0 50
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: LD_INT 3
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 3
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60606: LD_ADDR_VAR 0 51
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60637: LD_ADDR_VAR 0 52
60641: PUSH
60642: LD_INT 3
60644: NEG
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 3
60656: NEG
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60670: LD_ADDR_VAR 0 53
60674: PUSH
60675: LD_INT 1
60677: NEG
60678: PUSH
60679: LD_INT 3
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: LD_INT 3
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60714: LD_ADDR_VAR 0 54
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: LIST
60754: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60755: LD_ADDR_VAR 0 55
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 3
60772: PUSH
60773: LD_INT 3
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: LD_INT 3
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: LIST
60794: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60795: LD_ADDR_VAR 0 56
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: LD_INT 3
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: LD_INT 3
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: LD_INT 2
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60836: LD_ADDR_VAR 0 57
60840: PUSH
60841: LD_INT 2
60843: NEG
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: NEG
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: LIST
60879: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60880: LD_ADDR_VAR 0 58
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: LD_INT 3
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 3
60899: NEG
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 3
60911: NEG
60912: PUSH
60913: LD_INT 3
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: LIST
60925: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60926: LD_ADDR_VAR 0 59
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: LD_INT 2
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: LIST
60969: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60970: LD_ADDR_VAR 0 60
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 2
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61011: LD_ADDR_VAR 0 61
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: LD_INT 2
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: LD_INT 2
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: LIST
61050: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61051: LD_ADDR_VAR 0 62
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: LIST
61091: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61092: LD_ADDR_VAR 0 63
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: NEG
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: LIST
61135: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61136: LD_ADDR_VAR 0 64
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: LD_INT 2
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 2
61155: NEG
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: NEG
61168: PUSH
61169: LD_INT 2
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: LIST
61181: ST_TO_ADDR
// end ; 2 :
61182: GO 64448
61184: LD_INT 2
61186: DOUBLE
61187: EQUAL
61188: IFTRUE 61192
61190: GO 64447
61192: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61193: LD_ADDR_VAR 0 29
61197: PUSH
61198: LD_INT 4
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 4
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 5
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 5
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 4
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 3
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 3
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 3
61272: PUSH
61273: LD_INT 2
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 5
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 3
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 4
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 4
61323: PUSH
61324: LD_INT 4
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: LD_INT 4
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 2
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 4
61363: PUSH
61364: LD_INT 2
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: LD_INT 4
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 4
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: LD_INT 3
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: LD_INT 4
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: LD_INT 5
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: LD_INT 5
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: LD_INT 4
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 1
61444: NEG
61445: PUSH
61446: LD_INT 3
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: LD_INT 5
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 3
61476: NEG
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 3
61487: NEG
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 2
61499: NEG
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 2
61510: NEG
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 3
61521: NEG
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 4
61532: NEG
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 4
61543: NEG
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 4
61555: NEG
61556: PUSH
61557: LD_INT 2
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 2
61567: NEG
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 4
61578: NEG
61579: PUSH
61580: LD_INT 4
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 4
61590: NEG
61591: PUSH
61592: LD_INT 5
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 3
61602: NEG
61603: PUSH
61604: LD_INT 4
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 3
61614: NEG
61615: PUSH
61616: LD_INT 3
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 4
61626: NEG
61627: PUSH
61628: LD_INT 3
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 5
61638: NEG
61639: PUSH
61640: LD_INT 4
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 5
61650: NEG
61651: PUSH
61652: LD_INT 5
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: NEG
61663: PUSH
61664: LD_INT 5
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 5
61674: NEG
61675: PUSH
61676: LD_INT 3
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61731: LD_ADDR_VAR 0 30
61735: PUSH
61736: LD_INT 4
61738: PUSH
61739: LD_INT 4
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 4
61748: PUSH
61749: LD_INT 3
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 5
61758: PUSH
61759: LD_INT 4
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 5
61768: PUSH
61769: LD_INT 5
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 4
61778: PUSH
61779: LD_INT 5
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 3
61788: PUSH
61789: LD_INT 4
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 3
61798: PUSH
61799: LD_INT 3
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 5
61808: PUSH
61809: LD_INT 3
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 3
61818: PUSH
61819: LD_INT 5
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: LD_INT 3
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: LD_INT 3
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: LD_INT 4
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: LD_INT 4
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: LD_INT 3
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: LD_INT 2
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: LD_INT 4
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 2
61910: NEG
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 4
61921: NEG
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 4
61932: NEG
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 3
61944: NEG
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 3
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 4
61966: NEG
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 5
61977: NEG
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 5
61988: NEG
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 5
62000: NEG
62001: PUSH
62002: LD_INT 2
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 3
62012: NEG
62013: PUSH
62014: LD_INT 2
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: LD_INT 3
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 3
62035: NEG
62036: PUSH
62037: LD_INT 4
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: LD_INT 3
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 2
62059: NEG
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 3
62071: NEG
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 4
62083: NEG
62084: PUSH
62085: LD_INT 3
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 4
62095: NEG
62096: PUSH
62097: LD_INT 4
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 2
62107: NEG
62108: PUSH
62109: LD_INT 4
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 4
62119: NEG
62120: PUSH
62121: LD_INT 2
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: LD_INT 4
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 5
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 4
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: LD_INT 3
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: NEG
62187: PUSH
62188: LD_INT 4
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: LD_INT 5
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 2
62210: PUSH
62211: LD_INT 3
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: LD_INT 5
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62278: LD_ADDR_VAR 0 31
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 4
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: LD_INT 3
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: LD_INT 4
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: LD_INT 5
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: LD_INT 5
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: LD_INT 4
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 3
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: LD_INT 5
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 2
62367: NEG
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 3
62378: NEG
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 3
62389: NEG
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 2
62401: NEG
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 2
62412: NEG
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 3
62423: NEG
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 4
62434: NEG
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 4
62445: NEG
62446: PUSH
62447: LD_INT 1
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 4
62457: NEG
62458: PUSH
62459: LD_INT 2
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: LD_INT 2
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 4
62480: NEG
62481: PUSH
62482: LD_INT 4
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 4
62492: NEG
62493: PUSH
62494: LD_INT 5
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 3
62504: NEG
62505: PUSH
62506: LD_INT 4
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 3
62516: NEG
62517: PUSH
62518: LD_INT 3
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 4
62528: NEG
62529: PUSH
62530: LD_INT 3
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 5
62540: NEG
62541: PUSH
62542: LD_INT 4
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 5
62552: NEG
62553: PUSH
62554: LD_INT 5
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 3
62564: NEG
62565: PUSH
62566: LD_INT 5
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 5
62576: NEG
62577: PUSH
62578: LD_INT 3
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: LD_INT 3
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: LD_INT 4
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: LD_INT 3
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: LD_INT 2
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: LD_INT 2
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: LD_INT 3
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: LD_INT 4
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 2
62667: PUSH
62668: LD_INT 2
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 2
62678: NEG
62679: PUSH
62680: LD_INT 4
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 4
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 4
62700: PUSH
62701: LD_INT 1
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 5
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 5
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 4
62731: PUSH
62732: LD_INT 1
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 3
62741: PUSH
62742: LD_INT 0
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 3
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 3
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 5
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62828: LD_ADDR_VAR 0 32
62832: PUSH
62833: LD_INT 4
62835: NEG
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 4
62846: NEG
62847: PUSH
62848: LD_INT 1
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 3
62858: NEG
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 3
62869: NEG
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 4
62880: NEG
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 5
62891: NEG
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 5
62902: NEG
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 5
62914: NEG
62915: PUSH
62916: LD_INT 2
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 3
62926: NEG
62927: PUSH
62928: LD_INT 2
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 3
62937: NEG
62938: PUSH
62939: LD_INT 3
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 3
62949: NEG
62950: PUSH
62951: LD_INT 4
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 2
62961: NEG
62962: PUSH
62963: LD_INT 3
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: LD_INT 2
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 3
62985: NEG
62986: PUSH
62987: LD_INT 2
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 4
62997: NEG
62998: PUSH
62999: LD_INT 3
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 4
63009: NEG
63010: PUSH
63011: LD_INT 4
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 2
63021: NEG
63022: PUSH
63023: LD_INT 4
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 4
63033: NEG
63034: PUSH
63035: LD_INT 2
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: LD_INT 4
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: LD_INT 5
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: LD_INT 4
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: LD_INT 3
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: LD_INT 3
63092: NEG
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: LD_INT 4
63104: NEG
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: PUSH
63114: LD_INT 5
63116: NEG
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 2
63124: PUSH
63125: LD_INT 3
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 2
63135: NEG
63136: PUSH
63137: LD_INT 5
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 3
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 3
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 4
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 4
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 3
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 2
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 4
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 4
63240: PUSH
63241: LD_INT 4
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 4
63250: PUSH
63251: LD_INT 3
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 5
63260: PUSH
63261: LD_INT 4
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 5
63270: PUSH
63271: LD_INT 5
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 4
63280: PUSH
63281: LD_INT 5
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 3
63290: PUSH
63291: LD_INT 4
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 3
63300: PUSH
63301: LD_INT 3
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 5
63310: PUSH
63311: LD_INT 3
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 3
63320: PUSH
63321: LD_INT 5
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63375: LD_ADDR_VAR 0 33
63379: PUSH
63380: LD_INT 4
63382: NEG
63383: PUSH
63384: LD_INT 4
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 4
63394: NEG
63395: PUSH
63396: LD_INT 5
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 3
63406: NEG
63407: PUSH
63408: LD_INT 4
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 3
63418: NEG
63419: PUSH
63420: LD_INT 3
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 4
63430: NEG
63431: PUSH
63432: LD_INT 3
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 5
63442: NEG
63443: PUSH
63444: LD_INT 4
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 5
63454: NEG
63455: PUSH
63456: LD_INT 5
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 3
63466: NEG
63467: PUSH
63468: LD_INT 5
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 5
63478: NEG
63479: PUSH
63480: LD_INT 3
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: LD_INT 3
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: LD_INT 4
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: LD_INT 3
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 1
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 2
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 1
63545: NEG
63546: PUSH
63547: LD_INT 3
63549: NEG
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 1
63557: NEG
63558: PUSH
63559: LD_INT 4
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 2
63569: PUSH
63570: LD_INT 2
63572: NEG
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 2
63580: NEG
63581: PUSH
63582: LD_INT 4
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 4
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 4
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 5
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 5
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 4
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 3
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 3
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 3
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 5
63675: PUSH
63676: LD_INT 2
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 3
63685: PUSH
63686: LD_INT 3
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 3
63695: PUSH
63696: LD_INT 2
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 4
63705: PUSH
63706: LD_INT 3
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 4
63715: PUSH
63716: LD_INT 4
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 3
63725: PUSH
63726: LD_INT 4
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: PUSH
63736: LD_INT 3
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 2
63745: PUSH
63746: LD_INT 2
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 4
63755: PUSH
63756: LD_INT 2
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 2
63765: PUSH
63766: LD_INT 4
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_INT 4
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: LD_INT 3
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: LD_INT 4
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: LD_INT 5
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 5
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: LD_INT 4
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 1
63836: NEG
63837: PUSH
63838: LD_INT 3
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: LD_INT 5
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 2
63857: NEG
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63913: LD_ADDR_VAR 0 34
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 4
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: LD_INT 5
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: LD_INT 4
63945: NEG
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 1
63953: PUSH
63954: LD_INT 3
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: LD_INT 3
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: LD_INT 4
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: LD_INT 5
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: LD_INT 3
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 2
64010: NEG
64011: PUSH
64012: LD_INT 5
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 3
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 3
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 4
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 4
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 3
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 2
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 2
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 4
64105: PUSH
64106: LD_INT 2
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 4
64115: PUSH
64116: LD_INT 4
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 4
64125: PUSH
64126: LD_INT 3
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 5
64135: PUSH
64136: LD_INT 4
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 5
64145: PUSH
64146: LD_INT 5
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 4
64155: PUSH
64156: LD_INT 5
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 3
64165: PUSH
64166: LD_INT 4
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 3
64175: PUSH
64176: LD_INT 3
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 5
64185: PUSH
64186: LD_INT 3
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 3
64195: PUSH
64196: LD_INT 5
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: LD_INT 3
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: LD_INT 2
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: LD_INT 3
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: LD_INT 4
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: LD_INT 4
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: LD_INT 3
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 1
64266: NEG
64267: PUSH
64268: LD_INT 2
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 2
64277: PUSH
64278: LD_INT 4
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 4
64298: NEG
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 4
64309: NEG
64310: PUSH
64311: LD_INT 1
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 3
64321: NEG
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 3
64332: NEG
64333: PUSH
64334: LD_INT 1
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 4
64343: NEG
64344: PUSH
64345: LD_INT 1
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 5
64354: NEG
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 5
64365: NEG
64366: PUSH
64367: LD_INT 1
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 5
64377: NEG
64378: PUSH
64379: LD_INT 2
64381: NEG
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 3
64389: NEG
64390: PUSH
64391: LD_INT 2
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: ST_TO_ADDR
// end ; end ;
64445: GO 64448
64447: POP
// case btype of b_depot , b_warehouse :
64448: LD_VAR 0 1
64452: PUSH
64453: LD_INT 0
64455: DOUBLE
64456: EQUAL
64457: IFTRUE 64467
64459: LD_INT 1
64461: DOUBLE
64462: EQUAL
64463: IFTRUE 64467
64465: GO 64668
64467: POP
// case nation of nation_american :
64468: LD_VAR 0 5
64472: PUSH
64473: LD_INT 1
64475: DOUBLE
64476: EQUAL
64477: IFTRUE 64481
64479: GO 64537
64481: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64482: LD_ADDR_VAR 0 9
64486: PUSH
64487: LD_VAR 0 11
64491: PUSH
64492: LD_VAR 0 12
64496: PUSH
64497: LD_VAR 0 13
64501: PUSH
64502: LD_VAR 0 14
64506: PUSH
64507: LD_VAR 0 15
64511: PUSH
64512: LD_VAR 0 16
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: PUSH
64525: LD_VAR 0 4
64529: PUSH
64530: LD_INT 1
64532: PLUS
64533: ARRAY
64534: ST_TO_ADDR
64535: GO 64666
64537: LD_INT 2
64539: DOUBLE
64540: EQUAL
64541: IFTRUE 64545
64543: GO 64601
64545: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64546: LD_ADDR_VAR 0 9
64550: PUSH
64551: LD_VAR 0 17
64555: PUSH
64556: LD_VAR 0 18
64560: PUSH
64561: LD_VAR 0 19
64565: PUSH
64566: LD_VAR 0 20
64570: PUSH
64571: LD_VAR 0 21
64575: PUSH
64576: LD_VAR 0 22
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: PUSH
64589: LD_VAR 0 4
64593: PUSH
64594: LD_INT 1
64596: PLUS
64597: ARRAY
64598: ST_TO_ADDR
64599: GO 64666
64601: LD_INT 3
64603: DOUBLE
64604: EQUAL
64605: IFTRUE 64609
64607: GO 64665
64609: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64610: LD_ADDR_VAR 0 9
64614: PUSH
64615: LD_VAR 0 23
64619: PUSH
64620: LD_VAR 0 24
64624: PUSH
64625: LD_VAR 0 25
64629: PUSH
64630: LD_VAR 0 26
64634: PUSH
64635: LD_VAR 0 27
64639: PUSH
64640: LD_VAR 0 28
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: PUSH
64653: LD_VAR 0 4
64657: PUSH
64658: LD_INT 1
64660: PLUS
64661: ARRAY
64662: ST_TO_ADDR
64663: GO 64666
64665: POP
64666: GO 65221
64668: LD_INT 2
64670: DOUBLE
64671: EQUAL
64672: IFTRUE 64682
64674: LD_INT 3
64676: DOUBLE
64677: EQUAL
64678: IFTRUE 64682
64680: GO 64738
64682: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64683: LD_ADDR_VAR 0 9
64687: PUSH
64688: LD_VAR 0 29
64692: PUSH
64693: LD_VAR 0 30
64697: PUSH
64698: LD_VAR 0 31
64702: PUSH
64703: LD_VAR 0 32
64707: PUSH
64708: LD_VAR 0 33
64712: PUSH
64713: LD_VAR 0 34
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: PUSH
64726: LD_VAR 0 4
64730: PUSH
64731: LD_INT 1
64733: PLUS
64734: ARRAY
64735: ST_TO_ADDR
64736: GO 65221
64738: LD_INT 16
64740: DOUBLE
64741: EQUAL
64742: IFTRUE 64800
64744: LD_INT 17
64746: DOUBLE
64747: EQUAL
64748: IFTRUE 64800
64750: LD_INT 18
64752: DOUBLE
64753: EQUAL
64754: IFTRUE 64800
64756: LD_INT 19
64758: DOUBLE
64759: EQUAL
64760: IFTRUE 64800
64762: LD_INT 22
64764: DOUBLE
64765: EQUAL
64766: IFTRUE 64800
64768: LD_INT 20
64770: DOUBLE
64771: EQUAL
64772: IFTRUE 64800
64774: LD_INT 21
64776: DOUBLE
64777: EQUAL
64778: IFTRUE 64800
64780: LD_INT 23
64782: DOUBLE
64783: EQUAL
64784: IFTRUE 64800
64786: LD_INT 24
64788: DOUBLE
64789: EQUAL
64790: IFTRUE 64800
64792: LD_INT 25
64794: DOUBLE
64795: EQUAL
64796: IFTRUE 64800
64798: GO 64856
64800: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64801: LD_ADDR_VAR 0 9
64805: PUSH
64806: LD_VAR 0 35
64810: PUSH
64811: LD_VAR 0 36
64815: PUSH
64816: LD_VAR 0 37
64820: PUSH
64821: LD_VAR 0 38
64825: PUSH
64826: LD_VAR 0 39
64830: PUSH
64831: LD_VAR 0 40
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: PUSH
64844: LD_VAR 0 4
64848: PUSH
64849: LD_INT 1
64851: PLUS
64852: ARRAY
64853: ST_TO_ADDR
64854: GO 65221
64856: LD_INT 6
64858: DOUBLE
64859: EQUAL
64860: IFTRUE 64912
64862: LD_INT 7
64864: DOUBLE
64865: EQUAL
64866: IFTRUE 64912
64868: LD_INT 8
64870: DOUBLE
64871: EQUAL
64872: IFTRUE 64912
64874: LD_INT 13
64876: DOUBLE
64877: EQUAL
64878: IFTRUE 64912
64880: LD_INT 12
64882: DOUBLE
64883: EQUAL
64884: IFTRUE 64912
64886: LD_INT 15
64888: DOUBLE
64889: EQUAL
64890: IFTRUE 64912
64892: LD_INT 11
64894: DOUBLE
64895: EQUAL
64896: IFTRUE 64912
64898: LD_INT 14
64900: DOUBLE
64901: EQUAL
64902: IFTRUE 64912
64904: LD_INT 10
64906: DOUBLE
64907: EQUAL
64908: IFTRUE 64912
64910: GO 64968
64912: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64913: LD_ADDR_VAR 0 9
64917: PUSH
64918: LD_VAR 0 41
64922: PUSH
64923: LD_VAR 0 42
64927: PUSH
64928: LD_VAR 0 43
64932: PUSH
64933: LD_VAR 0 44
64937: PUSH
64938: LD_VAR 0 45
64942: PUSH
64943: LD_VAR 0 46
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: PUSH
64956: LD_VAR 0 4
64960: PUSH
64961: LD_INT 1
64963: PLUS
64964: ARRAY
64965: ST_TO_ADDR
64966: GO 65221
64968: LD_INT 36
64970: DOUBLE
64971: EQUAL
64972: IFTRUE 64976
64974: GO 65032
64976: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64977: LD_ADDR_VAR 0 9
64981: PUSH
64982: LD_VAR 0 47
64986: PUSH
64987: LD_VAR 0 48
64991: PUSH
64992: LD_VAR 0 49
64996: PUSH
64997: LD_VAR 0 50
65001: PUSH
65002: LD_VAR 0 51
65006: PUSH
65007: LD_VAR 0 52
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: PUSH
65020: LD_VAR 0 4
65024: PUSH
65025: LD_INT 1
65027: PLUS
65028: ARRAY
65029: ST_TO_ADDR
65030: GO 65221
65032: LD_INT 4
65034: DOUBLE
65035: EQUAL
65036: IFTRUE 65058
65038: LD_INT 5
65040: DOUBLE
65041: EQUAL
65042: IFTRUE 65058
65044: LD_INT 34
65046: DOUBLE
65047: EQUAL
65048: IFTRUE 65058
65050: LD_INT 37
65052: DOUBLE
65053: EQUAL
65054: IFTRUE 65058
65056: GO 65114
65058: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65059: LD_ADDR_VAR 0 9
65063: PUSH
65064: LD_VAR 0 53
65068: PUSH
65069: LD_VAR 0 54
65073: PUSH
65074: LD_VAR 0 55
65078: PUSH
65079: LD_VAR 0 56
65083: PUSH
65084: LD_VAR 0 57
65088: PUSH
65089: LD_VAR 0 58
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: PUSH
65102: LD_VAR 0 4
65106: PUSH
65107: LD_INT 1
65109: PLUS
65110: ARRAY
65111: ST_TO_ADDR
65112: GO 65221
65114: LD_INT 31
65116: DOUBLE
65117: EQUAL
65118: IFTRUE 65164
65120: LD_INT 32
65122: DOUBLE
65123: EQUAL
65124: IFTRUE 65164
65126: LD_INT 33
65128: DOUBLE
65129: EQUAL
65130: IFTRUE 65164
65132: LD_INT 27
65134: DOUBLE
65135: EQUAL
65136: IFTRUE 65164
65138: LD_INT 26
65140: DOUBLE
65141: EQUAL
65142: IFTRUE 65164
65144: LD_INT 28
65146: DOUBLE
65147: EQUAL
65148: IFTRUE 65164
65150: LD_INT 29
65152: DOUBLE
65153: EQUAL
65154: IFTRUE 65164
65156: LD_INT 30
65158: DOUBLE
65159: EQUAL
65160: IFTRUE 65164
65162: GO 65220
65164: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65165: LD_ADDR_VAR 0 9
65169: PUSH
65170: LD_VAR 0 59
65174: PUSH
65175: LD_VAR 0 60
65179: PUSH
65180: LD_VAR 0 61
65184: PUSH
65185: LD_VAR 0 62
65189: PUSH
65190: LD_VAR 0 63
65194: PUSH
65195: LD_VAR 0 64
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: PUSH
65208: LD_VAR 0 4
65212: PUSH
65213: LD_INT 1
65215: PLUS
65216: ARRAY
65217: ST_TO_ADDR
65218: GO 65221
65220: POP
// temp_list2 = [ ] ;
65221: LD_ADDR_VAR 0 10
65225: PUSH
65226: EMPTY
65227: ST_TO_ADDR
// for i in temp_list do
65228: LD_ADDR_VAR 0 8
65232: PUSH
65233: LD_VAR 0 9
65237: PUSH
65238: FOR_IN
65239: IFFALSE 65291
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65241: LD_ADDR_VAR 0 10
65245: PUSH
65246: LD_VAR 0 10
65250: PUSH
65251: LD_VAR 0 8
65255: PUSH
65256: LD_INT 1
65258: ARRAY
65259: PUSH
65260: LD_VAR 0 2
65264: PLUS
65265: PUSH
65266: LD_VAR 0 8
65270: PUSH
65271: LD_INT 2
65273: ARRAY
65274: PUSH
65275: LD_VAR 0 3
65279: PLUS
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: EMPTY
65286: LIST
65287: ADD
65288: ST_TO_ADDR
65289: GO 65238
65291: POP
65292: POP
// result = temp_list2 ;
65293: LD_ADDR_VAR 0 7
65297: PUSH
65298: LD_VAR 0 10
65302: ST_TO_ADDR
// end ;
65303: LD_VAR 0 7
65307: RET
// export function EnemyInRange ( unit , dist ) ; begin
65308: LD_INT 0
65310: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65311: LD_ADDR_VAR 0 3
65315: PUSH
65316: LD_VAR 0 1
65320: PPUSH
65321: CALL_OW 255
65325: PPUSH
65326: LD_VAR 0 1
65330: PPUSH
65331: CALL_OW 250
65335: PPUSH
65336: LD_VAR 0 1
65340: PPUSH
65341: CALL_OW 251
65345: PPUSH
65346: LD_VAR 0 2
65350: PPUSH
65351: CALL 39079 0 4
65355: PUSH
65356: LD_INT 4
65358: ARRAY
65359: ST_TO_ADDR
// end ;
65360: LD_VAR 0 3
65364: RET
// export function PlayerSeeMe ( unit ) ; begin
65365: LD_INT 0
65367: PPUSH
// result := See ( your_side , unit ) ;
65368: LD_ADDR_VAR 0 2
65372: PUSH
65373: LD_OWVAR 2
65377: PPUSH
65378: LD_VAR 0 1
65382: PPUSH
65383: CALL_OW 292
65387: ST_TO_ADDR
// end ;
65388: LD_VAR 0 2
65392: RET
// export function ReverseDir ( unit ) ; begin
65393: LD_INT 0
65395: PPUSH
// if not unit then
65396: LD_VAR 0 1
65400: NOT
65401: IFFALSE 65405
// exit ;
65403: GO 65428
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65405: LD_ADDR_VAR 0 2
65409: PUSH
65410: LD_VAR 0 1
65414: PPUSH
65415: CALL_OW 254
65419: PUSH
65420: LD_INT 3
65422: PLUS
65423: PUSH
65424: LD_INT 6
65426: MOD
65427: ST_TO_ADDR
// end ;
65428: LD_VAR 0 2
65432: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65433: LD_INT 0
65435: PPUSH
65436: PPUSH
65437: PPUSH
65438: PPUSH
65439: PPUSH
// if not hexes then
65440: LD_VAR 0 2
65444: NOT
65445: IFFALSE 65449
// exit ;
65447: GO 65597
// dist := 9999 ;
65449: LD_ADDR_VAR 0 5
65453: PUSH
65454: LD_INT 9999
65456: ST_TO_ADDR
// for i = 1 to hexes do
65457: LD_ADDR_VAR 0 4
65461: PUSH
65462: DOUBLE
65463: LD_INT 1
65465: DEC
65466: ST_TO_ADDR
65467: LD_VAR 0 2
65471: PUSH
65472: FOR_TO
65473: IFFALSE 65585
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65475: LD_VAR 0 1
65479: PPUSH
65480: LD_VAR 0 2
65484: PUSH
65485: LD_VAR 0 4
65489: ARRAY
65490: PUSH
65491: LD_INT 1
65493: ARRAY
65494: PPUSH
65495: LD_VAR 0 2
65499: PUSH
65500: LD_VAR 0 4
65504: ARRAY
65505: PUSH
65506: LD_INT 2
65508: ARRAY
65509: PPUSH
65510: CALL_OW 297
65514: PUSH
65515: LD_VAR 0 5
65519: LESS
65520: IFFALSE 65583
// begin hex := hexes [ i ] ;
65522: LD_ADDR_VAR 0 7
65526: PUSH
65527: LD_VAR 0 2
65531: PUSH
65532: LD_VAR 0 4
65536: ARRAY
65537: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65538: LD_ADDR_VAR 0 5
65542: PUSH
65543: LD_VAR 0 1
65547: PPUSH
65548: LD_VAR 0 2
65552: PUSH
65553: LD_VAR 0 4
65557: ARRAY
65558: PUSH
65559: LD_INT 1
65561: ARRAY
65562: PPUSH
65563: LD_VAR 0 2
65567: PUSH
65568: LD_VAR 0 4
65572: ARRAY
65573: PUSH
65574: LD_INT 2
65576: ARRAY
65577: PPUSH
65578: CALL_OW 297
65582: ST_TO_ADDR
// end ; end ;
65583: GO 65472
65585: POP
65586: POP
// result := hex ;
65587: LD_ADDR_VAR 0 3
65591: PUSH
65592: LD_VAR 0 7
65596: ST_TO_ADDR
// end ;
65597: LD_VAR 0 3
65601: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65602: LD_INT 0
65604: PPUSH
65605: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65606: LD_VAR 0 1
65610: NOT
65611: PUSH
65612: LD_VAR 0 1
65616: PUSH
65617: LD_INT 21
65619: PUSH
65620: LD_INT 2
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 23
65629: PUSH
65630: LD_INT 2
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PPUSH
65641: CALL_OW 69
65645: IN
65646: NOT
65647: OR
65648: IFFALSE 65652
// exit ;
65650: GO 65699
// for i = 1 to 3 do
65652: LD_ADDR_VAR 0 3
65656: PUSH
65657: DOUBLE
65658: LD_INT 1
65660: DEC
65661: ST_TO_ADDR
65662: LD_INT 3
65664: PUSH
65665: FOR_TO
65666: IFFALSE 65697
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65668: LD_VAR 0 1
65672: PPUSH
65673: CALL_OW 250
65677: PPUSH
65678: LD_VAR 0 1
65682: PPUSH
65683: CALL_OW 251
65687: PPUSH
65688: LD_INT 1
65690: PPUSH
65691: CALL_OW 453
65695: GO 65665
65697: POP
65698: POP
// end ;
65699: LD_VAR 0 2
65703: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65704: LD_INT 0
65706: PPUSH
65707: PPUSH
65708: PPUSH
65709: PPUSH
65710: PPUSH
65711: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65712: LD_VAR 0 1
65716: NOT
65717: PUSH
65718: LD_VAR 0 2
65722: NOT
65723: OR
65724: PUSH
65725: LD_VAR 0 1
65729: PPUSH
65730: CALL_OW 314
65734: OR
65735: IFFALSE 65739
// exit ;
65737: GO 66180
// x := GetX ( enemy_unit ) ;
65739: LD_ADDR_VAR 0 7
65743: PUSH
65744: LD_VAR 0 2
65748: PPUSH
65749: CALL_OW 250
65753: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65754: LD_ADDR_VAR 0 8
65758: PUSH
65759: LD_VAR 0 2
65763: PPUSH
65764: CALL_OW 251
65768: ST_TO_ADDR
// if not x or not y then
65769: LD_VAR 0 7
65773: NOT
65774: PUSH
65775: LD_VAR 0 8
65779: NOT
65780: OR
65781: IFFALSE 65785
// exit ;
65783: GO 66180
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65785: LD_ADDR_VAR 0 6
65789: PUSH
65790: LD_VAR 0 7
65794: PPUSH
65795: LD_INT 0
65797: PPUSH
65798: LD_INT 4
65800: PPUSH
65801: CALL_OW 272
65805: PUSH
65806: LD_VAR 0 8
65810: PPUSH
65811: LD_INT 0
65813: PPUSH
65814: LD_INT 4
65816: PPUSH
65817: CALL_OW 273
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_VAR 0 7
65830: PPUSH
65831: LD_INT 1
65833: PPUSH
65834: LD_INT 4
65836: PPUSH
65837: CALL_OW 272
65841: PUSH
65842: LD_VAR 0 8
65846: PPUSH
65847: LD_INT 1
65849: PPUSH
65850: LD_INT 4
65852: PPUSH
65853: CALL_OW 273
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_VAR 0 7
65866: PPUSH
65867: LD_INT 2
65869: PPUSH
65870: LD_INT 4
65872: PPUSH
65873: CALL_OW 272
65877: PUSH
65878: LD_VAR 0 8
65882: PPUSH
65883: LD_INT 2
65885: PPUSH
65886: LD_INT 4
65888: PPUSH
65889: CALL_OW 273
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_VAR 0 7
65902: PPUSH
65903: LD_INT 3
65905: PPUSH
65906: LD_INT 4
65908: PPUSH
65909: CALL_OW 272
65913: PUSH
65914: LD_VAR 0 8
65918: PPUSH
65919: LD_INT 3
65921: PPUSH
65922: LD_INT 4
65924: PPUSH
65925: CALL_OW 273
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_VAR 0 7
65938: PPUSH
65939: LD_INT 4
65941: PPUSH
65942: LD_INT 4
65944: PPUSH
65945: CALL_OW 272
65949: PUSH
65950: LD_VAR 0 8
65954: PPUSH
65955: LD_INT 4
65957: PPUSH
65958: LD_INT 4
65960: PPUSH
65961: CALL_OW 273
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_VAR 0 7
65974: PPUSH
65975: LD_INT 5
65977: PPUSH
65978: LD_INT 4
65980: PPUSH
65981: CALL_OW 272
65985: PUSH
65986: LD_VAR 0 8
65990: PPUSH
65991: LD_INT 5
65993: PPUSH
65994: LD_INT 4
65996: PPUSH
65997: CALL_OW 273
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: ST_TO_ADDR
// for i = tmp downto 1 do
66014: LD_ADDR_VAR 0 4
66018: PUSH
66019: DOUBLE
66020: LD_VAR 0 6
66024: INC
66025: ST_TO_ADDR
66026: LD_INT 1
66028: PUSH
66029: FOR_DOWNTO
66030: IFFALSE 66131
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66032: LD_VAR 0 6
66036: PUSH
66037: LD_VAR 0 4
66041: ARRAY
66042: PUSH
66043: LD_INT 1
66045: ARRAY
66046: PPUSH
66047: LD_VAR 0 6
66051: PUSH
66052: LD_VAR 0 4
66056: ARRAY
66057: PUSH
66058: LD_INT 2
66060: ARRAY
66061: PPUSH
66062: CALL_OW 488
66066: NOT
66067: PUSH
66068: LD_VAR 0 6
66072: PUSH
66073: LD_VAR 0 4
66077: ARRAY
66078: PUSH
66079: LD_INT 1
66081: ARRAY
66082: PPUSH
66083: LD_VAR 0 6
66087: PUSH
66088: LD_VAR 0 4
66092: ARRAY
66093: PUSH
66094: LD_INT 2
66096: ARRAY
66097: PPUSH
66098: CALL_OW 428
66102: PUSH
66103: LD_INT 0
66105: NONEQUAL
66106: OR
66107: IFFALSE 66129
// tmp := Delete ( tmp , i ) ;
66109: LD_ADDR_VAR 0 6
66113: PUSH
66114: LD_VAR 0 6
66118: PPUSH
66119: LD_VAR 0 4
66123: PPUSH
66124: CALL_OW 3
66128: ST_TO_ADDR
66129: GO 66029
66131: POP
66132: POP
// j := GetClosestHex ( unit , tmp ) ;
66133: LD_ADDR_VAR 0 5
66137: PUSH
66138: LD_VAR 0 1
66142: PPUSH
66143: LD_VAR 0 6
66147: PPUSH
66148: CALL 65433 0 2
66152: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66153: LD_VAR 0 1
66157: PPUSH
66158: LD_VAR 0 5
66162: PUSH
66163: LD_INT 1
66165: ARRAY
66166: PPUSH
66167: LD_VAR 0 5
66171: PUSH
66172: LD_INT 2
66174: ARRAY
66175: PPUSH
66176: CALL_OW 111
// end ;
66180: LD_VAR 0 3
66184: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66185: LD_INT 0
66187: PPUSH
66188: PPUSH
66189: PPUSH
// uc_side = 0 ;
66190: LD_ADDR_OWVAR 20
66194: PUSH
66195: LD_INT 0
66197: ST_TO_ADDR
// uc_nation = 0 ;
66198: LD_ADDR_OWVAR 21
66202: PUSH
66203: LD_INT 0
66205: ST_TO_ADDR
// InitHc_All ( ) ;
66206: CALL_OW 584
// InitVc ;
66210: CALL_OW 20
// if mastodonts then
66214: LD_VAR 0 6
66218: IFFALSE 66285
// for i = 1 to mastodonts do
66220: LD_ADDR_VAR 0 11
66224: PUSH
66225: DOUBLE
66226: LD_INT 1
66228: DEC
66229: ST_TO_ADDR
66230: LD_VAR 0 6
66234: PUSH
66235: FOR_TO
66236: IFFALSE 66283
// begin vc_chassis := 31 ;
66238: LD_ADDR_OWVAR 37
66242: PUSH
66243: LD_INT 31
66245: ST_TO_ADDR
// vc_control := control_rider ;
66246: LD_ADDR_OWVAR 38
66250: PUSH
66251: LD_INT 4
66253: ST_TO_ADDR
// animal := CreateVehicle ;
66254: LD_ADDR_VAR 0 12
66258: PUSH
66259: CALL_OW 45
66263: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66264: LD_VAR 0 12
66268: PPUSH
66269: LD_VAR 0 8
66273: PPUSH
66274: LD_INT 0
66276: PPUSH
66277: CALL 68473 0 3
// end ;
66281: GO 66235
66283: POP
66284: POP
// if horses then
66285: LD_VAR 0 5
66289: IFFALSE 66356
// for i = 1 to horses do
66291: LD_ADDR_VAR 0 11
66295: PUSH
66296: DOUBLE
66297: LD_INT 1
66299: DEC
66300: ST_TO_ADDR
66301: LD_VAR 0 5
66305: PUSH
66306: FOR_TO
66307: IFFALSE 66354
// begin hc_class := 21 ;
66309: LD_ADDR_OWVAR 28
66313: PUSH
66314: LD_INT 21
66316: ST_TO_ADDR
// hc_gallery :=  ;
66317: LD_ADDR_OWVAR 33
66321: PUSH
66322: LD_STRING 
66324: ST_TO_ADDR
// animal := CreateHuman ;
66325: LD_ADDR_VAR 0 12
66329: PUSH
66330: CALL_OW 44
66334: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66335: LD_VAR 0 12
66339: PPUSH
66340: LD_VAR 0 8
66344: PPUSH
66345: LD_INT 0
66347: PPUSH
66348: CALL 68473 0 3
// end ;
66352: GO 66306
66354: POP
66355: POP
// if birds then
66356: LD_VAR 0 1
66360: IFFALSE 66427
// for i = 1 to birds do
66362: LD_ADDR_VAR 0 11
66366: PUSH
66367: DOUBLE
66368: LD_INT 1
66370: DEC
66371: ST_TO_ADDR
66372: LD_VAR 0 1
66376: PUSH
66377: FOR_TO
66378: IFFALSE 66425
// begin hc_class = 18 ;
66380: LD_ADDR_OWVAR 28
66384: PUSH
66385: LD_INT 18
66387: ST_TO_ADDR
// hc_gallery =  ;
66388: LD_ADDR_OWVAR 33
66392: PUSH
66393: LD_STRING 
66395: ST_TO_ADDR
// animal := CreateHuman ;
66396: LD_ADDR_VAR 0 12
66400: PUSH
66401: CALL_OW 44
66405: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66406: LD_VAR 0 12
66410: PPUSH
66411: LD_VAR 0 8
66415: PPUSH
66416: LD_INT 0
66418: PPUSH
66419: CALL 68473 0 3
// end ;
66423: GO 66377
66425: POP
66426: POP
// if tigers then
66427: LD_VAR 0 2
66431: IFFALSE 66515
// for i = 1 to tigers do
66433: LD_ADDR_VAR 0 11
66437: PUSH
66438: DOUBLE
66439: LD_INT 1
66441: DEC
66442: ST_TO_ADDR
66443: LD_VAR 0 2
66447: PUSH
66448: FOR_TO
66449: IFFALSE 66513
// begin hc_class = class_tiger ;
66451: LD_ADDR_OWVAR 28
66455: PUSH
66456: LD_INT 14
66458: ST_TO_ADDR
// hc_gallery =  ;
66459: LD_ADDR_OWVAR 33
66463: PUSH
66464: LD_STRING 
66466: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66467: LD_ADDR_OWVAR 35
66471: PUSH
66472: LD_INT 7
66474: NEG
66475: PPUSH
66476: LD_INT 7
66478: PPUSH
66479: CALL_OW 12
66483: ST_TO_ADDR
// animal := CreateHuman ;
66484: LD_ADDR_VAR 0 12
66488: PUSH
66489: CALL_OW 44
66493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66494: LD_VAR 0 12
66498: PPUSH
66499: LD_VAR 0 8
66503: PPUSH
66504: LD_INT 0
66506: PPUSH
66507: CALL 68473 0 3
// end ;
66511: GO 66448
66513: POP
66514: POP
// if apemans then
66515: LD_VAR 0 3
66519: IFFALSE 66642
// for i = 1 to apemans do
66521: LD_ADDR_VAR 0 11
66525: PUSH
66526: DOUBLE
66527: LD_INT 1
66529: DEC
66530: ST_TO_ADDR
66531: LD_VAR 0 3
66535: PUSH
66536: FOR_TO
66537: IFFALSE 66640
// begin hc_class = class_apeman ;
66539: LD_ADDR_OWVAR 28
66543: PUSH
66544: LD_INT 12
66546: ST_TO_ADDR
// hc_gallery =  ;
66547: LD_ADDR_OWVAR 33
66551: PUSH
66552: LD_STRING 
66554: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
66555: LD_ADDR_OWVAR 35
66559: PUSH
66560: LD_INT 5
66562: NEG
66563: PPUSH
66564: LD_INT 5
66566: PPUSH
66567: CALL_OW 12
66571: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66572: LD_ADDR_OWVAR 31
66576: PUSH
66577: LD_INT 1
66579: PPUSH
66580: LD_INT 3
66582: PPUSH
66583: CALL_OW 12
66587: PUSH
66588: LD_INT 1
66590: PPUSH
66591: LD_INT 3
66593: PPUSH
66594: CALL_OW 12
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: ST_TO_ADDR
// animal := CreateHuman ;
66611: LD_ADDR_VAR 0 12
66615: PUSH
66616: CALL_OW 44
66620: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66621: LD_VAR 0 12
66625: PPUSH
66626: LD_VAR 0 8
66630: PPUSH
66631: LD_INT 0
66633: PPUSH
66634: CALL 68473 0 3
// end ;
66638: GO 66536
66640: POP
66641: POP
// if enchidnas then
66642: LD_VAR 0 4
66646: IFFALSE 66713
// for i = 1 to enchidnas do
66648: LD_ADDR_VAR 0 11
66652: PUSH
66653: DOUBLE
66654: LD_INT 1
66656: DEC
66657: ST_TO_ADDR
66658: LD_VAR 0 4
66662: PUSH
66663: FOR_TO
66664: IFFALSE 66711
// begin hc_class = 13 ;
66666: LD_ADDR_OWVAR 28
66670: PUSH
66671: LD_INT 13
66673: ST_TO_ADDR
// hc_gallery =  ;
66674: LD_ADDR_OWVAR 33
66678: PUSH
66679: LD_STRING 
66681: ST_TO_ADDR
// animal := CreateHuman ;
66682: LD_ADDR_VAR 0 12
66686: PUSH
66687: CALL_OW 44
66691: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66692: LD_VAR 0 12
66696: PPUSH
66697: LD_VAR 0 8
66701: PPUSH
66702: LD_INT 0
66704: PPUSH
66705: CALL 68473 0 3
// end ;
66709: GO 66663
66711: POP
66712: POP
// if fishes then
66713: LD_VAR 0 7
66717: IFFALSE 66784
// for i = 1 to fishes do
66719: LD_ADDR_VAR 0 11
66723: PUSH
66724: DOUBLE
66725: LD_INT 1
66727: DEC
66728: ST_TO_ADDR
66729: LD_VAR 0 7
66733: PUSH
66734: FOR_TO
66735: IFFALSE 66782
// begin hc_class = 20 ;
66737: LD_ADDR_OWVAR 28
66741: PUSH
66742: LD_INT 20
66744: ST_TO_ADDR
// hc_gallery =  ;
66745: LD_ADDR_OWVAR 33
66749: PUSH
66750: LD_STRING 
66752: ST_TO_ADDR
// animal := CreateHuman ;
66753: LD_ADDR_VAR 0 12
66757: PUSH
66758: CALL_OW 44
66762: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66763: LD_VAR 0 12
66767: PPUSH
66768: LD_VAR 0 9
66772: PPUSH
66773: LD_INT 0
66775: PPUSH
66776: CALL 68473 0 3
// end ;
66780: GO 66734
66782: POP
66783: POP
// end ;
66784: LD_VAR 0 10
66788: RET
// export function WantHeal ( sci , unit ) ; begin
66789: LD_INT 0
66791: PPUSH
// if GetTaskList ( sci ) > 0 then
66792: LD_VAR 0 1
66796: PPUSH
66797: CALL_OW 437
66801: PUSH
66802: LD_INT 0
66804: GREATER
66805: IFFALSE 66875
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66807: LD_VAR 0 1
66811: PPUSH
66812: CALL_OW 437
66816: PUSH
66817: LD_INT 1
66819: ARRAY
66820: PUSH
66821: LD_INT 1
66823: ARRAY
66824: PUSH
66825: LD_STRING l
66827: EQUAL
66828: PUSH
66829: LD_VAR 0 1
66833: PPUSH
66834: CALL_OW 437
66838: PUSH
66839: LD_INT 1
66841: ARRAY
66842: PUSH
66843: LD_INT 4
66845: ARRAY
66846: PUSH
66847: LD_VAR 0 2
66851: EQUAL
66852: AND
66853: IFFALSE 66865
// result := true else
66855: LD_ADDR_VAR 0 3
66859: PUSH
66860: LD_INT 1
66862: ST_TO_ADDR
66863: GO 66873
// result := false ;
66865: LD_ADDR_VAR 0 3
66869: PUSH
66870: LD_INT 0
66872: ST_TO_ADDR
// end else
66873: GO 66883
// result := false ;
66875: LD_ADDR_VAR 0 3
66879: PUSH
66880: LD_INT 0
66882: ST_TO_ADDR
// end ;
66883: LD_VAR 0 3
66887: RET
// export function HealTarget ( sci ) ; begin
66888: LD_INT 0
66890: PPUSH
// if not sci then
66891: LD_VAR 0 1
66895: NOT
66896: IFFALSE 66900
// exit ;
66898: GO 66965
// result := 0 ;
66900: LD_ADDR_VAR 0 2
66904: PUSH
66905: LD_INT 0
66907: ST_TO_ADDR
// if GetTaskList ( sci ) then
66908: LD_VAR 0 1
66912: PPUSH
66913: CALL_OW 437
66917: IFFALSE 66965
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66919: LD_VAR 0 1
66923: PPUSH
66924: CALL_OW 437
66928: PUSH
66929: LD_INT 1
66931: ARRAY
66932: PUSH
66933: LD_INT 1
66935: ARRAY
66936: PUSH
66937: LD_STRING l
66939: EQUAL
66940: IFFALSE 66965
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66942: LD_ADDR_VAR 0 2
66946: PUSH
66947: LD_VAR 0 1
66951: PPUSH
66952: CALL_OW 437
66956: PUSH
66957: LD_INT 1
66959: ARRAY
66960: PUSH
66961: LD_INT 4
66963: ARRAY
66964: ST_TO_ADDR
// end ;
66965: LD_VAR 0 2
66969: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66970: LD_INT 0
66972: PPUSH
66973: PPUSH
66974: PPUSH
66975: PPUSH
// if not base_units then
66976: LD_VAR 0 1
66980: NOT
66981: IFFALSE 66985
// exit ;
66983: GO 67072
// result := false ;
66985: LD_ADDR_VAR 0 2
66989: PUSH
66990: LD_INT 0
66992: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66993: LD_ADDR_VAR 0 5
66997: PUSH
66998: LD_VAR 0 1
67002: PPUSH
67003: LD_INT 21
67005: PUSH
67006: LD_INT 3
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PPUSH
67013: CALL_OW 72
67017: ST_TO_ADDR
// if not tmp then
67018: LD_VAR 0 5
67022: NOT
67023: IFFALSE 67027
// exit ;
67025: GO 67072
// for i in tmp do
67027: LD_ADDR_VAR 0 3
67031: PUSH
67032: LD_VAR 0 5
67036: PUSH
67037: FOR_IN
67038: IFFALSE 67070
// begin result := EnemyInRange ( i , 22 ) ;
67040: LD_ADDR_VAR 0 2
67044: PUSH
67045: LD_VAR 0 3
67049: PPUSH
67050: LD_INT 22
67052: PPUSH
67053: CALL 65308 0 2
67057: ST_TO_ADDR
// if result then
67058: LD_VAR 0 2
67062: IFFALSE 67068
// exit ;
67064: POP
67065: POP
67066: GO 67072
// end ;
67068: GO 67037
67070: POP
67071: POP
// end ;
67072: LD_VAR 0 2
67076: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67077: LD_INT 0
67079: PPUSH
67080: PPUSH
// if not units then
67081: LD_VAR 0 1
67085: NOT
67086: IFFALSE 67090
// exit ;
67088: GO 67160
// result := [ ] ;
67090: LD_ADDR_VAR 0 3
67094: PUSH
67095: EMPTY
67096: ST_TO_ADDR
// for i in units do
67097: LD_ADDR_VAR 0 4
67101: PUSH
67102: LD_VAR 0 1
67106: PUSH
67107: FOR_IN
67108: IFFALSE 67158
// if GetTag ( i ) = tag then
67110: LD_VAR 0 4
67114: PPUSH
67115: CALL_OW 110
67119: PUSH
67120: LD_VAR 0 2
67124: EQUAL
67125: IFFALSE 67156
// result := Insert ( result , result + 1 , i ) ;
67127: LD_ADDR_VAR 0 3
67131: PUSH
67132: LD_VAR 0 3
67136: PPUSH
67137: LD_VAR 0 3
67141: PUSH
67142: LD_INT 1
67144: PLUS
67145: PPUSH
67146: LD_VAR 0 4
67150: PPUSH
67151: CALL_OW 2
67155: ST_TO_ADDR
67156: GO 67107
67158: POP
67159: POP
// end ;
67160: LD_VAR 0 3
67164: RET
// export function IsDriver ( un ) ; begin
67165: LD_INT 0
67167: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67168: LD_ADDR_VAR 0 2
67172: PUSH
67173: LD_VAR 0 1
67177: PUSH
67178: LD_INT 55
67180: PUSH
67181: EMPTY
67182: LIST
67183: PPUSH
67184: CALL_OW 69
67188: IN
67189: ST_TO_ADDR
// end ;
67190: LD_VAR 0 2
67194: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67195: LD_INT 0
67197: PPUSH
67198: PPUSH
// list := [ ] ;
67199: LD_ADDR_VAR 0 5
67203: PUSH
67204: EMPTY
67205: ST_TO_ADDR
// case d of 0 :
67206: LD_VAR 0 3
67210: PUSH
67211: LD_INT 0
67213: DOUBLE
67214: EQUAL
67215: IFTRUE 67219
67217: GO 67352
67219: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67220: LD_ADDR_VAR 0 5
67224: PUSH
67225: LD_VAR 0 1
67229: PUSH
67230: LD_INT 4
67232: MINUS
67233: PUSH
67234: LD_VAR 0 2
67238: PUSH
67239: LD_INT 4
67241: MINUS
67242: PUSH
67243: LD_INT 2
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: PUSH
67251: LD_VAR 0 1
67255: PUSH
67256: LD_INT 3
67258: MINUS
67259: PUSH
67260: LD_VAR 0 2
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: LIST
67272: PUSH
67273: LD_VAR 0 1
67277: PUSH
67278: LD_INT 4
67280: PLUS
67281: PUSH
67282: LD_VAR 0 2
67286: PUSH
67287: LD_INT 4
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: LIST
67294: PUSH
67295: LD_VAR 0 1
67299: PUSH
67300: LD_INT 3
67302: PLUS
67303: PUSH
67304: LD_VAR 0 2
67308: PUSH
67309: LD_INT 3
67311: PLUS
67312: PUSH
67313: LD_INT 5
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: LIST
67320: PUSH
67321: LD_VAR 0 1
67325: PUSH
67326: LD_VAR 0 2
67330: PUSH
67331: LD_INT 4
67333: PLUS
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: LIST
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: ST_TO_ADDR
// end ; 1 :
67350: GO 68050
67352: LD_INT 1
67354: DOUBLE
67355: EQUAL
67356: IFTRUE 67360
67358: GO 67493
67360: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67361: LD_ADDR_VAR 0 5
67365: PUSH
67366: LD_VAR 0 1
67370: PUSH
67371: LD_VAR 0 2
67375: PUSH
67376: LD_INT 4
67378: MINUS
67379: PUSH
67380: LD_INT 3
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: LIST
67387: PUSH
67388: LD_VAR 0 1
67392: PUSH
67393: LD_INT 3
67395: MINUS
67396: PUSH
67397: LD_VAR 0 2
67401: PUSH
67402: LD_INT 3
67404: MINUS
67405: PUSH
67406: LD_INT 2
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: LIST
67413: PUSH
67414: LD_VAR 0 1
67418: PUSH
67419: LD_INT 4
67421: MINUS
67422: PUSH
67423: LD_VAR 0 2
67427: PUSH
67428: LD_INT 1
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: LIST
67435: PUSH
67436: LD_VAR 0 1
67440: PUSH
67441: LD_VAR 0 2
67445: PUSH
67446: LD_INT 3
67448: PLUS
67449: PUSH
67450: LD_INT 0
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: LIST
67457: PUSH
67458: LD_VAR 0 1
67462: PUSH
67463: LD_INT 4
67465: PLUS
67466: PUSH
67467: LD_VAR 0 2
67471: PUSH
67472: LD_INT 4
67474: PLUS
67475: PUSH
67476: LD_INT 5
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: ST_TO_ADDR
// end ; 2 :
67491: GO 68050
67493: LD_INT 2
67495: DOUBLE
67496: EQUAL
67497: IFTRUE 67501
67499: GO 67630
67501: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67502: LD_ADDR_VAR 0 5
67506: PUSH
67507: LD_VAR 0 1
67511: PUSH
67512: LD_VAR 0 2
67516: PUSH
67517: LD_INT 3
67519: MINUS
67520: PUSH
67521: LD_INT 3
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: LIST
67528: PUSH
67529: LD_VAR 0 1
67533: PUSH
67534: LD_INT 4
67536: PLUS
67537: PUSH
67538: LD_VAR 0 2
67542: PUSH
67543: LD_INT 4
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: LIST
67550: PUSH
67551: LD_VAR 0 1
67555: PUSH
67556: LD_VAR 0 2
67560: PUSH
67561: LD_INT 4
67563: PLUS
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: LIST
67572: PUSH
67573: LD_VAR 0 1
67577: PUSH
67578: LD_INT 3
67580: MINUS
67581: PUSH
67582: LD_VAR 0 2
67586: PUSH
67587: LD_INT 1
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: LIST
67594: PUSH
67595: LD_VAR 0 1
67599: PUSH
67600: LD_INT 4
67602: MINUS
67603: PUSH
67604: LD_VAR 0 2
67608: PUSH
67609: LD_INT 4
67611: MINUS
67612: PUSH
67613: LD_INT 2
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: LIST
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: ST_TO_ADDR
// end ; 3 :
67628: GO 68050
67630: LD_INT 3
67632: DOUBLE
67633: EQUAL
67634: IFTRUE 67638
67636: GO 67771
67638: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67639: LD_ADDR_VAR 0 5
67643: PUSH
67644: LD_VAR 0 1
67648: PUSH
67649: LD_INT 3
67651: PLUS
67652: PUSH
67653: LD_VAR 0 2
67657: PUSH
67658: LD_INT 4
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: LIST
67665: PUSH
67666: LD_VAR 0 1
67670: PUSH
67671: LD_INT 4
67673: PLUS
67674: PUSH
67675: LD_VAR 0 2
67679: PUSH
67680: LD_INT 4
67682: PLUS
67683: PUSH
67684: LD_INT 5
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: LIST
67691: PUSH
67692: LD_VAR 0 1
67696: PUSH
67697: LD_INT 4
67699: MINUS
67700: PUSH
67701: LD_VAR 0 2
67705: PUSH
67706: LD_INT 1
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: LIST
67713: PUSH
67714: LD_VAR 0 1
67718: PUSH
67719: LD_VAR 0 2
67723: PUSH
67724: LD_INT 4
67726: MINUS
67727: PUSH
67728: LD_INT 3
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: LIST
67735: PUSH
67736: LD_VAR 0 1
67740: PUSH
67741: LD_INT 3
67743: MINUS
67744: PUSH
67745: LD_VAR 0 2
67749: PUSH
67750: LD_INT 3
67752: MINUS
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: LIST
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: ST_TO_ADDR
// end ; 4 :
67769: GO 68050
67771: LD_INT 4
67773: DOUBLE
67774: EQUAL
67775: IFTRUE 67779
67777: GO 67912
67779: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67780: LD_ADDR_VAR 0 5
67784: PUSH
67785: LD_VAR 0 1
67789: PUSH
67790: LD_VAR 0 2
67794: PUSH
67795: LD_INT 4
67797: PLUS
67798: PUSH
67799: LD_INT 0
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: LIST
67806: PUSH
67807: LD_VAR 0 1
67811: PUSH
67812: LD_INT 3
67814: PLUS
67815: PUSH
67816: LD_VAR 0 2
67820: PUSH
67821: LD_INT 3
67823: PLUS
67824: PUSH
67825: LD_INT 5
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: LIST
67832: PUSH
67833: LD_VAR 0 1
67837: PUSH
67838: LD_INT 4
67840: PLUS
67841: PUSH
67842: LD_VAR 0 2
67846: PUSH
67847: LD_INT 4
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: LIST
67854: PUSH
67855: LD_VAR 0 1
67859: PUSH
67860: LD_VAR 0 2
67864: PUSH
67865: LD_INT 3
67867: MINUS
67868: PUSH
67869: LD_INT 3
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: LIST
67876: PUSH
67877: LD_VAR 0 1
67881: PUSH
67882: LD_INT 4
67884: MINUS
67885: PUSH
67886: LD_VAR 0 2
67890: PUSH
67891: LD_INT 4
67893: MINUS
67894: PUSH
67895: LD_INT 2
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: LIST
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: ST_TO_ADDR
// end ; 5 :
67910: GO 68050
67912: LD_INT 5
67914: DOUBLE
67915: EQUAL
67916: IFTRUE 67920
67918: GO 68049
67920: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67921: LD_ADDR_VAR 0 5
67925: PUSH
67926: LD_VAR 0 1
67930: PUSH
67931: LD_INT 4
67933: MINUS
67934: PUSH
67935: LD_VAR 0 2
67939: PUSH
67940: LD_INT 1
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: LIST
67947: PUSH
67948: LD_VAR 0 1
67952: PUSH
67953: LD_VAR 0 2
67957: PUSH
67958: LD_INT 4
67960: MINUS
67961: PUSH
67962: LD_INT 3
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: LIST
67969: PUSH
67970: LD_VAR 0 1
67974: PUSH
67975: LD_INT 4
67977: PLUS
67978: PUSH
67979: LD_VAR 0 2
67983: PUSH
67984: LD_INT 4
67986: PLUS
67987: PUSH
67988: LD_INT 5
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: LIST
67995: PUSH
67996: LD_VAR 0 1
68000: PUSH
68001: LD_INT 3
68003: PLUS
68004: PUSH
68005: LD_VAR 0 2
68009: PUSH
68010: LD_INT 4
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: LIST
68017: PUSH
68018: LD_VAR 0 1
68022: PUSH
68023: LD_VAR 0 2
68027: PUSH
68028: LD_INT 3
68030: PLUS
68031: PUSH
68032: LD_INT 0
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: LIST
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: ST_TO_ADDR
// end ; end ;
68047: GO 68050
68049: POP
// result := list ;
68050: LD_ADDR_VAR 0 4
68054: PUSH
68055: LD_VAR 0 5
68059: ST_TO_ADDR
// end ;
68060: LD_VAR 0 4
68064: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68065: LD_INT 0
68067: PPUSH
68068: PPUSH
68069: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68070: LD_VAR 0 1
68074: NOT
68075: PUSH
68076: LD_VAR 0 2
68080: PUSH
68081: LD_INT 1
68083: PUSH
68084: LD_INT 2
68086: PUSH
68087: LD_INT 3
68089: PUSH
68090: LD_INT 4
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: IN
68099: NOT
68100: OR
68101: IFFALSE 68105
// exit ;
68103: GO 68197
// tmp := [ ] ;
68105: LD_ADDR_VAR 0 5
68109: PUSH
68110: EMPTY
68111: ST_TO_ADDR
// for i in units do
68112: LD_ADDR_VAR 0 4
68116: PUSH
68117: LD_VAR 0 1
68121: PUSH
68122: FOR_IN
68123: IFFALSE 68166
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68125: LD_ADDR_VAR 0 5
68129: PUSH
68130: LD_VAR 0 5
68134: PPUSH
68135: LD_VAR 0 5
68139: PUSH
68140: LD_INT 1
68142: PLUS
68143: PPUSH
68144: LD_VAR 0 4
68148: PPUSH
68149: LD_VAR 0 2
68153: PPUSH
68154: CALL_OW 259
68158: PPUSH
68159: CALL_OW 2
68163: ST_TO_ADDR
68164: GO 68122
68166: POP
68167: POP
// if not tmp then
68168: LD_VAR 0 5
68172: NOT
68173: IFFALSE 68177
// exit ;
68175: GO 68197
// result := SortListByListDesc ( units , tmp ) ;
68177: LD_ADDR_VAR 0 3
68181: PUSH
68182: LD_VAR 0 1
68186: PPUSH
68187: LD_VAR 0 5
68191: PPUSH
68192: CALL_OW 77
68196: ST_TO_ADDR
// end ;
68197: LD_VAR 0 3
68201: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68202: LD_INT 0
68204: PPUSH
68205: PPUSH
68206: PPUSH
// result := false ;
68207: LD_ADDR_VAR 0 3
68211: PUSH
68212: LD_INT 0
68214: ST_TO_ADDR
// x := GetX ( building ) ;
68215: LD_ADDR_VAR 0 4
68219: PUSH
68220: LD_VAR 0 2
68224: PPUSH
68225: CALL_OW 250
68229: ST_TO_ADDR
// y := GetY ( building ) ;
68230: LD_ADDR_VAR 0 5
68234: PUSH
68235: LD_VAR 0 2
68239: PPUSH
68240: CALL_OW 251
68244: ST_TO_ADDR
// if not building or not x or not y then
68245: LD_VAR 0 2
68249: NOT
68250: PUSH
68251: LD_VAR 0 4
68255: NOT
68256: OR
68257: PUSH
68258: LD_VAR 0 5
68262: NOT
68263: OR
68264: IFFALSE 68268
// exit ;
68266: GO 68360
// if GetTaskList ( unit ) then
68268: LD_VAR 0 1
68272: PPUSH
68273: CALL_OW 437
68277: IFFALSE 68360
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68279: LD_STRING e
68281: PUSH
68282: LD_VAR 0 1
68286: PPUSH
68287: CALL_OW 437
68291: PUSH
68292: LD_INT 1
68294: ARRAY
68295: PUSH
68296: LD_INT 1
68298: ARRAY
68299: EQUAL
68300: PUSH
68301: LD_VAR 0 4
68305: PUSH
68306: LD_VAR 0 1
68310: PPUSH
68311: CALL_OW 437
68315: PUSH
68316: LD_INT 1
68318: ARRAY
68319: PUSH
68320: LD_INT 2
68322: ARRAY
68323: EQUAL
68324: AND
68325: PUSH
68326: LD_VAR 0 5
68330: PUSH
68331: LD_VAR 0 1
68335: PPUSH
68336: CALL_OW 437
68340: PUSH
68341: LD_INT 1
68343: ARRAY
68344: PUSH
68345: LD_INT 3
68347: ARRAY
68348: EQUAL
68349: AND
68350: IFFALSE 68360
// result := true end ;
68352: LD_ADDR_VAR 0 3
68356: PUSH
68357: LD_INT 1
68359: ST_TO_ADDR
// end ;
68360: LD_VAR 0 3
68364: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68365: LD_INT 0
68367: PPUSH
// result := false ;
68368: LD_ADDR_VAR 0 4
68372: PUSH
68373: LD_INT 0
68375: ST_TO_ADDR
// if GetTaskList ( unit ) then
68376: LD_VAR 0 1
68380: PPUSH
68381: CALL_OW 437
68385: IFFALSE 68468
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68387: LD_STRING M
68389: PUSH
68390: LD_VAR 0 1
68394: PPUSH
68395: CALL_OW 437
68399: PUSH
68400: LD_INT 1
68402: ARRAY
68403: PUSH
68404: LD_INT 1
68406: ARRAY
68407: EQUAL
68408: PUSH
68409: LD_VAR 0 2
68413: PUSH
68414: LD_VAR 0 1
68418: PPUSH
68419: CALL_OW 437
68423: PUSH
68424: LD_INT 1
68426: ARRAY
68427: PUSH
68428: LD_INT 2
68430: ARRAY
68431: EQUAL
68432: AND
68433: PUSH
68434: LD_VAR 0 3
68438: PUSH
68439: LD_VAR 0 1
68443: PPUSH
68444: CALL_OW 437
68448: PUSH
68449: LD_INT 1
68451: ARRAY
68452: PUSH
68453: LD_INT 3
68455: ARRAY
68456: EQUAL
68457: AND
68458: IFFALSE 68468
// result := true ;
68460: LD_ADDR_VAR 0 4
68464: PUSH
68465: LD_INT 1
68467: ST_TO_ADDR
// end ; end ;
68468: LD_VAR 0 4
68472: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68473: LD_INT 0
68475: PPUSH
68476: PPUSH
68477: PPUSH
68478: PPUSH
// if not unit or not area then
68479: LD_VAR 0 1
68483: NOT
68484: PUSH
68485: LD_VAR 0 2
68489: NOT
68490: OR
68491: IFFALSE 68495
// exit ;
68493: GO 68659
// tmp := AreaToList ( area , i ) ;
68495: LD_ADDR_VAR 0 6
68499: PUSH
68500: LD_VAR 0 2
68504: PPUSH
68505: LD_VAR 0 5
68509: PPUSH
68510: CALL_OW 517
68514: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68515: LD_ADDR_VAR 0 5
68519: PUSH
68520: DOUBLE
68521: LD_INT 1
68523: DEC
68524: ST_TO_ADDR
68525: LD_VAR 0 6
68529: PUSH
68530: LD_INT 1
68532: ARRAY
68533: PUSH
68534: FOR_TO
68535: IFFALSE 68657
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68537: LD_ADDR_VAR 0 7
68541: PUSH
68542: LD_VAR 0 6
68546: PUSH
68547: LD_INT 1
68549: ARRAY
68550: PUSH
68551: LD_VAR 0 5
68555: ARRAY
68556: PUSH
68557: LD_VAR 0 6
68561: PUSH
68562: LD_INT 2
68564: ARRAY
68565: PUSH
68566: LD_VAR 0 5
68570: ARRAY
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68576: LD_VAR 0 7
68580: PUSH
68581: LD_INT 1
68583: ARRAY
68584: PPUSH
68585: LD_VAR 0 7
68589: PUSH
68590: LD_INT 2
68592: ARRAY
68593: PPUSH
68594: CALL_OW 428
68598: PUSH
68599: LD_INT 0
68601: EQUAL
68602: IFFALSE 68655
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68604: LD_VAR 0 1
68608: PPUSH
68609: LD_VAR 0 7
68613: PUSH
68614: LD_INT 1
68616: ARRAY
68617: PPUSH
68618: LD_VAR 0 7
68622: PUSH
68623: LD_INT 2
68625: ARRAY
68626: PPUSH
68627: LD_VAR 0 3
68631: PPUSH
68632: CALL_OW 48
// result := IsPlaced ( unit ) ;
68636: LD_ADDR_VAR 0 4
68640: PUSH
68641: LD_VAR 0 1
68645: PPUSH
68646: CALL_OW 305
68650: ST_TO_ADDR
// exit ;
68651: POP
68652: POP
68653: GO 68659
// end ; end ;
68655: GO 68534
68657: POP
68658: POP
// end ;
68659: LD_VAR 0 4
68663: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68664: LD_INT 0
68666: PPUSH
68667: PPUSH
68668: PPUSH
// if not side or side > 8 then
68669: LD_VAR 0 1
68673: NOT
68674: PUSH
68675: LD_VAR 0 1
68679: PUSH
68680: LD_INT 8
68682: GREATER
68683: OR
68684: IFFALSE 68688
// exit ;
68686: GO 68875
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68688: LD_ADDR_VAR 0 4
68692: PUSH
68693: LD_INT 22
68695: PUSH
68696: LD_VAR 0 1
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 21
68707: PUSH
68708: LD_INT 3
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PPUSH
68719: CALL_OW 69
68723: ST_TO_ADDR
// if not tmp then
68724: LD_VAR 0 4
68728: NOT
68729: IFFALSE 68733
// exit ;
68731: GO 68875
// enable_addtolog := true ;
68733: LD_ADDR_OWVAR 81
68737: PUSH
68738: LD_INT 1
68740: ST_TO_ADDR
// AddToLog ( [ ) ;
68741: LD_STRING [
68743: PPUSH
68744: CALL_OW 561
// for i in tmp do
68748: LD_ADDR_VAR 0 3
68752: PUSH
68753: LD_VAR 0 4
68757: PUSH
68758: FOR_IN
68759: IFFALSE 68866
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68761: LD_STRING [
68763: PUSH
68764: LD_VAR 0 3
68768: PPUSH
68769: CALL_OW 266
68773: STR
68774: PUSH
68775: LD_STRING , 
68777: STR
68778: PUSH
68779: LD_VAR 0 3
68783: PPUSH
68784: CALL_OW 250
68788: STR
68789: PUSH
68790: LD_STRING , 
68792: STR
68793: PUSH
68794: LD_VAR 0 3
68798: PPUSH
68799: CALL_OW 251
68803: STR
68804: PUSH
68805: LD_STRING , 
68807: STR
68808: PUSH
68809: LD_VAR 0 3
68813: PPUSH
68814: CALL_OW 254
68818: STR
68819: PUSH
68820: LD_STRING , 
68822: STR
68823: PUSH
68824: LD_VAR 0 3
68828: PPUSH
68829: LD_INT 1
68831: PPUSH
68832: CALL_OW 268
68836: STR
68837: PUSH
68838: LD_STRING , 
68840: STR
68841: PUSH
68842: LD_VAR 0 3
68846: PPUSH
68847: LD_INT 2
68849: PPUSH
68850: CALL_OW 268
68854: STR
68855: PUSH
68856: LD_STRING ],
68858: STR
68859: PPUSH
68860: CALL_OW 561
// end ;
68864: GO 68758
68866: POP
68867: POP
// AddToLog ( ]; ) ;
68868: LD_STRING ];
68870: PPUSH
68871: CALL_OW 561
// end ;
68875: LD_VAR 0 2
68879: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68880: LD_INT 0
68882: PPUSH
68883: PPUSH
68884: PPUSH
68885: PPUSH
68886: PPUSH
// if not area or not rate or not max then
68887: LD_VAR 0 1
68891: NOT
68892: PUSH
68893: LD_VAR 0 2
68897: NOT
68898: OR
68899: PUSH
68900: LD_VAR 0 4
68904: NOT
68905: OR
68906: IFFALSE 68910
// exit ;
68908: GO 69102
// while 1 do
68910: LD_INT 1
68912: IFFALSE 69102
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68914: LD_ADDR_VAR 0 9
68918: PUSH
68919: LD_VAR 0 1
68923: PPUSH
68924: LD_INT 1
68926: PPUSH
68927: CALL_OW 287
68931: PUSH
68932: LD_INT 10
68934: MUL
68935: ST_TO_ADDR
// r := rate / 10 ;
68936: LD_ADDR_VAR 0 7
68940: PUSH
68941: LD_VAR 0 2
68945: PUSH
68946: LD_INT 10
68948: DIVREAL
68949: ST_TO_ADDR
// time := 1 1$00 ;
68950: LD_ADDR_VAR 0 8
68954: PUSH
68955: LD_INT 2100
68957: ST_TO_ADDR
// if amount < min then
68958: LD_VAR 0 9
68962: PUSH
68963: LD_VAR 0 3
68967: LESS
68968: IFFALSE 68986
// r := r * 2 else
68970: LD_ADDR_VAR 0 7
68974: PUSH
68975: LD_VAR 0 7
68979: PUSH
68980: LD_INT 2
68982: MUL
68983: ST_TO_ADDR
68984: GO 69012
// if amount > max then
68986: LD_VAR 0 9
68990: PUSH
68991: LD_VAR 0 4
68995: GREATER
68996: IFFALSE 69012
// r := r / 2 ;
68998: LD_ADDR_VAR 0 7
69002: PUSH
69003: LD_VAR 0 7
69007: PUSH
69008: LD_INT 2
69010: DIVREAL
69011: ST_TO_ADDR
// time := time / r ;
69012: LD_ADDR_VAR 0 8
69016: PUSH
69017: LD_VAR 0 8
69021: PUSH
69022: LD_VAR 0 7
69026: DIVREAL
69027: ST_TO_ADDR
// if time < 0 then
69028: LD_VAR 0 8
69032: PUSH
69033: LD_INT 0
69035: LESS
69036: IFFALSE 69053
// time := time * - 1 ;
69038: LD_ADDR_VAR 0 8
69042: PUSH
69043: LD_VAR 0 8
69047: PUSH
69048: LD_INT 1
69050: NEG
69051: MUL
69052: ST_TO_ADDR
// wait ( time ) ;
69053: LD_VAR 0 8
69057: PPUSH
69058: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
69062: LD_INT 35
69064: PPUSH
69065: LD_INT 875
69067: PPUSH
69068: CALL_OW 12
69072: PPUSH
69073: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69077: LD_INT 1
69079: PPUSH
69080: LD_INT 5
69082: PPUSH
69083: CALL_OW 12
69087: PPUSH
69088: LD_VAR 0 1
69092: PPUSH
69093: LD_INT 1
69095: PPUSH
69096: CALL_OW 55
// end ;
69100: GO 68910
// end ;
69102: LD_VAR 0 5
69106: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69107: LD_INT 0
69109: PPUSH
69110: PPUSH
69111: PPUSH
69112: PPUSH
69113: PPUSH
69114: PPUSH
69115: PPUSH
69116: PPUSH
// if not turrets or not factories then
69117: LD_VAR 0 1
69121: NOT
69122: PUSH
69123: LD_VAR 0 2
69127: NOT
69128: OR
69129: IFFALSE 69133
// exit ;
69131: GO 69440
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69133: LD_ADDR_VAR 0 10
69137: PUSH
69138: LD_INT 5
69140: PUSH
69141: LD_INT 6
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 2
69150: PUSH
69151: LD_INT 4
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 3
69160: PUSH
69161: LD_INT 5
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 24
69175: PUSH
69176: LD_INT 25
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 23
69185: PUSH
69186: LD_INT 27
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 42
69199: PUSH
69200: LD_INT 43
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 44
69209: PUSH
69210: LD_INT 46
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 45
69219: PUSH
69220: LD_INT 47
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: LIST
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: LIST
69236: ST_TO_ADDR
// result := [ ] ;
69237: LD_ADDR_VAR 0 3
69241: PUSH
69242: EMPTY
69243: ST_TO_ADDR
// for i in turrets do
69244: LD_ADDR_VAR 0 4
69248: PUSH
69249: LD_VAR 0 1
69253: PUSH
69254: FOR_IN
69255: IFFALSE 69438
// begin nat := GetNation ( i ) ;
69257: LD_ADDR_VAR 0 7
69261: PUSH
69262: LD_VAR 0 4
69266: PPUSH
69267: CALL_OW 248
69271: ST_TO_ADDR
// weapon := 0 ;
69272: LD_ADDR_VAR 0 8
69276: PUSH
69277: LD_INT 0
69279: ST_TO_ADDR
// if not nat then
69280: LD_VAR 0 7
69284: NOT
69285: IFFALSE 69289
// continue ;
69287: GO 69254
// for j in list [ nat ] do
69289: LD_ADDR_VAR 0 5
69293: PUSH
69294: LD_VAR 0 10
69298: PUSH
69299: LD_VAR 0 7
69303: ARRAY
69304: PUSH
69305: FOR_IN
69306: IFFALSE 69347
// if GetBWeapon ( i ) = j [ 1 ] then
69308: LD_VAR 0 4
69312: PPUSH
69313: CALL_OW 269
69317: PUSH
69318: LD_VAR 0 5
69322: PUSH
69323: LD_INT 1
69325: ARRAY
69326: EQUAL
69327: IFFALSE 69345
// begin weapon := j [ 2 ] ;
69329: LD_ADDR_VAR 0 8
69333: PUSH
69334: LD_VAR 0 5
69338: PUSH
69339: LD_INT 2
69341: ARRAY
69342: ST_TO_ADDR
// break ;
69343: GO 69347
// end ;
69345: GO 69305
69347: POP
69348: POP
// if not weapon then
69349: LD_VAR 0 8
69353: NOT
69354: IFFALSE 69358
// continue ;
69356: GO 69254
// for k in factories do
69358: LD_ADDR_VAR 0 6
69362: PUSH
69363: LD_VAR 0 2
69367: PUSH
69368: FOR_IN
69369: IFFALSE 69434
// begin weapons := AvailableWeaponList ( k ) ;
69371: LD_ADDR_VAR 0 9
69375: PUSH
69376: LD_VAR 0 6
69380: PPUSH
69381: CALL_OW 478
69385: ST_TO_ADDR
// if not weapons then
69386: LD_VAR 0 9
69390: NOT
69391: IFFALSE 69395
// continue ;
69393: GO 69368
// if weapon in weapons then
69395: LD_VAR 0 8
69399: PUSH
69400: LD_VAR 0 9
69404: IN
69405: IFFALSE 69432
// begin result := [ i , weapon ] ;
69407: LD_ADDR_VAR 0 3
69411: PUSH
69412: LD_VAR 0 4
69416: PUSH
69417: LD_VAR 0 8
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: ST_TO_ADDR
// exit ;
69426: POP
69427: POP
69428: POP
69429: POP
69430: GO 69440
// end ; end ;
69432: GO 69368
69434: POP
69435: POP
// end ;
69436: GO 69254
69438: POP
69439: POP
// end ;
69440: LD_VAR 0 3
69444: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69445: LD_INT 0
69447: PPUSH
// if not side or side > 8 then
69448: LD_VAR 0 3
69452: NOT
69453: PUSH
69454: LD_VAR 0 3
69458: PUSH
69459: LD_INT 8
69461: GREATER
69462: OR
69463: IFFALSE 69467
// exit ;
69465: GO 69526
// if not range then
69467: LD_VAR 0 4
69471: NOT
69472: IFFALSE 69483
// range := - 12 ;
69474: LD_ADDR_VAR 0 4
69478: PUSH
69479: LD_INT 12
69481: NEG
69482: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69483: LD_VAR 0 1
69487: PPUSH
69488: LD_VAR 0 2
69492: PPUSH
69493: LD_VAR 0 3
69497: PPUSH
69498: LD_VAR 0 4
69502: PPUSH
69503: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69507: LD_VAR 0 1
69511: PPUSH
69512: LD_VAR 0 2
69516: PPUSH
69517: LD_VAR 0 3
69521: PPUSH
69522: CALL_OW 331
// end ;
69526: LD_VAR 0 5
69530: RET
// export function Video ( mode ) ; begin
69531: LD_INT 0
69533: PPUSH
// ingame_video = mode ;
69534: LD_ADDR_OWVAR 52
69538: PUSH
69539: LD_VAR 0 1
69543: ST_TO_ADDR
// interface_hidden = mode ;
69544: LD_ADDR_OWVAR 54
69548: PUSH
69549: LD_VAR 0 1
69553: ST_TO_ADDR
// end ;
69554: LD_VAR 0 2
69558: RET
// export function Join ( array , element ) ; begin
69559: LD_INT 0
69561: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69562: LD_ADDR_VAR 0 3
69566: PUSH
69567: LD_VAR 0 1
69571: PPUSH
69572: LD_VAR 0 1
69576: PUSH
69577: LD_INT 1
69579: PLUS
69580: PPUSH
69581: LD_VAR 0 2
69585: PPUSH
69586: CALL_OW 1
69590: ST_TO_ADDR
// end ;
69591: LD_VAR 0 3
69595: RET
// export function JoinUnion ( array , element ) ; begin
69596: LD_INT 0
69598: PPUSH
// result := array union element ;
69599: LD_ADDR_VAR 0 3
69603: PUSH
69604: LD_VAR 0 1
69608: PUSH
69609: LD_VAR 0 2
69613: UNION
69614: ST_TO_ADDR
// end ;
69615: LD_VAR 0 3
69619: RET
// export function GetBehemoths ( side ) ; begin
69620: LD_INT 0
69622: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69623: LD_ADDR_VAR 0 2
69627: PUSH
69628: LD_INT 22
69630: PUSH
69631: LD_VAR 0 1
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 31
69642: PUSH
69643: LD_INT 25
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PPUSH
69654: CALL_OW 69
69658: ST_TO_ADDR
// end ;
69659: LD_VAR 0 2
69663: RET
// export function Shuffle ( array ) ; var i , index ; begin
69664: LD_INT 0
69666: PPUSH
69667: PPUSH
69668: PPUSH
// result := [ ] ;
69669: LD_ADDR_VAR 0 2
69673: PUSH
69674: EMPTY
69675: ST_TO_ADDR
// if not array then
69676: LD_VAR 0 1
69680: NOT
69681: IFFALSE 69685
// exit ;
69683: GO 69784
// Randomize ;
69685: CALL_OW 10
// for i = array downto 1 do
69689: LD_ADDR_VAR 0 3
69693: PUSH
69694: DOUBLE
69695: LD_VAR 0 1
69699: INC
69700: ST_TO_ADDR
69701: LD_INT 1
69703: PUSH
69704: FOR_DOWNTO
69705: IFFALSE 69782
// begin index := rand ( 1 , array ) ;
69707: LD_ADDR_VAR 0 4
69711: PUSH
69712: LD_INT 1
69714: PPUSH
69715: LD_VAR 0 1
69719: PPUSH
69720: CALL_OW 12
69724: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69725: LD_ADDR_VAR 0 2
69729: PUSH
69730: LD_VAR 0 2
69734: PPUSH
69735: LD_VAR 0 2
69739: PUSH
69740: LD_INT 1
69742: PLUS
69743: PPUSH
69744: LD_VAR 0 1
69748: PUSH
69749: LD_VAR 0 4
69753: ARRAY
69754: PPUSH
69755: CALL_OW 2
69759: ST_TO_ADDR
// array := Delete ( array , index ) ;
69760: LD_ADDR_VAR 0 1
69764: PUSH
69765: LD_VAR 0 1
69769: PPUSH
69770: LD_VAR 0 4
69774: PPUSH
69775: CALL_OW 3
69779: ST_TO_ADDR
// end ;
69780: GO 69704
69782: POP
69783: POP
// end ;
69784: LD_VAR 0 2
69788: RET
// export function GetBaseMaterials ( base ) ; begin
69789: LD_INT 0
69791: PPUSH
// result := [ 0 , 0 , 0 ] ;
69792: LD_ADDR_VAR 0 2
69796: PUSH
69797: LD_INT 0
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: LD_INT 0
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: LIST
69810: ST_TO_ADDR
// if not base then
69811: LD_VAR 0 1
69815: NOT
69816: IFFALSE 69820
// exit ;
69818: GO 69869
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69820: LD_ADDR_VAR 0 2
69824: PUSH
69825: LD_VAR 0 1
69829: PPUSH
69830: LD_INT 1
69832: PPUSH
69833: CALL_OW 275
69837: PUSH
69838: LD_VAR 0 1
69842: PPUSH
69843: LD_INT 2
69845: PPUSH
69846: CALL_OW 275
69850: PUSH
69851: LD_VAR 0 1
69855: PPUSH
69856: LD_INT 3
69858: PPUSH
69859: CALL_OW 275
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: LIST
69868: ST_TO_ADDR
// end ;
69869: LD_VAR 0 2
69873: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69874: LD_INT 0
69876: PPUSH
69877: PPUSH
// result := array ;
69878: LD_ADDR_VAR 0 3
69882: PUSH
69883: LD_VAR 0 1
69887: ST_TO_ADDR
// if size > 0 then
69888: LD_VAR 0 2
69892: PUSH
69893: LD_INT 0
69895: GREATER
69896: IFFALSE 69942
// for i := array downto size do
69898: LD_ADDR_VAR 0 4
69902: PUSH
69903: DOUBLE
69904: LD_VAR 0 1
69908: INC
69909: ST_TO_ADDR
69910: LD_VAR 0 2
69914: PUSH
69915: FOR_DOWNTO
69916: IFFALSE 69940
// result := Delete ( result , result ) ;
69918: LD_ADDR_VAR 0 3
69922: PUSH
69923: LD_VAR 0 3
69927: PPUSH
69928: LD_VAR 0 3
69932: PPUSH
69933: CALL_OW 3
69937: ST_TO_ADDR
69938: GO 69915
69940: POP
69941: POP
// end ;
69942: LD_VAR 0 3
69946: RET
// export function ComExit ( unit ) ; var tmp ; begin
69947: LD_INT 0
69949: PPUSH
69950: PPUSH
// if not IsInUnit ( unit ) then
69951: LD_VAR 0 1
69955: PPUSH
69956: CALL_OW 310
69960: NOT
69961: IFFALSE 69965
// exit ;
69963: GO 70025
// tmp := IsInUnit ( unit ) ;
69965: LD_ADDR_VAR 0 3
69969: PUSH
69970: LD_VAR 0 1
69974: PPUSH
69975: CALL_OW 310
69979: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69980: LD_VAR 0 3
69984: PPUSH
69985: CALL_OW 247
69989: PUSH
69990: LD_INT 2
69992: EQUAL
69993: IFFALSE 70006
// ComExitVehicle ( unit ) else
69995: LD_VAR 0 1
69999: PPUSH
70000: CALL_OW 121
70004: GO 70015
// ComExitBuilding ( unit ) ;
70006: LD_VAR 0 1
70010: PPUSH
70011: CALL_OW 122
// result := tmp ;
70015: LD_ADDR_VAR 0 2
70019: PUSH
70020: LD_VAR 0 3
70024: ST_TO_ADDR
// end ;
70025: LD_VAR 0 2
70029: RET
// export function ComExitAll ( units ) ; var i ; begin
70030: LD_INT 0
70032: PPUSH
70033: PPUSH
// if not units then
70034: LD_VAR 0 1
70038: NOT
70039: IFFALSE 70043
// exit ;
70041: GO 70069
// for i in units do
70043: LD_ADDR_VAR 0 3
70047: PUSH
70048: LD_VAR 0 1
70052: PUSH
70053: FOR_IN
70054: IFFALSE 70067
// ComExit ( i ) ;
70056: LD_VAR 0 3
70060: PPUSH
70061: CALL 69947 0 1
70065: GO 70053
70067: POP
70068: POP
// end ;
70069: LD_VAR 0 2
70073: RET
// export function ResetHc ; begin
70074: LD_INT 0
70076: PPUSH
// InitHc ;
70077: CALL_OW 19
// hc_importance := 0 ;
70081: LD_ADDR_OWVAR 32
70085: PUSH
70086: LD_INT 0
70088: ST_TO_ADDR
// end ;
70089: LD_VAR 0 1
70093: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70094: LD_INT 0
70096: PPUSH
70097: PPUSH
70098: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70099: LD_ADDR_VAR 0 6
70103: PUSH
70104: LD_VAR 0 1
70108: PUSH
70109: LD_VAR 0 3
70113: PLUS
70114: PUSH
70115: LD_INT 2
70117: DIV
70118: ST_TO_ADDR
// if _x < 0 then
70119: LD_VAR 0 6
70123: PUSH
70124: LD_INT 0
70126: LESS
70127: IFFALSE 70144
// _x := _x * - 1 ;
70129: LD_ADDR_VAR 0 6
70133: PUSH
70134: LD_VAR 0 6
70138: PUSH
70139: LD_INT 1
70141: NEG
70142: MUL
70143: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70144: LD_ADDR_VAR 0 7
70148: PUSH
70149: LD_VAR 0 2
70153: PUSH
70154: LD_VAR 0 4
70158: PLUS
70159: PUSH
70160: LD_INT 2
70162: DIV
70163: ST_TO_ADDR
// if _y < 0 then
70164: LD_VAR 0 7
70168: PUSH
70169: LD_INT 0
70171: LESS
70172: IFFALSE 70189
// _y := _y * - 1 ;
70174: LD_ADDR_VAR 0 7
70178: PUSH
70179: LD_VAR 0 7
70183: PUSH
70184: LD_INT 1
70186: NEG
70187: MUL
70188: ST_TO_ADDR
// result := [ _x , _y ] ;
70189: LD_ADDR_VAR 0 5
70193: PUSH
70194: LD_VAR 0 6
70198: PUSH
70199: LD_VAR 0 7
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: ST_TO_ADDR
// end ;
70208: LD_VAR 0 5
70212: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70213: LD_INT 0
70215: PPUSH
70216: PPUSH
70217: PPUSH
70218: PPUSH
// task := GetTaskList ( unit ) ;
70219: LD_ADDR_VAR 0 7
70223: PUSH
70224: LD_VAR 0 1
70228: PPUSH
70229: CALL_OW 437
70233: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70234: LD_VAR 0 7
70238: NOT
70239: PUSH
70240: LD_VAR 0 1
70244: PPUSH
70245: LD_VAR 0 2
70249: PPUSH
70250: CALL_OW 308
70254: NOT
70255: AND
70256: IFFALSE 70260
// exit ;
70258: GO 70378
// if IsInArea ( unit , area ) then
70260: LD_VAR 0 1
70264: PPUSH
70265: LD_VAR 0 2
70269: PPUSH
70270: CALL_OW 308
70274: IFFALSE 70292
// begin ComMoveToArea ( unit , goAway ) ;
70276: LD_VAR 0 1
70280: PPUSH
70281: LD_VAR 0 3
70285: PPUSH
70286: CALL_OW 113
// exit ;
70290: GO 70378
// end ; if task [ 1 ] [ 1 ] <> M then
70292: LD_VAR 0 7
70296: PUSH
70297: LD_INT 1
70299: ARRAY
70300: PUSH
70301: LD_INT 1
70303: ARRAY
70304: PUSH
70305: LD_STRING M
70307: NONEQUAL
70308: IFFALSE 70312
// exit ;
70310: GO 70378
// x := task [ 1 ] [ 2 ] ;
70312: LD_ADDR_VAR 0 5
70316: PUSH
70317: LD_VAR 0 7
70321: PUSH
70322: LD_INT 1
70324: ARRAY
70325: PUSH
70326: LD_INT 2
70328: ARRAY
70329: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70330: LD_ADDR_VAR 0 6
70334: PUSH
70335: LD_VAR 0 7
70339: PUSH
70340: LD_INT 1
70342: ARRAY
70343: PUSH
70344: LD_INT 3
70346: ARRAY
70347: ST_TO_ADDR
// if InArea ( x , y , area ) then
70348: LD_VAR 0 5
70352: PPUSH
70353: LD_VAR 0 6
70357: PPUSH
70358: LD_VAR 0 2
70362: PPUSH
70363: CALL_OW 309
70367: IFFALSE 70378
// ComStop ( unit ) ;
70369: LD_VAR 0 1
70373: PPUSH
70374: CALL_OW 141
// end ;
70378: LD_VAR 0 4
70382: RET
// export function Abs ( value ) ; begin
70383: LD_INT 0
70385: PPUSH
// result := value ;
70386: LD_ADDR_VAR 0 2
70390: PUSH
70391: LD_VAR 0 1
70395: ST_TO_ADDR
// if value < 0 then
70396: LD_VAR 0 1
70400: PUSH
70401: LD_INT 0
70403: LESS
70404: IFFALSE 70421
// result := value * - 1 ;
70406: LD_ADDR_VAR 0 2
70410: PUSH
70411: LD_VAR 0 1
70415: PUSH
70416: LD_INT 1
70418: NEG
70419: MUL
70420: ST_TO_ADDR
// end ;
70421: LD_VAR 0 2
70425: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70426: LD_INT 0
70428: PPUSH
70429: PPUSH
70430: PPUSH
70431: PPUSH
70432: PPUSH
70433: PPUSH
70434: PPUSH
70435: PPUSH
// if not unit or not building then
70436: LD_VAR 0 1
70440: NOT
70441: PUSH
70442: LD_VAR 0 2
70446: NOT
70447: OR
70448: IFFALSE 70452
// exit ;
70450: GO 70678
// x := GetX ( building ) ;
70452: LD_ADDR_VAR 0 4
70456: PUSH
70457: LD_VAR 0 2
70461: PPUSH
70462: CALL_OW 250
70466: ST_TO_ADDR
// y := GetY ( building ) ;
70467: LD_ADDR_VAR 0 6
70471: PUSH
70472: LD_VAR 0 2
70476: PPUSH
70477: CALL_OW 251
70481: ST_TO_ADDR
// d := GetDir ( building ) ;
70482: LD_ADDR_VAR 0 8
70486: PUSH
70487: LD_VAR 0 2
70491: PPUSH
70492: CALL_OW 254
70496: ST_TO_ADDR
// r := 4 ;
70497: LD_ADDR_VAR 0 9
70501: PUSH
70502: LD_INT 4
70504: ST_TO_ADDR
// for i := 1 to 5 do
70505: LD_ADDR_VAR 0 10
70509: PUSH
70510: DOUBLE
70511: LD_INT 1
70513: DEC
70514: ST_TO_ADDR
70515: LD_INT 5
70517: PUSH
70518: FOR_TO
70519: IFFALSE 70676
// begin _x := ShiftX ( x , d , r + i ) ;
70521: LD_ADDR_VAR 0 5
70525: PUSH
70526: LD_VAR 0 4
70530: PPUSH
70531: LD_VAR 0 8
70535: PPUSH
70536: LD_VAR 0 9
70540: PUSH
70541: LD_VAR 0 10
70545: PLUS
70546: PPUSH
70547: CALL_OW 272
70551: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70552: LD_ADDR_VAR 0 7
70556: PUSH
70557: LD_VAR 0 6
70561: PPUSH
70562: LD_VAR 0 8
70566: PPUSH
70567: LD_VAR 0 9
70571: PUSH
70572: LD_VAR 0 10
70576: PLUS
70577: PPUSH
70578: CALL_OW 273
70582: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70583: LD_VAR 0 5
70587: PPUSH
70588: LD_VAR 0 7
70592: PPUSH
70593: CALL_OW 488
70597: PUSH
70598: LD_VAR 0 5
70602: PPUSH
70603: LD_VAR 0 7
70607: PPUSH
70608: CALL_OW 428
70612: PPUSH
70613: CALL_OW 247
70617: PUSH
70618: LD_INT 3
70620: PUSH
70621: LD_INT 2
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: IN
70628: NOT
70629: AND
70630: IFFALSE 70674
// begin ComMoveXY ( unit , _x , _y ) ;
70632: LD_VAR 0 1
70636: PPUSH
70637: LD_VAR 0 5
70641: PPUSH
70642: LD_VAR 0 7
70646: PPUSH
70647: CALL_OW 111
// result := [ _x , _y ] ;
70651: LD_ADDR_VAR 0 3
70655: PUSH
70656: LD_VAR 0 5
70660: PUSH
70661: LD_VAR 0 7
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: ST_TO_ADDR
// exit ;
70670: POP
70671: POP
70672: GO 70678
// end ; end ;
70674: GO 70518
70676: POP
70677: POP
// end ;
70678: LD_VAR 0 3
70682: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70683: LD_INT 0
70685: PPUSH
70686: PPUSH
70687: PPUSH
// result := 0 ;
70688: LD_ADDR_VAR 0 3
70692: PUSH
70693: LD_INT 0
70695: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70696: LD_VAR 0 1
70700: PUSH
70701: LD_INT 0
70703: LESS
70704: PUSH
70705: LD_VAR 0 1
70709: PUSH
70710: LD_INT 8
70712: GREATER
70713: OR
70714: PUSH
70715: LD_VAR 0 2
70719: PUSH
70720: LD_INT 0
70722: LESS
70723: OR
70724: PUSH
70725: LD_VAR 0 2
70729: PUSH
70730: LD_INT 8
70732: GREATER
70733: OR
70734: IFFALSE 70738
// exit ;
70736: GO 70813
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70738: LD_ADDR_VAR 0 4
70742: PUSH
70743: LD_INT 22
70745: PUSH
70746: LD_VAR 0 2
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PPUSH
70755: CALL_OW 69
70759: PUSH
70760: FOR_IN
70761: IFFALSE 70811
// begin un := UnitShoot ( i ) ;
70763: LD_ADDR_VAR 0 5
70767: PUSH
70768: LD_VAR 0 4
70772: PPUSH
70773: CALL_OW 504
70777: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70778: LD_VAR 0 5
70782: PPUSH
70783: CALL_OW 255
70787: PUSH
70788: LD_VAR 0 1
70792: EQUAL
70793: IFFALSE 70809
// begin result := un ;
70795: LD_ADDR_VAR 0 3
70799: PUSH
70800: LD_VAR 0 5
70804: ST_TO_ADDR
// exit ;
70805: POP
70806: POP
70807: GO 70813
// end ; end ;
70809: GO 70760
70811: POP
70812: POP
// end ;
70813: LD_VAR 0 3
70817: RET
// export function GetCargoBay ( units ) ; begin
70818: LD_INT 0
70820: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70821: LD_ADDR_VAR 0 2
70825: PUSH
70826: LD_VAR 0 1
70830: PPUSH
70831: LD_INT 2
70833: PUSH
70834: LD_INT 34
70836: PUSH
70837: LD_INT 12
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 34
70846: PUSH
70847: LD_INT 51
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 34
70856: PUSH
70857: LD_INT 32
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 34
70866: PUSH
70867: LD_EXP 36
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: PPUSH
70883: CALL_OW 72
70887: ST_TO_ADDR
// end ; end_of_file
70888: LD_VAR 0 2
70892: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70893: LD_VAR 0 1
70897: PUSH
70898: LD_INT 200
70900: DOUBLE
70901: GREATEREQUAL
70902: IFFALSE 70910
70904: LD_INT 299
70906: DOUBLE
70907: LESSEQUAL
70908: IFTRUE 70912
70910: GO 70944
70912: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70913: LD_VAR 0 1
70917: PPUSH
70918: LD_VAR 0 2
70922: PPUSH
70923: LD_VAR 0 3
70927: PPUSH
70928: LD_VAR 0 4
70932: PPUSH
70933: LD_VAR 0 5
70937: PPUSH
70938: CALL 29354 0 5
70942: GO 71021
70944: LD_INT 300
70946: DOUBLE
70947: GREATEREQUAL
70948: IFFALSE 70956
70950: LD_INT 399
70952: DOUBLE
70953: LESSEQUAL
70954: IFTRUE 70958
70956: GO 71020
70958: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70959: LD_VAR 0 1
70963: PPUSH
70964: LD_VAR 0 2
70968: PPUSH
70969: LD_VAR 0 3
70973: PPUSH
70974: LD_VAR 0 4
70978: PPUSH
70979: LD_VAR 0 5
70983: PPUSH
70984: LD_VAR 0 6
70988: PPUSH
70989: LD_VAR 0 7
70993: PPUSH
70994: LD_VAR 0 8
70998: PPUSH
70999: LD_VAR 0 9
71003: PPUSH
71004: LD_VAR 0 10
71008: PPUSH
71009: LD_VAR 0 11
71013: PPUSH
71014: CALL 27242 0 11
71018: GO 71021
71020: POP
// end ;
71021: PPOPN 11
71023: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71024: LD_VAR 0 1
71028: PPUSH
71029: LD_VAR 0 2
71033: PPUSH
71034: LD_VAR 0 3
71038: PPUSH
71039: LD_VAR 0 4
71043: PPUSH
71044: LD_VAR 0 5
71048: PPUSH
71049: CALL 29336 0 5
// end ; end_of_file
71053: PPOPN 5
71055: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71056: LD_VAR 0 1
71060: PPUSH
71061: LD_VAR 0 2
71065: PPUSH
71066: LD_VAR 0 3
71070: PPUSH
71071: LD_VAR 0 4
71075: PPUSH
71076: LD_VAR 0 5
71080: PPUSH
71081: LD_VAR 0 6
71085: PPUSH
71086: CALL 16050 0 6
// end ;
71090: PPOPN 6
71092: END
