// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses , traitor ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 35
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10724 0 0
// PrepareRussianCommander ;
  44: CALL 12260 0 0
// PrepareSouthBase ;
  48: CALL 12356 0 0
// PrepareNorthBase ;
  52: CALL 12694 0 0
// PrepareOtherRussians ;
  56: CALL 13089 0 0
// PrepareHeroes ;
  60: CALL 11045 0 0
// PrepareLisSquad ;
  64: CALL 11415 0 0
// PrepareOtherAmericans ;
  68: CALL 11730 0 0
// Action ;
  72: CALL 250 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 35
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 34
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// traitor := false ;
 237: LD_ADDR_EXP 33
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function Action ; var tmp ; begin
 250: LD_INT 0
 252: PPUSH
 253: PPUSH
// InGameOn ;
 254: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 258: LD_EXP 1
 262: PPUSH
 263: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 267: LD_ADDR_VAR 0 2
 271: PUSH
 272: LD_INT 22
 274: PUSH
 275: LD_INT 4
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: LD_INT 21
 284: PUSH
 285: LD_INT 1
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: LD_EXP 4
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: ST_TO_ADDR
// if Cyrus and Bobby then
 310: LD_EXP 3
 314: IFFALSE 322
 316: PUSH
 317: LD_EXP 2
 321: AND
 322: IFFALSE 652
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 324: LD_EXP 3
 328: PPUSH
 329: LD_INT 43
 331: PPUSH
 332: LD_INT 72
 334: PPUSH
 335: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 339: LD_EXP 2
 343: PPUSH
 344: LD_INT 44
 346: PPUSH
 347: LD_INT 70
 349: PPUSH
 350: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 354: LD_EXP 1
 358: PPUSH
 359: LD_INT 46
 361: PPUSH
 362: LD_INT 73
 364: PPUSH
 365: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 369: LD_EXP 3
 373: PPUSH
 374: LD_STRING D1a-Cyrus-1
 376: PPUSH
 377: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 381: LD_EXP 1
 385: PPUSH
 386: LD_STRING D1a-JMM-1
 388: PPUSH
 389: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 393: LD_EXP 3
 397: PPUSH
 398: LD_INT 37
 400: PPUSH
 401: LD_INT 66
 403: PPUSH
 404: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 408: LD_EXP 2
 412: PPUSH
 413: LD_INT 41
 415: PPUSH
 416: LD_INT 67
 418: PPUSH
 419: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 423: LD_EXP 1
 427: PPUSH
 428: LD_INT 38
 430: PPUSH
 431: LD_INT 64
 433: PPUSH
 434: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 438: LD_EXP 2
 442: PPUSH
 443: LD_STRING D1a-Bobby-2
 445: PPUSH
 446: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 450: LD_EXP 3
 454: PPUSH
 455: LD_INT 35
 457: PPUSH
 458: LD_INT 62
 460: PPUSH
 461: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 465: LD_EXP 2
 469: PPUSH
 470: LD_INT 32
 472: PPUSH
 473: LD_INT 60
 475: PPUSH
 476: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 480: LD_EXP 1
 484: PPUSH
 485: LD_INT 35
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 495: LD_EXP 1
 499: PPUSH
 500: LD_STRING D1a-JMM-2
 502: PPUSH
 503: CALL_OW 88
// ComWalk ( Lisa ) ;
 507: LD_EXP 4
 511: PPUSH
 512: CALL_OW 138
// wait ( 0 0$1 ) ;
 516: LD_INT 35
 518: PPUSH
 519: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 523: LD_EXP 4
 527: PPUSH
 528: LD_EXP 1
 532: PPUSH
 533: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 537: LD_EXP 1
 541: PUSH
 542: LD_EXP 3
 546: PUSH
 547: LD_EXP 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: PPUSH
 557: LD_EXP 4
 561: PPUSH
 562: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 566: LD_VAR 0 2
 570: PUSH
 571: LD_INT 1
 573: ARRAY
 574: PPUSH
 575: LD_INT 33
 577: PPUSH
 578: LD_INT 55
 580: PPUSH
 581: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 585: LD_VAR 0 2
 589: PUSH
 590: LD_INT 2
 592: ARRAY
 593: PPUSH
 594: LD_INT 30
 596: PPUSH
 597: LD_INT 54
 599: PPUSH
 600: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 604: LD_VAR 0 2
 608: PUSH
 609: LD_INT 1
 611: ARRAY
 612: PPUSH
 613: LD_EXP 1
 617: PPUSH
 618: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 622: LD_VAR 0 2
 626: PUSH
 627: LD_INT 2
 629: ARRAY
 630: PPUSH
 631: LD_EXP 1
 635: PPUSH
 636: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 640: LD_EXP 4
 644: PPUSH
 645: LD_STRING D1a-Lisa-2
 647: PPUSH
 648: CALL_OW 88
// end ; if Cyrus and not Bobby then
 652: LD_EXP 3
 656: IFFALSE 665
 658: PUSH
 659: LD_EXP 2
 663: NOT
 664: AND
 665: IFFALSE 870
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 667: LD_EXP 3
 671: PPUSH
 672: LD_INT 43
 674: PPUSH
 675: LD_INT 72
 677: PPUSH
 678: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 682: LD_EXP 1
 686: PPUSH
 687: LD_INT 46
 689: PPUSH
 690: LD_INT 73
 692: PPUSH
 693: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 697: LD_EXP 3
 701: PPUSH
 702: LD_STRING D1a-Cyrus-1
 704: PPUSH
 705: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING D1a-JMM-1
 716: PPUSH
 717: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 721: LD_EXP 3
 725: PPUSH
 726: LD_INT 37
 728: PPUSH
 729: LD_INT 66
 731: PPUSH
 732: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 736: LD_EXP 1
 740: PPUSH
 741: LD_INT 38
 743: PPUSH
 744: LD_INT 64
 746: PPUSH
 747: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 751: LD_EXP 3
 755: PPUSH
 756: LD_STRING D1a-Cyrus-2
 758: PPUSH
 759: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 763: LD_EXP 3
 767: PPUSH
 768: LD_INT 35
 770: PPUSH
 771: LD_INT 62
 773: PPUSH
 774: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 778: LD_EXP 1
 782: PPUSH
 783: LD_INT 35
 785: PPUSH
 786: LD_INT 60
 788: PPUSH
 789: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 793: LD_EXP 1
 797: PPUSH
 798: LD_STRING D1a-JMM-2
 800: PPUSH
 801: CALL_OW 88
// ComWalk ( Lisa ) ;
 805: LD_EXP 4
 809: PPUSH
 810: CALL_OW 138
// wait ( 0 0$1 ) ;
 814: LD_INT 35
 816: PPUSH
 817: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_EXP 1
 830: PPUSH
 831: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 835: LD_EXP 4
 839: PPUSH
 840: LD_STRING D1a-Lisa-2
 842: PPUSH
 843: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 847: LD_EXP 1
 851: PUSH
 852: LD_EXP 3
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: LD_EXP 4
 865: PPUSH
 866: CALL_OW 119
// end ; if not Cyrus and Bobby then
 870: LD_EXP 3
 874: NOT
 875: IFFALSE 883
 877: PUSH
 878: LD_EXP 2
 882: AND
 883: IFFALSE 1162
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 885: LD_EXP 2
 889: PPUSH
 890: LD_INT 44
 892: PPUSH
 893: LD_INT 70
 895: PPUSH
 896: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 900: LD_EXP 1
 904: PPUSH
 905: LD_INT 46
 907: PPUSH
 908: LD_INT 73
 910: PPUSH
 911: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 915: LD_EXP 2
 919: PPUSH
 920: LD_STRING D1a-Bobby-1
 922: PPUSH
 923: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 927: LD_EXP 1
 931: PPUSH
 932: LD_STRING D1a-JMM-1
 934: PPUSH
 935: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 939: LD_EXP 2
 943: PPUSH
 944: LD_INT 37
 946: PPUSH
 947: LD_INT 66
 949: PPUSH
 950: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 954: LD_EXP 1
 958: PPUSH
 959: LD_INT 38
 961: PPUSH
 962: LD_INT 64
 964: PPUSH
 965: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 969: LD_EXP 2
 973: PPUSH
 974: LD_STRING D1a-Bobby-2
 976: PPUSH
 977: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 981: LD_EXP 2
 985: PPUSH
 986: LD_INT 35
 988: PPUSH
 989: LD_INT 62
 991: PPUSH
 992: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 996: LD_EXP 1
1000: PPUSH
1001: LD_INT 35
1003: PPUSH
1004: LD_INT 60
1006: PPUSH
1007: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1011: LD_EXP 1
1015: PPUSH
1016: LD_STRING D1a-JMM-2
1018: PPUSH
1019: CALL_OW 88
// ComWalk ( Lisa ) ;
1023: LD_EXP 4
1027: PPUSH
1028: CALL_OW 138
// wait ( 0 0$1 ) ;
1032: LD_INT 35
1034: PPUSH
1035: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1039: LD_EXP 4
1043: PPUSH
1044: LD_EXP 1
1048: PPUSH
1049: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1053: LD_EXP 1
1057: PUSH
1058: LD_EXP 3
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: PPUSH
1067: LD_EXP 4
1071: PPUSH
1072: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 1
1083: ARRAY
1084: PPUSH
1085: LD_INT 33
1087: PPUSH
1088: LD_INT 55
1090: PPUSH
1091: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1095: LD_VAR 0 2
1099: PUSH
1100: LD_INT 2
1102: ARRAY
1103: PPUSH
1104: LD_INT 30
1106: PPUSH
1107: LD_INT 54
1109: PPUSH
1110: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1114: LD_VAR 0 2
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PPUSH
1123: LD_EXP 1
1127: PPUSH
1128: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: PPUSH
1141: LD_EXP 1
1145: PPUSH
1146: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1150: LD_EXP 4
1154: PPUSH
1155: LD_STRING D1a-Lisa-2
1157: PPUSH
1158: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1162: LD_EXP 3
1166: NOT
1167: IFFALSE 1176
1169: PUSH
1170: LD_EXP 2
1174: NOT
1175: AND
1176: IFFALSE 1390
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1178: LD_EXP 1
1182: PPUSH
1183: LD_INT 37
1185: PPUSH
1186: LD_INT 66
1188: PPUSH
1189: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1193: LD_EXP 1
1197: PPUSH
1198: LD_STRING D1b-JMM-1
1200: PPUSH
1201: CALL_OW 88
// ComCrawl ( JMM ) ;
1205: LD_EXP 1
1209: PPUSH
1210: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 35
1221: PPUSH
1222: LD_INT 60
1224: PPUSH
1225: CALL_OW 171
// wait ( 0 0$8 ) ;
1229: LD_INT 280
1231: PPUSH
1232: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1236: LD_EXP 1
1240: PPUSH
1241: LD_STRING D1b-JMM-1a
1243: PPUSH
1244: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1248: LD_EXP 1
1252: PUSH
1253: LD_EXP 4
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PPUSH
1262: CALL_OW 138
// wait ( 0 0$1 ) ;
1266: LD_INT 35
1268: PPUSH
1269: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1273: LD_EXP 4
1277: PPUSH
1278: LD_EXP 1
1282: PPUSH
1283: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1287: LD_EXP 1
1291: PUSH
1292: EMPTY
1293: LIST
1294: PPUSH
1295: LD_EXP 4
1299: PPUSH
1300: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1304: LD_VAR 0 2
1308: PUSH
1309: LD_INT 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 33
1315: PPUSH
1316: LD_INT 55
1318: PPUSH
1319: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1323: LD_VAR 0 2
1327: PUSH
1328: LD_INT 2
1330: ARRAY
1331: PPUSH
1332: LD_INT 30
1334: PPUSH
1335: LD_INT 54
1337: PPUSH
1338: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1342: LD_VAR 0 2
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: LD_EXP 1
1355: PPUSH
1356: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1360: LD_VAR 0 2
1364: PUSH
1365: LD_INT 2
1367: ARRAY
1368: PPUSH
1369: LD_EXP 1
1373: PPUSH
1374: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1378: LD_EXP 4
1382: PPUSH
1383: LD_STRING D1b-Lisa-1
1385: PPUSH
1386: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1390: LD_EXP 1
1394: PPUSH
1395: LD_STRING D1-JMM-1
1397: PPUSH
1398: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1402: LD_EXP 4
1406: PPUSH
1407: LD_STRING D1-Lisa-1
1409: PPUSH
1410: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1414: LD_EXP 1
1418: PPUSH
1419: LD_STRING D1-JMM-2
1421: PPUSH
1422: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1426: LD_EXP 9
1430: PPUSH
1431: LD_STRING D1-Pow-2
1433: PPUSH
1434: CALL_OW 586
// if Cyrus then
1438: LD_EXP 3
1442: IFFALSE 1468
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1444: LD_EXP 3
1448: PPUSH
1449: LD_STRING D1-Cyrus-2
1451: PPUSH
1452: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1456: LD_EXP 1
1460: PPUSH
1461: LD_STRING D1-JMM-3
1463: PPUSH
1464: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1468: LD_EXP 9
1472: PPUSH
1473: LD_STRING D1-Pow-3
1475: PPUSH
1476: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1480: LD_EXP 1
1484: PPUSH
1485: LD_STRING D1-JMM-4
1487: PPUSH
1488: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1492: LD_EXP 9
1496: PPUSH
1497: LD_STRING D1-Pow-4
1499: PPUSH
1500: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1504: LD_EXP 9
1508: PPUSH
1509: LD_STRING D1-Pow-4a
1511: PPUSH
1512: CALL_OW 586
// if Cyrus then
1516: LD_EXP 3
1520: IFFALSE 1534
// Say ( Cyrus , D1-Cyrus-4 ) ;
1522: LD_EXP 3
1526: PPUSH
1527: LD_STRING D1-Cyrus-4
1529: PPUSH
1530: CALL_OW 88
// if Bobby then
1534: LD_EXP 2
1538: IFFALSE 1576
// begin Say ( Bobby , D1-Bobby-4 ) ;
1540: LD_EXP 2
1544: PPUSH
1545: LD_STRING D1-Bobby-4
1547: PPUSH
1548: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1552: LD_EXP 4
1556: PPUSH
1557: LD_STRING D1-Lisa-4
1559: PPUSH
1560: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1564: LD_EXP 1
1568: PPUSH
1569: LD_STRING D1-JMM-5
1571: PPUSH
1572: CALL_OW 88
// end ; InGameOff ;
1576: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1580: LD_INT 22
1582: PUSH
1583: LD_INT 4
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PPUSH
1590: CALL_OW 69
1594: PUSH
1595: LD_EXP 6
1599: PUSH
1600: LD_EXP 7
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: DIFF
1609: PPUSH
1610: LD_INT 1
1612: PPUSH
1613: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1617: LD_STRING M1
1619: PPUSH
1620: CALL_OW 337
// SaveForQuickRestart ;
1624: CALL_OW 22
// end ;
1628: LD_VAR 0 1
1632: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1633: LD_INT 7
1635: PPUSH
1636: LD_INT 22
1638: PUSH
1639: LD_INT 1
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PPUSH
1646: CALL_OW 70
1650: PUSH
1651: LD_INT 0
1653: GREATER
1654: IFFALSE 2067
1656: GO 1658
1658: DISABLE
// begin InGameOn ;
1659: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1663: LD_INT 22
1665: PUSH
1666: LD_INT 1
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 21
1675: PUSH
1676: LD_INT 1
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PPUSH
1687: CALL_OW 69
1691: PPUSH
1692: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1696: LD_INT 24
1698: PPUSH
1699: LD_INT 32
1701: PPUSH
1702: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1706: LD_EXP 5
1710: PPUSH
1711: LD_INT 4
1713: PPUSH
1714: LD_INT 1
1716: PPUSH
1717: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1721: LD_EXP 5
1725: PPUSH
1726: LD_INT 4
1728: PPUSH
1729: CALL_OW 336
// wait ( 0 0$1 ) ;
1733: LD_INT 35
1735: PPUSH
1736: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1740: LD_EXP 5
1744: PPUSH
1745: LD_INT 27
1747: PPUSH
1748: LD_INT 38
1750: PPUSH
1751: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_EXP 1
1764: PPUSH
1765: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1769: LD_INT 22
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 21
1781: PUSH
1782: LD_INT 1
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PPUSH
1793: CALL_OW 69
1797: PUSH
1798: LD_EXP 5
1802: PUSH
1803: EMPTY
1804: LIST
1805: DIFF
1806: PPUSH
1807: LD_EXP 5
1811: PPUSH
1812: CALL_OW 119
// wait ( 0 0$1 ) ;
1816: LD_INT 35
1818: PPUSH
1819: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1823: LD_EXP 5
1827: PPUSH
1828: LD_STRING D2a-Khat-1
1830: PPUSH
1831: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1835: LD_EXP 1
1839: PPUSH
1840: LD_STRING D2a-JMM-1
1842: PPUSH
1843: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1847: LD_EXP 5
1851: PPUSH
1852: LD_STRING D2a-Khat-2
1854: PPUSH
1855: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1859: LD_EXP 1
1863: PPUSH
1864: LD_STRING D2a-JMM-2
1866: PPUSH
1867: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1871: LD_EXP 5
1875: PPUSH
1876: LD_STRING D2a-Khat-3
1878: PPUSH
1879: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1883: LD_EXP 1
1887: PPUSH
1888: LD_STRING D2a-JMM-3
1890: PPUSH
1891: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1895: LD_EXP 5
1899: PPUSH
1900: LD_STRING D2a-Khat-4
1902: PPUSH
1903: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1907: LD_EXP 1
1911: PPUSH
1912: LD_STRING D2a-JMM-4
1914: PPUSH
1915: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1919: LD_EXP 5
1923: PPUSH
1924: LD_STRING D2a-Khat-5
1926: PPUSH
1927: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1931: LD_EXP 1
1935: PPUSH
1936: LD_STRING D2a-JMM-5
1938: PPUSH
1939: CALL_OW 88
// InGameOff ;
1943: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
1947: LD_INT 22
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 21
1959: PUSH
1960: LD_INT 1
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 3
1969: PUSH
1970: LD_INT 24
1972: PUSH
1973: LD_INT 800
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PPUSH
1989: CALL_OW 69
1993: IFFALSE 2067
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1995: LD_EXP 5
1999: PPUSH
2000: LD_INT 22
2002: PUSH
2003: LD_INT 1
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: PUSH
2010: LD_INT 21
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 3
2022: PUSH
2023: LD_INT 24
2025: PUSH
2026: LD_INT 1000
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: LIST
2041: PPUSH
2042: CALL_OW 69
2046: PUSH
2047: LD_INT 1
2049: ARRAY
2050: PPUSH
2051: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2055: LD_EXP 5
2059: PPUSH
2060: LD_STRING D2b-Khat-1
2062: PPUSH
2063: CALL_OW 88
// end ; end ;
2067: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2068: LD_INT 15
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 70
2085: IFFALSE 3292
2087: GO 2089
2089: DISABLE
2090: LD_INT 0
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2097: LD_ADDR_VAR 0 2
2101: PUSH
2102: LD_INT 999
2104: PUSH
2105: LD_INT 999
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: EMPTY
2113: LIST
2114: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2115: LD_ADDR_VAR 0 4
2119: PUSH
2120: LD_INT 22
2122: PUSH
2123: LD_INT 1
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 21
2132: PUSH
2133: LD_INT 1
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PPUSH
2144: CALL_OW 69
2148: PUSH
2149: LD_EXP 1
2153: PUSH
2154: LD_EXP 2
2158: PUSH
2159: LD_EXP 3
2163: PUSH
2164: LD_EXP 4
2168: PUSH
2169: LD_EXP 5
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: DIFF
2181: ST_TO_ADDR
// PrepareDeadSoldiers ;
2182: CALL 11872 0 0
// spotCorpses = 1 ;
2186: LD_ADDR_EXP 32
2190: PUSH
2191: LD_INT 1
2193: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2194: LD_INT 70
2196: PPUSH
2197: CALL_OW 67
// InGameOn ;
2201: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2205: LD_INT 23
2207: PPUSH
2208: LD_INT 12
2210: PPUSH
2211: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2215: LD_ADDR_VAR 0 3
2219: PUSH
2220: LD_VAR 0 2
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PUSH
2229: LD_INT 2
2231: ARRAY
2232: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_INT 22
2240: PUSH
2241: LD_INT 1
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 21
2250: PUSH
2251: LD_INT 1
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PPUSH
2262: CALL_OW 69
2266: PUSH
2267: LD_EXP 1
2271: PUSH
2272: LD_EXP 5
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: DIFF
2281: PUSH
2282: FOR_IN
2283: IFFALSE 2334
// if IsOK ( i ) then
2285: LD_VAR 0 1
2289: PPUSH
2290: CALL_OW 302
2294: IFFALSE 2332
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2296: LD_ADDR_VAR 0 2
2300: PUSH
2301: LD_VAR 0 2
2305: PUSH
2306: LD_VAR 0 1
2310: PUSH
2311: LD_VAR 0 1
2315: PPUSH
2316: LD_INT 16
2318: PPUSH
2319: CALL_OW 299
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: PUSH
2328: EMPTY
2329: LIST
2330: ADD
2331: ST_TO_ADDR
2332: GO 2282
2334: POP
2335: POP
// for i = 2 to distanceTab do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 2
2344: DEC
2345: ST_TO_ADDR
2346: LD_VAR 0 2
2350: PUSH
2351: FOR_TO
2352: IFFALSE 2398
// if distanceTab [ i ] [ 2 ] < min then
2354: LD_VAR 0 2
2358: PUSH
2359: LD_VAR 0 1
2363: ARRAY
2364: PUSH
2365: LD_INT 2
2367: ARRAY
2368: PUSH
2369: LD_VAR 0 3
2373: LESS
2374: IFFALSE 2396
// min = distanceTab [ i ] [ 2 ] ;
2376: LD_ADDR_VAR 0 3
2380: PUSH
2381: LD_VAR 0 2
2385: PUSH
2386: LD_VAR 0 1
2390: ARRAY
2391: PUSH
2392: LD_INT 2
2394: ARRAY
2395: ST_TO_ADDR
2396: GO 2351
2398: POP
2399: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2400: LD_ADDR_VAR 0 1
2404: PUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 1
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 21
2417: PUSH
2418: LD_INT 1
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PPUSH
2429: CALL_OW 69
2433: PUSH
2434: LD_EXP 1
2438: PUSH
2439: EMPTY
2440: LIST
2441: DIFF
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2514
// begin ComMoveToArea ( i , DeadCutscene ) ;
2446: LD_VAR 0 1
2450: PPUSH
2451: LD_INT 28
2453: PPUSH
2454: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2458: LD_EXP 1
2462: PPUSH
2463: LD_INT 30
2465: PPUSH
2466: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2470: LD_VAR 0 1
2474: PPUSH
2475: LD_INT 23
2477: PPUSH
2478: LD_INT 11
2480: PPUSH
2481: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2485: LD_EXP 1
2489: PPUSH
2490: LD_INT 23
2492: PPUSH
2493: LD_INT 11
2495: PPUSH
2496: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2500: LD_EXP 36
2504: PPUSH
2505: LD_INT 250
2507: PPUSH
2508: CALL_OW 234
// end ;
2512: GO 2443
2514: POP
2515: POP
// for i = 2 to distanceTab do
2516: LD_ADDR_VAR 0 1
2520: PUSH
2521: DOUBLE
2522: LD_INT 2
2524: DEC
2525: ST_TO_ADDR
2526: LD_VAR 0 2
2530: PUSH
2531: FOR_TO
2532: IFFALSE 2926
// begin if distanceTab [ i ] [ 2 ] = min then
2534: LD_VAR 0 2
2538: PUSH
2539: LD_VAR 0 1
2543: ARRAY
2544: PUSH
2545: LD_INT 2
2547: ARRAY
2548: PUSH
2549: LD_VAR 0 3
2553: EQUAL
2554: IFFALSE 2924
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2556: LD_VAR 0 2
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PUSH
2571: LD_EXP 2
2575: EQUAL
2576: IFFALSE 2590
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2578: LD_EXP 2
2582: PPUSH
2583: LD_STRING DCorpses-Bobby-1
2585: PPUSH
2586: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2590: LD_VAR 0 2
2594: PUSH
2595: LD_VAR 0 1
2599: ARRAY
2600: PUSH
2601: LD_INT 1
2603: ARRAY
2604: PUSH
2605: LD_EXP 3
2609: EQUAL
2610: IFFALSE 2624
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2612: LD_EXP 3
2616: PPUSH
2617: LD_STRING DCorpses-Cyrus-1
2619: PPUSH
2620: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2624: LD_VAR 0 2
2628: PUSH
2629: LD_VAR 0 1
2633: ARRAY
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PUSH
2639: LD_EXP 4
2643: EQUAL
2644: IFFALSE 2658
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2646: LD_EXP 4
2650: PPUSH
2651: LD_STRING DCorpses-Lisa-1
2653: PPUSH
2654: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 1
2667: ARRAY
2668: PUSH
2669: LD_INT 1
2671: ARRAY
2672: PUSH
2673: LD_VAR 0 4
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: EQUAL
2682: IFFALSE 2703
2684: PUSH
2685: LD_VAR 0 4
2689: PUSH
2690: LD_INT 1
2692: ARRAY
2693: PPUSH
2694: CALL_OW 258
2698: PUSH
2699: LD_INT 1
2701: EQUAL
2702: AND
2703: IFFALSE 2721
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2705: LD_VAR 0 4
2709: PUSH
2710: LD_INT 1
2712: ARRAY
2713: PPUSH
2714: LD_STRING DCorpses-Sol1-1
2716: PPUSH
2717: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2721: LD_VAR 0 2
2725: PUSH
2726: LD_VAR 0 1
2730: ARRAY
2731: PUSH
2732: LD_INT 1
2734: ARRAY
2735: PUSH
2736: LD_VAR 0 4
2740: PUSH
2741: LD_INT 1
2743: ARRAY
2744: EQUAL
2745: IFFALSE 2766
2747: PUSH
2748: LD_VAR 0 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 258
2761: PUSH
2762: LD_INT 2
2764: EQUAL
2765: AND
2766: IFFALSE 2784
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2768: LD_VAR 0 4
2772: PUSH
2773: LD_INT 1
2775: ARRAY
2776: PPUSH
2777: LD_STRING DCorpses-FSol1-1
2779: PPUSH
2780: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2784: LD_VAR 0 2
2788: PUSH
2789: LD_VAR 0 1
2793: ARRAY
2794: PUSH
2795: LD_INT 1
2797: ARRAY
2798: PUSH
2799: LD_VAR 0 4
2803: PUSH
2804: LD_INT 2
2806: ARRAY
2807: EQUAL
2808: IFFALSE 2829
2810: PUSH
2811: LD_VAR 0 4
2815: PUSH
2816: LD_INT 2
2818: ARRAY
2819: PPUSH
2820: CALL_OW 258
2824: PUSH
2825: LD_INT 1
2827: EQUAL
2828: AND
2829: IFFALSE 2847
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2831: LD_VAR 0 4
2835: PUSH
2836: LD_INT 2
2838: ARRAY
2839: PPUSH
2840: LD_STRING DCorpses-Sol1-1
2842: PPUSH
2843: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2847: LD_VAR 0 2
2851: PUSH
2852: LD_VAR 0 1
2856: ARRAY
2857: PUSH
2858: LD_INT 1
2860: ARRAY
2861: PUSH
2862: LD_VAR 0 4
2866: PUSH
2867: LD_INT 2
2869: ARRAY
2870: EQUAL
2871: IFFALSE 2892
2873: PUSH
2874: LD_VAR 0 4
2878: PUSH
2879: LD_INT 2
2881: ARRAY
2882: PPUSH
2883: CALL_OW 258
2887: PUSH
2888: LD_INT 2
2890: EQUAL
2891: AND
2892: IFFALSE 2910
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2894: LD_VAR 0 4
2898: PUSH
2899: LD_INT 2
2901: ARRAY
2902: PPUSH
2903: LD_STRING DCorpses-FSol1-1
2905: PPUSH
2906: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2910: LD_EXP 36
2914: PPUSH
2915: LD_INT 150
2917: PPUSH
2918: CALL_OW 234
// break ;
2922: GO 2926
// end ; end ;
2924: GO 2531
2926: POP
2927: POP
// p := 0 ;
2928: LD_ADDR_VAR 0 5
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2936: LD_INT 35
2938: PPUSH
2939: CALL_OW 67
// p := p + 1 ;
2943: LD_ADDR_VAR 0 5
2947: PUSH
2948: LD_VAR 0 5
2952: PUSH
2953: LD_INT 1
2955: PLUS
2956: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2957: LD_ADDR_VAR 0 1
2961: PUSH
2962: LD_INT 22
2964: PUSH
2965: LD_INT 1
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 21
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PPUSH
2986: CALL_OW 69
2990: PUSH
2991: LD_EXP 1
2995: PUSH
2996: EMPTY
2997: LIST
2998: DIFF
2999: PUSH
3000: FOR_IN
3001: IFFALSE 3071
// begin ComMoveToArea ( i , DeadCutscene ) ;
3003: LD_VAR 0 1
3007: PPUSH
3008: LD_INT 28
3010: PPUSH
3011: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3015: LD_EXP 1
3019: PPUSH
3020: LD_INT 30
3022: PPUSH
3023: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3027: LD_VAR 0 1
3031: PPUSH
3032: LD_INT 23
3034: PPUSH
3035: LD_INT 11
3037: PPUSH
3038: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3042: LD_EXP 1
3046: PPUSH
3047: LD_INT 23
3049: PPUSH
3050: LD_INT 11
3052: PPUSH
3053: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3057: LD_EXP 36
3061: PPUSH
3062: LD_INT 250
3064: PPUSH
3065: CALL_OW 234
// end ;
3069: GO 3000
3071: POP
3072: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3073: LD_EXP 1
3077: PPUSH
3078: LD_INT 30
3080: PPUSH
3081: CALL_OW 308
3085: IFTRUE 3097
3087: PUSH
3088: LD_VAR 0 5
3092: PUSH
3093: LD_INT 16
3095: GREATEREQUAL
3096: OR
3097: IFFALSE 2936
// wait ( 0 0$1 ) ;
3099: LD_INT 35
3101: PPUSH
3102: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3106: LD_EXP 1
3110: PPUSH
3111: LD_STRING DCorpses-JMM-1
3113: PPUSH
3114: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3118: LD_EXP 36
3122: PPUSH
3123: LD_INT 100
3125: PPUSH
3126: CALL_OW 234
// if IsOK ( Khatam ) then
3130: LD_EXP 5
3134: PPUSH
3135: CALL_OW 302
3139: IFFALSE 3276
// begin repeat wait ( 0 0$1 ) ;
3141: LD_INT 35
3143: PPUSH
3144: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3148: LD_EXP 5
3152: PPUSH
3153: LD_EXP 36
3157: PPUSH
3158: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3162: LD_EXP 5
3166: PPUSH
3167: LD_EXP 36
3171: PPUSH
3172: CALL_OW 296
3176: PUSH
3177: LD_INT 2
3179: LESS
3180: IFFALSE 3141
// spotCorpses = 0 ;
3182: LD_ADDR_EXP 32
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3190: LD_EXP 36
3194: PPUSH
3195: LD_INT 10
3197: PPUSH
3198: CALL_OW 234
// wait ( 0 0$3 ) ;
3202: LD_INT 105
3204: PPUSH
3205: CALL_OW 67
// KillUnit ( DyingSold ) ;
3209: LD_EXP 36
3213: PPUSH
3214: CALL_OW 66
// wait ( 0 0$1 ) ;
3218: LD_INT 35
3220: PPUSH
3221: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3225: LD_EXP 1
3229: PUSH
3230: LD_EXP 5
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3243: LD_EXP 5
3247: PPUSH
3248: LD_EXP 1
3252: PPUSH
3253: CALL_OW 119
// wait ( 0 0$1 ) ;
3257: LD_INT 35
3259: PPUSH
3260: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3264: LD_EXP 5
3268: PPUSH
3269: LD_STRING DCorpses-Khat-1
3271: PPUSH
3272: CALL_OW 88
// end ; InGameOff ;
3276: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3280: LD_EXP 1
3284: PPUSH
3285: LD_STRING DCorpses-JMM-2
3287: PPUSH
3288: CALL_OW 88
// end ;
3292: PPOPN 5
3294: END
// every 0 0$1 trigger spotCorpses = 1 do
3295: LD_EXP 32
3299: PUSH
3300: LD_INT 1
3302: EQUAL
3303: IFFALSE 3321
3305: GO 3307
3307: DISABLE
// begin enable ;
3308: ENABLE
// SetLives ( DyingSold , 10 ) ;
3309: LD_EXP 36
3313: PPUSH
3314: LD_INT 10
3316: PPUSH
3317: CALL_OW 234
// end ;
3321: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3322: LD_INT 8
3324: PPUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 1
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 70
3339: IFTRUE 3381
3341: PUSH
3342: LD_INT 22
3344: PUSH
3345: LD_INT 1
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PPUSH
3352: CALL_OW 69
3356: PPUSH
3357: LD_EXP 7
3361: PPUSH
3362: CALL_OW 74
3366: PPUSH
3367: LD_EXP 7
3371: PPUSH
3372: CALL_OW 296
3376: PUSH
3377: LD_INT 13
3379: LESS
3380: OR
3381: IFFALSE 3562
3383: GO 3385
3385: DISABLE
3386: LD_INT 0
3388: PPUSH
// begin InGameOn ;
3389: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3393: LD_EXP 7
3397: PPUSH
3398: LD_INT 250
3400: PPUSH
3401: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3405: LD_EXP 6
3409: PPUSH
3410: LD_INT 1000
3412: PUSH
3413: LD_INT 800
3415: PUSH
3416: LD_INT 750
3418: PUSH
3419: LD_INT 700
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: PUSH
3428: LD_OWVAR 67
3432: ARRAY
3433: PPUSH
3434: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3438: LD_INT 3
3440: PPUSH
3441: LD_INT 4
3443: PPUSH
3444: LD_INT 2
3446: PPUSH
3447: LD_INT 1
3449: PPUSH
3450: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3454: LD_EXP 6
3458: PUSH
3459: LD_EXP 7
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: PPUSH
3468: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3472: LD_ADDR_VAR 0 1
3476: PUSH
3477: LD_INT 9
3479: PPUSH
3480: LD_INT 22
3482: PUSH
3483: LD_INT 3
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PPUSH
3490: CALL_OW 70
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 4
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: UNION
3510: PUSH
3511: FOR_IN
3512: IFFALSE 3525
// ComFree ( i ) ;
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 139
3523: GO 3511
3525: POP
3526: POP
// wait ( 0 0$1 ) ;
3527: LD_INT 35
3529: PPUSH
3530: CALL_OW 67
// InGameOff ;
3534: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3538: LD_EXP 6
3542: PPUSH
3543: LD_STRING DF-Sol1-1
3545: PPUSH
3546: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3550: LD_EXP 1
3554: PPUSH
3555: LD_STRING DF-JMM-1
3557: PPUSH
3558: CALL_OW 88
// end ;
3562: PPOPN 1
3564: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3565: LD_INT 19
3567: PPUSH
3568: LD_INT 22
3570: PUSH
3571: LD_INT 3
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 70
3582: PUSH
3583: LD_INT 0
3585: EQUAL
3586: IFFALSE 3695
3588: GO 3590
3590: DISABLE
// begin if not IsDead ( Brian ) then
3591: LD_EXP 6
3595: PPUSH
3596: CALL_OW 301
3600: NOT
3601: IFFALSE 3615
// SetSide ( Brian , 1 ) ;
3603: LD_EXP 6
3607: PPUSH
3608: LD_INT 1
3610: PPUSH
3611: CALL_OW 235
// if not IsDead ( Jerry ) then
3615: LD_EXP 7
3619: PPUSH
3620: CALL_OW 301
3624: NOT
3625: IFFALSE 3639
// SetSide ( Jerry , 1 ) ;
3627: LD_EXP 7
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3639: LD_INT 22
3641: PUSH
3642: LD_INT 1
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 25
3651: PUSH
3652: LD_INT 4
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PPUSH
3663: CALL_OW 69
3667: IFFALSE 3683
// Say ( JMM , DFa-JMM-1 ) else
3669: LD_EXP 1
3673: PPUSH
3674: LD_STRING DFa-JMM-1
3676: PPUSH
3677: CALL_OW 88
3681: GO 3695
// Say ( JMM , DFa-JMM-1a ) ;
3683: LD_EXP 1
3687: PPUSH
3688: LD_STRING DFa-JMM-1a
3690: PPUSH
3691: CALL_OW 88
// end ;
3695: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3696: LD_INT 19
3698: PPUSH
3699: LD_INT 22
3701: PUSH
3702: LD_INT 3
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PPUSH
3709: CALL_OW 70
3713: PUSH
3714: LD_INT 0
3716: EQUAL
3717: IFFALSE 3731
3719: PUSH
3720: LD_EXP 6
3724: PPUSH
3725: CALL_OW 302
3729: NOT
3730: AND
3731: IFFALSE 3817
3733: GO 3735
3735: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3736: LD_INT 35
3738: PPUSH
3739: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3743: LD_EXP 6
3747: PPUSH
3748: CALL_OW 256
3752: PUSH
3753: LD_INT 250
3755: GREATER
3756: IFFALSE 3736
// Say ( Brian , DFb-Sol1-1 ) ;
3758: LD_EXP 6
3762: PPUSH
3763: LD_STRING DFb-Sol1-1
3765: PPUSH
3766: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3770: LD_EXP 6
3774: PPUSH
3775: LD_INT 78
3777: PPUSH
3778: LD_INT 74
3780: PPUSH
3781: CALL_OW 111
// if IsDead ( Jerry ) then
3785: LD_EXP 7
3789: PPUSH
3790: CALL_OW 301
3794: IFFALSE 3810
// Say ( Brian , DFb-Sol1-1a ) else
3796: LD_EXP 6
3800: PPUSH
3801: LD_STRING DFb-Sol1-1a
3803: PPUSH
3804: CALL_OW 88
3808: GO 3817
// SetAchievement ( ACH_JERRY ) ;
3810: LD_STRING ACH_JERRY
3812: PPUSH
3813: CALL_OW 543
// end ;
3817: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3818: LD_INT 22
3820: PUSH
3821: LD_INT 1
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 21
3830: PUSH
3831: LD_INT 2
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PPUSH
3842: CALL_OW 69
3846: PUSH
3847: LD_INT 0
3849: EQUAL
3850: IFFALSE 3942
3852: GO 3854
3854: DISABLE
3855: LD_INT 0
3857: PPUSH
// begin enable ;
3858: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3859: LD_ADDR_VAR 0 1
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 3
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 21
3876: PUSH
3877: LD_INT 3
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: LD_INT 30
3886: PUSH
3887: LD_INT 31
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: FOR_IN
3905: IFFALSE 3940
// begin if See ( 1 , i ) then
3907: LD_INT 1
3909: PPUSH
3910: LD_VAR 0 1
3914: PPUSH
3915: CALL_OW 292
3919: IFFALSE 3938
// begin disable ;
3921: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3922: LD_EXP 1
3926: PPUSH
3927: LD_STRING DX1-JMM-1
3929: PPUSH
3930: CALL_OW 88
// exit ;
3934: POP
3935: POP
3936: GO 3942
// end ; end ;
3938: GO 3904
3940: POP
3941: POP
// end ;
3942: PPOPN 1
3944: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 11
3950: PPUSH
3951: CALL_OW 294
3955: IFFALSE 4218
3957: GO 3959
3959: DISABLE
3960: LD_INT 0
3962: PPUSH
3963: PPUSH
3964: PPUSH
// begin DialogueOn ;
3965: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3969: LD_INT 11
3971: PPUSH
3972: LD_INT 22
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: PUSH
3982: LD_INT 21
3984: PUSH
3985: LD_INT 1
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PPUSH
3996: CALL_OW 70
4000: PUSH
4001: LD_INT 1
4003: ARRAY
4004: PPUSH
4005: LD_STRING DX3-Rus1-1
4007: PPUSH
4008: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4012: LD_EXP 1
4016: PPUSH
4017: LD_STRING DX3-JMM-1
4019: PPUSH
4020: CALL_OW 88
// DialogueOff ;
4024: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4028: LD_ADDR_VAR 0 1
4032: PUSH
4033: LD_INT 11
4035: PPUSH
4036: LD_INT 22
4038: PUSH
4039: LD_INT 3
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 25
4048: PUSH
4049: LD_INT 1
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 70
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4086
// southBaseDefenders = southBaseDefenders ^ i ;
4068: LD_ADDR_EXP 25
4072: PUSH
4073: LD_EXP 25
4077: PUSH
4078: LD_VAR 0 1
4082: ADD
4083: ST_TO_ADDR
4084: GO 4065
4086: POP
4087: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$2 , 0 0$1 ] [ Difficulty ] ) ;
4088: LD_INT 175
4090: PUSH
4091: LD_INT 140
4093: PUSH
4094: LD_INT 70
4096: PUSH
4097: LD_INT 35
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: PUSH
4106: LD_OWVAR 67
4110: ARRAY
4111: PPUSH
4112: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4116: LD_ADDR_VAR 0 3
4120: PUSH
4121: LD_INT 22
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PUSH
4131: LD_INT 21
4133: PUSH
4134: LD_INT 1
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: LD_INT 25
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: PPUSH
4156: CALL_OW 69
4160: ST_TO_ADDR
// if not mech then
4161: LD_VAR 0 3
4165: NOT
4166: IFFALSE 4170
// exit ;
4168: GO 4218
// ComExitBuilding ( mech ) ;
4170: LD_VAR 0 3
4174: PPUSH
4175: CALL_OW 122
// wait ( 0 0$1 ) ;
4179: LD_INT 35
4181: PPUSH
4182: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4186: LD_VAR 0 3
4190: PUSH
4191: LD_INT 1
4193: ARRAY
4194: PPUSH
4195: LD_INT 5
4197: PPUSH
4198: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4202: LD_VAR 0 3
4206: PUSH
4207: LD_INT 2
4209: ARRAY
4210: PPUSH
4211: LD_INT 4
4213: PPUSH
4214: CALL_OW 180
// end ;
4218: PPOPN 3
4220: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4221: LD_INT 1
4223: PPUSH
4224: LD_INT 5
4226: PPUSH
4227: CALL_OW 292
4231: IFTRUE 4245
4233: PUSH
4234: LD_INT 1
4236: PPUSH
4237: LD_INT 4
4239: PPUSH
4240: CALL_OW 292
4244: OR
4245: IFFALSE 4329
4247: GO 4249
4249: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4250: LD_INT 5
4252: PUSH
4253: LD_INT 4
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PPUSH
4260: CALL_OW 85
// if IsOK ( Bobby ) then
4264: LD_EXP 2
4268: PPUSH
4269: CALL_OW 302
4273: IFFALSE 4309
// begin DialogueOn ;
4275: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4279: LD_EXP 2
4283: PPUSH
4284: LD_STRING DX2-Bobby-1
4286: PPUSH
4287: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4291: LD_EXP 1
4295: PPUSH
4296: LD_STRING DX2-JMM-1a
4298: PPUSH
4299: CALL_OW 88
// DialogueOff ;
4303: CALL_OW 7
// end else
4307: GO 4329
// begin DialogueOn ;
4309: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4313: LD_EXP 1
4317: PPUSH
4318: LD_STRING DX2-JMM-1
4320: PPUSH
4321: CALL_OW 88
// DialogueOff ;
4325: CALL_OW 7
// end ; end ;
4329: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4330: LD_INT 22
4332: PUSH
4333: LD_INT 1
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: PUSH
4340: LD_INT 23
4342: PUSH
4343: LD_INT 3
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 21
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 34
4362: PUSH
4363: LD_INT 42
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: PPUSH
4376: CALL_OW 69
4380: IFFALSE 4801
4382: GO 4384
4384: DISABLE
4385: LD_INT 0
4387: PPUSH
4388: PPUSH
4389: PPUSH
4390: PPUSH
4391: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4392: LD_ADDR_VAR 0 1
4396: PUSH
4397: LD_INT 22
4399: PUSH
4400: LD_INT 1
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: LD_INT 23
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 21
4419: PUSH
4420: LD_INT 2
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 34
4429: PUSH
4430: LD_INT 42
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: PPUSH
4443: CALL_OW 69
4447: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4448: LD_ADDR_VAR 0 3
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 26
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: LD_EXP 1
4497: PUSH
4498: LD_EXP 3
4502: PUSH
4503: LD_EXP 2
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: LIST
4512: DIFF
4513: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4514: LD_ADDR_VAR 0 4
4518: PUSH
4519: LD_INT 22
4521: PUSH
4522: LD_INT 1
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 21
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: LD_INT 26
4541: PUSH
4542: LD_INT 2
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 69
4558: PUSH
4559: LD_EXP 4
4563: PUSH
4564: EMPTY
4565: LIST
4566: DIFF
4567: ST_TO_ADDR
// if not tmp then
4568: LD_VAR 0 1
4572: NOT
4573: IFFALSE 4577
// exit ;
4575: GO 4801
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4577: LD_ADDR_VAR 0 2
4581: PUSH
4582: LD_VAR 0 1
4586: PUSH
4587: LD_INT 1
4589: ARRAY
4590: PPUSH
4591: CALL_OW 311
4595: ST_TO_ADDR
// if not speaker then
4596: LD_VAR 0 2
4600: NOT
4601: IFFALSE 4605
// exit ;
4603: GO 4801
// DialogueOn ;
4605: CALL_OW 6
// if speaker = JMM then
4609: LD_VAR 0 2
4613: PUSH
4614: LD_EXP 1
4618: EQUAL
4619: IFFALSE 4653
// begin if Lisa then
4621: LD_EXP 4
4625: IFFALSE 4639
// Say ( Lisa , DX2b-Lisa-1 ) ;
4627: LD_EXP 4
4631: PPUSH
4632: LD_STRING DX2b-Lisa-1
4634: PPUSH
4635: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4639: LD_EXP 1
4643: PPUSH
4644: LD_STRING DX2b-JMM-1
4646: PPUSH
4647: CALL_OW 88
// end else
4651: GO 4797
// begin Say ( JMM , DX2a-JMM-1 ) ;
4653: LD_EXP 1
4657: PPUSH
4658: LD_STRING DX2a-JMM-1
4660: PPUSH
4661: CALL_OW 88
// if speaker = Bobby then
4665: LD_VAR 0 2
4669: PUSH
4670: LD_EXP 2
4674: EQUAL
4675: IFFALSE 4689
// Say ( Bobby , DX2a-Bobby-1 ) ;
4677: LD_EXP 2
4681: PPUSH
4682: LD_STRING DX2a-Bobby-1
4684: PPUSH
4685: CALL_OW 88
// if speaker = Cyrus then
4689: LD_VAR 0 2
4693: PUSH
4694: LD_EXP 3
4698: EQUAL
4699: IFFALSE 4713
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4701: LD_EXP 3
4705: PPUSH
4706: LD_STRING DX2a-Cyrus-1
4708: PPUSH
4709: CALL_OW 88
// if speaker = Lisa then
4713: LD_VAR 0 2
4717: PUSH
4718: LD_EXP 4
4722: EQUAL
4723: IFFALSE 4737
// Say ( Lisa , DX2a-Lisa-1 ) ;
4725: LD_EXP 4
4729: PPUSH
4730: LD_STRING DX2a-Lisa-1
4732: PPUSH
4733: CALL_OW 88
// if speaker in temp1 then
4737: LD_VAR 0 2
4741: PUSH
4742: LD_VAR 0 3
4746: IN
4747: IFFALSE 4761
// Say ( speaker , DX2a-Sol1-1 ) ;
4749: LD_VAR 0 2
4753: PPUSH
4754: LD_STRING DX2a-Sol1-1
4756: PPUSH
4757: CALL_OW 88
// if speaker in temp2 then
4761: LD_VAR 0 2
4765: PUSH
4766: LD_VAR 0 4
4770: IN
4771: IFFALSE 4785
// Say ( speaker , DX2a-FSol1-1 ) ;
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_STRING DX2a-FSol1-1
4780: PPUSH
4781: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4785: LD_EXP 1
4789: PPUSH
4790: LD_STRING DX2a-JMM-2
4792: PPUSH
4793: CALL_OW 88
// end ; DialogueOff ;
4797: CALL_OW 7
// end ;
4801: PPOPN 5
4803: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4804: LD_INT 1
4806: PPUSH
4807: CALL_OW 255
4811: PUSH
4812: LD_INT 1
4814: EQUAL
4815: IFTRUE 4830
4817: PUSH
4818: LD_INT 10
4820: PPUSH
4821: CALL_OW 255
4825: PUSH
4826: LD_INT 1
4828: EQUAL
4829: OR
4830: IFFALSE 4890
4832: GO 4834
4834: DISABLE
// begin DialogueOn ;
4835: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4839: LD_EXP 1
4843: PPUSH
4844: LD_STRING D3-JMM-1
4846: PPUSH
4847: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4851: LD_EXP 9
4855: PPUSH
4856: LD_STRING D3-Pow-1
4858: PPUSH
4859: CALL_OW 586
// if IsOK ( Cyrus ) then
4863: LD_EXP 3
4867: PPUSH
4868: CALL_OW 302
4872: IFFALSE 4886
// Say ( Cyrus , D3-Cyrus-1 ) ;
4874: LD_EXP 3
4878: PPUSH
4879: LD_STRING D3-Cyrus-1
4881: PPUSH
4882: CALL_OW 88
// DialogueOff ;
4886: CALL_OW 7
// end ;
4890: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and IsOk ( dep1 ) and IsOk ( dep2 ) do var temp , tmp , i ;
4891: LD_INT 1
4893: PPUSH
4894: CALL_OW 255
4898: PUSH
4899: LD_INT 1
4901: EQUAL
4902: IFFALSE 4917
4904: PUSH
4905: LD_INT 10
4907: PPUSH
4908: CALL_OW 255
4912: PUSH
4913: LD_INT 1
4915: EQUAL
4916: AND
4917: IFFALSE 4928
4919: PUSH
4920: LD_INT 1
4922: PPUSH
4923: CALL_OW 302
4927: AND
4928: IFFALSE 4939
4930: PUSH
4931: LD_INT 10
4933: PPUSH
4934: CALL_OW 302
4938: AND
4939: IFFALSE 6331
4941: GO 4943
4943: DISABLE
4944: LD_INT 0
4946: PPUSH
4947: PPUSH
4948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4949: LD_ADDR_VAR 0 2
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 21
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PPUSH
4978: CALL_OW 69
4982: ST_TO_ADDR
// if tmp then
4983: LD_VAR 0 2
4987: IFFALSE 5048
// begin for i in tmp do
4989: LD_ADDR_VAR 0 3
4993: PUSH
4994: LD_VAR 0 2
4998: PUSH
4999: FOR_IN
5000: IFFALSE 5046
// begin if IsInUnit ( i ) then
5002: LD_VAR 0 3
5006: PPUSH
5007: CALL_OW 310
5011: IFFALSE 5022
// ComExitBuilding ( i ) ;
5013: LD_VAR 0 3
5017: PPUSH
5018: CALL_OW 122
// wait ( 0 0$1 ) ;
5022: LD_INT 35
5024: PPUSH
5025: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: LD_INT 54
5036: PPUSH
5037: LD_INT 17
5039: PPUSH
5040: CALL_OW 174
// end ;
5044: GO 4999
5046: POP
5047: POP
// end ; wait ( 0 0$03 ) ;
5048: LD_INT 105
5050: PPUSH
5051: CALL_OW 67
// DialogueOn ;
5055: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5059: LD_EXP 1
5063: PPUSH
5064: LD_STRING D3a-JMM-1
5066: PPUSH
5067: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5071: LD_EXP 9
5075: PPUSH
5076: LD_STRING D3a-Pow-1
5078: PPUSH
5079: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5083: LD_EXP 1
5087: PPUSH
5088: LD_STRING D3a-JMM-2
5090: PPUSH
5091: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5095: LD_EXP 9
5099: PPUSH
5100: LD_STRING D3a-Pow-2
5102: PPUSH
5103: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5107: LD_EXP 1
5111: PPUSH
5112: LD_STRING D3a-JMM-3
5114: PPUSH
5115: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5119: LD_EXP 9
5123: PPUSH
5124: LD_STRING D3a-Pow-3
5126: PPUSH
5127: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5131: LD_EXP 1
5135: PPUSH
5136: LD_STRING D3a-JMM-4
5138: PPUSH
5139: CALL_OW 88
// DialogueOff ;
5143: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5147: LD_STRING M2
5149: PPUSH
5150: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5154: LD_EXP 1
5158: PPUSH
5159: LD_STRING D3b-JMM-1
5161: PPUSH
5162: CALL_OW 88
// Hint ( Depot2 ) ;
5166: LD_STRING Depot2
5168: PPUSH
5169: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5173: LD_INT 35
5175: PPUSH
5176: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5180: LD_INT 22
5182: PPUSH
5183: LD_INT 22
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PUSH
5193: LD_INT 25
5195: PUSH
5196: LD_INT 2
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PPUSH
5207: CALL_OW 70
5211: IFFALSE 5244
5213: PUSH
5214: LD_INT 22
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: LD_INT 21
5226: PUSH
5227: LD_INT 1
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: PPUSH
5238: CALL_OW 69
5242: NOT
5243: AND
5244: IFFALSE 5173
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5246: LD_ADDR_VAR 0 1
5250: PUSH
5251: LD_INT 22
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: LD_INT 23
5263: PUSH
5264: LD_INT 1
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PUSH
5271: LD_INT 25
5273: PUSH
5274: LD_INT 2
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 50
5283: PUSH
5284: EMPTY
5285: LIST
5286: PUSH
5287: LD_INT 56
5289: PUSH
5290: EMPTY
5291: LIST
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 69
5304: PUSH
5305: LD_EXP 1
5309: PUSH
5310: LD_EXP 5
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: DIFF
5319: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5320: LD_INT 35
5322: PPUSH
5323: CALL_OW 67
// until temp > 0 ;
5327: LD_VAR 0 1
5331: PUSH
5332: LD_INT 0
5334: GREATER
5335: IFFALSE 5246
// wait ( 0 0$5 ) ;
5337: LD_INT 175
5339: PPUSH
5340: CALL_OW 67
// PrepareRussianHeroes ;
5344: CALL 12098 0 0
// InGameOn ;
5348: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5352: LD_EXP 8
5356: PPUSH
5357: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5361: LD_EXP 1
5365: PUSH
5366: LD_VAR 0 1
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: PPUSH
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5388: LD_EXP 8
5392: PPUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: CALL_OW 119
// wait ( 0 0$02 ) ;
5406: LD_INT 70
5408: PPUSH
5409: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5413: LD_EXP 8
5417: PPUSH
5418: LD_STRING D4-Mikh-1
5420: PPUSH
5421: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5425: LD_VAR 0 1
5429: PUSH
5430: LD_INT 1
5432: ARRAY
5433: PPUSH
5434: CALL_OW 258
5438: PUSH
5439: LD_INT 1
5441: EQUAL
5442: IFFALSE 5460
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5444: LD_VAR 0 1
5448: PUSH
5449: LD_INT 1
5451: ARRAY
5452: PPUSH
5453: LD_STRING D4-Sol1-1
5455: PPUSH
5456: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5460: LD_VAR 0 1
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PPUSH
5469: CALL_OW 258
5473: PUSH
5474: LD_INT 2
5476: EQUAL
5477: IFFALSE 5495
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5479: LD_VAR 0 1
5483: PUSH
5484: LD_INT 1
5486: ARRAY
5487: PPUSH
5488: LD_STRING D4-FSol1-1
5490: PPUSH
5491: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5495: LD_EXP 8
5499: PPUSH
5500: LD_STRING D4-Mikh-2
5502: PPUSH
5503: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5507: LD_VAR 0 1
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PPUSH
5516: CALL_OW 258
5520: PUSH
5521: LD_INT 1
5523: EQUAL
5524: IFFALSE 5542
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5526: LD_VAR 0 1
5530: PUSH
5531: LD_INT 1
5533: ARRAY
5534: PPUSH
5535: LD_STRING D4-Sol1-2
5537: PPUSH
5538: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5542: LD_VAR 0 1
5546: PUSH
5547: LD_INT 1
5549: ARRAY
5550: PPUSH
5551: CALL_OW 258
5555: PUSH
5556: LD_INT 2
5558: EQUAL
5559: IFFALSE 5577
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5561: LD_VAR 0 1
5565: PUSH
5566: LD_INT 1
5568: ARRAY
5569: PPUSH
5570: LD_STRING D4-FSol1-2
5572: PPUSH
5573: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5577: LD_EXP 8
5581: PPUSH
5582: LD_STRING D4-Mikh-3
5584: PPUSH
5585: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5589: LD_VAR 0 1
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 258
5602: PUSH
5603: LD_INT 1
5605: EQUAL
5606: IFFALSE 5624
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5608: LD_VAR 0 1
5612: PUSH
5613: LD_INT 1
5615: ARRAY
5616: PPUSH
5617: LD_STRING D4-Sol1-3
5619: PPUSH
5620: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5624: LD_VAR 0 1
5628: PUSH
5629: LD_INT 1
5631: ARRAY
5632: PPUSH
5633: CALL_OW 258
5637: PUSH
5638: LD_INT 2
5640: EQUAL
5641: IFFALSE 5659
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5643: LD_VAR 0 1
5647: PUSH
5648: LD_INT 1
5650: ARRAY
5651: PPUSH
5652: LD_STRING D4-FSol1-3
5654: PPUSH
5655: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5659: LD_EXP 8
5663: PPUSH
5664: LD_STRING D4-Mikh-4
5666: PPUSH
5667: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5671: LD_STRING Qs1
5673: PPUSH
5674: CALL_OW 97
5678: PUSH
5679: LD_INT 1
5681: DOUBLE
5682: EQUAL
5683: IFTRUE 5687
5685: GO 5722
5687: POP
// begin InGameOff ;
5688: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5692: LD_INT 1
5694: PPUSH
5695: LD_INT 6
5697: PPUSH
5698: LD_INT 2
5700: PPUSH
5701: LD_INT 1
5703: PPUSH
5704: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5708: LD_EXP 8
5712: PPUSH
5713: LD_INT 17
5715: PPUSH
5716: CALL_OW 113
// end ; 2 :
5720: GO 6315
5722: LD_INT 2
5724: DOUBLE
5725: EQUAL
5726: IFTRUE 5730
5728: GO 6280
5730: POP
// begin repeat wait ( 0 0$1 ) ;
5731: LD_INT 35
5733: PPUSH
5734: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5738: LD_VAR 0 1
5742: PUSH
5743: LD_INT 1
5745: ARRAY
5746: PPUSH
5747: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5751: LD_VAR 0 1
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: PPUSH
5760: LD_EXP 1
5764: PPUSH
5765: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5769: LD_EXP 8
5773: PPUSH
5774: LD_EXP 1
5778: PPUSH
5779: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5783: LD_EXP 1
5787: PPUSH
5788: LD_EXP 8
5792: PPUSH
5793: CALL_OW 296
5797: PUSH
5798: LD_INT 5
5800: LESS
5801: IFFALSE 5731
// ComTurnUnit ( Mikhail , JMM ) ;
5803: LD_EXP 8
5807: PPUSH
5808: LD_EXP 1
5812: PPUSH
5813: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5817: LD_EXP 1
5821: PPUSH
5822: LD_STRING D4b-JMM-1
5824: PPUSH
5825: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5829: LD_EXP 8
5833: PPUSH
5834: LD_STRING D4b-Mikh-1
5836: PPUSH
5837: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5841: LD_EXP 1
5845: PPUSH
5846: LD_STRING D4b-JMM-2
5848: PPUSH
5849: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5853: LD_EXP 8
5857: PPUSH
5858: LD_STRING D4b-Mikh-2
5860: PPUSH
5861: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5865: LD_EXP 1
5869: PPUSH
5870: LD_STRING D4b-JMM-3
5872: PPUSH
5873: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5877: LD_EXP 8
5881: PPUSH
5882: LD_STRING D4b-Mikh-3
5884: PPUSH
5885: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5889: LD_EXP 1
5893: PPUSH
5894: LD_STRING D4b-JMM-4
5896: PPUSH
5897: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5901: LD_EXP 8
5905: PPUSH
5906: LD_STRING D4b-Mikh-4
5908: PPUSH
5909: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5913: LD_EXP 1
5917: PPUSH
5918: LD_STRING D4b-JMM-5
5920: PPUSH
5921: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5925: LD_EXP 8
5929: PPUSH
5930: LD_STRING D4b-Mikh-5
5932: PPUSH
5933: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5937: LD_EXP 1
5941: PPUSH
5942: LD_STRING D4b-JMM-6
5944: PPUSH
5945: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5949: LD_EXP 8
5953: PPUSH
5954: LD_STRING D4b-Mikh-6
5956: PPUSH
5957: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5961: LD_EXP 1
5965: PPUSH
5966: LD_STRING D4b-JMM-7
5968: PPUSH
5969: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5973: LD_EXP 8
5977: PPUSH
5978: LD_STRING D4b-Mikh-7
5980: PPUSH
5981: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5985: LD_VAR 0 1
5989: PUSH
5990: LD_INT 1
5992: ARRAY
5993: PPUSH
5994: CALL_OW 258
5998: PUSH
5999: LD_INT 1
6001: EQUAL
6002: IFFALSE 6020
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6004: LD_VAR 0 1
6008: PUSH
6009: LD_INT 1
6011: ARRAY
6012: PPUSH
6013: LD_STRING D4b-Sol1-7
6015: PPUSH
6016: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6020: LD_VAR 0 1
6024: PUSH
6025: LD_INT 1
6027: ARRAY
6028: PPUSH
6029: CALL_OW 258
6033: PUSH
6034: LD_INT 2
6036: EQUAL
6037: IFFALSE 6055
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6039: LD_VAR 0 1
6043: PUSH
6044: LD_INT 1
6046: ARRAY
6047: PPUSH
6048: LD_STRING D4b-FSol1-7
6050: PPUSH
6051: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6055: LD_EXP 1
6059: PPUSH
6060: LD_STRING D4b-JMM-8
6062: PPUSH
6063: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6067: LD_VAR 0 1
6071: PUSH
6072: LD_INT 1
6074: ARRAY
6075: PPUSH
6076: CALL_OW 258
6080: PUSH
6081: LD_INT 1
6083: EQUAL
6084: IFFALSE 6102
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6086: LD_VAR 0 1
6090: PUSH
6091: LD_INT 1
6093: ARRAY
6094: PPUSH
6095: LD_STRING D4b-Sol1-8
6097: PPUSH
6098: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6102: LD_VAR 0 1
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: CALL_OW 258
6115: PUSH
6116: LD_INT 2
6118: EQUAL
6119: IFFALSE 6137
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6121: LD_VAR 0 1
6125: PUSH
6126: LD_INT 1
6128: ARRAY
6129: PPUSH
6130: LD_STRING D4b-FSol1-8
6132: PPUSH
6133: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6137: LD_EXP 1
6141: PPUSH
6142: LD_STRING D4b-JMM-9
6144: PPUSH
6145: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6149: LD_EXP 8
6153: PPUSH
6154: LD_INT 1
6156: PPUSH
6157: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6161: LD_ADDR_VAR 0 3
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 1
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: PPUSH
6179: CALL_OW 69
6183: PUSH
6184: FOR_IN
6185: IFFALSE 6198
// ComFree ( i ) ;
6187: LD_VAR 0 3
6191: PPUSH
6192: CALL_OW 139
6196: GO 6184
6198: POP
6199: POP
// repeat wait ( 0 0$1 ) ;
6200: LD_INT 35
6202: PPUSH
6203: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6207: LD_EXP 8
6211: PPUSH
6212: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6216: LD_EXP 8
6220: PUSH
6221: LD_VAR 0 1
6225: PUSH
6226: LD_INT 1
6228: ARRAY
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: LD_INT 1
6236: PPUSH
6237: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6241: LD_EXP 8
6245: PPUSH
6246: CALL_OW 310
6250: IFFALSE 6200
// mikhailDepot = IsInUnit ( Mikhail ) ;
6252: LD_ADDR_EXP 23
6256: PUSH
6257: LD_EXP 8
6261: PPUSH
6262: CALL_OW 310
6266: ST_TO_ADDR
// InGameOff ;
6267: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6271: LD_STRING M3
6273: PPUSH
6274: CALL_OW 337
// end ; 3 :
6278: GO 6315
6280: LD_INT 3
6282: DOUBLE
6283: EQUAL
6284: IFTRUE 6288
6286: GO 6314
6288: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6289: LD_EXP 8
6293: PPUSH
6294: LD_INT 17
6296: PPUSH
6297: CALL_OW 113
// wait ( 0 0$3 ) ;
6301: LD_INT 105
6303: PPUSH
6304: CALL_OW 67
// InGameOff ;
6308: CALL_OW 9
// end ; end ;
6312: GO 6315
6314: POP
// PrepareTigers ;
6315: CALL 15832 0 0
// RussianTrap ;
6319: CALL 10421 0 0
// tigersRespawn := true ;
6323: LD_ADDR_EXP 30
6327: PUSH
6328: LD_INT 1
6330: ST_TO_ADDR
// end ;
6331: PPOPN 3
6333: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6334: LD_INT 1
6336: PPUSH
6337: CALL_OW 255
6341: PUSH
6342: LD_INT 1
6344: EQUAL
6345: IFFALSE 6360
6347: PUSH
6348: LD_INT 10
6350: PPUSH
6351: CALL_OW 255
6355: PUSH
6356: LD_INT 1
6358: EQUAL
6359: AND
6360: IFFALSE 6383
6362: PUSH
6363: LD_INT 1
6365: PPUSH
6366: CALL_OW 274
6370: PPUSH
6371: LD_INT 1
6373: PPUSH
6374: CALL_OW 275
6378: PUSH
6379: LD_INT 100
6381: GREATEREQUAL
6382: AND
6383: IFFALSE 6532
6385: GO 6387
6387: DISABLE
6388: LD_INT 0
6390: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6391: LD_INT 2100
6393: PPUSH
6394: LD_INT 4200
6396: PPUSH
6397: CALL_OW 12
6401: PUSH
6402: LD_INT 1050
6404: PLUS
6405: PPUSH
6406: CALL_OW 67
// PrepareCargoBays ;
6410: CALL 13358 0 0
// cargoRespawn = 1 ;
6414: LD_ADDR_EXP 28
6418: PUSH
6419: LD_INT 1
6421: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6422: LD_ADDR_VAR 0 1
6426: PUSH
6427: LD_EXP 15
6431: PUSH
6432: LD_EXP 16
6436: PUSH
6437: LD_EXP 17
6441: PUSH
6442: LD_EXP 18
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6453: LD_VAR 0 1
6457: PPUSH
6458: LD_INT 17
6460: PPUSH
6461: LD_INT 10
6463: PPUSH
6464: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6468: LD_VAR 0 1
6472: PPUSH
6473: LD_INT 36
6475: PPUSH
6476: LD_INT 13
6478: PPUSH
6479: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6483: LD_VAR 0 1
6487: PPUSH
6488: LD_INT 40
6490: PPUSH
6491: LD_INT 20
6493: PPUSH
6494: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6498: LD_VAR 0 1
6502: PPUSH
6503: LD_INT 53
6505: PPUSH
6506: LD_INT 16
6508: PPUSH
6509: CALL_OW 171
// wait ( 0 0$5 ) ;
6513: LD_INT 175
6515: PPUSH
6516: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6520: LD_EXP 17
6524: PPUSH
6525: LD_STRING D5-Rus2-1
6527: PPUSH
6528: CALL_OW 88
// end ;
6532: PPOPN 1
6534: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6535: LD_EXP 28
6539: PUSH
6540: LD_INT 1
6542: EQUAL
6543: IFFALSE 6700
6545: GO 6547
6547: DISABLE
6548: LD_INT 0
6550: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6551: LD_ADDR_VAR 0 1
6555: PUSH
6556: LD_INT 22
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 21
6568: PUSH
6569: LD_INT 2
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 34
6578: PUSH
6579: LD_INT 51
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: PPUSH
6591: CALL_OW 69
6595: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6596: LD_INT 105
6598: PPUSH
6599: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6603: LD_VAR 0 1
6607: PPUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 60
6613: PUSH
6614: EMPTY
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 72
6625: IFTRUE 6655
6627: PUSH
6628: LD_VAR 0 1
6632: PPUSH
6633: LD_INT 3
6635: PUSH
6636: LD_INT 24
6638: PUSH
6639: LD_INT 980
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PPUSH
6650: CALL_OW 72
6654: OR
6655: IFFALSE 6596
// ComMoveXY ( cargos , 7 , 9 ) ;
6657: LD_VAR 0 1
6661: PPUSH
6662: LD_INT 7
6664: PPUSH
6665: LD_INT 9
6667: PPUSH
6668: CALL_OW 111
// cargoSee = 1 ;
6672: LD_ADDR_EXP 29
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// cargoEscape = 1 ;
6680: LD_ADDR_EXP 20
6684: PUSH
6685: LD_INT 1
6687: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6688: LD_EXP 17
6692: PPUSH
6693: LD_STRING D5-Rus2-1a
6695: PPUSH
6696: CALL_OW 88
// end ;
6700: PPOPN 1
6702: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6703: LD_EXP 20
6707: IFFALSE 6756
6709: PUSH
6710: LD_EXP 15
6714: PUSH
6715: LD_EXP 16
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: LD_INT 50
6726: PUSH
6727: EMPTY
6728: LIST
6729: PUSH
6730: LD_INT 22
6732: PUSH
6733: LD_INT 3
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 52
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: LIST
6750: PPUSH
6751: CALL_OW 72
6755: AND
6756: IFFALSE 7093
6758: GO 6760
6760: DISABLE
6761: LD_INT 0
6763: PPUSH
6764: PPUSH
6765: PPUSH
6766: PPUSH
// begin enable ;
6767: ENABLE
// for i in [ cargo1 , cargo2 ] do
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: LD_EXP 15
6777: PUSH
6778: LD_EXP 16
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: FOR_IN
6788: IFFALSE 7091
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6790: LD_ADDR_VAR 0 1
6794: PUSH
6795: LD_VAR 0 2
6799: PPUSH
6800: CALL_OW 250
6804: PPUSH
6805: LD_VAR 0 2
6809: PPUSH
6810: CALL_OW 251
6814: PPUSH
6815: LD_INT 6
6817: PPUSH
6818: CALL 80570 0 3
6822: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6823: LD_VAR 0 1
6827: IFFALSE 6848
6829: PUSH
6830: LD_VAR 0 2
6834: PPUSH
6835: CALL 81801 0 1
6839: PUSH
6840: LD_INT 4
6842: ARRAY
6843: PUSH
6844: LD_INT 60
6846: LESS
6847: AND
6848: IFFALSE 6887
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6850: LD_VAR 0 2
6854: PPUSH
6855: LD_VAR 0 1
6859: PUSH
6860: LD_INT 1
6862: ARRAY
6863: PUSH
6864: LD_INT 1
6866: ARRAY
6867: PPUSH
6868: LD_VAR 0 1
6872: PUSH
6873: LD_INT 1
6875: ARRAY
6876: PUSH
6877: LD_INT 2
6879: ARRAY
6880: PPUSH
6881: CALL_OW 117
6885: GO 7089
// if not IsInArea ( i , RemoveArea ) then
6887: LD_VAR 0 2
6891: PPUSH
6892: LD_INT 32
6894: PPUSH
6895: CALL_OW 308
6899: NOT
6900: IFFALSE 7050
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: LD_VAR 0 2
6911: PPUSH
6912: CALL_OW 250
6916: PPUSH
6917: LD_INT 4
6919: PPUSH
6920: LD_INT 3
6922: PPUSH
6923: CALL_OW 272
6927: ST_TO_ADDR
// y := GetY ( i ) ;
6928: LD_ADDR_VAR 0 4
6932: PUSH
6933: LD_VAR 0 2
6937: PPUSH
6938: CALL_OW 251
6942: ST_TO_ADDR
// if HexInfo ( x , y ) then
6943: LD_VAR 0 3
6947: PPUSH
6948: LD_VAR 0 4
6952: PPUSH
6953: CALL_OW 428
6957: IFFALSE 6980
// x := ShiftX ( x , 4 , 3 ) ;
6959: LD_ADDR_VAR 0 3
6963: PUSH
6964: LD_VAR 0 3
6968: PPUSH
6969: LD_INT 4
6971: PPUSH
6972: LD_INT 3
6974: PPUSH
6975: CALL_OW 272
6979: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_VAR 0 4
6989: PPUSH
6990: CALL_OW 428
6994: IFTRUE 7013
6996: PUSH
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_VAR 0 4
7006: PPUSH
7007: CALL_OW 488
7011: NOT
7012: OR
7013: IFFALSE 7029
// ComMoveToArea ( i , RemoveArea ) else
7015: LD_VAR 0 2
7019: PPUSH
7020: LD_INT 32
7022: PPUSH
7023: CALL_OW 113
7027: GO 7048
// ComMoveXY ( i , x , y ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_VAR 0 3
7038: PPUSH
7039: LD_VAR 0 4
7043: PPUSH
7044: CALL_OW 111
// end else
7048: GO 7089
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7050: LD_VAR 0 2
7054: PPUSH
7055: CALL_OW 311
7059: PPUSH
7060: CALL_OW 64
// RemoveUnit ( i ) ;
7064: LD_VAR 0 2
7068: PPUSH
7069: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7073: LD_ADDR_EXP 20
7077: PUSH
7078: LD_EXP 20
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ST_TO_ADDR
// continue ;
7087: GO 6787
// end ; end ;
7089: GO 6787
7091: POP
7092: POP
// end ;
7093: PPOPN 4
7095: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7096: LD_EXP 20
7100: PUSH
7101: LD_INT 1
7103: GREATER
7104: IFFALSE 7353
7106: GO 7108
7108: DISABLE
7109: LD_INT 0
7111: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7112: LD_INT 4
7114: PPUSH
7115: LD_INT 1
7117: PPUSH
7118: LD_INT 1
7120: PPUSH
7121: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7125: LD_INT 31
7127: PPUSH
7128: LD_INT 1
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: CALL_OW 324
// Hint ( Bunker ) ;
7138: LD_STRING Bunker
7140: PPUSH
7141: CALL_OW 339
// if IsOK ( Jerry ) then
7145: LD_EXP 7
7149: PPUSH
7150: CALL_OW 302
7154: IFFALSE 7170
// Say ( Jerry , D5a-Sol1-1 ) else
7156: LD_EXP 7
7160: PPUSH
7161: LD_STRING D5a-Sol1-1
7163: PPUSH
7164: CALL_OW 88
7168: GO 7256
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7170: LD_ADDR_VAR 0 1
7174: PUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 1
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 26
7187: PUSH
7188: LD_INT 1
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 69
7203: PUSH
7204: LD_EXP 1
7208: PUSH
7209: LD_EXP 2
7213: PUSH
7214: LD_EXP 3
7218: PUSH
7219: LD_EXP 5
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: DIFF
7230: ST_TO_ADDR
// if not speaker then
7231: LD_VAR 0 1
7235: NOT
7236: IFFALSE 7240
// exit ;
7238: GO 7353
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7240: LD_VAR 0 1
7244: PUSH
7245: LD_INT 1
7247: ARRAY
7248: PPUSH
7249: LD_STRING D5a-Sol1-1
7251: PPUSH
7252: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7256: LD_EXP 1
7260: PPUSH
7261: LD_STRING D5a-JMM-1
7263: PPUSH
7264: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7268: LD_INT 22
7270: PPUSH
7271: LD_INT 22
7273: PUSH
7274: LD_INT 1
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 25
7283: PUSH
7284: LD_INT 2
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 70
7299: IFFALSE 7353
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7301: LD_INT 22
7303: PPUSH
7304: LD_INT 22
7306: PUSH
7307: LD_INT 1
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 25
7316: PUSH
7317: LD_INT 2
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PPUSH
7328: CALL_OW 70
7332: PUSH
7333: LD_INT 1
7335: ARRAY
7336: PPUSH
7337: LD_INT 31
7339: PPUSH
7340: LD_INT 44
7342: PPUSH
7343: LD_INT 13
7345: PPUSH
7346: LD_INT 1
7348: PPUSH
7349: CALL_OW 145
// end ;
7353: PPOPN 1
7355: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7356: LD_INT 1
7358: PPUSH
7359: CALL_OW 255
7363: PUSH
7364: LD_INT 3
7366: EQUAL
7367: IFFALSE 7382
7369: PUSH
7370: LD_INT 1
7372: PPUSH
7373: CALL_OW 256
7377: PUSH
7378: LD_INT 1000
7380: LESS
7381: AND
7382: IFTRUE 7412
7384: PUSH
7385: LD_INT 10
7387: PPUSH
7388: CALL_OW 255
7392: PUSH
7393: LD_INT 3
7395: EQUAL
7396: IFFALSE 7411
7398: PUSH
7399: LD_INT 10
7401: PPUSH
7402: CALL_OW 256
7406: PUSH
7407: LD_INT 1000
7409: LESS
7410: AND
7411: OR
7412: IFFALSE 7429
7414: GO 7416
7416: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7417: LD_EXP 1
7421: PPUSH
7422: LD_STRING D8-JMM-1
7424: PPUSH
7425: CALL_OW 88
7429: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7430: LD_EXP 8
7434: PPUSH
7435: CALL_OW 310
7439: PUSH
7440: LD_INT 1
7442: EQUAL
7443: IFFALSE 7456
7445: PUSH
7446: LD_EXP 22
7450: PUSH
7451: LD_INT 3
7453: EQUAL
7454: NOT
7455: AND
7456: IFFALSE 7478
7458: GO 7460
7460: DISABLE
// begin enable ;
7461: ENABLE
// mikhailInBase = 1 ;
7462: LD_ADDR_EXP 22
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// mikhailStatus = 1 ;
7470: LD_ADDR_EXP 21
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
// end ;
7478: END
// export function AskMikhail ; begin
7479: LD_INT 0
7481: PPUSH
// case Query ( QMikh2 ) of 1 :
7482: LD_STRING QMikh2
7484: PPUSH
7485: CALL_OW 97
7489: PUSH
7490: LD_INT 1
7492: DOUBLE
7493: EQUAL
7494: IFTRUE 7498
7496: GO 7565
7498: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7499: LD_INT 1
7501: PPUSH
7502: LD_INT 6
7504: PPUSH
7505: LD_INT 2
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7515: LD_EXP 8
7519: PPUSH
7520: LD_INT 6
7522: PPUSH
7523: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7527: LD_EXP 8
7531: PPUSH
7532: CALL_OW 122
// wait ( 0 0$1 ) ;
7536: LD_INT 35
7538: PPUSH
7539: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7543: LD_EXP 8
7547: PPUSH
7548: LD_INT 17
7550: PPUSH
7551: CALL_OW 113
// mikhailInbase = 0 ;
7555: LD_ADDR_EXP 22
7559: PUSH
7560: LD_INT 0
7562: ST_TO_ADDR
// end ; 2 :
7563: GO 7806
7565: LD_INT 2
7567: DOUBLE
7568: EQUAL
7569: IFTRUE 7573
7571: GO 7746
7573: POP
// begin mikhailInBase = 2 ;
7574: LD_ADDR_EXP 22
7578: PUSH
7579: LD_INT 2
7581: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7582: LD_EXP 8
7586: PPUSH
7587: LD_INT 6
7589: PPUSH
7590: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7594: LD_EXP 8
7598: PPUSH
7599: CALL_OW 122
// wait ( 0 0$1 ) ;
7603: LD_INT 35
7605: PPUSH
7606: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7610: LD_EXP 8
7614: PPUSH
7615: LD_EXP 8
7619: PPUSH
7620: CALL_OW 250
7624: PUSH
7625: LD_INT 2
7627: PLUS
7628: PPUSH
7629: LD_EXP 8
7633: PPUSH
7634: CALL_OW 251
7638: PUSH
7639: LD_INT 2
7641: PLUS
7642: PPUSH
7643: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7647: LD_EXP 8
7651: PPUSH
7652: LD_EXP 8
7656: PPUSH
7657: CALL_OW 250
7661: PUSH
7662: LD_INT 1
7664: PLUS
7665: PPUSH
7666: LD_EXP 8
7670: PPUSH
7671: CALL_OW 251
7675: PUSH
7676: LD_INT 2
7678: PLUS
7679: PPUSH
7680: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7684: LD_EXP 8
7688: PPUSH
7689: LD_EXP 8
7693: PPUSH
7694: CALL_OW 250
7698: PUSH
7699: LD_INT 2
7701: PLUS
7702: PPUSH
7703: LD_EXP 8
7707: PPUSH
7708: CALL_OW 251
7712: PPUSH
7713: CALL_OW 171
// wait ( 0 0$5 ) ;
7717: LD_INT 175
7719: PPUSH
7720: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7724: LD_EXP 8
7728: PPUSH
7729: LD_INT 25
7731: PPUSH
7732: CALL_OW 113
// mikhailInBase = 4 ;
7736: LD_ADDR_EXP 22
7740: PUSH
7741: LD_INT 4
7743: ST_TO_ADDR
// end ; 3 :
7744: GO 7806
7746: LD_INT 3
7748: DOUBLE
7749: EQUAL
7750: IFTRUE 7754
7752: GO 7805
7754: POP
// begin SetSide ( Mikhail , 6 ) ;
7755: LD_EXP 8
7759: PPUSH
7760: LD_INT 6
7762: PPUSH
7763: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7767: LD_EXP 8
7771: PPUSH
7772: CALL_OW 122
// wait ( 0 0$1 ) ;
7776: LD_INT 35
7778: PPUSH
7779: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7783: LD_EXP 8
7787: PPUSH
7788: LD_INT 17
7790: PPUSH
7791: CALL_OW 113
// mikhailInbase = 3 ;
7795: LD_ADDR_EXP 22
7799: PUSH
7800: LD_INT 3
7802: ST_TO_ADDR
// end ; end ;
7803: GO 7806
7805: POP
// end ;
7806: LD_VAR 0 1
7810: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7811: LD_EXP 8
7815: PPUSH
7816: LD_INT 25
7818: PPUSH
7819: CALL_OW 308
7823: IFFALSE 7835
7825: PUSH
7826: LD_EXP 22
7830: PUSH
7831: LD_INT 4
7833: EQUAL
7834: AND
7835: IFFALSE 7939
7837: GO 7839
7839: DISABLE
// begin enable ;
7840: ENABLE
// mikhailInBase = 1 ;
7841: LD_ADDR_EXP 22
7845: PUSH
7846: LD_INT 1
7848: ST_TO_ADDR
// InGameOn ;
7849: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7853: LD_INT 1
7855: PPUSH
7856: LD_INT 6
7858: PPUSH
7859: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7863: LD_INT 35
7865: PPUSH
7866: CALL_OW 67
// if Carry ( Mikhail ) then
7870: LD_EXP 8
7874: PPUSH
7875: CALL_OW 281
7879: IFFALSE 7890
// ComUnload ( Mikhail ) ;
7881: LD_EXP 8
7885: PPUSH
7886: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7890: LD_EXP 8
7894: PPUSH
7895: LD_INT 1
7897: PPUSH
7898: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7902: LD_EXP 8
7906: PPUSH
7907: CALL_OW 310
7911: IFFALSE 7863
// SetSide ( dep1 , 1 ) ;
7913: LD_INT 1
7915: PPUSH
7916: LD_INT 1
7918: PPUSH
7919: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7923: LD_EXP 8
7927: PPUSH
7928: LD_INT 1
7930: PPUSH
7931: CALL_OW 235
// InGameOff ;
7935: CALL_OW 9
// end ;
7939: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7940: LD_EXP 8
7944: PPUSH
7945: CALL_OW 310
7949: IFFALSE 7962
7951: PUSH
7952: LD_EXP 22
7956: PUSH
7957: LD_INT 3
7959: EQUAL
7960: NOT
7961: AND
7962: IFFALSE 8097
7964: GO 7966
7966: DISABLE
// begin enable ;
7967: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7968: LD_INT 22
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 1
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 91
7990: PUSH
7991: LD_EXP 8
7995: PPUSH
7996: CALL_OW 310
8000: PUSH
8001: LD_INT 10
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: PPUSH
8014: CALL_OW 69
8018: PUSH
8019: LD_INT 1
8021: EQUAL
8022: IFFALSE 8097
// begin mikhailStatus = 4 ;
8024: LD_ADDR_EXP 21
8028: PUSH
8029: LD_INT 4
8031: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
8032: LD_INT 1
8034: PPUSH
8035: LD_INT 6
8037: PPUSH
8038: LD_INT 2
8040: PPUSH
8041: LD_INT 1
8043: PPUSH
8044: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
8048: LD_EXP 8
8052: PPUSH
8053: LD_INT 6
8055: PPUSH
8056: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8060: LD_EXP 8
8064: PPUSH
8065: CALL_OW 122
// wait ( 0 0$1 ) ;
8069: LD_INT 35
8071: PPUSH
8072: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8076: LD_EXP 8
8080: PPUSH
8081: LD_INT 17
8083: PPUSH
8084: CALL_OW 113
// mikhailStatus = 3 ;
8088: LD_ADDR_EXP 21
8092: PUSH
8093: LD_INT 3
8095: ST_TO_ADDR
// disable ;
8096: DISABLE
// end ; end ;
8097: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8098: LD_EXP 1
8102: PPUSH
8103: LD_EXP 23
8107: PPUSH
8108: CALL_OW 296
8112: PUSH
8113: LD_INT 5
8115: LESS
8116: IFFALSE 8128
8118: PUSH
8119: LD_EXP 21
8123: PUSH
8124: LD_INT 3
8126: EQUAL
8127: AND
8128: IFFALSE 8141
8130: PUSH
8131: LD_EXP 22
8135: PUSH
8136: LD_INT 3
8138: EQUAL
8139: NOT
8140: AND
8141: IFFALSE 8374
8143: GO 8145
8145: DISABLE
8146: LD_INT 0
8148: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8149: LD_ADDR_VAR 0 1
8153: PUSH
8154: LD_INT 22
8156: PUSH
8157: LD_INT 1
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 21
8166: PUSH
8167: LD_INT 1
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 26
8176: PUSH
8177: LD_INT 1
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: PPUSH
8189: CALL_OW 69
8193: PUSH
8194: LD_EXP 1
8198: PUSH
8199: LD_EXP 5
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: DIFF
8208: ST_TO_ADDR
// if not tmp then
8209: LD_VAR 0 1
8213: NOT
8214: IFFALSE 8218
// exit ;
8216: GO 8374
// DialogueOn ;
8218: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8222: LD_EXP 1
8226: PPUSH
8227: LD_STRING D7-JMM-1
8229: PPUSH
8230: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8234: LD_VAR 0 1
8238: PUSH
8239: LD_INT 1
8241: ARRAY
8242: PPUSH
8243: LD_STRING D7-Sol1-1
8245: PPUSH
8246: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8250: LD_EXP 1
8254: PPUSH
8255: LD_STRING D7-JMM-2
8257: PPUSH
8258: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8262: LD_VAR 0 1
8266: PUSH
8267: LD_INT 1
8269: ARRAY
8270: PPUSH
8271: LD_STRING D7-Sol1-2
8273: PPUSH
8274: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8278: LD_EXP 1
8282: PPUSH
8283: LD_STRING D7-JMM-3
8285: PPUSH
8286: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8290: LD_VAR 0 1
8294: PUSH
8295: LD_INT 1
8297: ARRAY
8298: PPUSH
8299: LD_STRING D7-Sol1-3
8301: PPUSH
8302: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8306: LD_EXP 3
8310: PPUSH
8311: CALL_OW 302
8315: IFFALSE 8328
8317: PUSH
8318: LD_EXP 4
8322: PPUSH
8323: CALL_OW 302
8327: AND
8328: IFFALSE 8370
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8330: LD_EXP 3
8334: PPUSH
8335: LD_STRING D7-Cyrus-3
8337: PPUSH
8338: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8342: LD_VAR 0 1
8346: PUSH
8347: LD_INT 1
8349: ARRAY
8350: PPUSH
8351: LD_STRING D7-Sol1-4
8353: PPUSH
8354: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8358: LD_EXP 4
8362: PPUSH
8363: LD_STRING D7-Lisa-4
8365: PPUSH
8366: CALL_OW 88
// end ; DialogueOff ;
8370: CALL_OW 7
// end ;
8374: PPOPN 1
8376: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8377: LD_EXP 8
8381: PPUSH
8382: CALL_OW 303
8386: IFFALSE 8398
8388: PUSH
8389: LD_EXP 21
8393: PUSH
8394: LD_INT 3
8396: EQUAL
8397: AND
8398: IFFALSE 8412
8400: GO 8402
8402: DISABLE
// begin enable ;
8403: ENABLE
// mikhailStatus = 2 ;
8404: LD_ADDR_EXP 21
8408: PUSH
8409: LD_INT 2
8411: ST_TO_ADDR
// end ;
8412: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8413: LD_EXP 8
8417: PPUSH
8418: LD_INT 17
8420: PPUSH
8421: CALL_OW 308
8425: IFFALSE 8442
8427: PUSH
8428: LD_EXP 8
8432: PPUSH
8433: CALL_OW 255
8437: PUSH
8438: LD_INT 6
8440: EQUAL
8441: AND
8442: IFFALSE 8475
8444: GO 8446
8446: DISABLE
// begin if not mikhailInBase = 3 then
8447: LD_EXP 22
8451: PUSH
8452: LD_INT 3
8454: EQUAL
8455: NOT
8456: IFFALSE 8466
// mikhailStatus = 3 ;
8458: LD_ADDR_EXP 21
8462: PUSH
8463: LD_INT 3
8465: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8466: LD_EXP 8
8470: PPUSH
8471: CALL_OW 64
// end ;
8475: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8476: LD_EXP 21
8480: PUSH
8481: LD_INT 3
8483: EQUAL
8484: IFFALSE 8501
8486: PUSH
8487: LD_EXP 8
8491: PPUSH
8492: CALL_OW 255
8496: PUSH
8497: LD_INT 6
8499: EQUAL
8500: AND
8501: IFFALSE 8694
8503: GO 8505
8505: DISABLE
8506: LD_INT 0
8508: PPUSH
8509: PPUSH
// begin enable ;
8510: ENABLE
// if IsOk ( Mikhail ) then
8511: LD_EXP 8
8515: PPUSH
8516: CALL_OW 302
8520: IFFALSE 8694
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) diff [ JMM , Bobby , Cyrus , Lisa ] ;
8522: LD_ADDR_VAR 0 2
8526: PUSH
8527: LD_EXP 8
8531: PPUSH
8532: LD_INT 22
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 21
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PPUSH
8556: CALL_OW 69
8560: PPUSH
8561: CALL 10615 0 2
8565: PUSH
8566: LD_EXP 1
8570: PUSH
8571: LD_EXP 2
8575: PUSH
8576: LD_EXP 3
8580: PUSH
8581: LD_EXP 4
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: DIFF
8592: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 10 then
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_EXP 8
8602: PPUSH
8603: CALL_OW 296
8607: PUSH
8608: LD_INT 10
8610: LESS
8611: IFFALSE 8694
// begin if GetSex ( attacker ) = sex_male then
8613: LD_VAR 0 2
8617: PPUSH
8618: CALL_OW 258
8622: PUSH
8623: LD_INT 1
8625: EQUAL
8626: IFFALSE 8662
// begin disable ;
8628: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8629: LD_VAR 0 2
8633: PPUSH
8634: LD_STRING D7a-Sol1-1
8636: PPUSH
8637: CALL_OW 88
// wait ( 0 0$2 ) ;
8641: LD_INT 70
8643: PPUSH
8644: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8648: LD_VAR 0 2
8652: PPUSH
8653: LD_STRING D7a-Sol1-1a
8655: PPUSH
8656: CALL_OW 88
// end else
8660: GO 8694
// begin disable ;
8662: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8663: LD_VAR 0 2
8667: PPUSH
8668: LD_STRING D7a-FSol1-1
8670: PPUSH
8671: CALL_OW 88
// wait ( 0 0$2 ) ;
8675: LD_INT 70
8677: PPUSH
8678: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8682: LD_VAR 0 2
8686: PPUSH
8687: LD_STRING D7a-FSol1-1a
8689: PPUSH
8690: CALL_OW 88
// end ; end ; end ; end ;
8694: PPOPN 2
8696: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8697: LD_EXP 27
8701: PUSH
8702: LD_INT 1
8704: EQUAL
8705: IFFALSE 8744
8707: PUSH
8708: LD_INT 22
8710: PPUSH
8711: LD_INT 22
8713: PUSH
8714: LD_INT 3
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 21
8723: PUSH
8724: LD_INT 1
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PPUSH
8735: CALL_OW 70
8739: PUSH
8740: LD_INT 2
8742: GREATER
8743: AND
8744: IFFALSE 8797
8746: PUSH
8747: LD_INT 22
8749: PPUSH
8750: LD_INT 22
8752: PUSH
8753: LD_INT 1
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: LD_INT 2
8762: PUSH
8763: LD_INT 21
8765: PUSH
8766: LD_INT 1
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 59
8775: PUSH
8776: EMPTY
8777: LIST
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PPUSH
8788: CALL_OW 70
8792: PUSH
8793: LD_INT 0
8795: EQUAL
8796: AND
8797: IFFALSE 8812
8799: GO 8801
8801: DISABLE
// SetSide ( dep1 , 3 ) ;
8802: LD_INT 1
8804: PPUSH
8805: LD_INT 3
8807: PPUSH
8808: CALL_OW 235
8812: END
// export function JMMTraitor ; var i ; begin
8813: LD_INT 0
8815: PPUSH
8816: PPUSH
// if traitor then
8817: LD_EXP 33
8821: IFFALSE 8825
// exit ;
8823: GO 8962
// traitor := true ;
8825: LD_ADDR_EXP 33
8829: PUSH
8830: LD_INT 1
8832: ST_TO_ADDR
// if IsOk ( Lisa ) then
8833: LD_EXP 4
8837: PPUSH
8838: CALL_OW 302
8842: IFFALSE 8864
// begin DialogueOn ;
8844: CALL_OW 6
// Say ( Lisa , D10-Lisa-Traitor ) ;
8848: LD_EXP 4
8852: PPUSH
8853: LD_STRING D10-Lisa-Traitor
8855: PPUSH
8856: CALL_OW 88
// DialogueOff ;
8860: CALL_OW 7
// end ; ComExit ( JMM ) ;
8864: LD_EXP 1
8868: PPUSH
8869: CALL 78460 0 1
// SetAttitude ( 1 , 4 , att_enemy , true ) ;
8873: LD_INT 1
8875: PPUSH
8876: LD_INT 4
8878: PPUSH
8879: LD_INT 2
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: CALL_OW 80
// for i in FilterAllUnits ( [ f_side , 1 ] ) diff JMM do
8889: LD_ADDR_VAR 0 2
8893: PUSH
8894: LD_INT 22
8896: PUSH
8897: LD_INT 1
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: PPUSH
8904: CALL_OW 69
8908: PUSH
8909: LD_EXP 1
8913: DIFF
8914: PUSH
8915: FOR_IN
8916: IFFALSE 8946
// begin SetSide ( i , 4 ) ;
8918: LD_VAR 0 2
8922: PPUSH
8923: LD_INT 4
8925: PPUSH
8926: CALL_OW 235
// ComAttackUnit ( i , JMM ) ;
8930: LD_VAR 0 2
8934: PPUSH
8935: LD_EXP 1
8939: PPUSH
8940: CALL_OW 115
// end ;
8944: GO 8915
8946: POP
8947: POP
// wait ( 0 0$30 ) ;
8948: LD_INT 1050
8950: PPUSH
8951: CALL_OW 67
// YouLost ( Traitor ) ;
8955: LD_STRING Traitor
8957: PPUSH
8958: CALL_OW 104
// end ;
8962: LD_VAR 0 1
8966: RET
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8967: LD_EXP 30
8971: PUSH
8972: LD_INT 1
8974: EQUAL
8975: IFFALSE 9011
8977: PUSH
8978: LD_INT 22
8980: PUSH
8981: LD_INT 0
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 25
8990: PUSH
8991: LD_INT 14
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PPUSH
9002: CALL_OW 69
9006: PUSH
9007: LD_INT 0
9009: EQUAL
9010: AND
9011: IFFALSE 9112
9013: GO 9015
9015: DISABLE
9016: LD_INT 0
9018: PPUSH
9019: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
9020: LD_ADDR_VAR 0 2
9024: PUSH
9025: LD_INT 22
9027: PUSH
9028: LD_INT 1
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: LD_INT 21
9037: PUSH
9038: LD_INT 1
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: LD_INT 23
9047: PUSH
9048: LD_INT 1
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: PPUSH
9060: CALL_OW 69
9064: ST_TO_ADDR
// for i in tmp do
9065: LD_ADDR_VAR 0 1
9069: PUSH
9070: LD_VAR 0 2
9074: PUSH
9075: FOR_IN
9076: IFFALSE 9103
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
9078: LD_VAR 0 1
9082: PPUSH
9083: LD_INT 1
9085: PPUSH
9086: LD_INT 4
9088: PPUSH
9089: CALL_OW 12
9093: PPUSH
9094: LD_INT 300
9096: PPUSH
9097: CALL_OW 492
9101: GO 9075
9103: POP
9104: POP
// SetAchievement ( ACH_TIGER ) ;
9105: LD_STRING ACH_TIGER
9107: PPUSH
9108: CALL_OW 543
// end ;
9112: PPOPN 2
9114: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
9115: LD_INT 22
9117: PUSH
9118: LD_INT 1
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PUSH
9125: LD_INT 34
9127: PUSH
9128: LD_INT 51
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PPUSH
9139: CALL_OW 69
9143: PUSH
9144: LD_INT 2
9146: GREATEREQUAL
9147: IFFALSE 9159
9149: GO 9151
9151: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
9152: LD_STRING ACH_CARGO
9154: PPUSH
9155: CALL_OW 543
9159: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
9160: LD_INT 0
9162: PPUSH
9163: PPUSH
9164: PPUSH
// for i = 1 to count do
9165: LD_ADDR_VAR 0 8
9169: PUSH
9170: DOUBLE
9171: LD_INT 1
9173: DEC
9174: ST_TO_ADDR
9175: LD_VAR 0 6
9179: PUSH
9180: FOR_TO
9181: IFFALSE 9262
// begin uc_side = side ;
9183: LD_ADDR_OWVAR 20
9187: PUSH
9188: LD_VAR 0 1
9192: ST_TO_ADDR
// uc_nation = nation ;
9193: LD_ADDR_OWVAR 21
9197: PUSH
9198: LD_VAR 0 2
9202: ST_TO_ADDR
// hc_gallery =  ;
9203: LD_ADDR_OWVAR 33
9207: PUSH
9208: LD_STRING 
9210: ST_TO_ADDR
// hc_name =  ;
9211: LD_ADDR_OWVAR 26
9215: PUSH
9216: LD_STRING 
9218: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9219: LD_INT 0
9221: PPUSH
9222: LD_VAR 0 5
9226: PPUSH
9227: LD_VAR 0 4
9231: PPUSH
9232: CALL_OW 380
// un = CreateHuman ;
9236: LD_ADDR_VAR 0 9
9240: PUSH
9241: CALL_OW 44
9245: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9246: LD_VAR 0 9
9250: PPUSH
9251: LD_VAR 0 3
9255: PPUSH
9256: CALL_OW 52
// end ;
9260: GO 9180
9262: POP
9263: POP
// end ;
9264: LD_VAR 0 7
9268: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9269: LD_INT 0
9271: PPUSH
9272: PPUSH
9273: PPUSH
// uc_side := GetSide ( b ) ;
9274: LD_ADDR_OWVAR 20
9278: PUSH
9279: LD_VAR 0 2
9283: PPUSH
9284: CALL_OW 255
9288: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9289: LD_ADDR_OWVAR 21
9293: PUSH
9294: LD_VAR 0 2
9298: PPUSH
9299: CALL_OW 248
9303: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9304: LD_INT 0
9306: PPUSH
9307: LD_INT 1
9309: PPUSH
9310: LD_VAR 0 1
9314: PPUSH
9315: CALL_OW 380
// un = CreateHuman ;
9319: LD_ADDR_VAR 0 4
9323: PUSH
9324: CALL_OW 44
9328: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9329: LD_ADDR_VAR 0 5
9333: PUSH
9334: LD_VAR 0 2
9338: PPUSH
9339: CALL_OW 254
9343: PUSH
9344: LD_INT 3
9346: MINUS
9347: ST_TO_ADDR
// if dir < 0 then
9348: LD_VAR 0 5
9352: PUSH
9353: LD_INT 0
9355: LESS
9356: IFFALSE 9372
// dir := 6 + dir ;
9358: LD_ADDR_VAR 0 5
9362: PUSH
9363: LD_INT 6
9365: PUSH
9366: LD_VAR 0 5
9370: PLUS
9371: ST_TO_ADDR
// SetDir ( un , dir ) ;
9372: LD_VAR 0 4
9376: PPUSH
9377: LD_VAR 0 5
9381: PPUSH
9382: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9386: LD_VAR 0 4
9390: PPUSH
9391: LD_VAR 0 2
9395: PPUSH
9396: CALL_OW 52
// end ;
9400: LD_VAR 0 3
9404: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
9409: PPUSH
9410: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9411: LD_ADDR_VAR 0 7
9415: PUSH
9416: LD_INT 22
9418: PUSH
9419: LD_VAR 0 1
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: LD_INT 25
9430: PUSH
9431: LD_INT 2
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 24
9440: PUSH
9441: LD_INT 1000
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: PPUSH
9453: CALL_OW 69
9457: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9458: LD_ADDR_VAR 0 5
9462: PUSH
9463: LD_VAR 0 3
9467: PPUSH
9468: LD_INT 22
9470: PUSH
9471: LD_VAR 0 1
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 21
9482: PUSH
9483: LD_INT 3
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: LD_INT 24
9495: PUSH
9496: LD_INT 1000
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: PUSH
9512: EMPTY
9513: LIST
9514: PPUSH
9515: CALL_OW 70
9519: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9520: LD_VAR 0 5
9524: NOT
9525: IFFALSE 9534
9527: PUSH
9528: LD_VAR 0 7
9532: NOT
9533: AND
9534: IFFALSE 9538
// exit ;
9536: GO 9738
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9538: LD_VAR 0 5
9542: NOT
9543: IFFALSE 9569
9545: PUSH
9546: LD_VAR 0 7
9550: PPUSH
9551: LD_INT 3
9553: PUSH
9554: LD_INT 54
9556: PUSH
9557: EMPTY
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PPUSH
9564: CALL_OW 72
9568: AND
9569: IFFALSE 9582
9571: PUSH
9572: LD_VAR 0 2
9576: PPUSH
9577: CALL_OW 302
9581: AND
9582: IFFALSE 9616
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9584: LD_VAR 0 7
9588: PPUSH
9589: LD_INT 3
9591: PUSH
9592: LD_INT 54
9594: PUSH
9595: EMPTY
9596: LIST
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PPUSH
9602: CALL_OW 72
9606: PPUSH
9607: LD_VAR 0 2
9611: PPUSH
9612: CALL_OW 120
// if buildingsList then
9616: LD_VAR 0 5
9620: IFFALSE 9738
// begin for i in engineerOkList do
9622: LD_ADDR_VAR 0 6
9626: PUSH
9627: LD_VAR 0 7
9631: PUSH
9632: FOR_IN
9633: IFFALSE 9736
// if IsInUnit ( i ) then
9635: LD_VAR 0 6
9639: PPUSH
9640: CALL_OW 310
9644: IFFALSE 9657
// ComExitBuilding ( i ) else
9646: LD_VAR 0 6
9650: PPUSH
9651: CALL_OW 122
9655: GO 9734
// if GetLives ( i ) > 650 then
9657: LD_VAR 0 6
9661: PPUSH
9662: CALL_OW 256
9666: PUSH
9667: LD_INT 650
9669: GREATER
9670: IFFALSE 9698
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9672: LD_VAR 0 6
9676: PPUSH
9677: LD_VAR 0 5
9681: PPUSH
9682: LD_VAR 0 6
9686: PPUSH
9687: CALL_OW 74
9691: PPUSH
9692: CALL_OW 130
9696: GO 9734
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9698: LD_VAR 0 6
9702: PPUSH
9703: LD_INT 56
9705: PPUSH
9706: LD_INT 10
9708: PPUSH
9709: CALL_OW 297
9713: PUSH
9714: LD_INT 8
9716: GREATER
9717: IFFALSE 9734
// ComMoveXY ( i , 56 , 10 ) ;
9719: LD_VAR 0 6
9723: PPUSH
9724: LD_INT 56
9726: PPUSH
9727: LD_INT 10
9729: PPUSH
9730: CALL_OW 111
9734: GO 9632
9736: POP
9737: POP
// end ; end ;
9738: LD_VAR 0 4
9742: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9743: LD_INT 0
9745: PPUSH
9746: PPUSH
9747: PPUSH
9748: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9749: LD_ADDR_VAR 0 6
9753: PUSH
9754: LD_INT 22
9756: PUSH
9757: LD_VAR 0 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 25
9768: PUSH
9769: LD_INT 4
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 24
9778: PUSH
9779: LD_INT 250
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 69
9795: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9796: LD_ADDR_VAR 0 8
9800: PUSH
9801: LD_VAR 0 3
9805: PPUSH
9806: LD_INT 22
9808: PUSH
9809: LD_VAR 0 1
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PUSH
9818: LD_INT 21
9820: PUSH
9821: LD_INT 1
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 3
9830: PUSH
9831: LD_INT 24
9833: PUSH
9834: LD_INT 650
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 70
9854: ST_TO_ADDR
// if not damageUnits and not sciList then
9855: LD_VAR 0 8
9859: NOT
9860: IFFALSE 9869
9862: PUSH
9863: LD_VAR 0 6
9867: NOT
9868: AND
9869: IFFALSE 9873
// exit ;
9871: GO 10012
// if damageUnits then
9873: LD_VAR 0 8
9877: IFFALSE 9956
// begin for i in sciList do
9879: LD_ADDR_VAR 0 7
9883: PUSH
9884: LD_VAR 0 6
9888: PUSH
9889: FOR_IN
9890: IFFALSE 9952
// if IsInUnit ( i ) then
9892: LD_VAR 0 7
9896: PPUSH
9897: CALL_OW 310
9901: IFFALSE 9914
// ComExitBuilding ( i ) else
9903: LD_VAR 0 7
9907: PPUSH
9908: CALL_OW 122
9912: GO 9950
// if not HasTask ( i ) then
9914: LD_VAR 0 7
9918: PPUSH
9919: CALL_OW 314
9923: NOT
9924: IFFALSE 9950
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9926: LD_VAR 0 7
9930: PPUSH
9931: LD_VAR 0 8
9935: PPUSH
9936: LD_VAR 0 7
9940: PPUSH
9941: CALL_OW 74
9945: PPUSH
9946: CALL_OW 128
9950: GO 9889
9952: POP
9953: POP
// end else
9954: GO 10012
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9956: LD_VAR 0 6
9960: PPUSH
9961: LD_INT 3
9963: PUSH
9964: LD_INT 54
9966: PUSH
9967: EMPTY
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PPUSH
9974: CALL_OW 72
9978: IFFALSE 10012
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9980: LD_VAR 0 6
9984: PPUSH
9985: LD_INT 3
9987: PUSH
9988: LD_INT 54
9990: PUSH
9991: EMPTY
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PPUSH
9998: CALL_OW 72
10002: PPUSH
10003: LD_VAR 0 4
10007: PPUSH
10008: CALL_OW 120
// end ;
10012: LD_VAR 0 5
10016: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
10017: LD_INT 0
10019: PPUSH
10020: PPUSH
10021: PPUSH
10022: PPUSH
// if not defendersList then
10023: LD_VAR 0 3
10027: NOT
10028: IFFALSE 10032
// exit ;
10030: GO 10416
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
10032: LD_ADDR_VAR 0 7
10036: PUSH
10037: LD_VAR 0 1
10041: PPUSH
10042: LD_INT 22
10044: PUSH
10045: LD_VAR 0 2
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 2
10056: PUSH
10057: LD_INT 21
10059: PUSH
10060: LD_INT 2
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 21
10069: PUSH
10070: LD_INT 1
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PPUSH
10086: CALL_OW 70
10090: ST_TO_ADDR
// if enemy then
10091: LD_VAR 0 7
10095: IFFALSE 10318
// begin for i in defendersList do
10097: LD_ADDR_VAR 0 6
10101: PUSH
10102: LD_VAR 0 3
10106: PUSH
10107: FOR_IN
10108: IFFALSE 10314
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
10110: LD_VAR 0 6
10114: PPUSH
10115: CALL_OW 310
10119: IFFALSE 10136
10121: PUSH
10122: LD_VAR 0 6
10126: PPUSH
10127: CALL_OW 256
10131: PUSH
10132: LD_INT 500
10134: GREATER
10135: AND
10136: IFFALSE 10149
// ComExitBuilding ( i ) else
10138: LD_VAR 0 6
10142: PPUSH
10143: CALL_OW 122
10147: GO 10312
// if GetLives ( i ) > 650 then
10149: LD_VAR 0 6
10153: PPUSH
10154: CALL_OW 256
10158: PUSH
10159: LD_INT 650
10161: GREATER
10162: IFFALSE 10215
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
10164: LD_ADDR_VAR 0 8
10168: PUSH
10169: LD_VAR 0 7
10173: PPUSH
10174: LD_VAR 0 6
10178: PPUSH
10179: CALL_OW 74
10183: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
10184: LD_VAR 0 6
10188: PPUSH
10189: LD_VAR 0 8
10193: PPUSH
10194: CALL_OW 250
10198: PPUSH
10199: LD_VAR 0 8
10203: PPUSH
10204: CALL_OW 251
10208: PPUSH
10209: CALL_OW 114
// end else
10213: GO 10312
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10215: LD_INT 22
10217: PUSH
10218: LD_INT 3
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PUSH
10225: LD_INT 25
10227: PUSH
10228: LD_INT 4
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PPUSH
10239: CALL_OW 69
10243: IFFALSE 10283
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10245: LD_VAR 0 6
10249: PPUSH
10250: LD_INT 56
10252: PPUSH
10253: LD_INT 10
10255: PPUSH
10256: CALL_OW 297
10260: PUSH
10261: LD_INT 8
10263: GREATER
10264: IFFALSE 10281
// ComMoveXY ( i , 56 , 10 ) ;
10266: LD_VAR 0 6
10270: PPUSH
10271: LD_INT 56
10273: PPUSH
10274: LD_INT 10
10276: PPUSH
10277: CALL_OW 111
// end else
10281: GO 10312
// if GetLives ( i ) <= 500 then
10283: LD_VAR 0 6
10287: PPUSH
10288: CALL_OW 256
10292: PUSH
10293: LD_INT 500
10295: LESSEQUAL
10296: IFFALSE 10312
// ComEnterUnit ( i , building ) ;
10298: LD_VAR 0 6
10302: PPUSH
10303: LD_VAR 0 4
10307: PPUSH
10308: CALL_OW 120
// end ;
10312: GO 10107
10314: POP
10315: POP
// end else
10316: GO 10416
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10318: LD_VAR 0 3
10322: PPUSH
10323: LD_INT 56
10325: PUSH
10326: EMPTY
10327: LIST
10328: PUSH
10329: LD_INT 3
10331: PUSH
10332: LD_INT 60
10334: PUSH
10335: EMPTY
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 24
10344: PUSH
10345: LD_INT 1000
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 72
10361: IFFALSE 10416
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10363: LD_VAR 0 3
10367: PPUSH
10368: LD_INT 56
10370: PUSH
10371: EMPTY
10372: LIST
10373: PUSH
10374: LD_INT 3
10376: PUSH
10377: LD_INT 60
10379: PUSH
10380: EMPTY
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 24
10389: PUSH
10390: LD_INT 1000
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 72
10406: PPUSH
10407: LD_VAR 0 4
10411: PPUSH
10412: CALL_OW 120
// end ;
10416: LD_VAR 0 5
10420: RET
// export function RussianTrap ; var i ; begin
10421: LD_INT 0
10423: PPUSH
10424: PPUSH
// if GetSide ( Brian ) = 4 then
10425: LD_EXP 6
10429: PPUSH
10430: CALL_OW 255
10434: PUSH
10435: LD_INT 4
10437: EQUAL
10438: IFFALSE 10461
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10440: LD_EXP 6
10444: PUSH
10445: LD_EXP 7
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PPUSH
10454: LD_INT 0
10456: PPUSH
10457: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10461: LD_ADDR_VAR 0 2
10465: PUSH
10466: LD_INT 22
10468: PUSH
10469: LD_INT 3
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 21
10478: PUSH
10479: LD_INT 1
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PPUSH
10490: CALL_OW 69
10494: PUSH
10495: FOR_IN
10496: IFFALSE 10608
// begin ComExitBuilding ( i ) ;
10498: LD_VAR 0 2
10502: PPUSH
10503: CALL_OW 122
// wait ( 0 0$1 ) ;
10507: LD_INT 35
10509: PPUSH
10510: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10514: LD_VAR 0 2
10518: PPUSH
10519: LD_INT 120
10521: PPUSH
10522: LD_INT 56
10524: PPUSH
10525: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_INT 111
10536: PPUSH
10537: LD_INT 37
10539: PPUSH
10540: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10544: LD_INT 33
10546: PPUSH
10547: CALL_OW 255
10551: PUSH
10552: LD_INT 3
10554: EQUAL
10555: IFFALSE 10566
10557: PUSH
10558: LD_INT 33
10560: PPUSH
10561: CALL_OW 302
10565: AND
10566: IFFALSE 10582
// AddComEnterUnit ( i , arm2 ) else
10568: LD_VAR 0 2
10572: PPUSH
10573: LD_INT 33
10575: PPUSH
10576: CALL_OW 180
10580: GO 10606
// begin AddComCrawl ( i ) ;
10582: LD_VAR 0 2
10586: PPUSH
10587: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10591: LD_VAR 0 2
10595: PPUSH
10596: LD_INT 109
10598: PPUSH
10599: LD_INT 30
10601: PPUSH
10602: CALL_OW 174
// end ; end ;
10606: GO 10495
10608: POP
10609: POP
// end ;
10610: LD_VAR 0 1
10614: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10615: LD_INT 0
10617: PPUSH
10618: PPUSH
10619: PPUSH
10620: PPUSH
10621: PPUSH
// nearestDist := 1000 ;
10622: LD_ADDR_VAR 0 4
10626: PUSH
10627: LD_INT 1000
10629: ST_TO_ADDR
// nearestUn := un ;
10630: LD_ADDR_VAR 0 5
10634: PUSH
10635: LD_VAR 0 1
10639: ST_TO_ADDR
// for sold in units do
10640: LD_ADDR_VAR 0 6
10644: PUSH
10645: LD_VAR 0 2
10649: PUSH
10650: FOR_IN
10651: IFFALSE 10707
// begin dist := GetDistUnits ( un , sold ) ;
10653: LD_ADDR_VAR 0 7
10657: PUSH
10658: LD_VAR 0 1
10662: PPUSH
10663: LD_VAR 0 6
10667: PPUSH
10668: CALL_OW 296
10672: ST_TO_ADDR
// if dist < nearestDist then
10673: LD_VAR 0 7
10677: PUSH
10678: LD_VAR 0 4
10682: LESS
10683: IFFALSE 10705
// begin nearestUn := sold ;
10685: LD_ADDR_VAR 0 5
10689: PUSH
10690: LD_VAR 0 6
10694: ST_TO_ADDR
// nearestDist := dist ;
10695: LD_ADDR_VAR 0 4
10699: PUSH
10700: LD_VAR 0 7
10704: ST_TO_ADDR
// end ; end ;
10705: GO 10650
10707: POP
10708: POP
// result := NearestUn ;
10709: LD_ADDR_VAR 0 3
10713: PUSH
10714: LD_VAR 0 5
10718: ST_TO_ADDR
// end ;
10719: LD_VAR 0 3
10723: RET
// export function PrepareDifficulty ; begin
10724: LD_INT 0
10726: PPUSH
// if Difficulty = 1 then
10727: LD_OWVAR 67
10731: PUSH
10732: LD_INT 1
10734: EQUAL
10735: IFFALSE 10798
// begin RemoveUnit ( brw2 ) ;
10737: LD_INT 9
10739: PPUSH
10740: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10744: LD_INT 30
10746: PPUSH
10747: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10751: LD_INT 52
10753: PPUSH
10754: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10758: LD_INT 63
10760: PPUSH
10761: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10765: LD_INT 5
10767: PUSH
10768: LD_INT 4
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PPUSH
10775: LD_INT 60
10777: PPUSH
10778: CALL_OW 240
// RuSoldMinLevel = 0 ;
10782: LD_ADDR_EXP 13
10786: PUSH
10787: LD_INT 0
10789: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10790: LD_ADDR_EXP 14
10794: PUSH
10795: LD_INT 1
10797: ST_TO_ADDR
// end ; if Difficulty = 2 then
10798: LD_OWVAR 67
10802: PUSH
10803: LD_INT 2
10805: EQUAL
10806: IFFALSE 10848
// begin RemoveUnit ( brw4 ) ;
10808: LD_INT 52
10810: PPUSH
10811: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10815: LD_INT 5
10817: PUSH
10818: LD_INT 4
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PPUSH
10825: LD_INT 50
10827: PPUSH
10828: CALL_OW 240
// RuSoldMinLevel = 1 ;
10832: LD_ADDR_EXP 13
10836: PUSH
10837: LD_INT 1
10839: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10840: LD_ADDR_EXP 14
10844: PUSH
10845: LD_INT 2
10847: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10848: LD_OWVAR 67
10852: PUSH
10853: LD_INT 3
10855: GREATEREQUAL
10856: IFFALSE 10891
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10858: LD_INT 5
10860: PUSH
10861: LD_INT 4
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PPUSH
10868: LD_INT 40
10870: PPUSH
10871: CALL_OW 240
// RuSoldMinLevel = 2 ;
10875: LD_ADDR_EXP 13
10879: PUSH
10880: LD_INT 2
10882: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10883: LD_ADDR_EXP 14
10887: PUSH
10888: LD_INT 3
10890: ST_TO_ADDR
// end ; end ;
10891: LD_VAR 0 1
10895: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10896: LD_INT 0
10898: PPUSH
10899: PPUSH
10900: PPUSH
// if not vehicles then
10901: LD_VAR 0 1
10905: NOT
10906: IFFALSE 10910
// exit ;
10908: GO 11040
// tmp := [ ] ;
10910: LD_ADDR_VAR 0 5
10914: PUSH
10915: EMPTY
10916: ST_TO_ADDR
// for i in vehicles do
10917: LD_ADDR_VAR 0 4
10921: PUSH
10922: LD_VAR 0 1
10926: PUSH
10927: FOR_IN
10928: IFFALSE 11024
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10930: LD_ADDR_VAR 0 5
10934: PUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: LD_VAR 0 5
10944: PUSH
10945: LD_INT 1
10947: PLUS
10948: PPUSH
10949: LD_VAR 0 4
10953: PPUSH
10954: CALL_OW 265
10958: PUSH
10959: LD_VAR 0 4
10963: PPUSH
10964: CALL_OW 262
10968: PUSH
10969: LD_VAR 0 4
10973: PPUSH
10974: CALL_OW 263
10978: PUSH
10979: LD_VAR 0 4
10983: PPUSH
10984: CALL_OW 264
10988: PUSH
10989: LD_VAR 0 4
10993: PPUSH
10994: CALL_OW 261
10998: PUSH
10999: LD_VAR 0 4
11003: PPUSH
11004: CALL_OW 256
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: PPUSH
11017: CALL_OW 1
11021: ST_TO_ADDR
11022: GO 10927
11024: POP
11025: POP
// SaveVariable ( tmp , ident ) ;
11026: LD_VAR 0 5
11030: PPUSH
11031: LD_VAR 0 2
11035: PPUSH
11036: CALL_OW 39
// end ; end_of_file
11040: LD_VAR 0 3
11044: RET
// export function PrepareHeroes ; var plive , prefix ; begin
11045: LD_INT 0
11047: PPUSH
11048: PPUSH
11049: PPUSH
// prefix := 01_ ;
11050: LD_ADDR_VAR 0 3
11054: PUSH
11055: LD_STRING 01_
11057: ST_TO_ADDR
// uc_side := 1 ;
11058: LD_ADDR_OWVAR 20
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
11066: LD_ADDR_EXP 1
11070: PUSH
11071: LD_STRING JMM
11073: PPUSH
11074: LD_EXP 35
11078: NOT
11079: PPUSH
11080: LD_VAR 0 3
11084: PPUSH
11085: CALL 39862 0 3
11089: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
11090: LD_ADDR_VAR 0 2
11094: PUSH
11095: LD_STRING 01_JMMLifePoints_1
11097: PPUSH
11098: LD_INT 1000
11100: PPUSH
11101: CALL_OW 30
11105: ST_TO_ADDR
// if plive < 250 then
11106: LD_VAR 0 2
11110: PUSH
11111: LD_INT 250
11113: LESS
11114: IFFALSE 11124
// plive := 300 ;
11116: LD_ADDR_VAR 0 2
11120: PUSH
11121: LD_INT 300
11123: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
11124: LD_EXP 1
11128: PPUSH
11129: LD_VAR 0 2
11133: PPUSH
11134: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
11138: LD_ADDR_EXP 9
11142: PUSH
11143: LD_STRING Powell
11145: PPUSH
11146: CALL_OW 25
11150: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
11151: LD_ADDR_EXP 2
11155: PUSH
11156: LD_STRING Bobby
11158: PPUSH
11159: LD_EXP 35
11163: NOT
11164: PPUSH
11165: LD_VAR 0 3
11169: PPUSH
11170: CALL 39862 0 3
11174: ST_TO_ADDR
// if Bobby then
11175: LD_EXP 2
11179: IFFALSE 11229
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
11181: LD_ADDR_VAR 0 2
11185: PUSH
11186: LD_STRING 01_BobbyLifePoints_1
11188: PPUSH
11189: LD_INT 1000
11191: PPUSH
11192: CALL_OW 30
11196: ST_TO_ADDR
// if plive < 250 then
11197: LD_VAR 0 2
11201: PUSH
11202: LD_INT 250
11204: LESS
11205: IFFALSE 11215
// plive := 300 ;
11207: LD_ADDR_VAR 0 2
11211: PUSH
11212: LD_INT 300
11214: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11215: LD_EXP 2
11219: PPUSH
11220: LD_VAR 0 2
11224: PPUSH
11225: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11229: LD_ADDR_EXP 3
11233: PUSH
11234: LD_STRING Cyrus
11236: PPUSH
11237: LD_EXP 35
11241: NOT
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: CALL 39862 0 3
11252: ST_TO_ADDR
// if Cyrus then
11253: LD_EXP 3
11257: IFFALSE 11307
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11259: LD_ADDR_VAR 0 2
11263: PUSH
11264: LD_STRING 01_CyrusLifePoints_1
11266: PPUSH
11267: LD_INT 1000
11269: PPUSH
11270: CALL_OW 30
11274: ST_TO_ADDR
// if plive < 250 then
11275: LD_VAR 0 2
11279: PUSH
11280: LD_INT 250
11282: LESS
11283: IFFALSE 11293
// plive := 300 ;
11285: LD_ADDR_VAR 0 2
11289: PUSH
11290: LD_INT 300
11292: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11293: LD_EXP 3
11297: PPUSH
11298: LD_VAR 0 2
11302: PPUSH
11303: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11307: LD_ADDR_EXP 5
11311: PUSH
11312: LD_STRING Khatam
11314: PPUSH
11315: CALL_OW 25
11319: ST_TO_ADDR
// uc_side := 4 ;
11320: LD_ADDR_OWVAR 20
11324: PUSH
11325: LD_INT 4
11327: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11328: LD_ADDR_EXP 4
11332: PUSH
11333: LD_STRING Lisa
11335: PPUSH
11336: CALL_OW 25
11340: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11341: LD_EXP 1
11345: PPUSH
11346: LD_INT 3
11348: PPUSH
11349: LD_INT 0
11351: PPUSH
11352: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11356: LD_EXP 2
11360: PPUSH
11361: LD_INT 3
11363: PPUSH
11364: LD_INT 0
11366: PPUSH
11367: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11371: LD_EXP 3
11375: PPUSH
11376: LD_INT 3
11378: PPUSH
11379: LD_INT 0
11381: PPUSH
11382: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11386: LD_EXP 4
11390: PPUSH
11391: LD_INT 5
11393: PPUSH
11394: LD_INT 0
11396: PPUSH
11397: CALL_OW 49
// ComCrawl ( Lisa ) ;
11401: LD_EXP 4
11405: PPUSH
11406: CALL_OW 137
// end ;
11410: LD_VAR 0 1
11414: RET
// export function PrepareLisSquad ; var i , un ; begin
11415: LD_INT 0
11417: PPUSH
11418: PPUSH
11419: PPUSH
// uc_side := 4 ;
11420: LD_ADDR_OWVAR 20
11424: PUSH
11425: LD_INT 4
11427: ST_TO_ADDR
// uc_nation := 1 ;
11428: LD_ADDR_OWVAR 21
11432: PUSH
11433: LD_INT 1
11435: ST_TO_ADDR
// hc_class := 2 ;
11436: LD_ADDR_OWVAR 28
11440: PUSH
11441: LD_INT 2
11443: ST_TO_ADDR
// hc_sex := sex_male ;
11444: LD_ADDR_OWVAR 27
11448: PUSH
11449: LD_INT 1
11451: ST_TO_ADDR
// hc_gallery :=  ;
11452: LD_ADDR_OWVAR 33
11456: PUSH
11457: LD_STRING 
11459: ST_TO_ADDR
// hc_name :=  ;
11460: LD_ADDR_OWVAR 26
11464: PUSH
11465: LD_STRING 
11467: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11468: LD_ADDR_OWVAR 30
11472: PUSH
11473: LD_INT 0
11475: PUSH
11476: LD_INT 1
11478: PUSH
11479: LD_INT 0
11481: PUSH
11482: LD_INT 0
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11491: LD_ADDR_OWVAR 31
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: LD_INT 0
11504: PUSH
11505: LD_INT 0
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: ST_TO_ADDR
// un := CreateHuman ;
11514: LD_ADDR_VAR 0 3
11518: PUSH
11519: CALL_OW 44
11523: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11524: LD_VAR 0 3
11528: PPUSH
11529: LD_INT 6
11531: PPUSH
11532: LD_INT 0
11534: PPUSH
11535: CALL_OW 49
// hc_sex := sex_female ;
11539: LD_ADDR_OWVAR 27
11543: PUSH
11544: LD_INT 2
11546: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11547: LD_ADDR_OWVAR 30
11551: PUSH
11552: LD_INT 0
11554: PUSH
11555: LD_INT 0
11557: PUSH
11558: LD_INT 0
11560: PUSH
11561: LD_INT 1
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11570: LD_ADDR_OWVAR 31
11574: PUSH
11575: LD_INT 0
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: LD_INT 0
11583: PUSH
11584: LD_INT 1
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: ST_TO_ADDR
// un := CreateHuman ;
11593: LD_ADDR_VAR 0 3
11597: PUSH
11598: CALL_OW 44
11602: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 6
11610: PPUSH
11611: LD_INT 0
11613: PPUSH
11614: CALL_OW 49
// if not Bobby and not Cyrus then
11618: LD_EXP 2
11622: NOT
11623: IFFALSE 11632
11625: PUSH
11626: LD_EXP 3
11630: NOT
11631: AND
11632: IFFALSE 11721
// begin hc_class := 1 ;
11634: LD_ADDR_OWVAR 28
11638: PUSH
11639: LD_INT 1
11641: ST_TO_ADDR
// hc_sex := sex_male ;
11642: LD_ADDR_OWVAR 27
11646: PUSH
11647: LD_INT 1
11649: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11650: LD_ADDR_OWVAR 30
11654: PUSH
11655: LD_INT 2
11657: PUSH
11658: LD_INT 3
11660: PUSH
11661: LD_INT 1
11663: PUSH
11664: LD_INT 0
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11673: LD_ADDR_OWVAR 31
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: LD_INT 3
11683: PUSH
11684: LD_INT 1
11686: PUSH
11687: LD_INT 0
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: ST_TO_ADDR
// un := CreateHuman ;
11696: LD_ADDR_VAR 0 3
11700: PUSH
11701: CALL_OW 44
11705: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11706: LD_VAR 0 3
11710: PPUSH
11711: LD_INT 31
11713: PPUSH
11714: LD_INT 0
11716: PPUSH
11717: CALL_OW 49
// end ; InitHc ;
11721: CALL_OW 19
// end ;
11725: LD_VAR 0 1
11729: RET
// export function PrepareOtherAmericans ; begin
11730: LD_INT 0
11732: PPUSH
// uc_side := 4 ;
11733: LD_ADDR_OWVAR 20
11737: PUSH
11738: LD_INT 4
11740: ST_TO_ADDR
// uc_nation := 1 ;
11741: LD_ADDR_OWVAR 21
11745: PUSH
11746: LD_INT 1
11748: ST_TO_ADDR
// hc_gallery :=  ;
11749: LD_ADDR_OWVAR 33
11753: PUSH
11754: LD_STRING 
11756: ST_TO_ADDR
// hc_name := Tom Garvin ;
11757: LD_ADDR_OWVAR 26
11761: PUSH
11762: LD_STRING Tom Garvin
11764: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11765: LD_INT 1
11767: PPUSH
11768: LD_INT 1
11770: PPUSH
11771: LD_INT 2
11773: PPUSH
11774: CALL_OW 380
// Brian := CreateHuman ;
11778: LD_ADDR_EXP 6
11782: PUSH
11783: CALL_OW 44
11787: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11788: LD_EXP 6
11792: PPUSH
11793: LD_INT 10
11795: PPUSH
11796: LD_INT 0
11798: PPUSH
11799: CALL_OW 49
// hc_name := Jerry White ;
11803: LD_ADDR_OWVAR 26
11807: PUSH
11808: LD_STRING Jerry White
11810: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11811: LD_INT 1
11813: PPUSH
11814: LD_INT 3
11816: PPUSH
11817: LD_INT 2
11819: PPUSH
11820: CALL_OW 380
// Jerry := CreateHuman ;
11824: LD_ADDR_EXP 7
11828: PUSH
11829: CALL_OW 44
11833: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11834: LD_EXP 7
11838: PPUSH
11839: LD_INT 10
11841: PPUSH
11842: LD_INT 0
11844: PPUSH
11845: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11849: LD_EXP 6
11853: PUSH
11854: LD_EXP 7
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 140
// end ;
11867: LD_VAR 0 1
11871: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11872: LD_INT 0
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11878: LD_ADDR_VAR 0 4
11882: PUSH
11883: LD_INT 16
11885: PPUSH
11886: LD_INT 0
11888: PPUSH
11889: CALL_OW 517
11893: ST_TO_ADDR
// for i = 1 to 6 do
11894: LD_ADDR_VAR 0 2
11898: PUSH
11899: DOUBLE
11900: LD_INT 1
11902: DEC
11903: ST_TO_ADDR
11904: LD_INT 6
11906: PUSH
11907: FOR_TO
11908: IFFALSE 12054
// begin uc_side := 4 ;
11910: LD_ADDR_OWVAR 20
11914: PUSH
11915: LD_INT 4
11917: ST_TO_ADDR
// uc_nation := 1 ;
11918: LD_ADDR_OWVAR 21
11922: PUSH
11923: LD_INT 1
11925: ST_TO_ADDR
// hc_gallery :=  ;
11926: LD_ADDR_OWVAR 33
11930: PUSH
11931: LD_STRING 
11933: ST_TO_ADDR
// hc_name :=  ;
11934: LD_ADDR_OWVAR 26
11938: PUSH
11939: LD_STRING 
11941: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11942: LD_INT 0
11944: PPUSH
11945: LD_INT 1
11947: PUSH
11948: LD_INT 1
11950: PUSH
11951: LD_INT 4
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: LD_VAR 0 2
11963: PUSH
11964: LD_INT 3
11966: MOD
11967: PUSH
11968: LD_INT 1
11970: PLUS
11971: ARRAY
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 380
// un := CreateHuman ;
11980: LD_ADDR_VAR 0 3
11984: PUSH
11985: CALL_OW 44
11989: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11990: LD_VAR 0 3
11994: PPUSH
11995: LD_INT 0
11997: PPUSH
11998: LD_INT 5
12000: PPUSH
12001: CALL_OW 12
12005: PPUSH
12006: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
12010: LD_VAR 0 3
12014: PPUSH
12015: LD_VAR 0 4
12019: PUSH
12020: LD_INT 1
12022: ARRAY
12023: PUSH
12024: LD_VAR 0 2
12028: ARRAY
12029: PPUSH
12030: LD_VAR 0 4
12034: PUSH
12035: LD_INT 2
12037: ARRAY
12038: PUSH
12039: LD_VAR 0 2
12043: ARRAY
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL_OW 601
// end ;
12052: GO 11907
12054: POP
12055: POP
// DyingSold := CreateHuman ;
12056: LD_ADDR_EXP 36
12060: PUSH
12061: CALL_OW 44
12065: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
12066: LD_EXP 36
12070: PPUSH
12071: LD_INT 16
12073: PPUSH
12074: LD_INT 0
12076: PPUSH
12077: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
12081: LD_EXP 36
12085: PPUSH
12086: LD_INT 250
12088: PPUSH
12089: CALL_OW 234
// end ; end_of_file
12093: LD_VAR 0 1
12097: RET
// export ruPatrol ; export function PrepareRussianHeroes ; var tmp ; begin
12098: LD_INT 0
12100: PPUSH
12101: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: LD_INT 22
12109: PUSH
12110: LD_INT 1
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 23
12119: PUSH
12120: LD_INT 1
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 25
12129: PUSH
12130: LD_INT 2
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 50
12139: PUSH
12140: EMPTY
12141: LIST
12142: PUSH
12143: LD_INT 56
12145: PUSH
12146: EMPTY
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: PPUSH
12156: CALL_OW 69
12160: PUSH
12161: LD_EXP 1
12165: PUSH
12166: EMPTY
12167: LIST
12168: DIFF
12169: ST_TO_ADDR
// if not tmp then
12170: LD_VAR 0 2
12174: NOT
12175: IFFALSE 12179
// exit ;
12177: GO 12255
// uc_side = 6 ;
12179: LD_ADDR_OWVAR 20
12183: PUSH
12184: LD_INT 6
12186: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
12187: LD_ADDR_EXP 8
12191: PUSH
12192: LD_STRING Mikhail
12194: PPUSH
12195: CALL_OW 25
12199: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
12200: LD_EXP 8
12204: PPUSH
12205: LD_INT 3
12207: PPUSH
12208: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12212: LD_EXP 8
12216: PPUSH
12217: LD_VAR 0 2
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: PPUSH
12226: CALL_OW 250
12230: PPUSH
12231: LD_VAR 0 2
12235: PUSH
12236: LD_INT 1
12238: ARRAY
12239: PPUSH
12240: CALL_OW 251
12244: PPUSH
12245: LD_INT 5
12247: PPUSH
12248: LD_INT 1
12250: PPUSH
12251: CALL_OW 50
// end ;
12255: LD_VAR 0 1
12259: RET
// export function PrepareRussianCommander ; begin
12260: LD_INT 0
12262: PPUSH
// uc_side = 3 ;
12263: LD_ADDR_OWVAR 20
12267: PUSH
12268: LD_INT 3
12270: ST_TO_ADDR
// uc_nation = 3 ;
12271: LD_ADDR_OWVAR 21
12275: PUSH
12276: LD_INT 3
12278: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12279: LD_ADDR_EXP 19
12283: PUSH
12284: LD_STRING Natasza
12286: PPUSH
12287: CALL_OW 25
12291: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12292: LD_EXP 19
12296: PPUSH
12297: LD_INT 24
12299: PPUSH
12300: LD_INT 0
12302: PPUSH
12303: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12307: LD_EXP 19
12311: PPUSH
12312: LD_INT 56
12314: PPUSH
12315: LD_INT 16
12317: PPUSH
12318: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12322: LD_ADDR_EXP 24
12326: PUSH
12327: LD_EXP 24
12331: PPUSH
12332: LD_EXP 24
12336: PUSH
12337: LD_INT 1
12339: PLUS
12340: PPUSH
12341: LD_EXP 19
12345: PPUSH
12346: CALL_OW 1
12350: ST_TO_ADDR
// end ;
12351: LD_VAR 0 1
12355: RET
// export function PrepareSouthBase ; var i , un ; begin
12356: LD_INT 0
12358: PPUSH
12359: PPUSH
12360: PPUSH
// for i = 1 to 2 do
12361: LD_ADDR_VAR 0 2
12365: PUSH
12366: DOUBLE
12367: LD_INT 1
12369: DEC
12370: ST_TO_ADDR
12371: LD_INT 2
12373: PUSH
12374: FOR_TO
12375: IFFALSE 12484
// begin uc_side = 3 ;
12377: LD_ADDR_OWVAR 20
12381: PUSH
12382: LD_INT 3
12384: ST_TO_ADDR
// uc_nation = 3 ;
12385: LD_ADDR_OWVAR 21
12389: PUSH
12390: LD_INT 3
12392: ST_TO_ADDR
// hc_gallery =  ;
12393: LD_ADDR_OWVAR 33
12397: PUSH
12398: LD_STRING 
12400: ST_TO_ADDR
// hc_name =  ;
12401: LD_ADDR_OWVAR 26
12405: PUSH
12406: LD_STRING 
12408: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12409: LD_INT 1
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: LD_EXP 13
12419: PPUSH
12420: LD_EXP 14
12424: PPUSH
12425: CALL_OW 12
12429: PPUSH
12430: CALL_OW 380
// hc_importance = 0 ;
12434: LD_ADDR_OWVAR 32
12438: PUSH
12439: LD_INT 0
12441: ST_TO_ADDR
// un = CreateHuman ;
12442: LD_ADDR_VAR 0 3
12446: PUSH
12447: CALL_OW 44
12451: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12452: LD_VAR 0 3
12456: PPUSH
12457: LD_INT 11
12459: PPUSH
12460: LD_INT 0
12462: PPUSH
12463: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12467: LD_VAR 0 3
12471: PPUSH
12472: LD_INT 111
12474: PPUSH
12475: LD_INT 38
12477: PPUSH
12478: CALL_OW 118
// end ;
12482: GO 12374
12484: POP
12485: POP
// for i = 1 to 2 do
12486: LD_ADDR_VAR 0 2
12490: PUSH
12491: DOUBLE
12492: LD_INT 1
12494: DEC
12495: ST_TO_ADDR
12496: LD_INT 2
12498: PUSH
12499: FOR_TO
12500: IFFALSE 12583
// begin uc_side = 3 ;
12502: LD_ADDR_OWVAR 20
12506: PUSH
12507: LD_INT 3
12509: ST_TO_ADDR
// uc_nation = 3 ;
12510: LD_ADDR_OWVAR 21
12514: PUSH
12515: LD_INT 3
12517: ST_TO_ADDR
// hc_gallery =  ;
12518: LD_ADDR_OWVAR 33
12522: PUSH
12523: LD_STRING 
12525: ST_TO_ADDR
// hc_name =  ;
12526: LD_ADDR_OWVAR 26
12530: PUSH
12531: LD_STRING 
12533: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12534: LD_INT 0
12536: PPUSH
12537: LD_INT 3
12539: PPUSH
12540: LD_EXP 13
12544: PPUSH
12545: LD_EXP 14
12549: PPUSH
12550: CALL_OW 12
12554: PPUSH
12555: CALL_OW 380
// un = CreateHuman ;
12559: LD_ADDR_VAR 0 3
12563: PUSH
12564: CALL_OW 44
12568: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12569: LD_VAR 0 3
12573: PPUSH
12574: LD_INT 10
12576: PPUSH
12577: CALL_OW 52
// end ;
12581: GO 12499
12583: POP
12584: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12585: LD_INT 3
12587: PPUSH
12588: LD_INT 3
12590: PPUSH
12591: LD_INT 33
12593: PPUSH
12594: LD_EXP 13
12598: PPUSH
12599: LD_EXP 14
12603: PPUSH
12604: CALL_OW 12
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: LD_INT 1
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: LD_INT 2
12620: PUSH
12621: LD_INT 3
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: PUSH
12630: LD_OWVAR 67
12634: ARRAY
12635: PPUSH
12636: CALL 9160 0 6
// for i in UnitsInside ( arm2 ) do
12640: LD_ADDR_VAR 0 2
12644: PUSH
12645: LD_INT 33
12647: PPUSH
12648: CALL_OW 313
12652: PUSH
12653: FOR_IN
12654: IFFALSE 12687
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12656: LD_ADDR_EXP 25
12660: PUSH
12661: LD_EXP 25
12665: PPUSH
12666: LD_EXP 25
12670: PUSH
12671: LD_INT 1
12673: PLUS
12674: PPUSH
12675: LD_VAR 0 2
12679: PPUSH
12680: CALL_OW 1
12684: ST_TO_ADDR
12685: GO 12653
12687: POP
12688: POP
// end ;
12689: LD_VAR 0 1
12693: RET
// export function PrepareNorthBase ; var i , un ; begin
12694: LD_INT 0
12696: PPUSH
12697: PPUSH
12698: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12699: LD_ADDR_VAR 0 2
12703: PUSH
12704: DOUBLE
12705: LD_INT 1
12707: DEC
12708: ST_TO_ADDR
12709: LD_INT 1
12711: PPUSH
12712: LD_INT 2
12714: PPUSH
12715: CALL_OW 12
12719: PUSH
12720: LD_INT 2
12722: PPUSH
12723: LD_INT 3
12725: PPUSH
12726: CALL_OW 12
12730: PUSH
12731: LD_INT 3
12733: PPUSH
12734: LD_INT 4
12736: PPUSH
12737: CALL_OW 12
12741: PUSH
12742: LD_INT 4
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: PUSH
12751: LD_OWVAR 67
12755: ARRAY
12756: PUSH
12757: FOR_TO
12758: IFFALSE 12844
// begin uc_side = 3 ;
12760: LD_ADDR_OWVAR 20
12764: PUSH
12765: LD_INT 3
12767: ST_TO_ADDR
// uc_nation = 3 ;
12768: LD_ADDR_OWVAR 21
12772: PUSH
12773: LD_INT 3
12775: ST_TO_ADDR
// hc_gallery =  ;
12776: LD_ADDR_OWVAR 33
12780: PUSH
12781: LD_STRING 
12783: ST_TO_ADDR
// hc_name =  ;
12784: LD_ADDR_OWVAR 26
12788: PUSH
12789: LD_STRING 
12791: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12792: LD_INT 0
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: LD_EXP 13
12802: PPUSH
12803: LD_EXP 14
12807: PPUSH
12808: CALL_OW 12
12812: PPUSH
12813: CALL_OW 380
// un = CreateHuman ;
12817: LD_ADDR_VAR 0 3
12821: PUSH
12822: CALL_OW 44
12826: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12827: LD_VAR 0 3
12831: PPUSH
12832: LD_INT 14
12834: PPUSH
12835: LD_INT 0
12837: PPUSH
12838: CALL_OW 49
// end ;
12842: GO 12757
12844: POP
12845: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12846: LD_INT 3
12848: PPUSH
12849: LD_INT 3
12851: PPUSH
12852: LD_INT 2
12854: PPUSH
12855: LD_EXP 13
12859: PPUSH
12860: LD_EXP 14
12864: PPUSH
12865: CALL_OW 12
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: LD_INT 2
12878: PPUSH
12879: CALL_OW 12
12883: PUSH
12884: LD_INT 1
12886: PPUSH
12887: LD_INT 3
12889: PPUSH
12890: CALL_OW 12
12894: PUSH
12895: LD_INT 1
12897: PPUSH
12898: LD_INT 3
12900: PPUSH
12901: CALL_OW 12
12905: PUSH
12906: LD_INT 4
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: LD_OWVAR 67
12919: ARRAY
12920: PPUSH
12921: CALL 9160 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12925: LD_INT 3
12927: PPUSH
12928: LD_INT 3
12930: PPUSH
12931: LD_INT 23
12933: PPUSH
12934: LD_EXP 13
12938: PPUSH
12939: LD_EXP 14
12943: PPUSH
12944: CALL_OW 12
12948: PPUSH
12949: LD_INT 4
12951: PPUSH
12952: LD_INT 0
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: LD_INT 2
12960: PUSH
12961: LD_INT 2
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PUSH
12970: LD_OWVAR 67
12974: ARRAY
12975: PPUSH
12976: CALL 9160 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12980: LD_INT 3
12982: PPUSH
12983: LD_INT 3
12985: PPUSH
12986: LD_INT 1
12988: PPUSH
12989: LD_EXP 13
12993: PPUSH
12994: LD_EXP 14
12998: PPUSH
12999: CALL_OW 12
13003: PPUSH
13004: LD_INT 2
13006: PPUSH
13007: LD_INT 1
13009: PUSH
13010: LD_INT 2
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: LD_INT 3
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: PUSH
13025: LD_OWVAR 67
13029: ARRAY
13030: PPUSH
13031: CALL 9160 0 6
// for i in UnitsInside ( arm1 ) do
13035: LD_ADDR_VAR 0 2
13039: PUSH
13040: LD_INT 2
13042: PPUSH
13043: CALL_OW 313
13047: PUSH
13048: FOR_IN
13049: IFFALSE 13082
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
13051: LD_ADDR_EXP 24
13055: PUSH
13056: LD_EXP 24
13060: PPUSH
13061: LD_EXP 24
13065: PUSH
13066: LD_INT 1
13068: PLUS
13069: PPUSH
13070: LD_VAR 0 2
13074: PPUSH
13075: CALL_OW 1
13079: ST_TO_ADDR
13080: GO 13048
13082: POP
13083: POP
// end ;
13084: LD_VAR 0 1
13088: RET
// export function PrepareOtherRussians ; var i , un ; begin
13089: LD_INT 0
13091: PPUSH
13092: PPUSH
13093: PPUSH
// for i := 1 to 2 do
13094: LD_ADDR_VAR 0 2
13098: PUSH
13099: DOUBLE
13100: LD_INT 1
13102: DEC
13103: ST_TO_ADDR
13104: LD_INT 2
13106: PUSH
13107: FOR_TO
13108: IFFALSE 13209
// begin uc_side := 3 ;
13110: LD_ADDR_OWVAR 20
13114: PUSH
13115: LD_INT 3
13117: ST_TO_ADDR
// uc_nation := 3 ;
13118: LD_ADDR_OWVAR 21
13122: PUSH
13123: LD_INT 3
13125: ST_TO_ADDR
// hc_gallery =  ;
13126: LD_ADDR_OWVAR 33
13130: PUSH
13131: LD_STRING 
13133: ST_TO_ADDR
// hc_name =  ;
13134: LD_ADDR_OWVAR 26
13138: PUSH
13139: LD_STRING 
13141: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13142: LD_INT 0
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: LD_EXP 13
13152: PPUSH
13153: LD_EXP 14
13157: PPUSH
13158: CALL_OW 12
13162: PPUSH
13163: CALL_OW 380
// un := CreateHuman ;
13167: LD_ADDR_VAR 0 3
13171: PUSH
13172: CALL_OW 44
13176: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
13177: LD_VAR 0 3
13181: PPUSH
13182: LD_INT 9
13184: PPUSH
13185: LD_INT 0
13187: PPUSH
13188: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
13192: LD_VAR 0 3
13196: PPUSH
13197: LD_INT 80
13199: PPUSH
13200: LD_INT 73
13202: PPUSH
13203: CALL_OW 118
// end ;
13207: GO 13107
13209: POP
13210: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13211: LD_ADDR_VAR 0 2
13215: PUSH
13216: LD_INT 22
13218: PUSH
13219: LD_INT 3
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 30
13228: PUSH
13229: LD_INT 31
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PPUSH
13240: CALL_OW 69
13244: PUSH
13245: FOR_IN
13246: IFFALSE 13274
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13248: LD_EXP 13
13252: PPUSH
13253: LD_EXP 14
13257: PPUSH
13258: CALL_OW 12
13262: PPUSH
13263: LD_VAR 0 2
13267: PPUSH
13268: CALL 9269 0 2
13272: GO 13245
13274: POP
13275: POP
// if Difficulty < 4 then
13276: LD_OWVAR 67
13280: PUSH
13281: LD_INT 4
13283: LESS
13284: IFFALSE 13288
// exit ;
13286: GO 13353
// ruPatrol := [ ] ;
13288: LD_ADDR_EXP 37
13292: PUSH
13293: EMPTY
13294: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
13295: LD_INT 0
13297: PPUSH
13298: LD_INT 4
13300: PPUSH
13301: CALL_OW 381
// un := CreateHuman ;
13305: LD_ADDR_VAR 0 3
13309: PUSH
13310: CALL_OW 44
13314: ST_TO_ADDR
// ruPatrol := Join ( ruPatrol , un ) ;
13315: LD_ADDR_EXP 37
13319: PUSH
13320: LD_EXP 37
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: CALL 78062 0 2
13334: ST_TO_ADDR
// PlaceUnitXY ( un , 92 , 44 , false ) ;
13335: LD_VAR 0 3
13339: PPUSH
13340: LD_INT 92
13342: PPUSH
13343: LD_INT 44
13345: PPUSH
13346: LD_INT 0
13348: PPUSH
13349: CALL_OW 48
// end ;
13353: LD_VAR 0 1
13357: RET
// export function PrepareCargoBays ; begin
13358: LD_INT 0
13360: PPUSH
// uc_side = 3 ;
13361: LD_ADDR_OWVAR 20
13365: PUSH
13366: LD_INT 3
13368: ST_TO_ADDR
// uc_nation = 3 ;
13369: LD_ADDR_OWVAR 21
13373: PUSH
13374: LD_INT 3
13376: ST_TO_ADDR
// vc_engine = 1 ;
13377: LD_ADDR_OWVAR 39
13381: PUSH
13382: LD_INT 1
13384: ST_TO_ADDR
// vc_control = 1 ;
13385: LD_ADDR_OWVAR 38
13389: PUSH
13390: LD_INT 1
13392: ST_TO_ADDR
// vc_weapon = 51 ;
13393: LD_ADDR_OWVAR 40
13397: PUSH
13398: LD_INT 51
13400: ST_TO_ADDR
// vc_chassis = 22 ;
13401: LD_ADDR_OWVAR 37
13405: PUSH
13406: LD_INT 22
13408: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13409: LD_ADDR_EXP 15
13413: PUSH
13414: CALL_OW 45
13418: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13419: LD_ADDR_EXP 16
13423: PUSH
13424: CALL_OW 45
13428: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13429: LD_EXP 15
13433: PPUSH
13434: LD_INT 13
13436: PPUSH
13437: LD_INT 0
13439: PPUSH
13440: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13444: LD_EXP 16
13448: PPUSH
13449: LD_INT 13
13451: PPUSH
13452: LD_INT 0
13454: PPUSH
13455: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13459: LD_EXP 15
13463: PPUSH
13464: LD_INT 2
13466: PPUSH
13467: LD_INT 70
13469: PUSH
13470: LD_INT 50
13472: PUSH
13473: LD_INT 30
13475: PUSH
13476: LD_INT 20
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: PUSH
13485: LD_OWVAR 67
13489: ARRAY
13490: PPUSH
13491: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13495: LD_EXP 16
13499: PPUSH
13500: LD_INT 2
13502: PPUSH
13503: LD_INT 70
13505: PUSH
13506: LD_INT 50
13508: PUSH
13509: LD_INT 30
13511: PUSH
13512: LD_INT 20
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: PUSH
13521: LD_OWVAR 67
13525: ARRAY
13526: PPUSH
13527: CALL_OW 291
// hc_gallery =  ;
13531: LD_ADDR_OWVAR 33
13535: PUSH
13536: LD_STRING 
13538: ST_TO_ADDR
// hc_name =  ;
13539: LD_ADDR_OWVAR 26
13543: PUSH
13544: LD_STRING 
13546: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13547: LD_INT 1
13549: PPUSH
13550: LD_INT 3
13552: PPUSH
13553: LD_INT 1
13555: PPUSH
13556: LD_INT 2
13558: PPUSH
13559: CALL_OW 12
13563: PPUSH
13564: CALL_OW 380
// driver1 = CreateHuman ;
13568: LD_ADDR_EXP 17
13572: PUSH
13573: CALL_OW 44
13577: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13578: LD_EXP 17
13582: PPUSH
13583: LD_EXP 15
13587: PPUSH
13588: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13592: LD_ADDR_OWVAR 26
13596: PUSH
13597: LD_STRING Nikolai Andreyev
13599: ST_TO_ADDR
// driver2 = CreateHuman ;
13600: LD_ADDR_EXP 18
13604: PUSH
13605: CALL_OW 44
13609: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13610: LD_EXP 18
13614: PPUSH
13615: LD_EXP 16
13619: PPUSH
13620: CALL_OW 52
// end ;
13624: LD_VAR 0 1
13628: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13629: LD_INT 0
13631: PPUSH
13632: PPUSH
13633: PPUSH
13634: PPUSH
13635: PPUSH
13636: PPUSH
// uc_side = 3 ;
13637: LD_ADDR_OWVAR 20
13641: PUSH
13642: LD_INT 3
13644: ST_TO_ADDR
// uc_nation = 3 ;
13645: LD_ADDR_OWVAR 21
13649: PUSH
13650: LD_INT 3
13652: ST_TO_ADDR
// for i := 1 to count do
13653: LD_ADDR_VAR 0 4
13657: PUSH
13658: DOUBLE
13659: LD_INT 1
13661: DEC
13662: ST_TO_ADDR
13663: LD_VAR 0 1
13667: PUSH
13668: FOR_TO
13669: IFFALSE 13931
// begin vc_engine = 1 ;
13671: LD_ADDR_OWVAR 39
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// vc_control = 1 ;
13679: LD_ADDR_OWVAR 38
13683: PUSH
13684: LD_INT 1
13686: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13687: LD_ADDR_OWVAR 40
13691: PUSH
13692: LD_INT 42
13694: ST_TO_ADDR
// if Difficulty = 3 then
13695: LD_OWVAR 67
13699: PUSH
13700: LD_INT 3
13702: EQUAL
13703: IFFALSE 13732
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13705: LD_ADDR_OWVAR 40
13709: PUSH
13710: LD_INT 42
13712: PUSH
13713: LD_INT 43
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 1
13722: PPUSH
13723: LD_INT 2
13725: PPUSH
13726: CALL_OW 12
13730: ARRAY
13731: ST_TO_ADDR
// if Difficulty = 4 then
13732: LD_OWVAR 67
13736: PUSH
13737: LD_INT 4
13739: EQUAL
13740: IFFALSE 13777
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13742: LD_ADDR_OWVAR 40
13746: PUSH
13747: LD_INT 42
13749: PUSH
13750: LD_INT 43
13752: PUSH
13753: LD_INT 43
13755: PUSH
13756: LD_INT 44
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 1
13767: PPUSH
13768: LD_INT 4
13770: PPUSH
13771: CALL_OW 12
13775: ARRAY
13776: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13777: LD_ADDR_OWVAR 37
13781: PUSH
13782: LD_INT 21
13784: PUSH
13785: LD_INT 22
13787: PUSH
13788: LD_INT 22
13790: PUSH
13791: LD_INT 22
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: PUSH
13800: LD_OWVAR 67
13804: ARRAY
13805: ST_TO_ADDR
// veh = CreateVehicle ;
13806: LD_ADDR_VAR 0 5
13810: PUSH
13811: CALL_OW 45
13815: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13816: LD_VAR 0 5
13820: PPUSH
13821: LD_VAR 0 2
13825: PPUSH
13826: LD_INT 0
13828: PPUSH
13829: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13833: LD_ADDR_EXP 26
13837: PUSH
13838: LD_EXP 26
13842: PUSH
13843: LD_VAR 0 5
13847: ADD
13848: ST_TO_ADDR
// hc_gallery =  ;
13849: LD_ADDR_OWVAR 33
13853: PUSH
13854: LD_STRING 
13856: ST_TO_ADDR
// hc_name =  ;
13857: LD_ADDR_OWVAR 26
13861: PUSH
13862: LD_STRING 
13864: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13865: LD_INT 0
13867: PPUSH
13868: LD_INT 3
13870: PPUSH
13871: LD_EXP 13
13875: PPUSH
13876: LD_EXP 14
13880: PPUSH
13881: CALL_OW 12
13885: PPUSH
13886: CALL_OW 380
// un = CreateHuman ;
13890: LD_ADDR_VAR 0 6
13894: PUSH
13895: CALL_OW 44
13899: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13900: LD_VAR 0 6
13904: PPUSH
13905: LD_VAR 0 5
13909: PPUSH
13910: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13914: LD_VAR 0 6
13918: PPUSH
13919: LD_INT 14
13921: PPUSH
13922: LD_INT 9
13924: PPUSH
13925: CALL_OW 111
// end ;
13929: GO 13668
13931: POP
13932: POP
// wait ( 0 0$1 ) ;
13933: LD_INT 35
13935: PPUSH
13936: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13940: LD_INT 0
13942: PPUSH
13943: LD_INT 2
13945: PPUSH
13946: LD_EXP 13
13950: PPUSH
13951: LD_EXP 14
13955: PPUSH
13956: CALL_OW 12
13960: PPUSH
13961: CALL_OW 380
// un = CreateHuman ;
13965: LD_ADDR_VAR 0 6
13969: PUSH
13970: CALL_OW 44
13974: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13975: LD_ADDR_VAR 0 4
13979: PUSH
13980: DOUBLE
13981: LD_INT 1
13983: DEC
13984: ST_TO_ADDR
13985: LD_VAR 0 1
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: LD_INT 2
13995: MUL
13996: PLUS
13997: PUSH
13998: FOR_TO
13999: IFFALSE 14091
// begin hc_gallery =  ;
14001: LD_ADDR_OWVAR 33
14005: PUSH
14006: LD_STRING 
14008: ST_TO_ADDR
// hc_name =  ;
14009: LD_ADDR_OWVAR 26
14013: PUSH
14014: LD_STRING 
14016: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
14017: LD_INT 1
14019: PPUSH
14020: LD_INT 1
14022: PPUSH
14023: LD_EXP 13
14027: PPUSH
14028: LD_EXP 14
14032: PPUSH
14033: CALL_OW 12
14037: PPUSH
14038: CALL_OW 380
// un = CreateHuman ;
14042: LD_ADDR_VAR 0 6
14046: PUSH
14047: CALL_OW 44
14051: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
14052: LD_VAR 0 6
14056: PPUSH
14057: LD_INT 9
14059: PPUSH
14060: LD_INT 13
14062: PPUSH
14063: LD_INT 4
14065: PPUSH
14066: LD_INT 0
14068: PPUSH
14069: CALL_OW 50
// attackGroup = attackGroup ^ un ;
14073: LD_ADDR_EXP 26
14077: PUSH
14078: LD_EXP 26
14082: PUSH
14083: LD_VAR 0 6
14087: ADD
14088: ST_TO_ADDR
// end ;
14089: GO 13998
14091: POP
14092: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
14093: LD_ADDR_VAR 0 7
14097: PUSH
14098: LD_INT 26
14100: PPUSH
14101: LD_INT 22
14103: PUSH
14104: LD_INT 3
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 21
14113: PUSH
14114: LD_INT 1
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 26
14123: PUSH
14124: LD_INT 1
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: PPUSH
14136: CALL_OW 70
14140: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
14141: LD_VAR 0 7
14145: PUSH
14146: LD_INT 1
14148: ARRAY
14149: PPUSH
14150: LD_STRING D9-Rus3-1
14152: PPUSH
14153: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
14157: LD_VAR 0 7
14161: PUSH
14162: LD_INT 2
14164: ARRAY
14165: PPUSH
14166: LD_STRING D9-Russ-1
14168: PPUSH
14169: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
14173: LD_EXP 26
14177: PPUSH
14178: LD_INT 31
14180: PPUSH
14181: LD_INT 13
14183: PPUSH
14184: CALL_OW 114
// wait ( 0 0$3 ) ;
14188: LD_INT 105
14190: PPUSH
14191: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14195: LD_INT 35
14197: PPUSH
14198: CALL_OW 67
// for i in attackGroup do
14202: LD_ADDR_VAR 0 4
14206: PUSH
14207: LD_EXP 26
14211: PUSH
14212: FOR_IN
14213: IFFALSE 14592
// begin if IsDead ( i ) then
14215: LD_VAR 0 4
14219: PPUSH
14220: CALL_OW 301
14224: IFFALSE 14244
// begin attackGroup := attackGroup diff i ;
14226: LD_ADDR_EXP 26
14230: PUSH
14231: LD_EXP 26
14235: PUSH
14236: LD_VAR 0 4
14240: DIFF
14241: ST_TO_ADDR
// continue ;
14242: GO 14212
// end ; if not HasTask ( i ) and not GetTag ( i ) then
14244: LD_VAR 0 4
14248: PPUSH
14249: CALL_OW 314
14253: NOT
14254: IFFALSE 14268
14256: PUSH
14257: LD_VAR 0 4
14261: PPUSH
14262: CALL_OW 110
14266: NOT
14267: AND
14268: IFFALSE 14304
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
14270: LD_VAR 0 4
14274: PPUSH
14275: LD_INT 22
14277: PUSH
14278: LD_INT 1
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: PPUSH
14290: LD_VAR 0 4
14294: PPUSH
14295: CALL_OW 74
14299: PPUSH
14300: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14304: LD_VAR 0 4
14308: PPUSH
14309: CALL_OW 110
14313: NOT
14314: IFFALSE 14331
14316: PUSH
14317: LD_VAR 0 4
14321: PPUSH
14322: CALL_OW 256
14326: PUSH
14327: LD_INT 650
14329: LESS
14330: AND
14331: IFFALSE 14348
14333: PUSH
14334: LD_VAR 0 4
14338: PPUSH
14339: CALL_OW 247
14343: PUSH
14344: LD_INT 2
14346: EQUAL
14347: AND
14348: IFFALSE 14377
// begin SetTag ( i , 1 ) ;
14350: LD_VAR 0 4
14354: PPUSH
14355: LD_INT 1
14357: PPUSH
14358: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14362: LD_VAR 0 4
14366: PPUSH
14367: LD_INT 20
14369: PPUSH
14370: LD_INT 8
14372: PPUSH
14373: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14377: LD_VAR 0 4
14381: PPUSH
14382: CALL_OW 110
14386: PUSH
14387: LD_INT 1
14389: EQUAL
14390: IFFALSE 14413
14392: PUSH
14393: LD_VAR 0 4
14397: PPUSH
14398: LD_INT 20
14400: PPUSH
14401: LD_INT 8
14403: PPUSH
14404: CALL_OW 297
14408: PUSH
14409: LD_INT 6
14411: LESS
14412: AND
14413: IFFALSE 14427
// SetTag ( i , 2 ) ;
14415: LD_VAR 0 4
14419: PPUSH
14420: LD_INT 2
14422: PPUSH
14423: CALL_OW 109
// if GetTag ( i ) = 2 then
14427: LD_VAR 0 4
14431: PPUSH
14432: CALL_OW 110
14436: PUSH
14437: LD_INT 2
14439: EQUAL
14440: IFFALSE 14550
// begin if GetLives ( i ) = 1000 then
14442: LD_VAR 0 4
14446: PPUSH
14447: CALL_OW 256
14451: PUSH
14452: LD_INT 1000
14454: EQUAL
14455: IFFALSE 14471
// SetTag ( i , 3 ) else
14457: LD_VAR 0 4
14461: PPUSH
14462: LD_INT 3
14464: PPUSH
14465: CALL_OW 109
14469: GO 14550
// if IsDrivenBy ( i ) then
14471: LD_VAR 0 4
14475: PPUSH
14476: CALL_OW 311
14480: IFFALSE 14550
// begin mech := IsDrivenBy ( i ) ;
14482: LD_ADDR_VAR 0 8
14486: PUSH
14487: LD_VAR 0 4
14491: PPUSH
14492: CALL_OW 311
14496: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14497: LD_INT 1
14499: PPUSH
14500: LD_VAR 0 8
14504: PPUSH
14505: CALL_OW 292
14509: NOT
14510: IFFALSE 14527
14512: PUSH
14513: LD_VAR 0 8
14517: PPUSH
14518: CALL_OW 256
14522: PUSH
14523: LD_INT 1000
14525: LESS
14526: AND
14527: IFFALSE 14541
// SetLives ( mech , 1000 ) ;
14529: LD_VAR 0 8
14533: PPUSH
14534: LD_INT 1000
14536: PPUSH
14537: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14541: LD_VAR 0 8
14545: PPUSH
14546: CALL 79776 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14550: LD_VAR 0 4
14554: PPUSH
14555: CALL_OW 110
14559: PUSH
14560: LD_INT 3
14562: EQUAL
14563: IFFALSE 14576
14565: PUSH
14566: LD_VAR 0 4
14570: PPUSH
14571: CALL_OW 311
14575: AND
14576: IFFALSE 14590
// SetTag ( i , 0 ) ;
14578: LD_VAR 0 4
14582: PPUSH
14583: LD_INT 0
14585: PPUSH
14586: CALL_OW 109
// end ;
14590: GO 14212
14592: POP
14593: POP
// until not attackGroup ;
14594: LD_EXP 26
14598: NOT
14599: IFFALSE 14195
// end ;
14601: LD_VAR 0 3
14605: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14606: LD_EXP 26
14610: PPUSH
14611: LD_INT 21
14613: PUSH
14614: LD_INT 2
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PPUSH
14621: CALL_OW 72
14625: IFFALSE 14693
14627: GO 14629
14629: DISABLE
14630: LD_INT 0
14632: PPUSH
// begin enable ;
14633: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14634: LD_ADDR_VAR 0 1
14638: PUSH
14639: LD_EXP 26
14643: PPUSH
14644: LD_INT 21
14646: PUSH
14647: LD_INT 2
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PPUSH
14654: CALL_OW 72
14658: PUSH
14659: FOR_IN
14660: IFFALSE 14691
// if GetFuel ( i ) < 3 then
14662: LD_VAR 0 1
14666: PPUSH
14667: CALL_OW 261
14671: PUSH
14672: LD_INT 3
14674: LESS
14675: IFFALSE 14689
// SetFuel ( i , 3 ) ;
14677: LD_VAR 0 1
14681: PPUSH
14682: LD_INT 3
14684: PPUSH
14685: CALL_OW 240
14689: GO 14659
14691: POP
14692: POP
// end ;
14693: PPOPN 1
14695: END
// every 0 0$2 trigger ruPatrol do
14696: LD_EXP 37
14700: IFFALSE 14839
14702: GO 14704
14704: DISABLE
// begin if not UnitFilter ( ruPatrol , [ f_ok ] ) then
14705: LD_EXP 37
14709: PPUSH
14710: LD_INT 50
14712: PUSH
14713: EMPTY
14714: LIST
14715: PPUSH
14716: CALL_OW 72
14720: NOT
14721: IFFALSE 14725
// exit ;
14723: GO 14839
// if GetDistUnitXY ( ruPatrol [ 1 ] , 92 , 44 ) < 3 and not HasTask ( ruPatrol [ 1 ] ) then
14725: LD_EXP 37
14729: PUSH
14730: LD_INT 1
14732: ARRAY
14733: PPUSH
14734: LD_INT 92
14736: PPUSH
14737: LD_INT 44
14739: PPUSH
14740: CALL_OW 297
14744: PUSH
14745: LD_INT 3
14747: LESS
14748: IFFALSE 14766
14750: PUSH
14751: LD_EXP 37
14755: PUSH
14756: LD_INT 1
14758: ARRAY
14759: PPUSH
14760: CALL_OW 314
14764: NOT
14765: AND
14766: IFFALSE 14796
// begin wait ( 0 0$5 ) ;
14768: LD_INT 175
14770: PPUSH
14771: CALL_OW 67
// ComAgressiveMove ( ruPatrol [ 1 ] , 122 , 68 ) ;
14775: LD_EXP 37
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: LD_INT 122
14786: PPUSH
14787: LD_INT 68
14789: PPUSH
14790: CALL_OW 114
// end else
14794: GO 14838
// if not HasTask ( ruPatrol [ 1 ] ) then
14796: LD_EXP 37
14800: PUSH
14801: LD_INT 1
14803: ARRAY
14804: PPUSH
14805: CALL_OW 314
14809: NOT
14810: IFFALSE 14838
// begin wait ( 0 0$5 ) ;
14812: LD_INT 175
14814: PPUSH
14815: CALL_OW 67
// ComAgressiveMove ( ruPatrol [ 1 ] , 92 , 44 ) ;
14819: LD_EXP 37
14823: PUSH
14824: LD_INT 1
14826: ARRAY
14827: PPUSH
14828: LD_INT 92
14830: PPUSH
14831: LD_INT 44
14833: PPUSH
14834: CALL_OW 114
// end ; enable ;
14838: ENABLE
// end ; end_of_file
14839: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14840: LD_INT 22
14842: PUSH
14843: LD_INT 3
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 25
14852: PUSH
14853: LD_INT 2
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PPUSH
14864: CALL_OW 69
14868: IFFALSE 14887
14870: GO 14872
14872: DISABLE
// begin enable ;
14873: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14874: LD_INT 3
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: LD_INT 22
14882: PPUSH
14883: CALL 9405 0 3
// end ;
14887: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14888: LD_INT 22
14890: PUSH
14891: LD_INT 3
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 25
14900: PUSH
14901: LD_INT 4
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PPUSH
14912: CALL_OW 69
14916: IFFALSE 14938
14918: GO 14920
14920: DISABLE
// begin enable ;
14921: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14922: LD_INT 3
14924: PPUSH
14925: LD_INT 20
14927: PPUSH
14928: LD_INT 22
14930: PPUSH
14931: LD_INT 23
14933: PPUSH
14934: CALL 9743 0 4
// end ;
14938: END
// every 0 0$1 trigger northBaseDefenders do
14939: LD_EXP 24
14943: IFFALSE 14967
14945: GO 14947
14947: DISABLE
// begin enable ;
14948: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14949: LD_INT 22
14951: PPUSH
14952: LD_INT 1
14954: PPUSH
14955: LD_EXP 24
14959: PPUSH
14960: LD_INT 2
14962: PPUSH
14963: CALL 10017 0 4
// end ;
14967: END
// every 0 0$1 trigger southBaseDefenders do
14968: LD_EXP 25
14972: IFFALSE 14996
14974: GO 14976
14976: DISABLE
// begin enable ;
14977: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14978: LD_INT 23
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_EXP 25
14988: PPUSH
14989: LD_INT 33
14991: PPUSH
14992: CALL 10017 0 4
// end ; end_of_file
14996: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14997: LD_VAR 0 1
15001: PPUSH
15002: CALL 33388 0 1
// if unit = JMM then
15006: LD_VAR 0 1
15010: PUSH
15011: LD_EXP 1
15015: EQUAL
15016: IFFALSE 15025
// YouLost ( JMM ) ;
15018: LD_STRING JMM
15020: PPUSH
15021: CALL_OW 104
// if GetBType ( unit ) = b_depot then
15025: LD_VAR 0 1
15029: PPUSH
15030: CALL_OW 266
15034: PUSH
15035: LD_INT 0
15037: EQUAL
15038: IFFALSE 15047
// YouLost ( DepotDestroyed ) ;
15040: LD_STRING DepotDestroyed
15042: PPUSH
15043: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15047: LD_VAR 0 1
15051: PPUSH
15052: CALL_OW 255
15056: PUSH
15057: LD_INT 1
15059: EQUAL
15060: IFFALSE 15077
15062: PUSH
15063: LD_VAR 0 1
15067: PPUSH
15068: CALL_OW 247
15072: PUSH
15073: LD_INT 1
15075: EQUAL
15076: AND
15077: IFFALSE 15093
// deadsCounter = deadsCounter + 1 ;
15079: LD_ADDR_EXP 31
15083: PUSH
15084: LD_EXP 31
15088: PUSH
15089: LD_INT 1
15091: PLUS
15092: ST_TO_ADDR
// end ;
15093: PPOPN 1
15095: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
15096: LD_VAR 0 1
15100: PUSH
15101: LD_INT 22
15103: PUSH
15104: LD_INT 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 23
15113: PUSH
15114: LD_INT 1
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 21
15123: PUSH
15124: LD_INT 1
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: PPUSH
15136: CALL_OW 69
15140: IN
15141: IFFALSE 15153
15143: PUSH
15144: LD_VAR 0 2
15148: PUSH
15149: LD_INT 1
15151: EQUAL
15152: AND
15153: IFFALSE 15159
// JMMTraitor ;
15155: CALL 8813 0 0
// end ;
15159: PPOPN 3
15161: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
15162: LD_VAR 0 1
15166: PPUSH
15167: CALL_OW 255
15171: PUSH
15172: LD_INT 3
15174: EQUAL
15175: IFFALSE 15253
// begin ComMoveXY ( driver , 6 , 10 ) ;
15177: LD_VAR 0 1
15181: PPUSH
15182: LD_INT 6
15184: PPUSH
15185: LD_INT 10
15187: PPUSH
15188: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15192: LD_INT 35
15194: PPUSH
15195: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
15199: LD_VAR 0 1
15203: PPUSH
15204: LD_INT 6
15206: PPUSH
15207: LD_INT 10
15209: PPUSH
15210: CALL_OW 111
// if IsDead ( driver ) then
15214: LD_VAR 0 1
15218: PPUSH
15219: CALL_OW 301
15223: IFFALSE 15227
// exit ;
15225: GO 15253
// until IsAt ( driver , 6 , 10 ) ;
15227: LD_VAR 0 1
15231: PPUSH
15232: LD_INT 6
15234: PPUSH
15235: LD_INT 10
15237: PPUSH
15238: CALL_OW 307
15242: IFFALSE 15192
// RemoveUnit ( driver ) ;
15244: LD_VAR 0 1
15248: PPUSH
15249: CALL_OW 64
// end ; end ;
15253: PPOPN 4
15255: END
// on Command ( cmd ) do var i , j , tmp ;
15256: LD_INT 0
15258: PPUSH
15259: PPUSH
15260: PPUSH
// begin SOS_Command ( cmd ) ;
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL 33430 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
15270: LD_ADDR_VAR 0 2
15274: PUSH
15275: LD_INT 22
15277: PUSH
15278: LD_INT 1
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 21
15287: PUSH
15288: LD_INT 2
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PPUSH
15299: CALL_OW 69
15303: PUSH
15304: FOR_IN
15305: IFFALSE 15430
// begin if GetTaskList ( i ) then
15307: LD_VAR 0 2
15311: PPUSH
15312: CALL_OW 437
15316: IFFALSE 15428
// begin for j = 1 to GetTaskList ( i ) do
15318: LD_ADDR_VAR 0 3
15322: PUSH
15323: DOUBLE
15324: LD_INT 1
15326: DEC
15327: ST_TO_ADDR
15328: LD_VAR 0 2
15332: PPUSH
15333: CALL_OW 437
15337: PUSH
15338: FOR_TO
15339: IFFALSE 15426
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
15341: LD_ADDR_VAR 0 4
15345: PUSH
15346: LD_VAR 0 2
15350: PPUSH
15351: CALL_OW 437
15355: PUSH
15356: LD_VAR 0 3
15360: ARRAY
15361: PUSH
15362: LD_INT 4
15364: ARRAY
15365: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
15366: LD_VAR 0 4
15370: PPUSH
15371: CALL_OW 255
15375: PUSH
15376: LD_INT 3
15378: EQUAL
15379: IFFALSE 15396
15381: PUSH
15382: LD_VAR 0 4
15386: PPUSH
15387: CALL_OW 247
15391: PUSH
15392: LD_INT 2
15394: EQUAL
15395: AND
15396: IFFALSE 15413
15398: PUSH
15399: LD_VAR 0 4
15403: PPUSH
15404: CALL_OW 264
15408: PUSH
15409: LD_INT 51
15411: EQUAL
15412: AND
15413: IFFALSE 15424
// ComStop ( i ) ;
15415: LD_VAR 0 2
15419: PPUSH
15420: CALL_OW 141
// end ;
15424: GO 15338
15426: POP
15427: POP
// end ; end ;
15428: GO 15304
15430: POP
15431: POP
// end ;
15432: PPOPN 4
15434: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
15435: LD_VAR 0 2
15439: PUSH
15440: LD_EXP 8
15444: EQUAL
15445: IFFALSE 15457
15447: PUSH
15448: LD_EXP 21
15452: PUSH
15453: LD_INT 4
15455: NONEQUAL
15456: AND
15457: IFFALSE 15611
// begin if IsOk ( Mikhail ) then
15459: LD_EXP 8
15463: PPUSH
15464: CALL_OW 302
15468: IFFALSE 15476
// AskMikhail else
15470: CALL 7479 0 0
15474: GO 15611
// if IsOk ( llab1 ) then
15476: LD_INT 23
15478: PPUSH
15479: CALL_OW 302
15483: IFFALSE 15574
// begin InGameOn ;
15485: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
15489: LD_EXP 8
15493: PPUSH
15494: LD_INT 6
15496: PPUSH
15497: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
15501: LD_INT 23
15503: PPUSH
15504: LD_INT 6
15506: PPUSH
15507: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
15511: LD_EXP 8
15515: PPUSH
15516: LD_INT 23
15518: PPUSH
15519: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15523: LD_INT 35
15525: PPUSH
15526: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15530: LD_EXP 8
15534: PPUSH
15535: CALL_OW 310
15539: PUSH
15540: LD_INT 23
15542: EQUAL
15543: IFTRUE 15556
15545: PUSH
15546: LD_EXP 8
15550: PPUSH
15551: CALL_OW 301
15555: OR
15556: IFFALSE 15523
// SetSide ( llab1 , 1 ) ;
15558: LD_INT 23
15560: PPUSH
15561: LD_INT 1
15563: PPUSH
15564: CALL_OW 235
// InGameOff ;
15568: CALL_OW 9
// end else
15572: GO 15611
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15574: LD_INT 3
15576: PPUSH
15577: LD_INT 6
15579: PPUSH
15580: LD_INT 2
15582: PPUSH
15583: LD_INT 1
15585: PPUSH
15586: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15590: LD_EXP 8
15594: PPUSH
15595: LD_INT 6
15597: PPUSH
15598: CALL_OW 235
// ComHold ( Mikhail ) ;
15602: LD_EXP 8
15606: PPUSH
15607: CALL_OW 140
// end ; end ; end ;
15611: PPOPN 2
15613: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15614: LD_VAR 0 1
15618: PPUSH
15619: LD_VAR 0 2
15623: PPUSH
15624: CALL 33446 0 2
// end ;
15628: PPOPN 2
15630: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15631: LD_EXP 8
15635: PPUSH
15636: CALL_OW 257
15640: PUSH
15641: LD_INT 3
15643: NONEQUAL
15644: IFFALSE 15662
15646: GO 15648
15648: DISABLE
// begin enable ;
15649: ENABLE
// SetClass ( Mikhail , 3 ) ;
15650: LD_EXP 8
15654: PPUSH
15655: LD_INT 3
15657: PPUSH
15658: CALL_OW 336
// end ; end_of_file
15662: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15663: LD_INT 22
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 21
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: LD_INT 25
15685: PUSH
15686: LD_INT 2
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: LIST
15697: PPUSH
15698: CALL_OW 69
15702: PUSH
15703: LD_INT 0
15705: EQUAL
15706: IFFALSE 15753
15708: PUSH
15709: LD_INT 22
15711: PUSH
15712: LD_INT 4
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 21
15721: PUSH
15722: LD_INT 1
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 25
15731: PUSH
15732: LD_INT 2
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: PPUSH
15744: CALL_OW 69
15748: PUSH
15749: LD_INT 0
15751: EQUAL
15752: AND
15753: IFFALSE 15768
15755: PUSH
15756: LD_INT 1
15758: PPUSH
15759: CALL_OW 255
15763: PUSH
15764: LD_INT 3
15766: EQUAL
15767: AND
15768: IFFALSE 15783
15770: PUSH
15771: LD_INT 10
15773: PPUSH
15774: CALL_OW 255
15778: PUSH
15779: LD_INT 3
15781: EQUAL
15782: AND
15783: IFFALSE 15795
15785: GO 15787
15787: DISABLE
// YouLost ( Engineer ) ;
15788: LD_STRING Engineer
15790: PPUSH
15791: CALL_OW 104
15795: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15796: LD_INT 1
15798: PPUSH
15799: CALL_OW 255
15803: PUSH
15804: LD_INT 3
15806: EQUAL
15807: IFFALSE 15819
15809: PUSH
15810: LD_EXP 27
15814: PUSH
15815: LD_INT 1
15817: EQUAL
15818: AND
15819: IFFALSE 15831
15821: GO 15823
15823: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15824: LD_STRING DepotCaptured
15826: PPUSH
15827: CALL_OW 104
15831: END
// export function PrepareTigers ; var i , un ; begin
15832: LD_INT 0
15834: PPUSH
15835: PPUSH
15836: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15837: LD_ADDR_VAR 0 2
15841: PUSH
15842: DOUBLE
15843: LD_INT 1
15845: DEC
15846: ST_TO_ADDR
15847: LD_INT 2
15849: PUSH
15850: LD_INT 3
15852: PUSH
15853: LD_INT 4
15855: PUSH
15856: LD_INT 5
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: PUSH
15865: LD_OWVAR 67
15869: ARRAY
15870: PUSH
15871: FOR_TO
15872: IFFALSE 15987
// begin uc_side := 0 ;
15874: LD_ADDR_OWVAR 20
15878: PUSH
15879: LD_INT 0
15881: ST_TO_ADDR
// uc_nation := nation_nature ;
15882: LD_ADDR_OWVAR 21
15886: PUSH
15887: LD_INT 0
15889: ST_TO_ADDR
// hc_sex := sex_male ;
15890: LD_ADDR_OWVAR 27
15894: PUSH
15895: LD_INT 1
15897: ST_TO_ADDR
// hc_class := class_tiger ;
15898: LD_ADDR_OWVAR 28
15902: PUSH
15903: LD_INT 14
15905: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15906: LD_ADDR_OWVAR 31
15910: PUSH
15911: LD_EXP 14
15915: PUSH
15916: LD_INT 0
15918: PUSH
15919: LD_INT 0
15921: PUSH
15922: LD_INT 0
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15931: LD_ADDR_OWVAR 35
15935: PUSH
15936: LD_INT 30
15938: PUSH
15939: LD_INT 40
15941: PUSH
15942: LD_INT 45
15944: PUSH
15945: LD_INT 50
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: PUSH
15954: LD_OWVAR 67
15958: ARRAY
15959: ST_TO_ADDR
// un = CreateHuman ;
15960: LD_ADDR_VAR 0 3
15964: PUSH
15965: CALL_OW 44
15969: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15970: LD_VAR 0 3
15974: PPUSH
15975: LD_INT 27
15977: PPUSH
15978: LD_INT 0
15980: PPUSH
15981: CALL_OW 49
// end ;
15985: GO 15871
15987: POP
15988: POP
// end ; end_of_file
15989: LD_VAR 0 1
15993: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15994: LD_INT 1
15996: PPUSH
15997: CALL_OW 255
16001: PUSH
16002: LD_INT 1
16004: EQUAL
16005: IFFALSE 16020
16007: PUSH
16008: LD_INT 10
16010: PPUSH
16011: CALL_OW 255
16015: PUSH
16016: LD_INT 1
16018: EQUAL
16019: AND
16020: IFFALSE 16032
16022: PUSH
16023: LD_EXP 20
16027: PUSH
16028: LD_INT 1
16030: EQUAL
16031: AND
16032: IFFALSE 16093
16034: PUSH
16035: LD_INT 22
16037: PUSH
16038: LD_INT 3
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 21
16047: PUSH
16048: LD_INT 2
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 34
16057: PUSH
16058: LD_INT 51
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 3
16067: PUSH
16068: LD_INT 58
16070: PUSH
16071: EMPTY
16072: LIST
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: PPUSH
16084: CALL_OW 69
16088: PUSH
16089: LD_INT 0
16091: EQUAL
16092: AND
16093: IFFALSE 16184
16095: GO 16097
16097: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
16098: LD_INT 9450
16100: PUSH
16101: LD_INT 8400
16103: PUSH
16104: LD_INT 6300
16106: PUSH
16107: LD_INT 6300
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: PUSH
16116: LD_OWVAR 67
16120: ARRAY
16121: PPUSH
16122: CALL_OW 67
// if cargoEscape then
16126: LD_EXP 20
16130: IFFALSE 16184
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
16132: LD_EXP 9
16136: PPUSH
16137: LD_STRING D6-Pow-1
16139: PPUSH
16140: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
16144: LD_EXP 1
16148: PPUSH
16149: LD_STRING D6-JMM-1
16151: PPUSH
16152: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
16156: LD_EXP 9
16160: PPUSH
16161: LD_STRING D6-Pow-2
16163: PPUSH
16164: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
16168: LD_EXP 1
16172: PPUSH
16173: LD_STRING D6-JMM-2
16175: PPUSH
16176: CALL_OW 88
// FinishMission ;
16180: CALL 16406 0 0
// end ; end ;
16184: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
16185: LD_INT 1
16187: PPUSH
16188: CALL_OW 255
16192: PUSH
16193: LD_INT 1
16195: EQUAL
16196: IFFALSE 16211
16198: PUSH
16199: LD_INT 10
16201: PPUSH
16202: CALL_OW 255
16206: PUSH
16207: LD_INT 1
16209: EQUAL
16210: AND
16211: IFFALSE 16223
16213: PUSH
16214: LD_EXP 20
16218: PUSH
16219: LD_INT 1
16221: GREATER
16222: AND
16223: IFFALSE 16298
16225: GO 16227
16227: DISABLE
16228: LD_INT 0
16230: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
16231: LD_INT 11550
16233: PUSH
16234: LD_INT 10500
16236: PUSH
16237: LD_INT 9450
16239: PUSH
16240: LD_INT 8400
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: PUSH
16249: LD_OWVAR 67
16253: ARRAY
16254: PPUSH
16255: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
16259: LD_INT 1
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: LD_INT 3
16267: PUSH
16268: LD_INT 4
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: PUSH
16277: LD_OWVAR 67
16281: ARRAY
16282: PPUSH
16283: LD_INT 13
16285: PPUSH
16286: CALL 13629 0 2
// lastBattle = 1 ;
16290: LD_ADDR_EXP 27
16294: PUSH
16295: LD_INT 1
16297: ST_TO_ADDR
// end ;
16298: PPOPN 1
16300: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
16301: LD_EXP 27
16305: PUSH
16306: LD_INT 1
16308: EQUAL
16309: IFFALSE 16348
16311: PUSH
16312: LD_INT 26
16314: PPUSH
16315: LD_INT 22
16317: PUSH
16318: LD_INT 3
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 21
16327: PUSH
16328: LD_INT 1
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PPUSH
16339: CALL_OW 70
16343: PUSH
16344: LD_INT 0
16346: EQUAL
16347: AND
16348: IFFALSE 16405
16350: GO 16352
16352: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
16353: LD_EXP 9
16357: PPUSH
16358: LD_STRING D6-Pow-1
16360: PPUSH
16361: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
16365: LD_EXP 1
16369: PPUSH
16370: LD_STRING D6-JMM-1
16372: PPUSH
16373: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
16377: LD_EXP 9
16381: PPUSH
16382: LD_STRING D6-Pow-2
16384: PPUSH
16385: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
16389: LD_EXP 1
16393: PPUSH
16394: LD_STRING D6-JMM-2
16396: PPUSH
16397: CALL_OW 88
// FinishMission ;
16401: CALL 16406 0 0
// end ;
16405: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
16406: LD_INT 0
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
// if traitor then
16413: LD_EXP 33
16417: IFFALSE 16421
// exit ;
16419: GO 17297
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 2 then
16421: LD_INT 22
16423: PUSH
16424: LD_INT 1
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 21
16433: PUSH
16434: LD_INT 1
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 23
16443: PUSH
16444: LD_INT 1
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: LD_INT 50
16453: PUSH
16454: EMPTY
16455: LIST
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: PPUSH
16463: CALL_OW 69
16467: PUSH
16468: LD_INT 2
16470: LESS
16471: IFFALSE 16480
// YouLost ( Troops ) ;
16473: LD_STRING Troops
16475: PPUSH
16476: CALL_OW 104
// if tick <= 18 18$00 then
16480: LD_OWVAR 1
16484: PUSH
16485: LD_INT 37800
16487: LESSEQUAL
16488: IFFALSE 16497
// SetAchievement ( ACH_ASPEED_2 ) ;
16490: LD_STRING ACH_ASPEED_2
16492: PPUSH
16493: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
16497: LD_ADDR_VAR 0 2
16501: PUSH
16502: LD_INT 22
16504: PUSH
16505: LD_INT 1
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 21
16514: PUSH
16515: LD_INT 2
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 24
16524: PUSH
16525: LD_INT 251
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: PPUSH
16537: CALL_OW 69
16541: ST_TO_ADDR
// if tmp then
16542: LD_VAR 0 2
16546: IFFALSE 16560
// SaveVehicles ( tmp , 02_tanks_1 ) ;
16548: LD_VAR 0 2
16552: PPUSH
16553: LD_STRING 02_tanks_1
16555: PPUSH
16556: CALL 10896 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
16560: LD_EXP 21
16564: PUSH
16565: LD_INT 1
16567: EQUAL
16568: IFFALSE 16581
16570: PUSH
16571: LD_EXP 8
16575: PPUSH
16576: CALL_OW 300
16580: AND
16581: IFFALSE 16595
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
16583: LD_EXP 21
16587: PPUSH
16588: LD_STRING 02_mikhailStatus_1
16590: PPUSH
16591: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
16595: LD_INT 1
16597: PPUSH
16598: CALL_OW 274
16602: PPUSH
16603: LD_INT 1
16605: PPUSH
16606: CALL_OW 275
16610: PPUSH
16611: LD_STRING 02_resources_4
16613: PPUSH
16614: CALL_OW 39
// m1 := false ;
16618: LD_ADDR_VAR 0 3
16622: PUSH
16623: LD_INT 0
16625: ST_TO_ADDR
// m2 := false ;
16626: LD_ADDR_VAR 0 4
16630: PUSH
16631: LD_INT 0
16633: ST_TO_ADDR
// m3 := false ;
16634: LD_ADDR_VAR 0 5
16638: PUSH
16639: LD_INT 0
16641: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16642: LD_INT 1
16644: PPUSH
16645: CALL_OW 274
16649: PPUSH
16650: LD_INT 1
16652: PPUSH
16653: CALL_OW 275
16657: PUSH
16658: LD_INT 200
16660: GREATEREQUAL
16661: IFFALSE 16683
// begin AddMedal ( Cans , 1 ) ;
16663: LD_STRING Cans
16665: PPUSH
16666: LD_INT 1
16668: PPUSH
16669: CALL_OW 101
// m1 := true ;
16673: LD_ADDR_VAR 0 3
16677: PUSH
16678: LD_INT 1
16680: ST_TO_ADDR
// end else
16681: GO 16694
// begin AddMedal ( Cans , - 1 ) ;
16683: LD_STRING Cans
16685: PPUSH
16686: LD_INT 1
16688: NEG
16689: PPUSH
16690: CALL_OW 101
// end ; if deadsCounter < 2 then
16694: LD_EXP 31
16698: PUSH
16699: LD_INT 2
16701: LESS
16702: IFFALSE 16724
// begin AddMedal ( Deaths , 1 ) ;
16704: LD_STRING Deaths
16706: PPUSH
16707: LD_INT 1
16709: PPUSH
16710: CALL_OW 101
// m2 := true ;
16714: LD_ADDR_VAR 0 4
16718: PUSH
16719: LD_INT 1
16721: ST_TO_ADDR
// end else
16722: GO 16735
// begin AddMedal ( Deaths , - 1 ) ;
16724: LD_STRING Deaths
16726: PPUSH
16727: LD_INT 1
16729: NEG
16730: PPUSH
16731: CALL_OW 101
// end ; if mikhailStatus = 0 then
16735: LD_EXP 21
16739: PUSH
16740: LD_INT 0
16742: EQUAL
16743: IFFALSE 16756
// AddMedal ( Prisoner , - 1 ) ;
16745: LD_STRING Prisoner
16747: PPUSH
16748: LD_INT 1
16750: NEG
16751: PPUSH
16752: CALL_OW 101
// if mikhailStatus = 1 then
16756: LD_EXP 21
16760: PUSH
16761: LD_INT 1
16763: EQUAL
16764: IFFALSE 16784
// begin AddMedal ( Prisoner , 1 ) ;
16766: LD_STRING Prisoner
16768: PPUSH
16769: LD_INT 1
16771: PPUSH
16772: CALL_OW 101
// m3 := true ;
16776: LD_ADDR_VAR 0 5
16780: PUSH
16781: LD_INT 1
16783: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16784: LD_EXP 21
16788: PUSH
16789: LD_INT 2
16791: EQUAL
16792: IFFALSE 16812
// begin AddMedal ( Prisoner , 2 ) ;
16794: LD_STRING Prisoner
16796: PPUSH
16797: LD_INT 2
16799: PPUSH
16800: CALL_OW 101
// m3 := true ;
16804: LD_ADDR_VAR 0 5
16808: PUSH
16809: LD_INT 1
16811: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16812: LD_EXP 21
16816: PUSH
16817: LD_INT 3
16819: EQUAL
16820: IFFALSE 16833
// AddMedal ( Prisoner , - 2 ) ;
16822: LD_STRING Prisoner
16824: PPUSH
16825: LD_INT 2
16827: NEG
16828: PPUSH
16829: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16833: LD_OWVAR 67
16837: PUSH
16838: LD_INT 3
16840: GREATEREQUAL
16841: IFFALSE 16849
16843: PUSH
16844: LD_VAR 0 3
16848: AND
16849: IFFALSE 16857
16851: PUSH
16852: LD_VAR 0 4
16856: AND
16857: IFFALSE 16865
16859: PUSH
16860: LD_VAR 0 5
16864: AND
16865: IFFALSE 16877
// SetAchievementEX ( ACH_AMER , 2 ) ;
16867: LD_STRING ACH_AMER
16869: PPUSH
16870: LD_INT 2
16872: PPUSH
16873: CALL_OW 564
// GiveMedals ( MAIN ) ;
16877: LD_STRING MAIN
16879: PPUSH
16880: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16884: LD_INT 22
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 23
16896: PUSH
16897: LD_INT 1
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 21
16906: PUSH
16907: LD_INT 1
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: PPUSH
16919: CALL_OW 69
16923: PPUSH
16924: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16928: LD_EXP 1
16932: PPUSH
16933: LD_EXP 34
16937: PUSH
16938: LD_STRING JMM
16940: STR
16941: PPUSH
16942: CALL_OW 38
// if IsOK ( Bobby ) then
16946: LD_EXP 2
16950: PPUSH
16951: CALL_OW 302
16955: IFFALSE 16975
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16957: LD_EXP 2
16961: PPUSH
16962: LD_EXP 34
16966: PUSH
16967: LD_STRING Bobby
16969: STR
16970: PPUSH
16971: CALL_OW 38
// if IsOK ( Cyrus ) then
16975: LD_EXP 3
16979: PPUSH
16980: CALL_OW 302
16984: IFFALSE 17004
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16986: LD_EXP 3
16990: PPUSH
16991: LD_EXP 34
16995: PUSH
16996: LD_STRING Cyrus
16998: STR
16999: PPUSH
17000: CALL_OW 38
// if IsOK ( Lisa ) then
17004: LD_EXP 4
17008: PPUSH
17009: CALL_OW 302
17013: IFFALSE 17040
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
17015: LD_STRING enableBioCharacter(BIO_LISA)
17017: PPUSH
17018: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
17022: LD_EXP 4
17026: PPUSH
17027: LD_EXP 34
17031: PUSH
17032: LD_STRING Lisa
17034: STR
17035: PPUSH
17036: CALL_OW 38
// end ; if IsOK ( Khatam ) then
17040: LD_EXP 5
17044: PPUSH
17045: CALL_OW 302
17049: IFFALSE 17076
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
17051: LD_STRING enableBioCharacter(BIO_KHAT)
17053: PPUSH
17054: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
17058: LD_EXP 5
17062: PPUSH
17063: LD_EXP 34
17067: PUSH
17068: LD_STRING Khatam
17070: STR
17071: PPUSH
17072: CALL_OW 38
// end ; if IsOK ( Brian ) then
17076: LD_EXP 6
17080: PPUSH
17081: CALL_OW 302
17085: IFFALSE 17105
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
17087: LD_EXP 6
17091: PPUSH
17092: LD_EXP 34
17096: PUSH
17097: LD_STRING Brian
17099: STR
17100: PPUSH
17101: CALL_OW 38
// if IsOk ( Jerry ) then
17105: LD_EXP 7
17109: PPUSH
17110: CALL_OW 302
17114: IFFALSE 17134
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
17116: LD_EXP 7
17120: PPUSH
17121: LD_EXP 34
17125: PUSH
17126: LD_STRING Jerry
17128: STR
17129: PPUSH
17130: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
17134: LD_EXP 21
17138: PUSH
17139: LD_INT 1
17141: EQUAL
17142: IFFALSE 17159
17144: PUSH
17145: LD_EXP 8
17149: PPUSH
17150: CALL_OW 255
17154: PUSH
17155: LD_INT 1
17157: EQUAL
17158: AND
17159: IFFALSE 17172
17161: PUSH
17162: LD_EXP 8
17166: PPUSH
17167: CALL_OW 302
17171: AND
17172: IFFALSE 17199
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
17174: LD_STRING enableBioCharacter(BIO_MICH)
17176: PPUSH
17177: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
17181: LD_EXP 8
17185: PPUSH
17186: LD_EXP 34
17190: PUSH
17191: LD_STRING Mikhail
17193: STR
17194: PPUSH
17195: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
17199: LD_INT 50
17201: PUSH
17202: EMPTY
17203: LIST
17204: PUSH
17205: LD_INT 22
17207: PUSH
17208: LD_INT 1
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 21
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: PPUSH
17230: CALL_OW 69
17234: PUSH
17235: LD_EXP 1
17239: PUSH
17240: LD_EXP 2
17244: PUSH
17245: LD_EXP 3
17249: PUSH
17250: LD_EXP 4
17254: PUSH
17255: LD_EXP 5
17259: PUSH
17260: LD_EXP 6
17264: PUSH
17265: LD_EXP 7
17269: PUSH
17270: LD_EXP 8
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: DIFF
17285: PPUSH
17286: LD_STRING 02_other_survivors
17288: PPUSH
17289: CALL_OW 38
// YouWin ;
17293: CALL_OW 103
// end ; end_of_file end_of_file
17297: LD_VAR 0 1
17301: RET
// export globalGameSaveCounter ; every 0 0$1 do
17302: GO 17304
17304: DISABLE
// begin enable ;
17305: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17306: LD_STRING updateTimer(
17308: PUSH
17309: LD_OWVAR 1
17313: STR
17314: PUSH
17315: LD_STRING );
17317: STR
17318: PPUSH
17319: CALL_OW 559
// end ;
17323: END
// every 0 0$1 do
17324: GO 17326
17326: DISABLE
// begin globalGameSaveCounter := 0 ;
17327: LD_ADDR_EXP 38
17331: PUSH
17332: LD_INT 0
17334: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17335: LD_STRING setGameSaveCounter(0)
17337: PPUSH
17338: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17342: LD_STRING initStreamRollete();
17344: PPUSH
17345: CALL_OW 559
// InitStreamMode ;
17349: CALL 18701 0 0
// DefineStreamItems ( false ) ;
17353: LD_INT 0
17355: PPUSH
17356: CALL 19165 0 1
// end ;
17360: END
// export function SOS_MapStart ( ) ; begin
17361: LD_INT 0
17363: PPUSH
// if streamModeActive then
17364: LD_EXP 39
17368: IFFALSE 17377
// DefineStreamItems ( true ) ;
17370: LD_INT 1
17372: PPUSH
17373: CALL 19165 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
17377: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
17379: PPUSH
17380: CALL_OW 559
// UpdateLuaVariables ( ) ;
17384: CALL 17401 0 0
// UpdateFactoryWaypoints ( ) ;
17388: CALL 32287 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17392: CALL 32539 0 0
// end ;
17396: LD_VAR 0 1
17400: RET
// function UpdateLuaVariables ( ) ; begin
17401: LD_INT 0
17403: PPUSH
// if globalGameSaveCounter then
17404: LD_EXP 38
17408: IFFALSE 17442
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17410: LD_ADDR_EXP 38
17414: PUSH
17415: LD_EXP 38
17419: PPUSH
17420: CALL 79435 0 1
17424: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17425: LD_STRING setGameSaveCounter(
17427: PUSH
17428: LD_EXP 38
17432: STR
17433: PUSH
17434: LD_STRING )
17436: STR
17437: PPUSH
17438: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17442: LD_STRING setGameDifficulty(
17444: PUSH
17445: LD_OWVAR 67
17449: STR
17450: PUSH
17451: LD_STRING )
17453: STR
17454: PPUSH
17455: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
17459: LD_STRING displayDifficulty(
17461: PUSH
17462: LD_OWVAR 67
17466: STR
17467: PUSH
17468: LD_STRING )
17470: STR
17471: PPUSH
17472: CALL_OW 559
// end ;
17476: LD_VAR 0 1
17480: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17481: LD_INT 0
17483: PPUSH
// if p2 = stream_mode then
17484: LD_VAR 0 2
17488: PUSH
17489: LD_INT 100
17491: EQUAL
17492: IFFALSE 18495
// begin if not StreamModeActive then
17494: LD_EXP 39
17498: NOT
17499: IFFALSE 17509
// StreamModeActive := true ;
17501: LD_ADDR_EXP 39
17505: PUSH
17506: LD_INT 1
17508: ST_TO_ADDR
// if p3 = 0 then
17509: LD_VAR 0 3
17513: PUSH
17514: LD_INT 0
17516: EQUAL
17517: IFFALSE 17523
// InitStreamMode ;
17519: CALL 18701 0 0
// if p3 = 1 then
17523: LD_VAR 0 3
17527: PUSH
17528: LD_INT 1
17530: EQUAL
17531: IFFALSE 17541
// sRocket := true ;
17533: LD_ADDR_EXP 44
17537: PUSH
17538: LD_INT 1
17540: ST_TO_ADDR
// if p3 = 2 then
17541: LD_VAR 0 3
17545: PUSH
17546: LD_INT 2
17548: EQUAL
17549: IFFALSE 17559
// sSpeed := true ;
17551: LD_ADDR_EXP 43
17555: PUSH
17556: LD_INT 1
17558: ST_TO_ADDR
// if p3 = 3 then
17559: LD_VAR 0 3
17563: PUSH
17564: LD_INT 3
17566: EQUAL
17567: IFFALSE 17577
// sEngine := true ;
17569: LD_ADDR_EXP 45
17573: PUSH
17574: LD_INT 1
17576: ST_TO_ADDR
// if p3 = 4 then
17577: LD_VAR 0 3
17581: PUSH
17582: LD_INT 4
17584: EQUAL
17585: IFFALSE 17595
// sSpec := true ;
17587: LD_ADDR_EXP 42
17591: PUSH
17592: LD_INT 1
17594: ST_TO_ADDR
// if p3 = 5 then
17595: LD_VAR 0 3
17599: PUSH
17600: LD_INT 5
17602: EQUAL
17603: IFFALSE 17613
// sLevel := true ;
17605: LD_ADDR_EXP 46
17609: PUSH
17610: LD_INT 1
17612: ST_TO_ADDR
// if p3 = 6 then
17613: LD_VAR 0 3
17617: PUSH
17618: LD_INT 6
17620: EQUAL
17621: IFFALSE 17631
// sArmoury := true ;
17623: LD_ADDR_EXP 47
17627: PUSH
17628: LD_INT 1
17630: ST_TO_ADDR
// if p3 = 7 then
17631: LD_VAR 0 3
17635: PUSH
17636: LD_INT 7
17638: EQUAL
17639: IFFALSE 17649
// sRadar := true ;
17641: LD_ADDR_EXP 48
17645: PUSH
17646: LD_INT 1
17648: ST_TO_ADDR
// if p3 = 8 then
17649: LD_VAR 0 3
17653: PUSH
17654: LD_INT 8
17656: EQUAL
17657: IFFALSE 17667
// sBunker := true ;
17659: LD_ADDR_EXP 49
17663: PUSH
17664: LD_INT 1
17666: ST_TO_ADDR
// if p3 = 9 then
17667: LD_VAR 0 3
17671: PUSH
17672: LD_INT 9
17674: EQUAL
17675: IFFALSE 17685
// sHack := true ;
17677: LD_ADDR_EXP 50
17681: PUSH
17682: LD_INT 1
17684: ST_TO_ADDR
// if p3 = 10 then
17685: LD_VAR 0 3
17689: PUSH
17690: LD_INT 10
17692: EQUAL
17693: IFFALSE 17703
// sFire := true ;
17695: LD_ADDR_EXP 51
17699: PUSH
17700: LD_INT 1
17702: ST_TO_ADDR
// if p3 = 11 then
17703: LD_VAR 0 3
17707: PUSH
17708: LD_INT 11
17710: EQUAL
17711: IFFALSE 17721
// sRefresh := true ;
17713: LD_ADDR_EXP 52
17717: PUSH
17718: LD_INT 1
17720: ST_TO_ADDR
// if p3 = 12 then
17721: LD_VAR 0 3
17725: PUSH
17726: LD_INT 12
17728: EQUAL
17729: IFFALSE 17739
// sExp := true ;
17731: LD_ADDR_EXP 53
17735: PUSH
17736: LD_INT 1
17738: ST_TO_ADDR
// if p3 = 13 then
17739: LD_VAR 0 3
17743: PUSH
17744: LD_INT 13
17746: EQUAL
17747: IFFALSE 17757
// sDepot := true ;
17749: LD_ADDR_EXP 54
17753: PUSH
17754: LD_INT 1
17756: ST_TO_ADDR
// if p3 = 14 then
17757: LD_VAR 0 3
17761: PUSH
17762: LD_INT 14
17764: EQUAL
17765: IFFALSE 17775
// sFlag := true ;
17767: LD_ADDR_EXP 55
17771: PUSH
17772: LD_INT 1
17774: ST_TO_ADDR
// if p3 = 15 then
17775: LD_VAR 0 3
17779: PUSH
17780: LD_INT 15
17782: EQUAL
17783: IFFALSE 17793
// sKamikadze := true ;
17785: LD_ADDR_EXP 63
17789: PUSH
17790: LD_INT 1
17792: ST_TO_ADDR
// if p3 = 16 then
17793: LD_VAR 0 3
17797: PUSH
17798: LD_INT 16
17800: EQUAL
17801: IFFALSE 17811
// sTroll := true ;
17803: LD_ADDR_EXP 64
17807: PUSH
17808: LD_INT 1
17810: ST_TO_ADDR
// if p3 = 17 then
17811: LD_VAR 0 3
17815: PUSH
17816: LD_INT 17
17818: EQUAL
17819: IFFALSE 17829
// sSlow := true ;
17821: LD_ADDR_EXP 65
17825: PUSH
17826: LD_INT 1
17828: ST_TO_ADDR
// if p3 = 18 then
17829: LD_VAR 0 3
17833: PUSH
17834: LD_INT 18
17836: EQUAL
17837: IFFALSE 17847
// sLack := true ;
17839: LD_ADDR_EXP 66
17843: PUSH
17844: LD_INT 1
17846: ST_TO_ADDR
// if p3 = 19 then
17847: LD_VAR 0 3
17851: PUSH
17852: LD_INT 19
17854: EQUAL
17855: IFFALSE 17865
// sTank := true ;
17857: LD_ADDR_EXP 68
17861: PUSH
17862: LD_INT 1
17864: ST_TO_ADDR
// if p3 = 20 then
17865: LD_VAR 0 3
17869: PUSH
17870: LD_INT 20
17872: EQUAL
17873: IFFALSE 17883
// sRemote := true ;
17875: LD_ADDR_EXP 69
17879: PUSH
17880: LD_INT 1
17882: ST_TO_ADDR
// if p3 = 21 then
17883: LD_VAR 0 3
17887: PUSH
17888: LD_INT 21
17890: EQUAL
17891: IFFALSE 17901
// sPowell := true ;
17893: LD_ADDR_EXP 70
17897: PUSH
17898: LD_INT 1
17900: ST_TO_ADDR
// if p3 = 22 then
17901: LD_VAR 0 3
17905: PUSH
17906: LD_INT 22
17908: EQUAL
17909: IFFALSE 17919
// sTeleport := true ;
17911: LD_ADDR_EXP 73
17915: PUSH
17916: LD_INT 1
17918: ST_TO_ADDR
// if p3 = 23 then
17919: LD_VAR 0 3
17923: PUSH
17924: LD_INT 23
17926: EQUAL
17927: IFFALSE 17937
// sOilTower := true ;
17929: LD_ADDR_EXP 75
17933: PUSH
17934: LD_INT 1
17936: ST_TO_ADDR
// if p3 = 24 then
17937: LD_VAR 0 3
17941: PUSH
17942: LD_INT 24
17944: EQUAL
17945: IFFALSE 17955
// sShovel := true ;
17947: LD_ADDR_EXP 76
17951: PUSH
17952: LD_INT 1
17954: ST_TO_ADDR
// if p3 = 25 then
17955: LD_VAR 0 3
17959: PUSH
17960: LD_INT 25
17962: EQUAL
17963: IFFALSE 17973
// sSheik := true ;
17965: LD_ADDR_EXP 77
17969: PUSH
17970: LD_INT 1
17972: ST_TO_ADDR
// if p3 = 26 then
17973: LD_VAR 0 3
17977: PUSH
17978: LD_INT 26
17980: EQUAL
17981: IFFALSE 17991
// sEarthquake := true ;
17983: LD_ADDR_EXP 79
17987: PUSH
17988: LD_INT 1
17990: ST_TO_ADDR
// if p3 = 27 then
17991: LD_VAR 0 3
17995: PUSH
17996: LD_INT 27
17998: EQUAL
17999: IFFALSE 18009
// sAI := true ;
18001: LD_ADDR_EXP 80
18005: PUSH
18006: LD_INT 1
18008: ST_TO_ADDR
// if p3 = 28 then
18009: LD_VAR 0 3
18013: PUSH
18014: LD_INT 28
18016: EQUAL
18017: IFFALSE 18027
// sCargo := true ;
18019: LD_ADDR_EXP 83
18023: PUSH
18024: LD_INT 1
18026: ST_TO_ADDR
// if p3 = 29 then
18027: LD_VAR 0 3
18031: PUSH
18032: LD_INT 29
18034: EQUAL
18035: IFFALSE 18045
// sDLaser := true ;
18037: LD_ADDR_EXP 84
18041: PUSH
18042: LD_INT 1
18044: ST_TO_ADDR
// if p3 = 30 then
18045: LD_VAR 0 3
18049: PUSH
18050: LD_INT 30
18052: EQUAL
18053: IFFALSE 18063
// sExchange := true ;
18055: LD_ADDR_EXP 85
18059: PUSH
18060: LD_INT 1
18062: ST_TO_ADDR
// if p3 = 31 then
18063: LD_VAR 0 3
18067: PUSH
18068: LD_INT 31
18070: EQUAL
18071: IFFALSE 18081
// sFac := true ;
18073: LD_ADDR_EXP 86
18077: PUSH
18078: LD_INT 1
18080: ST_TO_ADDR
// if p3 = 32 then
18081: LD_VAR 0 3
18085: PUSH
18086: LD_INT 32
18088: EQUAL
18089: IFFALSE 18099
// sPower := true ;
18091: LD_ADDR_EXP 87
18095: PUSH
18096: LD_INT 1
18098: ST_TO_ADDR
// if p3 = 33 then
18099: LD_VAR 0 3
18103: PUSH
18104: LD_INT 33
18106: EQUAL
18107: IFFALSE 18117
// sRandom := true ;
18109: LD_ADDR_EXP 88
18113: PUSH
18114: LD_INT 1
18116: ST_TO_ADDR
// if p3 = 34 then
18117: LD_VAR 0 3
18121: PUSH
18122: LD_INT 34
18124: EQUAL
18125: IFFALSE 18135
// sShield := true ;
18127: LD_ADDR_EXP 89
18131: PUSH
18132: LD_INT 1
18134: ST_TO_ADDR
// if p3 = 35 then
18135: LD_VAR 0 3
18139: PUSH
18140: LD_INT 35
18142: EQUAL
18143: IFFALSE 18153
// sTime := true ;
18145: LD_ADDR_EXP 90
18149: PUSH
18150: LD_INT 1
18152: ST_TO_ADDR
// if p3 = 36 then
18153: LD_VAR 0 3
18157: PUSH
18158: LD_INT 36
18160: EQUAL
18161: IFFALSE 18171
// sTools := true ;
18163: LD_ADDR_EXP 91
18167: PUSH
18168: LD_INT 1
18170: ST_TO_ADDR
// if p3 = 101 then
18171: LD_VAR 0 3
18175: PUSH
18176: LD_INT 101
18178: EQUAL
18179: IFFALSE 18189
// sSold := true ;
18181: LD_ADDR_EXP 56
18185: PUSH
18186: LD_INT 1
18188: ST_TO_ADDR
// if p3 = 102 then
18189: LD_VAR 0 3
18193: PUSH
18194: LD_INT 102
18196: EQUAL
18197: IFFALSE 18207
// sDiff := true ;
18199: LD_ADDR_EXP 57
18203: PUSH
18204: LD_INT 1
18206: ST_TO_ADDR
// if p3 = 103 then
18207: LD_VAR 0 3
18211: PUSH
18212: LD_INT 103
18214: EQUAL
18215: IFFALSE 18225
// sFog := true ;
18217: LD_ADDR_EXP 60
18221: PUSH
18222: LD_INT 1
18224: ST_TO_ADDR
// if p3 = 104 then
18225: LD_VAR 0 3
18229: PUSH
18230: LD_INT 104
18232: EQUAL
18233: IFFALSE 18243
// sReset := true ;
18235: LD_ADDR_EXP 61
18239: PUSH
18240: LD_INT 1
18242: ST_TO_ADDR
// if p3 = 105 then
18243: LD_VAR 0 3
18247: PUSH
18248: LD_INT 105
18250: EQUAL
18251: IFFALSE 18261
// sSun := true ;
18253: LD_ADDR_EXP 62
18257: PUSH
18258: LD_INT 1
18260: ST_TO_ADDR
// if p3 = 106 then
18261: LD_VAR 0 3
18265: PUSH
18266: LD_INT 106
18268: EQUAL
18269: IFFALSE 18279
// sTiger := true ;
18271: LD_ADDR_EXP 58
18275: PUSH
18276: LD_INT 1
18278: ST_TO_ADDR
// if p3 = 107 then
18279: LD_VAR 0 3
18283: PUSH
18284: LD_INT 107
18286: EQUAL
18287: IFFALSE 18297
// sBomb := true ;
18289: LD_ADDR_EXP 59
18293: PUSH
18294: LD_INT 1
18296: ST_TO_ADDR
// if p3 = 108 then
18297: LD_VAR 0 3
18301: PUSH
18302: LD_INT 108
18304: EQUAL
18305: IFFALSE 18315
// sWound := true ;
18307: LD_ADDR_EXP 67
18311: PUSH
18312: LD_INT 1
18314: ST_TO_ADDR
// if p3 = 109 then
18315: LD_VAR 0 3
18319: PUSH
18320: LD_INT 109
18322: EQUAL
18323: IFFALSE 18333
// sBetray := true ;
18325: LD_ADDR_EXP 71
18329: PUSH
18330: LD_INT 1
18332: ST_TO_ADDR
// if p3 = 110 then
18333: LD_VAR 0 3
18337: PUSH
18338: LD_INT 110
18340: EQUAL
18341: IFFALSE 18351
// sContamin := true ;
18343: LD_ADDR_EXP 72
18347: PUSH
18348: LD_INT 1
18350: ST_TO_ADDR
// if p3 = 111 then
18351: LD_VAR 0 3
18355: PUSH
18356: LD_INT 111
18358: EQUAL
18359: IFFALSE 18369
// sOil := true ;
18361: LD_ADDR_EXP 74
18365: PUSH
18366: LD_INT 1
18368: ST_TO_ADDR
// if p3 = 112 then
18369: LD_VAR 0 3
18373: PUSH
18374: LD_INT 112
18376: EQUAL
18377: IFFALSE 18387
// sStu := true ;
18379: LD_ADDR_EXP 78
18383: PUSH
18384: LD_INT 1
18386: ST_TO_ADDR
// if p3 = 113 then
18387: LD_VAR 0 3
18391: PUSH
18392: LD_INT 113
18394: EQUAL
18395: IFFALSE 18405
// sBazooka := true ;
18397: LD_ADDR_EXP 81
18401: PUSH
18402: LD_INT 1
18404: ST_TO_ADDR
// if p3 = 114 then
18405: LD_VAR 0 3
18409: PUSH
18410: LD_INT 114
18412: EQUAL
18413: IFFALSE 18423
// sMortar := true ;
18415: LD_ADDR_EXP 82
18419: PUSH
18420: LD_INT 1
18422: ST_TO_ADDR
// if p3 = 115 then
18423: LD_VAR 0 3
18427: PUSH
18428: LD_INT 115
18430: EQUAL
18431: IFFALSE 18441
// sRanger := true ;
18433: LD_ADDR_EXP 92
18437: PUSH
18438: LD_INT 1
18440: ST_TO_ADDR
// if p3 = 116 then
18441: LD_VAR 0 3
18445: PUSH
18446: LD_INT 116
18448: EQUAL
18449: IFFALSE 18459
// sComputer := true ;
18451: LD_ADDR_EXP 93
18455: PUSH
18456: LD_INT 1
18458: ST_TO_ADDR
// if p3 = 117 then
18459: LD_VAR 0 3
18463: PUSH
18464: LD_INT 117
18466: EQUAL
18467: IFFALSE 18477
// s30 := true ;
18469: LD_ADDR_EXP 94
18473: PUSH
18474: LD_INT 1
18476: ST_TO_ADDR
// if p3 = 118 then
18477: LD_VAR 0 3
18481: PUSH
18482: LD_INT 118
18484: EQUAL
18485: IFFALSE 18495
// s60 := true ;
18487: LD_ADDR_EXP 95
18491: PUSH
18492: LD_INT 1
18494: ST_TO_ADDR
// end ; if p2 = hack_mode then
18495: LD_VAR 0 2
18499: PUSH
18500: LD_INT 101
18502: EQUAL
18503: IFFALSE 18631
// begin case p3 of 1 :
18505: LD_VAR 0 3
18509: PUSH
18510: LD_INT 1
18512: DOUBLE
18513: EQUAL
18514: IFTRUE 18518
18516: GO 18525
18518: POP
// hHackUnlimitedResources ; 2 :
18519: CALL 30894 0 0
18523: GO 18631
18525: LD_INT 2
18527: DOUBLE
18528: EQUAL
18529: IFTRUE 18533
18531: GO 18540
18533: POP
// hHackSetLevel10 ; 3 :
18534: CALL 31027 0 0
18538: GO 18631
18540: LD_INT 3
18542: DOUBLE
18543: EQUAL
18544: IFTRUE 18548
18546: GO 18555
18548: POP
// hHackSetLevel10YourUnits ; 4 :
18549: CALL 31112 0 0
18553: GO 18631
18555: LD_INT 4
18557: DOUBLE
18558: EQUAL
18559: IFTRUE 18563
18561: GO 18570
18563: POP
// hHackInvincible ; 5 :
18564: CALL 31560 0 0
18568: GO 18631
18570: LD_INT 5
18572: DOUBLE
18573: EQUAL
18574: IFTRUE 18578
18576: GO 18585
18578: POP
// hHackInvisible ; 6 :
18579: CALL 31671 0 0
18583: GO 18631
18585: LD_INT 6
18587: DOUBLE
18588: EQUAL
18589: IFTRUE 18593
18591: GO 18600
18593: POP
// hHackChangeYourSide ; 7 :
18594: CALL 31728 0 0
18598: GO 18631
18600: LD_INT 7
18602: DOUBLE
18603: EQUAL
18604: IFTRUE 18608
18606: GO 18615
18608: POP
// hHackChangeUnitSide ; 8 :
18609: CALL 31770 0 0
18613: GO 18631
18615: LD_INT 8
18617: DOUBLE
18618: EQUAL
18619: IFTRUE 18623
18621: GO 18630
18623: POP
// hHackFog ; end ;
18624: CALL 31871 0 0
18628: GO 18631
18630: POP
// end ; if p2 = game_save_mode then
18631: LD_VAR 0 2
18635: PUSH
18636: LD_INT 102
18638: EQUAL
18639: IFFALSE 18696
// begin if p3 = 1 then
18641: LD_VAR 0 3
18645: PUSH
18646: LD_INT 1
18648: EQUAL
18649: IFFALSE 18661
// globalGameSaveCounter := p4 ;
18651: LD_ADDR_EXP 38
18655: PUSH
18656: LD_VAR 0 4
18660: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18661: LD_VAR 0 3
18665: PUSH
18666: LD_INT 2
18668: EQUAL
18669: IFFALSE 18677
18671: PUSH
18672: LD_EXP 38
18676: AND
18677: IFFALSE 18696
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18679: LD_STRING setGameSaveCounter(
18681: PUSH
18682: LD_EXP 38
18686: STR
18687: PUSH
18688: LD_STRING )
18690: STR
18691: PPUSH
18692: CALL_OW 559
// end ; end ;
18696: LD_VAR 0 7
18700: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18701: LD_INT 0
18703: PPUSH
// streamModeActive := false ;
18704: LD_ADDR_EXP 39
18708: PUSH
18709: LD_INT 0
18711: ST_TO_ADDR
// normalCounter := 36 ;
18712: LD_ADDR_EXP 40
18716: PUSH
18717: LD_INT 36
18719: ST_TO_ADDR
// hardcoreCounter := 18 ;
18720: LD_ADDR_EXP 41
18724: PUSH
18725: LD_INT 18
18727: ST_TO_ADDR
// sRocket := false ;
18728: LD_ADDR_EXP 44
18732: PUSH
18733: LD_INT 0
18735: ST_TO_ADDR
// sSpeed := false ;
18736: LD_ADDR_EXP 43
18740: PUSH
18741: LD_INT 0
18743: ST_TO_ADDR
// sEngine := false ;
18744: LD_ADDR_EXP 45
18748: PUSH
18749: LD_INT 0
18751: ST_TO_ADDR
// sSpec := false ;
18752: LD_ADDR_EXP 42
18756: PUSH
18757: LD_INT 0
18759: ST_TO_ADDR
// sLevel := false ;
18760: LD_ADDR_EXP 46
18764: PUSH
18765: LD_INT 0
18767: ST_TO_ADDR
// sArmoury := false ;
18768: LD_ADDR_EXP 47
18772: PUSH
18773: LD_INT 0
18775: ST_TO_ADDR
// sRadar := false ;
18776: LD_ADDR_EXP 48
18780: PUSH
18781: LD_INT 0
18783: ST_TO_ADDR
// sBunker := false ;
18784: LD_ADDR_EXP 49
18788: PUSH
18789: LD_INT 0
18791: ST_TO_ADDR
// sHack := false ;
18792: LD_ADDR_EXP 50
18796: PUSH
18797: LD_INT 0
18799: ST_TO_ADDR
// sFire := false ;
18800: LD_ADDR_EXP 51
18804: PUSH
18805: LD_INT 0
18807: ST_TO_ADDR
// sRefresh := false ;
18808: LD_ADDR_EXP 52
18812: PUSH
18813: LD_INT 0
18815: ST_TO_ADDR
// sExp := false ;
18816: LD_ADDR_EXP 53
18820: PUSH
18821: LD_INT 0
18823: ST_TO_ADDR
// sDepot := false ;
18824: LD_ADDR_EXP 54
18828: PUSH
18829: LD_INT 0
18831: ST_TO_ADDR
// sFlag := false ;
18832: LD_ADDR_EXP 55
18836: PUSH
18837: LD_INT 0
18839: ST_TO_ADDR
// sKamikadze := false ;
18840: LD_ADDR_EXP 63
18844: PUSH
18845: LD_INT 0
18847: ST_TO_ADDR
// sTroll := false ;
18848: LD_ADDR_EXP 64
18852: PUSH
18853: LD_INT 0
18855: ST_TO_ADDR
// sSlow := false ;
18856: LD_ADDR_EXP 65
18860: PUSH
18861: LD_INT 0
18863: ST_TO_ADDR
// sLack := false ;
18864: LD_ADDR_EXP 66
18868: PUSH
18869: LD_INT 0
18871: ST_TO_ADDR
// sTank := false ;
18872: LD_ADDR_EXP 68
18876: PUSH
18877: LD_INT 0
18879: ST_TO_ADDR
// sRemote := false ;
18880: LD_ADDR_EXP 69
18884: PUSH
18885: LD_INT 0
18887: ST_TO_ADDR
// sPowell := false ;
18888: LD_ADDR_EXP 70
18892: PUSH
18893: LD_INT 0
18895: ST_TO_ADDR
// sTeleport := false ;
18896: LD_ADDR_EXP 73
18900: PUSH
18901: LD_INT 0
18903: ST_TO_ADDR
// sOilTower := false ;
18904: LD_ADDR_EXP 75
18908: PUSH
18909: LD_INT 0
18911: ST_TO_ADDR
// sShovel := false ;
18912: LD_ADDR_EXP 76
18916: PUSH
18917: LD_INT 0
18919: ST_TO_ADDR
// sSheik := false ;
18920: LD_ADDR_EXP 77
18924: PUSH
18925: LD_INT 0
18927: ST_TO_ADDR
// sEarthquake := false ;
18928: LD_ADDR_EXP 79
18932: PUSH
18933: LD_INT 0
18935: ST_TO_ADDR
// sAI := false ;
18936: LD_ADDR_EXP 80
18940: PUSH
18941: LD_INT 0
18943: ST_TO_ADDR
// sCargo := false ;
18944: LD_ADDR_EXP 83
18948: PUSH
18949: LD_INT 0
18951: ST_TO_ADDR
// sDLaser := false ;
18952: LD_ADDR_EXP 84
18956: PUSH
18957: LD_INT 0
18959: ST_TO_ADDR
// sExchange := false ;
18960: LD_ADDR_EXP 85
18964: PUSH
18965: LD_INT 0
18967: ST_TO_ADDR
// sFac := false ;
18968: LD_ADDR_EXP 86
18972: PUSH
18973: LD_INT 0
18975: ST_TO_ADDR
// sPower := false ;
18976: LD_ADDR_EXP 87
18980: PUSH
18981: LD_INT 0
18983: ST_TO_ADDR
// sRandom := false ;
18984: LD_ADDR_EXP 88
18988: PUSH
18989: LD_INT 0
18991: ST_TO_ADDR
// sShield := false ;
18992: LD_ADDR_EXP 89
18996: PUSH
18997: LD_INT 0
18999: ST_TO_ADDR
// sTime := false ;
19000: LD_ADDR_EXP 90
19004: PUSH
19005: LD_INT 0
19007: ST_TO_ADDR
// sTools := false ;
19008: LD_ADDR_EXP 91
19012: PUSH
19013: LD_INT 0
19015: ST_TO_ADDR
// sSold := false ;
19016: LD_ADDR_EXP 56
19020: PUSH
19021: LD_INT 0
19023: ST_TO_ADDR
// sDiff := false ;
19024: LD_ADDR_EXP 57
19028: PUSH
19029: LD_INT 0
19031: ST_TO_ADDR
// sFog := false ;
19032: LD_ADDR_EXP 60
19036: PUSH
19037: LD_INT 0
19039: ST_TO_ADDR
// sReset := false ;
19040: LD_ADDR_EXP 61
19044: PUSH
19045: LD_INT 0
19047: ST_TO_ADDR
// sSun := false ;
19048: LD_ADDR_EXP 62
19052: PUSH
19053: LD_INT 0
19055: ST_TO_ADDR
// sTiger := false ;
19056: LD_ADDR_EXP 58
19060: PUSH
19061: LD_INT 0
19063: ST_TO_ADDR
// sBomb := false ;
19064: LD_ADDR_EXP 59
19068: PUSH
19069: LD_INT 0
19071: ST_TO_ADDR
// sWound := false ;
19072: LD_ADDR_EXP 67
19076: PUSH
19077: LD_INT 0
19079: ST_TO_ADDR
// sBetray := false ;
19080: LD_ADDR_EXP 71
19084: PUSH
19085: LD_INT 0
19087: ST_TO_ADDR
// sContamin := false ;
19088: LD_ADDR_EXP 72
19092: PUSH
19093: LD_INT 0
19095: ST_TO_ADDR
// sOil := false ;
19096: LD_ADDR_EXP 74
19100: PUSH
19101: LD_INT 0
19103: ST_TO_ADDR
// sStu := false ;
19104: LD_ADDR_EXP 78
19108: PUSH
19109: LD_INT 0
19111: ST_TO_ADDR
// sBazooka := false ;
19112: LD_ADDR_EXP 81
19116: PUSH
19117: LD_INT 0
19119: ST_TO_ADDR
// sMortar := false ;
19120: LD_ADDR_EXP 82
19124: PUSH
19125: LD_INT 0
19127: ST_TO_ADDR
// sRanger := false ;
19128: LD_ADDR_EXP 92
19132: PUSH
19133: LD_INT 0
19135: ST_TO_ADDR
// sComputer := false ;
19136: LD_ADDR_EXP 93
19140: PUSH
19141: LD_INT 0
19143: ST_TO_ADDR
// s30 := false ;
19144: LD_ADDR_EXP 94
19148: PUSH
19149: LD_INT 0
19151: ST_TO_ADDR
// s60 := false ;
19152: LD_ADDR_EXP 95
19156: PUSH
19157: LD_INT 0
19159: ST_TO_ADDR
// end ;
19160: LD_VAR 0 1
19164: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19165: LD_INT 0
19167: PPUSH
19168: PPUSH
19169: PPUSH
19170: PPUSH
19171: PPUSH
19172: PPUSH
19173: PPUSH
// result := [ ] ;
19174: LD_ADDR_VAR 0 2
19178: PUSH
19179: EMPTY
19180: ST_TO_ADDR
// if campaign_id = 1 then
19181: LD_OWVAR 69
19185: PUSH
19186: LD_INT 1
19188: EQUAL
19189: IFFALSE 22355
// begin case mission_number of 1 :
19191: LD_OWVAR 70
19195: PUSH
19196: LD_INT 1
19198: DOUBLE
19199: EQUAL
19200: IFTRUE 19204
19202: GO 19280
19204: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19205: LD_ADDR_VAR 0 2
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: LD_INT 4
19215: PUSH
19216: LD_INT 11
19218: PUSH
19219: LD_INT 12
19221: PUSH
19222: LD_INT 15
19224: PUSH
19225: LD_INT 16
19227: PUSH
19228: LD_INT 22
19230: PUSH
19231: LD_INT 23
19233: PUSH
19234: LD_INT 26
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 101
19250: PUSH
19251: LD_INT 102
19253: PUSH
19254: LD_INT 106
19256: PUSH
19257: LD_INT 116
19259: PUSH
19260: LD_INT 117
19262: PUSH
19263: LD_INT 118
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: ST_TO_ADDR
19278: GO 22353
19280: LD_INT 2
19282: DOUBLE
19283: EQUAL
19284: IFTRUE 19288
19286: GO 19372
19288: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19289: LD_ADDR_VAR 0 2
19293: PUSH
19294: LD_INT 2
19296: PUSH
19297: LD_INT 4
19299: PUSH
19300: LD_INT 11
19302: PUSH
19303: LD_INT 12
19305: PUSH
19306: LD_INT 15
19308: PUSH
19309: LD_INT 16
19311: PUSH
19312: LD_INT 22
19314: PUSH
19315: LD_INT 23
19317: PUSH
19318: LD_INT 26
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 101
19334: PUSH
19335: LD_INT 102
19337: PUSH
19338: LD_INT 105
19340: PUSH
19341: LD_INT 106
19343: PUSH
19344: LD_INT 108
19346: PUSH
19347: LD_INT 116
19349: PUSH
19350: LD_INT 117
19352: PUSH
19353: LD_INT 118
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: ST_TO_ADDR
19370: GO 22353
19372: LD_INT 3
19374: DOUBLE
19375: EQUAL
19376: IFTRUE 19380
19378: GO 19468
19380: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19381: LD_ADDR_VAR 0 2
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 4
19391: PUSH
19392: LD_INT 5
19394: PUSH
19395: LD_INT 11
19397: PUSH
19398: LD_INT 12
19400: PUSH
19401: LD_INT 15
19403: PUSH
19404: LD_INT 16
19406: PUSH
19407: LD_INT 22
19409: PUSH
19410: LD_INT 26
19412: PUSH
19413: LD_INT 36
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 101
19430: PUSH
19431: LD_INT 102
19433: PUSH
19434: LD_INT 105
19436: PUSH
19437: LD_INT 106
19439: PUSH
19440: LD_INT 108
19442: PUSH
19443: LD_INT 116
19445: PUSH
19446: LD_INT 117
19448: PUSH
19449: LD_INT 118
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: ST_TO_ADDR
19466: GO 22353
19468: LD_INT 4
19470: DOUBLE
19471: EQUAL
19472: IFTRUE 19476
19474: GO 19572
19476: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19477: LD_ADDR_VAR 0 2
19481: PUSH
19482: LD_INT 2
19484: PUSH
19485: LD_INT 4
19487: PUSH
19488: LD_INT 5
19490: PUSH
19491: LD_INT 8
19493: PUSH
19494: LD_INT 11
19496: PUSH
19497: LD_INT 12
19499: PUSH
19500: LD_INT 15
19502: PUSH
19503: LD_INT 16
19505: PUSH
19506: LD_INT 22
19508: PUSH
19509: LD_INT 23
19511: PUSH
19512: LD_INT 26
19514: PUSH
19515: LD_INT 36
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 101
19534: PUSH
19535: LD_INT 102
19537: PUSH
19538: LD_INT 105
19540: PUSH
19541: LD_INT 106
19543: PUSH
19544: LD_INT 108
19546: PUSH
19547: LD_INT 116
19549: PUSH
19550: LD_INT 117
19552: PUSH
19553: LD_INT 118
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: ST_TO_ADDR
19570: GO 22353
19572: LD_INT 5
19574: DOUBLE
19575: EQUAL
19576: IFTRUE 19580
19578: GO 19692
19580: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19581: LD_ADDR_VAR 0 2
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: LD_INT 4
19591: PUSH
19592: LD_INT 5
19594: PUSH
19595: LD_INT 6
19597: PUSH
19598: LD_INT 8
19600: PUSH
19601: LD_INT 11
19603: PUSH
19604: LD_INT 12
19606: PUSH
19607: LD_INT 15
19609: PUSH
19610: LD_INT 16
19612: PUSH
19613: LD_INT 22
19615: PUSH
19616: LD_INT 23
19618: PUSH
19619: LD_INT 25
19621: PUSH
19622: LD_INT 26
19624: PUSH
19625: LD_INT 36
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 101
19646: PUSH
19647: LD_INT 102
19649: PUSH
19650: LD_INT 105
19652: PUSH
19653: LD_INT 106
19655: PUSH
19656: LD_INT 108
19658: PUSH
19659: LD_INT 109
19661: PUSH
19662: LD_INT 112
19664: PUSH
19665: LD_INT 116
19667: PUSH
19668: LD_INT 117
19670: PUSH
19671: LD_INT 118
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: ST_TO_ADDR
19690: GO 22353
19692: LD_INT 6
19694: DOUBLE
19695: EQUAL
19696: IFTRUE 19700
19698: GO 19832
19700: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19701: LD_ADDR_VAR 0 2
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: LD_INT 4
19711: PUSH
19712: LD_INT 5
19714: PUSH
19715: LD_INT 6
19717: PUSH
19718: LD_INT 8
19720: PUSH
19721: LD_INT 11
19723: PUSH
19724: LD_INT 12
19726: PUSH
19727: LD_INT 15
19729: PUSH
19730: LD_INT 16
19732: PUSH
19733: LD_INT 20
19735: PUSH
19736: LD_INT 21
19738: PUSH
19739: LD_INT 22
19741: PUSH
19742: LD_INT 23
19744: PUSH
19745: LD_INT 25
19747: PUSH
19748: LD_INT 26
19750: PUSH
19751: LD_INT 30
19753: PUSH
19754: LD_INT 31
19756: PUSH
19757: LD_INT 32
19759: PUSH
19760: LD_INT 36
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 101
19786: PUSH
19787: LD_INT 102
19789: PUSH
19790: LD_INT 105
19792: PUSH
19793: LD_INT 106
19795: PUSH
19796: LD_INT 108
19798: PUSH
19799: LD_INT 109
19801: PUSH
19802: LD_INT 112
19804: PUSH
19805: LD_INT 116
19807: PUSH
19808: LD_INT 117
19810: PUSH
19811: LD_INT 118
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: ST_TO_ADDR
19830: GO 22353
19832: LD_INT 7
19834: DOUBLE
19835: EQUAL
19836: IFTRUE 19840
19838: GO 19952
19840: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19841: LD_ADDR_VAR 0 2
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: LD_INT 4
19851: PUSH
19852: LD_INT 5
19854: PUSH
19855: LD_INT 7
19857: PUSH
19858: LD_INT 11
19860: PUSH
19861: LD_INT 12
19863: PUSH
19864: LD_INT 15
19866: PUSH
19867: LD_INT 16
19869: PUSH
19870: LD_INT 20
19872: PUSH
19873: LD_INT 21
19875: PUSH
19876: LD_INT 22
19878: PUSH
19879: LD_INT 23
19881: PUSH
19882: LD_INT 25
19884: PUSH
19885: LD_INT 26
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 101
19906: PUSH
19907: LD_INT 102
19909: PUSH
19910: LD_INT 103
19912: PUSH
19913: LD_INT 105
19915: PUSH
19916: LD_INT 106
19918: PUSH
19919: LD_INT 108
19921: PUSH
19922: LD_INT 112
19924: PUSH
19925: LD_INT 116
19927: PUSH
19928: LD_INT 117
19930: PUSH
19931: LD_INT 118
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: ST_TO_ADDR
19950: GO 22353
19952: LD_INT 8
19954: DOUBLE
19955: EQUAL
19956: IFTRUE 19960
19958: GO 20100
19960: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19961: LD_ADDR_VAR 0 2
19965: PUSH
19966: LD_INT 2
19968: PUSH
19969: LD_INT 4
19971: PUSH
19972: LD_INT 5
19974: PUSH
19975: LD_INT 6
19977: PUSH
19978: LD_INT 7
19980: PUSH
19981: LD_INT 8
19983: PUSH
19984: LD_INT 11
19986: PUSH
19987: LD_INT 12
19989: PUSH
19990: LD_INT 15
19992: PUSH
19993: LD_INT 16
19995: PUSH
19996: LD_INT 20
19998: PUSH
19999: LD_INT 21
20001: PUSH
20002: LD_INT 22
20004: PUSH
20005: LD_INT 23
20007: PUSH
20008: LD_INT 25
20010: PUSH
20011: LD_INT 26
20013: PUSH
20014: LD_INT 30
20016: PUSH
20017: LD_INT 31
20019: PUSH
20020: LD_INT 32
20022: PUSH
20023: LD_INT 36
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 101
20050: PUSH
20051: LD_INT 102
20053: PUSH
20054: LD_INT 103
20056: PUSH
20057: LD_INT 105
20059: PUSH
20060: LD_INT 106
20062: PUSH
20063: LD_INT 108
20065: PUSH
20066: LD_INT 109
20068: PUSH
20069: LD_INT 112
20071: PUSH
20072: LD_INT 116
20074: PUSH
20075: LD_INT 117
20077: PUSH
20078: LD_INT 118
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: ST_TO_ADDR
20098: GO 22353
20100: LD_INT 9
20102: DOUBLE
20103: EQUAL
20104: IFTRUE 20108
20106: GO 20256
20108: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20109: LD_ADDR_VAR 0 2
20113: PUSH
20114: LD_INT 2
20116: PUSH
20117: LD_INT 4
20119: PUSH
20120: LD_INT 5
20122: PUSH
20123: LD_INT 6
20125: PUSH
20126: LD_INT 7
20128: PUSH
20129: LD_INT 8
20131: PUSH
20132: LD_INT 11
20134: PUSH
20135: LD_INT 12
20137: PUSH
20138: LD_INT 15
20140: PUSH
20141: LD_INT 16
20143: PUSH
20144: LD_INT 20
20146: PUSH
20147: LD_INT 21
20149: PUSH
20150: LD_INT 22
20152: PUSH
20153: LD_INT 23
20155: PUSH
20156: LD_INT 25
20158: PUSH
20159: LD_INT 26
20161: PUSH
20162: LD_INT 28
20164: PUSH
20165: LD_INT 30
20167: PUSH
20168: LD_INT 31
20170: PUSH
20171: LD_INT 32
20173: PUSH
20174: LD_INT 36
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 101
20202: PUSH
20203: LD_INT 102
20205: PUSH
20206: LD_INT 103
20208: PUSH
20209: LD_INT 105
20211: PUSH
20212: LD_INT 106
20214: PUSH
20215: LD_INT 108
20217: PUSH
20218: LD_INT 109
20220: PUSH
20221: LD_INT 112
20223: PUSH
20224: LD_INT 114
20226: PUSH
20227: LD_INT 116
20229: PUSH
20230: LD_INT 117
20232: PUSH
20233: LD_INT 118
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: ST_TO_ADDR
20254: GO 22353
20256: LD_INT 10
20258: DOUBLE
20259: EQUAL
20260: IFTRUE 20264
20262: GO 20460
20264: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20265: LD_ADDR_VAR 0 2
20269: PUSH
20270: LD_INT 2
20272: PUSH
20273: LD_INT 4
20275: PUSH
20276: LD_INT 5
20278: PUSH
20279: LD_INT 6
20281: PUSH
20282: LD_INT 7
20284: PUSH
20285: LD_INT 8
20287: PUSH
20288: LD_INT 9
20290: PUSH
20291: LD_INT 10
20293: PUSH
20294: LD_INT 11
20296: PUSH
20297: LD_INT 12
20299: PUSH
20300: LD_INT 13
20302: PUSH
20303: LD_INT 14
20305: PUSH
20306: LD_INT 15
20308: PUSH
20309: LD_INT 16
20311: PUSH
20312: LD_INT 17
20314: PUSH
20315: LD_INT 18
20317: PUSH
20318: LD_INT 19
20320: PUSH
20321: LD_INT 20
20323: PUSH
20324: LD_INT 21
20326: PUSH
20327: LD_INT 22
20329: PUSH
20330: LD_INT 23
20332: PUSH
20333: LD_INT 24
20335: PUSH
20336: LD_INT 25
20338: PUSH
20339: LD_INT 26
20341: PUSH
20342: LD_INT 28
20344: PUSH
20345: LD_INT 30
20347: PUSH
20348: LD_INT 31
20350: PUSH
20351: LD_INT 32
20353: PUSH
20354: LD_INT 36
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 101
20390: PUSH
20391: LD_INT 102
20393: PUSH
20394: LD_INT 103
20396: PUSH
20397: LD_INT 104
20399: PUSH
20400: LD_INT 105
20402: PUSH
20403: LD_INT 106
20405: PUSH
20406: LD_INT 107
20408: PUSH
20409: LD_INT 108
20411: PUSH
20412: LD_INT 109
20414: PUSH
20415: LD_INT 110
20417: PUSH
20418: LD_INT 111
20420: PUSH
20421: LD_INT 112
20423: PUSH
20424: LD_INT 114
20426: PUSH
20427: LD_INT 116
20429: PUSH
20430: LD_INT 117
20432: PUSH
20433: LD_INT 118
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: ST_TO_ADDR
20458: GO 22353
20460: LD_INT 11
20462: DOUBLE
20463: EQUAL
20464: IFTRUE 20468
20466: GO 20672
20468: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20469: LD_ADDR_VAR 0 2
20473: PUSH
20474: LD_INT 2
20476: PUSH
20477: LD_INT 3
20479: PUSH
20480: LD_INT 4
20482: PUSH
20483: LD_INT 5
20485: PUSH
20486: LD_INT 6
20488: PUSH
20489: LD_INT 7
20491: PUSH
20492: LD_INT 8
20494: PUSH
20495: LD_INT 9
20497: PUSH
20498: LD_INT 10
20500: PUSH
20501: LD_INT 11
20503: PUSH
20504: LD_INT 12
20506: PUSH
20507: LD_INT 13
20509: PUSH
20510: LD_INT 14
20512: PUSH
20513: LD_INT 15
20515: PUSH
20516: LD_INT 16
20518: PUSH
20519: LD_INT 17
20521: PUSH
20522: LD_INT 18
20524: PUSH
20525: LD_INT 19
20527: PUSH
20528: LD_INT 20
20530: PUSH
20531: LD_INT 21
20533: PUSH
20534: LD_INT 22
20536: PUSH
20537: LD_INT 23
20539: PUSH
20540: LD_INT 24
20542: PUSH
20543: LD_INT 25
20545: PUSH
20546: LD_INT 26
20548: PUSH
20549: LD_INT 28
20551: PUSH
20552: LD_INT 30
20554: PUSH
20555: LD_INT 31
20557: PUSH
20558: LD_INT 32
20560: PUSH
20561: LD_INT 34
20563: PUSH
20564: LD_INT 36
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 101
20602: PUSH
20603: LD_INT 102
20605: PUSH
20606: LD_INT 103
20608: PUSH
20609: LD_INT 104
20611: PUSH
20612: LD_INT 105
20614: PUSH
20615: LD_INT 106
20617: PUSH
20618: LD_INT 107
20620: PUSH
20621: LD_INT 108
20623: PUSH
20624: LD_INT 109
20626: PUSH
20627: LD_INT 110
20629: PUSH
20630: LD_INT 111
20632: PUSH
20633: LD_INT 112
20635: PUSH
20636: LD_INT 114
20638: PUSH
20639: LD_INT 116
20641: PUSH
20642: LD_INT 117
20644: PUSH
20645: LD_INT 118
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: ST_TO_ADDR
20670: GO 22353
20672: LD_INT 12
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20900
20680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20681: LD_ADDR_VAR 0 2
20685: PUSH
20686: LD_INT 1
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: LD_INT 3
20694: PUSH
20695: LD_INT 4
20697: PUSH
20698: LD_INT 5
20700: PUSH
20701: LD_INT 6
20703: PUSH
20704: LD_INT 7
20706: PUSH
20707: LD_INT 8
20709: PUSH
20710: LD_INT 9
20712: PUSH
20713: LD_INT 10
20715: PUSH
20716: LD_INT 11
20718: PUSH
20719: LD_INT 12
20721: PUSH
20722: LD_INT 13
20724: PUSH
20725: LD_INT 14
20727: PUSH
20728: LD_INT 15
20730: PUSH
20731: LD_INT 16
20733: PUSH
20734: LD_INT 17
20736: PUSH
20737: LD_INT 18
20739: PUSH
20740: LD_INT 19
20742: PUSH
20743: LD_INT 20
20745: PUSH
20746: LD_INT 21
20748: PUSH
20749: LD_INT 22
20751: PUSH
20752: LD_INT 23
20754: PUSH
20755: LD_INT 24
20757: PUSH
20758: LD_INT 25
20760: PUSH
20761: LD_INT 26
20763: PUSH
20764: LD_INT 27
20766: PUSH
20767: LD_INT 28
20769: PUSH
20770: LD_INT 30
20772: PUSH
20773: LD_INT 31
20775: PUSH
20776: LD_INT 32
20778: PUSH
20779: LD_INT 33
20781: PUSH
20782: LD_INT 34
20784: PUSH
20785: LD_INT 36
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 101
20826: PUSH
20827: LD_INT 102
20829: PUSH
20830: LD_INT 103
20832: PUSH
20833: LD_INT 104
20835: PUSH
20836: LD_INT 105
20838: PUSH
20839: LD_INT 106
20841: PUSH
20842: LD_INT 107
20844: PUSH
20845: LD_INT 108
20847: PUSH
20848: LD_INT 109
20850: PUSH
20851: LD_INT 110
20853: PUSH
20854: LD_INT 111
20856: PUSH
20857: LD_INT 112
20859: PUSH
20860: LD_INT 113
20862: PUSH
20863: LD_INT 114
20865: PUSH
20866: LD_INT 116
20868: PUSH
20869: LD_INT 117
20871: PUSH
20872: LD_INT 118
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: ST_TO_ADDR
20898: GO 22353
20900: LD_INT 13
20902: DOUBLE
20903: EQUAL
20904: IFTRUE 20908
20906: GO 21116
20908: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20909: LD_ADDR_VAR 0 2
20913: PUSH
20914: LD_INT 1
20916: PUSH
20917: LD_INT 2
20919: PUSH
20920: LD_INT 3
20922: PUSH
20923: LD_INT 4
20925: PUSH
20926: LD_INT 5
20928: PUSH
20929: LD_INT 8
20931: PUSH
20932: LD_INT 9
20934: PUSH
20935: LD_INT 10
20937: PUSH
20938: LD_INT 11
20940: PUSH
20941: LD_INT 12
20943: PUSH
20944: LD_INT 14
20946: PUSH
20947: LD_INT 15
20949: PUSH
20950: LD_INT 16
20952: PUSH
20953: LD_INT 17
20955: PUSH
20956: LD_INT 18
20958: PUSH
20959: LD_INT 19
20961: PUSH
20962: LD_INT 20
20964: PUSH
20965: LD_INT 21
20967: PUSH
20968: LD_INT 22
20970: PUSH
20971: LD_INT 23
20973: PUSH
20974: LD_INT 24
20976: PUSH
20977: LD_INT 25
20979: PUSH
20980: LD_INT 26
20982: PUSH
20983: LD_INT 27
20985: PUSH
20986: LD_INT 28
20988: PUSH
20989: LD_INT 30
20991: PUSH
20992: LD_INT 31
20994: PUSH
20995: LD_INT 32
20997: PUSH
20998: LD_INT 33
21000: PUSH
21001: LD_INT 34
21003: PUSH
21004: LD_INT 36
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 101
21042: PUSH
21043: LD_INT 102
21045: PUSH
21046: LD_INT 103
21048: PUSH
21049: LD_INT 104
21051: PUSH
21052: LD_INT 105
21054: PUSH
21055: LD_INT 106
21057: PUSH
21058: LD_INT 107
21060: PUSH
21061: LD_INT 108
21063: PUSH
21064: LD_INT 109
21066: PUSH
21067: LD_INT 110
21069: PUSH
21070: LD_INT 111
21072: PUSH
21073: LD_INT 112
21075: PUSH
21076: LD_INT 113
21078: PUSH
21079: LD_INT 114
21081: PUSH
21082: LD_INT 116
21084: PUSH
21085: LD_INT 117
21087: PUSH
21088: LD_INT 118
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: ST_TO_ADDR
21114: GO 22353
21116: LD_INT 14
21118: DOUBLE
21119: EQUAL
21120: IFTRUE 21124
21122: GO 21348
21124: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21125: LD_ADDR_VAR 0 2
21129: PUSH
21130: LD_INT 1
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: LD_INT 3
21138: PUSH
21139: LD_INT 4
21141: PUSH
21142: LD_INT 5
21144: PUSH
21145: LD_INT 6
21147: PUSH
21148: LD_INT 7
21150: PUSH
21151: LD_INT 8
21153: PUSH
21154: LD_INT 9
21156: PUSH
21157: LD_INT 10
21159: PUSH
21160: LD_INT 11
21162: PUSH
21163: LD_INT 12
21165: PUSH
21166: LD_INT 13
21168: PUSH
21169: LD_INT 14
21171: PUSH
21172: LD_INT 15
21174: PUSH
21175: LD_INT 16
21177: PUSH
21178: LD_INT 17
21180: PUSH
21181: LD_INT 18
21183: PUSH
21184: LD_INT 19
21186: PUSH
21187: LD_INT 20
21189: PUSH
21190: LD_INT 21
21192: PUSH
21193: LD_INT 22
21195: PUSH
21196: LD_INT 23
21198: PUSH
21199: LD_INT 24
21201: PUSH
21202: LD_INT 25
21204: PUSH
21205: LD_INT 26
21207: PUSH
21208: LD_INT 27
21210: PUSH
21211: LD_INT 28
21213: PUSH
21214: LD_INT 29
21216: PUSH
21217: LD_INT 30
21219: PUSH
21220: LD_INT 31
21222: PUSH
21223: LD_INT 32
21225: PUSH
21226: LD_INT 33
21228: PUSH
21229: LD_INT 34
21231: PUSH
21232: LD_INT 36
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 101
21274: PUSH
21275: LD_INT 102
21277: PUSH
21278: LD_INT 103
21280: PUSH
21281: LD_INT 104
21283: PUSH
21284: LD_INT 105
21286: PUSH
21287: LD_INT 106
21289: PUSH
21290: LD_INT 107
21292: PUSH
21293: LD_INT 108
21295: PUSH
21296: LD_INT 109
21298: PUSH
21299: LD_INT 110
21301: PUSH
21302: LD_INT 111
21304: PUSH
21305: LD_INT 112
21307: PUSH
21308: LD_INT 113
21310: PUSH
21311: LD_INT 114
21313: PUSH
21314: LD_INT 116
21316: PUSH
21317: LD_INT 117
21319: PUSH
21320: LD_INT 118
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: ST_TO_ADDR
21346: GO 22353
21348: LD_INT 15
21350: DOUBLE
21351: EQUAL
21352: IFTRUE 21356
21354: GO 21580
21356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21357: LD_ADDR_VAR 0 2
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: LD_INT 3
21370: PUSH
21371: LD_INT 4
21373: PUSH
21374: LD_INT 5
21376: PUSH
21377: LD_INT 6
21379: PUSH
21380: LD_INT 7
21382: PUSH
21383: LD_INT 8
21385: PUSH
21386: LD_INT 9
21388: PUSH
21389: LD_INT 10
21391: PUSH
21392: LD_INT 11
21394: PUSH
21395: LD_INT 12
21397: PUSH
21398: LD_INT 13
21400: PUSH
21401: LD_INT 14
21403: PUSH
21404: LD_INT 15
21406: PUSH
21407: LD_INT 16
21409: PUSH
21410: LD_INT 17
21412: PUSH
21413: LD_INT 18
21415: PUSH
21416: LD_INT 19
21418: PUSH
21419: LD_INT 20
21421: PUSH
21422: LD_INT 21
21424: PUSH
21425: LD_INT 22
21427: PUSH
21428: LD_INT 23
21430: PUSH
21431: LD_INT 24
21433: PUSH
21434: LD_INT 25
21436: PUSH
21437: LD_INT 26
21439: PUSH
21440: LD_INT 27
21442: PUSH
21443: LD_INT 28
21445: PUSH
21446: LD_INT 29
21448: PUSH
21449: LD_INT 30
21451: PUSH
21452: LD_INT 31
21454: PUSH
21455: LD_INT 32
21457: PUSH
21458: LD_INT 33
21460: PUSH
21461: LD_INT 34
21463: PUSH
21464: LD_INT 36
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 101
21506: PUSH
21507: LD_INT 102
21509: PUSH
21510: LD_INT 103
21512: PUSH
21513: LD_INT 104
21515: PUSH
21516: LD_INT 105
21518: PUSH
21519: LD_INT 106
21521: PUSH
21522: LD_INT 107
21524: PUSH
21525: LD_INT 108
21527: PUSH
21528: LD_INT 109
21530: PUSH
21531: LD_INT 110
21533: PUSH
21534: LD_INT 111
21536: PUSH
21537: LD_INT 112
21539: PUSH
21540: LD_INT 113
21542: PUSH
21543: LD_INT 114
21545: PUSH
21546: LD_INT 116
21548: PUSH
21549: LD_INT 117
21551: PUSH
21552: LD_INT 118
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: ST_TO_ADDR
21578: GO 22353
21580: LD_INT 16
21582: DOUBLE
21583: EQUAL
21584: IFTRUE 21588
21586: GO 21724
21588: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21589: LD_ADDR_VAR 0 2
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: LD_INT 4
21599: PUSH
21600: LD_INT 5
21602: PUSH
21603: LD_INT 7
21605: PUSH
21606: LD_INT 11
21608: PUSH
21609: LD_INT 12
21611: PUSH
21612: LD_INT 15
21614: PUSH
21615: LD_INT 16
21617: PUSH
21618: LD_INT 20
21620: PUSH
21621: LD_INT 21
21623: PUSH
21624: LD_INT 22
21626: PUSH
21627: LD_INT 23
21629: PUSH
21630: LD_INT 25
21632: PUSH
21633: LD_INT 26
21635: PUSH
21636: LD_INT 30
21638: PUSH
21639: LD_INT 31
21641: PUSH
21642: LD_INT 32
21644: PUSH
21645: LD_INT 33
21647: PUSH
21648: LD_INT 34
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 101
21674: PUSH
21675: LD_INT 102
21677: PUSH
21678: LD_INT 103
21680: PUSH
21681: LD_INT 106
21683: PUSH
21684: LD_INT 108
21686: PUSH
21687: LD_INT 112
21689: PUSH
21690: LD_INT 113
21692: PUSH
21693: LD_INT 114
21695: PUSH
21696: LD_INT 116
21698: PUSH
21699: LD_INT 117
21701: PUSH
21702: LD_INT 118
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: ST_TO_ADDR
21722: GO 22353
21724: LD_INT 17
21726: DOUBLE
21727: EQUAL
21728: IFTRUE 21732
21730: GO 21956
21732: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21733: LD_ADDR_VAR 0 2
21737: PUSH
21738: LD_INT 1
21740: PUSH
21741: LD_INT 2
21743: PUSH
21744: LD_INT 3
21746: PUSH
21747: LD_INT 4
21749: PUSH
21750: LD_INT 5
21752: PUSH
21753: LD_INT 6
21755: PUSH
21756: LD_INT 7
21758: PUSH
21759: LD_INT 8
21761: PUSH
21762: LD_INT 9
21764: PUSH
21765: LD_INT 10
21767: PUSH
21768: LD_INT 11
21770: PUSH
21771: LD_INT 12
21773: PUSH
21774: LD_INT 13
21776: PUSH
21777: LD_INT 14
21779: PUSH
21780: LD_INT 15
21782: PUSH
21783: LD_INT 16
21785: PUSH
21786: LD_INT 17
21788: PUSH
21789: LD_INT 18
21791: PUSH
21792: LD_INT 19
21794: PUSH
21795: LD_INT 20
21797: PUSH
21798: LD_INT 21
21800: PUSH
21801: LD_INT 22
21803: PUSH
21804: LD_INT 23
21806: PUSH
21807: LD_INT 24
21809: PUSH
21810: LD_INT 25
21812: PUSH
21813: LD_INT 26
21815: PUSH
21816: LD_INT 27
21818: PUSH
21819: LD_INT 28
21821: PUSH
21822: LD_INT 29
21824: PUSH
21825: LD_INT 30
21827: PUSH
21828: LD_INT 31
21830: PUSH
21831: LD_INT 32
21833: PUSH
21834: LD_INT 33
21836: PUSH
21837: LD_INT 34
21839: PUSH
21840: LD_INT 36
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 101
21882: PUSH
21883: LD_INT 102
21885: PUSH
21886: LD_INT 103
21888: PUSH
21889: LD_INT 104
21891: PUSH
21892: LD_INT 105
21894: PUSH
21895: LD_INT 106
21897: PUSH
21898: LD_INT 107
21900: PUSH
21901: LD_INT 108
21903: PUSH
21904: LD_INT 109
21906: PUSH
21907: LD_INT 110
21909: PUSH
21910: LD_INT 111
21912: PUSH
21913: LD_INT 112
21915: PUSH
21916: LD_INT 113
21918: PUSH
21919: LD_INT 114
21921: PUSH
21922: LD_INT 116
21924: PUSH
21925: LD_INT 117
21927: PUSH
21928: LD_INT 118
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: ST_TO_ADDR
21954: GO 22353
21956: LD_INT 18
21958: DOUBLE
21959: EQUAL
21960: IFTRUE 21964
21962: GO 22112
21964: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21965: LD_ADDR_VAR 0 2
21969: PUSH
21970: LD_INT 2
21972: PUSH
21973: LD_INT 4
21975: PUSH
21976: LD_INT 5
21978: PUSH
21979: LD_INT 7
21981: PUSH
21982: LD_INT 11
21984: PUSH
21985: LD_INT 12
21987: PUSH
21988: LD_INT 15
21990: PUSH
21991: LD_INT 16
21993: PUSH
21994: LD_INT 20
21996: PUSH
21997: LD_INT 21
21999: PUSH
22000: LD_INT 22
22002: PUSH
22003: LD_INT 23
22005: PUSH
22006: LD_INT 25
22008: PUSH
22009: LD_INT 26
22011: PUSH
22012: LD_INT 30
22014: PUSH
22015: LD_INT 31
22017: PUSH
22018: LD_INT 32
22020: PUSH
22021: LD_INT 33
22023: PUSH
22024: LD_INT 34
22026: PUSH
22027: LD_INT 35
22029: PUSH
22030: LD_INT 36
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 101
22058: PUSH
22059: LD_INT 102
22061: PUSH
22062: LD_INT 103
22064: PUSH
22065: LD_INT 106
22067: PUSH
22068: LD_INT 108
22070: PUSH
22071: LD_INT 112
22073: PUSH
22074: LD_INT 113
22076: PUSH
22077: LD_INT 114
22079: PUSH
22080: LD_INT 115
22082: PUSH
22083: LD_INT 116
22085: PUSH
22086: LD_INT 117
22088: PUSH
22089: LD_INT 118
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: ST_TO_ADDR
22110: GO 22353
22112: LD_INT 19
22114: DOUBLE
22115: EQUAL
22116: IFTRUE 22120
22118: GO 22352
22120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22121: LD_ADDR_VAR 0 2
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: LD_INT 2
22131: PUSH
22132: LD_INT 3
22134: PUSH
22135: LD_INT 4
22137: PUSH
22138: LD_INT 5
22140: PUSH
22141: LD_INT 6
22143: PUSH
22144: LD_INT 7
22146: PUSH
22147: LD_INT 8
22149: PUSH
22150: LD_INT 9
22152: PUSH
22153: LD_INT 10
22155: PUSH
22156: LD_INT 11
22158: PUSH
22159: LD_INT 12
22161: PUSH
22162: LD_INT 13
22164: PUSH
22165: LD_INT 14
22167: PUSH
22168: LD_INT 15
22170: PUSH
22171: LD_INT 16
22173: PUSH
22174: LD_INT 17
22176: PUSH
22177: LD_INT 18
22179: PUSH
22180: LD_INT 19
22182: PUSH
22183: LD_INT 20
22185: PUSH
22186: LD_INT 21
22188: PUSH
22189: LD_INT 22
22191: PUSH
22192: LD_INT 23
22194: PUSH
22195: LD_INT 24
22197: PUSH
22198: LD_INT 25
22200: PUSH
22201: LD_INT 26
22203: PUSH
22204: LD_INT 27
22206: PUSH
22207: LD_INT 28
22209: PUSH
22210: LD_INT 29
22212: PUSH
22213: LD_INT 30
22215: PUSH
22216: LD_INT 31
22218: PUSH
22219: LD_INT 32
22221: PUSH
22222: LD_INT 33
22224: PUSH
22225: LD_INT 34
22227: PUSH
22228: LD_INT 35
22230: PUSH
22231: LD_INT 36
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 101
22274: PUSH
22275: LD_INT 102
22277: PUSH
22278: LD_INT 103
22280: PUSH
22281: LD_INT 104
22283: PUSH
22284: LD_INT 105
22286: PUSH
22287: LD_INT 106
22289: PUSH
22290: LD_INT 107
22292: PUSH
22293: LD_INT 108
22295: PUSH
22296: LD_INT 109
22298: PUSH
22299: LD_INT 110
22301: PUSH
22302: LD_INT 111
22304: PUSH
22305: LD_INT 112
22307: PUSH
22308: LD_INT 113
22310: PUSH
22311: LD_INT 114
22313: PUSH
22314: LD_INT 115
22316: PUSH
22317: LD_INT 116
22319: PUSH
22320: LD_INT 117
22322: PUSH
22323: LD_INT 118
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: ST_TO_ADDR
22350: GO 22353
22352: POP
// end else
22353: GO 22584
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22355: LD_ADDR_VAR 0 2
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: LD_INT 2
22365: PUSH
22366: LD_INT 3
22368: PUSH
22369: LD_INT 4
22371: PUSH
22372: LD_INT 5
22374: PUSH
22375: LD_INT 6
22377: PUSH
22378: LD_INT 7
22380: PUSH
22381: LD_INT 8
22383: PUSH
22384: LD_INT 9
22386: PUSH
22387: LD_INT 10
22389: PUSH
22390: LD_INT 11
22392: PUSH
22393: LD_INT 12
22395: PUSH
22396: LD_INT 13
22398: PUSH
22399: LD_INT 14
22401: PUSH
22402: LD_INT 15
22404: PUSH
22405: LD_INT 16
22407: PUSH
22408: LD_INT 17
22410: PUSH
22411: LD_INT 18
22413: PUSH
22414: LD_INT 19
22416: PUSH
22417: LD_INT 20
22419: PUSH
22420: LD_INT 21
22422: PUSH
22423: LD_INT 22
22425: PUSH
22426: LD_INT 23
22428: PUSH
22429: LD_INT 24
22431: PUSH
22432: LD_INT 25
22434: PUSH
22435: LD_INT 26
22437: PUSH
22438: LD_INT 27
22440: PUSH
22441: LD_INT 28
22443: PUSH
22444: LD_INT 29
22446: PUSH
22447: LD_INT 30
22449: PUSH
22450: LD_INT 31
22452: PUSH
22453: LD_INT 32
22455: PUSH
22456: LD_INT 33
22458: PUSH
22459: LD_INT 34
22461: PUSH
22462: LD_INT 35
22464: PUSH
22465: LD_INT 36
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 101
22508: PUSH
22509: LD_INT 102
22511: PUSH
22512: LD_INT 103
22514: PUSH
22515: LD_INT 104
22517: PUSH
22518: LD_INT 105
22520: PUSH
22521: LD_INT 106
22523: PUSH
22524: LD_INT 107
22526: PUSH
22527: LD_INT 108
22529: PUSH
22530: LD_INT 109
22532: PUSH
22533: LD_INT 110
22535: PUSH
22536: LD_INT 111
22538: PUSH
22539: LD_INT 112
22541: PUSH
22542: LD_INT 113
22544: PUSH
22545: LD_INT 114
22547: PUSH
22548: LD_INT 115
22550: PUSH
22551: LD_INT 116
22553: PUSH
22554: LD_INT 117
22556: PUSH
22557: LD_INT 118
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: ST_TO_ADDR
// if result then
22584: LD_VAR 0 2
22588: IFFALSE 23374
// begin normal :=  ;
22590: LD_ADDR_VAR 0 5
22594: PUSH
22595: LD_STRING 
22597: ST_TO_ADDR
// hardcore :=  ;
22598: LD_ADDR_VAR 0 6
22602: PUSH
22603: LD_STRING 
22605: ST_TO_ADDR
// active :=  ;
22606: LD_ADDR_VAR 0 7
22610: PUSH
22611: LD_STRING 
22613: ST_TO_ADDR
// for i = 1 to normalCounter do
22614: LD_ADDR_VAR 0 8
22618: PUSH
22619: DOUBLE
22620: LD_INT 1
22622: DEC
22623: ST_TO_ADDR
22624: LD_EXP 40
22628: PUSH
22629: FOR_TO
22630: IFFALSE 22731
// begin tmp := 0 ;
22632: LD_ADDR_VAR 0 3
22636: PUSH
22637: LD_STRING 0
22639: ST_TO_ADDR
// if result [ 1 ] then
22640: LD_VAR 0 2
22644: PUSH
22645: LD_INT 1
22647: ARRAY
22648: IFFALSE 22713
// if result [ 1 ] [ 1 ] = i then
22650: LD_VAR 0 2
22654: PUSH
22655: LD_INT 1
22657: ARRAY
22658: PUSH
22659: LD_INT 1
22661: ARRAY
22662: PUSH
22663: LD_VAR 0 8
22667: EQUAL
22668: IFFALSE 22713
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22670: LD_ADDR_VAR 0 2
22674: PUSH
22675: LD_VAR 0 2
22679: PPUSH
22680: LD_INT 1
22682: PPUSH
22683: LD_VAR 0 2
22687: PUSH
22688: LD_INT 1
22690: ARRAY
22691: PPUSH
22692: LD_INT 1
22694: PPUSH
22695: CALL_OW 3
22699: PPUSH
22700: CALL_OW 1
22704: ST_TO_ADDR
// tmp := 1 ;
22705: LD_ADDR_VAR 0 3
22709: PUSH
22710: LD_STRING 1
22712: ST_TO_ADDR
// end ; normal := normal & tmp ;
22713: LD_ADDR_VAR 0 5
22717: PUSH
22718: LD_VAR 0 5
22722: PUSH
22723: LD_VAR 0 3
22727: STR
22728: ST_TO_ADDR
// end ;
22729: GO 22629
22731: POP
22732: POP
// for i = 1 to hardcoreCounter do
22733: LD_ADDR_VAR 0 8
22737: PUSH
22738: DOUBLE
22739: LD_INT 1
22741: DEC
22742: ST_TO_ADDR
22743: LD_EXP 41
22747: PUSH
22748: FOR_TO
22749: IFFALSE 22854
// begin tmp := 0 ;
22751: LD_ADDR_VAR 0 3
22755: PUSH
22756: LD_STRING 0
22758: ST_TO_ADDR
// if result [ 2 ] then
22759: LD_VAR 0 2
22763: PUSH
22764: LD_INT 2
22766: ARRAY
22767: IFFALSE 22836
// if result [ 2 ] [ 1 ] = 100 + i then
22769: LD_VAR 0 2
22773: PUSH
22774: LD_INT 2
22776: ARRAY
22777: PUSH
22778: LD_INT 1
22780: ARRAY
22781: PUSH
22782: LD_INT 100
22784: PUSH
22785: LD_VAR 0 8
22789: PLUS
22790: EQUAL
22791: IFFALSE 22836
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22793: LD_ADDR_VAR 0 2
22797: PUSH
22798: LD_VAR 0 2
22802: PPUSH
22803: LD_INT 2
22805: PPUSH
22806: LD_VAR 0 2
22810: PUSH
22811: LD_INT 2
22813: ARRAY
22814: PPUSH
22815: LD_INT 1
22817: PPUSH
22818: CALL_OW 3
22822: PPUSH
22823: CALL_OW 1
22827: ST_TO_ADDR
// tmp := 1 ;
22828: LD_ADDR_VAR 0 3
22832: PUSH
22833: LD_STRING 1
22835: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22836: LD_ADDR_VAR 0 6
22840: PUSH
22841: LD_VAR 0 6
22845: PUSH
22846: LD_VAR 0 3
22850: STR
22851: ST_TO_ADDR
// end ;
22852: GO 22748
22854: POP
22855: POP
// if isGameLoad then
22856: LD_VAR 0 1
22860: IFFALSE 23335
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22862: LD_ADDR_VAR 0 4
22866: PUSH
22867: LD_EXP 44
22871: PUSH
22872: LD_EXP 43
22876: PUSH
22877: LD_EXP 45
22881: PUSH
22882: LD_EXP 42
22886: PUSH
22887: LD_EXP 46
22891: PUSH
22892: LD_EXP 47
22896: PUSH
22897: LD_EXP 48
22901: PUSH
22902: LD_EXP 49
22906: PUSH
22907: LD_EXP 50
22911: PUSH
22912: LD_EXP 51
22916: PUSH
22917: LD_EXP 52
22921: PUSH
22922: LD_EXP 53
22926: PUSH
22927: LD_EXP 54
22931: PUSH
22932: LD_EXP 55
22936: PUSH
22937: LD_EXP 63
22941: PUSH
22942: LD_EXP 64
22946: PUSH
22947: LD_EXP 65
22951: PUSH
22952: LD_EXP 66
22956: PUSH
22957: LD_EXP 68
22961: PUSH
22962: LD_EXP 69
22966: PUSH
22967: LD_EXP 70
22971: PUSH
22972: LD_EXP 73
22976: PUSH
22977: LD_EXP 75
22981: PUSH
22982: LD_EXP 76
22986: PUSH
22987: LD_EXP 77
22991: PUSH
22992: LD_EXP 79
22996: PUSH
22997: LD_EXP 80
23001: PUSH
23002: LD_EXP 83
23006: PUSH
23007: LD_EXP 84
23011: PUSH
23012: LD_EXP 85
23016: PUSH
23017: LD_EXP 86
23021: PUSH
23022: LD_EXP 87
23026: PUSH
23027: LD_EXP 88
23031: PUSH
23032: LD_EXP 89
23036: PUSH
23037: LD_EXP 90
23041: PUSH
23042: LD_EXP 91
23046: PUSH
23047: LD_EXP 56
23051: PUSH
23052: LD_EXP 57
23056: PUSH
23057: LD_EXP 60
23061: PUSH
23062: LD_EXP 61
23066: PUSH
23067: LD_EXP 62
23071: PUSH
23072: LD_EXP 58
23076: PUSH
23077: LD_EXP 59
23081: PUSH
23082: LD_EXP 67
23086: PUSH
23087: LD_EXP 71
23091: PUSH
23092: LD_EXP 72
23096: PUSH
23097: LD_EXP 74
23101: PUSH
23102: LD_EXP 78
23106: PUSH
23107: LD_EXP 81
23111: PUSH
23112: LD_EXP 82
23116: PUSH
23117: LD_EXP 92
23121: PUSH
23122: LD_EXP 93
23126: PUSH
23127: LD_EXP 94
23131: PUSH
23132: LD_EXP 95
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: ST_TO_ADDR
// tmp :=  ;
23193: LD_ADDR_VAR 0 3
23197: PUSH
23198: LD_STRING 
23200: ST_TO_ADDR
// for i = 1 to normalCounter do
23201: LD_ADDR_VAR 0 8
23205: PUSH
23206: DOUBLE
23207: LD_INT 1
23209: DEC
23210: ST_TO_ADDR
23211: LD_EXP 40
23215: PUSH
23216: FOR_TO
23217: IFFALSE 23253
// begin if flags [ i ] then
23219: LD_VAR 0 4
23223: PUSH
23224: LD_VAR 0 8
23228: ARRAY
23229: IFFALSE 23251
// tmp := tmp & i & ; ;
23231: LD_ADDR_VAR 0 3
23235: PUSH
23236: LD_VAR 0 3
23240: PUSH
23241: LD_VAR 0 8
23245: STR
23246: PUSH
23247: LD_STRING ;
23249: STR
23250: ST_TO_ADDR
// end ;
23251: GO 23216
23253: POP
23254: POP
// for i = 1 to hardcoreCounter do
23255: LD_ADDR_VAR 0 8
23259: PUSH
23260: DOUBLE
23261: LD_INT 1
23263: DEC
23264: ST_TO_ADDR
23265: LD_EXP 41
23269: PUSH
23270: FOR_TO
23271: IFFALSE 23317
// begin if flags [ normalCounter + i ] then
23273: LD_VAR 0 4
23277: PUSH
23278: LD_EXP 40
23282: PUSH
23283: LD_VAR 0 8
23287: PLUS
23288: ARRAY
23289: IFFALSE 23315
// tmp := tmp & ( 100 + i ) & ; ;
23291: LD_ADDR_VAR 0 3
23295: PUSH
23296: LD_VAR 0 3
23300: PUSH
23301: LD_INT 100
23303: PUSH
23304: LD_VAR 0 8
23308: PLUS
23309: STR
23310: PUSH
23311: LD_STRING ;
23313: STR
23314: ST_TO_ADDR
// end ;
23315: GO 23270
23317: POP
23318: POP
// if tmp then
23319: LD_VAR 0 3
23323: IFFALSE 23335
// active := tmp ;
23325: LD_ADDR_VAR 0 7
23329: PUSH
23330: LD_VAR 0 3
23334: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23335: LD_STRING getStreamItemsFromMission("
23337: PUSH
23338: LD_VAR 0 5
23342: STR
23343: PUSH
23344: LD_STRING ","
23346: STR
23347: PUSH
23348: LD_VAR 0 6
23352: STR
23353: PUSH
23354: LD_STRING ","
23356: STR
23357: PUSH
23358: LD_VAR 0 7
23362: STR
23363: PUSH
23364: LD_STRING ")
23366: STR
23367: PPUSH
23368: CALL_OW 559
// end else
23372: GO 23381
// ToLua ( getStreamItemsFromMission("","","") ) ;
23374: LD_STRING getStreamItemsFromMission("","","")
23376: PPUSH
23377: CALL_OW 559
// end ;
23381: LD_VAR 0 2
23385: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23386: LD_EXP 39
23390: IFFALSE 23398
23392: PUSH
23393: LD_EXP 44
23397: AND
23398: IFFALSE 23522
23400: GO 23402
23402: DISABLE
23403: LD_INT 0
23405: PPUSH
23406: PPUSH
// begin enable ;
23407: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23408: LD_ADDR_VAR 0 2
23412: PUSH
23413: LD_INT 22
23415: PUSH
23416: LD_OWVAR 2
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 34
23430: PUSH
23431: LD_INT 7
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 34
23440: PUSH
23441: LD_INT 45
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 34
23450: PUSH
23451: LD_INT 28
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 34
23460: PUSH
23461: LD_INT 47
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PPUSH
23479: CALL_OW 69
23483: ST_TO_ADDR
// if not tmp then
23484: LD_VAR 0 2
23488: NOT
23489: IFFALSE 23493
// exit ;
23491: GO 23522
// for i in tmp do
23493: LD_ADDR_VAR 0 1
23497: PUSH
23498: LD_VAR 0 2
23502: PUSH
23503: FOR_IN
23504: IFFALSE 23520
// begin SetLives ( i , 0 ) ;
23506: LD_VAR 0 1
23510: PPUSH
23511: LD_INT 0
23513: PPUSH
23514: CALL_OW 234
// end ;
23518: GO 23503
23520: POP
23521: POP
// end ;
23522: PPOPN 2
23524: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23525: LD_EXP 39
23529: IFFALSE 23537
23531: PUSH
23532: LD_EXP 45
23536: AND
23537: IFFALSE 23621
23539: GO 23541
23541: DISABLE
23542: LD_INT 0
23544: PPUSH
23545: PPUSH
// begin enable ;
23546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23547: LD_ADDR_VAR 0 2
23551: PUSH
23552: LD_INT 22
23554: PUSH
23555: LD_OWVAR 2
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 32
23566: PUSH
23567: LD_INT 3
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PPUSH
23578: CALL_OW 69
23582: ST_TO_ADDR
// if not tmp then
23583: LD_VAR 0 2
23587: NOT
23588: IFFALSE 23592
// exit ;
23590: GO 23621
// for i in tmp do
23592: LD_ADDR_VAR 0 1
23596: PUSH
23597: LD_VAR 0 2
23601: PUSH
23602: FOR_IN
23603: IFFALSE 23619
// begin SetLives ( i , 0 ) ;
23605: LD_VAR 0 1
23609: PPUSH
23610: LD_INT 0
23612: PPUSH
23613: CALL_OW 234
// end ;
23617: GO 23602
23619: POP
23620: POP
// end ;
23621: PPOPN 2
23623: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23624: LD_EXP 39
23628: IFFALSE 23636
23630: PUSH
23631: LD_EXP 42
23635: AND
23636: IFFALSE 23729
23638: GO 23640
23640: DISABLE
23641: LD_INT 0
23643: PPUSH
// begin enable ;
23644: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23645: LD_ADDR_VAR 0 1
23649: PUSH
23650: LD_INT 22
23652: PUSH
23653: LD_OWVAR 2
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 2
23664: PUSH
23665: LD_INT 25
23667: PUSH
23668: LD_INT 5
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 25
23677: PUSH
23678: LD_INT 9
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 25
23687: PUSH
23688: LD_INT 8
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PPUSH
23705: CALL_OW 69
23709: PUSH
23710: FOR_IN
23711: IFFALSE 23727
// begin SetClass ( i , 1 ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_INT 1
23720: PPUSH
23721: CALL_OW 336
// end ;
23725: GO 23710
23727: POP
23728: POP
// end ;
23729: PPOPN 1
23731: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23732: LD_EXP 39
23736: IFFALSE 23744
23738: PUSH
23739: LD_EXP 43
23743: AND
23744: IFFALSE 23756
23746: PUSH
23747: LD_OWVAR 65
23751: PUSH
23752: LD_INT 7
23754: LESS
23755: AND
23756: IFFALSE 23770
23758: GO 23760
23760: DISABLE
// begin enable ;
23761: ENABLE
// game_speed := 7 ;
23762: LD_ADDR_OWVAR 65
23766: PUSH
23767: LD_INT 7
23769: ST_TO_ADDR
// end ;
23770: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23771: LD_EXP 39
23775: IFFALSE 23783
23777: PUSH
23778: LD_EXP 46
23782: AND
23783: IFFALSE 23985
23785: GO 23787
23787: DISABLE
23788: LD_INT 0
23790: PPUSH
23791: PPUSH
23792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23793: LD_ADDR_VAR 0 3
23797: PUSH
23798: LD_INT 81
23800: PUSH
23801: LD_OWVAR 2
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 21
23812: PUSH
23813: LD_INT 1
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PPUSH
23824: CALL_OW 69
23828: ST_TO_ADDR
// if not tmp then
23829: LD_VAR 0 3
23833: NOT
23834: IFFALSE 23838
// exit ;
23836: GO 23985
// if tmp > 5 then
23838: LD_VAR 0 3
23842: PUSH
23843: LD_INT 5
23845: GREATER
23846: IFFALSE 23858
// k := 5 else
23848: LD_ADDR_VAR 0 2
23852: PUSH
23853: LD_INT 5
23855: ST_TO_ADDR
23856: GO 23868
// k := tmp ;
23858: LD_ADDR_VAR 0 2
23862: PUSH
23863: LD_VAR 0 3
23867: ST_TO_ADDR
// for i := 1 to k do
23868: LD_ADDR_VAR 0 1
23872: PUSH
23873: DOUBLE
23874: LD_INT 1
23876: DEC
23877: ST_TO_ADDR
23878: LD_VAR 0 2
23882: PUSH
23883: FOR_TO
23884: IFFALSE 23983
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23886: LD_VAR 0 3
23890: PUSH
23891: LD_VAR 0 1
23895: ARRAY
23896: PPUSH
23897: LD_VAR 0 1
23901: PUSH
23902: LD_INT 4
23904: MOD
23905: PUSH
23906: LD_INT 1
23908: PLUS
23909: PPUSH
23910: CALL_OW 259
23914: PUSH
23915: LD_INT 10
23917: LESS
23918: IFFALSE 23981
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23920: LD_VAR 0 3
23924: PUSH
23925: LD_VAR 0 1
23929: ARRAY
23930: PPUSH
23931: LD_VAR 0 1
23935: PUSH
23936: LD_INT 4
23938: MOD
23939: PUSH
23940: LD_INT 1
23942: PLUS
23943: PPUSH
23944: LD_VAR 0 3
23948: PUSH
23949: LD_VAR 0 1
23953: ARRAY
23954: PPUSH
23955: LD_VAR 0 1
23959: PUSH
23960: LD_INT 4
23962: MOD
23963: PUSH
23964: LD_INT 1
23966: PLUS
23967: PPUSH
23968: CALL_OW 259
23972: PUSH
23973: LD_INT 1
23975: PLUS
23976: PPUSH
23977: CALL_OW 237
23981: GO 23883
23983: POP
23984: POP
// end ;
23985: PPOPN 3
23987: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23988: LD_EXP 39
23992: IFFALSE 24000
23994: PUSH
23995: LD_EXP 47
23999: AND
24000: IFFALSE 24020
24002: GO 24004
24004: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24005: LD_INT 4
24007: PPUSH
24008: LD_OWVAR 2
24012: PPUSH
24013: LD_INT 0
24015: PPUSH
24016: CALL_OW 324
24020: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24021: LD_EXP 39
24025: IFFALSE 24033
24027: PUSH
24028: LD_EXP 76
24032: AND
24033: IFFALSE 24053
24035: GO 24037
24037: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24038: LD_INT 19
24040: PPUSH
24041: LD_OWVAR 2
24045: PPUSH
24046: LD_INT 0
24048: PPUSH
24049: CALL_OW 324
24053: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24054: LD_EXP 39
24058: IFFALSE 24066
24060: PUSH
24061: LD_EXP 48
24065: AND
24066: IFFALSE 24168
24068: GO 24070
24070: DISABLE
24071: LD_INT 0
24073: PPUSH
24074: PPUSH
// begin enable ;
24075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24076: LD_ADDR_VAR 0 2
24080: PUSH
24081: LD_INT 22
24083: PUSH
24084: LD_OWVAR 2
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 2
24095: PUSH
24096: LD_INT 34
24098: PUSH
24099: LD_INT 11
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 34
24108: PUSH
24109: LD_INT 30
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: LIST
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PPUSH
24125: CALL_OW 69
24129: ST_TO_ADDR
// if not tmp then
24130: LD_VAR 0 2
24134: NOT
24135: IFFALSE 24139
// exit ;
24137: GO 24168
// for i in tmp do
24139: LD_ADDR_VAR 0 1
24143: PUSH
24144: LD_VAR 0 2
24148: PUSH
24149: FOR_IN
24150: IFFALSE 24166
// begin SetLives ( i , 0 ) ;
24152: LD_VAR 0 1
24156: PPUSH
24157: LD_INT 0
24159: PPUSH
24160: CALL_OW 234
// end ;
24164: GO 24149
24166: POP
24167: POP
// end ;
24168: PPOPN 2
24170: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24171: LD_EXP 39
24175: IFFALSE 24183
24177: PUSH
24178: LD_EXP 49
24182: AND
24183: IFFALSE 24203
24185: GO 24187
24187: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24188: LD_INT 32
24190: PPUSH
24191: LD_OWVAR 2
24195: PPUSH
24196: LD_INT 0
24198: PPUSH
24199: CALL_OW 324
24203: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24204: LD_EXP 39
24208: IFFALSE 24216
24210: PUSH
24211: LD_EXP 50
24215: AND
24216: IFFALSE 24399
24218: GO 24220
24220: DISABLE
24221: LD_INT 0
24223: PPUSH
24224: PPUSH
24225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24226: LD_ADDR_VAR 0 2
24230: PUSH
24231: LD_INT 22
24233: PUSH
24234: LD_OWVAR 2
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 33
24245: PUSH
24246: LD_INT 3
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PPUSH
24257: CALL_OW 69
24261: ST_TO_ADDR
// if not tmp then
24262: LD_VAR 0 2
24266: NOT
24267: IFFALSE 24271
// exit ;
24269: GO 24399
// side := 0 ;
24271: LD_ADDR_VAR 0 3
24275: PUSH
24276: LD_INT 0
24278: ST_TO_ADDR
// for i := 1 to 8 do
24279: LD_ADDR_VAR 0 1
24283: PUSH
24284: DOUBLE
24285: LD_INT 1
24287: DEC
24288: ST_TO_ADDR
24289: LD_INT 8
24291: PUSH
24292: FOR_TO
24293: IFFALSE 24343
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24295: LD_OWVAR 2
24299: PUSH
24300: LD_VAR 0 1
24304: NONEQUAL
24305: IFFALSE 24327
24307: PUSH
24308: LD_OWVAR 2
24312: PPUSH
24313: LD_VAR 0 1
24317: PPUSH
24318: CALL_OW 81
24322: PUSH
24323: LD_INT 2
24325: EQUAL
24326: AND
24327: IFFALSE 24341
// begin side := i ;
24329: LD_ADDR_VAR 0 3
24333: PUSH
24334: LD_VAR 0 1
24338: ST_TO_ADDR
// break ;
24339: GO 24343
// end ;
24341: GO 24292
24343: POP
24344: POP
// if not side then
24345: LD_VAR 0 3
24349: NOT
24350: IFFALSE 24354
// exit ;
24352: GO 24399
// for i := 1 to tmp do
24354: LD_ADDR_VAR 0 1
24358: PUSH
24359: DOUBLE
24360: LD_INT 1
24362: DEC
24363: ST_TO_ADDR
24364: LD_VAR 0 2
24368: PUSH
24369: FOR_TO
24370: IFFALSE 24397
// if Prob ( 60 ) then
24372: LD_INT 60
24374: PPUSH
24375: CALL_OW 13
24379: IFFALSE 24395
// SetSide ( i , side ) ;
24381: LD_VAR 0 1
24385: PPUSH
24386: LD_VAR 0 3
24390: PPUSH
24391: CALL_OW 235
24395: GO 24369
24397: POP
24398: POP
// end ;
24399: PPOPN 3
24401: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24402: LD_EXP 39
24406: IFFALSE 24414
24408: PUSH
24409: LD_EXP 52
24413: AND
24414: IFFALSE 24533
24416: GO 24418
24418: DISABLE
24419: LD_INT 0
24421: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24422: LD_ADDR_VAR 0 1
24426: PUSH
24427: LD_INT 22
24429: PUSH
24430: LD_OWVAR 2
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 21
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 3
24451: PUSH
24452: LD_INT 23
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: PPUSH
24471: CALL_OW 69
24475: PUSH
24476: FOR_IN
24477: IFFALSE 24531
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 257
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: LD_INT 3
24497: PUSH
24498: LD_INT 4
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: IN
24507: IFFALSE 24529
// SetClass ( un , rand ( 1 , 4 ) ) ;
24509: LD_VAR 0 1
24513: PPUSH
24514: LD_INT 1
24516: PPUSH
24517: LD_INT 4
24519: PPUSH
24520: CALL_OW 12
24524: PPUSH
24525: CALL_OW 336
24529: GO 24476
24531: POP
24532: POP
// end ;
24533: PPOPN 1
24535: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24536: LD_EXP 39
24540: IFFALSE 24548
24542: PUSH
24543: LD_EXP 51
24547: AND
24548: IFFALSE 24627
24550: GO 24552
24552: DISABLE
24553: LD_INT 0
24555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24556: LD_ADDR_VAR 0 1
24560: PUSH
24561: LD_INT 22
24563: PUSH
24564: LD_OWVAR 2
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 21
24575: PUSH
24576: LD_INT 3
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PPUSH
24587: CALL_OW 69
24591: ST_TO_ADDR
// if not tmp then
24592: LD_VAR 0 1
24596: NOT
24597: IFFALSE 24601
// exit ;
24599: GO 24627
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24601: LD_VAR 0 1
24605: PUSH
24606: LD_INT 1
24608: PPUSH
24609: LD_VAR 0 1
24613: PPUSH
24614: CALL_OW 12
24618: ARRAY
24619: PPUSH
24620: LD_INT 100
24622: PPUSH
24623: CALL_OW 234
// end ;
24627: PPOPN 1
24629: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24630: LD_EXP 39
24634: IFFALSE 24642
24636: PUSH
24637: LD_EXP 53
24641: AND
24642: IFFALSE 24740
24644: GO 24646
24646: DISABLE
24647: LD_INT 0
24649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24650: LD_ADDR_VAR 0 1
24654: PUSH
24655: LD_INT 22
24657: PUSH
24658: LD_OWVAR 2
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 21
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PPUSH
24681: CALL_OW 69
24685: ST_TO_ADDR
// if not tmp then
24686: LD_VAR 0 1
24690: NOT
24691: IFFALSE 24695
// exit ;
24693: GO 24740
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24695: LD_VAR 0 1
24699: PUSH
24700: LD_INT 1
24702: PPUSH
24703: LD_VAR 0 1
24707: PPUSH
24708: CALL_OW 12
24712: ARRAY
24713: PPUSH
24714: LD_INT 1
24716: PPUSH
24717: LD_INT 4
24719: PPUSH
24720: CALL_OW 12
24724: PPUSH
24725: LD_INT 3000
24727: PPUSH
24728: LD_INT 9000
24730: PPUSH
24731: CALL_OW 12
24735: PPUSH
24736: CALL_OW 492
// end ;
24740: PPOPN 1
24742: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24743: LD_EXP 39
24747: IFFALSE 24755
24749: PUSH
24750: LD_EXP 54
24754: AND
24755: IFFALSE 24775
24757: GO 24759
24759: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24760: LD_INT 1
24762: PPUSH
24763: LD_OWVAR 2
24767: PPUSH
24768: LD_INT 0
24770: PPUSH
24771: CALL_OW 324
24775: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24776: LD_EXP 39
24780: IFFALSE 24788
24782: PUSH
24783: LD_EXP 55
24787: AND
24788: IFFALSE 24871
24790: GO 24792
24792: DISABLE
24793: LD_INT 0
24795: PPUSH
24796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24797: LD_ADDR_VAR 0 2
24801: PUSH
24802: LD_INT 22
24804: PUSH
24805: LD_OWVAR 2
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 21
24816: PUSH
24817: LD_INT 3
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PPUSH
24828: CALL_OW 69
24832: ST_TO_ADDR
// if not tmp then
24833: LD_VAR 0 2
24837: NOT
24838: IFFALSE 24842
// exit ;
24840: GO 24871
// for i in tmp do
24842: LD_ADDR_VAR 0 1
24846: PUSH
24847: LD_VAR 0 2
24851: PUSH
24852: FOR_IN
24853: IFFALSE 24869
// SetBLevel ( i , 10 ) ;
24855: LD_VAR 0 1
24859: PPUSH
24860: LD_INT 10
24862: PPUSH
24863: CALL_OW 241
24867: GO 24852
24869: POP
24870: POP
// end ;
24871: PPOPN 2
24873: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24874: LD_EXP 39
24878: IFFALSE 24886
24880: PUSH
24881: LD_EXP 56
24885: AND
24886: IFFALSE 24997
24888: GO 24890
24890: DISABLE
24891: LD_INT 0
24893: PPUSH
24894: PPUSH
24895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24896: LD_ADDR_VAR 0 3
24900: PUSH
24901: LD_INT 22
24903: PUSH
24904: LD_OWVAR 2
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 25
24915: PUSH
24916: LD_INT 1
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PPUSH
24927: CALL_OW 69
24931: ST_TO_ADDR
// if not tmp then
24932: LD_VAR 0 3
24936: NOT
24937: IFFALSE 24941
// exit ;
24939: GO 24997
// un := tmp [ rand ( 1 , tmp ) ] ;
24941: LD_ADDR_VAR 0 2
24945: PUSH
24946: LD_VAR 0 3
24950: PUSH
24951: LD_INT 1
24953: PPUSH
24954: LD_VAR 0 3
24958: PPUSH
24959: CALL_OW 12
24963: ARRAY
24964: ST_TO_ADDR
// if Crawls ( un ) then
24965: LD_VAR 0 2
24969: PPUSH
24970: CALL_OW 318
24974: IFFALSE 24985
// ComWalk ( un ) ;
24976: LD_VAR 0 2
24980: PPUSH
24981: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24985: LD_VAR 0 2
24989: PPUSH
24990: LD_INT 5
24992: PPUSH
24993: CALL_OW 336
// end ;
24997: PPOPN 3
24999: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25000: LD_EXP 39
25004: IFFALSE 25012
25006: PUSH
25007: LD_EXP 57
25011: AND
25012: IFFALSE 25024
25014: PUSH
25015: LD_OWVAR 67
25019: PUSH
25020: LD_INT 4
25022: LESS
25023: AND
25024: IFFALSE 25043
25026: GO 25028
25028: DISABLE
// begin Difficulty := Difficulty + 1 ;
25029: LD_ADDR_OWVAR 67
25033: PUSH
25034: LD_OWVAR 67
25038: PUSH
25039: LD_INT 1
25041: PLUS
25042: ST_TO_ADDR
// end ;
25043: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25044: LD_EXP 39
25048: IFFALSE 25056
25050: PUSH
25051: LD_EXP 58
25055: AND
25056: IFFALSE 25159
25058: GO 25060
25060: DISABLE
25061: LD_INT 0
25063: PPUSH
// begin for i := 1 to 5 do
25064: LD_ADDR_VAR 0 1
25068: PUSH
25069: DOUBLE
25070: LD_INT 1
25072: DEC
25073: ST_TO_ADDR
25074: LD_INT 5
25076: PUSH
25077: FOR_TO
25078: IFFALSE 25157
// begin uc_nation := nation_nature ;
25080: LD_ADDR_OWVAR 21
25084: PUSH
25085: LD_INT 0
25087: ST_TO_ADDR
// uc_side := 0 ;
25088: LD_ADDR_OWVAR 20
25092: PUSH
25093: LD_INT 0
25095: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25096: LD_ADDR_OWVAR 29
25100: PUSH
25101: LD_INT 12
25103: PUSH
25104: LD_INT 12
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: ST_TO_ADDR
// hc_agressivity := 20 ;
25111: LD_ADDR_OWVAR 35
25115: PUSH
25116: LD_INT 20
25118: ST_TO_ADDR
// hc_class := class_tiger ;
25119: LD_ADDR_OWVAR 28
25123: PUSH
25124: LD_INT 14
25126: ST_TO_ADDR
// hc_gallery :=  ;
25127: LD_ADDR_OWVAR 33
25131: PUSH
25132: LD_STRING 
25134: ST_TO_ADDR
// hc_name :=  ;
25135: LD_ADDR_OWVAR 26
25139: PUSH
25140: LD_STRING 
25142: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25143: CALL_OW 44
25147: PPUSH
25148: LD_INT 0
25150: PPUSH
25151: CALL_OW 51
// end ;
25155: GO 25077
25157: POP
25158: POP
// end ;
25159: PPOPN 1
25161: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25162: LD_EXP 39
25166: IFFALSE 25174
25168: PUSH
25169: LD_EXP 59
25173: AND
25174: IFFALSE 25183
25176: GO 25178
25178: DISABLE
// StreamSibBomb ;
25179: CALL 25184 0 0
25183: END
// export function StreamSibBomb ; var i , x , y ; begin
25184: LD_INT 0
25186: PPUSH
25187: PPUSH
25188: PPUSH
25189: PPUSH
// result := false ;
25190: LD_ADDR_VAR 0 1
25194: PUSH
25195: LD_INT 0
25197: ST_TO_ADDR
// for i := 1 to 16 do
25198: LD_ADDR_VAR 0 2
25202: PUSH
25203: DOUBLE
25204: LD_INT 1
25206: DEC
25207: ST_TO_ADDR
25208: LD_INT 16
25210: PUSH
25211: FOR_TO
25212: IFFALSE 25411
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25214: LD_ADDR_VAR 0 3
25218: PUSH
25219: LD_INT 10
25221: PUSH
25222: LD_INT 20
25224: PUSH
25225: LD_INT 30
25227: PUSH
25228: LD_INT 40
25230: PUSH
25231: LD_INT 50
25233: PUSH
25234: LD_INT 60
25236: PUSH
25237: LD_INT 70
25239: PUSH
25240: LD_INT 80
25242: PUSH
25243: LD_INT 90
25245: PUSH
25246: LD_INT 100
25248: PUSH
25249: LD_INT 110
25251: PUSH
25252: LD_INT 120
25254: PUSH
25255: LD_INT 130
25257: PUSH
25258: LD_INT 140
25260: PUSH
25261: LD_INT 150
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 1
25283: PPUSH
25284: LD_INT 15
25286: PPUSH
25287: CALL_OW 12
25291: ARRAY
25292: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25293: LD_ADDR_VAR 0 4
25297: PUSH
25298: LD_INT 10
25300: PUSH
25301: LD_INT 20
25303: PUSH
25304: LD_INT 30
25306: PUSH
25307: LD_INT 40
25309: PUSH
25310: LD_INT 50
25312: PUSH
25313: LD_INT 60
25315: PUSH
25316: LD_INT 70
25318: PUSH
25319: LD_INT 80
25321: PUSH
25322: LD_INT 90
25324: PUSH
25325: LD_INT 100
25327: PUSH
25328: LD_INT 110
25330: PUSH
25331: LD_INT 120
25333: PUSH
25334: LD_INT 130
25336: PUSH
25337: LD_INT 140
25339: PUSH
25340: LD_INT 150
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 1
25362: PPUSH
25363: LD_INT 15
25365: PPUSH
25366: CALL_OW 12
25370: ARRAY
25371: ST_TO_ADDR
// if ValidHex ( x , y ) then
25372: LD_VAR 0 3
25376: PPUSH
25377: LD_VAR 0 4
25381: PPUSH
25382: CALL_OW 488
25386: IFFALSE 25409
// begin result := [ x , y ] ;
25388: LD_ADDR_VAR 0 1
25392: PUSH
25393: LD_VAR 0 3
25397: PUSH
25398: LD_VAR 0 4
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: ST_TO_ADDR
// break ;
25407: GO 25411
// end ; end ;
25409: GO 25211
25411: POP
25412: POP
// if result then
25413: LD_VAR 0 1
25417: IFFALSE 25477
// begin ToLua ( playSibBomb() ) ;
25419: LD_STRING playSibBomb()
25421: PPUSH
25422: CALL_OW 559
// wait ( 0 0$14 ) ;
25426: LD_INT 490
25428: PPUSH
25429: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25433: LD_VAR 0 1
25437: PUSH
25438: LD_INT 1
25440: ARRAY
25441: PPUSH
25442: LD_VAR 0 1
25446: PUSH
25447: LD_INT 2
25449: ARRAY
25450: PPUSH
25451: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25455: LD_VAR 0 1
25459: PUSH
25460: LD_INT 1
25462: ARRAY
25463: PPUSH
25464: LD_VAR 0 1
25468: PUSH
25469: LD_INT 2
25471: ARRAY
25472: PPUSH
25473: CALL_OW 429
// end ; end ;
25477: LD_VAR 0 1
25481: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25482: LD_EXP 39
25486: IFFALSE 25494
25488: PUSH
25489: LD_EXP 61
25493: AND
25494: IFFALSE 25506
25496: GO 25498
25498: DISABLE
// YouLost (  ) ;
25499: LD_STRING 
25501: PPUSH
25502: CALL_OW 104
25506: END
// every 0 0$1 trigger StreamModeActive and sFog do
25507: LD_EXP 39
25511: IFFALSE 25519
25513: PUSH
25514: LD_EXP 60
25518: AND
25519: IFFALSE 25533
25521: GO 25523
25523: DISABLE
// FogOff ( your_side ) ;
25524: LD_OWVAR 2
25528: PPUSH
25529: CALL_OW 344
25533: END
// every 0 0$1 trigger StreamModeActive and sSun do
25534: LD_EXP 39
25538: IFFALSE 25546
25540: PUSH
25541: LD_EXP 62
25545: AND
25546: IFFALSE 25574
25548: GO 25550
25550: DISABLE
// begin solar_recharge_percent := 0 ;
25551: LD_ADDR_OWVAR 79
25555: PUSH
25556: LD_INT 0
25558: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25559: LD_INT 10500
25561: PPUSH
25562: CALL_OW 67
// solar_recharge_percent := 100 ;
25566: LD_ADDR_OWVAR 79
25570: PUSH
25571: LD_INT 100
25573: ST_TO_ADDR
// end ;
25574: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25575: LD_EXP 39
25579: IFFALSE 25587
25581: PUSH
25582: LD_EXP 63
25586: AND
25587: IFFALSE 25826
25589: GO 25591
25591: DISABLE
25592: LD_INT 0
25594: PPUSH
25595: PPUSH
25596: PPUSH
// begin tmp := [ ] ;
25597: LD_ADDR_VAR 0 3
25601: PUSH
25602: EMPTY
25603: ST_TO_ADDR
// for i := 1 to 6 do
25604: LD_ADDR_VAR 0 1
25608: PUSH
25609: DOUBLE
25610: LD_INT 1
25612: DEC
25613: ST_TO_ADDR
25614: LD_INT 6
25616: PUSH
25617: FOR_TO
25618: IFFALSE 25723
// begin uc_nation := nation_nature ;
25620: LD_ADDR_OWVAR 21
25624: PUSH
25625: LD_INT 0
25627: ST_TO_ADDR
// uc_side := 0 ;
25628: LD_ADDR_OWVAR 20
25632: PUSH
25633: LD_INT 0
25635: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25636: LD_ADDR_OWVAR 29
25640: PUSH
25641: LD_INT 12
25643: PUSH
25644: LD_INT 12
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: ST_TO_ADDR
// hc_agressivity := 20 ;
25651: LD_ADDR_OWVAR 35
25655: PUSH
25656: LD_INT 20
25658: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25659: LD_ADDR_OWVAR 28
25663: PUSH
25664: LD_INT 17
25666: ST_TO_ADDR
// hc_gallery :=  ;
25667: LD_ADDR_OWVAR 33
25671: PUSH
25672: LD_STRING 
25674: ST_TO_ADDR
// hc_name :=  ;
25675: LD_ADDR_OWVAR 26
25679: PUSH
25680: LD_STRING 
25682: ST_TO_ADDR
// un := CreateHuman ;
25683: LD_ADDR_VAR 0 2
25687: PUSH
25688: CALL_OW 44
25692: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25693: LD_VAR 0 2
25697: PPUSH
25698: LD_INT 1
25700: PPUSH
25701: CALL_OW 51
// tmp := tmp ^ un ;
25705: LD_ADDR_VAR 0 3
25709: PUSH
25710: LD_VAR 0 3
25714: PUSH
25715: LD_VAR 0 2
25719: ADD
25720: ST_TO_ADDR
// end ;
25721: GO 25617
25723: POP
25724: POP
// repeat wait ( 0 0$1 ) ;
25725: LD_INT 35
25727: PPUSH
25728: CALL_OW 67
// for un in tmp do
25732: LD_ADDR_VAR 0 2
25736: PUSH
25737: LD_VAR 0 3
25741: PUSH
25742: FOR_IN
25743: IFFALSE 25817
// begin if IsDead ( un ) then
25745: LD_VAR 0 2
25749: PPUSH
25750: CALL_OW 301
25754: IFFALSE 25774
// begin tmp := tmp diff un ;
25756: LD_ADDR_VAR 0 3
25760: PUSH
25761: LD_VAR 0 3
25765: PUSH
25766: LD_VAR 0 2
25770: DIFF
25771: ST_TO_ADDR
// continue ;
25772: GO 25742
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25774: LD_VAR 0 2
25778: PPUSH
25779: LD_INT 3
25781: PUSH
25782: LD_INT 22
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PPUSH
25796: CALL_OW 69
25800: PPUSH
25801: LD_VAR 0 2
25805: PPUSH
25806: CALL_OW 74
25810: PPUSH
25811: CALL_OW 115
// end ;
25815: GO 25742
25817: POP
25818: POP
// until not tmp ;
25819: LD_VAR 0 3
25823: NOT
25824: IFFALSE 25725
// end ;
25826: PPOPN 3
25828: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25829: LD_EXP 39
25833: IFFALSE 25841
25835: PUSH
25836: LD_EXP 64
25840: AND
25841: IFFALSE 25895
25843: GO 25845
25845: DISABLE
// begin ToLua ( displayTroll(); ) ;
25846: LD_STRING displayTroll();
25848: PPUSH
25849: CALL_OW 559
// wait ( 3 3$00 ) ;
25853: LD_INT 6300
25855: PPUSH
25856: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25860: LD_STRING hideTroll();
25862: PPUSH
25863: CALL_OW 559
// wait ( 1 1$00 ) ;
25867: LD_INT 2100
25869: PPUSH
25870: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25874: LD_STRING displayTroll();
25876: PPUSH
25877: CALL_OW 559
// wait ( 1 1$00 ) ;
25881: LD_INT 2100
25883: PPUSH
25884: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25888: LD_STRING hideTroll();
25890: PPUSH
25891: CALL_OW 559
// end ;
25895: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25896: LD_EXP 39
25900: IFFALSE 25908
25902: PUSH
25903: LD_EXP 65
25907: AND
25908: IFFALSE 25971
25910: GO 25912
25912: DISABLE
25913: LD_INT 0
25915: PPUSH
// begin p := 0 ;
25916: LD_ADDR_VAR 0 1
25920: PUSH
25921: LD_INT 0
25923: ST_TO_ADDR
// repeat game_speed := 1 ;
25924: LD_ADDR_OWVAR 65
25928: PUSH
25929: LD_INT 1
25931: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25932: LD_INT 35
25934: PPUSH
25935: CALL_OW 67
// p := p + 1 ;
25939: LD_ADDR_VAR 0 1
25943: PUSH
25944: LD_VAR 0 1
25948: PUSH
25949: LD_INT 1
25951: PLUS
25952: ST_TO_ADDR
// until p >= 60 ;
25953: LD_VAR 0 1
25957: PUSH
25958: LD_INT 60
25960: GREATEREQUAL
25961: IFFALSE 25924
// game_speed := 4 ;
25963: LD_ADDR_OWVAR 65
25967: PUSH
25968: LD_INT 4
25970: ST_TO_ADDR
// end ;
25971: PPOPN 1
25973: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25974: LD_EXP 39
25978: IFFALSE 25986
25980: PUSH
25981: LD_EXP 66
25985: AND
25986: IFFALSE 26132
25988: GO 25990
25990: DISABLE
25991: LD_INT 0
25993: PPUSH
25994: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25995: LD_ADDR_VAR 0 1
25999: PUSH
26000: LD_INT 22
26002: PUSH
26003: LD_OWVAR 2
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: LD_INT 30
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 30
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: LIST
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PPUSH
26044: CALL_OW 69
26048: ST_TO_ADDR
// if not depot then
26049: LD_VAR 0 1
26053: NOT
26054: IFFALSE 26058
// exit ;
26056: GO 26132
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26058: LD_ADDR_VAR 0 2
26062: PUSH
26063: LD_VAR 0 1
26067: PUSH
26068: LD_INT 1
26070: PPUSH
26071: LD_VAR 0 1
26075: PPUSH
26076: CALL_OW 12
26080: ARRAY
26081: PPUSH
26082: CALL_OW 274
26086: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26087: LD_VAR 0 2
26091: PPUSH
26092: LD_INT 1
26094: PPUSH
26095: LD_INT 0
26097: PPUSH
26098: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26102: LD_VAR 0 2
26106: PPUSH
26107: LD_INT 2
26109: PPUSH
26110: LD_INT 0
26112: PPUSH
26113: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26117: LD_VAR 0 2
26121: PPUSH
26122: LD_INT 3
26124: PPUSH
26125: LD_INT 0
26127: PPUSH
26128: CALL_OW 277
// end ;
26132: PPOPN 2
26134: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26135: LD_EXP 39
26139: IFFALSE 26147
26141: PUSH
26142: LD_EXP 67
26146: AND
26147: IFFALSE 26244
26149: GO 26151
26151: DISABLE
26152: LD_INT 0
26154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26155: LD_ADDR_VAR 0 1
26159: PUSH
26160: LD_INT 22
26162: PUSH
26163: LD_OWVAR 2
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 21
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 3
26184: PUSH
26185: LD_INT 23
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: LIST
26203: PPUSH
26204: CALL_OW 69
26208: ST_TO_ADDR
// if not tmp then
26209: LD_VAR 0 1
26213: NOT
26214: IFFALSE 26218
// exit ;
26216: GO 26244
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26218: LD_VAR 0 1
26222: PUSH
26223: LD_INT 1
26225: PPUSH
26226: LD_VAR 0 1
26230: PPUSH
26231: CALL_OW 12
26235: ARRAY
26236: PPUSH
26237: LD_INT 200
26239: PPUSH
26240: CALL_OW 234
// end ;
26244: PPOPN 1
26246: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26247: LD_EXP 39
26251: IFFALSE 26259
26253: PUSH
26254: LD_EXP 68
26258: AND
26259: IFFALSE 26338
26261: GO 26263
26263: DISABLE
26264: LD_INT 0
26266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26267: LD_ADDR_VAR 0 1
26271: PUSH
26272: LD_INT 22
26274: PUSH
26275: LD_OWVAR 2
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 21
26286: PUSH
26287: LD_INT 2
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PPUSH
26298: CALL_OW 69
26302: ST_TO_ADDR
// if not tmp then
26303: LD_VAR 0 1
26307: NOT
26308: IFFALSE 26312
// exit ;
26310: GO 26338
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26312: LD_VAR 0 1
26316: PUSH
26317: LD_INT 1
26319: PPUSH
26320: LD_VAR 0 1
26324: PPUSH
26325: CALL_OW 12
26329: ARRAY
26330: PPUSH
26331: LD_INT 60
26333: PPUSH
26334: CALL_OW 234
// end ;
26338: PPOPN 1
26340: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26341: LD_EXP 39
26345: IFFALSE 26353
26347: PUSH
26348: LD_EXP 69
26352: AND
26353: IFFALSE 26452
26355: GO 26357
26357: DISABLE
26358: LD_INT 0
26360: PPUSH
26361: PPUSH
// begin enable ;
26362: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26363: LD_ADDR_VAR 0 1
26367: PUSH
26368: LD_INT 22
26370: PUSH
26371: LD_OWVAR 2
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 61
26382: PUSH
26383: EMPTY
26384: LIST
26385: PUSH
26386: LD_INT 33
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: PPUSH
26401: CALL_OW 69
26405: ST_TO_ADDR
// if not tmp then
26406: LD_VAR 0 1
26410: NOT
26411: IFFALSE 26415
// exit ;
26413: GO 26452
// for i in tmp do
26415: LD_ADDR_VAR 0 2
26419: PUSH
26420: LD_VAR 0 1
26424: PUSH
26425: FOR_IN
26426: IFFALSE 26450
// if IsControledBy ( i ) then
26428: LD_VAR 0 2
26432: PPUSH
26433: CALL_OW 312
26437: IFFALSE 26448
// ComUnlink ( i ) ;
26439: LD_VAR 0 2
26443: PPUSH
26444: CALL_OW 136
26448: GO 26425
26450: POP
26451: POP
// end ;
26452: PPOPN 2
26454: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26455: LD_EXP 39
26459: IFFALSE 26467
26461: PUSH
26462: LD_EXP 70
26466: AND
26467: IFFALSE 26607
26469: GO 26471
26471: DISABLE
26472: LD_INT 0
26474: PPUSH
26475: PPUSH
// begin ToLua ( displayPowell(); ) ;
26476: LD_STRING displayPowell();
26478: PPUSH
26479: CALL_OW 559
// uc_side := 0 ;
26483: LD_ADDR_OWVAR 20
26487: PUSH
26488: LD_INT 0
26490: ST_TO_ADDR
// uc_nation := 2 ;
26491: LD_ADDR_OWVAR 21
26495: PUSH
26496: LD_INT 2
26498: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26499: LD_ADDR_OWVAR 37
26503: PUSH
26504: LD_INT 14
26506: ST_TO_ADDR
// vc_engine := engine_siberite ;
26507: LD_ADDR_OWVAR 39
26511: PUSH
26512: LD_INT 3
26514: ST_TO_ADDR
// vc_control := control_apeman ;
26515: LD_ADDR_OWVAR 38
26519: PUSH
26520: LD_INT 5
26522: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26523: LD_ADDR_OWVAR 40
26527: PUSH
26528: LD_INT 29
26530: ST_TO_ADDR
// un := CreateVehicle ;
26531: LD_ADDR_VAR 0 2
26535: PUSH
26536: CALL_OW 45
26540: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26541: LD_VAR 0 2
26545: PPUSH
26546: LD_INT 1
26548: PPUSH
26549: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26553: LD_INT 35
26555: PPUSH
26556: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26560: LD_VAR 0 2
26564: PPUSH
26565: LD_INT 22
26567: PUSH
26568: LD_OWVAR 2
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PPUSH
26577: CALL_OW 69
26581: PPUSH
26582: LD_VAR 0 2
26586: PPUSH
26587: CALL_OW 74
26591: PPUSH
26592: CALL_OW 115
// until IsDead ( un ) ;
26596: LD_VAR 0 2
26600: PPUSH
26601: CALL_OW 301
26605: IFFALSE 26553
// end ;
26607: PPOPN 2
26609: END
// every 0 0$1 trigger StreamModeActive and sStu do
26610: LD_EXP 39
26614: IFFALSE 26622
26616: PUSH
26617: LD_EXP 78
26621: AND
26622: IFFALSE 26638
26624: GO 26626
26626: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26627: LD_STRING displayStucuk();
26629: PPUSH
26630: CALL_OW 559
// ResetFog ;
26634: CALL_OW 335
// end ;
26638: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26639: LD_EXP 39
26643: IFFALSE 26651
26645: PUSH
26646: LD_EXP 71
26650: AND
26651: IFFALSE 26792
26653: GO 26655
26655: DISABLE
26656: LD_INT 0
26658: PPUSH
26659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26660: LD_ADDR_VAR 0 2
26664: PUSH
26665: LD_INT 22
26667: PUSH
26668: LD_OWVAR 2
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 21
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PPUSH
26691: CALL_OW 69
26695: ST_TO_ADDR
// if not tmp then
26696: LD_VAR 0 2
26700: NOT
26701: IFFALSE 26705
// exit ;
26703: GO 26792
// un := tmp [ rand ( 1 , tmp ) ] ;
26705: LD_ADDR_VAR 0 1
26709: PUSH
26710: LD_VAR 0 2
26714: PUSH
26715: LD_INT 1
26717: PPUSH
26718: LD_VAR 0 2
26722: PPUSH
26723: CALL_OW 12
26727: ARRAY
26728: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26729: LD_VAR 0 1
26733: PPUSH
26734: LD_INT 0
26736: PPUSH
26737: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26741: LD_VAR 0 1
26745: PPUSH
26746: LD_OWVAR 3
26750: PUSH
26751: LD_VAR 0 1
26755: DIFF
26756: PPUSH
26757: LD_VAR 0 1
26761: PPUSH
26762: CALL_OW 74
26766: PPUSH
26767: CALL_OW 115
// wait ( 0 0$20 ) ;
26771: LD_INT 700
26773: PPUSH
26774: CALL_OW 67
// SetSide ( un , your_side ) ;
26778: LD_VAR 0 1
26782: PPUSH
26783: LD_OWVAR 2
26787: PPUSH
26788: CALL_OW 235
// end ;
26792: PPOPN 2
26794: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26795: LD_EXP 39
26799: IFFALSE 26807
26801: PUSH
26802: LD_EXP 72
26806: AND
26807: IFFALSE 26913
26809: GO 26811
26811: DISABLE
26812: LD_INT 0
26814: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26815: LD_ADDR_VAR 0 1
26819: PUSH
26820: LD_INT 22
26822: PUSH
26823: LD_OWVAR 2
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: LD_INT 30
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 30
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: LIST
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PPUSH
26864: CALL_OW 69
26868: ST_TO_ADDR
// if not depot then
26869: LD_VAR 0 1
26873: NOT
26874: IFFALSE 26878
// exit ;
26876: GO 26913
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26878: LD_VAR 0 1
26882: PUSH
26883: LD_INT 1
26885: ARRAY
26886: PPUSH
26887: CALL_OW 250
26891: PPUSH
26892: LD_VAR 0 1
26896: PUSH
26897: LD_INT 1
26899: ARRAY
26900: PPUSH
26901: CALL_OW 251
26905: PPUSH
26906: LD_INT 70
26908: PPUSH
26909: CALL_OW 495
// end ;
26913: PPOPN 1
26915: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26916: LD_EXP 39
26920: IFFALSE 26928
26922: PUSH
26923: LD_EXP 73
26927: AND
26928: IFFALSE 27139
26930: GO 26932
26932: DISABLE
26933: LD_INT 0
26935: PPUSH
26936: PPUSH
26937: PPUSH
26938: PPUSH
26939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26940: LD_ADDR_VAR 0 5
26944: PUSH
26945: LD_INT 22
26947: PUSH
26948: LD_OWVAR 2
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 21
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PPUSH
26971: CALL_OW 69
26975: ST_TO_ADDR
// if not tmp then
26976: LD_VAR 0 5
26980: NOT
26981: IFFALSE 26985
// exit ;
26983: GO 27139
// for i in tmp do
26985: LD_ADDR_VAR 0 1
26989: PUSH
26990: LD_VAR 0 5
26994: PUSH
26995: FOR_IN
26996: IFFALSE 27137
// begin d := rand ( 0 , 5 ) ;
26998: LD_ADDR_VAR 0 4
27002: PUSH
27003: LD_INT 0
27005: PPUSH
27006: LD_INT 5
27008: PPUSH
27009: CALL_OW 12
27013: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27014: LD_ADDR_VAR 0 2
27018: PUSH
27019: LD_VAR 0 1
27023: PPUSH
27024: CALL_OW 250
27028: PPUSH
27029: LD_VAR 0 4
27033: PPUSH
27034: LD_INT 3
27036: PPUSH
27037: LD_INT 12
27039: PPUSH
27040: CALL_OW 12
27044: PPUSH
27045: CALL_OW 272
27049: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27050: LD_ADDR_VAR 0 3
27054: PUSH
27055: LD_VAR 0 1
27059: PPUSH
27060: CALL_OW 251
27064: PPUSH
27065: LD_VAR 0 4
27069: PPUSH
27070: LD_INT 3
27072: PPUSH
27073: LD_INT 12
27075: PPUSH
27076: CALL_OW 12
27080: PPUSH
27081: CALL_OW 273
27085: ST_TO_ADDR
// if ValidHex ( x , y ) then
27086: LD_VAR 0 2
27090: PPUSH
27091: LD_VAR 0 3
27095: PPUSH
27096: CALL_OW 488
27100: IFFALSE 27135
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27102: LD_VAR 0 1
27106: PPUSH
27107: LD_VAR 0 2
27111: PPUSH
27112: LD_VAR 0 3
27116: PPUSH
27117: LD_INT 3
27119: PPUSH
27120: LD_INT 6
27122: PPUSH
27123: CALL_OW 12
27127: PPUSH
27128: LD_INT 1
27130: PPUSH
27131: CALL_OW 483
// end ;
27135: GO 26995
27137: POP
27138: POP
// end ;
27139: PPOPN 5
27141: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27142: LD_EXP 39
27146: IFFALSE 27154
27148: PUSH
27149: LD_EXP 74
27153: AND
27154: IFFALSE 27248
27156: GO 27158
27158: DISABLE
27159: LD_INT 0
27161: PPUSH
27162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27163: LD_ADDR_VAR 0 2
27167: PUSH
27168: LD_INT 22
27170: PUSH
27171: LD_OWVAR 2
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 32
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 21
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: LIST
27204: PPUSH
27205: CALL_OW 69
27209: ST_TO_ADDR
// if not tmp then
27210: LD_VAR 0 2
27214: NOT
27215: IFFALSE 27219
// exit ;
27217: GO 27248
// for i in tmp do
27219: LD_ADDR_VAR 0 1
27223: PUSH
27224: LD_VAR 0 2
27228: PUSH
27229: FOR_IN
27230: IFFALSE 27246
// SetFuel ( i , 0 ) ;
27232: LD_VAR 0 1
27236: PPUSH
27237: LD_INT 0
27239: PPUSH
27240: CALL_OW 240
27244: GO 27229
27246: POP
27247: POP
// end ;
27248: PPOPN 2
27250: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27251: LD_EXP 39
27255: IFFALSE 27263
27257: PUSH
27258: LD_EXP 75
27262: AND
27263: IFFALSE 27329
27265: GO 27267
27267: DISABLE
27268: LD_INT 0
27270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27271: LD_ADDR_VAR 0 1
27275: PUSH
27276: LD_INT 22
27278: PUSH
27279: LD_OWVAR 2
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 30
27290: PUSH
27291: LD_INT 29
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PPUSH
27302: CALL_OW 69
27306: ST_TO_ADDR
// if not tmp then
27307: LD_VAR 0 1
27311: NOT
27312: IFFALSE 27316
// exit ;
27314: GO 27329
// DestroyUnit ( tmp [ 1 ] ) ;
27316: LD_VAR 0 1
27320: PUSH
27321: LD_INT 1
27323: ARRAY
27324: PPUSH
27325: CALL_OW 65
// end ;
27329: PPOPN 1
27331: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27332: LD_EXP 39
27336: IFFALSE 27344
27338: PUSH
27339: LD_EXP 77
27343: AND
27344: IFFALSE 27473
27346: GO 27348
27348: DISABLE
27349: LD_INT 0
27351: PPUSH
// begin uc_side := 0 ;
27352: LD_ADDR_OWVAR 20
27356: PUSH
27357: LD_INT 0
27359: ST_TO_ADDR
// uc_nation := nation_arabian ;
27360: LD_ADDR_OWVAR 21
27364: PUSH
27365: LD_INT 2
27367: ST_TO_ADDR
// hc_gallery :=  ;
27368: LD_ADDR_OWVAR 33
27372: PUSH
27373: LD_STRING 
27375: ST_TO_ADDR
// hc_name :=  ;
27376: LD_ADDR_OWVAR 26
27380: PUSH
27381: LD_STRING 
27383: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27384: LD_INT 1
27386: PPUSH
27387: LD_INT 11
27389: PPUSH
27390: LD_INT 10
27392: PPUSH
27393: CALL_OW 380
// un := CreateHuman ;
27397: LD_ADDR_VAR 0 1
27401: PUSH
27402: CALL_OW 44
27406: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27407: LD_VAR 0 1
27411: PPUSH
27412: LD_INT 1
27414: PPUSH
27415: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27419: LD_INT 35
27421: PPUSH
27422: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27426: LD_VAR 0 1
27430: PPUSH
27431: LD_INT 22
27433: PUSH
27434: LD_OWVAR 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PPUSH
27443: CALL_OW 69
27447: PPUSH
27448: LD_VAR 0 1
27452: PPUSH
27453: CALL_OW 74
27457: PPUSH
27458: CALL_OW 115
// until IsDead ( un ) ;
27462: LD_VAR 0 1
27466: PPUSH
27467: CALL_OW 301
27471: IFFALSE 27419
// end ;
27473: PPOPN 1
27475: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27476: LD_EXP 39
27480: IFFALSE 27488
27482: PUSH
27483: LD_EXP 79
27487: AND
27488: IFFALSE 27500
27490: GO 27492
27492: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27493: LD_STRING earthquake(getX(game), 0, 32)
27495: PPUSH
27496: CALL_OW 559
27500: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27501: LD_EXP 39
27505: IFFALSE 27513
27507: PUSH
27508: LD_EXP 80
27512: AND
27513: IFFALSE 27604
27515: GO 27517
27517: DISABLE
27518: LD_INT 0
27520: PPUSH
// begin enable ;
27521: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27522: LD_ADDR_VAR 0 1
27526: PUSH
27527: LD_INT 22
27529: PUSH
27530: LD_OWVAR 2
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 21
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 33
27551: PUSH
27552: LD_INT 3
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: LIST
27563: PPUSH
27564: CALL_OW 69
27568: ST_TO_ADDR
// if not tmp then
27569: LD_VAR 0 1
27573: NOT
27574: IFFALSE 27578
// exit ;
27576: GO 27604
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27578: LD_VAR 0 1
27582: PUSH
27583: LD_INT 1
27585: PPUSH
27586: LD_VAR 0 1
27590: PPUSH
27591: CALL_OW 12
27595: ARRAY
27596: PPUSH
27597: LD_INT 1
27599: PPUSH
27600: CALL_OW 234
// end ;
27604: PPOPN 1
27606: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27607: LD_EXP 39
27611: IFFALSE 27619
27613: PUSH
27614: LD_EXP 81
27618: AND
27619: IFFALSE 27760
27621: GO 27623
27623: DISABLE
27624: LD_INT 0
27626: PPUSH
27627: PPUSH
27628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27629: LD_ADDR_VAR 0 3
27633: PUSH
27634: LD_INT 22
27636: PUSH
27637: LD_OWVAR 2
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 25
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PPUSH
27660: CALL_OW 69
27664: ST_TO_ADDR
// if not tmp then
27665: LD_VAR 0 3
27669: NOT
27670: IFFALSE 27674
// exit ;
27672: GO 27760
// un := tmp [ rand ( 1 , tmp ) ] ;
27674: LD_ADDR_VAR 0 2
27678: PUSH
27679: LD_VAR 0 3
27683: PUSH
27684: LD_INT 1
27686: PPUSH
27687: LD_VAR 0 3
27691: PPUSH
27692: CALL_OW 12
27696: ARRAY
27697: ST_TO_ADDR
// if Crawls ( un ) then
27698: LD_VAR 0 2
27702: PPUSH
27703: CALL_OW 318
27707: IFFALSE 27718
// ComWalk ( un ) ;
27709: LD_VAR 0 2
27713: PPUSH
27714: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27718: LD_VAR 0 2
27722: PPUSH
27723: LD_INT 9
27725: PPUSH
27726: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27730: LD_INT 28
27732: PPUSH
27733: LD_OWVAR 2
27737: PPUSH
27738: LD_INT 2
27740: PPUSH
27741: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27745: LD_INT 29
27747: PPUSH
27748: LD_OWVAR 2
27752: PPUSH
27753: LD_INT 2
27755: PPUSH
27756: CALL_OW 322
// end ;
27760: PPOPN 3
27762: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27763: LD_EXP 39
27767: IFFALSE 27775
27769: PUSH
27770: LD_EXP 82
27774: AND
27775: IFFALSE 27886
27777: GO 27779
27779: DISABLE
27780: LD_INT 0
27782: PPUSH
27783: PPUSH
27784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27785: LD_ADDR_VAR 0 3
27789: PUSH
27790: LD_INT 22
27792: PUSH
27793: LD_OWVAR 2
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 25
27804: PUSH
27805: LD_INT 1
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PPUSH
27816: CALL_OW 69
27820: ST_TO_ADDR
// if not tmp then
27821: LD_VAR 0 3
27825: NOT
27826: IFFALSE 27830
// exit ;
27828: GO 27886
// un := tmp [ rand ( 1 , tmp ) ] ;
27830: LD_ADDR_VAR 0 2
27834: PUSH
27835: LD_VAR 0 3
27839: PUSH
27840: LD_INT 1
27842: PPUSH
27843: LD_VAR 0 3
27847: PPUSH
27848: CALL_OW 12
27852: ARRAY
27853: ST_TO_ADDR
// if Crawls ( un ) then
27854: LD_VAR 0 2
27858: PPUSH
27859: CALL_OW 318
27863: IFFALSE 27874
// ComWalk ( un ) ;
27865: LD_VAR 0 2
27869: PPUSH
27870: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27874: LD_VAR 0 2
27878: PPUSH
27879: LD_INT 8
27881: PPUSH
27882: CALL_OW 336
// end ;
27886: PPOPN 3
27888: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27889: LD_EXP 39
27893: IFFALSE 27901
27895: PUSH
27896: LD_EXP 83
27900: AND
27901: IFFALSE 28045
27903: GO 27905
27905: DISABLE
27906: LD_INT 0
27908: PPUSH
27909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27910: LD_ADDR_VAR 0 2
27914: PUSH
27915: LD_INT 22
27917: PUSH
27918: LD_OWVAR 2
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 21
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: LD_INT 34
27942: PUSH
27943: LD_INT 12
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 34
27952: PUSH
27953: LD_INT 51
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 34
27962: PUSH
27963: LD_INT 32
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: PPUSH
27981: CALL_OW 69
27985: ST_TO_ADDR
// if not tmp then
27986: LD_VAR 0 2
27990: NOT
27991: IFFALSE 27995
// exit ;
27993: GO 28045
// for i in tmp do
27995: LD_ADDR_VAR 0 1
27999: PUSH
28000: LD_VAR 0 2
28004: PUSH
28005: FOR_IN
28006: IFFALSE 28043
// if GetCargo ( i , mat_artifact ) = 0 then
28008: LD_VAR 0 1
28012: PPUSH
28013: LD_INT 4
28015: PPUSH
28016: CALL_OW 289
28020: PUSH
28021: LD_INT 0
28023: EQUAL
28024: IFFALSE 28041
// SetCargo ( i , mat_siberit , 100 ) ;
28026: LD_VAR 0 1
28030: PPUSH
28031: LD_INT 3
28033: PPUSH
28034: LD_INT 100
28036: PPUSH
28037: CALL_OW 290
28041: GO 28005
28043: POP
28044: POP
// end ;
28045: PPOPN 2
28047: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28048: LD_EXP 39
28052: IFFALSE 28060
28054: PUSH
28055: LD_EXP 84
28059: AND
28060: IFFALSE 28243
28062: GO 28064
28064: DISABLE
28065: LD_INT 0
28067: PPUSH
28068: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28069: LD_ADDR_VAR 0 2
28073: PUSH
28074: LD_INT 22
28076: PUSH
28077: LD_OWVAR 2
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PPUSH
28086: CALL_OW 69
28090: ST_TO_ADDR
// if not tmp then
28091: LD_VAR 0 2
28095: NOT
28096: IFFALSE 28100
// exit ;
28098: GO 28243
// for i := 1 to 2 do
28100: LD_ADDR_VAR 0 1
28104: PUSH
28105: DOUBLE
28106: LD_INT 1
28108: DEC
28109: ST_TO_ADDR
28110: LD_INT 2
28112: PUSH
28113: FOR_TO
28114: IFFALSE 28241
// begin uc_side := your_side ;
28116: LD_ADDR_OWVAR 20
28120: PUSH
28121: LD_OWVAR 2
28125: ST_TO_ADDR
// uc_nation := nation_american ;
28126: LD_ADDR_OWVAR 21
28130: PUSH
28131: LD_INT 1
28133: ST_TO_ADDR
// vc_chassis := us_morphling ;
28134: LD_ADDR_OWVAR 37
28138: PUSH
28139: LD_INT 5
28141: ST_TO_ADDR
// vc_engine := engine_siberite ;
28142: LD_ADDR_OWVAR 39
28146: PUSH
28147: LD_INT 3
28149: ST_TO_ADDR
// vc_control := control_computer ;
28150: LD_ADDR_OWVAR 38
28154: PUSH
28155: LD_INT 3
28157: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28158: LD_ADDR_OWVAR 40
28162: PUSH
28163: LD_INT 10
28165: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28166: LD_VAR 0 2
28170: PUSH
28171: LD_INT 1
28173: ARRAY
28174: PPUSH
28175: CALL_OW 310
28179: NOT
28180: IFFALSE 28227
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28182: CALL_OW 45
28186: PPUSH
28187: LD_VAR 0 2
28191: PUSH
28192: LD_INT 1
28194: ARRAY
28195: PPUSH
28196: CALL_OW 250
28200: PPUSH
28201: LD_VAR 0 2
28205: PUSH
28206: LD_INT 1
28208: ARRAY
28209: PPUSH
28210: CALL_OW 251
28214: PPUSH
28215: LD_INT 12
28217: PPUSH
28218: LD_INT 1
28220: PPUSH
28221: CALL_OW 50
28225: GO 28239
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28227: CALL_OW 45
28231: PPUSH
28232: LD_INT 1
28234: PPUSH
28235: CALL_OW 51
// end ;
28239: GO 28113
28241: POP
28242: POP
// end ;
28243: PPOPN 2
28245: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28246: LD_EXP 39
28250: IFFALSE 28258
28252: PUSH
28253: LD_EXP 85
28257: AND
28258: IFFALSE 28480
28260: GO 28262
28262: DISABLE
28263: LD_INT 0
28265: PPUSH
28266: PPUSH
28267: PPUSH
28268: PPUSH
28269: PPUSH
28270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28271: LD_ADDR_VAR 0 6
28275: PUSH
28276: LD_INT 22
28278: PUSH
28279: LD_OWVAR 2
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 21
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 3
28300: PUSH
28301: LD_INT 23
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: LIST
28319: PPUSH
28320: CALL_OW 69
28324: ST_TO_ADDR
// if not tmp then
28325: LD_VAR 0 6
28329: NOT
28330: IFFALSE 28334
// exit ;
28332: GO 28480
// s1 := rand ( 1 , 4 ) ;
28334: LD_ADDR_VAR 0 2
28338: PUSH
28339: LD_INT 1
28341: PPUSH
28342: LD_INT 4
28344: PPUSH
28345: CALL_OW 12
28349: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28350: LD_ADDR_VAR 0 4
28354: PUSH
28355: LD_VAR 0 6
28359: PUSH
28360: LD_INT 1
28362: ARRAY
28363: PPUSH
28364: LD_VAR 0 2
28368: PPUSH
28369: CALL_OW 259
28373: ST_TO_ADDR
// if s1 = 1 then
28374: LD_VAR 0 2
28378: PUSH
28379: LD_INT 1
28381: EQUAL
28382: IFFALSE 28402
// s2 := rand ( 2 , 4 ) else
28384: LD_ADDR_VAR 0 3
28388: PUSH
28389: LD_INT 2
28391: PPUSH
28392: LD_INT 4
28394: PPUSH
28395: CALL_OW 12
28399: ST_TO_ADDR
28400: GO 28410
// s2 := 1 ;
28402: LD_ADDR_VAR 0 3
28406: PUSH
28407: LD_INT 1
28409: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28410: LD_ADDR_VAR 0 5
28414: PUSH
28415: LD_VAR 0 6
28419: PUSH
28420: LD_INT 1
28422: ARRAY
28423: PPUSH
28424: LD_VAR 0 3
28428: PPUSH
28429: CALL_OW 259
28433: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28434: LD_VAR 0 6
28438: PUSH
28439: LD_INT 1
28441: ARRAY
28442: PPUSH
28443: LD_VAR 0 2
28447: PPUSH
28448: LD_VAR 0 5
28452: PPUSH
28453: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28457: LD_VAR 0 6
28461: PUSH
28462: LD_INT 1
28464: ARRAY
28465: PPUSH
28466: LD_VAR 0 3
28470: PPUSH
28471: LD_VAR 0 4
28475: PPUSH
28476: CALL_OW 237
// end ;
28480: PPOPN 6
28482: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28483: LD_EXP 39
28487: IFFALSE 28495
28489: PUSH
28490: LD_EXP 86
28494: AND
28495: IFFALSE 28574
28497: GO 28499
28499: DISABLE
28500: LD_INT 0
28502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28503: LD_ADDR_VAR 0 1
28507: PUSH
28508: LD_INT 22
28510: PUSH
28511: LD_OWVAR 2
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 30
28522: PUSH
28523: LD_INT 3
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PPUSH
28534: CALL_OW 69
28538: ST_TO_ADDR
// if not tmp then
28539: LD_VAR 0 1
28543: NOT
28544: IFFALSE 28548
// exit ;
28546: GO 28574
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28548: LD_VAR 0 1
28552: PUSH
28553: LD_INT 1
28555: PPUSH
28556: LD_VAR 0 1
28560: PPUSH
28561: CALL_OW 12
28565: ARRAY
28566: PPUSH
28567: LD_INT 1
28569: PPUSH
28570: CALL_OW 234
// end ;
28574: PPOPN 1
28576: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28577: LD_EXP 39
28581: IFFALSE 28589
28583: PUSH
28584: LD_EXP 87
28588: AND
28589: IFFALSE 28701
28591: GO 28593
28593: DISABLE
28594: LD_INT 0
28596: PPUSH
28597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28598: LD_ADDR_VAR 0 2
28602: PUSH
28603: LD_INT 22
28605: PUSH
28606: LD_OWVAR 2
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 30
28620: PUSH
28621: LD_INT 27
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 30
28630: PUSH
28631: LD_INT 26
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 30
28640: PUSH
28641: LD_INT 28
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PPUSH
28658: CALL_OW 69
28662: ST_TO_ADDR
// if not tmp then
28663: LD_VAR 0 2
28667: NOT
28668: IFFALSE 28672
// exit ;
28670: GO 28701
// for i in tmp do
28672: LD_ADDR_VAR 0 1
28676: PUSH
28677: LD_VAR 0 2
28681: PUSH
28682: FOR_IN
28683: IFFALSE 28699
// SetLives ( i , 1 ) ;
28685: LD_VAR 0 1
28689: PPUSH
28690: LD_INT 1
28692: PPUSH
28693: CALL_OW 234
28697: GO 28682
28699: POP
28700: POP
// end ;
28701: PPOPN 2
28703: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28704: LD_EXP 39
28708: IFFALSE 28716
28710: PUSH
28711: LD_EXP 88
28715: AND
28716: IFFALSE 29003
28718: GO 28720
28720: DISABLE
28721: LD_INT 0
28723: PPUSH
28724: PPUSH
28725: PPUSH
// begin i := rand ( 1 , 7 ) ;
28726: LD_ADDR_VAR 0 1
28730: PUSH
28731: LD_INT 1
28733: PPUSH
28734: LD_INT 7
28736: PPUSH
28737: CALL_OW 12
28741: ST_TO_ADDR
// case i of 1 :
28742: LD_VAR 0 1
28746: PUSH
28747: LD_INT 1
28749: DOUBLE
28750: EQUAL
28751: IFTRUE 28755
28753: GO 28765
28755: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28756: LD_STRING earthquake(getX(game), 0, 32)
28758: PPUSH
28759: CALL_OW 559
28763: GO 29003
28765: LD_INT 2
28767: DOUBLE
28768: EQUAL
28769: IFTRUE 28773
28771: GO 28787
28773: POP
// begin ToLua ( displayStucuk(); ) ;
28774: LD_STRING displayStucuk();
28776: PPUSH
28777: CALL_OW 559
// ResetFog ;
28781: CALL_OW 335
// end ; 3 :
28785: GO 29003
28787: LD_INT 3
28789: DOUBLE
28790: EQUAL
28791: IFTRUE 28795
28793: GO 28899
28795: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28796: LD_ADDR_VAR 0 2
28800: PUSH
28801: LD_INT 22
28803: PUSH
28804: LD_OWVAR 2
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 25
28815: PUSH
28816: LD_INT 1
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PPUSH
28827: CALL_OW 69
28831: ST_TO_ADDR
// if not tmp then
28832: LD_VAR 0 2
28836: NOT
28837: IFFALSE 28841
// exit ;
28839: GO 29003
// un := tmp [ rand ( 1 , tmp ) ] ;
28841: LD_ADDR_VAR 0 3
28845: PUSH
28846: LD_VAR 0 2
28850: PUSH
28851: LD_INT 1
28853: PPUSH
28854: LD_VAR 0 2
28858: PPUSH
28859: CALL_OW 12
28863: ARRAY
28864: ST_TO_ADDR
// if Crawls ( un ) then
28865: LD_VAR 0 3
28869: PPUSH
28870: CALL_OW 318
28874: IFFALSE 28885
// ComWalk ( un ) ;
28876: LD_VAR 0 3
28880: PPUSH
28881: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28885: LD_VAR 0 3
28889: PPUSH
28890: LD_INT 8
28892: PPUSH
28893: CALL_OW 336
// end ; 4 :
28897: GO 29003
28899: LD_INT 4
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28981
28907: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28908: LD_ADDR_VAR 0 2
28912: PUSH
28913: LD_INT 22
28915: PUSH
28916: LD_OWVAR 2
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 30
28927: PUSH
28928: LD_INT 29
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PPUSH
28939: CALL_OW 69
28943: ST_TO_ADDR
// if not tmp then
28944: LD_VAR 0 2
28948: NOT
28949: IFFALSE 28953
// exit ;
28951: GO 29003
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28953: LD_VAR 0 2
28957: PUSH
28958: LD_INT 1
28960: ARRAY
28961: PPUSH
28962: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28966: LD_VAR 0 2
28970: PUSH
28971: LD_INT 1
28973: ARRAY
28974: PPUSH
28975: CALL_OW 65
// end ; 5 .. 7 :
28979: GO 29003
28981: LD_INT 5
28983: DOUBLE
28984: GREATEREQUAL
28985: IFFALSE 28993
28987: LD_INT 7
28989: DOUBLE
28990: LESSEQUAL
28991: IFTRUE 28995
28993: GO 29002
28995: POP
// StreamSibBomb ; end ;
28996: CALL 25184 0 0
29000: GO 29003
29002: POP
// end ;
29003: PPOPN 3
29005: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29006: LD_EXP 39
29010: IFFALSE 29018
29012: PUSH
29013: LD_EXP 89
29017: AND
29018: IFFALSE 29174
29020: GO 29022
29022: DISABLE
29023: LD_INT 0
29025: PPUSH
29026: PPUSH
29027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29028: LD_ADDR_VAR 0 2
29032: PUSH
29033: LD_INT 81
29035: PUSH
29036: LD_OWVAR 2
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 2
29047: PUSH
29048: LD_INT 21
29050: PUSH
29051: LD_INT 1
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 21
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PPUSH
29077: CALL_OW 69
29081: ST_TO_ADDR
// if not tmp then
29082: LD_VAR 0 2
29086: NOT
29087: IFFALSE 29091
// exit ;
29089: GO 29174
// p := 0 ;
29091: LD_ADDR_VAR 0 3
29095: PUSH
29096: LD_INT 0
29098: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29099: LD_INT 35
29101: PPUSH
29102: CALL_OW 67
// p := p + 1 ;
29106: LD_ADDR_VAR 0 3
29110: PUSH
29111: LD_VAR 0 3
29115: PUSH
29116: LD_INT 1
29118: PLUS
29119: ST_TO_ADDR
// for i in tmp do
29120: LD_ADDR_VAR 0 1
29124: PUSH
29125: LD_VAR 0 2
29129: PUSH
29130: FOR_IN
29131: IFFALSE 29162
// if GetLives ( i ) < 1000 then
29133: LD_VAR 0 1
29137: PPUSH
29138: CALL_OW 256
29142: PUSH
29143: LD_INT 1000
29145: LESS
29146: IFFALSE 29160
// SetLives ( i , 1000 ) ;
29148: LD_VAR 0 1
29152: PPUSH
29153: LD_INT 1000
29155: PPUSH
29156: CALL_OW 234
29160: GO 29130
29162: POP
29163: POP
// until p > 20 ;
29164: LD_VAR 0 3
29168: PUSH
29169: LD_INT 20
29171: GREATER
29172: IFFALSE 29099
// end ;
29174: PPOPN 3
29176: END
// every 0 0$1 trigger StreamModeActive and sTime do
29177: LD_EXP 39
29181: IFFALSE 29189
29183: PUSH
29184: LD_EXP 90
29188: AND
29189: IFFALSE 29224
29191: GO 29193
29193: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29194: LD_INT 28
29196: PPUSH
29197: LD_OWVAR 2
29201: PPUSH
29202: LD_INT 2
29204: PPUSH
29205: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29209: LD_INT 30
29211: PPUSH
29212: LD_OWVAR 2
29216: PPUSH
29217: LD_INT 2
29219: PPUSH
29220: CALL_OW 322
// end ;
29224: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29225: LD_EXP 39
29229: IFFALSE 29237
29231: PUSH
29232: LD_EXP 91
29236: AND
29237: IFFALSE 29358
29239: GO 29241
29241: DISABLE
29242: LD_INT 0
29244: PPUSH
29245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29246: LD_ADDR_VAR 0 2
29250: PUSH
29251: LD_INT 22
29253: PUSH
29254: LD_OWVAR 2
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 21
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 3
29275: PUSH
29276: LD_INT 23
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: PPUSH
29295: CALL_OW 69
29299: ST_TO_ADDR
// if not tmp then
29300: LD_VAR 0 2
29304: NOT
29305: IFFALSE 29309
// exit ;
29307: GO 29358
// for i in tmp do
29309: LD_ADDR_VAR 0 1
29313: PUSH
29314: LD_VAR 0 2
29318: PUSH
29319: FOR_IN
29320: IFFALSE 29356
// begin if Crawls ( i ) then
29322: LD_VAR 0 1
29326: PPUSH
29327: CALL_OW 318
29331: IFFALSE 29342
// ComWalk ( i ) ;
29333: LD_VAR 0 1
29337: PPUSH
29338: CALL_OW 138
// SetClass ( i , 2 ) ;
29342: LD_VAR 0 1
29346: PPUSH
29347: LD_INT 2
29349: PPUSH
29350: CALL_OW 336
// end ;
29354: GO 29319
29356: POP
29357: POP
// end ;
29358: PPOPN 2
29360: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29361: LD_EXP 39
29365: IFFALSE 29373
29367: PUSH
29368: LD_EXP 92
29372: AND
29373: IFFALSE 29663
29375: GO 29377
29377: DISABLE
29378: LD_INT 0
29380: PPUSH
29381: PPUSH
29382: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29383: LD_OWVAR 2
29387: PPUSH
29388: LD_INT 9
29390: PPUSH
29391: LD_INT 1
29393: PPUSH
29394: LD_INT 1
29396: PPUSH
29397: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29401: LD_INT 9
29403: PPUSH
29404: LD_OWVAR 2
29408: PPUSH
29409: CALL_OW 343
// uc_side := 9 ;
29413: LD_ADDR_OWVAR 20
29417: PUSH
29418: LD_INT 9
29420: ST_TO_ADDR
// uc_nation := 2 ;
29421: LD_ADDR_OWVAR 21
29425: PUSH
29426: LD_INT 2
29428: ST_TO_ADDR
// hc_name := Dark Warrior ;
29429: LD_ADDR_OWVAR 26
29433: PUSH
29434: LD_STRING Dark Warrior
29436: ST_TO_ADDR
// hc_gallery :=  ;
29437: LD_ADDR_OWVAR 33
29441: PUSH
29442: LD_STRING 
29444: ST_TO_ADDR
// hc_noskilllimit := true ;
29445: LD_ADDR_OWVAR 76
29449: PUSH
29450: LD_INT 1
29452: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29453: LD_ADDR_OWVAR 31
29457: PUSH
29458: LD_INT 30
29460: PUSH
29461: LD_INT 30
29463: PUSH
29464: LD_INT 30
29466: PUSH
29467: LD_INT 30
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: ST_TO_ADDR
// un := CreateHuman ;
29476: LD_ADDR_VAR 0 3
29480: PUSH
29481: CALL_OW 44
29485: ST_TO_ADDR
// hc_noskilllimit := false ;
29486: LD_ADDR_OWVAR 76
29490: PUSH
29491: LD_INT 0
29493: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29494: LD_VAR 0 3
29498: PPUSH
29499: LD_INT 1
29501: PPUSH
29502: CALL_OW 51
// ToLua ( playRanger() ) ;
29506: LD_STRING playRanger()
29508: PPUSH
29509: CALL_OW 559
// p := 0 ;
29513: LD_ADDR_VAR 0 2
29517: PUSH
29518: LD_INT 0
29520: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29521: LD_INT 35
29523: PPUSH
29524: CALL_OW 67
// p := p + 1 ;
29528: LD_ADDR_VAR 0 2
29532: PUSH
29533: LD_VAR 0 2
29537: PUSH
29538: LD_INT 1
29540: PLUS
29541: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29542: LD_VAR 0 3
29546: PPUSH
29547: CALL_OW 256
29551: PUSH
29552: LD_INT 1000
29554: LESS
29555: IFFALSE 29569
// SetLives ( un , 1000 ) ;
29557: LD_VAR 0 3
29561: PPUSH
29562: LD_INT 1000
29564: PPUSH
29565: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29569: LD_VAR 0 3
29573: PPUSH
29574: LD_INT 81
29576: PUSH
29577: LD_OWVAR 2
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 91
29588: PUSH
29589: LD_VAR 0 3
29593: PUSH
29594: LD_INT 30
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: LIST
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PPUSH
29606: CALL_OW 69
29610: PPUSH
29611: LD_VAR 0 3
29615: PPUSH
29616: CALL_OW 74
29620: PPUSH
29621: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29625: LD_VAR 0 2
29629: PUSH
29630: LD_INT 80
29632: GREATER
29633: IFTRUE 29646
29635: PUSH
29636: LD_VAR 0 3
29640: PPUSH
29641: CALL_OW 301
29645: OR
29646: IFFALSE 29521
// if un then
29648: LD_VAR 0 3
29652: IFFALSE 29663
// RemoveUnit ( un ) ;
29654: LD_VAR 0 3
29658: PPUSH
29659: CALL_OW 64
// end ;
29663: PPOPN 3
29665: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29666: LD_EXP 93
29670: IFFALSE 29786
29672: GO 29674
29674: DISABLE
29675: LD_INT 0
29677: PPUSH
29678: PPUSH
29679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29680: LD_ADDR_VAR 0 2
29684: PUSH
29685: LD_INT 81
29687: PUSH
29688: LD_OWVAR 2
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 21
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PPUSH
29711: CALL_OW 69
29715: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29716: LD_STRING playComputer()
29718: PPUSH
29719: CALL_OW 559
// if not tmp then
29723: LD_VAR 0 2
29727: NOT
29728: IFFALSE 29732
// exit ;
29730: GO 29786
// for i in tmp do
29732: LD_ADDR_VAR 0 1
29736: PUSH
29737: LD_VAR 0 2
29741: PUSH
29742: FOR_IN
29743: IFFALSE 29784
// for j := 1 to 4 do
29745: LD_ADDR_VAR 0 3
29749: PUSH
29750: DOUBLE
29751: LD_INT 1
29753: DEC
29754: ST_TO_ADDR
29755: LD_INT 4
29757: PUSH
29758: FOR_TO
29759: IFFALSE 29780
// SetSkill ( i , j , 10 ) ;
29761: LD_VAR 0 1
29765: PPUSH
29766: LD_VAR 0 3
29770: PPUSH
29771: LD_INT 10
29773: PPUSH
29774: CALL_OW 237
29778: GO 29758
29780: POP
29781: POP
29782: GO 29742
29784: POP
29785: POP
// end ;
29786: PPOPN 3
29788: END
// every 0 0$1 trigger s30 do var i , tmp ;
29789: LD_EXP 94
29793: IFFALSE 29862
29795: GO 29797
29797: DISABLE
29798: LD_INT 0
29800: PPUSH
29801: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29802: LD_ADDR_VAR 0 2
29806: PUSH
29807: LD_INT 22
29809: PUSH
29810: LD_OWVAR 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PPUSH
29819: CALL_OW 69
29823: ST_TO_ADDR
// if not tmp then
29824: LD_VAR 0 2
29828: NOT
29829: IFFALSE 29833
// exit ;
29831: GO 29862
// for i in tmp do
29833: LD_ADDR_VAR 0 1
29837: PUSH
29838: LD_VAR 0 2
29842: PUSH
29843: FOR_IN
29844: IFFALSE 29860
// SetLives ( i , 300 ) ;
29846: LD_VAR 0 1
29850: PPUSH
29851: LD_INT 300
29853: PPUSH
29854: CALL_OW 234
29858: GO 29843
29860: POP
29861: POP
// end ;
29862: PPOPN 2
29864: END
// every 0 0$1 trigger s60 do var i , tmp ;
29865: LD_EXP 95
29869: IFFALSE 29938
29871: GO 29873
29873: DISABLE
29874: LD_INT 0
29876: PPUSH
29877: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29878: LD_ADDR_VAR 0 2
29882: PUSH
29883: LD_INT 22
29885: PUSH
29886: LD_OWVAR 2
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PPUSH
29895: CALL_OW 69
29899: ST_TO_ADDR
// if not tmp then
29900: LD_VAR 0 2
29904: NOT
29905: IFFALSE 29909
// exit ;
29907: GO 29938
// for i in tmp do
29909: LD_ADDR_VAR 0 1
29913: PUSH
29914: LD_VAR 0 2
29918: PUSH
29919: FOR_IN
29920: IFFALSE 29936
// SetLives ( i , 600 ) ;
29922: LD_VAR 0 1
29926: PPUSH
29927: LD_INT 600
29929: PPUSH
29930: CALL_OW 234
29934: GO 29919
29936: POP
29937: POP
// end ;
29938: PPOPN 2
29940: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29941: LD_INT 0
29943: PPUSH
// case cmd of 301 :
29944: LD_VAR 0 1
29948: PUSH
29949: LD_INT 301
29951: DOUBLE
29952: EQUAL
29953: IFTRUE 29957
29955: GO 29989
29957: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29958: LD_VAR 0 6
29962: PPUSH
29963: LD_VAR 0 7
29967: PPUSH
29968: LD_VAR 0 8
29972: PPUSH
29973: LD_VAR 0 4
29977: PPUSH
29978: LD_VAR 0 5
29982: PPUSH
29983: CALL 31202 0 5
29987: GO 30110
29989: LD_INT 302
29991: DOUBLE
29992: EQUAL
29993: IFTRUE 29997
29995: GO 30034
29997: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29998: LD_VAR 0 6
30002: PPUSH
30003: LD_VAR 0 7
30007: PPUSH
30008: LD_VAR 0 8
30012: PPUSH
30013: LD_VAR 0 9
30017: PPUSH
30018: LD_VAR 0 4
30022: PPUSH
30023: LD_VAR 0 5
30027: PPUSH
30028: CALL 31293 0 6
30032: GO 30110
30034: LD_INT 303
30036: DOUBLE
30037: EQUAL
30038: IFTRUE 30042
30040: GO 30079
30042: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30043: LD_VAR 0 6
30047: PPUSH
30048: LD_VAR 0 7
30052: PPUSH
30053: LD_VAR 0 8
30057: PPUSH
30058: LD_VAR 0 9
30062: PPUSH
30063: LD_VAR 0 4
30067: PPUSH
30068: LD_VAR 0 5
30072: PPUSH
30073: CALL 30115 0 6
30077: GO 30110
30079: LD_INT 304
30081: DOUBLE
30082: EQUAL
30083: IFTRUE 30087
30085: GO 30109
30087: POP
// hHackTeleport ( unit , x , y ) ; end ;
30088: LD_VAR 0 2
30092: PPUSH
30093: LD_VAR 0 4
30097: PPUSH
30098: LD_VAR 0 5
30102: PPUSH
30103: CALL 31886 0 3
30107: GO 30110
30109: POP
// end ;
30110: LD_VAR 0 12
30114: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30115: LD_INT 0
30117: PPUSH
30118: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30119: LD_VAR 0 1
30123: PUSH
30124: LD_INT 1
30126: LESS
30127: IFTRUE 30139
30129: PUSH
30130: LD_VAR 0 1
30134: PUSH
30135: LD_INT 3
30137: GREATER
30138: OR
30139: IFTRUE 30157
30141: PUSH
30142: LD_VAR 0 5
30146: PPUSH
30147: LD_VAR 0 6
30151: PPUSH
30152: CALL_OW 428
30156: OR
30157: IFFALSE 30161
// exit ;
30159: GO 30889
// uc_side := your_side ;
30161: LD_ADDR_OWVAR 20
30165: PUSH
30166: LD_OWVAR 2
30170: ST_TO_ADDR
// uc_nation := nation ;
30171: LD_ADDR_OWVAR 21
30175: PUSH
30176: LD_VAR 0 1
30180: ST_TO_ADDR
// bc_level = 1 ;
30181: LD_ADDR_OWVAR 43
30185: PUSH
30186: LD_INT 1
30188: ST_TO_ADDR
// case btype of 1 :
30189: LD_VAR 0 2
30193: PUSH
30194: LD_INT 1
30196: DOUBLE
30197: EQUAL
30198: IFTRUE 30202
30200: GO 30213
30202: POP
// bc_type := b_depot ; 2 :
30203: LD_ADDR_OWVAR 42
30207: PUSH
30208: LD_INT 0
30210: ST_TO_ADDR
30211: GO 30833
30213: LD_INT 2
30215: DOUBLE
30216: EQUAL
30217: IFTRUE 30221
30219: GO 30232
30221: POP
// bc_type := b_warehouse ; 3 :
30222: LD_ADDR_OWVAR 42
30226: PUSH
30227: LD_INT 1
30229: ST_TO_ADDR
30230: GO 30833
30232: LD_INT 3
30234: DOUBLE
30235: EQUAL
30236: IFTRUE 30240
30238: GO 30251
30240: POP
// bc_type := b_lab ; 4 .. 9 :
30241: LD_ADDR_OWVAR 42
30245: PUSH
30246: LD_INT 6
30248: ST_TO_ADDR
30249: GO 30833
30251: LD_INT 4
30253: DOUBLE
30254: GREATEREQUAL
30255: IFFALSE 30263
30257: LD_INT 9
30259: DOUBLE
30260: LESSEQUAL
30261: IFTRUE 30265
30263: GO 30325
30265: POP
// begin bc_type := b_lab_half ;
30266: LD_ADDR_OWVAR 42
30270: PUSH
30271: LD_INT 7
30273: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30274: LD_ADDR_OWVAR 44
30278: PUSH
30279: LD_INT 10
30281: PUSH
30282: LD_INT 11
30284: PUSH
30285: LD_INT 12
30287: PUSH
30288: LD_INT 15
30290: PUSH
30291: LD_INT 14
30293: PUSH
30294: LD_INT 13
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: PUSH
30305: LD_VAR 0 2
30309: PUSH
30310: LD_INT 3
30312: MINUS
30313: ARRAY
30314: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30315: LD_ADDR_OWVAR 45
30319: PUSH
30320: LD_INT 9
30322: ST_TO_ADDR
// end ; 10 .. 13 :
30323: GO 30833
30325: LD_INT 10
30327: DOUBLE
30328: GREATEREQUAL
30329: IFFALSE 30337
30331: LD_INT 13
30333: DOUBLE
30334: LESSEQUAL
30335: IFTRUE 30339
30337: GO 30416
30339: POP
// begin bc_type := b_lab_full ;
30340: LD_ADDR_OWVAR 42
30344: PUSH
30345: LD_INT 8
30347: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30348: LD_ADDR_OWVAR 44
30352: PUSH
30353: LD_INT 10
30355: PUSH
30356: LD_INT 12
30358: PUSH
30359: LD_INT 14
30361: PUSH
30362: LD_INT 13
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: PUSH
30371: LD_VAR 0 2
30375: PUSH
30376: LD_INT 9
30378: MINUS
30379: ARRAY
30380: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30381: LD_ADDR_OWVAR 45
30385: PUSH
30386: LD_INT 11
30388: PUSH
30389: LD_INT 15
30391: PUSH
30392: LD_INT 12
30394: PUSH
30395: LD_INT 15
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: PUSH
30404: LD_VAR 0 2
30408: PUSH
30409: LD_INT 9
30411: MINUS
30412: ARRAY
30413: ST_TO_ADDR
// end ; 14 :
30414: GO 30833
30416: LD_INT 14
30418: DOUBLE
30419: EQUAL
30420: IFTRUE 30424
30422: GO 30435
30424: POP
// bc_type := b_workshop ; 15 :
30425: LD_ADDR_OWVAR 42
30429: PUSH
30430: LD_INT 2
30432: ST_TO_ADDR
30433: GO 30833
30435: LD_INT 15
30437: DOUBLE
30438: EQUAL
30439: IFTRUE 30443
30441: GO 30454
30443: POP
// bc_type := b_factory ; 16 :
30444: LD_ADDR_OWVAR 42
30448: PUSH
30449: LD_INT 3
30451: ST_TO_ADDR
30452: GO 30833
30454: LD_INT 16
30456: DOUBLE
30457: EQUAL
30458: IFTRUE 30462
30460: GO 30473
30462: POP
// bc_type := b_ext_gun ; 17 :
30463: LD_ADDR_OWVAR 42
30467: PUSH
30468: LD_INT 17
30470: ST_TO_ADDR
30471: GO 30833
30473: LD_INT 17
30475: DOUBLE
30476: EQUAL
30477: IFTRUE 30481
30479: GO 30509
30481: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30482: LD_ADDR_OWVAR 42
30486: PUSH
30487: LD_INT 19
30489: PUSH
30490: LD_INT 23
30492: PUSH
30493: LD_INT 19
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: LIST
30500: PUSH
30501: LD_VAR 0 1
30505: ARRAY
30506: ST_TO_ADDR
30507: GO 30833
30509: LD_INT 18
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30528
30517: POP
// bc_type := b_ext_radar ; 19 :
30518: LD_ADDR_OWVAR 42
30522: PUSH
30523: LD_INT 20
30525: ST_TO_ADDR
30526: GO 30833
30528: LD_INT 19
30530: DOUBLE
30531: EQUAL
30532: IFTRUE 30536
30534: GO 30547
30536: POP
// bc_type := b_ext_radio ; 20 :
30537: LD_ADDR_OWVAR 42
30541: PUSH
30542: LD_INT 22
30544: ST_TO_ADDR
30545: GO 30833
30547: LD_INT 20
30549: DOUBLE
30550: EQUAL
30551: IFTRUE 30555
30553: GO 30566
30555: POP
// bc_type := b_ext_siberium ; 21 :
30556: LD_ADDR_OWVAR 42
30560: PUSH
30561: LD_INT 21
30563: ST_TO_ADDR
30564: GO 30833
30566: LD_INT 21
30568: DOUBLE
30569: EQUAL
30570: IFTRUE 30574
30572: GO 30585
30574: POP
// bc_type := b_ext_computer ; 22 :
30575: LD_ADDR_OWVAR 42
30579: PUSH
30580: LD_INT 24
30582: ST_TO_ADDR
30583: GO 30833
30585: LD_INT 22
30587: DOUBLE
30588: EQUAL
30589: IFTRUE 30593
30591: GO 30604
30593: POP
// bc_type := b_ext_track ; 23 :
30594: LD_ADDR_OWVAR 42
30598: PUSH
30599: LD_INT 16
30601: ST_TO_ADDR
30602: GO 30833
30604: LD_INT 23
30606: DOUBLE
30607: EQUAL
30608: IFTRUE 30612
30610: GO 30623
30612: POP
// bc_type := b_ext_laser ; 24 :
30613: LD_ADDR_OWVAR 42
30617: PUSH
30618: LD_INT 25
30620: ST_TO_ADDR
30621: GO 30833
30623: LD_INT 24
30625: DOUBLE
30626: EQUAL
30627: IFTRUE 30631
30629: GO 30642
30631: POP
// bc_type := b_control_tower ; 25 :
30632: LD_ADDR_OWVAR 42
30636: PUSH
30637: LD_INT 36
30639: ST_TO_ADDR
30640: GO 30833
30642: LD_INT 25
30644: DOUBLE
30645: EQUAL
30646: IFTRUE 30650
30648: GO 30661
30650: POP
// bc_type := b_breastwork ; 26 :
30651: LD_ADDR_OWVAR 42
30655: PUSH
30656: LD_INT 31
30658: ST_TO_ADDR
30659: GO 30833
30661: LD_INT 26
30663: DOUBLE
30664: EQUAL
30665: IFTRUE 30669
30667: GO 30680
30669: POP
// bc_type := b_bunker ; 27 :
30670: LD_ADDR_OWVAR 42
30674: PUSH
30675: LD_INT 32
30677: ST_TO_ADDR
30678: GO 30833
30680: LD_INT 27
30682: DOUBLE
30683: EQUAL
30684: IFTRUE 30688
30686: GO 30699
30688: POP
// bc_type := b_turret ; 28 :
30689: LD_ADDR_OWVAR 42
30693: PUSH
30694: LD_INT 33
30696: ST_TO_ADDR
30697: GO 30833
30699: LD_INT 28
30701: DOUBLE
30702: EQUAL
30703: IFTRUE 30707
30705: GO 30718
30707: POP
// bc_type := b_armoury ; 29 :
30708: LD_ADDR_OWVAR 42
30712: PUSH
30713: LD_INT 4
30715: ST_TO_ADDR
30716: GO 30833
30718: LD_INT 29
30720: DOUBLE
30721: EQUAL
30722: IFTRUE 30726
30724: GO 30737
30726: POP
// bc_type := b_barracks ; 30 :
30727: LD_ADDR_OWVAR 42
30731: PUSH
30732: LD_INT 5
30734: ST_TO_ADDR
30735: GO 30833
30737: LD_INT 30
30739: DOUBLE
30740: EQUAL
30741: IFTRUE 30745
30743: GO 30756
30745: POP
// bc_type := b_solar_power ; 31 :
30746: LD_ADDR_OWVAR 42
30750: PUSH
30751: LD_INT 27
30753: ST_TO_ADDR
30754: GO 30833
30756: LD_INT 31
30758: DOUBLE
30759: EQUAL
30760: IFTRUE 30764
30762: GO 30775
30764: POP
// bc_type := b_oil_power ; 32 :
30765: LD_ADDR_OWVAR 42
30769: PUSH
30770: LD_INT 26
30772: ST_TO_ADDR
30773: GO 30833
30775: LD_INT 32
30777: DOUBLE
30778: EQUAL
30779: IFTRUE 30783
30781: GO 30794
30783: POP
// bc_type := b_siberite_power ; 33 :
30784: LD_ADDR_OWVAR 42
30788: PUSH
30789: LD_INT 28
30791: ST_TO_ADDR
30792: GO 30833
30794: LD_INT 33
30796: DOUBLE
30797: EQUAL
30798: IFTRUE 30802
30800: GO 30813
30802: POP
// bc_type := b_oil_mine ; 34 :
30803: LD_ADDR_OWVAR 42
30807: PUSH
30808: LD_INT 29
30810: ST_TO_ADDR
30811: GO 30833
30813: LD_INT 34
30815: DOUBLE
30816: EQUAL
30817: IFTRUE 30821
30819: GO 30832
30821: POP
// bc_type := b_siberite_mine ; end ;
30822: LD_ADDR_OWVAR 42
30826: PUSH
30827: LD_INT 30
30829: ST_TO_ADDR
30830: GO 30833
30832: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30833: LD_ADDR_VAR 0 8
30837: PUSH
30838: LD_VAR 0 5
30842: PPUSH
30843: LD_VAR 0 6
30847: PPUSH
30848: LD_VAR 0 3
30852: PPUSH
30853: CALL_OW 47
30857: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30858: LD_OWVAR 42
30862: PUSH
30863: LD_INT 32
30865: PUSH
30866: LD_INT 33
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: IN
30873: IFFALSE 30889
// PlaceWeaponTurret ( b , weapon ) ;
30875: LD_VAR 0 8
30879: PPUSH
30880: LD_VAR 0 4
30884: PPUSH
30885: CALL_OW 431
// end ;
30889: LD_VAR 0 7
30893: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30894: LD_INT 0
30896: PPUSH
30897: PPUSH
30898: PPUSH
30899: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30900: LD_ADDR_VAR 0 4
30904: PUSH
30905: LD_INT 22
30907: PUSH
30908: LD_OWVAR 2
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 2
30919: PUSH
30920: LD_INT 30
30922: PUSH
30923: LD_INT 0
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 30
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PPUSH
30949: CALL_OW 69
30953: ST_TO_ADDR
// if not tmp then
30954: LD_VAR 0 4
30958: NOT
30959: IFFALSE 30963
// exit ;
30961: GO 31022
// for i in tmp do
30963: LD_ADDR_VAR 0 2
30967: PUSH
30968: LD_VAR 0 4
30972: PUSH
30973: FOR_IN
30974: IFFALSE 31020
// for j = 1 to 3 do
30976: LD_ADDR_VAR 0 3
30980: PUSH
30981: DOUBLE
30982: LD_INT 1
30984: DEC
30985: ST_TO_ADDR
30986: LD_INT 3
30988: PUSH
30989: FOR_TO
30990: IFFALSE 31016
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30992: LD_VAR 0 2
30996: PPUSH
30997: CALL_OW 274
31001: PPUSH
31002: LD_VAR 0 3
31006: PPUSH
31007: LD_INT 99999
31009: PPUSH
31010: CALL_OW 277
31014: GO 30989
31016: POP
31017: POP
31018: GO 30973
31020: POP
31021: POP
// end ;
31022: LD_VAR 0 1
31026: RET
// export function hHackSetLevel10 ; var i , j ; begin
31027: LD_INT 0
31029: PPUSH
31030: PPUSH
31031: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31032: LD_ADDR_VAR 0 2
31036: PUSH
31037: LD_INT 21
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PPUSH
31047: CALL_OW 69
31051: PUSH
31052: FOR_IN
31053: IFFALSE 31105
// if IsSelected ( i ) then
31055: LD_VAR 0 2
31059: PPUSH
31060: CALL_OW 306
31064: IFFALSE 31103
// begin for j := 1 to 4 do
31066: LD_ADDR_VAR 0 3
31070: PUSH
31071: DOUBLE
31072: LD_INT 1
31074: DEC
31075: ST_TO_ADDR
31076: LD_INT 4
31078: PUSH
31079: FOR_TO
31080: IFFALSE 31101
// SetSkill ( i , j , 10 ) ;
31082: LD_VAR 0 2
31086: PPUSH
31087: LD_VAR 0 3
31091: PPUSH
31092: LD_INT 10
31094: PPUSH
31095: CALL_OW 237
31099: GO 31079
31101: POP
31102: POP
// end ;
31103: GO 31052
31105: POP
31106: POP
// end ;
31107: LD_VAR 0 1
31111: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31112: LD_INT 0
31114: PPUSH
31115: PPUSH
31116: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31117: LD_ADDR_VAR 0 2
31121: PUSH
31122: LD_INT 22
31124: PUSH
31125: LD_OWVAR 2
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 21
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PPUSH
31148: CALL_OW 69
31152: PUSH
31153: FOR_IN
31154: IFFALSE 31195
// begin for j := 1 to 4 do
31156: LD_ADDR_VAR 0 3
31160: PUSH
31161: DOUBLE
31162: LD_INT 1
31164: DEC
31165: ST_TO_ADDR
31166: LD_INT 4
31168: PUSH
31169: FOR_TO
31170: IFFALSE 31191
// SetSkill ( i , j , 10 ) ;
31172: LD_VAR 0 2
31176: PPUSH
31177: LD_VAR 0 3
31181: PPUSH
31182: LD_INT 10
31184: PPUSH
31185: CALL_OW 237
31189: GO 31169
31191: POP
31192: POP
// end ;
31193: GO 31153
31195: POP
31196: POP
// end ;
31197: LD_VAR 0 1
31201: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31202: LD_INT 0
31204: PPUSH
// uc_side := your_side ;
31205: LD_ADDR_OWVAR 20
31209: PUSH
31210: LD_OWVAR 2
31214: ST_TO_ADDR
// uc_nation := nation ;
31215: LD_ADDR_OWVAR 21
31219: PUSH
31220: LD_VAR 0 1
31224: ST_TO_ADDR
// InitHc ;
31225: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31229: LD_INT 0
31231: PPUSH
31232: LD_VAR 0 2
31236: PPUSH
31237: LD_VAR 0 3
31241: PPUSH
31242: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31246: LD_VAR 0 4
31250: PPUSH
31251: LD_VAR 0 5
31255: PPUSH
31256: CALL_OW 428
31260: PUSH
31261: LD_INT 0
31263: EQUAL
31264: IFFALSE 31288
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31266: CALL_OW 44
31270: PPUSH
31271: LD_VAR 0 4
31275: PPUSH
31276: LD_VAR 0 5
31280: PPUSH
31281: LD_INT 1
31283: PPUSH
31284: CALL_OW 48
// end ;
31288: LD_VAR 0 6
31292: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31293: LD_INT 0
31295: PPUSH
31296: PPUSH
// uc_side := your_side ;
31297: LD_ADDR_OWVAR 20
31301: PUSH
31302: LD_OWVAR 2
31306: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31307: LD_VAR 0 1
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: LD_INT 3
31320: PUSH
31321: LD_INT 4
31323: PUSH
31324: LD_INT 5
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: IN
31334: IFFALSE 31346
// uc_nation := nation_american else
31336: LD_ADDR_OWVAR 21
31340: PUSH
31341: LD_INT 1
31343: ST_TO_ADDR
31344: GO 31389
// if chassis in [ 11 , 12 , 13 , 14 ] then
31346: LD_VAR 0 1
31350: PUSH
31351: LD_INT 11
31353: PUSH
31354: LD_INT 12
31356: PUSH
31357: LD_INT 13
31359: PUSH
31360: LD_INT 14
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: IN
31369: IFFALSE 31381
// uc_nation := nation_arabian else
31371: LD_ADDR_OWVAR 21
31375: PUSH
31376: LD_INT 2
31378: ST_TO_ADDR
31379: GO 31389
// uc_nation := nation_russian ;
31381: LD_ADDR_OWVAR 21
31385: PUSH
31386: LD_INT 3
31388: ST_TO_ADDR
// vc_chassis := chassis ;
31389: LD_ADDR_OWVAR 37
31393: PUSH
31394: LD_VAR 0 1
31398: ST_TO_ADDR
// vc_engine := engine ;
31399: LD_ADDR_OWVAR 39
31403: PUSH
31404: LD_VAR 0 2
31408: ST_TO_ADDR
// vc_control := control ;
31409: LD_ADDR_OWVAR 38
31413: PUSH
31414: LD_VAR 0 3
31418: ST_TO_ADDR
// vc_weapon := weapon ;
31419: LD_ADDR_OWVAR 40
31423: PUSH
31424: LD_VAR 0 4
31428: ST_TO_ADDR
// un := CreateVehicle ;
31429: LD_ADDR_VAR 0 8
31433: PUSH
31434: CALL_OW 45
31438: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31439: LD_VAR 0 8
31443: PPUSH
31444: LD_INT 0
31446: PPUSH
31447: LD_INT 5
31449: PPUSH
31450: CALL_OW 12
31454: PPUSH
31455: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31459: LD_VAR 0 8
31463: PPUSH
31464: LD_VAR 0 5
31468: PPUSH
31469: LD_VAR 0 6
31473: PPUSH
31474: LD_INT 1
31476: PPUSH
31477: CALL_OW 48
// end ;
31481: LD_VAR 0 7
31485: RET
// export hInvincible ; every 1 do
31486: GO 31488
31488: DISABLE
// hInvincible := [ ] ;
31489: LD_ADDR_EXP 96
31493: PUSH
31494: EMPTY
31495: ST_TO_ADDR
31496: END
// every 10 do var i ;
31497: GO 31499
31499: DISABLE
31500: LD_INT 0
31502: PPUSH
// begin enable ;
31503: ENABLE
// if not hInvincible then
31504: LD_EXP 96
31508: NOT
31509: IFFALSE 31513
// exit ;
31511: GO 31557
// for i in hInvincible do
31513: LD_ADDR_VAR 0 1
31517: PUSH
31518: LD_EXP 96
31522: PUSH
31523: FOR_IN
31524: IFFALSE 31555
// if GetLives ( i ) < 1000 then
31526: LD_VAR 0 1
31530: PPUSH
31531: CALL_OW 256
31535: PUSH
31536: LD_INT 1000
31538: LESS
31539: IFFALSE 31553
// SetLives ( i , 1000 ) ;
31541: LD_VAR 0 1
31545: PPUSH
31546: LD_INT 1000
31548: PPUSH
31549: CALL_OW 234
31553: GO 31523
31555: POP
31556: POP
// end ;
31557: PPOPN 1
31559: END
// export function hHackInvincible ; var i ; begin
31560: LD_INT 0
31562: PPUSH
31563: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31564: LD_ADDR_VAR 0 2
31568: PUSH
31569: LD_INT 2
31571: PUSH
31572: LD_INT 21
31574: PUSH
31575: LD_INT 1
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 21
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: PPUSH
31597: CALL_OW 69
31601: PUSH
31602: FOR_IN
31603: IFFALSE 31664
// if IsSelected ( i ) then
31605: LD_VAR 0 2
31609: PPUSH
31610: CALL_OW 306
31614: IFFALSE 31662
// begin if i in hInvincible then
31616: LD_VAR 0 2
31620: PUSH
31621: LD_EXP 96
31625: IN
31626: IFFALSE 31646
// hInvincible := hInvincible diff i else
31628: LD_ADDR_EXP 96
31632: PUSH
31633: LD_EXP 96
31637: PUSH
31638: LD_VAR 0 2
31642: DIFF
31643: ST_TO_ADDR
31644: GO 31662
// hInvincible := hInvincible union i ;
31646: LD_ADDR_EXP 96
31650: PUSH
31651: LD_EXP 96
31655: PUSH
31656: LD_VAR 0 2
31660: UNION
31661: ST_TO_ADDR
// end ;
31662: GO 31602
31664: POP
31665: POP
// end ;
31666: LD_VAR 0 1
31670: RET
// export function hHackInvisible ; var i , j ; begin
31671: LD_INT 0
31673: PPUSH
31674: PPUSH
31675: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31676: LD_ADDR_VAR 0 2
31680: PUSH
31681: LD_INT 21
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PPUSH
31691: CALL_OW 69
31695: PUSH
31696: FOR_IN
31697: IFFALSE 31721
// if IsSelected ( i ) then
31699: LD_VAR 0 2
31703: PPUSH
31704: CALL_OW 306
31708: IFFALSE 31719
// ComForceInvisible ( i ) ;
31710: LD_VAR 0 2
31714: PPUSH
31715: CALL_OW 496
31719: GO 31696
31721: POP
31722: POP
// end ;
31723: LD_VAR 0 1
31727: RET
// export function hHackChangeYourSide ; begin
31728: LD_INT 0
31730: PPUSH
// if your_side = 8 then
31731: LD_OWVAR 2
31735: PUSH
31736: LD_INT 8
31738: EQUAL
31739: IFFALSE 31751
// your_side := 0 else
31741: LD_ADDR_OWVAR 2
31745: PUSH
31746: LD_INT 0
31748: ST_TO_ADDR
31749: GO 31765
// your_side := your_side + 1 ;
31751: LD_ADDR_OWVAR 2
31755: PUSH
31756: LD_OWVAR 2
31760: PUSH
31761: LD_INT 1
31763: PLUS
31764: ST_TO_ADDR
// end ;
31765: LD_VAR 0 1
31769: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31770: LD_INT 0
31772: PPUSH
31773: PPUSH
31774: PPUSH
// for i in all_units do
31775: LD_ADDR_VAR 0 2
31779: PUSH
31780: LD_OWVAR 3
31784: PUSH
31785: FOR_IN
31786: IFFALSE 31864
// if IsSelected ( i ) then
31788: LD_VAR 0 2
31792: PPUSH
31793: CALL_OW 306
31797: IFFALSE 31862
// begin j := GetSide ( i ) ;
31799: LD_ADDR_VAR 0 3
31803: PUSH
31804: LD_VAR 0 2
31808: PPUSH
31809: CALL_OW 255
31813: ST_TO_ADDR
// if j = 8 then
31814: LD_VAR 0 3
31818: PUSH
31819: LD_INT 8
31821: EQUAL
31822: IFFALSE 31834
// j := 0 else
31824: LD_ADDR_VAR 0 3
31828: PUSH
31829: LD_INT 0
31831: ST_TO_ADDR
31832: GO 31848
// j := j + 1 ;
31834: LD_ADDR_VAR 0 3
31838: PUSH
31839: LD_VAR 0 3
31843: PUSH
31844: LD_INT 1
31846: PLUS
31847: ST_TO_ADDR
// SetSide ( i , j ) ;
31848: LD_VAR 0 2
31852: PPUSH
31853: LD_VAR 0 3
31857: PPUSH
31858: CALL_OW 235
// end ;
31862: GO 31785
31864: POP
31865: POP
// end ;
31866: LD_VAR 0 1
31870: RET
// export function hHackFog ; begin
31871: LD_INT 0
31873: PPUSH
// FogOff ( true ) ;
31874: LD_INT 1
31876: PPUSH
31877: CALL_OW 344
// end ;
31881: LD_VAR 0 1
31885: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31886: LD_INT 0
31888: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31889: LD_VAR 0 1
31893: PPUSH
31894: LD_VAR 0 2
31898: PPUSH
31899: LD_VAR 0 3
31903: PPUSH
31904: LD_INT 1
31906: PPUSH
31907: LD_INT 1
31909: PPUSH
31910: CALL_OW 483
// CenterOnXY ( x , y ) ;
31914: LD_VAR 0 2
31918: PPUSH
31919: LD_VAR 0 3
31923: PPUSH
31924: CALL_OW 84
// end ;
31928: LD_VAR 0 4
31932: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31933: LD_INT 0
31935: PPUSH
31936: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31937: LD_VAR 0 1
31941: NOT
31942: IFTRUE 31961
31944: PUSH
31945: LD_VAR 0 2
31949: PPUSH
31950: LD_VAR 0 3
31954: PPUSH
31955: CALL_OW 488
31959: NOT
31960: OR
31961: IFTRUE 31996
31963: PUSH
31964: LD_VAR 0 1
31968: PPUSH
31969: CALL_OW 266
31973: PUSH
31974: LD_INT 3
31976: NONEQUAL
31977: IFFALSE 31995
31979: PUSH
31980: LD_VAR 0 1
31984: PPUSH
31985: CALL_OW 247
31989: PUSH
31990: LD_INT 1
31992: EQUAL
31993: NOT
31994: AND
31995: OR
31996: IFFALSE 32000
// exit ;
31998: GO 32282
// if GetType ( factory ) = unit_human then
32000: LD_VAR 0 1
32004: PPUSH
32005: CALL_OW 247
32009: PUSH
32010: LD_INT 1
32012: EQUAL
32013: IFFALSE 32030
// factory := IsInUnit ( factory ) ;
32015: LD_ADDR_VAR 0 1
32019: PUSH
32020: LD_VAR 0 1
32024: PPUSH
32025: CALL_OW 310
32029: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32030: LD_VAR 0 1
32034: PPUSH
32035: CALL_OW 266
32039: PUSH
32040: LD_INT 3
32042: NONEQUAL
32043: IFFALSE 32047
// exit ;
32045: GO 32282
// for i := 1 to Count ( factoryWaypoints ) do
32047: LD_ADDR_VAR 0 5
32051: PUSH
32052: DOUBLE
32053: LD_INT 1
32055: DEC
32056: ST_TO_ADDR
32057: LD_EXP 97
32061: PPUSH
32062: CALL 42086 0 1
32066: PUSH
32067: FOR_TO
32068: IFFALSE 32230
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
32070: LD_VAR 0 2
32074: PPUSH
32075: LD_VAR 0 3
32079: PPUSH
32080: CALL_OW 428
32084: PUSH
32085: LD_EXP 97
32089: PUSH
32090: LD_VAR 0 5
32094: ARRAY
32095: PUSH
32096: LD_INT 2
32098: ARRAY
32099: EQUAL
32100: IFFALSE 32132
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32102: LD_ADDR_EXP 97
32106: PUSH
32107: LD_EXP 97
32111: PPUSH
32112: LD_VAR 0 5
32116: PPUSH
32117: CALL_OW 3
32121: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32122: CALL 32287 0 0
// exit ;
32126: POP
32127: POP
32128: GO 32282
// end else
32130: GO 32228
// if factory = factoryWaypoints [ i ] [ 2 ] then
32132: LD_VAR 0 1
32136: PUSH
32137: LD_EXP 97
32141: PUSH
32142: LD_VAR 0 5
32146: ARRAY
32147: PUSH
32148: LD_INT 2
32150: ARRAY
32151: EQUAL
32152: IFFALSE 32228
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32154: LD_ADDR_EXP 97
32158: PUSH
32159: LD_EXP 97
32163: PPUSH
32164: LD_VAR 0 5
32168: PPUSH
32169: CALL_OW 3
32173: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32174: LD_ADDR_EXP 97
32178: PUSH
32179: LD_EXP 97
32183: PPUSH
32184: LD_VAR 0 1
32188: PPUSH
32189: CALL_OW 255
32193: PUSH
32194: LD_VAR 0 1
32198: PUSH
32199: LD_VAR 0 2
32203: PUSH
32204: LD_VAR 0 3
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: PPUSH
32215: CALL 78062 0 2
32219: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32220: CALL 32287 0 0
// exit ;
32224: POP
32225: POP
32226: GO 32282
// end ; end ;
32228: GO 32067
32230: POP
32231: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32232: LD_ADDR_EXP 97
32236: PUSH
32237: LD_EXP 97
32241: PPUSH
32242: LD_VAR 0 1
32246: PPUSH
32247: CALL_OW 255
32251: PUSH
32252: LD_VAR 0 1
32256: PUSH
32257: LD_VAR 0 2
32261: PUSH
32262: LD_VAR 0 3
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: PPUSH
32273: CALL 78062 0 2
32277: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32278: CALL 32287 0 0
// end ;
32282: LD_VAR 0 4
32286: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32287: LD_INT 0
32289: PPUSH
32290: PPUSH
32291: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32292: LD_STRING resetFactoryWaypoint();
32294: PPUSH
32295: CALL_OW 559
// if factoryWaypoints then
32299: LD_EXP 97
32303: IFFALSE 32424
// begin list := factoryWaypoints ;
32305: LD_ADDR_VAR 0 3
32309: PUSH
32310: LD_EXP 97
32314: ST_TO_ADDR
// for i := 1 to list do
32315: LD_ADDR_VAR 0 2
32319: PUSH
32320: DOUBLE
32321: LD_INT 1
32323: DEC
32324: ST_TO_ADDR
32325: LD_VAR 0 3
32329: PUSH
32330: FOR_TO
32331: IFFALSE 32422
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32333: LD_STRING setFactoryWaypointXY(
32335: PUSH
32336: LD_VAR 0 3
32340: PUSH
32341: LD_VAR 0 2
32345: ARRAY
32346: PUSH
32347: LD_INT 1
32349: ARRAY
32350: STR
32351: PUSH
32352: LD_STRING ,
32354: STR
32355: PUSH
32356: LD_VAR 0 3
32360: PUSH
32361: LD_VAR 0 2
32365: ARRAY
32366: PUSH
32367: LD_INT 2
32369: ARRAY
32370: STR
32371: PUSH
32372: LD_STRING ,
32374: STR
32375: PUSH
32376: LD_VAR 0 3
32380: PUSH
32381: LD_VAR 0 2
32385: ARRAY
32386: PUSH
32387: LD_INT 3
32389: ARRAY
32390: STR
32391: PUSH
32392: LD_STRING ,
32394: STR
32395: PUSH
32396: LD_VAR 0 3
32400: PUSH
32401: LD_VAR 0 2
32405: ARRAY
32406: PUSH
32407: LD_INT 4
32409: ARRAY
32410: STR
32411: PUSH
32412: LD_STRING )
32414: STR
32415: PPUSH
32416: CALL_OW 559
32420: GO 32330
32422: POP
32423: POP
// end ; end ;
32424: LD_VAR 0 1
32428: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32429: LD_INT 0
32431: PPUSH
// if HexInfo ( x , y ) = warehouse then
32432: LD_VAR 0 2
32436: PPUSH
32437: LD_VAR 0 3
32441: PPUSH
32442: CALL_OW 428
32446: PUSH
32447: LD_VAR 0 1
32451: EQUAL
32452: IFFALSE 32479
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32454: LD_ADDR_EXP 99
32458: PUSH
32459: LD_EXP 99
32463: PPUSH
32464: LD_VAR 0 1
32468: PPUSH
32469: LD_INT 0
32471: PPUSH
32472: CALL_OW 1
32476: ST_TO_ADDR
32477: GO 32530
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32479: LD_ADDR_EXP 99
32483: PUSH
32484: LD_EXP 99
32488: PPUSH
32489: LD_VAR 0 1
32493: PPUSH
32494: LD_VAR 0 1
32498: PPUSH
32499: CALL_OW 255
32503: PUSH
32504: LD_VAR 0 1
32508: PUSH
32509: LD_VAR 0 2
32513: PUSH
32514: LD_VAR 0 3
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: PPUSH
32525: CALL_OW 1
32529: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32530: CALL 32539 0 0
// end ;
32534: LD_VAR 0 4
32538: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32539: LD_INT 0
32541: PPUSH
32542: PPUSH
32543: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32544: LD_STRING resetWarehouseGatheringPoints();
32546: PPUSH
32547: CALL_OW 559
// if warehouseGatheringPoints then
32551: LD_EXP 99
32555: IFFALSE 32681
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32557: LD_ADDR_VAR 0 3
32561: PUSH
32562: LD_EXP 99
32566: PPUSH
32567: CALL 81996 0 1
32571: ST_TO_ADDR
// for i := 1 to list do
32572: LD_ADDR_VAR 0 2
32576: PUSH
32577: DOUBLE
32578: LD_INT 1
32580: DEC
32581: ST_TO_ADDR
32582: LD_VAR 0 3
32586: PUSH
32587: FOR_TO
32588: IFFALSE 32679
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32590: LD_STRING setWarehouseGatheringPointXY(
32592: PUSH
32593: LD_VAR 0 3
32597: PUSH
32598: LD_VAR 0 2
32602: ARRAY
32603: PUSH
32604: LD_INT 1
32606: ARRAY
32607: STR
32608: PUSH
32609: LD_STRING ,
32611: STR
32612: PUSH
32613: LD_VAR 0 3
32617: PUSH
32618: LD_VAR 0 2
32622: ARRAY
32623: PUSH
32624: LD_INT 2
32626: ARRAY
32627: STR
32628: PUSH
32629: LD_STRING ,
32631: STR
32632: PUSH
32633: LD_VAR 0 3
32637: PUSH
32638: LD_VAR 0 2
32642: ARRAY
32643: PUSH
32644: LD_INT 3
32646: ARRAY
32647: STR
32648: PUSH
32649: LD_STRING ,
32651: STR
32652: PUSH
32653: LD_VAR 0 3
32657: PUSH
32658: LD_VAR 0 2
32662: ARRAY
32663: PUSH
32664: LD_INT 4
32666: ARRAY
32667: STR
32668: PUSH
32669: LD_STRING )
32671: STR
32672: PPUSH
32673: CALL_OW 559
32677: GO 32587
32679: POP
32680: POP
// end ; end ;
32681: LD_VAR 0 1
32685: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32686: LD_EXP 99
32690: IFFALSE 33385
32692: GO 32694
32694: DISABLE
32695: LD_INT 0
32697: PPUSH
32698: PPUSH
32699: PPUSH
32700: PPUSH
32701: PPUSH
32702: PPUSH
32703: PPUSH
32704: PPUSH
32705: PPUSH
// begin enable ;
32706: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32707: LD_ADDR_VAR 0 3
32711: PUSH
32712: LD_EXP 99
32716: PPUSH
32717: CALL 81996 0 1
32721: ST_TO_ADDR
// if not list then
32722: LD_VAR 0 3
32726: NOT
32727: IFFALSE 32731
// exit ;
32729: GO 33385
// for i := 1 to list do
32731: LD_ADDR_VAR 0 1
32735: PUSH
32736: DOUBLE
32737: LD_INT 1
32739: DEC
32740: ST_TO_ADDR
32741: LD_VAR 0 3
32745: PUSH
32746: FOR_TO
32747: IFFALSE 33383
// begin depot := list [ i ] [ 2 ] ;
32749: LD_ADDR_VAR 0 8
32753: PUSH
32754: LD_VAR 0 3
32758: PUSH
32759: LD_VAR 0 1
32763: ARRAY
32764: PUSH
32765: LD_INT 2
32767: ARRAY
32768: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32769: LD_ADDR_VAR 0 5
32773: PUSH
32774: LD_VAR 0 3
32778: PUSH
32779: LD_VAR 0 1
32783: ARRAY
32784: PUSH
32785: LD_INT 1
32787: ARRAY
32788: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32789: LD_VAR 0 8
32793: PPUSH
32794: CALL_OW 301
32798: IFTRUE 32817
32800: PUSH
32801: LD_VAR 0 5
32805: PUSH
32806: LD_VAR 0 8
32810: PPUSH
32811: CALL_OW 255
32815: NONEQUAL
32816: OR
32817: IFFALSE 32846
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32819: LD_ADDR_EXP 99
32823: PUSH
32824: LD_EXP 99
32828: PPUSH
32829: LD_VAR 0 8
32833: PPUSH
32834: LD_INT 0
32836: PPUSH
32837: CALL_OW 1
32841: ST_TO_ADDR
// exit ;
32842: POP
32843: POP
32844: GO 33385
// end ; x := list [ i ] [ 3 ] ;
32846: LD_ADDR_VAR 0 6
32850: PUSH
32851: LD_VAR 0 3
32855: PUSH
32856: LD_VAR 0 1
32860: ARRAY
32861: PUSH
32862: LD_INT 3
32864: ARRAY
32865: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32866: LD_ADDR_VAR 0 7
32870: PUSH
32871: LD_VAR 0 3
32875: PUSH
32876: LD_VAR 0 1
32880: ARRAY
32881: PUSH
32882: LD_INT 4
32884: ARRAY
32885: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32886: LD_ADDR_VAR 0 9
32890: PUSH
32891: LD_VAR 0 6
32895: PPUSH
32896: LD_VAR 0 7
32900: PPUSH
32901: LD_INT 16
32903: PPUSH
32904: CALL 80570 0 3
32908: ST_TO_ADDR
// if not cratesNearbyPoint then
32909: LD_VAR 0 9
32913: NOT
32914: IFFALSE 32920
// exit ;
32916: POP
32917: POP
32918: GO 33385
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32920: LD_ADDR_VAR 0 4
32924: PUSH
32925: LD_INT 22
32927: PUSH
32928: LD_VAR 0 5
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 3
32939: PUSH
32940: LD_INT 60
32942: PUSH
32943: EMPTY
32944: LIST
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 91
32952: PUSH
32953: LD_VAR 0 8
32957: PUSH
32958: LD_INT 6
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: PUSH
32969: LD_INT 25
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 25
32981: PUSH
32982: LD_INT 16
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: PPUSH
33000: CALL_OW 69
33004: PUSH
33005: LD_VAR 0 8
33009: PPUSH
33010: CALL_OW 313
33014: PPUSH
33015: LD_INT 3
33017: PUSH
33018: LD_INT 60
33020: PUSH
33021: EMPTY
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 2
33030: PUSH
33031: LD_INT 25
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 25
33043: PUSH
33044: LD_INT 16
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: LIST
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PPUSH
33060: CALL_OW 72
33064: UNION
33065: ST_TO_ADDR
// if tmp then
33066: LD_VAR 0 4
33070: IFFALSE 33150
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33072: LD_ADDR_VAR 0 4
33076: PUSH
33077: LD_VAR 0 4
33081: PPUSH
33082: LD_INT 3
33084: PPUSH
33085: CALL 78377 0 2
33089: ST_TO_ADDR
// for j in tmp do
33090: LD_ADDR_VAR 0 2
33094: PUSH
33095: LD_VAR 0 4
33099: PUSH
33100: FOR_IN
33101: IFFALSE 33144
// begin if IsInUnit ( j ) then
33103: LD_VAR 0 2
33107: PPUSH
33108: CALL_OW 310
33112: IFFALSE 33123
// ComExit ( j ) ;
33114: LD_VAR 0 2
33118: PPUSH
33119: CALL 78460 0 1
// AddComCollect ( j , x , y ) ;
33123: LD_VAR 0 2
33127: PPUSH
33128: LD_VAR 0 6
33132: PPUSH
33133: LD_VAR 0 7
33137: PPUSH
33138: CALL_OW 177
// end ;
33142: GO 33100
33144: POP
33145: POP
// exit ;
33146: POP
33147: POP
33148: GO 33385
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33150: LD_ADDR_VAR 0 4
33154: PUSH
33155: LD_INT 22
33157: PUSH
33158: LD_VAR 0 5
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 91
33169: PUSH
33170: LD_VAR 0 8
33174: PUSH
33175: LD_INT 8
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 2
33185: PUSH
33186: LD_INT 34
33188: PUSH
33189: LD_INT 12
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 34
33198: PUSH
33199: LD_INT 51
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 34
33208: PUSH
33209: LD_INT 32
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 34
33218: PUSH
33219: LD_INT 89
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: PPUSH
33238: CALL_OW 69
33242: ST_TO_ADDR
// if tmp then
33243: LD_VAR 0 4
33247: IFFALSE 33381
// begin for j in tmp do
33249: LD_ADDR_VAR 0 2
33253: PUSH
33254: LD_VAR 0 4
33258: PUSH
33259: FOR_IN
33260: IFFALSE 33379
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33262: LD_VAR 0 2
33266: PPUSH
33267: CALL_OW 262
33271: PUSH
33272: LD_INT 3
33274: EQUAL
33275: IFTRUE 33292
33277: PUSH
33278: LD_VAR 0 2
33282: PPUSH
33283: CALL_OW 261
33287: PUSH
33288: LD_INT 20
33290: GREATER
33291: OR
33292: IFFALSE 33306
33294: PUSH
33295: LD_VAR 0 2
33299: PPUSH
33300: CALL_OW 314
33304: NOT
33305: AND
33306: IFFALSE 33336
33308: PUSH
33309: LD_VAR 0 2
33313: PPUSH
33314: CALL_OW 263
33318: PUSH
33319: LD_INT 1
33321: NONEQUAL
33322: IFTRUE 33335
33324: PUSH
33325: LD_VAR 0 2
33329: PPUSH
33330: CALL_OW 311
33334: OR
33335: AND
33336: IFFALSE 33377
// begin ComCollect ( j , x , y ) ;
33338: LD_VAR 0 2
33342: PPUSH
33343: LD_VAR 0 6
33347: PPUSH
33348: LD_VAR 0 7
33352: PPUSH
33353: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33357: LD_VAR 0 2
33361: PPUSH
33362: LD_VAR 0 8
33366: PPUSH
33367: CALL_OW 172
// exit ;
33371: POP
33372: POP
33373: POP
33374: POP
33375: GO 33385
// end ;
33377: GO 33259
33379: POP
33380: POP
// end ; end ;
33381: GO 32746
33383: POP
33384: POP
// end ; end_of_file
33385: PPOPN 9
33387: END
// export function SOS_UnitDestroyed ( un ) ; begin
33388: LD_INT 0
33390: PPUSH
// ComRadiation ( un ) ;
33391: LD_VAR 0 1
33395: PPUSH
33396: CALL 34558 0 1
// end ;
33400: LD_VAR 0 2
33404: RET
// export function SOS_UnitKamikazed ( un ) ; begin
33405: LD_INT 0
33407: PPUSH
// ComRadiation ( un ) ;
33408: LD_VAR 0 1
33412: PPUSH
33413: CALL 34558 0 1
// end ;
33417: LD_VAR 0 2
33421: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33422: LD_INT 0
33424: PPUSH
// end ;
33425: LD_VAR 0 4
33429: RET
// export function SOS_Command ( cmd ) ; begin
33430: LD_INT 0
33432: PPUSH
// end ;
33433: LD_VAR 0 2
33437: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33438: LD_INT 0
33440: PPUSH
// end ;
33441: LD_VAR 0 6
33445: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
33446: LD_INT 0
33448: PPUSH
33449: PPUSH
33450: PPUSH
33451: PPUSH
33452: PPUSH
// if not vehicle or not factory then
33453: LD_VAR 0 1
33457: NOT
33458: IFTRUE 33467
33460: PUSH
33461: LD_VAR 0 2
33465: NOT
33466: OR
33467: IFFALSE 33471
// exit ;
33469: GO 34133
// weapon := GetWeapon ( vehicle ) ;
33471: LD_ADDR_VAR 0 7
33475: PUSH
33476: LD_VAR 0 1
33480: PPUSH
33481: CALL_OW 264
33485: ST_TO_ADDR
// if weapon = ar_miner then
33486: LD_VAR 0 7
33490: PUSH
33491: LD_INT 81
33493: EQUAL
33494: IFFALSE 33551
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
33496: LD_ADDR_EXP 108
33500: PUSH
33501: LD_EXP 108
33505: PPUSH
33506: LD_EXP 108
33510: PUSH
33511: LD_INT 1
33513: PLUS
33514: PPUSH
33515: LD_VAR 0 1
33519: PPUSH
33520: CALL_OW 1
33524: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33525: LD_ADDR_EXP 109
33529: PUSH
33530: LD_EXP 109
33534: PPUSH
33535: LD_EXP 109
33539: PUSH
33540: LD_INT 1
33542: PLUS
33543: PPUSH
33544: EMPTY
33545: PPUSH
33546: CALL_OW 1
33550: ST_TO_ADDR
// end ; if not factoryWaypoints then
33551: LD_EXP 97
33555: NOT
33556: IFFALSE 33560
// exit ;
33558: GO 34133
// for i := 1 to Count ( factoryWaypoints ) do
33560: LD_ADDR_VAR 0 4
33564: PUSH
33565: DOUBLE
33566: LD_INT 1
33568: DEC
33569: ST_TO_ADDR
33570: LD_EXP 97
33574: PPUSH
33575: CALL 42086 0 1
33579: PUSH
33580: FOR_TO
33581: IFFALSE 34131
// if factoryWaypoints [ i ] [ 2 ] = factory then
33583: LD_EXP 97
33587: PUSH
33588: LD_VAR 0 4
33592: ARRAY
33593: PUSH
33594: LD_INT 2
33596: ARRAY
33597: PUSH
33598: LD_VAR 0 2
33602: EQUAL
33603: IFFALSE 34129
// begin if GetControl ( vehicle ) = control_manual then
33605: LD_VAR 0 1
33609: PPUSH
33610: CALL_OW 263
33614: PUSH
33615: LD_INT 1
33617: EQUAL
33618: IFFALSE 33982
// begin driver := IsDrivenBy ( vehicle ) ;
33620: LD_ADDR_VAR 0 5
33624: PUSH
33625: LD_VAR 0 1
33629: PPUSH
33630: CALL_OW 311
33634: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
33635: LD_VAR 0 5
33639: PUSH
33640: LD_EXP 98
33644: IN
33645: IFTRUE 33659
33647: PUSH
33648: LD_VAR 0 1
33652: PUSH
33653: LD_EXP 98
33657: IN
33658: OR
33659: IFFALSE 33665
// exit ;
33661: POP
33662: POP
33663: GO 34133
// if not HasTask ( driver ) then
33665: LD_VAR 0 5
33669: PPUSH
33670: CALL_OW 314
33674: NOT
33675: IFFALSE 33980
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
33677: LD_ADDR_EXP 98
33681: PUSH
33682: LD_EXP 98
33686: PPUSH
33687: LD_VAR 0 5
33691: PPUSH
33692: CALL 78062 0 2
33696: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
33697: LD_ADDR_EXP 98
33701: PUSH
33702: LD_EXP 98
33706: PPUSH
33707: LD_VAR 0 1
33711: PPUSH
33712: CALL 78062 0 2
33716: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33717: LD_ADDR_VAR 0 6
33721: PUSH
33722: LD_EXP 97
33726: PUSH
33727: LD_VAR 0 4
33731: ARRAY
33732: PUSH
33733: LD_INT 3
33735: ARRAY
33736: PPUSH
33737: LD_EXP 97
33741: PUSH
33742: LD_VAR 0 4
33746: ARRAY
33747: PUSH
33748: LD_INT 4
33750: ARRAY
33751: PPUSH
33752: CALL_OW 428
33756: ST_TO_ADDR
// if hex then
33757: LD_VAR 0 6
33761: IFFALSE 33779
// ComMoveUnit ( driver , hex ) else
33763: LD_VAR 0 5
33767: PPUSH
33768: LD_VAR 0 6
33772: PPUSH
33773: CALL_OW 112
33777: GO 33863
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
33779: LD_VAR 0 1
33783: PPUSH
33784: LD_EXP 97
33788: PUSH
33789: LD_VAR 0 4
33793: ARRAY
33794: PUSH
33795: LD_INT 3
33797: ARRAY
33798: PPUSH
33799: LD_EXP 97
33803: PUSH
33804: LD_VAR 0 4
33808: ARRAY
33809: PUSH
33810: LD_INT 4
33812: ARRAY
33813: PPUSH
33814: CALL_OW 297
33818: PUSH
33819: LD_INT 0
33821: GREATER
33822: IFFALSE 33863
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
33824: LD_VAR 0 5
33828: PPUSH
33829: LD_EXP 97
33833: PUSH
33834: LD_VAR 0 4
33838: ARRAY
33839: PUSH
33840: LD_INT 3
33842: ARRAY
33843: PPUSH
33844: LD_EXP 97
33848: PUSH
33849: LD_VAR 0 4
33853: ARRAY
33854: PUSH
33855: LD_INT 4
33857: ARRAY
33858: PPUSH
33859: CALL_OW 111
// AddComExitVehicle ( driver ) ;
33863: LD_VAR 0 5
33867: PPUSH
33868: CALL_OW 181
// if Multiplayer then
33872: LD_OWVAR 4
33876: IFFALSE 33925
// begin repeat wait ( 10 ) ;
33878: LD_INT 10
33880: PPUSH
33881: CALL_OW 67
// until not IsInUnit ( driver ) ;
33885: LD_VAR 0 5
33889: PPUSH
33890: CALL_OW 310
33894: NOT
33895: IFFALSE 33878
// if not HasTask ( driver ) then
33897: LD_VAR 0 5
33901: PPUSH
33902: CALL_OW 314
33906: NOT
33907: IFFALSE 33923
// ComEnterUnit ( driver , factory ) ;
33909: LD_VAR 0 5
33913: PPUSH
33914: LD_VAR 0 2
33918: PPUSH
33919: CALL_OW 120
// end else
33923: GO 33939
// AddComEnterUnit ( driver , factory ) ;
33925: LD_VAR 0 5
33929: PPUSH
33930: LD_VAR 0 2
33934: PPUSH
33935: CALL_OW 180
// wait ( 0 0$1 ) ;
33939: LD_INT 35
33941: PPUSH
33942: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
33946: LD_ADDR_EXP 98
33950: PUSH
33951: LD_EXP 98
33955: PUSH
33956: LD_VAR 0 5
33960: DIFF
33961: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
33962: LD_ADDR_EXP 98
33966: PUSH
33967: LD_EXP 98
33971: PUSH
33972: LD_VAR 0 1
33976: DIFF
33977: ST_TO_ADDR
// break ;
33978: GO 34131
// end ; end else
33980: GO 34129
// if GetControl ( vehicle ) = control_remote then
33982: LD_VAR 0 1
33986: PPUSH
33987: CALL_OW 263
33991: PUSH
33992: LD_INT 2
33994: EQUAL
33995: IFFALSE 34081
// begin wait ( 0 0$2 ) ;
33997: LD_INT 70
33999: PPUSH
34000: CALL_OW 67
// repeat wait ( 10 ) ;
34004: LD_INT 10
34006: PPUSH
34007: CALL_OW 67
// Connect ( vehicle ) ;
34011: LD_VAR 0 1
34015: PPUSH
34016: CALL 48364 0 1
// until IsControledBy ( vehicle ) ;
34020: LD_VAR 0 1
34024: PPUSH
34025: CALL_OW 312
34029: IFFALSE 34004
// wait ( 10 ) ;
34031: LD_INT 10
34033: PPUSH
34034: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34038: LD_VAR 0 1
34042: PPUSH
34043: LD_EXP 97
34047: PUSH
34048: LD_VAR 0 4
34052: ARRAY
34053: PUSH
34054: LD_INT 3
34056: ARRAY
34057: PPUSH
34058: LD_EXP 97
34062: PUSH
34063: LD_VAR 0 4
34067: ARRAY
34068: PUSH
34069: LD_INT 4
34071: ARRAY
34072: PPUSH
34073: CALL_OW 111
// break ;
34077: GO 34131
// end else
34079: GO 34129
// begin wait ( 0 0$3 ) ;
34081: LD_INT 105
34083: PPUSH
34084: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34088: LD_VAR 0 1
34092: PPUSH
34093: LD_EXP 97
34097: PUSH
34098: LD_VAR 0 4
34102: ARRAY
34103: PUSH
34104: LD_INT 3
34106: ARRAY
34107: PPUSH
34108: LD_EXP 97
34112: PUSH
34113: LD_VAR 0 4
34117: ARRAY
34118: PUSH
34119: LD_INT 4
34121: ARRAY
34122: PPUSH
34123: CALL_OW 111
// break ;
34127: GO 34131
// end ; end ;
34129: GO 33580
34131: POP
34132: POP
// end ;
34133: LD_VAR 0 3
34137: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34138: LD_INT 0
34140: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34141: LD_VAR 0 1
34145: PUSH
34146: LD_INT 250
34148: EQUAL
34149: IFFALSE 34166
34151: PUSH
34152: LD_VAR 0 2
34156: PPUSH
34157: CALL_OW 264
34161: PUSH
34162: LD_INT 81
34164: EQUAL
34165: AND
34166: IFFALSE 34187
// MinerPlaceMine ( unit , x , y ) ;
34168: LD_VAR 0 2
34172: PPUSH
34173: LD_VAR 0 4
34177: PPUSH
34178: LD_VAR 0 5
34182: PPUSH
34183: CALL 37533 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34187: LD_VAR 0 1
34191: PUSH
34192: LD_INT 251
34194: EQUAL
34195: IFFALSE 34212
34197: PUSH
34198: LD_VAR 0 2
34202: PPUSH
34203: CALL_OW 264
34207: PUSH
34208: LD_INT 81
34210: EQUAL
34211: AND
34212: IFFALSE 34233
// MinerDetonateMine ( unit , x , y ) ;
34214: LD_VAR 0 2
34218: PPUSH
34219: LD_VAR 0 4
34223: PPUSH
34224: LD_VAR 0 5
34228: PPUSH
34229: CALL 37940 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34233: LD_VAR 0 1
34237: PUSH
34238: LD_INT 252
34240: EQUAL
34241: IFFALSE 34258
34243: PUSH
34244: LD_VAR 0 2
34248: PPUSH
34249: CALL_OW 264
34253: PUSH
34254: LD_INT 81
34256: EQUAL
34257: AND
34258: IFFALSE 34279
// MinerCreateMinefield ( unit , x , y ) ;
34260: LD_VAR 0 2
34264: PPUSH
34265: LD_VAR 0 4
34269: PPUSH
34270: LD_VAR 0 5
34274: PPUSH
34275: CALL 38172 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34279: LD_VAR 0 1
34283: PUSH
34284: LD_INT 253
34286: EQUAL
34287: IFFALSE 34304
34289: PUSH
34290: LD_VAR 0 2
34294: PPUSH
34295: CALL_OW 257
34299: PUSH
34300: LD_INT 5
34302: EQUAL
34303: AND
34304: IFFALSE 34325
// ComBinocular ( unit , x , y ) ;
34306: LD_VAR 0 2
34310: PPUSH
34311: LD_VAR 0 4
34315: PPUSH
34316: LD_VAR 0 5
34320: PPUSH
34321: CALL 38547 0 3
// if selectedUnit then
34325: LD_VAR 0 3
34329: IFFALSE 34389
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34331: LD_VAR 0 1
34335: PUSH
34336: LD_INT 254
34338: EQUAL
34339: IFFALSE 34356
34341: PUSH
34342: LD_VAR 0 2
34346: PPUSH
34347: CALL_OW 264
34351: PUSH
34352: LD_INT 99
34354: EQUAL
34355: AND
34356: IFFALSE 34373
34358: PUSH
34359: LD_VAR 0 3
34363: PPUSH
34364: CALL_OW 263
34368: PUSH
34369: LD_INT 3
34371: EQUAL
34372: AND
34373: IFFALSE 34389
// HackDestroyVehicle ( unit , selectedUnit ) ;
34375: LD_VAR 0 2
34379: PPUSH
34380: LD_VAR 0 3
34384: PPUSH
34385: CALL 36723 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34389: LD_VAR 0 1
34393: PUSH
34394: LD_INT 255
34396: EQUAL
34397: IFFALSE 34421
34399: PUSH
34400: LD_VAR 0 2
34404: PPUSH
34405: CALL_OW 264
34409: PUSH
34410: LD_INT 14
34412: PUSH
34413: LD_INT 53
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: IN
34420: AND
34421: IFFALSE 34439
34423: PUSH
34424: LD_VAR 0 4
34428: PPUSH
34429: LD_VAR 0 5
34433: PPUSH
34434: CALL_OW 488
34438: AND
34439: IFFALSE 34463
// CutTreeXYR ( unit , x , y , 12 ) ;
34441: LD_VAR 0 2
34445: PPUSH
34446: LD_VAR 0 4
34450: PPUSH
34451: LD_VAR 0 5
34455: PPUSH
34456: LD_INT 12
34458: PPUSH
34459: CALL 34654 0 4
// if cmd = 256 then
34463: LD_VAR 0 1
34467: PUSH
34468: LD_INT 256
34470: EQUAL
34471: IFFALSE 34492
// SetFactoryWaypoint ( unit , x , y ) ;
34473: LD_VAR 0 2
34477: PPUSH
34478: LD_VAR 0 4
34482: PPUSH
34483: LD_VAR 0 5
34487: PPUSH
34488: CALL 31933 0 3
// if cmd = 257 then
34492: LD_VAR 0 1
34496: PUSH
34497: LD_INT 257
34499: EQUAL
34500: IFFALSE 34521
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34502: LD_VAR 0 2
34506: PPUSH
34507: LD_VAR 0 4
34511: PPUSH
34512: LD_VAR 0 5
34516: PPUSH
34517: CALL 32429 0 3
// if cmd = 258 then
34521: LD_VAR 0 1
34525: PUSH
34526: LD_INT 258
34528: EQUAL
34529: IFFALSE 34553
// BurnTreeXYR ( unit , x , y , 8 ) ;
34531: LD_VAR 0 2
34535: PPUSH
34536: LD_VAR 0 4
34540: PPUSH
34541: LD_VAR 0 5
34545: PPUSH
34546: LD_INT 8
34548: PPUSH
34549: CALL 35076 0 4
// end ;
34553: LD_VAR 0 6
34557: RET
// export function ComRadiation ( un ) ; var eff ; begin
34558: LD_INT 0
34560: PPUSH
34561: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
34562: LD_VAR 0 1
34566: PPUSH
34567: CALL_OW 264
34571: PUSH
34572: LD_INT 91
34574: NONEQUAL
34575: IFFALSE 34579
// exit ;
34577: GO 34649
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34579: LD_INT 68
34581: PPUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: CALL_OW 255
34591: PPUSH
34592: CALL_OW 321
34596: PUSH
34597: LD_INT 2
34599: EQUAL
34600: IFFALSE 34612
// eff := 50 else
34602: LD_ADDR_VAR 0 3
34606: PUSH
34607: LD_INT 50
34609: ST_TO_ADDR
34610: GO 34620
// eff := 25 ;
34612: LD_ADDR_VAR 0 3
34616: PUSH
34617: LD_INT 25
34619: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34620: LD_VAR 0 1
34624: PPUSH
34625: CALL_OW 250
34629: PPUSH
34630: LD_VAR 0 1
34634: PPUSH
34635: CALL_OW 251
34639: PPUSH
34640: LD_VAR 0 3
34644: PPUSH
34645: CALL_OW 495
// end ;
34649: LD_VAR 0 2
34653: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34654: LD_INT 0
34656: PPUSH
34657: PPUSH
34658: PPUSH
34659: PPUSH
34660: PPUSH
34661: PPUSH
34662: PPUSH
34663: PPUSH
34664: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
34665: LD_VAR 0 1
34669: PPUSH
34670: CALL_OW 302
34674: NOT
34675: IFTRUE 34694
34677: PUSH
34678: LD_VAR 0 2
34682: PPUSH
34683: LD_VAR 0 3
34687: PPUSH
34688: CALL_OW 488
34692: NOT
34693: OR
34694: IFTRUE 34703
34696: PUSH
34697: LD_VAR 0 4
34701: NOT
34702: OR
34703: IFFALSE 34707
// exit ;
34705: GO 35071
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
34707: LD_VAR 0 1
34711: PPUSH
34712: CALL_OW 437
34716: PPUSH
34717: CALL 42086 0 1
34721: PUSH
34722: LD_INT 10
34724: GREATER
34725: IFFALSE 34729
// exit ;
34727: GO 35071
// list := [ ] ;
34729: LD_ADDR_VAR 0 13
34733: PUSH
34734: EMPTY
34735: ST_TO_ADDR
// if x - r < 0 then
34736: LD_VAR 0 2
34740: PUSH
34741: LD_VAR 0 4
34745: MINUS
34746: PUSH
34747: LD_INT 0
34749: LESS
34750: IFFALSE 34762
// min_x := 0 else
34752: LD_ADDR_VAR 0 7
34756: PUSH
34757: LD_INT 0
34759: ST_TO_ADDR
34760: GO 34778
// min_x := x - r ;
34762: LD_ADDR_VAR 0 7
34766: PUSH
34767: LD_VAR 0 2
34771: PUSH
34772: LD_VAR 0 4
34776: MINUS
34777: ST_TO_ADDR
// if y - r < 0 then
34778: LD_VAR 0 3
34782: PUSH
34783: LD_VAR 0 4
34787: MINUS
34788: PUSH
34789: LD_INT 0
34791: LESS
34792: IFFALSE 34804
// min_y := 0 else
34794: LD_ADDR_VAR 0 8
34798: PUSH
34799: LD_INT 0
34801: ST_TO_ADDR
34802: GO 34820
// min_y := y - r ;
34804: LD_ADDR_VAR 0 8
34808: PUSH
34809: LD_VAR 0 3
34813: PUSH
34814: LD_VAR 0 4
34818: MINUS
34819: ST_TO_ADDR
// max_x := x + r ;
34820: LD_ADDR_VAR 0 9
34824: PUSH
34825: LD_VAR 0 2
34829: PUSH
34830: LD_VAR 0 4
34834: PLUS
34835: ST_TO_ADDR
// max_y := y + r ;
34836: LD_ADDR_VAR 0 10
34840: PUSH
34841: LD_VAR 0 3
34845: PUSH
34846: LD_VAR 0 4
34850: PLUS
34851: ST_TO_ADDR
// for _x = min_x to max_x do
34852: LD_ADDR_VAR 0 11
34856: PUSH
34857: DOUBLE
34858: LD_VAR 0 7
34862: DEC
34863: ST_TO_ADDR
34864: LD_VAR 0 9
34868: PUSH
34869: FOR_TO
34870: IFFALSE 34989
// for _y = min_y to max_y do
34872: LD_ADDR_VAR 0 12
34876: PUSH
34877: DOUBLE
34878: LD_VAR 0 8
34882: DEC
34883: ST_TO_ADDR
34884: LD_VAR 0 10
34888: PUSH
34889: FOR_TO
34890: IFFALSE 34985
// begin if not ValidHex ( _x , _y ) then
34892: LD_VAR 0 11
34896: PPUSH
34897: LD_VAR 0 12
34901: PPUSH
34902: CALL_OW 488
34906: NOT
34907: IFFALSE 34911
// continue ;
34909: GO 34889
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34911: LD_VAR 0 11
34915: PPUSH
34916: LD_VAR 0 12
34920: PPUSH
34921: CALL_OW 351
34925: IFFALSE 34943
34927: PUSH
34928: LD_VAR 0 11
34932: PPUSH
34933: LD_VAR 0 12
34937: PPUSH
34938: CALL_OW 554
34942: AND
34943: IFFALSE 34983
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34945: LD_ADDR_VAR 0 13
34949: PUSH
34950: LD_VAR 0 13
34954: PPUSH
34955: LD_VAR 0 13
34959: PUSH
34960: LD_INT 1
34962: PLUS
34963: PPUSH
34964: LD_VAR 0 11
34968: PUSH
34969: LD_VAR 0 12
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PPUSH
34978: CALL_OW 2
34982: ST_TO_ADDR
// end ;
34983: GO 34889
34985: POP
34986: POP
34987: GO 34869
34989: POP
34990: POP
// if not list then
34991: LD_VAR 0 13
34995: NOT
34996: IFFALSE 35000
// exit ;
34998: GO 35071
// for i in list do
35000: LD_ADDR_VAR 0 6
35004: PUSH
35005: LD_VAR 0 13
35009: PUSH
35010: FOR_IN
35011: IFFALSE 35069
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35013: LD_VAR 0 1
35017: PPUSH
35018: LD_STRING M
35020: PUSH
35021: LD_VAR 0 6
35025: PUSH
35026: LD_INT 1
35028: ARRAY
35029: PUSH
35030: LD_VAR 0 6
35034: PUSH
35035: LD_INT 2
35037: ARRAY
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: PUSH
35060: EMPTY
35061: LIST
35062: PPUSH
35063: CALL_OW 447
35067: GO 35010
35069: POP
35070: POP
// end ;
35071: LD_VAR 0 5
35075: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
35076: LD_INT 0
35078: PPUSH
35079: PPUSH
35080: PPUSH
35081: PPUSH
35082: PPUSH
35083: PPUSH
35084: PPUSH
35085: PPUSH
35086: PPUSH
35087: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
35088: LD_VAR 0 1
35092: PPUSH
35093: CALL_OW 302
35097: NOT
35098: IFTRUE 35117
35100: PUSH
35101: LD_VAR 0 2
35105: PPUSH
35106: LD_VAR 0 3
35110: PPUSH
35111: CALL_OW 488
35115: NOT
35116: OR
35117: IFTRUE 35126
35119: PUSH
35120: LD_VAR 0 4
35124: NOT
35125: OR
35126: IFFALSE 35130
// exit ;
35128: GO 35669
// if Count ( GetTaskList ( flame ) ) > 10 then
35130: LD_VAR 0 1
35134: PPUSH
35135: CALL_OW 437
35139: PPUSH
35140: CALL 42086 0 1
35144: PUSH
35145: LD_INT 10
35147: GREATER
35148: IFFALSE 35152
// exit ;
35150: GO 35669
// list := [ ] ;
35152: LD_ADDR_VAR 0 13
35156: PUSH
35157: EMPTY
35158: ST_TO_ADDR
// if x - r < 0 then
35159: LD_VAR 0 2
35163: PUSH
35164: LD_VAR 0 4
35168: MINUS
35169: PUSH
35170: LD_INT 0
35172: LESS
35173: IFFALSE 35185
// min_x := 0 else
35175: LD_ADDR_VAR 0 7
35179: PUSH
35180: LD_INT 0
35182: ST_TO_ADDR
35183: GO 35201
// min_x := x - r ;
35185: LD_ADDR_VAR 0 7
35189: PUSH
35190: LD_VAR 0 2
35194: PUSH
35195: LD_VAR 0 4
35199: MINUS
35200: ST_TO_ADDR
// if y - r < 0 then
35201: LD_VAR 0 3
35205: PUSH
35206: LD_VAR 0 4
35210: MINUS
35211: PUSH
35212: LD_INT 0
35214: LESS
35215: IFFALSE 35227
// min_y := 0 else
35217: LD_ADDR_VAR 0 8
35221: PUSH
35222: LD_INT 0
35224: ST_TO_ADDR
35225: GO 35243
// min_y := y - r ;
35227: LD_ADDR_VAR 0 8
35231: PUSH
35232: LD_VAR 0 3
35236: PUSH
35237: LD_VAR 0 4
35241: MINUS
35242: ST_TO_ADDR
// max_x := x + r ;
35243: LD_ADDR_VAR 0 9
35247: PUSH
35248: LD_VAR 0 2
35252: PUSH
35253: LD_VAR 0 4
35257: PLUS
35258: ST_TO_ADDR
// max_y := y + r ;
35259: LD_ADDR_VAR 0 10
35263: PUSH
35264: LD_VAR 0 3
35268: PUSH
35269: LD_VAR 0 4
35273: PLUS
35274: ST_TO_ADDR
// for _x = min_x to max_x do
35275: LD_ADDR_VAR 0 11
35279: PUSH
35280: DOUBLE
35281: LD_VAR 0 7
35285: DEC
35286: ST_TO_ADDR
35287: LD_VAR 0 9
35291: PUSH
35292: FOR_TO
35293: IFFALSE 35412
// for _y = min_y to max_y do
35295: LD_ADDR_VAR 0 12
35299: PUSH
35300: DOUBLE
35301: LD_VAR 0 8
35305: DEC
35306: ST_TO_ADDR
35307: LD_VAR 0 10
35311: PUSH
35312: FOR_TO
35313: IFFALSE 35408
// begin if not ValidHex ( _x , _y ) then
35315: LD_VAR 0 11
35319: PPUSH
35320: LD_VAR 0 12
35324: PPUSH
35325: CALL_OW 488
35329: NOT
35330: IFFALSE 35334
// continue ;
35332: GO 35312
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35334: LD_VAR 0 11
35338: PPUSH
35339: LD_VAR 0 12
35343: PPUSH
35344: CALL_OW 351
35348: IFFALSE 35366
35350: PUSH
35351: LD_VAR 0 11
35355: PPUSH
35356: LD_VAR 0 12
35360: PPUSH
35361: CALL_OW 554
35365: AND
35366: IFFALSE 35406
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35368: LD_ADDR_VAR 0 13
35372: PUSH
35373: LD_VAR 0 13
35377: PPUSH
35378: LD_VAR 0 13
35382: PUSH
35383: LD_INT 1
35385: PLUS
35386: PPUSH
35387: LD_VAR 0 11
35391: PUSH
35392: LD_VAR 0 12
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PPUSH
35401: CALL_OW 2
35405: ST_TO_ADDR
// end ;
35406: GO 35312
35408: POP
35409: POP
35410: GO 35292
35412: POP
35413: POP
// if not list then
35414: LD_VAR 0 13
35418: NOT
35419: IFFALSE 35423
// exit ;
35421: GO 35669
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
35423: LD_ADDR_VAR 0 13
35427: PUSH
35428: LD_VAR 0 1
35432: PPUSH
35433: LD_VAR 0 13
35437: PPUSH
35438: LD_INT 1
35440: PPUSH
35441: LD_INT 1
35443: PPUSH
35444: CALL 45492 0 4
35448: ST_TO_ADDR
// ComStop ( flame ) ;
35449: LD_VAR 0 1
35453: PPUSH
35454: CALL_OW 141
// for i in list do
35458: LD_ADDR_VAR 0 6
35462: PUSH
35463: LD_VAR 0 13
35467: PUSH
35468: FOR_IN
35469: IFFALSE 35500
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
35471: LD_VAR 0 1
35475: PPUSH
35476: LD_VAR 0 6
35480: PUSH
35481: LD_INT 1
35483: ARRAY
35484: PPUSH
35485: LD_VAR 0 6
35489: PUSH
35490: LD_INT 2
35492: ARRAY
35493: PPUSH
35494: CALL_OW 176
35498: GO 35468
35500: POP
35501: POP
// repeat wait ( 0 0$1 ) ;
35502: LD_INT 35
35504: PPUSH
35505: CALL_OW 67
// task := GetTaskList ( flame ) ;
35509: LD_ADDR_VAR 0 14
35513: PUSH
35514: LD_VAR 0 1
35518: PPUSH
35519: CALL_OW 437
35523: ST_TO_ADDR
// if not task then
35524: LD_VAR 0 14
35528: NOT
35529: IFFALSE 35533
// exit ;
35531: GO 35669
// if task [ 1 ] [ 1 ] <> | then
35533: LD_VAR 0 14
35537: PUSH
35538: LD_INT 1
35540: ARRAY
35541: PUSH
35542: LD_INT 1
35544: ARRAY
35545: PUSH
35546: LD_STRING |
35548: NONEQUAL
35549: IFFALSE 35553
// exit ;
35551: GO 35669
// _x := task [ 1 ] [ 2 ] ;
35553: LD_ADDR_VAR 0 11
35557: PUSH
35558: LD_VAR 0 14
35562: PUSH
35563: LD_INT 1
35565: ARRAY
35566: PUSH
35567: LD_INT 2
35569: ARRAY
35570: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
35571: LD_ADDR_VAR 0 12
35575: PUSH
35576: LD_VAR 0 14
35580: PUSH
35581: LD_INT 1
35583: ARRAY
35584: PUSH
35585: LD_INT 3
35587: ARRAY
35588: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
35589: LD_VAR 0 11
35593: PPUSH
35594: LD_VAR 0 12
35598: PPUSH
35599: CALL_OW 351
35603: NOT
35604: IFTRUE 35623
35606: PUSH
35607: LD_VAR 0 11
35611: PPUSH
35612: LD_VAR 0 12
35616: PPUSH
35617: CALL_OW 554
35621: NOT
35622: OR
35623: IFFALSE 35657
// begin task := Delete ( task , 1 ) ;
35625: LD_ADDR_VAR 0 14
35629: PUSH
35630: LD_VAR 0 14
35634: PPUSH
35635: LD_INT 1
35637: PPUSH
35638: CALL_OW 3
35642: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
35643: LD_VAR 0 1
35647: PPUSH
35648: LD_VAR 0 14
35652: PPUSH
35653: CALL_OW 446
// end ; until not HasTask ( flame ) ;
35657: LD_VAR 0 1
35661: PPUSH
35662: CALL_OW 314
35666: NOT
35667: IFFALSE 35502
// end ;
35669: LD_VAR 0 5
35673: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35674: LD_EXP 101
35678: NOT
35679: IFFALSE 35729
35681: GO 35683
35683: DISABLE
// begin initHack := true ;
35684: LD_ADDR_EXP 101
35688: PUSH
35689: LD_INT 1
35691: ST_TO_ADDR
// hackTanks := [ ] ;
35692: LD_ADDR_EXP 102
35696: PUSH
35697: EMPTY
35698: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35699: LD_ADDR_EXP 103
35703: PUSH
35704: EMPTY
35705: ST_TO_ADDR
// hackLimit := 3 ;
35706: LD_ADDR_EXP 104
35710: PUSH
35711: LD_INT 3
35713: ST_TO_ADDR
// hackDist := 12 ;
35714: LD_ADDR_EXP 105
35718: PUSH
35719: LD_INT 12
35721: ST_TO_ADDR
// hackCounter := [ ] ;
35722: LD_ADDR_EXP 106
35726: PUSH
35727: EMPTY
35728: ST_TO_ADDR
// end ;
35729: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35730: LD_EXP 101
35734: IFFALSE 35752
35736: PUSH
35737: LD_INT 34
35739: PUSH
35740: LD_INT 99
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PPUSH
35747: CALL_OW 69
35751: AND
35752: IFFALSE 36005
35754: GO 35756
35756: DISABLE
35757: LD_INT 0
35759: PPUSH
35760: PPUSH
// begin enable ;
35761: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35762: LD_ADDR_VAR 0 1
35766: PUSH
35767: LD_INT 34
35769: PUSH
35770: LD_INT 99
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PPUSH
35777: CALL_OW 69
35781: PUSH
35782: FOR_IN
35783: IFFALSE 36003
// begin if not i in hackTanks then
35785: LD_VAR 0 1
35789: PUSH
35790: LD_EXP 102
35794: IN
35795: NOT
35796: IFFALSE 35879
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35798: LD_ADDR_EXP 102
35802: PUSH
35803: LD_EXP 102
35807: PPUSH
35808: LD_EXP 102
35812: PUSH
35813: LD_INT 1
35815: PLUS
35816: PPUSH
35817: LD_VAR 0 1
35821: PPUSH
35822: CALL_OW 1
35826: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35827: LD_ADDR_EXP 103
35831: PUSH
35832: LD_EXP 103
35836: PPUSH
35837: LD_EXP 103
35841: PUSH
35842: LD_INT 1
35844: PLUS
35845: PPUSH
35846: EMPTY
35847: PPUSH
35848: CALL_OW 1
35852: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35853: LD_ADDR_EXP 106
35857: PUSH
35858: LD_EXP 106
35862: PPUSH
35863: LD_EXP 106
35867: PUSH
35868: LD_INT 1
35870: PLUS
35871: PPUSH
35872: EMPTY
35873: PPUSH
35874: CALL_OW 1
35878: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35879: LD_VAR 0 1
35883: PPUSH
35884: CALL_OW 302
35888: NOT
35889: IFFALSE 35902
// begin HackUnlinkAll ( i ) ;
35891: LD_VAR 0 1
35895: PPUSH
35896: CALL 36008 0 1
// continue ;
35900: GO 35782
// end ; HackCheckCapturedStatus ( i ) ;
35902: LD_VAR 0 1
35906: PPUSH
35907: CALL 36453 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35911: LD_ADDR_VAR 0 2
35915: PUSH
35916: LD_INT 81
35918: PUSH
35919: LD_VAR 0 1
35923: PPUSH
35924: CALL_OW 255
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 33
35935: PUSH
35936: LD_INT 3
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 91
35945: PUSH
35946: LD_VAR 0 1
35950: PUSH
35951: LD_EXP 105
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 50
35963: PUSH
35964: EMPTY
35965: LIST
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: PPUSH
35973: CALL_OW 69
35977: ST_TO_ADDR
// if not tmp then
35978: LD_VAR 0 2
35982: NOT
35983: IFFALSE 35987
// continue ;
35985: GO 35782
// HackLink ( i , tmp ) ;
35987: LD_VAR 0 1
35991: PPUSH
35992: LD_VAR 0 2
35996: PPUSH
35997: CALL 36144 0 2
// end ;
36001: GO 35782
36003: POP
36004: POP
// end ;
36005: PPOPN 2
36007: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36008: LD_INT 0
36010: PPUSH
36011: PPUSH
36012: PPUSH
// if not hack in hackTanks then
36013: LD_VAR 0 1
36017: PUSH
36018: LD_EXP 102
36022: IN
36023: NOT
36024: IFFALSE 36028
// exit ;
36026: GO 36139
// index := GetElementIndex ( hackTanks , hack ) ;
36028: LD_ADDR_VAR 0 4
36032: PUSH
36033: LD_EXP 102
36037: PPUSH
36038: LD_VAR 0 1
36042: PPUSH
36043: CALL 44787 0 2
36047: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36048: LD_EXP 103
36052: PUSH
36053: LD_VAR 0 4
36057: ARRAY
36058: IFFALSE 36139
// begin for i in hackTanksCaptured [ index ] do
36060: LD_ADDR_VAR 0 3
36064: PUSH
36065: LD_EXP 103
36069: PUSH
36070: LD_VAR 0 4
36074: ARRAY
36075: PUSH
36076: FOR_IN
36077: IFFALSE 36103
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36079: LD_VAR 0 3
36083: PUSH
36084: LD_INT 1
36086: ARRAY
36087: PPUSH
36088: LD_VAR 0 3
36092: PUSH
36093: LD_INT 2
36095: ARRAY
36096: PPUSH
36097: CALL_OW 235
36101: GO 36076
36103: POP
36104: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36105: LD_ADDR_EXP 103
36109: PUSH
36110: LD_EXP 103
36114: PPUSH
36115: LD_VAR 0 4
36119: PPUSH
36120: EMPTY
36121: PPUSH
36122: CALL_OW 1
36126: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36127: LD_VAR 0 1
36131: PPUSH
36132: LD_INT 0
36134: PPUSH
36135: CALL_OW 505
// end ; end ;
36139: LD_VAR 0 2
36143: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36144: LD_INT 0
36146: PPUSH
36147: PPUSH
36148: PPUSH
// if not hack in hackTanks or not vehicles then
36149: LD_VAR 0 1
36153: PUSH
36154: LD_EXP 102
36158: IN
36159: NOT
36160: IFTRUE 36169
36162: PUSH
36163: LD_VAR 0 2
36167: NOT
36168: OR
36169: IFFALSE 36173
// exit ;
36171: GO 36448
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36173: LD_ADDR_VAR 0 2
36177: PUSH
36178: LD_VAR 0 1
36182: PPUSH
36183: LD_VAR 0 2
36187: PPUSH
36188: LD_INT 1
36190: PPUSH
36191: LD_INT 1
36193: PPUSH
36194: CALL 45439 0 4
36198: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36199: LD_ADDR_VAR 0 5
36203: PUSH
36204: LD_EXP 102
36208: PPUSH
36209: LD_VAR 0 1
36213: PPUSH
36214: CALL 44787 0 2
36218: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36219: LD_EXP 103
36223: PUSH
36224: LD_VAR 0 5
36228: ARRAY
36229: PUSH
36230: LD_EXP 104
36234: LESS
36235: IFFALSE 36424
// begin for i := 1 to vehicles do
36237: LD_ADDR_VAR 0 4
36241: PUSH
36242: DOUBLE
36243: LD_INT 1
36245: DEC
36246: ST_TO_ADDR
36247: LD_VAR 0 2
36251: PUSH
36252: FOR_TO
36253: IFFALSE 36422
// begin if hackTanksCaptured [ index ] = hackLimit then
36255: LD_EXP 103
36259: PUSH
36260: LD_VAR 0 5
36264: ARRAY
36265: PUSH
36266: LD_EXP 104
36270: EQUAL
36271: IFFALSE 36275
// break ;
36273: GO 36422
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36275: LD_ADDR_EXP 106
36279: PUSH
36280: LD_EXP 106
36284: PPUSH
36285: LD_VAR 0 5
36289: PPUSH
36290: LD_EXP 106
36294: PUSH
36295: LD_VAR 0 5
36299: ARRAY
36300: PUSH
36301: LD_INT 1
36303: PLUS
36304: PPUSH
36305: CALL_OW 1
36309: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36310: LD_ADDR_EXP 103
36314: PUSH
36315: LD_EXP 103
36319: PPUSH
36320: LD_VAR 0 5
36324: PUSH
36325: LD_EXP 103
36329: PUSH
36330: LD_VAR 0 5
36334: ARRAY
36335: PUSH
36336: LD_INT 1
36338: PLUS
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PPUSH
36344: LD_VAR 0 2
36348: PUSH
36349: LD_VAR 0 4
36353: ARRAY
36354: PUSH
36355: LD_VAR 0 2
36359: PUSH
36360: LD_VAR 0 4
36364: ARRAY
36365: PPUSH
36366: CALL_OW 255
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PPUSH
36375: CALL 45004 0 3
36379: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36380: LD_VAR 0 2
36384: PUSH
36385: LD_VAR 0 4
36389: ARRAY
36390: PPUSH
36391: LD_VAR 0 1
36395: PPUSH
36396: CALL_OW 255
36400: PPUSH
36401: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36405: LD_VAR 0 2
36409: PUSH
36410: LD_VAR 0 4
36414: ARRAY
36415: PPUSH
36416: CALL_OW 141
// end ;
36420: GO 36252
36422: POP
36423: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36424: LD_VAR 0 1
36428: PPUSH
36429: LD_EXP 103
36433: PUSH
36434: LD_VAR 0 5
36438: ARRAY
36439: PUSH
36440: LD_INT 0
36442: PLUS
36443: PPUSH
36444: CALL_OW 505
// end ;
36448: LD_VAR 0 3
36452: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36453: LD_INT 0
36455: PPUSH
36456: PPUSH
36457: PPUSH
36458: PPUSH
// if not hack in hackTanks then
36459: LD_VAR 0 1
36463: PUSH
36464: LD_EXP 102
36468: IN
36469: NOT
36470: IFFALSE 36474
// exit ;
36472: GO 36718
// index := GetElementIndex ( hackTanks , hack ) ;
36474: LD_ADDR_VAR 0 4
36478: PUSH
36479: LD_EXP 102
36483: PPUSH
36484: LD_VAR 0 1
36488: PPUSH
36489: CALL 44787 0 2
36493: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36494: LD_ADDR_VAR 0 3
36498: PUSH
36499: DOUBLE
36500: LD_EXP 103
36504: PUSH
36505: LD_VAR 0 4
36509: ARRAY
36510: INC
36511: ST_TO_ADDR
36512: LD_INT 1
36514: PUSH
36515: FOR_DOWNTO
36516: IFFALSE 36692
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36518: LD_ADDR_VAR 0 5
36522: PUSH
36523: LD_EXP 103
36527: PUSH
36528: LD_VAR 0 4
36532: ARRAY
36533: PUSH
36534: LD_VAR 0 3
36538: ARRAY
36539: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36540: LD_VAR 0 5
36544: PUSH
36545: LD_INT 1
36547: ARRAY
36548: PPUSH
36549: CALL_OW 302
36553: NOT
36554: IFTRUE 36582
36556: PUSH
36557: LD_VAR 0 5
36561: PUSH
36562: LD_INT 1
36564: ARRAY
36565: PPUSH
36566: CALL_OW 255
36570: PUSH
36571: LD_VAR 0 1
36575: PPUSH
36576: CALL_OW 255
36580: NONEQUAL
36581: OR
36582: IFFALSE 36690
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36584: LD_VAR 0 5
36588: PUSH
36589: LD_INT 1
36591: ARRAY
36592: PPUSH
36593: CALL_OW 305
36597: IFFALSE 36625
36599: PUSH
36600: LD_VAR 0 5
36604: PUSH
36605: LD_INT 1
36607: ARRAY
36608: PPUSH
36609: CALL_OW 255
36613: PUSH
36614: LD_VAR 0 1
36618: PPUSH
36619: CALL_OW 255
36623: EQUAL
36624: AND
36625: IFFALSE 36649
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36627: LD_VAR 0 5
36631: PUSH
36632: LD_INT 1
36634: ARRAY
36635: PPUSH
36636: LD_VAR 0 5
36640: PUSH
36641: LD_INT 2
36643: ARRAY
36644: PPUSH
36645: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36649: LD_ADDR_EXP 103
36653: PUSH
36654: LD_EXP 103
36658: PPUSH
36659: LD_VAR 0 4
36663: PPUSH
36664: LD_EXP 103
36668: PUSH
36669: LD_VAR 0 4
36673: ARRAY
36674: PPUSH
36675: LD_VAR 0 3
36679: PPUSH
36680: CALL_OW 3
36684: PPUSH
36685: CALL_OW 1
36689: ST_TO_ADDR
// end ; end ;
36690: GO 36515
36692: POP
36693: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36694: LD_VAR 0 1
36698: PPUSH
36699: LD_EXP 103
36703: PUSH
36704: LD_VAR 0 4
36708: ARRAY
36709: PUSH
36710: LD_INT 0
36712: PLUS
36713: PPUSH
36714: CALL_OW 505
// end ;
36718: LD_VAR 0 2
36722: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36723: LD_INT 0
36725: PPUSH
36726: PPUSH
36727: PPUSH
36728: PPUSH
// if not hack in hackTanks then
36729: LD_VAR 0 1
36733: PUSH
36734: LD_EXP 102
36738: IN
36739: NOT
36740: IFFALSE 36744
// exit ;
36742: GO 36829
// index := GetElementIndex ( hackTanks , hack ) ;
36744: LD_ADDR_VAR 0 5
36748: PUSH
36749: LD_EXP 102
36753: PPUSH
36754: LD_VAR 0 1
36758: PPUSH
36759: CALL 44787 0 2
36763: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36764: LD_ADDR_VAR 0 4
36768: PUSH
36769: DOUBLE
36770: LD_INT 1
36772: DEC
36773: ST_TO_ADDR
36774: LD_EXP 103
36778: PUSH
36779: LD_VAR 0 5
36783: ARRAY
36784: PUSH
36785: FOR_TO
36786: IFFALSE 36827
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36788: LD_EXP 103
36792: PUSH
36793: LD_VAR 0 5
36797: ARRAY
36798: PUSH
36799: LD_VAR 0 4
36803: ARRAY
36804: PUSH
36805: LD_INT 1
36807: ARRAY
36808: PUSH
36809: LD_VAR 0 2
36813: EQUAL
36814: IFFALSE 36825
// KillUnit ( vehicle ) ;
36816: LD_VAR 0 2
36820: PPUSH
36821: CALL_OW 66
36825: GO 36785
36827: POP
36828: POP
// end ;
36829: LD_VAR 0 3
36833: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
36834: LD_EXP 107
36838: NOT
36839: IFFALSE 36972
36841: GO 36843
36843: DISABLE
36844: LD_INT 0
36846: PPUSH
// begin initMiner := true ;
36847: LD_ADDR_EXP 107
36851: PUSH
36852: LD_INT 1
36854: ST_TO_ADDR
// minersList := [ ] ;
36855: LD_ADDR_EXP 108
36859: PUSH
36860: EMPTY
36861: ST_TO_ADDR
// minerMinesList := [ ] ;
36862: LD_ADDR_EXP 109
36866: PUSH
36867: EMPTY
36868: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
36869: LD_ADDR_EXP 110
36873: PUSH
36874: LD_INT 10
36876: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36877: LD_ADDR_VAR 0 1
36881: PUSH
36882: LD_INT 34
36884: PUSH
36885: LD_INT 81
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PPUSH
36892: CALL_OW 69
36896: PUSH
36897: FOR_IN
36898: IFFALSE 36970
// begin if not i in minersList then
36900: LD_VAR 0 1
36904: PUSH
36905: LD_EXP 108
36909: IN
36910: NOT
36911: IFFALSE 36968
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36913: LD_ADDR_EXP 108
36917: PUSH
36918: LD_EXP 108
36922: PPUSH
36923: LD_EXP 108
36927: PUSH
36928: LD_INT 1
36930: PLUS
36931: PPUSH
36932: LD_VAR 0 1
36936: PPUSH
36937: CALL_OW 1
36941: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36942: LD_ADDR_EXP 109
36946: PUSH
36947: LD_EXP 109
36951: PPUSH
36952: LD_EXP 109
36956: PUSH
36957: LD_INT 1
36959: PLUS
36960: PPUSH
36961: EMPTY
36962: PPUSH
36963: CALL_OW 1
36967: ST_TO_ADDR
// end end ;
36968: GO 36897
36970: POP
36971: POP
// end ;
36972: PPOPN 1
36974: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
36975: LD_EXP 107
36979: IFFALSE 37010
36981: PUSH
36982: LD_EXP 109
36986: PPUSH
36987: CALL 42086 0 1
36991: IFTRUE 37009
36993: PUSH
36994: LD_INT 34
36996: PUSH
36997: LD_INT 81
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PPUSH
37004: CALL_OW 69
37008: OR
37009: AND
37010: IFFALSE 37530
37012: GO 37014
37014: DISABLE
37015: LD_INT 0
37017: PPUSH
37018: PPUSH
37019: PPUSH
37020: PPUSH
// begin enable ;
37021: ENABLE
// for i := minerMinesList downto 1 do
37022: LD_ADDR_VAR 0 1
37026: PUSH
37027: DOUBLE
37028: LD_EXP 109
37032: INC
37033: ST_TO_ADDR
37034: LD_INT 1
37036: PUSH
37037: FOR_DOWNTO
37038: IFFALSE 37528
// begin side := GetSide ( minersList [ i ] ) ;
37040: LD_ADDR_VAR 0 3
37044: PUSH
37045: LD_EXP 108
37049: PUSH
37050: LD_VAR 0 1
37054: ARRAY
37055: PPUSH
37056: CALL_OW 255
37060: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
37061: LD_EXP 108
37065: PUSH
37066: LD_VAR 0 1
37070: ARRAY
37071: PPUSH
37072: CALL_OW 300
37076: IFFALSE 37097
37078: PUSH
37079: LD_VAR 0 3
37083: PUSH
37084: LD_OWVAR 2
37088: PUSH
37089: LD_INT 9
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: IN
37096: AND
37097: IFFALSE 37130
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
37099: LD_EXP 108
37103: PUSH
37104: LD_VAR 0 1
37108: ARRAY
37109: PPUSH
37110: LD_EXP 109
37114: PUSH
37115: LD_VAR 0 1
37119: ARRAY
37120: PPUSH
37121: CALL 42086 0 1
37125: PPUSH
37126: CALL_OW 505
// if not minerMinesList [ i ] then
37130: LD_EXP 109
37134: PUSH
37135: LD_VAR 0 1
37139: ARRAY
37140: NOT
37141: IFFALSE 37145
// continue ;
37143: GO 37037
// for j := minerMinesList [ i ] downto 1 do
37145: LD_ADDR_VAR 0 2
37149: PUSH
37150: DOUBLE
37151: LD_EXP 109
37155: PUSH
37156: LD_VAR 0 1
37160: ARRAY
37161: INC
37162: ST_TO_ADDR
37163: LD_INT 1
37165: PUSH
37166: FOR_DOWNTO
37167: IFFALSE 37524
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
37169: LD_EXP 108
37173: PUSH
37174: LD_VAR 0 1
37178: ARRAY
37179: PPUSH
37180: CALL_OW 301
37184: IFTRUE 37204
37186: PUSH
37187: LD_EXP 108
37191: PUSH
37192: LD_VAR 0 1
37196: ARRAY
37197: PPUSH
37198: CALL_OW 305
37202: NOT
37203: OR
37204: IFFALSE 37295
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37206: LD_EXP 109
37210: PUSH
37211: LD_VAR 0 1
37215: ARRAY
37216: PUSH
37217: LD_VAR 0 2
37221: ARRAY
37222: PUSH
37223: LD_INT 1
37225: ARRAY
37226: PPUSH
37227: LD_EXP 109
37231: PUSH
37232: LD_VAR 0 1
37236: ARRAY
37237: PUSH
37238: LD_VAR 0 2
37242: ARRAY
37243: PUSH
37244: LD_INT 2
37246: ARRAY
37247: PPUSH
37248: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37252: LD_ADDR_EXP 109
37256: PUSH
37257: LD_EXP 109
37261: PPUSH
37262: LD_VAR 0 1
37266: PPUSH
37267: LD_EXP 109
37271: PUSH
37272: LD_VAR 0 1
37276: ARRAY
37277: PPUSH
37278: LD_VAR 0 2
37282: PPUSH
37283: CALL_OW 3
37287: PPUSH
37288: CALL_OW 1
37292: ST_TO_ADDR
// continue ;
37293: GO 37166
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37295: LD_ADDR_VAR 0 4
37299: PUSH
37300: LD_EXP 109
37304: PUSH
37305: LD_VAR 0 1
37309: ARRAY
37310: PUSH
37311: LD_VAR 0 2
37315: ARRAY
37316: PUSH
37317: LD_INT 1
37319: ARRAY
37320: PPUSH
37321: LD_EXP 109
37325: PUSH
37326: LD_VAR 0 1
37330: ARRAY
37331: PUSH
37332: LD_VAR 0 2
37336: ARRAY
37337: PUSH
37338: LD_INT 2
37340: ARRAY
37341: PPUSH
37342: CALL_OW 428
37346: ST_TO_ADDR
// if not tmp then
37347: LD_VAR 0 4
37351: NOT
37352: IFFALSE 37356
// continue ;
37354: GO 37166
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37356: LD_VAR 0 4
37360: PUSH
37361: LD_INT 81
37363: PUSH
37364: LD_VAR 0 3
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PPUSH
37373: CALL_OW 69
37377: IN
37378: IFFALSE 37428
37380: PUSH
37381: LD_EXP 109
37385: PUSH
37386: LD_VAR 0 1
37390: ARRAY
37391: PUSH
37392: LD_VAR 0 2
37396: ARRAY
37397: PUSH
37398: LD_INT 1
37400: ARRAY
37401: PPUSH
37402: LD_EXP 109
37406: PUSH
37407: LD_VAR 0 1
37411: ARRAY
37412: PUSH
37413: LD_VAR 0 2
37417: ARRAY
37418: PUSH
37419: LD_INT 2
37421: ARRAY
37422: PPUSH
37423: CALL_OW 458
37427: AND
37428: IFFALSE 37522
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37430: LD_EXP 109
37434: PUSH
37435: LD_VAR 0 1
37439: ARRAY
37440: PUSH
37441: LD_VAR 0 2
37445: ARRAY
37446: PUSH
37447: LD_INT 1
37449: ARRAY
37450: PPUSH
37451: LD_EXP 109
37455: PUSH
37456: LD_VAR 0 1
37460: ARRAY
37461: PUSH
37462: LD_VAR 0 2
37466: ARRAY
37467: PUSH
37468: LD_INT 2
37470: ARRAY
37471: PPUSH
37472: LD_VAR 0 3
37476: PPUSH
37477: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37481: LD_ADDR_EXP 109
37485: PUSH
37486: LD_EXP 109
37490: PPUSH
37491: LD_VAR 0 1
37495: PPUSH
37496: LD_EXP 109
37500: PUSH
37501: LD_VAR 0 1
37505: ARRAY
37506: PPUSH
37507: LD_VAR 0 2
37511: PPUSH
37512: CALL_OW 3
37516: PPUSH
37517: CALL_OW 1
37521: ST_TO_ADDR
// end ; end ;
37522: GO 37166
37524: POP
37525: POP
// end ;
37526: GO 37037
37528: POP
37529: POP
// end ;
37530: PPOPN 4
37532: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
37533: LD_INT 0
37535: PPUSH
37536: PPUSH
37537: PPUSH
37538: PPUSH
// result := false ;
37539: LD_ADDR_VAR 0 4
37543: PUSH
37544: LD_INT 0
37546: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37547: LD_VAR 0 1
37551: PPUSH
37552: CALL_OW 264
37556: PUSH
37557: LD_INT 81
37559: EQUAL
37560: NOT
37561: IFFALSE 37565
// exit ;
37563: GO 37935
// side := GetSide ( unit ) ;
37565: LD_ADDR_VAR 0 6
37569: PUSH
37570: LD_VAR 0 1
37574: PPUSH
37575: CALL_OW 255
37579: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
37580: LD_ADDR_VAR 0 5
37584: PUSH
37585: LD_EXP 108
37589: PPUSH
37590: LD_VAR 0 1
37594: PPUSH
37595: CALL 44787 0 2
37599: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37600: LD_EXP 109
37604: PUSH
37605: LD_VAR 0 5
37609: ARRAY
37610: PUSH
37611: LD_EXP 110
37615: GREATEREQUAL
37616: IFFALSE 37620
// exit ;
37618: GO 37935
// ComMoveXY ( unit , x , y ) ;
37620: LD_VAR 0 1
37624: PPUSH
37625: LD_VAR 0 2
37629: PPUSH
37630: LD_VAR 0 3
37634: PPUSH
37635: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37639: LD_INT 35
37641: PPUSH
37642: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37646: LD_VAR 0 1
37650: PPUSH
37651: LD_VAR 0 2
37655: PPUSH
37656: LD_VAR 0 3
37660: PPUSH
37661: CALL 76843 0 3
37665: NOT
37666: IFFALSE 37679
37668: PUSH
37669: LD_VAR 0 1
37673: PPUSH
37674: CALL_OW 314
37678: AND
37679: IFFALSE 37683
// exit ;
37681: GO 37935
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37683: LD_VAR 0 2
37687: PPUSH
37688: LD_VAR 0 3
37692: PPUSH
37693: CALL_OW 428
37697: PUSH
37698: LD_VAR 0 1
37702: EQUAL
37703: IFFALSE 37717
37705: PUSH
37706: LD_VAR 0 1
37710: PPUSH
37711: CALL_OW 314
37715: NOT
37716: AND
37717: IFFALSE 37639
// if MineAtPos ( x , y ) then
37719: LD_VAR 0 2
37723: PPUSH
37724: LD_VAR 0 3
37728: PPUSH
37729: CALL_OW 458
37733: IFFALSE 37737
// exit ;
37735: GO 37935
// if your_side = side then
37737: LD_OWVAR 2
37741: PUSH
37742: LD_VAR 0 6
37746: EQUAL
37747: IFFALSE 37766
// PlaySoundXY ( x , y , PlantMine ) ;
37749: LD_VAR 0 2
37753: PPUSH
37754: LD_VAR 0 3
37758: PPUSH
37759: LD_STRING PlantMine
37761: PPUSH
37762: CALL_OW 366
// repeat wait ( 1 ) ;
37766: LD_INT 1
37768: PPUSH
37769: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
37773: LD_VAR 0 2
37777: PPUSH
37778: LD_VAR 0 3
37782: PPUSH
37783: LD_VAR 0 6
37787: PPUSH
37788: LD_INT 0
37790: PPUSH
37791: CALL_OW 454
37795: IFFALSE 37766
// if MineAtPos ( x , y ) then
37797: LD_VAR 0 2
37801: PPUSH
37802: LD_VAR 0 3
37806: PPUSH
37807: CALL_OW 458
37811: IFFALSE 37927
// begin for i in minerMinesList [ index ] do
37813: LD_ADDR_VAR 0 7
37817: PUSH
37818: LD_EXP 109
37822: PUSH
37823: LD_VAR 0 5
37827: ARRAY
37828: PUSH
37829: FOR_IN
37830: IFFALSE 37872
// if i [ 1 ] = x and i [ 2 ] = y then
37832: LD_VAR 0 7
37836: PUSH
37837: LD_INT 1
37839: ARRAY
37840: PUSH
37841: LD_VAR 0 2
37845: EQUAL
37846: IFFALSE 37864
37848: PUSH
37849: LD_VAR 0 7
37853: PUSH
37854: LD_INT 2
37856: ARRAY
37857: PUSH
37858: LD_VAR 0 3
37862: EQUAL
37863: AND
37864: IFFALSE 37870
// exit ;
37866: POP
37867: POP
37868: GO 37935
37870: GO 37829
37872: POP
37873: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37874: LD_ADDR_EXP 109
37878: PUSH
37879: LD_EXP 109
37883: PPUSH
37884: LD_VAR 0 5
37888: PUSH
37889: LD_EXP 109
37893: PUSH
37894: LD_VAR 0 5
37898: ARRAY
37899: PUSH
37900: LD_INT 1
37902: PLUS
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PPUSH
37908: LD_VAR 0 2
37912: PUSH
37913: LD_VAR 0 3
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PPUSH
37922: CALL 45004 0 3
37926: ST_TO_ADDR
// end ; result := true ;
37927: LD_ADDR_VAR 0 4
37931: PUSH
37932: LD_INT 1
37934: ST_TO_ADDR
// end ;
37935: LD_VAR 0 4
37939: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37940: LD_INT 0
37942: PPUSH
37943: PPUSH
37944: PPUSH
// if not unit in minersList then
37945: LD_VAR 0 1
37949: PUSH
37950: LD_EXP 108
37954: IN
37955: NOT
37956: IFFALSE 37960
// exit ;
37958: GO 38167
// index := GetElementIndex ( minersList , unit ) ;
37960: LD_ADDR_VAR 0 6
37964: PUSH
37965: LD_EXP 108
37969: PPUSH
37970: LD_VAR 0 1
37974: PPUSH
37975: CALL 44787 0 2
37979: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37980: LD_ADDR_VAR 0 5
37984: PUSH
37985: DOUBLE
37986: LD_EXP 109
37990: PUSH
37991: LD_VAR 0 6
37995: ARRAY
37996: INC
37997: ST_TO_ADDR
37998: LD_INT 1
38000: PUSH
38001: FOR_DOWNTO
38002: IFFALSE 38165
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38004: LD_EXP 109
38008: PUSH
38009: LD_VAR 0 6
38013: ARRAY
38014: PUSH
38015: LD_VAR 0 5
38019: ARRAY
38020: PUSH
38021: LD_INT 1
38023: ARRAY
38024: PPUSH
38025: LD_EXP 109
38029: PUSH
38030: LD_VAR 0 6
38034: ARRAY
38035: PUSH
38036: LD_VAR 0 5
38040: ARRAY
38041: PUSH
38042: LD_INT 2
38044: ARRAY
38045: PPUSH
38046: LD_VAR 0 2
38050: PPUSH
38051: LD_VAR 0 3
38055: PPUSH
38056: CALL_OW 298
38060: PUSH
38061: LD_INT 6
38063: LESS
38064: IFFALSE 38163
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38066: LD_EXP 109
38070: PUSH
38071: LD_VAR 0 6
38075: ARRAY
38076: PUSH
38077: LD_VAR 0 5
38081: ARRAY
38082: PUSH
38083: LD_INT 1
38085: ARRAY
38086: PPUSH
38087: LD_EXP 109
38091: PUSH
38092: LD_VAR 0 6
38096: ARRAY
38097: PUSH
38098: LD_VAR 0 5
38102: ARRAY
38103: PUSH
38104: LD_INT 2
38106: ARRAY
38107: PPUSH
38108: LD_VAR 0 1
38112: PPUSH
38113: CALL_OW 255
38117: PPUSH
38118: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38122: LD_ADDR_EXP 109
38126: PUSH
38127: LD_EXP 109
38131: PPUSH
38132: LD_VAR 0 6
38136: PPUSH
38137: LD_EXP 109
38141: PUSH
38142: LD_VAR 0 6
38146: ARRAY
38147: PPUSH
38148: LD_VAR 0 5
38152: PPUSH
38153: CALL_OW 3
38157: PPUSH
38158: CALL_OW 1
38162: ST_TO_ADDR
// end ; end ;
38163: GO 38001
38165: POP
38166: POP
// end ;
38167: LD_VAR 0 4
38171: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38172: LD_INT 0
38174: PPUSH
38175: PPUSH
38176: PPUSH
38177: PPUSH
38178: PPUSH
38179: PPUSH
38180: PPUSH
38181: PPUSH
38182: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38183: LD_VAR 0 1
38187: PPUSH
38188: CALL_OW 264
38192: PUSH
38193: LD_INT 81
38195: EQUAL
38196: NOT
38197: IFTRUE 38212
38199: PUSH
38200: LD_VAR 0 1
38204: PUSH
38205: LD_EXP 108
38209: IN
38210: NOT
38211: OR
38212: IFFALSE 38216
// exit ;
38214: GO 38542
// index := GetElementIndex ( minersList , unit ) ;
38216: LD_ADDR_VAR 0 6
38220: PUSH
38221: LD_EXP 108
38225: PPUSH
38226: LD_VAR 0 1
38230: PPUSH
38231: CALL 44787 0 2
38235: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38236: LD_ADDR_VAR 0 8
38240: PUSH
38241: LD_EXP 110
38245: PUSH
38246: LD_EXP 109
38250: PUSH
38251: LD_VAR 0 6
38255: ARRAY
38256: MINUS
38257: ST_TO_ADDR
// if not minesFreeAmount then
38258: LD_VAR 0 8
38262: NOT
38263: IFFALSE 38267
// exit ;
38265: GO 38542
// tmp := [ ] ;
38267: LD_ADDR_VAR 0 7
38271: PUSH
38272: EMPTY
38273: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38274: LD_ADDR_VAR 0 5
38278: PUSH
38279: DOUBLE
38280: LD_INT 1
38282: DEC
38283: ST_TO_ADDR
38284: LD_VAR 0 8
38288: PUSH
38289: FOR_TO
38290: IFFALSE 38489
// begin _d := rand ( 0 , 5 ) ;
38292: LD_ADDR_VAR 0 11
38296: PUSH
38297: LD_INT 0
38299: PPUSH
38300: LD_INT 5
38302: PPUSH
38303: CALL_OW 12
38307: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38308: LD_ADDR_VAR 0 12
38312: PUSH
38313: LD_INT 2
38315: PPUSH
38316: LD_INT 6
38318: PPUSH
38319: CALL_OW 12
38323: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38324: LD_ADDR_VAR 0 9
38328: PUSH
38329: LD_VAR 0 2
38333: PPUSH
38334: LD_VAR 0 11
38338: PPUSH
38339: LD_VAR 0 12
38343: PPUSH
38344: CALL_OW 272
38348: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38349: LD_ADDR_VAR 0 10
38353: PUSH
38354: LD_VAR 0 3
38358: PPUSH
38359: LD_VAR 0 11
38363: PPUSH
38364: LD_VAR 0 12
38368: PPUSH
38369: CALL_OW 273
38373: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38374: LD_VAR 0 9
38378: PPUSH
38379: LD_VAR 0 10
38383: PPUSH
38384: CALL_OW 488
38388: IFFALSE 38412
38390: PUSH
38391: LD_VAR 0 9
38395: PUSH
38396: LD_VAR 0 10
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_VAR 0 7
38409: IN
38410: NOT
38411: AND
38412: IFFALSE 38431
38414: PUSH
38415: LD_VAR 0 9
38419: PPUSH
38420: LD_VAR 0 10
38424: PPUSH
38425: CALL_OW 458
38429: NOT
38430: AND
38431: IFFALSE 38473
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38433: LD_ADDR_VAR 0 7
38437: PUSH
38438: LD_VAR 0 7
38442: PPUSH
38443: LD_VAR 0 7
38447: PUSH
38448: LD_INT 1
38450: PLUS
38451: PPUSH
38452: LD_VAR 0 9
38456: PUSH
38457: LD_VAR 0 10
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PPUSH
38466: CALL_OW 1
38470: ST_TO_ADDR
38471: GO 38487
// i := i - 1 ;
38473: LD_ADDR_VAR 0 5
38477: PUSH
38478: LD_VAR 0 5
38482: PUSH
38483: LD_INT 1
38485: MINUS
38486: ST_TO_ADDR
// end ;
38487: GO 38289
38489: POP
38490: POP
// for i in tmp do
38491: LD_ADDR_VAR 0 5
38495: PUSH
38496: LD_VAR 0 7
38500: PUSH
38501: FOR_IN
38502: IFFALSE 38540
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38504: LD_VAR 0 1
38508: PPUSH
38509: LD_VAR 0 5
38513: PUSH
38514: LD_INT 1
38516: ARRAY
38517: PPUSH
38518: LD_VAR 0 5
38522: PUSH
38523: LD_INT 2
38525: ARRAY
38526: PPUSH
38527: CALL 37533 0 3
38531: NOT
38532: IFFALSE 38538
// exit ;
38534: POP
38535: POP
38536: GO 38542
38538: GO 38501
38540: POP
38541: POP
// end ;
38542: LD_VAR 0 4
38546: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
38547: LD_INT 0
38549: PPUSH
38550: PPUSH
38551: PPUSH
38552: PPUSH
38553: PPUSH
38554: PPUSH
38555: PPUSH
38556: PPUSH
38557: PPUSH
// if GetClass ( unit ) <> class_sniper then
38558: LD_VAR 0 1
38562: PPUSH
38563: CALL_OW 257
38567: PUSH
38568: LD_INT 5
38570: NONEQUAL
38571: IFFALSE 38575
// exit ;
38573: GO 39045
// dist := 8 ;
38575: LD_ADDR_VAR 0 5
38579: PUSH
38580: LD_INT 8
38582: ST_TO_ADDR
// viewRange := 12 ;
38583: LD_ADDR_VAR 0 8
38587: PUSH
38588: LD_INT 12
38590: ST_TO_ADDR
// side := GetSide ( unit ) ;
38591: LD_ADDR_VAR 0 6
38595: PUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL_OW 255
38605: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38606: LD_INT 61
38608: PPUSH
38609: LD_VAR 0 6
38613: PPUSH
38614: CALL_OW 321
38618: PUSH
38619: LD_INT 2
38621: EQUAL
38622: IFFALSE 38632
// viewRange := 16 ;
38624: LD_ADDR_VAR 0 8
38628: PUSH
38629: LD_INT 16
38631: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38632: LD_VAR 0 1
38636: PPUSH
38637: LD_VAR 0 2
38641: PPUSH
38642: LD_VAR 0 3
38646: PPUSH
38647: CALL_OW 297
38651: PUSH
38652: LD_VAR 0 5
38656: GREATER
38657: IFFALSE 38736
// begin ComMoveXY ( unit , x , y ) ;
38659: LD_VAR 0 1
38663: PPUSH
38664: LD_VAR 0 2
38668: PPUSH
38669: LD_VAR 0 3
38673: PPUSH
38674: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38678: LD_INT 35
38680: PPUSH
38681: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38685: LD_VAR 0 1
38689: PPUSH
38690: LD_VAR 0 2
38694: PPUSH
38695: LD_VAR 0 3
38699: PPUSH
38700: CALL 76843 0 3
38704: NOT
38705: IFFALSE 38709
// exit ;
38707: GO 39045
// until GetDistUnitXY ( unit , x , y ) < dist ;
38709: LD_VAR 0 1
38713: PPUSH
38714: LD_VAR 0 2
38718: PPUSH
38719: LD_VAR 0 3
38723: PPUSH
38724: CALL_OW 297
38728: PUSH
38729: LD_VAR 0 5
38733: LESS
38734: IFFALSE 38678
// end ; ComTurnXY ( unit , x , y ) ;
38736: LD_VAR 0 1
38740: PPUSH
38741: LD_VAR 0 2
38745: PPUSH
38746: LD_VAR 0 3
38750: PPUSH
38751: CALL_OW 118
// repeat if Multiplayer then
38755: LD_OWVAR 4
38759: IFFALSE 38770
// wait ( 35 ) else
38761: LD_INT 35
38763: PPUSH
38764: CALL_OW 67
38768: GO 38777
// wait ( 5 ) ;
38770: LD_INT 5
38772: PPUSH
38773: CALL_OW 67
// _d := GetDir ( unit ) ;
38777: LD_ADDR_VAR 0 11
38781: PUSH
38782: LD_VAR 0 1
38786: PPUSH
38787: CALL_OW 254
38791: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
38792: LD_ADDR_VAR 0 7
38796: PUSH
38797: LD_VAR 0 1
38801: PPUSH
38802: CALL_OW 250
38806: PPUSH
38807: LD_VAR 0 1
38811: PPUSH
38812: CALL_OW 251
38816: PPUSH
38817: LD_VAR 0 2
38821: PPUSH
38822: LD_VAR 0 3
38826: PPUSH
38827: CALL 79479 0 4
38831: ST_TO_ADDR
// until dir = _d ;
38832: LD_VAR 0 7
38836: PUSH
38837: LD_VAR 0 11
38841: EQUAL
38842: IFFALSE 38755
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
38844: LD_ADDR_VAR 0 9
38848: PUSH
38849: LD_VAR 0 1
38853: PPUSH
38854: CALL_OW 250
38858: PPUSH
38859: LD_VAR 0 7
38863: PPUSH
38864: LD_VAR 0 5
38868: PPUSH
38869: CALL_OW 272
38873: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
38874: LD_ADDR_VAR 0 10
38878: PUSH
38879: LD_VAR 0 1
38883: PPUSH
38884: CALL_OW 251
38888: PPUSH
38889: LD_VAR 0 7
38893: PPUSH
38894: LD_VAR 0 5
38898: PPUSH
38899: CALL_OW 273
38903: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38904: LD_VAR 0 9
38908: PPUSH
38909: LD_VAR 0 10
38913: PPUSH
38914: CALL_OW 488
38918: NOT
38919: IFFALSE 38923
// exit ;
38921: GO 39045
// ComAnimCustom ( unit , 1 ) ;
38923: LD_VAR 0 1
38927: PPUSH
38928: LD_INT 1
38930: PPUSH
38931: CALL_OW 592
// p := 0 ;
38935: LD_ADDR_VAR 0 12
38939: PUSH
38940: LD_INT 0
38942: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38943: LD_VAR 0 9
38947: PPUSH
38948: LD_VAR 0 10
38952: PPUSH
38953: LD_VAR 0 6
38957: PPUSH
38958: LD_VAR 0 8
38962: PPUSH
38963: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
38967: LD_INT 35
38969: PPUSH
38970: CALL_OW 67
// p := Inc ( p ) ;
38974: LD_ADDR_VAR 0 12
38978: PUSH
38979: LD_VAR 0 12
38983: PPUSH
38984: CALL 79435 0 1
38988: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
38989: LD_VAR 0 12
38993: PUSH
38994: LD_INT 3
38996: EQUAL
38997: IFTRUE 39011
38999: PUSH
39000: LD_VAR 0 1
39004: PPUSH
39005: CALL_OW 302
39009: NOT
39010: OR
39011: IFTRUE 39024
39013: PUSH
39014: LD_VAR 0 1
39018: PPUSH
39019: CALL_OW 301
39023: OR
39024: IFFALSE 38967
// RemoveSeeing ( _x , _y , side ) ;
39026: LD_VAR 0 9
39030: PPUSH
39031: LD_VAR 0 10
39035: PPUSH
39036: LD_VAR 0 6
39040: PPUSH
39041: CALL_OW 331
// end ;
39045: LD_VAR 0 4
39049: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
39050: LD_INT 0
39052: PPUSH
39053: PPUSH
39054: PPUSH
39055: PPUSH
39056: PPUSH
39057: PPUSH
39058: PPUSH
39059: PPUSH
39060: PPUSH
39061: PPUSH
39062: PPUSH
// if not unit then
39063: LD_VAR 0 1
39067: NOT
39068: IFFALSE 39072
// exit ;
39070: GO 39343
// side := GetSide ( unit ) ;
39072: LD_ADDR_VAR 0 3
39076: PUSH
39077: LD_VAR 0 1
39081: PPUSH
39082: CALL_OW 255
39086: ST_TO_ADDR
// x := GetX ( unit ) ;
39087: LD_ADDR_VAR 0 5
39091: PUSH
39092: LD_VAR 0 1
39096: PPUSH
39097: CALL_OW 250
39101: ST_TO_ADDR
// y := GetY ( unit ) ;
39102: LD_ADDR_VAR 0 6
39106: PUSH
39107: LD_VAR 0 1
39111: PPUSH
39112: CALL_OW 251
39116: ST_TO_ADDR
// r := 8 ;
39117: LD_ADDR_VAR 0 4
39121: PUSH
39122: LD_INT 8
39124: ST_TO_ADDR
// if x - r < 0 then
39125: LD_VAR 0 5
39129: PUSH
39130: LD_VAR 0 4
39134: MINUS
39135: PUSH
39136: LD_INT 0
39138: LESS
39139: IFFALSE 39151
// min_x := 0 else
39141: LD_ADDR_VAR 0 7
39145: PUSH
39146: LD_INT 0
39148: ST_TO_ADDR
39149: GO 39167
// min_x := x - r ;
39151: LD_ADDR_VAR 0 7
39155: PUSH
39156: LD_VAR 0 5
39160: PUSH
39161: LD_VAR 0 4
39165: MINUS
39166: ST_TO_ADDR
// if y - r < 0 then
39167: LD_VAR 0 6
39171: PUSH
39172: LD_VAR 0 4
39176: MINUS
39177: PUSH
39178: LD_INT 0
39180: LESS
39181: IFFALSE 39193
// min_y := 0 else
39183: LD_ADDR_VAR 0 8
39187: PUSH
39188: LD_INT 0
39190: ST_TO_ADDR
39191: GO 39209
// min_y := y - r ;
39193: LD_ADDR_VAR 0 8
39197: PUSH
39198: LD_VAR 0 6
39202: PUSH
39203: LD_VAR 0 4
39207: MINUS
39208: ST_TO_ADDR
// max_x := x + r ;
39209: LD_ADDR_VAR 0 9
39213: PUSH
39214: LD_VAR 0 5
39218: PUSH
39219: LD_VAR 0 4
39223: PLUS
39224: ST_TO_ADDR
// max_y := y + r ;
39225: LD_ADDR_VAR 0 10
39229: PUSH
39230: LD_VAR 0 6
39234: PUSH
39235: LD_VAR 0 4
39239: PLUS
39240: ST_TO_ADDR
// for _x = min_x to max_x do
39241: LD_ADDR_VAR 0 11
39245: PUSH
39246: DOUBLE
39247: LD_VAR 0 7
39251: DEC
39252: ST_TO_ADDR
39253: LD_VAR 0 9
39257: PUSH
39258: FOR_TO
39259: IFFALSE 39341
// for _y = min_y to max_y do
39261: LD_ADDR_VAR 0 12
39265: PUSH
39266: DOUBLE
39267: LD_VAR 0 8
39271: DEC
39272: ST_TO_ADDR
39273: LD_VAR 0 10
39277: PUSH
39278: FOR_TO
39279: IFFALSE 39337
// begin if not ValidHex ( _x , _y ) then
39281: LD_VAR 0 11
39285: PPUSH
39286: LD_VAR 0 12
39290: PPUSH
39291: CALL_OW 488
39295: NOT
39296: IFFALSE 39300
// continue ;
39298: GO 39278
// if MineAtPos ( _x , _y ) then
39300: LD_VAR 0 11
39304: PPUSH
39305: LD_VAR 0 12
39309: PPUSH
39310: CALL_OW 458
39314: IFFALSE 39335
// ViewMineAtPos ( _x , _y , side ) ;
39316: LD_VAR 0 11
39320: PPUSH
39321: LD_VAR 0 12
39325: PPUSH
39326: LD_VAR 0 3
39330: PPUSH
39331: CALL_OW 457
// end ;
39335: GO 39278
39337: POP
39338: POP
39339: GO 39258
39341: POP
39342: POP
// end ;
39343: LD_VAR 0 2
39347: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
39348: LD_INT 0
39350: PPUSH
39351: PPUSH
39352: PPUSH
39353: PPUSH
39354: PPUSH
39355: PPUSH
39356: PPUSH
// if not units then
39357: LD_VAR 0 1
39361: NOT
39362: IFFALSE 39366
// exit ;
39364: GO 39830
// scaners := [ ] ;
39366: LD_ADDR_VAR 0 6
39370: PUSH
39371: EMPTY
39372: ST_TO_ADDR
// for i in units do
39373: LD_ADDR_VAR 0 3
39377: PUSH
39378: LD_VAR 0 1
39382: PUSH
39383: FOR_IN
39384: IFFALSE 39541
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
39386: LD_VAR 0 3
39390: PPUSH
39391: CALL_OW 264
39395: PUSH
39396: LD_INT 11
39398: NONEQUAL
39399: IFTRUE 39413
39401: PUSH
39402: LD_VAR 0 3
39406: PPUSH
39407: CALL_OW 302
39411: NOT
39412: OR
39413: IFTRUE 39430
39415: PUSH
39416: LD_VAR 0 3
39420: PPUSH
39421: CALL_OW 110
39425: PUSH
39426: LD_INT 502
39428: EQUAL
39429: OR
39430: IFFALSE 39434
// continue ;
39432: GO 39383
// ComStop ( i ) ;
39434: LD_VAR 0 3
39438: PPUSH
39439: CALL_OW 141
// x := GetX ( i ) ;
39443: LD_ADDR_VAR 0 4
39447: PUSH
39448: LD_VAR 0 3
39452: PPUSH
39453: CALL_OW 250
39457: ST_TO_ADDR
// y := GetY ( i ) ;
39458: LD_ADDR_VAR 0 5
39462: PUSH
39463: LD_VAR 0 3
39467: PPUSH
39468: CALL_OW 251
39472: ST_TO_ADDR
// if GetSide ( i ) = your_side then
39473: LD_VAR 0 3
39477: PPUSH
39478: CALL_OW 255
39482: PUSH
39483: LD_OWVAR 2
39487: EQUAL
39488: IFFALSE 39507
// PlaySoundXY ( x , y , mineDetector ) ;
39490: LD_VAR 0 4
39494: PPUSH
39495: LD_VAR 0 5
39499: PPUSH
39500: LD_STRING mineDetector
39502: PPUSH
39503: CALL_OW 366
// scaners := Join ( scaners , i ) ;
39507: LD_ADDR_VAR 0 6
39511: PUSH
39512: LD_VAR 0 6
39516: PPUSH
39517: LD_VAR 0 3
39521: PPUSH
39522: CALL 78062 0 2
39526: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
39527: LD_VAR 0 3
39531: PPUSH
39532: LD_INT 502
39534: PPUSH
39535: CALL_OW 109
// end ;
39539: GO 39383
39541: POP
39542: POP
// if not scaners then
39543: LD_VAR 0 6
39547: NOT
39548: IFFALSE 39552
// exit ;
39550: GO 39830
// wait ( 3 ) ;
39552: LD_INT 3
39554: PPUSH
39555: CALL_OW 67
// timer := 6 ;
39559: LD_ADDR_VAR 0 7
39563: PUSH
39564: LD_INT 6
39566: ST_TO_ADDR
// repeat for i in scaners do
39567: LD_ADDR_VAR 0 3
39571: PUSH
39572: LD_VAR 0 6
39576: PUSH
39577: FOR_IN
39578: IFFALSE 39728
// begin side := GetSide ( i ) ;
39580: LD_ADDR_VAR 0 8
39584: PUSH
39585: LD_VAR 0 3
39589: PPUSH
39590: CALL_OW 255
39594: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
39595: LD_VAR 0 3
39599: PPUSH
39600: CALL_OW 302
39604: NOT
39605: IFTRUE 39618
39607: PUSH
39608: LD_VAR 0 3
39612: PPUSH
39613: CALL_OW 314
39617: OR
39618: IFTRUE 39649
39620: PUSH
39621: LD_VAR 0 3
39625: PPUSH
39626: CALL_OW 263
39630: PUSH
39631: LD_INT 1
39633: EQUAL
39634: IFFALSE 39648
39636: PUSH
39637: LD_VAR 0 3
39641: PPUSH
39642: CALL_OW 311
39646: NOT
39647: AND
39648: OR
39649: IFFALSE 39693
// begin SetUnitDisplayNumber ( i , 0 ) ;
39651: LD_VAR 0 3
39655: PPUSH
39656: LD_INT 0
39658: PPUSH
39659: CALL_OW 505
// SetTag ( i , 0 ) ;
39663: LD_VAR 0 3
39667: PPUSH
39668: LD_INT 0
39670: PPUSH
39671: CALL_OW 109
// scaners := scaners diff i ;
39675: LD_ADDR_VAR 0 6
39679: PUSH
39680: LD_VAR 0 6
39684: PUSH
39685: LD_VAR 0 3
39689: DIFF
39690: ST_TO_ADDR
// continue ;
39691: GO 39577
// end ; if side in [ your_side , 9 ] then
39693: LD_VAR 0 8
39697: PUSH
39698: LD_OWVAR 2
39702: PUSH
39703: LD_INT 9
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: IN
39710: IFFALSE 39726
// SetUnitDisplayNumber ( i , timer ) ;
39712: LD_VAR 0 3
39716: PPUSH
39717: LD_VAR 0 7
39721: PPUSH
39722: CALL_OW 505
// end ;
39726: GO 39577
39728: POP
39729: POP
// if not scaners then
39730: LD_VAR 0 6
39734: NOT
39735: IFFALSE 39739
// exit ;
39737: GO 39830
// timer := Dec ( timer ) ;
39739: LD_ADDR_VAR 0 7
39743: PUSH
39744: LD_VAR 0 7
39748: PPUSH
39749: CALL 79457 0 1
39753: ST_TO_ADDR
// wait ( 0 0$1 ) ;
39754: LD_INT 35
39756: PPUSH
39757: CALL_OW 67
// until timer = 0 ;
39761: LD_VAR 0 7
39765: PUSH
39766: LD_INT 0
39768: EQUAL
39769: IFFALSE 39567
// if not scaners then
39771: LD_VAR 0 6
39775: NOT
39776: IFFALSE 39780
// exit ;
39778: GO 39830
// for i in scaners do
39780: LD_ADDR_VAR 0 3
39784: PUSH
39785: LD_VAR 0 6
39789: PUSH
39790: FOR_IN
39791: IFFALSE 39828
// begin SetUnitDisplayNumber ( i , 0 ) ;
39793: LD_VAR 0 3
39797: PPUSH
39798: LD_INT 0
39800: PPUSH
39801: CALL_OW 505
// SetTag ( i , 0 ) ;
39805: LD_VAR 0 3
39809: PPUSH
39810: LD_INT 0
39812: PPUSH
39813: CALL_OW 109
// RevealDetectorMine ( i ) ;
39817: LD_VAR 0 3
39821: PPUSH
39822: CALL 39050 0 1
// end ;
39826: GO 39790
39828: POP
39829: POP
// end ;
39830: LD_VAR 0 2
39834: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
39835: LD_INT 0
39837: PPUSH
// if p1 = mine_detector_mode then
39838: LD_VAR 0 2
39842: PUSH
39843: LD_INT 103
39845: EQUAL
39846: IFFALSE 39857
// DetectMine ( units ) ;
39848: LD_VAR 0 1
39852: PPUSH
39853: CALL 39348 0 1
// end ; end_of_file
39857: LD_VAR 0 7
39861: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39862: LD_INT 0
39864: PPUSH
39865: PPUSH
// if exist_mode then
39866: LD_VAR 0 2
39870: IFFALSE 39916
// begin unit := CreateCharacter ( prefix & ident ) ;
39872: LD_ADDR_VAR 0 5
39876: PUSH
39877: LD_VAR 0 3
39881: PUSH
39882: LD_VAR 0 1
39886: STR
39887: PPUSH
39888: CALL_OW 34
39892: ST_TO_ADDR
// if unit then
39893: LD_VAR 0 5
39897: IFFALSE 39914
// DeleteCharacters ( prefix & ident ) ;
39899: LD_VAR 0 3
39903: PUSH
39904: LD_VAR 0 1
39908: STR
39909: PPUSH
39910: CALL_OW 40
// end else
39914: GO 39931
// unit := NewCharacter ( ident ) ;
39916: LD_ADDR_VAR 0 5
39920: PUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: CALL_OW 25
39930: ST_TO_ADDR
// result := unit ;
39931: LD_ADDR_VAR 0 4
39935: PUSH
39936: LD_VAR 0 5
39940: ST_TO_ADDR
// end ;
39941: LD_VAR 0 4
39945: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
39946: LD_INT 0
39948: PPUSH
39949: PPUSH
// if exist_mode then
39950: LD_VAR 0 2
39954: IFFALSE 39979
// unit := CreateCharacter ( prefix & ident ) else
39956: LD_ADDR_VAR 0 5
39960: PUSH
39961: LD_VAR 0 3
39965: PUSH
39966: LD_VAR 0 1
39970: STR
39971: PPUSH
39972: CALL_OW 34
39976: ST_TO_ADDR
39977: GO 39994
// unit := NewCharacter ( ident ) ;
39979: LD_ADDR_VAR 0 5
39983: PUSH
39984: LD_VAR 0 1
39988: PPUSH
39989: CALL_OW 25
39993: ST_TO_ADDR
// result := unit ;
39994: LD_ADDR_VAR 0 4
39998: PUSH
39999: LD_VAR 0 5
40003: ST_TO_ADDR
// end ;
40004: LD_VAR 0 4
40008: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40009: LD_INT 0
40011: PPUSH
40012: PPUSH
// if not side or not nation then
40013: LD_VAR 0 1
40017: NOT
40018: IFTRUE 40027
40020: PUSH
40021: LD_VAR 0 2
40025: NOT
40026: OR
40027: IFFALSE 40031
// exit ;
40029: GO 40825
// case nation of nation_american :
40031: LD_VAR 0 2
40035: PUSH
40036: LD_INT 1
40038: DOUBLE
40039: EQUAL
40040: IFTRUE 40044
40042: GO 40266
40044: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
40045: LD_ADDR_VAR 0 4
40049: PUSH
40050: LD_INT 35
40052: PUSH
40053: LD_INT 45
40055: PUSH
40056: LD_INT 46
40058: PUSH
40059: LD_INT 47
40061: PUSH
40062: LD_INT 82
40064: PUSH
40065: LD_INT 83
40067: PUSH
40068: LD_INT 84
40070: PUSH
40071: LD_INT 85
40073: PUSH
40074: LD_INT 86
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: LD_INT 6
40085: PUSH
40086: LD_INT 15
40088: PUSH
40089: LD_INT 16
40091: PUSH
40092: LD_INT 7
40094: PUSH
40095: LD_INT 12
40097: PUSH
40098: LD_INT 13
40100: PUSH
40101: LD_INT 10
40103: PUSH
40104: LD_INT 14
40106: PUSH
40107: LD_INT 20
40109: PUSH
40110: LD_INT 21
40112: PUSH
40113: LD_INT 22
40115: PUSH
40116: LD_INT 25
40118: PUSH
40119: LD_INT 32
40121: PUSH
40122: LD_INT 27
40124: PUSH
40125: LD_INT 36
40127: PUSH
40128: LD_INT 69
40130: PUSH
40131: LD_INT 39
40133: PUSH
40134: LD_INT 34
40136: PUSH
40137: LD_INT 40
40139: PUSH
40140: LD_INT 48
40142: PUSH
40143: LD_INT 49
40145: PUSH
40146: LD_INT 50
40148: PUSH
40149: LD_INT 51
40151: PUSH
40152: LD_INT 52
40154: PUSH
40155: LD_INT 53
40157: PUSH
40158: LD_INT 54
40160: PUSH
40161: LD_INT 55
40163: PUSH
40164: LD_INT 56
40166: PUSH
40167: LD_INT 57
40169: PUSH
40170: LD_INT 58
40172: PUSH
40173: LD_INT 59
40175: PUSH
40176: LD_INT 60
40178: PUSH
40179: LD_INT 61
40181: PUSH
40182: LD_INT 62
40184: PUSH
40185: LD_INT 80
40187: PUSH
40188: LD_INT 82
40190: PUSH
40191: LD_INT 83
40193: PUSH
40194: LD_INT 84
40196: PUSH
40197: LD_INT 85
40199: PUSH
40200: LD_INT 86
40202: PUSH
40203: LD_INT 90
40205: PUSH
40206: LD_INT 93
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: ST_TO_ADDR
40264: GO 40747
40266: LD_INT 2
40268: DOUBLE
40269: EQUAL
40270: IFTRUE 40274
40272: GO 40508
40274: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
40275: LD_ADDR_VAR 0 4
40279: PUSH
40280: LD_INT 35
40282: PUSH
40283: LD_INT 45
40285: PUSH
40286: LD_INT 46
40288: PUSH
40289: LD_INT 47
40291: PUSH
40292: LD_INT 82
40294: PUSH
40295: LD_INT 83
40297: PUSH
40298: LD_INT 84
40300: PUSH
40301: LD_INT 85
40303: PUSH
40304: LD_INT 87
40306: PUSH
40307: LD_INT 70
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: LD_INT 11
40315: PUSH
40316: LD_INT 3
40318: PUSH
40319: LD_INT 4
40321: PUSH
40322: LD_INT 5
40324: PUSH
40325: LD_INT 6
40327: PUSH
40328: LD_INT 15
40330: PUSH
40331: LD_INT 18
40333: PUSH
40334: LD_INT 7
40336: PUSH
40337: LD_INT 17
40339: PUSH
40340: LD_INT 8
40342: PUSH
40343: LD_INT 20
40345: PUSH
40346: LD_INT 21
40348: PUSH
40349: LD_INT 22
40351: PUSH
40352: LD_INT 72
40354: PUSH
40355: LD_INT 26
40357: PUSH
40358: LD_INT 69
40360: PUSH
40361: LD_INT 39
40363: PUSH
40364: LD_INT 40
40366: PUSH
40367: LD_INT 41
40369: PUSH
40370: LD_INT 42
40372: PUSH
40373: LD_INT 43
40375: PUSH
40376: LD_INT 48
40378: PUSH
40379: LD_INT 49
40381: PUSH
40382: LD_INT 50
40384: PUSH
40385: LD_INT 51
40387: PUSH
40388: LD_INT 52
40390: PUSH
40391: LD_INT 53
40393: PUSH
40394: LD_INT 54
40396: PUSH
40397: LD_INT 55
40399: PUSH
40400: LD_INT 56
40402: PUSH
40403: LD_INT 60
40405: PUSH
40406: LD_INT 61
40408: PUSH
40409: LD_INT 62
40411: PUSH
40412: LD_INT 66
40414: PUSH
40415: LD_INT 67
40417: PUSH
40418: LD_INT 68
40420: PUSH
40421: LD_INT 81
40423: PUSH
40424: LD_INT 82
40426: PUSH
40427: LD_INT 83
40429: PUSH
40430: LD_INT 84
40432: PUSH
40433: LD_INT 85
40435: PUSH
40436: LD_INT 87
40438: PUSH
40439: LD_INT 88
40441: PUSH
40442: LD_INT 92
40444: PUSH
40445: LD_INT 94
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: ST_TO_ADDR
40506: GO 40747
40508: LD_INT 3
40510: DOUBLE
40511: EQUAL
40512: IFTRUE 40516
40514: GO 40746
40516: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
40517: LD_ADDR_VAR 0 4
40521: PUSH
40522: LD_INT 46
40524: PUSH
40525: LD_INT 47
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: LD_INT 82
40536: PUSH
40537: LD_INT 83
40539: PUSH
40540: LD_INT 84
40542: PUSH
40543: LD_INT 85
40545: PUSH
40546: LD_INT 86
40548: PUSH
40549: LD_INT 11
40551: PUSH
40552: LD_INT 9
40554: PUSH
40555: LD_INT 20
40557: PUSH
40558: LD_INT 19
40560: PUSH
40561: LD_INT 21
40563: PUSH
40564: LD_INT 24
40566: PUSH
40567: LD_INT 22
40569: PUSH
40570: LD_INT 25
40572: PUSH
40573: LD_INT 28
40575: PUSH
40576: LD_INT 29
40578: PUSH
40579: LD_INT 30
40581: PUSH
40582: LD_INT 31
40584: PUSH
40585: LD_INT 37
40587: PUSH
40588: LD_INT 38
40590: PUSH
40591: LD_INT 32
40593: PUSH
40594: LD_INT 27
40596: PUSH
40597: LD_INT 33
40599: PUSH
40600: LD_INT 69
40602: PUSH
40603: LD_INT 39
40605: PUSH
40606: LD_INT 34
40608: PUSH
40609: LD_INT 40
40611: PUSH
40612: LD_INT 71
40614: PUSH
40615: LD_INT 23
40617: PUSH
40618: LD_INT 44
40620: PUSH
40621: LD_INT 48
40623: PUSH
40624: LD_INT 49
40626: PUSH
40627: LD_INT 50
40629: PUSH
40630: LD_INT 51
40632: PUSH
40633: LD_INT 52
40635: PUSH
40636: LD_INT 53
40638: PUSH
40639: LD_INT 54
40641: PUSH
40642: LD_INT 55
40644: PUSH
40645: LD_INT 56
40647: PUSH
40648: LD_INT 57
40650: PUSH
40651: LD_INT 58
40653: PUSH
40654: LD_INT 59
40656: PUSH
40657: LD_INT 63
40659: PUSH
40660: LD_INT 64
40662: PUSH
40663: LD_INT 65
40665: PUSH
40666: LD_INT 82
40668: PUSH
40669: LD_INT 83
40671: PUSH
40672: LD_INT 84
40674: PUSH
40675: LD_INT 85
40677: PUSH
40678: LD_INT 86
40680: PUSH
40681: LD_INT 89
40683: PUSH
40684: LD_INT 91
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: ST_TO_ADDR
40744: GO 40747
40746: POP
// if state > - 1 and state < 3 then
40747: LD_VAR 0 3
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: GREATER
40756: IFFALSE 40768
40758: PUSH
40759: LD_VAR 0 3
40763: PUSH
40764: LD_INT 3
40766: LESS
40767: AND
40768: IFFALSE 40825
// for i in result do
40770: LD_ADDR_VAR 0 5
40774: PUSH
40775: LD_VAR 0 4
40779: PUSH
40780: FOR_IN
40781: IFFALSE 40823
// if GetTech ( i , side ) <> state then
40783: LD_VAR 0 5
40787: PPUSH
40788: LD_VAR 0 1
40792: PPUSH
40793: CALL_OW 321
40797: PUSH
40798: LD_VAR 0 3
40802: NONEQUAL
40803: IFFALSE 40821
// result := result diff i ;
40805: LD_ADDR_VAR 0 4
40809: PUSH
40810: LD_VAR 0 4
40814: PUSH
40815: LD_VAR 0 5
40819: DIFF
40820: ST_TO_ADDR
40821: GO 40780
40823: POP
40824: POP
// end ;
40825: LD_VAR 0 4
40829: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40830: LD_INT 0
40832: PPUSH
40833: PPUSH
40834: PPUSH
// result := true ;
40835: LD_ADDR_VAR 0 3
40839: PUSH
40840: LD_INT 1
40842: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40843: LD_ADDR_VAR 0 5
40847: PUSH
40848: LD_VAR 0 2
40852: PPUSH
40853: CALL_OW 480
40857: ST_TO_ADDR
// if not tmp then
40858: LD_VAR 0 5
40862: NOT
40863: IFFALSE 40867
// exit ;
40865: GO 40916
// for i in tmp do
40867: LD_ADDR_VAR 0 4
40871: PUSH
40872: LD_VAR 0 5
40876: PUSH
40877: FOR_IN
40878: IFFALSE 40914
// if GetTech ( i , side ) <> state_researched then
40880: LD_VAR 0 4
40884: PPUSH
40885: LD_VAR 0 1
40889: PPUSH
40890: CALL_OW 321
40894: PUSH
40895: LD_INT 2
40897: NONEQUAL
40898: IFFALSE 40912
// begin result := false ;
40900: LD_ADDR_VAR 0 3
40904: PUSH
40905: LD_INT 0
40907: ST_TO_ADDR
// exit ;
40908: POP
40909: POP
40910: GO 40916
// end ;
40912: GO 40877
40914: POP
40915: POP
// end ;
40916: LD_VAR 0 3
40920: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40921: LD_INT 0
40923: PPUSH
40924: PPUSH
40925: PPUSH
40926: PPUSH
40927: PPUSH
40928: PPUSH
40929: PPUSH
40930: PPUSH
40931: PPUSH
40932: PPUSH
40933: PPUSH
40934: PPUSH
40935: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40936: LD_VAR 0 1
40940: NOT
40941: IFTRUE 40958
40943: PUSH
40944: LD_VAR 0 1
40948: PPUSH
40949: CALL_OW 257
40953: PUSH
40954: LD_INT 9
40956: NONEQUAL
40957: OR
40958: IFFALSE 40962
// exit ;
40960: GO 41541
// side := GetSide ( unit ) ;
40962: LD_ADDR_VAR 0 9
40966: PUSH
40967: LD_VAR 0 1
40971: PPUSH
40972: CALL_OW 255
40976: ST_TO_ADDR
// tech_space := tech_spacanom ;
40977: LD_ADDR_VAR 0 12
40981: PUSH
40982: LD_INT 29
40984: ST_TO_ADDR
// tech_time := tech_taurad ;
40985: LD_ADDR_VAR 0 13
40989: PUSH
40990: LD_INT 28
40992: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40993: LD_ADDR_VAR 0 11
40997: PUSH
40998: LD_VAR 0 1
41002: PPUSH
41003: CALL_OW 310
41007: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41008: LD_VAR 0 11
41012: PPUSH
41013: CALL_OW 247
41017: PUSH
41018: LD_INT 2
41020: EQUAL
41021: IFFALSE 41025
// exit ;
41023: GO 41541
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41025: LD_ADDR_VAR 0 8
41029: PUSH
41030: LD_INT 81
41032: PUSH
41033: LD_VAR 0 9
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 3
41044: PUSH
41045: LD_INT 21
41047: PUSH
41048: LD_INT 3
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PPUSH
41063: CALL_OW 69
41067: ST_TO_ADDR
// if not tmp then
41068: LD_VAR 0 8
41072: NOT
41073: IFFALSE 41077
// exit ;
41075: GO 41541
// if in_unit then
41077: LD_VAR 0 11
41081: IFFALSE 41105
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41083: LD_ADDR_VAR 0 10
41087: PUSH
41088: LD_VAR 0 8
41092: PPUSH
41093: LD_VAR 0 11
41097: PPUSH
41098: CALL_OW 74
41102: ST_TO_ADDR
41103: GO 41125
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41105: LD_ADDR_VAR 0 10
41109: PUSH
41110: LD_VAR 0 8
41114: PPUSH
41115: LD_VAR 0 1
41119: PPUSH
41120: CALL_OW 74
41124: ST_TO_ADDR
// if not enemy then
41125: LD_VAR 0 10
41129: NOT
41130: IFFALSE 41134
// exit ;
41132: GO 41541
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41134: LD_VAR 0 11
41138: IFFALSE 41160
41140: PUSH
41141: LD_VAR 0 11
41145: PPUSH
41146: LD_VAR 0 10
41150: PPUSH
41151: CALL_OW 296
41155: PUSH
41156: LD_INT 13
41158: GREATER
41159: AND
41160: IFTRUE 41182
41162: PUSH
41163: LD_VAR 0 1
41167: PPUSH
41168: LD_VAR 0 10
41172: PPUSH
41173: CALL_OW 296
41177: PUSH
41178: LD_INT 12
41180: GREATER
41181: OR
41182: IFFALSE 41186
// exit ;
41184: GO 41541
// missile := [ 1 ] ;
41186: LD_ADDR_VAR 0 14
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: EMPTY
41195: LIST
41196: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41197: LD_VAR 0 9
41201: PPUSH
41202: LD_VAR 0 12
41206: PPUSH
41207: CALL_OW 325
41211: IFFALSE 41240
// missile := Replace ( missile , missile + 1 , 2 ) ;
41213: LD_ADDR_VAR 0 14
41217: PUSH
41218: LD_VAR 0 14
41222: PPUSH
41223: LD_VAR 0 14
41227: PUSH
41228: LD_INT 1
41230: PLUS
41231: PPUSH
41232: LD_INT 2
41234: PPUSH
41235: CALL_OW 1
41239: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41240: LD_VAR 0 9
41244: PPUSH
41245: LD_VAR 0 13
41249: PPUSH
41250: CALL_OW 325
41254: IFFALSE 41278
41256: PUSH
41257: LD_VAR 0 10
41261: PPUSH
41262: CALL_OW 255
41266: PPUSH
41267: LD_VAR 0 13
41271: PPUSH
41272: CALL_OW 325
41276: NOT
41277: AND
41278: IFFALSE 41307
// missile := Replace ( missile , missile + 1 , 3 ) ;
41280: LD_ADDR_VAR 0 14
41284: PUSH
41285: LD_VAR 0 14
41289: PPUSH
41290: LD_VAR 0 14
41294: PUSH
41295: LD_INT 1
41297: PLUS
41298: PPUSH
41299: LD_INT 3
41301: PPUSH
41302: CALL_OW 1
41306: ST_TO_ADDR
// if missile < 2 then
41307: LD_VAR 0 14
41311: PUSH
41312: LD_INT 2
41314: LESS
41315: IFFALSE 41319
// exit ;
41317: GO 41541
// x := GetX ( enemy ) ;
41319: LD_ADDR_VAR 0 4
41323: PUSH
41324: LD_VAR 0 10
41328: PPUSH
41329: CALL_OW 250
41333: ST_TO_ADDR
// y := GetY ( enemy ) ;
41334: LD_ADDR_VAR 0 5
41338: PUSH
41339: LD_VAR 0 10
41343: PPUSH
41344: CALL_OW 251
41348: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41349: LD_ADDR_VAR 0 6
41353: PUSH
41354: LD_VAR 0 4
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PPUSH
41363: LD_INT 1
41365: PPUSH
41366: CALL_OW 12
41370: PLUS
41371: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41372: LD_ADDR_VAR 0 7
41376: PUSH
41377: LD_VAR 0 5
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PPUSH
41386: LD_INT 1
41388: PPUSH
41389: CALL_OW 12
41393: PLUS
41394: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41395: LD_VAR 0 6
41399: PPUSH
41400: LD_VAR 0 7
41404: PPUSH
41405: CALL_OW 488
41409: NOT
41410: IFFALSE 41432
// begin _x := x ;
41412: LD_ADDR_VAR 0 6
41416: PUSH
41417: LD_VAR 0 4
41421: ST_TO_ADDR
// _y := y ;
41422: LD_ADDR_VAR 0 7
41426: PUSH
41427: LD_VAR 0 5
41431: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41432: LD_ADDR_VAR 0 3
41436: PUSH
41437: LD_INT 1
41439: PPUSH
41440: LD_VAR 0 14
41444: PPUSH
41445: CALL_OW 12
41449: ST_TO_ADDR
// case i of 1 :
41450: LD_VAR 0 3
41454: PUSH
41455: LD_INT 1
41457: DOUBLE
41458: EQUAL
41459: IFTRUE 41463
41461: GO 41480
41463: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41464: LD_VAR 0 1
41468: PPUSH
41469: LD_VAR 0 10
41473: PPUSH
41474: CALL_OW 115
41478: GO 41541
41480: LD_INT 2
41482: DOUBLE
41483: EQUAL
41484: IFTRUE 41488
41486: GO 41510
41488: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41489: LD_VAR 0 1
41493: PPUSH
41494: LD_VAR 0 6
41498: PPUSH
41499: LD_VAR 0 7
41503: PPUSH
41504: CALL_OW 153
41508: GO 41541
41510: LD_INT 3
41512: DOUBLE
41513: EQUAL
41514: IFTRUE 41518
41516: GO 41540
41518: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41519: LD_VAR 0 1
41523: PPUSH
41524: LD_VAR 0 6
41528: PPUSH
41529: LD_VAR 0 7
41533: PPUSH
41534: CALL_OW 154
41538: GO 41541
41540: POP
// end ;
41541: LD_VAR 0 2
41545: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41546: LD_INT 0
41548: PPUSH
41549: PPUSH
41550: PPUSH
41551: PPUSH
41552: PPUSH
41553: PPUSH
// if not unit or not building then
41554: LD_VAR 0 1
41558: NOT
41559: IFTRUE 41568
41561: PUSH
41562: LD_VAR 0 2
41566: NOT
41567: OR
41568: IFFALSE 41572
// exit ;
41570: GO 41730
// x := GetX ( building ) ;
41572: LD_ADDR_VAR 0 5
41576: PUSH
41577: LD_VAR 0 2
41581: PPUSH
41582: CALL_OW 250
41586: ST_TO_ADDR
// y := GetY ( building ) ;
41587: LD_ADDR_VAR 0 6
41591: PUSH
41592: LD_VAR 0 2
41596: PPUSH
41597: CALL_OW 251
41601: ST_TO_ADDR
// for i := 0 to 5 do
41602: LD_ADDR_VAR 0 4
41606: PUSH
41607: DOUBLE
41608: LD_INT 0
41610: DEC
41611: ST_TO_ADDR
41612: LD_INT 5
41614: PUSH
41615: FOR_TO
41616: IFFALSE 41728
// begin _x := ShiftX ( x , i , 3 ) ;
41618: LD_ADDR_VAR 0 7
41622: PUSH
41623: LD_VAR 0 5
41627: PPUSH
41628: LD_VAR 0 4
41632: PPUSH
41633: LD_INT 3
41635: PPUSH
41636: CALL_OW 272
41640: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41641: LD_ADDR_VAR 0 8
41645: PUSH
41646: LD_VAR 0 6
41650: PPUSH
41651: LD_VAR 0 4
41655: PPUSH
41656: LD_INT 3
41658: PPUSH
41659: CALL_OW 273
41663: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41664: LD_VAR 0 7
41668: PPUSH
41669: LD_VAR 0 8
41673: PPUSH
41674: CALL_OW 488
41678: NOT
41679: IFFALSE 41683
// continue ;
41681: GO 41615
// if HexInfo ( _x , _y ) = 0 then
41683: LD_VAR 0 7
41687: PPUSH
41688: LD_VAR 0 8
41692: PPUSH
41693: CALL_OW 428
41697: PUSH
41698: LD_INT 0
41700: EQUAL
41701: IFFALSE 41726
// begin ComMoveXY ( unit , _x , _y ) ;
41703: LD_VAR 0 1
41707: PPUSH
41708: LD_VAR 0 7
41712: PPUSH
41713: LD_VAR 0 8
41717: PPUSH
41718: CALL_OW 111
// exit ;
41722: POP
41723: POP
41724: GO 41730
// end ; end ;
41726: GO 41615
41728: POP
41729: POP
// end ;
41730: LD_VAR 0 3
41734: RET
// export function ScanBase ( side , base_area ) ; begin
41735: LD_INT 0
41737: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41738: LD_ADDR_VAR 0 3
41742: PUSH
41743: LD_VAR 0 2
41747: PPUSH
41748: LD_INT 81
41750: PUSH
41751: LD_VAR 0 1
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PPUSH
41760: CALL_OW 70
41764: ST_TO_ADDR
// end ;
41765: LD_VAR 0 3
41769: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41770: LD_INT 0
41772: PPUSH
41773: PPUSH
41774: PPUSH
41775: PPUSH
// result := false ;
41776: LD_ADDR_VAR 0 2
41780: PUSH
41781: LD_INT 0
41783: ST_TO_ADDR
// side := GetSide ( unit ) ;
41784: LD_ADDR_VAR 0 3
41788: PUSH
41789: LD_VAR 0 1
41793: PPUSH
41794: CALL_OW 255
41798: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41799: LD_ADDR_VAR 0 4
41803: PUSH
41804: LD_VAR 0 1
41808: PPUSH
41809: CALL_OW 248
41813: ST_TO_ADDR
// case nat of 1 :
41814: LD_VAR 0 4
41818: PUSH
41819: LD_INT 1
41821: DOUBLE
41822: EQUAL
41823: IFTRUE 41827
41825: GO 41838
41827: POP
// tech := tech_lassight ; 2 :
41828: LD_ADDR_VAR 0 5
41832: PUSH
41833: LD_INT 12
41835: ST_TO_ADDR
41836: GO 41877
41838: LD_INT 2
41840: DOUBLE
41841: EQUAL
41842: IFTRUE 41846
41844: GO 41857
41846: POP
// tech := tech_mortar ; 3 :
41847: LD_ADDR_VAR 0 5
41851: PUSH
41852: LD_INT 41
41854: ST_TO_ADDR
41855: GO 41877
41857: LD_INT 3
41859: DOUBLE
41860: EQUAL
41861: IFTRUE 41865
41863: GO 41876
41865: POP
// tech := tech_bazooka ; end ;
41866: LD_ADDR_VAR 0 5
41870: PUSH
41871: LD_INT 44
41873: ST_TO_ADDR
41874: GO 41877
41876: POP
// if Researched ( side , tech ) then
41877: LD_VAR 0 3
41881: PPUSH
41882: LD_VAR 0 5
41886: PPUSH
41887: CALL_OW 325
41891: IFFALSE 41918
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41893: LD_ADDR_VAR 0 2
41897: PUSH
41898: LD_INT 5
41900: PUSH
41901: LD_INT 8
41903: PUSH
41904: LD_INT 9
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: LIST
41911: PUSH
41912: LD_VAR 0 4
41916: ARRAY
41917: ST_TO_ADDR
// end ;
41918: LD_VAR 0 2
41922: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41923: LD_INT 0
41925: PPUSH
41926: PPUSH
41927: PPUSH
// if not mines then
41928: LD_VAR 0 2
41932: NOT
41933: IFFALSE 41937
// exit ;
41935: GO 42081
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41937: LD_ADDR_VAR 0 5
41941: PUSH
41942: LD_INT 81
41944: PUSH
41945: LD_VAR 0 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 3
41956: PUSH
41957: LD_INT 21
41959: PUSH
41960: LD_INT 3
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PPUSH
41975: CALL_OW 69
41979: ST_TO_ADDR
// for i in mines do
41980: LD_ADDR_VAR 0 4
41984: PUSH
41985: LD_VAR 0 2
41989: PUSH
41990: FOR_IN
41991: IFFALSE 42079
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41993: LD_VAR 0 4
41997: PUSH
41998: LD_INT 1
42000: ARRAY
42001: PPUSH
42002: LD_VAR 0 4
42006: PUSH
42007: LD_INT 2
42009: ARRAY
42010: PPUSH
42011: CALL_OW 458
42015: NOT
42016: IFFALSE 42020
// continue ;
42018: GO 41990
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42020: LD_VAR 0 4
42024: PUSH
42025: LD_INT 1
42027: ARRAY
42028: PPUSH
42029: LD_VAR 0 4
42033: PUSH
42034: LD_INT 2
42036: ARRAY
42037: PPUSH
42038: CALL_OW 428
42042: PUSH
42043: LD_VAR 0 5
42047: IN
42048: IFFALSE 42077
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42050: LD_VAR 0 4
42054: PUSH
42055: LD_INT 1
42057: ARRAY
42058: PPUSH
42059: LD_VAR 0 4
42063: PUSH
42064: LD_INT 2
42066: ARRAY
42067: PPUSH
42068: LD_VAR 0 1
42072: PPUSH
42073: CALL_OW 456
// end ;
42077: GO 41990
42079: POP
42080: POP
// end ;
42081: LD_VAR 0 3
42085: RET
// export function Count ( array ) ; begin
42086: LD_INT 0
42088: PPUSH
// result := array + 0 ;
42089: LD_ADDR_VAR 0 2
42093: PUSH
42094: LD_VAR 0 1
42098: PUSH
42099: LD_INT 0
42101: PLUS
42102: ST_TO_ADDR
// end ;
42103: LD_VAR 0 2
42107: RET
// export function IsEmpty ( building ) ; begin
42108: LD_INT 0
42110: PPUSH
// if not building then
42111: LD_VAR 0 1
42115: NOT
42116: IFFALSE 42120
// exit ;
42118: GO 42163
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42120: LD_ADDR_VAR 0 2
42124: PUSH
42125: LD_VAR 0 1
42129: PUSH
42130: LD_INT 22
42132: PUSH
42133: LD_VAR 0 1
42137: PPUSH
42138: CALL_OW 255
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 58
42149: PUSH
42150: EMPTY
42151: LIST
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PPUSH
42157: CALL_OW 69
42161: IN
42162: ST_TO_ADDR
// end ;
42163: LD_VAR 0 2
42167: RET
// export function IsNotFull ( building ) ; var places ; begin
42168: LD_INT 0
42170: PPUSH
42171: PPUSH
// if not building then
42172: LD_VAR 0 1
42176: NOT
42177: IFFALSE 42181
// exit ;
42179: GO 42209
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42181: LD_ADDR_VAR 0 2
42185: PUSH
42186: LD_VAR 0 1
42190: PPUSH
42191: LD_INT 3
42193: PUSH
42194: LD_INT 62
42196: PUSH
42197: EMPTY
42198: LIST
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PPUSH
42204: CALL_OW 72
42208: ST_TO_ADDR
// end ;
42209: LD_VAR 0 2
42213: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42214: LD_INT 0
42216: PPUSH
42217: PPUSH
42218: PPUSH
42219: PPUSH
// tmp := [ ] ;
42220: LD_ADDR_VAR 0 3
42224: PUSH
42225: EMPTY
42226: ST_TO_ADDR
// list := [ ] ;
42227: LD_ADDR_VAR 0 5
42231: PUSH
42232: EMPTY
42233: ST_TO_ADDR
// for i = 16 to 25 do
42234: LD_ADDR_VAR 0 4
42238: PUSH
42239: DOUBLE
42240: LD_INT 16
42242: DEC
42243: ST_TO_ADDR
42244: LD_INT 25
42246: PUSH
42247: FOR_TO
42248: IFFALSE 42321
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42250: LD_ADDR_VAR 0 3
42254: PUSH
42255: LD_VAR 0 3
42259: PUSH
42260: LD_INT 22
42262: PUSH
42263: LD_VAR 0 1
42267: PPUSH
42268: CALL_OW 255
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 91
42279: PUSH
42280: LD_VAR 0 1
42284: PUSH
42285: LD_INT 6
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 30
42295: PUSH
42296: LD_VAR 0 4
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: LIST
42309: PUSH
42310: EMPTY
42311: LIST
42312: PPUSH
42313: CALL_OW 69
42317: ADD
42318: ST_TO_ADDR
42319: GO 42247
42321: POP
42322: POP
// for i = 1 to tmp do
42323: LD_ADDR_VAR 0 4
42327: PUSH
42328: DOUBLE
42329: LD_INT 1
42331: DEC
42332: ST_TO_ADDR
42333: LD_VAR 0 3
42337: PUSH
42338: FOR_TO
42339: IFFALSE 42427
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42341: LD_ADDR_VAR 0 5
42345: PUSH
42346: LD_VAR 0 5
42350: PUSH
42351: LD_VAR 0 3
42355: PUSH
42356: LD_VAR 0 4
42360: ARRAY
42361: PPUSH
42362: CALL_OW 266
42366: PUSH
42367: LD_VAR 0 3
42371: PUSH
42372: LD_VAR 0 4
42376: ARRAY
42377: PPUSH
42378: CALL_OW 250
42382: PUSH
42383: LD_VAR 0 3
42387: PUSH
42388: LD_VAR 0 4
42392: ARRAY
42393: PPUSH
42394: CALL_OW 251
42398: PUSH
42399: LD_VAR 0 3
42403: PUSH
42404: LD_VAR 0 4
42408: ARRAY
42409: PPUSH
42410: CALL_OW 254
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: PUSH
42421: EMPTY
42422: LIST
42423: ADD
42424: ST_TO_ADDR
42425: GO 42338
42427: POP
42428: POP
// result := list ;
42429: LD_ADDR_VAR 0 2
42433: PUSH
42434: LD_VAR 0 5
42438: ST_TO_ADDR
// end ;
42439: LD_VAR 0 2
42443: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42444: LD_INT 0
42446: PPUSH
42447: PPUSH
42448: PPUSH
42449: PPUSH
42450: PPUSH
42451: PPUSH
42452: PPUSH
// if not factory then
42453: LD_VAR 0 1
42457: NOT
42458: IFFALSE 42462
// exit ;
42460: GO 43065
// if control = control_apeman then
42462: LD_VAR 0 4
42466: PUSH
42467: LD_INT 5
42469: EQUAL
42470: IFFALSE 42579
// begin tmp := UnitsInside ( factory ) ;
42472: LD_ADDR_VAR 0 8
42476: PUSH
42477: LD_VAR 0 1
42481: PPUSH
42482: CALL_OW 313
42486: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42487: LD_VAR 0 8
42491: PPUSH
42492: LD_INT 25
42494: PUSH
42495: LD_INT 12
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PPUSH
42502: CALL_OW 72
42506: NOT
42507: IFFALSE 42517
// control := control_manual ;
42509: LD_ADDR_VAR 0 4
42513: PUSH
42514: LD_INT 1
42516: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42517: LD_ADDR_VAR 0 8
42521: PUSH
42522: LD_VAR 0 1
42526: PPUSH
42527: CALL 42214 0 1
42531: ST_TO_ADDR
// if tmp then
42532: LD_VAR 0 8
42536: IFFALSE 42579
// begin for i in tmp do
42538: LD_ADDR_VAR 0 7
42542: PUSH
42543: LD_VAR 0 8
42547: PUSH
42548: FOR_IN
42549: IFFALSE 42577
// if i [ 1 ] = b_ext_radio then
42551: LD_VAR 0 7
42555: PUSH
42556: LD_INT 1
42558: ARRAY
42559: PUSH
42560: LD_INT 22
42562: EQUAL
42563: IFFALSE 42575
// begin control := control_remote ;
42565: LD_ADDR_VAR 0 4
42569: PUSH
42570: LD_INT 2
42572: ST_TO_ADDR
// break ;
42573: GO 42577
// end ;
42575: GO 42548
42577: POP
42578: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42579: LD_VAR 0 1
42583: PPUSH
42584: LD_VAR 0 2
42588: PPUSH
42589: LD_VAR 0 3
42593: PPUSH
42594: LD_VAR 0 4
42598: PPUSH
42599: LD_VAR 0 5
42603: PPUSH
42604: CALL_OW 448
42608: IFFALSE 42643
// begin result := [ chassis , engine , control , weapon ] ;
42610: LD_ADDR_VAR 0 6
42614: PUSH
42615: LD_VAR 0 2
42619: PUSH
42620: LD_VAR 0 3
42624: PUSH
42625: LD_VAR 0 4
42629: PUSH
42630: LD_VAR 0 5
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: ST_TO_ADDR
// exit ;
42641: GO 43065
// end ; _chassis := AvailableChassisList ( factory ) ;
42643: LD_ADDR_VAR 0 9
42647: PUSH
42648: LD_VAR 0 1
42652: PPUSH
42653: CALL_OW 475
42657: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42658: LD_ADDR_VAR 0 11
42662: PUSH
42663: LD_VAR 0 1
42667: PPUSH
42668: CALL_OW 476
42672: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42673: LD_ADDR_VAR 0 12
42677: PUSH
42678: LD_VAR 0 1
42682: PPUSH
42683: CALL_OW 477
42687: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42688: LD_ADDR_VAR 0 10
42692: PUSH
42693: LD_VAR 0 1
42697: PPUSH
42698: CALL_OW 478
42702: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42703: LD_VAR 0 9
42707: NOT
42708: IFTRUE 42717
42710: PUSH
42711: LD_VAR 0 11
42715: NOT
42716: OR
42717: IFTRUE 42726
42719: PUSH
42720: LD_VAR 0 12
42724: NOT
42725: OR
42726: IFTRUE 42735
42728: PUSH
42729: LD_VAR 0 10
42733: NOT
42734: OR
42735: IFFALSE 42770
// begin result := [ chassis , engine , control , weapon ] ;
42737: LD_ADDR_VAR 0 6
42741: PUSH
42742: LD_VAR 0 2
42746: PUSH
42747: LD_VAR 0 3
42751: PUSH
42752: LD_VAR 0 4
42756: PUSH
42757: LD_VAR 0 5
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: ST_TO_ADDR
// exit ;
42768: GO 43065
// end ; if not chassis in _chassis then
42770: LD_VAR 0 2
42774: PUSH
42775: LD_VAR 0 9
42779: IN
42780: NOT
42781: IFFALSE 42807
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42783: LD_ADDR_VAR 0 2
42787: PUSH
42788: LD_VAR 0 9
42792: PUSH
42793: LD_INT 1
42795: PPUSH
42796: LD_VAR 0 9
42800: PPUSH
42801: CALL_OW 12
42805: ARRAY
42806: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42807: LD_VAR 0 2
42811: PPUSH
42812: LD_VAR 0 3
42816: PPUSH
42817: CALL 43070 0 2
42821: NOT
42822: IFFALSE 42883
// repeat engine := _engine [ 1 ] ;
42824: LD_ADDR_VAR 0 3
42828: PUSH
42829: LD_VAR 0 11
42833: PUSH
42834: LD_INT 1
42836: ARRAY
42837: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42838: LD_ADDR_VAR 0 11
42842: PUSH
42843: LD_VAR 0 11
42847: PPUSH
42848: LD_INT 1
42850: PPUSH
42851: CALL_OW 3
42855: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42856: LD_VAR 0 2
42860: PPUSH
42861: LD_VAR 0 3
42865: PPUSH
42866: CALL 43070 0 2
42870: IFTRUE 42881
42872: PUSH
42873: LD_VAR 0 11
42877: PUSH
42878: EMPTY
42879: EQUAL
42880: OR
42881: IFFALSE 42824
// if not control in _control then
42883: LD_VAR 0 4
42887: PUSH
42888: LD_VAR 0 12
42892: IN
42893: NOT
42894: IFFALSE 42920
// control := _control [ rand ( 1 , _control ) ] ;
42896: LD_ADDR_VAR 0 4
42900: PUSH
42901: LD_VAR 0 12
42905: PUSH
42906: LD_INT 1
42908: PPUSH
42909: LD_VAR 0 12
42913: PPUSH
42914: CALL_OW 12
42918: ARRAY
42919: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42920: LD_VAR 0 2
42924: PPUSH
42925: LD_VAR 0 5
42929: PPUSH
42930: CALL 43292 0 2
42934: NOT
42935: IFFALSE 42996
// repeat weapon := _weapon [ 1 ] ;
42937: LD_ADDR_VAR 0 5
42941: PUSH
42942: LD_VAR 0 10
42946: PUSH
42947: LD_INT 1
42949: ARRAY
42950: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42951: LD_ADDR_VAR 0 10
42955: PUSH
42956: LD_VAR 0 10
42960: PPUSH
42961: LD_INT 1
42963: PPUSH
42964: CALL_OW 3
42968: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42969: LD_VAR 0 2
42973: PPUSH
42974: LD_VAR 0 5
42978: PPUSH
42979: CALL 43292 0 2
42983: IFTRUE 42994
42985: PUSH
42986: LD_VAR 0 10
42990: PUSH
42991: EMPTY
42992: EQUAL
42993: OR
42994: IFFALSE 42937
// result := [ ] ;
42996: LD_ADDR_VAR 0 6
43000: PUSH
43001: EMPTY
43002: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43003: LD_VAR 0 1
43007: PPUSH
43008: LD_VAR 0 2
43012: PPUSH
43013: LD_VAR 0 3
43017: PPUSH
43018: LD_VAR 0 4
43022: PPUSH
43023: LD_VAR 0 5
43027: PPUSH
43028: CALL_OW 448
43032: IFFALSE 43065
// result := [ chassis , engine , control , weapon ] ;
43034: LD_ADDR_VAR 0 6
43038: PUSH
43039: LD_VAR 0 2
43043: PUSH
43044: LD_VAR 0 3
43048: PUSH
43049: LD_VAR 0 4
43053: PUSH
43054: LD_VAR 0 5
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: ST_TO_ADDR
// end ;
43065: LD_VAR 0 6
43069: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43070: LD_INT 0
43072: PPUSH
// if not chassis or not engine then
43073: LD_VAR 0 1
43077: NOT
43078: IFTRUE 43087
43080: PUSH
43081: LD_VAR 0 2
43085: NOT
43086: OR
43087: IFFALSE 43091
// exit ;
43089: GO 43287
// case engine of engine_solar :
43091: LD_VAR 0 2
43095: PUSH
43096: LD_INT 2
43098: DOUBLE
43099: EQUAL
43100: IFTRUE 43104
43102: GO 43142
43104: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43105: LD_ADDR_VAR 0 3
43109: PUSH
43110: LD_INT 11
43112: PUSH
43113: LD_INT 12
43115: PUSH
43116: LD_INT 13
43118: PUSH
43119: LD_INT 14
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: LD_INT 3
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: ST_TO_ADDR
43140: GO 43271
43142: LD_INT 1
43144: DOUBLE
43145: EQUAL
43146: IFTRUE 43150
43148: GO 43212
43150: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43151: LD_ADDR_VAR 0 3
43155: PUSH
43156: LD_INT 11
43158: PUSH
43159: LD_INT 12
43161: PUSH
43162: LD_INT 13
43164: PUSH
43165: LD_INT 14
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: LD_INT 3
43176: PUSH
43177: LD_INT 4
43179: PUSH
43180: LD_INT 5
43182: PUSH
43183: LD_INT 21
43185: PUSH
43186: LD_INT 23
43188: PUSH
43189: LD_INT 22
43191: PUSH
43192: LD_INT 24
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: ST_TO_ADDR
43210: GO 43271
43212: LD_INT 3
43214: DOUBLE
43215: EQUAL
43216: IFTRUE 43220
43218: GO 43270
43220: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43221: LD_ADDR_VAR 0 3
43225: PUSH
43226: LD_INT 13
43228: PUSH
43229: LD_INT 14
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: LD_INT 3
43237: PUSH
43238: LD_INT 4
43240: PUSH
43241: LD_INT 5
43243: PUSH
43244: LD_INT 21
43246: PUSH
43247: LD_INT 22
43249: PUSH
43250: LD_INT 23
43252: PUSH
43253: LD_INT 24
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: ST_TO_ADDR
43268: GO 43271
43270: POP
// result := ( chassis in result ) ;
43271: LD_ADDR_VAR 0 3
43275: PUSH
43276: LD_VAR 0 1
43280: PUSH
43281: LD_VAR 0 3
43285: IN
43286: ST_TO_ADDR
// end ;
43287: LD_VAR 0 3
43291: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43292: LD_INT 0
43294: PPUSH
// if not chassis or not weapon then
43295: LD_VAR 0 1
43299: NOT
43300: IFTRUE 43309
43302: PUSH
43303: LD_VAR 0 2
43307: NOT
43308: OR
43309: IFFALSE 43313
// exit ;
43311: GO 44407
// case weapon of us_machine_gun :
43313: LD_VAR 0 2
43317: PUSH
43318: LD_INT 2
43320: DOUBLE
43321: EQUAL
43322: IFTRUE 43326
43324: GO 43356
43326: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43327: LD_ADDR_VAR 0 3
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: LD_INT 3
43340: PUSH
43341: LD_INT 4
43343: PUSH
43344: LD_INT 5
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: ST_TO_ADDR
43354: GO 44391
43356: LD_INT 3
43358: DOUBLE
43359: EQUAL
43360: IFTRUE 43364
43362: GO 43394
43364: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43365: LD_ADDR_VAR 0 3
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: LD_INT 3
43378: PUSH
43379: LD_INT 4
43381: PUSH
43382: LD_INT 5
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: ST_TO_ADDR
43392: GO 44391
43394: LD_INT 11
43396: DOUBLE
43397: EQUAL
43398: IFTRUE 43402
43400: GO 43432
43402: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43403: LD_ADDR_VAR 0 3
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 3
43416: PUSH
43417: LD_INT 4
43419: PUSH
43420: LD_INT 5
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: ST_TO_ADDR
43430: GO 44391
43432: LD_INT 4
43434: DOUBLE
43435: EQUAL
43436: IFTRUE 43440
43438: GO 43466
43440: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43441: LD_ADDR_VAR 0 3
43445: PUSH
43446: LD_INT 2
43448: PUSH
43449: LD_INT 3
43451: PUSH
43452: LD_INT 4
43454: PUSH
43455: LD_INT 5
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: ST_TO_ADDR
43464: GO 44391
43466: LD_INT 5
43468: DOUBLE
43469: EQUAL
43470: IFTRUE 43474
43472: GO 43500
43474: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43475: LD_ADDR_VAR 0 3
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: LD_INT 3
43485: PUSH
43486: LD_INT 4
43488: PUSH
43489: LD_INT 5
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: ST_TO_ADDR
43498: GO 44391
43500: LD_INT 9
43502: DOUBLE
43503: EQUAL
43504: IFTRUE 43508
43506: GO 43534
43508: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43509: LD_ADDR_VAR 0 3
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: LD_INT 3
43519: PUSH
43520: LD_INT 4
43522: PUSH
43523: LD_INT 5
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: ST_TO_ADDR
43532: GO 44391
43534: LD_INT 7
43536: DOUBLE
43537: EQUAL
43538: IFTRUE 43542
43540: GO 43568
43542: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43543: LD_ADDR_VAR 0 3
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: LD_INT 3
43553: PUSH
43554: LD_INT 4
43556: PUSH
43557: LD_INT 5
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: ST_TO_ADDR
43566: GO 44391
43568: LD_INT 12
43570: DOUBLE
43571: EQUAL
43572: IFTRUE 43576
43574: GO 43602
43576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43577: LD_ADDR_VAR 0 3
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: LD_INT 3
43587: PUSH
43588: LD_INT 4
43590: PUSH
43591: LD_INT 5
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: ST_TO_ADDR
43600: GO 44391
43602: LD_INT 13
43604: DOUBLE
43605: EQUAL
43606: IFTRUE 43610
43608: GO 43636
43610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43611: LD_ADDR_VAR 0 3
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: LD_INT 3
43621: PUSH
43622: LD_INT 4
43624: PUSH
43625: LD_INT 5
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: ST_TO_ADDR
43634: GO 44391
43636: LD_INT 14
43638: DOUBLE
43639: EQUAL
43640: IFTRUE 43644
43642: GO 43662
43644: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43645: LD_ADDR_VAR 0 3
43649: PUSH
43650: LD_INT 4
43652: PUSH
43653: LD_INT 5
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: ST_TO_ADDR
43660: GO 44391
43662: LD_INT 6
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43670
43668: GO 43688
43670: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_INT 4
43678: PUSH
43679: LD_INT 5
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: ST_TO_ADDR
43686: GO 44391
43688: LD_INT 10
43690: DOUBLE
43691: EQUAL
43692: IFTRUE 43696
43694: GO 43714
43696: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43697: LD_ADDR_VAR 0 3
43701: PUSH
43702: LD_INT 4
43704: PUSH
43705: LD_INT 5
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: ST_TO_ADDR
43712: GO 44391
43714: LD_INT 22
43716: DOUBLE
43717: EQUAL
43718: IFTRUE 43722
43720: GO 43748
43722: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43723: LD_ADDR_VAR 0 3
43727: PUSH
43728: LD_INT 11
43730: PUSH
43731: LD_INT 12
43733: PUSH
43734: LD_INT 13
43736: PUSH
43737: LD_INT 14
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: ST_TO_ADDR
43746: GO 44391
43748: LD_INT 23
43750: DOUBLE
43751: EQUAL
43752: IFTRUE 43756
43754: GO 43782
43756: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43757: LD_ADDR_VAR 0 3
43761: PUSH
43762: LD_INT 11
43764: PUSH
43765: LD_INT 12
43767: PUSH
43768: LD_INT 13
43770: PUSH
43771: LD_INT 14
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: ST_TO_ADDR
43780: GO 44391
43782: LD_INT 24
43784: DOUBLE
43785: EQUAL
43786: IFTRUE 43790
43788: GO 43816
43790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43791: LD_ADDR_VAR 0 3
43795: PUSH
43796: LD_INT 11
43798: PUSH
43799: LD_INT 12
43801: PUSH
43802: LD_INT 13
43804: PUSH
43805: LD_INT 14
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: ST_TO_ADDR
43814: GO 44391
43816: LD_INT 30
43818: DOUBLE
43819: EQUAL
43820: IFTRUE 43824
43822: GO 43850
43824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43825: LD_ADDR_VAR 0 3
43829: PUSH
43830: LD_INT 11
43832: PUSH
43833: LD_INT 12
43835: PUSH
43836: LD_INT 13
43838: PUSH
43839: LD_INT 14
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
43848: GO 44391
43850: LD_INT 25
43852: DOUBLE
43853: EQUAL
43854: IFTRUE 43858
43856: GO 43876
43858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43859: LD_ADDR_VAR 0 3
43863: PUSH
43864: LD_INT 13
43866: PUSH
43867: LD_INT 14
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: ST_TO_ADDR
43874: GO 44391
43876: LD_INT 27
43878: DOUBLE
43879: EQUAL
43880: IFTRUE 43884
43882: GO 43902
43884: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43885: LD_ADDR_VAR 0 3
43889: PUSH
43890: LD_INT 13
43892: PUSH
43893: LD_INT 14
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: ST_TO_ADDR
43900: GO 44391
43902: LD_INT 92
43904: DOUBLE
43905: EQUAL
43906: IFTRUE 43910
43908: GO 43936
43910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43911: LD_ADDR_VAR 0 3
43915: PUSH
43916: LD_INT 11
43918: PUSH
43919: LD_INT 12
43921: PUSH
43922: LD_INT 13
43924: PUSH
43925: LD_INT 14
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: ST_TO_ADDR
43934: GO 44391
43936: LD_INT 28
43938: DOUBLE
43939: EQUAL
43940: IFTRUE 43944
43942: GO 43962
43944: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43945: LD_ADDR_VAR 0 3
43949: PUSH
43950: LD_INT 13
43952: PUSH
43953: LD_INT 14
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: ST_TO_ADDR
43960: GO 44391
43962: LD_INT 29
43964: DOUBLE
43965: EQUAL
43966: IFTRUE 43970
43968: GO 43988
43970: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43971: LD_ADDR_VAR 0 3
43975: PUSH
43976: LD_INT 13
43978: PUSH
43979: LD_INT 14
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: ST_TO_ADDR
43986: GO 44391
43988: LD_INT 31
43990: DOUBLE
43991: EQUAL
43992: IFTRUE 43996
43994: GO 44014
43996: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43997: LD_ADDR_VAR 0 3
44001: PUSH
44002: LD_INT 13
44004: PUSH
44005: LD_INT 14
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: ST_TO_ADDR
44012: GO 44391
44014: LD_INT 26
44016: DOUBLE
44017: EQUAL
44018: IFTRUE 44022
44020: GO 44040
44022: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44023: LD_ADDR_VAR 0 3
44027: PUSH
44028: LD_INT 13
44030: PUSH
44031: LD_INT 14
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: ST_TO_ADDR
44038: GO 44391
44040: LD_INT 42
44042: DOUBLE
44043: EQUAL
44044: IFTRUE 44048
44046: GO 44074
44048: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44049: LD_ADDR_VAR 0 3
44053: PUSH
44054: LD_INT 21
44056: PUSH
44057: LD_INT 22
44059: PUSH
44060: LD_INT 23
44062: PUSH
44063: LD_INT 24
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: ST_TO_ADDR
44072: GO 44391
44074: LD_INT 43
44076: DOUBLE
44077: EQUAL
44078: IFTRUE 44082
44080: GO 44108
44082: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44083: LD_ADDR_VAR 0 3
44087: PUSH
44088: LD_INT 21
44090: PUSH
44091: LD_INT 22
44093: PUSH
44094: LD_INT 23
44096: PUSH
44097: LD_INT 24
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: ST_TO_ADDR
44106: GO 44391
44108: LD_INT 44
44110: DOUBLE
44111: EQUAL
44112: IFTRUE 44116
44114: GO 44142
44116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44117: LD_ADDR_VAR 0 3
44121: PUSH
44122: LD_INT 21
44124: PUSH
44125: LD_INT 22
44127: PUSH
44128: LD_INT 23
44130: PUSH
44131: LD_INT 24
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: ST_TO_ADDR
44140: GO 44391
44142: LD_INT 45
44144: DOUBLE
44145: EQUAL
44146: IFTRUE 44150
44148: GO 44176
44150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44151: LD_ADDR_VAR 0 3
44155: PUSH
44156: LD_INT 21
44158: PUSH
44159: LD_INT 22
44161: PUSH
44162: LD_INT 23
44164: PUSH
44165: LD_INT 24
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: ST_TO_ADDR
44174: GO 44391
44176: LD_INT 49
44178: DOUBLE
44179: EQUAL
44180: IFTRUE 44184
44182: GO 44210
44184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44185: LD_ADDR_VAR 0 3
44189: PUSH
44190: LD_INT 21
44192: PUSH
44193: LD_INT 22
44195: PUSH
44196: LD_INT 23
44198: PUSH
44199: LD_INT 24
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: ST_TO_ADDR
44208: GO 44391
44210: LD_INT 51
44212: DOUBLE
44213: EQUAL
44214: IFTRUE 44218
44216: GO 44244
44218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_INT 21
44226: PUSH
44227: LD_INT 22
44229: PUSH
44230: LD_INT 23
44232: PUSH
44233: LD_INT 24
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: ST_TO_ADDR
44242: GO 44391
44244: LD_INT 52
44246: DOUBLE
44247: EQUAL
44248: IFTRUE 44252
44250: GO 44278
44252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44253: LD_ADDR_VAR 0 3
44257: PUSH
44258: LD_INT 21
44260: PUSH
44261: LD_INT 22
44263: PUSH
44264: LD_INT 23
44266: PUSH
44267: LD_INT 24
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: ST_TO_ADDR
44276: GO 44391
44278: LD_INT 53
44280: DOUBLE
44281: EQUAL
44282: IFTRUE 44286
44284: GO 44304
44286: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44287: LD_ADDR_VAR 0 3
44291: PUSH
44292: LD_INT 23
44294: PUSH
44295: LD_INT 24
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: ST_TO_ADDR
44302: GO 44391
44304: LD_INT 46
44306: DOUBLE
44307: EQUAL
44308: IFTRUE 44312
44310: GO 44330
44312: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44313: LD_ADDR_VAR 0 3
44317: PUSH
44318: LD_INT 23
44320: PUSH
44321: LD_INT 24
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: ST_TO_ADDR
44328: GO 44391
44330: LD_INT 47
44332: DOUBLE
44333: EQUAL
44334: IFTRUE 44338
44336: GO 44356
44338: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
44339: LD_ADDR_VAR 0 3
44343: PUSH
44344: LD_INT 23
44346: PUSH
44347: LD_INT 24
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: ST_TO_ADDR
44354: GO 44391
44356: LD_INT 98
44358: DOUBLE
44359: EQUAL
44360: IFTRUE 44364
44362: GO 44390
44364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44365: LD_ADDR_VAR 0 3
44369: PUSH
44370: LD_INT 21
44372: PUSH
44373: LD_INT 22
44375: PUSH
44376: LD_INT 23
44378: PUSH
44379: LD_INT 24
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: ST_TO_ADDR
44388: GO 44391
44390: POP
// result := ( chassis in result ) ;
44391: LD_ADDR_VAR 0 3
44395: PUSH
44396: LD_VAR 0 1
44400: PUSH
44401: LD_VAR 0 3
44405: IN
44406: ST_TO_ADDR
// end ;
44407: LD_VAR 0 3
44411: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44412: LD_INT 0
44414: PPUSH
44415: PPUSH
44416: PPUSH
44417: PPUSH
44418: PPUSH
44419: PPUSH
44420: PPUSH
// result := array ;
44421: LD_ADDR_VAR 0 5
44425: PUSH
44426: LD_VAR 0 1
44430: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44431: LD_VAR 0 1
44435: NOT
44436: IFTRUE 44445
44438: PUSH
44439: LD_VAR 0 2
44443: NOT
44444: OR
44445: IFTRUE 44454
44447: PUSH
44448: LD_VAR 0 3
44452: NOT
44453: OR
44454: IFTRUE 44468
44456: PUSH
44457: LD_VAR 0 2
44461: PUSH
44462: LD_VAR 0 1
44466: GREATER
44467: OR
44468: IFTRUE 44482
44470: PUSH
44471: LD_VAR 0 3
44475: PUSH
44476: LD_VAR 0 1
44480: GREATER
44481: OR
44482: IFFALSE 44486
// exit ;
44484: GO 44782
// if direction then
44486: LD_VAR 0 4
44490: IFFALSE 44554
// begin d := 1 ;
44492: LD_ADDR_VAR 0 9
44496: PUSH
44497: LD_INT 1
44499: ST_TO_ADDR
// if i_from > i_to then
44500: LD_VAR 0 2
44504: PUSH
44505: LD_VAR 0 3
44509: GREATER
44510: IFFALSE 44536
// length := ( array - i_from ) + i_to else
44512: LD_ADDR_VAR 0 11
44516: PUSH
44517: LD_VAR 0 1
44521: PUSH
44522: LD_VAR 0 2
44526: MINUS
44527: PUSH
44528: LD_VAR 0 3
44532: PLUS
44533: ST_TO_ADDR
44534: GO 44552
// length := i_to - i_from ;
44536: LD_ADDR_VAR 0 11
44540: PUSH
44541: LD_VAR 0 3
44545: PUSH
44546: LD_VAR 0 2
44550: MINUS
44551: ST_TO_ADDR
// end else
44552: GO 44615
// begin d := - 1 ;
44554: LD_ADDR_VAR 0 9
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: ST_TO_ADDR
// if i_from > i_to then
44563: LD_VAR 0 2
44567: PUSH
44568: LD_VAR 0 3
44572: GREATER
44573: IFFALSE 44593
// length := i_from - i_to else
44575: LD_ADDR_VAR 0 11
44579: PUSH
44580: LD_VAR 0 2
44584: PUSH
44585: LD_VAR 0 3
44589: MINUS
44590: ST_TO_ADDR
44591: GO 44615
// length := ( array - i_to ) + i_from ;
44593: LD_ADDR_VAR 0 11
44597: PUSH
44598: LD_VAR 0 1
44602: PUSH
44603: LD_VAR 0 3
44607: MINUS
44608: PUSH
44609: LD_VAR 0 2
44613: PLUS
44614: ST_TO_ADDR
// end ; if not length then
44615: LD_VAR 0 11
44619: NOT
44620: IFFALSE 44624
// exit ;
44622: GO 44782
// tmp := array ;
44624: LD_ADDR_VAR 0 10
44628: PUSH
44629: LD_VAR 0 1
44633: ST_TO_ADDR
// for i = 1 to length do
44634: LD_ADDR_VAR 0 6
44638: PUSH
44639: DOUBLE
44640: LD_INT 1
44642: DEC
44643: ST_TO_ADDR
44644: LD_VAR 0 11
44648: PUSH
44649: FOR_TO
44650: IFFALSE 44770
// begin for j = 1 to array do
44652: LD_ADDR_VAR 0 7
44656: PUSH
44657: DOUBLE
44658: LD_INT 1
44660: DEC
44661: ST_TO_ADDR
44662: LD_VAR 0 1
44666: PUSH
44667: FOR_TO
44668: IFFALSE 44756
// begin k := j + d ;
44670: LD_ADDR_VAR 0 8
44674: PUSH
44675: LD_VAR 0 7
44679: PUSH
44680: LD_VAR 0 9
44684: PLUS
44685: ST_TO_ADDR
// if k > array then
44686: LD_VAR 0 8
44690: PUSH
44691: LD_VAR 0 1
44695: GREATER
44696: IFFALSE 44706
// k := 1 ;
44698: LD_ADDR_VAR 0 8
44702: PUSH
44703: LD_INT 1
44705: ST_TO_ADDR
// if not k then
44706: LD_VAR 0 8
44710: NOT
44711: IFFALSE 44723
// k := array ;
44713: LD_ADDR_VAR 0 8
44717: PUSH
44718: LD_VAR 0 1
44722: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44723: LD_ADDR_VAR 0 10
44727: PUSH
44728: LD_VAR 0 10
44732: PPUSH
44733: LD_VAR 0 8
44737: PPUSH
44738: LD_VAR 0 1
44742: PUSH
44743: LD_VAR 0 7
44747: ARRAY
44748: PPUSH
44749: CALL_OW 1
44753: ST_TO_ADDR
// end ;
44754: GO 44667
44756: POP
44757: POP
// array := tmp ;
44758: LD_ADDR_VAR 0 1
44762: PUSH
44763: LD_VAR 0 10
44767: ST_TO_ADDR
// end ;
44768: GO 44649
44770: POP
44771: POP
// result := array ;
44772: LD_ADDR_VAR 0 5
44776: PUSH
44777: LD_VAR 0 1
44781: ST_TO_ADDR
// end ;
44782: LD_VAR 0 5
44786: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44787: LD_INT 0
44789: PPUSH
44790: PPUSH
// result := 0 ;
44791: LD_ADDR_VAR 0 3
44795: PUSH
44796: LD_INT 0
44798: ST_TO_ADDR
// if not array or not value in array then
44799: LD_VAR 0 1
44803: NOT
44804: IFTRUE 44819
44806: PUSH
44807: LD_VAR 0 2
44811: PUSH
44812: LD_VAR 0 1
44816: IN
44817: NOT
44818: OR
44819: IFFALSE 44823
// exit ;
44821: GO 44877
// for i = 1 to array do
44823: LD_ADDR_VAR 0 4
44827: PUSH
44828: DOUBLE
44829: LD_INT 1
44831: DEC
44832: ST_TO_ADDR
44833: LD_VAR 0 1
44837: PUSH
44838: FOR_TO
44839: IFFALSE 44875
// if value = array [ i ] then
44841: LD_VAR 0 2
44845: PUSH
44846: LD_VAR 0 1
44850: PUSH
44851: LD_VAR 0 4
44855: ARRAY
44856: EQUAL
44857: IFFALSE 44873
// begin result := i ;
44859: LD_ADDR_VAR 0 3
44863: PUSH
44864: LD_VAR 0 4
44868: ST_TO_ADDR
// exit ;
44869: POP
44870: POP
44871: GO 44877
// end ;
44873: GO 44838
44875: POP
44876: POP
// end ;
44877: LD_VAR 0 3
44881: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44882: LD_INT 0
44884: PPUSH
// vc_chassis := chassis ;
44885: LD_ADDR_OWVAR 37
44889: PUSH
44890: LD_VAR 0 1
44894: ST_TO_ADDR
// vc_engine := engine ;
44895: LD_ADDR_OWVAR 39
44899: PUSH
44900: LD_VAR 0 2
44904: ST_TO_ADDR
// vc_control := control ;
44905: LD_ADDR_OWVAR 38
44909: PUSH
44910: LD_VAR 0 3
44914: ST_TO_ADDR
// vc_weapon := weapon ;
44915: LD_ADDR_OWVAR 40
44919: PUSH
44920: LD_VAR 0 4
44924: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44925: LD_ADDR_OWVAR 41
44929: PUSH
44930: LD_VAR 0 5
44934: ST_TO_ADDR
// end ;
44935: LD_VAR 0 6
44939: RET
// export function WantPlant ( unit ) ; var task ; begin
44940: LD_INT 0
44942: PPUSH
44943: PPUSH
// result := false ;
44944: LD_ADDR_VAR 0 2
44948: PUSH
44949: LD_INT 0
44951: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44952: LD_ADDR_VAR 0 3
44956: PUSH
44957: LD_VAR 0 1
44961: PPUSH
44962: CALL_OW 437
44966: ST_TO_ADDR
// if task then
44967: LD_VAR 0 3
44971: IFFALSE 44999
// if task [ 1 ] [ 1 ] = p then
44973: LD_VAR 0 3
44977: PUSH
44978: LD_INT 1
44980: ARRAY
44981: PUSH
44982: LD_INT 1
44984: ARRAY
44985: PUSH
44986: LD_STRING p
44988: EQUAL
44989: IFFALSE 44999
// result := true ;
44991: LD_ADDR_VAR 0 2
44995: PUSH
44996: LD_INT 1
44998: ST_TO_ADDR
// end ;
44999: LD_VAR 0 2
45003: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45004: LD_INT 0
45006: PPUSH
45007: PPUSH
45008: PPUSH
45009: PPUSH
// if pos < 1 then
45010: LD_VAR 0 2
45014: PUSH
45015: LD_INT 1
45017: LESS
45018: IFFALSE 45022
// exit ;
45020: GO 45325
// if pos = 1 then
45022: LD_VAR 0 2
45026: PUSH
45027: LD_INT 1
45029: EQUAL
45030: IFFALSE 45063
// result := Replace ( arr , pos [ 1 ] , value ) else
45032: LD_ADDR_VAR 0 4
45036: PUSH
45037: LD_VAR 0 1
45041: PPUSH
45042: LD_VAR 0 2
45046: PUSH
45047: LD_INT 1
45049: ARRAY
45050: PPUSH
45051: LD_VAR 0 3
45055: PPUSH
45056: CALL_OW 1
45060: ST_TO_ADDR
45061: GO 45325
// begin tmp := arr ;
45063: LD_ADDR_VAR 0 6
45067: PUSH
45068: LD_VAR 0 1
45072: ST_TO_ADDR
// s_arr := [ tmp ] ;
45073: LD_ADDR_VAR 0 7
45077: PUSH
45078: LD_VAR 0 6
45082: PUSH
45083: EMPTY
45084: LIST
45085: ST_TO_ADDR
// for i = 1 to pos - 1 do
45086: LD_ADDR_VAR 0 5
45090: PUSH
45091: DOUBLE
45092: LD_INT 1
45094: DEC
45095: ST_TO_ADDR
45096: LD_VAR 0 2
45100: PUSH
45101: LD_INT 1
45103: MINUS
45104: PUSH
45105: FOR_TO
45106: IFFALSE 45151
// begin tmp := tmp [ pos [ i ] ] ;
45108: LD_ADDR_VAR 0 6
45112: PUSH
45113: LD_VAR 0 6
45117: PUSH
45118: LD_VAR 0 2
45122: PUSH
45123: LD_VAR 0 5
45127: ARRAY
45128: ARRAY
45129: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45130: LD_ADDR_VAR 0 7
45134: PUSH
45135: LD_VAR 0 7
45139: PUSH
45140: LD_VAR 0 6
45144: PUSH
45145: EMPTY
45146: LIST
45147: ADD
45148: ST_TO_ADDR
// end ;
45149: GO 45105
45151: POP
45152: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45153: LD_ADDR_VAR 0 6
45157: PUSH
45158: LD_VAR 0 6
45162: PPUSH
45163: LD_VAR 0 2
45167: PUSH
45168: LD_VAR 0 2
45172: ARRAY
45173: PPUSH
45174: LD_VAR 0 3
45178: PPUSH
45179: CALL_OW 1
45183: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45184: LD_ADDR_VAR 0 7
45188: PUSH
45189: LD_VAR 0 7
45193: PPUSH
45194: LD_VAR 0 7
45198: PPUSH
45199: LD_VAR 0 6
45203: PPUSH
45204: CALL_OW 1
45208: ST_TO_ADDR
// for i = s_arr downto 2 do
45209: LD_ADDR_VAR 0 5
45213: PUSH
45214: DOUBLE
45215: LD_VAR 0 7
45219: INC
45220: ST_TO_ADDR
45221: LD_INT 2
45223: PUSH
45224: FOR_DOWNTO
45225: IFFALSE 45309
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45227: LD_ADDR_VAR 0 6
45231: PUSH
45232: LD_VAR 0 7
45236: PUSH
45237: LD_VAR 0 5
45241: PUSH
45242: LD_INT 1
45244: MINUS
45245: ARRAY
45246: PPUSH
45247: LD_VAR 0 2
45251: PUSH
45252: LD_VAR 0 5
45256: PUSH
45257: LD_INT 1
45259: MINUS
45260: ARRAY
45261: PPUSH
45262: LD_VAR 0 7
45266: PUSH
45267: LD_VAR 0 5
45271: ARRAY
45272: PPUSH
45273: CALL_OW 1
45277: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45278: LD_ADDR_VAR 0 7
45282: PUSH
45283: LD_VAR 0 7
45287: PPUSH
45288: LD_VAR 0 5
45292: PUSH
45293: LD_INT 1
45295: MINUS
45296: PPUSH
45297: LD_VAR 0 6
45301: PPUSH
45302: CALL_OW 1
45306: ST_TO_ADDR
// end ;
45307: GO 45224
45309: POP
45310: POP
// result := s_arr [ 1 ] ;
45311: LD_ADDR_VAR 0 4
45315: PUSH
45316: LD_VAR 0 7
45320: PUSH
45321: LD_INT 1
45323: ARRAY
45324: ST_TO_ADDR
// end ; end ;
45325: LD_VAR 0 4
45329: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45330: LD_INT 0
45332: PPUSH
45333: PPUSH
// if not list then
45334: LD_VAR 0 1
45338: NOT
45339: IFFALSE 45343
// exit ;
45341: GO 45434
// i := list [ pos1 ] ;
45343: LD_ADDR_VAR 0 5
45347: PUSH
45348: LD_VAR 0 1
45352: PUSH
45353: LD_VAR 0 2
45357: ARRAY
45358: ST_TO_ADDR
// if not i then
45359: LD_VAR 0 5
45363: NOT
45364: IFFALSE 45368
// exit ;
45366: GO 45434
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45368: LD_ADDR_VAR 0 1
45372: PUSH
45373: LD_VAR 0 1
45377: PPUSH
45378: LD_VAR 0 2
45382: PPUSH
45383: LD_VAR 0 1
45387: PUSH
45388: LD_VAR 0 3
45392: ARRAY
45393: PPUSH
45394: CALL_OW 1
45398: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45399: LD_ADDR_VAR 0 1
45403: PUSH
45404: LD_VAR 0 1
45408: PPUSH
45409: LD_VAR 0 3
45413: PPUSH
45414: LD_VAR 0 5
45418: PPUSH
45419: CALL_OW 1
45423: ST_TO_ADDR
// result := list ;
45424: LD_ADDR_VAR 0 4
45428: PUSH
45429: LD_VAR 0 1
45433: ST_TO_ADDR
// end ;
45434: LD_VAR 0 4
45438: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45439: LD_INT 0
45441: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45442: LD_ADDR_VAR 0 5
45446: PUSH
45447: LD_VAR 0 1
45451: PPUSH
45452: CALL_OW 250
45456: PPUSH
45457: LD_VAR 0 1
45461: PPUSH
45462: CALL_OW 251
45466: PPUSH
45467: LD_VAR 0 2
45471: PPUSH
45472: LD_VAR 0 3
45476: PPUSH
45477: LD_VAR 0 4
45481: PPUSH
45482: CALL 45864 0 5
45486: ST_TO_ADDR
// end ;
45487: LD_VAR 0 5
45491: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45492: LD_INT 0
45494: PPUSH
45495: PPUSH
45496: PPUSH
45497: PPUSH
// if not list or not unit then
45498: LD_VAR 0 2
45502: NOT
45503: IFTRUE 45512
45505: PUSH
45506: LD_VAR 0 1
45510: NOT
45511: OR
45512: IFFALSE 45516
// exit ;
45514: GO 45859
// result := [ ] ;
45516: LD_ADDR_VAR 0 5
45520: PUSH
45521: EMPTY
45522: ST_TO_ADDR
// for i in list do
45523: LD_ADDR_VAR 0 6
45527: PUSH
45528: LD_VAR 0 2
45532: PUSH
45533: FOR_IN
45534: IFFALSE 45752
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45536: LD_ADDR_VAR 0 8
45540: PUSH
45541: LD_VAR 0 1
45545: PPUSH
45546: LD_VAR 0 6
45550: PUSH
45551: LD_INT 1
45553: ARRAY
45554: PPUSH
45555: LD_VAR 0 6
45559: PUSH
45560: LD_INT 2
45562: ARRAY
45563: PPUSH
45564: CALL_OW 297
45568: ST_TO_ADDR
// if not Count ( result ) then
45569: LD_VAR 0 5
45573: PPUSH
45574: CALL 42086 0 1
45578: NOT
45579: IFFALSE 45612
// begin result := Join ( result , [ i , tmp ] ) ;
45581: LD_ADDR_VAR 0 5
45585: PUSH
45586: LD_VAR 0 5
45590: PPUSH
45591: LD_VAR 0 6
45595: PUSH
45596: LD_VAR 0 8
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PPUSH
45605: CALL 78062 0 2
45609: ST_TO_ADDR
// continue ;
45610: GO 45533
// end ; if result [ result ] [ 2 ] <= tmp then
45612: LD_VAR 0 5
45616: PUSH
45617: LD_VAR 0 5
45621: ARRAY
45622: PUSH
45623: LD_INT 2
45625: ARRAY
45626: PUSH
45627: LD_VAR 0 8
45631: LESSEQUAL
45632: IFFALSE 45665
// result := Join ( result , [ i , tmp ] ) else
45634: LD_ADDR_VAR 0 5
45638: PUSH
45639: LD_VAR 0 5
45643: PPUSH
45644: LD_VAR 0 6
45648: PUSH
45649: LD_VAR 0 8
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PPUSH
45658: CALL 78062 0 2
45662: ST_TO_ADDR
45663: GO 45750
// begin for j := 1 to Count ( result ) do
45665: LD_ADDR_VAR 0 7
45669: PUSH
45670: DOUBLE
45671: LD_INT 1
45673: DEC
45674: ST_TO_ADDR
45675: LD_VAR 0 5
45679: PPUSH
45680: CALL 42086 0 1
45684: PUSH
45685: FOR_TO
45686: IFFALSE 45748
// begin if tmp < result [ j ] [ 2 ] then
45688: LD_VAR 0 8
45692: PUSH
45693: LD_VAR 0 5
45697: PUSH
45698: LD_VAR 0 7
45702: ARRAY
45703: PUSH
45704: LD_INT 2
45706: ARRAY
45707: LESS
45708: IFFALSE 45746
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45710: LD_ADDR_VAR 0 5
45714: PUSH
45715: LD_VAR 0 5
45719: PPUSH
45720: LD_VAR 0 7
45724: PPUSH
45725: LD_VAR 0 6
45729: PUSH
45730: LD_VAR 0 8
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PPUSH
45739: CALL_OW 2
45743: ST_TO_ADDR
// break ;
45744: GO 45748
// end ; end ;
45746: GO 45685
45748: POP
45749: POP
// end ; end ;
45750: GO 45533
45752: POP
45753: POP
// if result and not asc then
45754: LD_VAR 0 5
45758: IFFALSE 45767
45760: PUSH
45761: LD_VAR 0 3
45765: NOT
45766: AND
45767: IFFALSE 45784
// result := ReverseArray ( result ) ;
45769: LD_ADDR_VAR 0 5
45773: PUSH
45774: LD_VAR 0 5
45778: PPUSH
45779: CALL 73142 0 1
45783: ST_TO_ADDR
// tmp := [ ] ;
45784: LD_ADDR_VAR 0 8
45788: PUSH
45789: EMPTY
45790: ST_TO_ADDR
// if mode then
45791: LD_VAR 0 4
45795: IFFALSE 45859
// begin for i := 1 to result do
45797: LD_ADDR_VAR 0 6
45801: PUSH
45802: DOUBLE
45803: LD_INT 1
45805: DEC
45806: ST_TO_ADDR
45807: LD_VAR 0 5
45811: PUSH
45812: FOR_TO
45813: IFFALSE 45847
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
45815: LD_ADDR_VAR 0 8
45819: PUSH
45820: LD_VAR 0 8
45824: PPUSH
45825: LD_VAR 0 5
45829: PUSH
45830: LD_VAR 0 6
45834: ARRAY
45835: PUSH
45836: LD_INT 1
45838: ARRAY
45839: PPUSH
45840: CALL 78062 0 2
45844: ST_TO_ADDR
45845: GO 45812
45847: POP
45848: POP
// result := tmp ;
45849: LD_ADDR_VAR 0 5
45853: PUSH
45854: LD_VAR 0 8
45858: ST_TO_ADDR
// end ; end ;
45859: LD_VAR 0 5
45863: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45864: LD_INT 0
45866: PPUSH
45867: PPUSH
45868: PPUSH
45869: PPUSH
// if not list then
45870: LD_VAR 0 3
45874: NOT
45875: IFFALSE 45879
// exit ;
45877: GO 46269
// result := [ ] ;
45879: LD_ADDR_VAR 0 6
45883: PUSH
45884: EMPTY
45885: ST_TO_ADDR
// for i in list do
45886: LD_ADDR_VAR 0 7
45890: PUSH
45891: LD_VAR 0 3
45895: PUSH
45896: FOR_IN
45897: IFFALSE 46099
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45899: LD_ADDR_VAR 0 9
45903: PUSH
45904: LD_VAR 0 7
45908: PPUSH
45909: LD_VAR 0 1
45913: PPUSH
45914: LD_VAR 0 2
45918: PPUSH
45919: CALL_OW 297
45923: ST_TO_ADDR
// if not result then
45924: LD_VAR 0 6
45928: NOT
45929: IFFALSE 45955
// result := [ [ i , tmp ] ] else
45931: LD_ADDR_VAR 0 6
45935: PUSH
45936: LD_VAR 0 7
45940: PUSH
45941: LD_VAR 0 9
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: EMPTY
45951: LIST
45952: ST_TO_ADDR
45953: GO 46097
// begin if result [ result ] [ 2 ] <= tmp then
45955: LD_VAR 0 6
45959: PUSH
45960: LD_VAR 0 6
45964: ARRAY
45965: PUSH
45966: LD_INT 2
45968: ARRAY
45969: PUSH
45970: LD_VAR 0 9
45974: LESSEQUAL
45975: IFFALSE 46017
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45977: LD_ADDR_VAR 0 6
45981: PUSH
45982: LD_VAR 0 6
45986: PPUSH
45987: LD_VAR 0 6
45991: PUSH
45992: LD_INT 1
45994: PLUS
45995: PPUSH
45996: LD_VAR 0 7
46000: PUSH
46001: LD_VAR 0 9
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PPUSH
46010: CALL_OW 2
46014: ST_TO_ADDR
46015: GO 46097
// for j := 1 to result do
46017: LD_ADDR_VAR 0 8
46021: PUSH
46022: DOUBLE
46023: LD_INT 1
46025: DEC
46026: ST_TO_ADDR
46027: LD_VAR 0 6
46031: PUSH
46032: FOR_TO
46033: IFFALSE 46095
// begin if tmp < result [ j ] [ 2 ] then
46035: LD_VAR 0 9
46039: PUSH
46040: LD_VAR 0 6
46044: PUSH
46045: LD_VAR 0 8
46049: ARRAY
46050: PUSH
46051: LD_INT 2
46053: ARRAY
46054: LESS
46055: IFFALSE 46093
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46057: LD_ADDR_VAR 0 6
46061: PUSH
46062: LD_VAR 0 6
46066: PPUSH
46067: LD_VAR 0 8
46071: PPUSH
46072: LD_VAR 0 7
46076: PUSH
46077: LD_VAR 0 9
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PPUSH
46086: CALL_OW 2
46090: ST_TO_ADDR
// break ;
46091: GO 46095
// end ; end ;
46093: GO 46032
46095: POP
46096: POP
// end ; end ;
46097: GO 45896
46099: POP
46100: POP
// if result and not asc then
46101: LD_VAR 0 6
46105: IFFALSE 46114
46107: PUSH
46108: LD_VAR 0 4
46112: NOT
46113: AND
46114: IFFALSE 46189
// begin tmp := result ;
46116: LD_ADDR_VAR 0 9
46120: PUSH
46121: LD_VAR 0 6
46125: ST_TO_ADDR
// for i = tmp downto 1 do
46126: LD_ADDR_VAR 0 7
46130: PUSH
46131: DOUBLE
46132: LD_VAR 0 9
46136: INC
46137: ST_TO_ADDR
46138: LD_INT 1
46140: PUSH
46141: FOR_DOWNTO
46142: IFFALSE 46187
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46144: LD_ADDR_VAR 0 6
46148: PUSH
46149: LD_VAR 0 6
46153: PPUSH
46154: LD_VAR 0 9
46158: PUSH
46159: LD_VAR 0 7
46163: MINUS
46164: PUSH
46165: LD_INT 1
46167: PLUS
46168: PPUSH
46169: LD_VAR 0 9
46173: PUSH
46174: LD_VAR 0 7
46178: ARRAY
46179: PPUSH
46180: CALL_OW 1
46184: ST_TO_ADDR
46185: GO 46141
46187: POP
46188: POP
// end ; tmp := [ ] ;
46189: LD_ADDR_VAR 0 9
46193: PUSH
46194: EMPTY
46195: ST_TO_ADDR
// if mode then
46196: LD_VAR 0 5
46200: IFFALSE 46269
// begin for i = 1 to result do
46202: LD_ADDR_VAR 0 7
46206: PUSH
46207: DOUBLE
46208: LD_INT 1
46210: DEC
46211: ST_TO_ADDR
46212: LD_VAR 0 6
46216: PUSH
46217: FOR_TO
46218: IFFALSE 46257
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46220: LD_ADDR_VAR 0 9
46224: PUSH
46225: LD_VAR 0 9
46229: PPUSH
46230: LD_VAR 0 7
46234: PPUSH
46235: LD_VAR 0 6
46239: PUSH
46240: LD_VAR 0 7
46244: ARRAY
46245: PUSH
46246: LD_INT 1
46248: ARRAY
46249: PPUSH
46250: CALL_OW 1
46254: ST_TO_ADDR
46255: GO 46217
46257: POP
46258: POP
// result := tmp ;
46259: LD_ADDR_VAR 0 6
46263: PUSH
46264: LD_VAR 0 9
46268: ST_TO_ADDR
// end ; end ;
46269: LD_VAR 0 6
46273: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46274: LD_INT 0
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
46281: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46282: LD_ADDR_VAR 0 5
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: EMPTY
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// if not x or not y then
46304: LD_VAR 0 2
46308: NOT
46309: IFTRUE 46318
46311: PUSH
46312: LD_VAR 0 3
46316: NOT
46317: OR
46318: IFFALSE 46322
// exit ;
46320: GO 47978
// if not range then
46322: LD_VAR 0 4
46326: NOT
46327: IFFALSE 46337
// range := 10 ;
46329: LD_ADDR_VAR 0 4
46333: PUSH
46334: LD_INT 10
46336: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46337: LD_ADDR_VAR 0 8
46341: PUSH
46342: LD_INT 81
46344: PUSH
46345: LD_VAR 0 1
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 92
46356: PUSH
46357: LD_VAR 0 2
46361: PUSH
46362: LD_VAR 0 3
46366: PUSH
46367: LD_VAR 0 4
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: LD_INT 21
46383: PUSH
46384: LD_INT 3
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: PPUSH
46400: CALL_OW 69
46404: ST_TO_ADDR
// if not tmp then
46405: LD_VAR 0 8
46409: NOT
46410: IFFALSE 46414
// exit ;
46412: GO 47978
// for i in tmp do
46414: LD_ADDR_VAR 0 6
46418: PUSH
46419: LD_VAR 0 8
46423: PUSH
46424: FOR_IN
46425: IFFALSE 47953
// begin points := [ 0 , 0 , 0 ] ;
46427: LD_ADDR_VAR 0 9
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: LIST
46445: ST_TO_ADDR
// bpoints := 1 ;
46446: LD_ADDR_VAR 0 10
46450: PUSH
46451: LD_INT 1
46453: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46454: LD_VAR 0 6
46458: PPUSH
46459: CALL_OW 247
46463: PUSH
46464: LD_INT 1
46466: DOUBLE
46467: EQUAL
46468: IFTRUE 46472
46470: GO 47054
46472: POP
// begin if GetClass ( i ) = 1 then
46473: LD_VAR 0 6
46477: PPUSH
46478: CALL_OW 257
46482: PUSH
46483: LD_INT 1
46485: EQUAL
46486: IFFALSE 46507
// points := [ 10 , 5 , 3 ] ;
46488: LD_ADDR_VAR 0 9
46492: PUSH
46493: LD_INT 10
46495: PUSH
46496: LD_INT 5
46498: PUSH
46499: LD_INT 3
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: LIST
46506: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46507: LD_VAR 0 6
46511: PPUSH
46512: CALL_OW 257
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: LD_INT 3
46522: PUSH
46523: LD_INT 4
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: LIST
46530: IN
46531: IFFALSE 46552
// points := [ 3 , 2 , 1 ] ;
46533: LD_ADDR_VAR 0 9
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: LIST
46551: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46552: LD_VAR 0 6
46556: PPUSH
46557: CALL_OW 257
46561: PUSH
46562: LD_INT 5
46564: EQUAL
46565: IFFALSE 46586
// points := [ 130 , 5 , 2 ] ;
46567: LD_ADDR_VAR 0 9
46571: PUSH
46572: LD_INT 130
46574: PUSH
46575: LD_INT 5
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: LIST
46585: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46586: LD_VAR 0 6
46590: PPUSH
46591: CALL_OW 257
46595: PUSH
46596: LD_INT 8
46598: EQUAL
46599: IFFALSE 46620
// points := [ 35 , 35 , 30 ] ;
46601: LD_ADDR_VAR 0 9
46605: PUSH
46606: LD_INT 35
46608: PUSH
46609: LD_INT 35
46611: PUSH
46612: LD_INT 30
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: LIST
46619: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46620: LD_VAR 0 6
46624: PPUSH
46625: CALL_OW 257
46629: PUSH
46630: LD_INT 9
46632: EQUAL
46633: IFFALSE 46654
// points := [ 20 , 55 , 40 ] ;
46635: LD_ADDR_VAR 0 9
46639: PUSH
46640: LD_INT 20
46642: PUSH
46643: LD_INT 55
46645: PUSH
46646: LD_INT 40
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: LIST
46653: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46654: LD_VAR 0 6
46658: PPUSH
46659: CALL_OW 257
46663: PUSH
46664: LD_INT 12
46666: PUSH
46667: LD_INT 16
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: IN
46674: IFFALSE 46695
// points := [ 5 , 3 , 2 ] ;
46676: LD_ADDR_VAR 0 9
46680: PUSH
46681: LD_INT 5
46683: PUSH
46684: LD_INT 3
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: LIST
46694: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46695: LD_VAR 0 6
46699: PPUSH
46700: CALL_OW 257
46704: PUSH
46705: LD_INT 17
46707: EQUAL
46708: IFFALSE 46729
// points := [ 100 , 50 , 75 ] ;
46710: LD_ADDR_VAR 0 9
46714: PUSH
46715: LD_INT 100
46717: PUSH
46718: LD_INT 50
46720: PUSH
46721: LD_INT 75
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: LIST
46728: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46729: LD_VAR 0 6
46733: PPUSH
46734: CALL_OW 257
46738: PUSH
46739: LD_INT 15
46741: EQUAL
46742: IFFALSE 46763
// points := [ 10 , 5 , 3 ] ;
46744: LD_ADDR_VAR 0 9
46748: PUSH
46749: LD_INT 10
46751: PUSH
46752: LD_INT 5
46754: PUSH
46755: LD_INT 3
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46763: LD_VAR 0 6
46767: PPUSH
46768: CALL_OW 257
46772: PUSH
46773: LD_INT 14
46775: EQUAL
46776: IFFALSE 46797
// points := [ 10 , 0 , 0 ] ;
46778: LD_ADDR_VAR 0 9
46782: PUSH
46783: LD_INT 10
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: LIST
46796: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46797: LD_VAR 0 6
46801: PPUSH
46802: CALL_OW 257
46806: PUSH
46807: LD_INT 11
46809: EQUAL
46810: IFFALSE 46831
// points := [ 30 , 10 , 5 ] ;
46812: LD_ADDR_VAR 0 9
46816: PUSH
46817: LD_INT 30
46819: PUSH
46820: LD_INT 10
46822: PUSH
46823: LD_INT 5
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: LIST
46830: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46831: LD_VAR 0 1
46835: PPUSH
46836: LD_INT 5
46838: PPUSH
46839: CALL_OW 321
46843: PUSH
46844: LD_INT 2
46846: EQUAL
46847: IFFALSE 46864
// bpoints := bpoints * 1.8 ;
46849: LD_ADDR_VAR 0 10
46853: PUSH
46854: LD_VAR 0 10
46858: PUSH
46859: LD_REAL  1.80000000000000E+0000
46862: MUL
46863: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46864: LD_VAR 0 6
46868: PPUSH
46869: CALL_OW 257
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: LD_INT 3
46882: PUSH
46883: LD_INT 4
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: IN
46892: IFFALSE 46912
46894: PUSH
46895: LD_VAR 0 1
46899: PPUSH
46900: LD_INT 51
46902: PPUSH
46903: CALL_OW 321
46907: PUSH
46908: LD_INT 2
46910: EQUAL
46911: AND
46912: IFFALSE 46929
// bpoints := bpoints * 1.2 ;
46914: LD_ADDR_VAR 0 10
46918: PUSH
46919: LD_VAR 0 10
46923: PUSH
46924: LD_REAL  1.20000000000000E+0000
46927: MUL
46928: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46929: LD_VAR 0 6
46933: PPUSH
46934: CALL_OW 257
46938: PUSH
46939: LD_INT 5
46941: PUSH
46942: LD_INT 7
46944: PUSH
46945: LD_INT 9
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: LIST
46952: IN
46953: IFFALSE 46973
46955: PUSH
46956: LD_VAR 0 1
46960: PPUSH
46961: LD_INT 52
46963: PPUSH
46964: CALL_OW 321
46968: PUSH
46969: LD_INT 2
46971: EQUAL
46972: AND
46973: IFFALSE 46990
// bpoints := bpoints * 1.5 ;
46975: LD_ADDR_VAR 0 10
46979: PUSH
46980: LD_VAR 0 10
46984: PUSH
46985: LD_REAL  1.50000000000000E+0000
46988: MUL
46989: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46990: LD_VAR 0 1
46994: PPUSH
46995: LD_INT 66
46997: PPUSH
46998: CALL_OW 321
47002: PUSH
47003: LD_INT 2
47005: EQUAL
47006: IFFALSE 47023
// bpoints := bpoints * 1.1 ;
47008: LD_ADDR_VAR 0 10
47012: PUSH
47013: LD_VAR 0 10
47017: PUSH
47018: LD_REAL  1.10000000000000E+0000
47021: MUL
47022: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47023: LD_ADDR_VAR 0 10
47027: PUSH
47028: LD_VAR 0 10
47032: PUSH
47033: LD_VAR 0 6
47037: PPUSH
47038: LD_INT 1
47040: PPUSH
47041: CALL_OW 259
47045: PUSH
47046: LD_REAL  1.15000000000000E+0000
47049: MUL
47050: MUL
47051: ST_TO_ADDR
// end ; unit_vehicle :
47052: GO 47882
47054: LD_INT 2
47056: DOUBLE
47057: EQUAL
47058: IFTRUE 47062
47060: GO 47870
47062: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47063: LD_VAR 0 6
47067: PPUSH
47068: CALL_OW 264
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 42
47078: PUSH
47079: LD_INT 24
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: LIST
47086: IN
47087: IFFALSE 47108
// points := [ 25 , 5 , 3 ] ;
47089: LD_ADDR_VAR 0 9
47093: PUSH
47094: LD_INT 25
47096: PUSH
47097: LD_INT 5
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: LIST
47107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47108: LD_VAR 0 6
47112: PPUSH
47113: CALL_OW 264
47117: PUSH
47118: LD_INT 4
47120: PUSH
47121: LD_INT 43
47123: PUSH
47124: LD_INT 25
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: IN
47132: IFFALSE 47153
// points := [ 40 , 15 , 5 ] ;
47134: LD_ADDR_VAR 0 9
47138: PUSH
47139: LD_INT 40
47141: PUSH
47142: LD_INT 15
47144: PUSH
47145: LD_INT 5
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: LIST
47152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47153: LD_VAR 0 6
47157: PPUSH
47158: CALL_OW 264
47162: PUSH
47163: LD_INT 3
47165: PUSH
47166: LD_INT 23
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: IN
47173: IFFALSE 47194
// points := [ 7 , 25 , 8 ] ;
47175: LD_ADDR_VAR 0 9
47179: PUSH
47180: LD_INT 7
47182: PUSH
47183: LD_INT 25
47185: PUSH
47186: LD_INT 8
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47194: LD_VAR 0 6
47198: PPUSH
47199: CALL_OW 264
47203: PUSH
47204: LD_INT 5
47206: PUSH
47207: LD_INT 27
47209: PUSH
47210: LD_INT 44
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: IN
47218: IFFALSE 47239
// points := [ 14 , 50 , 16 ] ;
47220: LD_ADDR_VAR 0 9
47224: PUSH
47225: LD_INT 14
47227: PUSH
47228: LD_INT 50
47230: PUSH
47231: LD_INT 16
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47239: LD_VAR 0 6
47243: PPUSH
47244: CALL_OW 264
47248: PUSH
47249: LD_INT 6
47251: PUSH
47252: LD_INT 46
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: IN
47259: IFFALSE 47280
// points := [ 32 , 120 , 70 ] ;
47261: LD_ADDR_VAR 0 9
47265: PUSH
47266: LD_INT 32
47268: PUSH
47269: LD_INT 120
47271: PUSH
47272: LD_INT 70
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47280: LD_VAR 0 6
47284: PPUSH
47285: CALL_OW 264
47289: PUSH
47290: LD_INT 7
47292: PUSH
47293: LD_INT 28
47295: PUSH
47296: LD_INT 45
47298: PUSH
47299: LD_INT 92
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: IN
47308: IFFALSE 47329
// points := [ 35 , 20 , 45 ] ;
47310: LD_ADDR_VAR 0 9
47314: PUSH
47315: LD_INT 35
47317: PUSH
47318: LD_INT 20
47320: PUSH
47321: LD_INT 45
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47329: LD_VAR 0 6
47333: PPUSH
47334: CALL_OW 264
47338: PUSH
47339: LD_INT 47
47341: PUSH
47342: EMPTY
47343: LIST
47344: IN
47345: IFFALSE 47366
// points := [ 67 , 45 , 75 ] ;
47347: LD_ADDR_VAR 0 9
47351: PUSH
47352: LD_INT 67
47354: PUSH
47355: LD_INT 45
47357: PUSH
47358: LD_INT 75
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47366: LD_VAR 0 6
47370: PPUSH
47371: CALL_OW 264
47375: PUSH
47376: LD_INT 26
47378: PUSH
47379: EMPTY
47380: LIST
47381: IN
47382: IFFALSE 47403
// points := [ 120 , 30 , 80 ] ;
47384: LD_ADDR_VAR 0 9
47388: PUSH
47389: LD_INT 120
47391: PUSH
47392: LD_INT 30
47394: PUSH
47395: LD_INT 80
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47403: LD_VAR 0 6
47407: PPUSH
47408: CALL_OW 264
47412: PUSH
47413: LD_INT 22
47415: PUSH
47416: EMPTY
47417: LIST
47418: IN
47419: IFFALSE 47440
// points := [ 40 , 1 , 1 ] ;
47421: LD_ADDR_VAR 0 9
47425: PUSH
47426: LD_INT 40
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: LIST
47439: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47440: LD_VAR 0 6
47444: PPUSH
47445: CALL_OW 264
47449: PUSH
47450: LD_INT 29
47452: PUSH
47453: EMPTY
47454: LIST
47455: IN
47456: IFFALSE 47477
// points := [ 70 , 200 , 400 ] ;
47458: LD_ADDR_VAR 0 9
47462: PUSH
47463: LD_INT 70
47465: PUSH
47466: LD_INT 200
47468: PUSH
47469: LD_INT 400
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: LIST
47476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47477: LD_VAR 0 6
47481: PPUSH
47482: CALL_OW 264
47486: PUSH
47487: LD_INT 14
47489: PUSH
47490: LD_INT 53
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: IN
47497: IFFALSE 47518
// points := [ 40 , 10 , 20 ] ;
47499: LD_ADDR_VAR 0 9
47503: PUSH
47504: LD_INT 40
47506: PUSH
47507: LD_INT 10
47509: PUSH
47510: LD_INT 20
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47518: LD_VAR 0 6
47522: PPUSH
47523: CALL_OW 264
47527: PUSH
47528: LD_INT 9
47530: PUSH
47531: EMPTY
47532: LIST
47533: IN
47534: IFFALSE 47555
// points := [ 5 , 70 , 20 ] ;
47536: LD_ADDR_VAR 0 9
47540: PUSH
47541: LD_INT 5
47543: PUSH
47544: LD_INT 70
47546: PUSH
47547: LD_INT 20
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47555: LD_VAR 0 6
47559: PPUSH
47560: CALL_OW 264
47564: PUSH
47565: LD_INT 10
47567: PUSH
47568: EMPTY
47569: LIST
47570: IN
47571: IFFALSE 47592
// points := [ 35 , 110 , 70 ] ;
47573: LD_ADDR_VAR 0 9
47577: PUSH
47578: LD_INT 35
47580: PUSH
47581: LD_INT 110
47583: PUSH
47584: LD_INT 70
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: LIST
47591: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47592: LD_VAR 0 6
47596: PPUSH
47597: CALL_OW 265
47601: PUSH
47602: LD_INT 25
47604: EQUAL
47605: IFFALSE 47626
// points := [ 80 , 65 , 100 ] ;
47607: LD_ADDR_VAR 0 9
47611: PUSH
47612: LD_INT 80
47614: PUSH
47615: LD_INT 65
47617: PUSH
47618: LD_INT 100
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47626: LD_VAR 0 6
47630: PPUSH
47631: CALL_OW 263
47635: PUSH
47636: LD_INT 1
47638: EQUAL
47639: IFFALSE 47674
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47641: LD_ADDR_VAR 0 10
47645: PUSH
47646: LD_VAR 0 10
47650: PUSH
47651: LD_VAR 0 6
47655: PPUSH
47656: CALL_OW 311
47660: PPUSH
47661: LD_INT 3
47663: PPUSH
47664: CALL_OW 259
47668: PUSH
47669: LD_INT 4
47671: MUL
47672: MUL
47673: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47674: LD_VAR 0 6
47678: PPUSH
47679: CALL_OW 263
47683: PUSH
47684: LD_INT 2
47686: EQUAL
47687: IFFALSE 47738
// begin j := IsControledBy ( i ) ;
47689: LD_ADDR_VAR 0 7
47693: PUSH
47694: LD_VAR 0 6
47698: PPUSH
47699: CALL_OW 312
47703: ST_TO_ADDR
// if j then
47704: LD_VAR 0 7
47708: IFFALSE 47738
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47710: LD_ADDR_VAR 0 10
47714: PUSH
47715: LD_VAR 0 10
47719: PUSH
47720: LD_VAR 0 7
47724: PPUSH
47725: LD_INT 3
47727: PPUSH
47728: CALL_OW 259
47732: PUSH
47733: LD_INT 3
47735: MUL
47736: MUL
47737: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47738: LD_VAR 0 6
47742: PPUSH
47743: CALL_OW 264
47747: PUSH
47748: LD_INT 5
47750: PUSH
47751: LD_INT 6
47753: PUSH
47754: LD_INT 46
47756: PUSH
47757: LD_INT 44
47759: PUSH
47760: LD_INT 47
47762: PUSH
47763: LD_INT 45
47765: PUSH
47766: LD_INT 28
47768: PUSH
47769: LD_INT 7
47771: PUSH
47772: LD_INT 27
47774: PUSH
47775: LD_INT 29
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: IN
47790: IFFALSE 47810
47792: PUSH
47793: LD_VAR 0 1
47797: PPUSH
47798: LD_INT 52
47800: PPUSH
47801: CALL_OW 321
47805: PUSH
47806: LD_INT 2
47808: EQUAL
47809: AND
47810: IFFALSE 47827
// bpoints := bpoints * 1.2 ;
47812: LD_ADDR_VAR 0 10
47816: PUSH
47817: LD_VAR 0 10
47821: PUSH
47822: LD_REAL  1.20000000000000E+0000
47825: MUL
47826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47827: LD_VAR 0 6
47831: PPUSH
47832: CALL_OW 264
47836: PUSH
47837: LD_INT 6
47839: PUSH
47840: LD_INT 46
47842: PUSH
47843: LD_INT 47
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: IN
47851: IFFALSE 47868
// bpoints := bpoints * 1.2 ;
47853: LD_ADDR_VAR 0 10
47857: PUSH
47858: LD_VAR 0 10
47862: PUSH
47863: LD_REAL  1.20000000000000E+0000
47866: MUL
47867: ST_TO_ADDR
// end ; unit_building :
47868: GO 47882
47870: LD_INT 3
47872: DOUBLE
47873: EQUAL
47874: IFTRUE 47878
47876: GO 47881
47878: POP
// ; end ;
47879: GO 47882
47881: POP
// for j = 1 to 3 do
47882: LD_ADDR_VAR 0 7
47886: PUSH
47887: DOUBLE
47888: LD_INT 1
47890: DEC
47891: ST_TO_ADDR
47892: LD_INT 3
47894: PUSH
47895: FOR_TO
47896: IFFALSE 47949
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47898: LD_ADDR_VAR 0 5
47902: PUSH
47903: LD_VAR 0 5
47907: PPUSH
47908: LD_VAR 0 7
47912: PPUSH
47913: LD_VAR 0 5
47917: PUSH
47918: LD_VAR 0 7
47922: ARRAY
47923: PUSH
47924: LD_VAR 0 9
47928: PUSH
47929: LD_VAR 0 7
47933: ARRAY
47934: PUSH
47935: LD_VAR 0 10
47939: MUL
47940: PLUS
47941: PPUSH
47942: CALL_OW 1
47946: ST_TO_ADDR
47947: GO 47895
47949: POP
47950: POP
// end ;
47951: GO 46424
47953: POP
47954: POP
// result := Replace ( result , 4 , tmp ) ;
47955: LD_ADDR_VAR 0 5
47959: PUSH
47960: LD_VAR 0 5
47964: PPUSH
47965: LD_INT 4
47967: PPUSH
47968: LD_VAR 0 8
47972: PPUSH
47973: CALL_OW 1
47977: ST_TO_ADDR
// end ;
47978: LD_VAR 0 5
47982: RET
// export function DangerAtRange ( unit , range ) ; begin
47983: LD_INT 0
47985: PPUSH
// if not unit then
47986: LD_VAR 0 1
47990: NOT
47991: IFFALSE 47995
// exit ;
47993: GO 48040
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47995: LD_ADDR_VAR 0 3
47999: PUSH
48000: LD_VAR 0 1
48004: PPUSH
48005: CALL_OW 255
48009: PPUSH
48010: LD_VAR 0 1
48014: PPUSH
48015: CALL_OW 250
48019: PPUSH
48020: LD_VAR 0 1
48024: PPUSH
48025: CALL_OW 251
48029: PPUSH
48030: LD_VAR 0 2
48034: PPUSH
48035: CALL 46274 0 4
48039: ST_TO_ADDR
// end ;
48040: LD_VAR 0 3
48044: RET
// export function DangerInArea ( side , area ) ; begin
48045: LD_INT 0
48047: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48048: LD_ADDR_VAR 0 3
48052: PUSH
48053: LD_VAR 0 2
48057: PPUSH
48058: LD_INT 81
48060: PUSH
48061: LD_VAR 0 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PPUSH
48070: CALL_OW 70
48074: ST_TO_ADDR
// end ;
48075: LD_VAR 0 3
48079: RET
// export function IsExtension ( b ) ; begin
48080: LD_INT 0
48082: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48083: LD_ADDR_VAR 0 2
48087: PUSH
48088: LD_VAR 0 1
48092: PUSH
48093: LD_INT 23
48095: PUSH
48096: LD_INT 20
48098: PUSH
48099: LD_INT 22
48101: PUSH
48102: LD_INT 17
48104: PUSH
48105: LD_INT 24
48107: PUSH
48108: LD_INT 21
48110: PUSH
48111: LD_INT 19
48113: PUSH
48114: LD_INT 16
48116: PUSH
48117: LD_INT 25
48119: PUSH
48120: LD_INT 18
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: IN
48135: ST_TO_ADDR
// end ;
48136: LD_VAR 0 2
48140: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48141: LD_INT 0
48143: PPUSH
48144: PPUSH
48145: PPUSH
// result := [ ] ;
48146: LD_ADDR_VAR 0 4
48150: PUSH
48151: EMPTY
48152: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48153: LD_ADDR_VAR 0 5
48157: PUSH
48158: LD_VAR 0 2
48162: PPUSH
48163: LD_INT 21
48165: PUSH
48166: LD_INT 3
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PPUSH
48173: CALL_OW 70
48177: ST_TO_ADDR
// if not tmp then
48178: LD_VAR 0 5
48182: NOT
48183: IFFALSE 48187
// exit ;
48185: GO 48251
// if checkLink then
48187: LD_VAR 0 3
48191: IFFALSE 48241
// begin for i in tmp do
48193: LD_ADDR_VAR 0 6
48197: PUSH
48198: LD_VAR 0 5
48202: PUSH
48203: FOR_IN
48204: IFFALSE 48239
// if GetBase ( i ) <> base then
48206: LD_VAR 0 6
48210: PPUSH
48211: CALL_OW 274
48215: PUSH
48216: LD_VAR 0 1
48220: NONEQUAL
48221: IFFALSE 48237
// ComLinkToBase ( base , i ) ;
48223: LD_VAR 0 1
48227: PPUSH
48228: LD_VAR 0 6
48232: PPUSH
48233: CALL_OW 169
48237: GO 48203
48239: POP
48240: POP
// end ; result := tmp ;
48241: LD_ADDR_VAR 0 4
48245: PUSH
48246: LD_VAR 0 5
48250: ST_TO_ADDR
// end ;
48251: LD_VAR 0 4
48255: RET
// export function ComComplete ( units , b ) ; var i ; begin
48256: LD_INT 0
48258: PPUSH
48259: PPUSH
// if not units then
48260: LD_VAR 0 1
48264: NOT
48265: IFFALSE 48269
// exit ;
48267: GO 48359
// for i in units do
48269: LD_ADDR_VAR 0 4
48273: PUSH
48274: LD_VAR 0 1
48278: PUSH
48279: FOR_IN
48280: IFFALSE 48357
// if BuildingStatus ( b ) = bs_build then
48282: LD_VAR 0 2
48286: PPUSH
48287: CALL_OW 461
48291: PUSH
48292: LD_INT 1
48294: EQUAL
48295: IFFALSE 48355
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48297: LD_VAR 0 4
48301: PPUSH
48302: LD_STRING h
48304: PUSH
48305: LD_VAR 0 2
48309: PPUSH
48310: CALL_OW 250
48314: PUSH
48315: LD_VAR 0 2
48319: PPUSH
48320: CALL_OW 251
48324: PUSH
48325: LD_VAR 0 2
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: PPUSH
48351: CALL_OW 446
48355: GO 48279
48357: POP
48358: POP
// end ;
48359: LD_VAR 0 3
48363: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48364: LD_INT 0
48366: PPUSH
48367: PPUSH
48368: PPUSH
48369: PPUSH
48370: PPUSH
48371: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48372: LD_VAR 0 1
48376: NOT
48377: IFTRUE 48394
48379: PUSH
48380: LD_VAR 0 1
48384: PPUSH
48385: CALL_OW 263
48389: PUSH
48390: LD_INT 2
48392: NONEQUAL
48393: OR
48394: IFFALSE 48398
// exit ;
48396: GO 48714
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48398: LD_ADDR_VAR 0 6
48402: PUSH
48403: LD_INT 22
48405: PUSH
48406: LD_VAR 0 1
48410: PPUSH
48411: CALL_OW 255
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: LD_INT 30
48425: PUSH
48426: LD_INT 36
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 34
48435: PUSH
48436: LD_INT 31
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: LIST
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PPUSH
48452: CALL_OW 69
48456: ST_TO_ADDR
// if not tmp then
48457: LD_VAR 0 6
48461: NOT
48462: IFFALSE 48466
// exit ;
48464: GO 48714
// result := [ ] ;
48466: LD_ADDR_VAR 0 2
48470: PUSH
48471: EMPTY
48472: ST_TO_ADDR
// for i in tmp do
48473: LD_ADDR_VAR 0 3
48477: PUSH
48478: LD_VAR 0 6
48482: PUSH
48483: FOR_IN
48484: IFFALSE 48555
// begin t := UnitsInside ( i ) ;
48486: LD_ADDR_VAR 0 4
48490: PUSH
48491: LD_VAR 0 3
48495: PPUSH
48496: CALL_OW 313
48500: ST_TO_ADDR
// if t then
48501: LD_VAR 0 4
48505: IFFALSE 48553
// for j in t do
48507: LD_ADDR_VAR 0 7
48511: PUSH
48512: LD_VAR 0 4
48516: PUSH
48517: FOR_IN
48518: IFFALSE 48551
// result := Replace ( result , result + 1 , j ) ;
48520: LD_ADDR_VAR 0 2
48524: PUSH
48525: LD_VAR 0 2
48529: PPUSH
48530: LD_VAR 0 2
48534: PUSH
48535: LD_INT 1
48537: PLUS
48538: PPUSH
48539: LD_VAR 0 7
48543: PPUSH
48544: CALL_OW 1
48548: ST_TO_ADDR
48549: GO 48517
48551: POP
48552: POP
// end ;
48553: GO 48483
48555: POP
48556: POP
// if not result then
48557: LD_VAR 0 2
48561: NOT
48562: IFFALSE 48566
// exit ;
48564: GO 48714
// mech := result [ 1 ] ;
48566: LD_ADDR_VAR 0 5
48570: PUSH
48571: LD_VAR 0 2
48575: PUSH
48576: LD_INT 1
48578: ARRAY
48579: ST_TO_ADDR
// if result > 1 then
48580: LD_VAR 0 2
48584: PUSH
48585: LD_INT 1
48587: GREATER
48588: IFFALSE 48700
// begin for i = 2 to result do
48590: LD_ADDR_VAR 0 3
48594: PUSH
48595: DOUBLE
48596: LD_INT 2
48598: DEC
48599: ST_TO_ADDR
48600: LD_VAR 0 2
48604: PUSH
48605: FOR_TO
48606: IFFALSE 48698
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48608: LD_ADDR_VAR 0 4
48612: PUSH
48613: LD_VAR 0 2
48617: PUSH
48618: LD_VAR 0 3
48622: ARRAY
48623: PPUSH
48624: LD_INT 3
48626: PPUSH
48627: CALL_OW 259
48631: PUSH
48632: LD_VAR 0 2
48636: PUSH
48637: LD_VAR 0 3
48641: ARRAY
48642: PPUSH
48643: CALL_OW 432
48647: MINUS
48648: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48649: LD_VAR 0 4
48653: PUSH
48654: LD_VAR 0 5
48658: PPUSH
48659: LD_INT 3
48661: PPUSH
48662: CALL_OW 259
48666: PUSH
48667: LD_VAR 0 5
48671: PPUSH
48672: CALL_OW 432
48676: MINUS
48677: GREATEREQUAL
48678: IFFALSE 48696
// mech := result [ i ] ;
48680: LD_ADDR_VAR 0 5
48684: PUSH
48685: LD_VAR 0 2
48689: PUSH
48690: LD_VAR 0 3
48694: ARRAY
48695: ST_TO_ADDR
// end ;
48696: GO 48605
48698: POP
48699: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48700: LD_VAR 0 1
48704: PPUSH
48705: LD_VAR 0 5
48709: PPUSH
48710: CALL_OW 135
// end ;
48714: LD_VAR 0 2
48718: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48719: LD_INT 0
48721: PPUSH
48722: PPUSH
48723: PPUSH
48724: PPUSH
48725: PPUSH
48726: PPUSH
48727: PPUSH
48728: PPUSH
48729: PPUSH
48730: PPUSH
48731: PPUSH
48732: PPUSH
48733: PPUSH
// result := [ ] ;
48734: LD_ADDR_VAR 0 7
48738: PUSH
48739: EMPTY
48740: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48741: LD_VAR 0 1
48745: PPUSH
48746: CALL_OW 266
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: IN
48761: NOT
48762: IFFALSE 48766
// exit ;
48764: GO 50406
// if name then
48766: LD_VAR 0 3
48770: IFFALSE 48786
// SetBName ( base_dep , name ) ;
48772: LD_VAR 0 1
48776: PPUSH
48777: LD_VAR 0 3
48781: PPUSH
48782: CALL_OW 500
// base := GetBase ( base_dep ) ;
48786: LD_ADDR_VAR 0 15
48790: PUSH
48791: LD_VAR 0 1
48795: PPUSH
48796: CALL_OW 274
48800: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48801: LD_ADDR_VAR 0 16
48805: PUSH
48806: LD_VAR 0 1
48810: PPUSH
48811: CALL_OW 255
48815: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48816: LD_ADDR_VAR 0 17
48820: PUSH
48821: LD_VAR 0 1
48825: PPUSH
48826: CALL_OW 248
48830: ST_TO_ADDR
// if sources then
48831: LD_VAR 0 5
48835: IFFALSE 48882
// for i = 1 to 3 do
48837: LD_ADDR_VAR 0 8
48841: PUSH
48842: DOUBLE
48843: LD_INT 1
48845: DEC
48846: ST_TO_ADDR
48847: LD_INT 3
48849: PUSH
48850: FOR_TO
48851: IFFALSE 48880
// AddResourceType ( base , i , sources [ i ] ) ;
48853: LD_VAR 0 15
48857: PPUSH
48858: LD_VAR 0 8
48862: PPUSH
48863: LD_VAR 0 5
48867: PUSH
48868: LD_VAR 0 8
48872: ARRAY
48873: PPUSH
48874: CALL_OW 276
48878: GO 48850
48880: POP
48881: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48882: LD_ADDR_VAR 0 18
48886: PUSH
48887: LD_VAR 0 15
48891: PPUSH
48892: LD_VAR 0 2
48896: PPUSH
48897: LD_INT 1
48899: PPUSH
48900: CALL 48141 0 3
48904: ST_TO_ADDR
// InitHc ;
48905: CALL_OW 19
// InitUc ;
48909: CALL_OW 18
// uc_side := side ;
48913: LD_ADDR_OWVAR 20
48917: PUSH
48918: LD_VAR 0 16
48922: ST_TO_ADDR
// uc_nation := nation ;
48923: LD_ADDR_OWVAR 21
48927: PUSH
48928: LD_VAR 0 17
48932: ST_TO_ADDR
// if buildings then
48933: LD_VAR 0 18
48937: IFFALSE 50265
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48939: LD_ADDR_VAR 0 19
48943: PUSH
48944: LD_VAR 0 18
48948: PPUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 30
48954: PUSH
48955: LD_INT 29
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 30
48964: PUSH
48965: LD_INT 30
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: LIST
48976: PPUSH
48977: CALL_OW 72
48981: ST_TO_ADDR
// if tmp then
48982: LD_VAR 0 19
48986: IFFALSE 49034
// for i in tmp do
48988: LD_ADDR_VAR 0 8
48992: PUSH
48993: LD_VAR 0 19
48997: PUSH
48998: FOR_IN
48999: IFFALSE 49032
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49001: LD_VAR 0 8
49005: PPUSH
49006: CALL_OW 250
49010: PPUSH
49011: LD_VAR 0 8
49015: PPUSH
49016: CALL_OW 251
49020: PPUSH
49021: LD_VAR 0 16
49025: PPUSH
49026: CALL_OW 441
49030: GO 48998
49032: POP
49033: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49034: LD_VAR 0 18
49038: PPUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 30
49044: PUSH
49045: LD_INT 32
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 30
49054: PUSH
49055: LD_INT 33
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: LIST
49066: PPUSH
49067: CALL_OW 72
49071: IFFALSE 49159
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49073: LD_ADDR_VAR 0 8
49077: PUSH
49078: LD_VAR 0 18
49082: PPUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 30
49088: PUSH
49089: LD_INT 32
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 30
49098: PUSH
49099: LD_INT 33
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: PPUSH
49111: CALL_OW 72
49115: PUSH
49116: FOR_IN
49117: IFFALSE 49157
// begin if not GetBWeapon ( i ) then
49119: LD_VAR 0 8
49123: PPUSH
49124: CALL_OW 269
49128: NOT
49129: IFFALSE 49155
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49131: LD_VAR 0 8
49135: PPUSH
49136: LD_VAR 0 8
49140: PPUSH
49141: LD_VAR 0 2
49145: PPUSH
49146: CALL 50411 0 2
49150: PPUSH
49151: CALL_OW 431
// end ;
49155: GO 49116
49157: POP
49158: POP
// end ; for i = 1 to personel do
49159: LD_ADDR_VAR 0 8
49163: PUSH
49164: DOUBLE
49165: LD_INT 1
49167: DEC
49168: ST_TO_ADDR
49169: LD_VAR 0 6
49173: PUSH
49174: FOR_TO
49175: IFFALSE 50245
// begin if i > 4 then
49177: LD_VAR 0 8
49181: PUSH
49182: LD_INT 4
49184: GREATER
49185: IFFALSE 49189
// break ;
49187: GO 50245
// case i of 1 :
49189: LD_VAR 0 8
49193: PUSH
49194: LD_INT 1
49196: DOUBLE
49197: EQUAL
49198: IFTRUE 49202
49200: GO 49282
49202: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49203: LD_ADDR_VAR 0 12
49207: PUSH
49208: LD_VAR 0 18
49212: PPUSH
49213: LD_INT 22
49215: PUSH
49216: LD_VAR 0 16
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 58
49227: PUSH
49228: EMPTY
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 30
49236: PUSH
49237: LD_INT 32
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 30
49246: PUSH
49247: LD_INT 4
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 30
49256: PUSH
49257: LD_INT 5
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: LIST
49274: PPUSH
49275: CALL_OW 72
49279: ST_TO_ADDR
49280: GO 49504
49282: LD_INT 2
49284: DOUBLE
49285: EQUAL
49286: IFTRUE 49290
49288: GO 49352
49290: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49291: LD_ADDR_VAR 0 12
49295: PUSH
49296: LD_VAR 0 18
49300: PPUSH
49301: LD_INT 22
49303: PUSH
49304: LD_VAR 0 16
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: LD_INT 30
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 30
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: LIST
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PPUSH
49345: CALL_OW 72
49349: ST_TO_ADDR
49350: GO 49504
49352: LD_INT 3
49354: DOUBLE
49355: EQUAL
49356: IFTRUE 49360
49358: GO 49422
49360: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49361: LD_ADDR_VAR 0 12
49365: PUSH
49366: LD_VAR 0 18
49370: PPUSH
49371: LD_INT 22
49373: PUSH
49374: LD_VAR 0 16
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: LD_INT 30
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 30
49398: PUSH
49399: LD_INT 3
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: LIST
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PPUSH
49415: CALL_OW 72
49419: ST_TO_ADDR
49420: GO 49504
49422: LD_INT 4
49424: DOUBLE
49425: EQUAL
49426: IFTRUE 49430
49428: GO 49503
49430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49431: LD_ADDR_VAR 0 12
49435: PUSH
49436: LD_VAR 0 18
49440: PPUSH
49441: LD_INT 22
49443: PUSH
49444: LD_VAR 0 16
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: LD_INT 30
49458: PUSH
49459: LD_INT 6
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 30
49468: PUSH
49469: LD_INT 7
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 30
49478: PUSH
49479: LD_INT 8
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PPUSH
49496: CALL_OW 72
49500: ST_TO_ADDR
49501: GO 49504
49503: POP
// if i = 1 then
49504: LD_VAR 0 8
49508: PUSH
49509: LD_INT 1
49511: EQUAL
49512: IFFALSE 49623
// begin tmp := [ ] ;
49514: LD_ADDR_VAR 0 19
49518: PUSH
49519: EMPTY
49520: ST_TO_ADDR
// for j in f do
49521: LD_ADDR_VAR 0 9
49525: PUSH
49526: LD_VAR 0 12
49530: PUSH
49531: FOR_IN
49532: IFFALSE 49605
// if GetBType ( j ) = b_bunker then
49534: LD_VAR 0 9
49538: PPUSH
49539: CALL_OW 266
49543: PUSH
49544: LD_INT 32
49546: EQUAL
49547: IFFALSE 49574
// tmp := Insert ( tmp , 1 , j ) else
49549: LD_ADDR_VAR 0 19
49553: PUSH
49554: LD_VAR 0 19
49558: PPUSH
49559: LD_INT 1
49561: PPUSH
49562: LD_VAR 0 9
49566: PPUSH
49567: CALL_OW 2
49571: ST_TO_ADDR
49572: GO 49603
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49574: LD_ADDR_VAR 0 19
49578: PUSH
49579: LD_VAR 0 19
49583: PPUSH
49584: LD_VAR 0 19
49588: PUSH
49589: LD_INT 1
49591: PLUS
49592: PPUSH
49593: LD_VAR 0 9
49597: PPUSH
49598: CALL_OW 2
49602: ST_TO_ADDR
49603: GO 49531
49605: POP
49606: POP
// if tmp then
49607: LD_VAR 0 19
49611: IFFALSE 49623
// f := tmp ;
49613: LD_ADDR_VAR 0 12
49617: PUSH
49618: LD_VAR 0 19
49622: ST_TO_ADDR
// end ; x := personel [ i ] ;
49623: LD_ADDR_VAR 0 13
49627: PUSH
49628: LD_VAR 0 6
49632: PUSH
49633: LD_VAR 0 8
49637: ARRAY
49638: ST_TO_ADDR
// if x = - 1 then
49639: LD_VAR 0 13
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: EQUAL
49648: IFFALSE 49859
// begin for j in f do
49650: LD_ADDR_VAR 0 9
49654: PUSH
49655: LD_VAR 0 12
49659: PUSH
49660: FOR_IN
49661: IFFALSE 49855
// repeat InitHc ;
49663: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49667: LD_VAR 0 9
49671: PPUSH
49672: CALL_OW 266
49676: PUSH
49677: LD_INT 5
49679: EQUAL
49680: IFFALSE 49750
// begin if UnitsInside ( j ) < 3 then
49682: LD_VAR 0 9
49686: PPUSH
49687: CALL_OW 313
49691: PUSH
49692: LD_INT 3
49694: LESS
49695: IFFALSE 49731
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49697: LD_INT 0
49699: PPUSH
49700: LD_INT 5
49702: PUSH
49703: LD_INT 8
49705: PUSH
49706: LD_INT 9
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: PUSH
49714: LD_VAR 0 17
49718: ARRAY
49719: PPUSH
49720: LD_VAR 0 4
49724: PPUSH
49725: CALL_OW 380
49729: GO 49748
// PrepareHuman ( false , i , skill ) ;
49731: LD_INT 0
49733: PPUSH
49734: LD_VAR 0 8
49738: PPUSH
49739: LD_VAR 0 4
49743: PPUSH
49744: CALL_OW 380
// end else
49748: GO 49767
// PrepareHuman ( false , i , skill ) ;
49750: LD_INT 0
49752: PPUSH
49753: LD_VAR 0 8
49757: PPUSH
49758: LD_VAR 0 4
49762: PPUSH
49763: CALL_OW 380
// un := CreateHuman ;
49767: LD_ADDR_VAR 0 14
49771: PUSH
49772: CALL_OW 44
49776: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49777: LD_ADDR_VAR 0 7
49781: PUSH
49782: LD_VAR 0 7
49786: PPUSH
49787: LD_INT 1
49789: PPUSH
49790: LD_VAR 0 14
49794: PPUSH
49795: CALL_OW 2
49799: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49800: LD_VAR 0 14
49804: PPUSH
49805: LD_VAR 0 9
49809: PPUSH
49810: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49814: LD_VAR 0 9
49818: PPUSH
49819: CALL_OW 313
49823: PUSH
49824: LD_INT 6
49826: EQUAL
49827: IFTRUE 49851
49829: PUSH
49830: LD_VAR 0 9
49834: PPUSH
49835: CALL_OW 266
49839: PUSH
49840: LD_INT 32
49842: PUSH
49843: LD_INT 31
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: IN
49850: OR
49851: IFFALSE 49663
49853: GO 49660
49855: POP
49856: POP
// end else
49857: GO 50243
// for j = 1 to x do
49859: LD_ADDR_VAR 0 9
49863: PUSH
49864: DOUBLE
49865: LD_INT 1
49867: DEC
49868: ST_TO_ADDR
49869: LD_VAR 0 13
49873: PUSH
49874: FOR_TO
49875: IFFALSE 50241
// begin InitHc ;
49877: CALL_OW 19
// if not f then
49881: LD_VAR 0 12
49885: NOT
49886: IFFALSE 49975
// begin PrepareHuman ( false , i , skill ) ;
49888: LD_INT 0
49890: PPUSH
49891: LD_VAR 0 8
49895: PPUSH
49896: LD_VAR 0 4
49900: PPUSH
49901: CALL_OW 380
// un := CreateHuman ;
49905: LD_ADDR_VAR 0 14
49909: PUSH
49910: CALL_OW 44
49914: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49915: LD_ADDR_VAR 0 7
49919: PUSH
49920: LD_VAR 0 7
49924: PPUSH
49925: LD_INT 1
49927: PPUSH
49928: LD_VAR 0 14
49932: PPUSH
49933: CALL_OW 2
49937: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49938: LD_VAR 0 14
49942: PPUSH
49943: LD_VAR 0 1
49947: PPUSH
49948: CALL_OW 250
49952: PPUSH
49953: LD_VAR 0 1
49957: PPUSH
49958: CALL_OW 251
49962: PPUSH
49963: LD_INT 10
49965: PPUSH
49966: LD_INT 0
49968: PPUSH
49969: CALL_OW 50
// continue ;
49973: GO 49874
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49975: LD_VAR 0 12
49979: PUSH
49980: LD_INT 1
49982: ARRAY
49983: PPUSH
49984: CALL_OW 313
49988: IFFALSE 50016
49990: PUSH
49991: LD_VAR 0 12
49995: PUSH
49996: LD_INT 1
49998: ARRAY
49999: PPUSH
50000: CALL_OW 266
50004: PUSH
50005: LD_INT 32
50007: PUSH
50008: LD_INT 31
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: IN
50015: AND
50016: IFTRUE 50037
50018: PUSH
50019: LD_VAR 0 12
50023: PUSH
50024: LD_INT 1
50026: ARRAY
50027: PPUSH
50028: CALL_OW 313
50032: PUSH
50033: LD_INT 6
50035: EQUAL
50036: OR
50037: IFFALSE 50057
// f := Delete ( f , 1 ) ;
50039: LD_ADDR_VAR 0 12
50043: PUSH
50044: LD_VAR 0 12
50048: PPUSH
50049: LD_INT 1
50051: PPUSH
50052: CALL_OW 3
50056: ST_TO_ADDR
// if not f then
50057: LD_VAR 0 12
50061: NOT
50062: IFFALSE 50080
// begin x := x + 2 ;
50064: LD_ADDR_VAR 0 13
50068: PUSH
50069: LD_VAR 0 13
50073: PUSH
50074: LD_INT 2
50076: PLUS
50077: ST_TO_ADDR
// continue ;
50078: GO 49874
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50080: LD_VAR 0 12
50084: PUSH
50085: LD_INT 1
50087: ARRAY
50088: PPUSH
50089: CALL_OW 266
50093: PUSH
50094: LD_INT 5
50096: EQUAL
50097: IFFALSE 50171
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50099: LD_VAR 0 12
50103: PUSH
50104: LD_INT 1
50106: ARRAY
50107: PPUSH
50108: CALL_OW 313
50112: PUSH
50113: LD_INT 3
50115: LESS
50116: IFFALSE 50152
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50118: LD_INT 0
50120: PPUSH
50121: LD_INT 5
50123: PUSH
50124: LD_INT 8
50126: PUSH
50127: LD_INT 9
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: LIST
50134: PUSH
50135: LD_VAR 0 17
50139: ARRAY
50140: PPUSH
50141: LD_VAR 0 4
50145: PPUSH
50146: CALL_OW 380
50150: GO 50169
// PrepareHuman ( false , i , skill ) ;
50152: LD_INT 0
50154: PPUSH
50155: LD_VAR 0 8
50159: PPUSH
50160: LD_VAR 0 4
50164: PPUSH
50165: CALL_OW 380
// end else
50169: GO 50188
// PrepareHuman ( false , i , skill ) ;
50171: LD_INT 0
50173: PPUSH
50174: LD_VAR 0 8
50178: PPUSH
50179: LD_VAR 0 4
50183: PPUSH
50184: CALL_OW 380
// un := CreateHuman ;
50188: LD_ADDR_VAR 0 14
50192: PUSH
50193: CALL_OW 44
50197: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50198: LD_ADDR_VAR 0 7
50202: PUSH
50203: LD_VAR 0 7
50207: PPUSH
50208: LD_INT 1
50210: PPUSH
50211: LD_VAR 0 14
50215: PPUSH
50216: CALL_OW 2
50220: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50221: LD_VAR 0 14
50225: PPUSH
50226: LD_VAR 0 12
50230: PUSH
50231: LD_INT 1
50233: ARRAY
50234: PPUSH
50235: CALL_OW 52
// end ;
50239: GO 49874
50241: POP
50242: POP
// end ;
50243: GO 49174
50245: POP
50246: POP
// result := result ^ buildings ;
50247: LD_ADDR_VAR 0 7
50251: PUSH
50252: LD_VAR 0 7
50256: PUSH
50257: LD_VAR 0 18
50261: ADD
50262: ST_TO_ADDR
// end else
50263: GO 50406
// begin for i = 1 to personel do
50265: LD_ADDR_VAR 0 8
50269: PUSH
50270: DOUBLE
50271: LD_INT 1
50273: DEC
50274: ST_TO_ADDR
50275: LD_VAR 0 6
50279: PUSH
50280: FOR_TO
50281: IFFALSE 50404
// begin if i > 4 then
50283: LD_VAR 0 8
50287: PUSH
50288: LD_INT 4
50290: GREATER
50291: IFFALSE 50295
// break ;
50293: GO 50404
// x := personel [ i ] ;
50295: LD_ADDR_VAR 0 13
50299: PUSH
50300: LD_VAR 0 6
50304: PUSH
50305: LD_VAR 0 8
50309: ARRAY
50310: ST_TO_ADDR
// if x = - 1 then
50311: LD_VAR 0 13
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: EQUAL
50320: IFFALSE 50324
// continue ;
50322: GO 50280
// PrepareHuman ( false , i , skill ) ;
50324: LD_INT 0
50326: PPUSH
50327: LD_VAR 0 8
50331: PPUSH
50332: LD_VAR 0 4
50336: PPUSH
50337: CALL_OW 380
// un := CreateHuman ;
50341: LD_ADDR_VAR 0 14
50345: PUSH
50346: CALL_OW 44
50350: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50351: LD_VAR 0 14
50355: PPUSH
50356: LD_VAR 0 1
50360: PPUSH
50361: CALL_OW 250
50365: PPUSH
50366: LD_VAR 0 1
50370: PPUSH
50371: CALL_OW 251
50375: PPUSH
50376: LD_INT 10
50378: PPUSH
50379: LD_INT 0
50381: PPUSH
50382: CALL_OW 50
// result := result ^ un ;
50386: LD_ADDR_VAR 0 7
50390: PUSH
50391: LD_VAR 0 7
50395: PUSH
50396: LD_VAR 0 14
50400: ADD
50401: ST_TO_ADDR
// end ;
50402: GO 50280
50404: POP
50405: POP
// end ; end ;
50406: LD_VAR 0 7
50410: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50411: LD_INT 0
50413: PPUSH
50414: PPUSH
50415: PPUSH
50416: PPUSH
50417: PPUSH
50418: PPUSH
50419: PPUSH
50420: PPUSH
50421: PPUSH
50422: PPUSH
50423: PPUSH
50424: PPUSH
50425: PPUSH
50426: PPUSH
50427: PPUSH
50428: PPUSH
// result := false ;
50429: LD_ADDR_VAR 0 3
50433: PUSH
50434: LD_INT 0
50436: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50437: LD_VAR 0 1
50441: NOT
50442: IFTRUE 50467
50444: PUSH
50445: LD_VAR 0 1
50449: PPUSH
50450: CALL_OW 266
50454: PUSH
50455: LD_INT 32
50457: PUSH
50458: LD_INT 33
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: IN
50465: NOT
50466: OR
50467: IFFALSE 50471
// exit ;
50469: GO 51606
// nat := GetNation ( tower ) ;
50471: LD_ADDR_VAR 0 12
50475: PUSH
50476: LD_VAR 0 1
50480: PPUSH
50481: CALL_OW 248
50485: ST_TO_ADDR
// side := GetSide ( tower ) ;
50486: LD_ADDR_VAR 0 16
50490: PUSH
50491: LD_VAR 0 1
50495: PPUSH
50496: CALL_OW 255
50500: ST_TO_ADDR
// x := GetX ( tower ) ;
50501: LD_ADDR_VAR 0 10
50505: PUSH
50506: LD_VAR 0 1
50510: PPUSH
50511: CALL_OW 250
50515: ST_TO_ADDR
// y := GetY ( tower ) ;
50516: LD_ADDR_VAR 0 11
50520: PUSH
50521: LD_VAR 0 1
50525: PPUSH
50526: CALL_OW 251
50530: ST_TO_ADDR
// if not x or not y then
50531: LD_VAR 0 10
50535: NOT
50536: IFTRUE 50545
50538: PUSH
50539: LD_VAR 0 11
50543: NOT
50544: OR
50545: IFFALSE 50549
// exit ;
50547: GO 51606
// weapon := 0 ;
50549: LD_ADDR_VAR 0 18
50553: PUSH
50554: LD_INT 0
50556: ST_TO_ADDR
// fac_list := [ ] ;
50557: LD_ADDR_VAR 0 17
50561: PUSH
50562: EMPTY
50563: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50564: LD_ADDR_VAR 0 6
50568: PUSH
50569: LD_VAR 0 1
50573: PPUSH
50574: CALL_OW 274
50578: PPUSH
50579: LD_VAR 0 2
50583: PPUSH
50584: LD_INT 0
50586: PPUSH
50587: CALL 48141 0 3
50591: PPUSH
50592: LD_INT 30
50594: PUSH
50595: LD_INT 3
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PPUSH
50602: CALL_OW 72
50606: ST_TO_ADDR
// if not factories then
50607: LD_VAR 0 6
50611: NOT
50612: IFFALSE 50616
// exit ;
50614: GO 51606
// for i in factories do
50616: LD_ADDR_VAR 0 8
50620: PUSH
50621: LD_VAR 0 6
50625: PUSH
50626: FOR_IN
50627: IFFALSE 50652
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50629: LD_ADDR_VAR 0 17
50633: PUSH
50634: LD_VAR 0 17
50638: PUSH
50639: LD_VAR 0 8
50643: PPUSH
50644: CALL_OW 478
50648: UNION
50649: ST_TO_ADDR
50650: GO 50626
50652: POP
50653: POP
// if not fac_list then
50654: LD_VAR 0 17
50658: NOT
50659: IFFALSE 50663
// exit ;
50661: GO 51606
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50663: LD_ADDR_VAR 0 5
50667: PUSH
50668: LD_INT 4
50670: PUSH
50671: LD_INT 5
50673: PUSH
50674: LD_INT 9
50676: PUSH
50677: LD_INT 10
50679: PUSH
50680: LD_INT 6
50682: PUSH
50683: LD_INT 7
50685: PUSH
50686: LD_INT 11
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 27
50700: PUSH
50701: LD_INT 28
50703: PUSH
50704: LD_INT 26
50706: PUSH
50707: LD_INT 30
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 43
50718: PUSH
50719: LD_INT 44
50721: PUSH
50722: LD_INT 46
50724: PUSH
50725: LD_INT 45
50727: PUSH
50728: LD_INT 47
50730: PUSH
50731: LD_INT 49
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: LIST
50746: PUSH
50747: LD_VAR 0 12
50751: ARRAY
50752: ST_TO_ADDR
// list := list isect fac_list ;
50753: LD_ADDR_VAR 0 5
50757: PUSH
50758: LD_VAR 0 5
50762: PUSH
50763: LD_VAR 0 17
50767: ISECT
50768: ST_TO_ADDR
// if not list then
50769: LD_VAR 0 5
50773: NOT
50774: IFFALSE 50778
// exit ;
50776: GO 51606
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50778: LD_VAR 0 12
50782: PUSH
50783: LD_INT 3
50785: EQUAL
50786: IFFALSE 50798
50788: PUSH
50789: LD_INT 49
50791: PUSH
50792: LD_VAR 0 5
50796: IN
50797: AND
50798: IFFALSE 50818
50800: PUSH
50801: LD_INT 31
50803: PPUSH
50804: LD_VAR 0 16
50808: PPUSH
50809: CALL_OW 321
50813: PUSH
50814: LD_INT 2
50816: EQUAL
50817: AND
50818: IFFALSE 50878
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50820: LD_INT 22
50822: PUSH
50823: LD_VAR 0 16
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 35
50834: PUSH
50835: LD_INT 49
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 91
50844: PUSH
50845: LD_VAR 0 1
50849: PUSH
50850: LD_INT 10
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: LIST
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: LIST
50862: PPUSH
50863: CALL_OW 69
50867: NOT
50868: IFFALSE 50878
// weapon := ru_time_lapser ;
50870: LD_ADDR_VAR 0 18
50874: PUSH
50875: LD_INT 49
50877: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50878: LD_VAR 0 12
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: IN
50893: IFFALSE 50917
50895: PUSH
50896: LD_INT 11
50898: PUSH
50899: LD_VAR 0 5
50903: IN
50904: IFTRUE 50916
50906: PUSH
50907: LD_INT 30
50909: PUSH
50910: LD_VAR 0 5
50914: IN
50915: OR
50916: AND
50917: IFFALSE 50937
50919: PUSH
50920: LD_INT 6
50922: PPUSH
50923: LD_VAR 0 16
50927: PPUSH
50928: CALL_OW 321
50932: PUSH
50933: LD_INT 2
50935: EQUAL
50936: AND
50937: IFFALSE 51104
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50939: LD_INT 22
50941: PUSH
50942: LD_VAR 0 16
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: LD_INT 35
50956: PUSH
50957: LD_INT 11
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 35
50966: PUSH
50967: LD_INT 30
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 91
50981: PUSH
50982: LD_VAR 0 1
50986: PUSH
50987: LD_INT 18
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: LIST
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: LIST
50999: PPUSH
51000: CALL_OW 69
51004: NOT
51005: IFFALSE 51081
51007: PUSH
51008: LD_INT 22
51010: PUSH
51011: LD_VAR 0 16
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: LD_INT 30
51025: PUSH
51026: LD_INT 32
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 30
51035: PUSH
51036: LD_INT 33
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 91
51050: PUSH
51051: LD_VAR 0 1
51055: PUSH
51056: LD_INT 12
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: LIST
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: LIST
51068: PUSH
51069: EMPTY
51070: LIST
51071: PPUSH
51072: CALL_OW 69
51076: PUSH
51077: LD_INT 2
51079: GREATER
51080: AND
51081: IFFALSE 51104
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51083: LD_ADDR_VAR 0 18
51087: PUSH
51088: LD_INT 11
51090: PUSH
51091: LD_INT 30
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_VAR 0 12
51102: ARRAY
51103: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51104: LD_VAR 0 18
51108: NOT
51109: IFFALSE 51129
51111: PUSH
51112: LD_INT 40
51114: PPUSH
51115: LD_VAR 0 16
51119: PPUSH
51120: CALL_OW 321
51124: PUSH
51125: LD_INT 2
51127: EQUAL
51128: AND
51129: IFFALSE 51165
51131: PUSH
51132: LD_INT 7
51134: PUSH
51135: LD_VAR 0 5
51139: IN
51140: IFTRUE 51152
51142: PUSH
51143: LD_INT 28
51145: PUSH
51146: LD_VAR 0 5
51150: IN
51151: OR
51152: IFTRUE 51164
51154: PUSH
51155: LD_INT 45
51157: PUSH
51158: LD_VAR 0 5
51162: IN
51163: OR
51164: AND
51165: IFFALSE 51419
// begin hex := GetHexInfo ( x , y ) ;
51167: LD_ADDR_VAR 0 4
51171: PUSH
51172: LD_VAR 0 10
51176: PPUSH
51177: LD_VAR 0 11
51181: PPUSH
51182: CALL_OW 546
51186: ST_TO_ADDR
// if hex [ 1 ] then
51187: LD_VAR 0 4
51191: PUSH
51192: LD_INT 1
51194: ARRAY
51195: IFFALSE 51199
// exit ;
51197: GO 51606
// height := hex [ 2 ] ;
51199: LD_ADDR_VAR 0 15
51203: PUSH
51204: LD_VAR 0 4
51208: PUSH
51209: LD_INT 2
51211: ARRAY
51212: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51213: LD_ADDR_VAR 0 14
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 2
51223: PUSH
51224: LD_INT 3
51226: PUSH
51227: LD_INT 5
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: ST_TO_ADDR
// for i in tmp do
51236: LD_ADDR_VAR 0 8
51240: PUSH
51241: LD_VAR 0 14
51245: PUSH
51246: FOR_IN
51247: IFFALSE 51417
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51249: LD_ADDR_VAR 0 9
51253: PUSH
51254: LD_VAR 0 10
51258: PPUSH
51259: LD_VAR 0 8
51263: PPUSH
51264: LD_INT 5
51266: PPUSH
51267: CALL_OW 272
51271: PUSH
51272: LD_VAR 0 11
51276: PPUSH
51277: LD_VAR 0 8
51281: PPUSH
51282: LD_INT 5
51284: PPUSH
51285: CALL_OW 273
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51294: LD_VAR 0 9
51298: PUSH
51299: LD_INT 1
51301: ARRAY
51302: PPUSH
51303: LD_VAR 0 9
51307: PUSH
51308: LD_INT 2
51310: ARRAY
51311: PPUSH
51312: CALL_OW 488
51316: IFFALSE 51415
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51318: LD_ADDR_VAR 0 4
51322: PUSH
51323: LD_VAR 0 9
51327: PUSH
51328: LD_INT 1
51330: ARRAY
51331: PPUSH
51332: LD_VAR 0 9
51336: PUSH
51337: LD_INT 2
51339: ARRAY
51340: PPUSH
51341: CALL_OW 546
51345: ST_TO_ADDR
// if hex [ 1 ] then
51346: LD_VAR 0 4
51350: PUSH
51351: LD_INT 1
51353: ARRAY
51354: IFFALSE 51358
// continue ;
51356: GO 51246
// h := hex [ 2 ] ;
51358: LD_ADDR_VAR 0 13
51362: PUSH
51363: LD_VAR 0 4
51367: PUSH
51368: LD_INT 2
51370: ARRAY
51371: ST_TO_ADDR
// if h + 7 < height then
51372: LD_VAR 0 13
51376: PUSH
51377: LD_INT 7
51379: PLUS
51380: PUSH
51381: LD_VAR 0 15
51385: LESS
51386: IFFALSE 51415
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51388: LD_ADDR_VAR 0 18
51392: PUSH
51393: LD_INT 7
51395: PUSH
51396: LD_INT 28
51398: PUSH
51399: LD_INT 45
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: LIST
51406: PUSH
51407: LD_VAR 0 12
51411: ARRAY
51412: ST_TO_ADDR
// break ;
51413: GO 51417
// end ; end ; end ;
51415: GO 51246
51417: POP
51418: POP
// end ; if not weapon then
51419: LD_VAR 0 18
51423: NOT
51424: IFFALSE 51484
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51426: LD_ADDR_VAR 0 5
51430: PUSH
51431: LD_VAR 0 5
51435: PUSH
51436: LD_INT 11
51438: PUSH
51439: LD_INT 30
51441: PUSH
51442: LD_INT 49
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: DIFF
51450: ST_TO_ADDR
// if not list then
51451: LD_VAR 0 5
51455: NOT
51456: IFFALSE 51460
// exit ;
51458: GO 51606
// weapon := list [ rand ( 1 , list ) ] ;
51460: LD_ADDR_VAR 0 18
51464: PUSH
51465: LD_VAR 0 5
51469: PUSH
51470: LD_INT 1
51472: PPUSH
51473: LD_VAR 0 5
51477: PPUSH
51478: CALL_OW 12
51482: ARRAY
51483: ST_TO_ADDR
// end ; if weapon then
51484: LD_VAR 0 18
51488: IFFALSE 51606
// begin tmp := CostOfWeapon ( weapon ) ;
51490: LD_ADDR_VAR 0 14
51494: PUSH
51495: LD_VAR 0 18
51499: PPUSH
51500: CALL_OW 451
51504: ST_TO_ADDR
// j := GetBase ( tower ) ;
51505: LD_ADDR_VAR 0 9
51509: PUSH
51510: LD_VAR 0 1
51514: PPUSH
51515: CALL_OW 274
51519: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51520: LD_VAR 0 9
51524: PPUSH
51525: LD_INT 1
51527: PPUSH
51528: CALL_OW 275
51532: PUSH
51533: LD_VAR 0 14
51537: PUSH
51538: LD_INT 1
51540: ARRAY
51541: GREATEREQUAL
51542: IFFALSE 51568
51544: PUSH
51545: LD_VAR 0 9
51549: PPUSH
51550: LD_INT 2
51552: PPUSH
51553: CALL_OW 275
51557: PUSH
51558: LD_VAR 0 14
51562: PUSH
51563: LD_INT 2
51565: ARRAY
51566: GREATEREQUAL
51567: AND
51568: IFFALSE 51594
51570: PUSH
51571: LD_VAR 0 9
51575: PPUSH
51576: LD_INT 3
51578: PPUSH
51579: CALL_OW 275
51583: PUSH
51584: LD_VAR 0 14
51588: PUSH
51589: LD_INT 3
51591: ARRAY
51592: GREATEREQUAL
51593: AND
51594: IFFALSE 51606
// result := weapon ;
51596: LD_ADDR_VAR 0 3
51600: PUSH
51601: LD_VAR 0 18
51605: ST_TO_ADDR
// end ; end ;
51606: LD_VAR 0 3
51610: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51611: LD_INT 0
51613: PPUSH
51614: PPUSH
// result := true ;
51615: LD_ADDR_VAR 0 3
51619: PUSH
51620: LD_INT 1
51622: ST_TO_ADDR
// if array1 = array2 then
51623: LD_VAR 0 1
51627: PUSH
51628: LD_VAR 0 2
51632: EQUAL
51633: IFFALSE 51693
// begin for i = 1 to array1 do
51635: LD_ADDR_VAR 0 4
51639: PUSH
51640: DOUBLE
51641: LD_INT 1
51643: DEC
51644: ST_TO_ADDR
51645: LD_VAR 0 1
51649: PUSH
51650: FOR_TO
51651: IFFALSE 51689
// if array1 [ i ] <> array2 [ i ] then
51653: LD_VAR 0 1
51657: PUSH
51658: LD_VAR 0 4
51662: ARRAY
51663: PUSH
51664: LD_VAR 0 2
51668: PUSH
51669: LD_VAR 0 4
51673: ARRAY
51674: NONEQUAL
51675: IFFALSE 51687
// begin result := false ;
51677: LD_ADDR_VAR 0 3
51681: PUSH
51682: LD_INT 0
51684: ST_TO_ADDR
// break ;
51685: GO 51689
// end ;
51687: GO 51650
51689: POP
51690: POP
// end else
51691: GO 51701
// result := false ;
51693: LD_ADDR_VAR 0 3
51697: PUSH
51698: LD_INT 0
51700: ST_TO_ADDR
// end ;
51701: LD_VAR 0 3
51705: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51706: LD_INT 0
51708: PPUSH
51709: PPUSH
// if not array1 or not array2 then
51710: LD_VAR 0 1
51714: NOT
51715: IFTRUE 51724
51717: PUSH
51718: LD_VAR 0 2
51722: NOT
51723: OR
51724: IFFALSE 51728
// exit ;
51726: GO 51792
// result := true ;
51728: LD_ADDR_VAR 0 3
51732: PUSH
51733: LD_INT 1
51735: ST_TO_ADDR
// for i = 1 to array1 do
51736: LD_ADDR_VAR 0 4
51740: PUSH
51741: DOUBLE
51742: LD_INT 1
51744: DEC
51745: ST_TO_ADDR
51746: LD_VAR 0 1
51750: PUSH
51751: FOR_TO
51752: IFFALSE 51790
// if array1 [ i ] <> array2 [ i ] then
51754: LD_VAR 0 1
51758: PUSH
51759: LD_VAR 0 4
51763: ARRAY
51764: PUSH
51765: LD_VAR 0 2
51769: PUSH
51770: LD_VAR 0 4
51774: ARRAY
51775: NONEQUAL
51776: IFFALSE 51788
// begin result := false ;
51778: LD_ADDR_VAR 0 3
51782: PUSH
51783: LD_INT 0
51785: ST_TO_ADDR
// break ;
51786: GO 51790
// end ;
51788: GO 51751
51790: POP
51791: POP
// end ;
51792: LD_VAR 0 3
51796: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51797: LD_INT 0
51799: PPUSH
51800: PPUSH
51801: PPUSH
// pom := GetBase ( fac ) ;
51802: LD_ADDR_VAR 0 5
51806: PUSH
51807: LD_VAR 0 1
51811: PPUSH
51812: CALL_OW 274
51816: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51817: LD_ADDR_VAR 0 4
51821: PUSH
51822: LD_VAR 0 2
51826: PUSH
51827: LD_INT 1
51829: ARRAY
51830: PPUSH
51831: LD_VAR 0 2
51835: PUSH
51836: LD_INT 2
51838: ARRAY
51839: PPUSH
51840: LD_VAR 0 2
51844: PUSH
51845: LD_INT 3
51847: ARRAY
51848: PPUSH
51849: LD_VAR 0 2
51853: PUSH
51854: LD_INT 4
51856: ARRAY
51857: PPUSH
51858: CALL_OW 449
51862: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51863: LD_ADDR_VAR 0 3
51867: PUSH
51868: LD_VAR 0 5
51872: PPUSH
51873: LD_INT 1
51875: PPUSH
51876: CALL_OW 275
51880: PUSH
51881: LD_VAR 0 4
51885: PUSH
51886: LD_INT 1
51888: ARRAY
51889: GREATEREQUAL
51890: IFFALSE 51916
51892: PUSH
51893: LD_VAR 0 5
51897: PPUSH
51898: LD_INT 2
51900: PPUSH
51901: CALL_OW 275
51905: PUSH
51906: LD_VAR 0 4
51910: PUSH
51911: LD_INT 2
51913: ARRAY
51914: GREATEREQUAL
51915: AND
51916: IFFALSE 51942
51918: PUSH
51919: LD_VAR 0 5
51923: PPUSH
51924: LD_INT 3
51926: PPUSH
51927: CALL_OW 275
51931: PUSH
51932: LD_VAR 0 4
51936: PUSH
51937: LD_INT 3
51939: ARRAY
51940: GREATEREQUAL
51941: AND
51942: ST_TO_ADDR
// end ;
51943: LD_VAR 0 3
51947: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51948: LD_INT 0
51950: PPUSH
51951: PPUSH
51952: PPUSH
51953: PPUSH
// pom := GetBase ( building ) ;
51954: LD_ADDR_VAR 0 3
51958: PUSH
51959: LD_VAR 0 1
51963: PPUSH
51964: CALL_OW 274
51968: ST_TO_ADDR
// if not pom then
51969: LD_VAR 0 3
51973: NOT
51974: IFFALSE 51978
// exit ;
51976: GO 52152
// btype := GetBType ( building ) ;
51978: LD_ADDR_VAR 0 5
51982: PUSH
51983: LD_VAR 0 1
51987: PPUSH
51988: CALL_OW 266
51992: ST_TO_ADDR
// if btype = b_armoury then
51993: LD_VAR 0 5
51997: PUSH
51998: LD_INT 4
52000: EQUAL
52001: IFFALSE 52011
// btype := b_barracks ;
52003: LD_ADDR_VAR 0 5
52007: PUSH
52008: LD_INT 5
52010: ST_TO_ADDR
// if btype = b_depot then
52011: LD_VAR 0 5
52015: PUSH
52016: LD_INT 0
52018: EQUAL
52019: IFFALSE 52029
// btype := b_warehouse ;
52021: LD_ADDR_VAR 0 5
52025: PUSH
52026: LD_INT 1
52028: ST_TO_ADDR
// if btype = b_workshop then
52029: LD_VAR 0 5
52033: PUSH
52034: LD_INT 2
52036: EQUAL
52037: IFFALSE 52047
// btype := b_factory ;
52039: LD_ADDR_VAR 0 5
52043: PUSH
52044: LD_INT 3
52046: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52047: LD_ADDR_VAR 0 4
52051: PUSH
52052: LD_VAR 0 5
52056: PPUSH
52057: LD_VAR 0 1
52061: PPUSH
52062: CALL_OW 248
52066: PPUSH
52067: CALL_OW 450
52071: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52072: LD_ADDR_VAR 0 2
52076: PUSH
52077: LD_VAR 0 3
52081: PPUSH
52082: LD_INT 1
52084: PPUSH
52085: CALL_OW 275
52089: PUSH
52090: LD_VAR 0 4
52094: PUSH
52095: LD_INT 1
52097: ARRAY
52098: GREATEREQUAL
52099: IFFALSE 52125
52101: PUSH
52102: LD_VAR 0 3
52106: PPUSH
52107: LD_INT 2
52109: PPUSH
52110: CALL_OW 275
52114: PUSH
52115: LD_VAR 0 4
52119: PUSH
52120: LD_INT 2
52122: ARRAY
52123: GREATEREQUAL
52124: AND
52125: IFFALSE 52151
52127: PUSH
52128: LD_VAR 0 3
52132: PPUSH
52133: LD_INT 3
52135: PPUSH
52136: CALL_OW 275
52140: PUSH
52141: LD_VAR 0 4
52145: PUSH
52146: LD_INT 3
52148: ARRAY
52149: GREATEREQUAL
52150: AND
52151: ST_TO_ADDR
// end ;
52152: LD_VAR 0 2
52156: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52157: LD_INT 0
52159: PPUSH
52160: PPUSH
52161: PPUSH
// pom := GetBase ( building ) ;
52162: LD_ADDR_VAR 0 4
52166: PUSH
52167: LD_VAR 0 1
52171: PPUSH
52172: CALL_OW 274
52176: ST_TO_ADDR
// if not pom then
52177: LD_VAR 0 4
52181: NOT
52182: IFFALSE 52186
// exit ;
52184: GO 52291
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52186: LD_ADDR_VAR 0 5
52190: PUSH
52191: LD_VAR 0 2
52195: PPUSH
52196: LD_VAR 0 1
52200: PPUSH
52201: CALL_OW 248
52205: PPUSH
52206: CALL_OW 450
52210: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52211: LD_ADDR_VAR 0 3
52215: PUSH
52216: LD_VAR 0 4
52220: PPUSH
52221: LD_INT 1
52223: PPUSH
52224: CALL_OW 275
52228: PUSH
52229: LD_VAR 0 5
52233: PUSH
52234: LD_INT 1
52236: ARRAY
52237: GREATEREQUAL
52238: IFFALSE 52264
52240: PUSH
52241: LD_VAR 0 4
52245: PPUSH
52246: LD_INT 2
52248: PPUSH
52249: CALL_OW 275
52253: PUSH
52254: LD_VAR 0 5
52258: PUSH
52259: LD_INT 2
52261: ARRAY
52262: GREATEREQUAL
52263: AND
52264: IFFALSE 52290
52266: PUSH
52267: LD_VAR 0 4
52271: PPUSH
52272: LD_INT 3
52274: PPUSH
52275: CALL_OW 275
52279: PUSH
52280: LD_VAR 0 5
52284: PUSH
52285: LD_INT 3
52287: ARRAY
52288: GREATEREQUAL
52289: AND
52290: ST_TO_ADDR
// end ;
52291: LD_VAR 0 3
52295: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52296: LD_INT 0
52298: PPUSH
52299: PPUSH
52300: PPUSH
52301: PPUSH
52302: PPUSH
52303: PPUSH
52304: PPUSH
52305: PPUSH
52306: PPUSH
52307: PPUSH
52308: PPUSH
// result := false ;
52309: LD_ADDR_VAR 0 8
52313: PUSH
52314: LD_INT 0
52316: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52317: LD_VAR 0 5
52321: NOT
52322: IFTRUE 52331
52324: PUSH
52325: LD_VAR 0 1
52329: NOT
52330: OR
52331: IFTRUE 52340
52333: PUSH
52334: LD_VAR 0 2
52338: NOT
52339: OR
52340: IFTRUE 52349
52342: PUSH
52343: LD_VAR 0 3
52347: NOT
52348: OR
52349: IFFALSE 52353
// exit ;
52351: GO 53179
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52353: LD_ADDR_VAR 0 14
52357: PUSH
52358: LD_VAR 0 1
52362: PPUSH
52363: LD_VAR 0 2
52367: PPUSH
52368: LD_VAR 0 3
52372: PPUSH
52373: LD_VAR 0 4
52377: PPUSH
52378: LD_VAR 0 5
52382: PUSH
52383: LD_INT 1
52385: ARRAY
52386: PPUSH
52387: CALL_OW 248
52391: PPUSH
52392: LD_INT 0
52394: PPUSH
52395: CALL 54460 0 6
52399: ST_TO_ADDR
// if not hexes then
52400: LD_VAR 0 14
52404: NOT
52405: IFFALSE 52409
// exit ;
52407: GO 53179
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52409: LD_ADDR_VAR 0 17
52413: PUSH
52414: LD_VAR 0 5
52418: PPUSH
52419: LD_INT 22
52421: PUSH
52422: LD_VAR 0 13
52426: PPUSH
52427: CALL_OW 255
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 30
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 30
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PPUSH
52468: CALL_OW 72
52472: ST_TO_ADDR
// for i = 1 to hexes do
52473: LD_ADDR_VAR 0 9
52477: PUSH
52478: DOUBLE
52479: LD_INT 1
52481: DEC
52482: ST_TO_ADDR
52483: LD_VAR 0 14
52487: PUSH
52488: FOR_TO
52489: IFFALSE 53177
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52491: LD_ADDR_VAR 0 13
52495: PUSH
52496: LD_VAR 0 14
52500: PUSH
52501: LD_VAR 0 9
52505: ARRAY
52506: PUSH
52507: LD_INT 1
52509: ARRAY
52510: PPUSH
52511: LD_VAR 0 14
52515: PUSH
52516: LD_VAR 0 9
52520: ARRAY
52521: PUSH
52522: LD_INT 2
52524: ARRAY
52525: PPUSH
52526: CALL_OW 428
52530: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52531: LD_VAR 0 14
52535: PUSH
52536: LD_VAR 0 9
52540: ARRAY
52541: PUSH
52542: LD_INT 1
52544: ARRAY
52545: PPUSH
52546: LD_VAR 0 14
52550: PUSH
52551: LD_VAR 0 9
52555: ARRAY
52556: PUSH
52557: LD_INT 2
52559: ARRAY
52560: PPUSH
52561: CALL_OW 351
52565: IFTRUE 52604
52567: PUSH
52568: LD_VAR 0 14
52572: PUSH
52573: LD_VAR 0 9
52577: ARRAY
52578: PUSH
52579: LD_INT 1
52581: ARRAY
52582: PPUSH
52583: LD_VAR 0 14
52587: PUSH
52588: LD_VAR 0 9
52592: ARRAY
52593: PUSH
52594: LD_INT 2
52596: ARRAY
52597: PPUSH
52598: CALL_OW 488
52602: NOT
52603: OR
52604: IFTRUE 52621
52606: PUSH
52607: LD_VAR 0 13
52611: PPUSH
52612: CALL_OW 247
52616: PUSH
52617: LD_INT 3
52619: EQUAL
52620: OR
52621: IFFALSE 52627
// exit ;
52623: POP
52624: POP
52625: GO 53179
// if not tmp then
52627: LD_VAR 0 13
52631: NOT
52632: IFFALSE 52636
// continue ;
52634: GO 52488
// result := true ;
52636: LD_ADDR_VAR 0 8
52640: PUSH
52641: LD_INT 1
52643: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52644: LD_VAR 0 6
52648: IFFALSE 52665
52650: PUSH
52651: LD_VAR 0 13
52655: PPUSH
52656: CALL_OW 247
52660: PUSH
52661: LD_INT 2
52663: EQUAL
52664: AND
52665: IFFALSE 52682
52667: PUSH
52668: LD_VAR 0 13
52672: PPUSH
52673: CALL_OW 263
52677: PUSH
52678: LD_INT 1
52680: EQUAL
52681: AND
52682: IFFALSE 52846
// begin if IsDrivenBy ( tmp ) then
52684: LD_VAR 0 13
52688: PPUSH
52689: CALL_OW 311
52693: IFFALSE 52697
// continue ;
52695: GO 52488
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52697: LD_VAR 0 6
52701: PPUSH
52702: LD_INT 3
52704: PUSH
52705: LD_INT 60
52707: PUSH
52708: EMPTY
52709: LIST
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: LD_INT 55
52720: PUSH
52721: EMPTY
52722: LIST
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PPUSH
52732: CALL_OW 72
52736: IFFALSE 52844
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52738: LD_ADDR_VAR 0 18
52742: PUSH
52743: LD_VAR 0 6
52747: PPUSH
52748: LD_INT 3
52750: PUSH
52751: LD_INT 60
52753: PUSH
52754: EMPTY
52755: LIST
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 3
52763: PUSH
52764: LD_INT 55
52766: PUSH
52767: EMPTY
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PPUSH
52778: CALL_OW 72
52782: PUSH
52783: LD_INT 1
52785: ARRAY
52786: ST_TO_ADDR
// if IsInUnit ( driver ) then
52787: LD_VAR 0 18
52791: PPUSH
52792: CALL_OW 310
52796: IFFALSE 52807
// ComExit ( driver ) ;
52798: LD_VAR 0 18
52802: PPUSH
52803: CALL 78460 0 1
// AddComEnterUnit ( driver , tmp ) ;
52807: LD_VAR 0 18
52811: PPUSH
52812: LD_VAR 0 13
52816: PPUSH
52817: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52821: LD_VAR 0 18
52825: PPUSH
52826: LD_VAR 0 7
52830: PPUSH
52831: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52835: LD_VAR 0 18
52839: PPUSH
52840: CALL_OW 181
// end ; continue ;
52844: GO 52488
// end ; if not cleaners or not tmp in cleaners then
52846: LD_VAR 0 6
52850: NOT
52851: IFTRUE 52866
52853: PUSH
52854: LD_VAR 0 13
52858: PUSH
52859: LD_VAR 0 6
52863: IN
52864: NOT
52865: OR
52866: IFFALSE 53175
// begin if dep then
52868: LD_VAR 0 17
52872: IFFALSE 53008
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52874: LD_ADDR_VAR 0 16
52878: PUSH
52879: LD_VAR 0 17
52883: PUSH
52884: LD_INT 1
52886: ARRAY
52887: PPUSH
52888: CALL_OW 250
52892: PPUSH
52893: LD_VAR 0 17
52897: PUSH
52898: LD_INT 1
52900: ARRAY
52901: PPUSH
52902: CALL_OW 254
52906: PPUSH
52907: LD_INT 5
52909: PPUSH
52910: CALL_OW 272
52914: PUSH
52915: LD_VAR 0 17
52919: PUSH
52920: LD_INT 1
52922: ARRAY
52923: PPUSH
52924: CALL_OW 251
52928: PPUSH
52929: LD_VAR 0 17
52933: PUSH
52934: LD_INT 1
52936: ARRAY
52937: PPUSH
52938: CALL_OW 254
52942: PPUSH
52943: LD_INT 5
52945: PPUSH
52946: CALL_OW 273
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52955: LD_VAR 0 16
52959: PUSH
52960: LD_INT 1
52962: ARRAY
52963: PPUSH
52964: LD_VAR 0 16
52968: PUSH
52969: LD_INT 2
52971: ARRAY
52972: PPUSH
52973: CALL_OW 488
52977: IFFALSE 53008
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52979: LD_VAR 0 13
52983: PPUSH
52984: LD_VAR 0 16
52988: PUSH
52989: LD_INT 1
52991: ARRAY
52992: PPUSH
52993: LD_VAR 0 16
52997: PUSH
52998: LD_INT 2
53000: ARRAY
53001: PPUSH
53002: CALL_OW 111
// continue ;
53006: GO 52488
// end ; end ; r := GetDir ( tmp ) ;
53008: LD_ADDR_VAR 0 15
53012: PUSH
53013: LD_VAR 0 13
53017: PPUSH
53018: CALL_OW 254
53022: ST_TO_ADDR
// if r = 5 then
53023: LD_VAR 0 15
53027: PUSH
53028: LD_INT 5
53030: EQUAL
53031: IFFALSE 53041
// r := 0 ;
53033: LD_ADDR_VAR 0 15
53037: PUSH
53038: LD_INT 0
53040: ST_TO_ADDR
// for j = r to 5 do
53041: LD_ADDR_VAR 0 10
53045: PUSH
53046: DOUBLE
53047: LD_VAR 0 15
53051: DEC
53052: ST_TO_ADDR
53053: LD_INT 5
53055: PUSH
53056: FOR_TO
53057: IFFALSE 53173
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53059: LD_ADDR_VAR 0 11
53063: PUSH
53064: LD_VAR 0 13
53068: PPUSH
53069: CALL_OW 250
53073: PPUSH
53074: LD_VAR 0 10
53078: PPUSH
53079: LD_INT 2
53081: PPUSH
53082: CALL_OW 272
53086: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53087: LD_ADDR_VAR 0 12
53091: PUSH
53092: LD_VAR 0 13
53096: PPUSH
53097: CALL_OW 251
53101: PPUSH
53102: LD_VAR 0 10
53106: PPUSH
53107: LD_INT 2
53109: PPUSH
53110: CALL_OW 273
53114: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53115: LD_VAR 0 11
53119: PPUSH
53120: LD_VAR 0 12
53124: PPUSH
53125: CALL_OW 488
53129: IFFALSE 53148
53131: PUSH
53132: LD_VAR 0 11
53136: PPUSH
53137: LD_VAR 0 12
53141: PPUSH
53142: CALL_OW 428
53146: NOT
53147: AND
53148: IFFALSE 53171
// begin ComMoveXY ( tmp , _x , _y ) ;
53150: LD_VAR 0 13
53154: PPUSH
53155: LD_VAR 0 11
53159: PPUSH
53160: LD_VAR 0 12
53164: PPUSH
53165: CALL_OW 111
// break ;
53169: GO 53173
// end ; end ;
53171: GO 53056
53173: POP
53174: POP
// end ; end ;
53175: GO 52488
53177: POP
53178: POP
// end ;
53179: LD_VAR 0 8
53183: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53184: LD_INT 0
53186: PPUSH
// result := true ;
53187: LD_ADDR_VAR 0 3
53191: PUSH
53192: LD_INT 1
53194: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53195: LD_VAR 0 2
53199: PUSH
53200: LD_INT 24
53202: DOUBLE
53203: EQUAL
53204: IFTRUE 53214
53206: LD_INT 33
53208: DOUBLE
53209: EQUAL
53210: IFTRUE 53214
53212: GO 53239
53214: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53215: LD_ADDR_VAR 0 3
53219: PUSH
53220: LD_INT 32
53222: PPUSH
53223: LD_VAR 0 1
53227: PPUSH
53228: CALL_OW 321
53232: PUSH
53233: LD_INT 2
53235: EQUAL
53236: ST_TO_ADDR
53237: GO 53555
53239: LD_INT 20
53241: DOUBLE
53242: EQUAL
53243: IFTRUE 53247
53245: GO 53272
53247: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53248: LD_ADDR_VAR 0 3
53252: PUSH
53253: LD_INT 6
53255: PPUSH
53256: LD_VAR 0 1
53260: PPUSH
53261: CALL_OW 321
53265: PUSH
53266: LD_INT 2
53268: EQUAL
53269: ST_TO_ADDR
53270: GO 53555
53272: LD_INT 22
53274: DOUBLE
53275: EQUAL
53276: IFTRUE 53286
53278: LD_INT 36
53280: DOUBLE
53281: EQUAL
53282: IFTRUE 53286
53284: GO 53311
53286: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53287: LD_ADDR_VAR 0 3
53291: PUSH
53292: LD_INT 15
53294: PPUSH
53295: LD_VAR 0 1
53299: PPUSH
53300: CALL_OW 321
53304: PUSH
53305: LD_INT 2
53307: EQUAL
53308: ST_TO_ADDR
53309: GO 53555
53311: LD_INT 30
53313: DOUBLE
53314: EQUAL
53315: IFTRUE 53319
53317: GO 53344
53319: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53320: LD_ADDR_VAR 0 3
53324: PUSH
53325: LD_INT 20
53327: PPUSH
53328: LD_VAR 0 1
53332: PPUSH
53333: CALL_OW 321
53337: PUSH
53338: LD_INT 2
53340: EQUAL
53341: ST_TO_ADDR
53342: GO 53555
53344: LD_INT 28
53346: DOUBLE
53347: EQUAL
53348: IFTRUE 53358
53350: LD_INT 21
53352: DOUBLE
53353: EQUAL
53354: IFTRUE 53358
53356: GO 53383
53358: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53359: LD_ADDR_VAR 0 3
53363: PUSH
53364: LD_INT 21
53366: PPUSH
53367: LD_VAR 0 1
53371: PPUSH
53372: CALL_OW 321
53376: PUSH
53377: LD_INT 2
53379: EQUAL
53380: ST_TO_ADDR
53381: GO 53555
53383: LD_INT 16
53385: DOUBLE
53386: EQUAL
53387: IFTRUE 53391
53389: GO 53416
53391: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53392: LD_ADDR_VAR 0 3
53396: PUSH
53397: LD_INT 84
53399: PPUSH
53400: LD_VAR 0 1
53404: PPUSH
53405: CALL_OW 321
53409: PUSH
53410: LD_INT 2
53412: EQUAL
53413: ST_TO_ADDR
53414: GO 53555
53416: LD_INT 19
53418: DOUBLE
53419: EQUAL
53420: IFTRUE 53430
53422: LD_INT 23
53424: DOUBLE
53425: EQUAL
53426: IFTRUE 53430
53428: GO 53455
53430: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53431: LD_ADDR_VAR 0 3
53435: PUSH
53436: LD_INT 83
53438: PPUSH
53439: LD_VAR 0 1
53443: PPUSH
53444: CALL_OW 321
53448: PUSH
53449: LD_INT 2
53451: EQUAL
53452: ST_TO_ADDR
53453: GO 53555
53455: LD_INT 17
53457: DOUBLE
53458: EQUAL
53459: IFTRUE 53463
53461: GO 53488
53463: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53464: LD_ADDR_VAR 0 3
53468: PUSH
53469: LD_INT 39
53471: PPUSH
53472: LD_VAR 0 1
53476: PPUSH
53477: CALL_OW 321
53481: PUSH
53482: LD_INT 2
53484: EQUAL
53485: ST_TO_ADDR
53486: GO 53555
53488: LD_INT 18
53490: DOUBLE
53491: EQUAL
53492: IFTRUE 53496
53494: GO 53521
53496: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53497: LD_ADDR_VAR 0 3
53501: PUSH
53502: LD_INT 40
53504: PPUSH
53505: LD_VAR 0 1
53509: PPUSH
53510: CALL_OW 321
53514: PUSH
53515: LD_INT 2
53517: EQUAL
53518: ST_TO_ADDR
53519: GO 53555
53521: LD_INT 27
53523: DOUBLE
53524: EQUAL
53525: IFTRUE 53529
53527: GO 53554
53529: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53530: LD_ADDR_VAR 0 3
53534: PUSH
53535: LD_INT 35
53537: PPUSH
53538: LD_VAR 0 1
53542: PPUSH
53543: CALL_OW 321
53547: PUSH
53548: LD_INT 2
53550: EQUAL
53551: ST_TO_ADDR
53552: GO 53555
53554: POP
// end ;
53555: LD_VAR 0 3
53559: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53560: LD_INT 0
53562: PPUSH
53563: PPUSH
53564: PPUSH
53565: PPUSH
53566: PPUSH
53567: PPUSH
53568: PPUSH
53569: PPUSH
53570: PPUSH
53571: PPUSH
53572: PPUSH
// result := false ;
53573: LD_ADDR_VAR 0 6
53577: PUSH
53578: LD_INT 0
53580: ST_TO_ADDR
// if btype = b_depot then
53581: LD_VAR 0 2
53585: PUSH
53586: LD_INT 0
53588: EQUAL
53589: IFFALSE 53601
// begin result := true ;
53591: LD_ADDR_VAR 0 6
53595: PUSH
53596: LD_INT 1
53598: ST_TO_ADDR
// exit ;
53599: GO 54455
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53601: LD_VAR 0 1
53605: NOT
53606: IFTRUE 53631
53608: PUSH
53609: LD_VAR 0 1
53613: PPUSH
53614: CALL_OW 266
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: IN
53629: NOT
53630: OR
53631: IFTRUE 53640
53633: PUSH
53634: LD_VAR 0 2
53638: NOT
53639: OR
53640: IFTRUE 53676
53642: PUSH
53643: LD_VAR 0 5
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: LD_INT 4
53662: PUSH
53663: LD_INT 5
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: IN
53674: NOT
53675: OR
53676: IFTRUE 53695
53678: PUSH
53679: LD_VAR 0 3
53683: PPUSH
53684: LD_VAR 0 4
53688: PPUSH
53689: CALL_OW 488
53693: NOT
53694: OR
53695: IFFALSE 53699
// exit ;
53697: GO 54455
// side := GetSide ( depot ) ;
53699: LD_ADDR_VAR 0 9
53703: PUSH
53704: LD_VAR 0 1
53708: PPUSH
53709: CALL_OW 255
53713: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53714: LD_VAR 0 9
53718: PPUSH
53719: LD_VAR 0 2
53723: PPUSH
53724: CALL 53184 0 2
53728: NOT
53729: IFFALSE 53733
// exit ;
53731: GO 54455
// pom := GetBase ( depot ) ;
53733: LD_ADDR_VAR 0 10
53737: PUSH
53738: LD_VAR 0 1
53742: PPUSH
53743: CALL_OW 274
53747: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53748: LD_ADDR_VAR 0 11
53752: PUSH
53753: LD_VAR 0 2
53757: PPUSH
53758: LD_VAR 0 1
53762: PPUSH
53763: CALL_OW 248
53767: PPUSH
53768: CALL_OW 450
53772: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53773: LD_VAR 0 10
53777: PPUSH
53778: LD_INT 1
53780: PPUSH
53781: CALL_OW 275
53785: PUSH
53786: LD_VAR 0 11
53790: PUSH
53791: LD_INT 1
53793: ARRAY
53794: GREATEREQUAL
53795: IFFALSE 53821
53797: PUSH
53798: LD_VAR 0 10
53802: PPUSH
53803: LD_INT 2
53805: PPUSH
53806: CALL_OW 275
53810: PUSH
53811: LD_VAR 0 11
53815: PUSH
53816: LD_INT 2
53818: ARRAY
53819: GREATEREQUAL
53820: AND
53821: IFFALSE 53847
53823: PUSH
53824: LD_VAR 0 10
53828: PPUSH
53829: LD_INT 3
53831: PPUSH
53832: CALL_OW 275
53836: PUSH
53837: LD_VAR 0 11
53841: PUSH
53842: LD_INT 3
53844: ARRAY
53845: GREATEREQUAL
53846: AND
53847: NOT
53848: IFFALSE 53852
// exit ;
53850: GO 54455
// if GetBType ( depot ) = b_depot then
53852: LD_VAR 0 1
53856: PPUSH
53857: CALL_OW 266
53861: PUSH
53862: LD_INT 0
53864: EQUAL
53865: IFFALSE 53877
// dist := 28 else
53867: LD_ADDR_VAR 0 14
53871: PUSH
53872: LD_INT 28
53874: ST_TO_ADDR
53875: GO 53885
// dist := 36 ;
53877: LD_ADDR_VAR 0 14
53881: PUSH
53882: LD_INT 36
53884: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53885: LD_VAR 0 1
53889: PPUSH
53890: LD_VAR 0 3
53894: PPUSH
53895: LD_VAR 0 4
53899: PPUSH
53900: CALL_OW 297
53904: PUSH
53905: LD_VAR 0 14
53909: GREATER
53910: IFFALSE 53914
// exit ;
53912: GO 54455
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53914: LD_ADDR_VAR 0 12
53918: PUSH
53919: LD_VAR 0 2
53923: PPUSH
53924: LD_VAR 0 3
53928: PPUSH
53929: LD_VAR 0 4
53933: PPUSH
53934: LD_VAR 0 5
53938: PPUSH
53939: LD_VAR 0 1
53943: PPUSH
53944: CALL_OW 248
53948: PPUSH
53949: LD_INT 0
53951: PPUSH
53952: CALL 54460 0 6
53956: ST_TO_ADDR
// if not hexes then
53957: LD_VAR 0 12
53961: NOT
53962: IFFALSE 53966
// exit ;
53964: GO 54455
// hex := GetHexInfo ( x , y ) ;
53966: LD_ADDR_VAR 0 15
53970: PUSH
53971: LD_VAR 0 3
53975: PPUSH
53976: LD_VAR 0 4
53980: PPUSH
53981: CALL_OW 546
53985: ST_TO_ADDR
// if hex [ 1 ] then
53986: LD_VAR 0 15
53990: PUSH
53991: LD_INT 1
53993: ARRAY
53994: IFFALSE 53998
// exit ;
53996: GO 54455
// height := hex [ 2 ] ;
53998: LD_ADDR_VAR 0 13
54002: PUSH
54003: LD_VAR 0 15
54007: PUSH
54008: LD_INT 2
54010: ARRAY
54011: ST_TO_ADDR
// for i = 1 to hexes do
54012: LD_ADDR_VAR 0 7
54016: PUSH
54017: DOUBLE
54018: LD_INT 1
54020: DEC
54021: ST_TO_ADDR
54022: LD_VAR 0 12
54026: PUSH
54027: FOR_TO
54028: IFFALSE 54372
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54030: LD_VAR 0 12
54034: PUSH
54035: LD_VAR 0 7
54039: ARRAY
54040: PUSH
54041: LD_INT 1
54043: ARRAY
54044: PPUSH
54045: LD_VAR 0 12
54049: PUSH
54050: LD_VAR 0 7
54054: ARRAY
54055: PUSH
54056: LD_INT 2
54058: ARRAY
54059: PPUSH
54060: CALL_OW 488
54064: NOT
54065: IFTRUE 54107
54067: PUSH
54068: LD_VAR 0 12
54072: PUSH
54073: LD_VAR 0 7
54077: ARRAY
54078: PUSH
54079: LD_INT 1
54081: ARRAY
54082: PPUSH
54083: LD_VAR 0 12
54087: PUSH
54088: LD_VAR 0 7
54092: ARRAY
54093: PUSH
54094: LD_INT 2
54096: ARRAY
54097: PPUSH
54098: CALL_OW 428
54102: PUSH
54103: LD_INT 0
54105: GREATER
54106: OR
54107: IFTRUE 54145
54109: PUSH
54110: LD_VAR 0 12
54114: PUSH
54115: LD_VAR 0 7
54119: ARRAY
54120: PUSH
54121: LD_INT 1
54123: ARRAY
54124: PPUSH
54125: LD_VAR 0 12
54129: PUSH
54130: LD_VAR 0 7
54134: ARRAY
54135: PUSH
54136: LD_INT 2
54138: ARRAY
54139: PPUSH
54140: CALL_OW 351
54144: OR
54145: IFFALSE 54151
// exit ;
54147: POP
54148: POP
54149: GO 54455
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54151: LD_ADDR_VAR 0 8
54155: PUSH
54156: LD_VAR 0 12
54160: PUSH
54161: LD_VAR 0 7
54165: ARRAY
54166: PUSH
54167: LD_INT 1
54169: ARRAY
54170: PPUSH
54171: LD_VAR 0 12
54175: PUSH
54176: LD_VAR 0 7
54180: ARRAY
54181: PUSH
54182: LD_INT 2
54184: ARRAY
54185: PPUSH
54186: CALL_OW 546
54190: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54191: LD_VAR 0 8
54195: PUSH
54196: LD_INT 1
54198: ARRAY
54199: IFTRUE 54221
54201: PUSH
54202: LD_VAR 0 8
54206: PUSH
54207: LD_INT 2
54209: ARRAY
54210: PUSH
54211: LD_VAR 0 13
54215: PUSH
54216: LD_INT 2
54218: PLUS
54219: GREATER
54220: OR
54221: IFTRUE 54243
54223: PUSH
54224: LD_VAR 0 8
54228: PUSH
54229: LD_INT 2
54231: ARRAY
54232: PUSH
54233: LD_VAR 0 13
54237: PUSH
54238: LD_INT 2
54240: MINUS
54241: LESS
54242: OR
54243: IFTRUE 54311
54245: PUSH
54246: LD_VAR 0 8
54250: PUSH
54251: LD_INT 3
54253: ARRAY
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 8
54260: PUSH
54261: LD_INT 9
54263: PUSH
54264: LD_INT 10
54266: PUSH
54267: LD_INT 11
54269: PUSH
54270: LD_INT 12
54272: PUSH
54273: LD_INT 13
54275: PUSH
54276: LD_INT 16
54278: PUSH
54279: LD_INT 17
54281: PUSH
54282: LD_INT 18
54284: PUSH
54285: LD_INT 19
54287: PUSH
54288: LD_INT 20
54290: PUSH
54291: LD_INT 21
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: IN
54309: NOT
54310: OR
54311: IFTRUE 54324
54313: PUSH
54314: LD_VAR 0 8
54318: PUSH
54319: LD_INT 5
54321: ARRAY
54322: NOT
54323: OR
54324: IFTRUE 54364
54326: PUSH
54327: LD_VAR 0 8
54331: PUSH
54332: LD_INT 6
54334: ARRAY
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: LD_INT 7
54344: PUSH
54345: LD_INT 9
54347: PUSH
54348: LD_INT 10
54350: PUSH
54351: LD_INT 11
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: IN
54362: NOT
54363: OR
54364: IFFALSE 54370
// exit ;
54366: POP
54367: POP
54368: GO 54455
// end ;
54370: GO 54027
54372: POP
54373: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54374: LD_VAR 0 9
54378: PPUSH
54379: LD_VAR 0 3
54383: PPUSH
54384: LD_VAR 0 4
54388: PPUSH
54389: LD_INT 20
54391: PPUSH
54392: CALL 46274 0 4
54396: PUSH
54397: LD_INT 4
54399: ARRAY
54400: IFFALSE 54404
// exit ;
54402: GO 54455
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54404: LD_VAR 0 2
54408: PUSH
54409: LD_INT 29
54411: PUSH
54412: LD_INT 30
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: IN
54419: IFFALSE 54443
54421: PUSH
54422: LD_VAR 0 3
54426: PPUSH
54427: LD_VAR 0 4
54431: PPUSH
54432: LD_VAR 0 9
54436: PPUSH
54437: CALL_OW 440
54441: NOT
54442: AND
54443: IFFALSE 54447
// exit ;
54445: GO 54455
// result := true ;
54447: LD_ADDR_VAR 0 6
54451: PUSH
54452: LD_INT 1
54454: ST_TO_ADDR
// end ;
54455: LD_VAR 0 6
54459: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54460: LD_INT 0
54462: PPUSH
54463: PPUSH
54464: PPUSH
54465: PPUSH
54466: PPUSH
54467: PPUSH
54468: PPUSH
54469: PPUSH
54470: PPUSH
54471: PPUSH
54472: PPUSH
54473: PPUSH
54474: PPUSH
54475: PPUSH
54476: PPUSH
54477: PPUSH
54478: PPUSH
54479: PPUSH
54480: PPUSH
54481: PPUSH
54482: PPUSH
54483: PPUSH
54484: PPUSH
54485: PPUSH
54486: PPUSH
54487: PPUSH
54488: PPUSH
54489: PPUSH
54490: PPUSH
54491: PPUSH
54492: PPUSH
54493: PPUSH
54494: PPUSH
54495: PPUSH
54496: PPUSH
54497: PPUSH
54498: PPUSH
54499: PPUSH
54500: PPUSH
54501: PPUSH
54502: PPUSH
54503: PPUSH
54504: PPUSH
54505: PPUSH
54506: PPUSH
54507: PPUSH
54508: PPUSH
54509: PPUSH
54510: PPUSH
54511: PPUSH
54512: PPUSH
54513: PPUSH
54514: PPUSH
54515: PPUSH
54516: PPUSH
54517: PPUSH
54518: PPUSH
54519: PPUSH
// result = [ ] ;
54520: LD_ADDR_VAR 0 7
54524: PUSH
54525: EMPTY
54526: ST_TO_ADDR
// temp_list = [ ] ;
54527: LD_ADDR_VAR 0 9
54531: PUSH
54532: EMPTY
54533: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54534: LD_VAR 0 4
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: LD_INT 3
54550: PUSH
54551: LD_INT 4
54553: PUSH
54554: LD_INT 5
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: IN
54565: NOT
54566: IFTRUE 54609
54568: PUSH
54569: LD_VAR 0 1
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: IN
54584: IFFALSE 54608
54586: PUSH
54587: LD_VAR 0 5
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: LD_INT 3
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: IN
54606: NOT
54607: AND
54608: OR
54609: IFFALSE 54613
// exit ;
54611: GO 73012
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54613: LD_VAR 0 1
54617: PUSH
54618: LD_INT 6
54620: PUSH
54621: LD_INT 7
54623: PUSH
54624: LD_INT 8
54626: PUSH
54627: LD_INT 13
54629: PUSH
54630: LD_INT 12
54632: PUSH
54633: LD_INT 15
54635: PUSH
54636: LD_INT 11
54638: PUSH
54639: LD_INT 14
54641: PUSH
54642: LD_INT 10
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: IN
54656: IFFALSE 54666
// btype = b_lab ;
54658: LD_ADDR_VAR 0 1
54662: PUSH
54663: LD_INT 6
54665: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54666: LD_VAR 0 6
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 2
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: LIST
54684: IN
54685: NOT
54686: IFTRUE 54754
54688: PUSH
54689: LD_VAR 0 1
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: LD_INT 3
54705: PUSH
54706: LD_INT 6
54708: PUSH
54709: LD_INT 36
54711: PUSH
54712: LD_INT 4
54714: PUSH
54715: LD_INT 5
54717: PUSH
54718: LD_INT 31
54720: PUSH
54721: LD_INT 32
54723: PUSH
54724: LD_INT 33
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: IN
54740: NOT
54741: IFFALSE 54753
54743: PUSH
54744: LD_VAR 0 6
54748: PUSH
54749: LD_INT 1
54751: EQUAL
54752: AND
54753: OR
54754: IFTRUE 54786
54756: PUSH
54757: LD_VAR 0 1
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: IN
54772: NOT
54773: IFFALSE 54785
54775: PUSH
54776: LD_VAR 0 6
54780: PUSH
54781: LD_INT 2
54783: EQUAL
54784: AND
54785: OR
54786: IFFALSE 54796
// mode = 0 ;
54788: LD_ADDR_VAR 0 6
54792: PUSH
54793: LD_INT 0
54795: ST_TO_ADDR
// case mode of 0 :
54796: LD_VAR 0 6
54800: PUSH
54801: LD_INT 0
54803: DOUBLE
54804: EQUAL
54805: IFTRUE 54809
54807: GO 66262
54809: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54810: LD_ADDR_VAR 0 11
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 3
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: LD_INT 3
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55003: LD_ADDR_VAR 0 12
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: NEG
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 3
55171: NEG
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55199: LD_ADDR_VAR 0 13
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 2
55322: NEG
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: LD_INT 3
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: NEG
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 3
55370: NEG
55371: PUSH
55372: LD_INT 3
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55398: LD_ADDR_VAR 0 14
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 3
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 3
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55594: LD_ADDR_VAR 0 15
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 3
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55787: LD_ADDR_VAR 0 16
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: LD_INT 2
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 2
55922: NEG
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 3
55944: PUSH
55945: LD_INT 3
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: LD_INT 3
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55980: LD_ADDR_VAR 0 17
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: LD_INT 2
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 2
56156: NEG
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56210: LD_ADDR_VAR 0 18
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 2
56409: NEG
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56440: LD_ADDR_VAR 0 19
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 2
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: LD_INT 2
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: LD_INT 2
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56670: LD_ADDR_VAR 0 20
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: LD_INT 2
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: LD_INT 2
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: LD_INT 2
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56900: LD_ADDR_VAR 0 21
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: LD_INT 2
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 2
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57130: LD_ADDR_VAR 0 22
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57360: LD_ADDR_VAR 0 23
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 2
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 2
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: LD_INT 3
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: LD_INT 3
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57640: LD_ADDR_VAR 0 24
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: NEG
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 3
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57916: LD_ADDR_VAR 0 25
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 2
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: NEG
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 3
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 3
58137: PUSH
58138: LD_INT 2
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: LD_INT 3
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: LD_INT 3
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58190: LD_ADDR_VAR 0 26
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: NEG
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: NEG
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: LD_INT 3
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58466: LD_ADDR_VAR 0 27
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: LD_INT 2
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 3
58699: NEG
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 3
58711: NEG
58712: PUSH
58713: LD_INT 2
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58746: LD_ADDR_VAR 0 28
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 3
58981: NEG
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: NEG
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59028: LD_ADDR_VAR 0 29
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: LD_INT 2
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: LD_INT 3
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: NEG
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59307: LD_ADDR_VAR 0 30
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 2
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 3
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: LD_INT 3
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 2
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59585: LD_ADDR_VAR 0 31
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 2
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 2
59709: PUSH
59710: LD_INT 2
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: LD_INT 2
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 2
59750: NEG
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: NEG
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: LD_INT 3
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 3
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: NEG
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59863: LD_ADDR_VAR 0 32
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: NEG
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: LD_INT 3
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 3
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: PUSH
60086: LD_INT 3
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: NEG
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60141: LD_ADDR_VAR 0 33
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 2
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: LD_INT 2
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: LD_INT 2
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 3
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: LD_INT 3
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 3
60385: NEG
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60420: LD_ADDR_VAR 0 34
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: LD_INT 1
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 2
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 2
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 2
60576: NEG
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: LD_INT 3
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 3
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 3
60665: NEG
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60700: LD_ADDR_VAR 0 35
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 1
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60812: LD_ADDR_VAR 0 36
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: LD_INT 2
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: LD_INT 2
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60924: LD_ADDR_VAR 0 37
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61036: LD_ADDR_VAR 0 38
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: NEG
61106: PUSH
61107: LD_INT 1
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: NEG
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61148: LD_ADDR_VAR 0 39
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 2
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61260: LD_ADDR_VAR 0 40
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61372: LD_ADDR_VAR 0 41
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 0
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: LD_INT 1
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 2
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 2
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: LD_INT 2
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 2
61527: NEG
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 2
61550: NEG
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: LD_INT 3
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 2
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 3
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 3
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 3
61605: PUSH
61606: LD_INT 2
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 3
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 2
61625: PUSH
61626: LD_INT 3
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 3
61646: NEG
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 3
61657: NEG
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 3
61669: NEG
61670: PUSH
61671: LD_INT 2
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: LD_INT 3
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61722: LD_ADDR_VAR 0 42
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: LD_INT 2
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: LD_INT 2
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 2
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: LD_INT 2
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 2
61900: NEG
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 2
61912: NEG
61913: PUSH
61914: LD_INT 3
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: LD_INT 3
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 3
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: LD_INT 2
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 3
61958: PUSH
61959: LD_INT 2
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 3
61968: PUSH
61969: LD_INT 3
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: PUSH
61979: LD_INT 3
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: LD_INT 3
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: LD_INT 3
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 2
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 3
62019: NEG
62020: PUSH
62021: LD_INT 2
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 3
62031: NEG
62032: PUSH
62033: LD_INT 3
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62072: LD_ADDR_VAR 0 43
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 2
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 2
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 2
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: LD_INT 2
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 2
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 2
62238: NEG
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: NEG
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: LD_INT 3
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: LD_INT 3
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 3
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 3
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: LD_INT 3
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: LD_INT 3
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 2
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: NEG
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 3
62368: NEG
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 3
62379: NEG
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62420: LD_ADDR_VAR 0 44
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: NEG
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: LD_INT 2
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 2
62586: NEG
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: NEG
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: NEG
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 3
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 3
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 3
62663: PUSH
62664: LD_INT 3
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: LD_INT 3
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 3
62694: NEG
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 3
62705: NEG
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 3
62717: NEG
62718: PUSH
62719: LD_INT 2
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: LD_INT 3
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62770: LD_ADDR_VAR 0 45
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: LD_INT 1
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: NEG
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: LD_INT 2
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 2
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 2
62895: PUSH
62896: LD_INT 2
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: LD_INT 2
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: LD_INT 2
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 2
62936: NEG
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 2
62948: NEG
62949: PUSH
62950: LD_INT 2
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 2
62960: NEG
62961: PUSH
62962: LD_INT 3
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: LD_INT 3
62976: NEG
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: LD_INT 3
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: LD_INT 2
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 3
63006: PUSH
63007: LD_INT 2
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 3
63016: PUSH
63017: LD_INT 3
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 2
63026: PUSH
63027: LD_INT 3
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: LD_INT 3
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: LD_INT 3
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 3
63067: NEG
63068: PUSH
63069: LD_INT 2
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 3
63079: NEG
63080: PUSH
63081: LD_INT 3
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63120: LD_ADDR_VAR 0 46
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: LD_INT 1
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: LD_INT 1
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: LD_INT 0
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: LD_INT 2
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 2
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: LD_INT 1
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 2
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 2
63245: PUSH
63246: LD_INT 1
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: LD_INT 2
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: LD_INT 2
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: NEG
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 2
63286: NEG
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 2
63297: NEG
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: LD_INT 3
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 3
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: LD_INT 2
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 2
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 3
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 3
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: LD_INT 3
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: LD_INT 3
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 2
63405: NEG
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 3
63416: NEG
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 3
63427: NEG
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63468: LD_ADDR_VAR 0 47
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: NEG
63550: PUSH
63551: LD_INT 2
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 2
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: NEG
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: NEG
63596: PUSH
63597: LD_INT 2
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63619: LD_ADDR_VAR 0 48
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 2
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63766: LD_ADDR_VAR 0 49
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 2
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: LD_INT 2
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63910: LD_ADDR_VAR 0 50
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 1
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 2
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 2
64001: PUSH
64002: LD_INT 2
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 2
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64054: LD_ADDR_VAR 0 51
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: LD_INT 1
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 0
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: LD_INT 1
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 2
64166: NEG
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 2
64177: NEG
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64201: LD_ADDR_VAR 0 52
64205: PUSH
64206: LD_INT 0
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 1
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: LD_INT 2
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 2
64316: NEG
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 2
64328: NEG
64329: PUSH
64330: LD_INT 2
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64352: LD_ADDR_VAR 0 53
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 1
64390: PUSH
64391: LD_INT 1
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: LD_INT 1
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 1
64410: NEG
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: LD_INT 1
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 1
64433: NEG
64434: PUSH
64435: LD_INT 2
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: LD_INT 2
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: LD_INT 1
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 2
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 2
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 2
64487: PUSH
64488: LD_INT 2
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: LD_INT 2
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 2
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: NEG
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 2
64528: NEG
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 2
64539: NEG
64540: PUSH
64541: LD_INT 1
64543: NEG
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 2
64551: NEG
64552: PUSH
64553: LD_INT 2
64555: NEG
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64582: LD_ADDR_VAR 0 54
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: LD_INT 1
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: LD_INT 1
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 1
64640: NEG
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 1
64663: NEG
64664: PUSH
64665: LD_INT 2
64667: NEG
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: LD_INT 2
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 1
64686: PUSH
64687: LD_INT 1
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 2
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 2
64707: PUSH
64708: LD_INT 1
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 2
64717: PUSH
64718: LD_INT 2
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 1
64727: PUSH
64728: LD_INT 2
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: LD_INT 2
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 1
64747: NEG
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 2
64758: NEG
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PUSH
64771: LD_INT 1
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 2
64781: NEG
64782: PUSH
64783: LD_INT 2
64785: NEG
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64812: LD_ADDR_VAR 0 55
64816: PUSH
64817: LD_INT 0
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 1
64870: NEG
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: LD_INT 2
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 0
64905: PUSH
64906: LD_INT 2
64908: NEG
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 2
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 2
64937: PUSH
64938: LD_INT 1
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: LD_INT 2
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: LD_INT 2
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: LD_INT 2
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 2
64988: NEG
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 2
64999: NEG
65000: PUSH
65001: LD_INT 1
65003: NEG
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 2
65011: NEG
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65042: LD_ADDR_VAR 0 56
65046: PUSH
65047: LD_INT 0
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: LD_INT 1
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 1
65100: NEG
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 1
65111: NEG
65112: PUSH
65113: LD_INT 1
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: LD_INT 2
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: LD_INT 2
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: LD_INT 1
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 2
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 2
65167: PUSH
65168: LD_INT 1
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: LD_INT 2
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 1
65207: NEG
65208: PUSH
65209: LD_INT 1
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 2
65218: NEG
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: LD_INT 1
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 2
65241: NEG
65242: PUSH
65243: LD_INT 2
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65272: LD_ADDR_VAR 0 57
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: LD_INT 0
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: LD_INT 1
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 1
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: LD_INT 1
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: LD_INT 1
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 1
65341: NEG
65342: PUSH
65343: LD_INT 1
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: LD_INT 2
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 0
65365: PUSH
65366: LD_INT 2
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: LD_INT 1
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 2
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 2
65397: PUSH
65398: LD_INT 1
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 2
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 1
65417: PUSH
65418: LD_INT 2
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: LD_INT 2
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 2
65448: NEG
65449: PUSH
65450: LD_INT 0
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 2
65459: NEG
65460: PUSH
65461: LD_INT 1
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: LD_INT 2
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65502: LD_ADDR_VAR 0 58
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 1
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: LD_INT 1
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 1
65571: NEG
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 2
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 0
65595: PUSH
65596: LD_INT 2
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 1
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 2
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 2
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: LD_INT 2
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: LD_INT 2
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: LD_INT 1
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 2
65678: NEG
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 2
65689: NEG
65690: PUSH
65691: LD_INT 1
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 2
65701: NEG
65702: PUSH
65703: LD_INT 2
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65732: LD_ADDR_VAR 0 59
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: LD_INT 0
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 0
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 0
65780: PUSH
65781: LD_INT 1
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: PUSH
65803: LD_INT 1
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65820: LD_ADDR_VAR 0 60
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 1
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 1
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: LD_INT 1
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 1
65878: NEG
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: PUSH
65891: LD_INT 1
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65908: LD_ADDR_VAR 0 61
65912: PUSH
65913: LD_INT 0
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: LD_INT 1
65928: NEG
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: LD_INT 0
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 1
65977: NEG
65978: PUSH
65979: LD_INT 1
65981: NEG
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65996: LD_ADDR_VAR 0 62
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 1
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 0
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 1
66065: NEG
66066: PUSH
66067: LD_INT 1
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66084: LD_ADDR_VAR 0 63
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 0
66101: PUSH
66102: LD_INT 1
66104: NEG
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 1
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 1
66122: PUSH
66123: LD_INT 1
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 1
66142: NEG
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66172: LD_ADDR_VAR 0 64
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: LD_INT 1
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 1
66210: PUSH
66211: LD_INT 1
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_INT 1
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 1
66230: NEG
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: NEG
66242: PUSH
66243: LD_INT 1
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: ST_TO_ADDR
// end ; 1 :
66260: GO 72157
66262: LD_INT 1
66264: DOUBLE
66265: EQUAL
66266: IFTRUE 66270
66268: GO 68893
66270: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66271: LD_ADDR_VAR 0 11
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: LD_INT 3
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: LD_INT 3
66293: NEG
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: PUSH
66302: LD_INT 2
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: LIST
66314: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66315: LD_ADDR_VAR 0 12
66319: PUSH
66320: LD_INT 2
66322: PUSH
66323: LD_INT 1
66325: NEG
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 3
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 3
66343: PUSH
66344: LD_INT 1
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: LIST
66355: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66356: LD_ADDR_VAR 0 13
66360: PUSH
66361: LD_INT 3
66363: PUSH
66364: LD_INT 2
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 3
66373: PUSH
66374: LD_INT 3
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 2
66383: PUSH
66384: LD_INT 3
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: LIST
66395: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66396: LD_ADDR_VAR 0 14
66400: PUSH
66401: LD_INT 1
66403: PUSH
66404: LD_INT 3
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: LD_INT 3
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 1
66423: NEG
66424: PUSH
66425: LD_INT 2
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66437: LD_ADDR_VAR 0 15
66441: PUSH
66442: LD_INT 2
66444: NEG
66445: PUSH
66446: LD_INT 1
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 3
66455: NEG
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 3
66466: NEG
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: LIST
66480: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66481: LD_ADDR_VAR 0 16
66485: PUSH
66486: LD_INT 2
66488: NEG
66489: PUSH
66490: LD_INT 3
66492: NEG
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 3
66500: NEG
66501: PUSH
66502: LD_INT 2
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 3
66512: NEG
66513: PUSH
66514: LD_INT 3
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: LIST
66526: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66527: LD_ADDR_VAR 0 17
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: LD_INT 3
66538: NEG
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_INT 3
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 1
66557: PUSH
66558: LD_INT 2
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: LIST
66570: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66571: LD_ADDR_VAR 0 18
66575: PUSH
66576: LD_INT 2
66578: PUSH
66579: LD_INT 1
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 3
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 3
66599: PUSH
66600: LD_INT 1
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: LIST
66611: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66612: LD_ADDR_VAR 0 19
66616: PUSH
66617: LD_INT 3
66619: PUSH
66620: LD_INT 2
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 3
66629: PUSH
66630: LD_INT 3
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 2
66639: PUSH
66640: LD_INT 3
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: LIST
66651: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66652: LD_ADDR_VAR 0 20
66656: PUSH
66657: LD_INT 1
66659: PUSH
66660: LD_INT 3
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: LD_INT 3
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 1
66679: NEG
66680: PUSH
66681: LD_INT 2
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: LIST
66692: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66693: LD_ADDR_VAR 0 21
66697: PUSH
66698: LD_INT 2
66700: NEG
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 3
66711: NEG
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 3
66722: NEG
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: LIST
66736: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66737: LD_ADDR_VAR 0 22
66741: PUSH
66742: LD_INT 2
66744: NEG
66745: PUSH
66746: LD_INT 3
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 3
66756: NEG
66757: PUSH
66758: LD_INT 2
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 3
66768: NEG
66769: PUSH
66770: LD_INT 3
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: LIST
66782: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66783: LD_ADDR_VAR 0 23
66787: PUSH
66788: LD_INT 0
66790: PUSH
66791: LD_INT 3
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 1
66801: NEG
66802: PUSH
66803: LD_INT 4
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 1
66813: PUSH
66814: LD_INT 3
66816: NEG
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: LIST
66826: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66827: LD_ADDR_VAR 0 24
66831: PUSH
66832: LD_INT 3
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 3
66844: PUSH
66845: LD_INT 1
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 4
66855: PUSH
66856: LD_INT 1
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66868: LD_ADDR_VAR 0 25
66872: PUSH
66873: LD_INT 3
66875: PUSH
66876: LD_INT 3
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 4
66885: PUSH
66886: LD_INT 3
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 3
66895: PUSH
66896: LD_INT 4
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66908: LD_ADDR_VAR 0 26
66912: PUSH
66913: LD_INT 0
66915: PUSH
66916: LD_INT 3
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: LD_INT 4
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: LD_INT 3
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66949: LD_ADDR_VAR 0 27
66953: PUSH
66954: LD_INT 3
66956: NEG
66957: PUSH
66958: LD_INT 0
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 3
66967: NEG
66968: PUSH
66969: LD_INT 1
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 4
66978: NEG
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: LIST
66992: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66993: LD_ADDR_VAR 0 28
66997: PUSH
66998: LD_INT 3
67000: NEG
67001: PUSH
67002: LD_INT 3
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 3
67012: NEG
67013: PUSH
67014: LD_INT 4
67016: NEG
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 4
67024: NEG
67025: PUSH
67026: LD_INT 3
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: LIST
67038: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67039: LD_ADDR_VAR 0 29
67043: PUSH
67044: LD_INT 1
67046: NEG
67047: PUSH
67048: LD_INT 3
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 0
67058: PUSH
67059: LD_INT 3
67061: NEG
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 1
67069: PUSH
67070: LD_INT 2
67072: NEG
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: LD_INT 4
67084: NEG
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 0
67092: PUSH
67093: LD_INT 4
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 1
67103: PUSH
67104: LD_INT 3
67106: NEG
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 1
67114: NEG
67115: PUSH
67116: LD_INT 5
67118: NEG
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: LD_INT 5
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: LD_INT 4
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: NEG
67149: PUSH
67150: LD_INT 6
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: LD_INT 6
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 1
67171: PUSH
67172: LD_INT 5
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67194: LD_ADDR_VAR 0 30
67198: PUSH
67199: LD_INT 2
67201: PUSH
67202: LD_INT 1
67204: NEG
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 3
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 3
67222: PUSH
67223: LD_INT 1
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 3
67232: PUSH
67233: LD_INT 1
67235: NEG
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 4
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 4
67253: PUSH
67254: LD_INT 1
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 4
67263: PUSH
67264: LD_INT 1
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 5
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 5
67284: PUSH
67285: LD_INT 1
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 5
67294: PUSH
67295: LD_INT 1
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 6
67305: PUSH
67306: LD_INT 0
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 6
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67337: LD_ADDR_VAR 0 31
67341: PUSH
67342: LD_INT 3
67344: PUSH
67345: LD_INT 2
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 3
67354: PUSH
67355: LD_INT 3
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 2
67364: PUSH
67365: LD_INT 3
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 4
67374: PUSH
67375: LD_INT 3
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 4
67384: PUSH
67385: LD_INT 4
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 3
67394: PUSH
67395: LD_INT 4
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 5
67404: PUSH
67405: LD_INT 4
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 5
67414: PUSH
67415: LD_INT 5
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 4
67424: PUSH
67425: LD_INT 5
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 6
67434: PUSH
67435: LD_INT 5
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 6
67444: PUSH
67445: LD_INT 6
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 5
67454: PUSH
67455: LD_INT 6
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67476: LD_ADDR_VAR 0 32
67480: PUSH
67481: LD_INT 1
67483: PUSH
67484: LD_INT 3
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: LD_INT 3
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: LD_INT 2
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: LD_INT 4
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: LD_INT 4
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 1
67534: NEG
67535: PUSH
67536: LD_INT 3
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 1
67545: PUSH
67546: LD_INT 5
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 0
67555: PUSH
67556: LD_INT 5
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 1
67565: NEG
67566: PUSH
67567: LD_INT 4
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 1
67576: PUSH
67577: LD_INT 6
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 0
67586: PUSH
67587: LD_INT 6
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 1
67596: NEG
67597: PUSH
67598: LD_INT 5
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67619: LD_ADDR_VAR 0 33
67623: PUSH
67624: LD_INT 2
67626: NEG
67627: PUSH
67628: LD_INT 1
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 3
67637: NEG
67638: PUSH
67639: LD_INT 0
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 3
67648: NEG
67649: PUSH
67650: LD_INT 1
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 3
67660: NEG
67661: PUSH
67662: LD_INT 1
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 4
67671: NEG
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 4
67682: NEG
67683: PUSH
67684: LD_INT 1
67686: NEG
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 4
67694: NEG
67695: PUSH
67696: LD_INT 1
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 5
67705: NEG
67706: PUSH
67707: LD_INT 0
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 5
67716: NEG
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 5
67728: NEG
67729: PUSH
67730: LD_INT 1
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 6
67739: NEG
67740: PUSH
67741: LD_INT 0
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 6
67750: NEG
67751: PUSH
67752: LD_INT 1
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67774: LD_ADDR_VAR 0 34
67778: PUSH
67779: LD_INT 2
67781: NEG
67782: PUSH
67783: LD_INT 3
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 3
67793: NEG
67794: PUSH
67795: LD_INT 2
67797: NEG
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 3
67805: NEG
67806: PUSH
67807: LD_INT 3
67809: NEG
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 3
67817: NEG
67818: PUSH
67819: LD_INT 4
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 4
67829: NEG
67830: PUSH
67831: LD_INT 3
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 4
67841: NEG
67842: PUSH
67843: LD_INT 4
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 4
67853: NEG
67854: PUSH
67855: LD_INT 5
67857: NEG
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 5
67865: NEG
67866: PUSH
67867: LD_INT 4
67869: NEG
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 5
67877: NEG
67878: PUSH
67879: LD_INT 5
67881: NEG
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 5
67889: NEG
67890: PUSH
67891: LD_INT 6
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 6
67901: NEG
67902: PUSH
67903: LD_INT 5
67905: NEG
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 6
67913: NEG
67914: PUSH
67915: LD_INT 6
67917: NEG
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67937: LD_ADDR_VAR 0 41
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: LD_INT 2
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 1
67955: NEG
67956: PUSH
67957: LD_INT 3
67959: NEG
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 1
67967: PUSH
67968: LD_INT 2
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: LIST
67980: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67981: LD_ADDR_VAR 0 42
67985: PUSH
67986: LD_INT 2
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 2
67998: PUSH
67999: LD_INT 1
68001: NEG
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 3
68009: PUSH
68010: LD_INT 1
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: LIST
68021: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68022: LD_ADDR_VAR 0 43
68026: PUSH
68027: LD_INT 2
68029: PUSH
68030: LD_INT 2
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 3
68039: PUSH
68040: LD_INT 2
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 2
68049: PUSH
68050: LD_INT 3
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: LIST
68061: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68062: LD_ADDR_VAR 0 44
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: LD_INT 2
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 1
68079: PUSH
68080: LD_INT 3
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 1
68089: NEG
68090: PUSH
68091: LD_INT 2
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: LIST
68102: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68103: LD_ADDR_VAR 0 45
68107: PUSH
68108: LD_INT 2
68110: NEG
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 2
68121: NEG
68122: PUSH
68123: LD_INT 1
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 3
68132: NEG
68133: PUSH
68134: LD_INT 1
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: LIST
68146: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68147: LD_ADDR_VAR 0 46
68151: PUSH
68152: LD_INT 2
68154: NEG
68155: PUSH
68156: LD_INT 2
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 2
68166: NEG
68167: PUSH
68168: LD_INT 3
68170: NEG
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 3
68178: NEG
68179: PUSH
68180: LD_INT 2
68182: NEG
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: LIST
68192: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68193: LD_ADDR_VAR 0 47
68197: PUSH
68198: LD_INT 2
68200: NEG
68201: PUSH
68202: LD_INT 3
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 1
68212: NEG
68213: PUSH
68214: LD_INT 3
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68226: LD_ADDR_VAR 0 48
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: LD_INT 2
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 2
68244: PUSH
68245: LD_INT 1
68247: NEG
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68257: LD_ADDR_VAR 0 49
68261: PUSH
68262: LD_INT 3
68264: PUSH
68265: LD_INT 1
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 3
68274: PUSH
68275: LD_INT 2
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68286: LD_ADDR_VAR 0 50
68290: PUSH
68291: LD_INT 2
68293: PUSH
68294: LD_INT 3
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 1
68303: PUSH
68304: LD_INT 3
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68315: LD_ADDR_VAR 0 51
68319: PUSH
68320: LD_INT 1
68322: NEG
68323: PUSH
68324: LD_INT 2
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 2
68333: NEG
68334: PUSH
68335: LD_INT 1
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68346: LD_ADDR_VAR 0 52
68350: PUSH
68351: LD_INT 3
68353: NEG
68354: PUSH
68355: LD_INT 1
68357: NEG
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 3
68365: NEG
68366: PUSH
68367: LD_INT 2
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68379: LD_ADDR_VAR 0 53
68383: PUSH
68384: LD_INT 1
68386: NEG
68387: PUSH
68388: LD_INT 3
68390: NEG
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 0
68398: PUSH
68399: LD_INT 3
68401: NEG
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 1
68409: PUSH
68410: LD_INT 2
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: LIST
68422: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68423: LD_ADDR_VAR 0 54
68427: PUSH
68428: LD_INT 2
68430: PUSH
68431: LD_INT 1
68433: NEG
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 3
68441: PUSH
68442: LD_INT 0
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 3
68451: PUSH
68452: LD_INT 1
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: LIST
68463: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68464: LD_ADDR_VAR 0 55
68468: PUSH
68469: LD_INT 3
68471: PUSH
68472: LD_INT 2
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 3
68481: PUSH
68482: LD_INT 3
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 2
68491: PUSH
68492: LD_INT 3
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: LIST
68503: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68504: LD_ADDR_VAR 0 56
68508: PUSH
68509: LD_INT 1
68511: PUSH
68512: LD_INT 3
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 0
68521: PUSH
68522: LD_INT 3
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 1
68531: NEG
68532: PUSH
68533: LD_INT 2
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: LIST
68544: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68545: LD_ADDR_VAR 0 57
68549: PUSH
68550: LD_INT 2
68552: NEG
68553: PUSH
68554: LD_INT 1
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 3
68563: NEG
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 3
68574: NEG
68575: PUSH
68576: LD_INT 1
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: LIST
68588: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68589: LD_ADDR_VAR 0 58
68593: PUSH
68594: LD_INT 2
68596: NEG
68597: PUSH
68598: LD_INT 3
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 3
68608: NEG
68609: PUSH
68610: LD_INT 2
68612: NEG
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 3
68620: NEG
68621: PUSH
68622: LD_INT 3
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: LIST
68634: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68635: LD_ADDR_VAR 0 59
68639: PUSH
68640: LD_INT 1
68642: NEG
68643: PUSH
68644: LD_INT 2
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 0
68654: PUSH
68655: LD_INT 2
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 1
68665: PUSH
68666: LD_INT 1
68668: NEG
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: LIST
68678: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68679: LD_ADDR_VAR 0 60
68683: PUSH
68684: LD_INT 1
68686: PUSH
68687: LD_INT 1
68689: NEG
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 2
68697: PUSH
68698: LD_INT 0
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 2
68707: PUSH
68708: LD_INT 1
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: LIST
68719: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68720: LD_ADDR_VAR 0 61
68724: PUSH
68725: LD_INT 2
68727: PUSH
68728: LD_INT 1
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 2
68737: PUSH
68738: LD_INT 2
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 1
68747: PUSH
68748: LD_INT 2
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: LIST
68759: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68760: LD_ADDR_VAR 0 62
68764: PUSH
68765: LD_INT 1
68767: PUSH
68768: LD_INT 2
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 0
68777: PUSH
68778: LD_INT 2
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 1
68787: NEG
68788: PUSH
68789: LD_INT 1
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: LIST
68800: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68801: LD_ADDR_VAR 0 63
68805: PUSH
68806: LD_INT 1
68808: NEG
68809: PUSH
68810: LD_INT 1
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 2
68819: NEG
68820: PUSH
68821: LD_INT 0
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 2
68830: NEG
68831: PUSH
68832: LD_INT 1
68834: NEG
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: LIST
68844: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68845: LD_ADDR_VAR 0 64
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: PUSH
68854: LD_INT 2
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 2
68864: NEG
68865: PUSH
68866: LD_INT 1
68868: NEG
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 2
68876: NEG
68877: PUSH
68878: LD_INT 2
68880: NEG
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: LIST
68890: ST_TO_ADDR
// end ; 2 :
68891: GO 72157
68893: LD_INT 2
68895: DOUBLE
68896: EQUAL
68897: IFTRUE 68901
68899: GO 72156
68901: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68902: LD_ADDR_VAR 0 29
68906: PUSH
68907: LD_INT 4
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 4
68919: PUSH
68920: LD_INT 1
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 5
68930: PUSH
68931: LD_INT 0
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 5
68940: PUSH
68941: LD_INT 1
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 4
68950: PUSH
68951: LD_INT 1
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 3
68960: PUSH
68961: LD_INT 0
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 3
68970: PUSH
68971: LD_INT 1
68973: NEG
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 3
68981: PUSH
68982: LD_INT 2
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 5
68992: PUSH
68993: LD_INT 2
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 3
69002: PUSH
69003: LD_INT 3
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 3
69012: PUSH
69013: LD_INT 2
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 4
69022: PUSH
69023: LD_INT 3
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 4
69032: PUSH
69033: LD_INT 4
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 3
69042: PUSH
69043: LD_INT 4
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 2
69052: PUSH
69053: LD_INT 3
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 2
69062: PUSH
69063: LD_INT 2
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 4
69072: PUSH
69073: LD_INT 2
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 2
69082: PUSH
69083: LD_INT 4
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 0
69092: PUSH
69093: LD_INT 4
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 0
69102: PUSH
69103: LD_INT 3
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: LD_INT 4
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 1
69122: PUSH
69123: LD_INT 5
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 0
69132: PUSH
69133: LD_INT 5
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: LD_INT 4
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 1
69153: NEG
69154: PUSH
69155: LD_INT 3
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 2
69164: PUSH
69165: LD_INT 5
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 2
69174: NEG
69175: PUSH
69176: LD_INT 3
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 3
69185: NEG
69186: PUSH
69187: LD_INT 0
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 3
69196: NEG
69197: PUSH
69198: LD_INT 1
69200: NEG
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 2
69208: NEG
69209: PUSH
69210: LD_INT 0
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 2
69219: NEG
69220: PUSH
69221: LD_INT 1
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 3
69230: NEG
69231: PUSH
69232: LD_INT 1
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 4
69241: NEG
69242: PUSH
69243: LD_INT 0
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 4
69252: NEG
69253: PUSH
69254: LD_INT 1
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 4
69264: NEG
69265: PUSH
69266: LD_INT 2
69268: NEG
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 2
69276: NEG
69277: PUSH
69278: LD_INT 2
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 4
69287: NEG
69288: PUSH
69289: LD_INT 4
69291: NEG
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 4
69299: NEG
69300: PUSH
69301: LD_INT 5
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 3
69311: NEG
69312: PUSH
69313: LD_INT 4
69315: NEG
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 3
69323: NEG
69324: PUSH
69325: LD_INT 3
69327: NEG
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 4
69335: NEG
69336: PUSH
69337: LD_INT 3
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 5
69347: NEG
69348: PUSH
69349: LD_INT 4
69351: NEG
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 5
69359: NEG
69360: PUSH
69361: LD_INT 5
69363: NEG
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 3
69371: NEG
69372: PUSH
69373: LD_INT 5
69375: NEG
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 5
69383: NEG
69384: PUSH
69385: LD_INT 3
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69440: LD_ADDR_VAR 0 30
69444: PUSH
69445: LD_INT 4
69447: PUSH
69448: LD_INT 4
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 4
69457: PUSH
69458: LD_INT 3
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 5
69467: PUSH
69468: LD_INT 4
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 5
69477: PUSH
69478: LD_INT 5
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 4
69487: PUSH
69488: LD_INT 5
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 3
69497: PUSH
69498: LD_INT 4
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 3
69507: PUSH
69508: LD_INT 3
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 5
69517: PUSH
69518: LD_INT 3
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 3
69527: PUSH
69528: LD_INT 5
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 0
69537: PUSH
69538: LD_INT 3
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 0
69547: PUSH
69548: LD_INT 2
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 1
69557: PUSH
69558: LD_INT 3
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: LD_INT 4
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 0
69577: PUSH
69578: LD_INT 4
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 1
69587: NEG
69588: PUSH
69589: LD_INT 3
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 1
69598: NEG
69599: PUSH
69600: LD_INT 2
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: LD_INT 4
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 2
69619: NEG
69620: PUSH
69621: LD_INT 2
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 4
69630: NEG
69631: PUSH
69632: LD_INT 0
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 4
69641: NEG
69642: PUSH
69643: LD_INT 1
69645: NEG
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 3
69653: NEG
69654: PUSH
69655: LD_INT 0
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 3
69664: NEG
69665: PUSH
69666: LD_INT 1
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 4
69675: NEG
69676: PUSH
69677: LD_INT 1
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 5
69686: NEG
69687: PUSH
69688: LD_INT 0
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 5
69697: NEG
69698: PUSH
69699: LD_INT 1
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 5
69709: NEG
69710: PUSH
69711: LD_INT 2
69713: NEG
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 3
69721: NEG
69722: PUSH
69723: LD_INT 2
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 3
69732: NEG
69733: PUSH
69734: LD_INT 3
69736: NEG
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 3
69744: NEG
69745: PUSH
69746: LD_INT 4
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 2
69756: NEG
69757: PUSH
69758: LD_INT 3
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 2
69768: NEG
69769: PUSH
69770: LD_INT 2
69772: NEG
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 3
69780: NEG
69781: PUSH
69782: LD_INT 2
69784: NEG
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 4
69792: NEG
69793: PUSH
69794: LD_INT 3
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 4
69804: NEG
69805: PUSH
69806: LD_INT 4
69808: NEG
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 2
69816: NEG
69817: PUSH
69818: LD_INT 4
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 4
69828: NEG
69829: PUSH
69830: LD_INT 2
69832: NEG
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 0
69840: PUSH
69841: LD_INT 4
69843: NEG
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 0
69851: PUSH
69852: LD_INT 5
69854: NEG
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 1
69862: PUSH
69863: LD_INT 4
69865: NEG
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 1
69873: PUSH
69874: LD_INT 3
69876: NEG
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 0
69884: PUSH
69885: LD_INT 3
69887: NEG
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 1
69895: NEG
69896: PUSH
69897: LD_INT 4
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 1
69907: NEG
69908: PUSH
69909: LD_INT 5
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 2
69919: PUSH
69920: LD_INT 3
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 2
69930: NEG
69931: PUSH
69932: LD_INT 5
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69987: LD_ADDR_VAR 0 31
69991: PUSH
69992: LD_INT 0
69994: PUSH
69995: LD_INT 4
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 0
70004: PUSH
70005: LD_INT 3
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 1
70014: PUSH
70015: LD_INT 4
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 1
70024: PUSH
70025: LD_INT 5
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 0
70034: PUSH
70035: LD_INT 5
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 1
70044: NEG
70045: PUSH
70046: LD_INT 4
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 1
70055: NEG
70056: PUSH
70057: LD_INT 3
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 2
70066: PUSH
70067: LD_INT 5
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 2
70076: NEG
70077: PUSH
70078: LD_INT 3
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 3
70087: NEG
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 3
70098: NEG
70099: PUSH
70100: LD_INT 1
70102: NEG
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 2
70110: NEG
70111: PUSH
70112: LD_INT 0
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 2
70121: NEG
70122: PUSH
70123: LD_INT 1
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 3
70132: NEG
70133: PUSH
70134: LD_INT 1
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 4
70143: NEG
70144: PUSH
70145: LD_INT 0
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 4
70154: NEG
70155: PUSH
70156: LD_INT 1
70158: NEG
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 4
70166: NEG
70167: PUSH
70168: LD_INT 2
70170: NEG
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 2
70178: NEG
70179: PUSH
70180: LD_INT 2
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 4
70189: NEG
70190: PUSH
70191: LD_INT 4
70193: NEG
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 4
70201: NEG
70202: PUSH
70203: LD_INT 5
70205: NEG
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 3
70213: NEG
70214: PUSH
70215: LD_INT 4
70217: NEG
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 3
70225: NEG
70226: PUSH
70227: LD_INT 3
70229: NEG
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 4
70237: NEG
70238: PUSH
70239: LD_INT 3
70241: NEG
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 5
70249: NEG
70250: PUSH
70251: LD_INT 4
70253: NEG
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 5
70261: NEG
70262: PUSH
70263: LD_INT 5
70265: NEG
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 3
70273: NEG
70274: PUSH
70275: LD_INT 5
70277: NEG
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 5
70285: NEG
70286: PUSH
70287: LD_INT 3
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 0
70297: PUSH
70298: LD_INT 3
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: LD_INT 4
70311: NEG
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 1
70319: PUSH
70320: LD_INT 3
70322: NEG
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 1
70330: PUSH
70331: LD_INT 2
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: LD_INT 2
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 1
70352: NEG
70353: PUSH
70354: LD_INT 3
70356: NEG
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 1
70364: NEG
70365: PUSH
70366: LD_INT 4
70368: NEG
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 2
70376: PUSH
70377: LD_INT 2
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 2
70387: NEG
70388: PUSH
70389: LD_INT 4
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 4
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 4
70409: PUSH
70410: LD_INT 1
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 5
70420: PUSH
70421: LD_INT 0
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 5
70430: PUSH
70431: LD_INT 1
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 4
70440: PUSH
70441: LD_INT 1
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 3
70450: PUSH
70451: LD_INT 0
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 3
70460: PUSH
70461: LD_INT 1
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 3
70471: PUSH
70472: LD_INT 2
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 5
70482: PUSH
70483: LD_INT 2
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70537: LD_ADDR_VAR 0 32
70541: PUSH
70542: LD_INT 4
70544: NEG
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 4
70555: NEG
70556: PUSH
70557: LD_INT 1
70559: NEG
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 3
70567: NEG
70568: PUSH
70569: LD_INT 0
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 3
70578: NEG
70579: PUSH
70580: LD_INT 1
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 4
70589: NEG
70590: PUSH
70591: LD_INT 1
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 5
70600: NEG
70601: PUSH
70602: LD_INT 0
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 5
70611: NEG
70612: PUSH
70613: LD_INT 1
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 5
70623: NEG
70624: PUSH
70625: LD_INT 2
70627: NEG
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 3
70635: NEG
70636: PUSH
70637: LD_INT 2
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 3
70646: NEG
70647: PUSH
70648: LD_INT 3
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 3
70658: NEG
70659: PUSH
70660: LD_INT 4
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 2
70670: NEG
70671: PUSH
70672: LD_INT 3
70674: NEG
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 2
70682: NEG
70683: PUSH
70684: LD_INT 2
70686: NEG
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 3
70694: NEG
70695: PUSH
70696: LD_INT 2
70698: NEG
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 4
70706: NEG
70707: PUSH
70708: LD_INT 3
70710: NEG
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 4
70718: NEG
70719: PUSH
70720: LD_INT 4
70722: NEG
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 2
70730: NEG
70731: PUSH
70732: LD_INT 4
70734: NEG
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 4
70742: NEG
70743: PUSH
70744: LD_INT 2
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 0
70754: PUSH
70755: LD_INT 4
70757: NEG
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 0
70765: PUSH
70766: LD_INT 5
70768: NEG
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 1
70776: PUSH
70777: LD_INT 4
70779: NEG
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 1
70787: PUSH
70788: LD_INT 3
70790: NEG
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 0
70798: PUSH
70799: LD_INT 3
70801: NEG
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 1
70809: NEG
70810: PUSH
70811: LD_INT 4
70813: NEG
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 1
70821: NEG
70822: PUSH
70823: LD_INT 5
70825: NEG
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 2
70833: PUSH
70834: LD_INT 3
70836: NEG
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 2
70844: NEG
70845: PUSH
70846: LD_INT 5
70848: NEG
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 3
70856: PUSH
70857: LD_INT 0
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 3
70866: PUSH
70867: LD_INT 1
70869: NEG
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 4
70877: PUSH
70878: LD_INT 0
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 4
70887: PUSH
70888: LD_INT 1
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 3
70897: PUSH
70898: LD_INT 1
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: LD_INT 2
70907: PUSH
70908: LD_INT 0
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 2
70917: PUSH
70918: LD_INT 1
70920: NEG
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 2
70928: PUSH
70929: LD_INT 2
70931: NEG
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 4
70939: PUSH
70940: LD_INT 2
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 4
70949: PUSH
70950: LD_INT 4
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 4
70959: PUSH
70960: LD_INT 3
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 5
70969: PUSH
70970: LD_INT 4
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 5
70979: PUSH
70980: LD_INT 5
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 4
70989: PUSH
70990: LD_INT 5
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 3
70999: PUSH
71000: LD_INT 4
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 3
71009: PUSH
71010: LD_INT 3
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 5
71019: PUSH
71020: LD_INT 3
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PUSH
71027: LD_INT 3
71029: PUSH
71030: LD_INT 5
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71084: LD_ADDR_VAR 0 33
71088: PUSH
71089: LD_INT 4
71091: NEG
71092: PUSH
71093: LD_INT 4
71095: NEG
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 4
71103: NEG
71104: PUSH
71105: LD_INT 5
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 3
71115: NEG
71116: PUSH
71117: LD_INT 4
71119: NEG
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 3
71127: NEG
71128: PUSH
71129: LD_INT 3
71131: NEG
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 4
71139: NEG
71140: PUSH
71141: LD_INT 3
71143: NEG
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 5
71151: NEG
71152: PUSH
71153: LD_INT 4
71155: NEG
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 5
71163: NEG
71164: PUSH
71165: LD_INT 5
71167: NEG
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 3
71175: NEG
71176: PUSH
71177: LD_INT 5
71179: NEG
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 5
71187: NEG
71188: PUSH
71189: LD_INT 3
71191: NEG
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 0
71199: PUSH
71200: LD_INT 3
71202: NEG
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 0
71210: PUSH
71211: LD_INT 4
71213: NEG
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 1
71221: PUSH
71222: LD_INT 3
71224: NEG
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 1
71232: PUSH
71233: LD_INT 2
71235: NEG
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 0
71243: PUSH
71244: LD_INT 2
71246: NEG
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 1
71254: NEG
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 1
71266: NEG
71267: PUSH
71268: LD_INT 4
71270: NEG
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 2
71278: PUSH
71279: LD_INT 2
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 2
71289: NEG
71290: PUSH
71291: LD_INT 4
71293: NEG
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 4
71301: PUSH
71302: LD_INT 0
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 4
71311: PUSH
71312: LD_INT 1
71314: NEG
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 5
71322: PUSH
71323: LD_INT 0
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 5
71332: PUSH
71333: LD_INT 1
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 4
71342: PUSH
71343: LD_INT 1
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 3
71352: PUSH
71353: LD_INT 0
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 3
71362: PUSH
71363: LD_INT 1
71365: NEG
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 3
71373: PUSH
71374: LD_INT 2
71376: NEG
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 5
71384: PUSH
71385: LD_INT 2
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 3
71394: PUSH
71395: LD_INT 3
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 3
71404: PUSH
71405: LD_INT 2
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 4
71414: PUSH
71415: LD_INT 3
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 4
71424: PUSH
71425: LD_INT 4
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 3
71434: PUSH
71435: LD_INT 4
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 2
71444: PUSH
71445: LD_INT 3
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 2
71454: PUSH
71455: LD_INT 2
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PUSH
71462: LD_INT 4
71464: PUSH
71465: LD_INT 2
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 2
71474: PUSH
71475: LD_INT 4
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 0
71484: PUSH
71485: LD_INT 4
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 0
71494: PUSH
71495: LD_INT 3
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 1
71504: PUSH
71505: LD_INT 4
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 1
71514: PUSH
71515: LD_INT 5
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 0
71524: PUSH
71525: LD_INT 5
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 1
71534: NEG
71535: PUSH
71536: LD_INT 4
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 1
71545: NEG
71546: PUSH
71547: LD_INT 3
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 2
71556: PUSH
71557: LD_INT 5
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 2
71566: NEG
71567: PUSH
71568: LD_INT 3
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71622: LD_ADDR_VAR 0 34
71626: PUSH
71627: LD_INT 0
71629: PUSH
71630: LD_INT 4
71632: NEG
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 0
71640: PUSH
71641: LD_INT 5
71643: NEG
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 1
71651: PUSH
71652: LD_INT 4
71654: NEG
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 1
71662: PUSH
71663: LD_INT 3
71665: NEG
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 0
71673: PUSH
71674: LD_INT 3
71676: NEG
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: LD_INT 1
71684: NEG
71685: PUSH
71686: LD_INT 4
71688: NEG
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 1
71696: NEG
71697: PUSH
71698: LD_INT 5
71700: NEG
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 2
71708: PUSH
71709: LD_INT 3
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 2
71719: NEG
71720: PUSH
71721: LD_INT 5
71723: NEG
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 3
71731: PUSH
71732: LD_INT 0
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 3
71741: PUSH
71742: LD_INT 1
71744: NEG
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 4
71752: PUSH
71753: LD_INT 0
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 4
71762: PUSH
71763: LD_INT 1
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 3
71772: PUSH
71773: LD_INT 1
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 2
71782: PUSH
71783: LD_INT 0
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 2
71792: PUSH
71793: LD_INT 1
71795: NEG
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 2
71803: PUSH
71804: LD_INT 2
71806: NEG
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 4
71814: PUSH
71815: LD_INT 2
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 4
71824: PUSH
71825: LD_INT 4
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 4
71834: PUSH
71835: LD_INT 3
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 5
71844: PUSH
71845: LD_INT 4
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 5
71854: PUSH
71855: LD_INT 5
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 4
71864: PUSH
71865: LD_INT 5
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 3
71874: PUSH
71875: LD_INT 4
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: PUSH
71882: LD_INT 3
71884: PUSH
71885: LD_INT 3
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 5
71894: PUSH
71895: LD_INT 3
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 3
71904: PUSH
71905: LD_INT 5
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: PUSH
71912: LD_INT 0
71914: PUSH
71915: LD_INT 3
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 0
71924: PUSH
71925: LD_INT 2
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 1
71934: PUSH
71935: LD_INT 3
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: LD_INT 1
71944: PUSH
71945: LD_INT 4
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: LD_INT 0
71954: PUSH
71955: LD_INT 4
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 1
71964: NEG
71965: PUSH
71966: LD_INT 3
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 1
71975: NEG
71976: PUSH
71977: LD_INT 2
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: LD_INT 2
71986: PUSH
71987: LD_INT 4
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: LD_INT 2
71996: NEG
71997: PUSH
71998: LD_INT 2
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 4
72007: NEG
72008: PUSH
72009: LD_INT 0
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 4
72018: NEG
72019: PUSH
72020: LD_INT 1
72022: NEG
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 3
72030: NEG
72031: PUSH
72032: LD_INT 0
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 3
72041: NEG
72042: PUSH
72043: LD_INT 1
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 4
72052: NEG
72053: PUSH
72054: LD_INT 1
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 5
72063: NEG
72064: PUSH
72065: LD_INT 0
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 5
72074: NEG
72075: PUSH
72076: LD_INT 1
72078: NEG
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 5
72086: NEG
72087: PUSH
72088: LD_INT 2
72090: NEG
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 3
72098: NEG
72099: PUSH
72100: LD_INT 2
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: ST_TO_ADDR
// end ; end ;
72154: GO 72157
72156: POP
// case btype of b_depot , b_warehouse :
72157: LD_VAR 0 1
72161: PUSH
72162: LD_INT 0
72164: DOUBLE
72165: EQUAL
72166: IFTRUE 72176
72168: LD_INT 1
72170: DOUBLE
72171: EQUAL
72172: IFTRUE 72176
72174: GO 72377
72176: POP
// case nation of nation_american :
72177: LD_VAR 0 5
72181: PUSH
72182: LD_INT 1
72184: DOUBLE
72185: EQUAL
72186: IFTRUE 72190
72188: GO 72246
72190: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72191: LD_ADDR_VAR 0 9
72195: PUSH
72196: LD_VAR 0 11
72200: PUSH
72201: LD_VAR 0 12
72205: PUSH
72206: LD_VAR 0 13
72210: PUSH
72211: LD_VAR 0 14
72215: PUSH
72216: LD_VAR 0 15
72220: PUSH
72221: LD_VAR 0 16
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: PUSH
72234: LD_VAR 0 4
72238: PUSH
72239: LD_INT 1
72241: PLUS
72242: ARRAY
72243: ST_TO_ADDR
72244: GO 72375
72246: LD_INT 2
72248: DOUBLE
72249: EQUAL
72250: IFTRUE 72254
72252: GO 72310
72254: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72255: LD_ADDR_VAR 0 9
72259: PUSH
72260: LD_VAR 0 17
72264: PUSH
72265: LD_VAR 0 18
72269: PUSH
72270: LD_VAR 0 19
72274: PUSH
72275: LD_VAR 0 20
72279: PUSH
72280: LD_VAR 0 21
72284: PUSH
72285: LD_VAR 0 22
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: PUSH
72298: LD_VAR 0 4
72302: PUSH
72303: LD_INT 1
72305: PLUS
72306: ARRAY
72307: ST_TO_ADDR
72308: GO 72375
72310: LD_INT 3
72312: DOUBLE
72313: EQUAL
72314: IFTRUE 72318
72316: GO 72374
72318: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72319: LD_ADDR_VAR 0 9
72323: PUSH
72324: LD_VAR 0 23
72328: PUSH
72329: LD_VAR 0 24
72333: PUSH
72334: LD_VAR 0 25
72338: PUSH
72339: LD_VAR 0 26
72343: PUSH
72344: LD_VAR 0 27
72348: PUSH
72349: LD_VAR 0 28
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: PUSH
72362: LD_VAR 0 4
72366: PUSH
72367: LD_INT 1
72369: PLUS
72370: ARRAY
72371: ST_TO_ADDR
72372: GO 72375
72374: POP
72375: GO 72930
72377: LD_INT 2
72379: DOUBLE
72380: EQUAL
72381: IFTRUE 72391
72383: LD_INT 3
72385: DOUBLE
72386: EQUAL
72387: IFTRUE 72391
72389: GO 72447
72391: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72392: LD_ADDR_VAR 0 9
72396: PUSH
72397: LD_VAR 0 29
72401: PUSH
72402: LD_VAR 0 30
72406: PUSH
72407: LD_VAR 0 31
72411: PUSH
72412: LD_VAR 0 32
72416: PUSH
72417: LD_VAR 0 33
72421: PUSH
72422: LD_VAR 0 34
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: PUSH
72435: LD_VAR 0 4
72439: PUSH
72440: LD_INT 1
72442: PLUS
72443: ARRAY
72444: ST_TO_ADDR
72445: GO 72930
72447: LD_INT 16
72449: DOUBLE
72450: EQUAL
72451: IFTRUE 72509
72453: LD_INT 17
72455: DOUBLE
72456: EQUAL
72457: IFTRUE 72509
72459: LD_INT 18
72461: DOUBLE
72462: EQUAL
72463: IFTRUE 72509
72465: LD_INT 19
72467: DOUBLE
72468: EQUAL
72469: IFTRUE 72509
72471: LD_INT 22
72473: DOUBLE
72474: EQUAL
72475: IFTRUE 72509
72477: LD_INT 20
72479: DOUBLE
72480: EQUAL
72481: IFTRUE 72509
72483: LD_INT 21
72485: DOUBLE
72486: EQUAL
72487: IFTRUE 72509
72489: LD_INT 23
72491: DOUBLE
72492: EQUAL
72493: IFTRUE 72509
72495: LD_INT 24
72497: DOUBLE
72498: EQUAL
72499: IFTRUE 72509
72501: LD_INT 25
72503: DOUBLE
72504: EQUAL
72505: IFTRUE 72509
72507: GO 72565
72509: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72510: LD_ADDR_VAR 0 9
72514: PUSH
72515: LD_VAR 0 35
72519: PUSH
72520: LD_VAR 0 36
72524: PUSH
72525: LD_VAR 0 37
72529: PUSH
72530: LD_VAR 0 38
72534: PUSH
72535: LD_VAR 0 39
72539: PUSH
72540: LD_VAR 0 40
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: PUSH
72553: LD_VAR 0 4
72557: PUSH
72558: LD_INT 1
72560: PLUS
72561: ARRAY
72562: ST_TO_ADDR
72563: GO 72930
72565: LD_INT 6
72567: DOUBLE
72568: EQUAL
72569: IFTRUE 72621
72571: LD_INT 7
72573: DOUBLE
72574: EQUAL
72575: IFTRUE 72621
72577: LD_INT 8
72579: DOUBLE
72580: EQUAL
72581: IFTRUE 72621
72583: LD_INT 13
72585: DOUBLE
72586: EQUAL
72587: IFTRUE 72621
72589: LD_INT 12
72591: DOUBLE
72592: EQUAL
72593: IFTRUE 72621
72595: LD_INT 15
72597: DOUBLE
72598: EQUAL
72599: IFTRUE 72621
72601: LD_INT 11
72603: DOUBLE
72604: EQUAL
72605: IFTRUE 72621
72607: LD_INT 14
72609: DOUBLE
72610: EQUAL
72611: IFTRUE 72621
72613: LD_INT 10
72615: DOUBLE
72616: EQUAL
72617: IFTRUE 72621
72619: GO 72677
72621: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72622: LD_ADDR_VAR 0 9
72626: PUSH
72627: LD_VAR 0 41
72631: PUSH
72632: LD_VAR 0 42
72636: PUSH
72637: LD_VAR 0 43
72641: PUSH
72642: LD_VAR 0 44
72646: PUSH
72647: LD_VAR 0 45
72651: PUSH
72652: LD_VAR 0 46
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: PUSH
72665: LD_VAR 0 4
72669: PUSH
72670: LD_INT 1
72672: PLUS
72673: ARRAY
72674: ST_TO_ADDR
72675: GO 72930
72677: LD_INT 36
72679: DOUBLE
72680: EQUAL
72681: IFTRUE 72685
72683: GO 72741
72685: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72686: LD_ADDR_VAR 0 9
72690: PUSH
72691: LD_VAR 0 47
72695: PUSH
72696: LD_VAR 0 48
72700: PUSH
72701: LD_VAR 0 49
72705: PUSH
72706: LD_VAR 0 50
72710: PUSH
72711: LD_VAR 0 51
72715: PUSH
72716: LD_VAR 0 52
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: PUSH
72729: LD_VAR 0 4
72733: PUSH
72734: LD_INT 1
72736: PLUS
72737: ARRAY
72738: ST_TO_ADDR
72739: GO 72930
72741: LD_INT 4
72743: DOUBLE
72744: EQUAL
72745: IFTRUE 72767
72747: LD_INT 5
72749: DOUBLE
72750: EQUAL
72751: IFTRUE 72767
72753: LD_INT 34
72755: DOUBLE
72756: EQUAL
72757: IFTRUE 72767
72759: LD_INT 37
72761: DOUBLE
72762: EQUAL
72763: IFTRUE 72767
72765: GO 72823
72767: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72768: LD_ADDR_VAR 0 9
72772: PUSH
72773: LD_VAR 0 53
72777: PUSH
72778: LD_VAR 0 54
72782: PUSH
72783: LD_VAR 0 55
72787: PUSH
72788: LD_VAR 0 56
72792: PUSH
72793: LD_VAR 0 57
72797: PUSH
72798: LD_VAR 0 58
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: PUSH
72811: LD_VAR 0 4
72815: PUSH
72816: LD_INT 1
72818: PLUS
72819: ARRAY
72820: ST_TO_ADDR
72821: GO 72930
72823: LD_INT 31
72825: DOUBLE
72826: EQUAL
72827: IFTRUE 72873
72829: LD_INT 32
72831: DOUBLE
72832: EQUAL
72833: IFTRUE 72873
72835: LD_INT 33
72837: DOUBLE
72838: EQUAL
72839: IFTRUE 72873
72841: LD_INT 27
72843: DOUBLE
72844: EQUAL
72845: IFTRUE 72873
72847: LD_INT 26
72849: DOUBLE
72850: EQUAL
72851: IFTRUE 72873
72853: LD_INT 28
72855: DOUBLE
72856: EQUAL
72857: IFTRUE 72873
72859: LD_INT 29
72861: DOUBLE
72862: EQUAL
72863: IFTRUE 72873
72865: LD_INT 30
72867: DOUBLE
72868: EQUAL
72869: IFTRUE 72873
72871: GO 72929
72873: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72874: LD_ADDR_VAR 0 9
72878: PUSH
72879: LD_VAR 0 59
72883: PUSH
72884: LD_VAR 0 60
72888: PUSH
72889: LD_VAR 0 61
72893: PUSH
72894: LD_VAR 0 62
72898: PUSH
72899: LD_VAR 0 63
72903: PUSH
72904: LD_VAR 0 64
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: PUSH
72917: LD_VAR 0 4
72921: PUSH
72922: LD_INT 1
72924: PLUS
72925: ARRAY
72926: ST_TO_ADDR
72927: GO 72930
72929: POP
// temp_list2 = [ ] ;
72930: LD_ADDR_VAR 0 10
72934: PUSH
72935: EMPTY
72936: ST_TO_ADDR
// for i in temp_list do
72937: LD_ADDR_VAR 0 8
72941: PUSH
72942: LD_VAR 0 9
72946: PUSH
72947: FOR_IN
72948: IFFALSE 73000
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72950: LD_ADDR_VAR 0 10
72954: PUSH
72955: LD_VAR 0 10
72959: PUSH
72960: LD_VAR 0 8
72964: PUSH
72965: LD_INT 1
72967: ARRAY
72968: PUSH
72969: LD_VAR 0 2
72973: PLUS
72974: PUSH
72975: LD_VAR 0 8
72979: PUSH
72980: LD_INT 2
72982: ARRAY
72983: PUSH
72984: LD_VAR 0 3
72988: PLUS
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: EMPTY
72995: LIST
72996: ADD
72997: ST_TO_ADDR
72998: GO 72947
73000: POP
73001: POP
// result = temp_list2 ;
73002: LD_ADDR_VAR 0 7
73006: PUSH
73007: LD_VAR 0 10
73011: ST_TO_ADDR
// end ;
73012: LD_VAR 0 7
73016: RET
// export function EnemyInRange ( unit , dist ) ; begin
73017: LD_INT 0
73019: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73020: LD_ADDR_VAR 0 3
73024: PUSH
73025: LD_VAR 0 1
73029: PPUSH
73030: CALL_OW 255
73034: PPUSH
73035: LD_VAR 0 1
73039: PPUSH
73040: CALL_OW 250
73044: PPUSH
73045: LD_VAR 0 1
73049: PPUSH
73050: CALL_OW 251
73054: PPUSH
73055: LD_VAR 0 2
73059: PPUSH
73060: CALL 46274 0 4
73064: PUSH
73065: LD_INT 4
73067: ARRAY
73068: ST_TO_ADDR
// end ;
73069: LD_VAR 0 3
73073: RET
// export function PlayerSeeMe ( unit ) ; begin
73074: LD_INT 0
73076: PPUSH
// result := See ( your_side , unit ) ;
73077: LD_ADDR_VAR 0 2
73081: PUSH
73082: LD_OWVAR 2
73086: PPUSH
73087: LD_VAR 0 1
73091: PPUSH
73092: CALL_OW 292
73096: ST_TO_ADDR
// end ;
73097: LD_VAR 0 2
73101: RET
// export function ReverseDir ( unit ) ; begin
73102: LD_INT 0
73104: PPUSH
// if not unit then
73105: LD_VAR 0 1
73109: NOT
73110: IFFALSE 73114
// exit ;
73112: GO 73137
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73114: LD_ADDR_VAR 0 2
73118: PUSH
73119: LD_VAR 0 1
73123: PPUSH
73124: CALL_OW 254
73128: PUSH
73129: LD_INT 3
73131: PLUS
73132: PUSH
73133: LD_INT 6
73135: MOD
73136: ST_TO_ADDR
// end ;
73137: LD_VAR 0 2
73141: RET
// export function ReverseArray ( array ) ; var i ; begin
73142: LD_INT 0
73144: PPUSH
73145: PPUSH
// if not array then
73146: LD_VAR 0 1
73150: NOT
73151: IFFALSE 73155
// exit ;
73153: GO 73210
// result := [ ] ;
73155: LD_ADDR_VAR 0 2
73159: PUSH
73160: EMPTY
73161: ST_TO_ADDR
// for i := array downto 1 do
73162: LD_ADDR_VAR 0 3
73166: PUSH
73167: DOUBLE
73168: LD_VAR 0 1
73172: INC
73173: ST_TO_ADDR
73174: LD_INT 1
73176: PUSH
73177: FOR_DOWNTO
73178: IFFALSE 73208
// result := Join ( result , array [ i ] ) ;
73180: LD_ADDR_VAR 0 2
73184: PUSH
73185: LD_VAR 0 2
73189: PPUSH
73190: LD_VAR 0 1
73194: PUSH
73195: LD_VAR 0 3
73199: ARRAY
73200: PPUSH
73201: CALL 78062 0 2
73205: ST_TO_ADDR
73206: GO 73177
73208: POP
73209: POP
// end ;
73210: LD_VAR 0 2
73214: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73215: LD_INT 0
73217: PPUSH
73218: PPUSH
73219: PPUSH
73220: PPUSH
73221: PPUSH
73222: PPUSH
// if not unit or not hexes then
73223: LD_VAR 0 1
73227: NOT
73228: IFTRUE 73237
73230: PUSH
73231: LD_VAR 0 2
73235: NOT
73236: OR
73237: IFFALSE 73241
// exit ;
73239: GO 73364
// dist := 9999 ;
73241: LD_ADDR_VAR 0 5
73245: PUSH
73246: LD_INT 9999
73248: ST_TO_ADDR
// for i = 1 to hexes do
73249: LD_ADDR_VAR 0 4
73253: PUSH
73254: DOUBLE
73255: LD_INT 1
73257: DEC
73258: ST_TO_ADDR
73259: LD_VAR 0 2
73263: PUSH
73264: FOR_TO
73265: IFFALSE 73352
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73267: LD_ADDR_VAR 0 6
73271: PUSH
73272: LD_VAR 0 1
73276: PPUSH
73277: LD_VAR 0 2
73281: PUSH
73282: LD_VAR 0 4
73286: ARRAY
73287: PUSH
73288: LD_INT 1
73290: ARRAY
73291: PPUSH
73292: LD_VAR 0 2
73296: PUSH
73297: LD_VAR 0 4
73301: ARRAY
73302: PUSH
73303: LD_INT 2
73305: ARRAY
73306: PPUSH
73307: CALL_OW 297
73311: ST_TO_ADDR
// if tdist < dist then
73312: LD_VAR 0 6
73316: PUSH
73317: LD_VAR 0 5
73321: LESS
73322: IFFALSE 73350
// begin hex := hexes [ i ] ;
73324: LD_ADDR_VAR 0 8
73328: PUSH
73329: LD_VAR 0 2
73333: PUSH
73334: LD_VAR 0 4
73338: ARRAY
73339: ST_TO_ADDR
// dist := tdist ;
73340: LD_ADDR_VAR 0 5
73344: PUSH
73345: LD_VAR 0 6
73349: ST_TO_ADDR
// end ; end ;
73350: GO 73264
73352: POP
73353: POP
// result := hex ;
73354: LD_ADDR_VAR 0 3
73358: PUSH
73359: LD_VAR 0 8
73363: ST_TO_ADDR
// end ;
73364: LD_VAR 0 3
73368: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73369: LD_INT 0
73371: PPUSH
73372: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73373: LD_VAR 0 1
73377: NOT
73378: IFTRUE 73417
73380: PUSH
73381: LD_VAR 0 1
73385: PUSH
73386: LD_INT 21
73388: PUSH
73389: LD_INT 2
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 23
73398: PUSH
73399: LD_INT 2
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PPUSH
73410: CALL_OW 69
73414: IN
73415: NOT
73416: OR
73417: IFFALSE 73421
// exit ;
73419: GO 73468
// for i = 1 to 3 do
73421: LD_ADDR_VAR 0 3
73425: PUSH
73426: DOUBLE
73427: LD_INT 1
73429: DEC
73430: ST_TO_ADDR
73431: LD_INT 3
73433: PUSH
73434: FOR_TO
73435: IFFALSE 73466
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73437: LD_VAR 0 1
73441: PPUSH
73442: CALL_OW 250
73446: PPUSH
73447: LD_VAR 0 1
73451: PPUSH
73452: CALL_OW 251
73456: PPUSH
73457: LD_INT 1
73459: PPUSH
73460: CALL_OW 453
73464: GO 73434
73466: POP
73467: POP
// end ;
73468: LD_VAR 0 2
73472: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73473: LD_INT 0
73475: PPUSH
73476: PPUSH
73477: PPUSH
73478: PPUSH
73479: PPUSH
73480: PPUSH
// if not unit or not enemy_unit then
73481: LD_VAR 0 1
73485: NOT
73486: IFTRUE 73495
73488: PUSH
73489: LD_VAR 0 2
73493: NOT
73494: OR
73495: IFFALSE 73499
// exit ;
73497: GO 73980
// if GetLives ( i ) < 250 then
73499: LD_VAR 0 4
73503: PPUSH
73504: CALL_OW 256
73508: PUSH
73509: LD_INT 250
73511: LESS
73512: IFFALSE 73525
// begin ComAutodestruct ( i ) ;
73514: LD_VAR 0 4
73518: PPUSH
73519: CALL 73369 0 1
// exit ;
73523: GO 73980
// end ; x := GetX ( enemy_unit ) ;
73525: LD_ADDR_VAR 0 7
73529: PUSH
73530: LD_VAR 0 2
73534: PPUSH
73535: CALL_OW 250
73539: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73540: LD_ADDR_VAR 0 8
73544: PUSH
73545: LD_VAR 0 2
73549: PPUSH
73550: CALL_OW 251
73554: ST_TO_ADDR
// if not x or not y then
73555: LD_VAR 0 7
73559: NOT
73560: IFTRUE 73569
73562: PUSH
73563: LD_VAR 0 8
73567: NOT
73568: OR
73569: IFFALSE 73573
// exit ;
73571: GO 73980
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73573: LD_ADDR_VAR 0 6
73577: PUSH
73578: LD_VAR 0 7
73582: PPUSH
73583: LD_INT 0
73585: PPUSH
73586: LD_INT 4
73588: PPUSH
73589: CALL_OW 272
73593: PUSH
73594: LD_VAR 0 8
73598: PPUSH
73599: LD_INT 0
73601: PPUSH
73602: LD_INT 4
73604: PPUSH
73605: CALL_OW 273
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_VAR 0 7
73618: PPUSH
73619: LD_INT 1
73621: PPUSH
73622: LD_INT 4
73624: PPUSH
73625: CALL_OW 272
73629: PUSH
73630: LD_VAR 0 8
73634: PPUSH
73635: LD_INT 1
73637: PPUSH
73638: LD_INT 4
73640: PPUSH
73641: CALL_OW 273
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_VAR 0 7
73654: PPUSH
73655: LD_INT 2
73657: PPUSH
73658: LD_INT 4
73660: PPUSH
73661: CALL_OW 272
73665: PUSH
73666: LD_VAR 0 8
73670: PPUSH
73671: LD_INT 2
73673: PPUSH
73674: LD_INT 4
73676: PPUSH
73677: CALL_OW 273
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: LD_VAR 0 7
73690: PPUSH
73691: LD_INT 3
73693: PPUSH
73694: LD_INT 4
73696: PPUSH
73697: CALL_OW 272
73701: PUSH
73702: LD_VAR 0 8
73706: PPUSH
73707: LD_INT 3
73709: PPUSH
73710: LD_INT 4
73712: PPUSH
73713: CALL_OW 273
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_VAR 0 7
73726: PPUSH
73727: LD_INT 4
73729: PPUSH
73730: LD_INT 4
73732: PPUSH
73733: CALL_OW 272
73737: PUSH
73738: LD_VAR 0 8
73742: PPUSH
73743: LD_INT 4
73745: PPUSH
73746: LD_INT 4
73748: PPUSH
73749: CALL_OW 273
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PUSH
73758: LD_VAR 0 7
73762: PPUSH
73763: LD_INT 5
73765: PPUSH
73766: LD_INT 4
73768: PPUSH
73769: CALL_OW 272
73773: PUSH
73774: LD_VAR 0 8
73778: PPUSH
73779: LD_INT 5
73781: PPUSH
73782: LD_INT 4
73784: PPUSH
73785: CALL_OW 273
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: PUSH
73794: EMPTY
73795: LIST
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: ST_TO_ADDR
// for i = tmp downto 1 do
73802: LD_ADDR_VAR 0 4
73806: PUSH
73807: DOUBLE
73808: LD_VAR 0 6
73812: INC
73813: ST_TO_ADDR
73814: LD_INT 1
73816: PUSH
73817: FOR_DOWNTO
73818: IFFALSE 73921
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73820: LD_VAR 0 6
73824: PUSH
73825: LD_VAR 0 4
73829: ARRAY
73830: PUSH
73831: LD_INT 1
73833: ARRAY
73834: PPUSH
73835: LD_VAR 0 6
73839: PUSH
73840: LD_VAR 0 4
73844: ARRAY
73845: PUSH
73846: LD_INT 2
73848: ARRAY
73849: PPUSH
73850: CALL_OW 488
73854: NOT
73855: IFTRUE 73897
73857: PUSH
73858: LD_VAR 0 6
73862: PUSH
73863: LD_VAR 0 4
73867: ARRAY
73868: PUSH
73869: LD_INT 1
73871: ARRAY
73872: PPUSH
73873: LD_VAR 0 6
73877: PUSH
73878: LD_VAR 0 4
73882: ARRAY
73883: PUSH
73884: LD_INT 2
73886: ARRAY
73887: PPUSH
73888: CALL_OW 428
73892: PUSH
73893: LD_INT 0
73895: NONEQUAL
73896: OR
73897: IFFALSE 73919
// tmp := Delete ( tmp , i ) ;
73899: LD_ADDR_VAR 0 6
73903: PUSH
73904: LD_VAR 0 6
73908: PPUSH
73909: LD_VAR 0 4
73913: PPUSH
73914: CALL_OW 3
73918: ST_TO_ADDR
73919: GO 73817
73921: POP
73922: POP
// j := GetClosestHex ( unit , tmp ) ;
73923: LD_ADDR_VAR 0 5
73927: PUSH
73928: LD_VAR 0 1
73932: PPUSH
73933: LD_VAR 0 6
73937: PPUSH
73938: CALL 73215 0 2
73942: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73943: LD_VAR 0 1
73947: PPUSH
73948: LD_VAR 0 5
73952: PUSH
73953: LD_INT 1
73955: ARRAY
73956: PPUSH
73957: LD_VAR 0 5
73961: PUSH
73962: LD_INT 2
73964: ARRAY
73965: PPUSH
73966: CALL_OW 111
// result := j ;
73970: LD_ADDR_VAR 0 3
73974: PUSH
73975: LD_VAR 0 5
73979: ST_TO_ADDR
// end ;
73980: LD_VAR 0 3
73984: RET
// export function PrepareApemanSoldier ( ) ; begin
73985: LD_INT 0
73987: PPUSH
// uc_nation := 0 ;
73988: LD_ADDR_OWVAR 21
73992: PUSH
73993: LD_INT 0
73995: ST_TO_ADDR
// hc_sex := sex_male ;
73996: LD_ADDR_OWVAR 27
74000: PUSH
74001: LD_INT 1
74003: ST_TO_ADDR
// hc_name :=  ;
74004: LD_ADDR_OWVAR 26
74008: PUSH
74009: LD_STRING 
74011: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74012: LD_ADDR_OWVAR 28
74016: PUSH
74017: LD_INT 15
74019: ST_TO_ADDR
// hc_gallery :=  ;
74020: LD_ADDR_OWVAR 33
74024: PUSH
74025: LD_STRING 
74027: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74028: LD_ADDR_OWVAR 31
74032: PUSH
74033: LD_INT 0
74035: PPUSH
74036: LD_INT 3
74038: PPUSH
74039: CALL_OW 12
74043: PUSH
74044: LD_INT 0
74046: PPUSH
74047: LD_INT 3
74049: PPUSH
74050: CALL_OW 12
74054: PUSH
74055: LD_INT 0
74057: PUSH
74058: LD_INT 0
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: LIST
74065: LIST
74066: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
74067: LD_ADDR_OWVAR 29
74071: PUSH
74072: LD_INT 10
74074: PUSH
74075: LD_INT 12
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: ST_TO_ADDR
// end ;
74082: LD_VAR 0 1
74086: RET
// export function PrepareApemanEngineer ( ) ; begin
74087: LD_INT 0
74089: PPUSH
// uc_nation := 0 ;
74090: LD_ADDR_OWVAR 21
74094: PUSH
74095: LD_INT 0
74097: ST_TO_ADDR
// hc_sex := sex_male ;
74098: LD_ADDR_OWVAR 27
74102: PUSH
74103: LD_INT 1
74105: ST_TO_ADDR
// hc_name :=  ;
74106: LD_ADDR_OWVAR 26
74110: PUSH
74111: LD_STRING 
74113: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74114: LD_ADDR_OWVAR 28
74118: PUSH
74119: LD_INT 16
74121: ST_TO_ADDR
// hc_gallery :=  ;
74122: LD_ADDR_OWVAR 33
74126: PUSH
74127: LD_STRING 
74129: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74130: LD_ADDR_OWVAR 31
74134: PUSH
74135: LD_INT 0
74137: PPUSH
74138: LD_INT 3
74140: PPUSH
74141: CALL_OW 12
74145: PUSH
74146: LD_INT 0
74148: PPUSH
74149: LD_INT 3
74151: PPUSH
74152: CALL_OW 12
74156: PUSH
74157: LD_INT 0
74159: PUSH
74160: LD_INT 0
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: LIST
74167: LIST
74168: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
74169: LD_ADDR_OWVAR 29
74173: PUSH
74174: LD_INT 10
74176: PUSH
74177: LD_INT 12
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: ST_TO_ADDR
// end ;
74184: LD_VAR 0 1
74188: RET
// export function PrepareApeman ( agressivity ) ; begin
74189: LD_INT 0
74191: PPUSH
// uc_side := 0 ;
74192: LD_ADDR_OWVAR 20
74196: PUSH
74197: LD_INT 0
74199: ST_TO_ADDR
// uc_nation := 0 ;
74200: LD_ADDR_OWVAR 21
74204: PUSH
74205: LD_INT 0
74207: ST_TO_ADDR
// hc_sex := sex_male ;
74208: LD_ADDR_OWVAR 27
74212: PUSH
74213: LD_INT 1
74215: ST_TO_ADDR
// hc_class := class_apeman ;
74216: LD_ADDR_OWVAR 28
74220: PUSH
74221: LD_INT 12
74223: ST_TO_ADDR
// hc_gallery :=  ;
74224: LD_ADDR_OWVAR 33
74228: PUSH
74229: LD_STRING 
74231: ST_TO_ADDR
// hc_name :=  ;
74232: LD_ADDR_OWVAR 26
74236: PUSH
74237: LD_STRING 
74239: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
74240: LD_ADDR_OWVAR 29
74244: PUSH
74245: LD_INT 10
74247: PUSH
74248: LD_INT 12
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: ST_TO_ADDR
// if agressivity = 0 then
74255: LD_VAR 0 1
74259: PUSH
74260: LD_INT 0
74262: EQUAL
74263: IFFALSE 74275
// hc_agressivity := 0 else
74265: LD_ADDR_OWVAR 35
74269: PUSH
74270: LD_INT 0
74272: ST_TO_ADDR
74273: GO 74296
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74275: LD_ADDR_OWVAR 35
74279: PUSH
74280: LD_VAR 0 1
74284: NEG
74285: PPUSH
74286: LD_VAR 0 1
74290: PPUSH
74291: CALL_OW 12
74295: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74296: LD_ADDR_OWVAR 31
74300: PUSH
74301: LD_INT 0
74303: PPUSH
74304: LD_INT 3
74306: PPUSH
74307: CALL_OW 12
74311: PUSH
74312: LD_INT 0
74314: PPUSH
74315: LD_INT 3
74317: PPUSH
74318: CALL_OW 12
74322: PUSH
74323: LD_INT 0
74325: PUSH
74326: LD_INT 0
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: ST_TO_ADDR
// end ;
74335: LD_VAR 0 2
74339: RET
// export function PrepareTiger ( agressivity ) ; begin
74340: LD_INT 0
74342: PPUSH
// uc_side := 0 ;
74343: LD_ADDR_OWVAR 20
74347: PUSH
74348: LD_INT 0
74350: ST_TO_ADDR
// uc_nation := 0 ;
74351: LD_ADDR_OWVAR 21
74355: PUSH
74356: LD_INT 0
74358: ST_TO_ADDR
// InitHc ;
74359: CALL_OW 19
// hc_class := class_tiger ;
74363: LD_ADDR_OWVAR 28
74367: PUSH
74368: LD_INT 14
74370: ST_TO_ADDR
// hc_gallery :=  ;
74371: LD_ADDR_OWVAR 33
74375: PUSH
74376: LD_STRING 
74378: ST_TO_ADDR
// hc_name :=  ;
74379: LD_ADDR_OWVAR 26
74383: PUSH
74384: LD_STRING 
74386: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74387: LD_ADDR_OWVAR 35
74391: PUSH
74392: LD_VAR 0 1
74396: NEG
74397: PPUSH
74398: LD_VAR 0 1
74402: PPUSH
74403: CALL_OW 12
74407: ST_TO_ADDR
// end ;
74408: LD_VAR 0 2
74412: RET
// export function PrepareEnchidna ( ) ; begin
74413: LD_INT 0
74415: PPUSH
// uc_side := 0 ;
74416: LD_ADDR_OWVAR 20
74420: PUSH
74421: LD_INT 0
74423: ST_TO_ADDR
// uc_nation := 0 ;
74424: LD_ADDR_OWVAR 21
74428: PUSH
74429: LD_INT 0
74431: ST_TO_ADDR
// InitHc ;
74432: CALL_OW 19
// hc_class := class_baggie ;
74436: LD_ADDR_OWVAR 28
74440: PUSH
74441: LD_INT 13
74443: ST_TO_ADDR
// hc_gallery :=  ;
74444: LD_ADDR_OWVAR 33
74448: PUSH
74449: LD_STRING 
74451: ST_TO_ADDR
// hc_name :=  ;
74452: LD_ADDR_OWVAR 26
74456: PUSH
74457: LD_STRING 
74459: ST_TO_ADDR
// end ;
74460: LD_VAR 0 1
74464: RET
// export function PrepareFrog ( ) ; begin
74465: LD_INT 0
74467: PPUSH
// uc_side := 0 ;
74468: LD_ADDR_OWVAR 20
74472: PUSH
74473: LD_INT 0
74475: ST_TO_ADDR
// uc_nation := 0 ;
74476: LD_ADDR_OWVAR 21
74480: PUSH
74481: LD_INT 0
74483: ST_TO_ADDR
// InitHc ;
74484: CALL_OW 19
// hc_class := class_frog ;
74488: LD_ADDR_OWVAR 28
74492: PUSH
74493: LD_INT 19
74495: ST_TO_ADDR
// hc_gallery :=  ;
74496: LD_ADDR_OWVAR 33
74500: PUSH
74501: LD_STRING 
74503: ST_TO_ADDR
// hc_name :=  ;
74504: LD_ADDR_OWVAR 26
74508: PUSH
74509: LD_STRING 
74511: ST_TO_ADDR
// end ;
74512: LD_VAR 0 1
74516: RET
// export function PrepareFish ( ) ; begin
74517: LD_INT 0
74519: PPUSH
// uc_side := 0 ;
74520: LD_ADDR_OWVAR 20
74524: PUSH
74525: LD_INT 0
74527: ST_TO_ADDR
// uc_nation := 0 ;
74528: LD_ADDR_OWVAR 21
74532: PUSH
74533: LD_INT 0
74535: ST_TO_ADDR
// InitHc ;
74536: CALL_OW 19
// hc_class := class_fish ;
74540: LD_ADDR_OWVAR 28
74544: PUSH
74545: LD_INT 20
74547: ST_TO_ADDR
// hc_gallery :=  ;
74548: LD_ADDR_OWVAR 33
74552: PUSH
74553: LD_STRING 
74555: ST_TO_ADDR
// hc_name :=  ;
74556: LD_ADDR_OWVAR 26
74560: PUSH
74561: LD_STRING 
74563: ST_TO_ADDR
// end ;
74564: LD_VAR 0 1
74568: RET
// export function PrepareBird ( ) ; begin
74569: LD_INT 0
74571: PPUSH
// uc_side := 0 ;
74572: LD_ADDR_OWVAR 20
74576: PUSH
74577: LD_INT 0
74579: ST_TO_ADDR
// uc_nation := 0 ;
74580: LD_ADDR_OWVAR 21
74584: PUSH
74585: LD_INT 0
74587: ST_TO_ADDR
// InitHc ;
74588: CALL_OW 19
// hc_class := class_phororhacos ;
74592: LD_ADDR_OWVAR 28
74596: PUSH
74597: LD_INT 18
74599: ST_TO_ADDR
// hc_gallery :=  ;
74600: LD_ADDR_OWVAR 33
74604: PUSH
74605: LD_STRING 
74607: ST_TO_ADDR
// hc_name :=  ;
74608: LD_ADDR_OWVAR 26
74612: PUSH
74613: LD_STRING 
74615: ST_TO_ADDR
// end ;
74616: LD_VAR 0 1
74620: RET
// export function PrepareHorse ( ) ; begin
74621: LD_INT 0
74623: PPUSH
// uc_side := 0 ;
74624: LD_ADDR_OWVAR 20
74628: PUSH
74629: LD_INT 0
74631: ST_TO_ADDR
// uc_nation := 0 ;
74632: LD_ADDR_OWVAR 21
74636: PUSH
74637: LD_INT 0
74639: ST_TO_ADDR
// InitHc ;
74640: CALL_OW 19
// hc_class := class_horse ;
74644: LD_ADDR_OWVAR 28
74648: PUSH
74649: LD_INT 21
74651: ST_TO_ADDR
// hc_gallery :=  ;
74652: LD_ADDR_OWVAR 33
74656: PUSH
74657: LD_STRING 
74659: ST_TO_ADDR
// hc_name :=  ;
74660: LD_ADDR_OWVAR 26
74664: PUSH
74665: LD_STRING 
74667: ST_TO_ADDR
// end ;
74668: LD_VAR 0 1
74672: RET
// export function PrepareMastodont ( ) ; begin
74673: LD_INT 0
74675: PPUSH
// uc_side := 0 ;
74676: LD_ADDR_OWVAR 20
74680: PUSH
74681: LD_INT 0
74683: ST_TO_ADDR
// uc_nation := 0 ;
74684: LD_ADDR_OWVAR 21
74688: PUSH
74689: LD_INT 0
74691: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74692: LD_ADDR_OWVAR 37
74696: PUSH
74697: LD_INT 31
74699: ST_TO_ADDR
// vc_control := control_rider ;
74700: LD_ADDR_OWVAR 38
74704: PUSH
74705: LD_INT 4
74707: ST_TO_ADDR
// end ;
74708: LD_VAR 0 1
74712: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74713: LD_INT 0
74715: PPUSH
74716: PPUSH
74717: PPUSH
// uc_side = 0 ;
74718: LD_ADDR_OWVAR 20
74722: PUSH
74723: LD_INT 0
74725: ST_TO_ADDR
// uc_nation = 0 ;
74726: LD_ADDR_OWVAR 21
74730: PUSH
74731: LD_INT 0
74733: ST_TO_ADDR
// InitHc_All ( ) ;
74734: CALL_OW 584
// InitVc ;
74738: CALL_OW 20
// if mastodonts then
74742: LD_VAR 0 6
74746: IFFALSE 74813
// for i = 1 to mastodonts do
74748: LD_ADDR_VAR 0 11
74752: PUSH
74753: DOUBLE
74754: LD_INT 1
74756: DEC
74757: ST_TO_ADDR
74758: LD_VAR 0 6
74762: PUSH
74763: FOR_TO
74764: IFFALSE 74811
// begin vc_chassis := 31 ;
74766: LD_ADDR_OWVAR 37
74770: PUSH
74771: LD_INT 31
74773: ST_TO_ADDR
// vc_control := control_rider ;
74774: LD_ADDR_OWVAR 38
74778: PUSH
74779: LD_INT 4
74781: ST_TO_ADDR
// animal := CreateVehicle ;
74782: LD_ADDR_VAR 0 12
74786: PUSH
74787: CALL_OW 45
74791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74792: LD_VAR 0 12
74796: PPUSH
74797: LD_VAR 0 8
74801: PPUSH
74802: LD_INT 0
74804: PPUSH
74805: CALL 76955 0 3
// end ;
74809: GO 74763
74811: POP
74812: POP
// if horses then
74813: LD_VAR 0 5
74817: IFFALSE 74884
// for i = 1 to horses do
74819: LD_ADDR_VAR 0 11
74823: PUSH
74824: DOUBLE
74825: LD_INT 1
74827: DEC
74828: ST_TO_ADDR
74829: LD_VAR 0 5
74833: PUSH
74834: FOR_TO
74835: IFFALSE 74882
// begin hc_class := 21 ;
74837: LD_ADDR_OWVAR 28
74841: PUSH
74842: LD_INT 21
74844: ST_TO_ADDR
// hc_gallery :=  ;
74845: LD_ADDR_OWVAR 33
74849: PUSH
74850: LD_STRING 
74852: ST_TO_ADDR
// animal := CreateHuman ;
74853: LD_ADDR_VAR 0 12
74857: PUSH
74858: CALL_OW 44
74862: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74863: LD_VAR 0 12
74867: PPUSH
74868: LD_VAR 0 8
74872: PPUSH
74873: LD_INT 0
74875: PPUSH
74876: CALL 76955 0 3
// end ;
74880: GO 74834
74882: POP
74883: POP
// if birds then
74884: LD_VAR 0 1
74888: IFFALSE 74955
// for i = 1 to birds do
74890: LD_ADDR_VAR 0 11
74894: PUSH
74895: DOUBLE
74896: LD_INT 1
74898: DEC
74899: ST_TO_ADDR
74900: LD_VAR 0 1
74904: PUSH
74905: FOR_TO
74906: IFFALSE 74953
// begin hc_class := 18 ;
74908: LD_ADDR_OWVAR 28
74912: PUSH
74913: LD_INT 18
74915: ST_TO_ADDR
// hc_gallery =  ;
74916: LD_ADDR_OWVAR 33
74920: PUSH
74921: LD_STRING 
74923: ST_TO_ADDR
// animal := CreateHuman ;
74924: LD_ADDR_VAR 0 12
74928: PUSH
74929: CALL_OW 44
74933: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74934: LD_VAR 0 12
74938: PPUSH
74939: LD_VAR 0 8
74943: PPUSH
74944: LD_INT 0
74946: PPUSH
74947: CALL 76955 0 3
// end ;
74951: GO 74905
74953: POP
74954: POP
// if tigers then
74955: LD_VAR 0 2
74959: IFFALSE 75043
// for i = 1 to tigers do
74961: LD_ADDR_VAR 0 11
74965: PUSH
74966: DOUBLE
74967: LD_INT 1
74969: DEC
74970: ST_TO_ADDR
74971: LD_VAR 0 2
74975: PUSH
74976: FOR_TO
74977: IFFALSE 75041
// begin hc_class = class_tiger ;
74979: LD_ADDR_OWVAR 28
74983: PUSH
74984: LD_INT 14
74986: ST_TO_ADDR
// hc_gallery =  ;
74987: LD_ADDR_OWVAR 33
74991: PUSH
74992: LD_STRING 
74994: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74995: LD_ADDR_OWVAR 35
74999: PUSH
75000: LD_INT 7
75002: NEG
75003: PPUSH
75004: LD_INT 7
75006: PPUSH
75007: CALL_OW 12
75011: ST_TO_ADDR
// animal := CreateHuman ;
75012: LD_ADDR_VAR 0 12
75016: PUSH
75017: CALL_OW 44
75021: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75022: LD_VAR 0 12
75026: PPUSH
75027: LD_VAR 0 8
75031: PPUSH
75032: LD_INT 0
75034: PPUSH
75035: CALL 76955 0 3
// end ;
75039: GO 74976
75041: POP
75042: POP
// if apemans then
75043: LD_VAR 0 3
75047: IFFALSE 75170
// for i = 1 to apemans do
75049: LD_ADDR_VAR 0 11
75053: PUSH
75054: DOUBLE
75055: LD_INT 1
75057: DEC
75058: ST_TO_ADDR
75059: LD_VAR 0 3
75063: PUSH
75064: FOR_TO
75065: IFFALSE 75168
// begin hc_class = class_apeman ;
75067: LD_ADDR_OWVAR 28
75071: PUSH
75072: LD_INT 12
75074: ST_TO_ADDR
// hc_gallery =  ;
75075: LD_ADDR_OWVAR 33
75079: PUSH
75080: LD_STRING 
75082: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75083: LD_ADDR_OWVAR 35
75087: PUSH
75088: LD_INT 2
75090: NEG
75091: PPUSH
75092: LD_INT 2
75094: PPUSH
75095: CALL_OW 12
75099: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75100: LD_ADDR_OWVAR 31
75104: PUSH
75105: LD_INT 1
75107: PPUSH
75108: LD_INT 3
75110: PPUSH
75111: CALL_OW 12
75115: PUSH
75116: LD_INT 1
75118: PPUSH
75119: LD_INT 3
75121: PPUSH
75122: CALL_OW 12
75126: PUSH
75127: LD_INT 0
75129: PUSH
75130: LD_INT 0
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: ST_TO_ADDR
// animal := CreateHuman ;
75139: LD_ADDR_VAR 0 12
75143: PUSH
75144: CALL_OW 44
75148: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75149: LD_VAR 0 12
75153: PPUSH
75154: LD_VAR 0 8
75158: PPUSH
75159: LD_INT 0
75161: PPUSH
75162: CALL 76955 0 3
// end ;
75166: GO 75064
75168: POP
75169: POP
// if enchidnas then
75170: LD_VAR 0 4
75174: IFFALSE 75241
// for i = 1 to enchidnas do
75176: LD_ADDR_VAR 0 11
75180: PUSH
75181: DOUBLE
75182: LD_INT 1
75184: DEC
75185: ST_TO_ADDR
75186: LD_VAR 0 4
75190: PUSH
75191: FOR_TO
75192: IFFALSE 75239
// begin hc_class = 13 ;
75194: LD_ADDR_OWVAR 28
75198: PUSH
75199: LD_INT 13
75201: ST_TO_ADDR
// hc_gallery =  ;
75202: LD_ADDR_OWVAR 33
75206: PUSH
75207: LD_STRING 
75209: ST_TO_ADDR
// animal := CreateHuman ;
75210: LD_ADDR_VAR 0 12
75214: PUSH
75215: CALL_OW 44
75219: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75220: LD_VAR 0 12
75224: PPUSH
75225: LD_VAR 0 8
75229: PPUSH
75230: LD_INT 0
75232: PPUSH
75233: CALL 76955 0 3
// end ;
75237: GO 75191
75239: POP
75240: POP
// if fishes then
75241: LD_VAR 0 7
75245: IFFALSE 75312
// for i = 1 to fishes do
75247: LD_ADDR_VAR 0 11
75251: PUSH
75252: DOUBLE
75253: LD_INT 1
75255: DEC
75256: ST_TO_ADDR
75257: LD_VAR 0 7
75261: PUSH
75262: FOR_TO
75263: IFFALSE 75310
// begin hc_class = 20 ;
75265: LD_ADDR_OWVAR 28
75269: PUSH
75270: LD_INT 20
75272: ST_TO_ADDR
// hc_gallery =  ;
75273: LD_ADDR_OWVAR 33
75277: PUSH
75278: LD_STRING 
75280: ST_TO_ADDR
// animal := CreateHuman ;
75281: LD_ADDR_VAR 0 12
75285: PUSH
75286: CALL_OW 44
75290: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75291: LD_VAR 0 12
75295: PPUSH
75296: LD_VAR 0 9
75300: PPUSH
75301: LD_INT 0
75303: PPUSH
75304: CALL 76955 0 3
// end ;
75308: GO 75262
75310: POP
75311: POP
// end ;
75312: LD_VAR 0 10
75316: RET
// export function WantHeal ( sci , unit ) ; begin
75317: LD_INT 0
75319: PPUSH
// if GetTaskList ( sci ) > 0 then
75320: LD_VAR 0 1
75324: PPUSH
75325: CALL_OW 437
75329: PUSH
75330: LD_INT 0
75332: GREATER
75333: IFFALSE 75405
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75335: LD_VAR 0 1
75339: PPUSH
75340: CALL_OW 437
75344: PUSH
75345: LD_INT 1
75347: ARRAY
75348: PUSH
75349: LD_INT 1
75351: ARRAY
75352: PUSH
75353: LD_STRING l
75355: EQUAL
75356: IFFALSE 75383
75358: PUSH
75359: LD_VAR 0 1
75363: PPUSH
75364: CALL_OW 437
75368: PUSH
75369: LD_INT 1
75371: ARRAY
75372: PUSH
75373: LD_INT 4
75375: ARRAY
75376: PUSH
75377: LD_VAR 0 2
75381: EQUAL
75382: AND
75383: IFFALSE 75395
// result := true else
75385: LD_ADDR_VAR 0 3
75389: PUSH
75390: LD_INT 1
75392: ST_TO_ADDR
75393: GO 75403
// result := false ;
75395: LD_ADDR_VAR 0 3
75399: PUSH
75400: LD_INT 0
75402: ST_TO_ADDR
// end else
75403: GO 75413
// result := false ;
75405: LD_ADDR_VAR 0 3
75409: PUSH
75410: LD_INT 0
75412: ST_TO_ADDR
// end ;
75413: LD_VAR 0 3
75417: RET
// export function HealTarget ( sci ) ; begin
75418: LD_INT 0
75420: PPUSH
// if not sci then
75421: LD_VAR 0 1
75425: NOT
75426: IFFALSE 75430
// exit ;
75428: GO 75495
// result := 0 ;
75430: LD_ADDR_VAR 0 2
75434: PUSH
75435: LD_INT 0
75437: ST_TO_ADDR
// if GetTaskList ( sci ) then
75438: LD_VAR 0 1
75442: PPUSH
75443: CALL_OW 437
75447: IFFALSE 75495
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75449: LD_VAR 0 1
75453: PPUSH
75454: CALL_OW 437
75458: PUSH
75459: LD_INT 1
75461: ARRAY
75462: PUSH
75463: LD_INT 1
75465: ARRAY
75466: PUSH
75467: LD_STRING l
75469: EQUAL
75470: IFFALSE 75495
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75472: LD_ADDR_VAR 0 2
75476: PUSH
75477: LD_VAR 0 1
75481: PPUSH
75482: CALL_OW 437
75486: PUSH
75487: LD_INT 1
75489: ARRAY
75490: PUSH
75491: LD_INT 4
75493: ARRAY
75494: ST_TO_ADDR
// end ;
75495: LD_VAR 0 2
75499: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75500: LD_INT 0
75502: PPUSH
75503: PPUSH
75504: PPUSH
75505: PPUSH
// if not base_units then
75506: LD_VAR 0 1
75510: NOT
75511: IFFALSE 75515
// exit ;
75513: GO 75602
// result := false ;
75515: LD_ADDR_VAR 0 2
75519: PUSH
75520: LD_INT 0
75522: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75523: LD_ADDR_VAR 0 5
75527: PUSH
75528: LD_VAR 0 1
75532: PPUSH
75533: LD_INT 21
75535: PUSH
75536: LD_INT 3
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PPUSH
75543: CALL_OW 72
75547: ST_TO_ADDR
// if not tmp then
75548: LD_VAR 0 5
75552: NOT
75553: IFFALSE 75557
// exit ;
75555: GO 75602
// for i in tmp do
75557: LD_ADDR_VAR 0 3
75561: PUSH
75562: LD_VAR 0 5
75566: PUSH
75567: FOR_IN
75568: IFFALSE 75600
// begin result := EnemyInRange ( i , 22 ) ;
75570: LD_ADDR_VAR 0 2
75574: PUSH
75575: LD_VAR 0 3
75579: PPUSH
75580: LD_INT 22
75582: PPUSH
75583: CALL 73017 0 2
75587: ST_TO_ADDR
// if result then
75588: LD_VAR 0 2
75592: IFFALSE 75598
// exit ;
75594: POP
75595: POP
75596: GO 75602
// end ;
75598: GO 75567
75600: POP
75601: POP
// end ;
75602: LD_VAR 0 2
75606: RET
// export function FilterByTag ( units , tag ) ; begin
75607: LD_INT 0
75609: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75610: LD_ADDR_VAR 0 3
75614: PUSH
75615: LD_VAR 0 1
75619: PPUSH
75620: LD_INT 120
75622: PUSH
75623: LD_VAR 0 2
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: PPUSH
75632: CALL_OW 72
75636: ST_TO_ADDR
// end ;
75637: LD_VAR 0 3
75641: RET
// export function IsDriver ( un ) ; begin
75642: LD_INT 0
75644: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75645: LD_ADDR_VAR 0 2
75649: PUSH
75650: LD_VAR 0 1
75654: PUSH
75655: LD_INT 55
75657: PUSH
75658: EMPTY
75659: LIST
75660: PPUSH
75661: CALL_OW 69
75665: IN
75666: ST_TO_ADDR
// end ;
75667: LD_VAR 0 2
75671: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75672: LD_INT 0
75674: PPUSH
75675: PPUSH
// list := [ ] ;
75676: LD_ADDR_VAR 0 5
75680: PUSH
75681: EMPTY
75682: ST_TO_ADDR
// case d of 0 :
75683: LD_VAR 0 3
75687: PUSH
75688: LD_INT 0
75690: DOUBLE
75691: EQUAL
75692: IFTRUE 75696
75694: GO 75829
75696: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75697: LD_ADDR_VAR 0 5
75701: PUSH
75702: LD_VAR 0 1
75706: PUSH
75707: LD_INT 4
75709: MINUS
75710: PUSH
75711: LD_VAR 0 2
75715: PUSH
75716: LD_INT 4
75718: MINUS
75719: PUSH
75720: LD_INT 2
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: LIST
75727: PUSH
75728: LD_VAR 0 1
75732: PUSH
75733: LD_INT 3
75735: MINUS
75736: PUSH
75737: LD_VAR 0 2
75741: PUSH
75742: LD_INT 1
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: LIST
75749: PUSH
75750: LD_VAR 0 1
75754: PUSH
75755: LD_INT 4
75757: PLUS
75758: PUSH
75759: LD_VAR 0 2
75763: PUSH
75764: LD_INT 4
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: LIST
75771: PUSH
75772: LD_VAR 0 1
75776: PUSH
75777: LD_INT 3
75779: PLUS
75780: PUSH
75781: LD_VAR 0 2
75785: PUSH
75786: LD_INT 3
75788: PLUS
75789: PUSH
75790: LD_INT 5
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: LIST
75797: PUSH
75798: LD_VAR 0 1
75802: PUSH
75803: LD_VAR 0 2
75807: PUSH
75808: LD_INT 4
75810: PLUS
75811: PUSH
75812: LD_INT 0
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: LIST
75819: PUSH
75820: EMPTY
75821: LIST
75822: LIST
75823: LIST
75824: LIST
75825: LIST
75826: ST_TO_ADDR
// end ; 1 :
75827: GO 76527
75829: LD_INT 1
75831: DOUBLE
75832: EQUAL
75833: IFTRUE 75837
75835: GO 75970
75837: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75838: LD_ADDR_VAR 0 5
75842: PUSH
75843: LD_VAR 0 1
75847: PUSH
75848: LD_VAR 0 2
75852: PUSH
75853: LD_INT 4
75855: MINUS
75856: PUSH
75857: LD_INT 3
75859: PUSH
75860: EMPTY
75861: LIST
75862: LIST
75863: LIST
75864: PUSH
75865: LD_VAR 0 1
75869: PUSH
75870: LD_INT 3
75872: MINUS
75873: PUSH
75874: LD_VAR 0 2
75878: PUSH
75879: LD_INT 3
75881: MINUS
75882: PUSH
75883: LD_INT 2
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: LIST
75890: PUSH
75891: LD_VAR 0 1
75895: PUSH
75896: LD_INT 4
75898: MINUS
75899: PUSH
75900: LD_VAR 0 2
75904: PUSH
75905: LD_INT 1
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: LIST
75912: PUSH
75913: LD_VAR 0 1
75917: PUSH
75918: LD_VAR 0 2
75922: PUSH
75923: LD_INT 3
75925: PLUS
75926: PUSH
75927: LD_INT 0
75929: PUSH
75930: EMPTY
75931: LIST
75932: LIST
75933: LIST
75934: PUSH
75935: LD_VAR 0 1
75939: PUSH
75940: LD_INT 4
75942: PLUS
75943: PUSH
75944: LD_VAR 0 2
75948: PUSH
75949: LD_INT 4
75951: PLUS
75952: PUSH
75953: LD_INT 5
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: LIST
75960: PUSH
75961: EMPTY
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: ST_TO_ADDR
// end ; 2 :
75968: GO 76527
75970: LD_INT 2
75972: DOUBLE
75973: EQUAL
75974: IFTRUE 75978
75976: GO 76107
75978: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75979: LD_ADDR_VAR 0 5
75983: PUSH
75984: LD_VAR 0 1
75988: PUSH
75989: LD_VAR 0 2
75993: PUSH
75994: LD_INT 3
75996: MINUS
75997: PUSH
75998: LD_INT 3
76000: PUSH
76001: EMPTY
76002: LIST
76003: LIST
76004: LIST
76005: PUSH
76006: LD_VAR 0 1
76010: PUSH
76011: LD_INT 4
76013: PLUS
76014: PUSH
76015: LD_VAR 0 2
76019: PUSH
76020: LD_INT 4
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: LIST
76027: PUSH
76028: LD_VAR 0 1
76032: PUSH
76033: LD_VAR 0 2
76037: PUSH
76038: LD_INT 4
76040: PLUS
76041: PUSH
76042: LD_INT 0
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: LIST
76049: PUSH
76050: LD_VAR 0 1
76054: PUSH
76055: LD_INT 3
76057: MINUS
76058: PUSH
76059: LD_VAR 0 2
76063: PUSH
76064: LD_INT 1
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: LIST
76071: PUSH
76072: LD_VAR 0 1
76076: PUSH
76077: LD_INT 4
76079: MINUS
76080: PUSH
76081: LD_VAR 0 2
76085: PUSH
76086: LD_INT 4
76088: MINUS
76089: PUSH
76090: LD_INT 2
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: LIST
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: ST_TO_ADDR
// end ; 3 :
76105: GO 76527
76107: LD_INT 3
76109: DOUBLE
76110: EQUAL
76111: IFTRUE 76115
76113: GO 76248
76115: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76116: LD_ADDR_VAR 0 5
76120: PUSH
76121: LD_VAR 0 1
76125: PUSH
76126: LD_INT 3
76128: PLUS
76129: PUSH
76130: LD_VAR 0 2
76134: PUSH
76135: LD_INT 4
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: LIST
76142: PUSH
76143: LD_VAR 0 1
76147: PUSH
76148: LD_INT 4
76150: PLUS
76151: PUSH
76152: LD_VAR 0 2
76156: PUSH
76157: LD_INT 4
76159: PLUS
76160: PUSH
76161: LD_INT 5
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: LIST
76168: PUSH
76169: LD_VAR 0 1
76173: PUSH
76174: LD_INT 4
76176: MINUS
76177: PUSH
76178: LD_VAR 0 2
76182: PUSH
76183: LD_INT 1
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: LIST
76190: PUSH
76191: LD_VAR 0 1
76195: PUSH
76196: LD_VAR 0 2
76200: PUSH
76201: LD_INT 4
76203: MINUS
76204: PUSH
76205: LD_INT 3
76207: PUSH
76208: EMPTY
76209: LIST
76210: LIST
76211: LIST
76212: PUSH
76213: LD_VAR 0 1
76217: PUSH
76218: LD_INT 3
76220: MINUS
76221: PUSH
76222: LD_VAR 0 2
76226: PUSH
76227: LD_INT 3
76229: MINUS
76230: PUSH
76231: LD_INT 2
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: LIST
76238: PUSH
76239: EMPTY
76240: LIST
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: ST_TO_ADDR
// end ; 4 :
76246: GO 76527
76248: LD_INT 4
76250: DOUBLE
76251: EQUAL
76252: IFTRUE 76256
76254: GO 76389
76256: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76257: LD_ADDR_VAR 0 5
76261: PUSH
76262: LD_VAR 0 1
76266: PUSH
76267: LD_VAR 0 2
76271: PUSH
76272: LD_INT 4
76274: PLUS
76275: PUSH
76276: LD_INT 0
76278: PUSH
76279: EMPTY
76280: LIST
76281: LIST
76282: LIST
76283: PUSH
76284: LD_VAR 0 1
76288: PUSH
76289: LD_INT 3
76291: PLUS
76292: PUSH
76293: LD_VAR 0 2
76297: PUSH
76298: LD_INT 3
76300: PLUS
76301: PUSH
76302: LD_INT 5
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: LIST
76309: PUSH
76310: LD_VAR 0 1
76314: PUSH
76315: LD_INT 4
76317: PLUS
76318: PUSH
76319: LD_VAR 0 2
76323: PUSH
76324: LD_INT 4
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: LIST
76331: PUSH
76332: LD_VAR 0 1
76336: PUSH
76337: LD_VAR 0 2
76341: PUSH
76342: LD_INT 3
76344: MINUS
76345: PUSH
76346: LD_INT 3
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: LIST
76353: PUSH
76354: LD_VAR 0 1
76358: PUSH
76359: LD_INT 4
76361: MINUS
76362: PUSH
76363: LD_VAR 0 2
76367: PUSH
76368: LD_INT 4
76370: MINUS
76371: PUSH
76372: LD_INT 2
76374: PUSH
76375: EMPTY
76376: LIST
76377: LIST
76378: LIST
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: ST_TO_ADDR
// end ; 5 :
76387: GO 76527
76389: LD_INT 5
76391: DOUBLE
76392: EQUAL
76393: IFTRUE 76397
76395: GO 76526
76397: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76398: LD_ADDR_VAR 0 5
76402: PUSH
76403: LD_VAR 0 1
76407: PUSH
76408: LD_INT 4
76410: MINUS
76411: PUSH
76412: LD_VAR 0 2
76416: PUSH
76417: LD_INT 1
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: LIST
76424: PUSH
76425: LD_VAR 0 1
76429: PUSH
76430: LD_VAR 0 2
76434: PUSH
76435: LD_INT 4
76437: MINUS
76438: PUSH
76439: LD_INT 3
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: LIST
76446: PUSH
76447: LD_VAR 0 1
76451: PUSH
76452: LD_INT 4
76454: PLUS
76455: PUSH
76456: LD_VAR 0 2
76460: PUSH
76461: LD_INT 4
76463: PLUS
76464: PUSH
76465: LD_INT 5
76467: PUSH
76468: EMPTY
76469: LIST
76470: LIST
76471: LIST
76472: PUSH
76473: LD_VAR 0 1
76477: PUSH
76478: LD_INT 3
76480: PLUS
76481: PUSH
76482: LD_VAR 0 2
76486: PUSH
76487: LD_INT 4
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: LIST
76494: PUSH
76495: LD_VAR 0 1
76499: PUSH
76500: LD_VAR 0 2
76504: PUSH
76505: LD_INT 3
76507: PLUS
76508: PUSH
76509: LD_INT 0
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: LIST
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: ST_TO_ADDR
// end ; end ;
76524: GO 76527
76526: POP
// result := list ;
76527: LD_ADDR_VAR 0 4
76531: PUSH
76532: LD_VAR 0 5
76536: ST_TO_ADDR
// end ;
76537: LD_VAR 0 4
76541: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76542: LD_INT 0
76544: PPUSH
76545: PPUSH
76546: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76547: LD_VAR 0 1
76551: NOT
76552: IFTRUE 76580
76554: PUSH
76555: LD_VAR 0 2
76559: PUSH
76560: LD_INT 1
76562: PUSH
76563: LD_INT 2
76565: PUSH
76566: LD_INT 3
76568: PUSH
76569: LD_INT 4
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: IN
76578: NOT
76579: OR
76580: IFFALSE 76584
// exit ;
76582: GO 76667
// tmp := [ ] ;
76584: LD_ADDR_VAR 0 5
76588: PUSH
76589: EMPTY
76590: ST_TO_ADDR
// for i in units do
76591: LD_ADDR_VAR 0 4
76595: PUSH
76596: LD_VAR 0 1
76600: PUSH
76601: FOR_IN
76602: IFFALSE 76636
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76604: LD_ADDR_VAR 0 5
76608: PUSH
76609: LD_VAR 0 5
76613: PPUSH
76614: LD_VAR 0 4
76618: PPUSH
76619: LD_VAR 0 2
76623: PPUSH
76624: CALL_OW 259
76628: PPUSH
76629: CALL 78062 0 2
76633: ST_TO_ADDR
76634: GO 76601
76636: POP
76637: POP
// if not tmp then
76638: LD_VAR 0 5
76642: NOT
76643: IFFALSE 76647
// exit ;
76645: GO 76667
// result := SortListByListDesc ( units , tmp ) ;
76647: LD_ADDR_VAR 0 3
76651: PUSH
76652: LD_VAR 0 1
76656: PPUSH
76657: LD_VAR 0 5
76661: PPUSH
76662: CALL_OW 77
76666: ST_TO_ADDR
// end ;
76667: LD_VAR 0 3
76671: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76672: LD_INT 0
76674: PPUSH
76675: PPUSH
76676: PPUSH
// result := false ;
76677: LD_ADDR_VAR 0 3
76681: PUSH
76682: LD_INT 0
76684: ST_TO_ADDR
// if not building then
76685: LD_VAR 0 2
76689: NOT
76690: IFFALSE 76694
// exit ;
76692: GO 76838
// x := GetX ( building ) ;
76694: LD_ADDR_VAR 0 4
76698: PUSH
76699: LD_VAR 0 2
76703: PPUSH
76704: CALL_OW 250
76708: ST_TO_ADDR
// y := GetY ( building ) ;
76709: LD_ADDR_VAR 0 5
76713: PUSH
76714: LD_VAR 0 2
76718: PPUSH
76719: CALL_OW 251
76723: ST_TO_ADDR
// if not x or not y then
76724: LD_VAR 0 4
76728: NOT
76729: IFTRUE 76738
76731: PUSH
76732: LD_VAR 0 5
76736: NOT
76737: OR
76738: IFFALSE 76742
// exit ;
76740: GO 76838
// if GetTaskList ( unit ) then
76742: LD_VAR 0 1
76746: PPUSH
76747: CALL_OW 437
76751: IFFALSE 76838
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76753: LD_STRING e
76755: PUSH
76756: LD_VAR 0 1
76760: PPUSH
76761: CALL_OW 437
76765: PUSH
76766: LD_INT 1
76768: ARRAY
76769: PUSH
76770: LD_INT 1
76772: ARRAY
76773: EQUAL
76774: IFFALSE 76801
76776: PUSH
76777: LD_VAR 0 4
76781: PUSH
76782: LD_VAR 0 1
76786: PPUSH
76787: CALL_OW 437
76791: PUSH
76792: LD_INT 1
76794: ARRAY
76795: PUSH
76796: LD_INT 2
76798: ARRAY
76799: EQUAL
76800: AND
76801: IFFALSE 76828
76803: PUSH
76804: LD_VAR 0 5
76808: PUSH
76809: LD_VAR 0 1
76813: PPUSH
76814: CALL_OW 437
76818: PUSH
76819: LD_INT 1
76821: ARRAY
76822: PUSH
76823: LD_INT 3
76825: ARRAY
76826: EQUAL
76827: AND
76828: IFFALSE 76838
// result := true end ;
76830: LD_ADDR_VAR 0 3
76834: PUSH
76835: LD_INT 1
76837: ST_TO_ADDR
// end ;
76838: LD_VAR 0 3
76842: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76843: LD_INT 0
76845: PPUSH
// result := false ;
76846: LD_ADDR_VAR 0 4
76850: PUSH
76851: LD_INT 0
76853: ST_TO_ADDR
// if GetTaskList ( unit ) then
76854: LD_VAR 0 1
76858: PPUSH
76859: CALL_OW 437
76863: IFFALSE 76950
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76865: LD_STRING M
76867: PUSH
76868: LD_VAR 0 1
76872: PPUSH
76873: CALL_OW 437
76877: PUSH
76878: LD_INT 1
76880: ARRAY
76881: PUSH
76882: LD_INT 1
76884: ARRAY
76885: EQUAL
76886: IFFALSE 76913
76888: PUSH
76889: LD_VAR 0 2
76893: PUSH
76894: LD_VAR 0 1
76898: PPUSH
76899: CALL_OW 437
76903: PUSH
76904: LD_INT 1
76906: ARRAY
76907: PUSH
76908: LD_INT 2
76910: ARRAY
76911: EQUAL
76912: AND
76913: IFFALSE 76940
76915: PUSH
76916: LD_VAR 0 3
76920: PUSH
76921: LD_VAR 0 1
76925: PPUSH
76926: CALL_OW 437
76930: PUSH
76931: LD_INT 1
76933: ARRAY
76934: PUSH
76935: LD_INT 3
76937: ARRAY
76938: EQUAL
76939: AND
76940: IFFALSE 76950
// result := true ;
76942: LD_ADDR_VAR 0 4
76946: PUSH
76947: LD_INT 1
76949: ST_TO_ADDR
// end ; end ;
76950: LD_VAR 0 4
76954: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76955: LD_INT 0
76957: PPUSH
76958: PPUSH
76959: PPUSH
76960: PPUSH
// if not unit or not area then
76961: LD_VAR 0 1
76965: NOT
76966: IFTRUE 76975
76968: PUSH
76969: LD_VAR 0 2
76973: NOT
76974: OR
76975: IFFALSE 76979
// exit ;
76977: GO 77155
// tmp := AreaToList ( area , i ) ;
76979: LD_ADDR_VAR 0 6
76983: PUSH
76984: LD_VAR 0 2
76988: PPUSH
76989: LD_VAR 0 5
76993: PPUSH
76994: CALL_OW 517
76998: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76999: LD_ADDR_VAR 0 5
77003: PUSH
77004: DOUBLE
77005: LD_INT 1
77007: DEC
77008: ST_TO_ADDR
77009: LD_VAR 0 6
77013: PUSH
77014: LD_INT 1
77016: ARRAY
77017: PUSH
77018: FOR_TO
77019: IFFALSE 77153
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77021: LD_ADDR_VAR 0 7
77025: PUSH
77026: LD_VAR 0 6
77030: PUSH
77031: LD_INT 1
77033: ARRAY
77034: PUSH
77035: LD_VAR 0 5
77039: ARRAY
77040: PUSH
77041: LD_VAR 0 6
77045: PUSH
77046: LD_INT 2
77048: ARRAY
77049: PUSH
77050: LD_VAR 0 5
77054: ARRAY
77055: PUSH
77056: EMPTY
77057: LIST
77058: LIST
77059: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77060: LD_INT 92
77062: PUSH
77063: LD_VAR 0 7
77067: PUSH
77068: LD_INT 1
77070: ARRAY
77071: PUSH
77072: LD_VAR 0 7
77076: PUSH
77077: LD_INT 2
77079: ARRAY
77080: PUSH
77081: LD_INT 2
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: LIST
77088: LIST
77089: PPUSH
77090: CALL_OW 69
77094: PUSH
77095: LD_INT 0
77097: EQUAL
77098: IFFALSE 77151
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77100: LD_VAR 0 1
77104: PPUSH
77105: LD_VAR 0 7
77109: PUSH
77110: LD_INT 1
77112: ARRAY
77113: PPUSH
77114: LD_VAR 0 7
77118: PUSH
77119: LD_INT 2
77121: ARRAY
77122: PPUSH
77123: LD_VAR 0 3
77127: PPUSH
77128: CALL_OW 48
// result := IsPlaced ( unit ) ;
77132: LD_ADDR_VAR 0 4
77136: PUSH
77137: LD_VAR 0 1
77141: PPUSH
77142: CALL_OW 305
77146: ST_TO_ADDR
// exit ;
77147: POP
77148: POP
77149: GO 77155
// end ; end ;
77151: GO 77018
77153: POP
77154: POP
// end ;
77155: LD_VAR 0 4
77159: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77160: LD_INT 0
77162: PPUSH
77163: PPUSH
77164: PPUSH
// if not side or side > 8 then
77165: LD_VAR 0 1
77169: NOT
77170: IFTRUE 77182
77172: PUSH
77173: LD_VAR 0 1
77177: PUSH
77178: LD_INT 8
77180: GREATER
77181: OR
77182: IFFALSE 77186
// exit ;
77184: GO 77373
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77186: LD_ADDR_VAR 0 4
77190: PUSH
77191: LD_INT 22
77193: PUSH
77194: LD_VAR 0 1
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: PUSH
77203: LD_INT 21
77205: PUSH
77206: LD_INT 3
77208: PUSH
77209: EMPTY
77210: LIST
77211: LIST
77212: PUSH
77213: EMPTY
77214: LIST
77215: LIST
77216: PPUSH
77217: CALL_OW 69
77221: ST_TO_ADDR
// if not tmp then
77222: LD_VAR 0 4
77226: NOT
77227: IFFALSE 77231
// exit ;
77229: GO 77373
// enable_addtolog := true ;
77231: LD_ADDR_OWVAR 81
77235: PUSH
77236: LD_INT 1
77238: ST_TO_ADDR
// AddToLog ( [ ) ;
77239: LD_STRING [
77241: PPUSH
77242: CALL_OW 561
// for i in tmp do
77246: LD_ADDR_VAR 0 3
77250: PUSH
77251: LD_VAR 0 4
77255: PUSH
77256: FOR_IN
77257: IFFALSE 77364
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77259: LD_STRING [
77261: PUSH
77262: LD_VAR 0 3
77266: PPUSH
77267: CALL_OW 266
77271: STR
77272: PUSH
77273: LD_STRING , 
77275: STR
77276: PUSH
77277: LD_VAR 0 3
77281: PPUSH
77282: CALL_OW 250
77286: STR
77287: PUSH
77288: LD_STRING , 
77290: STR
77291: PUSH
77292: LD_VAR 0 3
77296: PPUSH
77297: CALL_OW 251
77301: STR
77302: PUSH
77303: LD_STRING , 
77305: STR
77306: PUSH
77307: LD_VAR 0 3
77311: PPUSH
77312: CALL_OW 254
77316: STR
77317: PUSH
77318: LD_STRING , 
77320: STR
77321: PUSH
77322: LD_VAR 0 3
77326: PPUSH
77327: LD_INT 1
77329: PPUSH
77330: CALL_OW 268
77334: STR
77335: PUSH
77336: LD_STRING , 
77338: STR
77339: PUSH
77340: LD_VAR 0 3
77344: PPUSH
77345: LD_INT 2
77347: PPUSH
77348: CALL_OW 268
77352: STR
77353: PUSH
77354: LD_STRING ],
77356: STR
77357: PPUSH
77358: CALL_OW 561
// end ;
77362: GO 77256
77364: POP
77365: POP
// AddToLog ( ]; ) ;
77366: LD_STRING ];
77368: PPUSH
77369: CALL_OW 561
// end ;
77373: LD_VAR 0 2
77377: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77378: LD_INT 0
77380: PPUSH
77381: PPUSH
77382: PPUSH
77383: PPUSH
77384: PPUSH
// if not area or not rate or not max then
77385: LD_VAR 0 1
77389: NOT
77390: IFTRUE 77399
77392: PUSH
77393: LD_VAR 0 2
77397: NOT
77398: OR
77399: IFTRUE 77408
77401: PUSH
77402: LD_VAR 0 4
77406: NOT
77407: OR
77408: IFFALSE 77412
// exit ;
77410: GO 77601
// while 1 do
77412: LD_INT 1
77414: IFFALSE 77601
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77416: LD_ADDR_VAR 0 9
77420: PUSH
77421: LD_VAR 0 1
77425: PPUSH
77426: LD_INT 1
77428: PPUSH
77429: CALL_OW 287
77433: PUSH
77434: LD_INT 10
77436: MUL
77437: ST_TO_ADDR
// r := rate / 10 ;
77438: LD_ADDR_VAR 0 7
77442: PUSH
77443: LD_VAR 0 2
77447: PUSH
77448: LD_INT 10
77450: DIVREAL
77451: ST_TO_ADDR
// time := 1 1$00 ;
77452: LD_ADDR_VAR 0 8
77456: PUSH
77457: LD_INT 2100
77459: ST_TO_ADDR
// if amount < min then
77460: LD_VAR 0 9
77464: PUSH
77465: LD_VAR 0 3
77469: LESS
77470: IFFALSE 77488
// r := r * 2 else
77472: LD_ADDR_VAR 0 7
77476: PUSH
77477: LD_VAR 0 7
77481: PUSH
77482: LD_INT 2
77484: MUL
77485: ST_TO_ADDR
77486: GO 77514
// if amount > max then
77488: LD_VAR 0 9
77492: PUSH
77493: LD_VAR 0 4
77497: GREATER
77498: IFFALSE 77514
// r := r / 2 ;
77500: LD_ADDR_VAR 0 7
77504: PUSH
77505: LD_VAR 0 7
77509: PUSH
77510: LD_INT 2
77512: DIVREAL
77513: ST_TO_ADDR
// time := time / r ;
77514: LD_ADDR_VAR 0 8
77518: PUSH
77519: LD_VAR 0 8
77523: PUSH
77524: LD_VAR 0 7
77528: DIVREAL
77529: ST_TO_ADDR
// if time < 0 then
77530: LD_VAR 0 8
77534: PUSH
77535: LD_INT 0
77537: LESS
77538: IFFALSE 77555
// time := time * - 1 ;
77540: LD_ADDR_VAR 0 8
77544: PUSH
77545: LD_VAR 0 8
77549: PUSH
77550: LD_INT 1
77552: NEG
77553: MUL
77554: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77555: LD_VAR 0 8
77559: PUSH
77560: LD_INT 35
77562: PPUSH
77563: LD_INT 875
77565: PPUSH
77566: CALL_OW 12
77570: PLUS
77571: PPUSH
77572: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77576: LD_INT 1
77578: PPUSH
77579: LD_INT 5
77581: PPUSH
77582: CALL_OW 12
77586: PPUSH
77587: LD_VAR 0 1
77591: PPUSH
77592: LD_INT 1
77594: PPUSH
77595: CALL_OW 55
// end ;
77599: GO 77412
// end ;
77601: LD_VAR 0 5
77605: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77606: LD_INT 0
77608: PPUSH
77609: PPUSH
77610: PPUSH
77611: PPUSH
77612: PPUSH
77613: PPUSH
77614: PPUSH
77615: PPUSH
// if not turrets or not factories then
77616: LD_VAR 0 1
77620: NOT
77621: IFTRUE 77630
77623: PUSH
77624: LD_VAR 0 2
77628: NOT
77629: OR
77630: IFFALSE 77634
// exit ;
77632: GO 77941
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77634: LD_ADDR_VAR 0 10
77638: PUSH
77639: LD_INT 5
77641: PUSH
77642: LD_INT 6
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: PUSH
77649: LD_INT 2
77651: PUSH
77652: LD_INT 4
77654: PUSH
77655: EMPTY
77656: LIST
77657: LIST
77658: PUSH
77659: LD_INT 3
77661: PUSH
77662: LD_INT 5
77664: PUSH
77665: EMPTY
77666: LIST
77667: LIST
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: LIST
77673: PUSH
77674: LD_INT 24
77676: PUSH
77677: LD_INT 25
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PUSH
77684: LD_INT 23
77686: PUSH
77687: LD_INT 27
77689: PUSH
77690: EMPTY
77691: LIST
77692: LIST
77693: PUSH
77694: EMPTY
77695: LIST
77696: LIST
77697: PUSH
77698: LD_INT 42
77700: PUSH
77701: LD_INT 43
77703: PUSH
77704: EMPTY
77705: LIST
77706: LIST
77707: PUSH
77708: LD_INT 44
77710: PUSH
77711: LD_INT 46
77713: PUSH
77714: EMPTY
77715: LIST
77716: LIST
77717: PUSH
77718: LD_INT 45
77720: PUSH
77721: LD_INT 47
77723: PUSH
77724: EMPTY
77725: LIST
77726: LIST
77727: PUSH
77728: EMPTY
77729: LIST
77730: LIST
77731: LIST
77732: PUSH
77733: EMPTY
77734: LIST
77735: LIST
77736: LIST
77737: ST_TO_ADDR
// result := [ ] ;
77738: LD_ADDR_VAR 0 3
77742: PUSH
77743: EMPTY
77744: ST_TO_ADDR
// for i in turrets do
77745: LD_ADDR_VAR 0 4
77749: PUSH
77750: LD_VAR 0 1
77754: PUSH
77755: FOR_IN
77756: IFFALSE 77939
// begin nat := GetNation ( i ) ;
77758: LD_ADDR_VAR 0 7
77762: PUSH
77763: LD_VAR 0 4
77767: PPUSH
77768: CALL_OW 248
77772: ST_TO_ADDR
// weapon := 0 ;
77773: LD_ADDR_VAR 0 8
77777: PUSH
77778: LD_INT 0
77780: ST_TO_ADDR
// if not nat then
77781: LD_VAR 0 7
77785: NOT
77786: IFFALSE 77790
// continue ;
77788: GO 77755
// for j in list [ nat ] do
77790: LD_ADDR_VAR 0 5
77794: PUSH
77795: LD_VAR 0 10
77799: PUSH
77800: LD_VAR 0 7
77804: ARRAY
77805: PUSH
77806: FOR_IN
77807: IFFALSE 77848
// if GetBWeapon ( i ) = j [ 1 ] then
77809: LD_VAR 0 4
77813: PPUSH
77814: CALL_OW 269
77818: PUSH
77819: LD_VAR 0 5
77823: PUSH
77824: LD_INT 1
77826: ARRAY
77827: EQUAL
77828: IFFALSE 77846
// begin weapon := j [ 2 ] ;
77830: LD_ADDR_VAR 0 8
77834: PUSH
77835: LD_VAR 0 5
77839: PUSH
77840: LD_INT 2
77842: ARRAY
77843: ST_TO_ADDR
// break ;
77844: GO 77848
// end ;
77846: GO 77806
77848: POP
77849: POP
// if not weapon then
77850: LD_VAR 0 8
77854: NOT
77855: IFFALSE 77859
// continue ;
77857: GO 77755
// for k in factories do
77859: LD_ADDR_VAR 0 6
77863: PUSH
77864: LD_VAR 0 2
77868: PUSH
77869: FOR_IN
77870: IFFALSE 77935
// begin weapons := AvailableWeaponList ( k ) ;
77872: LD_ADDR_VAR 0 9
77876: PUSH
77877: LD_VAR 0 6
77881: PPUSH
77882: CALL_OW 478
77886: ST_TO_ADDR
// if not weapons then
77887: LD_VAR 0 9
77891: NOT
77892: IFFALSE 77896
// continue ;
77894: GO 77869
// if weapon in weapons then
77896: LD_VAR 0 8
77900: PUSH
77901: LD_VAR 0 9
77905: IN
77906: IFFALSE 77933
// begin result := [ i , weapon ] ;
77908: LD_ADDR_VAR 0 3
77912: PUSH
77913: LD_VAR 0 4
77917: PUSH
77918: LD_VAR 0 8
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: ST_TO_ADDR
// exit ;
77927: POP
77928: POP
77929: POP
77930: POP
77931: GO 77941
// end ; end ;
77933: GO 77869
77935: POP
77936: POP
// end ;
77937: GO 77755
77939: POP
77940: POP
// end ;
77941: LD_VAR 0 3
77945: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77946: LD_INT 0
77948: PPUSH
// if not side or side > 8 then
77949: LD_VAR 0 3
77953: NOT
77954: IFTRUE 77966
77956: PUSH
77957: LD_VAR 0 3
77961: PUSH
77962: LD_INT 8
77964: GREATER
77965: OR
77966: IFFALSE 77970
// exit ;
77968: GO 78029
// if not range then
77970: LD_VAR 0 4
77974: NOT
77975: IFFALSE 77986
// range := - 12 ;
77977: LD_ADDR_VAR 0 4
77981: PUSH
77982: LD_INT 12
77984: NEG
77985: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77986: LD_VAR 0 1
77990: PPUSH
77991: LD_VAR 0 2
77995: PPUSH
77996: LD_VAR 0 3
78000: PPUSH
78001: LD_VAR 0 4
78005: PPUSH
78006: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78010: LD_VAR 0 1
78014: PPUSH
78015: LD_VAR 0 2
78019: PPUSH
78020: LD_VAR 0 3
78024: PPUSH
78025: CALL_OW 331
// end ;
78029: LD_VAR 0 5
78033: RET
// export function Video ( mode ) ; begin
78034: LD_INT 0
78036: PPUSH
// ingame_video = mode ;
78037: LD_ADDR_OWVAR 52
78041: PUSH
78042: LD_VAR 0 1
78046: ST_TO_ADDR
// interface_hidden = mode ;
78047: LD_ADDR_OWVAR 54
78051: PUSH
78052: LD_VAR 0 1
78056: ST_TO_ADDR
// end ;
78057: LD_VAR 0 2
78061: RET
// export function Join ( array , element ) ; begin
78062: LD_INT 0
78064: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78065: LD_ADDR_VAR 0 3
78069: PUSH
78070: LD_VAR 0 1
78074: PPUSH
78075: LD_VAR 0 1
78079: PUSH
78080: LD_INT 1
78082: PLUS
78083: PPUSH
78084: LD_VAR 0 2
78088: PPUSH
78089: CALL_OW 1
78093: ST_TO_ADDR
// end ;
78094: LD_VAR 0 3
78098: RET
// export function JoinUnion ( array , element ) ; begin
78099: LD_INT 0
78101: PPUSH
// result := array union element ;
78102: LD_ADDR_VAR 0 3
78106: PUSH
78107: LD_VAR 0 1
78111: PUSH
78112: LD_VAR 0 2
78116: UNION
78117: ST_TO_ADDR
// end ;
78118: LD_VAR 0 3
78122: RET
// export function GetBehemoths ( side ) ; begin
78123: LD_INT 0
78125: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78126: LD_ADDR_VAR 0 2
78130: PUSH
78131: LD_INT 22
78133: PUSH
78134: LD_VAR 0 1
78138: PUSH
78139: EMPTY
78140: LIST
78141: LIST
78142: PUSH
78143: LD_INT 31
78145: PUSH
78146: LD_INT 25
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: EMPTY
78154: LIST
78155: LIST
78156: PPUSH
78157: CALL_OW 69
78161: ST_TO_ADDR
// end ;
78162: LD_VAR 0 2
78166: RET
// export function Shuffle ( array ) ; var i , index ; begin
78167: LD_INT 0
78169: PPUSH
78170: PPUSH
78171: PPUSH
// result := [ ] ;
78172: LD_ADDR_VAR 0 2
78176: PUSH
78177: EMPTY
78178: ST_TO_ADDR
// if not array then
78179: LD_VAR 0 1
78183: NOT
78184: IFFALSE 78188
// exit ;
78186: GO 78287
// Randomize ;
78188: CALL_OW 10
// for i = array downto 1 do
78192: LD_ADDR_VAR 0 3
78196: PUSH
78197: DOUBLE
78198: LD_VAR 0 1
78202: INC
78203: ST_TO_ADDR
78204: LD_INT 1
78206: PUSH
78207: FOR_DOWNTO
78208: IFFALSE 78285
// begin index := rand ( 1 , array ) ;
78210: LD_ADDR_VAR 0 4
78214: PUSH
78215: LD_INT 1
78217: PPUSH
78218: LD_VAR 0 1
78222: PPUSH
78223: CALL_OW 12
78227: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78228: LD_ADDR_VAR 0 2
78232: PUSH
78233: LD_VAR 0 2
78237: PPUSH
78238: LD_VAR 0 2
78242: PUSH
78243: LD_INT 1
78245: PLUS
78246: PPUSH
78247: LD_VAR 0 1
78251: PUSH
78252: LD_VAR 0 4
78256: ARRAY
78257: PPUSH
78258: CALL_OW 2
78262: ST_TO_ADDR
// array := Delete ( array , index ) ;
78263: LD_ADDR_VAR 0 1
78267: PUSH
78268: LD_VAR 0 1
78272: PPUSH
78273: LD_VAR 0 4
78277: PPUSH
78278: CALL_OW 3
78282: ST_TO_ADDR
// end ;
78283: GO 78207
78285: POP
78286: POP
// end ;
78287: LD_VAR 0 2
78291: RET
// export function GetBaseMaterials ( base ) ; begin
78292: LD_INT 0
78294: PPUSH
// result := [ 0 , 0 , 0 ] ;
78295: LD_ADDR_VAR 0 2
78299: PUSH
78300: LD_INT 0
78302: PUSH
78303: LD_INT 0
78305: PUSH
78306: LD_INT 0
78308: PUSH
78309: EMPTY
78310: LIST
78311: LIST
78312: LIST
78313: ST_TO_ADDR
// if not base then
78314: LD_VAR 0 1
78318: NOT
78319: IFFALSE 78323
// exit ;
78321: GO 78372
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78323: LD_ADDR_VAR 0 2
78327: PUSH
78328: LD_VAR 0 1
78332: PPUSH
78333: LD_INT 1
78335: PPUSH
78336: CALL_OW 275
78340: PUSH
78341: LD_VAR 0 1
78345: PPUSH
78346: LD_INT 2
78348: PPUSH
78349: CALL_OW 275
78353: PUSH
78354: LD_VAR 0 1
78358: PPUSH
78359: LD_INT 3
78361: PPUSH
78362: CALL_OW 275
78366: PUSH
78367: EMPTY
78368: LIST
78369: LIST
78370: LIST
78371: ST_TO_ADDR
// end ;
78372: LD_VAR 0 2
78376: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78377: LD_INT 0
78379: PPUSH
78380: PPUSH
// result := array ;
78381: LD_ADDR_VAR 0 3
78385: PUSH
78386: LD_VAR 0 1
78390: ST_TO_ADDR
// if size >= result then
78391: LD_VAR 0 2
78395: PUSH
78396: LD_VAR 0 3
78400: GREATEREQUAL
78401: IFFALSE 78405
// exit ;
78403: GO 78455
// if size then
78405: LD_VAR 0 2
78409: IFFALSE 78455
// for i := array downto size do
78411: LD_ADDR_VAR 0 4
78415: PUSH
78416: DOUBLE
78417: LD_VAR 0 1
78421: INC
78422: ST_TO_ADDR
78423: LD_VAR 0 2
78427: PUSH
78428: FOR_DOWNTO
78429: IFFALSE 78453
// result := Delete ( result , result ) ;
78431: LD_ADDR_VAR 0 3
78435: PUSH
78436: LD_VAR 0 3
78440: PPUSH
78441: LD_VAR 0 3
78445: PPUSH
78446: CALL_OW 3
78450: ST_TO_ADDR
78451: GO 78428
78453: POP
78454: POP
// end ;
78455: LD_VAR 0 3
78459: RET
// export function ComExit ( unit ) ; var tmp ; begin
78460: LD_INT 0
78462: PPUSH
78463: PPUSH
// if not IsInUnit ( unit ) then
78464: LD_VAR 0 1
78468: PPUSH
78469: CALL_OW 310
78473: NOT
78474: IFFALSE 78478
// exit ;
78476: GO 78538
// tmp := IsInUnit ( unit ) ;
78478: LD_ADDR_VAR 0 3
78482: PUSH
78483: LD_VAR 0 1
78487: PPUSH
78488: CALL_OW 310
78492: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78493: LD_VAR 0 3
78497: PPUSH
78498: CALL_OW 247
78502: PUSH
78503: LD_INT 2
78505: EQUAL
78506: IFFALSE 78519
// ComExitVehicle ( unit ) else
78508: LD_VAR 0 1
78512: PPUSH
78513: CALL_OW 121
78517: GO 78528
// ComExitBuilding ( unit ) ;
78519: LD_VAR 0 1
78523: PPUSH
78524: CALL_OW 122
// result := tmp ;
78528: LD_ADDR_VAR 0 2
78532: PUSH
78533: LD_VAR 0 3
78537: ST_TO_ADDR
// end ;
78538: LD_VAR 0 2
78542: RET
// export function ComExitAll ( units ) ; var i ; begin
78543: LD_INT 0
78545: PPUSH
78546: PPUSH
// if not units then
78547: LD_VAR 0 1
78551: NOT
78552: IFFALSE 78556
// exit ;
78554: GO 78582
// for i in units do
78556: LD_ADDR_VAR 0 3
78560: PUSH
78561: LD_VAR 0 1
78565: PUSH
78566: FOR_IN
78567: IFFALSE 78580
// ComExit ( i ) ;
78569: LD_VAR 0 3
78573: PPUSH
78574: CALL 78460 0 1
78578: GO 78566
78580: POP
78581: POP
// end ;
78582: LD_VAR 0 2
78586: RET
// export function ResetHc ; begin
78587: LD_INT 0
78589: PPUSH
// InitHc ;
78590: CALL_OW 19
// hc_importance := 0 ;
78594: LD_ADDR_OWVAR 32
78598: PUSH
78599: LD_INT 0
78601: ST_TO_ADDR
// end ;
78602: LD_VAR 0 1
78606: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78607: LD_INT 0
78609: PPUSH
78610: PPUSH
78611: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78612: LD_ADDR_VAR 0 6
78616: PUSH
78617: LD_VAR 0 1
78621: PUSH
78622: LD_VAR 0 3
78626: PLUS
78627: PUSH
78628: LD_INT 2
78630: DIV
78631: ST_TO_ADDR
// if _x < 0 then
78632: LD_VAR 0 6
78636: PUSH
78637: LD_INT 0
78639: LESS
78640: IFFALSE 78657
// _x := _x * - 1 ;
78642: LD_ADDR_VAR 0 6
78646: PUSH
78647: LD_VAR 0 6
78651: PUSH
78652: LD_INT 1
78654: NEG
78655: MUL
78656: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78657: LD_ADDR_VAR 0 7
78661: PUSH
78662: LD_VAR 0 2
78666: PUSH
78667: LD_VAR 0 4
78671: PLUS
78672: PUSH
78673: LD_INT 2
78675: DIV
78676: ST_TO_ADDR
// if _y < 0 then
78677: LD_VAR 0 7
78681: PUSH
78682: LD_INT 0
78684: LESS
78685: IFFALSE 78702
// _y := _y * - 1 ;
78687: LD_ADDR_VAR 0 7
78691: PUSH
78692: LD_VAR 0 7
78696: PUSH
78697: LD_INT 1
78699: NEG
78700: MUL
78701: ST_TO_ADDR
// result := [ _x , _y ] ;
78702: LD_ADDR_VAR 0 5
78706: PUSH
78707: LD_VAR 0 6
78711: PUSH
78712: LD_VAR 0 7
78716: PUSH
78717: EMPTY
78718: LIST
78719: LIST
78720: ST_TO_ADDR
// end ;
78721: LD_VAR 0 5
78725: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78726: LD_INT 0
78728: PPUSH
78729: PPUSH
78730: PPUSH
78731: PPUSH
// task := GetTaskList ( unit ) ;
78732: LD_ADDR_VAR 0 7
78736: PUSH
78737: LD_VAR 0 1
78741: PPUSH
78742: CALL_OW 437
78746: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78747: LD_VAR 0 7
78751: NOT
78752: IFFALSE 78771
78754: PUSH
78755: LD_VAR 0 1
78759: PPUSH
78760: LD_VAR 0 2
78764: PPUSH
78765: CALL_OW 308
78769: NOT
78770: AND
78771: IFFALSE 78775
// exit ;
78773: GO 78893
// if IsInArea ( unit , area ) then
78775: LD_VAR 0 1
78779: PPUSH
78780: LD_VAR 0 2
78784: PPUSH
78785: CALL_OW 308
78789: IFFALSE 78807
// begin ComMoveToArea ( unit , goAway ) ;
78791: LD_VAR 0 1
78795: PPUSH
78796: LD_VAR 0 3
78800: PPUSH
78801: CALL_OW 113
// exit ;
78805: GO 78893
// end ; if task [ 1 ] [ 1 ] <> M then
78807: LD_VAR 0 7
78811: PUSH
78812: LD_INT 1
78814: ARRAY
78815: PUSH
78816: LD_INT 1
78818: ARRAY
78819: PUSH
78820: LD_STRING M
78822: NONEQUAL
78823: IFFALSE 78827
// exit ;
78825: GO 78893
// x := task [ 1 ] [ 2 ] ;
78827: LD_ADDR_VAR 0 5
78831: PUSH
78832: LD_VAR 0 7
78836: PUSH
78837: LD_INT 1
78839: ARRAY
78840: PUSH
78841: LD_INT 2
78843: ARRAY
78844: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78845: LD_ADDR_VAR 0 6
78849: PUSH
78850: LD_VAR 0 7
78854: PUSH
78855: LD_INT 1
78857: ARRAY
78858: PUSH
78859: LD_INT 3
78861: ARRAY
78862: ST_TO_ADDR
// if InArea ( x , y , area ) then
78863: LD_VAR 0 5
78867: PPUSH
78868: LD_VAR 0 6
78872: PPUSH
78873: LD_VAR 0 2
78877: PPUSH
78878: CALL_OW 309
78882: IFFALSE 78893
// ComStop ( unit ) ;
78884: LD_VAR 0 1
78888: PPUSH
78889: CALL_OW 141
// end ;
78893: LD_VAR 0 4
78897: RET
// export function Abs ( value ) ; begin
78898: LD_INT 0
78900: PPUSH
// result := value ;
78901: LD_ADDR_VAR 0 2
78905: PUSH
78906: LD_VAR 0 1
78910: ST_TO_ADDR
// if value < 0 then
78911: LD_VAR 0 1
78915: PUSH
78916: LD_INT 0
78918: LESS
78919: IFFALSE 78936
// result := value * - 1 ;
78921: LD_ADDR_VAR 0 2
78925: PUSH
78926: LD_VAR 0 1
78930: PUSH
78931: LD_INT 1
78933: NEG
78934: MUL
78935: ST_TO_ADDR
// end ;
78936: LD_VAR 0 2
78940: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78941: LD_INT 0
78943: PPUSH
78944: PPUSH
78945: PPUSH
78946: PPUSH
78947: PPUSH
78948: PPUSH
78949: PPUSH
78950: PPUSH
// if not unit or not building then
78951: LD_VAR 0 1
78955: NOT
78956: IFTRUE 78965
78958: PUSH
78959: LD_VAR 0 2
78963: NOT
78964: OR
78965: IFFALSE 78969
// exit ;
78967: GO 79197
// x := GetX ( building ) ;
78969: LD_ADDR_VAR 0 4
78973: PUSH
78974: LD_VAR 0 2
78978: PPUSH
78979: CALL_OW 250
78983: ST_TO_ADDR
// y := GetY ( building ) ;
78984: LD_ADDR_VAR 0 6
78988: PUSH
78989: LD_VAR 0 2
78993: PPUSH
78994: CALL_OW 251
78998: ST_TO_ADDR
// d := GetDir ( building ) ;
78999: LD_ADDR_VAR 0 8
79003: PUSH
79004: LD_VAR 0 2
79008: PPUSH
79009: CALL_OW 254
79013: ST_TO_ADDR
// r := 4 ;
79014: LD_ADDR_VAR 0 9
79018: PUSH
79019: LD_INT 4
79021: ST_TO_ADDR
// for i := 1 to 5 do
79022: LD_ADDR_VAR 0 10
79026: PUSH
79027: DOUBLE
79028: LD_INT 1
79030: DEC
79031: ST_TO_ADDR
79032: LD_INT 5
79034: PUSH
79035: FOR_TO
79036: IFFALSE 79195
// begin _x := ShiftX ( x , d , r + i ) ;
79038: LD_ADDR_VAR 0 5
79042: PUSH
79043: LD_VAR 0 4
79047: PPUSH
79048: LD_VAR 0 8
79052: PPUSH
79053: LD_VAR 0 9
79057: PUSH
79058: LD_VAR 0 10
79062: PLUS
79063: PPUSH
79064: CALL_OW 272
79068: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79069: LD_ADDR_VAR 0 7
79073: PUSH
79074: LD_VAR 0 6
79078: PPUSH
79079: LD_VAR 0 8
79083: PPUSH
79084: LD_VAR 0 9
79088: PUSH
79089: LD_VAR 0 10
79093: PLUS
79094: PPUSH
79095: CALL_OW 273
79099: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79100: LD_VAR 0 5
79104: PPUSH
79105: LD_VAR 0 7
79109: PPUSH
79110: CALL_OW 488
79114: IFFALSE 79149
79116: PUSH
79117: LD_VAR 0 5
79121: PPUSH
79122: LD_VAR 0 7
79126: PPUSH
79127: CALL_OW 428
79131: PPUSH
79132: CALL_OW 247
79136: PUSH
79137: LD_INT 3
79139: PUSH
79140: LD_INT 2
79142: PUSH
79143: EMPTY
79144: LIST
79145: LIST
79146: IN
79147: NOT
79148: AND
79149: IFFALSE 79193
// begin ComMoveXY ( unit , _x , _y ) ;
79151: LD_VAR 0 1
79155: PPUSH
79156: LD_VAR 0 5
79160: PPUSH
79161: LD_VAR 0 7
79165: PPUSH
79166: CALL_OW 111
// result := [ _x , _y ] ;
79170: LD_ADDR_VAR 0 3
79174: PUSH
79175: LD_VAR 0 5
79179: PUSH
79180: LD_VAR 0 7
79184: PUSH
79185: EMPTY
79186: LIST
79187: LIST
79188: ST_TO_ADDR
// exit ;
79189: POP
79190: POP
79191: GO 79197
// end ; end ;
79193: GO 79035
79195: POP
79196: POP
// end ;
79197: LD_VAR 0 3
79201: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79202: LD_INT 0
79204: PPUSH
79205: PPUSH
79206: PPUSH
// result := 0 ;
79207: LD_ADDR_VAR 0 3
79211: PUSH
79212: LD_INT 0
79214: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79215: LD_VAR 0 1
79219: PUSH
79220: LD_INT 0
79222: LESS
79223: IFTRUE 79235
79225: PUSH
79226: LD_VAR 0 1
79230: PUSH
79231: LD_INT 8
79233: GREATER
79234: OR
79235: IFTRUE 79247
79237: PUSH
79238: LD_VAR 0 2
79242: PUSH
79243: LD_INT 0
79245: LESS
79246: OR
79247: IFTRUE 79259
79249: PUSH
79250: LD_VAR 0 2
79254: PUSH
79255: LD_INT 8
79257: GREATER
79258: OR
79259: IFFALSE 79263
// exit ;
79261: GO 79338
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79263: LD_ADDR_VAR 0 4
79267: PUSH
79268: LD_INT 22
79270: PUSH
79271: LD_VAR 0 2
79275: PUSH
79276: EMPTY
79277: LIST
79278: LIST
79279: PPUSH
79280: CALL_OW 69
79284: PUSH
79285: FOR_IN
79286: IFFALSE 79336
// begin un := UnitShoot ( i ) ;
79288: LD_ADDR_VAR 0 5
79292: PUSH
79293: LD_VAR 0 4
79297: PPUSH
79298: CALL_OW 504
79302: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79303: LD_VAR 0 5
79307: PPUSH
79308: CALL_OW 255
79312: PUSH
79313: LD_VAR 0 1
79317: EQUAL
79318: IFFALSE 79334
// begin result := un ;
79320: LD_ADDR_VAR 0 3
79324: PUSH
79325: LD_VAR 0 5
79329: ST_TO_ADDR
// exit ;
79330: POP
79331: POP
79332: GO 79338
// end ; end ;
79334: GO 79285
79336: POP
79337: POP
// end ;
79338: LD_VAR 0 3
79342: RET
// export function GetCargoBay ( units ) ; begin
79343: LD_INT 0
79345: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79346: LD_ADDR_VAR 0 2
79350: PUSH
79351: LD_VAR 0 1
79355: PPUSH
79356: LD_INT 2
79358: PUSH
79359: LD_INT 34
79361: PUSH
79362: LD_INT 12
79364: PUSH
79365: EMPTY
79366: LIST
79367: LIST
79368: PUSH
79369: LD_INT 34
79371: PUSH
79372: LD_INT 51
79374: PUSH
79375: EMPTY
79376: LIST
79377: LIST
79378: PUSH
79379: LD_INT 34
79381: PUSH
79382: LD_INT 32
79384: PUSH
79385: EMPTY
79386: LIST
79387: LIST
79388: PUSH
79389: LD_INT 34
79391: PUSH
79392: LD_INT 89
79394: PUSH
79395: EMPTY
79396: LIST
79397: LIST
79398: PUSH
79399: EMPTY
79400: LIST
79401: LIST
79402: LIST
79403: LIST
79404: LIST
79405: PPUSH
79406: CALL_OW 72
79410: ST_TO_ADDR
// end ;
79411: LD_VAR 0 2
79415: RET
// export function Negate ( value ) ; begin
79416: LD_INT 0
79418: PPUSH
// result := not value ;
79419: LD_ADDR_VAR 0 2
79423: PUSH
79424: LD_VAR 0 1
79428: NOT
79429: ST_TO_ADDR
// end ;
79430: LD_VAR 0 2
79434: RET
// export function Inc ( value ) ; begin
79435: LD_INT 0
79437: PPUSH
// result := value + 1 ;
79438: LD_ADDR_VAR 0 2
79442: PUSH
79443: LD_VAR 0 1
79447: PUSH
79448: LD_INT 1
79450: PLUS
79451: ST_TO_ADDR
// end ;
79452: LD_VAR 0 2
79456: RET
// export function Dec ( value ) ; begin
79457: LD_INT 0
79459: PPUSH
// result := value - 1 ;
79460: LD_ADDR_VAR 0 2
79464: PUSH
79465: LD_VAR 0 1
79469: PUSH
79470: LD_INT 1
79472: MINUS
79473: ST_TO_ADDR
// end ;
79474: LD_VAR 0 2
79478: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79479: LD_INT 0
79481: PPUSH
79482: PPUSH
79483: PPUSH
79484: PPUSH
79485: PPUSH
79486: PPUSH
79487: PPUSH
79488: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79489: LD_VAR 0 1
79493: PPUSH
79494: LD_VAR 0 2
79498: PPUSH
79499: CALL_OW 488
79503: NOT
79504: IFTRUE 79523
79506: PUSH
79507: LD_VAR 0 3
79511: PPUSH
79512: LD_VAR 0 4
79516: PPUSH
79517: CALL_OW 488
79521: NOT
79522: OR
79523: IFFALSE 79536
// begin result := - 1 ;
79525: LD_ADDR_VAR 0 5
79529: PUSH
79530: LD_INT 1
79532: NEG
79533: ST_TO_ADDR
// exit ;
79534: GO 79771
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79536: LD_ADDR_VAR 0 12
79540: PUSH
79541: LD_VAR 0 1
79545: PPUSH
79546: LD_VAR 0 2
79550: PPUSH
79551: LD_VAR 0 3
79555: PPUSH
79556: LD_VAR 0 4
79560: PPUSH
79561: CALL 78607 0 4
79565: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79566: LD_ADDR_VAR 0 11
79570: PUSH
79571: LD_VAR 0 1
79575: PPUSH
79576: LD_VAR 0 2
79580: PPUSH
79581: LD_VAR 0 12
79585: PUSH
79586: LD_INT 1
79588: ARRAY
79589: PPUSH
79590: LD_VAR 0 12
79594: PUSH
79595: LD_INT 2
79597: ARRAY
79598: PPUSH
79599: CALL_OW 298
79603: ST_TO_ADDR
// distance := 9999 ;
79604: LD_ADDR_VAR 0 10
79608: PUSH
79609: LD_INT 9999
79611: ST_TO_ADDR
// for i := 0 to 5 do
79612: LD_ADDR_VAR 0 6
79616: PUSH
79617: DOUBLE
79618: LD_INT 0
79620: DEC
79621: ST_TO_ADDR
79622: LD_INT 5
79624: PUSH
79625: FOR_TO
79626: IFFALSE 79769
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79628: LD_ADDR_VAR 0 7
79632: PUSH
79633: LD_VAR 0 1
79637: PPUSH
79638: LD_VAR 0 6
79642: PPUSH
79643: LD_VAR 0 11
79647: PPUSH
79648: CALL_OW 272
79652: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79653: LD_ADDR_VAR 0 8
79657: PUSH
79658: LD_VAR 0 2
79662: PPUSH
79663: LD_VAR 0 6
79667: PPUSH
79668: LD_VAR 0 11
79672: PPUSH
79673: CALL_OW 273
79677: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79678: LD_VAR 0 7
79682: PPUSH
79683: LD_VAR 0 8
79687: PPUSH
79688: CALL_OW 488
79692: NOT
79693: IFFALSE 79697
// continue ;
79695: GO 79625
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79697: LD_ADDR_VAR 0 9
79701: PUSH
79702: LD_VAR 0 12
79706: PUSH
79707: LD_INT 1
79709: ARRAY
79710: PPUSH
79711: LD_VAR 0 12
79715: PUSH
79716: LD_INT 2
79718: ARRAY
79719: PPUSH
79720: LD_VAR 0 7
79724: PPUSH
79725: LD_VAR 0 8
79729: PPUSH
79730: CALL_OW 298
79734: ST_TO_ADDR
// if tmp < distance then
79735: LD_VAR 0 9
79739: PUSH
79740: LD_VAR 0 10
79744: LESS
79745: IFFALSE 79767
// begin result := i ;
79747: LD_ADDR_VAR 0 5
79751: PUSH
79752: LD_VAR 0 6
79756: ST_TO_ADDR
// distance := tmp ;
79757: LD_ADDR_VAR 0 10
79761: PUSH
79762: LD_VAR 0 9
79766: ST_TO_ADDR
// end ; end ;
79767: GO 79625
79769: POP
79770: POP
// end ;
79771: LD_VAR 0 5
79775: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79776: LD_INT 0
79778: PPUSH
79779: PPUSH
// if not driver or not IsInUnit ( driver ) then
79780: LD_VAR 0 1
79784: NOT
79785: IFTRUE 79799
79787: PUSH
79788: LD_VAR 0 1
79792: PPUSH
79793: CALL_OW 310
79797: NOT
79798: OR
79799: IFFALSE 79803
// exit ;
79801: GO 79893
// vehicle := IsInUnit ( driver ) ;
79803: LD_ADDR_VAR 0 3
79807: PUSH
79808: LD_VAR 0 1
79812: PPUSH
79813: CALL_OW 310
79817: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79818: LD_VAR 0 1
79822: PPUSH
79823: LD_STRING \
79825: PUSH
79826: LD_INT 0
79828: PUSH
79829: LD_INT 0
79831: PUSH
79832: LD_INT 0
79834: PUSH
79835: LD_INT 0
79837: PUSH
79838: LD_INT 0
79840: PUSH
79841: LD_INT 0
79843: PUSH
79844: EMPTY
79845: LIST
79846: LIST
79847: LIST
79848: LIST
79849: LIST
79850: LIST
79851: LIST
79852: PUSH
79853: LD_STRING E
79855: PUSH
79856: LD_INT 0
79858: PUSH
79859: LD_INT 0
79861: PUSH
79862: LD_VAR 0 3
79866: PUSH
79867: LD_INT 0
79869: PUSH
79870: LD_INT 0
79872: PUSH
79873: LD_INT 0
79875: PUSH
79876: EMPTY
79877: LIST
79878: LIST
79879: LIST
79880: LIST
79881: LIST
79882: LIST
79883: LIST
79884: PUSH
79885: EMPTY
79886: LIST
79887: LIST
79888: PPUSH
79889: CALL_OW 446
// end ;
79893: LD_VAR 0 2
79897: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79898: LD_INT 0
79900: PPUSH
79901: PPUSH
// if not driver or not IsInUnit ( driver ) then
79902: LD_VAR 0 1
79906: NOT
79907: IFTRUE 79921
79909: PUSH
79910: LD_VAR 0 1
79914: PPUSH
79915: CALL_OW 310
79919: NOT
79920: OR
79921: IFFALSE 79925
// exit ;
79923: GO 80015
// vehicle := IsInUnit ( driver ) ;
79925: LD_ADDR_VAR 0 3
79929: PUSH
79930: LD_VAR 0 1
79934: PPUSH
79935: CALL_OW 310
79939: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79940: LD_VAR 0 1
79944: PPUSH
79945: LD_STRING \
79947: PUSH
79948: LD_INT 0
79950: PUSH
79951: LD_INT 0
79953: PUSH
79954: LD_INT 0
79956: PUSH
79957: LD_INT 0
79959: PUSH
79960: LD_INT 0
79962: PUSH
79963: LD_INT 0
79965: PUSH
79966: EMPTY
79967: LIST
79968: LIST
79969: LIST
79970: LIST
79971: LIST
79972: LIST
79973: LIST
79974: PUSH
79975: LD_STRING E
79977: PUSH
79978: LD_INT 0
79980: PUSH
79981: LD_INT 0
79983: PUSH
79984: LD_VAR 0 3
79988: PUSH
79989: LD_INT 0
79991: PUSH
79992: LD_INT 0
79994: PUSH
79995: LD_INT 0
79997: PUSH
79998: EMPTY
79999: LIST
80000: LIST
80001: LIST
80002: LIST
80003: LIST
80004: LIST
80005: LIST
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: PPUSH
80011: CALL_OW 447
// end ;
80015: LD_VAR 0 2
80019: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80020: LD_INT 0
80022: PPUSH
80023: PPUSH
80024: PPUSH
// tmp := [ ] ;
80025: LD_ADDR_VAR 0 5
80029: PUSH
80030: EMPTY
80031: ST_TO_ADDR
// for i in units do
80032: LD_ADDR_VAR 0 4
80036: PUSH
80037: LD_VAR 0 1
80041: PUSH
80042: FOR_IN
80043: IFFALSE 80081
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80045: LD_ADDR_VAR 0 5
80049: PUSH
80050: LD_VAR 0 5
80054: PPUSH
80055: LD_VAR 0 5
80059: PUSH
80060: LD_INT 1
80062: PLUS
80063: PPUSH
80064: LD_VAR 0 4
80068: PPUSH
80069: CALL_OW 256
80073: PPUSH
80074: CALL_OW 2
80078: ST_TO_ADDR
80079: GO 80042
80081: POP
80082: POP
// if not tmp then
80083: LD_VAR 0 5
80087: NOT
80088: IFFALSE 80092
// exit ;
80090: GO 80140
// if asc then
80092: LD_VAR 0 2
80096: IFFALSE 80120
// result := SortListByListAsc ( units , tmp ) else
80098: LD_ADDR_VAR 0 3
80102: PUSH
80103: LD_VAR 0 1
80107: PPUSH
80108: LD_VAR 0 5
80112: PPUSH
80113: CALL_OW 76
80117: ST_TO_ADDR
80118: GO 80140
// result := SortListByListDesc ( units , tmp ) ;
80120: LD_ADDR_VAR 0 3
80124: PUSH
80125: LD_VAR 0 1
80129: PPUSH
80130: LD_VAR 0 5
80134: PPUSH
80135: CALL_OW 77
80139: ST_TO_ADDR
// end ;
80140: LD_VAR 0 3
80144: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80145: LD_INT 0
80147: PPUSH
80148: PPUSH
// task := GetTaskList ( mech ) ;
80149: LD_ADDR_VAR 0 4
80153: PUSH
80154: LD_VAR 0 1
80158: PPUSH
80159: CALL_OW 437
80163: ST_TO_ADDR
// if not task then
80164: LD_VAR 0 4
80168: NOT
80169: IFFALSE 80173
// exit ;
80171: GO 80217
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80173: LD_ADDR_VAR 0 3
80177: PUSH
80178: LD_VAR 0 4
80182: PUSH
80183: LD_INT 1
80185: ARRAY
80186: PUSH
80187: LD_INT 1
80189: ARRAY
80190: PUSH
80191: LD_STRING r
80193: EQUAL
80194: IFFALSE 80216
80196: PUSH
80197: LD_VAR 0 4
80201: PUSH
80202: LD_INT 1
80204: ARRAY
80205: PUSH
80206: LD_INT 4
80208: ARRAY
80209: PUSH
80210: LD_VAR 0 2
80214: EQUAL
80215: AND
80216: ST_TO_ADDR
// end ;
80217: LD_VAR 0 3
80221: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80222: LD_INT 0
80224: PPUSH
// SetDir ( unit , d ) ;
80225: LD_VAR 0 1
80229: PPUSH
80230: LD_VAR 0 4
80234: PPUSH
80235: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
80239: LD_ADDR_VAR 0 6
80243: PUSH
80244: LD_VAR 0 1
80248: PPUSH
80249: LD_VAR 0 2
80253: PPUSH
80254: LD_VAR 0 3
80258: PPUSH
80259: LD_VAR 0 5
80263: PPUSH
80264: CALL_OW 48
80268: ST_TO_ADDR
// end ;
80269: LD_VAR 0 6
80273: RET
// export function ToNaturalNumber ( number ) ; begin
80274: LD_INT 0
80276: PPUSH
// result := number div 1 ;
80277: LD_ADDR_VAR 0 2
80281: PUSH
80282: LD_VAR 0 1
80286: PUSH
80287: LD_INT 1
80289: DIV
80290: ST_TO_ADDR
// if number < 0 then
80291: LD_VAR 0 1
80295: PUSH
80296: LD_INT 0
80298: LESS
80299: IFFALSE 80309
// result := 0 ;
80301: LD_ADDR_VAR 0 2
80305: PUSH
80306: LD_INT 0
80308: ST_TO_ADDR
// end ;
80309: LD_VAR 0 2
80313: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
80314: LD_INT 0
80316: PPUSH
80317: PPUSH
80318: PPUSH
// if not buildings then
80319: LD_VAR 0 1
80323: NOT
80324: IFFALSE 80328
// exit ;
80326: GO 80443
// tmp := [ ] ;
80328: LD_ADDR_VAR 0 5
80332: PUSH
80333: EMPTY
80334: ST_TO_ADDR
// for b in buildings do
80335: LD_ADDR_VAR 0 4
80339: PUSH
80340: LD_VAR 0 1
80344: PUSH
80345: FOR_IN
80346: IFFALSE 80384
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
80348: LD_ADDR_VAR 0 5
80352: PUSH
80353: LD_VAR 0 5
80357: PPUSH
80358: LD_VAR 0 5
80362: PUSH
80363: LD_INT 1
80365: PLUS
80366: PPUSH
80367: LD_VAR 0 4
80371: PPUSH
80372: CALL_OW 266
80376: PPUSH
80377: CALL_OW 1
80381: ST_TO_ADDR
80382: GO 80345
80384: POP
80385: POP
// if not tmp then
80386: LD_VAR 0 5
80390: NOT
80391: IFFALSE 80395
// exit ;
80393: GO 80443
// if asc then
80395: LD_VAR 0 2
80399: IFFALSE 80423
// result := SortListByListAsc ( buildings , tmp ) else
80401: LD_ADDR_VAR 0 3
80405: PUSH
80406: LD_VAR 0 1
80410: PPUSH
80411: LD_VAR 0 5
80415: PPUSH
80416: CALL_OW 76
80420: ST_TO_ADDR
80421: GO 80443
// result := SortListByListDesc ( buildings , tmp ) ;
80423: LD_ADDR_VAR 0 3
80427: PUSH
80428: LD_VAR 0 1
80432: PPUSH
80433: LD_VAR 0 5
80437: PPUSH
80438: CALL_OW 77
80442: ST_TO_ADDR
// end ;
80443: LD_VAR 0 3
80447: RET
// export function SortByClass ( units , class ) ; var un ; begin
80448: LD_INT 0
80450: PPUSH
80451: PPUSH
// if not units or not class then
80452: LD_VAR 0 1
80456: NOT
80457: IFTRUE 80466
80459: PUSH
80460: LD_VAR 0 2
80464: NOT
80465: OR
80466: IFFALSE 80470
// exit ;
80468: GO 80565
// result := [ ] ;
80470: LD_ADDR_VAR 0 3
80474: PUSH
80475: EMPTY
80476: ST_TO_ADDR
// for un in units do
80477: LD_ADDR_VAR 0 4
80481: PUSH
80482: LD_VAR 0 1
80486: PUSH
80487: FOR_IN
80488: IFFALSE 80563
// if GetClass ( un ) = class then
80490: LD_VAR 0 4
80494: PPUSH
80495: CALL_OW 257
80499: PUSH
80500: LD_VAR 0 2
80504: EQUAL
80505: IFFALSE 80532
// result := Insert ( result , 1 , un ) else
80507: LD_ADDR_VAR 0 3
80511: PUSH
80512: LD_VAR 0 3
80516: PPUSH
80517: LD_INT 1
80519: PPUSH
80520: LD_VAR 0 4
80524: PPUSH
80525: CALL_OW 2
80529: ST_TO_ADDR
80530: GO 80561
// result := Replace ( result , result + 1 , un ) ;
80532: LD_ADDR_VAR 0 3
80536: PUSH
80537: LD_VAR 0 3
80541: PPUSH
80542: LD_VAR 0 3
80546: PUSH
80547: LD_INT 1
80549: PLUS
80550: PPUSH
80551: LD_VAR 0 4
80555: PPUSH
80556: CALL_OW 1
80560: ST_TO_ADDR
80561: GO 80487
80563: POP
80564: POP
// end ;
80565: LD_VAR 0 3
80569: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80570: LD_INT 0
80572: PPUSH
80573: PPUSH
80574: PPUSH
80575: PPUSH
80576: PPUSH
80577: PPUSH
80578: PPUSH
// result := [ ] ;
80579: LD_ADDR_VAR 0 4
80583: PUSH
80584: EMPTY
80585: ST_TO_ADDR
// if x - r < 0 then
80586: LD_VAR 0 1
80590: PUSH
80591: LD_VAR 0 3
80595: MINUS
80596: PUSH
80597: LD_INT 0
80599: LESS
80600: IFFALSE 80612
// min_x := 0 else
80602: LD_ADDR_VAR 0 8
80606: PUSH
80607: LD_INT 0
80609: ST_TO_ADDR
80610: GO 80628
// min_x := x - r ;
80612: LD_ADDR_VAR 0 8
80616: PUSH
80617: LD_VAR 0 1
80621: PUSH
80622: LD_VAR 0 3
80626: MINUS
80627: ST_TO_ADDR
// if y - r < 0 then
80628: LD_VAR 0 2
80632: PUSH
80633: LD_VAR 0 3
80637: MINUS
80638: PUSH
80639: LD_INT 0
80641: LESS
80642: IFFALSE 80654
// min_y := 0 else
80644: LD_ADDR_VAR 0 7
80648: PUSH
80649: LD_INT 0
80651: ST_TO_ADDR
80652: GO 80670
// min_y := y - r ;
80654: LD_ADDR_VAR 0 7
80658: PUSH
80659: LD_VAR 0 2
80663: PUSH
80664: LD_VAR 0 3
80668: MINUS
80669: ST_TO_ADDR
// max_x := x + r ;
80670: LD_ADDR_VAR 0 9
80674: PUSH
80675: LD_VAR 0 1
80679: PUSH
80680: LD_VAR 0 3
80684: PLUS
80685: ST_TO_ADDR
// max_y := y + r ;
80686: LD_ADDR_VAR 0 10
80690: PUSH
80691: LD_VAR 0 2
80695: PUSH
80696: LD_VAR 0 3
80700: PLUS
80701: ST_TO_ADDR
// for _x = min_x to max_x do
80702: LD_ADDR_VAR 0 5
80706: PUSH
80707: DOUBLE
80708: LD_VAR 0 8
80712: DEC
80713: ST_TO_ADDR
80714: LD_VAR 0 9
80718: PUSH
80719: FOR_TO
80720: IFFALSE 80821
// for _y = min_y to max_y do
80722: LD_ADDR_VAR 0 6
80726: PUSH
80727: DOUBLE
80728: LD_VAR 0 7
80732: DEC
80733: ST_TO_ADDR
80734: LD_VAR 0 10
80738: PUSH
80739: FOR_TO
80740: IFFALSE 80817
// begin if not ValidHex ( _x , _y ) then
80742: LD_VAR 0 5
80746: PPUSH
80747: LD_VAR 0 6
80751: PPUSH
80752: CALL_OW 488
80756: NOT
80757: IFFALSE 80761
// continue ;
80759: GO 80739
// if GetResourceTypeXY ( _x , _y ) then
80761: LD_VAR 0 5
80765: PPUSH
80766: LD_VAR 0 6
80770: PPUSH
80771: CALL_OW 283
80775: IFFALSE 80815
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80777: LD_ADDR_VAR 0 4
80781: PUSH
80782: LD_VAR 0 4
80786: PPUSH
80787: LD_VAR 0 4
80791: PUSH
80792: LD_INT 1
80794: PLUS
80795: PPUSH
80796: LD_VAR 0 5
80800: PUSH
80801: LD_VAR 0 6
80805: PUSH
80806: EMPTY
80807: LIST
80808: LIST
80809: PPUSH
80810: CALL_OW 1
80814: ST_TO_ADDR
// end ;
80815: GO 80739
80817: POP
80818: POP
80819: GO 80719
80821: POP
80822: POP
// end ;
80823: LD_VAR 0 4
80827: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80828: LD_INT 0
80830: PPUSH
80831: PPUSH
80832: PPUSH
80833: PPUSH
80834: PPUSH
80835: PPUSH
80836: PPUSH
80837: PPUSH
// if not units then
80838: LD_VAR 0 1
80842: NOT
80843: IFFALSE 80847
// exit ;
80845: GO 81379
// result := UnitFilter ( units , [ f_ok ] ) ;
80847: LD_ADDR_VAR 0 3
80851: PUSH
80852: LD_VAR 0 1
80856: PPUSH
80857: LD_INT 50
80859: PUSH
80860: EMPTY
80861: LIST
80862: PPUSH
80863: CALL_OW 72
80867: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80868: LD_ADDR_VAR 0 8
80872: PUSH
80873: LD_VAR 0 1
80877: PUSH
80878: LD_INT 1
80880: ARRAY
80881: PPUSH
80882: CALL_OW 255
80886: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80887: LD_ADDR_VAR 0 10
80891: PUSH
80892: LD_INT 29
80894: PUSH
80895: LD_INT 91
80897: PUSH
80898: LD_INT 49
80900: PUSH
80901: EMPTY
80902: LIST
80903: LIST
80904: LIST
80905: ST_TO_ADDR
// if not result then
80906: LD_VAR 0 3
80910: NOT
80911: IFFALSE 80915
// exit ;
80913: GO 81379
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80915: LD_ADDR_VAR 0 5
80919: PUSH
80920: LD_INT 81
80922: PUSH
80923: LD_VAR 0 8
80927: PUSH
80928: EMPTY
80929: LIST
80930: LIST
80931: PPUSH
80932: CALL_OW 69
80936: ST_TO_ADDR
// for i in result do
80937: LD_ADDR_VAR 0 4
80941: PUSH
80942: LD_VAR 0 3
80946: PUSH
80947: FOR_IN
80948: IFFALSE 81377
// begin tag := GetTag ( i ) + 1 ;
80950: LD_ADDR_VAR 0 9
80954: PUSH
80955: LD_VAR 0 4
80959: PPUSH
80960: CALL_OW 110
80964: PUSH
80965: LD_INT 1
80967: PLUS
80968: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
80969: LD_ADDR_VAR 0 7
80973: PUSH
80974: LD_VAR 0 4
80978: PPUSH
80979: CALL_OW 250
80983: PPUSH
80984: LD_VAR 0 4
80988: PPUSH
80989: CALL_OW 251
80993: PPUSH
80994: LD_INT 4
80996: PPUSH
80997: CALL 80570 0 3
81001: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81002: LD_VAR 0 4
81006: PPUSH
81007: CALL_OW 247
81011: PUSH
81012: LD_INT 2
81014: EQUAL
81015: IFFALSE 81027
81017: PUSH
81018: LD_VAR 0 7
81022: PUSH
81023: LD_INT 2
81025: GREATER
81026: AND
81027: IFFALSE 81047
81029: PUSH
81030: LD_VAR 0 4
81034: PPUSH
81035: CALL_OW 264
81039: PUSH
81040: LD_VAR 0 10
81044: IN
81045: NOT
81046: AND
81047: IFFALSE 81086
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81049: LD_VAR 0 4
81053: PPUSH
81054: LD_VAR 0 7
81058: PUSH
81059: LD_INT 1
81061: ARRAY
81062: PUSH
81063: LD_INT 1
81065: ARRAY
81066: PPUSH
81067: LD_VAR 0 7
81071: PUSH
81072: LD_INT 1
81074: ARRAY
81075: PUSH
81076: LD_INT 2
81078: ARRAY
81079: PPUSH
81080: CALL_OW 116
81084: GO 81375
// if path > tag then
81086: LD_VAR 0 2
81090: PUSH
81091: LD_VAR 0 9
81095: GREATER
81096: IFFALSE 81304
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81098: LD_ADDR_VAR 0 6
81102: PUSH
81103: LD_VAR 0 5
81107: PPUSH
81108: LD_INT 91
81110: PUSH
81111: LD_VAR 0 4
81115: PUSH
81116: LD_INT 8
81118: PUSH
81119: EMPTY
81120: LIST
81121: LIST
81122: LIST
81123: PPUSH
81124: CALL_OW 72
81128: ST_TO_ADDR
// if nearEnemy then
81129: LD_VAR 0 6
81133: IFFALSE 81202
// begin if GetWeapon ( i ) = ru_time_lapser then
81135: LD_VAR 0 4
81139: PPUSH
81140: CALL_OW 264
81144: PUSH
81145: LD_INT 49
81147: EQUAL
81148: IFFALSE 81176
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81150: LD_VAR 0 4
81154: PPUSH
81155: LD_VAR 0 6
81159: PPUSH
81160: LD_VAR 0 4
81164: PPUSH
81165: CALL_OW 74
81169: PPUSH
81170: CALL_OW 112
81174: GO 81200
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81176: LD_VAR 0 4
81180: PPUSH
81181: LD_VAR 0 6
81185: PPUSH
81186: LD_VAR 0 4
81190: PPUSH
81191: CALL_OW 74
81195: PPUSH
81196: CALL 82460 0 2
// end else
81200: GO 81302
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81202: LD_VAR 0 4
81206: PPUSH
81207: LD_VAR 0 2
81211: PUSH
81212: LD_VAR 0 9
81216: ARRAY
81217: PUSH
81218: LD_INT 1
81220: ARRAY
81221: PPUSH
81222: LD_VAR 0 2
81226: PUSH
81227: LD_VAR 0 9
81231: ARRAY
81232: PUSH
81233: LD_INT 2
81235: ARRAY
81236: PPUSH
81237: CALL_OW 297
81241: PUSH
81242: LD_INT 6
81244: GREATER
81245: IFFALSE 81288
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81247: LD_VAR 0 4
81251: PPUSH
81252: LD_VAR 0 2
81256: PUSH
81257: LD_VAR 0 9
81261: ARRAY
81262: PUSH
81263: LD_INT 1
81265: ARRAY
81266: PPUSH
81267: LD_VAR 0 2
81271: PUSH
81272: LD_VAR 0 9
81276: ARRAY
81277: PUSH
81278: LD_INT 2
81280: ARRAY
81281: PPUSH
81282: CALL_OW 114
81286: GO 81302
// SetTag ( i , tag ) ;
81288: LD_VAR 0 4
81292: PPUSH
81293: LD_VAR 0 9
81297: PPUSH
81298: CALL_OW 109
// end else
81302: GO 81375
// if enemy then
81304: LD_VAR 0 5
81308: IFFALSE 81375
// begin if GetWeapon ( i ) = ru_time_lapser then
81310: LD_VAR 0 4
81314: PPUSH
81315: CALL_OW 264
81319: PUSH
81320: LD_INT 49
81322: EQUAL
81323: IFFALSE 81351
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81325: LD_VAR 0 4
81329: PPUSH
81330: LD_VAR 0 5
81334: PPUSH
81335: LD_VAR 0 4
81339: PPUSH
81340: CALL_OW 74
81344: PPUSH
81345: CALL_OW 112
81349: GO 81375
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81351: LD_VAR 0 4
81355: PPUSH
81356: LD_VAR 0 5
81360: PPUSH
81361: LD_VAR 0 4
81365: PPUSH
81366: CALL_OW 74
81370: PPUSH
81371: CALL 82460 0 2
// end ; end ;
81375: GO 80947
81377: POP
81378: POP
// end ;
81379: LD_VAR 0 3
81383: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81384: LD_INT 0
81386: PPUSH
81387: PPUSH
81388: PPUSH
// if not unit or IsInUnit ( unit ) then
81389: LD_VAR 0 1
81393: NOT
81394: IFTRUE 81407
81396: PUSH
81397: LD_VAR 0 1
81401: PPUSH
81402: CALL_OW 310
81406: OR
81407: IFFALSE 81411
// exit ;
81409: GO 81502
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81411: LD_ADDR_VAR 0 4
81415: PUSH
81416: LD_VAR 0 1
81420: PPUSH
81421: CALL_OW 250
81425: PPUSH
81426: LD_VAR 0 2
81430: PPUSH
81431: LD_INT 1
81433: PPUSH
81434: CALL_OW 272
81438: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81439: LD_ADDR_VAR 0 5
81443: PUSH
81444: LD_VAR 0 1
81448: PPUSH
81449: CALL_OW 251
81453: PPUSH
81454: LD_VAR 0 2
81458: PPUSH
81459: LD_INT 1
81461: PPUSH
81462: CALL_OW 273
81466: ST_TO_ADDR
// if ValidHex ( x , y ) then
81467: LD_VAR 0 4
81471: PPUSH
81472: LD_VAR 0 5
81476: PPUSH
81477: CALL_OW 488
81481: IFFALSE 81502
// ComTurnXY ( unit , x , y ) ;
81483: LD_VAR 0 1
81487: PPUSH
81488: LD_VAR 0 4
81492: PPUSH
81493: LD_VAR 0 5
81497: PPUSH
81498: CALL_OW 118
// end ;
81502: LD_VAR 0 3
81506: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81507: LD_INT 0
81509: PPUSH
81510: PPUSH
// result := false ;
81511: LD_ADDR_VAR 0 3
81515: PUSH
81516: LD_INT 0
81518: ST_TO_ADDR
// if not units then
81519: LD_VAR 0 2
81523: NOT
81524: IFFALSE 81528
// exit ;
81526: GO 81573
// for i in units do
81528: LD_ADDR_VAR 0 4
81532: PUSH
81533: LD_VAR 0 2
81537: PUSH
81538: FOR_IN
81539: IFFALSE 81571
// if See ( side , i ) then
81541: LD_VAR 0 1
81545: PPUSH
81546: LD_VAR 0 4
81550: PPUSH
81551: CALL_OW 292
81555: IFFALSE 81569
// begin result := true ;
81557: LD_ADDR_VAR 0 3
81561: PUSH
81562: LD_INT 1
81564: ST_TO_ADDR
// exit ;
81565: POP
81566: POP
81567: GO 81573
// end ;
81569: GO 81538
81571: POP
81572: POP
// end ;
81573: LD_VAR 0 3
81577: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81578: LD_INT 0
81580: PPUSH
81581: PPUSH
81582: PPUSH
81583: PPUSH
// if not unit or not points then
81584: LD_VAR 0 1
81588: NOT
81589: IFTRUE 81598
81591: PUSH
81592: LD_VAR 0 2
81596: NOT
81597: OR
81598: IFFALSE 81602
// exit ;
81600: GO 81692
// dist := 99999 ;
81602: LD_ADDR_VAR 0 5
81606: PUSH
81607: LD_INT 99999
81609: ST_TO_ADDR
// for i in points do
81610: LD_ADDR_VAR 0 4
81614: PUSH
81615: LD_VAR 0 2
81619: PUSH
81620: FOR_IN
81621: IFFALSE 81690
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81623: LD_ADDR_VAR 0 6
81627: PUSH
81628: LD_VAR 0 1
81632: PPUSH
81633: LD_VAR 0 4
81637: PUSH
81638: LD_INT 1
81640: ARRAY
81641: PPUSH
81642: LD_VAR 0 4
81646: PUSH
81647: LD_INT 2
81649: ARRAY
81650: PPUSH
81651: CALL_OW 297
81655: ST_TO_ADDR
// if tmpDist < dist then
81656: LD_VAR 0 6
81660: PUSH
81661: LD_VAR 0 5
81665: LESS
81666: IFFALSE 81688
// begin result := i ;
81668: LD_ADDR_VAR 0 3
81672: PUSH
81673: LD_VAR 0 4
81677: ST_TO_ADDR
// dist := tmpDist ;
81678: LD_ADDR_VAR 0 5
81682: PUSH
81683: LD_VAR 0 6
81687: ST_TO_ADDR
// end ; end ;
81688: GO 81620
81690: POP
81691: POP
// end ;
81692: LD_VAR 0 3
81696: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81697: LD_INT 0
81699: PPUSH
// uc_side := side ;
81700: LD_ADDR_OWVAR 20
81704: PUSH
81705: LD_VAR 0 1
81709: ST_TO_ADDR
// uc_nation := 3 ;
81710: LD_ADDR_OWVAR 21
81714: PUSH
81715: LD_INT 3
81717: ST_TO_ADDR
// vc_chassis := 25 ;
81718: LD_ADDR_OWVAR 37
81722: PUSH
81723: LD_INT 25
81725: ST_TO_ADDR
// vc_engine := engine_siberite ;
81726: LD_ADDR_OWVAR 39
81730: PUSH
81731: LD_INT 3
81733: ST_TO_ADDR
// vc_control := control_computer ;
81734: LD_ADDR_OWVAR 38
81738: PUSH
81739: LD_INT 3
81741: ST_TO_ADDR
// vc_weapon := 59 ;
81742: LD_ADDR_OWVAR 40
81746: PUSH
81747: LD_INT 59
81749: ST_TO_ADDR
// result := CreateVehicle ;
81750: LD_ADDR_VAR 0 5
81754: PUSH
81755: CALL_OW 45
81759: ST_TO_ADDR
// SetDir ( result , d ) ;
81760: LD_VAR 0 5
81764: PPUSH
81765: LD_VAR 0 4
81769: PPUSH
81770: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81774: LD_VAR 0 5
81778: PPUSH
81779: LD_VAR 0 2
81783: PPUSH
81784: LD_VAR 0 3
81788: PPUSH
81789: LD_INT 0
81791: PPUSH
81792: CALL_OW 48
// end ;
81796: LD_VAR 0 5
81800: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81801: LD_INT 0
81803: PPUSH
81804: PPUSH
81805: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81806: LD_ADDR_VAR 0 2
81810: PUSH
81811: LD_INT 0
81813: PUSH
81814: LD_INT 0
81816: PUSH
81817: LD_INT 0
81819: PUSH
81820: LD_INT 0
81822: PUSH
81823: EMPTY
81824: LIST
81825: LIST
81826: LIST
81827: LIST
81828: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81829: LD_VAR 0 1
81833: NOT
81834: IFTRUE 81867
81836: PUSH
81837: LD_VAR 0 1
81841: PPUSH
81842: CALL_OW 264
81846: PUSH
81847: LD_INT 12
81849: PUSH
81850: LD_INT 51
81852: PUSH
81853: LD_INT 32
81855: PUSH
81856: LD_INT 89
81858: PUSH
81859: EMPTY
81860: LIST
81861: LIST
81862: LIST
81863: LIST
81864: IN
81865: NOT
81866: OR
81867: IFFALSE 81871
// exit ;
81869: GO 81969
// for i := 1 to 3 do
81871: LD_ADDR_VAR 0 3
81875: PUSH
81876: DOUBLE
81877: LD_INT 1
81879: DEC
81880: ST_TO_ADDR
81881: LD_INT 3
81883: PUSH
81884: FOR_TO
81885: IFFALSE 81967
// begin tmp := GetCargo ( cargo , i ) ;
81887: LD_ADDR_VAR 0 4
81891: PUSH
81892: LD_VAR 0 1
81896: PPUSH
81897: LD_VAR 0 3
81901: PPUSH
81902: CALL_OW 289
81906: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81907: LD_ADDR_VAR 0 2
81911: PUSH
81912: LD_VAR 0 2
81916: PPUSH
81917: LD_VAR 0 3
81921: PPUSH
81922: LD_VAR 0 4
81926: PPUSH
81927: CALL_OW 1
81931: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81932: LD_ADDR_VAR 0 2
81936: PUSH
81937: LD_VAR 0 2
81941: PPUSH
81942: LD_INT 4
81944: PPUSH
81945: LD_VAR 0 2
81949: PUSH
81950: LD_INT 4
81952: ARRAY
81953: PUSH
81954: LD_VAR 0 4
81958: PLUS
81959: PPUSH
81960: CALL_OW 1
81964: ST_TO_ADDR
// end ;
81965: GO 81884
81967: POP
81968: POP
// end ;
81969: LD_VAR 0 2
81973: RET
// export function Length ( array ) ; begin
81974: LD_INT 0
81976: PPUSH
// result := array + 0 ;
81977: LD_ADDR_VAR 0 2
81981: PUSH
81982: LD_VAR 0 1
81986: PUSH
81987: LD_INT 0
81989: PLUS
81990: ST_TO_ADDR
// end ;
81991: LD_VAR 0 2
81995: RET
// export function PrepareArray ( array ) ; begin
81996: LD_INT 0
81998: PPUSH
// result := array diff 0 ;
81999: LD_ADDR_VAR 0 2
82003: PUSH
82004: LD_VAR 0 1
82008: PUSH
82009: LD_INT 0
82011: DIFF
82012: ST_TO_ADDR
// if not result [ 1 ] then
82013: LD_VAR 0 2
82017: PUSH
82018: LD_INT 1
82020: ARRAY
82021: NOT
82022: IFFALSE 82042
// result := Delete ( result , 1 ) ;
82024: LD_ADDR_VAR 0 2
82028: PUSH
82029: LD_VAR 0 2
82033: PPUSH
82034: LD_INT 1
82036: PPUSH
82037: CALL_OW 3
82041: ST_TO_ADDR
// end ;
82042: LD_VAR 0 2
82046: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82047: LD_INT 0
82049: PPUSH
82050: PPUSH
82051: PPUSH
82052: PPUSH
// sibRocketRange := 25 ;
82053: LD_ADDR_VAR 0 6
82057: PUSH
82058: LD_INT 25
82060: ST_TO_ADDR
// result := false ;
82061: LD_ADDR_VAR 0 4
82065: PUSH
82066: LD_INT 0
82068: ST_TO_ADDR
// for i := 0 to 5 do
82069: LD_ADDR_VAR 0 5
82073: PUSH
82074: DOUBLE
82075: LD_INT 0
82077: DEC
82078: ST_TO_ADDR
82079: LD_INT 5
82081: PUSH
82082: FOR_TO
82083: IFFALSE 82150
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82085: LD_VAR 0 1
82089: PPUSH
82090: LD_VAR 0 5
82094: PPUSH
82095: LD_VAR 0 6
82099: PPUSH
82100: CALL_OW 272
82104: PPUSH
82105: LD_VAR 0 2
82109: PPUSH
82110: LD_VAR 0 5
82114: PPUSH
82115: LD_VAR 0 6
82119: PPUSH
82120: CALL_OW 273
82124: PPUSH
82125: LD_VAR 0 3
82129: PPUSH
82130: CALL_OW 309
82134: IFFALSE 82148
// begin result := true ;
82136: LD_ADDR_VAR 0 4
82140: PUSH
82141: LD_INT 1
82143: ST_TO_ADDR
// exit ;
82144: POP
82145: POP
82146: GO 82152
// end ;
82148: GO 82082
82150: POP
82151: POP
// end ;
82152: LD_VAR 0 4
82156: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82157: LD_INT 0
82159: PPUSH
82160: PPUSH
82161: PPUSH
// if btype = b_depot then
82162: LD_VAR 0 2
82166: PUSH
82167: LD_INT 0
82169: EQUAL
82170: IFFALSE 82182
// begin result := true ;
82172: LD_ADDR_VAR 0 3
82176: PUSH
82177: LD_INT 1
82179: ST_TO_ADDR
// exit ;
82180: GO 82302
// end ; pom := GetBase ( depot ) ;
82182: LD_ADDR_VAR 0 4
82186: PUSH
82187: LD_VAR 0 1
82191: PPUSH
82192: CALL_OW 274
82196: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82197: LD_ADDR_VAR 0 5
82201: PUSH
82202: LD_VAR 0 2
82206: PPUSH
82207: LD_VAR 0 1
82211: PPUSH
82212: CALL_OW 248
82216: PPUSH
82217: CALL_OW 450
82221: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82222: LD_ADDR_VAR 0 3
82226: PUSH
82227: LD_VAR 0 4
82231: PPUSH
82232: LD_INT 1
82234: PPUSH
82235: CALL_OW 275
82239: PUSH
82240: LD_VAR 0 5
82244: PUSH
82245: LD_INT 1
82247: ARRAY
82248: GREATEREQUAL
82249: IFFALSE 82275
82251: PUSH
82252: LD_VAR 0 4
82256: PPUSH
82257: LD_INT 2
82259: PPUSH
82260: CALL_OW 275
82264: PUSH
82265: LD_VAR 0 5
82269: PUSH
82270: LD_INT 2
82272: ARRAY
82273: GREATEREQUAL
82274: AND
82275: IFFALSE 82301
82277: PUSH
82278: LD_VAR 0 4
82282: PPUSH
82283: LD_INT 3
82285: PPUSH
82286: CALL_OW 275
82290: PUSH
82291: LD_VAR 0 5
82295: PUSH
82296: LD_INT 3
82298: ARRAY
82299: GREATEREQUAL
82300: AND
82301: ST_TO_ADDR
// end ;
82302: LD_VAR 0 3
82306: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82307: LD_INT 0
82309: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82310: LD_VAR 0 1
82314: PPUSH
82315: LD_VAR 0 2
82319: PPUSH
82320: LD_INT 0
82322: PPUSH
82323: LD_INT 0
82325: PPUSH
82326: LD_INT 1
82328: PPUSH
82329: LD_INT 0
82331: PPUSH
82332: CALL_OW 587
// end ;
82336: LD_VAR 0 3
82340: RET
// export function CenterOnNow ( unit ) ; begin
82341: LD_INT 0
82343: PPUSH
// result := IsInUnit ( unit ) ;
82344: LD_ADDR_VAR 0 2
82348: PUSH
82349: LD_VAR 0 1
82353: PPUSH
82354: CALL_OW 310
82358: ST_TO_ADDR
// if not result then
82359: LD_VAR 0 2
82363: NOT
82364: IFFALSE 82376
// result := unit ;
82366: LD_ADDR_VAR 0 2
82370: PUSH
82371: LD_VAR 0 1
82375: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82376: LD_VAR 0 1
82380: PPUSH
82381: CALL_OW 87
// end ;
82385: LD_VAR 0 2
82389: RET
// export function ComMoveHex ( unit , hex ) ; begin
82390: LD_INT 0
82392: PPUSH
// if not hex then
82393: LD_VAR 0 2
82397: NOT
82398: IFFALSE 82402
// exit ;
82400: GO 82455
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82402: LD_VAR 0 2
82406: PUSH
82407: LD_INT 1
82409: ARRAY
82410: PPUSH
82411: LD_VAR 0 2
82415: PUSH
82416: LD_INT 2
82418: ARRAY
82419: PPUSH
82420: CALL_OW 428
82424: IFFALSE 82428
// exit ;
82426: GO 82455
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82428: LD_VAR 0 1
82432: PPUSH
82433: LD_VAR 0 2
82437: PUSH
82438: LD_INT 1
82440: ARRAY
82441: PPUSH
82442: LD_VAR 0 2
82446: PUSH
82447: LD_INT 2
82449: ARRAY
82450: PPUSH
82451: CALL_OW 111
// end ;
82455: LD_VAR 0 3
82459: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82460: LD_INT 0
82462: PPUSH
82463: PPUSH
82464: PPUSH
// if not unit or not enemy then
82465: LD_VAR 0 1
82469: NOT
82470: IFTRUE 82479
82472: PUSH
82473: LD_VAR 0 2
82477: NOT
82478: OR
82479: IFFALSE 82483
// exit ;
82481: GO 82609
// x := GetX ( enemy ) ;
82483: LD_ADDR_VAR 0 4
82487: PUSH
82488: LD_VAR 0 2
82492: PPUSH
82493: CALL_OW 250
82497: ST_TO_ADDR
// y := GetY ( enemy ) ;
82498: LD_ADDR_VAR 0 5
82502: PUSH
82503: LD_VAR 0 2
82507: PPUSH
82508: CALL_OW 251
82512: ST_TO_ADDR
// if ValidHex ( x , y ) then
82513: LD_VAR 0 4
82517: PPUSH
82518: LD_VAR 0 5
82522: PPUSH
82523: CALL_OW 488
82527: IFFALSE 82609
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82529: LD_VAR 0 2
82533: PPUSH
82534: CALL_OW 247
82538: PUSH
82539: LD_INT 3
82541: PUSH
82542: LD_INT 2
82544: PUSH
82545: EMPTY
82546: LIST
82547: LIST
82548: IN
82549: IFTRUE 82572
82551: PUSH
82552: LD_VAR 0 1
82556: PPUSH
82557: CALL_OW 255
82561: PPUSH
82562: LD_VAR 0 2
82566: PPUSH
82567: CALL_OW 292
82571: OR
82572: IFFALSE 82590
// ComAttackUnit ( unit , enemy ) else
82574: LD_VAR 0 1
82578: PPUSH
82579: LD_VAR 0 2
82583: PPUSH
82584: CALL_OW 115
82588: GO 82609
// ComAgressiveMove ( unit , x , y ) ;
82590: LD_VAR 0 1
82594: PPUSH
82595: LD_VAR 0 4
82599: PPUSH
82600: LD_VAR 0 5
82604: PPUSH
82605: CALL_OW 114
// end ;
82609: LD_VAR 0 3
82613: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82614: LD_INT 0
82616: PPUSH
82617: PPUSH
82618: PPUSH
// list := AreaToList ( area , 0 ) ;
82619: LD_ADDR_VAR 0 5
82623: PUSH
82624: LD_VAR 0 1
82628: PPUSH
82629: LD_INT 0
82631: PPUSH
82632: CALL_OW 517
82636: ST_TO_ADDR
// if not list then
82637: LD_VAR 0 5
82641: NOT
82642: IFFALSE 82646
// exit ;
82644: GO 82776
// if all then
82646: LD_VAR 0 2
82650: IFFALSE 82738
// begin for i := 1 to list [ 1 ] do
82652: LD_ADDR_VAR 0 4
82656: PUSH
82657: DOUBLE
82658: LD_INT 1
82660: DEC
82661: ST_TO_ADDR
82662: LD_VAR 0 5
82666: PUSH
82667: LD_INT 1
82669: ARRAY
82670: PUSH
82671: FOR_TO
82672: IFFALSE 82734
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82674: LD_ADDR_VAR 0 3
82678: PUSH
82679: LD_VAR 0 3
82683: PPUSH
82684: LD_VAR 0 3
82688: PUSH
82689: LD_INT 1
82691: PLUS
82692: PPUSH
82693: LD_VAR 0 5
82697: PUSH
82698: LD_INT 1
82700: ARRAY
82701: PUSH
82702: LD_VAR 0 4
82706: ARRAY
82707: PUSH
82708: LD_VAR 0 5
82712: PUSH
82713: LD_INT 2
82715: ARRAY
82716: PUSH
82717: LD_VAR 0 4
82721: ARRAY
82722: PUSH
82723: EMPTY
82724: LIST
82725: LIST
82726: PPUSH
82727: CALL_OW 1
82731: ST_TO_ADDR
82732: GO 82671
82734: POP
82735: POP
// exit ;
82736: GO 82776
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82738: LD_ADDR_VAR 0 3
82742: PUSH
82743: LD_VAR 0 5
82747: PUSH
82748: LD_INT 1
82750: ARRAY
82751: PUSH
82752: LD_INT 1
82754: ARRAY
82755: PUSH
82756: LD_VAR 0 5
82760: PUSH
82761: LD_INT 2
82763: ARRAY
82764: PUSH
82765: LD_INT 1
82767: ARRAY
82768: PUSH
82769: EMPTY
82770: LIST
82771: LIST
82772: PUSH
82773: EMPTY
82774: LIST
82775: ST_TO_ADDR
// end ;
82776: LD_VAR 0 3
82780: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82781: LD_INT 0
82783: PPUSH
82784: PPUSH
// list := AreaToList ( area , 0 ) ;
82785: LD_ADDR_VAR 0 4
82789: PUSH
82790: LD_VAR 0 1
82794: PPUSH
82795: LD_INT 0
82797: PPUSH
82798: CALL_OW 517
82802: ST_TO_ADDR
// if not list then
82803: LD_VAR 0 4
82807: NOT
82808: IFFALSE 82812
// exit ;
82810: GO 82853
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82812: LD_ADDR_VAR 0 3
82816: PUSH
82817: LD_VAR 0 4
82821: PUSH
82822: LD_INT 1
82824: ARRAY
82825: PUSH
82826: LD_INT 1
82828: ARRAY
82829: PUSH
82830: LD_VAR 0 4
82834: PUSH
82835: LD_INT 2
82837: ARRAY
82838: PUSH
82839: LD_INT 1
82841: ARRAY
82842: PUSH
82843: LD_VAR 0 2
82847: PUSH
82848: EMPTY
82849: LIST
82850: LIST
82851: LIST
82852: ST_TO_ADDR
// end ;
82853: LD_VAR 0 3
82857: RET
// export function First ( array ) ; begin
82858: LD_INT 0
82860: PPUSH
// if not array then
82861: LD_VAR 0 1
82865: NOT
82866: IFFALSE 82870
// exit ;
82868: GO 82884
// result := array [ 1 ] ;
82870: LD_ADDR_VAR 0 2
82874: PUSH
82875: LD_VAR 0 1
82879: PUSH
82880: LD_INT 1
82882: ARRAY
82883: ST_TO_ADDR
// end ;
82884: LD_VAR 0 2
82888: RET
// export function Last ( array ) ; begin
82889: LD_INT 0
82891: PPUSH
// if not array then
82892: LD_VAR 0 1
82896: NOT
82897: IFFALSE 82901
// exit ;
82899: GO 82917
// result := array [ array ] ;
82901: LD_ADDR_VAR 0 2
82905: PUSH
82906: LD_VAR 0 1
82910: PUSH
82911: LD_VAR 0 1
82915: ARRAY
82916: ST_TO_ADDR
// end ;
82917: LD_VAR 0 2
82921: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
82922: LD_INT 0
82924: PPUSH
82925: PPUSH
// result := [ ] ;
82926: LD_ADDR_VAR 0 5
82930: PUSH
82931: EMPTY
82932: ST_TO_ADDR
// if not array then
82933: LD_VAR 0 1
82937: NOT
82938: IFFALSE 82942
// exit ;
82940: GO 83054
// for i := 1 to array do
82942: LD_ADDR_VAR 0 6
82946: PUSH
82947: DOUBLE
82948: LD_INT 1
82950: DEC
82951: ST_TO_ADDR
82952: LD_VAR 0 1
82956: PUSH
82957: FOR_TO
82958: IFFALSE 83052
// if array [ i ] [ index ] = value then
82960: LD_VAR 0 1
82964: PUSH
82965: LD_VAR 0 6
82969: ARRAY
82970: PUSH
82971: LD_VAR 0 2
82975: ARRAY
82976: PUSH
82977: LD_VAR 0 3
82981: EQUAL
82982: IFFALSE 83050
// begin if indexColumn then
82984: LD_VAR 0 4
82988: IFFALSE 83024
// result := Join ( result , array [ i ] [ indexColumn ] ) else
82990: LD_ADDR_VAR 0 5
82994: PUSH
82995: LD_VAR 0 5
82999: PPUSH
83000: LD_VAR 0 1
83004: PUSH
83005: LD_VAR 0 6
83009: ARRAY
83010: PUSH
83011: LD_VAR 0 4
83015: ARRAY
83016: PPUSH
83017: CALL 78062 0 2
83021: ST_TO_ADDR
83022: GO 83050
// result := Join ( result , array [ i ] ) ;
83024: LD_ADDR_VAR 0 5
83028: PUSH
83029: LD_VAR 0 5
83033: PPUSH
83034: LD_VAR 0 1
83038: PUSH
83039: LD_VAR 0 6
83043: ARRAY
83044: PPUSH
83045: CALL 78062 0 2
83049: ST_TO_ADDR
// end ;
83050: GO 82957
83052: POP
83053: POP
// end ;
83054: LD_VAR 0 5
83058: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83059: LD_INT 0
83061: PPUSH
// if not vehicles or not parkingPoint then
83062: LD_VAR 0 1
83066: NOT
83067: IFTRUE 83076
83069: PUSH
83070: LD_VAR 0 2
83074: NOT
83075: OR
83076: IFFALSE 83080
// exit ;
83078: GO 83178
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83080: LD_ADDR_VAR 0 1
83084: PUSH
83085: LD_VAR 0 1
83089: PPUSH
83090: LD_INT 50
83092: PUSH
83093: EMPTY
83094: LIST
83095: PUSH
83096: LD_INT 3
83098: PUSH
83099: LD_INT 92
83101: PUSH
83102: LD_VAR 0 2
83106: PUSH
83107: LD_INT 1
83109: ARRAY
83110: PUSH
83111: LD_VAR 0 2
83115: PUSH
83116: LD_INT 2
83118: ARRAY
83119: PUSH
83120: LD_INT 8
83122: PUSH
83123: EMPTY
83124: LIST
83125: LIST
83126: LIST
83127: LIST
83128: PUSH
83129: EMPTY
83130: LIST
83131: LIST
83132: PUSH
83133: EMPTY
83134: LIST
83135: LIST
83136: PPUSH
83137: CALL_OW 72
83141: ST_TO_ADDR
// if not vehicles then
83142: LD_VAR 0 1
83146: NOT
83147: IFFALSE 83151
// exit ;
83149: GO 83178
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83151: LD_VAR 0 1
83155: PPUSH
83156: LD_VAR 0 2
83160: PUSH
83161: LD_INT 1
83163: ARRAY
83164: PPUSH
83165: LD_VAR 0 2
83169: PUSH
83170: LD_INT 2
83172: ARRAY
83173: PPUSH
83174: CALL_OW 111
// end ;
83178: LD_VAR 0 3
83182: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83183: LD_INT 0
83185: PPUSH
83186: PPUSH
83187: PPUSH
// if not side or not area then
83188: LD_VAR 0 1
83192: NOT
83193: IFTRUE 83202
83195: PUSH
83196: LD_VAR 0 2
83200: NOT
83201: OR
83202: IFFALSE 83206
// exit ;
83204: GO 83325
// tmp := AreaToList ( area , 0 ) ;
83206: LD_ADDR_VAR 0 5
83210: PUSH
83211: LD_VAR 0 2
83215: PPUSH
83216: LD_INT 0
83218: PPUSH
83219: CALL_OW 517
83223: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83224: LD_ADDR_VAR 0 4
83228: PUSH
83229: DOUBLE
83230: LD_INT 1
83232: DEC
83233: ST_TO_ADDR
83234: LD_VAR 0 5
83238: PUSH
83239: LD_INT 1
83241: ARRAY
83242: PUSH
83243: FOR_TO
83244: IFFALSE 83323
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83246: LD_VAR 0 5
83250: PUSH
83251: LD_INT 1
83253: ARRAY
83254: PUSH
83255: LD_VAR 0 4
83259: ARRAY
83260: PPUSH
83261: LD_VAR 0 5
83265: PUSH
83266: LD_INT 2
83268: ARRAY
83269: PUSH
83270: LD_VAR 0 4
83274: ARRAY
83275: PPUSH
83276: CALL_OW 351
83280: IFFALSE 83321
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83282: LD_VAR 0 5
83286: PUSH
83287: LD_INT 1
83289: ARRAY
83290: PUSH
83291: LD_VAR 0 4
83295: ARRAY
83296: PPUSH
83297: LD_VAR 0 5
83301: PUSH
83302: LD_INT 2
83304: ARRAY
83305: PUSH
83306: LD_VAR 0 4
83310: ARRAY
83311: PPUSH
83312: LD_VAR 0 1
83316: PPUSH
83317: CALL_OW 244
// end ;
83321: GO 83243
83323: POP
83324: POP
// end ;
83325: LD_VAR 0 3
83329: RET
// export function UniqueArray ( array ) ; var i ; begin
83330: LD_INT 0
83332: PPUSH
83333: PPUSH
// result := [ ] ;
83334: LD_ADDR_VAR 0 2
83338: PUSH
83339: EMPTY
83340: ST_TO_ADDR
// if not array then
83341: LD_VAR 0 1
83345: NOT
83346: IFFALSE 83350
// exit ;
83348: GO 83411
// for i := 1 to array do
83350: LD_ADDR_VAR 0 3
83354: PUSH
83355: DOUBLE
83356: LD_INT 1
83358: DEC
83359: ST_TO_ADDR
83360: LD_VAR 0 1
83364: PUSH
83365: FOR_TO
83366: IFFALSE 83409
// if not array [ i ] in result then
83368: LD_VAR 0 1
83372: PUSH
83373: LD_VAR 0 3
83377: ARRAY
83378: PUSH
83379: LD_VAR 0 2
83383: IN
83384: NOT
83385: IFFALSE 83407
// result := Join ( result , i ) ;
83387: LD_ADDR_VAR 0 2
83391: PUSH
83392: LD_VAR 0 2
83396: PPUSH
83397: LD_VAR 0 3
83401: PPUSH
83402: CALL 78062 0 2
83406: ST_TO_ADDR
83407: GO 83365
83409: POP
83410: POP
// end ; end_of_file
83411: LD_VAR 0 2
83415: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83416: LD_VAR 0 1
83420: PUSH
83421: LD_INT 200
83423: DOUBLE
83424: GREATEREQUAL
83425: IFFALSE 83433
83427: LD_INT 299
83429: DOUBLE
83430: LESSEQUAL
83431: IFTRUE 83435
83433: GO 83467
83435: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83436: LD_VAR 0 1
83440: PPUSH
83441: LD_VAR 0 2
83445: PPUSH
83446: LD_VAR 0 3
83450: PPUSH
83451: LD_VAR 0 4
83455: PPUSH
83456: LD_VAR 0 5
83460: PPUSH
83461: CALL 34138 0 5
83465: GO 83544
83467: LD_INT 300
83469: DOUBLE
83470: GREATEREQUAL
83471: IFFALSE 83479
83473: LD_INT 399
83475: DOUBLE
83476: LESSEQUAL
83477: IFTRUE 83481
83479: GO 83543
83481: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83482: LD_VAR 0 1
83486: PPUSH
83487: LD_VAR 0 2
83491: PPUSH
83492: LD_VAR 0 3
83496: PPUSH
83497: LD_VAR 0 4
83501: PPUSH
83502: LD_VAR 0 5
83506: PPUSH
83507: LD_VAR 0 6
83511: PPUSH
83512: LD_VAR 0 7
83516: PPUSH
83517: LD_VAR 0 8
83521: PPUSH
83522: LD_VAR 0 9
83526: PPUSH
83527: LD_VAR 0 10
83531: PPUSH
83532: LD_VAR 0 11
83536: PPUSH
83537: CALL 29941 0 11
83541: GO 83544
83543: POP
// end ;
83544: PPOPN 11
83546: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83547: LD_VAR 0 1
83551: PPUSH
83552: LD_VAR 0 2
83556: PPUSH
83557: LD_VAR 0 3
83561: PPUSH
83562: LD_VAR 0 4
83566: PPUSH
83567: LD_VAR 0 5
83571: PPUSH
83572: CALL 33438 0 5
// end ; end_of_file
83576: PPOPN 5
83578: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83579: LD_VAR 0 1
83583: PPUSH
83584: LD_VAR 0 2
83588: PPUSH
83589: LD_VAR 0 3
83593: PPUSH
83594: LD_VAR 0 4
83598: PPUSH
83599: LD_VAR 0 5
83603: PPUSH
83604: LD_VAR 0 6
83608: PPUSH
83609: CALL 17481 0 6
// end ;
83613: PPOPN 6
83615: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83616: LD_INT 0
83618: PPUSH
// begin if not units then
83619: LD_VAR 0 1
83623: NOT
83624: IFFALSE 83628
// exit ;
83626: GO 83662
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
83628: LD_VAR 0 1
83632: PPUSH
83633: LD_VAR 0 2
83637: PPUSH
83638: LD_VAR 0 3
83642: PPUSH
83643: LD_VAR 0 4
83647: PPUSH
83648: LD_VAR 0 5
83652: PPUSH
83653: LD_VAR 0 6
83657: PPUSH
83658: CALL 39835 0 6
// end ;
83662: PPOPN 7
83664: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83665: CALL 17361 0 0
// end ;
83669: PPOPN 1
83671: END
