// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses , traitor ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 35
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10636 0 0
// PrepareRussianCommander ;
  44: CALL 12170 0 0
// PrepareSouthBase ;
  48: CALL 12266 0 0
// PrepareNorthBase ;
  52: CALL 12604 0 0
// PrepareOtherRussians ;
  56: CALL 12999 0 0
// PrepareHeroes ;
  60: CALL 10957 0 0
// PrepareLisSquad ;
  64: CALL 11327 0 0
// PrepareOtherAmericans ;
  68: CALL 11640 0 0
// Action ;
  72: CALL 250 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 35
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 34
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// traitor := false ;
 237: LD_ADDR_EXP 33
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function Action ; var tmp ; begin
 250: LD_INT 0
 252: PPUSH
 253: PPUSH
// InGameOn ;
 254: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 258: LD_EXP 1
 262: PPUSH
 263: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 267: LD_ADDR_VAR 0 2
 271: PUSH
 272: LD_INT 22
 274: PUSH
 275: LD_INT 4
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: LD_INT 21
 284: PUSH
 285: LD_INT 1
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: LD_EXP 4
 305: PUSH
 306: EMPTY
 307: LIST
 308: DIFF
 309: ST_TO_ADDR
// if Cyrus and Bobby then
 310: LD_EXP 3
 314: PUSH
 315: LD_EXP 2
 319: AND
 320: IFFALSE 650
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 322: LD_EXP 3
 326: PPUSH
 327: LD_INT 43
 329: PPUSH
 330: LD_INT 72
 332: PPUSH
 333: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 337: LD_EXP 2
 341: PPUSH
 342: LD_INT 44
 344: PPUSH
 345: LD_INT 70
 347: PPUSH
 348: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 352: LD_EXP 1
 356: PPUSH
 357: LD_INT 46
 359: PPUSH
 360: LD_INT 73
 362: PPUSH
 363: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 367: LD_EXP 3
 371: PPUSH
 372: LD_STRING D1a-Cyrus-1
 374: PPUSH
 375: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 379: LD_EXP 1
 383: PPUSH
 384: LD_STRING D1a-JMM-1
 386: PPUSH
 387: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 391: LD_EXP 3
 395: PPUSH
 396: LD_INT 37
 398: PPUSH
 399: LD_INT 66
 401: PPUSH
 402: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 406: LD_EXP 2
 410: PPUSH
 411: LD_INT 41
 413: PPUSH
 414: LD_INT 67
 416: PPUSH
 417: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 421: LD_EXP 1
 425: PPUSH
 426: LD_INT 38
 428: PPUSH
 429: LD_INT 64
 431: PPUSH
 432: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 436: LD_EXP 2
 440: PPUSH
 441: LD_STRING D1a-Bobby-2
 443: PPUSH
 444: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 448: LD_EXP 3
 452: PPUSH
 453: LD_INT 35
 455: PPUSH
 456: LD_INT 62
 458: PPUSH
 459: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 463: LD_EXP 2
 467: PPUSH
 468: LD_INT 32
 470: PPUSH
 471: LD_INT 60
 473: PPUSH
 474: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 478: LD_EXP 1
 482: PPUSH
 483: LD_INT 35
 485: PPUSH
 486: LD_INT 60
 488: PPUSH
 489: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 493: LD_EXP 1
 497: PPUSH
 498: LD_STRING D1a-JMM-2
 500: PPUSH
 501: CALL_OW 88
// ComWalk ( Lisa ) ;
 505: LD_EXP 4
 509: PPUSH
 510: CALL_OW 138
// wait ( 0 0$1 ) ;
 514: LD_INT 35
 516: PPUSH
 517: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 521: LD_EXP 4
 525: PPUSH
 526: LD_EXP 1
 530: PPUSH
 531: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 535: LD_EXP 1
 539: PUSH
 540: LD_EXP 3
 544: PUSH
 545: LD_EXP 2
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PPUSH
 555: LD_EXP 4
 559: PPUSH
 560: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 564: LD_VAR 0 2
 568: PUSH
 569: LD_INT 1
 571: ARRAY
 572: PPUSH
 573: LD_INT 33
 575: PPUSH
 576: LD_INT 55
 578: PPUSH
 579: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 583: LD_VAR 0 2
 587: PUSH
 588: LD_INT 2
 590: ARRAY
 591: PPUSH
 592: LD_INT 30
 594: PPUSH
 595: LD_INT 54
 597: PPUSH
 598: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 602: LD_VAR 0 2
 606: PUSH
 607: LD_INT 1
 609: ARRAY
 610: PPUSH
 611: LD_EXP 1
 615: PPUSH
 616: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 620: LD_VAR 0 2
 624: PUSH
 625: LD_INT 2
 627: ARRAY
 628: PPUSH
 629: LD_EXP 1
 633: PPUSH
 634: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 638: LD_EXP 4
 642: PPUSH
 643: LD_STRING D1a-Lisa-2
 645: PPUSH
 646: CALL_OW 88
// end ; if Cyrus and not Bobby then
 650: LD_EXP 3
 654: PUSH
 655: LD_EXP 2
 659: NOT
 660: AND
 661: IFFALSE 866
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 663: LD_EXP 3
 667: PPUSH
 668: LD_INT 43
 670: PPUSH
 671: LD_INT 72
 673: PPUSH
 674: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 678: LD_EXP 1
 682: PPUSH
 683: LD_INT 46
 685: PPUSH
 686: LD_INT 73
 688: PPUSH
 689: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 693: LD_EXP 3
 697: PPUSH
 698: LD_STRING D1a-Cyrus-1
 700: PPUSH
 701: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 705: LD_EXP 1
 709: PPUSH
 710: LD_STRING D1a-JMM-1
 712: PPUSH
 713: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 717: LD_EXP 3
 721: PPUSH
 722: LD_INT 37
 724: PPUSH
 725: LD_INT 66
 727: PPUSH
 728: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 732: LD_EXP 1
 736: PPUSH
 737: LD_INT 38
 739: PPUSH
 740: LD_INT 64
 742: PPUSH
 743: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 747: LD_EXP 3
 751: PPUSH
 752: LD_STRING D1a-Cyrus-2
 754: PPUSH
 755: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 35
 766: PPUSH
 767: LD_INT 62
 769: PPUSH
 770: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 774: LD_EXP 1
 778: PPUSH
 779: LD_INT 35
 781: PPUSH
 782: LD_INT 60
 784: PPUSH
 785: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 789: LD_EXP 1
 793: PPUSH
 794: LD_STRING D1a-JMM-2
 796: PPUSH
 797: CALL_OW 88
// ComWalk ( Lisa ) ;
 801: LD_EXP 4
 805: PPUSH
 806: CALL_OW 138
// wait ( 0 0$1 ) ;
 810: LD_INT 35
 812: PPUSH
 813: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 817: LD_EXP 4
 821: PPUSH
 822: LD_EXP 1
 826: PPUSH
 827: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 831: LD_EXP 4
 835: PPUSH
 836: LD_STRING D1a-Lisa-2
 838: PPUSH
 839: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 843: LD_EXP 1
 847: PUSH
 848: LD_EXP 3
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PPUSH
 857: LD_EXP 4
 861: PPUSH
 862: CALL_OW 119
// end ; if not Cyrus and Bobby then
 866: LD_EXP 3
 870: NOT
 871: PUSH
 872: LD_EXP 2
 876: AND
 877: IFFALSE 1156
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 879: LD_EXP 2
 883: PPUSH
 884: LD_INT 44
 886: PPUSH
 887: LD_INT 70
 889: PPUSH
 890: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 894: LD_EXP 1
 898: PPUSH
 899: LD_INT 46
 901: PPUSH
 902: LD_INT 73
 904: PPUSH
 905: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 909: LD_EXP 2
 913: PPUSH
 914: LD_STRING D1a-Bobby-1
 916: PPUSH
 917: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 921: LD_EXP 1
 925: PPUSH
 926: LD_STRING D1a-JMM-1
 928: PPUSH
 929: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
 933: LD_EXP 2
 937: PPUSH
 938: LD_INT 37
 940: PPUSH
 941: LD_INT 66
 943: PPUSH
 944: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 38
 955: PPUSH
 956: LD_INT 64
 958: PPUSH
 959: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 963: LD_EXP 2
 967: PPUSH
 968: LD_STRING D1a-Bobby-2
 970: PPUSH
 971: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
 975: LD_EXP 2
 979: PPUSH
 980: LD_INT 35
 982: PPUSH
 983: LD_INT 62
 985: PPUSH
 986: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 990: LD_EXP 1
 994: PPUSH
 995: LD_INT 35
 997: PPUSH
 998: LD_INT 60
1000: PPUSH
1001: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1005: LD_EXP 1
1009: PPUSH
1010: LD_STRING D1a-JMM-2
1012: PPUSH
1013: CALL_OW 88
// ComWalk ( Lisa ) ;
1017: LD_EXP 4
1021: PPUSH
1022: CALL_OW 138
// wait ( 0 0$1 ) ;
1026: LD_INT 35
1028: PPUSH
1029: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1033: LD_EXP 4
1037: PPUSH
1038: LD_EXP 1
1042: PPUSH
1043: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1047: LD_EXP 1
1051: PUSH
1052: LD_EXP 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: LD_EXP 4
1065: PPUSH
1066: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1070: LD_VAR 0 2
1074: PUSH
1075: LD_INT 1
1077: ARRAY
1078: PPUSH
1079: LD_INT 33
1081: PPUSH
1082: LD_INT 55
1084: PPUSH
1085: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1089: LD_VAR 0 2
1093: PUSH
1094: LD_INT 2
1096: ARRAY
1097: PPUSH
1098: LD_INT 30
1100: PPUSH
1101: LD_INT 54
1103: PPUSH
1104: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1108: LD_VAR 0 2
1112: PUSH
1113: LD_INT 1
1115: ARRAY
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1126: LD_VAR 0 2
1130: PUSH
1131: LD_INT 2
1133: ARRAY
1134: PPUSH
1135: LD_EXP 1
1139: PPUSH
1140: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1144: LD_EXP 4
1148: PPUSH
1149: LD_STRING D1a-Lisa-2
1151: PPUSH
1152: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1156: LD_EXP 3
1160: NOT
1161: PUSH
1162: LD_EXP 2
1166: NOT
1167: AND
1168: IFFALSE 1382
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1170: LD_EXP 1
1174: PPUSH
1175: LD_INT 37
1177: PPUSH
1178: LD_INT 66
1180: PPUSH
1181: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1185: LD_EXP 1
1189: PPUSH
1190: LD_STRING D1b-JMM-1
1192: PPUSH
1193: CALL_OW 88
// ComCrawl ( JMM ) ;
1197: LD_EXP 1
1201: PPUSH
1202: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1206: LD_EXP 1
1210: PPUSH
1211: LD_INT 35
1213: PPUSH
1214: LD_INT 60
1216: PPUSH
1217: CALL_OW 171
// wait ( 0 0$8 ) ;
1221: LD_INT 280
1223: PPUSH
1224: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1228: LD_EXP 1
1232: PPUSH
1233: LD_STRING D1b-JMM-1a
1235: PPUSH
1236: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1240: LD_EXP 1
1244: PUSH
1245: LD_EXP 4
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 138
// wait ( 0 0$1 ) ;
1258: LD_INT 35
1260: PPUSH
1261: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1265: LD_EXP 4
1269: PPUSH
1270: LD_EXP 1
1274: PPUSH
1275: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1279: LD_EXP 1
1283: PUSH
1284: EMPTY
1285: LIST
1286: PPUSH
1287: LD_EXP 4
1291: PPUSH
1292: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1296: LD_VAR 0 2
1300: PUSH
1301: LD_INT 1
1303: ARRAY
1304: PPUSH
1305: LD_INT 33
1307: PPUSH
1308: LD_INT 55
1310: PPUSH
1311: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1315: LD_VAR 0 2
1319: PUSH
1320: LD_INT 2
1322: ARRAY
1323: PPUSH
1324: LD_INT 30
1326: PPUSH
1327: LD_INT 54
1329: PPUSH
1330: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1334: LD_VAR 0 2
1338: PUSH
1339: LD_INT 1
1341: ARRAY
1342: PPUSH
1343: LD_EXP 1
1347: PPUSH
1348: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1352: LD_VAR 0 2
1356: PUSH
1357: LD_INT 2
1359: ARRAY
1360: PPUSH
1361: LD_EXP 1
1365: PPUSH
1366: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1370: LD_EXP 4
1374: PPUSH
1375: LD_STRING D1b-Lisa-1
1377: PPUSH
1378: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1382: LD_EXP 1
1386: PPUSH
1387: LD_STRING D1-JMM-1
1389: PPUSH
1390: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1394: LD_EXP 4
1398: PPUSH
1399: LD_STRING D1-Lisa-1
1401: PPUSH
1402: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1406: LD_EXP 1
1410: PPUSH
1411: LD_STRING D1-JMM-2
1413: PPUSH
1414: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-2 ) ;
1418: LD_EXP 9
1422: PPUSH
1423: LD_STRING D1-Pow-2
1425: PPUSH
1426: CALL_OW 586
// if Cyrus then
1430: LD_EXP 3
1434: IFFALSE 1460
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1436: LD_EXP 3
1440: PPUSH
1441: LD_STRING D1-Cyrus-2
1443: PPUSH
1444: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1448: LD_EXP 1
1452: PPUSH
1453: LD_STRING D1-JMM-3
1455: PPUSH
1456: CALL_OW 88
// end ; SayRadioNoFace ( Powell , D1-Pow-3 ) ;
1460: LD_EXP 9
1464: PPUSH
1465: LD_STRING D1-Pow-3
1467: PPUSH
1468: CALL_OW 586
// Say ( JMM , D1-JMM-4 ) ;
1472: LD_EXP 1
1476: PPUSH
1477: LD_STRING D1-JMM-4
1479: PPUSH
1480: CALL_OW 88
// SayRadioNoFace ( Powell , D1-Pow-4 ) ;
1484: LD_EXP 9
1488: PPUSH
1489: LD_STRING D1-Pow-4
1491: PPUSH
1492: CALL_OW 586
// SayRadioNoFace ( Powell , D1-Pow-4a ) ;
1496: LD_EXP 9
1500: PPUSH
1501: LD_STRING D1-Pow-4a
1503: PPUSH
1504: CALL_OW 586
// if Cyrus then
1508: LD_EXP 3
1512: IFFALSE 1526
// Say ( Cyrus , D1-Cyrus-4 ) ;
1514: LD_EXP 3
1518: PPUSH
1519: LD_STRING D1-Cyrus-4
1521: PPUSH
1522: CALL_OW 88
// if Bobby then
1526: LD_EXP 2
1530: IFFALSE 1568
// begin Say ( Bobby , D1-Bobby-4 ) ;
1532: LD_EXP 2
1536: PPUSH
1537: LD_STRING D1-Bobby-4
1539: PPUSH
1540: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1544: LD_EXP 4
1548: PPUSH
1549: LD_STRING D1-Lisa-4
1551: PPUSH
1552: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1556: LD_EXP 1
1560: PPUSH
1561: LD_STRING D1-JMM-5
1563: PPUSH
1564: CALL_OW 88
// end ; InGameOff ;
1568: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1572: LD_INT 22
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: LD_EXP 6
1591: PUSH
1592: LD_EXP 7
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: DIFF
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1609: LD_STRING M1
1611: PPUSH
1612: CALL_OW 337
// SaveForQuickRestart ;
1616: CALL_OW 22
// end ;
1620: LD_VAR 0 1
1624: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1625: LD_INT 7
1627: PPUSH
1628: LD_INT 22
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL_OW 70
1642: PUSH
1643: LD_INT 0
1645: GREATER
1646: IFFALSE 2059
1648: GO 1650
1650: DISABLE
// begin InGameOn ;
1651: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1655: LD_INT 22
1657: PUSH
1658: LD_INT 1
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 21
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: PUSH
1675: EMPTY
1676: LIST
1677: LIST
1678: PPUSH
1679: CALL_OW 69
1683: PPUSH
1684: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1688: LD_INT 24
1690: PPUSH
1691: LD_INT 32
1693: PPUSH
1694: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1698: LD_EXP 5
1702: PPUSH
1703: LD_INT 4
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1713: LD_EXP 5
1717: PPUSH
1718: LD_INT 4
1720: PPUSH
1721: CALL_OW 336
// wait ( 0 0$1 ) ;
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1732: LD_EXP 5
1736: PPUSH
1737: LD_INT 27
1739: PPUSH
1740: LD_INT 38
1742: PPUSH
1743: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1747: LD_EXP 5
1751: PPUSH
1752: LD_EXP 1
1756: PPUSH
1757: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1761: LD_INT 22
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 21
1773: PUSH
1774: LD_INT 1
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: PPUSH
1785: CALL_OW 69
1789: PUSH
1790: LD_EXP 5
1794: PUSH
1795: EMPTY
1796: LIST
1797: DIFF
1798: PPUSH
1799: LD_EXP 5
1803: PPUSH
1804: CALL_OW 119
// wait ( 0 0$1 ) ;
1808: LD_INT 35
1810: PPUSH
1811: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1815: LD_EXP 5
1819: PPUSH
1820: LD_STRING D2a-Khat-1
1822: PPUSH
1823: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1827: LD_EXP 1
1831: PPUSH
1832: LD_STRING D2a-JMM-1
1834: PPUSH
1835: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1839: LD_EXP 5
1843: PPUSH
1844: LD_STRING D2a-Khat-2
1846: PPUSH
1847: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1851: LD_EXP 1
1855: PPUSH
1856: LD_STRING D2a-JMM-2
1858: PPUSH
1859: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1863: LD_EXP 5
1867: PPUSH
1868: LD_STRING D2a-Khat-3
1870: PPUSH
1871: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1875: LD_EXP 1
1879: PPUSH
1880: LD_STRING D2a-JMM-3
1882: PPUSH
1883: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1887: LD_EXP 5
1891: PPUSH
1892: LD_STRING D2a-Khat-4
1894: PPUSH
1895: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1899: LD_EXP 1
1903: PPUSH
1904: LD_STRING D2a-JMM-4
1906: PPUSH
1907: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1911: LD_EXP 5
1915: PPUSH
1916: LD_STRING D2a-Khat-5
1918: PPUSH
1919: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
1923: LD_EXP 1
1927: PPUSH
1928: LD_STRING D2a-JMM-5
1930: PPUSH
1931: CALL_OW 88
// InGameOff ;
1935: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
1939: LD_INT 22
1941: PUSH
1942: LD_INT 1
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 21
1951: PUSH
1952: LD_INT 1
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 24
1964: PUSH
1965: LD_INT 800
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: IFFALSE 2059
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
1987: LD_EXP 5
1991: PPUSH
1992: LD_INT 22
1994: PUSH
1995: LD_INT 1
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 21
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: LD_INT 3
2014: PUSH
2015: LD_INT 24
2017: PUSH
2018: LD_INT 1000
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2047: LD_EXP 5
2051: PPUSH
2052: LD_STRING D2b-Khat-1
2054: PPUSH
2055: CALL_OW 88
// end ; end ;
2059: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2060: LD_INT 15
2062: PPUSH
2063: LD_INT 22
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: PPUSH
2073: CALL_OW 70
2077: IFFALSE 3274
2079: GO 2081
2081: DISABLE
2082: LD_INT 0
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
2088: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_INT 999
2096: PUSH
2097: LD_INT 999
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2107: LD_ADDR_VAR 0 4
2111: PUSH
2112: LD_INT 22
2114: PUSH
2115: LD_INT 1
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 21
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PPUSH
2136: CALL_OW 69
2140: PUSH
2141: LD_EXP 1
2145: PUSH
2146: LD_EXP 2
2150: PUSH
2151: LD_EXP 3
2155: PUSH
2156: LD_EXP 4
2160: PUSH
2161: LD_EXP 5
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: DIFF
2173: ST_TO_ADDR
// PrepareDeadSoldiers ;
2174: CALL 11782 0 0
// spotCorpses = 1 ;
2178: LD_ADDR_EXP 32
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2186: LD_INT 70
2188: PPUSH
2189: CALL_OW 67
// InGameOn ;
2193: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2197: LD_INT 23
2199: PPUSH
2200: LD_INT 12
2202: PPUSH
2203: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 2
2216: PUSH
2217: LD_INT 1
2219: ARRAY
2220: PUSH
2221: LD_INT 2
2223: ARRAY
2224: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2225: LD_ADDR_VAR 0 1
2229: PUSH
2230: LD_INT 22
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PUSH
2240: LD_INT 21
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PPUSH
2254: CALL_OW 69
2258: PUSH
2259: LD_EXP 1
2263: PUSH
2264: LD_EXP 5
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: DIFF
2273: PUSH
2274: FOR_IN
2275: IFFALSE 2326
// if IsOK ( i ) then
2277: LD_VAR 0 1
2281: PPUSH
2282: CALL_OW 302
2286: IFFALSE 2324
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2288: LD_ADDR_VAR 0 2
2292: PUSH
2293: LD_VAR 0 2
2297: PUSH
2298: LD_VAR 0 1
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: LD_INT 16
2310: PPUSH
2311: CALL_OW 299
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: EMPTY
2321: LIST
2322: ADD
2323: ST_TO_ADDR
2324: GO 2274
2326: POP
2327: POP
// for i = 2 to distanceTab do
2328: LD_ADDR_VAR 0 1
2332: PUSH
2333: DOUBLE
2334: LD_INT 2
2336: DEC
2337: ST_TO_ADDR
2338: LD_VAR 0 2
2342: PUSH
2343: FOR_TO
2344: IFFALSE 2390
// if distanceTab [ i ] [ 2 ] < min then
2346: LD_VAR 0 2
2350: PUSH
2351: LD_VAR 0 1
2355: ARRAY
2356: PUSH
2357: LD_INT 2
2359: ARRAY
2360: PUSH
2361: LD_VAR 0 3
2365: LESS
2366: IFFALSE 2388
// min = distanceTab [ i ] [ 2 ] ;
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: LD_VAR 0 2
2377: PUSH
2378: LD_VAR 0 1
2382: ARRAY
2383: PUSH
2384: LD_INT 2
2386: ARRAY
2387: ST_TO_ADDR
2388: GO 2343
2390: POP
2391: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2392: LD_ADDR_VAR 0 1
2396: PUSH
2397: LD_INT 22
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 21
2409: PUSH
2410: LD_INT 1
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PPUSH
2421: CALL_OW 69
2425: PUSH
2426: LD_EXP 1
2430: PUSH
2431: EMPTY
2432: LIST
2433: DIFF
2434: PUSH
2435: FOR_IN
2436: IFFALSE 2506
// begin ComMoveToArea ( i , DeadCutscene ) ;
2438: LD_VAR 0 1
2442: PPUSH
2443: LD_INT 28
2445: PPUSH
2446: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2450: LD_EXP 1
2454: PPUSH
2455: LD_INT 30
2457: PPUSH
2458: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2462: LD_VAR 0 1
2466: PPUSH
2467: LD_INT 23
2469: PPUSH
2470: LD_INT 11
2472: PPUSH
2473: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2477: LD_EXP 1
2481: PPUSH
2482: LD_INT 23
2484: PPUSH
2485: LD_INT 11
2487: PPUSH
2488: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2492: LD_EXP 36
2496: PPUSH
2497: LD_INT 250
2499: PPUSH
2500: CALL_OW 234
// end ;
2504: GO 2435
2506: POP
2507: POP
// for i = 2 to distanceTab do
2508: LD_ADDR_VAR 0 1
2512: PUSH
2513: DOUBLE
2514: LD_INT 2
2516: DEC
2517: ST_TO_ADDR
2518: LD_VAR 0 2
2522: PUSH
2523: FOR_TO
2524: IFFALSE 2910
// begin if distanceTab [ i ] [ 2 ] = min then
2526: LD_VAR 0 2
2530: PUSH
2531: LD_VAR 0 1
2535: ARRAY
2536: PUSH
2537: LD_INT 2
2539: ARRAY
2540: PUSH
2541: LD_VAR 0 3
2545: EQUAL
2546: IFFALSE 2908
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2548: LD_VAR 0 2
2552: PUSH
2553: LD_VAR 0 1
2557: ARRAY
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PUSH
2563: LD_EXP 2
2567: EQUAL
2568: IFFALSE 2582
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2570: LD_EXP 2
2574: PPUSH
2575: LD_STRING DCorpses-Bobby-1
2577: PPUSH
2578: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2582: LD_VAR 0 2
2586: PUSH
2587: LD_VAR 0 1
2591: ARRAY
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PUSH
2597: LD_EXP 3
2601: EQUAL
2602: IFFALSE 2616
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2604: LD_EXP 3
2608: PPUSH
2609: LD_STRING DCorpses-Cyrus-1
2611: PPUSH
2612: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2616: LD_VAR 0 2
2620: PUSH
2621: LD_VAR 0 1
2625: ARRAY
2626: PUSH
2627: LD_INT 1
2629: ARRAY
2630: PUSH
2631: LD_EXP 4
2635: EQUAL
2636: IFFALSE 2650
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2638: LD_EXP 4
2642: PPUSH
2643: LD_STRING DCorpses-Lisa-1
2645: PPUSH
2646: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2650: LD_VAR 0 2
2654: PUSH
2655: LD_VAR 0 1
2659: ARRAY
2660: PUSH
2661: LD_INT 1
2663: ARRAY
2664: PUSH
2665: LD_VAR 0 4
2669: PUSH
2670: LD_INT 1
2672: ARRAY
2673: EQUAL
2674: PUSH
2675: LD_VAR 0 4
2679: PUSH
2680: LD_INT 1
2682: ARRAY
2683: PPUSH
2684: CALL_OW 258
2688: PUSH
2689: LD_INT 1
2691: EQUAL
2692: AND
2693: IFFALSE 2711
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2695: LD_VAR 0 4
2699: PUSH
2700: LD_INT 1
2702: ARRAY
2703: PPUSH
2704: LD_STRING DCorpses-Sol1-1
2706: PPUSH
2707: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2711: LD_VAR 0 2
2715: PUSH
2716: LD_VAR 0 1
2720: ARRAY
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PUSH
2726: LD_VAR 0 4
2730: PUSH
2731: LD_INT 1
2733: ARRAY
2734: EQUAL
2735: PUSH
2736: LD_VAR 0 4
2740: PUSH
2741: LD_INT 1
2743: ARRAY
2744: PPUSH
2745: CALL_OW 258
2749: PUSH
2750: LD_INT 2
2752: EQUAL
2753: AND
2754: IFFALSE 2772
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2756: LD_VAR 0 4
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: PPUSH
2765: LD_STRING DCorpses-FSol1-1
2767: PPUSH
2768: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2772: LD_VAR 0 2
2776: PUSH
2777: LD_VAR 0 1
2781: ARRAY
2782: PUSH
2783: LD_INT 1
2785: ARRAY
2786: PUSH
2787: LD_VAR 0 4
2791: PUSH
2792: LD_INT 2
2794: ARRAY
2795: EQUAL
2796: PUSH
2797: LD_VAR 0 4
2801: PUSH
2802: LD_INT 2
2804: ARRAY
2805: PPUSH
2806: CALL_OW 258
2810: PUSH
2811: LD_INT 1
2813: EQUAL
2814: AND
2815: IFFALSE 2833
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2817: LD_VAR 0 4
2821: PUSH
2822: LD_INT 2
2824: ARRAY
2825: PPUSH
2826: LD_STRING DCorpses-Sol1-1
2828: PPUSH
2829: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2833: LD_VAR 0 2
2837: PUSH
2838: LD_VAR 0 1
2842: ARRAY
2843: PUSH
2844: LD_INT 1
2846: ARRAY
2847: PUSH
2848: LD_VAR 0 4
2852: PUSH
2853: LD_INT 2
2855: ARRAY
2856: EQUAL
2857: PUSH
2858: LD_VAR 0 4
2862: PUSH
2863: LD_INT 2
2865: ARRAY
2866: PPUSH
2867: CALL_OW 258
2871: PUSH
2872: LD_INT 2
2874: EQUAL
2875: AND
2876: IFFALSE 2894
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2878: LD_VAR 0 4
2882: PUSH
2883: LD_INT 2
2885: ARRAY
2886: PPUSH
2887: LD_STRING DCorpses-FSol1-1
2889: PPUSH
2890: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2894: LD_EXP 36
2898: PPUSH
2899: LD_INT 150
2901: PPUSH
2902: CALL_OW 234
// break ;
2906: GO 2910
// end ; end ;
2908: GO 2523
2910: POP
2911: POP
// p := 0 ;
2912: LD_ADDR_VAR 0 5
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2920: LD_INT 35
2922: PPUSH
2923: CALL_OW 67
// p := p + 1 ;
2927: LD_ADDR_VAR 0 5
2931: PUSH
2932: LD_VAR 0 5
2936: PUSH
2937: LD_INT 1
2939: PLUS
2940: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2941: LD_ADDR_VAR 0 1
2945: PUSH
2946: LD_INT 22
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 21
2958: PUSH
2959: LD_INT 1
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PPUSH
2970: CALL_OW 69
2974: PUSH
2975: LD_EXP 1
2979: PUSH
2980: EMPTY
2981: LIST
2982: DIFF
2983: PUSH
2984: FOR_IN
2985: IFFALSE 3055
// begin ComMoveToArea ( i , DeadCutscene ) ;
2987: LD_VAR 0 1
2991: PPUSH
2992: LD_INT 28
2994: PPUSH
2995: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2999: LD_EXP 1
3003: PPUSH
3004: LD_INT 30
3006: PPUSH
3007: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3011: LD_VAR 0 1
3015: PPUSH
3016: LD_INT 23
3018: PPUSH
3019: LD_INT 11
3021: PPUSH
3022: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3026: LD_EXP 1
3030: PPUSH
3031: LD_INT 23
3033: PPUSH
3034: LD_INT 11
3036: PPUSH
3037: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3041: LD_EXP 36
3045: PPUSH
3046: LD_INT 250
3048: PPUSH
3049: CALL_OW 234
// end ;
3053: GO 2984
3055: POP
3056: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3057: LD_EXP 1
3061: PPUSH
3062: LD_INT 30
3064: PPUSH
3065: CALL_OW 308
3069: PUSH
3070: LD_VAR 0 5
3074: PUSH
3075: LD_INT 16
3077: GREATEREQUAL
3078: OR
3079: IFFALSE 2920
// wait ( 0 0$1 ) ;
3081: LD_INT 35
3083: PPUSH
3084: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING DCorpses-JMM-1
3095: PPUSH
3096: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3100: LD_EXP 36
3104: PPUSH
3105: LD_INT 100
3107: PPUSH
3108: CALL_OW 234
// if IsOK ( Khatam ) then
3112: LD_EXP 5
3116: PPUSH
3117: CALL_OW 302
3121: IFFALSE 3258
// begin repeat wait ( 0 0$1 ) ;
3123: LD_INT 35
3125: PPUSH
3126: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3130: LD_EXP 5
3134: PPUSH
3135: LD_EXP 36
3139: PPUSH
3140: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3144: LD_EXP 5
3148: PPUSH
3149: LD_EXP 36
3153: PPUSH
3154: CALL_OW 296
3158: PUSH
3159: LD_INT 2
3161: LESS
3162: IFFALSE 3123
// spotCorpses = 0 ;
3164: LD_ADDR_EXP 32
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3172: LD_EXP 36
3176: PPUSH
3177: LD_INT 10
3179: PPUSH
3180: CALL_OW 234
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// KillUnit ( DyingSold ) ;
3191: LD_EXP 36
3195: PPUSH
3196: CALL_OW 66
// wait ( 0 0$1 ) ;
3200: LD_INT 35
3202: PPUSH
3203: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3207: LD_EXP 1
3211: PUSH
3212: LD_EXP 5
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3225: LD_EXP 5
3229: PPUSH
3230: LD_EXP 1
3234: PPUSH
3235: CALL_OW 119
// wait ( 0 0$1 ) ;
3239: LD_INT 35
3241: PPUSH
3242: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3246: LD_EXP 5
3250: PPUSH
3251: LD_STRING DCorpses-Khat-1
3253: PPUSH
3254: CALL_OW 88
// end ; InGameOff ;
3258: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3262: LD_EXP 1
3266: PPUSH
3267: LD_STRING DCorpses-JMM-2
3269: PPUSH
3270: CALL_OW 88
// end ;
3274: PPOPN 5
3276: END
// every 0 0$1 trigger spotCorpses = 1 do
3277: LD_EXP 32
3281: PUSH
3282: LD_INT 1
3284: EQUAL
3285: IFFALSE 3303
3287: GO 3289
3289: DISABLE
// begin enable ;
3290: ENABLE
// SetLives ( DyingSold , 10 ) ;
3291: LD_EXP 36
3295: PPUSH
3296: LD_INT 10
3298: PPUSH
3299: CALL_OW 234
// end ;
3303: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3304: LD_INT 8
3306: PPUSH
3307: LD_INT 22
3309: PUSH
3310: LD_INT 1
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 70
3321: PUSH
3322: LD_INT 22
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PPUSH
3332: CALL_OW 69
3336: PPUSH
3337: LD_EXP 7
3341: PPUSH
3342: CALL_OW 74
3346: PPUSH
3347: LD_EXP 7
3351: PPUSH
3352: CALL_OW 296
3356: PUSH
3357: LD_INT 13
3359: LESS
3360: OR
3361: IFFALSE 3542
3363: GO 3365
3365: DISABLE
3366: LD_INT 0
3368: PPUSH
// begin InGameOn ;
3369: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3373: LD_EXP 7
3377: PPUSH
3378: LD_INT 250
3380: PPUSH
3381: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3385: LD_EXP 6
3389: PPUSH
3390: LD_INT 1000
3392: PUSH
3393: LD_INT 800
3395: PUSH
3396: LD_INT 750
3398: PUSH
3399: LD_INT 700
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: PUSH
3408: LD_OWVAR 67
3412: ARRAY
3413: PPUSH
3414: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3418: LD_INT 3
3420: PPUSH
3421: LD_INT 4
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 1
3429: PPUSH
3430: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3434: LD_EXP 6
3438: PUSH
3439: LD_EXP 7
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PPUSH
3448: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_INT 9
3459: PPUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 3
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 70
3474: PUSH
3475: LD_INT 22
3477: PUSH
3478: LD_INT 4
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: UNION
3490: PUSH
3491: FOR_IN
3492: IFFALSE 3505
// ComFree ( i ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 139
3503: GO 3491
3505: POP
3506: POP
// wait ( 0 0$1 ) ;
3507: LD_INT 35
3509: PPUSH
3510: CALL_OW 67
// InGameOff ;
3514: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3518: LD_EXP 6
3522: PPUSH
3523: LD_STRING DF-Sol1-1
3525: PPUSH
3526: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3530: LD_EXP 1
3534: PPUSH
3535: LD_STRING DF-JMM-1
3537: PPUSH
3538: CALL_OW 88
// end ;
3542: PPOPN 1
3544: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3545: LD_INT 19
3547: PPUSH
3548: LD_INT 22
3550: PUSH
3551: LD_INT 3
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PPUSH
3558: CALL_OW 70
3562: PUSH
3563: LD_INT 0
3565: EQUAL
3566: IFFALSE 3675
3568: GO 3570
3570: DISABLE
// begin if not IsDead ( Brian ) then
3571: LD_EXP 6
3575: PPUSH
3576: CALL_OW 301
3580: NOT
3581: IFFALSE 3595
// SetSide ( Brian , 1 ) ;
3583: LD_EXP 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 235
// if not IsDead ( Jerry ) then
3595: LD_EXP 7
3599: PPUSH
3600: CALL_OW 301
3604: NOT
3605: IFFALSE 3619
// SetSide ( Jerry , 1 ) ;
3607: LD_EXP 7
3611: PPUSH
3612: LD_INT 1
3614: PPUSH
3615: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3619: LD_INT 22
3621: PUSH
3622: LD_INT 1
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 25
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PPUSH
3643: CALL_OW 69
3647: IFFALSE 3663
// Say ( JMM , DFa-JMM-1 ) else
3649: LD_EXP 1
3653: PPUSH
3654: LD_STRING DFa-JMM-1
3656: PPUSH
3657: CALL_OW 88
3661: GO 3675
// Say ( JMM , DFa-JMM-1a ) ;
3663: LD_EXP 1
3667: PPUSH
3668: LD_STRING DFa-JMM-1a
3670: PPUSH
3671: CALL_OW 88
// end ;
3675: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3676: LD_INT 19
3678: PPUSH
3679: LD_INT 22
3681: PUSH
3682: LD_INT 3
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PPUSH
3689: CALL_OW 70
3693: PUSH
3694: LD_INT 0
3696: EQUAL
3697: PUSH
3698: LD_EXP 6
3702: PPUSH
3703: CALL_OW 302
3707: NOT
3708: AND
3709: IFFALSE 3795
3711: GO 3713
3713: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3714: LD_INT 35
3716: PPUSH
3717: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3721: LD_EXP 6
3725: PPUSH
3726: CALL_OW 256
3730: PUSH
3731: LD_INT 250
3733: GREATER
3734: IFFALSE 3714
// Say ( Brian , DFb-Sol1-1 ) ;
3736: LD_EXP 6
3740: PPUSH
3741: LD_STRING DFb-Sol1-1
3743: PPUSH
3744: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3748: LD_EXP 6
3752: PPUSH
3753: LD_INT 78
3755: PPUSH
3756: LD_INT 74
3758: PPUSH
3759: CALL_OW 111
// if IsDead ( Jerry ) then
3763: LD_EXP 7
3767: PPUSH
3768: CALL_OW 301
3772: IFFALSE 3788
// Say ( Brian , DFb-Sol1-1a ) else
3774: LD_EXP 6
3778: PPUSH
3779: LD_STRING DFb-Sol1-1a
3781: PPUSH
3782: CALL_OW 88
3786: GO 3795
// SetAchievement ( ACH_JERRY ) ;
3788: LD_STRING ACH_JERRY
3790: PPUSH
3791: CALL_OW 543
// end ;
3795: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3796: LD_INT 22
3798: PUSH
3799: LD_INT 1
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: PUSH
3806: LD_INT 21
3808: PUSH
3809: LD_INT 2
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: PUSH
3825: LD_INT 0
3827: EQUAL
3828: IFFALSE 3920
3830: GO 3832
3832: DISABLE
3833: LD_INT 0
3835: PPUSH
// begin enable ;
3836: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3837: LD_ADDR_VAR 0 1
3841: PUSH
3842: LD_INT 22
3844: PUSH
3845: LD_INT 3
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 21
3854: PUSH
3855: LD_INT 3
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 30
3864: PUSH
3865: LD_INT 31
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 69
3881: PUSH
3882: FOR_IN
3883: IFFALSE 3918
// begin if See ( 1 , i ) then
3885: LD_INT 1
3887: PPUSH
3888: LD_VAR 0 1
3892: PPUSH
3893: CALL_OW 292
3897: IFFALSE 3916
// begin disable ;
3899: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3900: LD_EXP 1
3904: PPUSH
3905: LD_STRING DX1-JMM-1
3907: PPUSH
3908: CALL_OW 88
// exit ;
3912: POP
3913: POP
3914: GO 3920
// end ; end ;
3916: GO 3882
3918: POP
3919: POP
// end ;
3920: PPOPN 1
3922: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
3923: LD_INT 1
3925: PPUSH
3926: LD_INT 11
3928: PPUSH
3929: CALL_OW 294
3933: IFFALSE 4196
3935: GO 3937
3937: DISABLE
3938: LD_INT 0
3940: PPUSH
3941: PPUSH
3942: PPUSH
// begin DialogueOn ;
3943: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
3947: LD_INT 11
3949: PPUSH
3950: LD_INT 22
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 21
3962: PUSH
3963: LD_INT 1
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: PPUSH
3974: CALL_OW 70
3978: PUSH
3979: LD_INT 1
3981: ARRAY
3982: PPUSH
3983: LD_STRING DX3-Rus1-1
3985: PPUSH
3986: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
3990: LD_EXP 1
3994: PPUSH
3995: LD_STRING DX3-JMM-1
3997: PPUSH
3998: CALL_OW 88
// DialogueOff ;
4002: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4006: LD_ADDR_VAR 0 1
4010: PUSH
4011: LD_INT 11
4013: PPUSH
4014: LD_INT 22
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: PUSH
4024: LD_INT 25
4026: PUSH
4027: LD_INT 1
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 70
4042: PUSH
4043: FOR_IN
4044: IFFALSE 4064
// southBaseDefenders = southBaseDefenders ^ i ;
4046: LD_ADDR_EXP 25
4050: PUSH
4051: LD_EXP 25
4055: PUSH
4056: LD_VAR 0 1
4060: ADD
4061: ST_TO_ADDR
4062: GO 4043
4064: POP
4065: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4066: LD_INT 175
4068: PUSH
4069: LD_INT 140
4071: PUSH
4072: LD_INT 105
4074: PUSH
4075: LD_INT 70
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_OWVAR 67
4088: ARRAY
4089: PPUSH
4090: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4094: LD_ADDR_VAR 0 3
4098: PUSH
4099: LD_INT 22
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 21
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PUSH
4119: LD_INT 25
4121: PUSH
4122: LD_INT 3
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: LIST
4133: PPUSH
4134: CALL_OW 69
4138: ST_TO_ADDR
// if not mech then
4139: LD_VAR 0 3
4143: NOT
4144: IFFALSE 4148
// exit ;
4146: GO 4196
// ComExitBuilding ( mech ) ;
4148: LD_VAR 0 3
4152: PPUSH
4153: CALL_OW 122
// wait ( 0 0$1 ) ;
4157: LD_INT 35
4159: PPUSH
4160: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4164: LD_VAR 0 3
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PPUSH
4173: LD_INT 5
4175: PPUSH
4176: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4180: LD_VAR 0 3
4184: PUSH
4185: LD_INT 2
4187: ARRAY
4188: PPUSH
4189: LD_INT 4
4191: PPUSH
4192: CALL_OW 180
// end ;
4196: PPOPN 3
4198: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4199: LD_INT 1
4201: PPUSH
4202: LD_INT 5
4204: PPUSH
4205: CALL_OW 292
4209: PUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 4
4215: PPUSH
4216: CALL_OW 292
4220: OR
4221: IFFALSE 4305
4223: GO 4225
4225: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4226: LD_INT 5
4228: PUSH
4229: LD_INT 4
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 85
// if IsOK ( Bobby ) then
4240: LD_EXP 2
4244: PPUSH
4245: CALL_OW 302
4249: IFFALSE 4285
// begin DialogueOn ;
4251: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4255: LD_EXP 2
4259: PPUSH
4260: LD_STRING DX2-Bobby-1
4262: PPUSH
4263: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4267: LD_EXP 1
4271: PPUSH
4272: LD_STRING DX2-JMM-1a
4274: PPUSH
4275: CALL_OW 88
// DialogueOff ;
4279: CALL_OW 7
// end else
4283: GO 4305
// begin DialogueOn ;
4285: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4289: LD_EXP 1
4293: PPUSH
4294: LD_STRING DX2-JMM-1
4296: PPUSH
4297: CALL_OW 88
// DialogueOff ;
4301: CALL_OW 7
// end ; end ;
4305: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4306: LD_INT 22
4308: PUSH
4309: LD_INT 1
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 23
4318: PUSH
4319: LD_INT 3
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 21
4328: PUSH
4329: LD_INT 2
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 34
4338: PUSH
4339: LD_INT 42
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: PPUSH
4352: CALL_OW 69
4356: IFFALSE 4777
4358: GO 4360
4360: DISABLE
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
4365: PPUSH
4366: PPUSH
4367: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4368: LD_ADDR_VAR 0 1
4372: PUSH
4373: LD_INT 22
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: LD_INT 23
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 21
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 34
4405: PUSH
4406: LD_INT 42
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: PPUSH
4419: CALL_OW 69
4423: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_INT 22
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 21
4441: PUSH
4442: LD_INT 1
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: LD_INT 26
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: PPUSH
4464: CALL_OW 69
4468: PUSH
4469: LD_EXP 1
4473: PUSH
4474: LD_EXP 3
4478: PUSH
4479: LD_EXP 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: DIFF
4489: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4490: LD_ADDR_VAR 0 4
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 26
4517: PUSH
4518: LD_INT 2
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: PPUSH
4530: CALL_OW 69
4534: PUSH
4535: LD_EXP 4
4539: PUSH
4540: EMPTY
4541: LIST
4542: DIFF
4543: ST_TO_ADDR
// if not tmp then
4544: LD_VAR 0 1
4548: NOT
4549: IFFALSE 4553
// exit ;
4551: GO 4777
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_VAR 0 1
4562: PUSH
4563: LD_INT 1
4565: ARRAY
4566: PPUSH
4567: CALL_OW 311
4571: ST_TO_ADDR
// if not speaker then
4572: LD_VAR 0 2
4576: NOT
4577: IFFALSE 4581
// exit ;
4579: GO 4777
// DialogueOn ;
4581: CALL_OW 6
// if speaker = JMM then
4585: LD_VAR 0 2
4589: PUSH
4590: LD_EXP 1
4594: EQUAL
4595: IFFALSE 4629
// begin if Lisa then
4597: LD_EXP 4
4601: IFFALSE 4615
// Say ( Lisa , DX2b-Lisa-1 ) ;
4603: LD_EXP 4
4607: PPUSH
4608: LD_STRING DX2b-Lisa-1
4610: PPUSH
4611: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4615: LD_EXP 1
4619: PPUSH
4620: LD_STRING DX2b-JMM-1
4622: PPUSH
4623: CALL_OW 88
// end else
4627: GO 4773
// begin Say ( JMM , DX2a-JMM-1 ) ;
4629: LD_EXP 1
4633: PPUSH
4634: LD_STRING DX2a-JMM-1
4636: PPUSH
4637: CALL_OW 88
// if speaker = Bobby then
4641: LD_VAR 0 2
4645: PUSH
4646: LD_EXP 2
4650: EQUAL
4651: IFFALSE 4665
// Say ( Bobby , DX2a-Bobby-1 ) ;
4653: LD_EXP 2
4657: PPUSH
4658: LD_STRING DX2a-Bobby-1
4660: PPUSH
4661: CALL_OW 88
// if speaker = Cyrus then
4665: LD_VAR 0 2
4669: PUSH
4670: LD_EXP 3
4674: EQUAL
4675: IFFALSE 4689
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4677: LD_EXP 3
4681: PPUSH
4682: LD_STRING DX2a-Cyrus-1
4684: PPUSH
4685: CALL_OW 88
// if speaker = Lisa then
4689: LD_VAR 0 2
4693: PUSH
4694: LD_EXP 4
4698: EQUAL
4699: IFFALSE 4713
// Say ( Lisa , DX2a-Lisa-1 ) ;
4701: LD_EXP 4
4705: PPUSH
4706: LD_STRING DX2a-Lisa-1
4708: PPUSH
4709: CALL_OW 88
// if speaker in temp1 then
4713: LD_VAR 0 2
4717: PUSH
4718: LD_VAR 0 3
4722: IN
4723: IFFALSE 4737
// Say ( speaker , DX2a-Sol1-1 ) ;
4725: LD_VAR 0 2
4729: PPUSH
4730: LD_STRING DX2a-Sol1-1
4732: PPUSH
4733: CALL_OW 88
// if speaker in temp2 then
4737: LD_VAR 0 2
4741: PUSH
4742: LD_VAR 0 4
4746: IN
4747: IFFALSE 4761
// Say ( speaker , DX2a-FSol1-1 ) ;
4749: LD_VAR 0 2
4753: PPUSH
4754: LD_STRING DX2a-FSol1-1
4756: PPUSH
4757: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4761: LD_EXP 1
4765: PPUSH
4766: LD_STRING DX2a-JMM-2
4768: PPUSH
4769: CALL_OW 88
// end ; DialogueOff ;
4773: CALL_OW 7
// end ;
4777: PPOPN 5
4779: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4780: LD_INT 1
4782: PPUSH
4783: CALL_OW 255
4787: PUSH
4788: LD_INT 1
4790: EQUAL
4791: PUSH
4792: LD_INT 10
4794: PPUSH
4795: CALL_OW 255
4799: PUSH
4800: LD_INT 1
4802: EQUAL
4803: OR
4804: IFFALSE 4864
4806: GO 4808
4808: DISABLE
// begin DialogueOn ;
4809: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4813: LD_EXP 1
4817: PPUSH
4818: LD_STRING D3-JMM-1
4820: PPUSH
4821: CALL_OW 88
// SayRadioNoFace ( Powell , D3-Pow-1 ) ;
4825: LD_EXP 9
4829: PPUSH
4830: LD_STRING D3-Pow-1
4832: PPUSH
4833: CALL_OW 586
// if IsOK ( Cyrus ) then
4837: LD_EXP 3
4841: PPUSH
4842: CALL_OW 302
4846: IFFALSE 4860
// Say ( Cyrus , D3-Cyrus-1 ) ;
4848: LD_EXP 3
4852: PPUSH
4853: LD_STRING D3-Cyrus-1
4855: PPUSH
4856: CALL_OW 88
// DialogueOff ;
4860: CALL_OW 7
// end ;
4864: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and IsOk ( dep1 ) and IsOk ( dep2 ) do var temp , tmp , i ;
4865: LD_INT 1
4867: PPUSH
4868: CALL_OW 255
4872: PUSH
4873: LD_INT 1
4875: EQUAL
4876: PUSH
4877: LD_INT 10
4879: PPUSH
4880: CALL_OW 255
4884: PUSH
4885: LD_INT 1
4887: EQUAL
4888: AND
4889: PUSH
4890: LD_INT 1
4892: PPUSH
4893: CALL_OW 302
4897: AND
4898: PUSH
4899: LD_INT 10
4901: PPUSH
4902: CALL_OW 302
4906: AND
4907: IFFALSE 6297
4909: GO 4911
4911: DISABLE
4912: LD_INT 0
4914: PPUSH
4915: PPUSH
4916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4917: LD_ADDR_VAR 0 2
4921: PUSH
4922: LD_INT 22
4924: PUSH
4925: LD_INT 3
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 21
4934: PUSH
4935: LD_INT 1
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PPUSH
4946: CALL_OW 69
4950: ST_TO_ADDR
// if tmp then
4951: LD_VAR 0 2
4955: IFFALSE 5016
// begin for i in tmp do
4957: LD_ADDR_VAR 0 3
4961: PUSH
4962: LD_VAR 0 2
4966: PUSH
4967: FOR_IN
4968: IFFALSE 5014
// begin if IsInUnit ( i ) then
4970: LD_VAR 0 3
4974: PPUSH
4975: CALL_OW 310
4979: IFFALSE 4990
// ComExitBuilding ( i ) ;
4981: LD_VAR 0 3
4985: PPUSH
4986: CALL_OW 122
// wait ( 0 0$1 ) ;
4990: LD_INT 35
4992: PPUSH
4993: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
4997: LD_VAR 0 3
5001: PPUSH
5002: LD_INT 54
5004: PPUSH
5005: LD_INT 17
5007: PPUSH
5008: CALL_OW 174
// end ;
5012: GO 4967
5014: POP
5015: POP
// end ; wait ( 0 0$03 ) ;
5016: LD_INT 105
5018: PPUSH
5019: CALL_OW 67
// DialogueOn ;
5023: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5027: LD_EXP 1
5031: PPUSH
5032: LD_STRING D3a-JMM-1
5034: PPUSH
5035: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-1 ) ;
5039: LD_EXP 9
5043: PPUSH
5044: LD_STRING D3a-Pow-1
5046: PPUSH
5047: CALL_OW 586
// Say ( JMM , D3a-JMM-2 ) ;
5051: LD_EXP 1
5055: PPUSH
5056: LD_STRING D3a-JMM-2
5058: PPUSH
5059: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-2 ) ;
5063: LD_EXP 9
5067: PPUSH
5068: LD_STRING D3a-Pow-2
5070: PPUSH
5071: CALL_OW 586
// Say ( JMM , D3a-JMM-3 ) ;
5075: LD_EXP 1
5079: PPUSH
5080: LD_STRING D3a-JMM-3
5082: PPUSH
5083: CALL_OW 88
// SayRadioNoFace ( Powell , D3a-Pow-3 ) ;
5087: LD_EXP 9
5091: PPUSH
5092: LD_STRING D3a-Pow-3
5094: PPUSH
5095: CALL_OW 586
// Say ( JMM , D3a-JMM-4 ) ;
5099: LD_EXP 1
5103: PPUSH
5104: LD_STRING D3a-JMM-4
5106: PPUSH
5107: CALL_OW 88
// DialogueOff ;
5111: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5115: LD_STRING M2
5117: PPUSH
5118: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5122: LD_EXP 1
5126: PPUSH
5127: LD_STRING D3b-JMM-1
5129: PPUSH
5130: CALL_OW 88
// Hint ( Depot2 ) ;
5134: LD_STRING Depot2
5136: PPUSH
5137: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5141: LD_INT 35
5143: PPUSH
5144: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5148: LD_INT 22
5150: PPUSH
5151: LD_INT 22
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: LD_INT 25
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PPUSH
5175: CALL_OW 70
5179: PUSH
5180: LD_INT 22
5182: PUSH
5183: LD_INT 3
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PUSH
5190: LD_INT 21
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: NOT
5209: AND
5210: IFFALSE 5141
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5212: LD_ADDR_VAR 0 1
5216: PUSH
5217: LD_INT 22
5219: PUSH
5220: LD_INT 1
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: PUSH
5227: LD_INT 23
5229: PUSH
5230: LD_INT 1
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: PUSH
5237: LD_INT 25
5239: PUSH
5240: LD_INT 2
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 50
5249: PUSH
5250: EMPTY
5251: LIST
5252: PUSH
5253: LD_INT 56
5255: PUSH
5256: EMPTY
5257: LIST
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PUSH
5271: LD_EXP 1
5275: PUSH
5276: LD_EXP 5
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: DIFF
5285: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5286: LD_INT 35
5288: PPUSH
5289: CALL_OW 67
// until temp > 0 ;
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 0
5300: GREATER
5301: IFFALSE 5212
// wait ( 0 0$5 ) ;
5303: LD_INT 175
5305: PPUSH
5306: CALL_OW 67
// PrepareRussianHeroes ;
5310: CALL 12008 0 0
// InGameOn ;
5314: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5318: LD_EXP 8
5322: PPUSH
5323: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5327: LD_EXP 1
5331: PUSH
5332: LD_VAR 0 1
5336: PUSH
5337: LD_INT 1
5339: ARRAY
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PPUSH
5345: LD_EXP 8
5349: PPUSH
5350: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5354: LD_EXP 8
5358: PPUSH
5359: LD_VAR 0 1
5363: PUSH
5364: LD_INT 1
5366: ARRAY
5367: PPUSH
5368: CALL_OW 119
// wait ( 0 0$02 ) ;
5372: LD_INT 70
5374: PPUSH
5375: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5379: LD_EXP 8
5383: PPUSH
5384: LD_STRING D4-Mikh-1
5386: PPUSH
5387: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5391: LD_VAR 0 1
5395: PUSH
5396: LD_INT 1
5398: ARRAY
5399: PPUSH
5400: CALL_OW 258
5404: PUSH
5405: LD_INT 1
5407: EQUAL
5408: IFFALSE 5426
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5410: LD_VAR 0 1
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PPUSH
5419: LD_STRING D4-Sol1-1
5421: PPUSH
5422: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5426: LD_VAR 0 1
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PPUSH
5435: CALL_OW 258
5439: PUSH
5440: LD_INT 2
5442: EQUAL
5443: IFFALSE 5461
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5445: LD_VAR 0 1
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PPUSH
5454: LD_STRING D4-FSol1-1
5456: PPUSH
5457: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5461: LD_EXP 8
5465: PPUSH
5466: LD_STRING D4-Mikh-2
5468: PPUSH
5469: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5473: LD_VAR 0 1
5477: PUSH
5478: LD_INT 1
5480: ARRAY
5481: PPUSH
5482: CALL_OW 258
5486: PUSH
5487: LD_INT 1
5489: EQUAL
5490: IFFALSE 5508
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5492: LD_VAR 0 1
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: PPUSH
5501: LD_STRING D4-Sol1-2
5503: PPUSH
5504: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5508: LD_VAR 0 1
5512: PUSH
5513: LD_INT 1
5515: ARRAY
5516: PPUSH
5517: CALL_OW 258
5521: PUSH
5522: LD_INT 2
5524: EQUAL
5525: IFFALSE 5543
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5527: LD_VAR 0 1
5531: PUSH
5532: LD_INT 1
5534: ARRAY
5535: PPUSH
5536: LD_STRING D4-FSol1-2
5538: PPUSH
5539: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5543: LD_EXP 8
5547: PPUSH
5548: LD_STRING D4-Mikh-3
5550: PPUSH
5551: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5555: LD_VAR 0 1
5559: PUSH
5560: LD_INT 1
5562: ARRAY
5563: PPUSH
5564: CALL_OW 258
5568: PUSH
5569: LD_INT 1
5571: EQUAL
5572: IFFALSE 5590
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5574: LD_VAR 0 1
5578: PUSH
5579: LD_INT 1
5581: ARRAY
5582: PPUSH
5583: LD_STRING D4-Sol1-3
5585: PPUSH
5586: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5590: LD_VAR 0 1
5594: PUSH
5595: LD_INT 1
5597: ARRAY
5598: PPUSH
5599: CALL_OW 258
5603: PUSH
5604: LD_INT 2
5606: EQUAL
5607: IFFALSE 5625
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5609: LD_VAR 0 1
5613: PUSH
5614: LD_INT 1
5616: ARRAY
5617: PPUSH
5618: LD_STRING D4-FSol1-3
5620: PPUSH
5621: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5625: LD_EXP 8
5629: PPUSH
5630: LD_STRING D4-Mikh-4
5632: PPUSH
5633: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5637: LD_STRING Qs1
5639: PPUSH
5640: CALL_OW 97
5644: PUSH
5645: LD_INT 1
5647: DOUBLE
5648: EQUAL
5649: IFTRUE 5653
5651: GO 5688
5653: POP
// begin InGameOff ;
5654: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5658: LD_INT 1
5660: PPUSH
5661: LD_INT 6
5663: PPUSH
5664: LD_INT 2
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5674: LD_EXP 8
5678: PPUSH
5679: LD_INT 17
5681: PPUSH
5682: CALL_OW 113
// end ; 2 :
5686: GO 6281
5688: LD_INT 2
5690: DOUBLE
5691: EQUAL
5692: IFTRUE 5696
5694: GO 6246
5696: POP
// begin repeat wait ( 0 0$1 ) ;
5697: LD_INT 35
5699: PPUSH
5700: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5704: LD_VAR 0 1
5708: PUSH
5709: LD_INT 1
5711: ARRAY
5712: PPUSH
5713: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5717: LD_VAR 0 1
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: LD_EXP 1
5730: PPUSH
5731: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_EXP 1
5744: PPUSH
5745: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5749: LD_EXP 1
5753: PPUSH
5754: LD_EXP 8
5758: PPUSH
5759: CALL_OW 296
5763: PUSH
5764: LD_INT 5
5766: LESS
5767: IFFALSE 5697
// ComTurnUnit ( Mikhail , JMM ) ;
5769: LD_EXP 8
5773: PPUSH
5774: LD_EXP 1
5778: PPUSH
5779: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5783: LD_EXP 1
5787: PPUSH
5788: LD_STRING D4b-JMM-1
5790: PPUSH
5791: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5795: LD_EXP 8
5799: PPUSH
5800: LD_STRING D4b-Mikh-1
5802: PPUSH
5803: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5807: LD_EXP 1
5811: PPUSH
5812: LD_STRING D4b-JMM-2
5814: PPUSH
5815: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5819: LD_EXP 8
5823: PPUSH
5824: LD_STRING D4b-Mikh-2
5826: PPUSH
5827: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5831: LD_EXP 1
5835: PPUSH
5836: LD_STRING D4b-JMM-3
5838: PPUSH
5839: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5843: LD_EXP 8
5847: PPUSH
5848: LD_STRING D4b-Mikh-3
5850: PPUSH
5851: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5855: LD_EXP 1
5859: PPUSH
5860: LD_STRING D4b-JMM-4
5862: PPUSH
5863: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5867: LD_EXP 8
5871: PPUSH
5872: LD_STRING D4b-Mikh-4
5874: PPUSH
5875: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5879: LD_EXP 1
5883: PPUSH
5884: LD_STRING D4b-JMM-5
5886: PPUSH
5887: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5891: LD_EXP 8
5895: PPUSH
5896: LD_STRING D4b-Mikh-5
5898: PPUSH
5899: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_STRING D4b-JMM-6
5910: PPUSH
5911: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5915: LD_EXP 8
5919: PPUSH
5920: LD_STRING D4b-Mikh-6
5922: PPUSH
5923: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_STRING D4b-JMM-7
5934: PPUSH
5935: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
5939: LD_EXP 8
5943: PPUSH
5944: LD_STRING D4b-Mikh-7
5946: PPUSH
5947: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5951: LD_VAR 0 1
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 258
5964: PUSH
5965: LD_INT 1
5967: EQUAL
5968: IFFALSE 5986
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
5970: LD_VAR 0 1
5974: PUSH
5975: LD_INT 1
5977: ARRAY
5978: PPUSH
5979: LD_STRING D4b-Sol1-7
5981: PPUSH
5982: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5986: LD_VAR 0 1
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PPUSH
5995: CALL_OW 258
5999: PUSH
6000: LD_INT 2
6002: EQUAL
6003: IFFALSE 6021
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6005: LD_VAR 0 1
6009: PUSH
6010: LD_INT 1
6012: ARRAY
6013: PPUSH
6014: LD_STRING D4b-FSol1-7
6016: PPUSH
6017: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6021: LD_EXP 1
6025: PPUSH
6026: LD_STRING D4b-JMM-8
6028: PPUSH
6029: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6033: LD_VAR 0 1
6037: PUSH
6038: LD_INT 1
6040: ARRAY
6041: PPUSH
6042: CALL_OW 258
6046: PUSH
6047: LD_INT 1
6049: EQUAL
6050: IFFALSE 6068
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6052: LD_VAR 0 1
6056: PUSH
6057: LD_INT 1
6059: ARRAY
6060: PPUSH
6061: LD_STRING D4b-Sol1-8
6063: PPUSH
6064: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6068: LD_VAR 0 1
6072: PUSH
6073: LD_INT 1
6075: ARRAY
6076: PPUSH
6077: CALL_OW 258
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6103
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6087: LD_VAR 0 1
6091: PUSH
6092: LD_INT 1
6094: ARRAY
6095: PPUSH
6096: LD_STRING D4b-FSol1-8
6098: PPUSH
6099: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6103: LD_EXP 1
6107: PPUSH
6108: LD_STRING D4b-JMM-9
6110: PPUSH
6111: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6115: LD_EXP 8
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: LD_INT 22
6134: PUSH
6135: LD_INT 1
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PUSH
6142: EMPTY
6143: LIST
6144: PPUSH
6145: CALL_OW 69
6149: PUSH
6150: FOR_IN
6151: IFFALSE 6164
// ComFree ( i ) ;
6153: LD_VAR 0 3
6157: PPUSH
6158: CALL_OW 139
6162: GO 6150
6164: POP
6165: POP
// repeat wait ( 0 0$1 ) ;
6166: LD_INT 35
6168: PPUSH
6169: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6173: LD_EXP 8
6177: PPUSH
6178: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6182: LD_EXP 8
6186: PUSH
6187: LD_VAR 0 1
6191: PUSH
6192: LD_INT 1
6194: ARRAY
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: LD_INT 1
6202: PPUSH
6203: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6207: LD_EXP 8
6211: PPUSH
6212: CALL_OW 310
6216: IFFALSE 6166
// mikhailDepot = IsInUnit ( Mikhail ) ;
6218: LD_ADDR_EXP 23
6222: PUSH
6223: LD_EXP 8
6227: PPUSH
6228: CALL_OW 310
6232: ST_TO_ADDR
// InGameOff ;
6233: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6237: LD_STRING M3
6239: PPUSH
6240: CALL_OW 337
// end ; 3 :
6244: GO 6281
6246: LD_INT 3
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6254
6252: GO 6280
6254: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6255: LD_EXP 8
6259: PPUSH
6260: LD_INT 17
6262: PPUSH
6263: CALL_OW 113
// wait ( 0 0$3 ) ;
6267: LD_INT 105
6269: PPUSH
6270: CALL_OW 67
// InGameOff ;
6274: CALL_OW 9
// end ; end ;
6278: GO 6281
6280: POP
// PrepareTigers ;
6281: CALL 15489 0 0
// RussianTrap ;
6285: CALL 10335 0 0
// tigersRespawn = 1 ;
6289: LD_ADDR_EXP 30
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
// end ;
6297: PPOPN 3
6299: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 255
6307: PUSH
6308: LD_INT 1
6310: EQUAL
6311: PUSH
6312: LD_INT 10
6314: PPUSH
6315: CALL_OW 255
6319: PUSH
6320: LD_INT 1
6322: EQUAL
6323: AND
6324: PUSH
6325: LD_INT 1
6327: PPUSH
6328: CALL_OW 274
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 275
6340: PUSH
6341: LD_INT 100
6343: GREATEREQUAL
6344: AND
6345: IFFALSE 6494
6347: GO 6349
6349: DISABLE
6350: LD_INT 0
6352: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6353: LD_INT 2100
6355: PPUSH
6356: LD_INT 4200
6358: PPUSH
6359: CALL_OW 12
6363: PUSH
6364: LD_INT 1050
6366: PLUS
6367: PPUSH
6368: CALL_OW 67
// PrepareCargoBays ;
6372: CALL 13191 0 0
// cargoRespawn = 1 ;
6376: LD_ADDR_EXP 28
6380: PUSH
6381: LD_INT 1
6383: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6384: LD_ADDR_VAR 0 1
6388: PUSH
6389: LD_EXP 15
6393: PUSH
6394: LD_EXP 16
6398: PUSH
6399: LD_EXP 17
6403: PUSH
6404: LD_EXP 18
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6415: LD_VAR 0 1
6419: PPUSH
6420: LD_INT 17
6422: PPUSH
6423: LD_INT 10
6425: PPUSH
6426: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6430: LD_VAR 0 1
6434: PPUSH
6435: LD_INT 36
6437: PPUSH
6438: LD_INT 13
6440: PPUSH
6441: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 40
6452: PPUSH
6453: LD_INT 20
6455: PPUSH
6456: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6460: LD_VAR 0 1
6464: PPUSH
6465: LD_INT 53
6467: PPUSH
6468: LD_INT 16
6470: PPUSH
6471: CALL_OW 171
// wait ( 0 0$5 ) ;
6475: LD_INT 175
6477: PPUSH
6478: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6482: LD_EXP 17
6486: PPUSH
6487: LD_STRING D5-Rus2-1
6489: PPUSH
6490: CALL_OW 88
// end ;
6494: PPOPN 1
6496: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6497: LD_EXP 28
6501: PUSH
6502: LD_INT 1
6504: EQUAL
6505: IFFALSE 6660
6507: GO 6509
6509: DISABLE
6510: LD_INT 0
6512: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6513: LD_ADDR_VAR 0 1
6517: PUSH
6518: LD_INT 22
6520: PUSH
6521: LD_INT 3
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 21
6530: PUSH
6531: LD_INT 2
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 34
6540: PUSH
6541: LD_INT 51
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6558: LD_INT 105
6560: PPUSH
6561: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6565: LD_VAR 0 1
6569: PPUSH
6570: LD_INT 3
6572: PUSH
6573: LD_INT 60
6575: PUSH
6576: EMPTY
6577: LIST
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PPUSH
6583: CALL_OW 72
6587: PUSH
6588: LD_VAR 0 1
6592: PPUSH
6593: LD_INT 3
6595: PUSH
6596: LD_INT 24
6598: PUSH
6599: LD_INT 980
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PPUSH
6610: CALL_OW 72
6614: OR
6615: IFFALSE 6558
// ComMoveXY ( cargos , 7 , 9 ) ;
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_INT 7
6624: PPUSH
6625: LD_INT 9
6627: PPUSH
6628: CALL_OW 111
// cargoSee = 1 ;
6632: LD_ADDR_EXP 29
6636: PUSH
6637: LD_INT 1
6639: ST_TO_ADDR
// cargoEscape = 1 ;
6640: LD_ADDR_EXP 20
6644: PUSH
6645: LD_INT 1
6647: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6648: LD_EXP 17
6652: PPUSH
6653: LD_STRING D5-Rus2-1a
6655: PPUSH
6656: CALL_OW 88
// end ;
6660: PPOPN 1
6662: END
// every 0 0$1 trigger cargoEscape and UnitFilter ( [ cargo1 , cargo2 ] , [ [ f_ok ] , [ f_side , 3 ] , [ f_placed ] ] ) do var cr , i , x , y ;
6663: LD_EXP 20
6667: PUSH
6668: LD_EXP 15
6672: PUSH
6673: LD_EXP 16
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PPUSH
6682: LD_INT 50
6684: PUSH
6685: EMPTY
6686: LIST
6687: PUSH
6688: LD_INT 22
6690: PUSH
6691: LD_INT 3
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: LD_INT 52
6700: PUSH
6701: EMPTY
6702: LIST
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 72
6713: AND
6714: IFFALSE 7047
6716: GO 6718
6718: DISABLE
6719: LD_INT 0
6721: PPUSH
6722: PPUSH
6723: PPUSH
6724: PPUSH
// begin enable ;
6725: ENABLE
// for i in [ cargo1 , cargo2 ] do
6726: LD_ADDR_VAR 0 2
6730: PUSH
6731: LD_EXP 15
6735: PUSH
6736: LD_EXP 16
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: FOR_IN
6746: IFFALSE 7045
// begin cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
6748: LD_ADDR_VAR 0 1
6752: PUSH
6753: LD_VAR 0 2
6757: PPUSH
6758: CALL_OW 250
6762: PPUSH
6763: LD_VAR 0 2
6767: PPUSH
6768: CALL_OW 251
6772: PPUSH
6773: LD_INT 6
6775: PPUSH
6776: CALL 77668 0 3
6780: ST_TO_ADDR
// if cr and GetMultiCargo ( i ) [ 4 ] < 60 then
6781: LD_VAR 0 1
6785: PUSH
6786: LD_VAR 0 2
6790: PPUSH
6791: CALL 78887 0 1
6795: PUSH
6796: LD_INT 4
6798: ARRAY
6799: PUSH
6800: LD_INT 60
6802: LESS
6803: AND
6804: IFFALSE 6843
// ComCollect ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
6806: LD_VAR 0 2
6810: PPUSH
6811: LD_VAR 0 1
6815: PUSH
6816: LD_INT 1
6818: ARRAY
6819: PUSH
6820: LD_INT 1
6822: ARRAY
6823: PPUSH
6824: LD_VAR 0 1
6828: PUSH
6829: LD_INT 1
6831: ARRAY
6832: PUSH
6833: LD_INT 2
6835: ARRAY
6836: PPUSH
6837: CALL_OW 117
6841: GO 7043
// if not IsInArea ( i , RemoveArea ) then
6843: LD_VAR 0 2
6847: PPUSH
6848: LD_INT 32
6850: PPUSH
6851: CALL_OW 308
6855: NOT
6856: IFFALSE 7004
// begin x := ShiftX ( GetX ( i ) , 4 , 3 ) ;
6858: LD_ADDR_VAR 0 3
6862: PUSH
6863: LD_VAR 0 2
6867: PPUSH
6868: CALL_OW 250
6872: PPUSH
6873: LD_INT 4
6875: PPUSH
6876: LD_INT 3
6878: PPUSH
6879: CALL_OW 272
6883: ST_TO_ADDR
// y := GetY ( i ) ;
6884: LD_ADDR_VAR 0 4
6888: PUSH
6889: LD_VAR 0 2
6893: PPUSH
6894: CALL_OW 251
6898: ST_TO_ADDR
// if HexInfo ( x , y ) then
6899: LD_VAR 0 3
6903: PPUSH
6904: LD_VAR 0 4
6908: PPUSH
6909: CALL_OW 428
6913: IFFALSE 6936
// x := ShiftX ( x , 4 , 3 ) ;
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: LD_VAR 0 3
6924: PPUSH
6925: LD_INT 4
6927: PPUSH
6928: LD_INT 3
6930: PPUSH
6931: CALL_OW 272
6935: ST_TO_ADDR
// if HexInfo ( x , y ) or not ValidHex ( x , y ) then
6936: LD_VAR 0 3
6940: PPUSH
6941: LD_VAR 0 4
6945: PPUSH
6946: CALL_OW 428
6950: PUSH
6951: LD_VAR 0 3
6955: PPUSH
6956: LD_VAR 0 4
6960: PPUSH
6961: CALL_OW 488
6965: NOT
6966: OR
6967: IFFALSE 6983
// ComMoveToArea ( i , RemoveArea ) else
6969: LD_VAR 0 2
6973: PPUSH
6974: LD_INT 32
6976: PPUSH
6977: CALL_OW 113
6981: GO 7002
// ComMoveXY ( i , x , y ) ;
6983: LD_VAR 0 2
6987: PPUSH
6988: LD_VAR 0 3
6992: PPUSH
6993: LD_VAR 0 4
6997: PPUSH
6998: CALL_OW 111
// end else
7002: GO 7043
// begin RemoveUnit ( IsDrivenBy ( i ) ) ;
7004: LD_VAR 0 2
7008: PPUSH
7009: CALL_OW 311
7013: PPUSH
7014: CALL_OW 64
// RemoveUnit ( i ) ;
7018: LD_VAR 0 2
7022: PPUSH
7023: CALL_OW 64
// cargoEscape := cargoEscape + 1 ;
7027: LD_ADDR_EXP 20
7031: PUSH
7032: LD_EXP 20
7036: PUSH
7037: LD_INT 1
7039: PLUS
7040: ST_TO_ADDR
// continue ;
7041: GO 6745
// end ; end ;
7043: GO 6745
7045: POP
7046: POP
// end ;
7047: PPOPN 4
7049: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
7050: LD_EXP 20
7054: PUSH
7055: LD_INT 1
7057: GREATER
7058: IFFALSE 7307
7060: GO 7062
7062: DISABLE
7063: LD_INT 0
7065: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
7066: LD_INT 4
7068: PPUSH
7069: LD_INT 1
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
7079: LD_INT 31
7081: PPUSH
7082: LD_INT 1
7084: PPUSH
7085: LD_INT 1
7087: PPUSH
7088: CALL_OW 324
// Hint ( Bunker ) ;
7092: LD_STRING Bunker
7094: PPUSH
7095: CALL_OW 339
// if IsOK ( Jerry ) then
7099: LD_EXP 7
7103: PPUSH
7104: CALL_OW 302
7108: IFFALSE 7124
// Say ( Jerry , D5a-Sol1-1 ) else
7110: LD_EXP 7
7114: PPUSH
7115: LD_STRING D5a-Sol1-1
7117: PPUSH
7118: CALL_OW 88
7122: GO 7210
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
7124: LD_ADDR_VAR 0 1
7128: PUSH
7129: LD_INT 22
7131: PUSH
7132: LD_INT 1
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 26
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 69
7157: PUSH
7158: LD_EXP 1
7162: PUSH
7163: LD_EXP 2
7167: PUSH
7168: LD_EXP 3
7172: PUSH
7173: LD_EXP 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: DIFF
7184: ST_TO_ADDR
// if not speaker then
7185: LD_VAR 0 1
7189: NOT
7190: IFFALSE 7194
// exit ;
7192: GO 7307
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7194: LD_VAR 0 1
7198: PUSH
7199: LD_INT 1
7201: ARRAY
7202: PPUSH
7203: LD_STRING D5a-Sol1-1
7205: PPUSH
7206: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7210: LD_EXP 1
7214: PPUSH
7215: LD_STRING D5a-JMM-1
7217: PPUSH
7218: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7222: LD_INT 22
7224: PPUSH
7225: LD_INT 22
7227: PUSH
7228: LD_INT 1
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 2
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 70
7253: IFFALSE 7307
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7255: LD_INT 22
7257: PPUSH
7258: LD_INT 22
7260: PUSH
7261: LD_INT 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 25
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 70
7286: PUSH
7287: LD_INT 1
7289: ARRAY
7290: PPUSH
7291: LD_INT 31
7293: PPUSH
7294: LD_INT 44
7296: PPUSH
7297: LD_INT 13
7299: PPUSH
7300: LD_INT 1
7302: PPUSH
7303: CALL_OW 145
// end ;
7307: PPOPN 1
7309: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7310: LD_INT 1
7312: PPUSH
7313: CALL_OW 255
7317: PUSH
7318: LD_INT 3
7320: EQUAL
7321: PUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 256
7329: PUSH
7330: LD_INT 1000
7332: LESS
7333: AND
7334: PUSH
7335: LD_INT 10
7337: PPUSH
7338: CALL_OW 255
7342: PUSH
7343: LD_INT 3
7345: EQUAL
7346: PUSH
7347: LD_INT 10
7349: PPUSH
7350: CALL_OW 256
7354: PUSH
7355: LD_INT 1000
7357: LESS
7358: AND
7359: OR
7360: IFFALSE 7377
7362: GO 7364
7364: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7365: LD_EXP 1
7369: PPUSH
7370: LD_STRING D8-JMM-1
7372: PPUSH
7373: CALL_OW 88
7377: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7378: LD_EXP 8
7382: PPUSH
7383: CALL_OW 310
7387: PUSH
7388: LD_INT 1
7390: EQUAL
7391: PUSH
7392: LD_EXP 22
7396: PUSH
7397: LD_INT 3
7399: EQUAL
7400: NOT
7401: AND
7402: IFFALSE 7424
7404: GO 7406
7406: DISABLE
// begin enable ;
7407: ENABLE
// mikhailInBase = 1 ;
7408: LD_ADDR_EXP 22
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// mikhailStatus = 1 ;
7416: LD_ADDR_EXP 21
7420: PUSH
7421: LD_INT 1
7423: ST_TO_ADDR
// end ;
7424: END
// export function AskMikhail ; begin
7425: LD_INT 0
7427: PPUSH
// case Query ( QMikh2 ) of 1 :
7428: LD_STRING QMikh2
7430: PPUSH
7431: CALL_OW 97
7435: PUSH
7436: LD_INT 1
7438: DOUBLE
7439: EQUAL
7440: IFTRUE 7444
7442: GO 7511
7444: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7445: LD_INT 1
7447: PPUSH
7448: LD_INT 6
7450: PPUSH
7451: LD_INT 2
7453: PPUSH
7454: LD_INT 1
7456: PPUSH
7457: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7461: LD_EXP 8
7465: PPUSH
7466: LD_INT 6
7468: PPUSH
7469: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7473: LD_EXP 8
7477: PPUSH
7478: CALL_OW 122
// wait ( 0 0$1 ) ;
7482: LD_INT 35
7484: PPUSH
7485: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7489: LD_EXP 8
7493: PPUSH
7494: LD_INT 17
7496: PPUSH
7497: CALL_OW 113
// mikhailInbase = 0 ;
7501: LD_ADDR_EXP 22
7505: PUSH
7506: LD_INT 0
7508: ST_TO_ADDR
// end ; 2 :
7509: GO 7752
7511: LD_INT 2
7513: DOUBLE
7514: EQUAL
7515: IFTRUE 7519
7517: GO 7692
7519: POP
// begin mikhailInBase = 2 ;
7520: LD_ADDR_EXP 22
7524: PUSH
7525: LD_INT 2
7527: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7528: LD_EXP 8
7532: PPUSH
7533: LD_INT 6
7535: PPUSH
7536: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7540: LD_EXP 8
7544: PPUSH
7545: CALL_OW 122
// wait ( 0 0$1 ) ;
7549: LD_INT 35
7551: PPUSH
7552: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7556: LD_EXP 8
7560: PPUSH
7561: LD_EXP 8
7565: PPUSH
7566: CALL_OW 250
7570: PUSH
7571: LD_INT 2
7573: PLUS
7574: PPUSH
7575: LD_EXP 8
7579: PPUSH
7580: CALL_OW 251
7584: PUSH
7585: LD_INT 2
7587: PLUS
7588: PPUSH
7589: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7593: LD_EXP 8
7597: PPUSH
7598: LD_EXP 8
7602: PPUSH
7603: CALL_OW 250
7607: PUSH
7608: LD_INT 1
7610: PLUS
7611: PPUSH
7612: LD_EXP 8
7616: PPUSH
7617: CALL_OW 251
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: PPUSH
7626: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7630: LD_EXP 8
7634: PPUSH
7635: LD_EXP 8
7639: PPUSH
7640: CALL_OW 250
7644: PUSH
7645: LD_INT 2
7647: PLUS
7648: PPUSH
7649: LD_EXP 8
7653: PPUSH
7654: CALL_OW 251
7658: PPUSH
7659: CALL_OW 171
// wait ( 0 0$5 ) ;
7663: LD_INT 175
7665: PPUSH
7666: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7670: LD_EXP 8
7674: PPUSH
7675: LD_INT 25
7677: PPUSH
7678: CALL_OW 113
// mikhailInBase = 4 ;
7682: LD_ADDR_EXP 22
7686: PUSH
7687: LD_INT 4
7689: ST_TO_ADDR
// end ; 3 :
7690: GO 7752
7692: LD_INT 3
7694: DOUBLE
7695: EQUAL
7696: IFTRUE 7700
7698: GO 7751
7700: POP
// begin SetSide ( Mikhail , 6 ) ;
7701: LD_EXP 8
7705: PPUSH
7706: LD_INT 6
7708: PPUSH
7709: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7713: LD_EXP 8
7717: PPUSH
7718: CALL_OW 122
// wait ( 0 0$1 ) ;
7722: LD_INT 35
7724: PPUSH
7725: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7729: LD_EXP 8
7733: PPUSH
7734: LD_INT 17
7736: PPUSH
7737: CALL_OW 113
// mikhailInbase = 3 ;
7741: LD_ADDR_EXP 22
7745: PUSH
7746: LD_INT 3
7748: ST_TO_ADDR
// end ; end ;
7749: GO 7752
7751: POP
// end ;
7752: LD_VAR 0 1
7756: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7757: LD_EXP 8
7761: PPUSH
7762: LD_INT 25
7764: PPUSH
7765: CALL_OW 308
7769: PUSH
7770: LD_EXP 22
7774: PUSH
7775: LD_INT 4
7777: EQUAL
7778: AND
7779: IFFALSE 7883
7781: GO 7783
7783: DISABLE
// begin enable ;
7784: ENABLE
// mikhailInBase = 1 ;
7785: LD_ADDR_EXP 22
7789: PUSH
7790: LD_INT 1
7792: ST_TO_ADDR
// InGameOn ;
7793: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 6
7802: PPUSH
7803: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7807: LD_INT 35
7809: PPUSH
7810: CALL_OW 67
// if Carry ( Mikhail ) then
7814: LD_EXP 8
7818: PPUSH
7819: CALL_OW 281
7823: IFFALSE 7834
// ComUnload ( Mikhail ) ;
7825: LD_EXP 8
7829: PPUSH
7830: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7834: LD_EXP 8
7838: PPUSH
7839: LD_INT 1
7841: PPUSH
7842: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7846: LD_EXP 8
7850: PPUSH
7851: CALL_OW 310
7855: IFFALSE 7807
// SetSide ( dep1 , 1 ) ;
7857: LD_INT 1
7859: PPUSH
7860: LD_INT 1
7862: PPUSH
7863: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7867: LD_EXP 8
7871: PPUSH
7872: LD_INT 1
7874: PPUSH
7875: CALL_OW 235
// InGameOff ;
7879: CALL_OW 9
// end ;
7883: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7884: LD_EXP 8
7888: PPUSH
7889: CALL_OW 310
7893: PUSH
7894: LD_EXP 22
7898: PUSH
7899: LD_INT 3
7901: EQUAL
7902: NOT
7903: AND
7904: IFFALSE 8039
7906: GO 7908
7908: DISABLE
// begin enable ;
7909: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7910: LD_INT 22
7912: PUSH
7913: LD_INT 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 21
7922: PUSH
7923: LD_INT 1
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: LD_INT 91
7932: PUSH
7933: LD_EXP 8
7937: PPUSH
7938: CALL_OW 310
7942: PUSH
7943: LD_INT 10
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: LIST
7955: PPUSH
7956: CALL_OW 69
7960: PUSH
7961: LD_INT 1
7963: EQUAL
7964: IFFALSE 8039
// begin mikhailStatus = 4 ;
7966: LD_ADDR_EXP 21
7970: PUSH
7971: LD_INT 4
7973: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7974: LD_INT 1
7976: PPUSH
7977: LD_INT 6
7979: PPUSH
7980: LD_INT 2
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7990: LD_EXP 8
7994: PPUSH
7995: LD_INT 6
7997: PPUSH
7998: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
8002: LD_EXP 8
8006: PPUSH
8007: CALL_OW 122
// wait ( 0 0$1 ) ;
8011: LD_INT 35
8013: PPUSH
8014: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
8018: LD_EXP 8
8022: PPUSH
8023: LD_INT 17
8025: PPUSH
8026: CALL_OW 113
// mikhailStatus = 3 ;
8030: LD_ADDR_EXP 21
8034: PUSH
8035: LD_INT 3
8037: ST_TO_ADDR
// disable ;
8038: DISABLE
// end ; end ;
8039: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
8040: LD_EXP 1
8044: PPUSH
8045: LD_EXP 23
8049: PPUSH
8050: CALL_OW 296
8054: PUSH
8055: LD_INT 5
8057: LESS
8058: PUSH
8059: LD_EXP 21
8063: PUSH
8064: LD_INT 3
8066: EQUAL
8067: AND
8068: PUSH
8069: LD_EXP 22
8073: PUSH
8074: LD_INT 3
8076: EQUAL
8077: NOT
8078: AND
8079: IFFALSE 8310
8081: GO 8083
8083: DISABLE
8084: LD_INT 0
8086: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
8087: LD_ADDR_VAR 0 1
8091: PUSH
8092: LD_INT 22
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 21
8104: PUSH
8105: LD_INT 1
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 26
8114: PUSH
8115: LD_INT 1
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: PPUSH
8127: CALL_OW 69
8131: PUSH
8132: LD_EXP 1
8136: PUSH
8137: LD_EXP 5
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: DIFF
8146: ST_TO_ADDR
// if not tmp then
8147: LD_VAR 0 1
8151: NOT
8152: IFFALSE 8156
// exit ;
8154: GO 8310
// DialogueOn ;
8156: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
8160: LD_EXP 1
8164: PPUSH
8165: LD_STRING D7-JMM-1
8167: PPUSH
8168: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
8172: LD_VAR 0 1
8176: PUSH
8177: LD_INT 1
8179: ARRAY
8180: PPUSH
8181: LD_STRING D7-Sol1-1
8183: PPUSH
8184: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8188: LD_EXP 1
8192: PPUSH
8193: LD_STRING D7-JMM-2
8195: PPUSH
8196: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8200: LD_VAR 0 1
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: PPUSH
8209: LD_STRING D7-Sol1-2
8211: PPUSH
8212: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8216: LD_EXP 1
8220: PPUSH
8221: LD_STRING D7-JMM-3
8223: PPUSH
8224: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8228: LD_VAR 0 1
8232: PUSH
8233: LD_INT 1
8235: ARRAY
8236: PPUSH
8237: LD_STRING D7-Sol1-3
8239: PPUSH
8240: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8244: LD_EXP 3
8248: PPUSH
8249: CALL_OW 302
8253: PUSH
8254: LD_EXP 4
8258: PPUSH
8259: CALL_OW 302
8263: AND
8264: IFFALSE 8306
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8266: LD_EXP 3
8270: PPUSH
8271: LD_STRING D7-Cyrus-3
8273: PPUSH
8274: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8278: LD_VAR 0 1
8282: PUSH
8283: LD_INT 1
8285: ARRAY
8286: PPUSH
8287: LD_STRING D7-Sol1-4
8289: PPUSH
8290: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8294: LD_EXP 4
8298: PPUSH
8299: LD_STRING D7-Lisa-4
8301: PPUSH
8302: CALL_OW 88
// end ; DialogueOff ;
8306: CALL_OW 7
// end ;
8310: PPOPN 1
8312: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8313: LD_EXP 8
8317: PPUSH
8318: CALL_OW 303
8322: PUSH
8323: LD_EXP 21
8327: PUSH
8328: LD_INT 3
8330: EQUAL
8331: AND
8332: IFFALSE 8346
8334: GO 8336
8336: DISABLE
// begin enable ;
8337: ENABLE
// mikhailStatus = 2 ;
8338: LD_ADDR_EXP 21
8342: PUSH
8343: LD_INT 2
8345: ST_TO_ADDR
// end ;
8346: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8347: LD_EXP 8
8351: PPUSH
8352: LD_INT 17
8354: PPUSH
8355: CALL_OW 308
8359: PUSH
8360: LD_EXP 8
8364: PPUSH
8365: CALL_OW 255
8369: PUSH
8370: LD_INT 6
8372: EQUAL
8373: AND
8374: IFFALSE 8407
8376: GO 8378
8378: DISABLE
// begin if not mikhailInBase = 3 then
8379: LD_EXP 22
8383: PUSH
8384: LD_INT 3
8386: EQUAL
8387: NOT
8388: IFFALSE 8398
// mikhailStatus = 3 ;
8390: LD_ADDR_EXP 21
8394: PUSH
8395: LD_INT 3
8397: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8398: LD_EXP 8
8402: PPUSH
8403: CALL_OW 64
// end ;
8407: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8408: LD_EXP 21
8412: PUSH
8413: LD_INT 3
8415: EQUAL
8416: PUSH
8417: LD_EXP 8
8421: PPUSH
8422: CALL_OW 255
8426: PUSH
8427: LD_INT 6
8429: EQUAL
8430: AND
8431: IFFALSE 8624
8433: GO 8435
8435: DISABLE
8436: LD_INT 0
8438: PPUSH
8439: PPUSH
// begin enable ;
8440: ENABLE
// if IsOk ( Mikhail ) then
8441: LD_EXP 8
8445: PPUSH
8446: CALL_OW 302
8450: IFFALSE 8624
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) diff [ JMM , Bobby , Cyrus , Lisa ] ;
8452: LD_ADDR_VAR 0 2
8456: PUSH
8457: LD_EXP 8
8461: PPUSH
8462: LD_INT 22
8464: PUSH
8465: LD_INT 1
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 21
8474: PUSH
8475: LD_INT 1
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 69
8490: PPUSH
8491: CALL 10527 0 2
8495: PUSH
8496: LD_EXP 1
8500: PUSH
8501: LD_EXP 2
8505: PUSH
8506: LD_EXP 3
8510: PUSH
8511: LD_EXP 4
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: DIFF
8522: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 10 then
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_EXP 8
8532: PPUSH
8533: CALL_OW 296
8537: PUSH
8538: LD_INT 10
8540: LESS
8541: IFFALSE 8624
// begin if GetSex ( attacker ) = sex_male then
8543: LD_VAR 0 2
8547: PPUSH
8548: CALL_OW 258
8552: PUSH
8553: LD_INT 1
8555: EQUAL
8556: IFFALSE 8592
// begin disable ;
8558: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8559: LD_VAR 0 2
8563: PPUSH
8564: LD_STRING D7a-Sol1-1
8566: PPUSH
8567: CALL_OW 88
// wait ( 0 0$2 ) ;
8571: LD_INT 70
8573: PPUSH
8574: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8578: LD_VAR 0 2
8582: PPUSH
8583: LD_STRING D7a-Sol1-1a
8585: PPUSH
8586: CALL_OW 88
// end else
8590: GO 8624
// begin disable ;
8592: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: LD_STRING D7a-FSol1-1
8600: PPUSH
8601: CALL_OW 88
// wait ( 0 0$2 ) ;
8605: LD_INT 70
8607: PPUSH
8608: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_STRING D7a-FSol1-1a
8619: PPUSH
8620: CALL_OW 88
// end ; end ; end ; end ;
8624: PPOPN 2
8626: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8627: LD_EXP 27
8631: PUSH
8632: LD_INT 1
8634: EQUAL
8635: PUSH
8636: LD_INT 22
8638: PPUSH
8639: LD_INT 22
8641: PUSH
8642: LD_INT 3
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 21
8651: PUSH
8652: LD_INT 1
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PPUSH
8663: CALL_OW 70
8667: PUSH
8668: LD_INT 2
8670: GREATER
8671: AND
8672: PUSH
8673: LD_INT 22
8675: PPUSH
8676: LD_INT 22
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 2
8688: PUSH
8689: LD_INT 21
8691: PUSH
8692: LD_INT 1
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 59
8701: PUSH
8702: EMPTY
8703: LIST
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 70
8718: PUSH
8719: LD_INT 0
8721: EQUAL
8722: AND
8723: IFFALSE 8738
8725: GO 8727
8727: DISABLE
// SetSide ( dep1 , 3 ) ;
8728: LD_INT 1
8730: PPUSH
8731: LD_INT 3
8733: PPUSH
8734: CALL_OW 235
8738: END
// export function JMMTraitor ; var i ; begin
8739: LD_INT 0
8741: PPUSH
8742: PPUSH
// if traitor then
8743: LD_EXP 33
8747: IFFALSE 8751
// exit ;
8749: GO 8888
// traitor := true ;
8751: LD_ADDR_EXP 33
8755: PUSH
8756: LD_INT 1
8758: ST_TO_ADDR
// if IsOk ( Lisa ) then
8759: LD_EXP 4
8763: PPUSH
8764: CALL_OW 302
8768: IFFALSE 8790
// begin DialogueOn ;
8770: CALL_OW 6
// Say ( Lisa , D10-Lisa-Traitor ) ;
8774: LD_EXP 4
8778: PPUSH
8779: LD_STRING D10-Lisa-Traitor
8781: PPUSH
8782: CALL_OW 88
// DialogueOff ;
8786: CALL_OW 7
// end ; ComExit ( JMM ) ;
8790: LD_EXP 1
8794: PPUSH
8795: CALL 75720 0 1
// SetAttitude ( 1 , 4 , att_enemy , true ) ;
8799: LD_INT 1
8801: PPUSH
8802: LD_INT 4
8804: PPUSH
8805: LD_INT 2
8807: PPUSH
8808: LD_INT 1
8810: PPUSH
8811: CALL_OW 80
// for i in FilterAllUnits ( [ f_side , 1 ] ) diff JMM do
8815: LD_ADDR_VAR 0 2
8819: PUSH
8820: LD_INT 22
8822: PUSH
8823: LD_INT 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: PUSH
8835: LD_EXP 1
8839: DIFF
8840: PUSH
8841: FOR_IN
8842: IFFALSE 8872
// begin SetSide ( i , 4 ) ;
8844: LD_VAR 0 2
8848: PPUSH
8849: LD_INT 4
8851: PPUSH
8852: CALL_OW 235
// ComAttackUnit ( i , JMM ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_EXP 1
8865: PPUSH
8866: CALL_OW 115
// end ;
8870: GO 8841
8872: POP
8873: POP
// wait ( 0 0$30 ) ;
8874: LD_INT 1050
8876: PPUSH
8877: CALL_OW 67
// YouLost ( Traitor ) ;
8881: LD_STRING Traitor
8883: PPUSH
8884: CALL_OW 104
// end ;
8888: LD_VAR 0 1
8892: RET
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8893: LD_EXP 30
8897: PUSH
8898: LD_INT 1
8900: EQUAL
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_INT 0
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 25
8914: PUSH
8915: LD_INT 14
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PPUSH
8926: CALL_OW 69
8930: PUSH
8931: LD_INT 0
8933: EQUAL
8934: AND
8935: IFFALSE 9036
8937: GO 8939
8939: DISABLE
8940: LD_INT 0
8942: PPUSH
8943: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_INT 22
8951: PUSH
8952: LD_INT 1
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 21
8961: PUSH
8962: LD_INT 1
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 23
8971: PUSH
8972: LD_INT 1
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PPUSH
8984: CALL_OW 69
8988: ST_TO_ADDR
// for i in tmp do
8989: LD_ADDR_VAR 0 1
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: FOR_IN
9000: IFFALSE 9027
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: LD_INT 4
9012: PPUSH
9013: CALL_OW 12
9017: PPUSH
9018: LD_INT 300
9020: PPUSH
9021: CALL_OW 492
9025: GO 8999
9027: POP
9028: POP
// SetAchievement ( ACH_TIGER ) ;
9029: LD_STRING ACH_TIGER
9031: PPUSH
9032: CALL_OW 543
// end ;
9036: PPOPN 2
9038: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
9039: LD_INT 22
9041: PUSH
9042: LD_INT 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 34
9051: PUSH
9052: LD_INT 51
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: PUSH
9068: LD_INT 2
9070: GREATEREQUAL
9071: IFFALSE 9083
9073: GO 9075
9075: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
9076: LD_STRING ACH_CARGO
9078: PPUSH
9079: CALL_OW 543
9083: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
9084: LD_INT 0
9086: PPUSH
9087: PPUSH
9088: PPUSH
// for i = 1 to count do
9089: LD_ADDR_VAR 0 8
9093: PUSH
9094: DOUBLE
9095: LD_INT 1
9097: DEC
9098: ST_TO_ADDR
9099: LD_VAR 0 6
9103: PUSH
9104: FOR_TO
9105: IFFALSE 9186
// begin uc_side = side ;
9107: LD_ADDR_OWVAR 20
9111: PUSH
9112: LD_VAR 0 1
9116: ST_TO_ADDR
// uc_nation = nation ;
9117: LD_ADDR_OWVAR 21
9121: PUSH
9122: LD_VAR 0 2
9126: ST_TO_ADDR
// hc_gallery =  ;
9127: LD_ADDR_OWVAR 33
9131: PUSH
9132: LD_STRING 
9134: ST_TO_ADDR
// hc_name =  ;
9135: LD_ADDR_OWVAR 26
9139: PUSH
9140: LD_STRING 
9142: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
9143: LD_INT 0
9145: PPUSH
9146: LD_VAR 0 5
9150: PPUSH
9151: LD_VAR 0 4
9155: PPUSH
9156: CALL_OW 380
// un = CreateHuman ;
9160: LD_ADDR_VAR 0 9
9164: PUSH
9165: CALL_OW 44
9169: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
9170: LD_VAR 0 9
9174: PPUSH
9175: LD_VAR 0 3
9179: PPUSH
9180: CALL_OW 52
// end ;
9184: GO 9104
9186: POP
9187: POP
// end ;
9188: LD_VAR 0 7
9192: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
9193: LD_INT 0
9195: PPUSH
9196: PPUSH
9197: PPUSH
// uc_side := GetSide ( b ) ;
9198: LD_ADDR_OWVAR 20
9202: PUSH
9203: LD_VAR 0 2
9207: PPUSH
9208: CALL_OW 255
9212: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
9213: LD_ADDR_OWVAR 21
9217: PUSH
9218: LD_VAR 0 2
9222: PPUSH
9223: CALL_OW 248
9227: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
9228: LD_INT 0
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: LD_VAR 0 1
9238: PPUSH
9239: CALL_OW 380
// un = CreateHuman ;
9243: LD_ADDR_VAR 0 4
9247: PUSH
9248: CALL_OW 44
9252: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
9253: LD_ADDR_VAR 0 5
9257: PUSH
9258: LD_VAR 0 2
9262: PPUSH
9263: CALL_OW 254
9267: PUSH
9268: LD_INT 3
9270: MINUS
9271: ST_TO_ADDR
// if dir < 0 then
9272: LD_VAR 0 5
9276: PUSH
9277: LD_INT 0
9279: LESS
9280: IFFALSE 9296
// dir := 6 + dir ;
9282: LD_ADDR_VAR 0 5
9286: PUSH
9287: LD_INT 6
9289: PUSH
9290: LD_VAR 0 5
9294: PLUS
9295: ST_TO_ADDR
// SetDir ( un , dir ) ;
9296: LD_VAR 0 4
9300: PPUSH
9301: LD_VAR 0 5
9305: PPUSH
9306: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9310: LD_VAR 0 4
9314: PPUSH
9315: LD_VAR 0 2
9319: PPUSH
9320: CALL_OW 52
// end ;
9324: LD_VAR 0 3
9328: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
9329: LD_INT 0
9331: PPUSH
9332: PPUSH
9333: PPUSH
9334: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9335: LD_ADDR_VAR 0 7
9339: PUSH
9340: LD_INT 22
9342: PUSH
9343: LD_VAR 0 1
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 25
9354: PUSH
9355: LD_INT 2
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: LD_INT 24
9364: PUSH
9365: LD_INT 1000
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PPUSH
9377: CALL_OW 69
9381: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9382: LD_ADDR_VAR 0 5
9386: PUSH
9387: LD_VAR 0 3
9391: PPUSH
9392: LD_INT 22
9394: PUSH
9395: LD_VAR 0 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 21
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: LD_INT 24
9419: PUSH
9420: LD_INT 1000
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: PPUSH
9439: CALL_OW 70
9443: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9444: LD_VAR 0 5
9448: NOT
9449: PUSH
9450: LD_VAR 0 7
9454: NOT
9455: AND
9456: IFFALSE 9460
// exit ;
9458: GO 9656
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9460: LD_VAR 0 5
9464: NOT
9465: PUSH
9466: LD_VAR 0 7
9470: PPUSH
9471: LD_INT 3
9473: PUSH
9474: LD_INT 54
9476: PUSH
9477: EMPTY
9478: LIST
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 72
9488: AND
9489: PUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: CALL_OW 302
9499: AND
9500: IFFALSE 9534
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9502: LD_VAR 0 7
9506: PPUSH
9507: LD_INT 3
9509: PUSH
9510: LD_INT 54
9512: PUSH
9513: EMPTY
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PPUSH
9520: CALL_OW 72
9524: PPUSH
9525: LD_VAR 0 2
9529: PPUSH
9530: CALL_OW 120
// if buildingsList then
9534: LD_VAR 0 5
9538: IFFALSE 9656
// begin for i in engineerOkList do
9540: LD_ADDR_VAR 0 6
9544: PUSH
9545: LD_VAR 0 7
9549: PUSH
9550: FOR_IN
9551: IFFALSE 9654
// if IsInUnit ( i ) then
9553: LD_VAR 0 6
9557: PPUSH
9558: CALL_OW 310
9562: IFFALSE 9575
// ComExitBuilding ( i ) else
9564: LD_VAR 0 6
9568: PPUSH
9569: CALL_OW 122
9573: GO 9652
// if GetLives ( i ) > 650 then
9575: LD_VAR 0 6
9579: PPUSH
9580: CALL_OW 256
9584: PUSH
9585: LD_INT 650
9587: GREATER
9588: IFFALSE 9616
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9590: LD_VAR 0 6
9594: PPUSH
9595: LD_VAR 0 5
9599: PPUSH
9600: LD_VAR 0 6
9604: PPUSH
9605: CALL_OW 74
9609: PPUSH
9610: CALL_OW 130
9614: GO 9652
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9616: LD_VAR 0 6
9620: PPUSH
9621: LD_INT 56
9623: PPUSH
9624: LD_INT 10
9626: PPUSH
9627: CALL_OW 297
9631: PUSH
9632: LD_INT 8
9634: GREATER
9635: IFFALSE 9652
// ComMoveXY ( i , 56 , 10 ) ;
9637: LD_VAR 0 6
9641: PPUSH
9642: LD_INT 56
9644: PPUSH
9645: LD_INT 10
9647: PPUSH
9648: CALL_OW 111
9652: GO 9550
9654: POP
9655: POP
// end ; end ;
9656: LD_VAR 0 4
9660: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9661: LD_INT 0
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9667: LD_ADDR_VAR 0 6
9671: PUSH
9672: LD_INT 22
9674: PUSH
9675: LD_VAR 0 1
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 25
9686: PUSH
9687: LD_INT 4
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 24
9696: PUSH
9697: LD_INT 250
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: PPUSH
9709: CALL_OW 69
9713: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9714: LD_ADDR_VAR 0 8
9718: PUSH
9719: LD_VAR 0 3
9723: PPUSH
9724: LD_INT 22
9726: PUSH
9727: LD_VAR 0 1
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 21
9738: PUSH
9739: LD_INT 1
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 3
9748: PUSH
9749: LD_INT 24
9751: PUSH
9752: LD_INT 650
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PPUSH
9768: CALL_OW 70
9772: ST_TO_ADDR
// if not damageUnits and not sciList then
9773: LD_VAR 0 8
9777: NOT
9778: PUSH
9779: LD_VAR 0 6
9783: NOT
9784: AND
9785: IFFALSE 9789
// exit ;
9787: GO 9928
// if damageUnits then
9789: LD_VAR 0 8
9793: IFFALSE 9872
// begin for i in sciList do
9795: LD_ADDR_VAR 0 7
9799: PUSH
9800: LD_VAR 0 6
9804: PUSH
9805: FOR_IN
9806: IFFALSE 9868
// if IsInUnit ( i ) then
9808: LD_VAR 0 7
9812: PPUSH
9813: CALL_OW 310
9817: IFFALSE 9830
// ComExitBuilding ( i ) else
9819: LD_VAR 0 7
9823: PPUSH
9824: CALL_OW 122
9828: GO 9866
// if not HasTask ( i ) then
9830: LD_VAR 0 7
9834: PPUSH
9835: CALL_OW 314
9839: NOT
9840: IFFALSE 9866
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9842: LD_VAR 0 7
9846: PPUSH
9847: LD_VAR 0 8
9851: PPUSH
9852: LD_VAR 0 7
9856: PPUSH
9857: CALL_OW 74
9861: PPUSH
9862: CALL_OW 128
9866: GO 9805
9868: POP
9869: POP
// end else
9870: GO 9928
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9872: LD_VAR 0 6
9876: PPUSH
9877: LD_INT 3
9879: PUSH
9880: LD_INT 54
9882: PUSH
9883: EMPTY
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PPUSH
9890: CALL_OW 72
9894: IFFALSE 9928
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9896: LD_VAR 0 6
9900: PPUSH
9901: LD_INT 3
9903: PUSH
9904: LD_INT 54
9906: PUSH
9907: EMPTY
9908: LIST
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PPUSH
9914: CALL_OW 72
9918: PPUSH
9919: LD_VAR 0 4
9923: PPUSH
9924: CALL_OW 120
// end ;
9928: LD_VAR 0 5
9932: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9933: LD_INT 0
9935: PPUSH
9936: PPUSH
9937: PPUSH
9938: PPUSH
// if not defendersList then
9939: LD_VAR 0 3
9943: NOT
9944: IFFALSE 9948
// exit ;
9946: GO 10330
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9948: LD_ADDR_VAR 0 7
9952: PUSH
9953: LD_VAR 0 1
9957: PPUSH
9958: LD_INT 22
9960: PUSH
9961: LD_VAR 0 2
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 2
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 1
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 70
10006: ST_TO_ADDR
// if enemy then
10007: LD_VAR 0 7
10011: IFFALSE 10232
// begin for i in defendersList do
10013: LD_ADDR_VAR 0 6
10017: PUSH
10018: LD_VAR 0 3
10022: PUSH
10023: FOR_IN
10024: IFFALSE 10228
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
10026: LD_VAR 0 6
10030: PPUSH
10031: CALL_OW 310
10035: PUSH
10036: LD_VAR 0 6
10040: PPUSH
10041: CALL_OW 256
10045: PUSH
10046: LD_INT 500
10048: GREATER
10049: AND
10050: IFFALSE 10063
// ComExitBuilding ( i ) else
10052: LD_VAR 0 6
10056: PPUSH
10057: CALL_OW 122
10061: GO 10226
// if GetLives ( i ) > 650 then
10063: LD_VAR 0 6
10067: PPUSH
10068: CALL_OW 256
10072: PUSH
10073: LD_INT 650
10075: GREATER
10076: IFFALSE 10129
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
10078: LD_ADDR_VAR 0 8
10082: PUSH
10083: LD_VAR 0 7
10087: PPUSH
10088: LD_VAR 0 6
10092: PPUSH
10093: CALL_OW 74
10097: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
10098: LD_VAR 0 6
10102: PPUSH
10103: LD_VAR 0 8
10107: PPUSH
10108: CALL_OW 250
10112: PPUSH
10113: LD_VAR 0 8
10117: PPUSH
10118: CALL_OW 251
10122: PPUSH
10123: CALL_OW 114
// end else
10127: GO 10226
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
10129: LD_INT 22
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 25
10141: PUSH
10142: LD_INT 4
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PPUSH
10153: CALL_OW 69
10157: IFFALSE 10197
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
10159: LD_VAR 0 6
10163: PPUSH
10164: LD_INT 56
10166: PPUSH
10167: LD_INT 10
10169: PPUSH
10170: CALL_OW 297
10174: PUSH
10175: LD_INT 8
10177: GREATER
10178: IFFALSE 10195
// ComMoveXY ( i , 56 , 10 ) ;
10180: LD_VAR 0 6
10184: PPUSH
10185: LD_INT 56
10187: PPUSH
10188: LD_INT 10
10190: PPUSH
10191: CALL_OW 111
// end else
10195: GO 10226
// if GetLives ( i ) <= 500 then
10197: LD_VAR 0 6
10201: PPUSH
10202: CALL_OW 256
10206: PUSH
10207: LD_INT 500
10209: LESSEQUAL
10210: IFFALSE 10226
// ComEnterUnit ( i , building ) ;
10212: LD_VAR 0 6
10216: PPUSH
10217: LD_VAR 0 4
10221: PPUSH
10222: CALL_OW 120
// end ;
10226: GO 10023
10228: POP
10229: POP
// end else
10230: GO 10330
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 56
10239: PUSH
10240: EMPTY
10241: LIST
10242: PUSH
10243: LD_INT 3
10245: PUSH
10246: LD_INT 60
10248: PUSH
10249: EMPTY
10250: LIST
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 24
10258: PUSH
10259: LD_INT 1000
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: PPUSH
10271: CALL_OW 72
10275: IFFALSE 10330
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
10277: LD_VAR 0 3
10281: PPUSH
10282: LD_INT 56
10284: PUSH
10285: EMPTY
10286: LIST
10287: PUSH
10288: LD_INT 3
10290: PUSH
10291: LD_INT 60
10293: PUSH
10294: EMPTY
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 24
10303: PUSH
10304: LD_INT 1000
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 72
10320: PPUSH
10321: LD_VAR 0 4
10325: PPUSH
10326: CALL_OW 120
// end ;
10330: LD_VAR 0 5
10334: RET
// export function RussianTrap ; var i ; begin
10335: LD_INT 0
10337: PPUSH
10338: PPUSH
// if GetSide ( Brian ) = 4 then
10339: LD_EXP 6
10343: PPUSH
10344: CALL_OW 255
10348: PUSH
10349: LD_INT 4
10351: EQUAL
10352: IFFALSE 10375
// SetLives ( [ Brian , Jerry ] , 0 ) ;
10354: LD_EXP 6
10358: PUSH
10359: LD_EXP 7
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: LD_INT 0
10370: PPUSH
10371: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10375: LD_ADDR_VAR 0 2
10379: PUSH
10380: LD_INT 22
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 1
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PPUSH
10404: CALL_OW 69
10408: PUSH
10409: FOR_IN
10410: IFFALSE 10520
// begin ComExitBuilding ( i ) ;
10412: LD_VAR 0 2
10416: PPUSH
10417: CALL_OW 122
// wait ( 0 0$1 ) ;
10421: LD_INT 35
10423: PPUSH
10424: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10428: LD_VAR 0 2
10432: PPUSH
10433: LD_INT 120
10435: PPUSH
10436: LD_INT 56
10438: PPUSH
10439: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10443: LD_VAR 0 2
10447: PPUSH
10448: LD_INT 111
10450: PPUSH
10451: LD_INT 37
10453: PPUSH
10454: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10458: LD_INT 33
10460: PPUSH
10461: CALL_OW 255
10465: PUSH
10466: LD_INT 3
10468: EQUAL
10469: PUSH
10470: LD_INT 33
10472: PPUSH
10473: CALL_OW 302
10477: AND
10478: IFFALSE 10494
// AddComEnterUnit ( i , arm2 ) else
10480: LD_VAR 0 2
10484: PPUSH
10485: LD_INT 33
10487: PPUSH
10488: CALL_OW 180
10492: GO 10518
// begin AddComCrawl ( i ) ;
10494: LD_VAR 0 2
10498: PPUSH
10499: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10503: LD_VAR 0 2
10507: PPUSH
10508: LD_INT 109
10510: PPUSH
10511: LD_INT 30
10513: PPUSH
10514: CALL_OW 174
// end ; end ;
10518: GO 10409
10520: POP
10521: POP
// end ;
10522: LD_VAR 0 1
10526: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10527: LD_INT 0
10529: PPUSH
10530: PPUSH
10531: PPUSH
10532: PPUSH
10533: PPUSH
// nearestDist := 1000 ;
10534: LD_ADDR_VAR 0 4
10538: PUSH
10539: LD_INT 1000
10541: ST_TO_ADDR
// nearestUn := un ;
10542: LD_ADDR_VAR 0 5
10546: PUSH
10547: LD_VAR 0 1
10551: ST_TO_ADDR
// for sold in units do
10552: LD_ADDR_VAR 0 6
10556: PUSH
10557: LD_VAR 0 2
10561: PUSH
10562: FOR_IN
10563: IFFALSE 10619
// begin dist := GetDistUnits ( un , sold ) ;
10565: LD_ADDR_VAR 0 7
10569: PUSH
10570: LD_VAR 0 1
10574: PPUSH
10575: LD_VAR 0 6
10579: PPUSH
10580: CALL_OW 296
10584: ST_TO_ADDR
// if dist < nearestDist then
10585: LD_VAR 0 7
10589: PUSH
10590: LD_VAR 0 4
10594: LESS
10595: IFFALSE 10617
// begin nearestUn := sold ;
10597: LD_ADDR_VAR 0 5
10601: PUSH
10602: LD_VAR 0 6
10606: ST_TO_ADDR
// nearestDist := dist ;
10607: LD_ADDR_VAR 0 4
10611: PUSH
10612: LD_VAR 0 7
10616: ST_TO_ADDR
// end ; end ;
10617: GO 10562
10619: POP
10620: POP
// result := NearestUn ;
10621: LD_ADDR_VAR 0 3
10625: PUSH
10626: LD_VAR 0 5
10630: ST_TO_ADDR
// end ;
10631: LD_VAR 0 3
10635: RET
// export function PrepareDifficulty ; begin
10636: LD_INT 0
10638: PPUSH
// if Difficulty = 1 then
10639: LD_OWVAR 67
10643: PUSH
10644: LD_INT 1
10646: EQUAL
10647: IFFALSE 10710
// begin RemoveUnit ( brw2 ) ;
10649: LD_INT 9
10651: PPUSH
10652: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10656: LD_INT 30
10658: PPUSH
10659: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10663: LD_INT 52
10665: PPUSH
10666: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10670: LD_INT 63
10672: PPUSH
10673: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10677: LD_INT 5
10679: PUSH
10680: LD_INT 4
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PPUSH
10687: LD_INT 60
10689: PPUSH
10690: CALL_OW 240
// RuSoldMinLevel = 0 ;
10694: LD_ADDR_EXP 13
10698: PUSH
10699: LD_INT 0
10701: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10702: LD_ADDR_EXP 14
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// end ; if Difficulty = 2 then
10710: LD_OWVAR 67
10714: PUSH
10715: LD_INT 2
10717: EQUAL
10718: IFFALSE 10760
// begin RemoveUnit ( brw4 ) ;
10720: LD_INT 52
10722: PPUSH
10723: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10727: LD_INT 5
10729: PUSH
10730: LD_INT 4
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PPUSH
10737: LD_INT 50
10739: PPUSH
10740: CALL_OW 240
// RuSoldMinLevel = 1 ;
10744: LD_ADDR_EXP 13
10748: PUSH
10749: LD_INT 1
10751: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10752: LD_ADDR_EXP 14
10756: PUSH
10757: LD_INT 2
10759: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10760: LD_OWVAR 67
10764: PUSH
10765: LD_INT 3
10767: GREATEREQUAL
10768: IFFALSE 10803
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10770: LD_INT 5
10772: PUSH
10773: LD_INT 4
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PPUSH
10780: LD_INT 40
10782: PPUSH
10783: CALL_OW 240
// RuSoldMinLevel = 2 ;
10787: LD_ADDR_EXP 13
10791: PUSH
10792: LD_INT 2
10794: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10795: LD_ADDR_EXP 14
10799: PUSH
10800: LD_INT 3
10802: ST_TO_ADDR
// end ; end ;
10803: LD_VAR 0 1
10807: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10808: LD_INT 0
10810: PPUSH
10811: PPUSH
10812: PPUSH
// if not vehicles then
10813: LD_VAR 0 1
10817: NOT
10818: IFFALSE 10822
// exit ;
10820: GO 10952
// tmp := [ ] ;
10822: LD_ADDR_VAR 0 5
10826: PUSH
10827: EMPTY
10828: ST_TO_ADDR
// for i in vehicles do
10829: LD_ADDR_VAR 0 4
10833: PUSH
10834: LD_VAR 0 1
10838: PUSH
10839: FOR_IN
10840: IFFALSE 10936
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10842: LD_ADDR_VAR 0 5
10846: PUSH
10847: LD_VAR 0 5
10851: PPUSH
10852: LD_VAR 0 5
10856: PUSH
10857: LD_INT 1
10859: PLUS
10860: PPUSH
10861: LD_VAR 0 4
10865: PPUSH
10866: CALL_OW 265
10870: PUSH
10871: LD_VAR 0 4
10875: PPUSH
10876: CALL_OW 262
10880: PUSH
10881: LD_VAR 0 4
10885: PPUSH
10886: CALL_OW 263
10890: PUSH
10891: LD_VAR 0 4
10895: PPUSH
10896: CALL_OW 264
10900: PUSH
10901: LD_VAR 0 4
10905: PPUSH
10906: CALL_OW 261
10910: PUSH
10911: LD_VAR 0 4
10915: PPUSH
10916: CALL_OW 256
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 1
10933: ST_TO_ADDR
10934: GO 10839
10936: POP
10937: POP
// SaveVariable ( tmp , ident ) ;
10938: LD_VAR 0 5
10942: PPUSH
10943: LD_VAR 0 2
10947: PPUSH
10948: CALL_OW 39
// end ; end_of_file
10952: LD_VAR 0 3
10956: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10957: LD_INT 0
10959: PPUSH
10960: PPUSH
10961: PPUSH
// prefix := 01_ ;
10962: LD_ADDR_VAR 0 3
10966: PUSH
10967: LD_STRING 01_
10969: ST_TO_ADDR
// uc_side := 1 ;
10970: LD_ADDR_OWVAR 20
10974: PUSH
10975: LD_INT 1
10977: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10978: LD_ADDR_EXP 1
10982: PUSH
10983: LD_STRING JMM
10985: PPUSH
10986: LD_EXP 35
10990: NOT
10991: PPUSH
10992: LD_VAR 0 3
10996: PPUSH
10997: CALL 37631 0 3
11001: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
11002: LD_ADDR_VAR 0 2
11006: PUSH
11007: LD_STRING 01_JMMLifePoints_1
11009: PPUSH
11010: LD_INT 1000
11012: PPUSH
11013: CALL_OW 30
11017: ST_TO_ADDR
// if plive < 250 then
11018: LD_VAR 0 2
11022: PUSH
11023: LD_INT 250
11025: LESS
11026: IFFALSE 11036
// plive := 300 ;
11028: LD_ADDR_VAR 0 2
11032: PUSH
11033: LD_INT 300
11035: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
11036: LD_EXP 1
11040: PPUSH
11041: LD_VAR 0 2
11045: PPUSH
11046: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
11050: LD_ADDR_EXP 9
11054: PUSH
11055: LD_STRING Powell
11057: PPUSH
11058: CALL_OW 25
11062: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
11063: LD_ADDR_EXP 2
11067: PUSH
11068: LD_STRING Bobby
11070: PPUSH
11071: LD_EXP 35
11075: NOT
11076: PPUSH
11077: LD_VAR 0 3
11081: PPUSH
11082: CALL 37631 0 3
11086: ST_TO_ADDR
// if Bobby then
11087: LD_EXP 2
11091: IFFALSE 11141
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
11093: LD_ADDR_VAR 0 2
11097: PUSH
11098: LD_STRING 01_BobbyLifePoints_1
11100: PPUSH
11101: LD_INT 1000
11103: PPUSH
11104: CALL_OW 30
11108: ST_TO_ADDR
// if plive < 250 then
11109: LD_VAR 0 2
11113: PUSH
11114: LD_INT 250
11116: LESS
11117: IFFALSE 11127
// plive := 300 ;
11119: LD_ADDR_VAR 0 2
11123: PUSH
11124: LD_INT 300
11126: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
11127: LD_EXP 2
11131: PPUSH
11132: LD_VAR 0 2
11136: PPUSH
11137: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
11141: LD_ADDR_EXP 3
11145: PUSH
11146: LD_STRING Cyrus
11148: PPUSH
11149: LD_EXP 35
11153: NOT
11154: PPUSH
11155: LD_VAR 0 3
11159: PPUSH
11160: CALL 37631 0 3
11164: ST_TO_ADDR
// if Cyrus then
11165: LD_EXP 3
11169: IFFALSE 11219
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
11171: LD_ADDR_VAR 0 2
11175: PUSH
11176: LD_STRING 01_CyrusLifePoints_1
11178: PPUSH
11179: LD_INT 1000
11181: PPUSH
11182: CALL_OW 30
11186: ST_TO_ADDR
// if plive < 250 then
11187: LD_VAR 0 2
11191: PUSH
11192: LD_INT 250
11194: LESS
11195: IFFALSE 11205
// plive := 300 ;
11197: LD_ADDR_VAR 0 2
11201: PUSH
11202: LD_INT 300
11204: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
11205: LD_EXP 3
11209: PPUSH
11210: LD_VAR 0 2
11214: PPUSH
11215: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
11219: LD_ADDR_EXP 5
11223: PUSH
11224: LD_STRING Khatam
11226: PPUSH
11227: CALL_OW 25
11231: ST_TO_ADDR
// uc_side := 4 ;
11232: LD_ADDR_OWVAR 20
11236: PUSH
11237: LD_INT 4
11239: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
11240: LD_ADDR_EXP 4
11244: PUSH
11245: LD_STRING Lisa
11247: PPUSH
11248: CALL_OW 25
11252: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
11253: LD_EXP 1
11257: PPUSH
11258: LD_INT 3
11260: PPUSH
11261: LD_INT 0
11263: PPUSH
11264: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
11268: LD_EXP 2
11272: PPUSH
11273: LD_INT 3
11275: PPUSH
11276: LD_INT 0
11278: PPUSH
11279: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
11283: LD_EXP 3
11287: PPUSH
11288: LD_INT 3
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
11298: LD_EXP 4
11302: PPUSH
11303: LD_INT 5
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: CALL_OW 49
// ComCrawl ( Lisa ) ;
11313: LD_EXP 4
11317: PPUSH
11318: CALL_OW 137
// end ;
11322: LD_VAR 0 1
11326: RET
// export function PrepareLisSquad ; var i , un ; begin
11327: LD_INT 0
11329: PPUSH
11330: PPUSH
11331: PPUSH
// uc_side := 4 ;
11332: LD_ADDR_OWVAR 20
11336: PUSH
11337: LD_INT 4
11339: ST_TO_ADDR
// uc_nation := 1 ;
11340: LD_ADDR_OWVAR 21
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// hc_class := 2 ;
11348: LD_ADDR_OWVAR 28
11352: PUSH
11353: LD_INT 2
11355: ST_TO_ADDR
// hc_sex := sex_male ;
11356: LD_ADDR_OWVAR 27
11360: PUSH
11361: LD_INT 1
11363: ST_TO_ADDR
// hc_gallery :=  ;
11364: LD_ADDR_OWVAR 33
11368: PUSH
11369: LD_STRING 
11371: ST_TO_ADDR
// hc_name :=  ;
11372: LD_ADDR_OWVAR 26
11376: PUSH
11377: LD_STRING 
11379: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11380: LD_ADDR_OWVAR 30
11384: PUSH
11385: LD_INT 0
11387: PUSH
11388: LD_INT 1
11390: PUSH
11391: LD_INT 0
11393: PUSH
11394: LD_INT 0
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11403: LD_ADDR_OWVAR 31
11407: PUSH
11408: LD_INT 1
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: LD_INT 0
11416: PUSH
11417: LD_INT 0
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: ST_TO_ADDR
// un := CreateHuman ;
11426: LD_ADDR_VAR 0 3
11430: PUSH
11431: CALL_OW 44
11435: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11436: LD_VAR 0 3
11440: PPUSH
11441: LD_INT 6
11443: PPUSH
11444: LD_INT 0
11446: PPUSH
11447: CALL_OW 49
// hc_sex := sex_female ;
11451: LD_ADDR_OWVAR 27
11455: PUSH
11456: LD_INT 2
11458: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11459: LD_ADDR_OWVAR 30
11463: PUSH
11464: LD_INT 0
11466: PUSH
11467: LD_INT 0
11469: PUSH
11470: LD_INT 0
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11482: LD_ADDR_OWVAR 31
11486: PUSH
11487: LD_INT 0
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: LD_INT 0
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: ST_TO_ADDR
// un := CreateHuman ;
11505: LD_ADDR_VAR 0 3
11509: PUSH
11510: CALL_OW 44
11514: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 6
11522: PPUSH
11523: LD_INT 0
11525: PPUSH
11526: CALL_OW 49
// if not Bobby and not Cyrus then
11530: LD_EXP 2
11534: NOT
11535: PUSH
11536: LD_EXP 3
11540: NOT
11541: AND
11542: IFFALSE 11631
// begin hc_class := 1 ;
11544: LD_ADDR_OWVAR 28
11548: PUSH
11549: LD_INT 1
11551: ST_TO_ADDR
// hc_sex := sex_male ;
11552: LD_ADDR_OWVAR 27
11556: PUSH
11557: LD_INT 1
11559: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11560: LD_ADDR_OWVAR 30
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: LD_INT 3
11570: PUSH
11571: LD_INT 1
11573: PUSH
11574: LD_INT 0
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11583: LD_ADDR_OWVAR 31
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: LD_INT 1
11596: PUSH
11597: LD_INT 0
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: ST_TO_ADDR
// un := CreateHuman ;
11606: LD_ADDR_VAR 0 3
11610: PUSH
11611: CALL_OW 44
11615: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 31
11623: PPUSH
11624: LD_INT 0
11626: PPUSH
11627: CALL_OW 49
// end ; InitHc ;
11631: CALL_OW 19
// end ;
11635: LD_VAR 0 1
11639: RET
// export function PrepareOtherAmericans ; begin
11640: LD_INT 0
11642: PPUSH
// uc_side := 4 ;
11643: LD_ADDR_OWVAR 20
11647: PUSH
11648: LD_INT 4
11650: ST_TO_ADDR
// uc_nation := 1 ;
11651: LD_ADDR_OWVAR 21
11655: PUSH
11656: LD_INT 1
11658: ST_TO_ADDR
// hc_gallery :=  ;
11659: LD_ADDR_OWVAR 33
11663: PUSH
11664: LD_STRING 
11666: ST_TO_ADDR
// hc_name := Tom Garvin ;
11667: LD_ADDR_OWVAR 26
11671: PUSH
11672: LD_STRING Tom Garvin
11674: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11675: LD_INT 1
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: LD_INT 2
11683: PPUSH
11684: CALL_OW 380
// Brian := CreateHuman ;
11688: LD_ADDR_EXP 6
11692: PUSH
11693: CALL_OW 44
11697: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11698: LD_EXP 6
11702: PPUSH
11703: LD_INT 10
11705: PPUSH
11706: LD_INT 0
11708: PPUSH
11709: CALL_OW 49
// hc_name := Jerry White ;
11713: LD_ADDR_OWVAR 26
11717: PUSH
11718: LD_STRING Jerry White
11720: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11721: LD_INT 1
11723: PPUSH
11724: LD_INT 3
11726: PPUSH
11727: LD_INT 2
11729: PPUSH
11730: CALL_OW 380
// Jerry := CreateHuman ;
11734: LD_ADDR_EXP 7
11738: PUSH
11739: CALL_OW 44
11743: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11744: LD_EXP 7
11748: PPUSH
11749: LD_INT 10
11751: PPUSH
11752: LD_INT 0
11754: PPUSH
11755: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11759: LD_EXP 6
11763: PUSH
11764: LD_EXP 7
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 140
// end ;
11777: LD_VAR 0 1
11781: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un , hexes ; begin
11782: LD_INT 0
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
// hexes := AreaToList ( DeadsSpawn , 0 ) ;
11788: LD_ADDR_VAR 0 4
11792: PUSH
11793: LD_INT 16
11795: PPUSH
11796: LD_INT 0
11798: PPUSH
11799: CALL_OW 517
11803: ST_TO_ADDR
// for i = 1 to 6 do
11804: LD_ADDR_VAR 0 2
11808: PUSH
11809: DOUBLE
11810: LD_INT 1
11812: DEC
11813: ST_TO_ADDR
11814: LD_INT 6
11816: PUSH
11817: FOR_TO
11818: IFFALSE 11964
// begin uc_side := 4 ;
11820: LD_ADDR_OWVAR 20
11824: PUSH
11825: LD_INT 4
11827: ST_TO_ADDR
// uc_nation := 1 ;
11828: LD_ADDR_OWVAR 21
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// hc_gallery :=  ;
11836: LD_ADDR_OWVAR 33
11840: PUSH
11841: LD_STRING 
11843: ST_TO_ADDR
// hc_name :=  ;
11844: LD_ADDR_OWVAR 26
11848: PUSH
11849: LD_STRING 
11851: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 1 ) ;
11852: LD_INT 0
11854: PPUSH
11855: LD_INT 1
11857: PUSH
11858: LD_INT 1
11860: PUSH
11861: LD_INT 4
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: PUSH
11869: LD_VAR 0 2
11873: PUSH
11874: LD_INT 3
11876: MOD
11877: PUSH
11878: LD_INT 1
11880: PLUS
11881: ARRAY
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: CALL_OW 380
// un := CreateHuman ;
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: CALL_OW 44
11899: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11900: LD_VAR 0 3
11904: PPUSH
11905: LD_INT 0
11907: PPUSH
11908: LD_INT 5
11910: PPUSH
11911: CALL_OW 12
11915: PPUSH
11916: CALL_OW 233
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_VAR 0 4
11929: PUSH
11930: LD_INT 1
11932: ARRAY
11933: PUSH
11934: LD_VAR 0 2
11938: ARRAY
11939: PPUSH
11940: LD_VAR 0 4
11944: PUSH
11945: LD_INT 2
11947: ARRAY
11948: PUSH
11949: LD_VAR 0 2
11953: ARRAY
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 601
// end ;
11962: GO 11817
11964: POP
11965: POP
// DyingSold := CreateHuman ;
11966: LD_ADDR_EXP 36
11970: PUSH
11971: CALL_OW 44
11975: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11976: LD_EXP 36
11980: PPUSH
11981: LD_INT 16
11983: PPUSH
11984: LD_INT 0
11986: PPUSH
11987: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11991: LD_EXP 36
11995: PPUSH
11996: LD_INT 250
11998: PPUSH
11999: CALL_OW 234
// end ; end_of_file
12003: LD_VAR 0 1
12007: RET
// export function PrepareRussianHeroes ; var tmp ; begin
12008: LD_INT 0
12010: PPUSH
12011: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
12012: LD_ADDR_VAR 0 2
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_INT 1
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 23
12029: PUSH
12030: LD_INT 1
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 25
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 50
12049: PUSH
12050: EMPTY
12051: LIST
12052: PUSH
12053: LD_INT 56
12055: PUSH
12056: EMPTY
12057: LIST
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: PPUSH
12066: CALL_OW 69
12070: PUSH
12071: LD_EXP 1
12075: PUSH
12076: EMPTY
12077: LIST
12078: DIFF
12079: ST_TO_ADDR
// if not tmp then
12080: LD_VAR 0 2
12084: NOT
12085: IFFALSE 12089
// exit ;
12087: GO 12165
// uc_side = 6 ;
12089: LD_ADDR_OWVAR 20
12093: PUSH
12094: LD_INT 6
12096: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
12097: LD_ADDR_EXP 8
12101: PUSH
12102: LD_STRING Mikhail
12104: PPUSH
12105: CALL_OW 25
12109: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
12110: LD_EXP 8
12114: PPUSH
12115: LD_INT 3
12117: PPUSH
12118: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
12122: LD_EXP 8
12126: PPUSH
12127: LD_VAR 0 2
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PPUSH
12136: CALL_OW 250
12140: PPUSH
12141: LD_VAR 0 2
12145: PUSH
12146: LD_INT 1
12148: ARRAY
12149: PPUSH
12150: CALL_OW 251
12154: PPUSH
12155: LD_INT 5
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: CALL_OW 50
// end ;
12165: LD_VAR 0 1
12169: RET
// export function PrepareRussianCommander ; begin
12170: LD_INT 0
12172: PPUSH
// uc_side = 3 ;
12173: LD_ADDR_OWVAR 20
12177: PUSH
12178: LD_INT 3
12180: ST_TO_ADDR
// uc_nation = 3 ;
12181: LD_ADDR_OWVAR 21
12185: PUSH
12186: LD_INT 3
12188: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
12189: LD_ADDR_EXP 19
12193: PUSH
12194: LD_STRING Natasza
12196: PPUSH
12197: CALL_OW 25
12201: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
12202: LD_EXP 19
12206: PPUSH
12207: LD_INT 24
12209: PPUSH
12210: LD_INT 0
12212: PPUSH
12213: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
12217: LD_EXP 19
12221: PPUSH
12222: LD_INT 56
12224: PPUSH
12225: LD_INT 16
12227: PPUSH
12228: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
12232: LD_ADDR_EXP 24
12236: PUSH
12237: LD_EXP 24
12241: PPUSH
12242: LD_EXP 24
12246: PUSH
12247: LD_INT 1
12249: PLUS
12250: PPUSH
12251: LD_EXP 19
12255: PPUSH
12256: CALL_OW 1
12260: ST_TO_ADDR
// end ;
12261: LD_VAR 0 1
12265: RET
// export function PrepareSouthBase ; var i , un ; begin
12266: LD_INT 0
12268: PPUSH
12269: PPUSH
12270: PPUSH
// for i = 1 to 2 do
12271: LD_ADDR_VAR 0 2
12275: PUSH
12276: DOUBLE
12277: LD_INT 1
12279: DEC
12280: ST_TO_ADDR
12281: LD_INT 2
12283: PUSH
12284: FOR_TO
12285: IFFALSE 12394
// begin uc_side = 3 ;
12287: LD_ADDR_OWVAR 20
12291: PUSH
12292: LD_INT 3
12294: ST_TO_ADDR
// uc_nation = 3 ;
12295: LD_ADDR_OWVAR 21
12299: PUSH
12300: LD_INT 3
12302: ST_TO_ADDR
// hc_gallery =  ;
12303: LD_ADDR_OWVAR 33
12307: PUSH
12308: LD_STRING 
12310: ST_TO_ADDR
// hc_name =  ;
12311: LD_ADDR_OWVAR 26
12315: PUSH
12316: LD_STRING 
12318: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12319: LD_INT 1
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: LD_EXP 13
12329: PPUSH
12330: LD_EXP 14
12334: PPUSH
12335: CALL_OW 12
12339: PPUSH
12340: CALL_OW 380
// hc_importance = 0 ;
12344: LD_ADDR_OWVAR 32
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// un = CreateHuman ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: CALL_OW 44
12361: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 11
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
12377: LD_VAR 0 3
12381: PPUSH
12382: LD_INT 111
12384: PPUSH
12385: LD_INT 38
12387: PPUSH
12388: CALL_OW 118
// end ;
12392: GO 12284
12394: POP
12395: POP
// for i = 1 to 2 do
12396: LD_ADDR_VAR 0 2
12400: PUSH
12401: DOUBLE
12402: LD_INT 1
12404: DEC
12405: ST_TO_ADDR
12406: LD_INT 2
12408: PUSH
12409: FOR_TO
12410: IFFALSE 12493
// begin uc_side = 3 ;
12412: LD_ADDR_OWVAR 20
12416: PUSH
12417: LD_INT 3
12419: ST_TO_ADDR
// uc_nation = 3 ;
12420: LD_ADDR_OWVAR 21
12424: PUSH
12425: LD_INT 3
12427: ST_TO_ADDR
// hc_gallery =  ;
12428: LD_ADDR_OWVAR 33
12432: PUSH
12433: LD_STRING 
12435: ST_TO_ADDR
// hc_name =  ;
12436: LD_ADDR_OWVAR 26
12440: PUSH
12441: LD_STRING 
12443: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12444: LD_INT 0
12446: PPUSH
12447: LD_INT 3
12449: PPUSH
12450: LD_EXP 13
12454: PPUSH
12455: LD_EXP 14
12459: PPUSH
12460: CALL_OW 12
12464: PPUSH
12465: CALL_OW 380
// un = CreateHuman ;
12469: LD_ADDR_VAR 0 3
12473: PUSH
12474: CALL_OW 44
12478: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 10
12486: PPUSH
12487: CALL_OW 52
// end ;
12491: GO 12409
12493: POP
12494: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12495: LD_INT 3
12497: PPUSH
12498: LD_INT 3
12500: PPUSH
12501: LD_INT 33
12503: PPUSH
12504: LD_EXP 13
12508: PPUSH
12509: LD_EXP 14
12513: PPUSH
12514: CALL_OW 12
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: LD_INT 1
12524: PUSH
12525: LD_INT 2
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: LD_INT 3
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: PUSH
12540: LD_OWVAR 67
12544: ARRAY
12545: PPUSH
12546: CALL 9084 0 6
// for i in UnitsInside ( arm2 ) do
12550: LD_ADDR_VAR 0 2
12554: PUSH
12555: LD_INT 33
12557: PPUSH
12558: CALL_OW 313
12562: PUSH
12563: FOR_IN
12564: IFFALSE 12597
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12566: LD_ADDR_EXP 25
12570: PUSH
12571: LD_EXP 25
12575: PPUSH
12576: LD_EXP 25
12580: PUSH
12581: LD_INT 1
12583: PLUS
12584: PPUSH
12585: LD_VAR 0 2
12589: PPUSH
12590: CALL_OW 1
12594: ST_TO_ADDR
12595: GO 12563
12597: POP
12598: POP
// end ;
12599: LD_VAR 0 1
12603: RET
// export function PrepareNorthBase ; var i , un ; begin
12604: LD_INT 0
12606: PPUSH
12607: PPUSH
12608: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12609: LD_ADDR_VAR 0 2
12613: PUSH
12614: DOUBLE
12615: LD_INT 1
12617: DEC
12618: ST_TO_ADDR
12619: LD_INT 1
12621: PPUSH
12622: LD_INT 2
12624: PPUSH
12625: CALL_OW 12
12629: PUSH
12630: LD_INT 2
12632: PPUSH
12633: LD_INT 3
12635: PPUSH
12636: CALL_OW 12
12640: PUSH
12641: LD_INT 3
12643: PPUSH
12644: LD_INT 4
12646: PPUSH
12647: CALL_OW 12
12651: PUSH
12652: LD_INT 4
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: PUSH
12661: LD_OWVAR 67
12665: ARRAY
12666: PUSH
12667: FOR_TO
12668: IFFALSE 12754
// begin uc_side = 3 ;
12670: LD_ADDR_OWVAR 20
12674: PUSH
12675: LD_INT 3
12677: ST_TO_ADDR
// uc_nation = 3 ;
12678: LD_ADDR_OWVAR 21
12682: PUSH
12683: LD_INT 3
12685: ST_TO_ADDR
// hc_gallery =  ;
12686: LD_ADDR_OWVAR 33
12690: PUSH
12691: LD_STRING 
12693: ST_TO_ADDR
// hc_name =  ;
12694: LD_ADDR_OWVAR 26
12698: PUSH
12699: LD_STRING 
12701: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12702: LD_INT 0
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: LD_EXP 13
12712: PPUSH
12713: LD_EXP 14
12717: PPUSH
12718: CALL_OW 12
12722: PPUSH
12723: CALL_OW 380
// un = CreateHuman ;
12727: LD_ADDR_VAR 0 3
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 14
12744: PPUSH
12745: LD_INT 0
12747: PPUSH
12748: CALL_OW 49
// end ;
12752: GO 12667
12754: POP
12755: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12756: LD_INT 3
12758: PPUSH
12759: LD_INT 3
12761: PPUSH
12762: LD_INT 2
12764: PPUSH
12765: LD_EXP 13
12769: PPUSH
12770: LD_EXP 14
12774: PPUSH
12775: CALL_OW 12
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: LD_INT 2
12788: PPUSH
12789: CALL_OW 12
12793: PUSH
12794: LD_INT 1
12796: PPUSH
12797: LD_INT 3
12799: PPUSH
12800: CALL_OW 12
12804: PUSH
12805: LD_INT 1
12807: PPUSH
12808: LD_INT 3
12810: PPUSH
12811: CALL_OW 12
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: PUSH
12825: LD_OWVAR 67
12829: ARRAY
12830: PPUSH
12831: CALL 9084 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12835: LD_INT 3
12837: PPUSH
12838: LD_INT 3
12840: PPUSH
12841: LD_INT 23
12843: PPUSH
12844: LD_EXP 13
12848: PPUSH
12849: LD_EXP 14
12853: PPUSH
12854: CALL_OW 12
12858: PPUSH
12859: LD_INT 4
12861: PPUSH
12862: LD_INT 0
12864: PUSH
12865: LD_INT 1
12867: PUSH
12868: LD_INT 2
12870: PUSH
12871: LD_INT 2
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: LD_OWVAR 67
12884: ARRAY
12885: PPUSH
12886: CALL 9084 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12890: LD_INT 3
12892: PPUSH
12893: LD_INT 3
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: LD_EXP 13
12903: PPUSH
12904: LD_EXP 14
12908: PPUSH
12909: CALL_OW 12
12913: PPUSH
12914: LD_INT 2
12916: PPUSH
12917: LD_INT 1
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: LD_INT 3
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: PUSH
12935: LD_OWVAR 67
12939: ARRAY
12940: PPUSH
12941: CALL 9084 0 6
// for i in UnitsInside ( arm1 ) do
12945: LD_ADDR_VAR 0 2
12949: PUSH
12950: LD_INT 2
12952: PPUSH
12953: CALL_OW 313
12957: PUSH
12958: FOR_IN
12959: IFFALSE 12992
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12961: LD_ADDR_EXP 24
12965: PUSH
12966: LD_EXP 24
12970: PPUSH
12971: LD_EXP 24
12975: PUSH
12976: LD_INT 1
12978: PLUS
12979: PPUSH
12980: LD_VAR 0 2
12984: PPUSH
12985: CALL_OW 1
12989: ST_TO_ADDR
12990: GO 12958
12992: POP
12993: POP
// end ;
12994: LD_VAR 0 1
12998: RET
// export function PrepareOtherRussians ; var i , un ; begin
12999: LD_INT 0
13001: PPUSH
13002: PPUSH
13003: PPUSH
// for i = 1 to 2 do
13004: LD_ADDR_VAR 0 2
13008: PUSH
13009: DOUBLE
13010: LD_INT 1
13012: DEC
13013: ST_TO_ADDR
13014: LD_INT 2
13016: PUSH
13017: FOR_TO
13018: IFFALSE 13119
// begin uc_side = 3 ;
13020: LD_ADDR_OWVAR 20
13024: PUSH
13025: LD_INT 3
13027: ST_TO_ADDR
// uc_nation = 3 ;
13028: LD_ADDR_OWVAR 21
13032: PUSH
13033: LD_INT 3
13035: ST_TO_ADDR
// hc_gallery =  ;
13036: LD_ADDR_OWVAR 33
13040: PUSH
13041: LD_STRING 
13043: ST_TO_ADDR
// hc_name =  ;
13044: LD_ADDR_OWVAR 26
13048: PUSH
13049: LD_STRING 
13051: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13052: LD_INT 0
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: LD_EXP 13
13062: PPUSH
13063: LD_EXP 14
13067: PPUSH
13068: CALL_OW 12
13072: PPUSH
13073: CALL_OW 380
// un = CreateHuman ;
13077: LD_ADDR_VAR 0 3
13081: PUSH
13082: CALL_OW 44
13086: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
13087: LD_VAR 0 3
13091: PPUSH
13092: LD_INT 9
13094: PPUSH
13095: LD_INT 0
13097: PPUSH
13098: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
13102: LD_VAR 0 3
13106: PPUSH
13107: LD_INT 80
13109: PPUSH
13110: LD_INT 73
13112: PPUSH
13113: CALL_OW 118
// end ;
13117: GO 13017
13119: POP
13120: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
13121: LD_ADDR_VAR 0 2
13125: PUSH
13126: LD_INT 22
13128: PUSH
13129: LD_INT 3
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PUSH
13136: LD_INT 30
13138: PUSH
13139: LD_INT 31
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PPUSH
13150: CALL_OW 69
13154: PUSH
13155: FOR_IN
13156: IFFALSE 13184
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
13158: LD_EXP 13
13162: PPUSH
13163: LD_EXP 14
13167: PPUSH
13168: CALL_OW 12
13172: PPUSH
13173: LD_VAR 0 2
13177: PPUSH
13178: CALL 9193 0 2
13182: GO 13155
13184: POP
13185: POP
// end ;
13186: LD_VAR 0 1
13190: RET
// export function PrepareCargoBays ; begin
13191: LD_INT 0
13193: PPUSH
// uc_side = 3 ;
13194: LD_ADDR_OWVAR 20
13198: PUSH
13199: LD_INT 3
13201: ST_TO_ADDR
// uc_nation = 3 ;
13202: LD_ADDR_OWVAR 21
13206: PUSH
13207: LD_INT 3
13209: ST_TO_ADDR
// vc_engine = 1 ;
13210: LD_ADDR_OWVAR 39
13214: PUSH
13215: LD_INT 1
13217: ST_TO_ADDR
// vc_control = 1 ;
13218: LD_ADDR_OWVAR 38
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// vc_weapon = 51 ;
13226: LD_ADDR_OWVAR 40
13230: PUSH
13231: LD_INT 51
13233: ST_TO_ADDR
// vc_chassis = 22 ;
13234: LD_ADDR_OWVAR 37
13238: PUSH
13239: LD_INT 22
13241: ST_TO_ADDR
// cargo1 = CreateVehicle ;
13242: LD_ADDR_EXP 15
13246: PUSH
13247: CALL_OW 45
13251: ST_TO_ADDR
// cargo2 = CreateVehicle ;
13252: LD_ADDR_EXP 16
13256: PUSH
13257: CALL_OW 45
13261: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
13262: LD_EXP 15
13266: PPUSH
13267: LD_INT 13
13269: PPUSH
13270: LD_INT 0
13272: PPUSH
13273: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
13277: LD_EXP 16
13281: PPUSH
13282: LD_INT 13
13284: PPUSH
13285: LD_INT 0
13287: PPUSH
13288: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13292: LD_EXP 15
13296: PPUSH
13297: LD_INT 2
13299: PPUSH
13300: LD_INT 70
13302: PUSH
13303: LD_INT 50
13305: PUSH
13306: LD_INT 30
13308: PUSH
13309: LD_INT 20
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: PUSH
13318: LD_OWVAR 67
13322: ARRAY
13323: PPUSH
13324: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
13328: LD_EXP 16
13332: PPUSH
13333: LD_INT 2
13335: PPUSH
13336: LD_INT 70
13338: PUSH
13339: LD_INT 50
13341: PUSH
13342: LD_INT 30
13344: PUSH
13345: LD_INT 20
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: PUSH
13354: LD_OWVAR 67
13358: ARRAY
13359: PPUSH
13360: CALL_OW 291
// hc_gallery =  ;
13364: LD_ADDR_OWVAR 33
13368: PUSH
13369: LD_STRING 
13371: ST_TO_ADDR
// hc_name =  ;
13372: LD_ADDR_OWVAR 26
13376: PUSH
13377: LD_STRING 
13379: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
13380: LD_INT 1
13382: PPUSH
13383: LD_INT 3
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: LD_INT 2
13391: PPUSH
13392: CALL_OW 12
13396: PPUSH
13397: CALL_OW 380
// driver1 = CreateHuman ;
13401: LD_ADDR_EXP 17
13405: PUSH
13406: CALL_OW 44
13410: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
13411: LD_EXP 17
13415: PPUSH
13416: LD_EXP 15
13420: PPUSH
13421: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13425: LD_ADDR_OWVAR 26
13429: PUSH
13430: LD_STRING Nikolai Andreyev
13432: ST_TO_ADDR
// driver2 = CreateHuman ;
13433: LD_ADDR_EXP 18
13437: PUSH
13438: CALL_OW 44
13442: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13443: LD_EXP 18
13447: PPUSH
13448: LD_EXP 16
13452: PPUSH
13453: CALL_OW 52
// end ;
13457: LD_VAR 0 1
13461: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13462: LD_INT 0
13464: PPUSH
13465: PPUSH
13466: PPUSH
13467: PPUSH
13468: PPUSH
13469: PPUSH
// uc_side = 3 ;
13470: LD_ADDR_OWVAR 20
13474: PUSH
13475: LD_INT 3
13477: ST_TO_ADDR
// uc_nation = 3 ;
13478: LD_ADDR_OWVAR 21
13482: PUSH
13483: LD_INT 3
13485: ST_TO_ADDR
// for i := 1 to count do
13486: LD_ADDR_VAR 0 4
13490: PUSH
13491: DOUBLE
13492: LD_INT 1
13494: DEC
13495: ST_TO_ADDR
13496: LD_VAR 0 1
13500: PUSH
13501: FOR_TO
13502: IFFALSE 13764
// begin vc_engine = 1 ;
13504: LD_ADDR_OWVAR 39
13508: PUSH
13509: LD_INT 1
13511: ST_TO_ADDR
// vc_control = 1 ;
13512: LD_ADDR_OWVAR 38
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13520: LD_ADDR_OWVAR 40
13524: PUSH
13525: LD_INT 42
13527: ST_TO_ADDR
// if Difficulty = 3 then
13528: LD_OWVAR 67
13532: PUSH
13533: LD_INT 3
13535: EQUAL
13536: IFFALSE 13565
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13538: LD_ADDR_OWVAR 40
13542: PUSH
13543: LD_INT 42
13545: PUSH
13546: LD_INT 43
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 1
13555: PPUSH
13556: LD_INT 2
13558: PPUSH
13559: CALL_OW 12
13563: ARRAY
13564: ST_TO_ADDR
// if Difficulty = 4 then
13565: LD_OWVAR 67
13569: PUSH
13570: LD_INT 4
13572: EQUAL
13573: IFFALSE 13610
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13575: LD_ADDR_OWVAR 40
13579: PUSH
13580: LD_INT 42
13582: PUSH
13583: LD_INT 43
13585: PUSH
13586: LD_INT 43
13588: PUSH
13589: LD_INT 44
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 1
13600: PPUSH
13601: LD_INT 4
13603: PPUSH
13604: CALL_OW 12
13608: ARRAY
13609: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13610: LD_ADDR_OWVAR 37
13614: PUSH
13615: LD_INT 21
13617: PUSH
13618: LD_INT 22
13620: PUSH
13621: LD_INT 22
13623: PUSH
13624: LD_INT 22
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: PUSH
13633: LD_OWVAR 67
13637: ARRAY
13638: ST_TO_ADDR
// veh = CreateVehicle ;
13639: LD_ADDR_VAR 0 5
13643: PUSH
13644: CALL_OW 45
13648: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13649: LD_VAR 0 5
13653: PPUSH
13654: LD_VAR 0 2
13658: PPUSH
13659: LD_INT 0
13661: PPUSH
13662: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13666: LD_ADDR_EXP 26
13670: PUSH
13671: LD_EXP 26
13675: PUSH
13676: LD_VAR 0 5
13680: ADD
13681: ST_TO_ADDR
// hc_gallery =  ;
13682: LD_ADDR_OWVAR 33
13686: PUSH
13687: LD_STRING 
13689: ST_TO_ADDR
// hc_name =  ;
13690: LD_ADDR_OWVAR 26
13694: PUSH
13695: LD_STRING 
13697: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13698: LD_INT 0
13700: PPUSH
13701: LD_INT 3
13703: PPUSH
13704: LD_EXP 13
13708: PPUSH
13709: LD_EXP 14
13713: PPUSH
13714: CALL_OW 12
13718: PPUSH
13719: CALL_OW 380
// un = CreateHuman ;
13723: LD_ADDR_VAR 0 6
13727: PUSH
13728: CALL_OW 44
13732: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13733: LD_VAR 0 6
13737: PPUSH
13738: LD_VAR 0 5
13742: PPUSH
13743: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13747: LD_VAR 0 6
13751: PPUSH
13752: LD_INT 14
13754: PPUSH
13755: LD_INT 9
13757: PPUSH
13758: CALL_OW 111
// end ;
13762: GO 13501
13764: POP
13765: POP
// wait ( 0 0$1 ) ;
13766: LD_INT 35
13768: PPUSH
13769: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13773: LD_INT 0
13775: PPUSH
13776: LD_INT 2
13778: PPUSH
13779: LD_EXP 13
13783: PPUSH
13784: LD_EXP 14
13788: PPUSH
13789: CALL_OW 12
13793: PPUSH
13794: CALL_OW 380
// un = CreateHuman ;
13798: LD_ADDR_VAR 0 6
13802: PUSH
13803: CALL_OW 44
13807: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13808: LD_ADDR_VAR 0 4
13812: PUSH
13813: DOUBLE
13814: LD_INT 1
13816: DEC
13817: ST_TO_ADDR
13818: LD_VAR 0 1
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 2
13828: MUL
13829: PLUS
13830: PUSH
13831: FOR_TO
13832: IFFALSE 13924
// begin hc_gallery =  ;
13834: LD_ADDR_OWVAR 33
13838: PUSH
13839: LD_STRING 
13841: ST_TO_ADDR
// hc_name =  ;
13842: LD_ADDR_OWVAR 26
13846: PUSH
13847: LD_STRING 
13849: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13850: LD_INT 1
13852: PPUSH
13853: LD_INT 1
13855: PPUSH
13856: LD_EXP 13
13860: PPUSH
13861: LD_EXP 14
13865: PPUSH
13866: CALL_OW 12
13870: PPUSH
13871: CALL_OW 380
// un = CreateHuman ;
13875: LD_ADDR_VAR 0 6
13879: PUSH
13880: CALL_OW 44
13884: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13885: LD_VAR 0 6
13889: PPUSH
13890: LD_INT 9
13892: PPUSH
13893: LD_INT 13
13895: PPUSH
13896: LD_INT 4
13898: PPUSH
13899: LD_INT 0
13901: PPUSH
13902: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13906: LD_ADDR_EXP 26
13910: PUSH
13911: LD_EXP 26
13915: PUSH
13916: LD_VAR 0 6
13920: ADD
13921: ST_TO_ADDR
// end ;
13922: GO 13831
13924: POP
13925: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13926: LD_ADDR_VAR 0 7
13930: PUSH
13931: LD_INT 26
13933: PPUSH
13934: LD_INT 22
13936: PUSH
13937: LD_INT 3
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 21
13946: PUSH
13947: LD_INT 1
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 26
13956: PUSH
13957: LD_INT 1
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: PPUSH
13969: CALL_OW 70
13973: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13974: LD_VAR 0 7
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: LD_STRING D9-Rus3-1
13985: PPUSH
13986: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13990: LD_VAR 0 7
13994: PUSH
13995: LD_INT 2
13997: ARRAY
13998: PPUSH
13999: LD_STRING D9-Russ-1
14001: PPUSH
14002: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
14006: LD_EXP 26
14010: PPUSH
14011: LD_INT 31
14013: PPUSH
14014: LD_INT 13
14016: PPUSH
14017: CALL_OW 114
// wait ( 0 0$3 ) ;
14021: LD_INT 105
14023: PPUSH
14024: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14028: LD_INT 35
14030: PPUSH
14031: CALL_OW 67
// for i in attackGroup do
14035: LD_ADDR_VAR 0 4
14039: PUSH
14040: LD_EXP 26
14044: PUSH
14045: FOR_IN
14046: IFFALSE 14413
// begin if IsDead ( i ) then
14048: LD_VAR 0 4
14052: PPUSH
14053: CALL_OW 301
14057: IFFALSE 14077
// begin attackGroup := attackGroup diff i ;
14059: LD_ADDR_EXP 26
14063: PUSH
14064: LD_EXP 26
14068: PUSH
14069: LD_VAR 0 4
14073: DIFF
14074: ST_TO_ADDR
// continue ;
14075: GO 14045
// end ; if not HasTask ( i ) and not GetTag ( i ) then
14077: LD_VAR 0 4
14081: PPUSH
14082: CALL_OW 314
14086: NOT
14087: PUSH
14088: LD_VAR 0 4
14092: PPUSH
14093: CALL_OW 110
14097: NOT
14098: AND
14099: IFFALSE 14135
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
14101: LD_VAR 0 4
14105: PPUSH
14106: LD_INT 22
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PPUSH
14116: CALL_OW 69
14120: PPUSH
14121: LD_VAR 0 4
14125: PPUSH
14126: CALL_OW 74
14130: PPUSH
14131: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
14135: LD_VAR 0 4
14139: PPUSH
14140: CALL_OW 110
14144: NOT
14145: PUSH
14146: LD_VAR 0 4
14150: PPUSH
14151: CALL_OW 256
14155: PUSH
14156: LD_INT 650
14158: LESS
14159: AND
14160: PUSH
14161: LD_VAR 0 4
14165: PPUSH
14166: CALL_OW 247
14170: PUSH
14171: LD_INT 2
14173: EQUAL
14174: AND
14175: IFFALSE 14204
// begin SetTag ( i , 1 ) ;
14177: LD_VAR 0 4
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
14189: LD_VAR 0 4
14193: PPUSH
14194: LD_INT 20
14196: PPUSH
14197: LD_INT 8
14199: PPUSH
14200: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
14204: LD_VAR 0 4
14208: PPUSH
14209: CALL_OW 110
14213: PUSH
14214: LD_INT 1
14216: EQUAL
14217: PUSH
14218: LD_VAR 0 4
14222: PPUSH
14223: LD_INT 20
14225: PPUSH
14226: LD_INT 8
14228: PPUSH
14229: CALL_OW 297
14233: PUSH
14234: LD_INT 6
14236: LESS
14237: AND
14238: IFFALSE 14252
// SetTag ( i , 2 ) ;
14240: LD_VAR 0 4
14244: PPUSH
14245: LD_INT 2
14247: PPUSH
14248: CALL_OW 109
// if GetTag ( i ) = 2 then
14252: LD_VAR 0 4
14256: PPUSH
14257: CALL_OW 110
14261: PUSH
14262: LD_INT 2
14264: EQUAL
14265: IFFALSE 14373
// begin if GetLives ( i ) = 1000 then
14267: LD_VAR 0 4
14271: PPUSH
14272: CALL_OW 256
14276: PUSH
14277: LD_INT 1000
14279: EQUAL
14280: IFFALSE 14296
// SetTag ( i , 3 ) else
14282: LD_VAR 0 4
14286: PPUSH
14287: LD_INT 3
14289: PPUSH
14290: CALL_OW 109
14294: GO 14373
// if IsDrivenBy ( i ) then
14296: LD_VAR 0 4
14300: PPUSH
14301: CALL_OW 311
14305: IFFALSE 14373
// begin mech := IsDrivenBy ( i ) ;
14307: LD_ADDR_VAR 0 8
14311: PUSH
14312: LD_VAR 0 4
14316: PPUSH
14317: CALL_OW 311
14321: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
14322: LD_INT 1
14324: PPUSH
14325: LD_VAR 0 8
14329: PPUSH
14330: CALL_OW 292
14334: NOT
14335: PUSH
14336: LD_VAR 0 8
14340: PPUSH
14341: CALL_OW 256
14345: PUSH
14346: LD_INT 1000
14348: LESS
14349: AND
14350: IFFALSE 14364
// SetLives ( mech , 1000 ) ;
14352: LD_VAR 0 8
14356: PPUSH
14357: LD_INT 1000
14359: PPUSH
14360: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
14364: LD_VAR 0 8
14368: PPUSH
14369: CALL 77022 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
14373: LD_VAR 0 4
14377: PPUSH
14378: CALL_OW 110
14382: PUSH
14383: LD_INT 3
14385: EQUAL
14386: PUSH
14387: LD_VAR 0 4
14391: PPUSH
14392: CALL_OW 311
14396: AND
14397: IFFALSE 14411
// SetTag ( i , 0 ) ;
14399: LD_VAR 0 4
14403: PPUSH
14404: LD_INT 0
14406: PPUSH
14407: CALL_OW 109
// end ;
14411: GO 14045
14413: POP
14414: POP
// until not attackGroup ;
14415: LD_EXP 26
14419: NOT
14420: IFFALSE 14028
// end ;
14422: LD_VAR 0 3
14426: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14427: LD_EXP 26
14431: PPUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 2
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 72
14446: IFFALSE 14514
14448: GO 14450
14450: DISABLE
14451: LD_INT 0
14453: PPUSH
// begin enable ;
14454: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14455: LD_ADDR_VAR 0 1
14459: PUSH
14460: LD_EXP 26
14464: PPUSH
14465: LD_INT 21
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 72
14479: PUSH
14480: FOR_IN
14481: IFFALSE 14512
// if GetFuel ( i ) < 3 then
14483: LD_VAR 0 1
14487: PPUSH
14488: CALL_OW 261
14492: PUSH
14493: LD_INT 3
14495: LESS
14496: IFFALSE 14510
// SetFuel ( i , 3 ) ;
14498: LD_VAR 0 1
14502: PPUSH
14503: LD_INT 3
14505: PPUSH
14506: CALL_OW 240
14510: GO 14480
14512: POP
14513: POP
// end ; end_of_file
14514: PPOPN 1
14516: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14517: LD_INT 22
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 25
14529: PUSH
14530: LD_INT 2
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 69
14545: IFFALSE 14564
14547: GO 14549
14549: DISABLE
// begin enable ;
14550: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14551: LD_INT 3
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: LD_INT 22
14559: PPUSH
14560: CALL 9329 0 3
// end ;
14564: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14565: LD_INT 22
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 25
14577: PUSH
14578: LD_INT 4
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PPUSH
14589: CALL_OW 69
14593: IFFALSE 14615
14595: GO 14597
14597: DISABLE
// begin enable ;
14598: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14599: LD_INT 3
14601: PPUSH
14602: LD_INT 20
14604: PPUSH
14605: LD_INT 22
14607: PPUSH
14608: LD_INT 23
14610: PPUSH
14611: CALL 9661 0 4
// end ;
14615: END
// every 0 0$1 trigger northBaseDefenders do
14616: LD_EXP 24
14620: IFFALSE 14644
14622: GO 14624
14624: DISABLE
// begin enable ;
14625: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14626: LD_INT 22
14628: PPUSH
14629: LD_INT 1
14631: PPUSH
14632: LD_EXP 24
14636: PPUSH
14637: LD_INT 2
14639: PPUSH
14640: CALL 9933 0 4
// end ;
14644: END
// every 0 0$1 trigger southBaseDefenders do
14645: LD_EXP 25
14649: IFFALSE 14673
14651: GO 14653
14653: DISABLE
// begin enable ;
14654: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14655: LD_INT 23
14657: PPUSH
14658: LD_INT 1
14660: PPUSH
14661: LD_EXP 25
14665: PPUSH
14666: LD_INT 33
14668: PPUSH
14669: CALL 9933 0 4
// end ; end_of_file
14673: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL 32737 0 1
// if unit = JMM then
14683: LD_VAR 0 1
14687: PUSH
14688: LD_EXP 1
14692: EQUAL
14693: IFFALSE 14702
// YouLost ( JMM ) ;
14695: LD_STRING JMM
14697: PPUSH
14698: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 266
14711: PUSH
14712: LD_INT 0
14714: EQUAL
14715: IFFALSE 14724
// YouLost ( DepotDestroyed ) ;
14717: LD_STRING DepotDestroyed
14719: PPUSH
14720: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 255
14733: PUSH
14734: LD_INT 1
14736: EQUAL
14737: PUSH
14738: LD_VAR 0 1
14742: PPUSH
14743: CALL_OW 247
14747: PUSH
14748: LD_INT 1
14750: EQUAL
14751: AND
14752: IFFALSE 14768
// deadsCounter = deadsCounter + 1 ;
14754: LD_ADDR_EXP 31
14758: PUSH
14759: LD_EXP 31
14763: PUSH
14764: LD_INT 1
14766: PLUS
14767: ST_TO_ADDR
// end ;
14768: PPOPN 1
14770: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
14771: LD_VAR 0 1
14775: PUSH
14776: LD_INT 22
14778: PUSH
14779: LD_INT 1
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 1
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 21
14798: PUSH
14799: LD_INT 1
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: PPUSH
14811: CALL_OW 69
14815: IN
14816: PUSH
14817: LD_VAR 0 2
14821: PUSH
14822: LD_INT 1
14824: EQUAL
14825: AND
14826: IFFALSE 14832
// JMMTraitor ;
14828: CALL 8739 0 0
// end ;
14832: PPOPN 3
14834: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 then
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 255
14844: PUSH
14845: LD_INT 3
14847: EQUAL
14848: IFFALSE 14926
// begin ComMoveXY ( driver , 6 , 10 ) ;
14850: LD_VAR 0 1
14854: PPUSH
14855: LD_INT 6
14857: PPUSH
14858: LD_INT 10
14860: PPUSH
14861: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14865: LD_INT 35
14867: PPUSH
14868: CALL_OW 67
// ComMoveXY ( driver , 6 , 10 ) ;
14872: LD_VAR 0 1
14876: PPUSH
14877: LD_INT 6
14879: PPUSH
14880: LD_INT 10
14882: PPUSH
14883: CALL_OW 111
// if IsDead ( driver ) then
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 301
14896: IFFALSE 14900
// exit ;
14898: GO 14926
// until IsAt ( driver , 6 , 10 ) ;
14900: LD_VAR 0 1
14904: PPUSH
14905: LD_INT 6
14907: PPUSH
14908: LD_INT 10
14910: PPUSH
14911: CALL_OW 307
14915: IFFALSE 14865
// RemoveUnit ( driver ) ;
14917: LD_VAR 0 1
14921: PPUSH
14922: CALL_OW 64
// end ; end ;
14926: PPOPN 4
14928: END
// on Command ( cmd ) do var i , j , tmp ;
14929: LD_INT 0
14931: PPUSH
14932: PPUSH
14933: PPUSH
// begin SOS_Command ( cmd ) ;
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL 32841 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_INT 22
14950: PUSH
14951: LD_INT 1
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 21
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: PUSH
14977: FOR_IN
14978: IFFALSE 15099
// begin if GetTaskList ( i ) then
14980: LD_VAR 0 2
14984: PPUSH
14985: CALL_OW 437
14989: IFFALSE 15097
// begin for j = 1 to GetTaskList ( i ) do
14991: LD_ADDR_VAR 0 3
14995: PUSH
14996: DOUBLE
14997: LD_INT 1
14999: DEC
15000: ST_TO_ADDR
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL_OW 437
15010: PUSH
15011: FOR_TO
15012: IFFALSE 15095
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
15014: LD_ADDR_VAR 0 4
15018: PUSH
15019: LD_VAR 0 2
15023: PPUSH
15024: CALL_OW 437
15028: PUSH
15029: LD_VAR 0 3
15033: ARRAY
15034: PUSH
15035: LD_INT 4
15037: ARRAY
15038: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
15039: LD_VAR 0 4
15043: PPUSH
15044: CALL_OW 255
15048: PUSH
15049: LD_INT 3
15051: EQUAL
15052: PUSH
15053: LD_VAR 0 4
15057: PPUSH
15058: CALL_OW 247
15062: PUSH
15063: LD_INT 2
15065: EQUAL
15066: AND
15067: PUSH
15068: LD_VAR 0 4
15072: PPUSH
15073: CALL_OW 264
15077: PUSH
15078: LD_INT 51
15080: EQUAL
15081: AND
15082: IFFALSE 15093
// ComStop ( i ) ;
15084: LD_VAR 0 2
15088: PPUSH
15089: CALL_OW 141
// end ;
15093: GO 15011
15095: POP
15096: POP
// end ; end ;
15097: GO 14977
15099: POP
15100: POP
// end ;
15101: PPOPN 4
15103: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
15104: LD_VAR 0 2
15108: PUSH
15109: LD_EXP 8
15113: EQUAL
15114: PUSH
15115: LD_EXP 21
15119: PUSH
15120: LD_INT 4
15122: NONEQUAL
15123: AND
15124: IFFALSE 15276
// begin if IsOk ( Mikhail ) then
15126: LD_EXP 8
15130: PPUSH
15131: CALL_OW 302
15135: IFFALSE 15143
// AskMikhail else
15137: CALL 7425 0 0
15141: GO 15276
// if IsOk ( llab1 ) then
15143: LD_INT 23
15145: PPUSH
15146: CALL_OW 302
15150: IFFALSE 15239
// begin InGameOn ;
15152: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
15156: LD_EXP 8
15160: PPUSH
15161: LD_INT 6
15163: PPUSH
15164: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
15168: LD_INT 23
15170: PPUSH
15171: LD_INT 6
15173: PPUSH
15174: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
15178: LD_EXP 8
15182: PPUSH
15183: LD_INT 23
15185: PPUSH
15186: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15190: LD_INT 35
15192: PPUSH
15193: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
15197: LD_EXP 8
15201: PPUSH
15202: CALL_OW 310
15206: PUSH
15207: LD_INT 23
15209: EQUAL
15210: PUSH
15211: LD_EXP 8
15215: PPUSH
15216: CALL_OW 301
15220: OR
15221: IFFALSE 15190
// SetSide ( llab1 , 1 ) ;
15223: LD_INT 23
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 235
// InGameOff ;
15233: CALL_OW 9
// end else
15237: GO 15276
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
15239: LD_INT 3
15241: PPUSH
15242: LD_INT 6
15244: PPUSH
15245: LD_INT 2
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
15255: LD_EXP 8
15259: PPUSH
15260: LD_INT 6
15262: PPUSH
15263: CALL_OW 235
// ComHold ( Mikhail ) ;
15267: LD_EXP 8
15271: PPUSH
15272: CALL_OW 140
// end ; end ; end ;
15276: PPOPN 2
15278: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15279: LD_VAR 0 1
15283: PPUSH
15284: LD_VAR 0 2
15288: PPUSH
15289: CALL 32857 0 2
// end ;
15293: PPOPN 2
15295: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
15296: LD_EXP 8
15300: PPUSH
15301: CALL_OW 257
15305: PUSH
15306: LD_INT 3
15308: NONEQUAL
15309: IFFALSE 15327
15311: GO 15313
15313: DISABLE
// begin enable ;
15314: ENABLE
// SetClass ( Mikhail , 3 ) ;
15315: LD_EXP 8
15319: PPUSH
15320: LD_INT 3
15322: PPUSH
15323: CALL_OW 336
// end ; end_of_file
15327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
15328: LD_INT 22
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 21
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 25
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: PUSH
15368: LD_INT 0
15370: EQUAL
15371: PUSH
15372: LD_INT 22
15374: PUSH
15375: LD_INT 4
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 21
15384: PUSH
15385: LD_INT 1
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 25
15394: PUSH
15395: LD_INT 2
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: PPUSH
15407: CALL_OW 69
15411: PUSH
15412: LD_INT 0
15414: EQUAL
15415: AND
15416: PUSH
15417: LD_INT 1
15419: PPUSH
15420: CALL_OW 255
15424: PUSH
15425: LD_INT 3
15427: EQUAL
15428: AND
15429: PUSH
15430: LD_INT 10
15432: PPUSH
15433: CALL_OW 255
15437: PUSH
15438: LD_INT 3
15440: EQUAL
15441: AND
15442: IFFALSE 15454
15444: GO 15446
15446: DISABLE
// YouLost ( Engineer ) ;
15447: LD_STRING Engineer
15449: PPUSH
15450: CALL_OW 104
15454: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
15455: LD_INT 1
15457: PPUSH
15458: CALL_OW 255
15462: PUSH
15463: LD_INT 3
15465: EQUAL
15466: PUSH
15467: LD_EXP 27
15471: PUSH
15472: LD_INT 1
15474: EQUAL
15475: AND
15476: IFFALSE 15488
15478: GO 15480
15480: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
15481: LD_STRING DepotCaptured
15483: PPUSH
15484: CALL_OW 104
15488: END
// export function PrepareTigers ; var i , un ; begin
15489: LD_INT 0
15491: PPUSH
15492: PPUSH
15493: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
15494: LD_ADDR_VAR 0 2
15498: PUSH
15499: DOUBLE
15500: LD_INT 1
15502: DEC
15503: ST_TO_ADDR
15504: LD_INT 2
15506: PUSH
15507: LD_INT 3
15509: PUSH
15510: LD_INT 4
15512: PUSH
15513: LD_INT 5
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: PUSH
15522: LD_OWVAR 67
15526: ARRAY
15527: PUSH
15528: FOR_TO
15529: IFFALSE 15644
// begin uc_side := 0 ;
15531: LD_ADDR_OWVAR 20
15535: PUSH
15536: LD_INT 0
15538: ST_TO_ADDR
// uc_nation := nation_nature ;
15539: LD_ADDR_OWVAR 21
15543: PUSH
15544: LD_INT 0
15546: ST_TO_ADDR
// hc_sex := sex_male ;
15547: LD_ADDR_OWVAR 27
15551: PUSH
15552: LD_INT 1
15554: ST_TO_ADDR
// hc_class := class_tiger ;
15555: LD_ADDR_OWVAR 28
15559: PUSH
15560: LD_INT 14
15562: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
15563: LD_ADDR_OWVAR 31
15567: PUSH
15568: LD_EXP 14
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
15588: LD_ADDR_OWVAR 35
15592: PUSH
15593: LD_INT 30
15595: PUSH
15596: LD_INT 40
15598: PUSH
15599: LD_INT 45
15601: PUSH
15602: LD_INT 50
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: PUSH
15611: LD_OWVAR 67
15615: ARRAY
15616: ST_TO_ADDR
// un = CreateHuman ;
15617: LD_ADDR_VAR 0 3
15621: PUSH
15622: CALL_OW 44
15626: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15627: LD_VAR 0 3
15631: PPUSH
15632: LD_INT 27
15634: PPUSH
15635: LD_INT 0
15637: PPUSH
15638: CALL_OW 49
// end ;
15642: GO 15528
15644: POP
15645: POP
// end ; end_of_file
15646: LD_VAR 0 1
15650: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15651: LD_INT 1
15653: PPUSH
15654: CALL_OW 255
15658: PUSH
15659: LD_INT 1
15661: EQUAL
15662: PUSH
15663: LD_INT 10
15665: PPUSH
15666: CALL_OW 255
15670: PUSH
15671: LD_INT 1
15673: EQUAL
15674: AND
15675: PUSH
15676: LD_EXP 20
15680: PUSH
15681: LD_INT 1
15683: EQUAL
15684: AND
15685: PUSH
15686: LD_INT 22
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 34
15708: PUSH
15709: LD_INT 51
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 3
15718: PUSH
15719: LD_INT 58
15721: PUSH
15722: EMPTY
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL_OW 69
15739: PUSH
15740: LD_INT 0
15742: EQUAL
15743: AND
15744: IFFALSE 15835
15746: GO 15748
15748: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15749: LD_INT 9450
15751: PUSH
15752: LD_INT 8400
15754: PUSH
15755: LD_INT 6300
15757: PUSH
15758: LD_INT 6300
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: PUSH
15767: LD_OWVAR 67
15771: ARRAY
15772: PPUSH
15773: CALL_OW 67
// if cargoEscape then
15777: LD_EXP 20
15781: IFFALSE 15835
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15783: LD_EXP 9
15787: PPUSH
15788: LD_STRING D6-Pow-1
15790: PPUSH
15791: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
15795: LD_EXP 1
15799: PPUSH
15800: LD_STRING D6-JMM-1
15802: PPUSH
15803: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
15807: LD_EXP 9
15811: PPUSH
15812: LD_STRING D6-Pow-2
15814: PPUSH
15815: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
15819: LD_EXP 1
15823: PPUSH
15824: LD_STRING D6-JMM-2
15826: PPUSH
15827: CALL_OW 88
// FinishMission ;
15831: CALL 16051 0 0
// end ; end ;
15835: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 255
15843: PUSH
15844: LD_INT 1
15846: EQUAL
15847: PUSH
15848: LD_INT 10
15850: PPUSH
15851: CALL_OW 255
15855: PUSH
15856: LD_INT 1
15858: EQUAL
15859: AND
15860: PUSH
15861: LD_EXP 20
15865: PUSH
15866: LD_INT 1
15868: GREATER
15869: AND
15870: IFFALSE 15945
15872: GO 15874
15874: DISABLE
15875: LD_INT 0
15877: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15878: LD_INT 11550
15880: PUSH
15881: LD_INT 10500
15883: PUSH
15884: LD_INT 9450
15886: PUSH
15887: LD_INT 8400
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: PUSH
15896: LD_OWVAR 67
15900: ARRAY
15901: PPUSH
15902: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15906: LD_INT 1
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: LD_INT 3
15914: PUSH
15915: LD_INT 4
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: PUSH
15924: LD_OWVAR 67
15928: ARRAY
15929: PPUSH
15930: LD_INT 13
15932: PPUSH
15933: CALL 13462 0 2
// lastBattle = 1 ;
15937: LD_ADDR_EXP 27
15941: PUSH
15942: LD_INT 1
15944: ST_TO_ADDR
// end ;
15945: PPOPN 1
15947: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15948: LD_EXP 27
15952: PUSH
15953: LD_INT 1
15955: EQUAL
15956: PUSH
15957: LD_INT 26
15959: PPUSH
15960: LD_INT 22
15962: PUSH
15963: LD_INT 3
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 1
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PPUSH
15984: CALL_OW 70
15988: PUSH
15989: LD_INT 0
15991: EQUAL
15992: AND
15993: IFFALSE 16050
15995: GO 15997
15997: DISABLE
// begin SayRadioNoFace ( Powell , D6-Pow-1 ) ;
15998: LD_EXP 9
16002: PPUSH
16003: LD_STRING D6-Pow-1
16005: PPUSH
16006: CALL_OW 586
// Say ( JMM , D6-JMM-1 ) ;
16010: LD_EXP 1
16014: PPUSH
16015: LD_STRING D6-JMM-1
16017: PPUSH
16018: CALL_OW 88
// SayRadioNoFace ( Powell , D6-Pow-2 ) ;
16022: LD_EXP 9
16026: PPUSH
16027: LD_STRING D6-Pow-2
16029: PPUSH
16030: CALL_OW 586
// Say ( JMM , D6-JMM-2 ) ;
16034: LD_EXP 1
16038: PPUSH
16039: LD_STRING D6-JMM-2
16041: PPUSH
16042: CALL_OW 88
// FinishMission ;
16046: CALL 16051 0 0
// end ;
16050: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
16051: LD_INT 0
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
// if traitor then
16058: LD_EXP 33
16062: IFFALSE 16066
// exit ;
16064: GO 16930
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 2 then
16066: LD_INT 22
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 21
16078: PUSH
16079: LD_INT 1
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 23
16088: PUSH
16089: LD_INT 1
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 50
16098: PUSH
16099: EMPTY
16100: LIST
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: PPUSH
16108: CALL_OW 69
16112: PUSH
16113: LD_INT 2
16115: LESS
16116: IFFALSE 16125
// YouLost ( Troops ) ;
16118: LD_STRING Troops
16120: PPUSH
16121: CALL_OW 104
// if tick <= 18 18$00 then
16125: LD_OWVAR 1
16129: PUSH
16130: LD_INT 37800
16132: LESSEQUAL
16133: IFFALSE 16142
// SetAchievement ( ACH_ASPEED_2 ) ;
16135: LD_STRING ACH_ASPEED_2
16137: PPUSH
16138: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
16142: LD_ADDR_VAR 0 2
16146: PUSH
16147: LD_INT 22
16149: PUSH
16150: LD_INT 1
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 21
16159: PUSH
16160: LD_INT 2
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 24
16169: PUSH
16170: LD_INT 251
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: ST_TO_ADDR
// if tmp then
16187: LD_VAR 0 2
16191: IFFALSE 16205
// SaveVehicles ( tmp , 02_tanks_1 ) ;
16193: LD_VAR 0 2
16197: PPUSH
16198: LD_STRING 02_tanks_1
16200: PPUSH
16201: CALL 10808 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
16205: LD_EXP 21
16209: PUSH
16210: LD_INT 1
16212: EQUAL
16213: PUSH
16214: LD_EXP 8
16218: PPUSH
16219: CALL_OW 300
16223: AND
16224: IFFALSE 16238
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
16226: LD_EXP 21
16230: PPUSH
16231: LD_STRING 02_mikhailStatus_1
16233: PPUSH
16234: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
16238: LD_INT 1
16240: PPUSH
16241: CALL_OW 274
16245: PPUSH
16246: LD_INT 1
16248: PPUSH
16249: CALL_OW 275
16253: PPUSH
16254: LD_STRING 02_resources_4
16256: PPUSH
16257: CALL_OW 39
// m1 := false ;
16261: LD_ADDR_VAR 0 3
16265: PUSH
16266: LD_INT 0
16268: ST_TO_ADDR
// m2 := false ;
16269: LD_ADDR_VAR 0 4
16273: PUSH
16274: LD_INT 0
16276: ST_TO_ADDR
// m3 := false ;
16277: LD_ADDR_VAR 0 5
16281: PUSH
16282: LD_INT 0
16284: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
16285: LD_INT 1
16287: PPUSH
16288: CALL_OW 274
16292: PPUSH
16293: LD_INT 1
16295: PPUSH
16296: CALL_OW 275
16300: PUSH
16301: LD_INT 200
16303: GREATEREQUAL
16304: IFFALSE 16326
// begin AddMedal ( Cans , 1 ) ;
16306: LD_STRING Cans
16308: PPUSH
16309: LD_INT 1
16311: PPUSH
16312: CALL_OW 101
// m1 := true ;
16316: LD_ADDR_VAR 0 3
16320: PUSH
16321: LD_INT 1
16323: ST_TO_ADDR
// end else
16324: GO 16337
// begin AddMedal ( Cans , - 1 ) ;
16326: LD_STRING Cans
16328: PPUSH
16329: LD_INT 1
16331: NEG
16332: PPUSH
16333: CALL_OW 101
// end ; if deadsCounter < 2 then
16337: LD_EXP 31
16341: PUSH
16342: LD_INT 2
16344: LESS
16345: IFFALSE 16367
// begin AddMedal ( Deaths , 1 ) ;
16347: LD_STRING Deaths
16349: PPUSH
16350: LD_INT 1
16352: PPUSH
16353: CALL_OW 101
// m2 := true ;
16357: LD_ADDR_VAR 0 4
16361: PUSH
16362: LD_INT 1
16364: ST_TO_ADDR
// end else
16365: GO 16378
// begin AddMedal ( Deaths , - 1 ) ;
16367: LD_STRING Deaths
16369: PPUSH
16370: LD_INT 1
16372: NEG
16373: PPUSH
16374: CALL_OW 101
// end ; if mikhailStatus = 0 then
16378: LD_EXP 21
16382: PUSH
16383: LD_INT 0
16385: EQUAL
16386: IFFALSE 16399
// AddMedal ( Prisoner , - 1 ) ;
16388: LD_STRING Prisoner
16390: PPUSH
16391: LD_INT 1
16393: NEG
16394: PPUSH
16395: CALL_OW 101
// if mikhailStatus = 1 then
16399: LD_EXP 21
16403: PUSH
16404: LD_INT 1
16406: EQUAL
16407: IFFALSE 16427
// begin AddMedal ( Prisoner , 1 ) ;
16409: LD_STRING Prisoner
16411: PPUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 101
// m3 := true ;
16419: LD_ADDR_VAR 0 5
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
16427: LD_EXP 21
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: IFFALSE 16455
// begin AddMedal ( Prisoner , 2 ) ;
16437: LD_STRING Prisoner
16439: PPUSH
16440: LD_INT 2
16442: PPUSH
16443: CALL_OW 101
// m3 := true ;
16447: LD_ADDR_VAR 0 5
16451: PUSH
16452: LD_INT 1
16454: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
16455: LD_EXP 21
16459: PUSH
16460: LD_INT 3
16462: EQUAL
16463: IFFALSE 16476
// AddMedal ( Prisoner , - 2 ) ;
16465: LD_STRING Prisoner
16467: PPUSH
16468: LD_INT 2
16470: NEG
16471: PPUSH
16472: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
16476: LD_OWVAR 67
16480: PUSH
16481: LD_INT 3
16483: GREATEREQUAL
16484: PUSH
16485: LD_VAR 0 3
16489: AND
16490: PUSH
16491: LD_VAR 0 4
16495: AND
16496: PUSH
16497: LD_VAR 0 5
16501: AND
16502: IFFALSE 16514
// SetAchievementEX ( ACH_AMER , 2 ) ;
16504: LD_STRING ACH_AMER
16506: PPUSH
16507: LD_INT 2
16509: PPUSH
16510: CALL_OW 564
// GiveMedals ( MAIN ) ;
16514: LD_STRING MAIN
16516: PPUSH
16517: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16521: LD_INT 22
16523: PUSH
16524: LD_INT 1
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 23
16533: PUSH
16534: LD_INT 1
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: PPUSH
16561: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
16565: LD_EXP 1
16569: PPUSH
16570: LD_EXP 34
16574: PUSH
16575: LD_STRING JMM
16577: STR
16578: PPUSH
16579: CALL_OW 38
// if IsOK ( Bobby ) then
16583: LD_EXP 2
16587: PPUSH
16588: CALL_OW 302
16592: IFFALSE 16612
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
16594: LD_EXP 2
16598: PPUSH
16599: LD_EXP 34
16603: PUSH
16604: LD_STRING Bobby
16606: STR
16607: PPUSH
16608: CALL_OW 38
// if IsOK ( Cyrus ) then
16612: LD_EXP 3
16616: PPUSH
16617: CALL_OW 302
16621: IFFALSE 16641
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
16623: LD_EXP 3
16627: PPUSH
16628: LD_EXP 34
16632: PUSH
16633: LD_STRING Cyrus
16635: STR
16636: PPUSH
16637: CALL_OW 38
// if IsOK ( Lisa ) then
16641: LD_EXP 4
16645: PPUSH
16646: CALL_OW 302
16650: IFFALSE 16677
// begin ToLua ( enableBioCharacter(BIO_LISA) ) ;
16652: LD_STRING enableBioCharacter(BIO_LISA)
16654: PPUSH
16655: CALL_OW 559
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
16659: LD_EXP 4
16663: PPUSH
16664: LD_EXP 34
16668: PUSH
16669: LD_STRING Lisa
16671: STR
16672: PPUSH
16673: CALL_OW 38
// end ; if IsOK ( Khatam ) then
16677: LD_EXP 5
16681: PPUSH
16682: CALL_OW 302
16686: IFFALSE 16713
// begin ToLua ( enableBioCharacter(BIO_KHAT) ) ;
16688: LD_STRING enableBioCharacter(BIO_KHAT)
16690: PPUSH
16691: CALL_OW 559
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16695: LD_EXP 5
16699: PPUSH
16700: LD_EXP 34
16704: PUSH
16705: LD_STRING Khatam
16707: STR
16708: PPUSH
16709: CALL_OW 38
// end ; if IsOK ( Brian ) then
16713: LD_EXP 6
16717: PPUSH
16718: CALL_OW 302
16722: IFFALSE 16742
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16724: LD_EXP 6
16728: PPUSH
16729: LD_EXP 34
16733: PUSH
16734: LD_STRING Brian
16736: STR
16737: PPUSH
16738: CALL_OW 38
// if IsOk ( Jerry ) then
16742: LD_EXP 7
16746: PPUSH
16747: CALL_OW 302
16751: IFFALSE 16771
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16753: LD_EXP 7
16757: PPUSH
16758: LD_EXP 34
16762: PUSH
16763: LD_STRING Jerry
16765: STR
16766: PPUSH
16767: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16771: LD_EXP 21
16775: PUSH
16776: LD_INT 1
16778: EQUAL
16779: PUSH
16780: LD_EXP 8
16784: PPUSH
16785: CALL_OW 255
16789: PUSH
16790: LD_INT 1
16792: EQUAL
16793: AND
16794: PUSH
16795: LD_EXP 8
16799: PPUSH
16800: CALL_OW 302
16804: AND
16805: IFFALSE 16832
// begin ToLua ( enableBioCharacter(BIO_MICH) ) ;
16807: LD_STRING enableBioCharacter(BIO_MICH)
16809: PPUSH
16810: CALL_OW 559
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16814: LD_EXP 8
16818: PPUSH
16819: LD_EXP 34
16823: PUSH
16824: LD_STRING Mikhail
16826: STR
16827: PPUSH
16828: CALL_OW 38
// end ; SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16832: LD_INT 50
16834: PUSH
16835: EMPTY
16836: LIST
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_INT 1
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 21
16850: PUSH
16851: LD_INT 1
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 69
16867: PUSH
16868: LD_EXP 1
16872: PUSH
16873: LD_EXP 2
16877: PUSH
16878: LD_EXP 3
16882: PUSH
16883: LD_EXP 4
16887: PUSH
16888: LD_EXP 5
16892: PUSH
16893: LD_EXP 6
16897: PUSH
16898: LD_EXP 7
16902: PUSH
16903: LD_EXP 8
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: DIFF
16918: PPUSH
16919: LD_STRING 02_other_survivors
16921: PPUSH
16922: CALL_OW 38
// YouWin ;
16926: CALL_OW 103
// end ; end_of_file end_of_file
16930: LD_VAR 0 1
16934: RET
// export globalGameSaveCounter ; every 0 0$1 do
16935: GO 16937
16937: DISABLE
// begin enable ;
16938: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16939: LD_STRING updateTimer(
16941: PUSH
16942: LD_OWVAR 1
16946: STR
16947: PUSH
16948: LD_STRING );
16950: STR
16951: PPUSH
16952: CALL_OW 559
// end ;
16956: END
// every 0 0$1 do
16957: GO 16959
16959: DISABLE
// begin globalGameSaveCounter := 0 ;
16960: LD_ADDR_EXP 37
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16968: LD_STRING setGameSaveCounter(0)
16970: PPUSH
16971: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16975: LD_STRING initStreamRollete();
16977: PPUSH
16978: CALL_OW 559
// InitStreamMode ;
16982: CALL 18308 0 0
// DefineStreamItems ( false ) ;
16986: LD_INT 0
16988: PPUSH
16989: CALL 18772 0 1
// end ;
16993: END
// export function SOS_MapStart ( ) ; begin
16994: LD_INT 0
16996: PPUSH
// if streamModeActive then
16997: LD_EXP 38
17001: IFFALSE 17010
// DefineStreamItems ( true ) ;
17003: LD_INT 1
17005: PPUSH
17006: CALL 18772 0 1
// UpdateLuaVariables ( ) ;
17010: CALL 17027 0 0
// UpdateFactoryWaypoints ( ) ;
17014: CALL 31641 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17018: CALL 31898 0 0
// end ;
17022: LD_VAR 0 1
17026: RET
// function UpdateLuaVariables ( ) ; begin
17027: LD_INT 0
17029: PPUSH
// if globalGameSaveCounter then
17030: LD_EXP 37
17034: IFFALSE 17068
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17036: LD_ADDR_EXP 37
17040: PUSH
17041: LD_EXP 37
17045: PPUSH
17046: CALL 76683 0 1
17050: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17051: LD_STRING setGameSaveCounter(
17053: PUSH
17054: LD_EXP 37
17058: STR
17059: PUSH
17060: LD_STRING )
17062: STR
17063: PPUSH
17064: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17068: LD_STRING setGameDifficulty(
17070: PUSH
17071: LD_OWVAR 67
17075: STR
17076: PUSH
17077: LD_STRING )
17079: STR
17080: PPUSH
17081: CALL_OW 559
// end ;
17085: LD_VAR 0 1
17089: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17090: LD_INT 0
17092: PPUSH
// if p2 = stream_mode then
17093: LD_VAR 0 2
17097: PUSH
17098: LD_INT 100
17100: EQUAL
17101: IFFALSE 18104
// begin if not StreamModeActive then
17103: LD_EXP 38
17107: NOT
17108: IFFALSE 17118
// StreamModeActive := true ;
17110: LD_ADDR_EXP 38
17114: PUSH
17115: LD_INT 1
17117: ST_TO_ADDR
// if p3 = 0 then
17118: LD_VAR 0 3
17122: PUSH
17123: LD_INT 0
17125: EQUAL
17126: IFFALSE 17132
// InitStreamMode ;
17128: CALL 18308 0 0
// if p3 = 1 then
17132: LD_VAR 0 3
17136: PUSH
17137: LD_INT 1
17139: EQUAL
17140: IFFALSE 17150
// sRocket := true ;
17142: LD_ADDR_EXP 43
17146: PUSH
17147: LD_INT 1
17149: ST_TO_ADDR
// if p3 = 2 then
17150: LD_VAR 0 3
17154: PUSH
17155: LD_INT 2
17157: EQUAL
17158: IFFALSE 17168
// sSpeed := true ;
17160: LD_ADDR_EXP 42
17164: PUSH
17165: LD_INT 1
17167: ST_TO_ADDR
// if p3 = 3 then
17168: LD_VAR 0 3
17172: PUSH
17173: LD_INT 3
17175: EQUAL
17176: IFFALSE 17186
// sEngine := true ;
17178: LD_ADDR_EXP 44
17182: PUSH
17183: LD_INT 1
17185: ST_TO_ADDR
// if p3 = 4 then
17186: LD_VAR 0 3
17190: PUSH
17191: LD_INT 4
17193: EQUAL
17194: IFFALSE 17204
// sSpec := true ;
17196: LD_ADDR_EXP 41
17200: PUSH
17201: LD_INT 1
17203: ST_TO_ADDR
// if p3 = 5 then
17204: LD_VAR 0 3
17208: PUSH
17209: LD_INT 5
17211: EQUAL
17212: IFFALSE 17222
// sLevel := true ;
17214: LD_ADDR_EXP 45
17218: PUSH
17219: LD_INT 1
17221: ST_TO_ADDR
// if p3 = 6 then
17222: LD_VAR 0 3
17226: PUSH
17227: LD_INT 6
17229: EQUAL
17230: IFFALSE 17240
// sArmoury := true ;
17232: LD_ADDR_EXP 46
17236: PUSH
17237: LD_INT 1
17239: ST_TO_ADDR
// if p3 = 7 then
17240: LD_VAR 0 3
17244: PUSH
17245: LD_INT 7
17247: EQUAL
17248: IFFALSE 17258
// sRadar := true ;
17250: LD_ADDR_EXP 47
17254: PUSH
17255: LD_INT 1
17257: ST_TO_ADDR
// if p3 = 8 then
17258: LD_VAR 0 3
17262: PUSH
17263: LD_INT 8
17265: EQUAL
17266: IFFALSE 17276
// sBunker := true ;
17268: LD_ADDR_EXP 48
17272: PUSH
17273: LD_INT 1
17275: ST_TO_ADDR
// if p3 = 9 then
17276: LD_VAR 0 3
17280: PUSH
17281: LD_INT 9
17283: EQUAL
17284: IFFALSE 17294
// sHack := true ;
17286: LD_ADDR_EXP 49
17290: PUSH
17291: LD_INT 1
17293: ST_TO_ADDR
// if p3 = 10 then
17294: LD_VAR 0 3
17298: PUSH
17299: LD_INT 10
17301: EQUAL
17302: IFFALSE 17312
// sFire := true ;
17304: LD_ADDR_EXP 50
17308: PUSH
17309: LD_INT 1
17311: ST_TO_ADDR
// if p3 = 11 then
17312: LD_VAR 0 3
17316: PUSH
17317: LD_INT 11
17319: EQUAL
17320: IFFALSE 17330
// sRefresh := true ;
17322: LD_ADDR_EXP 51
17326: PUSH
17327: LD_INT 1
17329: ST_TO_ADDR
// if p3 = 12 then
17330: LD_VAR 0 3
17334: PUSH
17335: LD_INT 12
17337: EQUAL
17338: IFFALSE 17348
// sExp := true ;
17340: LD_ADDR_EXP 52
17344: PUSH
17345: LD_INT 1
17347: ST_TO_ADDR
// if p3 = 13 then
17348: LD_VAR 0 3
17352: PUSH
17353: LD_INT 13
17355: EQUAL
17356: IFFALSE 17366
// sDepot := true ;
17358: LD_ADDR_EXP 53
17362: PUSH
17363: LD_INT 1
17365: ST_TO_ADDR
// if p3 = 14 then
17366: LD_VAR 0 3
17370: PUSH
17371: LD_INT 14
17373: EQUAL
17374: IFFALSE 17384
// sFlag := true ;
17376: LD_ADDR_EXP 54
17380: PUSH
17381: LD_INT 1
17383: ST_TO_ADDR
// if p3 = 15 then
17384: LD_VAR 0 3
17388: PUSH
17389: LD_INT 15
17391: EQUAL
17392: IFFALSE 17402
// sKamikadze := true ;
17394: LD_ADDR_EXP 62
17398: PUSH
17399: LD_INT 1
17401: ST_TO_ADDR
// if p3 = 16 then
17402: LD_VAR 0 3
17406: PUSH
17407: LD_INT 16
17409: EQUAL
17410: IFFALSE 17420
// sTroll := true ;
17412: LD_ADDR_EXP 63
17416: PUSH
17417: LD_INT 1
17419: ST_TO_ADDR
// if p3 = 17 then
17420: LD_VAR 0 3
17424: PUSH
17425: LD_INT 17
17427: EQUAL
17428: IFFALSE 17438
// sSlow := true ;
17430: LD_ADDR_EXP 64
17434: PUSH
17435: LD_INT 1
17437: ST_TO_ADDR
// if p3 = 18 then
17438: LD_VAR 0 3
17442: PUSH
17443: LD_INT 18
17445: EQUAL
17446: IFFALSE 17456
// sLack := true ;
17448: LD_ADDR_EXP 65
17452: PUSH
17453: LD_INT 1
17455: ST_TO_ADDR
// if p3 = 19 then
17456: LD_VAR 0 3
17460: PUSH
17461: LD_INT 19
17463: EQUAL
17464: IFFALSE 17474
// sTank := true ;
17466: LD_ADDR_EXP 67
17470: PUSH
17471: LD_INT 1
17473: ST_TO_ADDR
// if p3 = 20 then
17474: LD_VAR 0 3
17478: PUSH
17479: LD_INT 20
17481: EQUAL
17482: IFFALSE 17492
// sRemote := true ;
17484: LD_ADDR_EXP 68
17488: PUSH
17489: LD_INT 1
17491: ST_TO_ADDR
// if p3 = 21 then
17492: LD_VAR 0 3
17496: PUSH
17497: LD_INT 21
17499: EQUAL
17500: IFFALSE 17510
// sPowell := true ;
17502: LD_ADDR_EXP 69
17506: PUSH
17507: LD_INT 1
17509: ST_TO_ADDR
// if p3 = 22 then
17510: LD_VAR 0 3
17514: PUSH
17515: LD_INT 22
17517: EQUAL
17518: IFFALSE 17528
// sTeleport := true ;
17520: LD_ADDR_EXP 72
17524: PUSH
17525: LD_INT 1
17527: ST_TO_ADDR
// if p3 = 23 then
17528: LD_VAR 0 3
17532: PUSH
17533: LD_INT 23
17535: EQUAL
17536: IFFALSE 17546
// sOilTower := true ;
17538: LD_ADDR_EXP 74
17542: PUSH
17543: LD_INT 1
17545: ST_TO_ADDR
// if p3 = 24 then
17546: LD_VAR 0 3
17550: PUSH
17551: LD_INT 24
17553: EQUAL
17554: IFFALSE 17564
// sShovel := true ;
17556: LD_ADDR_EXP 75
17560: PUSH
17561: LD_INT 1
17563: ST_TO_ADDR
// if p3 = 25 then
17564: LD_VAR 0 3
17568: PUSH
17569: LD_INT 25
17571: EQUAL
17572: IFFALSE 17582
// sSheik := true ;
17574: LD_ADDR_EXP 76
17578: PUSH
17579: LD_INT 1
17581: ST_TO_ADDR
// if p3 = 26 then
17582: LD_VAR 0 3
17586: PUSH
17587: LD_INT 26
17589: EQUAL
17590: IFFALSE 17600
// sEarthquake := true ;
17592: LD_ADDR_EXP 78
17596: PUSH
17597: LD_INT 1
17599: ST_TO_ADDR
// if p3 = 27 then
17600: LD_VAR 0 3
17604: PUSH
17605: LD_INT 27
17607: EQUAL
17608: IFFALSE 17618
// sAI := true ;
17610: LD_ADDR_EXP 79
17614: PUSH
17615: LD_INT 1
17617: ST_TO_ADDR
// if p3 = 28 then
17618: LD_VAR 0 3
17622: PUSH
17623: LD_INT 28
17625: EQUAL
17626: IFFALSE 17636
// sCargo := true ;
17628: LD_ADDR_EXP 82
17632: PUSH
17633: LD_INT 1
17635: ST_TO_ADDR
// if p3 = 29 then
17636: LD_VAR 0 3
17640: PUSH
17641: LD_INT 29
17643: EQUAL
17644: IFFALSE 17654
// sDLaser := true ;
17646: LD_ADDR_EXP 83
17650: PUSH
17651: LD_INT 1
17653: ST_TO_ADDR
// if p3 = 30 then
17654: LD_VAR 0 3
17658: PUSH
17659: LD_INT 30
17661: EQUAL
17662: IFFALSE 17672
// sExchange := true ;
17664: LD_ADDR_EXP 84
17668: PUSH
17669: LD_INT 1
17671: ST_TO_ADDR
// if p3 = 31 then
17672: LD_VAR 0 3
17676: PUSH
17677: LD_INT 31
17679: EQUAL
17680: IFFALSE 17690
// sFac := true ;
17682: LD_ADDR_EXP 85
17686: PUSH
17687: LD_INT 1
17689: ST_TO_ADDR
// if p3 = 32 then
17690: LD_VAR 0 3
17694: PUSH
17695: LD_INT 32
17697: EQUAL
17698: IFFALSE 17708
// sPower := true ;
17700: LD_ADDR_EXP 86
17704: PUSH
17705: LD_INT 1
17707: ST_TO_ADDR
// if p3 = 33 then
17708: LD_VAR 0 3
17712: PUSH
17713: LD_INT 33
17715: EQUAL
17716: IFFALSE 17726
// sRandom := true ;
17718: LD_ADDR_EXP 87
17722: PUSH
17723: LD_INT 1
17725: ST_TO_ADDR
// if p3 = 34 then
17726: LD_VAR 0 3
17730: PUSH
17731: LD_INT 34
17733: EQUAL
17734: IFFALSE 17744
// sShield := true ;
17736: LD_ADDR_EXP 88
17740: PUSH
17741: LD_INT 1
17743: ST_TO_ADDR
// if p3 = 35 then
17744: LD_VAR 0 3
17748: PUSH
17749: LD_INT 35
17751: EQUAL
17752: IFFALSE 17762
// sTime := true ;
17754: LD_ADDR_EXP 89
17758: PUSH
17759: LD_INT 1
17761: ST_TO_ADDR
// if p3 = 36 then
17762: LD_VAR 0 3
17766: PUSH
17767: LD_INT 36
17769: EQUAL
17770: IFFALSE 17780
// sTools := true ;
17772: LD_ADDR_EXP 90
17776: PUSH
17777: LD_INT 1
17779: ST_TO_ADDR
// if p3 = 101 then
17780: LD_VAR 0 3
17784: PUSH
17785: LD_INT 101
17787: EQUAL
17788: IFFALSE 17798
// sSold := true ;
17790: LD_ADDR_EXP 55
17794: PUSH
17795: LD_INT 1
17797: ST_TO_ADDR
// if p3 = 102 then
17798: LD_VAR 0 3
17802: PUSH
17803: LD_INT 102
17805: EQUAL
17806: IFFALSE 17816
// sDiff := true ;
17808: LD_ADDR_EXP 56
17812: PUSH
17813: LD_INT 1
17815: ST_TO_ADDR
// if p3 = 103 then
17816: LD_VAR 0 3
17820: PUSH
17821: LD_INT 103
17823: EQUAL
17824: IFFALSE 17834
// sFog := true ;
17826: LD_ADDR_EXP 59
17830: PUSH
17831: LD_INT 1
17833: ST_TO_ADDR
// if p3 = 104 then
17834: LD_VAR 0 3
17838: PUSH
17839: LD_INT 104
17841: EQUAL
17842: IFFALSE 17852
// sReset := true ;
17844: LD_ADDR_EXP 60
17848: PUSH
17849: LD_INT 1
17851: ST_TO_ADDR
// if p3 = 105 then
17852: LD_VAR 0 3
17856: PUSH
17857: LD_INT 105
17859: EQUAL
17860: IFFALSE 17870
// sSun := true ;
17862: LD_ADDR_EXP 61
17866: PUSH
17867: LD_INT 1
17869: ST_TO_ADDR
// if p3 = 106 then
17870: LD_VAR 0 3
17874: PUSH
17875: LD_INT 106
17877: EQUAL
17878: IFFALSE 17888
// sTiger := true ;
17880: LD_ADDR_EXP 57
17884: PUSH
17885: LD_INT 1
17887: ST_TO_ADDR
// if p3 = 107 then
17888: LD_VAR 0 3
17892: PUSH
17893: LD_INT 107
17895: EQUAL
17896: IFFALSE 17906
// sBomb := true ;
17898: LD_ADDR_EXP 58
17902: PUSH
17903: LD_INT 1
17905: ST_TO_ADDR
// if p3 = 108 then
17906: LD_VAR 0 3
17910: PUSH
17911: LD_INT 108
17913: EQUAL
17914: IFFALSE 17924
// sWound := true ;
17916: LD_ADDR_EXP 66
17920: PUSH
17921: LD_INT 1
17923: ST_TO_ADDR
// if p3 = 109 then
17924: LD_VAR 0 3
17928: PUSH
17929: LD_INT 109
17931: EQUAL
17932: IFFALSE 17942
// sBetray := true ;
17934: LD_ADDR_EXP 70
17938: PUSH
17939: LD_INT 1
17941: ST_TO_ADDR
// if p3 = 110 then
17942: LD_VAR 0 3
17946: PUSH
17947: LD_INT 110
17949: EQUAL
17950: IFFALSE 17960
// sContamin := true ;
17952: LD_ADDR_EXP 71
17956: PUSH
17957: LD_INT 1
17959: ST_TO_ADDR
// if p3 = 111 then
17960: LD_VAR 0 3
17964: PUSH
17965: LD_INT 111
17967: EQUAL
17968: IFFALSE 17978
// sOil := true ;
17970: LD_ADDR_EXP 73
17974: PUSH
17975: LD_INT 1
17977: ST_TO_ADDR
// if p3 = 112 then
17978: LD_VAR 0 3
17982: PUSH
17983: LD_INT 112
17985: EQUAL
17986: IFFALSE 17996
// sStu := true ;
17988: LD_ADDR_EXP 77
17992: PUSH
17993: LD_INT 1
17995: ST_TO_ADDR
// if p3 = 113 then
17996: LD_VAR 0 3
18000: PUSH
18001: LD_INT 113
18003: EQUAL
18004: IFFALSE 18014
// sBazooka := true ;
18006: LD_ADDR_EXP 80
18010: PUSH
18011: LD_INT 1
18013: ST_TO_ADDR
// if p3 = 114 then
18014: LD_VAR 0 3
18018: PUSH
18019: LD_INT 114
18021: EQUAL
18022: IFFALSE 18032
// sMortar := true ;
18024: LD_ADDR_EXP 81
18028: PUSH
18029: LD_INT 1
18031: ST_TO_ADDR
// if p3 = 115 then
18032: LD_VAR 0 3
18036: PUSH
18037: LD_INT 115
18039: EQUAL
18040: IFFALSE 18050
// sRanger := true ;
18042: LD_ADDR_EXP 91
18046: PUSH
18047: LD_INT 1
18049: ST_TO_ADDR
// if p3 = 116 then
18050: LD_VAR 0 3
18054: PUSH
18055: LD_INT 116
18057: EQUAL
18058: IFFALSE 18068
// sComputer := true ;
18060: LD_ADDR_EXP 92
18064: PUSH
18065: LD_INT 1
18067: ST_TO_ADDR
// if p3 = 117 then
18068: LD_VAR 0 3
18072: PUSH
18073: LD_INT 117
18075: EQUAL
18076: IFFALSE 18086
// s30 := true ;
18078: LD_ADDR_EXP 93
18082: PUSH
18083: LD_INT 1
18085: ST_TO_ADDR
// if p3 = 118 then
18086: LD_VAR 0 3
18090: PUSH
18091: LD_INT 118
18093: EQUAL
18094: IFFALSE 18104
// s60 := true ;
18096: LD_ADDR_EXP 94
18100: PUSH
18101: LD_INT 1
18103: ST_TO_ADDR
// end ; if p2 = hack_mode then
18104: LD_VAR 0 2
18108: PUSH
18109: LD_INT 101
18111: EQUAL
18112: IFFALSE 18240
// begin case p3 of 1 :
18114: LD_VAR 0 3
18118: PUSH
18119: LD_INT 1
18121: DOUBLE
18122: EQUAL
18123: IFTRUE 18127
18125: GO 18134
18127: POP
// hHackUnlimitedResources ; 2 :
18128: CALL 30387 0 0
18132: GO 18240
18134: LD_INT 2
18136: DOUBLE
18137: EQUAL
18138: IFTRUE 18142
18140: GO 18149
18142: POP
// hHackSetLevel10 ; 3 :
18143: CALL 30520 0 0
18147: GO 18240
18149: LD_INT 3
18151: DOUBLE
18152: EQUAL
18153: IFTRUE 18157
18155: GO 18164
18157: POP
// hHackSetLevel10YourUnits ; 4 :
18158: CALL 30605 0 0
18162: GO 18240
18164: LD_INT 4
18166: DOUBLE
18167: EQUAL
18168: IFTRUE 18172
18170: GO 18179
18172: POP
// hHackInvincible ; 5 :
18173: CALL 31053 0 0
18177: GO 18240
18179: LD_INT 5
18181: DOUBLE
18182: EQUAL
18183: IFTRUE 18187
18185: GO 18194
18187: POP
// hHackInvisible ; 6 :
18188: CALL 31164 0 0
18192: GO 18240
18194: LD_INT 6
18196: DOUBLE
18197: EQUAL
18198: IFTRUE 18202
18200: GO 18209
18202: POP
// hHackChangeYourSide ; 7 :
18203: CALL 31221 0 0
18207: GO 18240
18209: LD_INT 7
18211: DOUBLE
18212: EQUAL
18213: IFTRUE 18217
18215: GO 18224
18217: POP
// hHackChangeUnitSide ; 8 :
18218: CALL 31263 0 0
18222: GO 18240
18224: LD_INT 8
18226: DOUBLE
18227: EQUAL
18228: IFTRUE 18232
18230: GO 18239
18232: POP
// hHackFog ; end ;
18233: CALL 31364 0 0
18237: GO 18240
18239: POP
// end ; if p2 = game_save_mode then
18240: LD_VAR 0 2
18244: PUSH
18245: LD_INT 102
18247: EQUAL
18248: IFFALSE 18303
// begin if p3 = 1 then
18250: LD_VAR 0 3
18254: PUSH
18255: LD_INT 1
18257: EQUAL
18258: IFFALSE 18270
// globalGameSaveCounter := p4 ;
18260: LD_ADDR_EXP 37
18264: PUSH
18265: LD_VAR 0 4
18269: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18270: LD_VAR 0 3
18274: PUSH
18275: LD_INT 2
18277: EQUAL
18278: PUSH
18279: LD_EXP 37
18283: AND
18284: IFFALSE 18303
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18286: LD_STRING setGameSaveCounter(
18288: PUSH
18289: LD_EXP 37
18293: STR
18294: PUSH
18295: LD_STRING )
18297: STR
18298: PPUSH
18299: CALL_OW 559
// end ; end ;
18303: LD_VAR 0 7
18307: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18308: LD_INT 0
18310: PPUSH
// streamModeActive := false ;
18311: LD_ADDR_EXP 38
18315: PUSH
18316: LD_INT 0
18318: ST_TO_ADDR
// normalCounter := 36 ;
18319: LD_ADDR_EXP 39
18323: PUSH
18324: LD_INT 36
18326: ST_TO_ADDR
// hardcoreCounter := 18 ;
18327: LD_ADDR_EXP 40
18331: PUSH
18332: LD_INT 18
18334: ST_TO_ADDR
// sRocket := false ;
18335: LD_ADDR_EXP 43
18339: PUSH
18340: LD_INT 0
18342: ST_TO_ADDR
// sSpeed := false ;
18343: LD_ADDR_EXP 42
18347: PUSH
18348: LD_INT 0
18350: ST_TO_ADDR
// sEngine := false ;
18351: LD_ADDR_EXP 44
18355: PUSH
18356: LD_INT 0
18358: ST_TO_ADDR
// sSpec := false ;
18359: LD_ADDR_EXP 41
18363: PUSH
18364: LD_INT 0
18366: ST_TO_ADDR
// sLevel := false ;
18367: LD_ADDR_EXP 45
18371: PUSH
18372: LD_INT 0
18374: ST_TO_ADDR
// sArmoury := false ;
18375: LD_ADDR_EXP 46
18379: PUSH
18380: LD_INT 0
18382: ST_TO_ADDR
// sRadar := false ;
18383: LD_ADDR_EXP 47
18387: PUSH
18388: LD_INT 0
18390: ST_TO_ADDR
// sBunker := false ;
18391: LD_ADDR_EXP 48
18395: PUSH
18396: LD_INT 0
18398: ST_TO_ADDR
// sHack := false ;
18399: LD_ADDR_EXP 49
18403: PUSH
18404: LD_INT 0
18406: ST_TO_ADDR
// sFire := false ;
18407: LD_ADDR_EXP 50
18411: PUSH
18412: LD_INT 0
18414: ST_TO_ADDR
// sRefresh := false ;
18415: LD_ADDR_EXP 51
18419: PUSH
18420: LD_INT 0
18422: ST_TO_ADDR
// sExp := false ;
18423: LD_ADDR_EXP 52
18427: PUSH
18428: LD_INT 0
18430: ST_TO_ADDR
// sDepot := false ;
18431: LD_ADDR_EXP 53
18435: PUSH
18436: LD_INT 0
18438: ST_TO_ADDR
// sFlag := false ;
18439: LD_ADDR_EXP 54
18443: PUSH
18444: LD_INT 0
18446: ST_TO_ADDR
// sKamikadze := false ;
18447: LD_ADDR_EXP 62
18451: PUSH
18452: LD_INT 0
18454: ST_TO_ADDR
// sTroll := false ;
18455: LD_ADDR_EXP 63
18459: PUSH
18460: LD_INT 0
18462: ST_TO_ADDR
// sSlow := false ;
18463: LD_ADDR_EXP 64
18467: PUSH
18468: LD_INT 0
18470: ST_TO_ADDR
// sLack := false ;
18471: LD_ADDR_EXP 65
18475: PUSH
18476: LD_INT 0
18478: ST_TO_ADDR
// sTank := false ;
18479: LD_ADDR_EXP 67
18483: PUSH
18484: LD_INT 0
18486: ST_TO_ADDR
// sRemote := false ;
18487: LD_ADDR_EXP 68
18491: PUSH
18492: LD_INT 0
18494: ST_TO_ADDR
// sPowell := false ;
18495: LD_ADDR_EXP 69
18499: PUSH
18500: LD_INT 0
18502: ST_TO_ADDR
// sTeleport := false ;
18503: LD_ADDR_EXP 72
18507: PUSH
18508: LD_INT 0
18510: ST_TO_ADDR
// sOilTower := false ;
18511: LD_ADDR_EXP 74
18515: PUSH
18516: LD_INT 0
18518: ST_TO_ADDR
// sShovel := false ;
18519: LD_ADDR_EXP 75
18523: PUSH
18524: LD_INT 0
18526: ST_TO_ADDR
// sSheik := false ;
18527: LD_ADDR_EXP 76
18531: PUSH
18532: LD_INT 0
18534: ST_TO_ADDR
// sEarthquake := false ;
18535: LD_ADDR_EXP 78
18539: PUSH
18540: LD_INT 0
18542: ST_TO_ADDR
// sAI := false ;
18543: LD_ADDR_EXP 79
18547: PUSH
18548: LD_INT 0
18550: ST_TO_ADDR
// sCargo := false ;
18551: LD_ADDR_EXP 82
18555: PUSH
18556: LD_INT 0
18558: ST_TO_ADDR
// sDLaser := false ;
18559: LD_ADDR_EXP 83
18563: PUSH
18564: LD_INT 0
18566: ST_TO_ADDR
// sExchange := false ;
18567: LD_ADDR_EXP 84
18571: PUSH
18572: LD_INT 0
18574: ST_TO_ADDR
// sFac := false ;
18575: LD_ADDR_EXP 85
18579: PUSH
18580: LD_INT 0
18582: ST_TO_ADDR
// sPower := false ;
18583: LD_ADDR_EXP 86
18587: PUSH
18588: LD_INT 0
18590: ST_TO_ADDR
// sRandom := false ;
18591: LD_ADDR_EXP 87
18595: PUSH
18596: LD_INT 0
18598: ST_TO_ADDR
// sShield := false ;
18599: LD_ADDR_EXP 88
18603: PUSH
18604: LD_INT 0
18606: ST_TO_ADDR
// sTime := false ;
18607: LD_ADDR_EXP 89
18611: PUSH
18612: LD_INT 0
18614: ST_TO_ADDR
// sTools := false ;
18615: LD_ADDR_EXP 90
18619: PUSH
18620: LD_INT 0
18622: ST_TO_ADDR
// sSold := false ;
18623: LD_ADDR_EXP 55
18627: PUSH
18628: LD_INT 0
18630: ST_TO_ADDR
// sDiff := false ;
18631: LD_ADDR_EXP 56
18635: PUSH
18636: LD_INT 0
18638: ST_TO_ADDR
// sFog := false ;
18639: LD_ADDR_EXP 59
18643: PUSH
18644: LD_INT 0
18646: ST_TO_ADDR
// sReset := false ;
18647: LD_ADDR_EXP 60
18651: PUSH
18652: LD_INT 0
18654: ST_TO_ADDR
// sSun := false ;
18655: LD_ADDR_EXP 61
18659: PUSH
18660: LD_INT 0
18662: ST_TO_ADDR
// sTiger := false ;
18663: LD_ADDR_EXP 57
18667: PUSH
18668: LD_INT 0
18670: ST_TO_ADDR
// sBomb := false ;
18671: LD_ADDR_EXP 58
18675: PUSH
18676: LD_INT 0
18678: ST_TO_ADDR
// sWound := false ;
18679: LD_ADDR_EXP 66
18683: PUSH
18684: LD_INT 0
18686: ST_TO_ADDR
// sBetray := false ;
18687: LD_ADDR_EXP 70
18691: PUSH
18692: LD_INT 0
18694: ST_TO_ADDR
// sContamin := false ;
18695: LD_ADDR_EXP 71
18699: PUSH
18700: LD_INT 0
18702: ST_TO_ADDR
// sOil := false ;
18703: LD_ADDR_EXP 73
18707: PUSH
18708: LD_INT 0
18710: ST_TO_ADDR
// sStu := false ;
18711: LD_ADDR_EXP 77
18715: PUSH
18716: LD_INT 0
18718: ST_TO_ADDR
// sBazooka := false ;
18719: LD_ADDR_EXP 80
18723: PUSH
18724: LD_INT 0
18726: ST_TO_ADDR
// sMortar := false ;
18727: LD_ADDR_EXP 81
18731: PUSH
18732: LD_INT 0
18734: ST_TO_ADDR
// sRanger := false ;
18735: LD_ADDR_EXP 91
18739: PUSH
18740: LD_INT 0
18742: ST_TO_ADDR
// sComputer := false ;
18743: LD_ADDR_EXP 92
18747: PUSH
18748: LD_INT 0
18750: ST_TO_ADDR
// s30 := false ;
18751: LD_ADDR_EXP 93
18755: PUSH
18756: LD_INT 0
18758: ST_TO_ADDR
// s60 := false ;
18759: LD_ADDR_EXP 94
18763: PUSH
18764: LD_INT 0
18766: ST_TO_ADDR
// end ;
18767: LD_VAR 0 1
18771: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18772: LD_INT 0
18774: PPUSH
18775: PPUSH
18776: PPUSH
18777: PPUSH
18778: PPUSH
18779: PPUSH
18780: PPUSH
// result := [ ] ;
18781: LD_ADDR_VAR 0 2
18785: PUSH
18786: EMPTY
18787: ST_TO_ADDR
// if campaign_id = 1 then
18788: LD_OWVAR 69
18792: PUSH
18793: LD_INT 1
18795: EQUAL
18796: IFFALSE 21962
// begin case mission_number of 1 :
18798: LD_OWVAR 70
18802: PUSH
18803: LD_INT 1
18805: DOUBLE
18806: EQUAL
18807: IFTRUE 18811
18809: GO 18887
18811: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18812: LD_ADDR_VAR 0 2
18816: PUSH
18817: LD_INT 2
18819: PUSH
18820: LD_INT 4
18822: PUSH
18823: LD_INT 11
18825: PUSH
18826: LD_INT 12
18828: PUSH
18829: LD_INT 15
18831: PUSH
18832: LD_INT 16
18834: PUSH
18835: LD_INT 22
18837: PUSH
18838: LD_INT 23
18840: PUSH
18841: LD_INT 26
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 101
18857: PUSH
18858: LD_INT 102
18860: PUSH
18861: LD_INT 106
18863: PUSH
18864: LD_INT 116
18866: PUSH
18867: LD_INT 117
18869: PUSH
18870: LD_INT 118
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: ST_TO_ADDR
18885: GO 21960
18887: LD_INT 2
18889: DOUBLE
18890: EQUAL
18891: IFTRUE 18895
18893: GO 18979
18895: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18896: LD_ADDR_VAR 0 2
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 4
18906: PUSH
18907: LD_INT 11
18909: PUSH
18910: LD_INT 12
18912: PUSH
18913: LD_INT 15
18915: PUSH
18916: LD_INT 16
18918: PUSH
18919: LD_INT 22
18921: PUSH
18922: LD_INT 23
18924: PUSH
18925: LD_INT 26
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 101
18941: PUSH
18942: LD_INT 102
18944: PUSH
18945: LD_INT 105
18947: PUSH
18948: LD_INT 106
18950: PUSH
18951: LD_INT 108
18953: PUSH
18954: LD_INT 116
18956: PUSH
18957: LD_INT 117
18959: PUSH
18960: LD_INT 118
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: ST_TO_ADDR
18977: GO 21960
18979: LD_INT 3
18981: DOUBLE
18982: EQUAL
18983: IFTRUE 18987
18985: GO 19075
18987: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18988: LD_ADDR_VAR 0 2
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: LD_INT 4
18998: PUSH
18999: LD_INT 5
19001: PUSH
19002: LD_INT 11
19004: PUSH
19005: LD_INT 12
19007: PUSH
19008: LD_INT 15
19010: PUSH
19011: LD_INT 16
19013: PUSH
19014: LD_INT 22
19016: PUSH
19017: LD_INT 26
19019: PUSH
19020: LD_INT 36
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 101
19037: PUSH
19038: LD_INT 102
19040: PUSH
19041: LD_INT 105
19043: PUSH
19044: LD_INT 106
19046: PUSH
19047: LD_INT 108
19049: PUSH
19050: LD_INT 116
19052: PUSH
19053: LD_INT 117
19055: PUSH
19056: LD_INT 118
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: ST_TO_ADDR
19073: GO 21960
19075: LD_INT 4
19077: DOUBLE
19078: EQUAL
19079: IFTRUE 19083
19081: GO 19179
19083: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19084: LD_ADDR_VAR 0 2
19088: PUSH
19089: LD_INT 2
19091: PUSH
19092: LD_INT 4
19094: PUSH
19095: LD_INT 5
19097: PUSH
19098: LD_INT 8
19100: PUSH
19101: LD_INT 11
19103: PUSH
19104: LD_INT 12
19106: PUSH
19107: LD_INT 15
19109: PUSH
19110: LD_INT 16
19112: PUSH
19113: LD_INT 22
19115: PUSH
19116: LD_INT 23
19118: PUSH
19119: LD_INT 26
19121: PUSH
19122: LD_INT 36
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 101
19141: PUSH
19142: LD_INT 102
19144: PUSH
19145: LD_INT 105
19147: PUSH
19148: LD_INT 106
19150: PUSH
19151: LD_INT 108
19153: PUSH
19154: LD_INT 116
19156: PUSH
19157: LD_INT 117
19159: PUSH
19160: LD_INT 118
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: ST_TO_ADDR
19177: GO 21960
19179: LD_INT 5
19181: DOUBLE
19182: EQUAL
19183: IFTRUE 19187
19185: GO 19299
19187: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19188: LD_ADDR_VAR 0 2
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: LD_INT 4
19198: PUSH
19199: LD_INT 5
19201: PUSH
19202: LD_INT 6
19204: PUSH
19205: LD_INT 8
19207: PUSH
19208: LD_INT 11
19210: PUSH
19211: LD_INT 12
19213: PUSH
19214: LD_INT 15
19216: PUSH
19217: LD_INT 16
19219: PUSH
19220: LD_INT 22
19222: PUSH
19223: LD_INT 23
19225: PUSH
19226: LD_INT 25
19228: PUSH
19229: LD_INT 26
19231: PUSH
19232: LD_INT 36
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 101
19253: PUSH
19254: LD_INT 102
19256: PUSH
19257: LD_INT 105
19259: PUSH
19260: LD_INT 106
19262: PUSH
19263: LD_INT 108
19265: PUSH
19266: LD_INT 109
19268: PUSH
19269: LD_INT 112
19271: PUSH
19272: LD_INT 116
19274: PUSH
19275: LD_INT 117
19277: PUSH
19278: LD_INT 118
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: ST_TO_ADDR
19297: GO 21960
19299: LD_INT 6
19301: DOUBLE
19302: EQUAL
19303: IFTRUE 19307
19305: GO 19439
19307: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19308: LD_ADDR_VAR 0 2
19312: PUSH
19313: LD_INT 2
19315: PUSH
19316: LD_INT 4
19318: PUSH
19319: LD_INT 5
19321: PUSH
19322: LD_INT 6
19324: PUSH
19325: LD_INT 8
19327: PUSH
19328: LD_INT 11
19330: PUSH
19331: LD_INT 12
19333: PUSH
19334: LD_INT 15
19336: PUSH
19337: LD_INT 16
19339: PUSH
19340: LD_INT 20
19342: PUSH
19343: LD_INT 21
19345: PUSH
19346: LD_INT 22
19348: PUSH
19349: LD_INT 23
19351: PUSH
19352: LD_INT 25
19354: PUSH
19355: LD_INT 26
19357: PUSH
19358: LD_INT 30
19360: PUSH
19361: LD_INT 31
19363: PUSH
19364: LD_INT 32
19366: PUSH
19367: LD_INT 36
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 101
19393: PUSH
19394: LD_INT 102
19396: PUSH
19397: LD_INT 105
19399: PUSH
19400: LD_INT 106
19402: PUSH
19403: LD_INT 108
19405: PUSH
19406: LD_INT 109
19408: PUSH
19409: LD_INT 112
19411: PUSH
19412: LD_INT 116
19414: PUSH
19415: LD_INT 117
19417: PUSH
19418: LD_INT 118
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: ST_TO_ADDR
19437: GO 21960
19439: LD_INT 7
19441: DOUBLE
19442: EQUAL
19443: IFTRUE 19447
19445: GO 19559
19447: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19448: LD_ADDR_VAR 0 2
19452: PUSH
19453: LD_INT 2
19455: PUSH
19456: LD_INT 4
19458: PUSH
19459: LD_INT 5
19461: PUSH
19462: LD_INT 7
19464: PUSH
19465: LD_INT 11
19467: PUSH
19468: LD_INT 12
19470: PUSH
19471: LD_INT 15
19473: PUSH
19474: LD_INT 16
19476: PUSH
19477: LD_INT 20
19479: PUSH
19480: LD_INT 21
19482: PUSH
19483: LD_INT 22
19485: PUSH
19486: LD_INT 23
19488: PUSH
19489: LD_INT 25
19491: PUSH
19492: LD_INT 26
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 101
19513: PUSH
19514: LD_INT 102
19516: PUSH
19517: LD_INT 103
19519: PUSH
19520: LD_INT 105
19522: PUSH
19523: LD_INT 106
19525: PUSH
19526: LD_INT 108
19528: PUSH
19529: LD_INT 112
19531: PUSH
19532: LD_INT 116
19534: PUSH
19535: LD_INT 117
19537: PUSH
19538: LD_INT 118
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: ST_TO_ADDR
19557: GO 21960
19559: LD_INT 8
19561: DOUBLE
19562: EQUAL
19563: IFTRUE 19567
19565: GO 19707
19567: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19568: LD_ADDR_VAR 0 2
19572: PUSH
19573: LD_INT 2
19575: PUSH
19576: LD_INT 4
19578: PUSH
19579: LD_INT 5
19581: PUSH
19582: LD_INT 6
19584: PUSH
19585: LD_INT 7
19587: PUSH
19588: LD_INT 8
19590: PUSH
19591: LD_INT 11
19593: PUSH
19594: LD_INT 12
19596: PUSH
19597: LD_INT 15
19599: PUSH
19600: LD_INT 16
19602: PUSH
19603: LD_INT 20
19605: PUSH
19606: LD_INT 21
19608: PUSH
19609: LD_INT 22
19611: PUSH
19612: LD_INT 23
19614: PUSH
19615: LD_INT 25
19617: PUSH
19618: LD_INT 26
19620: PUSH
19621: LD_INT 30
19623: PUSH
19624: LD_INT 31
19626: PUSH
19627: LD_INT 32
19629: PUSH
19630: LD_INT 36
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 101
19657: PUSH
19658: LD_INT 102
19660: PUSH
19661: LD_INT 103
19663: PUSH
19664: LD_INT 105
19666: PUSH
19667: LD_INT 106
19669: PUSH
19670: LD_INT 108
19672: PUSH
19673: LD_INT 109
19675: PUSH
19676: LD_INT 112
19678: PUSH
19679: LD_INT 116
19681: PUSH
19682: LD_INT 117
19684: PUSH
19685: LD_INT 118
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: ST_TO_ADDR
19705: GO 21960
19707: LD_INT 9
19709: DOUBLE
19710: EQUAL
19711: IFTRUE 19715
19713: GO 19863
19715: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19716: LD_ADDR_VAR 0 2
19720: PUSH
19721: LD_INT 2
19723: PUSH
19724: LD_INT 4
19726: PUSH
19727: LD_INT 5
19729: PUSH
19730: LD_INT 6
19732: PUSH
19733: LD_INT 7
19735: PUSH
19736: LD_INT 8
19738: PUSH
19739: LD_INT 11
19741: PUSH
19742: LD_INT 12
19744: PUSH
19745: LD_INT 15
19747: PUSH
19748: LD_INT 16
19750: PUSH
19751: LD_INT 20
19753: PUSH
19754: LD_INT 21
19756: PUSH
19757: LD_INT 22
19759: PUSH
19760: LD_INT 23
19762: PUSH
19763: LD_INT 25
19765: PUSH
19766: LD_INT 26
19768: PUSH
19769: LD_INT 28
19771: PUSH
19772: LD_INT 30
19774: PUSH
19775: LD_INT 31
19777: PUSH
19778: LD_INT 32
19780: PUSH
19781: LD_INT 36
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 101
19809: PUSH
19810: LD_INT 102
19812: PUSH
19813: LD_INT 103
19815: PUSH
19816: LD_INT 105
19818: PUSH
19819: LD_INT 106
19821: PUSH
19822: LD_INT 108
19824: PUSH
19825: LD_INT 109
19827: PUSH
19828: LD_INT 112
19830: PUSH
19831: LD_INT 114
19833: PUSH
19834: LD_INT 116
19836: PUSH
19837: LD_INT 117
19839: PUSH
19840: LD_INT 118
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: ST_TO_ADDR
19861: GO 21960
19863: LD_INT 10
19865: DOUBLE
19866: EQUAL
19867: IFTRUE 19871
19869: GO 20067
19871: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19872: LD_ADDR_VAR 0 2
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: LD_INT 4
19882: PUSH
19883: LD_INT 5
19885: PUSH
19886: LD_INT 6
19888: PUSH
19889: LD_INT 7
19891: PUSH
19892: LD_INT 8
19894: PUSH
19895: LD_INT 9
19897: PUSH
19898: LD_INT 10
19900: PUSH
19901: LD_INT 11
19903: PUSH
19904: LD_INT 12
19906: PUSH
19907: LD_INT 13
19909: PUSH
19910: LD_INT 14
19912: PUSH
19913: LD_INT 15
19915: PUSH
19916: LD_INT 16
19918: PUSH
19919: LD_INT 17
19921: PUSH
19922: LD_INT 18
19924: PUSH
19925: LD_INT 19
19927: PUSH
19928: LD_INT 20
19930: PUSH
19931: LD_INT 21
19933: PUSH
19934: LD_INT 22
19936: PUSH
19937: LD_INT 23
19939: PUSH
19940: LD_INT 24
19942: PUSH
19943: LD_INT 25
19945: PUSH
19946: LD_INT 26
19948: PUSH
19949: LD_INT 28
19951: PUSH
19952: LD_INT 30
19954: PUSH
19955: LD_INT 31
19957: PUSH
19958: LD_INT 32
19960: PUSH
19961: LD_INT 36
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 101
19997: PUSH
19998: LD_INT 102
20000: PUSH
20001: LD_INT 103
20003: PUSH
20004: LD_INT 104
20006: PUSH
20007: LD_INT 105
20009: PUSH
20010: LD_INT 106
20012: PUSH
20013: LD_INT 107
20015: PUSH
20016: LD_INT 108
20018: PUSH
20019: LD_INT 109
20021: PUSH
20022: LD_INT 110
20024: PUSH
20025: LD_INT 111
20027: PUSH
20028: LD_INT 112
20030: PUSH
20031: LD_INT 114
20033: PUSH
20034: LD_INT 116
20036: PUSH
20037: LD_INT 117
20039: PUSH
20040: LD_INT 118
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: ST_TO_ADDR
20065: GO 21960
20067: LD_INT 11
20069: DOUBLE
20070: EQUAL
20071: IFTRUE 20075
20073: GO 20279
20075: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20076: LD_ADDR_VAR 0 2
20080: PUSH
20081: LD_INT 2
20083: PUSH
20084: LD_INT 3
20086: PUSH
20087: LD_INT 4
20089: PUSH
20090: LD_INT 5
20092: PUSH
20093: LD_INT 6
20095: PUSH
20096: LD_INT 7
20098: PUSH
20099: LD_INT 8
20101: PUSH
20102: LD_INT 9
20104: PUSH
20105: LD_INT 10
20107: PUSH
20108: LD_INT 11
20110: PUSH
20111: LD_INT 12
20113: PUSH
20114: LD_INT 13
20116: PUSH
20117: LD_INT 14
20119: PUSH
20120: LD_INT 15
20122: PUSH
20123: LD_INT 16
20125: PUSH
20126: LD_INT 17
20128: PUSH
20129: LD_INT 18
20131: PUSH
20132: LD_INT 19
20134: PUSH
20135: LD_INT 20
20137: PUSH
20138: LD_INT 21
20140: PUSH
20141: LD_INT 22
20143: PUSH
20144: LD_INT 23
20146: PUSH
20147: LD_INT 24
20149: PUSH
20150: LD_INT 25
20152: PUSH
20153: LD_INT 26
20155: PUSH
20156: LD_INT 28
20158: PUSH
20159: LD_INT 30
20161: PUSH
20162: LD_INT 31
20164: PUSH
20165: LD_INT 32
20167: PUSH
20168: LD_INT 34
20170: PUSH
20171: LD_INT 36
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 101
20209: PUSH
20210: LD_INT 102
20212: PUSH
20213: LD_INT 103
20215: PUSH
20216: LD_INT 104
20218: PUSH
20219: LD_INT 105
20221: PUSH
20222: LD_INT 106
20224: PUSH
20225: LD_INT 107
20227: PUSH
20228: LD_INT 108
20230: PUSH
20231: LD_INT 109
20233: PUSH
20234: LD_INT 110
20236: PUSH
20237: LD_INT 111
20239: PUSH
20240: LD_INT 112
20242: PUSH
20243: LD_INT 114
20245: PUSH
20246: LD_INT 116
20248: PUSH
20249: LD_INT 117
20251: PUSH
20252: LD_INT 118
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: ST_TO_ADDR
20277: GO 21960
20279: LD_INT 12
20281: DOUBLE
20282: EQUAL
20283: IFTRUE 20287
20285: GO 20507
20287: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20288: LD_ADDR_VAR 0 2
20292: PUSH
20293: LD_INT 1
20295: PUSH
20296: LD_INT 2
20298: PUSH
20299: LD_INT 3
20301: PUSH
20302: LD_INT 4
20304: PUSH
20305: LD_INT 5
20307: PUSH
20308: LD_INT 6
20310: PUSH
20311: LD_INT 7
20313: PUSH
20314: LD_INT 8
20316: PUSH
20317: LD_INT 9
20319: PUSH
20320: LD_INT 10
20322: PUSH
20323: LD_INT 11
20325: PUSH
20326: LD_INT 12
20328: PUSH
20329: LD_INT 13
20331: PUSH
20332: LD_INT 14
20334: PUSH
20335: LD_INT 15
20337: PUSH
20338: LD_INT 16
20340: PUSH
20341: LD_INT 17
20343: PUSH
20344: LD_INT 18
20346: PUSH
20347: LD_INT 19
20349: PUSH
20350: LD_INT 20
20352: PUSH
20353: LD_INT 21
20355: PUSH
20356: LD_INT 22
20358: PUSH
20359: LD_INT 23
20361: PUSH
20362: LD_INT 24
20364: PUSH
20365: LD_INT 25
20367: PUSH
20368: LD_INT 26
20370: PUSH
20371: LD_INT 27
20373: PUSH
20374: LD_INT 28
20376: PUSH
20377: LD_INT 30
20379: PUSH
20380: LD_INT 31
20382: PUSH
20383: LD_INT 32
20385: PUSH
20386: LD_INT 33
20388: PUSH
20389: LD_INT 34
20391: PUSH
20392: LD_INT 36
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 101
20433: PUSH
20434: LD_INT 102
20436: PUSH
20437: LD_INT 103
20439: PUSH
20440: LD_INT 104
20442: PUSH
20443: LD_INT 105
20445: PUSH
20446: LD_INT 106
20448: PUSH
20449: LD_INT 107
20451: PUSH
20452: LD_INT 108
20454: PUSH
20455: LD_INT 109
20457: PUSH
20458: LD_INT 110
20460: PUSH
20461: LD_INT 111
20463: PUSH
20464: LD_INT 112
20466: PUSH
20467: LD_INT 113
20469: PUSH
20470: LD_INT 114
20472: PUSH
20473: LD_INT 116
20475: PUSH
20476: LD_INT 117
20478: PUSH
20479: LD_INT 118
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: ST_TO_ADDR
20505: GO 21960
20507: LD_INT 13
20509: DOUBLE
20510: EQUAL
20511: IFTRUE 20515
20513: GO 20723
20515: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20516: LD_ADDR_VAR 0 2
20520: PUSH
20521: LD_INT 1
20523: PUSH
20524: LD_INT 2
20526: PUSH
20527: LD_INT 3
20529: PUSH
20530: LD_INT 4
20532: PUSH
20533: LD_INT 5
20535: PUSH
20536: LD_INT 8
20538: PUSH
20539: LD_INT 9
20541: PUSH
20542: LD_INT 10
20544: PUSH
20545: LD_INT 11
20547: PUSH
20548: LD_INT 12
20550: PUSH
20551: LD_INT 14
20553: PUSH
20554: LD_INT 15
20556: PUSH
20557: LD_INT 16
20559: PUSH
20560: LD_INT 17
20562: PUSH
20563: LD_INT 18
20565: PUSH
20566: LD_INT 19
20568: PUSH
20569: LD_INT 20
20571: PUSH
20572: LD_INT 21
20574: PUSH
20575: LD_INT 22
20577: PUSH
20578: LD_INT 23
20580: PUSH
20581: LD_INT 24
20583: PUSH
20584: LD_INT 25
20586: PUSH
20587: LD_INT 26
20589: PUSH
20590: LD_INT 27
20592: PUSH
20593: LD_INT 28
20595: PUSH
20596: LD_INT 30
20598: PUSH
20599: LD_INT 31
20601: PUSH
20602: LD_INT 32
20604: PUSH
20605: LD_INT 33
20607: PUSH
20608: LD_INT 34
20610: PUSH
20611: LD_INT 36
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 101
20649: PUSH
20650: LD_INT 102
20652: PUSH
20653: LD_INT 103
20655: PUSH
20656: LD_INT 104
20658: PUSH
20659: LD_INT 105
20661: PUSH
20662: LD_INT 106
20664: PUSH
20665: LD_INT 107
20667: PUSH
20668: LD_INT 108
20670: PUSH
20671: LD_INT 109
20673: PUSH
20674: LD_INT 110
20676: PUSH
20677: LD_INT 111
20679: PUSH
20680: LD_INT 112
20682: PUSH
20683: LD_INT 113
20685: PUSH
20686: LD_INT 114
20688: PUSH
20689: LD_INT 116
20691: PUSH
20692: LD_INT 117
20694: PUSH
20695: LD_INT 118
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: ST_TO_ADDR
20721: GO 21960
20723: LD_INT 14
20725: DOUBLE
20726: EQUAL
20727: IFTRUE 20731
20729: GO 20955
20731: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20732: LD_ADDR_VAR 0 2
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: LD_INT 2
20742: PUSH
20743: LD_INT 3
20745: PUSH
20746: LD_INT 4
20748: PUSH
20749: LD_INT 5
20751: PUSH
20752: LD_INT 6
20754: PUSH
20755: LD_INT 7
20757: PUSH
20758: LD_INT 8
20760: PUSH
20761: LD_INT 9
20763: PUSH
20764: LD_INT 10
20766: PUSH
20767: LD_INT 11
20769: PUSH
20770: LD_INT 12
20772: PUSH
20773: LD_INT 13
20775: PUSH
20776: LD_INT 14
20778: PUSH
20779: LD_INT 15
20781: PUSH
20782: LD_INT 16
20784: PUSH
20785: LD_INT 17
20787: PUSH
20788: LD_INT 18
20790: PUSH
20791: LD_INT 19
20793: PUSH
20794: LD_INT 20
20796: PUSH
20797: LD_INT 21
20799: PUSH
20800: LD_INT 22
20802: PUSH
20803: LD_INT 23
20805: PUSH
20806: LD_INT 24
20808: PUSH
20809: LD_INT 25
20811: PUSH
20812: LD_INT 26
20814: PUSH
20815: LD_INT 27
20817: PUSH
20818: LD_INT 28
20820: PUSH
20821: LD_INT 29
20823: PUSH
20824: LD_INT 30
20826: PUSH
20827: LD_INT 31
20829: PUSH
20830: LD_INT 32
20832: PUSH
20833: LD_INT 33
20835: PUSH
20836: LD_INT 34
20838: PUSH
20839: LD_INT 36
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 101
20881: PUSH
20882: LD_INT 102
20884: PUSH
20885: LD_INT 103
20887: PUSH
20888: LD_INT 104
20890: PUSH
20891: LD_INT 105
20893: PUSH
20894: LD_INT 106
20896: PUSH
20897: LD_INT 107
20899: PUSH
20900: LD_INT 108
20902: PUSH
20903: LD_INT 109
20905: PUSH
20906: LD_INT 110
20908: PUSH
20909: LD_INT 111
20911: PUSH
20912: LD_INT 112
20914: PUSH
20915: LD_INT 113
20917: PUSH
20918: LD_INT 114
20920: PUSH
20921: LD_INT 116
20923: PUSH
20924: LD_INT 117
20926: PUSH
20927: LD_INT 118
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: ST_TO_ADDR
20953: GO 21960
20955: LD_INT 15
20957: DOUBLE
20958: EQUAL
20959: IFTRUE 20963
20961: GO 21187
20963: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20964: LD_ADDR_VAR 0 2
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 3
20977: PUSH
20978: LD_INT 4
20980: PUSH
20981: LD_INT 5
20983: PUSH
20984: LD_INT 6
20986: PUSH
20987: LD_INT 7
20989: PUSH
20990: LD_INT 8
20992: PUSH
20993: LD_INT 9
20995: PUSH
20996: LD_INT 10
20998: PUSH
20999: LD_INT 11
21001: PUSH
21002: LD_INT 12
21004: PUSH
21005: LD_INT 13
21007: PUSH
21008: LD_INT 14
21010: PUSH
21011: LD_INT 15
21013: PUSH
21014: LD_INT 16
21016: PUSH
21017: LD_INT 17
21019: PUSH
21020: LD_INT 18
21022: PUSH
21023: LD_INT 19
21025: PUSH
21026: LD_INT 20
21028: PUSH
21029: LD_INT 21
21031: PUSH
21032: LD_INT 22
21034: PUSH
21035: LD_INT 23
21037: PUSH
21038: LD_INT 24
21040: PUSH
21041: LD_INT 25
21043: PUSH
21044: LD_INT 26
21046: PUSH
21047: LD_INT 27
21049: PUSH
21050: LD_INT 28
21052: PUSH
21053: LD_INT 29
21055: PUSH
21056: LD_INT 30
21058: PUSH
21059: LD_INT 31
21061: PUSH
21062: LD_INT 32
21064: PUSH
21065: LD_INT 33
21067: PUSH
21068: LD_INT 34
21070: PUSH
21071: LD_INT 36
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 101
21113: PUSH
21114: LD_INT 102
21116: PUSH
21117: LD_INT 103
21119: PUSH
21120: LD_INT 104
21122: PUSH
21123: LD_INT 105
21125: PUSH
21126: LD_INT 106
21128: PUSH
21129: LD_INT 107
21131: PUSH
21132: LD_INT 108
21134: PUSH
21135: LD_INT 109
21137: PUSH
21138: LD_INT 110
21140: PUSH
21141: LD_INT 111
21143: PUSH
21144: LD_INT 112
21146: PUSH
21147: LD_INT 113
21149: PUSH
21150: LD_INT 114
21152: PUSH
21153: LD_INT 116
21155: PUSH
21156: LD_INT 117
21158: PUSH
21159: LD_INT 118
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: ST_TO_ADDR
21185: GO 21960
21187: LD_INT 16
21189: DOUBLE
21190: EQUAL
21191: IFTRUE 21195
21193: GO 21331
21195: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21196: LD_ADDR_VAR 0 2
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: LD_INT 4
21206: PUSH
21207: LD_INT 5
21209: PUSH
21210: LD_INT 7
21212: PUSH
21213: LD_INT 11
21215: PUSH
21216: LD_INT 12
21218: PUSH
21219: LD_INT 15
21221: PUSH
21222: LD_INT 16
21224: PUSH
21225: LD_INT 20
21227: PUSH
21228: LD_INT 21
21230: PUSH
21231: LD_INT 22
21233: PUSH
21234: LD_INT 23
21236: PUSH
21237: LD_INT 25
21239: PUSH
21240: LD_INT 26
21242: PUSH
21243: LD_INT 30
21245: PUSH
21246: LD_INT 31
21248: PUSH
21249: LD_INT 32
21251: PUSH
21252: LD_INT 33
21254: PUSH
21255: LD_INT 34
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 101
21281: PUSH
21282: LD_INT 102
21284: PUSH
21285: LD_INT 103
21287: PUSH
21288: LD_INT 106
21290: PUSH
21291: LD_INT 108
21293: PUSH
21294: LD_INT 112
21296: PUSH
21297: LD_INT 113
21299: PUSH
21300: LD_INT 114
21302: PUSH
21303: LD_INT 116
21305: PUSH
21306: LD_INT 117
21308: PUSH
21309: LD_INT 118
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: ST_TO_ADDR
21329: GO 21960
21331: LD_INT 17
21333: DOUBLE
21334: EQUAL
21335: IFTRUE 21339
21337: GO 21563
21339: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21340: LD_ADDR_VAR 0 2
21344: PUSH
21345: LD_INT 1
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: LD_INT 3
21353: PUSH
21354: LD_INT 4
21356: PUSH
21357: LD_INT 5
21359: PUSH
21360: LD_INT 6
21362: PUSH
21363: LD_INT 7
21365: PUSH
21366: LD_INT 8
21368: PUSH
21369: LD_INT 9
21371: PUSH
21372: LD_INT 10
21374: PUSH
21375: LD_INT 11
21377: PUSH
21378: LD_INT 12
21380: PUSH
21381: LD_INT 13
21383: PUSH
21384: LD_INT 14
21386: PUSH
21387: LD_INT 15
21389: PUSH
21390: LD_INT 16
21392: PUSH
21393: LD_INT 17
21395: PUSH
21396: LD_INT 18
21398: PUSH
21399: LD_INT 19
21401: PUSH
21402: LD_INT 20
21404: PUSH
21405: LD_INT 21
21407: PUSH
21408: LD_INT 22
21410: PUSH
21411: LD_INT 23
21413: PUSH
21414: LD_INT 24
21416: PUSH
21417: LD_INT 25
21419: PUSH
21420: LD_INT 26
21422: PUSH
21423: LD_INT 27
21425: PUSH
21426: LD_INT 28
21428: PUSH
21429: LD_INT 29
21431: PUSH
21432: LD_INT 30
21434: PUSH
21435: LD_INT 31
21437: PUSH
21438: LD_INT 32
21440: PUSH
21441: LD_INT 33
21443: PUSH
21444: LD_INT 34
21446: PUSH
21447: LD_INT 36
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 101
21489: PUSH
21490: LD_INT 102
21492: PUSH
21493: LD_INT 103
21495: PUSH
21496: LD_INT 104
21498: PUSH
21499: LD_INT 105
21501: PUSH
21502: LD_INT 106
21504: PUSH
21505: LD_INT 107
21507: PUSH
21508: LD_INT 108
21510: PUSH
21511: LD_INT 109
21513: PUSH
21514: LD_INT 110
21516: PUSH
21517: LD_INT 111
21519: PUSH
21520: LD_INT 112
21522: PUSH
21523: LD_INT 113
21525: PUSH
21526: LD_INT 114
21528: PUSH
21529: LD_INT 116
21531: PUSH
21532: LD_INT 117
21534: PUSH
21535: LD_INT 118
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: ST_TO_ADDR
21561: GO 21960
21563: LD_INT 18
21565: DOUBLE
21566: EQUAL
21567: IFTRUE 21571
21569: GO 21719
21571: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21572: LD_ADDR_VAR 0 2
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 4
21582: PUSH
21583: LD_INT 5
21585: PUSH
21586: LD_INT 7
21588: PUSH
21589: LD_INT 11
21591: PUSH
21592: LD_INT 12
21594: PUSH
21595: LD_INT 15
21597: PUSH
21598: LD_INT 16
21600: PUSH
21601: LD_INT 20
21603: PUSH
21604: LD_INT 21
21606: PUSH
21607: LD_INT 22
21609: PUSH
21610: LD_INT 23
21612: PUSH
21613: LD_INT 25
21615: PUSH
21616: LD_INT 26
21618: PUSH
21619: LD_INT 30
21621: PUSH
21622: LD_INT 31
21624: PUSH
21625: LD_INT 32
21627: PUSH
21628: LD_INT 33
21630: PUSH
21631: LD_INT 34
21633: PUSH
21634: LD_INT 35
21636: PUSH
21637: LD_INT 36
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 101
21665: PUSH
21666: LD_INT 102
21668: PUSH
21669: LD_INT 103
21671: PUSH
21672: LD_INT 106
21674: PUSH
21675: LD_INT 108
21677: PUSH
21678: LD_INT 112
21680: PUSH
21681: LD_INT 113
21683: PUSH
21684: LD_INT 114
21686: PUSH
21687: LD_INT 115
21689: PUSH
21690: LD_INT 116
21692: PUSH
21693: LD_INT 117
21695: PUSH
21696: LD_INT 118
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: ST_TO_ADDR
21717: GO 21960
21719: LD_INT 19
21721: DOUBLE
21722: EQUAL
21723: IFTRUE 21727
21725: GO 21959
21727: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21728: LD_ADDR_VAR 0 2
21732: PUSH
21733: LD_INT 1
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 3
21741: PUSH
21742: LD_INT 4
21744: PUSH
21745: LD_INT 5
21747: PUSH
21748: LD_INT 6
21750: PUSH
21751: LD_INT 7
21753: PUSH
21754: LD_INT 8
21756: PUSH
21757: LD_INT 9
21759: PUSH
21760: LD_INT 10
21762: PUSH
21763: LD_INT 11
21765: PUSH
21766: LD_INT 12
21768: PUSH
21769: LD_INT 13
21771: PUSH
21772: LD_INT 14
21774: PUSH
21775: LD_INT 15
21777: PUSH
21778: LD_INT 16
21780: PUSH
21781: LD_INT 17
21783: PUSH
21784: LD_INT 18
21786: PUSH
21787: LD_INT 19
21789: PUSH
21790: LD_INT 20
21792: PUSH
21793: LD_INT 21
21795: PUSH
21796: LD_INT 22
21798: PUSH
21799: LD_INT 23
21801: PUSH
21802: LD_INT 24
21804: PUSH
21805: LD_INT 25
21807: PUSH
21808: LD_INT 26
21810: PUSH
21811: LD_INT 27
21813: PUSH
21814: LD_INT 28
21816: PUSH
21817: LD_INT 29
21819: PUSH
21820: LD_INT 30
21822: PUSH
21823: LD_INT 31
21825: PUSH
21826: LD_INT 32
21828: PUSH
21829: LD_INT 33
21831: PUSH
21832: LD_INT 34
21834: PUSH
21835: LD_INT 35
21837: PUSH
21838: LD_INT 36
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 101
21881: PUSH
21882: LD_INT 102
21884: PUSH
21885: LD_INT 103
21887: PUSH
21888: LD_INT 104
21890: PUSH
21891: LD_INT 105
21893: PUSH
21894: LD_INT 106
21896: PUSH
21897: LD_INT 107
21899: PUSH
21900: LD_INT 108
21902: PUSH
21903: LD_INT 109
21905: PUSH
21906: LD_INT 110
21908: PUSH
21909: LD_INT 111
21911: PUSH
21912: LD_INT 112
21914: PUSH
21915: LD_INT 113
21917: PUSH
21918: LD_INT 114
21920: PUSH
21921: LD_INT 115
21923: PUSH
21924: LD_INT 116
21926: PUSH
21927: LD_INT 117
21929: PUSH
21930: LD_INT 118
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: ST_TO_ADDR
21957: GO 21960
21959: POP
// end else
21960: GO 22191
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21962: LD_ADDR_VAR 0 2
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: LD_INT 2
21972: PUSH
21973: LD_INT 3
21975: PUSH
21976: LD_INT 4
21978: PUSH
21979: LD_INT 5
21981: PUSH
21982: LD_INT 6
21984: PUSH
21985: LD_INT 7
21987: PUSH
21988: LD_INT 8
21990: PUSH
21991: LD_INT 9
21993: PUSH
21994: LD_INT 10
21996: PUSH
21997: LD_INT 11
21999: PUSH
22000: LD_INT 12
22002: PUSH
22003: LD_INT 13
22005: PUSH
22006: LD_INT 14
22008: PUSH
22009: LD_INT 15
22011: PUSH
22012: LD_INT 16
22014: PUSH
22015: LD_INT 17
22017: PUSH
22018: LD_INT 18
22020: PUSH
22021: LD_INT 19
22023: PUSH
22024: LD_INT 20
22026: PUSH
22027: LD_INT 21
22029: PUSH
22030: LD_INT 22
22032: PUSH
22033: LD_INT 23
22035: PUSH
22036: LD_INT 24
22038: PUSH
22039: LD_INT 25
22041: PUSH
22042: LD_INT 26
22044: PUSH
22045: LD_INT 27
22047: PUSH
22048: LD_INT 28
22050: PUSH
22051: LD_INT 29
22053: PUSH
22054: LD_INT 30
22056: PUSH
22057: LD_INT 31
22059: PUSH
22060: LD_INT 32
22062: PUSH
22063: LD_INT 33
22065: PUSH
22066: LD_INT 34
22068: PUSH
22069: LD_INT 35
22071: PUSH
22072: LD_INT 36
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 101
22115: PUSH
22116: LD_INT 102
22118: PUSH
22119: LD_INT 103
22121: PUSH
22122: LD_INT 104
22124: PUSH
22125: LD_INT 105
22127: PUSH
22128: LD_INT 106
22130: PUSH
22131: LD_INT 107
22133: PUSH
22134: LD_INT 108
22136: PUSH
22137: LD_INT 109
22139: PUSH
22140: LD_INT 110
22142: PUSH
22143: LD_INT 111
22145: PUSH
22146: LD_INT 112
22148: PUSH
22149: LD_INT 113
22151: PUSH
22152: LD_INT 114
22154: PUSH
22155: LD_INT 115
22157: PUSH
22158: LD_INT 116
22160: PUSH
22161: LD_INT 117
22163: PUSH
22164: LD_INT 118
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: ST_TO_ADDR
// if result then
22191: LD_VAR 0 2
22195: IFFALSE 22981
// begin normal :=  ;
22197: LD_ADDR_VAR 0 5
22201: PUSH
22202: LD_STRING 
22204: ST_TO_ADDR
// hardcore :=  ;
22205: LD_ADDR_VAR 0 6
22209: PUSH
22210: LD_STRING 
22212: ST_TO_ADDR
// active :=  ;
22213: LD_ADDR_VAR 0 7
22217: PUSH
22218: LD_STRING 
22220: ST_TO_ADDR
// for i = 1 to normalCounter do
22221: LD_ADDR_VAR 0 8
22225: PUSH
22226: DOUBLE
22227: LD_INT 1
22229: DEC
22230: ST_TO_ADDR
22231: LD_EXP 39
22235: PUSH
22236: FOR_TO
22237: IFFALSE 22338
// begin tmp := 0 ;
22239: LD_ADDR_VAR 0 3
22243: PUSH
22244: LD_STRING 0
22246: ST_TO_ADDR
// if result [ 1 ] then
22247: LD_VAR 0 2
22251: PUSH
22252: LD_INT 1
22254: ARRAY
22255: IFFALSE 22320
// if result [ 1 ] [ 1 ] = i then
22257: LD_VAR 0 2
22261: PUSH
22262: LD_INT 1
22264: ARRAY
22265: PUSH
22266: LD_INT 1
22268: ARRAY
22269: PUSH
22270: LD_VAR 0 8
22274: EQUAL
22275: IFFALSE 22320
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22277: LD_ADDR_VAR 0 2
22281: PUSH
22282: LD_VAR 0 2
22286: PPUSH
22287: LD_INT 1
22289: PPUSH
22290: LD_VAR 0 2
22294: PUSH
22295: LD_INT 1
22297: ARRAY
22298: PPUSH
22299: LD_INT 1
22301: PPUSH
22302: CALL_OW 3
22306: PPUSH
22307: CALL_OW 1
22311: ST_TO_ADDR
// tmp := 1 ;
22312: LD_ADDR_VAR 0 3
22316: PUSH
22317: LD_STRING 1
22319: ST_TO_ADDR
// end ; normal := normal & tmp ;
22320: LD_ADDR_VAR 0 5
22324: PUSH
22325: LD_VAR 0 5
22329: PUSH
22330: LD_VAR 0 3
22334: STR
22335: ST_TO_ADDR
// end ;
22336: GO 22236
22338: POP
22339: POP
// for i = 1 to hardcoreCounter do
22340: LD_ADDR_VAR 0 8
22344: PUSH
22345: DOUBLE
22346: LD_INT 1
22348: DEC
22349: ST_TO_ADDR
22350: LD_EXP 40
22354: PUSH
22355: FOR_TO
22356: IFFALSE 22461
// begin tmp := 0 ;
22358: LD_ADDR_VAR 0 3
22362: PUSH
22363: LD_STRING 0
22365: ST_TO_ADDR
// if result [ 2 ] then
22366: LD_VAR 0 2
22370: PUSH
22371: LD_INT 2
22373: ARRAY
22374: IFFALSE 22443
// if result [ 2 ] [ 1 ] = 100 + i then
22376: LD_VAR 0 2
22380: PUSH
22381: LD_INT 2
22383: ARRAY
22384: PUSH
22385: LD_INT 1
22387: ARRAY
22388: PUSH
22389: LD_INT 100
22391: PUSH
22392: LD_VAR 0 8
22396: PLUS
22397: EQUAL
22398: IFFALSE 22443
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22400: LD_ADDR_VAR 0 2
22404: PUSH
22405: LD_VAR 0 2
22409: PPUSH
22410: LD_INT 2
22412: PPUSH
22413: LD_VAR 0 2
22417: PUSH
22418: LD_INT 2
22420: ARRAY
22421: PPUSH
22422: LD_INT 1
22424: PPUSH
22425: CALL_OW 3
22429: PPUSH
22430: CALL_OW 1
22434: ST_TO_ADDR
// tmp := 1 ;
22435: LD_ADDR_VAR 0 3
22439: PUSH
22440: LD_STRING 1
22442: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22443: LD_ADDR_VAR 0 6
22447: PUSH
22448: LD_VAR 0 6
22452: PUSH
22453: LD_VAR 0 3
22457: STR
22458: ST_TO_ADDR
// end ;
22459: GO 22355
22461: POP
22462: POP
// if isGameLoad then
22463: LD_VAR 0 1
22467: IFFALSE 22942
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22469: LD_ADDR_VAR 0 4
22473: PUSH
22474: LD_EXP 43
22478: PUSH
22479: LD_EXP 42
22483: PUSH
22484: LD_EXP 44
22488: PUSH
22489: LD_EXP 41
22493: PUSH
22494: LD_EXP 45
22498: PUSH
22499: LD_EXP 46
22503: PUSH
22504: LD_EXP 47
22508: PUSH
22509: LD_EXP 48
22513: PUSH
22514: LD_EXP 49
22518: PUSH
22519: LD_EXP 50
22523: PUSH
22524: LD_EXP 51
22528: PUSH
22529: LD_EXP 52
22533: PUSH
22534: LD_EXP 53
22538: PUSH
22539: LD_EXP 54
22543: PUSH
22544: LD_EXP 62
22548: PUSH
22549: LD_EXP 63
22553: PUSH
22554: LD_EXP 64
22558: PUSH
22559: LD_EXP 65
22563: PUSH
22564: LD_EXP 67
22568: PUSH
22569: LD_EXP 68
22573: PUSH
22574: LD_EXP 69
22578: PUSH
22579: LD_EXP 72
22583: PUSH
22584: LD_EXP 74
22588: PUSH
22589: LD_EXP 75
22593: PUSH
22594: LD_EXP 76
22598: PUSH
22599: LD_EXP 78
22603: PUSH
22604: LD_EXP 79
22608: PUSH
22609: LD_EXP 82
22613: PUSH
22614: LD_EXP 83
22618: PUSH
22619: LD_EXP 84
22623: PUSH
22624: LD_EXP 85
22628: PUSH
22629: LD_EXP 86
22633: PUSH
22634: LD_EXP 87
22638: PUSH
22639: LD_EXP 88
22643: PUSH
22644: LD_EXP 89
22648: PUSH
22649: LD_EXP 90
22653: PUSH
22654: LD_EXP 55
22658: PUSH
22659: LD_EXP 56
22663: PUSH
22664: LD_EXP 59
22668: PUSH
22669: LD_EXP 60
22673: PUSH
22674: LD_EXP 61
22678: PUSH
22679: LD_EXP 57
22683: PUSH
22684: LD_EXP 58
22688: PUSH
22689: LD_EXP 66
22693: PUSH
22694: LD_EXP 70
22698: PUSH
22699: LD_EXP 71
22703: PUSH
22704: LD_EXP 73
22708: PUSH
22709: LD_EXP 77
22713: PUSH
22714: LD_EXP 80
22718: PUSH
22719: LD_EXP 81
22723: PUSH
22724: LD_EXP 91
22728: PUSH
22729: LD_EXP 92
22733: PUSH
22734: LD_EXP 93
22738: PUSH
22739: LD_EXP 94
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: ST_TO_ADDR
// tmp :=  ;
22800: LD_ADDR_VAR 0 3
22804: PUSH
22805: LD_STRING 
22807: ST_TO_ADDR
// for i = 1 to normalCounter do
22808: LD_ADDR_VAR 0 8
22812: PUSH
22813: DOUBLE
22814: LD_INT 1
22816: DEC
22817: ST_TO_ADDR
22818: LD_EXP 39
22822: PUSH
22823: FOR_TO
22824: IFFALSE 22860
// begin if flags [ i ] then
22826: LD_VAR 0 4
22830: PUSH
22831: LD_VAR 0 8
22835: ARRAY
22836: IFFALSE 22858
// tmp := tmp & i & ; ;
22838: LD_ADDR_VAR 0 3
22842: PUSH
22843: LD_VAR 0 3
22847: PUSH
22848: LD_VAR 0 8
22852: STR
22853: PUSH
22854: LD_STRING ;
22856: STR
22857: ST_TO_ADDR
// end ;
22858: GO 22823
22860: POP
22861: POP
// for i = 1 to hardcoreCounter do
22862: LD_ADDR_VAR 0 8
22866: PUSH
22867: DOUBLE
22868: LD_INT 1
22870: DEC
22871: ST_TO_ADDR
22872: LD_EXP 40
22876: PUSH
22877: FOR_TO
22878: IFFALSE 22924
// begin if flags [ normalCounter + i ] then
22880: LD_VAR 0 4
22884: PUSH
22885: LD_EXP 39
22889: PUSH
22890: LD_VAR 0 8
22894: PLUS
22895: ARRAY
22896: IFFALSE 22922
// tmp := tmp & ( 100 + i ) & ; ;
22898: LD_ADDR_VAR 0 3
22902: PUSH
22903: LD_VAR 0 3
22907: PUSH
22908: LD_INT 100
22910: PUSH
22911: LD_VAR 0 8
22915: PLUS
22916: STR
22917: PUSH
22918: LD_STRING ;
22920: STR
22921: ST_TO_ADDR
// end ;
22922: GO 22877
22924: POP
22925: POP
// if tmp then
22926: LD_VAR 0 3
22930: IFFALSE 22942
// active := tmp ;
22932: LD_ADDR_VAR 0 7
22936: PUSH
22937: LD_VAR 0 3
22941: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22942: LD_STRING getStreamItemsFromMission("
22944: PUSH
22945: LD_VAR 0 5
22949: STR
22950: PUSH
22951: LD_STRING ","
22953: STR
22954: PUSH
22955: LD_VAR 0 6
22959: STR
22960: PUSH
22961: LD_STRING ","
22963: STR
22964: PUSH
22965: LD_VAR 0 7
22969: STR
22970: PUSH
22971: LD_STRING ")
22973: STR
22974: PPUSH
22975: CALL_OW 559
// end else
22979: GO 22988
// ToLua ( getStreamItemsFromMission("","","") ) ;
22981: LD_STRING getStreamItemsFromMission("","","")
22983: PPUSH
22984: CALL_OW 559
// end ;
22988: LD_VAR 0 2
22992: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22993: LD_EXP 38
22997: PUSH
22998: LD_EXP 43
23002: AND
23003: IFFALSE 23127
23005: GO 23007
23007: DISABLE
23008: LD_INT 0
23010: PPUSH
23011: PPUSH
// begin enable ;
23012: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23013: LD_ADDR_VAR 0 2
23017: PUSH
23018: LD_INT 22
23020: PUSH
23021: LD_OWVAR 2
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: LD_INT 34
23035: PUSH
23036: LD_INT 7
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 34
23045: PUSH
23046: LD_INT 45
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 34
23055: PUSH
23056: LD_INT 28
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 34
23065: PUSH
23066: LD_INT 47
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PPUSH
23084: CALL_OW 69
23088: ST_TO_ADDR
// if not tmp then
23089: LD_VAR 0 2
23093: NOT
23094: IFFALSE 23098
// exit ;
23096: GO 23127
// for i in tmp do
23098: LD_ADDR_VAR 0 1
23102: PUSH
23103: LD_VAR 0 2
23107: PUSH
23108: FOR_IN
23109: IFFALSE 23125
// begin SetLives ( i , 0 ) ;
23111: LD_VAR 0 1
23115: PPUSH
23116: LD_INT 0
23118: PPUSH
23119: CALL_OW 234
// end ;
23123: GO 23108
23125: POP
23126: POP
// end ;
23127: PPOPN 2
23129: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23130: LD_EXP 38
23134: PUSH
23135: LD_EXP 44
23139: AND
23140: IFFALSE 23224
23142: GO 23144
23144: DISABLE
23145: LD_INT 0
23147: PPUSH
23148: PPUSH
// begin enable ;
23149: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23150: LD_ADDR_VAR 0 2
23154: PUSH
23155: LD_INT 22
23157: PUSH
23158: LD_OWVAR 2
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 32
23169: PUSH
23170: LD_INT 3
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PPUSH
23181: CALL_OW 69
23185: ST_TO_ADDR
// if not tmp then
23186: LD_VAR 0 2
23190: NOT
23191: IFFALSE 23195
// exit ;
23193: GO 23224
// for i in tmp do
23195: LD_ADDR_VAR 0 1
23199: PUSH
23200: LD_VAR 0 2
23204: PUSH
23205: FOR_IN
23206: IFFALSE 23222
// begin SetLives ( i , 0 ) ;
23208: LD_VAR 0 1
23212: PPUSH
23213: LD_INT 0
23215: PPUSH
23216: CALL_OW 234
// end ;
23220: GO 23205
23222: POP
23223: POP
// end ;
23224: PPOPN 2
23226: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23227: LD_EXP 38
23231: PUSH
23232: LD_EXP 41
23236: AND
23237: IFFALSE 23330
23239: GO 23241
23241: DISABLE
23242: LD_INT 0
23244: PPUSH
// begin enable ;
23245: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23246: LD_ADDR_VAR 0 1
23250: PUSH
23251: LD_INT 22
23253: PUSH
23254: LD_OWVAR 2
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 2
23265: PUSH
23266: LD_INT 25
23268: PUSH
23269: LD_INT 5
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 25
23278: PUSH
23279: LD_INT 9
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 25
23288: PUSH
23289: LD_INT 8
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PPUSH
23306: CALL_OW 69
23310: PUSH
23311: FOR_IN
23312: IFFALSE 23328
// begin SetClass ( i , 1 ) ;
23314: LD_VAR 0 1
23318: PPUSH
23319: LD_INT 1
23321: PPUSH
23322: CALL_OW 336
// end ;
23326: GO 23311
23328: POP
23329: POP
// end ;
23330: PPOPN 1
23332: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23333: LD_EXP 38
23337: PUSH
23338: LD_EXP 42
23342: AND
23343: PUSH
23344: LD_OWVAR 65
23348: PUSH
23349: LD_INT 7
23351: LESS
23352: AND
23353: IFFALSE 23367
23355: GO 23357
23357: DISABLE
// begin enable ;
23358: ENABLE
// game_speed := 7 ;
23359: LD_ADDR_OWVAR 65
23363: PUSH
23364: LD_INT 7
23366: ST_TO_ADDR
// end ;
23367: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23368: LD_EXP 38
23372: PUSH
23373: LD_EXP 45
23377: AND
23378: IFFALSE 23580
23380: GO 23382
23382: DISABLE
23383: LD_INT 0
23385: PPUSH
23386: PPUSH
23387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23388: LD_ADDR_VAR 0 3
23392: PUSH
23393: LD_INT 81
23395: PUSH
23396: LD_OWVAR 2
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 21
23407: PUSH
23408: LD_INT 1
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PPUSH
23419: CALL_OW 69
23423: ST_TO_ADDR
// if not tmp then
23424: LD_VAR 0 3
23428: NOT
23429: IFFALSE 23433
// exit ;
23431: GO 23580
// if tmp > 5 then
23433: LD_VAR 0 3
23437: PUSH
23438: LD_INT 5
23440: GREATER
23441: IFFALSE 23453
// k := 5 else
23443: LD_ADDR_VAR 0 2
23447: PUSH
23448: LD_INT 5
23450: ST_TO_ADDR
23451: GO 23463
// k := tmp ;
23453: LD_ADDR_VAR 0 2
23457: PUSH
23458: LD_VAR 0 3
23462: ST_TO_ADDR
// for i := 1 to k do
23463: LD_ADDR_VAR 0 1
23467: PUSH
23468: DOUBLE
23469: LD_INT 1
23471: DEC
23472: ST_TO_ADDR
23473: LD_VAR 0 2
23477: PUSH
23478: FOR_TO
23479: IFFALSE 23578
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23481: LD_VAR 0 3
23485: PUSH
23486: LD_VAR 0 1
23490: ARRAY
23491: PPUSH
23492: LD_VAR 0 1
23496: PUSH
23497: LD_INT 4
23499: MOD
23500: PUSH
23501: LD_INT 1
23503: PLUS
23504: PPUSH
23505: CALL_OW 259
23509: PUSH
23510: LD_INT 10
23512: LESS
23513: IFFALSE 23576
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23515: LD_VAR 0 3
23519: PUSH
23520: LD_VAR 0 1
23524: ARRAY
23525: PPUSH
23526: LD_VAR 0 1
23530: PUSH
23531: LD_INT 4
23533: MOD
23534: PUSH
23535: LD_INT 1
23537: PLUS
23538: PPUSH
23539: LD_VAR 0 3
23543: PUSH
23544: LD_VAR 0 1
23548: ARRAY
23549: PPUSH
23550: LD_VAR 0 1
23554: PUSH
23555: LD_INT 4
23557: MOD
23558: PUSH
23559: LD_INT 1
23561: PLUS
23562: PPUSH
23563: CALL_OW 259
23567: PUSH
23568: LD_INT 1
23570: PLUS
23571: PPUSH
23572: CALL_OW 237
23576: GO 23478
23578: POP
23579: POP
// end ;
23580: PPOPN 3
23582: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23583: LD_EXP 38
23587: PUSH
23588: LD_EXP 46
23592: AND
23593: IFFALSE 23613
23595: GO 23597
23597: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23598: LD_INT 4
23600: PPUSH
23601: LD_OWVAR 2
23605: PPUSH
23606: LD_INT 0
23608: PPUSH
23609: CALL_OW 324
23613: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23614: LD_EXP 38
23618: PUSH
23619: LD_EXP 75
23623: AND
23624: IFFALSE 23644
23626: GO 23628
23628: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23629: LD_INT 19
23631: PPUSH
23632: LD_OWVAR 2
23636: PPUSH
23637: LD_INT 0
23639: PPUSH
23640: CALL_OW 324
23644: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23645: LD_EXP 38
23649: PUSH
23650: LD_EXP 47
23654: AND
23655: IFFALSE 23757
23657: GO 23659
23659: DISABLE
23660: LD_INT 0
23662: PPUSH
23663: PPUSH
// begin enable ;
23664: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23665: LD_ADDR_VAR 0 2
23669: PUSH
23670: LD_INT 22
23672: PUSH
23673: LD_OWVAR 2
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 2
23684: PUSH
23685: LD_INT 34
23687: PUSH
23688: LD_INT 11
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 34
23697: PUSH
23698: LD_INT 30
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PPUSH
23714: CALL_OW 69
23718: ST_TO_ADDR
// if not tmp then
23719: LD_VAR 0 2
23723: NOT
23724: IFFALSE 23728
// exit ;
23726: GO 23757
// for i in tmp do
23728: LD_ADDR_VAR 0 1
23732: PUSH
23733: LD_VAR 0 2
23737: PUSH
23738: FOR_IN
23739: IFFALSE 23755
// begin SetLives ( i , 0 ) ;
23741: LD_VAR 0 1
23745: PPUSH
23746: LD_INT 0
23748: PPUSH
23749: CALL_OW 234
// end ;
23753: GO 23738
23755: POP
23756: POP
// end ;
23757: PPOPN 2
23759: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23760: LD_EXP 38
23764: PUSH
23765: LD_EXP 48
23769: AND
23770: IFFALSE 23790
23772: GO 23774
23774: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23775: LD_INT 32
23777: PPUSH
23778: LD_OWVAR 2
23782: PPUSH
23783: LD_INT 0
23785: PPUSH
23786: CALL_OW 324
23790: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23791: LD_EXP 38
23795: PUSH
23796: LD_EXP 49
23800: AND
23801: IFFALSE 23982
23803: GO 23805
23805: DISABLE
23806: LD_INT 0
23808: PPUSH
23809: PPUSH
23810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23811: LD_ADDR_VAR 0 2
23815: PUSH
23816: LD_INT 22
23818: PUSH
23819: LD_OWVAR 2
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 33
23830: PUSH
23831: LD_INT 3
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PPUSH
23842: CALL_OW 69
23846: ST_TO_ADDR
// if not tmp then
23847: LD_VAR 0 2
23851: NOT
23852: IFFALSE 23856
// exit ;
23854: GO 23982
// side := 0 ;
23856: LD_ADDR_VAR 0 3
23860: PUSH
23861: LD_INT 0
23863: ST_TO_ADDR
// for i := 1 to 8 do
23864: LD_ADDR_VAR 0 1
23868: PUSH
23869: DOUBLE
23870: LD_INT 1
23872: DEC
23873: ST_TO_ADDR
23874: LD_INT 8
23876: PUSH
23877: FOR_TO
23878: IFFALSE 23926
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23880: LD_OWVAR 2
23884: PUSH
23885: LD_VAR 0 1
23889: NONEQUAL
23890: PUSH
23891: LD_OWVAR 2
23895: PPUSH
23896: LD_VAR 0 1
23900: PPUSH
23901: CALL_OW 81
23905: PUSH
23906: LD_INT 2
23908: EQUAL
23909: AND
23910: IFFALSE 23924
// begin side := i ;
23912: LD_ADDR_VAR 0 3
23916: PUSH
23917: LD_VAR 0 1
23921: ST_TO_ADDR
// break ;
23922: GO 23926
// end ;
23924: GO 23877
23926: POP
23927: POP
// if not side then
23928: LD_VAR 0 3
23932: NOT
23933: IFFALSE 23937
// exit ;
23935: GO 23982
// for i := 1 to tmp do
23937: LD_ADDR_VAR 0 1
23941: PUSH
23942: DOUBLE
23943: LD_INT 1
23945: DEC
23946: ST_TO_ADDR
23947: LD_VAR 0 2
23951: PUSH
23952: FOR_TO
23953: IFFALSE 23980
// if Prob ( 60 ) then
23955: LD_INT 60
23957: PPUSH
23958: CALL_OW 13
23962: IFFALSE 23978
// SetSide ( i , side ) ;
23964: LD_VAR 0 1
23968: PPUSH
23969: LD_VAR 0 3
23973: PPUSH
23974: CALL_OW 235
23978: GO 23952
23980: POP
23981: POP
// end ;
23982: PPOPN 3
23984: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23985: LD_EXP 38
23989: PUSH
23990: LD_EXP 51
23994: AND
23995: IFFALSE 24114
23997: GO 23999
23999: DISABLE
24000: LD_INT 0
24002: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24003: LD_ADDR_VAR 0 1
24007: PUSH
24008: LD_INT 22
24010: PUSH
24011: LD_OWVAR 2
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 21
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 3
24032: PUSH
24033: LD_INT 23
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: PPUSH
24052: CALL_OW 69
24056: PUSH
24057: FOR_IN
24058: IFFALSE 24112
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24060: LD_VAR 0 1
24064: PPUSH
24065: CALL_OW 257
24069: PUSH
24070: LD_INT 1
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: LD_INT 3
24078: PUSH
24079: LD_INT 4
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: IN
24088: IFFALSE 24110
// SetClass ( un , rand ( 1 , 4 ) ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_INT 1
24097: PPUSH
24098: LD_INT 4
24100: PPUSH
24101: CALL_OW 12
24105: PPUSH
24106: CALL_OW 336
24110: GO 24057
24112: POP
24113: POP
// end ;
24114: PPOPN 1
24116: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24117: LD_EXP 38
24121: PUSH
24122: LD_EXP 50
24126: AND
24127: IFFALSE 24206
24129: GO 24131
24131: DISABLE
24132: LD_INT 0
24134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24135: LD_ADDR_VAR 0 1
24139: PUSH
24140: LD_INT 22
24142: PUSH
24143: LD_OWVAR 2
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 21
24154: PUSH
24155: LD_INT 3
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PPUSH
24166: CALL_OW 69
24170: ST_TO_ADDR
// if not tmp then
24171: LD_VAR 0 1
24175: NOT
24176: IFFALSE 24180
// exit ;
24178: GO 24206
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24180: LD_VAR 0 1
24184: PUSH
24185: LD_INT 1
24187: PPUSH
24188: LD_VAR 0 1
24192: PPUSH
24193: CALL_OW 12
24197: ARRAY
24198: PPUSH
24199: LD_INT 100
24201: PPUSH
24202: CALL_OW 234
// end ;
24206: PPOPN 1
24208: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24209: LD_EXP 38
24213: PUSH
24214: LD_EXP 52
24218: AND
24219: IFFALSE 24317
24221: GO 24223
24223: DISABLE
24224: LD_INT 0
24226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24227: LD_ADDR_VAR 0 1
24231: PUSH
24232: LD_INT 22
24234: PUSH
24235: LD_OWVAR 2
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 21
24246: PUSH
24247: LD_INT 1
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PPUSH
24258: CALL_OW 69
24262: ST_TO_ADDR
// if not tmp then
24263: LD_VAR 0 1
24267: NOT
24268: IFFALSE 24272
// exit ;
24270: GO 24317
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24272: LD_VAR 0 1
24276: PUSH
24277: LD_INT 1
24279: PPUSH
24280: LD_VAR 0 1
24284: PPUSH
24285: CALL_OW 12
24289: ARRAY
24290: PPUSH
24291: LD_INT 1
24293: PPUSH
24294: LD_INT 4
24296: PPUSH
24297: CALL_OW 12
24301: PPUSH
24302: LD_INT 3000
24304: PPUSH
24305: LD_INT 9000
24307: PPUSH
24308: CALL_OW 12
24312: PPUSH
24313: CALL_OW 492
// end ;
24317: PPOPN 1
24319: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24320: LD_EXP 38
24324: PUSH
24325: LD_EXP 53
24329: AND
24330: IFFALSE 24350
24332: GO 24334
24334: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24335: LD_INT 1
24337: PPUSH
24338: LD_OWVAR 2
24342: PPUSH
24343: LD_INT 0
24345: PPUSH
24346: CALL_OW 324
24350: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24351: LD_EXP 38
24355: PUSH
24356: LD_EXP 54
24360: AND
24361: IFFALSE 24444
24363: GO 24365
24365: DISABLE
24366: LD_INT 0
24368: PPUSH
24369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24370: LD_ADDR_VAR 0 2
24374: PUSH
24375: LD_INT 22
24377: PUSH
24378: LD_OWVAR 2
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 21
24389: PUSH
24390: LD_INT 3
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PPUSH
24401: CALL_OW 69
24405: ST_TO_ADDR
// if not tmp then
24406: LD_VAR 0 2
24410: NOT
24411: IFFALSE 24415
// exit ;
24413: GO 24444
// for i in tmp do
24415: LD_ADDR_VAR 0 1
24419: PUSH
24420: LD_VAR 0 2
24424: PUSH
24425: FOR_IN
24426: IFFALSE 24442
// SetBLevel ( i , 10 ) ;
24428: LD_VAR 0 1
24432: PPUSH
24433: LD_INT 10
24435: PPUSH
24436: CALL_OW 241
24440: GO 24425
24442: POP
24443: POP
// end ;
24444: PPOPN 2
24446: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24447: LD_EXP 38
24451: PUSH
24452: LD_EXP 55
24456: AND
24457: IFFALSE 24568
24459: GO 24461
24461: DISABLE
24462: LD_INT 0
24464: PPUSH
24465: PPUSH
24466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24467: LD_ADDR_VAR 0 3
24471: PUSH
24472: LD_INT 22
24474: PUSH
24475: LD_OWVAR 2
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 25
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PPUSH
24498: CALL_OW 69
24502: ST_TO_ADDR
// if not tmp then
24503: LD_VAR 0 3
24507: NOT
24508: IFFALSE 24512
// exit ;
24510: GO 24568
// un := tmp [ rand ( 1 , tmp ) ] ;
24512: LD_ADDR_VAR 0 2
24516: PUSH
24517: LD_VAR 0 3
24521: PUSH
24522: LD_INT 1
24524: PPUSH
24525: LD_VAR 0 3
24529: PPUSH
24530: CALL_OW 12
24534: ARRAY
24535: ST_TO_ADDR
// if Crawls ( un ) then
24536: LD_VAR 0 2
24540: PPUSH
24541: CALL_OW 318
24545: IFFALSE 24556
// ComWalk ( un ) ;
24547: LD_VAR 0 2
24551: PPUSH
24552: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24556: LD_VAR 0 2
24560: PPUSH
24561: LD_INT 5
24563: PPUSH
24564: CALL_OW 336
// end ;
24568: PPOPN 3
24570: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24571: LD_EXP 38
24575: PUSH
24576: LD_EXP 56
24580: AND
24581: PUSH
24582: LD_OWVAR 67
24586: PUSH
24587: LD_INT 4
24589: LESS
24590: AND
24591: IFFALSE 24610
24593: GO 24595
24595: DISABLE
// begin Difficulty := Difficulty + 1 ;
24596: LD_ADDR_OWVAR 67
24600: PUSH
24601: LD_OWVAR 67
24605: PUSH
24606: LD_INT 1
24608: PLUS
24609: ST_TO_ADDR
// end ;
24610: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24611: LD_EXP 38
24615: PUSH
24616: LD_EXP 57
24620: AND
24621: IFFALSE 24724
24623: GO 24625
24625: DISABLE
24626: LD_INT 0
24628: PPUSH
// begin for i := 1 to 5 do
24629: LD_ADDR_VAR 0 1
24633: PUSH
24634: DOUBLE
24635: LD_INT 1
24637: DEC
24638: ST_TO_ADDR
24639: LD_INT 5
24641: PUSH
24642: FOR_TO
24643: IFFALSE 24722
// begin uc_nation := nation_nature ;
24645: LD_ADDR_OWVAR 21
24649: PUSH
24650: LD_INT 0
24652: ST_TO_ADDR
// uc_side := 0 ;
24653: LD_ADDR_OWVAR 20
24657: PUSH
24658: LD_INT 0
24660: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24661: LD_ADDR_OWVAR 29
24665: PUSH
24666: LD_INT 12
24668: PUSH
24669: LD_INT 12
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: ST_TO_ADDR
// hc_agressivity := 20 ;
24676: LD_ADDR_OWVAR 35
24680: PUSH
24681: LD_INT 20
24683: ST_TO_ADDR
// hc_class := class_tiger ;
24684: LD_ADDR_OWVAR 28
24688: PUSH
24689: LD_INT 14
24691: ST_TO_ADDR
// hc_gallery :=  ;
24692: LD_ADDR_OWVAR 33
24696: PUSH
24697: LD_STRING 
24699: ST_TO_ADDR
// hc_name :=  ;
24700: LD_ADDR_OWVAR 26
24704: PUSH
24705: LD_STRING 
24707: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24708: CALL_OW 44
24712: PPUSH
24713: LD_INT 0
24715: PPUSH
24716: CALL_OW 51
// end ;
24720: GO 24642
24722: POP
24723: POP
// end ;
24724: PPOPN 1
24726: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24727: LD_EXP 38
24731: PUSH
24732: LD_EXP 58
24736: AND
24737: IFFALSE 24746
24739: GO 24741
24741: DISABLE
// StreamSibBomb ;
24742: CALL 24747 0 0
24746: END
// export function StreamSibBomb ; var i , x , y ; begin
24747: LD_INT 0
24749: PPUSH
24750: PPUSH
24751: PPUSH
24752: PPUSH
// result := false ;
24753: LD_ADDR_VAR 0 1
24757: PUSH
24758: LD_INT 0
24760: ST_TO_ADDR
// for i := 1 to 16 do
24761: LD_ADDR_VAR 0 2
24765: PUSH
24766: DOUBLE
24767: LD_INT 1
24769: DEC
24770: ST_TO_ADDR
24771: LD_INT 16
24773: PUSH
24774: FOR_TO
24775: IFFALSE 24974
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24777: LD_ADDR_VAR 0 3
24781: PUSH
24782: LD_INT 10
24784: PUSH
24785: LD_INT 20
24787: PUSH
24788: LD_INT 30
24790: PUSH
24791: LD_INT 40
24793: PUSH
24794: LD_INT 50
24796: PUSH
24797: LD_INT 60
24799: PUSH
24800: LD_INT 70
24802: PUSH
24803: LD_INT 80
24805: PUSH
24806: LD_INT 90
24808: PUSH
24809: LD_INT 100
24811: PUSH
24812: LD_INT 110
24814: PUSH
24815: LD_INT 120
24817: PUSH
24818: LD_INT 130
24820: PUSH
24821: LD_INT 140
24823: PUSH
24824: LD_INT 150
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 1
24846: PPUSH
24847: LD_INT 15
24849: PPUSH
24850: CALL_OW 12
24854: ARRAY
24855: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24856: LD_ADDR_VAR 0 4
24860: PUSH
24861: LD_INT 10
24863: PUSH
24864: LD_INT 20
24866: PUSH
24867: LD_INT 30
24869: PUSH
24870: LD_INT 40
24872: PUSH
24873: LD_INT 50
24875: PUSH
24876: LD_INT 60
24878: PUSH
24879: LD_INT 70
24881: PUSH
24882: LD_INT 80
24884: PUSH
24885: LD_INT 90
24887: PUSH
24888: LD_INT 100
24890: PUSH
24891: LD_INT 110
24893: PUSH
24894: LD_INT 120
24896: PUSH
24897: LD_INT 130
24899: PUSH
24900: LD_INT 140
24902: PUSH
24903: LD_INT 150
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: PPUSH
24926: LD_INT 15
24928: PPUSH
24929: CALL_OW 12
24933: ARRAY
24934: ST_TO_ADDR
// if ValidHex ( x , y ) then
24935: LD_VAR 0 3
24939: PPUSH
24940: LD_VAR 0 4
24944: PPUSH
24945: CALL_OW 488
24949: IFFALSE 24972
// begin result := [ x , y ] ;
24951: LD_ADDR_VAR 0 1
24955: PUSH
24956: LD_VAR 0 3
24960: PUSH
24961: LD_VAR 0 4
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: ST_TO_ADDR
// break ;
24970: GO 24974
// end ; end ;
24972: GO 24774
24974: POP
24975: POP
// if result then
24976: LD_VAR 0 1
24980: IFFALSE 25040
// begin ToLua ( playSibBomb() ) ;
24982: LD_STRING playSibBomb()
24984: PPUSH
24985: CALL_OW 559
// wait ( 0 0$14 ) ;
24989: LD_INT 490
24991: PPUSH
24992: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24996: LD_VAR 0 1
25000: PUSH
25001: LD_INT 1
25003: ARRAY
25004: PPUSH
25005: LD_VAR 0 1
25009: PUSH
25010: LD_INT 2
25012: ARRAY
25013: PPUSH
25014: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25018: LD_VAR 0 1
25022: PUSH
25023: LD_INT 1
25025: ARRAY
25026: PPUSH
25027: LD_VAR 0 1
25031: PUSH
25032: LD_INT 2
25034: ARRAY
25035: PPUSH
25036: CALL_OW 429
// end ; end ;
25040: LD_VAR 0 1
25044: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25045: LD_EXP 38
25049: PUSH
25050: LD_EXP 60
25054: AND
25055: IFFALSE 25067
25057: GO 25059
25059: DISABLE
// YouLost (  ) ;
25060: LD_STRING 
25062: PPUSH
25063: CALL_OW 104
25067: END
// every 0 0$1 trigger StreamModeActive and sFog do
25068: LD_EXP 38
25072: PUSH
25073: LD_EXP 59
25077: AND
25078: IFFALSE 25092
25080: GO 25082
25082: DISABLE
// FogOff ( your_side ) ;
25083: LD_OWVAR 2
25087: PPUSH
25088: CALL_OW 344
25092: END
// every 0 0$1 trigger StreamModeActive and sSun do
25093: LD_EXP 38
25097: PUSH
25098: LD_EXP 61
25102: AND
25103: IFFALSE 25131
25105: GO 25107
25107: DISABLE
// begin solar_recharge_percent := 0 ;
25108: LD_ADDR_OWVAR 79
25112: PUSH
25113: LD_INT 0
25115: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25116: LD_INT 10500
25118: PPUSH
25119: CALL_OW 67
// solar_recharge_percent := 100 ;
25123: LD_ADDR_OWVAR 79
25127: PUSH
25128: LD_INT 100
25130: ST_TO_ADDR
// end ;
25131: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25132: LD_EXP 38
25136: PUSH
25137: LD_EXP 62
25141: AND
25142: IFFALSE 25381
25144: GO 25146
25146: DISABLE
25147: LD_INT 0
25149: PPUSH
25150: PPUSH
25151: PPUSH
// begin tmp := [ ] ;
25152: LD_ADDR_VAR 0 3
25156: PUSH
25157: EMPTY
25158: ST_TO_ADDR
// for i := 1 to 6 do
25159: LD_ADDR_VAR 0 1
25163: PUSH
25164: DOUBLE
25165: LD_INT 1
25167: DEC
25168: ST_TO_ADDR
25169: LD_INT 6
25171: PUSH
25172: FOR_TO
25173: IFFALSE 25278
// begin uc_nation := nation_nature ;
25175: LD_ADDR_OWVAR 21
25179: PUSH
25180: LD_INT 0
25182: ST_TO_ADDR
// uc_side := 0 ;
25183: LD_ADDR_OWVAR 20
25187: PUSH
25188: LD_INT 0
25190: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25191: LD_ADDR_OWVAR 29
25195: PUSH
25196: LD_INT 12
25198: PUSH
25199: LD_INT 12
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: ST_TO_ADDR
// hc_agressivity := 20 ;
25206: LD_ADDR_OWVAR 35
25210: PUSH
25211: LD_INT 20
25213: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25214: LD_ADDR_OWVAR 28
25218: PUSH
25219: LD_INT 17
25221: ST_TO_ADDR
// hc_gallery :=  ;
25222: LD_ADDR_OWVAR 33
25226: PUSH
25227: LD_STRING 
25229: ST_TO_ADDR
// hc_name :=  ;
25230: LD_ADDR_OWVAR 26
25234: PUSH
25235: LD_STRING 
25237: ST_TO_ADDR
// un := CreateHuman ;
25238: LD_ADDR_VAR 0 2
25242: PUSH
25243: CALL_OW 44
25247: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25248: LD_VAR 0 2
25252: PPUSH
25253: LD_INT 1
25255: PPUSH
25256: CALL_OW 51
// tmp := tmp ^ un ;
25260: LD_ADDR_VAR 0 3
25264: PUSH
25265: LD_VAR 0 3
25269: PUSH
25270: LD_VAR 0 2
25274: ADD
25275: ST_TO_ADDR
// end ;
25276: GO 25172
25278: POP
25279: POP
// repeat wait ( 0 0$1 ) ;
25280: LD_INT 35
25282: PPUSH
25283: CALL_OW 67
// for un in tmp do
25287: LD_ADDR_VAR 0 2
25291: PUSH
25292: LD_VAR 0 3
25296: PUSH
25297: FOR_IN
25298: IFFALSE 25372
// begin if IsDead ( un ) then
25300: LD_VAR 0 2
25304: PPUSH
25305: CALL_OW 301
25309: IFFALSE 25329
// begin tmp := tmp diff un ;
25311: LD_ADDR_VAR 0 3
25315: PUSH
25316: LD_VAR 0 3
25320: PUSH
25321: LD_VAR 0 2
25325: DIFF
25326: ST_TO_ADDR
// continue ;
25327: GO 25297
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25329: LD_VAR 0 2
25333: PPUSH
25334: LD_INT 3
25336: PUSH
25337: LD_INT 22
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PPUSH
25351: CALL_OW 69
25355: PPUSH
25356: LD_VAR 0 2
25360: PPUSH
25361: CALL_OW 74
25365: PPUSH
25366: CALL_OW 115
// end ;
25370: GO 25297
25372: POP
25373: POP
// until not tmp ;
25374: LD_VAR 0 3
25378: NOT
25379: IFFALSE 25280
// end ;
25381: PPOPN 3
25383: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25384: LD_EXP 38
25388: PUSH
25389: LD_EXP 63
25393: AND
25394: IFFALSE 25448
25396: GO 25398
25398: DISABLE
// begin ToLua ( displayTroll(); ) ;
25399: LD_STRING displayTroll();
25401: PPUSH
25402: CALL_OW 559
// wait ( 3 3$00 ) ;
25406: LD_INT 6300
25408: PPUSH
25409: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25413: LD_STRING hideTroll();
25415: PPUSH
25416: CALL_OW 559
// wait ( 1 1$00 ) ;
25420: LD_INT 2100
25422: PPUSH
25423: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25427: LD_STRING displayTroll();
25429: PPUSH
25430: CALL_OW 559
// wait ( 1 1$00 ) ;
25434: LD_INT 2100
25436: PPUSH
25437: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25441: LD_STRING hideTroll();
25443: PPUSH
25444: CALL_OW 559
// end ;
25448: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25449: LD_EXP 38
25453: PUSH
25454: LD_EXP 64
25458: AND
25459: IFFALSE 25522
25461: GO 25463
25463: DISABLE
25464: LD_INT 0
25466: PPUSH
// begin p := 0 ;
25467: LD_ADDR_VAR 0 1
25471: PUSH
25472: LD_INT 0
25474: ST_TO_ADDR
// repeat game_speed := 1 ;
25475: LD_ADDR_OWVAR 65
25479: PUSH
25480: LD_INT 1
25482: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25483: LD_INT 35
25485: PPUSH
25486: CALL_OW 67
// p := p + 1 ;
25490: LD_ADDR_VAR 0 1
25494: PUSH
25495: LD_VAR 0 1
25499: PUSH
25500: LD_INT 1
25502: PLUS
25503: ST_TO_ADDR
// until p >= 60 ;
25504: LD_VAR 0 1
25508: PUSH
25509: LD_INT 60
25511: GREATEREQUAL
25512: IFFALSE 25475
// game_speed := 4 ;
25514: LD_ADDR_OWVAR 65
25518: PUSH
25519: LD_INT 4
25521: ST_TO_ADDR
// end ;
25522: PPOPN 1
25524: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25525: LD_EXP 38
25529: PUSH
25530: LD_EXP 65
25534: AND
25535: IFFALSE 25681
25537: GO 25539
25539: DISABLE
25540: LD_INT 0
25542: PPUSH
25543: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25544: LD_ADDR_VAR 0 1
25548: PUSH
25549: LD_INT 22
25551: PUSH
25552: LD_OWVAR 2
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 2
25563: PUSH
25564: LD_INT 30
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 30
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: LIST
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PPUSH
25593: CALL_OW 69
25597: ST_TO_ADDR
// if not depot then
25598: LD_VAR 0 1
25602: NOT
25603: IFFALSE 25607
// exit ;
25605: GO 25681
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25607: LD_ADDR_VAR 0 2
25611: PUSH
25612: LD_VAR 0 1
25616: PUSH
25617: LD_INT 1
25619: PPUSH
25620: LD_VAR 0 1
25624: PPUSH
25625: CALL_OW 12
25629: ARRAY
25630: PPUSH
25631: CALL_OW 274
25635: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25636: LD_VAR 0 2
25640: PPUSH
25641: LD_INT 1
25643: PPUSH
25644: LD_INT 0
25646: PPUSH
25647: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25651: LD_VAR 0 2
25655: PPUSH
25656: LD_INT 2
25658: PPUSH
25659: LD_INT 0
25661: PPUSH
25662: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25666: LD_VAR 0 2
25670: PPUSH
25671: LD_INT 3
25673: PPUSH
25674: LD_INT 0
25676: PPUSH
25677: CALL_OW 277
// end ;
25681: PPOPN 2
25683: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25684: LD_EXP 38
25688: PUSH
25689: LD_EXP 66
25693: AND
25694: IFFALSE 25791
25696: GO 25698
25698: DISABLE
25699: LD_INT 0
25701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25702: LD_ADDR_VAR 0 1
25706: PUSH
25707: LD_INT 22
25709: PUSH
25710: LD_OWVAR 2
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 21
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 3
25731: PUSH
25732: LD_INT 23
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: LIST
25750: PPUSH
25751: CALL_OW 69
25755: ST_TO_ADDR
// if not tmp then
25756: LD_VAR 0 1
25760: NOT
25761: IFFALSE 25765
// exit ;
25763: GO 25791
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25765: LD_VAR 0 1
25769: PUSH
25770: LD_INT 1
25772: PPUSH
25773: LD_VAR 0 1
25777: PPUSH
25778: CALL_OW 12
25782: ARRAY
25783: PPUSH
25784: LD_INT 200
25786: PPUSH
25787: CALL_OW 234
// end ;
25791: PPOPN 1
25793: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25794: LD_EXP 38
25798: PUSH
25799: LD_EXP 67
25803: AND
25804: IFFALSE 25883
25806: GO 25808
25808: DISABLE
25809: LD_INT 0
25811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25812: LD_ADDR_VAR 0 1
25816: PUSH
25817: LD_INT 22
25819: PUSH
25820: LD_OWVAR 2
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 21
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PPUSH
25843: CALL_OW 69
25847: ST_TO_ADDR
// if not tmp then
25848: LD_VAR 0 1
25852: NOT
25853: IFFALSE 25857
// exit ;
25855: GO 25883
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25857: LD_VAR 0 1
25861: PUSH
25862: LD_INT 1
25864: PPUSH
25865: LD_VAR 0 1
25869: PPUSH
25870: CALL_OW 12
25874: ARRAY
25875: PPUSH
25876: LD_INT 60
25878: PPUSH
25879: CALL_OW 234
// end ;
25883: PPOPN 1
25885: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25886: LD_EXP 38
25890: PUSH
25891: LD_EXP 68
25895: AND
25896: IFFALSE 25995
25898: GO 25900
25900: DISABLE
25901: LD_INT 0
25903: PPUSH
25904: PPUSH
// begin enable ;
25905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25906: LD_ADDR_VAR 0 1
25910: PUSH
25911: LD_INT 22
25913: PUSH
25914: LD_OWVAR 2
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 61
25925: PUSH
25926: EMPTY
25927: LIST
25928: PUSH
25929: LD_INT 33
25931: PUSH
25932: LD_INT 2
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: LIST
25943: PPUSH
25944: CALL_OW 69
25948: ST_TO_ADDR
// if not tmp then
25949: LD_VAR 0 1
25953: NOT
25954: IFFALSE 25958
// exit ;
25956: GO 25995
// for i in tmp do
25958: LD_ADDR_VAR 0 2
25962: PUSH
25963: LD_VAR 0 1
25967: PUSH
25968: FOR_IN
25969: IFFALSE 25993
// if IsControledBy ( i ) then
25971: LD_VAR 0 2
25975: PPUSH
25976: CALL_OW 312
25980: IFFALSE 25991
// ComUnlink ( i ) ;
25982: LD_VAR 0 2
25986: PPUSH
25987: CALL_OW 136
25991: GO 25968
25993: POP
25994: POP
// end ;
25995: PPOPN 2
25997: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25998: LD_EXP 38
26002: PUSH
26003: LD_EXP 69
26007: AND
26008: IFFALSE 26148
26010: GO 26012
26012: DISABLE
26013: LD_INT 0
26015: PPUSH
26016: PPUSH
// begin ToLua ( displayPowell(); ) ;
26017: LD_STRING displayPowell();
26019: PPUSH
26020: CALL_OW 559
// uc_side := 0 ;
26024: LD_ADDR_OWVAR 20
26028: PUSH
26029: LD_INT 0
26031: ST_TO_ADDR
// uc_nation := 2 ;
26032: LD_ADDR_OWVAR 21
26036: PUSH
26037: LD_INT 2
26039: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26040: LD_ADDR_OWVAR 37
26044: PUSH
26045: LD_INT 14
26047: ST_TO_ADDR
// vc_engine := engine_siberite ;
26048: LD_ADDR_OWVAR 39
26052: PUSH
26053: LD_INT 3
26055: ST_TO_ADDR
// vc_control := control_apeman ;
26056: LD_ADDR_OWVAR 38
26060: PUSH
26061: LD_INT 5
26063: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26064: LD_ADDR_OWVAR 40
26068: PUSH
26069: LD_INT 29
26071: ST_TO_ADDR
// un := CreateVehicle ;
26072: LD_ADDR_VAR 0 2
26076: PUSH
26077: CALL_OW 45
26081: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26082: LD_VAR 0 2
26086: PPUSH
26087: LD_INT 1
26089: PPUSH
26090: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26094: LD_INT 35
26096: PPUSH
26097: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26101: LD_VAR 0 2
26105: PPUSH
26106: LD_INT 22
26108: PUSH
26109: LD_OWVAR 2
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PPUSH
26118: CALL_OW 69
26122: PPUSH
26123: LD_VAR 0 2
26127: PPUSH
26128: CALL_OW 74
26132: PPUSH
26133: CALL_OW 115
// until IsDead ( un ) ;
26137: LD_VAR 0 2
26141: PPUSH
26142: CALL_OW 301
26146: IFFALSE 26094
// end ;
26148: PPOPN 2
26150: END
// every 0 0$1 trigger StreamModeActive and sStu do
26151: LD_EXP 38
26155: PUSH
26156: LD_EXP 77
26160: AND
26161: IFFALSE 26177
26163: GO 26165
26165: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26166: LD_STRING displayStucuk();
26168: PPUSH
26169: CALL_OW 559
// ResetFog ;
26173: CALL_OW 335
// end ;
26177: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26178: LD_EXP 38
26182: PUSH
26183: LD_EXP 70
26187: AND
26188: IFFALSE 26329
26190: GO 26192
26192: DISABLE
26193: LD_INT 0
26195: PPUSH
26196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26197: LD_ADDR_VAR 0 2
26201: PUSH
26202: LD_INT 22
26204: PUSH
26205: LD_OWVAR 2
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 21
26216: PUSH
26217: LD_INT 1
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PPUSH
26228: CALL_OW 69
26232: ST_TO_ADDR
// if not tmp then
26233: LD_VAR 0 2
26237: NOT
26238: IFFALSE 26242
// exit ;
26240: GO 26329
// un := tmp [ rand ( 1 , tmp ) ] ;
26242: LD_ADDR_VAR 0 1
26246: PUSH
26247: LD_VAR 0 2
26251: PUSH
26252: LD_INT 1
26254: PPUSH
26255: LD_VAR 0 2
26259: PPUSH
26260: CALL_OW 12
26264: ARRAY
26265: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26266: LD_VAR 0 1
26270: PPUSH
26271: LD_INT 0
26273: PPUSH
26274: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26278: LD_VAR 0 1
26282: PPUSH
26283: LD_OWVAR 3
26287: PUSH
26288: LD_VAR 0 1
26292: DIFF
26293: PPUSH
26294: LD_VAR 0 1
26298: PPUSH
26299: CALL_OW 74
26303: PPUSH
26304: CALL_OW 115
// wait ( 0 0$20 ) ;
26308: LD_INT 700
26310: PPUSH
26311: CALL_OW 67
// SetSide ( un , your_side ) ;
26315: LD_VAR 0 1
26319: PPUSH
26320: LD_OWVAR 2
26324: PPUSH
26325: CALL_OW 235
// end ;
26329: PPOPN 2
26331: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26332: LD_EXP 38
26336: PUSH
26337: LD_EXP 71
26341: AND
26342: IFFALSE 26448
26344: GO 26346
26346: DISABLE
26347: LD_INT 0
26349: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26350: LD_ADDR_VAR 0 1
26354: PUSH
26355: LD_INT 22
26357: PUSH
26358: LD_OWVAR 2
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 2
26369: PUSH
26370: LD_INT 30
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 30
26382: PUSH
26383: LD_INT 1
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: LIST
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PPUSH
26399: CALL_OW 69
26403: ST_TO_ADDR
// if not depot then
26404: LD_VAR 0 1
26408: NOT
26409: IFFALSE 26413
// exit ;
26411: GO 26448
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26413: LD_VAR 0 1
26417: PUSH
26418: LD_INT 1
26420: ARRAY
26421: PPUSH
26422: CALL_OW 250
26426: PPUSH
26427: LD_VAR 0 1
26431: PUSH
26432: LD_INT 1
26434: ARRAY
26435: PPUSH
26436: CALL_OW 251
26440: PPUSH
26441: LD_INT 70
26443: PPUSH
26444: CALL_OW 495
// end ;
26448: PPOPN 1
26450: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26451: LD_EXP 38
26455: PUSH
26456: LD_EXP 72
26460: AND
26461: IFFALSE 26672
26463: GO 26465
26465: DISABLE
26466: LD_INT 0
26468: PPUSH
26469: PPUSH
26470: PPUSH
26471: PPUSH
26472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26473: LD_ADDR_VAR 0 5
26477: PUSH
26478: LD_INT 22
26480: PUSH
26481: LD_OWVAR 2
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 21
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PPUSH
26504: CALL_OW 69
26508: ST_TO_ADDR
// if not tmp then
26509: LD_VAR 0 5
26513: NOT
26514: IFFALSE 26518
// exit ;
26516: GO 26672
// for i in tmp do
26518: LD_ADDR_VAR 0 1
26522: PUSH
26523: LD_VAR 0 5
26527: PUSH
26528: FOR_IN
26529: IFFALSE 26670
// begin d := rand ( 0 , 5 ) ;
26531: LD_ADDR_VAR 0 4
26535: PUSH
26536: LD_INT 0
26538: PPUSH
26539: LD_INT 5
26541: PPUSH
26542: CALL_OW 12
26546: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26547: LD_ADDR_VAR 0 2
26551: PUSH
26552: LD_VAR 0 1
26556: PPUSH
26557: CALL_OW 250
26561: PPUSH
26562: LD_VAR 0 4
26566: PPUSH
26567: LD_INT 3
26569: PPUSH
26570: LD_INT 12
26572: PPUSH
26573: CALL_OW 12
26577: PPUSH
26578: CALL_OW 272
26582: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26583: LD_ADDR_VAR 0 3
26587: PUSH
26588: LD_VAR 0 1
26592: PPUSH
26593: CALL_OW 251
26597: PPUSH
26598: LD_VAR 0 4
26602: PPUSH
26603: LD_INT 3
26605: PPUSH
26606: LD_INT 12
26608: PPUSH
26609: CALL_OW 12
26613: PPUSH
26614: CALL_OW 273
26618: ST_TO_ADDR
// if ValidHex ( x , y ) then
26619: LD_VAR 0 2
26623: PPUSH
26624: LD_VAR 0 3
26628: PPUSH
26629: CALL_OW 488
26633: IFFALSE 26668
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26635: LD_VAR 0 1
26639: PPUSH
26640: LD_VAR 0 2
26644: PPUSH
26645: LD_VAR 0 3
26649: PPUSH
26650: LD_INT 3
26652: PPUSH
26653: LD_INT 6
26655: PPUSH
26656: CALL_OW 12
26660: PPUSH
26661: LD_INT 1
26663: PPUSH
26664: CALL_OW 483
// end ;
26668: GO 26528
26670: POP
26671: POP
// end ;
26672: PPOPN 5
26674: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26675: LD_EXP 38
26679: PUSH
26680: LD_EXP 73
26684: AND
26685: IFFALSE 26779
26687: GO 26689
26689: DISABLE
26690: LD_INT 0
26692: PPUSH
26693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26694: LD_ADDR_VAR 0 2
26698: PUSH
26699: LD_INT 22
26701: PUSH
26702: LD_OWVAR 2
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 32
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 21
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: PPUSH
26736: CALL_OW 69
26740: ST_TO_ADDR
// if not tmp then
26741: LD_VAR 0 2
26745: NOT
26746: IFFALSE 26750
// exit ;
26748: GO 26779
// for i in tmp do
26750: LD_ADDR_VAR 0 1
26754: PUSH
26755: LD_VAR 0 2
26759: PUSH
26760: FOR_IN
26761: IFFALSE 26777
// SetFuel ( i , 0 ) ;
26763: LD_VAR 0 1
26767: PPUSH
26768: LD_INT 0
26770: PPUSH
26771: CALL_OW 240
26775: GO 26760
26777: POP
26778: POP
// end ;
26779: PPOPN 2
26781: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26782: LD_EXP 38
26786: PUSH
26787: LD_EXP 74
26791: AND
26792: IFFALSE 26858
26794: GO 26796
26796: DISABLE
26797: LD_INT 0
26799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26800: LD_ADDR_VAR 0 1
26804: PUSH
26805: LD_INT 22
26807: PUSH
26808: LD_OWVAR 2
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 30
26819: PUSH
26820: LD_INT 29
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PPUSH
26831: CALL_OW 69
26835: ST_TO_ADDR
// if not tmp then
26836: LD_VAR 0 1
26840: NOT
26841: IFFALSE 26845
// exit ;
26843: GO 26858
// DestroyUnit ( tmp [ 1 ] ) ;
26845: LD_VAR 0 1
26849: PUSH
26850: LD_INT 1
26852: ARRAY
26853: PPUSH
26854: CALL_OW 65
// end ;
26858: PPOPN 1
26860: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26861: LD_EXP 38
26865: PUSH
26866: LD_EXP 76
26870: AND
26871: IFFALSE 27000
26873: GO 26875
26875: DISABLE
26876: LD_INT 0
26878: PPUSH
// begin uc_side := 0 ;
26879: LD_ADDR_OWVAR 20
26883: PUSH
26884: LD_INT 0
26886: ST_TO_ADDR
// uc_nation := nation_arabian ;
26887: LD_ADDR_OWVAR 21
26891: PUSH
26892: LD_INT 2
26894: ST_TO_ADDR
// hc_gallery :=  ;
26895: LD_ADDR_OWVAR 33
26899: PUSH
26900: LD_STRING 
26902: ST_TO_ADDR
// hc_name :=  ;
26903: LD_ADDR_OWVAR 26
26907: PUSH
26908: LD_STRING 
26910: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26911: LD_INT 1
26913: PPUSH
26914: LD_INT 11
26916: PPUSH
26917: LD_INT 10
26919: PPUSH
26920: CALL_OW 380
// un := CreateHuman ;
26924: LD_ADDR_VAR 0 1
26928: PUSH
26929: CALL_OW 44
26933: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26934: LD_VAR 0 1
26938: PPUSH
26939: LD_INT 1
26941: PPUSH
26942: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26946: LD_INT 35
26948: PPUSH
26949: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26953: LD_VAR 0 1
26957: PPUSH
26958: LD_INT 22
26960: PUSH
26961: LD_OWVAR 2
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PPUSH
26970: CALL_OW 69
26974: PPUSH
26975: LD_VAR 0 1
26979: PPUSH
26980: CALL_OW 74
26984: PPUSH
26985: CALL_OW 115
// until IsDead ( un ) ;
26989: LD_VAR 0 1
26993: PPUSH
26994: CALL_OW 301
26998: IFFALSE 26946
// end ;
27000: PPOPN 1
27002: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27003: LD_EXP 38
27007: PUSH
27008: LD_EXP 78
27012: AND
27013: IFFALSE 27025
27015: GO 27017
27017: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27018: LD_STRING earthquake(getX(game), 0, 32)
27020: PPUSH
27021: CALL_OW 559
27025: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27026: LD_EXP 38
27030: PUSH
27031: LD_EXP 79
27035: AND
27036: IFFALSE 27127
27038: GO 27040
27040: DISABLE
27041: LD_INT 0
27043: PPUSH
// begin enable ;
27044: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27045: LD_ADDR_VAR 0 1
27049: PUSH
27050: LD_INT 22
27052: PUSH
27053: LD_OWVAR 2
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 21
27064: PUSH
27065: LD_INT 2
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 33
27074: PUSH
27075: LD_INT 3
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: LIST
27086: PPUSH
27087: CALL_OW 69
27091: ST_TO_ADDR
// if not tmp then
27092: LD_VAR 0 1
27096: NOT
27097: IFFALSE 27101
// exit ;
27099: GO 27127
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27101: LD_VAR 0 1
27105: PUSH
27106: LD_INT 1
27108: PPUSH
27109: LD_VAR 0 1
27113: PPUSH
27114: CALL_OW 12
27118: ARRAY
27119: PPUSH
27120: LD_INT 1
27122: PPUSH
27123: CALL_OW 234
// end ;
27127: PPOPN 1
27129: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27130: LD_EXP 38
27134: PUSH
27135: LD_EXP 80
27139: AND
27140: IFFALSE 27281
27142: GO 27144
27144: DISABLE
27145: LD_INT 0
27147: PPUSH
27148: PPUSH
27149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27150: LD_ADDR_VAR 0 3
27154: PUSH
27155: LD_INT 22
27157: PUSH
27158: LD_OWVAR 2
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 25
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PPUSH
27181: CALL_OW 69
27185: ST_TO_ADDR
// if not tmp then
27186: LD_VAR 0 3
27190: NOT
27191: IFFALSE 27195
// exit ;
27193: GO 27281
// un := tmp [ rand ( 1 , tmp ) ] ;
27195: LD_ADDR_VAR 0 2
27199: PUSH
27200: LD_VAR 0 3
27204: PUSH
27205: LD_INT 1
27207: PPUSH
27208: LD_VAR 0 3
27212: PPUSH
27213: CALL_OW 12
27217: ARRAY
27218: ST_TO_ADDR
// if Crawls ( un ) then
27219: LD_VAR 0 2
27223: PPUSH
27224: CALL_OW 318
27228: IFFALSE 27239
// ComWalk ( un ) ;
27230: LD_VAR 0 2
27234: PPUSH
27235: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27239: LD_VAR 0 2
27243: PPUSH
27244: LD_INT 9
27246: PPUSH
27247: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27251: LD_INT 28
27253: PPUSH
27254: LD_OWVAR 2
27258: PPUSH
27259: LD_INT 2
27261: PPUSH
27262: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27266: LD_INT 29
27268: PPUSH
27269: LD_OWVAR 2
27273: PPUSH
27274: LD_INT 2
27276: PPUSH
27277: CALL_OW 322
// end ;
27281: PPOPN 3
27283: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27284: LD_EXP 38
27288: PUSH
27289: LD_EXP 81
27293: AND
27294: IFFALSE 27405
27296: GO 27298
27298: DISABLE
27299: LD_INT 0
27301: PPUSH
27302: PPUSH
27303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27304: LD_ADDR_VAR 0 3
27308: PUSH
27309: LD_INT 22
27311: PUSH
27312: LD_OWVAR 2
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 25
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PPUSH
27335: CALL_OW 69
27339: ST_TO_ADDR
// if not tmp then
27340: LD_VAR 0 3
27344: NOT
27345: IFFALSE 27349
// exit ;
27347: GO 27405
// un := tmp [ rand ( 1 , tmp ) ] ;
27349: LD_ADDR_VAR 0 2
27353: PUSH
27354: LD_VAR 0 3
27358: PUSH
27359: LD_INT 1
27361: PPUSH
27362: LD_VAR 0 3
27366: PPUSH
27367: CALL_OW 12
27371: ARRAY
27372: ST_TO_ADDR
// if Crawls ( un ) then
27373: LD_VAR 0 2
27377: PPUSH
27378: CALL_OW 318
27382: IFFALSE 27393
// ComWalk ( un ) ;
27384: LD_VAR 0 2
27388: PPUSH
27389: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27393: LD_VAR 0 2
27397: PPUSH
27398: LD_INT 8
27400: PPUSH
27401: CALL_OW 336
// end ;
27405: PPOPN 3
27407: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27408: LD_EXP 38
27412: PUSH
27413: LD_EXP 82
27417: AND
27418: IFFALSE 27562
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27427: LD_ADDR_VAR 0 2
27431: PUSH
27432: LD_INT 22
27434: PUSH
27435: LD_OWVAR 2
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 21
27446: PUSH
27447: LD_INT 2
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 2
27456: PUSH
27457: LD_INT 34
27459: PUSH
27460: LD_INT 12
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 34
27469: PUSH
27470: LD_INT 51
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 34
27479: PUSH
27480: LD_INT 32
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: PPUSH
27498: CALL_OW 69
27502: ST_TO_ADDR
// if not tmp then
27503: LD_VAR 0 2
27507: NOT
27508: IFFALSE 27512
// exit ;
27510: GO 27562
// for i in tmp do
27512: LD_ADDR_VAR 0 1
27516: PUSH
27517: LD_VAR 0 2
27521: PUSH
27522: FOR_IN
27523: IFFALSE 27560
// if GetCargo ( i , mat_artifact ) = 0 then
27525: LD_VAR 0 1
27529: PPUSH
27530: LD_INT 4
27532: PPUSH
27533: CALL_OW 289
27537: PUSH
27538: LD_INT 0
27540: EQUAL
27541: IFFALSE 27558
// SetCargo ( i , mat_siberit , 100 ) ;
27543: LD_VAR 0 1
27547: PPUSH
27548: LD_INT 3
27550: PPUSH
27551: LD_INT 100
27553: PPUSH
27554: CALL_OW 290
27558: GO 27522
27560: POP
27561: POP
// end ;
27562: PPOPN 2
27564: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27565: LD_EXP 38
27569: PUSH
27570: LD_EXP 83
27574: AND
27575: IFFALSE 27758
27577: GO 27579
27579: DISABLE
27580: LD_INT 0
27582: PPUSH
27583: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27584: LD_ADDR_VAR 0 2
27588: PUSH
27589: LD_INT 22
27591: PUSH
27592: LD_OWVAR 2
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PPUSH
27601: CALL_OW 69
27605: ST_TO_ADDR
// if not tmp then
27606: LD_VAR 0 2
27610: NOT
27611: IFFALSE 27615
// exit ;
27613: GO 27758
// for i := 1 to 2 do
27615: LD_ADDR_VAR 0 1
27619: PUSH
27620: DOUBLE
27621: LD_INT 1
27623: DEC
27624: ST_TO_ADDR
27625: LD_INT 2
27627: PUSH
27628: FOR_TO
27629: IFFALSE 27756
// begin uc_side := your_side ;
27631: LD_ADDR_OWVAR 20
27635: PUSH
27636: LD_OWVAR 2
27640: ST_TO_ADDR
// uc_nation := nation_american ;
27641: LD_ADDR_OWVAR 21
27645: PUSH
27646: LD_INT 1
27648: ST_TO_ADDR
// vc_chassis := us_morphling ;
27649: LD_ADDR_OWVAR 37
27653: PUSH
27654: LD_INT 5
27656: ST_TO_ADDR
// vc_engine := engine_siberite ;
27657: LD_ADDR_OWVAR 39
27661: PUSH
27662: LD_INT 3
27664: ST_TO_ADDR
// vc_control := control_computer ;
27665: LD_ADDR_OWVAR 38
27669: PUSH
27670: LD_INT 3
27672: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27673: LD_ADDR_OWVAR 40
27677: PUSH
27678: LD_INT 10
27680: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27681: LD_VAR 0 2
27685: PUSH
27686: LD_INT 1
27688: ARRAY
27689: PPUSH
27690: CALL_OW 310
27694: NOT
27695: IFFALSE 27742
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27697: CALL_OW 45
27701: PPUSH
27702: LD_VAR 0 2
27706: PUSH
27707: LD_INT 1
27709: ARRAY
27710: PPUSH
27711: CALL_OW 250
27715: PPUSH
27716: LD_VAR 0 2
27720: PUSH
27721: LD_INT 1
27723: ARRAY
27724: PPUSH
27725: CALL_OW 251
27729: PPUSH
27730: LD_INT 12
27732: PPUSH
27733: LD_INT 1
27735: PPUSH
27736: CALL_OW 50
27740: GO 27754
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27742: CALL_OW 45
27746: PPUSH
27747: LD_INT 1
27749: PPUSH
27750: CALL_OW 51
// end ;
27754: GO 27628
27756: POP
27757: POP
// end ;
27758: PPOPN 2
27760: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27761: LD_EXP 38
27765: PUSH
27766: LD_EXP 84
27770: AND
27771: IFFALSE 27993
27773: GO 27775
27775: DISABLE
27776: LD_INT 0
27778: PPUSH
27779: PPUSH
27780: PPUSH
27781: PPUSH
27782: PPUSH
27783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27784: LD_ADDR_VAR 0 6
27788: PUSH
27789: LD_INT 22
27791: PUSH
27792: LD_OWVAR 2
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 21
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 3
27813: PUSH
27814: LD_INT 23
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: LIST
27832: PPUSH
27833: CALL_OW 69
27837: ST_TO_ADDR
// if not tmp then
27838: LD_VAR 0 6
27842: NOT
27843: IFFALSE 27847
// exit ;
27845: GO 27993
// s1 := rand ( 1 , 4 ) ;
27847: LD_ADDR_VAR 0 2
27851: PUSH
27852: LD_INT 1
27854: PPUSH
27855: LD_INT 4
27857: PPUSH
27858: CALL_OW 12
27862: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27863: LD_ADDR_VAR 0 4
27867: PUSH
27868: LD_VAR 0 6
27872: PUSH
27873: LD_INT 1
27875: ARRAY
27876: PPUSH
27877: LD_VAR 0 2
27881: PPUSH
27882: CALL_OW 259
27886: ST_TO_ADDR
// if s1 = 1 then
27887: LD_VAR 0 2
27891: PUSH
27892: LD_INT 1
27894: EQUAL
27895: IFFALSE 27915
// s2 := rand ( 2 , 4 ) else
27897: LD_ADDR_VAR 0 3
27901: PUSH
27902: LD_INT 2
27904: PPUSH
27905: LD_INT 4
27907: PPUSH
27908: CALL_OW 12
27912: ST_TO_ADDR
27913: GO 27923
// s2 := 1 ;
27915: LD_ADDR_VAR 0 3
27919: PUSH
27920: LD_INT 1
27922: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27923: LD_ADDR_VAR 0 5
27927: PUSH
27928: LD_VAR 0 6
27932: PUSH
27933: LD_INT 1
27935: ARRAY
27936: PPUSH
27937: LD_VAR 0 3
27941: PPUSH
27942: CALL_OW 259
27946: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27947: LD_VAR 0 6
27951: PUSH
27952: LD_INT 1
27954: ARRAY
27955: PPUSH
27956: LD_VAR 0 2
27960: PPUSH
27961: LD_VAR 0 5
27965: PPUSH
27966: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27970: LD_VAR 0 6
27974: PUSH
27975: LD_INT 1
27977: ARRAY
27978: PPUSH
27979: LD_VAR 0 3
27983: PPUSH
27984: LD_VAR 0 4
27988: PPUSH
27989: CALL_OW 237
// end ;
27993: PPOPN 6
27995: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27996: LD_EXP 38
28000: PUSH
28001: LD_EXP 85
28005: AND
28006: IFFALSE 28085
28008: GO 28010
28010: DISABLE
28011: LD_INT 0
28013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28014: LD_ADDR_VAR 0 1
28018: PUSH
28019: LD_INT 22
28021: PUSH
28022: LD_OWVAR 2
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 30
28033: PUSH
28034: LD_INT 3
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PPUSH
28045: CALL_OW 69
28049: ST_TO_ADDR
// if not tmp then
28050: LD_VAR 0 1
28054: NOT
28055: IFFALSE 28059
// exit ;
28057: GO 28085
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28059: LD_VAR 0 1
28063: PUSH
28064: LD_INT 1
28066: PPUSH
28067: LD_VAR 0 1
28071: PPUSH
28072: CALL_OW 12
28076: ARRAY
28077: PPUSH
28078: LD_INT 1
28080: PPUSH
28081: CALL_OW 234
// end ;
28085: PPOPN 1
28087: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28088: LD_EXP 38
28092: PUSH
28093: LD_EXP 86
28097: AND
28098: IFFALSE 28210
28100: GO 28102
28102: DISABLE
28103: LD_INT 0
28105: PPUSH
28106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28107: LD_ADDR_VAR 0 2
28111: PUSH
28112: LD_INT 22
28114: PUSH
28115: LD_OWVAR 2
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 2
28126: PUSH
28127: LD_INT 30
28129: PUSH
28130: LD_INT 27
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 30
28139: PUSH
28140: LD_INT 26
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 30
28149: PUSH
28150: LD_INT 28
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PPUSH
28167: CALL_OW 69
28171: ST_TO_ADDR
// if not tmp then
28172: LD_VAR 0 2
28176: NOT
28177: IFFALSE 28181
// exit ;
28179: GO 28210
// for i in tmp do
28181: LD_ADDR_VAR 0 1
28185: PUSH
28186: LD_VAR 0 2
28190: PUSH
28191: FOR_IN
28192: IFFALSE 28208
// SetLives ( i , 1 ) ;
28194: LD_VAR 0 1
28198: PPUSH
28199: LD_INT 1
28201: PPUSH
28202: CALL_OW 234
28206: GO 28191
28208: POP
28209: POP
// end ;
28210: PPOPN 2
28212: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28213: LD_EXP 38
28217: PUSH
28218: LD_EXP 87
28222: AND
28223: IFFALSE 28510
28225: GO 28227
28227: DISABLE
28228: LD_INT 0
28230: PPUSH
28231: PPUSH
28232: PPUSH
// begin i := rand ( 1 , 7 ) ;
28233: LD_ADDR_VAR 0 1
28237: PUSH
28238: LD_INT 1
28240: PPUSH
28241: LD_INT 7
28243: PPUSH
28244: CALL_OW 12
28248: ST_TO_ADDR
// case i of 1 :
28249: LD_VAR 0 1
28253: PUSH
28254: LD_INT 1
28256: DOUBLE
28257: EQUAL
28258: IFTRUE 28262
28260: GO 28272
28262: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28263: LD_STRING earthquake(getX(game), 0, 32)
28265: PPUSH
28266: CALL_OW 559
28270: GO 28510
28272: LD_INT 2
28274: DOUBLE
28275: EQUAL
28276: IFTRUE 28280
28278: GO 28294
28280: POP
// begin ToLua ( displayStucuk(); ) ;
28281: LD_STRING displayStucuk();
28283: PPUSH
28284: CALL_OW 559
// ResetFog ;
28288: CALL_OW 335
// end ; 3 :
28292: GO 28510
28294: LD_INT 3
28296: DOUBLE
28297: EQUAL
28298: IFTRUE 28302
28300: GO 28406
28302: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28303: LD_ADDR_VAR 0 2
28307: PUSH
28308: LD_INT 22
28310: PUSH
28311: LD_OWVAR 2
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 25
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PPUSH
28334: CALL_OW 69
28338: ST_TO_ADDR
// if not tmp then
28339: LD_VAR 0 2
28343: NOT
28344: IFFALSE 28348
// exit ;
28346: GO 28510
// un := tmp [ rand ( 1 , tmp ) ] ;
28348: LD_ADDR_VAR 0 3
28352: PUSH
28353: LD_VAR 0 2
28357: PUSH
28358: LD_INT 1
28360: PPUSH
28361: LD_VAR 0 2
28365: PPUSH
28366: CALL_OW 12
28370: ARRAY
28371: ST_TO_ADDR
// if Crawls ( un ) then
28372: LD_VAR 0 3
28376: PPUSH
28377: CALL_OW 318
28381: IFFALSE 28392
// ComWalk ( un ) ;
28383: LD_VAR 0 3
28387: PPUSH
28388: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28392: LD_VAR 0 3
28396: PPUSH
28397: LD_INT 8
28399: PPUSH
28400: CALL_OW 336
// end ; 4 :
28404: GO 28510
28406: LD_INT 4
28408: DOUBLE
28409: EQUAL
28410: IFTRUE 28414
28412: GO 28488
28414: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28415: LD_ADDR_VAR 0 2
28419: PUSH
28420: LD_INT 22
28422: PUSH
28423: LD_OWVAR 2
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 30
28434: PUSH
28435: LD_INT 29
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PPUSH
28446: CALL_OW 69
28450: ST_TO_ADDR
// if not tmp then
28451: LD_VAR 0 2
28455: NOT
28456: IFFALSE 28460
// exit ;
28458: GO 28510
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28460: LD_VAR 0 2
28464: PUSH
28465: LD_INT 1
28467: ARRAY
28468: PPUSH
28469: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28473: LD_VAR 0 2
28477: PUSH
28478: LD_INT 1
28480: ARRAY
28481: PPUSH
28482: CALL_OW 65
// end ; 5 .. 7 :
28486: GO 28510
28488: LD_INT 5
28490: DOUBLE
28491: GREATEREQUAL
28492: IFFALSE 28500
28494: LD_INT 7
28496: DOUBLE
28497: LESSEQUAL
28498: IFTRUE 28502
28500: GO 28509
28502: POP
// StreamSibBomb ; end ;
28503: CALL 24747 0 0
28507: GO 28510
28509: POP
// end ;
28510: PPOPN 3
28512: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28513: LD_EXP 38
28517: PUSH
28518: LD_EXP 88
28522: AND
28523: IFFALSE 28679
28525: GO 28527
28527: DISABLE
28528: LD_INT 0
28530: PPUSH
28531: PPUSH
28532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28533: LD_ADDR_VAR 0 2
28537: PUSH
28538: LD_INT 81
28540: PUSH
28541: LD_OWVAR 2
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 2
28552: PUSH
28553: LD_INT 21
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 21
28565: PUSH
28566: LD_INT 2
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PPUSH
28582: CALL_OW 69
28586: ST_TO_ADDR
// if not tmp then
28587: LD_VAR 0 2
28591: NOT
28592: IFFALSE 28596
// exit ;
28594: GO 28679
// p := 0 ;
28596: LD_ADDR_VAR 0 3
28600: PUSH
28601: LD_INT 0
28603: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28604: LD_INT 35
28606: PPUSH
28607: CALL_OW 67
// p := p + 1 ;
28611: LD_ADDR_VAR 0 3
28615: PUSH
28616: LD_VAR 0 3
28620: PUSH
28621: LD_INT 1
28623: PLUS
28624: ST_TO_ADDR
// for i in tmp do
28625: LD_ADDR_VAR 0 1
28629: PUSH
28630: LD_VAR 0 2
28634: PUSH
28635: FOR_IN
28636: IFFALSE 28667
// if GetLives ( i ) < 1000 then
28638: LD_VAR 0 1
28642: PPUSH
28643: CALL_OW 256
28647: PUSH
28648: LD_INT 1000
28650: LESS
28651: IFFALSE 28665
// SetLives ( i , 1000 ) ;
28653: LD_VAR 0 1
28657: PPUSH
28658: LD_INT 1000
28660: PPUSH
28661: CALL_OW 234
28665: GO 28635
28667: POP
28668: POP
// until p > 20 ;
28669: LD_VAR 0 3
28673: PUSH
28674: LD_INT 20
28676: GREATER
28677: IFFALSE 28604
// end ;
28679: PPOPN 3
28681: END
// every 0 0$1 trigger StreamModeActive and sTime do
28682: LD_EXP 38
28686: PUSH
28687: LD_EXP 89
28691: AND
28692: IFFALSE 28727
28694: GO 28696
28696: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28697: LD_INT 28
28699: PPUSH
28700: LD_OWVAR 2
28704: PPUSH
28705: LD_INT 2
28707: PPUSH
28708: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28712: LD_INT 30
28714: PPUSH
28715: LD_OWVAR 2
28719: PPUSH
28720: LD_INT 2
28722: PPUSH
28723: CALL_OW 322
// end ;
28727: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28728: LD_EXP 38
28732: PUSH
28733: LD_EXP 90
28737: AND
28738: IFFALSE 28859
28740: GO 28742
28742: DISABLE
28743: LD_INT 0
28745: PPUSH
28746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28747: LD_ADDR_VAR 0 2
28751: PUSH
28752: LD_INT 22
28754: PUSH
28755: LD_OWVAR 2
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 21
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 3
28776: PUSH
28777: LD_INT 23
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: PPUSH
28796: CALL_OW 69
28800: ST_TO_ADDR
// if not tmp then
28801: LD_VAR 0 2
28805: NOT
28806: IFFALSE 28810
// exit ;
28808: GO 28859
// for i in tmp do
28810: LD_ADDR_VAR 0 1
28814: PUSH
28815: LD_VAR 0 2
28819: PUSH
28820: FOR_IN
28821: IFFALSE 28857
// begin if Crawls ( i ) then
28823: LD_VAR 0 1
28827: PPUSH
28828: CALL_OW 318
28832: IFFALSE 28843
// ComWalk ( i ) ;
28834: LD_VAR 0 1
28838: PPUSH
28839: CALL_OW 138
// SetClass ( i , 2 ) ;
28843: LD_VAR 0 1
28847: PPUSH
28848: LD_INT 2
28850: PPUSH
28851: CALL_OW 336
// end ;
28855: GO 28820
28857: POP
28858: POP
// end ;
28859: PPOPN 2
28861: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28862: LD_EXP 38
28866: PUSH
28867: LD_EXP 91
28871: AND
28872: IFFALSE 29160
28874: GO 28876
28876: DISABLE
28877: LD_INT 0
28879: PPUSH
28880: PPUSH
28881: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28882: LD_OWVAR 2
28886: PPUSH
28887: LD_INT 9
28889: PPUSH
28890: LD_INT 1
28892: PPUSH
28893: LD_INT 1
28895: PPUSH
28896: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28900: LD_INT 9
28902: PPUSH
28903: LD_OWVAR 2
28907: PPUSH
28908: CALL_OW 343
// uc_side := 9 ;
28912: LD_ADDR_OWVAR 20
28916: PUSH
28917: LD_INT 9
28919: ST_TO_ADDR
// uc_nation := 2 ;
28920: LD_ADDR_OWVAR 21
28924: PUSH
28925: LD_INT 2
28927: ST_TO_ADDR
// hc_name := Dark Warrior ;
28928: LD_ADDR_OWVAR 26
28932: PUSH
28933: LD_STRING Dark Warrior
28935: ST_TO_ADDR
// hc_gallery :=  ;
28936: LD_ADDR_OWVAR 33
28940: PUSH
28941: LD_STRING 
28943: ST_TO_ADDR
// hc_noskilllimit := true ;
28944: LD_ADDR_OWVAR 76
28948: PUSH
28949: LD_INT 1
28951: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28952: LD_ADDR_OWVAR 31
28956: PUSH
28957: LD_INT 30
28959: PUSH
28960: LD_INT 30
28962: PUSH
28963: LD_INT 30
28965: PUSH
28966: LD_INT 30
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: ST_TO_ADDR
// un := CreateHuman ;
28975: LD_ADDR_VAR 0 3
28979: PUSH
28980: CALL_OW 44
28984: ST_TO_ADDR
// hc_noskilllimit := false ;
28985: LD_ADDR_OWVAR 76
28989: PUSH
28990: LD_INT 0
28992: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28993: LD_VAR 0 3
28997: PPUSH
28998: LD_INT 1
29000: PPUSH
29001: CALL_OW 51
// ToLua ( playRanger() ) ;
29005: LD_STRING playRanger()
29007: PPUSH
29008: CALL_OW 559
// p := 0 ;
29012: LD_ADDR_VAR 0 2
29016: PUSH
29017: LD_INT 0
29019: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29020: LD_INT 35
29022: PPUSH
29023: CALL_OW 67
// p := p + 1 ;
29027: LD_ADDR_VAR 0 2
29031: PUSH
29032: LD_VAR 0 2
29036: PUSH
29037: LD_INT 1
29039: PLUS
29040: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29041: LD_VAR 0 3
29045: PPUSH
29046: CALL_OW 256
29050: PUSH
29051: LD_INT 1000
29053: LESS
29054: IFFALSE 29068
// SetLives ( un , 1000 ) ;
29056: LD_VAR 0 3
29060: PPUSH
29061: LD_INT 1000
29063: PPUSH
29064: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29068: LD_VAR 0 3
29072: PPUSH
29073: LD_INT 81
29075: PUSH
29076: LD_OWVAR 2
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 91
29087: PUSH
29088: LD_VAR 0 3
29092: PUSH
29093: LD_INT 30
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: LIST
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PPUSH
29105: CALL_OW 69
29109: PPUSH
29110: LD_VAR 0 3
29114: PPUSH
29115: CALL_OW 74
29119: PPUSH
29120: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29124: LD_VAR 0 2
29128: PUSH
29129: LD_INT 80
29131: GREATER
29132: PUSH
29133: LD_VAR 0 3
29137: PPUSH
29138: CALL_OW 301
29142: OR
29143: IFFALSE 29020
// if un then
29145: LD_VAR 0 3
29149: IFFALSE 29160
// RemoveUnit ( un ) ;
29151: LD_VAR 0 3
29155: PPUSH
29156: CALL_OW 64
// end ;
29160: PPOPN 3
29162: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29163: LD_EXP 92
29167: IFFALSE 29283
29169: GO 29171
29171: DISABLE
29172: LD_INT 0
29174: PPUSH
29175: PPUSH
29176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29177: LD_ADDR_VAR 0 2
29181: PUSH
29182: LD_INT 81
29184: PUSH
29185: LD_OWVAR 2
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 21
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PPUSH
29208: CALL_OW 69
29212: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29213: LD_STRING playComputer()
29215: PPUSH
29216: CALL_OW 559
// if not tmp then
29220: LD_VAR 0 2
29224: NOT
29225: IFFALSE 29229
// exit ;
29227: GO 29283
// for i in tmp do
29229: LD_ADDR_VAR 0 1
29233: PUSH
29234: LD_VAR 0 2
29238: PUSH
29239: FOR_IN
29240: IFFALSE 29281
// for j := 1 to 4 do
29242: LD_ADDR_VAR 0 3
29246: PUSH
29247: DOUBLE
29248: LD_INT 1
29250: DEC
29251: ST_TO_ADDR
29252: LD_INT 4
29254: PUSH
29255: FOR_TO
29256: IFFALSE 29277
// SetSkill ( i , j , 10 ) ;
29258: LD_VAR 0 1
29262: PPUSH
29263: LD_VAR 0 3
29267: PPUSH
29268: LD_INT 10
29270: PPUSH
29271: CALL_OW 237
29275: GO 29255
29277: POP
29278: POP
29279: GO 29239
29281: POP
29282: POP
// end ;
29283: PPOPN 3
29285: END
// every 0 0$1 trigger s30 do var i , tmp ;
29286: LD_EXP 93
29290: IFFALSE 29359
29292: GO 29294
29294: DISABLE
29295: LD_INT 0
29297: PPUSH
29298: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29299: LD_ADDR_VAR 0 2
29303: PUSH
29304: LD_INT 22
29306: PUSH
29307: LD_OWVAR 2
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PPUSH
29316: CALL_OW 69
29320: ST_TO_ADDR
// if not tmp then
29321: LD_VAR 0 2
29325: NOT
29326: IFFALSE 29330
// exit ;
29328: GO 29359
// for i in tmp do
29330: LD_ADDR_VAR 0 1
29334: PUSH
29335: LD_VAR 0 2
29339: PUSH
29340: FOR_IN
29341: IFFALSE 29357
// SetLives ( i , 300 ) ;
29343: LD_VAR 0 1
29347: PPUSH
29348: LD_INT 300
29350: PPUSH
29351: CALL_OW 234
29355: GO 29340
29357: POP
29358: POP
// end ;
29359: PPOPN 2
29361: END
// every 0 0$1 trigger s60 do var i , tmp ;
29362: LD_EXP 94
29366: IFFALSE 29435
29368: GO 29370
29370: DISABLE
29371: LD_INT 0
29373: PPUSH
29374: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29375: LD_ADDR_VAR 0 2
29379: PUSH
29380: LD_INT 22
29382: PUSH
29383: LD_OWVAR 2
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PPUSH
29392: CALL_OW 69
29396: ST_TO_ADDR
// if not tmp then
29397: LD_VAR 0 2
29401: NOT
29402: IFFALSE 29406
// exit ;
29404: GO 29435
// for i in tmp do
29406: LD_ADDR_VAR 0 1
29410: PUSH
29411: LD_VAR 0 2
29415: PUSH
29416: FOR_IN
29417: IFFALSE 29433
// SetLives ( i , 600 ) ;
29419: LD_VAR 0 1
29423: PPUSH
29424: LD_INT 600
29426: PPUSH
29427: CALL_OW 234
29431: GO 29416
29433: POP
29434: POP
// end ;
29435: PPOPN 2
29437: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29438: LD_INT 0
29440: PPUSH
// case cmd of 301 :
29441: LD_VAR 0 1
29445: PUSH
29446: LD_INT 301
29448: DOUBLE
29449: EQUAL
29450: IFTRUE 29454
29452: GO 29486
29454: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29455: LD_VAR 0 6
29459: PPUSH
29460: LD_VAR 0 7
29464: PPUSH
29465: LD_VAR 0 8
29469: PPUSH
29470: LD_VAR 0 4
29474: PPUSH
29475: LD_VAR 0 5
29479: PPUSH
29480: CALL 30695 0 5
29484: GO 29607
29486: LD_INT 302
29488: DOUBLE
29489: EQUAL
29490: IFTRUE 29494
29492: GO 29531
29494: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29495: LD_VAR 0 6
29499: PPUSH
29500: LD_VAR 0 7
29504: PPUSH
29505: LD_VAR 0 8
29509: PPUSH
29510: LD_VAR 0 9
29514: PPUSH
29515: LD_VAR 0 4
29519: PPUSH
29520: LD_VAR 0 5
29524: PPUSH
29525: CALL 30786 0 6
29529: GO 29607
29531: LD_INT 303
29533: DOUBLE
29534: EQUAL
29535: IFTRUE 29539
29537: GO 29576
29539: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29540: LD_VAR 0 6
29544: PPUSH
29545: LD_VAR 0 7
29549: PPUSH
29550: LD_VAR 0 8
29554: PPUSH
29555: LD_VAR 0 9
29559: PPUSH
29560: LD_VAR 0 4
29564: PPUSH
29565: LD_VAR 0 5
29569: PPUSH
29570: CALL 29612 0 6
29574: GO 29607
29576: LD_INT 304
29578: DOUBLE
29579: EQUAL
29580: IFTRUE 29584
29582: GO 29606
29584: POP
// hHackTeleport ( unit , x , y ) ; end ;
29585: LD_VAR 0 2
29589: PPUSH
29590: LD_VAR 0 4
29594: PPUSH
29595: LD_VAR 0 5
29599: PPUSH
29600: CALL 31379 0 3
29604: GO 29607
29606: POP
// end ;
29607: LD_VAR 0 12
29611: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29612: LD_INT 0
29614: PPUSH
29615: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29616: LD_VAR 0 1
29620: PUSH
29621: LD_INT 1
29623: LESS
29624: PUSH
29625: LD_VAR 0 1
29629: PUSH
29630: LD_INT 3
29632: GREATER
29633: OR
29634: PUSH
29635: LD_VAR 0 5
29639: PPUSH
29640: LD_VAR 0 6
29644: PPUSH
29645: CALL_OW 428
29649: OR
29650: IFFALSE 29654
// exit ;
29652: GO 30382
// uc_side := your_side ;
29654: LD_ADDR_OWVAR 20
29658: PUSH
29659: LD_OWVAR 2
29663: ST_TO_ADDR
// uc_nation := nation ;
29664: LD_ADDR_OWVAR 21
29668: PUSH
29669: LD_VAR 0 1
29673: ST_TO_ADDR
// bc_level = 1 ;
29674: LD_ADDR_OWVAR 43
29678: PUSH
29679: LD_INT 1
29681: ST_TO_ADDR
// case btype of 1 :
29682: LD_VAR 0 2
29686: PUSH
29687: LD_INT 1
29689: DOUBLE
29690: EQUAL
29691: IFTRUE 29695
29693: GO 29706
29695: POP
// bc_type := b_depot ; 2 :
29696: LD_ADDR_OWVAR 42
29700: PUSH
29701: LD_INT 0
29703: ST_TO_ADDR
29704: GO 30326
29706: LD_INT 2
29708: DOUBLE
29709: EQUAL
29710: IFTRUE 29714
29712: GO 29725
29714: POP
// bc_type := b_warehouse ; 3 :
29715: LD_ADDR_OWVAR 42
29719: PUSH
29720: LD_INT 1
29722: ST_TO_ADDR
29723: GO 30326
29725: LD_INT 3
29727: DOUBLE
29728: EQUAL
29729: IFTRUE 29733
29731: GO 29744
29733: POP
// bc_type := b_lab ; 4 .. 9 :
29734: LD_ADDR_OWVAR 42
29738: PUSH
29739: LD_INT 6
29741: ST_TO_ADDR
29742: GO 30326
29744: LD_INT 4
29746: DOUBLE
29747: GREATEREQUAL
29748: IFFALSE 29756
29750: LD_INT 9
29752: DOUBLE
29753: LESSEQUAL
29754: IFTRUE 29758
29756: GO 29818
29758: POP
// begin bc_type := b_lab_half ;
29759: LD_ADDR_OWVAR 42
29763: PUSH
29764: LD_INT 7
29766: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29767: LD_ADDR_OWVAR 44
29771: PUSH
29772: LD_INT 10
29774: PUSH
29775: LD_INT 11
29777: PUSH
29778: LD_INT 12
29780: PUSH
29781: LD_INT 15
29783: PUSH
29784: LD_INT 14
29786: PUSH
29787: LD_INT 13
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: PUSH
29798: LD_VAR 0 2
29802: PUSH
29803: LD_INT 3
29805: MINUS
29806: ARRAY
29807: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
29808: LD_ADDR_OWVAR 45
29812: PUSH
29813: LD_INT 9
29815: ST_TO_ADDR
// end ; 10 .. 13 :
29816: GO 30326
29818: LD_INT 10
29820: DOUBLE
29821: GREATEREQUAL
29822: IFFALSE 29830
29824: LD_INT 13
29826: DOUBLE
29827: LESSEQUAL
29828: IFTRUE 29832
29830: GO 29909
29832: POP
// begin bc_type := b_lab_full ;
29833: LD_ADDR_OWVAR 42
29837: PUSH
29838: LD_INT 8
29840: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29841: LD_ADDR_OWVAR 44
29845: PUSH
29846: LD_INT 10
29848: PUSH
29849: LD_INT 12
29851: PUSH
29852: LD_INT 14
29854: PUSH
29855: LD_INT 13
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: PUSH
29864: LD_VAR 0 2
29868: PUSH
29869: LD_INT 9
29871: MINUS
29872: ARRAY
29873: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29874: LD_ADDR_OWVAR 45
29878: PUSH
29879: LD_INT 11
29881: PUSH
29882: LD_INT 15
29884: PUSH
29885: LD_INT 12
29887: PUSH
29888: LD_INT 15
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: PUSH
29897: LD_VAR 0 2
29901: PUSH
29902: LD_INT 9
29904: MINUS
29905: ARRAY
29906: ST_TO_ADDR
// end ; 14 :
29907: GO 30326
29909: LD_INT 14
29911: DOUBLE
29912: EQUAL
29913: IFTRUE 29917
29915: GO 29928
29917: POP
// bc_type := b_workshop ; 15 :
29918: LD_ADDR_OWVAR 42
29922: PUSH
29923: LD_INT 2
29925: ST_TO_ADDR
29926: GO 30326
29928: LD_INT 15
29930: DOUBLE
29931: EQUAL
29932: IFTRUE 29936
29934: GO 29947
29936: POP
// bc_type := b_factory ; 16 :
29937: LD_ADDR_OWVAR 42
29941: PUSH
29942: LD_INT 3
29944: ST_TO_ADDR
29945: GO 30326
29947: LD_INT 16
29949: DOUBLE
29950: EQUAL
29951: IFTRUE 29955
29953: GO 29966
29955: POP
// bc_type := b_ext_gun ; 17 :
29956: LD_ADDR_OWVAR 42
29960: PUSH
29961: LD_INT 17
29963: ST_TO_ADDR
29964: GO 30326
29966: LD_INT 17
29968: DOUBLE
29969: EQUAL
29970: IFTRUE 29974
29972: GO 30002
29974: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29975: LD_ADDR_OWVAR 42
29979: PUSH
29980: LD_INT 19
29982: PUSH
29983: LD_INT 23
29985: PUSH
29986: LD_INT 19
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: LIST
29993: PUSH
29994: LD_VAR 0 1
29998: ARRAY
29999: ST_TO_ADDR
30000: GO 30326
30002: LD_INT 18
30004: DOUBLE
30005: EQUAL
30006: IFTRUE 30010
30008: GO 30021
30010: POP
// bc_type := b_ext_radar ; 19 :
30011: LD_ADDR_OWVAR 42
30015: PUSH
30016: LD_INT 20
30018: ST_TO_ADDR
30019: GO 30326
30021: LD_INT 19
30023: DOUBLE
30024: EQUAL
30025: IFTRUE 30029
30027: GO 30040
30029: POP
// bc_type := b_ext_radio ; 20 :
30030: LD_ADDR_OWVAR 42
30034: PUSH
30035: LD_INT 22
30037: ST_TO_ADDR
30038: GO 30326
30040: LD_INT 20
30042: DOUBLE
30043: EQUAL
30044: IFTRUE 30048
30046: GO 30059
30048: POP
// bc_type := b_ext_siberium ; 21 :
30049: LD_ADDR_OWVAR 42
30053: PUSH
30054: LD_INT 21
30056: ST_TO_ADDR
30057: GO 30326
30059: LD_INT 21
30061: DOUBLE
30062: EQUAL
30063: IFTRUE 30067
30065: GO 30078
30067: POP
// bc_type := b_ext_computer ; 22 :
30068: LD_ADDR_OWVAR 42
30072: PUSH
30073: LD_INT 24
30075: ST_TO_ADDR
30076: GO 30326
30078: LD_INT 22
30080: DOUBLE
30081: EQUAL
30082: IFTRUE 30086
30084: GO 30097
30086: POP
// bc_type := b_ext_track ; 23 :
30087: LD_ADDR_OWVAR 42
30091: PUSH
30092: LD_INT 16
30094: ST_TO_ADDR
30095: GO 30326
30097: LD_INT 23
30099: DOUBLE
30100: EQUAL
30101: IFTRUE 30105
30103: GO 30116
30105: POP
// bc_type := b_ext_laser ; 24 :
30106: LD_ADDR_OWVAR 42
30110: PUSH
30111: LD_INT 25
30113: ST_TO_ADDR
30114: GO 30326
30116: LD_INT 24
30118: DOUBLE
30119: EQUAL
30120: IFTRUE 30124
30122: GO 30135
30124: POP
// bc_type := b_control_tower ; 25 :
30125: LD_ADDR_OWVAR 42
30129: PUSH
30130: LD_INT 36
30132: ST_TO_ADDR
30133: GO 30326
30135: LD_INT 25
30137: DOUBLE
30138: EQUAL
30139: IFTRUE 30143
30141: GO 30154
30143: POP
// bc_type := b_breastwork ; 26 :
30144: LD_ADDR_OWVAR 42
30148: PUSH
30149: LD_INT 31
30151: ST_TO_ADDR
30152: GO 30326
30154: LD_INT 26
30156: DOUBLE
30157: EQUAL
30158: IFTRUE 30162
30160: GO 30173
30162: POP
// bc_type := b_bunker ; 27 :
30163: LD_ADDR_OWVAR 42
30167: PUSH
30168: LD_INT 32
30170: ST_TO_ADDR
30171: GO 30326
30173: LD_INT 27
30175: DOUBLE
30176: EQUAL
30177: IFTRUE 30181
30179: GO 30192
30181: POP
// bc_type := b_turret ; 28 :
30182: LD_ADDR_OWVAR 42
30186: PUSH
30187: LD_INT 33
30189: ST_TO_ADDR
30190: GO 30326
30192: LD_INT 28
30194: DOUBLE
30195: EQUAL
30196: IFTRUE 30200
30198: GO 30211
30200: POP
// bc_type := b_armoury ; 29 :
30201: LD_ADDR_OWVAR 42
30205: PUSH
30206: LD_INT 4
30208: ST_TO_ADDR
30209: GO 30326
30211: LD_INT 29
30213: DOUBLE
30214: EQUAL
30215: IFTRUE 30219
30217: GO 30230
30219: POP
// bc_type := b_barracks ; 30 :
30220: LD_ADDR_OWVAR 42
30224: PUSH
30225: LD_INT 5
30227: ST_TO_ADDR
30228: GO 30326
30230: LD_INT 30
30232: DOUBLE
30233: EQUAL
30234: IFTRUE 30238
30236: GO 30249
30238: POP
// bc_type := b_solar_power ; 31 :
30239: LD_ADDR_OWVAR 42
30243: PUSH
30244: LD_INT 27
30246: ST_TO_ADDR
30247: GO 30326
30249: LD_INT 31
30251: DOUBLE
30252: EQUAL
30253: IFTRUE 30257
30255: GO 30268
30257: POP
// bc_type := b_oil_power ; 32 :
30258: LD_ADDR_OWVAR 42
30262: PUSH
30263: LD_INT 26
30265: ST_TO_ADDR
30266: GO 30326
30268: LD_INT 32
30270: DOUBLE
30271: EQUAL
30272: IFTRUE 30276
30274: GO 30287
30276: POP
// bc_type := b_siberite_power ; 33 :
30277: LD_ADDR_OWVAR 42
30281: PUSH
30282: LD_INT 28
30284: ST_TO_ADDR
30285: GO 30326
30287: LD_INT 33
30289: DOUBLE
30290: EQUAL
30291: IFTRUE 30295
30293: GO 30306
30295: POP
// bc_type := b_oil_mine ; 34 :
30296: LD_ADDR_OWVAR 42
30300: PUSH
30301: LD_INT 29
30303: ST_TO_ADDR
30304: GO 30326
30306: LD_INT 34
30308: DOUBLE
30309: EQUAL
30310: IFTRUE 30314
30312: GO 30325
30314: POP
// bc_type := b_siberite_mine ; end ;
30315: LD_ADDR_OWVAR 42
30319: PUSH
30320: LD_INT 30
30322: ST_TO_ADDR
30323: GO 30326
30325: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30326: LD_ADDR_VAR 0 8
30330: PUSH
30331: LD_VAR 0 5
30335: PPUSH
30336: LD_VAR 0 6
30340: PPUSH
30341: LD_VAR 0 3
30345: PPUSH
30346: CALL_OW 47
30350: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30351: LD_OWVAR 42
30355: PUSH
30356: LD_INT 32
30358: PUSH
30359: LD_INT 33
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: IN
30366: IFFALSE 30382
// PlaceWeaponTurret ( b , weapon ) ;
30368: LD_VAR 0 8
30372: PPUSH
30373: LD_VAR 0 4
30377: PPUSH
30378: CALL_OW 431
// end ;
30382: LD_VAR 0 7
30386: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30387: LD_INT 0
30389: PPUSH
30390: PPUSH
30391: PPUSH
30392: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30393: LD_ADDR_VAR 0 4
30397: PUSH
30398: LD_INT 22
30400: PUSH
30401: LD_OWVAR 2
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 2
30412: PUSH
30413: LD_INT 30
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 30
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PPUSH
30442: CALL_OW 69
30446: ST_TO_ADDR
// if not tmp then
30447: LD_VAR 0 4
30451: NOT
30452: IFFALSE 30456
// exit ;
30454: GO 30515
// for i in tmp do
30456: LD_ADDR_VAR 0 2
30460: PUSH
30461: LD_VAR 0 4
30465: PUSH
30466: FOR_IN
30467: IFFALSE 30513
// for j = 1 to 3 do
30469: LD_ADDR_VAR 0 3
30473: PUSH
30474: DOUBLE
30475: LD_INT 1
30477: DEC
30478: ST_TO_ADDR
30479: LD_INT 3
30481: PUSH
30482: FOR_TO
30483: IFFALSE 30509
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30485: LD_VAR 0 2
30489: PPUSH
30490: CALL_OW 274
30494: PPUSH
30495: LD_VAR 0 3
30499: PPUSH
30500: LD_INT 99999
30502: PPUSH
30503: CALL_OW 277
30507: GO 30482
30509: POP
30510: POP
30511: GO 30466
30513: POP
30514: POP
// end ;
30515: LD_VAR 0 1
30519: RET
// export function hHackSetLevel10 ; var i , j ; begin
30520: LD_INT 0
30522: PPUSH
30523: PPUSH
30524: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30525: LD_ADDR_VAR 0 2
30529: PUSH
30530: LD_INT 21
30532: PUSH
30533: LD_INT 1
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PPUSH
30540: CALL_OW 69
30544: PUSH
30545: FOR_IN
30546: IFFALSE 30598
// if IsSelected ( i ) then
30548: LD_VAR 0 2
30552: PPUSH
30553: CALL_OW 306
30557: IFFALSE 30596
// begin for j := 1 to 4 do
30559: LD_ADDR_VAR 0 3
30563: PUSH
30564: DOUBLE
30565: LD_INT 1
30567: DEC
30568: ST_TO_ADDR
30569: LD_INT 4
30571: PUSH
30572: FOR_TO
30573: IFFALSE 30594
// SetSkill ( i , j , 10 ) ;
30575: LD_VAR 0 2
30579: PPUSH
30580: LD_VAR 0 3
30584: PPUSH
30585: LD_INT 10
30587: PPUSH
30588: CALL_OW 237
30592: GO 30572
30594: POP
30595: POP
// end ;
30596: GO 30545
30598: POP
30599: POP
// end ;
30600: LD_VAR 0 1
30604: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30605: LD_INT 0
30607: PPUSH
30608: PPUSH
30609: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30610: LD_ADDR_VAR 0 2
30614: PUSH
30615: LD_INT 22
30617: PUSH
30618: LD_OWVAR 2
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 21
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PPUSH
30641: CALL_OW 69
30645: PUSH
30646: FOR_IN
30647: IFFALSE 30688
// begin for j := 1 to 4 do
30649: LD_ADDR_VAR 0 3
30653: PUSH
30654: DOUBLE
30655: LD_INT 1
30657: DEC
30658: ST_TO_ADDR
30659: LD_INT 4
30661: PUSH
30662: FOR_TO
30663: IFFALSE 30684
// SetSkill ( i , j , 10 ) ;
30665: LD_VAR 0 2
30669: PPUSH
30670: LD_VAR 0 3
30674: PPUSH
30675: LD_INT 10
30677: PPUSH
30678: CALL_OW 237
30682: GO 30662
30684: POP
30685: POP
// end ;
30686: GO 30646
30688: POP
30689: POP
// end ;
30690: LD_VAR 0 1
30694: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30695: LD_INT 0
30697: PPUSH
// uc_side := your_side ;
30698: LD_ADDR_OWVAR 20
30702: PUSH
30703: LD_OWVAR 2
30707: ST_TO_ADDR
// uc_nation := nation ;
30708: LD_ADDR_OWVAR 21
30712: PUSH
30713: LD_VAR 0 1
30717: ST_TO_ADDR
// InitHc ;
30718: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30722: LD_INT 0
30724: PPUSH
30725: LD_VAR 0 2
30729: PPUSH
30730: LD_VAR 0 3
30734: PPUSH
30735: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30739: LD_VAR 0 4
30743: PPUSH
30744: LD_VAR 0 5
30748: PPUSH
30749: CALL_OW 428
30753: PUSH
30754: LD_INT 0
30756: EQUAL
30757: IFFALSE 30781
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30759: CALL_OW 44
30763: PPUSH
30764: LD_VAR 0 4
30768: PPUSH
30769: LD_VAR 0 5
30773: PPUSH
30774: LD_INT 1
30776: PPUSH
30777: CALL_OW 48
// end ;
30781: LD_VAR 0 6
30785: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30786: LD_INT 0
30788: PPUSH
30789: PPUSH
// uc_side := your_side ;
30790: LD_ADDR_OWVAR 20
30794: PUSH
30795: LD_OWVAR 2
30799: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30800: LD_VAR 0 1
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: LD_INT 2
30810: PUSH
30811: LD_INT 3
30813: PUSH
30814: LD_INT 4
30816: PUSH
30817: LD_INT 5
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: IN
30827: IFFALSE 30839
// uc_nation := nation_american else
30829: LD_ADDR_OWVAR 21
30833: PUSH
30834: LD_INT 1
30836: ST_TO_ADDR
30837: GO 30882
// if chassis in [ 11 , 12 , 13 , 14 ] then
30839: LD_VAR 0 1
30843: PUSH
30844: LD_INT 11
30846: PUSH
30847: LD_INT 12
30849: PUSH
30850: LD_INT 13
30852: PUSH
30853: LD_INT 14
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: IN
30862: IFFALSE 30874
// uc_nation := nation_arabian else
30864: LD_ADDR_OWVAR 21
30868: PUSH
30869: LD_INT 2
30871: ST_TO_ADDR
30872: GO 30882
// uc_nation := nation_russian ;
30874: LD_ADDR_OWVAR 21
30878: PUSH
30879: LD_INT 3
30881: ST_TO_ADDR
// vc_chassis := chassis ;
30882: LD_ADDR_OWVAR 37
30886: PUSH
30887: LD_VAR 0 1
30891: ST_TO_ADDR
// vc_engine := engine ;
30892: LD_ADDR_OWVAR 39
30896: PUSH
30897: LD_VAR 0 2
30901: ST_TO_ADDR
// vc_control := control ;
30902: LD_ADDR_OWVAR 38
30906: PUSH
30907: LD_VAR 0 3
30911: ST_TO_ADDR
// vc_weapon := weapon ;
30912: LD_ADDR_OWVAR 40
30916: PUSH
30917: LD_VAR 0 4
30921: ST_TO_ADDR
// un := CreateVehicle ;
30922: LD_ADDR_VAR 0 8
30926: PUSH
30927: CALL_OW 45
30931: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30932: LD_VAR 0 8
30936: PPUSH
30937: LD_INT 0
30939: PPUSH
30940: LD_INT 5
30942: PPUSH
30943: CALL_OW 12
30947: PPUSH
30948: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30952: LD_VAR 0 8
30956: PPUSH
30957: LD_VAR 0 5
30961: PPUSH
30962: LD_VAR 0 6
30966: PPUSH
30967: LD_INT 1
30969: PPUSH
30970: CALL_OW 48
// end ;
30974: LD_VAR 0 7
30978: RET
// export hInvincible ; every 1 do
30979: GO 30981
30981: DISABLE
// hInvincible := [ ] ;
30982: LD_ADDR_EXP 95
30986: PUSH
30987: EMPTY
30988: ST_TO_ADDR
30989: END
// every 10 do var i ;
30990: GO 30992
30992: DISABLE
30993: LD_INT 0
30995: PPUSH
// begin enable ;
30996: ENABLE
// if not hInvincible then
30997: LD_EXP 95
31001: NOT
31002: IFFALSE 31006
// exit ;
31004: GO 31050
// for i in hInvincible do
31006: LD_ADDR_VAR 0 1
31010: PUSH
31011: LD_EXP 95
31015: PUSH
31016: FOR_IN
31017: IFFALSE 31048
// if GetLives ( i ) < 1000 then
31019: LD_VAR 0 1
31023: PPUSH
31024: CALL_OW 256
31028: PUSH
31029: LD_INT 1000
31031: LESS
31032: IFFALSE 31046
// SetLives ( i , 1000 ) ;
31034: LD_VAR 0 1
31038: PPUSH
31039: LD_INT 1000
31041: PPUSH
31042: CALL_OW 234
31046: GO 31016
31048: POP
31049: POP
// end ;
31050: PPOPN 1
31052: END
// export function hHackInvincible ; var i ; begin
31053: LD_INT 0
31055: PPUSH
31056: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31057: LD_ADDR_VAR 0 2
31061: PUSH
31062: LD_INT 2
31064: PUSH
31065: LD_INT 21
31067: PUSH
31068: LD_INT 1
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 21
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: LIST
31089: PPUSH
31090: CALL_OW 69
31094: PUSH
31095: FOR_IN
31096: IFFALSE 31157
// if IsSelected ( i ) then
31098: LD_VAR 0 2
31102: PPUSH
31103: CALL_OW 306
31107: IFFALSE 31155
// begin if i in hInvincible then
31109: LD_VAR 0 2
31113: PUSH
31114: LD_EXP 95
31118: IN
31119: IFFALSE 31139
// hInvincible := hInvincible diff i else
31121: LD_ADDR_EXP 95
31125: PUSH
31126: LD_EXP 95
31130: PUSH
31131: LD_VAR 0 2
31135: DIFF
31136: ST_TO_ADDR
31137: GO 31155
// hInvincible := hInvincible union i ;
31139: LD_ADDR_EXP 95
31143: PUSH
31144: LD_EXP 95
31148: PUSH
31149: LD_VAR 0 2
31153: UNION
31154: ST_TO_ADDR
// end ;
31155: GO 31095
31157: POP
31158: POP
// end ;
31159: LD_VAR 0 1
31163: RET
// export function hHackInvisible ; var i , j ; begin
31164: LD_INT 0
31166: PPUSH
31167: PPUSH
31168: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31169: LD_ADDR_VAR 0 2
31173: PUSH
31174: LD_INT 21
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PPUSH
31184: CALL_OW 69
31188: PUSH
31189: FOR_IN
31190: IFFALSE 31214
// if IsSelected ( i ) then
31192: LD_VAR 0 2
31196: PPUSH
31197: CALL_OW 306
31201: IFFALSE 31212
// ComForceInvisible ( i ) ;
31203: LD_VAR 0 2
31207: PPUSH
31208: CALL_OW 496
31212: GO 31189
31214: POP
31215: POP
// end ;
31216: LD_VAR 0 1
31220: RET
// export function hHackChangeYourSide ; begin
31221: LD_INT 0
31223: PPUSH
// if your_side = 8 then
31224: LD_OWVAR 2
31228: PUSH
31229: LD_INT 8
31231: EQUAL
31232: IFFALSE 31244
// your_side := 0 else
31234: LD_ADDR_OWVAR 2
31238: PUSH
31239: LD_INT 0
31241: ST_TO_ADDR
31242: GO 31258
// your_side := your_side + 1 ;
31244: LD_ADDR_OWVAR 2
31248: PUSH
31249: LD_OWVAR 2
31253: PUSH
31254: LD_INT 1
31256: PLUS
31257: ST_TO_ADDR
// end ;
31258: LD_VAR 0 1
31262: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31263: LD_INT 0
31265: PPUSH
31266: PPUSH
31267: PPUSH
// for i in all_units do
31268: LD_ADDR_VAR 0 2
31272: PUSH
31273: LD_OWVAR 3
31277: PUSH
31278: FOR_IN
31279: IFFALSE 31357
// if IsSelected ( i ) then
31281: LD_VAR 0 2
31285: PPUSH
31286: CALL_OW 306
31290: IFFALSE 31355
// begin j := GetSide ( i ) ;
31292: LD_ADDR_VAR 0 3
31296: PUSH
31297: LD_VAR 0 2
31301: PPUSH
31302: CALL_OW 255
31306: ST_TO_ADDR
// if j = 8 then
31307: LD_VAR 0 3
31311: PUSH
31312: LD_INT 8
31314: EQUAL
31315: IFFALSE 31327
// j := 0 else
31317: LD_ADDR_VAR 0 3
31321: PUSH
31322: LD_INT 0
31324: ST_TO_ADDR
31325: GO 31341
// j := j + 1 ;
31327: LD_ADDR_VAR 0 3
31331: PUSH
31332: LD_VAR 0 3
31336: PUSH
31337: LD_INT 1
31339: PLUS
31340: ST_TO_ADDR
// SetSide ( i , j ) ;
31341: LD_VAR 0 2
31345: PPUSH
31346: LD_VAR 0 3
31350: PPUSH
31351: CALL_OW 235
// end ;
31355: GO 31278
31357: POP
31358: POP
// end ;
31359: LD_VAR 0 1
31363: RET
// export function hHackFog ; begin
31364: LD_INT 0
31366: PPUSH
// FogOff ( true ) ;
31367: LD_INT 1
31369: PPUSH
31370: CALL_OW 344
// end ;
31374: LD_VAR 0 1
31378: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31379: LD_INT 0
31381: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31382: LD_VAR 0 1
31386: PPUSH
31387: LD_VAR 0 2
31391: PPUSH
31392: LD_VAR 0 3
31396: PPUSH
31397: LD_INT 1
31399: PPUSH
31400: LD_INT 1
31402: PPUSH
31403: CALL_OW 483
// CenterOnXY ( x , y ) ;
31407: LD_VAR 0 2
31411: PPUSH
31412: LD_VAR 0 3
31416: PPUSH
31417: CALL_OW 84
// end ;
31421: LD_VAR 0 4
31425: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31426: LD_INT 0
31428: PPUSH
31429: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31430: LD_VAR 0 1
31434: NOT
31435: PUSH
31436: LD_VAR 0 2
31440: PPUSH
31441: LD_VAR 0 3
31445: PPUSH
31446: CALL_OW 488
31450: NOT
31451: OR
31452: PUSH
31453: LD_VAR 0 1
31457: PPUSH
31458: CALL_OW 266
31462: PUSH
31463: LD_INT 3
31465: NONEQUAL
31466: PUSH
31467: LD_VAR 0 1
31471: PPUSH
31472: CALL_OW 247
31476: PUSH
31477: LD_INT 1
31479: EQUAL
31480: NOT
31481: AND
31482: OR
31483: IFFALSE 31487
// exit ;
31485: GO 31636
// if GetType ( factory ) = unit_human then
31487: LD_VAR 0 1
31491: PPUSH
31492: CALL_OW 247
31496: PUSH
31497: LD_INT 1
31499: EQUAL
31500: IFFALSE 31517
// factory := IsInUnit ( factory ) ;
31502: LD_ADDR_VAR 0 1
31506: PUSH
31507: LD_VAR 0 1
31511: PPUSH
31512: CALL_OW 310
31516: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31517: LD_VAR 0 1
31521: PPUSH
31522: CALL_OW 266
31526: PUSH
31527: LD_INT 3
31529: NONEQUAL
31530: IFFALSE 31534
// exit ;
31532: GO 31636
// if HexInfo ( x , y ) = factory then
31534: LD_VAR 0 2
31538: PPUSH
31539: LD_VAR 0 3
31543: PPUSH
31544: CALL_OW 428
31548: PUSH
31549: LD_VAR 0 1
31553: EQUAL
31554: IFFALSE 31581
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31556: LD_ADDR_EXP 96
31560: PUSH
31561: LD_EXP 96
31565: PPUSH
31566: LD_VAR 0 1
31570: PPUSH
31571: LD_INT 0
31573: PPUSH
31574: CALL_OW 1
31578: ST_TO_ADDR
31579: GO 31632
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31581: LD_ADDR_EXP 96
31585: PUSH
31586: LD_EXP 96
31590: PPUSH
31591: LD_VAR 0 1
31595: PPUSH
31596: LD_VAR 0 1
31600: PPUSH
31601: CALL_OW 255
31605: PUSH
31606: LD_VAR 0 1
31610: PUSH
31611: LD_VAR 0 2
31615: PUSH
31616: LD_VAR 0 3
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: PPUSH
31627: CALL_OW 1
31631: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31632: CALL 31641 0 0
// end ;
31636: LD_VAR 0 4
31640: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31641: LD_INT 0
31643: PPUSH
31644: PPUSH
31645: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31646: LD_STRING resetFactoryWaypoint();
31648: PPUSH
31649: CALL_OW 559
// if factoryWaypoints then
31653: LD_EXP 96
31657: IFFALSE 31783
// begin list := PrepareArray ( factoryWaypoints ) ;
31659: LD_ADDR_VAR 0 3
31663: PUSH
31664: LD_EXP 96
31668: PPUSH
31669: CALL 79080 0 1
31673: ST_TO_ADDR
// for i := 1 to list do
31674: LD_ADDR_VAR 0 2
31678: PUSH
31679: DOUBLE
31680: LD_INT 1
31682: DEC
31683: ST_TO_ADDR
31684: LD_VAR 0 3
31688: PUSH
31689: FOR_TO
31690: IFFALSE 31781
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31692: LD_STRING setFactoryWaypointXY(
31694: PUSH
31695: LD_VAR 0 3
31699: PUSH
31700: LD_VAR 0 2
31704: ARRAY
31705: PUSH
31706: LD_INT 1
31708: ARRAY
31709: STR
31710: PUSH
31711: LD_STRING ,
31713: STR
31714: PUSH
31715: LD_VAR 0 3
31719: PUSH
31720: LD_VAR 0 2
31724: ARRAY
31725: PUSH
31726: LD_INT 2
31728: ARRAY
31729: STR
31730: PUSH
31731: LD_STRING ,
31733: STR
31734: PUSH
31735: LD_VAR 0 3
31739: PUSH
31740: LD_VAR 0 2
31744: ARRAY
31745: PUSH
31746: LD_INT 3
31748: ARRAY
31749: STR
31750: PUSH
31751: LD_STRING ,
31753: STR
31754: PUSH
31755: LD_VAR 0 3
31759: PUSH
31760: LD_VAR 0 2
31764: ARRAY
31765: PUSH
31766: LD_INT 4
31768: ARRAY
31769: STR
31770: PUSH
31771: LD_STRING )
31773: STR
31774: PPUSH
31775: CALL_OW 559
31779: GO 31689
31781: POP
31782: POP
// end ; end ;
31783: LD_VAR 0 1
31787: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31788: LD_INT 0
31790: PPUSH
// if HexInfo ( x , y ) = warehouse then
31791: LD_VAR 0 2
31795: PPUSH
31796: LD_VAR 0 3
31800: PPUSH
31801: CALL_OW 428
31805: PUSH
31806: LD_VAR 0 1
31810: EQUAL
31811: IFFALSE 31838
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31813: LD_ADDR_EXP 97
31817: PUSH
31818: LD_EXP 97
31822: PPUSH
31823: LD_VAR 0 1
31827: PPUSH
31828: LD_INT 0
31830: PPUSH
31831: CALL_OW 1
31835: ST_TO_ADDR
31836: GO 31889
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31838: LD_ADDR_EXP 97
31842: PUSH
31843: LD_EXP 97
31847: PPUSH
31848: LD_VAR 0 1
31852: PPUSH
31853: LD_VAR 0 1
31857: PPUSH
31858: CALL_OW 255
31862: PUSH
31863: LD_VAR 0 1
31867: PUSH
31868: LD_VAR 0 2
31872: PUSH
31873: LD_VAR 0 3
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: PPUSH
31884: CALL_OW 1
31888: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31889: CALL 31898 0 0
// end ;
31893: LD_VAR 0 4
31897: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31898: LD_INT 0
31900: PPUSH
31901: PPUSH
31902: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31903: LD_STRING resetWarehouseGatheringPoints();
31905: PPUSH
31906: CALL_OW 559
// if warehouseGatheringPoints then
31910: LD_EXP 97
31914: IFFALSE 32040
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31916: LD_ADDR_VAR 0 3
31920: PUSH
31921: LD_EXP 97
31925: PPUSH
31926: CALL 79080 0 1
31930: ST_TO_ADDR
// for i := 1 to list do
31931: LD_ADDR_VAR 0 2
31935: PUSH
31936: DOUBLE
31937: LD_INT 1
31939: DEC
31940: ST_TO_ADDR
31941: LD_VAR 0 3
31945: PUSH
31946: FOR_TO
31947: IFFALSE 32038
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31949: LD_STRING setWarehouseGatheringPointXY(
31951: PUSH
31952: LD_VAR 0 3
31956: PUSH
31957: LD_VAR 0 2
31961: ARRAY
31962: PUSH
31963: LD_INT 1
31965: ARRAY
31966: STR
31967: PUSH
31968: LD_STRING ,
31970: STR
31971: PUSH
31972: LD_VAR 0 3
31976: PUSH
31977: LD_VAR 0 2
31981: ARRAY
31982: PUSH
31983: LD_INT 2
31985: ARRAY
31986: STR
31987: PUSH
31988: LD_STRING ,
31990: STR
31991: PUSH
31992: LD_VAR 0 3
31996: PUSH
31997: LD_VAR 0 2
32001: ARRAY
32002: PUSH
32003: LD_INT 3
32005: ARRAY
32006: STR
32007: PUSH
32008: LD_STRING ,
32010: STR
32011: PUSH
32012: LD_VAR 0 3
32016: PUSH
32017: LD_VAR 0 2
32021: ARRAY
32022: PUSH
32023: LD_INT 4
32025: ARRAY
32026: STR
32027: PUSH
32028: LD_STRING )
32030: STR
32031: PPUSH
32032: CALL_OW 559
32036: GO 31946
32038: POP
32039: POP
// end ; end ;
32040: LD_VAR 0 1
32044: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32045: LD_EXP 97
32049: IFFALSE 32734
32051: GO 32053
32053: DISABLE
32054: LD_INT 0
32056: PPUSH
32057: PPUSH
32058: PPUSH
32059: PPUSH
32060: PPUSH
32061: PPUSH
32062: PPUSH
32063: PPUSH
32064: PPUSH
// begin enable ;
32065: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32066: LD_ADDR_VAR 0 3
32070: PUSH
32071: LD_EXP 97
32075: PPUSH
32076: CALL 79080 0 1
32080: ST_TO_ADDR
// if not list then
32081: LD_VAR 0 3
32085: NOT
32086: IFFALSE 32090
// exit ;
32088: GO 32734
// for i := 1 to list do
32090: LD_ADDR_VAR 0 1
32094: PUSH
32095: DOUBLE
32096: LD_INT 1
32098: DEC
32099: ST_TO_ADDR
32100: LD_VAR 0 3
32104: PUSH
32105: FOR_TO
32106: IFFALSE 32732
// begin depot := list [ i ] [ 2 ] ;
32108: LD_ADDR_VAR 0 8
32112: PUSH
32113: LD_VAR 0 3
32117: PUSH
32118: LD_VAR 0 1
32122: ARRAY
32123: PUSH
32124: LD_INT 2
32126: ARRAY
32127: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32128: LD_ADDR_VAR 0 5
32132: PUSH
32133: LD_VAR 0 3
32137: PUSH
32138: LD_VAR 0 1
32142: ARRAY
32143: PUSH
32144: LD_INT 1
32146: ARRAY
32147: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32148: LD_VAR 0 8
32152: PPUSH
32153: CALL_OW 301
32157: PUSH
32158: LD_VAR 0 5
32162: PUSH
32163: LD_VAR 0 8
32167: PPUSH
32168: CALL_OW 255
32172: NONEQUAL
32173: OR
32174: IFFALSE 32203
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32176: LD_ADDR_EXP 97
32180: PUSH
32181: LD_EXP 97
32185: PPUSH
32186: LD_VAR 0 8
32190: PPUSH
32191: LD_INT 0
32193: PPUSH
32194: CALL_OW 1
32198: ST_TO_ADDR
// exit ;
32199: POP
32200: POP
32201: GO 32734
// end ; x := list [ i ] [ 3 ] ;
32203: LD_ADDR_VAR 0 6
32207: PUSH
32208: LD_VAR 0 3
32212: PUSH
32213: LD_VAR 0 1
32217: ARRAY
32218: PUSH
32219: LD_INT 3
32221: ARRAY
32222: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32223: LD_ADDR_VAR 0 7
32227: PUSH
32228: LD_VAR 0 3
32232: PUSH
32233: LD_VAR 0 1
32237: ARRAY
32238: PUSH
32239: LD_INT 4
32241: ARRAY
32242: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32243: LD_ADDR_VAR 0 9
32247: PUSH
32248: LD_VAR 0 6
32252: PPUSH
32253: LD_VAR 0 7
32257: PPUSH
32258: LD_INT 16
32260: PPUSH
32261: CALL 77668 0 3
32265: ST_TO_ADDR
// if not cratesNearbyPoint then
32266: LD_VAR 0 9
32270: NOT
32271: IFFALSE 32277
// exit ;
32273: POP
32274: POP
32275: GO 32734
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32277: LD_ADDR_VAR 0 4
32281: PUSH
32282: LD_INT 22
32284: PUSH
32285: LD_VAR 0 5
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 3
32296: PUSH
32297: LD_INT 60
32299: PUSH
32300: EMPTY
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 91
32309: PUSH
32310: LD_VAR 0 8
32314: PUSH
32315: LD_INT 6
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: LD_INT 25
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 25
32338: PUSH
32339: LD_INT 16
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: PPUSH
32357: CALL_OW 69
32361: PUSH
32362: LD_VAR 0 8
32366: PPUSH
32367: CALL_OW 313
32371: PPUSH
32372: LD_INT 3
32374: PUSH
32375: LD_INT 60
32377: PUSH
32378: EMPTY
32379: LIST
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 2
32387: PUSH
32388: LD_INT 25
32390: PUSH
32391: LD_INT 2
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 25
32400: PUSH
32401: LD_INT 16
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PPUSH
32417: CALL_OW 72
32421: UNION
32422: ST_TO_ADDR
// if tmp then
32423: LD_VAR 0 4
32427: IFFALSE 32507
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32429: LD_ADDR_VAR 0 4
32433: PUSH
32434: LD_VAR 0 4
32438: PPUSH
32439: LD_INT 3
32441: PPUSH
32442: CALL 75637 0 2
32446: ST_TO_ADDR
// for j in tmp do
32447: LD_ADDR_VAR 0 2
32451: PUSH
32452: LD_VAR 0 4
32456: PUSH
32457: FOR_IN
32458: IFFALSE 32501
// begin if IsInUnit ( j ) then
32460: LD_VAR 0 2
32464: PPUSH
32465: CALL_OW 310
32469: IFFALSE 32480
// ComExit ( j ) ;
32471: LD_VAR 0 2
32475: PPUSH
32476: CALL 75720 0 1
// AddComCollect ( j , x , y ) ;
32480: LD_VAR 0 2
32484: PPUSH
32485: LD_VAR 0 6
32489: PPUSH
32490: LD_VAR 0 7
32494: PPUSH
32495: CALL_OW 177
// end ;
32499: GO 32457
32501: POP
32502: POP
// exit ;
32503: POP
32504: POP
32505: GO 32734
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32507: LD_ADDR_VAR 0 4
32511: PUSH
32512: LD_INT 22
32514: PUSH
32515: LD_VAR 0 5
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 91
32526: PUSH
32527: LD_VAR 0 8
32531: PUSH
32532: LD_INT 8
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: LD_INT 34
32545: PUSH
32546: LD_INT 12
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 34
32555: PUSH
32556: LD_INT 51
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 34
32565: PUSH
32566: LD_INT 32
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 34
32575: PUSH
32576: LD_INT 89
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: PPUSH
32595: CALL_OW 69
32599: ST_TO_ADDR
// if tmp then
32600: LD_VAR 0 4
32604: IFFALSE 32730
// begin for j in tmp do
32606: LD_ADDR_VAR 0 2
32610: PUSH
32611: LD_VAR 0 4
32615: PUSH
32616: FOR_IN
32617: IFFALSE 32728
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32619: LD_VAR 0 2
32623: PPUSH
32624: CALL_OW 262
32628: PUSH
32629: LD_INT 3
32631: EQUAL
32632: PUSH
32633: LD_VAR 0 2
32637: PPUSH
32638: CALL_OW 261
32642: PUSH
32643: LD_INT 20
32645: GREATER
32646: OR
32647: PUSH
32648: LD_VAR 0 2
32652: PPUSH
32653: CALL_OW 314
32657: NOT
32658: AND
32659: PUSH
32660: LD_VAR 0 2
32664: PPUSH
32665: CALL_OW 263
32669: PUSH
32670: LD_INT 1
32672: NONEQUAL
32673: PUSH
32674: LD_VAR 0 2
32678: PPUSH
32679: CALL_OW 311
32683: OR
32684: AND
32685: IFFALSE 32726
// begin ComCollect ( j , x , y ) ;
32687: LD_VAR 0 2
32691: PPUSH
32692: LD_VAR 0 6
32696: PPUSH
32697: LD_VAR 0 7
32701: PPUSH
32702: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32706: LD_VAR 0 2
32710: PPUSH
32711: LD_VAR 0 8
32715: PPUSH
32716: CALL_OW 172
// exit ;
32720: POP
32721: POP
32722: POP
32723: POP
32724: GO 32734
// end ;
32726: GO 32616
32728: POP
32729: POP
// end ; end ;
32730: GO 32105
32732: POP
32733: POP
// end ; end_of_file
32734: PPOPN 9
32736: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32737: LD_INT 0
32739: PPUSH
32740: PPUSH
32741: PPUSH
32742: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32743: LD_VAR 0 1
32747: PPUSH
32748: CALL_OW 264
32752: PUSH
32753: LD_INT 91
32755: EQUAL
32756: IFFALSE 32828
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32758: LD_INT 68
32760: PPUSH
32761: LD_VAR 0 1
32765: PPUSH
32766: CALL_OW 255
32770: PPUSH
32771: CALL_OW 321
32775: PUSH
32776: LD_INT 2
32778: EQUAL
32779: IFFALSE 32791
// eff := 70 else
32781: LD_ADDR_VAR 0 4
32785: PUSH
32786: LD_INT 70
32788: ST_TO_ADDR
32789: GO 32799
// eff := 30 ;
32791: LD_ADDR_VAR 0 4
32795: PUSH
32796: LD_INT 30
32798: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32799: LD_VAR 0 1
32803: PPUSH
32804: CALL_OW 250
32808: PPUSH
32809: LD_VAR 0 1
32813: PPUSH
32814: CALL_OW 251
32818: PPUSH
32819: LD_VAR 0 4
32823: PPUSH
32824: CALL_OW 495
// end ; end ;
32828: LD_VAR 0 2
32832: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32833: LD_INT 0
32835: PPUSH
// end ;
32836: LD_VAR 0 4
32840: RET
// export function SOS_Command ( cmd ) ; begin
32841: LD_INT 0
32843: PPUSH
// end ;
32844: LD_VAR 0 2
32848: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32849: LD_INT 0
32851: PPUSH
// end ;
32852: LD_VAR 0 6
32856: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32857: LD_INT 0
32859: PPUSH
32860: PPUSH
// if not vehicle or not factory then
32861: LD_VAR 0 1
32865: NOT
32866: PUSH
32867: LD_VAR 0 2
32871: NOT
32872: OR
32873: IFFALSE 32877
// exit ;
32875: GO 33108
// if factoryWaypoints >= factory then
32877: LD_EXP 96
32881: PUSH
32882: LD_VAR 0 2
32886: GREATEREQUAL
32887: IFFALSE 33108
// if factoryWaypoints [ factory ] then
32889: LD_EXP 96
32893: PUSH
32894: LD_VAR 0 2
32898: ARRAY
32899: IFFALSE 33108
// begin if GetControl ( vehicle ) = control_manual then
32901: LD_VAR 0 1
32905: PPUSH
32906: CALL_OW 263
32910: PUSH
32911: LD_INT 1
32913: EQUAL
32914: IFFALSE 32995
// begin driver := IsDrivenBy ( vehicle ) ;
32916: LD_ADDR_VAR 0 4
32920: PUSH
32921: LD_VAR 0 1
32925: PPUSH
32926: CALL_OW 311
32930: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32931: LD_VAR 0 4
32935: PPUSH
32936: LD_EXP 96
32940: PUSH
32941: LD_VAR 0 2
32945: ARRAY
32946: PUSH
32947: LD_INT 3
32949: ARRAY
32950: PPUSH
32951: LD_EXP 96
32955: PUSH
32956: LD_VAR 0 2
32960: ARRAY
32961: PUSH
32962: LD_INT 4
32964: ARRAY
32965: PPUSH
32966: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32970: LD_VAR 0 4
32974: PPUSH
32975: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32979: LD_VAR 0 4
32983: PPUSH
32984: LD_VAR 0 2
32988: PPUSH
32989: CALL_OW 180
// end else
32993: GO 33108
// if GetControl ( vehicle ) = control_remote then
32995: LD_VAR 0 1
32999: PPUSH
33000: CALL_OW 263
33004: PUSH
33005: LD_INT 2
33007: EQUAL
33008: IFFALSE 33069
// begin wait ( 0 0$2 ) ;
33010: LD_INT 70
33012: PPUSH
33013: CALL_OW 67
// if Connect ( vehicle ) then
33017: LD_VAR 0 1
33021: PPUSH
33022: CALL 45939 0 1
33026: IFFALSE 33067
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33028: LD_VAR 0 1
33032: PPUSH
33033: LD_EXP 96
33037: PUSH
33038: LD_VAR 0 2
33042: ARRAY
33043: PUSH
33044: LD_INT 3
33046: ARRAY
33047: PPUSH
33048: LD_EXP 96
33052: PUSH
33053: LD_VAR 0 2
33057: ARRAY
33058: PUSH
33059: LD_INT 4
33061: ARRAY
33062: PPUSH
33063: CALL_OW 171
// end else
33067: GO 33108
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33069: LD_VAR 0 1
33073: PPUSH
33074: LD_EXP 96
33078: PUSH
33079: LD_VAR 0 2
33083: ARRAY
33084: PUSH
33085: LD_INT 3
33087: ARRAY
33088: PPUSH
33089: LD_EXP 96
33093: PUSH
33094: LD_VAR 0 2
33098: ARRAY
33099: PUSH
33100: LD_INT 4
33102: ARRAY
33103: PPUSH
33104: CALL_OW 171
// end ; end ;
33108: LD_VAR 0 3
33112: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33113: LD_INT 0
33115: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33116: LD_VAR 0 1
33120: PUSH
33121: LD_INT 250
33123: EQUAL
33124: PUSH
33125: LD_VAR 0 2
33129: PPUSH
33130: CALL_OW 264
33134: PUSH
33135: LD_INT 81
33137: EQUAL
33138: AND
33139: IFFALSE 33160
// MinerPlaceMine ( unit , x , y ) ;
33141: LD_VAR 0 2
33145: PPUSH
33146: LD_VAR 0 4
33150: PPUSH
33151: LD_VAR 0 5
33155: PPUSH
33156: CALL 36150 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33160: LD_VAR 0 1
33164: PUSH
33165: LD_INT 251
33167: EQUAL
33168: PUSH
33169: LD_VAR 0 2
33173: PPUSH
33174: CALL_OW 264
33178: PUSH
33179: LD_INT 81
33181: EQUAL
33182: AND
33183: IFFALSE 33204
// MinerDetonateMine ( unit , x , y ) ;
33185: LD_VAR 0 2
33189: PPUSH
33190: LD_VAR 0 4
33194: PPUSH
33195: LD_VAR 0 5
33199: PPUSH
33200: CALL 36425 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33204: LD_VAR 0 1
33208: PUSH
33209: LD_INT 252
33211: EQUAL
33212: PUSH
33213: LD_VAR 0 2
33217: PPUSH
33218: CALL_OW 264
33222: PUSH
33223: LD_INT 81
33225: EQUAL
33226: AND
33227: IFFALSE 33248
// MinerCreateMinefield ( unit , x , y ) ;
33229: LD_VAR 0 2
33233: PPUSH
33234: LD_VAR 0 4
33238: PPUSH
33239: LD_VAR 0 5
33243: PPUSH
33244: CALL 36842 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33248: LD_VAR 0 1
33252: PUSH
33253: LD_INT 253
33255: EQUAL
33256: PUSH
33257: LD_VAR 0 2
33261: PPUSH
33262: CALL_OW 257
33266: PUSH
33267: LD_INT 5
33269: EQUAL
33270: AND
33271: IFFALSE 33292
// ComBinocular ( unit , x , y ) ;
33273: LD_VAR 0 2
33277: PPUSH
33278: LD_VAR 0 4
33282: PPUSH
33283: LD_VAR 0 5
33287: PPUSH
33288: CALL 37211 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33292: LD_VAR 0 1
33296: PUSH
33297: LD_INT 254
33299: EQUAL
33300: PUSH
33301: LD_VAR 0 2
33305: PPUSH
33306: CALL_OW 264
33310: PUSH
33311: LD_INT 99
33313: EQUAL
33314: AND
33315: PUSH
33316: LD_VAR 0 3
33320: PPUSH
33321: CALL_OW 263
33325: PUSH
33326: LD_INT 3
33328: EQUAL
33329: AND
33330: IFFALSE 33346
// HackDestroyVehicle ( unit , selectedUnit ) ;
33332: LD_VAR 0 2
33336: PPUSH
33337: LD_VAR 0 3
33341: PPUSH
33342: CALL 35514 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33346: LD_VAR 0 1
33350: PUSH
33351: LD_INT 255
33353: EQUAL
33354: PUSH
33355: LD_VAR 0 2
33359: PPUSH
33360: CALL_OW 264
33364: PUSH
33365: LD_INT 14
33367: PUSH
33368: LD_INT 53
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: IN
33375: AND
33376: PUSH
33377: LD_VAR 0 4
33381: PPUSH
33382: LD_VAR 0 5
33386: PPUSH
33387: CALL_OW 488
33391: AND
33392: IFFALSE 33416
// CutTreeXYR ( unit , x , y , 12 ) ;
33394: LD_VAR 0 2
33398: PPUSH
33399: LD_VAR 0 4
33403: PPUSH
33404: LD_VAR 0 5
33408: PPUSH
33409: LD_INT 12
33411: PPUSH
33412: CALL 33511 0 4
// if cmd = 256 then
33416: LD_VAR 0 1
33420: PUSH
33421: LD_INT 256
33423: EQUAL
33424: IFFALSE 33445
// SetFactoryWaypoint ( unit , x , y ) ;
33426: LD_VAR 0 2
33430: PPUSH
33431: LD_VAR 0 4
33435: PPUSH
33436: LD_VAR 0 5
33440: PPUSH
33441: CALL 31426 0 3
// if cmd = 257 then
33445: LD_VAR 0 1
33449: PUSH
33450: LD_INT 257
33452: EQUAL
33453: IFFALSE 33474
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33455: LD_VAR 0 2
33459: PPUSH
33460: LD_VAR 0 4
33464: PPUSH
33465: LD_VAR 0 5
33469: PPUSH
33470: CALL 31788 0 3
// if cmd = 258 then
33474: LD_VAR 0 1
33478: PUSH
33479: LD_INT 258
33481: EQUAL
33482: IFFALSE 33506
// BurnTreeXYR ( unit , x , y , 8 ) ;
33484: LD_VAR 0 2
33488: PPUSH
33489: LD_VAR 0 4
33493: PPUSH
33494: LD_VAR 0 5
33498: PPUSH
33499: LD_INT 8
33501: PPUSH
33502: CALL 33905 0 4
// end ;
33506: LD_VAR 0 6
33510: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33511: LD_INT 0
33513: PPUSH
33514: PPUSH
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
33522: LD_VAR 0 1
33526: PPUSH
33527: CALL_OW 302
33531: NOT
33532: PUSH
33533: LD_VAR 0 2
33537: PPUSH
33538: LD_VAR 0 3
33542: PPUSH
33543: CALL_OW 488
33547: NOT
33548: OR
33549: PUSH
33550: LD_VAR 0 4
33554: NOT
33555: OR
33556: IFFALSE 33560
// exit ;
33558: GO 33900
// list := [ ] ;
33560: LD_ADDR_VAR 0 13
33564: PUSH
33565: EMPTY
33566: ST_TO_ADDR
// if x - r < 0 then
33567: LD_VAR 0 2
33571: PUSH
33572: LD_VAR 0 4
33576: MINUS
33577: PUSH
33578: LD_INT 0
33580: LESS
33581: IFFALSE 33593
// min_x := 0 else
33583: LD_ADDR_VAR 0 7
33587: PUSH
33588: LD_INT 0
33590: ST_TO_ADDR
33591: GO 33609
// min_x := x - r ;
33593: LD_ADDR_VAR 0 7
33597: PUSH
33598: LD_VAR 0 2
33602: PUSH
33603: LD_VAR 0 4
33607: MINUS
33608: ST_TO_ADDR
// if y - r < 0 then
33609: LD_VAR 0 3
33613: PUSH
33614: LD_VAR 0 4
33618: MINUS
33619: PUSH
33620: LD_INT 0
33622: LESS
33623: IFFALSE 33635
// min_y := 0 else
33625: LD_ADDR_VAR 0 8
33629: PUSH
33630: LD_INT 0
33632: ST_TO_ADDR
33633: GO 33651
// min_y := y - r ;
33635: LD_ADDR_VAR 0 8
33639: PUSH
33640: LD_VAR 0 3
33644: PUSH
33645: LD_VAR 0 4
33649: MINUS
33650: ST_TO_ADDR
// max_x := x + r ;
33651: LD_ADDR_VAR 0 9
33655: PUSH
33656: LD_VAR 0 2
33660: PUSH
33661: LD_VAR 0 4
33665: PLUS
33666: ST_TO_ADDR
// max_y := y + r ;
33667: LD_ADDR_VAR 0 10
33671: PUSH
33672: LD_VAR 0 3
33676: PUSH
33677: LD_VAR 0 4
33681: PLUS
33682: ST_TO_ADDR
// for _x = min_x to max_x do
33683: LD_ADDR_VAR 0 11
33687: PUSH
33688: DOUBLE
33689: LD_VAR 0 7
33693: DEC
33694: ST_TO_ADDR
33695: LD_VAR 0 9
33699: PUSH
33700: FOR_TO
33701: IFFALSE 33818
// for _y = min_y to max_y do
33703: LD_ADDR_VAR 0 12
33707: PUSH
33708: DOUBLE
33709: LD_VAR 0 8
33713: DEC
33714: ST_TO_ADDR
33715: LD_VAR 0 10
33719: PUSH
33720: FOR_TO
33721: IFFALSE 33814
// begin if not ValidHex ( _x , _y ) then
33723: LD_VAR 0 11
33727: PPUSH
33728: LD_VAR 0 12
33732: PPUSH
33733: CALL_OW 488
33737: NOT
33738: IFFALSE 33742
// continue ;
33740: GO 33720
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33742: LD_VAR 0 11
33746: PPUSH
33747: LD_VAR 0 12
33751: PPUSH
33752: CALL_OW 351
33756: PUSH
33757: LD_VAR 0 11
33761: PPUSH
33762: LD_VAR 0 12
33766: PPUSH
33767: CALL_OW 554
33771: AND
33772: IFFALSE 33812
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33774: LD_ADDR_VAR 0 13
33778: PUSH
33779: LD_VAR 0 13
33783: PPUSH
33784: LD_VAR 0 13
33788: PUSH
33789: LD_INT 1
33791: PLUS
33792: PPUSH
33793: LD_VAR 0 11
33797: PUSH
33798: LD_VAR 0 12
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PPUSH
33807: CALL_OW 2
33811: ST_TO_ADDR
// end ;
33812: GO 33720
33814: POP
33815: POP
33816: GO 33700
33818: POP
33819: POP
// if not list then
33820: LD_VAR 0 13
33824: NOT
33825: IFFALSE 33829
// exit ;
33827: GO 33900
// for i in list do
33829: LD_ADDR_VAR 0 6
33833: PUSH
33834: LD_VAR 0 13
33838: PUSH
33839: FOR_IN
33840: IFFALSE 33898
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33842: LD_VAR 0 1
33846: PPUSH
33847: LD_STRING M
33849: PUSH
33850: LD_VAR 0 6
33854: PUSH
33855: LD_INT 1
33857: ARRAY
33858: PUSH
33859: LD_VAR 0 6
33863: PUSH
33864: LD_INT 2
33866: ARRAY
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: PUSH
33889: EMPTY
33890: LIST
33891: PPUSH
33892: CALL_OW 447
33896: GO 33839
33898: POP
33899: POP
// end ;
33900: LD_VAR 0 5
33904: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
33905: LD_INT 0
33907: PPUSH
33908: PPUSH
33909: PPUSH
33910: PPUSH
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
33917: LD_VAR 0 1
33921: PPUSH
33922: CALL_OW 302
33926: NOT
33927: PUSH
33928: LD_VAR 0 2
33932: PPUSH
33933: LD_VAR 0 3
33937: PPUSH
33938: CALL_OW 488
33942: NOT
33943: OR
33944: PUSH
33945: LD_VAR 0 4
33949: NOT
33950: OR
33951: IFFALSE 33955
// exit ;
33953: GO 34468
// list := [ ] ;
33955: LD_ADDR_VAR 0 13
33959: PUSH
33960: EMPTY
33961: ST_TO_ADDR
// if x - r < 0 then
33962: LD_VAR 0 2
33966: PUSH
33967: LD_VAR 0 4
33971: MINUS
33972: PUSH
33973: LD_INT 0
33975: LESS
33976: IFFALSE 33988
// min_x := 0 else
33978: LD_ADDR_VAR 0 7
33982: PUSH
33983: LD_INT 0
33985: ST_TO_ADDR
33986: GO 34004
// min_x := x - r ;
33988: LD_ADDR_VAR 0 7
33992: PUSH
33993: LD_VAR 0 2
33997: PUSH
33998: LD_VAR 0 4
34002: MINUS
34003: ST_TO_ADDR
// if y - r < 0 then
34004: LD_VAR 0 3
34008: PUSH
34009: LD_VAR 0 4
34013: MINUS
34014: PUSH
34015: LD_INT 0
34017: LESS
34018: IFFALSE 34030
// min_y := 0 else
34020: LD_ADDR_VAR 0 8
34024: PUSH
34025: LD_INT 0
34027: ST_TO_ADDR
34028: GO 34046
// min_y := y - r ;
34030: LD_ADDR_VAR 0 8
34034: PUSH
34035: LD_VAR 0 3
34039: PUSH
34040: LD_VAR 0 4
34044: MINUS
34045: ST_TO_ADDR
// max_x := x + r ;
34046: LD_ADDR_VAR 0 9
34050: PUSH
34051: LD_VAR 0 2
34055: PUSH
34056: LD_VAR 0 4
34060: PLUS
34061: ST_TO_ADDR
// max_y := y + r ;
34062: LD_ADDR_VAR 0 10
34066: PUSH
34067: LD_VAR 0 3
34071: PUSH
34072: LD_VAR 0 4
34076: PLUS
34077: ST_TO_ADDR
// for _x = min_x to max_x do
34078: LD_ADDR_VAR 0 11
34082: PUSH
34083: DOUBLE
34084: LD_VAR 0 7
34088: DEC
34089: ST_TO_ADDR
34090: LD_VAR 0 9
34094: PUSH
34095: FOR_TO
34096: IFFALSE 34213
// for _y = min_y to max_y do
34098: LD_ADDR_VAR 0 12
34102: PUSH
34103: DOUBLE
34104: LD_VAR 0 8
34108: DEC
34109: ST_TO_ADDR
34110: LD_VAR 0 10
34114: PUSH
34115: FOR_TO
34116: IFFALSE 34209
// begin if not ValidHex ( _x , _y ) then
34118: LD_VAR 0 11
34122: PPUSH
34123: LD_VAR 0 12
34127: PPUSH
34128: CALL_OW 488
34132: NOT
34133: IFFALSE 34137
// continue ;
34135: GO 34115
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34137: LD_VAR 0 11
34141: PPUSH
34142: LD_VAR 0 12
34146: PPUSH
34147: CALL_OW 351
34151: PUSH
34152: LD_VAR 0 11
34156: PPUSH
34157: LD_VAR 0 12
34161: PPUSH
34162: CALL_OW 554
34166: AND
34167: IFFALSE 34207
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34169: LD_ADDR_VAR 0 13
34173: PUSH
34174: LD_VAR 0 13
34178: PPUSH
34179: LD_VAR 0 13
34183: PUSH
34184: LD_INT 1
34186: PLUS
34187: PPUSH
34188: LD_VAR 0 11
34192: PUSH
34193: LD_VAR 0 12
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PPUSH
34202: CALL_OW 2
34206: ST_TO_ADDR
// end ;
34207: GO 34115
34209: POP
34210: POP
34211: GO 34095
34213: POP
34214: POP
// if not list then
34215: LD_VAR 0 13
34219: NOT
34220: IFFALSE 34224
// exit ;
34222: GO 34468
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
34224: LD_ADDR_VAR 0 13
34228: PUSH
34229: LD_VAR 0 1
34233: PPUSH
34234: LD_VAR 0 13
34238: PPUSH
34239: LD_INT 1
34241: PPUSH
34242: LD_INT 1
34244: PPUSH
34245: CALL 43081 0 4
34249: ST_TO_ADDR
// ComStop ( flame ) ;
34250: LD_VAR 0 1
34254: PPUSH
34255: CALL_OW 141
// for i in list do
34259: LD_ADDR_VAR 0 6
34263: PUSH
34264: LD_VAR 0 13
34268: PUSH
34269: FOR_IN
34270: IFFALSE 34301
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
34272: LD_VAR 0 1
34276: PPUSH
34277: LD_VAR 0 6
34281: PUSH
34282: LD_INT 1
34284: ARRAY
34285: PPUSH
34286: LD_VAR 0 6
34290: PUSH
34291: LD_INT 2
34293: ARRAY
34294: PPUSH
34295: CALL_OW 176
34299: GO 34269
34301: POP
34302: POP
// repeat wait ( 0 0$1 ) ;
34303: LD_INT 35
34305: PPUSH
34306: CALL_OW 67
// task := GetTaskList ( flame ) ;
34310: LD_ADDR_VAR 0 14
34314: PUSH
34315: LD_VAR 0 1
34319: PPUSH
34320: CALL_OW 437
34324: ST_TO_ADDR
// if not task then
34325: LD_VAR 0 14
34329: NOT
34330: IFFALSE 34334
// exit ;
34332: GO 34468
// if task [ 1 ] [ 1 ] <> | then
34334: LD_VAR 0 14
34338: PUSH
34339: LD_INT 1
34341: ARRAY
34342: PUSH
34343: LD_INT 1
34345: ARRAY
34346: PUSH
34347: LD_STRING |
34349: NONEQUAL
34350: IFFALSE 34354
// exit ;
34352: GO 34468
// _x := task [ 1 ] [ 2 ] ;
34354: LD_ADDR_VAR 0 11
34358: PUSH
34359: LD_VAR 0 14
34363: PUSH
34364: LD_INT 1
34366: ARRAY
34367: PUSH
34368: LD_INT 2
34370: ARRAY
34371: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
34372: LD_ADDR_VAR 0 12
34376: PUSH
34377: LD_VAR 0 14
34381: PUSH
34382: LD_INT 1
34384: ARRAY
34385: PUSH
34386: LD_INT 3
34388: ARRAY
34389: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
34390: LD_VAR 0 11
34394: PPUSH
34395: LD_VAR 0 12
34399: PPUSH
34400: CALL_OW 351
34404: NOT
34405: PUSH
34406: LD_VAR 0 11
34410: PPUSH
34411: LD_VAR 0 12
34415: PPUSH
34416: CALL_OW 554
34420: NOT
34421: OR
34422: IFFALSE 34456
// begin task := Delete ( task , 1 ) ;
34424: LD_ADDR_VAR 0 14
34428: PUSH
34429: LD_VAR 0 14
34433: PPUSH
34434: LD_INT 1
34436: PPUSH
34437: CALL_OW 3
34441: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
34442: LD_VAR 0 1
34446: PPUSH
34447: LD_VAR 0 14
34451: PPUSH
34452: CALL_OW 446
// end ; until not HasTask ( flame ) ;
34456: LD_VAR 0 1
34460: PPUSH
34461: CALL_OW 314
34465: NOT
34466: IFFALSE 34303
// end ;
34468: LD_VAR 0 5
34472: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34473: LD_EXP 99
34477: NOT
34478: IFFALSE 34528
34480: GO 34482
34482: DISABLE
// begin initHack := true ;
34483: LD_ADDR_EXP 99
34487: PUSH
34488: LD_INT 1
34490: ST_TO_ADDR
// hackTanks := [ ] ;
34491: LD_ADDR_EXP 100
34495: PUSH
34496: EMPTY
34497: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34498: LD_ADDR_EXP 101
34502: PUSH
34503: EMPTY
34504: ST_TO_ADDR
// hackLimit := 3 ;
34505: LD_ADDR_EXP 102
34509: PUSH
34510: LD_INT 3
34512: ST_TO_ADDR
// hackDist := 12 ;
34513: LD_ADDR_EXP 103
34517: PUSH
34518: LD_INT 12
34520: ST_TO_ADDR
// hackCounter := [ ] ;
34521: LD_ADDR_EXP 104
34525: PUSH
34526: EMPTY
34527: ST_TO_ADDR
// end ;
34528: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34529: LD_EXP 99
34533: PUSH
34534: LD_INT 34
34536: PUSH
34537: LD_INT 99
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PPUSH
34544: CALL_OW 69
34548: AND
34549: IFFALSE 34802
34551: GO 34553
34553: DISABLE
34554: LD_INT 0
34556: PPUSH
34557: PPUSH
// begin enable ;
34558: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34559: LD_ADDR_VAR 0 1
34563: PUSH
34564: LD_INT 34
34566: PUSH
34567: LD_INT 99
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PPUSH
34574: CALL_OW 69
34578: PUSH
34579: FOR_IN
34580: IFFALSE 34800
// begin if not i in hackTanks then
34582: LD_VAR 0 1
34586: PUSH
34587: LD_EXP 100
34591: IN
34592: NOT
34593: IFFALSE 34676
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34595: LD_ADDR_EXP 100
34599: PUSH
34600: LD_EXP 100
34604: PPUSH
34605: LD_EXP 100
34609: PUSH
34610: LD_INT 1
34612: PLUS
34613: PPUSH
34614: LD_VAR 0 1
34618: PPUSH
34619: CALL_OW 1
34623: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34624: LD_ADDR_EXP 101
34628: PUSH
34629: LD_EXP 101
34633: PPUSH
34634: LD_EXP 101
34638: PUSH
34639: LD_INT 1
34641: PLUS
34642: PPUSH
34643: EMPTY
34644: PPUSH
34645: CALL_OW 1
34649: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34650: LD_ADDR_EXP 104
34654: PUSH
34655: LD_EXP 104
34659: PPUSH
34660: LD_EXP 104
34664: PUSH
34665: LD_INT 1
34667: PLUS
34668: PPUSH
34669: EMPTY
34670: PPUSH
34671: CALL_OW 1
34675: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34676: LD_VAR 0 1
34680: PPUSH
34681: CALL_OW 302
34685: NOT
34686: IFFALSE 34699
// begin HackUnlinkAll ( i ) ;
34688: LD_VAR 0 1
34692: PPUSH
34693: CALL 34805 0 1
// continue ;
34697: GO 34579
// end ; HackCheckCapturedStatus ( i ) ;
34699: LD_VAR 0 1
34703: PPUSH
34704: CALL 35248 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34708: LD_ADDR_VAR 0 2
34712: PUSH
34713: LD_INT 81
34715: PUSH
34716: LD_VAR 0 1
34720: PPUSH
34721: CALL_OW 255
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 33
34732: PUSH
34733: LD_INT 3
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 91
34742: PUSH
34743: LD_VAR 0 1
34747: PUSH
34748: LD_EXP 103
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 50
34760: PUSH
34761: EMPTY
34762: LIST
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: PPUSH
34770: CALL_OW 69
34774: ST_TO_ADDR
// if not tmp then
34775: LD_VAR 0 2
34779: NOT
34780: IFFALSE 34784
// continue ;
34782: GO 34579
// HackLink ( i , tmp ) ;
34784: LD_VAR 0 1
34788: PPUSH
34789: LD_VAR 0 2
34793: PPUSH
34794: CALL 34941 0 2
// end ;
34798: GO 34579
34800: POP
34801: POP
// end ;
34802: PPOPN 2
34804: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34805: LD_INT 0
34807: PPUSH
34808: PPUSH
34809: PPUSH
// if not hack in hackTanks then
34810: LD_VAR 0 1
34814: PUSH
34815: LD_EXP 100
34819: IN
34820: NOT
34821: IFFALSE 34825
// exit ;
34823: GO 34936
// index := GetElementIndex ( hackTanks , hack ) ;
34825: LD_ADDR_VAR 0 4
34829: PUSH
34830: LD_EXP 100
34834: PPUSH
34835: LD_VAR 0 1
34839: PPUSH
34840: CALL 42378 0 2
34844: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34845: LD_EXP 101
34849: PUSH
34850: LD_VAR 0 4
34854: ARRAY
34855: IFFALSE 34936
// begin for i in hackTanksCaptured [ index ] do
34857: LD_ADDR_VAR 0 3
34861: PUSH
34862: LD_EXP 101
34866: PUSH
34867: LD_VAR 0 4
34871: ARRAY
34872: PUSH
34873: FOR_IN
34874: IFFALSE 34900
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34876: LD_VAR 0 3
34880: PUSH
34881: LD_INT 1
34883: ARRAY
34884: PPUSH
34885: LD_VAR 0 3
34889: PUSH
34890: LD_INT 2
34892: ARRAY
34893: PPUSH
34894: CALL_OW 235
34898: GO 34873
34900: POP
34901: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34902: LD_ADDR_EXP 101
34906: PUSH
34907: LD_EXP 101
34911: PPUSH
34912: LD_VAR 0 4
34916: PPUSH
34917: EMPTY
34918: PPUSH
34919: CALL_OW 1
34923: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34924: LD_VAR 0 1
34928: PPUSH
34929: LD_INT 0
34931: PPUSH
34932: CALL_OW 505
// end ; end ;
34936: LD_VAR 0 2
34940: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34941: LD_INT 0
34943: PPUSH
34944: PPUSH
34945: PPUSH
// if not hack in hackTanks or not vehicles then
34946: LD_VAR 0 1
34950: PUSH
34951: LD_EXP 100
34955: IN
34956: NOT
34957: PUSH
34958: LD_VAR 0 2
34962: NOT
34963: OR
34964: IFFALSE 34968
// exit ;
34966: GO 35243
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34968: LD_ADDR_VAR 0 2
34972: PUSH
34973: LD_VAR 0 1
34977: PPUSH
34978: LD_VAR 0 2
34982: PPUSH
34983: LD_INT 1
34985: PPUSH
34986: LD_INT 1
34988: PPUSH
34989: CALL 43028 0 4
34993: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34994: LD_ADDR_VAR 0 5
34998: PUSH
34999: LD_EXP 100
35003: PPUSH
35004: LD_VAR 0 1
35008: PPUSH
35009: CALL 42378 0 2
35013: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35014: LD_EXP 101
35018: PUSH
35019: LD_VAR 0 5
35023: ARRAY
35024: PUSH
35025: LD_EXP 102
35029: LESS
35030: IFFALSE 35219
// begin for i := 1 to vehicles do
35032: LD_ADDR_VAR 0 4
35036: PUSH
35037: DOUBLE
35038: LD_INT 1
35040: DEC
35041: ST_TO_ADDR
35042: LD_VAR 0 2
35046: PUSH
35047: FOR_TO
35048: IFFALSE 35217
// begin if hackTanksCaptured [ index ] = hackLimit then
35050: LD_EXP 101
35054: PUSH
35055: LD_VAR 0 5
35059: ARRAY
35060: PUSH
35061: LD_EXP 102
35065: EQUAL
35066: IFFALSE 35070
// break ;
35068: GO 35217
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35070: LD_ADDR_EXP 104
35074: PUSH
35075: LD_EXP 104
35079: PPUSH
35080: LD_VAR 0 5
35084: PPUSH
35085: LD_EXP 104
35089: PUSH
35090: LD_VAR 0 5
35094: ARRAY
35095: PUSH
35096: LD_INT 1
35098: PLUS
35099: PPUSH
35100: CALL_OW 1
35104: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35105: LD_ADDR_EXP 101
35109: PUSH
35110: LD_EXP 101
35114: PPUSH
35115: LD_VAR 0 5
35119: PUSH
35120: LD_EXP 101
35124: PUSH
35125: LD_VAR 0 5
35129: ARRAY
35130: PUSH
35131: LD_INT 1
35133: PLUS
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PPUSH
35139: LD_VAR 0 2
35143: PUSH
35144: LD_VAR 0 4
35148: ARRAY
35149: PUSH
35150: LD_VAR 0 2
35154: PUSH
35155: LD_VAR 0 4
35159: ARRAY
35160: PPUSH
35161: CALL_OW 255
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PPUSH
35170: CALL 42593 0 3
35174: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35175: LD_VAR 0 2
35179: PUSH
35180: LD_VAR 0 4
35184: ARRAY
35185: PPUSH
35186: LD_VAR 0 1
35190: PPUSH
35191: CALL_OW 255
35195: PPUSH
35196: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35200: LD_VAR 0 2
35204: PUSH
35205: LD_VAR 0 4
35209: ARRAY
35210: PPUSH
35211: CALL_OW 141
// end ;
35215: GO 35047
35217: POP
35218: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35219: LD_VAR 0 1
35223: PPUSH
35224: LD_EXP 101
35228: PUSH
35229: LD_VAR 0 5
35233: ARRAY
35234: PUSH
35235: LD_INT 0
35237: PLUS
35238: PPUSH
35239: CALL_OW 505
// end ;
35243: LD_VAR 0 3
35247: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35248: LD_INT 0
35250: PPUSH
35251: PPUSH
35252: PPUSH
35253: PPUSH
// if not hack in hackTanks then
35254: LD_VAR 0 1
35258: PUSH
35259: LD_EXP 100
35263: IN
35264: NOT
35265: IFFALSE 35269
// exit ;
35267: GO 35509
// index := GetElementIndex ( hackTanks , hack ) ;
35269: LD_ADDR_VAR 0 4
35273: PUSH
35274: LD_EXP 100
35278: PPUSH
35279: LD_VAR 0 1
35283: PPUSH
35284: CALL 42378 0 2
35288: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35289: LD_ADDR_VAR 0 3
35293: PUSH
35294: DOUBLE
35295: LD_EXP 101
35299: PUSH
35300: LD_VAR 0 4
35304: ARRAY
35305: INC
35306: ST_TO_ADDR
35307: LD_INT 1
35309: PUSH
35310: FOR_DOWNTO
35311: IFFALSE 35483
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35313: LD_ADDR_VAR 0 5
35317: PUSH
35318: LD_EXP 101
35322: PUSH
35323: LD_VAR 0 4
35327: ARRAY
35328: PUSH
35329: LD_VAR 0 3
35333: ARRAY
35334: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35335: LD_VAR 0 5
35339: PUSH
35340: LD_INT 1
35342: ARRAY
35343: PPUSH
35344: CALL_OW 302
35348: NOT
35349: PUSH
35350: LD_VAR 0 5
35354: PUSH
35355: LD_INT 1
35357: ARRAY
35358: PPUSH
35359: CALL_OW 255
35363: PUSH
35364: LD_VAR 0 1
35368: PPUSH
35369: CALL_OW 255
35373: NONEQUAL
35374: OR
35375: IFFALSE 35481
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35377: LD_VAR 0 5
35381: PUSH
35382: LD_INT 1
35384: ARRAY
35385: PPUSH
35386: CALL_OW 305
35390: PUSH
35391: LD_VAR 0 5
35395: PUSH
35396: LD_INT 1
35398: ARRAY
35399: PPUSH
35400: CALL_OW 255
35404: PUSH
35405: LD_VAR 0 1
35409: PPUSH
35410: CALL_OW 255
35414: EQUAL
35415: AND
35416: IFFALSE 35440
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35418: LD_VAR 0 5
35422: PUSH
35423: LD_INT 1
35425: ARRAY
35426: PPUSH
35427: LD_VAR 0 5
35431: PUSH
35432: LD_INT 2
35434: ARRAY
35435: PPUSH
35436: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35440: LD_ADDR_EXP 101
35444: PUSH
35445: LD_EXP 101
35449: PPUSH
35450: LD_VAR 0 4
35454: PPUSH
35455: LD_EXP 101
35459: PUSH
35460: LD_VAR 0 4
35464: ARRAY
35465: PPUSH
35466: LD_VAR 0 3
35470: PPUSH
35471: CALL_OW 3
35475: PPUSH
35476: CALL_OW 1
35480: ST_TO_ADDR
// end ; end ;
35481: GO 35310
35483: POP
35484: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35485: LD_VAR 0 1
35489: PPUSH
35490: LD_EXP 101
35494: PUSH
35495: LD_VAR 0 4
35499: ARRAY
35500: PUSH
35501: LD_INT 0
35503: PLUS
35504: PPUSH
35505: CALL_OW 505
// end ;
35509: LD_VAR 0 2
35513: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35514: LD_INT 0
35516: PPUSH
35517: PPUSH
35518: PPUSH
35519: PPUSH
// if not hack in hackTanks then
35520: LD_VAR 0 1
35524: PUSH
35525: LD_EXP 100
35529: IN
35530: NOT
35531: IFFALSE 35535
// exit ;
35533: GO 35620
// index := GetElementIndex ( hackTanks , hack ) ;
35535: LD_ADDR_VAR 0 5
35539: PUSH
35540: LD_EXP 100
35544: PPUSH
35545: LD_VAR 0 1
35549: PPUSH
35550: CALL 42378 0 2
35554: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35555: LD_ADDR_VAR 0 4
35559: PUSH
35560: DOUBLE
35561: LD_INT 1
35563: DEC
35564: ST_TO_ADDR
35565: LD_EXP 101
35569: PUSH
35570: LD_VAR 0 5
35574: ARRAY
35575: PUSH
35576: FOR_TO
35577: IFFALSE 35618
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35579: LD_EXP 101
35583: PUSH
35584: LD_VAR 0 5
35588: ARRAY
35589: PUSH
35590: LD_VAR 0 4
35594: ARRAY
35595: PUSH
35596: LD_INT 1
35598: ARRAY
35599: PUSH
35600: LD_VAR 0 2
35604: EQUAL
35605: IFFALSE 35616
// KillUnit ( vehicle ) ;
35607: LD_VAR 0 2
35611: PPUSH
35612: CALL_OW 66
35616: GO 35576
35618: POP
35619: POP
// end ;
35620: LD_VAR 0 3
35624: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35625: LD_EXP 105
35629: NOT
35630: IFFALSE 35665
35632: GO 35634
35634: DISABLE
// begin initMiner := true ;
35635: LD_ADDR_EXP 105
35639: PUSH
35640: LD_INT 1
35642: ST_TO_ADDR
// minersList := [ ] ;
35643: LD_ADDR_EXP 106
35647: PUSH
35648: EMPTY
35649: ST_TO_ADDR
// minerMinesList := [ ] ;
35650: LD_ADDR_EXP 107
35654: PUSH
35655: EMPTY
35656: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35657: LD_ADDR_EXP 108
35661: PUSH
35662: LD_INT 5
35664: ST_TO_ADDR
// end ;
35665: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35666: LD_EXP 105
35670: PUSH
35671: LD_INT 34
35673: PUSH
35674: LD_INT 81
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PPUSH
35681: CALL_OW 69
35685: AND
35686: IFFALSE 36147
35688: GO 35690
35690: DISABLE
35691: LD_INT 0
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
// begin enable ;
35697: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35698: LD_ADDR_VAR 0 1
35702: PUSH
35703: LD_INT 34
35705: PUSH
35706: LD_INT 81
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PPUSH
35713: CALL_OW 69
35717: PUSH
35718: FOR_IN
35719: IFFALSE 35791
// begin if not i in minersList then
35721: LD_VAR 0 1
35725: PUSH
35726: LD_EXP 106
35730: IN
35731: NOT
35732: IFFALSE 35789
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35734: LD_ADDR_EXP 106
35738: PUSH
35739: LD_EXP 106
35743: PPUSH
35744: LD_EXP 106
35748: PUSH
35749: LD_INT 1
35751: PLUS
35752: PPUSH
35753: LD_VAR 0 1
35757: PPUSH
35758: CALL_OW 1
35762: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35763: LD_ADDR_EXP 107
35767: PUSH
35768: LD_EXP 107
35772: PPUSH
35773: LD_EXP 107
35777: PUSH
35778: LD_INT 1
35780: PLUS
35781: PPUSH
35782: EMPTY
35783: PPUSH
35784: CALL_OW 1
35788: ST_TO_ADDR
// end end ;
35789: GO 35718
35791: POP
35792: POP
// for i := minerMinesList downto 1 do
35793: LD_ADDR_VAR 0 1
35797: PUSH
35798: DOUBLE
35799: LD_EXP 107
35803: INC
35804: ST_TO_ADDR
35805: LD_INT 1
35807: PUSH
35808: FOR_DOWNTO
35809: IFFALSE 36145
// begin if IsLive ( minersList [ i ] ) then
35811: LD_EXP 106
35815: PUSH
35816: LD_VAR 0 1
35820: ARRAY
35821: PPUSH
35822: CALL_OW 300
35826: IFFALSE 35854
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35828: LD_EXP 106
35832: PUSH
35833: LD_VAR 0 1
35837: ARRAY
35838: PPUSH
35839: LD_EXP 107
35843: PUSH
35844: LD_VAR 0 1
35848: ARRAY
35849: PPUSH
35850: CALL_OW 505
// if not minerMinesList [ i ] then
35854: LD_EXP 107
35858: PUSH
35859: LD_VAR 0 1
35863: ARRAY
35864: NOT
35865: IFFALSE 35869
// continue ;
35867: GO 35808
// for j := minerMinesList [ i ] downto 1 do
35869: LD_ADDR_VAR 0 2
35873: PUSH
35874: DOUBLE
35875: LD_EXP 107
35879: PUSH
35880: LD_VAR 0 1
35884: ARRAY
35885: INC
35886: ST_TO_ADDR
35887: LD_INT 1
35889: PUSH
35890: FOR_DOWNTO
35891: IFFALSE 36141
// begin side := GetSide ( minersList [ i ] ) ;
35893: LD_ADDR_VAR 0 3
35897: PUSH
35898: LD_EXP 106
35902: PUSH
35903: LD_VAR 0 1
35907: ARRAY
35908: PPUSH
35909: CALL_OW 255
35913: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35914: LD_ADDR_VAR 0 4
35918: PUSH
35919: LD_EXP 107
35923: PUSH
35924: LD_VAR 0 1
35928: ARRAY
35929: PUSH
35930: LD_VAR 0 2
35934: ARRAY
35935: PUSH
35936: LD_INT 1
35938: ARRAY
35939: PPUSH
35940: LD_EXP 107
35944: PUSH
35945: LD_VAR 0 1
35949: ARRAY
35950: PUSH
35951: LD_VAR 0 2
35955: ARRAY
35956: PUSH
35957: LD_INT 2
35959: ARRAY
35960: PPUSH
35961: CALL_OW 428
35965: ST_TO_ADDR
// if not tmp then
35966: LD_VAR 0 4
35970: NOT
35971: IFFALSE 35975
// continue ;
35973: GO 35890
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35975: LD_VAR 0 4
35979: PUSH
35980: LD_INT 81
35982: PUSH
35983: LD_VAR 0 3
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PPUSH
35992: CALL_OW 69
35996: IN
35997: PUSH
35998: LD_EXP 107
36002: PUSH
36003: LD_VAR 0 1
36007: ARRAY
36008: PUSH
36009: LD_VAR 0 2
36013: ARRAY
36014: PUSH
36015: LD_INT 1
36017: ARRAY
36018: PPUSH
36019: LD_EXP 107
36023: PUSH
36024: LD_VAR 0 1
36028: ARRAY
36029: PUSH
36030: LD_VAR 0 2
36034: ARRAY
36035: PUSH
36036: LD_INT 2
36038: ARRAY
36039: PPUSH
36040: CALL_OW 458
36044: AND
36045: IFFALSE 36139
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36047: LD_EXP 107
36051: PUSH
36052: LD_VAR 0 1
36056: ARRAY
36057: PUSH
36058: LD_VAR 0 2
36062: ARRAY
36063: PUSH
36064: LD_INT 1
36066: ARRAY
36067: PPUSH
36068: LD_EXP 107
36072: PUSH
36073: LD_VAR 0 1
36077: ARRAY
36078: PUSH
36079: LD_VAR 0 2
36083: ARRAY
36084: PUSH
36085: LD_INT 2
36087: ARRAY
36088: PPUSH
36089: LD_VAR 0 3
36093: PPUSH
36094: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36098: LD_ADDR_EXP 107
36102: PUSH
36103: LD_EXP 107
36107: PPUSH
36108: LD_VAR 0 1
36112: PPUSH
36113: LD_EXP 107
36117: PUSH
36118: LD_VAR 0 1
36122: ARRAY
36123: PPUSH
36124: LD_VAR 0 2
36128: PPUSH
36129: CALL_OW 3
36133: PPUSH
36134: CALL_OW 1
36138: ST_TO_ADDR
// end ; end ;
36139: GO 35890
36141: POP
36142: POP
// end ;
36143: GO 35808
36145: POP
36146: POP
// end ;
36147: PPOPN 4
36149: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36150: LD_INT 0
36152: PPUSH
36153: PPUSH
// result := false ;
36154: LD_ADDR_VAR 0 4
36158: PUSH
36159: LD_INT 0
36161: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36162: LD_VAR 0 1
36166: PPUSH
36167: CALL_OW 264
36171: PUSH
36172: LD_INT 81
36174: EQUAL
36175: NOT
36176: IFFALSE 36180
// exit ;
36178: GO 36420
// index := GetElementIndex ( minersList , unit ) ;
36180: LD_ADDR_VAR 0 5
36184: PUSH
36185: LD_EXP 106
36189: PPUSH
36190: LD_VAR 0 1
36194: PPUSH
36195: CALL 42378 0 2
36199: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36200: LD_EXP 107
36204: PUSH
36205: LD_VAR 0 5
36209: ARRAY
36210: PUSH
36211: LD_EXP 108
36215: GREATEREQUAL
36216: IFFALSE 36220
// exit ;
36218: GO 36420
// ComMoveXY ( unit , x , y ) ;
36220: LD_VAR 0 1
36224: PPUSH
36225: LD_VAR 0 2
36229: PPUSH
36230: LD_VAR 0 3
36234: PPUSH
36235: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36239: LD_INT 35
36241: PPUSH
36242: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36246: LD_VAR 0 1
36250: PPUSH
36251: LD_VAR 0 2
36255: PPUSH
36256: LD_VAR 0 3
36260: PPUSH
36261: CALL 74119 0 3
36265: NOT
36266: PUSH
36267: LD_VAR 0 1
36271: PPUSH
36272: CALL_OW 314
36276: AND
36277: IFFALSE 36281
// exit ;
36279: GO 36420
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36281: LD_VAR 0 2
36285: PPUSH
36286: LD_VAR 0 3
36290: PPUSH
36291: CALL_OW 428
36295: PUSH
36296: LD_VAR 0 1
36300: EQUAL
36301: PUSH
36302: LD_VAR 0 1
36306: PPUSH
36307: CALL_OW 314
36311: NOT
36312: AND
36313: IFFALSE 36239
// PlaySoundXY ( x , y , PlantMine ) ;
36315: LD_VAR 0 2
36319: PPUSH
36320: LD_VAR 0 3
36324: PPUSH
36325: LD_STRING PlantMine
36327: PPUSH
36328: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36332: LD_VAR 0 2
36336: PPUSH
36337: LD_VAR 0 3
36341: PPUSH
36342: LD_VAR 0 1
36346: PPUSH
36347: CALL_OW 255
36351: PPUSH
36352: LD_INT 0
36354: PPUSH
36355: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36359: LD_ADDR_EXP 107
36363: PUSH
36364: LD_EXP 107
36368: PPUSH
36369: LD_VAR 0 5
36373: PUSH
36374: LD_EXP 107
36378: PUSH
36379: LD_VAR 0 5
36383: ARRAY
36384: PUSH
36385: LD_INT 1
36387: PLUS
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PPUSH
36393: LD_VAR 0 2
36397: PUSH
36398: LD_VAR 0 3
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PPUSH
36407: CALL 42593 0 3
36411: ST_TO_ADDR
// result := true ;
36412: LD_ADDR_VAR 0 4
36416: PUSH
36417: LD_INT 1
36419: ST_TO_ADDR
// end ;
36420: LD_VAR 0 4
36424: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36425: LD_INT 0
36427: PPUSH
36428: PPUSH
36429: PPUSH
// if not unit in minersList then
36430: LD_VAR 0 1
36434: PUSH
36435: LD_EXP 106
36439: IN
36440: NOT
36441: IFFALSE 36445
// exit ;
36443: GO 36837
// index := GetElementIndex ( minersList , unit ) ;
36445: LD_ADDR_VAR 0 6
36449: PUSH
36450: LD_EXP 106
36454: PPUSH
36455: LD_VAR 0 1
36459: PPUSH
36460: CALL 42378 0 2
36464: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36465: LD_ADDR_VAR 0 5
36469: PUSH
36470: DOUBLE
36471: LD_EXP 107
36475: PUSH
36476: LD_VAR 0 6
36480: ARRAY
36481: INC
36482: ST_TO_ADDR
36483: LD_INT 1
36485: PUSH
36486: FOR_DOWNTO
36487: IFFALSE 36648
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36489: LD_EXP 107
36493: PUSH
36494: LD_VAR 0 6
36498: ARRAY
36499: PUSH
36500: LD_VAR 0 5
36504: ARRAY
36505: PUSH
36506: LD_INT 1
36508: ARRAY
36509: PUSH
36510: LD_VAR 0 2
36514: EQUAL
36515: PUSH
36516: LD_EXP 107
36520: PUSH
36521: LD_VAR 0 6
36525: ARRAY
36526: PUSH
36527: LD_VAR 0 5
36531: ARRAY
36532: PUSH
36533: LD_INT 2
36535: ARRAY
36536: PUSH
36537: LD_VAR 0 3
36541: EQUAL
36542: AND
36543: IFFALSE 36646
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36545: LD_EXP 107
36549: PUSH
36550: LD_VAR 0 6
36554: ARRAY
36555: PUSH
36556: LD_VAR 0 5
36560: ARRAY
36561: PUSH
36562: LD_INT 1
36564: ARRAY
36565: PPUSH
36566: LD_EXP 107
36570: PUSH
36571: LD_VAR 0 6
36575: ARRAY
36576: PUSH
36577: LD_VAR 0 5
36581: ARRAY
36582: PUSH
36583: LD_INT 2
36585: ARRAY
36586: PPUSH
36587: LD_VAR 0 1
36591: PPUSH
36592: CALL_OW 255
36596: PPUSH
36597: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36601: LD_ADDR_EXP 107
36605: PUSH
36606: LD_EXP 107
36610: PPUSH
36611: LD_VAR 0 6
36615: PPUSH
36616: LD_EXP 107
36620: PUSH
36621: LD_VAR 0 6
36625: ARRAY
36626: PPUSH
36627: LD_VAR 0 5
36631: PPUSH
36632: CALL_OW 3
36636: PPUSH
36637: CALL_OW 1
36641: ST_TO_ADDR
// exit ;
36642: POP
36643: POP
36644: GO 36837
// end ; end ;
36646: GO 36486
36648: POP
36649: POP
// for i := minerMinesList [ index ] downto 1 do
36650: LD_ADDR_VAR 0 5
36654: PUSH
36655: DOUBLE
36656: LD_EXP 107
36660: PUSH
36661: LD_VAR 0 6
36665: ARRAY
36666: INC
36667: ST_TO_ADDR
36668: LD_INT 1
36670: PUSH
36671: FOR_DOWNTO
36672: IFFALSE 36835
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36674: LD_EXP 107
36678: PUSH
36679: LD_VAR 0 6
36683: ARRAY
36684: PUSH
36685: LD_VAR 0 5
36689: ARRAY
36690: PUSH
36691: LD_INT 1
36693: ARRAY
36694: PPUSH
36695: LD_EXP 107
36699: PUSH
36700: LD_VAR 0 6
36704: ARRAY
36705: PUSH
36706: LD_VAR 0 5
36710: ARRAY
36711: PUSH
36712: LD_INT 2
36714: ARRAY
36715: PPUSH
36716: LD_VAR 0 2
36720: PPUSH
36721: LD_VAR 0 3
36725: PPUSH
36726: CALL_OW 298
36730: PUSH
36731: LD_INT 6
36733: LESS
36734: IFFALSE 36833
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36736: LD_EXP 107
36740: PUSH
36741: LD_VAR 0 6
36745: ARRAY
36746: PUSH
36747: LD_VAR 0 5
36751: ARRAY
36752: PUSH
36753: LD_INT 1
36755: ARRAY
36756: PPUSH
36757: LD_EXP 107
36761: PUSH
36762: LD_VAR 0 6
36766: ARRAY
36767: PUSH
36768: LD_VAR 0 5
36772: ARRAY
36773: PUSH
36774: LD_INT 2
36776: ARRAY
36777: PPUSH
36778: LD_VAR 0 1
36782: PPUSH
36783: CALL_OW 255
36787: PPUSH
36788: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36792: LD_ADDR_EXP 107
36796: PUSH
36797: LD_EXP 107
36801: PPUSH
36802: LD_VAR 0 6
36806: PPUSH
36807: LD_EXP 107
36811: PUSH
36812: LD_VAR 0 6
36816: ARRAY
36817: PPUSH
36818: LD_VAR 0 5
36822: PPUSH
36823: CALL_OW 3
36827: PPUSH
36828: CALL_OW 1
36832: ST_TO_ADDR
// end ; end ;
36833: GO 36671
36835: POP
36836: POP
// end ;
36837: LD_VAR 0 4
36841: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36842: LD_INT 0
36844: PPUSH
36845: PPUSH
36846: PPUSH
36847: PPUSH
36848: PPUSH
36849: PPUSH
36850: PPUSH
36851: PPUSH
36852: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36853: LD_VAR 0 1
36857: PPUSH
36858: CALL_OW 264
36862: PUSH
36863: LD_INT 81
36865: EQUAL
36866: NOT
36867: PUSH
36868: LD_VAR 0 1
36872: PUSH
36873: LD_EXP 106
36877: IN
36878: NOT
36879: OR
36880: IFFALSE 36884
// exit ;
36882: GO 37206
// index := GetElementIndex ( minersList , unit ) ;
36884: LD_ADDR_VAR 0 6
36888: PUSH
36889: LD_EXP 106
36893: PPUSH
36894: LD_VAR 0 1
36898: PPUSH
36899: CALL 42378 0 2
36903: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36904: LD_ADDR_VAR 0 8
36908: PUSH
36909: LD_EXP 108
36913: PUSH
36914: LD_EXP 107
36918: PUSH
36919: LD_VAR 0 6
36923: ARRAY
36924: MINUS
36925: ST_TO_ADDR
// if not minesFreeAmount then
36926: LD_VAR 0 8
36930: NOT
36931: IFFALSE 36935
// exit ;
36933: GO 37206
// tmp := [ ] ;
36935: LD_ADDR_VAR 0 7
36939: PUSH
36940: EMPTY
36941: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36942: LD_ADDR_VAR 0 5
36946: PUSH
36947: DOUBLE
36948: LD_INT 1
36950: DEC
36951: ST_TO_ADDR
36952: LD_VAR 0 8
36956: PUSH
36957: FOR_TO
36958: IFFALSE 37153
// begin _d := rand ( 0 , 5 ) ;
36960: LD_ADDR_VAR 0 11
36964: PUSH
36965: LD_INT 0
36967: PPUSH
36968: LD_INT 5
36970: PPUSH
36971: CALL_OW 12
36975: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36976: LD_ADDR_VAR 0 12
36980: PUSH
36981: LD_INT 2
36983: PPUSH
36984: LD_INT 6
36986: PPUSH
36987: CALL_OW 12
36991: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36992: LD_ADDR_VAR 0 9
36996: PUSH
36997: LD_VAR 0 2
37001: PPUSH
37002: LD_VAR 0 11
37006: PPUSH
37007: LD_VAR 0 12
37011: PPUSH
37012: CALL_OW 272
37016: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37017: LD_ADDR_VAR 0 10
37021: PUSH
37022: LD_VAR 0 3
37026: PPUSH
37027: LD_VAR 0 11
37031: PPUSH
37032: LD_VAR 0 12
37036: PPUSH
37037: CALL_OW 273
37041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37042: LD_VAR 0 9
37046: PPUSH
37047: LD_VAR 0 10
37051: PPUSH
37052: CALL_OW 488
37056: PUSH
37057: LD_VAR 0 9
37061: PUSH
37062: LD_VAR 0 10
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_VAR 0 7
37075: IN
37076: NOT
37077: AND
37078: PUSH
37079: LD_VAR 0 9
37083: PPUSH
37084: LD_VAR 0 10
37088: PPUSH
37089: CALL_OW 458
37093: NOT
37094: AND
37095: IFFALSE 37137
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37097: LD_ADDR_VAR 0 7
37101: PUSH
37102: LD_VAR 0 7
37106: PPUSH
37107: LD_VAR 0 7
37111: PUSH
37112: LD_INT 1
37114: PLUS
37115: PPUSH
37116: LD_VAR 0 9
37120: PUSH
37121: LD_VAR 0 10
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PPUSH
37130: CALL_OW 1
37134: ST_TO_ADDR
37135: GO 37151
// i := i - 1 ;
37137: LD_ADDR_VAR 0 5
37141: PUSH
37142: LD_VAR 0 5
37146: PUSH
37147: LD_INT 1
37149: MINUS
37150: ST_TO_ADDR
// end ;
37151: GO 36957
37153: POP
37154: POP
// for i in tmp do
37155: LD_ADDR_VAR 0 5
37159: PUSH
37160: LD_VAR 0 7
37164: PUSH
37165: FOR_IN
37166: IFFALSE 37204
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37168: LD_VAR 0 1
37172: PPUSH
37173: LD_VAR 0 5
37177: PUSH
37178: LD_INT 1
37180: ARRAY
37181: PPUSH
37182: LD_VAR 0 5
37186: PUSH
37187: LD_INT 2
37189: ARRAY
37190: PPUSH
37191: CALL 36150 0 3
37195: NOT
37196: IFFALSE 37202
// exit ;
37198: POP
37199: POP
37200: GO 37206
37202: GO 37165
37204: POP
37205: POP
// end ;
37206: LD_VAR 0 4
37210: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37211: LD_INT 0
37213: PPUSH
37214: PPUSH
37215: PPUSH
37216: PPUSH
37217: PPUSH
37218: PPUSH
37219: PPUSH
// if not GetClass ( unit ) = class_sniper then
37220: LD_VAR 0 1
37224: PPUSH
37225: CALL_OW 257
37229: PUSH
37230: LD_INT 5
37232: EQUAL
37233: NOT
37234: IFFALSE 37238
// exit ;
37236: GO 37626
// dist := 8 ;
37238: LD_ADDR_VAR 0 5
37242: PUSH
37243: LD_INT 8
37245: ST_TO_ADDR
// viewRange := 12 ;
37246: LD_ADDR_VAR 0 7
37250: PUSH
37251: LD_INT 12
37253: ST_TO_ADDR
// side := GetSide ( unit ) ;
37254: LD_ADDR_VAR 0 6
37258: PUSH
37259: LD_VAR 0 1
37263: PPUSH
37264: CALL_OW 255
37268: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37269: LD_INT 61
37271: PPUSH
37272: LD_VAR 0 6
37276: PPUSH
37277: CALL_OW 321
37281: PUSH
37282: LD_INT 2
37284: EQUAL
37285: IFFALSE 37295
// viewRange := 16 ;
37287: LD_ADDR_VAR 0 7
37291: PUSH
37292: LD_INT 16
37294: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37295: LD_VAR 0 1
37299: PPUSH
37300: LD_VAR 0 2
37304: PPUSH
37305: LD_VAR 0 3
37309: PPUSH
37310: CALL_OW 297
37314: PUSH
37315: LD_VAR 0 5
37319: GREATER
37320: IFFALSE 37399
// begin ComMoveXY ( unit , x , y ) ;
37322: LD_VAR 0 1
37326: PPUSH
37327: LD_VAR 0 2
37331: PPUSH
37332: LD_VAR 0 3
37336: PPUSH
37337: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37341: LD_INT 35
37343: PPUSH
37344: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37348: LD_VAR 0 1
37352: PPUSH
37353: LD_VAR 0 2
37357: PPUSH
37358: LD_VAR 0 3
37362: PPUSH
37363: CALL 74119 0 3
37367: NOT
37368: IFFALSE 37372
// exit ;
37370: GO 37626
// until GetDistUnitXY ( unit , x , y ) < dist ;
37372: LD_VAR 0 1
37376: PPUSH
37377: LD_VAR 0 2
37381: PPUSH
37382: LD_VAR 0 3
37386: PPUSH
37387: CALL_OW 297
37391: PUSH
37392: LD_VAR 0 5
37396: LESS
37397: IFFALSE 37341
// end ; ComTurnXY ( unit , x , y ) ;
37399: LD_VAR 0 1
37403: PPUSH
37404: LD_VAR 0 2
37408: PPUSH
37409: LD_VAR 0 3
37413: PPUSH
37414: CALL_OW 118
// wait ( 5 ) ;
37418: LD_INT 5
37420: PPUSH
37421: CALL_OW 67
// _d := GetDir ( unit ) ;
37425: LD_ADDR_VAR 0 10
37429: PUSH
37430: LD_VAR 0 1
37434: PPUSH
37435: CALL_OW 254
37439: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37440: LD_ADDR_VAR 0 8
37444: PUSH
37445: LD_VAR 0 1
37449: PPUSH
37450: CALL_OW 250
37454: PPUSH
37455: LD_VAR 0 10
37459: PPUSH
37460: LD_VAR 0 5
37464: PPUSH
37465: CALL_OW 272
37469: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37470: LD_ADDR_VAR 0 9
37474: PUSH
37475: LD_VAR 0 1
37479: PPUSH
37480: CALL_OW 251
37484: PPUSH
37485: LD_VAR 0 10
37489: PPUSH
37490: LD_VAR 0 5
37494: PPUSH
37495: CALL_OW 273
37499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37500: LD_VAR 0 8
37504: PPUSH
37505: LD_VAR 0 9
37509: PPUSH
37510: CALL_OW 488
37514: NOT
37515: IFFALSE 37519
// exit ;
37517: GO 37626
// ComAnimCustom ( unit , 1 ) ;
37519: LD_VAR 0 1
37523: PPUSH
37524: LD_INT 1
37526: PPUSH
37527: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37531: LD_VAR 0 8
37535: PPUSH
37536: LD_VAR 0 9
37540: PPUSH
37541: LD_VAR 0 6
37545: PPUSH
37546: LD_VAR 0 7
37550: PPUSH
37551: CALL_OW 330
// repeat wait ( 1 ) ;
37555: LD_INT 1
37557: PPUSH
37558: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37562: LD_VAR 0 1
37566: PPUSH
37567: CALL_OW 316
37571: PUSH
37572: LD_VAR 0 1
37576: PPUSH
37577: CALL_OW 314
37581: OR
37582: PUSH
37583: LD_VAR 0 1
37587: PPUSH
37588: CALL_OW 302
37592: NOT
37593: OR
37594: PUSH
37595: LD_VAR 0 1
37599: PPUSH
37600: CALL_OW 301
37604: OR
37605: IFFALSE 37555
// RemoveSeeing ( _x , _y , side ) ;
37607: LD_VAR 0 8
37611: PPUSH
37612: LD_VAR 0 9
37616: PPUSH
37617: LD_VAR 0 6
37621: PPUSH
37622: CALL_OW 331
// end ; end_of_file
37626: LD_VAR 0 4
37630: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37631: LD_INT 0
37633: PPUSH
37634: PPUSH
// if exist_mode then
37635: LD_VAR 0 2
37639: IFFALSE 37664
// unit := CreateCharacter ( prefix & ident ) else
37641: LD_ADDR_VAR 0 5
37645: PUSH
37646: LD_VAR 0 3
37650: PUSH
37651: LD_VAR 0 1
37655: STR
37656: PPUSH
37657: CALL_OW 34
37661: ST_TO_ADDR
37662: GO 37679
// unit := NewCharacter ( ident ) ;
37664: LD_ADDR_VAR 0 5
37668: PUSH
37669: LD_VAR 0 1
37673: PPUSH
37674: CALL_OW 25
37678: ST_TO_ADDR
// result := unit ;
37679: LD_ADDR_VAR 0 4
37683: PUSH
37684: LD_VAR 0 5
37688: ST_TO_ADDR
// end ;
37689: LD_VAR 0 4
37693: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37694: LD_INT 0
37696: PPUSH
37697: PPUSH
// if not side or not nation then
37698: LD_VAR 0 1
37702: NOT
37703: PUSH
37704: LD_VAR 0 2
37708: NOT
37709: OR
37710: IFFALSE 37714
// exit ;
37712: GO 38482
// case nation of nation_american :
37714: LD_VAR 0 2
37718: PUSH
37719: LD_INT 1
37721: DOUBLE
37722: EQUAL
37723: IFTRUE 37727
37725: GO 37941
37727: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37728: LD_ADDR_VAR 0 4
37732: PUSH
37733: LD_INT 35
37735: PUSH
37736: LD_INT 45
37738: PUSH
37739: LD_INT 46
37741: PUSH
37742: LD_INT 47
37744: PUSH
37745: LD_INT 82
37747: PUSH
37748: LD_INT 83
37750: PUSH
37751: LD_INT 84
37753: PUSH
37754: LD_INT 85
37756: PUSH
37757: LD_INT 86
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: LD_INT 6
37768: PUSH
37769: LD_INT 15
37771: PUSH
37772: LD_INT 16
37774: PUSH
37775: LD_INT 7
37777: PUSH
37778: LD_INT 12
37780: PUSH
37781: LD_INT 13
37783: PUSH
37784: LD_INT 10
37786: PUSH
37787: LD_INT 14
37789: PUSH
37790: LD_INT 20
37792: PUSH
37793: LD_INT 21
37795: PUSH
37796: LD_INT 22
37798: PUSH
37799: LD_INT 25
37801: PUSH
37802: LD_INT 32
37804: PUSH
37805: LD_INT 27
37807: PUSH
37808: LD_INT 36
37810: PUSH
37811: LD_INT 69
37813: PUSH
37814: LD_INT 39
37816: PUSH
37817: LD_INT 34
37819: PUSH
37820: LD_INT 40
37822: PUSH
37823: LD_INT 48
37825: PUSH
37826: LD_INT 49
37828: PUSH
37829: LD_INT 50
37831: PUSH
37832: LD_INT 51
37834: PUSH
37835: LD_INT 52
37837: PUSH
37838: LD_INT 53
37840: PUSH
37841: LD_INT 54
37843: PUSH
37844: LD_INT 55
37846: PUSH
37847: LD_INT 56
37849: PUSH
37850: LD_INT 57
37852: PUSH
37853: LD_INT 58
37855: PUSH
37856: LD_INT 59
37858: PUSH
37859: LD_INT 60
37861: PUSH
37862: LD_INT 61
37864: PUSH
37865: LD_INT 62
37867: PUSH
37868: LD_INT 80
37870: PUSH
37871: LD_INT 82
37873: PUSH
37874: LD_INT 83
37876: PUSH
37877: LD_INT 84
37879: PUSH
37880: LD_INT 85
37882: PUSH
37883: LD_INT 86
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: ST_TO_ADDR
37939: GO 38406
37941: LD_INT 2
37943: DOUBLE
37944: EQUAL
37945: IFTRUE 37949
37947: GO 38175
37949: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37950: LD_ADDR_VAR 0 4
37954: PUSH
37955: LD_INT 35
37957: PUSH
37958: LD_INT 45
37960: PUSH
37961: LD_INT 46
37963: PUSH
37964: LD_INT 47
37966: PUSH
37967: LD_INT 82
37969: PUSH
37970: LD_INT 83
37972: PUSH
37973: LD_INT 84
37975: PUSH
37976: LD_INT 85
37978: PUSH
37979: LD_INT 87
37981: PUSH
37982: LD_INT 70
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: LD_INT 11
37990: PUSH
37991: LD_INT 3
37993: PUSH
37994: LD_INT 4
37996: PUSH
37997: LD_INT 5
37999: PUSH
38000: LD_INT 6
38002: PUSH
38003: LD_INT 15
38005: PUSH
38006: LD_INT 18
38008: PUSH
38009: LD_INT 7
38011: PUSH
38012: LD_INT 17
38014: PUSH
38015: LD_INT 8
38017: PUSH
38018: LD_INT 20
38020: PUSH
38021: LD_INT 21
38023: PUSH
38024: LD_INT 22
38026: PUSH
38027: LD_INT 72
38029: PUSH
38030: LD_INT 26
38032: PUSH
38033: LD_INT 69
38035: PUSH
38036: LD_INT 39
38038: PUSH
38039: LD_INT 40
38041: PUSH
38042: LD_INT 41
38044: PUSH
38045: LD_INT 42
38047: PUSH
38048: LD_INT 43
38050: PUSH
38051: LD_INT 48
38053: PUSH
38054: LD_INT 49
38056: PUSH
38057: LD_INT 50
38059: PUSH
38060: LD_INT 51
38062: PUSH
38063: LD_INT 52
38065: PUSH
38066: LD_INT 53
38068: PUSH
38069: LD_INT 54
38071: PUSH
38072: LD_INT 55
38074: PUSH
38075: LD_INT 56
38077: PUSH
38078: LD_INT 60
38080: PUSH
38081: LD_INT 61
38083: PUSH
38084: LD_INT 62
38086: PUSH
38087: LD_INT 66
38089: PUSH
38090: LD_INT 67
38092: PUSH
38093: LD_INT 68
38095: PUSH
38096: LD_INT 81
38098: PUSH
38099: LD_INT 82
38101: PUSH
38102: LD_INT 83
38104: PUSH
38105: LD_INT 84
38107: PUSH
38108: LD_INT 85
38110: PUSH
38111: LD_INT 87
38113: PUSH
38114: LD_INT 88
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: ST_TO_ADDR
38173: GO 38406
38175: LD_INT 3
38177: DOUBLE
38178: EQUAL
38179: IFTRUE 38183
38181: GO 38405
38183: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38184: LD_ADDR_VAR 0 4
38188: PUSH
38189: LD_INT 46
38191: PUSH
38192: LD_INT 47
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: LD_INT 2
38200: PUSH
38201: LD_INT 82
38203: PUSH
38204: LD_INT 83
38206: PUSH
38207: LD_INT 84
38209: PUSH
38210: LD_INT 85
38212: PUSH
38213: LD_INT 86
38215: PUSH
38216: LD_INT 11
38218: PUSH
38219: LD_INT 9
38221: PUSH
38222: LD_INT 20
38224: PUSH
38225: LD_INT 19
38227: PUSH
38228: LD_INT 21
38230: PUSH
38231: LD_INT 24
38233: PUSH
38234: LD_INT 22
38236: PUSH
38237: LD_INT 25
38239: PUSH
38240: LD_INT 28
38242: PUSH
38243: LD_INT 29
38245: PUSH
38246: LD_INT 30
38248: PUSH
38249: LD_INT 31
38251: PUSH
38252: LD_INT 37
38254: PUSH
38255: LD_INT 38
38257: PUSH
38258: LD_INT 32
38260: PUSH
38261: LD_INT 27
38263: PUSH
38264: LD_INT 33
38266: PUSH
38267: LD_INT 69
38269: PUSH
38270: LD_INT 39
38272: PUSH
38273: LD_INT 34
38275: PUSH
38276: LD_INT 40
38278: PUSH
38279: LD_INT 71
38281: PUSH
38282: LD_INT 23
38284: PUSH
38285: LD_INT 44
38287: PUSH
38288: LD_INT 48
38290: PUSH
38291: LD_INT 49
38293: PUSH
38294: LD_INT 50
38296: PUSH
38297: LD_INT 51
38299: PUSH
38300: LD_INT 52
38302: PUSH
38303: LD_INT 53
38305: PUSH
38306: LD_INT 54
38308: PUSH
38309: LD_INT 55
38311: PUSH
38312: LD_INT 56
38314: PUSH
38315: LD_INT 57
38317: PUSH
38318: LD_INT 58
38320: PUSH
38321: LD_INT 59
38323: PUSH
38324: LD_INT 63
38326: PUSH
38327: LD_INT 64
38329: PUSH
38330: LD_INT 65
38332: PUSH
38333: LD_INT 82
38335: PUSH
38336: LD_INT 83
38338: PUSH
38339: LD_INT 84
38341: PUSH
38342: LD_INT 85
38344: PUSH
38345: LD_INT 86
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: ST_TO_ADDR
38403: GO 38406
38405: POP
// if state > - 1 and state < 3 then
38406: LD_VAR 0 3
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: GREATER
38415: PUSH
38416: LD_VAR 0 3
38420: PUSH
38421: LD_INT 3
38423: LESS
38424: AND
38425: IFFALSE 38482
// for i in result do
38427: LD_ADDR_VAR 0 5
38431: PUSH
38432: LD_VAR 0 4
38436: PUSH
38437: FOR_IN
38438: IFFALSE 38480
// if GetTech ( i , side ) <> state then
38440: LD_VAR 0 5
38444: PPUSH
38445: LD_VAR 0 1
38449: PPUSH
38450: CALL_OW 321
38454: PUSH
38455: LD_VAR 0 3
38459: NONEQUAL
38460: IFFALSE 38478
// result := result diff i ;
38462: LD_ADDR_VAR 0 4
38466: PUSH
38467: LD_VAR 0 4
38471: PUSH
38472: LD_VAR 0 5
38476: DIFF
38477: ST_TO_ADDR
38478: GO 38437
38480: POP
38481: POP
// end ;
38482: LD_VAR 0 4
38486: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38487: LD_INT 0
38489: PPUSH
38490: PPUSH
38491: PPUSH
// result := true ;
38492: LD_ADDR_VAR 0 3
38496: PUSH
38497: LD_INT 1
38499: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38500: LD_ADDR_VAR 0 5
38504: PUSH
38505: LD_VAR 0 2
38509: PPUSH
38510: CALL_OW 480
38514: ST_TO_ADDR
// if not tmp then
38515: LD_VAR 0 5
38519: NOT
38520: IFFALSE 38524
// exit ;
38522: GO 38573
// for i in tmp do
38524: LD_ADDR_VAR 0 4
38528: PUSH
38529: LD_VAR 0 5
38533: PUSH
38534: FOR_IN
38535: IFFALSE 38571
// if GetTech ( i , side ) <> state_researched then
38537: LD_VAR 0 4
38541: PPUSH
38542: LD_VAR 0 1
38546: PPUSH
38547: CALL_OW 321
38551: PUSH
38552: LD_INT 2
38554: NONEQUAL
38555: IFFALSE 38569
// begin result := false ;
38557: LD_ADDR_VAR 0 3
38561: PUSH
38562: LD_INT 0
38564: ST_TO_ADDR
// exit ;
38565: POP
38566: POP
38567: GO 38573
// end ;
38569: GO 38534
38571: POP
38572: POP
// end ;
38573: LD_VAR 0 3
38577: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38578: LD_INT 0
38580: PPUSH
38581: PPUSH
38582: PPUSH
38583: PPUSH
38584: PPUSH
38585: PPUSH
38586: PPUSH
38587: PPUSH
38588: PPUSH
38589: PPUSH
38590: PPUSH
38591: PPUSH
38592: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38593: LD_VAR 0 1
38597: NOT
38598: PUSH
38599: LD_VAR 0 1
38603: PPUSH
38604: CALL_OW 257
38608: PUSH
38609: LD_INT 9
38611: NONEQUAL
38612: OR
38613: IFFALSE 38617
// exit ;
38615: GO 39190
// side := GetSide ( unit ) ;
38617: LD_ADDR_VAR 0 9
38621: PUSH
38622: LD_VAR 0 1
38626: PPUSH
38627: CALL_OW 255
38631: ST_TO_ADDR
// tech_space := tech_spacanom ;
38632: LD_ADDR_VAR 0 12
38636: PUSH
38637: LD_INT 29
38639: ST_TO_ADDR
// tech_time := tech_taurad ;
38640: LD_ADDR_VAR 0 13
38644: PUSH
38645: LD_INT 28
38647: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38648: LD_ADDR_VAR 0 11
38652: PUSH
38653: LD_VAR 0 1
38657: PPUSH
38658: CALL_OW 310
38662: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38663: LD_VAR 0 11
38667: PPUSH
38668: CALL_OW 247
38672: PUSH
38673: LD_INT 2
38675: EQUAL
38676: IFFALSE 38680
// exit ;
38678: GO 39190
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38680: LD_ADDR_VAR 0 8
38684: PUSH
38685: LD_INT 81
38687: PUSH
38688: LD_VAR 0 9
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 3
38699: PUSH
38700: LD_INT 21
38702: PUSH
38703: LD_INT 3
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PPUSH
38718: CALL_OW 69
38722: ST_TO_ADDR
// if not tmp then
38723: LD_VAR 0 8
38727: NOT
38728: IFFALSE 38732
// exit ;
38730: GO 39190
// if in_unit then
38732: LD_VAR 0 11
38736: IFFALSE 38760
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38738: LD_ADDR_VAR 0 10
38742: PUSH
38743: LD_VAR 0 8
38747: PPUSH
38748: LD_VAR 0 11
38752: PPUSH
38753: CALL_OW 74
38757: ST_TO_ADDR
38758: GO 38780
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38760: LD_ADDR_VAR 0 10
38764: PUSH
38765: LD_VAR 0 8
38769: PPUSH
38770: LD_VAR 0 1
38774: PPUSH
38775: CALL_OW 74
38779: ST_TO_ADDR
// if not enemy then
38780: LD_VAR 0 10
38784: NOT
38785: IFFALSE 38789
// exit ;
38787: GO 39190
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38789: LD_VAR 0 11
38793: PUSH
38794: LD_VAR 0 11
38798: PPUSH
38799: LD_VAR 0 10
38803: PPUSH
38804: CALL_OW 296
38808: PUSH
38809: LD_INT 13
38811: GREATER
38812: AND
38813: PUSH
38814: LD_VAR 0 1
38818: PPUSH
38819: LD_VAR 0 10
38823: PPUSH
38824: CALL_OW 296
38828: PUSH
38829: LD_INT 12
38831: GREATER
38832: OR
38833: IFFALSE 38837
// exit ;
38835: GO 39190
// missile := [ 1 ] ;
38837: LD_ADDR_VAR 0 14
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: EMPTY
38846: LIST
38847: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38848: LD_VAR 0 9
38852: PPUSH
38853: LD_VAR 0 12
38857: PPUSH
38858: CALL_OW 325
38862: IFFALSE 38891
// missile := Replace ( missile , missile + 1 , 2 ) ;
38864: LD_ADDR_VAR 0 14
38868: PUSH
38869: LD_VAR 0 14
38873: PPUSH
38874: LD_VAR 0 14
38878: PUSH
38879: LD_INT 1
38881: PLUS
38882: PPUSH
38883: LD_INT 2
38885: PPUSH
38886: CALL_OW 1
38890: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38891: LD_VAR 0 9
38895: PPUSH
38896: LD_VAR 0 13
38900: PPUSH
38901: CALL_OW 325
38905: PUSH
38906: LD_VAR 0 10
38910: PPUSH
38911: CALL_OW 255
38915: PPUSH
38916: LD_VAR 0 13
38920: PPUSH
38921: CALL_OW 325
38925: NOT
38926: AND
38927: IFFALSE 38956
// missile := Replace ( missile , missile + 1 , 3 ) ;
38929: LD_ADDR_VAR 0 14
38933: PUSH
38934: LD_VAR 0 14
38938: PPUSH
38939: LD_VAR 0 14
38943: PUSH
38944: LD_INT 1
38946: PLUS
38947: PPUSH
38948: LD_INT 3
38950: PPUSH
38951: CALL_OW 1
38955: ST_TO_ADDR
// if missile < 2 then
38956: LD_VAR 0 14
38960: PUSH
38961: LD_INT 2
38963: LESS
38964: IFFALSE 38968
// exit ;
38966: GO 39190
// x := GetX ( enemy ) ;
38968: LD_ADDR_VAR 0 4
38972: PUSH
38973: LD_VAR 0 10
38977: PPUSH
38978: CALL_OW 250
38982: ST_TO_ADDR
// y := GetY ( enemy ) ;
38983: LD_ADDR_VAR 0 5
38987: PUSH
38988: LD_VAR 0 10
38992: PPUSH
38993: CALL_OW 251
38997: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38998: LD_ADDR_VAR 0 6
39002: PUSH
39003: LD_VAR 0 4
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PPUSH
39012: LD_INT 1
39014: PPUSH
39015: CALL_OW 12
39019: PLUS
39020: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39021: LD_ADDR_VAR 0 7
39025: PUSH
39026: LD_VAR 0 5
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PPUSH
39035: LD_INT 1
39037: PPUSH
39038: CALL_OW 12
39042: PLUS
39043: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39044: LD_VAR 0 6
39048: PPUSH
39049: LD_VAR 0 7
39053: PPUSH
39054: CALL_OW 488
39058: NOT
39059: IFFALSE 39081
// begin _x := x ;
39061: LD_ADDR_VAR 0 6
39065: PUSH
39066: LD_VAR 0 4
39070: ST_TO_ADDR
// _y := y ;
39071: LD_ADDR_VAR 0 7
39075: PUSH
39076: LD_VAR 0 5
39080: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39081: LD_ADDR_VAR 0 3
39085: PUSH
39086: LD_INT 1
39088: PPUSH
39089: LD_VAR 0 14
39093: PPUSH
39094: CALL_OW 12
39098: ST_TO_ADDR
// case i of 1 :
39099: LD_VAR 0 3
39103: PUSH
39104: LD_INT 1
39106: DOUBLE
39107: EQUAL
39108: IFTRUE 39112
39110: GO 39129
39112: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39113: LD_VAR 0 1
39117: PPUSH
39118: LD_VAR 0 10
39122: PPUSH
39123: CALL_OW 115
39127: GO 39190
39129: LD_INT 2
39131: DOUBLE
39132: EQUAL
39133: IFTRUE 39137
39135: GO 39159
39137: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39138: LD_VAR 0 1
39142: PPUSH
39143: LD_VAR 0 6
39147: PPUSH
39148: LD_VAR 0 7
39152: PPUSH
39153: CALL_OW 153
39157: GO 39190
39159: LD_INT 3
39161: DOUBLE
39162: EQUAL
39163: IFTRUE 39167
39165: GO 39189
39167: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39168: LD_VAR 0 1
39172: PPUSH
39173: LD_VAR 0 6
39177: PPUSH
39178: LD_VAR 0 7
39182: PPUSH
39183: CALL_OW 154
39187: GO 39190
39189: POP
// end ;
39190: LD_VAR 0 2
39194: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39195: LD_INT 0
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
39201: PPUSH
39202: PPUSH
// if not unit or not building then
39203: LD_VAR 0 1
39207: NOT
39208: PUSH
39209: LD_VAR 0 2
39213: NOT
39214: OR
39215: IFFALSE 39219
// exit ;
39217: GO 39377
// x := GetX ( building ) ;
39219: LD_ADDR_VAR 0 5
39223: PUSH
39224: LD_VAR 0 2
39228: PPUSH
39229: CALL_OW 250
39233: ST_TO_ADDR
// y := GetY ( building ) ;
39234: LD_ADDR_VAR 0 6
39238: PUSH
39239: LD_VAR 0 2
39243: PPUSH
39244: CALL_OW 251
39248: ST_TO_ADDR
// for i = 0 to 5 do
39249: LD_ADDR_VAR 0 4
39253: PUSH
39254: DOUBLE
39255: LD_INT 0
39257: DEC
39258: ST_TO_ADDR
39259: LD_INT 5
39261: PUSH
39262: FOR_TO
39263: IFFALSE 39375
// begin _x := ShiftX ( x , i , 3 ) ;
39265: LD_ADDR_VAR 0 7
39269: PUSH
39270: LD_VAR 0 5
39274: PPUSH
39275: LD_VAR 0 4
39279: PPUSH
39280: LD_INT 3
39282: PPUSH
39283: CALL_OW 272
39287: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39288: LD_ADDR_VAR 0 8
39292: PUSH
39293: LD_VAR 0 6
39297: PPUSH
39298: LD_VAR 0 4
39302: PPUSH
39303: LD_INT 3
39305: PPUSH
39306: CALL_OW 273
39310: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39311: LD_VAR 0 7
39315: PPUSH
39316: LD_VAR 0 8
39320: PPUSH
39321: CALL_OW 488
39325: NOT
39326: IFFALSE 39330
// continue ;
39328: GO 39262
// if HexInfo ( _x , _y ) = 0 then
39330: LD_VAR 0 7
39334: PPUSH
39335: LD_VAR 0 8
39339: PPUSH
39340: CALL_OW 428
39344: PUSH
39345: LD_INT 0
39347: EQUAL
39348: IFFALSE 39373
// begin ComMoveXY ( unit , _x , _y ) ;
39350: LD_VAR 0 1
39354: PPUSH
39355: LD_VAR 0 7
39359: PPUSH
39360: LD_VAR 0 8
39364: PPUSH
39365: CALL_OW 111
// exit ;
39369: POP
39370: POP
39371: GO 39377
// end ; end ;
39373: GO 39262
39375: POP
39376: POP
// end ;
39377: LD_VAR 0 3
39381: RET
// export function ScanBase ( side , base_area ) ; begin
39382: LD_INT 0
39384: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39385: LD_ADDR_VAR 0 3
39389: PUSH
39390: LD_VAR 0 2
39394: PPUSH
39395: LD_INT 81
39397: PUSH
39398: LD_VAR 0 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PPUSH
39407: CALL_OW 70
39411: ST_TO_ADDR
// end ;
39412: LD_VAR 0 3
39416: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39417: LD_INT 0
39419: PPUSH
39420: PPUSH
39421: PPUSH
39422: PPUSH
// result := false ;
39423: LD_ADDR_VAR 0 2
39427: PUSH
39428: LD_INT 0
39430: ST_TO_ADDR
// side := GetSide ( unit ) ;
39431: LD_ADDR_VAR 0 3
39435: PUSH
39436: LD_VAR 0 1
39440: PPUSH
39441: CALL_OW 255
39445: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39446: LD_ADDR_VAR 0 4
39450: PUSH
39451: LD_VAR 0 1
39455: PPUSH
39456: CALL_OW 248
39460: ST_TO_ADDR
// case nat of 1 :
39461: LD_VAR 0 4
39465: PUSH
39466: LD_INT 1
39468: DOUBLE
39469: EQUAL
39470: IFTRUE 39474
39472: GO 39485
39474: POP
// tech := tech_lassight ; 2 :
39475: LD_ADDR_VAR 0 5
39479: PUSH
39480: LD_INT 12
39482: ST_TO_ADDR
39483: GO 39524
39485: LD_INT 2
39487: DOUBLE
39488: EQUAL
39489: IFTRUE 39493
39491: GO 39504
39493: POP
// tech := tech_mortar ; 3 :
39494: LD_ADDR_VAR 0 5
39498: PUSH
39499: LD_INT 41
39501: ST_TO_ADDR
39502: GO 39524
39504: LD_INT 3
39506: DOUBLE
39507: EQUAL
39508: IFTRUE 39512
39510: GO 39523
39512: POP
// tech := tech_bazooka ; end ;
39513: LD_ADDR_VAR 0 5
39517: PUSH
39518: LD_INT 44
39520: ST_TO_ADDR
39521: GO 39524
39523: POP
// if Researched ( side , tech ) then
39524: LD_VAR 0 3
39528: PPUSH
39529: LD_VAR 0 5
39533: PPUSH
39534: CALL_OW 325
39538: IFFALSE 39565
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39540: LD_ADDR_VAR 0 2
39544: PUSH
39545: LD_INT 5
39547: PUSH
39548: LD_INT 8
39550: PUSH
39551: LD_INT 9
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: LIST
39558: PUSH
39559: LD_VAR 0 4
39563: ARRAY
39564: ST_TO_ADDR
// end ;
39565: LD_VAR 0 2
39569: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39570: LD_INT 0
39572: PPUSH
39573: PPUSH
39574: PPUSH
// if not mines then
39575: LD_VAR 0 2
39579: NOT
39580: IFFALSE 39584
// exit ;
39582: GO 39728
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39584: LD_ADDR_VAR 0 5
39588: PUSH
39589: LD_INT 81
39591: PUSH
39592: LD_VAR 0 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 3
39603: PUSH
39604: LD_INT 21
39606: PUSH
39607: LD_INT 3
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PPUSH
39622: CALL_OW 69
39626: ST_TO_ADDR
// for i in mines do
39627: LD_ADDR_VAR 0 4
39631: PUSH
39632: LD_VAR 0 2
39636: PUSH
39637: FOR_IN
39638: IFFALSE 39726
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39640: LD_VAR 0 4
39644: PUSH
39645: LD_INT 1
39647: ARRAY
39648: PPUSH
39649: LD_VAR 0 4
39653: PUSH
39654: LD_INT 2
39656: ARRAY
39657: PPUSH
39658: CALL_OW 458
39662: NOT
39663: IFFALSE 39667
// continue ;
39665: GO 39637
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39667: LD_VAR 0 4
39671: PUSH
39672: LD_INT 1
39674: ARRAY
39675: PPUSH
39676: LD_VAR 0 4
39680: PUSH
39681: LD_INT 2
39683: ARRAY
39684: PPUSH
39685: CALL_OW 428
39689: PUSH
39690: LD_VAR 0 5
39694: IN
39695: IFFALSE 39724
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39697: LD_VAR 0 4
39701: PUSH
39702: LD_INT 1
39704: ARRAY
39705: PPUSH
39706: LD_VAR 0 4
39710: PUSH
39711: LD_INT 2
39713: ARRAY
39714: PPUSH
39715: LD_VAR 0 1
39719: PPUSH
39720: CALL_OW 456
// end ;
39724: GO 39637
39726: POP
39727: POP
// end ;
39728: LD_VAR 0 3
39732: RET
// export function Count ( array ) ; begin
39733: LD_INT 0
39735: PPUSH
// result := array + 0 ;
39736: LD_ADDR_VAR 0 2
39740: PUSH
39741: LD_VAR 0 1
39745: PUSH
39746: LD_INT 0
39748: PLUS
39749: ST_TO_ADDR
// end ;
39750: LD_VAR 0 2
39754: RET
// export function IsEmpty ( building ) ; begin
39755: LD_INT 0
39757: PPUSH
// if not building then
39758: LD_VAR 0 1
39762: NOT
39763: IFFALSE 39767
// exit ;
39765: GO 39810
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39767: LD_ADDR_VAR 0 2
39771: PUSH
39772: LD_VAR 0 1
39776: PUSH
39777: LD_INT 22
39779: PUSH
39780: LD_VAR 0 1
39784: PPUSH
39785: CALL_OW 255
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 58
39796: PUSH
39797: EMPTY
39798: LIST
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PPUSH
39804: CALL_OW 69
39808: IN
39809: ST_TO_ADDR
// end ;
39810: LD_VAR 0 2
39814: RET
// export function IsNotFull ( building ) ; var places ; begin
39815: LD_INT 0
39817: PPUSH
39818: PPUSH
// if not building then
39819: LD_VAR 0 1
39823: NOT
39824: IFFALSE 39828
// exit ;
39826: GO 39856
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
39828: LD_ADDR_VAR 0 2
39832: PUSH
39833: LD_VAR 0 1
39837: PPUSH
39838: LD_INT 3
39840: PUSH
39841: LD_INT 62
39843: PUSH
39844: EMPTY
39845: LIST
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PPUSH
39851: CALL_OW 72
39855: ST_TO_ADDR
// end ;
39856: LD_VAR 0 2
39860: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39861: LD_INT 0
39863: PPUSH
39864: PPUSH
39865: PPUSH
39866: PPUSH
// tmp := [ ] ;
39867: LD_ADDR_VAR 0 3
39871: PUSH
39872: EMPTY
39873: ST_TO_ADDR
// list := [ ] ;
39874: LD_ADDR_VAR 0 5
39878: PUSH
39879: EMPTY
39880: ST_TO_ADDR
// for i = 16 to 25 do
39881: LD_ADDR_VAR 0 4
39885: PUSH
39886: DOUBLE
39887: LD_INT 16
39889: DEC
39890: ST_TO_ADDR
39891: LD_INT 25
39893: PUSH
39894: FOR_TO
39895: IFFALSE 39968
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39897: LD_ADDR_VAR 0 3
39901: PUSH
39902: LD_VAR 0 3
39906: PUSH
39907: LD_INT 22
39909: PUSH
39910: LD_VAR 0 1
39914: PPUSH
39915: CALL_OW 255
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 91
39926: PUSH
39927: LD_VAR 0 1
39931: PUSH
39932: LD_INT 6
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 30
39942: PUSH
39943: LD_VAR 0 4
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: LIST
39956: PUSH
39957: EMPTY
39958: LIST
39959: PPUSH
39960: CALL_OW 69
39964: ADD
39965: ST_TO_ADDR
39966: GO 39894
39968: POP
39969: POP
// for i = 1 to tmp do
39970: LD_ADDR_VAR 0 4
39974: PUSH
39975: DOUBLE
39976: LD_INT 1
39978: DEC
39979: ST_TO_ADDR
39980: LD_VAR 0 3
39984: PUSH
39985: FOR_TO
39986: IFFALSE 40074
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39988: LD_ADDR_VAR 0 5
39992: PUSH
39993: LD_VAR 0 5
39997: PUSH
39998: LD_VAR 0 3
40002: PUSH
40003: LD_VAR 0 4
40007: ARRAY
40008: PPUSH
40009: CALL_OW 266
40013: PUSH
40014: LD_VAR 0 3
40018: PUSH
40019: LD_VAR 0 4
40023: ARRAY
40024: PPUSH
40025: CALL_OW 250
40029: PUSH
40030: LD_VAR 0 3
40034: PUSH
40035: LD_VAR 0 4
40039: ARRAY
40040: PPUSH
40041: CALL_OW 251
40045: PUSH
40046: LD_VAR 0 3
40050: PUSH
40051: LD_VAR 0 4
40055: ARRAY
40056: PPUSH
40057: CALL_OW 254
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: PUSH
40068: EMPTY
40069: LIST
40070: ADD
40071: ST_TO_ADDR
40072: GO 39985
40074: POP
40075: POP
// result := list ;
40076: LD_ADDR_VAR 0 2
40080: PUSH
40081: LD_VAR 0 5
40085: ST_TO_ADDR
// end ;
40086: LD_VAR 0 2
40090: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40091: LD_INT 0
40093: PPUSH
40094: PPUSH
40095: PPUSH
40096: PPUSH
40097: PPUSH
40098: PPUSH
40099: PPUSH
// if not factory then
40100: LD_VAR 0 1
40104: NOT
40105: IFFALSE 40109
// exit ;
40107: GO 40702
// if control = control_apeman then
40109: LD_VAR 0 4
40113: PUSH
40114: LD_INT 5
40116: EQUAL
40117: IFFALSE 40226
// begin tmp := UnitsInside ( factory ) ;
40119: LD_ADDR_VAR 0 8
40123: PUSH
40124: LD_VAR 0 1
40128: PPUSH
40129: CALL_OW 313
40133: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40134: LD_VAR 0 8
40138: PPUSH
40139: LD_INT 25
40141: PUSH
40142: LD_INT 12
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PPUSH
40149: CALL_OW 72
40153: NOT
40154: IFFALSE 40164
// control := control_manual ;
40156: LD_ADDR_VAR 0 4
40160: PUSH
40161: LD_INT 1
40163: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40164: LD_ADDR_VAR 0 8
40168: PUSH
40169: LD_VAR 0 1
40173: PPUSH
40174: CALL 39861 0 1
40178: ST_TO_ADDR
// if tmp then
40179: LD_VAR 0 8
40183: IFFALSE 40226
// begin for i in tmp do
40185: LD_ADDR_VAR 0 7
40189: PUSH
40190: LD_VAR 0 8
40194: PUSH
40195: FOR_IN
40196: IFFALSE 40224
// if i [ 1 ] = b_ext_radio then
40198: LD_VAR 0 7
40202: PUSH
40203: LD_INT 1
40205: ARRAY
40206: PUSH
40207: LD_INT 22
40209: EQUAL
40210: IFFALSE 40222
// begin control := control_remote ;
40212: LD_ADDR_VAR 0 4
40216: PUSH
40217: LD_INT 2
40219: ST_TO_ADDR
// break ;
40220: GO 40224
// end ;
40222: GO 40195
40224: POP
40225: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40226: LD_VAR 0 1
40230: PPUSH
40231: LD_VAR 0 2
40235: PPUSH
40236: LD_VAR 0 3
40240: PPUSH
40241: LD_VAR 0 4
40245: PPUSH
40246: LD_VAR 0 5
40250: PPUSH
40251: CALL_OW 448
40255: IFFALSE 40290
// begin result := [ chassis , engine , control , weapon ] ;
40257: LD_ADDR_VAR 0 6
40261: PUSH
40262: LD_VAR 0 2
40266: PUSH
40267: LD_VAR 0 3
40271: PUSH
40272: LD_VAR 0 4
40276: PUSH
40277: LD_VAR 0 5
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: ST_TO_ADDR
// exit ;
40288: GO 40702
// end ; _chassis := AvailableChassisList ( factory ) ;
40290: LD_ADDR_VAR 0 9
40294: PUSH
40295: LD_VAR 0 1
40299: PPUSH
40300: CALL_OW 475
40304: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40305: LD_ADDR_VAR 0 11
40309: PUSH
40310: LD_VAR 0 1
40314: PPUSH
40315: CALL_OW 476
40319: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40320: LD_ADDR_VAR 0 12
40324: PUSH
40325: LD_VAR 0 1
40329: PPUSH
40330: CALL_OW 477
40334: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40335: LD_ADDR_VAR 0 10
40339: PUSH
40340: LD_VAR 0 1
40344: PPUSH
40345: CALL_OW 478
40349: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40350: LD_VAR 0 9
40354: NOT
40355: PUSH
40356: LD_VAR 0 11
40360: NOT
40361: OR
40362: PUSH
40363: LD_VAR 0 12
40367: NOT
40368: OR
40369: PUSH
40370: LD_VAR 0 10
40374: NOT
40375: OR
40376: IFFALSE 40411
// begin result := [ chassis , engine , control , weapon ] ;
40378: LD_ADDR_VAR 0 6
40382: PUSH
40383: LD_VAR 0 2
40387: PUSH
40388: LD_VAR 0 3
40392: PUSH
40393: LD_VAR 0 4
40397: PUSH
40398: LD_VAR 0 5
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: ST_TO_ADDR
// exit ;
40409: GO 40702
// end ; if not chassis in _chassis then
40411: LD_VAR 0 2
40415: PUSH
40416: LD_VAR 0 9
40420: IN
40421: NOT
40422: IFFALSE 40448
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40424: LD_ADDR_VAR 0 2
40428: PUSH
40429: LD_VAR 0 9
40433: PUSH
40434: LD_INT 1
40436: PPUSH
40437: LD_VAR 0 9
40441: PPUSH
40442: CALL_OW 12
40446: ARRAY
40447: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40448: LD_VAR 0 2
40452: PPUSH
40453: LD_VAR 0 3
40457: PPUSH
40458: CALL 40707 0 2
40462: NOT
40463: IFFALSE 40522
// repeat engine := _engine [ 1 ] ;
40465: LD_ADDR_VAR 0 3
40469: PUSH
40470: LD_VAR 0 11
40474: PUSH
40475: LD_INT 1
40477: ARRAY
40478: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40479: LD_ADDR_VAR 0 11
40483: PUSH
40484: LD_VAR 0 11
40488: PPUSH
40489: LD_INT 1
40491: PPUSH
40492: CALL_OW 3
40496: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40497: LD_VAR 0 2
40501: PPUSH
40502: LD_VAR 0 3
40506: PPUSH
40507: CALL 40707 0 2
40511: PUSH
40512: LD_VAR 0 11
40516: PUSH
40517: EMPTY
40518: EQUAL
40519: OR
40520: IFFALSE 40465
// if not control in _control then
40522: LD_VAR 0 4
40526: PUSH
40527: LD_VAR 0 12
40531: IN
40532: NOT
40533: IFFALSE 40559
// control := _control [ rand ( 1 , _control ) ] ;
40535: LD_ADDR_VAR 0 4
40539: PUSH
40540: LD_VAR 0 12
40544: PUSH
40545: LD_INT 1
40547: PPUSH
40548: LD_VAR 0 12
40552: PPUSH
40553: CALL_OW 12
40557: ARRAY
40558: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40559: LD_VAR 0 2
40563: PPUSH
40564: LD_VAR 0 5
40568: PPUSH
40569: CALL 40927 0 2
40573: NOT
40574: IFFALSE 40633
// repeat weapon := _weapon [ 1 ] ;
40576: LD_ADDR_VAR 0 5
40580: PUSH
40581: LD_VAR 0 10
40585: PUSH
40586: LD_INT 1
40588: ARRAY
40589: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40590: LD_ADDR_VAR 0 10
40594: PUSH
40595: LD_VAR 0 10
40599: PPUSH
40600: LD_INT 1
40602: PPUSH
40603: CALL_OW 3
40607: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40608: LD_VAR 0 2
40612: PPUSH
40613: LD_VAR 0 5
40617: PPUSH
40618: CALL 40927 0 2
40622: PUSH
40623: LD_VAR 0 10
40627: PUSH
40628: EMPTY
40629: EQUAL
40630: OR
40631: IFFALSE 40576
// result := [ ] ;
40633: LD_ADDR_VAR 0 6
40637: PUSH
40638: EMPTY
40639: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40640: LD_VAR 0 1
40644: PPUSH
40645: LD_VAR 0 2
40649: PPUSH
40650: LD_VAR 0 3
40654: PPUSH
40655: LD_VAR 0 4
40659: PPUSH
40660: LD_VAR 0 5
40664: PPUSH
40665: CALL_OW 448
40669: IFFALSE 40702
// result := [ chassis , engine , control , weapon ] ;
40671: LD_ADDR_VAR 0 6
40675: PUSH
40676: LD_VAR 0 2
40680: PUSH
40681: LD_VAR 0 3
40685: PUSH
40686: LD_VAR 0 4
40690: PUSH
40691: LD_VAR 0 5
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: ST_TO_ADDR
// end ;
40702: LD_VAR 0 6
40706: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40707: LD_INT 0
40709: PPUSH
// if not chassis or not engine then
40710: LD_VAR 0 1
40714: NOT
40715: PUSH
40716: LD_VAR 0 2
40720: NOT
40721: OR
40722: IFFALSE 40726
// exit ;
40724: GO 40922
// case engine of engine_solar :
40726: LD_VAR 0 2
40730: PUSH
40731: LD_INT 2
40733: DOUBLE
40734: EQUAL
40735: IFTRUE 40739
40737: GO 40777
40739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40740: LD_ADDR_VAR 0 3
40744: PUSH
40745: LD_INT 11
40747: PUSH
40748: LD_INT 12
40750: PUSH
40751: LD_INT 13
40753: PUSH
40754: LD_INT 14
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: LD_INT 3
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: ST_TO_ADDR
40775: GO 40906
40777: LD_INT 1
40779: DOUBLE
40780: EQUAL
40781: IFTRUE 40785
40783: GO 40847
40785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40786: LD_ADDR_VAR 0 3
40790: PUSH
40791: LD_INT 11
40793: PUSH
40794: LD_INT 12
40796: PUSH
40797: LD_INT 13
40799: PUSH
40800: LD_INT 14
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: LD_INT 2
40808: PUSH
40809: LD_INT 3
40811: PUSH
40812: LD_INT 4
40814: PUSH
40815: LD_INT 5
40817: PUSH
40818: LD_INT 21
40820: PUSH
40821: LD_INT 23
40823: PUSH
40824: LD_INT 22
40826: PUSH
40827: LD_INT 24
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: ST_TO_ADDR
40845: GO 40906
40847: LD_INT 3
40849: DOUBLE
40850: EQUAL
40851: IFTRUE 40855
40853: GO 40905
40855: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40856: LD_ADDR_VAR 0 3
40860: PUSH
40861: LD_INT 13
40863: PUSH
40864: LD_INT 14
40866: PUSH
40867: LD_INT 2
40869: PUSH
40870: LD_INT 3
40872: PUSH
40873: LD_INT 4
40875: PUSH
40876: LD_INT 5
40878: PUSH
40879: LD_INT 21
40881: PUSH
40882: LD_INT 22
40884: PUSH
40885: LD_INT 23
40887: PUSH
40888: LD_INT 24
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: ST_TO_ADDR
40903: GO 40906
40905: POP
// result := ( chassis in result ) ;
40906: LD_ADDR_VAR 0 3
40910: PUSH
40911: LD_VAR 0 1
40915: PUSH
40916: LD_VAR 0 3
40920: IN
40921: ST_TO_ADDR
// end ;
40922: LD_VAR 0 3
40926: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40927: LD_INT 0
40929: PPUSH
// if not chassis or not weapon then
40930: LD_VAR 0 1
40934: NOT
40935: PUSH
40936: LD_VAR 0 2
40940: NOT
40941: OR
40942: IFFALSE 40946
// exit ;
40944: GO 42006
// case weapon of us_machine_gun :
40946: LD_VAR 0 2
40950: PUSH
40951: LD_INT 2
40953: DOUBLE
40954: EQUAL
40955: IFTRUE 40959
40957: GO 40989
40959: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40960: LD_ADDR_VAR 0 3
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: LD_INT 2
40970: PUSH
40971: LD_INT 3
40973: PUSH
40974: LD_INT 4
40976: PUSH
40977: LD_INT 5
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: ST_TO_ADDR
40987: GO 41990
40989: LD_INT 3
40991: DOUBLE
40992: EQUAL
40993: IFTRUE 40997
40995: GO 41027
40997: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40998: LD_ADDR_VAR 0 3
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: LD_INT 3
41011: PUSH
41012: LD_INT 4
41014: PUSH
41015: LD_INT 5
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: ST_TO_ADDR
41025: GO 41990
41027: LD_INT 11
41029: DOUBLE
41030: EQUAL
41031: IFTRUE 41035
41033: GO 41065
41035: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41036: LD_ADDR_VAR 0 3
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 3
41049: PUSH
41050: LD_INT 4
41052: PUSH
41053: LD_INT 5
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: ST_TO_ADDR
41063: GO 41990
41065: LD_INT 4
41067: DOUBLE
41068: EQUAL
41069: IFTRUE 41073
41071: GO 41099
41073: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41074: LD_ADDR_VAR 0 3
41078: PUSH
41079: LD_INT 2
41081: PUSH
41082: LD_INT 3
41084: PUSH
41085: LD_INT 4
41087: PUSH
41088: LD_INT 5
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: ST_TO_ADDR
41097: GO 41990
41099: LD_INT 5
41101: DOUBLE
41102: EQUAL
41103: IFTRUE 41107
41105: GO 41133
41107: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41108: LD_ADDR_VAR 0 3
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 3
41118: PUSH
41119: LD_INT 4
41121: PUSH
41122: LD_INT 5
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: ST_TO_ADDR
41131: GO 41990
41133: LD_INT 9
41135: DOUBLE
41136: EQUAL
41137: IFTRUE 41141
41139: GO 41167
41141: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41142: LD_ADDR_VAR 0 3
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: LD_INT 3
41152: PUSH
41153: LD_INT 4
41155: PUSH
41156: LD_INT 5
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: ST_TO_ADDR
41165: GO 41990
41167: LD_INT 7
41169: DOUBLE
41170: EQUAL
41171: IFTRUE 41175
41173: GO 41201
41175: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41176: LD_ADDR_VAR 0 3
41180: PUSH
41181: LD_INT 2
41183: PUSH
41184: LD_INT 3
41186: PUSH
41187: LD_INT 4
41189: PUSH
41190: LD_INT 5
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: ST_TO_ADDR
41199: GO 41990
41201: LD_INT 12
41203: DOUBLE
41204: EQUAL
41205: IFTRUE 41209
41207: GO 41235
41209: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41210: LD_ADDR_VAR 0 3
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: LD_INT 3
41220: PUSH
41221: LD_INT 4
41223: PUSH
41224: LD_INT 5
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: ST_TO_ADDR
41233: GO 41990
41235: LD_INT 13
41237: DOUBLE
41238: EQUAL
41239: IFTRUE 41243
41241: GO 41269
41243: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41244: LD_ADDR_VAR 0 3
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: LD_INT 3
41254: PUSH
41255: LD_INT 4
41257: PUSH
41258: LD_INT 5
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: ST_TO_ADDR
41267: GO 41990
41269: LD_INT 14
41271: DOUBLE
41272: EQUAL
41273: IFTRUE 41277
41275: GO 41295
41277: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41278: LD_ADDR_VAR 0 3
41282: PUSH
41283: LD_INT 4
41285: PUSH
41286: LD_INT 5
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: ST_TO_ADDR
41293: GO 41990
41295: LD_INT 6
41297: DOUBLE
41298: EQUAL
41299: IFTRUE 41303
41301: GO 41321
41303: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41304: LD_ADDR_VAR 0 3
41308: PUSH
41309: LD_INT 4
41311: PUSH
41312: LD_INT 5
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: ST_TO_ADDR
41319: GO 41990
41321: LD_INT 10
41323: DOUBLE
41324: EQUAL
41325: IFTRUE 41329
41327: GO 41347
41329: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41330: LD_ADDR_VAR 0 3
41334: PUSH
41335: LD_INT 4
41337: PUSH
41338: LD_INT 5
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: ST_TO_ADDR
41345: GO 41990
41347: LD_INT 22
41349: DOUBLE
41350: EQUAL
41351: IFTRUE 41355
41353: GO 41381
41355: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41356: LD_ADDR_VAR 0 3
41360: PUSH
41361: LD_INT 11
41363: PUSH
41364: LD_INT 12
41366: PUSH
41367: LD_INT 13
41369: PUSH
41370: LD_INT 14
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: ST_TO_ADDR
41379: GO 41990
41381: LD_INT 23
41383: DOUBLE
41384: EQUAL
41385: IFTRUE 41389
41387: GO 41415
41389: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41390: LD_ADDR_VAR 0 3
41394: PUSH
41395: LD_INT 11
41397: PUSH
41398: LD_INT 12
41400: PUSH
41401: LD_INT 13
41403: PUSH
41404: LD_INT 14
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: ST_TO_ADDR
41413: GO 41990
41415: LD_INT 24
41417: DOUBLE
41418: EQUAL
41419: IFTRUE 41423
41421: GO 41449
41423: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41424: LD_ADDR_VAR 0 3
41428: PUSH
41429: LD_INT 11
41431: PUSH
41432: LD_INT 12
41434: PUSH
41435: LD_INT 13
41437: PUSH
41438: LD_INT 14
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: ST_TO_ADDR
41447: GO 41990
41449: LD_INT 30
41451: DOUBLE
41452: EQUAL
41453: IFTRUE 41457
41455: GO 41483
41457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41458: LD_ADDR_VAR 0 3
41462: PUSH
41463: LD_INT 11
41465: PUSH
41466: LD_INT 12
41468: PUSH
41469: LD_INT 13
41471: PUSH
41472: LD_INT 14
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: ST_TO_ADDR
41481: GO 41990
41483: LD_INT 25
41485: DOUBLE
41486: EQUAL
41487: IFTRUE 41491
41489: GO 41509
41491: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41492: LD_ADDR_VAR 0 3
41496: PUSH
41497: LD_INT 13
41499: PUSH
41500: LD_INT 14
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: ST_TO_ADDR
41507: GO 41990
41509: LD_INT 27
41511: DOUBLE
41512: EQUAL
41513: IFTRUE 41517
41515: GO 41535
41517: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41518: LD_ADDR_VAR 0 3
41522: PUSH
41523: LD_INT 13
41525: PUSH
41526: LD_INT 14
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: ST_TO_ADDR
41533: GO 41990
41535: LD_INT 92
41537: DOUBLE
41538: EQUAL
41539: IFTRUE 41543
41541: GO 41569
41543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41544: LD_ADDR_VAR 0 3
41548: PUSH
41549: LD_INT 11
41551: PUSH
41552: LD_INT 12
41554: PUSH
41555: LD_INT 13
41557: PUSH
41558: LD_INT 14
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: ST_TO_ADDR
41567: GO 41990
41569: LD_INT 28
41571: DOUBLE
41572: EQUAL
41573: IFTRUE 41577
41575: GO 41595
41577: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41578: LD_ADDR_VAR 0 3
41582: PUSH
41583: LD_INT 13
41585: PUSH
41586: LD_INT 14
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: ST_TO_ADDR
41593: GO 41990
41595: LD_INT 29
41597: DOUBLE
41598: EQUAL
41599: IFTRUE 41603
41601: GO 41621
41603: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41604: LD_ADDR_VAR 0 3
41608: PUSH
41609: LD_INT 13
41611: PUSH
41612: LD_INT 14
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: ST_TO_ADDR
41619: GO 41990
41621: LD_INT 31
41623: DOUBLE
41624: EQUAL
41625: IFTRUE 41629
41627: GO 41647
41629: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41630: LD_ADDR_VAR 0 3
41634: PUSH
41635: LD_INT 13
41637: PUSH
41638: LD_INT 14
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: ST_TO_ADDR
41645: GO 41990
41647: LD_INT 26
41649: DOUBLE
41650: EQUAL
41651: IFTRUE 41655
41653: GO 41673
41655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41656: LD_ADDR_VAR 0 3
41660: PUSH
41661: LD_INT 13
41663: PUSH
41664: LD_INT 14
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: ST_TO_ADDR
41671: GO 41990
41673: LD_INT 42
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41681
41679: GO 41707
41681: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41682: LD_ADDR_VAR 0 3
41686: PUSH
41687: LD_INT 21
41689: PUSH
41690: LD_INT 22
41692: PUSH
41693: LD_INT 23
41695: PUSH
41696: LD_INT 24
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: ST_TO_ADDR
41705: GO 41990
41707: LD_INT 43
41709: DOUBLE
41710: EQUAL
41711: IFTRUE 41715
41713: GO 41741
41715: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41716: LD_ADDR_VAR 0 3
41720: PUSH
41721: LD_INT 21
41723: PUSH
41724: LD_INT 22
41726: PUSH
41727: LD_INT 23
41729: PUSH
41730: LD_INT 24
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: ST_TO_ADDR
41739: GO 41990
41741: LD_INT 44
41743: DOUBLE
41744: EQUAL
41745: IFTRUE 41749
41747: GO 41775
41749: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41750: LD_ADDR_VAR 0 3
41754: PUSH
41755: LD_INT 21
41757: PUSH
41758: LD_INT 22
41760: PUSH
41761: LD_INT 23
41763: PUSH
41764: LD_INT 24
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: ST_TO_ADDR
41773: GO 41990
41775: LD_INT 45
41777: DOUBLE
41778: EQUAL
41779: IFTRUE 41783
41781: GO 41809
41783: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41784: LD_ADDR_VAR 0 3
41788: PUSH
41789: LD_INT 21
41791: PUSH
41792: LD_INT 22
41794: PUSH
41795: LD_INT 23
41797: PUSH
41798: LD_INT 24
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: ST_TO_ADDR
41807: GO 41990
41809: LD_INT 49
41811: DOUBLE
41812: EQUAL
41813: IFTRUE 41817
41815: GO 41843
41817: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41818: LD_ADDR_VAR 0 3
41822: PUSH
41823: LD_INT 21
41825: PUSH
41826: LD_INT 22
41828: PUSH
41829: LD_INT 23
41831: PUSH
41832: LD_INT 24
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: ST_TO_ADDR
41841: GO 41990
41843: LD_INT 51
41845: DOUBLE
41846: EQUAL
41847: IFTRUE 41851
41849: GO 41877
41851: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41852: LD_ADDR_VAR 0 3
41856: PUSH
41857: LD_INT 21
41859: PUSH
41860: LD_INT 22
41862: PUSH
41863: LD_INT 23
41865: PUSH
41866: LD_INT 24
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
41875: GO 41990
41877: LD_INT 52
41879: DOUBLE
41880: EQUAL
41881: IFTRUE 41885
41883: GO 41911
41885: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41886: LD_ADDR_VAR 0 3
41890: PUSH
41891: LD_INT 21
41893: PUSH
41894: LD_INT 22
41896: PUSH
41897: LD_INT 23
41899: PUSH
41900: LD_INT 24
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: ST_TO_ADDR
41909: GO 41990
41911: LD_INT 53
41913: DOUBLE
41914: EQUAL
41915: IFTRUE 41919
41917: GO 41937
41919: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41920: LD_ADDR_VAR 0 3
41924: PUSH
41925: LD_INT 23
41927: PUSH
41928: LD_INT 24
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: ST_TO_ADDR
41935: GO 41990
41937: LD_INT 46
41939: DOUBLE
41940: EQUAL
41941: IFTRUE 41945
41943: GO 41963
41945: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41946: LD_ADDR_VAR 0 3
41950: PUSH
41951: LD_INT 23
41953: PUSH
41954: LD_INT 24
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: ST_TO_ADDR
41961: GO 41990
41963: LD_INT 47
41965: DOUBLE
41966: EQUAL
41967: IFTRUE 41971
41969: GO 41989
41971: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41972: LD_ADDR_VAR 0 3
41976: PUSH
41977: LD_INT 23
41979: PUSH
41980: LD_INT 24
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: ST_TO_ADDR
41987: GO 41990
41989: POP
// result := ( chassis in result ) ;
41990: LD_ADDR_VAR 0 3
41994: PUSH
41995: LD_VAR 0 1
41999: PUSH
42000: LD_VAR 0 3
42004: IN
42005: ST_TO_ADDR
// end ;
42006: LD_VAR 0 3
42010: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42011: LD_INT 0
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
42019: PPUSH
// result := array ;
42020: LD_ADDR_VAR 0 5
42024: PUSH
42025: LD_VAR 0 1
42029: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42030: LD_VAR 0 1
42034: NOT
42035: PUSH
42036: LD_VAR 0 2
42040: NOT
42041: OR
42042: PUSH
42043: LD_VAR 0 3
42047: NOT
42048: OR
42049: PUSH
42050: LD_VAR 0 2
42054: PUSH
42055: LD_VAR 0 1
42059: GREATER
42060: OR
42061: PUSH
42062: LD_VAR 0 3
42066: PUSH
42067: LD_VAR 0 1
42071: GREATER
42072: OR
42073: IFFALSE 42077
// exit ;
42075: GO 42373
// if direction then
42077: LD_VAR 0 4
42081: IFFALSE 42145
// begin d := 1 ;
42083: LD_ADDR_VAR 0 9
42087: PUSH
42088: LD_INT 1
42090: ST_TO_ADDR
// if i_from > i_to then
42091: LD_VAR 0 2
42095: PUSH
42096: LD_VAR 0 3
42100: GREATER
42101: IFFALSE 42127
// length := ( array - i_from ) + i_to else
42103: LD_ADDR_VAR 0 11
42107: PUSH
42108: LD_VAR 0 1
42112: PUSH
42113: LD_VAR 0 2
42117: MINUS
42118: PUSH
42119: LD_VAR 0 3
42123: PLUS
42124: ST_TO_ADDR
42125: GO 42143
// length := i_to - i_from ;
42127: LD_ADDR_VAR 0 11
42131: PUSH
42132: LD_VAR 0 3
42136: PUSH
42137: LD_VAR 0 2
42141: MINUS
42142: ST_TO_ADDR
// end else
42143: GO 42206
// begin d := - 1 ;
42145: LD_ADDR_VAR 0 9
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: ST_TO_ADDR
// if i_from > i_to then
42154: LD_VAR 0 2
42158: PUSH
42159: LD_VAR 0 3
42163: GREATER
42164: IFFALSE 42184
// length := i_from - i_to else
42166: LD_ADDR_VAR 0 11
42170: PUSH
42171: LD_VAR 0 2
42175: PUSH
42176: LD_VAR 0 3
42180: MINUS
42181: ST_TO_ADDR
42182: GO 42206
// length := ( array - i_to ) + i_from ;
42184: LD_ADDR_VAR 0 11
42188: PUSH
42189: LD_VAR 0 1
42193: PUSH
42194: LD_VAR 0 3
42198: MINUS
42199: PUSH
42200: LD_VAR 0 2
42204: PLUS
42205: ST_TO_ADDR
// end ; if not length then
42206: LD_VAR 0 11
42210: NOT
42211: IFFALSE 42215
// exit ;
42213: GO 42373
// tmp := array ;
42215: LD_ADDR_VAR 0 10
42219: PUSH
42220: LD_VAR 0 1
42224: ST_TO_ADDR
// for i = 1 to length do
42225: LD_ADDR_VAR 0 6
42229: PUSH
42230: DOUBLE
42231: LD_INT 1
42233: DEC
42234: ST_TO_ADDR
42235: LD_VAR 0 11
42239: PUSH
42240: FOR_TO
42241: IFFALSE 42361
// begin for j = 1 to array do
42243: LD_ADDR_VAR 0 7
42247: PUSH
42248: DOUBLE
42249: LD_INT 1
42251: DEC
42252: ST_TO_ADDR
42253: LD_VAR 0 1
42257: PUSH
42258: FOR_TO
42259: IFFALSE 42347
// begin k := j + d ;
42261: LD_ADDR_VAR 0 8
42265: PUSH
42266: LD_VAR 0 7
42270: PUSH
42271: LD_VAR 0 9
42275: PLUS
42276: ST_TO_ADDR
// if k > array then
42277: LD_VAR 0 8
42281: PUSH
42282: LD_VAR 0 1
42286: GREATER
42287: IFFALSE 42297
// k := 1 ;
42289: LD_ADDR_VAR 0 8
42293: PUSH
42294: LD_INT 1
42296: ST_TO_ADDR
// if not k then
42297: LD_VAR 0 8
42301: NOT
42302: IFFALSE 42314
// k := array ;
42304: LD_ADDR_VAR 0 8
42308: PUSH
42309: LD_VAR 0 1
42313: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42314: LD_ADDR_VAR 0 10
42318: PUSH
42319: LD_VAR 0 10
42323: PPUSH
42324: LD_VAR 0 8
42328: PPUSH
42329: LD_VAR 0 1
42333: PUSH
42334: LD_VAR 0 7
42338: ARRAY
42339: PPUSH
42340: CALL_OW 1
42344: ST_TO_ADDR
// end ;
42345: GO 42258
42347: POP
42348: POP
// array := tmp ;
42349: LD_ADDR_VAR 0 1
42353: PUSH
42354: LD_VAR 0 10
42358: ST_TO_ADDR
// end ;
42359: GO 42240
42361: POP
42362: POP
// result := array ;
42363: LD_ADDR_VAR 0 5
42367: PUSH
42368: LD_VAR 0 1
42372: ST_TO_ADDR
// end ;
42373: LD_VAR 0 5
42377: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42378: LD_INT 0
42380: PPUSH
42381: PPUSH
// result := 0 ;
42382: LD_ADDR_VAR 0 3
42386: PUSH
42387: LD_INT 0
42389: ST_TO_ADDR
// if not array or not value in array then
42390: LD_VAR 0 1
42394: NOT
42395: PUSH
42396: LD_VAR 0 2
42400: PUSH
42401: LD_VAR 0 1
42405: IN
42406: NOT
42407: OR
42408: IFFALSE 42412
// exit ;
42410: GO 42466
// for i = 1 to array do
42412: LD_ADDR_VAR 0 4
42416: PUSH
42417: DOUBLE
42418: LD_INT 1
42420: DEC
42421: ST_TO_ADDR
42422: LD_VAR 0 1
42426: PUSH
42427: FOR_TO
42428: IFFALSE 42464
// if value = array [ i ] then
42430: LD_VAR 0 2
42434: PUSH
42435: LD_VAR 0 1
42439: PUSH
42440: LD_VAR 0 4
42444: ARRAY
42445: EQUAL
42446: IFFALSE 42462
// begin result := i ;
42448: LD_ADDR_VAR 0 3
42452: PUSH
42453: LD_VAR 0 4
42457: ST_TO_ADDR
// exit ;
42458: POP
42459: POP
42460: GO 42466
// end ;
42462: GO 42427
42464: POP
42465: POP
// end ;
42466: LD_VAR 0 3
42470: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42471: LD_INT 0
42473: PPUSH
// vc_chassis := chassis ;
42474: LD_ADDR_OWVAR 37
42478: PUSH
42479: LD_VAR 0 1
42483: ST_TO_ADDR
// vc_engine := engine ;
42484: LD_ADDR_OWVAR 39
42488: PUSH
42489: LD_VAR 0 2
42493: ST_TO_ADDR
// vc_control := control ;
42494: LD_ADDR_OWVAR 38
42498: PUSH
42499: LD_VAR 0 3
42503: ST_TO_ADDR
// vc_weapon := weapon ;
42504: LD_ADDR_OWVAR 40
42508: PUSH
42509: LD_VAR 0 4
42513: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42514: LD_ADDR_OWVAR 41
42518: PUSH
42519: LD_VAR 0 5
42523: ST_TO_ADDR
// end ;
42524: LD_VAR 0 6
42528: RET
// export function WantPlant ( unit ) ; var task ; begin
42529: LD_INT 0
42531: PPUSH
42532: PPUSH
// result := false ;
42533: LD_ADDR_VAR 0 2
42537: PUSH
42538: LD_INT 0
42540: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42541: LD_ADDR_VAR 0 3
42545: PUSH
42546: LD_VAR 0 1
42550: PPUSH
42551: CALL_OW 437
42555: ST_TO_ADDR
// if task then
42556: LD_VAR 0 3
42560: IFFALSE 42588
// if task [ 1 ] [ 1 ] = p then
42562: LD_VAR 0 3
42566: PUSH
42567: LD_INT 1
42569: ARRAY
42570: PUSH
42571: LD_INT 1
42573: ARRAY
42574: PUSH
42575: LD_STRING p
42577: EQUAL
42578: IFFALSE 42588
// result := true ;
42580: LD_ADDR_VAR 0 2
42584: PUSH
42585: LD_INT 1
42587: ST_TO_ADDR
// end ;
42588: LD_VAR 0 2
42592: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42593: LD_INT 0
42595: PPUSH
42596: PPUSH
42597: PPUSH
42598: PPUSH
// if pos < 1 then
42599: LD_VAR 0 2
42603: PUSH
42604: LD_INT 1
42606: LESS
42607: IFFALSE 42611
// exit ;
42609: GO 42914
// if pos = 1 then
42611: LD_VAR 0 2
42615: PUSH
42616: LD_INT 1
42618: EQUAL
42619: IFFALSE 42652
// result := Replace ( arr , pos [ 1 ] , value ) else
42621: LD_ADDR_VAR 0 4
42625: PUSH
42626: LD_VAR 0 1
42630: PPUSH
42631: LD_VAR 0 2
42635: PUSH
42636: LD_INT 1
42638: ARRAY
42639: PPUSH
42640: LD_VAR 0 3
42644: PPUSH
42645: CALL_OW 1
42649: ST_TO_ADDR
42650: GO 42914
// begin tmp := arr ;
42652: LD_ADDR_VAR 0 6
42656: PUSH
42657: LD_VAR 0 1
42661: ST_TO_ADDR
// s_arr := [ tmp ] ;
42662: LD_ADDR_VAR 0 7
42666: PUSH
42667: LD_VAR 0 6
42671: PUSH
42672: EMPTY
42673: LIST
42674: ST_TO_ADDR
// for i = 1 to pos - 1 do
42675: LD_ADDR_VAR 0 5
42679: PUSH
42680: DOUBLE
42681: LD_INT 1
42683: DEC
42684: ST_TO_ADDR
42685: LD_VAR 0 2
42689: PUSH
42690: LD_INT 1
42692: MINUS
42693: PUSH
42694: FOR_TO
42695: IFFALSE 42740
// begin tmp := tmp [ pos [ i ] ] ;
42697: LD_ADDR_VAR 0 6
42701: PUSH
42702: LD_VAR 0 6
42706: PUSH
42707: LD_VAR 0 2
42711: PUSH
42712: LD_VAR 0 5
42716: ARRAY
42717: ARRAY
42718: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42719: LD_ADDR_VAR 0 7
42723: PUSH
42724: LD_VAR 0 7
42728: PUSH
42729: LD_VAR 0 6
42733: PUSH
42734: EMPTY
42735: LIST
42736: ADD
42737: ST_TO_ADDR
// end ;
42738: GO 42694
42740: POP
42741: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42742: LD_ADDR_VAR 0 6
42746: PUSH
42747: LD_VAR 0 6
42751: PPUSH
42752: LD_VAR 0 2
42756: PUSH
42757: LD_VAR 0 2
42761: ARRAY
42762: PPUSH
42763: LD_VAR 0 3
42767: PPUSH
42768: CALL_OW 1
42772: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42773: LD_ADDR_VAR 0 7
42777: PUSH
42778: LD_VAR 0 7
42782: PPUSH
42783: LD_VAR 0 7
42787: PPUSH
42788: LD_VAR 0 6
42792: PPUSH
42793: CALL_OW 1
42797: ST_TO_ADDR
// for i = s_arr downto 2 do
42798: LD_ADDR_VAR 0 5
42802: PUSH
42803: DOUBLE
42804: LD_VAR 0 7
42808: INC
42809: ST_TO_ADDR
42810: LD_INT 2
42812: PUSH
42813: FOR_DOWNTO
42814: IFFALSE 42898
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42816: LD_ADDR_VAR 0 6
42820: PUSH
42821: LD_VAR 0 7
42825: PUSH
42826: LD_VAR 0 5
42830: PUSH
42831: LD_INT 1
42833: MINUS
42834: ARRAY
42835: PPUSH
42836: LD_VAR 0 2
42840: PUSH
42841: LD_VAR 0 5
42845: PUSH
42846: LD_INT 1
42848: MINUS
42849: ARRAY
42850: PPUSH
42851: LD_VAR 0 7
42855: PUSH
42856: LD_VAR 0 5
42860: ARRAY
42861: PPUSH
42862: CALL_OW 1
42866: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42867: LD_ADDR_VAR 0 7
42871: PUSH
42872: LD_VAR 0 7
42876: PPUSH
42877: LD_VAR 0 5
42881: PUSH
42882: LD_INT 1
42884: MINUS
42885: PPUSH
42886: LD_VAR 0 6
42890: PPUSH
42891: CALL_OW 1
42895: ST_TO_ADDR
// end ;
42896: GO 42813
42898: POP
42899: POP
// result := s_arr [ 1 ] ;
42900: LD_ADDR_VAR 0 4
42904: PUSH
42905: LD_VAR 0 7
42909: PUSH
42910: LD_INT 1
42912: ARRAY
42913: ST_TO_ADDR
// end ; end ;
42914: LD_VAR 0 4
42918: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42919: LD_INT 0
42921: PPUSH
42922: PPUSH
// if not list then
42923: LD_VAR 0 1
42927: NOT
42928: IFFALSE 42932
// exit ;
42930: GO 43023
// i := list [ pos1 ] ;
42932: LD_ADDR_VAR 0 5
42936: PUSH
42937: LD_VAR 0 1
42941: PUSH
42942: LD_VAR 0 2
42946: ARRAY
42947: ST_TO_ADDR
// if not i then
42948: LD_VAR 0 5
42952: NOT
42953: IFFALSE 42957
// exit ;
42955: GO 43023
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42957: LD_ADDR_VAR 0 1
42961: PUSH
42962: LD_VAR 0 1
42966: PPUSH
42967: LD_VAR 0 2
42971: PPUSH
42972: LD_VAR 0 1
42976: PUSH
42977: LD_VAR 0 3
42981: ARRAY
42982: PPUSH
42983: CALL_OW 1
42987: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42988: LD_ADDR_VAR 0 1
42992: PUSH
42993: LD_VAR 0 1
42997: PPUSH
42998: LD_VAR 0 3
43002: PPUSH
43003: LD_VAR 0 5
43007: PPUSH
43008: CALL_OW 1
43012: ST_TO_ADDR
// result := list ;
43013: LD_ADDR_VAR 0 4
43017: PUSH
43018: LD_VAR 0 1
43022: ST_TO_ADDR
// end ;
43023: LD_VAR 0 4
43027: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43028: LD_INT 0
43030: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43031: LD_ADDR_VAR 0 5
43035: PUSH
43036: LD_VAR 0 1
43040: PPUSH
43041: CALL_OW 250
43045: PPUSH
43046: LD_VAR 0 1
43050: PPUSH
43051: CALL_OW 251
43055: PPUSH
43056: LD_VAR 0 2
43060: PPUSH
43061: LD_VAR 0 3
43065: PPUSH
43066: LD_VAR 0 4
43070: PPUSH
43071: CALL 43449 0 5
43075: ST_TO_ADDR
// end ;
43076: LD_VAR 0 5
43080: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
43081: LD_INT 0
43083: PPUSH
43084: PPUSH
43085: PPUSH
43086: PPUSH
// if not list or not unit then
43087: LD_VAR 0 2
43091: NOT
43092: PUSH
43093: LD_VAR 0 1
43097: NOT
43098: OR
43099: IFFALSE 43103
// exit ;
43101: GO 43444
// result := [ ] ;
43103: LD_ADDR_VAR 0 5
43107: PUSH
43108: EMPTY
43109: ST_TO_ADDR
// for i in list do
43110: LD_ADDR_VAR 0 6
43114: PUSH
43115: LD_VAR 0 2
43119: PUSH
43120: FOR_IN
43121: IFFALSE 43339
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43123: LD_ADDR_VAR 0 8
43127: PUSH
43128: LD_VAR 0 1
43132: PPUSH
43133: LD_VAR 0 6
43137: PUSH
43138: LD_INT 1
43140: ARRAY
43141: PPUSH
43142: LD_VAR 0 6
43146: PUSH
43147: LD_INT 2
43149: ARRAY
43150: PPUSH
43151: CALL_OW 297
43155: ST_TO_ADDR
// if not Count ( result ) then
43156: LD_VAR 0 5
43160: PPUSH
43161: CALL 39733 0 1
43165: NOT
43166: IFFALSE 43199
// begin result := Join ( result , [ i , tmp ] ) ;
43168: LD_ADDR_VAR 0 5
43172: PUSH
43173: LD_VAR 0 5
43177: PPUSH
43178: LD_VAR 0 6
43182: PUSH
43183: LD_VAR 0 8
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PPUSH
43192: CALL 75322 0 2
43196: ST_TO_ADDR
// continue ;
43197: GO 43120
// end ; if result [ result ] [ 2 ] <= tmp then
43199: LD_VAR 0 5
43203: PUSH
43204: LD_VAR 0 5
43208: ARRAY
43209: PUSH
43210: LD_INT 2
43212: ARRAY
43213: PUSH
43214: LD_VAR 0 8
43218: LESSEQUAL
43219: IFFALSE 43252
// result := Join ( result , [ i , tmp ] ) else
43221: LD_ADDR_VAR 0 5
43225: PUSH
43226: LD_VAR 0 5
43230: PPUSH
43231: LD_VAR 0 6
43235: PUSH
43236: LD_VAR 0 8
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PPUSH
43245: CALL 75322 0 2
43249: ST_TO_ADDR
43250: GO 43337
// begin for j := 1 to Count ( result ) do
43252: LD_ADDR_VAR 0 7
43256: PUSH
43257: DOUBLE
43258: LD_INT 1
43260: DEC
43261: ST_TO_ADDR
43262: LD_VAR 0 5
43266: PPUSH
43267: CALL 39733 0 1
43271: PUSH
43272: FOR_TO
43273: IFFALSE 43335
// begin if tmp < result [ j ] [ 2 ] then
43275: LD_VAR 0 8
43279: PUSH
43280: LD_VAR 0 5
43284: PUSH
43285: LD_VAR 0 7
43289: ARRAY
43290: PUSH
43291: LD_INT 2
43293: ARRAY
43294: LESS
43295: IFFALSE 43333
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43297: LD_ADDR_VAR 0 5
43301: PUSH
43302: LD_VAR 0 5
43306: PPUSH
43307: LD_VAR 0 7
43311: PPUSH
43312: LD_VAR 0 6
43316: PUSH
43317: LD_VAR 0 8
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PPUSH
43326: CALL_OW 2
43330: ST_TO_ADDR
// break ;
43331: GO 43335
// end ; end ;
43333: GO 43272
43335: POP
43336: POP
// end ; end ;
43337: GO 43120
43339: POP
43340: POP
// if result and not asc then
43341: LD_VAR 0 5
43345: PUSH
43346: LD_VAR 0 3
43350: NOT
43351: AND
43352: IFFALSE 43369
// result := ReverseArray ( result ) ;
43354: LD_ADDR_VAR 0 5
43358: PUSH
43359: LD_VAR 0 5
43363: PPUSH
43364: CALL 70609 0 1
43368: ST_TO_ADDR
// tmp := [ ] ;
43369: LD_ADDR_VAR 0 8
43373: PUSH
43374: EMPTY
43375: ST_TO_ADDR
// if mode then
43376: LD_VAR 0 4
43380: IFFALSE 43444
// begin for i := 1 to result do
43382: LD_ADDR_VAR 0 6
43386: PUSH
43387: DOUBLE
43388: LD_INT 1
43390: DEC
43391: ST_TO_ADDR
43392: LD_VAR 0 5
43396: PUSH
43397: FOR_TO
43398: IFFALSE 43432
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
43400: LD_ADDR_VAR 0 8
43404: PUSH
43405: LD_VAR 0 8
43409: PPUSH
43410: LD_VAR 0 5
43414: PUSH
43415: LD_VAR 0 6
43419: ARRAY
43420: PUSH
43421: LD_INT 1
43423: ARRAY
43424: PPUSH
43425: CALL 75322 0 2
43429: ST_TO_ADDR
43430: GO 43397
43432: POP
43433: POP
// result := tmp ;
43434: LD_ADDR_VAR 0 5
43438: PUSH
43439: LD_VAR 0 8
43443: ST_TO_ADDR
// end ; end ;
43444: LD_VAR 0 5
43448: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43449: LD_INT 0
43451: PPUSH
43452: PPUSH
43453: PPUSH
43454: PPUSH
// if not list then
43455: LD_VAR 0 3
43459: NOT
43460: IFFALSE 43464
// exit ;
43462: GO 43852
// result := [ ] ;
43464: LD_ADDR_VAR 0 6
43468: PUSH
43469: EMPTY
43470: ST_TO_ADDR
// for i in list do
43471: LD_ADDR_VAR 0 7
43475: PUSH
43476: LD_VAR 0 3
43480: PUSH
43481: FOR_IN
43482: IFFALSE 43684
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43484: LD_ADDR_VAR 0 9
43488: PUSH
43489: LD_VAR 0 7
43493: PPUSH
43494: LD_VAR 0 1
43498: PPUSH
43499: LD_VAR 0 2
43503: PPUSH
43504: CALL_OW 297
43508: ST_TO_ADDR
// if not result then
43509: LD_VAR 0 6
43513: NOT
43514: IFFALSE 43540
// result := [ [ i , tmp ] ] else
43516: LD_ADDR_VAR 0 6
43520: PUSH
43521: LD_VAR 0 7
43525: PUSH
43526: LD_VAR 0 9
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: EMPTY
43536: LIST
43537: ST_TO_ADDR
43538: GO 43682
// begin if result [ result ] [ 2 ] < tmp then
43540: LD_VAR 0 6
43544: PUSH
43545: LD_VAR 0 6
43549: ARRAY
43550: PUSH
43551: LD_INT 2
43553: ARRAY
43554: PUSH
43555: LD_VAR 0 9
43559: LESS
43560: IFFALSE 43602
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43562: LD_ADDR_VAR 0 6
43566: PUSH
43567: LD_VAR 0 6
43571: PPUSH
43572: LD_VAR 0 6
43576: PUSH
43577: LD_INT 1
43579: PLUS
43580: PPUSH
43581: LD_VAR 0 7
43585: PUSH
43586: LD_VAR 0 9
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PPUSH
43595: CALL_OW 2
43599: ST_TO_ADDR
43600: GO 43682
// for j = 1 to result do
43602: LD_ADDR_VAR 0 8
43606: PUSH
43607: DOUBLE
43608: LD_INT 1
43610: DEC
43611: ST_TO_ADDR
43612: LD_VAR 0 6
43616: PUSH
43617: FOR_TO
43618: IFFALSE 43680
// begin if tmp < result [ j ] [ 2 ] then
43620: LD_VAR 0 9
43624: PUSH
43625: LD_VAR 0 6
43629: PUSH
43630: LD_VAR 0 8
43634: ARRAY
43635: PUSH
43636: LD_INT 2
43638: ARRAY
43639: LESS
43640: IFFALSE 43678
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43642: LD_ADDR_VAR 0 6
43646: PUSH
43647: LD_VAR 0 6
43651: PPUSH
43652: LD_VAR 0 8
43656: PPUSH
43657: LD_VAR 0 7
43661: PUSH
43662: LD_VAR 0 9
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PPUSH
43671: CALL_OW 2
43675: ST_TO_ADDR
// break ;
43676: GO 43680
// end ; end ;
43678: GO 43617
43680: POP
43681: POP
// end ; end ;
43682: GO 43481
43684: POP
43685: POP
// if result and not asc then
43686: LD_VAR 0 6
43690: PUSH
43691: LD_VAR 0 4
43695: NOT
43696: AND
43697: IFFALSE 43772
// begin tmp := result ;
43699: LD_ADDR_VAR 0 9
43703: PUSH
43704: LD_VAR 0 6
43708: ST_TO_ADDR
// for i = tmp downto 1 do
43709: LD_ADDR_VAR 0 7
43713: PUSH
43714: DOUBLE
43715: LD_VAR 0 9
43719: INC
43720: ST_TO_ADDR
43721: LD_INT 1
43723: PUSH
43724: FOR_DOWNTO
43725: IFFALSE 43770
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43727: LD_ADDR_VAR 0 6
43731: PUSH
43732: LD_VAR 0 6
43736: PPUSH
43737: LD_VAR 0 9
43741: PUSH
43742: LD_VAR 0 7
43746: MINUS
43747: PUSH
43748: LD_INT 1
43750: PLUS
43751: PPUSH
43752: LD_VAR 0 9
43756: PUSH
43757: LD_VAR 0 7
43761: ARRAY
43762: PPUSH
43763: CALL_OW 1
43767: ST_TO_ADDR
43768: GO 43724
43770: POP
43771: POP
// end ; tmp := [ ] ;
43772: LD_ADDR_VAR 0 9
43776: PUSH
43777: EMPTY
43778: ST_TO_ADDR
// if mode then
43779: LD_VAR 0 5
43783: IFFALSE 43852
// begin for i = 1 to result do
43785: LD_ADDR_VAR 0 7
43789: PUSH
43790: DOUBLE
43791: LD_INT 1
43793: DEC
43794: ST_TO_ADDR
43795: LD_VAR 0 6
43799: PUSH
43800: FOR_TO
43801: IFFALSE 43840
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43803: LD_ADDR_VAR 0 9
43807: PUSH
43808: LD_VAR 0 9
43812: PPUSH
43813: LD_VAR 0 7
43817: PPUSH
43818: LD_VAR 0 6
43822: PUSH
43823: LD_VAR 0 7
43827: ARRAY
43828: PUSH
43829: LD_INT 1
43831: ARRAY
43832: PPUSH
43833: CALL_OW 1
43837: ST_TO_ADDR
43838: GO 43800
43840: POP
43841: POP
// result := tmp ;
43842: LD_ADDR_VAR 0 6
43846: PUSH
43847: LD_VAR 0 9
43851: ST_TO_ADDR
// end ; end ;
43852: LD_VAR 0 6
43856: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43857: LD_INT 0
43859: PPUSH
43860: PPUSH
43861: PPUSH
43862: PPUSH
43863: PPUSH
43864: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43865: LD_ADDR_VAR 0 5
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// if not x or not y then
43887: LD_VAR 0 2
43891: NOT
43892: PUSH
43893: LD_VAR 0 3
43897: NOT
43898: OR
43899: IFFALSE 43903
// exit ;
43901: GO 45553
// if not range then
43903: LD_VAR 0 4
43907: NOT
43908: IFFALSE 43918
// range := 10 ;
43910: LD_ADDR_VAR 0 4
43914: PUSH
43915: LD_INT 10
43917: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43918: LD_ADDR_VAR 0 8
43922: PUSH
43923: LD_INT 81
43925: PUSH
43926: LD_VAR 0 1
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 92
43937: PUSH
43938: LD_VAR 0 2
43942: PUSH
43943: LD_VAR 0 3
43947: PUSH
43948: LD_VAR 0 4
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 3
43961: PUSH
43962: LD_INT 21
43964: PUSH
43965: LD_INT 3
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: LIST
43980: PPUSH
43981: CALL_OW 69
43985: ST_TO_ADDR
// if not tmp then
43986: LD_VAR 0 8
43990: NOT
43991: IFFALSE 43995
// exit ;
43993: GO 45553
// for i in tmp do
43995: LD_ADDR_VAR 0 6
43999: PUSH
44000: LD_VAR 0 8
44004: PUSH
44005: FOR_IN
44006: IFFALSE 45528
// begin points := [ 0 , 0 , 0 ] ;
44008: LD_ADDR_VAR 0 9
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// bpoints := 1 ;
44027: LD_ADDR_VAR 0 10
44031: PUSH
44032: LD_INT 1
44034: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44035: LD_VAR 0 6
44039: PPUSH
44040: CALL_OW 247
44044: PUSH
44045: LD_INT 1
44047: DOUBLE
44048: EQUAL
44049: IFTRUE 44053
44051: GO 44631
44053: POP
// begin if GetClass ( i ) = 1 then
44054: LD_VAR 0 6
44058: PPUSH
44059: CALL_OW 257
44063: PUSH
44064: LD_INT 1
44066: EQUAL
44067: IFFALSE 44088
// points := [ 10 , 5 , 3 ] ;
44069: LD_ADDR_VAR 0 9
44073: PUSH
44074: LD_INT 10
44076: PUSH
44077: LD_INT 5
44079: PUSH
44080: LD_INT 3
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: LIST
44087: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44088: LD_VAR 0 6
44092: PPUSH
44093: CALL_OW 257
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: LD_INT 4
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: LIST
44111: IN
44112: IFFALSE 44133
// points := [ 3 , 2 , 1 ] ;
44114: LD_ADDR_VAR 0 9
44118: PUSH
44119: LD_INT 3
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: LIST
44132: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44133: LD_VAR 0 6
44137: PPUSH
44138: CALL_OW 257
44142: PUSH
44143: LD_INT 5
44145: EQUAL
44146: IFFALSE 44167
// points := [ 130 , 5 , 2 ] ;
44148: LD_ADDR_VAR 0 9
44152: PUSH
44153: LD_INT 130
44155: PUSH
44156: LD_INT 5
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: LIST
44166: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44167: LD_VAR 0 6
44171: PPUSH
44172: CALL_OW 257
44176: PUSH
44177: LD_INT 8
44179: EQUAL
44180: IFFALSE 44201
// points := [ 35 , 35 , 30 ] ;
44182: LD_ADDR_VAR 0 9
44186: PUSH
44187: LD_INT 35
44189: PUSH
44190: LD_INT 35
44192: PUSH
44193: LD_INT 30
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: LIST
44200: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44201: LD_VAR 0 6
44205: PPUSH
44206: CALL_OW 257
44210: PUSH
44211: LD_INT 9
44213: EQUAL
44214: IFFALSE 44235
// points := [ 20 , 55 , 40 ] ;
44216: LD_ADDR_VAR 0 9
44220: PUSH
44221: LD_INT 20
44223: PUSH
44224: LD_INT 55
44226: PUSH
44227: LD_INT 40
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: LIST
44234: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44235: LD_VAR 0 6
44239: PPUSH
44240: CALL_OW 257
44244: PUSH
44245: LD_INT 12
44247: PUSH
44248: LD_INT 16
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: IN
44255: IFFALSE 44276
// points := [ 5 , 3 , 2 ] ;
44257: LD_ADDR_VAR 0 9
44261: PUSH
44262: LD_INT 5
44264: PUSH
44265: LD_INT 3
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44276: LD_VAR 0 6
44280: PPUSH
44281: CALL_OW 257
44285: PUSH
44286: LD_INT 17
44288: EQUAL
44289: IFFALSE 44310
// points := [ 100 , 50 , 75 ] ;
44291: LD_ADDR_VAR 0 9
44295: PUSH
44296: LD_INT 100
44298: PUSH
44299: LD_INT 50
44301: PUSH
44302: LD_INT 75
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: LIST
44309: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44310: LD_VAR 0 6
44314: PPUSH
44315: CALL_OW 257
44319: PUSH
44320: LD_INT 15
44322: EQUAL
44323: IFFALSE 44344
// points := [ 10 , 5 , 3 ] ;
44325: LD_ADDR_VAR 0 9
44329: PUSH
44330: LD_INT 10
44332: PUSH
44333: LD_INT 5
44335: PUSH
44336: LD_INT 3
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44344: LD_VAR 0 6
44348: PPUSH
44349: CALL_OW 257
44353: PUSH
44354: LD_INT 14
44356: EQUAL
44357: IFFALSE 44378
// points := [ 10 , 0 , 0 ] ;
44359: LD_ADDR_VAR 0 9
44363: PUSH
44364: LD_INT 10
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: LIST
44377: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44378: LD_VAR 0 6
44382: PPUSH
44383: CALL_OW 257
44387: PUSH
44388: LD_INT 11
44390: EQUAL
44391: IFFALSE 44412
// points := [ 30 , 10 , 5 ] ;
44393: LD_ADDR_VAR 0 9
44397: PUSH
44398: LD_INT 30
44400: PUSH
44401: LD_INT 10
44403: PUSH
44404: LD_INT 5
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: LIST
44411: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44412: LD_VAR 0 1
44416: PPUSH
44417: LD_INT 5
44419: PPUSH
44420: CALL_OW 321
44424: PUSH
44425: LD_INT 2
44427: EQUAL
44428: IFFALSE 44445
// bpoints := bpoints * 1.8 ;
44430: LD_ADDR_VAR 0 10
44434: PUSH
44435: LD_VAR 0 10
44439: PUSH
44440: LD_REAL  1.80000000000000E+0000
44443: MUL
44444: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44445: LD_VAR 0 6
44449: PPUSH
44450: CALL_OW 257
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: LD_INT 3
44463: PUSH
44464: LD_INT 4
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: IN
44473: PUSH
44474: LD_VAR 0 1
44478: PPUSH
44479: LD_INT 51
44481: PPUSH
44482: CALL_OW 321
44486: PUSH
44487: LD_INT 2
44489: EQUAL
44490: AND
44491: IFFALSE 44508
// bpoints := bpoints * 1.2 ;
44493: LD_ADDR_VAR 0 10
44497: PUSH
44498: LD_VAR 0 10
44502: PUSH
44503: LD_REAL  1.20000000000000E+0000
44506: MUL
44507: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44508: LD_VAR 0 6
44512: PPUSH
44513: CALL_OW 257
44517: PUSH
44518: LD_INT 5
44520: PUSH
44521: LD_INT 7
44523: PUSH
44524: LD_INT 9
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: IN
44532: PUSH
44533: LD_VAR 0 1
44537: PPUSH
44538: LD_INT 52
44540: PPUSH
44541: CALL_OW 321
44545: PUSH
44546: LD_INT 2
44548: EQUAL
44549: AND
44550: IFFALSE 44567
// bpoints := bpoints * 1.5 ;
44552: LD_ADDR_VAR 0 10
44556: PUSH
44557: LD_VAR 0 10
44561: PUSH
44562: LD_REAL  1.50000000000000E+0000
44565: MUL
44566: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44567: LD_VAR 0 1
44571: PPUSH
44572: LD_INT 66
44574: PPUSH
44575: CALL_OW 321
44579: PUSH
44580: LD_INT 2
44582: EQUAL
44583: IFFALSE 44600
// bpoints := bpoints * 1.1 ;
44585: LD_ADDR_VAR 0 10
44589: PUSH
44590: LD_VAR 0 10
44594: PUSH
44595: LD_REAL  1.10000000000000E+0000
44598: MUL
44599: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44600: LD_ADDR_VAR 0 10
44604: PUSH
44605: LD_VAR 0 10
44609: PUSH
44610: LD_VAR 0 6
44614: PPUSH
44615: LD_INT 1
44617: PPUSH
44618: CALL_OW 259
44622: PUSH
44623: LD_REAL  1.15000000000000E+0000
44626: MUL
44627: MUL
44628: ST_TO_ADDR
// end ; unit_vehicle :
44629: GO 45457
44631: LD_INT 2
44633: DOUBLE
44634: EQUAL
44635: IFTRUE 44639
44637: GO 45445
44639: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44640: LD_VAR 0 6
44644: PPUSH
44645: CALL_OW 264
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: LD_INT 42
44655: PUSH
44656: LD_INT 24
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: IN
44664: IFFALSE 44685
// points := [ 25 , 5 , 3 ] ;
44666: LD_ADDR_VAR 0 9
44670: PUSH
44671: LD_INT 25
44673: PUSH
44674: LD_INT 5
44676: PUSH
44677: LD_INT 3
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: LIST
44684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44685: LD_VAR 0 6
44689: PPUSH
44690: CALL_OW 264
44694: PUSH
44695: LD_INT 4
44697: PUSH
44698: LD_INT 43
44700: PUSH
44701: LD_INT 25
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: LIST
44708: IN
44709: IFFALSE 44730
// points := [ 40 , 15 , 5 ] ;
44711: LD_ADDR_VAR 0 9
44715: PUSH
44716: LD_INT 40
44718: PUSH
44719: LD_INT 15
44721: PUSH
44722: LD_INT 5
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44730: LD_VAR 0 6
44734: PPUSH
44735: CALL_OW 264
44739: PUSH
44740: LD_INT 3
44742: PUSH
44743: LD_INT 23
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: IN
44750: IFFALSE 44771
// points := [ 7 , 25 , 8 ] ;
44752: LD_ADDR_VAR 0 9
44756: PUSH
44757: LD_INT 7
44759: PUSH
44760: LD_INT 25
44762: PUSH
44763: LD_INT 8
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44771: LD_VAR 0 6
44775: PPUSH
44776: CALL_OW 264
44780: PUSH
44781: LD_INT 5
44783: PUSH
44784: LD_INT 27
44786: PUSH
44787: LD_INT 44
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: LIST
44794: IN
44795: IFFALSE 44816
// points := [ 14 , 50 , 16 ] ;
44797: LD_ADDR_VAR 0 9
44801: PUSH
44802: LD_INT 14
44804: PUSH
44805: LD_INT 50
44807: PUSH
44808: LD_INT 16
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44816: LD_VAR 0 6
44820: PPUSH
44821: CALL_OW 264
44825: PUSH
44826: LD_INT 6
44828: PUSH
44829: LD_INT 46
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: IN
44836: IFFALSE 44857
// points := [ 32 , 120 , 70 ] ;
44838: LD_ADDR_VAR 0 9
44842: PUSH
44843: LD_INT 32
44845: PUSH
44846: LD_INT 120
44848: PUSH
44849: LD_INT 70
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: LIST
44856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44857: LD_VAR 0 6
44861: PPUSH
44862: CALL_OW 264
44866: PUSH
44867: LD_INT 7
44869: PUSH
44870: LD_INT 28
44872: PUSH
44873: LD_INT 45
44875: PUSH
44876: LD_INT 92
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: IN
44885: IFFALSE 44906
// points := [ 35 , 20 , 45 ] ;
44887: LD_ADDR_VAR 0 9
44891: PUSH
44892: LD_INT 35
44894: PUSH
44895: LD_INT 20
44897: PUSH
44898: LD_INT 45
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44906: LD_VAR 0 6
44910: PPUSH
44911: CALL_OW 264
44915: PUSH
44916: LD_INT 47
44918: PUSH
44919: EMPTY
44920: LIST
44921: IN
44922: IFFALSE 44943
// points := [ 67 , 45 , 75 ] ;
44924: LD_ADDR_VAR 0 9
44928: PUSH
44929: LD_INT 67
44931: PUSH
44932: LD_INT 45
44934: PUSH
44935: LD_INT 75
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: LIST
44942: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44943: LD_VAR 0 6
44947: PPUSH
44948: CALL_OW 264
44952: PUSH
44953: LD_INT 26
44955: PUSH
44956: EMPTY
44957: LIST
44958: IN
44959: IFFALSE 44980
// points := [ 120 , 30 , 80 ] ;
44961: LD_ADDR_VAR 0 9
44965: PUSH
44966: LD_INT 120
44968: PUSH
44969: LD_INT 30
44971: PUSH
44972: LD_INT 80
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: LIST
44979: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44980: LD_VAR 0 6
44984: PPUSH
44985: CALL_OW 264
44989: PUSH
44990: LD_INT 22
44992: PUSH
44993: EMPTY
44994: LIST
44995: IN
44996: IFFALSE 45017
// points := [ 40 , 1 , 1 ] ;
44998: LD_ADDR_VAR 0 9
45002: PUSH
45003: LD_INT 40
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45017: LD_VAR 0 6
45021: PPUSH
45022: CALL_OW 264
45026: PUSH
45027: LD_INT 29
45029: PUSH
45030: EMPTY
45031: LIST
45032: IN
45033: IFFALSE 45054
// points := [ 70 , 200 , 400 ] ;
45035: LD_ADDR_VAR 0 9
45039: PUSH
45040: LD_INT 70
45042: PUSH
45043: LD_INT 200
45045: PUSH
45046: LD_INT 400
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45054: LD_VAR 0 6
45058: PPUSH
45059: CALL_OW 264
45063: PUSH
45064: LD_INT 14
45066: PUSH
45067: LD_INT 53
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: IN
45074: IFFALSE 45095
// points := [ 40 , 10 , 20 ] ;
45076: LD_ADDR_VAR 0 9
45080: PUSH
45081: LD_INT 40
45083: PUSH
45084: LD_INT 10
45086: PUSH
45087: LD_INT 20
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: LIST
45094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45095: LD_VAR 0 6
45099: PPUSH
45100: CALL_OW 264
45104: PUSH
45105: LD_INT 9
45107: PUSH
45108: EMPTY
45109: LIST
45110: IN
45111: IFFALSE 45132
// points := [ 5 , 70 , 20 ] ;
45113: LD_ADDR_VAR 0 9
45117: PUSH
45118: LD_INT 5
45120: PUSH
45121: LD_INT 70
45123: PUSH
45124: LD_INT 20
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: LIST
45131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45132: LD_VAR 0 6
45136: PPUSH
45137: CALL_OW 264
45141: PUSH
45142: LD_INT 10
45144: PUSH
45145: EMPTY
45146: LIST
45147: IN
45148: IFFALSE 45169
// points := [ 35 , 110 , 70 ] ;
45150: LD_ADDR_VAR 0 9
45154: PUSH
45155: LD_INT 35
45157: PUSH
45158: LD_INT 110
45160: PUSH
45161: LD_INT 70
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: LIST
45168: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45169: LD_VAR 0 6
45173: PPUSH
45174: CALL_OW 265
45178: PUSH
45179: LD_INT 25
45181: EQUAL
45182: IFFALSE 45203
// points := [ 80 , 65 , 100 ] ;
45184: LD_ADDR_VAR 0 9
45188: PUSH
45189: LD_INT 80
45191: PUSH
45192: LD_INT 65
45194: PUSH
45195: LD_INT 100
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: LIST
45202: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45203: LD_VAR 0 6
45207: PPUSH
45208: CALL_OW 263
45212: PUSH
45213: LD_INT 1
45215: EQUAL
45216: IFFALSE 45251
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45218: LD_ADDR_VAR 0 10
45222: PUSH
45223: LD_VAR 0 10
45227: PUSH
45228: LD_VAR 0 6
45232: PPUSH
45233: CALL_OW 311
45237: PPUSH
45238: LD_INT 3
45240: PPUSH
45241: CALL_OW 259
45245: PUSH
45246: LD_INT 4
45248: MUL
45249: MUL
45250: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45251: LD_VAR 0 6
45255: PPUSH
45256: CALL_OW 263
45260: PUSH
45261: LD_INT 2
45263: EQUAL
45264: IFFALSE 45315
// begin j := IsControledBy ( i ) ;
45266: LD_ADDR_VAR 0 7
45270: PUSH
45271: LD_VAR 0 6
45275: PPUSH
45276: CALL_OW 312
45280: ST_TO_ADDR
// if j then
45281: LD_VAR 0 7
45285: IFFALSE 45315
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45287: LD_ADDR_VAR 0 10
45291: PUSH
45292: LD_VAR 0 10
45296: PUSH
45297: LD_VAR 0 7
45301: PPUSH
45302: LD_INT 3
45304: PPUSH
45305: CALL_OW 259
45309: PUSH
45310: LD_INT 3
45312: MUL
45313: MUL
45314: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45315: LD_VAR 0 6
45319: PPUSH
45320: CALL_OW 264
45324: PUSH
45325: LD_INT 5
45327: PUSH
45328: LD_INT 6
45330: PUSH
45331: LD_INT 46
45333: PUSH
45334: LD_INT 44
45336: PUSH
45337: LD_INT 47
45339: PUSH
45340: LD_INT 45
45342: PUSH
45343: LD_INT 28
45345: PUSH
45346: LD_INT 7
45348: PUSH
45349: LD_INT 27
45351: PUSH
45352: LD_INT 29
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: IN
45367: PUSH
45368: LD_VAR 0 1
45372: PPUSH
45373: LD_INT 52
45375: PPUSH
45376: CALL_OW 321
45380: PUSH
45381: LD_INT 2
45383: EQUAL
45384: AND
45385: IFFALSE 45402
// bpoints := bpoints * 1.2 ;
45387: LD_ADDR_VAR 0 10
45391: PUSH
45392: LD_VAR 0 10
45396: PUSH
45397: LD_REAL  1.20000000000000E+0000
45400: MUL
45401: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45402: LD_VAR 0 6
45406: PPUSH
45407: CALL_OW 264
45411: PUSH
45412: LD_INT 6
45414: PUSH
45415: LD_INT 46
45417: PUSH
45418: LD_INT 47
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: LIST
45425: IN
45426: IFFALSE 45443
// bpoints := bpoints * 1.2 ;
45428: LD_ADDR_VAR 0 10
45432: PUSH
45433: LD_VAR 0 10
45437: PUSH
45438: LD_REAL  1.20000000000000E+0000
45441: MUL
45442: ST_TO_ADDR
// end ; unit_building :
45443: GO 45457
45445: LD_INT 3
45447: DOUBLE
45448: EQUAL
45449: IFTRUE 45453
45451: GO 45456
45453: POP
// ; end ;
45454: GO 45457
45456: POP
// for j = 1 to 3 do
45457: LD_ADDR_VAR 0 7
45461: PUSH
45462: DOUBLE
45463: LD_INT 1
45465: DEC
45466: ST_TO_ADDR
45467: LD_INT 3
45469: PUSH
45470: FOR_TO
45471: IFFALSE 45524
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45473: LD_ADDR_VAR 0 5
45477: PUSH
45478: LD_VAR 0 5
45482: PPUSH
45483: LD_VAR 0 7
45487: PPUSH
45488: LD_VAR 0 5
45492: PUSH
45493: LD_VAR 0 7
45497: ARRAY
45498: PUSH
45499: LD_VAR 0 9
45503: PUSH
45504: LD_VAR 0 7
45508: ARRAY
45509: PUSH
45510: LD_VAR 0 10
45514: MUL
45515: PLUS
45516: PPUSH
45517: CALL_OW 1
45521: ST_TO_ADDR
45522: GO 45470
45524: POP
45525: POP
// end ;
45526: GO 44005
45528: POP
45529: POP
// result := Replace ( result , 4 , tmp ) ;
45530: LD_ADDR_VAR 0 5
45534: PUSH
45535: LD_VAR 0 5
45539: PPUSH
45540: LD_INT 4
45542: PPUSH
45543: LD_VAR 0 8
45547: PPUSH
45548: CALL_OW 1
45552: ST_TO_ADDR
// end ;
45553: LD_VAR 0 5
45557: RET
// export function DangerAtRange ( unit , range ) ; begin
45558: LD_INT 0
45560: PPUSH
// if not unit then
45561: LD_VAR 0 1
45565: NOT
45566: IFFALSE 45570
// exit ;
45568: GO 45615
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45570: LD_ADDR_VAR 0 3
45574: PUSH
45575: LD_VAR 0 1
45579: PPUSH
45580: CALL_OW 255
45584: PPUSH
45585: LD_VAR 0 1
45589: PPUSH
45590: CALL_OW 250
45594: PPUSH
45595: LD_VAR 0 1
45599: PPUSH
45600: CALL_OW 251
45604: PPUSH
45605: LD_VAR 0 2
45609: PPUSH
45610: CALL 43857 0 4
45614: ST_TO_ADDR
// end ;
45615: LD_VAR 0 3
45619: RET
// export function DangerInArea ( side , area ) ; begin
45620: LD_INT 0
45622: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45623: LD_ADDR_VAR 0 3
45627: PUSH
45628: LD_VAR 0 2
45632: PPUSH
45633: LD_INT 81
45635: PUSH
45636: LD_VAR 0 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PPUSH
45645: CALL_OW 70
45649: ST_TO_ADDR
// end ;
45650: LD_VAR 0 3
45654: RET
// export function IsExtension ( b ) ; begin
45655: LD_INT 0
45657: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45658: LD_ADDR_VAR 0 2
45662: PUSH
45663: LD_VAR 0 1
45667: PUSH
45668: LD_INT 23
45670: PUSH
45671: LD_INT 20
45673: PUSH
45674: LD_INT 22
45676: PUSH
45677: LD_INT 17
45679: PUSH
45680: LD_INT 24
45682: PUSH
45683: LD_INT 21
45685: PUSH
45686: LD_INT 19
45688: PUSH
45689: LD_INT 16
45691: PUSH
45692: LD_INT 25
45694: PUSH
45695: LD_INT 18
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: IN
45710: ST_TO_ADDR
// end ;
45711: LD_VAR 0 2
45715: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45716: LD_INT 0
45718: PPUSH
45719: PPUSH
45720: PPUSH
// result := [ ] ;
45721: LD_ADDR_VAR 0 4
45725: PUSH
45726: EMPTY
45727: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45728: LD_ADDR_VAR 0 5
45732: PUSH
45733: LD_VAR 0 2
45737: PPUSH
45738: LD_INT 21
45740: PUSH
45741: LD_INT 3
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PPUSH
45748: CALL_OW 70
45752: ST_TO_ADDR
// if not tmp then
45753: LD_VAR 0 5
45757: NOT
45758: IFFALSE 45762
// exit ;
45760: GO 45826
// if checkLink then
45762: LD_VAR 0 3
45766: IFFALSE 45816
// begin for i in tmp do
45768: LD_ADDR_VAR 0 6
45772: PUSH
45773: LD_VAR 0 5
45777: PUSH
45778: FOR_IN
45779: IFFALSE 45814
// if GetBase ( i ) <> base then
45781: LD_VAR 0 6
45785: PPUSH
45786: CALL_OW 274
45790: PUSH
45791: LD_VAR 0 1
45795: NONEQUAL
45796: IFFALSE 45812
// ComLinkToBase ( base , i ) ;
45798: LD_VAR 0 1
45802: PPUSH
45803: LD_VAR 0 6
45807: PPUSH
45808: CALL_OW 169
45812: GO 45778
45814: POP
45815: POP
// end ; result := tmp ;
45816: LD_ADDR_VAR 0 4
45820: PUSH
45821: LD_VAR 0 5
45825: ST_TO_ADDR
// end ;
45826: LD_VAR 0 4
45830: RET
// export function ComComplete ( units , b ) ; var i ; begin
45831: LD_INT 0
45833: PPUSH
45834: PPUSH
// if not units then
45835: LD_VAR 0 1
45839: NOT
45840: IFFALSE 45844
// exit ;
45842: GO 45934
// for i in units do
45844: LD_ADDR_VAR 0 4
45848: PUSH
45849: LD_VAR 0 1
45853: PUSH
45854: FOR_IN
45855: IFFALSE 45932
// if BuildingStatus ( b ) = bs_build then
45857: LD_VAR 0 2
45861: PPUSH
45862: CALL_OW 461
45866: PUSH
45867: LD_INT 1
45869: EQUAL
45870: IFFALSE 45930
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45872: LD_VAR 0 4
45876: PPUSH
45877: LD_STRING h
45879: PUSH
45880: LD_VAR 0 2
45884: PPUSH
45885: CALL_OW 250
45889: PUSH
45890: LD_VAR 0 2
45894: PPUSH
45895: CALL_OW 251
45899: PUSH
45900: LD_VAR 0 2
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: PUSH
45923: EMPTY
45924: LIST
45925: PPUSH
45926: CALL_OW 446
45930: GO 45854
45932: POP
45933: POP
// end ;
45934: LD_VAR 0 3
45938: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45939: LD_INT 0
45941: PPUSH
45942: PPUSH
45943: PPUSH
45944: PPUSH
45945: PPUSH
45946: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45947: LD_VAR 0 1
45951: NOT
45952: PUSH
45953: LD_VAR 0 1
45957: PPUSH
45958: CALL_OW 263
45962: PUSH
45963: LD_INT 2
45965: NONEQUAL
45966: OR
45967: IFFALSE 45971
// exit ;
45969: GO 46287
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45971: LD_ADDR_VAR 0 6
45975: PUSH
45976: LD_INT 22
45978: PUSH
45979: LD_VAR 0 1
45983: PPUSH
45984: CALL_OW 255
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 30
45998: PUSH
45999: LD_INT 36
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 34
46008: PUSH
46009: LD_INT 31
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PPUSH
46025: CALL_OW 69
46029: ST_TO_ADDR
// if not tmp then
46030: LD_VAR 0 6
46034: NOT
46035: IFFALSE 46039
// exit ;
46037: GO 46287
// result := [ ] ;
46039: LD_ADDR_VAR 0 2
46043: PUSH
46044: EMPTY
46045: ST_TO_ADDR
// for i in tmp do
46046: LD_ADDR_VAR 0 3
46050: PUSH
46051: LD_VAR 0 6
46055: PUSH
46056: FOR_IN
46057: IFFALSE 46128
// begin t := UnitsInside ( i ) ;
46059: LD_ADDR_VAR 0 4
46063: PUSH
46064: LD_VAR 0 3
46068: PPUSH
46069: CALL_OW 313
46073: ST_TO_ADDR
// if t then
46074: LD_VAR 0 4
46078: IFFALSE 46126
// for j in t do
46080: LD_ADDR_VAR 0 7
46084: PUSH
46085: LD_VAR 0 4
46089: PUSH
46090: FOR_IN
46091: IFFALSE 46124
// result := Replace ( result , result + 1 , j ) ;
46093: LD_ADDR_VAR 0 2
46097: PUSH
46098: LD_VAR 0 2
46102: PPUSH
46103: LD_VAR 0 2
46107: PUSH
46108: LD_INT 1
46110: PLUS
46111: PPUSH
46112: LD_VAR 0 7
46116: PPUSH
46117: CALL_OW 1
46121: ST_TO_ADDR
46122: GO 46090
46124: POP
46125: POP
// end ;
46126: GO 46056
46128: POP
46129: POP
// if not result then
46130: LD_VAR 0 2
46134: NOT
46135: IFFALSE 46139
// exit ;
46137: GO 46287
// mech := result [ 1 ] ;
46139: LD_ADDR_VAR 0 5
46143: PUSH
46144: LD_VAR 0 2
46148: PUSH
46149: LD_INT 1
46151: ARRAY
46152: ST_TO_ADDR
// if result > 1 then
46153: LD_VAR 0 2
46157: PUSH
46158: LD_INT 1
46160: GREATER
46161: IFFALSE 46273
// begin for i = 2 to result do
46163: LD_ADDR_VAR 0 3
46167: PUSH
46168: DOUBLE
46169: LD_INT 2
46171: DEC
46172: ST_TO_ADDR
46173: LD_VAR 0 2
46177: PUSH
46178: FOR_TO
46179: IFFALSE 46271
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46181: LD_ADDR_VAR 0 4
46185: PUSH
46186: LD_VAR 0 2
46190: PUSH
46191: LD_VAR 0 3
46195: ARRAY
46196: PPUSH
46197: LD_INT 3
46199: PPUSH
46200: CALL_OW 259
46204: PUSH
46205: LD_VAR 0 2
46209: PUSH
46210: LD_VAR 0 3
46214: ARRAY
46215: PPUSH
46216: CALL_OW 432
46220: MINUS
46221: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46222: LD_VAR 0 4
46226: PUSH
46227: LD_VAR 0 5
46231: PPUSH
46232: LD_INT 3
46234: PPUSH
46235: CALL_OW 259
46239: PUSH
46240: LD_VAR 0 5
46244: PPUSH
46245: CALL_OW 432
46249: MINUS
46250: GREATEREQUAL
46251: IFFALSE 46269
// mech := result [ i ] ;
46253: LD_ADDR_VAR 0 5
46257: PUSH
46258: LD_VAR 0 2
46262: PUSH
46263: LD_VAR 0 3
46267: ARRAY
46268: ST_TO_ADDR
// end ;
46269: GO 46178
46271: POP
46272: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46273: LD_VAR 0 1
46277: PPUSH
46278: LD_VAR 0 5
46282: PPUSH
46283: CALL_OW 135
// end ;
46287: LD_VAR 0 2
46291: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46292: LD_INT 0
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
46306: PPUSH
// result := [ ] ;
46307: LD_ADDR_VAR 0 7
46311: PUSH
46312: EMPTY
46313: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46314: LD_VAR 0 1
46318: PPUSH
46319: CALL_OW 266
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: IN
46334: NOT
46335: IFFALSE 46339
// exit ;
46337: GO 47973
// if name then
46339: LD_VAR 0 3
46343: IFFALSE 46359
// SetBName ( base_dep , name ) ;
46345: LD_VAR 0 1
46349: PPUSH
46350: LD_VAR 0 3
46354: PPUSH
46355: CALL_OW 500
// base := GetBase ( base_dep ) ;
46359: LD_ADDR_VAR 0 15
46363: PUSH
46364: LD_VAR 0 1
46368: PPUSH
46369: CALL_OW 274
46373: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46374: LD_ADDR_VAR 0 16
46378: PUSH
46379: LD_VAR 0 1
46383: PPUSH
46384: CALL_OW 255
46388: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46389: LD_ADDR_VAR 0 17
46393: PUSH
46394: LD_VAR 0 1
46398: PPUSH
46399: CALL_OW 248
46403: ST_TO_ADDR
// if sources then
46404: LD_VAR 0 5
46408: IFFALSE 46455
// for i = 1 to 3 do
46410: LD_ADDR_VAR 0 8
46414: PUSH
46415: DOUBLE
46416: LD_INT 1
46418: DEC
46419: ST_TO_ADDR
46420: LD_INT 3
46422: PUSH
46423: FOR_TO
46424: IFFALSE 46453
// AddResourceType ( base , i , sources [ i ] ) ;
46426: LD_VAR 0 15
46430: PPUSH
46431: LD_VAR 0 8
46435: PPUSH
46436: LD_VAR 0 5
46440: PUSH
46441: LD_VAR 0 8
46445: ARRAY
46446: PPUSH
46447: CALL_OW 276
46451: GO 46423
46453: POP
46454: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46455: LD_ADDR_VAR 0 18
46459: PUSH
46460: LD_VAR 0 15
46464: PPUSH
46465: LD_VAR 0 2
46469: PPUSH
46470: LD_INT 1
46472: PPUSH
46473: CALL 45716 0 3
46477: ST_TO_ADDR
// InitHc ;
46478: CALL_OW 19
// InitUc ;
46482: CALL_OW 18
// uc_side := side ;
46486: LD_ADDR_OWVAR 20
46490: PUSH
46491: LD_VAR 0 16
46495: ST_TO_ADDR
// uc_nation := nation ;
46496: LD_ADDR_OWVAR 21
46500: PUSH
46501: LD_VAR 0 17
46505: ST_TO_ADDR
// if buildings then
46506: LD_VAR 0 18
46510: IFFALSE 47832
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46512: LD_ADDR_VAR 0 19
46516: PUSH
46517: LD_VAR 0 18
46521: PPUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 30
46527: PUSH
46528: LD_INT 29
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 30
46537: PUSH
46538: LD_INT 30
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: LIST
46549: PPUSH
46550: CALL_OW 72
46554: ST_TO_ADDR
// if tmp then
46555: LD_VAR 0 19
46559: IFFALSE 46607
// for i in tmp do
46561: LD_ADDR_VAR 0 8
46565: PUSH
46566: LD_VAR 0 19
46570: PUSH
46571: FOR_IN
46572: IFFALSE 46605
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46574: LD_VAR 0 8
46578: PPUSH
46579: CALL_OW 250
46583: PPUSH
46584: LD_VAR 0 8
46588: PPUSH
46589: CALL_OW 251
46593: PPUSH
46594: LD_VAR 0 16
46598: PPUSH
46599: CALL_OW 441
46603: GO 46571
46605: POP
46606: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46607: LD_VAR 0 18
46611: PPUSH
46612: LD_INT 2
46614: PUSH
46615: LD_INT 30
46617: PUSH
46618: LD_INT 32
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 30
46627: PUSH
46628: LD_INT 33
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: LIST
46639: PPUSH
46640: CALL_OW 72
46644: IFFALSE 46732
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46646: LD_ADDR_VAR 0 8
46650: PUSH
46651: LD_VAR 0 18
46655: PPUSH
46656: LD_INT 2
46658: PUSH
46659: LD_INT 30
46661: PUSH
46662: LD_INT 32
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 30
46671: PUSH
46672: LD_INT 33
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: LIST
46683: PPUSH
46684: CALL_OW 72
46688: PUSH
46689: FOR_IN
46690: IFFALSE 46730
// begin if not GetBWeapon ( i ) then
46692: LD_VAR 0 8
46696: PPUSH
46697: CALL_OW 269
46701: NOT
46702: IFFALSE 46728
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46704: LD_VAR 0 8
46708: PPUSH
46709: LD_VAR 0 8
46713: PPUSH
46714: LD_VAR 0 2
46718: PPUSH
46719: CALL 47978 0 2
46723: PPUSH
46724: CALL_OW 431
// end ;
46728: GO 46689
46730: POP
46731: POP
// end ; for i = 1 to personel do
46732: LD_ADDR_VAR 0 8
46736: PUSH
46737: DOUBLE
46738: LD_INT 1
46740: DEC
46741: ST_TO_ADDR
46742: LD_VAR 0 6
46746: PUSH
46747: FOR_TO
46748: IFFALSE 47812
// begin if i > 4 then
46750: LD_VAR 0 8
46754: PUSH
46755: LD_INT 4
46757: GREATER
46758: IFFALSE 46762
// break ;
46760: GO 47812
// case i of 1 :
46762: LD_VAR 0 8
46766: PUSH
46767: LD_INT 1
46769: DOUBLE
46770: EQUAL
46771: IFTRUE 46775
46773: GO 46855
46775: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46776: LD_ADDR_VAR 0 12
46780: PUSH
46781: LD_VAR 0 18
46785: PPUSH
46786: LD_INT 22
46788: PUSH
46789: LD_VAR 0 16
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 58
46800: PUSH
46801: EMPTY
46802: LIST
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: LD_INT 30
46809: PUSH
46810: LD_INT 32
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 30
46819: PUSH
46820: LD_INT 4
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 30
46829: PUSH
46830: LD_INT 5
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: LIST
46847: PPUSH
46848: CALL_OW 72
46852: ST_TO_ADDR
46853: GO 47077
46855: LD_INT 2
46857: DOUBLE
46858: EQUAL
46859: IFTRUE 46863
46861: GO 46925
46863: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46864: LD_ADDR_VAR 0 12
46868: PUSH
46869: LD_VAR 0 18
46873: PPUSH
46874: LD_INT 22
46876: PUSH
46877: LD_VAR 0 16
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: LD_INT 30
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 30
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: LIST
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PPUSH
46918: CALL_OW 72
46922: ST_TO_ADDR
46923: GO 47077
46925: LD_INT 3
46927: DOUBLE
46928: EQUAL
46929: IFTRUE 46933
46931: GO 46995
46933: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46934: LD_ADDR_VAR 0 12
46938: PUSH
46939: LD_VAR 0 18
46943: PPUSH
46944: LD_INT 22
46946: PUSH
46947: LD_VAR 0 16
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: LD_INT 30
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 30
46971: PUSH
46972: LD_INT 3
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PPUSH
46988: CALL_OW 72
46992: ST_TO_ADDR
46993: GO 47077
46995: LD_INT 4
46997: DOUBLE
46998: EQUAL
46999: IFTRUE 47003
47001: GO 47076
47003: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47004: LD_ADDR_VAR 0 12
47008: PUSH
47009: LD_VAR 0 18
47013: PPUSH
47014: LD_INT 22
47016: PUSH
47017: LD_VAR 0 16
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 30
47031: PUSH
47032: LD_INT 6
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 30
47041: PUSH
47042: LD_INT 7
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 30
47051: PUSH
47052: LD_INT 8
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PPUSH
47069: CALL_OW 72
47073: ST_TO_ADDR
47074: GO 47077
47076: POP
// if i = 1 then
47077: LD_VAR 0 8
47081: PUSH
47082: LD_INT 1
47084: EQUAL
47085: IFFALSE 47196
// begin tmp := [ ] ;
47087: LD_ADDR_VAR 0 19
47091: PUSH
47092: EMPTY
47093: ST_TO_ADDR
// for j in f do
47094: LD_ADDR_VAR 0 9
47098: PUSH
47099: LD_VAR 0 12
47103: PUSH
47104: FOR_IN
47105: IFFALSE 47178
// if GetBType ( j ) = b_bunker then
47107: LD_VAR 0 9
47111: PPUSH
47112: CALL_OW 266
47116: PUSH
47117: LD_INT 32
47119: EQUAL
47120: IFFALSE 47147
// tmp := Insert ( tmp , 1 , j ) else
47122: LD_ADDR_VAR 0 19
47126: PUSH
47127: LD_VAR 0 19
47131: PPUSH
47132: LD_INT 1
47134: PPUSH
47135: LD_VAR 0 9
47139: PPUSH
47140: CALL_OW 2
47144: ST_TO_ADDR
47145: GO 47176
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47147: LD_ADDR_VAR 0 19
47151: PUSH
47152: LD_VAR 0 19
47156: PPUSH
47157: LD_VAR 0 19
47161: PUSH
47162: LD_INT 1
47164: PLUS
47165: PPUSH
47166: LD_VAR 0 9
47170: PPUSH
47171: CALL_OW 2
47175: ST_TO_ADDR
47176: GO 47104
47178: POP
47179: POP
// if tmp then
47180: LD_VAR 0 19
47184: IFFALSE 47196
// f := tmp ;
47186: LD_ADDR_VAR 0 12
47190: PUSH
47191: LD_VAR 0 19
47195: ST_TO_ADDR
// end ; x := personel [ i ] ;
47196: LD_ADDR_VAR 0 13
47200: PUSH
47201: LD_VAR 0 6
47205: PUSH
47206: LD_VAR 0 8
47210: ARRAY
47211: ST_TO_ADDR
// if x = - 1 then
47212: LD_VAR 0 13
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: EQUAL
47221: IFFALSE 47430
// begin for j in f do
47223: LD_ADDR_VAR 0 9
47227: PUSH
47228: LD_VAR 0 12
47232: PUSH
47233: FOR_IN
47234: IFFALSE 47426
// repeat InitHc ;
47236: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47240: LD_VAR 0 9
47244: PPUSH
47245: CALL_OW 266
47249: PUSH
47250: LD_INT 5
47252: EQUAL
47253: IFFALSE 47323
// begin if UnitsInside ( j ) < 3 then
47255: LD_VAR 0 9
47259: PPUSH
47260: CALL_OW 313
47264: PUSH
47265: LD_INT 3
47267: LESS
47268: IFFALSE 47304
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47270: LD_INT 0
47272: PPUSH
47273: LD_INT 5
47275: PUSH
47276: LD_INT 8
47278: PUSH
47279: LD_INT 9
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: LIST
47286: PUSH
47287: LD_VAR 0 17
47291: ARRAY
47292: PPUSH
47293: LD_VAR 0 4
47297: PPUSH
47298: CALL_OW 380
47302: GO 47321
// PrepareHuman ( false , i , skill ) ;
47304: LD_INT 0
47306: PPUSH
47307: LD_VAR 0 8
47311: PPUSH
47312: LD_VAR 0 4
47316: PPUSH
47317: CALL_OW 380
// end else
47321: GO 47340
// PrepareHuman ( false , i , skill ) ;
47323: LD_INT 0
47325: PPUSH
47326: LD_VAR 0 8
47330: PPUSH
47331: LD_VAR 0 4
47335: PPUSH
47336: CALL_OW 380
// un := CreateHuman ;
47340: LD_ADDR_VAR 0 14
47344: PUSH
47345: CALL_OW 44
47349: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47350: LD_ADDR_VAR 0 7
47354: PUSH
47355: LD_VAR 0 7
47359: PPUSH
47360: LD_INT 1
47362: PPUSH
47363: LD_VAR 0 14
47367: PPUSH
47368: CALL_OW 2
47372: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47373: LD_VAR 0 14
47377: PPUSH
47378: LD_VAR 0 9
47382: PPUSH
47383: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47387: LD_VAR 0 9
47391: PPUSH
47392: CALL_OW 313
47396: PUSH
47397: LD_INT 6
47399: EQUAL
47400: PUSH
47401: LD_VAR 0 9
47405: PPUSH
47406: CALL_OW 266
47410: PUSH
47411: LD_INT 32
47413: PUSH
47414: LD_INT 31
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: IN
47421: OR
47422: IFFALSE 47236
47424: GO 47233
47426: POP
47427: POP
// end else
47428: GO 47810
// for j = 1 to x do
47430: LD_ADDR_VAR 0 9
47434: PUSH
47435: DOUBLE
47436: LD_INT 1
47438: DEC
47439: ST_TO_ADDR
47440: LD_VAR 0 13
47444: PUSH
47445: FOR_TO
47446: IFFALSE 47808
// begin InitHc ;
47448: CALL_OW 19
// if not f then
47452: LD_VAR 0 12
47456: NOT
47457: IFFALSE 47546
// begin PrepareHuman ( false , i , skill ) ;
47459: LD_INT 0
47461: PPUSH
47462: LD_VAR 0 8
47466: PPUSH
47467: LD_VAR 0 4
47471: PPUSH
47472: CALL_OW 380
// un := CreateHuman ;
47476: LD_ADDR_VAR 0 14
47480: PUSH
47481: CALL_OW 44
47485: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47486: LD_ADDR_VAR 0 7
47490: PUSH
47491: LD_VAR 0 7
47495: PPUSH
47496: LD_INT 1
47498: PPUSH
47499: LD_VAR 0 14
47503: PPUSH
47504: CALL_OW 2
47508: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47509: LD_VAR 0 14
47513: PPUSH
47514: LD_VAR 0 1
47518: PPUSH
47519: CALL_OW 250
47523: PPUSH
47524: LD_VAR 0 1
47528: PPUSH
47529: CALL_OW 251
47533: PPUSH
47534: LD_INT 10
47536: PPUSH
47537: LD_INT 0
47539: PPUSH
47540: CALL_OW 50
// continue ;
47544: GO 47445
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47546: LD_VAR 0 12
47550: PUSH
47551: LD_INT 1
47553: ARRAY
47554: PPUSH
47555: CALL_OW 313
47559: PUSH
47560: LD_VAR 0 12
47564: PUSH
47565: LD_INT 1
47567: ARRAY
47568: PPUSH
47569: CALL_OW 266
47573: PUSH
47574: LD_INT 32
47576: PUSH
47577: LD_INT 31
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: IN
47584: AND
47585: PUSH
47586: LD_VAR 0 12
47590: PUSH
47591: LD_INT 1
47593: ARRAY
47594: PPUSH
47595: CALL_OW 313
47599: PUSH
47600: LD_INT 6
47602: EQUAL
47603: OR
47604: IFFALSE 47624
// f := Delete ( f , 1 ) ;
47606: LD_ADDR_VAR 0 12
47610: PUSH
47611: LD_VAR 0 12
47615: PPUSH
47616: LD_INT 1
47618: PPUSH
47619: CALL_OW 3
47623: ST_TO_ADDR
// if not f then
47624: LD_VAR 0 12
47628: NOT
47629: IFFALSE 47647
// begin x := x + 2 ;
47631: LD_ADDR_VAR 0 13
47635: PUSH
47636: LD_VAR 0 13
47640: PUSH
47641: LD_INT 2
47643: PLUS
47644: ST_TO_ADDR
// continue ;
47645: GO 47445
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47647: LD_VAR 0 12
47651: PUSH
47652: LD_INT 1
47654: ARRAY
47655: PPUSH
47656: CALL_OW 266
47660: PUSH
47661: LD_INT 5
47663: EQUAL
47664: IFFALSE 47738
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47666: LD_VAR 0 12
47670: PUSH
47671: LD_INT 1
47673: ARRAY
47674: PPUSH
47675: CALL_OW 313
47679: PUSH
47680: LD_INT 3
47682: LESS
47683: IFFALSE 47719
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47685: LD_INT 0
47687: PPUSH
47688: LD_INT 5
47690: PUSH
47691: LD_INT 8
47693: PUSH
47694: LD_INT 9
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: LIST
47701: PUSH
47702: LD_VAR 0 17
47706: ARRAY
47707: PPUSH
47708: LD_VAR 0 4
47712: PPUSH
47713: CALL_OW 380
47717: GO 47736
// PrepareHuman ( false , i , skill ) ;
47719: LD_INT 0
47721: PPUSH
47722: LD_VAR 0 8
47726: PPUSH
47727: LD_VAR 0 4
47731: PPUSH
47732: CALL_OW 380
// end else
47736: GO 47755
// PrepareHuman ( false , i , skill ) ;
47738: LD_INT 0
47740: PPUSH
47741: LD_VAR 0 8
47745: PPUSH
47746: LD_VAR 0 4
47750: PPUSH
47751: CALL_OW 380
// un := CreateHuman ;
47755: LD_ADDR_VAR 0 14
47759: PUSH
47760: CALL_OW 44
47764: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47765: LD_ADDR_VAR 0 7
47769: PUSH
47770: LD_VAR 0 7
47774: PPUSH
47775: LD_INT 1
47777: PPUSH
47778: LD_VAR 0 14
47782: PPUSH
47783: CALL_OW 2
47787: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47788: LD_VAR 0 14
47792: PPUSH
47793: LD_VAR 0 12
47797: PUSH
47798: LD_INT 1
47800: ARRAY
47801: PPUSH
47802: CALL_OW 52
// end ;
47806: GO 47445
47808: POP
47809: POP
// end ;
47810: GO 46747
47812: POP
47813: POP
// result := result ^ buildings ;
47814: LD_ADDR_VAR 0 7
47818: PUSH
47819: LD_VAR 0 7
47823: PUSH
47824: LD_VAR 0 18
47828: ADD
47829: ST_TO_ADDR
// end else
47830: GO 47973
// begin for i = 1 to personel do
47832: LD_ADDR_VAR 0 8
47836: PUSH
47837: DOUBLE
47838: LD_INT 1
47840: DEC
47841: ST_TO_ADDR
47842: LD_VAR 0 6
47846: PUSH
47847: FOR_TO
47848: IFFALSE 47971
// begin if i > 4 then
47850: LD_VAR 0 8
47854: PUSH
47855: LD_INT 4
47857: GREATER
47858: IFFALSE 47862
// break ;
47860: GO 47971
// x := personel [ i ] ;
47862: LD_ADDR_VAR 0 13
47866: PUSH
47867: LD_VAR 0 6
47871: PUSH
47872: LD_VAR 0 8
47876: ARRAY
47877: ST_TO_ADDR
// if x = - 1 then
47878: LD_VAR 0 13
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: EQUAL
47887: IFFALSE 47891
// continue ;
47889: GO 47847
// PrepareHuman ( false , i , skill ) ;
47891: LD_INT 0
47893: PPUSH
47894: LD_VAR 0 8
47898: PPUSH
47899: LD_VAR 0 4
47903: PPUSH
47904: CALL_OW 380
// un := CreateHuman ;
47908: LD_ADDR_VAR 0 14
47912: PUSH
47913: CALL_OW 44
47917: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47918: LD_VAR 0 14
47922: PPUSH
47923: LD_VAR 0 1
47927: PPUSH
47928: CALL_OW 250
47932: PPUSH
47933: LD_VAR 0 1
47937: PPUSH
47938: CALL_OW 251
47942: PPUSH
47943: LD_INT 10
47945: PPUSH
47946: LD_INT 0
47948: PPUSH
47949: CALL_OW 50
// result := result ^ un ;
47953: LD_ADDR_VAR 0 7
47957: PUSH
47958: LD_VAR 0 7
47962: PUSH
47963: LD_VAR 0 14
47967: ADD
47968: ST_TO_ADDR
// end ;
47969: GO 47847
47971: POP
47972: POP
// end ; end ;
47973: LD_VAR 0 7
47977: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47978: LD_INT 0
47980: PPUSH
47981: PPUSH
47982: PPUSH
47983: PPUSH
47984: PPUSH
47985: PPUSH
47986: PPUSH
47987: PPUSH
47988: PPUSH
47989: PPUSH
47990: PPUSH
47991: PPUSH
47992: PPUSH
47993: PPUSH
47994: PPUSH
47995: PPUSH
// result := false ;
47996: LD_ADDR_VAR 0 3
48000: PUSH
48001: LD_INT 0
48003: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48004: LD_VAR 0 1
48008: NOT
48009: PUSH
48010: LD_VAR 0 1
48014: PPUSH
48015: CALL_OW 266
48019: PUSH
48020: LD_INT 32
48022: PUSH
48023: LD_INT 33
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: IN
48030: NOT
48031: OR
48032: IFFALSE 48036
// exit ;
48034: GO 49145
// nat := GetNation ( tower ) ;
48036: LD_ADDR_VAR 0 12
48040: PUSH
48041: LD_VAR 0 1
48045: PPUSH
48046: CALL_OW 248
48050: ST_TO_ADDR
// side := GetSide ( tower ) ;
48051: LD_ADDR_VAR 0 16
48055: PUSH
48056: LD_VAR 0 1
48060: PPUSH
48061: CALL_OW 255
48065: ST_TO_ADDR
// x := GetX ( tower ) ;
48066: LD_ADDR_VAR 0 10
48070: PUSH
48071: LD_VAR 0 1
48075: PPUSH
48076: CALL_OW 250
48080: ST_TO_ADDR
// y := GetY ( tower ) ;
48081: LD_ADDR_VAR 0 11
48085: PUSH
48086: LD_VAR 0 1
48090: PPUSH
48091: CALL_OW 251
48095: ST_TO_ADDR
// if not x or not y then
48096: LD_VAR 0 10
48100: NOT
48101: PUSH
48102: LD_VAR 0 11
48106: NOT
48107: OR
48108: IFFALSE 48112
// exit ;
48110: GO 49145
// weapon := 0 ;
48112: LD_ADDR_VAR 0 18
48116: PUSH
48117: LD_INT 0
48119: ST_TO_ADDR
// fac_list := [ ] ;
48120: LD_ADDR_VAR 0 17
48124: PUSH
48125: EMPTY
48126: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48127: LD_ADDR_VAR 0 6
48131: PUSH
48132: LD_VAR 0 1
48136: PPUSH
48137: CALL_OW 274
48141: PPUSH
48142: LD_VAR 0 2
48146: PPUSH
48147: LD_INT 0
48149: PPUSH
48150: CALL 45716 0 3
48154: PPUSH
48155: LD_INT 30
48157: PUSH
48158: LD_INT 3
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PPUSH
48165: CALL_OW 72
48169: ST_TO_ADDR
// if not factories then
48170: LD_VAR 0 6
48174: NOT
48175: IFFALSE 48179
// exit ;
48177: GO 49145
// for i in factories do
48179: LD_ADDR_VAR 0 8
48183: PUSH
48184: LD_VAR 0 6
48188: PUSH
48189: FOR_IN
48190: IFFALSE 48215
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48192: LD_ADDR_VAR 0 17
48196: PUSH
48197: LD_VAR 0 17
48201: PUSH
48202: LD_VAR 0 8
48206: PPUSH
48207: CALL_OW 478
48211: UNION
48212: ST_TO_ADDR
48213: GO 48189
48215: POP
48216: POP
// if not fac_list then
48217: LD_VAR 0 17
48221: NOT
48222: IFFALSE 48226
// exit ;
48224: GO 49145
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48226: LD_ADDR_VAR 0 5
48230: PUSH
48231: LD_INT 4
48233: PUSH
48234: LD_INT 5
48236: PUSH
48237: LD_INT 9
48239: PUSH
48240: LD_INT 10
48242: PUSH
48243: LD_INT 6
48245: PUSH
48246: LD_INT 7
48248: PUSH
48249: LD_INT 11
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 27
48263: PUSH
48264: LD_INT 28
48266: PUSH
48267: LD_INT 26
48269: PUSH
48270: LD_INT 30
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 43
48281: PUSH
48282: LD_INT 44
48284: PUSH
48285: LD_INT 46
48287: PUSH
48288: LD_INT 45
48290: PUSH
48291: LD_INT 47
48293: PUSH
48294: LD_INT 49
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: LIST
48309: PUSH
48310: LD_VAR 0 12
48314: ARRAY
48315: ST_TO_ADDR
// list := list isect fac_list ;
48316: LD_ADDR_VAR 0 5
48320: PUSH
48321: LD_VAR 0 5
48325: PUSH
48326: LD_VAR 0 17
48330: ISECT
48331: ST_TO_ADDR
// if not list then
48332: LD_VAR 0 5
48336: NOT
48337: IFFALSE 48341
// exit ;
48339: GO 49145
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48341: LD_VAR 0 12
48345: PUSH
48346: LD_INT 3
48348: EQUAL
48349: PUSH
48350: LD_INT 49
48352: PUSH
48353: LD_VAR 0 5
48357: IN
48358: AND
48359: PUSH
48360: LD_INT 31
48362: PPUSH
48363: LD_VAR 0 16
48367: PPUSH
48368: CALL_OW 321
48372: PUSH
48373: LD_INT 2
48375: EQUAL
48376: AND
48377: IFFALSE 48437
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48379: LD_INT 22
48381: PUSH
48382: LD_VAR 0 16
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 35
48393: PUSH
48394: LD_INT 49
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 91
48403: PUSH
48404: LD_VAR 0 1
48408: PUSH
48409: LD_INT 10
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: LIST
48421: PPUSH
48422: CALL_OW 69
48426: NOT
48427: IFFALSE 48437
// weapon := ru_time_lapser ;
48429: LD_ADDR_VAR 0 18
48433: PUSH
48434: LD_INT 49
48436: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48437: LD_VAR 0 12
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: IN
48452: PUSH
48453: LD_INT 11
48455: PUSH
48456: LD_VAR 0 5
48460: IN
48461: PUSH
48462: LD_INT 30
48464: PUSH
48465: LD_VAR 0 5
48469: IN
48470: OR
48471: AND
48472: PUSH
48473: LD_INT 6
48475: PPUSH
48476: LD_VAR 0 16
48480: PPUSH
48481: CALL_OW 321
48485: PUSH
48486: LD_INT 2
48488: EQUAL
48489: AND
48490: IFFALSE 48655
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48492: LD_INT 22
48494: PUSH
48495: LD_VAR 0 16
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 35
48509: PUSH
48510: LD_INT 11
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 35
48519: PUSH
48520: LD_INT 30
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 91
48534: PUSH
48535: LD_VAR 0 1
48539: PUSH
48540: LD_INT 18
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: LIST
48552: PPUSH
48553: CALL_OW 69
48557: NOT
48558: PUSH
48559: LD_INT 22
48561: PUSH
48562: LD_VAR 0 16
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: LD_INT 30
48576: PUSH
48577: LD_INT 32
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 30
48586: PUSH
48587: LD_INT 33
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 91
48601: PUSH
48602: LD_VAR 0 1
48606: PUSH
48607: LD_INT 12
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: LIST
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: LIST
48619: PUSH
48620: EMPTY
48621: LIST
48622: PPUSH
48623: CALL_OW 69
48627: PUSH
48628: LD_INT 2
48630: GREATER
48631: AND
48632: IFFALSE 48655
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48634: LD_ADDR_VAR 0 18
48638: PUSH
48639: LD_INT 11
48641: PUSH
48642: LD_INT 30
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_VAR 0 12
48653: ARRAY
48654: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48655: LD_VAR 0 18
48659: NOT
48660: PUSH
48661: LD_INT 40
48663: PPUSH
48664: LD_VAR 0 16
48668: PPUSH
48669: CALL_OW 321
48673: PUSH
48674: LD_INT 2
48676: EQUAL
48677: AND
48678: PUSH
48679: LD_INT 7
48681: PUSH
48682: LD_VAR 0 5
48686: IN
48687: PUSH
48688: LD_INT 28
48690: PUSH
48691: LD_VAR 0 5
48695: IN
48696: OR
48697: PUSH
48698: LD_INT 45
48700: PUSH
48701: LD_VAR 0 5
48705: IN
48706: OR
48707: AND
48708: IFFALSE 48962
// begin hex := GetHexInfo ( x , y ) ;
48710: LD_ADDR_VAR 0 4
48714: PUSH
48715: LD_VAR 0 10
48719: PPUSH
48720: LD_VAR 0 11
48724: PPUSH
48725: CALL_OW 546
48729: ST_TO_ADDR
// if hex [ 1 ] then
48730: LD_VAR 0 4
48734: PUSH
48735: LD_INT 1
48737: ARRAY
48738: IFFALSE 48742
// exit ;
48740: GO 49145
// height := hex [ 2 ] ;
48742: LD_ADDR_VAR 0 15
48746: PUSH
48747: LD_VAR 0 4
48751: PUSH
48752: LD_INT 2
48754: ARRAY
48755: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48756: LD_ADDR_VAR 0 14
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: LD_INT 3
48769: PUSH
48770: LD_INT 5
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: ST_TO_ADDR
// for i in tmp do
48779: LD_ADDR_VAR 0 8
48783: PUSH
48784: LD_VAR 0 14
48788: PUSH
48789: FOR_IN
48790: IFFALSE 48960
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48792: LD_ADDR_VAR 0 9
48796: PUSH
48797: LD_VAR 0 10
48801: PPUSH
48802: LD_VAR 0 8
48806: PPUSH
48807: LD_INT 5
48809: PPUSH
48810: CALL_OW 272
48814: PUSH
48815: LD_VAR 0 11
48819: PPUSH
48820: LD_VAR 0 8
48824: PPUSH
48825: LD_INT 5
48827: PPUSH
48828: CALL_OW 273
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48837: LD_VAR 0 9
48841: PUSH
48842: LD_INT 1
48844: ARRAY
48845: PPUSH
48846: LD_VAR 0 9
48850: PUSH
48851: LD_INT 2
48853: ARRAY
48854: PPUSH
48855: CALL_OW 488
48859: IFFALSE 48958
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48861: LD_ADDR_VAR 0 4
48865: PUSH
48866: LD_VAR 0 9
48870: PUSH
48871: LD_INT 1
48873: ARRAY
48874: PPUSH
48875: LD_VAR 0 9
48879: PUSH
48880: LD_INT 2
48882: ARRAY
48883: PPUSH
48884: CALL_OW 546
48888: ST_TO_ADDR
// if hex [ 1 ] then
48889: LD_VAR 0 4
48893: PUSH
48894: LD_INT 1
48896: ARRAY
48897: IFFALSE 48901
// continue ;
48899: GO 48789
// h := hex [ 2 ] ;
48901: LD_ADDR_VAR 0 13
48905: PUSH
48906: LD_VAR 0 4
48910: PUSH
48911: LD_INT 2
48913: ARRAY
48914: ST_TO_ADDR
// if h + 7 < height then
48915: LD_VAR 0 13
48919: PUSH
48920: LD_INT 7
48922: PLUS
48923: PUSH
48924: LD_VAR 0 15
48928: LESS
48929: IFFALSE 48958
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48931: LD_ADDR_VAR 0 18
48935: PUSH
48936: LD_INT 7
48938: PUSH
48939: LD_INT 28
48941: PUSH
48942: LD_INT 45
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: PUSH
48950: LD_VAR 0 12
48954: ARRAY
48955: ST_TO_ADDR
// break ;
48956: GO 48960
// end ; end ; end ;
48958: GO 48789
48960: POP
48961: POP
// end ; if not weapon then
48962: LD_VAR 0 18
48966: NOT
48967: IFFALSE 49027
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48969: LD_ADDR_VAR 0 5
48973: PUSH
48974: LD_VAR 0 5
48978: PUSH
48979: LD_INT 11
48981: PUSH
48982: LD_INT 30
48984: PUSH
48985: LD_INT 49
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: LIST
48992: DIFF
48993: ST_TO_ADDR
// if not list then
48994: LD_VAR 0 5
48998: NOT
48999: IFFALSE 49003
// exit ;
49001: GO 49145
// weapon := list [ rand ( 1 , list ) ] ;
49003: LD_ADDR_VAR 0 18
49007: PUSH
49008: LD_VAR 0 5
49012: PUSH
49013: LD_INT 1
49015: PPUSH
49016: LD_VAR 0 5
49020: PPUSH
49021: CALL_OW 12
49025: ARRAY
49026: ST_TO_ADDR
// end ; if weapon then
49027: LD_VAR 0 18
49031: IFFALSE 49145
// begin tmp := CostOfWeapon ( weapon ) ;
49033: LD_ADDR_VAR 0 14
49037: PUSH
49038: LD_VAR 0 18
49042: PPUSH
49043: CALL_OW 451
49047: ST_TO_ADDR
// j := GetBase ( tower ) ;
49048: LD_ADDR_VAR 0 9
49052: PUSH
49053: LD_VAR 0 1
49057: PPUSH
49058: CALL_OW 274
49062: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49063: LD_VAR 0 9
49067: PPUSH
49068: LD_INT 1
49070: PPUSH
49071: CALL_OW 275
49075: PUSH
49076: LD_VAR 0 14
49080: PUSH
49081: LD_INT 1
49083: ARRAY
49084: GREATEREQUAL
49085: PUSH
49086: LD_VAR 0 9
49090: PPUSH
49091: LD_INT 2
49093: PPUSH
49094: CALL_OW 275
49098: PUSH
49099: LD_VAR 0 14
49103: PUSH
49104: LD_INT 2
49106: ARRAY
49107: GREATEREQUAL
49108: AND
49109: PUSH
49110: LD_VAR 0 9
49114: PPUSH
49115: LD_INT 3
49117: PPUSH
49118: CALL_OW 275
49122: PUSH
49123: LD_VAR 0 14
49127: PUSH
49128: LD_INT 3
49130: ARRAY
49131: GREATEREQUAL
49132: AND
49133: IFFALSE 49145
// result := weapon ;
49135: LD_ADDR_VAR 0 3
49139: PUSH
49140: LD_VAR 0 18
49144: ST_TO_ADDR
// end ; end ;
49145: LD_VAR 0 3
49149: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49150: LD_INT 0
49152: PPUSH
49153: PPUSH
// result := true ;
49154: LD_ADDR_VAR 0 3
49158: PUSH
49159: LD_INT 1
49161: ST_TO_ADDR
// if array1 = array2 then
49162: LD_VAR 0 1
49166: PUSH
49167: LD_VAR 0 2
49171: EQUAL
49172: IFFALSE 49232
// begin for i = 1 to array1 do
49174: LD_ADDR_VAR 0 4
49178: PUSH
49179: DOUBLE
49180: LD_INT 1
49182: DEC
49183: ST_TO_ADDR
49184: LD_VAR 0 1
49188: PUSH
49189: FOR_TO
49190: IFFALSE 49228
// if array1 [ i ] <> array2 [ i ] then
49192: LD_VAR 0 1
49196: PUSH
49197: LD_VAR 0 4
49201: ARRAY
49202: PUSH
49203: LD_VAR 0 2
49207: PUSH
49208: LD_VAR 0 4
49212: ARRAY
49213: NONEQUAL
49214: IFFALSE 49226
// begin result := false ;
49216: LD_ADDR_VAR 0 3
49220: PUSH
49221: LD_INT 0
49223: ST_TO_ADDR
// break ;
49224: GO 49228
// end ;
49226: GO 49189
49228: POP
49229: POP
// end else
49230: GO 49240
// result := false ;
49232: LD_ADDR_VAR 0 3
49236: PUSH
49237: LD_INT 0
49239: ST_TO_ADDR
// end ;
49240: LD_VAR 0 3
49244: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49245: LD_INT 0
49247: PPUSH
49248: PPUSH
// if not array1 or not array2 then
49249: LD_VAR 0 1
49253: NOT
49254: PUSH
49255: LD_VAR 0 2
49259: NOT
49260: OR
49261: IFFALSE 49265
// exit ;
49263: GO 49329
// result := true ;
49265: LD_ADDR_VAR 0 3
49269: PUSH
49270: LD_INT 1
49272: ST_TO_ADDR
// for i = 1 to array1 do
49273: LD_ADDR_VAR 0 4
49277: PUSH
49278: DOUBLE
49279: LD_INT 1
49281: DEC
49282: ST_TO_ADDR
49283: LD_VAR 0 1
49287: PUSH
49288: FOR_TO
49289: IFFALSE 49327
// if array1 [ i ] <> array2 [ i ] then
49291: LD_VAR 0 1
49295: PUSH
49296: LD_VAR 0 4
49300: ARRAY
49301: PUSH
49302: LD_VAR 0 2
49306: PUSH
49307: LD_VAR 0 4
49311: ARRAY
49312: NONEQUAL
49313: IFFALSE 49325
// begin result := false ;
49315: LD_ADDR_VAR 0 3
49319: PUSH
49320: LD_INT 0
49322: ST_TO_ADDR
// break ;
49323: GO 49327
// end ;
49325: GO 49288
49327: POP
49328: POP
// end ;
49329: LD_VAR 0 3
49333: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49334: LD_INT 0
49336: PPUSH
49337: PPUSH
49338: PPUSH
// pom := GetBase ( fac ) ;
49339: LD_ADDR_VAR 0 5
49343: PUSH
49344: LD_VAR 0 1
49348: PPUSH
49349: CALL_OW 274
49353: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49354: LD_ADDR_VAR 0 4
49358: PUSH
49359: LD_VAR 0 2
49363: PUSH
49364: LD_INT 1
49366: ARRAY
49367: PPUSH
49368: LD_VAR 0 2
49372: PUSH
49373: LD_INT 2
49375: ARRAY
49376: PPUSH
49377: LD_VAR 0 2
49381: PUSH
49382: LD_INT 3
49384: ARRAY
49385: PPUSH
49386: LD_VAR 0 2
49390: PUSH
49391: LD_INT 4
49393: ARRAY
49394: PPUSH
49395: CALL_OW 449
49399: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49400: LD_ADDR_VAR 0 3
49404: PUSH
49405: LD_VAR 0 5
49409: PPUSH
49410: LD_INT 1
49412: PPUSH
49413: CALL_OW 275
49417: PUSH
49418: LD_VAR 0 4
49422: PUSH
49423: LD_INT 1
49425: ARRAY
49426: GREATEREQUAL
49427: PUSH
49428: LD_VAR 0 5
49432: PPUSH
49433: LD_INT 2
49435: PPUSH
49436: CALL_OW 275
49440: PUSH
49441: LD_VAR 0 4
49445: PUSH
49446: LD_INT 2
49448: ARRAY
49449: GREATEREQUAL
49450: AND
49451: PUSH
49452: LD_VAR 0 5
49456: PPUSH
49457: LD_INT 3
49459: PPUSH
49460: CALL_OW 275
49464: PUSH
49465: LD_VAR 0 4
49469: PUSH
49470: LD_INT 3
49472: ARRAY
49473: GREATEREQUAL
49474: AND
49475: ST_TO_ADDR
// end ;
49476: LD_VAR 0 3
49480: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49481: LD_INT 0
49483: PPUSH
49484: PPUSH
49485: PPUSH
49486: PPUSH
// pom := GetBase ( building ) ;
49487: LD_ADDR_VAR 0 3
49491: PUSH
49492: LD_VAR 0 1
49496: PPUSH
49497: CALL_OW 274
49501: ST_TO_ADDR
// if not pom then
49502: LD_VAR 0 3
49506: NOT
49507: IFFALSE 49511
// exit ;
49509: GO 49681
// btype := GetBType ( building ) ;
49511: LD_ADDR_VAR 0 5
49515: PUSH
49516: LD_VAR 0 1
49520: PPUSH
49521: CALL_OW 266
49525: ST_TO_ADDR
// if btype = b_armoury then
49526: LD_VAR 0 5
49530: PUSH
49531: LD_INT 4
49533: EQUAL
49534: IFFALSE 49544
// btype := b_barracks ;
49536: LD_ADDR_VAR 0 5
49540: PUSH
49541: LD_INT 5
49543: ST_TO_ADDR
// if btype = b_depot then
49544: LD_VAR 0 5
49548: PUSH
49549: LD_INT 0
49551: EQUAL
49552: IFFALSE 49562
// btype := b_warehouse ;
49554: LD_ADDR_VAR 0 5
49558: PUSH
49559: LD_INT 1
49561: ST_TO_ADDR
// if btype = b_workshop then
49562: LD_VAR 0 5
49566: PUSH
49567: LD_INT 2
49569: EQUAL
49570: IFFALSE 49580
// btype := b_factory ;
49572: LD_ADDR_VAR 0 5
49576: PUSH
49577: LD_INT 3
49579: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49580: LD_ADDR_VAR 0 4
49584: PUSH
49585: LD_VAR 0 5
49589: PPUSH
49590: LD_VAR 0 1
49594: PPUSH
49595: CALL_OW 248
49599: PPUSH
49600: CALL_OW 450
49604: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49605: LD_ADDR_VAR 0 2
49609: PUSH
49610: LD_VAR 0 3
49614: PPUSH
49615: LD_INT 1
49617: PPUSH
49618: CALL_OW 275
49622: PUSH
49623: LD_VAR 0 4
49627: PUSH
49628: LD_INT 1
49630: ARRAY
49631: GREATEREQUAL
49632: PUSH
49633: LD_VAR 0 3
49637: PPUSH
49638: LD_INT 2
49640: PPUSH
49641: CALL_OW 275
49645: PUSH
49646: LD_VAR 0 4
49650: PUSH
49651: LD_INT 2
49653: ARRAY
49654: GREATEREQUAL
49655: AND
49656: PUSH
49657: LD_VAR 0 3
49661: PPUSH
49662: LD_INT 3
49664: PPUSH
49665: CALL_OW 275
49669: PUSH
49670: LD_VAR 0 4
49674: PUSH
49675: LD_INT 3
49677: ARRAY
49678: GREATEREQUAL
49679: AND
49680: ST_TO_ADDR
// end ;
49681: LD_VAR 0 2
49685: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49686: LD_INT 0
49688: PPUSH
49689: PPUSH
49690: PPUSH
// pom := GetBase ( building ) ;
49691: LD_ADDR_VAR 0 4
49695: PUSH
49696: LD_VAR 0 1
49700: PPUSH
49701: CALL_OW 274
49705: ST_TO_ADDR
// if not pom then
49706: LD_VAR 0 4
49710: NOT
49711: IFFALSE 49715
// exit ;
49713: GO 49816
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49715: LD_ADDR_VAR 0 5
49719: PUSH
49720: LD_VAR 0 2
49724: PPUSH
49725: LD_VAR 0 1
49729: PPUSH
49730: CALL_OW 248
49734: PPUSH
49735: CALL_OW 450
49739: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49740: LD_ADDR_VAR 0 3
49744: PUSH
49745: LD_VAR 0 4
49749: PPUSH
49750: LD_INT 1
49752: PPUSH
49753: CALL_OW 275
49757: PUSH
49758: LD_VAR 0 5
49762: PUSH
49763: LD_INT 1
49765: ARRAY
49766: GREATEREQUAL
49767: PUSH
49768: LD_VAR 0 4
49772: PPUSH
49773: LD_INT 2
49775: PPUSH
49776: CALL_OW 275
49780: PUSH
49781: LD_VAR 0 5
49785: PUSH
49786: LD_INT 2
49788: ARRAY
49789: GREATEREQUAL
49790: AND
49791: PUSH
49792: LD_VAR 0 4
49796: PPUSH
49797: LD_INT 3
49799: PPUSH
49800: CALL_OW 275
49804: PUSH
49805: LD_VAR 0 5
49809: PUSH
49810: LD_INT 3
49812: ARRAY
49813: GREATEREQUAL
49814: AND
49815: ST_TO_ADDR
// end ;
49816: LD_VAR 0 3
49820: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49821: LD_INT 0
49823: PPUSH
49824: PPUSH
49825: PPUSH
49826: PPUSH
49827: PPUSH
49828: PPUSH
49829: PPUSH
49830: PPUSH
49831: PPUSH
49832: PPUSH
49833: PPUSH
// result := false ;
49834: LD_ADDR_VAR 0 8
49838: PUSH
49839: LD_INT 0
49841: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49842: LD_VAR 0 5
49846: NOT
49847: PUSH
49848: LD_VAR 0 1
49852: NOT
49853: OR
49854: PUSH
49855: LD_VAR 0 2
49859: NOT
49860: OR
49861: PUSH
49862: LD_VAR 0 3
49866: NOT
49867: OR
49868: IFFALSE 49872
// exit ;
49870: GO 50686
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49872: LD_ADDR_VAR 0 14
49876: PUSH
49877: LD_VAR 0 1
49881: PPUSH
49882: LD_VAR 0 2
49886: PPUSH
49887: LD_VAR 0 3
49891: PPUSH
49892: LD_VAR 0 4
49896: PPUSH
49897: LD_VAR 0 5
49901: PUSH
49902: LD_INT 1
49904: ARRAY
49905: PPUSH
49906: CALL_OW 248
49910: PPUSH
49911: LD_INT 0
49913: PPUSH
49914: CALL 51939 0 6
49918: ST_TO_ADDR
// if not hexes then
49919: LD_VAR 0 14
49923: NOT
49924: IFFALSE 49928
// exit ;
49926: GO 50686
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49928: LD_ADDR_VAR 0 17
49932: PUSH
49933: LD_VAR 0 5
49937: PPUSH
49938: LD_INT 22
49940: PUSH
49941: LD_VAR 0 13
49945: PPUSH
49946: CALL_OW 255
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: LD_INT 30
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 30
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: LIST
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PPUSH
49987: CALL_OW 72
49991: ST_TO_ADDR
// for i = 1 to hexes do
49992: LD_ADDR_VAR 0 9
49996: PUSH
49997: DOUBLE
49998: LD_INT 1
50000: DEC
50001: ST_TO_ADDR
50002: LD_VAR 0 14
50006: PUSH
50007: FOR_TO
50008: IFFALSE 50684
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50010: LD_ADDR_VAR 0 13
50014: PUSH
50015: LD_VAR 0 14
50019: PUSH
50020: LD_VAR 0 9
50024: ARRAY
50025: PUSH
50026: LD_INT 1
50028: ARRAY
50029: PPUSH
50030: LD_VAR 0 14
50034: PUSH
50035: LD_VAR 0 9
50039: ARRAY
50040: PUSH
50041: LD_INT 2
50043: ARRAY
50044: PPUSH
50045: CALL_OW 428
50049: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50050: LD_VAR 0 14
50054: PUSH
50055: LD_VAR 0 9
50059: ARRAY
50060: PUSH
50061: LD_INT 1
50063: ARRAY
50064: PPUSH
50065: LD_VAR 0 14
50069: PUSH
50070: LD_VAR 0 9
50074: ARRAY
50075: PUSH
50076: LD_INT 2
50078: ARRAY
50079: PPUSH
50080: CALL_OW 351
50084: PUSH
50085: LD_VAR 0 14
50089: PUSH
50090: LD_VAR 0 9
50094: ARRAY
50095: PUSH
50096: LD_INT 1
50098: ARRAY
50099: PPUSH
50100: LD_VAR 0 14
50104: PUSH
50105: LD_VAR 0 9
50109: ARRAY
50110: PUSH
50111: LD_INT 2
50113: ARRAY
50114: PPUSH
50115: CALL_OW 488
50119: NOT
50120: OR
50121: PUSH
50122: LD_VAR 0 13
50126: PPUSH
50127: CALL_OW 247
50131: PUSH
50132: LD_INT 3
50134: EQUAL
50135: OR
50136: IFFALSE 50142
// exit ;
50138: POP
50139: POP
50140: GO 50686
// if not tmp then
50142: LD_VAR 0 13
50146: NOT
50147: IFFALSE 50151
// continue ;
50149: GO 50007
// result := true ;
50151: LD_ADDR_VAR 0 8
50155: PUSH
50156: LD_INT 1
50158: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50159: LD_VAR 0 6
50163: PUSH
50164: LD_VAR 0 13
50168: PPUSH
50169: CALL_OW 247
50173: PUSH
50174: LD_INT 2
50176: EQUAL
50177: AND
50178: PUSH
50179: LD_VAR 0 13
50183: PPUSH
50184: CALL_OW 263
50188: PUSH
50189: LD_INT 1
50191: EQUAL
50192: AND
50193: IFFALSE 50357
// begin if IsDrivenBy ( tmp ) then
50195: LD_VAR 0 13
50199: PPUSH
50200: CALL_OW 311
50204: IFFALSE 50208
// continue ;
50206: GO 50007
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50208: LD_VAR 0 6
50212: PPUSH
50213: LD_INT 3
50215: PUSH
50216: LD_INT 60
50218: PUSH
50219: EMPTY
50220: LIST
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 3
50228: PUSH
50229: LD_INT 55
50231: PUSH
50232: EMPTY
50233: LIST
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PPUSH
50243: CALL_OW 72
50247: IFFALSE 50355
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50249: LD_ADDR_VAR 0 18
50253: PUSH
50254: LD_VAR 0 6
50258: PPUSH
50259: LD_INT 3
50261: PUSH
50262: LD_INT 60
50264: PUSH
50265: EMPTY
50266: LIST
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 3
50274: PUSH
50275: LD_INT 55
50277: PUSH
50278: EMPTY
50279: LIST
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PPUSH
50289: CALL_OW 72
50293: PUSH
50294: LD_INT 1
50296: ARRAY
50297: ST_TO_ADDR
// if IsInUnit ( driver ) then
50298: LD_VAR 0 18
50302: PPUSH
50303: CALL_OW 310
50307: IFFALSE 50318
// ComExit ( driver ) ;
50309: LD_VAR 0 18
50313: PPUSH
50314: CALL 75720 0 1
// AddComEnterUnit ( driver , tmp ) ;
50318: LD_VAR 0 18
50322: PPUSH
50323: LD_VAR 0 13
50327: PPUSH
50328: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50332: LD_VAR 0 18
50336: PPUSH
50337: LD_VAR 0 7
50341: PPUSH
50342: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50346: LD_VAR 0 18
50350: PPUSH
50351: CALL_OW 181
// end ; continue ;
50355: GO 50007
// end ; if not cleaners or not tmp in cleaners then
50357: LD_VAR 0 6
50361: NOT
50362: PUSH
50363: LD_VAR 0 13
50367: PUSH
50368: LD_VAR 0 6
50372: IN
50373: NOT
50374: OR
50375: IFFALSE 50682
// begin if dep then
50377: LD_VAR 0 17
50381: IFFALSE 50517
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50383: LD_ADDR_VAR 0 16
50387: PUSH
50388: LD_VAR 0 17
50392: PUSH
50393: LD_INT 1
50395: ARRAY
50396: PPUSH
50397: CALL_OW 250
50401: PPUSH
50402: LD_VAR 0 17
50406: PUSH
50407: LD_INT 1
50409: ARRAY
50410: PPUSH
50411: CALL_OW 254
50415: PPUSH
50416: LD_INT 5
50418: PPUSH
50419: CALL_OW 272
50423: PUSH
50424: LD_VAR 0 17
50428: PUSH
50429: LD_INT 1
50431: ARRAY
50432: PPUSH
50433: CALL_OW 251
50437: PPUSH
50438: LD_VAR 0 17
50442: PUSH
50443: LD_INT 1
50445: ARRAY
50446: PPUSH
50447: CALL_OW 254
50451: PPUSH
50452: LD_INT 5
50454: PPUSH
50455: CALL_OW 273
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50464: LD_VAR 0 16
50468: PUSH
50469: LD_INT 1
50471: ARRAY
50472: PPUSH
50473: LD_VAR 0 16
50477: PUSH
50478: LD_INT 2
50480: ARRAY
50481: PPUSH
50482: CALL_OW 488
50486: IFFALSE 50517
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50488: LD_VAR 0 13
50492: PPUSH
50493: LD_VAR 0 16
50497: PUSH
50498: LD_INT 1
50500: ARRAY
50501: PPUSH
50502: LD_VAR 0 16
50506: PUSH
50507: LD_INT 2
50509: ARRAY
50510: PPUSH
50511: CALL_OW 111
// continue ;
50515: GO 50007
// end ; end ; r := GetDir ( tmp ) ;
50517: LD_ADDR_VAR 0 15
50521: PUSH
50522: LD_VAR 0 13
50526: PPUSH
50527: CALL_OW 254
50531: ST_TO_ADDR
// if r = 5 then
50532: LD_VAR 0 15
50536: PUSH
50537: LD_INT 5
50539: EQUAL
50540: IFFALSE 50550
// r := 0 ;
50542: LD_ADDR_VAR 0 15
50546: PUSH
50547: LD_INT 0
50549: ST_TO_ADDR
// for j = r to 5 do
50550: LD_ADDR_VAR 0 10
50554: PUSH
50555: DOUBLE
50556: LD_VAR 0 15
50560: DEC
50561: ST_TO_ADDR
50562: LD_INT 5
50564: PUSH
50565: FOR_TO
50566: IFFALSE 50680
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50568: LD_ADDR_VAR 0 11
50572: PUSH
50573: LD_VAR 0 13
50577: PPUSH
50578: CALL_OW 250
50582: PPUSH
50583: LD_VAR 0 10
50587: PPUSH
50588: LD_INT 2
50590: PPUSH
50591: CALL_OW 272
50595: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50596: LD_ADDR_VAR 0 12
50600: PUSH
50601: LD_VAR 0 13
50605: PPUSH
50606: CALL_OW 251
50610: PPUSH
50611: LD_VAR 0 10
50615: PPUSH
50616: LD_INT 2
50618: PPUSH
50619: CALL_OW 273
50623: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50624: LD_VAR 0 11
50628: PPUSH
50629: LD_VAR 0 12
50633: PPUSH
50634: CALL_OW 488
50638: PUSH
50639: LD_VAR 0 11
50643: PPUSH
50644: LD_VAR 0 12
50648: PPUSH
50649: CALL_OW 428
50653: NOT
50654: AND
50655: IFFALSE 50678
// begin ComMoveXY ( tmp , _x , _y ) ;
50657: LD_VAR 0 13
50661: PPUSH
50662: LD_VAR 0 11
50666: PPUSH
50667: LD_VAR 0 12
50671: PPUSH
50672: CALL_OW 111
// break ;
50676: GO 50680
// end ; end ;
50678: GO 50565
50680: POP
50681: POP
// end ; end ;
50682: GO 50007
50684: POP
50685: POP
// end ;
50686: LD_VAR 0 8
50690: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50691: LD_INT 0
50693: PPUSH
// result := true ;
50694: LD_ADDR_VAR 0 3
50698: PUSH
50699: LD_INT 1
50701: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50702: LD_VAR 0 2
50706: PUSH
50707: LD_INT 24
50709: DOUBLE
50710: EQUAL
50711: IFTRUE 50721
50713: LD_INT 33
50715: DOUBLE
50716: EQUAL
50717: IFTRUE 50721
50719: GO 50746
50721: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50722: LD_ADDR_VAR 0 3
50726: PUSH
50727: LD_INT 32
50729: PPUSH
50730: LD_VAR 0 1
50734: PPUSH
50735: CALL_OW 321
50739: PUSH
50740: LD_INT 2
50742: EQUAL
50743: ST_TO_ADDR
50744: GO 51062
50746: LD_INT 20
50748: DOUBLE
50749: EQUAL
50750: IFTRUE 50754
50752: GO 50779
50754: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50755: LD_ADDR_VAR 0 3
50759: PUSH
50760: LD_INT 6
50762: PPUSH
50763: LD_VAR 0 1
50767: PPUSH
50768: CALL_OW 321
50772: PUSH
50773: LD_INT 2
50775: EQUAL
50776: ST_TO_ADDR
50777: GO 51062
50779: LD_INT 22
50781: DOUBLE
50782: EQUAL
50783: IFTRUE 50793
50785: LD_INT 36
50787: DOUBLE
50788: EQUAL
50789: IFTRUE 50793
50791: GO 50818
50793: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50794: LD_ADDR_VAR 0 3
50798: PUSH
50799: LD_INT 15
50801: PPUSH
50802: LD_VAR 0 1
50806: PPUSH
50807: CALL_OW 321
50811: PUSH
50812: LD_INT 2
50814: EQUAL
50815: ST_TO_ADDR
50816: GO 51062
50818: LD_INT 30
50820: DOUBLE
50821: EQUAL
50822: IFTRUE 50826
50824: GO 50851
50826: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50827: LD_ADDR_VAR 0 3
50831: PUSH
50832: LD_INT 20
50834: PPUSH
50835: LD_VAR 0 1
50839: PPUSH
50840: CALL_OW 321
50844: PUSH
50845: LD_INT 2
50847: EQUAL
50848: ST_TO_ADDR
50849: GO 51062
50851: LD_INT 28
50853: DOUBLE
50854: EQUAL
50855: IFTRUE 50865
50857: LD_INT 21
50859: DOUBLE
50860: EQUAL
50861: IFTRUE 50865
50863: GO 50890
50865: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50866: LD_ADDR_VAR 0 3
50870: PUSH
50871: LD_INT 21
50873: PPUSH
50874: LD_VAR 0 1
50878: PPUSH
50879: CALL_OW 321
50883: PUSH
50884: LD_INT 2
50886: EQUAL
50887: ST_TO_ADDR
50888: GO 51062
50890: LD_INT 16
50892: DOUBLE
50893: EQUAL
50894: IFTRUE 50898
50896: GO 50923
50898: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50899: LD_ADDR_VAR 0 3
50903: PUSH
50904: LD_INT 84
50906: PPUSH
50907: LD_VAR 0 1
50911: PPUSH
50912: CALL_OW 321
50916: PUSH
50917: LD_INT 2
50919: EQUAL
50920: ST_TO_ADDR
50921: GO 51062
50923: LD_INT 19
50925: DOUBLE
50926: EQUAL
50927: IFTRUE 50937
50929: LD_INT 23
50931: DOUBLE
50932: EQUAL
50933: IFTRUE 50937
50935: GO 50962
50937: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50938: LD_ADDR_VAR 0 3
50942: PUSH
50943: LD_INT 83
50945: PPUSH
50946: LD_VAR 0 1
50950: PPUSH
50951: CALL_OW 321
50955: PUSH
50956: LD_INT 2
50958: EQUAL
50959: ST_TO_ADDR
50960: GO 51062
50962: LD_INT 17
50964: DOUBLE
50965: EQUAL
50966: IFTRUE 50970
50968: GO 50995
50970: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50971: LD_ADDR_VAR 0 3
50975: PUSH
50976: LD_INT 39
50978: PPUSH
50979: LD_VAR 0 1
50983: PPUSH
50984: CALL_OW 321
50988: PUSH
50989: LD_INT 2
50991: EQUAL
50992: ST_TO_ADDR
50993: GO 51062
50995: LD_INT 18
50997: DOUBLE
50998: EQUAL
50999: IFTRUE 51003
51001: GO 51028
51003: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51004: LD_ADDR_VAR 0 3
51008: PUSH
51009: LD_INT 40
51011: PPUSH
51012: LD_VAR 0 1
51016: PPUSH
51017: CALL_OW 321
51021: PUSH
51022: LD_INT 2
51024: EQUAL
51025: ST_TO_ADDR
51026: GO 51062
51028: LD_INT 27
51030: DOUBLE
51031: EQUAL
51032: IFTRUE 51036
51034: GO 51061
51036: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51037: LD_ADDR_VAR 0 3
51041: PUSH
51042: LD_INT 35
51044: PPUSH
51045: LD_VAR 0 1
51049: PPUSH
51050: CALL_OW 321
51054: PUSH
51055: LD_INT 2
51057: EQUAL
51058: ST_TO_ADDR
51059: GO 51062
51061: POP
// end ;
51062: LD_VAR 0 3
51066: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51067: LD_INT 0
51069: PPUSH
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
51075: PPUSH
51076: PPUSH
51077: PPUSH
51078: PPUSH
51079: PPUSH
// result := false ;
51080: LD_ADDR_VAR 0 6
51084: PUSH
51085: LD_INT 0
51087: ST_TO_ADDR
// if btype = b_depot then
51088: LD_VAR 0 2
51092: PUSH
51093: LD_INT 0
51095: EQUAL
51096: IFFALSE 51108
// begin result := true ;
51098: LD_ADDR_VAR 0 6
51102: PUSH
51103: LD_INT 1
51105: ST_TO_ADDR
// exit ;
51106: GO 51934
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51108: LD_VAR 0 1
51112: NOT
51113: PUSH
51114: LD_VAR 0 1
51118: PPUSH
51119: CALL_OW 266
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: IN
51134: NOT
51135: OR
51136: PUSH
51137: LD_VAR 0 2
51141: NOT
51142: OR
51143: PUSH
51144: LD_VAR 0 5
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: LD_INT 3
51160: PUSH
51161: LD_INT 4
51163: PUSH
51164: LD_INT 5
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: IN
51175: NOT
51176: OR
51177: PUSH
51178: LD_VAR 0 3
51182: PPUSH
51183: LD_VAR 0 4
51187: PPUSH
51188: CALL_OW 488
51192: NOT
51193: OR
51194: IFFALSE 51198
// exit ;
51196: GO 51934
// side := GetSide ( depot ) ;
51198: LD_ADDR_VAR 0 9
51202: PUSH
51203: LD_VAR 0 1
51207: PPUSH
51208: CALL_OW 255
51212: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51213: LD_VAR 0 9
51217: PPUSH
51218: LD_VAR 0 2
51222: PPUSH
51223: CALL 50691 0 2
51227: NOT
51228: IFFALSE 51232
// exit ;
51230: GO 51934
// pom := GetBase ( depot ) ;
51232: LD_ADDR_VAR 0 10
51236: PUSH
51237: LD_VAR 0 1
51241: PPUSH
51242: CALL_OW 274
51246: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51247: LD_ADDR_VAR 0 11
51251: PUSH
51252: LD_VAR 0 2
51256: PPUSH
51257: LD_VAR 0 1
51261: PPUSH
51262: CALL_OW 248
51266: PPUSH
51267: CALL_OW 450
51271: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51272: LD_VAR 0 10
51276: PPUSH
51277: LD_INT 1
51279: PPUSH
51280: CALL_OW 275
51284: PUSH
51285: LD_VAR 0 11
51289: PUSH
51290: LD_INT 1
51292: ARRAY
51293: GREATEREQUAL
51294: PUSH
51295: LD_VAR 0 10
51299: PPUSH
51300: LD_INT 2
51302: PPUSH
51303: CALL_OW 275
51307: PUSH
51308: LD_VAR 0 11
51312: PUSH
51313: LD_INT 2
51315: ARRAY
51316: GREATEREQUAL
51317: AND
51318: PUSH
51319: LD_VAR 0 10
51323: PPUSH
51324: LD_INT 3
51326: PPUSH
51327: CALL_OW 275
51331: PUSH
51332: LD_VAR 0 11
51336: PUSH
51337: LD_INT 3
51339: ARRAY
51340: GREATEREQUAL
51341: AND
51342: NOT
51343: IFFALSE 51347
// exit ;
51345: GO 51934
// if GetBType ( depot ) = b_depot then
51347: LD_VAR 0 1
51351: PPUSH
51352: CALL_OW 266
51356: PUSH
51357: LD_INT 0
51359: EQUAL
51360: IFFALSE 51372
// dist := 28 else
51362: LD_ADDR_VAR 0 14
51366: PUSH
51367: LD_INT 28
51369: ST_TO_ADDR
51370: GO 51380
// dist := 36 ;
51372: LD_ADDR_VAR 0 14
51376: PUSH
51377: LD_INT 36
51379: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51380: LD_VAR 0 1
51384: PPUSH
51385: LD_VAR 0 3
51389: PPUSH
51390: LD_VAR 0 4
51394: PPUSH
51395: CALL_OW 297
51399: PUSH
51400: LD_VAR 0 14
51404: GREATER
51405: IFFALSE 51409
// exit ;
51407: GO 51934
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51409: LD_ADDR_VAR 0 12
51413: PUSH
51414: LD_VAR 0 2
51418: PPUSH
51419: LD_VAR 0 3
51423: PPUSH
51424: LD_VAR 0 4
51428: PPUSH
51429: LD_VAR 0 5
51433: PPUSH
51434: LD_VAR 0 1
51438: PPUSH
51439: CALL_OW 248
51443: PPUSH
51444: LD_INT 0
51446: PPUSH
51447: CALL 51939 0 6
51451: ST_TO_ADDR
// if not hexes then
51452: LD_VAR 0 12
51456: NOT
51457: IFFALSE 51461
// exit ;
51459: GO 51934
// hex := GetHexInfo ( x , y ) ;
51461: LD_ADDR_VAR 0 15
51465: PUSH
51466: LD_VAR 0 3
51470: PPUSH
51471: LD_VAR 0 4
51475: PPUSH
51476: CALL_OW 546
51480: ST_TO_ADDR
// if hex [ 1 ] then
51481: LD_VAR 0 15
51485: PUSH
51486: LD_INT 1
51488: ARRAY
51489: IFFALSE 51493
// exit ;
51491: GO 51934
// height := hex [ 2 ] ;
51493: LD_ADDR_VAR 0 13
51497: PUSH
51498: LD_VAR 0 15
51502: PUSH
51503: LD_INT 2
51505: ARRAY
51506: ST_TO_ADDR
// for i = 1 to hexes do
51507: LD_ADDR_VAR 0 7
51511: PUSH
51512: DOUBLE
51513: LD_INT 1
51515: DEC
51516: ST_TO_ADDR
51517: LD_VAR 0 12
51521: PUSH
51522: FOR_TO
51523: IFFALSE 51853
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51525: LD_VAR 0 12
51529: PUSH
51530: LD_VAR 0 7
51534: ARRAY
51535: PUSH
51536: LD_INT 1
51538: ARRAY
51539: PPUSH
51540: LD_VAR 0 12
51544: PUSH
51545: LD_VAR 0 7
51549: ARRAY
51550: PUSH
51551: LD_INT 2
51553: ARRAY
51554: PPUSH
51555: CALL_OW 488
51559: NOT
51560: PUSH
51561: LD_VAR 0 12
51565: PUSH
51566: LD_VAR 0 7
51570: ARRAY
51571: PUSH
51572: LD_INT 1
51574: ARRAY
51575: PPUSH
51576: LD_VAR 0 12
51580: PUSH
51581: LD_VAR 0 7
51585: ARRAY
51586: PUSH
51587: LD_INT 2
51589: ARRAY
51590: PPUSH
51591: CALL_OW 428
51595: PUSH
51596: LD_INT 0
51598: GREATER
51599: OR
51600: PUSH
51601: LD_VAR 0 12
51605: PUSH
51606: LD_VAR 0 7
51610: ARRAY
51611: PUSH
51612: LD_INT 1
51614: ARRAY
51615: PPUSH
51616: LD_VAR 0 12
51620: PUSH
51621: LD_VAR 0 7
51625: ARRAY
51626: PUSH
51627: LD_INT 2
51629: ARRAY
51630: PPUSH
51631: CALL_OW 351
51635: OR
51636: IFFALSE 51642
// exit ;
51638: POP
51639: POP
51640: GO 51934
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51642: LD_ADDR_VAR 0 8
51646: PUSH
51647: LD_VAR 0 12
51651: PUSH
51652: LD_VAR 0 7
51656: ARRAY
51657: PUSH
51658: LD_INT 1
51660: ARRAY
51661: PPUSH
51662: LD_VAR 0 12
51666: PUSH
51667: LD_VAR 0 7
51671: ARRAY
51672: PUSH
51673: LD_INT 2
51675: ARRAY
51676: PPUSH
51677: CALL_OW 546
51681: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51682: LD_VAR 0 8
51686: PUSH
51687: LD_INT 1
51689: ARRAY
51690: PUSH
51691: LD_VAR 0 8
51695: PUSH
51696: LD_INT 2
51698: ARRAY
51699: PUSH
51700: LD_VAR 0 13
51704: PUSH
51705: LD_INT 2
51707: PLUS
51708: GREATER
51709: OR
51710: PUSH
51711: LD_VAR 0 8
51715: PUSH
51716: LD_INT 2
51718: ARRAY
51719: PUSH
51720: LD_VAR 0 13
51724: PUSH
51725: LD_INT 2
51727: MINUS
51728: LESS
51729: OR
51730: PUSH
51731: LD_VAR 0 8
51735: PUSH
51736: LD_INT 3
51738: ARRAY
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: LD_INT 8
51745: PUSH
51746: LD_INT 9
51748: PUSH
51749: LD_INT 10
51751: PUSH
51752: LD_INT 11
51754: PUSH
51755: LD_INT 12
51757: PUSH
51758: LD_INT 13
51760: PUSH
51761: LD_INT 16
51763: PUSH
51764: LD_INT 17
51766: PUSH
51767: LD_INT 18
51769: PUSH
51770: LD_INT 19
51772: PUSH
51773: LD_INT 20
51775: PUSH
51776: LD_INT 21
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: IN
51794: NOT
51795: OR
51796: PUSH
51797: LD_VAR 0 8
51801: PUSH
51802: LD_INT 5
51804: ARRAY
51805: NOT
51806: OR
51807: PUSH
51808: LD_VAR 0 8
51812: PUSH
51813: LD_INT 6
51815: ARRAY
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 7
51825: PUSH
51826: LD_INT 9
51828: PUSH
51829: LD_INT 10
51831: PUSH
51832: LD_INT 11
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: IN
51843: NOT
51844: OR
51845: IFFALSE 51851
// exit ;
51847: POP
51848: POP
51849: GO 51934
// end ;
51851: GO 51522
51853: POP
51854: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51855: LD_VAR 0 9
51859: PPUSH
51860: LD_VAR 0 3
51864: PPUSH
51865: LD_VAR 0 4
51869: PPUSH
51870: LD_INT 20
51872: PPUSH
51873: CALL 43857 0 4
51877: PUSH
51878: LD_INT 4
51880: ARRAY
51881: IFFALSE 51885
// exit ;
51883: GO 51934
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51885: LD_VAR 0 2
51889: PUSH
51890: LD_INT 29
51892: PUSH
51893: LD_INT 30
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: IN
51900: PUSH
51901: LD_VAR 0 3
51905: PPUSH
51906: LD_VAR 0 4
51910: PPUSH
51911: LD_VAR 0 9
51915: PPUSH
51916: CALL_OW 440
51920: NOT
51921: AND
51922: IFFALSE 51926
// exit ;
51924: GO 51934
// result := true ;
51926: LD_ADDR_VAR 0 6
51930: PUSH
51931: LD_INT 1
51933: ST_TO_ADDR
// end ;
51934: LD_VAR 0 6
51938: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51939: LD_INT 0
51941: PPUSH
51942: PPUSH
51943: PPUSH
51944: PPUSH
51945: PPUSH
51946: PPUSH
51947: PPUSH
51948: PPUSH
51949: PPUSH
51950: PPUSH
51951: PPUSH
51952: PPUSH
51953: PPUSH
51954: PPUSH
51955: PPUSH
51956: PPUSH
51957: PPUSH
51958: PPUSH
51959: PPUSH
51960: PPUSH
51961: PPUSH
51962: PPUSH
51963: PPUSH
51964: PPUSH
51965: PPUSH
51966: PPUSH
51967: PPUSH
51968: PPUSH
51969: PPUSH
51970: PPUSH
51971: PPUSH
51972: PPUSH
51973: PPUSH
51974: PPUSH
51975: PPUSH
51976: PPUSH
51977: PPUSH
51978: PPUSH
51979: PPUSH
51980: PPUSH
51981: PPUSH
51982: PPUSH
51983: PPUSH
51984: PPUSH
51985: PPUSH
51986: PPUSH
51987: PPUSH
51988: PPUSH
51989: PPUSH
51990: PPUSH
51991: PPUSH
51992: PPUSH
51993: PPUSH
51994: PPUSH
51995: PPUSH
51996: PPUSH
51997: PPUSH
51998: PPUSH
// result = [ ] ;
51999: LD_ADDR_VAR 0 7
52003: PUSH
52004: EMPTY
52005: ST_TO_ADDR
// temp_list = [ ] ;
52006: LD_ADDR_VAR 0 9
52010: PUSH
52011: EMPTY
52012: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52013: LD_VAR 0 4
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: LD_INT 3
52029: PUSH
52030: LD_INT 4
52032: PUSH
52033: LD_INT 5
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: IN
52044: NOT
52045: PUSH
52046: LD_VAR 0 1
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: IN
52061: PUSH
52062: LD_VAR 0 5
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: LD_INT 3
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: IN
52081: NOT
52082: AND
52083: OR
52084: IFFALSE 52088
// exit ;
52086: GO 70479
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52088: LD_VAR 0 1
52092: PUSH
52093: LD_INT 6
52095: PUSH
52096: LD_INT 7
52098: PUSH
52099: LD_INT 8
52101: PUSH
52102: LD_INT 13
52104: PUSH
52105: LD_INT 12
52107: PUSH
52108: LD_INT 15
52110: PUSH
52111: LD_INT 11
52113: PUSH
52114: LD_INT 14
52116: PUSH
52117: LD_INT 10
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: IN
52131: IFFALSE 52141
// btype = b_lab ;
52133: LD_ADDR_VAR 0 1
52137: PUSH
52138: LD_INT 6
52140: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52141: LD_VAR 0 6
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: LIST
52159: IN
52160: NOT
52161: PUSH
52162: LD_VAR 0 1
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: LD_INT 6
52181: PUSH
52182: LD_INT 36
52184: PUSH
52185: LD_INT 4
52187: PUSH
52188: LD_INT 5
52190: PUSH
52191: LD_INT 31
52193: PUSH
52194: LD_INT 32
52196: PUSH
52197: LD_INT 33
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: IN
52213: NOT
52214: PUSH
52215: LD_VAR 0 6
52219: PUSH
52220: LD_INT 1
52222: EQUAL
52223: AND
52224: OR
52225: PUSH
52226: LD_VAR 0 1
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: LD_INT 3
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: IN
52241: NOT
52242: PUSH
52243: LD_VAR 0 6
52247: PUSH
52248: LD_INT 2
52250: EQUAL
52251: AND
52252: OR
52253: IFFALSE 52263
// mode = 0 ;
52255: LD_ADDR_VAR 0 6
52259: PUSH
52260: LD_INT 0
52262: ST_TO_ADDR
// case mode of 0 :
52263: LD_VAR 0 6
52267: PUSH
52268: LD_INT 0
52270: DOUBLE
52271: EQUAL
52272: IFTRUE 52276
52274: GO 63729
52276: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52277: LD_ADDR_VAR 0 11
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 3
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 3
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52470: LD_ADDR_VAR 0 12
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 3
52627: NEG
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 3
52638: NEG
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52666: LD_ADDR_VAR 0 13
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 2
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 2
52789: NEG
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: LD_INT 3
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 3
52825: NEG
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 3
52837: NEG
52838: PUSH
52839: LD_INT 3
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52865: LD_ADDR_VAR 0 14
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 3
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: LD_INT 3
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53061: LD_ADDR_VAR 0 15
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 3
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53254: LD_ADDR_VAR 0 16
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 2
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53447: LD_ADDR_VAR 0 17
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 2
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53677: LD_ADDR_VAR 0 18
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53907: LD_ADDR_VAR 0 19
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: LD_INT 2
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: NEG
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54137: LD_ADDR_VAR 0 20
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54367: LD_ADDR_VAR 0 21
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 2
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54597: LD_ADDR_VAR 0 22
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54827: LD_ADDR_VAR 0 23
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: LD_INT 3
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: LD_INT 3
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55107: LD_ADDR_VAR 0 24
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: NEG
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 3
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 3
55350: PUSH
55351: LD_INT 2
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55383: LD_ADDR_VAR 0 25
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: LD_INT 3
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 3
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55657: LD_ADDR_VAR 0 26
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55933: LD_ADDR_VAR 0 27
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 3
56178: NEG
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56213: LD_ADDR_VAR 0 28
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: LD_INT 3
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 3
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 3
56448: NEG
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 3
56460: NEG
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56495: LD_ADDR_VAR 0 29
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 2
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: LD_INT 2
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 3
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56774: LD_ADDR_VAR 0 30
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 2
56940: NEG
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 3
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57052: LD_ADDR_VAR 0 31
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 1
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: LD_INT 2
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 3
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 3
57295: NEG
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57330: LD_ADDR_VAR 0 32
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 2
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: LD_INT 2
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: LD_INT 3
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 3
57573: NEG
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57608: LD_ADDR_VAR 0 33
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 2
57763: NEG
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: NEG
57799: PUSH
57800: LD_INT 3
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 3
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: NEG
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57887: LD_ADDR_VAR 0 34
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 2
58012: PUSH
58013: LD_INT 2
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: LD_INT 3
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: LD_INT 2
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 2
58121: NEG
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 3
58132: NEG
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58167: LD_ADDR_VAR 0 35
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58279: LD_ADDR_VAR 0 36
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58391: LD_ADDR_VAR 0 37
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58503: LD_ADDR_VAR 0 38
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58615: LD_ADDR_VAR 0 39
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58727: LD_ADDR_VAR 0 40
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58839: LD_ADDR_VAR 0 41
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 2
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: NEG
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: NEG
59030: PUSH
59031: LD_INT 3
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 3
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 3
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 3
59082: PUSH
59083: LD_INT 3
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: LD_INT 3
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 3
59124: NEG
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: LD_INT 3
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59189: LD_ADDR_VAR 0 42
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: LD_INT 2
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 2
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 2
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: NEG
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 3
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: LD_INT 3
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: LD_INT 3
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 3
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 3
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: NEG
59487: PUSH
59488: LD_INT 2
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 3
59498: NEG
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59539: LD_ADDR_VAR 0 43
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 2
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 2
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: LD_INT 3
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 3
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: LD_INT 2
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 3
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: LD_INT 3
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 3
59835: NEG
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 3
59846: NEG
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59887: LD_ADDR_VAR 0 44
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: NEG
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 2
60065: NEG
60066: PUSH
60067: LD_INT 2
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: LD_INT 3
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 3
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 3
60120: PUSH
60121: LD_INT 2
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 3
60130: PUSH
60131: LD_INT 3
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: LD_INT 3
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 3
60161: NEG
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 3
60172: NEG
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 3
60184: NEG
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 3
60196: NEG
60197: PUSH
60198: LD_INT 3
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60237: LD_ADDR_VAR 0 45
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: LD_INT 2
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: LD_INT 2
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 2
60403: NEG
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: LD_INT 3
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 3
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 3
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 3
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: LD_INT 3
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 3
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: LD_INT 3
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 3
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 2
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 3
60534: NEG
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 3
60546: NEG
60547: PUSH
60548: LD_INT 3
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60587: LD_ADDR_VAR 0 46
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 1
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: LD_INT 2
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 2
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 2
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: LD_INT 3
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 3
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 3
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: LD_INT 3
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: LD_INT 3
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 2
60872: NEG
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 3
60883: NEG
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 3
60894: NEG
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60935: LD_ADDR_VAR 0 47
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: LD_INT 2
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 2
61050: NEG
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: NEG
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61086: LD_ADDR_VAR 0 48
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: LD_INT 2
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 2
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61233: LD_ADDR_VAR 0 49
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: PUSH
61346: LD_INT 2
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61377: LD_ADDR_VAR 0 50
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 2
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: LD_INT 2
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61521: LD_ADDR_VAR 0 51
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 2
61633: NEG
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 2
61644: NEG
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61668: LD_ADDR_VAR 0 52
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 1
61737: NEG
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: LD_INT 2
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: NEG
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 2
61795: NEG
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61819: LD_ADDR_VAR 0 53
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 2
62018: NEG
62019: PUSH
62020: LD_INT 2
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62049: LD_ADDR_VAR 0 54
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: LD_INT 2
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 2
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: LD_INT 2
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: LD_INT 2
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: LD_INT 2
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 2
62225: NEG
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 2
62236: NEG
62237: PUSH
62238: LD_INT 1
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62279: LD_ADDR_VAR 0 55
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: LD_INT 1
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: LD_INT 2
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: LD_INT 2
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 2
62414: PUSH
62415: LD_INT 2
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: NEG
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 2
62466: NEG
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: NEG
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62509: LD_ADDR_VAR 0 56
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: LD_INT 1
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: LD_INT 1
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: LD_INT 2
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: LD_INT 2
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 2
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 2
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 2
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: LD_INT 2
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: LD_INT 2
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 2
62696: NEG
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 2
62708: NEG
62709: PUSH
62710: LD_INT 2
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62739: LD_ADDR_VAR 0 57
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: LD_INT 1
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 1
62797: NEG
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: LD_INT 2
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: LD_INT 2
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 2
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 2
62874: PUSH
62875: LD_INT 2
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: LD_INT 2
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: LD_INT 2
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: LD_INT 1
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 2
62915: NEG
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 2
62926: NEG
62927: PUSH
62928: LD_INT 1
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: NEG
62939: PUSH
62940: LD_INT 2
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62969: LD_ADDR_VAR 0 58
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 1
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: LD_INT 2
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 1
63073: PUSH
63074: LD_INT 1
63076: NEG
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 2
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 2
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 2
63104: PUSH
63105: LD_INT 2
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: LD_INT 2
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: LD_INT 2
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 2
63145: NEG
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 2
63156: NEG
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: LD_INT 2
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63199: LD_ADDR_VAR 0 59
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63287: LD_ADDR_VAR 0 60
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: LD_INT 1
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63375: LD_ADDR_VAR 0 61
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63463: LD_ADDR_VAR 0 62
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63551: LD_ADDR_VAR 0 63
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: LD_INT 1
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63639: LD_ADDR_VAR 0 64
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: ST_TO_ADDR
// end ; 1 :
63727: GO 69624
63729: LD_INT 1
63731: DOUBLE
63732: EQUAL
63733: IFTRUE 63737
63735: GO 66360
63737: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63738: LD_ADDR_VAR 0 11
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: LD_INT 3
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: LD_INT 3
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: LD_INT 2
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: LIST
63781: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63782: LD_ADDR_VAR 0 12
63786: PUSH
63787: LD_INT 2
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 3
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 3
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: LIST
63822: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63823: LD_ADDR_VAR 0 13
63827: PUSH
63828: LD_INT 3
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 3
63840: PUSH
63841: LD_INT 3
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: LD_INT 3
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: LIST
63862: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63863: LD_ADDR_VAR 0 14
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: LD_INT 3
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 3
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: LIST
63903: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63904: LD_ADDR_VAR 0 15
63908: PUSH
63909: LD_INT 2
63911: NEG
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 3
63922: NEG
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 3
63933: NEG
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: LIST
63947: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63948: LD_ADDR_VAR 0 16
63952: PUSH
63953: LD_INT 2
63955: NEG
63956: PUSH
63957: LD_INT 3
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 3
63967: NEG
63968: PUSH
63969: LD_INT 2
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 3
63979: NEG
63980: PUSH
63981: LD_INT 3
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: LIST
63993: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63994: LD_ADDR_VAR 0 17
63998: PUSH
63999: LD_INT 1
64001: NEG
64002: PUSH
64003: LD_INT 3
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: LD_INT 3
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: LD_INT 2
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: LIST
64037: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64038: LD_ADDR_VAR 0 18
64042: PUSH
64043: LD_INT 2
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 3
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 3
64066: PUSH
64067: LD_INT 1
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: LIST
64078: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64079: LD_ADDR_VAR 0 19
64083: PUSH
64084: LD_INT 3
64086: PUSH
64087: LD_INT 2
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 3
64096: PUSH
64097: LD_INT 3
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: LD_INT 3
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64119: LD_ADDR_VAR 0 20
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: LD_INT 3
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: LD_INT 3
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64160: LD_ADDR_VAR 0 21
64164: PUSH
64165: LD_INT 2
64167: NEG
64168: PUSH
64169: LD_INT 1
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 3
64178: NEG
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 3
64189: NEG
64190: PUSH
64191: LD_INT 1
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: LIST
64203: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64204: LD_ADDR_VAR 0 22
64208: PUSH
64209: LD_INT 2
64211: NEG
64212: PUSH
64213: LD_INT 3
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 3
64223: NEG
64224: PUSH
64225: LD_INT 2
64227: NEG
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 3
64235: NEG
64236: PUSH
64237: LD_INT 3
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: LIST
64249: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64250: LD_ADDR_VAR 0 23
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: LD_INT 3
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 1
64268: NEG
64269: PUSH
64270: LD_INT 4
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: LD_INT 3
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: LIST
64293: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64294: LD_ADDR_VAR 0 24
64298: PUSH
64299: LD_INT 3
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 3
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 4
64322: PUSH
64323: LD_INT 1
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: LIST
64334: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64335: LD_ADDR_VAR 0 25
64339: PUSH
64340: LD_INT 3
64342: PUSH
64343: LD_INT 3
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 4
64352: PUSH
64353: LD_INT 3
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: LD_INT 4
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64375: LD_ADDR_VAR 0 26
64379: PUSH
64380: LD_INT 0
64382: PUSH
64383: LD_INT 3
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: LD_INT 4
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 3
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: LIST
64415: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64416: LD_ADDR_VAR 0 27
64420: PUSH
64421: LD_INT 3
64423: NEG
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 3
64434: NEG
64435: PUSH
64436: LD_INT 1
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 4
64445: NEG
64446: PUSH
64447: LD_INT 1
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: LIST
64459: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64460: LD_ADDR_VAR 0 28
64464: PUSH
64465: LD_INT 3
64467: NEG
64468: PUSH
64469: LD_INT 3
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 3
64479: NEG
64480: PUSH
64481: LD_INT 4
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 4
64491: NEG
64492: PUSH
64493: LD_INT 3
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: LIST
64505: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64506: LD_ADDR_VAR 0 29
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: LD_INT 3
64517: NEG
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 3
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: PUSH
64537: LD_INT 2
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: LD_INT 4
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: LD_INT 4
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: LD_INT 3
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 1
64581: NEG
64582: PUSH
64583: LD_INT 5
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: LD_INT 5
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: LD_INT 4
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: LD_INT 6
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: LD_INT 6
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: PUSH
64639: LD_INT 5
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64661: LD_ADDR_VAR 0 30
64665: PUSH
64666: LD_INT 2
64668: PUSH
64669: LD_INT 1
64671: NEG
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 3
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 3
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 3
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 4
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 4
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 4
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 5
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 5
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 5
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 6
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 6
64782: PUSH
64783: LD_INT 1
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64804: LD_ADDR_VAR 0 31
64808: PUSH
64809: LD_INT 3
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 3
64821: PUSH
64822: LD_INT 3
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 2
64831: PUSH
64832: LD_INT 3
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 4
64841: PUSH
64842: LD_INT 3
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 4
64851: PUSH
64852: LD_INT 4
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 3
64861: PUSH
64862: LD_INT 4
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 5
64871: PUSH
64872: LD_INT 4
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 5
64881: PUSH
64882: LD_INT 5
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 4
64891: PUSH
64892: LD_INT 5
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 6
64901: PUSH
64902: LD_INT 5
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 6
64911: PUSH
64912: LD_INT 6
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 5
64921: PUSH
64922: LD_INT 6
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64943: LD_ADDR_VAR 0 32
64947: PUSH
64948: LD_INT 1
64950: PUSH
64951: LD_INT 3
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: LD_INT 3
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 1
64970: NEG
64971: PUSH
64972: LD_INT 2
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: LD_INT 4
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 4
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: LD_INT 3
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 1
65012: PUSH
65013: LD_INT 5
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: LD_INT 5
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: LD_INT 4
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 1
65043: PUSH
65044: LD_INT 6
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: LD_INT 6
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 1
65063: NEG
65064: PUSH
65065: LD_INT 5
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65086: LD_ADDR_VAR 0 33
65090: PUSH
65091: LD_INT 2
65093: NEG
65094: PUSH
65095: LD_INT 1
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 3
65104: NEG
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 3
65115: NEG
65116: PUSH
65117: LD_INT 1
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 3
65127: NEG
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 4
65138: NEG
65139: PUSH
65140: LD_INT 0
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 4
65149: NEG
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 4
65161: NEG
65162: PUSH
65163: LD_INT 1
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 5
65172: NEG
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 5
65183: NEG
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 5
65195: NEG
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 6
65206: NEG
65207: PUSH
65208: LD_INT 0
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 6
65217: NEG
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65241: LD_ADDR_VAR 0 34
65245: PUSH
65246: LD_INT 2
65248: NEG
65249: PUSH
65250: LD_INT 3
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 3
65260: NEG
65261: PUSH
65262: LD_INT 2
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 3
65272: NEG
65273: PUSH
65274: LD_INT 3
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 3
65284: NEG
65285: PUSH
65286: LD_INT 4
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 4
65296: NEG
65297: PUSH
65298: LD_INT 3
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 4
65308: NEG
65309: PUSH
65310: LD_INT 4
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 4
65320: NEG
65321: PUSH
65322: LD_INT 5
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 5
65332: NEG
65333: PUSH
65334: LD_INT 4
65336: NEG
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 5
65344: NEG
65345: PUSH
65346: LD_INT 5
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 5
65356: NEG
65357: PUSH
65358: LD_INT 6
65360: NEG
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 6
65368: NEG
65369: PUSH
65370: LD_INT 5
65372: NEG
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 6
65380: NEG
65381: PUSH
65382: LD_INT 6
65384: NEG
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65404: LD_ADDR_VAR 0 41
65408: PUSH
65409: LD_INT 0
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 1
65422: NEG
65423: PUSH
65424: LD_INT 3
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: LD_INT 2
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: LIST
65447: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65448: LD_ADDR_VAR 0 42
65452: PUSH
65453: LD_INT 2
65455: PUSH
65456: LD_INT 0
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 2
65465: PUSH
65466: LD_INT 1
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 3
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: LIST
65488: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65489: LD_ADDR_VAR 0 43
65493: PUSH
65494: LD_INT 2
65496: PUSH
65497: LD_INT 2
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 3
65506: PUSH
65507: LD_INT 2
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 2
65516: PUSH
65517: LD_INT 3
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: LIST
65528: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65529: LD_ADDR_VAR 0 44
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: LD_INT 2
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 1
65546: PUSH
65547: LD_INT 3
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 1
65556: NEG
65557: PUSH
65558: LD_INT 2
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: LIST
65569: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65570: LD_ADDR_VAR 0 45
65574: PUSH
65575: LD_INT 2
65577: NEG
65578: PUSH
65579: LD_INT 0
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 2
65588: NEG
65589: PUSH
65590: LD_INT 1
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 3
65599: NEG
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: LIST
65613: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65614: LD_ADDR_VAR 0 46
65618: PUSH
65619: LD_INT 2
65621: NEG
65622: PUSH
65623: LD_INT 2
65625: NEG
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 2
65633: NEG
65634: PUSH
65635: LD_INT 3
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 3
65645: NEG
65646: PUSH
65647: LD_INT 2
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65660: LD_ADDR_VAR 0 47
65664: PUSH
65665: LD_INT 2
65667: NEG
65668: PUSH
65669: LD_INT 3
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 1
65679: NEG
65680: PUSH
65681: LD_INT 3
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65693: LD_ADDR_VAR 0 48
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: LD_INT 2
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 2
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65724: LD_ADDR_VAR 0 49
65728: PUSH
65729: LD_INT 3
65731: PUSH
65732: LD_INT 1
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 3
65741: PUSH
65742: LD_INT 2
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65753: LD_ADDR_VAR 0 50
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: LD_INT 3
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65782: LD_ADDR_VAR 0 51
65786: PUSH
65787: LD_INT 1
65789: NEG
65790: PUSH
65791: LD_INT 2
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 2
65800: NEG
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65813: LD_ADDR_VAR 0 52
65817: PUSH
65818: LD_INT 3
65820: NEG
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 3
65832: NEG
65833: PUSH
65834: LD_INT 2
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65846: LD_ADDR_VAR 0 53
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: LD_INT 3
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: LD_INT 3
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65890: LD_ADDR_VAR 0 54
65894: PUSH
65895: LD_INT 2
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 3
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 3
65918: PUSH
65919: LD_INT 1
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65931: LD_ADDR_VAR 0 55
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: LD_INT 2
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 3
65948: PUSH
65949: LD_INT 3
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 2
65958: PUSH
65959: LD_INT 3
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65971: LD_ADDR_VAR 0 56
65975: PUSH
65976: LD_INT 1
65978: PUSH
65979: LD_INT 3
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: LD_INT 3
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 1
65998: NEG
65999: PUSH
66000: LD_INT 2
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: LIST
66011: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66012: LD_ADDR_VAR 0 57
66016: PUSH
66017: LD_INT 2
66019: NEG
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 3
66030: NEG
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 3
66041: NEG
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: LIST
66055: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66056: LD_ADDR_VAR 0 58
66060: PUSH
66061: LD_INT 2
66063: NEG
66064: PUSH
66065: LD_INT 3
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 3
66075: NEG
66076: PUSH
66077: LD_INT 2
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 3
66087: NEG
66088: PUSH
66089: LD_INT 3
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: LIST
66101: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66102: LD_ADDR_VAR 0 59
66106: PUSH
66107: LD_INT 1
66109: NEG
66110: PUSH
66111: LD_INT 2
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: LD_INT 2
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 1
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66146: LD_ADDR_VAR 0 60
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 2
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 2
66174: PUSH
66175: LD_INT 1
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: LIST
66186: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66187: LD_ADDR_VAR 0 61
66191: PUSH
66192: LD_INT 2
66194: PUSH
66195: LD_INT 1
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 2
66204: PUSH
66205: LD_INT 2
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: LD_INT 2
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: LIST
66226: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66227: LD_ADDR_VAR 0 62
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: LD_INT 2
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 0
66244: PUSH
66245: LD_INT 2
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 1
66254: NEG
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: LIST
66267: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66268: LD_ADDR_VAR 0 63
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: LD_INT 1
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 2
66286: NEG
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 2
66297: NEG
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: LIST
66311: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66312: LD_ADDR_VAR 0 64
66316: PUSH
66317: LD_INT 1
66319: NEG
66320: PUSH
66321: LD_INT 2
66323: NEG
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 2
66331: NEG
66332: PUSH
66333: LD_INT 1
66335: NEG
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 2
66343: NEG
66344: PUSH
66345: LD_INT 2
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: LIST
66357: ST_TO_ADDR
// end ; 2 :
66358: GO 69624
66360: LD_INT 2
66362: DOUBLE
66363: EQUAL
66364: IFTRUE 66368
66366: GO 69623
66368: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66369: LD_ADDR_VAR 0 29
66373: PUSH
66374: LD_INT 4
66376: PUSH
66377: LD_INT 0
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 4
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 5
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 5
66407: PUSH
66408: LD_INT 1
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 4
66417: PUSH
66418: LD_INT 1
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 3
66427: PUSH
66428: LD_INT 0
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 3
66437: PUSH
66438: LD_INT 1
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 3
66448: PUSH
66449: LD_INT 2
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 5
66459: PUSH
66460: LD_INT 2
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 3
66469: PUSH
66470: LD_INT 3
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 3
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 4
66489: PUSH
66490: LD_INT 3
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 4
66499: PUSH
66500: LD_INT 4
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 3
66509: PUSH
66510: LD_INT 4
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 2
66519: PUSH
66520: LD_INT 3
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 2
66529: PUSH
66530: LD_INT 2
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 4
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 2
66549: PUSH
66550: LD_INT 4
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: LD_INT 4
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: LD_INT 3
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: LD_INT 4
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 1
66589: PUSH
66590: LD_INT 5
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 0
66599: PUSH
66600: LD_INT 5
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 1
66609: NEG
66610: PUSH
66611: LD_INT 4
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: LD_INT 3
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 2
66631: PUSH
66632: LD_INT 5
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 2
66641: NEG
66642: PUSH
66643: LD_INT 3
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 3
66652: NEG
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 3
66663: NEG
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: LD_INT 0
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: NEG
66687: PUSH
66688: LD_INT 1
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 3
66697: NEG
66698: PUSH
66699: LD_INT 1
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 4
66708: NEG
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 4
66719: NEG
66720: PUSH
66721: LD_INT 1
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 4
66731: NEG
66732: PUSH
66733: LD_INT 2
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 2
66743: NEG
66744: PUSH
66745: LD_INT 2
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 4
66754: NEG
66755: PUSH
66756: LD_INT 4
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 4
66766: NEG
66767: PUSH
66768: LD_INT 5
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 3
66778: NEG
66779: PUSH
66780: LD_INT 4
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 3
66790: NEG
66791: PUSH
66792: LD_INT 3
66794: NEG
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 4
66802: NEG
66803: PUSH
66804: LD_INT 3
66806: NEG
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 5
66814: NEG
66815: PUSH
66816: LD_INT 4
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 5
66826: NEG
66827: PUSH
66828: LD_INT 5
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 3
66838: NEG
66839: PUSH
66840: LD_INT 5
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 5
66850: NEG
66851: PUSH
66852: LD_INT 3
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66907: LD_ADDR_VAR 0 30
66911: PUSH
66912: LD_INT 4
66914: PUSH
66915: LD_INT 4
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 4
66924: PUSH
66925: LD_INT 3
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 5
66934: PUSH
66935: LD_INT 4
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 5
66944: PUSH
66945: LD_INT 5
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 4
66954: PUSH
66955: LD_INT 5
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: LD_INT 4
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: LD_INT 3
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 5
66984: PUSH
66985: LD_INT 3
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: LD_INT 5
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: LD_INT 3
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: LD_INT 3
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: LD_INT 4
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: LD_INT 4
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 1
67054: NEG
67055: PUSH
67056: LD_INT 3
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 1
67065: NEG
67066: PUSH
67067: LD_INT 2
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 2
67076: PUSH
67077: LD_INT 4
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 2
67086: NEG
67087: PUSH
67088: LD_INT 2
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 4
67097: NEG
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 4
67108: NEG
67109: PUSH
67110: LD_INT 1
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 3
67120: NEG
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 3
67131: NEG
67132: PUSH
67133: LD_INT 1
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 4
67142: NEG
67143: PUSH
67144: LD_INT 1
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 5
67153: NEG
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 5
67164: NEG
67165: PUSH
67166: LD_INT 1
67168: NEG
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 5
67176: NEG
67177: PUSH
67178: LD_INT 2
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 3
67188: NEG
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 3
67199: NEG
67200: PUSH
67201: LD_INT 3
67203: NEG
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 3
67211: NEG
67212: PUSH
67213: LD_INT 4
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 2
67223: NEG
67224: PUSH
67225: LD_INT 3
67227: NEG
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 2
67235: NEG
67236: PUSH
67237: LD_INT 2
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 3
67247: NEG
67248: PUSH
67249: LD_INT 2
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 4
67259: NEG
67260: PUSH
67261: LD_INT 3
67263: NEG
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 4
67271: NEG
67272: PUSH
67273: LD_INT 4
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 2
67283: NEG
67284: PUSH
67285: LD_INT 4
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 4
67295: NEG
67296: PUSH
67297: LD_INT 2
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 0
67307: PUSH
67308: LD_INT 4
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 0
67318: PUSH
67319: LD_INT 5
67321: NEG
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 1
67329: PUSH
67330: LD_INT 4
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: LD_INT 3
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: LD_INT 3
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 1
67362: NEG
67363: PUSH
67364: LD_INT 4
67366: NEG
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 1
67374: NEG
67375: PUSH
67376: LD_INT 5
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 2
67386: PUSH
67387: LD_INT 3
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 2
67397: NEG
67398: PUSH
67399: LD_INT 5
67401: NEG
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67454: LD_ADDR_VAR 0 31
67458: PUSH
67459: LD_INT 0
67461: PUSH
67462: LD_INT 4
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: LD_INT 3
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 1
67481: PUSH
67482: LD_INT 4
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 1
67491: PUSH
67492: LD_INT 5
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 0
67501: PUSH
67502: LD_INT 5
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 1
67511: NEG
67512: PUSH
67513: LD_INT 4
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 1
67522: NEG
67523: PUSH
67524: LD_INT 3
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 2
67533: PUSH
67534: LD_INT 5
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: NEG
67544: PUSH
67545: LD_INT 3
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 3
67554: NEG
67555: PUSH
67556: LD_INT 0
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 3
67565: NEG
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 2
67577: NEG
67578: PUSH
67579: LD_INT 0
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 2
67588: NEG
67589: PUSH
67590: LD_INT 1
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 3
67599: NEG
67600: PUSH
67601: LD_INT 1
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 4
67610: NEG
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 4
67621: NEG
67622: PUSH
67623: LD_INT 1
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 4
67633: NEG
67634: PUSH
67635: LD_INT 2
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 2
67645: NEG
67646: PUSH
67647: LD_INT 2
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 4
67656: NEG
67657: PUSH
67658: LD_INT 4
67660: NEG
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 4
67668: NEG
67669: PUSH
67670: LD_INT 5
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 3
67680: NEG
67681: PUSH
67682: LD_INT 4
67684: NEG
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 3
67692: NEG
67693: PUSH
67694: LD_INT 3
67696: NEG
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 4
67704: NEG
67705: PUSH
67706: LD_INT 3
67708: NEG
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 5
67716: NEG
67717: PUSH
67718: LD_INT 4
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 5
67728: NEG
67729: PUSH
67730: LD_INT 5
67732: NEG
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 3
67740: NEG
67741: PUSH
67742: LD_INT 5
67744: NEG
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 5
67752: NEG
67753: PUSH
67754: LD_INT 3
67756: NEG
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: LD_INT 3
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: LD_INT 4
67778: NEG
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 1
67786: PUSH
67787: LD_INT 3
67789: NEG
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 1
67797: PUSH
67798: LD_INT 2
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 0
67808: PUSH
67809: LD_INT 2
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 1
67819: NEG
67820: PUSH
67821: LD_INT 3
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 1
67831: NEG
67832: PUSH
67833: LD_INT 4
67835: NEG
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 2
67843: PUSH
67844: LD_INT 2
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 2
67854: NEG
67855: PUSH
67856: LD_INT 4
67858: NEG
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 4
67866: PUSH
67867: LD_INT 0
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 4
67876: PUSH
67877: LD_INT 1
67879: NEG
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 5
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 5
67897: PUSH
67898: LD_INT 1
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 4
67907: PUSH
67908: LD_INT 1
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 3
67917: PUSH
67918: LD_INT 0
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 3
67927: PUSH
67928: LD_INT 1
67930: NEG
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 3
67938: PUSH
67939: LD_INT 2
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 5
67949: PUSH
67950: LD_INT 2
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68004: LD_ADDR_VAR 0 32
68008: PUSH
68009: LD_INT 4
68011: NEG
68012: PUSH
68013: LD_INT 0
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 4
68022: NEG
68023: PUSH
68024: LD_INT 1
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 3
68034: NEG
68035: PUSH
68036: LD_INT 0
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 3
68045: NEG
68046: PUSH
68047: LD_INT 1
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 4
68056: NEG
68057: PUSH
68058: LD_INT 1
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 5
68067: NEG
68068: PUSH
68069: LD_INT 0
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 5
68078: NEG
68079: PUSH
68080: LD_INT 1
68082: NEG
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 5
68090: NEG
68091: PUSH
68092: LD_INT 2
68094: NEG
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 3
68102: NEG
68103: PUSH
68104: LD_INT 2
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 3
68113: NEG
68114: PUSH
68115: LD_INT 3
68117: NEG
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 3
68125: NEG
68126: PUSH
68127: LD_INT 4
68129: NEG
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 2
68137: NEG
68138: PUSH
68139: LD_INT 3
68141: NEG
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 2
68149: NEG
68150: PUSH
68151: LD_INT 2
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 3
68161: NEG
68162: PUSH
68163: LD_INT 2
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 4
68173: NEG
68174: PUSH
68175: LD_INT 3
68177: NEG
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 4
68185: NEG
68186: PUSH
68187: LD_INT 4
68189: NEG
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 2
68197: NEG
68198: PUSH
68199: LD_INT 4
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 4
68209: NEG
68210: PUSH
68211: LD_INT 2
68213: NEG
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 0
68221: PUSH
68222: LD_INT 4
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 0
68232: PUSH
68233: LD_INT 5
68235: NEG
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 1
68243: PUSH
68244: LD_INT 4
68246: NEG
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 1
68254: PUSH
68255: LD_INT 3
68257: NEG
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 0
68265: PUSH
68266: LD_INT 3
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 1
68276: NEG
68277: PUSH
68278: LD_INT 4
68280: NEG
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 1
68288: NEG
68289: PUSH
68290: LD_INT 5
68292: NEG
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 2
68300: PUSH
68301: LD_INT 3
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 2
68311: NEG
68312: PUSH
68313: LD_INT 5
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 3
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 3
68333: PUSH
68334: LD_INT 1
68336: NEG
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 4
68344: PUSH
68345: LD_INT 0
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 4
68354: PUSH
68355: LD_INT 1
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 3
68364: PUSH
68365: LD_INT 1
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 2
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 2
68384: PUSH
68385: LD_INT 1
68387: NEG
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 2
68395: PUSH
68396: LD_INT 2
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 4
68406: PUSH
68407: LD_INT 2
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 4
68416: PUSH
68417: LD_INT 4
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 4
68426: PUSH
68427: LD_INT 3
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 5
68436: PUSH
68437: LD_INT 4
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 5
68446: PUSH
68447: LD_INT 5
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 4
68456: PUSH
68457: LD_INT 5
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 3
68466: PUSH
68467: LD_INT 4
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 3
68476: PUSH
68477: LD_INT 3
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 5
68486: PUSH
68487: LD_INT 3
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 3
68496: PUSH
68497: LD_INT 5
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68551: LD_ADDR_VAR 0 33
68555: PUSH
68556: LD_INT 4
68558: NEG
68559: PUSH
68560: LD_INT 4
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 4
68570: NEG
68571: PUSH
68572: LD_INT 5
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 3
68582: NEG
68583: PUSH
68584: LD_INT 4
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 3
68594: NEG
68595: PUSH
68596: LD_INT 3
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 4
68606: NEG
68607: PUSH
68608: LD_INT 3
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 5
68618: NEG
68619: PUSH
68620: LD_INT 4
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 5
68630: NEG
68631: PUSH
68632: LD_INT 5
68634: NEG
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 3
68642: NEG
68643: PUSH
68644: LD_INT 5
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 5
68654: NEG
68655: PUSH
68656: LD_INT 3
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 0
68666: PUSH
68667: LD_INT 3
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 0
68677: PUSH
68678: LD_INT 4
68680: NEG
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 1
68688: PUSH
68689: LD_INT 3
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 1
68699: PUSH
68700: LD_INT 2
68702: NEG
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 0
68710: PUSH
68711: LD_INT 2
68713: NEG
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: LD_INT 3
68725: NEG
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 1
68733: NEG
68734: PUSH
68735: LD_INT 4
68737: NEG
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 2
68745: PUSH
68746: LD_INT 2
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 2
68756: NEG
68757: PUSH
68758: LD_INT 4
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 4
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 4
68778: PUSH
68779: LD_INT 1
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 5
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 5
68799: PUSH
68800: LD_INT 1
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 4
68809: PUSH
68810: LD_INT 1
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 3
68819: PUSH
68820: LD_INT 0
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 3
68829: PUSH
68830: LD_INT 1
68832: NEG
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 3
68840: PUSH
68841: LD_INT 2
68843: NEG
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 5
68851: PUSH
68852: LD_INT 2
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 3
68861: PUSH
68862: LD_INT 3
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 3
68871: PUSH
68872: LD_INT 2
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 4
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 4
68891: PUSH
68892: LD_INT 4
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 3
68901: PUSH
68902: LD_INT 4
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 2
68911: PUSH
68912: LD_INT 3
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 2
68921: PUSH
68922: LD_INT 2
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 4
68931: PUSH
68932: LD_INT 2
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 2
68941: PUSH
68942: LD_INT 4
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 0
68951: PUSH
68952: LD_INT 4
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 0
68961: PUSH
68962: LD_INT 3
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 1
68971: PUSH
68972: LD_INT 4
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 1
68981: PUSH
68982: LD_INT 5
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 0
68991: PUSH
68992: LD_INT 5
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 1
69001: NEG
69002: PUSH
69003: LD_INT 4
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 1
69012: NEG
69013: PUSH
69014: LD_INT 3
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 2
69023: PUSH
69024: LD_INT 5
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 2
69033: NEG
69034: PUSH
69035: LD_INT 3
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69089: LD_ADDR_VAR 0 34
69093: PUSH
69094: LD_INT 0
69096: PUSH
69097: LD_INT 4
69099: NEG
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 0
69107: PUSH
69108: LD_INT 5
69110: NEG
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 1
69118: PUSH
69119: LD_INT 4
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 1
69129: PUSH
69130: LD_INT 3
69132: NEG
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 0
69140: PUSH
69141: LD_INT 3
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 1
69151: NEG
69152: PUSH
69153: LD_INT 4
69155: NEG
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 1
69163: NEG
69164: PUSH
69165: LD_INT 5
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 2
69175: PUSH
69176: LD_INT 3
69178: NEG
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 2
69186: NEG
69187: PUSH
69188: LD_INT 5
69190: NEG
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 3
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 3
69208: PUSH
69209: LD_INT 1
69211: NEG
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 4
69219: PUSH
69220: LD_INT 0
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 4
69229: PUSH
69230: LD_INT 1
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 3
69239: PUSH
69240: LD_INT 1
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 2
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 2
69259: PUSH
69260: LD_INT 1
69262: NEG
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 2
69270: PUSH
69271: LD_INT 2
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 4
69281: PUSH
69282: LD_INT 2
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 4
69291: PUSH
69292: LD_INT 4
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 4
69301: PUSH
69302: LD_INT 3
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 5
69311: PUSH
69312: LD_INT 4
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 5
69321: PUSH
69322: LD_INT 5
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 4
69331: PUSH
69332: LD_INT 5
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 3
69341: PUSH
69342: LD_INT 4
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 3
69351: PUSH
69352: LD_INT 3
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 5
69361: PUSH
69362: LD_INT 3
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 3
69371: PUSH
69372: LD_INT 5
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: LD_INT 3
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 0
69391: PUSH
69392: LD_INT 2
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 1
69401: PUSH
69402: LD_INT 3
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 1
69411: PUSH
69412: LD_INT 4
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 0
69421: PUSH
69422: LD_INT 4
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 1
69431: NEG
69432: PUSH
69433: LD_INT 3
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 1
69442: NEG
69443: PUSH
69444: LD_INT 2
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 2
69453: PUSH
69454: LD_INT 4
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 2
69463: NEG
69464: PUSH
69465: LD_INT 2
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 4
69474: NEG
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 4
69485: NEG
69486: PUSH
69487: LD_INT 1
69489: NEG
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 3
69497: NEG
69498: PUSH
69499: LD_INT 0
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 3
69508: NEG
69509: PUSH
69510: LD_INT 1
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 4
69519: NEG
69520: PUSH
69521: LD_INT 1
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 5
69530: NEG
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 5
69541: NEG
69542: PUSH
69543: LD_INT 1
69545: NEG
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 5
69553: NEG
69554: PUSH
69555: LD_INT 2
69557: NEG
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 3
69565: NEG
69566: PUSH
69567: LD_INT 2
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: ST_TO_ADDR
// end ; end ;
69621: GO 69624
69623: POP
// case btype of b_depot , b_warehouse :
69624: LD_VAR 0 1
69628: PUSH
69629: LD_INT 0
69631: DOUBLE
69632: EQUAL
69633: IFTRUE 69643
69635: LD_INT 1
69637: DOUBLE
69638: EQUAL
69639: IFTRUE 69643
69641: GO 69844
69643: POP
// case nation of nation_american :
69644: LD_VAR 0 5
69648: PUSH
69649: LD_INT 1
69651: DOUBLE
69652: EQUAL
69653: IFTRUE 69657
69655: GO 69713
69657: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69658: LD_ADDR_VAR 0 9
69662: PUSH
69663: LD_VAR 0 11
69667: PUSH
69668: LD_VAR 0 12
69672: PUSH
69673: LD_VAR 0 13
69677: PUSH
69678: LD_VAR 0 14
69682: PUSH
69683: LD_VAR 0 15
69687: PUSH
69688: LD_VAR 0 16
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: PUSH
69701: LD_VAR 0 4
69705: PUSH
69706: LD_INT 1
69708: PLUS
69709: ARRAY
69710: ST_TO_ADDR
69711: GO 69842
69713: LD_INT 2
69715: DOUBLE
69716: EQUAL
69717: IFTRUE 69721
69719: GO 69777
69721: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69722: LD_ADDR_VAR 0 9
69726: PUSH
69727: LD_VAR 0 17
69731: PUSH
69732: LD_VAR 0 18
69736: PUSH
69737: LD_VAR 0 19
69741: PUSH
69742: LD_VAR 0 20
69746: PUSH
69747: LD_VAR 0 21
69751: PUSH
69752: LD_VAR 0 22
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: PUSH
69765: LD_VAR 0 4
69769: PUSH
69770: LD_INT 1
69772: PLUS
69773: ARRAY
69774: ST_TO_ADDR
69775: GO 69842
69777: LD_INT 3
69779: DOUBLE
69780: EQUAL
69781: IFTRUE 69785
69783: GO 69841
69785: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69786: LD_ADDR_VAR 0 9
69790: PUSH
69791: LD_VAR 0 23
69795: PUSH
69796: LD_VAR 0 24
69800: PUSH
69801: LD_VAR 0 25
69805: PUSH
69806: LD_VAR 0 26
69810: PUSH
69811: LD_VAR 0 27
69815: PUSH
69816: LD_VAR 0 28
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: PUSH
69829: LD_VAR 0 4
69833: PUSH
69834: LD_INT 1
69836: PLUS
69837: ARRAY
69838: ST_TO_ADDR
69839: GO 69842
69841: POP
69842: GO 70397
69844: LD_INT 2
69846: DOUBLE
69847: EQUAL
69848: IFTRUE 69858
69850: LD_INT 3
69852: DOUBLE
69853: EQUAL
69854: IFTRUE 69858
69856: GO 69914
69858: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69859: LD_ADDR_VAR 0 9
69863: PUSH
69864: LD_VAR 0 29
69868: PUSH
69869: LD_VAR 0 30
69873: PUSH
69874: LD_VAR 0 31
69878: PUSH
69879: LD_VAR 0 32
69883: PUSH
69884: LD_VAR 0 33
69888: PUSH
69889: LD_VAR 0 34
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: PUSH
69902: LD_VAR 0 4
69906: PUSH
69907: LD_INT 1
69909: PLUS
69910: ARRAY
69911: ST_TO_ADDR
69912: GO 70397
69914: LD_INT 16
69916: DOUBLE
69917: EQUAL
69918: IFTRUE 69976
69920: LD_INT 17
69922: DOUBLE
69923: EQUAL
69924: IFTRUE 69976
69926: LD_INT 18
69928: DOUBLE
69929: EQUAL
69930: IFTRUE 69976
69932: LD_INT 19
69934: DOUBLE
69935: EQUAL
69936: IFTRUE 69976
69938: LD_INT 22
69940: DOUBLE
69941: EQUAL
69942: IFTRUE 69976
69944: LD_INT 20
69946: DOUBLE
69947: EQUAL
69948: IFTRUE 69976
69950: LD_INT 21
69952: DOUBLE
69953: EQUAL
69954: IFTRUE 69976
69956: LD_INT 23
69958: DOUBLE
69959: EQUAL
69960: IFTRUE 69976
69962: LD_INT 24
69964: DOUBLE
69965: EQUAL
69966: IFTRUE 69976
69968: LD_INT 25
69970: DOUBLE
69971: EQUAL
69972: IFTRUE 69976
69974: GO 70032
69976: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69977: LD_ADDR_VAR 0 9
69981: PUSH
69982: LD_VAR 0 35
69986: PUSH
69987: LD_VAR 0 36
69991: PUSH
69992: LD_VAR 0 37
69996: PUSH
69997: LD_VAR 0 38
70001: PUSH
70002: LD_VAR 0 39
70006: PUSH
70007: LD_VAR 0 40
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: PUSH
70020: LD_VAR 0 4
70024: PUSH
70025: LD_INT 1
70027: PLUS
70028: ARRAY
70029: ST_TO_ADDR
70030: GO 70397
70032: LD_INT 6
70034: DOUBLE
70035: EQUAL
70036: IFTRUE 70088
70038: LD_INT 7
70040: DOUBLE
70041: EQUAL
70042: IFTRUE 70088
70044: LD_INT 8
70046: DOUBLE
70047: EQUAL
70048: IFTRUE 70088
70050: LD_INT 13
70052: DOUBLE
70053: EQUAL
70054: IFTRUE 70088
70056: LD_INT 12
70058: DOUBLE
70059: EQUAL
70060: IFTRUE 70088
70062: LD_INT 15
70064: DOUBLE
70065: EQUAL
70066: IFTRUE 70088
70068: LD_INT 11
70070: DOUBLE
70071: EQUAL
70072: IFTRUE 70088
70074: LD_INT 14
70076: DOUBLE
70077: EQUAL
70078: IFTRUE 70088
70080: LD_INT 10
70082: DOUBLE
70083: EQUAL
70084: IFTRUE 70088
70086: GO 70144
70088: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70089: LD_ADDR_VAR 0 9
70093: PUSH
70094: LD_VAR 0 41
70098: PUSH
70099: LD_VAR 0 42
70103: PUSH
70104: LD_VAR 0 43
70108: PUSH
70109: LD_VAR 0 44
70113: PUSH
70114: LD_VAR 0 45
70118: PUSH
70119: LD_VAR 0 46
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: PUSH
70132: LD_VAR 0 4
70136: PUSH
70137: LD_INT 1
70139: PLUS
70140: ARRAY
70141: ST_TO_ADDR
70142: GO 70397
70144: LD_INT 36
70146: DOUBLE
70147: EQUAL
70148: IFTRUE 70152
70150: GO 70208
70152: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70153: LD_ADDR_VAR 0 9
70157: PUSH
70158: LD_VAR 0 47
70162: PUSH
70163: LD_VAR 0 48
70167: PUSH
70168: LD_VAR 0 49
70172: PUSH
70173: LD_VAR 0 50
70177: PUSH
70178: LD_VAR 0 51
70182: PUSH
70183: LD_VAR 0 52
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: PUSH
70196: LD_VAR 0 4
70200: PUSH
70201: LD_INT 1
70203: PLUS
70204: ARRAY
70205: ST_TO_ADDR
70206: GO 70397
70208: LD_INT 4
70210: DOUBLE
70211: EQUAL
70212: IFTRUE 70234
70214: LD_INT 5
70216: DOUBLE
70217: EQUAL
70218: IFTRUE 70234
70220: LD_INT 34
70222: DOUBLE
70223: EQUAL
70224: IFTRUE 70234
70226: LD_INT 37
70228: DOUBLE
70229: EQUAL
70230: IFTRUE 70234
70232: GO 70290
70234: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70235: LD_ADDR_VAR 0 9
70239: PUSH
70240: LD_VAR 0 53
70244: PUSH
70245: LD_VAR 0 54
70249: PUSH
70250: LD_VAR 0 55
70254: PUSH
70255: LD_VAR 0 56
70259: PUSH
70260: LD_VAR 0 57
70264: PUSH
70265: LD_VAR 0 58
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: PUSH
70278: LD_VAR 0 4
70282: PUSH
70283: LD_INT 1
70285: PLUS
70286: ARRAY
70287: ST_TO_ADDR
70288: GO 70397
70290: LD_INT 31
70292: DOUBLE
70293: EQUAL
70294: IFTRUE 70340
70296: LD_INT 32
70298: DOUBLE
70299: EQUAL
70300: IFTRUE 70340
70302: LD_INT 33
70304: DOUBLE
70305: EQUAL
70306: IFTRUE 70340
70308: LD_INT 27
70310: DOUBLE
70311: EQUAL
70312: IFTRUE 70340
70314: LD_INT 26
70316: DOUBLE
70317: EQUAL
70318: IFTRUE 70340
70320: LD_INT 28
70322: DOUBLE
70323: EQUAL
70324: IFTRUE 70340
70326: LD_INT 29
70328: DOUBLE
70329: EQUAL
70330: IFTRUE 70340
70332: LD_INT 30
70334: DOUBLE
70335: EQUAL
70336: IFTRUE 70340
70338: GO 70396
70340: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70341: LD_ADDR_VAR 0 9
70345: PUSH
70346: LD_VAR 0 59
70350: PUSH
70351: LD_VAR 0 60
70355: PUSH
70356: LD_VAR 0 61
70360: PUSH
70361: LD_VAR 0 62
70365: PUSH
70366: LD_VAR 0 63
70370: PUSH
70371: LD_VAR 0 64
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: PUSH
70384: LD_VAR 0 4
70388: PUSH
70389: LD_INT 1
70391: PLUS
70392: ARRAY
70393: ST_TO_ADDR
70394: GO 70397
70396: POP
// temp_list2 = [ ] ;
70397: LD_ADDR_VAR 0 10
70401: PUSH
70402: EMPTY
70403: ST_TO_ADDR
// for i in temp_list do
70404: LD_ADDR_VAR 0 8
70408: PUSH
70409: LD_VAR 0 9
70413: PUSH
70414: FOR_IN
70415: IFFALSE 70467
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70417: LD_ADDR_VAR 0 10
70421: PUSH
70422: LD_VAR 0 10
70426: PUSH
70427: LD_VAR 0 8
70431: PUSH
70432: LD_INT 1
70434: ARRAY
70435: PUSH
70436: LD_VAR 0 2
70440: PLUS
70441: PUSH
70442: LD_VAR 0 8
70446: PUSH
70447: LD_INT 2
70449: ARRAY
70450: PUSH
70451: LD_VAR 0 3
70455: PLUS
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: EMPTY
70462: LIST
70463: ADD
70464: ST_TO_ADDR
70465: GO 70414
70467: POP
70468: POP
// result = temp_list2 ;
70469: LD_ADDR_VAR 0 7
70473: PUSH
70474: LD_VAR 0 10
70478: ST_TO_ADDR
// end ;
70479: LD_VAR 0 7
70483: RET
// export function EnemyInRange ( unit , dist ) ; begin
70484: LD_INT 0
70486: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70487: LD_ADDR_VAR 0 3
70491: PUSH
70492: LD_VAR 0 1
70496: PPUSH
70497: CALL_OW 255
70501: PPUSH
70502: LD_VAR 0 1
70506: PPUSH
70507: CALL_OW 250
70511: PPUSH
70512: LD_VAR 0 1
70516: PPUSH
70517: CALL_OW 251
70521: PPUSH
70522: LD_VAR 0 2
70526: PPUSH
70527: CALL 43857 0 4
70531: PUSH
70532: LD_INT 4
70534: ARRAY
70535: ST_TO_ADDR
// end ;
70536: LD_VAR 0 3
70540: RET
// export function PlayerSeeMe ( unit ) ; begin
70541: LD_INT 0
70543: PPUSH
// result := See ( your_side , unit ) ;
70544: LD_ADDR_VAR 0 2
70548: PUSH
70549: LD_OWVAR 2
70553: PPUSH
70554: LD_VAR 0 1
70558: PPUSH
70559: CALL_OW 292
70563: ST_TO_ADDR
// end ;
70564: LD_VAR 0 2
70568: RET
// export function ReverseDir ( unit ) ; begin
70569: LD_INT 0
70571: PPUSH
// if not unit then
70572: LD_VAR 0 1
70576: NOT
70577: IFFALSE 70581
// exit ;
70579: GO 70604
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70581: LD_ADDR_VAR 0 2
70585: PUSH
70586: LD_VAR 0 1
70590: PPUSH
70591: CALL_OW 254
70595: PUSH
70596: LD_INT 3
70598: PLUS
70599: PUSH
70600: LD_INT 6
70602: MOD
70603: ST_TO_ADDR
// end ;
70604: LD_VAR 0 2
70608: RET
// export function ReverseArray ( array ) ; var i ; begin
70609: LD_INT 0
70611: PPUSH
70612: PPUSH
// if not array then
70613: LD_VAR 0 1
70617: NOT
70618: IFFALSE 70622
// exit ;
70620: GO 70677
// result := [ ] ;
70622: LD_ADDR_VAR 0 2
70626: PUSH
70627: EMPTY
70628: ST_TO_ADDR
// for i := array downto 1 do
70629: LD_ADDR_VAR 0 3
70633: PUSH
70634: DOUBLE
70635: LD_VAR 0 1
70639: INC
70640: ST_TO_ADDR
70641: LD_INT 1
70643: PUSH
70644: FOR_DOWNTO
70645: IFFALSE 70675
// result := Join ( result , array [ i ] ) ;
70647: LD_ADDR_VAR 0 2
70651: PUSH
70652: LD_VAR 0 2
70656: PPUSH
70657: LD_VAR 0 1
70661: PUSH
70662: LD_VAR 0 3
70666: ARRAY
70667: PPUSH
70668: CALL 75322 0 2
70672: ST_TO_ADDR
70673: GO 70644
70675: POP
70676: POP
// end ;
70677: LD_VAR 0 2
70681: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70682: LD_INT 0
70684: PPUSH
70685: PPUSH
70686: PPUSH
70687: PPUSH
70688: PPUSH
70689: PPUSH
// if not unit or not hexes then
70690: LD_VAR 0 1
70694: NOT
70695: PUSH
70696: LD_VAR 0 2
70700: NOT
70701: OR
70702: IFFALSE 70706
// exit ;
70704: GO 70829
// dist := 9999 ;
70706: LD_ADDR_VAR 0 5
70710: PUSH
70711: LD_INT 9999
70713: ST_TO_ADDR
// for i = 1 to hexes do
70714: LD_ADDR_VAR 0 4
70718: PUSH
70719: DOUBLE
70720: LD_INT 1
70722: DEC
70723: ST_TO_ADDR
70724: LD_VAR 0 2
70728: PUSH
70729: FOR_TO
70730: IFFALSE 70817
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70732: LD_ADDR_VAR 0 6
70736: PUSH
70737: LD_VAR 0 1
70741: PPUSH
70742: LD_VAR 0 2
70746: PUSH
70747: LD_VAR 0 4
70751: ARRAY
70752: PUSH
70753: LD_INT 1
70755: ARRAY
70756: PPUSH
70757: LD_VAR 0 2
70761: PUSH
70762: LD_VAR 0 4
70766: ARRAY
70767: PUSH
70768: LD_INT 2
70770: ARRAY
70771: PPUSH
70772: CALL_OW 297
70776: ST_TO_ADDR
// if tdist < dist then
70777: LD_VAR 0 6
70781: PUSH
70782: LD_VAR 0 5
70786: LESS
70787: IFFALSE 70815
// begin hex := hexes [ i ] ;
70789: LD_ADDR_VAR 0 8
70793: PUSH
70794: LD_VAR 0 2
70798: PUSH
70799: LD_VAR 0 4
70803: ARRAY
70804: ST_TO_ADDR
// dist := tdist ;
70805: LD_ADDR_VAR 0 5
70809: PUSH
70810: LD_VAR 0 6
70814: ST_TO_ADDR
// end ; end ;
70815: GO 70729
70817: POP
70818: POP
// result := hex ;
70819: LD_ADDR_VAR 0 3
70823: PUSH
70824: LD_VAR 0 8
70828: ST_TO_ADDR
// end ;
70829: LD_VAR 0 3
70833: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70834: LD_INT 0
70836: PPUSH
70837: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70838: LD_VAR 0 1
70842: NOT
70843: PUSH
70844: LD_VAR 0 1
70848: PUSH
70849: LD_INT 21
70851: PUSH
70852: LD_INT 2
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 23
70861: PUSH
70862: LD_INT 2
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PPUSH
70873: CALL_OW 69
70877: IN
70878: NOT
70879: OR
70880: IFFALSE 70884
// exit ;
70882: GO 70931
// for i = 1 to 3 do
70884: LD_ADDR_VAR 0 3
70888: PUSH
70889: DOUBLE
70890: LD_INT 1
70892: DEC
70893: ST_TO_ADDR
70894: LD_INT 3
70896: PUSH
70897: FOR_TO
70898: IFFALSE 70929
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70900: LD_VAR 0 1
70904: PPUSH
70905: CALL_OW 250
70909: PPUSH
70910: LD_VAR 0 1
70914: PPUSH
70915: CALL_OW 251
70919: PPUSH
70920: LD_INT 1
70922: PPUSH
70923: CALL_OW 453
70927: GO 70897
70929: POP
70930: POP
// end ;
70931: LD_VAR 0 2
70935: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70936: LD_INT 0
70938: PPUSH
70939: PPUSH
70940: PPUSH
70941: PPUSH
70942: PPUSH
70943: PPUSH
// if not unit or not enemy_unit then
70944: LD_VAR 0 1
70948: NOT
70949: PUSH
70950: LD_VAR 0 2
70954: NOT
70955: OR
70956: IFFALSE 70960
// exit ;
70958: GO 71427
// if GetLives ( i ) < 250 then
70960: LD_VAR 0 4
70964: PPUSH
70965: CALL_OW 256
70969: PUSH
70970: LD_INT 250
70972: LESS
70973: IFFALSE 70986
// begin ComAutodestruct ( i ) ;
70975: LD_VAR 0 4
70979: PPUSH
70980: CALL 70834 0 1
// exit ;
70984: GO 71427
// end ; x := GetX ( enemy_unit ) ;
70986: LD_ADDR_VAR 0 7
70990: PUSH
70991: LD_VAR 0 2
70995: PPUSH
70996: CALL_OW 250
71000: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71001: LD_ADDR_VAR 0 8
71005: PUSH
71006: LD_VAR 0 2
71010: PPUSH
71011: CALL_OW 251
71015: ST_TO_ADDR
// if not x or not y then
71016: LD_VAR 0 7
71020: NOT
71021: PUSH
71022: LD_VAR 0 8
71026: NOT
71027: OR
71028: IFFALSE 71032
// exit ;
71030: GO 71427
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71032: LD_ADDR_VAR 0 6
71036: PUSH
71037: LD_VAR 0 7
71041: PPUSH
71042: LD_INT 0
71044: PPUSH
71045: LD_INT 4
71047: PPUSH
71048: CALL_OW 272
71052: PUSH
71053: LD_VAR 0 8
71057: PPUSH
71058: LD_INT 0
71060: PPUSH
71061: LD_INT 4
71063: PPUSH
71064: CALL_OW 273
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: LD_VAR 0 7
71077: PPUSH
71078: LD_INT 1
71080: PPUSH
71081: LD_INT 4
71083: PPUSH
71084: CALL_OW 272
71088: PUSH
71089: LD_VAR 0 8
71093: PPUSH
71094: LD_INT 1
71096: PPUSH
71097: LD_INT 4
71099: PPUSH
71100: CALL_OW 273
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_VAR 0 7
71113: PPUSH
71114: LD_INT 2
71116: PPUSH
71117: LD_INT 4
71119: PPUSH
71120: CALL_OW 272
71124: PUSH
71125: LD_VAR 0 8
71129: PPUSH
71130: LD_INT 2
71132: PPUSH
71133: LD_INT 4
71135: PPUSH
71136: CALL_OW 273
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_VAR 0 7
71149: PPUSH
71150: LD_INT 3
71152: PPUSH
71153: LD_INT 4
71155: PPUSH
71156: CALL_OW 272
71160: PUSH
71161: LD_VAR 0 8
71165: PPUSH
71166: LD_INT 3
71168: PPUSH
71169: LD_INT 4
71171: PPUSH
71172: CALL_OW 273
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_VAR 0 7
71185: PPUSH
71186: LD_INT 4
71188: PPUSH
71189: LD_INT 4
71191: PPUSH
71192: CALL_OW 272
71196: PUSH
71197: LD_VAR 0 8
71201: PPUSH
71202: LD_INT 4
71204: PPUSH
71205: LD_INT 4
71207: PPUSH
71208: CALL_OW 273
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_VAR 0 7
71221: PPUSH
71222: LD_INT 5
71224: PPUSH
71225: LD_INT 4
71227: PPUSH
71228: CALL_OW 272
71232: PUSH
71233: LD_VAR 0 8
71237: PPUSH
71238: LD_INT 5
71240: PPUSH
71241: LD_INT 4
71243: PPUSH
71244: CALL_OW 273
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: ST_TO_ADDR
// for i = tmp downto 1 do
71261: LD_ADDR_VAR 0 4
71265: PUSH
71266: DOUBLE
71267: LD_VAR 0 6
71271: INC
71272: ST_TO_ADDR
71273: LD_INT 1
71275: PUSH
71276: FOR_DOWNTO
71277: IFFALSE 71378
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71279: LD_VAR 0 6
71283: PUSH
71284: LD_VAR 0 4
71288: ARRAY
71289: PUSH
71290: LD_INT 1
71292: ARRAY
71293: PPUSH
71294: LD_VAR 0 6
71298: PUSH
71299: LD_VAR 0 4
71303: ARRAY
71304: PUSH
71305: LD_INT 2
71307: ARRAY
71308: PPUSH
71309: CALL_OW 488
71313: NOT
71314: PUSH
71315: LD_VAR 0 6
71319: PUSH
71320: LD_VAR 0 4
71324: ARRAY
71325: PUSH
71326: LD_INT 1
71328: ARRAY
71329: PPUSH
71330: LD_VAR 0 6
71334: PUSH
71335: LD_VAR 0 4
71339: ARRAY
71340: PUSH
71341: LD_INT 2
71343: ARRAY
71344: PPUSH
71345: CALL_OW 428
71349: PUSH
71350: LD_INT 0
71352: NONEQUAL
71353: OR
71354: IFFALSE 71376
// tmp := Delete ( tmp , i ) ;
71356: LD_ADDR_VAR 0 6
71360: PUSH
71361: LD_VAR 0 6
71365: PPUSH
71366: LD_VAR 0 4
71370: PPUSH
71371: CALL_OW 3
71375: ST_TO_ADDR
71376: GO 71276
71378: POP
71379: POP
// j := GetClosestHex ( unit , tmp ) ;
71380: LD_ADDR_VAR 0 5
71384: PUSH
71385: LD_VAR 0 1
71389: PPUSH
71390: LD_VAR 0 6
71394: PPUSH
71395: CALL 70682 0 2
71399: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71400: LD_VAR 0 1
71404: PPUSH
71405: LD_VAR 0 5
71409: PUSH
71410: LD_INT 1
71412: ARRAY
71413: PPUSH
71414: LD_VAR 0 5
71418: PUSH
71419: LD_INT 2
71421: ARRAY
71422: PPUSH
71423: CALL_OW 111
// end ;
71427: LD_VAR 0 3
71431: RET
// export function PrepareApemanSoldier ( ) ; begin
71432: LD_INT 0
71434: PPUSH
// uc_nation := 0 ;
71435: LD_ADDR_OWVAR 21
71439: PUSH
71440: LD_INT 0
71442: ST_TO_ADDR
// hc_sex := sex_male ;
71443: LD_ADDR_OWVAR 27
71447: PUSH
71448: LD_INT 1
71450: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71451: LD_ADDR_OWVAR 28
71455: PUSH
71456: LD_INT 15
71458: ST_TO_ADDR
// hc_gallery :=  ;
71459: LD_ADDR_OWVAR 33
71463: PUSH
71464: LD_STRING 
71466: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71467: LD_ADDR_OWVAR 31
71471: PUSH
71472: LD_INT 0
71474: PPUSH
71475: LD_INT 3
71477: PPUSH
71478: CALL_OW 12
71482: PUSH
71483: LD_INT 0
71485: PPUSH
71486: LD_INT 3
71488: PPUSH
71489: CALL_OW 12
71493: PUSH
71494: LD_INT 0
71496: PUSH
71497: LD_INT 0
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: ST_TO_ADDR
// end ;
71506: LD_VAR 0 1
71510: RET
// export function PrepareApemanEngineer ( ) ; begin
71511: LD_INT 0
71513: PPUSH
// uc_nation := 0 ;
71514: LD_ADDR_OWVAR 21
71518: PUSH
71519: LD_INT 0
71521: ST_TO_ADDR
// hc_sex := sex_male ;
71522: LD_ADDR_OWVAR 27
71526: PUSH
71527: LD_INT 1
71529: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71530: LD_ADDR_OWVAR 28
71534: PUSH
71535: LD_INT 16
71537: ST_TO_ADDR
// hc_gallery :=  ;
71538: LD_ADDR_OWVAR 33
71542: PUSH
71543: LD_STRING 
71545: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71546: LD_ADDR_OWVAR 31
71550: PUSH
71551: LD_INT 0
71553: PPUSH
71554: LD_INT 3
71556: PPUSH
71557: CALL_OW 12
71561: PUSH
71562: LD_INT 0
71564: PPUSH
71565: LD_INT 3
71567: PPUSH
71568: CALL_OW 12
71572: PUSH
71573: LD_INT 0
71575: PUSH
71576: LD_INT 0
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: ST_TO_ADDR
// end ;
71585: LD_VAR 0 1
71589: RET
// export function PrepareApeman ( agressivity ) ; begin
71590: LD_INT 0
71592: PPUSH
// uc_side := 0 ;
71593: LD_ADDR_OWVAR 20
71597: PUSH
71598: LD_INT 0
71600: ST_TO_ADDR
// uc_nation := 0 ;
71601: LD_ADDR_OWVAR 21
71605: PUSH
71606: LD_INT 0
71608: ST_TO_ADDR
// hc_sex := sex_male ;
71609: LD_ADDR_OWVAR 27
71613: PUSH
71614: LD_INT 1
71616: ST_TO_ADDR
// hc_class := class_apeman ;
71617: LD_ADDR_OWVAR 28
71621: PUSH
71622: LD_INT 12
71624: ST_TO_ADDR
// hc_gallery :=  ;
71625: LD_ADDR_OWVAR 33
71629: PUSH
71630: LD_STRING 
71632: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71633: LD_ADDR_OWVAR 35
71637: PUSH
71638: LD_VAR 0 1
71642: NEG
71643: PPUSH
71644: LD_VAR 0 1
71648: PPUSH
71649: CALL_OW 12
71653: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71654: LD_ADDR_OWVAR 31
71658: PUSH
71659: LD_INT 0
71661: PPUSH
71662: LD_INT 3
71664: PPUSH
71665: CALL_OW 12
71669: PUSH
71670: LD_INT 0
71672: PPUSH
71673: LD_INT 3
71675: PPUSH
71676: CALL_OW 12
71680: PUSH
71681: LD_INT 0
71683: PUSH
71684: LD_INT 0
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: ST_TO_ADDR
// end ;
71693: LD_VAR 0 2
71697: RET
// export function PrepareTiger ( agressivity ) ; begin
71698: LD_INT 0
71700: PPUSH
// uc_side := 0 ;
71701: LD_ADDR_OWVAR 20
71705: PUSH
71706: LD_INT 0
71708: ST_TO_ADDR
// uc_nation := 0 ;
71709: LD_ADDR_OWVAR 21
71713: PUSH
71714: LD_INT 0
71716: ST_TO_ADDR
// hc_class := class_tiger ;
71717: LD_ADDR_OWVAR 28
71721: PUSH
71722: LD_INT 14
71724: ST_TO_ADDR
// hc_gallery :=  ;
71725: LD_ADDR_OWVAR 33
71729: PUSH
71730: LD_STRING 
71732: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71733: LD_ADDR_OWVAR 35
71737: PUSH
71738: LD_VAR 0 1
71742: NEG
71743: PPUSH
71744: LD_VAR 0 1
71748: PPUSH
71749: CALL_OW 12
71753: ST_TO_ADDR
// end ;
71754: LD_VAR 0 2
71758: RET
// export function PrepareEnchidna ( ) ; begin
71759: LD_INT 0
71761: PPUSH
// uc_side := 0 ;
71762: LD_ADDR_OWVAR 20
71766: PUSH
71767: LD_INT 0
71769: ST_TO_ADDR
// uc_nation := 0 ;
71770: LD_ADDR_OWVAR 21
71774: PUSH
71775: LD_INT 0
71777: ST_TO_ADDR
// hc_class := class_baggie ;
71778: LD_ADDR_OWVAR 28
71782: PUSH
71783: LD_INT 13
71785: ST_TO_ADDR
// hc_gallery :=  ;
71786: LD_ADDR_OWVAR 33
71790: PUSH
71791: LD_STRING 
71793: ST_TO_ADDR
// end ;
71794: LD_VAR 0 1
71798: RET
// export function PrepareFrog ( ) ; begin
71799: LD_INT 0
71801: PPUSH
// uc_side := 0 ;
71802: LD_ADDR_OWVAR 20
71806: PUSH
71807: LD_INT 0
71809: ST_TO_ADDR
// uc_nation := 0 ;
71810: LD_ADDR_OWVAR 21
71814: PUSH
71815: LD_INT 0
71817: ST_TO_ADDR
// hc_class := class_frog ;
71818: LD_ADDR_OWVAR 28
71822: PUSH
71823: LD_INT 19
71825: ST_TO_ADDR
// hc_gallery :=  ;
71826: LD_ADDR_OWVAR 33
71830: PUSH
71831: LD_STRING 
71833: ST_TO_ADDR
// end ;
71834: LD_VAR 0 1
71838: RET
// export function PrepareFish ( ) ; begin
71839: LD_INT 0
71841: PPUSH
// uc_side := 0 ;
71842: LD_ADDR_OWVAR 20
71846: PUSH
71847: LD_INT 0
71849: ST_TO_ADDR
// uc_nation := 0 ;
71850: LD_ADDR_OWVAR 21
71854: PUSH
71855: LD_INT 0
71857: ST_TO_ADDR
// hc_class := class_fish ;
71858: LD_ADDR_OWVAR 28
71862: PUSH
71863: LD_INT 20
71865: ST_TO_ADDR
// hc_gallery :=  ;
71866: LD_ADDR_OWVAR 33
71870: PUSH
71871: LD_STRING 
71873: ST_TO_ADDR
// end ;
71874: LD_VAR 0 1
71878: RET
// export function PrepareBird ( ) ; begin
71879: LD_INT 0
71881: PPUSH
// uc_side := 0 ;
71882: LD_ADDR_OWVAR 20
71886: PUSH
71887: LD_INT 0
71889: ST_TO_ADDR
// uc_nation := 0 ;
71890: LD_ADDR_OWVAR 21
71894: PUSH
71895: LD_INT 0
71897: ST_TO_ADDR
// hc_class := class_phororhacos ;
71898: LD_ADDR_OWVAR 28
71902: PUSH
71903: LD_INT 18
71905: ST_TO_ADDR
// hc_gallery :=  ;
71906: LD_ADDR_OWVAR 33
71910: PUSH
71911: LD_STRING 
71913: ST_TO_ADDR
// end ;
71914: LD_VAR 0 1
71918: RET
// export function PrepareHorse ( ) ; begin
71919: LD_INT 0
71921: PPUSH
// uc_side := 0 ;
71922: LD_ADDR_OWVAR 20
71926: PUSH
71927: LD_INT 0
71929: ST_TO_ADDR
// uc_nation := 0 ;
71930: LD_ADDR_OWVAR 21
71934: PUSH
71935: LD_INT 0
71937: ST_TO_ADDR
// hc_class := class_horse ;
71938: LD_ADDR_OWVAR 28
71942: PUSH
71943: LD_INT 21
71945: ST_TO_ADDR
// hc_gallery :=  ;
71946: LD_ADDR_OWVAR 33
71950: PUSH
71951: LD_STRING 
71953: ST_TO_ADDR
// end ;
71954: LD_VAR 0 1
71958: RET
// export function PrepareMastodont ( ) ; begin
71959: LD_INT 0
71961: PPUSH
// uc_side := 0 ;
71962: LD_ADDR_OWVAR 20
71966: PUSH
71967: LD_INT 0
71969: ST_TO_ADDR
// uc_nation := 0 ;
71970: LD_ADDR_OWVAR 21
71974: PUSH
71975: LD_INT 0
71977: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71978: LD_ADDR_OWVAR 37
71982: PUSH
71983: LD_INT 31
71985: ST_TO_ADDR
// vc_control := control_rider ;
71986: LD_ADDR_OWVAR 38
71990: PUSH
71991: LD_INT 4
71993: ST_TO_ADDR
// end ;
71994: LD_VAR 0 1
71998: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71999: LD_INT 0
72001: PPUSH
72002: PPUSH
72003: PPUSH
// uc_side = 0 ;
72004: LD_ADDR_OWVAR 20
72008: PUSH
72009: LD_INT 0
72011: ST_TO_ADDR
// uc_nation = 0 ;
72012: LD_ADDR_OWVAR 21
72016: PUSH
72017: LD_INT 0
72019: ST_TO_ADDR
// InitHc_All ( ) ;
72020: CALL_OW 584
// InitVc ;
72024: CALL_OW 20
// if mastodonts then
72028: LD_VAR 0 6
72032: IFFALSE 72099
// for i = 1 to mastodonts do
72034: LD_ADDR_VAR 0 11
72038: PUSH
72039: DOUBLE
72040: LD_INT 1
72042: DEC
72043: ST_TO_ADDR
72044: LD_VAR 0 6
72048: PUSH
72049: FOR_TO
72050: IFFALSE 72097
// begin vc_chassis := 31 ;
72052: LD_ADDR_OWVAR 37
72056: PUSH
72057: LD_INT 31
72059: ST_TO_ADDR
// vc_control := control_rider ;
72060: LD_ADDR_OWVAR 38
72064: PUSH
72065: LD_INT 4
72067: ST_TO_ADDR
// animal := CreateVehicle ;
72068: LD_ADDR_VAR 0 12
72072: PUSH
72073: CALL_OW 45
72077: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72078: LD_VAR 0 12
72082: PPUSH
72083: LD_VAR 0 8
72087: PPUSH
72088: LD_INT 0
72090: PPUSH
72091: CALL 74227 0 3
// end ;
72095: GO 72049
72097: POP
72098: POP
// if horses then
72099: LD_VAR 0 5
72103: IFFALSE 72170
// for i = 1 to horses do
72105: LD_ADDR_VAR 0 11
72109: PUSH
72110: DOUBLE
72111: LD_INT 1
72113: DEC
72114: ST_TO_ADDR
72115: LD_VAR 0 5
72119: PUSH
72120: FOR_TO
72121: IFFALSE 72168
// begin hc_class := 21 ;
72123: LD_ADDR_OWVAR 28
72127: PUSH
72128: LD_INT 21
72130: ST_TO_ADDR
// hc_gallery :=  ;
72131: LD_ADDR_OWVAR 33
72135: PUSH
72136: LD_STRING 
72138: ST_TO_ADDR
// animal := CreateHuman ;
72139: LD_ADDR_VAR 0 12
72143: PUSH
72144: CALL_OW 44
72148: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72149: LD_VAR 0 12
72153: PPUSH
72154: LD_VAR 0 8
72158: PPUSH
72159: LD_INT 0
72161: PPUSH
72162: CALL 74227 0 3
// end ;
72166: GO 72120
72168: POP
72169: POP
// if birds then
72170: LD_VAR 0 1
72174: IFFALSE 72241
// for i = 1 to birds do
72176: LD_ADDR_VAR 0 11
72180: PUSH
72181: DOUBLE
72182: LD_INT 1
72184: DEC
72185: ST_TO_ADDR
72186: LD_VAR 0 1
72190: PUSH
72191: FOR_TO
72192: IFFALSE 72239
// begin hc_class := 18 ;
72194: LD_ADDR_OWVAR 28
72198: PUSH
72199: LD_INT 18
72201: ST_TO_ADDR
// hc_gallery =  ;
72202: LD_ADDR_OWVAR 33
72206: PUSH
72207: LD_STRING 
72209: ST_TO_ADDR
// animal := CreateHuman ;
72210: LD_ADDR_VAR 0 12
72214: PUSH
72215: CALL_OW 44
72219: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72220: LD_VAR 0 12
72224: PPUSH
72225: LD_VAR 0 8
72229: PPUSH
72230: LD_INT 0
72232: PPUSH
72233: CALL 74227 0 3
// end ;
72237: GO 72191
72239: POP
72240: POP
// if tigers then
72241: LD_VAR 0 2
72245: IFFALSE 72329
// for i = 1 to tigers do
72247: LD_ADDR_VAR 0 11
72251: PUSH
72252: DOUBLE
72253: LD_INT 1
72255: DEC
72256: ST_TO_ADDR
72257: LD_VAR 0 2
72261: PUSH
72262: FOR_TO
72263: IFFALSE 72327
// begin hc_class = class_tiger ;
72265: LD_ADDR_OWVAR 28
72269: PUSH
72270: LD_INT 14
72272: ST_TO_ADDR
// hc_gallery =  ;
72273: LD_ADDR_OWVAR 33
72277: PUSH
72278: LD_STRING 
72280: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72281: LD_ADDR_OWVAR 35
72285: PUSH
72286: LD_INT 7
72288: NEG
72289: PPUSH
72290: LD_INT 7
72292: PPUSH
72293: CALL_OW 12
72297: ST_TO_ADDR
// animal := CreateHuman ;
72298: LD_ADDR_VAR 0 12
72302: PUSH
72303: CALL_OW 44
72307: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72308: LD_VAR 0 12
72312: PPUSH
72313: LD_VAR 0 8
72317: PPUSH
72318: LD_INT 0
72320: PPUSH
72321: CALL 74227 0 3
// end ;
72325: GO 72262
72327: POP
72328: POP
// if apemans then
72329: LD_VAR 0 3
72333: IFFALSE 72456
// for i = 1 to apemans do
72335: LD_ADDR_VAR 0 11
72339: PUSH
72340: DOUBLE
72341: LD_INT 1
72343: DEC
72344: ST_TO_ADDR
72345: LD_VAR 0 3
72349: PUSH
72350: FOR_TO
72351: IFFALSE 72454
// begin hc_class = class_apeman ;
72353: LD_ADDR_OWVAR 28
72357: PUSH
72358: LD_INT 12
72360: ST_TO_ADDR
// hc_gallery =  ;
72361: LD_ADDR_OWVAR 33
72365: PUSH
72366: LD_STRING 
72368: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72369: LD_ADDR_OWVAR 35
72373: PUSH
72374: LD_INT 2
72376: NEG
72377: PPUSH
72378: LD_INT 2
72380: PPUSH
72381: CALL_OW 12
72385: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72386: LD_ADDR_OWVAR 31
72390: PUSH
72391: LD_INT 1
72393: PPUSH
72394: LD_INT 3
72396: PPUSH
72397: CALL_OW 12
72401: PUSH
72402: LD_INT 1
72404: PPUSH
72405: LD_INT 3
72407: PPUSH
72408: CALL_OW 12
72412: PUSH
72413: LD_INT 0
72415: PUSH
72416: LD_INT 0
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: ST_TO_ADDR
// animal := CreateHuman ;
72425: LD_ADDR_VAR 0 12
72429: PUSH
72430: CALL_OW 44
72434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72435: LD_VAR 0 12
72439: PPUSH
72440: LD_VAR 0 8
72444: PPUSH
72445: LD_INT 0
72447: PPUSH
72448: CALL 74227 0 3
// end ;
72452: GO 72350
72454: POP
72455: POP
// if enchidnas then
72456: LD_VAR 0 4
72460: IFFALSE 72527
// for i = 1 to enchidnas do
72462: LD_ADDR_VAR 0 11
72466: PUSH
72467: DOUBLE
72468: LD_INT 1
72470: DEC
72471: ST_TO_ADDR
72472: LD_VAR 0 4
72476: PUSH
72477: FOR_TO
72478: IFFALSE 72525
// begin hc_class = 13 ;
72480: LD_ADDR_OWVAR 28
72484: PUSH
72485: LD_INT 13
72487: ST_TO_ADDR
// hc_gallery =  ;
72488: LD_ADDR_OWVAR 33
72492: PUSH
72493: LD_STRING 
72495: ST_TO_ADDR
// animal := CreateHuman ;
72496: LD_ADDR_VAR 0 12
72500: PUSH
72501: CALL_OW 44
72505: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72506: LD_VAR 0 12
72510: PPUSH
72511: LD_VAR 0 8
72515: PPUSH
72516: LD_INT 0
72518: PPUSH
72519: CALL 74227 0 3
// end ;
72523: GO 72477
72525: POP
72526: POP
// if fishes then
72527: LD_VAR 0 7
72531: IFFALSE 72598
// for i = 1 to fishes do
72533: LD_ADDR_VAR 0 11
72537: PUSH
72538: DOUBLE
72539: LD_INT 1
72541: DEC
72542: ST_TO_ADDR
72543: LD_VAR 0 7
72547: PUSH
72548: FOR_TO
72549: IFFALSE 72596
// begin hc_class = 20 ;
72551: LD_ADDR_OWVAR 28
72555: PUSH
72556: LD_INT 20
72558: ST_TO_ADDR
// hc_gallery =  ;
72559: LD_ADDR_OWVAR 33
72563: PUSH
72564: LD_STRING 
72566: ST_TO_ADDR
// animal := CreateHuman ;
72567: LD_ADDR_VAR 0 12
72571: PUSH
72572: CALL_OW 44
72576: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72577: LD_VAR 0 12
72581: PPUSH
72582: LD_VAR 0 9
72586: PPUSH
72587: LD_INT 0
72589: PPUSH
72590: CALL 74227 0 3
// end ;
72594: GO 72548
72596: POP
72597: POP
// end ;
72598: LD_VAR 0 10
72602: RET
// export function WantHeal ( sci , unit ) ; begin
72603: LD_INT 0
72605: PPUSH
// if GetTaskList ( sci ) > 0 then
72606: LD_VAR 0 1
72610: PPUSH
72611: CALL_OW 437
72615: PUSH
72616: LD_INT 0
72618: GREATER
72619: IFFALSE 72689
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72621: LD_VAR 0 1
72625: PPUSH
72626: CALL_OW 437
72630: PUSH
72631: LD_INT 1
72633: ARRAY
72634: PUSH
72635: LD_INT 1
72637: ARRAY
72638: PUSH
72639: LD_STRING l
72641: EQUAL
72642: PUSH
72643: LD_VAR 0 1
72647: PPUSH
72648: CALL_OW 437
72652: PUSH
72653: LD_INT 1
72655: ARRAY
72656: PUSH
72657: LD_INT 4
72659: ARRAY
72660: PUSH
72661: LD_VAR 0 2
72665: EQUAL
72666: AND
72667: IFFALSE 72679
// result := true else
72669: LD_ADDR_VAR 0 3
72673: PUSH
72674: LD_INT 1
72676: ST_TO_ADDR
72677: GO 72687
// result := false ;
72679: LD_ADDR_VAR 0 3
72683: PUSH
72684: LD_INT 0
72686: ST_TO_ADDR
// end else
72687: GO 72697
// result := false ;
72689: LD_ADDR_VAR 0 3
72693: PUSH
72694: LD_INT 0
72696: ST_TO_ADDR
// end ;
72697: LD_VAR 0 3
72701: RET
// export function HealTarget ( sci ) ; begin
72702: LD_INT 0
72704: PPUSH
// if not sci then
72705: LD_VAR 0 1
72709: NOT
72710: IFFALSE 72714
// exit ;
72712: GO 72779
// result := 0 ;
72714: LD_ADDR_VAR 0 2
72718: PUSH
72719: LD_INT 0
72721: ST_TO_ADDR
// if GetTaskList ( sci ) then
72722: LD_VAR 0 1
72726: PPUSH
72727: CALL_OW 437
72731: IFFALSE 72779
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72733: LD_VAR 0 1
72737: PPUSH
72738: CALL_OW 437
72742: PUSH
72743: LD_INT 1
72745: ARRAY
72746: PUSH
72747: LD_INT 1
72749: ARRAY
72750: PUSH
72751: LD_STRING l
72753: EQUAL
72754: IFFALSE 72779
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72756: LD_ADDR_VAR 0 2
72760: PUSH
72761: LD_VAR 0 1
72765: PPUSH
72766: CALL_OW 437
72770: PUSH
72771: LD_INT 1
72773: ARRAY
72774: PUSH
72775: LD_INT 4
72777: ARRAY
72778: ST_TO_ADDR
// end ;
72779: LD_VAR 0 2
72783: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72784: LD_INT 0
72786: PPUSH
72787: PPUSH
72788: PPUSH
72789: PPUSH
// if not base_units then
72790: LD_VAR 0 1
72794: NOT
72795: IFFALSE 72799
// exit ;
72797: GO 72886
// result := false ;
72799: LD_ADDR_VAR 0 2
72803: PUSH
72804: LD_INT 0
72806: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72807: LD_ADDR_VAR 0 5
72811: PUSH
72812: LD_VAR 0 1
72816: PPUSH
72817: LD_INT 21
72819: PUSH
72820: LD_INT 3
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PPUSH
72827: CALL_OW 72
72831: ST_TO_ADDR
// if not tmp then
72832: LD_VAR 0 5
72836: NOT
72837: IFFALSE 72841
// exit ;
72839: GO 72886
// for i in tmp do
72841: LD_ADDR_VAR 0 3
72845: PUSH
72846: LD_VAR 0 5
72850: PUSH
72851: FOR_IN
72852: IFFALSE 72884
// begin result := EnemyInRange ( i , 22 ) ;
72854: LD_ADDR_VAR 0 2
72858: PUSH
72859: LD_VAR 0 3
72863: PPUSH
72864: LD_INT 22
72866: PPUSH
72867: CALL 70484 0 2
72871: ST_TO_ADDR
// if result then
72872: LD_VAR 0 2
72876: IFFALSE 72882
// exit ;
72878: POP
72879: POP
72880: GO 72886
// end ;
72882: GO 72851
72884: POP
72885: POP
// end ;
72886: LD_VAR 0 2
72890: RET
// export function FilterByTag ( units , tag ) ; begin
72891: LD_INT 0
72893: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72894: LD_ADDR_VAR 0 3
72898: PUSH
72899: LD_VAR 0 1
72903: PPUSH
72904: LD_INT 120
72906: PUSH
72907: LD_VAR 0 2
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PPUSH
72916: CALL_OW 72
72920: ST_TO_ADDR
// end ;
72921: LD_VAR 0 3
72925: RET
// export function IsDriver ( un ) ; begin
72926: LD_INT 0
72928: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72929: LD_ADDR_VAR 0 2
72933: PUSH
72934: LD_VAR 0 1
72938: PUSH
72939: LD_INT 55
72941: PUSH
72942: EMPTY
72943: LIST
72944: PPUSH
72945: CALL_OW 69
72949: IN
72950: ST_TO_ADDR
// end ;
72951: LD_VAR 0 2
72955: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72956: LD_INT 0
72958: PPUSH
72959: PPUSH
// list := [ ] ;
72960: LD_ADDR_VAR 0 5
72964: PUSH
72965: EMPTY
72966: ST_TO_ADDR
// case d of 0 :
72967: LD_VAR 0 3
72971: PUSH
72972: LD_INT 0
72974: DOUBLE
72975: EQUAL
72976: IFTRUE 72980
72978: GO 73113
72980: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72981: LD_ADDR_VAR 0 5
72985: PUSH
72986: LD_VAR 0 1
72990: PUSH
72991: LD_INT 4
72993: MINUS
72994: PUSH
72995: LD_VAR 0 2
72999: PUSH
73000: LD_INT 4
73002: MINUS
73003: PUSH
73004: LD_INT 2
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: LIST
73011: PUSH
73012: LD_VAR 0 1
73016: PUSH
73017: LD_INT 3
73019: MINUS
73020: PUSH
73021: LD_VAR 0 2
73025: PUSH
73026: LD_INT 1
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: LIST
73033: PUSH
73034: LD_VAR 0 1
73038: PUSH
73039: LD_INT 4
73041: PLUS
73042: PUSH
73043: LD_VAR 0 2
73047: PUSH
73048: LD_INT 4
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: LIST
73055: PUSH
73056: LD_VAR 0 1
73060: PUSH
73061: LD_INT 3
73063: PLUS
73064: PUSH
73065: LD_VAR 0 2
73069: PUSH
73070: LD_INT 3
73072: PLUS
73073: PUSH
73074: LD_INT 5
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: LIST
73081: PUSH
73082: LD_VAR 0 1
73086: PUSH
73087: LD_VAR 0 2
73091: PUSH
73092: LD_INT 4
73094: PLUS
73095: PUSH
73096: LD_INT 0
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: LIST
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: ST_TO_ADDR
// end ; 1 :
73111: GO 73811
73113: LD_INT 1
73115: DOUBLE
73116: EQUAL
73117: IFTRUE 73121
73119: GO 73254
73121: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73122: LD_ADDR_VAR 0 5
73126: PUSH
73127: LD_VAR 0 1
73131: PUSH
73132: LD_VAR 0 2
73136: PUSH
73137: LD_INT 4
73139: MINUS
73140: PUSH
73141: LD_INT 3
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: LIST
73148: PUSH
73149: LD_VAR 0 1
73153: PUSH
73154: LD_INT 3
73156: MINUS
73157: PUSH
73158: LD_VAR 0 2
73162: PUSH
73163: LD_INT 3
73165: MINUS
73166: PUSH
73167: LD_INT 2
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: LIST
73174: PUSH
73175: LD_VAR 0 1
73179: PUSH
73180: LD_INT 4
73182: MINUS
73183: PUSH
73184: LD_VAR 0 2
73188: PUSH
73189: LD_INT 1
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: LIST
73196: PUSH
73197: LD_VAR 0 1
73201: PUSH
73202: LD_VAR 0 2
73206: PUSH
73207: LD_INT 3
73209: PLUS
73210: PUSH
73211: LD_INT 0
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: LIST
73218: PUSH
73219: LD_VAR 0 1
73223: PUSH
73224: LD_INT 4
73226: PLUS
73227: PUSH
73228: LD_VAR 0 2
73232: PUSH
73233: LD_INT 4
73235: PLUS
73236: PUSH
73237: LD_INT 5
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: LIST
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: ST_TO_ADDR
// end ; 2 :
73252: GO 73811
73254: LD_INT 2
73256: DOUBLE
73257: EQUAL
73258: IFTRUE 73262
73260: GO 73391
73262: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73263: LD_ADDR_VAR 0 5
73267: PUSH
73268: LD_VAR 0 1
73272: PUSH
73273: LD_VAR 0 2
73277: PUSH
73278: LD_INT 3
73280: MINUS
73281: PUSH
73282: LD_INT 3
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: LIST
73289: PUSH
73290: LD_VAR 0 1
73294: PUSH
73295: LD_INT 4
73297: PLUS
73298: PUSH
73299: LD_VAR 0 2
73303: PUSH
73304: LD_INT 4
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: LIST
73311: PUSH
73312: LD_VAR 0 1
73316: PUSH
73317: LD_VAR 0 2
73321: PUSH
73322: LD_INT 4
73324: PLUS
73325: PUSH
73326: LD_INT 0
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: LIST
73333: PUSH
73334: LD_VAR 0 1
73338: PUSH
73339: LD_INT 3
73341: MINUS
73342: PUSH
73343: LD_VAR 0 2
73347: PUSH
73348: LD_INT 1
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: LIST
73355: PUSH
73356: LD_VAR 0 1
73360: PUSH
73361: LD_INT 4
73363: MINUS
73364: PUSH
73365: LD_VAR 0 2
73369: PUSH
73370: LD_INT 4
73372: MINUS
73373: PUSH
73374: LD_INT 2
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: LIST
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: LIST
73386: LIST
73387: LIST
73388: ST_TO_ADDR
// end ; 3 :
73389: GO 73811
73391: LD_INT 3
73393: DOUBLE
73394: EQUAL
73395: IFTRUE 73399
73397: GO 73532
73399: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73400: LD_ADDR_VAR 0 5
73404: PUSH
73405: LD_VAR 0 1
73409: PUSH
73410: LD_INT 3
73412: PLUS
73413: PUSH
73414: LD_VAR 0 2
73418: PUSH
73419: LD_INT 4
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: LIST
73426: PUSH
73427: LD_VAR 0 1
73431: PUSH
73432: LD_INT 4
73434: PLUS
73435: PUSH
73436: LD_VAR 0 2
73440: PUSH
73441: LD_INT 4
73443: PLUS
73444: PUSH
73445: LD_INT 5
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: LIST
73452: PUSH
73453: LD_VAR 0 1
73457: PUSH
73458: LD_INT 4
73460: MINUS
73461: PUSH
73462: LD_VAR 0 2
73466: PUSH
73467: LD_INT 1
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: LIST
73474: PUSH
73475: LD_VAR 0 1
73479: PUSH
73480: LD_VAR 0 2
73484: PUSH
73485: LD_INT 4
73487: MINUS
73488: PUSH
73489: LD_INT 3
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: LIST
73496: PUSH
73497: LD_VAR 0 1
73501: PUSH
73502: LD_INT 3
73504: MINUS
73505: PUSH
73506: LD_VAR 0 2
73510: PUSH
73511: LD_INT 3
73513: MINUS
73514: PUSH
73515: LD_INT 2
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: LIST
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: ST_TO_ADDR
// end ; 4 :
73530: GO 73811
73532: LD_INT 4
73534: DOUBLE
73535: EQUAL
73536: IFTRUE 73540
73538: GO 73673
73540: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73541: LD_ADDR_VAR 0 5
73545: PUSH
73546: LD_VAR 0 1
73550: PUSH
73551: LD_VAR 0 2
73555: PUSH
73556: LD_INT 4
73558: PLUS
73559: PUSH
73560: LD_INT 0
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: LIST
73567: PUSH
73568: LD_VAR 0 1
73572: PUSH
73573: LD_INT 3
73575: PLUS
73576: PUSH
73577: LD_VAR 0 2
73581: PUSH
73582: LD_INT 3
73584: PLUS
73585: PUSH
73586: LD_INT 5
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: LIST
73593: PUSH
73594: LD_VAR 0 1
73598: PUSH
73599: LD_INT 4
73601: PLUS
73602: PUSH
73603: LD_VAR 0 2
73607: PUSH
73608: LD_INT 4
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: LIST
73615: PUSH
73616: LD_VAR 0 1
73620: PUSH
73621: LD_VAR 0 2
73625: PUSH
73626: LD_INT 3
73628: MINUS
73629: PUSH
73630: LD_INT 3
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: LIST
73637: PUSH
73638: LD_VAR 0 1
73642: PUSH
73643: LD_INT 4
73645: MINUS
73646: PUSH
73647: LD_VAR 0 2
73651: PUSH
73652: LD_INT 4
73654: MINUS
73655: PUSH
73656: LD_INT 2
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: LIST
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: ST_TO_ADDR
// end ; 5 :
73671: GO 73811
73673: LD_INT 5
73675: DOUBLE
73676: EQUAL
73677: IFTRUE 73681
73679: GO 73810
73681: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73682: LD_ADDR_VAR 0 5
73686: PUSH
73687: LD_VAR 0 1
73691: PUSH
73692: LD_INT 4
73694: MINUS
73695: PUSH
73696: LD_VAR 0 2
73700: PUSH
73701: LD_INT 1
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: LIST
73708: PUSH
73709: LD_VAR 0 1
73713: PUSH
73714: LD_VAR 0 2
73718: PUSH
73719: LD_INT 4
73721: MINUS
73722: PUSH
73723: LD_INT 3
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: LIST
73730: PUSH
73731: LD_VAR 0 1
73735: PUSH
73736: LD_INT 4
73738: PLUS
73739: PUSH
73740: LD_VAR 0 2
73744: PUSH
73745: LD_INT 4
73747: PLUS
73748: PUSH
73749: LD_INT 5
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: LIST
73756: PUSH
73757: LD_VAR 0 1
73761: PUSH
73762: LD_INT 3
73764: PLUS
73765: PUSH
73766: LD_VAR 0 2
73770: PUSH
73771: LD_INT 4
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: LIST
73778: PUSH
73779: LD_VAR 0 1
73783: PUSH
73784: LD_VAR 0 2
73788: PUSH
73789: LD_INT 3
73791: PLUS
73792: PUSH
73793: LD_INT 0
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: LIST
73800: PUSH
73801: EMPTY
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: ST_TO_ADDR
// end ; end ;
73808: GO 73811
73810: POP
// result := list ;
73811: LD_ADDR_VAR 0 4
73815: PUSH
73816: LD_VAR 0 5
73820: ST_TO_ADDR
// end ;
73821: LD_VAR 0 4
73825: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73826: LD_INT 0
73828: PPUSH
73829: PPUSH
73830: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73831: LD_VAR 0 1
73835: NOT
73836: PUSH
73837: LD_VAR 0 2
73841: PUSH
73842: LD_INT 1
73844: PUSH
73845: LD_INT 2
73847: PUSH
73848: LD_INT 3
73850: PUSH
73851: LD_INT 4
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: IN
73860: NOT
73861: OR
73862: IFFALSE 73866
// exit ;
73864: GO 73949
// tmp := [ ] ;
73866: LD_ADDR_VAR 0 5
73870: PUSH
73871: EMPTY
73872: ST_TO_ADDR
// for i in units do
73873: LD_ADDR_VAR 0 4
73877: PUSH
73878: LD_VAR 0 1
73882: PUSH
73883: FOR_IN
73884: IFFALSE 73918
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
73886: LD_ADDR_VAR 0 5
73890: PUSH
73891: LD_VAR 0 5
73895: PPUSH
73896: LD_VAR 0 4
73900: PPUSH
73901: LD_VAR 0 2
73905: PPUSH
73906: CALL_OW 259
73910: PPUSH
73911: CALL 75322 0 2
73915: ST_TO_ADDR
73916: GO 73883
73918: POP
73919: POP
// if not tmp then
73920: LD_VAR 0 5
73924: NOT
73925: IFFALSE 73929
// exit ;
73927: GO 73949
// result := SortListByListDesc ( units , tmp ) ;
73929: LD_ADDR_VAR 0 3
73933: PUSH
73934: LD_VAR 0 1
73938: PPUSH
73939: LD_VAR 0 5
73943: PPUSH
73944: CALL_OW 77
73948: ST_TO_ADDR
// end ;
73949: LD_VAR 0 3
73953: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73954: LD_INT 0
73956: PPUSH
73957: PPUSH
73958: PPUSH
// result := false ;
73959: LD_ADDR_VAR 0 3
73963: PUSH
73964: LD_INT 0
73966: ST_TO_ADDR
// if not building then
73967: LD_VAR 0 2
73971: NOT
73972: IFFALSE 73976
// exit ;
73974: GO 74114
// x := GetX ( building ) ;
73976: LD_ADDR_VAR 0 4
73980: PUSH
73981: LD_VAR 0 2
73985: PPUSH
73986: CALL_OW 250
73990: ST_TO_ADDR
// y := GetY ( building ) ;
73991: LD_ADDR_VAR 0 5
73995: PUSH
73996: LD_VAR 0 2
74000: PPUSH
74001: CALL_OW 251
74005: ST_TO_ADDR
// if not x or not y then
74006: LD_VAR 0 4
74010: NOT
74011: PUSH
74012: LD_VAR 0 5
74016: NOT
74017: OR
74018: IFFALSE 74022
// exit ;
74020: GO 74114
// if GetTaskList ( unit ) then
74022: LD_VAR 0 1
74026: PPUSH
74027: CALL_OW 437
74031: IFFALSE 74114
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74033: LD_STRING e
74035: PUSH
74036: LD_VAR 0 1
74040: PPUSH
74041: CALL_OW 437
74045: PUSH
74046: LD_INT 1
74048: ARRAY
74049: PUSH
74050: LD_INT 1
74052: ARRAY
74053: EQUAL
74054: PUSH
74055: LD_VAR 0 4
74059: PUSH
74060: LD_VAR 0 1
74064: PPUSH
74065: CALL_OW 437
74069: PUSH
74070: LD_INT 1
74072: ARRAY
74073: PUSH
74074: LD_INT 2
74076: ARRAY
74077: EQUAL
74078: AND
74079: PUSH
74080: LD_VAR 0 5
74084: PUSH
74085: LD_VAR 0 1
74089: PPUSH
74090: CALL_OW 437
74094: PUSH
74095: LD_INT 1
74097: ARRAY
74098: PUSH
74099: LD_INT 3
74101: ARRAY
74102: EQUAL
74103: AND
74104: IFFALSE 74114
// result := true end ;
74106: LD_ADDR_VAR 0 3
74110: PUSH
74111: LD_INT 1
74113: ST_TO_ADDR
// end ;
74114: LD_VAR 0 3
74118: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74119: LD_INT 0
74121: PPUSH
// result := false ;
74122: LD_ADDR_VAR 0 4
74126: PUSH
74127: LD_INT 0
74129: ST_TO_ADDR
// if GetTaskList ( unit ) then
74130: LD_VAR 0 1
74134: PPUSH
74135: CALL_OW 437
74139: IFFALSE 74222
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74141: LD_STRING M
74143: PUSH
74144: LD_VAR 0 1
74148: PPUSH
74149: CALL_OW 437
74153: PUSH
74154: LD_INT 1
74156: ARRAY
74157: PUSH
74158: LD_INT 1
74160: ARRAY
74161: EQUAL
74162: PUSH
74163: LD_VAR 0 2
74167: PUSH
74168: LD_VAR 0 1
74172: PPUSH
74173: CALL_OW 437
74177: PUSH
74178: LD_INT 1
74180: ARRAY
74181: PUSH
74182: LD_INT 2
74184: ARRAY
74185: EQUAL
74186: AND
74187: PUSH
74188: LD_VAR 0 3
74192: PUSH
74193: LD_VAR 0 1
74197: PPUSH
74198: CALL_OW 437
74202: PUSH
74203: LD_INT 1
74205: ARRAY
74206: PUSH
74207: LD_INT 3
74209: ARRAY
74210: EQUAL
74211: AND
74212: IFFALSE 74222
// result := true ;
74214: LD_ADDR_VAR 0 4
74218: PUSH
74219: LD_INT 1
74221: ST_TO_ADDR
// end ; end ;
74222: LD_VAR 0 4
74226: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74227: LD_INT 0
74229: PPUSH
74230: PPUSH
74231: PPUSH
74232: PPUSH
// if not unit or not area then
74233: LD_VAR 0 1
74237: NOT
74238: PUSH
74239: LD_VAR 0 2
74243: NOT
74244: OR
74245: IFFALSE 74249
// exit ;
74247: GO 74425
// tmp := AreaToList ( area , i ) ;
74249: LD_ADDR_VAR 0 6
74253: PUSH
74254: LD_VAR 0 2
74258: PPUSH
74259: LD_VAR 0 5
74263: PPUSH
74264: CALL_OW 517
74268: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74269: LD_ADDR_VAR 0 5
74273: PUSH
74274: DOUBLE
74275: LD_INT 1
74277: DEC
74278: ST_TO_ADDR
74279: LD_VAR 0 6
74283: PUSH
74284: LD_INT 1
74286: ARRAY
74287: PUSH
74288: FOR_TO
74289: IFFALSE 74423
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74291: LD_ADDR_VAR 0 7
74295: PUSH
74296: LD_VAR 0 6
74300: PUSH
74301: LD_INT 1
74303: ARRAY
74304: PUSH
74305: LD_VAR 0 5
74309: ARRAY
74310: PUSH
74311: LD_VAR 0 6
74315: PUSH
74316: LD_INT 2
74318: ARRAY
74319: PUSH
74320: LD_VAR 0 5
74324: ARRAY
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
74330: LD_INT 92
74332: PUSH
74333: LD_VAR 0 7
74337: PUSH
74338: LD_INT 1
74340: ARRAY
74341: PUSH
74342: LD_VAR 0 7
74346: PUSH
74347: LD_INT 2
74349: ARRAY
74350: PUSH
74351: LD_INT 2
74353: PUSH
74354: EMPTY
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: PPUSH
74360: CALL_OW 69
74364: PUSH
74365: LD_INT 0
74367: EQUAL
74368: IFFALSE 74421
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74370: LD_VAR 0 1
74374: PPUSH
74375: LD_VAR 0 7
74379: PUSH
74380: LD_INT 1
74382: ARRAY
74383: PPUSH
74384: LD_VAR 0 7
74388: PUSH
74389: LD_INT 2
74391: ARRAY
74392: PPUSH
74393: LD_VAR 0 3
74397: PPUSH
74398: CALL_OW 48
// result := IsPlaced ( unit ) ;
74402: LD_ADDR_VAR 0 4
74406: PUSH
74407: LD_VAR 0 1
74411: PPUSH
74412: CALL_OW 305
74416: ST_TO_ADDR
// exit ;
74417: POP
74418: POP
74419: GO 74425
// end ; end ;
74421: GO 74288
74423: POP
74424: POP
// end ;
74425: LD_VAR 0 4
74429: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74430: LD_INT 0
74432: PPUSH
74433: PPUSH
74434: PPUSH
// if not side or side > 8 then
74435: LD_VAR 0 1
74439: NOT
74440: PUSH
74441: LD_VAR 0 1
74445: PUSH
74446: LD_INT 8
74448: GREATER
74449: OR
74450: IFFALSE 74454
// exit ;
74452: GO 74641
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74454: LD_ADDR_VAR 0 4
74458: PUSH
74459: LD_INT 22
74461: PUSH
74462: LD_VAR 0 1
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: PUSH
74471: LD_INT 21
74473: PUSH
74474: LD_INT 3
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PPUSH
74485: CALL_OW 69
74489: ST_TO_ADDR
// if not tmp then
74490: LD_VAR 0 4
74494: NOT
74495: IFFALSE 74499
// exit ;
74497: GO 74641
// enable_addtolog := true ;
74499: LD_ADDR_OWVAR 81
74503: PUSH
74504: LD_INT 1
74506: ST_TO_ADDR
// AddToLog ( [ ) ;
74507: LD_STRING [
74509: PPUSH
74510: CALL_OW 561
// for i in tmp do
74514: LD_ADDR_VAR 0 3
74518: PUSH
74519: LD_VAR 0 4
74523: PUSH
74524: FOR_IN
74525: IFFALSE 74632
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74527: LD_STRING [
74529: PUSH
74530: LD_VAR 0 3
74534: PPUSH
74535: CALL_OW 266
74539: STR
74540: PUSH
74541: LD_STRING , 
74543: STR
74544: PUSH
74545: LD_VAR 0 3
74549: PPUSH
74550: CALL_OW 250
74554: STR
74555: PUSH
74556: LD_STRING , 
74558: STR
74559: PUSH
74560: LD_VAR 0 3
74564: PPUSH
74565: CALL_OW 251
74569: STR
74570: PUSH
74571: LD_STRING , 
74573: STR
74574: PUSH
74575: LD_VAR 0 3
74579: PPUSH
74580: CALL_OW 254
74584: STR
74585: PUSH
74586: LD_STRING , 
74588: STR
74589: PUSH
74590: LD_VAR 0 3
74594: PPUSH
74595: LD_INT 1
74597: PPUSH
74598: CALL_OW 268
74602: STR
74603: PUSH
74604: LD_STRING , 
74606: STR
74607: PUSH
74608: LD_VAR 0 3
74612: PPUSH
74613: LD_INT 2
74615: PPUSH
74616: CALL_OW 268
74620: STR
74621: PUSH
74622: LD_STRING ],
74624: STR
74625: PPUSH
74626: CALL_OW 561
// end ;
74630: GO 74524
74632: POP
74633: POP
// AddToLog ( ]; ) ;
74634: LD_STRING ];
74636: PPUSH
74637: CALL_OW 561
// end ;
74641: LD_VAR 0 2
74645: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74646: LD_INT 0
74648: PPUSH
74649: PPUSH
74650: PPUSH
74651: PPUSH
74652: PPUSH
// if not area or not rate or not max then
74653: LD_VAR 0 1
74657: NOT
74658: PUSH
74659: LD_VAR 0 2
74663: NOT
74664: OR
74665: PUSH
74666: LD_VAR 0 4
74670: NOT
74671: OR
74672: IFFALSE 74676
// exit ;
74674: GO 74865
// while 1 do
74676: LD_INT 1
74678: IFFALSE 74865
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74680: LD_ADDR_VAR 0 9
74684: PUSH
74685: LD_VAR 0 1
74689: PPUSH
74690: LD_INT 1
74692: PPUSH
74693: CALL_OW 287
74697: PUSH
74698: LD_INT 10
74700: MUL
74701: ST_TO_ADDR
// r := rate / 10 ;
74702: LD_ADDR_VAR 0 7
74706: PUSH
74707: LD_VAR 0 2
74711: PUSH
74712: LD_INT 10
74714: DIVREAL
74715: ST_TO_ADDR
// time := 1 1$00 ;
74716: LD_ADDR_VAR 0 8
74720: PUSH
74721: LD_INT 2100
74723: ST_TO_ADDR
// if amount < min then
74724: LD_VAR 0 9
74728: PUSH
74729: LD_VAR 0 3
74733: LESS
74734: IFFALSE 74752
// r := r * 2 else
74736: LD_ADDR_VAR 0 7
74740: PUSH
74741: LD_VAR 0 7
74745: PUSH
74746: LD_INT 2
74748: MUL
74749: ST_TO_ADDR
74750: GO 74778
// if amount > max then
74752: LD_VAR 0 9
74756: PUSH
74757: LD_VAR 0 4
74761: GREATER
74762: IFFALSE 74778
// r := r / 2 ;
74764: LD_ADDR_VAR 0 7
74768: PUSH
74769: LD_VAR 0 7
74773: PUSH
74774: LD_INT 2
74776: DIVREAL
74777: ST_TO_ADDR
// time := time / r ;
74778: LD_ADDR_VAR 0 8
74782: PUSH
74783: LD_VAR 0 8
74787: PUSH
74788: LD_VAR 0 7
74792: DIVREAL
74793: ST_TO_ADDR
// if time < 0 then
74794: LD_VAR 0 8
74798: PUSH
74799: LD_INT 0
74801: LESS
74802: IFFALSE 74819
// time := time * - 1 ;
74804: LD_ADDR_VAR 0 8
74808: PUSH
74809: LD_VAR 0 8
74813: PUSH
74814: LD_INT 1
74816: NEG
74817: MUL
74818: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74819: LD_VAR 0 8
74823: PUSH
74824: LD_INT 35
74826: PPUSH
74827: LD_INT 875
74829: PPUSH
74830: CALL_OW 12
74834: PLUS
74835: PPUSH
74836: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74840: LD_INT 1
74842: PPUSH
74843: LD_INT 5
74845: PPUSH
74846: CALL_OW 12
74850: PPUSH
74851: LD_VAR 0 1
74855: PPUSH
74856: LD_INT 1
74858: PPUSH
74859: CALL_OW 55
// end ;
74863: GO 74676
// end ;
74865: LD_VAR 0 5
74869: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74870: LD_INT 0
74872: PPUSH
74873: PPUSH
74874: PPUSH
74875: PPUSH
74876: PPUSH
74877: PPUSH
74878: PPUSH
74879: PPUSH
// if not turrets or not factories then
74880: LD_VAR 0 1
74884: NOT
74885: PUSH
74886: LD_VAR 0 2
74890: NOT
74891: OR
74892: IFFALSE 74896
// exit ;
74894: GO 75203
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74896: LD_ADDR_VAR 0 10
74900: PUSH
74901: LD_INT 5
74903: PUSH
74904: LD_INT 6
74906: PUSH
74907: EMPTY
74908: LIST
74909: LIST
74910: PUSH
74911: LD_INT 2
74913: PUSH
74914: LD_INT 4
74916: PUSH
74917: EMPTY
74918: LIST
74919: LIST
74920: PUSH
74921: LD_INT 3
74923: PUSH
74924: LD_INT 5
74926: PUSH
74927: EMPTY
74928: LIST
74929: LIST
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: LIST
74935: PUSH
74936: LD_INT 24
74938: PUSH
74939: LD_INT 25
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 23
74948: PUSH
74949: LD_INT 27
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: PUSH
74960: LD_INT 42
74962: PUSH
74963: LD_INT 43
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: PUSH
74970: LD_INT 44
74972: PUSH
74973: LD_INT 46
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: PUSH
74980: LD_INT 45
74982: PUSH
74983: LD_INT 47
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: LIST
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: LIST
74999: ST_TO_ADDR
// result := [ ] ;
75000: LD_ADDR_VAR 0 3
75004: PUSH
75005: EMPTY
75006: ST_TO_ADDR
// for i in turrets do
75007: LD_ADDR_VAR 0 4
75011: PUSH
75012: LD_VAR 0 1
75016: PUSH
75017: FOR_IN
75018: IFFALSE 75201
// begin nat := GetNation ( i ) ;
75020: LD_ADDR_VAR 0 7
75024: PUSH
75025: LD_VAR 0 4
75029: PPUSH
75030: CALL_OW 248
75034: ST_TO_ADDR
// weapon := 0 ;
75035: LD_ADDR_VAR 0 8
75039: PUSH
75040: LD_INT 0
75042: ST_TO_ADDR
// if not nat then
75043: LD_VAR 0 7
75047: NOT
75048: IFFALSE 75052
// continue ;
75050: GO 75017
// for j in list [ nat ] do
75052: LD_ADDR_VAR 0 5
75056: PUSH
75057: LD_VAR 0 10
75061: PUSH
75062: LD_VAR 0 7
75066: ARRAY
75067: PUSH
75068: FOR_IN
75069: IFFALSE 75110
// if GetBWeapon ( i ) = j [ 1 ] then
75071: LD_VAR 0 4
75075: PPUSH
75076: CALL_OW 269
75080: PUSH
75081: LD_VAR 0 5
75085: PUSH
75086: LD_INT 1
75088: ARRAY
75089: EQUAL
75090: IFFALSE 75108
// begin weapon := j [ 2 ] ;
75092: LD_ADDR_VAR 0 8
75096: PUSH
75097: LD_VAR 0 5
75101: PUSH
75102: LD_INT 2
75104: ARRAY
75105: ST_TO_ADDR
// break ;
75106: GO 75110
// end ;
75108: GO 75068
75110: POP
75111: POP
// if not weapon then
75112: LD_VAR 0 8
75116: NOT
75117: IFFALSE 75121
// continue ;
75119: GO 75017
// for k in factories do
75121: LD_ADDR_VAR 0 6
75125: PUSH
75126: LD_VAR 0 2
75130: PUSH
75131: FOR_IN
75132: IFFALSE 75197
// begin weapons := AvailableWeaponList ( k ) ;
75134: LD_ADDR_VAR 0 9
75138: PUSH
75139: LD_VAR 0 6
75143: PPUSH
75144: CALL_OW 478
75148: ST_TO_ADDR
// if not weapons then
75149: LD_VAR 0 9
75153: NOT
75154: IFFALSE 75158
// continue ;
75156: GO 75131
// if weapon in weapons then
75158: LD_VAR 0 8
75162: PUSH
75163: LD_VAR 0 9
75167: IN
75168: IFFALSE 75195
// begin result := [ i , weapon ] ;
75170: LD_ADDR_VAR 0 3
75174: PUSH
75175: LD_VAR 0 4
75179: PUSH
75180: LD_VAR 0 8
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: ST_TO_ADDR
// exit ;
75189: POP
75190: POP
75191: POP
75192: POP
75193: GO 75203
// end ; end ;
75195: GO 75131
75197: POP
75198: POP
// end ;
75199: GO 75017
75201: POP
75202: POP
// end ;
75203: LD_VAR 0 3
75207: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75208: LD_INT 0
75210: PPUSH
// if not side or side > 8 then
75211: LD_VAR 0 3
75215: NOT
75216: PUSH
75217: LD_VAR 0 3
75221: PUSH
75222: LD_INT 8
75224: GREATER
75225: OR
75226: IFFALSE 75230
// exit ;
75228: GO 75289
// if not range then
75230: LD_VAR 0 4
75234: NOT
75235: IFFALSE 75246
// range := - 12 ;
75237: LD_ADDR_VAR 0 4
75241: PUSH
75242: LD_INT 12
75244: NEG
75245: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75246: LD_VAR 0 1
75250: PPUSH
75251: LD_VAR 0 2
75255: PPUSH
75256: LD_VAR 0 3
75260: PPUSH
75261: LD_VAR 0 4
75265: PPUSH
75266: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75270: LD_VAR 0 1
75274: PPUSH
75275: LD_VAR 0 2
75279: PPUSH
75280: LD_VAR 0 3
75284: PPUSH
75285: CALL_OW 331
// end ;
75289: LD_VAR 0 5
75293: RET
// export function Video ( mode ) ; begin
75294: LD_INT 0
75296: PPUSH
// ingame_video = mode ;
75297: LD_ADDR_OWVAR 52
75301: PUSH
75302: LD_VAR 0 1
75306: ST_TO_ADDR
// interface_hidden = mode ;
75307: LD_ADDR_OWVAR 54
75311: PUSH
75312: LD_VAR 0 1
75316: ST_TO_ADDR
// end ;
75317: LD_VAR 0 2
75321: RET
// export function Join ( array , element ) ; begin
75322: LD_INT 0
75324: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75325: LD_ADDR_VAR 0 3
75329: PUSH
75330: LD_VAR 0 1
75334: PPUSH
75335: LD_VAR 0 1
75339: PUSH
75340: LD_INT 1
75342: PLUS
75343: PPUSH
75344: LD_VAR 0 2
75348: PPUSH
75349: CALL_OW 1
75353: ST_TO_ADDR
// end ;
75354: LD_VAR 0 3
75358: RET
// export function JoinUnion ( array , element ) ; begin
75359: LD_INT 0
75361: PPUSH
// result := array union element ;
75362: LD_ADDR_VAR 0 3
75366: PUSH
75367: LD_VAR 0 1
75371: PUSH
75372: LD_VAR 0 2
75376: UNION
75377: ST_TO_ADDR
// end ;
75378: LD_VAR 0 3
75382: RET
// export function GetBehemoths ( side ) ; begin
75383: LD_INT 0
75385: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75386: LD_ADDR_VAR 0 2
75390: PUSH
75391: LD_INT 22
75393: PUSH
75394: LD_VAR 0 1
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: PUSH
75403: LD_INT 31
75405: PUSH
75406: LD_INT 25
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: PPUSH
75417: CALL_OW 69
75421: ST_TO_ADDR
// end ;
75422: LD_VAR 0 2
75426: RET
// export function Shuffle ( array ) ; var i , index ; begin
75427: LD_INT 0
75429: PPUSH
75430: PPUSH
75431: PPUSH
// result := [ ] ;
75432: LD_ADDR_VAR 0 2
75436: PUSH
75437: EMPTY
75438: ST_TO_ADDR
// if not array then
75439: LD_VAR 0 1
75443: NOT
75444: IFFALSE 75448
// exit ;
75446: GO 75547
// Randomize ;
75448: CALL_OW 10
// for i = array downto 1 do
75452: LD_ADDR_VAR 0 3
75456: PUSH
75457: DOUBLE
75458: LD_VAR 0 1
75462: INC
75463: ST_TO_ADDR
75464: LD_INT 1
75466: PUSH
75467: FOR_DOWNTO
75468: IFFALSE 75545
// begin index := rand ( 1 , array ) ;
75470: LD_ADDR_VAR 0 4
75474: PUSH
75475: LD_INT 1
75477: PPUSH
75478: LD_VAR 0 1
75482: PPUSH
75483: CALL_OW 12
75487: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75488: LD_ADDR_VAR 0 2
75492: PUSH
75493: LD_VAR 0 2
75497: PPUSH
75498: LD_VAR 0 2
75502: PUSH
75503: LD_INT 1
75505: PLUS
75506: PPUSH
75507: LD_VAR 0 1
75511: PUSH
75512: LD_VAR 0 4
75516: ARRAY
75517: PPUSH
75518: CALL_OW 2
75522: ST_TO_ADDR
// array := Delete ( array , index ) ;
75523: LD_ADDR_VAR 0 1
75527: PUSH
75528: LD_VAR 0 1
75532: PPUSH
75533: LD_VAR 0 4
75537: PPUSH
75538: CALL_OW 3
75542: ST_TO_ADDR
// end ;
75543: GO 75467
75545: POP
75546: POP
// end ;
75547: LD_VAR 0 2
75551: RET
// export function GetBaseMaterials ( base ) ; begin
75552: LD_INT 0
75554: PPUSH
// result := [ 0 , 0 , 0 ] ;
75555: LD_ADDR_VAR 0 2
75559: PUSH
75560: LD_INT 0
75562: PUSH
75563: LD_INT 0
75565: PUSH
75566: LD_INT 0
75568: PUSH
75569: EMPTY
75570: LIST
75571: LIST
75572: LIST
75573: ST_TO_ADDR
// if not base then
75574: LD_VAR 0 1
75578: NOT
75579: IFFALSE 75583
// exit ;
75581: GO 75632
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75583: LD_ADDR_VAR 0 2
75587: PUSH
75588: LD_VAR 0 1
75592: PPUSH
75593: LD_INT 1
75595: PPUSH
75596: CALL_OW 275
75600: PUSH
75601: LD_VAR 0 1
75605: PPUSH
75606: LD_INT 2
75608: PPUSH
75609: CALL_OW 275
75613: PUSH
75614: LD_VAR 0 1
75618: PPUSH
75619: LD_INT 3
75621: PPUSH
75622: CALL_OW 275
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: LIST
75631: ST_TO_ADDR
// end ;
75632: LD_VAR 0 2
75636: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75637: LD_INT 0
75639: PPUSH
75640: PPUSH
// result := array ;
75641: LD_ADDR_VAR 0 3
75645: PUSH
75646: LD_VAR 0 1
75650: ST_TO_ADDR
// if size >= result then
75651: LD_VAR 0 2
75655: PUSH
75656: LD_VAR 0 3
75660: GREATEREQUAL
75661: IFFALSE 75665
// exit ;
75663: GO 75715
// if size then
75665: LD_VAR 0 2
75669: IFFALSE 75715
// for i := array downto size do
75671: LD_ADDR_VAR 0 4
75675: PUSH
75676: DOUBLE
75677: LD_VAR 0 1
75681: INC
75682: ST_TO_ADDR
75683: LD_VAR 0 2
75687: PUSH
75688: FOR_DOWNTO
75689: IFFALSE 75713
// result := Delete ( result , result ) ;
75691: LD_ADDR_VAR 0 3
75695: PUSH
75696: LD_VAR 0 3
75700: PPUSH
75701: LD_VAR 0 3
75705: PPUSH
75706: CALL_OW 3
75710: ST_TO_ADDR
75711: GO 75688
75713: POP
75714: POP
// end ;
75715: LD_VAR 0 3
75719: RET
// export function ComExit ( unit ) ; var tmp ; begin
75720: LD_INT 0
75722: PPUSH
75723: PPUSH
// if not IsInUnit ( unit ) then
75724: LD_VAR 0 1
75728: PPUSH
75729: CALL_OW 310
75733: NOT
75734: IFFALSE 75738
// exit ;
75736: GO 75798
// tmp := IsInUnit ( unit ) ;
75738: LD_ADDR_VAR 0 3
75742: PUSH
75743: LD_VAR 0 1
75747: PPUSH
75748: CALL_OW 310
75752: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75753: LD_VAR 0 3
75757: PPUSH
75758: CALL_OW 247
75762: PUSH
75763: LD_INT 2
75765: EQUAL
75766: IFFALSE 75779
// ComExitVehicle ( unit ) else
75768: LD_VAR 0 1
75772: PPUSH
75773: CALL_OW 121
75777: GO 75788
// ComExitBuilding ( unit ) ;
75779: LD_VAR 0 1
75783: PPUSH
75784: CALL_OW 122
// result := tmp ;
75788: LD_ADDR_VAR 0 2
75792: PUSH
75793: LD_VAR 0 3
75797: ST_TO_ADDR
// end ;
75798: LD_VAR 0 2
75802: RET
// export function ComExitAll ( units ) ; var i ; begin
75803: LD_INT 0
75805: PPUSH
75806: PPUSH
// if not units then
75807: LD_VAR 0 1
75811: NOT
75812: IFFALSE 75816
// exit ;
75814: GO 75842
// for i in units do
75816: LD_ADDR_VAR 0 3
75820: PUSH
75821: LD_VAR 0 1
75825: PUSH
75826: FOR_IN
75827: IFFALSE 75840
// ComExit ( i ) ;
75829: LD_VAR 0 3
75833: PPUSH
75834: CALL 75720 0 1
75838: GO 75826
75840: POP
75841: POP
// end ;
75842: LD_VAR 0 2
75846: RET
// export function ResetHc ; begin
75847: LD_INT 0
75849: PPUSH
// InitHc ;
75850: CALL_OW 19
// hc_importance := 0 ;
75854: LD_ADDR_OWVAR 32
75858: PUSH
75859: LD_INT 0
75861: ST_TO_ADDR
// end ;
75862: LD_VAR 0 1
75866: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75867: LD_INT 0
75869: PPUSH
75870: PPUSH
75871: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75872: LD_ADDR_VAR 0 6
75876: PUSH
75877: LD_VAR 0 1
75881: PUSH
75882: LD_VAR 0 3
75886: PLUS
75887: PUSH
75888: LD_INT 2
75890: DIV
75891: ST_TO_ADDR
// if _x < 0 then
75892: LD_VAR 0 6
75896: PUSH
75897: LD_INT 0
75899: LESS
75900: IFFALSE 75917
// _x := _x * - 1 ;
75902: LD_ADDR_VAR 0 6
75906: PUSH
75907: LD_VAR 0 6
75911: PUSH
75912: LD_INT 1
75914: NEG
75915: MUL
75916: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75917: LD_ADDR_VAR 0 7
75921: PUSH
75922: LD_VAR 0 2
75926: PUSH
75927: LD_VAR 0 4
75931: PLUS
75932: PUSH
75933: LD_INT 2
75935: DIV
75936: ST_TO_ADDR
// if _y < 0 then
75937: LD_VAR 0 7
75941: PUSH
75942: LD_INT 0
75944: LESS
75945: IFFALSE 75962
// _y := _y * - 1 ;
75947: LD_ADDR_VAR 0 7
75951: PUSH
75952: LD_VAR 0 7
75956: PUSH
75957: LD_INT 1
75959: NEG
75960: MUL
75961: ST_TO_ADDR
// result := [ _x , _y ] ;
75962: LD_ADDR_VAR 0 5
75966: PUSH
75967: LD_VAR 0 6
75971: PUSH
75972: LD_VAR 0 7
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: ST_TO_ADDR
// end ;
75981: LD_VAR 0 5
75985: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75986: LD_INT 0
75988: PPUSH
75989: PPUSH
75990: PPUSH
75991: PPUSH
// task := GetTaskList ( unit ) ;
75992: LD_ADDR_VAR 0 7
75996: PUSH
75997: LD_VAR 0 1
76001: PPUSH
76002: CALL_OW 437
76006: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76007: LD_VAR 0 7
76011: NOT
76012: PUSH
76013: LD_VAR 0 1
76017: PPUSH
76018: LD_VAR 0 2
76022: PPUSH
76023: CALL_OW 308
76027: NOT
76028: AND
76029: IFFALSE 76033
// exit ;
76031: GO 76151
// if IsInArea ( unit , area ) then
76033: LD_VAR 0 1
76037: PPUSH
76038: LD_VAR 0 2
76042: PPUSH
76043: CALL_OW 308
76047: IFFALSE 76065
// begin ComMoveToArea ( unit , goAway ) ;
76049: LD_VAR 0 1
76053: PPUSH
76054: LD_VAR 0 3
76058: PPUSH
76059: CALL_OW 113
// exit ;
76063: GO 76151
// end ; if task [ 1 ] [ 1 ] <> M then
76065: LD_VAR 0 7
76069: PUSH
76070: LD_INT 1
76072: ARRAY
76073: PUSH
76074: LD_INT 1
76076: ARRAY
76077: PUSH
76078: LD_STRING M
76080: NONEQUAL
76081: IFFALSE 76085
// exit ;
76083: GO 76151
// x := task [ 1 ] [ 2 ] ;
76085: LD_ADDR_VAR 0 5
76089: PUSH
76090: LD_VAR 0 7
76094: PUSH
76095: LD_INT 1
76097: ARRAY
76098: PUSH
76099: LD_INT 2
76101: ARRAY
76102: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76103: LD_ADDR_VAR 0 6
76107: PUSH
76108: LD_VAR 0 7
76112: PUSH
76113: LD_INT 1
76115: ARRAY
76116: PUSH
76117: LD_INT 3
76119: ARRAY
76120: ST_TO_ADDR
// if InArea ( x , y , area ) then
76121: LD_VAR 0 5
76125: PPUSH
76126: LD_VAR 0 6
76130: PPUSH
76131: LD_VAR 0 2
76135: PPUSH
76136: CALL_OW 309
76140: IFFALSE 76151
// ComStop ( unit ) ;
76142: LD_VAR 0 1
76146: PPUSH
76147: CALL_OW 141
// end ;
76151: LD_VAR 0 4
76155: RET
// export function Abs ( value ) ; begin
76156: LD_INT 0
76158: PPUSH
// result := value ;
76159: LD_ADDR_VAR 0 2
76163: PUSH
76164: LD_VAR 0 1
76168: ST_TO_ADDR
// if value < 0 then
76169: LD_VAR 0 1
76173: PUSH
76174: LD_INT 0
76176: LESS
76177: IFFALSE 76194
// result := value * - 1 ;
76179: LD_ADDR_VAR 0 2
76183: PUSH
76184: LD_VAR 0 1
76188: PUSH
76189: LD_INT 1
76191: NEG
76192: MUL
76193: ST_TO_ADDR
// end ;
76194: LD_VAR 0 2
76198: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76199: LD_INT 0
76201: PPUSH
76202: PPUSH
76203: PPUSH
76204: PPUSH
76205: PPUSH
76206: PPUSH
76207: PPUSH
76208: PPUSH
// if not unit or not building then
76209: LD_VAR 0 1
76213: NOT
76214: PUSH
76215: LD_VAR 0 2
76219: NOT
76220: OR
76221: IFFALSE 76225
// exit ;
76223: GO 76451
// x := GetX ( building ) ;
76225: LD_ADDR_VAR 0 4
76229: PUSH
76230: LD_VAR 0 2
76234: PPUSH
76235: CALL_OW 250
76239: ST_TO_ADDR
// y := GetY ( building ) ;
76240: LD_ADDR_VAR 0 6
76244: PUSH
76245: LD_VAR 0 2
76249: PPUSH
76250: CALL_OW 251
76254: ST_TO_ADDR
// d := GetDir ( building ) ;
76255: LD_ADDR_VAR 0 8
76259: PUSH
76260: LD_VAR 0 2
76264: PPUSH
76265: CALL_OW 254
76269: ST_TO_ADDR
// r := 4 ;
76270: LD_ADDR_VAR 0 9
76274: PUSH
76275: LD_INT 4
76277: ST_TO_ADDR
// for i := 1 to 5 do
76278: LD_ADDR_VAR 0 10
76282: PUSH
76283: DOUBLE
76284: LD_INT 1
76286: DEC
76287: ST_TO_ADDR
76288: LD_INT 5
76290: PUSH
76291: FOR_TO
76292: IFFALSE 76449
// begin _x := ShiftX ( x , d , r + i ) ;
76294: LD_ADDR_VAR 0 5
76298: PUSH
76299: LD_VAR 0 4
76303: PPUSH
76304: LD_VAR 0 8
76308: PPUSH
76309: LD_VAR 0 9
76313: PUSH
76314: LD_VAR 0 10
76318: PLUS
76319: PPUSH
76320: CALL_OW 272
76324: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76325: LD_ADDR_VAR 0 7
76329: PUSH
76330: LD_VAR 0 6
76334: PPUSH
76335: LD_VAR 0 8
76339: PPUSH
76340: LD_VAR 0 9
76344: PUSH
76345: LD_VAR 0 10
76349: PLUS
76350: PPUSH
76351: CALL_OW 273
76355: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76356: LD_VAR 0 5
76360: PPUSH
76361: LD_VAR 0 7
76365: PPUSH
76366: CALL_OW 488
76370: PUSH
76371: LD_VAR 0 5
76375: PPUSH
76376: LD_VAR 0 7
76380: PPUSH
76381: CALL_OW 428
76385: PPUSH
76386: CALL_OW 247
76390: PUSH
76391: LD_INT 3
76393: PUSH
76394: LD_INT 2
76396: PUSH
76397: EMPTY
76398: LIST
76399: LIST
76400: IN
76401: NOT
76402: AND
76403: IFFALSE 76447
// begin ComMoveXY ( unit , _x , _y ) ;
76405: LD_VAR 0 1
76409: PPUSH
76410: LD_VAR 0 5
76414: PPUSH
76415: LD_VAR 0 7
76419: PPUSH
76420: CALL_OW 111
// result := [ _x , _y ] ;
76424: LD_ADDR_VAR 0 3
76428: PUSH
76429: LD_VAR 0 5
76433: PUSH
76434: LD_VAR 0 7
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: ST_TO_ADDR
// exit ;
76443: POP
76444: POP
76445: GO 76451
// end ; end ;
76447: GO 76291
76449: POP
76450: POP
// end ;
76451: LD_VAR 0 3
76455: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76456: LD_INT 0
76458: PPUSH
76459: PPUSH
76460: PPUSH
// result := 0 ;
76461: LD_ADDR_VAR 0 3
76465: PUSH
76466: LD_INT 0
76468: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76469: LD_VAR 0 1
76473: PUSH
76474: LD_INT 0
76476: LESS
76477: PUSH
76478: LD_VAR 0 1
76482: PUSH
76483: LD_INT 8
76485: GREATER
76486: OR
76487: PUSH
76488: LD_VAR 0 2
76492: PUSH
76493: LD_INT 0
76495: LESS
76496: OR
76497: PUSH
76498: LD_VAR 0 2
76502: PUSH
76503: LD_INT 8
76505: GREATER
76506: OR
76507: IFFALSE 76511
// exit ;
76509: GO 76586
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76511: LD_ADDR_VAR 0 4
76515: PUSH
76516: LD_INT 22
76518: PUSH
76519: LD_VAR 0 2
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PPUSH
76528: CALL_OW 69
76532: PUSH
76533: FOR_IN
76534: IFFALSE 76584
// begin un := UnitShoot ( i ) ;
76536: LD_ADDR_VAR 0 5
76540: PUSH
76541: LD_VAR 0 4
76545: PPUSH
76546: CALL_OW 504
76550: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76551: LD_VAR 0 5
76555: PPUSH
76556: CALL_OW 255
76560: PUSH
76561: LD_VAR 0 1
76565: EQUAL
76566: IFFALSE 76582
// begin result := un ;
76568: LD_ADDR_VAR 0 3
76572: PUSH
76573: LD_VAR 0 5
76577: ST_TO_ADDR
// exit ;
76578: POP
76579: POP
76580: GO 76586
// end ; end ;
76582: GO 76533
76584: POP
76585: POP
// end ;
76586: LD_VAR 0 3
76590: RET
// export function GetCargoBay ( units ) ; begin
76591: LD_INT 0
76593: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76594: LD_ADDR_VAR 0 2
76598: PUSH
76599: LD_VAR 0 1
76603: PPUSH
76604: LD_INT 2
76606: PUSH
76607: LD_INT 34
76609: PUSH
76610: LD_INT 12
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: PUSH
76617: LD_INT 34
76619: PUSH
76620: LD_INT 51
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: PUSH
76627: LD_INT 34
76629: PUSH
76630: LD_INT 32
76632: PUSH
76633: EMPTY
76634: LIST
76635: LIST
76636: PUSH
76637: LD_INT 34
76639: PUSH
76640: LD_INT 89
76642: PUSH
76643: EMPTY
76644: LIST
76645: LIST
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: LIST
76651: LIST
76652: LIST
76653: PPUSH
76654: CALL_OW 72
76658: ST_TO_ADDR
// end ;
76659: LD_VAR 0 2
76663: RET
// export function Negate ( value ) ; begin
76664: LD_INT 0
76666: PPUSH
// result := not value ;
76667: LD_ADDR_VAR 0 2
76671: PUSH
76672: LD_VAR 0 1
76676: NOT
76677: ST_TO_ADDR
// end ;
76678: LD_VAR 0 2
76682: RET
// export function Inc ( value ) ; begin
76683: LD_INT 0
76685: PPUSH
// result := value + 1 ;
76686: LD_ADDR_VAR 0 2
76690: PUSH
76691: LD_VAR 0 1
76695: PUSH
76696: LD_INT 1
76698: PLUS
76699: ST_TO_ADDR
// end ;
76700: LD_VAR 0 2
76704: RET
// export function Dec ( value ) ; begin
76705: LD_INT 0
76707: PPUSH
// result := value - 1 ;
76708: LD_ADDR_VAR 0 2
76712: PUSH
76713: LD_VAR 0 1
76717: PUSH
76718: LD_INT 1
76720: MINUS
76721: ST_TO_ADDR
// end ;
76722: LD_VAR 0 2
76726: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76727: LD_INT 0
76729: PPUSH
76730: PPUSH
76731: PPUSH
76732: PPUSH
76733: PPUSH
76734: PPUSH
76735: PPUSH
76736: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76737: LD_VAR 0 1
76741: PPUSH
76742: LD_VAR 0 2
76746: PPUSH
76747: CALL_OW 488
76751: NOT
76752: PUSH
76753: LD_VAR 0 3
76757: PPUSH
76758: LD_VAR 0 4
76762: PPUSH
76763: CALL_OW 488
76767: NOT
76768: OR
76769: IFFALSE 76782
// begin result := - 1 ;
76771: LD_ADDR_VAR 0 5
76775: PUSH
76776: LD_INT 1
76778: NEG
76779: ST_TO_ADDR
// exit ;
76780: GO 77017
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76782: LD_ADDR_VAR 0 12
76786: PUSH
76787: LD_VAR 0 1
76791: PPUSH
76792: LD_VAR 0 2
76796: PPUSH
76797: LD_VAR 0 3
76801: PPUSH
76802: LD_VAR 0 4
76806: PPUSH
76807: CALL 75867 0 4
76811: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76812: LD_ADDR_VAR 0 11
76816: PUSH
76817: LD_VAR 0 1
76821: PPUSH
76822: LD_VAR 0 2
76826: PPUSH
76827: LD_VAR 0 12
76831: PUSH
76832: LD_INT 1
76834: ARRAY
76835: PPUSH
76836: LD_VAR 0 12
76840: PUSH
76841: LD_INT 2
76843: ARRAY
76844: PPUSH
76845: CALL_OW 298
76849: ST_TO_ADDR
// distance := 9999 ;
76850: LD_ADDR_VAR 0 10
76854: PUSH
76855: LD_INT 9999
76857: ST_TO_ADDR
// for i := 0 to 5 do
76858: LD_ADDR_VAR 0 6
76862: PUSH
76863: DOUBLE
76864: LD_INT 0
76866: DEC
76867: ST_TO_ADDR
76868: LD_INT 5
76870: PUSH
76871: FOR_TO
76872: IFFALSE 77015
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76874: LD_ADDR_VAR 0 7
76878: PUSH
76879: LD_VAR 0 1
76883: PPUSH
76884: LD_VAR 0 6
76888: PPUSH
76889: LD_VAR 0 11
76893: PPUSH
76894: CALL_OW 272
76898: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76899: LD_ADDR_VAR 0 8
76903: PUSH
76904: LD_VAR 0 2
76908: PPUSH
76909: LD_VAR 0 6
76913: PPUSH
76914: LD_VAR 0 11
76918: PPUSH
76919: CALL_OW 273
76923: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76924: LD_VAR 0 7
76928: PPUSH
76929: LD_VAR 0 8
76933: PPUSH
76934: CALL_OW 488
76938: NOT
76939: IFFALSE 76943
// continue ;
76941: GO 76871
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76943: LD_ADDR_VAR 0 9
76947: PUSH
76948: LD_VAR 0 12
76952: PUSH
76953: LD_INT 1
76955: ARRAY
76956: PPUSH
76957: LD_VAR 0 12
76961: PUSH
76962: LD_INT 2
76964: ARRAY
76965: PPUSH
76966: LD_VAR 0 7
76970: PPUSH
76971: LD_VAR 0 8
76975: PPUSH
76976: CALL_OW 298
76980: ST_TO_ADDR
// if tmp < distance then
76981: LD_VAR 0 9
76985: PUSH
76986: LD_VAR 0 10
76990: LESS
76991: IFFALSE 77013
// begin result := i ;
76993: LD_ADDR_VAR 0 5
76997: PUSH
76998: LD_VAR 0 6
77002: ST_TO_ADDR
// distance := tmp ;
77003: LD_ADDR_VAR 0 10
77007: PUSH
77008: LD_VAR 0 9
77012: ST_TO_ADDR
// end ; end ;
77013: GO 76871
77015: POP
77016: POP
// end ;
77017: LD_VAR 0 5
77021: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77022: LD_INT 0
77024: PPUSH
77025: PPUSH
// if not driver or not IsInUnit ( driver ) then
77026: LD_VAR 0 1
77030: NOT
77031: PUSH
77032: LD_VAR 0 1
77036: PPUSH
77037: CALL_OW 310
77041: NOT
77042: OR
77043: IFFALSE 77047
// exit ;
77045: GO 77137
// vehicle := IsInUnit ( driver ) ;
77047: LD_ADDR_VAR 0 3
77051: PUSH
77052: LD_VAR 0 1
77056: PPUSH
77057: CALL_OW 310
77061: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77062: LD_VAR 0 1
77066: PPUSH
77067: LD_STRING \
77069: PUSH
77070: LD_INT 0
77072: PUSH
77073: LD_INT 0
77075: PUSH
77076: LD_INT 0
77078: PUSH
77079: LD_INT 0
77081: PUSH
77082: LD_INT 0
77084: PUSH
77085: LD_INT 0
77087: PUSH
77088: EMPTY
77089: LIST
77090: LIST
77091: LIST
77092: LIST
77093: LIST
77094: LIST
77095: LIST
77096: PUSH
77097: LD_STRING E
77099: PUSH
77100: LD_INT 0
77102: PUSH
77103: LD_INT 0
77105: PUSH
77106: LD_VAR 0 3
77110: PUSH
77111: LD_INT 0
77113: PUSH
77114: LD_INT 0
77116: PUSH
77117: LD_INT 0
77119: PUSH
77120: EMPTY
77121: LIST
77122: LIST
77123: LIST
77124: LIST
77125: LIST
77126: LIST
77127: LIST
77128: PUSH
77129: EMPTY
77130: LIST
77131: LIST
77132: PPUSH
77133: CALL_OW 446
// end ;
77137: LD_VAR 0 2
77141: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77142: LD_INT 0
77144: PPUSH
77145: PPUSH
// if not driver or not IsInUnit ( driver ) then
77146: LD_VAR 0 1
77150: NOT
77151: PUSH
77152: LD_VAR 0 1
77156: PPUSH
77157: CALL_OW 310
77161: NOT
77162: OR
77163: IFFALSE 77167
// exit ;
77165: GO 77257
// vehicle := IsInUnit ( driver ) ;
77167: LD_ADDR_VAR 0 3
77171: PUSH
77172: LD_VAR 0 1
77176: PPUSH
77177: CALL_OW 310
77181: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77182: LD_VAR 0 1
77186: PPUSH
77187: LD_STRING \
77189: PUSH
77190: LD_INT 0
77192: PUSH
77193: LD_INT 0
77195: PUSH
77196: LD_INT 0
77198: PUSH
77199: LD_INT 0
77201: PUSH
77202: LD_INT 0
77204: PUSH
77205: LD_INT 0
77207: PUSH
77208: EMPTY
77209: LIST
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: PUSH
77217: LD_STRING E
77219: PUSH
77220: LD_INT 0
77222: PUSH
77223: LD_INT 0
77225: PUSH
77226: LD_VAR 0 3
77230: PUSH
77231: LD_INT 0
77233: PUSH
77234: LD_INT 0
77236: PUSH
77237: LD_INT 0
77239: PUSH
77240: EMPTY
77241: LIST
77242: LIST
77243: LIST
77244: LIST
77245: LIST
77246: LIST
77247: LIST
77248: PUSH
77249: EMPTY
77250: LIST
77251: LIST
77252: PPUSH
77253: CALL_OW 447
// end ;
77257: LD_VAR 0 2
77261: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77262: LD_INT 0
77264: PPUSH
77265: PPUSH
77266: PPUSH
// tmp := [ ] ;
77267: LD_ADDR_VAR 0 5
77271: PUSH
77272: EMPTY
77273: ST_TO_ADDR
// for i in units do
77274: LD_ADDR_VAR 0 4
77278: PUSH
77279: LD_VAR 0 1
77283: PUSH
77284: FOR_IN
77285: IFFALSE 77323
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77287: LD_ADDR_VAR 0 5
77291: PUSH
77292: LD_VAR 0 5
77296: PPUSH
77297: LD_VAR 0 5
77301: PUSH
77302: LD_INT 1
77304: PLUS
77305: PPUSH
77306: LD_VAR 0 4
77310: PPUSH
77311: CALL_OW 256
77315: PPUSH
77316: CALL_OW 2
77320: ST_TO_ADDR
77321: GO 77284
77323: POP
77324: POP
// if not tmp then
77325: LD_VAR 0 5
77329: NOT
77330: IFFALSE 77334
// exit ;
77332: GO 77382
// if asc then
77334: LD_VAR 0 2
77338: IFFALSE 77362
// result := SortListByListAsc ( units , tmp ) else
77340: LD_ADDR_VAR 0 3
77344: PUSH
77345: LD_VAR 0 1
77349: PPUSH
77350: LD_VAR 0 5
77354: PPUSH
77355: CALL_OW 76
77359: ST_TO_ADDR
77360: GO 77382
// result := SortListByListDesc ( units , tmp ) ;
77362: LD_ADDR_VAR 0 3
77366: PUSH
77367: LD_VAR 0 1
77371: PPUSH
77372: LD_VAR 0 5
77376: PPUSH
77377: CALL_OW 77
77381: ST_TO_ADDR
// end ;
77382: LD_VAR 0 3
77386: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77387: LD_INT 0
77389: PPUSH
77390: PPUSH
// task := GetTaskList ( mech ) ;
77391: LD_ADDR_VAR 0 4
77395: PUSH
77396: LD_VAR 0 1
77400: PPUSH
77401: CALL_OW 437
77405: ST_TO_ADDR
// if not task then
77406: LD_VAR 0 4
77410: NOT
77411: IFFALSE 77415
// exit ;
77413: GO 77457
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77415: LD_ADDR_VAR 0 3
77419: PUSH
77420: LD_VAR 0 4
77424: PUSH
77425: LD_INT 1
77427: ARRAY
77428: PUSH
77429: LD_INT 1
77431: ARRAY
77432: PUSH
77433: LD_STRING r
77435: EQUAL
77436: PUSH
77437: LD_VAR 0 4
77441: PUSH
77442: LD_INT 1
77444: ARRAY
77445: PUSH
77446: LD_INT 4
77448: ARRAY
77449: PUSH
77450: LD_VAR 0 2
77454: EQUAL
77455: AND
77456: ST_TO_ADDR
// end ;
77457: LD_VAR 0 3
77461: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77462: LD_INT 0
77464: PPUSH
// SetDir ( unit , d ) ;
77465: LD_VAR 0 1
77469: PPUSH
77470: LD_VAR 0 4
77474: PPUSH
77475: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77479: LD_VAR 0 1
77483: PPUSH
77484: LD_VAR 0 2
77488: PPUSH
77489: LD_VAR 0 3
77493: PPUSH
77494: LD_VAR 0 5
77498: PPUSH
77499: CALL_OW 48
// end ;
77503: LD_VAR 0 6
77507: RET
// export function ToNaturalNumber ( number ) ; begin
77508: LD_INT 0
77510: PPUSH
// result := number div 1 ;
77511: LD_ADDR_VAR 0 2
77515: PUSH
77516: LD_VAR 0 1
77520: PUSH
77521: LD_INT 1
77523: DIV
77524: ST_TO_ADDR
// if number < 0 then
77525: LD_VAR 0 1
77529: PUSH
77530: LD_INT 0
77532: LESS
77533: IFFALSE 77543
// result := 0 ;
77535: LD_ADDR_VAR 0 2
77539: PUSH
77540: LD_INT 0
77542: ST_TO_ADDR
// end ;
77543: LD_VAR 0 2
77547: RET
// export function SortByClass ( units , class ) ; var un ; begin
77548: LD_INT 0
77550: PPUSH
77551: PPUSH
// if not units or not class then
77552: LD_VAR 0 1
77556: NOT
77557: PUSH
77558: LD_VAR 0 2
77562: NOT
77563: OR
77564: IFFALSE 77568
// exit ;
77566: GO 77663
// result := [ ] ;
77568: LD_ADDR_VAR 0 3
77572: PUSH
77573: EMPTY
77574: ST_TO_ADDR
// for un in units do
77575: LD_ADDR_VAR 0 4
77579: PUSH
77580: LD_VAR 0 1
77584: PUSH
77585: FOR_IN
77586: IFFALSE 77661
// if GetClass ( un ) = class then
77588: LD_VAR 0 4
77592: PPUSH
77593: CALL_OW 257
77597: PUSH
77598: LD_VAR 0 2
77602: EQUAL
77603: IFFALSE 77630
// result := Insert ( result , 1 , un ) else
77605: LD_ADDR_VAR 0 3
77609: PUSH
77610: LD_VAR 0 3
77614: PPUSH
77615: LD_INT 1
77617: PPUSH
77618: LD_VAR 0 4
77622: PPUSH
77623: CALL_OW 2
77627: ST_TO_ADDR
77628: GO 77659
// result := Replace ( result , result + 1 , un ) ;
77630: LD_ADDR_VAR 0 3
77634: PUSH
77635: LD_VAR 0 3
77639: PPUSH
77640: LD_VAR 0 3
77644: PUSH
77645: LD_INT 1
77647: PLUS
77648: PPUSH
77649: LD_VAR 0 4
77653: PPUSH
77654: CALL_OW 1
77658: ST_TO_ADDR
77659: GO 77585
77661: POP
77662: POP
// end ;
77663: LD_VAR 0 3
77667: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77668: LD_INT 0
77670: PPUSH
77671: PPUSH
77672: PPUSH
77673: PPUSH
77674: PPUSH
77675: PPUSH
77676: PPUSH
// result := [ ] ;
77677: LD_ADDR_VAR 0 4
77681: PUSH
77682: EMPTY
77683: ST_TO_ADDR
// if x - r < 0 then
77684: LD_VAR 0 1
77688: PUSH
77689: LD_VAR 0 3
77693: MINUS
77694: PUSH
77695: LD_INT 0
77697: LESS
77698: IFFALSE 77710
// min_x := 0 else
77700: LD_ADDR_VAR 0 8
77704: PUSH
77705: LD_INT 0
77707: ST_TO_ADDR
77708: GO 77726
// min_x := x - r ;
77710: LD_ADDR_VAR 0 8
77714: PUSH
77715: LD_VAR 0 1
77719: PUSH
77720: LD_VAR 0 3
77724: MINUS
77725: ST_TO_ADDR
// if y - r < 0 then
77726: LD_VAR 0 2
77730: PUSH
77731: LD_VAR 0 3
77735: MINUS
77736: PUSH
77737: LD_INT 0
77739: LESS
77740: IFFALSE 77752
// min_y := 0 else
77742: LD_ADDR_VAR 0 7
77746: PUSH
77747: LD_INT 0
77749: ST_TO_ADDR
77750: GO 77768
// min_y := y - r ;
77752: LD_ADDR_VAR 0 7
77756: PUSH
77757: LD_VAR 0 2
77761: PUSH
77762: LD_VAR 0 3
77766: MINUS
77767: ST_TO_ADDR
// max_x := x + r ;
77768: LD_ADDR_VAR 0 9
77772: PUSH
77773: LD_VAR 0 1
77777: PUSH
77778: LD_VAR 0 3
77782: PLUS
77783: ST_TO_ADDR
// max_y := y + r ;
77784: LD_ADDR_VAR 0 10
77788: PUSH
77789: LD_VAR 0 2
77793: PUSH
77794: LD_VAR 0 3
77798: PLUS
77799: ST_TO_ADDR
// for _x = min_x to max_x do
77800: LD_ADDR_VAR 0 5
77804: PUSH
77805: DOUBLE
77806: LD_VAR 0 8
77810: DEC
77811: ST_TO_ADDR
77812: LD_VAR 0 9
77816: PUSH
77817: FOR_TO
77818: IFFALSE 77919
// for _y = min_y to max_y do
77820: LD_ADDR_VAR 0 6
77824: PUSH
77825: DOUBLE
77826: LD_VAR 0 7
77830: DEC
77831: ST_TO_ADDR
77832: LD_VAR 0 10
77836: PUSH
77837: FOR_TO
77838: IFFALSE 77915
// begin if not ValidHex ( _x , _y ) then
77840: LD_VAR 0 5
77844: PPUSH
77845: LD_VAR 0 6
77849: PPUSH
77850: CALL_OW 488
77854: NOT
77855: IFFALSE 77859
// continue ;
77857: GO 77837
// if GetResourceTypeXY ( _x , _y ) then
77859: LD_VAR 0 5
77863: PPUSH
77864: LD_VAR 0 6
77868: PPUSH
77869: CALL_OW 283
77873: IFFALSE 77913
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77875: LD_ADDR_VAR 0 4
77879: PUSH
77880: LD_VAR 0 4
77884: PPUSH
77885: LD_VAR 0 4
77889: PUSH
77890: LD_INT 1
77892: PLUS
77893: PPUSH
77894: LD_VAR 0 5
77898: PUSH
77899: LD_VAR 0 6
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: PPUSH
77908: CALL_OW 1
77912: ST_TO_ADDR
// end ;
77913: GO 77837
77915: POP
77916: POP
77917: GO 77817
77919: POP
77920: POP
// end ;
77921: LD_VAR 0 4
77925: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77926: LD_INT 0
77928: PPUSH
77929: PPUSH
77930: PPUSH
77931: PPUSH
77932: PPUSH
77933: PPUSH
77934: PPUSH
77935: PPUSH
// if not units then
77936: LD_VAR 0 1
77940: NOT
77941: IFFALSE 77945
// exit ;
77943: GO 78469
// result := UnitFilter ( units , [ f_ok ] ) ;
77945: LD_ADDR_VAR 0 3
77949: PUSH
77950: LD_VAR 0 1
77954: PPUSH
77955: LD_INT 50
77957: PUSH
77958: EMPTY
77959: LIST
77960: PPUSH
77961: CALL_OW 72
77965: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77966: LD_ADDR_VAR 0 8
77970: PUSH
77971: LD_VAR 0 1
77975: PUSH
77976: LD_INT 1
77978: ARRAY
77979: PPUSH
77980: CALL_OW 255
77984: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77985: LD_ADDR_VAR 0 10
77989: PUSH
77990: LD_INT 29
77992: PUSH
77993: LD_INT 91
77995: PUSH
77996: LD_INT 49
77998: PUSH
77999: EMPTY
78000: LIST
78001: LIST
78002: LIST
78003: ST_TO_ADDR
// if not result then
78004: LD_VAR 0 3
78008: NOT
78009: IFFALSE 78013
// exit ;
78011: GO 78469
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78013: LD_ADDR_VAR 0 5
78017: PUSH
78018: LD_INT 81
78020: PUSH
78021: LD_VAR 0 8
78025: PUSH
78026: EMPTY
78027: LIST
78028: LIST
78029: PPUSH
78030: CALL_OW 69
78034: ST_TO_ADDR
// for i in result do
78035: LD_ADDR_VAR 0 4
78039: PUSH
78040: LD_VAR 0 3
78044: PUSH
78045: FOR_IN
78046: IFFALSE 78467
// begin tag := GetTag ( i ) + 1 ;
78048: LD_ADDR_VAR 0 9
78052: PUSH
78053: LD_VAR 0 4
78057: PPUSH
78058: CALL_OW 110
78062: PUSH
78063: LD_INT 1
78065: PLUS
78066: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78067: LD_ADDR_VAR 0 7
78071: PUSH
78072: LD_VAR 0 4
78076: PPUSH
78077: CALL_OW 250
78081: PPUSH
78082: LD_VAR 0 4
78086: PPUSH
78087: CALL_OW 251
78091: PPUSH
78092: LD_INT 6
78094: PPUSH
78095: CALL 77668 0 3
78099: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78100: LD_VAR 0 4
78104: PPUSH
78105: CALL_OW 247
78109: PUSH
78110: LD_INT 2
78112: EQUAL
78113: PUSH
78114: LD_VAR 0 7
78118: AND
78119: PUSH
78120: LD_VAR 0 4
78124: PPUSH
78125: CALL_OW 264
78129: PUSH
78130: LD_VAR 0 10
78134: IN
78135: NOT
78136: AND
78137: IFFALSE 78176
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78139: LD_VAR 0 4
78143: PPUSH
78144: LD_VAR 0 7
78148: PUSH
78149: LD_INT 1
78151: ARRAY
78152: PUSH
78153: LD_INT 1
78155: ARRAY
78156: PPUSH
78157: LD_VAR 0 7
78161: PUSH
78162: LD_INT 1
78164: ARRAY
78165: PUSH
78166: LD_INT 2
78168: ARRAY
78169: PPUSH
78170: CALL_OW 116
78174: GO 78465
// if path > tag then
78176: LD_VAR 0 2
78180: PUSH
78181: LD_VAR 0 9
78185: GREATER
78186: IFFALSE 78394
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78188: LD_ADDR_VAR 0 6
78192: PUSH
78193: LD_VAR 0 5
78197: PPUSH
78198: LD_INT 91
78200: PUSH
78201: LD_VAR 0 4
78205: PUSH
78206: LD_INT 8
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: LIST
78213: PPUSH
78214: CALL_OW 72
78218: ST_TO_ADDR
// if nearEnemy then
78219: LD_VAR 0 6
78223: IFFALSE 78292
// begin if GetWeapon ( i ) = ru_time_lapser then
78225: LD_VAR 0 4
78229: PPUSH
78230: CALL_OW 264
78234: PUSH
78235: LD_INT 49
78237: EQUAL
78238: IFFALSE 78266
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78240: LD_VAR 0 4
78244: PPUSH
78245: LD_VAR 0 6
78249: PPUSH
78250: LD_VAR 0 4
78254: PPUSH
78255: CALL_OW 74
78259: PPUSH
78260: CALL_OW 112
78264: GO 78290
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78266: LD_VAR 0 4
78270: PPUSH
78271: LD_VAR 0 6
78275: PPUSH
78276: LD_VAR 0 4
78280: PPUSH
78281: CALL_OW 74
78285: PPUSH
78286: CALL 79394 0 2
// end else
78290: GO 78392
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78292: LD_VAR 0 4
78296: PPUSH
78297: LD_VAR 0 2
78301: PUSH
78302: LD_VAR 0 9
78306: ARRAY
78307: PUSH
78308: LD_INT 1
78310: ARRAY
78311: PPUSH
78312: LD_VAR 0 2
78316: PUSH
78317: LD_VAR 0 9
78321: ARRAY
78322: PUSH
78323: LD_INT 2
78325: ARRAY
78326: PPUSH
78327: CALL_OW 297
78331: PUSH
78332: LD_INT 6
78334: GREATER
78335: IFFALSE 78378
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78337: LD_VAR 0 4
78341: PPUSH
78342: LD_VAR 0 2
78346: PUSH
78347: LD_VAR 0 9
78351: ARRAY
78352: PUSH
78353: LD_INT 1
78355: ARRAY
78356: PPUSH
78357: LD_VAR 0 2
78361: PUSH
78362: LD_VAR 0 9
78366: ARRAY
78367: PUSH
78368: LD_INT 2
78370: ARRAY
78371: PPUSH
78372: CALL_OW 114
78376: GO 78392
// SetTag ( i , tag ) ;
78378: LD_VAR 0 4
78382: PPUSH
78383: LD_VAR 0 9
78387: PPUSH
78388: CALL_OW 109
// end else
78392: GO 78465
// if enemy then
78394: LD_VAR 0 5
78398: IFFALSE 78465
// begin if GetWeapon ( i ) = ru_time_lapser then
78400: LD_VAR 0 4
78404: PPUSH
78405: CALL_OW 264
78409: PUSH
78410: LD_INT 49
78412: EQUAL
78413: IFFALSE 78441
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78415: LD_VAR 0 4
78419: PPUSH
78420: LD_VAR 0 5
78424: PPUSH
78425: LD_VAR 0 4
78429: PPUSH
78430: CALL_OW 74
78434: PPUSH
78435: CALL_OW 112
78439: GO 78465
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78441: LD_VAR 0 4
78445: PPUSH
78446: LD_VAR 0 5
78450: PPUSH
78451: LD_VAR 0 4
78455: PPUSH
78456: CALL_OW 74
78460: PPUSH
78461: CALL 79394 0 2
// end ; end ;
78465: GO 78045
78467: POP
78468: POP
// end ;
78469: LD_VAR 0 3
78473: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78474: LD_INT 0
78476: PPUSH
78477: PPUSH
78478: PPUSH
// if not unit or IsInUnit ( unit ) then
78479: LD_VAR 0 1
78483: NOT
78484: PUSH
78485: LD_VAR 0 1
78489: PPUSH
78490: CALL_OW 310
78494: OR
78495: IFFALSE 78499
// exit ;
78497: GO 78590
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78499: LD_ADDR_VAR 0 4
78503: PUSH
78504: LD_VAR 0 1
78508: PPUSH
78509: CALL_OW 250
78513: PPUSH
78514: LD_VAR 0 2
78518: PPUSH
78519: LD_INT 1
78521: PPUSH
78522: CALL_OW 272
78526: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78527: LD_ADDR_VAR 0 5
78531: PUSH
78532: LD_VAR 0 1
78536: PPUSH
78537: CALL_OW 251
78541: PPUSH
78542: LD_VAR 0 2
78546: PPUSH
78547: LD_INT 1
78549: PPUSH
78550: CALL_OW 273
78554: ST_TO_ADDR
// if ValidHex ( x , y ) then
78555: LD_VAR 0 4
78559: PPUSH
78560: LD_VAR 0 5
78564: PPUSH
78565: CALL_OW 488
78569: IFFALSE 78590
// ComTurnXY ( unit , x , y ) ;
78571: LD_VAR 0 1
78575: PPUSH
78576: LD_VAR 0 4
78580: PPUSH
78581: LD_VAR 0 5
78585: PPUSH
78586: CALL_OW 118
// end ;
78590: LD_VAR 0 3
78594: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78595: LD_INT 0
78597: PPUSH
78598: PPUSH
// result := false ;
78599: LD_ADDR_VAR 0 3
78603: PUSH
78604: LD_INT 0
78606: ST_TO_ADDR
// if not units then
78607: LD_VAR 0 2
78611: NOT
78612: IFFALSE 78616
// exit ;
78614: GO 78661
// for i in units do
78616: LD_ADDR_VAR 0 4
78620: PUSH
78621: LD_VAR 0 2
78625: PUSH
78626: FOR_IN
78627: IFFALSE 78659
// if See ( side , i ) then
78629: LD_VAR 0 1
78633: PPUSH
78634: LD_VAR 0 4
78638: PPUSH
78639: CALL_OW 292
78643: IFFALSE 78657
// begin result := true ;
78645: LD_ADDR_VAR 0 3
78649: PUSH
78650: LD_INT 1
78652: ST_TO_ADDR
// exit ;
78653: POP
78654: POP
78655: GO 78661
// end ;
78657: GO 78626
78659: POP
78660: POP
// end ;
78661: LD_VAR 0 3
78665: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78666: LD_INT 0
78668: PPUSH
78669: PPUSH
78670: PPUSH
78671: PPUSH
// if not unit or not points then
78672: LD_VAR 0 1
78676: NOT
78677: PUSH
78678: LD_VAR 0 2
78682: NOT
78683: OR
78684: IFFALSE 78688
// exit ;
78686: GO 78778
// dist := 99999 ;
78688: LD_ADDR_VAR 0 5
78692: PUSH
78693: LD_INT 99999
78695: ST_TO_ADDR
// for i in points do
78696: LD_ADDR_VAR 0 4
78700: PUSH
78701: LD_VAR 0 2
78705: PUSH
78706: FOR_IN
78707: IFFALSE 78776
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78709: LD_ADDR_VAR 0 6
78713: PUSH
78714: LD_VAR 0 1
78718: PPUSH
78719: LD_VAR 0 4
78723: PUSH
78724: LD_INT 1
78726: ARRAY
78727: PPUSH
78728: LD_VAR 0 4
78732: PUSH
78733: LD_INT 2
78735: ARRAY
78736: PPUSH
78737: CALL_OW 297
78741: ST_TO_ADDR
// if tmpDist < dist then
78742: LD_VAR 0 6
78746: PUSH
78747: LD_VAR 0 5
78751: LESS
78752: IFFALSE 78774
// begin result := i ;
78754: LD_ADDR_VAR 0 3
78758: PUSH
78759: LD_VAR 0 4
78763: ST_TO_ADDR
// dist := tmpDist ;
78764: LD_ADDR_VAR 0 5
78768: PUSH
78769: LD_VAR 0 6
78773: ST_TO_ADDR
// end ; end ;
78774: GO 78706
78776: POP
78777: POP
// end ;
78778: LD_VAR 0 3
78782: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78783: LD_INT 0
78785: PPUSH
// uc_side := side ;
78786: LD_ADDR_OWVAR 20
78790: PUSH
78791: LD_VAR 0 1
78795: ST_TO_ADDR
// uc_nation := 3 ;
78796: LD_ADDR_OWVAR 21
78800: PUSH
78801: LD_INT 3
78803: ST_TO_ADDR
// vc_chassis := 25 ;
78804: LD_ADDR_OWVAR 37
78808: PUSH
78809: LD_INT 25
78811: ST_TO_ADDR
// vc_engine := engine_siberite ;
78812: LD_ADDR_OWVAR 39
78816: PUSH
78817: LD_INT 3
78819: ST_TO_ADDR
// vc_control := control_computer ;
78820: LD_ADDR_OWVAR 38
78824: PUSH
78825: LD_INT 3
78827: ST_TO_ADDR
// vc_weapon := 59 ;
78828: LD_ADDR_OWVAR 40
78832: PUSH
78833: LD_INT 59
78835: ST_TO_ADDR
// result := CreateVehicle ;
78836: LD_ADDR_VAR 0 5
78840: PUSH
78841: CALL_OW 45
78845: ST_TO_ADDR
// SetDir ( result , d ) ;
78846: LD_VAR 0 5
78850: PPUSH
78851: LD_VAR 0 4
78855: PPUSH
78856: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78860: LD_VAR 0 5
78864: PPUSH
78865: LD_VAR 0 2
78869: PPUSH
78870: LD_VAR 0 3
78874: PPUSH
78875: LD_INT 0
78877: PPUSH
78878: CALL_OW 48
// end ;
78882: LD_VAR 0 5
78886: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78887: LD_INT 0
78889: PPUSH
78890: PPUSH
78891: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78892: LD_ADDR_VAR 0 2
78896: PUSH
78897: LD_INT 0
78899: PUSH
78900: LD_INT 0
78902: PUSH
78903: LD_INT 0
78905: PUSH
78906: LD_INT 0
78908: PUSH
78909: EMPTY
78910: LIST
78911: LIST
78912: LIST
78913: LIST
78914: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78915: LD_VAR 0 1
78919: NOT
78920: PUSH
78921: LD_VAR 0 1
78925: PPUSH
78926: CALL_OW 264
78930: PUSH
78931: LD_INT 12
78933: PUSH
78934: LD_INT 51
78936: PUSH
78937: LD_INT 32
78939: PUSH
78940: LD_INT 89
78942: PUSH
78943: EMPTY
78944: LIST
78945: LIST
78946: LIST
78947: LIST
78948: IN
78949: NOT
78950: OR
78951: IFFALSE 78955
// exit ;
78953: GO 79053
// for i := 1 to 3 do
78955: LD_ADDR_VAR 0 3
78959: PUSH
78960: DOUBLE
78961: LD_INT 1
78963: DEC
78964: ST_TO_ADDR
78965: LD_INT 3
78967: PUSH
78968: FOR_TO
78969: IFFALSE 79051
// begin tmp := GetCargo ( cargo , i ) ;
78971: LD_ADDR_VAR 0 4
78975: PUSH
78976: LD_VAR 0 1
78980: PPUSH
78981: LD_VAR 0 3
78985: PPUSH
78986: CALL_OW 289
78990: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78991: LD_ADDR_VAR 0 2
78995: PUSH
78996: LD_VAR 0 2
79000: PPUSH
79001: LD_VAR 0 3
79005: PPUSH
79006: LD_VAR 0 4
79010: PPUSH
79011: CALL_OW 1
79015: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79016: LD_ADDR_VAR 0 2
79020: PUSH
79021: LD_VAR 0 2
79025: PPUSH
79026: LD_INT 4
79028: PPUSH
79029: LD_VAR 0 2
79033: PUSH
79034: LD_INT 4
79036: ARRAY
79037: PUSH
79038: LD_VAR 0 4
79042: PLUS
79043: PPUSH
79044: CALL_OW 1
79048: ST_TO_ADDR
// end ;
79049: GO 78968
79051: POP
79052: POP
// end ;
79053: LD_VAR 0 2
79057: RET
// export function Length ( array ) ; begin
79058: LD_INT 0
79060: PPUSH
// result := array + 0 ;
79061: LD_ADDR_VAR 0 2
79065: PUSH
79066: LD_VAR 0 1
79070: PUSH
79071: LD_INT 0
79073: PLUS
79074: ST_TO_ADDR
// end ;
79075: LD_VAR 0 2
79079: RET
// export function PrepareArray ( array ) ; begin
79080: LD_INT 0
79082: PPUSH
// result := array diff 0 ;
79083: LD_ADDR_VAR 0 2
79087: PUSH
79088: LD_VAR 0 1
79092: PUSH
79093: LD_INT 0
79095: DIFF
79096: ST_TO_ADDR
// if not result [ 1 ] then
79097: LD_VAR 0 2
79101: PUSH
79102: LD_INT 1
79104: ARRAY
79105: NOT
79106: IFFALSE 79126
// result := Delete ( result , 1 ) ;
79108: LD_ADDR_VAR 0 2
79112: PUSH
79113: LD_VAR 0 2
79117: PPUSH
79118: LD_INT 1
79120: PPUSH
79121: CALL_OW 3
79125: ST_TO_ADDR
// end ;
79126: LD_VAR 0 2
79130: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79131: LD_INT 0
79133: PPUSH
79134: PPUSH
79135: PPUSH
79136: PPUSH
// sibRocketRange := 25 ;
79137: LD_ADDR_VAR 0 6
79141: PUSH
79142: LD_INT 25
79144: ST_TO_ADDR
// result := false ;
79145: LD_ADDR_VAR 0 4
79149: PUSH
79150: LD_INT 0
79152: ST_TO_ADDR
// for i := 0 to 5 do
79153: LD_ADDR_VAR 0 5
79157: PUSH
79158: DOUBLE
79159: LD_INT 0
79161: DEC
79162: ST_TO_ADDR
79163: LD_INT 5
79165: PUSH
79166: FOR_TO
79167: IFFALSE 79234
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79169: LD_VAR 0 1
79173: PPUSH
79174: LD_VAR 0 5
79178: PPUSH
79179: LD_VAR 0 6
79183: PPUSH
79184: CALL_OW 272
79188: PPUSH
79189: LD_VAR 0 2
79193: PPUSH
79194: LD_VAR 0 5
79198: PPUSH
79199: LD_VAR 0 6
79203: PPUSH
79204: CALL_OW 273
79208: PPUSH
79209: LD_VAR 0 3
79213: PPUSH
79214: CALL_OW 309
79218: IFFALSE 79232
// begin result := true ;
79220: LD_ADDR_VAR 0 4
79224: PUSH
79225: LD_INT 1
79227: ST_TO_ADDR
// exit ;
79228: POP
79229: POP
79230: GO 79236
// end ;
79232: GO 79166
79234: POP
79235: POP
// end ;
79236: LD_VAR 0 4
79240: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79241: LD_INT 0
79243: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79244: LD_VAR 0 1
79248: PPUSH
79249: LD_VAR 0 2
79253: PPUSH
79254: LD_INT 0
79256: PPUSH
79257: LD_INT 0
79259: PPUSH
79260: LD_INT 1
79262: PPUSH
79263: LD_INT 0
79265: PPUSH
79266: CALL_OW 587
// end ;
79270: LD_VAR 0 3
79274: RET
// export function CenterOnNow ( unit ) ; begin
79275: LD_INT 0
79277: PPUSH
// result := IsInUnit ( unit ) ;
79278: LD_ADDR_VAR 0 2
79282: PUSH
79283: LD_VAR 0 1
79287: PPUSH
79288: CALL_OW 310
79292: ST_TO_ADDR
// if not result then
79293: LD_VAR 0 2
79297: NOT
79298: IFFALSE 79310
// result := unit ;
79300: LD_ADDR_VAR 0 2
79304: PUSH
79305: LD_VAR 0 1
79309: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
79310: LD_VAR 0 1
79314: PPUSH
79315: CALL_OW 87
// end ;
79319: LD_VAR 0 2
79323: RET
// export function ComMoveHex ( unit , hex ) ; begin
79324: LD_INT 0
79326: PPUSH
// if not hex then
79327: LD_VAR 0 2
79331: NOT
79332: IFFALSE 79336
// exit ;
79334: GO 79389
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
79336: LD_VAR 0 2
79340: PUSH
79341: LD_INT 1
79343: ARRAY
79344: PPUSH
79345: LD_VAR 0 2
79349: PUSH
79350: LD_INT 2
79352: ARRAY
79353: PPUSH
79354: CALL_OW 428
79358: IFFALSE 79362
// exit ;
79360: GO 79389
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
79362: LD_VAR 0 1
79366: PPUSH
79367: LD_VAR 0 2
79371: PUSH
79372: LD_INT 1
79374: ARRAY
79375: PPUSH
79376: LD_VAR 0 2
79380: PUSH
79381: LD_INT 2
79383: ARRAY
79384: PPUSH
79385: CALL_OW 111
// end ;
79389: LD_VAR 0 3
79393: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
79394: LD_INT 0
79396: PPUSH
79397: PPUSH
79398: PPUSH
// if not unit or not enemy then
79399: LD_VAR 0 1
79403: NOT
79404: PUSH
79405: LD_VAR 0 2
79409: NOT
79410: OR
79411: IFFALSE 79415
// exit ;
79413: GO 79539
// x := GetX ( enemy ) ;
79415: LD_ADDR_VAR 0 4
79419: PUSH
79420: LD_VAR 0 2
79424: PPUSH
79425: CALL_OW 250
79429: ST_TO_ADDR
// y := GetY ( enemy ) ;
79430: LD_ADDR_VAR 0 5
79434: PUSH
79435: LD_VAR 0 2
79439: PPUSH
79440: CALL_OW 251
79444: ST_TO_ADDR
// if ValidHex ( x , y ) then
79445: LD_VAR 0 4
79449: PPUSH
79450: LD_VAR 0 5
79454: PPUSH
79455: CALL_OW 488
79459: IFFALSE 79539
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
79461: LD_VAR 0 2
79465: PPUSH
79466: CALL_OW 247
79470: PUSH
79471: LD_INT 3
79473: PUSH
79474: LD_INT 2
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: IN
79481: PUSH
79482: LD_VAR 0 1
79486: PPUSH
79487: CALL_OW 255
79491: PPUSH
79492: LD_VAR 0 2
79496: PPUSH
79497: CALL_OW 292
79501: AND
79502: IFFALSE 79520
// ComAttackUnit ( unit , enemy ) else
79504: LD_VAR 0 1
79508: PPUSH
79509: LD_VAR 0 2
79513: PPUSH
79514: CALL_OW 115
79518: GO 79539
// ComAgressiveMove ( unit , x , y ) ;
79520: LD_VAR 0 1
79524: PPUSH
79525: LD_VAR 0 4
79529: PPUSH
79530: LD_VAR 0 5
79534: PPUSH
79535: CALL_OW 114
// end ;
79539: LD_VAR 0 3
79543: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
79544: LD_INT 0
79546: PPUSH
79547: PPUSH
79548: PPUSH
// list := AreaToList ( area , 0 ) ;
79549: LD_ADDR_VAR 0 5
79553: PUSH
79554: LD_VAR 0 1
79558: PPUSH
79559: LD_INT 0
79561: PPUSH
79562: CALL_OW 517
79566: ST_TO_ADDR
// if not list then
79567: LD_VAR 0 5
79571: NOT
79572: IFFALSE 79576
// exit ;
79574: GO 79706
// if all then
79576: LD_VAR 0 2
79580: IFFALSE 79668
// begin for i := 1 to list [ 1 ] do
79582: LD_ADDR_VAR 0 4
79586: PUSH
79587: DOUBLE
79588: LD_INT 1
79590: DEC
79591: ST_TO_ADDR
79592: LD_VAR 0 5
79596: PUSH
79597: LD_INT 1
79599: ARRAY
79600: PUSH
79601: FOR_TO
79602: IFFALSE 79664
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
79604: LD_ADDR_VAR 0 3
79608: PUSH
79609: LD_VAR 0 3
79613: PPUSH
79614: LD_VAR 0 3
79618: PUSH
79619: LD_INT 1
79621: PLUS
79622: PPUSH
79623: LD_VAR 0 5
79627: PUSH
79628: LD_INT 1
79630: ARRAY
79631: PUSH
79632: LD_VAR 0 4
79636: ARRAY
79637: PUSH
79638: LD_VAR 0 5
79642: PUSH
79643: LD_INT 2
79645: ARRAY
79646: PUSH
79647: LD_VAR 0 4
79651: ARRAY
79652: PUSH
79653: EMPTY
79654: LIST
79655: LIST
79656: PPUSH
79657: CALL_OW 1
79661: ST_TO_ADDR
79662: GO 79601
79664: POP
79665: POP
// exit ;
79666: GO 79706
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
79668: LD_ADDR_VAR 0 3
79672: PUSH
79673: LD_VAR 0 5
79677: PUSH
79678: LD_INT 1
79680: ARRAY
79681: PUSH
79682: LD_INT 1
79684: ARRAY
79685: PUSH
79686: LD_VAR 0 5
79690: PUSH
79691: LD_INT 2
79693: ARRAY
79694: PUSH
79695: LD_INT 1
79697: ARRAY
79698: PUSH
79699: EMPTY
79700: LIST
79701: LIST
79702: PUSH
79703: EMPTY
79704: LIST
79705: ST_TO_ADDR
// end ;
79706: LD_VAR 0 3
79710: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
79711: LD_INT 0
79713: PPUSH
79714: PPUSH
// list := AreaToList ( area , 0 ) ;
79715: LD_ADDR_VAR 0 4
79719: PUSH
79720: LD_VAR 0 1
79724: PPUSH
79725: LD_INT 0
79727: PPUSH
79728: CALL_OW 517
79732: ST_TO_ADDR
// if not list then
79733: LD_VAR 0 4
79737: NOT
79738: IFFALSE 79742
// exit ;
79740: GO 79783
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
79742: LD_ADDR_VAR 0 3
79746: PUSH
79747: LD_VAR 0 4
79751: PUSH
79752: LD_INT 1
79754: ARRAY
79755: PUSH
79756: LD_INT 1
79758: ARRAY
79759: PUSH
79760: LD_VAR 0 4
79764: PUSH
79765: LD_INT 2
79767: ARRAY
79768: PUSH
79769: LD_INT 1
79771: ARRAY
79772: PUSH
79773: LD_VAR 0 2
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: LIST
79782: ST_TO_ADDR
// end ;
79783: LD_VAR 0 3
79787: RET
// export function First ( array ) ; begin
79788: LD_INT 0
79790: PPUSH
// if not array then
79791: LD_VAR 0 1
79795: NOT
79796: IFFALSE 79800
// exit ;
79798: GO 79814
// result := array [ 1 ] ;
79800: LD_ADDR_VAR 0 2
79804: PUSH
79805: LD_VAR 0 1
79809: PUSH
79810: LD_INT 1
79812: ARRAY
79813: ST_TO_ADDR
// end ;
79814: LD_VAR 0 2
79818: RET
// export function Last ( array ) ; begin
79819: LD_INT 0
79821: PPUSH
// if not array then
79822: LD_VAR 0 1
79826: NOT
79827: IFFALSE 79831
// exit ;
79829: GO 79847
// result := array [ array ] ;
79831: LD_ADDR_VAR 0 2
79835: PUSH
79836: LD_VAR 0 1
79840: PUSH
79841: LD_VAR 0 1
79845: ARRAY
79846: ST_TO_ADDR
// end ;
79847: LD_VAR 0 2
79851: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
79852: LD_INT 0
79854: PPUSH
79855: PPUSH
// result := [ ] ;
79856: LD_ADDR_VAR 0 5
79860: PUSH
79861: EMPTY
79862: ST_TO_ADDR
// if not array then
79863: LD_VAR 0 1
79867: NOT
79868: IFFALSE 79872
// exit ;
79870: GO 79984
// for i := 1 to array do
79872: LD_ADDR_VAR 0 6
79876: PUSH
79877: DOUBLE
79878: LD_INT 1
79880: DEC
79881: ST_TO_ADDR
79882: LD_VAR 0 1
79886: PUSH
79887: FOR_TO
79888: IFFALSE 79982
// if array [ i ] [ index ] = value then
79890: LD_VAR 0 1
79894: PUSH
79895: LD_VAR 0 6
79899: ARRAY
79900: PUSH
79901: LD_VAR 0 2
79905: ARRAY
79906: PUSH
79907: LD_VAR 0 3
79911: EQUAL
79912: IFFALSE 79980
// begin if indexColumn then
79914: LD_VAR 0 4
79918: IFFALSE 79954
// result := Join ( result , array [ i ] [ indexColumn ] ) else
79920: LD_ADDR_VAR 0 5
79924: PUSH
79925: LD_VAR 0 5
79929: PPUSH
79930: LD_VAR 0 1
79934: PUSH
79935: LD_VAR 0 6
79939: ARRAY
79940: PUSH
79941: LD_VAR 0 4
79945: ARRAY
79946: PPUSH
79947: CALL 75322 0 2
79951: ST_TO_ADDR
79952: GO 79980
// result := Join ( result , array [ i ] ) ;
79954: LD_ADDR_VAR 0 5
79958: PUSH
79959: LD_VAR 0 5
79963: PPUSH
79964: LD_VAR 0 1
79968: PUSH
79969: LD_VAR 0 6
79973: ARRAY
79974: PPUSH
79975: CALL 75322 0 2
79979: ST_TO_ADDR
// end ;
79980: GO 79887
79982: POP
79983: POP
// end ;
79984: LD_VAR 0 5
79988: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
79989: LD_INT 0
79991: PPUSH
79992: PPUSH
79993: PPUSH
// if btype = b_depot then
79994: LD_VAR 0 2
79998: PUSH
79999: LD_INT 0
80001: EQUAL
80002: IFFALSE 80014
// begin result := true ;
80004: LD_ADDR_VAR 0 3
80008: PUSH
80009: LD_INT 1
80011: ST_TO_ADDR
// exit ;
80012: GO 80130
// end ; pom := GetBase ( depot ) ;
80014: LD_ADDR_VAR 0 4
80018: PUSH
80019: LD_VAR 0 1
80023: PPUSH
80024: CALL_OW 274
80028: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
80029: LD_ADDR_VAR 0 5
80033: PUSH
80034: LD_VAR 0 2
80038: PPUSH
80039: LD_VAR 0 1
80043: PPUSH
80044: CALL_OW 248
80048: PPUSH
80049: CALL_OW 450
80053: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
80054: LD_ADDR_VAR 0 3
80058: PUSH
80059: LD_VAR 0 4
80063: PPUSH
80064: LD_INT 1
80066: PPUSH
80067: CALL_OW 275
80071: PUSH
80072: LD_VAR 0 5
80076: PUSH
80077: LD_INT 1
80079: ARRAY
80080: GREATEREQUAL
80081: PUSH
80082: LD_VAR 0 4
80086: PPUSH
80087: LD_INT 2
80089: PPUSH
80090: CALL_OW 275
80094: PUSH
80095: LD_VAR 0 5
80099: PUSH
80100: LD_INT 2
80102: ARRAY
80103: GREATEREQUAL
80104: AND
80105: PUSH
80106: LD_VAR 0 4
80110: PPUSH
80111: LD_INT 3
80113: PPUSH
80114: CALL_OW 275
80118: PUSH
80119: LD_VAR 0 5
80123: PUSH
80124: LD_INT 3
80126: ARRAY
80127: GREATEREQUAL
80128: AND
80129: ST_TO_ADDR
// end ;
80130: LD_VAR 0 3
80134: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
80135: LD_INT 0
80137: PPUSH
// if not vehicles or not parkingPoint then
80138: LD_VAR 0 1
80142: NOT
80143: PUSH
80144: LD_VAR 0 2
80148: NOT
80149: OR
80150: IFFALSE 80154
// exit ;
80152: GO 80252
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
80154: LD_ADDR_VAR 0 1
80158: PUSH
80159: LD_VAR 0 1
80163: PPUSH
80164: LD_INT 50
80166: PUSH
80167: EMPTY
80168: LIST
80169: PUSH
80170: LD_INT 3
80172: PUSH
80173: LD_INT 92
80175: PUSH
80176: LD_VAR 0 2
80180: PUSH
80181: LD_INT 1
80183: ARRAY
80184: PUSH
80185: LD_VAR 0 2
80189: PUSH
80190: LD_INT 2
80192: ARRAY
80193: PUSH
80194: LD_INT 8
80196: PUSH
80197: EMPTY
80198: LIST
80199: LIST
80200: LIST
80201: LIST
80202: PUSH
80203: EMPTY
80204: LIST
80205: LIST
80206: PUSH
80207: EMPTY
80208: LIST
80209: LIST
80210: PPUSH
80211: CALL_OW 72
80215: ST_TO_ADDR
// if not vehicles then
80216: LD_VAR 0 1
80220: NOT
80221: IFFALSE 80225
// exit ;
80223: GO 80252
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
80225: LD_VAR 0 1
80229: PPUSH
80230: LD_VAR 0 2
80234: PUSH
80235: LD_INT 1
80237: ARRAY
80238: PPUSH
80239: LD_VAR 0 2
80243: PUSH
80244: LD_INT 2
80246: ARRAY
80247: PPUSH
80248: CALL_OW 111
// end ; end_of_file
80252: LD_VAR 0 3
80256: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80257: LD_VAR 0 1
80261: PUSH
80262: LD_INT 200
80264: DOUBLE
80265: GREATEREQUAL
80266: IFFALSE 80274
80268: LD_INT 299
80270: DOUBLE
80271: LESSEQUAL
80272: IFTRUE 80276
80274: GO 80308
80276: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80277: LD_VAR 0 1
80281: PPUSH
80282: LD_VAR 0 2
80286: PPUSH
80287: LD_VAR 0 3
80291: PPUSH
80292: LD_VAR 0 4
80296: PPUSH
80297: LD_VAR 0 5
80301: PPUSH
80302: CALL 33113 0 5
80306: GO 80385
80308: LD_INT 300
80310: DOUBLE
80311: GREATEREQUAL
80312: IFFALSE 80320
80314: LD_INT 399
80316: DOUBLE
80317: LESSEQUAL
80318: IFTRUE 80322
80320: GO 80384
80322: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80323: LD_VAR 0 1
80327: PPUSH
80328: LD_VAR 0 2
80332: PPUSH
80333: LD_VAR 0 3
80337: PPUSH
80338: LD_VAR 0 4
80342: PPUSH
80343: LD_VAR 0 5
80347: PPUSH
80348: LD_VAR 0 6
80352: PPUSH
80353: LD_VAR 0 7
80357: PPUSH
80358: LD_VAR 0 8
80362: PPUSH
80363: LD_VAR 0 9
80367: PPUSH
80368: LD_VAR 0 10
80372: PPUSH
80373: LD_VAR 0 11
80377: PPUSH
80378: CALL 29438 0 11
80382: GO 80385
80384: POP
// end ;
80385: PPOPN 11
80387: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80388: LD_VAR 0 1
80392: PPUSH
80393: LD_VAR 0 2
80397: PPUSH
80398: LD_VAR 0 3
80402: PPUSH
80403: LD_VAR 0 4
80407: PPUSH
80408: LD_VAR 0 5
80412: PPUSH
80413: CALL 32849 0 5
// end ; end_of_file
80417: PPOPN 5
80419: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80420: LD_VAR 0 1
80424: PPUSH
80425: LD_VAR 0 2
80429: PPUSH
80430: LD_VAR 0 3
80434: PPUSH
80435: LD_VAR 0 4
80439: PPUSH
80440: LD_VAR 0 5
80444: PPUSH
80445: LD_VAR 0 6
80449: PPUSH
80450: CALL 17090 0 6
// end ;
80454: PPOPN 6
80456: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80457: LD_INT 0
80459: PPUSH
// begin if not units then
80460: LD_VAR 0 1
80464: NOT
80465: IFFALSE 80469
// exit ;
80467: GO 80469
// end ;
80469: PPOPN 7
80471: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80472: CALL 16994 0 0
// end ;
80476: PPOPN 1
80478: END
