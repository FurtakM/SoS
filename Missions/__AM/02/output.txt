// export JMM , Bobby , Cyrus ; export Lisa , Khatam , Brian , Jerry , Mikhail ; export Powell ; export hpJMM , hpBobby , hpCyrus ; export RuSoldMinLevel , RuSoldMaxLevel ; export cargo1 , cargo2 ; export driver1 , driver2 ; export Natasza ; export cargoEscape ; export mikhailStatus , mikhailInBase , mikhailDepot ; export northBaseDefenders , southBaseDefenders , attackGroup ; export lastBattle ; export cargoRespawn , cargoSee ; export tigersRespawn ; export deadsCounter ; export spotCorpses ; export mission_prefix , debug ; starting begin RandomizeAll ;
   0: CALL_OW 11
// ResetFog ;
   4: CALL_OW 335
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 77 0 0
// if debug then
  19: LD_EXP 34
  23: IFFALSE 40
// begin Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// end ; PrepareDifficulty ;
  40: CALL 10281 0 0
// PrepareRussianCommander ;
  44: CALL 11746 0 0
// PrepareSouthBase ;
  48: CALL 11842 0 0
// PrepareNorthBase ;
  52: CALL 12180 0 0
// PrepareOtherRussians ;
  56: CALL 12575 0 0
// PrepareHeroes ;
  60: CALL 10602 0 0
// PrepareLisSquad ;
  64: CALL 10972 0 0
// PrepareOtherAmericans ;
  68: CALL 11285 0 0
// Action ;
  72: CALL 329 0 0
// end ;
  76: END
// function Init ; begin
  77: LD_INT 0
  79: PPUSH
// debug := false ;
  80: LD_ADDR_EXP 34
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// mission_prefix := 02_ ;
  88: LD_ADDR_EXP 33
  92: PUSH
  93: LD_STRING 02_
  95: ST_TO_ADDR
// RuSoldMinLevel := 0 ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// RuSoldMaxLevel := 0 ;
 104: LD_ADDR_EXP 14
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// hpJMM := 0 ;
 112: LD_ADDR_EXP 10
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// hpBobby := 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hpCyrus := 0 ;
 128: LD_ADDR_EXP 12
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// cargoEscape := 0 ;
 136: LD_ADDR_EXP 20
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// mikhailStatus := 0 ;
 144: LD_ADDR_EXP 21
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// mikhailInBase := 0 ;
 152: LD_ADDR_EXP 22
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// mikhailDepot := 0 ;
 160: LD_ADDR_EXP 23
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// tigersRespawn := 0 ;
 168: LD_ADDR_EXP 30
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// cargoRespawn := 0 ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cargoSee := 0 ;
 184: LD_ADDR_EXP 29
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// lastBattle := 0 ;
 192: LD_ADDR_EXP 27
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// deadsCounter := 0 ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// spotCorpses := 0 ;
 208: LD_ADDR_EXP 32
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// southBaseDefenders := [ ] ;
 216: LD_ADDR_EXP 25
 220: PUSH
 221: EMPTY
 222: ST_TO_ADDR
// northBaseDefenders := [ ] ;
 223: LD_ADDR_EXP 24
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// attackGroup := [ ] ;
 230: LD_ADDR_EXP 26
 234: PUSH
 235: EMPTY
 236: ST_TO_ADDR
// end ;
 237: LD_VAR 0 1
 241: RET
// every 0 0$1 trigger debug do var i ;
 242: LD_EXP 34
 246: IFFALSE 326
 248: GO 250
 250: DISABLE
 251: LD_INT 0
 253: PPUSH
// begin enable ;
 254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
 255: LD_ADDR_VAR 0 1
 259: PUSH
 260: LD_INT 22
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 21
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 3
 282: PUSH
 283: LD_INT 24
 285: PUSH
 286: LD_INT 1000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 324
// SetLives ( i , 1000 ) ;
 310: LD_VAR 0 1
 314: PPUSH
 315: LD_INT 1000
 317: PPUSH
 318: CALL_OW 234
 322: GO 307
 324: POP
 325: POP
// end ; end_of_file
 326: PPOPN 1
 328: END
// export function Action ; var tmp ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// InGameOn ;
 333: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
 337: LD_EXP 1
 341: PPUSH
 342: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff [ Lisa ] ;
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 4
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: LD_EXP 4
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: ST_TO_ADDR
// if Cyrus and Bobby then
 389: LD_EXP 3
 393: PUSH
 394: LD_EXP 2
 398: AND
 399: IFFALSE 729
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 401: LD_EXP 3
 405: PPUSH
 406: LD_INT 43
 408: PPUSH
 409: LD_INT 72
 411: PPUSH
 412: CALL_OW 111
// ComMoveXY ( Bobby , 44 , 70 ) ;
 416: LD_EXP 2
 420: PPUSH
 421: LD_INT 44
 423: PPUSH
 424: LD_INT 70
 426: PPUSH
 427: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 46
 438: PPUSH
 439: LD_INT 73
 441: PPUSH
 442: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 446: LD_EXP 3
 450: PPUSH
 451: LD_STRING D1a-Cyrus-1
 453: PPUSH
 454: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 458: LD_EXP 1
 462: PPUSH
 463: LD_STRING D1a-JMM-1
 465: PPUSH
 466: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 37
 477: PPUSH
 478: LD_INT 66
 480: PPUSH
 481: CALL_OW 171
// AddComMoveXY ( Bobby , 41 , 67 ) ;
 485: LD_EXP 2
 489: PPUSH
 490: LD_INT 41
 492: PPUSH
 493: LD_INT 67
 495: PPUSH
 496: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 38
 507: PPUSH
 508: LD_INT 64
 510: PPUSH
 511: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
 515: LD_EXP 2
 519: PPUSH
 520: LD_STRING D1a-Bobby-2
 522: PPUSH
 523: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 527: LD_EXP 3
 531: PPUSH
 532: LD_INT 35
 534: PPUSH
 535: LD_INT 62
 537: PPUSH
 538: CALL_OW 171
// AddComMoveXY ( Bobby , 32 , 60 ) ;
 542: LD_EXP 2
 546: PPUSH
 547: LD_INT 32
 549: PPUSH
 550: LD_INT 60
 552: PPUSH
 553: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 35
 564: PPUSH
 565: LD_INT 60
 567: PPUSH
 568: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 572: LD_EXP 1
 576: PPUSH
 577: LD_STRING D1a-JMM-2
 579: PPUSH
 580: CALL_OW 88
// ComWalk ( Lisa ) ;
 584: LD_EXP 4
 588: PPUSH
 589: CALL_OW 138
// wait ( 0 0$1 ) ;
 593: LD_INT 35
 595: PPUSH
 596: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 600: LD_EXP 4
 604: PPUSH
 605: LD_EXP 1
 609: PPUSH
 610: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus , Bobby ] , Lisa ) ;
 614: LD_EXP 1
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_EXP 2
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: PPUSH
 634: LD_EXP 4
 638: PPUSH
 639: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 1
 650: ARRAY
 651: PPUSH
 652: LD_INT 33
 654: PPUSH
 655: LD_INT 55
 657: PPUSH
 658: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 2
 669: ARRAY
 670: PPUSH
 671: LD_INT 30
 673: PPUSH
 674: LD_INT 54
 676: PPUSH
 677: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 1
 688: ARRAY
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
 699: LD_VAR 0 2
 703: PUSH
 704: LD_INT 2
 706: ARRAY
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 717: LD_EXP 4
 721: PPUSH
 722: LD_STRING D1a-Lisa-2
 724: PPUSH
 725: CALL_OW 88
// end ; if Cyrus and not Bobby then
 729: LD_EXP 3
 733: PUSH
 734: LD_EXP 2
 738: NOT
 739: AND
 740: IFFALSE 945
// begin ComMoveXY ( Cyrus , 43 , 72 ) ;
 742: LD_EXP 3
 746: PPUSH
 747: LD_INT 43
 749: PPUSH
 750: LD_INT 72
 752: PPUSH
 753: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 757: LD_EXP 1
 761: PPUSH
 762: LD_INT 46
 764: PPUSH
 765: LD_INT 73
 767: PPUSH
 768: CALL_OW 111
// Say ( Cyrus , D1a-Cyrus-1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_STRING D1a-Cyrus-1
 779: PPUSH
 780: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING D1a-JMM-1
 791: PPUSH
 792: CALL_OW 88
// AddComMoveXY ( Cyrus , 37 , 66 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 37
 803: PPUSH
 804: LD_INT 66
 806: PPUSH
 807: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
 811: LD_EXP 1
 815: PPUSH
 816: LD_INT 38
 818: PPUSH
 819: LD_INT 64
 821: PPUSH
 822: CALL_OW 171
// Say ( Cyrus , D1a-Cyrus-2 ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_STRING D1a-Cyrus-2
 833: PPUSH
 834: CALL_OW 88
// AddComMoveXY ( Cyrus , 35 , 62 ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 35
 845: PPUSH
 846: LD_INT 62
 848: PPUSH
 849: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
 853: LD_EXP 1
 857: PPUSH
 858: LD_INT 35
 860: PPUSH
 861: LD_INT 60
 863: PPUSH
 864: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
 868: LD_EXP 1
 872: PPUSH
 873: LD_STRING D1a-JMM-2
 875: PPUSH
 876: CALL_OW 88
// ComWalk ( Lisa ) ;
 880: LD_EXP 4
 884: PPUSH
 885: CALL_OW 138
// wait ( 0 0$1 ) ;
 889: LD_INT 35
 891: PPUSH
 892: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
 896: LD_EXP 4
 900: PPUSH
 901: LD_EXP 1
 905: PPUSH
 906: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
 910: LD_EXP 4
 914: PPUSH
 915: LD_STRING D1a-Lisa-2
 917: PPUSH
 918: CALL_OW 88
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
 922: LD_EXP 1
 926: PUSH
 927: LD_EXP 3
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PPUSH
 936: LD_EXP 4
 940: PPUSH
 941: CALL_OW 119
// end ; if not Cyrus and Bobby then
 945: LD_EXP 3
 949: NOT
 950: PUSH
 951: LD_EXP 2
 955: AND
 956: IFFALSE 1235
// begin ComMoveXY ( Bobby , 44 , 70 ) ;
 958: LD_EXP 2
 962: PPUSH
 963: LD_INT 44
 965: PPUSH
 966: LD_INT 70
 968: PPUSH
 969: CALL_OW 111
// ComMoveXY ( JMM , 46 , 73 ) ;
 973: LD_EXP 1
 977: PPUSH
 978: LD_INT 46
 980: PPUSH
 981: LD_INT 73
 983: PPUSH
 984: CALL_OW 111
// Say ( Bobby , D1a-Bobby-1 ) ;
 988: LD_EXP 2
 992: PPUSH
 993: LD_STRING D1a-Bobby-1
 995: PPUSH
 996: CALL_OW 88
// Say ( JMM , D1a-JMM-1 ) ;
1000: LD_EXP 1
1004: PPUSH
1005: LD_STRING D1a-JMM-1
1007: PPUSH
1008: CALL_OW 88
// AddComMoveXY ( Bobby , 37 , 66 ) ;
1012: LD_EXP 2
1016: PPUSH
1017: LD_INT 37
1019: PPUSH
1020: LD_INT 66
1022: PPUSH
1023: CALL_OW 171
// AddComMoveXY ( JMM , 38 , 64 ) ;
1027: LD_EXP 1
1031: PPUSH
1032: LD_INT 38
1034: PPUSH
1035: LD_INT 64
1037: PPUSH
1038: CALL_OW 171
// Say ( Bobby , D1a-Bobby-2 ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_STRING D1a-Bobby-2
1049: PPUSH
1050: CALL_OW 88
// AddComMoveXY ( Bobby , 35 , 62 ) ;
1054: LD_EXP 2
1058: PPUSH
1059: LD_INT 35
1061: PPUSH
1062: LD_INT 62
1064: PPUSH
1065: CALL_OW 171
// AddComMoveXY ( JMM , 35 , 60 ) ;
1069: LD_EXP 1
1073: PPUSH
1074: LD_INT 35
1076: PPUSH
1077: LD_INT 60
1079: PPUSH
1080: CALL_OW 171
// Say ( JMM , D1a-JMM-2 ) ;
1084: LD_EXP 1
1088: PPUSH
1089: LD_STRING D1a-JMM-2
1091: PPUSH
1092: CALL_OW 88
// ComWalk ( Lisa ) ;
1096: LD_EXP 4
1100: PPUSH
1101: CALL_OW 138
// wait ( 0 0$1 ) ;
1105: LD_INT 35
1107: PPUSH
1108: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1112: LD_EXP 4
1116: PPUSH
1117: LD_EXP 1
1121: PPUSH
1122: CALL_OW 179
// ComTurnUnit ( [ JMM , Cyrus ] , Lisa ) ;
1126: LD_EXP 1
1130: PUSH
1131: LD_EXP 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: LD_EXP 4
1144: PPUSH
1145: CALL_OW 119
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: LD_INT 33
1160: PPUSH
1161: LD_INT 55
1163: PPUSH
1164: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: PPUSH
1177: LD_INT 30
1179: PPUSH
1180: LD_INT 54
1182: PPUSH
1183: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: LD_EXP 1
1200: PPUSH
1201: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_EXP 1
1218: PPUSH
1219: CALL_OW 179
// Say ( Lisa , D1a-Lisa-2 ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_STRING D1a-Lisa-2
1230: PPUSH
1231: CALL_OW 88
// end ; if not Cyrus and not Bobby then
1235: LD_EXP 3
1239: NOT
1240: PUSH
1241: LD_EXP 2
1245: NOT
1246: AND
1247: IFFALSE 1461
// begin ComMoveXY ( JMM , 37 , 66 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_INT 37
1256: PPUSH
1257: LD_INT 66
1259: PPUSH
1260: CALL_OW 111
// Say ( JMM , D1b-JMM-1 ) ;
1264: LD_EXP 1
1268: PPUSH
1269: LD_STRING D1b-JMM-1
1271: PPUSH
1272: CALL_OW 88
// ComCrawl ( JMM ) ;
1276: LD_EXP 1
1280: PPUSH
1281: CALL_OW 137
// AddComMoveXY ( JMM , 35 , 60 ) ;
1285: LD_EXP 1
1289: PPUSH
1290: LD_INT 35
1292: PPUSH
1293: LD_INT 60
1295: PPUSH
1296: CALL_OW 171
// wait ( 0 0$8 ) ;
1300: LD_INT 280
1302: PPUSH
1303: CALL_OW 67
// Say ( JMM , D1b-JMM-1a ) ;
1307: LD_EXP 1
1311: PPUSH
1312: LD_STRING D1b-JMM-1a
1314: PPUSH
1315: CALL_OW 88
// ComWalk ( [ JMM , Lisa ] ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 4
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 138
// wait ( 0 0$1 ) ;
1337: LD_INT 35
1339: PPUSH
1340: CALL_OW 67
// AddComTurnUnit ( Lisa , JMM ) ;
1344: LD_EXP 4
1348: PPUSH
1349: LD_EXP 1
1353: PPUSH
1354: CALL_OW 179
// AddComTurnUnit ( [ JMM ] , Lisa ) ;
1358: LD_EXP 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: PPUSH
1366: LD_EXP 4
1370: PPUSH
1371: CALL_OW 179
// ComMoveXY ( tmp [ 1 ] , 33 , 55 ) ;
1375: LD_VAR 0 2
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_INT 33
1386: PPUSH
1387: LD_INT 55
1389: PPUSH
1390: CALL_OW 111
// ComMoveXY ( tmp [ 2 ] , 30 , 54 ) ;
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 2
1401: ARRAY
1402: PPUSH
1403: LD_INT 30
1405: PPUSH
1406: LD_INT 54
1408: PPUSH
1409: CALL_OW 111
// AddComTurnUnit ( tmp [ 1 ] , JMM ) ;
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: LD_EXP 1
1426: PPUSH
1427: CALL_OW 179
// AddComTurnUnit ( tmp [ 2 ] , JMM ) ;
1431: LD_VAR 0 2
1435: PUSH
1436: LD_INT 2
1438: ARRAY
1439: PPUSH
1440: LD_EXP 1
1444: PPUSH
1445: CALL_OW 179
// Say ( Lisa , D1b-Lisa-1 ) ;
1449: LD_EXP 4
1453: PPUSH
1454: LD_STRING D1b-Lisa-1
1456: PPUSH
1457: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
1461: LD_EXP 1
1465: PPUSH
1466: LD_STRING D1-JMM-1
1468: PPUSH
1469: CALL_OW 88
// Say ( Lisa , D1-Lisa-1 ) ;
1473: LD_EXP 4
1477: PPUSH
1478: LD_STRING D1-Lisa-1
1480: PPUSH
1481: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
1485: LD_EXP 1
1489: PPUSH
1490: LD_STRING D1-JMM-2
1492: PPUSH
1493: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
1497: LD_EXP 9
1501: PPUSH
1502: LD_STRING D1-Pow-2
1504: PPUSH
1505: CALL_OW 94
// if Cyrus then
1509: LD_EXP 3
1513: IFFALSE 1539
// begin Say ( Cyrus , D1-Cyrus-2 ) ;
1515: LD_EXP 3
1519: PPUSH
1520: LD_STRING D1-Cyrus-2
1522: PPUSH
1523: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1-JMM-3
1534: PPUSH
1535: CALL_OW 88
// end ; SayRadio ( Powell , D1-Pow-3 ) ;
1539: LD_EXP 9
1543: PPUSH
1544: LD_STRING D1-Pow-3
1546: PPUSH
1547: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
1551: LD_EXP 1
1555: PPUSH
1556: LD_STRING D1-JMM-4
1558: PPUSH
1559: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
1563: LD_EXP 9
1567: PPUSH
1568: LD_STRING D1-Pow-4
1570: PPUSH
1571: CALL_OW 94
// SayRadio ( Powell , D1-Pow-4a ) ;
1575: LD_EXP 9
1579: PPUSH
1580: LD_STRING D1-Pow-4a
1582: PPUSH
1583: CALL_OW 94
// if Cyrus then
1587: LD_EXP 3
1591: IFFALSE 1605
// Say ( Cyrus , D1-Cyrus-4 ) ;
1593: LD_EXP 3
1597: PPUSH
1598: LD_STRING D1-Cyrus-4
1600: PPUSH
1601: CALL_OW 88
// if Bobby then
1605: LD_EXP 2
1609: IFFALSE 1647
// begin Say ( Bobby , D1-Bobby-4 ) ;
1611: LD_EXP 2
1615: PPUSH
1616: LD_STRING D1-Bobby-4
1618: PPUSH
1619: CALL_OW 88
// Say ( Lisa , D1-Lisa-4 ) ;
1623: LD_EXP 4
1627: PPUSH
1628: LD_STRING D1-Lisa-4
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D1-JMM-5
1642: PPUSH
1643: CALL_OW 88
// end ; InGameOff ;
1647: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff [ Brian , Jerry ] , 1 ) ;
1651: LD_INT 22
1653: PUSH
1654: LD_INT 4
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: PUSH
1671: LD_EXP 7
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: DIFF
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1688: LD_STRING M1
1690: PPUSH
1691: CALL_OW 337
// SaveForQuickRestart ;
1695: CALL_OW 22
// end ;
1699: LD_VAR 0 1
1703: RET
// every 0 0$1 trigger FilterUnitsInArea ( PaulTriggerArea , [ f_side , 1 ] ) > 0 do
1704: LD_INT 7
1706: PPUSH
1707: LD_INT 22
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 70
1721: PUSH
1722: LD_INT 0
1724: GREATER
1725: IFFALSE 2138
1727: GO 1729
1729: DISABLE
// begin InGameOn ;
1730: CALL_OW 8
// ComHold ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 1
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PPUSH
1763: CALL_OW 140
// CenterOnXY ( 24 , 32 ) ;
1767: LD_INT 24
1769: PPUSH
1770: LD_INT 32
1772: PPUSH
1773: CALL_OW 84
// PlaceUnitArea ( Khatam , PaulSpawn , true ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_INT 4
1784: PPUSH
1785: LD_INT 1
1787: PPUSH
1788: CALL_OW 49
// SetClass ( Khatam , 4 ) ;
1792: LD_EXP 5
1796: PPUSH
1797: LD_INT 4
1799: PPUSH
1800: CALL_OW 336
// wait ( 0 0$1 ) ;
1804: LD_INT 35
1806: PPUSH
1807: CALL_OW 67
// ComMoveXY ( Khatam , 27 , 38 ) ;
1811: LD_EXP 5
1815: PPUSH
1816: LD_INT 27
1818: PPUSH
1819: LD_INT 38
1821: PPUSH
1822: CALL_OW 111
// AddComTurnUnit ( Khatam , JMM ) ;
1826: LD_EXP 5
1830: PPUSH
1831: LD_EXP 1
1835: PPUSH
1836: CALL_OW 179
// ComTurnUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ Khatam ] , Khatam ) ;
1840: LD_INT 22
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 21
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: DIFF
1877: PPUSH
1878: LD_EXP 5
1882: PPUSH
1883: CALL_OW 119
// wait ( 0 0$1 ) ;
1887: LD_INT 35
1889: PPUSH
1890: CALL_OW 67
// Say ( Khatam , D2a-Khat-1 ) ;
1894: LD_EXP 5
1898: PPUSH
1899: LD_STRING D2a-Khat-1
1901: PPUSH
1902: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1906: LD_EXP 1
1910: PPUSH
1911: LD_STRING D2a-JMM-1
1913: PPUSH
1914: CALL_OW 88
// Say ( Khatam , D2a-Khat-2 ) ;
1918: LD_EXP 5
1922: PPUSH
1923: LD_STRING D2a-Khat-2
1925: PPUSH
1926: CALL_OW 88
// Say ( JMM , D2a-JMM-2 ) ;
1930: LD_EXP 1
1934: PPUSH
1935: LD_STRING D2a-JMM-2
1937: PPUSH
1938: CALL_OW 88
// Say ( Khatam , D2a-Khat-3 ) ;
1942: LD_EXP 5
1946: PPUSH
1947: LD_STRING D2a-Khat-3
1949: PPUSH
1950: CALL_OW 88
// Say ( JMM , D2a-JMM-3 ) ;
1954: LD_EXP 1
1958: PPUSH
1959: LD_STRING D2a-JMM-3
1961: PPUSH
1962: CALL_OW 88
// Say ( Khatam , D2a-Khat-4 ) ;
1966: LD_EXP 5
1970: PPUSH
1971: LD_STRING D2a-Khat-4
1973: PPUSH
1974: CALL_OW 88
// Say ( JMM , D2a-JMM-4 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING D2a-JMM-4
1985: PPUSH
1986: CALL_OW 88
// Say ( Khatam , D2a-Khat-5 ) ;
1990: LD_EXP 5
1994: PPUSH
1995: LD_STRING D2a-Khat-5
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM , D2a-JMM-5 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING D2a-JMM-5
2009: PPUSH
2010: CALL_OW 88
// InGameOff ;
2014: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 800 ] ] ] ) then
2018: LD_INT 22
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 21
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 24
2043: PUSH
2044: LD_INT 800
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: IFFALSE 2138
// begin ComHeal ( Khatam , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) ;
2066: LD_EXP 5
2070: PPUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 21
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 1000
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL_OW 69
2117: PUSH
2118: LD_INT 1
2120: ARRAY
2121: PPUSH
2122: CALL_OW 128
// Say ( Khatam , D2b-Khat-1 ) ;
2126: LD_EXP 5
2130: PPUSH
2131: LD_STRING D2b-Khat-1
2133: PPUSH
2134: CALL_OW 88
// end ; end ;
2138: END
// every 0 0$1 trigger FilterUnitsInArea ( DeadTriggerArea , [ f_side , 1 ] ) do var i , distanceTab , min , tmp , p ;
2139: LD_INT 15
2141: PPUSH
2142: LD_INT 22
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: IFFALSE 3353
2158: GO 2160
2160: DISABLE
2161: LD_INT 0
2163: PPUSH
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// begin distanceTab = [ [ 999 , 999 ] ] ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 999
2175: PUSH
2176: LD_INT 999
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam ] ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: PUSH
2220: LD_EXP 1
2224: PUSH
2225: LD_EXP 2
2229: PUSH
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 4
2239: PUSH
2240: LD_EXP 5
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: DIFF
2252: ST_TO_ADDR
// PrepareDeadSoldiers ;
2253: CALL 11427 0 0
// spotCorpses = 1 ;
2257: LD_ADDR_EXP 32
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2265: LD_INT 70
2267: PPUSH
2268: CALL_OW 67
// InGameOn ;
2272: CALL_OW 8
// CenterOnXY ( 23 , 12 ) ;
2276: LD_INT 23
2278: PPUSH
2279: LD_INT 12
2281: PPUSH
2282: CALL_OW 84
// min = distanceTab [ 1 ] [ 2 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 2
2302: ARRAY
2303: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Khatam ] do
2304: LD_ADDR_VAR 0 1
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 1
2342: PUSH
2343: LD_EXP 5
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: DIFF
2352: PUSH
2353: FOR_IN
2354: IFFALSE 2405
// if IsOK ( i ) then
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 302
2365: IFFALSE 2403
// distanceTab = distanceTab ^ [ [ i , GetDistUnitArea ( i , DeadsSpawn ) ] ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_INT 16
2389: PPUSH
2390: CALL_OW 299
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: ST_TO_ADDR
2403: GO 2353
2405: POP
2406: POP
// for i = 2 to distanceTab do
2407: LD_ADDR_VAR 0 1
2411: PUSH
2412: DOUBLE
2413: LD_INT 2
2415: DEC
2416: ST_TO_ADDR
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2469
// if distanceTab [ i ] [ 2 ] < min then
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 3
2444: LESS
2445: IFFALSE 2467
// min = distanceTab [ i ] [ 2 ] ;
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_VAR 0 1
2461: ARRAY
2462: PUSH
2463: LD_INT 2
2465: ARRAY
2466: ST_TO_ADDR
2467: GO 2422
2469: POP
2470: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
2471: LD_ADDR_VAR 0 1
2475: PUSH
2476: LD_INT 22
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 21
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: LD_EXP 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: DIFF
2513: PUSH
2514: FOR_IN
2515: IFFALSE 2585
// begin ComMoveToArea ( i , DeadCutscene ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_INT 28
2524: PPUSH
2525: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
2529: LD_EXP 1
2533: PPUSH
2534: LD_INT 30
2536: PPUSH
2537: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
2541: LD_VAR 0 1
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 11
2551: PPUSH
2552: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
2556: LD_EXP 1
2560: PPUSH
2561: LD_INT 23
2563: PPUSH
2564: LD_INT 11
2566: PPUSH
2567: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
2571: LD_EXP 35
2575: PPUSH
2576: LD_INT 250
2578: PPUSH
2579: CALL_OW 234
// end ;
2583: GO 2514
2585: POP
2586: POP
// for i = 2 to distanceTab do
2587: LD_ADDR_VAR 0 1
2591: PUSH
2592: DOUBLE
2593: LD_INT 2
2595: DEC
2596: ST_TO_ADDR
2597: LD_VAR 0 2
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2989
// begin if distanceTab [ i ] [ 2 ] = min then
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 1
2614: ARRAY
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PUSH
2620: LD_VAR 0 3
2624: EQUAL
2625: IFFALSE 2987
// begin if distanceTab [ i ] [ 1 ] = Bobby then
2627: LD_VAR 0 2
2631: PUSH
2632: LD_VAR 0 1
2636: ARRAY
2637: PUSH
2638: LD_INT 1
2640: ARRAY
2641: PUSH
2642: LD_EXP 2
2646: EQUAL
2647: IFFALSE 2661
// Say ( Bobby , DCorpses-Bobby-1 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_STRING DCorpses-Bobby-1
2656: PPUSH
2657: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Cyrus then
2661: LD_VAR 0 2
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PUSH
2676: LD_EXP 3
2680: EQUAL
2681: IFFALSE 2695
// Say ( Cyrus , DCorpses-Cyrus-1 ) ;
2683: LD_EXP 3
2687: PPUSH
2688: LD_STRING DCorpses-Cyrus-1
2690: PPUSH
2691: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = Lisa then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_VAR 0 1
2704: ARRAY
2705: PUSH
2706: LD_INT 1
2708: ARRAY
2709: PUSH
2710: LD_EXP 4
2714: EQUAL
2715: IFFALSE 2729
// Say ( Lisa , DCorpses-Lisa-1 ) ;
2717: LD_EXP 4
2721: PPUSH
2722: LD_STRING DCorpses-Lisa-1
2724: PPUSH
2725: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 1 then
2729: LD_VAR 0 2
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PUSH
2744: LD_VAR 0 4
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: EQUAL
2753: PUSH
2754: LD_VAR 0 4
2758: PUSH
2759: LD_INT 1
2761: ARRAY
2762: PPUSH
2763: CALL_OW 258
2767: PUSH
2768: LD_INT 1
2770: EQUAL
2771: AND
2772: IFFALSE 2790
// Say ( tmp [ 1 ] , DCorpses-Sol1-1 ) ;
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: LD_STRING DCorpses-Sol1-1
2785: PPUSH
2786: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 1 ] and GetSex ( tmp [ 1 ] ) = 2 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PUSH
2805: LD_VAR 0 4
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: EQUAL
2814: PUSH
2815: LD_VAR 0 4
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 258
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: AND
2833: IFFALSE 2851
// Say ( tmp [ 1 ] , DCorpses-FSol1-1 ) ;
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: LD_STRING DCorpses-FSol1-1
2846: PPUSH
2847: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 1 then
2851: LD_VAR 0 2
2855: PUSH
2856: LD_VAR 0 1
2860: ARRAY
2861: PUSH
2862: LD_INT 1
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 4
2870: PUSH
2871: LD_INT 2
2873: ARRAY
2874: EQUAL
2875: PUSH
2876: LD_VAR 0 4
2880: PUSH
2881: LD_INT 2
2883: ARRAY
2884: PPUSH
2885: CALL_OW 258
2889: PUSH
2890: LD_INT 1
2892: EQUAL
2893: AND
2894: IFFALSE 2912
// Say ( tmp [ 2 ] , DCorpses-Sol1-1 ) ;
2896: LD_VAR 0 4
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_STRING DCorpses-Sol1-1
2907: PPUSH
2908: CALL_OW 88
// if distanceTab [ i ] [ 1 ] = tmp [ 2 ] and GetSex ( tmp [ 2 ] ) = 2 then
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 1
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: EQUAL
2936: PUSH
2937: LD_VAR 0 4
2941: PUSH
2942: LD_INT 2
2944: ARRAY
2945: PPUSH
2946: CALL_OW 258
2950: PUSH
2951: LD_INT 2
2953: EQUAL
2954: AND
2955: IFFALSE 2973
// Say ( tmp [ 2 ] , DCorpses-FSol1-1 ) ;
2957: LD_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ARRAY
2965: PPUSH
2966: LD_STRING DCorpses-FSol1-1
2968: PPUSH
2969: CALL_OW 88
// SetLives ( DyingSold , 150 ) ;
2973: LD_EXP 35
2977: PPUSH
2978: LD_INT 150
2980: PPUSH
2981: CALL_OW 234
// break ;
2985: GO 2989
// end ; end ;
2987: GO 2602
2989: POP
2990: POP
// p := 0 ;
2991: LD_ADDR_VAR 0 5
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// p := p + 1 ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_VAR 0 5
3015: PUSH
3016: LD_INT 1
3018: PLUS
3019: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM ] do
3020: LD_ADDR_VAR 0 1
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 21
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_EXP 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: DIFF
3062: PUSH
3063: FOR_IN
3064: IFFALSE 3134
// begin ComMoveToArea ( i , DeadCutscene ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 28
3073: PPUSH
3074: CALL_OW 113
// ComMoveToArea ( JMM , JMMAreaCutscene ) ;
3078: LD_EXP 1
3082: PPUSH
3083: LD_INT 30
3085: PPUSH
3086: CALL_OW 113
// AddComTurnXY ( i , 23 , 11 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 23
3097: PPUSH
3098: LD_INT 11
3100: PPUSH
3101: CALL_OW 178
// AddComTurnXY ( JMM , 23 , 11 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_INT 23
3112: PPUSH
3113: LD_INT 11
3115: PPUSH
3116: CALL_OW 178
// SetLives ( DyingSold , 250 ) ;
3120: LD_EXP 35
3124: PPUSH
3125: LD_INT 250
3127: PPUSH
3128: CALL_OW 234
// end ;
3132: GO 3063
3134: POP
3135: POP
// until IsInArea ( JMM , JMMAreaCutscene ) or p >= 16 ;
3136: LD_EXP 1
3140: PPUSH
3141: LD_INT 30
3143: PPUSH
3144: CALL_OW 308
3148: PUSH
3149: LD_VAR 0 5
3153: PUSH
3154: LD_INT 16
3156: GREATEREQUAL
3157: OR
3158: IFFALSE 2999
// wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// Say ( JMM , DCorpses-JMM-1 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING DCorpses-JMM-1
3174: PPUSH
3175: CALL_OW 88
// SetLives ( DyingSold , 100 ) ;
3179: LD_EXP 35
3183: PPUSH
3184: LD_INT 100
3186: PPUSH
3187: CALL_OW 234
// if IsOK ( Khatam ) then
3191: LD_EXP 5
3195: PPUSH
3196: CALL_OW 302
3200: IFFALSE 3337
// begin repeat wait ( 0 0$1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: CALL_OW 67
// ComHeal ( Khatam , DyingSold ) ;
3209: LD_EXP 5
3213: PPUSH
3214: LD_EXP 35
3218: PPUSH
3219: CALL_OW 128
// until GetDistUnits ( Khatam , DyingSold ) < 2 ;
3223: LD_EXP 5
3227: PPUSH
3228: LD_EXP 35
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 2
3240: LESS
3241: IFFALSE 3202
// spotCorpses = 0 ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// SetLives ( DyingSold , 10 ) ;
3251: LD_EXP 35
3255: PPUSH
3256: LD_INT 10
3258: PPUSH
3259: CALL_OW 234
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// KillUnit ( DyingSold ) ;
3270: LD_EXP 35
3274: PPUSH
3275: CALL_OW 66
// wait ( 0 0$1 ) ;
3279: LD_INT 35
3281: PPUSH
3282: CALL_OW 67
// CenterNowOnUnits ( [ JMM , Khatam ] ) ;
3286: LD_EXP 1
3290: PUSH
3291: LD_EXP 5
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 87
// ComTurnUnit ( Khatam , JMM ) ;
3304: LD_EXP 5
3308: PPUSH
3309: LD_EXP 1
3313: PPUSH
3314: CALL_OW 119
// wait ( 0 0$1 ) ;
3318: LD_INT 35
3320: PPUSH
3321: CALL_OW 67
// Say ( Khatam , DCorpses-Khat-1 ) ;
3325: LD_EXP 5
3329: PPUSH
3330: LD_STRING DCorpses-Khat-1
3332: PPUSH
3333: CALL_OW 88
// end ; InGameOff ;
3337: CALL_OW 9
// Say ( JMM , DCorpses-JMM-2 ) ;
3341: LD_EXP 1
3345: PPUSH
3346: LD_STRING DCorpses-JMM-2
3348: PPUSH
3349: CALL_OW 88
// end ;
3353: PPOPN 5
3355: END
// every 0 0$1 trigger spotCorpses = 1 do
3356: LD_EXP 32
3360: PUSH
3361: LD_INT 1
3363: EQUAL
3364: IFFALSE 3382
3366: GO 3368
3368: DISABLE
// begin enable ;
3369: ENABLE
// SetLives ( DyingSold , 10 ) ;
3370: LD_EXP 35
3374: PPUSH
3375: LD_INT 10
3377: PPUSH
3378: CALL_OW 234
// end ;
3382: END
// every 1 trigger ( FilterUnitsInArea ( WaterScene , [ f_side , 1 ] ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Jerry ) , Jerry ) < 13 ) do var i ;
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 70
3400: PUSH
3401: LD_INT 22
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PPUSH
3411: CALL_OW 69
3415: PPUSH
3416: LD_EXP 7
3420: PPUSH
3421: CALL_OW 74
3425: PPUSH
3426: LD_EXP 7
3430: PPUSH
3431: CALL_OW 296
3435: PUSH
3436: LD_INT 13
3438: LESS
3439: OR
3440: IFFALSE 3621
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
// begin InGameOn ;
3448: CALL_OW 8
// SetLives ( Jerry , 250 ) ;
3452: LD_EXP 7
3456: PPUSH
3457: LD_INT 250
3459: PPUSH
3460: CALL_OW 234
// SetLives ( Brian , [ 1000 , 800 , 750 , 700 ] [ Difficulty ] ) ;
3464: LD_EXP 6
3468: PPUSH
3469: LD_INT 1000
3471: PUSH
3472: LD_INT 800
3474: PUSH
3475: LD_INT 750
3477: PUSH
3478: LD_INT 700
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PPUSH
3493: CALL_OW 234
// SetAttitude ( 3 , 4 , att_enemy , true ) ;
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 80
// CenterOnUnits ( [ Brian , Jerry ] ) ;
3513: LD_EXP 6
3517: PUSH
3518: LD_EXP 7
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 85
// for i in FilterUnitsInArea ( RussiansWaterSpawn , [ f_side , 3 ] ) union FilterAllUnits ( [ f_side , 4 ] ) do
3531: LD_ADDR_VAR 0 1
3535: PUSH
3536: LD_INT 9
3538: PPUSH
3539: LD_INT 22
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: PUSH
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: UNION
3569: PUSH
3570: FOR_IN
3571: IFFALSE 3584
// ComFree ( i ) ;
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 139
3582: GO 3570
3584: POP
3585: POP
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// InGameOff ;
3593: CALL_OW 9
// Say ( Brian , DF-Sol1-1 ) ;
3597: LD_EXP 6
3601: PPUSH
3602: LD_STRING DF-Sol1-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , DF-JMM-1 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING DF-JMM-1
3616: PPUSH
3617: CALL_OW 88
// end ;
3621: PPOPN 1
3623: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 do
3624: LD_INT 19
3626: PPUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 3
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3754
3647: GO 3649
3649: DISABLE
// begin if not IsDead ( Brian ) then
3650: LD_EXP 6
3654: PPUSH
3655: CALL_OW 301
3659: NOT
3660: IFFALSE 3674
// SetSide ( Brian , 1 ) ;
3662: LD_EXP 6
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 235
// if not IsDead ( Jerry ) then
3674: LD_EXP 7
3678: PPUSH
3679: CALL_OW 301
3683: NOT
3684: IFFALSE 3698
// SetSide ( Jerry , 1 ) ;
3686: LD_EXP 7
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: CALL_OW 235
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) then
3698: LD_INT 22
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: IFFALSE 3742
// Say ( JMM , DFa-JMM-1 ) else
3728: LD_EXP 1
3732: PPUSH
3733: LD_STRING DFa-JMM-1
3735: PPUSH
3736: CALL_OW 88
3740: GO 3754
// Say ( JMM , DFa-JMM-1a ) ;
3742: LD_EXP 1
3746: PPUSH
3747: LD_STRING DFa-JMM-1a
3749: PPUSH
3750: CALL_OW 88
// end ;
3754: END
// every 0 0$1 trigger FilterUnitsInArea ( WaterArea , [ f_side , 3 ] ) = 0 and not IsOk ( Brian ) do
3755: LD_INT 19
3757: PPUSH
3758: LD_INT 22
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 70
3772: PUSH
3773: LD_INT 0
3775: EQUAL
3776: PUSH
3777: LD_EXP 6
3781: PPUSH
3782: CALL_OW 302
3786: NOT
3787: AND
3788: IFFALSE 3874
3790: GO 3792
3792: DISABLE
// begin repeat wait ( 0 0$1 ) ;
3793: LD_INT 35
3795: PPUSH
3796: CALL_OW 67
// until GetLives ( Brian ) > 250 ;
3800: LD_EXP 6
3804: PPUSH
3805: CALL_OW 256
3809: PUSH
3810: LD_INT 250
3812: GREATER
3813: IFFALSE 3793
// Say ( Brian , DFb-Sol1-1 ) ;
3815: LD_EXP 6
3819: PPUSH
3820: LD_STRING DFb-Sol1-1
3822: PPUSH
3823: CALL_OW 88
// ComMoveXY ( Brian , 78 , 74 ) ;
3827: LD_EXP 6
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 74
3837: PPUSH
3838: CALL_OW 111
// if IsDead ( Jerry ) then
3842: LD_EXP 7
3846: PPUSH
3847: CALL_OW 301
3851: IFFALSE 3867
// Say ( Brian , DFb-Sol1-1a ) else
3853: LD_EXP 6
3857: PPUSH
3858: LD_STRING DFb-Sol1-1a
3860: PPUSH
3861: CALL_OW 88
3865: GO 3874
// SetAchievement ( ACH_JERRY ) ;
3867: LD_STRING ACH_JERRY
3869: PPUSH
3870: CALL_OW 543
// end ;
3874: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) = 0 do var i ;
3875: LD_INT 22
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 21
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PUSH
3904: LD_INT 0
3906: EQUAL
3907: IFFALSE 3999
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
// begin enable ;
3915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3916: LD_ADDR_VAR 0 1
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 21
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: LD_INT 30
3943: PUSH
3944: LD_INT 31
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: PUSH
3961: FOR_IN
3962: IFFALSE 3997
// begin if See ( 1 , i ) then
3964: LD_INT 1
3966: PPUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 292
3976: IFFALSE 3995
// begin disable ;
3978: DISABLE
// Say ( JMM , DX1-JMM-1 ) ;
3979: LD_EXP 1
3983: PPUSH
3984: LD_STRING DX1-JMM-1
3986: PPUSH
3987: CALL_OW 88
// exit ;
3991: POP
3992: POP
3993: GO 3999
// end ; end ;
3995: GO 3961
3997: POP
3998: POP
// end ;
3999: PPOPN 1
4001: END
// every 0 0$1 trigger SeeArea ( 1 , SouthBaseRussianSpawn1 ) do var i , j , mech ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 294
4012: IFFALSE 4275
4014: GO 4016
4016: DISABLE
4017: LD_INT 0
4019: PPUSH
4020: PPUSH
4021: PPUSH
// begin DialogueOn ;
4022: CALL_OW 6
// Say ( FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 1 ] , DX3-Rus1-1 ) ;
4026: LD_INT 11
4028: PPUSH
4029: LD_INT 22
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 21
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PPUSH
4053: CALL_OW 70
4057: PUSH
4058: LD_INT 1
4060: ARRAY
4061: PPUSH
4062: LD_STRING DX3-Rus1-1
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , DX3-JMM-1 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING DX3-JMM-1
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// for i in FilterUnitsInArea ( SouthBaseRussianSpawn1 , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) do
4085: LD_ADDR_VAR 0 1
4089: PUSH
4090: LD_INT 11
4092: PPUSH
4093: LD_INT 22
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 25
4105: PUSH
4106: LD_INT 1
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PPUSH
4117: CALL_OW 70
4121: PUSH
4122: FOR_IN
4123: IFFALSE 4143
// southBaseDefenders = southBaseDefenders ^ i ;
4125: LD_ADDR_EXP 25
4129: PUSH
4130: LD_EXP 25
4134: PUSH
4135: LD_VAR 0 1
4139: ADD
4140: ST_TO_ADDR
4141: GO 4122
4143: POP
4144: POP
// wait ( [ 0 0$5 , 0 0$4 , 0 0$3 , 0 0$2 ] [ Difficulty ] ) ;
4145: LD_INT 175
4147: PUSH
4148: LD_INT 140
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 70
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 67
// mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) ;
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 3
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: PPUSH
4213: CALL_OW 69
4217: ST_TO_ADDR
// if not mech then
4218: LD_VAR 0 3
4222: NOT
4223: IFFALSE 4227
// exit ;
4225: GO 4275
// ComExitBuilding ( mech ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: CALL_OW 122
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// AddComEnterUnit ( mech [ 1 ] , vehicle1 ) ;
4243: LD_VAR 0 3
4247: PUSH
4248: LD_INT 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 180
// AddComEnterUnit ( mech [ 2 ] , vehicle2 ) ;
4259: LD_VAR 0 3
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: PPUSH
4268: LD_INT 4
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: PPOPN 3
4277: END
// every 0 0$1 trigger See ( 1 , vehicle1 ) or See ( 1 , vehicle2 ) do
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 292
4288: PUSH
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 292
4299: OR
4300: IFFALSE 4384
4302: GO 4304
4304: DISABLE
// begin CenterOnUnits ( [ vehicle1 , vehicle2 ] ) ;
4305: LD_INT 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 85
// if IsOK ( Bobby ) then
4319: LD_EXP 2
4323: PPUSH
4324: CALL_OW 302
4328: IFFALSE 4364
// begin DialogueOn ;
4330: CALL_OW 6
// Say ( Bobby , DX2-Bobby-1 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DX2-Bobby-1
4341: PPUSH
4342: CALL_OW 88
// Say ( JMM , DX2-JMM-1a ) ;
4346: LD_EXP 1
4350: PPUSH
4351: LD_STRING DX2-JMM-1a
4353: PPUSH
4354: CALL_OW 88
// DialogueOff ;
4358: CALL_OW 7
// end else
4362: GO 4384
// begin DialogueOn ;
4364: CALL_OW 6
// Say ( JMM , DX2-JMM-1 ) ;
4368: LD_EXP 1
4372: PPUSH
4373: LD_STRING DX2-JMM-1
4375: PPUSH
4376: CALL_OW 88
// DialogueOff ;
4380: CALL_OW 7
// end ; end ;
4384: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) do var tmp , speaker , temp1 , temp2 , i ;
4385: LD_INT 22
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 23
4397: PUSH
4398: LD_INT 3
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 21
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 34
4417: PUSH
4418: LD_INT 42
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: IFFALSE 4856
4437: GO 4439
4439: DISABLE
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 42 ] ] ) ;
4447: LD_ADDR_VAR 0 1
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 23
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 34
4484: PUSH
4485: LD_INT 42
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: ST_TO_ADDR
// temp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Cyrus , Bobby ] ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 3
4557: PUSH
4558: LD_EXP 2
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// temp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_female ] ] ) diff [ Lisa ] ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 26
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PPUSH
4609: CALL_OW 69
4613: PUSH
4614: LD_EXP 4
4618: PUSH
4619: EMPTY
4620: LIST
4621: DIFF
4622: ST_TO_ADDR
// if not tmp then
4623: LD_VAR 0 1
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 4856
// speaker := IsDrivenBy ( tmp [ 1 ] ) ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: CALL_OW 311
4650: ST_TO_ADDR
// if not speaker then
4651: LD_VAR 0 2
4655: NOT
4656: IFFALSE 4660
// exit ;
4658: GO 4856
// DialogueOn ;
4660: CALL_OW 6
// if speaker = JMM then
4664: LD_VAR 0 2
4668: PUSH
4669: LD_EXP 1
4673: EQUAL
4674: IFFALSE 4708
// begin if Lisa then
4676: LD_EXP 4
4680: IFFALSE 4694
// Say ( Lisa , DX2b-Lisa-1 ) ;
4682: LD_EXP 4
4686: PPUSH
4687: LD_STRING DX2b-Lisa-1
4689: PPUSH
4690: CALL_OW 88
// Say ( JMM , DX2b-JMM-1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING DX2b-JMM-1
4701: PPUSH
4702: CALL_OW 88
// end else
4706: GO 4852
// begin Say ( JMM , DX2a-JMM-1 ) ;
4708: LD_EXP 1
4712: PPUSH
4713: LD_STRING DX2a-JMM-1
4715: PPUSH
4716: CALL_OW 88
// if speaker = Bobby then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_EXP 2
4729: EQUAL
4730: IFFALSE 4744
// Say ( Bobby , DX2a-Bobby-1 ) ;
4732: LD_EXP 2
4736: PPUSH
4737: LD_STRING DX2a-Bobby-1
4739: PPUSH
4740: CALL_OW 88
// if speaker = Cyrus then
4744: LD_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: EQUAL
4754: IFFALSE 4768
// Say ( Cyrus , DX2a-Cyrus-1 ) ;
4756: LD_EXP 3
4760: PPUSH
4761: LD_STRING DX2a-Cyrus-1
4763: PPUSH
4764: CALL_OW 88
// if speaker = Lisa then
4768: LD_VAR 0 2
4772: PUSH
4773: LD_EXP 4
4777: EQUAL
4778: IFFALSE 4792
// Say ( Lisa , DX2a-Lisa-1 ) ;
4780: LD_EXP 4
4784: PPUSH
4785: LD_STRING DX2a-Lisa-1
4787: PPUSH
4788: CALL_OW 88
// if speaker in temp1 then
4792: LD_VAR 0 2
4796: PUSH
4797: LD_VAR 0 3
4801: IN
4802: IFFALSE 4816
// Say ( speaker , DX2a-Sol1-1 ) ;
4804: LD_VAR 0 2
4808: PPUSH
4809: LD_STRING DX2a-Sol1-1
4811: PPUSH
4812: CALL_OW 88
// if speaker in temp2 then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_VAR 0 4
4825: IN
4826: IFFALSE 4840
// Say ( speaker , DX2a-FSol1-1 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_STRING DX2a-FSol1-1
4835: PPUSH
4836: CALL_OW 88
// Say ( JMM , DX2a-JMM-2 ) ;
4840: LD_EXP 1
4844: PPUSH
4845: LD_STRING DX2a-JMM-2
4847: PPUSH
4848: CALL_OW 88
// end ; DialogueOff ;
4852: CALL_OW 7
// end ;
4856: PPOPN 5
4858: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 or GetSide ( dep2 ) = 1 do
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 255
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_INT 10
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_INT 1
4881: EQUAL
4882: OR
4883: IFFALSE 4943
4885: GO 4887
4887: DISABLE
// begin DialogueOn ;
4888: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D3-JMM-1
4899: PPUSH
4900: CALL_OW 88
// SayRadio ( Powell , D3-Pow-1 ) ;
4904: LD_EXP 9
4908: PPUSH
4909: LD_STRING D3-Pow-1
4911: PPUSH
4912: CALL_OW 94
// if IsOK ( Cyrus ) then
4916: LD_EXP 3
4920: PPUSH
4921: CALL_OW 302
4925: IFFALSE 4939
// Say ( Cyrus , D3-Cyrus-1 ) ;
4927: LD_EXP 3
4931: PPUSH
4932: LD_STRING D3-Cyrus-1
4934: PPUSH
4935: CALL_OW 88
// DialogueOff ;
4939: CALL_OW 7
// end ;
4943: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 do var temp , tmp , i ;
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 255
4951: PUSH
4952: LD_INT 1
4954: EQUAL
4955: PUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 255
4963: PUSH
4964: LD_INT 1
4966: EQUAL
4967: AND
4968: IFFALSE 6358
4970: GO 4972
4972: DISABLE
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4978: LD_ADDR_VAR 0 2
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 21
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PPUSH
5007: CALL_OW 69
5011: ST_TO_ADDR
// if tmp then
5012: LD_VAR 0 2
5016: IFFALSE 5077
// begin for i in tmp do
5018: LD_ADDR_VAR 0 3
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5075
// begin if IsInUnit ( i ) then
5031: LD_VAR 0 3
5035: PPUSH
5036: CALL_OW 310
5040: IFFALSE 5051
// ComExitBuilding ( i ) ;
5042: LD_VAR 0 3
5046: PPUSH
5047: CALL_OW 122
// wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// AddComAgressiveMove ( i , 54 , 17 ) ;
5058: LD_VAR 0 3
5062: PPUSH
5063: LD_INT 54
5065: PPUSH
5066: LD_INT 17
5068: PPUSH
5069: CALL_OW 174
// end ;
5073: GO 5028
5075: POP
5076: POP
// end ; wait ( 0 0$03 ) ;
5077: LD_INT 105
5079: PPUSH
5080: CALL_OW 67
// DialogueOn ;
5084: CALL_OW 6
// Say ( JMM , D3a-JMM-1 ) ;
5088: LD_EXP 1
5092: PPUSH
5093: LD_STRING D3a-JMM-1
5095: PPUSH
5096: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-1 ) ;
5100: LD_EXP 9
5104: PPUSH
5105: LD_STRING D3a-Pow-1
5107: PPUSH
5108: CALL_OW 94
// Say ( JMM , D3a-JMM-2 ) ;
5112: LD_EXP 1
5116: PPUSH
5117: LD_STRING D3a-JMM-2
5119: PPUSH
5120: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-2 ) ;
5124: LD_EXP 9
5128: PPUSH
5129: LD_STRING D3a-Pow-2
5131: PPUSH
5132: CALL_OW 94
// Say ( JMM , D3a-JMM-3 ) ;
5136: LD_EXP 1
5140: PPUSH
5141: LD_STRING D3a-JMM-3
5143: PPUSH
5144: CALL_OW 88
// SayRadio ( Powell , D3a-Pow-3 ) ;
5148: LD_EXP 9
5152: PPUSH
5153: LD_STRING D3a-Pow-3
5155: PPUSH
5156: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
5160: LD_EXP 1
5164: PPUSH
5165: LD_STRING D3a-JMM-4
5167: PPUSH
5168: CALL_OW 88
// DialogueOff ;
5172: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5176: LD_STRING M2
5178: PPUSH
5179: CALL_OW 337
// Say ( JMM , D3b-JMM-1 ) ;
5183: LD_EXP 1
5187: PPUSH
5188: LD_STRING D3b-JMM-1
5190: PPUSH
5191: CALL_OW 88
// Hint ( Depot2 ) ;
5195: LD_STRING Depot2
5197: PPUSH
5198: CALL_OW 339
// repeat wait ( 0 0$1 ) ;
5202: LD_INT 35
5204: PPUSH
5205: CALL_OW 67
// until FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
5209: LD_INT 22
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 70
5240: PUSH
5241: LD_INT 22
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: NOT
5270: AND
5271: IFFALSE 5202
// repeat temp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM , Khatam ] ;
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 22
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 23
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 50
5310: PUSH
5311: EMPTY
5312: LIST
5313: PUSH
5314: LD_INT 56
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_EXP 1
5336: PUSH
5337: LD_EXP 5
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: DIFF
5346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5347: LD_INT 35
5349: PPUSH
5350: CALL_OW 67
// until temp > 0 ;
5354: LD_VAR 0 1
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5273
// wait ( 0 0$5 ) ;
5364: LD_INT 175
5366: PPUSH
5367: CALL_OW 67
// PrepareRussianHeroes ;
5371: CALL 11584 0 0
// InGameOn ;
5375: CALL_OW 8
// CenterNowOnUnits ( Mikhail ) ;
5379: LD_EXP 8
5383: PPUSH
5384: CALL_OW 87
// ComTurnUnit ( [ JMM , temp [ 1 ] ] , Mikhail ) ;
5388: LD_EXP 1
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: LD_EXP 8
5410: PPUSH
5411: CALL_OW 119
// ComTurnUnit ( Mikhail , temp [ 1 ] ) ;
5415: LD_EXP 8
5419: PPUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PPUSH
5429: CALL_OW 119
// wait ( 0 0$02 ) ;
5433: LD_INT 70
5435: PPUSH
5436: CALL_OW 67
// Say ( Mikhail , D4-Mikh-1 ) ;
5440: LD_EXP 8
5444: PPUSH
5445: LD_STRING D4-Mikh-1
5447: PPUSH
5448: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5452: LD_VAR 0 1
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: CALL_OW 258
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 5487
// Say ( temp [ 1 ] , D4-Sol1-1 ) ;
5471: LD_VAR 0 1
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: PPUSH
5480: LD_STRING D4-Sol1-1
5482: PPUSH
5483: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 258
5500: PUSH
5501: LD_INT 2
5503: EQUAL
5504: IFFALSE 5522
// Say ( temp [ 1 ] , D4-FSol1-1 ) ;
5506: LD_VAR 0 1
5510: PUSH
5511: LD_INT 1
5513: ARRAY
5514: PPUSH
5515: LD_STRING D4-FSol1-1
5517: PPUSH
5518: CALL_OW 88
// Say ( Mikhail , D4-Mikh-2 ) ;
5522: LD_EXP 8
5526: PPUSH
5527: LD_STRING D4-Mikh-2
5529: PPUSH
5530: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5534: LD_VAR 0 1
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PPUSH
5543: CALL_OW 258
5547: PUSH
5548: LD_INT 1
5550: EQUAL
5551: IFFALSE 5569
// Say ( temp [ 1 ] , D4-Sol1-2 ) ;
5553: LD_VAR 0 1
5557: PUSH
5558: LD_INT 1
5560: ARRAY
5561: PPUSH
5562: LD_STRING D4-Sol1-2
5564: PPUSH
5565: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5569: LD_VAR 0 1
5573: PUSH
5574: LD_INT 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 258
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5604
// Say ( temp [ 1 ] , D4-FSol1-2 ) ;
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_STRING D4-FSol1-2
5599: PPUSH
5600: CALL_OW 88
// Say ( Mikhail , D4-Mikh-3 ) ;
5604: LD_EXP 8
5608: PPUSH
5609: LD_STRING D4-Mikh-3
5611: PPUSH
5612: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: CALL_OW 258
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5651
// Say ( temp [ 1 ] , D4-Sol1-3 ) ;
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: LD_STRING D4-Sol1-3
5646: PPUSH
5647: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
5651: LD_VAR 0 1
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PPUSH
5660: CALL_OW 258
5664: PUSH
5665: LD_INT 2
5667: EQUAL
5668: IFFALSE 5686
// Say ( temp [ 1 ] , D4-FSol1-3 ) ;
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: LD_STRING D4-FSol1-3
5681: PPUSH
5682: CALL_OW 88
// Say ( Mikhail , D4-Mikh-4 ) ;
5686: LD_EXP 8
5690: PPUSH
5691: LD_STRING D4-Mikh-4
5693: PPUSH
5694: CALL_OW 88
// case Query ( Qs1 ) of 1 :
5698: LD_STRING Qs1
5700: PPUSH
5701: CALL_OW 97
5705: PUSH
5706: LD_INT 1
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5749
5714: POP
// begin InGameOff ;
5715: CALL_OW 9
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
5719: LD_INT 1
5721: PPUSH
5722: LD_INT 6
5724: PPUSH
5725: LD_INT 2
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
5735: LD_EXP 8
5739: PPUSH
5740: LD_INT 17
5742: PPUSH
5743: CALL_OW 113
// end ; 2 :
5747: GO 6342
5749: LD_INT 2
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 6307
5757: POP
// begin repeat wait ( 0 0$1 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// CenterNowOnUnits ( temp [ 1 ] ) ;
5765: LD_VAR 0 1
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: CALL_OW 87
// ComMoveUnit ( temp [ 1 ] , JMM ) ;
5778: LD_VAR 0 1
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_EXP 1
5791: PPUSH
5792: CALL_OW 112
// ComMoveUnit ( Mikhail , JMM ) ;
5796: LD_EXP 8
5800: PPUSH
5801: LD_EXP 1
5805: PPUSH
5806: CALL_OW 112
// until ( GetDistUnits ( JMM , Mikhail ) < 5 ) ;
5810: LD_EXP 1
5814: PPUSH
5815: LD_EXP 8
5819: PPUSH
5820: CALL_OW 296
5824: PUSH
5825: LD_INT 5
5827: LESS
5828: IFFALSE 5758
// ComTurnUnit ( Mikhail , JMM ) ;
5830: LD_EXP 8
5834: PPUSH
5835: LD_EXP 1
5839: PPUSH
5840: CALL_OW 119
// Say ( JMM , D4b-JMM-1 ) ;
5844: LD_EXP 1
5848: PPUSH
5849: LD_STRING D4b-JMM-1
5851: PPUSH
5852: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-1 ) ;
5856: LD_EXP 8
5860: PPUSH
5861: LD_STRING D4b-Mikh-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D4b-JMM-2 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D4b-JMM-2
5875: PPUSH
5876: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-2 ) ;
5880: LD_EXP 8
5884: PPUSH
5885: LD_STRING D4b-Mikh-2
5887: PPUSH
5888: CALL_OW 88
// Say ( JMM , D4b-JMM-3 ) ;
5892: LD_EXP 1
5896: PPUSH
5897: LD_STRING D4b-JMM-3
5899: PPUSH
5900: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-3 ) ;
5904: LD_EXP 8
5908: PPUSH
5909: LD_STRING D4b-Mikh-3
5911: PPUSH
5912: CALL_OW 88
// Say ( JMM , D4b-JMM-4 ) ;
5916: LD_EXP 1
5920: PPUSH
5921: LD_STRING D4b-JMM-4
5923: PPUSH
5924: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-4 ) ;
5928: LD_EXP 8
5932: PPUSH
5933: LD_STRING D4b-Mikh-4
5935: PPUSH
5936: CALL_OW 88
// Say ( JMM , D4b-JMM-5 ) ;
5940: LD_EXP 1
5944: PPUSH
5945: LD_STRING D4b-JMM-5
5947: PPUSH
5948: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-5 ) ;
5952: LD_EXP 8
5956: PPUSH
5957: LD_STRING D4b-Mikh-5
5959: PPUSH
5960: CALL_OW 88
// Say ( JMM , D4b-JMM-6 ) ;
5964: LD_EXP 1
5968: PPUSH
5969: LD_STRING D4b-JMM-6
5971: PPUSH
5972: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-6 ) ;
5976: LD_EXP 8
5980: PPUSH
5981: LD_STRING D4b-Mikh-6
5983: PPUSH
5984: CALL_OW 88
// Say ( JMM , D4b-JMM-7 ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_STRING D4b-JMM-7
5995: PPUSH
5996: CALL_OW 88
// Say ( Mikhail , D4b-Mikh-7 ) ;
6000: LD_EXP 8
6004: PPUSH
6005: LD_STRING D4b-Mikh-7
6007: PPUSH
6008: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6012: LD_VAR 0 1
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: CALL_OW 258
6025: PUSH
6026: LD_INT 1
6028: EQUAL
6029: IFFALSE 6047
// Say ( temp [ 1 ] , D4b-Sol1-7 ) ;
6031: LD_VAR 0 1
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_STRING D4b-Sol1-7
6042: PPUSH
6043: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: IFFALSE 6082
// Say ( temp [ 1 ] , D4b-FSol1-7 ) ;
6066: LD_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_STRING D4b-FSol1-7
6077: PPUSH
6078: CALL_OW 88
// Say ( JMM , D4b-JMM-8 ) ;
6082: LD_EXP 1
6086: PPUSH
6087: LD_STRING D4b-JMM-8
6089: PPUSH
6090: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 1 then
6094: LD_VAR 0 1
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: CALL_OW 258
6107: PUSH
6108: LD_INT 1
6110: EQUAL
6111: IFFALSE 6129
// Say ( temp [ 1 ] , D4b-Sol1-8 ) ;
6113: LD_VAR 0 1
6117: PUSH
6118: LD_INT 1
6120: ARRAY
6121: PPUSH
6122: LD_STRING D4b-Sol1-8
6124: PPUSH
6125: CALL_OW 88
// if GetSex ( temp [ 1 ] ) = 2 then
6129: LD_VAR 0 1
6133: PUSH
6134: LD_INT 1
6136: ARRAY
6137: PPUSH
6138: CALL_OW 258
6142: PUSH
6143: LD_INT 2
6145: EQUAL
6146: IFFALSE 6164
// Say ( temp [ 1 ] , D4b-FSol1-8 ) ;
6148: LD_VAR 0 1
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D4b-FSol1-8
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D4b-JMM-9 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D4b-JMM-9
6171: PPUSH
6172: CALL_OW 88
// SetSide ( Mikhail , 1 ) ;
6176: LD_EXP 8
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_INT 22
6195: PUSH
6196: LD_INT 1
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6225
// ComFree ( i ) ;
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 139
6223: GO 6211
6225: POP
6226: POP
// repeat wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// CenterNowOnUnits ( Mikhail ) ;
6234: LD_EXP 8
6238: PPUSH
6239: CALL_OW 87
// ComEnterUnit ( [ Mikhail , temp [ 1 ] ] , dep1 ) ;
6243: LD_EXP 8
6247: PUSH
6248: LD_VAR 0 1
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 120
// until IsInUnit ( Mikhail ) ;
6268: LD_EXP 8
6272: PPUSH
6273: CALL_OW 310
6277: IFFALSE 6227
// mikhailDepot = IsInUnit ( Mikhail ) ;
6279: LD_ADDR_EXP 23
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOff ;
6294: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
6298: LD_STRING M3
6300: PPUSH
6301: CALL_OW 337
// end ; 3 :
6305: GO 6342
6307: LD_INT 3
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6341
6315: POP
// begin ComMoveToArea ( Mikhail , MikhailEscape ) ;
6316: LD_EXP 8
6320: PPUSH
6321: LD_INT 17
6323: PPUSH
6324: CALL_OW 113
// wait ( 0 0$3 ) ;
6328: LD_INT 105
6330: PPUSH
6331: CALL_OW 67
// InGameOff ;
6335: CALL_OW 9
// end ; end ;
6339: GO 6342
6341: POP
// PrepareTigers ;
6342: CALL 14881 0 0
// RussianTrap ;
6346: CALL 9980 0 0
// tigersRespawn = 1 ;
6350: LD_ADDR_EXP 30
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// end ;
6358: PPOPN 3
6360: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and GetResourceType ( GetBase ( dep1 ) , 1 ) >= 100 do var tmp ;
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 1
6371: EQUAL
6372: PUSH
6373: LD_INT 10
6375: PPUSH
6376: CALL_OW 255
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: AND
6385: PUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 274
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: CALL_OW 275
6401: PUSH
6402: LD_INT 100
6404: GREATEREQUAL
6405: AND
6406: IFFALSE 6555
6408: GO 6410
6410: DISABLE
6411: LD_INT 0
6413: PPUSH
// begin wait ( rand ( 1 1$0 , 2 2$0 ) + 0 0$30 ) ;
6414: LD_INT 2100
6416: PPUSH
6417: LD_INT 4200
6419: PPUSH
6420: CALL_OW 12
6424: PUSH
6425: LD_INT 1050
6427: PLUS
6428: PPUSH
6429: CALL_OW 67
// PrepareCargoBays ;
6433: CALL 12767 0 0
// cargoRespawn = 1 ;
6437: LD_ADDR_EXP 28
6441: PUSH
6442: LD_INT 1
6444: ST_TO_ADDR
// tmp := [ cargo1 , cargo2 , driver1 , driver2 ] ;
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 15
6454: PUSH
6455: LD_EXP 16
6459: PUSH
6460: LD_EXP 17
6464: PUSH
6465: LD_EXP 18
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// ComMoveXY ( tmp , 17 , 10 ) ;
6476: LD_VAR 0 1
6480: PPUSH
6481: LD_INT 17
6483: PPUSH
6484: LD_INT 10
6486: PPUSH
6487: CALL_OW 111
// AddComMoveXY ( tmp , 36 , 13 ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_INT 36
6498: PPUSH
6499: LD_INT 13
6501: PPUSH
6502: CALL_OW 171
// AddComMoveXY ( tmp , 40 , 20 ) ;
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_INT 40
6513: PPUSH
6514: LD_INT 20
6516: PPUSH
6517: CALL_OW 171
// AddComMoveXY ( tmp , 53 , 16 ) ;
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 53
6528: PPUSH
6529: LD_INT 16
6531: PPUSH
6532: CALL_OW 171
// wait ( 0 0$5 ) ;
6536: LD_INT 175
6538: PPUSH
6539: CALL_OW 67
// Say ( driver1 , D5-Rus2-1 ) ;
6543: LD_EXP 17
6547: PPUSH
6548: LD_STRING D5-Rus2-1
6550: PPUSH
6551: CALL_OW 88
// end ;
6555: PPOPN 1
6557: END
// every 0 0$1 trigger cargoRespawn = 1 do var cargos ;
6558: LD_EXP 28
6562: PUSH
6563: LD_INT 1
6565: EQUAL
6566: IFFALSE 6721
6568: GO 6570
6570: DISABLE
6571: LD_INT 0
6573: PPUSH
// begin cargos = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) ;
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 34
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
6619: LD_INT 105
6621: PPUSH
6622: CALL_OW 67
// until UnitFilter ( cargos , [ f_not , [ f_hastask ] ] ) or UnitFilter ( cargos , [ f_not , [ f_lives , 980 ] ] ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 60
6636: PUSH
6637: EMPTY
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 72
6648: PUSH
6649: LD_VAR 0 1
6653: PPUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 980
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 72
6675: OR
6676: IFFALSE 6619
// ComMoveXY ( cargos , 7 , 9 ) ;
6678: LD_VAR 0 1
6682: PPUSH
6683: LD_INT 7
6685: PPUSH
6686: LD_INT 9
6688: PPUSH
6689: CALL_OW 111
// cargoSee = 1 ;
6693: LD_ADDR_EXP 29
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// cargoEscape = 1 ;
6701: LD_ADDR_EXP 20
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// Say ( driver1 , D5-Rus2-1a ) ;
6709: LD_EXP 17
6713: PPUSH
6714: LD_STRING D5-Rus2-1a
6716: PPUSH
6717: CALL_OW 88
// end ;
6721: PPOPN 1
6723: END
// every 0 0$1 trigger cargoEscape do
6724: LD_EXP 20
6728: IFFALSE 6875
6730: GO 6732
6732: DISABLE
// begin enable ;
6733: ENABLE
// ComMoveToArea ( [ cargo1 , cargo2 ] , RussianAttack ) ;
6734: LD_EXP 15
6738: PUSH
6739: LD_EXP 16
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PPUSH
6748: LD_INT 13
6750: PPUSH
6751: CALL_OW 113
// if IsInArea ( cargo1 , RussianAttack ) or IsInArea ( driver1 , RussianAttack ) then
6755: LD_EXP 15
6759: PPUSH
6760: LD_INT 13
6762: PPUSH
6763: CALL_OW 308
6767: PUSH
6768: LD_EXP 17
6772: PPUSH
6773: LD_INT 13
6775: PPUSH
6776: CALL_OW 308
6780: OR
6781: IFFALSE 6815
// begin RemoveUnit ( cargo1 ) ;
6783: LD_EXP 15
6787: PPUSH
6788: CALL_OW 64
// RemoveUnit ( driver1 ) ;
6792: LD_EXP 17
6796: PPUSH
6797: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6801: LD_ADDR_EXP 20
6805: PUSH
6806: LD_EXP 20
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ST_TO_ADDR
// end ; if IsInArea ( cargo2 , RussianAttack ) or IsInArea ( driver2 , RussianAttack ) then
6815: LD_EXP 16
6819: PPUSH
6820: LD_INT 13
6822: PPUSH
6823: CALL_OW 308
6827: PUSH
6828: LD_EXP 18
6832: PPUSH
6833: LD_INT 13
6835: PPUSH
6836: CALL_OW 308
6840: OR
6841: IFFALSE 6875
// begin RemoveUnit ( cargo2 ) ;
6843: LD_EXP 16
6847: PPUSH
6848: CALL_OW 64
// RemoveUnit ( driver2 ) ;
6852: LD_EXP 18
6856: PPUSH
6857: CALL_OW 64
// cargoEscape = cargoEscape + 1 ;
6861: LD_ADDR_EXP 20
6865: PUSH
6866: LD_EXP 20
6870: PUSH
6871: LD_INT 1
6873: PLUS
6874: ST_TO_ADDR
// end ; end ;
6875: END
// every 0 0$1 trigger cargoEscape > 1 do var speaker ;
6876: LD_EXP 20
6880: PUSH
6881: LD_INT 1
6883: GREATER
6884: IFFALSE 7133
6886: GO 6888
6888: DISABLE
6889: LD_INT 0
6891: PPUSH
// begin SetRestrict ( b_armoury , 1 , true ) ;
6892: LD_INT 4
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: CALL_OW 324
// SetRestrict ( 31 , 1 , true ) ;
6905: LD_INT 31
6907: PPUSH
6908: LD_INT 1
6910: PPUSH
6911: LD_INT 1
6913: PPUSH
6914: CALL_OW 324
// Hint ( Bunker ) ;
6918: LD_STRING Bunker
6920: PPUSH
6921: CALL_OW 339
// if IsOK ( Jerry ) then
6925: LD_EXP 7
6929: PPUSH
6930: CALL_OW 302
6934: IFFALSE 6950
// Say ( Jerry , D5a-Sol1-1 ) else
6936: LD_EXP 7
6940: PPUSH
6941: LD_STRING D5a-Sol1-1
6943: PPUSH
6944: CALL_OW 88
6948: GO 7036
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Khatam ] ;
6950: LD_ADDR_VAR 0 1
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 26
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 69
6983: PUSH
6984: LD_EXP 1
6988: PUSH
6989: LD_EXP 2
6993: PUSH
6994: LD_EXP 3
6998: PUSH
6999: LD_EXP 5
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: DIFF
7010: ST_TO_ADDR
// if not speaker then
7011: LD_VAR 0 1
7015: NOT
7016: IFFALSE 7020
// exit ;
7018: GO 7133
// Say ( speaker [ 1 ] , D5a-Sol1-1 ) ;
7020: LD_VAR 0 1
7024: PUSH
7025: LD_INT 1
7027: ARRAY
7028: PPUSH
7029: LD_STRING D5a-Sol1-1
7031: PPUSH
7032: CALL_OW 88
// end ; Say ( JMM , D5a-JMM-1 ) ;
7036: LD_EXP 1
7040: PPUSH
7041: LD_STRING D5a-JMM-1
7043: PPUSH
7044: CALL_OW 88
// if FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
7048: LD_INT 22
7050: PPUSH
7051: LD_INT 22
7053: PUSH
7054: LD_INT 1
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 2
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 70
7079: IFFALSE 7133
// ComBuild ( FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , b_breastwork , 44 , 13 , 1 ) ;
7081: LD_INT 22
7083: PPUSH
7084: LD_INT 22
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 25
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PPUSH
7108: CALL_OW 70
7112: PUSH
7113: LD_INT 1
7115: ARRAY
7116: PPUSH
7117: LD_INT 31
7119: PPUSH
7120: LD_INT 44
7122: PPUSH
7123: LD_INT 13
7125: PPUSH
7126: LD_INT 1
7128: PPUSH
7129: CALL_OW 145
// end ;
7133: PPOPN 1
7135: END
// every 0 0$1 trigger ( GetSide ( dep1 ) = 3 and GetLives ( dep1 ) < 1000 ) or ( GetSide ( dep2 ) = 3 and GetLives ( dep2 ) < 1000 ) do
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 255
7143: PUSH
7144: LD_INT 3
7146: EQUAL
7147: PUSH
7148: LD_INT 1
7150: PPUSH
7151: CALL_OW 256
7155: PUSH
7156: LD_INT 1000
7158: LESS
7159: AND
7160: PUSH
7161: LD_INT 10
7163: PPUSH
7164: CALL_OW 255
7168: PUSH
7169: LD_INT 3
7171: EQUAL
7172: PUSH
7173: LD_INT 10
7175: PPUSH
7176: CALL_OW 256
7180: PUSH
7181: LD_INT 1000
7183: LESS
7184: AND
7185: OR
7186: IFFALSE 7203
7188: GO 7190
7190: DISABLE
// Say ( JMM , D8-JMM-1 ) ;
7191: LD_EXP 1
7195: PPUSH
7196: LD_STRING D8-JMM-1
7198: PPUSH
7199: CALL_OW 88
7203: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) = dep1 and not mikhailInbase = 3 do
7204: LD_EXP 8
7208: PPUSH
7209: CALL_OW 310
7213: PUSH
7214: LD_INT 1
7216: EQUAL
7217: PUSH
7218: LD_EXP 22
7222: PUSH
7223: LD_INT 3
7225: EQUAL
7226: NOT
7227: AND
7228: IFFALSE 7250
7230: GO 7232
7232: DISABLE
// begin enable ;
7233: ENABLE
// mikhailInBase = 1 ;
7234: LD_ADDR_EXP 22
7238: PUSH
7239: LD_INT 1
7241: ST_TO_ADDR
// mikhailStatus = 1 ;
7242: LD_ADDR_EXP 21
7246: PUSH
7247: LD_INT 1
7249: ST_TO_ADDR
// end ;
7250: END
// export function AskMikhail ; begin
7251: LD_INT 0
7253: PPUSH
// case Query ( QMikh2 ) of 1 :
7254: LD_STRING QMikh2
7256: PPUSH
7257: CALL_OW 97
7261: PUSH
7262: LD_INT 1
7264: DOUBLE
7265: EQUAL
7266: IFTRUE 7270
7268: GO 7337
7270: POP
// begin SetAttitude ( 1 , 6 , att_enemy , true ) ;
7271: LD_INT 1
7273: PPUSH
7274: LD_INT 6
7276: PPUSH
7277: LD_INT 2
7279: PPUSH
7280: LD_INT 1
7282: PPUSH
7283: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7287: LD_EXP 8
7291: PPUSH
7292: LD_INT 6
7294: PPUSH
7295: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7299: LD_EXP 8
7303: PPUSH
7304: CALL_OW 122
// wait ( 0 0$1 ) ;
7308: LD_INT 35
7310: PPUSH
7311: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7315: LD_EXP 8
7319: PPUSH
7320: LD_INT 17
7322: PPUSH
7323: CALL_OW 113
// mikhailInbase = 0 ;
7327: LD_ADDR_EXP 22
7331: PUSH
7332: LD_INT 0
7334: ST_TO_ADDR
// end ; 2 :
7335: GO 7578
7337: LD_INT 2
7339: DOUBLE
7340: EQUAL
7341: IFTRUE 7345
7343: GO 7518
7345: POP
// begin mikhailInBase = 2 ;
7346: LD_ADDR_EXP 22
7350: PUSH
7351: LD_INT 2
7353: ST_TO_ADDR
// SetSide ( Mikhail , 6 ) ;
7354: LD_EXP 8
7358: PPUSH
7359: LD_INT 6
7361: PPUSH
7362: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7366: LD_EXP 8
7370: PPUSH
7371: CALL_OW 122
// wait ( 0 0$1 ) ;
7375: LD_INT 35
7377: PPUSH
7378: CALL_OW 67
// ComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) + 2 ) ;
7382: LD_EXP 8
7386: PPUSH
7387: LD_EXP 8
7391: PPUSH
7392: CALL_OW 250
7396: PUSH
7397: LD_INT 2
7399: PLUS
7400: PPUSH
7401: LD_EXP 8
7405: PPUSH
7406: CALL_OW 251
7410: PUSH
7411: LD_INT 2
7413: PLUS
7414: PPUSH
7415: CALL_OW 111
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 1 , GetY ( Mikhail ) + 2 ) ;
7419: LD_EXP 8
7423: PPUSH
7424: LD_EXP 8
7428: PPUSH
7429: CALL_OW 250
7433: PUSH
7434: LD_INT 1
7436: PLUS
7437: PPUSH
7438: LD_EXP 8
7442: PPUSH
7443: CALL_OW 251
7447: PUSH
7448: LD_INT 2
7450: PLUS
7451: PPUSH
7452: CALL_OW 171
// AddComMoveXY ( Mikhail , GetX ( Mikhail ) + 2 , GetY ( Mikhail ) ) ;
7456: LD_EXP 8
7460: PPUSH
7461: LD_EXP 8
7465: PPUSH
7466: CALL_OW 250
7470: PUSH
7471: LD_INT 2
7473: PLUS
7474: PPUSH
7475: LD_EXP 8
7479: PPUSH
7480: CALL_OW 251
7484: PPUSH
7485: CALL_OW 171
// wait ( 0 0$5 ) ;
7489: LD_INT 175
7491: PPUSH
7492: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEnter ) ;
7496: LD_EXP 8
7500: PPUSH
7501: LD_INT 25
7503: PPUSH
7504: CALL_OW 113
// mikhailInBase = 4 ;
7508: LD_ADDR_EXP 22
7512: PUSH
7513: LD_INT 4
7515: ST_TO_ADDR
// end ; 3 :
7516: GO 7578
7518: LD_INT 3
7520: DOUBLE
7521: EQUAL
7522: IFTRUE 7526
7524: GO 7577
7526: POP
// begin SetSide ( Mikhail , 6 ) ;
7527: LD_EXP 8
7531: PPUSH
7532: LD_INT 6
7534: PPUSH
7535: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7539: LD_EXP 8
7543: PPUSH
7544: CALL_OW 122
// wait ( 0 0$1 ) ;
7548: LD_INT 35
7550: PPUSH
7551: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7555: LD_EXP 8
7559: PPUSH
7560: LD_INT 17
7562: PPUSH
7563: CALL_OW 113
// mikhailInbase = 3 ;
7567: LD_ADDR_EXP 22
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// end ;
7578: LD_VAR 0 1
7582: RET
// every 1 trigger IsInArea ( Mikhail , MikhailEnter ) and mikhailInBase = 4 do
7583: LD_EXP 8
7587: PPUSH
7588: LD_INT 25
7590: PPUSH
7591: CALL_OW 308
7595: PUSH
7596: LD_EXP 22
7600: PUSH
7601: LD_INT 4
7603: EQUAL
7604: AND
7605: IFFALSE 7709
7607: GO 7609
7609: DISABLE
// begin enable ;
7610: ENABLE
// mikhailInBase = 1 ;
7611: LD_ADDR_EXP 22
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// InGameOn ;
7619: CALL_OW 8
// SetSide ( dep1 , 6 ) ;
7623: LD_INT 1
7625: PPUSH
7626: LD_INT 6
7628: PPUSH
7629: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
7633: LD_INT 35
7635: PPUSH
7636: CALL_OW 67
// if Carry ( Mikhail ) then
7640: LD_EXP 8
7644: PPUSH
7645: CALL_OW 281
7649: IFFALSE 7660
// ComUnload ( Mikhail ) ;
7651: LD_EXP 8
7655: PPUSH
7656: CALL_OW 159
// AddComEnterUnit ( Mikhail , dep1 ) ;
7660: LD_EXP 8
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: CALL_OW 180
// until IsInUnit ( Mikhail ) ;
7672: LD_EXP 8
7676: PPUSH
7677: CALL_OW 310
7681: IFFALSE 7633
// SetSide ( dep1 , 1 ) ;
7683: LD_INT 1
7685: PPUSH
7686: LD_INT 1
7688: PPUSH
7689: CALL_OW 235
// SetSide ( Mikhail , 1 ) ;
7693: LD_EXP 8
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: CALL_OW 235
// InGameOff ;
7705: CALL_OW 9
// end ;
7709: END
// every 0 0$1 trigger IsInUnit ( Mikhail ) and not mikhailInBase = 3 do
7710: LD_EXP 8
7714: PPUSH
7715: CALL_OW 310
7719: PUSH
7720: LD_EXP 22
7724: PUSH
7725: LD_INT 3
7727: EQUAL
7728: NOT
7729: AND
7730: IFFALSE 7865
7732: GO 7734
7734: DISABLE
// begin enable ;
7735: ENABLE
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , IsInUnit ( Mikhail ) , 10 ] ] ) = 1 then
7736: LD_INT 22
7738: PUSH
7739: LD_INT 1
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 21
7748: PUSH
7749: LD_INT 1
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 91
7758: PUSH
7759: LD_EXP 8
7763: PPUSH
7764: CALL_OW 310
7768: PUSH
7769: LD_INT 10
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 69
7786: PUSH
7787: LD_INT 1
7789: EQUAL
7790: IFFALSE 7865
// begin mikhailStatus = 4 ;
7792: LD_ADDR_EXP 21
7796: PUSH
7797: LD_INT 4
7799: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
7800: LD_INT 1
7802: PPUSH
7803: LD_INT 6
7805: PPUSH
7806: LD_INT 2
7808: PPUSH
7809: LD_INT 1
7811: PPUSH
7812: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
7816: LD_EXP 8
7820: PPUSH
7821: LD_INT 6
7823: PPUSH
7824: CALL_OW 235
// ComExitBuilding ( Mikhail ) ;
7828: LD_EXP 8
7832: PPUSH
7833: CALL_OW 122
// wait ( 0 0$1 ) ;
7837: LD_INT 35
7839: PPUSH
7840: CALL_OW 67
// ComMoveToArea ( Mikhail , MikhailEscape ) ;
7844: LD_EXP 8
7848: PPUSH
7849: LD_INT 17
7851: PPUSH
7852: CALL_OW 113
// mikhailStatus = 3 ;
7856: LD_ADDR_EXP 21
7860: PUSH
7861: LD_INT 3
7863: ST_TO_ADDR
// disable ;
7864: DISABLE
// end ; end ;
7865: END
// every 0 0$1 trigger GetDistUnits ( JMM , mikhailDepot ) < 5 and mikhailStatus = 3 and not mikhailInBase = 3 do var tmp ;
7866: LD_EXP 1
7870: PPUSH
7871: LD_EXP 23
7875: PPUSH
7876: CALL_OW 296
7880: PUSH
7881: LD_INT 5
7883: LESS
7884: PUSH
7885: LD_EXP 21
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: AND
7894: PUSH
7895: LD_EXP 22
7899: PUSH
7900: LD_INT 3
7902: EQUAL
7903: NOT
7904: AND
7905: IFFALSE 8136
7907: GO 7909
7909: DISABLE
7910: LD_INT 0
7912: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ JMM , Khatam ] ;
7913: LD_ADDR_VAR 0 1
7917: PUSH
7918: LD_INT 22
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 21
7930: PUSH
7931: LD_INT 1
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 26
7940: PUSH
7941: LD_INT 1
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: PUSH
7958: LD_EXP 1
7962: PUSH
7963: LD_EXP 5
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: DIFF
7972: ST_TO_ADDR
// if not tmp then
7973: LD_VAR 0 1
7977: NOT
7978: IFFALSE 7982
// exit ;
7980: GO 8136
// DialogueOn ;
7982: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
7986: LD_EXP 1
7990: PPUSH
7991: LD_STRING D7-JMM-1
7993: PPUSH
7994: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-1 ) ;
7998: LD_VAR 0 1
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PPUSH
8007: LD_STRING D7-Sol1-1
8009: PPUSH
8010: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8014: LD_EXP 1
8018: PPUSH
8019: LD_STRING D7-JMM-2
8021: PPUSH
8022: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-2 ) ;
8026: LD_VAR 0 1
8030: PUSH
8031: LD_INT 1
8033: ARRAY
8034: PPUSH
8035: LD_STRING D7-Sol1-2
8037: PPUSH
8038: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
8042: LD_EXP 1
8046: PPUSH
8047: LD_STRING D7-JMM-3
8049: PPUSH
8050: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-3 ) ;
8054: LD_VAR 0 1
8058: PUSH
8059: LD_INT 1
8061: ARRAY
8062: PPUSH
8063: LD_STRING D7-Sol1-3
8065: PPUSH
8066: CALL_OW 88
// if IsOK ( Cyrus ) and IsOK ( Lisa ) then
8070: LD_EXP 3
8074: PPUSH
8075: CALL_OW 302
8079: PUSH
8080: LD_EXP 4
8084: PPUSH
8085: CALL_OW 302
8089: AND
8090: IFFALSE 8132
// begin Say ( Cyrus , D7-Cyrus-3 ) ;
8092: LD_EXP 3
8096: PPUSH
8097: LD_STRING D7-Cyrus-3
8099: PPUSH
8100: CALL_OW 88
// Say ( tmp [ 1 ] , D7-Sol1-4 ) ;
8104: LD_VAR 0 1
8108: PUSH
8109: LD_INT 1
8111: ARRAY
8112: PPUSH
8113: LD_STRING D7-Sol1-4
8115: PPUSH
8116: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
8120: LD_EXP 4
8124: PPUSH
8125: LD_STRING D7-Lisa-4
8127: PPUSH
8128: CALL_OW 88
// end ; DialogueOff ;
8132: CALL_OW 7
// end ;
8136: PPOPN 1
8138: END
// every 0 0$1 trigger IsDying ( Mikhail ) and mikhailStatus = 3 do
8139: LD_EXP 8
8143: PPUSH
8144: CALL_OW 303
8148: PUSH
8149: LD_EXP 21
8153: PUSH
8154: LD_INT 3
8156: EQUAL
8157: AND
8158: IFFALSE 8172
8160: GO 8162
8162: DISABLE
// begin enable ;
8163: ENABLE
// mikhailStatus = 2 ;
8164: LD_ADDR_EXP 21
8168: PUSH
8169: LD_INT 2
8171: ST_TO_ADDR
// end ;
8172: END
// every 0 0$1 trigger IsInArea ( Mikhail , MikhailEscape ) and GetSide ( Mikhail ) = 6 do
8173: LD_EXP 8
8177: PPUSH
8178: LD_INT 17
8180: PPUSH
8181: CALL_OW 308
8185: PUSH
8186: LD_EXP 8
8190: PPUSH
8191: CALL_OW 255
8195: PUSH
8196: LD_INT 6
8198: EQUAL
8199: AND
8200: IFFALSE 8233
8202: GO 8204
8204: DISABLE
// begin if not mikhailInBase = 3 then
8205: LD_EXP 22
8209: PUSH
8210: LD_INT 3
8212: EQUAL
8213: NOT
8214: IFFALSE 8224
// mikhailStatus = 3 ;
8216: LD_ADDR_EXP 21
8220: PUSH
8221: LD_INT 3
8223: ST_TO_ADDR
// RemoveUnit ( Mikhail ) ;
8224: LD_EXP 8
8228: PPUSH
8229: CALL_OW 64
// end ;
8233: END
// every 0 0$1 trigger mikhailStatus = 3 and GetSide ( Mikhail ) = 6 do var i , attacker ;
8234: LD_EXP 21
8238: PUSH
8239: LD_INT 3
8241: EQUAL
8242: PUSH
8243: LD_EXP 8
8247: PPUSH
8248: CALL_OW 255
8252: PUSH
8253: LD_INT 6
8255: EQUAL
8256: AND
8257: IFFALSE 8423
8259: GO 8261
8261: DISABLE
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
// begin enable ;
8266: ENABLE
// if IsOk ( Mikhail ) then
8267: LD_EXP 8
8271: PPUSH
8272: CALL_OW 302
8276: IFFALSE 8423
// begin attacker := Nearest ( Mikhail , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ) ;
8278: LD_ADDR_VAR 0 2
8282: PUSH
8283: LD_EXP 8
8287: PPUSH
8288: LD_INT 22
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 21
8300: PUSH
8301: LD_INT 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PPUSH
8312: CALL_OW 69
8316: PPUSH
8317: CALL 10172 0 2
8321: ST_TO_ADDR
// if GetDistUnits ( attacker , Mikhail ) < 8 then
8322: LD_VAR 0 2
8326: PPUSH
8327: LD_EXP 8
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 8
8339: LESS
8340: IFFALSE 8423
// begin if GetSex ( attacker ) = sex_male then
8342: LD_VAR 0 2
8346: PPUSH
8347: CALL_OW 258
8351: PUSH
8352: LD_INT 1
8354: EQUAL
8355: IFFALSE 8391
// begin disable ;
8357: DISABLE
// Say ( attacker , D7a-Sol1-1 ) ;
8358: LD_VAR 0 2
8362: PPUSH
8363: LD_STRING D7a-Sol1-1
8365: PPUSH
8366: CALL_OW 88
// wait ( 0 0$2 ) ;
8370: LD_INT 70
8372: PPUSH
8373: CALL_OW 67
// Say ( attacker , D7a-Sol1-1a ) ;
8377: LD_VAR 0 2
8381: PPUSH
8382: LD_STRING D7a-Sol1-1a
8384: PPUSH
8385: CALL_OW 88
// end else
8389: GO 8423
// begin disable ;
8391: DISABLE
// Say ( attacker , D7a-FSol1-1 ) ;
8392: LD_VAR 0 2
8396: PPUSH
8397: LD_STRING D7a-FSol1-1
8399: PPUSH
8400: CALL_OW 88
// wait ( 0 0$2 ) ;
8404: LD_INT 70
8406: PPUSH
8407: CALL_OW 67
// Say ( attacker , D7a-FSol1-1a ) ;
8411: LD_VAR 0 2
8415: PPUSH
8416: LD_STRING D7a-FSol1-1a
8418: PPUSH
8419: CALL_OW 88
// end ; end ; end ; end ;
8423: PPOPN 2
8425: END
// every 0 0$1 trigger LastBattle = 1 and FilterUnitsInArea ( NorthBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 2 and FilterUnitsInArea ( NorthBase , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) = 0 do
8426: LD_EXP 27
8430: PUSH
8431: LD_INT 1
8433: EQUAL
8434: PUSH
8435: LD_INT 22
8437: PPUSH
8438: LD_INT 22
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 21
8450: PUSH
8451: LD_INT 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PPUSH
8462: CALL_OW 70
8466: PUSH
8467: LD_INT 2
8469: GREATER
8470: AND
8471: PUSH
8472: LD_INT 22
8474: PPUSH
8475: LD_INT 22
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 2
8487: PUSH
8488: LD_INT 21
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 59
8500: PUSH
8501: EMPTY
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PPUSH
8513: CALL_OW 70
8517: PUSH
8518: LD_INT 0
8520: EQUAL
8521: AND
8522: IFFALSE 8537
8524: GO 8526
8526: DISABLE
// SetSide ( dep1 , 3 ) ;
8527: LD_INT 1
8529: PPUSH
8530: LD_INT 3
8532: PPUSH
8533: CALL_OW 235
8537: END
// every 0 0$1 trigger tigersRespawn = 1 and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , 14 ] ] ) = 0 do var i , tmp ;
8538: LD_EXP 30
8542: PUSH
8543: LD_INT 1
8545: EQUAL
8546: PUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 0
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 25
8559: PUSH
8560: LD_INT 14
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: PUSH
8576: LD_INT 0
8578: EQUAL
8579: AND
8580: IFFALSE 8681
8582: GO 8584
8584: DISABLE
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
8589: LD_ADDR_VAR 0 2
8593: PUSH
8594: LD_INT 22
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: LD_INT 21
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 23
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PPUSH
8629: CALL_OW 69
8633: ST_TO_ADDR
// for i in tmp do
8634: LD_ADDR_VAR 0 1
8638: PUSH
8639: LD_VAR 0 2
8643: PUSH
8644: FOR_IN
8645: IFFALSE 8672
// AddExperience ( i , rand ( 1 , 4 ) , 300 ) ;
8647: LD_VAR 0 1
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_INT 4
8657: PPUSH
8658: CALL_OW 12
8662: PPUSH
8663: LD_INT 300
8665: PPUSH
8666: CALL_OW 492
8670: GO 8644
8672: POP
8673: POP
// SetAchievement ( ACH_TIGER ) ;
8674: LD_STRING ACH_TIGER
8676: PPUSH
8677: CALL_OW 543
// end ;
8681: PPOPN 2
8683: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_cargo_bay ] ] ) >= 2 do
8684: LD_INT 22
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 34
8696: PUSH
8697: LD_INT 51
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PPUSH
8708: CALL_OW 69
8712: PUSH
8713: LD_INT 2
8715: GREATEREQUAL
8716: IFFALSE 8728
8718: GO 8720
8720: DISABLE
// SetAchievement ( ACH_CARGO ) ; end_of_file
8721: LD_STRING ACH_CARGO
8723: PPUSH
8724: CALL_OW 543
8728: END
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , un ; begin
8729: LD_INT 0
8731: PPUSH
8732: PPUSH
8733: PPUSH
// for i = 1 to count do
8734: LD_ADDR_VAR 0 8
8738: PUSH
8739: DOUBLE
8740: LD_INT 1
8742: DEC
8743: ST_TO_ADDR
8744: LD_VAR 0 6
8748: PUSH
8749: FOR_TO
8750: IFFALSE 8831
// begin uc_side = side ;
8752: LD_ADDR_OWVAR 20
8756: PUSH
8757: LD_VAR 0 1
8761: ST_TO_ADDR
// uc_nation = nation ;
8762: LD_ADDR_OWVAR 21
8766: PUSH
8767: LD_VAR 0 2
8771: ST_TO_ADDR
// hc_gallery =  ;
8772: LD_ADDR_OWVAR 33
8776: PUSH
8777: LD_STRING 
8779: ST_TO_ADDR
// hc_name =  ;
8780: LD_ADDR_OWVAR 26
8784: PUSH
8785: LD_STRING 
8787: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
8788: LD_INT 0
8790: PPUSH
8791: LD_VAR 0 5
8795: PPUSH
8796: LD_VAR 0 4
8800: PPUSH
8801: CALL_OW 380
// un = CreateHuman ;
8805: LD_ADDR_VAR 0 9
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
8815: LD_VAR 0 9
8819: PPUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: CALL_OW 52
// end ;
8829: GO 8749
8831: POP
8832: POP
// end ;
8833: LD_VAR 0 7
8837: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8838: LD_INT 0
8840: PPUSH
8841: PPUSH
8842: PPUSH
// uc_side := GetSide ( b ) ;
8843: LD_ADDR_OWVAR 20
8847: PUSH
8848: LD_VAR 0 2
8852: PPUSH
8853: CALL_OW 255
8857: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8858: LD_ADDR_OWVAR 21
8862: PUSH
8863: LD_VAR 0 2
8867: PPUSH
8868: CALL_OW 248
8872: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8873: LD_INT 0
8875: PPUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 380
// un = CreateHuman ;
8888: LD_ADDR_VAR 0 4
8892: PUSH
8893: CALL_OW 44
8897: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8898: LD_ADDR_VAR 0 5
8902: PUSH
8903: LD_VAR 0 2
8907: PPUSH
8908: CALL_OW 254
8912: PUSH
8913: LD_INT 3
8915: MINUS
8916: ST_TO_ADDR
// if dir < 0 then
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 0
8924: LESS
8925: IFFALSE 8941
// dir := 6 + dir ;
8927: LD_ADDR_VAR 0 5
8931: PUSH
8932: LD_INT 6
8934: PUSH
8935: LD_VAR 0 5
8939: PLUS
8940: ST_TO_ADDR
// SetDir ( un , dir ) ;
8941: LD_VAR 0 4
8945: PPUSH
8946: LD_VAR 0 5
8950: PPUSH
8951: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8955: LD_VAR 0 4
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 52
// end ;
8969: LD_VAR 0 3
8973: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkList ; begin
8974: LD_INT 0
8976: PPUSH
8977: PPUSH
8978: PPUSH
8979: PPUSH
// engineerOkList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
8980: LD_ADDR_VAR 0 7
8984: PUSH
8985: LD_INT 22
8987: PUSH
8988: LD_VAR 0 1
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 24
9009: PUSH
9010: LD_INT 1000
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9027: LD_ADDR_VAR 0 5
9031: PUSH
9032: LD_VAR 0 3
9036: PPUSH
9037: LD_INT 22
9039: PUSH
9040: LD_VAR 0 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 21
9051: PUSH
9052: LD_INT 3
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 3
9061: PUSH
9062: LD_INT 24
9064: PUSH
9065: LD_INT 1000
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: EMPTY
9082: LIST
9083: PPUSH
9084: CALL_OW 70
9088: ST_TO_ADDR
// if not buildingsList and not engineerOkList then
9089: LD_VAR 0 5
9093: NOT
9094: PUSH
9095: LD_VAR 0 7
9099: NOT
9100: AND
9101: IFFALSE 9105
// exit ;
9103: GO 9301
// if not buildingsList and UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) and IsOk ( building ) then
9105: LD_VAR 0 5
9109: NOT
9110: PUSH
9111: LD_VAR 0 7
9115: PPUSH
9116: LD_INT 3
9118: PUSH
9119: LD_INT 54
9121: PUSH
9122: EMPTY
9123: LIST
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 72
9133: AND
9134: PUSH
9135: LD_VAR 0 2
9139: PPUSH
9140: CALL_OW 302
9144: AND
9145: IFFALSE 9179
// ComEnterUnit ( UnitFilter ( engineerOkList , [ f_not , [ f_inside ] ] ) , building ) ;
9147: LD_VAR 0 7
9151: PPUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 54
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: PPUSH
9170: LD_VAR 0 2
9174: PPUSH
9175: CALL_OW 120
// if buildingsList then
9179: LD_VAR 0 5
9183: IFFALSE 9301
// begin for i in engineerOkList do
9185: LD_ADDR_VAR 0 6
9189: PUSH
9190: LD_VAR 0 7
9194: PUSH
9195: FOR_IN
9196: IFFALSE 9299
// if IsInUnit ( i ) then
9198: LD_VAR 0 6
9202: PPUSH
9203: CALL_OW 310
9207: IFFALSE 9220
// ComExitBuilding ( i ) else
9209: LD_VAR 0 6
9213: PPUSH
9214: CALL_OW 122
9218: GO 9297
// if GetLives ( i ) > 650 then
9220: LD_VAR 0 6
9224: PPUSH
9225: CALL_OW 256
9229: PUSH
9230: LD_INT 650
9232: GREATER
9233: IFFALSE 9261
// ComRepairBuilding ( i , NearestUnitToUnit ( buildingsList , i ) ) else
9235: LD_VAR 0 6
9239: PPUSH
9240: LD_VAR 0 5
9244: PPUSH
9245: LD_VAR 0 6
9249: PPUSH
9250: CALL_OW 74
9254: PPUSH
9255: CALL_OW 130
9259: GO 9297
// if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9261: LD_VAR 0 6
9265: PPUSH
9266: LD_INT 56
9268: PPUSH
9269: LD_INT 10
9271: PPUSH
9272: CALL_OW 297
9276: PUSH
9277: LD_INT 8
9279: GREATER
9280: IFFALSE 9297
// ComMoveXY ( i , 56 , 10 ) ;
9282: LD_VAR 0 6
9286: PPUSH
9287: LD_INT 56
9289: PPUSH
9290: LD_INT 10
9292: PPUSH
9293: CALL_OW 111
9297: GO 9195
9299: POP
9300: POP
// end ; end ;
9301: LD_VAR 0 4
9305: RET
// export function HealUnitInBase ( side , healArea , baseArea , building ) ; var sciList , i , damageUnits ; begin
9306: LD_INT 0
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
// sciList := FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
9312: LD_ADDR_VAR 0 6
9316: PUSH
9317: LD_INT 22
9319: PUSH
9320: LD_VAR 0 1
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 4
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 24
9341: PUSH
9342: LD_INT 250
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: PPUSH
9354: CALL_OW 69
9358: ST_TO_ADDR
// damageUnits := FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_VAR 0 3
9368: PPUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 21
9383: PUSH
9384: LD_INT 1
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: LD_INT 24
9396: PUSH
9397: LD_INT 650
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 70
9417: ST_TO_ADDR
// if not damageUnits and not sciList then
9418: LD_VAR 0 8
9422: NOT
9423: PUSH
9424: LD_VAR 0 6
9428: NOT
9429: AND
9430: IFFALSE 9434
// exit ;
9432: GO 9573
// if damageUnits then
9434: LD_VAR 0 8
9438: IFFALSE 9517
// begin for i in sciList do
9440: LD_ADDR_VAR 0 7
9444: PUSH
9445: LD_VAR 0 6
9449: PUSH
9450: FOR_IN
9451: IFFALSE 9513
// if IsInUnit ( i ) then
9453: LD_VAR 0 7
9457: PPUSH
9458: CALL_OW 310
9462: IFFALSE 9475
// ComExitBuilding ( i ) else
9464: LD_VAR 0 7
9468: PPUSH
9469: CALL_OW 122
9473: GO 9511
// if not HasTask ( i ) then
9475: LD_VAR 0 7
9479: PPUSH
9480: CALL_OW 314
9484: NOT
9485: IFFALSE 9511
// ComHeal ( i , NearestUnitToUnit ( damageUnits , i ) ) ;
9487: LD_VAR 0 7
9491: PPUSH
9492: LD_VAR 0 8
9496: PPUSH
9497: LD_VAR 0 7
9501: PPUSH
9502: CALL_OW 74
9506: PPUSH
9507: CALL_OW 128
9511: GO 9450
9513: POP
9514: POP
// end else
9515: GO 9573
// if UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) then
9517: LD_VAR 0 6
9521: PPUSH
9522: LD_INT 3
9524: PUSH
9525: LD_INT 54
9527: PUSH
9528: EMPTY
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PPUSH
9535: CALL_OW 72
9539: IFFALSE 9573
// ComEnterUnit ( UnitFilter ( sciList , [ f_not , [ f_inside ] ] ) , building ) ;
9541: LD_VAR 0 6
9545: PPUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 54
9551: PUSH
9552: EMPTY
9553: LIST
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PPUSH
9559: CALL_OW 72
9563: PPUSH
9564: LD_VAR 0 4
9568: PPUSH
9569: CALL_OW 120
// end ;
9573: LD_VAR 0 5
9577: RET
// export function DefendBases ( area , enemySide , defendersList , building ) ; var i , enemy , nearestUnit ; begin
9578: LD_INT 0
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
// if not defendersList then
9584: LD_VAR 0 3
9588: NOT
9589: IFFALSE 9593
// exit ;
9591: GO 9975
// enemy := FilterUnitsInArea ( area , [ [ f_side , enemySide ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9593: LD_ADDR_VAR 0 7
9597: PUSH
9598: LD_VAR 0 1
9602: PPUSH
9603: LD_INT 22
9605: PUSH
9606: LD_VAR 0 2
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: LD_INT 21
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 21
9630: PUSH
9631: LD_INT 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 70
9651: ST_TO_ADDR
// if enemy then
9652: LD_VAR 0 7
9656: IFFALSE 9877
// begin for i in defendersList do
9658: LD_ADDR_VAR 0 6
9662: PUSH
9663: LD_VAR 0 3
9667: PUSH
9668: FOR_IN
9669: IFFALSE 9873
// begin if IsInUnit ( i ) and GetLives ( i ) > 500 then
9671: LD_VAR 0 6
9675: PPUSH
9676: CALL_OW 310
9680: PUSH
9681: LD_VAR 0 6
9685: PPUSH
9686: CALL_OW 256
9690: PUSH
9691: LD_INT 500
9693: GREATER
9694: AND
9695: IFFALSE 9708
// ComExitBuilding ( i ) else
9697: LD_VAR 0 6
9701: PPUSH
9702: CALL_OW 122
9706: GO 9871
// if GetLives ( i ) > 650 then
9708: LD_VAR 0 6
9712: PPUSH
9713: CALL_OW 256
9717: PUSH
9718: LD_INT 650
9720: GREATER
9721: IFFALSE 9774
// begin nearestUnit := NearestUnitToUnit ( enemy , i ) ;
9723: LD_ADDR_VAR 0 8
9727: PUSH
9728: LD_VAR 0 7
9732: PPUSH
9733: LD_VAR 0 6
9737: PPUSH
9738: CALL_OW 74
9742: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( nearestUnit ) , GetY ( nearestUnit ) ) ;
9743: LD_VAR 0 6
9747: PPUSH
9748: LD_VAR 0 8
9752: PPUSH
9753: CALL_OW 250
9757: PPUSH
9758: LD_VAR 0 8
9762: PPUSH
9763: CALL_OW 251
9767: PPUSH
9768: CALL_OW 114
// end else
9772: GO 9871
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
9774: LD_INT 22
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 25
9786: PUSH
9787: LD_INT 4
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 69
9802: IFFALSE 9842
// begin if GetDistUnitXY ( i , 56 , 10 ) > 8 then
9804: LD_VAR 0 6
9808: PPUSH
9809: LD_INT 56
9811: PPUSH
9812: LD_INT 10
9814: PPUSH
9815: CALL_OW 297
9819: PUSH
9820: LD_INT 8
9822: GREATER
9823: IFFALSE 9840
// ComMoveXY ( i , 56 , 10 ) ;
9825: LD_VAR 0 6
9829: PPUSH
9830: LD_INT 56
9832: PPUSH
9833: LD_INT 10
9835: PPUSH
9836: CALL_OW 111
// end else
9840: GO 9871
// if GetLives ( i ) <= 500 then
9842: LD_VAR 0 6
9846: PPUSH
9847: CALL_OW 256
9851: PUSH
9852: LD_INT 500
9854: LESSEQUAL
9855: IFFALSE 9871
// ComEnterUnit ( i , building ) ;
9857: LD_VAR 0 6
9861: PPUSH
9862: LD_VAR 0 4
9866: PPUSH
9867: CALL_OW 120
// end ;
9871: GO 9668
9873: POP
9874: POP
// end else
9875: GO 9975
// if UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) then
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_INT 56
9884: PUSH
9885: EMPTY
9886: LIST
9887: PUSH
9888: LD_INT 3
9890: PUSH
9891: LD_INT 60
9893: PUSH
9894: EMPTY
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 24
9903: PUSH
9904: LD_INT 1000
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: PPUSH
9916: CALL_OW 72
9920: IFFALSE 9975
// ComEnterUnit ( UnitFilter ( defendersList , [ [ f_outside ] , [ f_not , [ f_hastask ] ] , [ f_lives , 1000 ] ] ) , building ) ;
9922: LD_VAR 0 3
9926: PPUSH
9927: LD_INT 56
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: LD_INT 60
9938: PUSH
9939: EMPTY
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 24
9948: PUSH
9949: LD_INT 1000
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 72
9965: PPUSH
9966: LD_VAR 0 4
9970: PPUSH
9971: CALL_OW 120
// end ;
9975: LD_VAR 0 5
9979: RET
// export function RussianTrap ; var i ; begin
9980: LD_INT 0
9982: PPUSH
9983: PPUSH
// if GetSide ( Brian ) = 4 then
9984: LD_EXP 6
9988: PPUSH
9989: CALL_OW 255
9993: PUSH
9994: LD_INT 4
9996: EQUAL
9997: IFFALSE 10020
// SetLives ( [ Brian , Jerry ] , 0 ) ;
9999: LD_EXP 6
10003: PUSH
10004: LD_EXP 7
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: LD_INT 0
10015: PPUSH
10016: CALL_OW 234
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_INT 3
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 69
10053: PUSH
10054: FOR_IN
10055: IFFALSE 10165
// begin ComExitBuilding ( i ) ;
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL_OW 122
// wait ( 0 0$1 ) ;
10066: LD_INT 35
10068: PPUSH
10069: CALL_OW 67
// AddComAgressiveMove ( i , 120 , 56 ) ;
10073: LD_VAR 0 2
10077: PPUSH
10078: LD_INT 120
10080: PPUSH
10081: LD_INT 56
10083: PPUSH
10084: CALL_OW 174
// AddComAgressiveMove ( i , 111 , 37 ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_INT 111
10095: PPUSH
10096: LD_INT 37
10098: PPUSH
10099: CALL_OW 174
// if GetSide ( arm2 ) = 3 and IsOk ( arm2 ) then
10103: LD_INT 33
10105: PPUSH
10106: CALL_OW 255
10110: PUSH
10111: LD_INT 3
10113: EQUAL
10114: PUSH
10115: LD_INT 33
10117: PPUSH
10118: CALL_OW 302
10122: AND
10123: IFFALSE 10139
// AddComEnterUnit ( i , arm2 ) else
10125: LD_VAR 0 2
10129: PPUSH
10130: LD_INT 33
10132: PPUSH
10133: CALL_OW 180
10137: GO 10163
// begin AddComCrawl ( i ) ;
10139: LD_VAR 0 2
10143: PPUSH
10144: CALL_OW 197
// AddComAgressiveMove ( i , 109 , 30 ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: LD_INT 109
10155: PPUSH
10156: LD_INT 30
10158: PPUSH
10159: CALL_OW 174
// end ; end ;
10163: GO 10054
10165: POP
10166: POP
// end ;
10167: LD_VAR 0 1
10171: RET
// export function Nearest ( un , units ) ; var nearestDist , nearestUn , sold , dist ; begin
10172: LD_INT 0
10174: PPUSH
10175: PPUSH
10176: PPUSH
10177: PPUSH
10178: PPUSH
// nearestDist := 1000 ;
10179: LD_ADDR_VAR 0 4
10183: PUSH
10184: LD_INT 1000
10186: ST_TO_ADDR
// nearestUn := un ;
10187: LD_ADDR_VAR 0 5
10191: PUSH
10192: LD_VAR 0 1
10196: ST_TO_ADDR
// for sold in units do
10197: LD_ADDR_VAR 0 6
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: FOR_IN
10208: IFFALSE 10264
// begin dist := GetDistUnits ( un , sold ) ;
10210: LD_ADDR_VAR 0 7
10214: PUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_VAR 0 6
10224: PPUSH
10225: CALL_OW 296
10229: ST_TO_ADDR
// if dist < nearestDist then
10230: LD_VAR 0 7
10234: PUSH
10235: LD_VAR 0 4
10239: LESS
10240: IFFALSE 10262
// begin nearestUn := sold ;
10242: LD_ADDR_VAR 0 5
10246: PUSH
10247: LD_VAR 0 6
10251: ST_TO_ADDR
// nearestDist := dist ;
10252: LD_ADDR_VAR 0 4
10256: PUSH
10257: LD_VAR 0 7
10261: ST_TO_ADDR
// end ; end ;
10262: GO 10207
10264: POP
10265: POP
// result := NearestUn ;
10266: LD_ADDR_VAR 0 3
10270: PUSH
10271: LD_VAR 0 5
10275: ST_TO_ADDR
// end ;
10276: LD_VAR 0 3
10280: RET
// export function PrepareDifficulty ; begin
10281: LD_INT 0
10283: PPUSH
// if Difficulty = 1 then
10284: LD_OWVAR 67
10288: PUSH
10289: LD_INT 1
10291: EQUAL
10292: IFFALSE 10355
// begin RemoveUnit ( brw2 ) ;
10294: LD_INT 9
10296: PPUSH
10297: CALL_OW 64
// RemoveUnit ( brw3 ) ;
10301: LD_INT 30
10303: PPUSH
10304: CALL_OW 64
// RemoveUnit ( brw4 ) ;
10308: LD_INT 52
10310: PPUSH
10311: CALL_OW 64
// RemoveUnit ( brw5 ) ;
10315: LD_INT 63
10317: PPUSH
10318: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 60 ) ;
10322: LD_INT 5
10324: PUSH
10325: LD_INT 4
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: LD_INT 60
10334: PPUSH
10335: CALL_OW 240
// RuSoldMinLevel = 0 ;
10339: LD_ADDR_EXP 13
10343: PUSH
10344: LD_INT 0
10346: ST_TO_ADDR
// RuSoldMaxLevel = 1 ;
10347: LD_ADDR_EXP 14
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// end ; if Difficulty = 2 then
10355: LD_OWVAR 67
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: IFFALSE 10405
// begin RemoveUnit ( brw4 ) ;
10365: LD_INT 52
10367: PPUSH
10368: CALL_OW 64
// SetFuel ( [ vehicle1 , vehicle2 ] , 50 ) ;
10372: LD_INT 5
10374: PUSH
10375: LD_INT 4
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: LD_INT 50
10384: PPUSH
10385: CALL_OW 240
// RuSoldMinLevel = 1 ;
10389: LD_ADDR_EXP 13
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
10397: LD_ADDR_EXP 14
10401: PUSH
10402: LD_INT 2
10404: ST_TO_ADDR
// end ; if Difficulty >= 3 then
10405: LD_OWVAR 67
10409: PUSH
10410: LD_INT 3
10412: GREATEREQUAL
10413: IFFALSE 10448
// begin SetFuel ( [ vehicle1 , vehicle2 ] , 40 ) ;
10415: LD_INT 5
10417: PUSH
10418: LD_INT 4
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PPUSH
10425: LD_INT 40
10427: PPUSH
10428: CALL_OW 240
// RuSoldMinLevel = 2 ;
10432: LD_ADDR_EXP 13
10436: PUSH
10437: LD_INT 2
10439: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
10440: LD_ADDR_EXP 14
10444: PUSH
10445: LD_INT 3
10447: ST_TO_ADDR
// end ; end ;
10448: LD_VAR 0 1
10452: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
// if not vehicles then
10458: LD_VAR 0 1
10462: NOT
10463: IFFALSE 10467
// exit ;
10465: GO 10597
// tmp := [ ] ;
10467: LD_ADDR_VAR 0 5
10471: PUSH
10472: EMPTY
10473: ST_TO_ADDR
// for i in vehicles do
10474: LD_ADDR_VAR 0 4
10478: PUSH
10479: LD_VAR 0 1
10483: PUSH
10484: FOR_IN
10485: IFFALSE 10581
// tmp := Replace ( tmp , tmp + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
10487: LD_ADDR_VAR 0 5
10491: PUSH
10492: LD_VAR 0 5
10496: PPUSH
10497: LD_VAR 0 5
10501: PUSH
10502: LD_INT 1
10504: PLUS
10505: PPUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: CALL_OW 265
10515: PUSH
10516: LD_VAR 0 4
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: CALL_OW 263
10535: PUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 264
10545: PUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: CALL_OW 261
10555: PUSH
10556: LD_VAR 0 4
10560: PPUSH
10561: CALL_OW 256
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 1
10578: ST_TO_ADDR
10579: GO 10484
10581: POP
10582: POP
// SaveVariable ( tmp , ident ) ;
10583: LD_VAR 0 5
10587: PPUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 39
// end ; end_of_file
10597: LD_VAR 0 3
10601: RET
// export function PrepareHeroes ; var plive , prefix ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
10606: PPUSH
// prefix := 01_ ;
10607: LD_ADDR_VAR 0 3
10611: PUSH
10612: LD_STRING 01_
10614: ST_TO_ADDR
// uc_side := 1 ;
10615: LD_ADDR_OWVAR 20
10619: PUSH
10620: LD_INT 1
10622: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debug ) , prefix ) ;
10623: LD_ADDR_EXP 1
10627: PUSH
10628: LD_STRING JMM
10630: PPUSH
10631: LD_EXP 34
10635: NOT
10636: PPUSH
10637: LD_VAR 0 3
10641: PPUSH
10642: CALL 34201 0 3
10646: ST_TO_ADDR
// plive := LoadVariable ( 01_JMMLifePoints_1 , 1000 ) ;
10647: LD_ADDR_VAR 0 2
10651: PUSH
10652: LD_STRING 01_JMMLifePoints_1
10654: PPUSH
10655: LD_INT 1000
10657: PPUSH
10658: CALL_OW 30
10662: ST_TO_ADDR
// if plive < 250 then
10663: LD_VAR 0 2
10667: PUSH
10668: LD_INT 250
10670: LESS
10671: IFFALSE 10681
// plive := 300 ;
10673: LD_ADDR_VAR 0 2
10677: PUSH
10678: LD_INT 300
10680: ST_TO_ADDR
// SetLives ( JMM , plive ) ;
10681: LD_EXP 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: CALL_OW 234
// Powell := NewCharacter ( Powell ) ;
10695: LD_ADDR_EXP 9
10699: PUSH
10700: LD_STRING Powell
10702: PPUSH
10703: CALL_OW 25
10707: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , prefix ) ;
10708: LD_ADDR_EXP 2
10712: PUSH
10713: LD_STRING Bobby
10715: PPUSH
10716: LD_EXP 34
10720: NOT
10721: PPUSH
10722: LD_VAR 0 3
10726: PPUSH
10727: CALL 34201 0 3
10731: ST_TO_ADDR
// if Bobby then
10732: LD_EXP 2
10736: IFFALSE 10786
// begin plive := LoadVariable ( 01_BobbyLifePoints_1 , 1000 ) ;
10738: LD_ADDR_VAR 0 2
10742: PUSH
10743: LD_STRING 01_BobbyLifePoints_1
10745: PPUSH
10746: LD_INT 1000
10748: PPUSH
10749: CALL_OW 30
10753: ST_TO_ADDR
// if plive < 250 then
10754: LD_VAR 0 2
10758: PUSH
10759: LD_INT 250
10761: LESS
10762: IFFALSE 10772
// plive := 300 ;
10764: LD_ADDR_VAR 0 2
10768: PUSH
10769: LD_INT 300
10771: ST_TO_ADDR
// SetLives ( Bobby , plive ) ;
10772: LD_EXP 2
10776: PPUSH
10777: LD_VAR 0 2
10781: PPUSH
10782: CALL_OW 234
// end ; Cyrus := PrepareUnit ( Cyrus , ( not debug ) , prefix ) ;
10786: LD_ADDR_EXP 3
10790: PUSH
10791: LD_STRING Cyrus
10793: PPUSH
10794: LD_EXP 34
10798: NOT
10799: PPUSH
10800: LD_VAR 0 3
10804: PPUSH
10805: CALL 34201 0 3
10809: ST_TO_ADDR
// if Cyrus then
10810: LD_EXP 3
10814: IFFALSE 10864
// begin plive := LoadVariable ( 01_CyrusLifePoints_1 , 1000 ) ;
10816: LD_ADDR_VAR 0 2
10820: PUSH
10821: LD_STRING 01_CyrusLifePoints_1
10823: PPUSH
10824: LD_INT 1000
10826: PPUSH
10827: CALL_OW 30
10831: ST_TO_ADDR
// if plive < 250 then
10832: LD_VAR 0 2
10836: PUSH
10837: LD_INT 250
10839: LESS
10840: IFFALSE 10850
// plive := 300 ;
10842: LD_ADDR_VAR 0 2
10846: PUSH
10847: LD_INT 300
10849: ST_TO_ADDR
// SetLives ( Cyrus , plive ) ;
10850: LD_EXP 3
10854: PPUSH
10855: LD_VAR 0 2
10859: PPUSH
10860: CALL_OW 234
// end ; Khatam := NewCharacter ( Khatam ) ;
10864: LD_ADDR_EXP 5
10868: PUSH
10869: LD_STRING Khatam
10871: PPUSH
10872: CALL_OW 25
10876: ST_TO_ADDR
// uc_side := 4 ;
10877: LD_ADDR_OWVAR 20
10881: PUSH
10882: LD_INT 4
10884: ST_TO_ADDR
// Lisa = NewCharacter ( Lisa ) ;
10885: LD_ADDR_EXP 4
10889: PUSH
10890: LD_STRING Lisa
10892: PPUSH
10893: CALL_OW 25
10897: ST_TO_ADDR
// PlaceUnitArea ( JMM , StartArea , false ) ;
10898: LD_EXP 1
10902: PPUSH
10903: LD_INT 3
10905: PPUSH
10906: LD_INT 0
10908: PPUSH
10909: CALL_OW 49
// PlaceUnitArea ( Bobby , StartArea , false ) ;
10913: LD_EXP 2
10917: PPUSH
10918: LD_INT 3
10920: PPUSH
10921: LD_INT 0
10923: PPUSH
10924: CALL_OW 49
// PlaceUnitArea ( Cyrus , StartArea , false ) ;
10928: LD_EXP 3
10932: PPUSH
10933: LD_INT 3
10935: PPUSH
10936: LD_INT 0
10938: PPUSH
10939: CALL_OW 49
// PlaceUnitArea ( Lisa , LisaSpawn , false ) ;
10943: LD_EXP 4
10947: PPUSH
10948: LD_INT 5
10950: PPUSH
10951: LD_INT 0
10953: PPUSH
10954: CALL_OW 49
// ComCrawl ( Lisa ) ;
10958: LD_EXP 4
10962: PPUSH
10963: CALL_OW 137
// end ;
10967: LD_VAR 0 1
10971: RET
// export function PrepareLisSquad ; var i , un ; begin
10972: LD_INT 0
10974: PPUSH
10975: PPUSH
10976: PPUSH
// uc_side := 4 ;
10977: LD_ADDR_OWVAR 20
10981: PUSH
10982: LD_INT 4
10984: ST_TO_ADDR
// uc_nation := 1 ;
10985: LD_ADDR_OWVAR 21
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// hc_class := 2 ;
10993: LD_ADDR_OWVAR 28
10997: PUSH
10998: LD_INT 2
11000: ST_TO_ADDR
// hc_sex := sex_male ;
11001: LD_ADDR_OWVAR 27
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// hc_gallery :=  ;
11009: LD_ADDR_OWVAR 33
11013: PUSH
11014: LD_STRING 
11016: ST_TO_ADDR
// hc_name :=  ;
11017: LD_ADDR_OWVAR 26
11021: PUSH
11022: LD_STRING 
11024: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 0 ] ;
11025: LD_ADDR_OWVAR 30
11029: PUSH
11030: LD_INT 0
11032: PUSH
11033: LD_INT 1
11035: PUSH
11036: LD_INT 0
11038: PUSH
11039: LD_INT 0
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 0 ] ;
11048: LD_ADDR_OWVAR 31
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: LD_INT 2
11058: PUSH
11059: LD_INT 0
11061: PUSH
11062: LD_INT 0
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: ST_TO_ADDR
// un := CreateHuman ;
11071: LD_ADDR_VAR 0 3
11075: PUSH
11076: CALL_OW 44
11080: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11081: LD_VAR 0 3
11085: PPUSH
11086: LD_INT 6
11088: PPUSH
11089: LD_INT 0
11091: PPUSH
11092: CALL_OW 49
// hc_sex := sex_female ;
11096: LD_ADDR_OWVAR 27
11100: PUSH
11101: LD_INT 2
11103: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 1 ] ;
11104: LD_ADDR_OWVAR 30
11108: PUSH
11109: LD_INT 0
11111: PUSH
11112: LD_INT 0
11114: PUSH
11115: LD_INT 0
11117: PUSH
11118: LD_INT 1
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 0 , 1 ] ;
11127: LD_ADDR_OWVAR 31
11131: PUSH
11132: LD_INT 0
11134: PUSH
11135: LD_INT 1
11137: PUSH
11138: LD_INT 0
11140: PUSH
11141: LD_INT 1
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: ST_TO_ADDR
// un := CreateHuman ;
11150: LD_ADDR_VAR 0 3
11154: PUSH
11155: CALL_OW 44
11159: ST_TO_ADDR
// PlaceUnitArea ( un , LisaEngs , false ) ;
11160: LD_VAR 0 3
11164: PPUSH
11165: LD_INT 6
11167: PPUSH
11168: LD_INT 0
11170: PPUSH
11171: CALL_OW 49
// if not Bobby and not Cyrus then
11175: LD_EXP 2
11179: NOT
11180: PUSH
11181: LD_EXP 3
11185: NOT
11186: AND
11187: IFFALSE 11276
// begin hc_class := 1 ;
11189: LD_ADDR_OWVAR 28
11193: PUSH
11194: LD_INT 1
11196: ST_TO_ADDR
// hc_sex := sex_male ;
11197: LD_ADDR_OWVAR 27
11201: PUSH
11202: LD_INT 1
11204: ST_TO_ADDR
// hc_basic_skills := [ 2 , 3 , 1 , 0 ] ;
11205: LD_ADDR_OWVAR 30
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: LD_INT 1
11218: PUSH
11219: LD_INT 0
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
11228: LD_ADDR_OWVAR 31
11232: PUSH
11233: LD_INT 2
11235: PUSH
11236: LD_INT 3
11238: PUSH
11239: LD_INT 1
11241: PUSH
11242: LD_INT 0
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: ST_TO_ADDR
// un := CreateHuman ;
11251: LD_ADDR_VAR 0 3
11255: PUSH
11256: CALL_OW 44
11260: ST_TO_ADDR
// PlaceUnitArea ( un , AmNewSpawn , false ) ;
11261: LD_VAR 0 3
11265: PPUSH
11266: LD_INT 31
11268: PPUSH
11269: LD_INT 0
11271: PPUSH
11272: CALL_OW 49
// end ; InitHc ;
11276: CALL_OW 19
// end ;
11280: LD_VAR 0 1
11284: RET
// export function PrepareOtherAmericans ; begin
11285: LD_INT 0
11287: PPUSH
// uc_side := 4 ;
11288: LD_ADDR_OWVAR 20
11292: PUSH
11293: LD_INT 4
11295: ST_TO_ADDR
// uc_nation := 1 ;
11296: LD_ADDR_OWVAR 21
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// hc_gallery :=  ;
11304: LD_ADDR_OWVAR 33
11308: PUSH
11309: LD_STRING 
11311: ST_TO_ADDR
// hc_name := Tom Garvin ;
11312: LD_ADDR_OWVAR 26
11316: PUSH
11317: LD_STRING Tom Garvin
11319: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , 2 ) ;
11320: LD_INT 1
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: LD_INT 2
11328: PPUSH
11329: CALL_OW 380
// Brian := CreateHuman ;
11333: LD_ADDR_EXP 6
11337: PUSH
11338: CALL_OW 44
11342: ST_TO_ADDR
// PlaceUnitArea ( Brian , OtherAmericanSpawn , false ) ;
11343: LD_EXP 6
11347: PPUSH
11348: LD_INT 10
11350: PPUSH
11351: LD_INT 0
11353: PPUSH
11354: CALL_OW 49
// hc_name := Jerry White ;
11358: LD_ADDR_OWVAR 26
11362: PUSH
11363: LD_STRING Jerry White
11365: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , 2 ) ;
11366: LD_INT 1
11368: PPUSH
11369: LD_INT 3
11371: PPUSH
11372: LD_INT 2
11374: PPUSH
11375: CALL_OW 380
// Jerry := CreateHuman ;
11379: LD_ADDR_EXP 7
11383: PUSH
11384: CALL_OW 44
11388: ST_TO_ADDR
// PlaceUnitArea ( Jerry , OtherAmericanSpawn , false ) ;
11389: LD_EXP 7
11393: PPUSH
11394: LD_INT 10
11396: PPUSH
11397: LD_INT 0
11399: PPUSH
11400: CALL_OW 49
// ComHold ( [ Brian , Jerry ] ) ;
11404: LD_EXP 6
11408: PUSH
11409: LD_EXP 7
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PPUSH
11418: CALL_OW 140
// end ;
11422: LD_VAR 0 1
11426: RET
// export DyingSold ; export function PrepareDeadSoldiers ; var i , un ; begin
11427: LD_INT 0
11429: PPUSH
11430: PPUSH
11431: PPUSH
// for i = 1 to 6 do
11432: LD_ADDR_VAR 0 2
11436: PUSH
11437: DOUBLE
11438: LD_INT 1
11440: DEC
11441: ST_TO_ADDR
11442: LD_INT 6
11444: PUSH
11445: FOR_TO
11446: IFFALSE 11540
// begin uc_side := 4 ;
11448: LD_ADDR_OWVAR 20
11452: PUSH
11453: LD_INT 4
11455: ST_TO_ADDR
// uc_nation := 1 ;
11456: LD_ADDR_OWVAR 21
11460: PUSH
11461: LD_INT 1
11463: ST_TO_ADDR
// hc_gallery :=  ;
11464: LD_ADDR_OWVAR 33
11468: PUSH
11469: LD_STRING 
11471: ST_TO_ADDR
// hc_name :=  ;
11472: LD_ADDR_OWVAR 26
11476: PUSH
11477: LD_STRING 
11479: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
11480: LD_INT 0
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: LD_INT 4
11488: PPUSH
11489: CALL_OW 12
11493: PPUSH
11494: LD_INT 1
11496: PPUSH
11497: CALL_OW 380
// un := CreateHuman ;
11501: LD_ADDR_VAR 0 3
11505: PUSH
11506: CALL_OW 44
11510: ST_TO_ADDR
// PlaceUnitArea ( un , DeadsSpawn , false ) ;
11511: LD_VAR 0 3
11515: PPUSH
11516: LD_INT 16
11518: PPUSH
11519: LD_INT 0
11521: PPUSH
11522: CALL_OW 49
// SetLives ( un , 1 ) ;
11526: LD_VAR 0 3
11530: PPUSH
11531: LD_INT 1
11533: PPUSH
11534: CALL_OW 234
// end ;
11538: GO 11445
11540: POP
11541: POP
// DyingSold := CreateHuman ;
11542: LD_ADDR_EXP 35
11546: PUSH
11547: CALL_OW 44
11551: ST_TO_ADDR
// PlaceUnitArea ( DyingSold , DeadsSpawn , false ) ;
11552: LD_EXP 35
11556: PPUSH
11557: LD_INT 16
11559: PPUSH
11560: LD_INT 0
11562: PPUSH
11563: CALL_OW 49
// SetLives ( DyingSold , 250 ) ;
11567: LD_EXP 35
11571: PPUSH
11572: LD_INT 250
11574: PPUSH
11575: CALL_OW 234
// end ; end_of_file
11579: LD_VAR 0 1
11583: RET
// export function PrepareRussianHeroes ; var tmp ; begin
11584: LD_INT 0
11586: PPUSH
11587: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_class , 2 ] , [ f_ok ] , [ f_outside ] ] ) diff [ JMM ] ;
11588: LD_ADDR_VAR 0 2
11592: PUSH
11593: LD_INT 22
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 23
11605: PUSH
11606: LD_INT 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 25
11615: PUSH
11616: LD_INT 2
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 50
11625: PUSH
11626: EMPTY
11627: LIST
11628: PUSH
11629: LD_INT 56
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PPUSH
11642: CALL_OW 69
11646: PUSH
11647: LD_EXP 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: DIFF
11655: ST_TO_ADDR
// if not tmp then
11656: LD_VAR 0 2
11660: NOT
11661: IFFALSE 11665
// exit ;
11663: GO 11741
// uc_side = 6 ;
11665: LD_ADDR_OWVAR 20
11669: PUSH
11670: LD_INT 6
11672: ST_TO_ADDR
// Mikhail = NewCharacter ( Mikhail ) ;
11673: LD_ADDR_EXP 8
11677: PUSH
11678: LD_STRING Mikhail
11680: PPUSH
11681: CALL_OW 25
11685: ST_TO_ADDR
// SetClass ( Mikhail , 3 ) ;
11686: LD_EXP 8
11690: PPUSH
11691: LD_INT 3
11693: PPUSH
11694: CALL_OW 336
// PlaceUnitXYR ( Mikhail , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , true ) ;
11698: LD_EXP 8
11702: PPUSH
11703: LD_VAR 0 2
11707: PUSH
11708: LD_INT 1
11710: ARRAY
11711: PPUSH
11712: CALL_OW 250
11716: PPUSH
11717: LD_VAR 0 2
11721: PUSH
11722: LD_INT 1
11724: ARRAY
11725: PPUSH
11726: CALL_OW 251
11730: PPUSH
11731: LD_INT 5
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 50
// end ;
11741: LD_VAR 0 1
11745: RET
// export function PrepareRussianCommander ; begin
11746: LD_INT 0
11748: PPUSH
// uc_side = 3 ;
11749: LD_ADDR_OWVAR 20
11753: PUSH
11754: LD_INT 3
11756: ST_TO_ADDR
// uc_nation = 3 ;
11757: LD_ADDR_OWVAR 21
11761: PUSH
11762: LD_INT 3
11764: ST_TO_ADDR
// Natasza = NewCharacter ( Natasza ) ;
11765: LD_ADDR_EXP 19
11769: PUSH
11770: LD_STRING Natasza
11772: PPUSH
11773: CALL_OW 25
11777: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
11778: LD_EXP 19
11782: PPUSH
11783: LD_INT 24
11785: PPUSH
11786: LD_INT 0
11788: PPUSH
11789: CALL_OW 49
// ComTurnXY ( Natasza , 56 , 16 ) ;
11793: LD_EXP 19
11797: PPUSH
11798: LD_INT 56
11800: PPUSH
11801: LD_INT 16
11803: PPUSH
11804: CALL_OW 118
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , Natasza ) ;
11808: LD_ADDR_EXP 24
11812: PUSH
11813: LD_EXP 24
11817: PPUSH
11818: LD_EXP 24
11822: PUSH
11823: LD_INT 1
11825: PLUS
11826: PPUSH
11827: LD_EXP 19
11831: PPUSH
11832: CALL_OW 1
11836: ST_TO_ADDR
// end ;
11837: LD_VAR 0 1
11841: RET
// export function PrepareSouthBase ; var i , un ; begin
11842: LD_INT 0
11844: PPUSH
11845: PPUSH
11846: PPUSH
// for i = 1 to 2 do
11847: LD_ADDR_VAR 0 2
11851: PUSH
11852: DOUBLE
11853: LD_INT 1
11855: DEC
11856: ST_TO_ADDR
11857: LD_INT 2
11859: PUSH
11860: FOR_TO
11861: IFFALSE 11970
// begin uc_side = 3 ;
11863: LD_ADDR_OWVAR 20
11867: PUSH
11868: LD_INT 3
11870: ST_TO_ADDR
// uc_nation = 3 ;
11871: LD_ADDR_OWVAR 21
11875: PUSH
11876: LD_INT 3
11878: ST_TO_ADDR
// hc_gallery =  ;
11879: LD_ADDR_OWVAR 33
11883: PUSH
11884: LD_STRING 
11886: ST_TO_ADDR
// hc_name =  ;
11887: LD_ADDR_OWVAR 26
11891: PUSH
11892: LD_STRING 
11894: ST_TO_ADDR
// PrepareHuman ( 1 , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
11895: LD_INT 1
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_EXP 13
11905: PPUSH
11906: LD_EXP 14
11910: PPUSH
11911: CALL_OW 12
11915: PPUSH
11916: CALL_OW 380
// hc_importance = 0 ;
11920: LD_ADDR_OWVAR 32
11924: PUSH
11925: LD_INT 0
11927: ST_TO_ADDR
// un = CreateHuman ;
11928: LD_ADDR_VAR 0 3
11932: PUSH
11933: CALL_OW 44
11937: ST_TO_ADDR
// PlaceUnitArea ( un , SouthBaseRussianSpawn1 , false ) ;
11938: LD_VAR 0 3
11942: PPUSH
11943: LD_INT 11
11945: PPUSH
11946: LD_INT 0
11948: PPUSH
11949: CALL_OW 49
// ComTurnXY ( un , 111 , 38 ) ;
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_INT 111
11960: PPUSH
11961: LD_INT 38
11963: PPUSH
11964: CALL_OW 118
// end ;
11968: GO 11860
11970: POP
11971: POP
// for i = 1 to 2 do
11972: LD_ADDR_VAR 0 2
11976: PUSH
11977: DOUBLE
11978: LD_INT 1
11980: DEC
11981: ST_TO_ADDR
11982: LD_INT 2
11984: PUSH
11985: FOR_TO
11986: IFFALSE 12069
// begin uc_side = 3 ;
11988: LD_ADDR_OWVAR 20
11992: PUSH
11993: LD_INT 3
11995: ST_TO_ADDR
// uc_nation = 3 ;
11996: LD_ADDR_OWVAR 21
12000: PUSH
12001: LD_INT 3
12003: ST_TO_ADDR
// hc_gallery =  ;
12004: LD_ADDR_OWVAR 33
12008: PUSH
12009: LD_STRING 
12011: ST_TO_ADDR
// hc_name =  ;
12012: LD_ADDR_OWVAR 26
12016: PUSH
12017: LD_STRING 
12019: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12020: LD_INT 0
12022: PPUSH
12023: LD_INT 3
12025: PPUSH
12026: LD_EXP 13
12030: PPUSH
12031: LD_EXP 14
12035: PPUSH
12036: CALL_OW 12
12040: PPUSH
12041: CALL_OW 380
// un = CreateHuman ;
12045: LD_ADDR_VAR 0 3
12049: PUSH
12050: CALL_OW 44
12054: ST_TO_ADDR
// PlaceHumanInUnit ( un , dep2 ) ;
12055: LD_VAR 0 3
12059: PPUSH
12060: LD_INT 10
12062: PPUSH
12063: CALL_OW 52
// end ;
12067: GO 11985
12069: POP
12070: POP
// RespawnInside ( 3 , 3 , arm2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12071: LD_INT 3
12073: PPUSH
12074: LD_INT 3
12076: PPUSH
12077: LD_INT 33
12079: PPUSH
12080: LD_EXP 13
12084: PPUSH
12085: LD_EXP 14
12089: PPUSH
12090: CALL_OW 12
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: LD_INT 1
12100: PUSH
12101: LD_INT 2
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: LD_INT 3
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: LD_OWVAR 67
12120: ARRAY
12121: PPUSH
12122: CALL 8729 0 6
// for i in UnitsInside ( arm2 ) do
12126: LD_ADDR_VAR 0 2
12130: PUSH
12131: LD_INT 33
12133: PPUSH
12134: CALL_OW 313
12138: PUSH
12139: FOR_IN
12140: IFFALSE 12173
// southBaseDefenders = Replace ( southBaseDefenders , southBaseDefenders + 1 , i ) ;
12142: LD_ADDR_EXP 25
12146: PUSH
12147: LD_EXP 25
12151: PPUSH
12152: LD_EXP 25
12156: PUSH
12157: LD_INT 1
12159: PLUS
12160: PPUSH
12161: LD_VAR 0 2
12165: PPUSH
12166: CALL_OW 1
12170: ST_TO_ADDR
12171: GO 12139
12173: POP
12174: POP
// end ;
12175: LD_VAR 0 1
12179: RET
// export function PrepareNorthBase ; var i , un ; begin
12180: LD_INT 0
12182: PPUSH
12183: PPUSH
12184: PPUSH
// for i = 1 to [ rand ( 1 , 2 ) , rand ( 2 , 3 ) , rand ( 3 , 4 ) , 4 ] [ Difficulty ] do
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: DOUBLE
12191: LD_INT 1
12193: DEC
12194: ST_TO_ADDR
12195: LD_INT 1
12197: PPUSH
12198: LD_INT 2
12200: PPUSH
12201: CALL_OW 12
12205: PUSH
12206: LD_INT 2
12208: PPUSH
12209: LD_INT 3
12211: PPUSH
12212: CALL_OW 12
12216: PUSH
12217: LD_INT 3
12219: PPUSH
12220: LD_INT 4
12222: PPUSH
12223: CALL_OW 12
12227: PUSH
12228: LD_INT 4
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: LD_OWVAR 67
12241: ARRAY
12242: PUSH
12243: FOR_TO
12244: IFFALSE 12330
// begin uc_side = 3 ;
12246: LD_ADDR_OWVAR 20
12250: PUSH
12251: LD_INT 3
12253: ST_TO_ADDR
// uc_nation = 3 ;
12254: LD_ADDR_OWVAR 21
12258: PUSH
12259: LD_INT 3
12261: ST_TO_ADDR
// hc_gallery =  ;
12262: LD_ADDR_OWVAR 33
12266: PUSH
12267: LD_STRING 
12269: ST_TO_ADDR
// hc_name =  ;
12270: LD_ADDR_OWVAR 26
12274: PUSH
12275: LD_STRING 
12277: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12278: LD_INT 0
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: LD_EXP 13
12288: PPUSH
12289: LD_EXP 14
12293: PPUSH
12294: CALL_OW 12
12298: PPUSH
12299: CALL_OW 380
// un = CreateHuman ;
12303: LD_ADDR_VAR 0 3
12307: PUSH
12308: CALL_OW 44
12312: ST_TO_ADDR
// PlaceUnitArea ( un , NorthBaseRussianSpawn1 , false ) ;
12313: LD_VAR 0 3
12317: PPUSH
12318: LD_INT 14
12320: PPUSH
12321: LD_INT 0
12323: PPUSH
12324: CALL_OW 49
// end ;
12328: GO 12243
12330: POP
12331: POP
// RespawnInside ( 3 , 3 , arm1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ Rand ( 1 , 2 ) , Rand ( 1 , 3 ) , Rand ( 1 , 3 ) , 4 ] [ Difficulty ] ) ;
12332: LD_INT 3
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: LD_INT 2
12340: PPUSH
12341: LD_EXP 13
12345: PPUSH
12346: LD_EXP 14
12350: PPUSH
12351: CALL_OW 12
12355: PPUSH
12356: LD_INT 1
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_INT 2
12364: PPUSH
12365: CALL_OW 12
12369: PUSH
12370: LD_INT 1
12372: PPUSH
12373: LD_INT 3
12375: PPUSH
12376: CALL_OW 12
12380: PUSH
12381: LD_INT 1
12383: PPUSH
12384: LD_INT 3
12386: PPUSH
12387: CALL_OW 12
12391: PUSH
12392: LD_INT 4
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: PUSH
12401: LD_OWVAR 67
12405: ARRAY
12406: PPUSH
12407: CALL 8729 0 6
// RespawnInside ( 3 , 3 , llab1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , [ 0 , 1 , 2 , 2 ] [ Difficulty ] ) ;
12411: LD_INT 3
12413: PPUSH
12414: LD_INT 3
12416: PPUSH
12417: LD_INT 23
12419: PPUSH
12420: LD_EXP 13
12424: PPUSH
12425: LD_EXP 14
12429: PPUSH
12430: CALL_OW 12
12434: PPUSH
12435: LD_INT 4
12437: PPUSH
12438: LD_INT 0
12440: PUSH
12441: LD_INT 1
12443: PUSH
12444: LD_INT 2
12446: PUSH
12447: LD_INT 2
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: LD_OWVAR 67
12460: ARRAY
12461: PPUSH
12462: CALL 8729 0 6
// RespawnInside ( 3 , 3 , dep1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
12466: LD_INT 3
12468: PPUSH
12469: LD_INT 3
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: LD_EXP 13
12479: PPUSH
12480: LD_EXP 14
12484: PPUSH
12485: CALL_OW 12
12489: PPUSH
12490: LD_INT 2
12492: PPUSH
12493: LD_INT 1
12495: PUSH
12496: LD_INT 2
12498: PUSH
12499: LD_INT 2
12501: PUSH
12502: LD_INT 3
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: PUSH
12511: LD_OWVAR 67
12515: ARRAY
12516: PPUSH
12517: CALL 8729 0 6
// for i in UnitsInside ( arm1 ) do
12521: LD_ADDR_VAR 0 2
12525: PUSH
12526: LD_INT 2
12528: PPUSH
12529: CALL_OW 313
12533: PUSH
12534: FOR_IN
12535: IFFALSE 12568
// northBaseDefenders = Replace ( northBaseDefenders , northBaseDefenders + 1 , i ) ;
12537: LD_ADDR_EXP 24
12541: PUSH
12542: LD_EXP 24
12546: PPUSH
12547: LD_EXP 24
12551: PUSH
12552: LD_INT 1
12554: PLUS
12555: PPUSH
12556: LD_VAR 0 2
12560: PPUSH
12561: CALL_OW 1
12565: ST_TO_ADDR
12566: GO 12534
12568: POP
12569: POP
// end ;
12570: LD_VAR 0 1
12574: RET
// export function PrepareOtherRussians ; var i , un ; begin
12575: LD_INT 0
12577: PPUSH
12578: PPUSH
12579: PPUSH
// for i = 1 to 2 do
12580: LD_ADDR_VAR 0 2
12584: PUSH
12585: DOUBLE
12586: LD_INT 1
12588: DEC
12589: ST_TO_ADDR
12590: LD_INT 2
12592: PUSH
12593: FOR_TO
12594: IFFALSE 12695
// begin uc_side = 3 ;
12596: LD_ADDR_OWVAR 20
12600: PUSH
12601: LD_INT 3
12603: ST_TO_ADDR
// uc_nation = 3 ;
12604: LD_ADDR_OWVAR 21
12608: PUSH
12609: LD_INT 3
12611: ST_TO_ADDR
// hc_gallery =  ;
12612: LD_ADDR_OWVAR 33
12616: PUSH
12617: LD_STRING 
12619: ST_TO_ADDR
// hc_name =  ;
12620: LD_ADDR_OWVAR 26
12624: PUSH
12625: LD_STRING 
12627: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
12628: LD_INT 0
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: LD_EXP 13
12638: PPUSH
12639: LD_EXP 14
12643: PPUSH
12644: CALL_OW 12
12648: PPUSH
12649: CALL_OW 380
// un = CreateHuman ;
12653: LD_ADDR_VAR 0 3
12657: PUSH
12658: CALL_OW 44
12662: ST_TO_ADDR
// PlaceUnitArea ( un , RussiansWaterSpawn , false ) ;
12663: LD_VAR 0 3
12667: PPUSH
12668: LD_INT 9
12670: PPUSH
12671: LD_INT 0
12673: PPUSH
12674: CALL_OW 49
// ComTurnXY ( un , 80 , 73 ) ;
12678: LD_VAR 0 3
12682: PPUSH
12683: LD_INT 80
12685: PPUSH
12686: LD_INT 73
12688: PPUSH
12689: CALL_OW 118
// end ;
12693: GO 12593
12695: POP
12696: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
12697: LD_ADDR_VAR 0 2
12701: PUSH
12702: LD_INT 22
12704: PUSH
12705: LD_INT 3
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 30
12714: PUSH
12715: LD_INT 31
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PPUSH
12726: CALL_OW 69
12730: PUSH
12731: FOR_IN
12732: IFFALSE 12760
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
12734: LD_EXP 13
12738: PPUSH
12739: LD_EXP 14
12743: PPUSH
12744: CALL_OW 12
12748: PPUSH
12749: LD_VAR 0 2
12753: PPUSH
12754: CALL 8838 0 2
12758: GO 12731
12760: POP
12761: POP
// end ;
12762: LD_VAR 0 1
12766: RET
// export function PrepareCargoBays ; begin
12767: LD_INT 0
12769: PPUSH
// uc_side = 3 ;
12770: LD_ADDR_OWVAR 20
12774: PUSH
12775: LD_INT 3
12777: ST_TO_ADDR
// uc_nation = 3 ;
12778: LD_ADDR_OWVAR 21
12782: PUSH
12783: LD_INT 3
12785: ST_TO_ADDR
// vc_engine = 1 ;
12786: LD_ADDR_OWVAR 39
12790: PUSH
12791: LD_INT 1
12793: ST_TO_ADDR
// vc_control = 1 ;
12794: LD_ADDR_OWVAR 38
12798: PUSH
12799: LD_INT 1
12801: ST_TO_ADDR
// vc_weapon = 51 ;
12802: LD_ADDR_OWVAR 40
12806: PUSH
12807: LD_INT 51
12809: ST_TO_ADDR
// vc_chassis = 22 ;
12810: LD_ADDR_OWVAR 37
12814: PUSH
12815: LD_INT 22
12817: ST_TO_ADDR
// cargo1 = CreateVehicle ;
12818: LD_ADDR_EXP 15
12822: PUSH
12823: CALL_OW 45
12827: ST_TO_ADDR
// cargo2 = CreateVehicle ;
12828: LD_ADDR_EXP 16
12832: PUSH
12833: CALL_OW 45
12837: ST_TO_ADDR
// PlaceUnitArea ( cargo1 , RussianAttack , false ) ;
12838: LD_EXP 15
12842: PPUSH
12843: LD_INT 13
12845: PPUSH
12846: LD_INT 0
12848: PPUSH
12849: CALL_OW 49
// PlaceUnitArea ( cargo2 , RussianAttack , false ) ;
12853: LD_EXP 16
12857: PPUSH
12858: LD_INT 13
12860: PPUSH
12861: LD_INT 0
12863: PPUSH
12864: CALL_OW 49
// AddCargo ( cargo1 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12868: LD_EXP 15
12872: PPUSH
12873: LD_INT 2
12875: PPUSH
12876: LD_INT 70
12878: PUSH
12879: LD_INT 50
12881: PUSH
12882: LD_INT 30
12884: PUSH
12885: LD_INT 20
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: PUSH
12894: LD_OWVAR 67
12898: ARRAY
12899: PPUSH
12900: CALL_OW 291
// AddCargo ( cargo2 , 2 , [ 70 , 50 , 30 , 20 ] [ Difficulty ] ) ;
12904: LD_EXP 16
12908: PPUSH
12909: LD_INT 2
12911: PPUSH
12912: LD_INT 70
12914: PUSH
12915: LD_INT 50
12917: PUSH
12918: LD_INT 30
12920: PUSH
12921: LD_INT 20
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: PUSH
12930: LD_OWVAR 67
12934: ARRAY
12935: PPUSH
12936: CALL_OW 291
// hc_gallery =  ;
12940: LD_ADDR_OWVAR 33
12944: PUSH
12945: LD_STRING 
12947: ST_TO_ADDR
// hc_name =  ;
12948: LD_ADDR_OWVAR 26
12952: PUSH
12953: LD_STRING 
12955: ST_TO_ADDR
// PrepareHuman ( 1 , 3 , rand ( 1 , 2 ) ) ;
12956: LD_INT 1
12958: PPUSH
12959: LD_INT 3
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: LD_INT 2
12967: PPUSH
12968: CALL_OW 12
12972: PPUSH
12973: CALL_OW 380
// driver1 = CreateHuman ;
12977: LD_ADDR_EXP 17
12981: PUSH
12982: CALL_OW 44
12986: ST_TO_ADDR
// PlaceHumanInUnit ( driver1 , cargo1 ) ;
12987: LD_EXP 17
12991: PPUSH
12992: LD_EXP 15
12996: PPUSH
12997: CALL_OW 52
// hc_name = Nikolai Andreyev ;
13001: LD_ADDR_OWVAR 26
13005: PUSH
13006: LD_STRING Nikolai Andreyev
13008: ST_TO_ADDR
// driver2 = CreateHuman ;
13009: LD_ADDR_EXP 18
13013: PUSH
13014: CALL_OW 44
13018: ST_TO_ADDR
// PlaceHumanInUnit ( driver2 , cargo2 ) ;
13019: LD_EXP 18
13023: PPUSH
13024: LD_EXP 16
13028: PPUSH
13029: CALL_OW 52
// end ;
13033: LD_VAR 0 1
13037: RET
// export function PrepareRussianAttack ( count , area ) ; var i , veh , un , tmp , mech ; begin
13038: LD_INT 0
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
13044: PPUSH
13045: PPUSH
// uc_side = 3 ;
13046: LD_ADDR_OWVAR 20
13050: PUSH
13051: LD_INT 3
13053: ST_TO_ADDR
// uc_nation = 3 ;
13054: LD_ADDR_OWVAR 21
13058: PUSH
13059: LD_INT 3
13061: ST_TO_ADDR
// for i := 1 to count do
13062: LD_ADDR_VAR 0 4
13066: PUSH
13067: DOUBLE
13068: LD_INT 1
13070: DEC
13071: ST_TO_ADDR
13072: LD_VAR 0 1
13076: PUSH
13077: FOR_TO
13078: IFFALSE 13340
// begin vc_engine = 1 ;
13080: LD_ADDR_OWVAR 39
13084: PUSH
13085: LD_INT 1
13087: ST_TO_ADDR
// vc_control = 1 ;
13088: LD_ADDR_OWVAR 38
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13096: LD_ADDR_OWVAR 40
13100: PUSH
13101: LD_INT 42
13103: ST_TO_ADDR
// if Difficulty = 3 then
13104: LD_OWVAR 67
13108: PUSH
13109: LD_INT 3
13111: EQUAL
13112: IFFALSE 13141
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13114: LD_ADDR_OWVAR 40
13118: PUSH
13119: LD_INT 42
13121: PUSH
13122: LD_INT 43
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 1
13131: PPUSH
13132: LD_INT 2
13134: PPUSH
13135: CALL_OW 12
13139: ARRAY
13140: ST_TO_ADDR
// if Difficulty = 4 then
13141: LD_OWVAR 67
13145: PUSH
13146: LD_INT 4
13148: EQUAL
13149: IFFALSE 13186
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 4 ) ] ;
13151: LD_ADDR_OWVAR 40
13155: PUSH
13156: LD_INT 42
13158: PUSH
13159: LD_INT 43
13161: PUSH
13162: LD_INT 43
13164: PUSH
13165: LD_INT 44
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 1
13176: PPUSH
13177: LD_INT 4
13179: PPUSH
13180: CALL_OW 12
13184: ARRAY
13185: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
13186: LD_ADDR_OWVAR 37
13190: PUSH
13191: LD_INT 21
13193: PUSH
13194: LD_INT 22
13196: PUSH
13197: LD_INT 22
13199: PUSH
13200: LD_INT 22
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: PUSH
13209: LD_OWVAR 67
13213: ARRAY
13214: ST_TO_ADDR
// veh = CreateVehicle ;
13215: LD_ADDR_VAR 0 5
13219: PUSH
13220: CALL_OW 45
13224: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13225: LD_VAR 0 5
13229: PPUSH
13230: LD_VAR 0 2
13234: PPUSH
13235: LD_INT 0
13237: PPUSH
13238: CALL_OW 49
// attackGroup = attackGroup ^ veh ;
13242: LD_ADDR_EXP 26
13246: PUSH
13247: LD_EXP 26
13251: PUSH
13252: LD_VAR 0 5
13256: ADD
13257: ST_TO_ADDR
// hc_gallery =  ;
13258: LD_ADDR_OWVAR 33
13262: PUSH
13263: LD_STRING 
13265: ST_TO_ADDR
// hc_name =  ;
13266: LD_ADDR_OWVAR 26
13270: PUSH
13271: LD_STRING 
13273: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13274: LD_INT 0
13276: PPUSH
13277: LD_INT 3
13279: PPUSH
13280: LD_EXP 13
13284: PPUSH
13285: LD_EXP 14
13289: PPUSH
13290: CALL_OW 12
13294: PPUSH
13295: CALL_OW 380
// un = CreateHuman ;
13299: LD_ADDR_VAR 0 6
13303: PUSH
13304: CALL_OW 44
13308: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13309: LD_VAR 0 6
13313: PPUSH
13314: LD_VAR 0 5
13318: PPUSH
13319: CALL_OW 52
// ComMoveXY ( un , 14 , 9 ) ;
13323: LD_VAR 0 6
13327: PPUSH
13328: LD_INT 14
13330: PPUSH
13331: LD_INT 9
13333: PPUSH
13334: CALL_OW 111
// end ;
13338: GO 13077
13340: POP
13341: POP
// wait ( 0 0$1 ) ;
13342: LD_INT 35
13344: PPUSH
13345: CALL_OW 67
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13349: LD_INT 0
13351: PPUSH
13352: LD_INT 2
13354: PPUSH
13355: LD_EXP 13
13359: PPUSH
13360: LD_EXP 14
13364: PPUSH
13365: CALL_OW 12
13369: PPUSH
13370: CALL_OW 380
// un = CreateHuman ;
13374: LD_ADDR_VAR 0 6
13378: PUSH
13379: CALL_OW 44
13383: ST_TO_ADDR
// for i := 1 to count + 2 * 2 do
13384: LD_ADDR_VAR 0 4
13388: PUSH
13389: DOUBLE
13390: LD_INT 1
13392: DEC
13393: ST_TO_ADDR
13394: LD_VAR 0 1
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: LD_INT 2
13404: MUL
13405: PLUS
13406: PUSH
13407: FOR_TO
13408: IFFALSE 13500
// begin hc_gallery =  ;
13410: LD_ADDR_OWVAR 33
13414: PUSH
13415: LD_STRING 
13417: ST_TO_ADDR
// hc_name =  ;
13418: LD_ADDR_OWVAR 26
13422: PUSH
13423: LD_STRING 
13425: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
13426: LD_INT 1
13428: PPUSH
13429: LD_INT 1
13431: PPUSH
13432: LD_EXP 13
13436: PPUSH
13437: LD_EXP 14
13441: PPUSH
13442: CALL_OW 12
13446: PPUSH
13447: CALL_OW 380
// un = CreateHuman ;
13451: LD_ADDR_VAR 0 6
13455: PUSH
13456: CALL_OW 44
13460: ST_TO_ADDR
// PlaceUnitXYR ( un , 9 , 13 , 4 , false ) ;
13461: LD_VAR 0 6
13465: PPUSH
13466: LD_INT 9
13468: PPUSH
13469: LD_INT 13
13471: PPUSH
13472: LD_INT 4
13474: PPUSH
13475: LD_INT 0
13477: PPUSH
13478: CALL_OW 50
// attackGroup = attackGroup ^ un ;
13482: LD_ADDR_EXP 26
13486: PUSH
13487: LD_EXP 26
13491: PUSH
13492: LD_VAR 0 6
13496: ADD
13497: ST_TO_ADDR
// end ;
13498: GO 13407
13500: POP
13501: POP
// tmp := FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
13502: LD_ADDR_VAR 0 7
13506: PUSH
13507: LD_INT 26
13509: PPUSH
13510: LD_INT 22
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 21
13522: PUSH
13523: LD_INT 1
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 26
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: LIST
13544: PPUSH
13545: CALL_OW 70
13549: ST_TO_ADDR
// Say ( tmp [ 1 ] , D9-Rus3-1 ) ;
13550: LD_VAR 0 7
13554: PUSH
13555: LD_INT 1
13557: ARRAY
13558: PPUSH
13559: LD_STRING D9-Rus3-1
13561: PPUSH
13562: CALL_OW 88
// Say ( tmp [ 2 ] , D9-Russ-1 ) ;
13566: LD_VAR 0 7
13570: PUSH
13571: LD_INT 2
13573: ARRAY
13574: PPUSH
13575: LD_STRING D9-Russ-1
13577: PPUSH
13578: CALL_OW 88
// ComAgressiveMove ( attackGroup , 31 , 13 ) ;
13582: LD_EXP 26
13586: PPUSH
13587: LD_INT 31
13589: PPUSH
13590: LD_INT 13
13592: PPUSH
13593: CALL_OW 114
// wait ( 0 0$3 ) ;
13597: LD_INT 105
13599: PPUSH
13600: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13604: LD_INT 35
13606: PPUSH
13607: CALL_OW 67
// for i in attackGroup do
13611: LD_ADDR_VAR 0 4
13615: PUSH
13616: LD_EXP 26
13620: PUSH
13621: FOR_IN
13622: IFFALSE 13989
// begin if IsDead ( i ) then
13624: LD_VAR 0 4
13628: PPUSH
13629: CALL_OW 301
13633: IFFALSE 13653
// begin attackGroup := attackGroup diff i ;
13635: LD_ADDR_EXP 26
13639: PUSH
13640: LD_EXP 26
13644: PUSH
13645: LD_VAR 0 4
13649: DIFF
13650: ST_TO_ADDR
// continue ;
13651: GO 13621
// end ; if not HasTask ( i ) and not GetTag ( i ) then
13653: LD_VAR 0 4
13657: PPUSH
13658: CALL_OW 314
13662: NOT
13663: PUSH
13664: LD_VAR 0 4
13668: PPUSH
13669: CALL_OW 110
13673: NOT
13674: AND
13675: IFFALSE 13711
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
13677: LD_VAR 0 4
13681: PPUSH
13682: LD_INT 22
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PPUSH
13692: CALL_OW 69
13696: PPUSH
13697: LD_VAR 0 4
13701: PPUSH
13702: CALL_OW 74
13706: PPUSH
13707: CALL_OW 115
// if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
13711: LD_VAR 0 4
13715: PPUSH
13716: CALL_OW 110
13720: NOT
13721: PUSH
13722: LD_VAR 0 4
13726: PPUSH
13727: CALL_OW 256
13731: PUSH
13732: LD_INT 650
13734: LESS
13735: AND
13736: PUSH
13737: LD_VAR 0 4
13741: PPUSH
13742: CALL_OW 247
13746: PUSH
13747: LD_INT 2
13749: EQUAL
13750: AND
13751: IFFALSE 13780
// begin SetTag ( i , 1 ) ;
13753: LD_VAR 0 4
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: CALL_OW 109
// ComMoveXY ( i , 20 , 8 ) ;
13765: LD_VAR 0 4
13769: PPUSH
13770: LD_INT 20
13772: PPUSH
13773: LD_INT 8
13775: PPUSH
13776: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 20 , 8 ) < 6 then
13780: LD_VAR 0 4
13784: PPUSH
13785: CALL_OW 110
13789: PUSH
13790: LD_INT 1
13792: EQUAL
13793: PUSH
13794: LD_VAR 0 4
13798: PPUSH
13799: LD_INT 20
13801: PPUSH
13802: LD_INT 8
13804: PPUSH
13805: CALL_OW 297
13809: PUSH
13810: LD_INT 6
13812: LESS
13813: AND
13814: IFFALSE 13828
// SetTag ( i , 2 ) ;
13816: LD_VAR 0 4
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: CALL_OW 109
// if GetTag ( i ) = 2 then
13828: LD_VAR 0 4
13832: PPUSH
13833: CALL_OW 110
13837: PUSH
13838: LD_INT 2
13840: EQUAL
13841: IFFALSE 13949
// begin if GetLives ( i ) = 1000 then
13843: LD_VAR 0 4
13847: PPUSH
13848: CALL_OW 256
13852: PUSH
13853: LD_INT 1000
13855: EQUAL
13856: IFFALSE 13872
// SetTag ( i , 3 ) else
13858: LD_VAR 0 4
13862: PPUSH
13863: LD_INT 3
13865: PPUSH
13866: CALL_OW 109
13870: GO 13949
// if IsDrivenBy ( i ) then
13872: LD_VAR 0 4
13876: PPUSH
13877: CALL_OW 311
13881: IFFALSE 13949
// begin mech := IsDrivenBy ( i ) ;
13883: LD_ADDR_VAR 0 8
13887: PUSH
13888: LD_VAR 0 4
13892: PPUSH
13893: CALL_OW 311
13897: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
13898: LD_INT 1
13900: PPUSH
13901: LD_VAR 0 8
13905: PPUSH
13906: CALL_OW 292
13910: NOT
13911: PUSH
13912: LD_VAR 0 8
13916: PPUSH
13917: CALL_OW 256
13921: PUSH
13922: LD_INT 1000
13924: LESS
13925: AND
13926: IFFALSE 13940
// SetLives ( mech , 1000 ) ;
13928: LD_VAR 0 8
13932: PPUSH
13933: LD_INT 1000
13935: PPUSH
13936: CALL_OW 234
// ComRepairVehicleAndReturn ( mech ) ;
13940: LD_VAR 0 8
13944: PPUSH
13945: CALL 72429 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
13949: LD_VAR 0 4
13953: PPUSH
13954: CALL_OW 110
13958: PUSH
13959: LD_INT 3
13961: EQUAL
13962: PUSH
13963: LD_VAR 0 4
13967: PPUSH
13968: CALL_OW 311
13972: AND
13973: IFFALSE 13987
// SetTag ( i , 0 ) ;
13975: LD_VAR 0 4
13979: PPUSH
13980: LD_INT 0
13982: PPUSH
13983: CALL_OW 109
// end ;
13987: GO 13621
13989: POP
13990: POP
// until not attackGroup ;
13991: LD_EXP 26
13995: NOT
13996: IFFALSE 13604
// end ;
13998: LD_VAR 0 3
14002: RET
// every 0 0$1 trigger UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do var i ;
14003: LD_EXP 26
14007: PPUSH
14008: LD_INT 21
14010: PUSH
14011: LD_INT 2
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PPUSH
14018: CALL_OW 72
14022: IFFALSE 14090
14024: GO 14026
14026: DISABLE
14027: LD_INT 0
14029: PPUSH
// begin enable ;
14030: ENABLE
// for i in UnitFilter ( attackGroup , [ f_type , unit_vehicle ] ) do
14031: LD_ADDR_VAR 0 1
14035: PUSH
14036: LD_EXP 26
14040: PPUSH
14041: LD_INT 21
14043: PUSH
14044: LD_INT 2
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PPUSH
14051: CALL_OW 72
14055: PUSH
14056: FOR_IN
14057: IFFALSE 14088
// if GetFuel ( i ) < 3 then
14059: LD_VAR 0 1
14063: PPUSH
14064: CALL_OW 261
14068: PUSH
14069: LD_INT 3
14071: LESS
14072: IFFALSE 14086
// SetFuel ( i , 3 ) ;
14074: LD_VAR 0 1
14078: PPUSH
14079: LD_INT 3
14081: PPUSH
14082: CALL_OW 240
14086: GO 14056
14088: POP
14089: POP
// end ; end_of_file
14090: PPOPN 1
14092: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do
14093: LD_INT 22
14095: PUSH
14096: LD_INT 3
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 25
14105: PUSH
14106: LD_INT 2
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 69
14121: IFFALSE 14140
14123: GO 14125
14125: DISABLE
// begin enable ;
14126: ENABLE
// RepairBuilding ( 3 , dep1 , NorthBase ) ;
14127: LD_INT 3
14129: PPUSH
14130: LD_INT 1
14132: PPUSH
14133: LD_INT 22
14135: PPUSH
14136: CALL 8974 0 3
// end ;
14140: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
14141: LD_INT 22
14143: PUSH
14144: LD_INT 3
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: LD_INT 25
14153: PUSH
14154: LD_INT 4
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PPUSH
14165: CALL_OW 69
14169: IFFALSE 14191
14171: GO 14173
14173: DISABLE
// begin enable ;
14174: ENABLE
// HealUnitInBase ( 3 , NorthBaseHealArea , NorthBase , llab1 ) ;
14175: LD_INT 3
14177: PPUSH
14178: LD_INT 20
14180: PPUSH
14181: LD_INT 22
14183: PPUSH
14184: LD_INT 23
14186: PPUSH
14187: CALL 9306 0 4
// end ;
14191: END
// every 0 0$1 trigger northBaseDefenders do
14192: LD_EXP 24
14196: IFFALSE 14220
14198: GO 14200
14200: DISABLE
// begin enable ;
14201: ENABLE
// DefendBases ( NorthBase , 1 , northBaseDefenders , arm1 ) ;
14202: LD_INT 22
14204: PPUSH
14205: LD_INT 1
14207: PPUSH
14208: LD_EXP 24
14212: PPUSH
14213: LD_INT 2
14215: PPUSH
14216: CALL 9578 0 4
// end ;
14220: END
// every 0 0$1 trigger southBaseDefenders do
14221: LD_EXP 25
14225: IFFALSE 14249
14227: GO 14229
14229: DISABLE
// begin enable ;
14230: ENABLE
// DefendBases ( SouthBase , 1 , southBaseDefenders , arm2 ) ;
14231: LD_INT 23
14233: PPUSH
14234: LD_INT 1
14236: PPUSH
14237: LD_EXP 25
14241: PPUSH
14242: LD_INT 33
14244: PPUSH
14245: CALL 9578 0 4
// end ; end_of_file
14249: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
14250: LD_VAR 0 1
14254: PUSH
14255: LD_EXP 1
14259: EQUAL
14260: IFFALSE 14269
// YouLost ( JMM ) ;
14262: LD_STRING JMM
14264: PPUSH
14265: CALL_OW 104
// if GetBType ( unit ) = b_depot then
14269: LD_VAR 0 1
14273: PPUSH
14274: CALL_OW 266
14278: PUSH
14279: LD_INT 0
14281: EQUAL
14282: IFFALSE 14291
// YouLost ( DepotDestroyed ) ;
14284: LD_STRING DepotDestroyed
14286: PPUSH
14287: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
14291: LD_VAR 0 1
14295: PPUSH
14296: CALL_OW 255
14300: PUSH
14301: LD_INT 1
14303: EQUAL
14304: PUSH
14305: LD_VAR 0 1
14309: PPUSH
14310: CALL_OW 247
14314: PUSH
14315: LD_INT 1
14317: EQUAL
14318: AND
14319: IFFALSE 14335
// deadsCounter = deadsCounter + 1 ;
14321: LD_ADDR_EXP 31
14325: PUSH
14326: LD_EXP 31
14330: PUSH
14331: LD_INT 1
14333: PLUS
14334: ST_TO_ADDR
// end ;
14335: PPOPN 1
14337: END
// on Command ( cmd ) do var i , j , tmp ;
14338: LD_INT 0
14340: PPUSH
14341: PPUSH
14342: PPUSH
// begin SOS_Command ( cmd ) ;
14343: LD_VAR 0 1
14347: PPUSH
14348: CALL 30302 0 1
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
14352: LD_ADDR_VAR 0 2
14356: PUSH
14357: LD_INT 22
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 21
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PPUSH
14381: CALL_OW 69
14385: PUSH
14386: FOR_IN
14387: IFFALSE 14508
// begin if GetTaskList ( i ) then
14389: LD_VAR 0 2
14393: PPUSH
14394: CALL_OW 437
14398: IFFALSE 14506
// begin for j = 1 to GetTaskList ( i ) do
14400: LD_ADDR_VAR 0 3
14404: PUSH
14405: DOUBLE
14406: LD_INT 1
14408: DEC
14409: ST_TO_ADDR
14410: LD_VAR 0 2
14414: PPUSH
14415: CALL_OW 437
14419: PUSH
14420: FOR_TO
14421: IFFALSE 14504
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
14423: LD_ADDR_VAR 0 4
14427: PUSH
14428: LD_VAR 0 2
14432: PPUSH
14433: CALL_OW 437
14437: PUSH
14438: LD_VAR 0 3
14442: ARRAY
14443: PUSH
14444: LD_INT 4
14446: ARRAY
14447: ST_TO_ADDR
// if ( GetSide ( tmp ) = 3 and GetType ( tmp ) = unit_vehicle and GetWeapon ( tmp ) = ru_cargo_bay ) then
14448: LD_VAR 0 4
14452: PPUSH
14453: CALL_OW 255
14457: PUSH
14458: LD_INT 3
14460: EQUAL
14461: PUSH
14462: LD_VAR 0 4
14466: PPUSH
14467: CALL_OW 247
14471: PUSH
14472: LD_INT 2
14474: EQUAL
14475: AND
14476: PUSH
14477: LD_VAR 0 4
14481: PPUSH
14482: CALL_OW 264
14486: PUSH
14487: LD_INT 51
14489: EQUAL
14490: AND
14491: IFFALSE 14502
// ComStop ( i ) ;
14493: LD_VAR 0 2
14497: PPUSH
14498: CALL_OW 141
// end ;
14502: GO 14420
14504: POP
14505: POP
// end ; end ;
14506: GO 14386
14508: POP
14509: POP
// end ;
14510: PPOPN 4
14512: END
// on LeaveBuilding ( b , un ) do begin if un = Mikhail and mikhailStatus <> 4 then
14513: LD_VAR 0 2
14517: PUSH
14518: LD_EXP 8
14522: EQUAL
14523: PUSH
14524: LD_EXP 21
14528: PUSH
14529: LD_INT 4
14531: NONEQUAL
14532: AND
14533: IFFALSE 14685
// begin if IsOk ( Mikhail ) then
14535: LD_EXP 8
14539: PPUSH
14540: CALL_OW 302
14544: IFFALSE 14552
// AskMikhail else
14546: CALL 7251 0 0
14550: GO 14685
// if IsOk ( llab1 ) then
14552: LD_INT 23
14554: PPUSH
14555: CALL_OW 302
14559: IFFALSE 14648
// begin InGameOn ;
14561: CALL_OW 8
// SetSide ( Mikhail , 6 ) ;
14565: LD_EXP 8
14569: PPUSH
14570: LD_INT 6
14572: PPUSH
14573: CALL_OW 235
// SetSide ( llab1 , 6 ) ;
14577: LD_INT 23
14579: PPUSH
14580: LD_INT 6
14582: PPUSH
14583: CALL_OW 235
// ComEnterUnit ( Mikhail , llab1 ) ;
14587: LD_EXP 8
14591: PPUSH
14592: LD_INT 23
14594: PPUSH
14595: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14599: LD_INT 35
14601: PPUSH
14602: CALL_OW 67
// until IsInUnit ( Mikhail ) = llab1 or IsDead ( Mikhail ) ;
14606: LD_EXP 8
14610: PPUSH
14611: CALL_OW 310
14615: PUSH
14616: LD_INT 23
14618: EQUAL
14619: PUSH
14620: LD_EXP 8
14624: PPUSH
14625: CALL_OW 301
14629: OR
14630: IFFALSE 14599
// SetSide ( llab1 , 1 ) ;
14632: LD_INT 23
14634: PPUSH
14635: LD_INT 1
14637: PPUSH
14638: CALL_OW 235
// InGameOff ;
14642: CALL_OW 9
// end else
14646: GO 14685
// begin SetAttitude ( 3 , 6 , att_enemy , true ) ;
14648: LD_INT 3
14650: PPUSH
14651: LD_INT 6
14653: PPUSH
14654: LD_INT 2
14656: PPUSH
14657: LD_INT 1
14659: PPUSH
14660: CALL_OW 80
// SetSide ( Mikhail , 6 ) ;
14664: LD_EXP 8
14668: PPUSH
14669: LD_INT 6
14671: PPUSH
14672: CALL_OW 235
// ComHold ( Mikhail ) ;
14676: LD_EXP 8
14680: PPUSH
14681: CALL_OW 140
// end ; end ; end ;
14685: PPOPN 2
14687: END
// every 3 trigger GetClass ( Mikhail ) <> 3 do
14688: LD_EXP 8
14692: PPUSH
14693: CALL_OW 257
14697: PUSH
14698: LD_INT 3
14700: NONEQUAL
14701: IFFALSE 14719
14703: GO 14705
14705: DISABLE
// begin enable ;
14706: ENABLE
// SetClass ( Mikhail , 3 ) ;
14707: LD_EXP 8
14711: PPUSH
14712: LD_INT 3
14714: PPUSH
14715: CALL_OW 336
// end ; end_of_file
14719: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) = 0 and GetSide ( dep1 ) = 3 and GetSide ( dep2 ) = 3 do
14720: LD_INT 22
14722: PUSH
14723: LD_INT 1
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 21
14732: PUSH
14733: LD_INT 1
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 25
14742: PUSH
14743: LD_INT 2
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: PPUSH
14755: CALL_OW 69
14759: PUSH
14760: LD_INT 0
14762: EQUAL
14763: PUSH
14764: LD_INT 22
14766: PUSH
14767: LD_INT 4
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 25
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: PUSH
14804: LD_INT 0
14806: EQUAL
14807: AND
14808: PUSH
14809: LD_INT 1
14811: PPUSH
14812: CALL_OW 255
14816: PUSH
14817: LD_INT 3
14819: EQUAL
14820: AND
14821: PUSH
14822: LD_INT 10
14824: PPUSH
14825: CALL_OW 255
14829: PUSH
14830: LD_INT 3
14832: EQUAL
14833: AND
14834: IFFALSE 14846
14836: GO 14838
14838: DISABLE
// YouLost ( Engineer ) ;
14839: LD_STRING Engineer
14841: PPUSH
14842: CALL_OW 104
14846: END
// every 0 0$1 trigger GetSide ( dep1 ) = 3 and LastBattle = 1 do
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 255
14854: PUSH
14855: LD_INT 3
14857: EQUAL
14858: PUSH
14859: LD_EXP 27
14863: PUSH
14864: LD_INT 1
14866: EQUAL
14867: AND
14868: IFFALSE 14880
14870: GO 14872
14872: DISABLE
// YouLost ( DepotCaptured ) ; end_of_file
14873: LD_STRING DepotCaptured
14875: PPUSH
14876: CALL_OW 104
14880: END
// export function PrepareTigers ; var i , un ; begin
14881: LD_INT 0
14883: PPUSH
14884: PPUSH
14885: PPUSH
// for i = 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
14886: LD_ADDR_VAR 0 2
14890: PUSH
14891: DOUBLE
14892: LD_INT 1
14894: DEC
14895: ST_TO_ADDR
14896: LD_INT 2
14898: PUSH
14899: LD_INT 3
14901: PUSH
14902: LD_INT 4
14904: PUSH
14905: LD_INT 5
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: LD_OWVAR 67
14918: ARRAY
14919: PUSH
14920: FOR_TO
14921: IFFALSE 15036
// begin uc_side := 0 ;
14923: LD_ADDR_OWVAR 20
14927: PUSH
14928: LD_INT 0
14930: ST_TO_ADDR
// uc_nation := nation_nature ;
14931: LD_ADDR_OWVAR 21
14935: PUSH
14936: LD_INT 0
14938: ST_TO_ADDR
// hc_sex := sex_male ;
14939: LD_ADDR_OWVAR 27
14943: PUSH
14944: LD_INT 1
14946: ST_TO_ADDR
// hc_class := class_tiger ;
14947: LD_ADDR_OWVAR 28
14951: PUSH
14952: LD_INT 14
14954: ST_TO_ADDR
// hc_skills := [ RuSoldMaxLevel , 0 , 0 , 0 ] ;
14955: LD_ADDR_OWVAR 31
14959: PUSH
14960: LD_EXP 14
14964: PUSH
14965: LD_INT 0
14967: PUSH
14968: LD_INT 0
14970: PUSH
14971: LD_INT 0
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: ST_TO_ADDR
// hc_agressivity := [ 30 , 40 , 45 , 50 ] [ Difficulty ] ;
14980: LD_ADDR_OWVAR 35
14984: PUSH
14985: LD_INT 30
14987: PUSH
14988: LD_INT 40
14990: PUSH
14991: LD_INT 45
14993: PUSH
14994: LD_INT 50
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: PUSH
15003: LD_OWVAR 67
15007: ARRAY
15008: ST_TO_ADDR
// un = CreateHuman ;
15009: LD_ADDR_VAR 0 3
15013: PUSH
15014: CALL_OW 44
15018: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15019: LD_VAR 0 3
15023: PPUSH
15024: LD_INT 27
15026: PPUSH
15027: LD_INT 0
15029: PPUSH
15030: CALL_OW 49
// end ;
15034: GO 14920
15036: POP
15037: POP
// end ; end_of_file
15038: LD_VAR 0 1
15042: RET
// every 0 0$01 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] , [ f_not , [ f_empty ] ] ] ) = 0 do
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 255
15050: PUSH
15051: LD_INT 1
15053: EQUAL
15054: PUSH
15055: LD_INT 10
15057: PPUSH
15058: CALL_OW 255
15062: PUSH
15063: LD_INT 1
15065: EQUAL
15066: AND
15067: PUSH
15068: LD_EXP 20
15072: PUSH
15073: LD_INT 1
15075: EQUAL
15076: AND
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_INT 3
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 21
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 34
15100: PUSH
15101: LD_INT 51
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 3
15110: PUSH
15111: LD_INT 58
15113: PUSH
15114: EMPTY
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 69
15131: PUSH
15132: LD_INT 0
15134: EQUAL
15135: AND
15136: IFFALSE 15231
15138: GO 15140
15140: DISABLE
// begin wait ( [ 4 4$30 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ) ;
15141: LD_INT 9450
15143: PUSH
15144: LD_INT 8400
15146: PUSH
15147: LD_INT 6300
15149: PUSH
15150: LD_INT 6300
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: PUSH
15159: LD_OWVAR 67
15163: ARRAY
15164: PPUSH
15165: CALL_OW 67
// if cargoEscape = 1 then
15169: LD_EXP 20
15173: PUSH
15174: LD_INT 1
15176: EQUAL
15177: IFFALSE 15231
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15179: LD_EXP 9
15183: PPUSH
15184: LD_STRING D6-Pow-1
15186: PPUSH
15187: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15191: LD_EXP 1
15195: PPUSH
15196: LD_STRING D6-JMM-1
15198: PPUSH
15199: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15203: LD_EXP 9
15207: PPUSH
15208: LD_STRING D6-Pow-2
15210: PPUSH
15211: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15215: LD_EXP 1
15219: PPUSH
15220: LD_STRING D6-JMM-2
15222: PPUSH
15223: CALL_OW 88
// FinishMission ;
15227: CALL 15447 0 0
// end ; end ;
15231: END
// every 0 0$1 trigger GetSide ( dep1 ) = 1 and GetSide ( dep2 ) = 1 and cargoEscape > 1 do var tmp ;
15232: LD_INT 1
15234: PPUSH
15235: CALL_OW 255
15239: PUSH
15240: LD_INT 1
15242: EQUAL
15243: PUSH
15244: LD_INT 10
15246: PPUSH
15247: CALL_OW 255
15251: PUSH
15252: LD_INT 1
15254: EQUAL
15255: AND
15256: PUSH
15257: LD_EXP 20
15261: PUSH
15262: LD_INT 1
15264: GREATER
15265: AND
15266: IFFALSE 15341
15268: GO 15270
15270: DISABLE
15271: LD_INT 0
15273: PPUSH
// begin wait ( [ 5 5$30 , 5 5$0 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15274: LD_INT 11550
15276: PUSH
15277: LD_INT 10500
15279: PUSH
15280: LD_INT 9450
15282: PUSH
15283: LD_INT 8400
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: PUSH
15292: LD_OWVAR 67
15296: ARRAY
15297: PPUSH
15298: CALL_OW 67
// PrepareRussianAttack ( [ 1 , 2 , 3 , 4 ] [ Difficulty ] , RussianAttack ) ;
15302: LD_INT 1
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 4
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: PUSH
15320: LD_OWVAR 67
15324: ARRAY
15325: PPUSH
15326: LD_INT 13
15328: PPUSH
15329: CALL 13038 0 2
// lastBattle = 1 ;
15333: LD_ADDR_EXP 27
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// end ;
15341: PPOPN 1
15343: END
// every 0 0$7 trigger LastBattle = 1 and FilterUnitsInArea ( Battlefield , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
15344: LD_EXP 27
15348: PUSH
15349: LD_INT 1
15351: EQUAL
15352: PUSH
15353: LD_INT 26
15355: PPUSH
15356: LD_INT 22
15358: PUSH
15359: LD_INT 3
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 21
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PPUSH
15380: CALL_OW 70
15384: PUSH
15385: LD_INT 0
15387: EQUAL
15388: AND
15389: IFFALSE 15446
15391: GO 15393
15393: DISABLE
// begin SayRadio ( Powell , D6-Pow-1 ) ;
15394: LD_EXP 9
15398: PPUSH
15399: LD_STRING D6-Pow-1
15401: PPUSH
15402: CALL_OW 94
// Say ( JMM , D6-JMM-1 ) ;
15406: LD_EXP 1
15410: PPUSH
15411: LD_STRING D6-JMM-1
15413: PPUSH
15414: CALL_OW 88
// SayRadio ( Powell , D6-Pow-2 ) ;
15418: LD_EXP 9
15422: PPUSH
15423: LD_STRING D6-Pow-2
15425: PPUSH
15426: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
15430: LD_EXP 1
15434: PPUSH
15435: LD_STRING D6-JMM-2
15437: PPUSH
15438: CALL_OW 88
// FinishMission ;
15442: CALL 15447 0 0
// end ;
15446: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
15447: LD_INT 0
15449: PPUSH
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
// if tick <= 18 18$00 then
15454: LD_OWVAR 1
15458: PUSH
15459: LD_INT 37800
15461: LESSEQUAL
15462: IFFALSE 15471
// SetAchievement ( ACH_ASPEED_2 ) ;
15464: LD_STRING ACH_ASPEED_2
15466: PPUSH
15467: CALL_OW 543
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 251 ] ] ) ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: LD_INT 1
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 21
15488: PUSH
15489: LD_INT 2
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 24
15498: PUSH
15499: LD_INT 251
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: PPUSH
15511: CALL_OW 69
15515: ST_TO_ADDR
// if tmp then
15516: LD_VAR 0 2
15520: IFFALSE 15534
// SaveVehicles ( tmp , 02_tanks_1 ) ;
15522: LD_VAR 0 2
15526: PPUSH
15527: LD_STRING 02_tanks_1
15529: PPUSH
15530: CALL 10453 0 2
// if mikhailStatus = 1 and IsLive ( Mikhail ) then
15534: LD_EXP 21
15538: PUSH
15539: LD_INT 1
15541: EQUAL
15542: PUSH
15543: LD_EXP 8
15547: PPUSH
15548: CALL_OW 300
15552: AND
15553: IFFALSE 15567
// SaveVariable ( mikhailStatus , 02_mikhailStatus_1 ) ;
15555: LD_EXP 21
15559: PPUSH
15560: LD_STRING 02_mikhailStatus_1
15562: PPUSH
15563: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( dep1 ) , 1 ) , 02_resources_4 ) ;
15567: LD_INT 1
15569: PPUSH
15570: CALL_OW 274
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: CALL_OW 275
15582: PPUSH
15583: LD_STRING 02_resources_4
15585: PPUSH
15586: CALL_OW 39
// m1 := false ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_INT 0
15597: ST_TO_ADDR
// m2 := false ;
15598: LD_ADDR_VAR 0 4
15602: PUSH
15603: LD_INT 0
15605: ST_TO_ADDR
// m3 := false ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_INT 0
15613: ST_TO_ADDR
// if GetResourceType ( GetBase ( dep1 ) , 1 ) >= 200 then
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 274
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 275
15629: PUSH
15630: LD_INT 200
15632: GREATEREQUAL
15633: IFFALSE 15655
// begin AddMedal ( Cans , 1 ) ;
15635: LD_STRING Cans
15637: PPUSH
15638: LD_INT 1
15640: PPUSH
15641: CALL_OW 101
// m1 := true ;
15645: LD_ADDR_VAR 0 3
15649: PUSH
15650: LD_INT 1
15652: ST_TO_ADDR
// end else
15653: GO 15666
// begin AddMedal ( Cans , - 1 ) ;
15655: LD_STRING Cans
15657: PPUSH
15658: LD_INT 1
15660: NEG
15661: PPUSH
15662: CALL_OW 101
// end ; if deadsCounter < 2 then
15666: LD_EXP 31
15670: PUSH
15671: LD_INT 2
15673: LESS
15674: IFFALSE 15696
// begin AddMedal ( Deaths , 1 ) ;
15676: LD_STRING Deaths
15678: PPUSH
15679: LD_INT 1
15681: PPUSH
15682: CALL_OW 101
// m2 := true ;
15686: LD_ADDR_VAR 0 4
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// end else
15694: GO 15707
// begin AddMedal ( Deaths , - 1 ) ;
15696: LD_STRING Deaths
15698: PPUSH
15699: LD_INT 1
15701: NEG
15702: PPUSH
15703: CALL_OW 101
// end ; if mikhailStatus = 0 then
15707: LD_EXP 21
15711: PUSH
15712: LD_INT 0
15714: EQUAL
15715: IFFALSE 15728
// AddMedal ( Prisoner , - 1 ) ;
15717: LD_STRING Prisoner
15719: PPUSH
15720: LD_INT 1
15722: NEG
15723: PPUSH
15724: CALL_OW 101
// if mikhailStatus = 1 then
15728: LD_EXP 21
15732: PUSH
15733: LD_INT 1
15735: EQUAL
15736: IFFALSE 15756
// begin AddMedal ( Prisoner , 1 ) ;
15738: LD_STRING Prisoner
15740: PPUSH
15741: LD_INT 1
15743: PPUSH
15744: CALL_OW 101
// m3 := true ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_INT 1
15755: ST_TO_ADDR
// end ; if mikhailStatus = 2 then
15756: LD_EXP 21
15760: PUSH
15761: LD_INT 2
15763: EQUAL
15764: IFFALSE 15784
// begin AddMedal ( Prisoner , 2 ) ;
15766: LD_STRING Prisoner
15768: PPUSH
15769: LD_INT 2
15771: PPUSH
15772: CALL_OW 101
// m3 := true ;
15776: LD_ADDR_VAR 0 5
15780: PUSH
15781: LD_INT 1
15783: ST_TO_ADDR
// end ; if mikhailStatus = 3 then
15784: LD_EXP 21
15788: PUSH
15789: LD_INT 3
15791: EQUAL
15792: IFFALSE 15805
// AddMedal ( Prisoner , - 2 ) ;
15794: LD_STRING Prisoner
15796: PPUSH
15797: LD_INT 2
15799: NEG
15800: PPUSH
15801: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 and m3 then
15805: LD_OWVAR 67
15809: PUSH
15810: LD_INT 3
15812: GREATEREQUAL
15813: PUSH
15814: LD_VAR 0 3
15818: AND
15819: PUSH
15820: LD_VAR 0 4
15824: AND
15825: PUSH
15826: LD_VAR 0 5
15830: AND
15831: IFFALSE 15843
// SetAchievementEX ( ACH_AMER , 2 ) ;
15833: LD_STRING ACH_AMER
15835: PPUSH
15836: LD_INT 2
15838: PPUSH
15839: CALL_OW 564
// GiveMedals ( MAIN ) ;
15843: LD_STRING MAIN
15845: PPUSH
15846: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
15850: LD_INT 22
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 23
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 21
15872: PUSH
15873: LD_INT 1
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: LIST
15884: PPUSH
15885: CALL_OW 69
15889: PPUSH
15890: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15894: LD_EXP 1
15898: PPUSH
15899: LD_EXP 33
15903: PUSH
15904: LD_STRING JMM
15906: STR
15907: PPUSH
15908: CALL_OW 38
// if IsOK ( Bobby ) then
15912: LD_EXP 2
15916: PPUSH
15917: CALL_OW 302
15921: IFFALSE 15941
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15923: LD_EXP 2
15927: PPUSH
15928: LD_EXP 33
15932: PUSH
15933: LD_STRING Bobby
15935: STR
15936: PPUSH
15937: CALL_OW 38
// if IsOK ( Cyrus ) then
15941: LD_EXP 3
15945: PPUSH
15946: CALL_OW 302
15950: IFFALSE 15970
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15952: LD_EXP 3
15956: PPUSH
15957: LD_EXP 33
15961: PUSH
15962: LD_STRING Cyrus
15964: STR
15965: PPUSH
15966: CALL_OW 38
// if IsOK ( Lisa ) then
15970: LD_EXP 4
15974: PPUSH
15975: CALL_OW 302
15979: IFFALSE 15999
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15981: LD_EXP 4
15985: PPUSH
15986: LD_EXP 33
15990: PUSH
15991: LD_STRING Lisa
15993: STR
15994: PPUSH
15995: CALL_OW 38
// if IsOK ( Khatam ) then
15999: LD_EXP 5
16003: PPUSH
16004: CALL_OW 302
16008: IFFALSE 16028
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
16010: LD_EXP 5
16014: PPUSH
16015: LD_EXP 33
16019: PUSH
16020: LD_STRING Khatam
16022: STR
16023: PPUSH
16024: CALL_OW 38
// if IsOK ( Brian ) then
16028: LD_EXP 6
16032: PPUSH
16033: CALL_OW 302
16037: IFFALSE 16057
// SaveCharacters ( Brian , mission_prefix & Brian ) ;
16039: LD_EXP 6
16043: PPUSH
16044: LD_EXP 33
16048: PUSH
16049: LD_STRING Brian
16051: STR
16052: PPUSH
16053: CALL_OW 38
// if IsOk ( Jerry ) then
16057: LD_EXP 7
16061: PPUSH
16062: CALL_OW 302
16066: IFFALSE 16086
// SaveCharacters ( Jerry , mission_prefix & Jerry ) ;
16068: LD_EXP 7
16072: PPUSH
16073: LD_EXP 33
16077: PUSH
16078: LD_STRING Jerry
16080: STR
16081: PPUSH
16082: CALL_OW 38
// if mikhailStatus = 1 and GetSide ( Mikhail ) = 1 and IsOk ( Mikhail ) then
16086: LD_EXP 21
16090: PUSH
16091: LD_INT 1
16093: EQUAL
16094: PUSH
16095: LD_EXP 8
16099: PPUSH
16100: CALL_OW 255
16104: PUSH
16105: LD_INT 1
16107: EQUAL
16108: AND
16109: PUSH
16110: LD_EXP 8
16114: PPUSH
16115: CALL_OW 302
16119: AND
16120: IFFALSE 16140
// SaveCharacters ( Mikhail , mission_prefix & Mikhail ) ;
16122: LD_EXP 8
16126: PPUSH
16127: LD_EXP 33
16131: PUSH
16132: LD_STRING Mikhail
16134: STR
16135: PPUSH
16136: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry , Mikhail ] , 02_other_survivors ) ;
16140: LD_INT 50
16142: PUSH
16143: EMPTY
16144: LIST
16145: PUSH
16146: LD_INT 22
16148: PUSH
16149: LD_INT 1
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 21
16158: PUSH
16159: LD_INT 1
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: LIST
16170: PPUSH
16171: CALL_OW 69
16175: PUSH
16176: LD_EXP 1
16180: PUSH
16181: LD_EXP 2
16185: PUSH
16186: LD_EXP 3
16190: PUSH
16191: LD_EXP 4
16195: PUSH
16196: LD_EXP 5
16200: PUSH
16201: LD_EXP 6
16205: PUSH
16206: LD_EXP 7
16210: PUSH
16211: LD_EXP 8
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: DIFF
16226: PPUSH
16227: LD_STRING 02_other_survivors
16229: PPUSH
16230: CALL_OW 38
// YouWin ;
16234: CALL_OW 103
// end ; end_of_file
16238: LD_VAR 0 1
16242: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
16243: LD_INT 0
16245: PPUSH
// ar_miner := 81 ;
16246: LD_ADDR_EXP 43
16250: PUSH
16251: LD_INT 81
16253: ST_TO_ADDR
// ar_crane := 88 ;
16254: LD_ADDR_EXP 42
16258: PUSH
16259: LD_INT 88
16261: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
16262: LD_ADDR_EXP 37
16266: PUSH
16267: LD_INT 89
16269: ST_TO_ADDR
// us_hack := 99 ;
16270: LD_ADDR_EXP 38
16274: PUSH
16275: LD_INT 99
16277: ST_TO_ADDR
// us_artillery := 97 ;
16278: LD_ADDR_EXP 39
16282: PUSH
16283: LD_INT 97
16285: ST_TO_ADDR
// ar_bio_bomb := 91 ;
16286: LD_ADDR_EXP 40
16290: PUSH
16291: LD_INT 91
16293: ST_TO_ADDR
// ar_mortar := 92 ;
16294: LD_ADDR_EXP 41
16298: PUSH
16299: LD_INT 92
16301: ST_TO_ADDR
// ru_radar := 98 ;
16302: LD_ADDR_EXP 36
16306: PUSH
16307: LD_INT 98
16309: ST_TO_ADDR
// tech_Artillery := 80 ;
16310: LD_ADDR_EXP 44
16314: PUSH
16315: LD_INT 80
16317: ST_TO_ADDR
// tech_RadMat := 81 ;
16318: LD_ADDR_EXP 45
16322: PUSH
16323: LD_INT 81
16325: ST_TO_ADDR
// tech_BasicTools := 82 ;
16326: LD_ADDR_EXP 46
16330: PUSH
16331: LD_INT 82
16333: ST_TO_ADDR
// tech_Cargo := 83 ;
16334: LD_ADDR_EXP 47
16338: PUSH
16339: LD_INT 83
16341: ST_TO_ADDR
// tech_Track := 84 ;
16342: LD_ADDR_EXP 48
16346: PUSH
16347: LD_INT 84
16349: ST_TO_ADDR
// tech_Crane := 85 ;
16350: LD_ADDR_EXP 49
16354: PUSH
16355: LD_INT 85
16357: ST_TO_ADDR
// tech_Bulldozer := 86 ;
16358: LD_ADDR_EXP 50
16362: PUSH
16363: LD_INT 86
16365: ST_TO_ADDR
// tech_Hovercraft := 87 ;
16366: LD_ADDR_EXP 51
16370: PUSH
16371: LD_INT 87
16373: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
16374: LD_ADDR_EXP 52
16378: PUSH
16379: LD_INT 88
16381: ST_TO_ADDR
// class_mastodont := 31 ;
16382: LD_ADDR_EXP 53
16386: PUSH
16387: LD_INT 31
16389: ST_TO_ADDR
// class_horse := 21 ;
16390: LD_ADDR_EXP 54
16394: PUSH
16395: LD_INT 21
16397: ST_TO_ADDR
// end ;
16398: LD_VAR 0 1
16402: RET
// every 1 do
16403: GO 16405
16405: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
16406: CALL 16243 0 0
16410: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16411: LD_INT 0
16413: PPUSH
// if p2 = 100 then
16414: LD_VAR 0 2
16418: PUSH
16419: LD_INT 100
16421: EQUAL
16422: IFFALSE 17425
// begin if not StreamModeActive then
16424: LD_EXP 55
16428: NOT
16429: IFFALSE 16439
// StreamModeActive := true ;
16431: LD_ADDR_EXP 55
16435: PUSH
16436: LD_INT 1
16438: ST_TO_ADDR
// if p3 = 0 then
16439: LD_VAR 0 3
16443: PUSH
16444: LD_INT 0
16446: EQUAL
16447: IFFALSE 16453
// InitStreamMode ;
16449: CALL 17585 0 0
// if p3 = 1 then
16453: LD_VAR 0 3
16457: PUSH
16458: LD_INT 1
16460: EQUAL
16461: IFFALSE 16471
// sRocket := true ;
16463: LD_ADDR_EXP 60
16467: PUSH
16468: LD_INT 1
16470: ST_TO_ADDR
// if p3 = 2 then
16471: LD_VAR 0 3
16475: PUSH
16476: LD_INT 2
16478: EQUAL
16479: IFFALSE 16489
// sSpeed := true ;
16481: LD_ADDR_EXP 59
16485: PUSH
16486: LD_INT 1
16488: ST_TO_ADDR
// if p3 = 3 then
16489: LD_VAR 0 3
16493: PUSH
16494: LD_INT 3
16496: EQUAL
16497: IFFALSE 16507
// sEngine := true ;
16499: LD_ADDR_EXP 61
16503: PUSH
16504: LD_INT 1
16506: ST_TO_ADDR
// if p3 = 4 then
16507: LD_VAR 0 3
16511: PUSH
16512: LD_INT 4
16514: EQUAL
16515: IFFALSE 16525
// sSpec := true ;
16517: LD_ADDR_EXP 58
16521: PUSH
16522: LD_INT 1
16524: ST_TO_ADDR
// if p3 = 5 then
16525: LD_VAR 0 3
16529: PUSH
16530: LD_INT 5
16532: EQUAL
16533: IFFALSE 16543
// sLevel := true ;
16535: LD_ADDR_EXP 62
16539: PUSH
16540: LD_INT 1
16542: ST_TO_ADDR
// if p3 = 6 then
16543: LD_VAR 0 3
16547: PUSH
16548: LD_INT 6
16550: EQUAL
16551: IFFALSE 16561
// sArmoury := true ;
16553: LD_ADDR_EXP 63
16557: PUSH
16558: LD_INT 1
16560: ST_TO_ADDR
// if p3 = 7 then
16561: LD_VAR 0 3
16565: PUSH
16566: LD_INT 7
16568: EQUAL
16569: IFFALSE 16579
// sRadar := true ;
16571: LD_ADDR_EXP 64
16575: PUSH
16576: LD_INT 1
16578: ST_TO_ADDR
// if p3 = 8 then
16579: LD_VAR 0 3
16583: PUSH
16584: LD_INT 8
16586: EQUAL
16587: IFFALSE 16597
// sBunker := true ;
16589: LD_ADDR_EXP 65
16593: PUSH
16594: LD_INT 1
16596: ST_TO_ADDR
// if p3 = 9 then
16597: LD_VAR 0 3
16601: PUSH
16602: LD_INT 9
16604: EQUAL
16605: IFFALSE 16615
// sHack := true ;
16607: LD_ADDR_EXP 66
16611: PUSH
16612: LD_INT 1
16614: ST_TO_ADDR
// if p3 = 10 then
16615: LD_VAR 0 3
16619: PUSH
16620: LD_INT 10
16622: EQUAL
16623: IFFALSE 16633
// sFire := true ;
16625: LD_ADDR_EXP 67
16629: PUSH
16630: LD_INT 1
16632: ST_TO_ADDR
// if p3 = 11 then
16633: LD_VAR 0 3
16637: PUSH
16638: LD_INT 11
16640: EQUAL
16641: IFFALSE 16651
// sRefresh := true ;
16643: LD_ADDR_EXP 68
16647: PUSH
16648: LD_INT 1
16650: ST_TO_ADDR
// if p3 = 12 then
16651: LD_VAR 0 3
16655: PUSH
16656: LD_INT 12
16658: EQUAL
16659: IFFALSE 16669
// sExp := true ;
16661: LD_ADDR_EXP 69
16665: PUSH
16666: LD_INT 1
16668: ST_TO_ADDR
// if p3 = 13 then
16669: LD_VAR 0 3
16673: PUSH
16674: LD_INT 13
16676: EQUAL
16677: IFFALSE 16687
// sDepot := true ;
16679: LD_ADDR_EXP 70
16683: PUSH
16684: LD_INT 1
16686: ST_TO_ADDR
// if p3 = 14 then
16687: LD_VAR 0 3
16691: PUSH
16692: LD_INT 14
16694: EQUAL
16695: IFFALSE 16705
// sFlag := true ;
16697: LD_ADDR_EXP 71
16701: PUSH
16702: LD_INT 1
16704: ST_TO_ADDR
// if p3 = 15 then
16705: LD_VAR 0 3
16709: PUSH
16710: LD_INT 15
16712: EQUAL
16713: IFFALSE 16723
// sKamikadze := true ;
16715: LD_ADDR_EXP 79
16719: PUSH
16720: LD_INT 1
16722: ST_TO_ADDR
// if p3 = 16 then
16723: LD_VAR 0 3
16727: PUSH
16728: LD_INT 16
16730: EQUAL
16731: IFFALSE 16741
// sTroll := true ;
16733: LD_ADDR_EXP 80
16737: PUSH
16738: LD_INT 1
16740: ST_TO_ADDR
// if p3 = 17 then
16741: LD_VAR 0 3
16745: PUSH
16746: LD_INT 17
16748: EQUAL
16749: IFFALSE 16759
// sSlow := true ;
16751: LD_ADDR_EXP 81
16755: PUSH
16756: LD_INT 1
16758: ST_TO_ADDR
// if p3 = 18 then
16759: LD_VAR 0 3
16763: PUSH
16764: LD_INT 18
16766: EQUAL
16767: IFFALSE 16777
// sLack := true ;
16769: LD_ADDR_EXP 82
16773: PUSH
16774: LD_INT 1
16776: ST_TO_ADDR
// if p3 = 19 then
16777: LD_VAR 0 3
16781: PUSH
16782: LD_INT 19
16784: EQUAL
16785: IFFALSE 16795
// sTank := true ;
16787: LD_ADDR_EXP 84
16791: PUSH
16792: LD_INT 1
16794: ST_TO_ADDR
// if p3 = 20 then
16795: LD_VAR 0 3
16799: PUSH
16800: LD_INT 20
16802: EQUAL
16803: IFFALSE 16813
// sRemote := true ;
16805: LD_ADDR_EXP 85
16809: PUSH
16810: LD_INT 1
16812: ST_TO_ADDR
// if p3 = 21 then
16813: LD_VAR 0 3
16817: PUSH
16818: LD_INT 21
16820: EQUAL
16821: IFFALSE 16831
// sPowell := true ;
16823: LD_ADDR_EXP 86
16827: PUSH
16828: LD_INT 1
16830: ST_TO_ADDR
// if p3 = 22 then
16831: LD_VAR 0 3
16835: PUSH
16836: LD_INT 22
16838: EQUAL
16839: IFFALSE 16849
// sTeleport := true ;
16841: LD_ADDR_EXP 89
16845: PUSH
16846: LD_INT 1
16848: ST_TO_ADDR
// if p3 = 23 then
16849: LD_VAR 0 3
16853: PUSH
16854: LD_INT 23
16856: EQUAL
16857: IFFALSE 16867
// sOilTower := true ;
16859: LD_ADDR_EXP 91
16863: PUSH
16864: LD_INT 1
16866: ST_TO_ADDR
// if p3 = 24 then
16867: LD_VAR 0 3
16871: PUSH
16872: LD_INT 24
16874: EQUAL
16875: IFFALSE 16885
// sShovel := true ;
16877: LD_ADDR_EXP 92
16881: PUSH
16882: LD_INT 1
16884: ST_TO_ADDR
// if p3 = 25 then
16885: LD_VAR 0 3
16889: PUSH
16890: LD_INT 25
16892: EQUAL
16893: IFFALSE 16903
// sSheik := true ;
16895: LD_ADDR_EXP 93
16899: PUSH
16900: LD_INT 1
16902: ST_TO_ADDR
// if p3 = 26 then
16903: LD_VAR 0 3
16907: PUSH
16908: LD_INT 26
16910: EQUAL
16911: IFFALSE 16921
// sEarthquake := true ;
16913: LD_ADDR_EXP 95
16917: PUSH
16918: LD_INT 1
16920: ST_TO_ADDR
// if p3 = 27 then
16921: LD_VAR 0 3
16925: PUSH
16926: LD_INT 27
16928: EQUAL
16929: IFFALSE 16939
// sAI := true ;
16931: LD_ADDR_EXP 96
16935: PUSH
16936: LD_INT 1
16938: ST_TO_ADDR
// if p3 = 28 then
16939: LD_VAR 0 3
16943: PUSH
16944: LD_INT 28
16946: EQUAL
16947: IFFALSE 16957
// sCargo := true ;
16949: LD_ADDR_EXP 99
16953: PUSH
16954: LD_INT 1
16956: ST_TO_ADDR
// if p3 = 29 then
16957: LD_VAR 0 3
16961: PUSH
16962: LD_INT 29
16964: EQUAL
16965: IFFALSE 16975
// sDLaser := true ;
16967: LD_ADDR_EXP 100
16971: PUSH
16972: LD_INT 1
16974: ST_TO_ADDR
// if p3 = 30 then
16975: LD_VAR 0 3
16979: PUSH
16980: LD_INT 30
16982: EQUAL
16983: IFFALSE 16993
// sExchange := true ;
16985: LD_ADDR_EXP 101
16989: PUSH
16990: LD_INT 1
16992: ST_TO_ADDR
// if p3 = 31 then
16993: LD_VAR 0 3
16997: PUSH
16998: LD_INT 31
17000: EQUAL
17001: IFFALSE 17011
// sFac := true ;
17003: LD_ADDR_EXP 102
17007: PUSH
17008: LD_INT 1
17010: ST_TO_ADDR
// if p3 = 32 then
17011: LD_VAR 0 3
17015: PUSH
17016: LD_INT 32
17018: EQUAL
17019: IFFALSE 17029
// sPower := true ;
17021: LD_ADDR_EXP 103
17025: PUSH
17026: LD_INT 1
17028: ST_TO_ADDR
// if p3 = 33 then
17029: LD_VAR 0 3
17033: PUSH
17034: LD_INT 33
17036: EQUAL
17037: IFFALSE 17047
// sRandom := true ;
17039: LD_ADDR_EXP 104
17043: PUSH
17044: LD_INT 1
17046: ST_TO_ADDR
// if p3 = 34 then
17047: LD_VAR 0 3
17051: PUSH
17052: LD_INT 34
17054: EQUAL
17055: IFFALSE 17065
// sShield := true ;
17057: LD_ADDR_EXP 105
17061: PUSH
17062: LD_INT 1
17064: ST_TO_ADDR
// if p3 = 35 then
17065: LD_VAR 0 3
17069: PUSH
17070: LD_INT 35
17072: EQUAL
17073: IFFALSE 17083
// sTime := true ;
17075: LD_ADDR_EXP 106
17079: PUSH
17080: LD_INT 1
17082: ST_TO_ADDR
// if p3 = 36 then
17083: LD_VAR 0 3
17087: PUSH
17088: LD_INT 36
17090: EQUAL
17091: IFFALSE 17101
// sTools := true ;
17093: LD_ADDR_EXP 107
17097: PUSH
17098: LD_INT 1
17100: ST_TO_ADDR
// if p3 = 101 then
17101: LD_VAR 0 3
17105: PUSH
17106: LD_INT 101
17108: EQUAL
17109: IFFALSE 17119
// sSold := true ;
17111: LD_ADDR_EXP 72
17115: PUSH
17116: LD_INT 1
17118: ST_TO_ADDR
// if p3 = 102 then
17119: LD_VAR 0 3
17123: PUSH
17124: LD_INT 102
17126: EQUAL
17127: IFFALSE 17137
// sDiff := true ;
17129: LD_ADDR_EXP 73
17133: PUSH
17134: LD_INT 1
17136: ST_TO_ADDR
// if p3 = 103 then
17137: LD_VAR 0 3
17141: PUSH
17142: LD_INT 103
17144: EQUAL
17145: IFFALSE 17155
// sFog := true ;
17147: LD_ADDR_EXP 76
17151: PUSH
17152: LD_INT 1
17154: ST_TO_ADDR
// if p3 = 104 then
17155: LD_VAR 0 3
17159: PUSH
17160: LD_INT 104
17162: EQUAL
17163: IFFALSE 17173
// sReset := true ;
17165: LD_ADDR_EXP 77
17169: PUSH
17170: LD_INT 1
17172: ST_TO_ADDR
// if p3 = 105 then
17173: LD_VAR 0 3
17177: PUSH
17178: LD_INT 105
17180: EQUAL
17181: IFFALSE 17191
// sSun := true ;
17183: LD_ADDR_EXP 78
17187: PUSH
17188: LD_INT 1
17190: ST_TO_ADDR
// if p3 = 106 then
17191: LD_VAR 0 3
17195: PUSH
17196: LD_INT 106
17198: EQUAL
17199: IFFALSE 17209
// sTiger := true ;
17201: LD_ADDR_EXP 74
17205: PUSH
17206: LD_INT 1
17208: ST_TO_ADDR
// if p3 = 107 then
17209: LD_VAR 0 3
17213: PUSH
17214: LD_INT 107
17216: EQUAL
17217: IFFALSE 17227
// sBomb := true ;
17219: LD_ADDR_EXP 75
17223: PUSH
17224: LD_INT 1
17226: ST_TO_ADDR
// if p3 = 108 then
17227: LD_VAR 0 3
17231: PUSH
17232: LD_INT 108
17234: EQUAL
17235: IFFALSE 17245
// sWound := true ;
17237: LD_ADDR_EXP 83
17241: PUSH
17242: LD_INT 1
17244: ST_TO_ADDR
// if p3 = 109 then
17245: LD_VAR 0 3
17249: PUSH
17250: LD_INT 109
17252: EQUAL
17253: IFFALSE 17263
// sBetray := true ;
17255: LD_ADDR_EXP 87
17259: PUSH
17260: LD_INT 1
17262: ST_TO_ADDR
// if p3 = 110 then
17263: LD_VAR 0 3
17267: PUSH
17268: LD_INT 110
17270: EQUAL
17271: IFFALSE 17281
// sContamin := true ;
17273: LD_ADDR_EXP 88
17277: PUSH
17278: LD_INT 1
17280: ST_TO_ADDR
// if p3 = 111 then
17281: LD_VAR 0 3
17285: PUSH
17286: LD_INT 111
17288: EQUAL
17289: IFFALSE 17299
// sOil := true ;
17291: LD_ADDR_EXP 90
17295: PUSH
17296: LD_INT 1
17298: ST_TO_ADDR
// if p3 = 112 then
17299: LD_VAR 0 3
17303: PUSH
17304: LD_INT 112
17306: EQUAL
17307: IFFALSE 17317
// sStu := true ;
17309: LD_ADDR_EXP 94
17313: PUSH
17314: LD_INT 1
17316: ST_TO_ADDR
// if p3 = 113 then
17317: LD_VAR 0 3
17321: PUSH
17322: LD_INT 113
17324: EQUAL
17325: IFFALSE 17335
// sBazooka := true ;
17327: LD_ADDR_EXP 97
17331: PUSH
17332: LD_INT 1
17334: ST_TO_ADDR
// if p3 = 114 then
17335: LD_VAR 0 3
17339: PUSH
17340: LD_INT 114
17342: EQUAL
17343: IFFALSE 17353
// sMortar := true ;
17345: LD_ADDR_EXP 98
17349: PUSH
17350: LD_INT 1
17352: ST_TO_ADDR
// if p3 = 115 then
17353: LD_VAR 0 3
17357: PUSH
17358: LD_INT 115
17360: EQUAL
17361: IFFALSE 17371
// sRanger := true ;
17363: LD_ADDR_EXP 108
17367: PUSH
17368: LD_INT 1
17370: ST_TO_ADDR
// if p3 = 116 then
17371: LD_VAR 0 3
17375: PUSH
17376: LD_INT 116
17378: EQUAL
17379: IFFALSE 17389
// sComputer := true ;
17381: LD_ADDR_EXP 109
17385: PUSH
17386: LD_INT 1
17388: ST_TO_ADDR
// if p3 = 117 then
17389: LD_VAR 0 3
17393: PUSH
17394: LD_INT 117
17396: EQUAL
17397: IFFALSE 17407
// s30 := true ;
17399: LD_ADDR_EXP 110
17403: PUSH
17404: LD_INT 1
17406: ST_TO_ADDR
// if p3 = 118 then
17407: LD_VAR 0 3
17411: PUSH
17412: LD_INT 118
17414: EQUAL
17415: IFFALSE 17425
// s60 := true ;
17417: LD_ADDR_EXP 111
17421: PUSH
17422: LD_INT 1
17424: ST_TO_ADDR
// end ; if p2 = 101 then
17425: LD_VAR 0 2
17429: PUSH
17430: LD_INT 101
17432: EQUAL
17433: IFFALSE 17561
// begin case p3 of 1 :
17435: LD_VAR 0 3
17439: PUSH
17440: LD_INT 1
17442: DOUBLE
17443: EQUAL
17444: IFTRUE 17448
17446: GO 17455
17448: POP
// hHackUnlimitedResources ; 2 :
17449: CALL 29157 0 0
17453: GO 17561
17455: LD_INT 2
17457: DOUBLE
17458: EQUAL
17459: IFTRUE 17463
17461: GO 17470
17463: POP
// hHackSetLevel10 ; 3 :
17464: CALL 29290 0 0
17468: GO 17561
17470: LD_INT 3
17472: DOUBLE
17473: EQUAL
17474: IFTRUE 17478
17476: GO 17485
17478: POP
// hHackSetLevel10YourUnits ; 4 :
17479: CALL 29375 0 0
17483: GO 17561
17485: LD_INT 4
17487: DOUBLE
17488: EQUAL
17489: IFTRUE 17493
17491: GO 17500
17493: POP
// hHackInvincible ; 5 :
17494: CALL 29823 0 0
17498: GO 17561
17500: LD_INT 5
17502: DOUBLE
17503: EQUAL
17504: IFTRUE 17508
17506: GO 17515
17508: POP
// hHackInvisible ; 6 :
17509: CALL 29934 0 0
17513: GO 17561
17515: LD_INT 6
17517: DOUBLE
17518: EQUAL
17519: IFTRUE 17523
17521: GO 17530
17523: POP
// hHackChangeYourSide ; 7 :
17524: CALL 29991 0 0
17528: GO 17561
17530: LD_INT 7
17532: DOUBLE
17533: EQUAL
17534: IFTRUE 17538
17536: GO 17545
17538: POP
// hHackChangeUnitSide ; 8 :
17539: CALL 30033 0 0
17543: GO 17561
17545: LD_INT 8
17547: DOUBLE
17548: EQUAL
17549: IFTRUE 17553
17551: GO 17560
17553: POP
// hHackFog ; end ;
17554: CALL 30134 0 0
17558: GO 17561
17560: POP
// end ; end ;
17561: LD_VAR 0 7
17565: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
17566: GO 17568
17568: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17569: LD_STRING initStreamRollete();
17571: PPUSH
17572: CALL_OW 559
// InitStreamMode ;
17576: CALL 17585 0 0
// DefineStreamItems ( ) ;
17580: CALL 18049 0 0
// end ;
17584: END
// function InitStreamMode ; begin
17585: LD_INT 0
17587: PPUSH
// streamModeActive := false ;
17588: LD_ADDR_EXP 55
17592: PUSH
17593: LD_INT 0
17595: ST_TO_ADDR
// normalCounter := 36 ;
17596: LD_ADDR_EXP 56
17600: PUSH
17601: LD_INT 36
17603: ST_TO_ADDR
// hardcoreCounter := 16 ;
17604: LD_ADDR_EXP 57
17608: PUSH
17609: LD_INT 16
17611: ST_TO_ADDR
// sRocket := false ;
17612: LD_ADDR_EXP 60
17616: PUSH
17617: LD_INT 0
17619: ST_TO_ADDR
// sSpeed := false ;
17620: LD_ADDR_EXP 59
17624: PUSH
17625: LD_INT 0
17627: ST_TO_ADDR
// sEngine := false ;
17628: LD_ADDR_EXP 61
17632: PUSH
17633: LD_INT 0
17635: ST_TO_ADDR
// sSpec := false ;
17636: LD_ADDR_EXP 58
17640: PUSH
17641: LD_INT 0
17643: ST_TO_ADDR
// sLevel := false ;
17644: LD_ADDR_EXP 62
17648: PUSH
17649: LD_INT 0
17651: ST_TO_ADDR
// sArmoury := false ;
17652: LD_ADDR_EXP 63
17656: PUSH
17657: LD_INT 0
17659: ST_TO_ADDR
// sRadar := false ;
17660: LD_ADDR_EXP 64
17664: PUSH
17665: LD_INT 0
17667: ST_TO_ADDR
// sBunker := false ;
17668: LD_ADDR_EXP 65
17672: PUSH
17673: LD_INT 0
17675: ST_TO_ADDR
// sHack := false ;
17676: LD_ADDR_EXP 66
17680: PUSH
17681: LD_INT 0
17683: ST_TO_ADDR
// sFire := false ;
17684: LD_ADDR_EXP 67
17688: PUSH
17689: LD_INT 0
17691: ST_TO_ADDR
// sRefresh := false ;
17692: LD_ADDR_EXP 68
17696: PUSH
17697: LD_INT 0
17699: ST_TO_ADDR
// sExp := false ;
17700: LD_ADDR_EXP 69
17704: PUSH
17705: LD_INT 0
17707: ST_TO_ADDR
// sDepot := false ;
17708: LD_ADDR_EXP 70
17712: PUSH
17713: LD_INT 0
17715: ST_TO_ADDR
// sFlag := false ;
17716: LD_ADDR_EXP 71
17720: PUSH
17721: LD_INT 0
17723: ST_TO_ADDR
// sKamikadze := false ;
17724: LD_ADDR_EXP 79
17728: PUSH
17729: LD_INT 0
17731: ST_TO_ADDR
// sTroll := false ;
17732: LD_ADDR_EXP 80
17736: PUSH
17737: LD_INT 0
17739: ST_TO_ADDR
// sSlow := false ;
17740: LD_ADDR_EXP 81
17744: PUSH
17745: LD_INT 0
17747: ST_TO_ADDR
// sLack := false ;
17748: LD_ADDR_EXP 82
17752: PUSH
17753: LD_INT 0
17755: ST_TO_ADDR
// sTank := false ;
17756: LD_ADDR_EXP 84
17760: PUSH
17761: LD_INT 0
17763: ST_TO_ADDR
// sRemote := false ;
17764: LD_ADDR_EXP 85
17768: PUSH
17769: LD_INT 0
17771: ST_TO_ADDR
// sPowell := false ;
17772: LD_ADDR_EXP 86
17776: PUSH
17777: LD_INT 0
17779: ST_TO_ADDR
// sTeleport := false ;
17780: LD_ADDR_EXP 89
17784: PUSH
17785: LD_INT 0
17787: ST_TO_ADDR
// sOilTower := false ;
17788: LD_ADDR_EXP 91
17792: PUSH
17793: LD_INT 0
17795: ST_TO_ADDR
// sShovel := false ;
17796: LD_ADDR_EXP 92
17800: PUSH
17801: LD_INT 0
17803: ST_TO_ADDR
// sSheik := false ;
17804: LD_ADDR_EXP 93
17808: PUSH
17809: LD_INT 0
17811: ST_TO_ADDR
// sEarthquake := false ;
17812: LD_ADDR_EXP 95
17816: PUSH
17817: LD_INT 0
17819: ST_TO_ADDR
// sAI := false ;
17820: LD_ADDR_EXP 96
17824: PUSH
17825: LD_INT 0
17827: ST_TO_ADDR
// sCargo := false ;
17828: LD_ADDR_EXP 99
17832: PUSH
17833: LD_INT 0
17835: ST_TO_ADDR
// sDLaser := false ;
17836: LD_ADDR_EXP 100
17840: PUSH
17841: LD_INT 0
17843: ST_TO_ADDR
// sExchange := false ;
17844: LD_ADDR_EXP 101
17848: PUSH
17849: LD_INT 0
17851: ST_TO_ADDR
// sFac := false ;
17852: LD_ADDR_EXP 102
17856: PUSH
17857: LD_INT 0
17859: ST_TO_ADDR
// sPower := false ;
17860: LD_ADDR_EXP 103
17864: PUSH
17865: LD_INT 0
17867: ST_TO_ADDR
// sRandom := false ;
17868: LD_ADDR_EXP 104
17872: PUSH
17873: LD_INT 0
17875: ST_TO_ADDR
// sShield := false ;
17876: LD_ADDR_EXP 105
17880: PUSH
17881: LD_INT 0
17883: ST_TO_ADDR
// sTime := false ;
17884: LD_ADDR_EXP 106
17888: PUSH
17889: LD_INT 0
17891: ST_TO_ADDR
// sTools := false ;
17892: LD_ADDR_EXP 107
17896: PUSH
17897: LD_INT 0
17899: ST_TO_ADDR
// sSold := false ;
17900: LD_ADDR_EXP 72
17904: PUSH
17905: LD_INT 0
17907: ST_TO_ADDR
// sDiff := false ;
17908: LD_ADDR_EXP 73
17912: PUSH
17913: LD_INT 0
17915: ST_TO_ADDR
// sFog := false ;
17916: LD_ADDR_EXP 76
17920: PUSH
17921: LD_INT 0
17923: ST_TO_ADDR
// sReset := false ;
17924: LD_ADDR_EXP 77
17928: PUSH
17929: LD_INT 0
17931: ST_TO_ADDR
// sSun := false ;
17932: LD_ADDR_EXP 78
17936: PUSH
17937: LD_INT 0
17939: ST_TO_ADDR
// sTiger := false ;
17940: LD_ADDR_EXP 74
17944: PUSH
17945: LD_INT 0
17947: ST_TO_ADDR
// sBomb := false ;
17948: LD_ADDR_EXP 75
17952: PUSH
17953: LD_INT 0
17955: ST_TO_ADDR
// sWound := false ;
17956: LD_ADDR_EXP 83
17960: PUSH
17961: LD_INT 0
17963: ST_TO_ADDR
// sBetray := false ;
17964: LD_ADDR_EXP 87
17968: PUSH
17969: LD_INT 0
17971: ST_TO_ADDR
// sContamin := false ;
17972: LD_ADDR_EXP 88
17976: PUSH
17977: LD_INT 0
17979: ST_TO_ADDR
// sOil := false ;
17980: LD_ADDR_EXP 90
17984: PUSH
17985: LD_INT 0
17987: ST_TO_ADDR
// sStu := false ;
17988: LD_ADDR_EXP 94
17992: PUSH
17993: LD_INT 0
17995: ST_TO_ADDR
// sBazooka := false ;
17996: LD_ADDR_EXP 97
18000: PUSH
18001: LD_INT 0
18003: ST_TO_ADDR
// sMortar := false ;
18004: LD_ADDR_EXP 98
18008: PUSH
18009: LD_INT 0
18011: ST_TO_ADDR
// sRanger := false ;
18012: LD_ADDR_EXP 108
18016: PUSH
18017: LD_INT 0
18019: ST_TO_ADDR
// sComputer := false ;
18020: LD_ADDR_EXP 109
18024: PUSH
18025: LD_INT 0
18027: ST_TO_ADDR
// s30 := false ;
18028: LD_ADDR_EXP 110
18032: PUSH
18033: LD_INT 0
18035: ST_TO_ADDR
// s60 := false ;
18036: LD_ADDR_EXP 111
18040: PUSH
18041: LD_INT 0
18043: ST_TO_ADDR
// end ;
18044: LD_VAR 0 1
18048: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
18049: LD_INT 0
18051: PPUSH
18052: PPUSH
18053: PPUSH
18054: PPUSH
18055: PPUSH
// result := [ ] ;
18056: LD_ADDR_VAR 0 1
18060: PUSH
18061: EMPTY
18062: ST_TO_ADDR
// if campaign_id = 1 then
18063: LD_OWVAR 69
18067: PUSH
18068: LD_INT 1
18070: EQUAL
18071: IFFALSE 21237
// begin case mission_number of 1 :
18073: LD_OWVAR 70
18077: PUSH
18078: LD_INT 1
18080: DOUBLE
18081: EQUAL
18082: IFTRUE 18086
18084: GO 18162
18086: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18087: LD_ADDR_VAR 0 1
18091: PUSH
18092: LD_INT 2
18094: PUSH
18095: LD_INT 4
18097: PUSH
18098: LD_INT 11
18100: PUSH
18101: LD_INT 12
18103: PUSH
18104: LD_INT 15
18106: PUSH
18107: LD_INT 16
18109: PUSH
18110: LD_INT 22
18112: PUSH
18113: LD_INT 23
18115: PUSH
18116: LD_INT 26
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 101
18132: PUSH
18133: LD_INT 102
18135: PUSH
18136: LD_INT 106
18138: PUSH
18139: LD_INT 116
18141: PUSH
18142: LD_INT 117
18144: PUSH
18145: LD_INT 118
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: ST_TO_ADDR
18160: GO 21235
18162: LD_INT 2
18164: DOUBLE
18165: EQUAL
18166: IFTRUE 18170
18168: GO 18254
18170: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18171: LD_ADDR_VAR 0 1
18175: PUSH
18176: LD_INT 2
18178: PUSH
18179: LD_INT 4
18181: PUSH
18182: LD_INT 11
18184: PUSH
18185: LD_INT 12
18187: PUSH
18188: LD_INT 15
18190: PUSH
18191: LD_INT 16
18193: PUSH
18194: LD_INT 22
18196: PUSH
18197: LD_INT 23
18199: PUSH
18200: LD_INT 26
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 101
18216: PUSH
18217: LD_INT 102
18219: PUSH
18220: LD_INT 105
18222: PUSH
18223: LD_INT 106
18225: PUSH
18226: LD_INT 108
18228: PUSH
18229: LD_INT 116
18231: PUSH
18232: LD_INT 117
18234: PUSH
18235: LD_INT 118
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: ST_TO_ADDR
18252: GO 21235
18254: LD_INT 3
18256: DOUBLE
18257: EQUAL
18258: IFTRUE 18262
18260: GO 18350
18262: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18263: LD_ADDR_VAR 0 1
18267: PUSH
18268: LD_INT 2
18270: PUSH
18271: LD_INT 4
18273: PUSH
18274: LD_INT 5
18276: PUSH
18277: LD_INT 11
18279: PUSH
18280: LD_INT 12
18282: PUSH
18283: LD_INT 15
18285: PUSH
18286: LD_INT 16
18288: PUSH
18289: LD_INT 22
18291: PUSH
18292: LD_INT 26
18294: PUSH
18295: LD_INT 36
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 101
18312: PUSH
18313: LD_INT 102
18315: PUSH
18316: LD_INT 105
18318: PUSH
18319: LD_INT 106
18321: PUSH
18322: LD_INT 108
18324: PUSH
18325: LD_INT 116
18327: PUSH
18328: LD_INT 117
18330: PUSH
18331: LD_INT 118
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: ST_TO_ADDR
18348: GO 21235
18350: LD_INT 4
18352: DOUBLE
18353: EQUAL
18354: IFTRUE 18358
18356: GO 18454
18358: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18359: LD_ADDR_VAR 0 1
18363: PUSH
18364: LD_INT 2
18366: PUSH
18367: LD_INT 4
18369: PUSH
18370: LD_INT 5
18372: PUSH
18373: LD_INT 8
18375: PUSH
18376: LD_INT 11
18378: PUSH
18379: LD_INT 12
18381: PUSH
18382: LD_INT 15
18384: PUSH
18385: LD_INT 16
18387: PUSH
18388: LD_INT 22
18390: PUSH
18391: LD_INT 23
18393: PUSH
18394: LD_INT 26
18396: PUSH
18397: LD_INT 36
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 101
18416: PUSH
18417: LD_INT 102
18419: PUSH
18420: LD_INT 105
18422: PUSH
18423: LD_INT 106
18425: PUSH
18426: LD_INT 108
18428: PUSH
18429: LD_INT 116
18431: PUSH
18432: LD_INT 117
18434: PUSH
18435: LD_INT 118
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: ST_TO_ADDR
18452: GO 21235
18454: LD_INT 5
18456: DOUBLE
18457: EQUAL
18458: IFTRUE 18462
18460: GO 18574
18462: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18463: LD_ADDR_VAR 0 1
18467: PUSH
18468: LD_INT 2
18470: PUSH
18471: LD_INT 4
18473: PUSH
18474: LD_INT 5
18476: PUSH
18477: LD_INT 6
18479: PUSH
18480: LD_INT 8
18482: PUSH
18483: LD_INT 11
18485: PUSH
18486: LD_INT 12
18488: PUSH
18489: LD_INT 15
18491: PUSH
18492: LD_INT 16
18494: PUSH
18495: LD_INT 22
18497: PUSH
18498: LD_INT 23
18500: PUSH
18501: LD_INT 25
18503: PUSH
18504: LD_INT 26
18506: PUSH
18507: LD_INT 36
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 101
18528: PUSH
18529: LD_INT 102
18531: PUSH
18532: LD_INT 105
18534: PUSH
18535: LD_INT 106
18537: PUSH
18538: LD_INT 108
18540: PUSH
18541: LD_INT 109
18543: PUSH
18544: LD_INT 112
18546: PUSH
18547: LD_INT 116
18549: PUSH
18550: LD_INT 117
18552: PUSH
18553: LD_INT 118
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: ST_TO_ADDR
18572: GO 21235
18574: LD_INT 6
18576: DOUBLE
18577: EQUAL
18578: IFTRUE 18582
18580: GO 18714
18582: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18583: LD_ADDR_VAR 0 1
18587: PUSH
18588: LD_INT 2
18590: PUSH
18591: LD_INT 4
18593: PUSH
18594: LD_INT 5
18596: PUSH
18597: LD_INT 6
18599: PUSH
18600: LD_INT 8
18602: PUSH
18603: LD_INT 11
18605: PUSH
18606: LD_INT 12
18608: PUSH
18609: LD_INT 15
18611: PUSH
18612: LD_INT 16
18614: PUSH
18615: LD_INT 20
18617: PUSH
18618: LD_INT 21
18620: PUSH
18621: LD_INT 22
18623: PUSH
18624: LD_INT 23
18626: PUSH
18627: LD_INT 25
18629: PUSH
18630: LD_INT 26
18632: PUSH
18633: LD_INT 30
18635: PUSH
18636: LD_INT 31
18638: PUSH
18639: LD_INT 32
18641: PUSH
18642: LD_INT 36
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 101
18668: PUSH
18669: LD_INT 102
18671: PUSH
18672: LD_INT 105
18674: PUSH
18675: LD_INT 106
18677: PUSH
18678: LD_INT 108
18680: PUSH
18681: LD_INT 109
18683: PUSH
18684: LD_INT 112
18686: PUSH
18687: LD_INT 116
18689: PUSH
18690: LD_INT 117
18692: PUSH
18693: LD_INT 118
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: ST_TO_ADDR
18712: GO 21235
18714: LD_INT 7
18716: DOUBLE
18717: EQUAL
18718: IFTRUE 18722
18720: GO 18834
18722: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18723: LD_ADDR_VAR 0 1
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: LD_INT 4
18733: PUSH
18734: LD_INT 5
18736: PUSH
18737: LD_INT 7
18739: PUSH
18740: LD_INT 11
18742: PUSH
18743: LD_INT 12
18745: PUSH
18746: LD_INT 15
18748: PUSH
18749: LD_INT 16
18751: PUSH
18752: LD_INT 20
18754: PUSH
18755: LD_INT 21
18757: PUSH
18758: LD_INT 22
18760: PUSH
18761: LD_INT 23
18763: PUSH
18764: LD_INT 25
18766: PUSH
18767: LD_INT 26
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 101
18788: PUSH
18789: LD_INT 102
18791: PUSH
18792: LD_INT 103
18794: PUSH
18795: LD_INT 105
18797: PUSH
18798: LD_INT 106
18800: PUSH
18801: LD_INT 108
18803: PUSH
18804: LD_INT 112
18806: PUSH
18807: LD_INT 116
18809: PUSH
18810: LD_INT 117
18812: PUSH
18813: LD_INT 118
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: ST_TO_ADDR
18832: GO 21235
18834: LD_INT 8
18836: DOUBLE
18837: EQUAL
18838: IFTRUE 18842
18840: GO 18982
18842: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18843: LD_ADDR_VAR 0 1
18847: PUSH
18848: LD_INT 2
18850: PUSH
18851: LD_INT 4
18853: PUSH
18854: LD_INT 5
18856: PUSH
18857: LD_INT 6
18859: PUSH
18860: LD_INT 7
18862: PUSH
18863: LD_INT 8
18865: PUSH
18866: LD_INT 11
18868: PUSH
18869: LD_INT 12
18871: PUSH
18872: LD_INT 15
18874: PUSH
18875: LD_INT 16
18877: PUSH
18878: LD_INT 20
18880: PUSH
18881: LD_INT 21
18883: PUSH
18884: LD_INT 22
18886: PUSH
18887: LD_INT 23
18889: PUSH
18890: LD_INT 25
18892: PUSH
18893: LD_INT 26
18895: PUSH
18896: LD_INT 30
18898: PUSH
18899: LD_INT 31
18901: PUSH
18902: LD_INT 32
18904: PUSH
18905: LD_INT 36
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 101
18932: PUSH
18933: LD_INT 102
18935: PUSH
18936: LD_INT 103
18938: PUSH
18939: LD_INT 105
18941: PUSH
18942: LD_INT 106
18944: PUSH
18945: LD_INT 108
18947: PUSH
18948: LD_INT 109
18950: PUSH
18951: LD_INT 112
18953: PUSH
18954: LD_INT 116
18956: PUSH
18957: LD_INT 117
18959: PUSH
18960: LD_INT 118
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: ST_TO_ADDR
18980: GO 21235
18982: LD_INT 9
18984: DOUBLE
18985: EQUAL
18986: IFTRUE 18990
18988: GO 19138
18990: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18991: LD_ADDR_VAR 0 1
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: LD_INT 4
19001: PUSH
19002: LD_INT 5
19004: PUSH
19005: LD_INT 6
19007: PUSH
19008: LD_INT 7
19010: PUSH
19011: LD_INT 8
19013: PUSH
19014: LD_INT 11
19016: PUSH
19017: LD_INT 12
19019: PUSH
19020: LD_INT 15
19022: PUSH
19023: LD_INT 16
19025: PUSH
19026: LD_INT 20
19028: PUSH
19029: LD_INT 21
19031: PUSH
19032: LD_INT 22
19034: PUSH
19035: LD_INT 23
19037: PUSH
19038: LD_INT 25
19040: PUSH
19041: LD_INT 26
19043: PUSH
19044: LD_INT 28
19046: PUSH
19047: LD_INT 30
19049: PUSH
19050: LD_INT 31
19052: PUSH
19053: LD_INT 32
19055: PUSH
19056: LD_INT 36
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 101
19084: PUSH
19085: LD_INT 102
19087: PUSH
19088: LD_INT 103
19090: PUSH
19091: LD_INT 105
19093: PUSH
19094: LD_INT 106
19096: PUSH
19097: LD_INT 108
19099: PUSH
19100: LD_INT 109
19102: PUSH
19103: LD_INT 112
19105: PUSH
19106: LD_INT 114
19108: PUSH
19109: LD_INT 116
19111: PUSH
19112: LD_INT 117
19114: PUSH
19115: LD_INT 118
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: ST_TO_ADDR
19136: GO 21235
19138: LD_INT 10
19140: DOUBLE
19141: EQUAL
19142: IFTRUE 19146
19144: GO 19342
19146: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19147: LD_ADDR_VAR 0 1
19151: PUSH
19152: LD_INT 2
19154: PUSH
19155: LD_INT 4
19157: PUSH
19158: LD_INT 5
19160: PUSH
19161: LD_INT 6
19163: PUSH
19164: LD_INT 7
19166: PUSH
19167: LD_INT 8
19169: PUSH
19170: LD_INT 9
19172: PUSH
19173: LD_INT 10
19175: PUSH
19176: LD_INT 11
19178: PUSH
19179: LD_INT 12
19181: PUSH
19182: LD_INT 13
19184: PUSH
19185: LD_INT 14
19187: PUSH
19188: LD_INT 15
19190: PUSH
19191: LD_INT 16
19193: PUSH
19194: LD_INT 17
19196: PUSH
19197: LD_INT 18
19199: PUSH
19200: LD_INT 19
19202: PUSH
19203: LD_INT 20
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 22
19211: PUSH
19212: LD_INT 23
19214: PUSH
19215: LD_INT 24
19217: PUSH
19218: LD_INT 25
19220: PUSH
19221: LD_INT 26
19223: PUSH
19224: LD_INT 28
19226: PUSH
19227: LD_INT 30
19229: PUSH
19230: LD_INT 31
19232: PUSH
19233: LD_INT 32
19235: PUSH
19236: LD_INT 36
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 101
19272: PUSH
19273: LD_INT 102
19275: PUSH
19276: LD_INT 103
19278: PUSH
19279: LD_INT 104
19281: PUSH
19282: LD_INT 105
19284: PUSH
19285: LD_INT 106
19287: PUSH
19288: LD_INT 107
19290: PUSH
19291: LD_INT 108
19293: PUSH
19294: LD_INT 109
19296: PUSH
19297: LD_INT 110
19299: PUSH
19300: LD_INT 111
19302: PUSH
19303: LD_INT 112
19305: PUSH
19306: LD_INT 114
19308: PUSH
19309: LD_INT 116
19311: PUSH
19312: LD_INT 117
19314: PUSH
19315: LD_INT 118
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: ST_TO_ADDR
19340: GO 21235
19342: LD_INT 11
19344: DOUBLE
19345: EQUAL
19346: IFTRUE 19350
19348: GO 19554
19350: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19351: LD_ADDR_VAR 0 1
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: LD_INT 3
19361: PUSH
19362: LD_INT 4
19364: PUSH
19365: LD_INT 5
19367: PUSH
19368: LD_INT 6
19370: PUSH
19371: LD_INT 7
19373: PUSH
19374: LD_INT 8
19376: PUSH
19377: LD_INT 9
19379: PUSH
19380: LD_INT 10
19382: PUSH
19383: LD_INT 11
19385: PUSH
19386: LD_INT 12
19388: PUSH
19389: LD_INT 13
19391: PUSH
19392: LD_INT 14
19394: PUSH
19395: LD_INT 15
19397: PUSH
19398: LD_INT 16
19400: PUSH
19401: LD_INT 17
19403: PUSH
19404: LD_INT 18
19406: PUSH
19407: LD_INT 19
19409: PUSH
19410: LD_INT 20
19412: PUSH
19413: LD_INT 21
19415: PUSH
19416: LD_INT 22
19418: PUSH
19419: LD_INT 23
19421: PUSH
19422: LD_INT 24
19424: PUSH
19425: LD_INT 25
19427: PUSH
19428: LD_INT 26
19430: PUSH
19431: LD_INT 28
19433: PUSH
19434: LD_INT 30
19436: PUSH
19437: LD_INT 31
19439: PUSH
19440: LD_INT 32
19442: PUSH
19443: LD_INT 34
19445: PUSH
19446: LD_INT 36
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 101
19484: PUSH
19485: LD_INT 102
19487: PUSH
19488: LD_INT 103
19490: PUSH
19491: LD_INT 104
19493: PUSH
19494: LD_INT 105
19496: PUSH
19497: LD_INT 106
19499: PUSH
19500: LD_INT 107
19502: PUSH
19503: LD_INT 108
19505: PUSH
19506: LD_INT 109
19508: PUSH
19509: LD_INT 110
19511: PUSH
19512: LD_INT 111
19514: PUSH
19515: LD_INT 112
19517: PUSH
19518: LD_INT 114
19520: PUSH
19521: LD_INT 116
19523: PUSH
19524: LD_INT 117
19526: PUSH
19527: LD_INT 118
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: ST_TO_ADDR
19552: GO 21235
19554: LD_INT 12
19556: DOUBLE
19557: EQUAL
19558: IFTRUE 19562
19560: GO 19782
19562: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19563: LD_ADDR_VAR 0 1
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: LD_INT 3
19576: PUSH
19577: LD_INT 4
19579: PUSH
19580: LD_INT 5
19582: PUSH
19583: LD_INT 6
19585: PUSH
19586: LD_INT 7
19588: PUSH
19589: LD_INT 8
19591: PUSH
19592: LD_INT 9
19594: PUSH
19595: LD_INT 10
19597: PUSH
19598: LD_INT 11
19600: PUSH
19601: LD_INT 12
19603: PUSH
19604: LD_INT 13
19606: PUSH
19607: LD_INT 14
19609: PUSH
19610: LD_INT 15
19612: PUSH
19613: LD_INT 16
19615: PUSH
19616: LD_INT 17
19618: PUSH
19619: LD_INT 18
19621: PUSH
19622: LD_INT 19
19624: PUSH
19625: LD_INT 20
19627: PUSH
19628: LD_INT 21
19630: PUSH
19631: LD_INT 22
19633: PUSH
19634: LD_INT 23
19636: PUSH
19637: LD_INT 24
19639: PUSH
19640: LD_INT 25
19642: PUSH
19643: LD_INT 26
19645: PUSH
19646: LD_INT 27
19648: PUSH
19649: LD_INT 28
19651: PUSH
19652: LD_INT 30
19654: PUSH
19655: LD_INT 31
19657: PUSH
19658: LD_INT 32
19660: PUSH
19661: LD_INT 33
19663: PUSH
19664: LD_INT 34
19666: PUSH
19667: LD_INT 36
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 101
19708: PUSH
19709: LD_INT 102
19711: PUSH
19712: LD_INT 103
19714: PUSH
19715: LD_INT 104
19717: PUSH
19718: LD_INT 105
19720: PUSH
19721: LD_INT 106
19723: PUSH
19724: LD_INT 107
19726: PUSH
19727: LD_INT 108
19729: PUSH
19730: LD_INT 109
19732: PUSH
19733: LD_INT 110
19735: PUSH
19736: LD_INT 111
19738: PUSH
19739: LD_INT 112
19741: PUSH
19742: LD_INT 113
19744: PUSH
19745: LD_INT 114
19747: PUSH
19748: LD_INT 116
19750: PUSH
19751: LD_INT 117
19753: PUSH
19754: LD_INT 118
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: ST_TO_ADDR
19780: GO 21235
19782: LD_INT 13
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 19998
19790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19791: LD_ADDR_VAR 0 1
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: LD_INT 2
19801: PUSH
19802: LD_INT 3
19804: PUSH
19805: LD_INT 4
19807: PUSH
19808: LD_INT 5
19810: PUSH
19811: LD_INT 8
19813: PUSH
19814: LD_INT 9
19816: PUSH
19817: LD_INT 10
19819: PUSH
19820: LD_INT 11
19822: PUSH
19823: LD_INT 12
19825: PUSH
19826: LD_INT 14
19828: PUSH
19829: LD_INT 15
19831: PUSH
19832: LD_INT 16
19834: PUSH
19835: LD_INT 17
19837: PUSH
19838: LD_INT 18
19840: PUSH
19841: LD_INT 19
19843: PUSH
19844: LD_INT 20
19846: PUSH
19847: LD_INT 21
19849: PUSH
19850: LD_INT 22
19852: PUSH
19853: LD_INT 23
19855: PUSH
19856: LD_INT 24
19858: PUSH
19859: LD_INT 25
19861: PUSH
19862: LD_INT 26
19864: PUSH
19865: LD_INT 27
19867: PUSH
19868: LD_INT 28
19870: PUSH
19871: LD_INT 30
19873: PUSH
19874: LD_INT 31
19876: PUSH
19877: LD_INT 32
19879: PUSH
19880: LD_INT 33
19882: PUSH
19883: LD_INT 34
19885: PUSH
19886: LD_INT 36
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 101
19924: PUSH
19925: LD_INT 102
19927: PUSH
19928: LD_INT 103
19930: PUSH
19931: LD_INT 104
19933: PUSH
19934: LD_INT 105
19936: PUSH
19937: LD_INT 106
19939: PUSH
19940: LD_INT 107
19942: PUSH
19943: LD_INT 108
19945: PUSH
19946: LD_INT 109
19948: PUSH
19949: LD_INT 110
19951: PUSH
19952: LD_INT 111
19954: PUSH
19955: LD_INT 112
19957: PUSH
19958: LD_INT 113
19960: PUSH
19961: LD_INT 114
19963: PUSH
19964: LD_INT 116
19966: PUSH
19967: LD_INT 117
19969: PUSH
19970: LD_INT 118
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: ST_TO_ADDR
19996: GO 21235
19998: LD_INT 14
20000: DOUBLE
20001: EQUAL
20002: IFTRUE 20006
20004: GO 20230
20006: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20007: LD_ADDR_VAR 0 1
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: LD_INT 3
20020: PUSH
20021: LD_INT 4
20023: PUSH
20024: LD_INT 5
20026: PUSH
20027: LD_INT 6
20029: PUSH
20030: LD_INT 7
20032: PUSH
20033: LD_INT 8
20035: PUSH
20036: LD_INT 9
20038: PUSH
20039: LD_INT 10
20041: PUSH
20042: LD_INT 11
20044: PUSH
20045: LD_INT 12
20047: PUSH
20048: LD_INT 13
20050: PUSH
20051: LD_INT 14
20053: PUSH
20054: LD_INT 15
20056: PUSH
20057: LD_INT 16
20059: PUSH
20060: LD_INT 17
20062: PUSH
20063: LD_INT 18
20065: PUSH
20066: LD_INT 19
20068: PUSH
20069: LD_INT 20
20071: PUSH
20072: LD_INT 21
20074: PUSH
20075: LD_INT 22
20077: PUSH
20078: LD_INT 23
20080: PUSH
20081: LD_INT 24
20083: PUSH
20084: LD_INT 25
20086: PUSH
20087: LD_INT 26
20089: PUSH
20090: LD_INT 27
20092: PUSH
20093: LD_INT 28
20095: PUSH
20096: LD_INT 29
20098: PUSH
20099: LD_INT 30
20101: PUSH
20102: LD_INT 31
20104: PUSH
20105: LD_INT 32
20107: PUSH
20108: LD_INT 33
20110: PUSH
20111: LD_INT 34
20113: PUSH
20114: LD_INT 36
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 101
20156: PUSH
20157: LD_INT 102
20159: PUSH
20160: LD_INT 103
20162: PUSH
20163: LD_INT 104
20165: PUSH
20166: LD_INT 105
20168: PUSH
20169: LD_INT 106
20171: PUSH
20172: LD_INT 107
20174: PUSH
20175: LD_INT 108
20177: PUSH
20178: LD_INT 109
20180: PUSH
20181: LD_INT 110
20183: PUSH
20184: LD_INT 111
20186: PUSH
20187: LD_INT 112
20189: PUSH
20190: LD_INT 113
20192: PUSH
20193: LD_INT 114
20195: PUSH
20196: LD_INT 116
20198: PUSH
20199: LD_INT 117
20201: PUSH
20202: LD_INT 118
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: ST_TO_ADDR
20228: GO 21235
20230: LD_INT 15
20232: DOUBLE
20233: EQUAL
20234: IFTRUE 20238
20236: GO 20462
20238: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20239: LD_ADDR_VAR 0 1
20243: PUSH
20244: LD_INT 1
20246: PUSH
20247: LD_INT 2
20249: PUSH
20250: LD_INT 3
20252: PUSH
20253: LD_INT 4
20255: PUSH
20256: LD_INT 5
20258: PUSH
20259: LD_INT 6
20261: PUSH
20262: LD_INT 7
20264: PUSH
20265: LD_INT 8
20267: PUSH
20268: LD_INT 9
20270: PUSH
20271: LD_INT 10
20273: PUSH
20274: LD_INT 11
20276: PUSH
20277: LD_INT 12
20279: PUSH
20280: LD_INT 13
20282: PUSH
20283: LD_INT 14
20285: PUSH
20286: LD_INT 15
20288: PUSH
20289: LD_INT 16
20291: PUSH
20292: LD_INT 17
20294: PUSH
20295: LD_INT 18
20297: PUSH
20298: LD_INT 19
20300: PUSH
20301: LD_INT 20
20303: PUSH
20304: LD_INT 21
20306: PUSH
20307: LD_INT 22
20309: PUSH
20310: LD_INT 23
20312: PUSH
20313: LD_INT 24
20315: PUSH
20316: LD_INT 25
20318: PUSH
20319: LD_INT 26
20321: PUSH
20322: LD_INT 27
20324: PUSH
20325: LD_INT 28
20327: PUSH
20328: LD_INT 29
20330: PUSH
20331: LD_INT 30
20333: PUSH
20334: LD_INT 31
20336: PUSH
20337: LD_INT 32
20339: PUSH
20340: LD_INT 33
20342: PUSH
20343: LD_INT 34
20345: PUSH
20346: LD_INT 36
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 101
20388: PUSH
20389: LD_INT 102
20391: PUSH
20392: LD_INT 103
20394: PUSH
20395: LD_INT 104
20397: PUSH
20398: LD_INT 105
20400: PUSH
20401: LD_INT 106
20403: PUSH
20404: LD_INT 107
20406: PUSH
20407: LD_INT 108
20409: PUSH
20410: LD_INT 109
20412: PUSH
20413: LD_INT 110
20415: PUSH
20416: LD_INT 111
20418: PUSH
20419: LD_INT 112
20421: PUSH
20422: LD_INT 113
20424: PUSH
20425: LD_INT 114
20427: PUSH
20428: LD_INT 116
20430: PUSH
20431: LD_INT 117
20433: PUSH
20434: LD_INT 118
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: ST_TO_ADDR
20460: GO 21235
20462: LD_INT 16
20464: DOUBLE
20465: EQUAL
20466: IFTRUE 20470
20468: GO 20606
20470: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20471: LD_ADDR_VAR 0 1
20475: PUSH
20476: LD_INT 2
20478: PUSH
20479: LD_INT 4
20481: PUSH
20482: LD_INT 5
20484: PUSH
20485: LD_INT 7
20487: PUSH
20488: LD_INT 11
20490: PUSH
20491: LD_INT 12
20493: PUSH
20494: LD_INT 15
20496: PUSH
20497: LD_INT 16
20499: PUSH
20500: LD_INT 20
20502: PUSH
20503: LD_INT 21
20505: PUSH
20506: LD_INT 22
20508: PUSH
20509: LD_INT 23
20511: PUSH
20512: LD_INT 25
20514: PUSH
20515: LD_INT 26
20517: PUSH
20518: LD_INT 30
20520: PUSH
20521: LD_INT 31
20523: PUSH
20524: LD_INT 32
20526: PUSH
20527: LD_INT 33
20529: PUSH
20530: LD_INT 34
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 101
20556: PUSH
20557: LD_INT 102
20559: PUSH
20560: LD_INT 103
20562: PUSH
20563: LD_INT 106
20565: PUSH
20566: LD_INT 108
20568: PUSH
20569: LD_INT 112
20571: PUSH
20572: LD_INT 113
20574: PUSH
20575: LD_INT 114
20577: PUSH
20578: LD_INT 116
20580: PUSH
20581: LD_INT 117
20583: PUSH
20584: LD_INT 118
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: ST_TO_ADDR
20604: GO 21235
20606: LD_INT 17
20608: DOUBLE
20609: EQUAL
20610: IFTRUE 20614
20612: GO 20838
20614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20615: LD_ADDR_VAR 0 1
20619: PUSH
20620: LD_INT 1
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: LD_INT 3
20628: PUSH
20629: LD_INT 4
20631: PUSH
20632: LD_INT 5
20634: PUSH
20635: LD_INT 6
20637: PUSH
20638: LD_INT 7
20640: PUSH
20641: LD_INT 8
20643: PUSH
20644: LD_INT 9
20646: PUSH
20647: LD_INT 10
20649: PUSH
20650: LD_INT 11
20652: PUSH
20653: LD_INT 12
20655: PUSH
20656: LD_INT 13
20658: PUSH
20659: LD_INT 14
20661: PUSH
20662: LD_INT 15
20664: PUSH
20665: LD_INT 16
20667: PUSH
20668: LD_INT 17
20670: PUSH
20671: LD_INT 18
20673: PUSH
20674: LD_INT 19
20676: PUSH
20677: LD_INT 20
20679: PUSH
20680: LD_INT 21
20682: PUSH
20683: LD_INT 22
20685: PUSH
20686: LD_INT 23
20688: PUSH
20689: LD_INT 24
20691: PUSH
20692: LD_INT 25
20694: PUSH
20695: LD_INT 26
20697: PUSH
20698: LD_INT 27
20700: PUSH
20701: LD_INT 28
20703: PUSH
20704: LD_INT 29
20706: PUSH
20707: LD_INT 30
20709: PUSH
20710: LD_INT 31
20712: PUSH
20713: LD_INT 32
20715: PUSH
20716: LD_INT 33
20718: PUSH
20719: LD_INT 34
20721: PUSH
20722: LD_INT 36
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 101
20764: PUSH
20765: LD_INT 102
20767: PUSH
20768: LD_INT 103
20770: PUSH
20771: LD_INT 104
20773: PUSH
20774: LD_INT 105
20776: PUSH
20777: LD_INT 106
20779: PUSH
20780: LD_INT 107
20782: PUSH
20783: LD_INT 108
20785: PUSH
20786: LD_INT 109
20788: PUSH
20789: LD_INT 110
20791: PUSH
20792: LD_INT 111
20794: PUSH
20795: LD_INT 112
20797: PUSH
20798: LD_INT 113
20800: PUSH
20801: LD_INT 114
20803: PUSH
20804: LD_INT 116
20806: PUSH
20807: LD_INT 117
20809: PUSH
20810: LD_INT 118
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: ST_TO_ADDR
20836: GO 21235
20838: LD_INT 18
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20994
20846: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20847: LD_ADDR_VAR 0 1
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: LD_INT 4
20857: PUSH
20858: LD_INT 5
20860: PUSH
20861: LD_INT 7
20863: PUSH
20864: LD_INT 11
20866: PUSH
20867: LD_INT 12
20869: PUSH
20870: LD_INT 15
20872: PUSH
20873: LD_INT 16
20875: PUSH
20876: LD_INT 20
20878: PUSH
20879: LD_INT 21
20881: PUSH
20882: LD_INT 22
20884: PUSH
20885: LD_INT 23
20887: PUSH
20888: LD_INT 25
20890: PUSH
20891: LD_INT 26
20893: PUSH
20894: LD_INT 30
20896: PUSH
20897: LD_INT 31
20899: PUSH
20900: LD_INT 32
20902: PUSH
20903: LD_INT 33
20905: PUSH
20906: LD_INT 34
20908: PUSH
20909: LD_INT 35
20911: PUSH
20912: LD_INT 36
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 101
20940: PUSH
20941: LD_INT 102
20943: PUSH
20944: LD_INT 103
20946: PUSH
20947: LD_INT 106
20949: PUSH
20950: LD_INT 108
20952: PUSH
20953: LD_INT 112
20955: PUSH
20956: LD_INT 113
20958: PUSH
20959: LD_INT 114
20961: PUSH
20962: LD_INT 115
20964: PUSH
20965: LD_INT 116
20967: PUSH
20968: LD_INT 117
20970: PUSH
20971: LD_INT 118
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: ST_TO_ADDR
20992: GO 21235
20994: LD_INT 19
20996: DOUBLE
20997: EQUAL
20998: IFTRUE 21002
21000: GO 21234
21002: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21003: LD_ADDR_VAR 0 1
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: LD_INT 2
21013: PUSH
21014: LD_INT 3
21016: PUSH
21017: LD_INT 4
21019: PUSH
21020: LD_INT 5
21022: PUSH
21023: LD_INT 6
21025: PUSH
21026: LD_INT 7
21028: PUSH
21029: LD_INT 8
21031: PUSH
21032: LD_INT 9
21034: PUSH
21035: LD_INT 10
21037: PUSH
21038: LD_INT 11
21040: PUSH
21041: LD_INT 12
21043: PUSH
21044: LD_INT 13
21046: PUSH
21047: LD_INT 14
21049: PUSH
21050: LD_INT 15
21052: PUSH
21053: LD_INT 16
21055: PUSH
21056: LD_INT 17
21058: PUSH
21059: LD_INT 18
21061: PUSH
21062: LD_INT 19
21064: PUSH
21065: LD_INT 20
21067: PUSH
21068: LD_INT 21
21070: PUSH
21071: LD_INT 22
21073: PUSH
21074: LD_INT 23
21076: PUSH
21077: LD_INT 24
21079: PUSH
21080: LD_INT 25
21082: PUSH
21083: LD_INT 26
21085: PUSH
21086: LD_INT 27
21088: PUSH
21089: LD_INT 28
21091: PUSH
21092: LD_INT 29
21094: PUSH
21095: LD_INT 30
21097: PUSH
21098: LD_INT 31
21100: PUSH
21101: LD_INT 32
21103: PUSH
21104: LD_INT 33
21106: PUSH
21107: LD_INT 34
21109: PUSH
21110: LD_INT 35
21112: PUSH
21113: LD_INT 36
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 101
21156: PUSH
21157: LD_INT 102
21159: PUSH
21160: LD_INT 103
21162: PUSH
21163: LD_INT 104
21165: PUSH
21166: LD_INT 105
21168: PUSH
21169: LD_INT 106
21171: PUSH
21172: LD_INT 107
21174: PUSH
21175: LD_INT 108
21177: PUSH
21178: LD_INT 109
21180: PUSH
21181: LD_INT 110
21183: PUSH
21184: LD_INT 111
21186: PUSH
21187: LD_INT 112
21189: PUSH
21190: LD_INT 113
21192: PUSH
21193: LD_INT 114
21195: PUSH
21196: LD_INT 115
21198: PUSH
21199: LD_INT 116
21201: PUSH
21202: LD_INT 117
21204: PUSH
21205: LD_INT 118
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: ST_TO_ADDR
21232: GO 21235
21234: POP
// end else
21235: GO 21466
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21237: LD_ADDR_VAR 0 1
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: LD_INT 2
21247: PUSH
21248: LD_INT 3
21250: PUSH
21251: LD_INT 4
21253: PUSH
21254: LD_INT 5
21256: PUSH
21257: LD_INT 6
21259: PUSH
21260: LD_INT 7
21262: PUSH
21263: LD_INT 8
21265: PUSH
21266: LD_INT 9
21268: PUSH
21269: LD_INT 10
21271: PUSH
21272: LD_INT 11
21274: PUSH
21275: LD_INT 12
21277: PUSH
21278: LD_INT 13
21280: PUSH
21281: LD_INT 14
21283: PUSH
21284: LD_INT 15
21286: PUSH
21287: LD_INT 16
21289: PUSH
21290: LD_INT 17
21292: PUSH
21293: LD_INT 18
21295: PUSH
21296: LD_INT 19
21298: PUSH
21299: LD_INT 20
21301: PUSH
21302: LD_INT 21
21304: PUSH
21305: LD_INT 22
21307: PUSH
21308: LD_INT 23
21310: PUSH
21311: LD_INT 24
21313: PUSH
21314: LD_INT 25
21316: PUSH
21317: LD_INT 26
21319: PUSH
21320: LD_INT 27
21322: PUSH
21323: LD_INT 28
21325: PUSH
21326: LD_INT 29
21328: PUSH
21329: LD_INT 30
21331: PUSH
21332: LD_INT 31
21334: PUSH
21335: LD_INT 32
21337: PUSH
21338: LD_INT 33
21340: PUSH
21341: LD_INT 34
21343: PUSH
21344: LD_INT 35
21346: PUSH
21347: LD_INT 36
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 101
21390: PUSH
21391: LD_INT 102
21393: PUSH
21394: LD_INT 103
21396: PUSH
21397: LD_INT 104
21399: PUSH
21400: LD_INT 105
21402: PUSH
21403: LD_INT 106
21405: PUSH
21406: LD_INT 107
21408: PUSH
21409: LD_INT 108
21411: PUSH
21412: LD_INT 109
21414: PUSH
21415: LD_INT 110
21417: PUSH
21418: LD_INT 111
21420: PUSH
21421: LD_INT 112
21423: PUSH
21424: LD_INT 113
21426: PUSH
21427: LD_INT 114
21429: PUSH
21430: LD_INT 115
21432: PUSH
21433: LD_INT 116
21435: PUSH
21436: LD_INT 117
21438: PUSH
21439: LD_INT 118
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: ST_TO_ADDR
// if result then
21466: LD_VAR 0 1
21470: IFFALSE 21759
// begin normal :=  ;
21472: LD_ADDR_VAR 0 3
21476: PUSH
21477: LD_STRING 
21479: ST_TO_ADDR
// hardcore :=  ;
21480: LD_ADDR_VAR 0 4
21484: PUSH
21485: LD_STRING 
21487: ST_TO_ADDR
// for i = 1 to normalCounter do
21488: LD_ADDR_VAR 0 5
21492: PUSH
21493: DOUBLE
21494: LD_INT 1
21496: DEC
21497: ST_TO_ADDR
21498: LD_EXP 56
21502: PUSH
21503: FOR_TO
21504: IFFALSE 21605
// begin tmp := 0 ;
21506: LD_ADDR_VAR 0 2
21510: PUSH
21511: LD_STRING 0
21513: ST_TO_ADDR
// if result [ 1 ] then
21514: LD_VAR 0 1
21518: PUSH
21519: LD_INT 1
21521: ARRAY
21522: IFFALSE 21587
// if result [ 1 ] [ 1 ] = i then
21524: LD_VAR 0 1
21528: PUSH
21529: LD_INT 1
21531: ARRAY
21532: PUSH
21533: LD_INT 1
21535: ARRAY
21536: PUSH
21537: LD_VAR 0 5
21541: EQUAL
21542: IFFALSE 21587
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21544: LD_ADDR_VAR 0 1
21548: PUSH
21549: LD_VAR 0 1
21553: PPUSH
21554: LD_INT 1
21556: PPUSH
21557: LD_VAR 0 1
21561: PUSH
21562: LD_INT 1
21564: ARRAY
21565: PPUSH
21566: LD_INT 1
21568: PPUSH
21569: CALL_OW 3
21573: PPUSH
21574: CALL_OW 1
21578: ST_TO_ADDR
// tmp := 1 ;
21579: LD_ADDR_VAR 0 2
21583: PUSH
21584: LD_STRING 1
21586: ST_TO_ADDR
// end ; normal := normal & tmp ;
21587: LD_ADDR_VAR 0 3
21591: PUSH
21592: LD_VAR 0 3
21596: PUSH
21597: LD_VAR 0 2
21601: STR
21602: ST_TO_ADDR
// end ;
21603: GO 21503
21605: POP
21606: POP
// for i = 1 to hardcoreCounter do
21607: LD_ADDR_VAR 0 5
21611: PUSH
21612: DOUBLE
21613: LD_INT 1
21615: DEC
21616: ST_TO_ADDR
21617: LD_EXP 57
21621: PUSH
21622: FOR_TO
21623: IFFALSE 21728
// begin tmp := 0 ;
21625: LD_ADDR_VAR 0 2
21629: PUSH
21630: LD_STRING 0
21632: ST_TO_ADDR
// if result [ 2 ] then
21633: LD_VAR 0 1
21637: PUSH
21638: LD_INT 2
21640: ARRAY
21641: IFFALSE 21710
// if result [ 2 ] [ 1 ] = 100 + i then
21643: LD_VAR 0 1
21647: PUSH
21648: LD_INT 2
21650: ARRAY
21651: PUSH
21652: LD_INT 1
21654: ARRAY
21655: PUSH
21656: LD_INT 100
21658: PUSH
21659: LD_VAR 0 5
21663: PLUS
21664: EQUAL
21665: IFFALSE 21710
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21667: LD_ADDR_VAR 0 1
21671: PUSH
21672: LD_VAR 0 1
21676: PPUSH
21677: LD_INT 2
21679: PPUSH
21680: LD_VAR 0 1
21684: PUSH
21685: LD_INT 2
21687: ARRAY
21688: PPUSH
21689: LD_INT 1
21691: PPUSH
21692: CALL_OW 3
21696: PPUSH
21697: CALL_OW 1
21701: ST_TO_ADDR
// tmp := 1 ;
21702: LD_ADDR_VAR 0 2
21706: PUSH
21707: LD_STRING 1
21709: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21710: LD_ADDR_VAR 0 4
21714: PUSH
21715: LD_VAR 0 4
21719: PUSH
21720: LD_VAR 0 2
21724: STR
21725: ST_TO_ADDR
// end ;
21726: GO 21622
21728: POP
21729: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
21730: LD_STRING getStreamItemsFromMission("
21732: PUSH
21733: LD_VAR 0 3
21737: STR
21738: PUSH
21739: LD_STRING ","
21741: STR
21742: PUSH
21743: LD_VAR 0 4
21747: STR
21748: PUSH
21749: LD_STRING ")
21751: STR
21752: PPUSH
21753: CALL_OW 559
// end else
21757: GO 21766
// ToLua ( getStreamItemsFromMission("","") ) ;
21759: LD_STRING getStreamItemsFromMission("","")
21761: PPUSH
21762: CALL_OW 559
// end ;
21766: LD_VAR 0 1
21770: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21771: LD_EXP 55
21775: PUSH
21776: LD_EXP 60
21780: AND
21781: IFFALSE 21905
21783: GO 21785
21785: DISABLE
21786: LD_INT 0
21788: PPUSH
21789: PPUSH
// begin enable ;
21790: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21791: LD_ADDR_VAR 0 2
21795: PUSH
21796: LD_INT 22
21798: PUSH
21799: LD_OWVAR 2
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 2
21810: PUSH
21811: LD_INT 34
21813: PUSH
21814: LD_INT 7
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 34
21823: PUSH
21824: LD_INT 45
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 34
21833: PUSH
21834: LD_INT 28
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 34
21843: PUSH
21844: LD_INT 47
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PPUSH
21862: CALL_OW 69
21866: ST_TO_ADDR
// if not tmp then
21867: LD_VAR 0 2
21871: NOT
21872: IFFALSE 21876
// exit ;
21874: GO 21905
// for i in tmp do
21876: LD_ADDR_VAR 0 1
21880: PUSH
21881: LD_VAR 0 2
21885: PUSH
21886: FOR_IN
21887: IFFALSE 21903
// begin SetLives ( i , 0 ) ;
21889: LD_VAR 0 1
21893: PPUSH
21894: LD_INT 0
21896: PPUSH
21897: CALL_OW 234
// end ;
21901: GO 21886
21903: POP
21904: POP
// end ;
21905: PPOPN 2
21907: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21908: LD_EXP 55
21912: PUSH
21913: LD_EXP 61
21917: AND
21918: IFFALSE 22002
21920: GO 21922
21922: DISABLE
21923: LD_INT 0
21925: PPUSH
21926: PPUSH
// begin enable ;
21927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21928: LD_ADDR_VAR 0 2
21932: PUSH
21933: LD_INT 22
21935: PUSH
21936: LD_OWVAR 2
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 32
21947: PUSH
21948: LD_INT 3
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PPUSH
21959: CALL_OW 69
21963: ST_TO_ADDR
// if not tmp then
21964: LD_VAR 0 2
21968: NOT
21969: IFFALSE 21973
// exit ;
21971: GO 22002
// for i in tmp do
21973: LD_ADDR_VAR 0 1
21977: PUSH
21978: LD_VAR 0 2
21982: PUSH
21983: FOR_IN
21984: IFFALSE 22000
// begin SetLives ( i , 0 ) ;
21986: LD_VAR 0 1
21990: PPUSH
21991: LD_INT 0
21993: PPUSH
21994: CALL_OW 234
// end ;
21998: GO 21983
22000: POP
22001: POP
// end ;
22002: PPOPN 2
22004: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22005: LD_EXP 55
22009: PUSH
22010: LD_EXP 58
22014: AND
22015: IFFALSE 22108
22017: GO 22019
22019: DISABLE
22020: LD_INT 0
22022: PPUSH
// begin enable ;
22023: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22024: LD_ADDR_VAR 0 1
22028: PUSH
22029: LD_INT 22
22031: PUSH
22032: LD_OWVAR 2
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 2
22043: PUSH
22044: LD_INT 25
22046: PUSH
22047: LD_INT 5
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 25
22056: PUSH
22057: LD_INT 9
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 25
22066: PUSH
22067: LD_INT 8
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PPUSH
22084: CALL_OW 69
22088: PUSH
22089: FOR_IN
22090: IFFALSE 22106
// begin SetClass ( i , 1 ) ;
22092: LD_VAR 0 1
22096: PPUSH
22097: LD_INT 1
22099: PPUSH
22100: CALL_OW 336
// end ;
22104: GO 22089
22106: POP
22107: POP
// end ;
22108: PPOPN 1
22110: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22111: LD_EXP 55
22115: PUSH
22116: LD_EXP 59
22120: AND
22121: PUSH
22122: LD_OWVAR 65
22126: PUSH
22127: LD_INT 7
22129: LESS
22130: AND
22131: IFFALSE 22145
22133: GO 22135
22135: DISABLE
// begin enable ;
22136: ENABLE
// game_speed := 7 ;
22137: LD_ADDR_OWVAR 65
22141: PUSH
22142: LD_INT 7
22144: ST_TO_ADDR
// end ;
22145: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22146: LD_EXP 55
22150: PUSH
22151: LD_EXP 62
22155: AND
22156: IFFALSE 22358
22158: GO 22160
22160: DISABLE
22161: LD_INT 0
22163: PPUSH
22164: PPUSH
22165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22166: LD_ADDR_VAR 0 3
22170: PUSH
22171: LD_INT 81
22173: PUSH
22174: LD_OWVAR 2
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 21
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PPUSH
22197: CALL_OW 69
22201: ST_TO_ADDR
// if not tmp then
22202: LD_VAR 0 3
22206: NOT
22207: IFFALSE 22211
// exit ;
22209: GO 22358
// if tmp > 5 then
22211: LD_VAR 0 3
22215: PUSH
22216: LD_INT 5
22218: GREATER
22219: IFFALSE 22231
// k := 5 else
22221: LD_ADDR_VAR 0 2
22225: PUSH
22226: LD_INT 5
22228: ST_TO_ADDR
22229: GO 22241
// k := tmp ;
22231: LD_ADDR_VAR 0 2
22235: PUSH
22236: LD_VAR 0 3
22240: ST_TO_ADDR
// for i := 1 to k do
22241: LD_ADDR_VAR 0 1
22245: PUSH
22246: DOUBLE
22247: LD_INT 1
22249: DEC
22250: ST_TO_ADDR
22251: LD_VAR 0 2
22255: PUSH
22256: FOR_TO
22257: IFFALSE 22356
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22259: LD_VAR 0 3
22263: PUSH
22264: LD_VAR 0 1
22268: ARRAY
22269: PPUSH
22270: LD_VAR 0 1
22274: PUSH
22275: LD_INT 4
22277: MOD
22278: PUSH
22279: LD_INT 1
22281: PLUS
22282: PPUSH
22283: CALL_OW 259
22287: PUSH
22288: LD_INT 10
22290: LESS
22291: IFFALSE 22354
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22293: LD_VAR 0 3
22297: PUSH
22298: LD_VAR 0 1
22302: ARRAY
22303: PPUSH
22304: LD_VAR 0 1
22308: PUSH
22309: LD_INT 4
22311: MOD
22312: PUSH
22313: LD_INT 1
22315: PLUS
22316: PPUSH
22317: LD_VAR 0 3
22321: PUSH
22322: LD_VAR 0 1
22326: ARRAY
22327: PPUSH
22328: LD_VAR 0 1
22332: PUSH
22333: LD_INT 4
22335: MOD
22336: PUSH
22337: LD_INT 1
22339: PLUS
22340: PPUSH
22341: CALL_OW 259
22345: PUSH
22346: LD_INT 1
22348: PLUS
22349: PPUSH
22350: CALL_OW 237
22354: GO 22256
22356: POP
22357: POP
// end ;
22358: PPOPN 3
22360: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22361: LD_EXP 55
22365: PUSH
22366: LD_EXP 63
22370: AND
22371: IFFALSE 22391
22373: GO 22375
22375: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22376: LD_INT 4
22378: PPUSH
22379: LD_OWVAR 2
22383: PPUSH
22384: LD_INT 0
22386: PPUSH
22387: CALL_OW 324
22391: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22392: LD_EXP 55
22396: PUSH
22397: LD_EXP 92
22401: AND
22402: IFFALSE 22422
22404: GO 22406
22406: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22407: LD_INT 19
22409: PPUSH
22410: LD_OWVAR 2
22414: PPUSH
22415: LD_INT 0
22417: PPUSH
22418: CALL_OW 324
22422: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22423: LD_EXP 55
22427: PUSH
22428: LD_EXP 64
22432: AND
22433: IFFALSE 22535
22435: GO 22437
22437: DISABLE
22438: LD_INT 0
22440: PPUSH
22441: PPUSH
// begin enable ;
22442: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22443: LD_ADDR_VAR 0 2
22447: PUSH
22448: LD_INT 22
22450: PUSH
22451: LD_OWVAR 2
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: LD_INT 34
22465: PUSH
22466: LD_INT 11
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 34
22475: PUSH
22476: LD_INT 30
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PPUSH
22492: CALL_OW 69
22496: ST_TO_ADDR
// if not tmp then
22497: LD_VAR 0 2
22501: NOT
22502: IFFALSE 22506
// exit ;
22504: GO 22535
// for i in tmp do
22506: LD_ADDR_VAR 0 1
22510: PUSH
22511: LD_VAR 0 2
22515: PUSH
22516: FOR_IN
22517: IFFALSE 22533
// begin SetLives ( i , 0 ) ;
22519: LD_VAR 0 1
22523: PPUSH
22524: LD_INT 0
22526: PPUSH
22527: CALL_OW 234
// end ;
22531: GO 22516
22533: POP
22534: POP
// end ;
22535: PPOPN 2
22537: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22538: LD_EXP 55
22542: PUSH
22543: LD_EXP 65
22547: AND
22548: IFFALSE 22568
22550: GO 22552
22552: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22553: LD_INT 32
22555: PPUSH
22556: LD_OWVAR 2
22560: PPUSH
22561: LD_INT 0
22563: PPUSH
22564: CALL_OW 324
22568: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22569: LD_EXP 55
22573: PUSH
22574: LD_EXP 66
22578: AND
22579: IFFALSE 22760
22581: GO 22583
22583: DISABLE
22584: LD_INT 0
22586: PPUSH
22587: PPUSH
22588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22589: LD_ADDR_VAR 0 2
22593: PUSH
22594: LD_INT 22
22596: PUSH
22597: LD_OWVAR 2
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 33
22608: PUSH
22609: LD_INT 3
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PPUSH
22620: CALL_OW 69
22624: ST_TO_ADDR
// if not tmp then
22625: LD_VAR 0 2
22629: NOT
22630: IFFALSE 22634
// exit ;
22632: GO 22760
// side := 0 ;
22634: LD_ADDR_VAR 0 3
22638: PUSH
22639: LD_INT 0
22641: ST_TO_ADDR
// for i := 1 to 8 do
22642: LD_ADDR_VAR 0 1
22646: PUSH
22647: DOUBLE
22648: LD_INT 1
22650: DEC
22651: ST_TO_ADDR
22652: LD_INT 8
22654: PUSH
22655: FOR_TO
22656: IFFALSE 22704
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22658: LD_OWVAR 2
22662: PUSH
22663: LD_VAR 0 1
22667: NONEQUAL
22668: PUSH
22669: LD_OWVAR 2
22673: PPUSH
22674: LD_VAR 0 1
22678: PPUSH
22679: CALL_OW 81
22683: PUSH
22684: LD_INT 2
22686: EQUAL
22687: AND
22688: IFFALSE 22702
// begin side := i ;
22690: LD_ADDR_VAR 0 3
22694: PUSH
22695: LD_VAR 0 1
22699: ST_TO_ADDR
// break ;
22700: GO 22704
// end ;
22702: GO 22655
22704: POP
22705: POP
// if not side then
22706: LD_VAR 0 3
22710: NOT
22711: IFFALSE 22715
// exit ;
22713: GO 22760
// for i := 1 to tmp do
22715: LD_ADDR_VAR 0 1
22719: PUSH
22720: DOUBLE
22721: LD_INT 1
22723: DEC
22724: ST_TO_ADDR
22725: LD_VAR 0 2
22729: PUSH
22730: FOR_TO
22731: IFFALSE 22758
// if Prob ( 60 ) then
22733: LD_INT 60
22735: PPUSH
22736: CALL_OW 13
22740: IFFALSE 22756
// SetSide ( i , side ) ;
22742: LD_VAR 0 1
22746: PPUSH
22747: LD_VAR 0 3
22751: PPUSH
22752: CALL_OW 235
22756: GO 22730
22758: POP
22759: POP
// end ;
22760: PPOPN 3
22762: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22763: LD_EXP 55
22767: PUSH
22768: LD_EXP 68
22772: AND
22773: IFFALSE 22892
22775: GO 22777
22777: DISABLE
22778: LD_INT 0
22780: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22781: LD_ADDR_VAR 0 1
22785: PUSH
22786: LD_INT 22
22788: PUSH
22789: LD_OWVAR 2
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 21
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 3
22810: PUSH
22811: LD_INT 23
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: PPUSH
22830: CALL_OW 69
22834: PUSH
22835: FOR_IN
22836: IFFALSE 22890
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 257
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: LD_INT 2
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: LD_INT 4
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: IN
22866: IFFALSE 22888
// SetClass ( un , rand ( 1 , 4 ) ) ;
22868: LD_VAR 0 1
22872: PPUSH
22873: LD_INT 1
22875: PPUSH
22876: LD_INT 4
22878: PPUSH
22879: CALL_OW 12
22883: PPUSH
22884: CALL_OW 336
22888: GO 22835
22890: POP
22891: POP
// end ;
22892: PPOPN 1
22894: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22895: LD_EXP 55
22899: PUSH
22900: LD_EXP 67
22904: AND
22905: IFFALSE 22984
22907: GO 22909
22909: DISABLE
22910: LD_INT 0
22912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22913: LD_ADDR_VAR 0 1
22917: PUSH
22918: LD_INT 22
22920: PUSH
22921: LD_OWVAR 2
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 21
22932: PUSH
22933: LD_INT 3
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PPUSH
22944: CALL_OW 69
22948: ST_TO_ADDR
// if not tmp then
22949: LD_VAR 0 1
22953: NOT
22954: IFFALSE 22958
// exit ;
22956: GO 22984
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22958: LD_VAR 0 1
22962: PUSH
22963: LD_INT 1
22965: PPUSH
22966: LD_VAR 0 1
22970: PPUSH
22971: CALL_OW 12
22975: ARRAY
22976: PPUSH
22977: LD_INT 100
22979: PPUSH
22980: CALL_OW 234
// end ;
22984: PPOPN 1
22986: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22987: LD_EXP 55
22991: PUSH
22992: LD_EXP 69
22996: AND
22997: IFFALSE 23095
22999: GO 23001
23001: DISABLE
23002: LD_INT 0
23004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23005: LD_ADDR_VAR 0 1
23009: PUSH
23010: LD_INT 22
23012: PUSH
23013: LD_OWVAR 2
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 21
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PPUSH
23036: CALL_OW 69
23040: ST_TO_ADDR
// if not tmp then
23041: LD_VAR 0 1
23045: NOT
23046: IFFALSE 23050
// exit ;
23048: GO 23095
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23050: LD_VAR 0 1
23054: PUSH
23055: LD_INT 1
23057: PPUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 12
23067: ARRAY
23068: PPUSH
23069: LD_INT 1
23071: PPUSH
23072: LD_INT 4
23074: PPUSH
23075: CALL_OW 12
23079: PPUSH
23080: LD_INT 3000
23082: PPUSH
23083: LD_INT 9000
23085: PPUSH
23086: CALL_OW 12
23090: PPUSH
23091: CALL_OW 492
// end ;
23095: PPOPN 1
23097: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23098: LD_EXP 55
23102: PUSH
23103: LD_EXP 70
23107: AND
23108: IFFALSE 23128
23110: GO 23112
23112: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23113: LD_INT 1
23115: PPUSH
23116: LD_OWVAR 2
23120: PPUSH
23121: LD_INT 0
23123: PPUSH
23124: CALL_OW 324
23128: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23129: LD_EXP 55
23133: PUSH
23134: LD_EXP 71
23138: AND
23139: IFFALSE 23222
23141: GO 23143
23143: DISABLE
23144: LD_INT 0
23146: PPUSH
23147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23148: LD_ADDR_VAR 0 2
23152: PUSH
23153: LD_INT 22
23155: PUSH
23156: LD_OWVAR 2
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 21
23167: PUSH
23168: LD_INT 3
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PPUSH
23179: CALL_OW 69
23183: ST_TO_ADDR
// if not tmp then
23184: LD_VAR 0 2
23188: NOT
23189: IFFALSE 23193
// exit ;
23191: GO 23222
// for i in tmp do
23193: LD_ADDR_VAR 0 1
23197: PUSH
23198: LD_VAR 0 2
23202: PUSH
23203: FOR_IN
23204: IFFALSE 23220
// SetBLevel ( i , 10 ) ;
23206: LD_VAR 0 1
23210: PPUSH
23211: LD_INT 10
23213: PPUSH
23214: CALL_OW 241
23218: GO 23203
23220: POP
23221: POP
// end ;
23222: PPOPN 2
23224: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23225: LD_EXP 55
23229: PUSH
23230: LD_EXP 72
23234: AND
23235: IFFALSE 23346
23237: GO 23239
23239: DISABLE
23240: LD_INT 0
23242: PPUSH
23243: PPUSH
23244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23245: LD_ADDR_VAR 0 3
23249: PUSH
23250: LD_INT 22
23252: PUSH
23253: LD_OWVAR 2
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 25
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PPUSH
23276: CALL_OW 69
23280: ST_TO_ADDR
// if not tmp then
23281: LD_VAR 0 3
23285: NOT
23286: IFFALSE 23290
// exit ;
23288: GO 23346
// un := tmp [ rand ( 1 , tmp ) ] ;
23290: LD_ADDR_VAR 0 2
23294: PUSH
23295: LD_VAR 0 3
23299: PUSH
23300: LD_INT 1
23302: PPUSH
23303: LD_VAR 0 3
23307: PPUSH
23308: CALL_OW 12
23312: ARRAY
23313: ST_TO_ADDR
// if Crawls ( un ) then
23314: LD_VAR 0 2
23318: PPUSH
23319: CALL_OW 318
23323: IFFALSE 23334
// ComWalk ( un ) ;
23325: LD_VAR 0 2
23329: PPUSH
23330: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23334: LD_VAR 0 2
23338: PPUSH
23339: LD_INT 5
23341: PPUSH
23342: CALL_OW 336
// end ;
23346: PPOPN 3
23348: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23349: LD_EXP 55
23353: PUSH
23354: LD_EXP 73
23358: AND
23359: PUSH
23360: LD_OWVAR 67
23364: PUSH
23365: LD_INT 4
23367: LESS
23368: AND
23369: IFFALSE 23388
23371: GO 23373
23373: DISABLE
// begin Difficulty := Difficulty + 1 ;
23374: LD_ADDR_OWVAR 67
23378: PUSH
23379: LD_OWVAR 67
23383: PUSH
23384: LD_INT 1
23386: PLUS
23387: ST_TO_ADDR
// end ;
23388: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23389: LD_EXP 55
23393: PUSH
23394: LD_EXP 74
23398: AND
23399: IFFALSE 23502
23401: GO 23403
23403: DISABLE
23404: LD_INT 0
23406: PPUSH
// begin for i := 1 to 5 do
23407: LD_ADDR_VAR 0 1
23411: PUSH
23412: DOUBLE
23413: LD_INT 1
23415: DEC
23416: ST_TO_ADDR
23417: LD_INT 5
23419: PUSH
23420: FOR_TO
23421: IFFALSE 23500
// begin uc_nation := nation_nature ;
23423: LD_ADDR_OWVAR 21
23427: PUSH
23428: LD_INT 0
23430: ST_TO_ADDR
// uc_side := 0 ;
23431: LD_ADDR_OWVAR 20
23435: PUSH
23436: LD_INT 0
23438: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23439: LD_ADDR_OWVAR 29
23443: PUSH
23444: LD_INT 12
23446: PUSH
23447: LD_INT 12
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: ST_TO_ADDR
// hc_agressivity := 20 ;
23454: LD_ADDR_OWVAR 35
23458: PUSH
23459: LD_INT 20
23461: ST_TO_ADDR
// hc_class := class_tiger ;
23462: LD_ADDR_OWVAR 28
23466: PUSH
23467: LD_INT 14
23469: ST_TO_ADDR
// hc_gallery :=  ;
23470: LD_ADDR_OWVAR 33
23474: PUSH
23475: LD_STRING 
23477: ST_TO_ADDR
// hc_name :=  ;
23478: LD_ADDR_OWVAR 26
23482: PUSH
23483: LD_STRING 
23485: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23486: CALL_OW 44
23490: PPUSH
23491: LD_INT 0
23493: PPUSH
23494: CALL_OW 51
// end ;
23498: GO 23420
23500: POP
23501: POP
// end ;
23502: PPOPN 1
23504: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23505: LD_EXP 55
23509: PUSH
23510: LD_EXP 75
23514: AND
23515: IFFALSE 23524
23517: GO 23519
23519: DISABLE
// StreamSibBomb ;
23520: CALL 23525 0 0
23524: END
// export function StreamSibBomb ; var i , x , y ; begin
23525: LD_INT 0
23527: PPUSH
23528: PPUSH
23529: PPUSH
23530: PPUSH
// result := false ;
23531: LD_ADDR_VAR 0 1
23535: PUSH
23536: LD_INT 0
23538: ST_TO_ADDR
// for i := 1 to 16 do
23539: LD_ADDR_VAR 0 2
23543: PUSH
23544: DOUBLE
23545: LD_INT 1
23547: DEC
23548: ST_TO_ADDR
23549: LD_INT 16
23551: PUSH
23552: FOR_TO
23553: IFFALSE 23752
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23555: LD_ADDR_VAR 0 3
23559: PUSH
23560: LD_INT 10
23562: PUSH
23563: LD_INT 20
23565: PUSH
23566: LD_INT 30
23568: PUSH
23569: LD_INT 40
23571: PUSH
23572: LD_INT 50
23574: PUSH
23575: LD_INT 60
23577: PUSH
23578: LD_INT 70
23580: PUSH
23581: LD_INT 80
23583: PUSH
23584: LD_INT 90
23586: PUSH
23587: LD_INT 100
23589: PUSH
23590: LD_INT 110
23592: PUSH
23593: LD_INT 120
23595: PUSH
23596: LD_INT 130
23598: PUSH
23599: LD_INT 140
23601: PUSH
23602: LD_INT 150
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 1
23624: PPUSH
23625: LD_INT 15
23627: PPUSH
23628: CALL_OW 12
23632: ARRAY
23633: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23634: LD_ADDR_VAR 0 4
23638: PUSH
23639: LD_INT 10
23641: PUSH
23642: LD_INT 20
23644: PUSH
23645: LD_INT 30
23647: PUSH
23648: LD_INT 40
23650: PUSH
23651: LD_INT 50
23653: PUSH
23654: LD_INT 60
23656: PUSH
23657: LD_INT 70
23659: PUSH
23660: LD_INT 80
23662: PUSH
23663: LD_INT 90
23665: PUSH
23666: LD_INT 100
23668: PUSH
23669: LD_INT 110
23671: PUSH
23672: LD_INT 120
23674: PUSH
23675: LD_INT 130
23677: PUSH
23678: LD_INT 140
23680: PUSH
23681: LD_INT 150
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 1
23703: PPUSH
23704: LD_INT 15
23706: PPUSH
23707: CALL_OW 12
23711: ARRAY
23712: ST_TO_ADDR
// if ValidHex ( x , y ) then
23713: LD_VAR 0 3
23717: PPUSH
23718: LD_VAR 0 4
23722: PPUSH
23723: CALL_OW 488
23727: IFFALSE 23750
// begin result := [ x , y ] ;
23729: LD_ADDR_VAR 0 1
23733: PUSH
23734: LD_VAR 0 3
23738: PUSH
23739: LD_VAR 0 4
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: ST_TO_ADDR
// break ;
23748: GO 23752
// end ; end ;
23750: GO 23552
23752: POP
23753: POP
// if result then
23754: LD_VAR 0 1
23758: IFFALSE 23818
// begin ToLua ( playSibBomb() ) ;
23760: LD_STRING playSibBomb()
23762: PPUSH
23763: CALL_OW 559
// wait ( 0 0$14 ) ;
23767: LD_INT 490
23769: PPUSH
23770: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23774: LD_VAR 0 1
23778: PUSH
23779: LD_INT 1
23781: ARRAY
23782: PPUSH
23783: LD_VAR 0 1
23787: PUSH
23788: LD_INT 2
23790: ARRAY
23791: PPUSH
23792: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23796: LD_VAR 0 1
23800: PUSH
23801: LD_INT 1
23803: ARRAY
23804: PPUSH
23805: LD_VAR 0 1
23809: PUSH
23810: LD_INT 2
23812: ARRAY
23813: PPUSH
23814: CALL_OW 429
// end ; end ;
23818: LD_VAR 0 1
23822: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23823: LD_EXP 55
23827: PUSH
23828: LD_EXP 77
23832: AND
23833: IFFALSE 23845
23835: GO 23837
23837: DISABLE
// YouLost (  ) ;
23838: LD_STRING 
23840: PPUSH
23841: CALL_OW 104
23845: END
// every 0 0$1 trigger StreamModeActive and sFog do
23846: LD_EXP 55
23850: PUSH
23851: LD_EXP 76
23855: AND
23856: IFFALSE 23870
23858: GO 23860
23860: DISABLE
// FogOff ( your_side ) ;
23861: LD_OWVAR 2
23865: PPUSH
23866: CALL_OW 344
23870: END
// every 0 0$1 trigger StreamModeActive and sSun do
23871: LD_EXP 55
23875: PUSH
23876: LD_EXP 78
23880: AND
23881: IFFALSE 23909
23883: GO 23885
23885: DISABLE
// begin solar_recharge_percent := 0 ;
23886: LD_ADDR_OWVAR 79
23890: PUSH
23891: LD_INT 0
23893: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23894: LD_INT 10500
23896: PPUSH
23897: CALL_OW 67
// solar_recharge_percent := 100 ;
23901: LD_ADDR_OWVAR 79
23905: PUSH
23906: LD_INT 100
23908: ST_TO_ADDR
// end ;
23909: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23910: LD_EXP 55
23914: PUSH
23915: LD_EXP 79
23919: AND
23920: IFFALSE 24159
23922: GO 23924
23924: DISABLE
23925: LD_INT 0
23927: PPUSH
23928: PPUSH
23929: PPUSH
// begin tmp := [ ] ;
23930: LD_ADDR_VAR 0 3
23934: PUSH
23935: EMPTY
23936: ST_TO_ADDR
// for i := 1 to 6 do
23937: LD_ADDR_VAR 0 1
23941: PUSH
23942: DOUBLE
23943: LD_INT 1
23945: DEC
23946: ST_TO_ADDR
23947: LD_INT 6
23949: PUSH
23950: FOR_TO
23951: IFFALSE 24056
// begin uc_nation := nation_nature ;
23953: LD_ADDR_OWVAR 21
23957: PUSH
23958: LD_INT 0
23960: ST_TO_ADDR
// uc_side := 0 ;
23961: LD_ADDR_OWVAR 20
23965: PUSH
23966: LD_INT 0
23968: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23969: LD_ADDR_OWVAR 29
23973: PUSH
23974: LD_INT 12
23976: PUSH
23977: LD_INT 12
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: ST_TO_ADDR
// hc_agressivity := 20 ;
23984: LD_ADDR_OWVAR 35
23988: PUSH
23989: LD_INT 20
23991: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23992: LD_ADDR_OWVAR 28
23996: PUSH
23997: LD_INT 17
23999: ST_TO_ADDR
// hc_gallery :=  ;
24000: LD_ADDR_OWVAR 33
24004: PUSH
24005: LD_STRING 
24007: ST_TO_ADDR
// hc_name :=  ;
24008: LD_ADDR_OWVAR 26
24012: PUSH
24013: LD_STRING 
24015: ST_TO_ADDR
// un := CreateHuman ;
24016: LD_ADDR_VAR 0 2
24020: PUSH
24021: CALL_OW 44
24025: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24026: LD_VAR 0 2
24030: PPUSH
24031: LD_INT 1
24033: PPUSH
24034: CALL_OW 51
// tmp := tmp ^ un ;
24038: LD_ADDR_VAR 0 3
24042: PUSH
24043: LD_VAR 0 3
24047: PUSH
24048: LD_VAR 0 2
24052: ADD
24053: ST_TO_ADDR
// end ;
24054: GO 23950
24056: POP
24057: POP
// repeat wait ( 0 0$1 ) ;
24058: LD_INT 35
24060: PPUSH
24061: CALL_OW 67
// for un in tmp do
24065: LD_ADDR_VAR 0 2
24069: PUSH
24070: LD_VAR 0 3
24074: PUSH
24075: FOR_IN
24076: IFFALSE 24150
// begin if IsDead ( un ) then
24078: LD_VAR 0 2
24082: PPUSH
24083: CALL_OW 301
24087: IFFALSE 24107
// begin tmp := tmp diff un ;
24089: LD_ADDR_VAR 0 3
24093: PUSH
24094: LD_VAR 0 3
24098: PUSH
24099: LD_VAR 0 2
24103: DIFF
24104: ST_TO_ADDR
// continue ;
24105: GO 24075
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24107: LD_VAR 0 2
24111: PPUSH
24112: LD_INT 3
24114: PUSH
24115: LD_INT 22
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PPUSH
24129: CALL_OW 69
24133: PPUSH
24134: LD_VAR 0 2
24138: PPUSH
24139: CALL_OW 74
24143: PPUSH
24144: CALL_OW 115
// end ;
24148: GO 24075
24150: POP
24151: POP
// until not tmp ;
24152: LD_VAR 0 3
24156: NOT
24157: IFFALSE 24058
// end ;
24159: PPOPN 3
24161: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24162: LD_EXP 55
24166: PUSH
24167: LD_EXP 80
24171: AND
24172: IFFALSE 24226
24174: GO 24176
24176: DISABLE
// begin ToLua ( displayTroll(); ) ;
24177: LD_STRING displayTroll();
24179: PPUSH
24180: CALL_OW 559
// wait ( 3 3$00 ) ;
24184: LD_INT 6300
24186: PPUSH
24187: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24191: LD_STRING hideTroll();
24193: PPUSH
24194: CALL_OW 559
// wait ( 1 1$00 ) ;
24198: LD_INT 2100
24200: PPUSH
24201: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24205: LD_STRING displayTroll();
24207: PPUSH
24208: CALL_OW 559
// wait ( 1 1$00 ) ;
24212: LD_INT 2100
24214: PPUSH
24215: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24219: LD_STRING hideTroll();
24221: PPUSH
24222: CALL_OW 559
// end ;
24226: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24227: LD_EXP 55
24231: PUSH
24232: LD_EXP 81
24236: AND
24237: IFFALSE 24300
24239: GO 24241
24241: DISABLE
24242: LD_INT 0
24244: PPUSH
// begin p := 0 ;
24245: LD_ADDR_VAR 0 1
24249: PUSH
24250: LD_INT 0
24252: ST_TO_ADDR
// repeat game_speed := 1 ;
24253: LD_ADDR_OWVAR 65
24257: PUSH
24258: LD_INT 1
24260: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24261: LD_INT 35
24263: PPUSH
24264: CALL_OW 67
// p := p + 1 ;
24268: LD_ADDR_VAR 0 1
24272: PUSH
24273: LD_VAR 0 1
24277: PUSH
24278: LD_INT 1
24280: PLUS
24281: ST_TO_ADDR
// until p >= 60 ;
24282: LD_VAR 0 1
24286: PUSH
24287: LD_INT 60
24289: GREATEREQUAL
24290: IFFALSE 24253
// game_speed := 4 ;
24292: LD_ADDR_OWVAR 65
24296: PUSH
24297: LD_INT 4
24299: ST_TO_ADDR
// end ;
24300: PPOPN 1
24302: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24303: LD_EXP 55
24307: PUSH
24308: LD_EXP 82
24312: AND
24313: IFFALSE 24459
24315: GO 24317
24317: DISABLE
24318: LD_INT 0
24320: PPUSH
24321: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24322: LD_ADDR_VAR 0 1
24326: PUSH
24327: LD_INT 22
24329: PUSH
24330: LD_OWVAR 2
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 2
24341: PUSH
24342: LD_INT 30
24344: PUSH
24345: LD_INT 0
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 30
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: LIST
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PPUSH
24371: CALL_OW 69
24375: ST_TO_ADDR
// if not depot then
24376: LD_VAR 0 1
24380: NOT
24381: IFFALSE 24385
// exit ;
24383: GO 24459
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24385: LD_ADDR_VAR 0 2
24389: PUSH
24390: LD_VAR 0 1
24394: PUSH
24395: LD_INT 1
24397: PPUSH
24398: LD_VAR 0 1
24402: PPUSH
24403: CALL_OW 12
24407: ARRAY
24408: PPUSH
24409: CALL_OW 274
24413: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24414: LD_VAR 0 2
24418: PPUSH
24419: LD_INT 1
24421: PPUSH
24422: LD_INT 0
24424: PPUSH
24425: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24429: LD_VAR 0 2
24433: PPUSH
24434: LD_INT 2
24436: PPUSH
24437: LD_INT 0
24439: PPUSH
24440: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24444: LD_VAR 0 2
24448: PPUSH
24449: LD_INT 3
24451: PPUSH
24452: LD_INT 0
24454: PPUSH
24455: CALL_OW 277
// end ;
24459: PPOPN 2
24461: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24462: LD_EXP 55
24466: PUSH
24467: LD_EXP 83
24471: AND
24472: IFFALSE 24569
24474: GO 24476
24476: DISABLE
24477: LD_INT 0
24479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24480: LD_ADDR_VAR 0 1
24484: PUSH
24485: LD_INT 22
24487: PUSH
24488: LD_OWVAR 2
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 21
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 3
24509: PUSH
24510: LD_INT 23
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: LIST
24528: PPUSH
24529: CALL_OW 69
24533: ST_TO_ADDR
// if not tmp then
24534: LD_VAR 0 1
24538: NOT
24539: IFFALSE 24543
// exit ;
24541: GO 24569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24543: LD_VAR 0 1
24547: PUSH
24548: LD_INT 1
24550: PPUSH
24551: LD_VAR 0 1
24555: PPUSH
24556: CALL_OW 12
24560: ARRAY
24561: PPUSH
24562: LD_INT 200
24564: PPUSH
24565: CALL_OW 234
// end ;
24569: PPOPN 1
24571: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24572: LD_EXP 55
24576: PUSH
24577: LD_EXP 84
24581: AND
24582: IFFALSE 24661
24584: GO 24586
24586: DISABLE
24587: LD_INT 0
24589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24590: LD_ADDR_VAR 0 1
24594: PUSH
24595: LD_INT 22
24597: PUSH
24598: LD_OWVAR 2
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 21
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PPUSH
24621: CALL_OW 69
24625: ST_TO_ADDR
// if not tmp then
24626: LD_VAR 0 1
24630: NOT
24631: IFFALSE 24635
// exit ;
24633: GO 24661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24635: LD_VAR 0 1
24639: PUSH
24640: LD_INT 1
24642: PPUSH
24643: LD_VAR 0 1
24647: PPUSH
24648: CALL_OW 12
24652: ARRAY
24653: PPUSH
24654: LD_INT 60
24656: PPUSH
24657: CALL_OW 234
// end ;
24661: PPOPN 1
24663: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24664: LD_EXP 55
24668: PUSH
24669: LD_EXP 85
24673: AND
24674: IFFALSE 24773
24676: GO 24678
24678: DISABLE
24679: LD_INT 0
24681: PPUSH
24682: PPUSH
// begin enable ;
24683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24684: LD_ADDR_VAR 0 1
24688: PUSH
24689: LD_INT 22
24691: PUSH
24692: LD_OWVAR 2
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 61
24703: PUSH
24704: EMPTY
24705: LIST
24706: PUSH
24707: LD_INT 33
24709: PUSH
24710: LD_INT 2
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: LIST
24721: PPUSH
24722: CALL_OW 69
24726: ST_TO_ADDR
// if not tmp then
24727: LD_VAR 0 1
24731: NOT
24732: IFFALSE 24736
// exit ;
24734: GO 24773
// for i in tmp do
24736: LD_ADDR_VAR 0 2
24740: PUSH
24741: LD_VAR 0 1
24745: PUSH
24746: FOR_IN
24747: IFFALSE 24771
// if IsControledBy ( i ) then
24749: LD_VAR 0 2
24753: PPUSH
24754: CALL_OW 312
24758: IFFALSE 24769
// ComUnlink ( i ) ;
24760: LD_VAR 0 2
24764: PPUSH
24765: CALL_OW 136
24769: GO 24746
24771: POP
24772: POP
// end ;
24773: PPOPN 2
24775: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24776: LD_EXP 55
24780: PUSH
24781: LD_EXP 86
24785: AND
24786: IFFALSE 24926
24788: GO 24790
24790: DISABLE
24791: LD_INT 0
24793: PPUSH
24794: PPUSH
// begin ToLua ( displayPowell(); ) ;
24795: LD_STRING displayPowell();
24797: PPUSH
24798: CALL_OW 559
// uc_side := 0 ;
24802: LD_ADDR_OWVAR 20
24806: PUSH
24807: LD_INT 0
24809: ST_TO_ADDR
// uc_nation := 2 ;
24810: LD_ADDR_OWVAR 21
24814: PUSH
24815: LD_INT 2
24817: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24818: LD_ADDR_OWVAR 37
24822: PUSH
24823: LD_INT 14
24825: ST_TO_ADDR
// vc_engine := engine_siberite ;
24826: LD_ADDR_OWVAR 39
24830: PUSH
24831: LD_INT 3
24833: ST_TO_ADDR
// vc_control := control_apeman ;
24834: LD_ADDR_OWVAR 38
24838: PUSH
24839: LD_INT 5
24841: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24842: LD_ADDR_OWVAR 40
24846: PUSH
24847: LD_INT 29
24849: ST_TO_ADDR
// un := CreateVehicle ;
24850: LD_ADDR_VAR 0 2
24854: PUSH
24855: CALL_OW 45
24859: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24860: LD_VAR 0 2
24864: PPUSH
24865: LD_INT 1
24867: PPUSH
24868: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24872: LD_INT 35
24874: PPUSH
24875: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24879: LD_VAR 0 2
24883: PPUSH
24884: LD_INT 22
24886: PUSH
24887: LD_OWVAR 2
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PPUSH
24896: CALL_OW 69
24900: PPUSH
24901: LD_VAR 0 2
24905: PPUSH
24906: CALL_OW 74
24910: PPUSH
24911: CALL_OW 115
// until IsDead ( un ) ;
24915: LD_VAR 0 2
24919: PPUSH
24920: CALL_OW 301
24924: IFFALSE 24872
// end ;
24926: PPOPN 2
24928: END
// every 0 0$1 trigger StreamModeActive and sStu do
24929: LD_EXP 55
24933: PUSH
24934: LD_EXP 94
24938: AND
24939: IFFALSE 24955
24941: GO 24943
24943: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24944: LD_STRING displayStucuk();
24946: PPUSH
24947: CALL_OW 559
// ResetFog ;
24951: CALL_OW 335
// end ;
24955: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24956: LD_EXP 55
24960: PUSH
24961: LD_EXP 87
24965: AND
24966: IFFALSE 25107
24968: GO 24970
24970: DISABLE
24971: LD_INT 0
24973: PPUSH
24974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24975: LD_ADDR_VAR 0 2
24979: PUSH
24980: LD_INT 22
24982: PUSH
24983: LD_OWVAR 2
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 21
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PPUSH
25006: CALL_OW 69
25010: ST_TO_ADDR
// if not tmp then
25011: LD_VAR 0 2
25015: NOT
25016: IFFALSE 25020
// exit ;
25018: GO 25107
// un := tmp [ rand ( 1 , tmp ) ] ;
25020: LD_ADDR_VAR 0 1
25024: PUSH
25025: LD_VAR 0 2
25029: PUSH
25030: LD_INT 1
25032: PPUSH
25033: LD_VAR 0 2
25037: PPUSH
25038: CALL_OW 12
25042: ARRAY
25043: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25044: LD_VAR 0 1
25048: PPUSH
25049: LD_INT 0
25051: PPUSH
25052: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25056: LD_VAR 0 1
25060: PPUSH
25061: LD_OWVAR 3
25065: PUSH
25066: LD_VAR 0 1
25070: DIFF
25071: PPUSH
25072: LD_VAR 0 1
25076: PPUSH
25077: CALL_OW 74
25081: PPUSH
25082: CALL_OW 115
// wait ( 0 0$20 ) ;
25086: LD_INT 700
25088: PPUSH
25089: CALL_OW 67
// SetSide ( un , your_side ) ;
25093: LD_VAR 0 1
25097: PPUSH
25098: LD_OWVAR 2
25102: PPUSH
25103: CALL_OW 235
// end ;
25107: PPOPN 2
25109: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25110: LD_EXP 55
25114: PUSH
25115: LD_EXP 88
25119: AND
25120: IFFALSE 25226
25122: GO 25124
25124: DISABLE
25125: LD_INT 0
25127: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25128: LD_ADDR_VAR 0 1
25132: PUSH
25133: LD_INT 22
25135: PUSH
25136: LD_OWVAR 2
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 2
25147: PUSH
25148: LD_INT 30
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 30
25160: PUSH
25161: LD_INT 1
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: LIST
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PPUSH
25177: CALL_OW 69
25181: ST_TO_ADDR
// if not depot then
25182: LD_VAR 0 1
25186: NOT
25187: IFFALSE 25191
// exit ;
25189: GO 25226
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25191: LD_VAR 0 1
25195: PUSH
25196: LD_INT 1
25198: ARRAY
25199: PPUSH
25200: CALL_OW 250
25204: PPUSH
25205: LD_VAR 0 1
25209: PUSH
25210: LD_INT 1
25212: ARRAY
25213: PPUSH
25214: CALL_OW 251
25218: PPUSH
25219: LD_INT 70
25221: PPUSH
25222: CALL_OW 495
// end ;
25226: PPOPN 1
25228: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25229: LD_EXP 55
25233: PUSH
25234: LD_EXP 89
25238: AND
25239: IFFALSE 25450
25241: GO 25243
25243: DISABLE
25244: LD_INT 0
25246: PPUSH
25247: PPUSH
25248: PPUSH
25249: PPUSH
25250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25251: LD_ADDR_VAR 0 5
25255: PUSH
25256: LD_INT 22
25258: PUSH
25259: LD_OWVAR 2
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 21
25270: PUSH
25271: LD_INT 1
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PPUSH
25282: CALL_OW 69
25286: ST_TO_ADDR
// if not tmp then
25287: LD_VAR 0 5
25291: NOT
25292: IFFALSE 25296
// exit ;
25294: GO 25450
// for i in tmp do
25296: LD_ADDR_VAR 0 1
25300: PUSH
25301: LD_VAR 0 5
25305: PUSH
25306: FOR_IN
25307: IFFALSE 25448
// begin d := rand ( 0 , 5 ) ;
25309: LD_ADDR_VAR 0 4
25313: PUSH
25314: LD_INT 0
25316: PPUSH
25317: LD_INT 5
25319: PPUSH
25320: CALL_OW 12
25324: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25325: LD_ADDR_VAR 0 2
25329: PUSH
25330: LD_VAR 0 1
25334: PPUSH
25335: CALL_OW 250
25339: PPUSH
25340: LD_VAR 0 4
25344: PPUSH
25345: LD_INT 3
25347: PPUSH
25348: LD_INT 12
25350: PPUSH
25351: CALL_OW 12
25355: PPUSH
25356: CALL_OW 272
25360: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25361: LD_ADDR_VAR 0 3
25365: PUSH
25366: LD_VAR 0 1
25370: PPUSH
25371: CALL_OW 251
25375: PPUSH
25376: LD_VAR 0 4
25380: PPUSH
25381: LD_INT 3
25383: PPUSH
25384: LD_INT 12
25386: PPUSH
25387: CALL_OW 12
25391: PPUSH
25392: CALL_OW 273
25396: ST_TO_ADDR
// if ValidHex ( x , y ) then
25397: LD_VAR 0 2
25401: PPUSH
25402: LD_VAR 0 3
25406: PPUSH
25407: CALL_OW 488
25411: IFFALSE 25446
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25413: LD_VAR 0 1
25417: PPUSH
25418: LD_VAR 0 2
25422: PPUSH
25423: LD_VAR 0 3
25427: PPUSH
25428: LD_INT 3
25430: PPUSH
25431: LD_INT 6
25433: PPUSH
25434: CALL_OW 12
25438: PPUSH
25439: LD_INT 1
25441: PPUSH
25442: CALL_OW 483
// end ;
25446: GO 25306
25448: POP
25449: POP
// end ;
25450: PPOPN 5
25452: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25453: LD_EXP 55
25457: PUSH
25458: LD_EXP 90
25462: AND
25463: IFFALSE 25557
25465: GO 25467
25467: DISABLE
25468: LD_INT 0
25470: PPUSH
25471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25472: LD_ADDR_VAR 0 2
25476: PUSH
25477: LD_INT 22
25479: PUSH
25480: LD_OWVAR 2
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 32
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 21
25501: PUSH
25502: LD_INT 2
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: LIST
25513: PPUSH
25514: CALL_OW 69
25518: ST_TO_ADDR
// if not tmp then
25519: LD_VAR 0 2
25523: NOT
25524: IFFALSE 25528
// exit ;
25526: GO 25557
// for i in tmp do
25528: LD_ADDR_VAR 0 1
25532: PUSH
25533: LD_VAR 0 2
25537: PUSH
25538: FOR_IN
25539: IFFALSE 25555
// SetFuel ( i , 0 ) ;
25541: LD_VAR 0 1
25545: PPUSH
25546: LD_INT 0
25548: PPUSH
25549: CALL_OW 240
25553: GO 25538
25555: POP
25556: POP
// end ;
25557: PPOPN 2
25559: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25560: LD_EXP 55
25564: PUSH
25565: LD_EXP 91
25569: AND
25570: IFFALSE 25636
25572: GO 25574
25574: DISABLE
25575: LD_INT 0
25577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25578: LD_ADDR_VAR 0 1
25582: PUSH
25583: LD_INT 22
25585: PUSH
25586: LD_OWVAR 2
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 30
25597: PUSH
25598: LD_INT 29
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PPUSH
25609: CALL_OW 69
25613: ST_TO_ADDR
// if not tmp then
25614: LD_VAR 0 1
25618: NOT
25619: IFFALSE 25623
// exit ;
25621: GO 25636
// DestroyUnit ( tmp [ 1 ] ) ;
25623: LD_VAR 0 1
25627: PUSH
25628: LD_INT 1
25630: ARRAY
25631: PPUSH
25632: CALL_OW 65
// end ;
25636: PPOPN 1
25638: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25639: LD_EXP 55
25643: PUSH
25644: LD_EXP 93
25648: AND
25649: IFFALSE 25778
25651: GO 25653
25653: DISABLE
25654: LD_INT 0
25656: PPUSH
// begin uc_side := 0 ;
25657: LD_ADDR_OWVAR 20
25661: PUSH
25662: LD_INT 0
25664: ST_TO_ADDR
// uc_nation := nation_arabian ;
25665: LD_ADDR_OWVAR 21
25669: PUSH
25670: LD_INT 2
25672: ST_TO_ADDR
// hc_gallery :=  ;
25673: LD_ADDR_OWVAR 33
25677: PUSH
25678: LD_STRING 
25680: ST_TO_ADDR
// hc_name :=  ;
25681: LD_ADDR_OWVAR 26
25685: PUSH
25686: LD_STRING 
25688: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25689: LD_INT 1
25691: PPUSH
25692: LD_INT 11
25694: PPUSH
25695: LD_INT 10
25697: PPUSH
25698: CALL_OW 380
// un := CreateHuman ;
25702: LD_ADDR_VAR 0 1
25706: PUSH
25707: CALL_OW 44
25711: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25712: LD_VAR 0 1
25716: PPUSH
25717: LD_INT 1
25719: PPUSH
25720: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25724: LD_INT 35
25726: PPUSH
25727: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25731: LD_VAR 0 1
25735: PPUSH
25736: LD_INT 22
25738: PUSH
25739: LD_OWVAR 2
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PPUSH
25748: CALL_OW 69
25752: PPUSH
25753: LD_VAR 0 1
25757: PPUSH
25758: CALL_OW 74
25762: PPUSH
25763: CALL_OW 115
// until IsDead ( un ) ;
25767: LD_VAR 0 1
25771: PPUSH
25772: CALL_OW 301
25776: IFFALSE 25724
// end ;
25778: PPOPN 1
25780: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25781: LD_EXP 55
25785: PUSH
25786: LD_EXP 95
25790: AND
25791: IFFALSE 25803
25793: GO 25795
25795: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25796: LD_STRING earthquake(getX(game), 0, 32)
25798: PPUSH
25799: CALL_OW 559
25803: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25804: LD_EXP 55
25808: PUSH
25809: LD_EXP 96
25813: AND
25814: IFFALSE 25905
25816: GO 25818
25818: DISABLE
25819: LD_INT 0
25821: PPUSH
// begin enable ;
25822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25823: LD_ADDR_VAR 0 1
25827: PUSH
25828: LD_INT 22
25830: PUSH
25831: LD_OWVAR 2
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 21
25842: PUSH
25843: LD_INT 2
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 33
25852: PUSH
25853: LD_INT 3
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: LIST
25864: PPUSH
25865: CALL_OW 69
25869: ST_TO_ADDR
// if not tmp then
25870: LD_VAR 0 1
25874: NOT
25875: IFFALSE 25879
// exit ;
25877: GO 25905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25879: LD_VAR 0 1
25883: PUSH
25884: LD_INT 1
25886: PPUSH
25887: LD_VAR 0 1
25891: PPUSH
25892: CALL_OW 12
25896: ARRAY
25897: PPUSH
25898: LD_INT 1
25900: PPUSH
25901: CALL_OW 234
// end ;
25905: PPOPN 1
25907: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25908: LD_EXP 55
25912: PUSH
25913: LD_EXP 97
25917: AND
25918: IFFALSE 26059
25920: GO 25922
25922: DISABLE
25923: LD_INT 0
25925: PPUSH
25926: PPUSH
25927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25928: LD_ADDR_VAR 0 3
25932: PUSH
25933: LD_INT 22
25935: PUSH
25936: LD_OWVAR 2
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 25
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PPUSH
25959: CALL_OW 69
25963: ST_TO_ADDR
// if not tmp then
25964: LD_VAR 0 3
25968: NOT
25969: IFFALSE 25973
// exit ;
25971: GO 26059
// un := tmp [ rand ( 1 , tmp ) ] ;
25973: LD_ADDR_VAR 0 2
25977: PUSH
25978: LD_VAR 0 3
25982: PUSH
25983: LD_INT 1
25985: PPUSH
25986: LD_VAR 0 3
25990: PPUSH
25991: CALL_OW 12
25995: ARRAY
25996: ST_TO_ADDR
// if Crawls ( un ) then
25997: LD_VAR 0 2
26001: PPUSH
26002: CALL_OW 318
26006: IFFALSE 26017
// ComWalk ( un ) ;
26008: LD_VAR 0 2
26012: PPUSH
26013: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26017: LD_VAR 0 2
26021: PPUSH
26022: LD_INT 9
26024: PPUSH
26025: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26029: LD_INT 28
26031: PPUSH
26032: LD_OWVAR 2
26036: PPUSH
26037: LD_INT 2
26039: PPUSH
26040: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26044: LD_INT 29
26046: PPUSH
26047: LD_OWVAR 2
26051: PPUSH
26052: LD_INT 2
26054: PPUSH
26055: CALL_OW 322
// end ;
26059: PPOPN 3
26061: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26062: LD_EXP 55
26066: PUSH
26067: LD_EXP 98
26071: AND
26072: IFFALSE 26183
26074: GO 26076
26076: DISABLE
26077: LD_INT 0
26079: PPUSH
26080: PPUSH
26081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26082: LD_ADDR_VAR 0 3
26086: PUSH
26087: LD_INT 22
26089: PUSH
26090: LD_OWVAR 2
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 25
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PPUSH
26113: CALL_OW 69
26117: ST_TO_ADDR
// if not tmp then
26118: LD_VAR 0 3
26122: NOT
26123: IFFALSE 26127
// exit ;
26125: GO 26183
// un := tmp [ rand ( 1 , tmp ) ] ;
26127: LD_ADDR_VAR 0 2
26131: PUSH
26132: LD_VAR 0 3
26136: PUSH
26137: LD_INT 1
26139: PPUSH
26140: LD_VAR 0 3
26144: PPUSH
26145: CALL_OW 12
26149: ARRAY
26150: ST_TO_ADDR
// if Crawls ( un ) then
26151: LD_VAR 0 2
26155: PPUSH
26156: CALL_OW 318
26160: IFFALSE 26171
// ComWalk ( un ) ;
26162: LD_VAR 0 2
26166: PPUSH
26167: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26171: LD_VAR 0 2
26175: PPUSH
26176: LD_INT 8
26178: PPUSH
26179: CALL_OW 336
// end ;
26183: PPOPN 3
26185: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26186: LD_EXP 55
26190: PUSH
26191: LD_EXP 99
26195: AND
26196: IFFALSE 26340
26198: GO 26200
26200: DISABLE
26201: LD_INT 0
26203: PPUSH
26204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26205: LD_ADDR_VAR 0 2
26209: PUSH
26210: LD_INT 22
26212: PUSH
26213: LD_OWVAR 2
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 21
26224: PUSH
26225: LD_INT 2
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: LD_INT 34
26237: PUSH
26238: LD_INT 12
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 34
26247: PUSH
26248: LD_INT 51
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 34
26257: PUSH
26258: LD_INT 32
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: LIST
26275: PPUSH
26276: CALL_OW 69
26280: ST_TO_ADDR
// if not tmp then
26281: LD_VAR 0 2
26285: NOT
26286: IFFALSE 26290
// exit ;
26288: GO 26340
// for i in tmp do
26290: LD_ADDR_VAR 0 1
26294: PUSH
26295: LD_VAR 0 2
26299: PUSH
26300: FOR_IN
26301: IFFALSE 26338
// if GetCargo ( i , mat_artifact ) = 0 then
26303: LD_VAR 0 1
26307: PPUSH
26308: LD_INT 4
26310: PPUSH
26311: CALL_OW 289
26315: PUSH
26316: LD_INT 0
26318: EQUAL
26319: IFFALSE 26336
// SetCargo ( i , mat_siberit , 100 ) ;
26321: LD_VAR 0 1
26325: PPUSH
26326: LD_INT 3
26328: PPUSH
26329: LD_INT 100
26331: PPUSH
26332: CALL_OW 290
26336: GO 26300
26338: POP
26339: POP
// end ;
26340: PPOPN 2
26342: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26343: LD_EXP 55
26347: PUSH
26348: LD_EXP 100
26352: AND
26353: IFFALSE 26536
26355: GO 26357
26357: DISABLE
26358: LD_INT 0
26360: PPUSH
26361: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26362: LD_ADDR_VAR 0 2
26366: PUSH
26367: LD_INT 22
26369: PUSH
26370: LD_OWVAR 2
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PPUSH
26379: CALL_OW 69
26383: ST_TO_ADDR
// if not tmp then
26384: LD_VAR 0 2
26388: NOT
26389: IFFALSE 26393
// exit ;
26391: GO 26536
// for i := 1 to 2 do
26393: LD_ADDR_VAR 0 1
26397: PUSH
26398: DOUBLE
26399: LD_INT 1
26401: DEC
26402: ST_TO_ADDR
26403: LD_INT 2
26405: PUSH
26406: FOR_TO
26407: IFFALSE 26534
// begin uc_side := your_side ;
26409: LD_ADDR_OWVAR 20
26413: PUSH
26414: LD_OWVAR 2
26418: ST_TO_ADDR
// uc_nation := nation_american ;
26419: LD_ADDR_OWVAR 21
26423: PUSH
26424: LD_INT 1
26426: ST_TO_ADDR
// vc_chassis := us_morphling ;
26427: LD_ADDR_OWVAR 37
26431: PUSH
26432: LD_INT 5
26434: ST_TO_ADDR
// vc_engine := engine_siberite ;
26435: LD_ADDR_OWVAR 39
26439: PUSH
26440: LD_INT 3
26442: ST_TO_ADDR
// vc_control := control_computer ;
26443: LD_ADDR_OWVAR 38
26447: PUSH
26448: LD_INT 3
26450: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26451: LD_ADDR_OWVAR 40
26455: PUSH
26456: LD_INT 10
26458: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26459: LD_VAR 0 2
26463: PUSH
26464: LD_INT 1
26466: ARRAY
26467: PPUSH
26468: CALL_OW 310
26472: NOT
26473: IFFALSE 26520
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26475: CALL_OW 45
26479: PPUSH
26480: LD_VAR 0 2
26484: PUSH
26485: LD_INT 1
26487: ARRAY
26488: PPUSH
26489: CALL_OW 250
26493: PPUSH
26494: LD_VAR 0 2
26498: PUSH
26499: LD_INT 1
26501: ARRAY
26502: PPUSH
26503: CALL_OW 251
26507: PPUSH
26508: LD_INT 12
26510: PPUSH
26511: LD_INT 1
26513: PPUSH
26514: CALL_OW 50
26518: GO 26532
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26520: CALL_OW 45
26524: PPUSH
26525: LD_INT 1
26527: PPUSH
26528: CALL_OW 51
// end ;
26532: GO 26406
26534: POP
26535: POP
// end ;
26536: PPOPN 2
26538: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26539: LD_EXP 55
26543: PUSH
26544: LD_EXP 101
26548: AND
26549: IFFALSE 26771
26551: GO 26553
26553: DISABLE
26554: LD_INT 0
26556: PPUSH
26557: PPUSH
26558: PPUSH
26559: PPUSH
26560: PPUSH
26561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26562: LD_ADDR_VAR 0 6
26566: PUSH
26567: LD_INT 22
26569: PUSH
26570: LD_OWVAR 2
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 21
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 3
26591: PUSH
26592: LD_INT 23
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: PPUSH
26611: CALL_OW 69
26615: ST_TO_ADDR
// if not tmp then
26616: LD_VAR 0 6
26620: NOT
26621: IFFALSE 26625
// exit ;
26623: GO 26771
// s1 := rand ( 1 , 4 ) ;
26625: LD_ADDR_VAR 0 2
26629: PUSH
26630: LD_INT 1
26632: PPUSH
26633: LD_INT 4
26635: PPUSH
26636: CALL_OW 12
26640: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26641: LD_ADDR_VAR 0 4
26645: PUSH
26646: LD_VAR 0 6
26650: PUSH
26651: LD_INT 1
26653: ARRAY
26654: PPUSH
26655: LD_VAR 0 2
26659: PPUSH
26660: CALL_OW 259
26664: ST_TO_ADDR
// if s1 = 1 then
26665: LD_VAR 0 2
26669: PUSH
26670: LD_INT 1
26672: EQUAL
26673: IFFALSE 26693
// s2 := rand ( 2 , 4 ) else
26675: LD_ADDR_VAR 0 3
26679: PUSH
26680: LD_INT 2
26682: PPUSH
26683: LD_INT 4
26685: PPUSH
26686: CALL_OW 12
26690: ST_TO_ADDR
26691: GO 26701
// s2 := 1 ;
26693: LD_ADDR_VAR 0 3
26697: PUSH
26698: LD_INT 1
26700: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26701: LD_ADDR_VAR 0 5
26705: PUSH
26706: LD_VAR 0 6
26710: PUSH
26711: LD_INT 1
26713: ARRAY
26714: PPUSH
26715: LD_VAR 0 3
26719: PPUSH
26720: CALL_OW 259
26724: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26725: LD_VAR 0 6
26729: PUSH
26730: LD_INT 1
26732: ARRAY
26733: PPUSH
26734: LD_VAR 0 2
26738: PPUSH
26739: LD_VAR 0 5
26743: PPUSH
26744: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26748: LD_VAR 0 6
26752: PUSH
26753: LD_INT 1
26755: ARRAY
26756: PPUSH
26757: LD_VAR 0 3
26761: PPUSH
26762: LD_VAR 0 4
26766: PPUSH
26767: CALL_OW 237
// end ;
26771: PPOPN 6
26773: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26774: LD_EXP 55
26778: PUSH
26779: LD_EXP 102
26783: AND
26784: IFFALSE 26863
26786: GO 26788
26788: DISABLE
26789: LD_INT 0
26791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26792: LD_ADDR_VAR 0 1
26796: PUSH
26797: LD_INT 22
26799: PUSH
26800: LD_OWVAR 2
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 30
26811: PUSH
26812: LD_INT 3
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PPUSH
26823: CALL_OW 69
26827: ST_TO_ADDR
// if not tmp then
26828: LD_VAR 0 1
26832: NOT
26833: IFFALSE 26837
// exit ;
26835: GO 26863
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26837: LD_VAR 0 1
26841: PUSH
26842: LD_INT 1
26844: PPUSH
26845: LD_VAR 0 1
26849: PPUSH
26850: CALL_OW 12
26854: ARRAY
26855: PPUSH
26856: LD_INT 1
26858: PPUSH
26859: CALL_OW 234
// end ;
26863: PPOPN 1
26865: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26866: LD_EXP 55
26870: PUSH
26871: LD_EXP 103
26875: AND
26876: IFFALSE 26988
26878: GO 26880
26880: DISABLE
26881: LD_INT 0
26883: PPUSH
26884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26885: LD_ADDR_VAR 0 2
26889: PUSH
26890: LD_INT 22
26892: PUSH
26893: LD_OWVAR 2
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: LD_INT 30
26907: PUSH
26908: LD_INT 27
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 30
26917: PUSH
26918: LD_INT 26
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 30
26927: PUSH
26928: LD_INT 28
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PPUSH
26945: CALL_OW 69
26949: ST_TO_ADDR
// if not tmp then
26950: LD_VAR 0 2
26954: NOT
26955: IFFALSE 26959
// exit ;
26957: GO 26988
// for i in tmp do
26959: LD_ADDR_VAR 0 1
26963: PUSH
26964: LD_VAR 0 2
26968: PUSH
26969: FOR_IN
26970: IFFALSE 26986
// SetLives ( i , 1 ) ;
26972: LD_VAR 0 1
26976: PPUSH
26977: LD_INT 1
26979: PPUSH
26980: CALL_OW 234
26984: GO 26969
26986: POP
26987: POP
// end ;
26988: PPOPN 2
26990: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26991: LD_EXP 55
26995: PUSH
26996: LD_EXP 104
27000: AND
27001: IFFALSE 27288
27003: GO 27005
27005: DISABLE
27006: LD_INT 0
27008: PPUSH
27009: PPUSH
27010: PPUSH
// begin i := rand ( 1 , 7 ) ;
27011: LD_ADDR_VAR 0 1
27015: PUSH
27016: LD_INT 1
27018: PPUSH
27019: LD_INT 7
27021: PPUSH
27022: CALL_OW 12
27026: ST_TO_ADDR
// case i of 1 :
27027: LD_VAR 0 1
27031: PUSH
27032: LD_INT 1
27034: DOUBLE
27035: EQUAL
27036: IFTRUE 27040
27038: GO 27050
27040: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27041: LD_STRING earthquake(getX(game), 0, 32)
27043: PPUSH
27044: CALL_OW 559
27048: GO 27288
27050: LD_INT 2
27052: DOUBLE
27053: EQUAL
27054: IFTRUE 27058
27056: GO 27072
27058: POP
// begin ToLua ( displayStucuk(); ) ;
27059: LD_STRING displayStucuk();
27061: PPUSH
27062: CALL_OW 559
// ResetFog ;
27066: CALL_OW 335
// end ; 3 :
27070: GO 27288
27072: LD_INT 3
27074: DOUBLE
27075: EQUAL
27076: IFTRUE 27080
27078: GO 27184
27080: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27081: LD_ADDR_VAR 0 2
27085: PUSH
27086: LD_INT 22
27088: PUSH
27089: LD_OWVAR 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 25
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PPUSH
27112: CALL_OW 69
27116: ST_TO_ADDR
// if not tmp then
27117: LD_VAR 0 2
27121: NOT
27122: IFFALSE 27126
// exit ;
27124: GO 27288
// un := tmp [ rand ( 1 , tmp ) ] ;
27126: LD_ADDR_VAR 0 3
27130: PUSH
27131: LD_VAR 0 2
27135: PUSH
27136: LD_INT 1
27138: PPUSH
27139: LD_VAR 0 2
27143: PPUSH
27144: CALL_OW 12
27148: ARRAY
27149: ST_TO_ADDR
// if Crawls ( un ) then
27150: LD_VAR 0 3
27154: PPUSH
27155: CALL_OW 318
27159: IFFALSE 27170
// ComWalk ( un ) ;
27161: LD_VAR 0 3
27165: PPUSH
27166: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27170: LD_VAR 0 3
27174: PPUSH
27175: LD_INT 8
27177: PPUSH
27178: CALL_OW 336
// end ; 4 :
27182: GO 27288
27184: LD_INT 4
27186: DOUBLE
27187: EQUAL
27188: IFTRUE 27192
27190: GO 27266
27192: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27193: LD_ADDR_VAR 0 2
27197: PUSH
27198: LD_INT 22
27200: PUSH
27201: LD_OWVAR 2
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 30
27212: PUSH
27213: LD_INT 29
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PPUSH
27224: CALL_OW 69
27228: ST_TO_ADDR
// if not tmp then
27229: LD_VAR 0 2
27233: NOT
27234: IFFALSE 27238
// exit ;
27236: GO 27288
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27238: LD_VAR 0 2
27242: PUSH
27243: LD_INT 1
27245: ARRAY
27246: PPUSH
27247: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27251: LD_VAR 0 2
27255: PUSH
27256: LD_INT 1
27258: ARRAY
27259: PPUSH
27260: CALL_OW 65
// end ; 5 .. 7 :
27264: GO 27288
27266: LD_INT 5
27268: DOUBLE
27269: GREATEREQUAL
27270: IFFALSE 27278
27272: LD_INT 7
27274: DOUBLE
27275: LESSEQUAL
27276: IFTRUE 27280
27278: GO 27287
27280: POP
// StreamSibBomb ; end ;
27281: CALL 23525 0 0
27285: GO 27288
27287: POP
// end ;
27288: PPOPN 3
27290: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27291: LD_EXP 55
27295: PUSH
27296: LD_EXP 105
27300: AND
27301: IFFALSE 27457
27303: GO 27305
27305: DISABLE
27306: LD_INT 0
27308: PPUSH
27309: PPUSH
27310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27311: LD_ADDR_VAR 0 2
27315: PUSH
27316: LD_INT 81
27318: PUSH
27319: LD_OWVAR 2
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 2
27330: PUSH
27331: LD_INT 21
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 21
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: LIST
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PPUSH
27360: CALL_OW 69
27364: ST_TO_ADDR
// if not tmp then
27365: LD_VAR 0 2
27369: NOT
27370: IFFALSE 27374
// exit ;
27372: GO 27457
// p := 0 ;
27374: LD_ADDR_VAR 0 3
27378: PUSH
27379: LD_INT 0
27381: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27382: LD_INT 35
27384: PPUSH
27385: CALL_OW 67
// p := p + 1 ;
27389: LD_ADDR_VAR 0 3
27393: PUSH
27394: LD_VAR 0 3
27398: PUSH
27399: LD_INT 1
27401: PLUS
27402: ST_TO_ADDR
// for i in tmp do
27403: LD_ADDR_VAR 0 1
27407: PUSH
27408: LD_VAR 0 2
27412: PUSH
27413: FOR_IN
27414: IFFALSE 27445
// if GetLives ( i ) < 1000 then
27416: LD_VAR 0 1
27420: PPUSH
27421: CALL_OW 256
27425: PUSH
27426: LD_INT 1000
27428: LESS
27429: IFFALSE 27443
// SetLives ( i , 1000 ) ;
27431: LD_VAR 0 1
27435: PPUSH
27436: LD_INT 1000
27438: PPUSH
27439: CALL_OW 234
27443: GO 27413
27445: POP
27446: POP
// until p > 20 ;
27447: LD_VAR 0 3
27451: PUSH
27452: LD_INT 20
27454: GREATER
27455: IFFALSE 27382
// end ;
27457: PPOPN 3
27459: END
// every 0 0$1 trigger StreamModeActive and sTime do
27460: LD_EXP 55
27464: PUSH
27465: LD_EXP 106
27469: AND
27470: IFFALSE 27505
27472: GO 27474
27474: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27475: LD_INT 28
27477: PPUSH
27478: LD_OWVAR 2
27482: PPUSH
27483: LD_INT 2
27485: PPUSH
27486: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27490: LD_INT 30
27492: PPUSH
27493: LD_OWVAR 2
27497: PPUSH
27498: LD_INT 2
27500: PPUSH
27501: CALL_OW 322
// end ;
27505: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27506: LD_EXP 55
27510: PUSH
27511: LD_EXP 107
27515: AND
27516: IFFALSE 27637
27518: GO 27520
27520: DISABLE
27521: LD_INT 0
27523: PPUSH
27524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27525: LD_ADDR_VAR 0 2
27529: PUSH
27530: LD_INT 22
27532: PUSH
27533: LD_OWVAR 2
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 21
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 3
27554: PUSH
27555: LD_INT 23
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: LIST
27573: PPUSH
27574: CALL_OW 69
27578: ST_TO_ADDR
// if not tmp then
27579: LD_VAR 0 2
27583: NOT
27584: IFFALSE 27588
// exit ;
27586: GO 27637
// for i in tmp do
27588: LD_ADDR_VAR 0 1
27592: PUSH
27593: LD_VAR 0 2
27597: PUSH
27598: FOR_IN
27599: IFFALSE 27635
// begin if Crawls ( i ) then
27601: LD_VAR 0 1
27605: PPUSH
27606: CALL_OW 318
27610: IFFALSE 27621
// ComWalk ( i ) ;
27612: LD_VAR 0 1
27616: PPUSH
27617: CALL_OW 138
// SetClass ( i , 2 ) ;
27621: LD_VAR 0 1
27625: PPUSH
27626: LD_INT 2
27628: PPUSH
27629: CALL_OW 336
// end ;
27633: GO 27598
27635: POP
27636: POP
// end ;
27637: PPOPN 2
27639: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27640: LD_EXP 55
27644: PUSH
27645: LD_EXP 108
27649: AND
27650: IFFALSE 27938
27652: GO 27654
27654: DISABLE
27655: LD_INT 0
27657: PPUSH
27658: PPUSH
27659: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27660: LD_OWVAR 2
27664: PPUSH
27665: LD_INT 9
27667: PPUSH
27668: LD_INT 1
27670: PPUSH
27671: LD_INT 1
27673: PPUSH
27674: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27678: LD_INT 9
27680: PPUSH
27681: LD_OWVAR 2
27685: PPUSH
27686: CALL_OW 343
// uc_side := 9 ;
27690: LD_ADDR_OWVAR 20
27694: PUSH
27695: LD_INT 9
27697: ST_TO_ADDR
// uc_nation := 2 ;
27698: LD_ADDR_OWVAR 21
27702: PUSH
27703: LD_INT 2
27705: ST_TO_ADDR
// hc_name := Dark Warrior ;
27706: LD_ADDR_OWVAR 26
27710: PUSH
27711: LD_STRING Dark Warrior
27713: ST_TO_ADDR
// hc_gallery :=  ;
27714: LD_ADDR_OWVAR 33
27718: PUSH
27719: LD_STRING 
27721: ST_TO_ADDR
// hc_noskilllimit := true ;
27722: LD_ADDR_OWVAR 76
27726: PUSH
27727: LD_INT 1
27729: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27730: LD_ADDR_OWVAR 31
27734: PUSH
27735: LD_INT 30
27737: PUSH
27738: LD_INT 30
27740: PUSH
27741: LD_INT 30
27743: PUSH
27744: LD_INT 30
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: ST_TO_ADDR
// un := CreateHuman ;
27753: LD_ADDR_VAR 0 3
27757: PUSH
27758: CALL_OW 44
27762: ST_TO_ADDR
// hc_noskilllimit := false ;
27763: LD_ADDR_OWVAR 76
27767: PUSH
27768: LD_INT 0
27770: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27771: LD_VAR 0 3
27775: PPUSH
27776: LD_INT 1
27778: PPUSH
27779: CALL_OW 51
// ToLua ( playRanger() ) ;
27783: LD_STRING playRanger()
27785: PPUSH
27786: CALL_OW 559
// p := 0 ;
27790: LD_ADDR_VAR 0 2
27794: PUSH
27795: LD_INT 0
27797: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27798: LD_INT 35
27800: PPUSH
27801: CALL_OW 67
// p := p + 1 ;
27805: LD_ADDR_VAR 0 2
27809: PUSH
27810: LD_VAR 0 2
27814: PUSH
27815: LD_INT 1
27817: PLUS
27818: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27819: LD_VAR 0 3
27823: PPUSH
27824: CALL_OW 256
27828: PUSH
27829: LD_INT 1000
27831: LESS
27832: IFFALSE 27846
// SetLives ( un , 1000 ) ;
27834: LD_VAR 0 3
27838: PPUSH
27839: LD_INT 1000
27841: PPUSH
27842: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27846: LD_VAR 0 3
27850: PPUSH
27851: LD_INT 81
27853: PUSH
27854: LD_OWVAR 2
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 91
27865: PUSH
27866: LD_VAR 0 3
27870: PUSH
27871: LD_INT 30
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PPUSH
27883: CALL_OW 69
27887: PPUSH
27888: LD_VAR 0 3
27892: PPUSH
27893: CALL_OW 74
27897: PPUSH
27898: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27902: LD_VAR 0 2
27906: PUSH
27907: LD_INT 80
27909: GREATER
27910: PUSH
27911: LD_VAR 0 3
27915: PPUSH
27916: CALL_OW 301
27920: OR
27921: IFFALSE 27798
// if un then
27923: LD_VAR 0 3
27927: IFFALSE 27938
// RemoveUnit ( un ) ;
27929: LD_VAR 0 3
27933: PPUSH
27934: CALL_OW 64
// end ;
27938: PPOPN 3
27940: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27941: LD_EXP 109
27945: IFFALSE 28061
27947: GO 27949
27949: DISABLE
27950: LD_INT 0
27952: PPUSH
27953: PPUSH
27954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27955: LD_ADDR_VAR 0 2
27959: PUSH
27960: LD_INT 81
27962: PUSH
27963: LD_OWVAR 2
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 21
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PPUSH
27986: CALL_OW 69
27990: ST_TO_ADDR
// if not tmp then
27991: LD_VAR 0 2
27995: NOT
27996: IFFALSE 28000
// exit ;
27998: GO 28061
// ToLua ( playComputer() ) ;
28000: LD_STRING playComputer()
28002: PPUSH
28003: CALL_OW 559
// for i in tmp do
28007: LD_ADDR_VAR 0 1
28011: PUSH
28012: LD_VAR 0 2
28016: PUSH
28017: FOR_IN
28018: IFFALSE 28059
// for j := 1 to 4 do
28020: LD_ADDR_VAR 0 3
28024: PUSH
28025: DOUBLE
28026: LD_INT 1
28028: DEC
28029: ST_TO_ADDR
28030: LD_INT 4
28032: PUSH
28033: FOR_TO
28034: IFFALSE 28055
// SetSkill ( i , j , 10 ) ;
28036: LD_VAR 0 1
28040: PPUSH
28041: LD_VAR 0 3
28045: PPUSH
28046: LD_INT 10
28048: PPUSH
28049: CALL_OW 237
28053: GO 28033
28055: POP
28056: POP
28057: GO 28017
28059: POP
28060: POP
// end ;
28061: PPOPN 3
28063: END
// every 0 0$1 trigger s30 do var i , tmp ;
28064: LD_EXP 110
28068: IFFALSE 28137
28070: GO 28072
28072: DISABLE
28073: LD_INT 0
28075: PPUSH
28076: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28077: LD_ADDR_VAR 0 2
28081: PUSH
28082: LD_INT 22
28084: PUSH
28085: LD_OWVAR 2
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PPUSH
28094: CALL_OW 69
28098: ST_TO_ADDR
// if not tmp then
28099: LD_VAR 0 2
28103: NOT
28104: IFFALSE 28108
// exit ;
28106: GO 28137
// for i in tmp do
28108: LD_ADDR_VAR 0 1
28112: PUSH
28113: LD_VAR 0 2
28117: PUSH
28118: FOR_IN
28119: IFFALSE 28135
// SetLives ( i , 300 ) ;
28121: LD_VAR 0 1
28125: PPUSH
28126: LD_INT 300
28128: PPUSH
28129: CALL_OW 234
28133: GO 28118
28135: POP
28136: POP
// end ;
28137: PPOPN 2
28139: END
// every 0 0$1 trigger s60 do var i , tmp ;
28140: LD_EXP 111
28144: IFFALSE 28213
28146: GO 28148
28148: DISABLE
28149: LD_INT 0
28151: PPUSH
28152: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28153: LD_ADDR_VAR 0 2
28157: PUSH
28158: LD_INT 22
28160: PUSH
28161: LD_OWVAR 2
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PPUSH
28170: CALL_OW 69
28174: ST_TO_ADDR
// if not tmp then
28175: LD_VAR 0 2
28179: NOT
28180: IFFALSE 28184
// exit ;
28182: GO 28213
// for i in tmp do
28184: LD_ADDR_VAR 0 1
28188: PUSH
28189: LD_VAR 0 2
28193: PUSH
28194: FOR_IN
28195: IFFALSE 28211
// SetLives ( i , 600 ) ;
28197: LD_VAR 0 1
28201: PPUSH
28202: LD_INT 600
28204: PPUSH
28205: CALL_OW 234
28209: GO 28194
28211: POP
28212: POP
// end ;
28213: PPOPN 2
28215: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28216: LD_INT 0
28218: PPUSH
// case cmd of 301 :
28219: LD_VAR 0 1
28223: PUSH
28224: LD_INT 301
28226: DOUBLE
28227: EQUAL
28228: IFTRUE 28232
28230: GO 28264
28232: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28233: LD_VAR 0 6
28237: PPUSH
28238: LD_VAR 0 7
28242: PPUSH
28243: LD_VAR 0 8
28247: PPUSH
28248: LD_VAR 0 4
28252: PPUSH
28253: LD_VAR 0 5
28257: PPUSH
28258: CALL 29465 0 5
28262: GO 28385
28264: LD_INT 302
28266: DOUBLE
28267: EQUAL
28268: IFTRUE 28272
28270: GO 28309
28272: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28273: LD_VAR 0 6
28277: PPUSH
28278: LD_VAR 0 7
28282: PPUSH
28283: LD_VAR 0 8
28287: PPUSH
28288: LD_VAR 0 9
28292: PPUSH
28293: LD_VAR 0 4
28297: PPUSH
28298: LD_VAR 0 5
28302: PPUSH
28303: CALL 29556 0 6
28307: GO 28385
28309: LD_INT 303
28311: DOUBLE
28312: EQUAL
28313: IFTRUE 28317
28315: GO 28354
28317: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28318: LD_VAR 0 6
28322: PPUSH
28323: LD_VAR 0 7
28327: PPUSH
28328: LD_VAR 0 8
28332: PPUSH
28333: LD_VAR 0 9
28337: PPUSH
28338: LD_VAR 0 4
28342: PPUSH
28343: LD_VAR 0 5
28347: PPUSH
28348: CALL 28390 0 6
28352: GO 28385
28354: LD_INT 304
28356: DOUBLE
28357: EQUAL
28358: IFTRUE 28362
28360: GO 28384
28362: POP
// hHackTeleport ( unit , x , y ) ; end ;
28363: LD_VAR 0 2
28367: PPUSH
28368: LD_VAR 0 4
28372: PPUSH
28373: LD_VAR 0 5
28377: PPUSH
28378: CALL 30149 0 3
28382: GO 28385
28384: POP
// end ;
28385: LD_VAR 0 12
28389: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28390: LD_INT 0
28392: PPUSH
28393: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28394: LD_VAR 0 1
28398: PUSH
28399: LD_INT 1
28401: LESS
28402: PUSH
28403: LD_VAR 0 1
28407: PUSH
28408: LD_INT 3
28410: GREATER
28411: OR
28412: PUSH
28413: LD_VAR 0 5
28417: PPUSH
28418: LD_VAR 0 6
28422: PPUSH
28423: CALL_OW 428
28427: OR
28428: IFFALSE 28432
// exit ;
28430: GO 29152
// uc_side := your_side ;
28432: LD_ADDR_OWVAR 20
28436: PUSH
28437: LD_OWVAR 2
28441: ST_TO_ADDR
// uc_nation := nation ;
28442: LD_ADDR_OWVAR 21
28446: PUSH
28447: LD_VAR 0 1
28451: ST_TO_ADDR
// bc_level = 1 ;
28452: LD_ADDR_OWVAR 43
28456: PUSH
28457: LD_INT 1
28459: ST_TO_ADDR
// case btype of 1 :
28460: LD_VAR 0 2
28464: PUSH
28465: LD_INT 1
28467: DOUBLE
28468: EQUAL
28469: IFTRUE 28473
28471: GO 28484
28473: POP
// bc_type := b_depot ; 2 :
28474: LD_ADDR_OWVAR 42
28478: PUSH
28479: LD_INT 0
28481: ST_TO_ADDR
28482: GO 29096
28484: LD_INT 2
28486: DOUBLE
28487: EQUAL
28488: IFTRUE 28492
28490: GO 28503
28492: POP
// bc_type := b_warehouse ; 3 :
28493: LD_ADDR_OWVAR 42
28497: PUSH
28498: LD_INT 1
28500: ST_TO_ADDR
28501: GO 29096
28503: LD_INT 3
28505: DOUBLE
28506: EQUAL
28507: IFTRUE 28511
28509: GO 28522
28511: POP
// bc_type := b_lab ; 4 .. 9 :
28512: LD_ADDR_OWVAR 42
28516: PUSH
28517: LD_INT 6
28519: ST_TO_ADDR
28520: GO 29096
28522: LD_INT 4
28524: DOUBLE
28525: GREATEREQUAL
28526: IFFALSE 28534
28528: LD_INT 9
28530: DOUBLE
28531: LESSEQUAL
28532: IFTRUE 28536
28534: GO 28588
28536: POP
// begin bc_type := b_lab_half ;
28537: LD_ADDR_OWVAR 42
28541: PUSH
28542: LD_INT 7
28544: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28545: LD_ADDR_OWVAR 44
28549: PUSH
28550: LD_INT 10
28552: PUSH
28553: LD_INT 11
28555: PUSH
28556: LD_INT 12
28558: PUSH
28559: LD_INT 15
28561: PUSH
28562: LD_INT 14
28564: PUSH
28565: LD_INT 13
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: PUSH
28576: LD_VAR 0 2
28580: PUSH
28581: LD_INT 3
28583: MINUS
28584: ARRAY
28585: ST_TO_ADDR
// end ; 10 .. 13 :
28586: GO 29096
28588: LD_INT 10
28590: DOUBLE
28591: GREATEREQUAL
28592: IFFALSE 28600
28594: LD_INT 13
28596: DOUBLE
28597: LESSEQUAL
28598: IFTRUE 28602
28600: GO 28679
28602: POP
// begin bc_type := b_lab_full ;
28603: LD_ADDR_OWVAR 42
28607: PUSH
28608: LD_INT 8
28610: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28611: LD_ADDR_OWVAR 44
28615: PUSH
28616: LD_INT 10
28618: PUSH
28619: LD_INT 12
28621: PUSH
28622: LD_INT 14
28624: PUSH
28625: LD_INT 13
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: PUSH
28634: LD_VAR 0 2
28638: PUSH
28639: LD_INT 9
28641: MINUS
28642: ARRAY
28643: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28644: LD_ADDR_OWVAR 45
28648: PUSH
28649: LD_INT 11
28651: PUSH
28652: LD_INT 15
28654: PUSH
28655: LD_INT 12
28657: PUSH
28658: LD_INT 15
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: PUSH
28667: LD_VAR 0 2
28671: PUSH
28672: LD_INT 9
28674: MINUS
28675: ARRAY
28676: ST_TO_ADDR
// end ; 14 :
28677: GO 29096
28679: LD_INT 14
28681: DOUBLE
28682: EQUAL
28683: IFTRUE 28687
28685: GO 28698
28687: POP
// bc_type := b_workshop ; 15 :
28688: LD_ADDR_OWVAR 42
28692: PUSH
28693: LD_INT 2
28695: ST_TO_ADDR
28696: GO 29096
28698: LD_INT 15
28700: DOUBLE
28701: EQUAL
28702: IFTRUE 28706
28704: GO 28717
28706: POP
// bc_type := b_factory ; 16 :
28707: LD_ADDR_OWVAR 42
28711: PUSH
28712: LD_INT 3
28714: ST_TO_ADDR
28715: GO 29096
28717: LD_INT 16
28719: DOUBLE
28720: EQUAL
28721: IFTRUE 28725
28723: GO 28736
28725: POP
// bc_type := b_ext_gun ; 17 :
28726: LD_ADDR_OWVAR 42
28730: PUSH
28731: LD_INT 17
28733: ST_TO_ADDR
28734: GO 29096
28736: LD_INT 17
28738: DOUBLE
28739: EQUAL
28740: IFTRUE 28744
28742: GO 28772
28744: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28745: LD_ADDR_OWVAR 42
28749: PUSH
28750: LD_INT 19
28752: PUSH
28753: LD_INT 23
28755: PUSH
28756: LD_INT 19
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: LIST
28763: PUSH
28764: LD_VAR 0 1
28768: ARRAY
28769: ST_TO_ADDR
28770: GO 29096
28772: LD_INT 18
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28780
28778: GO 28791
28780: POP
// bc_type := b_ext_radar ; 19 :
28781: LD_ADDR_OWVAR 42
28785: PUSH
28786: LD_INT 20
28788: ST_TO_ADDR
28789: GO 29096
28791: LD_INT 19
28793: DOUBLE
28794: EQUAL
28795: IFTRUE 28799
28797: GO 28810
28799: POP
// bc_type := b_ext_radio ; 20 :
28800: LD_ADDR_OWVAR 42
28804: PUSH
28805: LD_INT 22
28807: ST_TO_ADDR
28808: GO 29096
28810: LD_INT 20
28812: DOUBLE
28813: EQUAL
28814: IFTRUE 28818
28816: GO 28829
28818: POP
// bc_type := b_ext_siberium ; 21 :
28819: LD_ADDR_OWVAR 42
28823: PUSH
28824: LD_INT 21
28826: ST_TO_ADDR
28827: GO 29096
28829: LD_INT 21
28831: DOUBLE
28832: EQUAL
28833: IFTRUE 28837
28835: GO 28848
28837: POP
// bc_type := b_ext_computer ; 22 :
28838: LD_ADDR_OWVAR 42
28842: PUSH
28843: LD_INT 24
28845: ST_TO_ADDR
28846: GO 29096
28848: LD_INT 22
28850: DOUBLE
28851: EQUAL
28852: IFTRUE 28856
28854: GO 28867
28856: POP
// bc_type := b_ext_track ; 23 :
28857: LD_ADDR_OWVAR 42
28861: PUSH
28862: LD_INT 16
28864: ST_TO_ADDR
28865: GO 29096
28867: LD_INT 23
28869: DOUBLE
28870: EQUAL
28871: IFTRUE 28875
28873: GO 28886
28875: POP
// bc_type := b_ext_laser ; 24 :
28876: LD_ADDR_OWVAR 42
28880: PUSH
28881: LD_INT 25
28883: ST_TO_ADDR
28884: GO 29096
28886: LD_INT 24
28888: DOUBLE
28889: EQUAL
28890: IFTRUE 28894
28892: GO 28905
28894: POP
// bc_type := b_control_tower ; 25 :
28895: LD_ADDR_OWVAR 42
28899: PUSH
28900: LD_INT 36
28902: ST_TO_ADDR
28903: GO 29096
28905: LD_INT 25
28907: DOUBLE
28908: EQUAL
28909: IFTRUE 28913
28911: GO 28924
28913: POP
// bc_type := b_breastwork ; 26 :
28914: LD_ADDR_OWVAR 42
28918: PUSH
28919: LD_INT 31
28921: ST_TO_ADDR
28922: GO 29096
28924: LD_INT 26
28926: DOUBLE
28927: EQUAL
28928: IFTRUE 28932
28930: GO 28943
28932: POP
// bc_type := b_bunker ; 27 :
28933: LD_ADDR_OWVAR 42
28937: PUSH
28938: LD_INT 32
28940: ST_TO_ADDR
28941: GO 29096
28943: LD_INT 27
28945: DOUBLE
28946: EQUAL
28947: IFTRUE 28951
28949: GO 28962
28951: POP
// bc_type := b_turret ; 28 :
28952: LD_ADDR_OWVAR 42
28956: PUSH
28957: LD_INT 33
28959: ST_TO_ADDR
28960: GO 29096
28962: LD_INT 28
28964: DOUBLE
28965: EQUAL
28966: IFTRUE 28970
28968: GO 28981
28970: POP
// bc_type := b_armoury ; 29 :
28971: LD_ADDR_OWVAR 42
28975: PUSH
28976: LD_INT 4
28978: ST_TO_ADDR
28979: GO 29096
28981: LD_INT 29
28983: DOUBLE
28984: EQUAL
28985: IFTRUE 28989
28987: GO 29000
28989: POP
// bc_type := b_barracks ; 30 :
28990: LD_ADDR_OWVAR 42
28994: PUSH
28995: LD_INT 5
28997: ST_TO_ADDR
28998: GO 29096
29000: LD_INT 30
29002: DOUBLE
29003: EQUAL
29004: IFTRUE 29008
29006: GO 29019
29008: POP
// bc_type := b_solar_power ; 31 :
29009: LD_ADDR_OWVAR 42
29013: PUSH
29014: LD_INT 27
29016: ST_TO_ADDR
29017: GO 29096
29019: LD_INT 31
29021: DOUBLE
29022: EQUAL
29023: IFTRUE 29027
29025: GO 29038
29027: POP
// bc_type := b_oil_power ; 32 :
29028: LD_ADDR_OWVAR 42
29032: PUSH
29033: LD_INT 26
29035: ST_TO_ADDR
29036: GO 29096
29038: LD_INT 32
29040: DOUBLE
29041: EQUAL
29042: IFTRUE 29046
29044: GO 29057
29046: POP
// bc_type := b_siberite_power ; 33 :
29047: LD_ADDR_OWVAR 42
29051: PUSH
29052: LD_INT 28
29054: ST_TO_ADDR
29055: GO 29096
29057: LD_INT 33
29059: DOUBLE
29060: EQUAL
29061: IFTRUE 29065
29063: GO 29076
29065: POP
// bc_type := b_oil_mine ; 34 :
29066: LD_ADDR_OWVAR 42
29070: PUSH
29071: LD_INT 29
29073: ST_TO_ADDR
29074: GO 29096
29076: LD_INT 34
29078: DOUBLE
29079: EQUAL
29080: IFTRUE 29084
29082: GO 29095
29084: POP
// bc_type := b_siberite_mine ; end ;
29085: LD_ADDR_OWVAR 42
29089: PUSH
29090: LD_INT 30
29092: ST_TO_ADDR
29093: GO 29096
29095: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29096: LD_ADDR_VAR 0 8
29100: PUSH
29101: LD_VAR 0 5
29105: PPUSH
29106: LD_VAR 0 6
29110: PPUSH
29111: LD_VAR 0 3
29115: PPUSH
29116: CALL_OW 47
29120: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29121: LD_OWVAR 42
29125: PUSH
29126: LD_INT 32
29128: PUSH
29129: LD_INT 33
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: IN
29136: IFFALSE 29152
// PlaceWeaponTurret ( b , weapon ) ;
29138: LD_VAR 0 8
29142: PPUSH
29143: LD_VAR 0 4
29147: PPUSH
29148: CALL_OW 431
// end ;
29152: LD_VAR 0 7
29156: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29157: LD_INT 0
29159: PPUSH
29160: PPUSH
29161: PPUSH
29162: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29163: LD_ADDR_VAR 0 4
29167: PUSH
29168: LD_INT 22
29170: PUSH
29171: LD_OWVAR 2
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 2
29182: PUSH
29183: LD_INT 30
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 30
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: LIST
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PPUSH
29212: CALL_OW 69
29216: ST_TO_ADDR
// if not tmp then
29217: LD_VAR 0 4
29221: NOT
29222: IFFALSE 29226
// exit ;
29224: GO 29285
// for i in tmp do
29226: LD_ADDR_VAR 0 2
29230: PUSH
29231: LD_VAR 0 4
29235: PUSH
29236: FOR_IN
29237: IFFALSE 29283
// for j = 1 to 3 do
29239: LD_ADDR_VAR 0 3
29243: PUSH
29244: DOUBLE
29245: LD_INT 1
29247: DEC
29248: ST_TO_ADDR
29249: LD_INT 3
29251: PUSH
29252: FOR_TO
29253: IFFALSE 29279
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29255: LD_VAR 0 2
29259: PPUSH
29260: CALL_OW 274
29264: PPUSH
29265: LD_VAR 0 3
29269: PPUSH
29270: LD_INT 99999
29272: PPUSH
29273: CALL_OW 277
29277: GO 29252
29279: POP
29280: POP
29281: GO 29236
29283: POP
29284: POP
// end ;
29285: LD_VAR 0 1
29289: RET
// export function hHackSetLevel10 ; var i , j ; begin
29290: LD_INT 0
29292: PPUSH
29293: PPUSH
29294: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29295: LD_ADDR_VAR 0 2
29299: PUSH
29300: LD_INT 21
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PPUSH
29310: CALL_OW 69
29314: PUSH
29315: FOR_IN
29316: IFFALSE 29368
// if IsSelected ( i ) then
29318: LD_VAR 0 2
29322: PPUSH
29323: CALL_OW 306
29327: IFFALSE 29366
// begin for j := 1 to 4 do
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: DOUBLE
29335: LD_INT 1
29337: DEC
29338: ST_TO_ADDR
29339: LD_INT 4
29341: PUSH
29342: FOR_TO
29343: IFFALSE 29364
// SetSkill ( i , j , 10 ) ;
29345: LD_VAR 0 2
29349: PPUSH
29350: LD_VAR 0 3
29354: PPUSH
29355: LD_INT 10
29357: PPUSH
29358: CALL_OW 237
29362: GO 29342
29364: POP
29365: POP
// end ;
29366: GO 29315
29368: POP
29369: POP
// end ;
29370: LD_VAR 0 1
29374: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29375: LD_INT 0
29377: PPUSH
29378: PPUSH
29379: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29380: LD_ADDR_VAR 0 2
29384: PUSH
29385: LD_INT 22
29387: PUSH
29388: LD_OWVAR 2
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 21
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PPUSH
29411: CALL_OW 69
29415: PUSH
29416: FOR_IN
29417: IFFALSE 29458
// begin for j := 1 to 4 do
29419: LD_ADDR_VAR 0 3
29423: PUSH
29424: DOUBLE
29425: LD_INT 1
29427: DEC
29428: ST_TO_ADDR
29429: LD_INT 4
29431: PUSH
29432: FOR_TO
29433: IFFALSE 29454
// SetSkill ( i , j , 10 ) ;
29435: LD_VAR 0 2
29439: PPUSH
29440: LD_VAR 0 3
29444: PPUSH
29445: LD_INT 10
29447: PPUSH
29448: CALL_OW 237
29452: GO 29432
29454: POP
29455: POP
// end ;
29456: GO 29416
29458: POP
29459: POP
// end ;
29460: LD_VAR 0 1
29464: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29465: LD_INT 0
29467: PPUSH
// uc_side := your_side ;
29468: LD_ADDR_OWVAR 20
29472: PUSH
29473: LD_OWVAR 2
29477: ST_TO_ADDR
// uc_nation := nation ;
29478: LD_ADDR_OWVAR 21
29482: PUSH
29483: LD_VAR 0 1
29487: ST_TO_ADDR
// InitHc ;
29488: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29492: LD_INT 0
29494: PPUSH
29495: LD_VAR 0 2
29499: PPUSH
29500: LD_VAR 0 3
29504: PPUSH
29505: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29509: LD_VAR 0 4
29513: PPUSH
29514: LD_VAR 0 5
29518: PPUSH
29519: CALL_OW 428
29523: PUSH
29524: LD_INT 0
29526: EQUAL
29527: IFFALSE 29551
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29529: CALL_OW 44
29533: PPUSH
29534: LD_VAR 0 4
29538: PPUSH
29539: LD_VAR 0 5
29543: PPUSH
29544: LD_INT 1
29546: PPUSH
29547: CALL_OW 48
// end ;
29551: LD_VAR 0 6
29555: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29556: LD_INT 0
29558: PPUSH
29559: PPUSH
// uc_side := your_side ;
29560: LD_ADDR_OWVAR 20
29564: PUSH
29565: LD_OWVAR 2
29569: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29570: LD_VAR 0 1
29574: PUSH
29575: LD_INT 1
29577: PUSH
29578: LD_INT 2
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: LD_INT 4
29586: PUSH
29587: LD_INT 5
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: IN
29597: IFFALSE 29609
// uc_nation := nation_american else
29599: LD_ADDR_OWVAR 21
29603: PUSH
29604: LD_INT 1
29606: ST_TO_ADDR
29607: GO 29652
// if chassis in [ 11 , 12 , 13 , 14 ] then
29609: LD_VAR 0 1
29613: PUSH
29614: LD_INT 11
29616: PUSH
29617: LD_INT 12
29619: PUSH
29620: LD_INT 13
29622: PUSH
29623: LD_INT 14
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: IN
29632: IFFALSE 29644
// uc_nation := nation_arabian else
29634: LD_ADDR_OWVAR 21
29638: PUSH
29639: LD_INT 2
29641: ST_TO_ADDR
29642: GO 29652
// uc_nation := nation_russian ;
29644: LD_ADDR_OWVAR 21
29648: PUSH
29649: LD_INT 3
29651: ST_TO_ADDR
// vc_chassis := chassis ;
29652: LD_ADDR_OWVAR 37
29656: PUSH
29657: LD_VAR 0 1
29661: ST_TO_ADDR
// vc_engine := engine ;
29662: LD_ADDR_OWVAR 39
29666: PUSH
29667: LD_VAR 0 2
29671: ST_TO_ADDR
// vc_control := control ;
29672: LD_ADDR_OWVAR 38
29676: PUSH
29677: LD_VAR 0 3
29681: ST_TO_ADDR
// vc_weapon := weapon ;
29682: LD_ADDR_OWVAR 40
29686: PUSH
29687: LD_VAR 0 4
29691: ST_TO_ADDR
// un := CreateVehicle ;
29692: LD_ADDR_VAR 0 8
29696: PUSH
29697: CALL_OW 45
29701: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29702: LD_VAR 0 8
29706: PPUSH
29707: LD_INT 0
29709: PPUSH
29710: LD_INT 5
29712: PPUSH
29713: CALL_OW 12
29717: PPUSH
29718: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29722: LD_VAR 0 8
29726: PPUSH
29727: LD_VAR 0 5
29731: PPUSH
29732: LD_VAR 0 6
29736: PPUSH
29737: LD_INT 1
29739: PPUSH
29740: CALL_OW 48
// end ;
29744: LD_VAR 0 7
29748: RET
// export hInvincible ; every 1 do
29749: GO 29751
29751: DISABLE
// hInvincible := [ ] ;
29752: LD_ADDR_EXP 112
29756: PUSH
29757: EMPTY
29758: ST_TO_ADDR
29759: END
// every 10 do var i ;
29760: GO 29762
29762: DISABLE
29763: LD_INT 0
29765: PPUSH
// begin enable ;
29766: ENABLE
// if not hInvincible then
29767: LD_EXP 112
29771: NOT
29772: IFFALSE 29776
// exit ;
29774: GO 29820
// for i in hInvincible do
29776: LD_ADDR_VAR 0 1
29780: PUSH
29781: LD_EXP 112
29785: PUSH
29786: FOR_IN
29787: IFFALSE 29818
// if GetLives ( i ) < 1000 then
29789: LD_VAR 0 1
29793: PPUSH
29794: CALL_OW 256
29798: PUSH
29799: LD_INT 1000
29801: LESS
29802: IFFALSE 29816
// SetLives ( i , 1000 ) ;
29804: LD_VAR 0 1
29808: PPUSH
29809: LD_INT 1000
29811: PPUSH
29812: CALL_OW 234
29816: GO 29786
29818: POP
29819: POP
// end ;
29820: PPOPN 1
29822: END
// export function hHackInvincible ; var i ; begin
29823: LD_INT 0
29825: PPUSH
29826: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29827: LD_ADDR_VAR 0 2
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: LD_INT 21
29837: PUSH
29838: LD_INT 1
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 21
29847: PUSH
29848: LD_INT 2
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: PPUSH
29860: CALL_OW 69
29864: PUSH
29865: FOR_IN
29866: IFFALSE 29927
// if IsSelected ( i ) then
29868: LD_VAR 0 2
29872: PPUSH
29873: CALL_OW 306
29877: IFFALSE 29925
// begin if i in hInvincible then
29879: LD_VAR 0 2
29883: PUSH
29884: LD_EXP 112
29888: IN
29889: IFFALSE 29909
// hInvincible := hInvincible diff i else
29891: LD_ADDR_EXP 112
29895: PUSH
29896: LD_EXP 112
29900: PUSH
29901: LD_VAR 0 2
29905: DIFF
29906: ST_TO_ADDR
29907: GO 29925
// hInvincible := hInvincible union i ;
29909: LD_ADDR_EXP 112
29913: PUSH
29914: LD_EXP 112
29918: PUSH
29919: LD_VAR 0 2
29923: UNION
29924: ST_TO_ADDR
// end ;
29925: GO 29865
29927: POP
29928: POP
// end ;
29929: LD_VAR 0 1
29933: RET
// export function hHackInvisible ; var i , j ; begin
29934: LD_INT 0
29936: PPUSH
29937: PPUSH
29938: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29939: LD_ADDR_VAR 0 2
29943: PUSH
29944: LD_INT 21
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PPUSH
29954: CALL_OW 69
29958: PUSH
29959: FOR_IN
29960: IFFALSE 29984
// if IsSelected ( i ) then
29962: LD_VAR 0 2
29966: PPUSH
29967: CALL_OW 306
29971: IFFALSE 29982
// ComForceInvisible ( i ) ;
29973: LD_VAR 0 2
29977: PPUSH
29978: CALL_OW 496
29982: GO 29959
29984: POP
29985: POP
// end ;
29986: LD_VAR 0 1
29990: RET
// export function hHackChangeYourSide ; begin
29991: LD_INT 0
29993: PPUSH
// if your_side = 8 then
29994: LD_OWVAR 2
29998: PUSH
29999: LD_INT 8
30001: EQUAL
30002: IFFALSE 30014
// your_side := 0 else
30004: LD_ADDR_OWVAR 2
30008: PUSH
30009: LD_INT 0
30011: ST_TO_ADDR
30012: GO 30028
// your_side := your_side + 1 ;
30014: LD_ADDR_OWVAR 2
30018: PUSH
30019: LD_OWVAR 2
30023: PUSH
30024: LD_INT 1
30026: PLUS
30027: ST_TO_ADDR
// end ;
30028: LD_VAR 0 1
30032: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30033: LD_INT 0
30035: PPUSH
30036: PPUSH
30037: PPUSH
// for i in all_units do
30038: LD_ADDR_VAR 0 2
30042: PUSH
30043: LD_OWVAR 3
30047: PUSH
30048: FOR_IN
30049: IFFALSE 30127
// if IsSelected ( i ) then
30051: LD_VAR 0 2
30055: PPUSH
30056: CALL_OW 306
30060: IFFALSE 30125
// begin j := GetSide ( i ) ;
30062: LD_ADDR_VAR 0 3
30066: PUSH
30067: LD_VAR 0 2
30071: PPUSH
30072: CALL_OW 255
30076: ST_TO_ADDR
// if j = 8 then
30077: LD_VAR 0 3
30081: PUSH
30082: LD_INT 8
30084: EQUAL
30085: IFFALSE 30097
// j := 0 else
30087: LD_ADDR_VAR 0 3
30091: PUSH
30092: LD_INT 0
30094: ST_TO_ADDR
30095: GO 30111
// j := j + 1 ;
30097: LD_ADDR_VAR 0 3
30101: PUSH
30102: LD_VAR 0 3
30106: PUSH
30107: LD_INT 1
30109: PLUS
30110: ST_TO_ADDR
// SetSide ( i , j ) ;
30111: LD_VAR 0 2
30115: PPUSH
30116: LD_VAR 0 3
30120: PPUSH
30121: CALL_OW 235
// end ;
30125: GO 30048
30127: POP
30128: POP
// end ;
30129: LD_VAR 0 1
30133: RET
// export function hHackFog ; begin
30134: LD_INT 0
30136: PPUSH
// FogOff ( true ) ;
30137: LD_INT 1
30139: PPUSH
30140: CALL_OW 344
// end ;
30144: LD_VAR 0 1
30148: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30149: LD_INT 0
30151: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30152: LD_VAR 0 1
30156: PPUSH
30157: LD_VAR 0 2
30161: PPUSH
30162: LD_VAR 0 3
30166: PPUSH
30167: LD_INT 1
30169: PPUSH
30170: LD_INT 1
30172: PPUSH
30173: CALL_OW 483
// CenterOnXY ( x , y ) ;
30177: LD_VAR 0 2
30181: PPUSH
30182: LD_VAR 0 3
30186: PPUSH
30187: CALL_OW 84
// end ; end_of_file
30191: LD_VAR 0 4
30195: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30196: LD_INT 0
30198: PPUSH
30199: PPUSH
30200: PPUSH
30201: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30202: LD_VAR 0 1
30206: PPUSH
30207: CALL_OW 264
30211: PUSH
30212: LD_EXP 40
30216: EQUAL
30217: IFFALSE 30289
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30219: LD_INT 68
30221: PPUSH
30222: LD_VAR 0 1
30226: PPUSH
30227: CALL_OW 255
30231: PPUSH
30232: CALL_OW 321
30236: PUSH
30237: LD_INT 2
30239: EQUAL
30240: IFFALSE 30252
// eff := 70 else
30242: LD_ADDR_VAR 0 4
30246: PUSH
30247: LD_INT 70
30249: ST_TO_ADDR
30250: GO 30260
// eff := 30 ;
30252: LD_ADDR_VAR 0 4
30256: PUSH
30257: LD_INT 30
30259: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30260: LD_VAR 0 1
30264: PPUSH
30265: CALL_OW 250
30269: PPUSH
30270: LD_VAR 0 1
30274: PPUSH
30275: CALL_OW 251
30279: PPUSH
30280: LD_VAR 0 4
30284: PPUSH
30285: CALL_OW 495
// end ; end ;
30289: LD_VAR 0 2
30293: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30294: LD_INT 0
30296: PPUSH
// end ;
30297: LD_VAR 0 4
30301: RET
// export function SOS_Command ( cmd ) ; begin
30302: LD_INT 0
30304: PPUSH
// end ;
30305: LD_VAR 0 2
30309: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30310: LD_INT 0
30312: PPUSH
// end ;
30313: LD_VAR 0 6
30317: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
30318: LD_INT 0
30320: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
30321: LD_VAR 0 1
30325: PUSH
30326: LD_INT 250
30328: EQUAL
30329: PUSH
30330: LD_VAR 0 2
30334: PPUSH
30335: CALL_OW 264
30339: PUSH
30340: LD_EXP 43
30344: EQUAL
30345: AND
30346: IFFALSE 30367
// MinerPlaceMine ( unit , x , y ) ;
30348: LD_VAR 0 2
30352: PPUSH
30353: LD_VAR 0 4
30357: PPUSH
30358: LD_VAR 0 5
30362: PPUSH
30363: CALL 32716 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
30367: LD_VAR 0 1
30371: PUSH
30372: LD_INT 251
30374: EQUAL
30375: PUSH
30376: LD_VAR 0 2
30380: PPUSH
30381: CALL_OW 264
30385: PUSH
30386: LD_EXP 43
30390: EQUAL
30391: AND
30392: IFFALSE 30413
// MinerDetonateMine ( unit , x , y ) ;
30394: LD_VAR 0 2
30398: PPUSH
30399: LD_VAR 0 4
30403: PPUSH
30404: LD_VAR 0 5
30408: PPUSH
30409: CALL 32993 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
30413: LD_VAR 0 1
30417: PUSH
30418: LD_INT 252
30420: EQUAL
30421: PUSH
30422: LD_VAR 0 2
30426: PPUSH
30427: CALL_OW 264
30431: PUSH
30432: LD_EXP 43
30436: EQUAL
30437: AND
30438: IFFALSE 30459
// MinerCreateMinefield ( unit , x , y ) ;
30440: LD_VAR 0 2
30444: PPUSH
30445: LD_VAR 0 4
30449: PPUSH
30450: LD_VAR 0 5
30454: PPUSH
30455: CALL 33410 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30459: LD_VAR 0 1
30463: PUSH
30464: LD_INT 253
30466: EQUAL
30467: PUSH
30468: LD_VAR 0 2
30472: PPUSH
30473: CALL_OW 257
30477: PUSH
30478: LD_INT 5
30480: EQUAL
30481: AND
30482: IFFALSE 30503
// ComBinocular ( unit , x , y ) ;
30484: LD_VAR 0 2
30488: PPUSH
30489: LD_VAR 0 4
30493: PPUSH
30494: LD_VAR 0 5
30498: PPUSH
30499: CALL 33781 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30503: LD_VAR 0 1
30507: PUSH
30508: LD_INT 254
30510: EQUAL
30511: PUSH
30512: LD_VAR 0 2
30516: PPUSH
30517: CALL_OW 264
30521: PUSH
30522: LD_EXP 38
30526: EQUAL
30527: AND
30528: PUSH
30529: LD_VAR 0 3
30533: PPUSH
30534: CALL_OW 263
30538: PUSH
30539: LD_INT 3
30541: EQUAL
30542: AND
30543: IFFALSE 30559
// HackDestroyVehicle ( unit , selectedUnit ) ;
30545: LD_VAR 0 2
30549: PPUSH
30550: LD_VAR 0 3
30554: PPUSH
30555: CALL 32076 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30559: LD_VAR 0 1
30563: PUSH
30564: LD_INT 255
30566: EQUAL
30567: PUSH
30568: LD_VAR 0 2
30572: PPUSH
30573: CALL_OW 264
30577: PUSH
30578: LD_INT 14
30580: PUSH
30581: LD_INT 53
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: IN
30588: AND
30589: PUSH
30590: LD_VAR 0 4
30594: PPUSH
30595: LD_VAR 0 5
30599: PPUSH
30600: CALL_OW 488
30604: AND
30605: IFFALSE 30629
// CutTreeXYR ( unit , x , y , 12 ) ;
30607: LD_VAR 0 2
30611: PPUSH
30612: LD_VAR 0 4
30616: PPUSH
30617: LD_VAR 0 5
30621: PPUSH
30622: LD_INT 12
30624: PPUSH
30625: CALL 30642 0 4
// end ;
30629: LD_VAR 0 6
30633: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
30634: LD_INT 0
30636: PPUSH
// end ;
30637: LD_VAR 0 4
30641: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30642: LD_INT 0
30644: PPUSH
30645: PPUSH
30646: PPUSH
30647: PPUSH
30648: PPUSH
30649: PPUSH
30650: PPUSH
30651: PPUSH
30652: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30653: LD_VAR 0 1
30657: NOT
30658: PUSH
30659: LD_VAR 0 2
30663: PPUSH
30664: LD_VAR 0 3
30668: PPUSH
30669: CALL_OW 488
30673: NOT
30674: OR
30675: PUSH
30676: LD_VAR 0 4
30680: NOT
30681: OR
30682: IFFALSE 30686
// exit ;
30684: GO 31026
// list := [ ] ;
30686: LD_ADDR_VAR 0 13
30690: PUSH
30691: EMPTY
30692: ST_TO_ADDR
// if x - r < 0 then
30693: LD_VAR 0 2
30697: PUSH
30698: LD_VAR 0 4
30702: MINUS
30703: PUSH
30704: LD_INT 0
30706: LESS
30707: IFFALSE 30719
// min_x := 0 else
30709: LD_ADDR_VAR 0 7
30713: PUSH
30714: LD_INT 0
30716: ST_TO_ADDR
30717: GO 30735
// min_x := x - r ;
30719: LD_ADDR_VAR 0 7
30723: PUSH
30724: LD_VAR 0 2
30728: PUSH
30729: LD_VAR 0 4
30733: MINUS
30734: ST_TO_ADDR
// if y - r < 0 then
30735: LD_VAR 0 3
30739: PUSH
30740: LD_VAR 0 4
30744: MINUS
30745: PUSH
30746: LD_INT 0
30748: LESS
30749: IFFALSE 30761
// min_y := 0 else
30751: LD_ADDR_VAR 0 8
30755: PUSH
30756: LD_INT 0
30758: ST_TO_ADDR
30759: GO 30777
// min_y := y - r ;
30761: LD_ADDR_VAR 0 8
30765: PUSH
30766: LD_VAR 0 3
30770: PUSH
30771: LD_VAR 0 4
30775: MINUS
30776: ST_TO_ADDR
// max_x := x + r ;
30777: LD_ADDR_VAR 0 9
30781: PUSH
30782: LD_VAR 0 2
30786: PUSH
30787: LD_VAR 0 4
30791: PLUS
30792: ST_TO_ADDR
// max_y := y + r ;
30793: LD_ADDR_VAR 0 10
30797: PUSH
30798: LD_VAR 0 3
30802: PUSH
30803: LD_VAR 0 4
30807: PLUS
30808: ST_TO_ADDR
// for _x = min_x to max_x do
30809: LD_ADDR_VAR 0 11
30813: PUSH
30814: DOUBLE
30815: LD_VAR 0 7
30819: DEC
30820: ST_TO_ADDR
30821: LD_VAR 0 9
30825: PUSH
30826: FOR_TO
30827: IFFALSE 30944
// for _y = min_y to max_y do
30829: LD_ADDR_VAR 0 12
30833: PUSH
30834: DOUBLE
30835: LD_VAR 0 8
30839: DEC
30840: ST_TO_ADDR
30841: LD_VAR 0 10
30845: PUSH
30846: FOR_TO
30847: IFFALSE 30940
// begin if not ValidHex ( _x , _y ) then
30849: LD_VAR 0 11
30853: PPUSH
30854: LD_VAR 0 12
30858: PPUSH
30859: CALL_OW 488
30863: NOT
30864: IFFALSE 30868
// continue ;
30866: GO 30846
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30868: LD_VAR 0 11
30872: PPUSH
30873: LD_VAR 0 12
30877: PPUSH
30878: CALL_OW 351
30882: PUSH
30883: LD_VAR 0 11
30887: PPUSH
30888: LD_VAR 0 12
30892: PPUSH
30893: CALL_OW 554
30897: AND
30898: IFFALSE 30938
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30900: LD_ADDR_VAR 0 13
30904: PUSH
30905: LD_VAR 0 13
30909: PPUSH
30910: LD_VAR 0 13
30914: PUSH
30915: LD_INT 1
30917: PLUS
30918: PPUSH
30919: LD_VAR 0 11
30923: PUSH
30924: LD_VAR 0 12
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PPUSH
30933: CALL_OW 2
30937: ST_TO_ADDR
// end ;
30938: GO 30846
30940: POP
30941: POP
30942: GO 30826
30944: POP
30945: POP
// if not list then
30946: LD_VAR 0 13
30950: NOT
30951: IFFALSE 30955
// exit ;
30953: GO 31026
// for i in list do
30955: LD_ADDR_VAR 0 6
30959: PUSH
30960: LD_VAR 0 13
30964: PUSH
30965: FOR_IN
30966: IFFALSE 31024
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30968: LD_VAR 0 1
30972: PPUSH
30973: LD_STRING M
30975: PUSH
30976: LD_VAR 0 6
30980: PUSH
30981: LD_INT 1
30983: ARRAY
30984: PUSH
30985: LD_VAR 0 6
30989: PUSH
30990: LD_INT 2
30992: ARRAY
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: LD_INT 0
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: PUSH
31015: EMPTY
31016: LIST
31017: PPUSH
31018: CALL_OW 447
31022: GO 30965
31024: POP
31025: POP
// end ;
31026: LD_VAR 0 5
31030: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31031: LD_EXP 115
31035: NOT
31036: IFFALSE 31086
31038: GO 31040
31040: DISABLE
// begin initHack := true ;
31041: LD_ADDR_EXP 115
31045: PUSH
31046: LD_INT 1
31048: ST_TO_ADDR
// hackTanks := [ ] ;
31049: LD_ADDR_EXP 116
31053: PUSH
31054: EMPTY
31055: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31056: LD_ADDR_EXP 117
31060: PUSH
31061: EMPTY
31062: ST_TO_ADDR
// hackLimit := 3 ;
31063: LD_ADDR_EXP 118
31067: PUSH
31068: LD_INT 3
31070: ST_TO_ADDR
// hackDist := 12 ;
31071: LD_ADDR_EXP 119
31075: PUSH
31076: LD_INT 12
31078: ST_TO_ADDR
// hackCounter := [ ] ;
31079: LD_ADDR_EXP 120
31083: PUSH
31084: EMPTY
31085: ST_TO_ADDR
// end ;
31086: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31087: LD_EXP 115
31091: PUSH
31092: LD_INT 34
31094: PUSH
31095: LD_EXP 38
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PPUSH
31104: CALL_OW 69
31108: AND
31109: IFFALSE 31364
31111: GO 31113
31113: DISABLE
31114: LD_INT 0
31116: PPUSH
31117: PPUSH
// begin enable ;
31118: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31119: LD_ADDR_VAR 0 1
31123: PUSH
31124: LD_INT 34
31126: PUSH
31127: LD_EXP 38
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PPUSH
31136: CALL_OW 69
31140: PUSH
31141: FOR_IN
31142: IFFALSE 31362
// begin if not i in hackTanks then
31144: LD_VAR 0 1
31148: PUSH
31149: LD_EXP 116
31153: IN
31154: NOT
31155: IFFALSE 31238
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31157: LD_ADDR_EXP 116
31161: PUSH
31162: LD_EXP 116
31166: PPUSH
31167: LD_EXP 116
31171: PUSH
31172: LD_INT 1
31174: PLUS
31175: PPUSH
31176: LD_VAR 0 1
31180: PPUSH
31181: CALL_OW 1
31185: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31186: LD_ADDR_EXP 117
31190: PUSH
31191: LD_EXP 117
31195: PPUSH
31196: LD_EXP 117
31200: PUSH
31201: LD_INT 1
31203: PLUS
31204: PPUSH
31205: EMPTY
31206: PPUSH
31207: CALL_OW 1
31211: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31212: LD_ADDR_EXP 120
31216: PUSH
31217: LD_EXP 120
31221: PPUSH
31222: LD_EXP 120
31226: PUSH
31227: LD_INT 1
31229: PLUS
31230: PPUSH
31231: EMPTY
31232: PPUSH
31233: CALL_OW 1
31237: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31238: LD_VAR 0 1
31242: PPUSH
31243: CALL_OW 302
31247: NOT
31248: IFFALSE 31261
// begin HackUnlinkAll ( i ) ;
31250: LD_VAR 0 1
31254: PPUSH
31255: CALL 31367 0 1
// continue ;
31259: GO 31141
// end ; HackCheckCapturedStatus ( i ) ;
31261: LD_VAR 0 1
31265: PPUSH
31266: CALL 31810 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31270: LD_ADDR_VAR 0 2
31274: PUSH
31275: LD_INT 81
31277: PUSH
31278: LD_VAR 0 1
31282: PPUSH
31283: CALL_OW 255
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 33
31294: PUSH
31295: LD_INT 3
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 91
31304: PUSH
31305: LD_VAR 0 1
31309: PUSH
31310: LD_EXP 119
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 50
31322: PUSH
31323: EMPTY
31324: LIST
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: PPUSH
31332: CALL_OW 69
31336: ST_TO_ADDR
// if not tmp then
31337: LD_VAR 0 2
31341: NOT
31342: IFFALSE 31346
// continue ;
31344: GO 31141
// HackLink ( i , tmp ) ;
31346: LD_VAR 0 1
31350: PPUSH
31351: LD_VAR 0 2
31355: PPUSH
31356: CALL 31503 0 2
// end ;
31360: GO 31141
31362: POP
31363: POP
// end ;
31364: PPOPN 2
31366: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31367: LD_INT 0
31369: PPUSH
31370: PPUSH
31371: PPUSH
// if not hack in hackTanks then
31372: LD_VAR 0 1
31376: PUSH
31377: LD_EXP 116
31381: IN
31382: NOT
31383: IFFALSE 31387
// exit ;
31385: GO 31498
// index := GetElementIndex ( hackTanks , hack ) ;
31387: LD_ADDR_VAR 0 4
31391: PUSH
31392: LD_EXP 116
31396: PPUSH
31397: LD_VAR 0 1
31401: PPUSH
31402: CALL 38972 0 2
31406: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31407: LD_EXP 117
31411: PUSH
31412: LD_VAR 0 4
31416: ARRAY
31417: IFFALSE 31498
// begin for i in hackTanksCaptured [ index ] do
31419: LD_ADDR_VAR 0 3
31423: PUSH
31424: LD_EXP 117
31428: PUSH
31429: LD_VAR 0 4
31433: ARRAY
31434: PUSH
31435: FOR_IN
31436: IFFALSE 31462
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31438: LD_VAR 0 3
31442: PUSH
31443: LD_INT 1
31445: ARRAY
31446: PPUSH
31447: LD_VAR 0 3
31451: PUSH
31452: LD_INT 2
31454: ARRAY
31455: PPUSH
31456: CALL_OW 235
31460: GO 31435
31462: POP
31463: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31464: LD_ADDR_EXP 117
31468: PUSH
31469: LD_EXP 117
31473: PPUSH
31474: LD_VAR 0 4
31478: PPUSH
31479: EMPTY
31480: PPUSH
31481: CALL_OW 1
31485: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31486: LD_VAR 0 1
31490: PPUSH
31491: LD_INT 0
31493: PPUSH
31494: CALL_OW 505
// end ; end ;
31498: LD_VAR 0 2
31502: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31503: LD_INT 0
31505: PPUSH
31506: PPUSH
31507: PPUSH
// if not hack in hackTanks or not vehicles then
31508: LD_VAR 0 1
31512: PUSH
31513: LD_EXP 116
31517: IN
31518: NOT
31519: PUSH
31520: LD_VAR 0 2
31524: NOT
31525: OR
31526: IFFALSE 31530
// exit ;
31528: GO 31805
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31530: LD_ADDR_VAR 0 2
31534: PUSH
31535: LD_VAR 0 1
31539: PPUSH
31540: LD_VAR 0 2
31544: PPUSH
31545: LD_INT 1
31547: PPUSH
31548: LD_INT 1
31550: PPUSH
31551: CALL 39622 0 4
31555: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31556: LD_ADDR_VAR 0 5
31560: PUSH
31561: LD_EXP 116
31565: PPUSH
31566: LD_VAR 0 1
31570: PPUSH
31571: CALL 38972 0 2
31575: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31576: LD_EXP 117
31580: PUSH
31581: LD_VAR 0 5
31585: ARRAY
31586: PUSH
31587: LD_EXP 118
31591: LESS
31592: IFFALSE 31781
// begin for i := 1 to vehicles do
31594: LD_ADDR_VAR 0 4
31598: PUSH
31599: DOUBLE
31600: LD_INT 1
31602: DEC
31603: ST_TO_ADDR
31604: LD_VAR 0 2
31608: PUSH
31609: FOR_TO
31610: IFFALSE 31779
// begin if hackTanksCaptured [ index ] = hackLimit then
31612: LD_EXP 117
31616: PUSH
31617: LD_VAR 0 5
31621: ARRAY
31622: PUSH
31623: LD_EXP 118
31627: EQUAL
31628: IFFALSE 31632
// break ;
31630: GO 31779
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31632: LD_ADDR_EXP 120
31636: PUSH
31637: LD_EXP 120
31641: PPUSH
31642: LD_VAR 0 5
31646: PPUSH
31647: LD_EXP 120
31651: PUSH
31652: LD_VAR 0 5
31656: ARRAY
31657: PUSH
31658: LD_INT 1
31660: PLUS
31661: PPUSH
31662: CALL_OW 1
31666: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31667: LD_ADDR_EXP 117
31671: PUSH
31672: LD_EXP 117
31676: PPUSH
31677: LD_VAR 0 5
31681: PUSH
31682: LD_EXP 117
31686: PUSH
31687: LD_VAR 0 5
31691: ARRAY
31692: PUSH
31693: LD_INT 1
31695: PLUS
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PPUSH
31701: LD_VAR 0 2
31705: PUSH
31706: LD_VAR 0 4
31710: ARRAY
31711: PUSH
31712: LD_VAR 0 2
31716: PUSH
31717: LD_VAR 0 4
31721: ARRAY
31722: PPUSH
31723: CALL_OW 255
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PPUSH
31732: CALL 39187 0 3
31736: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31737: LD_VAR 0 2
31741: PUSH
31742: LD_VAR 0 4
31746: ARRAY
31747: PPUSH
31748: LD_VAR 0 1
31752: PPUSH
31753: CALL_OW 255
31757: PPUSH
31758: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31762: LD_VAR 0 2
31766: PUSH
31767: LD_VAR 0 4
31771: ARRAY
31772: PPUSH
31773: CALL_OW 141
// end ;
31777: GO 31609
31779: POP
31780: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31781: LD_VAR 0 1
31785: PPUSH
31786: LD_EXP 117
31790: PUSH
31791: LD_VAR 0 5
31795: ARRAY
31796: PUSH
31797: LD_INT 0
31799: PLUS
31800: PPUSH
31801: CALL_OW 505
// end ;
31805: LD_VAR 0 3
31809: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31810: LD_INT 0
31812: PPUSH
31813: PPUSH
31814: PPUSH
31815: PPUSH
// if not hack in hackTanks then
31816: LD_VAR 0 1
31820: PUSH
31821: LD_EXP 116
31825: IN
31826: NOT
31827: IFFALSE 31831
// exit ;
31829: GO 32071
// index := GetElementIndex ( hackTanks , hack ) ;
31831: LD_ADDR_VAR 0 4
31835: PUSH
31836: LD_EXP 116
31840: PPUSH
31841: LD_VAR 0 1
31845: PPUSH
31846: CALL 38972 0 2
31850: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31851: LD_ADDR_VAR 0 3
31855: PUSH
31856: DOUBLE
31857: LD_EXP 117
31861: PUSH
31862: LD_VAR 0 4
31866: ARRAY
31867: INC
31868: ST_TO_ADDR
31869: LD_INT 1
31871: PUSH
31872: FOR_DOWNTO
31873: IFFALSE 32045
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31875: LD_ADDR_VAR 0 5
31879: PUSH
31880: LD_EXP 117
31884: PUSH
31885: LD_VAR 0 4
31889: ARRAY
31890: PUSH
31891: LD_VAR 0 3
31895: ARRAY
31896: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31897: LD_VAR 0 5
31901: PUSH
31902: LD_INT 1
31904: ARRAY
31905: PPUSH
31906: CALL_OW 302
31910: NOT
31911: PUSH
31912: LD_VAR 0 5
31916: PUSH
31917: LD_INT 1
31919: ARRAY
31920: PPUSH
31921: CALL_OW 255
31925: PUSH
31926: LD_VAR 0 1
31930: PPUSH
31931: CALL_OW 255
31935: NONEQUAL
31936: OR
31937: IFFALSE 32043
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31939: LD_VAR 0 5
31943: PUSH
31944: LD_INT 1
31946: ARRAY
31947: PPUSH
31948: CALL_OW 305
31952: PUSH
31953: LD_VAR 0 5
31957: PUSH
31958: LD_INT 1
31960: ARRAY
31961: PPUSH
31962: CALL_OW 255
31966: PUSH
31967: LD_VAR 0 1
31971: PPUSH
31972: CALL_OW 255
31976: EQUAL
31977: AND
31978: IFFALSE 32002
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31980: LD_VAR 0 5
31984: PUSH
31985: LD_INT 1
31987: ARRAY
31988: PPUSH
31989: LD_VAR 0 5
31993: PUSH
31994: LD_INT 2
31996: ARRAY
31997: PPUSH
31998: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32002: LD_ADDR_EXP 117
32006: PUSH
32007: LD_EXP 117
32011: PPUSH
32012: LD_VAR 0 4
32016: PPUSH
32017: LD_EXP 117
32021: PUSH
32022: LD_VAR 0 4
32026: ARRAY
32027: PPUSH
32028: LD_VAR 0 3
32032: PPUSH
32033: CALL_OW 3
32037: PPUSH
32038: CALL_OW 1
32042: ST_TO_ADDR
// end ; end ;
32043: GO 31872
32045: POP
32046: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32047: LD_VAR 0 1
32051: PPUSH
32052: LD_EXP 117
32056: PUSH
32057: LD_VAR 0 4
32061: ARRAY
32062: PUSH
32063: LD_INT 0
32065: PLUS
32066: PPUSH
32067: CALL_OW 505
// end ;
32071: LD_VAR 0 2
32075: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32076: LD_INT 0
32078: PPUSH
32079: PPUSH
32080: PPUSH
32081: PPUSH
// if not hack in hackTanks then
32082: LD_VAR 0 1
32086: PUSH
32087: LD_EXP 116
32091: IN
32092: NOT
32093: IFFALSE 32097
// exit ;
32095: GO 32182
// index := GetElementIndex ( hackTanks , hack ) ;
32097: LD_ADDR_VAR 0 5
32101: PUSH
32102: LD_EXP 116
32106: PPUSH
32107: LD_VAR 0 1
32111: PPUSH
32112: CALL 38972 0 2
32116: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32117: LD_ADDR_VAR 0 4
32121: PUSH
32122: DOUBLE
32123: LD_INT 1
32125: DEC
32126: ST_TO_ADDR
32127: LD_EXP 117
32131: PUSH
32132: LD_VAR 0 5
32136: ARRAY
32137: PUSH
32138: FOR_TO
32139: IFFALSE 32180
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32141: LD_EXP 117
32145: PUSH
32146: LD_VAR 0 5
32150: ARRAY
32151: PUSH
32152: LD_VAR 0 4
32156: ARRAY
32157: PUSH
32158: LD_INT 1
32160: ARRAY
32161: PUSH
32162: LD_VAR 0 2
32166: EQUAL
32167: IFFALSE 32178
// KillUnit ( vehicle ) ;
32169: LD_VAR 0 2
32173: PPUSH
32174: CALL_OW 66
32178: GO 32138
32180: POP
32181: POP
// end ;
32182: LD_VAR 0 3
32186: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32187: LD_EXP 121
32191: NOT
32192: IFFALSE 32227
32194: GO 32196
32196: DISABLE
// begin initMiner := true ;
32197: LD_ADDR_EXP 121
32201: PUSH
32202: LD_INT 1
32204: ST_TO_ADDR
// minersList := [ ] ;
32205: LD_ADDR_EXP 122
32209: PUSH
32210: EMPTY
32211: ST_TO_ADDR
// minerMinesList := [ ] ;
32212: LD_ADDR_EXP 123
32216: PUSH
32217: EMPTY
32218: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32219: LD_ADDR_EXP 124
32223: PUSH
32224: LD_INT 5
32226: ST_TO_ADDR
// end ;
32227: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32228: LD_EXP 121
32232: PUSH
32233: LD_INT 34
32235: PUSH
32236: LD_EXP 43
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PPUSH
32245: CALL_OW 69
32249: AND
32250: IFFALSE 32713
32252: GO 32254
32254: DISABLE
32255: LD_INT 0
32257: PPUSH
32258: PPUSH
32259: PPUSH
32260: PPUSH
// begin enable ;
32261: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32262: LD_ADDR_VAR 0 1
32266: PUSH
32267: LD_INT 34
32269: PUSH
32270: LD_EXP 43
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PPUSH
32279: CALL_OW 69
32283: PUSH
32284: FOR_IN
32285: IFFALSE 32357
// begin if not i in minersList then
32287: LD_VAR 0 1
32291: PUSH
32292: LD_EXP 122
32296: IN
32297: NOT
32298: IFFALSE 32355
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32300: LD_ADDR_EXP 122
32304: PUSH
32305: LD_EXP 122
32309: PPUSH
32310: LD_EXP 122
32314: PUSH
32315: LD_INT 1
32317: PLUS
32318: PPUSH
32319: LD_VAR 0 1
32323: PPUSH
32324: CALL_OW 1
32328: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32329: LD_ADDR_EXP 123
32333: PUSH
32334: LD_EXP 123
32338: PPUSH
32339: LD_EXP 123
32343: PUSH
32344: LD_INT 1
32346: PLUS
32347: PPUSH
32348: EMPTY
32349: PPUSH
32350: CALL_OW 1
32354: ST_TO_ADDR
// end end ;
32355: GO 32284
32357: POP
32358: POP
// for i := minerMinesList downto 1 do
32359: LD_ADDR_VAR 0 1
32363: PUSH
32364: DOUBLE
32365: LD_EXP 123
32369: INC
32370: ST_TO_ADDR
32371: LD_INT 1
32373: PUSH
32374: FOR_DOWNTO
32375: IFFALSE 32711
// begin if IsLive ( minersList [ i ] ) then
32377: LD_EXP 122
32381: PUSH
32382: LD_VAR 0 1
32386: ARRAY
32387: PPUSH
32388: CALL_OW 300
32392: IFFALSE 32420
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32394: LD_EXP 122
32398: PUSH
32399: LD_VAR 0 1
32403: ARRAY
32404: PPUSH
32405: LD_EXP 123
32409: PUSH
32410: LD_VAR 0 1
32414: ARRAY
32415: PPUSH
32416: CALL_OW 505
// if not minerMinesList [ i ] then
32420: LD_EXP 123
32424: PUSH
32425: LD_VAR 0 1
32429: ARRAY
32430: NOT
32431: IFFALSE 32435
// continue ;
32433: GO 32374
// for j := minerMinesList [ i ] downto 1 do
32435: LD_ADDR_VAR 0 2
32439: PUSH
32440: DOUBLE
32441: LD_EXP 123
32445: PUSH
32446: LD_VAR 0 1
32450: ARRAY
32451: INC
32452: ST_TO_ADDR
32453: LD_INT 1
32455: PUSH
32456: FOR_DOWNTO
32457: IFFALSE 32707
// begin side := GetSide ( minersList [ i ] ) ;
32459: LD_ADDR_VAR 0 3
32463: PUSH
32464: LD_EXP 122
32468: PUSH
32469: LD_VAR 0 1
32473: ARRAY
32474: PPUSH
32475: CALL_OW 255
32479: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32480: LD_ADDR_VAR 0 4
32484: PUSH
32485: LD_EXP 123
32489: PUSH
32490: LD_VAR 0 1
32494: ARRAY
32495: PUSH
32496: LD_VAR 0 2
32500: ARRAY
32501: PUSH
32502: LD_INT 1
32504: ARRAY
32505: PPUSH
32506: LD_EXP 123
32510: PUSH
32511: LD_VAR 0 1
32515: ARRAY
32516: PUSH
32517: LD_VAR 0 2
32521: ARRAY
32522: PUSH
32523: LD_INT 2
32525: ARRAY
32526: PPUSH
32527: CALL_OW 428
32531: ST_TO_ADDR
// if not tmp then
32532: LD_VAR 0 4
32536: NOT
32537: IFFALSE 32541
// continue ;
32539: GO 32456
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32541: LD_VAR 0 4
32545: PUSH
32546: LD_INT 81
32548: PUSH
32549: LD_VAR 0 3
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PPUSH
32558: CALL_OW 69
32562: IN
32563: PUSH
32564: LD_EXP 123
32568: PUSH
32569: LD_VAR 0 1
32573: ARRAY
32574: PUSH
32575: LD_VAR 0 2
32579: ARRAY
32580: PUSH
32581: LD_INT 1
32583: ARRAY
32584: PPUSH
32585: LD_EXP 123
32589: PUSH
32590: LD_VAR 0 1
32594: ARRAY
32595: PUSH
32596: LD_VAR 0 2
32600: ARRAY
32601: PUSH
32602: LD_INT 2
32604: ARRAY
32605: PPUSH
32606: CALL_OW 458
32610: AND
32611: IFFALSE 32705
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32613: LD_EXP 123
32617: PUSH
32618: LD_VAR 0 1
32622: ARRAY
32623: PUSH
32624: LD_VAR 0 2
32628: ARRAY
32629: PUSH
32630: LD_INT 1
32632: ARRAY
32633: PPUSH
32634: LD_EXP 123
32638: PUSH
32639: LD_VAR 0 1
32643: ARRAY
32644: PUSH
32645: LD_VAR 0 2
32649: ARRAY
32650: PUSH
32651: LD_INT 2
32653: ARRAY
32654: PPUSH
32655: LD_VAR 0 3
32659: PPUSH
32660: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32664: LD_ADDR_EXP 123
32668: PUSH
32669: LD_EXP 123
32673: PPUSH
32674: LD_VAR 0 1
32678: PPUSH
32679: LD_EXP 123
32683: PUSH
32684: LD_VAR 0 1
32688: ARRAY
32689: PPUSH
32690: LD_VAR 0 2
32694: PPUSH
32695: CALL_OW 3
32699: PPUSH
32700: CALL_OW 1
32704: ST_TO_ADDR
// end ; end ;
32705: GO 32456
32707: POP
32708: POP
// end ;
32709: GO 32374
32711: POP
32712: POP
// end ;
32713: PPOPN 4
32715: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32716: LD_INT 0
32718: PPUSH
32719: PPUSH
// result := false ;
32720: LD_ADDR_VAR 0 4
32724: PUSH
32725: LD_INT 0
32727: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32728: LD_VAR 0 1
32732: PPUSH
32733: CALL_OW 264
32737: PUSH
32738: LD_EXP 43
32742: EQUAL
32743: NOT
32744: IFFALSE 32748
// exit ;
32746: GO 32988
// index := GetElementIndex ( minersList , unit ) ;
32748: LD_ADDR_VAR 0 5
32752: PUSH
32753: LD_EXP 122
32757: PPUSH
32758: LD_VAR 0 1
32762: PPUSH
32763: CALL 38972 0 2
32767: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32768: LD_EXP 123
32772: PUSH
32773: LD_VAR 0 5
32777: ARRAY
32778: PUSH
32779: LD_EXP 124
32783: GREATEREQUAL
32784: IFFALSE 32788
// exit ;
32786: GO 32988
// ComMoveXY ( unit , x , y ) ;
32788: LD_VAR 0 1
32792: PPUSH
32793: LD_VAR 0 2
32797: PPUSH
32798: LD_VAR 0 3
32802: PPUSH
32803: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32807: LD_INT 35
32809: PPUSH
32810: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32814: LD_VAR 0 1
32818: PPUSH
32819: LD_VAR 0 2
32823: PPUSH
32824: LD_VAR 0 3
32828: PPUSH
32829: CALL 69744 0 3
32833: NOT
32834: PUSH
32835: LD_VAR 0 1
32839: PPUSH
32840: CALL_OW 314
32844: AND
32845: IFFALSE 32849
// exit ;
32847: GO 32988
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32849: LD_VAR 0 2
32853: PPUSH
32854: LD_VAR 0 3
32858: PPUSH
32859: CALL_OW 428
32863: PUSH
32864: LD_VAR 0 1
32868: EQUAL
32869: PUSH
32870: LD_VAR 0 1
32874: PPUSH
32875: CALL_OW 314
32879: NOT
32880: AND
32881: IFFALSE 32807
// PlaySoundXY ( x , y , PlantMine ) ;
32883: LD_VAR 0 2
32887: PPUSH
32888: LD_VAR 0 3
32892: PPUSH
32893: LD_STRING PlantMine
32895: PPUSH
32896: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32900: LD_VAR 0 2
32904: PPUSH
32905: LD_VAR 0 3
32909: PPUSH
32910: LD_VAR 0 1
32914: PPUSH
32915: CALL_OW 255
32919: PPUSH
32920: LD_INT 0
32922: PPUSH
32923: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32927: LD_ADDR_EXP 123
32931: PUSH
32932: LD_EXP 123
32936: PPUSH
32937: LD_VAR 0 5
32941: PUSH
32942: LD_EXP 123
32946: PUSH
32947: LD_VAR 0 5
32951: ARRAY
32952: PUSH
32953: LD_INT 1
32955: PLUS
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PPUSH
32961: LD_VAR 0 2
32965: PUSH
32966: LD_VAR 0 3
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PPUSH
32975: CALL 39187 0 3
32979: ST_TO_ADDR
// result := true ;
32980: LD_ADDR_VAR 0 4
32984: PUSH
32985: LD_INT 1
32987: ST_TO_ADDR
// end ;
32988: LD_VAR 0 4
32992: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32993: LD_INT 0
32995: PPUSH
32996: PPUSH
32997: PPUSH
// if not unit in minersList then
32998: LD_VAR 0 1
33002: PUSH
33003: LD_EXP 122
33007: IN
33008: NOT
33009: IFFALSE 33013
// exit ;
33011: GO 33405
// index := GetElementIndex ( minersList , unit ) ;
33013: LD_ADDR_VAR 0 6
33017: PUSH
33018: LD_EXP 122
33022: PPUSH
33023: LD_VAR 0 1
33027: PPUSH
33028: CALL 38972 0 2
33032: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33033: LD_ADDR_VAR 0 5
33037: PUSH
33038: DOUBLE
33039: LD_EXP 123
33043: PUSH
33044: LD_VAR 0 6
33048: ARRAY
33049: INC
33050: ST_TO_ADDR
33051: LD_INT 1
33053: PUSH
33054: FOR_DOWNTO
33055: IFFALSE 33216
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33057: LD_EXP 123
33061: PUSH
33062: LD_VAR 0 6
33066: ARRAY
33067: PUSH
33068: LD_VAR 0 5
33072: ARRAY
33073: PUSH
33074: LD_INT 1
33076: ARRAY
33077: PUSH
33078: LD_VAR 0 2
33082: EQUAL
33083: PUSH
33084: LD_EXP 123
33088: PUSH
33089: LD_VAR 0 6
33093: ARRAY
33094: PUSH
33095: LD_VAR 0 5
33099: ARRAY
33100: PUSH
33101: LD_INT 2
33103: ARRAY
33104: PUSH
33105: LD_VAR 0 3
33109: EQUAL
33110: AND
33111: IFFALSE 33214
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33113: LD_EXP 123
33117: PUSH
33118: LD_VAR 0 6
33122: ARRAY
33123: PUSH
33124: LD_VAR 0 5
33128: ARRAY
33129: PUSH
33130: LD_INT 1
33132: ARRAY
33133: PPUSH
33134: LD_EXP 123
33138: PUSH
33139: LD_VAR 0 6
33143: ARRAY
33144: PUSH
33145: LD_VAR 0 5
33149: ARRAY
33150: PUSH
33151: LD_INT 2
33153: ARRAY
33154: PPUSH
33155: LD_VAR 0 1
33159: PPUSH
33160: CALL_OW 255
33164: PPUSH
33165: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33169: LD_ADDR_EXP 123
33173: PUSH
33174: LD_EXP 123
33178: PPUSH
33179: LD_VAR 0 6
33183: PPUSH
33184: LD_EXP 123
33188: PUSH
33189: LD_VAR 0 6
33193: ARRAY
33194: PPUSH
33195: LD_VAR 0 5
33199: PPUSH
33200: CALL_OW 3
33204: PPUSH
33205: CALL_OW 1
33209: ST_TO_ADDR
// exit ;
33210: POP
33211: POP
33212: GO 33405
// end ; end ;
33214: GO 33054
33216: POP
33217: POP
// for i := minerMinesList [ index ] downto 1 do
33218: LD_ADDR_VAR 0 5
33222: PUSH
33223: DOUBLE
33224: LD_EXP 123
33228: PUSH
33229: LD_VAR 0 6
33233: ARRAY
33234: INC
33235: ST_TO_ADDR
33236: LD_INT 1
33238: PUSH
33239: FOR_DOWNTO
33240: IFFALSE 33403
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33242: LD_EXP 123
33246: PUSH
33247: LD_VAR 0 6
33251: ARRAY
33252: PUSH
33253: LD_VAR 0 5
33257: ARRAY
33258: PUSH
33259: LD_INT 1
33261: ARRAY
33262: PPUSH
33263: LD_EXP 123
33267: PUSH
33268: LD_VAR 0 6
33272: ARRAY
33273: PUSH
33274: LD_VAR 0 5
33278: ARRAY
33279: PUSH
33280: LD_INT 2
33282: ARRAY
33283: PPUSH
33284: LD_VAR 0 2
33288: PPUSH
33289: LD_VAR 0 3
33293: PPUSH
33294: CALL_OW 298
33298: PUSH
33299: LD_INT 6
33301: LESS
33302: IFFALSE 33401
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33304: LD_EXP 123
33308: PUSH
33309: LD_VAR 0 6
33313: ARRAY
33314: PUSH
33315: LD_VAR 0 5
33319: ARRAY
33320: PUSH
33321: LD_INT 1
33323: ARRAY
33324: PPUSH
33325: LD_EXP 123
33329: PUSH
33330: LD_VAR 0 6
33334: ARRAY
33335: PUSH
33336: LD_VAR 0 5
33340: ARRAY
33341: PUSH
33342: LD_INT 2
33344: ARRAY
33345: PPUSH
33346: LD_VAR 0 1
33350: PPUSH
33351: CALL_OW 255
33355: PPUSH
33356: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33360: LD_ADDR_EXP 123
33364: PUSH
33365: LD_EXP 123
33369: PPUSH
33370: LD_VAR 0 6
33374: PPUSH
33375: LD_EXP 123
33379: PUSH
33380: LD_VAR 0 6
33384: ARRAY
33385: PPUSH
33386: LD_VAR 0 5
33390: PPUSH
33391: CALL_OW 3
33395: PPUSH
33396: CALL_OW 1
33400: ST_TO_ADDR
// end ; end ;
33401: GO 33239
33403: POP
33404: POP
// end ;
33405: LD_VAR 0 4
33409: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33410: LD_INT 0
33412: PPUSH
33413: PPUSH
33414: PPUSH
33415: PPUSH
33416: PPUSH
33417: PPUSH
33418: PPUSH
33419: PPUSH
33420: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33421: LD_VAR 0 1
33425: PPUSH
33426: CALL_OW 264
33430: PUSH
33431: LD_EXP 43
33435: EQUAL
33436: NOT
33437: PUSH
33438: LD_VAR 0 1
33442: PUSH
33443: LD_EXP 122
33447: IN
33448: NOT
33449: OR
33450: IFFALSE 33454
// exit ;
33452: GO 33776
// index := GetElementIndex ( minersList , unit ) ;
33454: LD_ADDR_VAR 0 6
33458: PUSH
33459: LD_EXP 122
33463: PPUSH
33464: LD_VAR 0 1
33468: PPUSH
33469: CALL 38972 0 2
33473: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33474: LD_ADDR_VAR 0 8
33478: PUSH
33479: LD_EXP 124
33483: PUSH
33484: LD_EXP 123
33488: PUSH
33489: LD_VAR 0 6
33493: ARRAY
33494: MINUS
33495: ST_TO_ADDR
// if not minesFreeAmount then
33496: LD_VAR 0 8
33500: NOT
33501: IFFALSE 33505
// exit ;
33503: GO 33776
// tmp := [ ] ;
33505: LD_ADDR_VAR 0 7
33509: PUSH
33510: EMPTY
33511: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33512: LD_ADDR_VAR 0 5
33516: PUSH
33517: DOUBLE
33518: LD_INT 1
33520: DEC
33521: ST_TO_ADDR
33522: LD_VAR 0 8
33526: PUSH
33527: FOR_TO
33528: IFFALSE 33723
// begin _d := rand ( 0 , 5 ) ;
33530: LD_ADDR_VAR 0 11
33534: PUSH
33535: LD_INT 0
33537: PPUSH
33538: LD_INT 5
33540: PPUSH
33541: CALL_OW 12
33545: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33546: LD_ADDR_VAR 0 12
33550: PUSH
33551: LD_INT 2
33553: PPUSH
33554: LD_INT 6
33556: PPUSH
33557: CALL_OW 12
33561: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33562: LD_ADDR_VAR 0 9
33566: PUSH
33567: LD_VAR 0 2
33571: PPUSH
33572: LD_VAR 0 11
33576: PPUSH
33577: LD_VAR 0 12
33581: PPUSH
33582: CALL_OW 272
33586: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33587: LD_ADDR_VAR 0 10
33591: PUSH
33592: LD_VAR 0 3
33596: PPUSH
33597: LD_VAR 0 11
33601: PPUSH
33602: LD_VAR 0 12
33606: PPUSH
33607: CALL_OW 273
33611: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33612: LD_VAR 0 9
33616: PPUSH
33617: LD_VAR 0 10
33621: PPUSH
33622: CALL_OW 488
33626: PUSH
33627: LD_VAR 0 9
33631: PUSH
33632: LD_VAR 0 10
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_VAR 0 7
33645: IN
33646: NOT
33647: AND
33648: PUSH
33649: LD_VAR 0 9
33653: PPUSH
33654: LD_VAR 0 10
33658: PPUSH
33659: CALL_OW 458
33663: NOT
33664: AND
33665: IFFALSE 33707
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33667: LD_ADDR_VAR 0 7
33671: PUSH
33672: LD_VAR 0 7
33676: PPUSH
33677: LD_VAR 0 7
33681: PUSH
33682: LD_INT 1
33684: PLUS
33685: PPUSH
33686: LD_VAR 0 9
33690: PUSH
33691: LD_VAR 0 10
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PPUSH
33700: CALL_OW 1
33704: ST_TO_ADDR
33705: GO 33721
// i := i - 1 ;
33707: LD_ADDR_VAR 0 5
33711: PUSH
33712: LD_VAR 0 5
33716: PUSH
33717: LD_INT 1
33719: MINUS
33720: ST_TO_ADDR
// end ;
33721: GO 33527
33723: POP
33724: POP
// for i in tmp do
33725: LD_ADDR_VAR 0 5
33729: PUSH
33730: LD_VAR 0 7
33734: PUSH
33735: FOR_IN
33736: IFFALSE 33774
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33738: LD_VAR 0 1
33742: PPUSH
33743: LD_VAR 0 5
33747: PUSH
33748: LD_INT 1
33750: ARRAY
33751: PPUSH
33752: LD_VAR 0 5
33756: PUSH
33757: LD_INT 2
33759: ARRAY
33760: PPUSH
33761: CALL 32716 0 3
33765: NOT
33766: IFFALSE 33772
// exit ;
33768: POP
33769: POP
33770: GO 33776
33772: GO 33735
33774: POP
33775: POP
// end ;
33776: LD_VAR 0 4
33780: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33781: LD_INT 0
33783: PPUSH
33784: PPUSH
33785: PPUSH
33786: PPUSH
33787: PPUSH
33788: PPUSH
33789: PPUSH
// if not GetClass ( unit ) = class_sniper then
33790: LD_VAR 0 1
33794: PPUSH
33795: CALL_OW 257
33799: PUSH
33800: LD_INT 5
33802: EQUAL
33803: NOT
33804: IFFALSE 33808
// exit ;
33806: GO 34196
// dist := 8 ;
33808: LD_ADDR_VAR 0 5
33812: PUSH
33813: LD_INT 8
33815: ST_TO_ADDR
// viewRange := 12 ;
33816: LD_ADDR_VAR 0 7
33820: PUSH
33821: LD_INT 12
33823: ST_TO_ADDR
// side := GetSide ( unit ) ;
33824: LD_ADDR_VAR 0 6
33828: PUSH
33829: LD_VAR 0 1
33833: PPUSH
33834: CALL_OW 255
33838: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33839: LD_INT 61
33841: PPUSH
33842: LD_VAR 0 6
33846: PPUSH
33847: CALL_OW 321
33851: PUSH
33852: LD_INT 2
33854: EQUAL
33855: IFFALSE 33865
// viewRange := 16 ;
33857: LD_ADDR_VAR 0 7
33861: PUSH
33862: LD_INT 16
33864: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33865: LD_VAR 0 1
33869: PPUSH
33870: LD_VAR 0 2
33874: PPUSH
33875: LD_VAR 0 3
33879: PPUSH
33880: CALL_OW 297
33884: PUSH
33885: LD_VAR 0 5
33889: GREATER
33890: IFFALSE 33969
// begin ComMoveXY ( unit , x , y ) ;
33892: LD_VAR 0 1
33896: PPUSH
33897: LD_VAR 0 2
33901: PPUSH
33902: LD_VAR 0 3
33906: PPUSH
33907: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33911: LD_INT 35
33913: PPUSH
33914: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33918: LD_VAR 0 1
33922: PPUSH
33923: LD_VAR 0 2
33927: PPUSH
33928: LD_VAR 0 3
33932: PPUSH
33933: CALL 69744 0 3
33937: NOT
33938: IFFALSE 33942
// exit ;
33940: GO 34196
// until GetDistUnitXY ( unit , x , y ) < dist ;
33942: LD_VAR 0 1
33946: PPUSH
33947: LD_VAR 0 2
33951: PPUSH
33952: LD_VAR 0 3
33956: PPUSH
33957: CALL_OW 297
33961: PUSH
33962: LD_VAR 0 5
33966: LESS
33967: IFFALSE 33911
// end ; ComTurnXY ( unit , x , y ) ;
33969: LD_VAR 0 1
33973: PPUSH
33974: LD_VAR 0 2
33978: PPUSH
33979: LD_VAR 0 3
33983: PPUSH
33984: CALL_OW 118
// wait ( 5 ) ;
33988: LD_INT 5
33990: PPUSH
33991: CALL_OW 67
// _d := GetDir ( unit ) ;
33995: LD_ADDR_VAR 0 10
33999: PUSH
34000: LD_VAR 0 1
34004: PPUSH
34005: CALL_OW 254
34009: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34010: LD_ADDR_VAR 0 8
34014: PUSH
34015: LD_VAR 0 1
34019: PPUSH
34020: CALL_OW 250
34024: PPUSH
34025: LD_VAR 0 10
34029: PPUSH
34030: LD_VAR 0 5
34034: PPUSH
34035: CALL_OW 272
34039: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34040: LD_ADDR_VAR 0 9
34044: PUSH
34045: LD_VAR 0 1
34049: PPUSH
34050: CALL_OW 251
34054: PPUSH
34055: LD_VAR 0 10
34059: PPUSH
34060: LD_VAR 0 5
34064: PPUSH
34065: CALL_OW 273
34069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34070: LD_VAR 0 8
34074: PPUSH
34075: LD_VAR 0 9
34079: PPUSH
34080: CALL_OW 488
34084: NOT
34085: IFFALSE 34089
// exit ;
34087: GO 34196
// ComAnimCustom ( unit , 1 ) ;
34089: LD_VAR 0 1
34093: PPUSH
34094: LD_INT 1
34096: PPUSH
34097: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34101: LD_VAR 0 8
34105: PPUSH
34106: LD_VAR 0 9
34110: PPUSH
34111: LD_VAR 0 6
34115: PPUSH
34116: LD_VAR 0 7
34120: PPUSH
34121: CALL_OW 330
// repeat wait ( 1 ) ;
34125: LD_INT 1
34127: PPUSH
34128: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34132: LD_VAR 0 1
34136: PPUSH
34137: CALL_OW 316
34141: PUSH
34142: LD_VAR 0 1
34146: PPUSH
34147: CALL_OW 314
34151: OR
34152: PUSH
34153: LD_VAR 0 1
34157: PPUSH
34158: CALL_OW 302
34162: NOT
34163: OR
34164: PUSH
34165: LD_VAR 0 1
34169: PPUSH
34170: CALL_OW 301
34174: OR
34175: IFFALSE 34125
// RemoveSeeing ( _x , _y , side ) ;
34177: LD_VAR 0 8
34181: PPUSH
34182: LD_VAR 0 9
34186: PPUSH
34187: LD_VAR 0 6
34191: PPUSH
34192: CALL_OW 331
// end ; end_of_file
34196: LD_VAR 0 4
34200: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34201: LD_INT 0
34203: PPUSH
34204: PPUSH
// if exist_mode then
34205: LD_VAR 0 2
34209: IFFALSE 34234
// unit := CreateCharacter ( prefix & ident ) else
34211: LD_ADDR_VAR 0 5
34215: PUSH
34216: LD_VAR 0 3
34220: PUSH
34221: LD_VAR 0 1
34225: STR
34226: PPUSH
34227: CALL_OW 34
34231: ST_TO_ADDR
34232: GO 34249
// unit := NewCharacter ( ident ) ;
34234: LD_ADDR_VAR 0 5
34238: PUSH
34239: LD_VAR 0 1
34243: PPUSH
34244: CALL_OW 25
34248: ST_TO_ADDR
// result := unit ;
34249: LD_ADDR_VAR 0 4
34253: PUSH
34254: LD_VAR 0 5
34258: ST_TO_ADDR
// end ;
34259: LD_VAR 0 4
34263: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34264: LD_INT 0
34266: PPUSH
34267: PPUSH
// if not side or not nation then
34268: LD_VAR 0 1
34272: NOT
34273: PUSH
34274: LD_VAR 0 2
34278: NOT
34279: OR
34280: IFFALSE 34284
// exit ;
34282: GO 35052
// case nation of nation_american :
34284: LD_VAR 0 2
34288: PUSH
34289: LD_INT 1
34291: DOUBLE
34292: EQUAL
34293: IFTRUE 34297
34295: GO 34511
34297: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34298: LD_ADDR_VAR 0 4
34302: PUSH
34303: LD_INT 35
34305: PUSH
34306: LD_INT 45
34308: PUSH
34309: LD_INT 46
34311: PUSH
34312: LD_INT 47
34314: PUSH
34315: LD_INT 82
34317: PUSH
34318: LD_INT 83
34320: PUSH
34321: LD_INT 84
34323: PUSH
34324: LD_INT 85
34326: PUSH
34327: LD_INT 86
34329: PUSH
34330: LD_INT 1
34332: PUSH
34333: LD_INT 2
34335: PUSH
34336: LD_INT 6
34338: PUSH
34339: LD_INT 15
34341: PUSH
34342: LD_INT 16
34344: PUSH
34345: LD_INT 7
34347: PUSH
34348: LD_INT 12
34350: PUSH
34351: LD_INT 13
34353: PUSH
34354: LD_INT 10
34356: PUSH
34357: LD_INT 14
34359: PUSH
34360: LD_INT 20
34362: PUSH
34363: LD_INT 21
34365: PUSH
34366: LD_INT 22
34368: PUSH
34369: LD_INT 25
34371: PUSH
34372: LD_INT 32
34374: PUSH
34375: LD_INT 27
34377: PUSH
34378: LD_INT 36
34380: PUSH
34381: LD_INT 69
34383: PUSH
34384: LD_INT 39
34386: PUSH
34387: LD_INT 34
34389: PUSH
34390: LD_INT 40
34392: PUSH
34393: LD_INT 48
34395: PUSH
34396: LD_INT 49
34398: PUSH
34399: LD_INT 50
34401: PUSH
34402: LD_INT 51
34404: PUSH
34405: LD_INT 52
34407: PUSH
34408: LD_INT 53
34410: PUSH
34411: LD_INT 54
34413: PUSH
34414: LD_INT 55
34416: PUSH
34417: LD_INT 56
34419: PUSH
34420: LD_INT 57
34422: PUSH
34423: LD_INT 58
34425: PUSH
34426: LD_INT 59
34428: PUSH
34429: LD_INT 60
34431: PUSH
34432: LD_INT 61
34434: PUSH
34435: LD_INT 62
34437: PUSH
34438: LD_INT 80
34440: PUSH
34441: LD_INT 82
34443: PUSH
34444: LD_INT 83
34446: PUSH
34447: LD_INT 84
34449: PUSH
34450: LD_INT 85
34452: PUSH
34453: LD_INT 86
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: ST_TO_ADDR
34509: GO 34976
34511: LD_INT 2
34513: DOUBLE
34514: EQUAL
34515: IFTRUE 34519
34517: GO 34745
34519: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34520: LD_ADDR_VAR 0 4
34524: PUSH
34525: LD_INT 35
34527: PUSH
34528: LD_INT 45
34530: PUSH
34531: LD_INT 46
34533: PUSH
34534: LD_INT 47
34536: PUSH
34537: LD_INT 82
34539: PUSH
34540: LD_INT 83
34542: PUSH
34543: LD_INT 84
34545: PUSH
34546: LD_INT 85
34548: PUSH
34549: LD_INT 87
34551: PUSH
34552: LD_INT 70
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: LD_INT 11
34560: PUSH
34561: LD_INT 3
34563: PUSH
34564: LD_INT 4
34566: PUSH
34567: LD_INT 5
34569: PUSH
34570: LD_INT 6
34572: PUSH
34573: LD_INT 15
34575: PUSH
34576: LD_INT 18
34578: PUSH
34579: LD_INT 7
34581: PUSH
34582: LD_INT 17
34584: PUSH
34585: LD_INT 8
34587: PUSH
34588: LD_INT 20
34590: PUSH
34591: LD_INT 21
34593: PUSH
34594: LD_INT 22
34596: PUSH
34597: LD_INT 72
34599: PUSH
34600: LD_INT 26
34602: PUSH
34603: LD_INT 69
34605: PUSH
34606: LD_INT 39
34608: PUSH
34609: LD_INT 40
34611: PUSH
34612: LD_INT 41
34614: PUSH
34615: LD_INT 42
34617: PUSH
34618: LD_INT 43
34620: PUSH
34621: LD_INT 48
34623: PUSH
34624: LD_INT 49
34626: PUSH
34627: LD_INT 50
34629: PUSH
34630: LD_INT 51
34632: PUSH
34633: LD_INT 52
34635: PUSH
34636: LD_INT 53
34638: PUSH
34639: LD_INT 54
34641: PUSH
34642: LD_INT 55
34644: PUSH
34645: LD_INT 56
34647: PUSH
34648: LD_INT 60
34650: PUSH
34651: LD_INT 61
34653: PUSH
34654: LD_INT 62
34656: PUSH
34657: LD_INT 66
34659: PUSH
34660: LD_INT 67
34662: PUSH
34663: LD_INT 68
34665: PUSH
34666: LD_INT 81
34668: PUSH
34669: LD_INT 82
34671: PUSH
34672: LD_INT 83
34674: PUSH
34675: LD_INT 84
34677: PUSH
34678: LD_INT 85
34680: PUSH
34681: LD_INT 87
34683: PUSH
34684: LD_INT 88
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: ST_TO_ADDR
34743: GO 34976
34745: LD_INT 3
34747: DOUBLE
34748: EQUAL
34749: IFTRUE 34753
34751: GO 34975
34753: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34754: LD_ADDR_VAR 0 4
34758: PUSH
34759: LD_INT 46
34761: PUSH
34762: LD_INT 47
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 2
34770: PUSH
34771: LD_INT 82
34773: PUSH
34774: LD_INT 83
34776: PUSH
34777: LD_INT 84
34779: PUSH
34780: LD_INT 85
34782: PUSH
34783: LD_INT 86
34785: PUSH
34786: LD_INT 11
34788: PUSH
34789: LD_INT 9
34791: PUSH
34792: LD_INT 20
34794: PUSH
34795: LD_INT 19
34797: PUSH
34798: LD_INT 21
34800: PUSH
34801: LD_INT 24
34803: PUSH
34804: LD_INT 22
34806: PUSH
34807: LD_INT 25
34809: PUSH
34810: LD_INT 28
34812: PUSH
34813: LD_INT 29
34815: PUSH
34816: LD_INT 30
34818: PUSH
34819: LD_INT 31
34821: PUSH
34822: LD_INT 37
34824: PUSH
34825: LD_INT 38
34827: PUSH
34828: LD_INT 32
34830: PUSH
34831: LD_INT 27
34833: PUSH
34834: LD_INT 33
34836: PUSH
34837: LD_INT 69
34839: PUSH
34840: LD_INT 39
34842: PUSH
34843: LD_INT 34
34845: PUSH
34846: LD_INT 40
34848: PUSH
34849: LD_INT 71
34851: PUSH
34852: LD_INT 23
34854: PUSH
34855: LD_INT 44
34857: PUSH
34858: LD_INT 48
34860: PUSH
34861: LD_INT 49
34863: PUSH
34864: LD_INT 50
34866: PUSH
34867: LD_INT 51
34869: PUSH
34870: LD_INT 52
34872: PUSH
34873: LD_INT 53
34875: PUSH
34876: LD_INT 54
34878: PUSH
34879: LD_INT 55
34881: PUSH
34882: LD_INT 56
34884: PUSH
34885: LD_INT 57
34887: PUSH
34888: LD_INT 58
34890: PUSH
34891: LD_INT 59
34893: PUSH
34894: LD_INT 63
34896: PUSH
34897: LD_INT 64
34899: PUSH
34900: LD_INT 65
34902: PUSH
34903: LD_INT 82
34905: PUSH
34906: LD_INT 83
34908: PUSH
34909: LD_INT 84
34911: PUSH
34912: LD_INT 85
34914: PUSH
34915: LD_INT 86
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: ST_TO_ADDR
34973: GO 34976
34975: POP
// if state > - 1 and state < 3 then
34976: LD_VAR 0 3
34980: PUSH
34981: LD_INT 1
34983: NEG
34984: GREATER
34985: PUSH
34986: LD_VAR 0 3
34990: PUSH
34991: LD_INT 3
34993: LESS
34994: AND
34995: IFFALSE 35052
// for i in result do
34997: LD_ADDR_VAR 0 5
35001: PUSH
35002: LD_VAR 0 4
35006: PUSH
35007: FOR_IN
35008: IFFALSE 35050
// if GetTech ( i , side ) <> state then
35010: LD_VAR 0 5
35014: PPUSH
35015: LD_VAR 0 1
35019: PPUSH
35020: CALL_OW 321
35024: PUSH
35025: LD_VAR 0 3
35029: NONEQUAL
35030: IFFALSE 35048
// result := result diff i ;
35032: LD_ADDR_VAR 0 4
35036: PUSH
35037: LD_VAR 0 4
35041: PUSH
35042: LD_VAR 0 5
35046: DIFF
35047: ST_TO_ADDR
35048: GO 35007
35050: POP
35051: POP
// end ;
35052: LD_VAR 0 4
35056: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35057: LD_INT 0
35059: PPUSH
35060: PPUSH
35061: PPUSH
// result := true ;
35062: LD_ADDR_VAR 0 3
35066: PUSH
35067: LD_INT 1
35069: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35070: LD_ADDR_VAR 0 5
35074: PUSH
35075: LD_VAR 0 2
35079: PPUSH
35080: CALL_OW 480
35084: ST_TO_ADDR
// if not tmp then
35085: LD_VAR 0 5
35089: NOT
35090: IFFALSE 35094
// exit ;
35092: GO 35143
// for i in tmp do
35094: LD_ADDR_VAR 0 4
35098: PUSH
35099: LD_VAR 0 5
35103: PUSH
35104: FOR_IN
35105: IFFALSE 35141
// if GetTech ( i , side ) <> state_researched then
35107: LD_VAR 0 4
35111: PPUSH
35112: LD_VAR 0 1
35116: PPUSH
35117: CALL_OW 321
35121: PUSH
35122: LD_INT 2
35124: NONEQUAL
35125: IFFALSE 35139
// begin result := false ;
35127: LD_ADDR_VAR 0 3
35131: PUSH
35132: LD_INT 0
35134: ST_TO_ADDR
// exit ;
35135: POP
35136: POP
35137: GO 35143
// end ;
35139: GO 35104
35141: POP
35142: POP
// end ;
35143: LD_VAR 0 3
35147: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35148: LD_INT 0
35150: PPUSH
35151: PPUSH
35152: PPUSH
35153: PPUSH
35154: PPUSH
35155: PPUSH
35156: PPUSH
35157: PPUSH
35158: PPUSH
35159: PPUSH
35160: PPUSH
35161: PPUSH
35162: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35163: LD_VAR 0 1
35167: NOT
35168: PUSH
35169: LD_VAR 0 1
35173: PPUSH
35174: CALL_OW 257
35178: PUSH
35179: LD_INT 9
35181: NONEQUAL
35182: OR
35183: IFFALSE 35187
// exit ;
35185: GO 35760
// side := GetSide ( unit ) ;
35187: LD_ADDR_VAR 0 9
35191: PUSH
35192: LD_VAR 0 1
35196: PPUSH
35197: CALL_OW 255
35201: ST_TO_ADDR
// tech_space := tech_spacanom ;
35202: LD_ADDR_VAR 0 12
35206: PUSH
35207: LD_INT 29
35209: ST_TO_ADDR
// tech_time := tech_taurad ;
35210: LD_ADDR_VAR 0 13
35214: PUSH
35215: LD_INT 28
35217: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35218: LD_ADDR_VAR 0 11
35222: PUSH
35223: LD_VAR 0 1
35227: PPUSH
35228: CALL_OW 310
35232: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35233: LD_VAR 0 11
35237: PPUSH
35238: CALL_OW 247
35242: PUSH
35243: LD_INT 2
35245: EQUAL
35246: IFFALSE 35250
// exit ;
35248: GO 35760
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35250: LD_ADDR_VAR 0 8
35254: PUSH
35255: LD_INT 81
35257: PUSH
35258: LD_VAR 0 9
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 3
35269: PUSH
35270: LD_INT 21
35272: PUSH
35273: LD_INT 3
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PPUSH
35288: CALL_OW 69
35292: ST_TO_ADDR
// if not tmp then
35293: LD_VAR 0 8
35297: NOT
35298: IFFALSE 35302
// exit ;
35300: GO 35760
// if in_unit then
35302: LD_VAR 0 11
35306: IFFALSE 35330
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35308: LD_ADDR_VAR 0 10
35312: PUSH
35313: LD_VAR 0 8
35317: PPUSH
35318: LD_VAR 0 11
35322: PPUSH
35323: CALL_OW 74
35327: ST_TO_ADDR
35328: GO 35350
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35330: LD_ADDR_VAR 0 10
35334: PUSH
35335: LD_VAR 0 8
35339: PPUSH
35340: LD_VAR 0 1
35344: PPUSH
35345: CALL_OW 74
35349: ST_TO_ADDR
// if not enemy then
35350: LD_VAR 0 10
35354: NOT
35355: IFFALSE 35359
// exit ;
35357: GO 35760
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35359: LD_VAR 0 11
35363: PUSH
35364: LD_VAR 0 11
35368: PPUSH
35369: LD_VAR 0 10
35373: PPUSH
35374: CALL_OW 296
35378: PUSH
35379: LD_INT 13
35381: GREATER
35382: AND
35383: PUSH
35384: LD_VAR 0 1
35388: PPUSH
35389: LD_VAR 0 10
35393: PPUSH
35394: CALL_OW 296
35398: PUSH
35399: LD_INT 12
35401: GREATER
35402: OR
35403: IFFALSE 35407
// exit ;
35405: GO 35760
// missile := [ 1 ] ;
35407: LD_ADDR_VAR 0 14
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: EMPTY
35416: LIST
35417: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35418: LD_VAR 0 9
35422: PPUSH
35423: LD_VAR 0 12
35427: PPUSH
35428: CALL_OW 325
35432: IFFALSE 35461
// missile := Insert ( missile , missile + 1 , 2 ) ;
35434: LD_ADDR_VAR 0 14
35438: PUSH
35439: LD_VAR 0 14
35443: PPUSH
35444: LD_VAR 0 14
35448: PUSH
35449: LD_INT 1
35451: PLUS
35452: PPUSH
35453: LD_INT 2
35455: PPUSH
35456: CALL_OW 2
35460: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35461: LD_VAR 0 9
35465: PPUSH
35466: LD_VAR 0 13
35470: PPUSH
35471: CALL_OW 325
35475: PUSH
35476: LD_VAR 0 10
35480: PPUSH
35481: CALL_OW 255
35485: PPUSH
35486: LD_VAR 0 13
35490: PPUSH
35491: CALL_OW 325
35495: NOT
35496: AND
35497: IFFALSE 35526
// missile := Insert ( missile , missile + 1 , 3 ) ;
35499: LD_ADDR_VAR 0 14
35503: PUSH
35504: LD_VAR 0 14
35508: PPUSH
35509: LD_VAR 0 14
35513: PUSH
35514: LD_INT 1
35516: PLUS
35517: PPUSH
35518: LD_INT 3
35520: PPUSH
35521: CALL_OW 2
35525: ST_TO_ADDR
// if missile < 2 then
35526: LD_VAR 0 14
35530: PUSH
35531: LD_INT 2
35533: LESS
35534: IFFALSE 35538
// exit ;
35536: GO 35760
// x := GetX ( enemy ) ;
35538: LD_ADDR_VAR 0 4
35542: PUSH
35543: LD_VAR 0 10
35547: PPUSH
35548: CALL_OW 250
35552: ST_TO_ADDR
// y := GetY ( enemy ) ;
35553: LD_ADDR_VAR 0 5
35557: PUSH
35558: LD_VAR 0 10
35562: PPUSH
35563: CALL_OW 251
35567: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35568: LD_ADDR_VAR 0 6
35572: PUSH
35573: LD_VAR 0 4
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PPUSH
35582: LD_INT 1
35584: PPUSH
35585: CALL_OW 12
35589: PLUS
35590: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35591: LD_ADDR_VAR 0 7
35595: PUSH
35596: LD_VAR 0 5
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PPUSH
35605: LD_INT 1
35607: PPUSH
35608: CALL_OW 12
35612: PLUS
35613: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35614: LD_VAR 0 6
35618: PPUSH
35619: LD_VAR 0 7
35623: PPUSH
35624: CALL_OW 488
35628: NOT
35629: IFFALSE 35651
// begin _x := x ;
35631: LD_ADDR_VAR 0 6
35635: PUSH
35636: LD_VAR 0 4
35640: ST_TO_ADDR
// _y := y ;
35641: LD_ADDR_VAR 0 7
35645: PUSH
35646: LD_VAR 0 5
35650: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35651: LD_ADDR_VAR 0 3
35655: PUSH
35656: LD_INT 1
35658: PPUSH
35659: LD_VAR 0 14
35663: PPUSH
35664: CALL_OW 12
35668: ST_TO_ADDR
// case i of 1 :
35669: LD_VAR 0 3
35673: PUSH
35674: LD_INT 1
35676: DOUBLE
35677: EQUAL
35678: IFTRUE 35682
35680: GO 35699
35682: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35683: LD_VAR 0 1
35687: PPUSH
35688: LD_VAR 0 10
35692: PPUSH
35693: CALL_OW 115
35697: GO 35760
35699: LD_INT 2
35701: DOUBLE
35702: EQUAL
35703: IFTRUE 35707
35705: GO 35729
35707: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35708: LD_VAR 0 1
35712: PPUSH
35713: LD_VAR 0 6
35717: PPUSH
35718: LD_VAR 0 7
35722: PPUSH
35723: CALL_OW 153
35727: GO 35760
35729: LD_INT 3
35731: DOUBLE
35732: EQUAL
35733: IFTRUE 35737
35735: GO 35759
35737: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35738: LD_VAR 0 1
35742: PPUSH
35743: LD_VAR 0 6
35747: PPUSH
35748: LD_VAR 0 7
35752: PPUSH
35753: CALL_OW 154
35757: GO 35760
35759: POP
// end ;
35760: LD_VAR 0 2
35764: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35765: LD_INT 0
35767: PPUSH
35768: PPUSH
35769: PPUSH
35770: PPUSH
35771: PPUSH
35772: PPUSH
// if not unit or not building then
35773: LD_VAR 0 1
35777: NOT
35778: PUSH
35779: LD_VAR 0 2
35783: NOT
35784: OR
35785: IFFALSE 35789
// exit ;
35787: GO 35947
// x := GetX ( building ) ;
35789: LD_ADDR_VAR 0 5
35793: PUSH
35794: LD_VAR 0 2
35798: PPUSH
35799: CALL_OW 250
35803: ST_TO_ADDR
// y := GetY ( building ) ;
35804: LD_ADDR_VAR 0 6
35808: PUSH
35809: LD_VAR 0 2
35813: PPUSH
35814: CALL_OW 251
35818: ST_TO_ADDR
// for i = 0 to 5 do
35819: LD_ADDR_VAR 0 4
35823: PUSH
35824: DOUBLE
35825: LD_INT 0
35827: DEC
35828: ST_TO_ADDR
35829: LD_INT 5
35831: PUSH
35832: FOR_TO
35833: IFFALSE 35945
// begin _x := ShiftX ( x , i , 3 ) ;
35835: LD_ADDR_VAR 0 7
35839: PUSH
35840: LD_VAR 0 5
35844: PPUSH
35845: LD_VAR 0 4
35849: PPUSH
35850: LD_INT 3
35852: PPUSH
35853: CALL_OW 272
35857: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35858: LD_ADDR_VAR 0 8
35862: PUSH
35863: LD_VAR 0 6
35867: PPUSH
35868: LD_VAR 0 4
35872: PPUSH
35873: LD_INT 3
35875: PPUSH
35876: CALL_OW 273
35880: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35881: LD_VAR 0 7
35885: PPUSH
35886: LD_VAR 0 8
35890: PPUSH
35891: CALL_OW 488
35895: NOT
35896: IFFALSE 35900
// continue ;
35898: GO 35832
// if HexInfo ( _x , _y ) = 0 then
35900: LD_VAR 0 7
35904: PPUSH
35905: LD_VAR 0 8
35909: PPUSH
35910: CALL_OW 428
35914: PUSH
35915: LD_INT 0
35917: EQUAL
35918: IFFALSE 35943
// begin ComMoveXY ( unit , _x , _y ) ;
35920: LD_VAR 0 1
35924: PPUSH
35925: LD_VAR 0 7
35929: PPUSH
35930: LD_VAR 0 8
35934: PPUSH
35935: CALL_OW 111
// exit ;
35939: POP
35940: POP
35941: GO 35947
// end ; end ;
35943: GO 35832
35945: POP
35946: POP
// end ;
35947: LD_VAR 0 3
35951: RET
// export function ScanBase ( side , base_area ) ; begin
35952: LD_INT 0
35954: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35955: LD_ADDR_VAR 0 3
35959: PUSH
35960: LD_VAR 0 2
35964: PPUSH
35965: LD_INT 81
35967: PUSH
35968: LD_VAR 0 1
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PPUSH
35977: CALL_OW 70
35981: ST_TO_ADDR
// end ;
35982: LD_VAR 0 3
35986: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35987: LD_INT 0
35989: PPUSH
35990: PPUSH
35991: PPUSH
35992: PPUSH
// result := false ;
35993: LD_ADDR_VAR 0 2
35997: PUSH
35998: LD_INT 0
36000: ST_TO_ADDR
// side := GetSide ( unit ) ;
36001: LD_ADDR_VAR 0 3
36005: PUSH
36006: LD_VAR 0 1
36010: PPUSH
36011: CALL_OW 255
36015: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36016: LD_ADDR_VAR 0 4
36020: PUSH
36021: LD_VAR 0 1
36025: PPUSH
36026: CALL_OW 248
36030: ST_TO_ADDR
// case nat of 1 :
36031: LD_VAR 0 4
36035: PUSH
36036: LD_INT 1
36038: DOUBLE
36039: EQUAL
36040: IFTRUE 36044
36042: GO 36055
36044: POP
// tech := tech_lassight ; 2 :
36045: LD_ADDR_VAR 0 5
36049: PUSH
36050: LD_INT 12
36052: ST_TO_ADDR
36053: GO 36094
36055: LD_INT 2
36057: DOUBLE
36058: EQUAL
36059: IFTRUE 36063
36061: GO 36074
36063: POP
// tech := tech_mortar ; 3 :
36064: LD_ADDR_VAR 0 5
36068: PUSH
36069: LD_INT 41
36071: ST_TO_ADDR
36072: GO 36094
36074: LD_INT 3
36076: DOUBLE
36077: EQUAL
36078: IFTRUE 36082
36080: GO 36093
36082: POP
// tech := tech_bazooka ; end ;
36083: LD_ADDR_VAR 0 5
36087: PUSH
36088: LD_INT 44
36090: ST_TO_ADDR
36091: GO 36094
36093: POP
// if Researched ( side , tech ) then
36094: LD_VAR 0 3
36098: PPUSH
36099: LD_VAR 0 5
36103: PPUSH
36104: CALL_OW 325
36108: IFFALSE 36135
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36110: LD_ADDR_VAR 0 2
36114: PUSH
36115: LD_INT 5
36117: PUSH
36118: LD_INT 8
36120: PUSH
36121: LD_INT 9
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: LIST
36128: PUSH
36129: LD_VAR 0 4
36133: ARRAY
36134: ST_TO_ADDR
// end ;
36135: LD_VAR 0 2
36139: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36140: LD_INT 0
36142: PPUSH
36143: PPUSH
36144: PPUSH
// if not mines then
36145: LD_VAR 0 2
36149: NOT
36150: IFFALSE 36154
// exit ;
36152: GO 36298
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36154: LD_ADDR_VAR 0 5
36158: PUSH
36159: LD_INT 81
36161: PUSH
36162: LD_VAR 0 1
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 3
36173: PUSH
36174: LD_INT 21
36176: PUSH
36177: LD_INT 3
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PPUSH
36192: CALL_OW 69
36196: ST_TO_ADDR
// for i in mines do
36197: LD_ADDR_VAR 0 4
36201: PUSH
36202: LD_VAR 0 2
36206: PUSH
36207: FOR_IN
36208: IFFALSE 36296
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36210: LD_VAR 0 4
36214: PUSH
36215: LD_INT 1
36217: ARRAY
36218: PPUSH
36219: LD_VAR 0 4
36223: PUSH
36224: LD_INT 2
36226: ARRAY
36227: PPUSH
36228: CALL_OW 458
36232: NOT
36233: IFFALSE 36237
// continue ;
36235: GO 36207
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36237: LD_VAR 0 4
36241: PUSH
36242: LD_INT 1
36244: ARRAY
36245: PPUSH
36246: LD_VAR 0 4
36250: PUSH
36251: LD_INT 2
36253: ARRAY
36254: PPUSH
36255: CALL_OW 428
36259: PUSH
36260: LD_VAR 0 5
36264: IN
36265: IFFALSE 36294
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36267: LD_VAR 0 4
36271: PUSH
36272: LD_INT 1
36274: ARRAY
36275: PPUSH
36276: LD_VAR 0 4
36280: PUSH
36281: LD_INT 2
36283: ARRAY
36284: PPUSH
36285: LD_VAR 0 1
36289: PPUSH
36290: CALL_OW 456
// end ;
36294: GO 36207
36296: POP
36297: POP
// end ;
36298: LD_VAR 0 3
36302: RET
// export function Count ( array ) ; var i ; begin
36303: LD_INT 0
36305: PPUSH
36306: PPUSH
// result := 0 ;
36307: LD_ADDR_VAR 0 2
36311: PUSH
36312: LD_INT 0
36314: ST_TO_ADDR
// for i in array do
36315: LD_ADDR_VAR 0 3
36319: PUSH
36320: LD_VAR 0 1
36324: PUSH
36325: FOR_IN
36326: IFFALSE 36350
// if i then
36328: LD_VAR 0 3
36332: IFFALSE 36348
// result := result + 1 ;
36334: LD_ADDR_VAR 0 2
36338: PUSH
36339: LD_VAR 0 2
36343: PUSH
36344: LD_INT 1
36346: PLUS
36347: ST_TO_ADDR
36348: GO 36325
36350: POP
36351: POP
// end ;
36352: LD_VAR 0 2
36356: RET
// export function IsEmpty ( building ) ; begin
36357: LD_INT 0
36359: PPUSH
// if not building then
36360: LD_VAR 0 1
36364: NOT
36365: IFFALSE 36369
// exit ;
36367: GO 36412
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36369: LD_ADDR_VAR 0 2
36373: PUSH
36374: LD_VAR 0 1
36378: PUSH
36379: LD_INT 22
36381: PUSH
36382: LD_VAR 0 1
36386: PPUSH
36387: CALL_OW 255
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 58
36398: PUSH
36399: EMPTY
36400: LIST
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PPUSH
36406: CALL_OW 69
36410: IN
36411: ST_TO_ADDR
// end ;
36412: LD_VAR 0 2
36416: RET
// export function IsNotFull ( building ) ; begin
36417: LD_INT 0
36419: PPUSH
// if not building then
36420: LD_VAR 0 1
36424: NOT
36425: IFFALSE 36429
// exit ;
36427: GO 36448
// result := UnitsInside ( building ) < 6 ;
36429: LD_ADDR_VAR 0 2
36433: PUSH
36434: LD_VAR 0 1
36438: PPUSH
36439: CALL_OW 313
36443: PUSH
36444: LD_INT 6
36446: LESS
36447: ST_TO_ADDR
// end ;
36448: LD_VAR 0 2
36452: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36453: LD_INT 0
36455: PPUSH
36456: PPUSH
36457: PPUSH
36458: PPUSH
// tmp := [ ] ;
36459: LD_ADDR_VAR 0 3
36463: PUSH
36464: EMPTY
36465: ST_TO_ADDR
// list := [ ] ;
36466: LD_ADDR_VAR 0 5
36470: PUSH
36471: EMPTY
36472: ST_TO_ADDR
// for i = 16 to 25 do
36473: LD_ADDR_VAR 0 4
36477: PUSH
36478: DOUBLE
36479: LD_INT 16
36481: DEC
36482: ST_TO_ADDR
36483: LD_INT 25
36485: PUSH
36486: FOR_TO
36487: IFFALSE 36560
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36489: LD_ADDR_VAR 0 3
36493: PUSH
36494: LD_VAR 0 3
36498: PUSH
36499: LD_INT 22
36501: PUSH
36502: LD_VAR 0 1
36506: PPUSH
36507: CALL_OW 255
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 91
36518: PUSH
36519: LD_VAR 0 1
36523: PUSH
36524: LD_INT 6
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 30
36534: PUSH
36535: LD_VAR 0 4
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: PUSH
36549: EMPTY
36550: LIST
36551: PPUSH
36552: CALL_OW 69
36556: ADD
36557: ST_TO_ADDR
36558: GO 36486
36560: POP
36561: POP
// for i = 1 to tmp do
36562: LD_ADDR_VAR 0 4
36566: PUSH
36567: DOUBLE
36568: LD_INT 1
36570: DEC
36571: ST_TO_ADDR
36572: LD_VAR 0 3
36576: PUSH
36577: FOR_TO
36578: IFFALSE 36666
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36580: LD_ADDR_VAR 0 5
36584: PUSH
36585: LD_VAR 0 5
36589: PUSH
36590: LD_VAR 0 3
36594: PUSH
36595: LD_VAR 0 4
36599: ARRAY
36600: PPUSH
36601: CALL_OW 266
36605: PUSH
36606: LD_VAR 0 3
36610: PUSH
36611: LD_VAR 0 4
36615: ARRAY
36616: PPUSH
36617: CALL_OW 250
36621: PUSH
36622: LD_VAR 0 3
36626: PUSH
36627: LD_VAR 0 4
36631: ARRAY
36632: PPUSH
36633: CALL_OW 251
36637: PUSH
36638: LD_VAR 0 3
36642: PUSH
36643: LD_VAR 0 4
36647: ARRAY
36648: PPUSH
36649: CALL_OW 254
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: PUSH
36660: EMPTY
36661: LIST
36662: ADD
36663: ST_TO_ADDR
36664: GO 36577
36666: POP
36667: POP
// result := list ;
36668: LD_ADDR_VAR 0 2
36672: PUSH
36673: LD_VAR 0 5
36677: ST_TO_ADDR
// end ;
36678: LD_VAR 0 2
36682: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36683: LD_INT 0
36685: PPUSH
36686: PPUSH
36687: PPUSH
36688: PPUSH
36689: PPUSH
36690: PPUSH
36691: PPUSH
// if not factory then
36692: LD_VAR 0 1
36696: NOT
36697: IFFALSE 36701
// exit ;
36699: GO 37294
// if control = control_apeman then
36701: LD_VAR 0 4
36705: PUSH
36706: LD_INT 5
36708: EQUAL
36709: IFFALSE 36818
// begin tmp := UnitsInside ( factory ) ;
36711: LD_ADDR_VAR 0 8
36715: PUSH
36716: LD_VAR 0 1
36720: PPUSH
36721: CALL_OW 313
36725: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36726: LD_VAR 0 8
36730: PPUSH
36731: LD_INT 25
36733: PUSH
36734: LD_INT 12
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PPUSH
36741: CALL_OW 72
36745: NOT
36746: IFFALSE 36756
// control := control_manual ;
36748: LD_ADDR_VAR 0 4
36752: PUSH
36753: LD_INT 1
36755: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36756: LD_ADDR_VAR 0 8
36760: PUSH
36761: LD_VAR 0 1
36765: PPUSH
36766: CALL 36453 0 1
36770: ST_TO_ADDR
// if tmp then
36771: LD_VAR 0 8
36775: IFFALSE 36818
// begin for i in tmp do
36777: LD_ADDR_VAR 0 7
36781: PUSH
36782: LD_VAR 0 8
36786: PUSH
36787: FOR_IN
36788: IFFALSE 36816
// if i [ 1 ] = b_ext_radio then
36790: LD_VAR 0 7
36794: PUSH
36795: LD_INT 1
36797: ARRAY
36798: PUSH
36799: LD_INT 22
36801: EQUAL
36802: IFFALSE 36814
// begin control := control_remote ;
36804: LD_ADDR_VAR 0 4
36808: PUSH
36809: LD_INT 2
36811: ST_TO_ADDR
// break ;
36812: GO 36816
// end ;
36814: GO 36787
36816: POP
36817: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36818: LD_VAR 0 1
36822: PPUSH
36823: LD_VAR 0 2
36827: PPUSH
36828: LD_VAR 0 3
36832: PPUSH
36833: LD_VAR 0 4
36837: PPUSH
36838: LD_VAR 0 5
36842: PPUSH
36843: CALL_OW 448
36847: IFFALSE 36882
// begin result := [ chassis , engine , control , weapon ] ;
36849: LD_ADDR_VAR 0 6
36853: PUSH
36854: LD_VAR 0 2
36858: PUSH
36859: LD_VAR 0 3
36863: PUSH
36864: LD_VAR 0 4
36868: PUSH
36869: LD_VAR 0 5
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
// exit ;
36880: GO 37294
// end ; _chassis := AvailableChassisList ( factory ) ;
36882: LD_ADDR_VAR 0 9
36886: PUSH
36887: LD_VAR 0 1
36891: PPUSH
36892: CALL_OW 475
36896: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36897: LD_ADDR_VAR 0 11
36901: PUSH
36902: LD_VAR 0 1
36906: PPUSH
36907: CALL_OW 476
36911: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36912: LD_ADDR_VAR 0 12
36916: PUSH
36917: LD_VAR 0 1
36921: PPUSH
36922: CALL_OW 477
36926: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36927: LD_ADDR_VAR 0 10
36931: PUSH
36932: LD_VAR 0 1
36936: PPUSH
36937: CALL_OW 478
36941: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36942: LD_VAR 0 9
36946: NOT
36947: PUSH
36948: LD_VAR 0 11
36952: NOT
36953: OR
36954: PUSH
36955: LD_VAR 0 12
36959: NOT
36960: OR
36961: PUSH
36962: LD_VAR 0 10
36966: NOT
36967: OR
36968: IFFALSE 37003
// begin result := [ chassis , engine , control , weapon ] ;
36970: LD_ADDR_VAR 0 6
36974: PUSH
36975: LD_VAR 0 2
36979: PUSH
36980: LD_VAR 0 3
36984: PUSH
36985: LD_VAR 0 4
36989: PUSH
36990: LD_VAR 0 5
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: ST_TO_ADDR
// exit ;
37001: GO 37294
// end ; if not chassis in _chassis then
37003: LD_VAR 0 2
37007: PUSH
37008: LD_VAR 0 9
37012: IN
37013: NOT
37014: IFFALSE 37040
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37016: LD_ADDR_VAR 0 2
37020: PUSH
37021: LD_VAR 0 9
37025: PUSH
37026: LD_INT 1
37028: PPUSH
37029: LD_VAR 0 9
37033: PPUSH
37034: CALL_OW 12
37038: ARRAY
37039: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37040: LD_VAR 0 2
37044: PPUSH
37045: LD_VAR 0 3
37049: PPUSH
37050: CALL 37299 0 2
37054: NOT
37055: IFFALSE 37114
// repeat engine := _engine [ 1 ] ;
37057: LD_ADDR_VAR 0 3
37061: PUSH
37062: LD_VAR 0 11
37066: PUSH
37067: LD_INT 1
37069: ARRAY
37070: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37071: LD_ADDR_VAR 0 11
37075: PUSH
37076: LD_VAR 0 11
37080: PPUSH
37081: LD_INT 1
37083: PPUSH
37084: CALL_OW 3
37088: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37089: LD_VAR 0 2
37093: PPUSH
37094: LD_VAR 0 3
37098: PPUSH
37099: CALL 37299 0 2
37103: PUSH
37104: LD_VAR 0 11
37108: PUSH
37109: EMPTY
37110: EQUAL
37111: OR
37112: IFFALSE 37057
// if not control in _control then
37114: LD_VAR 0 4
37118: PUSH
37119: LD_VAR 0 12
37123: IN
37124: NOT
37125: IFFALSE 37151
// control := _control [ rand ( 1 , _control ) ] ;
37127: LD_ADDR_VAR 0 4
37131: PUSH
37132: LD_VAR 0 12
37136: PUSH
37137: LD_INT 1
37139: PPUSH
37140: LD_VAR 0 12
37144: PPUSH
37145: CALL_OW 12
37149: ARRAY
37150: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37151: LD_VAR 0 2
37155: PPUSH
37156: LD_VAR 0 5
37160: PPUSH
37161: CALL 37519 0 2
37165: NOT
37166: IFFALSE 37225
// repeat weapon := _weapon [ 1 ] ;
37168: LD_ADDR_VAR 0 5
37172: PUSH
37173: LD_VAR 0 10
37177: PUSH
37178: LD_INT 1
37180: ARRAY
37181: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37182: LD_ADDR_VAR 0 10
37186: PUSH
37187: LD_VAR 0 10
37191: PPUSH
37192: LD_INT 1
37194: PPUSH
37195: CALL_OW 3
37199: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37200: LD_VAR 0 2
37204: PPUSH
37205: LD_VAR 0 5
37209: PPUSH
37210: CALL 37519 0 2
37214: PUSH
37215: LD_VAR 0 10
37219: PUSH
37220: EMPTY
37221: EQUAL
37222: OR
37223: IFFALSE 37168
// result := [ ] ;
37225: LD_ADDR_VAR 0 6
37229: PUSH
37230: EMPTY
37231: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37232: LD_VAR 0 1
37236: PPUSH
37237: LD_VAR 0 2
37241: PPUSH
37242: LD_VAR 0 3
37246: PPUSH
37247: LD_VAR 0 4
37251: PPUSH
37252: LD_VAR 0 5
37256: PPUSH
37257: CALL_OW 448
37261: IFFALSE 37294
// result := [ chassis , engine , control , weapon ] ;
37263: LD_ADDR_VAR 0 6
37267: PUSH
37268: LD_VAR 0 2
37272: PUSH
37273: LD_VAR 0 3
37277: PUSH
37278: LD_VAR 0 4
37282: PUSH
37283: LD_VAR 0 5
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: ST_TO_ADDR
// end ;
37294: LD_VAR 0 6
37298: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37299: LD_INT 0
37301: PPUSH
// if not chassis or not engine then
37302: LD_VAR 0 1
37306: NOT
37307: PUSH
37308: LD_VAR 0 2
37312: NOT
37313: OR
37314: IFFALSE 37318
// exit ;
37316: GO 37514
// case engine of engine_solar :
37318: LD_VAR 0 2
37322: PUSH
37323: LD_INT 2
37325: DOUBLE
37326: EQUAL
37327: IFTRUE 37331
37329: GO 37369
37331: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37332: LD_ADDR_VAR 0 3
37336: PUSH
37337: LD_INT 11
37339: PUSH
37340: LD_INT 12
37342: PUSH
37343: LD_INT 13
37345: PUSH
37346: LD_INT 14
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: LD_INT 3
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: ST_TO_ADDR
37367: GO 37498
37369: LD_INT 1
37371: DOUBLE
37372: EQUAL
37373: IFTRUE 37377
37375: GO 37439
37377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37378: LD_ADDR_VAR 0 3
37382: PUSH
37383: LD_INT 11
37385: PUSH
37386: LD_INT 12
37388: PUSH
37389: LD_INT 13
37391: PUSH
37392: LD_INT 14
37394: PUSH
37395: LD_INT 1
37397: PUSH
37398: LD_INT 2
37400: PUSH
37401: LD_INT 3
37403: PUSH
37404: LD_INT 4
37406: PUSH
37407: LD_INT 5
37409: PUSH
37410: LD_INT 21
37412: PUSH
37413: LD_INT 23
37415: PUSH
37416: LD_INT 22
37418: PUSH
37419: LD_INT 24
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: ST_TO_ADDR
37437: GO 37498
37439: LD_INT 3
37441: DOUBLE
37442: EQUAL
37443: IFTRUE 37447
37445: GO 37497
37447: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37448: LD_ADDR_VAR 0 3
37452: PUSH
37453: LD_INT 13
37455: PUSH
37456: LD_INT 14
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: LD_INT 3
37464: PUSH
37465: LD_INT 4
37467: PUSH
37468: LD_INT 5
37470: PUSH
37471: LD_INT 21
37473: PUSH
37474: LD_INT 22
37476: PUSH
37477: LD_INT 23
37479: PUSH
37480: LD_INT 24
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: ST_TO_ADDR
37495: GO 37498
37497: POP
// result := ( chassis in result ) ;
37498: LD_ADDR_VAR 0 3
37502: PUSH
37503: LD_VAR 0 1
37507: PUSH
37508: LD_VAR 0 3
37512: IN
37513: ST_TO_ADDR
// end ;
37514: LD_VAR 0 3
37518: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37519: LD_INT 0
37521: PPUSH
// if not chassis or not weapon then
37522: LD_VAR 0 1
37526: NOT
37527: PUSH
37528: LD_VAR 0 2
37532: NOT
37533: OR
37534: IFFALSE 37538
// exit ;
37536: GO 38600
// case weapon of us_machine_gun :
37538: LD_VAR 0 2
37542: PUSH
37543: LD_INT 2
37545: DOUBLE
37546: EQUAL
37547: IFTRUE 37551
37549: GO 37581
37551: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37552: LD_ADDR_VAR 0 3
37556: PUSH
37557: LD_INT 1
37559: PUSH
37560: LD_INT 2
37562: PUSH
37563: LD_INT 3
37565: PUSH
37566: LD_INT 4
37568: PUSH
37569: LD_INT 5
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: ST_TO_ADDR
37579: GO 38584
37581: LD_INT 3
37583: DOUBLE
37584: EQUAL
37585: IFTRUE 37589
37587: GO 37619
37589: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37590: LD_ADDR_VAR 0 3
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: LD_INT 2
37600: PUSH
37601: LD_INT 3
37603: PUSH
37604: LD_INT 4
37606: PUSH
37607: LD_INT 5
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: ST_TO_ADDR
37617: GO 38584
37619: LD_INT 11
37621: DOUBLE
37622: EQUAL
37623: IFTRUE 37627
37625: GO 37657
37627: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37628: LD_ADDR_VAR 0 3
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: LD_INT 3
37641: PUSH
37642: LD_INT 4
37644: PUSH
37645: LD_INT 5
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: ST_TO_ADDR
37655: GO 38584
37657: LD_INT 4
37659: DOUBLE
37660: EQUAL
37661: IFTRUE 37665
37663: GO 37691
37665: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37666: LD_ADDR_VAR 0 3
37670: PUSH
37671: LD_INT 2
37673: PUSH
37674: LD_INT 3
37676: PUSH
37677: LD_INT 4
37679: PUSH
37680: LD_INT 5
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: ST_TO_ADDR
37689: GO 38584
37691: LD_INT 5
37693: DOUBLE
37694: EQUAL
37695: IFTRUE 37699
37697: GO 37725
37699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37700: LD_ADDR_VAR 0 3
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: LD_INT 3
37710: PUSH
37711: LD_INT 4
37713: PUSH
37714: LD_INT 5
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: ST_TO_ADDR
37723: GO 38584
37725: LD_INT 9
37727: DOUBLE
37728: EQUAL
37729: IFTRUE 37733
37731: GO 37759
37733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37734: LD_ADDR_VAR 0 3
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: LD_INT 3
37744: PUSH
37745: LD_INT 4
37747: PUSH
37748: LD_INT 5
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: ST_TO_ADDR
37757: GO 38584
37759: LD_INT 7
37761: DOUBLE
37762: EQUAL
37763: IFTRUE 37767
37765: GO 37793
37767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37768: LD_ADDR_VAR 0 3
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: LD_INT 3
37778: PUSH
37779: LD_INT 4
37781: PUSH
37782: LD_INT 5
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: ST_TO_ADDR
37791: GO 38584
37793: LD_INT 12
37795: DOUBLE
37796: EQUAL
37797: IFTRUE 37801
37799: GO 37827
37801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37802: LD_ADDR_VAR 0 3
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: LD_INT 3
37812: PUSH
37813: LD_INT 4
37815: PUSH
37816: LD_INT 5
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: ST_TO_ADDR
37825: GO 38584
37827: LD_INT 13
37829: DOUBLE
37830: EQUAL
37831: IFTRUE 37835
37833: GO 37861
37835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37836: LD_ADDR_VAR 0 3
37840: PUSH
37841: LD_INT 2
37843: PUSH
37844: LD_INT 3
37846: PUSH
37847: LD_INT 4
37849: PUSH
37850: LD_INT 5
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: ST_TO_ADDR
37859: GO 38584
37861: LD_INT 14
37863: DOUBLE
37864: EQUAL
37865: IFTRUE 37869
37867: GO 37887
37869: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37870: LD_ADDR_VAR 0 3
37874: PUSH
37875: LD_INT 4
37877: PUSH
37878: LD_INT 5
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: ST_TO_ADDR
37885: GO 38584
37887: LD_INT 6
37889: DOUBLE
37890: EQUAL
37891: IFTRUE 37895
37893: GO 37913
37895: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37896: LD_ADDR_VAR 0 3
37900: PUSH
37901: LD_INT 4
37903: PUSH
37904: LD_INT 5
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: ST_TO_ADDR
37911: GO 38584
37913: LD_INT 10
37915: DOUBLE
37916: EQUAL
37917: IFTRUE 37921
37919: GO 37939
37921: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37922: LD_ADDR_VAR 0 3
37926: PUSH
37927: LD_INT 4
37929: PUSH
37930: LD_INT 5
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: ST_TO_ADDR
37937: GO 38584
37939: LD_INT 22
37941: DOUBLE
37942: EQUAL
37943: IFTRUE 37947
37945: GO 37973
37947: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37948: LD_ADDR_VAR 0 3
37952: PUSH
37953: LD_INT 11
37955: PUSH
37956: LD_INT 12
37958: PUSH
37959: LD_INT 13
37961: PUSH
37962: LD_INT 14
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: ST_TO_ADDR
37971: GO 38584
37973: LD_INT 23
37975: DOUBLE
37976: EQUAL
37977: IFTRUE 37981
37979: GO 38007
37981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37982: LD_ADDR_VAR 0 3
37986: PUSH
37987: LD_INT 11
37989: PUSH
37990: LD_INT 12
37992: PUSH
37993: LD_INT 13
37995: PUSH
37996: LD_INT 14
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: ST_TO_ADDR
38005: GO 38584
38007: LD_INT 24
38009: DOUBLE
38010: EQUAL
38011: IFTRUE 38015
38013: GO 38041
38015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38016: LD_ADDR_VAR 0 3
38020: PUSH
38021: LD_INT 11
38023: PUSH
38024: LD_INT 12
38026: PUSH
38027: LD_INT 13
38029: PUSH
38030: LD_INT 14
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: ST_TO_ADDR
38039: GO 38584
38041: LD_INT 30
38043: DOUBLE
38044: EQUAL
38045: IFTRUE 38049
38047: GO 38075
38049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38050: LD_ADDR_VAR 0 3
38054: PUSH
38055: LD_INT 11
38057: PUSH
38058: LD_INT 12
38060: PUSH
38061: LD_INT 13
38063: PUSH
38064: LD_INT 14
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: ST_TO_ADDR
38073: GO 38584
38075: LD_INT 25
38077: DOUBLE
38078: EQUAL
38079: IFTRUE 38083
38081: GO 38101
38083: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38084: LD_ADDR_VAR 0 3
38088: PUSH
38089: LD_INT 13
38091: PUSH
38092: LD_INT 14
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: ST_TO_ADDR
38099: GO 38584
38101: LD_INT 27
38103: DOUBLE
38104: EQUAL
38105: IFTRUE 38109
38107: GO 38127
38109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38110: LD_ADDR_VAR 0 3
38114: PUSH
38115: LD_INT 13
38117: PUSH
38118: LD_INT 14
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: ST_TO_ADDR
38125: GO 38584
38127: LD_EXP 41
38131: DOUBLE
38132: EQUAL
38133: IFTRUE 38137
38135: GO 38163
38137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38138: LD_ADDR_VAR 0 3
38142: PUSH
38143: LD_INT 11
38145: PUSH
38146: LD_INT 12
38148: PUSH
38149: LD_INT 13
38151: PUSH
38152: LD_INT 14
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: ST_TO_ADDR
38161: GO 38584
38163: LD_INT 28
38165: DOUBLE
38166: EQUAL
38167: IFTRUE 38171
38169: GO 38189
38171: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38172: LD_ADDR_VAR 0 3
38176: PUSH
38177: LD_INT 13
38179: PUSH
38180: LD_INT 14
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: ST_TO_ADDR
38187: GO 38584
38189: LD_INT 29
38191: DOUBLE
38192: EQUAL
38193: IFTRUE 38197
38195: GO 38215
38197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38198: LD_ADDR_VAR 0 3
38202: PUSH
38203: LD_INT 13
38205: PUSH
38206: LD_INT 14
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: ST_TO_ADDR
38213: GO 38584
38215: LD_INT 31
38217: DOUBLE
38218: EQUAL
38219: IFTRUE 38223
38221: GO 38241
38223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38224: LD_ADDR_VAR 0 3
38228: PUSH
38229: LD_INT 13
38231: PUSH
38232: LD_INT 14
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: ST_TO_ADDR
38239: GO 38584
38241: LD_INT 26
38243: DOUBLE
38244: EQUAL
38245: IFTRUE 38249
38247: GO 38267
38249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38250: LD_ADDR_VAR 0 3
38254: PUSH
38255: LD_INT 13
38257: PUSH
38258: LD_INT 14
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: ST_TO_ADDR
38265: GO 38584
38267: LD_INT 42
38269: DOUBLE
38270: EQUAL
38271: IFTRUE 38275
38273: GO 38301
38275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38276: LD_ADDR_VAR 0 3
38280: PUSH
38281: LD_INT 21
38283: PUSH
38284: LD_INT 22
38286: PUSH
38287: LD_INT 23
38289: PUSH
38290: LD_INT 24
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: ST_TO_ADDR
38299: GO 38584
38301: LD_INT 43
38303: DOUBLE
38304: EQUAL
38305: IFTRUE 38309
38307: GO 38335
38309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38310: LD_ADDR_VAR 0 3
38314: PUSH
38315: LD_INT 21
38317: PUSH
38318: LD_INT 22
38320: PUSH
38321: LD_INT 23
38323: PUSH
38324: LD_INT 24
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: ST_TO_ADDR
38333: GO 38584
38335: LD_INT 44
38337: DOUBLE
38338: EQUAL
38339: IFTRUE 38343
38341: GO 38369
38343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38344: LD_ADDR_VAR 0 3
38348: PUSH
38349: LD_INT 21
38351: PUSH
38352: LD_INT 22
38354: PUSH
38355: LD_INT 23
38357: PUSH
38358: LD_INT 24
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: ST_TO_ADDR
38367: GO 38584
38369: LD_INT 45
38371: DOUBLE
38372: EQUAL
38373: IFTRUE 38377
38375: GO 38403
38377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38378: LD_ADDR_VAR 0 3
38382: PUSH
38383: LD_INT 21
38385: PUSH
38386: LD_INT 22
38388: PUSH
38389: LD_INT 23
38391: PUSH
38392: LD_INT 24
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: ST_TO_ADDR
38401: GO 38584
38403: LD_INT 49
38405: DOUBLE
38406: EQUAL
38407: IFTRUE 38411
38409: GO 38437
38411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38412: LD_ADDR_VAR 0 3
38416: PUSH
38417: LD_INT 21
38419: PUSH
38420: LD_INT 22
38422: PUSH
38423: LD_INT 23
38425: PUSH
38426: LD_INT 24
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: ST_TO_ADDR
38435: GO 38584
38437: LD_INT 51
38439: DOUBLE
38440: EQUAL
38441: IFTRUE 38445
38443: GO 38471
38445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38446: LD_ADDR_VAR 0 3
38450: PUSH
38451: LD_INT 21
38453: PUSH
38454: LD_INT 22
38456: PUSH
38457: LD_INT 23
38459: PUSH
38460: LD_INT 24
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: ST_TO_ADDR
38469: GO 38584
38471: LD_INT 52
38473: DOUBLE
38474: EQUAL
38475: IFTRUE 38479
38477: GO 38505
38479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38480: LD_ADDR_VAR 0 3
38484: PUSH
38485: LD_INT 21
38487: PUSH
38488: LD_INT 22
38490: PUSH
38491: LD_INT 23
38493: PUSH
38494: LD_INT 24
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: ST_TO_ADDR
38503: GO 38584
38505: LD_INT 53
38507: DOUBLE
38508: EQUAL
38509: IFTRUE 38513
38511: GO 38531
38513: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38514: LD_ADDR_VAR 0 3
38518: PUSH
38519: LD_INT 23
38521: PUSH
38522: LD_INT 24
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: ST_TO_ADDR
38529: GO 38584
38531: LD_INT 46
38533: DOUBLE
38534: EQUAL
38535: IFTRUE 38539
38537: GO 38557
38539: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38540: LD_ADDR_VAR 0 3
38544: PUSH
38545: LD_INT 23
38547: PUSH
38548: LD_INT 24
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: ST_TO_ADDR
38555: GO 38584
38557: LD_INT 47
38559: DOUBLE
38560: EQUAL
38561: IFTRUE 38565
38563: GO 38583
38565: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38566: LD_ADDR_VAR 0 3
38570: PUSH
38571: LD_INT 23
38573: PUSH
38574: LD_INT 24
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: ST_TO_ADDR
38581: GO 38584
38583: POP
// result := ( chassis in result ) ;
38584: LD_ADDR_VAR 0 3
38588: PUSH
38589: LD_VAR 0 1
38593: PUSH
38594: LD_VAR 0 3
38598: IN
38599: ST_TO_ADDR
// end ;
38600: LD_VAR 0 3
38604: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38605: LD_INT 0
38607: PPUSH
38608: PPUSH
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
38613: PPUSH
// result := array ;
38614: LD_ADDR_VAR 0 5
38618: PUSH
38619: LD_VAR 0 1
38623: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38624: LD_VAR 0 1
38628: NOT
38629: PUSH
38630: LD_VAR 0 2
38634: NOT
38635: OR
38636: PUSH
38637: LD_VAR 0 3
38641: NOT
38642: OR
38643: PUSH
38644: LD_VAR 0 2
38648: PUSH
38649: LD_VAR 0 1
38653: GREATER
38654: OR
38655: PUSH
38656: LD_VAR 0 3
38660: PUSH
38661: LD_VAR 0 1
38665: GREATER
38666: OR
38667: IFFALSE 38671
// exit ;
38669: GO 38967
// if direction then
38671: LD_VAR 0 4
38675: IFFALSE 38739
// begin d := 1 ;
38677: LD_ADDR_VAR 0 9
38681: PUSH
38682: LD_INT 1
38684: ST_TO_ADDR
// if i_from > i_to then
38685: LD_VAR 0 2
38689: PUSH
38690: LD_VAR 0 3
38694: GREATER
38695: IFFALSE 38721
// length := ( array - i_from ) + i_to else
38697: LD_ADDR_VAR 0 11
38701: PUSH
38702: LD_VAR 0 1
38706: PUSH
38707: LD_VAR 0 2
38711: MINUS
38712: PUSH
38713: LD_VAR 0 3
38717: PLUS
38718: ST_TO_ADDR
38719: GO 38737
// length := i_to - i_from ;
38721: LD_ADDR_VAR 0 11
38725: PUSH
38726: LD_VAR 0 3
38730: PUSH
38731: LD_VAR 0 2
38735: MINUS
38736: ST_TO_ADDR
// end else
38737: GO 38800
// begin d := - 1 ;
38739: LD_ADDR_VAR 0 9
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: ST_TO_ADDR
// if i_from > i_to then
38748: LD_VAR 0 2
38752: PUSH
38753: LD_VAR 0 3
38757: GREATER
38758: IFFALSE 38778
// length := i_from - i_to else
38760: LD_ADDR_VAR 0 11
38764: PUSH
38765: LD_VAR 0 2
38769: PUSH
38770: LD_VAR 0 3
38774: MINUS
38775: ST_TO_ADDR
38776: GO 38800
// length := ( array - i_to ) + i_from ;
38778: LD_ADDR_VAR 0 11
38782: PUSH
38783: LD_VAR 0 1
38787: PUSH
38788: LD_VAR 0 3
38792: MINUS
38793: PUSH
38794: LD_VAR 0 2
38798: PLUS
38799: ST_TO_ADDR
// end ; if not length then
38800: LD_VAR 0 11
38804: NOT
38805: IFFALSE 38809
// exit ;
38807: GO 38967
// tmp := array ;
38809: LD_ADDR_VAR 0 10
38813: PUSH
38814: LD_VAR 0 1
38818: ST_TO_ADDR
// for i = 1 to length do
38819: LD_ADDR_VAR 0 6
38823: PUSH
38824: DOUBLE
38825: LD_INT 1
38827: DEC
38828: ST_TO_ADDR
38829: LD_VAR 0 11
38833: PUSH
38834: FOR_TO
38835: IFFALSE 38955
// begin for j = 1 to array do
38837: LD_ADDR_VAR 0 7
38841: PUSH
38842: DOUBLE
38843: LD_INT 1
38845: DEC
38846: ST_TO_ADDR
38847: LD_VAR 0 1
38851: PUSH
38852: FOR_TO
38853: IFFALSE 38941
// begin k := j + d ;
38855: LD_ADDR_VAR 0 8
38859: PUSH
38860: LD_VAR 0 7
38864: PUSH
38865: LD_VAR 0 9
38869: PLUS
38870: ST_TO_ADDR
// if k > array then
38871: LD_VAR 0 8
38875: PUSH
38876: LD_VAR 0 1
38880: GREATER
38881: IFFALSE 38891
// k := 1 ;
38883: LD_ADDR_VAR 0 8
38887: PUSH
38888: LD_INT 1
38890: ST_TO_ADDR
// if not k then
38891: LD_VAR 0 8
38895: NOT
38896: IFFALSE 38908
// k := array ;
38898: LD_ADDR_VAR 0 8
38902: PUSH
38903: LD_VAR 0 1
38907: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38908: LD_ADDR_VAR 0 10
38912: PUSH
38913: LD_VAR 0 10
38917: PPUSH
38918: LD_VAR 0 8
38922: PPUSH
38923: LD_VAR 0 1
38927: PUSH
38928: LD_VAR 0 7
38932: ARRAY
38933: PPUSH
38934: CALL_OW 1
38938: ST_TO_ADDR
// end ;
38939: GO 38852
38941: POP
38942: POP
// array := tmp ;
38943: LD_ADDR_VAR 0 1
38947: PUSH
38948: LD_VAR 0 10
38952: ST_TO_ADDR
// end ;
38953: GO 38834
38955: POP
38956: POP
// result := array ;
38957: LD_ADDR_VAR 0 5
38961: PUSH
38962: LD_VAR 0 1
38966: ST_TO_ADDR
// end ;
38967: LD_VAR 0 5
38971: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38972: LD_INT 0
38974: PPUSH
38975: PPUSH
// result := 0 ;
38976: LD_ADDR_VAR 0 3
38980: PUSH
38981: LD_INT 0
38983: ST_TO_ADDR
// if not array or not value in array then
38984: LD_VAR 0 1
38988: NOT
38989: PUSH
38990: LD_VAR 0 2
38994: PUSH
38995: LD_VAR 0 1
38999: IN
39000: NOT
39001: OR
39002: IFFALSE 39006
// exit ;
39004: GO 39060
// for i = 1 to array do
39006: LD_ADDR_VAR 0 4
39010: PUSH
39011: DOUBLE
39012: LD_INT 1
39014: DEC
39015: ST_TO_ADDR
39016: LD_VAR 0 1
39020: PUSH
39021: FOR_TO
39022: IFFALSE 39058
// if value = array [ i ] then
39024: LD_VAR 0 2
39028: PUSH
39029: LD_VAR 0 1
39033: PUSH
39034: LD_VAR 0 4
39038: ARRAY
39039: EQUAL
39040: IFFALSE 39056
// begin result := i ;
39042: LD_ADDR_VAR 0 3
39046: PUSH
39047: LD_VAR 0 4
39051: ST_TO_ADDR
// exit ;
39052: POP
39053: POP
39054: GO 39060
// end ;
39056: GO 39021
39058: POP
39059: POP
// end ;
39060: LD_VAR 0 3
39064: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39065: LD_INT 0
39067: PPUSH
// vc_chassis := chassis ;
39068: LD_ADDR_OWVAR 37
39072: PUSH
39073: LD_VAR 0 1
39077: ST_TO_ADDR
// vc_engine := engine ;
39078: LD_ADDR_OWVAR 39
39082: PUSH
39083: LD_VAR 0 2
39087: ST_TO_ADDR
// vc_control := control ;
39088: LD_ADDR_OWVAR 38
39092: PUSH
39093: LD_VAR 0 3
39097: ST_TO_ADDR
// vc_weapon := weapon ;
39098: LD_ADDR_OWVAR 40
39102: PUSH
39103: LD_VAR 0 4
39107: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39108: LD_ADDR_OWVAR 41
39112: PUSH
39113: LD_VAR 0 5
39117: ST_TO_ADDR
// end ;
39118: LD_VAR 0 6
39122: RET
// export function WantPlant ( unit ) ; var task ; begin
39123: LD_INT 0
39125: PPUSH
39126: PPUSH
// result := false ;
39127: LD_ADDR_VAR 0 2
39131: PUSH
39132: LD_INT 0
39134: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39135: LD_ADDR_VAR 0 3
39139: PUSH
39140: LD_VAR 0 1
39144: PPUSH
39145: CALL_OW 437
39149: ST_TO_ADDR
// if task then
39150: LD_VAR 0 3
39154: IFFALSE 39182
// if task [ 1 ] [ 1 ] = p then
39156: LD_VAR 0 3
39160: PUSH
39161: LD_INT 1
39163: ARRAY
39164: PUSH
39165: LD_INT 1
39167: ARRAY
39168: PUSH
39169: LD_STRING p
39171: EQUAL
39172: IFFALSE 39182
// result := true ;
39174: LD_ADDR_VAR 0 2
39178: PUSH
39179: LD_INT 1
39181: ST_TO_ADDR
// end ;
39182: LD_VAR 0 2
39186: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39187: LD_INT 0
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
// if pos < 1 then
39193: LD_VAR 0 2
39197: PUSH
39198: LD_INT 1
39200: LESS
39201: IFFALSE 39205
// exit ;
39203: GO 39508
// if pos = 1 then
39205: LD_VAR 0 2
39209: PUSH
39210: LD_INT 1
39212: EQUAL
39213: IFFALSE 39246
// result := Replace ( arr , pos [ 1 ] , value ) else
39215: LD_ADDR_VAR 0 4
39219: PUSH
39220: LD_VAR 0 1
39224: PPUSH
39225: LD_VAR 0 2
39229: PUSH
39230: LD_INT 1
39232: ARRAY
39233: PPUSH
39234: LD_VAR 0 3
39238: PPUSH
39239: CALL_OW 1
39243: ST_TO_ADDR
39244: GO 39508
// begin tmp := arr ;
39246: LD_ADDR_VAR 0 6
39250: PUSH
39251: LD_VAR 0 1
39255: ST_TO_ADDR
// s_arr := [ tmp ] ;
39256: LD_ADDR_VAR 0 7
39260: PUSH
39261: LD_VAR 0 6
39265: PUSH
39266: EMPTY
39267: LIST
39268: ST_TO_ADDR
// for i = 1 to pos - 1 do
39269: LD_ADDR_VAR 0 5
39273: PUSH
39274: DOUBLE
39275: LD_INT 1
39277: DEC
39278: ST_TO_ADDR
39279: LD_VAR 0 2
39283: PUSH
39284: LD_INT 1
39286: MINUS
39287: PUSH
39288: FOR_TO
39289: IFFALSE 39334
// begin tmp := tmp [ pos [ i ] ] ;
39291: LD_ADDR_VAR 0 6
39295: PUSH
39296: LD_VAR 0 6
39300: PUSH
39301: LD_VAR 0 2
39305: PUSH
39306: LD_VAR 0 5
39310: ARRAY
39311: ARRAY
39312: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39313: LD_ADDR_VAR 0 7
39317: PUSH
39318: LD_VAR 0 7
39322: PUSH
39323: LD_VAR 0 6
39327: PUSH
39328: EMPTY
39329: LIST
39330: ADD
39331: ST_TO_ADDR
// end ;
39332: GO 39288
39334: POP
39335: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39336: LD_ADDR_VAR 0 6
39340: PUSH
39341: LD_VAR 0 6
39345: PPUSH
39346: LD_VAR 0 2
39350: PUSH
39351: LD_VAR 0 2
39355: ARRAY
39356: PPUSH
39357: LD_VAR 0 3
39361: PPUSH
39362: CALL_OW 1
39366: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39367: LD_ADDR_VAR 0 7
39371: PUSH
39372: LD_VAR 0 7
39376: PPUSH
39377: LD_VAR 0 7
39381: PPUSH
39382: LD_VAR 0 6
39386: PPUSH
39387: CALL_OW 1
39391: ST_TO_ADDR
// for i = s_arr downto 2 do
39392: LD_ADDR_VAR 0 5
39396: PUSH
39397: DOUBLE
39398: LD_VAR 0 7
39402: INC
39403: ST_TO_ADDR
39404: LD_INT 2
39406: PUSH
39407: FOR_DOWNTO
39408: IFFALSE 39492
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39410: LD_ADDR_VAR 0 6
39414: PUSH
39415: LD_VAR 0 7
39419: PUSH
39420: LD_VAR 0 5
39424: PUSH
39425: LD_INT 1
39427: MINUS
39428: ARRAY
39429: PPUSH
39430: LD_VAR 0 2
39434: PUSH
39435: LD_VAR 0 5
39439: PUSH
39440: LD_INT 1
39442: MINUS
39443: ARRAY
39444: PPUSH
39445: LD_VAR 0 7
39449: PUSH
39450: LD_VAR 0 5
39454: ARRAY
39455: PPUSH
39456: CALL_OW 1
39460: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39461: LD_ADDR_VAR 0 7
39465: PUSH
39466: LD_VAR 0 7
39470: PPUSH
39471: LD_VAR 0 5
39475: PUSH
39476: LD_INT 1
39478: MINUS
39479: PPUSH
39480: LD_VAR 0 6
39484: PPUSH
39485: CALL_OW 1
39489: ST_TO_ADDR
// end ;
39490: GO 39407
39492: POP
39493: POP
// result := s_arr [ 1 ] ;
39494: LD_ADDR_VAR 0 4
39498: PUSH
39499: LD_VAR 0 7
39503: PUSH
39504: LD_INT 1
39506: ARRAY
39507: ST_TO_ADDR
// end ; end ;
39508: LD_VAR 0 4
39512: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39513: LD_INT 0
39515: PPUSH
39516: PPUSH
// if not list then
39517: LD_VAR 0 1
39521: NOT
39522: IFFALSE 39526
// exit ;
39524: GO 39617
// i := list [ pos1 ] ;
39526: LD_ADDR_VAR 0 5
39530: PUSH
39531: LD_VAR 0 1
39535: PUSH
39536: LD_VAR 0 2
39540: ARRAY
39541: ST_TO_ADDR
// if not i then
39542: LD_VAR 0 5
39546: NOT
39547: IFFALSE 39551
// exit ;
39549: GO 39617
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39551: LD_ADDR_VAR 0 1
39555: PUSH
39556: LD_VAR 0 1
39560: PPUSH
39561: LD_VAR 0 2
39565: PPUSH
39566: LD_VAR 0 1
39570: PUSH
39571: LD_VAR 0 3
39575: ARRAY
39576: PPUSH
39577: CALL_OW 1
39581: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39582: LD_ADDR_VAR 0 1
39586: PUSH
39587: LD_VAR 0 1
39591: PPUSH
39592: LD_VAR 0 3
39596: PPUSH
39597: LD_VAR 0 5
39601: PPUSH
39602: CALL_OW 1
39606: ST_TO_ADDR
// result := list ;
39607: LD_ADDR_VAR 0 4
39611: PUSH
39612: LD_VAR 0 1
39616: ST_TO_ADDR
// end ;
39617: LD_VAR 0 4
39621: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39622: LD_INT 0
39624: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39625: LD_ADDR_VAR 0 5
39629: PUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: CALL_OW 250
39639: PPUSH
39640: LD_VAR 0 1
39644: PPUSH
39645: CALL_OW 251
39649: PPUSH
39650: LD_VAR 0 2
39654: PPUSH
39655: LD_VAR 0 3
39659: PPUSH
39660: LD_VAR 0 4
39664: PPUSH
39665: CALL 39675 0 5
39669: ST_TO_ADDR
// end ;
39670: LD_VAR 0 5
39674: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39675: LD_INT 0
39677: PPUSH
39678: PPUSH
39679: PPUSH
39680: PPUSH
// if not list then
39681: LD_VAR 0 3
39685: NOT
39686: IFFALSE 39690
// exit ;
39688: GO 40078
// result := [ ] ;
39690: LD_ADDR_VAR 0 6
39694: PUSH
39695: EMPTY
39696: ST_TO_ADDR
// for i in list do
39697: LD_ADDR_VAR 0 7
39701: PUSH
39702: LD_VAR 0 3
39706: PUSH
39707: FOR_IN
39708: IFFALSE 39910
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39710: LD_ADDR_VAR 0 9
39714: PUSH
39715: LD_VAR 0 7
39719: PPUSH
39720: LD_VAR 0 1
39724: PPUSH
39725: LD_VAR 0 2
39729: PPUSH
39730: CALL_OW 297
39734: ST_TO_ADDR
// if not result then
39735: LD_VAR 0 6
39739: NOT
39740: IFFALSE 39766
// result := [ [ i , tmp ] ] else
39742: LD_ADDR_VAR 0 6
39746: PUSH
39747: LD_VAR 0 7
39751: PUSH
39752: LD_VAR 0 9
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: EMPTY
39762: LIST
39763: ST_TO_ADDR
39764: GO 39908
// begin if result [ result ] [ 2 ] < tmp then
39766: LD_VAR 0 6
39770: PUSH
39771: LD_VAR 0 6
39775: ARRAY
39776: PUSH
39777: LD_INT 2
39779: ARRAY
39780: PUSH
39781: LD_VAR 0 9
39785: LESS
39786: IFFALSE 39828
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39788: LD_ADDR_VAR 0 6
39792: PUSH
39793: LD_VAR 0 6
39797: PPUSH
39798: LD_VAR 0 6
39802: PUSH
39803: LD_INT 1
39805: PLUS
39806: PPUSH
39807: LD_VAR 0 7
39811: PUSH
39812: LD_VAR 0 9
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PPUSH
39821: CALL_OW 2
39825: ST_TO_ADDR
39826: GO 39908
// for j = 1 to result do
39828: LD_ADDR_VAR 0 8
39832: PUSH
39833: DOUBLE
39834: LD_INT 1
39836: DEC
39837: ST_TO_ADDR
39838: LD_VAR 0 6
39842: PUSH
39843: FOR_TO
39844: IFFALSE 39906
// begin if tmp < result [ j ] [ 2 ] then
39846: LD_VAR 0 9
39850: PUSH
39851: LD_VAR 0 6
39855: PUSH
39856: LD_VAR 0 8
39860: ARRAY
39861: PUSH
39862: LD_INT 2
39864: ARRAY
39865: LESS
39866: IFFALSE 39904
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39868: LD_ADDR_VAR 0 6
39872: PUSH
39873: LD_VAR 0 6
39877: PPUSH
39878: LD_VAR 0 8
39882: PPUSH
39883: LD_VAR 0 7
39887: PUSH
39888: LD_VAR 0 9
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PPUSH
39897: CALL_OW 2
39901: ST_TO_ADDR
// break ;
39902: GO 39906
// end ; end ;
39904: GO 39843
39906: POP
39907: POP
// end ; end ;
39908: GO 39707
39910: POP
39911: POP
// if result and not asc then
39912: LD_VAR 0 6
39916: PUSH
39917: LD_VAR 0 4
39921: NOT
39922: AND
39923: IFFALSE 39998
// begin tmp := result ;
39925: LD_ADDR_VAR 0 9
39929: PUSH
39930: LD_VAR 0 6
39934: ST_TO_ADDR
// for i = tmp downto 1 do
39935: LD_ADDR_VAR 0 7
39939: PUSH
39940: DOUBLE
39941: LD_VAR 0 9
39945: INC
39946: ST_TO_ADDR
39947: LD_INT 1
39949: PUSH
39950: FOR_DOWNTO
39951: IFFALSE 39996
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39953: LD_ADDR_VAR 0 6
39957: PUSH
39958: LD_VAR 0 6
39962: PPUSH
39963: LD_VAR 0 9
39967: PUSH
39968: LD_VAR 0 7
39972: MINUS
39973: PUSH
39974: LD_INT 1
39976: PLUS
39977: PPUSH
39978: LD_VAR 0 9
39982: PUSH
39983: LD_VAR 0 7
39987: ARRAY
39988: PPUSH
39989: CALL_OW 1
39993: ST_TO_ADDR
39994: GO 39950
39996: POP
39997: POP
// end ; tmp := [ ] ;
39998: LD_ADDR_VAR 0 9
40002: PUSH
40003: EMPTY
40004: ST_TO_ADDR
// if mode then
40005: LD_VAR 0 5
40009: IFFALSE 40078
// begin for i = 1 to result do
40011: LD_ADDR_VAR 0 7
40015: PUSH
40016: DOUBLE
40017: LD_INT 1
40019: DEC
40020: ST_TO_ADDR
40021: LD_VAR 0 6
40025: PUSH
40026: FOR_TO
40027: IFFALSE 40066
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40029: LD_ADDR_VAR 0 9
40033: PUSH
40034: LD_VAR 0 9
40038: PPUSH
40039: LD_VAR 0 7
40043: PPUSH
40044: LD_VAR 0 6
40048: PUSH
40049: LD_VAR 0 7
40053: ARRAY
40054: PUSH
40055: LD_INT 1
40057: ARRAY
40058: PPUSH
40059: CALL_OW 1
40063: ST_TO_ADDR
40064: GO 40026
40066: POP
40067: POP
// result := tmp ;
40068: LD_ADDR_VAR 0 6
40072: PUSH
40073: LD_VAR 0 9
40077: ST_TO_ADDR
// end ; end ;
40078: LD_VAR 0 6
40082: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40083: LD_INT 0
40085: PPUSH
40086: PPUSH
40087: PPUSH
40088: PPUSH
40089: PPUSH
40090: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40091: LD_ADDR_VAR 0 5
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: EMPTY
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: ST_TO_ADDR
// if not x or not y then
40113: LD_VAR 0 2
40117: NOT
40118: PUSH
40119: LD_VAR 0 3
40123: NOT
40124: OR
40125: IFFALSE 40129
// exit ;
40127: GO 41781
// if not range then
40129: LD_VAR 0 4
40133: NOT
40134: IFFALSE 40144
// range := 10 ;
40136: LD_ADDR_VAR 0 4
40140: PUSH
40141: LD_INT 10
40143: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40144: LD_ADDR_VAR 0 8
40148: PUSH
40149: LD_INT 81
40151: PUSH
40152: LD_VAR 0 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 92
40163: PUSH
40164: LD_VAR 0 2
40168: PUSH
40169: LD_VAR 0 3
40173: PUSH
40174: LD_VAR 0 4
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 3
40187: PUSH
40188: LD_INT 21
40190: PUSH
40191: LD_INT 3
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: PPUSH
40207: CALL_OW 69
40211: ST_TO_ADDR
// if not tmp then
40212: LD_VAR 0 8
40216: NOT
40217: IFFALSE 40221
// exit ;
40219: GO 41781
// for i in tmp do
40221: LD_ADDR_VAR 0 6
40225: PUSH
40226: LD_VAR 0 8
40230: PUSH
40231: FOR_IN
40232: IFFALSE 41756
// begin points := [ 0 , 0 , 0 ] ;
40234: LD_ADDR_VAR 0 9
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: ST_TO_ADDR
// bpoints := 1 ;
40253: LD_ADDR_VAR 0 10
40257: PUSH
40258: LD_INT 1
40260: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40261: LD_VAR 0 6
40265: PPUSH
40266: CALL_OW 247
40270: PUSH
40271: LD_INT 1
40273: DOUBLE
40274: EQUAL
40275: IFTRUE 40279
40277: GO 40857
40279: POP
// begin if GetClass ( i ) = 1 then
40280: LD_VAR 0 6
40284: PPUSH
40285: CALL_OW 257
40289: PUSH
40290: LD_INT 1
40292: EQUAL
40293: IFFALSE 40314
// points := [ 10 , 5 , 3 ] ;
40295: LD_ADDR_VAR 0 9
40299: PUSH
40300: LD_INT 10
40302: PUSH
40303: LD_INT 5
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: LIST
40313: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40314: LD_VAR 0 6
40318: PPUSH
40319: CALL_OW 257
40323: PUSH
40324: LD_INT 2
40326: PUSH
40327: LD_INT 3
40329: PUSH
40330: LD_INT 4
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: LIST
40337: IN
40338: IFFALSE 40359
// points := [ 3 , 2 , 1 ] ;
40340: LD_ADDR_VAR 0 9
40344: PUSH
40345: LD_INT 3
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: LIST
40358: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40359: LD_VAR 0 6
40363: PPUSH
40364: CALL_OW 257
40368: PUSH
40369: LD_INT 5
40371: EQUAL
40372: IFFALSE 40393
// points := [ 130 , 5 , 2 ] ;
40374: LD_ADDR_VAR 0 9
40378: PUSH
40379: LD_INT 130
40381: PUSH
40382: LD_INT 5
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: LIST
40392: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40393: LD_VAR 0 6
40397: PPUSH
40398: CALL_OW 257
40402: PUSH
40403: LD_INT 8
40405: EQUAL
40406: IFFALSE 40427
// points := [ 35 , 35 , 30 ] ;
40408: LD_ADDR_VAR 0 9
40412: PUSH
40413: LD_INT 35
40415: PUSH
40416: LD_INT 35
40418: PUSH
40419: LD_INT 30
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40427: LD_VAR 0 6
40431: PPUSH
40432: CALL_OW 257
40436: PUSH
40437: LD_INT 9
40439: EQUAL
40440: IFFALSE 40461
// points := [ 20 , 55 , 40 ] ;
40442: LD_ADDR_VAR 0 9
40446: PUSH
40447: LD_INT 20
40449: PUSH
40450: LD_INT 55
40452: PUSH
40453: LD_INT 40
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: LIST
40460: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40461: LD_VAR 0 6
40465: PPUSH
40466: CALL_OW 257
40470: PUSH
40471: LD_INT 12
40473: PUSH
40474: LD_INT 16
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: IN
40481: IFFALSE 40502
// points := [ 5 , 3 , 2 ] ;
40483: LD_ADDR_VAR 0 9
40487: PUSH
40488: LD_INT 5
40490: PUSH
40491: LD_INT 3
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: LIST
40501: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40502: LD_VAR 0 6
40506: PPUSH
40507: CALL_OW 257
40511: PUSH
40512: LD_INT 17
40514: EQUAL
40515: IFFALSE 40536
// points := [ 100 , 50 , 75 ] ;
40517: LD_ADDR_VAR 0 9
40521: PUSH
40522: LD_INT 100
40524: PUSH
40525: LD_INT 50
40527: PUSH
40528: LD_INT 75
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40536: LD_VAR 0 6
40540: PPUSH
40541: CALL_OW 257
40545: PUSH
40546: LD_INT 15
40548: EQUAL
40549: IFFALSE 40570
// points := [ 10 , 5 , 3 ] ;
40551: LD_ADDR_VAR 0 9
40555: PUSH
40556: LD_INT 10
40558: PUSH
40559: LD_INT 5
40561: PUSH
40562: LD_INT 3
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: LIST
40569: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40570: LD_VAR 0 6
40574: PPUSH
40575: CALL_OW 257
40579: PUSH
40580: LD_INT 14
40582: EQUAL
40583: IFFALSE 40604
// points := [ 10 , 0 , 0 ] ;
40585: LD_ADDR_VAR 0 9
40589: PUSH
40590: LD_INT 10
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: LIST
40603: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40604: LD_VAR 0 6
40608: PPUSH
40609: CALL_OW 257
40613: PUSH
40614: LD_INT 11
40616: EQUAL
40617: IFFALSE 40638
// points := [ 30 , 10 , 5 ] ;
40619: LD_ADDR_VAR 0 9
40623: PUSH
40624: LD_INT 30
40626: PUSH
40627: LD_INT 10
40629: PUSH
40630: LD_INT 5
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40638: LD_VAR 0 1
40642: PPUSH
40643: LD_INT 5
40645: PPUSH
40646: CALL_OW 321
40650: PUSH
40651: LD_INT 2
40653: EQUAL
40654: IFFALSE 40671
// bpoints := bpoints * 1.8 ;
40656: LD_ADDR_VAR 0 10
40660: PUSH
40661: LD_VAR 0 10
40665: PUSH
40666: LD_REAL  1.80000000000000E+0000
40669: MUL
40670: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40671: LD_VAR 0 6
40675: PPUSH
40676: CALL_OW 257
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: LD_INT 3
40689: PUSH
40690: LD_INT 4
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: IN
40699: PUSH
40700: LD_VAR 0 1
40704: PPUSH
40705: LD_INT 51
40707: PPUSH
40708: CALL_OW 321
40712: PUSH
40713: LD_INT 2
40715: EQUAL
40716: AND
40717: IFFALSE 40734
// bpoints := bpoints * 1.2 ;
40719: LD_ADDR_VAR 0 10
40723: PUSH
40724: LD_VAR 0 10
40728: PUSH
40729: LD_REAL  1.20000000000000E+0000
40732: MUL
40733: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40734: LD_VAR 0 6
40738: PPUSH
40739: CALL_OW 257
40743: PUSH
40744: LD_INT 5
40746: PUSH
40747: LD_INT 7
40749: PUSH
40750: LD_INT 9
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: IN
40758: PUSH
40759: LD_VAR 0 1
40763: PPUSH
40764: LD_INT 52
40766: PPUSH
40767: CALL_OW 321
40771: PUSH
40772: LD_INT 2
40774: EQUAL
40775: AND
40776: IFFALSE 40793
// bpoints := bpoints * 1.5 ;
40778: LD_ADDR_VAR 0 10
40782: PUSH
40783: LD_VAR 0 10
40787: PUSH
40788: LD_REAL  1.50000000000000E+0000
40791: MUL
40792: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40793: LD_VAR 0 1
40797: PPUSH
40798: LD_INT 66
40800: PPUSH
40801: CALL_OW 321
40805: PUSH
40806: LD_INT 2
40808: EQUAL
40809: IFFALSE 40826
// bpoints := bpoints * 1.1 ;
40811: LD_ADDR_VAR 0 10
40815: PUSH
40816: LD_VAR 0 10
40820: PUSH
40821: LD_REAL  1.10000000000000E+0000
40824: MUL
40825: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40826: LD_ADDR_VAR 0 10
40830: PUSH
40831: LD_VAR 0 10
40835: PUSH
40836: LD_VAR 0 6
40840: PPUSH
40841: LD_INT 1
40843: PPUSH
40844: CALL_OW 259
40848: PUSH
40849: LD_REAL  1.15000000000000E+0000
40852: MUL
40853: MUL
40854: ST_TO_ADDR
// end ; unit_vehicle :
40855: GO 41685
40857: LD_INT 2
40859: DOUBLE
40860: EQUAL
40861: IFTRUE 40865
40863: GO 41673
40865: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40866: LD_VAR 0 6
40870: PPUSH
40871: CALL_OW 264
40875: PUSH
40876: LD_INT 2
40878: PUSH
40879: LD_INT 42
40881: PUSH
40882: LD_INT 24
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: LIST
40889: IN
40890: IFFALSE 40911
// points := [ 25 , 5 , 3 ] ;
40892: LD_ADDR_VAR 0 9
40896: PUSH
40897: LD_INT 25
40899: PUSH
40900: LD_INT 5
40902: PUSH
40903: LD_INT 3
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: LIST
40910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40911: LD_VAR 0 6
40915: PPUSH
40916: CALL_OW 264
40920: PUSH
40921: LD_INT 4
40923: PUSH
40924: LD_INT 43
40926: PUSH
40927: LD_INT 25
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: LIST
40934: IN
40935: IFFALSE 40956
// points := [ 40 , 15 , 5 ] ;
40937: LD_ADDR_VAR 0 9
40941: PUSH
40942: LD_INT 40
40944: PUSH
40945: LD_INT 15
40947: PUSH
40948: LD_INT 5
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: LIST
40955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40956: LD_VAR 0 6
40960: PPUSH
40961: CALL_OW 264
40965: PUSH
40966: LD_INT 3
40968: PUSH
40969: LD_INT 23
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: IN
40976: IFFALSE 40997
// points := [ 7 , 25 , 8 ] ;
40978: LD_ADDR_VAR 0 9
40982: PUSH
40983: LD_INT 7
40985: PUSH
40986: LD_INT 25
40988: PUSH
40989: LD_INT 8
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: LIST
40996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40997: LD_VAR 0 6
41001: PPUSH
41002: CALL_OW 264
41006: PUSH
41007: LD_INT 5
41009: PUSH
41010: LD_INT 27
41012: PUSH
41013: LD_INT 44
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: LIST
41020: IN
41021: IFFALSE 41042
// points := [ 14 , 50 , 16 ] ;
41023: LD_ADDR_VAR 0 9
41027: PUSH
41028: LD_INT 14
41030: PUSH
41031: LD_INT 50
41033: PUSH
41034: LD_INT 16
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41042: LD_VAR 0 6
41046: PPUSH
41047: CALL_OW 264
41051: PUSH
41052: LD_INT 6
41054: PUSH
41055: LD_INT 46
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: IN
41062: IFFALSE 41083
// points := [ 32 , 120 , 70 ] ;
41064: LD_ADDR_VAR 0 9
41068: PUSH
41069: LD_INT 32
41071: PUSH
41072: LD_INT 120
41074: PUSH
41075: LD_INT 70
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41083: LD_VAR 0 6
41087: PPUSH
41088: CALL_OW 264
41092: PUSH
41093: LD_INT 7
41095: PUSH
41096: LD_INT 28
41098: PUSH
41099: LD_INT 45
41101: PUSH
41102: LD_EXP 41
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: IN
41113: IFFALSE 41134
// points := [ 35 , 20 , 45 ] ;
41115: LD_ADDR_VAR 0 9
41119: PUSH
41120: LD_INT 35
41122: PUSH
41123: LD_INT 20
41125: PUSH
41126: LD_INT 45
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: LIST
41133: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41134: LD_VAR 0 6
41138: PPUSH
41139: CALL_OW 264
41143: PUSH
41144: LD_INT 47
41146: PUSH
41147: EMPTY
41148: LIST
41149: IN
41150: IFFALSE 41171
// points := [ 67 , 45 , 75 ] ;
41152: LD_ADDR_VAR 0 9
41156: PUSH
41157: LD_INT 67
41159: PUSH
41160: LD_INT 45
41162: PUSH
41163: LD_INT 75
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41171: LD_VAR 0 6
41175: PPUSH
41176: CALL_OW 264
41180: PUSH
41181: LD_INT 26
41183: PUSH
41184: EMPTY
41185: LIST
41186: IN
41187: IFFALSE 41208
// points := [ 120 , 30 , 80 ] ;
41189: LD_ADDR_VAR 0 9
41193: PUSH
41194: LD_INT 120
41196: PUSH
41197: LD_INT 30
41199: PUSH
41200: LD_INT 80
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: LIST
41207: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41208: LD_VAR 0 6
41212: PPUSH
41213: CALL_OW 264
41217: PUSH
41218: LD_INT 22
41220: PUSH
41221: EMPTY
41222: LIST
41223: IN
41224: IFFALSE 41245
// points := [ 40 , 1 , 1 ] ;
41226: LD_ADDR_VAR 0 9
41230: PUSH
41231: LD_INT 40
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: LIST
41244: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41245: LD_VAR 0 6
41249: PPUSH
41250: CALL_OW 264
41254: PUSH
41255: LD_INT 29
41257: PUSH
41258: EMPTY
41259: LIST
41260: IN
41261: IFFALSE 41282
// points := [ 70 , 200 , 400 ] ;
41263: LD_ADDR_VAR 0 9
41267: PUSH
41268: LD_INT 70
41270: PUSH
41271: LD_INT 200
41273: PUSH
41274: LD_INT 400
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: LIST
41281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41282: LD_VAR 0 6
41286: PPUSH
41287: CALL_OW 264
41291: PUSH
41292: LD_INT 14
41294: PUSH
41295: LD_INT 53
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: IN
41302: IFFALSE 41323
// points := [ 40 , 10 , 20 ] ;
41304: LD_ADDR_VAR 0 9
41308: PUSH
41309: LD_INT 40
41311: PUSH
41312: LD_INT 10
41314: PUSH
41315: LD_INT 20
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: LIST
41322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41323: LD_VAR 0 6
41327: PPUSH
41328: CALL_OW 264
41332: PUSH
41333: LD_INT 9
41335: PUSH
41336: EMPTY
41337: LIST
41338: IN
41339: IFFALSE 41360
// points := [ 5 , 70 , 20 ] ;
41341: LD_ADDR_VAR 0 9
41345: PUSH
41346: LD_INT 5
41348: PUSH
41349: LD_INT 70
41351: PUSH
41352: LD_INT 20
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: LIST
41359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41360: LD_VAR 0 6
41364: PPUSH
41365: CALL_OW 264
41369: PUSH
41370: LD_INT 10
41372: PUSH
41373: EMPTY
41374: LIST
41375: IN
41376: IFFALSE 41397
// points := [ 35 , 110 , 70 ] ;
41378: LD_ADDR_VAR 0 9
41382: PUSH
41383: LD_INT 35
41385: PUSH
41386: LD_INT 110
41388: PUSH
41389: LD_INT 70
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41397: LD_VAR 0 6
41401: PPUSH
41402: CALL_OW 265
41406: PUSH
41407: LD_INT 25
41409: EQUAL
41410: IFFALSE 41431
// points := [ 80 , 65 , 100 ] ;
41412: LD_ADDR_VAR 0 9
41416: PUSH
41417: LD_INT 80
41419: PUSH
41420: LD_INT 65
41422: PUSH
41423: LD_INT 100
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: LIST
41430: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41431: LD_VAR 0 6
41435: PPUSH
41436: CALL_OW 263
41440: PUSH
41441: LD_INT 1
41443: EQUAL
41444: IFFALSE 41479
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41446: LD_ADDR_VAR 0 10
41450: PUSH
41451: LD_VAR 0 10
41455: PUSH
41456: LD_VAR 0 6
41460: PPUSH
41461: CALL_OW 311
41465: PPUSH
41466: LD_INT 3
41468: PPUSH
41469: CALL_OW 259
41473: PUSH
41474: LD_INT 4
41476: MUL
41477: MUL
41478: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41479: LD_VAR 0 6
41483: PPUSH
41484: CALL_OW 263
41488: PUSH
41489: LD_INT 2
41491: EQUAL
41492: IFFALSE 41543
// begin j := IsControledBy ( i ) ;
41494: LD_ADDR_VAR 0 7
41498: PUSH
41499: LD_VAR 0 6
41503: PPUSH
41504: CALL_OW 312
41508: ST_TO_ADDR
// if j then
41509: LD_VAR 0 7
41513: IFFALSE 41543
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41515: LD_ADDR_VAR 0 10
41519: PUSH
41520: LD_VAR 0 10
41524: PUSH
41525: LD_VAR 0 7
41529: PPUSH
41530: LD_INT 3
41532: PPUSH
41533: CALL_OW 259
41537: PUSH
41538: LD_INT 3
41540: MUL
41541: MUL
41542: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41543: LD_VAR 0 6
41547: PPUSH
41548: CALL_OW 264
41552: PUSH
41553: LD_INT 5
41555: PUSH
41556: LD_INT 6
41558: PUSH
41559: LD_INT 46
41561: PUSH
41562: LD_INT 44
41564: PUSH
41565: LD_INT 47
41567: PUSH
41568: LD_INT 45
41570: PUSH
41571: LD_INT 28
41573: PUSH
41574: LD_INT 7
41576: PUSH
41577: LD_INT 27
41579: PUSH
41580: LD_INT 29
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: IN
41595: PUSH
41596: LD_VAR 0 1
41600: PPUSH
41601: LD_INT 52
41603: PPUSH
41604: CALL_OW 321
41608: PUSH
41609: LD_INT 2
41611: EQUAL
41612: AND
41613: IFFALSE 41630
// bpoints := bpoints * 1.2 ;
41615: LD_ADDR_VAR 0 10
41619: PUSH
41620: LD_VAR 0 10
41624: PUSH
41625: LD_REAL  1.20000000000000E+0000
41628: MUL
41629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41630: LD_VAR 0 6
41634: PPUSH
41635: CALL_OW 264
41639: PUSH
41640: LD_INT 6
41642: PUSH
41643: LD_INT 46
41645: PUSH
41646: LD_INT 47
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: LIST
41653: IN
41654: IFFALSE 41671
// bpoints := bpoints * 1.2 ;
41656: LD_ADDR_VAR 0 10
41660: PUSH
41661: LD_VAR 0 10
41665: PUSH
41666: LD_REAL  1.20000000000000E+0000
41669: MUL
41670: ST_TO_ADDR
// end ; unit_building :
41671: GO 41685
41673: LD_INT 3
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41681
41679: GO 41684
41681: POP
// ; end ;
41682: GO 41685
41684: POP
// for j = 1 to 3 do
41685: LD_ADDR_VAR 0 7
41689: PUSH
41690: DOUBLE
41691: LD_INT 1
41693: DEC
41694: ST_TO_ADDR
41695: LD_INT 3
41697: PUSH
41698: FOR_TO
41699: IFFALSE 41752
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41701: LD_ADDR_VAR 0 5
41705: PUSH
41706: LD_VAR 0 5
41710: PPUSH
41711: LD_VAR 0 7
41715: PPUSH
41716: LD_VAR 0 5
41720: PUSH
41721: LD_VAR 0 7
41725: ARRAY
41726: PUSH
41727: LD_VAR 0 9
41731: PUSH
41732: LD_VAR 0 7
41736: ARRAY
41737: PUSH
41738: LD_VAR 0 10
41742: MUL
41743: PLUS
41744: PPUSH
41745: CALL_OW 1
41749: ST_TO_ADDR
41750: GO 41698
41752: POP
41753: POP
// end ;
41754: GO 40231
41756: POP
41757: POP
// result := Replace ( result , 4 , tmp ) ;
41758: LD_ADDR_VAR 0 5
41762: PUSH
41763: LD_VAR 0 5
41767: PPUSH
41768: LD_INT 4
41770: PPUSH
41771: LD_VAR 0 8
41775: PPUSH
41776: CALL_OW 1
41780: ST_TO_ADDR
// end ;
41781: LD_VAR 0 5
41785: RET
// export function DangerAtRange ( unit , range ) ; begin
41786: LD_INT 0
41788: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41789: LD_ADDR_VAR 0 3
41793: PUSH
41794: LD_VAR 0 1
41798: PPUSH
41799: CALL_OW 255
41803: PPUSH
41804: LD_VAR 0 1
41808: PPUSH
41809: CALL_OW 250
41813: PPUSH
41814: LD_VAR 0 1
41818: PPUSH
41819: CALL_OW 251
41823: PPUSH
41824: LD_VAR 0 2
41828: PPUSH
41829: CALL 40083 0 4
41833: ST_TO_ADDR
// end ;
41834: LD_VAR 0 3
41838: RET
// export function DangerInArea ( side , area ) ; begin
41839: LD_INT 0
41841: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41842: LD_ADDR_VAR 0 3
41846: PUSH
41847: LD_VAR 0 2
41851: PPUSH
41852: LD_INT 81
41854: PUSH
41855: LD_VAR 0 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PPUSH
41864: CALL_OW 70
41868: ST_TO_ADDR
// end ;
41869: LD_VAR 0 3
41873: RET
// export function IsExtension ( b ) ; begin
41874: LD_INT 0
41876: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41877: LD_ADDR_VAR 0 2
41881: PUSH
41882: LD_VAR 0 1
41886: PUSH
41887: LD_INT 23
41889: PUSH
41890: LD_INT 20
41892: PUSH
41893: LD_INT 22
41895: PUSH
41896: LD_INT 17
41898: PUSH
41899: LD_INT 24
41901: PUSH
41902: LD_INT 21
41904: PUSH
41905: LD_INT 19
41907: PUSH
41908: LD_INT 16
41910: PUSH
41911: LD_INT 25
41913: PUSH
41914: LD_INT 18
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: IN
41929: ST_TO_ADDR
// end ;
41930: LD_VAR 0 2
41934: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41935: LD_INT 0
41937: PPUSH
41938: PPUSH
41939: PPUSH
// result := [ ] ;
41940: LD_ADDR_VAR 0 4
41944: PUSH
41945: EMPTY
41946: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41947: LD_ADDR_VAR 0 5
41951: PUSH
41952: LD_VAR 0 2
41956: PPUSH
41957: LD_INT 21
41959: PUSH
41960: LD_INT 3
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PPUSH
41967: CALL_OW 70
41971: ST_TO_ADDR
// if not tmp then
41972: LD_VAR 0 5
41976: NOT
41977: IFFALSE 41981
// exit ;
41979: GO 42045
// if checkLink then
41981: LD_VAR 0 3
41985: IFFALSE 42035
// begin for i in tmp do
41987: LD_ADDR_VAR 0 6
41991: PUSH
41992: LD_VAR 0 5
41996: PUSH
41997: FOR_IN
41998: IFFALSE 42033
// if GetBase ( i ) <> base then
42000: LD_VAR 0 6
42004: PPUSH
42005: CALL_OW 274
42009: PUSH
42010: LD_VAR 0 1
42014: NONEQUAL
42015: IFFALSE 42031
// ComLinkToBase ( base , i ) ;
42017: LD_VAR 0 1
42021: PPUSH
42022: LD_VAR 0 6
42026: PPUSH
42027: CALL_OW 169
42031: GO 41997
42033: POP
42034: POP
// end ; result := tmp ;
42035: LD_ADDR_VAR 0 4
42039: PUSH
42040: LD_VAR 0 5
42044: ST_TO_ADDR
// end ;
42045: LD_VAR 0 4
42049: RET
// export function ComComplete ( units , b ) ; var i ; begin
42050: LD_INT 0
42052: PPUSH
42053: PPUSH
// if not units then
42054: LD_VAR 0 1
42058: NOT
42059: IFFALSE 42063
// exit ;
42061: GO 42153
// for i in units do
42063: LD_ADDR_VAR 0 4
42067: PUSH
42068: LD_VAR 0 1
42072: PUSH
42073: FOR_IN
42074: IFFALSE 42151
// if BuildingStatus ( b ) = bs_build then
42076: LD_VAR 0 2
42080: PPUSH
42081: CALL_OW 461
42085: PUSH
42086: LD_INT 1
42088: EQUAL
42089: IFFALSE 42149
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42091: LD_VAR 0 4
42095: PPUSH
42096: LD_STRING h
42098: PUSH
42099: LD_VAR 0 2
42103: PPUSH
42104: CALL_OW 250
42108: PUSH
42109: LD_VAR 0 2
42113: PPUSH
42114: CALL_OW 251
42118: PUSH
42119: LD_VAR 0 2
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: PUSH
42142: EMPTY
42143: LIST
42144: PPUSH
42145: CALL_OW 446
42149: GO 42073
42151: POP
42152: POP
// end ;
42153: LD_VAR 0 3
42157: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42158: LD_INT 0
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
42164: PPUSH
42165: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42166: LD_VAR 0 1
42170: NOT
42171: PUSH
42172: LD_VAR 0 1
42176: PPUSH
42177: CALL_OW 263
42181: PUSH
42182: LD_INT 2
42184: NONEQUAL
42185: OR
42186: IFFALSE 42190
// exit ;
42188: GO 42506
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42190: LD_ADDR_VAR 0 6
42194: PUSH
42195: LD_INT 22
42197: PUSH
42198: LD_VAR 0 1
42202: PPUSH
42203: CALL_OW 255
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: LD_INT 30
42217: PUSH
42218: LD_INT 36
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 34
42227: PUSH
42228: LD_INT 31
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: LIST
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PPUSH
42244: CALL_OW 69
42248: ST_TO_ADDR
// if not tmp then
42249: LD_VAR 0 6
42253: NOT
42254: IFFALSE 42258
// exit ;
42256: GO 42506
// result := [ ] ;
42258: LD_ADDR_VAR 0 2
42262: PUSH
42263: EMPTY
42264: ST_TO_ADDR
// for i in tmp do
42265: LD_ADDR_VAR 0 3
42269: PUSH
42270: LD_VAR 0 6
42274: PUSH
42275: FOR_IN
42276: IFFALSE 42347
// begin t := UnitsInside ( i ) ;
42278: LD_ADDR_VAR 0 4
42282: PUSH
42283: LD_VAR 0 3
42287: PPUSH
42288: CALL_OW 313
42292: ST_TO_ADDR
// if t then
42293: LD_VAR 0 4
42297: IFFALSE 42345
// for j in t do
42299: LD_ADDR_VAR 0 7
42303: PUSH
42304: LD_VAR 0 4
42308: PUSH
42309: FOR_IN
42310: IFFALSE 42343
// result := Replace ( result , result + 1 , j ) ;
42312: LD_ADDR_VAR 0 2
42316: PUSH
42317: LD_VAR 0 2
42321: PPUSH
42322: LD_VAR 0 2
42326: PUSH
42327: LD_INT 1
42329: PLUS
42330: PPUSH
42331: LD_VAR 0 7
42335: PPUSH
42336: CALL_OW 1
42340: ST_TO_ADDR
42341: GO 42309
42343: POP
42344: POP
// end ;
42345: GO 42275
42347: POP
42348: POP
// if not result then
42349: LD_VAR 0 2
42353: NOT
42354: IFFALSE 42358
// exit ;
42356: GO 42506
// mech := result [ 1 ] ;
42358: LD_ADDR_VAR 0 5
42362: PUSH
42363: LD_VAR 0 2
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: ST_TO_ADDR
// if result > 1 then
42372: LD_VAR 0 2
42376: PUSH
42377: LD_INT 1
42379: GREATER
42380: IFFALSE 42492
// begin for i = 2 to result do
42382: LD_ADDR_VAR 0 3
42386: PUSH
42387: DOUBLE
42388: LD_INT 2
42390: DEC
42391: ST_TO_ADDR
42392: LD_VAR 0 2
42396: PUSH
42397: FOR_TO
42398: IFFALSE 42490
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42400: LD_ADDR_VAR 0 4
42404: PUSH
42405: LD_VAR 0 2
42409: PUSH
42410: LD_VAR 0 3
42414: ARRAY
42415: PPUSH
42416: LD_INT 3
42418: PPUSH
42419: CALL_OW 259
42423: PUSH
42424: LD_VAR 0 2
42428: PUSH
42429: LD_VAR 0 3
42433: ARRAY
42434: PPUSH
42435: CALL_OW 432
42439: MINUS
42440: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42441: LD_VAR 0 4
42445: PUSH
42446: LD_VAR 0 5
42450: PPUSH
42451: LD_INT 3
42453: PPUSH
42454: CALL_OW 259
42458: PUSH
42459: LD_VAR 0 5
42463: PPUSH
42464: CALL_OW 432
42468: MINUS
42469: GREATEREQUAL
42470: IFFALSE 42488
// mech := result [ i ] ;
42472: LD_ADDR_VAR 0 5
42476: PUSH
42477: LD_VAR 0 2
42481: PUSH
42482: LD_VAR 0 3
42486: ARRAY
42487: ST_TO_ADDR
// end ;
42488: GO 42397
42490: POP
42491: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42492: LD_VAR 0 1
42496: PPUSH
42497: LD_VAR 0 5
42501: PPUSH
42502: CALL_OW 135
// end ;
42506: LD_VAR 0 2
42510: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42511: LD_INT 0
42513: PPUSH
42514: PPUSH
42515: PPUSH
42516: PPUSH
42517: PPUSH
42518: PPUSH
42519: PPUSH
42520: PPUSH
42521: PPUSH
42522: PPUSH
42523: PPUSH
42524: PPUSH
42525: PPUSH
// result := [ ] ;
42526: LD_ADDR_VAR 0 7
42530: PUSH
42531: EMPTY
42532: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42533: LD_VAR 0 1
42537: PPUSH
42538: CALL_OW 266
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: IN
42553: NOT
42554: IFFALSE 42558
// exit ;
42556: GO 44192
// if name then
42558: LD_VAR 0 3
42562: IFFALSE 42578
// SetBName ( base_dep , name ) ;
42564: LD_VAR 0 1
42568: PPUSH
42569: LD_VAR 0 3
42573: PPUSH
42574: CALL_OW 500
// base := GetBase ( base_dep ) ;
42578: LD_ADDR_VAR 0 15
42582: PUSH
42583: LD_VAR 0 1
42587: PPUSH
42588: CALL_OW 274
42592: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42593: LD_ADDR_VAR 0 16
42597: PUSH
42598: LD_VAR 0 1
42602: PPUSH
42603: CALL_OW 255
42607: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42608: LD_ADDR_VAR 0 17
42612: PUSH
42613: LD_VAR 0 1
42617: PPUSH
42618: CALL_OW 248
42622: ST_TO_ADDR
// if sources then
42623: LD_VAR 0 5
42627: IFFALSE 42674
// for i = 1 to 3 do
42629: LD_ADDR_VAR 0 8
42633: PUSH
42634: DOUBLE
42635: LD_INT 1
42637: DEC
42638: ST_TO_ADDR
42639: LD_INT 3
42641: PUSH
42642: FOR_TO
42643: IFFALSE 42672
// AddResourceType ( base , i , sources [ i ] ) ;
42645: LD_VAR 0 15
42649: PPUSH
42650: LD_VAR 0 8
42654: PPUSH
42655: LD_VAR 0 5
42659: PUSH
42660: LD_VAR 0 8
42664: ARRAY
42665: PPUSH
42666: CALL_OW 276
42670: GO 42642
42672: POP
42673: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42674: LD_ADDR_VAR 0 18
42678: PUSH
42679: LD_VAR 0 15
42683: PPUSH
42684: LD_VAR 0 2
42688: PPUSH
42689: LD_INT 1
42691: PPUSH
42692: CALL 41935 0 3
42696: ST_TO_ADDR
// InitHc ;
42697: CALL_OW 19
// InitUc ;
42701: CALL_OW 18
// uc_side := side ;
42705: LD_ADDR_OWVAR 20
42709: PUSH
42710: LD_VAR 0 16
42714: ST_TO_ADDR
// uc_nation := nation ;
42715: LD_ADDR_OWVAR 21
42719: PUSH
42720: LD_VAR 0 17
42724: ST_TO_ADDR
// if buildings then
42725: LD_VAR 0 18
42729: IFFALSE 44051
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42731: LD_ADDR_VAR 0 19
42735: PUSH
42736: LD_VAR 0 18
42740: PPUSH
42741: LD_INT 2
42743: PUSH
42744: LD_INT 30
42746: PUSH
42747: LD_INT 29
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 30
42756: PUSH
42757: LD_INT 30
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: PPUSH
42769: CALL_OW 72
42773: ST_TO_ADDR
// if tmp then
42774: LD_VAR 0 19
42778: IFFALSE 42826
// for i in tmp do
42780: LD_ADDR_VAR 0 8
42784: PUSH
42785: LD_VAR 0 19
42789: PUSH
42790: FOR_IN
42791: IFFALSE 42824
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42793: LD_VAR 0 8
42797: PPUSH
42798: CALL_OW 250
42802: PPUSH
42803: LD_VAR 0 8
42807: PPUSH
42808: CALL_OW 251
42812: PPUSH
42813: LD_VAR 0 16
42817: PPUSH
42818: CALL_OW 441
42822: GO 42790
42824: POP
42825: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42826: LD_VAR 0 18
42830: PPUSH
42831: LD_INT 2
42833: PUSH
42834: LD_INT 30
42836: PUSH
42837: LD_INT 32
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 30
42846: PUSH
42847: LD_INT 33
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: LIST
42858: PPUSH
42859: CALL_OW 72
42863: IFFALSE 42951
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42865: LD_ADDR_VAR 0 8
42869: PUSH
42870: LD_VAR 0 18
42874: PPUSH
42875: LD_INT 2
42877: PUSH
42878: LD_INT 30
42880: PUSH
42881: LD_INT 32
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 30
42890: PUSH
42891: LD_INT 33
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: PPUSH
42903: CALL_OW 72
42907: PUSH
42908: FOR_IN
42909: IFFALSE 42949
// begin if not GetBWeapon ( i ) then
42911: LD_VAR 0 8
42915: PPUSH
42916: CALL_OW 269
42920: NOT
42921: IFFALSE 42947
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42923: LD_VAR 0 8
42927: PPUSH
42928: LD_VAR 0 8
42932: PPUSH
42933: LD_VAR 0 2
42937: PPUSH
42938: CALL 44197 0 2
42942: PPUSH
42943: CALL_OW 431
// end ;
42947: GO 42908
42949: POP
42950: POP
// end ; for i = 1 to personel do
42951: LD_ADDR_VAR 0 8
42955: PUSH
42956: DOUBLE
42957: LD_INT 1
42959: DEC
42960: ST_TO_ADDR
42961: LD_VAR 0 6
42965: PUSH
42966: FOR_TO
42967: IFFALSE 44031
// begin if i > 4 then
42969: LD_VAR 0 8
42973: PUSH
42974: LD_INT 4
42976: GREATER
42977: IFFALSE 42981
// break ;
42979: GO 44031
// case i of 1 :
42981: LD_VAR 0 8
42985: PUSH
42986: LD_INT 1
42988: DOUBLE
42989: EQUAL
42990: IFTRUE 42994
42992: GO 43074
42994: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42995: LD_ADDR_VAR 0 12
42999: PUSH
43000: LD_VAR 0 18
43004: PPUSH
43005: LD_INT 22
43007: PUSH
43008: LD_VAR 0 16
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 58
43019: PUSH
43020: EMPTY
43021: LIST
43022: PUSH
43023: LD_INT 2
43025: PUSH
43026: LD_INT 30
43028: PUSH
43029: LD_INT 32
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 30
43038: PUSH
43039: LD_INT 4
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 30
43048: PUSH
43049: LD_INT 5
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: PPUSH
43067: CALL_OW 72
43071: ST_TO_ADDR
43072: GO 43296
43074: LD_INT 2
43076: DOUBLE
43077: EQUAL
43078: IFTRUE 43082
43080: GO 43144
43082: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43083: LD_ADDR_VAR 0 12
43087: PUSH
43088: LD_VAR 0 18
43092: PPUSH
43093: LD_INT 22
43095: PUSH
43096: LD_VAR 0 16
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: LD_INT 30
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 30
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: LIST
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PPUSH
43137: CALL_OW 72
43141: ST_TO_ADDR
43142: GO 43296
43144: LD_INT 3
43146: DOUBLE
43147: EQUAL
43148: IFTRUE 43152
43150: GO 43214
43152: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43153: LD_ADDR_VAR 0 12
43157: PUSH
43158: LD_VAR 0 18
43162: PPUSH
43163: LD_INT 22
43165: PUSH
43166: LD_VAR 0 16
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: LD_INT 30
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 30
43190: PUSH
43191: LD_INT 3
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PPUSH
43207: CALL_OW 72
43211: ST_TO_ADDR
43212: GO 43296
43214: LD_INT 4
43216: DOUBLE
43217: EQUAL
43218: IFTRUE 43222
43220: GO 43295
43222: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43223: LD_ADDR_VAR 0 12
43227: PUSH
43228: LD_VAR 0 18
43232: PPUSH
43233: LD_INT 22
43235: PUSH
43236: LD_VAR 0 16
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: PUSH
43248: LD_INT 30
43250: PUSH
43251: LD_INT 6
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 30
43260: PUSH
43261: LD_INT 7
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 30
43270: PUSH
43271: LD_INT 8
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PPUSH
43288: CALL_OW 72
43292: ST_TO_ADDR
43293: GO 43296
43295: POP
// if i = 1 then
43296: LD_VAR 0 8
43300: PUSH
43301: LD_INT 1
43303: EQUAL
43304: IFFALSE 43415
// begin tmp := [ ] ;
43306: LD_ADDR_VAR 0 19
43310: PUSH
43311: EMPTY
43312: ST_TO_ADDR
// for j in f do
43313: LD_ADDR_VAR 0 9
43317: PUSH
43318: LD_VAR 0 12
43322: PUSH
43323: FOR_IN
43324: IFFALSE 43397
// if GetBType ( j ) = b_bunker then
43326: LD_VAR 0 9
43330: PPUSH
43331: CALL_OW 266
43335: PUSH
43336: LD_INT 32
43338: EQUAL
43339: IFFALSE 43366
// tmp := Insert ( tmp , 1 , j ) else
43341: LD_ADDR_VAR 0 19
43345: PUSH
43346: LD_VAR 0 19
43350: PPUSH
43351: LD_INT 1
43353: PPUSH
43354: LD_VAR 0 9
43358: PPUSH
43359: CALL_OW 2
43363: ST_TO_ADDR
43364: GO 43395
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43366: LD_ADDR_VAR 0 19
43370: PUSH
43371: LD_VAR 0 19
43375: PPUSH
43376: LD_VAR 0 19
43380: PUSH
43381: LD_INT 1
43383: PLUS
43384: PPUSH
43385: LD_VAR 0 9
43389: PPUSH
43390: CALL_OW 2
43394: ST_TO_ADDR
43395: GO 43323
43397: POP
43398: POP
// if tmp then
43399: LD_VAR 0 19
43403: IFFALSE 43415
// f := tmp ;
43405: LD_ADDR_VAR 0 12
43409: PUSH
43410: LD_VAR 0 19
43414: ST_TO_ADDR
// end ; x := personel [ i ] ;
43415: LD_ADDR_VAR 0 13
43419: PUSH
43420: LD_VAR 0 6
43424: PUSH
43425: LD_VAR 0 8
43429: ARRAY
43430: ST_TO_ADDR
// if x = - 1 then
43431: LD_VAR 0 13
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: EQUAL
43440: IFFALSE 43649
// begin for j in f do
43442: LD_ADDR_VAR 0 9
43446: PUSH
43447: LD_VAR 0 12
43451: PUSH
43452: FOR_IN
43453: IFFALSE 43645
// repeat InitHc ;
43455: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43459: LD_VAR 0 9
43463: PPUSH
43464: CALL_OW 266
43468: PUSH
43469: LD_INT 5
43471: EQUAL
43472: IFFALSE 43542
// begin if UnitsInside ( j ) < 3 then
43474: LD_VAR 0 9
43478: PPUSH
43479: CALL_OW 313
43483: PUSH
43484: LD_INT 3
43486: LESS
43487: IFFALSE 43523
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43489: LD_INT 0
43491: PPUSH
43492: LD_INT 5
43494: PUSH
43495: LD_INT 8
43497: PUSH
43498: LD_INT 9
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: PUSH
43506: LD_VAR 0 17
43510: ARRAY
43511: PPUSH
43512: LD_VAR 0 4
43516: PPUSH
43517: CALL_OW 380
43521: GO 43540
// PrepareHuman ( false , i , skill ) ;
43523: LD_INT 0
43525: PPUSH
43526: LD_VAR 0 8
43530: PPUSH
43531: LD_VAR 0 4
43535: PPUSH
43536: CALL_OW 380
// end else
43540: GO 43559
// PrepareHuman ( false , i , skill ) ;
43542: LD_INT 0
43544: PPUSH
43545: LD_VAR 0 8
43549: PPUSH
43550: LD_VAR 0 4
43554: PPUSH
43555: CALL_OW 380
// un := CreateHuman ;
43559: LD_ADDR_VAR 0 14
43563: PUSH
43564: CALL_OW 44
43568: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43569: LD_ADDR_VAR 0 7
43573: PUSH
43574: LD_VAR 0 7
43578: PPUSH
43579: LD_INT 1
43581: PPUSH
43582: LD_VAR 0 14
43586: PPUSH
43587: CALL_OW 2
43591: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43592: LD_VAR 0 14
43596: PPUSH
43597: LD_VAR 0 9
43601: PPUSH
43602: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43606: LD_VAR 0 9
43610: PPUSH
43611: CALL_OW 313
43615: PUSH
43616: LD_INT 6
43618: EQUAL
43619: PUSH
43620: LD_VAR 0 9
43624: PPUSH
43625: CALL_OW 266
43629: PUSH
43630: LD_INT 32
43632: PUSH
43633: LD_INT 31
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: IN
43640: OR
43641: IFFALSE 43455
43643: GO 43452
43645: POP
43646: POP
// end else
43647: GO 44029
// for j = 1 to x do
43649: LD_ADDR_VAR 0 9
43653: PUSH
43654: DOUBLE
43655: LD_INT 1
43657: DEC
43658: ST_TO_ADDR
43659: LD_VAR 0 13
43663: PUSH
43664: FOR_TO
43665: IFFALSE 44027
// begin InitHc ;
43667: CALL_OW 19
// if not f then
43671: LD_VAR 0 12
43675: NOT
43676: IFFALSE 43765
// begin PrepareHuman ( false , i , skill ) ;
43678: LD_INT 0
43680: PPUSH
43681: LD_VAR 0 8
43685: PPUSH
43686: LD_VAR 0 4
43690: PPUSH
43691: CALL_OW 380
// un := CreateHuman ;
43695: LD_ADDR_VAR 0 14
43699: PUSH
43700: CALL_OW 44
43704: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43705: LD_ADDR_VAR 0 7
43709: PUSH
43710: LD_VAR 0 7
43714: PPUSH
43715: LD_INT 1
43717: PPUSH
43718: LD_VAR 0 14
43722: PPUSH
43723: CALL_OW 2
43727: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43728: LD_VAR 0 14
43732: PPUSH
43733: LD_VAR 0 1
43737: PPUSH
43738: CALL_OW 250
43742: PPUSH
43743: LD_VAR 0 1
43747: PPUSH
43748: CALL_OW 251
43752: PPUSH
43753: LD_INT 10
43755: PPUSH
43756: LD_INT 0
43758: PPUSH
43759: CALL_OW 50
// continue ;
43763: GO 43664
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43765: LD_VAR 0 12
43769: PUSH
43770: LD_INT 1
43772: ARRAY
43773: PPUSH
43774: CALL_OW 313
43778: PUSH
43779: LD_VAR 0 12
43783: PUSH
43784: LD_INT 1
43786: ARRAY
43787: PPUSH
43788: CALL_OW 266
43792: PUSH
43793: LD_INT 32
43795: PUSH
43796: LD_INT 31
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: IN
43803: AND
43804: PUSH
43805: LD_VAR 0 12
43809: PUSH
43810: LD_INT 1
43812: ARRAY
43813: PPUSH
43814: CALL_OW 313
43818: PUSH
43819: LD_INT 6
43821: EQUAL
43822: OR
43823: IFFALSE 43843
// f := Delete ( f , 1 ) ;
43825: LD_ADDR_VAR 0 12
43829: PUSH
43830: LD_VAR 0 12
43834: PPUSH
43835: LD_INT 1
43837: PPUSH
43838: CALL_OW 3
43842: ST_TO_ADDR
// if not f then
43843: LD_VAR 0 12
43847: NOT
43848: IFFALSE 43866
// begin x := x + 2 ;
43850: LD_ADDR_VAR 0 13
43854: PUSH
43855: LD_VAR 0 13
43859: PUSH
43860: LD_INT 2
43862: PLUS
43863: ST_TO_ADDR
// continue ;
43864: GO 43664
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43866: LD_VAR 0 12
43870: PUSH
43871: LD_INT 1
43873: ARRAY
43874: PPUSH
43875: CALL_OW 266
43879: PUSH
43880: LD_INT 5
43882: EQUAL
43883: IFFALSE 43957
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43885: LD_VAR 0 12
43889: PUSH
43890: LD_INT 1
43892: ARRAY
43893: PPUSH
43894: CALL_OW 313
43898: PUSH
43899: LD_INT 3
43901: LESS
43902: IFFALSE 43938
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43904: LD_INT 0
43906: PPUSH
43907: LD_INT 5
43909: PUSH
43910: LD_INT 8
43912: PUSH
43913: LD_INT 9
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: PUSH
43921: LD_VAR 0 17
43925: ARRAY
43926: PPUSH
43927: LD_VAR 0 4
43931: PPUSH
43932: CALL_OW 380
43936: GO 43955
// PrepareHuman ( false , i , skill ) ;
43938: LD_INT 0
43940: PPUSH
43941: LD_VAR 0 8
43945: PPUSH
43946: LD_VAR 0 4
43950: PPUSH
43951: CALL_OW 380
// end else
43955: GO 43974
// PrepareHuman ( false , i , skill ) ;
43957: LD_INT 0
43959: PPUSH
43960: LD_VAR 0 8
43964: PPUSH
43965: LD_VAR 0 4
43969: PPUSH
43970: CALL_OW 380
// un := CreateHuman ;
43974: LD_ADDR_VAR 0 14
43978: PUSH
43979: CALL_OW 44
43983: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43984: LD_ADDR_VAR 0 7
43988: PUSH
43989: LD_VAR 0 7
43993: PPUSH
43994: LD_INT 1
43996: PPUSH
43997: LD_VAR 0 14
44001: PPUSH
44002: CALL_OW 2
44006: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44007: LD_VAR 0 14
44011: PPUSH
44012: LD_VAR 0 12
44016: PUSH
44017: LD_INT 1
44019: ARRAY
44020: PPUSH
44021: CALL_OW 52
// end ;
44025: GO 43664
44027: POP
44028: POP
// end ;
44029: GO 42966
44031: POP
44032: POP
// result := result ^ buildings ;
44033: LD_ADDR_VAR 0 7
44037: PUSH
44038: LD_VAR 0 7
44042: PUSH
44043: LD_VAR 0 18
44047: ADD
44048: ST_TO_ADDR
// end else
44049: GO 44192
// begin for i = 1 to personel do
44051: LD_ADDR_VAR 0 8
44055: PUSH
44056: DOUBLE
44057: LD_INT 1
44059: DEC
44060: ST_TO_ADDR
44061: LD_VAR 0 6
44065: PUSH
44066: FOR_TO
44067: IFFALSE 44190
// begin if i > 4 then
44069: LD_VAR 0 8
44073: PUSH
44074: LD_INT 4
44076: GREATER
44077: IFFALSE 44081
// break ;
44079: GO 44190
// x := personel [ i ] ;
44081: LD_ADDR_VAR 0 13
44085: PUSH
44086: LD_VAR 0 6
44090: PUSH
44091: LD_VAR 0 8
44095: ARRAY
44096: ST_TO_ADDR
// if x = - 1 then
44097: LD_VAR 0 13
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: EQUAL
44106: IFFALSE 44110
// continue ;
44108: GO 44066
// PrepareHuman ( false , i , skill ) ;
44110: LD_INT 0
44112: PPUSH
44113: LD_VAR 0 8
44117: PPUSH
44118: LD_VAR 0 4
44122: PPUSH
44123: CALL_OW 380
// un := CreateHuman ;
44127: LD_ADDR_VAR 0 14
44131: PUSH
44132: CALL_OW 44
44136: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44137: LD_VAR 0 14
44141: PPUSH
44142: LD_VAR 0 1
44146: PPUSH
44147: CALL_OW 250
44151: PPUSH
44152: LD_VAR 0 1
44156: PPUSH
44157: CALL_OW 251
44161: PPUSH
44162: LD_INT 10
44164: PPUSH
44165: LD_INT 0
44167: PPUSH
44168: CALL_OW 50
// result := result ^ un ;
44172: LD_ADDR_VAR 0 7
44176: PUSH
44177: LD_VAR 0 7
44181: PUSH
44182: LD_VAR 0 14
44186: ADD
44187: ST_TO_ADDR
// end ;
44188: GO 44066
44190: POP
44191: POP
// end ; end ;
44192: LD_VAR 0 7
44196: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44197: LD_INT 0
44199: PPUSH
44200: PPUSH
44201: PPUSH
44202: PPUSH
44203: PPUSH
44204: PPUSH
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
44209: PPUSH
44210: PPUSH
44211: PPUSH
44212: PPUSH
44213: PPUSH
44214: PPUSH
// result := false ;
44215: LD_ADDR_VAR 0 3
44219: PUSH
44220: LD_INT 0
44222: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44223: LD_VAR 0 1
44227: NOT
44228: PUSH
44229: LD_VAR 0 1
44233: PPUSH
44234: CALL_OW 266
44238: PUSH
44239: LD_INT 32
44241: PUSH
44242: LD_INT 33
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: IN
44249: NOT
44250: OR
44251: IFFALSE 44255
// exit ;
44253: GO 45364
// nat := GetNation ( tower ) ;
44255: LD_ADDR_VAR 0 12
44259: PUSH
44260: LD_VAR 0 1
44264: PPUSH
44265: CALL_OW 248
44269: ST_TO_ADDR
// side := GetSide ( tower ) ;
44270: LD_ADDR_VAR 0 16
44274: PUSH
44275: LD_VAR 0 1
44279: PPUSH
44280: CALL_OW 255
44284: ST_TO_ADDR
// x := GetX ( tower ) ;
44285: LD_ADDR_VAR 0 10
44289: PUSH
44290: LD_VAR 0 1
44294: PPUSH
44295: CALL_OW 250
44299: ST_TO_ADDR
// y := GetY ( tower ) ;
44300: LD_ADDR_VAR 0 11
44304: PUSH
44305: LD_VAR 0 1
44309: PPUSH
44310: CALL_OW 251
44314: ST_TO_ADDR
// if not x or not y then
44315: LD_VAR 0 10
44319: NOT
44320: PUSH
44321: LD_VAR 0 11
44325: NOT
44326: OR
44327: IFFALSE 44331
// exit ;
44329: GO 45364
// weapon := 0 ;
44331: LD_ADDR_VAR 0 18
44335: PUSH
44336: LD_INT 0
44338: ST_TO_ADDR
// fac_list := [ ] ;
44339: LD_ADDR_VAR 0 17
44343: PUSH
44344: EMPTY
44345: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44346: LD_ADDR_VAR 0 6
44350: PUSH
44351: LD_VAR 0 1
44355: PPUSH
44356: CALL_OW 274
44360: PPUSH
44361: LD_VAR 0 2
44365: PPUSH
44366: LD_INT 0
44368: PPUSH
44369: CALL 41935 0 3
44373: PPUSH
44374: LD_INT 30
44376: PUSH
44377: LD_INT 3
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PPUSH
44384: CALL_OW 72
44388: ST_TO_ADDR
// if not factories then
44389: LD_VAR 0 6
44393: NOT
44394: IFFALSE 44398
// exit ;
44396: GO 45364
// for i in factories do
44398: LD_ADDR_VAR 0 8
44402: PUSH
44403: LD_VAR 0 6
44407: PUSH
44408: FOR_IN
44409: IFFALSE 44434
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44411: LD_ADDR_VAR 0 17
44415: PUSH
44416: LD_VAR 0 17
44420: PUSH
44421: LD_VAR 0 8
44425: PPUSH
44426: CALL_OW 478
44430: UNION
44431: ST_TO_ADDR
44432: GO 44408
44434: POP
44435: POP
// if not fac_list then
44436: LD_VAR 0 17
44440: NOT
44441: IFFALSE 44445
// exit ;
44443: GO 45364
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44445: LD_ADDR_VAR 0 5
44449: PUSH
44450: LD_INT 4
44452: PUSH
44453: LD_INT 5
44455: PUSH
44456: LD_INT 9
44458: PUSH
44459: LD_INT 10
44461: PUSH
44462: LD_INT 6
44464: PUSH
44465: LD_INT 7
44467: PUSH
44468: LD_INT 11
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 27
44482: PUSH
44483: LD_INT 28
44485: PUSH
44486: LD_INT 26
44488: PUSH
44489: LD_INT 30
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 43
44500: PUSH
44501: LD_INT 44
44503: PUSH
44504: LD_INT 46
44506: PUSH
44507: LD_INT 45
44509: PUSH
44510: LD_INT 47
44512: PUSH
44513: LD_INT 49
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: LIST
44528: PUSH
44529: LD_VAR 0 12
44533: ARRAY
44534: ST_TO_ADDR
// list := list isect fac_list ;
44535: LD_ADDR_VAR 0 5
44539: PUSH
44540: LD_VAR 0 5
44544: PUSH
44545: LD_VAR 0 17
44549: ISECT
44550: ST_TO_ADDR
// if not list then
44551: LD_VAR 0 5
44555: NOT
44556: IFFALSE 44560
// exit ;
44558: GO 45364
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44560: LD_VAR 0 12
44564: PUSH
44565: LD_INT 3
44567: EQUAL
44568: PUSH
44569: LD_INT 49
44571: PUSH
44572: LD_VAR 0 5
44576: IN
44577: AND
44578: PUSH
44579: LD_INT 31
44581: PPUSH
44582: LD_VAR 0 16
44586: PPUSH
44587: CALL_OW 321
44591: PUSH
44592: LD_INT 2
44594: EQUAL
44595: AND
44596: IFFALSE 44656
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44598: LD_INT 22
44600: PUSH
44601: LD_VAR 0 16
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 35
44612: PUSH
44613: LD_INT 49
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 91
44622: PUSH
44623: LD_VAR 0 1
44627: PUSH
44628: LD_INT 10
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: LIST
44640: PPUSH
44641: CALL_OW 69
44645: NOT
44646: IFFALSE 44656
// weapon := ru_time_lapser ;
44648: LD_ADDR_VAR 0 18
44652: PUSH
44653: LD_INT 49
44655: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44656: LD_VAR 0 12
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: IN
44671: PUSH
44672: LD_INT 11
44674: PUSH
44675: LD_VAR 0 5
44679: IN
44680: PUSH
44681: LD_INT 30
44683: PUSH
44684: LD_VAR 0 5
44688: IN
44689: OR
44690: AND
44691: PUSH
44692: LD_INT 6
44694: PPUSH
44695: LD_VAR 0 16
44699: PPUSH
44700: CALL_OW 321
44704: PUSH
44705: LD_INT 2
44707: EQUAL
44708: AND
44709: IFFALSE 44874
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44711: LD_INT 22
44713: PUSH
44714: LD_VAR 0 16
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: LD_INT 35
44728: PUSH
44729: LD_INT 11
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 35
44738: PUSH
44739: LD_INT 30
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 91
44753: PUSH
44754: LD_VAR 0 1
44758: PUSH
44759: LD_INT 18
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: LIST
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: PPUSH
44772: CALL_OW 69
44776: NOT
44777: PUSH
44778: LD_INT 22
44780: PUSH
44781: LD_VAR 0 16
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: LD_INT 30
44795: PUSH
44796: LD_INT 32
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 30
44805: PUSH
44806: LD_INT 33
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 91
44820: PUSH
44821: LD_VAR 0 1
44825: PUSH
44826: LD_INT 12
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: LIST
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: LIST
44838: PUSH
44839: EMPTY
44840: LIST
44841: PPUSH
44842: CALL_OW 69
44846: PUSH
44847: LD_INT 2
44849: GREATER
44850: AND
44851: IFFALSE 44874
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44853: LD_ADDR_VAR 0 18
44857: PUSH
44858: LD_INT 11
44860: PUSH
44861: LD_INT 30
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_VAR 0 12
44872: ARRAY
44873: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44874: LD_VAR 0 18
44878: NOT
44879: PUSH
44880: LD_INT 40
44882: PPUSH
44883: LD_VAR 0 16
44887: PPUSH
44888: CALL_OW 321
44892: PUSH
44893: LD_INT 2
44895: EQUAL
44896: AND
44897: PUSH
44898: LD_INT 7
44900: PUSH
44901: LD_VAR 0 5
44905: IN
44906: PUSH
44907: LD_INT 28
44909: PUSH
44910: LD_VAR 0 5
44914: IN
44915: OR
44916: PUSH
44917: LD_INT 45
44919: PUSH
44920: LD_VAR 0 5
44924: IN
44925: OR
44926: AND
44927: IFFALSE 45181
// begin hex := GetHexInfo ( x , y ) ;
44929: LD_ADDR_VAR 0 4
44933: PUSH
44934: LD_VAR 0 10
44938: PPUSH
44939: LD_VAR 0 11
44943: PPUSH
44944: CALL_OW 546
44948: ST_TO_ADDR
// if hex [ 1 ] then
44949: LD_VAR 0 4
44953: PUSH
44954: LD_INT 1
44956: ARRAY
44957: IFFALSE 44961
// exit ;
44959: GO 45364
// height := hex [ 2 ] ;
44961: LD_ADDR_VAR 0 15
44965: PUSH
44966: LD_VAR 0 4
44970: PUSH
44971: LD_INT 2
44973: ARRAY
44974: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44975: LD_ADDR_VAR 0 14
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: LD_INT 3
44988: PUSH
44989: LD_INT 5
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: ST_TO_ADDR
// for i in tmp do
44998: LD_ADDR_VAR 0 8
45002: PUSH
45003: LD_VAR 0 14
45007: PUSH
45008: FOR_IN
45009: IFFALSE 45179
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45011: LD_ADDR_VAR 0 9
45015: PUSH
45016: LD_VAR 0 10
45020: PPUSH
45021: LD_VAR 0 8
45025: PPUSH
45026: LD_INT 5
45028: PPUSH
45029: CALL_OW 272
45033: PUSH
45034: LD_VAR 0 11
45038: PPUSH
45039: LD_VAR 0 8
45043: PPUSH
45044: LD_INT 5
45046: PPUSH
45047: CALL_OW 273
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45056: LD_VAR 0 9
45060: PUSH
45061: LD_INT 1
45063: ARRAY
45064: PPUSH
45065: LD_VAR 0 9
45069: PUSH
45070: LD_INT 2
45072: ARRAY
45073: PPUSH
45074: CALL_OW 488
45078: IFFALSE 45177
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45080: LD_ADDR_VAR 0 4
45084: PUSH
45085: LD_VAR 0 9
45089: PUSH
45090: LD_INT 1
45092: ARRAY
45093: PPUSH
45094: LD_VAR 0 9
45098: PUSH
45099: LD_INT 2
45101: ARRAY
45102: PPUSH
45103: CALL_OW 546
45107: ST_TO_ADDR
// if hex [ 1 ] then
45108: LD_VAR 0 4
45112: PUSH
45113: LD_INT 1
45115: ARRAY
45116: IFFALSE 45120
// continue ;
45118: GO 45008
// h := hex [ 2 ] ;
45120: LD_ADDR_VAR 0 13
45124: PUSH
45125: LD_VAR 0 4
45129: PUSH
45130: LD_INT 2
45132: ARRAY
45133: ST_TO_ADDR
// if h + 7 < height then
45134: LD_VAR 0 13
45138: PUSH
45139: LD_INT 7
45141: PLUS
45142: PUSH
45143: LD_VAR 0 15
45147: LESS
45148: IFFALSE 45177
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45150: LD_ADDR_VAR 0 18
45154: PUSH
45155: LD_INT 7
45157: PUSH
45158: LD_INT 28
45160: PUSH
45161: LD_INT 45
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: LIST
45168: PUSH
45169: LD_VAR 0 12
45173: ARRAY
45174: ST_TO_ADDR
// break ;
45175: GO 45179
// end ; end ; end ;
45177: GO 45008
45179: POP
45180: POP
// end ; if not weapon then
45181: LD_VAR 0 18
45185: NOT
45186: IFFALSE 45246
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45188: LD_ADDR_VAR 0 5
45192: PUSH
45193: LD_VAR 0 5
45197: PUSH
45198: LD_INT 11
45200: PUSH
45201: LD_INT 30
45203: PUSH
45204: LD_INT 49
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: LIST
45211: DIFF
45212: ST_TO_ADDR
// if not list then
45213: LD_VAR 0 5
45217: NOT
45218: IFFALSE 45222
// exit ;
45220: GO 45364
// weapon := list [ rand ( 1 , list ) ] ;
45222: LD_ADDR_VAR 0 18
45226: PUSH
45227: LD_VAR 0 5
45231: PUSH
45232: LD_INT 1
45234: PPUSH
45235: LD_VAR 0 5
45239: PPUSH
45240: CALL_OW 12
45244: ARRAY
45245: ST_TO_ADDR
// end ; if weapon then
45246: LD_VAR 0 18
45250: IFFALSE 45364
// begin tmp := CostOfWeapon ( weapon ) ;
45252: LD_ADDR_VAR 0 14
45256: PUSH
45257: LD_VAR 0 18
45261: PPUSH
45262: CALL_OW 451
45266: ST_TO_ADDR
// j := GetBase ( tower ) ;
45267: LD_ADDR_VAR 0 9
45271: PUSH
45272: LD_VAR 0 1
45276: PPUSH
45277: CALL_OW 274
45281: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45282: LD_VAR 0 9
45286: PPUSH
45287: LD_INT 1
45289: PPUSH
45290: CALL_OW 275
45294: PUSH
45295: LD_VAR 0 14
45299: PUSH
45300: LD_INT 1
45302: ARRAY
45303: GREATEREQUAL
45304: PUSH
45305: LD_VAR 0 9
45309: PPUSH
45310: LD_INT 2
45312: PPUSH
45313: CALL_OW 275
45317: PUSH
45318: LD_VAR 0 14
45322: PUSH
45323: LD_INT 2
45325: ARRAY
45326: GREATEREQUAL
45327: AND
45328: PUSH
45329: LD_VAR 0 9
45333: PPUSH
45334: LD_INT 3
45336: PPUSH
45337: CALL_OW 275
45341: PUSH
45342: LD_VAR 0 14
45346: PUSH
45347: LD_INT 3
45349: ARRAY
45350: GREATEREQUAL
45351: AND
45352: IFFALSE 45364
// result := weapon ;
45354: LD_ADDR_VAR 0 3
45358: PUSH
45359: LD_VAR 0 18
45363: ST_TO_ADDR
// end ; end ;
45364: LD_VAR 0 3
45368: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45369: LD_INT 0
45371: PPUSH
45372: PPUSH
// result := true ;
45373: LD_ADDR_VAR 0 3
45377: PUSH
45378: LD_INT 1
45380: ST_TO_ADDR
// if array1 = array2 then
45381: LD_VAR 0 1
45385: PUSH
45386: LD_VAR 0 2
45390: EQUAL
45391: IFFALSE 45451
// begin for i = 1 to array1 do
45393: LD_ADDR_VAR 0 4
45397: PUSH
45398: DOUBLE
45399: LD_INT 1
45401: DEC
45402: ST_TO_ADDR
45403: LD_VAR 0 1
45407: PUSH
45408: FOR_TO
45409: IFFALSE 45447
// if array1 [ i ] <> array2 [ i ] then
45411: LD_VAR 0 1
45415: PUSH
45416: LD_VAR 0 4
45420: ARRAY
45421: PUSH
45422: LD_VAR 0 2
45426: PUSH
45427: LD_VAR 0 4
45431: ARRAY
45432: NONEQUAL
45433: IFFALSE 45445
// begin result := false ;
45435: LD_ADDR_VAR 0 3
45439: PUSH
45440: LD_INT 0
45442: ST_TO_ADDR
// break ;
45443: GO 45447
// end ;
45445: GO 45408
45447: POP
45448: POP
// end else
45449: GO 45459
// result := false ;
45451: LD_ADDR_VAR 0 3
45455: PUSH
45456: LD_INT 0
45458: ST_TO_ADDR
// end ;
45459: LD_VAR 0 3
45463: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45464: LD_INT 0
45466: PPUSH
45467: PPUSH
// if not array1 or not array2 then
45468: LD_VAR 0 1
45472: NOT
45473: PUSH
45474: LD_VAR 0 2
45478: NOT
45479: OR
45480: IFFALSE 45484
// exit ;
45482: GO 45548
// result := true ;
45484: LD_ADDR_VAR 0 3
45488: PUSH
45489: LD_INT 1
45491: ST_TO_ADDR
// for i = 1 to array1 do
45492: LD_ADDR_VAR 0 4
45496: PUSH
45497: DOUBLE
45498: LD_INT 1
45500: DEC
45501: ST_TO_ADDR
45502: LD_VAR 0 1
45506: PUSH
45507: FOR_TO
45508: IFFALSE 45546
// if array1 [ i ] <> array2 [ i ] then
45510: LD_VAR 0 1
45514: PUSH
45515: LD_VAR 0 4
45519: ARRAY
45520: PUSH
45521: LD_VAR 0 2
45525: PUSH
45526: LD_VAR 0 4
45530: ARRAY
45531: NONEQUAL
45532: IFFALSE 45544
// begin result := false ;
45534: LD_ADDR_VAR 0 3
45538: PUSH
45539: LD_INT 0
45541: ST_TO_ADDR
// break ;
45542: GO 45546
// end ;
45544: GO 45507
45546: POP
45547: POP
// end ;
45548: LD_VAR 0 3
45552: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45553: LD_INT 0
45555: PPUSH
45556: PPUSH
45557: PPUSH
// pom := GetBase ( fac ) ;
45558: LD_ADDR_VAR 0 5
45562: PUSH
45563: LD_VAR 0 1
45567: PPUSH
45568: CALL_OW 274
45572: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45573: LD_ADDR_VAR 0 4
45577: PUSH
45578: LD_VAR 0 2
45582: PUSH
45583: LD_INT 1
45585: ARRAY
45586: PPUSH
45587: LD_VAR 0 2
45591: PUSH
45592: LD_INT 2
45594: ARRAY
45595: PPUSH
45596: LD_VAR 0 2
45600: PUSH
45601: LD_INT 3
45603: ARRAY
45604: PPUSH
45605: LD_VAR 0 2
45609: PUSH
45610: LD_INT 4
45612: ARRAY
45613: PPUSH
45614: CALL_OW 449
45618: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45619: LD_ADDR_VAR 0 3
45623: PUSH
45624: LD_VAR 0 5
45628: PPUSH
45629: LD_INT 1
45631: PPUSH
45632: CALL_OW 275
45636: PUSH
45637: LD_VAR 0 4
45641: PUSH
45642: LD_INT 1
45644: ARRAY
45645: GREATEREQUAL
45646: PUSH
45647: LD_VAR 0 5
45651: PPUSH
45652: LD_INT 2
45654: PPUSH
45655: CALL_OW 275
45659: PUSH
45660: LD_VAR 0 4
45664: PUSH
45665: LD_INT 2
45667: ARRAY
45668: GREATEREQUAL
45669: AND
45670: PUSH
45671: LD_VAR 0 5
45675: PPUSH
45676: LD_INT 3
45678: PPUSH
45679: CALL_OW 275
45683: PUSH
45684: LD_VAR 0 4
45688: PUSH
45689: LD_INT 3
45691: ARRAY
45692: GREATEREQUAL
45693: AND
45694: ST_TO_ADDR
// end ;
45695: LD_VAR 0 3
45699: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45700: LD_INT 0
45702: PPUSH
45703: PPUSH
45704: PPUSH
45705: PPUSH
// pom := GetBase ( building ) ;
45706: LD_ADDR_VAR 0 3
45710: PUSH
45711: LD_VAR 0 1
45715: PPUSH
45716: CALL_OW 274
45720: ST_TO_ADDR
// if not pom then
45721: LD_VAR 0 3
45725: NOT
45726: IFFALSE 45730
// exit ;
45728: GO 45900
// btype := GetBType ( building ) ;
45730: LD_ADDR_VAR 0 5
45734: PUSH
45735: LD_VAR 0 1
45739: PPUSH
45740: CALL_OW 266
45744: ST_TO_ADDR
// if btype = b_armoury then
45745: LD_VAR 0 5
45749: PUSH
45750: LD_INT 4
45752: EQUAL
45753: IFFALSE 45763
// btype := b_barracks ;
45755: LD_ADDR_VAR 0 5
45759: PUSH
45760: LD_INT 5
45762: ST_TO_ADDR
// if btype = b_depot then
45763: LD_VAR 0 5
45767: PUSH
45768: LD_INT 0
45770: EQUAL
45771: IFFALSE 45781
// btype := b_warehouse ;
45773: LD_ADDR_VAR 0 5
45777: PUSH
45778: LD_INT 1
45780: ST_TO_ADDR
// if btype = b_workshop then
45781: LD_VAR 0 5
45785: PUSH
45786: LD_INT 2
45788: EQUAL
45789: IFFALSE 45799
// btype := b_factory ;
45791: LD_ADDR_VAR 0 5
45795: PUSH
45796: LD_INT 3
45798: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45799: LD_ADDR_VAR 0 4
45803: PUSH
45804: LD_VAR 0 5
45808: PPUSH
45809: LD_VAR 0 1
45813: PPUSH
45814: CALL_OW 248
45818: PPUSH
45819: CALL_OW 450
45823: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45824: LD_ADDR_VAR 0 2
45828: PUSH
45829: LD_VAR 0 3
45833: PPUSH
45834: LD_INT 1
45836: PPUSH
45837: CALL_OW 275
45841: PUSH
45842: LD_VAR 0 4
45846: PUSH
45847: LD_INT 1
45849: ARRAY
45850: GREATEREQUAL
45851: PUSH
45852: LD_VAR 0 3
45856: PPUSH
45857: LD_INT 2
45859: PPUSH
45860: CALL_OW 275
45864: PUSH
45865: LD_VAR 0 4
45869: PUSH
45870: LD_INT 2
45872: ARRAY
45873: GREATEREQUAL
45874: AND
45875: PUSH
45876: LD_VAR 0 3
45880: PPUSH
45881: LD_INT 3
45883: PPUSH
45884: CALL_OW 275
45888: PUSH
45889: LD_VAR 0 4
45893: PUSH
45894: LD_INT 3
45896: ARRAY
45897: GREATEREQUAL
45898: AND
45899: ST_TO_ADDR
// end ;
45900: LD_VAR 0 2
45904: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45905: LD_INT 0
45907: PPUSH
45908: PPUSH
45909: PPUSH
// pom := GetBase ( building ) ;
45910: LD_ADDR_VAR 0 4
45914: PUSH
45915: LD_VAR 0 1
45919: PPUSH
45920: CALL_OW 274
45924: ST_TO_ADDR
// if not pom then
45925: LD_VAR 0 4
45929: NOT
45930: IFFALSE 45934
// exit ;
45932: GO 46035
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45934: LD_ADDR_VAR 0 5
45938: PUSH
45939: LD_VAR 0 2
45943: PPUSH
45944: LD_VAR 0 1
45948: PPUSH
45949: CALL_OW 248
45953: PPUSH
45954: CALL_OW 450
45958: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45959: LD_ADDR_VAR 0 3
45963: PUSH
45964: LD_VAR 0 4
45968: PPUSH
45969: LD_INT 1
45971: PPUSH
45972: CALL_OW 275
45976: PUSH
45977: LD_VAR 0 5
45981: PUSH
45982: LD_INT 1
45984: ARRAY
45985: GREATEREQUAL
45986: PUSH
45987: LD_VAR 0 4
45991: PPUSH
45992: LD_INT 2
45994: PPUSH
45995: CALL_OW 275
45999: PUSH
46000: LD_VAR 0 5
46004: PUSH
46005: LD_INT 2
46007: ARRAY
46008: GREATEREQUAL
46009: AND
46010: PUSH
46011: LD_VAR 0 4
46015: PPUSH
46016: LD_INT 3
46018: PPUSH
46019: CALL_OW 275
46023: PUSH
46024: LD_VAR 0 5
46028: PUSH
46029: LD_INT 3
46031: ARRAY
46032: GREATEREQUAL
46033: AND
46034: ST_TO_ADDR
// end ;
46035: LD_VAR 0 3
46039: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46040: LD_INT 0
46042: PPUSH
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
46048: PPUSH
46049: PPUSH
46050: PPUSH
46051: PPUSH
46052: PPUSH
// result := false ;
46053: LD_ADDR_VAR 0 8
46057: PUSH
46058: LD_INT 0
46060: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46061: LD_VAR 0 5
46065: NOT
46066: PUSH
46067: LD_VAR 0 1
46071: NOT
46072: OR
46073: PUSH
46074: LD_VAR 0 2
46078: NOT
46079: OR
46080: PUSH
46081: LD_VAR 0 3
46085: NOT
46086: OR
46087: IFFALSE 46091
// exit ;
46089: GO 46905
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46091: LD_ADDR_VAR 0 14
46095: PUSH
46096: LD_VAR 0 1
46100: PPUSH
46101: LD_VAR 0 2
46105: PPUSH
46106: LD_VAR 0 3
46110: PPUSH
46111: LD_VAR 0 4
46115: PPUSH
46116: LD_VAR 0 5
46120: PUSH
46121: LD_INT 1
46123: ARRAY
46124: PPUSH
46125: CALL_OW 248
46129: PPUSH
46130: LD_INT 0
46132: PPUSH
46133: CALL 48142 0 6
46137: ST_TO_ADDR
// if not hexes then
46138: LD_VAR 0 14
46142: NOT
46143: IFFALSE 46147
// exit ;
46145: GO 46905
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46147: LD_ADDR_VAR 0 17
46151: PUSH
46152: LD_VAR 0 5
46156: PPUSH
46157: LD_INT 22
46159: PUSH
46160: LD_VAR 0 13
46164: PPUSH
46165: CALL_OW 255
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: LD_INT 30
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 30
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: LIST
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PPUSH
46206: CALL_OW 72
46210: ST_TO_ADDR
// for i = 1 to hexes do
46211: LD_ADDR_VAR 0 9
46215: PUSH
46216: DOUBLE
46217: LD_INT 1
46219: DEC
46220: ST_TO_ADDR
46221: LD_VAR 0 14
46225: PUSH
46226: FOR_TO
46227: IFFALSE 46903
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46229: LD_ADDR_VAR 0 13
46233: PUSH
46234: LD_VAR 0 14
46238: PUSH
46239: LD_VAR 0 9
46243: ARRAY
46244: PUSH
46245: LD_INT 1
46247: ARRAY
46248: PPUSH
46249: LD_VAR 0 14
46253: PUSH
46254: LD_VAR 0 9
46258: ARRAY
46259: PUSH
46260: LD_INT 2
46262: ARRAY
46263: PPUSH
46264: CALL_OW 428
46268: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46269: LD_VAR 0 14
46273: PUSH
46274: LD_VAR 0 9
46278: ARRAY
46279: PUSH
46280: LD_INT 1
46282: ARRAY
46283: PPUSH
46284: LD_VAR 0 14
46288: PUSH
46289: LD_VAR 0 9
46293: ARRAY
46294: PUSH
46295: LD_INT 2
46297: ARRAY
46298: PPUSH
46299: CALL_OW 351
46303: PUSH
46304: LD_VAR 0 14
46308: PUSH
46309: LD_VAR 0 9
46313: ARRAY
46314: PUSH
46315: LD_INT 1
46317: ARRAY
46318: PPUSH
46319: LD_VAR 0 14
46323: PUSH
46324: LD_VAR 0 9
46328: ARRAY
46329: PUSH
46330: LD_INT 2
46332: ARRAY
46333: PPUSH
46334: CALL_OW 488
46338: NOT
46339: OR
46340: PUSH
46341: LD_VAR 0 13
46345: PPUSH
46346: CALL_OW 247
46350: PUSH
46351: LD_INT 3
46353: EQUAL
46354: OR
46355: IFFALSE 46361
// exit ;
46357: POP
46358: POP
46359: GO 46905
// if not tmp then
46361: LD_VAR 0 13
46365: NOT
46366: IFFALSE 46370
// continue ;
46368: GO 46226
// result := true ;
46370: LD_ADDR_VAR 0 8
46374: PUSH
46375: LD_INT 1
46377: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46378: LD_VAR 0 6
46382: PUSH
46383: LD_VAR 0 13
46387: PPUSH
46388: CALL_OW 247
46392: PUSH
46393: LD_INT 2
46395: EQUAL
46396: AND
46397: PUSH
46398: LD_VAR 0 13
46402: PPUSH
46403: CALL_OW 263
46407: PUSH
46408: LD_INT 1
46410: EQUAL
46411: AND
46412: IFFALSE 46576
// begin if IsDrivenBy ( tmp ) then
46414: LD_VAR 0 13
46418: PPUSH
46419: CALL_OW 311
46423: IFFALSE 46427
// continue ;
46425: GO 46226
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46427: LD_VAR 0 6
46431: PPUSH
46432: LD_INT 3
46434: PUSH
46435: LD_INT 60
46437: PUSH
46438: EMPTY
46439: LIST
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 3
46447: PUSH
46448: LD_INT 55
46450: PUSH
46451: EMPTY
46452: LIST
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PPUSH
46462: CALL_OW 72
46466: IFFALSE 46574
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46468: LD_ADDR_VAR 0 18
46472: PUSH
46473: LD_VAR 0 6
46477: PPUSH
46478: LD_INT 3
46480: PUSH
46481: LD_INT 60
46483: PUSH
46484: EMPTY
46485: LIST
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 3
46493: PUSH
46494: LD_INT 55
46496: PUSH
46497: EMPTY
46498: LIST
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PPUSH
46508: CALL_OW 72
46512: PUSH
46513: LD_INT 1
46515: ARRAY
46516: ST_TO_ADDR
// if IsInUnit ( driver ) then
46517: LD_VAR 0 18
46521: PPUSH
46522: CALL_OW 310
46526: IFFALSE 46537
// ComExit ( driver ) ;
46528: LD_VAR 0 18
46532: PPUSH
46533: CALL 71326 0 1
// AddComEnterUnit ( driver , tmp ) ;
46537: LD_VAR 0 18
46541: PPUSH
46542: LD_VAR 0 13
46546: PPUSH
46547: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46551: LD_VAR 0 18
46555: PPUSH
46556: LD_VAR 0 7
46560: PPUSH
46561: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46565: LD_VAR 0 18
46569: PPUSH
46570: CALL_OW 181
// end ; continue ;
46574: GO 46226
// end ; if not cleaners or not tmp in cleaners then
46576: LD_VAR 0 6
46580: NOT
46581: PUSH
46582: LD_VAR 0 13
46586: PUSH
46587: LD_VAR 0 6
46591: IN
46592: NOT
46593: OR
46594: IFFALSE 46901
// begin if dep then
46596: LD_VAR 0 17
46600: IFFALSE 46736
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46602: LD_ADDR_VAR 0 16
46606: PUSH
46607: LD_VAR 0 17
46611: PUSH
46612: LD_INT 1
46614: ARRAY
46615: PPUSH
46616: CALL_OW 250
46620: PPUSH
46621: LD_VAR 0 17
46625: PUSH
46626: LD_INT 1
46628: ARRAY
46629: PPUSH
46630: CALL_OW 254
46634: PPUSH
46635: LD_INT 5
46637: PPUSH
46638: CALL_OW 272
46642: PUSH
46643: LD_VAR 0 17
46647: PUSH
46648: LD_INT 1
46650: ARRAY
46651: PPUSH
46652: CALL_OW 251
46656: PPUSH
46657: LD_VAR 0 17
46661: PUSH
46662: LD_INT 1
46664: ARRAY
46665: PPUSH
46666: CALL_OW 254
46670: PPUSH
46671: LD_INT 5
46673: PPUSH
46674: CALL_OW 273
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46683: LD_VAR 0 16
46687: PUSH
46688: LD_INT 1
46690: ARRAY
46691: PPUSH
46692: LD_VAR 0 16
46696: PUSH
46697: LD_INT 2
46699: ARRAY
46700: PPUSH
46701: CALL_OW 488
46705: IFFALSE 46736
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46707: LD_VAR 0 13
46711: PPUSH
46712: LD_VAR 0 16
46716: PUSH
46717: LD_INT 1
46719: ARRAY
46720: PPUSH
46721: LD_VAR 0 16
46725: PUSH
46726: LD_INT 2
46728: ARRAY
46729: PPUSH
46730: CALL_OW 111
// continue ;
46734: GO 46226
// end ; end ; r := GetDir ( tmp ) ;
46736: LD_ADDR_VAR 0 15
46740: PUSH
46741: LD_VAR 0 13
46745: PPUSH
46746: CALL_OW 254
46750: ST_TO_ADDR
// if r = 5 then
46751: LD_VAR 0 15
46755: PUSH
46756: LD_INT 5
46758: EQUAL
46759: IFFALSE 46769
// r := 0 ;
46761: LD_ADDR_VAR 0 15
46765: PUSH
46766: LD_INT 0
46768: ST_TO_ADDR
// for j = r to 5 do
46769: LD_ADDR_VAR 0 10
46773: PUSH
46774: DOUBLE
46775: LD_VAR 0 15
46779: DEC
46780: ST_TO_ADDR
46781: LD_INT 5
46783: PUSH
46784: FOR_TO
46785: IFFALSE 46899
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46787: LD_ADDR_VAR 0 11
46791: PUSH
46792: LD_VAR 0 13
46796: PPUSH
46797: CALL_OW 250
46801: PPUSH
46802: LD_VAR 0 10
46806: PPUSH
46807: LD_INT 2
46809: PPUSH
46810: CALL_OW 272
46814: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46815: LD_ADDR_VAR 0 12
46819: PUSH
46820: LD_VAR 0 13
46824: PPUSH
46825: CALL_OW 251
46829: PPUSH
46830: LD_VAR 0 10
46834: PPUSH
46835: LD_INT 2
46837: PPUSH
46838: CALL_OW 273
46842: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46843: LD_VAR 0 11
46847: PPUSH
46848: LD_VAR 0 12
46852: PPUSH
46853: CALL_OW 488
46857: PUSH
46858: LD_VAR 0 11
46862: PPUSH
46863: LD_VAR 0 12
46867: PPUSH
46868: CALL_OW 428
46872: NOT
46873: AND
46874: IFFALSE 46897
// begin ComMoveXY ( tmp , _x , _y ) ;
46876: LD_VAR 0 13
46880: PPUSH
46881: LD_VAR 0 11
46885: PPUSH
46886: LD_VAR 0 12
46890: PPUSH
46891: CALL_OW 111
// break ;
46895: GO 46899
// end ; end ;
46897: GO 46784
46899: POP
46900: POP
// end ; end ;
46901: GO 46226
46903: POP
46904: POP
// end ;
46905: LD_VAR 0 8
46909: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46910: LD_INT 0
46912: PPUSH
// result := true ;
46913: LD_ADDR_VAR 0 3
46917: PUSH
46918: LD_INT 1
46920: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46921: LD_VAR 0 2
46925: PUSH
46926: LD_INT 24
46928: DOUBLE
46929: EQUAL
46930: IFTRUE 46940
46932: LD_INT 33
46934: DOUBLE
46935: EQUAL
46936: IFTRUE 46940
46938: GO 46965
46940: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46941: LD_ADDR_VAR 0 3
46945: PUSH
46946: LD_INT 32
46948: PPUSH
46949: LD_VAR 0 1
46953: PPUSH
46954: CALL_OW 321
46958: PUSH
46959: LD_INT 2
46961: EQUAL
46962: ST_TO_ADDR
46963: GO 47285
46965: LD_INT 20
46967: DOUBLE
46968: EQUAL
46969: IFTRUE 46973
46971: GO 46998
46973: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46974: LD_ADDR_VAR 0 3
46978: PUSH
46979: LD_INT 6
46981: PPUSH
46982: LD_VAR 0 1
46986: PPUSH
46987: CALL_OW 321
46991: PUSH
46992: LD_INT 2
46994: EQUAL
46995: ST_TO_ADDR
46996: GO 47285
46998: LD_INT 22
47000: DOUBLE
47001: EQUAL
47002: IFTRUE 47012
47004: LD_INT 36
47006: DOUBLE
47007: EQUAL
47008: IFTRUE 47012
47010: GO 47037
47012: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47013: LD_ADDR_VAR 0 3
47017: PUSH
47018: LD_INT 15
47020: PPUSH
47021: LD_VAR 0 1
47025: PPUSH
47026: CALL_OW 321
47030: PUSH
47031: LD_INT 2
47033: EQUAL
47034: ST_TO_ADDR
47035: GO 47285
47037: LD_INT 30
47039: DOUBLE
47040: EQUAL
47041: IFTRUE 47045
47043: GO 47070
47045: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47046: LD_ADDR_VAR 0 3
47050: PUSH
47051: LD_INT 20
47053: PPUSH
47054: LD_VAR 0 1
47058: PPUSH
47059: CALL_OW 321
47063: PUSH
47064: LD_INT 2
47066: EQUAL
47067: ST_TO_ADDR
47068: GO 47285
47070: LD_INT 28
47072: DOUBLE
47073: EQUAL
47074: IFTRUE 47084
47076: LD_INT 21
47078: DOUBLE
47079: EQUAL
47080: IFTRUE 47084
47082: GO 47109
47084: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47085: LD_ADDR_VAR 0 3
47089: PUSH
47090: LD_INT 21
47092: PPUSH
47093: LD_VAR 0 1
47097: PPUSH
47098: CALL_OW 321
47102: PUSH
47103: LD_INT 2
47105: EQUAL
47106: ST_TO_ADDR
47107: GO 47285
47109: LD_INT 16
47111: DOUBLE
47112: EQUAL
47113: IFTRUE 47117
47115: GO 47144
47117: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47118: LD_ADDR_VAR 0 3
47122: PUSH
47123: LD_EXP 48
47127: PPUSH
47128: LD_VAR 0 1
47132: PPUSH
47133: CALL_OW 321
47137: PUSH
47138: LD_INT 2
47140: EQUAL
47141: ST_TO_ADDR
47142: GO 47285
47144: LD_INT 19
47146: DOUBLE
47147: EQUAL
47148: IFTRUE 47158
47150: LD_INT 23
47152: DOUBLE
47153: EQUAL
47154: IFTRUE 47158
47156: GO 47185
47158: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47159: LD_ADDR_VAR 0 3
47163: PUSH
47164: LD_EXP 47
47168: PPUSH
47169: LD_VAR 0 1
47173: PPUSH
47174: CALL_OW 321
47178: PUSH
47179: LD_INT 2
47181: EQUAL
47182: ST_TO_ADDR
47183: GO 47285
47185: LD_INT 17
47187: DOUBLE
47188: EQUAL
47189: IFTRUE 47193
47191: GO 47218
47193: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47194: LD_ADDR_VAR 0 3
47198: PUSH
47199: LD_INT 39
47201: PPUSH
47202: LD_VAR 0 1
47206: PPUSH
47207: CALL_OW 321
47211: PUSH
47212: LD_INT 2
47214: EQUAL
47215: ST_TO_ADDR
47216: GO 47285
47218: LD_INT 18
47220: DOUBLE
47221: EQUAL
47222: IFTRUE 47226
47224: GO 47251
47226: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47227: LD_ADDR_VAR 0 3
47231: PUSH
47232: LD_INT 40
47234: PPUSH
47235: LD_VAR 0 1
47239: PPUSH
47240: CALL_OW 321
47244: PUSH
47245: LD_INT 2
47247: EQUAL
47248: ST_TO_ADDR
47249: GO 47285
47251: LD_INT 27
47253: DOUBLE
47254: EQUAL
47255: IFTRUE 47259
47257: GO 47284
47259: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47260: LD_ADDR_VAR 0 3
47264: PUSH
47265: LD_INT 35
47267: PPUSH
47268: LD_VAR 0 1
47272: PPUSH
47273: CALL_OW 321
47277: PUSH
47278: LD_INT 2
47280: EQUAL
47281: ST_TO_ADDR
47282: GO 47285
47284: POP
// end ;
47285: LD_VAR 0 3
47289: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47290: LD_INT 0
47292: PPUSH
47293: PPUSH
47294: PPUSH
47295: PPUSH
47296: PPUSH
47297: PPUSH
47298: PPUSH
47299: PPUSH
47300: PPUSH
47301: PPUSH
47302: PPUSH
// result := false ;
47303: LD_ADDR_VAR 0 6
47307: PUSH
47308: LD_INT 0
47310: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47311: LD_VAR 0 1
47315: NOT
47316: PUSH
47317: LD_VAR 0 1
47321: PPUSH
47322: CALL_OW 266
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: IN
47337: NOT
47338: OR
47339: PUSH
47340: LD_VAR 0 2
47344: NOT
47345: OR
47346: PUSH
47347: LD_VAR 0 5
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: LD_INT 3
47363: PUSH
47364: LD_INT 4
47366: PUSH
47367: LD_INT 5
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: IN
47378: NOT
47379: OR
47380: PUSH
47381: LD_VAR 0 3
47385: PPUSH
47386: LD_VAR 0 4
47390: PPUSH
47391: CALL_OW 488
47395: NOT
47396: OR
47397: IFFALSE 47401
// exit ;
47399: GO 48137
// side := GetSide ( depot ) ;
47401: LD_ADDR_VAR 0 9
47405: PUSH
47406: LD_VAR 0 1
47410: PPUSH
47411: CALL_OW 255
47415: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47416: LD_VAR 0 9
47420: PPUSH
47421: LD_VAR 0 2
47425: PPUSH
47426: CALL 46910 0 2
47430: NOT
47431: IFFALSE 47435
// exit ;
47433: GO 48137
// pom := GetBase ( depot ) ;
47435: LD_ADDR_VAR 0 10
47439: PUSH
47440: LD_VAR 0 1
47444: PPUSH
47445: CALL_OW 274
47449: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47450: LD_ADDR_VAR 0 11
47454: PUSH
47455: LD_VAR 0 2
47459: PPUSH
47460: LD_VAR 0 1
47464: PPUSH
47465: CALL_OW 248
47469: PPUSH
47470: CALL_OW 450
47474: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47475: LD_VAR 0 10
47479: PPUSH
47480: LD_INT 1
47482: PPUSH
47483: CALL_OW 275
47487: PUSH
47488: LD_VAR 0 11
47492: PUSH
47493: LD_INT 1
47495: ARRAY
47496: GREATEREQUAL
47497: PUSH
47498: LD_VAR 0 10
47502: PPUSH
47503: LD_INT 2
47505: PPUSH
47506: CALL_OW 275
47510: PUSH
47511: LD_VAR 0 11
47515: PUSH
47516: LD_INT 2
47518: ARRAY
47519: GREATEREQUAL
47520: AND
47521: PUSH
47522: LD_VAR 0 10
47526: PPUSH
47527: LD_INT 3
47529: PPUSH
47530: CALL_OW 275
47534: PUSH
47535: LD_VAR 0 11
47539: PUSH
47540: LD_INT 3
47542: ARRAY
47543: GREATEREQUAL
47544: AND
47545: NOT
47546: IFFALSE 47550
// exit ;
47548: GO 48137
// if GetBType ( depot ) = b_depot then
47550: LD_VAR 0 1
47554: PPUSH
47555: CALL_OW 266
47559: PUSH
47560: LD_INT 0
47562: EQUAL
47563: IFFALSE 47575
// dist := 28 else
47565: LD_ADDR_VAR 0 14
47569: PUSH
47570: LD_INT 28
47572: ST_TO_ADDR
47573: GO 47583
// dist := 36 ;
47575: LD_ADDR_VAR 0 14
47579: PUSH
47580: LD_INT 36
47582: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47583: LD_VAR 0 1
47587: PPUSH
47588: LD_VAR 0 3
47592: PPUSH
47593: LD_VAR 0 4
47597: PPUSH
47598: CALL_OW 297
47602: PUSH
47603: LD_VAR 0 14
47607: GREATER
47608: IFFALSE 47612
// exit ;
47610: GO 48137
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47612: LD_ADDR_VAR 0 12
47616: PUSH
47617: LD_VAR 0 2
47621: PPUSH
47622: LD_VAR 0 3
47626: PPUSH
47627: LD_VAR 0 4
47631: PPUSH
47632: LD_VAR 0 5
47636: PPUSH
47637: LD_VAR 0 1
47641: PPUSH
47642: CALL_OW 248
47646: PPUSH
47647: LD_INT 0
47649: PPUSH
47650: CALL 48142 0 6
47654: ST_TO_ADDR
// if not hexes then
47655: LD_VAR 0 12
47659: NOT
47660: IFFALSE 47664
// exit ;
47662: GO 48137
// hex := GetHexInfo ( x , y ) ;
47664: LD_ADDR_VAR 0 15
47668: PUSH
47669: LD_VAR 0 3
47673: PPUSH
47674: LD_VAR 0 4
47678: PPUSH
47679: CALL_OW 546
47683: ST_TO_ADDR
// if hex [ 1 ] then
47684: LD_VAR 0 15
47688: PUSH
47689: LD_INT 1
47691: ARRAY
47692: IFFALSE 47696
// exit ;
47694: GO 48137
// height := hex [ 2 ] ;
47696: LD_ADDR_VAR 0 13
47700: PUSH
47701: LD_VAR 0 15
47705: PUSH
47706: LD_INT 2
47708: ARRAY
47709: ST_TO_ADDR
// for i = 1 to hexes do
47710: LD_ADDR_VAR 0 7
47714: PUSH
47715: DOUBLE
47716: LD_INT 1
47718: DEC
47719: ST_TO_ADDR
47720: LD_VAR 0 12
47724: PUSH
47725: FOR_TO
47726: IFFALSE 48056
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47728: LD_VAR 0 12
47732: PUSH
47733: LD_VAR 0 7
47737: ARRAY
47738: PUSH
47739: LD_INT 1
47741: ARRAY
47742: PPUSH
47743: LD_VAR 0 12
47747: PUSH
47748: LD_VAR 0 7
47752: ARRAY
47753: PUSH
47754: LD_INT 2
47756: ARRAY
47757: PPUSH
47758: CALL_OW 488
47762: NOT
47763: PUSH
47764: LD_VAR 0 12
47768: PUSH
47769: LD_VAR 0 7
47773: ARRAY
47774: PUSH
47775: LD_INT 1
47777: ARRAY
47778: PPUSH
47779: LD_VAR 0 12
47783: PUSH
47784: LD_VAR 0 7
47788: ARRAY
47789: PUSH
47790: LD_INT 2
47792: ARRAY
47793: PPUSH
47794: CALL_OW 428
47798: PUSH
47799: LD_INT 0
47801: GREATER
47802: OR
47803: PUSH
47804: LD_VAR 0 12
47808: PUSH
47809: LD_VAR 0 7
47813: ARRAY
47814: PUSH
47815: LD_INT 1
47817: ARRAY
47818: PPUSH
47819: LD_VAR 0 12
47823: PUSH
47824: LD_VAR 0 7
47828: ARRAY
47829: PUSH
47830: LD_INT 2
47832: ARRAY
47833: PPUSH
47834: CALL_OW 351
47838: OR
47839: IFFALSE 47845
// exit ;
47841: POP
47842: POP
47843: GO 48137
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47845: LD_ADDR_VAR 0 8
47849: PUSH
47850: LD_VAR 0 12
47854: PUSH
47855: LD_VAR 0 7
47859: ARRAY
47860: PUSH
47861: LD_INT 1
47863: ARRAY
47864: PPUSH
47865: LD_VAR 0 12
47869: PUSH
47870: LD_VAR 0 7
47874: ARRAY
47875: PUSH
47876: LD_INT 2
47878: ARRAY
47879: PPUSH
47880: CALL_OW 546
47884: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47885: LD_VAR 0 8
47889: PUSH
47890: LD_INT 1
47892: ARRAY
47893: PUSH
47894: LD_VAR 0 8
47898: PUSH
47899: LD_INT 2
47901: ARRAY
47902: PUSH
47903: LD_VAR 0 13
47907: PUSH
47908: LD_INT 2
47910: PLUS
47911: GREATER
47912: OR
47913: PUSH
47914: LD_VAR 0 8
47918: PUSH
47919: LD_INT 2
47921: ARRAY
47922: PUSH
47923: LD_VAR 0 13
47927: PUSH
47928: LD_INT 2
47930: MINUS
47931: LESS
47932: OR
47933: PUSH
47934: LD_VAR 0 8
47938: PUSH
47939: LD_INT 3
47941: ARRAY
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 8
47948: PUSH
47949: LD_INT 9
47951: PUSH
47952: LD_INT 10
47954: PUSH
47955: LD_INT 11
47957: PUSH
47958: LD_INT 12
47960: PUSH
47961: LD_INT 13
47963: PUSH
47964: LD_INT 16
47966: PUSH
47967: LD_INT 17
47969: PUSH
47970: LD_INT 18
47972: PUSH
47973: LD_INT 19
47975: PUSH
47976: LD_INT 20
47978: PUSH
47979: LD_INT 21
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: IN
47997: NOT
47998: OR
47999: PUSH
48000: LD_VAR 0 8
48004: PUSH
48005: LD_INT 5
48007: ARRAY
48008: NOT
48009: OR
48010: PUSH
48011: LD_VAR 0 8
48015: PUSH
48016: LD_INT 6
48018: ARRAY
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 7
48028: PUSH
48029: LD_INT 9
48031: PUSH
48032: LD_INT 10
48034: PUSH
48035: LD_INT 11
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: IN
48046: NOT
48047: OR
48048: IFFALSE 48054
// exit ;
48050: POP
48051: POP
48052: GO 48137
// end ;
48054: GO 47725
48056: POP
48057: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48058: LD_VAR 0 9
48062: PPUSH
48063: LD_VAR 0 3
48067: PPUSH
48068: LD_VAR 0 4
48072: PPUSH
48073: LD_INT 20
48075: PPUSH
48076: CALL 40083 0 4
48080: PUSH
48081: LD_INT 4
48083: ARRAY
48084: IFFALSE 48088
// exit ;
48086: GO 48137
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48088: LD_VAR 0 2
48092: PUSH
48093: LD_INT 29
48095: PUSH
48096: LD_INT 30
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: IN
48103: PUSH
48104: LD_VAR 0 3
48108: PPUSH
48109: LD_VAR 0 4
48113: PPUSH
48114: LD_VAR 0 9
48118: PPUSH
48119: CALL_OW 440
48123: NOT
48124: AND
48125: IFFALSE 48129
// exit ;
48127: GO 48137
// result := true ;
48129: LD_ADDR_VAR 0 6
48133: PUSH
48134: LD_INT 1
48136: ST_TO_ADDR
// end ;
48137: LD_VAR 0 6
48141: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48142: LD_INT 0
48144: PPUSH
48145: PPUSH
48146: PPUSH
48147: PPUSH
48148: PPUSH
48149: PPUSH
48150: PPUSH
48151: PPUSH
48152: PPUSH
48153: PPUSH
48154: PPUSH
48155: PPUSH
48156: PPUSH
48157: PPUSH
48158: PPUSH
48159: PPUSH
48160: PPUSH
48161: PPUSH
48162: PPUSH
48163: PPUSH
48164: PPUSH
48165: PPUSH
48166: PPUSH
48167: PPUSH
48168: PPUSH
48169: PPUSH
48170: PPUSH
48171: PPUSH
48172: PPUSH
48173: PPUSH
48174: PPUSH
48175: PPUSH
48176: PPUSH
48177: PPUSH
48178: PPUSH
48179: PPUSH
48180: PPUSH
48181: PPUSH
48182: PPUSH
48183: PPUSH
48184: PPUSH
48185: PPUSH
48186: PPUSH
48187: PPUSH
48188: PPUSH
48189: PPUSH
48190: PPUSH
48191: PPUSH
48192: PPUSH
48193: PPUSH
48194: PPUSH
48195: PPUSH
48196: PPUSH
48197: PPUSH
48198: PPUSH
48199: PPUSH
48200: PPUSH
48201: PPUSH
// result = [ ] ;
48202: LD_ADDR_VAR 0 7
48206: PUSH
48207: EMPTY
48208: ST_TO_ADDR
// temp_list = [ ] ;
48209: LD_ADDR_VAR 0 9
48213: PUSH
48214: EMPTY
48215: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48216: LD_VAR 0 4
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: LD_INT 4
48235: PUSH
48236: LD_INT 5
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: IN
48247: NOT
48248: PUSH
48249: LD_VAR 0 1
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: IN
48264: PUSH
48265: LD_VAR 0 5
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: LD_INT 3
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: LIST
48283: IN
48284: NOT
48285: AND
48286: OR
48287: IFFALSE 48291
// exit ;
48289: GO 66682
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48291: LD_VAR 0 1
48295: PUSH
48296: LD_INT 6
48298: PUSH
48299: LD_INT 7
48301: PUSH
48302: LD_INT 8
48304: PUSH
48305: LD_INT 13
48307: PUSH
48308: LD_INT 12
48310: PUSH
48311: LD_INT 15
48313: PUSH
48314: LD_INT 11
48316: PUSH
48317: LD_INT 14
48319: PUSH
48320: LD_INT 10
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: IN
48334: IFFALSE 48344
// btype = b_lab ;
48336: LD_ADDR_VAR 0 1
48340: PUSH
48341: LD_INT 6
48343: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48344: LD_VAR 0 6
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: LIST
48362: IN
48363: NOT
48364: PUSH
48365: LD_VAR 0 1
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 3
48381: PUSH
48382: LD_INT 6
48384: PUSH
48385: LD_INT 36
48387: PUSH
48388: LD_INT 4
48390: PUSH
48391: LD_INT 5
48393: PUSH
48394: LD_INT 31
48396: PUSH
48397: LD_INT 32
48399: PUSH
48400: LD_INT 33
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: IN
48416: NOT
48417: PUSH
48418: LD_VAR 0 6
48422: PUSH
48423: LD_INT 1
48425: EQUAL
48426: AND
48427: OR
48428: PUSH
48429: LD_VAR 0 1
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: IN
48444: NOT
48445: PUSH
48446: LD_VAR 0 6
48450: PUSH
48451: LD_INT 2
48453: EQUAL
48454: AND
48455: OR
48456: IFFALSE 48466
// mode = 0 ;
48458: LD_ADDR_VAR 0 6
48462: PUSH
48463: LD_INT 0
48465: ST_TO_ADDR
// case mode of 0 :
48466: LD_VAR 0 6
48470: PUSH
48471: LD_INT 0
48473: DOUBLE
48474: EQUAL
48475: IFTRUE 48479
48477: GO 59932
48479: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48480: LD_ADDR_VAR 0 11
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: LD_INT 2
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 3
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 3
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 2
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48673: LD_ADDR_VAR 0 12
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: NEG
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: NEG
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 3
48830: NEG
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 3
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48869: LD_ADDR_VAR 0 13
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: LD_INT 3
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 3
49028: NEG
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 3
49040: NEG
49041: PUSH
49042: LD_INT 3
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49068: LD_ADDR_VAR 0 14
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 3
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 3
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49264: LD_ADDR_VAR 0 15
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49457: LD_ADDR_VAR 0 16
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 3
49604: PUSH
49605: LD_INT 2
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 3
49614: PUSH
49615: LD_INT 3
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 3
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49650: LD_ADDR_VAR 0 17
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49880: LD_ADDR_VAR 0 18
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50110: LD_ADDR_VAR 0 19
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50340: LD_ADDR_VAR 0 20
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: NEG
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50570: LD_ADDR_VAR 0 21
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: NEG
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50800: LD_ADDR_VAR 0 22
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51030: LD_ADDR_VAR 0 23
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 2
51241: NEG
51242: PUSH
51243: LD_INT 3
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: LD_INT 3
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51310: LD_ADDR_VAR 0 24
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 2
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51586: LD_ADDR_VAR 0 25
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 3
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 3
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 3
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51860: LD_ADDR_VAR 0 26
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: LD_INT 3
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52136: LD_ADDR_VAR 0 27
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 3
52369: NEG
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 3
52381: NEG
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52416: LD_ADDR_VAR 0 28
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: NEG
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: LD_INT 3
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 3
52651: NEG
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52698: LD_ADDR_VAR 0 29
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: LD_INT 3
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 3
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 3
52942: NEG
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52977: LD_ADDR_VAR 0 30
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 2
53143: NEG
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: LD_INT 3
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: LD_INT 2
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 2
53209: NEG
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 3
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53255: LD_ADDR_VAR 0 31
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: NEG
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 3
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 3
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53533: LD_ADDR_VAR 0 32
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 3
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: LD_INT 3
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 3
53776: NEG
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53811: LD_ADDR_VAR 0 33
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: LD_INT 3
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 3
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: LD_INT 3
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: NEG
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54090: LD_ADDR_VAR 0 34
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: NEG
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: LD_INT 3
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 2
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 3
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 3
54335: NEG
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54370: LD_ADDR_VAR 0 35
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: NEG
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54482: LD_ADDR_VAR 0 36
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54594: LD_ADDR_VAR 0 37
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54706: LD_ADDR_VAR 0 38
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54818: LD_ADDR_VAR 0 39
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54930: LD_ADDR_VAR 0 40
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55042: LD_ADDR_VAR 0 41
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 3
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 3
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 3
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: LD_INT 3
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: LD_INT 3
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 3
55316: NEG
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 3
55339: NEG
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 3
55351: NEG
55352: PUSH
55353: LD_INT 3
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55392: LD_ADDR_VAR 0 42
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: LD_INT 3
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 3
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 3
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 3
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 3
55689: NEG
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 3
55701: NEG
55702: PUSH
55703: LD_INT 3
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55742: LD_ADDR_VAR 0 43
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 2
55919: NEG
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 3
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 3
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 3
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 2
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 3
56038: NEG
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56090: LD_ADDR_VAR 0 44
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: LD_INT 3
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 3
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 3
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 3
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 3
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 3
56364: NEG
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 3
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: NEG
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 3
56399: NEG
56400: PUSH
56401: LD_INT 3
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56440: LD_ADDR_VAR 0 45
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 2
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: LD_INT 2
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: LD_INT 2
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 2
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: NEG
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 2
56618: NEG
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: LD_INT 3
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 3
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 3
56686: PUSH
56687: LD_INT 3
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: LD_INT 3
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 3
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 3
56737: NEG
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 3
56749: NEG
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56790: LD_ADDR_VAR 0 46
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: LD_INT 3
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 3
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 3
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 3
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 3
57086: NEG
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 3
57097: NEG
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57138: LD_ADDR_VAR 0 47
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57289: LD_ADDR_VAR 0 48
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57436: LD_ADDR_VAR 0 49
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 2
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57580: LD_ADDR_VAR 0 50
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57724: LD_ADDR_VAR 0 51
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: LD_INT 2
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57871: LD_ADDR_VAR 0 52
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: LD_INT 2
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58022: LD_ADDR_VAR 0 53
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58252: LD_ADDR_VAR 0 54
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: NEG
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58482: LD_ADDR_VAR 0 55
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 2
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58712: LD_ADDR_VAR 0 56
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58942: LD_ADDR_VAR 0 57
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59172: LD_ADDR_VAR 0 58
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: LD_INT 2
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: LD_INT 2
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 2
59348: NEG
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59402: LD_ADDR_VAR 0 59
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59490: LD_ADDR_VAR 0 60
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: NEG
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59578: LD_ADDR_VAR 0 61
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59666: LD_ADDR_VAR 0 62
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: LD_INT 1
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59754: LD_ADDR_VAR 0 63
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: LD_INT 1
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59842: LD_ADDR_VAR 0 64
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: ST_TO_ADDR
// end ; 1 :
59930: GO 65827
59932: LD_INT 1
59934: DOUBLE
59935: EQUAL
59936: IFTRUE 59940
59938: GO 62563
59940: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59941: LD_ADDR_VAR 0 11
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: LD_INT 3
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: LD_INT 3
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: LD_INT 2
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: LIST
59984: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59985: LD_ADDR_VAR 0 12
59989: PUSH
59990: LD_INT 2
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 3
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: LIST
60025: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60026: LD_ADDR_VAR 0 13
60030: PUSH
60031: LD_INT 3
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: LD_INT 3
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: LD_INT 3
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: LIST
60065: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60066: LD_ADDR_VAR 0 14
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 3
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: LD_INT 2
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: LIST
60106: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60107: LD_ADDR_VAR 0 15
60111: PUSH
60112: LD_INT 2
60114: NEG
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 3
60125: NEG
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: LIST
60150: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60151: LD_ADDR_VAR 0 16
60155: PUSH
60156: LD_INT 2
60158: NEG
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 3
60170: NEG
60171: PUSH
60172: LD_INT 2
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 3
60182: NEG
60183: PUSH
60184: LD_INT 3
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: LIST
60196: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60197: LD_ADDR_VAR 0 17
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: LD_INT 3
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: LD_INT 3
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: LD_INT 2
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: LIST
60240: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60241: LD_ADDR_VAR 0 18
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 3
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: LIST
60281: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60282: LD_ADDR_VAR 0 19
60286: PUSH
60287: LD_INT 3
60289: PUSH
60290: LD_INT 2
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: LD_INT 3
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: LD_INT 3
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: LIST
60321: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60322: LD_ADDR_VAR 0 20
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: LD_INT 3
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: LD_INT 3
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: LD_INT 2
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: LIST
60362: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60363: LD_ADDR_VAR 0 21
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 3
60392: NEG
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: LIST
60406: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60407: LD_ADDR_VAR 0 22
60411: PUSH
60412: LD_INT 2
60414: NEG
60415: PUSH
60416: LD_INT 3
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 3
60426: NEG
60427: PUSH
60428: LD_INT 2
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 3
60438: NEG
60439: PUSH
60440: LD_INT 3
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: LIST
60452: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60453: LD_ADDR_VAR 0 23
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 3
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: LD_INT 4
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: LD_INT 3
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: LIST
60496: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60497: LD_ADDR_VAR 0 24
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 4
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: LIST
60537: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60538: LD_ADDR_VAR 0 25
60542: PUSH
60543: LD_INT 3
60545: PUSH
60546: LD_INT 3
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 4
60555: PUSH
60556: LD_INT 3
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 3
60565: PUSH
60566: LD_INT 4
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60578: LD_ADDR_VAR 0 26
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: LD_INT 3
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: LD_INT 4
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: LD_INT 3
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: LIST
60618: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60619: LD_ADDR_VAR 0 27
60623: PUSH
60624: LD_INT 3
60626: NEG
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 3
60637: NEG
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 4
60648: NEG
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60663: LD_ADDR_VAR 0 28
60667: PUSH
60668: LD_INT 3
60670: NEG
60671: PUSH
60672: LD_INT 3
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 3
60682: NEG
60683: PUSH
60684: LD_INT 4
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 4
60694: NEG
60695: PUSH
60696: LD_INT 3
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60709: LD_ADDR_VAR 0 29
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: LD_INT 3
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 3
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: LD_INT 2
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 4
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 4
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 3
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 5
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: LD_INT 5
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 4
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: LD_INT 6
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 0
60830: PUSH
60831: LD_INT 6
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: LD_INT 5
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60864: LD_ADDR_VAR 0 30
60868: PUSH
60869: LD_INT 2
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 3
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 4
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 4
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 4
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 5
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 5
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 5
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 6
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 6
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61007: LD_ADDR_VAR 0 31
61011: PUSH
61012: LD_INT 3
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 3
61024: PUSH
61025: LD_INT 3
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 4
61044: PUSH
61045: LD_INT 3
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 4
61054: PUSH
61055: LD_INT 4
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 3
61064: PUSH
61065: LD_INT 4
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 5
61074: PUSH
61075: LD_INT 4
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 5
61084: PUSH
61085: LD_INT 5
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 4
61094: PUSH
61095: LD_INT 5
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 6
61104: PUSH
61105: LD_INT 5
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 6
61114: PUSH
61115: LD_INT 6
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 5
61124: PUSH
61125: LD_INT 6
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61146: LD_ADDR_VAR 0 32
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 3
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: LD_INT 3
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: LD_INT 4
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 4
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: LD_INT 3
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 1
61215: PUSH
61216: LD_INT 5
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: LD_INT 5
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: LD_INT 4
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: LD_INT 6
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: LD_INT 6
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: NEG
61267: PUSH
61268: LD_INT 5
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61289: LD_ADDR_VAR 0 33
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 3
61307: NEG
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 3
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 3
61330: NEG
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 4
61341: NEG
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 4
61352: NEG
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 4
61364: NEG
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 5
61375: NEG
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 5
61386: NEG
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 5
61398: NEG
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 6
61409: NEG
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 6
61420: NEG
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61444: LD_ADDR_VAR 0 34
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: LD_INT 3
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 3
61463: NEG
61464: PUSH
61465: LD_INT 2
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 3
61475: NEG
61476: PUSH
61477: LD_INT 3
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 3
61487: NEG
61488: PUSH
61489: LD_INT 4
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 4
61499: NEG
61500: PUSH
61501: LD_INT 3
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 4
61511: NEG
61512: PUSH
61513: LD_INT 4
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 4
61523: NEG
61524: PUSH
61525: LD_INT 5
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 5
61535: NEG
61536: PUSH
61537: LD_INT 4
61539: NEG
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 5
61547: NEG
61548: PUSH
61549: LD_INT 5
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 5
61559: NEG
61560: PUSH
61561: LD_INT 6
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 6
61571: NEG
61572: PUSH
61573: LD_INT 5
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 6
61583: NEG
61584: PUSH
61585: LD_INT 6
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61607: LD_ADDR_VAR 0 41
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: LD_INT 3
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: LIST
61650: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61651: LD_ADDR_VAR 0 42
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 3
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: LIST
61691: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61692: LD_ADDR_VAR 0 43
61696: PUSH
61697: LD_INT 2
61699: PUSH
61700: LD_INT 2
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 3
61709: PUSH
61710: LD_INT 2
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 2
61719: PUSH
61720: LD_INT 3
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: LIST
61731: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61732: LD_ADDR_VAR 0 44
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: LD_INT 2
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: LD_INT 2
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: LIST
61772: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61773: LD_ADDR_VAR 0 45
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 3
61802: NEG
61803: PUSH
61804: LD_INT 1
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: LIST
61816: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61817: LD_ADDR_VAR 0 46
61821: PUSH
61822: LD_INT 2
61824: NEG
61825: PUSH
61826: LD_INT 2
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: LD_INT 3
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 3
61848: NEG
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: LIST
61862: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61863: LD_ADDR_VAR 0 47
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61896: LD_ADDR_VAR 0 48
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61927: LD_ADDR_VAR 0 49
61931: PUSH
61932: LD_INT 3
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 3
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61956: LD_ADDR_VAR 0 50
61960: PUSH
61961: LD_INT 2
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: LD_INT 3
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61985: LD_ADDR_VAR 0 51
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 2
62003: NEG
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62016: LD_ADDR_VAR 0 52
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 3
62035: NEG
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62049: LD_ADDR_VAR 0 53
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: LD_INT 3
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 3
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: LD_INT 2
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: LIST
62092: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62093: LD_ADDR_VAR 0 54
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 3
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 3
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: LIST
62133: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62134: LD_ADDR_VAR 0 55
62138: PUSH
62139: LD_INT 3
62141: PUSH
62142: LD_INT 2
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 3
62151: PUSH
62152: LD_INT 3
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 2
62161: PUSH
62162: LD_INT 3
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: LIST
62173: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62174: LD_ADDR_VAR 0 56
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: LD_INT 3
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: LD_INT 3
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: LIST
62214: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62215: LD_ADDR_VAR 0 57
62219: PUSH
62220: LD_INT 2
62222: NEG
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 3
62233: NEG
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 3
62244: NEG
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: LIST
62258: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62259: LD_ADDR_VAR 0 58
62263: PUSH
62264: LD_INT 2
62266: NEG
62267: PUSH
62268: LD_INT 3
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 3
62278: NEG
62279: PUSH
62280: LD_INT 2
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 3
62290: NEG
62291: PUSH
62292: LD_INT 3
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62305: LD_ADDR_VAR 0 59
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: LD_INT 2
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: LIST
62348: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62349: LD_ADDR_VAR 0 60
62353: PUSH
62354: LD_INT 1
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 2
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 2
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: LIST
62389: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62390: LD_ADDR_VAR 0 61
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 2
62407: PUSH
62408: LD_INT 2
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: LD_INT 2
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: LIST
62429: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62430: LD_ADDR_VAR 0 62
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: LD_INT 2
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: LD_INT 2
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: LIST
62470: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62471: LD_ADDR_VAR 0 63
62475: PUSH
62476: LD_INT 1
62478: NEG
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 2
62489: NEG
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: LIST
62514: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62515: LD_ADDR_VAR 0 64
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: LD_INT 2
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 2
62534: NEG
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 2
62546: NEG
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: ST_TO_ADDR
// end ; 2 :
62561: GO 65827
62563: LD_INT 2
62565: DOUBLE
62566: EQUAL
62567: IFTRUE 62571
62569: GO 65826
62571: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62572: LD_ADDR_VAR 0 29
62576: PUSH
62577: LD_INT 4
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 4
62589: PUSH
62590: LD_INT 1
62592: NEG
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 5
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 5
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 4
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 3
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 3
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 3
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 5
62662: PUSH
62663: LD_INT 2
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 3
62672: PUSH
62673: LD_INT 3
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 3
62682: PUSH
62683: LD_INT 2
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 4
62692: PUSH
62693: LD_INT 3
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 4
62702: PUSH
62703: LD_INT 4
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 3
62712: PUSH
62713: LD_INT 4
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 2
62722: PUSH
62723: LD_INT 3
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 4
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: LD_INT 4
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: LD_INT 4
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: LD_INT 3
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 1
62782: PUSH
62783: LD_INT 4
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: LD_INT 5
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 5
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: LD_INT 4
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: LD_INT 3
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 2
62834: PUSH
62835: LD_INT 5
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 2
62844: NEG
62845: PUSH
62846: LD_INT 3
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 3
62855: NEG
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 3
62866: NEG
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 2
62878: NEG
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 2
62889: NEG
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 3
62900: NEG
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 4
62911: NEG
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 4
62922: NEG
62923: PUSH
62924: LD_INT 1
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 4
62934: NEG
62935: PUSH
62936: LD_INT 2
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 2
62946: NEG
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 4
62957: NEG
62958: PUSH
62959: LD_INT 4
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 4
62969: NEG
62970: PUSH
62971: LD_INT 5
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 3
62981: NEG
62982: PUSH
62983: LD_INT 4
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 3
62993: NEG
62994: PUSH
62995: LD_INT 3
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 4
63005: NEG
63006: PUSH
63007: LD_INT 3
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 5
63017: NEG
63018: PUSH
63019: LD_INT 4
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 5
63029: NEG
63030: PUSH
63031: LD_INT 5
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 3
63041: NEG
63042: PUSH
63043: LD_INT 5
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 5
63053: NEG
63054: PUSH
63055: LD_INT 3
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63110: LD_ADDR_VAR 0 30
63114: PUSH
63115: LD_INT 4
63117: PUSH
63118: LD_INT 4
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 4
63127: PUSH
63128: LD_INT 3
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 5
63137: PUSH
63138: LD_INT 4
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 5
63147: PUSH
63148: LD_INT 5
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 4
63157: PUSH
63158: LD_INT 5
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 3
63167: PUSH
63168: LD_INT 4
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 3
63177: PUSH
63178: LD_INT 3
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 5
63187: PUSH
63188: LD_INT 3
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 3
63197: PUSH
63198: LD_INT 5
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: LD_INT 3
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 0
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: LD_INT 3
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: LD_INT 4
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 4
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: LD_INT 3
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 2
63279: PUSH
63280: LD_INT 4
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 2
63289: NEG
63290: PUSH
63291: LD_INT 2
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 4
63300: NEG
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 4
63311: NEG
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 3
63323: NEG
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 3
63334: NEG
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 4
63345: NEG
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 5
63356: NEG
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 5
63367: NEG
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 5
63379: NEG
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 3
63391: NEG
63392: PUSH
63393: LD_INT 2
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 3
63402: NEG
63403: PUSH
63404: LD_INT 3
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 3
63414: NEG
63415: PUSH
63416: LD_INT 4
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: NEG
63427: PUSH
63428: LD_INT 3
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 2
63438: NEG
63439: PUSH
63440: LD_INT 2
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 3
63450: NEG
63451: PUSH
63452: LD_INT 2
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 4
63462: NEG
63463: PUSH
63464: LD_INT 3
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 4
63474: NEG
63475: PUSH
63476: LD_INT 4
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: LD_INT 4
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 4
63498: NEG
63499: PUSH
63500: LD_INT 2
63502: NEG
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: LD_INT 4
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 5
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: LD_INT 4
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: LD_INT 3
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: LD_INT 3
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: LD_INT 4
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: LD_INT 5
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 2
63589: PUSH
63590: LD_INT 3
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 2
63600: NEG
63601: PUSH
63602: LD_INT 5
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63657: LD_ADDR_VAR 0 31
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: LD_INT 4
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: LD_INT 3
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: LD_INT 4
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: LD_INT 5
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: LD_INT 5
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: LD_INT 4
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: LD_INT 3
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 2
63736: PUSH
63737: LD_INT 5
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 2
63746: NEG
63747: PUSH
63748: LD_INT 3
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 3
63757: NEG
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 3
63768: NEG
63769: PUSH
63770: LD_INT 1
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 2
63791: NEG
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 3
63802: NEG
63803: PUSH
63804: LD_INT 1
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 4
63813: NEG
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 4
63824: NEG
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 4
63836: NEG
63837: PUSH
63838: LD_INT 2
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 2
63848: NEG
63849: PUSH
63850: LD_INT 2
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 4
63859: NEG
63860: PUSH
63861: LD_INT 4
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 4
63871: NEG
63872: PUSH
63873: LD_INT 5
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 3
63883: NEG
63884: PUSH
63885: LD_INT 4
63887: NEG
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 3
63895: NEG
63896: PUSH
63897: LD_INT 3
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 4
63907: NEG
63908: PUSH
63909: LD_INT 3
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 5
63919: NEG
63920: PUSH
63921: LD_INT 4
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 5
63931: NEG
63932: PUSH
63933: LD_INT 5
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 3
63943: NEG
63944: PUSH
63945: LD_INT 5
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 5
63955: NEG
63956: PUSH
63957: LD_INT 3
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: LD_INT 3
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: LD_INT 4
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: LD_INT 3
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: LD_INT 2
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: LD_INT 2
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: LD_INT 3
64026: NEG
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 1
64034: NEG
64035: PUSH
64036: LD_INT 4
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 2
64046: PUSH
64047: LD_INT 2
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 2
64057: NEG
64058: PUSH
64059: LD_INT 4
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 4
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 4
64079: PUSH
64080: LD_INT 1
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 5
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 5
64100: PUSH
64101: LD_INT 1
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 4
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 3
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 3
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 3
64141: PUSH
64142: LD_INT 2
64144: NEG
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 5
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64207: LD_ADDR_VAR 0 32
64211: PUSH
64212: LD_INT 4
64214: NEG
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 4
64225: NEG
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 3
64237: NEG
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 3
64248: NEG
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 4
64259: NEG
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 5
64270: NEG
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 5
64281: NEG
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 5
64293: NEG
64294: PUSH
64295: LD_INT 2
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 3
64305: NEG
64306: PUSH
64307: LD_INT 2
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: LD_INT 3
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 3
64328: NEG
64329: PUSH
64330: LD_INT 4
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 2
64340: NEG
64341: PUSH
64342: LD_INT 3
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 2
64352: NEG
64353: PUSH
64354: LD_INT 2
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 3
64364: NEG
64365: PUSH
64366: LD_INT 2
64368: NEG
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 4
64376: NEG
64377: PUSH
64378: LD_INT 3
64380: NEG
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 4
64388: NEG
64389: PUSH
64390: LD_INT 4
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: LD_INT 4
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 4
64412: NEG
64413: PUSH
64414: LD_INT 2
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: LD_INT 4
64427: NEG
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 5
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: LD_INT 4
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: LD_INT 3
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: LD_INT 3
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: LD_INT 4
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: NEG
64492: PUSH
64493: LD_INT 5
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 2
64503: PUSH
64504: LD_INT 3
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 2
64514: NEG
64515: PUSH
64516: LD_INT 5
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 3
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 3
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 4
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 4
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 3
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 2
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 2
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: LD_INT 2
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 4
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 4
64619: PUSH
64620: LD_INT 4
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 4
64629: PUSH
64630: LD_INT 3
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 5
64639: PUSH
64640: LD_INT 4
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 5
64649: PUSH
64650: LD_INT 5
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 4
64659: PUSH
64660: LD_INT 5
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 3
64669: PUSH
64670: LD_INT 4
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 3
64679: PUSH
64680: LD_INT 3
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 5
64689: PUSH
64690: LD_INT 3
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 3
64699: PUSH
64700: LD_INT 5
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64754: LD_ADDR_VAR 0 33
64758: PUSH
64759: LD_INT 4
64761: NEG
64762: PUSH
64763: LD_INT 4
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 4
64773: NEG
64774: PUSH
64775: LD_INT 5
64777: NEG
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 3
64785: NEG
64786: PUSH
64787: LD_INT 4
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 3
64797: NEG
64798: PUSH
64799: LD_INT 3
64801: NEG
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 4
64809: NEG
64810: PUSH
64811: LD_INT 3
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 5
64821: NEG
64822: PUSH
64823: LD_INT 4
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 5
64833: NEG
64834: PUSH
64835: LD_INT 5
64837: NEG
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 3
64845: NEG
64846: PUSH
64847: LD_INT 5
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 5
64857: NEG
64858: PUSH
64859: LD_INT 3
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: LD_INT 3
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 4
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: LD_INT 3
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: LD_INT 2
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 2
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: LD_INT 3
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 1
64936: NEG
64937: PUSH
64938: LD_INT 4
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 2
64948: PUSH
64949: LD_INT 2
64951: NEG
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 2
64959: NEG
64960: PUSH
64961: LD_INT 4
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 4
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 4
64981: PUSH
64982: LD_INT 1
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 5
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 5
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 4
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 3
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 3
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 3
65043: PUSH
65044: LD_INT 2
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 5
65054: PUSH
65055: LD_INT 2
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 3
65064: PUSH
65065: LD_INT 3
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 3
65074: PUSH
65075: LD_INT 2
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 4
65084: PUSH
65085: LD_INT 3
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 4
65094: PUSH
65095: LD_INT 4
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: LD_INT 4
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: LD_INT 3
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 2
65124: PUSH
65125: LD_INT 2
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 4
65134: PUSH
65135: LD_INT 2
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 2
65144: PUSH
65145: LD_INT 4
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: LD_INT 4
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 3
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: LD_INT 4
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: PUSH
65185: LD_INT 5
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 0
65194: PUSH
65195: LD_INT 5
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 1
65204: NEG
65205: PUSH
65206: LD_INT 4
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: LD_INT 3
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 2
65226: PUSH
65227: LD_INT 5
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 2
65236: NEG
65237: PUSH
65238: LD_INT 3
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65292: LD_ADDR_VAR 0 34
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: LD_INT 4
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: LD_INT 5
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: LD_INT 4
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: LD_INT 3
65335: NEG
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: LD_INT 3
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 1
65354: NEG
65355: PUSH
65356: LD_INT 4
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: NEG
65367: PUSH
65368: LD_INT 5
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 2
65378: PUSH
65379: LD_INT 3
65381: NEG
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 2
65389: NEG
65390: PUSH
65391: LD_INT 5
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 3
65401: PUSH
65402: LD_INT 0
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 3
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 4
65422: PUSH
65423: LD_INT 0
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 4
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: LD_INT 1
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 2
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 2
65462: PUSH
65463: LD_INT 1
65465: NEG
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: LD_INT 2
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 4
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 4
65494: PUSH
65495: LD_INT 4
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 4
65504: PUSH
65505: LD_INT 3
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 5
65514: PUSH
65515: LD_INT 4
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 5
65524: PUSH
65525: LD_INT 5
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 4
65534: PUSH
65535: LD_INT 5
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 3
65544: PUSH
65545: LD_INT 4
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 3
65554: PUSH
65555: LD_INT 3
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 5
65564: PUSH
65565: LD_INT 3
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 3
65574: PUSH
65575: LD_INT 5
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: LD_INT 3
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: LD_INT 2
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 1
65604: PUSH
65605: LD_INT 3
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 1
65614: PUSH
65615: LD_INT 4
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: LD_INT 4
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: LD_INT 3
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: LD_INT 2
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: PUSH
65657: LD_INT 4
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 2
65666: NEG
65667: PUSH
65668: LD_INT 2
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 4
65677: NEG
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 4
65688: NEG
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 3
65700: NEG
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 3
65711: NEG
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 4
65722: NEG
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 5
65733: NEG
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 5
65744: NEG
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 5
65756: NEG
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 3
65768: NEG
65769: PUSH
65770: LD_INT 2
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: ST_TO_ADDR
// end ; end ;
65824: GO 65827
65826: POP
// case btype of b_depot , b_warehouse :
65827: LD_VAR 0 1
65831: PUSH
65832: LD_INT 0
65834: DOUBLE
65835: EQUAL
65836: IFTRUE 65846
65838: LD_INT 1
65840: DOUBLE
65841: EQUAL
65842: IFTRUE 65846
65844: GO 66047
65846: POP
// case nation of nation_american :
65847: LD_VAR 0 5
65851: PUSH
65852: LD_INT 1
65854: DOUBLE
65855: EQUAL
65856: IFTRUE 65860
65858: GO 65916
65860: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65861: LD_ADDR_VAR 0 9
65865: PUSH
65866: LD_VAR 0 11
65870: PUSH
65871: LD_VAR 0 12
65875: PUSH
65876: LD_VAR 0 13
65880: PUSH
65881: LD_VAR 0 14
65885: PUSH
65886: LD_VAR 0 15
65890: PUSH
65891: LD_VAR 0 16
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: PUSH
65904: LD_VAR 0 4
65908: PUSH
65909: LD_INT 1
65911: PLUS
65912: ARRAY
65913: ST_TO_ADDR
65914: GO 66045
65916: LD_INT 2
65918: DOUBLE
65919: EQUAL
65920: IFTRUE 65924
65922: GO 65980
65924: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65925: LD_ADDR_VAR 0 9
65929: PUSH
65930: LD_VAR 0 17
65934: PUSH
65935: LD_VAR 0 18
65939: PUSH
65940: LD_VAR 0 19
65944: PUSH
65945: LD_VAR 0 20
65949: PUSH
65950: LD_VAR 0 21
65954: PUSH
65955: LD_VAR 0 22
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: PUSH
65968: LD_VAR 0 4
65972: PUSH
65973: LD_INT 1
65975: PLUS
65976: ARRAY
65977: ST_TO_ADDR
65978: GO 66045
65980: LD_INT 3
65982: DOUBLE
65983: EQUAL
65984: IFTRUE 65988
65986: GO 66044
65988: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65989: LD_ADDR_VAR 0 9
65993: PUSH
65994: LD_VAR 0 23
65998: PUSH
65999: LD_VAR 0 24
66003: PUSH
66004: LD_VAR 0 25
66008: PUSH
66009: LD_VAR 0 26
66013: PUSH
66014: LD_VAR 0 27
66018: PUSH
66019: LD_VAR 0 28
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: PUSH
66032: LD_VAR 0 4
66036: PUSH
66037: LD_INT 1
66039: PLUS
66040: ARRAY
66041: ST_TO_ADDR
66042: GO 66045
66044: POP
66045: GO 66600
66047: LD_INT 2
66049: DOUBLE
66050: EQUAL
66051: IFTRUE 66061
66053: LD_INT 3
66055: DOUBLE
66056: EQUAL
66057: IFTRUE 66061
66059: GO 66117
66061: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66062: LD_ADDR_VAR 0 9
66066: PUSH
66067: LD_VAR 0 29
66071: PUSH
66072: LD_VAR 0 30
66076: PUSH
66077: LD_VAR 0 31
66081: PUSH
66082: LD_VAR 0 32
66086: PUSH
66087: LD_VAR 0 33
66091: PUSH
66092: LD_VAR 0 34
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: PUSH
66105: LD_VAR 0 4
66109: PUSH
66110: LD_INT 1
66112: PLUS
66113: ARRAY
66114: ST_TO_ADDR
66115: GO 66600
66117: LD_INT 16
66119: DOUBLE
66120: EQUAL
66121: IFTRUE 66179
66123: LD_INT 17
66125: DOUBLE
66126: EQUAL
66127: IFTRUE 66179
66129: LD_INT 18
66131: DOUBLE
66132: EQUAL
66133: IFTRUE 66179
66135: LD_INT 19
66137: DOUBLE
66138: EQUAL
66139: IFTRUE 66179
66141: LD_INT 22
66143: DOUBLE
66144: EQUAL
66145: IFTRUE 66179
66147: LD_INT 20
66149: DOUBLE
66150: EQUAL
66151: IFTRUE 66179
66153: LD_INT 21
66155: DOUBLE
66156: EQUAL
66157: IFTRUE 66179
66159: LD_INT 23
66161: DOUBLE
66162: EQUAL
66163: IFTRUE 66179
66165: LD_INT 24
66167: DOUBLE
66168: EQUAL
66169: IFTRUE 66179
66171: LD_INT 25
66173: DOUBLE
66174: EQUAL
66175: IFTRUE 66179
66177: GO 66235
66179: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66180: LD_ADDR_VAR 0 9
66184: PUSH
66185: LD_VAR 0 35
66189: PUSH
66190: LD_VAR 0 36
66194: PUSH
66195: LD_VAR 0 37
66199: PUSH
66200: LD_VAR 0 38
66204: PUSH
66205: LD_VAR 0 39
66209: PUSH
66210: LD_VAR 0 40
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: PUSH
66223: LD_VAR 0 4
66227: PUSH
66228: LD_INT 1
66230: PLUS
66231: ARRAY
66232: ST_TO_ADDR
66233: GO 66600
66235: LD_INT 6
66237: DOUBLE
66238: EQUAL
66239: IFTRUE 66291
66241: LD_INT 7
66243: DOUBLE
66244: EQUAL
66245: IFTRUE 66291
66247: LD_INT 8
66249: DOUBLE
66250: EQUAL
66251: IFTRUE 66291
66253: LD_INT 13
66255: DOUBLE
66256: EQUAL
66257: IFTRUE 66291
66259: LD_INT 12
66261: DOUBLE
66262: EQUAL
66263: IFTRUE 66291
66265: LD_INT 15
66267: DOUBLE
66268: EQUAL
66269: IFTRUE 66291
66271: LD_INT 11
66273: DOUBLE
66274: EQUAL
66275: IFTRUE 66291
66277: LD_INT 14
66279: DOUBLE
66280: EQUAL
66281: IFTRUE 66291
66283: LD_INT 10
66285: DOUBLE
66286: EQUAL
66287: IFTRUE 66291
66289: GO 66347
66291: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66292: LD_ADDR_VAR 0 9
66296: PUSH
66297: LD_VAR 0 41
66301: PUSH
66302: LD_VAR 0 42
66306: PUSH
66307: LD_VAR 0 43
66311: PUSH
66312: LD_VAR 0 44
66316: PUSH
66317: LD_VAR 0 45
66321: PUSH
66322: LD_VAR 0 46
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: PUSH
66335: LD_VAR 0 4
66339: PUSH
66340: LD_INT 1
66342: PLUS
66343: ARRAY
66344: ST_TO_ADDR
66345: GO 66600
66347: LD_INT 36
66349: DOUBLE
66350: EQUAL
66351: IFTRUE 66355
66353: GO 66411
66355: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66356: LD_ADDR_VAR 0 9
66360: PUSH
66361: LD_VAR 0 47
66365: PUSH
66366: LD_VAR 0 48
66370: PUSH
66371: LD_VAR 0 49
66375: PUSH
66376: LD_VAR 0 50
66380: PUSH
66381: LD_VAR 0 51
66385: PUSH
66386: LD_VAR 0 52
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: PUSH
66399: LD_VAR 0 4
66403: PUSH
66404: LD_INT 1
66406: PLUS
66407: ARRAY
66408: ST_TO_ADDR
66409: GO 66600
66411: LD_INT 4
66413: DOUBLE
66414: EQUAL
66415: IFTRUE 66437
66417: LD_INT 5
66419: DOUBLE
66420: EQUAL
66421: IFTRUE 66437
66423: LD_INT 34
66425: DOUBLE
66426: EQUAL
66427: IFTRUE 66437
66429: LD_INT 37
66431: DOUBLE
66432: EQUAL
66433: IFTRUE 66437
66435: GO 66493
66437: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66438: LD_ADDR_VAR 0 9
66442: PUSH
66443: LD_VAR 0 53
66447: PUSH
66448: LD_VAR 0 54
66452: PUSH
66453: LD_VAR 0 55
66457: PUSH
66458: LD_VAR 0 56
66462: PUSH
66463: LD_VAR 0 57
66467: PUSH
66468: LD_VAR 0 58
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: PUSH
66481: LD_VAR 0 4
66485: PUSH
66486: LD_INT 1
66488: PLUS
66489: ARRAY
66490: ST_TO_ADDR
66491: GO 66600
66493: LD_INT 31
66495: DOUBLE
66496: EQUAL
66497: IFTRUE 66543
66499: LD_INT 32
66501: DOUBLE
66502: EQUAL
66503: IFTRUE 66543
66505: LD_INT 33
66507: DOUBLE
66508: EQUAL
66509: IFTRUE 66543
66511: LD_INT 27
66513: DOUBLE
66514: EQUAL
66515: IFTRUE 66543
66517: LD_INT 26
66519: DOUBLE
66520: EQUAL
66521: IFTRUE 66543
66523: LD_INT 28
66525: DOUBLE
66526: EQUAL
66527: IFTRUE 66543
66529: LD_INT 29
66531: DOUBLE
66532: EQUAL
66533: IFTRUE 66543
66535: LD_INT 30
66537: DOUBLE
66538: EQUAL
66539: IFTRUE 66543
66541: GO 66599
66543: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66544: LD_ADDR_VAR 0 9
66548: PUSH
66549: LD_VAR 0 59
66553: PUSH
66554: LD_VAR 0 60
66558: PUSH
66559: LD_VAR 0 61
66563: PUSH
66564: LD_VAR 0 62
66568: PUSH
66569: LD_VAR 0 63
66573: PUSH
66574: LD_VAR 0 64
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: PUSH
66587: LD_VAR 0 4
66591: PUSH
66592: LD_INT 1
66594: PLUS
66595: ARRAY
66596: ST_TO_ADDR
66597: GO 66600
66599: POP
// temp_list2 = [ ] ;
66600: LD_ADDR_VAR 0 10
66604: PUSH
66605: EMPTY
66606: ST_TO_ADDR
// for i in temp_list do
66607: LD_ADDR_VAR 0 8
66611: PUSH
66612: LD_VAR 0 9
66616: PUSH
66617: FOR_IN
66618: IFFALSE 66670
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66620: LD_ADDR_VAR 0 10
66624: PUSH
66625: LD_VAR 0 10
66629: PUSH
66630: LD_VAR 0 8
66634: PUSH
66635: LD_INT 1
66637: ARRAY
66638: PUSH
66639: LD_VAR 0 2
66643: PLUS
66644: PUSH
66645: LD_VAR 0 8
66649: PUSH
66650: LD_INT 2
66652: ARRAY
66653: PUSH
66654: LD_VAR 0 3
66658: PLUS
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: EMPTY
66665: LIST
66666: ADD
66667: ST_TO_ADDR
66668: GO 66617
66670: POP
66671: POP
// result = temp_list2 ;
66672: LD_ADDR_VAR 0 7
66676: PUSH
66677: LD_VAR 0 10
66681: ST_TO_ADDR
// end ;
66682: LD_VAR 0 7
66686: RET
// export function EnemyInRange ( unit , dist ) ; begin
66687: LD_INT 0
66689: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66690: LD_ADDR_VAR 0 3
66694: PUSH
66695: LD_VAR 0 1
66699: PPUSH
66700: CALL_OW 255
66704: PPUSH
66705: LD_VAR 0 1
66709: PPUSH
66710: CALL_OW 250
66714: PPUSH
66715: LD_VAR 0 1
66719: PPUSH
66720: CALL_OW 251
66724: PPUSH
66725: LD_VAR 0 2
66729: PPUSH
66730: CALL 40083 0 4
66734: PUSH
66735: LD_INT 4
66737: ARRAY
66738: ST_TO_ADDR
// end ;
66739: LD_VAR 0 3
66743: RET
// export function PlayerSeeMe ( unit ) ; begin
66744: LD_INT 0
66746: PPUSH
// result := See ( your_side , unit ) ;
66747: LD_ADDR_VAR 0 2
66751: PUSH
66752: LD_OWVAR 2
66756: PPUSH
66757: LD_VAR 0 1
66761: PPUSH
66762: CALL_OW 292
66766: ST_TO_ADDR
// end ;
66767: LD_VAR 0 2
66771: RET
// export function ReverseDir ( unit ) ; begin
66772: LD_INT 0
66774: PPUSH
// if not unit then
66775: LD_VAR 0 1
66779: NOT
66780: IFFALSE 66784
// exit ;
66782: GO 66807
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66784: LD_ADDR_VAR 0 2
66788: PUSH
66789: LD_VAR 0 1
66793: PPUSH
66794: CALL_OW 254
66798: PUSH
66799: LD_INT 3
66801: PLUS
66802: PUSH
66803: LD_INT 6
66805: MOD
66806: ST_TO_ADDR
// end ;
66807: LD_VAR 0 2
66811: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66812: LD_INT 0
66814: PPUSH
66815: PPUSH
66816: PPUSH
66817: PPUSH
66818: PPUSH
// if not hexes then
66819: LD_VAR 0 2
66823: NOT
66824: IFFALSE 66828
// exit ;
66826: GO 66976
// dist := 9999 ;
66828: LD_ADDR_VAR 0 5
66832: PUSH
66833: LD_INT 9999
66835: ST_TO_ADDR
// for i = 1 to hexes do
66836: LD_ADDR_VAR 0 4
66840: PUSH
66841: DOUBLE
66842: LD_INT 1
66844: DEC
66845: ST_TO_ADDR
66846: LD_VAR 0 2
66850: PUSH
66851: FOR_TO
66852: IFFALSE 66964
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66854: LD_VAR 0 1
66858: PPUSH
66859: LD_VAR 0 2
66863: PUSH
66864: LD_VAR 0 4
66868: ARRAY
66869: PUSH
66870: LD_INT 1
66872: ARRAY
66873: PPUSH
66874: LD_VAR 0 2
66878: PUSH
66879: LD_VAR 0 4
66883: ARRAY
66884: PUSH
66885: LD_INT 2
66887: ARRAY
66888: PPUSH
66889: CALL_OW 297
66893: PUSH
66894: LD_VAR 0 5
66898: LESS
66899: IFFALSE 66962
// begin hex := hexes [ i ] ;
66901: LD_ADDR_VAR 0 7
66905: PUSH
66906: LD_VAR 0 2
66910: PUSH
66911: LD_VAR 0 4
66915: ARRAY
66916: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66917: LD_ADDR_VAR 0 5
66921: PUSH
66922: LD_VAR 0 1
66926: PPUSH
66927: LD_VAR 0 2
66931: PUSH
66932: LD_VAR 0 4
66936: ARRAY
66937: PUSH
66938: LD_INT 1
66940: ARRAY
66941: PPUSH
66942: LD_VAR 0 2
66946: PUSH
66947: LD_VAR 0 4
66951: ARRAY
66952: PUSH
66953: LD_INT 2
66955: ARRAY
66956: PPUSH
66957: CALL_OW 297
66961: ST_TO_ADDR
// end ; end ;
66962: GO 66851
66964: POP
66965: POP
// result := hex ;
66966: LD_ADDR_VAR 0 3
66970: PUSH
66971: LD_VAR 0 7
66975: ST_TO_ADDR
// end ;
66976: LD_VAR 0 3
66980: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66981: LD_INT 0
66983: PPUSH
66984: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66985: LD_VAR 0 1
66989: NOT
66990: PUSH
66991: LD_VAR 0 1
66995: PUSH
66996: LD_INT 21
66998: PUSH
66999: LD_INT 2
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 23
67008: PUSH
67009: LD_INT 2
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PPUSH
67020: CALL_OW 69
67024: IN
67025: NOT
67026: OR
67027: IFFALSE 67031
// exit ;
67029: GO 67078
// for i = 1 to 3 do
67031: LD_ADDR_VAR 0 3
67035: PUSH
67036: DOUBLE
67037: LD_INT 1
67039: DEC
67040: ST_TO_ADDR
67041: LD_INT 3
67043: PUSH
67044: FOR_TO
67045: IFFALSE 67076
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67047: LD_VAR 0 1
67051: PPUSH
67052: CALL_OW 250
67056: PPUSH
67057: LD_VAR 0 1
67061: PPUSH
67062: CALL_OW 251
67066: PPUSH
67067: LD_INT 1
67069: PPUSH
67070: CALL_OW 453
67074: GO 67044
67076: POP
67077: POP
// end ;
67078: LD_VAR 0 2
67082: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67083: LD_INT 0
67085: PPUSH
67086: PPUSH
67087: PPUSH
67088: PPUSH
67089: PPUSH
67090: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67091: LD_VAR 0 1
67095: NOT
67096: PUSH
67097: LD_VAR 0 2
67101: NOT
67102: OR
67103: PUSH
67104: LD_VAR 0 1
67108: PPUSH
67109: CALL_OW 314
67113: OR
67114: IFFALSE 67118
// exit ;
67116: GO 67559
// x := GetX ( enemy_unit ) ;
67118: LD_ADDR_VAR 0 7
67122: PUSH
67123: LD_VAR 0 2
67127: PPUSH
67128: CALL_OW 250
67132: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67133: LD_ADDR_VAR 0 8
67137: PUSH
67138: LD_VAR 0 2
67142: PPUSH
67143: CALL_OW 251
67147: ST_TO_ADDR
// if not x or not y then
67148: LD_VAR 0 7
67152: NOT
67153: PUSH
67154: LD_VAR 0 8
67158: NOT
67159: OR
67160: IFFALSE 67164
// exit ;
67162: GO 67559
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67164: LD_ADDR_VAR 0 6
67168: PUSH
67169: LD_VAR 0 7
67173: PPUSH
67174: LD_INT 0
67176: PPUSH
67177: LD_INT 4
67179: PPUSH
67180: CALL_OW 272
67184: PUSH
67185: LD_VAR 0 8
67189: PPUSH
67190: LD_INT 0
67192: PPUSH
67193: LD_INT 4
67195: PPUSH
67196: CALL_OW 273
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_VAR 0 7
67209: PPUSH
67210: LD_INT 1
67212: PPUSH
67213: LD_INT 4
67215: PPUSH
67216: CALL_OW 272
67220: PUSH
67221: LD_VAR 0 8
67225: PPUSH
67226: LD_INT 1
67228: PPUSH
67229: LD_INT 4
67231: PPUSH
67232: CALL_OW 273
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_VAR 0 7
67245: PPUSH
67246: LD_INT 2
67248: PPUSH
67249: LD_INT 4
67251: PPUSH
67252: CALL_OW 272
67256: PUSH
67257: LD_VAR 0 8
67261: PPUSH
67262: LD_INT 2
67264: PPUSH
67265: LD_INT 4
67267: PPUSH
67268: CALL_OW 273
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_VAR 0 7
67281: PPUSH
67282: LD_INT 3
67284: PPUSH
67285: LD_INT 4
67287: PPUSH
67288: CALL_OW 272
67292: PUSH
67293: LD_VAR 0 8
67297: PPUSH
67298: LD_INT 3
67300: PPUSH
67301: LD_INT 4
67303: PPUSH
67304: CALL_OW 273
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_VAR 0 7
67317: PPUSH
67318: LD_INT 4
67320: PPUSH
67321: LD_INT 4
67323: PPUSH
67324: CALL_OW 272
67328: PUSH
67329: LD_VAR 0 8
67333: PPUSH
67334: LD_INT 4
67336: PPUSH
67337: LD_INT 4
67339: PPUSH
67340: CALL_OW 273
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_VAR 0 7
67353: PPUSH
67354: LD_INT 5
67356: PPUSH
67357: LD_INT 4
67359: PPUSH
67360: CALL_OW 272
67364: PUSH
67365: LD_VAR 0 8
67369: PPUSH
67370: LD_INT 5
67372: PPUSH
67373: LD_INT 4
67375: PPUSH
67376: CALL_OW 273
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: ST_TO_ADDR
// for i = tmp downto 1 do
67393: LD_ADDR_VAR 0 4
67397: PUSH
67398: DOUBLE
67399: LD_VAR 0 6
67403: INC
67404: ST_TO_ADDR
67405: LD_INT 1
67407: PUSH
67408: FOR_DOWNTO
67409: IFFALSE 67510
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67411: LD_VAR 0 6
67415: PUSH
67416: LD_VAR 0 4
67420: ARRAY
67421: PUSH
67422: LD_INT 1
67424: ARRAY
67425: PPUSH
67426: LD_VAR 0 6
67430: PUSH
67431: LD_VAR 0 4
67435: ARRAY
67436: PUSH
67437: LD_INT 2
67439: ARRAY
67440: PPUSH
67441: CALL_OW 488
67445: NOT
67446: PUSH
67447: LD_VAR 0 6
67451: PUSH
67452: LD_VAR 0 4
67456: ARRAY
67457: PUSH
67458: LD_INT 1
67460: ARRAY
67461: PPUSH
67462: LD_VAR 0 6
67466: PUSH
67467: LD_VAR 0 4
67471: ARRAY
67472: PUSH
67473: LD_INT 2
67475: ARRAY
67476: PPUSH
67477: CALL_OW 428
67481: PUSH
67482: LD_INT 0
67484: NONEQUAL
67485: OR
67486: IFFALSE 67508
// tmp := Delete ( tmp , i ) ;
67488: LD_ADDR_VAR 0 6
67492: PUSH
67493: LD_VAR 0 6
67497: PPUSH
67498: LD_VAR 0 4
67502: PPUSH
67503: CALL_OW 3
67507: ST_TO_ADDR
67508: GO 67408
67510: POP
67511: POP
// j := GetClosestHex ( unit , tmp ) ;
67512: LD_ADDR_VAR 0 5
67516: PUSH
67517: LD_VAR 0 1
67521: PPUSH
67522: LD_VAR 0 6
67526: PPUSH
67527: CALL 66812 0 2
67531: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67532: LD_VAR 0 1
67536: PPUSH
67537: LD_VAR 0 5
67541: PUSH
67542: LD_INT 1
67544: ARRAY
67545: PPUSH
67546: LD_VAR 0 5
67550: PUSH
67551: LD_INT 2
67553: ARRAY
67554: PPUSH
67555: CALL_OW 111
// end ;
67559: LD_VAR 0 3
67563: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67564: LD_INT 0
67566: PPUSH
67567: PPUSH
67568: PPUSH
// uc_side = 0 ;
67569: LD_ADDR_OWVAR 20
67573: PUSH
67574: LD_INT 0
67576: ST_TO_ADDR
// uc_nation = 0 ;
67577: LD_ADDR_OWVAR 21
67581: PUSH
67582: LD_INT 0
67584: ST_TO_ADDR
// InitHc_All ( ) ;
67585: CALL_OW 584
// InitVc ;
67589: CALL_OW 20
// if mastodonts then
67593: LD_VAR 0 6
67597: IFFALSE 67664
// for i = 1 to mastodonts do
67599: LD_ADDR_VAR 0 11
67603: PUSH
67604: DOUBLE
67605: LD_INT 1
67607: DEC
67608: ST_TO_ADDR
67609: LD_VAR 0 6
67613: PUSH
67614: FOR_TO
67615: IFFALSE 67662
// begin vc_chassis := 31 ;
67617: LD_ADDR_OWVAR 37
67621: PUSH
67622: LD_INT 31
67624: ST_TO_ADDR
// vc_control := control_rider ;
67625: LD_ADDR_OWVAR 38
67629: PUSH
67630: LD_INT 4
67632: ST_TO_ADDR
// animal := CreateVehicle ;
67633: LD_ADDR_VAR 0 12
67637: PUSH
67638: CALL_OW 45
67642: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67643: LD_VAR 0 12
67647: PPUSH
67648: LD_VAR 0 8
67652: PPUSH
67653: LD_INT 0
67655: PPUSH
67656: CALL 69852 0 3
// end ;
67660: GO 67614
67662: POP
67663: POP
// if horses then
67664: LD_VAR 0 5
67668: IFFALSE 67735
// for i = 1 to horses do
67670: LD_ADDR_VAR 0 11
67674: PUSH
67675: DOUBLE
67676: LD_INT 1
67678: DEC
67679: ST_TO_ADDR
67680: LD_VAR 0 5
67684: PUSH
67685: FOR_TO
67686: IFFALSE 67733
// begin hc_class := 21 ;
67688: LD_ADDR_OWVAR 28
67692: PUSH
67693: LD_INT 21
67695: ST_TO_ADDR
// hc_gallery :=  ;
67696: LD_ADDR_OWVAR 33
67700: PUSH
67701: LD_STRING 
67703: ST_TO_ADDR
// animal := CreateHuman ;
67704: LD_ADDR_VAR 0 12
67708: PUSH
67709: CALL_OW 44
67713: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67714: LD_VAR 0 12
67718: PPUSH
67719: LD_VAR 0 8
67723: PPUSH
67724: LD_INT 0
67726: PPUSH
67727: CALL 69852 0 3
// end ;
67731: GO 67685
67733: POP
67734: POP
// if birds then
67735: LD_VAR 0 1
67739: IFFALSE 67806
// for i = 1 to birds do
67741: LD_ADDR_VAR 0 11
67745: PUSH
67746: DOUBLE
67747: LD_INT 1
67749: DEC
67750: ST_TO_ADDR
67751: LD_VAR 0 1
67755: PUSH
67756: FOR_TO
67757: IFFALSE 67804
// begin hc_class = 18 ;
67759: LD_ADDR_OWVAR 28
67763: PUSH
67764: LD_INT 18
67766: ST_TO_ADDR
// hc_gallery =  ;
67767: LD_ADDR_OWVAR 33
67771: PUSH
67772: LD_STRING 
67774: ST_TO_ADDR
// animal := CreateHuman ;
67775: LD_ADDR_VAR 0 12
67779: PUSH
67780: CALL_OW 44
67784: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67785: LD_VAR 0 12
67789: PPUSH
67790: LD_VAR 0 8
67794: PPUSH
67795: LD_INT 0
67797: PPUSH
67798: CALL 69852 0 3
// end ;
67802: GO 67756
67804: POP
67805: POP
// if tigers then
67806: LD_VAR 0 2
67810: IFFALSE 67894
// for i = 1 to tigers do
67812: LD_ADDR_VAR 0 11
67816: PUSH
67817: DOUBLE
67818: LD_INT 1
67820: DEC
67821: ST_TO_ADDR
67822: LD_VAR 0 2
67826: PUSH
67827: FOR_TO
67828: IFFALSE 67892
// begin hc_class = class_tiger ;
67830: LD_ADDR_OWVAR 28
67834: PUSH
67835: LD_INT 14
67837: ST_TO_ADDR
// hc_gallery =  ;
67838: LD_ADDR_OWVAR 33
67842: PUSH
67843: LD_STRING 
67845: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67846: LD_ADDR_OWVAR 35
67850: PUSH
67851: LD_INT 7
67853: NEG
67854: PPUSH
67855: LD_INT 7
67857: PPUSH
67858: CALL_OW 12
67862: ST_TO_ADDR
// animal := CreateHuman ;
67863: LD_ADDR_VAR 0 12
67867: PUSH
67868: CALL_OW 44
67872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67873: LD_VAR 0 12
67877: PPUSH
67878: LD_VAR 0 8
67882: PPUSH
67883: LD_INT 0
67885: PPUSH
67886: CALL 69852 0 3
// end ;
67890: GO 67827
67892: POP
67893: POP
// if apemans then
67894: LD_VAR 0 3
67898: IFFALSE 68021
// for i = 1 to apemans do
67900: LD_ADDR_VAR 0 11
67904: PUSH
67905: DOUBLE
67906: LD_INT 1
67908: DEC
67909: ST_TO_ADDR
67910: LD_VAR 0 3
67914: PUSH
67915: FOR_TO
67916: IFFALSE 68019
// begin hc_class = class_apeman ;
67918: LD_ADDR_OWVAR 28
67922: PUSH
67923: LD_INT 12
67925: ST_TO_ADDR
// hc_gallery =  ;
67926: LD_ADDR_OWVAR 33
67930: PUSH
67931: LD_STRING 
67933: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67934: LD_ADDR_OWVAR 35
67938: PUSH
67939: LD_INT 2
67941: NEG
67942: PPUSH
67943: LD_INT 2
67945: PPUSH
67946: CALL_OW 12
67950: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67951: LD_ADDR_OWVAR 31
67955: PUSH
67956: LD_INT 1
67958: PPUSH
67959: LD_INT 3
67961: PPUSH
67962: CALL_OW 12
67966: PUSH
67967: LD_INT 1
67969: PPUSH
67970: LD_INT 3
67972: PPUSH
67973: CALL_OW 12
67977: PUSH
67978: LD_INT 0
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: ST_TO_ADDR
// animal := CreateHuman ;
67990: LD_ADDR_VAR 0 12
67994: PUSH
67995: CALL_OW 44
67999: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68000: LD_VAR 0 12
68004: PPUSH
68005: LD_VAR 0 8
68009: PPUSH
68010: LD_INT 0
68012: PPUSH
68013: CALL 69852 0 3
// end ;
68017: GO 67915
68019: POP
68020: POP
// if enchidnas then
68021: LD_VAR 0 4
68025: IFFALSE 68092
// for i = 1 to enchidnas do
68027: LD_ADDR_VAR 0 11
68031: PUSH
68032: DOUBLE
68033: LD_INT 1
68035: DEC
68036: ST_TO_ADDR
68037: LD_VAR 0 4
68041: PUSH
68042: FOR_TO
68043: IFFALSE 68090
// begin hc_class = 13 ;
68045: LD_ADDR_OWVAR 28
68049: PUSH
68050: LD_INT 13
68052: ST_TO_ADDR
// hc_gallery =  ;
68053: LD_ADDR_OWVAR 33
68057: PUSH
68058: LD_STRING 
68060: ST_TO_ADDR
// animal := CreateHuman ;
68061: LD_ADDR_VAR 0 12
68065: PUSH
68066: CALL_OW 44
68070: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68071: LD_VAR 0 12
68075: PPUSH
68076: LD_VAR 0 8
68080: PPUSH
68081: LD_INT 0
68083: PPUSH
68084: CALL 69852 0 3
// end ;
68088: GO 68042
68090: POP
68091: POP
// if fishes then
68092: LD_VAR 0 7
68096: IFFALSE 68163
// for i = 1 to fishes do
68098: LD_ADDR_VAR 0 11
68102: PUSH
68103: DOUBLE
68104: LD_INT 1
68106: DEC
68107: ST_TO_ADDR
68108: LD_VAR 0 7
68112: PUSH
68113: FOR_TO
68114: IFFALSE 68161
// begin hc_class = 20 ;
68116: LD_ADDR_OWVAR 28
68120: PUSH
68121: LD_INT 20
68123: ST_TO_ADDR
// hc_gallery =  ;
68124: LD_ADDR_OWVAR 33
68128: PUSH
68129: LD_STRING 
68131: ST_TO_ADDR
// animal := CreateHuman ;
68132: LD_ADDR_VAR 0 12
68136: PUSH
68137: CALL_OW 44
68141: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68142: LD_VAR 0 12
68146: PPUSH
68147: LD_VAR 0 9
68151: PPUSH
68152: LD_INT 0
68154: PPUSH
68155: CALL 69852 0 3
// end ;
68159: GO 68113
68161: POP
68162: POP
// end ;
68163: LD_VAR 0 10
68167: RET
// export function WantHeal ( sci , unit ) ; begin
68168: LD_INT 0
68170: PPUSH
// if GetTaskList ( sci ) > 0 then
68171: LD_VAR 0 1
68175: PPUSH
68176: CALL_OW 437
68180: PUSH
68181: LD_INT 0
68183: GREATER
68184: IFFALSE 68254
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68186: LD_VAR 0 1
68190: PPUSH
68191: CALL_OW 437
68195: PUSH
68196: LD_INT 1
68198: ARRAY
68199: PUSH
68200: LD_INT 1
68202: ARRAY
68203: PUSH
68204: LD_STRING l
68206: EQUAL
68207: PUSH
68208: LD_VAR 0 1
68212: PPUSH
68213: CALL_OW 437
68217: PUSH
68218: LD_INT 1
68220: ARRAY
68221: PUSH
68222: LD_INT 4
68224: ARRAY
68225: PUSH
68226: LD_VAR 0 2
68230: EQUAL
68231: AND
68232: IFFALSE 68244
// result := true else
68234: LD_ADDR_VAR 0 3
68238: PUSH
68239: LD_INT 1
68241: ST_TO_ADDR
68242: GO 68252
// result := false ;
68244: LD_ADDR_VAR 0 3
68248: PUSH
68249: LD_INT 0
68251: ST_TO_ADDR
// end else
68252: GO 68262
// result := false ;
68254: LD_ADDR_VAR 0 3
68258: PUSH
68259: LD_INT 0
68261: ST_TO_ADDR
// end ;
68262: LD_VAR 0 3
68266: RET
// export function HealTarget ( sci ) ; begin
68267: LD_INT 0
68269: PPUSH
// if not sci then
68270: LD_VAR 0 1
68274: NOT
68275: IFFALSE 68279
// exit ;
68277: GO 68344
// result := 0 ;
68279: LD_ADDR_VAR 0 2
68283: PUSH
68284: LD_INT 0
68286: ST_TO_ADDR
// if GetTaskList ( sci ) then
68287: LD_VAR 0 1
68291: PPUSH
68292: CALL_OW 437
68296: IFFALSE 68344
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68298: LD_VAR 0 1
68302: PPUSH
68303: CALL_OW 437
68307: PUSH
68308: LD_INT 1
68310: ARRAY
68311: PUSH
68312: LD_INT 1
68314: ARRAY
68315: PUSH
68316: LD_STRING l
68318: EQUAL
68319: IFFALSE 68344
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68321: LD_ADDR_VAR 0 2
68325: PUSH
68326: LD_VAR 0 1
68330: PPUSH
68331: CALL_OW 437
68335: PUSH
68336: LD_INT 1
68338: ARRAY
68339: PUSH
68340: LD_INT 4
68342: ARRAY
68343: ST_TO_ADDR
// end ;
68344: LD_VAR 0 2
68348: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68349: LD_INT 0
68351: PPUSH
68352: PPUSH
68353: PPUSH
68354: PPUSH
// if not base_units then
68355: LD_VAR 0 1
68359: NOT
68360: IFFALSE 68364
// exit ;
68362: GO 68451
// result := false ;
68364: LD_ADDR_VAR 0 2
68368: PUSH
68369: LD_INT 0
68371: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68372: LD_ADDR_VAR 0 5
68376: PUSH
68377: LD_VAR 0 1
68381: PPUSH
68382: LD_INT 21
68384: PUSH
68385: LD_INT 3
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PPUSH
68392: CALL_OW 72
68396: ST_TO_ADDR
// if not tmp then
68397: LD_VAR 0 5
68401: NOT
68402: IFFALSE 68406
// exit ;
68404: GO 68451
// for i in tmp do
68406: LD_ADDR_VAR 0 3
68410: PUSH
68411: LD_VAR 0 5
68415: PUSH
68416: FOR_IN
68417: IFFALSE 68449
// begin result := EnemyInRange ( i , 22 ) ;
68419: LD_ADDR_VAR 0 2
68423: PUSH
68424: LD_VAR 0 3
68428: PPUSH
68429: LD_INT 22
68431: PPUSH
68432: CALL 66687 0 2
68436: ST_TO_ADDR
// if result then
68437: LD_VAR 0 2
68441: IFFALSE 68447
// exit ;
68443: POP
68444: POP
68445: GO 68451
// end ;
68447: GO 68416
68449: POP
68450: POP
// end ;
68451: LD_VAR 0 2
68455: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
68456: LD_INT 0
68458: PPUSH
68459: PPUSH
// if not units then
68460: LD_VAR 0 1
68464: NOT
68465: IFFALSE 68469
// exit ;
68467: GO 68539
// result := [ ] ;
68469: LD_ADDR_VAR 0 3
68473: PUSH
68474: EMPTY
68475: ST_TO_ADDR
// for i in units do
68476: LD_ADDR_VAR 0 4
68480: PUSH
68481: LD_VAR 0 1
68485: PUSH
68486: FOR_IN
68487: IFFALSE 68537
// if GetTag ( i ) = tag then
68489: LD_VAR 0 4
68493: PPUSH
68494: CALL_OW 110
68498: PUSH
68499: LD_VAR 0 2
68503: EQUAL
68504: IFFALSE 68535
// result := Replace ( result , result + 1 , i ) ;
68506: LD_ADDR_VAR 0 3
68510: PUSH
68511: LD_VAR 0 3
68515: PPUSH
68516: LD_VAR 0 3
68520: PUSH
68521: LD_INT 1
68523: PLUS
68524: PPUSH
68525: LD_VAR 0 4
68529: PPUSH
68530: CALL_OW 1
68534: ST_TO_ADDR
68535: GO 68486
68537: POP
68538: POP
// end ;
68539: LD_VAR 0 3
68543: RET
// export function IsDriver ( un ) ; begin
68544: LD_INT 0
68546: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68547: LD_ADDR_VAR 0 2
68551: PUSH
68552: LD_VAR 0 1
68556: PUSH
68557: LD_INT 55
68559: PUSH
68560: EMPTY
68561: LIST
68562: PPUSH
68563: CALL_OW 69
68567: IN
68568: ST_TO_ADDR
// end ;
68569: LD_VAR 0 2
68573: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68574: LD_INT 0
68576: PPUSH
68577: PPUSH
// list := [ ] ;
68578: LD_ADDR_VAR 0 5
68582: PUSH
68583: EMPTY
68584: ST_TO_ADDR
// case d of 0 :
68585: LD_VAR 0 3
68589: PUSH
68590: LD_INT 0
68592: DOUBLE
68593: EQUAL
68594: IFTRUE 68598
68596: GO 68731
68598: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68599: LD_ADDR_VAR 0 5
68603: PUSH
68604: LD_VAR 0 1
68608: PUSH
68609: LD_INT 4
68611: MINUS
68612: PUSH
68613: LD_VAR 0 2
68617: PUSH
68618: LD_INT 4
68620: MINUS
68621: PUSH
68622: LD_INT 2
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: LIST
68629: PUSH
68630: LD_VAR 0 1
68634: PUSH
68635: LD_INT 3
68637: MINUS
68638: PUSH
68639: LD_VAR 0 2
68643: PUSH
68644: LD_INT 1
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: LIST
68651: PUSH
68652: LD_VAR 0 1
68656: PUSH
68657: LD_INT 4
68659: PLUS
68660: PUSH
68661: LD_VAR 0 2
68665: PUSH
68666: LD_INT 4
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: PUSH
68674: LD_VAR 0 1
68678: PUSH
68679: LD_INT 3
68681: PLUS
68682: PUSH
68683: LD_VAR 0 2
68687: PUSH
68688: LD_INT 3
68690: PLUS
68691: PUSH
68692: LD_INT 5
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: LIST
68699: PUSH
68700: LD_VAR 0 1
68704: PUSH
68705: LD_VAR 0 2
68709: PUSH
68710: LD_INT 4
68712: PLUS
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: LIST
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: ST_TO_ADDR
// end ; 1 :
68729: GO 69429
68731: LD_INT 1
68733: DOUBLE
68734: EQUAL
68735: IFTRUE 68739
68737: GO 68872
68739: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68740: LD_ADDR_VAR 0 5
68744: PUSH
68745: LD_VAR 0 1
68749: PUSH
68750: LD_VAR 0 2
68754: PUSH
68755: LD_INT 4
68757: MINUS
68758: PUSH
68759: LD_INT 3
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: LIST
68766: PUSH
68767: LD_VAR 0 1
68771: PUSH
68772: LD_INT 3
68774: MINUS
68775: PUSH
68776: LD_VAR 0 2
68780: PUSH
68781: LD_INT 3
68783: MINUS
68784: PUSH
68785: LD_INT 2
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: LIST
68792: PUSH
68793: LD_VAR 0 1
68797: PUSH
68798: LD_INT 4
68800: MINUS
68801: PUSH
68802: LD_VAR 0 2
68806: PUSH
68807: LD_INT 1
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: PUSH
68815: LD_VAR 0 1
68819: PUSH
68820: LD_VAR 0 2
68824: PUSH
68825: LD_INT 3
68827: PLUS
68828: PUSH
68829: LD_INT 0
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: LIST
68836: PUSH
68837: LD_VAR 0 1
68841: PUSH
68842: LD_INT 4
68844: PLUS
68845: PUSH
68846: LD_VAR 0 2
68850: PUSH
68851: LD_INT 4
68853: PLUS
68854: PUSH
68855: LD_INT 5
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: LIST
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: ST_TO_ADDR
// end ; 2 :
68870: GO 69429
68872: LD_INT 2
68874: DOUBLE
68875: EQUAL
68876: IFTRUE 68880
68878: GO 69009
68880: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68881: LD_ADDR_VAR 0 5
68885: PUSH
68886: LD_VAR 0 1
68890: PUSH
68891: LD_VAR 0 2
68895: PUSH
68896: LD_INT 3
68898: MINUS
68899: PUSH
68900: LD_INT 3
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: LIST
68907: PUSH
68908: LD_VAR 0 1
68912: PUSH
68913: LD_INT 4
68915: PLUS
68916: PUSH
68917: LD_VAR 0 2
68921: PUSH
68922: LD_INT 4
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: LIST
68929: PUSH
68930: LD_VAR 0 1
68934: PUSH
68935: LD_VAR 0 2
68939: PUSH
68940: LD_INT 4
68942: PLUS
68943: PUSH
68944: LD_INT 0
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: LIST
68951: PUSH
68952: LD_VAR 0 1
68956: PUSH
68957: LD_INT 3
68959: MINUS
68960: PUSH
68961: LD_VAR 0 2
68965: PUSH
68966: LD_INT 1
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: LIST
68973: PUSH
68974: LD_VAR 0 1
68978: PUSH
68979: LD_INT 4
68981: MINUS
68982: PUSH
68983: LD_VAR 0 2
68987: PUSH
68988: LD_INT 4
68990: MINUS
68991: PUSH
68992: LD_INT 2
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: LIST
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: ST_TO_ADDR
// end ; 3 :
69007: GO 69429
69009: LD_INT 3
69011: DOUBLE
69012: EQUAL
69013: IFTRUE 69017
69015: GO 69150
69017: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69018: LD_ADDR_VAR 0 5
69022: PUSH
69023: LD_VAR 0 1
69027: PUSH
69028: LD_INT 3
69030: PLUS
69031: PUSH
69032: LD_VAR 0 2
69036: PUSH
69037: LD_INT 4
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: PUSH
69045: LD_VAR 0 1
69049: PUSH
69050: LD_INT 4
69052: PLUS
69053: PUSH
69054: LD_VAR 0 2
69058: PUSH
69059: LD_INT 4
69061: PLUS
69062: PUSH
69063: LD_INT 5
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: LIST
69070: PUSH
69071: LD_VAR 0 1
69075: PUSH
69076: LD_INT 4
69078: MINUS
69079: PUSH
69080: LD_VAR 0 2
69084: PUSH
69085: LD_INT 1
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: LIST
69092: PUSH
69093: LD_VAR 0 1
69097: PUSH
69098: LD_VAR 0 2
69102: PUSH
69103: LD_INT 4
69105: MINUS
69106: PUSH
69107: LD_INT 3
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: LIST
69114: PUSH
69115: LD_VAR 0 1
69119: PUSH
69120: LD_INT 3
69122: MINUS
69123: PUSH
69124: LD_VAR 0 2
69128: PUSH
69129: LD_INT 3
69131: MINUS
69132: PUSH
69133: LD_INT 2
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: LIST
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: ST_TO_ADDR
// end ; 4 :
69148: GO 69429
69150: LD_INT 4
69152: DOUBLE
69153: EQUAL
69154: IFTRUE 69158
69156: GO 69291
69158: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69159: LD_ADDR_VAR 0 5
69163: PUSH
69164: LD_VAR 0 1
69168: PUSH
69169: LD_VAR 0 2
69173: PUSH
69174: LD_INT 4
69176: PLUS
69177: PUSH
69178: LD_INT 0
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: LIST
69185: PUSH
69186: LD_VAR 0 1
69190: PUSH
69191: LD_INT 3
69193: PLUS
69194: PUSH
69195: LD_VAR 0 2
69199: PUSH
69200: LD_INT 3
69202: PLUS
69203: PUSH
69204: LD_INT 5
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: LIST
69211: PUSH
69212: LD_VAR 0 1
69216: PUSH
69217: LD_INT 4
69219: PLUS
69220: PUSH
69221: LD_VAR 0 2
69225: PUSH
69226: LD_INT 4
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: LIST
69233: PUSH
69234: LD_VAR 0 1
69238: PUSH
69239: LD_VAR 0 2
69243: PUSH
69244: LD_INT 3
69246: MINUS
69247: PUSH
69248: LD_INT 3
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: LIST
69255: PUSH
69256: LD_VAR 0 1
69260: PUSH
69261: LD_INT 4
69263: MINUS
69264: PUSH
69265: LD_VAR 0 2
69269: PUSH
69270: LD_INT 4
69272: MINUS
69273: PUSH
69274: LD_INT 2
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: LIST
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: ST_TO_ADDR
// end ; 5 :
69289: GO 69429
69291: LD_INT 5
69293: DOUBLE
69294: EQUAL
69295: IFTRUE 69299
69297: GO 69428
69299: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69300: LD_ADDR_VAR 0 5
69304: PUSH
69305: LD_VAR 0 1
69309: PUSH
69310: LD_INT 4
69312: MINUS
69313: PUSH
69314: LD_VAR 0 2
69318: PUSH
69319: LD_INT 1
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: LIST
69326: PUSH
69327: LD_VAR 0 1
69331: PUSH
69332: LD_VAR 0 2
69336: PUSH
69337: LD_INT 4
69339: MINUS
69340: PUSH
69341: LD_INT 3
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: LIST
69348: PUSH
69349: LD_VAR 0 1
69353: PUSH
69354: LD_INT 4
69356: PLUS
69357: PUSH
69358: LD_VAR 0 2
69362: PUSH
69363: LD_INT 4
69365: PLUS
69366: PUSH
69367: LD_INT 5
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: LIST
69374: PUSH
69375: LD_VAR 0 1
69379: PUSH
69380: LD_INT 3
69382: PLUS
69383: PUSH
69384: LD_VAR 0 2
69388: PUSH
69389: LD_INT 4
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: LIST
69396: PUSH
69397: LD_VAR 0 1
69401: PUSH
69402: LD_VAR 0 2
69406: PUSH
69407: LD_INT 3
69409: PLUS
69410: PUSH
69411: LD_INT 0
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: LIST
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: ST_TO_ADDR
// end ; end ;
69426: GO 69429
69428: POP
// result := list ;
69429: LD_ADDR_VAR 0 4
69433: PUSH
69434: LD_VAR 0 5
69438: ST_TO_ADDR
// end ;
69439: LD_VAR 0 4
69443: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69444: LD_INT 0
69446: PPUSH
69447: PPUSH
69448: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69449: LD_VAR 0 1
69453: NOT
69454: PUSH
69455: LD_VAR 0 2
69459: PUSH
69460: LD_INT 1
69462: PUSH
69463: LD_INT 2
69465: PUSH
69466: LD_INT 3
69468: PUSH
69469: LD_INT 4
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: IN
69478: NOT
69479: OR
69480: IFFALSE 69484
// exit ;
69482: GO 69576
// tmp := [ ] ;
69484: LD_ADDR_VAR 0 5
69488: PUSH
69489: EMPTY
69490: ST_TO_ADDR
// for i in units do
69491: LD_ADDR_VAR 0 4
69495: PUSH
69496: LD_VAR 0 1
69500: PUSH
69501: FOR_IN
69502: IFFALSE 69545
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
69504: LD_ADDR_VAR 0 5
69508: PUSH
69509: LD_VAR 0 5
69513: PPUSH
69514: LD_VAR 0 5
69518: PUSH
69519: LD_INT 1
69521: PLUS
69522: PPUSH
69523: LD_VAR 0 4
69527: PPUSH
69528: LD_VAR 0 2
69532: PPUSH
69533: CALL_OW 259
69537: PPUSH
69538: CALL_OW 2
69542: ST_TO_ADDR
69543: GO 69501
69545: POP
69546: POP
// if not tmp then
69547: LD_VAR 0 5
69551: NOT
69552: IFFALSE 69556
// exit ;
69554: GO 69576
// result := SortListByListDesc ( units , tmp ) ;
69556: LD_ADDR_VAR 0 3
69560: PUSH
69561: LD_VAR 0 1
69565: PPUSH
69566: LD_VAR 0 5
69570: PPUSH
69571: CALL_OW 77
69575: ST_TO_ADDR
// end ;
69576: LD_VAR 0 3
69580: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69581: LD_INT 0
69583: PPUSH
69584: PPUSH
69585: PPUSH
// result := false ;
69586: LD_ADDR_VAR 0 3
69590: PUSH
69591: LD_INT 0
69593: ST_TO_ADDR
// x := GetX ( building ) ;
69594: LD_ADDR_VAR 0 4
69598: PUSH
69599: LD_VAR 0 2
69603: PPUSH
69604: CALL_OW 250
69608: ST_TO_ADDR
// y := GetY ( building ) ;
69609: LD_ADDR_VAR 0 5
69613: PUSH
69614: LD_VAR 0 2
69618: PPUSH
69619: CALL_OW 251
69623: ST_TO_ADDR
// if not building or not x or not y then
69624: LD_VAR 0 2
69628: NOT
69629: PUSH
69630: LD_VAR 0 4
69634: NOT
69635: OR
69636: PUSH
69637: LD_VAR 0 5
69641: NOT
69642: OR
69643: IFFALSE 69647
// exit ;
69645: GO 69739
// if GetTaskList ( unit ) then
69647: LD_VAR 0 1
69651: PPUSH
69652: CALL_OW 437
69656: IFFALSE 69739
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69658: LD_STRING e
69660: PUSH
69661: LD_VAR 0 1
69665: PPUSH
69666: CALL_OW 437
69670: PUSH
69671: LD_INT 1
69673: ARRAY
69674: PUSH
69675: LD_INT 1
69677: ARRAY
69678: EQUAL
69679: PUSH
69680: LD_VAR 0 4
69684: PUSH
69685: LD_VAR 0 1
69689: PPUSH
69690: CALL_OW 437
69694: PUSH
69695: LD_INT 1
69697: ARRAY
69698: PUSH
69699: LD_INT 2
69701: ARRAY
69702: EQUAL
69703: AND
69704: PUSH
69705: LD_VAR 0 5
69709: PUSH
69710: LD_VAR 0 1
69714: PPUSH
69715: CALL_OW 437
69719: PUSH
69720: LD_INT 1
69722: ARRAY
69723: PUSH
69724: LD_INT 3
69726: ARRAY
69727: EQUAL
69728: AND
69729: IFFALSE 69739
// result := true end ;
69731: LD_ADDR_VAR 0 3
69735: PUSH
69736: LD_INT 1
69738: ST_TO_ADDR
// end ;
69739: LD_VAR 0 3
69743: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69744: LD_INT 0
69746: PPUSH
// result := false ;
69747: LD_ADDR_VAR 0 4
69751: PUSH
69752: LD_INT 0
69754: ST_TO_ADDR
// if GetTaskList ( unit ) then
69755: LD_VAR 0 1
69759: PPUSH
69760: CALL_OW 437
69764: IFFALSE 69847
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69766: LD_STRING M
69768: PUSH
69769: LD_VAR 0 1
69773: PPUSH
69774: CALL_OW 437
69778: PUSH
69779: LD_INT 1
69781: ARRAY
69782: PUSH
69783: LD_INT 1
69785: ARRAY
69786: EQUAL
69787: PUSH
69788: LD_VAR 0 2
69792: PUSH
69793: LD_VAR 0 1
69797: PPUSH
69798: CALL_OW 437
69802: PUSH
69803: LD_INT 1
69805: ARRAY
69806: PUSH
69807: LD_INT 2
69809: ARRAY
69810: EQUAL
69811: AND
69812: PUSH
69813: LD_VAR 0 3
69817: PUSH
69818: LD_VAR 0 1
69822: PPUSH
69823: CALL_OW 437
69827: PUSH
69828: LD_INT 1
69830: ARRAY
69831: PUSH
69832: LD_INT 3
69834: ARRAY
69835: EQUAL
69836: AND
69837: IFFALSE 69847
// result := true ;
69839: LD_ADDR_VAR 0 4
69843: PUSH
69844: LD_INT 1
69846: ST_TO_ADDR
// end ; end ;
69847: LD_VAR 0 4
69851: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69852: LD_INT 0
69854: PPUSH
69855: PPUSH
69856: PPUSH
69857: PPUSH
// if not unit or not area then
69858: LD_VAR 0 1
69862: NOT
69863: PUSH
69864: LD_VAR 0 2
69868: NOT
69869: OR
69870: IFFALSE 69874
// exit ;
69872: GO 70038
// tmp := AreaToList ( area , i ) ;
69874: LD_ADDR_VAR 0 6
69878: PUSH
69879: LD_VAR 0 2
69883: PPUSH
69884: LD_VAR 0 5
69888: PPUSH
69889: CALL_OW 517
69893: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69894: LD_ADDR_VAR 0 5
69898: PUSH
69899: DOUBLE
69900: LD_INT 1
69902: DEC
69903: ST_TO_ADDR
69904: LD_VAR 0 6
69908: PUSH
69909: LD_INT 1
69911: ARRAY
69912: PUSH
69913: FOR_TO
69914: IFFALSE 70036
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69916: LD_ADDR_VAR 0 7
69920: PUSH
69921: LD_VAR 0 6
69925: PUSH
69926: LD_INT 1
69928: ARRAY
69929: PUSH
69930: LD_VAR 0 5
69934: ARRAY
69935: PUSH
69936: LD_VAR 0 6
69940: PUSH
69941: LD_INT 2
69943: ARRAY
69944: PUSH
69945: LD_VAR 0 5
69949: ARRAY
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69955: LD_VAR 0 7
69959: PUSH
69960: LD_INT 1
69962: ARRAY
69963: PPUSH
69964: LD_VAR 0 7
69968: PUSH
69969: LD_INT 2
69971: ARRAY
69972: PPUSH
69973: CALL_OW 428
69977: PUSH
69978: LD_INT 0
69980: EQUAL
69981: IFFALSE 70034
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69983: LD_VAR 0 1
69987: PPUSH
69988: LD_VAR 0 7
69992: PUSH
69993: LD_INT 1
69995: ARRAY
69996: PPUSH
69997: LD_VAR 0 7
70001: PUSH
70002: LD_INT 2
70004: ARRAY
70005: PPUSH
70006: LD_VAR 0 3
70010: PPUSH
70011: CALL_OW 48
// result := IsPlaced ( unit ) ;
70015: LD_ADDR_VAR 0 4
70019: PUSH
70020: LD_VAR 0 1
70024: PPUSH
70025: CALL_OW 305
70029: ST_TO_ADDR
// exit ;
70030: POP
70031: POP
70032: GO 70038
// end ; end ;
70034: GO 69913
70036: POP
70037: POP
// end ;
70038: LD_VAR 0 4
70042: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70043: LD_INT 0
70045: PPUSH
70046: PPUSH
70047: PPUSH
// if not side or side > 8 then
70048: LD_VAR 0 1
70052: NOT
70053: PUSH
70054: LD_VAR 0 1
70058: PUSH
70059: LD_INT 8
70061: GREATER
70062: OR
70063: IFFALSE 70067
// exit ;
70065: GO 70254
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70067: LD_ADDR_VAR 0 4
70071: PUSH
70072: LD_INT 22
70074: PUSH
70075: LD_VAR 0 1
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 21
70086: PUSH
70087: LD_INT 3
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PPUSH
70098: CALL_OW 69
70102: ST_TO_ADDR
// if not tmp then
70103: LD_VAR 0 4
70107: NOT
70108: IFFALSE 70112
// exit ;
70110: GO 70254
// enable_addtolog := true ;
70112: LD_ADDR_OWVAR 81
70116: PUSH
70117: LD_INT 1
70119: ST_TO_ADDR
// AddToLog ( [ ) ;
70120: LD_STRING [
70122: PPUSH
70123: CALL_OW 561
// for i in tmp do
70127: LD_ADDR_VAR 0 3
70131: PUSH
70132: LD_VAR 0 4
70136: PUSH
70137: FOR_IN
70138: IFFALSE 70245
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70140: LD_STRING [
70142: PUSH
70143: LD_VAR 0 3
70147: PPUSH
70148: CALL_OW 266
70152: STR
70153: PUSH
70154: LD_STRING , 
70156: STR
70157: PUSH
70158: LD_VAR 0 3
70162: PPUSH
70163: CALL_OW 250
70167: STR
70168: PUSH
70169: LD_STRING , 
70171: STR
70172: PUSH
70173: LD_VAR 0 3
70177: PPUSH
70178: CALL_OW 251
70182: STR
70183: PUSH
70184: LD_STRING , 
70186: STR
70187: PUSH
70188: LD_VAR 0 3
70192: PPUSH
70193: CALL_OW 254
70197: STR
70198: PUSH
70199: LD_STRING , 
70201: STR
70202: PUSH
70203: LD_VAR 0 3
70207: PPUSH
70208: LD_INT 1
70210: PPUSH
70211: CALL_OW 268
70215: STR
70216: PUSH
70217: LD_STRING , 
70219: STR
70220: PUSH
70221: LD_VAR 0 3
70225: PPUSH
70226: LD_INT 2
70228: PPUSH
70229: CALL_OW 268
70233: STR
70234: PUSH
70235: LD_STRING ],
70237: STR
70238: PPUSH
70239: CALL_OW 561
// end ;
70243: GO 70137
70245: POP
70246: POP
// AddToLog ( ]; ) ;
70247: LD_STRING ];
70249: PPUSH
70250: CALL_OW 561
// end ;
70254: LD_VAR 0 2
70258: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70259: LD_INT 0
70261: PPUSH
70262: PPUSH
70263: PPUSH
70264: PPUSH
70265: PPUSH
// if not area or not rate or not max then
70266: LD_VAR 0 1
70270: NOT
70271: PUSH
70272: LD_VAR 0 2
70276: NOT
70277: OR
70278: PUSH
70279: LD_VAR 0 4
70283: NOT
70284: OR
70285: IFFALSE 70289
// exit ;
70287: GO 70481
// while 1 do
70289: LD_INT 1
70291: IFFALSE 70481
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70293: LD_ADDR_VAR 0 9
70297: PUSH
70298: LD_VAR 0 1
70302: PPUSH
70303: LD_INT 1
70305: PPUSH
70306: CALL_OW 287
70310: PUSH
70311: LD_INT 10
70313: MUL
70314: ST_TO_ADDR
// r := rate / 10 ;
70315: LD_ADDR_VAR 0 7
70319: PUSH
70320: LD_VAR 0 2
70324: PUSH
70325: LD_INT 10
70327: DIVREAL
70328: ST_TO_ADDR
// time := 1 1$00 ;
70329: LD_ADDR_VAR 0 8
70333: PUSH
70334: LD_INT 2100
70336: ST_TO_ADDR
// if amount < min then
70337: LD_VAR 0 9
70341: PUSH
70342: LD_VAR 0 3
70346: LESS
70347: IFFALSE 70365
// r := r * 2 else
70349: LD_ADDR_VAR 0 7
70353: PUSH
70354: LD_VAR 0 7
70358: PUSH
70359: LD_INT 2
70361: MUL
70362: ST_TO_ADDR
70363: GO 70391
// if amount > max then
70365: LD_VAR 0 9
70369: PUSH
70370: LD_VAR 0 4
70374: GREATER
70375: IFFALSE 70391
// r := r / 2 ;
70377: LD_ADDR_VAR 0 7
70381: PUSH
70382: LD_VAR 0 7
70386: PUSH
70387: LD_INT 2
70389: DIVREAL
70390: ST_TO_ADDR
// time := time / r ;
70391: LD_ADDR_VAR 0 8
70395: PUSH
70396: LD_VAR 0 8
70400: PUSH
70401: LD_VAR 0 7
70405: DIVREAL
70406: ST_TO_ADDR
// if time < 0 then
70407: LD_VAR 0 8
70411: PUSH
70412: LD_INT 0
70414: LESS
70415: IFFALSE 70432
// time := time * - 1 ;
70417: LD_ADDR_VAR 0 8
70421: PUSH
70422: LD_VAR 0 8
70426: PUSH
70427: LD_INT 1
70429: NEG
70430: MUL
70431: ST_TO_ADDR
// wait ( time ) ;
70432: LD_VAR 0 8
70436: PPUSH
70437: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
70441: LD_INT 35
70443: PPUSH
70444: LD_INT 875
70446: PPUSH
70447: CALL_OW 12
70451: PPUSH
70452: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70456: LD_INT 1
70458: PPUSH
70459: LD_INT 5
70461: PPUSH
70462: CALL_OW 12
70466: PPUSH
70467: LD_VAR 0 1
70471: PPUSH
70472: LD_INT 1
70474: PPUSH
70475: CALL_OW 55
// end ;
70479: GO 70289
// end ;
70481: LD_VAR 0 5
70485: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70486: LD_INT 0
70488: PPUSH
70489: PPUSH
70490: PPUSH
70491: PPUSH
70492: PPUSH
70493: PPUSH
70494: PPUSH
70495: PPUSH
// if not turrets or not factories then
70496: LD_VAR 0 1
70500: NOT
70501: PUSH
70502: LD_VAR 0 2
70506: NOT
70507: OR
70508: IFFALSE 70512
// exit ;
70510: GO 70819
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70512: LD_ADDR_VAR 0 10
70516: PUSH
70517: LD_INT 5
70519: PUSH
70520: LD_INT 6
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 2
70529: PUSH
70530: LD_INT 4
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 3
70539: PUSH
70540: LD_INT 5
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: LIST
70551: PUSH
70552: LD_INT 24
70554: PUSH
70555: LD_INT 25
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 23
70564: PUSH
70565: LD_INT 27
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 42
70578: PUSH
70579: LD_INT 43
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 44
70588: PUSH
70589: LD_INT 46
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 45
70598: PUSH
70599: LD_INT 47
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: LIST
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: LIST
70615: ST_TO_ADDR
// result := [ ] ;
70616: LD_ADDR_VAR 0 3
70620: PUSH
70621: EMPTY
70622: ST_TO_ADDR
// for i in turrets do
70623: LD_ADDR_VAR 0 4
70627: PUSH
70628: LD_VAR 0 1
70632: PUSH
70633: FOR_IN
70634: IFFALSE 70817
// begin nat := GetNation ( i ) ;
70636: LD_ADDR_VAR 0 7
70640: PUSH
70641: LD_VAR 0 4
70645: PPUSH
70646: CALL_OW 248
70650: ST_TO_ADDR
// weapon := 0 ;
70651: LD_ADDR_VAR 0 8
70655: PUSH
70656: LD_INT 0
70658: ST_TO_ADDR
// if not nat then
70659: LD_VAR 0 7
70663: NOT
70664: IFFALSE 70668
// continue ;
70666: GO 70633
// for j in list [ nat ] do
70668: LD_ADDR_VAR 0 5
70672: PUSH
70673: LD_VAR 0 10
70677: PUSH
70678: LD_VAR 0 7
70682: ARRAY
70683: PUSH
70684: FOR_IN
70685: IFFALSE 70726
// if GetBWeapon ( i ) = j [ 1 ] then
70687: LD_VAR 0 4
70691: PPUSH
70692: CALL_OW 269
70696: PUSH
70697: LD_VAR 0 5
70701: PUSH
70702: LD_INT 1
70704: ARRAY
70705: EQUAL
70706: IFFALSE 70724
// begin weapon := j [ 2 ] ;
70708: LD_ADDR_VAR 0 8
70712: PUSH
70713: LD_VAR 0 5
70717: PUSH
70718: LD_INT 2
70720: ARRAY
70721: ST_TO_ADDR
// break ;
70722: GO 70726
// end ;
70724: GO 70684
70726: POP
70727: POP
// if not weapon then
70728: LD_VAR 0 8
70732: NOT
70733: IFFALSE 70737
// continue ;
70735: GO 70633
// for k in factories do
70737: LD_ADDR_VAR 0 6
70741: PUSH
70742: LD_VAR 0 2
70746: PUSH
70747: FOR_IN
70748: IFFALSE 70813
// begin weapons := AvailableWeaponList ( k ) ;
70750: LD_ADDR_VAR 0 9
70754: PUSH
70755: LD_VAR 0 6
70759: PPUSH
70760: CALL_OW 478
70764: ST_TO_ADDR
// if not weapons then
70765: LD_VAR 0 9
70769: NOT
70770: IFFALSE 70774
// continue ;
70772: GO 70747
// if weapon in weapons then
70774: LD_VAR 0 8
70778: PUSH
70779: LD_VAR 0 9
70783: IN
70784: IFFALSE 70811
// begin result := [ i , weapon ] ;
70786: LD_ADDR_VAR 0 3
70790: PUSH
70791: LD_VAR 0 4
70795: PUSH
70796: LD_VAR 0 8
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: ST_TO_ADDR
// exit ;
70805: POP
70806: POP
70807: POP
70808: POP
70809: GO 70819
// end ; end ;
70811: GO 70747
70813: POP
70814: POP
// end ;
70815: GO 70633
70817: POP
70818: POP
// end ;
70819: LD_VAR 0 3
70823: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70824: LD_INT 0
70826: PPUSH
// if not side or side > 8 then
70827: LD_VAR 0 3
70831: NOT
70832: PUSH
70833: LD_VAR 0 3
70837: PUSH
70838: LD_INT 8
70840: GREATER
70841: OR
70842: IFFALSE 70846
// exit ;
70844: GO 70905
// if not range then
70846: LD_VAR 0 4
70850: NOT
70851: IFFALSE 70862
// range := - 12 ;
70853: LD_ADDR_VAR 0 4
70857: PUSH
70858: LD_INT 12
70860: NEG
70861: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70862: LD_VAR 0 1
70866: PPUSH
70867: LD_VAR 0 2
70871: PPUSH
70872: LD_VAR 0 3
70876: PPUSH
70877: LD_VAR 0 4
70881: PPUSH
70882: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70886: LD_VAR 0 1
70890: PPUSH
70891: LD_VAR 0 2
70895: PPUSH
70896: LD_VAR 0 3
70900: PPUSH
70901: CALL_OW 331
// end ;
70905: LD_VAR 0 5
70909: RET
// export function Video ( mode ) ; begin
70910: LD_INT 0
70912: PPUSH
// ingame_video = mode ;
70913: LD_ADDR_OWVAR 52
70917: PUSH
70918: LD_VAR 0 1
70922: ST_TO_ADDR
// interface_hidden = mode ;
70923: LD_ADDR_OWVAR 54
70927: PUSH
70928: LD_VAR 0 1
70932: ST_TO_ADDR
// end ;
70933: LD_VAR 0 2
70937: RET
// export function Join ( array , element ) ; begin
70938: LD_INT 0
70940: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70941: LD_ADDR_VAR 0 3
70945: PUSH
70946: LD_VAR 0 1
70950: PPUSH
70951: LD_VAR 0 1
70955: PUSH
70956: LD_INT 1
70958: PLUS
70959: PPUSH
70960: LD_VAR 0 2
70964: PPUSH
70965: CALL_OW 1
70969: ST_TO_ADDR
// end ;
70970: LD_VAR 0 3
70974: RET
// export function JoinUnion ( array , element ) ; begin
70975: LD_INT 0
70977: PPUSH
// result := array union element ;
70978: LD_ADDR_VAR 0 3
70982: PUSH
70983: LD_VAR 0 1
70987: PUSH
70988: LD_VAR 0 2
70992: UNION
70993: ST_TO_ADDR
// end ;
70994: LD_VAR 0 3
70998: RET
// export function GetBehemoths ( side ) ; begin
70999: LD_INT 0
71001: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71002: LD_ADDR_VAR 0 2
71006: PUSH
71007: LD_INT 22
71009: PUSH
71010: LD_VAR 0 1
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 31
71021: PUSH
71022: LD_INT 25
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PPUSH
71033: CALL_OW 69
71037: ST_TO_ADDR
// end ;
71038: LD_VAR 0 2
71042: RET
// export function Shuffle ( array ) ; var i , index ; begin
71043: LD_INT 0
71045: PPUSH
71046: PPUSH
71047: PPUSH
// result := [ ] ;
71048: LD_ADDR_VAR 0 2
71052: PUSH
71053: EMPTY
71054: ST_TO_ADDR
// if not array then
71055: LD_VAR 0 1
71059: NOT
71060: IFFALSE 71064
// exit ;
71062: GO 71163
// Randomize ;
71064: CALL_OW 10
// for i = array downto 1 do
71068: LD_ADDR_VAR 0 3
71072: PUSH
71073: DOUBLE
71074: LD_VAR 0 1
71078: INC
71079: ST_TO_ADDR
71080: LD_INT 1
71082: PUSH
71083: FOR_DOWNTO
71084: IFFALSE 71161
// begin index := rand ( 1 , array ) ;
71086: LD_ADDR_VAR 0 4
71090: PUSH
71091: LD_INT 1
71093: PPUSH
71094: LD_VAR 0 1
71098: PPUSH
71099: CALL_OW 12
71103: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71104: LD_ADDR_VAR 0 2
71108: PUSH
71109: LD_VAR 0 2
71113: PPUSH
71114: LD_VAR 0 2
71118: PUSH
71119: LD_INT 1
71121: PLUS
71122: PPUSH
71123: LD_VAR 0 1
71127: PUSH
71128: LD_VAR 0 4
71132: ARRAY
71133: PPUSH
71134: CALL_OW 2
71138: ST_TO_ADDR
// array := Delete ( array , index ) ;
71139: LD_ADDR_VAR 0 1
71143: PUSH
71144: LD_VAR 0 1
71148: PPUSH
71149: LD_VAR 0 4
71153: PPUSH
71154: CALL_OW 3
71158: ST_TO_ADDR
// end ;
71159: GO 71083
71161: POP
71162: POP
// end ;
71163: LD_VAR 0 2
71167: RET
// export function GetBaseMaterials ( base ) ; begin
71168: LD_INT 0
71170: PPUSH
// result := [ 0 , 0 , 0 ] ;
71171: LD_ADDR_VAR 0 2
71175: PUSH
71176: LD_INT 0
71178: PUSH
71179: LD_INT 0
71181: PUSH
71182: LD_INT 0
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: LIST
71189: ST_TO_ADDR
// if not base then
71190: LD_VAR 0 1
71194: NOT
71195: IFFALSE 71199
// exit ;
71197: GO 71248
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71199: LD_ADDR_VAR 0 2
71203: PUSH
71204: LD_VAR 0 1
71208: PPUSH
71209: LD_INT 1
71211: PPUSH
71212: CALL_OW 275
71216: PUSH
71217: LD_VAR 0 1
71221: PPUSH
71222: LD_INT 2
71224: PPUSH
71225: CALL_OW 275
71229: PUSH
71230: LD_VAR 0 1
71234: PPUSH
71235: LD_INT 3
71237: PPUSH
71238: CALL_OW 275
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: LIST
71247: ST_TO_ADDR
// end ;
71248: LD_VAR 0 2
71252: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71253: LD_INT 0
71255: PPUSH
71256: PPUSH
// result := array ;
71257: LD_ADDR_VAR 0 3
71261: PUSH
71262: LD_VAR 0 1
71266: ST_TO_ADDR
// if size > 0 then
71267: LD_VAR 0 2
71271: PUSH
71272: LD_INT 0
71274: GREATER
71275: IFFALSE 71321
// for i := array downto size do
71277: LD_ADDR_VAR 0 4
71281: PUSH
71282: DOUBLE
71283: LD_VAR 0 1
71287: INC
71288: ST_TO_ADDR
71289: LD_VAR 0 2
71293: PUSH
71294: FOR_DOWNTO
71295: IFFALSE 71319
// result := Delete ( result , result ) ;
71297: LD_ADDR_VAR 0 3
71301: PUSH
71302: LD_VAR 0 3
71306: PPUSH
71307: LD_VAR 0 3
71311: PPUSH
71312: CALL_OW 3
71316: ST_TO_ADDR
71317: GO 71294
71319: POP
71320: POP
// end ;
71321: LD_VAR 0 3
71325: RET
// export function ComExit ( unit ) ; var tmp ; begin
71326: LD_INT 0
71328: PPUSH
71329: PPUSH
// if not IsInUnit ( unit ) then
71330: LD_VAR 0 1
71334: PPUSH
71335: CALL_OW 310
71339: NOT
71340: IFFALSE 71344
// exit ;
71342: GO 71404
// tmp := IsInUnit ( unit ) ;
71344: LD_ADDR_VAR 0 3
71348: PUSH
71349: LD_VAR 0 1
71353: PPUSH
71354: CALL_OW 310
71358: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71359: LD_VAR 0 3
71363: PPUSH
71364: CALL_OW 247
71368: PUSH
71369: LD_INT 2
71371: EQUAL
71372: IFFALSE 71385
// ComExitVehicle ( unit ) else
71374: LD_VAR 0 1
71378: PPUSH
71379: CALL_OW 121
71383: GO 71394
// ComExitBuilding ( unit ) ;
71385: LD_VAR 0 1
71389: PPUSH
71390: CALL_OW 122
// result := tmp ;
71394: LD_ADDR_VAR 0 2
71398: PUSH
71399: LD_VAR 0 3
71403: ST_TO_ADDR
// end ;
71404: LD_VAR 0 2
71408: RET
// export function ComExitAll ( units ) ; var i ; begin
71409: LD_INT 0
71411: PPUSH
71412: PPUSH
// if not units then
71413: LD_VAR 0 1
71417: NOT
71418: IFFALSE 71422
// exit ;
71420: GO 71448
// for i in units do
71422: LD_ADDR_VAR 0 3
71426: PUSH
71427: LD_VAR 0 1
71431: PUSH
71432: FOR_IN
71433: IFFALSE 71446
// ComExit ( i ) ;
71435: LD_VAR 0 3
71439: PPUSH
71440: CALL 71326 0 1
71444: GO 71432
71446: POP
71447: POP
// end ;
71448: LD_VAR 0 2
71452: RET
// export function ResetHc ; begin
71453: LD_INT 0
71455: PPUSH
// InitHc ;
71456: CALL_OW 19
// hc_importance := 0 ;
71460: LD_ADDR_OWVAR 32
71464: PUSH
71465: LD_INT 0
71467: ST_TO_ADDR
// end ;
71468: LD_VAR 0 1
71472: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71473: LD_INT 0
71475: PPUSH
71476: PPUSH
71477: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71478: LD_ADDR_VAR 0 6
71482: PUSH
71483: LD_VAR 0 1
71487: PUSH
71488: LD_VAR 0 3
71492: PLUS
71493: PUSH
71494: LD_INT 2
71496: DIV
71497: ST_TO_ADDR
// if _x < 0 then
71498: LD_VAR 0 6
71502: PUSH
71503: LD_INT 0
71505: LESS
71506: IFFALSE 71523
// _x := _x * - 1 ;
71508: LD_ADDR_VAR 0 6
71512: PUSH
71513: LD_VAR 0 6
71517: PUSH
71518: LD_INT 1
71520: NEG
71521: MUL
71522: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71523: LD_ADDR_VAR 0 7
71527: PUSH
71528: LD_VAR 0 2
71532: PUSH
71533: LD_VAR 0 4
71537: PLUS
71538: PUSH
71539: LD_INT 2
71541: DIV
71542: ST_TO_ADDR
// if _y < 0 then
71543: LD_VAR 0 7
71547: PUSH
71548: LD_INT 0
71550: LESS
71551: IFFALSE 71568
// _y := _y * - 1 ;
71553: LD_ADDR_VAR 0 7
71557: PUSH
71558: LD_VAR 0 7
71562: PUSH
71563: LD_INT 1
71565: NEG
71566: MUL
71567: ST_TO_ADDR
// result := [ _x , _y ] ;
71568: LD_ADDR_VAR 0 5
71572: PUSH
71573: LD_VAR 0 6
71577: PUSH
71578: LD_VAR 0 7
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: ST_TO_ADDR
// end ;
71587: LD_VAR 0 5
71591: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71592: LD_INT 0
71594: PPUSH
71595: PPUSH
71596: PPUSH
71597: PPUSH
// task := GetTaskList ( unit ) ;
71598: LD_ADDR_VAR 0 7
71602: PUSH
71603: LD_VAR 0 1
71607: PPUSH
71608: CALL_OW 437
71612: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71613: LD_VAR 0 7
71617: NOT
71618: PUSH
71619: LD_VAR 0 1
71623: PPUSH
71624: LD_VAR 0 2
71628: PPUSH
71629: CALL_OW 308
71633: NOT
71634: AND
71635: IFFALSE 71639
// exit ;
71637: GO 71757
// if IsInArea ( unit , area ) then
71639: LD_VAR 0 1
71643: PPUSH
71644: LD_VAR 0 2
71648: PPUSH
71649: CALL_OW 308
71653: IFFALSE 71671
// begin ComMoveToArea ( unit , goAway ) ;
71655: LD_VAR 0 1
71659: PPUSH
71660: LD_VAR 0 3
71664: PPUSH
71665: CALL_OW 113
// exit ;
71669: GO 71757
// end ; if task [ 1 ] [ 1 ] <> M then
71671: LD_VAR 0 7
71675: PUSH
71676: LD_INT 1
71678: ARRAY
71679: PUSH
71680: LD_INT 1
71682: ARRAY
71683: PUSH
71684: LD_STRING M
71686: NONEQUAL
71687: IFFALSE 71691
// exit ;
71689: GO 71757
// x := task [ 1 ] [ 2 ] ;
71691: LD_ADDR_VAR 0 5
71695: PUSH
71696: LD_VAR 0 7
71700: PUSH
71701: LD_INT 1
71703: ARRAY
71704: PUSH
71705: LD_INT 2
71707: ARRAY
71708: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71709: LD_ADDR_VAR 0 6
71713: PUSH
71714: LD_VAR 0 7
71718: PUSH
71719: LD_INT 1
71721: ARRAY
71722: PUSH
71723: LD_INT 3
71725: ARRAY
71726: ST_TO_ADDR
// if InArea ( x , y , area ) then
71727: LD_VAR 0 5
71731: PPUSH
71732: LD_VAR 0 6
71736: PPUSH
71737: LD_VAR 0 2
71741: PPUSH
71742: CALL_OW 309
71746: IFFALSE 71757
// ComStop ( unit ) ;
71748: LD_VAR 0 1
71752: PPUSH
71753: CALL_OW 141
// end ;
71757: LD_VAR 0 4
71761: RET
// export function Abs ( value ) ; begin
71762: LD_INT 0
71764: PPUSH
// result := value ;
71765: LD_ADDR_VAR 0 2
71769: PUSH
71770: LD_VAR 0 1
71774: ST_TO_ADDR
// if value < 0 then
71775: LD_VAR 0 1
71779: PUSH
71780: LD_INT 0
71782: LESS
71783: IFFALSE 71800
// result := value * - 1 ;
71785: LD_ADDR_VAR 0 2
71789: PUSH
71790: LD_VAR 0 1
71794: PUSH
71795: LD_INT 1
71797: NEG
71798: MUL
71799: ST_TO_ADDR
// end ;
71800: LD_VAR 0 2
71804: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71805: LD_INT 0
71807: PPUSH
71808: PPUSH
71809: PPUSH
71810: PPUSH
71811: PPUSH
71812: PPUSH
71813: PPUSH
71814: PPUSH
// if not unit or not building then
71815: LD_VAR 0 1
71819: NOT
71820: PUSH
71821: LD_VAR 0 2
71825: NOT
71826: OR
71827: IFFALSE 71831
// exit ;
71829: GO 72057
// x := GetX ( building ) ;
71831: LD_ADDR_VAR 0 4
71835: PUSH
71836: LD_VAR 0 2
71840: PPUSH
71841: CALL_OW 250
71845: ST_TO_ADDR
// y := GetY ( building ) ;
71846: LD_ADDR_VAR 0 6
71850: PUSH
71851: LD_VAR 0 2
71855: PPUSH
71856: CALL_OW 251
71860: ST_TO_ADDR
// d := GetDir ( building ) ;
71861: LD_ADDR_VAR 0 8
71865: PUSH
71866: LD_VAR 0 2
71870: PPUSH
71871: CALL_OW 254
71875: ST_TO_ADDR
// r := 4 ;
71876: LD_ADDR_VAR 0 9
71880: PUSH
71881: LD_INT 4
71883: ST_TO_ADDR
// for i := 1 to 5 do
71884: LD_ADDR_VAR 0 10
71888: PUSH
71889: DOUBLE
71890: LD_INT 1
71892: DEC
71893: ST_TO_ADDR
71894: LD_INT 5
71896: PUSH
71897: FOR_TO
71898: IFFALSE 72055
// begin _x := ShiftX ( x , d , r + i ) ;
71900: LD_ADDR_VAR 0 5
71904: PUSH
71905: LD_VAR 0 4
71909: PPUSH
71910: LD_VAR 0 8
71914: PPUSH
71915: LD_VAR 0 9
71919: PUSH
71920: LD_VAR 0 10
71924: PLUS
71925: PPUSH
71926: CALL_OW 272
71930: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71931: LD_ADDR_VAR 0 7
71935: PUSH
71936: LD_VAR 0 6
71940: PPUSH
71941: LD_VAR 0 8
71945: PPUSH
71946: LD_VAR 0 9
71950: PUSH
71951: LD_VAR 0 10
71955: PLUS
71956: PPUSH
71957: CALL_OW 273
71961: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71962: LD_VAR 0 5
71966: PPUSH
71967: LD_VAR 0 7
71971: PPUSH
71972: CALL_OW 488
71976: PUSH
71977: LD_VAR 0 5
71981: PPUSH
71982: LD_VAR 0 7
71986: PPUSH
71987: CALL_OW 428
71991: PPUSH
71992: CALL_OW 247
71996: PUSH
71997: LD_INT 3
71999: PUSH
72000: LD_INT 2
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: IN
72007: NOT
72008: AND
72009: IFFALSE 72053
// begin ComMoveXY ( unit , _x , _y ) ;
72011: LD_VAR 0 1
72015: PPUSH
72016: LD_VAR 0 5
72020: PPUSH
72021: LD_VAR 0 7
72025: PPUSH
72026: CALL_OW 111
// result := [ _x , _y ] ;
72030: LD_ADDR_VAR 0 3
72034: PUSH
72035: LD_VAR 0 5
72039: PUSH
72040: LD_VAR 0 7
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: ST_TO_ADDR
// exit ;
72049: POP
72050: POP
72051: GO 72057
// end ; end ;
72053: GO 71897
72055: POP
72056: POP
// end ;
72057: LD_VAR 0 3
72061: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72062: LD_INT 0
72064: PPUSH
72065: PPUSH
72066: PPUSH
// result := 0 ;
72067: LD_ADDR_VAR 0 3
72071: PUSH
72072: LD_INT 0
72074: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72075: LD_VAR 0 1
72079: PUSH
72080: LD_INT 0
72082: LESS
72083: PUSH
72084: LD_VAR 0 1
72088: PUSH
72089: LD_INT 8
72091: GREATER
72092: OR
72093: PUSH
72094: LD_VAR 0 2
72098: PUSH
72099: LD_INT 0
72101: LESS
72102: OR
72103: PUSH
72104: LD_VAR 0 2
72108: PUSH
72109: LD_INT 8
72111: GREATER
72112: OR
72113: IFFALSE 72117
// exit ;
72115: GO 72192
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72117: LD_ADDR_VAR 0 4
72121: PUSH
72122: LD_INT 22
72124: PUSH
72125: LD_VAR 0 2
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PPUSH
72134: CALL_OW 69
72138: PUSH
72139: FOR_IN
72140: IFFALSE 72190
// begin un := UnitShoot ( i ) ;
72142: LD_ADDR_VAR 0 5
72146: PUSH
72147: LD_VAR 0 4
72151: PPUSH
72152: CALL_OW 504
72156: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72157: LD_VAR 0 5
72161: PPUSH
72162: CALL_OW 255
72166: PUSH
72167: LD_VAR 0 1
72171: EQUAL
72172: IFFALSE 72188
// begin result := un ;
72174: LD_ADDR_VAR 0 3
72178: PUSH
72179: LD_VAR 0 5
72183: ST_TO_ADDR
// exit ;
72184: POP
72185: POP
72186: GO 72192
// end ; end ;
72188: GO 72139
72190: POP
72191: POP
// end ;
72192: LD_VAR 0 3
72196: RET
// export function GetCargoBay ( units ) ; begin
72197: LD_INT 0
72199: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72200: LD_ADDR_VAR 0 2
72204: PUSH
72205: LD_VAR 0 1
72209: PPUSH
72210: LD_INT 2
72212: PUSH
72213: LD_INT 34
72215: PUSH
72216: LD_INT 12
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: PUSH
72223: LD_INT 34
72225: PUSH
72226: LD_INT 51
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 34
72235: PUSH
72236: LD_INT 32
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 34
72245: PUSH
72246: LD_EXP 37
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: PPUSH
72262: CALL_OW 72
72266: ST_TO_ADDR
// end ;
72267: LD_VAR 0 2
72271: RET
// export function Negate ( value ) ; begin
72272: LD_INT 0
72274: PPUSH
// result := not value ;
72275: LD_ADDR_VAR 0 2
72279: PUSH
72280: LD_VAR 0 1
72284: NOT
72285: ST_TO_ADDR
// end ;
72286: LD_VAR 0 2
72290: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
72291: LD_INT 0
72293: PPUSH
// if x1 = x2 then
72294: LD_VAR 0 1
72298: PUSH
72299: LD_VAR 0 3
72303: EQUAL
72304: IFFALSE 72338
// begin if y1 > y2 then
72306: LD_VAR 0 2
72310: PUSH
72311: LD_VAR 0 4
72315: GREATER
72316: IFFALSE 72328
// result := 0 else
72318: LD_ADDR_VAR 0 5
72322: PUSH
72323: LD_INT 0
72325: ST_TO_ADDR
72326: GO 72336
// result := 3 ;
72328: LD_ADDR_VAR 0 5
72332: PUSH
72333: LD_INT 3
72335: ST_TO_ADDR
// exit ;
72336: GO 72424
// end ; if y1 = y2 then
72338: LD_VAR 0 2
72342: PUSH
72343: LD_VAR 0 4
72347: EQUAL
72348: IFFALSE 72382
// begin if x1 > x2 then
72350: LD_VAR 0 1
72354: PUSH
72355: LD_VAR 0 3
72359: GREATER
72360: IFFALSE 72372
// result := 1 else
72362: LD_ADDR_VAR 0 5
72366: PUSH
72367: LD_INT 1
72369: ST_TO_ADDR
72370: GO 72380
// result := 4 ;
72372: LD_ADDR_VAR 0 5
72376: PUSH
72377: LD_INT 4
72379: ST_TO_ADDR
// exit ;
72380: GO 72424
// end ; if x1 > x2 and y1 > y2 then
72382: LD_VAR 0 1
72386: PUSH
72387: LD_VAR 0 3
72391: GREATER
72392: PUSH
72393: LD_VAR 0 2
72397: PUSH
72398: LD_VAR 0 4
72402: GREATER
72403: AND
72404: IFFALSE 72416
// result := 2 else
72406: LD_ADDR_VAR 0 5
72410: PUSH
72411: LD_INT 2
72413: ST_TO_ADDR
72414: GO 72424
// result := 5 ;
72416: LD_ADDR_VAR 0 5
72420: PUSH
72421: LD_INT 5
72423: ST_TO_ADDR
// end ;
72424: LD_VAR 0 5
72428: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72429: LD_INT 0
72431: PPUSH
72432: PPUSH
// if not driver or not IsInUnit ( driver ) then
72433: LD_VAR 0 1
72437: NOT
72438: PUSH
72439: LD_VAR 0 1
72443: PPUSH
72444: CALL_OW 310
72448: NOT
72449: OR
72450: IFFALSE 72454
// exit ;
72452: GO 72544
// vehicle := IsInUnit ( driver ) ;
72454: LD_ADDR_VAR 0 3
72458: PUSH
72459: LD_VAR 0 1
72463: PPUSH
72464: CALL_OW 310
72468: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72469: LD_VAR 0 1
72473: PPUSH
72474: LD_STRING \
72476: PUSH
72477: LD_INT 0
72479: PUSH
72480: LD_INT 0
72482: PUSH
72483: LD_INT 0
72485: PUSH
72486: LD_INT 0
72488: PUSH
72489: LD_INT 0
72491: PUSH
72492: LD_INT 0
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: PUSH
72504: LD_STRING E
72506: PUSH
72507: LD_INT 0
72509: PUSH
72510: LD_INT 0
72512: PUSH
72513: LD_VAR 0 3
72517: PUSH
72518: LD_INT 0
72520: PUSH
72521: LD_INT 0
72523: PUSH
72524: LD_INT 0
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PPUSH
72540: CALL_OW 446
// end ;
72544: LD_VAR 0 2
72548: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72549: LD_INT 0
72551: PPUSH
72552: PPUSH
// if not driver or not IsInUnit ( driver ) then
72553: LD_VAR 0 1
72557: NOT
72558: PUSH
72559: LD_VAR 0 1
72563: PPUSH
72564: CALL_OW 310
72568: NOT
72569: OR
72570: IFFALSE 72574
// exit ;
72572: GO 72664
// vehicle := IsInUnit ( driver ) ;
72574: LD_ADDR_VAR 0 3
72578: PUSH
72579: LD_VAR 0 1
72583: PPUSH
72584: CALL_OW 310
72588: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72589: LD_VAR 0 1
72593: PPUSH
72594: LD_STRING \
72596: PUSH
72597: LD_INT 0
72599: PUSH
72600: LD_INT 0
72602: PUSH
72603: LD_INT 0
72605: PUSH
72606: LD_INT 0
72608: PUSH
72609: LD_INT 0
72611: PUSH
72612: LD_INT 0
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: PUSH
72624: LD_STRING E
72626: PUSH
72627: LD_INT 0
72629: PUSH
72630: LD_INT 0
72632: PUSH
72633: LD_VAR 0 3
72637: PUSH
72638: LD_INT 0
72640: PUSH
72641: LD_INT 0
72643: PUSH
72644: LD_INT 0
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PPUSH
72660: CALL_OW 447
// end ;
72664: LD_VAR 0 2
72668: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72669: LD_INT 0
72671: PPUSH
72672: PPUSH
72673: PPUSH
// tmp := [ ] ;
72674: LD_ADDR_VAR 0 5
72678: PUSH
72679: EMPTY
72680: ST_TO_ADDR
// for i in units do
72681: LD_ADDR_VAR 0 4
72685: PUSH
72686: LD_VAR 0 1
72690: PUSH
72691: FOR_IN
72692: IFFALSE 72730
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72694: LD_ADDR_VAR 0 5
72698: PUSH
72699: LD_VAR 0 5
72703: PPUSH
72704: LD_VAR 0 5
72708: PUSH
72709: LD_INT 1
72711: PLUS
72712: PPUSH
72713: LD_VAR 0 4
72717: PPUSH
72718: CALL_OW 256
72722: PPUSH
72723: CALL_OW 2
72727: ST_TO_ADDR
72728: GO 72691
72730: POP
72731: POP
// if not tmp then
72732: LD_VAR 0 5
72736: NOT
72737: IFFALSE 72741
// exit ;
72739: GO 72789
// if asc then
72741: LD_VAR 0 2
72745: IFFALSE 72769
// result := SortListByListAsc ( units , tmp ) else
72747: LD_ADDR_VAR 0 3
72751: PUSH
72752: LD_VAR 0 1
72756: PPUSH
72757: LD_VAR 0 5
72761: PPUSH
72762: CALL_OW 76
72766: ST_TO_ADDR
72767: GO 72789
// result := SortListByListDesc ( units , tmp ) ;
72769: LD_ADDR_VAR 0 3
72773: PUSH
72774: LD_VAR 0 1
72778: PPUSH
72779: LD_VAR 0 5
72783: PPUSH
72784: CALL_OW 77
72788: ST_TO_ADDR
// end ;
72789: LD_VAR 0 3
72793: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72794: LD_INT 0
72796: PPUSH
72797: PPUSH
// task := GetTaskList ( mech ) ;
72798: LD_ADDR_VAR 0 4
72802: PUSH
72803: LD_VAR 0 1
72807: PPUSH
72808: CALL_OW 437
72812: ST_TO_ADDR
// if not task then
72813: LD_VAR 0 4
72817: NOT
72818: IFFALSE 72822
// exit ;
72820: GO 72864
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72822: LD_ADDR_VAR 0 3
72826: PUSH
72827: LD_VAR 0 4
72831: PUSH
72832: LD_INT 1
72834: ARRAY
72835: PUSH
72836: LD_INT 1
72838: ARRAY
72839: PUSH
72840: LD_STRING r
72842: EQUAL
72843: PUSH
72844: LD_VAR 0 4
72848: PUSH
72849: LD_INT 1
72851: ARRAY
72852: PUSH
72853: LD_INT 4
72855: ARRAY
72856: PUSH
72857: LD_VAR 0 2
72861: EQUAL
72862: AND
72863: ST_TO_ADDR
// end ;
72864: LD_VAR 0 3
72868: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72869: LD_INT 0
72871: PPUSH
// SetDir ( unit , d ) ;
72872: LD_VAR 0 1
72876: PPUSH
72877: LD_VAR 0 4
72881: PPUSH
72882: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72886: LD_VAR 0 1
72890: PPUSH
72891: LD_VAR 0 2
72895: PPUSH
72896: LD_VAR 0 3
72900: PPUSH
72901: LD_VAR 0 5
72905: PPUSH
72906: CALL_OW 48
// end ;
72910: LD_VAR 0 6
72914: RET
// export function ToNaturalNumber ( number ) ; begin
72915: LD_INT 0
72917: PPUSH
// result := number div 1 ;
72918: LD_ADDR_VAR 0 2
72922: PUSH
72923: LD_VAR 0 1
72927: PUSH
72928: LD_INT 1
72930: DIV
72931: ST_TO_ADDR
// if number < 0 then
72932: LD_VAR 0 1
72936: PUSH
72937: LD_INT 0
72939: LESS
72940: IFFALSE 72950
// result := 0 ;
72942: LD_ADDR_VAR 0 2
72946: PUSH
72947: LD_INT 0
72949: ST_TO_ADDR
// end ;
72950: LD_VAR 0 2
72954: RET
// export function SortByClass ( units , class ) ; var un ; begin
72955: LD_INT 0
72957: PPUSH
72958: PPUSH
// if not units or not class then
72959: LD_VAR 0 1
72963: NOT
72964: PUSH
72965: LD_VAR 0 2
72969: NOT
72970: OR
72971: IFFALSE 72975
// exit ;
72973: GO 73070
// result := [ ] ;
72975: LD_ADDR_VAR 0 3
72979: PUSH
72980: EMPTY
72981: ST_TO_ADDR
// for un in units do
72982: LD_ADDR_VAR 0 4
72986: PUSH
72987: LD_VAR 0 1
72991: PUSH
72992: FOR_IN
72993: IFFALSE 73068
// if GetClass ( un ) = class then
72995: LD_VAR 0 4
72999: PPUSH
73000: CALL_OW 257
73004: PUSH
73005: LD_VAR 0 2
73009: EQUAL
73010: IFFALSE 73037
// result := Insert ( result , 1 , un ) else
73012: LD_ADDR_VAR 0 3
73016: PUSH
73017: LD_VAR 0 3
73021: PPUSH
73022: LD_INT 1
73024: PPUSH
73025: LD_VAR 0 4
73029: PPUSH
73030: CALL_OW 2
73034: ST_TO_ADDR
73035: GO 73066
// result := Replace ( result , result + 1 , un ) ;
73037: LD_ADDR_VAR 0 3
73041: PUSH
73042: LD_VAR 0 3
73046: PPUSH
73047: LD_VAR 0 3
73051: PUSH
73052: LD_INT 1
73054: PLUS
73055: PPUSH
73056: LD_VAR 0 4
73060: PPUSH
73061: CALL_OW 1
73065: ST_TO_ADDR
73066: GO 72992
73068: POP
73069: POP
// end ;
73070: LD_VAR 0 3
73074: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73075: LD_INT 0
73077: PPUSH
73078: PPUSH
73079: PPUSH
73080: PPUSH
73081: PPUSH
73082: PPUSH
73083: PPUSH
// result := [ ] ;
73084: LD_ADDR_VAR 0 4
73088: PUSH
73089: EMPTY
73090: ST_TO_ADDR
// if x - r < 0 then
73091: LD_VAR 0 1
73095: PUSH
73096: LD_VAR 0 3
73100: MINUS
73101: PUSH
73102: LD_INT 0
73104: LESS
73105: IFFALSE 73117
// min_x := 0 else
73107: LD_ADDR_VAR 0 8
73111: PUSH
73112: LD_INT 0
73114: ST_TO_ADDR
73115: GO 73133
// min_x := x - r ;
73117: LD_ADDR_VAR 0 8
73121: PUSH
73122: LD_VAR 0 1
73126: PUSH
73127: LD_VAR 0 3
73131: MINUS
73132: ST_TO_ADDR
// if y - r < 0 then
73133: LD_VAR 0 2
73137: PUSH
73138: LD_VAR 0 3
73142: MINUS
73143: PUSH
73144: LD_INT 0
73146: LESS
73147: IFFALSE 73159
// min_y := 0 else
73149: LD_ADDR_VAR 0 7
73153: PUSH
73154: LD_INT 0
73156: ST_TO_ADDR
73157: GO 73175
// min_y := y - r ;
73159: LD_ADDR_VAR 0 7
73163: PUSH
73164: LD_VAR 0 2
73168: PUSH
73169: LD_VAR 0 3
73173: MINUS
73174: ST_TO_ADDR
// max_x := x + r ;
73175: LD_ADDR_VAR 0 9
73179: PUSH
73180: LD_VAR 0 1
73184: PUSH
73185: LD_VAR 0 3
73189: PLUS
73190: ST_TO_ADDR
// max_y := y + r ;
73191: LD_ADDR_VAR 0 10
73195: PUSH
73196: LD_VAR 0 2
73200: PUSH
73201: LD_VAR 0 3
73205: PLUS
73206: ST_TO_ADDR
// for _x = min_x to max_x do
73207: LD_ADDR_VAR 0 5
73211: PUSH
73212: DOUBLE
73213: LD_VAR 0 8
73217: DEC
73218: ST_TO_ADDR
73219: LD_VAR 0 9
73223: PUSH
73224: FOR_TO
73225: IFFALSE 73326
// for _y = min_y to max_y do
73227: LD_ADDR_VAR 0 6
73231: PUSH
73232: DOUBLE
73233: LD_VAR 0 7
73237: DEC
73238: ST_TO_ADDR
73239: LD_VAR 0 10
73243: PUSH
73244: FOR_TO
73245: IFFALSE 73322
// begin if not ValidHex ( _x , _y ) then
73247: LD_VAR 0 5
73251: PPUSH
73252: LD_VAR 0 6
73256: PPUSH
73257: CALL_OW 488
73261: NOT
73262: IFFALSE 73266
// continue ;
73264: GO 73244
// if GetResourceTypeXY ( _x , _y ) then
73266: LD_VAR 0 5
73270: PPUSH
73271: LD_VAR 0 6
73275: PPUSH
73276: CALL_OW 283
73280: IFFALSE 73320
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73282: LD_ADDR_VAR 0 4
73286: PUSH
73287: LD_VAR 0 4
73291: PPUSH
73292: LD_VAR 0 4
73296: PUSH
73297: LD_INT 1
73299: PLUS
73300: PPUSH
73301: LD_VAR 0 5
73305: PUSH
73306: LD_VAR 0 6
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PPUSH
73315: CALL_OW 1
73319: ST_TO_ADDR
// end ;
73320: GO 73244
73322: POP
73323: POP
73324: GO 73224
73326: POP
73327: POP
// end ;
73328: LD_VAR 0 4
73332: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
73333: LD_INT 0
73335: PPUSH
73336: PPUSH
73337: PPUSH
73338: PPUSH
73339: PPUSH
73340: PPUSH
// if not units then
73341: LD_VAR 0 1
73345: NOT
73346: IFFALSE 73350
// exit ;
73348: GO 73751
// result := UnitFilter ( units , [ f_ok ] ) ;
73350: LD_ADDR_VAR 0 3
73354: PUSH
73355: LD_VAR 0 1
73359: PPUSH
73360: LD_INT 50
73362: PUSH
73363: EMPTY
73364: LIST
73365: PPUSH
73366: CALL_OW 72
73370: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73371: LD_ADDR_VAR 0 7
73375: PUSH
73376: LD_VAR 0 1
73380: PUSH
73381: LD_INT 1
73383: ARRAY
73384: PPUSH
73385: CALL_OW 255
73389: ST_TO_ADDR
// if not result then
73390: LD_VAR 0 3
73394: NOT
73395: IFFALSE 73399
// exit ;
73397: GO 73751
// for i in result do
73399: LD_ADDR_VAR 0 4
73403: PUSH
73404: LD_VAR 0 3
73408: PUSH
73409: FOR_IN
73410: IFFALSE 73749
// begin tag := GetTag ( i ) + 1 ;
73412: LD_ADDR_VAR 0 8
73416: PUSH
73417: LD_VAR 0 4
73421: PPUSH
73422: CALL_OW 110
73426: PUSH
73427: LD_INT 1
73429: PLUS
73430: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73431: LD_ADDR_VAR 0 6
73435: PUSH
73436: LD_VAR 0 4
73440: PPUSH
73441: CALL_OW 250
73445: PPUSH
73446: LD_VAR 0 4
73450: PPUSH
73451: CALL_OW 251
73455: PPUSH
73456: LD_INT 6
73458: PPUSH
73459: CALL 73075 0 3
73463: ST_TO_ADDR
// if cr then
73464: LD_VAR 0 6
73468: IFFALSE 73507
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73470: LD_VAR 0 4
73474: PPUSH
73475: LD_VAR 0 6
73479: PUSH
73480: LD_INT 1
73482: ARRAY
73483: PUSH
73484: LD_INT 1
73486: ARRAY
73487: PPUSH
73488: LD_VAR 0 6
73492: PUSH
73493: LD_INT 1
73495: ARRAY
73496: PUSH
73497: LD_INT 2
73499: ARRAY
73500: PPUSH
73501: CALL_OW 116
73505: GO 73747
// if path > tag then
73507: LD_VAR 0 2
73511: PUSH
73512: LD_VAR 0 8
73516: GREATER
73517: IFFALSE 73695
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
73519: LD_ADDR_VAR 0 5
73523: PUSH
73524: LD_INT 81
73526: PUSH
73527: LD_VAR 0 7
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: PUSH
73536: LD_INT 91
73538: PUSH
73539: LD_VAR 0 4
73543: PUSH
73544: LD_INT 12
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: LIST
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PPUSH
73556: CALL_OW 69
73560: ST_TO_ADDR
// if enemy then
73561: LD_VAR 0 5
73565: IFFALSE 73593
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73567: LD_VAR 0 4
73571: PPUSH
73572: LD_VAR 0 5
73576: PPUSH
73577: LD_VAR 0 4
73581: PPUSH
73582: CALL_OW 74
73586: PPUSH
73587: CALL_OW 115
73591: GO 73693
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73593: LD_VAR 0 4
73597: PPUSH
73598: LD_VAR 0 2
73602: PUSH
73603: LD_VAR 0 8
73607: ARRAY
73608: PUSH
73609: LD_INT 1
73611: ARRAY
73612: PPUSH
73613: LD_VAR 0 2
73617: PUSH
73618: LD_VAR 0 8
73622: ARRAY
73623: PUSH
73624: LD_INT 2
73626: ARRAY
73627: PPUSH
73628: CALL_OW 297
73632: PUSH
73633: LD_INT 6
73635: GREATER
73636: IFFALSE 73679
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73638: LD_VAR 0 4
73642: PPUSH
73643: LD_VAR 0 2
73647: PUSH
73648: LD_VAR 0 8
73652: ARRAY
73653: PUSH
73654: LD_INT 1
73656: ARRAY
73657: PPUSH
73658: LD_VAR 0 2
73662: PUSH
73663: LD_VAR 0 8
73667: ARRAY
73668: PUSH
73669: LD_INT 2
73671: ARRAY
73672: PPUSH
73673: CALL_OW 114
73677: GO 73693
// SetTag ( i , tag ) ;
73679: LD_VAR 0 4
73683: PPUSH
73684: LD_VAR 0 8
73688: PPUSH
73689: CALL_OW 109
// end else
73693: GO 73747
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73695: LD_ADDR_VAR 0 5
73699: PUSH
73700: LD_INT 81
73702: PUSH
73703: LD_VAR 0 7
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PPUSH
73712: CALL_OW 69
73716: ST_TO_ADDR
// if enemy then
73717: LD_VAR 0 5
73721: IFFALSE 73747
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73723: LD_VAR 0 4
73727: PPUSH
73728: LD_VAR 0 5
73732: PPUSH
73733: LD_VAR 0 4
73737: PPUSH
73738: CALL_OW 74
73742: PPUSH
73743: CALL_OW 115
// end ; end ;
73747: GO 73409
73749: POP
73750: POP
// end ; end_of_file
73751: LD_VAR 0 3
73755: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73756: LD_VAR 0 1
73760: PUSH
73761: LD_INT 200
73763: DOUBLE
73764: GREATEREQUAL
73765: IFFALSE 73773
73767: LD_INT 299
73769: DOUBLE
73770: LESSEQUAL
73771: IFTRUE 73775
73773: GO 73807
73775: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73776: LD_VAR 0 1
73780: PPUSH
73781: LD_VAR 0 2
73785: PPUSH
73786: LD_VAR 0 3
73790: PPUSH
73791: LD_VAR 0 4
73795: PPUSH
73796: LD_VAR 0 5
73800: PPUSH
73801: CALL 30318 0 5
73805: GO 73884
73807: LD_INT 300
73809: DOUBLE
73810: GREATEREQUAL
73811: IFFALSE 73819
73813: LD_INT 399
73815: DOUBLE
73816: LESSEQUAL
73817: IFTRUE 73821
73819: GO 73883
73821: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73822: LD_VAR 0 1
73826: PPUSH
73827: LD_VAR 0 2
73831: PPUSH
73832: LD_VAR 0 3
73836: PPUSH
73837: LD_VAR 0 4
73841: PPUSH
73842: LD_VAR 0 5
73846: PPUSH
73847: LD_VAR 0 6
73851: PPUSH
73852: LD_VAR 0 7
73856: PPUSH
73857: LD_VAR 0 8
73861: PPUSH
73862: LD_VAR 0 9
73866: PPUSH
73867: LD_VAR 0 10
73871: PPUSH
73872: LD_VAR 0 11
73876: PPUSH
73877: CALL 28216 0 11
73881: GO 73884
73883: POP
// end ;
73884: PPOPN 11
73886: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73887: LD_VAR 0 1
73891: PPUSH
73892: LD_VAR 0 2
73896: PPUSH
73897: LD_VAR 0 3
73901: PPUSH
73902: LD_VAR 0 4
73906: PPUSH
73907: LD_VAR 0 5
73911: PPUSH
73912: CALL 30310 0 5
// end ; end_of_file
73916: PPOPN 5
73918: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73919: LD_VAR 0 1
73923: PPUSH
73924: LD_VAR 0 2
73928: PPUSH
73929: LD_VAR 0 3
73933: PPUSH
73934: LD_VAR 0 4
73938: PPUSH
73939: LD_VAR 0 5
73943: PPUSH
73944: LD_VAR 0 6
73948: PPUSH
73949: CALL 16411 0 6
// end ;
73953: PPOPN 6
73955: END
